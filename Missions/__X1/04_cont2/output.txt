// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 2244 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5868 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 36080 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 30508 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 30508 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 30508 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 30508 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 30508 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 30508 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 30508 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 30508 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 30508 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 30508 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// if debug then
1535: LD_EXP 1
1539: IFFALSE 1758
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1541: LD_ADDR_EXP 30
1545: PUSH
1546: LD_INT 13
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 27
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1000
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 3
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 13
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 25
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 1000
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 3
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 13
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 27
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1000
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 13
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 27
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 40
1730: PUSH
1731: LD_INT 40
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// uc_side := 5 ;
1758: LD_ADDR_OWVAR 20
1762: PUSH
1763: LD_INT 5
1765: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1766: LD_ADDR_EXP 26
1770: PUSH
1771: LD_STRING Abdul
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 30508 0 3
1784: ST_TO_ADDR
// end ;
1785: LD_VAR 0 1
1789: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1790: LD_STRING 04_1_KaganCaptured
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 30
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PPUSH
1811: CALL_OW 69
1815: NOT
1816: AND
1817: PUSH
1818: LD_INT 124
1820: PPUSH
1821: LD_INT 26
1823: PPUSH
1824: CALL_OW 428
1828: PUSH
1829: LD_INT 0
1831: EQUAL
1832: PUSH
1833: LD_INT 124
1835: PPUSH
1836: LD_INT 26
1838: PPUSH
1839: CALL_OW 428
1843: PPUSH
1844: CALL_OW 255
1848: PUSH
1849: LD_INT 2
1851: EQUAL
1852: XOR
1853: AND
1854: IFFALSE 2241
1856: GO 1858
1858: DISABLE
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
// begin enable ;
1863: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1864: LD_EXP 33
1868: NOT
1869: PUSH
1870: LD_EXP 33
1874: PUSH
1875: LD_INT 4
1877: GREATER
1878: OR
1879: IFFALSE 1889
// cargoCounter := 1 ;
1881: LD_ADDR_EXP 33
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1889: LD_ADDR_VAR 0 2
1893: PUSH
1894: LD_INT 142
1896: PUSH
1897: LD_INT 15
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 129
1906: PUSH
1907: LD_INT 11
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 138
1916: PUSH
1917: LD_INT 9
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 133
1926: PUSH
1927: LD_INT 10
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: ST_TO_ADDR
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1956: LD_INT 5
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 13
1964: PPUSH
1965: LD_INT 2
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 32
1973: PPUSH
1974: LD_INT 70
1976: PPUSH
1977: CALL 336 0 7
// veh := CreateVehicle ;
1981: LD_ADDR_VAR 0 1
1985: PUSH
1986: CALL_OW 45
1990: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1991: LD_VAR 0 1
1995: PPUSH
1996: LD_INT 3
1998: PPUSH
1999: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 8
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// if not cargoDriver then
2018: LD_EXP 32
2022: NOT
2023: IFFALSE 2048
// begin PrepareHuman ( false , 1 , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: CALL_OW 380
// cargoDriver := CreateHuman ;
2038: LD_ADDR_EXP 32
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2048: LD_EXP 32
2052: PPUSH
2053: LD_VAR 0 1
2057: PPUSH
2058: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2062: LD_VAR 0 1
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 100
2072: PPUSH
2073: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2077: LD_VAR 0 1
2081: PPUSH
2082: LD_VAR 0 2
2086: PUSH
2087: LD_EXP 33
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PPUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_EXP 33
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: CALL_OW 111
// AddComUnload ( veh ) ;
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2125: LD_VAR 0 1
2129: PPUSH
2130: LD_INT 133
2132: PPUSH
2133: LD_INT 2
2135: PPUSH
2136: CALL_OW 171
// wait ( 0 0$5 ) ;
2140: LD_INT 175
2142: PPUSH
2143: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// if not HasTask ( veh ) then
2154: LD_VAR 0 1
2158: PPUSH
2159: CALL_OW 314
2163: NOT
2164: IFFALSE 2181
// ComMoveXY ( veh , 133 , 2 ) ;
2166: LD_VAR 0 1
2170: PPUSH
2171: LD_INT 133
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2181: LD_VAR 0 1
2185: PPUSH
2186: LD_INT 133
2188: PPUSH
2189: LD_INT 2
2191: PPUSH
2192: CALL_OW 307
2196: PUSH
2197: LD_VAR 0 1
2201: PPUSH
2202: LD_INT 8
2204: PPUSH
2205: CALL_OW 308
2209: OR
2210: IFFALSE 2147
// RemoveUnit ( cargoDriver ) ;
2212: LD_EXP 32
2216: PPUSH
2217: CALL_OW 64
// RemoveUnit ( veh ) ;
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 64
// if tick >= 20 20$00 then
2230: LD_OWVAR 1
2234: PUSH
2235: LD_INT 42000
2237: GREATEREQUAL
2238: IFFALSE 2241
// disable ;
2240: DISABLE
// end ; end_of_file
2241: PPOPN 2
2243: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
2254: PPUSH
// uc_side := 3 ;
2255: LD_ADDR_OWVAR 20
2259: PUSH
2260: LD_INT 3
2262: ST_TO_ADDR
// uc_nation := 3 ;
2263: LD_ADDR_OWVAR 21
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// ruForce := [ ] ;
2271: LD_ADDR_EXP 37
2275: PUSH
2276: EMPTY
2277: ST_TO_ADDR
// ruMech := [ ] ;
2278: LD_ADDR_EXP 39
2282: PUSH
2283: EMPTY
2284: ST_TO_ADDR
// ruEng := [ ] ;
2285: LD_ADDR_EXP 38
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// ruSci := [ ] ;
2292: LD_ADDR_EXP 40
2296: PUSH
2297: EMPTY
2298: ST_TO_ADDR
// ruMobile := [ ] ;
2299: LD_ADDR_EXP 41
2303: PUSH
2304: EMPTY
2305: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2306: LD_ADDR_EXP 34
2310: PUSH
2311: LD_STRING Burlak
2313: PPUSH
2314: LD_INT 0
2316: PPUSH
2317: LD_STRING 
2319: PPUSH
2320: CALL 30508 0 3
2324: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2325: LD_ADDR_EXP 35
2329: PUSH
2330: LD_STRING Gaydar
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: LD_STRING 
2338: PPUSH
2339: CALL 30508 0 3
2343: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2344: LD_ADDR_EXP 36
2348: PUSH
2349: LD_STRING Kuzmov
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: LD_STRING 
2357: PPUSH
2358: CALL 30508 0 3
2362: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2363: LD_EXP 36
2367: PPUSH
2368: LD_INT 200
2370: PPUSH
2371: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2375: LD_INT 200
2377: PPUSH
2378: LD_STRING chuikov
2380: PPUSH
2381: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2385: LD_INT 200
2387: PPUSH
2388: CALL_OW 274
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: LD_INT 800
2398: PUSH
2399: LD_INT 1000
2401: PUSH
2402: LD_INT 1250
2404: PUSH
2405: LD_INT 1300
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: PUSH
2414: LD_OWVAR 67
2418: ARRAY
2419: PPUSH
2420: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2424: LD_INT 200
2426: PPUSH
2427: CALL_OW 274
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: LD_INT 160
2437: PPUSH
2438: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2442: LD_INT 225
2444: PPUSH
2445: CALL_OW 274
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_INT 200
2455: PPUSH
2456: CALL_OW 277
// oil := 150 ;
2460: LD_ADDR_VAR 0 9
2464: PUSH
2465: LD_INT 150
2467: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2468: LD_EXP 5
2472: PUSH
2473: LD_INT 94500
2475: PUSH
2476: LD_INT 84000
2478: PUSH
2479: LD_INT 73500
2481: PUSH
2482: LD_INT 67200
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: LD_OWVAR 67
2495: ARRAY
2496: GREATEREQUAL
2497: IFFALSE 2652
// begin oil := 450 ;
2499: LD_ADDR_VAR 0 9
2503: PUSH
2504: LD_INT 450
2506: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 123
2514: PUSH
2515: LD_INT 17
2517: PUSH
2518: LD_INT 3
2520: PUSH
2521: LD_INT 31
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 152
2532: PUSH
2533: LD_INT 38
2535: PUSH
2536: LD_INT 3
2538: PUSH
2539: LD_INT 31
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 81
2550: PUSH
2551: LD_INT 6
2553: PUSH
2554: LD_INT 4
2556: PUSH
2557: LD_INT 31
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 113
2568: PUSH
2569: LD_INT 67
2571: PUSH
2572: LD_INT 4
2574: PUSH
2575: LD_INT 32
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: ST_TO_ADDR
// for i in tmp do
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_VAR 0 7
2599: PUSH
2600: FOR_IN
2601: IFFALSE 2650
// begin bc_type := i [ 4 ] ;
2603: LD_ADDR_OWVAR 42
2607: PUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_INT 4
2615: ARRAY
2616: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2617: LD_VAR 0 4
2621: PUSH
2622: LD_INT 1
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 4
2630: PUSH
2631: LD_INT 2
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 3
2642: ARRAY
2643: PPUSH
2644: CALL_OW 47
// end ;
2648: GO 2600
2650: POP
2651: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2652: LD_INT 225
2654: PPUSH
2655: CALL_OW 274
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: LD_VAR 0 9
2667: PPUSH
2668: CALL_OW 277
// if Difficulty > 1 then
2672: LD_OWVAR 67
2676: PUSH
2677: LD_INT 1
2679: GREATER
2680: IFFALSE 2775
// begin bc_type := b_bunker ;
2682: LD_ADDR_OWVAR 42
2686: PUSH
2687: LD_INT 32
2689: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2690: LD_ADDR_VAR 0 7
2694: PUSH
2695: LD_INT 121
2697: PUSH
2698: LD_INT 85
2700: PUSH
2701: LD_INT 5
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 93
2711: PUSH
2712: LD_INT 72
2714: PUSH
2715: LD_INT 1
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: ST_TO_ADDR
// for i in tmp do
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: LD_VAR 0 7
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2773
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2740: LD_VAR 0 4
2744: PUSH
2745: LD_INT 1
2747: ARRAY
2748: PPUSH
2749: LD_VAR 0 4
2753: PUSH
2754: LD_INT 2
2756: ARRAY
2757: PPUSH
2758: LD_VAR 0 4
2762: PUSH
2763: LD_INT 3
2765: ARRAY
2766: PPUSH
2767: CALL_OW 47
2771: GO 2737
2773: POP
2774: POP
// end ; base := GetBase ( ruMainBase ) ;
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 200
2782: PPUSH
2783: CALL_OW 274
2787: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2788: LD_ADDR_VAR 0 3
2792: PUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: CALL_OW 417
2802: ST_TO_ADDR
// for b in blist do
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_VAR 0 3
2812: PUSH
2813: FOR_IN
2814: IFFALSE 3265
// begin if b [ 1 ] = b_factory then
2816: LD_VAR 0 5
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: PUSH
2825: LD_INT 3
2827: EQUAL
2828: IFFALSE 2979
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2830: LD_ADDR_VAR 0 8
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 2
2842: ARRAY
2843: PPUSH
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 3
2851: ARRAY
2852: PPUSH
2853: CALL_OW 428
2857: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2858: LD_ADDR_VAR 0 4
2862: PUSH
2863: DOUBLE
2864: LD_INT 1
2866: DEC
2867: ST_TO_ADDR
2868: LD_INT 2
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: LD_OWVAR 67
2878: PLUS
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: LD_EXP 10
2888: PUSH
2889: LD_INT 3
2891: GREATER
2892: PUSH
2893: LD_INT 1
2895: PLUS
2896: ARRAY
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2975
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: LD_INT 1
2909: PUSH
2910: LD_OWVAR 67
2914: PLUS
2915: PPUSH
2916: CALL_OW 380
// un := CreateHuman ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: CALL_OW 44
2929: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2930: LD_ADDR_EXP 39
2934: PUSH
2935: LD_EXP 39
2939: PPUSH
2940: LD_EXP 39
2944: PUSH
2945: LD_INT 1
2947: PLUS
2948: PPUSH
2949: LD_VAR 0 6
2953: PPUSH
2954: CALL_OW 1
2958: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2959: LD_VAR 0 6
2963: PPUSH
2964: LD_VAR 0 8
2968: PPUSH
2969: CALL_OW 52
// end ;
2973: GO 2898
2975: POP
2976: POP
// end else
2977: GO 3263
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2979: LD_VAR 0 5
2983: PUSH
2984: LD_INT 1
2986: ARRAY
2987: PUSH
2988: LD_INT 6
2990: PUSH
2991: LD_INT 7
2993: PUSH
2994: LD_INT 8
2996: PUSH
2997: LD_INT 10
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: IN
3006: IFFALSE 3116
// begin for i := 1 to 2 do
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: DOUBLE
3014: LD_INT 1
3016: DEC
3017: ST_TO_ADDR
3018: LD_INT 2
3020: PUSH
3021: FOR_TO
3022: IFFALSE 3112
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3024: LD_INT 0
3026: PPUSH
3027: LD_INT 4
3029: PPUSH
3030: LD_OWVAR 67
3034: PPUSH
3035: CALL_OW 380
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3049: LD_ADDR_EXP 40
3053: PUSH
3054: LD_EXP 40
3058: PPUSH
3059: LD_EXP 40
3063: PUSH
3064: LD_INT 1
3066: PLUS
3067: PPUSH
3068: LD_VAR 0 6
3072: PPUSH
3073: CALL_OW 1
3077: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3078: LD_VAR 0 6
3082: PPUSH
3083: LD_VAR 0 5
3087: PUSH
3088: LD_INT 2
3090: ARRAY
3091: PPUSH
3092: LD_VAR 0 5
3096: PUSH
3097: LD_INT 3
3099: ARRAY
3100: PPUSH
3101: CALL_OW 428
3105: PPUSH
3106: CALL_OW 52
// end ;
3110: GO 3021
3112: POP
3113: POP
// end else
3114: GO 3263
// if b [ 1 ] = b_warehouse then
3116: LD_VAR 0 5
3120: PUSH
3121: LD_INT 1
3123: ARRAY
3124: PUSH
3125: LD_INT 1
3127: EQUAL
3128: IFFALSE 3263
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3130: LD_ADDR_VAR 0 4
3134: PUSH
3135: DOUBLE
3136: LD_INT 1
3138: DEC
3139: ST_TO_ADDR
3140: LD_INT 1
3142: PUSH
3143: LD_INT 1
3145: PUSH
3146: LD_OWVAR 67
3150: PLUS
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_EXP 10
3160: PUSH
3161: LD_INT 3
3163: GREATER
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: ARRAY
3169: PUSH
3170: FOR_TO
3171: IFFALSE 3261
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3173: LD_INT 0
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: LD_OWVAR 67
3183: PPUSH
3184: CALL_OW 380
// un := CreateHuman ;
3188: LD_ADDR_VAR 0 6
3192: PUSH
3193: CALL_OW 44
3197: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3198: LD_ADDR_EXP 38
3202: PUSH
3203: LD_EXP 38
3207: PPUSH
3208: LD_EXP 38
3212: PUSH
3213: LD_INT 1
3215: PLUS
3216: PPUSH
3217: LD_VAR 0 6
3221: PPUSH
3222: CALL_OW 1
3226: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3227: LD_VAR 0 6
3231: PPUSH
3232: LD_VAR 0 5
3236: PUSH
3237: LD_INT 2
3239: ARRAY
3240: PPUSH
3241: LD_VAR 0 5
3245: PUSH
3246: LD_INT 3
3248: ARRAY
3249: PPUSH
3250: CALL_OW 428
3254: PPUSH
3255: CALL_OW 52
// end ;
3259: GO 3170
3261: POP
3262: POP
// end ; end ;
3263: GO 2813
3265: POP
3266: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3267: LD_ADDR_VAR 0 3
3271: PUSH
3272: LD_INT 22
3274: PUSH
3275: LD_INT 3
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 21
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PPUSH
3296: CALL_OW 69
3300: ST_TO_ADDR
// for b in blist do
3301: LD_ADDR_VAR 0 5
3305: PUSH
3306: LD_VAR 0 3
3310: PUSH
3311: FOR_IN
3312: IFFALSE 3334
// SetBLevel ( b , 3 + Difficulty ) ;
3314: LD_VAR 0 5
3318: PPUSH
3319: LD_INT 3
3321: PUSH
3322: LD_OWVAR 67
3326: PLUS
3327: PPUSH
3328: CALL_OW 241
3332: GO 3311
3334: POP
3335: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3336: LD_ADDR_VAR 0 3
3340: PUSH
3341: LD_INT 22
3343: PUSH
3344: LD_INT 3
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 30
3353: PUSH
3354: LD_INT 32
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 69
3369: ST_TO_ADDR
// for b in blist do
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 3
3379: PUSH
3380: FOR_IN
3381: IFFALSE 3490
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3383: LD_INT 0
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: LD_INT 1
3391: PUSH
3392: LD_OWVAR 67
3396: PLUS
3397: PPUSH
3398: CALL_OW 380
// un := CreateHuman ;
3402: LD_ADDR_VAR 0 6
3406: PUSH
3407: CALL_OW 44
3411: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3412: LD_ADDR_EXP 37
3416: PUSH
3417: LD_EXP 37
3421: PPUSH
3422: LD_EXP 37
3426: PUSH
3427: LD_INT 1
3429: PLUS
3430: PPUSH
3431: LD_VAR 0 6
3435: PPUSH
3436: CALL_OW 1
3440: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3441: LD_VAR 0 6
3445: PPUSH
3446: LD_VAR 0 5
3450: PPUSH
3451: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3455: LD_VAR 0 5
3459: PPUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 43
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_VAR 0 5
3474: PUSH
3475: LD_INT 2
3477: MOD
3478: PUSH
3479: LD_INT 1
3481: PLUS
3482: ARRAY
3483: PPUSH
3484: CALL_OW 431
// end ;
3488: GO 3380
3490: POP
3491: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3492: LD_ADDR_VAR 0 3
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_INT 3
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 30
3509: PUSH
3510: LD_INT 31
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 69
3525: ST_TO_ADDR
// for b in blist do
3526: LD_ADDR_VAR 0 5
3530: PUSH
3531: LD_VAR 0 3
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3636
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3539: LD_INT 0
3541: PPUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_INT 1
3547: PUSH
3548: LD_OWVAR 67
3552: PLUS
3553: PPUSH
3554: CALL_OW 380
// un := CreateHuman ;
3558: LD_ADDR_VAR 0 6
3562: PUSH
3563: CALL_OW 44
3567: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3568: LD_ADDR_EXP 37
3572: PUSH
3573: LD_EXP 37
3577: PPUSH
3578: LD_EXP 37
3582: PUSH
3583: LD_INT 1
3585: PLUS
3586: PPUSH
3587: LD_VAR 0 6
3591: PPUSH
3592: CALL_OW 1
3596: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3597: LD_VAR 0 6
3601: PPUSH
3602: LD_VAR 0 5
3606: PPUSH
3607: CALL_OW 254
3611: PUSH
3612: LD_INT 3
3614: PLUS
3615: PPUSH
3616: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3620: LD_VAR 0 6
3624: PPUSH
3625: LD_VAR 0 5
3629: PPUSH
3630: CALL_OW 52
// end ;
3634: GO 3536
3636: POP
3637: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3638: LD_ADDR_VAR 0 3
3642: PUSH
3643: LD_INT 22
3645: PUSH
3646: LD_INT 3
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 2
3655: PUSH
3656: LD_INT 30
3658: PUSH
3659: LD_INT 4
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 30
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 69
3689: ST_TO_ADDR
// for b in blist do
3690: LD_ADDR_VAR 0 5
3694: PUSH
3695: LD_VAR 0 3
3699: PUSH
3700: FOR_IN
3701: IFFALSE 3797
// begin for i := 1 to 2 do
3703: LD_ADDR_VAR 0 4
3707: PUSH
3708: DOUBLE
3709: LD_INT 1
3711: DEC
3712: ST_TO_ADDR
3713: LD_INT 2
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3793
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3719: LD_INT 0
3721: PPUSH
3722: LD_INT 1
3724: PPUSH
3725: LD_INT 1
3727: PUSH
3728: LD_OWVAR 67
3732: PLUS
3733: PPUSH
3734: CALL_OW 380
// un := CreateHuman ;
3738: LD_ADDR_VAR 0 6
3742: PUSH
3743: CALL_OW 44
3747: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3748: LD_ADDR_EXP 37
3752: PUSH
3753: LD_EXP 37
3757: PPUSH
3758: LD_EXP 37
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: PPUSH
3767: LD_VAR 0 6
3771: PPUSH
3772: CALL_OW 1
3776: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3777: LD_VAR 0 6
3781: PPUSH
3782: LD_VAR 0 5
3786: PPUSH
3787: CALL_OW 52
// end ;
3791: GO 3716
3793: POP
3794: POP
// end ;
3795: GO 3700
3797: POP
3798: POP
// if ibrahimOnRuSide then
3799: LD_EXP 3
3803: IFFALSE 3901
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3805: LD_ADDR_EXP 21
3809: PUSH
3810: LD_STRING IbrahimRu
3812: PPUSH
3813: LD_INT 0
3815: PPUSH
3816: LD_STRING 
3818: PPUSH
3819: CALL 30508 0 3
3823: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3824: LD_EXP 21
3828: PPUSH
3829: LD_INT 121
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 48
// ComHold ( Ibrahim ) ;
3842: LD_EXP 21
3846: PPUSH
3847: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 2
3859: PPUSH
3860: CALL_OW 380
// ruSol := CreateHuman ;
3864: LD_ADDR_EXP 42
3868: PUSH
3869: CALL_OW 44
3873: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3874: LD_EXP 42
3878: PPUSH
3879: LD_INT 121
3881: PPUSH
3882: LD_INT 75
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 48
// ComHold ( ruSol ) ;
3892: LD_EXP 42
3896: PPUSH
3897: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3901: LD_ADDR_VAR 0 4
3905: PUSH
3906: DOUBLE
3907: LD_INT 1
3909: DEC
3910: ST_TO_ADDR
3911: LD_INT 2
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_OWVAR 67
3921: PLUS
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_EXP 10
3931: PUSH
3932: LD_INT 3
3934: GREATER
3935: PUSH
3936: LD_INT 1
3938: PLUS
3939: ARRAY
3940: PUSH
3941: FOR_TO
3942: IFFALSE 4011
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3944: LD_VAR 0 8
3948: PPUSH
3949: LD_INT 21
3951: PUSH
3952: LD_INT 23
3954: PUSH
3955: LD_INT 24
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: PUSH
3963: LD_VAR 0 4
3967: PUSH
3968: LD_INT 3
3970: MOD
3971: PUSH
3972: LD_INT 1
3974: PLUS
3975: ARRAY
3976: PPUSH
3977: LD_INT 1
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 43
3985: PUSH
3986: LD_INT 44
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 2
3998: PPUSH
3999: CALL_OW 12
4003: ARRAY
4004: PPUSH
4005: CALL_OW 185
4009: GO 3941
4011: POP
4012: POP
// end ;
4013: LD_VAR 0 1
4017: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4018: LD_EXP 41
4022: PUSH
4023: LD_EXP 4
4027: NOT
4028: AND
4029: IFFALSE 4517
4031: GO 4033
4033: DISABLE
4034: LD_INT 0
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
4040: PPUSH
4041: PPUSH
// begin enable ;
4042: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4043: LD_ADDR_VAR 0 2
4047: PUSH
4048: LD_EXP 41
4052: PPUSH
4053: LD_INT 21
4055: PUSH
4056: LD_INT 2
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PPUSH
4063: CALL_OW 72
4067: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4068: LD_ADDR_VAR 0 4
4072: PUSH
4073: LD_INT 81
4075: PUSH
4076: LD_INT 3
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: LD_INT 2
4085: PUSH
4086: LD_INT 95
4088: PUSH
4089: LD_INT 4
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 95
4098: PUSH
4099: LD_INT 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 95
4108: PUSH
4109: LD_INT 6
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 95
4118: PUSH
4119: LD_INT 7
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PPUSH
4137: CALL_OW 69
4141: ST_TO_ADDR
// for i in filter do
4142: LD_ADDR_VAR 0 1
4146: PUSH
4147: LD_VAR 0 2
4151: PUSH
4152: FOR_IN
4153: IFFALSE 4515
// begin tmp := IsDrivenBy ( i ) ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: LD_VAR 0 1
4164: PPUSH
4165: CALL_OW 311
4169: ST_TO_ADDR
// tag := GetTag ( i ) ;
4170: LD_ADDR_VAR 0 6
4174: PUSH
4175: LD_VAR 0 1
4179: PPUSH
4180: CALL_OW 110
4184: ST_TO_ADDR
// if not tmp then
4185: LD_VAR 0 3
4189: NOT
4190: IFFALSE 4194
// continue ;
4192: GO 4152
// if GetFuel ( i ) > 90 and tag = 2 then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 261
4203: PUSH
4204: LD_INT 90
4206: GREATER
4207: PUSH
4208: LD_VAR 0 6
4212: PUSH
4213: LD_INT 2
4215: EQUAL
4216: AND
4217: IFFALSE 4233
// SetTag ( i , 0 ) else
4219: LD_VAR 0 1
4223: PPUSH
4224: LD_INT 0
4226: PPUSH
4227: CALL_OW 109
4231: GO 4276
// if GetTag ( i ) = 2 then
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 110
4242: PUSH
4243: LD_INT 2
4245: EQUAL
4246: IFFALSE 4276
// begin x := rand ( 1 , 2 ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_INT 1
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 12
4263: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4264: LD_VAR 0 1
4268: PPUSH
4269: LD_INT 200
4271: PPUSH
4272: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4276: LD_VAR 0 1
4280: PPUSH
4281: CALL_OW 256
4285: PUSH
4286: LD_INT 650
4288: GREATEREQUAL
4289: PUSH
4290: LD_VAR 0 6
4294: NOT
4295: AND
4296: IFFALSE 4322
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4298: LD_VAR 0 1
4302: PPUSH
4303: LD_VAR 0 4
4307: PPUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 74
4317: PPUSH
4318: CALL_OW 115
// if GetLives ( i ) < 650 and not tag then
4322: LD_VAR 0 1
4326: PPUSH
4327: CALL_OW 256
4331: PUSH
4332: LD_INT 650
4334: LESS
4335: PUSH
4336: LD_VAR 0 6
4340: NOT
4341: AND
4342: IFFALSE 4371
// begin SetTag ( i , 1 ) ;
4344: LD_VAR 0 1
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4356: LD_VAR 0 1
4360: PPUSH
4361: LD_INT 112
4363: PPUSH
4364: LD_INT 119
4366: PPUSH
4367: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4371: LD_VAR 0 1
4375: PPUSH
4376: CALL_OW 110
4380: PUSH
4381: LD_INT 1
4383: EQUAL
4384: PUSH
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_INT 112
4392: PPUSH
4393: LD_INT 119
4395: PPUSH
4396: CALL_OW 297
4400: PUSH
4401: LD_INT 9
4403: LESS
4404: AND
4405: PUSH
4406: LD_VAR 0 3
4410: AND
4411: IFFALSE 4513
// begin ComExitVehicle ( tmp ) ;
4413: LD_VAR 0 3
4417: PPUSH
4418: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4422: LD_VAR 0 3
4426: PPUSH
4427: LD_VAR 0 1
4431: PPUSH
4432: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4436: LD_INT 35
4438: PPUSH
4439: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4443: LD_VAR 0 1
4447: PPUSH
4448: CALL_OW 256
4452: PUSH
4453: LD_INT 1000
4455: EQUAL
4456: IFFALSE 4436
// ComEnterUnit ( tmp , i ) ;
4458: LD_VAR 0 3
4462: PPUSH
4463: LD_VAR 0 1
4467: PPUSH
4468: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4472: LD_VAR 0 1
4476: PPUSH
4477: CALL_OW 261
4481: PUSH
4482: LD_INT 50
4484: LESSEQUAL
4485: IFFALSE 4501
// SetTag ( i , 2 ) else
4487: LD_VAR 0 1
4491: PPUSH
4492: LD_INT 2
4494: PPUSH
4495: CALL_OW 109
4499: GO 4513
// SetTag ( i , 0 ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 109
// end ; end ;
4513: GO 4152
4515: POP
4516: POP
// end ;
4517: PPOPN 6
4519: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4520: LD_EXP 4
4524: NOT
4525: PUSH
4526: LD_EXP 38
4530: AND
4531: IFFALSE 4792
4533: GO 4535
4535: DISABLE
4536: LD_INT 0
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
// begin enable ;
4542: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: LD_INT 3
4550: PPUSH
4551: LD_INT 22
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 21
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 3
4573: PUSH
4574: LD_INT 24
4576: PUSH
4577: LD_INT 1000
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 70
4597: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: LD_EXP 38
4607: PPUSH
4608: LD_INT 50
4610: PUSH
4611: EMPTY
4612: LIST
4613: PPUSH
4614: CALL_OW 72
4618: ST_TO_ADDR
// if filter and tmp then
4619: LD_VAR 0 2
4623: PUSH
4624: LD_VAR 0 3
4628: AND
4629: IFFALSE 4721
// begin for i in tmp do
4631: LD_ADDR_VAR 0 1
4635: PUSH
4636: LD_VAR 0 3
4640: PUSH
4641: FOR_IN
4642: IFFALSE 4717
// begin if GetTag ( i ) = tEscape then
4644: LD_VAR 0 1
4648: PPUSH
4649: CALL_OW 110
4653: PUSH
4654: LD_EXP 17
4658: EQUAL
4659: IFFALSE 4663
// continue ;
4661: GO 4641
// if IsInUnit ( i ) then
4663: LD_VAR 0 1
4667: PPUSH
4668: CALL_OW 310
4672: IFFALSE 4685
// ComExitBuilding ( i ) else
4674: LD_VAR 0 1
4678: PPUSH
4679: CALL_OW 122
4683: GO 4715
// if not HasTask ( i ) then
4685: LD_VAR 0 1
4689: PPUSH
4690: CALL_OW 314
4694: NOT
4695: IFFALSE 4715
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4697: LD_VAR 0 1
4701: PPUSH
4702: LD_VAR 0 2
4706: PUSH
4707: LD_INT 1
4709: ARRAY
4710: PPUSH
4711: CALL_OW 130
// end ;
4715: GO 4641
4717: POP
4718: POP
// end else
4719: GO 4792
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4721: LD_VAR 0 3
4725: PPUSH
4726: LD_INT 3
4728: PUSH
4729: LD_INT 54
4731: PUSH
4732: EMPTY
4733: LIST
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PPUSH
4739: CALL_OW 72
4743: IFFALSE 4792
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4745: LD_ADDR_VAR 0 1
4749: PUSH
4750: LD_VAR 0 3
4754: PPUSH
4755: LD_INT 3
4757: PUSH
4758: LD_INT 54
4760: PUSH
4761: EMPTY
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 72
4772: PUSH
4773: FOR_IN
4774: IFFALSE 4790
// ComEnterUnit ( i , ruMainBase ) ;
4776: LD_VAR 0 1
4780: PPUSH
4781: LD_INT 200
4783: PPUSH
4784: CALL_OW 120
4788: GO 4773
4790: POP
4791: POP
// end ; end ;
4792: PPOPN 4
4794: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4795: LD_EXP 4
4799: NOT
4800: PUSH
4801: LD_EXP 40
4805: AND
4806: IFFALSE 5085
4808: GO 4810
4810: DISABLE
4811: LD_INT 0
4813: PPUSH
4814: PPUSH
4815: PPUSH
4816: PPUSH
// begin enable ;
4817: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4818: LD_ADDR_VAR 0 2
4822: PUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 22
4828: PUSH
4829: LD_INT 3
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 21
4838: PUSH
4839: LD_INT 1
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 3
4848: PUSH
4849: LD_INT 24
4851: PUSH
4852: LD_INT 1000
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PPUSH
4868: CALL_OW 70
4872: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4873: LD_ADDR_VAR 0 3
4877: PUSH
4878: LD_EXP 40
4882: PPUSH
4883: LD_INT 50
4885: PUSH
4886: EMPTY
4887: LIST
4888: PPUSH
4889: CALL_OW 72
4893: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4894: LD_ADDR_VAR 0 4
4898: PUSH
4899: LD_INT 118
4901: PPUSH
4902: LD_INT 121
4904: PPUSH
4905: CALL_OW 428
4909: ST_TO_ADDR
// if filter and tmp then
4910: LD_VAR 0 2
4914: PUSH
4915: LD_VAR 0 3
4919: AND
4920: IFFALSE 5012
// begin for i in tmp do
4922: LD_ADDR_VAR 0 1
4926: PUSH
4927: LD_VAR 0 3
4931: PUSH
4932: FOR_IN
4933: IFFALSE 5008
// begin if GetTag ( i ) = tEscape then
4935: LD_VAR 0 1
4939: PPUSH
4940: CALL_OW 110
4944: PUSH
4945: LD_EXP 17
4949: EQUAL
4950: IFFALSE 4954
// continue ;
4952: GO 4932
// if IsInUnit ( i ) then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 310
4963: IFFALSE 4976
// ComExitBuilding ( i ) else
4965: LD_VAR 0 1
4969: PPUSH
4970: CALL_OW 122
4974: GO 5006
// if not HasTask ( i ) then
4976: LD_VAR 0 1
4980: PPUSH
4981: CALL_OW 314
4985: NOT
4986: IFFALSE 5006
// ComHeal ( i , filter [ 1 ] ) ;
4988: LD_VAR 0 1
4992: PPUSH
4993: LD_VAR 0 2
4997: PUSH
4998: LD_INT 1
5000: ARRAY
5001: PPUSH
5002: CALL_OW 128
// end ;
5006: GO 4932
5008: POP
5009: POP
// end else
5010: GO 5085
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5012: LD_VAR 0 3
5016: PPUSH
5017: LD_INT 3
5019: PUSH
5020: LD_INT 54
5022: PUSH
5023: EMPTY
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 72
5034: IFFALSE 5085
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5036: LD_ADDR_VAR 0 1
5040: PUSH
5041: LD_VAR 0 3
5045: PPUSH
5046: LD_INT 3
5048: PUSH
5049: LD_INT 54
5051: PUSH
5052: EMPTY
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: PUSH
5064: FOR_IN
5065: IFFALSE 5083
// ComEnterUnit ( i , lab ) ;
5067: LD_VAR 0 1
5071: PPUSH
5072: LD_VAR 0 4
5076: PPUSH
5077: CALL_OW 120
5081: GO 5064
5083: POP
5084: POP
// end ; end ; end_of_file
5085: PPOPN 4
5087: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5088: LD_VAR 0 1
5092: PPUSH
5093: CALL 26219 0 1
// if un = Heike then
5097: LD_VAR 0 1
5101: PUSH
5102: LD_EXP 18
5106: EQUAL
5107: IFFALSE 5116
// YouLost ( Heike ) ;
5109: LD_STRING Heike
5111: PPUSH
5112: CALL_OW 104
// if un in ruEng then
5116: LD_VAR 0 1
5120: PUSH
5121: LD_EXP 38
5125: IN
5126: IFFALSE 5144
// ruEng := ruEng diff un ;
5128: LD_ADDR_EXP 38
5132: PUSH
5133: LD_EXP 38
5137: PUSH
5138: LD_VAR 0 1
5142: DIFF
5143: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5144: LD_VAR 0 1
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 21
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: PPUSH
5184: CALL_OW 69
5188: IN
5189: IFFALSE 5205
// loseCounter := loseCounter + 1 ;
5191: LD_ADDR_EXP 6
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: ST_TO_ADDR
// end ;
5205: PPOPN 1
5207: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5208: LD_INT 0
5210: PPUSH
5211: PPUSH
// begin if un in ruMobile then
5212: LD_VAR 0 2
5216: PUSH
5217: LD_EXP 41
5221: IN
5222: IFFALSE 5381
// begin ruMobile := ruMobile diff un ;
5224: LD_ADDR_EXP 41
5228: PUSH
5229: LD_EXP 41
5233: PUSH
5234: LD_VAR 0 2
5238: DIFF
5239: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5240: LD_ADDR_VAR 0 5
5244: PUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: CALL_OW 264
5254: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5255: LD_ADDR_VAR 0 6
5259: PUSH
5260: LD_INT 110
5262: PPUSH
5263: LD_INT 126
5265: PPUSH
5266: CALL_OW 428
5270: ST_TO_ADDR
// if not driver or not fac then
5271: LD_VAR 0 1
5275: NOT
5276: PUSH
5277: LD_VAR 0 6
5281: NOT
5282: OR
5283: IFFALSE 5287
// exit ;
5285: GO 5381
// AddComMoveXY ( driver , 111 , 121 ) ;
5287: LD_VAR 0 1
5291: PPUSH
5292: LD_INT 111
5294: PPUSH
5295: LD_INT 121
5297: PPUSH
5298: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5302: LD_VAR 0 1
5306: PPUSH
5307: LD_VAR 0 6
5311: PPUSH
5312: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5316: LD_INT 35
5318: PPUSH
5319: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5323: LD_VAR 0 1
5327: PPUSH
5328: CALL_OW 301
5332: PUSH
5333: LD_VAR 0 1
5337: PPUSH
5338: CALL_OW 310
5342: OR
5343: IFFALSE 5316
// if IsDead ( driver ) then
5345: LD_VAR 0 1
5349: PPUSH
5350: CALL_OW 301
5354: IFFALSE 5358
// exit ;
5356: GO 5381
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5358: LD_VAR 0 6
5362: PPUSH
5363: LD_INT 21
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_VAR 0 5
5376: PPUSH
5377: CALL_OW 185
// end ; end ;
5381: PPOPN 6
5383: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL 26339 0 2
// if GetSide ( fac ) = 3 then
5398: LD_VAR 0 2
5402: PPUSH
5403: CALL_OW 255
5407: PUSH
5408: LD_INT 3
5410: EQUAL
5411: IFFALSE 5457
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5413: LD_ADDR_EXP 41
5417: PUSH
5418: LD_EXP 41
5422: PPUSH
5423: LD_EXP 41
5427: PUSH
5428: LD_INT 1
5430: PLUS
5431: PPUSH
5432: LD_VAR 0 1
5436: PPUSH
5437: CALL_OW 1
5441: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_INT 110
5449: PPUSH
5450: LD_INT 117
5452: PPUSH
5453: CALL_OW 171
// end ; end ;
5457: PPOPN 2
5459: END
// on LeaveBuilding ( b , un ) do var barracks ;
5460: LD_INT 0
5462: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5463: LD_VAR 0 1
5467: PUSH
5468: LD_INT 130
5470: PPUSH
5471: LD_INT 17
5473: PPUSH
5474: CALL_OW 428
5478: PUSH
5479: LD_INT 138
5481: PPUSH
5482: LD_INT 22
5484: PPUSH
5485: CALL_OW 428
5489: PUSH
5490: LD_INT 123
5492: PPUSH
5493: LD_INT 17
5495: PPUSH
5496: CALL_OW 428
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: LIST
5505: IN
5506: IFFALSE 5530
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5508: LD_VAR 0 2
5512: PPUSH
5513: LD_INT 135
5515: PPUSH
5516: LD_INT 31
5518: PPUSH
5519: CALL_OW 428
5523: PPUSH
5524: CALL_OW 180
// exit ;
5528: GO 5804
// end ; if b = HexInfo ( 135 , 31 ) then
5530: LD_VAR 0 1
5534: PUSH
5535: LD_INT 135
5537: PPUSH
5538: LD_INT 31
5540: PPUSH
5541: CALL_OW 428
5545: EQUAL
5546: IFFALSE 5618
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5548: LD_VAR 0 2
5552: PPUSH
5553: LD_INT 106
5555: PPUSH
5556: LD_INT 51
5558: PPUSH
5559: CALL_OW 428
5563: PPUSH
5564: CALL_OW 180
// if not explodeFirstDepot then
5568: LD_EXP 12
5572: NOT
5573: IFFALSE 5616
// begin explodeFirstDepot := true ;
5575: LD_ADDR_EXP 12
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5583: LD_INT 525
5585: PPUSH
5586: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5590: LD_INT 127
5592: PPUSH
5593: LD_INT 27
5595: PPUSH
5596: LD_INT 1
5598: PPUSH
5599: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5603: LD_INT 125
5605: PPUSH
5606: LD_INT 29
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 453
// end ; exit ;
5616: GO 5804
// end ; if b = HexInfo ( 106 , 51 ) then
5618: LD_VAR 0 1
5622: PUSH
5623: LD_INT 106
5625: PPUSH
5626: LD_INT 51
5628: PPUSH
5629: CALL_OW 428
5633: EQUAL
5634: IFFALSE 5734
// begin AddComMoveXY ( un , 106 , 93 ) ;
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_INT 106
5643: PPUSH
5644: LD_INT 93
5646: PPUSH
5647: CALL_OW 171
// if not explodeSecondDepot then
5651: LD_EXP 13
5655: NOT
5656: IFFALSE 5732
// begin explodeSecondDepot := true ;
5658: LD_ADDR_EXP 13
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5666: LD_INT 420
5668: PPUSH
5669: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5673: LD_INT 111
5675: PPUSH
5676: LD_INT 75
5678: PPUSH
5679: LD_INT 1
5681: PPUSH
5682: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5686: LD_INT 111
5688: PPUSH
5689: LD_INT 75
5691: PPUSH
5692: LD_INT 1
5694: PPUSH
5695: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5699: LD_INT 108
5701: PPUSH
5702: LD_INT 69
5704: PPUSH
5705: LD_INT 1
5707: PPUSH
5708: CALL_OW 453
// wait ( 0 0$2 ) ;
5712: LD_INT 70
5714: PPUSH
5715: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5719: LD_INT 94
5721: PPUSH
5722: LD_INT 65
5724: PPUSH
5725: LD_INT 1
5727: PPUSH
5728: CALL_OW 453
// end ; exit ;
5732: GO 5804
// end ; if GetBType ( b ) = b_bunker then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 266
5743: PUSH
5744: LD_INT 32
5746: EQUAL
5747: IFFALSE 5804
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_VAR 0 2
5758: PPUSH
5759: LD_INT 5
5761: PPUSH
5762: CALL 1008 0 2
5766: ST_TO_ADDR
// if barracks then
5767: LD_VAR 0 3
5771: IFFALSE 5789
// AddComEnterUnit ( un , barracks ) else
5773: LD_VAR 0 2
5777: PPUSH
5778: LD_VAR 0 3
5782: PPUSH
5783: CALL_OW 180
5787: GO 5804
// AddComMoveXY ( un , 116 , 110 ) ;
5789: LD_VAR 0 2
5793: PPUSH
5794: LD_INT 116
5796: PPUSH
5797: LD_INT 110
5799: PPUSH
5800: CALL_OW 171
// end ; end ;
5804: PPOPN 3
5806: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5807: LD_VAR 0 1
5811: PUSH
5812: LD_EXP 23
5816: EQUAL
5817: PUSH
5818: LD_VAR 0 2
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: LD_INT 6
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: IN
5833: AND
5834: IFFALSE 5865
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5836: LD_ADDR_EXP 8
5840: PUSH
5841: LD_VAR 0 1
5845: PPUSH
5846: CALL_OW 250
5850: PUSH
5851: LD_VAR 0 1
5855: PPUSH
5856: CALL_OW 251
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: ST_TO_ADDR
// end ; end_of_file
5865: PPOPN 3
5867: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5868: LD_INT 0
5870: PPUSH
5871: PPUSH
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
5876: PPUSH
// InGameOn ;
5877: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5881: LD_INT 5
5883: PPUSH
5884: LD_INT 2
5886: PPUSH
5887: CALL_OW 343
// music_nat := 4 ;
5891: LD_ADDR_OWVAR 71
5895: PUSH
5896: LD_INT 4
5898: ST_TO_ADDR
// music_class := music_combat ;
5899: LD_ADDR_OWVAR 72
5903: PUSH
5904: LD_INT 1
5906: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5907: LD_INT 133
5909: PPUSH
5910: LD_INT 2
5912: PPUSH
5913: LD_INT 2
5915: PPUSH
5916: LD_INT 10
5918: PPUSH
5919: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5923: LD_INT 133
5925: PPUSH
5926: LD_INT 2
5928: PPUSH
5929: CALL_OW 86
// wait ( 0 0$1 ) ;
5933: LD_INT 35
5935: PPUSH
5936: CALL_OW 67
// uc_side := 6 ;
5940: LD_ADDR_OWVAR 20
5944: PUSH
5945: LD_INT 6
5947: ST_TO_ADDR
// uc_nation := 3 ;
5948: LD_ADDR_OWVAR 21
5952: PUSH
5953: LD_INT 3
5955: ST_TO_ADDR
// rutmp := [ ] ;
5956: LD_ADDR_VAR 0 7
5960: PUSH
5961: EMPTY
5962: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5963: LD_INT 6
5965: PPUSH
5966: LD_INT 3
5968: PPUSH
5969: LD_INT 21
5971: PPUSH
5972: LD_INT 1
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 44
5980: PPUSH
5981: LD_INT 66
5983: PPUSH
5984: CALL 336 0 7
// veh := CreateVehicle ;
5988: LD_ADDR_VAR 0 5
5992: PUSH
5993: CALL_OW 45
5997: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6010: LD_VAR 0 5
6014: PPUSH
6015: LD_INT 8
6017: PPUSH
6018: LD_INT 0
6020: PPUSH
6021: CALL_OW 49
// SetLives ( veh , 500 ) ;
6025: LD_VAR 0 5
6029: PPUSH
6030: LD_INT 500
6032: PPUSH
6033: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 3
6042: PPUSH
6043: LD_INT 3
6045: PPUSH
6046: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6050: CALL_OW 44
6054: PPUSH
6055: LD_VAR 0 5
6059: PPUSH
6060: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6064: LD_VAR 0 5
6068: PPUSH
6069: LD_INT 133
6071: PPUSH
6072: LD_INT 11
6074: PPUSH
6075: CALL_OW 111
// rutmp := [ veh ] ;
6079: LD_ADDR_VAR 0 7
6083: PUSH
6084: LD_VAR 0 5
6088: PUSH
6089: EMPTY
6090: LIST
6091: ST_TO_ADDR
// for i := 1 to 4 do
6092: LD_ADDR_VAR 0 2
6096: PUSH
6097: DOUBLE
6098: LD_INT 1
6100: DEC
6101: ST_TO_ADDR
6102: LD_INT 4
6104: PUSH
6105: FOR_TO
6106: IFFALSE 6213
// begin PrepareHuman ( false , i , 2 ) ;
6108: LD_INT 0
6110: PPUSH
6111: LD_VAR 0 2
6115: PPUSH
6116: LD_INT 2
6118: PPUSH
6119: CALL_OW 380
// un := CreateHuman ;
6123: LD_ADDR_VAR 0 4
6127: PUSH
6128: CALL_OW 44
6132: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6133: LD_VAR 0 4
6137: PPUSH
6138: LD_INT 3
6140: PPUSH
6141: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6145: LD_VAR 0 4
6149: PPUSH
6150: LD_INT 8
6152: PPUSH
6153: LD_INT 0
6155: PPUSH
6156: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6160: LD_ADDR_VAR 0 7
6164: PUSH
6165: LD_VAR 0 7
6169: PPUSH
6170: LD_VAR 0 7
6174: PUSH
6175: LD_INT 1
6177: PLUS
6178: PPUSH
6179: LD_VAR 0 4
6183: PPUSH
6184: CALL_OW 1
6188: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6189: LD_VAR 0 4
6193: PPUSH
6194: LD_INT 133
6196: PPUSH
6197: LD_INT 11
6199: PPUSH
6200: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6204: LD_INT 18
6206: PPUSH
6207: CALL_OW 67
// end ;
6211: GO 6105
6213: POP
6214: POP
// for i in rutmp do
6215: LD_ADDR_VAR 0 2
6219: PUSH
6220: LD_VAR 0 7
6224: PUSH
6225: FOR_IN
6226: IFFALSE 6275
// begin AddComMoveXY ( i , 99 , 65 ) ;
6228: LD_VAR 0 2
6232: PPUSH
6233: LD_INT 99
6235: PPUSH
6236: LD_INT 65
6238: PPUSH
6239: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6243: LD_VAR 0 2
6247: PPUSH
6248: LD_INT 76
6250: PPUSH
6251: LD_INT 108
6253: PPUSH
6254: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6258: LD_VAR 0 2
6262: PPUSH
6263: LD_INT 92
6265: PPUSH
6266: LD_INT 176
6268: PPUSH
6269: CALL_OW 171
// end ;
6273: GO 6225
6275: POP
6276: POP
// wait ( 0 0$10 ) ;
6277: LD_INT 350
6279: PPUSH
6280: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6284: LD_ADDR_VAR 0 6
6288: PUSH
6289: LD_EXP 18
6293: PUSH
6294: LD_EXP 19
6298: PUSH
6299: LD_EXP 20
6303: PUSH
6304: LD_EXP 21
6308: PUSH
6309: LD_EXP 22
6313: PUSH
6314: LD_EXP 23
6318: PUSH
6319: LD_EXP 24
6323: PUSH
6324: LD_EXP 25
6328: PUSH
6329: LD_EXP 27
6333: PUSH
6334: LD_EXP 28
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: LD_EXP 29
6355: UNION
6356: ST_TO_ADDR
// tmp := tmp diff 0 ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 6
6366: PUSH
6367: LD_INT 0
6369: DIFF
6370: ST_TO_ADDR
// for i in heikeVehicles do
6371: LD_ADDR_VAR 0 2
6375: PUSH
6376: LD_EXP 30
6380: PUSH
6381: FOR_IN
6382: IFFALSE 6754
// begin if not tmp then
6384: LD_VAR 0 6
6388: NOT
6389: IFFALSE 6393
// continue ;
6391: GO 6381
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6393: LD_INT 2
6395: PPUSH
6396: LD_VAR 0 2
6400: PUSH
6401: LD_INT 5
6403: ARRAY
6404: PPUSH
6405: LD_VAR 0 2
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: PPUSH
6414: LD_VAR 0 2
6418: PUSH
6419: LD_INT 2
6421: ARRAY
6422: PPUSH
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 3
6430: ARRAY
6431: PPUSH
6432: LD_VAR 0 2
6436: PUSH
6437: LD_INT 4
6439: ARRAY
6440: PPUSH
6441: LD_INT 34
6443: PPUSH
6444: CALL 336 0 7
// veh := CreateVehicle ;
6448: LD_ADDR_VAR 0 5
6452: PUSH
6453: CALL_OW 45
6457: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6458: LD_VAR 0 2
6462: PUSH
6463: LD_INT 4
6465: ARRAY
6466: PUSH
6467: LD_INT 51
6469: PUSH
6470: LD_INT 32
6472: PUSH
6473: LD_INT 12
6475: PUSH
6476: LD_INT 89
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: IN
6485: IFFALSE 6565
// begin if i [ 7 ] [ 1 ] then
6487: LD_VAR 0 2
6491: PUSH
6492: LD_INT 7
6494: ARRAY
6495: PUSH
6496: LD_INT 1
6498: ARRAY
6499: IFFALSE 6526
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6501: LD_VAR 0 5
6505: PPUSH
6506: LD_INT 1
6508: PPUSH
6509: LD_VAR 0 2
6513: PUSH
6514: LD_INT 7
6516: ARRAY
6517: PUSH
6518: LD_INT 1
6520: ARRAY
6521: PPUSH
6522: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6526: LD_VAR 0 2
6530: PUSH
6531: LD_INT 7
6533: ARRAY
6534: PUSH
6535: LD_INT 2
6537: ARRAY
6538: IFFALSE 6565
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6540: LD_VAR 0 5
6544: PPUSH
6545: LD_INT 2
6547: PPUSH
6548: LD_VAR 0 2
6552: PUSH
6553: LD_INT 7
6555: ARRAY
6556: PUSH
6557: LD_INT 2
6559: ARRAY
6560: PPUSH
6561: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6577: LD_VAR 0 5
6581: PPUSH
6582: LD_INT 8
6584: PPUSH
6585: LD_INT 0
6587: PPUSH
6588: CALL_OW 49
// for j := 1 to tmp do
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: DOUBLE
6598: LD_INT 1
6600: DEC
6601: ST_TO_ADDR
6602: LD_VAR 0 6
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6681
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6610: LD_VAR 0 2
6614: PUSH
6615: LD_INT 8
6617: ARRAY
6618: PUSH
6619: LD_VAR 0 6
6623: PUSH
6624: LD_VAR 0 3
6628: ARRAY
6629: PPUSH
6630: CALL_OW 257
6634: EQUAL
6635: IFFALSE 6679
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6637: LD_VAR 0 6
6641: PUSH
6642: LD_VAR 0 3
6646: ARRAY
6647: PPUSH
6648: LD_VAR 0 5
6652: PPUSH
6653: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6657: LD_ADDR_VAR 0 6
6661: PUSH
6662: LD_VAR 0 6
6666: PPUSH
6667: LD_VAR 0 3
6671: PPUSH
6672: CALL_OW 3
6676: ST_TO_ADDR
// break ;
6677: GO 6681
// end ; end ;
6679: GO 6607
6681: POP
6682: POP
// if IsEmpty ( veh ) then
6683: LD_VAR 0 5
6687: PPUSH
6688: CALL 32664 0 1
6692: IFFALSE 6730
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6694: LD_VAR 0 6
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PPUSH
6703: LD_VAR 0 5
6707: PPUSH
6708: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6712: LD_ADDR_VAR 0 6
6716: PUSH
6717: LD_VAR 0 6
6721: PPUSH
6722: LD_INT 1
6724: PPUSH
6725: CALL_OW 3
6729: ST_TO_ADDR
// end ; ComAgressiveMove ( veh , 133 , 7 ) ;
6730: LD_VAR 0 5
6734: PPUSH
6735: LD_INT 133
6737: PPUSH
6738: LD_INT 7
6740: PPUSH
6741: CALL_OW 114
// wait ( 0 0$3 ) ;
6745: LD_INT 105
6747: PPUSH
6748: CALL_OW 67
// end ;
6752: GO 6381
6754: POP
6755: POP
// if tmp then
6756: LD_VAR 0 6
6760: IFFALSE 6816
// for i in tmp do
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_VAR 0 6
6771: PUSH
6772: FOR_IN
6773: IFFALSE 6814
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6775: LD_VAR 0 2
6779: PPUSH
6780: LD_INT 10
6782: PPUSH
6783: LD_INT 0
6785: PPUSH
6786: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_INT 146
6797: PPUSH
6798: LD_INT 7
6800: PPUSH
6801: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6805: LD_INT 18
6807: PPUSH
6808: CALL_OW 67
// end ;
6812: GO 6772
6814: POP
6815: POP
// if heikeApes then
6816: LD_EXP 31
6820: IFFALSE 6876
// for i in heikeApes do
6822: LD_ADDR_VAR 0 2
6826: PUSH
6827: LD_EXP 31
6831: PUSH
6832: FOR_IN
6833: IFFALSE 6874
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6835: LD_VAR 0 2
6839: PPUSH
6840: LD_INT 10
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_INT 146
6857: PPUSH
6858: LD_INT 7
6860: PPUSH
6861: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6865: LD_INT 18
6867: PPUSH
6868: CALL_OW 67
// end ;
6872: GO 6832
6874: POP
6875: POP
// DialogueOn ;
6876: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6880: LD_EXP 18
6884: PPUSH
6885: LD_STRING DH-outpost-a-1
6887: PPUSH
6888: CALL_OW 88
// DialogueOff ;
6892: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6896: LD_INT 133
6898: PPUSH
6899: LD_INT 2
6901: PPUSH
6902: LD_INT 2
6904: PPUSH
6905: CALL_OW 331
// InGameOff ;
6909: CALL_OW 9
// music_nat := 0 ;
6913: LD_ADDR_OWVAR 71
6917: PUSH
6918: LD_INT 0
6920: ST_TO_ADDR
// music_class := 0 ;
6921: LD_ADDR_OWVAR 72
6925: PUSH
6926: LD_INT 0
6928: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6929: LD_STRING Outposts
6931: PPUSH
6932: CALL_OW 337
// SaveForQuickRestart ;
6936: CALL_OW 22
// end ;
6940: LD_VAR 0 1
6944: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6945: LD_INT 22
6947: PUSH
6948: LD_INT 2
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 91
6957: PUSH
6958: LD_EXP 21
6962: PUSH
6963: LD_INT 20
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: PUSH
6980: LD_EXP 3
6984: AND
6985: PUSH
6986: LD_EXP 21
6990: PPUSH
6991: CALL_OW 302
6995: AND
6996: IFFALSE 7243
6998: GO 7000
7000: DISABLE
7001: LD_INT 0
7003: PPUSH
7004: PPUSH
7005: PPUSH
7006: PPUSH
// begin IbrahimBetrayal ;
7007: CALL 7246 0 0
// repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7018: LD_EXP 21
7022: PPUSH
7023: CALL_OW 301
7027: PUSH
7028: LD_INT 22
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 91
7040: PUSH
7041: LD_EXP 21
7045: PUSH
7046: LD_INT 6
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PUSH
7063: LD_EXP 21
7067: PPUSH
7068: CALL_OW 302
7072: AND
7073: OR
7074: IFFALSE 7011
// if IsDead ( Ibrahim ) then
7076: LD_EXP 21
7080: PPUSH
7081: CALL_OW 301
7085: IFFALSE 7089
// exit ;
7087: GO 7243
// x := GetX ( Ibrahim ) ;
7089: LD_ADDR_VAR 0 1
7093: PUSH
7094: LD_EXP 21
7098: PPUSH
7099: CALL_OW 250
7103: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7104: LD_ADDR_VAR 0 2
7108: PUSH
7109: LD_EXP 21
7113: PPUSH
7114: CALL_OW 251
7118: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_EXP 21
7128: PPUSH
7129: CALL_OW 254
7133: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_EXP 21
7143: PPUSH
7144: CALL_OW 256
7148: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7149: LD_EXP 21
7153: PPUSH
7154: CALL_OW 64
// uc_side := 2 ;
7158: LD_ADDR_OWVAR 20
7162: PUSH
7163: LD_INT 2
7165: ST_TO_ADDR
// uc_nation := 2 ;
7166: LD_ADDR_OWVAR 21
7170: PUSH
7171: LD_INT 2
7173: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7174: LD_ADDR_EXP 21
7178: PUSH
7179: LD_STRING Ibrahim
7181: PPUSH
7182: LD_INT 0
7184: PPUSH
7185: LD_STRING 
7187: PPUSH
7188: CALL 30508 0 3
7192: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7193: LD_EXP 21
7197: PPUSH
7198: LD_VAR 0 3
7202: PPUSH
7203: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7207: LD_EXP 21
7211: PPUSH
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_VAR 0 2
7221: PPUSH
7222: LD_INT 0
7224: PPUSH
7225: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7229: LD_EXP 21
7233: PPUSH
7234: LD_VAR 0 4
7238: PPUSH
7239: CALL_OW 234
// end ;
7243: PPOPN 4
7245: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7251: LD_INT 122
7253: PPUSH
7254: LD_INT 77
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: LD_INT 6
7262: NEG
7263: PPUSH
7264: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7268: LD_EXP 21
7272: PPUSH
7273: LD_INT 123
7275: PPUSH
7276: LD_INT 79
7278: PPUSH
7279: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7283: LD_EXP 21
7287: PPUSH
7288: LD_INT 125
7290: PPUSH
7291: LD_INT 82
7293: PPUSH
7294: CALL_OW 178
// wait ( 0 0$2 ) ;
7298: LD_INT 70
7300: PPUSH
7301: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7305: LD_EXP 42
7309: PPUSH
7310: LD_EXP 21
7314: PPUSH
7315: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7319: LD_EXP 42
7323: PPUSH
7324: LD_STRING DRum-outpost-b-3
7326: PPUSH
7327: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_INT 125
7338: PPUSH
7339: LD_INT 76
7341: PPUSH
7342: CALL_OW 428
7346: PUSH
7347: LD_INT 125
7349: PPUSH
7350: LD_INT 79
7352: PPUSH
7353: CALL_OW 428
7357: PUSH
7358: LD_INT 125
7360: PPUSH
7361: LD_INT 82
7363: PPUSH
7364: CALL_OW 428
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: ST_TO_ADDR
// for i in tmp do
7374: LD_ADDR_VAR 0 2
7378: PUSH
7379: LD_VAR 0 3
7383: PUSH
7384: FOR_IN
7385: IFFALSE 7401
// SetLives ( i , 200 ) ;
7387: LD_VAR 0 2
7391: PPUSH
7392: LD_INT 200
7394: PPUSH
7395: CALL_OW 234
7399: GO 7384
7401: POP
7402: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7403: LD_EXP 21
7407: PPUSH
7408: LD_STRING DI-outpost-b-4
7410: PPUSH
7411: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7415: LD_EXP 21
7419: PPUSH
7420: LD_INT 5
7422: PPUSH
7423: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7427: LD_EXP 21
7431: PUSH
7432: LD_EXP 42
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PPUSH
7441: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7445: LD_INT 122
7447: PPUSH
7448: LD_INT 77
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: CALL_OW 331
// if Givi then
7458: LD_EXP 19
7462: IFFALSE 7478
// Say ( Givi , DG-1-outpost-b-5 ) else
7464: LD_EXP 19
7468: PPUSH
7469: LD_STRING DG-1-outpost-b-5
7471: PPUSH
7472: CALL_OW 88
7476: GO 7543
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7478: LD_EXP 29
7482: PPUSH
7483: LD_INT 26
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 72
7497: PUSH
7498: LD_INT 1
7500: ARRAY
7501: PPUSH
7502: LD_STRING DArf-outpost-b-a-5
7504: PPUSH
7505: CALL_OW 88
7509: NOT
7510: IFFALSE 7543
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7512: LD_EXP 29
7516: PPUSH
7517: LD_INT 26
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PPUSH
7527: CALL_OW 72
7531: PUSH
7532: LD_INT 1
7534: ARRAY
7535: PPUSH
7536: LD_STRING DArm-outpost-b-a-5
7538: PPUSH
7539: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7550: LD_EXP 21
7554: PPUSH
7555: CALL_OW 301
7559: PUSH
7560: LD_EXP 18
7564: PPUSH
7565: LD_EXP 21
7569: PPUSH
7570: CALL_OW 296
7574: PUSH
7575: LD_INT 6
7577: LESS
7578: PUSH
7579: LD_EXP 21
7583: PPUSH
7584: CALL_OW 302
7588: AND
7589: OR
7590: IFFALSE 7543
// if IsDead ( Ibrahim ) then
7592: LD_EXP 21
7596: PPUSH
7597: CALL_OW 301
7601: IFFALSE 7617
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7603: LD_EXP 18
7607: PPUSH
7608: LD_STRING DH-ibrahimdead-1
7610: PPUSH
7611: CALL_OW 88
// exit ;
7615: GO 7658
// end ; CenterNowOnUnits ( Ibrahim ) ;
7617: LD_EXP 21
7621: PPUSH
7622: CALL_OW 87
// DialogueOn ;
7626: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7630: LD_EXP 21
7634: PPUSH
7635: LD_STRING DI-ibrahimlives-1
7637: PPUSH
7638: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7642: LD_EXP 18
7646: PPUSH
7647: LD_STRING DH-Ibrahimlives-2
7649: PPUSH
7650: CALL_OW 88
// DialogueOff ;
7654: CALL_OW 7
// end ;
7658: LD_VAR 0 1
7662: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7663: LD_INT 11
7665: PPUSH
7666: LD_INT 22
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 70
7680: PUSH
7681: LD_OWVAR 1
7685: PUSH
7686: LD_INT 18900
7688: PUSH
7689: LD_INT 16800
7691: PUSH
7692: LD_INT 16800
7694: PUSH
7695: LD_INT 15750
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: LD_OWVAR 67
7708: ARRAY
7709: GREATEREQUAL
7710: OR
7711: IFFALSE 8219
7713: GO 7715
7715: DISABLE
// begin outerAreaAchived := true ;
7716: LD_ADDR_EXP 15
7720: PUSH
7721: LD_INT 1
7723: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7724: LD_INT 700
7726: PPUSH
7727: CALL_OW 67
// DialogueOn ;
7731: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7735: LD_EXP 26
7739: PPUSH
7740: LD_STRING DShar-radio-1
7742: PPUSH
7743: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7747: LD_EXP 26
7751: PPUSH
7752: LD_STRING DShar-radio-2
7754: PPUSH
7755: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7759: LD_EXP 18
7763: PPUSH
7764: LD_STRING DH-radio-2
7766: PPUSH
7767: CALL_OW 88
// DialogueOff ;
7771: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7775: LD_STRING Gaidar
7777: PPUSH
7778: CALL_OW 337
// if Difficulty < 3 then
7782: LD_OWVAR 67
7786: PUSH
7787: LD_INT 3
7789: LESS
7790: IFFALSE 7856
// begin DialogueOn ;
7792: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7796: LD_INT 11
7798: PPUSH
7799: LD_INT 14
7801: PPUSH
7802: LD_INT 2
7804: PPUSH
7805: LD_INT 6
7807: NEG
7808: PPUSH
7809: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7813: LD_INT 11
7815: PPUSH
7816: LD_INT 14
7818: PPUSH
7819: LD_INT 2
7821: PPUSH
7822: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7826: LD_INT 11
7828: PPUSH
7829: LD_INT 14
7831: PPUSH
7832: CALL_OW 84
// dwait ( 0 0$1 ) ;
7836: LD_INT 35
7838: PPUSH
7839: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7843: LD_EXP 18
7847: PPUSH
7848: CALL_OW 87
// DialogueOff ;
7852: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7856: LD_INT 1050
7858: PUSH
7859: LD_INT 350
7861: PPUSH
7862: LD_INT 525
7864: PPUSH
7865: CALL_OW 12
7869: PUSH
7870: LD_OWVAR 67
7874: MUL
7875: PLUS
7876: PPUSH
7877: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7881: LD_INT 35
7883: PPUSH
7884: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7888: LD_INT 2
7890: PPUSH
7891: LD_INT 1
7893: PPUSH
7894: CALL_OW 428
7898: PUSH
7899: LD_INT 0
7901: EQUAL
7902: IFFALSE 7881
// SetDir ( Gaidar , 2 ) ;
7904: LD_EXP 35
7908: PPUSH
7909: LD_INT 2
7911: PPUSH
7912: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7916: LD_EXP 35
7920: PPUSH
7921: LD_INT 2
7923: PPUSH
7924: LD_INT 1
7926: PPUSH
7927: LD_INT 0
7929: PPUSH
7930: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7934: LD_EXP 35
7938: PPUSH
7939: LD_INT 19
7941: PPUSH
7942: LD_INT 24
7944: PPUSH
7945: CALL_OW 111
// if Difficulty < 3 then
7949: LD_OWVAR 67
7953: PUSH
7954: LD_INT 3
7956: LESS
7957: IFFALSE 7996
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7959: LD_INT 11
7961: PPUSH
7962: LD_INT 14
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 6
7970: NEG
7971: PPUSH
7972: CALL_OW 330
// wait ( 0 0$2 ) ;
7976: LD_INT 70
7978: PPUSH
7979: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7983: LD_INT 11
7985: PPUSH
7986: LD_INT 14
7988: PPUSH
7989: LD_INT 2
7991: PPUSH
7992: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7996: LD_EXP 35
8000: PPUSH
8001: LD_INT 210
8003: PPUSH
8004: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8008: LD_EXP 35
8012: PPUSH
8013: LD_INT 38
8015: PPUSH
8016: LD_INT 47
8018: PPUSH
8019: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8023: LD_EXP 35
8027: PPUSH
8028: LD_INT 32
8030: PPUSH
8031: LD_INT 59
8033: PPUSH
8034: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8038: LD_EXP 35
8042: PPUSH
8043: LD_INT 350
8045: PPUSH
8046: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8050: LD_EXP 35
8054: PPUSH
8055: LD_INT 62
8057: PPUSH
8058: LD_INT 116
8060: PPUSH
8061: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8065: LD_EXP 35
8069: PPUSH
8070: LD_INT 92
8072: PPUSH
8073: LD_INT 177
8075: PPUSH
8076: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8080: LD_INT 35
8082: PPUSH
8083: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8087: LD_EXP 35
8091: PPUSH
8092: CALL_OW 301
8096: PUSH
8097: LD_EXP 35
8101: PPUSH
8102: LD_INT 92
8104: PPUSH
8105: LD_INT 177
8107: PPUSH
8108: CALL_OW 307
8112: OR
8113: IFFALSE 8080
// if IsAt ( Gaidar , 92 , 177 ) then
8115: LD_EXP 35
8119: PPUSH
8120: LD_INT 92
8122: PPUSH
8123: LD_INT 177
8125: PPUSH
8126: CALL_OW 307
8130: IFFALSE 8197
// begin DialogueOn ;
8132: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8136: LD_INT 92
8138: PPUSH
8139: LD_INT 177
8141: PPUSH
8142: LD_INT 2
8144: PPUSH
8145: LD_INT 3
8147: NEG
8148: PPUSH
8149: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8153: LD_EXP 35
8157: PPUSH
8158: CALL_OW 87
// dwait ( 0 0$2 ) ;
8162: LD_INT 70
8164: PPUSH
8165: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8169: LD_INT 92
8171: PPUSH
8172: LD_INT 177
8174: PPUSH
8175: LD_INT 2
8177: PPUSH
8178: CALL_OW 331
// DialogueOff ;
8182: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8186: LD_EXP 35
8190: PPUSH
8191: CALL_OW 64
// exit ;
8195: GO 8219
// end ; gaidarKilled := true ;
8197: LD_ADDR_EXP 14
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8205: LD_STRING GaidarKilled
8207: PPUSH
8208: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8212: LD_STRING ACH_COMMISAR
8214: PPUSH
8215: CALL_OW 543
// end ;
8219: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8220: LD_INT 2
8222: PPUSH
8223: LD_EXP 35
8227: PPUSH
8228: CALL_OW 292
8232: IFFALSE 8249
8234: GO 8236
8236: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8237: LD_EXP 35
8241: PPUSH
8242: LD_STRING DT-objective-1
8244: PPUSH
8245: CALL_OW 88
8249: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8250: LD_INT 22
8252: PUSH
8253: LD_INT 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 2
8262: PUSH
8263: LD_INT 95
8265: PUSH
8266: LD_INT 5
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 95
8275: PUSH
8276: LD_INT 6
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 95
8285: PUSH
8286: LD_INT 7
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 69
8307: IFFALSE 8344
8309: GO 8311
8311: DISABLE
// begin DialogueOn ;
8312: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8316: LD_EXP 18
8320: PPUSH
8321: LD_STRING DH-outpost-last-1
8323: PPUSH
8324: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8328: LD_EXP 34
8332: PPUSH
8333: LD_STRING DB-outpost-last-2
8335: PPUSH
8336: CALL_OW 94
// DialogueOff ;
8340: CALL_OW 7
// end ;
8344: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8345: LD_INT 200
8347: PPUSH
8348: CALL_OW 256
8352: PUSH
8353: LD_INT 999
8355: LESS
8356: PUSH
8357: LD_INT 200
8359: PPUSH
8360: CALL_OW 255
8364: PUSH
8365: LD_INT 2
8367: EQUAL
8368: OR
8369: IFFALSE 8542
8371: GO 8373
8373: DISABLE
8374: LD_INT 0
8376: PPUSH
8377: PPUSH
// begin if not earlyEscape then
8378: LD_EXP 16
8382: NOT
8383: IFFALSE 8409
// begin SayRadio ( Burlak , DB-end-1 ) ;
8385: LD_EXP 34
8389: PPUSH
8390: LD_STRING DB-end-1
8392: PPUSH
8393: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8397: LD_EXP 18
8401: PPUSH
8402: LD_STRING DH-end-2
8404: PPUSH
8405: CALL_OW 88
// end ; if tick <= 15 15$00 then
8409: LD_OWVAR 1
8413: PUSH
8414: LD_INT 31500
8416: LESSEQUAL
8417: IFFALSE 8426
// SetAchievement ( ACH_FIST ) ;
8419: LD_STRING ACH_FIST
8421: PPUSH
8422: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8426: LD_ADDR_VAR 0 2
8430: PUSH
8431: LD_INT 22
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: LD_INT 21
8446: PUSH
8447: LD_INT 3
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 69
8466: ST_TO_ADDR
// if not tmp then
8467: LD_VAR 0 2
8471: NOT
8472: IFFALSE 8476
// exit ;
8474: GO 8542
// for i in tmp do
8476: LD_ADDR_VAR 0 1
8480: PUSH
8481: LD_VAR 0 2
8485: PUSH
8486: FOR_IN
8487: IFFALSE 8540
// begin SetTag ( i , tEscape ) ;
8489: LD_VAR 0 1
8493: PPUSH
8494: LD_EXP 17
8498: PPUSH
8499: CALL_OW 109
// if IsInUnit ( i ) then
8503: LD_VAR 0 1
8507: PPUSH
8508: CALL_OW 310
8512: IFFALSE 8523
// ComExitBuilding ( i ) ;
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_INT 92
8530: PPUSH
8531: LD_INT 177
8533: PPUSH
8534: CALL_OW 171
// end ;
8538: GO 8486
8540: POP
8541: POP
// end ;
8542: PPOPN 2
8544: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8545: LD_INT 4
8547: PPUSH
8548: LD_INT 22
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 70
8562: PUSH
8563: LD_EXP 15
8567: NOT
8568: AND
8569: PUSH
8570: LD_EXP 27
8574: PPUSH
8575: CALL_OW 302
8579: AND
8580: IFFALSE 8820
8582: GO 8584
8584: DISABLE
// begin DialogueOn ;
8585: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8589: LD_INT 111
8591: PPUSH
8592: LD_INT 54
8594: PPUSH
8595: LD_INT 2
8597: PPUSH
8598: LD_INT 16
8600: NEG
8601: PPUSH
8602: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8606: LD_INT 111
8608: PPUSH
8609: LD_INT 53
8611: PPUSH
8612: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8616: LD_INT 10
8618: PPUSH
8619: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8623: LD_EXP 27
8627: PPUSH
8628: LD_STRING DKs-Hannibal-1
8630: PPUSH
8631: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8635: LD_EXP 27
8639: PPUSH
8640: LD_STRING DKs-Hannibal-2
8642: PPUSH
8643: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8647: LD_EXP 27
8651: PPUSH
8652: LD_STRING DKs-Hannibal-3
8654: PPUSH
8655: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8659: LD_EXP 27
8663: PPUSH
8664: LD_STRING DKs-Hannibal-4
8666: PPUSH
8667: CALL_OW 88
// dwait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8678: LD_INT 111
8680: PPUSH
8681: LD_INT 54
8683: PPUSH
8684: LD_INT 2
8686: PPUSH
8687: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8691: LD_INT 173
8693: PPUSH
8694: LD_INT 76
8696: PPUSH
8697: LD_INT 2
8699: PPUSH
8700: LD_INT 12
8702: NEG
8703: PPUSH
8704: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8708: LD_INT 173
8710: PPUSH
8711: LD_INT 76
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8721: LD_INT 173
8723: PPUSH
8724: LD_INT 76
8726: PPUSH
8727: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8731: LD_EXP 27
8735: PPUSH
8736: LD_STRING DKs-Hannibal-5
8738: PPUSH
8739: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8743: LD_EXP 22
8747: PUSH
8748: LD_INT 22
8750: PUSH
8751: LD_INT 2
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 34
8760: PUSH
8761: LD_INT 26
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 69
8776: NOT
8777: AND
8778: IFFALSE 8816
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8780: LD_EXP 22
8784: PPUSH
8785: LD_STRING DKam-Hannibal-a-6
8787: PPUSH
8788: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8792: LD_EXP 22
8796: PPUSH
8797: LD_STRING DKam-Hannibal-a-7
8799: PPUSH
8800: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8804: LD_EXP 19
8808: PPUSH
8809: LD_STRING DG-Hannibal-a-8
8811: PPUSH
8812: CALL_OW 88
// end ; DialogueOff ;
8816: CALL_OW 7
// end ;
8820: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8821: LD_INT 225
8823: PPUSH
8824: CALL_OW 302
8828: PUSH
8829: LD_INT 200
8831: PPUSH
8832: CALL_OW 302
8836: AND
8837: PUSH
8838: LD_INT 12
8840: PPUSH
8841: LD_INT 21
8843: PUSH
8844: LD_INT 3
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 70
8855: PUSH
8856: LD_INT 2
8858: GREATER
8859: AND
8860: PUSH
8861: LD_INT 13
8863: PPUSH
8864: LD_INT 22
8866: PUSH
8867: LD_INT 2
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PPUSH
8874: CALL_OW 70
8878: PUSH
8879: LD_INT 3
8881: GREATER
8882: AND
8883: IFFALSE 8896
8885: GO 8887
8887: DISABLE
// hannibalPath := true ;
8888: LD_ADDR_EXP 9
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
8896: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8897: LD_EXP 9
8901: PUSH
8902: LD_INT 6
8904: PPUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PPUSH
8915: CALL_OW 70
8919: AND
8920: IFFALSE 9265
8922: GO 8924
8924: DISABLE
8925: LD_INT 0
8927: PPUSH
8928: PPUSH
8929: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8930: LD_ADDR_VAR 0 2
8934: PUSH
8935: LD_INT 6
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PPUSH
8948: CALL_OW 70
8952: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8953: LD_ADDR_VAR 0 3
8957: PUSH
8958: LD_VAR 0 2
8962: PPUSH
8963: LD_INT 34
8965: PUSH
8966: LD_INT 26
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 72
8977: PUSH
8978: LD_INT 0
8980: GREATER
8981: ST_TO_ADDR
// DialogueOn ;
8982: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8986: LD_EXP 18
8990: PPUSH
8991: LD_STRING DH-Cleverattack-1
8993: PPUSH
8994: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8998: LD_EXP 18
9002: PPUSH
9003: LD_STRING DH-Cleverattack-2
9005: PPUSH
9006: CALL_OW 88
// if hasFlameThrower then
9010: LD_VAR 0 3
9014: IFFALSE 9042
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9016: LD_EXP 34
9020: PPUSH
9021: LD_STRING DB-Cleverattack-3
9023: PPUSH
9024: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9028: LD_EXP 18
9032: PPUSH
9033: LD_STRING DH-Cleverattack-4
9035: PPUSH
9036: CALL_OW 88
// end else
9040: GO 9066
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9042: LD_EXP 34
9046: PPUSH
9047: LD_STRING DB-Cleverattack-a-3
9049: PPUSH
9050: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9054: LD_EXP 18
9058: PPUSH
9059: LD_STRING DH-Cleverattack-a-4
9061: PPUSH
9062: CALL_OW 88
// end ; DialogueOff ;
9066: CALL_OW 7
// if not hasFlameThrower then
9070: LD_VAR 0 3
9074: NOT
9075: IFFALSE 9079
// exit ;
9077: GO 9265
// earlyEscape := true ;
9079: LD_ADDR_EXP 16
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9087: LD_INT 140
9089: PPUSH
9090: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9094: LD_ADDR_VAR 0 2
9098: PUSH
9099: LD_INT 22
9101: PUSH
9102: LD_INT 3
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 2
9111: PUSH
9112: LD_INT 25
9114: PUSH
9115: LD_INT 1
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 25
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 25
9134: PUSH
9135: LD_INT 4
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 69
9156: PUSH
9157: LD_EXP 21
9161: PUSH
9162: LD_EXP 36
9166: PUSH
9167: LD_EXP 35
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: DIFF
9177: ST_TO_ADDR
// for i in tmp do
9178: LD_ADDR_VAR 0 1
9182: PUSH
9183: LD_VAR 0 2
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9263
// begin if Prob ( 40 + 10 * Difficulty ) then
9191: LD_INT 40
9193: PUSH
9194: LD_INT 10
9196: PUSH
9197: LD_OWVAR 67
9201: MUL
9202: PLUS
9203: PPUSH
9204: CALL_OW 13
9208: IFFALSE 9212
// continue ;
9210: GO 9188
// SetTag ( i , tEscape ) ;
9212: LD_VAR 0 1
9216: PPUSH
9217: LD_EXP 17
9221: PPUSH
9222: CALL_OW 109
// if IsInUnit ( i ) then
9226: LD_VAR 0 1
9230: PPUSH
9231: CALL_OW 310
9235: IFFALSE 9246
// ComExitBuilding ( i ) ;
9237: LD_VAR 0 1
9241: PPUSH
9242: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9246: LD_VAR 0 1
9250: PPUSH
9251: LD_INT 92
9253: PPUSH
9254: LD_INT 177
9256: PPUSH
9257: CALL_OW 171
// end ;
9261: GO 9188
9263: POP
9264: POP
// end ;
9265: PPOPN 3
9267: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9268: LD_INT 9
9270: PPUSH
9271: LD_INT 2
9273: PUSH
9274: LD_INT 22
9276: PUSH
9277: LD_INT 3
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 22
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 70
9303: IFFALSE 9401
9305: GO 9307
9307: DISABLE
9308: LD_INT 0
9310: PPUSH
// begin enable ;
9311: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9312: LD_ADDR_VAR 0 1
9316: PUSH
9317: LD_INT 9
9319: PPUSH
9320: LD_INT 2
9322: PUSH
9323: LD_INT 22
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 22
9335: PUSH
9336: LD_INT 6
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 70
9352: PUSH
9353: FOR_IN
9354: IFFALSE 9399
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 110
9365: PUSH
9366: LD_EXP 17
9370: EQUAL
9371: PUSH
9372: LD_VAR 0 1
9376: PPUSH
9377: CALL_OW 255
9381: PUSH
9382: LD_INT 6
9384: EQUAL
9385: OR
9386: IFFALSE 9397
// RemoveUnit ( i ) ;
9388: LD_VAR 0 1
9392: PPUSH
9393: CALL_OW 64
9397: GO 9353
9399: POP
9400: POP
// end ;
9401: PPOPN 1
9403: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9404: LD_EXP 23
9408: PUSH
9409: LD_EXP 23
9413: PPUSH
9414: CALL_OW 256
9418: PUSH
9419: LD_INT 3
9421: LESS
9422: AND
9423: IFFALSE 9469
9425: GO 9427
9427: DISABLE
// begin DialogueOn ;
9428: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9432: LD_EXP 23
9436: PPUSH
9437: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9441: LD_EXP 23
9445: PPUSH
9446: LD_STRING DK-Kkilled-1
9448: PPUSH
9449: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9453: LD_EXP 18
9457: PPUSH
9458: LD_STRING DH-Kkilled-2
9460: PPUSH
9461: CALL_OW 88
// DialogueOff ;
9465: CALL_OW 7
// end ;
9469: END
// every 0 0$1 trigger kaiaKilledByRussian do
9470: LD_EXP 8
9474: IFFALSE 9491
9476: GO 9478
9478: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_STRING DH-Kkilled-3
9486: PPUSH
9487: CALL_OW 88
9491: END
// every 0 0$1 trigger tick >= 24 24$00 do
9492: LD_OWVAR 1
9496: PUSH
9497: LD_INT 50400
9499: GREATEREQUAL
9500: IFFALSE 9537
9502: GO 9504
9504: DISABLE
// begin DialogueOn ;
9505: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9509: LD_EXP 26
9513: PPUSH
9514: LD_STRING DShar-slow-1
9516: PPUSH
9517: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9521: LD_EXP 26
9525: PPUSH
9526: LD_STRING DShar-slow-2
9528: PPUSH
9529: CALL_OW 94
// DialogueOff ;
9533: CALL_OW 7
// end ;
9537: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9538: LD_OWVAR 1
9542: PUSH
9543: LD_INT 84000
9545: PUSH
9546: LD_INT 75600
9548: PUSH
9549: LD_INT 67200
9551: PUSH
9552: LD_INT 63000
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: PUSH
9561: LD_OWVAR 67
9565: ARRAY
9566: GREATEREQUAL
9567: IFFALSE 9611
9569: GO 9571
9571: DISABLE
// begin DialogueOn ;
9572: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9576: LD_EXP 26
9580: PPUSH
9581: LD_STRING DShar-fail-1
9583: PPUSH
9584: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9588: LD_EXP 26
9592: PPUSH
9593: LD_STRING DShar-fail-2
9595: PPUSH
9596: CALL_OW 94
// DialogueOff ;
9600: CALL_OW 7
// YouLost ( Time ) ;
9604: LD_STRING Time
9606: PPUSH
9607: CALL_OW 104
// end ;
9611: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9612: LD_INT 22
9614: PUSH
9615: LD_INT 3
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 2
9624: PUSH
9625: LD_INT 30
9627: PUSH
9628: LD_INT 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 30
9637: PUSH
9638: LD_INT 0
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PPUSH
9654: CALL_OW 69
9658: PUSH
9659: LD_INT 0
9661: EQUAL
9662: IFFALSE 10259
9664: GO 9666
9666: DISABLE
9667: LD_INT 0
9669: PPUSH
// begin if ( tick + gameTime ) <= 55 55$00 then
9670: LD_OWVAR 1
9674: PUSH
9675: LD_EXP 5
9679: PLUS
9680: PUSH
9681: LD_INT 115500
9683: LESSEQUAL
9684: IFFALSE 9693
// SetAchievement ( ACH_HSPEED_4 ) ;
9686: LD_STRING ACH_HSPEED_4
9688: PPUSH
9689: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9693: LD_OWVAR 1
9697: PUSH
9698: LD_EXP 5
9702: PLUS
9703: PUSH
9704: LD_INT 178500
9706: PUSH
9707: LD_INT 157500
9709: PUSH
9710: LD_INT 136500
9712: PUSH
9713: LD_INT 126000
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: LD_OWVAR 67
9726: ARRAY
9727: LESSEQUAL
9728: IFFALSE 9742
// AddMedal ( med1 , 1 ) else
9730: LD_STRING med1
9732: PPUSH
9733: LD_INT 1
9735: PPUSH
9736: CALL_OW 101
9740: GO 9753
// AddMedal ( med1 , - 1 ) ;
9742: LD_STRING med1
9744: PPUSH
9745: LD_INT 1
9747: NEG
9748: PPUSH
9749: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9753: LD_EXP 7
9757: PUSH
9758: LD_INT 3
9760: GREATEREQUAL
9761: PUSH
9762: LD_EXP 11
9766: MUL
9767: PUSH
9768: LD_EXP 9
9772: MUL
9773: PUSH
9774: LD_EXP 6
9778: PUSH
9779: LD_INT 6
9781: PUSH
9782: LD_INT 5
9784: PUSH
9785: LD_INT 4
9787: PUSH
9788: LD_INT 3
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: LD_OWVAR 67
9801: ARRAY
9802: LESS
9803: MUL
9804: IFFALSE 9818
// AddMedal ( med2 , 1 ) else
9806: LD_STRING med2
9808: PPUSH
9809: LD_INT 1
9811: PPUSH
9812: CALL_OW 101
9816: GO 9892
// if flamethrowers < 3 then
9818: LD_EXP 7
9822: PUSH
9823: LD_INT 3
9825: LESS
9826: IFFALSE 9841
// AddMedal ( med2 , - 1 ) else
9828: LD_STRING med2
9830: PPUSH
9831: LD_INT 1
9833: NEG
9834: PPUSH
9835: CALL_OW 101
9839: GO 9892
// if not baseHill then
9841: LD_EXP 11
9845: NOT
9846: IFFALSE 9861
// AddMedal ( med2 , - 2 ) else
9848: LD_STRING med2
9850: PPUSH
9851: LD_INT 2
9853: NEG
9854: PPUSH
9855: CALL_OW 101
9859: GO 9892
// if not hannibalPath then
9861: LD_EXP 9
9865: NOT
9866: IFFALSE 9881
// AddMedal ( med2 , - 3 ) else
9868: LD_STRING med2
9870: PPUSH
9871: LD_INT 3
9873: NEG
9874: PPUSH
9875: CALL_OW 101
9879: GO 9892
// AddMedal ( med3 , - 2 ) ;
9881: LD_STRING med3
9883: PPUSH
9884: LD_INT 2
9886: NEG
9887: PPUSH
9888: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9892: LD_EXP 14
9896: PPUSH
9897: LD_STRING 04_2_GaidarKilled
9899: PPUSH
9900: CALL_OW 39
// if gaidarKilled then
9904: LD_EXP 14
9908: IFFALSE 9922
// AddMedal ( med3 , 1 ) else
9910: LD_STRING med3
9912: PPUSH
9913: LD_INT 1
9915: PPUSH
9916: CALL_OW 101
9920: GO 9933
// AddMedal ( med3 , - 1 ) ;
9922: LD_STRING med3
9924: PPUSH
9925: LD_INT 1
9927: NEG
9928: PPUSH
9929: CALL_OW 101
// GiveMedals ( MAIN ) ;
9933: LD_STRING MAIN
9935: PPUSH
9936: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9940: LD_INT 22
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 3
9952: PUSH
9953: LD_INT 23
9955: PUSH
9956: LD_INT 0
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: PPUSH
9976: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9980: LD_EXP 18
9984: PPUSH
9985: LD_STRING 04_2_Heike
9987: PPUSH
9988: CALL_OW 38
// if Aviradze then
9992: LD_EXP 28
9996: IFFALSE 10010
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9998: LD_EXP 28
10002: PPUSH
10003: LD_STRING 04_2_Aviradze
10005: PPUSH
10006: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10010: LD_EXP 21
10014: PUSH
10015: LD_EXP 21
10019: PPUSH
10020: CALL_OW 255
10024: PUSH
10025: LD_INT 2
10027: EQUAL
10028: AND
10029: IFFALSE 10059
// begin if ibrahimOnRuSide then
10031: LD_EXP 3
10035: IFFALSE 10047
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10037: LD_INT 1
10039: PPUSH
10040: LD_STRING 04_2_IbrahimJoined
10042: PPUSH
10043: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10047: LD_EXP 21
10051: PPUSH
10052: LD_STRING 04_2_Ibrahim
10054: PPUSH
10055: CALL_OW 38
// end ; if Kamil then
10059: LD_EXP 22
10063: IFFALSE 10077
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10065: LD_EXP 22
10069: PPUSH
10070: LD_STRING 04_2_Kamil
10072: PPUSH
10073: CALL_OW 38
// if Sophia then
10077: LD_EXP 24
10081: IFFALSE 10095
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10083: LD_EXP 24
10087: PPUSH
10088: LD_STRING 04_2_Sophia
10090: PPUSH
10091: CALL_OW 38
// if Kaia then
10095: LD_EXP 23
10099: IFFALSE 10113
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10101: LD_EXP 23
10105: PPUSH
10106: LD_STRING 04_2_Kaia
10108: PPUSH
10109: CALL_OW 38
// if Givi then
10113: LD_EXP 19
10117: IFFALSE 10131
// SaveCharacters ( Givi , 04_2_Givi ) ;
10119: LD_EXP 19
10123: PPUSH
10124: LD_STRING 04_2_Givi
10126: PPUSH
10127: CALL_OW 38
// if Mike then
10131: LD_EXP 20
10135: IFFALSE 10149
// SaveCharacters ( Mike , 04_2_Mike ) ;
10137: LD_EXP 20
10141: PPUSH
10142: LD_STRING 04_2_Mike
10144: PPUSH
10145: CALL_OW 38
// if Markov then
10149: LD_EXP 25
10153: IFFALSE 10167
// SaveCharacters ( Markov , 04_2_Markov ) ;
10155: LD_EXP 25
10159: PPUSH
10160: LD_STRING 04_2_Markov
10162: PPUSH
10163: CALL_OW 38
// if Kurt then
10167: LD_EXP 27
10171: IFFALSE 10185
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10173: LD_EXP 27
10177: PPUSH
10178: LD_STRING 04_2_Kurt
10180: PPUSH
10181: CALL_OW 38
// if heikeSecondSquad then
10185: LD_EXP 29
10189: IFFALSE 10203
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10191: LD_EXP 29
10195: PPUSH
10196: LD_STRING 04_2_others
10198: PPUSH
10199: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10203: LD_ADDR_VAR 0 1
10207: PUSH
10208: LD_INT 22
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 23
10220: PUSH
10221: LD_INT 0
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: ST_TO_ADDR
// if tmp then
10237: LD_VAR 0 1
10241: IFFALSE 10255
// SaveCharacters ( tmp , 04_2_apes ) ;
10243: LD_VAR 0 1
10247: PPUSH
10248: LD_STRING 04_2_apes
10250: PPUSH
10251: CALL_OW 38
// YouWin ;
10255: CALL_OW 103
// end ; end_of_file
10259: PPOPN 1
10261: END
// export globalGameSaveCounter ; every 0 0$1 do
10262: GO 10264
10264: DISABLE
// begin enable ;
10265: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10266: LD_STRING updateTimer(
10268: PUSH
10269: LD_OWVAR 1
10273: STR
10274: PUSH
10275: LD_STRING );
10277: STR
10278: PPUSH
10279: CALL_OW 559
// end ;
10283: END
// every 0 0$1 do
10284: GO 10286
10286: DISABLE
// begin globalGameSaveCounter := 0 ;
10287: LD_ADDR_EXP 43
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10295: LD_STRING setGameSaveCounter(0)
10297: PPUSH
10298: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10302: LD_STRING initStreamRollete();
10304: PPUSH
10305: CALL_OW 559
// InitStreamMode ;
10309: CALL 11635 0 0
// DefineStreamItems ( false ) ;
10313: LD_INT 0
10315: PPUSH
10316: CALL 12099 0 1
// end ;
10320: END
// export function SOS_MapStart ( ) ; begin
10321: LD_INT 0
10323: PPUSH
// if streamModeActive then
10324: LD_EXP 44
10328: IFFALSE 10337
// DefineStreamItems ( true ) ;
10330: LD_INT 1
10332: PPUSH
10333: CALL 12099 0 1
// UpdateLuaVariables ( ) ;
10337: CALL 10354 0 0
// UpdateFactoryWaypoints ( ) ;
10341: CALL 24960 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10345: CALL 25217 0 0
// end ;
10349: LD_VAR 0 1
10353: RET
// function UpdateLuaVariables ( ) ; begin
10354: LD_INT 0
10356: PPUSH
// if globalGameSaveCounter then
10357: LD_EXP 43
10361: IFFALSE 10395
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10363: LD_ADDR_EXP 43
10367: PUSH
10368: LD_EXP 43
10372: PPUSH
10373: CALL 69337 0 1
10377: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10378: LD_STRING setGameSaveCounter(
10380: PUSH
10381: LD_EXP 43
10385: STR
10386: PUSH
10387: LD_STRING )
10389: STR
10390: PPUSH
10391: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10395: LD_STRING setGameDifficulty(
10397: PUSH
10398: LD_OWVAR 67
10402: STR
10403: PUSH
10404: LD_STRING )
10406: STR
10407: PPUSH
10408: CALL_OW 559
// end ;
10412: LD_VAR 0 1
10416: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10417: LD_INT 0
10419: PPUSH
// if p2 = stream_mode then
10420: LD_VAR 0 2
10424: PUSH
10425: LD_INT 100
10427: EQUAL
10428: IFFALSE 11431
// begin if not StreamModeActive then
10430: LD_EXP 44
10434: NOT
10435: IFFALSE 10445
// StreamModeActive := true ;
10437: LD_ADDR_EXP 44
10441: PUSH
10442: LD_INT 1
10444: ST_TO_ADDR
// if p3 = 0 then
10445: LD_VAR 0 3
10449: PUSH
10450: LD_INT 0
10452: EQUAL
10453: IFFALSE 10459
// InitStreamMode ;
10455: CALL 11635 0 0
// if p3 = 1 then
10459: LD_VAR 0 3
10463: PUSH
10464: LD_INT 1
10466: EQUAL
10467: IFFALSE 10477
// sRocket := true ;
10469: LD_ADDR_EXP 49
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// if p3 = 2 then
10477: LD_VAR 0 3
10481: PUSH
10482: LD_INT 2
10484: EQUAL
10485: IFFALSE 10495
// sSpeed := true ;
10487: LD_ADDR_EXP 48
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// if p3 = 3 then
10495: LD_VAR 0 3
10499: PUSH
10500: LD_INT 3
10502: EQUAL
10503: IFFALSE 10513
// sEngine := true ;
10505: LD_ADDR_EXP 50
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if p3 = 4 then
10513: LD_VAR 0 3
10517: PUSH
10518: LD_INT 4
10520: EQUAL
10521: IFFALSE 10531
// sSpec := true ;
10523: LD_ADDR_EXP 47
10527: PUSH
10528: LD_INT 1
10530: ST_TO_ADDR
// if p3 = 5 then
10531: LD_VAR 0 3
10535: PUSH
10536: LD_INT 5
10538: EQUAL
10539: IFFALSE 10549
// sLevel := true ;
10541: LD_ADDR_EXP 51
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// if p3 = 6 then
10549: LD_VAR 0 3
10553: PUSH
10554: LD_INT 6
10556: EQUAL
10557: IFFALSE 10567
// sArmoury := true ;
10559: LD_ADDR_EXP 52
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// if p3 = 7 then
10567: LD_VAR 0 3
10571: PUSH
10572: LD_INT 7
10574: EQUAL
10575: IFFALSE 10585
// sRadar := true ;
10577: LD_ADDR_EXP 53
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
// if p3 = 8 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 8
10592: EQUAL
10593: IFFALSE 10603
// sBunker := true ;
10595: LD_ADDR_EXP 54
10599: PUSH
10600: LD_INT 1
10602: ST_TO_ADDR
// if p3 = 9 then
10603: LD_VAR 0 3
10607: PUSH
10608: LD_INT 9
10610: EQUAL
10611: IFFALSE 10621
// sHack := true ;
10613: LD_ADDR_EXP 55
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// if p3 = 10 then
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 10
10628: EQUAL
10629: IFFALSE 10639
// sFire := true ;
10631: LD_ADDR_EXP 56
10635: PUSH
10636: LD_INT 1
10638: ST_TO_ADDR
// if p3 = 11 then
10639: LD_VAR 0 3
10643: PUSH
10644: LD_INT 11
10646: EQUAL
10647: IFFALSE 10657
// sRefresh := true ;
10649: LD_ADDR_EXP 57
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// if p3 = 12 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 12
10664: EQUAL
10665: IFFALSE 10675
// sExp := true ;
10667: LD_ADDR_EXP 58
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 13 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 13
10682: EQUAL
10683: IFFALSE 10693
// sDepot := true ;
10685: LD_ADDR_EXP 59
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// if p3 = 14 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 14
10700: EQUAL
10701: IFFALSE 10711
// sFlag := true ;
10703: LD_ADDR_EXP 60
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// if p3 = 15 then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 15
10718: EQUAL
10719: IFFALSE 10729
// sKamikadze := true ;
10721: LD_ADDR_EXP 68
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// if p3 = 16 then
10729: LD_VAR 0 3
10733: PUSH
10734: LD_INT 16
10736: EQUAL
10737: IFFALSE 10747
// sTroll := true ;
10739: LD_ADDR_EXP 69
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// if p3 = 17 then
10747: LD_VAR 0 3
10751: PUSH
10752: LD_INT 17
10754: EQUAL
10755: IFFALSE 10765
// sSlow := true ;
10757: LD_ADDR_EXP 70
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// if p3 = 18 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 18
10772: EQUAL
10773: IFFALSE 10783
// sLack := true ;
10775: LD_ADDR_EXP 71
10779: PUSH
10780: LD_INT 1
10782: ST_TO_ADDR
// if p3 = 19 then
10783: LD_VAR 0 3
10787: PUSH
10788: LD_INT 19
10790: EQUAL
10791: IFFALSE 10801
// sTank := true ;
10793: LD_ADDR_EXP 73
10797: PUSH
10798: LD_INT 1
10800: ST_TO_ADDR
// if p3 = 20 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 20
10808: EQUAL
10809: IFFALSE 10819
// sRemote := true ;
10811: LD_ADDR_EXP 74
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// if p3 = 21 then
10819: LD_VAR 0 3
10823: PUSH
10824: LD_INT 21
10826: EQUAL
10827: IFFALSE 10837
// sPowell := true ;
10829: LD_ADDR_EXP 75
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if p3 = 22 then
10837: LD_VAR 0 3
10841: PUSH
10842: LD_INT 22
10844: EQUAL
10845: IFFALSE 10855
// sTeleport := true ;
10847: LD_ADDR_EXP 78
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if p3 = 23 then
10855: LD_VAR 0 3
10859: PUSH
10860: LD_INT 23
10862: EQUAL
10863: IFFALSE 10873
// sOilTower := true ;
10865: LD_ADDR_EXP 80
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if p3 = 24 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 24
10880: EQUAL
10881: IFFALSE 10891
// sShovel := true ;
10883: LD_ADDR_EXP 81
10887: PUSH
10888: LD_INT 1
10890: ST_TO_ADDR
// if p3 = 25 then
10891: LD_VAR 0 3
10895: PUSH
10896: LD_INT 25
10898: EQUAL
10899: IFFALSE 10909
// sSheik := true ;
10901: LD_ADDR_EXP 82
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// if p3 = 26 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 26
10916: EQUAL
10917: IFFALSE 10927
// sEarthquake := true ;
10919: LD_ADDR_EXP 84
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// if p3 = 27 then
10927: LD_VAR 0 3
10931: PUSH
10932: LD_INT 27
10934: EQUAL
10935: IFFALSE 10945
// sAI := true ;
10937: LD_ADDR_EXP 85
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// if p3 = 28 then
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 28
10952: EQUAL
10953: IFFALSE 10963
// sCargo := true ;
10955: LD_ADDR_EXP 88
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// if p3 = 29 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 29
10970: EQUAL
10971: IFFALSE 10981
// sDLaser := true ;
10973: LD_ADDR_EXP 89
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// if p3 = 30 then
10981: LD_VAR 0 3
10985: PUSH
10986: LD_INT 30
10988: EQUAL
10989: IFFALSE 10999
// sExchange := true ;
10991: LD_ADDR_EXP 90
10995: PUSH
10996: LD_INT 1
10998: ST_TO_ADDR
// if p3 = 31 then
10999: LD_VAR 0 3
11003: PUSH
11004: LD_INT 31
11006: EQUAL
11007: IFFALSE 11017
// sFac := true ;
11009: LD_ADDR_EXP 91
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// if p3 = 32 then
11017: LD_VAR 0 3
11021: PUSH
11022: LD_INT 32
11024: EQUAL
11025: IFFALSE 11035
// sPower := true ;
11027: LD_ADDR_EXP 92
11031: PUSH
11032: LD_INT 1
11034: ST_TO_ADDR
// if p3 = 33 then
11035: LD_VAR 0 3
11039: PUSH
11040: LD_INT 33
11042: EQUAL
11043: IFFALSE 11053
// sRandom := true ;
11045: LD_ADDR_EXP 93
11049: PUSH
11050: LD_INT 1
11052: ST_TO_ADDR
// if p3 = 34 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 34
11060: EQUAL
11061: IFFALSE 11071
// sShield := true ;
11063: LD_ADDR_EXP 94
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// if p3 = 35 then
11071: LD_VAR 0 3
11075: PUSH
11076: LD_INT 35
11078: EQUAL
11079: IFFALSE 11089
// sTime := true ;
11081: LD_ADDR_EXP 95
11085: PUSH
11086: LD_INT 1
11088: ST_TO_ADDR
// if p3 = 36 then
11089: LD_VAR 0 3
11093: PUSH
11094: LD_INT 36
11096: EQUAL
11097: IFFALSE 11107
// sTools := true ;
11099: LD_ADDR_EXP 96
11103: PUSH
11104: LD_INT 1
11106: ST_TO_ADDR
// if p3 = 101 then
11107: LD_VAR 0 3
11111: PUSH
11112: LD_INT 101
11114: EQUAL
11115: IFFALSE 11125
// sSold := true ;
11117: LD_ADDR_EXP 61
11121: PUSH
11122: LD_INT 1
11124: ST_TO_ADDR
// if p3 = 102 then
11125: LD_VAR 0 3
11129: PUSH
11130: LD_INT 102
11132: EQUAL
11133: IFFALSE 11143
// sDiff := true ;
11135: LD_ADDR_EXP 62
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// if p3 = 103 then
11143: LD_VAR 0 3
11147: PUSH
11148: LD_INT 103
11150: EQUAL
11151: IFFALSE 11161
// sFog := true ;
11153: LD_ADDR_EXP 65
11157: PUSH
11158: LD_INT 1
11160: ST_TO_ADDR
// if p3 = 104 then
11161: LD_VAR 0 3
11165: PUSH
11166: LD_INT 104
11168: EQUAL
11169: IFFALSE 11179
// sReset := true ;
11171: LD_ADDR_EXP 66
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// if p3 = 105 then
11179: LD_VAR 0 3
11183: PUSH
11184: LD_INT 105
11186: EQUAL
11187: IFFALSE 11197
// sSun := true ;
11189: LD_ADDR_EXP 67
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// if p3 = 106 then
11197: LD_VAR 0 3
11201: PUSH
11202: LD_INT 106
11204: EQUAL
11205: IFFALSE 11215
// sTiger := true ;
11207: LD_ADDR_EXP 63
11211: PUSH
11212: LD_INT 1
11214: ST_TO_ADDR
// if p3 = 107 then
11215: LD_VAR 0 3
11219: PUSH
11220: LD_INT 107
11222: EQUAL
11223: IFFALSE 11233
// sBomb := true ;
11225: LD_ADDR_EXP 64
11229: PUSH
11230: LD_INT 1
11232: ST_TO_ADDR
// if p3 = 108 then
11233: LD_VAR 0 3
11237: PUSH
11238: LD_INT 108
11240: EQUAL
11241: IFFALSE 11251
// sWound := true ;
11243: LD_ADDR_EXP 72
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// if p3 = 109 then
11251: LD_VAR 0 3
11255: PUSH
11256: LD_INT 109
11258: EQUAL
11259: IFFALSE 11269
// sBetray := true ;
11261: LD_ADDR_EXP 76
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// if p3 = 110 then
11269: LD_VAR 0 3
11273: PUSH
11274: LD_INT 110
11276: EQUAL
11277: IFFALSE 11287
// sContamin := true ;
11279: LD_ADDR_EXP 77
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if p3 = 111 then
11287: LD_VAR 0 3
11291: PUSH
11292: LD_INT 111
11294: EQUAL
11295: IFFALSE 11305
// sOil := true ;
11297: LD_ADDR_EXP 79
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// if p3 = 112 then
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 112
11312: EQUAL
11313: IFFALSE 11323
// sStu := true ;
11315: LD_ADDR_EXP 83
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// if p3 = 113 then
11323: LD_VAR 0 3
11327: PUSH
11328: LD_INT 113
11330: EQUAL
11331: IFFALSE 11341
// sBazooka := true ;
11333: LD_ADDR_EXP 86
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// if p3 = 114 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 114
11348: EQUAL
11349: IFFALSE 11359
// sMortar := true ;
11351: LD_ADDR_EXP 87
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if p3 = 115 then
11359: LD_VAR 0 3
11363: PUSH
11364: LD_INT 115
11366: EQUAL
11367: IFFALSE 11377
// sRanger := true ;
11369: LD_ADDR_EXP 97
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// if p3 = 116 then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 116
11384: EQUAL
11385: IFFALSE 11395
// sComputer := true ;
11387: LD_ADDR_EXP 98
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// if p3 = 117 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 117
11402: EQUAL
11403: IFFALSE 11413
// s30 := true ;
11405: LD_ADDR_EXP 99
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// if p3 = 118 then
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 118
11420: EQUAL
11421: IFFALSE 11431
// s60 := true ;
11423: LD_ADDR_EXP 100
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// end ; if p2 = hack_mode then
11431: LD_VAR 0 2
11435: PUSH
11436: LD_INT 101
11438: EQUAL
11439: IFFALSE 11567
// begin case p3 of 1 :
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 1
11448: DOUBLE
11449: EQUAL
11450: IFTRUE 11454
11452: GO 11461
11454: POP
// hHackUnlimitedResources ; 2 :
11455: CALL 23706 0 0
11459: GO 11567
11461: LD_INT 2
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11476
11469: POP
// hHackSetLevel10 ; 3 :
11470: CALL 23839 0 0
11474: GO 11567
11476: LD_INT 3
11478: DOUBLE
11479: EQUAL
11480: IFTRUE 11484
11482: GO 11491
11484: POP
// hHackSetLevel10YourUnits ; 4 :
11485: CALL 23924 0 0
11489: GO 11567
11491: LD_INT 4
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 11506
11499: POP
// hHackInvincible ; 5 :
11500: CALL 24372 0 0
11504: GO 11567
11506: LD_INT 5
11508: DOUBLE
11509: EQUAL
11510: IFTRUE 11514
11512: GO 11521
11514: POP
// hHackInvisible ; 6 :
11515: CALL 24483 0 0
11519: GO 11567
11521: LD_INT 6
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11536
11529: POP
// hHackChangeYourSide ; 7 :
11530: CALL 24540 0 0
11534: GO 11567
11536: LD_INT 7
11538: DOUBLE
11539: EQUAL
11540: IFTRUE 11544
11542: GO 11551
11544: POP
// hHackChangeUnitSide ; 8 :
11545: CALL 24582 0 0
11549: GO 11567
11551: LD_INT 8
11553: DOUBLE
11554: EQUAL
11555: IFTRUE 11559
11557: GO 11566
11559: POP
// hHackFog ; end ;
11560: CALL 24683 0 0
11564: GO 11567
11566: POP
// end ; if p2 = game_save_mode then
11567: LD_VAR 0 2
11571: PUSH
11572: LD_INT 102
11574: EQUAL
11575: IFFALSE 11630
// begin if p3 = 1 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 1
11584: EQUAL
11585: IFFALSE 11597
// globalGameSaveCounter := p4 ;
11587: LD_ADDR_EXP 43
11591: PUSH
11592: LD_VAR 0 4
11596: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 2
11604: EQUAL
11605: PUSH
11606: LD_EXP 43
11610: AND
11611: IFFALSE 11630
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11613: LD_STRING setGameSaveCounter(
11615: PUSH
11616: LD_EXP 43
11620: STR
11621: PUSH
11622: LD_STRING )
11624: STR
11625: PPUSH
11626: CALL_OW 559
// end ; end ;
11630: LD_VAR 0 7
11634: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11635: LD_INT 0
11637: PPUSH
// streamModeActive := false ;
11638: LD_ADDR_EXP 44
11642: PUSH
11643: LD_INT 0
11645: ST_TO_ADDR
// normalCounter := 36 ;
11646: LD_ADDR_EXP 45
11650: PUSH
11651: LD_INT 36
11653: ST_TO_ADDR
// hardcoreCounter := 18 ;
11654: LD_ADDR_EXP 46
11658: PUSH
11659: LD_INT 18
11661: ST_TO_ADDR
// sRocket := false ;
11662: LD_ADDR_EXP 49
11666: PUSH
11667: LD_INT 0
11669: ST_TO_ADDR
// sSpeed := false ;
11670: LD_ADDR_EXP 48
11674: PUSH
11675: LD_INT 0
11677: ST_TO_ADDR
// sEngine := false ;
11678: LD_ADDR_EXP 50
11682: PUSH
11683: LD_INT 0
11685: ST_TO_ADDR
// sSpec := false ;
11686: LD_ADDR_EXP 47
11690: PUSH
11691: LD_INT 0
11693: ST_TO_ADDR
// sLevel := false ;
11694: LD_ADDR_EXP 51
11698: PUSH
11699: LD_INT 0
11701: ST_TO_ADDR
// sArmoury := false ;
11702: LD_ADDR_EXP 52
11706: PUSH
11707: LD_INT 0
11709: ST_TO_ADDR
// sRadar := false ;
11710: LD_ADDR_EXP 53
11714: PUSH
11715: LD_INT 0
11717: ST_TO_ADDR
// sBunker := false ;
11718: LD_ADDR_EXP 54
11722: PUSH
11723: LD_INT 0
11725: ST_TO_ADDR
// sHack := false ;
11726: LD_ADDR_EXP 55
11730: PUSH
11731: LD_INT 0
11733: ST_TO_ADDR
// sFire := false ;
11734: LD_ADDR_EXP 56
11738: PUSH
11739: LD_INT 0
11741: ST_TO_ADDR
// sRefresh := false ;
11742: LD_ADDR_EXP 57
11746: PUSH
11747: LD_INT 0
11749: ST_TO_ADDR
// sExp := false ;
11750: LD_ADDR_EXP 58
11754: PUSH
11755: LD_INT 0
11757: ST_TO_ADDR
// sDepot := false ;
11758: LD_ADDR_EXP 59
11762: PUSH
11763: LD_INT 0
11765: ST_TO_ADDR
// sFlag := false ;
11766: LD_ADDR_EXP 60
11770: PUSH
11771: LD_INT 0
11773: ST_TO_ADDR
// sKamikadze := false ;
11774: LD_ADDR_EXP 68
11778: PUSH
11779: LD_INT 0
11781: ST_TO_ADDR
// sTroll := false ;
11782: LD_ADDR_EXP 69
11786: PUSH
11787: LD_INT 0
11789: ST_TO_ADDR
// sSlow := false ;
11790: LD_ADDR_EXP 70
11794: PUSH
11795: LD_INT 0
11797: ST_TO_ADDR
// sLack := false ;
11798: LD_ADDR_EXP 71
11802: PUSH
11803: LD_INT 0
11805: ST_TO_ADDR
// sTank := false ;
11806: LD_ADDR_EXP 73
11810: PUSH
11811: LD_INT 0
11813: ST_TO_ADDR
// sRemote := false ;
11814: LD_ADDR_EXP 74
11818: PUSH
11819: LD_INT 0
11821: ST_TO_ADDR
// sPowell := false ;
11822: LD_ADDR_EXP 75
11826: PUSH
11827: LD_INT 0
11829: ST_TO_ADDR
// sTeleport := false ;
11830: LD_ADDR_EXP 78
11834: PUSH
11835: LD_INT 0
11837: ST_TO_ADDR
// sOilTower := false ;
11838: LD_ADDR_EXP 80
11842: PUSH
11843: LD_INT 0
11845: ST_TO_ADDR
// sShovel := false ;
11846: LD_ADDR_EXP 81
11850: PUSH
11851: LD_INT 0
11853: ST_TO_ADDR
// sSheik := false ;
11854: LD_ADDR_EXP 82
11858: PUSH
11859: LD_INT 0
11861: ST_TO_ADDR
// sEarthquake := false ;
11862: LD_ADDR_EXP 84
11866: PUSH
11867: LD_INT 0
11869: ST_TO_ADDR
// sAI := false ;
11870: LD_ADDR_EXP 85
11874: PUSH
11875: LD_INT 0
11877: ST_TO_ADDR
// sCargo := false ;
11878: LD_ADDR_EXP 88
11882: PUSH
11883: LD_INT 0
11885: ST_TO_ADDR
// sDLaser := false ;
11886: LD_ADDR_EXP 89
11890: PUSH
11891: LD_INT 0
11893: ST_TO_ADDR
// sExchange := false ;
11894: LD_ADDR_EXP 90
11898: PUSH
11899: LD_INT 0
11901: ST_TO_ADDR
// sFac := false ;
11902: LD_ADDR_EXP 91
11906: PUSH
11907: LD_INT 0
11909: ST_TO_ADDR
// sPower := false ;
11910: LD_ADDR_EXP 92
11914: PUSH
11915: LD_INT 0
11917: ST_TO_ADDR
// sRandom := false ;
11918: LD_ADDR_EXP 93
11922: PUSH
11923: LD_INT 0
11925: ST_TO_ADDR
// sShield := false ;
11926: LD_ADDR_EXP 94
11930: PUSH
11931: LD_INT 0
11933: ST_TO_ADDR
// sTime := false ;
11934: LD_ADDR_EXP 95
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// sTools := false ;
11942: LD_ADDR_EXP 96
11946: PUSH
11947: LD_INT 0
11949: ST_TO_ADDR
// sSold := false ;
11950: LD_ADDR_EXP 61
11954: PUSH
11955: LD_INT 0
11957: ST_TO_ADDR
// sDiff := false ;
11958: LD_ADDR_EXP 62
11962: PUSH
11963: LD_INT 0
11965: ST_TO_ADDR
// sFog := false ;
11966: LD_ADDR_EXP 65
11970: PUSH
11971: LD_INT 0
11973: ST_TO_ADDR
// sReset := false ;
11974: LD_ADDR_EXP 66
11978: PUSH
11979: LD_INT 0
11981: ST_TO_ADDR
// sSun := false ;
11982: LD_ADDR_EXP 67
11986: PUSH
11987: LD_INT 0
11989: ST_TO_ADDR
// sTiger := false ;
11990: LD_ADDR_EXP 63
11994: PUSH
11995: LD_INT 0
11997: ST_TO_ADDR
// sBomb := false ;
11998: LD_ADDR_EXP 64
12002: PUSH
12003: LD_INT 0
12005: ST_TO_ADDR
// sWound := false ;
12006: LD_ADDR_EXP 72
12010: PUSH
12011: LD_INT 0
12013: ST_TO_ADDR
// sBetray := false ;
12014: LD_ADDR_EXP 76
12018: PUSH
12019: LD_INT 0
12021: ST_TO_ADDR
// sContamin := false ;
12022: LD_ADDR_EXP 77
12026: PUSH
12027: LD_INT 0
12029: ST_TO_ADDR
// sOil := false ;
12030: LD_ADDR_EXP 79
12034: PUSH
12035: LD_INT 0
12037: ST_TO_ADDR
// sStu := false ;
12038: LD_ADDR_EXP 83
12042: PUSH
12043: LD_INT 0
12045: ST_TO_ADDR
// sBazooka := false ;
12046: LD_ADDR_EXP 86
12050: PUSH
12051: LD_INT 0
12053: ST_TO_ADDR
// sMortar := false ;
12054: LD_ADDR_EXP 87
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// sRanger := false ;
12062: LD_ADDR_EXP 97
12066: PUSH
12067: LD_INT 0
12069: ST_TO_ADDR
// sComputer := false ;
12070: LD_ADDR_EXP 98
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// s30 := false ;
12078: LD_ADDR_EXP 99
12082: PUSH
12083: LD_INT 0
12085: ST_TO_ADDR
// s60 := false ;
12086: LD_ADDR_EXP 100
12090: PUSH
12091: LD_INT 0
12093: ST_TO_ADDR
// end ;
12094: LD_VAR 0 1
12098: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12099: LD_INT 0
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// result := [ ] ;
12108: LD_ADDR_VAR 0 2
12112: PUSH
12113: EMPTY
12114: ST_TO_ADDR
// if campaign_id = 1 then
12115: LD_OWVAR 69
12119: PUSH
12120: LD_INT 1
12122: EQUAL
12123: IFFALSE 15289
// begin case mission_number of 1 :
12125: LD_OWVAR 70
12129: PUSH
12130: LD_INT 1
12132: DOUBLE
12133: EQUAL
12134: IFTRUE 12138
12136: GO 12214
12138: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12139: LD_ADDR_VAR 0 2
12143: PUSH
12144: LD_INT 2
12146: PUSH
12147: LD_INT 4
12149: PUSH
12150: LD_INT 11
12152: PUSH
12153: LD_INT 12
12155: PUSH
12156: LD_INT 15
12158: PUSH
12159: LD_INT 16
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 26
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 101
12184: PUSH
12185: LD_INT 102
12187: PUSH
12188: LD_INT 106
12190: PUSH
12191: LD_INT 116
12193: PUSH
12194: LD_INT 117
12196: PUSH
12197: LD_INT 118
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: ST_TO_ADDR
12212: GO 15287
12214: LD_INT 2
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12306
12222: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: LD_INT 4
12233: PUSH
12234: LD_INT 11
12236: PUSH
12237: LD_INT 12
12239: PUSH
12240: LD_INT 15
12242: PUSH
12243: LD_INT 16
12245: PUSH
12246: LD_INT 22
12248: PUSH
12249: LD_INT 23
12251: PUSH
12252: LD_INT 26
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 101
12268: PUSH
12269: LD_INT 102
12271: PUSH
12272: LD_INT 105
12274: PUSH
12275: LD_INT 106
12277: PUSH
12278: LD_INT 108
12280: PUSH
12281: LD_INT 116
12283: PUSH
12284: LD_INT 117
12286: PUSH
12287: LD_INT 118
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: ST_TO_ADDR
12304: GO 15287
12306: LD_INT 3
12308: DOUBLE
12309: EQUAL
12310: IFTRUE 12314
12312: GO 12402
12314: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_INT 2
12322: PUSH
12323: LD_INT 4
12325: PUSH
12326: LD_INT 5
12328: PUSH
12329: LD_INT 11
12331: PUSH
12332: LD_INT 12
12334: PUSH
12335: LD_INT 15
12337: PUSH
12338: LD_INT 16
12340: PUSH
12341: LD_INT 22
12343: PUSH
12344: LD_INT 26
12346: PUSH
12347: LD_INT 36
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 101
12364: PUSH
12365: LD_INT 102
12367: PUSH
12368: LD_INT 105
12370: PUSH
12371: LD_INT 106
12373: PUSH
12374: LD_INT 108
12376: PUSH
12377: LD_INT 116
12379: PUSH
12380: LD_INT 117
12382: PUSH
12383: LD_INT 118
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: ST_TO_ADDR
12400: GO 15287
12402: LD_INT 4
12404: DOUBLE
12405: EQUAL
12406: IFTRUE 12410
12408: GO 12506
12410: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12411: LD_ADDR_VAR 0 2
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: LD_INT 4
12421: PUSH
12422: LD_INT 5
12424: PUSH
12425: LD_INT 8
12427: PUSH
12428: LD_INT 11
12430: PUSH
12431: LD_INT 12
12433: PUSH
12434: LD_INT 15
12436: PUSH
12437: LD_INT 16
12439: PUSH
12440: LD_INT 22
12442: PUSH
12443: LD_INT 23
12445: PUSH
12446: LD_INT 26
12448: PUSH
12449: LD_INT 36
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 101
12468: PUSH
12469: LD_INT 102
12471: PUSH
12472: LD_INT 105
12474: PUSH
12475: LD_INT 106
12477: PUSH
12478: LD_INT 108
12480: PUSH
12481: LD_INT 116
12483: PUSH
12484: LD_INT 117
12486: PUSH
12487: LD_INT 118
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: ST_TO_ADDR
12504: GO 15287
12506: LD_INT 5
12508: DOUBLE
12509: EQUAL
12510: IFTRUE 12514
12512: GO 12626
12514: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12515: LD_ADDR_VAR 0 2
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: LD_INT 4
12525: PUSH
12526: LD_INT 5
12528: PUSH
12529: LD_INT 6
12531: PUSH
12532: LD_INT 8
12534: PUSH
12535: LD_INT 11
12537: PUSH
12538: LD_INT 12
12540: PUSH
12541: LD_INT 15
12543: PUSH
12544: LD_INT 16
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: LD_INT 23
12552: PUSH
12553: LD_INT 25
12555: PUSH
12556: LD_INT 26
12558: PUSH
12559: LD_INT 36
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 101
12580: PUSH
12581: LD_INT 102
12583: PUSH
12584: LD_INT 105
12586: PUSH
12587: LD_INT 106
12589: PUSH
12590: LD_INT 108
12592: PUSH
12593: LD_INT 109
12595: PUSH
12596: LD_INT 112
12598: PUSH
12599: LD_INT 116
12601: PUSH
12602: LD_INT 117
12604: PUSH
12605: LD_INT 118
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: ST_TO_ADDR
12624: GO 15287
12626: LD_INT 6
12628: DOUBLE
12629: EQUAL
12630: IFTRUE 12634
12632: GO 12766
12634: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 4
12645: PUSH
12646: LD_INT 5
12648: PUSH
12649: LD_INT 6
12651: PUSH
12652: LD_INT 8
12654: PUSH
12655: LD_INT 11
12657: PUSH
12658: LD_INT 12
12660: PUSH
12661: LD_INT 15
12663: PUSH
12664: LD_INT 16
12666: PUSH
12667: LD_INT 20
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_INT 23
12678: PUSH
12679: LD_INT 25
12681: PUSH
12682: LD_INT 26
12684: PUSH
12685: LD_INT 30
12687: PUSH
12688: LD_INT 31
12690: PUSH
12691: LD_INT 32
12693: PUSH
12694: LD_INT 36
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 101
12720: PUSH
12721: LD_INT 102
12723: PUSH
12724: LD_INT 105
12726: PUSH
12727: LD_INT 106
12729: PUSH
12730: LD_INT 108
12732: PUSH
12733: LD_INT 109
12735: PUSH
12736: LD_INT 112
12738: PUSH
12739: LD_INT 116
12741: PUSH
12742: LD_INT 117
12744: PUSH
12745: LD_INT 118
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: ST_TO_ADDR
12764: GO 15287
12766: LD_INT 7
12768: DOUBLE
12769: EQUAL
12770: IFTRUE 12774
12772: GO 12886
12774: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12775: LD_ADDR_VAR 0 2
12779: PUSH
12780: LD_INT 2
12782: PUSH
12783: LD_INT 4
12785: PUSH
12786: LD_INT 5
12788: PUSH
12789: LD_INT 7
12791: PUSH
12792: LD_INT 11
12794: PUSH
12795: LD_INT 12
12797: PUSH
12798: LD_INT 15
12800: PUSH
12801: LD_INT 16
12803: PUSH
12804: LD_INT 20
12806: PUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 22
12812: PUSH
12813: LD_INT 23
12815: PUSH
12816: LD_INT 25
12818: PUSH
12819: LD_INT 26
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 101
12840: PUSH
12841: LD_INT 102
12843: PUSH
12844: LD_INT 103
12846: PUSH
12847: LD_INT 105
12849: PUSH
12850: LD_INT 106
12852: PUSH
12853: LD_INT 108
12855: PUSH
12856: LD_INT 112
12858: PUSH
12859: LD_INT 116
12861: PUSH
12862: LD_INT 117
12864: PUSH
12865: LD_INT 118
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: ST_TO_ADDR
12884: GO 15287
12886: LD_INT 8
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 13034
12894: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12895: LD_ADDR_VAR 0 2
12899: PUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 4
12905: PUSH
12906: LD_INT 5
12908: PUSH
12909: LD_INT 6
12911: PUSH
12912: LD_INT 7
12914: PUSH
12915: LD_INT 8
12917: PUSH
12918: LD_INT 11
12920: PUSH
12921: LD_INT 12
12923: PUSH
12924: LD_INT 15
12926: PUSH
12927: LD_INT 16
12929: PUSH
12930: LD_INT 20
12932: PUSH
12933: LD_INT 21
12935: PUSH
12936: LD_INT 22
12938: PUSH
12939: LD_INT 23
12941: PUSH
12942: LD_INT 25
12944: PUSH
12945: LD_INT 26
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 31
12953: PUSH
12954: LD_INT 32
12956: PUSH
12957: LD_INT 36
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 101
12984: PUSH
12985: LD_INT 102
12987: PUSH
12988: LD_INT 103
12990: PUSH
12991: LD_INT 105
12993: PUSH
12994: LD_INT 106
12996: PUSH
12997: LD_INT 108
12999: PUSH
13000: LD_INT 109
13002: PUSH
13003: LD_INT 112
13005: PUSH
13006: LD_INT 116
13008: PUSH
13009: LD_INT 117
13011: PUSH
13012: LD_INT 118
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: ST_TO_ADDR
13032: GO 15287
13034: LD_INT 9
13036: DOUBLE
13037: EQUAL
13038: IFTRUE 13042
13040: GO 13190
13042: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 2
13050: PUSH
13051: LD_INT 4
13053: PUSH
13054: LD_INT 5
13056: PUSH
13057: LD_INT 6
13059: PUSH
13060: LD_INT 7
13062: PUSH
13063: LD_INT 8
13065: PUSH
13066: LD_INT 11
13068: PUSH
13069: LD_INT 12
13071: PUSH
13072: LD_INT 15
13074: PUSH
13075: LD_INT 16
13077: PUSH
13078: LD_INT 20
13080: PUSH
13081: LD_INT 21
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_INT 23
13089: PUSH
13090: LD_INT 25
13092: PUSH
13093: LD_INT 26
13095: PUSH
13096: LD_INT 28
13098: PUSH
13099: LD_INT 30
13101: PUSH
13102: LD_INT 31
13104: PUSH
13105: LD_INT 32
13107: PUSH
13108: LD_INT 36
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 101
13136: PUSH
13137: LD_INT 102
13139: PUSH
13140: LD_INT 103
13142: PUSH
13143: LD_INT 105
13145: PUSH
13146: LD_INT 106
13148: PUSH
13149: LD_INT 108
13151: PUSH
13152: LD_INT 109
13154: PUSH
13155: LD_INT 112
13157: PUSH
13158: LD_INT 114
13160: PUSH
13161: LD_INT 116
13163: PUSH
13164: LD_INT 117
13166: PUSH
13167: LD_INT 118
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: ST_TO_ADDR
13188: GO 15287
13190: LD_INT 10
13192: DOUBLE
13193: EQUAL
13194: IFTRUE 13198
13196: GO 13394
13198: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13199: LD_ADDR_VAR 0 2
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: LD_INT 5
13212: PUSH
13213: LD_INT 6
13215: PUSH
13216: LD_INT 7
13218: PUSH
13219: LD_INT 8
13221: PUSH
13222: LD_INT 9
13224: PUSH
13225: LD_INT 10
13227: PUSH
13228: LD_INT 11
13230: PUSH
13231: LD_INT 12
13233: PUSH
13234: LD_INT 13
13236: PUSH
13237: LD_INT 14
13239: PUSH
13240: LD_INT 15
13242: PUSH
13243: LD_INT 16
13245: PUSH
13246: LD_INT 17
13248: PUSH
13249: LD_INT 18
13251: PUSH
13252: LD_INT 19
13254: PUSH
13255: LD_INT 20
13257: PUSH
13258: LD_INT 21
13260: PUSH
13261: LD_INT 22
13263: PUSH
13264: LD_INT 23
13266: PUSH
13267: LD_INT 24
13269: PUSH
13270: LD_INT 25
13272: PUSH
13273: LD_INT 26
13275: PUSH
13276: LD_INT 28
13278: PUSH
13279: LD_INT 30
13281: PUSH
13282: LD_INT 31
13284: PUSH
13285: LD_INT 32
13287: PUSH
13288: LD_INT 36
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 101
13324: PUSH
13325: LD_INT 102
13327: PUSH
13328: LD_INT 103
13330: PUSH
13331: LD_INT 104
13333: PUSH
13334: LD_INT 105
13336: PUSH
13337: LD_INT 106
13339: PUSH
13340: LD_INT 107
13342: PUSH
13343: LD_INT 108
13345: PUSH
13346: LD_INT 109
13348: PUSH
13349: LD_INT 110
13351: PUSH
13352: LD_INT 111
13354: PUSH
13355: LD_INT 112
13357: PUSH
13358: LD_INT 114
13360: PUSH
13361: LD_INT 116
13363: PUSH
13364: LD_INT 117
13366: PUSH
13367: LD_INT 118
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: ST_TO_ADDR
13392: GO 15287
13394: LD_INT 11
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13606
13402: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13403: LD_ADDR_VAR 0 2
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: LD_INT 3
13413: PUSH
13414: LD_INT 4
13416: PUSH
13417: LD_INT 5
13419: PUSH
13420: LD_INT 6
13422: PUSH
13423: LD_INT 7
13425: PUSH
13426: LD_INT 8
13428: PUSH
13429: LD_INT 9
13431: PUSH
13432: LD_INT 10
13434: PUSH
13435: LD_INT 11
13437: PUSH
13438: LD_INT 12
13440: PUSH
13441: LD_INT 13
13443: PUSH
13444: LD_INT 14
13446: PUSH
13447: LD_INT 15
13449: PUSH
13450: LD_INT 16
13452: PUSH
13453: LD_INT 17
13455: PUSH
13456: LD_INT 18
13458: PUSH
13459: LD_INT 19
13461: PUSH
13462: LD_INT 20
13464: PUSH
13465: LD_INT 21
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 23
13473: PUSH
13474: LD_INT 24
13476: PUSH
13477: LD_INT 25
13479: PUSH
13480: LD_INT 26
13482: PUSH
13483: LD_INT 28
13485: PUSH
13486: LD_INT 30
13488: PUSH
13489: LD_INT 31
13491: PUSH
13492: LD_INT 32
13494: PUSH
13495: LD_INT 34
13497: PUSH
13498: LD_INT 36
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 101
13536: PUSH
13537: LD_INT 102
13539: PUSH
13540: LD_INT 103
13542: PUSH
13543: LD_INT 104
13545: PUSH
13546: LD_INT 105
13548: PUSH
13549: LD_INT 106
13551: PUSH
13552: LD_INT 107
13554: PUSH
13555: LD_INT 108
13557: PUSH
13558: LD_INT 109
13560: PUSH
13561: LD_INT 110
13563: PUSH
13564: LD_INT 111
13566: PUSH
13567: LD_INT 112
13569: PUSH
13570: LD_INT 114
13572: PUSH
13573: LD_INT 116
13575: PUSH
13576: LD_INT 117
13578: PUSH
13579: LD_INT 118
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: ST_TO_ADDR
13604: GO 15287
13606: LD_INT 12
13608: DOUBLE
13609: EQUAL
13610: IFTRUE 13614
13612: GO 13834
13614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13615: LD_ADDR_VAR 0 2
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: LD_INT 2
13625: PUSH
13626: LD_INT 3
13628: PUSH
13629: LD_INT 4
13631: PUSH
13632: LD_INT 5
13634: PUSH
13635: LD_INT 6
13637: PUSH
13638: LD_INT 7
13640: PUSH
13641: LD_INT 8
13643: PUSH
13644: LD_INT 9
13646: PUSH
13647: LD_INT 10
13649: PUSH
13650: LD_INT 11
13652: PUSH
13653: LD_INT 12
13655: PUSH
13656: LD_INT 13
13658: PUSH
13659: LD_INT 14
13661: PUSH
13662: LD_INT 15
13664: PUSH
13665: LD_INT 16
13667: PUSH
13668: LD_INT 17
13670: PUSH
13671: LD_INT 18
13673: PUSH
13674: LD_INT 19
13676: PUSH
13677: LD_INT 20
13679: PUSH
13680: LD_INT 21
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_INT 23
13688: PUSH
13689: LD_INT 24
13691: PUSH
13692: LD_INT 25
13694: PUSH
13695: LD_INT 26
13697: PUSH
13698: LD_INT 27
13700: PUSH
13701: LD_INT 28
13703: PUSH
13704: LD_INT 30
13706: PUSH
13707: LD_INT 31
13709: PUSH
13710: LD_INT 32
13712: PUSH
13713: LD_INT 33
13715: PUSH
13716: LD_INT 34
13718: PUSH
13719: LD_INT 36
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 101
13760: PUSH
13761: LD_INT 102
13763: PUSH
13764: LD_INT 103
13766: PUSH
13767: LD_INT 104
13769: PUSH
13770: LD_INT 105
13772: PUSH
13773: LD_INT 106
13775: PUSH
13776: LD_INT 107
13778: PUSH
13779: LD_INT 108
13781: PUSH
13782: LD_INT 109
13784: PUSH
13785: LD_INT 110
13787: PUSH
13788: LD_INT 111
13790: PUSH
13791: LD_INT 112
13793: PUSH
13794: LD_INT 113
13796: PUSH
13797: LD_INT 114
13799: PUSH
13800: LD_INT 116
13802: PUSH
13803: LD_INT 117
13805: PUSH
13806: LD_INT 118
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: ST_TO_ADDR
13832: GO 15287
13834: LD_INT 13
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 14050
13842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13843: LD_ADDR_VAR 0 2
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 3
13856: PUSH
13857: LD_INT 4
13859: PUSH
13860: LD_INT 5
13862: PUSH
13863: LD_INT 8
13865: PUSH
13866: LD_INT 9
13868: PUSH
13869: LD_INT 10
13871: PUSH
13872: LD_INT 11
13874: PUSH
13875: LD_INT 12
13877: PUSH
13878: LD_INT 14
13880: PUSH
13881: LD_INT 15
13883: PUSH
13884: LD_INT 16
13886: PUSH
13887: LD_INT 17
13889: PUSH
13890: LD_INT 18
13892: PUSH
13893: LD_INT 19
13895: PUSH
13896: LD_INT 20
13898: PUSH
13899: LD_INT 21
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_INT 23
13907: PUSH
13908: LD_INT 24
13910: PUSH
13911: LD_INT 25
13913: PUSH
13914: LD_INT 26
13916: PUSH
13917: LD_INT 27
13919: PUSH
13920: LD_INT 28
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 31
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: LD_INT 33
13934: PUSH
13935: LD_INT 34
13937: PUSH
13938: LD_INT 36
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 101
13976: PUSH
13977: LD_INT 102
13979: PUSH
13980: LD_INT 103
13982: PUSH
13983: LD_INT 104
13985: PUSH
13986: LD_INT 105
13988: PUSH
13989: LD_INT 106
13991: PUSH
13992: LD_INT 107
13994: PUSH
13995: LD_INT 108
13997: PUSH
13998: LD_INT 109
14000: PUSH
14001: LD_INT 110
14003: PUSH
14004: LD_INT 111
14006: PUSH
14007: LD_INT 112
14009: PUSH
14010: LD_INT 113
14012: PUSH
14013: LD_INT 114
14015: PUSH
14016: LD_INT 116
14018: PUSH
14019: LD_INT 117
14021: PUSH
14022: LD_INT 118
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: ST_TO_ADDR
14048: GO 15287
14050: LD_INT 14
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14282
14058: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_INT 1
14066: PUSH
14067: LD_INT 2
14069: PUSH
14070: LD_INT 3
14072: PUSH
14073: LD_INT 4
14075: PUSH
14076: LD_INT 5
14078: PUSH
14079: LD_INT 6
14081: PUSH
14082: LD_INT 7
14084: PUSH
14085: LD_INT 8
14087: PUSH
14088: LD_INT 9
14090: PUSH
14091: LD_INT 10
14093: PUSH
14094: LD_INT 11
14096: PUSH
14097: LD_INT 12
14099: PUSH
14100: LD_INT 13
14102: PUSH
14103: LD_INT 14
14105: PUSH
14106: LD_INT 15
14108: PUSH
14109: LD_INT 16
14111: PUSH
14112: LD_INT 17
14114: PUSH
14115: LD_INT 18
14117: PUSH
14118: LD_INT 19
14120: PUSH
14121: LD_INT 20
14123: PUSH
14124: LD_INT 21
14126: PUSH
14127: LD_INT 22
14129: PUSH
14130: LD_INT 23
14132: PUSH
14133: LD_INT 24
14135: PUSH
14136: LD_INT 25
14138: PUSH
14139: LD_INT 26
14141: PUSH
14142: LD_INT 27
14144: PUSH
14145: LD_INT 28
14147: PUSH
14148: LD_INT 29
14150: PUSH
14151: LD_INT 30
14153: PUSH
14154: LD_INT 31
14156: PUSH
14157: LD_INT 32
14159: PUSH
14160: LD_INT 33
14162: PUSH
14163: LD_INT 34
14165: PUSH
14166: LD_INT 36
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 101
14208: PUSH
14209: LD_INT 102
14211: PUSH
14212: LD_INT 103
14214: PUSH
14215: LD_INT 104
14217: PUSH
14218: LD_INT 105
14220: PUSH
14221: LD_INT 106
14223: PUSH
14224: LD_INT 107
14226: PUSH
14227: LD_INT 108
14229: PUSH
14230: LD_INT 109
14232: PUSH
14233: LD_INT 110
14235: PUSH
14236: LD_INT 111
14238: PUSH
14239: LD_INT 112
14241: PUSH
14242: LD_INT 113
14244: PUSH
14245: LD_INT 114
14247: PUSH
14248: LD_INT 116
14250: PUSH
14251: LD_INT 117
14253: PUSH
14254: LD_INT 118
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: ST_TO_ADDR
14280: GO 15287
14282: LD_INT 15
14284: DOUBLE
14285: EQUAL
14286: IFTRUE 14290
14288: GO 14514
14290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14291: LD_ADDR_VAR 0 2
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: LD_INT 2
14301: PUSH
14302: LD_INT 3
14304: PUSH
14305: LD_INT 4
14307: PUSH
14308: LD_INT 5
14310: PUSH
14311: LD_INT 6
14313: PUSH
14314: LD_INT 7
14316: PUSH
14317: LD_INT 8
14319: PUSH
14320: LD_INT 9
14322: PUSH
14323: LD_INT 10
14325: PUSH
14326: LD_INT 11
14328: PUSH
14329: LD_INT 12
14331: PUSH
14332: LD_INT 13
14334: PUSH
14335: LD_INT 14
14337: PUSH
14338: LD_INT 15
14340: PUSH
14341: LD_INT 16
14343: PUSH
14344: LD_INT 17
14346: PUSH
14347: LD_INT 18
14349: PUSH
14350: LD_INT 19
14352: PUSH
14353: LD_INT 20
14355: PUSH
14356: LD_INT 21
14358: PUSH
14359: LD_INT 22
14361: PUSH
14362: LD_INT 23
14364: PUSH
14365: LD_INT 24
14367: PUSH
14368: LD_INT 25
14370: PUSH
14371: LD_INT 26
14373: PUSH
14374: LD_INT 27
14376: PUSH
14377: LD_INT 28
14379: PUSH
14380: LD_INT 29
14382: PUSH
14383: LD_INT 30
14385: PUSH
14386: LD_INT 31
14388: PUSH
14389: LD_INT 32
14391: PUSH
14392: LD_INT 33
14394: PUSH
14395: LD_INT 34
14397: PUSH
14398: LD_INT 36
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 101
14440: PUSH
14441: LD_INT 102
14443: PUSH
14444: LD_INT 103
14446: PUSH
14447: LD_INT 104
14449: PUSH
14450: LD_INT 105
14452: PUSH
14453: LD_INT 106
14455: PUSH
14456: LD_INT 107
14458: PUSH
14459: LD_INT 108
14461: PUSH
14462: LD_INT 109
14464: PUSH
14465: LD_INT 110
14467: PUSH
14468: LD_INT 111
14470: PUSH
14471: LD_INT 112
14473: PUSH
14474: LD_INT 113
14476: PUSH
14477: LD_INT 114
14479: PUSH
14480: LD_INT 116
14482: PUSH
14483: LD_INT 117
14485: PUSH
14486: LD_INT 118
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: ST_TO_ADDR
14512: GO 15287
14514: LD_INT 16
14516: DOUBLE
14517: EQUAL
14518: IFTRUE 14522
14520: GO 14658
14522: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14523: LD_ADDR_VAR 0 2
14527: PUSH
14528: LD_INT 2
14530: PUSH
14531: LD_INT 4
14533: PUSH
14534: LD_INT 5
14536: PUSH
14537: LD_INT 7
14539: PUSH
14540: LD_INT 11
14542: PUSH
14543: LD_INT 12
14545: PUSH
14546: LD_INT 15
14548: PUSH
14549: LD_INT 16
14551: PUSH
14552: LD_INT 20
14554: PUSH
14555: LD_INT 21
14557: PUSH
14558: LD_INT 22
14560: PUSH
14561: LD_INT 23
14563: PUSH
14564: LD_INT 25
14566: PUSH
14567: LD_INT 26
14569: PUSH
14570: LD_INT 30
14572: PUSH
14573: LD_INT 31
14575: PUSH
14576: LD_INT 32
14578: PUSH
14579: LD_INT 33
14581: PUSH
14582: LD_INT 34
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 101
14608: PUSH
14609: LD_INT 102
14611: PUSH
14612: LD_INT 103
14614: PUSH
14615: LD_INT 106
14617: PUSH
14618: LD_INT 108
14620: PUSH
14621: LD_INT 112
14623: PUSH
14624: LD_INT 113
14626: PUSH
14627: LD_INT 114
14629: PUSH
14630: LD_INT 116
14632: PUSH
14633: LD_INT 117
14635: PUSH
14636: LD_INT 118
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: ST_TO_ADDR
14656: GO 15287
14658: LD_INT 17
14660: DOUBLE
14661: EQUAL
14662: IFTRUE 14666
14664: GO 14890
14666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14667: LD_ADDR_VAR 0 2
14671: PUSH
14672: LD_INT 1
14674: PUSH
14675: LD_INT 2
14677: PUSH
14678: LD_INT 3
14680: PUSH
14681: LD_INT 4
14683: PUSH
14684: LD_INT 5
14686: PUSH
14687: LD_INT 6
14689: PUSH
14690: LD_INT 7
14692: PUSH
14693: LD_INT 8
14695: PUSH
14696: LD_INT 9
14698: PUSH
14699: LD_INT 10
14701: PUSH
14702: LD_INT 11
14704: PUSH
14705: LD_INT 12
14707: PUSH
14708: LD_INT 13
14710: PUSH
14711: LD_INT 14
14713: PUSH
14714: LD_INT 15
14716: PUSH
14717: LD_INT 16
14719: PUSH
14720: LD_INT 17
14722: PUSH
14723: LD_INT 18
14725: PUSH
14726: LD_INT 19
14728: PUSH
14729: LD_INT 20
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_INT 23
14740: PUSH
14741: LD_INT 24
14743: PUSH
14744: LD_INT 25
14746: PUSH
14747: LD_INT 26
14749: PUSH
14750: LD_INT 27
14752: PUSH
14753: LD_INT 28
14755: PUSH
14756: LD_INT 29
14758: PUSH
14759: LD_INT 30
14761: PUSH
14762: LD_INT 31
14764: PUSH
14765: LD_INT 32
14767: PUSH
14768: LD_INT 33
14770: PUSH
14771: LD_INT 34
14773: PUSH
14774: LD_INT 36
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 101
14816: PUSH
14817: LD_INT 102
14819: PUSH
14820: LD_INT 103
14822: PUSH
14823: LD_INT 104
14825: PUSH
14826: LD_INT 105
14828: PUSH
14829: LD_INT 106
14831: PUSH
14832: LD_INT 107
14834: PUSH
14835: LD_INT 108
14837: PUSH
14838: LD_INT 109
14840: PUSH
14841: LD_INT 110
14843: PUSH
14844: LD_INT 111
14846: PUSH
14847: LD_INT 112
14849: PUSH
14850: LD_INT 113
14852: PUSH
14853: LD_INT 114
14855: PUSH
14856: LD_INT 116
14858: PUSH
14859: LD_INT 117
14861: PUSH
14862: LD_INT 118
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: ST_TO_ADDR
14888: GO 15287
14890: LD_INT 18
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 15046
14898: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14899: LD_ADDR_VAR 0 2
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: LD_INT 4
14909: PUSH
14910: LD_INT 5
14912: PUSH
14913: LD_INT 7
14915: PUSH
14916: LD_INT 11
14918: PUSH
14919: LD_INT 12
14921: PUSH
14922: LD_INT 15
14924: PUSH
14925: LD_INT 16
14927: PUSH
14928: LD_INT 20
14930: PUSH
14931: LD_INT 21
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_INT 23
14939: PUSH
14940: LD_INT 25
14942: PUSH
14943: LD_INT 26
14945: PUSH
14946: LD_INT 30
14948: PUSH
14949: LD_INT 31
14951: PUSH
14952: LD_INT 32
14954: PUSH
14955: LD_INT 33
14957: PUSH
14958: LD_INT 34
14960: PUSH
14961: LD_INT 35
14963: PUSH
14964: LD_INT 36
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 101
14992: PUSH
14993: LD_INT 102
14995: PUSH
14996: LD_INT 103
14998: PUSH
14999: LD_INT 106
15001: PUSH
15002: LD_INT 108
15004: PUSH
15005: LD_INT 112
15007: PUSH
15008: LD_INT 113
15010: PUSH
15011: LD_INT 114
15013: PUSH
15014: LD_INT 115
15016: PUSH
15017: LD_INT 116
15019: PUSH
15020: LD_INT 117
15022: PUSH
15023: LD_INT 118
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: ST_TO_ADDR
15044: GO 15287
15046: LD_INT 19
15048: DOUBLE
15049: EQUAL
15050: IFTRUE 15054
15052: GO 15286
15054: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: LD_INT 1
15062: PUSH
15063: LD_INT 2
15065: PUSH
15066: LD_INT 3
15068: PUSH
15069: LD_INT 4
15071: PUSH
15072: LD_INT 5
15074: PUSH
15075: LD_INT 6
15077: PUSH
15078: LD_INT 7
15080: PUSH
15081: LD_INT 8
15083: PUSH
15084: LD_INT 9
15086: PUSH
15087: LD_INT 10
15089: PUSH
15090: LD_INT 11
15092: PUSH
15093: LD_INT 12
15095: PUSH
15096: LD_INT 13
15098: PUSH
15099: LD_INT 14
15101: PUSH
15102: LD_INT 15
15104: PUSH
15105: LD_INT 16
15107: PUSH
15108: LD_INT 17
15110: PUSH
15111: LD_INT 18
15113: PUSH
15114: LD_INT 19
15116: PUSH
15117: LD_INT 20
15119: PUSH
15120: LD_INT 21
15122: PUSH
15123: LD_INT 22
15125: PUSH
15126: LD_INT 23
15128: PUSH
15129: LD_INT 24
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 26
15137: PUSH
15138: LD_INT 27
15140: PUSH
15141: LD_INT 28
15143: PUSH
15144: LD_INT 29
15146: PUSH
15147: LD_INT 30
15149: PUSH
15150: LD_INT 31
15152: PUSH
15153: LD_INT 32
15155: PUSH
15156: LD_INT 33
15158: PUSH
15159: LD_INT 34
15161: PUSH
15162: LD_INT 35
15164: PUSH
15165: LD_INT 36
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 101
15208: PUSH
15209: LD_INT 102
15211: PUSH
15212: LD_INT 103
15214: PUSH
15215: LD_INT 104
15217: PUSH
15218: LD_INT 105
15220: PUSH
15221: LD_INT 106
15223: PUSH
15224: LD_INT 107
15226: PUSH
15227: LD_INT 108
15229: PUSH
15230: LD_INT 109
15232: PUSH
15233: LD_INT 110
15235: PUSH
15236: LD_INT 111
15238: PUSH
15239: LD_INT 112
15241: PUSH
15242: LD_INT 113
15244: PUSH
15245: LD_INT 114
15247: PUSH
15248: LD_INT 115
15250: PUSH
15251: LD_INT 116
15253: PUSH
15254: LD_INT 117
15256: PUSH
15257: LD_INT 118
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: ST_TO_ADDR
15284: GO 15287
15286: POP
// end else
15287: GO 15518
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15289: LD_ADDR_VAR 0 2
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: LD_INT 2
15299: PUSH
15300: LD_INT 3
15302: PUSH
15303: LD_INT 4
15305: PUSH
15306: LD_INT 5
15308: PUSH
15309: LD_INT 6
15311: PUSH
15312: LD_INT 7
15314: PUSH
15315: LD_INT 8
15317: PUSH
15318: LD_INT 9
15320: PUSH
15321: LD_INT 10
15323: PUSH
15324: LD_INT 11
15326: PUSH
15327: LD_INT 12
15329: PUSH
15330: LD_INT 13
15332: PUSH
15333: LD_INT 14
15335: PUSH
15336: LD_INT 15
15338: PUSH
15339: LD_INT 16
15341: PUSH
15342: LD_INT 17
15344: PUSH
15345: LD_INT 18
15347: PUSH
15348: LD_INT 19
15350: PUSH
15351: LD_INT 20
15353: PUSH
15354: LD_INT 21
15356: PUSH
15357: LD_INT 22
15359: PUSH
15360: LD_INT 23
15362: PUSH
15363: LD_INT 24
15365: PUSH
15366: LD_INT 25
15368: PUSH
15369: LD_INT 26
15371: PUSH
15372: LD_INT 27
15374: PUSH
15375: LD_INT 28
15377: PUSH
15378: LD_INT 29
15380: PUSH
15381: LD_INT 30
15383: PUSH
15384: LD_INT 31
15386: PUSH
15387: LD_INT 32
15389: PUSH
15390: LD_INT 33
15392: PUSH
15393: LD_INT 34
15395: PUSH
15396: LD_INT 35
15398: PUSH
15399: LD_INT 36
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 101
15442: PUSH
15443: LD_INT 102
15445: PUSH
15446: LD_INT 103
15448: PUSH
15449: LD_INT 104
15451: PUSH
15452: LD_INT 105
15454: PUSH
15455: LD_INT 106
15457: PUSH
15458: LD_INT 107
15460: PUSH
15461: LD_INT 108
15463: PUSH
15464: LD_INT 109
15466: PUSH
15467: LD_INT 110
15469: PUSH
15470: LD_INT 111
15472: PUSH
15473: LD_INT 112
15475: PUSH
15476: LD_INT 113
15478: PUSH
15479: LD_INT 114
15481: PUSH
15482: LD_INT 115
15484: PUSH
15485: LD_INT 116
15487: PUSH
15488: LD_INT 117
15490: PUSH
15491: LD_INT 118
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: ST_TO_ADDR
// if result then
15518: LD_VAR 0 2
15522: IFFALSE 16308
// begin normal :=  ;
15524: LD_ADDR_VAR 0 5
15528: PUSH
15529: LD_STRING 
15531: ST_TO_ADDR
// hardcore :=  ;
15532: LD_ADDR_VAR 0 6
15536: PUSH
15537: LD_STRING 
15539: ST_TO_ADDR
// active :=  ;
15540: LD_ADDR_VAR 0 7
15544: PUSH
15545: LD_STRING 
15547: ST_TO_ADDR
// for i = 1 to normalCounter do
15548: LD_ADDR_VAR 0 8
15552: PUSH
15553: DOUBLE
15554: LD_INT 1
15556: DEC
15557: ST_TO_ADDR
15558: LD_EXP 45
15562: PUSH
15563: FOR_TO
15564: IFFALSE 15665
// begin tmp := 0 ;
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: LD_STRING 0
15573: ST_TO_ADDR
// if result [ 1 ] then
15574: LD_VAR 0 2
15578: PUSH
15579: LD_INT 1
15581: ARRAY
15582: IFFALSE 15647
// if result [ 1 ] [ 1 ] = i then
15584: LD_VAR 0 2
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PUSH
15593: LD_INT 1
15595: ARRAY
15596: PUSH
15597: LD_VAR 0 8
15601: EQUAL
15602: IFFALSE 15647
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15604: LD_ADDR_VAR 0 2
15608: PUSH
15609: LD_VAR 0 2
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: LD_VAR 0 2
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PPUSH
15626: LD_INT 1
15628: PPUSH
15629: CALL_OW 3
15633: PPUSH
15634: CALL_OW 1
15638: ST_TO_ADDR
// tmp := 1 ;
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_STRING 1
15646: ST_TO_ADDR
// end ; normal := normal & tmp ;
15647: LD_ADDR_VAR 0 5
15651: PUSH
15652: LD_VAR 0 5
15656: PUSH
15657: LD_VAR 0 3
15661: STR
15662: ST_TO_ADDR
// end ;
15663: GO 15563
15665: POP
15666: POP
// for i = 1 to hardcoreCounter do
15667: LD_ADDR_VAR 0 8
15671: PUSH
15672: DOUBLE
15673: LD_INT 1
15675: DEC
15676: ST_TO_ADDR
15677: LD_EXP 46
15681: PUSH
15682: FOR_TO
15683: IFFALSE 15788
// begin tmp := 0 ;
15685: LD_ADDR_VAR 0 3
15689: PUSH
15690: LD_STRING 0
15692: ST_TO_ADDR
// if result [ 2 ] then
15693: LD_VAR 0 2
15697: PUSH
15698: LD_INT 2
15700: ARRAY
15701: IFFALSE 15770
// if result [ 2 ] [ 1 ] = 100 + i then
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 2
15710: ARRAY
15711: PUSH
15712: LD_INT 1
15714: ARRAY
15715: PUSH
15716: LD_INT 100
15718: PUSH
15719: LD_VAR 0 8
15723: PLUS
15724: EQUAL
15725: IFFALSE 15770
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_VAR 0 2
15736: PPUSH
15737: LD_INT 2
15739: PPUSH
15740: LD_VAR 0 2
15744: PUSH
15745: LD_INT 2
15747: ARRAY
15748: PPUSH
15749: LD_INT 1
15751: PPUSH
15752: CALL_OW 3
15756: PPUSH
15757: CALL_OW 1
15761: ST_TO_ADDR
// tmp := 1 ;
15762: LD_ADDR_VAR 0 3
15766: PUSH
15767: LD_STRING 1
15769: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15770: LD_ADDR_VAR 0 6
15774: PUSH
15775: LD_VAR 0 6
15779: PUSH
15780: LD_VAR 0 3
15784: STR
15785: ST_TO_ADDR
// end ;
15786: GO 15682
15788: POP
15789: POP
// if isGameLoad then
15790: LD_VAR 0 1
15794: IFFALSE 16269
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15796: LD_ADDR_VAR 0 4
15800: PUSH
15801: LD_EXP 49
15805: PUSH
15806: LD_EXP 48
15810: PUSH
15811: LD_EXP 50
15815: PUSH
15816: LD_EXP 47
15820: PUSH
15821: LD_EXP 51
15825: PUSH
15826: LD_EXP 52
15830: PUSH
15831: LD_EXP 53
15835: PUSH
15836: LD_EXP 54
15840: PUSH
15841: LD_EXP 55
15845: PUSH
15846: LD_EXP 56
15850: PUSH
15851: LD_EXP 57
15855: PUSH
15856: LD_EXP 58
15860: PUSH
15861: LD_EXP 59
15865: PUSH
15866: LD_EXP 60
15870: PUSH
15871: LD_EXP 68
15875: PUSH
15876: LD_EXP 69
15880: PUSH
15881: LD_EXP 70
15885: PUSH
15886: LD_EXP 71
15890: PUSH
15891: LD_EXP 73
15895: PUSH
15896: LD_EXP 74
15900: PUSH
15901: LD_EXP 75
15905: PUSH
15906: LD_EXP 78
15910: PUSH
15911: LD_EXP 80
15915: PUSH
15916: LD_EXP 81
15920: PUSH
15921: LD_EXP 82
15925: PUSH
15926: LD_EXP 84
15930: PUSH
15931: LD_EXP 85
15935: PUSH
15936: LD_EXP 88
15940: PUSH
15941: LD_EXP 89
15945: PUSH
15946: LD_EXP 90
15950: PUSH
15951: LD_EXP 91
15955: PUSH
15956: LD_EXP 92
15960: PUSH
15961: LD_EXP 93
15965: PUSH
15966: LD_EXP 94
15970: PUSH
15971: LD_EXP 95
15975: PUSH
15976: LD_EXP 96
15980: PUSH
15981: LD_EXP 61
15985: PUSH
15986: LD_EXP 62
15990: PUSH
15991: LD_EXP 65
15995: PUSH
15996: LD_EXP 66
16000: PUSH
16001: LD_EXP 67
16005: PUSH
16006: LD_EXP 63
16010: PUSH
16011: LD_EXP 64
16015: PUSH
16016: LD_EXP 72
16020: PUSH
16021: LD_EXP 76
16025: PUSH
16026: LD_EXP 77
16030: PUSH
16031: LD_EXP 79
16035: PUSH
16036: LD_EXP 83
16040: PUSH
16041: LD_EXP 86
16045: PUSH
16046: LD_EXP 87
16050: PUSH
16051: LD_EXP 97
16055: PUSH
16056: LD_EXP 98
16060: PUSH
16061: LD_EXP 99
16065: PUSH
16066: LD_EXP 100
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: ST_TO_ADDR
// tmp :=  ;
16127: LD_ADDR_VAR 0 3
16131: PUSH
16132: LD_STRING 
16134: ST_TO_ADDR
// for i = 1 to normalCounter do
16135: LD_ADDR_VAR 0 8
16139: PUSH
16140: DOUBLE
16141: LD_INT 1
16143: DEC
16144: ST_TO_ADDR
16145: LD_EXP 45
16149: PUSH
16150: FOR_TO
16151: IFFALSE 16187
// begin if flags [ i ] then
16153: LD_VAR 0 4
16157: PUSH
16158: LD_VAR 0 8
16162: ARRAY
16163: IFFALSE 16185
// tmp := tmp & i & ; ;
16165: LD_ADDR_VAR 0 3
16169: PUSH
16170: LD_VAR 0 3
16174: PUSH
16175: LD_VAR 0 8
16179: STR
16180: PUSH
16181: LD_STRING ;
16183: STR
16184: ST_TO_ADDR
// end ;
16185: GO 16150
16187: POP
16188: POP
// for i = 1 to hardcoreCounter do
16189: LD_ADDR_VAR 0 8
16193: PUSH
16194: DOUBLE
16195: LD_INT 1
16197: DEC
16198: ST_TO_ADDR
16199: LD_EXP 46
16203: PUSH
16204: FOR_TO
16205: IFFALSE 16251
// begin if flags [ normalCounter + i ] then
16207: LD_VAR 0 4
16211: PUSH
16212: LD_EXP 45
16216: PUSH
16217: LD_VAR 0 8
16221: PLUS
16222: ARRAY
16223: IFFALSE 16249
// tmp := tmp & ( 100 + i ) & ; ;
16225: LD_ADDR_VAR 0 3
16229: PUSH
16230: LD_VAR 0 3
16234: PUSH
16235: LD_INT 100
16237: PUSH
16238: LD_VAR 0 8
16242: PLUS
16243: STR
16244: PUSH
16245: LD_STRING ;
16247: STR
16248: ST_TO_ADDR
// end ;
16249: GO 16204
16251: POP
16252: POP
// if tmp then
16253: LD_VAR 0 3
16257: IFFALSE 16269
// active := tmp ;
16259: LD_ADDR_VAR 0 7
16263: PUSH
16264: LD_VAR 0 3
16268: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16269: LD_STRING getStreamItemsFromMission("
16271: PUSH
16272: LD_VAR 0 5
16276: STR
16277: PUSH
16278: LD_STRING ","
16280: STR
16281: PUSH
16282: LD_VAR 0 6
16286: STR
16287: PUSH
16288: LD_STRING ","
16290: STR
16291: PUSH
16292: LD_VAR 0 7
16296: STR
16297: PUSH
16298: LD_STRING ")
16300: STR
16301: PPUSH
16302: CALL_OW 559
// end else
16306: GO 16315
// ToLua ( getStreamItemsFromMission("","","") ) ;
16308: LD_STRING getStreamItemsFromMission("","","")
16310: PPUSH
16311: CALL_OW 559
// end ;
16315: LD_VAR 0 2
16319: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16320: LD_EXP 44
16324: PUSH
16325: LD_EXP 49
16329: AND
16330: IFFALSE 16454
16332: GO 16334
16334: DISABLE
16335: LD_INT 0
16337: PPUSH
16338: PPUSH
// begin enable ;
16339: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16340: LD_ADDR_VAR 0 2
16344: PUSH
16345: LD_INT 22
16347: PUSH
16348: LD_OWVAR 2
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 2
16359: PUSH
16360: LD_INT 34
16362: PUSH
16363: LD_INT 7
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 34
16372: PUSH
16373: LD_INT 45
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 34
16382: PUSH
16383: LD_INT 28
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 34
16392: PUSH
16393: LD_INT 47
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PPUSH
16411: CALL_OW 69
16415: ST_TO_ADDR
// if not tmp then
16416: LD_VAR 0 2
16420: NOT
16421: IFFALSE 16425
// exit ;
16423: GO 16454
// for i in tmp do
16425: LD_ADDR_VAR 0 1
16429: PUSH
16430: LD_VAR 0 2
16434: PUSH
16435: FOR_IN
16436: IFFALSE 16452
// begin SetLives ( i , 0 ) ;
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_INT 0
16445: PPUSH
16446: CALL_OW 234
// end ;
16450: GO 16435
16452: POP
16453: POP
// end ;
16454: PPOPN 2
16456: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16457: LD_EXP 44
16461: PUSH
16462: LD_EXP 50
16466: AND
16467: IFFALSE 16551
16469: GO 16471
16471: DISABLE
16472: LD_INT 0
16474: PPUSH
16475: PPUSH
// begin enable ;
16476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16477: LD_ADDR_VAR 0 2
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_OWVAR 2
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 32
16496: PUSH
16497: LD_INT 3
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: ST_TO_ADDR
// if not tmp then
16513: LD_VAR 0 2
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 16551
// for i in tmp do
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 2
16531: PUSH
16532: FOR_IN
16533: IFFALSE 16549
// begin SetLives ( i , 0 ) ;
16535: LD_VAR 0 1
16539: PPUSH
16540: LD_INT 0
16542: PPUSH
16543: CALL_OW 234
// end ;
16547: GO 16532
16549: POP
16550: POP
// end ;
16551: PPOPN 2
16553: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16554: LD_EXP 44
16558: PUSH
16559: LD_EXP 47
16563: AND
16564: IFFALSE 16657
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
// begin enable ;
16572: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16573: LD_ADDR_VAR 0 1
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: LD_INT 25
16595: PUSH
16596: LD_INT 5
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 25
16605: PUSH
16606: LD_INT 9
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 25
16615: PUSH
16616: LD_INT 8
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PPUSH
16633: CALL_OW 69
16637: PUSH
16638: FOR_IN
16639: IFFALSE 16655
// begin SetClass ( i , 1 ) ;
16641: LD_VAR 0 1
16645: PPUSH
16646: LD_INT 1
16648: PPUSH
16649: CALL_OW 336
// end ;
16653: GO 16638
16655: POP
16656: POP
// end ;
16657: PPOPN 1
16659: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16660: LD_EXP 44
16664: PUSH
16665: LD_EXP 48
16669: AND
16670: PUSH
16671: LD_OWVAR 65
16675: PUSH
16676: LD_INT 7
16678: LESS
16679: AND
16680: IFFALSE 16694
16682: GO 16684
16684: DISABLE
// begin enable ;
16685: ENABLE
// game_speed := 7 ;
16686: LD_ADDR_OWVAR 65
16690: PUSH
16691: LD_INT 7
16693: ST_TO_ADDR
// end ;
16694: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16695: LD_EXP 44
16699: PUSH
16700: LD_EXP 51
16704: AND
16705: IFFALSE 16907
16707: GO 16709
16709: DISABLE
16710: LD_INT 0
16712: PPUSH
16713: PPUSH
16714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16715: LD_ADDR_VAR 0 3
16719: PUSH
16720: LD_INT 81
16722: PUSH
16723: LD_OWVAR 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 21
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PPUSH
16746: CALL_OW 69
16750: ST_TO_ADDR
// if not tmp then
16751: LD_VAR 0 3
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16907
// if tmp > 5 then
16760: LD_VAR 0 3
16764: PUSH
16765: LD_INT 5
16767: GREATER
16768: IFFALSE 16780
// k := 5 else
16770: LD_ADDR_VAR 0 2
16774: PUSH
16775: LD_INT 5
16777: ST_TO_ADDR
16778: GO 16790
// k := tmp ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_VAR 0 3
16789: ST_TO_ADDR
// for i := 1 to k do
16790: LD_ADDR_VAR 0 1
16794: PUSH
16795: DOUBLE
16796: LD_INT 1
16798: DEC
16799: ST_TO_ADDR
16800: LD_VAR 0 2
16804: PUSH
16805: FOR_TO
16806: IFFALSE 16905
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16808: LD_VAR 0 3
16812: PUSH
16813: LD_VAR 0 1
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 1
16823: PUSH
16824: LD_INT 4
16826: MOD
16827: PUSH
16828: LD_INT 1
16830: PLUS
16831: PPUSH
16832: CALL_OW 259
16836: PUSH
16837: LD_INT 10
16839: LESS
16840: IFFALSE 16903
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16842: LD_VAR 0 3
16846: PUSH
16847: LD_VAR 0 1
16851: ARRAY
16852: PPUSH
16853: LD_VAR 0 1
16857: PUSH
16858: LD_INT 4
16860: MOD
16861: PUSH
16862: LD_INT 1
16864: PLUS
16865: PPUSH
16866: LD_VAR 0 3
16870: PUSH
16871: LD_VAR 0 1
16875: ARRAY
16876: PPUSH
16877: LD_VAR 0 1
16881: PUSH
16882: LD_INT 4
16884: MOD
16885: PUSH
16886: LD_INT 1
16888: PLUS
16889: PPUSH
16890: CALL_OW 259
16894: PUSH
16895: LD_INT 1
16897: PLUS
16898: PPUSH
16899: CALL_OW 237
16903: GO 16805
16905: POP
16906: POP
// end ;
16907: PPOPN 3
16909: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16910: LD_EXP 44
16914: PUSH
16915: LD_EXP 52
16919: AND
16920: IFFALSE 16940
16922: GO 16924
16924: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16925: LD_INT 4
16927: PPUSH
16928: LD_OWVAR 2
16932: PPUSH
16933: LD_INT 0
16935: PPUSH
16936: CALL_OW 324
16940: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16941: LD_EXP 44
16945: PUSH
16946: LD_EXP 81
16950: AND
16951: IFFALSE 16971
16953: GO 16955
16955: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16956: LD_INT 19
16958: PPUSH
16959: LD_OWVAR 2
16963: PPUSH
16964: LD_INT 0
16966: PPUSH
16967: CALL_OW 324
16971: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16972: LD_EXP 44
16976: PUSH
16977: LD_EXP 53
16981: AND
16982: IFFALSE 17084
16984: GO 16986
16986: DISABLE
16987: LD_INT 0
16989: PPUSH
16990: PPUSH
// begin enable ;
16991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16992: LD_ADDR_VAR 0 2
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_OWVAR 2
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 34
17014: PUSH
17015: LD_INT 11
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 34
17024: PUSH
17025: LD_INT 30
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PPUSH
17041: CALL_OW 69
17045: ST_TO_ADDR
// if not tmp then
17046: LD_VAR 0 2
17050: NOT
17051: IFFALSE 17055
// exit ;
17053: GO 17084
// for i in tmp do
17055: LD_ADDR_VAR 0 1
17059: PUSH
17060: LD_VAR 0 2
17064: PUSH
17065: FOR_IN
17066: IFFALSE 17082
// begin SetLives ( i , 0 ) ;
17068: LD_VAR 0 1
17072: PPUSH
17073: LD_INT 0
17075: PPUSH
17076: CALL_OW 234
// end ;
17080: GO 17065
17082: POP
17083: POP
// end ;
17084: PPOPN 2
17086: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17087: LD_EXP 44
17091: PUSH
17092: LD_EXP 54
17096: AND
17097: IFFALSE 17117
17099: GO 17101
17101: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17102: LD_INT 32
17104: PPUSH
17105: LD_OWVAR 2
17109: PPUSH
17110: LD_INT 0
17112: PPUSH
17113: CALL_OW 324
17117: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17118: LD_EXP 44
17122: PUSH
17123: LD_EXP 55
17127: AND
17128: IFFALSE 17309
17130: GO 17132
17132: DISABLE
17133: LD_INT 0
17135: PPUSH
17136: PPUSH
17137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17138: LD_ADDR_VAR 0 2
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_OWVAR 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 33
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PPUSH
17169: CALL_OW 69
17173: ST_TO_ADDR
// if not tmp then
17174: LD_VAR 0 2
17178: NOT
17179: IFFALSE 17183
// exit ;
17181: GO 17309
// side := 0 ;
17183: LD_ADDR_VAR 0 3
17187: PUSH
17188: LD_INT 0
17190: ST_TO_ADDR
// for i := 1 to 8 do
17191: LD_ADDR_VAR 0 1
17195: PUSH
17196: DOUBLE
17197: LD_INT 1
17199: DEC
17200: ST_TO_ADDR
17201: LD_INT 8
17203: PUSH
17204: FOR_TO
17205: IFFALSE 17253
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17207: LD_OWVAR 2
17211: PUSH
17212: LD_VAR 0 1
17216: NONEQUAL
17217: PUSH
17218: LD_OWVAR 2
17222: PPUSH
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 81
17232: PUSH
17233: LD_INT 2
17235: EQUAL
17236: AND
17237: IFFALSE 17251
// begin side := i ;
17239: LD_ADDR_VAR 0 3
17243: PUSH
17244: LD_VAR 0 1
17248: ST_TO_ADDR
// break ;
17249: GO 17253
// end ;
17251: GO 17204
17253: POP
17254: POP
// if not side then
17255: LD_VAR 0 3
17259: NOT
17260: IFFALSE 17264
// exit ;
17262: GO 17309
// for i := 1 to tmp do
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: DOUBLE
17270: LD_INT 1
17272: DEC
17273: ST_TO_ADDR
17274: LD_VAR 0 2
17278: PUSH
17279: FOR_TO
17280: IFFALSE 17307
// if Prob ( 60 ) then
17282: LD_INT 60
17284: PPUSH
17285: CALL_OW 13
17289: IFFALSE 17305
// SetSide ( i , side ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: CALL_OW 235
17305: GO 17279
17307: POP
17308: POP
// end ;
17309: PPOPN 3
17311: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17312: LD_EXP 44
17316: PUSH
17317: LD_EXP 57
17321: AND
17322: IFFALSE 17441
17324: GO 17326
17326: DISABLE
17327: LD_INT 0
17329: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17330: LD_ADDR_VAR 0 1
17334: PUSH
17335: LD_INT 22
17337: PUSH
17338: LD_OWVAR 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 21
17349: PUSH
17350: LD_INT 1
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 3
17359: PUSH
17360: LD_INT 23
17362: PUSH
17363: LD_INT 0
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: PUSH
17384: FOR_IN
17385: IFFALSE 17439
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17387: LD_VAR 0 1
17391: PPUSH
17392: CALL_OW 257
17396: PUSH
17397: LD_INT 1
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: LD_INT 3
17405: PUSH
17406: LD_INT 4
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: IN
17415: IFFALSE 17437
// SetClass ( un , rand ( 1 , 4 ) ) ;
17417: LD_VAR 0 1
17421: PPUSH
17422: LD_INT 1
17424: PPUSH
17425: LD_INT 4
17427: PPUSH
17428: CALL_OW 12
17432: PPUSH
17433: CALL_OW 336
17437: GO 17384
17439: POP
17440: POP
// end ;
17441: PPOPN 1
17443: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17444: LD_EXP 44
17448: PUSH
17449: LD_EXP 56
17453: AND
17454: IFFALSE 17533
17456: GO 17458
17458: DISABLE
17459: LD_INT 0
17461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17462: LD_ADDR_VAR 0 1
17466: PUSH
17467: LD_INT 22
17469: PUSH
17470: LD_OWVAR 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 21
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 69
17497: ST_TO_ADDR
// if not tmp then
17498: LD_VAR 0 1
17502: NOT
17503: IFFALSE 17507
// exit ;
17505: GO 17533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17507: LD_VAR 0 1
17511: PUSH
17512: LD_INT 1
17514: PPUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 12
17524: ARRAY
17525: PPUSH
17526: LD_INT 100
17528: PPUSH
17529: CALL_OW 234
// end ;
17533: PPOPN 1
17535: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17536: LD_EXP 44
17540: PUSH
17541: LD_EXP 58
17545: AND
17546: IFFALSE 17644
17548: GO 17550
17550: DISABLE
17551: LD_INT 0
17553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17554: LD_ADDR_VAR 0 1
17558: PUSH
17559: LD_INT 22
17561: PUSH
17562: LD_OWVAR 2
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 21
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PPUSH
17585: CALL_OW 69
17589: ST_TO_ADDR
// if not tmp then
17590: LD_VAR 0 1
17594: NOT
17595: IFFALSE 17599
// exit ;
17597: GO 17644
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17599: LD_VAR 0 1
17603: PUSH
17604: LD_INT 1
17606: PPUSH
17607: LD_VAR 0 1
17611: PPUSH
17612: CALL_OW 12
17616: ARRAY
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_INT 4
17623: PPUSH
17624: CALL_OW 12
17628: PPUSH
17629: LD_INT 3000
17631: PPUSH
17632: LD_INT 9000
17634: PPUSH
17635: CALL_OW 12
17639: PPUSH
17640: CALL_OW 492
// end ;
17644: PPOPN 1
17646: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17647: LD_EXP 44
17651: PUSH
17652: LD_EXP 59
17656: AND
17657: IFFALSE 17677
17659: GO 17661
17661: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17662: LD_INT 1
17664: PPUSH
17665: LD_OWVAR 2
17669: PPUSH
17670: LD_INT 0
17672: PPUSH
17673: CALL_OW 324
17677: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17678: LD_EXP 44
17682: PUSH
17683: LD_EXP 60
17687: AND
17688: IFFALSE 17771
17690: GO 17692
17692: DISABLE
17693: LD_INT 0
17695: PPUSH
17696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17697: LD_ADDR_VAR 0 2
17701: PUSH
17702: LD_INT 22
17704: PUSH
17705: LD_OWVAR 2
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 21
17716: PUSH
17717: LD_INT 3
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PPUSH
17728: CALL_OW 69
17732: ST_TO_ADDR
// if not tmp then
17733: LD_VAR 0 2
17737: NOT
17738: IFFALSE 17742
// exit ;
17740: GO 17771
// for i in tmp do
17742: LD_ADDR_VAR 0 1
17746: PUSH
17747: LD_VAR 0 2
17751: PUSH
17752: FOR_IN
17753: IFFALSE 17769
// SetBLevel ( i , 10 ) ;
17755: LD_VAR 0 1
17759: PPUSH
17760: LD_INT 10
17762: PPUSH
17763: CALL_OW 241
17767: GO 17752
17769: POP
17770: POP
// end ;
17771: PPOPN 2
17773: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17774: LD_EXP 44
17778: PUSH
17779: LD_EXP 61
17783: AND
17784: IFFALSE 17895
17786: GO 17788
17788: DISABLE
17789: LD_INT 0
17791: PPUSH
17792: PPUSH
17793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_INT 22
17801: PUSH
17802: LD_OWVAR 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 25
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: ST_TO_ADDR
// if not tmp then
17830: LD_VAR 0 3
17834: NOT
17835: IFFALSE 17839
// exit ;
17837: GO 17895
// un := tmp [ rand ( 1 , tmp ) ] ;
17839: LD_ADDR_VAR 0 2
17843: PUSH
17844: LD_VAR 0 3
17848: PUSH
17849: LD_INT 1
17851: PPUSH
17852: LD_VAR 0 3
17856: PPUSH
17857: CALL_OW 12
17861: ARRAY
17862: ST_TO_ADDR
// if Crawls ( un ) then
17863: LD_VAR 0 2
17867: PPUSH
17868: CALL_OW 318
17872: IFFALSE 17883
// ComWalk ( un ) ;
17874: LD_VAR 0 2
17878: PPUSH
17879: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17883: LD_VAR 0 2
17887: PPUSH
17888: LD_INT 5
17890: PPUSH
17891: CALL_OW 336
// end ;
17895: PPOPN 3
17897: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17898: LD_EXP 44
17902: PUSH
17903: LD_EXP 62
17907: AND
17908: PUSH
17909: LD_OWVAR 67
17913: PUSH
17914: LD_INT 4
17916: LESS
17917: AND
17918: IFFALSE 17937
17920: GO 17922
17922: DISABLE
// begin Difficulty := Difficulty + 1 ;
17923: LD_ADDR_OWVAR 67
17927: PUSH
17928: LD_OWVAR 67
17932: PUSH
17933: LD_INT 1
17935: PLUS
17936: ST_TO_ADDR
// end ;
17937: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17938: LD_EXP 44
17942: PUSH
17943: LD_EXP 63
17947: AND
17948: IFFALSE 18051
17950: GO 17952
17952: DISABLE
17953: LD_INT 0
17955: PPUSH
// begin for i := 1 to 5 do
17956: LD_ADDR_VAR 0 1
17960: PUSH
17961: DOUBLE
17962: LD_INT 1
17964: DEC
17965: ST_TO_ADDR
17966: LD_INT 5
17968: PUSH
17969: FOR_TO
17970: IFFALSE 18049
// begin uc_nation := nation_nature ;
17972: LD_ADDR_OWVAR 21
17976: PUSH
17977: LD_INT 0
17979: ST_TO_ADDR
// uc_side := 0 ;
17980: LD_ADDR_OWVAR 20
17984: PUSH
17985: LD_INT 0
17987: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17988: LD_ADDR_OWVAR 29
17992: PUSH
17993: LD_INT 12
17995: PUSH
17996: LD_INT 12
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: ST_TO_ADDR
// hc_agressivity := 20 ;
18003: LD_ADDR_OWVAR 35
18007: PUSH
18008: LD_INT 20
18010: ST_TO_ADDR
// hc_class := class_tiger ;
18011: LD_ADDR_OWVAR 28
18015: PUSH
18016: LD_INT 14
18018: ST_TO_ADDR
// hc_gallery :=  ;
18019: LD_ADDR_OWVAR 33
18023: PUSH
18024: LD_STRING 
18026: ST_TO_ADDR
// hc_name :=  ;
18027: LD_ADDR_OWVAR 26
18031: PUSH
18032: LD_STRING 
18034: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18035: CALL_OW 44
18039: PPUSH
18040: LD_INT 0
18042: PPUSH
18043: CALL_OW 51
// end ;
18047: GO 17969
18049: POP
18050: POP
// end ;
18051: PPOPN 1
18053: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18054: LD_EXP 44
18058: PUSH
18059: LD_EXP 64
18063: AND
18064: IFFALSE 18073
18066: GO 18068
18068: DISABLE
// StreamSibBomb ;
18069: CALL 18074 0 0
18073: END
// export function StreamSibBomb ; var i , x , y ; begin
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
18078: PPUSH
18079: PPUSH
// result := false ;
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// for i := 1 to 16 do
18088: LD_ADDR_VAR 0 2
18092: PUSH
18093: DOUBLE
18094: LD_INT 1
18096: DEC
18097: ST_TO_ADDR
18098: LD_INT 16
18100: PUSH
18101: FOR_TO
18102: IFFALSE 18301
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18104: LD_ADDR_VAR 0 3
18108: PUSH
18109: LD_INT 10
18111: PUSH
18112: LD_INT 20
18114: PUSH
18115: LD_INT 30
18117: PUSH
18118: LD_INT 40
18120: PUSH
18121: LD_INT 50
18123: PUSH
18124: LD_INT 60
18126: PUSH
18127: LD_INT 70
18129: PUSH
18130: LD_INT 80
18132: PUSH
18133: LD_INT 90
18135: PUSH
18136: LD_INT 100
18138: PUSH
18139: LD_INT 110
18141: PUSH
18142: LD_INT 120
18144: PUSH
18145: LD_INT 130
18147: PUSH
18148: LD_INT 140
18150: PUSH
18151: LD_INT 150
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 1
18173: PPUSH
18174: LD_INT 15
18176: PPUSH
18177: CALL_OW 12
18181: ARRAY
18182: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18183: LD_ADDR_VAR 0 4
18187: PUSH
18188: LD_INT 10
18190: PUSH
18191: LD_INT 20
18193: PUSH
18194: LD_INT 30
18196: PUSH
18197: LD_INT 40
18199: PUSH
18200: LD_INT 50
18202: PUSH
18203: LD_INT 60
18205: PUSH
18206: LD_INT 70
18208: PUSH
18209: LD_INT 80
18211: PUSH
18212: LD_INT 90
18214: PUSH
18215: LD_INT 100
18217: PUSH
18218: LD_INT 110
18220: PUSH
18221: LD_INT 120
18223: PUSH
18224: LD_INT 130
18226: PUSH
18227: LD_INT 140
18229: PUSH
18230: LD_INT 150
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: PPUSH
18253: LD_INT 15
18255: PPUSH
18256: CALL_OW 12
18260: ARRAY
18261: ST_TO_ADDR
// if ValidHex ( x , y ) then
18262: LD_VAR 0 3
18266: PPUSH
18267: LD_VAR 0 4
18271: PPUSH
18272: CALL_OW 488
18276: IFFALSE 18299
// begin result := [ x , y ] ;
18278: LD_ADDR_VAR 0 1
18282: PUSH
18283: LD_VAR 0 3
18287: PUSH
18288: LD_VAR 0 4
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: ST_TO_ADDR
// break ;
18297: GO 18301
// end ; end ;
18299: GO 18101
18301: POP
18302: POP
// if result then
18303: LD_VAR 0 1
18307: IFFALSE 18367
// begin ToLua ( playSibBomb() ) ;
18309: LD_STRING playSibBomb()
18311: PPUSH
18312: CALL_OW 559
// wait ( 0 0$14 ) ;
18316: LD_INT 490
18318: PPUSH
18319: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18323: LD_VAR 0 1
18327: PUSH
18328: LD_INT 1
18330: ARRAY
18331: PPUSH
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 2
18339: ARRAY
18340: PPUSH
18341: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18345: LD_VAR 0 1
18349: PUSH
18350: LD_INT 1
18352: ARRAY
18353: PPUSH
18354: LD_VAR 0 1
18358: PUSH
18359: LD_INT 2
18361: ARRAY
18362: PPUSH
18363: CALL_OW 429
// end ; end ;
18367: LD_VAR 0 1
18371: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18372: LD_EXP 44
18376: PUSH
18377: LD_EXP 66
18381: AND
18382: IFFALSE 18394
18384: GO 18386
18386: DISABLE
// YouLost (  ) ;
18387: LD_STRING 
18389: PPUSH
18390: CALL_OW 104
18394: END
// every 0 0$1 trigger StreamModeActive and sFog do
18395: LD_EXP 44
18399: PUSH
18400: LD_EXP 65
18404: AND
18405: IFFALSE 18419
18407: GO 18409
18409: DISABLE
// FogOff ( your_side ) ;
18410: LD_OWVAR 2
18414: PPUSH
18415: CALL_OW 344
18419: END
// every 0 0$1 trigger StreamModeActive and sSun do
18420: LD_EXP 44
18424: PUSH
18425: LD_EXP 67
18429: AND
18430: IFFALSE 18458
18432: GO 18434
18434: DISABLE
// begin solar_recharge_percent := 0 ;
18435: LD_ADDR_OWVAR 79
18439: PUSH
18440: LD_INT 0
18442: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18443: LD_INT 10500
18445: PPUSH
18446: CALL_OW 67
// solar_recharge_percent := 100 ;
18450: LD_ADDR_OWVAR 79
18454: PUSH
18455: LD_INT 100
18457: ST_TO_ADDR
// end ;
18458: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18459: LD_EXP 44
18463: PUSH
18464: LD_EXP 68
18468: AND
18469: IFFALSE 18708
18471: GO 18473
18473: DISABLE
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
// begin tmp := [ ] ;
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: EMPTY
18485: ST_TO_ADDR
// for i := 1 to 6 do
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: DOUBLE
18492: LD_INT 1
18494: DEC
18495: ST_TO_ADDR
18496: LD_INT 6
18498: PUSH
18499: FOR_TO
18500: IFFALSE 18605
// begin uc_nation := nation_nature ;
18502: LD_ADDR_OWVAR 21
18506: PUSH
18507: LD_INT 0
18509: ST_TO_ADDR
// uc_side := 0 ;
18510: LD_ADDR_OWVAR 20
18514: PUSH
18515: LD_INT 0
18517: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18518: LD_ADDR_OWVAR 29
18522: PUSH
18523: LD_INT 12
18525: PUSH
18526: LD_INT 12
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: ST_TO_ADDR
// hc_agressivity := 20 ;
18533: LD_ADDR_OWVAR 35
18537: PUSH
18538: LD_INT 20
18540: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18541: LD_ADDR_OWVAR 28
18545: PUSH
18546: LD_INT 17
18548: ST_TO_ADDR
// hc_gallery :=  ;
18549: LD_ADDR_OWVAR 33
18553: PUSH
18554: LD_STRING 
18556: ST_TO_ADDR
// hc_name :=  ;
18557: LD_ADDR_OWVAR 26
18561: PUSH
18562: LD_STRING 
18564: ST_TO_ADDR
// un := CreateHuman ;
18565: LD_ADDR_VAR 0 2
18569: PUSH
18570: CALL_OW 44
18574: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18575: LD_VAR 0 2
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 51
// tmp := tmp ^ un ;
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_VAR 0 3
18596: PUSH
18597: LD_VAR 0 2
18601: ADD
18602: ST_TO_ADDR
// end ;
18603: GO 18499
18605: POP
18606: POP
// repeat wait ( 0 0$1 ) ;
18607: LD_INT 35
18609: PPUSH
18610: CALL_OW 67
// for un in tmp do
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_VAR 0 3
18623: PUSH
18624: FOR_IN
18625: IFFALSE 18699
// begin if IsDead ( un ) then
18627: LD_VAR 0 2
18631: PPUSH
18632: CALL_OW 301
18636: IFFALSE 18656
// begin tmp := tmp diff un ;
18638: LD_ADDR_VAR 0 3
18642: PUSH
18643: LD_VAR 0 3
18647: PUSH
18648: LD_VAR 0 2
18652: DIFF
18653: ST_TO_ADDR
// continue ;
18654: GO 18624
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18656: LD_VAR 0 2
18660: PPUSH
18661: LD_INT 3
18663: PUSH
18664: LD_INT 22
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 69
18682: PPUSH
18683: LD_VAR 0 2
18687: PPUSH
18688: CALL_OW 74
18692: PPUSH
18693: CALL_OW 115
// end ;
18697: GO 18624
18699: POP
18700: POP
// until not tmp ;
18701: LD_VAR 0 3
18705: NOT
18706: IFFALSE 18607
// end ;
18708: PPOPN 3
18710: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18711: LD_EXP 44
18715: PUSH
18716: LD_EXP 69
18720: AND
18721: IFFALSE 18775
18723: GO 18725
18725: DISABLE
// begin ToLua ( displayTroll(); ) ;
18726: LD_STRING displayTroll();
18728: PPUSH
18729: CALL_OW 559
// wait ( 3 3$00 ) ;
18733: LD_INT 6300
18735: PPUSH
18736: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18740: LD_STRING hideTroll();
18742: PPUSH
18743: CALL_OW 559
// wait ( 1 1$00 ) ;
18747: LD_INT 2100
18749: PPUSH
18750: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18754: LD_STRING displayTroll();
18756: PPUSH
18757: CALL_OW 559
// wait ( 1 1$00 ) ;
18761: LD_INT 2100
18763: PPUSH
18764: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18768: LD_STRING hideTroll();
18770: PPUSH
18771: CALL_OW 559
// end ;
18775: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18776: LD_EXP 44
18780: PUSH
18781: LD_EXP 70
18785: AND
18786: IFFALSE 18849
18788: GO 18790
18790: DISABLE
18791: LD_INT 0
18793: PPUSH
// begin p := 0 ;
18794: LD_ADDR_VAR 0 1
18798: PUSH
18799: LD_INT 0
18801: ST_TO_ADDR
// repeat game_speed := 1 ;
18802: LD_ADDR_OWVAR 65
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18810: LD_INT 35
18812: PPUSH
18813: CALL_OW 67
// p := p + 1 ;
18817: LD_ADDR_VAR 0 1
18821: PUSH
18822: LD_VAR 0 1
18826: PUSH
18827: LD_INT 1
18829: PLUS
18830: ST_TO_ADDR
// until p >= 60 ;
18831: LD_VAR 0 1
18835: PUSH
18836: LD_INT 60
18838: GREATEREQUAL
18839: IFFALSE 18802
// game_speed := 4 ;
18841: LD_ADDR_OWVAR 65
18845: PUSH
18846: LD_INT 4
18848: ST_TO_ADDR
// end ;
18849: PPOPN 1
18851: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18852: LD_EXP 44
18856: PUSH
18857: LD_EXP 71
18861: AND
18862: IFFALSE 19008
18864: GO 18866
18866: DISABLE
18867: LD_INT 0
18869: PPUSH
18870: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18871: LD_ADDR_VAR 0 1
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_OWVAR 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: LD_INT 30
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 30
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: ST_TO_ADDR
// if not depot then
18925: LD_VAR 0 1
18929: NOT
18930: IFFALSE 18934
// exit ;
18932: GO 19008
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18934: LD_ADDR_VAR 0 2
18938: PUSH
18939: LD_VAR 0 1
18943: PUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 12
18956: ARRAY
18957: PPUSH
18958: CALL_OW 274
18962: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18963: LD_VAR 0 2
18967: PPUSH
18968: LD_INT 1
18970: PPUSH
18971: LD_INT 0
18973: PPUSH
18974: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18978: LD_VAR 0 2
18982: PPUSH
18983: LD_INT 2
18985: PPUSH
18986: LD_INT 0
18988: PPUSH
18989: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_INT 3
19000: PPUSH
19001: LD_INT 0
19003: PPUSH
19004: CALL_OW 277
// end ;
19008: PPOPN 2
19010: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19011: LD_EXP 44
19015: PUSH
19016: LD_EXP 72
19020: AND
19021: IFFALSE 19118
19023: GO 19025
19025: DISABLE
19026: LD_INT 0
19028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19029: LD_ADDR_VAR 0 1
19033: PUSH
19034: LD_INT 22
19036: PUSH
19037: LD_OWVAR 2
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 21
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: LD_INT 23
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: PPUSH
19078: CALL_OW 69
19082: ST_TO_ADDR
// if not tmp then
19083: LD_VAR 0 1
19087: NOT
19088: IFFALSE 19092
// exit ;
19090: GO 19118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19092: LD_VAR 0 1
19096: PUSH
19097: LD_INT 1
19099: PPUSH
19100: LD_VAR 0 1
19104: PPUSH
19105: CALL_OW 12
19109: ARRAY
19110: PPUSH
19111: LD_INT 200
19113: PPUSH
19114: CALL_OW 234
// end ;
19118: PPOPN 1
19120: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19121: LD_EXP 44
19125: PUSH
19126: LD_EXP 73
19130: AND
19131: IFFALSE 19210
19133: GO 19135
19135: DISABLE
19136: LD_INT 0
19138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19139: LD_ADDR_VAR 0 1
19143: PUSH
19144: LD_INT 22
19146: PUSH
19147: LD_OWVAR 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 21
19158: PUSH
19159: LD_INT 2
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 69
19174: ST_TO_ADDR
// if not tmp then
19175: LD_VAR 0 1
19179: NOT
19180: IFFALSE 19184
// exit ;
19182: GO 19210
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19184: LD_VAR 0 1
19188: PUSH
19189: LD_INT 1
19191: PPUSH
19192: LD_VAR 0 1
19196: PPUSH
19197: CALL_OW 12
19201: ARRAY
19202: PPUSH
19203: LD_INT 60
19205: PPUSH
19206: CALL_OW 234
// end ;
19210: PPOPN 1
19212: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19213: LD_EXP 44
19217: PUSH
19218: LD_EXP 74
19222: AND
19223: IFFALSE 19322
19225: GO 19227
19227: DISABLE
19228: LD_INT 0
19230: PPUSH
19231: PPUSH
// begin enable ;
19232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19233: LD_ADDR_VAR 0 1
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 61
19252: PUSH
19253: EMPTY
19254: LIST
19255: PUSH
19256: LD_INT 33
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 69
19275: ST_TO_ADDR
// if not tmp then
19276: LD_VAR 0 1
19280: NOT
19281: IFFALSE 19285
// exit ;
19283: GO 19322
// for i in tmp do
19285: LD_ADDR_VAR 0 2
19289: PUSH
19290: LD_VAR 0 1
19294: PUSH
19295: FOR_IN
19296: IFFALSE 19320
// if IsControledBy ( i ) then
19298: LD_VAR 0 2
19302: PPUSH
19303: CALL_OW 312
19307: IFFALSE 19318
// ComUnlink ( i ) ;
19309: LD_VAR 0 2
19313: PPUSH
19314: CALL_OW 136
19318: GO 19295
19320: POP
19321: POP
// end ;
19322: PPOPN 2
19324: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19325: LD_EXP 44
19329: PUSH
19330: LD_EXP 75
19334: AND
19335: IFFALSE 19475
19337: GO 19339
19339: DISABLE
19340: LD_INT 0
19342: PPUSH
19343: PPUSH
// begin ToLua ( displayPowell(); ) ;
19344: LD_STRING displayPowell();
19346: PPUSH
19347: CALL_OW 559
// uc_side := 0 ;
19351: LD_ADDR_OWVAR 20
19355: PUSH
19356: LD_INT 0
19358: ST_TO_ADDR
// uc_nation := 2 ;
19359: LD_ADDR_OWVAR 21
19363: PUSH
19364: LD_INT 2
19366: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19367: LD_ADDR_OWVAR 37
19371: PUSH
19372: LD_INT 14
19374: ST_TO_ADDR
// vc_engine := engine_siberite ;
19375: LD_ADDR_OWVAR 39
19379: PUSH
19380: LD_INT 3
19382: ST_TO_ADDR
// vc_control := control_apeman ;
19383: LD_ADDR_OWVAR 38
19387: PUSH
19388: LD_INT 5
19390: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19391: LD_ADDR_OWVAR 40
19395: PUSH
19396: LD_INT 29
19398: ST_TO_ADDR
// un := CreateVehicle ;
19399: LD_ADDR_VAR 0 2
19403: PUSH
19404: CALL_OW 45
19408: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19409: LD_VAR 0 2
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19421: LD_INT 35
19423: PPUSH
19424: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19428: LD_VAR 0 2
19432: PPUSH
19433: LD_INT 22
19435: PUSH
19436: LD_OWVAR 2
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PPUSH
19445: CALL_OW 69
19449: PPUSH
19450: LD_VAR 0 2
19454: PPUSH
19455: CALL_OW 74
19459: PPUSH
19460: CALL_OW 115
// until IsDead ( un ) ;
19464: LD_VAR 0 2
19468: PPUSH
19469: CALL_OW 301
19473: IFFALSE 19421
// end ;
19475: PPOPN 2
19477: END
// every 0 0$1 trigger StreamModeActive and sStu do
19478: LD_EXP 44
19482: PUSH
19483: LD_EXP 83
19487: AND
19488: IFFALSE 19504
19490: GO 19492
19492: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19493: LD_STRING displayStucuk();
19495: PPUSH
19496: CALL_OW 559
// ResetFog ;
19500: CALL_OW 335
// end ;
19504: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19505: LD_EXP 44
19509: PUSH
19510: LD_EXP 76
19514: AND
19515: IFFALSE 19656
19517: GO 19519
19519: DISABLE
19520: LD_INT 0
19522: PPUSH
19523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19524: LD_ADDR_VAR 0 2
19528: PUSH
19529: LD_INT 22
19531: PUSH
19532: LD_OWVAR 2
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 21
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 69
19559: ST_TO_ADDR
// if not tmp then
19560: LD_VAR 0 2
19564: NOT
19565: IFFALSE 19569
// exit ;
19567: GO 19656
// un := tmp [ rand ( 1 , tmp ) ] ;
19569: LD_ADDR_VAR 0 1
19573: PUSH
19574: LD_VAR 0 2
19578: PUSH
19579: LD_INT 1
19581: PPUSH
19582: LD_VAR 0 2
19586: PPUSH
19587: CALL_OW 12
19591: ARRAY
19592: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19593: LD_VAR 0 1
19597: PPUSH
19598: LD_INT 0
19600: PPUSH
19601: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19605: LD_VAR 0 1
19609: PPUSH
19610: LD_OWVAR 3
19614: PUSH
19615: LD_VAR 0 1
19619: DIFF
19620: PPUSH
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL_OW 74
19630: PPUSH
19631: CALL_OW 115
// wait ( 0 0$20 ) ;
19635: LD_INT 700
19637: PPUSH
19638: CALL_OW 67
// SetSide ( un , your_side ) ;
19642: LD_VAR 0 1
19646: PPUSH
19647: LD_OWVAR 2
19651: PPUSH
19652: CALL_OW 235
// end ;
19656: PPOPN 2
19658: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19659: LD_EXP 44
19663: PUSH
19664: LD_EXP 77
19668: AND
19669: IFFALSE 19775
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: LD_INT 22
19684: PUSH
19685: LD_OWVAR 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: LD_INT 30
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 30
19709: PUSH
19710: LD_INT 1
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: ST_TO_ADDR
// if not depot then
19731: LD_VAR 0 1
19735: NOT
19736: IFFALSE 19740
// exit ;
19738: GO 19775
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19740: LD_VAR 0 1
19744: PUSH
19745: LD_INT 1
19747: ARRAY
19748: PPUSH
19749: CALL_OW 250
19753: PPUSH
19754: LD_VAR 0 1
19758: PUSH
19759: LD_INT 1
19761: ARRAY
19762: PPUSH
19763: CALL_OW 251
19767: PPUSH
19768: LD_INT 70
19770: PPUSH
19771: CALL_OW 495
// end ;
19775: PPOPN 1
19777: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19778: LD_EXP 44
19782: PUSH
19783: LD_EXP 78
19787: AND
19788: IFFALSE 19999
19790: GO 19792
19792: DISABLE
19793: LD_INT 0
19795: PPUSH
19796: PPUSH
19797: PPUSH
19798: PPUSH
19799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19800: LD_ADDR_VAR 0 5
19804: PUSH
19805: LD_INT 22
19807: PUSH
19808: LD_OWVAR 2
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 21
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PPUSH
19831: CALL_OW 69
19835: ST_TO_ADDR
// if not tmp then
19836: LD_VAR 0 5
19840: NOT
19841: IFFALSE 19845
// exit ;
19843: GO 19999
// for i in tmp do
19845: LD_ADDR_VAR 0 1
19849: PUSH
19850: LD_VAR 0 5
19854: PUSH
19855: FOR_IN
19856: IFFALSE 19997
// begin d := rand ( 0 , 5 ) ;
19858: LD_ADDR_VAR 0 4
19862: PUSH
19863: LD_INT 0
19865: PPUSH
19866: LD_INT 5
19868: PPUSH
19869: CALL_OW 12
19873: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19874: LD_ADDR_VAR 0 2
19878: PUSH
19879: LD_VAR 0 1
19883: PPUSH
19884: CALL_OW 250
19888: PPUSH
19889: LD_VAR 0 4
19893: PPUSH
19894: LD_INT 3
19896: PPUSH
19897: LD_INT 12
19899: PPUSH
19900: CALL_OW 12
19904: PPUSH
19905: CALL_OW 272
19909: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19910: LD_ADDR_VAR 0 3
19914: PUSH
19915: LD_VAR 0 1
19919: PPUSH
19920: CALL_OW 251
19924: PPUSH
19925: LD_VAR 0 4
19929: PPUSH
19930: LD_INT 3
19932: PPUSH
19933: LD_INT 12
19935: PPUSH
19936: CALL_OW 12
19940: PPUSH
19941: CALL_OW 273
19945: ST_TO_ADDR
// if ValidHex ( x , y ) then
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: CALL_OW 488
19960: IFFALSE 19995
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19962: LD_VAR 0 1
19966: PPUSH
19967: LD_VAR 0 2
19971: PPUSH
19972: LD_VAR 0 3
19976: PPUSH
19977: LD_INT 3
19979: PPUSH
19980: LD_INT 6
19982: PPUSH
19983: CALL_OW 12
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 483
// end ;
19995: GO 19855
19997: POP
19998: POP
// end ;
19999: PPOPN 5
20001: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20002: LD_EXP 44
20006: PUSH
20007: LD_EXP 79
20011: AND
20012: IFFALSE 20106
20014: GO 20016
20016: DISABLE
20017: LD_INT 0
20019: PPUSH
20020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20021: LD_ADDR_VAR 0 2
20025: PUSH
20026: LD_INT 22
20028: PUSH
20029: LD_OWVAR 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 32
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: ST_TO_ADDR
// if not tmp then
20068: LD_VAR 0 2
20072: NOT
20073: IFFALSE 20077
// exit ;
20075: GO 20106
// for i in tmp do
20077: LD_ADDR_VAR 0 1
20081: PUSH
20082: LD_VAR 0 2
20086: PUSH
20087: FOR_IN
20088: IFFALSE 20104
// SetFuel ( i , 0 ) ;
20090: LD_VAR 0 1
20094: PPUSH
20095: LD_INT 0
20097: PPUSH
20098: CALL_OW 240
20102: GO 20087
20104: POP
20105: POP
// end ;
20106: PPOPN 2
20108: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20109: LD_EXP 44
20113: PUSH
20114: LD_EXP 80
20118: AND
20119: IFFALSE 20185
20121: GO 20123
20123: DISABLE
20124: LD_INT 0
20126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20127: LD_ADDR_VAR 0 1
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_OWVAR 2
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 30
20146: PUSH
20147: LD_INT 29
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: ST_TO_ADDR
// if not tmp then
20163: LD_VAR 0 1
20167: NOT
20168: IFFALSE 20172
// exit ;
20170: GO 20185
// DestroyUnit ( tmp [ 1 ] ) ;
20172: LD_VAR 0 1
20176: PUSH
20177: LD_INT 1
20179: ARRAY
20180: PPUSH
20181: CALL_OW 65
// end ;
20185: PPOPN 1
20187: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20188: LD_EXP 44
20192: PUSH
20193: LD_EXP 82
20197: AND
20198: IFFALSE 20327
20200: GO 20202
20202: DISABLE
20203: LD_INT 0
20205: PPUSH
// begin uc_side := 0 ;
20206: LD_ADDR_OWVAR 20
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// uc_nation := nation_arabian ;
20214: LD_ADDR_OWVAR 21
20218: PUSH
20219: LD_INT 2
20221: ST_TO_ADDR
// hc_gallery :=  ;
20222: LD_ADDR_OWVAR 33
20226: PUSH
20227: LD_STRING 
20229: ST_TO_ADDR
// hc_name :=  ;
20230: LD_ADDR_OWVAR 26
20234: PUSH
20235: LD_STRING 
20237: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20238: LD_INT 1
20240: PPUSH
20241: LD_INT 11
20243: PPUSH
20244: LD_INT 10
20246: PPUSH
20247: CALL_OW 380
// un := CreateHuman ;
20251: LD_ADDR_VAR 0 1
20255: PUSH
20256: CALL_OW 44
20260: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: LD_INT 1
20268: PPUSH
20269: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20273: LD_INT 35
20275: PPUSH
20276: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20280: LD_VAR 0 1
20284: PPUSH
20285: LD_INT 22
20287: PUSH
20288: LD_OWVAR 2
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PPUSH
20297: CALL_OW 69
20301: PPUSH
20302: LD_VAR 0 1
20306: PPUSH
20307: CALL_OW 74
20311: PPUSH
20312: CALL_OW 115
// until IsDead ( un ) ;
20316: LD_VAR 0 1
20320: PPUSH
20321: CALL_OW 301
20325: IFFALSE 20273
// end ;
20327: PPOPN 1
20329: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20330: LD_EXP 44
20334: PUSH
20335: LD_EXP 84
20339: AND
20340: IFFALSE 20352
20342: GO 20344
20344: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20345: LD_STRING earthquake(getX(game), 0, 32)
20347: PPUSH
20348: CALL_OW 559
20352: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20353: LD_EXP 44
20357: PUSH
20358: LD_EXP 85
20362: AND
20363: IFFALSE 20454
20365: GO 20367
20367: DISABLE
20368: LD_INT 0
20370: PPUSH
// begin enable ;
20371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20372: LD_ADDR_VAR 0 1
20376: PUSH
20377: LD_INT 22
20379: PUSH
20380: LD_OWVAR 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 21
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 33
20401: PUSH
20402: LD_INT 3
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: PPUSH
20414: CALL_OW 69
20418: ST_TO_ADDR
// if not tmp then
20419: LD_VAR 0 1
20423: NOT
20424: IFFALSE 20428
// exit ;
20426: GO 20454
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20428: LD_VAR 0 1
20432: PUSH
20433: LD_INT 1
20435: PPUSH
20436: LD_VAR 0 1
20440: PPUSH
20441: CALL_OW 12
20445: ARRAY
20446: PPUSH
20447: LD_INT 1
20449: PPUSH
20450: CALL_OW 234
// end ;
20454: PPOPN 1
20456: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20457: LD_EXP 44
20461: PUSH
20462: LD_EXP 86
20466: AND
20467: IFFALSE 20608
20469: GO 20471
20471: DISABLE
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
20476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20477: LD_ADDR_VAR 0 3
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_OWVAR 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 25
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PPUSH
20508: CALL_OW 69
20512: ST_TO_ADDR
// if not tmp then
20513: LD_VAR 0 3
20517: NOT
20518: IFFALSE 20522
// exit ;
20520: GO 20608
// un := tmp [ rand ( 1 , tmp ) ] ;
20522: LD_ADDR_VAR 0 2
20526: PUSH
20527: LD_VAR 0 3
20531: PUSH
20532: LD_INT 1
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: CALL_OW 12
20544: ARRAY
20545: ST_TO_ADDR
// if Crawls ( un ) then
20546: LD_VAR 0 2
20550: PPUSH
20551: CALL_OW 318
20555: IFFALSE 20566
// ComWalk ( un ) ;
20557: LD_VAR 0 2
20561: PPUSH
20562: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20566: LD_VAR 0 2
20570: PPUSH
20571: LD_INT 9
20573: PPUSH
20574: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20578: LD_INT 28
20580: PPUSH
20581: LD_OWVAR 2
20585: PPUSH
20586: LD_INT 2
20588: PPUSH
20589: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20593: LD_INT 29
20595: PPUSH
20596: LD_OWVAR 2
20600: PPUSH
20601: LD_INT 2
20603: PPUSH
20604: CALL_OW 322
// end ;
20608: PPOPN 3
20610: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20611: LD_EXP 44
20615: PUSH
20616: LD_EXP 87
20620: AND
20621: IFFALSE 20732
20623: GO 20625
20625: DISABLE
20626: LD_INT 0
20628: PPUSH
20629: PPUSH
20630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20631: LD_ADDR_VAR 0 3
20635: PUSH
20636: LD_INT 22
20638: PUSH
20639: LD_OWVAR 2
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 25
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PPUSH
20662: CALL_OW 69
20666: ST_TO_ADDR
// if not tmp then
20667: LD_VAR 0 3
20671: NOT
20672: IFFALSE 20676
// exit ;
20674: GO 20732
// un := tmp [ rand ( 1 , tmp ) ] ;
20676: LD_ADDR_VAR 0 2
20680: PUSH
20681: LD_VAR 0 3
20685: PUSH
20686: LD_INT 1
20688: PPUSH
20689: LD_VAR 0 3
20693: PPUSH
20694: CALL_OW 12
20698: ARRAY
20699: ST_TO_ADDR
// if Crawls ( un ) then
20700: LD_VAR 0 2
20704: PPUSH
20705: CALL_OW 318
20709: IFFALSE 20720
// ComWalk ( un ) ;
20711: LD_VAR 0 2
20715: PPUSH
20716: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20720: LD_VAR 0 2
20724: PPUSH
20725: LD_INT 8
20727: PPUSH
20728: CALL_OW 336
// end ;
20732: PPOPN 3
20734: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20735: LD_EXP 44
20739: PUSH
20740: LD_EXP 88
20744: AND
20745: IFFALSE 20889
20747: GO 20749
20749: DISABLE
20750: LD_INT 0
20752: PPUSH
20753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20754: LD_ADDR_VAR 0 2
20758: PUSH
20759: LD_INT 22
20761: PUSH
20762: LD_OWVAR 2
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 21
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: LD_INT 34
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 34
20796: PUSH
20797: LD_INT 51
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 34
20806: PUSH
20807: LD_INT 32
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: PPUSH
20825: CALL_OW 69
20829: ST_TO_ADDR
// if not tmp then
20830: LD_VAR 0 2
20834: NOT
20835: IFFALSE 20839
// exit ;
20837: GO 20889
// for i in tmp do
20839: LD_ADDR_VAR 0 1
20843: PUSH
20844: LD_VAR 0 2
20848: PUSH
20849: FOR_IN
20850: IFFALSE 20887
// if GetCargo ( i , mat_artifact ) = 0 then
20852: LD_VAR 0 1
20856: PPUSH
20857: LD_INT 4
20859: PPUSH
20860: CALL_OW 289
20864: PUSH
20865: LD_INT 0
20867: EQUAL
20868: IFFALSE 20885
// SetCargo ( i , mat_siberit , 100 ) ;
20870: LD_VAR 0 1
20874: PPUSH
20875: LD_INT 3
20877: PPUSH
20878: LD_INT 100
20880: PPUSH
20881: CALL_OW 290
20885: GO 20849
20887: POP
20888: POP
// end ;
20889: PPOPN 2
20891: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20892: LD_EXP 44
20896: PUSH
20897: LD_EXP 89
20901: AND
20902: IFFALSE 21085
20904: GO 20906
20906: DISABLE
20907: LD_INT 0
20909: PPUSH
20910: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20911: LD_ADDR_VAR 0 2
20915: PUSH
20916: LD_INT 22
20918: PUSH
20919: LD_OWVAR 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PPUSH
20928: CALL_OW 69
20932: ST_TO_ADDR
// if not tmp then
20933: LD_VAR 0 2
20937: NOT
20938: IFFALSE 20942
// exit ;
20940: GO 21085
// for i := 1 to 2 do
20942: LD_ADDR_VAR 0 1
20946: PUSH
20947: DOUBLE
20948: LD_INT 1
20950: DEC
20951: ST_TO_ADDR
20952: LD_INT 2
20954: PUSH
20955: FOR_TO
20956: IFFALSE 21083
// begin uc_side := your_side ;
20958: LD_ADDR_OWVAR 20
20962: PUSH
20963: LD_OWVAR 2
20967: ST_TO_ADDR
// uc_nation := nation_american ;
20968: LD_ADDR_OWVAR 21
20972: PUSH
20973: LD_INT 1
20975: ST_TO_ADDR
// vc_chassis := us_morphling ;
20976: LD_ADDR_OWVAR 37
20980: PUSH
20981: LD_INT 5
20983: ST_TO_ADDR
// vc_engine := engine_siberite ;
20984: LD_ADDR_OWVAR 39
20988: PUSH
20989: LD_INT 3
20991: ST_TO_ADDR
// vc_control := control_computer ;
20992: LD_ADDR_OWVAR 38
20996: PUSH
20997: LD_INT 3
20999: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21000: LD_ADDR_OWVAR 40
21004: PUSH
21005: LD_INT 10
21007: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21008: LD_VAR 0 2
21012: PUSH
21013: LD_INT 1
21015: ARRAY
21016: PPUSH
21017: CALL_OW 310
21021: NOT
21022: IFFALSE 21069
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21024: CALL_OW 45
21028: PPUSH
21029: LD_VAR 0 2
21033: PUSH
21034: LD_INT 1
21036: ARRAY
21037: PPUSH
21038: CALL_OW 250
21042: PPUSH
21043: LD_VAR 0 2
21047: PUSH
21048: LD_INT 1
21050: ARRAY
21051: PPUSH
21052: CALL_OW 251
21056: PPUSH
21057: LD_INT 12
21059: PPUSH
21060: LD_INT 1
21062: PPUSH
21063: CALL_OW 50
21067: GO 21081
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21069: CALL_OW 45
21073: PPUSH
21074: LD_INT 1
21076: PPUSH
21077: CALL_OW 51
// end ;
21081: GO 20955
21083: POP
21084: POP
// end ;
21085: PPOPN 2
21087: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21088: LD_EXP 44
21092: PUSH
21093: LD_EXP 90
21097: AND
21098: IFFALSE 21320
21100: GO 21102
21102: DISABLE
21103: LD_INT 0
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21111: LD_ADDR_VAR 0 6
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 3
21140: PUSH
21141: LD_INT 23
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: PPUSH
21160: CALL_OW 69
21164: ST_TO_ADDR
// if not tmp then
21165: LD_VAR 0 6
21169: NOT
21170: IFFALSE 21174
// exit ;
21172: GO 21320
// s1 := rand ( 1 , 4 ) ;
21174: LD_ADDR_VAR 0 2
21178: PUSH
21179: LD_INT 1
21181: PPUSH
21182: LD_INT 4
21184: PPUSH
21185: CALL_OW 12
21189: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21190: LD_ADDR_VAR 0 4
21194: PUSH
21195: LD_VAR 0 6
21199: PUSH
21200: LD_INT 1
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 2
21208: PPUSH
21209: CALL_OW 259
21213: ST_TO_ADDR
// if s1 = 1 then
21214: LD_VAR 0 2
21218: PUSH
21219: LD_INT 1
21221: EQUAL
21222: IFFALSE 21242
// s2 := rand ( 2 , 4 ) else
21224: LD_ADDR_VAR 0 3
21228: PUSH
21229: LD_INT 2
21231: PPUSH
21232: LD_INT 4
21234: PPUSH
21235: CALL_OW 12
21239: ST_TO_ADDR
21240: GO 21250
// s2 := 1 ;
21242: LD_ADDR_VAR 0 3
21246: PUSH
21247: LD_INT 1
21249: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21250: LD_ADDR_VAR 0 5
21254: PUSH
21255: LD_VAR 0 6
21259: PUSH
21260: LD_INT 1
21262: ARRAY
21263: PPUSH
21264: LD_VAR 0 3
21268: PPUSH
21269: CALL_OW 259
21273: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21274: LD_VAR 0 6
21278: PUSH
21279: LD_INT 1
21281: ARRAY
21282: PPUSH
21283: LD_VAR 0 2
21287: PPUSH
21288: LD_VAR 0 5
21292: PPUSH
21293: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21297: LD_VAR 0 6
21301: PUSH
21302: LD_INT 1
21304: ARRAY
21305: PPUSH
21306: LD_VAR 0 3
21310: PPUSH
21311: LD_VAR 0 4
21315: PPUSH
21316: CALL_OW 237
// end ;
21320: PPOPN 6
21322: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21323: LD_EXP 44
21327: PUSH
21328: LD_EXP 91
21332: AND
21333: IFFALSE 21412
21335: GO 21337
21337: DISABLE
21338: LD_INT 0
21340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21341: LD_ADDR_VAR 0 1
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_OWVAR 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 30
21360: PUSH
21361: LD_INT 3
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PPUSH
21372: CALL_OW 69
21376: ST_TO_ADDR
// if not tmp then
21377: LD_VAR 0 1
21381: NOT
21382: IFFALSE 21386
// exit ;
21384: GO 21412
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21386: LD_VAR 0 1
21390: PUSH
21391: LD_INT 1
21393: PPUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: CALL_OW 12
21403: ARRAY
21404: PPUSH
21405: LD_INT 1
21407: PPUSH
21408: CALL_OW 234
// end ;
21412: PPOPN 1
21414: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21415: LD_EXP 44
21419: PUSH
21420: LD_EXP 92
21424: AND
21425: IFFALSE 21537
21427: GO 21429
21429: DISABLE
21430: LD_INT 0
21432: PPUSH
21433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21434: LD_ADDR_VAR 0 2
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_OWVAR 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 2
21453: PUSH
21454: LD_INT 30
21456: PUSH
21457: LD_INT 27
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 30
21466: PUSH
21467: LD_INT 26
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 30
21476: PUSH
21477: LD_INT 28
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PPUSH
21494: CALL_OW 69
21498: ST_TO_ADDR
// if not tmp then
21499: LD_VAR 0 2
21503: NOT
21504: IFFALSE 21508
// exit ;
21506: GO 21537
// for i in tmp do
21508: LD_ADDR_VAR 0 1
21512: PUSH
21513: LD_VAR 0 2
21517: PUSH
21518: FOR_IN
21519: IFFALSE 21535
// SetLives ( i , 1 ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_INT 1
21528: PPUSH
21529: CALL_OW 234
21533: GO 21518
21535: POP
21536: POP
// end ;
21537: PPOPN 2
21539: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21540: LD_EXP 44
21544: PUSH
21545: LD_EXP 93
21549: AND
21550: IFFALSE 21837
21552: GO 21554
21554: DISABLE
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
// begin i := rand ( 1 , 7 ) ;
21560: LD_ADDR_VAR 0 1
21564: PUSH
21565: LD_INT 1
21567: PPUSH
21568: LD_INT 7
21570: PPUSH
21571: CALL_OW 12
21575: ST_TO_ADDR
// case i of 1 :
21576: LD_VAR 0 1
21580: PUSH
21581: LD_INT 1
21583: DOUBLE
21584: EQUAL
21585: IFTRUE 21589
21587: GO 21599
21589: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21590: LD_STRING earthquake(getX(game), 0, 32)
21592: PPUSH
21593: CALL_OW 559
21597: GO 21837
21599: LD_INT 2
21601: DOUBLE
21602: EQUAL
21603: IFTRUE 21607
21605: GO 21621
21607: POP
// begin ToLua ( displayStucuk(); ) ;
21608: LD_STRING displayStucuk();
21610: PPUSH
21611: CALL_OW 559
// ResetFog ;
21615: CALL_OW 335
// end ; 3 :
21619: GO 21837
21621: LD_INT 3
21623: DOUBLE
21624: EQUAL
21625: IFTRUE 21629
21627: GO 21733
21629: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21630: LD_ADDR_VAR 0 2
21634: PUSH
21635: LD_INT 22
21637: PUSH
21638: LD_OWVAR 2
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 25
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 69
21665: ST_TO_ADDR
// if not tmp then
21666: LD_VAR 0 2
21670: NOT
21671: IFFALSE 21675
// exit ;
21673: GO 21837
// un := tmp [ rand ( 1 , tmp ) ] ;
21675: LD_ADDR_VAR 0 3
21679: PUSH
21680: LD_VAR 0 2
21684: PUSH
21685: LD_INT 1
21687: PPUSH
21688: LD_VAR 0 2
21692: PPUSH
21693: CALL_OW 12
21697: ARRAY
21698: ST_TO_ADDR
// if Crawls ( un ) then
21699: LD_VAR 0 3
21703: PPUSH
21704: CALL_OW 318
21708: IFFALSE 21719
// ComWalk ( un ) ;
21710: LD_VAR 0 3
21714: PPUSH
21715: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21719: LD_VAR 0 3
21723: PPUSH
21724: LD_INT 8
21726: PPUSH
21727: CALL_OW 336
// end ; 4 :
21731: GO 21837
21733: LD_INT 4
21735: DOUBLE
21736: EQUAL
21737: IFTRUE 21741
21739: GO 21815
21741: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21742: LD_ADDR_VAR 0 2
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_OWVAR 2
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 30
21761: PUSH
21762: LD_INT 29
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PPUSH
21773: CALL_OW 69
21777: ST_TO_ADDR
// if not tmp then
21778: LD_VAR 0 2
21782: NOT
21783: IFFALSE 21787
// exit ;
21785: GO 21837
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21787: LD_VAR 0 2
21791: PUSH
21792: LD_INT 1
21794: ARRAY
21795: PPUSH
21796: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21800: LD_VAR 0 2
21804: PUSH
21805: LD_INT 1
21807: ARRAY
21808: PPUSH
21809: CALL_OW 65
// end ; 5 .. 7 :
21813: GO 21837
21815: LD_INT 5
21817: DOUBLE
21818: GREATEREQUAL
21819: IFFALSE 21827
21821: LD_INT 7
21823: DOUBLE
21824: LESSEQUAL
21825: IFTRUE 21829
21827: GO 21836
21829: POP
// StreamSibBomb ; end ;
21830: CALL 18074 0 0
21834: GO 21837
21836: POP
// end ;
21837: PPOPN 3
21839: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21840: LD_EXP 44
21844: PUSH
21845: LD_EXP 94
21849: AND
21850: IFFALSE 22006
21852: GO 21854
21854: DISABLE
21855: LD_INT 0
21857: PPUSH
21858: PPUSH
21859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21860: LD_ADDR_VAR 0 2
21864: PUSH
21865: LD_INT 81
21867: PUSH
21868: LD_OWVAR 2
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 21
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 21
21892: PUSH
21893: LD_INT 2
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PPUSH
21909: CALL_OW 69
21913: ST_TO_ADDR
// if not tmp then
21914: LD_VAR 0 2
21918: NOT
21919: IFFALSE 21923
// exit ;
21921: GO 22006
// p := 0 ;
21923: LD_ADDR_VAR 0 3
21927: PUSH
21928: LD_INT 0
21930: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21931: LD_INT 35
21933: PPUSH
21934: CALL_OW 67
// p := p + 1 ;
21938: LD_ADDR_VAR 0 3
21942: PUSH
21943: LD_VAR 0 3
21947: PUSH
21948: LD_INT 1
21950: PLUS
21951: ST_TO_ADDR
// for i in tmp do
21952: LD_ADDR_VAR 0 1
21956: PUSH
21957: LD_VAR 0 2
21961: PUSH
21962: FOR_IN
21963: IFFALSE 21994
// if GetLives ( i ) < 1000 then
21965: LD_VAR 0 1
21969: PPUSH
21970: CALL_OW 256
21974: PUSH
21975: LD_INT 1000
21977: LESS
21978: IFFALSE 21992
// SetLives ( i , 1000 ) ;
21980: LD_VAR 0 1
21984: PPUSH
21985: LD_INT 1000
21987: PPUSH
21988: CALL_OW 234
21992: GO 21962
21994: POP
21995: POP
// until p > 20 ;
21996: LD_VAR 0 3
22000: PUSH
22001: LD_INT 20
22003: GREATER
22004: IFFALSE 21931
// end ;
22006: PPOPN 3
22008: END
// every 0 0$1 trigger StreamModeActive and sTime do
22009: LD_EXP 44
22013: PUSH
22014: LD_EXP 95
22018: AND
22019: IFFALSE 22054
22021: GO 22023
22023: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22024: LD_INT 28
22026: PPUSH
22027: LD_OWVAR 2
22031: PPUSH
22032: LD_INT 2
22034: PPUSH
22035: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22039: LD_INT 30
22041: PPUSH
22042: LD_OWVAR 2
22046: PPUSH
22047: LD_INT 2
22049: PPUSH
22050: CALL_OW 322
// end ;
22054: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22055: LD_EXP 44
22059: PUSH
22060: LD_EXP 96
22064: AND
22065: IFFALSE 22186
22067: GO 22069
22069: DISABLE
22070: LD_INT 0
22072: PPUSH
22073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22074: LD_ADDR_VAR 0 2
22078: PUSH
22079: LD_INT 22
22081: PUSH
22082: LD_OWVAR 2
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 21
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 3
22103: PUSH
22104: LD_INT 23
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: PPUSH
22123: CALL_OW 69
22127: ST_TO_ADDR
// if not tmp then
22128: LD_VAR 0 2
22132: NOT
22133: IFFALSE 22137
// exit ;
22135: GO 22186
// for i in tmp do
22137: LD_ADDR_VAR 0 1
22141: PUSH
22142: LD_VAR 0 2
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22184
// begin if Crawls ( i ) then
22150: LD_VAR 0 1
22154: PPUSH
22155: CALL_OW 318
22159: IFFALSE 22170
// ComWalk ( i ) ;
22161: LD_VAR 0 1
22165: PPUSH
22166: CALL_OW 138
// SetClass ( i , 2 ) ;
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_INT 2
22177: PPUSH
22178: CALL_OW 336
// end ;
22182: GO 22147
22184: POP
22185: POP
// end ;
22186: PPOPN 2
22188: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22189: LD_EXP 44
22193: PUSH
22194: LD_EXP 97
22198: AND
22199: IFFALSE 22487
22201: GO 22203
22203: DISABLE
22204: LD_INT 0
22206: PPUSH
22207: PPUSH
22208: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22209: LD_OWVAR 2
22213: PPUSH
22214: LD_INT 9
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22227: LD_INT 9
22229: PPUSH
22230: LD_OWVAR 2
22234: PPUSH
22235: CALL_OW 343
// uc_side := 9 ;
22239: LD_ADDR_OWVAR 20
22243: PUSH
22244: LD_INT 9
22246: ST_TO_ADDR
// uc_nation := 2 ;
22247: LD_ADDR_OWVAR 21
22251: PUSH
22252: LD_INT 2
22254: ST_TO_ADDR
// hc_name := Dark Warrior ;
22255: LD_ADDR_OWVAR 26
22259: PUSH
22260: LD_STRING Dark Warrior
22262: ST_TO_ADDR
// hc_gallery :=  ;
22263: LD_ADDR_OWVAR 33
22267: PUSH
22268: LD_STRING 
22270: ST_TO_ADDR
// hc_noskilllimit := true ;
22271: LD_ADDR_OWVAR 76
22275: PUSH
22276: LD_INT 1
22278: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22279: LD_ADDR_OWVAR 31
22283: PUSH
22284: LD_INT 30
22286: PUSH
22287: LD_INT 30
22289: PUSH
22290: LD_INT 30
22292: PUSH
22293: LD_INT 30
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: ST_TO_ADDR
// un := CreateHuman ;
22302: LD_ADDR_VAR 0 3
22306: PUSH
22307: CALL_OW 44
22311: ST_TO_ADDR
// hc_noskilllimit := false ;
22312: LD_ADDR_OWVAR 76
22316: PUSH
22317: LD_INT 0
22319: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22320: LD_VAR 0 3
22324: PPUSH
22325: LD_INT 1
22327: PPUSH
22328: CALL_OW 51
// ToLua ( playRanger() ) ;
22332: LD_STRING playRanger()
22334: PPUSH
22335: CALL_OW 559
// p := 0 ;
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_INT 0
22346: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22347: LD_INT 35
22349: PPUSH
22350: CALL_OW 67
// p := p + 1 ;
22354: LD_ADDR_VAR 0 2
22358: PUSH
22359: LD_VAR 0 2
22363: PUSH
22364: LD_INT 1
22366: PLUS
22367: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22368: LD_VAR 0 3
22372: PPUSH
22373: CALL_OW 256
22377: PUSH
22378: LD_INT 1000
22380: LESS
22381: IFFALSE 22395
// SetLives ( un , 1000 ) ;
22383: LD_VAR 0 3
22387: PPUSH
22388: LD_INT 1000
22390: PPUSH
22391: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22395: LD_VAR 0 3
22399: PPUSH
22400: LD_INT 81
22402: PUSH
22403: LD_OWVAR 2
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 91
22414: PUSH
22415: LD_VAR 0 3
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 69
22436: PPUSH
22437: LD_VAR 0 3
22441: PPUSH
22442: CALL_OW 74
22446: PPUSH
22447: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22451: LD_VAR 0 2
22455: PUSH
22456: LD_INT 80
22458: GREATER
22459: PUSH
22460: LD_VAR 0 3
22464: PPUSH
22465: CALL_OW 301
22469: OR
22470: IFFALSE 22347
// if un then
22472: LD_VAR 0 3
22476: IFFALSE 22487
// RemoveUnit ( un ) ;
22478: LD_VAR 0 3
22482: PPUSH
22483: CALL_OW 64
// end ;
22487: PPOPN 3
22489: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22490: LD_EXP 98
22494: IFFALSE 22610
22496: GO 22498
22498: DISABLE
22499: LD_INT 0
22501: PPUSH
22502: PPUSH
22503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22504: LD_ADDR_VAR 0 2
22508: PUSH
22509: LD_INT 81
22511: PUSH
22512: LD_OWVAR 2
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 21
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PPUSH
22535: CALL_OW 69
22539: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22540: LD_STRING playComputer()
22542: PPUSH
22543: CALL_OW 559
// if not tmp then
22547: LD_VAR 0 2
22551: NOT
22552: IFFALSE 22556
// exit ;
22554: GO 22610
// for i in tmp do
22556: LD_ADDR_VAR 0 1
22560: PUSH
22561: LD_VAR 0 2
22565: PUSH
22566: FOR_IN
22567: IFFALSE 22608
// for j := 1 to 4 do
22569: LD_ADDR_VAR 0 3
22573: PUSH
22574: DOUBLE
22575: LD_INT 1
22577: DEC
22578: ST_TO_ADDR
22579: LD_INT 4
22581: PUSH
22582: FOR_TO
22583: IFFALSE 22604
// SetSkill ( i , j , 10 ) ;
22585: LD_VAR 0 1
22589: PPUSH
22590: LD_VAR 0 3
22594: PPUSH
22595: LD_INT 10
22597: PPUSH
22598: CALL_OW 237
22602: GO 22582
22604: POP
22605: POP
22606: GO 22566
22608: POP
22609: POP
// end ;
22610: PPOPN 3
22612: END
// every 0 0$1 trigger s30 do var i , tmp ;
22613: LD_EXP 99
22617: IFFALSE 22686
22619: GO 22621
22621: DISABLE
22622: LD_INT 0
22624: PPUSH
22625: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22626: LD_ADDR_VAR 0 2
22630: PUSH
22631: LD_INT 22
22633: PUSH
22634: LD_OWVAR 2
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PPUSH
22643: CALL_OW 69
22647: ST_TO_ADDR
// if not tmp then
22648: LD_VAR 0 2
22652: NOT
22653: IFFALSE 22657
// exit ;
22655: GO 22686
// for i in tmp do
22657: LD_ADDR_VAR 0 1
22661: PUSH
22662: LD_VAR 0 2
22666: PUSH
22667: FOR_IN
22668: IFFALSE 22684
// SetLives ( i , 300 ) ;
22670: LD_VAR 0 1
22674: PPUSH
22675: LD_INT 300
22677: PPUSH
22678: CALL_OW 234
22682: GO 22667
22684: POP
22685: POP
// end ;
22686: PPOPN 2
22688: END
// every 0 0$1 trigger s60 do var i , tmp ;
22689: LD_EXP 100
22693: IFFALSE 22762
22695: GO 22697
22697: DISABLE
22698: LD_INT 0
22700: PPUSH
22701: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22702: LD_ADDR_VAR 0 2
22706: PUSH
22707: LD_INT 22
22709: PUSH
22710: LD_OWVAR 2
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL_OW 69
22723: ST_TO_ADDR
// if not tmp then
22724: LD_VAR 0 2
22728: NOT
22729: IFFALSE 22733
// exit ;
22731: GO 22762
// for i in tmp do
22733: LD_ADDR_VAR 0 1
22737: PUSH
22738: LD_VAR 0 2
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22760
// SetLives ( i , 600 ) ;
22746: LD_VAR 0 1
22750: PPUSH
22751: LD_INT 600
22753: PPUSH
22754: CALL_OW 234
22758: GO 22743
22760: POP
22761: POP
// end ;
22762: PPOPN 2
22764: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22765: LD_INT 0
22767: PPUSH
// case cmd of 301 :
22768: LD_VAR 0 1
22772: PUSH
22773: LD_INT 301
22775: DOUBLE
22776: EQUAL
22777: IFTRUE 22781
22779: GO 22813
22781: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22782: LD_VAR 0 6
22786: PPUSH
22787: LD_VAR 0 7
22791: PPUSH
22792: LD_VAR 0 8
22796: PPUSH
22797: LD_VAR 0 4
22801: PPUSH
22802: LD_VAR 0 5
22806: PPUSH
22807: CALL 24014 0 5
22811: GO 22934
22813: LD_INT 302
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22858
22821: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22822: LD_VAR 0 6
22826: PPUSH
22827: LD_VAR 0 7
22831: PPUSH
22832: LD_VAR 0 8
22836: PPUSH
22837: LD_VAR 0 9
22841: PPUSH
22842: LD_VAR 0 4
22846: PPUSH
22847: LD_VAR 0 5
22851: PPUSH
22852: CALL 24105 0 6
22856: GO 22934
22858: LD_INT 303
22860: DOUBLE
22861: EQUAL
22862: IFTRUE 22866
22864: GO 22903
22866: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22867: LD_VAR 0 6
22871: PPUSH
22872: LD_VAR 0 7
22876: PPUSH
22877: LD_VAR 0 8
22881: PPUSH
22882: LD_VAR 0 9
22886: PPUSH
22887: LD_VAR 0 4
22891: PPUSH
22892: LD_VAR 0 5
22896: PPUSH
22897: CALL 22939 0 6
22901: GO 22934
22903: LD_INT 304
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22933
22911: POP
// hHackTeleport ( unit , x , y ) ; end ;
22912: LD_VAR 0 2
22916: PPUSH
22917: LD_VAR 0 4
22921: PPUSH
22922: LD_VAR 0 5
22926: PPUSH
22927: CALL 24698 0 3
22931: GO 22934
22933: POP
// end ;
22934: LD_VAR 0 12
22938: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22939: LD_INT 0
22941: PPUSH
22942: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22943: LD_VAR 0 1
22947: PUSH
22948: LD_INT 1
22950: LESS
22951: PUSH
22952: LD_VAR 0 1
22956: PUSH
22957: LD_INT 3
22959: GREATER
22960: OR
22961: PUSH
22962: LD_VAR 0 5
22966: PPUSH
22967: LD_VAR 0 6
22971: PPUSH
22972: CALL_OW 428
22976: OR
22977: IFFALSE 22981
// exit ;
22979: GO 23701
// uc_side := your_side ;
22981: LD_ADDR_OWVAR 20
22985: PUSH
22986: LD_OWVAR 2
22990: ST_TO_ADDR
// uc_nation := nation ;
22991: LD_ADDR_OWVAR 21
22995: PUSH
22996: LD_VAR 0 1
23000: ST_TO_ADDR
// bc_level = 1 ;
23001: LD_ADDR_OWVAR 43
23005: PUSH
23006: LD_INT 1
23008: ST_TO_ADDR
// case btype of 1 :
23009: LD_VAR 0 2
23013: PUSH
23014: LD_INT 1
23016: DOUBLE
23017: EQUAL
23018: IFTRUE 23022
23020: GO 23033
23022: POP
// bc_type := b_depot ; 2 :
23023: LD_ADDR_OWVAR 42
23027: PUSH
23028: LD_INT 0
23030: ST_TO_ADDR
23031: GO 23645
23033: LD_INT 2
23035: DOUBLE
23036: EQUAL
23037: IFTRUE 23041
23039: GO 23052
23041: POP
// bc_type := b_warehouse ; 3 :
23042: LD_ADDR_OWVAR 42
23046: PUSH
23047: LD_INT 1
23049: ST_TO_ADDR
23050: GO 23645
23052: LD_INT 3
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23071
23060: POP
// bc_type := b_lab ; 4 .. 9 :
23061: LD_ADDR_OWVAR 42
23065: PUSH
23066: LD_INT 6
23068: ST_TO_ADDR
23069: GO 23645
23071: LD_INT 4
23073: DOUBLE
23074: GREATEREQUAL
23075: IFFALSE 23083
23077: LD_INT 9
23079: DOUBLE
23080: LESSEQUAL
23081: IFTRUE 23085
23083: GO 23137
23085: POP
// begin bc_type := b_lab_half ;
23086: LD_ADDR_OWVAR 42
23090: PUSH
23091: LD_INT 7
23093: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23094: LD_ADDR_OWVAR 44
23098: PUSH
23099: LD_INT 10
23101: PUSH
23102: LD_INT 11
23104: PUSH
23105: LD_INT 12
23107: PUSH
23108: LD_INT 15
23110: PUSH
23111: LD_INT 14
23113: PUSH
23114: LD_INT 13
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: PUSH
23125: LD_VAR 0 2
23129: PUSH
23130: LD_INT 3
23132: MINUS
23133: ARRAY
23134: ST_TO_ADDR
// end ; 10 .. 13 :
23135: GO 23645
23137: LD_INT 10
23139: DOUBLE
23140: GREATEREQUAL
23141: IFFALSE 23149
23143: LD_INT 13
23145: DOUBLE
23146: LESSEQUAL
23147: IFTRUE 23151
23149: GO 23228
23151: POP
// begin bc_type := b_lab_full ;
23152: LD_ADDR_OWVAR 42
23156: PUSH
23157: LD_INT 8
23159: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23160: LD_ADDR_OWVAR 44
23164: PUSH
23165: LD_INT 10
23167: PUSH
23168: LD_INT 12
23170: PUSH
23171: LD_INT 14
23173: PUSH
23174: LD_INT 13
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: PUSH
23183: LD_VAR 0 2
23187: PUSH
23188: LD_INT 9
23190: MINUS
23191: ARRAY
23192: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23193: LD_ADDR_OWVAR 45
23197: PUSH
23198: LD_INT 11
23200: PUSH
23201: LD_INT 15
23203: PUSH
23204: LD_INT 12
23206: PUSH
23207: LD_INT 15
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: PUSH
23216: LD_VAR 0 2
23220: PUSH
23221: LD_INT 9
23223: MINUS
23224: ARRAY
23225: ST_TO_ADDR
// end ; 14 :
23226: GO 23645
23228: LD_INT 14
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23247
23236: POP
// bc_type := b_workshop ; 15 :
23237: LD_ADDR_OWVAR 42
23241: PUSH
23242: LD_INT 2
23244: ST_TO_ADDR
23245: GO 23645
23247: LD_INT 15
23249: DOUBLE
23250: EQUAL
23251: IFTRUE 23255
23253: GO 23266
23255: POP
// bc_type := b_factory ; 16 :
23256: LD_ADDR_OWVAR 42
23260: PUSH
23261: LD_INT 3
23263: ST_TO_ADDR
23264: GO 23645
23266: LD_INT 16
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 23285
23274: POP
// bc_type := b_ext_gun ; 17 :
23275: LD_ADDR_OWVAR 42
23279: PUSH
23280: LD_INT 17
23282: ST_TO_ADDR
23283: GO 23645
23285: LD_INT 17
23287: DOUBLE
23288: EQUAL
23289: IFTRUE 23293
23291: GO 23321
23293: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23294: LD_ADDR_OWVAR 42
23298: PUSH
23299: LD_INT 19
23301: PUSH
23302: LD_INT 23
23304: PUSH
23305: LD_INT 19
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: PUSH
23313: LD_VAR 0 1
23317: ARRAY
23318: ST_TO_ADDR
23319: GO 23645
23321: LD_INT 18
23323: DOUBLE
23324: EQUAL
23325: IFTRUE 23329
23327: GO 23340
23329: POP
// bc_type := b_ext_radar ; 19 :
23330: LD_ADDR_OWVAR 42
23334: PUSH
23335: LD_INT 20
23337: ST_TO_ADDR
23338: GO 23645
23340: LD_INT 19
23342: DOUBLE
23343: EQUAL
23344: IFTRUE 23348
23346: GO 23359
23348: POP
// bc_type := b_ext_radio ; 20 :
23349: LD_ADDR_OWVAR 42
23353: PUSH
23354: LD_INT 22
23356: ST_TO_ADDR
23357: GO 23645
23359: LD_INT 20
23361: DOUBLE
23362: EQUAL
23363: IFTRUE 23367
23365: GO 23378
23367: POP
// bc_type := b_ext_siberium ; 21 :
23368: LD_ADDR_OWVAR 42
23372: PUSH
23373: LD_INT 21
23375: ST_TO_ADDR
23376: GO 23645
23378: LD_INT 21
23380: DOUBLE
23381: EQUAL
23382: IFTRUE 23386
23384: GO 23397
23386: POP
// bc_type := b_ext_computer ; 22 :
23387: LD_ADDR_OWVAR 42
23391: PUSH
23392: LD_INT 24
23394: ST_TO_ADDR
23395: GO 23645
23397: LD_INT 22
23399: DOUBLE
23400: EQUAL
23401: IFTRUE 23405
23403: GO 23416
23405: POP
// bc_type := b_ext_track ; 23 :
23406: LD_ADDR_OWVAR 42
23410: PUSH
23411: LD_INT 16
23413: ST_TO_ADDR
23414: GO 23645
23416: LD_INT 23
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23435
23424: POP
// bc_type := b_ext_laser ; 24 :
23425: LD_ADDR_OWVAR 42
23429: PUSH
23430: LD_INT 25
23432: ST_TO_ADDR
23433: GO 23645
23435: LD_INT 24
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23443
23441: GO 23454
23443: POP
// bc_type := b_control_tower ; 25 :
23444: LD_ADDR_OWVAR 42
23448: PUSH
23449: LD_INT 36
23451: ST_TO_ADDR
23452: GO 23645
23454: LD_INT 25
23456: DOUBLE
23457: EQUAL
23458: IFTRUE 23462
23460: GO 23473
23462: POP
// bc_type := b_breastwork ; 26 :
23463: LD_ADDR_OWVAR 42
23467: PUSH
23468: LD_INT 31
23470: ST_TO_ADDR
23471: GO 23645
23473: LD_INT 26
23475: DOUBLE
23476: EQUAL
23477: IFTRUE 23481
23479: GO 23492
23481: POP
// bc_type := b_bunker ; 27 :
23482: LD_ADDR_OWVAR 42
23486: PUSH
23487: LD_INT 32
23489: ST_TO_ADDR
23490: GO 23645
23492: LD_INT 27
23494: DOUBLE
23495: EQUAL
23496: IFTRUE 23500
23498: GO 23511
23500: POP
// bc_type := b_turret ; 28 :
23501: LD_ADDR_OWVAR 42
23505: PUSH
23506: LD_INT 33
23508: ST_TO_ADDR
23509: GO 23645
23511: LD_INT 28
23513: DOUBLE
23514: EQUAL
23515: IFTRUE 23519
23517: GO 23530
23519: POP
// bc_type := b_armoury ; 29 :
23520: LD_ADDR_OWVAR 42
23524: PUSH
23525: LD_INT 4
23527: ST_TO_ADDR
23528: GO 23645
23530: LD_INT 29
23532: DOUBLE
23533: EQUAL
23534: IFTRUE 23538
23536: GO 23549
23538: POP
// bc_type := b_barracks ; 30 :
23539: LD_ADDR_OWVAR 42
23543: PUSH
23544: LD_INT 5
23546: ST_TO_ADDR
23547: GO 23645
23549: LD_INT 30
23551: DOUBLE
23552: EQUAL
23553: IFTRUE 23557
23555: GO 23568
23557: POP
// bc_type := b_solar_power ; 31 :
23558: LD_ADDR_OWVAR 42
23562: PUSH
23563: LD_INT 27
23565: ST_TO_ADDR
23566: GO 23645
23568: LD_INT 31
23570: DOUBLE
23571: EQUAL
23572: IFTRUE 23576
23574: GO 23587
23576: POP
// bc_type := b_oil_power ; 32 :
23577: LD_ADDR_OWVAR 42
23581: PUSH
23582: LD_INT 26
23584: ST_TO_ADDR
23585: GO 23645
23587: LD_INT 32
23589: DOUBLE
23590: EQUAL
23591: IFTRUE 23595
23593: GO 23606
23595: POP
// bc_type := b_siberite_power ; 33 :
23596: LD_ADDR_OWVAR 42
23600: PUSH
23601: LD_INT 28
23603: ST_TO_ADDR
23604: GO 23645
23606: LD_INT 33
23608: DOUBLE
23609: EQUAL
23610: IFTRUE 23614
23612: GO 23625
23614: POP
// bc_type := b_oil_mine ; 34 :
23615: LD_ADDR_OWVAR 42
23619: PUSH
23620: LD_INT 29
23622: ST_TO_ADDR
23623: GO 23645
23625: LD_INT 34
23627: DOUBLE
23628: EQUAL
23629: IFTRUE 23633
23631: GO 23644
23633: POP
// bc_type := b_siberite_mine ; end ;
23634: LD_ADDR_OWVAR 42
23638: PUSH
23639: LD_INT 30
23641: ST_TO_ADDR
23642: GO 23645
23644: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23645: LD_ADDR_VAR 0 8
23649: PUSH
23650: LD_VAR 0 5
23654: PPUSH
23655: LD_VAR 0 6
23659: PPUSH
23660: LD_VAR 0 3
23664: PPUSH
23665: CALL_OW 47
23669: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23670: LD_OWVAR 42
23674: PUSH
23675: LD_INT 32
23677: PUSH
23678: LD_INT 33
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: IN
23685: IFFALSE 23701
// PlaceWeaponTurret ( b , weapon ) ;
23687: LD_VAR 0 8
23691: PPUSH
23692: LD_VAR 0 4
23696: PPUSH
23697: CALL_OW 431
// end ;
23701: LD_VAR 0 7
23705: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23706: LD_INT 0
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23712: LD_ADDR_VAR 0 4
23716: PUSH
23717: LD_INT 22
23719: PUSH
23720: LD_OWVAR 2
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 2
23731: PUSH
23732: LD_INT 30
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 30
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: LIST
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PPUSH
23761: CALL_OW 69
23765: ST_TO_ADDR
// if not tmp then
23766: LD_VAR 0 4
23770: NOT
23771: IFFALSE 23775
// exit ;
23773: GO 23834
// for i in tmp do
23775: LD_ADDR_VAR 0 2
23779: PUSH
23780: LD_VAR 0 4
23784: PUSH
23785: FOR_IN
23786: IFFALSE 23832
// for j = 1 to 3 do
23788: LD_ADDR_VAR 0 3
23792: PUSH
23793: DOUBLE
23794: LD_INT 1
23796: DEC
23797: ST_TO_ADDR
23798: LD_INT 3
23800: PUSH
23801: FOR_TO
23802: IFFALSE 23828
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23804: LD_VAR 0 2
23808: PPUSH
23809: CALL_OW 274
23813: PPUSH
23814: LD_VAR 0 3
23818: PPUSH
23819: LD_INT 99999
23821: PPUSH
23822: CALL_OW 277
23826: GO 23801
23828: POP
23829: POP
23830: GO 23785
23832: POP
23833: POP
// end ;
23834: LD_VAR 0 1
23838: RET
// export function hHackSetLevel10 ; var i , j ; begin
23839: LD_INT 0
23841: PPUSH
23842: PPUSH
23843: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23844: LD_ADDR_VAR 0 2
23848: PUSH
23849: LD_INT 21
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: CALL_OW 69
23863: PUSH
23864: FOR_IN
23865: IFFALSE 23917
// if IsSelected ( i ) then
23867: LD_VAR 0 2
23871: PPUSH
23872: CALL_OW 306
23876: IFFALSE 23915
// begin for j := 1 to 4 do
23878: LD_ADDR_VAR 0 3
23882: PUSH
23883: DOUBLE
23884: LD_INT 1
23886: DEC
23887: ST_TO_ADDR
23888: LD_INT 4
23890: PUSH
23891: FOR_TO
23892: IFFALSE 23913
// SetSkill ( i , j , 10 ) ;
23894: LD_VAR 0 2
23898: PPUSH
23899: LD_VAR 0 3
23903: PPUSH
23904: LD_INT 10
23906: PPUSH
23907: CALL_OW 237
23911: GO 23891
23913: POP
23914: POP
// end ;
23915: GO 23864
23917: POP
23918: POP
// end ;
23919: LD_VAR 0 1
23923: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23924: LD_INT 0
23926: PPUSH
23927: PPUSH
23928: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23929: LD_ADDR_VAR 0 2
23933: PUSH
23934: LD_INT 22
23936: PUSH
23937: LD_OWVAR 2
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 21
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PPUSH
23960: CALL_OW 69
23964: PUSH
23965: FOR_IN
23966: IFFALSE 24007
// begin for j := 1 to 4 do
23968: LD_ADDR_VAR 0 3
23972: PUSH
23973: DOUBLE
23974: LD_INT 1
23976: DEC
23977: ST_TO_ADDR
23978: LD_INT 4
23980: PUSH
23981: FOR_TO
23982: IFFALSE 24003
// SetSkill ( i , j , 10 ) ;
23984: LD_VAR 0 2
23988: PPUSH
23989: LD_VAR 0 3
23993: PPUSH
23994: LD_INT 10
23996: PPUSH
23997: CALL_OW 237
24001: GO 23981
24003: POP
24004: POP
// end ;
24005: GO 23965
24007: POP
24008: POP
// end ;
24009: LD_VAR 0 1
24013: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24014: LD_INT 0
24016: PPUSH
// uc_side := your_side ;
24017: LD_ADDR_OWVAR 20
24021: PUSH
24022: LD_OWVAR 2
24026: ST_TO_ADDR
// uc_nation := nation ;
24027: LD_ADDR_OWVAR 21
24031: PUSH
24032: LD_VAR 0 1
24036: ST_TO_ADDR
// InitHc ;
24037: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24041: LD_INT 0
24043: PPUSH
24044: LD_VAR 0 2
24048: PPUSH
24049: LD_VAR 0 3
24053: PPUSH
24054: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24058: LD_VAR 0 4
24062: PPUSH
24063: LD_VAR 0 5
24067: PPUSH
24068: CALL_OW 428
24072: PUSH
24073: LD_INT 0
24075: EQUAL
24076: IFFALSE 24100
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24078: CALL_OW 44
24082: PPUSH
24083: LD_VAR 0 4
24087: PPUSH
24088: LD_VAR 0 5
24092: PPUSH
24093: LD_INT 1
24095: PPUSH
24096: CALL_OW 48
// end ;
24100: LD_VAR 0 6
24104: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24105: LD_INT 0
24107: PPUSH
24108: PPUSH
// uc_side := your_side ;
24109: LD_ADDR_OWVAR 20
24113: PUSH
24114: LD_OWVAR 2
24118: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24119: LD_VAR 0 1
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: LD_INT 3
24132: PUSH
24133: LD_INT 4
24135: PUSH
24136: LD_INT 5
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: IN
24146: IFFALSE 24158
// uc_nation := nation_american else
24148: LD_ADDR_OWVAR 21
24152: PUSH
24153: LD_INT 1
24155: ST_TO_ADDR
24156: GO 24201
// if chassis in [ 11 , 12 , 13 , 14 ] then
24158: LD_VAR 0 1
24162: PUSH
24163: LD_INT 11
24165: PUSH
24166: LD_INT 12
24168: PUSH
24169: LD_INT 13
24171: PUSH
24172: LD_INT 14
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: IN
24181: IFFALSE 24193
// uc_nation := nation_arabian else
24183: LD_ADDR_OWVAR 21
24187: PUSH
24188: LD_INT 2
24190: ST_TO_ADDR
24191: GO 24201
// uc_nation := nation_russian ;
24193: LD_ADDR_OWVAR 21
24197: PUSH
24198: LD_INT 3
24200: ST_TO_ADDR
// vc_chassis := chassis ;
24201: LD_ADDR_OWVAR 37
24205: PUSH
24206: LD_VAR 0 1
24210: ST_TO_ADDR
// vc_engine := engine ;
24211: LD_ADDR_OWVAR 39
24215: PUSH
24216: LD_VAR 0 2
24220: ST_TO_ADDR
// vc_control := control ;
24221: LD_ADDR_OWVAR 38
24225: PUSH
24226: LD_VAR 0 3
24230: ST_TO_ADDR
// vc_weapon := weapon ;
24231: LD_ADDR_OWVAR 40
24235: PUSH
24236: LD_VAR 0 4
24240: ST_TO_ADDR
// un := CreateVehicle ;
24241: LD_ADDR_VAR 0 8
24245: PUSH
24246: CALL_OW 45
24250: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24251: LD_VAR 0 8
24255: PPUSH
24256: LD_INT 0
24258: PPUSH
24259: LD_INT 5
24261: PPUSH
24262: CALL_OW 12
24266: PPUSH
24267: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24271: LD_VAR 0 8
24275: PPUSH
24276: LD_VAR 0 5
24280: PPUSH
24281: LD_VAR 0 6
24285: PPUSH
24286: LD_INT 1
24288: PPUSH
24289: CALL_OW 48
// end ;
24293: LD_VAR 0 7
24297: RET
// export hInvincible ; every 1 do
24298: GO 24300
24300: DISABLE
// hInvincible := [ ] ;
24301: LD_ADDR_EXP 101
24305: PUSH
24306: EMPTY
24307: ST_TO_ADDR
24308: END
// every 10 do var i ;
24309: GO 24311
24311: DISABLE
24312: LD_INT 0
24314: PPUSH
// begin enable ;
24315: ENABLE
// if not hInvincible then
24316: LD_EXP 101
24320: NOT
24321: IFFALSE 24325
// exit ;
24323: GO 24369
// for i in hInvincible do
24325: LD_ADDR_VAR 0 1
24329: PUSH
24330: LD_EXP 101
24334: PUSH
24335: FOR_IN
24336: IFFALSE 24367
// if GetLives ( i ) < 1000 then
24338: LD_VAR 0 1
24342: PPUSH
24343: CALL_OW 256
24347: PUSH
24348: LD_INT 1000
24350: LESS
24351: IFFALSE 24365
// SetLives ( i , 1000 ) ;
24353: LD_VAR 0 1
24357: PPUSH
24358: LD_INT 1000
24360: PPUSH
24361: CALL_OW 234
24365: GO 24335
24367: POP
24368: POP
// end ;
24369: PPOPN 1
24371: END
// export function hHackInvincible ; var i ; begin
24372: LD_INT 0
24374: PPUSH
24375: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24376: LD_ADDR_VAR 0 2
24380: PUSH
24381: LD_INT 2
24383: PUSH
24384: LD_INT 21
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 21
24396: PUSH
24397: LD_INT 2
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: PPUSH
24409: CALL_OW 69
24413: PUSH
24414: FOR_IN
24415: IFFALSE 24476
// if IsSelected ( i ) then
24417: LD_VAR 0 2
24421: PPUSH
24422: CALL_OW 306
24426: IFFALSE 24474
// begin if i in hInvincible then
24428: LD_VAR 0 2
24432: PUSH
24433: LD_EXP 101
24437: IN
24438: IFFALSE 24458
// hInvincible := hInvincible diff i else
24440: LD_ADDR_EXP 101
24444: PUSH
24445: LD_EXP 101
24449: PUSH
24450: LD_VAR 0 2
24454: DIFF
24455: ST_TO_ADDR
24456: GO 24474
// hInvincible := hInvincible union i ;
24458: LD_ADDR_EXP 101
24462: PUSH
24463: LD_EXP 101
24467: PUSH
24468: LD_VAR 0 2
24472: UNION
24473: ST_TO_ADDR
// end ;
24474: GO 24414
24476: POP
24477: POP
// end ;
24478: LD_VAR 0 1
24482: RET
// export function hHackInvisible ; var i , j ; begin
24483: LD_INT 0
24485: PPUSH
24486: PPUSH
24487: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24488: LD_ADDR_VAR 0 2
24492: PUSH
24493: LD_INT 21
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PPUSH
24503: CALL_OW 69
24507: PUSH
24508: FOR_IN
24509: IFFALSE 24533
// if IsSelected ( i ) then
24511: LD_VAR 0 2
24515: PPUSH
24516: CALL_OW 306
24520: IFFALSE 24531
// ComForceInvisible ( i ) ;
24522: LD_VAR 0 2
24526: PPUSH
24527: CALL_OW 496
24531: GO 24508
24533: POP
24534: POP
// end ;
24535: LD_VAR 0 1
24539: RET
// export function hHackChangeYourSide ; begin
24540: LD_INT 0
24542: PPUSH
// if your_side = 8 then
24543: LD_OWVAR 2
24547: PUSH
24548: LD_INT 8
24550: EQUAL
24551: IFFALSE 24563
// your_side := 0 else
24553: LD_ADDR_OWVAR 2
24557: PUSH
24558: LD_INT 0
24560: ST_TO_ADDR
24561: GO 24577
// your_side := your_side + 1 ;
24563: LD_ADDR_OWVAR 2
24567: PUSH
24568: LD_OWVAR 2
24572: PUSH
24573: LD_INT 1
24575: PLUS
24576: ST_TO_ADDR
// end ;
24577: LD_VAR 0 1
24581: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24582: LD_INT 0
24584: PPUSH
24585: PPUSH
24586: PPUSH
// for i in all_units do
24587: LD_ADDR_VAR 0 2
24591: PUSH
24592: LD_OWVAR 3
24596: PUSH
24597: FOR_IN
24598: IFFALSE 24676
// if IsSelected ( i ) then
24600: LD_VAR 0 2
24604: PPUSH
24605: CALL_OW 306
24609: IFFALSE 24674
// begin j := GetSide ( i ) ;
24611: LD_ADDR_VAR 0 3
24615: PUSH
24616: LD_VAR 0 2
24620: PPUSH
24621: CALL_OW 255
24625: ST_TO_ADDR
// if j = 8 then
24626: LD_VAR 0 3
24630: PUSH
24631: LD_INT 8
24633: EQUAL
24634: IFFALSE 24646
// j := 0 else
24636: LD_ADDR_VAR 0 3
24640: PUSH
24641: LD_INT 0
24643: ST_TO_ADDR
24644: GO 24660
// j := j + 1 ;
24646: LD_ADDR_VAR 0 3
24650: PUSH
24651: LD_VAR 0 3
24655: PUSH
24656: LD_INT 1
24658: PLUS
24659: ST_TO_ADDR
// SetSide ( i , j ) ;
24660: LD_VAR 0 2
24664: PPUSH
24665: LD_VAR 0 3
24669: PPUSH
24670: CALL_OW 235
// end ;
24674: GO 24597
24676: POP
24677: POP
// end ;
24678: LD_VAR 0 1
24682: RET
// export function hHackFog ; begin
24683: LD_INT 0
24685: PPUSH
// FogOff ( true ) ;
24686: LD_INT 1
24688: PPUSH
24689: CALL_OW 344
// end ;
24693: LD_VAR 0 1
24697: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24698: LD_INT 0
24700: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24701: LD_VAR 0 1
24705: PPUSH
24706: LD_VAR 0 2
24710: PPUSH
24711: LD_VAR 0 3
24715: PPUSH
24716: LD_INT 1
24718: PPUSH
24719: LD_INT 1
24721: PPUSH
24722: CALL_OW 483
// CenterOnXY ( x , y ) ;
24726: LD_VAR 0 2
24730: PPUSH
24731: LD_VAR 0 3
24735: PPUSH
24736: CALL_OW 84
// end ;
24740: LD_VAR 0 4
24744: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24745: LD_INT 0
24747: PPUSH
24748: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24749: LD_VAR 0 1
24753: NOT
24754: PUSH
24755: LD_VAR 0 2
24759: PPUSH
24760: LD_VAR 0 3
24764: PPUSH
24765: CALL_OW 488
24769: NOT
24770: OR
24771: PUSH
24772: LD_VAR 0 1
24776: PPUSH
24777: CALL_OW 266
24781: PUSH
24782: LD_INT 3
24784: NONEQUAL
24785: PUSH
24786: LD_VAR 0 1
24790: PPUSH
24791: CALL_OW 247
24795: PUSH
24796: LD_INT 1
24798: EQUAL
24799: NOT
24800: AND
24801: OR
24802: IFFALSE 24806
// exit ;
24804: GO 24955
// if GetType ( factory ) = unit_human then
24806: LD_VAR 0 1
24810: PPUSH
24811: CALL_OW 247
24815: PUSH
24816: LD_INT 1
24818: EQUAL
24819: IFFALSE 24836
// factory := IsInUnit ( factory ) ;
24821: LD_ADDR_VAR 0 1
24825: PUSH
24826: LD_VAR 0 1
24830: PPUSH
24831: CALL_OW 310
24835: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24836: LD_VAR 0 1
24840: PPUSH
24841: CALL_OW 266
24845: PUSH
24846: LD_INT 3
24848: NONEQUAL
24849: IFFALSE 24853
// exit ;
24851: GO 24955
// if HexInfo ( x , y ) = factory then
24853: LD_VAR 0 2
24857: PPUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: CALL_OW 428
24867: PUSH
24868: LD_VAR 0 1
24872: EQUAL
24873: IFFALSE 24900
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24875: LD_ADDR_EXP 102
24879: PUSH
24880: LD_EXP 102
24884: PPUSH
24885: LD_VAR 0 1
24889: PPUSH
24890: LD_INT 0
24892: PPUSH
24893: CALL_OW 1
24897: ST_TO_ADDR
24898: GO 24951
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24900: LD_ADDR_EXP 102
24904: PUSH
24905: LD_EXP 102
24909: PPUSH
24910: LD_VAR 0 1
24914: PPUSH
24915: LD_VAR 0 1
24919: PPUSH
24920: CALL_OW 255
24924: PUSH
24925: LD_VAR 0 1
24929: PUSH
24930: LD_VAR 0 2
24934: PUSH
24935: LD_VAR 0 3
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: PPUSH
24946: CALL_OW 1
24950: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24951: CALL 24960 0 0
// end ;
24955: LD_VAR 0 4
24959: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24960: LD_INT 0
24962: PPUSH
24963: PPUSH
24964: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24965: LD_STRING resetFactoryWaypoint();
24967: PPUSH
24968: CALL_OW 559
// if factoryWaypoints then
24972: LD_EXP 102
24976: IFFALSE 25102
// begin list := PrepareArray ( factoryWaypoints ) ;
24978: LD_ADDR_VAR 0 3
24982: PUSH
24983: LD_EXP 102
24987: PPUSH
24988: CALL 71734 0 1
24992: ST_TO_ADDR
// for i := 1 to list do
24993: LD_ADDR_VAR 0 2
24997: PUSH
24998: DOUBLE
24999: LD_INT 1
25001: DEC
25002: ST_TO_ADDR
25003: LD_VAR 0 3
25007: PUSH
25008: FOR_TO
25009: IFFALSE 25100
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25011: LD_STRING setFactoryWaypointXY(
25013: PUSH
25014: LD_VAR 0 3
25018: PUSH
25019: LD_VAR 0 2
25023: ARRAY
25024: PUSH
25025: LD_INT 1
25027: ARRAY
25028: STR
25029: PUSH
25030: LD_STRING ,
25032: STR
25033: PUSH
25034: LD_VAR 0 3
25038: PUSH
25039: LD_VAR 0 2
25043: ARRAY
25044: PUSH
25045: LD_INT 2
25047: ARRAY
25048: STR
25049: PUSH
25050: LD_STRING ,
25052: STR
25053: PUSH
25054: LD_VAR 0 3
25058: PUSH
25059: LD_VAR 0 2
25063: ARRAY
25064: PUSH
25065: LD_INT 3
25067: ARRAY
25068: STR
25069: PUSH
25070: LD_STRING ,
25072: STR
25073: PUSH
25074: LD_VAR 0 3
25078: PUSH
25079: LD_VAR 0 2
25083: ARRAY
25084: PUSH
25085: LD_INT 4
25087: ARRAY
25088: STR
25089: PUSH
25090: LD_STRING )
25092: STR
25093: PPUSH
25094: CALL_OW 559
25098: GO 25008
25100: POP
25101: POP
// end ; end ;
25102: LD_VAR 0 1
25106: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25107: LD_INT 0
25109: PPUSH
// if HexInfo ( x , y ) = warehouse then
25110: LD_VAR 0 2
25114: PPUSH
25115: LD_VAR 0 3
25119: PPUSH
25120: CALL_OW 428
25124: PUSH
25125: LD_VAR 0 1
25129: EQUAL
25130: IFFALSE 25157
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25132: LD_ADDR_EXP 103
25136: PUSH
25137: LD_EXP 103
25141: PPUSH
25142: LD_VAR 0 1
25146: PPUSH
25147: LD_INT 0
25149: PPUSH
25150: CALL_OW 1
25154: ST_TO_ADDR
25155: GO 25208
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25157: LD_ADDR_EXP 103
25161: PUSH
25162: LD_EXP 103
25166: PPUSH
25167: LD_VAR 0 1
25171: PPUSH
25172: LD_VAR 0 1
25176: PPUSH
25177: CALL_OW 255
25181: PUSH
25182: LD_VAR 0 1
25186: PUSH
25187: LD_VAR 0 2
25191: PUSH
25192: LD_VAR 0 3
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: PPUSH
25203: CALL_OW 1
25207: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25208: CALL 25217 0 0
// end ;
25212: LD_VAR 0 4
25216: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25217: LD_INT 0
25219: PPUSH
25220: PPUSH
25221: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25222: LD_STRING resetWarehouseGatheringPoints();
25224: PPUSH
25225: CALL_OW 559
// if warehouseGatheringPoints then
25229: LD_EXP 103
25233: IFFALSE 25359
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: LD_EXP 103
25244: PPUSH
25245: CALL 71734 0 1
25249: ST_TO_ADDR
// for i := 1 to list do
25250: LD_ADDR_VAR 0 2
25254: PUSH
25255: DOUBLE
25256: LD_INT 1
25258: DEC
25259: ST_TO_ADDR
25260: LD_VAR 0 3
25264: PUSH
25265: FOR_TO
25266: IFFALSE 25357
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25268: LD_STRING setWarehouseGatheringPointXY(
25270: PUSH
25271: LD_VAR 0 3
25275: PUSH
25276: LD_VAR 0 2
25280: ARRAY
25281: PUSH
25282: LD_INT 1
25284: ARRAY
25285: STR
25286: PUSH
25287: LD_STRING ,
25289: STR
25290: PUSH
25291: LD_VAR 0 3
25295: PUSH
25296: LD_VAR 0 2
25300: ARRAY
25301: PUSH
25302: LD_INT 2
25304: ARRAY
25305: STR
25306: PUSH
25307: LD_STRING ,
25309: STR
25310: PUSH
25311: LD_VAR 0 3
25315: PUSH
25316: LD_VAR 0 2
25320: ARRAY
25321: PUSH
25322: LD_INT 3
25324: ARRAY
25325: STR
25326: PUSH
25327: LD_STRING ,
25329: STR
25330: PUSH
25331: LD_VAR 0 3
25335: PUSH
25336: LD_VAR 0 2
25340: ARRAY
25341: PUSH
25342: LD_INT 4
25344: ARRAY
25345: STR
25346: PUSH
25347: LD_STRING )
25349: STR
25350: PPUSH
25351: CALL_OW 559
25355: GO 25265
25357: POP
25358: POP
// end ; end ;
25359: LD_VAR 0 1
25363: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25364: LD_EXP 103
25368: IFFALSE 26053
25370: GO 25372
25372: DISABLE
25373: LD_INT 0
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
// begin enable ;
25384: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_EXP 103
25394: PPUSH
25395: CALL 71734 0 1
25399: ST_TO_ADDR
// if not list then
25400: LD_VAR 0 3
25404: NOT
25405: IFFALSE 25409
// exit ;
25407: GO 26053
// for i := 1 to list do
25409: LD_ADDR_VAR 0 1
25413: PUSH
25414: DOUBLE
25415: LD_INT 1
25417: DEC
25418: ST_TO_ADDR
25419: LD_VAR 0 3
25423: PUSH
25424: FOR_TO
25425: IFFALSE 26051
// begin depot := list [ i ] [ 2 ] ;
25427: LD_ADDR_VAR 0 8
25431: PUSH
25432: LD_VAR 0 3
25436: PUSH
25437: LD_VAR 0 1
25441: ARRAY
25442: PUSH
25443: LD_INT 2
25445: ARRAY
25446: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25447: LD_ADDR_VAR 0 5
25451: PUSH
25452: LD_VAR 0 3
25456: PUSH
25457: LD_VAR 0 1
25461: ARRAY
25462: PUSH
25463: LD_INT 1
25465: ARRAY
25466: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25467: LD_VAR 0 8
25471: PPUSH
25472: CALL_OW 301
25476: PUSH
25477: LD_VAR 0 5
25481: PUSH
25482: LD_VAR 0 8
25486: PPUSH
25487: CALL_OW 255
25491: NONEQUAL
25492: OR
25493: IFFALSE 25522
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25495: LD_ADDR_EXP 103
25499: PUSH
25500: LD_EXP 103
25504: PPUSH
25505: LD_VAR 0 8
25509: PPUSH
25510: LD_INT 0
25512: PPUSH
25513: CALL_OW 1
25517: ST_TO_ADDR
// exit ;
25518: POP
25519: POP
25520: GO 26053
// end ; x := list [ i ] [ 3 ] ;
25522: LD_ADDR_VAR 0 6
25526: PUSH
25527: LD_VAR 0 3
25531: PUSH
25532: LD_VAR 0 1
25536: ARRAY
25537: PUSH
25538: LD_INT 3
25540: ARRAY
25541: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25542: LD_ADDR_VAR 0 7
25546: PUSH
25547: LD_VAR 0 3
25551: PUSH
25552: LD_VAR 0 1
25556: ARRAY
25557: PUSH
25558: LD_INT 4
25560: ARRAY
25561: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25562: LD_ADDR_VAR 0 9
25566: PUSH
25567: LD_VAR 0 6
25571: PPUSH
25572: LD_VAR 0 7
25576: PPUSH
25577: LD_INT 16
25579: PPUSH
25580: CALL 70322 0 3
25584: ST_TO_ADDR
// if not cratesNearbyPoint then
25585: LD_VAR 0 9
25589: NOT
25590: IFFALSE 25596
// exit ;
25592: POP
25593: POP
25594: GO 26053
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25596: LD_ADDR_VAR 0 4
25600: PUSH
25601: LD_INT 22
25603: PUSH
25604: LD_VAR 0 5
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 3
25615: PUSH
25616: LD_INT 60
25618: PUSH
25619: EMPTY
25620: LIST
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 91
25628: PUSH
25629: LD_VAR 0 8
25633: PUSH
25634: LD_INT 6
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: LD_INT 25
25647: PUSH
25648: LD_INT 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 25
25657: PUSH
25658: LD_INT 16
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: PPUSH
25676: CALL_OW 69
25680: PUSH
25681: LD_VAR 0 8
25685: PPUSH
25686: CALL_OW 313
25690: PPUSH
25691: LD_INT 3
25693: PUSH
25694: LD_INT 60
25696: PUSH
25697: EMPTY
25698: LIST
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: LD_INT 25
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 25
25719: PUSH
25720: LD_INT 16
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 72
25740: UNION
25741: ST_TO_ADDR
// if tmp then
25742: LD_VAR 0 4
25746: IFFALSE 25826
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25748: LD_ADDR_VAR 0 4
25752: PUSH
25753: LD_VAR 0 4
25757: PPUSH
25758: LD_INT 3
25760: PPUSH
25761: CALL 68291 0 2
25765: ST_TO_ADDR
// for j in tmp do
25766: LD_ADDR_VAR 0 2
25770: PUSH
25771: LD_VAR 0 4
25775: PUSH
25776: FOR_IN
25777: IFFALSE 25820
// begin if IsInUnit ( j ) then
25779: LD_VAR 0 2
25783: PPUSH
25784: CALL_OW 310
25788: IFFALSE 25799
// ComExit ( j ) ;
25790: LD_VAR 0 2
25794: PPUSH
25795: CALL 68374 0 1
// AddComCollect ( j , x , y ) ;
25799: LD_VAR 0 2
25803: PPUSH
25804: LD_VAR 0 6
25808: PPUSH
25809: LD_VAR 0 7
25813: PPUSH
25814: CALL_OW 177
// end ;
25818: GO 25776
25820: POP
25821: POP
// exit ;
25822: POP
25823: POP
25824: GO 26053
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25826: LD_ADDR_VAR 0 4
25830: PUSH
25831: LD_INT 22
25833: PUSH
25834: LD_VAR 0 5
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 91
25845: PUSH
25846: LD_VAR 0 8
25850: PUSH
25851: LD_INT 8
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 2
25861: PUSH
25862: LD_INT 34
25864: PUSH
25865: LD_INT 12
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 34
25874: PUSH
25875: LD_INT 51
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 34
25884: PUSH
25885: LD_INT 32
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 34
25894: PUSH
25895: LD_INT 89
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: PPUSH
25914: CALL_OW 69
25918: ST_TO_ADDR
// if tmp then
25919: LD_VAR 0 4
25923: IFFALSE 26049
// begin for j in tmp do
25925: LD_ADDR_VAR 0 2
25929: PUSH
25930: LD_VAR 0 4
25934: PUSH
25935: FOR_IN
25936: IFFALSE 26047
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25938: LD_VAR 0 2
25942: PPUSH
25943: CALL_OW 262
25947: PUSH
25948: LD_INT 3
25950: EQUAL
25951: PUSH
25952: LD_VAR 0 2
25956: PPUSH
25957: CALL_OW 261
25961: PUSH
25962: LD_INT 20
25964: GREATER
25965: OR
25966: PUSH
25967: LD_VAR 0 2
25971: PPUSH
25972: CALL_OW 314
25976: NOT
25977: AND
25978: PUSH
25979: LD_VAR 0 2
25983: PPUSH
25984: CALL_OW 263
25988: PUSH
25989: LD_INT 1
25991: NONEQUAL
25992: PUSH
25993: LD_VAR 0 2
25997: PPUSH
25998: CALL_OW 311
26002: OR
26003: AND
26004: IFFALSE 26045
// begin ComCollect ( j , x , y ) ;
26006: LD_VAR 0 2
26010: PPUSH
26011: LD_VAR 0 6
26015: PPUSH
26016: LD_VAR 0 7
26020: PPUSH
26021: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26025: LD_VAR 0 2
26029: PPUSH
26030: LD_VAR 0 8
26034: PPUSH
26035: CALL_OW 172
// exit ;
26039: POP
26040: POP
26041: POP
26042: POP
26043: GO 26053
// end ;
26045: GO 25935
26047: POP
26048: POP
// end ; end ;
26049: GO 25424
26051: POP
26052: POP
// end ; end_of_file
26053: PPOPN 9
26055: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26056: LD_VAR 0 1
26060: PUSH
26061: LD_INT 200
26063: DOUBLE
26064: GREATEREQUAL
26065: IFFALSE 26073
26067: LD_INT 299
26069: DOUBLE
26070: LESSEQUAL
26071: IFTRUE 26075
26073: GO 26107
26075: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26076: LD_VAR 0 1
26080: PPUSH
26081: LD_VAR 0 2
26085: PPUSH
26086: LD_VAR 0 3
26090: PPUSH
26091: LD_VAR 0 4
26095: PPUSH
26096: LD_VAR 0 5
26100: PPUSH
26101: CALL 26595 0 5
26105: GO 26184
26107: LD_INT 300
26109: DOUBLE
26110: GREATEREQUAL
26111: IFFALSE 26119
26113: LD_INT 399
26115: DOUBLE
26116: LESSEQUAL
26117: IFTRUE 26121
26119: GO 26183
26121: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26122: LD_VAR 0 1
26126: PPUSH
26127: LD_VAR 0 2
26131: PPUSH
26132: LD_VAR 0 3
26136: PPUSH
26137: LD_VAR 0 4
26141: PPUSH
26142: LD_VAR 0 5
26146: PPUSH
26147: LD_VAR 0 6
26151: PPUSH
26152: LD_VAR 0 7
26156: PPUSH
26157: LD_VAR 0 8
26161: PPUSH
26162: LD_VAR 0 9
26166: PPUSH
26167: LD_VAR 0 10
26171: PPUSH
26172: LD_VAR 0 11
26176: PPUSH
26177: CALL 22765 0 11
26181: GO 26184
26183: POP
// end ;
26184: PPOPN 11
26186: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26187: LD_VAR 0 1
26191: PPUSH
26192: LD_VAR 0 2
26196: PPUSH
26197: LD_VAR 0 3
26201: PPUSH
26202: LD_VAR 0 4
26206: PPUSH
26207: LD_VAR 0 5
26211: PPUSH
26212: CALL 26331 0 5
// end ; end_of_file
26216: PPOPN 5
26218: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26219: LD_INT 0
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26225: LD_VAR 0 1
26229: PPUSH
26230: CALL_OW 264
26234: PUSH
26235: LD_INT 91
26237: EQUAL
26238: IFFALSE 26310
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26240: LD_INT 68
26242: PPUSH
26243: LD_VAR 0 1
26247: PPUSH
26248: CALL_OW 255
26252: PPUSH
26253: CALL_OW 321
26257: PUSH
26258: LD_INT 2
26260: EQUAL
26261: IFFALSE 26273
// eff := 70 else
26263: LD_ADDR_VAR 0 4
26267: PUSH
26268: LD_INT 70
26270: ST_TO_ADDR
26271: GO 26281
// eff := 30 ;
26273: LD_ADDR_VAR 0 4
26277: PUSH
26278: LD_INT 30
26280: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 250
26290: PPUSH
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 251
26300: PPUSH
26301: LD_VAR 0 4
26305: PPUSH
26306: CALL_OW 495
// end ; end ;
26310: LD_VAR 0 2
26314: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26315: LD_INT 0
26317: PPUSH
// end ;
26318: LD_VAR 0 4
26322: RET
// export function SOS_Command ( cmd ) ; begin
26323: LD_INT 0
26325: PPUSH
// end ;
26326: LD_VAR 0 2
26330: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26331: LD_INT 0
26333: PPUSH
// end ;
26334: LD_VAR 0 6
26338: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26339: LD_INT 0
26341: PPUSH
26342: PPUSH
// if not vehicle or not factory then
26343: LD_VAR 0 1
26347: NOT
26348: PUSH
26349: LD_VAR 0 2
26353: NOT
26354: OR
26355: IFFALSE 26359
// exit ;
26357: GO 26590
// if factoryWaypoints >= factory then
26359: LD_EXP 102
26363: PUSH
26364: LD_VAR 0 2
26368: GREATEREQUAL
26369: IFFALSE 26590
// if factoryWaypoints [ factory ] then
26371: LD_EXP 102
26375: PUSH
26376: LD_VAR 0 2
26380: ARRAY
26381: IFFALSE 26590
// begin if GetControl ( vehicle ) = control_manual then
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 263
26392: PUSH
26393: LD_INT 1
26395: EQUAL
26396: IFFALSE 26477
// begin driver := IsDrivenBy ( vehicle ) ;
26398: LD_ADDR_VAR 0 4
26402: PUSH
26403: LD_VAR 0 1
26407: PPUSH
26408: CALL_OW 311
26412: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26413: LD_VAR 0 4
26417: PPUSH
26418: LD_EXP 102
26422: PUSH
26423: LD_VAR 0 2
26427: ARRAY
26428: PUSH
26429: LD_INT 3
26431: ARRAY
26432: PPUSH
26433: LD_EXP 102
26437: PUSH
26438: LD_VAR 0 2
26442: ARRAY
26443: PUSH
26444: LD_INT 4
26446: ARRAY
26447: PPUSH
26448: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26452: LD_VAR 0 4
26456: PPUSH
26457: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26461: LD_VAR 0 4
26465: PPUSH
26466: LD_VAR 0 2
26470: PPUSH
26471: CALL_OW 180
// end else
26475: GO 26590
// if GetControl ( vehicle ) = control_remote then
26477: LD_VAR 0 1
26481: PPUSH
26482: CALL_OW 263
26486: PUSH
26487: LD_INT 2
26489: EQUAL
26490: IFFALSE 26551
// begin wait ( 0 0$2 ) ;
26492: LD_INT 70
26494: PPUSH
26495: CALL_OW 67
// if Connect ( vehicle ) then
26499: LD_VAR 0 1
26503: PPUSH
26504: CALL 38614 0 1
26508: IFFALSE 26549
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26510: LD_VAR 0 1
26514: PPUSH
26515: LD_EXP 102
26519: PUSH
26520: LD_VAR 0 2
26524: ARRAY
26525: PUSH
26526: LD_INT 3
26528: ARRAY
26529: PPUSH
26530: LD_EXP 102
26534: PUSH
26535: LD_VAR 0 2
26539: ARRAY
26540: PUSH
26541: LD_INT 4
26543: ARRAY
26544: PPUSH
26545: CALL_OW 171
// end else
26549: GO 26590
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26551: LD_VAR 0 1
26555: PPUSH
26556: LD_EXP 102
26560: PUSH
26561: LD_VAR 0 2
26565: ARRAY
26566: PUSH
26567: LD_INT 3
26569: ARRAY
26570: PPUSH
26571: LD_EXP 102
26575: PUSH
26576: LD_VAR 0 2
26580: ARRAY
26581: PUSH
26582: LD_INT 4
26584: ARRAY
26585: PPUSH
26586: CALL_OW 171
// end ; end ;
26590: LD_VAR 0 3
26594: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26595: LD_INT 0
26597: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26598: LD_VAR 0 1
26602: PUSH
26603: LD_INT 250
26605: EQUAL
26606: PUSH
26607: LD_VAR 0 2
26611: PPUSH
26612: CALL_OW 264
26616: PUSH
26617: LD_INT 81
26619: EQUAL
26620: AND
26621: IFFALSE 26642
// MinerPlaceMine ( unit , x , y ) ;
26623: LD_VAR 0 2
26627: PPUSH
26628: LD_VAR 0 4
26632: PPUSH
26633: LD_VAR 0 5
26637: PPUSH
26638: CALL 29027 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26642: LD_VAR 0 1
26646: PUSH
26647: LD_INT 251
26649: EQUAL
26650: PUSH
26651: LD_VAR 0 2
26655: PPUSH
26656: CALL_OW 264
26660: PUSH
26661: LD_INT 81
26663: EQUAL
26664: AND
26665: IFFALSE 26686
// MinerDetonateMine ( unit , x , y ) ;
26667: LD_VAR 0 2
26671: PPUSH
26672: LD_VAR 0 4
26676: PPUSH
26677: LD_VAR 0 5
26681: PPUSH
26682: CALL 29302 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26686: LD_VAR 0 1
26690: PUSH
26691: LD_INT 252
26693: EQUAL
26694: PUSH
26695: LD_VAR 0 2
26699: PPUSH
26700: CALL_OW 264
26704: PUSH
26705: LD_INT 81
26707: EQUAL
26708: AND
26709: IFFALSE 26730
// MinerCreateMinefield ( unit , x , y ) ;
26711: LD_VAR 0 2
26715: PPUSH
26716: LD_VAR 0 4
26720: PPUSH
26721: LD_VAR 0 5
26725: PPUSH
26726: CALL 29719 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26730: LD_VAR 0 1
26734: PUSH
26735: LD_INT 253
26737: EQUAL
26738: PUSH
26739: LD_VAR 0 2
26743: PPUSH
26744: CALL_OW 257
26748: PUSH
26749: LD_INT 5
26751: EQUAL
26752: AND
26753: IFFALSE 26774
// ComBinocular ( unit , x , y ) ;
26755: LD_VAR 0 2
26759: PPUSH
26760: LD_VAR 0 4
26764: PPUSH
26765: LD_VAR 0 5
26769: PPUSH
26770: CALL 30088 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26774: LD_VAR 0 1
26778: PUSH
26779: LD_INT 254
26781: EQUAL
26782: PUSH
26783: LD_VAR 0 2
26787: PPUSH
26788: CALL_OW 264
26792: PUSH
26793: LD_INT 99
26795: EQUAL
26796: AND
26797: PUSH
26798: LD_VAR 0 3
26802: PPUSH
26803: CALL_OW 263
26807: PUSH
26808: LD_INT 3
26810: EQUAL
26811: AND
26812: IFFALSE 26828
// HackDestroyVehicle ( unit , selectedUnit ) ;
26814: LD_VAR 0 2
26818: PPUSH
26819: LD_VAR 0 3
26823: PPUSH
26824: CALL 28391 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26828: LD_VAR 0 1
26832: PUSH
26833: LD_INT 255
26835: EQUAL
26836: PUSH
26837: LD_VAR 0 2
26841: PPUSH
26842: CALL_OW 264
26846: PUSH
26847: LD_INT 14
26849: PUSH
26850: LD_INT 53
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: IN
26857: AND
26858: PUSH
26859: LD_VAR 0 4
26863: PPUSH
26864: LD_VAR 0 5
26868: PPUSH
26869: CALL_OW 488
26873: AND
26874: IFFALSE 26898
// CutTreeXYR ( unit , x , y , 12 ) ;
26876: LD_VAR 0 2
26880: PPUSH
26881: LD_VAR 0 4
26885: PPUSH
26886: LD_VAR 0 5
26890: PPUSH
26891: LD_INT 12
26893: PPUSH
26894: CALL 26961 0 4
// if cmd = 256 then
26898: LD_VAR 0 1
26902: PUSH
26903: LD_INT 256
26905: EQUAL
26906: IFFALSE 26927
// SetFactoryWaypoint ( unit , x , y ) ;
26908: LD_VAR 0 2
26912: PPUSH
26913: LD_VAR 0 4
26917: PPUSH
26918: LD_VAR 0 5
26922: PPUSH
26923: CALL 24745 0 3
// if cmd = 257 then
26927: LD_VAR 0 1
26931: PUSH
26932: LD_INT 257
26934: EQUAL
26935: IFFALSE 26956
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26937: LD_VAR 0 2
26941: PPUSH
26942: LD_VAR 0 4
26946: PPUSH
26947: LD_VAR 0 5
26951: PPUSH
26952: CALL 25107 0 3
// end ;
26956: LD_VAR 0 6
26960: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26961: LD_INT 0
26963: PPUSH
26964: PPUSH
26965: PPUSH
26966: PPUSH
26967: PPUSH
26968: PPUSH
26969: PPUSH
26970: PPUSH
26971: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26972: LD_VAR 0 1
26976: NOT
26977: PUSH
26978: LD_VAR 0 2
26982: PPUSH
26983: LD_VAR 0 3
26987: PPUSH
26988: CALL_OW 488
26992: NOT
26993: OR
26994: PUSH
26995: LD_VAR 0 4
26999: NOT
27000: OR
27001: IFFALSE 27005
// exit ;
27003: GO 27345
// list := [ ] ;
27005: LD_ADDR_VAR 0 13
27009: PUSH
27010: EMPTY
27011: ST_TO_ADDR
// if x - r < 0 then
27012: LD_VAR 0 2
27016: PUSH
27017: LD_VAR 0 4
27021: MINUS
27022: PUSH
27023: LD_INT 0
27025: LESS
27026: IFFALSE 27038
// min_x := 0 else
27028: LD_ADDR_VAR 0 7
27032: PUSH
27033: LD_INT 0
27035: ST_TO_ADDR
27036: GO 27054
// min_x := x - r ;
27038: LD_ADDR_VAR 0 7
27042: PUSH
27043: LD_VAR 0 2
27047: PUSH
27048: LD_VAR 0 4
27052: MINUS
27053: ST_TO_ADDR
// if y - r < 0 then
27054: LD_VAR 0 3
27058: PUSH
27059: LD_VAR 0 4
27063: MINUS
27064: PUSH
27065: LD_INT 0
27067: LESS
27068: IFFALSE 27080
// min_y := 0 else
27070: LD_ADDR_VAR 0 8
27074: PUSH
27075: LD_INT 0
27077: ST_TO_ADDR
27078: GO 27096
// min_y := y - r ;
27080: LD_ADDR_VAR 0 8
27084: PUSH
27085: LD_VAR 0 3
27089: PUSH
27090: LD_VAR 0 4
27094: MINUS
27095: ST_TO_ADDR
// max_x := x + r ;
27096: LD_ADDR_VAR 0 9
27100: PUSH
27101: LD_VAR 0 2
27105: PUSH
27106: LD_VAR 0 4
27110: PLUS
27111: ST_TO_ADDR
// max_y := y + r ;
27112: LD_ADDR_VAR 0 10
27116: PUSH
27117: LD_VAR 0 3
27121: PUSH
27122: LD_VAR 0 4
27126: PLUS
27127: ST_TO_ADDR
// for _x = min_x to max_x do
27128: LD_ADDR_VAR 0 11
27132: PUSH
27133: DOUBLE
27134: LD_VAR 0 7
27138: DEC
27139: ST_TO_ADDR
27140: LD_VAR 0 9
27144: PUSH
27145: FOR_TO
27146: IFFALSE 27263
// for _y = min_y to max_y do
27148: LD_ADDR_VAR 0 12
27152: PUSH
27153: DOUBLE
27154: LD_VAR 0 8
27158: DEC
27159: ST_TO_ADDR
27160: LD_VAR 0 10
27164: PUSH
27165: FOR_TO
27166: IFFALSE 27259
// begin if not ValidHex ( _x , _y ) then
27168: LD_VAR 0 11
27172: PPUSH
27173: LD_VAR 0 12
27177: PPUSH
27178: CALL_OW 488
27182: NOT
27183: IFFALSE 27187
// continue ;
27185: GO 27165
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27187: LD_VAR 0 11
27191: PPUSH
27192: LD_VAR 0 12
27196: PPUSH
27197: CALL_OW 351
27201: PUSH
27202: LD_VAR 0 11
27206: PPUSH
27207: LD_VAR 0 12
27211: PPUSH
27212: CALL_OW 554
27216: AND
27217: IFFALSE 27257
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27219: LD_ADDR_VAR 0 13
27223: PUSH
27224: LD_VAR 0 13
27228: PPUSH
27229: LD_VAR 0 13
27233: PUSH
27234: LD_INT 1
27236: PLUS
27237: PPUSH
27238: LD_VAR 0 11
27242: PUSH
27243: LD_VAR 0 12
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PPUSH
27252: CALL_OW 2
27256: ST_TO_ADDR
// end ;
27257: GO 27165
27259: POP
27260: POP
27261: GO 27145
27263: POP
27264: POP
// if not list then
27265: LD_VAR 0 13
27269: NOT
27270: IFFALSE 27274
// exit ;
27272: GO 27345
// for i in list do
27274: LD_ADDR_VAR 0 6
27278: PUSH
27279: LD_VAR 0 13
27283: PUSH
27284: FOR_IN
27285: IFFALSE 27343
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27287: LD_VAR 0 1
27291: PPUSH
27292: LD_STRING M
27294: PUSH
27295: LD_VAR 0 6
27299: PUSH
27300: LD_INT 1
27302: ARRAY
27303: PUSH
27304: LD_VAR 0 6
27308: PUSH
27309: LD_INT 2
27311: ARRAY
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: PPUSH
27337: CALL_OW 447
27341: GO 27284
27343: POP
27344: POP
// end ;
27345: LD_VAR 0 5
27349: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27350: LD_EXP 105
27354: NOT
27355: IFFALSE 27405
27357: GO 27359
27359: DISABLE
// begin initHack := true ;
27360: LD_ADDR_EXP 105
27364: PUSH
27365: LD_INT 1
27367: ST_TO_ADDR
// hackTanks := [ ] ;
27368: LD_ADDR_EXP 106
27372: PUSH
27373: EMPTY
27374: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27375: LD_ADDR_EXP 107
27379: PUSH
27380: EMPTY
27381: ST_TO_ADDR
// hackLimit := 3 ;
27382: LD_ADDR_EXP 108
27386: PUSH
27387: LD_INT 3
27389: ST_TO_ADDR
// hackDist := 12 ;
27390: LD_ADDR_EXP 109
27394: PUSH
27395: LD_INT 12
27397: ST_TO_ADDR
// hackCounter := [ ] ;
27398: LD_ADDR_EXP 110
27402: PUSH
27403: EMPTY
27404: ST_TO_ADDR
// end ;
27405: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27406: LD_EXP 105
27410: PUSH
27411: LD_INT 34
27413: PUSH
27414: LD_INT 99
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PPUSH
27421: CALL_OW 69
27425: AND
27426: IFFALSE 27679
27428: GO 27430
27430: DISABLE
27431: LD_INT 0
27433: PPUSH
27434: PPUSH
// begin enable ;
27435: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27436: LD_ADDR_VAR 0 1
27440: PUSH
27441: LD_INT 34
27443: PUSH
27444: LD_INT 99
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL_OW 69
27455: PUSH
27456: FOR_IN
27457: IFFALSE 27677
// begin if not i in hackTanks then
27459: LD_VAR 0 1
27463: PUSH
27464: LD_EXP 106
27468: IN
27469: NOT
27470: IFFALSE 27553
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27472: LD_ADDR_EXP 106
27476: PUSH
27477: LD_EXP 106
27481: PPUSH
27482: LD_EXP 106
27486: PUSH
27487: LD_INT 1
27489: PLUS
27490: PPUSH
27491: LD_VAR 0 1
27495: PPUSH
27496: CALL_OW 1
27500: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27501: LD_ADDR_EXP 107
27505: PUSH
27506: LD_EXP 107
27510: PPUSH
27511: LD_EXP 107
27515: PUSH
27516: LD_INT 1
27518: PLUS
27519: PPUSH
27520: EMPTY
27521: PPUSH
27522: CALL_OW 1
27526: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27527: LD_ADDR_EXP 110
27531: PUSH
27532: LD_EXP 110
27536: PPUSH
27537: LD_EXP 110
27541: PUSH
27542: LD_INT 1
27544: PLUS
27545: PPUSH
27546: EMPTY
27547: PPUSH
27548: CALL_OW 1
27552: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 302
27562: NOT
27563: IFFALSE 27576
// begin HackUnlinkAll ( i ) ;
27565: LD_VAR 0 1
27569: PPUSH
27570: CALL 27682 0 1
// continue ;
27574: GO 27456
// end ; HackCheckCapturedStatus ( i ) ;
27576: LD_VAR 0 1
27580: PPUSH
27581: CALL 28125 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27585: LD_ADDR_VAR 0 2
27589: PUSH
27590: LD_INT 81
27592: PUSH
27593: LD_VAR 0 1
27597: PPUSH
27598: CALL_OW 255
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 33
27609: PUSH
27610: LD_INT 3
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 91
27619: PUSH
27620: LD_VAR 0 1
27624: PUSH
27625: LD_EXP 109
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 50
27637: PUSH
27638: EMPTY
27639: LIST
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: PPUSH
27647: CALL_OW 69
27651: ST_TO_ADDR
// if not tmp then
27652: LD_VAR 0 2
27656: NOT
27657: IFFALSE 27661
// continue ;
27659: GO 27456
// HackLink ( i , tmp ) ;
27661: LD_VAR 0 1
27665: PPUSH
27666: LD_VAR 0 2
27670: PPUSH
27671: CALL 27818 0 2
// end ;
27675: GO 27456
27677: POP
27678: POP
// end ;
27679: PPOPN 2
27681: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27682: LD_INT 0
27684: PPUSH
27685: PPUSH
27686: PPUSH
// if not hack in hackTanks then
27687: LD_VAR 0 1
27691: PUSH
27692: LD_EXP 106
27696: IN
27697: NOT
27698: IFFALSE 27702
// exit ;
27700: GO 27813
// index := GetElementIndex ( hackTanks , hack ) ;
27702: LD_ADDR_VAR 0 4
27706: PUSH
27707: LD_EXP 106
27711: PPUSH
27712: LD_VAR 0 1
27716: PPUSH
27717: CALL 35430 0 2
27721: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27722: LD_EXP 107
27726: PUSH
27727: LD_VAR 0 4
27731: ARRAY
27732: IFFALSE 27813
// begin for i in hackTanksCaptured [ index ] do
27734: LD_ADDR_VAR 0 3
27738: PUSH
27739: LD_EXP 107
27743: PUSH
27744: LD_VAR 0 4
27748: ARRAY
27749: PUSH
27750: FOR_IN
27751: IFFALSE 27777
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27753: LD_VAR 0 3
27757: PUSH
27758: LD_INT 1
27760: ARRAY
27761: PPUSH
27762: LD_VAR 0 3
27766: PUSH
27767: LD_INT 2
27769: ARRAY
27770: PPUSH
27771: CALL_OW 235
27775: GO 27750
27777: POP
27778: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27779: LD_ADDR_EXP 107
27783: PUSH
27784: LD_EXP 107
27788: PPUSH
27789: LD_VAR 0 4
27793: PPUSH
27794: EMPTY
27795: PPUSH
27796: CALL_OW 1
27800: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27801: LD_VAR 0 1
27805: PPUSH
27806: LD_INT 0
27808: PPUSH
27809: CALL_OW 505
// end ; end ;
27813: LD_VAR 0 2
27817: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27818: LD_INT 0
27820: PPUSH
27821: PPUSH
27822: PPUSH
// if not hack in hackTanks or not vehicles then
27823: LD_VAR 0 1
27827: PUSH
27828: LD_EXP 106
27832: IN
27833: NOT
27834: PUSH
27835: LD_VAR 0 2
27839: NOT
27840: OR
27841: IFFALSE 27845
// exit ;
27843: GO 28120
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27845: LD_ADDR_VAR 0 2
27849: PUSH
27850: LD_VAR 0 1
27854: PPUSH
27855: LD_VAR 0 2
27859: PPUSH
27860: LD_INT 1
27862: PPUSH
27863: LD_INT 1
27865: PPUSH
27866: CALL 36080 0 4
27870: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27871: LD_ADDR_VAR 0 5
27875: PUSH
27876: LD_EXP 106
27880: PPUSH
27881: LD_VAR 0 1
27885: PPUSH
27886: CALL 35430 0 2
27890: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27891: LD_EXP 107
27895: PUSH
27896: LD_VAR 0 5
27900: ARRAY
27901: PUSH
27902: LD_EXP 108
27906: LESS
27907: IFFALSE 28096
// begin for i := 1 to vehicles do
27909: LD_ADDR_VAR 0 4
27913: PUSH
27914: DOUBLE
27915: LD_INT 1
27917: DEC
27918: ST_TO_ADDR
27919: LD_VAR 0 2
27923: PUSH
27924: FOR_TO
27925: IFFALSE 28094
// begin if hackTanksCaptured [ index ] = hackLimit then
27927: LD_EXP 107
27931: PUSH
27932: LD_VAR 0 5
27936: ARRAY
27937: PUSH
27938: LD_EXP 108
27942: EQUAL
27943: IFFALSE 27947
// break ;
27945: GO 28094
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27947: LD_ADDR_EXP 110
27951: PUSH
27952: LD_EXP 110
27956: PPUSH
27957: LD_VAR 0 5
27961: PPUSH
27962: LD_EXP 110
27966: PUSH
27967: LD_VAR 0 5
27971: ARRAY
27972: PUSH
27973: LD_INT 1
27975: PLUS
27976: PPUSH
27977: CALL_OW 1
27981: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27982: LD_ADDR_EXP 107
27986: PUSH
27987: LD_EXP 107
27991: PPUSH
27992: LD_VAR 0 5
27996: PUSH
27997: LD_EXP 107
28001: PUSH
28002: LD_VAR 0 5
28006: ARRAY
28007: PUSH
28008: LD_INT 1
28010: PLUS
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PPUSH
28016: LD_VAR 0 2
28020: PUSH
28021: LD_VAR 0 4
28025: ARRAY
28026: PUSH
28027: LD_VAR 0 2
28031: PUSH
28032: LD_VAR 0 4
28036: ARRAY
28037: PPUSH
28038: CALL_OW 255
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL 35645 0 3
28051: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28052: LD_VAR 0 2
28056: PUSH
28057: LD_VAR 0 4
28061: ARRAY
28062: PPUSH
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL_OW 255
28072: PPUSH
28073: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28077: LD_VAR 0 2
28081: PUSH
28082: LD_VAR 0 4
28086: ARRAY
28087: PPUSH
28088: CALL_OW 141
// end ;
28092: GO 27924
28094: POP
28095: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28096: LD_VAR 0 1
28100: PPUSH
28101: LD_EXP 107
28105: PUSH
28106: LD_VAR 0 5
28110: ARRAY
28111: PUSH
28112: LD_INT 0
28114: PLUS
28115: PPUSH
28116: CALL_OW 505
// end ;
28120: LD_VAR 0 3
28124: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28125: LD_INT 0
28127: PPUSH
28128: PPUSH
28129: PPUSH
28130: PPUSH
// if not hack in hackTanks then
28131: LD_VAR 0 1
28135: PUSH
28136: LD_EXP 106
28140: IN
28141: NOT
28142: IFFALSE 28146
// exit ;
28144: GO 28386
// index := GetElementIndex ( hackTanks , hack ) ;
28146: LD_ADDR_VAR 0 4
28150: PUSH
28151: LD_EXP 106
28155: PPUSH
28156: LD_VAR 0 1
28160: PPUSH
28161: CALL 35430 0 2
28165: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28166: LD_ADDR_VAR 0 3
28170: PUSH
28171: DOUBLE
28172: LD_EXP 107
28176: PUSH
28177: LD_VAR 0 4
28181: ARRAY
28182: INC
28183: ST_TO_ADDR
28184: LD_INT 1
28186: PUSH
28187: FOR_DOWNTO
28188: IFFALSE 28360
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28190: LD_ADDR_VAR 0 5
28194: PUSH
28195: LD_EXP 107
28199: PUSH
28200: LD_VAR 0 4
28204: ARRAY
28205: PUSH
28206: LD_VAR 0 3
28210: ARRAY
28211: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28212: LD_VAR 0 5
28216: PUSH
28217: LD_INT 1
28219: ARRAY
28220: PPUSH
28221: CALL_OW 302
28225: NOT
28226: PUSH
28227: LD_VAR 0 5
28231: PUSH
28232: LD_INT 1
28234: ARRAY
28235: PPUSH
28236: CALL_OW 255
28240: PUSH
28241: LD_VAR 0 1
28245: PPUSH
28246: CALL_OW 255
28250: NONEQUAL
28251: OR
28252: IFFALSE 28358
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28254: LD_VAR 0 5
28258: PUSH
28259: LD_INT 1
28261: ARRAY
28262: PPUSH
28263: CALL_OW 305
28267: PUSH
28268: LD_VAR 0 5
28272: PUSH
28273: LD_INT 1
28275: ARRAY
28276: PPUSH
28277: CALL_OW 255
28281: PUSH
28282: LD_VAR 0 1
28286: PPUSH
28287: CALL_OW 255
28291: EQUAL
28292: AND
28293: IFFALSE 28317
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28295: LD_VAR 0 5
28299: PUSH
28300: LD_INT 1
28302: ARRAY
28303: PPUSH
28304: LD_VAR 0 5
28308: PUSH
28309: LD_INT 2
28311: ARRAY
28312: PPUSH
28313: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28317: LD_ADDR_EXP 107
28321: PUSH
28322: LD_EXP 107
28326: PPUSH
28327: LD_VAR 0 4
28331: PPUSH
28332: LD_EXP 107
28336: PUSH
28337: LD_VAR 0 4
28341: ARRAY
28342: PPUSH
28343: LD_VAR 0 3
28347: PPUSH
28348: CALL_OW 3
28352: PPUSH
28353: CALL_OW 1
28357: ST_TO_ADDR
// end ; end ;
28358: GO 28187
28360: POP
28361: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28362: LD_VAR 0 1
28366: PPUSH
28367: LD_EXP 107
28371: PUSH
28372: LD_VAR 0 4
28376: ARRAY
28377: PUSH
28378: LD_INT 0
28380: PLUS
28381: PPUSH
28382: CALL_OW 505
// end ;
28386: LD_VAR 0 2
28390: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28391: LD_INT 0
28393: PPUSH
28394: PPUSH
28395: PPUSH
28396: PPUSH
// if not hack in hackTanks then
28397: LD_VAR 0 1
28401: PUSH
28402: LD_EXP 106
28406: IN
28407: NOT
28408: IFFALSE 28412
// exit ;
28410: GO 28497
// index := GetElementIndex ( hackTanks , hack ) ;
28412: LD_ADDR_VAR 0 5
28416: PUSH
28417: LD_EXP 106
28421: PPUSH
28422: LD_VAR 0 1
28426: PPUSH
28427: CALL 35430 0 2
28431: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28432: LD_ADDR_VAR 0 4
28436: PUSH
28437: DOUBLE
28438: LD_INT 1
28440: DEC
28441: ST_TO_ADDR
28442: LD_EXP 107
28446: PUSH
28447: LD_VAR 0 5
28451: ARRAY
28452: PUSH
28453: FOR_TO
28454: IFFALSE 28495
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28456: LD_EXP 107
28460: PUSH
28461: LD_VAR 0 5
28465: ARRAY
28466: PUSH
28467: LD_VAR 0 4
28471: ARRAY
28472: PUSH
28473: LD_INT 1
28475: ARRAY
28476: PUSH
28477: LD_VAR 0 2
28481: EQUAL
28482: IFFALSE 28493
// KillUnit ( vehicle ) ;
28484: LD_VAR 0 2
28488: PPUSH
28489: CALL_OW 66
28493: GO 28453
28495: POP
28496: POP
// end ;
28497: LD_VAR 0 3
28501: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28502: LD_EXP 111
28506: NOT
28507: IFFALSE 28542
28509: GO 28511
28511: DISABLE
// begin initMiner := true ;
28512: LD_ADDR_EXP 111
28516: PUSH
28517: LD_INT 1
28519: ST_TO_ADDR
// minersList := [ ] ;
28520: LD_ADDR_EXP 112
28524: PUSH
28525: EMPTY
28526: ST_TO_ADDR
// minerMinesList := [ ] ;
28527: LD_ADDR_EXP 113
28531: PUSH
28532: EMPTY
28533: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28534: LD_ADDR_EXP 114
28538: PUSH
28539: LD_INT 5
28541: ST_TO_ADDR
// end ;
28542: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28543: LD_EXP 111
28547: PUSH
28548: LD_INT 34
28550: PUSH
28551: LD_INT 81
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PPUSH
28558: CALL_OW 69
28562: AND
28563: IFFALSE 29024
28565: GO 28567
28567: DISABLE
28568: LD_INT 0
28570: PPUSH
28571: PPUSH
28572: PPUSH
28573: PPUSH
// begin enable ;
28574: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28575: LD_ADDR_VAR 0 1
28579: PUSH
28580: LD_INT 34
28582: PUSH
28583: LD_INT 81
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PPUSH
28590: CALL_OW 69
28594: PUSH
28595: FOR_IN
28596: IFFALSE 28668
// begin if not i in minersList then
28598: LD_VAR 0 1
28602: PUSH
28603: LD_EXP 112
28607: IN
28608: NOT
28609: IFFALSE 28666
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28611: LD_ADDR_EXP 112
28615: PUSH
28616: LD_EXP 112
28620: PPUSH
28621: LD_EXP 112
28625: PUSH
28626: LD_INT 1
28628: PLUS
28629: PPUSH
28630: LD_VAR 0 1
28634: PPUSH
28635: CALL_OW 1
28639: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28640: LD_ADDR_EXP 113
28644: PUSH
28645: LD_EXP 113
28649: PPUSH
28650: LD_EXP 113
28654: PUSH
28655: LD_INT 1
28657: PLUS
28658: PPUSH
28659: EMPTY
28660: PPUSH
28661: CALL_OW 1
28665: ST_TO_ADDR
// end end ;
28666: GO 28595
28668: POP
28669: POP
// for i := minerMinesList downto 1 do
28670: LD_ADDR_VAR 0 1
28674: PUSH
28675: DOUBLE
28676: LD_EXP 113
28680: INC
28681: ST_TO_ADDR
28682: LD_INT 1
28684: PUSH
28685: FOR_DOWNTO
28686: IFFALSE 29022
// begin if IsLive ( minersList [ i ] ) then
28688: LD_EXP 112
28692: PUSH
28693: LD_VAR 0 1
28697: ARRAY
28698: PPUSH
28699: CALL_OW 300
28703: IFFALSE 28731
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28705: LD_EXP 112
28709: PUSH
28710: LD_VAR 0 1
28714: ARRAY
28715: PPUSH
28716: LD_EXP 113
28720: PUSH
28721: LD_VAR 0 1
28725: ARRAY
28726: PPUSH
28727: CALL_OW 505
// if not minerMinesList [ i ] then
28731: LD_EXP 113
28735: PUSH
28736: LD_VAR 0 1
28740: ARRAY
28741: NOT
28742: IFFALSE 28746
// continue ;
28744: GO 28685
// for j := minerMinesList [ i ] downto 1 do
28746: LD_ADDR_VAR 0 2
28750: PUSH
28751: DOUBLE
28752: LD_EXP 113
28756: PUSH
28757: LD_VAR 0 1
28761: ARRAY
28762: INC
28763: ST_TO_ADDR
28764: LD_INT 1
28766: PUSH
28767: FOR_DOWNTO
28768: IFFALSE 29018
// begin side := GetSide ( minersList [ i ] ) ;
28770: LD_ADDR_VAR 0 3
28774: PUSH
28775: LD_EXP 112
28779: PUSH
28780: LD_VAR 0 1
28784: ARRAY
28785: PPUSH
28786: CALL_OW 255
28790: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28791: LD_ADDR_VAR 0 4
28795: PUSH
28796: LD_EXP 113
28800: PUSH
28801: LD_VAR 0 1
28805: ARRAY
28806: PUSH
28807: LD_VAR 0 2
28811: ARRAY
28812: PUSH
28813: LD_INT 1
28815: ARRAY
28816: PPUSH
28817: LD_EXP 113
28821: PUSH
28822: LD_VAR 0 1
28826: ARRAY
28827: PUSH
28828: LD_VAR 0 2
28832: ARRAY
28833: PUSH
28834: LD_INT 2
28836: ARRAY
28837: PPUSH
28838: CALL_OW 428
28842: ST_TO_ADDR
// if not tmp then
28843: LD_VAR 0 4
28847: NOT
28848: IFFALSE 28852
// continue ;
28850: GO 28767
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28852: LD_VAR 0 4
28856: PUSH
28857: LD_INT 81
28859: PUSH
28860: LD_VAR 0 3
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PPUSH
28869: CALL_OW 69
28873: IN
28874: PUSH
28875: LD_EXP 113
28879: PUSH
28880: LD_VAR 0 1
28884: ARRAY
28885: PUSH
28886: LD_VAR 0 2
28890: ARRAY
28891: PUSH
28892: LD_INT 1
28894: ARRAY
28895: PPUSH
28896: LD_EXP 113
28900: PUSH
28901: LD_VAR 0 1
28905: ARRAY
28906: PUSH
28907: LD_VAR 0 2
28911: ARRAY
28912: PUSH
28913: LD_INT 2
28915: ARRAY
28916: PPUSH
28917: CALL_OW 458
28921: AND
28922: IFFALSE 29016
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28924: LD_EXP 113
28928: PUSH
28929: LD_VAR 0 1
28933: ARRAY
28934: PUSH
28935: LD_VAR 0 2
28939: ARRAY
28940: PUSH
28941: LD_INT 1
28943: ARRAY
28944: PPUSH
28945: LD_EXP 113
28949: PUSH
28950: LD_VAR 0 1
28954: ARRAY
28955: PUSH
28956: LD_VAR 0 2
28960: ARRAY
28961: PUSH
28962: LD_INT 2
28964: ARRAY
28965: PPUSH
28966: LD_VAR 0 3
28970: PPUSH
28971: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28975: LD_ADDR_EXP 113
28979: PUSH
28980: LD_EXP 113
28984: PPUSH
28985: LD_VAR 0 1
28989: PPUSH
28990: LD_EXP 113
28994: PUSH
28995: LD_VAR 0 1
28999: ARRAY
29000: PPUSH
29001: LD_VAR 0 2
29005: PPUSH
29006: CALL_OW 3
29010: PPUSH
29011: CALL_OW 1
29015: ST_TO_ADDR
// end ; end ;
29016: GO 28767
29018: POP
29019: POP
// end ;
29020: GO 28685
29022: POP
29023: POP
// end ;
29024: PPOPN 4
29026: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29027: LD_INT 0
29029: PPUSH
29030: PPUSH
// result := false ;
29031: LD_ADDR_VAR 0 4
29035: PUSH
29036: LD_INT 0
29038: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29039: LD_VAR 0 1
29043: PPUSH
29044: CALL_OW 264
29048: PUSH
29049: LD_INT 81
29051: EQUAL
29052: NOT
29053: IFFALSE 29057
// exit ;
29055: GO 29297
// index := GetElementIndex ( minersList , unit ) ;
29057: LD_ADDR_VAR 0 5
29061: PUSH
29062: LD_EXP 112
29066: PPUSH
29067: LD_VAR 0 1
29071: PPUSH
29072: CALL 35430 0 2
29076: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29077: LD_EXP 113
29081: PUSH
29082: LD_VAR 0 5
29086: ARRAY
29087: PUSH
29088: LD_EXP 114
29092: GREATEREQUAL
29093: IFFALSE 29097
// exit ;
29095: GO 29297
// ComMoveXY ( unit , x , y ) ;
29097: LD_VAR 0 1
29101: PPUSH
29102: LD_VAR 0 2
29106: PPUSH
29107: LD_VAR 0 3
29111: PPUSH
29112: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29116: LD_INT 35
29118: PPUSH
29119: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29123: LD_VAR 0 1
29127: PPUSH
29128: LD_VAR 0 2
29132: PPUSH
29133: LD_VAR 0 3
29137: PPUSH
29138: CALL 66785 0 3
29142: NOT
29143: PUSH
29144: LD_VAR 0 1
29148: PPUSH
29149: CALL_OW 314
29153: AND
29154: IFFALSE 29158
// exit ;
29156: GO 29297
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29158: LD_VAR 0 2
29162: PPUSH
29163: LD_VAR 0 3
29167: PPUSH
29168: CALL_OW 428
29172: PUSH
29173: LD_VAR 0 1
29177: EQUAL
29178: PUSH
29179: LD_VAR 0 1
29183: PPUSH
29184: CALL_OW 314
29188: NOT
29189: AND
29190: IFFALSE 29116
// PlaySoundXY ( x , y , PlantMine ) ;
29192: LD_VAR 0 2
29196: PPUSH
29197: LD_VAR 0 3
29201: PPUSH
29202: LD_STRING PlantMine
29204: PPUSH
29205: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29209: LD_VAR 0 2
29213: PPUSH
29214: LD_VAR 0 3
29218: PPUSH
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL_OW 255
29228: PPUSH
29229: LD_INT 0
29231: PPUSH
29232: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29236: LD_ADDR_EXP 113
29240: PUSH
29241: LD_EXP 113
29245: PPUSH
29246: LD_VAR 0 5
29250: PUSH
29251: LD_EXP 113
29255: PUSH
29256: LD_VAR 0 5
29260: ARRAY
29261: PUSH
29262: LD_INT 1
29264: PLUS
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PPUSH
29270: LD_VAR 0 2
29274: PUSH
29275: LD_VAR 0 3
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL 35645 0 3
29288: ST_TO_ADDR
// result := true ;
29289: LD_ADDR_VAR 0 4
29293: PUSH
29294: LD_INT 1
29296: ST_TO_ADDR
// end ;
29297: LD_VAR 0 4
29301: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29302: LD_INT 0
29304: PPUSH
29305: PPUSH
29306: PPUSH
// if not unit in minersList then
29307: LD_VAR 0 1
29311: PUSH
29312: LD_EXP 112
29316: IN
29317: NOT
29318: IFFALSE 29322
// exit ;
29320: GO 29714
// index := GetElementIndex ( minersList , unit ) ;
29322: LD_ADDR_VAR 0 6
29326: PUSH
29327: LD_EXP 112
29331: PPUSH
29332: LD_VAR 0 1
29336: PPUSH
29337: CALL 35430 0 2
29341: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29342: LD_ADDR_VAR 0 5
29346: PUSH
29347: DOUBLE
29348: LD_EXP 113
29352: PUSH
29353: LD_VAR 0 6
29357: ARRAY
29358: INC
29359: ST_TO_ADDR
29360: LD_INT 1
29362: PUSH
29363: FOR_DOWNTO
29364: IFFALSE 29525
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29366: LD_EXP 113
29370: PUSH
29371: LD_VAR 0 6
29375: ARRAY
29376: PUSH
29377: LD_VAR 0 5
29381: ARRAY
29382: PUSH
29383: LD_INT 1
29385: ARRAY
29386: PUSH
29387: LD_VAR 0 2
29391: EQUAL
29392: PUSH
29393: LD_EXP 113
29397: PUSH
29398: LD_VAR 0 6
29402: ARRAY
29403: PUSH
29404: LD_VAR 0 5
29408: ARRAY
29409: PUSH
29410: LD_INT 2
29412: ARRAY
29413: PUSH
29414: LD_VAR 0 3
29418: EQUAL
29419: AND
29420: IFFALSE 29523
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29422: LD_EXP 113
29426: PUSH
29427: LD_VAR 0 6
29431: ARRAY
29432: PUSH
29433: LD_VAR 0 5
29437: ARRAY
29438: PUSH
29439: LD_INT 1
29441: ARRAY
29442: PPUSH
29443: LD_EXP 113
29447: PUSH
29448: LD_VAR 0 6
29452: ARRAY
29453: PUSH
29454: LD_VAR 0 5
29458: ARRAY
29459: PUSH
29460: LD_INT 2
29462: ARRAY
29463: PPUSH
29464: LD_VAR 0 1
29468: PPUSH
29469: CALL_OW 255
29473: PPUSH
29474: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29478: LD_ADDR_EXP 113
29482: PUSH
29483: LD_EXP 113
29487: PPUSH
29488: LD_VAR 0 6
29492: PPUSH
29493: LD_EXP 113
29497: PUSH
29498: LD_VAR 0 6
29502: ARRAY
29503: PPUSH
29504: LD_VAR 0 5
29508: PPUSH
29509: CALL_OW 3
29513: PPUSH
29514: CALL_OW 1
29518: ST_TO_ADDR
// exit ;
29519: POP
29520: POP
29521: GO 29714
// end ; end ;
29523: GO 29363
29525: POP
29526: POP
// for i := minerMinesList [ index ] downto 1 do
29527: LD_ADDR_VAR 0 5
29531: PUSH
29532: DOUBLE
29533: LD_EXP 113
29537: PUSH
29538: LD_VAR 0 6
29542: ARRAY
29543: INC
29544: ST_TO_ADDR
29545: LD_INT 1
29547: PUSH
29548: FOR_DOWNTO
29549: IFFALSE 29712
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29551: LD_EXP 113
29555: PUSH
29556: LD_VAR 0 6
29560: ARRAY
29561: PUSH
29562: LD_VAR 0 5
29566: ARRAY
29567: PUSH
29568: LD_INT 1
29570: ARRAY
29571: PPUSH
29572: LD_EXP 113
29576: PUSH
29577: LD_VAR 0 6
29581: ARRAY
29582: PUSH
29583: LD_VAR 0 5
29587: ARRAY
29588: PUSH
29589: LD_INT 2
29591: ARRAY
29592: PPUSH
29593: LD_VAR 0 2
29597: PPUSH
29598: LD_VAR 0 3
29602: PPUSH
29603: CALL_OW 298
29607: PUSH
29608: LD_INT 6
29610: LESS
29611: IFFALSE 29710
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29613: LD_EXP 113
29617: PUSH
29618: LD_VAR 0 6
29622: ARRAY
29623: PUSH
29624: LD_VAR 0 5
29628: ARRAY
29629: PUSH
29630: LD_INT 1
29632: ARRAY
29633: PPUSH
29634: LD_EXP 113
29638: PUSH
29639: LD_VAR 0 6
29643: ARRAY
29644: PUSH
29645: LD_VAR 0 5
29649: ARRAY
29650: PUSH
29651: LD_INT 2
29653: ARRAY
29654: PPUSH
29655: LD_VAR 0 1
29659: PPUSH
29660: CALL_OW 255
29664: PPUSH
29665: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29669: LD_ADDR_EXP 113
29673: PUSH
29674: LD_EXP 113
29678: PPUSH
29679: LD_VAR 0 6
29683: PPUSH
29684: LD_EXP 113
29688: PUSH
29689: LD_VAR 0 6
29693: ARRAY
29694: PPUSH
29695: LD_VAR 0 5
29699: PPUSH
29700: CALL_OW 3
29704: PPUSH
29705: CALL_OW 1
29709: ST_TO_ADDR
// end ; end ;
29710: GO 29548
29712: POP
29713: POP
// end ;
29714: LD_VAR 0 4
29718: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29719: LD_INT 0
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
29728: PPUSH
29729: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29730: LD_VAR 0 1
29734: PPUSH
29735: CALL_OW 264
29739: PUSH
29740: LD_INT 81
29742: EQUAL
29743: NOT
29744: PUSH
29745: LD_VAR 0 1
29749: PUSH
29750: LD_EXP 112
29754: IN
29755: NOT
29756: OR
29757: IFFALSE 29761
// exit ;
29759: GO 30083
// index := GetElementIndex ( minersList , unit ) ;
29761: LD_ADDR_VAR 0 6
29765: PUSH
29766: LD_EXP 112
29770: PPUSH
29771: LD_VAR 0 1
29775: PPUSH
29776: CALL 35430 0 2
29780: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29781: LD_ADDR_VAR 0 8
29785: PUSH
29786: LD_EXP 114
29790: PUSH
29791: LD_EXP 113
29795: PUSH
29796: LD_VAR 0 6
29800: ARRAY
29801: MINUS
29802: ST_TO_ADDR
// if not minesFreeAmount then
29803: LD_VAR 0 8
29807: NOT
29808: IFFALSE 29812
// exit ;
29810: GO 30083
// tmp := [ ] ;
29812: LD_ADDR_VAR 0 7
29816: PUSH
29817: EMPTY
29818: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29819: LD_ADDR_VAR 0 5
29823: PUSH
29824: DOUBLE
29825: LD_INT 1
29827: DEC
29828: ST_TO_ADDR
29829: LD_VAR 0 8
29833: PUSH
29834: FOR_TO
29835: IFFALSE 30030
// begin _d := rand ( 0 , 5 ) ;
29837: LD_ADDR_VAR 0 11
29841: PUSH
29842: LD_INT 0
29844: PPUSH
29845: LD_INT 5
29847: PPUSH
29848: CALL_OW 12
29852: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29853: LD_ADDR_VAR 0 12
29857: PUSH
29858: LD_INT 2
29860: PPUSH
29861: LD_INT 6
29863: PPUSH
29864: CALL_OW 12
29868: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29869: LD_ADDR_VAR 0 9
29873: PUSH
29874: LD_VAR 0 2
29878: PPUSH
29879: LD_VAR 0 11
29883: PPUSH
29884: LD_VAR 0 12
29888: PPUSH
29889: CALL_OW 272
29893: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29894: LD_ADDR_VAR 0 10
29898: PUSH
29899: LD_VAR 0 3
29903: PPUSH
29904: LD_VAR 0 11
29908: PPUSH
29909: LD_VAR 0 12
29913: PPUSH
29914: CALL_OW 273
29918: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29919: LD_VAR 0 9
29923: PPUSH
29924: LD_VAR 0 10
29928: PPUSH
29929: CALL_OW 488
29933: PUSH
29934: LD_VAR 0 9
29938: PUSH
29939: LD_VAR 0 10
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_VAR 0 7
29952: IN
29953: NOT
29954: AND
29955: PUSH
29956: LD_VAR 0 9
29960: PPUSH
29961: LD_VAR 0 10
29965: PPUSH
29966: CALL_OW 458
29970: NOT
29971: AND
29972: IFFALSE 30014
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29974: LD_ADDR_VAR 0 7
29978: PUSH
29979: LD_VAR 0 7
29983: PPUSH
29984: LD_VAR 0 7
29988: PUSH
29989: LD_INT 1
29991: PLUS
29992: PPUSH
29993: LD_VAR 0 9
29997: PUSH
29998: LD_VAR 0 10
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PPUSH
30007: CALL_OW 1
30011: ST_TO_ADDR
30012: GO 30028
// i := i - 1 ;
30014: LD_ADDR_VAR 0 5
30018: PUSH
30019: LD_VAR 0 5
30023: PUSH
30024: LD_INT 1
30026: MINUS
30027: ST_TO_ADDR
// end ;
30028: GO 29834
30030: POP
30031: POP
// for i in tmp do
30032: LD_ADDR_VAR 0 5
30036: PUSH
30037: LD_VAR 0 7
30041: PUSH
30042: FOR_IN
30043: IFFALSE 30081
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30045: LD_VAR 0 1
30049: PPUSH
30050: LD_VAR 0 5
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: LD_VAR 0 5
30063: PUSH
30064: LD_INT 2
30066: ARRAY
30067: PPUSH
30068: CALL 29027 0 3
30072: NOT
30073: IFFALSE 30079
// exit ;
30075: POP
30076: POP
30077: GO 30083
30079: GO 30042
30081: POP
30082: POP
// end ;
30083: LD_VAR 0 4
30087: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30088: LD_INT 0
30090: PPUSH
30091: PPUSH
30092: PPUSH
30093: PPUSH
30094: PPUSH
30095: PPUSH
30096: PPUSH
// if not GetClass ( unit ) = class_sniper then
30097: LD_VAR 0 1
30101: PPUSH
30102: CALL_OW 257
30106: PUSH
30107: LD_INT 5
30109: EQUAL
30110: NOT
30111: IFFALSE 30115
// exit ;
30113: GO 30503
// dist := 8 ;
30115: LD_ADDR_VAR 0 5
30119: PUSH
30120: LD_INT 8
30122: ST_TO_ADDR
// viewRange := 12 ;
30123: LD_ADDR_VAR 0 7
30127: PUSH
30128: LD_INT 12
30130: ST_TO_ADDR
// side := GetSide ( unit ) ;
30131: LD_ADDR_VAR 0 6
30135: PUSH
30136: LD_VAR 0 1
30140: PPUSH
30141: CALL_OW 255
30145: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30146: LD_INT 61
30148: PPUSH
30149: LD_VAR 0 6
30153: PPUSH
30154: CALL_OW 321
30158: PUSH
30159: LD_INT 2
30161: EQUAL
30162: IFFALSE 30172
// viewRange := 16 ;
30164: LD_ADDR_VAR 0 7
30168: PUSH
30169: LD_INT 16
30171: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30172: LD_VAR 0 1
30176: PPUSH
30177: LD_VAR 0 2
30181: PPUSH
30182: LD_VAR 0 3
30186: PPUSH
30187: CALL_OW 297
30191: PUSH
30192: LD_VAR 0 5
30196: GREATER
30197: IFFALSE 30276
// begin ComMoveXY ( unit , x , y ) ;
30199: LD_VAR 0 1
30203: PPUSH
30204: LD_VAR 0 2
30208: PPUSH
30209: LD_VAR 0 3
30213: PPUSH
30214: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30218: LD_INT 35
30220: PPUSH
30221: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30225: LD_VAR 0 1
30229: PPUSH
30230: LD_VAR 0 2
30234: PPUSH
30235: LD_VAR 0 3
30239: PPUSH
30240: CALL 66785 0 3
30244: NOT
30245: IFFALSE 30249
// exit ;
30247: GO 30503
// until GetDistUnitXY ( unit , x , y ) < dist ;
30249: LD_VAR 0 1
30253: PPUSH
30254: LD_VAR 0 2
30258: PPUSH
30259: LD_VAR 0 3
30263: PPUSH
30264: CALL_OW 297
30268: PUSH
30269: LD_VAR 0 5
30273: LESS
30274: IFFALSE 30218
// end ; ComTurnXY ( unit , x , y ) ;
30276: LD_VAR 0 1
30280: PPUSH
30281: LD_VAR 0 2
30285: PPUSH
30286: LD_VAR 0 3
30290: PPUSH
30291: CALL_OW 118
// wait ( 5 ) ;
30295: LD_INT 5
30297: PPUSH
30298: CALL_OW 67
// _d := GetDir ( unit ) ;
30302: LD_ADDR_VAR 0 10
30306: PUSH
30307: LD_VAR 0 1
30311: PPUSH
30312: CALL_OW 254
30316: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30317: LD_ADDR_VAR 0 8
30321: PUSH
30322: LD_VAR 0 1
30326: PPUSH
30327: CALL_OW 250
30331: PPUSH
30332: LD_VAR 0 10
30336: PPUSH
30337: LD_VAR 0 5
30341: PPUSH
30342: CALL_OW 272
30346: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30347: LD_ADDR_VAR 0 9
30351: PUSH
30352: LD_VAR 0 1
30356: PPUSH
30357: CALL_OW 251
30361: PPUSH
30362: LD_VAR 0 10
30366: PPUSH
30367: LD_VAR 0 5
30371: PPUSH
30372: CALL_OW 273
30376: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30377: LD_VAR 0 8
30381: PPUSH
30382: LD_VAR 0 9
30386: PPUSH
30387: CALL_OW 488
30391: NOT
30392: IFFALSE 30396
// exit ;
30394: GO 30503
// ComAnimCustom ( unit , 1 ) ;
30396: LD_VAR 0 1
30400: PPUSH
30401: LD_INT 1
30403: PPUSH
30404: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30408: LD_VAR 0 8
30412: PPUSH
30413: LD_VAR 0 9
30417: PPUSH
30418: LD_VAR 0 6
30422: PPUSH
30423: LD_VAR 0 7
30427: PPUSH
30428: CALL_OW 330
// repeat wait ( 1 ) ;
30432: LD_INT 1
30434: PPUSH
30435: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30439: LD_VAR 0 1
30443: PPUSH
30444: CALL_OW 316
30448: PUSH
30449: LD_VAR 0 1
30453: PPUSH
30454: CALL_OW 314
30458: OR
30459: PUSH
30460: LD_VAR 0 1
30464: PPUSH
30465: CALL_OW 302
30469: NOT
30470: OR
30471: PUSH
30472: LD_VAR 0 1
30476: PPUSH
30477: CALL_OW 301
30481: OR
30482: IFFALSE 30432
// RemoveSeeing ( _x , _y , side ) ;
30484: LD_VAR 0 8
30488: PPUSH
30489: LD_VAR 0 9
30493: PPUSH
30494: LD_VAR 0 6
30498: PPUSH
30499: CALL_OW 331
// end ; end_of_file
30503: LD_VAR 0 4
30507: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30508: LD_INT 0
30510: PPUSH
30511: PPUSH
// if exist_mode then
30512: LD_VAR 0 2
30516: IFFALSE 30541
// unit := CreateCharacter ( prefix & ident ) else
30518: LD_ADDR_VAR 0 5
30522: PUSH
30523: LD_VAR 0 3
30527: PUSH
30528: LD_VAR 0 1
30532: STR
30533: PPUSH
30534: CALL_OW 34
30538: ST_TO_ADDR
30539: GO 30556
// unit := NewCharacter ( ident ) ;
30541: LD_ADDR_VAR 0 5
30545: PUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 25
30555: ST_TO_ADDR
// result := unit ;
30556: LD_ADDR_VAR 0 4
30560: PUSH
30561: LD_VAR 0 5
30565: ST_TO_ADDR
// end ;
30566: LD_VAR 0 4
30570: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30571: LD_INT 0
30573: PPUSH
30574: PPUSH
// if not side or not nation then
30575: LD_VAR 0 1
30579: NOT
30580: PUSH
30581: LD_VAR 0 2
30585: NOT
30586: OR
30587: IFFALSE 30591
// exit ;
30589: GO 31359
// case nation of nation_american :
30591: LD_VAR 0 2
30595: PUSH
30596: LD_INT 1
30598: DOUBLE
30599: EQUAL
30600: IFTRUE 30604
30602: GO 30818
30604: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30605: LD_ADDR_VAR 0 4
30609: PUSH
30610: LD_INT 35
30612: PUSH
30613: LD_INT 45
30615: PUSH
30616: LD_INT 46
30618: PUSH
30619: LD_INT 47
30621: PUSH
30622: LD_INT 82
30624: PUSH
30625: LD_INT 83
30627: PUSH
30628: LD_INT 84
30630: PUSH
30631: LD_INT 85
30633: PUSH
30634: LD_INT 86
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: LD_INT 6
30645: PUSH
30646: LD_INT 15
30648: PUSH
30649: LD_INT 16
30651: PUSH
30652: LD_INT 7
30654: PUSH
30655: LD_INT 12
30657: PUSH
30658: LD_INT 13
30660: PUSH
30661: LD_INT 10
30663: PUSH
30664: LD_INT 14
30666: PUSH
30667: LD_INT 20
30669: PUSH
30670: LD_INT 21
30672: PUSH
30673: LD_INT 22
30675: PUSH
30676: LD_INT 25
30678: PUSH
30679: LD_INT 32
30681: PUSH
30682: LD_INT 27
30684: PUSH
30685: LD_INT 36
30687: PUSH
30688: LD_INT 69
30690: PUSH
30691: LD_INT 39
30693: PUSH
30694: LD_INT 34
30696: PUSH
30697: LD_INT 40
30699: PUSH
30700: LD_INT 48
30702: PUSH
30703: LD_INT 49
30705: PUSH
30706: LD_INT 50
30708: PUSH
30709: LD_INT 51
30711: PUSH
30712: LD_INT 52
30714: PUSH
30715: LD_INT 53
30717: PUSH
30718: LD_INT 54
30720: PUSH
30721: LD_INT 55
30723: PUSH
30724: LD_INT 56
30726: PUSH
30727: LD_INT 57
30729: PUSH
30730: LD_INT 58
30732: PUSH
30733: LD_INT 59
30735: PUSH
30736: LD_INT 60
30738: PUSH
30739: LD_INT 61
30741: PUSH
30742: LD_INT 62
30744: PUSH
30745: LD_INT 80
30747: PUSH
30748: LD_INT 82
30750: PUSH
30751: LD_INT 83
30753: PUSH
30754: LD_INT 84
30756: PUSH
30757: LD_INT 85
30759: PUSH
30760: LD_INT 86
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: ST_TO_ADDR
30816: GO 31283
30818: LD_INT 2
30820: DOUBLE
30821: EQUAL
30822: IFTRUE 30826
30824: GO 31052
30826: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30827: LD_ADDR_VAR 0 4
30831: PUSH
30832: LD_INT 35
30834: PUSH
30835: LD_INT 45
30837: PUSH
30838: LD_INT 46
30840: PUSH
30841: LD_INT 47
30843: PUSH
30844: LD_INT 82
30846: PUSH
30847: LD_INT 83
30849: PUSH
30850: LD_INT 84
30852: PUSH
30853: LD_INT 85
30855: PUSH
30856: LD_INT 87
30858: PUSH
30859: LD_INT 70
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: LD_INT 11
30867: PUSH
30868: LD_INT 3
30870: PUSH
30871: LD_INT 4
30873: PUSH
30874: LD_INT 5
30876: PUSH
30877: LD_INT 6
30879: PUSH
30880: LD_INT 15
30882: PUSH
30883: LD_INT 18
30885: PUSH
30886: LD_INT 7
30888: PUSH
30889: LD_INT 17
30891: PUSH
30892: LD_INT 8
30894: PUSH
30895: LD_INT 20
30897: PUSH
30898: LD_INT 21
30900: PUSH
30901: LD_INT 22
30903: PUSH
30904: LD_INT 72
30906: PUSH
30907: LD_INT 26
30909: PUSH
30910: LD_INT 69
30912: PUSH
30913: LD_INT 39
30915: PUSH
30916: LD_INT 40
30918: PUSH
30919: LD_INT 41
30921: PUSH
30922: LD_INT 42
30924: PUSH
30925: LD_INT 43
30927: PUSH
30928: LD_INT 48
30930: PUSH
30931: LD_INT 49
30933: PUSH
30934: LD_INT 50
30936: PUSH
30937: LD_INT 51
30939: PUSH
30940: LD_INT 52
30942: PUSH
30943: LD_INT 53
30945: PUSH
30946: LD_INT 54
30948: PUSH
30949: LD_INT 55
30951: PUSH
30952: LD_INT 56
30954: PUSH
30955: LD_INT 60
30957: PUSH
30958: LD_INT 61
30960: PUSH
30961: LD_INT 62
30963: PUSH
30964: LD_INT 66
30966: PUSH
30967: LD_INT 67
30969: PUSH
30970: LD_INT 68
30972: PUSH
30973: LD_INT 81
30975: PUSH
30976: LD_INT 82
30978: PUSH
30979: LD_INT 83
30981: PUSH
30982: LD_INT 84
30984: PUSH
30985: LD_INT 85
30987: PUSH
30988: LD_INT 87
30990: PUSH
30991: LD_INT 88
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: ST_TO_ADDR
31050: GO 31283
31052: LD_INT 3
31054: DOUBLE
31055: EQUAL
31056: IFTRUE 31060
31058: GO 31282
31060: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31061: LD_ADDR_VAR 0 4
31065: PUSH
31066: LD_INT 46
31068: PUSH
31069: LD_INT 47
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: LD_INT 82
31080: PUSH
31081: LD_INT 83
31083: PUSH
31084: LD_INT 84
31086: PUSH
31087: LD_INT 85
31089: PUSH
31090: LD_INT 86
31092: PUSH
31093: LD_INT 11
31095: PUSH
31096: LD_INT 9
31098: PUSH
31099: LD_INT 20
31101: PUSH
31102: LD_INT 19
31104: PUSH
31105: LD_INT 21
31107: PUSH
31108: LD_INT 24
31110: PUSH
31111: LD_INT 22
31113: PUSH
31114: LD_INT 25
31116: PUSH
31117: LD_INT 28
31119: PUSH
31120: LD_INT 29
31122: PUSH
31123: LD_INT 30
31125: PUSH
31126: LD_INT 31
31128: PUSH
31129: LD_INT 37
31131: PUSH
31132: LD_INT 38
31134: PUSH
31135: LD_INT 32
31137: PUSH
31138: LD_INT 27
31140: PUSH
31141: LD_INT 33
31143: PUSH
31144: LD_INT 69
31146: PUSH
31147: LD_INT 39
31149: PUSH
31150: LD_INT 34
31152: PUSH
31153: LD_INT 40
31155: PUSH
31156: LD_INT 71
31158: PUSH
31159: LD_INT 23
31161: PUSH
31162: LD_INT 44
31164: PUSH
31165: LD_INT 48
31167: PUSH
31168: LD_INT 49
31170: PUSH
31171: LD_INT 50
31173: PUSH
31174: LD_INT 51
31176: PUSH
31177: LD_INT 52
31179: PUSH
31180: LD_INT 53
31182: PUSH
31183: LD_INT 54
31185: PUSH
31186: LD_INT 55
31188: PUSH
31189: LD_INT 56
31191: PUSH
31192: LD_INT 57
31194: PUSH
31195: LD_INT 58
31197: PUSH
31198: LD_INT 59
31200: PUSH
31201: LD_INT 63
31203: PUSH
31204: LD_INT 64
31206: PUSH
31207: LD_INT 65
31209: PUSH
31210: LD_INT 82
31212: PUSH
31213: LD_INT 83
31215: PUSH
31216: LD_INT 84
31218: PUSH
31219: LD_INT 85
31221: PUSH
31222: LD_INT 86
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: ST_TO_ADDR
31280: GO 31283
31282: POP
// if state > - 1 and state < 3 then
31283: LD_VAR 0 3
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: GREATER
31292: PUSH
31293: LD_VAR 0 3
31297: PUSH
31298: LD_INT 3
31300: LESS
31301: AND
31302: IFFALSE 31359
// for i in result do
31304: LD_ADDR_VAR 0 5
31308: PUSH
31309: LD_VAR 0 4
31313: PUSH
31314: FOR_IN
31315: IFFALSE 31357
// if GetTech ( i , side ) <> state then
31317: LD_VAR 0 5
31321: PPUSH
31322: LD_VAR 0 1
31326: PPUSH
31327: CALL_OW 321
31331: PUSH
31332: LD_VAR 0 3
31336: NONEQUAL
31337: IFFALSE 31355
// result := result diff i ;
31339: LD_ADDR_VAR 0 4
31343: PUSH
31344: LD_VAR 0 4
31348: PUSH
31349: LD_VAR 0 5
31353: DIFF
31354: ST_TO_ADDR
31355: GO 31314
31357: POP
31358: POP
// end ;
31359: LD_VAR 0 4
31363: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31364: LD_INT 0
31366: PPUSH
31367: PPUSH
31368: PPUSH
// result := true ;
31369: LD_ADDR_VAR 0 3
31373: PUSH
31374: LD_INT 1
31376: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31377: LD_ADDR_VAR 0 5
31381: PUSH
31382: LD_VAR 0 2
31386: PPUSH
31387: CALL_OW 480
31391: ST_TO_ADDR
// if not tmp then
31392: LD_VAR 0 5
31396: NOT
31397: IFFALSE 31401
// exit ;
31399: GO 31450
// for i in tmp do
31401: LD_ADDR_VAR 0 4
31405: PUSH
31406: LD_VAR 0 5
31410: PUSH
31411: FOR_IN
31412: IFFALSE 31448
// if GetTech ( i , side ) <> state_researched then
31414: LD_VAR 0 4
31418: PPUSH
31419: LD_VAR 0 1
31423: PPUSH
31424: CALL_OW 321
31428: PUSH
31429: LD_INT 2
31431: NONEQUAL
31432: IFFALSE 31446
// begin result := false ;
31434: LD_ADDR_VAR 0 3
31438: PUSH
31439: LD_INT 0
31441: ST_TO_ADDR
// exit ;
31442: POP
31443: POP
31444: GO 31450
// end ;
31446: GO 31411
31448: POP
31449: POP
// end ;
31450: LD_VAR 0 3
31454: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31455: LD_INT 0
31457: PPUSH
31458: PPUSH
31459: PPUSH
31460: PPUSH
31461: PPUSH
31462: PPUSH
31463: PPUSH
31464: PPUSH
31465: PPUSH
31466: PPUSH
31467: PPUSH
31468: PPUSH
31469: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31470: LD_VAR 0 1
31474: NOT
31475: PUSH
31476: LD_VAR 0 1
31480: PPUSH
31481: CALL_OW 257
31485: PUSH
31486: LD_INT 9
31488: NONEQUAL
31489: OR
31490: IFFALSE 31494
// exit ;
31492: GO 32067
// side := GetSide ( unit ) ;
31494: LD_ADDR_VAR 0 9
31498: PUSH
31499: LD_VAR 0 1
31503: PPUSH
31504: CALL_OW 255
31508: ST_TO_ADDR
// tech_space := tech_spacanom ;
31509: LD_ADDR_VAR 0 12
31513: PUSH
31514: LD_INT 29
31516: ST_TO_ADDR
// tech_time := tech_taurad ;
31517: LD_ADDR_VAR 0 13
31521: PUSH
31522: LD_INT 28
31524: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31525: LD_ADDR_VAR 0 11
31529: PUSH
31530: LD_VAR 0 1
31534: PPUSH
31535: CALL_OW 310
31539: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31540: LD_VAR 0 11
31544: PPUSH
31545: CALL_OW 247
31549: PUSH
31550: LD_INT 2
31552: EQUAL
31553: IFFALSE 31557
// exit ;
31555: GO 32067
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31557: LD_ADDR_VAR 0 8
31561: PUSH
31562: LD_INT 81
31564: PUSH
31565: LD_VAR 0 9
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: PUSH
31577: LD_INT 21
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PPUSH
31595: CALL_OW 69
31599: ST_TO_ADDR
// if not tmp then
31600: LD_VAR 0 8
31604: NOT
31605: IFFALSE 31609
// exit ;
31607: GO 32067
// if in_unit then
31609: LD_VAR 0 11
31613: IFFALSE 31637
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31615: LD_ADDR_VAR 0 10
31619: PUSH
31620: LD_VAR 0 8
31624: PPUSH
31625: LD_VAR 0 11
31629: PPUSH
31630: CALL_OW 74
31634: ST_TO_ADDR
31635: GO 31657
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31637: LD_ADDR_VAR 0 10
31641: PUSH
31642: LD_VAR 0 8
31646: PPUSH
31647: LD_VAR 0 1
31651: PPUSH
31652: CALL_OW 74
31656: ST_TO_ADDR
// if not enemy then
31657: LD_VAR 0 10
31661: NOT
31662: IFFALSE 31666
// exit ;
31664: GO 32067
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31666: LD_VAR 0 11
31670: PUSH
31671: LD_VAR 0 11
31675: PPUSH
31676: LD_VAR 0 10
31680: PPUSH
31681: CALL_OW 296
31685: PUSH
31686: LD_INT 13
31688: GREATER
31689: AND
31690: PUSH
31691: LD_VAR 0 1
31695: PPUSH
31696: LD_VAR 0 10
31700: PPUSH
31701: CALL_OW 296
31705: PUSH
31706: LD_INT 12
31708: GREATER
31709: OR
31710: IFFALSE 31714
// exit ;
31712: GO 32067
// missile := [ 1 ] ;
31714: LD_ADDR_VAR 0 14
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: EMPTY
31723: LIST
31724: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31725: LD_VAR 0 9
31729: PPUSH
31730: LD_VAR 0 12
31734: PPUSH
31735: CALL_OW 325
31739: IFFALSE 31768
// missile := Replace ( missile , missile + 1 , 2 ) ;
31741: LD_ADDR_VAR 0 14
31745: PUSH
31746: LD_VAR 0 14
31750: PPUSH
31751: LD_VAR 0 14
31755: PUSH
31756: LD_INT 1
31758: PLUS
31759: PPUSH
31760: LD_INT 2
31762: PPUSH
31763: CALL_OW 1
31767: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31768: LD_VAR 0 9
31772: PPUSH
31773: LD_VAR 0 13
31777: PPUSH
31778: CALL_OW 325
31782: PUSH
31783: LD_VAR 0 10
31787: PPUSH
31788: CALL_OW 255
31792: PPUSH
31793: LD_VAR 0 13
31797: PPUSH
31798: CALL_OW 325
31802: NOT
31803: AND
31804: IFFALSE 31833
// missile := Replace ( missile , missile + 1 , 3 ) ;
31806: LD_ADDR_VAR 0 14
31810: PUSH
31811: LD_VAR 0 14
31815: PPUSH
31816: LD_VAR 0 14
31820: PUSH
31821: LD_INT 1
31823: PLUS
31824: PPUSH
31825: LD_INT 3
31827: PPUSH
31828: CALL_OW 1
31832: ST_TO_ADDR
// if missile < 2 then
31833: LD_VAR 0 14
31837: PUSH
31838: LD_INT 2
31840: LESS
31841: IFFALSE 31845
// exit ;
31843: GO 32067
// x := GetX ( enemy ) ;
31845: LD_ADDR_VAR 0 4
31849: PUSH
31850: LD_VAR 0 10
31854: PPUSH
31855: CALL_OW 250
31859: ST_TO_ADDR
// y := GetY ( enemy ) ;
31860: LD_ADDR_VAR 0 5
31864: PUSH
31865: LD_VAR 0 10
31869: PPUSH
31870: CALL_OW 251
31874: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31875: LD_ADDR_VAR 0 6
31879: PUSH
31880: LD_VAR 0 4
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PPUSH
31889: LD_INT 1
31891: PPUSH
31892: CALL_OW 12
31896: PLUS
31897: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31898: LD_ADDR_VAR 0 7
31902: PUSH
31903: LD_VAR 0 5
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PPUSH
31912: LD_INT 1
31914: PPUSH
31915: CALL_OW 12
31919: PLUS
31920: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31921: LD_VAR 0 6
31925: PPUSH
31926: LD_VAR 0 7
31930: PPUSH
31931: CALL_OW 488
31935: NOT
31936: IFFALSE 31958
// begin _x := x ;
31938: LD_ADDR_VAR 0 6
31942: PUSH
31943: LD_VAR 0 4
31947: ST_TO_ADDR
// _y := y ;
31948: LD_ADDR_VAR 0 7
31952: PUSH
31953: LD_VAR 0 5
31957: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31958: LD_ADDR_VAR 0 3
31962: PUSH
31963: LD_INT 1
31965: PPUSH
31966: LD_VAR 0 14
31970: PPUSH
31971: CALL_OW 12
31975: ST_TO_ADDR
// case i of 1 :
31976: LD_VAR 0 3
31980: PUSH
31981: LD_INT 1
31983: DOUBLE
31984: EQUAL
31985: IFTRUE 31989
31987: GO 32006
31989: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31990: LD_VAR 0 1
31994: PPUSH
31995: LD_VAR 0 10
31999: PPUSH
32000: CALL_OW 115
32004: GO 32067
32006: LD_INT 2
32008: DOUBLE
32009: EQUAL
32010: IFTRUE 32014
32012: GO 32036
32014: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32015: LD_VAR 0 1
32019: PPUSH
32020: LD_VAR 0 6
32024: PPUSH
32025: LD_VAR 0 7
32029: PPUSH
32030: CALL_OW 153
32034: GO 32067
32036: LD_INT 3
32038: DOUBLE
32039: EQUAL
32040: IFTRUE 32044
32042: GO 32066
32044: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32045: LD_VAR 0 1
32049: PPUSH
32050: LD_VAR 0 6
32054: PPUSH
32055: LD_VAR 0 7
32059: PPUSH
32060: CALL_OW 154
32064: GO 32067
32066: POP
// end ;
32067: LD_VAR 0 2
32071: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32072: LD_INT 0
32074: PPUSH
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
32079: PPUSH
// if not unit or not building then
32080: LD_VAR 0 1
32084: NOT
32085: PUSH
32086: LD_VAR 0 2
32090: NOT
32091: OR
32092: IFFALSE 32096
// exit ;
32094: GO 32254
// x := GetX ( building ) ;
32096: LD_ADDR_VAR 0 5
32100: PUSH
32101: LD_VAR 0 2
32105: PPUSH
32106: CALL_OW 250
32110: ST_TO_ADDR
// y := GetY ( building ) ;
32111: LD_ADDR_VAR 0 6
32115: PUSH
32116: LD_VAR 0 2
32120: PPUSH
32121: CALL_OW 251
32125: ST_TO_ADDR
// for i = 0 to 5 do
32126: LD_ADDR_VAR 0 4
32130: PUSH
32131: DOUBLE
32132: LD_INT 0
32134: DEC
32135: ST_TO_ADDR
32136: LD_INT 5
32138: PUSH
32139: FOR_TO
32140: IFFALSE 32252
// begin _x := ShiftX ( x , i , 3 ) ;
32142: LD_ADDR_VAR 0 7
32146: PUSH
32147: LD_VAR 0 5
32151: PPUSH
32152: LD_VAR 0 4
32156: PPUSH
32157: LD_INT 3
32159: PPUSH
32160: CALL_OW 272
32164: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32165: LD_ADDR_VAR 0 8
32169: PUSH
32170: LD_VAR 0 6
32174: PPUSH
32175: LD_VAR 0 4
32179: PPUSH
32180: LD_INT 3
32182: PPUSH
32183: CALL_OW 273
32187: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32188: LD_VAR 0 7
32192: PPUSH
32193: LD_VAR 0 8
32197: PPUSH
32198: CALL_OW 488
32202: NOT
32203: IFFALSE 32207
// continue ;
32205: GO 32139
// if HexInfo ( _x , _y ) = 0 then
32207: LD_VAR 0 7
32211: PPUSH
32212: LD_VAR 0 8
32216: PPUSH
32217: CALL_OW 428
32221: PUSH
32222: LD_INT 0
32224: EQUAL
32225: IFFALSE 32250
// begin ComMoveXY ( unit , _x , _y ) ;
32227: LD_VAR 0 1
32231: PPUSH
32232: LD_VAR 0 7
32236: PPUSH
32237: LD_VAR 0 8
32241: PPUSH
32242: CALL_OW 111
// exit ;
32246: POP
32247: POP
32248: GO 32254
// end ; end ;
32250: GO 32139
32252: POP
32253: POP
// end ;
32254: LD_VAR 0 3
32258: RET
// export function ScanBase ( side , base_area ) ; begin
32259: LD_INT 0
32261: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32262: LD_ADDR_VAR 0 3
32266: PUSH
32267: LD_VAR 0 2
32271: PPUSH
32272: LD_INT 81
32274: PUSH
32275: LD_VAR 0 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PPUSH
32284: CALL_OW 70
32288: ST_TO_ADDR
// end ;
32289: LD_VAR 0 3
32293: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32294: LD_INT 0
32296: PPUSH
32297: PPUSH
32298: PPUSH
32299: PPUSH
// result := false ;
32300: LD_ADDR_VAR 0 2
32304: PUSH
32305: LD_INT 0
32307: ST_TO_ADDR
// side := GetSide ( unit ) ;
32308: LD_ADDR_VAR 0 3
32312: PUSH
32313: LD_VAR 0 1
32317: PPUSH
32318: CALL_OW 255
32322: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32323: LD_ADDR_VAR 0 4
32327: PUSH
32328: LD_VAR 0 1
32332: PPUSH
32333: CALL_OW 248
32337: ST_TO_ADDR
// case nat of 1 :
32338: LD_VAR 0 4
32342: PUSH
32343: LD_INT 1
32345: DOUBLE
32346: EQUAL
32347: IFTRUE 32351
32349: GO 32362
32351: POP
// tech := tech_lassight ; 2 :
32352: LD_ADDR_VAR 0 5
32356: PUSH
32357: LD_INT 12
32359: ST_TO_ADDR
32360: GO 32401
32362: LD_INT 2
32364: DOUBLE
32365: EQUAL
32366: IFTRUE 32370
32368: GO 32381
32370: POP
// tech := tech_mortar ; 3 :
32371: LD_ADDR_VAR 0 5
32375: PUSH
32376: LD_INT 41
32378: ST_TO_ADDR
32379: GO 32401
32381: LD_INT 3
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32400
32389: POP
// tech := tech_bazooka ; end ;
32390: LD_ADDR_VAR 0 5
32394: PUSH
32395: LD_INT 44
32397: ST_TO_ADDR
32398: GO 32401
32400: POP
// if Researched ( side , tech ) then
32401: LD_VAR 0 3
32405: PPUSH
32406: LD_VAR 0 5
32410: PPUSH
32411: CALL_OW 325
32415: IFFALSE 32442
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32417: LD_ADDR_VAR 0 2
32421: PUSH
32422: LD_INT 5
32424: PUSH
32425: LD_INT 8
32427: PUSH
32428: LD_INT 9
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: PUSH
32436: LD_VAR 0 4
32440: ARRAY
32441: ST_TO_ADDR
// end ;
32442: LD_VAR 0 2
32446: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32447: LD_INT 0
32449: PPUSH
32450: PPUSH
32451: PPUSH
// if not mines then
32452: LD_VAR 0 2
32456: NOT
32457: IFFALSE 32461
// exit ;
32459: GO 32605
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32461: LD_ADDR_VAR 0 5
32465: PUSH
32466: LD_INT 81
32468: PUSH
32469: LD_VAR 0 1
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 3
32480: PUSH
32481: LD_INT 21
32483: PUSH
32484: LD_INT 3
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PPUSH
32499: CALL_OW 69
32503: ST_TO_ADDR
// for i in mines do
32504: LD_ADDR_VAR 0 4
32508: PUSH
32509: LD_VAR 0 2
32513: PUSH
32514: FOR_IN
32515: IFFALSE 32603
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32517: LD_VAR 0 4
32521: PUSH
32522: LD_INT 1
32524: ARRAY
32525: PPUSH
32526: LD_VAR 0 4
32530: PUSH
32531: LD_INT 2
32533: ARRAY
32534: PPUSH
32535: CALL_OW 458
32539: NOT
32540: IFFALSE 32544
// continue ;
32542: GO 32514
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32544: LD_VAR 0 4
32548: PUSH
32549: LD_INT 1
32551: ARRAY
32552: PPUSH
32553: LD_VAR 0 4
32557: PUSH
32558: LD_INT 2
32560: ARRAY
32561: PPUSH
32562: CALL_OW 428
32566: PUSH
32567: LD_VAR 0 5
32571: IN
32572: IFFALSE 32601
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32574: LD_VAR 0 4
32578: PUSH
32579: LD_INT 1
32581: ARRAY
32582: PPUSH
32583: LD_VAR 0 4
32587: PUSH
32588: LD_INT 2
32590: ARRAY
32591: PPUSH
32592: LD_VAR 0 1
32596: PPUSH
32597: CALL_OW 456
// end ;
32601: GO 32514
32603: POP
32604: POP
// end ;
32605: LD_VAR 0 3
32609: RET
// export function Count ( array ) ; var i ; begin
32610: LD_INT 0
32612: PPUSH
32613: PPUSH
// result := 0 ;
32614: LD_ADDR_VAR 0 2
32618: PUSH
32619: LD_INT 0
32621: ST_TO_ADDR
// for i in array do
32622: LD_ADDR_VAR 0 3
32626: PUSH
32627: LD_VAR 0 1
32631: PUSH
32632: FOR_IN
32633: IFFALSE 32657
// if i then
32635: LD_VAR 0 3
32639: IFFALSE 32655
// result := result + 1 ;
32641: LD_ADDR_VAR 0 2
32645: PUSH
32646: LD_VAR 0 2
32650: PUSH
32651: LD_INT 1
32653: PLUS
32654: ST_TO_ADDR
32655: GO 32632
32657: POP
32658: POP
// end ;
32659: LD_VAR 0 2
32663: RET
// export function IsEmpty ( building ) ; begin
32664: LD_INT 0
32666: PPUSH
// if not building then
32667: LD_VAR 0 1
32671: NOT
32672: IFFALSE 32676
// exit ;
32674: GO 32719
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32676: LD_ADDR_VAR 0 2
32680: PUSH
32681: LD_VAR 0 1
32685: PUSH
32686: LD_INT 22
32688: PUSH
32689: LD_VAR 0 1
32693: PPUSH
32694: CALL_OW 255
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 58
32705: PUSH
32706: EMPTY
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PPUSH
32713: CALL_OW 69
32717: IN
32718: ST_TO_ADDR
// end ;
32719: LD_VAR 0 2
32723: RET
// export function IsNotFull ( building ) ; var places ; begin
32724: LD_INT 0
32726: PPUSH
32727: PPUSH
// if not building then
32728: LD_VAR 0 1
32732: NOT
32733: IFFALSE 32737
// exit ;
32735: GO 32908
// result := false ;
32737: LD_ADDR_VAR 0 2
32741: PUSH
32742: LD_INT 0
32744: ST_TO_ADDR
// places := 0 ;
32745: LD_ADDR_VAR 0 3
32749: PUSH
32750: LD_INT 0
32752: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32753: LD_VAR 0 1
32757: PPUSH
32758: CALL_OW 266
32762: PUSH
32763: LD_INT 0
32765: DOUBLE
32766: EQUAL
32767: IFTRUE 32825
32769: LD_INT 1
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32825
32775: LD_INT 6
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32825
32781: LD_INT 7
32783: DOUBLE
32784: EQUAL
32785: IFTRUE 32825
32787: LD_INT 8
32789: DOUBLE
32790: EQUAL
32791: IFTRUE 32825
32793: LD_INT 4
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32825
32799: LD_INT 5
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32825
32805: LD_INT 2
32807: DOUBLE
32808: EQUAL
32809: IFTRUE 32825
32811: LD_INT 3
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32825
32817: LD_INT 35
32819: DOUBLE
32820: EQUAL
32821: IFTRUE 32825
32823: GO 32836
32825: POP
// places := 6 ; b_bunker , b_breastwork :
32826: LD_ADDR_VAR 0 3
32830: PUSH
32831: LD_INT 6
32833: ST_TO_ADDR
32834: GO 32881
32836: LD_INT 32
32838: DOUBLE
32839: EQUAL
32840: IFTRUE 32850
32842: LD_INT 31
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 32861
32850: POP
// places := 1 ; b_control_tower :
32851: LD_ADDR_VAR 0 3
32855: PUSH
32856: LD_INT 1
32858: ST_TO_ADDR
32859: GO 32881
32861: LD_INT 36
32863: DOUBLE
32864: EQUAL
32865: IFTRUE 32869
32867: GO 32880
32869: POP
// places := 3 ; end ;
32870: LD_ADDR_VAR 0 3
32874: PUSH
32875: LD_INT 3
32877: ST_TO_ADDR
32878: GO 32881
32880: POP
// if places then
32881: LD_VAR 0 3
32885: IFFALSE 32908
// result := UnitsInside ( building ) < places ;
32887: LD_ADDR_VAR 0 2
32891: PUSH
32892: LD_VAR 0 1
32896: PPUSH
32897: CALL_OW 313
32901: PUSH
32902: LD_VAR 0 3
32906: LESS
32907: ST_TO_ADDR
// end ;
32908: LD_VAR 0 2
32912: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32913: LD_INT 0
32915: PPUSH
32916: PPUSH
32917: PPUSH
32918: PPUSH
// tmp := [ ] ;
32919: LD_ADDR_VAR 0 3
32923: PUSH
32924: EMPTY
32925: ST_TO_ADDR
// list := [ ] ;
32926: LD_ADDR_VAR 0 5
32930: PUSH
32931: EMPTY
32932: ST_TO_ADDR
// for i = 16 to 25 do
32933: LD_ADDR_VAR 0 4
32937: PUSH
32938: DOUBLE
32939: LD_INT 16
32941: DEC
32942: ST_TO_ADDR
32943: LD_INT 25
32945: PUSH
32946: FOR_TO
32947: IFFALSE 33020
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32949: LD_ADDR_VAR 0 3
32953: PUSH
32954: LD_VAR 0 3
32958: PUSH
32959: LD_INT 22
32961: PUSH
32962: LD_VAR 0 1
32966: PPUSH
32967: CALL_OW 255
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 91
32978: PUSH
32979: LD_VAR 0 1
32983: PUSH
32984: LD_INT 6
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 30
32994: PUSH
32995: LD_VAR 0 4
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: PUSH
33009: EMPTY
33010: LIST
33011: PPUSH
33012: CALL_OW 69
33016: ADD
33017: ST_TO_ADDR
33018: GO 32946
33020: POP
33021: POP
// for i = 1 to tmp do
33022: LD_ADDR_VAR 0 4
33026: PUSH
33027: DOUBLE
33028: LD_INT 1
33030: DEC
33031: ST_TO_ADDR
33032: LD_VAR 0 3
33036: PUSH
33037: FOR_TO
33038: IFFALSE 33126
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33040: LD_ADDR_VAR 0 5
33044: PUSH
33045: LD_VAR 0 5
33049: PUSH
33050: LD_VAR 0 3
33054: PUSH
33055: LD_VAR 0 4
33059: ARRAY
33060: PPUSH
33061: CALL_OW 266
33065: PUSH
33066: LD_VAR 0 3
33070: PUSH
33071: LD_VAR 0 4
33075: ARRAY
33076: PPUSH
33077: CALL_OW 250
33081: PUSH
33082: LD_VAR 0 3
33086: PUSH
33087: LD_VAR 0 4
33091: ARRAY
33092: PPUSH
33093: CALL_OW 251
33097: PUSH
33098: LD_VAR 0 3
33102: PUSH
33103: LD_VAR 0 4
33107: ARRAY
33108: PPUSH
33109: CALL_OW 254
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: PUSH
33120: EMPTY
33121: LIST
33122: ADD
33123: ST_TO_ADDR
33124: GO 33037
33126: POP
33127: POP
// result := list ;
33128: LD_ADDR_VAR 0 2
33132: PUSH
33133: LD_VAR 0 5
33137: ST_TO_ADDR
// end ;
33138: LD_VAR 0 2
33142: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33143: LD_INT 0
33145: PPUSH
33146: PPUSH
33147: PPUSH
33148: PPUSH
33149: PPUSH
33150: PPUSH
33151: PPUSH
// if not factory then
33152: LD_VAR 0 1
33156: NOT
33157: IFFALSE 33161
// exit ;
33159: GO 33754
// if control = control_apeman then
33161: LD_VAR 0 4
33165: PUSH
33166: LD_INT 5
33168: EQUAL
33169: IFFALSE 33278
// begin tmp := UnitsInside ( factory ) ;
33171: LD_ADDR_VAR 0 8
33175: PUSH
33176: LD_VAR 0 1
33180: PPUSH
33181: CALL_OW 313
33185: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33186: LD_VAR 0 8
33190: PPUSH
33191: LD_INT 25
33193: PUSH
33194: LD_INT 12
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PPUSH
33201: CALL_OW 72
33205: NOT
33206: IFFALSE 33216
// control := control_manual ;
33208: LD_ADDR_VAR 0 4
33212: PUSH
33213: LD_INT 1
33215: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33216: LD_ADDR_VAR 0 8
33220: PUSH
33221: LD_VAR 0 1
33225: PPUSH
33226: CALL 32913 0 1
33230: ST_TO_ADDR
// if tmp then
33231: LD_VAR 0 8
33235: IFFALSE 33278
// begin for i in tmp do
33237: LD_ADDR_VAR 0 7
33241: PUSH
33242: LD_VAR 0 8
33246: PUSH
33247: FOR_IN
33248: IFFALSE 33276
// if i [ 1 ] = b_ext_radio then
33250: LD_VAR 0 7
33254: PUSH
33255: LD_INT 1
33257: ARRAY
33258: PUSH
33259: LD_INT 22
33261: EQUAL
33262: IFFALSE 33274
// begin control := control_remote ;
33264: LD_ADDR_VAR 0 4
33268: PUSH
33269: LD_INT 2
33271: ST_TO_ADDR
// break ;
33272: GO 33276
// end ;
33274: GO 33247
33276: POP
33277: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33278: LD_VAR 0 1
33282: PPUSH
33283: LD_VAR 0 2
33287: PPUSH
33288: LD_VAR 0 3
33292: PPUSH
33293: LD_VAR 0 4
33297: PPUSH
33298: LD_VAR 0 5
33302: PPUSH
33303: CALL_OW 448
33307: IFFALSE 33342
// begin result := [ chassis , engine , control , weapon ] ;
33309: LD_ADDR_VAR 0 6
33313: PUSH
33314: LD_VAR 0 2
33318: PUSH
33319: LD_VAR 0 3
33323: PUSH
33324: LD_VAR 0 4
33328: PUSH
33329: LD_VAR 0 5
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: ST_TO_ADDR
// exit ;
33340: GO 33754
// end ; _chassis := AvailableChassisList ( factory ) ;
33342: LD_ADDR_VAR 0 9
33346: PUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 475
33356: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33357: LD_ADDR_VAR 0 11
33361: PUSH
33362: LD_VAR 0 1
33366: PPUSH
33367: CALL_OW 476
33371: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33372: LD_ADDR_VAR 0 12
33376: PUSH
33377: LD_VAR 0 1
33381: PPUSH
33382: CALL_OW 477
33386: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33387: LD_ADDR_VAR 0 10
33391: PUSH
33392: LD_VAR 0 1
33396: PPUSH
33397: CALL_OW 478
33401: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33402: LD_VAR 0 9
33406: NOT
33407: PUSH
33408: LD_VAR 0 11
33412: NOT
33413: OR
33414: PUSH
33415: LD_VAR 0 12
33419: NOT
33420: OR
33421: PUSH
33422: LD_VAR 0 10
33426: NOT
33427: OR
33428: IFFALSE 33463
// begin result := [ chassis , engine , control , weapon ] ;
33430: LD_ADDR_VAR 0 6
33434: PUSH
33435: LD_VAR 0 2
33439: PUSH
33440: LD_VAR 0 3
33444: PUSH
33445: LD_VAR 0 4
33449: PUSH
33450: LD_VAR 0 5
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
// exit ;
33461: GO 33754
// end ; if not chassis in _chassis then
33463: LD_VAR 0 2
33467: PUSH
33468: LD_VAR 0 9
33472: IN
33473: NOT
33474: IFFALSE 33500
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33476: LD_ADDR_VAR 0 2
33480: PUSH
33481: LD_VAR 0 9
33485: PUSH
33486: LD_INT 1
33488: PPUSH
33489: LD_VAR 0 9
33493: PPUSH
33494: CALL_OW 12
33498: ARRAY
33499: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33500: LD_VAR 0 2
33504: PPUSH
33505: LD_VAR 0 3
33509: PPUSH
33510: CALL 33759 0 2
33514: NOT
33515: IFFALSE 33574
// repeat engine := _engine [ 1 ] ;
33517: LD_ADDR_VAR 0 3
33521: PUSH
33522: LD_VAR 0 11
33526: PUSH
33527: LD_INT 1
33529: ARRAY
33530: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33531: LD_ADDR_VAR 0 11
33535: PUSH
33536: LD_VAR 0 11
33540: PPUSH
33541: LD_INT 1
33543: PPUSH
33544: CALL_OW 3
33548: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33549: LD_VAR 0 2
33553: PPUSH
33554: LD_VAR 0 3
33558: PPUSH
33559: CALL 33759 0 2
33563: PUSH
33564: LD_VAR 0 11
33568: PUSH
33569: EMPTY
33570: EQUAL
33571: OR
33572: IFFALSE 33517
// if not control in _control then
33574: LD_VAR 0 4
33578: PUSH
33579: LD_VAR 0 12
33583: IN
33584: NOT
33585: IFFALSE 33611
// control := _control [ rand ( 1 , _control ) ] ;
33587: LD_ADDR_VAR 0 4
33591: PUSH
33592: LD_VAR 0 12
33596: PUSH
33597: LD_INT 1
33599: PPUSH
33600: LD_VAR 0 12
33604: PPUSH
33605: CALL_OW 12
33609: ARRAY
33610: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33611: LD_VAR 0 2
33615: PPUSH
33616: LD_VAR 0 5
33620: PPUSH
33621: CALL 33979 0 2
33625: NOT
33626: IFFALSE 33685
// repeat weapon := _weapon [ 1 ] ;
33628: LD_ADDR_VAR 0 5
33632: PUSH
33633: LD_VAR 0 10
33637: PUSH
33638: LD_INT 1
33640: ARRAY
33641: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33642: LD_ADDR_VAR 0 10
33646: PUSH
33647: LD_VAR 0 10
33651: PPUSH
33652: LD_INT 1
33654: PPUSH
33655: CALL_OW 3
33659: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33660: LD_VAR 0 2
33664: PPUSH
33665: LD_VAR 0 5
33669: PPUSH
33670: CALL 33979 0 2
33674: PUSH
33675: LD_VAR 0 10
33679: PUSH
33680: EMPTY
33681: EQUAL
33682: OR
33683: IFFALSE 33628
// result := [ ] ;
33685: LD_ADDR_VAR 0 6
33689: PUSH
33690: EMPTY
33691: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33692: LD_VAR 0 1
33696: PPUSH
33697: LD_VAR 0 2
33701: PPUSH
33702: LD_VAR 0 3
33706: PPUSH
33707: LD_VAR 0 4
33711: PPUSH
33712: LD_VAR 0 5
33716: PPUSH
33717: CALL_OW 448
33721: IFFALSE 33754
// result := [ chassis , engine , control , weapon ] ;
33723: LD_ADDR_VAR 0 6
33727: PUSH
33728: LD_VAR 0 2
33732: PUSH
33733: LD_VAR 0 3
33737: PUSH
33738: LD_VAR 0 4
33742: PUSH
33743: LD_VAR 0 5
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: ST_TO_ADDR
// end ;
33754: LD_VAR 0 6
33758: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33759: LD_INT 0
33761: PPUSH
// if not chassis or not engine then
33762: LD_VAR 0 1
33766: NOT
33767: PUSH
33768: LD_VAR 0 2
33772: NOT
33773: OR
33774: IFFALSE 33778
// exit ;
33776: GO 33974
// case engine of engine_solar :
33778: LD_VAR 0 2
33782: PUSH
33783: LD_INT 2
33785: DOUBLE
33786: EQUAL
33787: IFTRUE 33791
33789: GO 33829
33791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33792: LD_ADDR_VAR 0 3
33796: PUSH
33797: LD_INT 11
33799: PUSH
33800: LD_INT 12
33802: PUSH
33803: LD_INT 13
33805: PUSH
33806: LD_INT 14
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 2
33814: PUSH
33815: LD_INT 3
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: ST_TO_ADDR
33827: GO 33958
33829: LD_INT 1
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33899
33837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_INT 11
33845: PUSH
33846: LD_INT 12
33848: PUSH
33849: LD_INT 13
33851: PUSH
33852: LD_INT 14
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 3
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: LD_INT 5
33869: PUSH
33870: LD_INT 21
33872: PUSH
33873: LD_INT 23
33875: PUSH
33876: LD_INT 22
33878: PUSH
33879: LD_INT 24
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: ST_TO_ADDR
33897: GO 33958
33899: LD_INT 3
33901: DOUBLE
33902: EQUAL
33903: IFTRUE 33907
33905: GO 33957
33907: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33908: LD_ADDR_VAR 0 3
33912: PUSH
33913: LD_INT 13
33915: PUSH
33916: LD_INT 14
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 3
33924: PUSH
33925: LD_INT 4
33927: PUSH
33928: LD_INT 5
33930: PUSH
33931: LD_INT 21
33933: PUSH
33934: LD_INT 22
33936: PUSH
33937: LD_INT 23
33939: PUSH
33940: LD_INT 24
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: ST_TO_ADDR
33955: GO 33958
33957: POP
// result := ( chassis in result ) ;
33958: LD_ADDR_VAR 0 3
33962: PUSH
33963: LD_VAR 0 1
33967: PUSH
33968: LD_VAR 0 3
33972: IN
33973: ST_TO_ADDR
// end ;
33974: LD_VAR 0 3
33978: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33979: LD_INT 0
33981: PPUSH
// if not chassis or not weapon then
33982: LD_VAR 0 1
33986: NOT
33987: PUSH
33988: LD_VAR 0 2
33992: NOT
33993: OR
33994: IFFALSE 33998
// exit ;
33996: GO 35058
// case weapon of us_machine_gun :
33998: LD_VAR 0 2
34002: PUSH
34003: LD_INT 2
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34041
34011: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34012: LD_ADDR_VAR 0 3
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: LD_INT 4
34028: PUSH
34029: LD_INT 5
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: ST_TO_ADDR
34039: GO 35042
34041: LD_INT 3
34043: DOUBLE
34044: EQUAL
34045: IFTRUE 34049
34047: GO 34079
34049: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34050: LD_ADDR_VAR 0 3
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: LD_INT 3
34063: PUSH
34064: LD_INT 4
34066: PUSH
34067: LD_INT 5
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: ST_TO_ADDR
34077: GO 35042
34079: LD_INT 11
34081: DOUBLE
34082: EQUAL
34083: IFTRUE 34087
34085: GO 34117
34087: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 3
34101: PUSH
34102: LD_INT 4
34104: PUSH
34105: LD_INT 5
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: ST_TO_ADDR
34115: GO 35042
34117: LD_INT 4
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34151
34125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: LD_INT 3
34136: PUSH
34137: LD_INT 4
34139: PUSH
34140: LD_INT 5
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: ST_TO_ADDR
34149: GO 35042
34151: LD_INT 5
34153: DOUBLE
34154: EQUAL
34155: IFTRUE 34159
34157: GO 34185
34159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34160: LD_ADDR_VAR 0 3
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: LD_INT 4
34173: PUSH
34174: LD_INT 5
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: ST_TO_ADDR
34183: GO 35042
34185: LD_INT 9
34187: DOUBLE
34188: EQUAL
34189: IFTRUE 34193
34191: GO 34219
34193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34194: LD_ADDR_VAR 0 3
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: LD_INT 4
34207: PUSH
34208: LD_INT 5
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: ST_TO_ADDR
34217: GO 35042
34219: LD_INT 7
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34227
34225: GO 34253
34227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34228: LD_ADDR_VAR 0 3
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: LD_INT 3
34238: PUSH
34239: LD_INT 4
34241: PUSH
34242: LD_INT 5
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: ST_TO_ADDR
34251: GO 35042
34253: LD_INT 12
34255: DOUBLE
34256: EQUAL
34257: IFTRUE 34261
34259: GO 34287
34261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34262: LD_ADDR_VAR 0 3
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: LD_INT 3
34272: PUSH
34273: LD_INT 4
34275: PUSH
34276: LD_INT 5
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: ST_TO_ADDR
34285: GO 35042
34287: LD_INT 13
34289: DOUBLE
34290: EQUAL
34291: IFTRUE 34295
34293: GO 34321
34295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34296: LD_ADDR_VAR 0 3
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: LD_INT 3
34306: PUSH
34307: LD_INT 4
34309: PUSH
34310: LD_INT 5
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: ST_TO_ADDR
34319: GO 35042
34321: LD_INT 14
34323: DOUBLE
34324: EQUAL
34325: IFTRUE 34329
34327: GO 34347
34329: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34330: LD_ADDR_VAR 0 3
34334: PUSH
34335: LD_INT 4
34337: PUSH
34338: LD_INT 5
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: ST_TO_ADDR
34345: GO 35042
34347: LD_INT 6
34349: DOUBLE
34350: EQUAL
34351: IFTRUE 34355
34353: GO 34373
34355: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34356: LD_ADDR_VAR 0 3
34360: PUSH
34361: LD_INT 4
34363: PUSH
34364: LD_INT 5
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: ST_TO_ADDR
34371: GO 35042
34373: LD_INT 10
34375: DOUBLE
34376: EQUAL
34377: IFTRUE 34381
34379: GO 34399
34381: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34382: LD_ADDR_VAR 0 3
34386: PUSH
34387: LD_INT 4
34389: PUSH
34390: LD_INT 5
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: ST_TO_ADDR
34397: GO 35042
34399: LD_INT 22
34401: DOUBLE
34402: EQUAL
34403: IFTRUE 34407
34405: GO 34433
34407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34408: LD_ADDR_VAR 0 3
34412: PUSH
34413: LD_INT 11
34415: PUSH
34416: LD_INT 12
34418: PUSH
34419: LD_INT 13
34421: PUSH
34422: LD_INT 14
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: ST_TO_ADDR
34431: GO 35042
34433: LD_INT 23
34435: DOUBLE
34436: EQUAL
34437: IFTRUE 34441
34439: GO 34467
34441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_INT 11
34449: PUSH
34450: LD_INT 12
34452: PUSH
34453: LD_INT 13
34455: PUSH
34456: LD_INT 14
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: ST_TO_ADDR
34465: GO 35042
34467: LD_INT 24
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34475
34473: GO 34501
34475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34476: LD_ADDR_VAR 0 3
34480: PUSH
34481: LD_INT 11
34483: PUSH
34484: LD_INT 12
34486: PUSH
34487: LD_INT 13
34489: PUSH
34490: LD_INT 14
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: ST_TO_ADDR
34499: GO 35042
34501: LD_INT 30
34503: DOUBLE
34504: EQUAL
34505: IFTRUE 34509
34507: GO 34535
34509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34510: LD_ADDR_VAR 0 3
34514: PUSH
34515: LD_INT 11
34517: PUSH
34518: LD_INT 12
34520: PUSH
34521: LD_INT 13
34523: PUSH
34524: LD_INT 14
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: ST_TO_ADDR
34533: GO 35042
34535: LD_INT 25
34537: DOUBLE
34538: EQUAL
34539: IFTRUE 34543
34541: GO 34561
34543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34544: LD_ADDR_VAR 0 3
34548: PUSH
34549: LD_INT 13
34551: PUSH
34552: LD_INT 14
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: ST_TO_ADDR
34559: GO 35042
34561: LD_INT 27
34563: DOUBLE
34564: EQUAL
34565: IFTRUE 34569
34567: GO 34587
34569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34570: LD_ADDR_VAR 0 3
34574: PUSH
34575: LD_INT 13
34577: PUSH
34578: LD_INT 14
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: ST_TO_ADDR
34585: GO 35042
34587: LD_INT 92
34589: DOUBLE
34590: EQUAL
34591: IFTRUE 34595
34593: GO 34621
34595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34596: LD_ADDR_VAR 0 3
34600: PUSH
34601: LD_INT 11
34603: PUSH
34604: LD_INT 12
34606: PUSH
34607: LD_INT 13
34609: PUSH
34610: LD_INT 14
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: ST_TO_ADDR
34619: GO 35042
34621: LD_INT 28
34623: DOUBLE
34624: EQUAL
34625: IFTRUE 34629
34627: GO 34647
34629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34630: LD_ADDR_VAR 0 3
34634: PUSH
34635: LD_INT 13
34637: PUSH
34638: LD_INT 14
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: ST_TO_ADDR
34645: GO 35042
34647: LD_INT 29
34649: DOUBLE
34650: EQUAL
34651: IFTRUE 34655
34653: GO 34673
34655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34656: LD_ADDR_VAR 0 3
34660: PUSH
34661: LD_INT 13
34663: PUSH
34664: LD_INT 14
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: ST_TO_ADDR
34671: GO 35042
34673: LD_INT 31
34675: DOUBLE
34676: EQUAL
34677: IFTRUE 34681
34679: GO 34699
34681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34682: LD_ADDR_VAR 0 3
34686: PUSH
34687: LD_INT 13
34689: PUSH
34690: LD_INT 14
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: ST_TO_ADDR
34697: GO 35042
34699: LD_INT 26
34701: DOUBLE
34702: EQUAL
34703: IFTRUE 34707
34705: GO 34725
34707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34708: LD_ADDR_VAR 0 3
34712: PUSH
34713: LD_INT 13
34715: PUSH
34716: LD_INT 14
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: ST_TO_ADDR
34723: GO 35042
34725: LD_INT 42
34727: DOUBLE
34728: EQUAL
34729: IFTRUE 34733
34731: GO 34759
34733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34734: LD_ADDR_VAR 0 3
34738: PUSH
34739: LD_INT 21
34741: PUSH
34742: LD_INT 22
34744: PUSH
34745: LD_INT 23
34747: PUSH
34748: LD_INT 24
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: ST_TO_ADDR
34757: GO 35042
34759: LD_INT 43
34761: DOUBLE
34762: EQUAL
34763: IFTRUE 34767
34765: GO 34793
34767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34768: LD_ADDR_VAR 0 3
34772: PUSH
34773: LD_INT 21
34775: PUSH
34776: LD_INT 22
34778: PUSH
34779: LD_INT 23
34781: PUSH
34782: LD_INT 24
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: ST_TO_ADDR
34791: GO 35042
34793: LD_INT 44
34795: DOUBLE
34796: EQUAL
34797: IFTRUE 34801
34799: GO 34827
34801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34802: LD_ADDR_VAR 0 3
34806: PUSH
34807: LD_INT 21
34809: PUSH
34810: LD_INT 22
34812: PUSH
34813: LD_INT 23
34815: PUSH
34816: LD_INT 24
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: ST_TO_ADDR
34825: GO 35042
34827: LD_INT 45
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34835
34833: GO 34861
34835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34836: LD_ADDR_VAR 0 3
34840: PUSH
34841: LD_INT 21
34843: PUSH
34844: LD_INT 22
34846: PUSH
34847: LD_INT 23
34849: PUSH
34850: LD_INT 24
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: ST_TO_ADDR
34859: GO 35042
34861: LD_INT 49
34863: DOUBLE
34864: EQUAL
34865: IFTRUE 34869
34867: GO 34895
34869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34870: LD_ADDR_VAR 0 3
34874: PUSH
34875: LD_INT 21
34877: PUSH
34878: LD_INT 22
34880: PUSH
34881: LD_INT 23
34883: PUSH
34884: LD_INT 24
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: ST_TO_ADDR
34893: GO 35042
34895: LD_INT 51
34897: DOUBLE
34898: EQUAL
34899: IFTRUE 34903
34901: GO 34929
34903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34904: LD_ADDR_VAR 0 3
34908: PUSH
34909: LD_INT 21
34911: PUSH
34912: LD_INT 22
34914: PUSH
34915: LD_INT 23
34917: PUSH
34918: LD_INT 24
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: ST_TO_ADDR
34927: GO 35042
34929: LD_INT 52
34931: DOUBLE
34932: EQUAL
34933: IFTRUE 34937
34935: GO 34963
34937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34938: LD_ADDR_VAR 0 3
34942: PUSH
34943: LD_INT 21
34945: PUSH
34946: LD_INT 22
34948: PUSH
34949: LD_INT 23
34951: PUSH
34952: LD_INT 24
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: ST_TO_ADDR
34961: GO 35042
34963: LD_INT 53
34965: DOUBLE
34966: EQUAL
34967: IFTRUE 34971
34969: GO 34989
34971: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34972: LD_ADDR_VAR 0 3
34976: PUSH
34977: LD_INT 23
34979: PUSH
34980: LD_INT 24
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: ST_TO_ADDR
34987: GO 35042
34989: LD_INT 46
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35015
34997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34998: LD_ADDR_VAR 0 3
35002: PUSH
35003: LD_INT 23
35005: PUSH
35006: LD_INT 24
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: ST_TO_ADDR
35013: GO 35042
35015: LD_INT 47
35017: DOUBLE
35018: EQUAL
35019: IFTRUE 35023
35021: GO 35041
35023: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35024: LD_ADDR_VAR 0 3
35028: PUSH
35029: LD_INT 23
35031: PUSH
35032: LD_INT 24
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: ST_TO_ADDR
35039: GO 35042
35041: POP
// result := ( chassis in result ) ;
35042: LD_ADDR_VAR 0 3
35046: PUSH
35047: LD_VAR 0 1
35051: PUSH
35052: LD_VAR 0 3
35056: IN
35057: ST_TO_ADDR
// end ;
35058: LD_VAR 0 3
35062: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35063: LD_INT 0
35065: PPUSH
35066: PPUSH
35067: PPUSH
35068: PPUSH
35069: PPUSH
35070: PPUSH
35071: PPUSH
// result := array ;
35072: LD_ADDR_VAR 0 5
35076: PUSH
35077: LD_VAR 0 1
35081: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35082: LD_VAR 0 1
35086: NOT
35087: PUSH
35088: LD_VAR 0 2
35092: NOT
35093: OR
35094: PUSH
35095: LD_VAR 0 3
35099: NOT
35100: OR
35101: PUSH
35102: LD_VAR 0 2
35106: PUSH
35107: LD_VAR 0 1
35111: GREATER
35112: OR
35113: PUSH
35114: LD_VAR 0 3
35118: PUSH
35119: LD_VAR 0 1
35123: GREATER
35124: OR
35125: IFFALSE 35129
// exit ;
35127: GO 35425
// if direction then
35129: LD_VAR 0 4
35133: IFFALSE 35197
// begin d := 1 ;
35135: LD_ADDR_VAR 0 9
35139: PUSH
35140: LD_INT 1
35142: ST_TO_ADDR
// if i_from > i_to then
35143: LD_VAR 0 2
35147: PUSH
35148: LD_VAR 0 3
35152: GREATER
35153: IFFALSE 35179
// length := ( array - i_from ) + i_to else
35155: LD_ADDR_VAR 0 11
35159: PUSH
35160: LD_VAR 0 1
35164: PUSH
35165: LD_VAR 0 2
35169: MINUS
35170: PUSH
35171: LD_VAR 0 3
35175: PLUS
35176: ST_TO_ADDR
35177: GO 35195
// length := i_to - i_from ;
35179: LD_ADDR_VAR 0 11
35183: PUSH
35184: LD_VAR 0 3
35188: PUSH
35189: LD_VAR 0 2
35193: MINUS
35194: ST_TO_ADDR
// end else
35195: GO 35258
// begin d := - 1 ;
35197: LD_ADDR_VAR 0 9
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: ST_TO_ADDR
// if i_from > i_to then
35206: LD_VAR 0 2
35210: PUSH
35211: LD_VAR 0 3
35215: GREATER
35216: IFFALSE 35236
// length := i_from - i_to else
35218: LD_ADDR_VAR 0 11
35222: PUSH
35223: LD_VAR 0 2
35227: PUSH
35228: LD_VAR 0 3
35232: MINUS
35233: ST_TO_ADDR
35234: GO 35258
// length := ( array - i_to ) + i_from ;
35236: LD_ADDR_VAR 0 11
35240: PUSH
35241: LD_VAR 0 1
35245: PUSH
35246: LD_VAR 0 3
35250: MINUS
35251: PUSH
35252: LD_VAR 0 2
35256: PLUS
35257: ST_TO_ADDR
// end ; if not length then
35258: LD_VAR 0 11
35262: NOT
35263: IFFALSE 35267
// exit ;
35265: GO 35425
// tmp := array ;
35267: LD_ADDR_VAR 0 10
35271: PUSH
35272: LD_VAR 0 1
35276: ST_TO_ADDR
// for i = 1 to length do
35277: LD_ADDR_VAR 0 6
35281: PUSH
35282: DOUBLE
35283: LD_INT 1
35285: DEC
35286: ST_TO_ADDR
35287: LD_VAR 0 11
35291: PUSH
35292: FOR_TO
35293: IFFALSE 35413
// begin for j = 1 to array do
35295: LD_ADDR_VAR 0 7
35299: PUSH
35300: DOUBLE
35301: LD_INT 1
35303: DEC
35304: ST_TO_ADDR
35305: LD_VAR 0 1
35309: PUSH
35310: FOR_TO
35311: IFFALSE 35399
// begin k := j + d ;
35313: LD_ADDR_VAR 0 8
35317: PUSH
35318: LD_VAR 0 7
35322: PUSH
35323: LD_VAR 0 9
35327: PLUS
35328: ST_TO_ADDR
// if k > array then
35329: LD_VAR 0 8
35333: PUSH
35334: LD_VAR 0 1
35338: GREATER
35339: IFFALSE 35349
// k := 1 ;
35341: LD_ADDR_VAR 0 8
35345: PUSH
35346: LD_INT 1
35348: ST_TO_ADDR
// if not k then
35349: LD_VAR 0 8
35353: NOT
35354: IFFALSE 35366
// k := array ;
35356: LD_ADDR_VAR 0 8
35360: PUSH
35361: LD_VAR 0 1
35365: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35366: LD_ADDR_VAR 0 10
35370: PUSH
35371: LD_VAR 0 10
35375: PPUSH
35376: LD_VAR 0 8
35380: PPUSH
35381: LD_VAR 0 1
35385: PUSH
35386: LD_VAR 0 7
35390: ARRAY
35391: PPUSH
35392: CALL_OW 1
35396: ST_TO_ADDR
// end ;
35397: GO 35310
35399: POP
35400: POP
// array := tmp ;
35401: LD_ADDR_VAR 0 1
35405: PUSH
35406: LD_VAR 0 10
35410: ST_TO_ADDR
// end ;
35411: GO 35292
35413: POP
35414: POP
// result := array ;
35415: LD_ADDR_VAR 0 5
35419: PUSH
35420: LD_VAR 0 1
35424: ST_TO_ADDR
// end ;
35425: LD_VAR 0 5
35429: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35430: LD_INT 0
35432: PPUSH
35433: PPUSH
// result := 0 ;
35434: LD_ADDR_VAR 0 3
35438: PUSH
35439: LD_INT 0
35441: ST_TO_ADDR
// if not array or not value in array then
35442: LD_VAR 0 1
35446: NOT
35447: PUSH
35448: LD_VAR 0 2
35452: PUSH
35453: LD_VAR 0 1
35457: IN
35458: NOT
35459: OR
35460: IFFALSE 35464
// exit ;
35462: GO 35518
// for i = 1 to array do
35464: LD_ADDR_VAR 0 4
35468: PUSH
35469: DOUBLE
35470: LD_INT 1
35472: DEC
35473: ST_TO_ADDR
35474: LD_VAR 0 1
35478: PUSH
35479: FOR_TO
35480: IFFALSE 35516
// if value = array [ i ] then
35482: LD_VAR 0 2
35486: PUSH
35487: LD_VAR 0 1
35491: PUSH
35492: LD_VAR 0 4
35496: ARRAY
35497: EQUAL
35498: IFFALSE 35514
// begin result := i ;
35500: LD_ADDR_VAR 0 3
35504: PUSH
35505: LD_VAR 0 4
35509: ST_TO_ADDR
// exit ;
35510: POP
35511: POP
35512: GO 35518
// end ;
35514: GO 35479
35516: POP
35517: POP
// end ;
35518: LD_VAR 0 3
35522: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35523: LD_INT 0
35525: PPUSH
// vc_chassis := chassis ;
35526: LD_ADDR_OWVAR 37
35530: PUSH
35531: LD_VAR 0 1
35535: ST_TO_ADDR
// vc_engine := engine ;
35536: LD_ADDR_OWVAR 39
35540: PUSH
35541: LD_VAR 0 2
35545: ST_TO_ADDR
// vc_control := control ;
35546: LD_ADDR_OWVAR 38
35550: PUSH
35551: LD_VAR 0 3
35555: ST_TO_ADDR
// vc_weapon := weapon ;
35556: LD_ADDR_OWVAR 40
35560: PUSH
35561: LD_VAR 0 4
35565: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35566: LD_ADDR_OWVAR 41
35570: PUSH
35571: LD_VAR 0 5
35575: ST_TO_ADDR
// end ;
35576: LD_VAR 0 6
35580: RET
// export function WantPlant ( unit ) ; var task ; begin
35581: LD_INT 0
35583: PPUSH
35584: PPUSH
// result := false ;
35585: LD_ADDR_VAR 0 2
35589: PUSH
35590: LD_INT 0
35592: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35593: LD_ADDR_VAR 0 3
35597: PUSH
35598: LD_VAR 0 1
35602: PPUSH
35603: CALL_OW 437
35607: ST_TO_ADDR
// if task then
35608: LD_VAR 0 3
35612: IFFALSE 35640
// if task [ 1 ] [ 1 ] = p then
35614: LD_VAR 0 3
35618: PUSH
35619: LD_INT 1
35621: ARRAY
35622: PUSH
35623: LD_INT 1
35625: ARRAY
35626: PUSH
35627: LD_STRING p
35629: EQUAL
35630: IFFALSE 35640
// result := true ;
35632: LD_ADDR_VAR 0 2
35636: PUSH
35637: LD_INT 1
35639: ST_TO_ADDR
// end ;
35640: LD_VAR 0 2
35644: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35645: LD_INT 0
35647: PPUSH
35648: PPUSH
35649: PPUSH
35650: PPUSH
// if pos < 1 then
35651: LD_VAR 0 2
35655: PUSH
35656: LD_INT 1
35658: LESS
35659: IFFALSE 35663
// exit ;
35661: GO 35966
// if pos = 1 then
35663: LD_VAR 0 2
35667: PUSH
35668: LD_INT 1
35670: EQUAL
35671: IFFALSE 35704
// result := Replace ( arr , pos [ 1 ] , value ) else
35673: LD_ADDR_VAR 0 4
35677: PUSH
35678: LD_VAR 0 1
35682: PPUSH
35683: LD_VAR 0 2
35687: PUSH
35688: LD_INT 1
35690: ARRAY
35691: PPUSH
35692: LD_VAR 0 3
35696: PPUSH
35697: CALL_OW 1
35701: ST_TO_ADDR
35702: GO 35966
// begin tmp := arr ;
35704: LD_ADDR_VAR 0 6
35708: PUSH
35709: LD_VAR 0 1
35713: ST_TO_ADDR
// s_arr := [ tmp ] ;
35714: LD_ADDR_VAR 0 7
35718: PUSH
35719: LD_VAR 0 6
35723: PUSH
35724: EMPTY
35725: LIST
35726: ST_TO_ADDR
// for i = 1 to pos - 1 do
35727: LD_ADDR_VAR 0 5
35731: PUSH
35732: DOUBLE
35733: LD_INT 1
35735: DEC
35736: ST_TO_ADDR
35737: LD_VAR 0 2
35741: PUSH
35742: LD_INT 1
35744: MINUS
35745: PUSH
35746: FOR_TO
35747: IFFALSE 35792
// begin tmp := tmp [ pos [ i ] ] ;
35749: LD_ADDR_VAR 0 6
35753: PUSH
35754: LD_VAR 0 6
35758: PUSH
35759: LD_VAR 0 2
35763: PUSH
35764: LD_VAR 0 5
35768: ARRAY
35769: ARRAY
35770: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35771: LD_ADDR_VAR 0 7
35775: PUSH
35776: LD_VAR 0 7
35780: PUSH
35781: LD_VAR 0 6
35785: PUSH
35786: EMPTY
35787: LIST
35788: ADD
35789: ST_TO_ADDR
// end ;
35790: GO 35746
35792: POP
35793: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35794: LD_ADDR_VAR 0 6
35798: PUSH
35799: LD_VAR 0 6
35803: PPUSH
35804: LD_VAR 0 2
35808: PUSH
35809: LD_VAR 0 2
35813: ARRAY
35814: PPUSH
35815: LD_VAR 0 3
35819: PPUSH
35820: CALL_OW 1
35824: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35825: LD_ADDR_VAR 0 7
35829: PUSH
35830: LD_VAR 0 7
35834: PPUSH
35835: LD_VAR 0 7
35839: PPUSH
35840: LD_VAR 0 6
35844: PPUSH
35845: CALL_OW 1
35849: ST_TO_ADDR
// for i = s_arr downto 2 do
35850: LD_ADDR_VAR 0 5
35854: PUSH
35855: DOUBLE
35856: LD_VAR 0 7
35860: INC
35861: ST_TO_ADDR
35862: LD_INT 2
35864: PUSH
35865: FOR_DOWNTO
35866: IFFALSE 35950
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35868: LD_ADDR_VAR 0 6
35872: PUSH
35873: LD_VAR 0 7
35877: PUSH
35878: LD_VAR 0 5
35882: PUSH
35883: LD_INT 1
35885: MINUS
35886: ARRAY
35887: PPUSH
35888: LD_VAR 0 2
35892: PUSH
35893: LD_VAR 0 5
35897: PUSH
35898: LD_INT 1
35900: MINUS
35901: ARRAY
35902: PPUSH
35903: LD_VAR 0 7
35907: PUSH
35908: LD_VAR 0 5
35912: ARRAY
35913: PPUSH
35914: CALL_OW 1
35918: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35919: LD_ADDR_VAR 0 7
35923: PUSH
35924: LD_VAR 0 7
35928: PPUSH
35929: LD_VAR 0 5
35933: PUSH
35934: LD_INT 1
35936: MINUS
35937: PPUSH
35938: LD_VAR 0 6
35942: PPUSH
35943: CALL_OW 1
35947: ST_TO_ADDR
// end ;
35948: GO 35865
35950: POP
35951: POP
// result := s_arr [ 1 ] ;
35952: LD_ADDR_VAR 0 4
35956: PUSH
35957: LD_VAR 0 7
35961: PUSH
35962: LD_INT 1
35964: ARRAY
35965: ST_TO_ADDR
// end ; end ;
35966: LD_VAR 0 4
35970: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35971: LD_INT 0
35973: PPUSH
35974: PPUSH
// if not list then
35975: LD_VAR 0 1
35979: NOT
35980: IFFALSE 35984
// exit ;
35982: GO 36075
// i := list [ pos1 ] ;
35984: LD_ADDR_VAR 0 5
35988: PUSH
35989: LD_VAR 0 1
35993: PUSH
35994: LD_VAR 0 2
35998: ARRAY
35999: ST_TO_ADDR
// if not i then
36000: LD_VAR 0 5
36004: NOT
36005: IFFALSE 36009
// exit ;
36007: GO 36075
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36009: LD_ADDR_VAR 0 1
36013: PUSH
36014: LD_VAR 0 1
36018: PPUSH
36019: LD_VAR 0 2
36023: PPUSH
36024: LD_VAR 0 1
36028: PUSH
36029: LD_VAR 0 3
36033: ARRAY
36034: PPUSH
36035: CALL_OW 1
36039: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36040: LD_ADDR_VAR 0 1
36044: PUSH
36045: LD_VAR 0 1
36049: PPUSH
36050: LD_VAR 0 3
36054: PPUSH
36055: LD_VAR 0 5
36059: PPUSH
36060: CALL_OW 1
36064: ST_TO_ADDR
// result := list ;
36065: LD_ADDR_VAR 0 4
36069: PUSH
36070: LD_VAR 0 1
36074: ST_TO_ADDR
// end ;
36075: LD_VAR 0 4
36079: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36080: LD_INT 0
36082: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36083: LD_ADDR_VAR 0 5
36087: PUSH
36088: LD_VAR 0 1
36092: PPUSH
36093: CALL_OW 250
36097: PPUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: CALL_OW 251
36107: PPUSH
36108: LD_VAR 0 2
36112: PPUSH
36113: LD_VAR 0 3
36117: PPUSH
36118: LD_VAR 0 4
36122: PPUSH
36123: CALL 36133 0 5
36127: ST_TO_ADDR
// end ;
36128: LD_VAR 0 5
36132: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36133: LD_INT 0
36135: PPUSH
36136: PPUSH
36137: PPUSH
36138: PPUSH
// if not list then
36139: LD_VAR 0 3
36143: NOT
36144: IFFALSE 36148
// exit ;
36146: GO 36536
// result := [ ] ;
36148: LD_ADDR_VAR 0 6
36152: PUSH
36153: EMPTY
36154: ST_TO_ADDR
// for i in list do
36155: LD_ADDR_VAR 0 7
36159: PUSH
36160: LD_VAR 0 3
36164: PUSH
36165: FOR_IN
36166: IFFALSE 36368
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36168: LD_ADDR_VAR 0 9
36172: PUSH
36173: LD_VAR 0 7
36177: PPUSH
36178: LD_VAR 0 1
36182: PPUSH
36183: LD_VAR 0 2
36187: PPUSH
36188: CALL_OW 297
36192: ST_TO_ADDR
// if not result then
36193: LD_VAR 0 6
36197: NOT
36198: IFFALSE 36224
// result := [ [ i , tmp ] ] else
36200: LD_ADDR_VAR 0 6
36204: PUSH
36205: LD_VAR 0 7
36209: PUSH
36210: LD_VAR 0 9
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: EMPTY
36220: LIST
36221: ST_TO_ADDR
36222: GO 36366
// begin if result [ result ] [ 2 ] < tmp then
36224: LD_VAR 0 6
36228: PUSH
36229: LD_VAR 0 6
36233: ARRAY
36234: PUSH
36235: LD_INT 2
36237: ARRAY
36238: PUSH
36239: LD_VAR 0 9
36243: LESS
36244: IFFALSE 36286
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36246: LD_ADDR_VAR 0 6
36250: PUSH
36251: LD_VAR 0 6
36255: PPUSH
36256: LD_VAR 0 6
36260: PUSH
36261: LD_INT 1
36263: PLUS
36264: PPUSH
36265: LD_VAR 0 7
36269: PUSH
36270: LD_VAR 0 9
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PPUSH
36279: CALL_OW 2
36283: ST_TO_ADDR
36284: GO 36366
// for j = 1 to result do
36286: LD_ADDR_VAR 0 8
36290: PUSH
36291: DOUBLE
36292: LD_INT 1
36294: DEC
36295: ST_TO_ADDR
36296: LD_VAR 0 6
36300: PUSH
36301: FOR_TO
36302: IFFALSE 36364
// begin if tmp < result [ j ] [ 2 ] then
36304: LD_VAR 0 9
36308: PUSH
36309: LD_VAR 0 6
36313: PUSH
36314: LD_VAR 0 8
36318: ARRAY
36319: PUSH
36320: LD_INT 2
36322: ARRAY
36323: LESS
36324: IFFALSE 36362
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36326: LD_ADDR_VAR 0 6
36330: PUSH
36331: LD_VAR 0 6
36335: PPUSH
36336: LD_VAR 0 8
36340: PPUSH
36341: LD_VAR 0 7
36345: PUSH
36346: LD_VAR 0 9
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PPUSH
36355: CALL_OW 2
36359: ST_TO_ADDR
// break ;
36360: GO 36364
// end ; end ;
36362: GO 36301
36364: POP
36365: POP
// end ; end ;
36366: GO 36165
36368: POP
36369: POP
// if result and not asc then
36370: LD_VAR 0 6
36374: PUSH
36375: LD_VAR 0 4
36379: NOT
36380: AND
36381: IFFALSE 36456
// begin tmp := result ;
36383: LD_ADDR_VAR 0 9
36387: PUSH
36388: LD_VAR 0 6
36392: ST_TO_ADDR
// for i = tmp downto 1 do
36393: LD_ADDR_VAR 0 7
36397: PUSH
36398: DOUBLE
36399: LD_VAR 0 9
36403: INC
36404: ST_TO_ADDR
36405: LD_INT 1
36407: PUSH
36408: FOR_DOWNTO
36409: IFFALSE 36454
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36411: LD_ADDR_VAR 0 6
36415: PUSH
36416: LD_VAR 0 6
36420: PPUSH
36421: LD_VAR 0 9
36425: PUSH
36426: LD_VAR 0 7
36430: MINUS
36431: PUSH
36432: LD_INT 1
36434: PLUS
36435: PPUSH
36436: LD_VAR 0 9
36440: PUSH
36441: LD_VAR 0 7
36445: ARRAY
36446: PPUSH
36447: CALL_OW 1
36451: ST_TO_ADDR
36452: GO 36408
36454: POP
36455: POP
// end ; tmp := [ ] ;
36456: LD_ADDR_VAR 0 9
36460: PUSH
36461: EMPTY
36462: ST_TO_ADDR
// if mode then
36463: LD_VAR 0 5
36467: IFFALSE 36536
// begin for i = 1 to result do
36469: LD_ADDR_VAR 0 7
36473: PUSH
36474: DOUBLE
36475: LD_INT 1
36477: DEC
36478: ST_TO_ADDR
36479: LD_VAR 0 6
36483: PUSH
36484: FOR_TO
36485: IFFALSE 36524
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36487: LD_ADDR_VAR 0 9
36491: PUSH
36492: LD_VAR 0 9
36496: PPUSH
36497: LD_VAR 0 7
36501: PPUSH
36502: LD_VAR 0 6
36506: PUSH
36507: LD_VAR 0 7
36511: ARRAY
36512: PUSH
36513: LD_INT 1
36515: ARRAY
36516: PPUSH
36517: CALL_OW 1
36521: ST_TO_ADDR
36522: GO 36484
36524: POP
36525: POP
// result := tmp ;
36526: LD_ADDR_VAR 0 6
36530: PUSH
36531: LD_VAR 0 9
36535: ST_TO_ADDR
// end ; end ;
36536: LD_VAR 0 6
36540: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36541: LD_INT 0
36543: PPUSH
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
36548: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36549: LD_ADDR_VAR 0 5
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: EMPTY
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
// if not x or not y then
36571: LD_VAR 0 2
36575: NOT
36576: PUSH
36577: LD_VAR 0 3
36581: NOT
36582: OR
36583: IFFALSE 36587
// exit ;
36585: GO 38237
// if not range then
36587: LD_VAR 0 4
36591: NOT
36592: IFFALSE 36602
// range := 10 ;
36594: LD_ADDR_VAR 0 4
36598: PUSH
36599: LD_INT 10
36601: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36602: LD_ADDR_VAR 0 8
36606: PUSH
36607: LD_INT 81
36609: PUSH
36610: LD_VAR 0 1
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 92
36621: PUSH
36622: LD_VAR 0 2
36626: PUSH
36627: LD_VAR 0 3
36631: PUSH
36632: LD_VAR 0 4
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 3
36645: PUSH
36646: LD_INT 21
36648: PUSH
36649: LD_INT 3
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: LIST
36664: PPUSH
36665: CALL_OW 69
36669: ST_TO_ADDR
// if not tmp then
36670: LD_VAR 0 8
36674: NOT
36675: IFFALSE 36679
// exit ;
36677: GO 38237
// for i in tmp do
36679: LD_ADDR_VAR 0 6
36683: PUSH
36684: LD_VAR 0 8
36688: PUSH
36689: FOR_IN
36690: IFFALSE 38212
// begin points := [ 0 , 0 , 0 ] ;
36692: LD_ADDR_VAR 0 9
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: LIST
36710: ST_TO_ADDR
// bpoints := 1 ;
36711: LD_ADDR_VAR 0 10
36715: PUSH
36716: LD_INT 1
36718: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36719: LD_VAR 0 6
36723: PPUSH
36724: CALL_OW 247
36728: PUSH
36729: LD_INT 1
36731: DOUBLE
36732: EQUAL
36733: IFTRUE 36737
36735: GO 37315
36737: POP
// begin if GetClass ( i ) = 1 then
36738: LD_VAR 0 6
36742: PPUSH
36743: CALL_OW 257
36747: PUSH
36748: LD_INT 1
36750: EQUAL
36751: IFFALSE 36772
// points := [ 10 , 5 , 3 ] ;
36753: LD_ADDR_VAR 0 9
36757: PUSH
36758: LD_INT 10
36760: PUSH
36761: LD_INT 5
36763: PUSH
36764: LD_INT 3
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36772: LD_VAR 0 6
36776: PPUSH
36777: CALL_OW 257
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: LD_INT 3
36787: PUSH
36788: LD_INT 4
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: IN
36796: IFFALSE 36817
// points := [ 3 , 2 , 1 ] ;
36798: LD_ADDR_VAR 0 9
36802: PUSH
36803: LD_INT 3
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36817: LD_VAR 0 6
36821: PPUSH
36822: CALL_OW 257
36826: PUSH
36827: LD_INT 5
36829: EQUAL
36830: IFFALSE 36851
// points := [ 130 , 5 , 2 ] ;
36832: LD_ADDR_VAR 0 9
36836: PUSH
36837: LD_INT 130
36839: PUSH
36840: LD_INT 5
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: LIST
36850: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36851: LD_VAR 0 6
36855: PPUSH
36856: CALL_OW 257
36860: PUSH
36861: LD_INT 8
36863: EQUAL
36864: IFFALSE 36885
// points := [ 35 , 35 , 30 ] ;
36866: LD_ADDR_VAR 0 9
36870: PUSH
36871: LD_INT 35
36873: PUSH
36874: LD_INT 35
36876: PUSH
36877: LD_INT 30
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36885: LD_VAR 0 6
36889: PPUSH
36890: CALL_OW 257
36894: PUSH
36895: LD_INT 9
36897: EQUAL
36898: IFFALSE 36919
// points := [ 20 , 55 , 40 ] ;
36900: LD_ADDR_VAR 0 9
36904: PUSH
36905: LD_INT 20
36907: PUSH
36908: LD_INT 55
36910: PUSH
36911: LD_INT 40
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36919: LD_VAR 0 6
36923: PPUSH
36924: CALL_OW 257
36928: PUSH
36929: LD_INT 12
36931: PUSH
36932: LD_INT 16
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: IN
36939: IFFALSE 36960
// points := [ 5 , 3 , 2 ] ;
36941: LD_ADDR_VAR 0 9
36945: PUSH
36946: LD_INT 5
36948: PUSH
36949: LD_INT 3
36951: PUSH
36952: LD_INT 2
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: LIST
36959: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36960: LD_VAR 0 6
36964: PPUSH
36965: CALL_OW 257
36969: PUSH
36970: LD_INT 17
36972: EQUAL
36973: IFFALSE 36994
// points := [ 100 , 50 , 75 ] ;
36975: LD_ADDR_VAR 0 9
36979: PUSH
36980: LD_INT 100
36982: PUSH
36983: LD_INT 50
36985: PUSH
36986: LD_INT 75
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36994: LD_VAR 0 6
36998: PPUSH
36999: CALL_OW 257
37003: PUSH
37004: LD_INT 15
37006: EQUAL
37007: IFFALSE 37028
// points := [ 10 , 5 , 3 ] ;
37009: LD_ADDR_VAR 0 9
37013: PUSH
37014: LD_INT 10
37016: PUSH
37017: LD_INT 5
37019: PUSH
37020: LD_INT 3
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37028: LD_VAR 0 6
37032: PPUSH
37033: CALL_OW 257
37037: PUSH
37038: LD_INT 14
37040: EQUAL
37041: IFFALSE 37062
// points := [ 10 , 0 , 0 ] ;
37043: LD_ADDR_VAR 0 9
37047: PUSH
37048: LD_INT 10
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37062: LD_VAR 0 6
37066: PPUSH
37067: CALL_OW 257
37071: PUSH
37072: LD_INT 11
37074: EQUAL
37075: IFFALSE 37096
// points := [ 30 , 10 , 5 ] ;
37077: LD_ADDR_VAR 0 9
37081: PUSH
37082: LD_INT 30
37084: PUSH
37085: LD_INT 10
37087: PUSH
37088: LD_INT 5
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37096: LD_VAR 0 1
37100: PPUSH
37101: LD_INT 5
37103: PPUSH
37104: CALL_OW 321
37108: PUSH
37109: LD_INT 2
37111: EQUAL
37112: IFFALSE 37129
// bpoints := bpoints * 1.8 ;
37114: LD_ADDR_VAR 0 10
37118: PUSH
37119: LD_VAR 0 10
37123: PUSH
37124: LD_REAL  1.80000000000000E+0000
37127: MUL
37128: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37129: LD_VAR 0 6
37133: PPUSH
37134: CALL_OW 257
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 3
37147: PUSH
37148: LD_INT 4
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: IN
37157: PUSH
37158: LD_VAR 0 1
37162: PPUSH
37163: LD_INT 51
37165: PPUSH
37166: CALL_OW 321
37170: PUSH
37171: LD_INT 2
37173: EQUAL
37174: AND
37175: IFFALSE 37192
// bpoints := bpoints * 1.2 ;
37177: LD_ADDR_VAR 0 10
37181: PUSH
37182: LD_VAR 0 10
37186: PUSH
37187: LD_REAL  1.20000000000000E+0000
37190: MUL
37191: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37192: LD_VAR 0 6
37196: PPUSH
37197: CALL_OW 257
37201: PUSH
37202: LD_INT 5
37204: PUSH
37205: LD_INT 7
37207: PUSH
37208: LD_INT 9
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: LIST
37215: IN
37216: PUSH
37217: LD_VAR 0 1
37221: PPUSH
37222: LD_INT 52
37224: PPUSH
37225: CALL_OW 321
37229: PUSH
37230: LD_INT 2
37232: EQUAL
37233: AND
37234: IFFALSE 37251
// bpoints := bpoints * 1.5 ;
37236: LD_ADDR_VAR 0 10
37240: PUSH
37241: LD_VAR 0 10
37245: PUSH
37246: LD_REAL  1.50000000000000E+0000
37249: MUL
37250: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37251: LD_VAR 0 1
37255: PPUSH
37256: LD_INT 66
37258: PPUSH
37259: CALL_OW 321
37263: PUSH
37264: LD_INT 2
37266: EQUAL
37267: IFFALSE 37284
// bpoints := bpoints * 1.1 ;
37269: LD_ADDR_VAR 0 10
37273: PUSH
37274: LD_VAR 0 10
37278: PUSH
37279: LD_REAL  1.10000000000000E+0000
37282: MUL
37283: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37284: LD_ADDR_VAR 0 10
37288: PUSH
37289: LD_VAR 0 10
37293: PUSH
37294: LD_VAR 0 6
37298: PPUSH
37299: LD_INT 1
37301: PPUSH
37302: CALL_OW 259
37306: PUSH
37307: LD_REAL  1.15000000000000E+0000
37310: MUL
37311: MUL
37312: ST_TO_ADDR
// end ; unit_vehicle :
37313: GO 38141
37315: LD_INT 2
37317: DOUBLE
37318: EQUAL
37319: IFTRUE 37323
37321: GO 38129
37323: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37324: LD_VAR 0 6
37328: PPUSH
37329: CALL_OW 264
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: LD_INT 42
37339: PUSH
37340: LD_INT 24
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: IN
37348: IFFALSE 37369
// points := [ 25 , 5 , 3 ] ;
37350: LD_ADDR_VAR 0 9
37354: PUSH
37355: LD_INT 25
37357: PUSH
37358: LD_INT 5
37360: PUSH
37361: LD_INT 3
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37369: LD_VAR 0 6
37373: PPUSH
37374: CALL_OW 264
37378: PUSH
37379: LD_INT 4
37381: PUSH
37382: LD_INT 43
37384: PUSH
37385: LD_INT 25
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: IN
37393: IFFALSE 37414
// points := [ 40 , 15 , 5 ] ;
37395: LD_ADDR_VAR 0 9
37399: PUSH
37400: LD_INT 40
37402: PUSH
37403: LD_INT 15
37405: PUSH
37406: LD_INT 5
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37414: LD_VAR 0 6
37418: PPUSH
37419: CALL_OW 264
37423: PUSH
37424: LD_INT 3
37426: PUSH
37427: LD_INT 23
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: IN
37434: IFFALSE 37455
// points := [ 7 , 25 , 8 ] ;
37436: LD_ADDR_VAR 0 9
37440: PUSH
37441: LD_INT 7
37443: PUSH
37444: LD_INT 25
37446: PUSH
37447: LD_INT 8
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: LIST
37454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37455: LD_VAR 0 6
37459: PPUSH
37460: CALL_OW 264
37464: PUSH
37465: LD_INT 5
37467: PUSH
37468: LD_INT 27
37470: PUSH
37471: LD_INT 44
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: IN
37479: IFFALSE 37500
// points := [ 14 , 50 , 16 ] ;
37481: LD_ADDR_VAR 0 9
37485: PUSH
37486: LD_INT 14
37488: PUSH
37489: LD_INT 50
37491: PUSH
37492: LD_INT 16
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37500: LD_VAR 0 6
37504: PPUSH
37505: CALL_OW 264
37509: PUSH
37510: LD_INT 6
37512: PUSH
37513: LD_INT 46
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: IN
37520: IFFALSE 37541
// points := [ 32 , 120 , 70 ] ;
37522: LD_ADDR_VAR 0 9
37526: PUSH
37527: LD_INT 32
37529: PUSH
37530: LD_INT 120
37532: PUSH
37533: LD_INT 70
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37541: LD_VAR 0 6
37545: PPUSH
37546: CALL_OW 264
37550: PUSH
37551: LD_INT 7
37553: PUSH
37554: LD_INT 28
37556: PUSH
37557: LD_INT 45
37559: PUSH
37560: LD_INT 92
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: IN
37569: IFFALSE 37590
// points := [ 35 , 20 , 45 ] ;
37571: LD_ADDR_VAR 0 9
37575: PUSH
37576: LD_INT 35
37578: PUSH
37579: LD_INT 20
37581: PUSH
37582: LD_INT 45
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37590: LD_VAR 0 6
37594: PPUSH
37595: CALL_OW 264
37599: PUSH
37600: LD_INT 47
37602: PUSH
37603: EMPTY
37604: LIST
37605: IN
37606: IFFALSE 37627
// points := [ 67 , 45 , 75 ] ;
37608: LD_ADDR_VAR 0 9
37612: PUSH
37613: LD_INT 67
37615: PUSH
37616: LD_INT 45
37618: PUSH
37619: LD_INT 75
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37627: LD_VAR 0 6
37631: PPUSH
37632: CALL_OW 264
37636: PUSH
37637: LD_INT 26
37639: PUSH
37640: EMPTY
37641: LIST
37642: IN
37643: IFFALSE 37664
// points := [ 120 , 30 , 80 ] ;
37645: LD_ADDR_VAR 0 9
37649: PUSH
37650: LD_INT 120
37652: PUSH
37653: LD_INT 30
37655: PUSH
37656: LD_INT 80
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37664: LD_VAR 0 6
37668: PPUSH
37669: CALL_OW 264
37673: PUSH
37674: LD_INT 22
37676: PUSH
37677: EMPTY
37678: LIST
37679: IN
37680: IFFALSE 37701
// points := [ 40 , 1 , 1 ] ;
37682: LD_ADDR_VAR 0 9
37686: PUSH
37687: LD_INT 40
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37701: LD_VAR 0 6
37705: PPUSH
37706: CALL_OW 264
37710: PUSH
37711: LD_INT 29
37713: PUSH
37714: EMPTY
37715: LIST
37716: IN
37717: IFFALSE 37738
// points := [ 70 , 200 , 400 ] ;
37719: LD_ADDR_VAR 0 9
37723: PUSH
37724: LD_INT 70
37726: PUSH
37727: LD_INT 200
37729: PUSH
37730: LD_INT 400
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37738: LD_VAR 0 6
37742: PPUSH
37743: CALL_OW 264
37747: PUSH
37748: LD_INT 14
37750: PUSH
37751: LD_INT 53
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: IN
37758: IFFALSE 37779
// points := [ 40 , 10 , 20 ] ;
37760: LD_ADDR_VAR 0 9
37764: PUSH
37765: LD_INT 40
37767: PUSH
37768: LD_INT 10
37770: PUSH
37771: LD_INT 20
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37779: LD_VAR 0 6
37783: PPUSH
37784: CALL_OW 264
37788: PUSH
37789: LD_INT 9
37791: PUSH
37792: EMPTY
37793: LIST
37794: IN
37795: IFFALSE 37816
// points := [ 5 , 70 , 20 ] ;
37797: LD_ADDR_VAR 0 9
37801: PUSH
37802: LD_INT 5
37804: PUSH
37805: LD_INT 70
37807: PUSH
37808: LD_INT 20
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37816: LD_VAR 0 6
37820: PPUSH
37821: CALL_OW 264
37825: PUSH
37826: LD_INT 10
37828: PUSH
37829: EMPTY
37830: LIST
37831: IN
37832: IFFALSE 37853
// points := [ 35 , 110 , 70 ] ;
37834: LD_ADDR_VAR 0 9
37838: PUSH
37839: LD_INT 35
37841: PUSH
37842: LD_INT 110
37844: PUSH
37845: LD_INT 70
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37853: LD_VAR 0 6
37857: PPUSH
37858: CALL_OW 265
37862: PUSH
37863: LD_INT 25
37865: EQUAL
37866: IFFALSE 37887
// points := [ 80 , 65 , 100 ] ;
37868: LD_ADDR_VAR 0 9
37872: PUSH
37873: LD_INT 80
37875: PUSH
37876: LD_INT 65
37878: PUSH
37879: LD_INT 100
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37887: LD_VAR 0 6
37891: PPUSH
37892: CALL_OW 263
37896: PUSH
37897: LD_INT 1
37899: EQUAL
37900: IFFALSE 37935
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37902: LD_ADDR_VAR 0 10
37906: PUSH
37907: LD_VAR 0 10
37911: PUSH
37912: LD_VAR 0 6
37916: PPUSH
37917: CALL_OW 311
37921: PPUSH
37922: LD_INT 3
37924: PPUSH
37925: CALL_OW 259
37929: PUSH
37930: LD_INT 4
37932: MUL
37933: MUL
37934: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37935: LD_VAR 0 6
37939: PPUSH
37940: CALL_OW 263
37944: PUSH
37945: LD_INT 2
37947: EQUAL
37948: IFFALSE 37999
// begin j := IsControledBy ( i ) ;
37950: LD_ADDR_VAR 0 7
37954: PUSH
37955: LD_VAR 0 6
37959: PPUSH
37960: CALL_OW 312
37964: ST_TO_ADDR
// if j then
37965: LD_VAR 0 7
37969: IFFALSE 37999
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37971: LD_ADDR_VAR 0 10
37975: PUSH
37976: LD_VAR 0 10
37980: PUSH
37981: LD_VAR 0 7
37985: PPUSH
37986: LD_INT 3
37988: PPUSH
37989: CALL_OW 259
37993: PUSH
37994: LD_INT 3
37996: MUL
37997: MUL
37998: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37999: LD_VAR 0 6
38003: PPUSH
38004: CALL_OW 264
38008: PUSH
38009: LD_INT 5
38011: PUSH
38012: LD_INT 6
38014: PUSH
38015: LD_INT 46
38017: PUSH
38018: LD_INT 44
38020: PUSH
38021: LD_INT 47
38023: PUSH
38024: LD_INT 45
38026: PUSH
38027: LD_INT 28
38029: PUSH
38030: LD_INT 7
38032: PUSH
38033: LD_INT 27
38035: PUSH
38036: LD_INT 29
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: IN
38051: PUSH
38052: LD_VAR 0 1
38056: PPUSH
38057: LD_INT 52
38059: PPUSH
38060: CALL_OW 321
38064: PUSH
38065: LD_INT 2
38067: EQUAL
38068: AND
38069: IFFALSE 38086
// bpoints := bpoints * 1.2 ;
38071: LD_ADDR_VAR 0 10
38075: PUSH
38076: LD_VAR 0 10
38080: PUSH
38081: LD_REAL  1.20000000000000E+0000
38084: MUL
38085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38086: LD_VAR 0 6
38090: PPUSH
38091: CALL_OW 264
38095: PUSH
38096: LD_INT 6
38098: PUSH
38099: LD_INT 46
38101: PUSH
38102: LD_INT 47
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: IN
38110: IFFALSE 38127
// bpoints := bpoints * 1.2 ;
38112: LD_ADDR_VAR 0 10
38116: PUSH
38117: LD_VAR 0 10
38121: PUSH
38122: LD_REAL  1.20000000000000E+0000
38125: MUL
38126: ST_TO_ADDR
// end ; unit_building :
38127: GO 38141
38129: LD_INT 3
38131: DOUBLE
38132: EQUAL
38133: IFTRUE 38137
38135: GO 38140
38137: POP
// ; end ;
38138: GO 38141
38140: POP
// for j = 1 to 3 do
38141: LD_ADDR_VAR 0 7
38145: PUSH
38146: DOUBLE
38147: LD_INT 1
38149: DEC
38150: ST_TO_ADDR
38151: LD_INT 3
38153: PUSH
38154: FOR_TO
38155: IFFALSE 38208
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38157: LD_ADDR_VAR 0 5
38161: PUSH
38162: LD_VAR 0 5
38166: PPUSH
38167: LD_VAR 0 7
38171: PPUSH
38172: LD_VAR 0 5
38176: PUSH
38177: LD_VAR 0 7
38181: ARRAY
38182: PUSH
38183: LD_VAR 0 9
38187: PUSH
38188: LD_VAR 0 7
38192: ARRAY
38193: PUSH
38194: LD_VAR 0 10
38198: MUL
38199: PLUS
38200: PPUSH
38201: CALL_OW 1
38205: ST_TO_ADDR
38206: GO 38154
38208: POP
38209: POP
// end ;
38210: GO 36689
38212: POP
38213: POP
// result := Replace ( result , 4 , tmp ) ;
38214: LD_ADDR_VAR 0 5
38218: PUSH
38219: LD_VAR 0 5
38223: PPUSH
38224: LD_INT 4
38226: PPUSH
38227: LD_VAR 0 8
38231: PPUSH
38232: CALL_OW 1
38236: ST_TO_ADDR
// end ;
38237: LD_VAR 0 5
38241: RET
// export function DangerAtRange ( unit , range ) ; begin
38242: LD_INT 0
38244: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38245: LD_ADDR_VAR 0 3
38249: PUSH
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL_OW 255
38259: PPUSH
38260: LD_VAR 0 1
38264: PPUSH
38265: CALL_OW 250
38269: PPUSH
38270: LD_VAR 0 1
38274: PPUSH
38275: CALL_OW 251
38279: PPUSH
38280: LD_VAR 0 2
38284: PPUSH
38285: CALL 36541 0 4
38289: ST_TO_ADDR
// end ;
38290: LD_VAR 0 3
38294: RET
// export function DangerInArea ( side , area ) ; begin
38295: LD_INT 0
38297: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38298: LD_ADDR_VAR 0 3
38302: PUSH
38303: LD_VAR 0 2
38307: PPUSH
38308: LD_INT 81
38310: PUSH
38311: LD_VAR 0 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PPUSH
38320: CALL_OW 70
38324: ST_TO_ADDR
// end ;
38325: LD_VAR 0 3
38329: RET
// export function IsExtension ( b ) ; begin
38330: LD_INT 0
38332: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38333: LD_ADDR_VAR 0 2
38337: PUSH
38338: LD_VAR 0 1
38342: PUSH
38343: LD_INT 23
38345: PUSH
38346: LD_INT 20
38348: PUSH
38349: LD_INT 22
38351: PUSH
38352: LD_INT 17
38354: PUSH
38355: LD_INT 24
38357: PUSH
38358: LD_INT 21
38360: PUSH
38361: LD_INT 19
38363: PUSH
38364: LD_INT 16
38366: PUSH
38367: LD_INT 25
38369: PUSH
38370: LD_INT 18
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: IN
38385: ST_TO_ADDR
// end ;
38386: LD_VAR 0 2
38390: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38391: LD_INT 0
38393: PPUSH
38394: PPUSH
38395: PPUSH
// result := [ ] ;
38396: LD_ADDR_VAR 0 4
38400: PUSH
38401: EMPTY
38402: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38403: LD_ADDR_VAR 0 5
38407: PUSH
38408: LD_VAR 0 2
38412: PPUSH
38413: LD_INT 21
38415: PUSH
38416: LD_INT 3
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PPUSH
38423: CALL_OW 70
38427: ST_TO_ADDR
// if not tmp then
38428: LD_VAR 0 5
38432: NOT
38433: IFFALSE 38437
// exit ;
38435: GO 38501
// if checkLink then
38437: LD_VAR 0 3
38441: IFFALSE 38491
// begin for i in tmp do
38443: LD_ADDR_VAR 0 6
38447: PUSH
38448: LD_VAR 0 5
38452: PUSH
38453: FOR_IN
38454: IFFALSE 38489
// if GetBase ( i ) <> base then
38456: LD_VAR 0 6
38460: PPUSH
38461: CALL_OW 274
38465: PUSH
38466: LD_VAR 0 1
38470: NONEQUAL
38471: IFFALSE 38487
// ComLinkToBase ( base , i ) ;
38473: LD_VAR 0 1
38477: PPUSH
38478: LD_VAR 0 6
38482: PPUSH
38483: CALL_OW 169
38487: GO 38453
38489: POP
38490: POP
// end ; result := tmp ;
38491: LD_ADDR_VAR 0 4
38495: PUSH
38496: LD_VAR 0 5
38500: ST_TO_ADDR
// end ;
38501: LD_VAR 0 4
38505: RET
// export function ComComplete ( units , b ) ; var i ; begin
38506: LD_INT 0
38508: PPUSH
38509: PPUSH
// if not units then
38510: LD_VAR 0 1
38514: NOT
38515: IFFALSE 38519
// exit ;
38517: GO 38609
// for i in units do
38519: LD_ADDR_VAR 0 4
38523: PUSH
38524: LD_VAR 0 1
38528: PUSH
38529: FOR_IN
38530: IFFALSE 38607
// if BuildingStatus ( b ) = bs_build then
38532: LD_VAR 0 2
38536: PPUSH
38537: CALL_OW 461
38541: PUSH
38542: LD_INT 1
38544: EQUAL
38545: IFFALSE 38605
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38547: LD_VAR 0 4
38551: PPUSH
38552: LD_STRING h
38554: PUSH
38555: LD_VAR 0 2
38559: PPUSH
38560: CALL_OW 250
38564: PUSH
38565: LD_VAR 0 2
38569: PPUSH
38570: CALL_OW 251
38574: PUSH
38575: LD_VAR 0 2
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: PUSH
38598: EMPTY
38599: LIST
38600: PPUSH
38601: CALL_OW 446
38605: GO 38529
38607: POP
38608: POP
// end ;
38609: LD_VAR 0 3
38613: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38614: LD_INT 0
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
38621: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38622: LD_VAR 0 1
38626: NOT
38627: PUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 263
38637: PUSH
38638: LD_INT 2
38640: NONEQUAL
38641: OR
38642: IFFALSE 38646
// exit ;
38644: GO 38962
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38646: LD_ADDR_VAR 0 6
38650: PUSH
38651: LD_INT 22
38653: PUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 255
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: LD_INT 30
38673: PUSH
38674: LD_INT 36
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 34
38683: PUSH
38684: LD_INT 31
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: LIST
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PPUSH
38700: CALL_OW 69
38704: ST_TO_ADDR
// if not tmp then
38705: LD_VAR 0 6
38709: NOT
38710: IFFALSE 38714
// exit ;
38712: GO 38962
// result := [ ] ;
38714: LD_ADDR_VAR 0 2
38718: PUSH
38719: EMPTY
38720: ST_TO_ADDR
// for i in tmp do
38721: LD_ADDR_VAR 0 3
38725: PUSH
38726: LD_VAR 0 6
38730: PUSH
38731: FOR_IN
38732: IFFALSE 38803
// begin t := UnitsInside ( i ) ;
38734: LD_ADDR_VAR 0 4
38738: PUSH
38739: LD_VAR 0 3
38743: PPUSH
38744: CALL_OW 313
38748: ST_TO_ADDR
// if t then
38749: LD_VAR 0 4
38753: IFFALSE 38801
// for j in t do
38755: LD_ADDR_VAR 0 7
38759: PUSH
38760: LD_VAR 0 4
38764: PUSH
38765: FOR_IN
38766: IFFALSE 38799
// result := Replace ( result , result + 1 , j ) ;
38768: LD_ADDR_VAR 0 2
38772: PUSH
38773: LD_VAR 0 2
38777: PPUSH
38778: LD_VAR 0 2
38782: PUSH
38783: LD_INT 1
38785: PLUS
38786: PPUSH
38787: LD_VAR 0 7
38791: PPUSH
38792: CALL_OW 1
38796: ST_TO_ADDR
38797: GO 38765
38799: POP
38800: POP
// end ;
38801: GO 38731
38803: POP
38804: POP
// if not result then
38805: LD_VAR 0 2
38809: NOT
38810: IFFALSE 38814
// exit ;
38812: GO 38962
// mech := result [ 1 ] ;
38814: LD_ADDR_VAR 0 5
38818: PUSH
38819: LD_VAR 0 2
38823: PUSH
38824: LD_INT 1
38826: ARRAY
38827: ST_TO_ADDR
// if result > 1 then
38828: LD_VAR 0 2
38832: PUSH
38833: LD_INT 1
38835: GREATER
38836: IFFALSE 38948
// begin for i = 2 to result do
38838: LD_ADDR_VAR 0 3
38842: PUSH
38843: DOUBLE
38844: LD_INT 2
38846: DEC
38847: ST_TO_ADDR
38848: LD_VAR 0 2
38852: PUSH
38853: FOR_TO
38854: IFFALSE 38946
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38856: LD_ADDR_VAR 0 4
38860: PUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_VAR 0 3
38870: ARRAY
38871: PPUSH
38872: LD_INT 3
38874: PPUSH
38875: CALL_OW 259
38879: PUSH
38880: LD_VAR 0 2
38884: PUSH
38885: LD_VAR 0 3
38889: ARRAY
38890: PPUSH
38891: CALL_OW 432
38895: MINUS
38896: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38897: LD_VAR 0 4
38901: PUSH
38902: LD_VAR 0 5
38906: PPUSH
38907: LD_INT 3
38909: PPUSH
38910: CALL_OW 259
38914: PUSH
38915: LD_VAR 0 5
38919: PPUSH
38920: CALL_OW 432
38924: MINUS
38925: GREATEREQUAL
38926: IFFALSE 38944
// mech := result [ i ] ;
38928: LD_ADDR_VAR 0 5
38932: PUSH
38933: LD_VAR 0 2
38937: PUSH
38938: LD_VAR 0 3
38942: ARRAY
38943: ST_TO_ADDR
// end ;
38944: GO 38853
38946: POP
38947: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38948: LD_VAR 0 1
38952: PPUSH
38953: LD_VAR 0 5
38957: PPUSH
38958: CALL_OW 135
// end ;
38962: LD_VAR 0 2
38966: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38967: LD_INT 0
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
// result := [ ] ;
38982: LD_ADDR_VAR 0 7
38986: PUSH
38987: EMPTY
38988: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38989: LD_VAR 0 1
38993: PPUSH
38994: CALL_OW 266
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: IN
39009: NOT
39010: IFFALSE 39014
// exit ;
39012: GO 40648
// if name then
39014: LD_VAR 0 3
39018: IFFALSE 39034
// SetBName ( base_dep , name ) ;
39020: LD_VAR 0 1
39024: PPUSH
39025: LD_VAR 0 3
39029: PPUSH
39030: CALL_OW 500
// base := GetBase ( base_dep ) ;
39034: LD_ADDR_VAR 0 15
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 274
39048: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39049: LD_ADDR_VAR 0 16
39053: PUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 255
39063: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39064: LD_ADDR_VAR 0 17
39068: PUSH
39069: LD_VAR 0 1
39073: PPUSH
39074: CALL_OW 248
39078: ST_TO_ADDR
// if sources then
39079: LD_VAR 0 5
39083: IFFALSE 39130
// for i = 1 to 3 do
39085: LD_ADDR_VAR 0 8
39089: PUSH
39090: DOUBLE
39091: LD_INT 1
39093: DEC
39094: ST_TO_ADDR
39095: LD_INT 3
39097: PUSH
39098: FOR_TO
39099: IFFALSE 39128
// AddResourceType ( base , i , sources [ i ] ) ;
39101: LD_VAR 0 15
39105: PPUSH
39106: LD_VAR 0 8
39110: PPUSH
39111: LD_VAR 0 5
39115: PUSH
39116: LD_VAR 0 8
39120: ARRAY
39121: PPUSH
39122: CALL_OW 276
39126: GO 39098
39128: POP
39129: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39130: LD_ADDR_VAR 0 18
39134: PUSH
39135: LD_VAR 0 15
39139: PPUSH
39140: LD_VAR 0 2
39144: PPUSH
39145: LD_INT 1
39147: PPUSH
39148: CALL 38391 0 3
39152: ST_TO_ADDR
// InitHc ;
39153: CALL_OW 19
// InitUc ;
39157: CALL_OW 18
// uc_side := side ;
39161: LD_ADDR_OWVAR 20
39165: PUSH
39166: LD_VAR 0 16
39170: ST_TO_ADDR
// uc_nation := nation ;
39171: LD_ADDR_OWVAR 21
39175: PUSH
39176: LD_VAR 0 17
39180: ST_TO_ADDR
// if buildings then
39181: LD_VAR 0 18
39185: IFFALSE 40507
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39187: LD_ADDR_VAR 0 19
39191: PUSH
39192: LD_VAR 0 18
39196: PPUSH
39197: LD_INT 2
39199: PUSH
39200: LD_INT 30
39202: PUSH
39203: LD_INT 29
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 30
39212: PUSH
39213: LD_INT 30
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: PPUSH
39225: CALL_OW 72
39229: ST_TO_ADDR
// if tmp then
39230: LD_VAR 0 19
39234: IFFALSE 39282
// for i in tmp do
39236: LD_ADDR_VAR 0 8
39240: PUSH
39241: LD_VAR 0 19
39245: PUSH
39246: FOR_IN
39247: IFFALSE 39280
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39249: LD_VAR 0 8
39253: PPUSH
39254: CALL_OW 250
39258: PPUSH
39259: LD_VAR 0 8
39263: PPUSH
39264: CALL_OW 251
39268: PPUSH
39269: LD_VAR 0 16
39273: PPUSH
39274: CALL_OW 441
39278: GO 39246
39280: POP
39281: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39282: LD_VAR 0 18
39286: PPUSH
39287: LD_INT 2
39289: PUSH
39290: LD_INT 30
39292: PUSH
39293: LD_INT 32
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 30
39302: PUSH
39303: LD_INT 33
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: PPUSH
39315: CALL_OW 72
39319: IFFALSE 39407
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39321: LD_ADDR_VAR 0 8
39325: PUSH
39326: LD_VAR 0 18
39330: PPUSH
39331: LD_INT 2
39333: PUSH
39334: LD_INT 30
39336: PUSH
39337: LD_INT 32
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 30
39346: PUSH
39347: LD_INT 33
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: PPUSH
39359: CALL_OW 72
39363: PUSH
39364: FOR_IN
39365: IFFALSE 39405
// begin if not GetBWeapon ( i ) then
39367: LD_VAR 0 8
39371: PPUSH
39372: CALL_OW 269
39376: NOT
39377: IFFALSE 39403
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39379: LD_VAR 0 8
39383: PPUSH
39384: LD_VAR 0 8
39388: PPUSH
39389: LD_VAR 0 2
39393: PPUSH
39394: CALL 40653 0 2
39398: PPUSH
39399: CALL_OW 431
// end ;
39403: GO 39364
39405: POP
39406: POP
// end ; for i = 1 to personel do
39407: LD_ADDR_VAR 0 8
39411: PUSH
39412: DOUBLE
39413: LD_INT 1
39415: DEC
39416: ST_TO_ADDR
39417: LD_VAR 0 6
39421: PUSH
39422: FOR_TO
39423: IFFALSE 40487
// begin if i > 4 then
39425: LD_VAR 0 8
39429: PUSH
39430: LD_INT 4
39432: GREATER
39433: IFFALSE 39437
// break ;
39435: GO 40487
// case i of 1 :
39437: LD_VAR 0 8
39441: PUSH
39442: LD_INT 1
39444: DOUBLE
39445: EQUAL
39446: IFTRUE 39450
39448: GO 39530
39450: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39451: LD_ADDR_VAR 0 12
39455: PUSH
39456: LD_VAR 0 18
39460: PPUSH
39461: LD_INT 22
39463: PUSH
39464: LD_VAR 0 16
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 58
39475: PUSH
39476: EMPTY
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: LD_INT 30
39484: PUSH
39485: LD_INT 32
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 30
39494: PUSH
39495: LD_INT 4
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 30
39504: PUSH
39505: LD_INT 5
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: PPUSH
39523: CALL_OW 72
39527: ST_TO_ADDR
39528: GO 39752
39530: LD_INT 2
39532: DOUBLE
39533: EQUAL
39534: IFTRUE 39538
39536: GO 39600
39538: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39539: LD_ADDR_VAR 0 12
39543: PUSH
39544: LD_VAR 0 18
39548: PPUSH
39549: LD_INT 22
39551: PUSH
39552: LD_VAR 0 16
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 2
39563: PUSH
39564: LD_INT 30
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 30
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: LIST
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PPUSH
39593: CALL_OW 72
39597: ST_TO_ADDR
39598: GO 39752
39600: LD_INT 3
39602: DOUBLE
39603: EQUAL
39604: IFTRUE 39608
39606: GO 39670
39608: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39609: LD_ADDR_VAR 0 12
39613: PUSH
39614: LD_VAR 0 18
39618: PPUSH
39619: LD_INT 22
39621: PUSH
39622: LD_VAR 0 16
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: LD_INT 30
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 30
39646: PUSH
39647: LD_INT 3
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PPUSH
39663: CALL_OW 72
39667: ST_TO_ADDR
39668: GO 39752
39670: LD_INT 4
39672: DOUBLE
39673: EQUAL
39674: IFTRUE 39678
39676: GO 39751
39678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39679: LD_ADDR_VAR 0 12
39683: PUSH
39684: LD_VAR 0 18
39688: PPUSH
39689: LD_INT 22
39691: PUSH
39692: LD_VAR 0 16
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 30
39706: PUSH
39707: LD_INT 6
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 30
39716: PUSH
39717: LD_INT 7
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 30
39726: PUSH
39727: LD_INT 8
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PPUSH
39744: CALL_OW 72
39748: ST_TO_ADDR
39749: GO 39752
39751: POP
// if i = 1 then
39752: LD_VAR 0 8
39756: PUSH
39757: LD_INT 1
39759: EQUAL
39760: IFFALSE 39871
// begin tmp := [ ] ;
39762: LD_ADDR_VAR 0 19
39766: PUSH
39767: EMPTY
39768: ST_TO_ADDR
// for j in f do
39769: LD_ADDR_VAR 0 9
39773: PUSH
39774: LD_VAR 0 12
39778: PUSH
39779: FOR_IN
39780: IFFALSE 39853
// if GetBType ( j ) = b_bunker then
39782: LD_VAR 0 9
39786: PPUSH
39787: CALL_OW 266
39791: PUSH
39792: LD_INT 32
39794: EQUAL
39795: IFFALSE 39822
// tmp := Insert ( tmp , 1 , j ) else
39797: LD_ADDR_VAR 0 19
39801: PUSH
39802: LD_VAR 0 19
39806: PPUSH
39807: LD_INT 1
39809: PPUSH
39810: LD_VAR 0 9
39814: PPUSH
39815: CALL_OW 2
39819: ST_TO_ADDR
39820: GO 39851
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39822: LD_ADDR_VAR 0 19
39826: PUSH
39827: LD_VAR 0 19
39831: PPUSH
39832: LD_VAR 0 19
39836: PUSH
39837: LD_INT 1
39839: PLUS
39840: PPUSH
39841: LD_VAR 0 9
39845: PPUSH
39846: CALL_OW 2
39850: ST_TO_ADDR
39851: GO 39779
39853: POP
39854: POP
// if tmp then
39855: LD_VAR 0 19
39859: IFFALSE 39871
// f := tmp ;
39861: LD_ADDR_VAR 0 12
39865: PUSH
39866: LD_VAR 0 19
39870: ST_TO_ADDR
// end ; x := personel [ i ] ;
39871: LD_ADDR_VAR 0 13
39875: PUSH
39876: LD_VAR 0 6
39880: PUSH
39881: LD_VAR 0 8
39885: ARRAY
39886: ST_TO_ADDR
// if x = - 1 then
39887: LD_VAR 0 13
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: EQUAL
39896: IFFALSE 40105
// begin for j in f do
39898: LD_ADDR_VAR 0 9
39902: PUSH
39903: LD_VAR 0 12
39907: PUSH
39908: FOR_IN
39909: IFFALSE 40101
// repeat InitHc ;
39911: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39915: LD_VAR 0 9
39919: PPUSH
39920: CALL_OW 266
39924: PUSH
39925: LD_INT 5
39927: EQUAL
39928: IFFALSE 39998
// begin if UnitsInside ( j ) < 3 then
39930: LD_VAR 0 9
39934: PPUSH
39935: CALL_OW 313
39939: PUSH
39940: LD_INT 3
39942: LESS
39943: IFFALSE 39979
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39945: LD_INT 0
39947: PPUSH
39948: LD_INT 5
39950: PUSH
39951: LD_INT 8
39953: PUSH
39954: LD_INT 9
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: LIST
39961: PUSH
39962: LD_VAR 0 17
39966: ARRAY
39967: PPUSH
39968: LD_VAR 0 4
39972: PPUSH
39973: CALL_OW 380
39977: GO 39996
// PrepareHuman ( false , i , skill ) ;
39979: LD_INT 0
39981: PPUSH
39982: LD_VAR 0 8
39986: PPUSH
39987: LD_VAR 0 4
39991: PPUSH
39992: CALL_OW 380
// end else
39996: GO 40015
// PrepareHuman ( false , i , skill ) ;
39998: LD_INT 0
40000: PPUSH
40001: LD_VAR 0 8
40005: PPUSH
40006: LD_VAR 0 4
40010: PPUSH
40011: CALL_OW 380
// un := CreateHuman ;
40015: LD_ADDR_VAR 0 14
40019: PUSH
40020: CALL_OW 44
40024: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40025: LD_ADDR_VAR 0 7
40029: PUSH
40030: LD_VAR 0 7
40034: PPUSH
40035: LD_INT 1
40037: PPUSH
40038: LD_VAR 0 14
40042: PPUSH
40043: CALL_OW 2
40047: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40048: LD_VAR 0 14
40052: PPUSH
40053: LD_VAR 0 9
40057: PPUSH
40058: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40062: LD_VAR 0 9
40066: PPUSH
40067: CALL_OW 313
40071: PUSH
40072: LD_INT 6
40074: EQUAL
40075: PUSH
40076: LD_VAR 0 9
40080: PPUSH
40081: CALL_OW 266
40085: PUSH
40086: LD_INT 32
40088: PUSH
40089: LD_INT 31
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: IN
40096: OR
40097: IFFALSE 39911
40099: GO 39908
40101: POP
40102: POP
// end else
40103: GO 40485
// for j = 1 to x do
40105: LD_ADDR_VAR 0 9
40109: PUSH
40110: DOUBLE
40111: LD_INT 1
40113: DEC
40114: ST_TO_ADDR
40115: LD_VAR 0 13
40119: PUSH
40120: FOR_TO
40121: IFFALSE 40483
// begin InitHc ;
40123: CALL_OW 19
// if not f then
40127: LD_VAR 0 12
40131: NOT
40132: IFFALSE 40221
// begin PrepareHuman ( false , i , skill ) ;
40134: LD_INT 0
40136: PPUSH
40137: LD_VAR 0 8
40141: PPUSH
40142: LD_VAR 0 4
40146: PPUSH
40147: CALL_OW 380
// un := CreateHuman ;
40151: LD_ADDR_VAR 0 14
40155: PUSH
40156: CALL_OW 44
40160: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40161: LD_ADDR_VAR 0 7
40165: PUSH
40166: LD_VAR 0 7
40170: PPUSH
40171: LD_INT 1
40173: PPUSH
40174: LD_VAR 0 14
40178: PPUSH
40179: CALL_OW 2
40183: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40184: LD_VAR 0 14
40188: PPUSH
40189: LD_VAR 0 1
40193: PPUSH
40194: CALL_OW 250
40198: PPUSH
40199: LD_VAR 0 1
40203: PPUSH
40204: CALL_OW 251
40208: PPUSH
40209: LD_INT 10
40211: PPUSH
40212: LD_INT 0
40214: PPUSH
40215: CALL_OW 50
// continue ;
40219: GO 40120
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40221: LD_VAR 0 12
40225: PUSH
40226: LD_INT 1
40228: ARRAY
40229: PPUSH
40230: CALL_OW 313
40234: PUSH
40235: LD_VAR 0 12
40239: PUSH
40240: LD_INT 1
40242: ARRAY
40243: PPUSH
40244: CALL_OW 266
40248: PUSH
40249: LD_INT 32
40251: PUSH
40252: LD_INT 31
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: IN
40259: AND
40260: PUSH
40261: LD_VAR 0 12
40265: PUSH
40266: LD_INT 1
40268: ARRAY
40269: PPUSH
40270: CALL_OW 313
40274: PUSH
40275: LD_INT 6
40277: EQUAL
40278: OR
40279: IFFALSE 40299
// f := Delete ( f , 1 ) ;
40281: LD_ADDR_VAR 0 12
40285: PUSH
40286: LD_VAR 0 12
40290: PPUSH
40291: LD_INT 1
40293: PPUSH
40294: CALL_OW 3
40298: ST_TO_ADDR
// if not f then
40299: LD_VAR 0 12
40303: NOT
40304: IFFALSE 40322
// begin x := x + 2 ;
40306: LD_ADDR_VAR 0 13
40310: PUSH
40311: LD_VAR 0 13
40315: PUSH
40316: LD_INT 2
40318: PLUS
40319: ST_TO_ADDR
// continue ;
40320: GO 40120
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40322: LD_VAR 0 12
40326: PUSH
40327: LD_INT 1
40329: ARRAY
40330: PPUSH
40331: CALL_OW 266
40335: PUSH
40336: LD_INT 5
40338: EQUAL
40339: IFFALSE 40413
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40341: LD_VAR 0 12
40345: PUSH
40346: LD_INT 1
40348: ARRAY
40349: PPUSH
40350: CALL_OW 313
40354: PUSH
40355: LD_INT 3
40357: LESS
40358: IFFALSE 40394
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40360: LD_INT 0
40362: PPUSH
40363: LD_INT 5
40365: PUSH
40366: LD_INT 8
40368: PUSH
40369: LD_INT 9
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: LIST
40376: PUSH
40377: LD_VAR 0 17
40381: ARRAY
40382: PPUSH
40383: LD_VAR 0 4
40387: PPUSH
40388: CALL_OW 380
40392: GO 40411
// PrepareHuman ( false , i , skill ) ;
40394: LD_INT 0
40396: PPUSH
40397: LD_VAR 0 8
40401: PPUSH
40402: LD_VAR 0 4
40406: PPUSH
40407: CALL_OW 380
// end else
40411: GO 40430
// PrepareHuman ( false , i , skill ) ;
40413: LD_INT 0
40415: PPUSH
40416: LD_VAR 0 8
40420: PPUSH
40421: LD_VAR 0 4
40425: PPUSH
40426: CALL_OW 380
// un := CreateHuman ;
40430: LD_ADDR_VAR 0 14
40434: PUSH
40435: CALL_OW 44
40439: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40440: LD_ADDR_VAR 0 7
40444: PUSH
40445: LD_VAR 0 7
40449: PPUSH
40450: LD_INT 1
40452: PPUSH
40453: LD_VAR 0 14
40457: PPUSH
40458: CALL_OW 2
40462: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40463: LD_VAR 0 14
40467: PPUSH
40468: LD_VAR 0 12
40472: PUSH
40473: LD_INT 1
40475: ARRAY
40476: PPUSH
40477: CALL_OW 52
// end ;
40481: GO 40120
40483: POP
40484: POP
// end ;
40485: GO 39422
40487: POP
40488: POP
// result := result ^ buildings ;
40489: LD_ADDR_VAR 0 7
40493: PUSH
40494: LD_VAR 0 7
40498: PUSH
40499: LD_VAR 0 18
40503: ADD
40504: ST_TO_ADDR
// end else
40505: GO 40648
// begin for i = 1 to personel do
40507: LD_ADDR_VAR 0 8
40511: PUSH
40512: DOUBLE
40513: LD_INT 1
40515: DEC
40516: ST_TO_ADDR
40517: LD_VAR 0 6
40521: PUSH
40522: FOR_TO
40523: IFFALSE 40646
// begin if i > 4 then
40525: LD_VAR 0 8
40529: PUSH
40530: LD_INT 4
40532: GREATER
40533: IFFALSE 40537
// break ;
40535: GO 40646
// x := personel [ i ] ;
40537: LD_ADDR_VAR 0 13
40541: PUSH
40542: LD_VAR 0 6
40546: PUSH
40547: LD_VAR 0 8
40551: ARRAY
40552: ST_TO_ADDR
// if x = - 1 then
40553: LD_VAR 0 13
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: EQUAL
40562: IFFALSE 40566
// continue ;
40564: GO 40522
// PrepareHuman ( false , i , skill ) ;
40566: LD_INT 0
40568: PPUSH
40569: LD_VAR 0 8
40573: PPUSH
40574: LD_VAR 0 4
40578: PPUSH
40579: CALL_OW 380
// un := CreateHuman ;
40583: LD_ADDR_VAR 0 14
40587: PUSH
40588: CALL_OW 44
40592: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40593: LD_VAR 0 14
40597: PPUSH
40598: LD_VAR 0 1
40602: PPUSH
40603: CALL_OW 250
40607: PPUSH
40608: LD_VAR 0 1
40612: PPUSH
40613: CALL_OW 251
40617: PPUSH
40618: LD_INT 10
40620: PPUSH
40621: LD_INT 0
40623: PPUSH
40624: CALL_OW 50
// result := result ^ un ;
40628: LD_ADDR_VAR 0 7
40632: PUSH
40633: LD_VAR 0 7
40637: PUSH
40638: LD_VAR 0 14
40642: ADD
40643: ST_TO_ADDR
// end ;
40644: GO 40522
40646: POP
40647: POP
// end ; end ;
40648: LD_VAR 0 7
40652: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40653: LD_INT 0
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
40659: PPUSH
40660: PPUSH
40661: PPUSH
40662: PPUSH
40663: PPUSH
40664: PPUSH
40665: PPUSH
40666: PPUSH
40667: PPUSH
40668: PPUSH
40669: PPUSH
40670: PPUSH
// result := false ;
40671: LD_ADDR_VAR 0 3
40675: PUSH
40676: LD_INT 0
40678: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40679: LD_VAR 0 1
40683: NOT
40684: PUSH
40685: LD_VAR 0 1
40689: PPUSH
40690: CALL_OW 266
40694: PUSH
40695: LD_INT 32
40697: PUSH
40698: LD_INT 33
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: IN
40705: NOT
40706: OR
40707: IFFALSE 40711
// exit ;
40709: GO 41820
// nat := GetNation ( tower ) ;
40711: LD_ADDR_VAR 0 12
40715: PUSH
40716: LD_VAR 0 1
40720: PPUSH
40721: CALL_OW 248
40725: ST_TO_ADDR
// side := GetSide ( tower ) ;
40726: LD_ADDR_VAR 0 16
40730: PUSH
40731: LD_VAR 0 1
40735: PPUSH
40736: CALL_OW 255
40740: ST_TO_ADDR
// x := GetX ( tower ) ;
40741: LD_ADDR_VAR 0 10
40745: PUSH
40746: LD_VAR 0 1
40750: PPUSH
40751: CALL_OW 250
40755: ST_TO_ADDR
// y := GetY ( tower ) ;
40756: LD_ADDR_VAR 0 11
40760: PUSH
40761: LD_VAR 0 1
40765: PPUSH
40766: CALL_OW 251
40770: ST_TO_ADDR
// if not x or not y then
40771: LD_VAR 0 10
40775: NOT
40776: PUSH
40777: LD_VAR 0 11
40781: NOT
40782: OR
40783: IFFALSE 40787
// exit ;
40785: GO 41820
// weapon := 0 ;
40787: LD_ADDR_VAR 0 18
40791: PUSH
40792: LD_INT 0
40794: ST_TO_ADDR
// fac_list := [ ] ;
40795: LD_ADDR_VAR 0 17
40799: PUSH
40800: EMPTY
40801: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40802: LD_ADDR_VAR 0 6
40806: PUSH
40807: LD_VAR 0 1
40811: PPUSH
40812: CALL_OW 274
40816: PPUSH
40817: LD_VAR 0 2
40821: PPUSH
40822: LD_INT 0
40824: PPUSH
40825: CALL 38391 0 3
40829: PPUSH
40830: LD_INT 30
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PPUSH
40840: CALL_OW 72
40844: ST_TO_ADDR
// if not factories then
40845: LD_VAR 0 6
40849: NOT
40850: IFFALSE 40854
// exit ;
40852: GO 41820
// for i in factories do
40854: LD_ADDR_VAR 0 8
40858: PUSH
40859: LD_VAR 0 6
40863: PUSH
40864: FOR_IN
40865: IFFALSE 40890
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40867: LD_ADDR_VAR 0 17
40871: PUSH
40872: LD_VAR 0 17
40876: PUSH
40877: LD_VAR 0 8
40881: PPUSH
40882: CALL_OW 478
40886: UNION
40887: ST_TO_ADDR
40888: GO 40864
40890: POP
40891: POP
// if not fac_list then
40892: LD_VAR 0 17
40896: NOT
40897: IFFALSE 40901
// exit ;
40899: GO 41820
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40901: LD_ADDR_VAR 0 5
40905: PUSH
40906: LD_INT 4
40908: PUSH
40909: LD_INT 5
40911: PUSH
40912: LD_INT 9
40914: PUSH
40915: LD_INT 10
40917: PUSH
40918: LD_INT 6
40920: PUSH
40921: LD_INT 7
40923: PUSH
40924: LD_INT 11
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 27
40938: PUSH
40939: LD_INT 28
40941: PUSH
40942: LD_INT 26
40944: PUSH
40945: LD_INT 30
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 43
40956: PUSH
40957: LD_INT 44
40959: PUSH
40960: LD_INT 46
40962: PUSH
40963: LD_INT 45
40965: PUSH
40966: LD_INT 47
40968: PUSH
40969: LD_INT 49
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: PUSH
40985: LD_VAR 0 12
40989: ARRAY
40990: ST_TO_ADDR
// list := list isect fac_list ;
40991: LD_ADDR_VAR 0 5
40995: PUSH
40996: LD_VAR 0 5
41000: PUSH
41001: LD_VAR 0 17
41005: ISECT
41006: ST_TO_ADDR
// if not list then
41007: LD_VAR 0 5
41011: NOT
41012: IFFALSE 41016
// exit ;
41014: GO 41820
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41016: LD_VAR 0 12
41020: PUSH
41021: LD_INT 3
41023: EQUAL
41024: PUSH
41025: LD_INT 49
41027: PUSH
41028: LD_VAR 0 5
41032: IN
41033: AND
41034: PUSH
41035: LD_INT 31
41037: PPUSH
41038: LD_VAR 0 16
41042: PPUSH
41043: CALL_OW 321
41047: PUSH
41048: LD_INT 2
41050: EQUAL
41051: AND
41052: IFFALSE 41112
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41054: LD_INT 22
41056: PUSH
41057: LD_VAR 0 16
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 35
41068: PUSH
41069: LD_INT 49
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 91
41078: PUSH
41079: LD_VAR 0 1
41083: PUSH
41084: LD_INT 10
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: LIST
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: LIST
41096: PPUSH
41097: CALL_OW 69
41101: NOT
41102: IFFALSE 41112
// weapon := ru_time_lapser ;
41104: LD_ADDR_VAR 0 18
41108: PUSH
41109: LD_INT 49
41111: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41112: LD_VAR 0 12
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: IN
41127: PUSH
41128: LD_INT 11
41130: PUSH
41131: LD_VAR 0 5
41135: IN
41136: PUSH
41137: LD_INT 30
41139: PUSH
41140: LD_VAR 0 5
41144: IN
41145: OR
41146: AND
41147: PUSH
41148: LD_INT 6
41150: PPUSH
41151: LD_VAR 0 16
41155: PPUSH
41156: CALL_OW 321
41160: PUSH
41161: LD_INT 2
41163: EQUAL
41164: AND
41165: IFFALSE 41330
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41167: LD_INT 22
41169: PUSH
41170: LD_VAR 0 16
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 35
41184: PUSH
41185: LD_INT 11
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 35
41194: PUSH
41195: LD_INT 30
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 91
41209: PUSH
41210: LD_VAR 0 1
41214: PUSH
41215: LD_INT 18
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: PPUSH
41228: CALL_OW 69
41232: NOT
41233: PUSH
41234: LD_INT 22
41236: PUSH
41237: LD_VAR 0 16
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 30
41251: PUSH
41252: LD_INT 32
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 30
41261: PUSH
41262: LD_INT 33
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 91
41276: PUSH
41277: LD_VAR 0 1
41281: PUSH
41282: LD_INT 12
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: LIST
41294: PUSH
41295: EMPTY
41296: LIST
41297: PPUSH
41298: CALL_OW 69
41302: PUSH
41303: LD_INT 2
41305: GREATER
41306: AND
41307: IFFALSE 41330
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41309: LD_ADDR_VAR 0 18
41313: PUSH
41314: LD_INT 11
41316: PUSH
41317: LD_INT 30
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_VAR 0 12
41328: ARRAY
41329: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41330: LD_VAR 0 18
41334: NOT
41335: PUSH
41336: LD_INT 40
41338: PPUSH
41339: LD_VAR 0 16
41343: PPUSH
41344: CALL_OW 321
41348: PUSH
41349: LD_INT 2
41351: EQUAL
41352: AND
41353: PUSH
41354: LD_INT 7
41356: PUSH
41357: LD_VAR 0 5
41361: IN
41362: PUSH
41363: LD_INT 28
41365: PUSH
41366: LD_VAR 0 5
41370: IN
41371: OR
41372: PUSH
41373: LD_INT 45
41375: PUSH
41376: LD_VAR 0 5
41380: IN
41381: OR
41382: AND
41383: IFFALSE 41637
// begin hex := GetHexInfo ( x , y ) ;
41385: LD_ADDR_VAR 0 4
41389: PUSH
41390: LD_VAR 0 10
41394: PPUSH
41395: LD_VAR 0 11
41399: PPUSH
41400: CALL_OW 546
41404: ST_TO_ADDR
// if hex [ 1 ] then
41405: LD_VAR 0 4
41409: PUSH
41410: LD_INT 1
41412: ARRAY
41413: IFFALSE 41417
// exit ;
41415: GO 41820
// height := hex [ 2 ] ;
41417: LD_ADDR_VAR 0 15
41421: PUSH
41422: LD_VAR 0 4
41426: PUSH
41427: LD_INT 2
41429: ARRAY
41430: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41431: LD_ADDR_VAR 0 14
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: LD_INT 5
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: ST_TO_ADDR
// for i in tmp do
41454: LD_ADDR_VAR 0 8
41458: PUSH
41459: LD_VAR 0 14
41463: PUSH
41464: FOR_IN
41465: IFFALSE 41635
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41467: LD_ADDR_VAR 0 9
41471: PUSH
41472: LD_VAR 0 10
41476: PPUSH
41477: LD_VAR 0 8
41481: PPUSH
41482: LD_INT 5
41484: PPUSH
41485: CALL_OW 272
41489: PUSH
41490: LD_VAR 0 11
41494: PPUSH
41495: LD_VAR 0 8
41499: PPUSH
41500: LD_INT 5
41502: PPUSH
41503: CALL_OW 273
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41512: LD_VAR 0 9
41516: PUSH
41517: LD_INT 1
41519: ARRAY
41520: PPUSH
41521: LD_VAR 0 9
41525: PUSH
41526: LD_INT 2
41528: ARRAY
41529: PPUSH
41530: CALL_OW 488
41534: IFFALSE 41633
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41536: LD_ADDR_VAR 0 4
41540: PUSH
41541: LD_VAR 0 9
41545: PUSH
41546: LD_INT 1
41548: ARRAY
41549: PPUSH
41550: LD_VAR 0 9
41554: PUSH
41555: LD_INT 2
41557: ARRAY
41558: PPUSH
41559: CALL_OW 546
41563: ST_TO_ADDR
// if hex [ 1 ] then
41564: LD_VAR 0 4
41568: PUSH
41569: LD_INT 1
41571: ARRAY
41572: IFFALSE 41576
// continue ;
41574: GO 41464
// h := hex [ 2 ] ;
41576: LD_ADDR_VAR 0 13
41580: PUSH
41581: LD_VAR 0 4
41585: PUSH
41586: LD_INT 2
41588: ARRAY
41589: ST_TO_ADDR
// if h + 7 < height then
41590: LD_VAR 0 13
41594: PUSH
41595: LD_INT 7
41597: PLUS
41598: PUSH
41599: LD_VAR 0 15
41603: LESS
41604: IFFALSE 41633
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41606: LD_ADDR_VAR 0 18
41610: PUSH
41611: LD_INT 7
41613: PUSH
41614: LD_INT 28
41616: PUSH
41617: LD_INT 45
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: PUSH
41625: LD_VAR 0 12
41629: ARRAY
41630: ST_TO_ADDR
// break ;
41631: GO 41635
// end ; end ; end ;
41633: GO 41464
41635: POP
41636: POP
// end ; if not weapon then
41637: LD_VAR 0 18
41641: NOT
41642: IFFALSE 41702
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41644: LD_ADDR_VAR 0 5
41648: PUSH
41649: LD_VAR 0 5
41653: PUSH
41654: LD_INT 11
41656: PUSH
41657: LD_INT 30
41659: PUSH
41660: LD_INT 49
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: LIST
41667: DIFF
41668: ST_TO_ADDR
// if not list then
41669: LD_VAR 0 5
41673: NOT
41674: IFFALSE 41678
// exit ;
41676: GO 41820
// weapon := list [ rand ( 1 , list ) ] ;
41678: LD_ADDR_VAR 0 18
41682: PUSH
41683: LD_VAR 0 5
41687: PUSH
41688: LD_INT 1
41690: PPUSH
41691: LD_VAR 0 5
41695: PPUSH
41696: CALL_OW 12
41700: ARRAY
41701: ST_TO_ADDR
// end ; if weapon then
41702: LD_VAR 0 18
41706: IFFALSE 41820
// begin tmp := CostOfWeapon ( weapon ) ;
41708: LD_ADDR_VAR 0 14
41712: PUSH
41713: LD_VAR 0 18
41717: PPUSH
41718: CALL_OW 451
41722: ST_TO_ADDR
// j := GetBase ( tower ) ;
41723: LD_ADDR_VAR 0 9
41727: PUSH
41728: LD_VAR 0 1
41732: PPUSH
41733: CALL_OW 274
41737: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41738: LD_VAR 0 9
41742: PPUSH
41743: LD_INT 1
41745: PPUSH
41746: CALL_OW 275
41750: PUSH
41751: LD_VAR 0 14
41755: PUSH
41756: LD_INT 1
41758: ARRAY
41759: GREATEREQUAL
41760: PUSH
41761: LD_VAR 0 9
41765: PPUSH
41766: LD_INT 2
41768: PPUSH
41769: CALL_OW 275
41773: PUSH
41774: LD_VAR 0 14
41778: PUSH
41779: LD_INT 2
41781: ARRAY
41782: GREATEREQUAL
41783: AND
41784: PUSH
41785: LD_VAR 0 9
41789: PPUSH
41790: LD_INT 3
41792: PPUSH
41793: CALL_OW 275
41797: PUSH
41798: LD_VAR 0 14
41802: PUSH
41803: LD_INT 3
41805: ARRAY
41806: GREATEREQUAL
41807: AND
41808: IFFALSE 41820
// result := weapon ;
41810: LD_ADDR_VAR 0 3
41814: PUSH
41815: LD_VAR 0 18
41819: ST_TO_ADDR
// end ; end ;
41820: LD_VAR 0 3
41824: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41825: LD_INT 0
41827: PPUSH
41828: PPUSH
// result := true ;
41829: LD_ADDR_VAR 0 3
41833: PUSH
41834: LD_INT 1
41836: ST_TO_ADDR
// if array1 = array2 then
41837: LD_VAR 0 1
41841: PUSH
41842: LD_VAR 0 2
41846: EQUAL
41847: IFFALSE 41907
// begin for i = 1 to array1 do
41849: LD_ADDR_VAR 0 4
41853: PUSH
41854: DOUBLE
41855: LD_INT 1
41857: DEC
41858: ST_TO_ADDR
41859: LD_VAR 0 1
41863: PUSH
41864: FOR_TO
41865: IFFALSE 41903
// if array1 [ i ] <> array2 [ i ] then
41867: LD_VAR 0 1
41871: PUSH
41872: LD_VAR 0 4
41876: ARRAY
41877: PUSH
41878: LD_VAR 0 2
41882: PUSH
41883: LD_VAR 0 4
41887: ARRAY
41888: NONEQUAL
41889: IFFALSE 41901
// begin result := false ;
41891: LD_ADDR_VAR 0 3
41895: PUSH
41896: LD_INT 0
41898: ST_TO_ADDR
// break ;
41899: GO 41903
// end ;
41901: GO 41864
41903: POP
41904: POP
// end else
41905: GO 41915
// result := false ;
41907: LD_ADDR_VAR 0 3
41911: PUSH
41912: LD_INT 0
41914: ST_TO_ADDR
// end ;
41915: LD_VAR 0 3
41919: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41920: LD_INT 0
41922: PPUSH
41923: PPUSH
// if not array1 or not array2 then
41924: LD_VAR 0 1
41928: NOT
41929: PUSH
41930: LD_VAR 0 2
41934: NOT
41935: OR
41936: IFFALSE 41940
// exit ;
41938: GO 42004
// result := true ;
41940: LD_ADDR_VAR 0 3
41944: PUSH
41945: LD_INT 1
41947: ST_TO_ADDR
// for i = 1 to array1 do
41948: LD_ADDR_VAR 0 4
41952: PUSH
41953: DOUBLE
41954: LD_INT 1
41956: DEC
41957: ST_TO_ADDR
41958: LD_VAR 0 1
41962: PUSH
41963: FOR_TO
41964: IFFALSE 42002
// if array1 [ i ] <> array2 [ i ] then
41966: LD_VAR 0 1
41970: PUSH
41971: LD_VAR 0 4
41975: ARRAY
41976: PUSH
41977: LD_VAR 0 2
41981: PUSH
41982: LD_VAR 0 4
41986: ARRAY
41987: NONEQUAL
41988: IFFALSE 42000
// begin result := false ;
41990: LD_ADDR_VAR 0 3
41994: PUSH
41995: LD_INT 0
41997: ST_TO_ADDR
// break ;
41998: GO 42002
// end ;
42000: GO 41963
42002: POP
42003: POP
// end ;
42004: LD_VAR 0 3
42008: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42009: LD_INT 0
42011: PPUSH
42012: PPUSH
42013: PPUSH
// pom := GetBase ( fac ) ;
42014: LD_ADDR_VAR 0 5
42018: PUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 274
42028: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42029: LD_ADDR_VAR 0 4
42033: PUSH
42034: LD_VAR 0 2
42038: PUSH
42039: LD_INT 1
42041: ARRAY
42042: PPUSH
42043: LD_VAR 0 2
42047: PUSH
42048: LD_INT 2
42050: ARRAY
42051: PPUSH
42052: LD_VAR 0 2
42056: PUSH
42057: LD_INT 3
42059: ARRAY
42060: PPUSH
42061: LD_VAR 0 2
42065: PUSH
42066: LD_INT 4
42068: ARRAY
42069: PPUSH
42070: CALL_OW 449
42074: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42075: LD_ADDR_VAR 0 3
42079: PUSH
42080: LD_VAR 0 5
42084: PPUSH
42085: LD_INT 1
42087: PPUSH
42088: CALL_OW 275
42092: PUSH
42093: LD_VAR 0 4
42097: PUSH
42098: LD_INT 1
42100: ARRAY
42101: GREATEREQUAL
42102: PUSH
42103: LD_VAR 0 5
42107: PPUSH
42108: LD_INT 2
42110: PPUSH
42111: CALL_OW 275
42115: PUSH
42116: LD_VAR 0 4
42120: PUSH
42121: LD_INT 2
42123: ARRAY
42124: GREATEREQUAL
42125: AND
42126: PUSH
42127: LD_VAR 0 5
42131: PPUSH
42132: LD_INT 3
42134: PPUSH
42135: CALL_OW 275
42139: PUSH
42140: LD_VAR 0 4
42144: PUSH
42145: LD_INT 3
42147: ARRAY
42148: GREATEREQUAL
42149: AND
42150: ST_TO_ADDR
// end ;
42151: LD_VAR 0 3
42155: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42156: LD_INT 0
42158: PPUSH
42159: PPUSH
42160: PPUSH
42161: PPUSH
// pom := GetBase ( building ) ;
42162: LD_ADDR_VAR 0 3
42166: PUSH
42167: LD_VAR 0 1
42171: PPUSH
42172: CALL_OW 274
42176: ST_TO_ADDR
// if not pom then
42177: LD_VAR 0 3
42181: NOT
42182: IFFALSE 42186
// exit ;
42184: GO 42356
// btype := GetBType ( building ) ;
42186: LD_ADDR_VAR 0 5
42190: PUSH
42191: LD_VAR 0 1
42195: PPUSH
42196: CALL_OW 266
42200: ST_TO_ADDR
// if btype = b_armoury then
42201: LD_VAR 0 5
42205: PUSH
42206: LD_INT 4
42208: EQUAL
42209: IFFALSE 42219
// btype := b_barracks ;
42211: LD_ADDR_VAR 0 5
42215: PUSH
42216: LD_INT 5
42218: ST_TO_ADDR
// if btype = b_depot then
42219: LD_VAR 0 5
42223: PUSH
42224: LD_INT 0
42226: EQUAL
42227: IFFALSE 42237
// btype := b_warehouse ;
42229: LD_ADDR_VAR 0 5
42233: PUSH
42234: LD_INT 1
42236: ST_TO_ADDR
// if btype = b_workshop then
42237: LD_VAR 0 5
42241: PUSH
42242: LD_INT 2
42244: EQUAL
42245: IFFALSE 42255
// btype := b_factory ;
42247: LD_ADDR_VAR 0 5
42251: PUSH
42252: LD_INT 3
42254: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42255: LD_ADDR_VAR 0 4
42259: PUSH
42260: LD_VAR 0 5
42264: PPUSH
42265: LD_VAR 0 1
42269: PPUSH
42270: CALL_OW 248
42274: PPUSH
42275: CALL_OW 450
42279: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42280: LD_ADDR_VAR 0 2
42284: PUSH
42285: LD_VAR 0 3
42289: PPUSH
42290: LD_INT 1
42292: PPUSH
42293: CALL_OW 275
42297: PUSH
42298: LD_VAR 0 4
42302: PUSH
42303: LD_INT 1
42305: ARRAY
42306: GREATEREQUAL
42307: PUSH
42308: LD_VAR 0 3
42312: PPUSH
42313: LD_INT 2
42315: PPUSH
42316: CALL_OW 275
42320: PUSH
42321: LD_VAR 0 4
42325: PUSH
42326: LD_INT 2
42328: ARRAY
42329: GREATEREQUAL
42330: AND
42331: PUSH
42332: LD_VAR 0 3
42336: PPUSH
42337: LD_INT 3
42339: PPUSH
42340: CALL_OW 275
42344: PUSH
42345: LD_VAR 0 4
42349: PUSH
42350: LD_INT 3
42352: ARRAY
42353: GREATEREQUAL
42354: AND
42355: ST_TO_ADDR
// end ;
42356: LD_VAR 0 2
42360: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42361: LD_INT 0
42363: PPUSH
42364: PPUSH
42365: PPUSH
// pom := GetBase ( building ) ;
42366: LD_ADDR_VAR 0 4
42370: PUSH
42371: LD_VAR 0 1
42375: PPUSH
42376: CALL_OW 274
42380: ST_TO_ADDR
// if not pom then
42381: LD_VAR 0 4
42385: NOT
42386: IFFALSE 42390
// exit ;
42388: GO 42491
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42390: LD_ADDR_VAR 0 5
42394: PUSH
42395: LD_VAR 0 2
42399: PPUSH
42400: LD_VAR 0 1
42404: PPUSH
42405: CALL_OW 248
42409: PPUSH
42410: CALL_OW 450
42414: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42415: LD_ADDR_VAR 0 3
42419: PUSH
42420: LD_VAR 0 4
42424: PPUSH
42425: LD_INT 1
42427: PPUSH
42428: CALL_OW 275
42432: PUSH
42433: LD_VAR 0 5
42437: PUSH
42438: LD_INT 1
42440: ARRAY
42441: GREATEREQUAL
42442: PUSH
42443: LD_VAR 0 4
42447: PPUSH
42448: LD_INT 2
42450: PPUSH
42451: CALL_OW 275
42455: PUSH
42456: LD_VAR 0 5
42460: PUSH
42461: LD_INT 2
42463: ARRAY
42464: GREATEREQUAL
42465: AND
42466: PUSH
42467: LD_VAR 0 4
42471: PPUSH
42472: LD_INT 3
42474: PPUSH
42475: CALL_OW 275
42479: PUSH
42480: LD_VAR 0 5
42484: PUSH
42485: LD_INT 3
42487: ARRAY
42488: GREATEREQUAL
42489: AND
42490: ST_TO_ADDR
// end ;
42491: LD_VAR 0 3
42495: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42496: LD_INT 0
42498: PPUSH
42499: PPUSH
42500: PPUSH
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
42505: PPUSH
42506: PPUSH
42507: PPUSH
42508: PPUSH
// result := false ;
42509: LD_ADDR_VAR 0 8
42513: PUSH
42514: LD_INT 0
42516: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42517: LD_VAR 0 5
42521: NOT
42522: PUSH
42523: LD_VAR 0 1
42527: NOT
42528: OR
42529: PUSH
42530: LD_VAR 0 2
42534: NOT
42535: OR
42536: PUSH
42537: LD_VAR 0 3
42541: NOT
42542: OR
42543: IFFALSE 42547
// exit ;
42545: GO 43361
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42547: LD_ADDR_VAR 0 14
42551: PUSH
42552: LD_VAR 0 1
42556: PPUSH
42557: LD_VAR 0 2
42561: PPUSH
42562: LD_VAR 0 3
42566: PPUSH
42567: LD_VAR 0 4
42571: PPUSH
42572: LD_VAR 0 5
42576: PUSH
42577: LD_INT 1
42579: ARRAY
42580: PPUSH
42581: CALL_OW 248
42585: PPUSH
42586: LD_INT 0
42588: PPUSH
42589: CALL 44594 0 6
42593: ST_TO_ADDR
// if not hexes then
42594: LD_VAR 0 14
42598: NOT
42599: IFFALSE 42603
// exit ;
42601: GO 43361
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42603: LD_ADDR_VAR 0 17
42607: PUSH
42608: LD_VAR 0 5
42612: PPUSH
42613: LD_INT 22
42615: PUSH
42616: LD_VAR 0 13
42620: PPUSH
42621: CALL_OW 255
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: LD_INT 30
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 30
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: LIST
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PPUSH
42662: CALL_OW 72
42666: ST_TO_ADDR
// for i = 1 to hexes do
42667: LD_ADDR_VAR 0 9
42671: PUSH
42672: DOUBLE
42673: LD_INT 1
42675: DEC
42676: ST_TO_ADDR
42677: LD_VAR 0 14
42681: PUSH
42682: FOR_TO
42683: IFFALSE 43359
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42685: LD_ADDR_VAR 0 13
42689: PUSH
42690: LD_VAR 0 14
42694: PUSH
42695: LD_VAR 0 9
42699: ARRAY
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: PPUSH
42705: LD_VAR 0 14
42709: PUSH
42710: LD_VAR 0 9
42714: ARRAY
42715: PUSH
42716: LD_INT 2
42718: ARRAY
42719: PPUSH
42720: CALL_OW 428
42724: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42725: LD_VAR 0 14
42729: PUSH
42730: LD_VAR 0 9
42734: ARRAY
42735: PUSH
42736: LD_INT 1
42738: ARRAY
42739: PPUSH
42740: LD_VAR 0 14
42744: PUSH
42745: LD_VAR 0 9
42749: ARRAY
42750: PUSH
42751: LD_INT 2
42753: ARRAY
42754: PPUSH
42755: CALL_OW 351
42759: PUSH
42760: LD_VAR 0 14
42764: PUSH
42765: LD_VAR 0 9
42769: ARRAY
42770: PUSH
42771: LD_INT 1
42773: ARRAY
42774: PPUSH
42775: LD_VAR 0 14
42779: PUSH
42780: LD_VAR 0 9
42784: ARRAY
42785: PUSH
42786: LD_INT 2
42788: ARRAY
42789: PPUSH
42790: CALL_OW 488
42794: NOT
42795: OR
42796: PUSH
42797: LD_VAR 0 13
42801: PPUSH
42802: CALL_OW 247
42806: PUSH
42807: LD_INT 3
42809: EQUAL
42810: OR
42811: IFFALSE 42817
// exit ;
42813: POP
42814: POP
42815: GO 43361
// if not tmp then
42817: LD_VAR 0 13
42821: NOT
42822: IFFALSE 42826
// continue ;
42824: GO 42682
// result := true ;
42826: LD_ADDR_VAR 0 8
42830: PUSH
42831: LD_INT 1
42833: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42834: LD_VAR 0 6
42838: PUSH
42839: LD_VAR 0 13
42843: PPUSH
42844: CALL_OW 247
42848: PUSH
42849: LD_INT 2
42851: EQUAL
42852: AND
42853: PUSH
42854: LD_VAR 0 13
42858: PPUSH
42859: CALL_OW 263
42863: PUSH
42864: LD_INT 1
42866: EQUAL
42867: AND
42868: IFFALSE 43032
// begin if IsDrivenBy ( tmp ) then
42870: LD_VAR 0 13
42874: PPUSH
42875: CALL_OW 311
42879: IFFALSE 42883
// continue ;
42881: GO 42682
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42883: LD_VAR 0 6
42887: PPUSH
42888: LD_INT 3
42890: PUSH
42891: LD_INT 60
42893: PUSH
42894: EMPTY
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 3
42903: PUSH
42904: LD_INT 55
42906: PUSH
42907: EMPTY
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PPUSH
42918: CALL_OW 72
42922: IFFALSE 43030
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42924: LD_ADDR_VAR 0 18
42928: PUSH
42929: LD_VAR 0 6
42933: PPUSH
42934: LD_INT 3
42936: PUSH
42937: LD_INT 60
42939: PUSH
42940: EMPTY
42941: LIST
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 3
42949: PUSH
42950: LD_INT 55
42952: PUSH
42953: EMPTY
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PPUSH
42964: CALL_OW 72
42968: PUSH
42969: LD_INT 1
42971: ARRAY
42972: ST_TO_ADDR
// if IsInUnit ( driver ) then
42973: LD_VAR 0 18
42977: PPUSH
42978: CALL_OW 310
42982: IFFALSE 42993
// ComExit ( driver ) ;
42984: LD_VAR 0 18
42988: PPUSH
42989: CALL 68374 0 1
// AddComEnterUnit ( driver , tmp ) ;
42993: LD_VAR 0 18
42997: PPUSH
42998: LD_VAR 0 13
43002: PPUSH
43003: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43007: LD_VAR 0 18
43011: PPUSH
43012: LD_VAR 0 7
43016: PPUSH
43017: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43021: LD_VAR 0 18
43025: PPUSH
43026: CALL_OW 181
// end ; continue ;
43030: GO 42682
// end ; if not cleaners or not tmp in cleaners then
43032: LD_VAR 0 6
43036: NOT
43037: PUSH
43038: LD_VAR 0 13
43042: PUSH
43043: LD_VAR 0 6
43047: IN
43048: NOT
43049: OR
43050: IFFALSE 43357
// begin if dep then
43052: LD_VAR 0 17
43056: IFFALSE 43192
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43058: LD_ADDR_VAR 0 16
43062: PUSH
43063: LD_VAR 0 17
43067: PUSH
43068: LD_INT 1
43070: ARRAY
43071: PPUSH
43072: CALL_OW 250
43076: PPUSH
43077: LD_VAR 0 17
43081: PUSH
43082: LD_INT 1
43084: ARRAY
43085: PPUSH
43086: CALL_OW 254
43090: PPUSH
43091: LD_INT 5
43093: PPUSH
43094: CALL_OW 272
43098: PUSH
43099: LD_VAR 0 17
43103: PUSH
43104: LD_INT 1
43106: ARRAY
43107: PPUSH
43108: CALL_OW 251
43112: PPUSH
43113: LD_VAR 0 17
43117: PUSH
43118: LD_INT 1
43120: ARRAY
43121: PPUSH
43122: CALL_OW 254
43126: PPUSH
43127: LD_INT 5
43129: PPUSH
43130: CALL_OW 273
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43139: LD_VAR 0 16
43143: PUSH
43144: LD_INT 1
43146: ARRAY
43147: PPUSH
43148: LD_VAR 0 16
43152: PUSH
43153: LD_INT 2
43155: ARRAY
43156: PPUSH
43157: CALL_OW 488
43161: IFFALSE 43192
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43163: LD_VAR 0 13
43167: PPUSH
43168: LD_VAR 0 16
43172: PUSH
43173: LD_INT 1
43175: ARRAY
43176: PPUSH
43177: LD_VAR 0 16
43181: PUSH
43182: LD_INT 2
43184: ARRAY
43185: PPUSH
43186: CALL_OW 111
// continue ;
43190: GO 42682
// end ; end ; r := GetDir ( tmp ) ;
43192: LD_ADDR_VAR 0 15
43196: PUSH
43197: LD_VAR 0 13
43201: PPUSH
43202: CALL_OW 254
43206: ST_TO_ADDR
// if r = 5 then
43207: LD_VAR 0 15
43211: PUSH
43212: LD_INT 5
43214: EQUAL
43215: IFFALSE 43225
// r := 0 ;
43217: LD_ADDR_VAR 0 15
43221: PUSH
43222: LD_INT 0
43224: ST_TO_ADDR
// for j = r to 5 do
43225: LD_ADDR_VAR 0 10
43229: PUSH
43230: DOUBLE
43231: LD_VAR 0 15
43235: DEC
43236: ST_TO_ADDR
43237: LD_INT 5
43239: PUSH
43240: FOR_TO
43241: IFFALSE 43355
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43243: LD_ADDR_VAR 0 11
43247: PUSH
43248: LD_VAR 0 13
43252: PPUSH
43253: CALL_OW 250
43257: PPUSH
43258: LD_VAR 0 10
43262: PPUSH
43263: LD_INT 2
43265: PPUSH
43266: CALL_OW 272
43270: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43271: LD_ADDR_VAR 0 12
43275: PUSH
43276: LD_VAR 0 13
43280: PPUSH
43281: CALL_OW 251
43285: PPUSH
43286: LD_VAR 0 10
43290: PPUSH
43291: LD_INT 2
43293: PPUSH
43294: CALL_OW 273
43298: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43299: LD_VAR 0 11
43303: PPUSH
43304: LD_VAR 0 12
43308: PPUSH
43309: CALL_OW 488
43313: PUSH
43314: LD_VAR 0 11
43318: PPUSH
43319: LD_VAR 0 12
43323: PPUSH
43324: CALL_OW 428
43328: NOT
43329: AND
43330: IFFALSE 43353
// begin ComMoveXY ( tmp , _x , _y ) ;
43332: LD_VAR 0 13
43336: PPUSH
43337: LD_VAR 0 11
43341: PPUSH
43342: LD_VAR 0 12
43346: PPUSH
43347: CALL_OW 111
// break ;
43351: GO 43355
// end ; end ;
43353: GO 43240
43355: POP
43356: POP
// end ; end ;
43357: GO 42682
43359: POP
43360: POP
// end ;
43361: LD_VAR 0 8
43365: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43366: LD_INT 0
43368: PPUSH
// result := true ;
43369: LD_ADDR_VAR 0 3
43373: PUSH
43374: LD_INT 1
43376: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43377: LD_VAR 0 2
43381: PUSH
43382: LD_INT 24
43384: DOUBLE
43385: EQUAL
43386: IFTRUE 43396
43388: LD_INT 33
43390: DOUBLE
43391: EQUAL
43392: IFTRUE 43396
43394: GO 43421
43396: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43397: LD_ADDR_VAR 0 3
43401: PUSH
43402: LD_INT 32
43404: PPUSH
43405: LD_VAR 0 1
43409: PPUSH
43410: CALL_OW 321
43414: PUSH
43415: LD_INT 2
43417: EQUAL
43418: ST_TO_ADDR
43419: GO 43737
43421: LD_INT 20
43423: DOUBLE
43424: EQUAL
43425: IFTRUE 43429
43427: GO 43454
43429: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43430: LD_ADDR_VAR 0 3
43434: PUSH
43435: LD_INT 6
43437: PPUSH
43438: LD_VAR 0 1
43442: PPUSH
43443: CALL_OW 321
43447: PUSH
43448: LD_INT 2
43450: EQUAL
43451: ST_TO_ADDR
43452: GO 43737
43454: LD_INT 22
43456: DOUBLE
43457: EQUAL
43458: IFTRUE 43468
43460: LD_INT 36
43462: DOUBLE
43463: EQUAL
43464: IFTRUE 43468
43466: GO 43493
43468: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43469: LD_ADDR_VAR 0 3
43473: PUSH
43474: LD_INT 15
43476: PPUSH
43477: LD_VAR 0 1
43481: PPUSH
43482: CALL_OW 321
43486: PUSH
43487: LD_INT 2
43489: EQUAL
43490: ST_TO_ADDR
43491: GO 43737
43493: LD_INT 30
43495: DOUBLE
43496: EQUAL
43497: IFTRUE 43501
43499: GO 43526
43501: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_INT 20
43509: PPUSH
43510: LD_VAR 0 1
43514: PPUSH
43515: CALL_OW 321
43519: PUSH
43520: LD_INT 2
43522: EQUAL
43523: ST_TO_ADDR
43524: GO 43737
43526: LD_INT 28
43528: DOUBLE
43529: EQUAL
43530: IFTRUE 43540
43532: LD_INT 21
43534: DOUBLE
43535: EQUAL
43536: IFTRUE 43540
43538: GO 43565
43540: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_INT 21
43548: PPUSH
43549: LD_VAR 0 1
43553: PPUSH
43554: CALL_OW 321
43558: PUSH
43559: LD_INT 2
43561: EQUAL
43562: ST_TO_ADDR
43563: GO 43737
43565: LD_INT 16
43567: DOUBLE
43568: EQUAL
43569: IFTRUE 43573
43571: GO 43598
43573: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43574: LD_ADDR_VAR 0 3
43578: PUSH
43579: LD_INT 84
43581: PPUSH
43582: LD_VAR 0 1
43586: PPUSH
43587: CALL_OW 321
43591: PUSH
43592: LD_INT 2
43594: EQUAL
43595: ST_TO_ADDR
43596: GO 43737
43598: LD_INT 19
43600: DOUBLE
43601: EQUAL
43602: IFTRUE 43612
43604: LD_INT 23
43606: DOUBLE
43607: EQUAL
43608: IFTRUE 43612
43610: GO 43637
43612: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43613: LD_ADDR_VAR 0 3
43617: PUSH
43618: LD_INT 83
43620: PPUSH
43621: LD_VAR 0 1
43625: PPUSH
43626: CALL_OW 321
43630: PUSH
43631: LD_INT 2
43633: EQUAL
43634: ST_TO_ADDR
43635: GO 43737
43637: LD_INT 17
43639: DOUBLE
43640: EQUAL
43641: IFTRUE 43645
43643: GO 43670
43645: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43646: LD_ADDR_VAR 0 3
43650: PUSH
43651: LD_INT 39
43653: PPUSH
43654: LD_VAR 0 1
43658: PPUSH
43659: CALL_OW 321
43663: PUSH
43664: LD_INT 2
43666: EQUAL
43667: ST_TO_ADDR
43668: GO 43737
43670: LD_INT 18
43672: DOUBLE
43673: EQUAL
43674: IFTRUE 43678
43676: GO 43703
43678: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43679: LD_ADDR_VAR 0 3
43683: PUSH
43684: LD_INT 40
43686: PPUSH
43687: LD_VAR 0 1
43691: PPUSH
43692: CALL_OW 321
43696: PUSH
43697: LD_INT 2
43699: EQUAL
43700: ST_TO_ADDR
43701: GO 43737
43703: LD_INT 27
43705: DOUBLE
43706: EQUAL
43707: IFTRUE 43711
43709: GO 43736
43711: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43712: LD_ADDR_VAR 0 3
43716: PUSH
43717: LD_INT 35
43719: PPUSH
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 321
43729: PUSH
43730: LD_INT 2
43732: EQUAL
43733: ST_TO_ADDR
43734: GO 43737
43736: POP
// end ;
43737: LD_VAR 0 3
43741: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43742: LD_INT 0
43744: PPUSH
43745: PPUSH
43746: PPUSH
43747: PPUSH
43748: PPUSH
43749: PPUSH
43750: PPUSH
43751: PPUSH
43752: PPUSH
43753: PPUSH
43754: PPUSH
// result := false ;
43755: LD_ADDR_VAR 0 6
43759: PUSH
43760: LD_INT 0
43762: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43763: LD_VAR 0 1
43767: NOT
43768: PUSH
43769: LD_VAR 0 1
43773: PPUSH
43774: CALL_OW 266
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: IN
43789: NOT
43790: OR
43791: PUSH
43792: LD_VAR 0 2
43796: NOT
43797: OR
43798: PUSH
43799: LD_VAR 0 5
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: LD_INT 3
43815: PUSH
43816: LD_INT 4
43818: PUSH
43819: LD_INT 5
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: IN
43830: NOT
43831: OR
43832: PUSH
43833: LD_VAR 0 3
43837: PPUSH
43838: LD_VAR 0 4
43842: PPUSH
43843: CALL_OW 488
43847: NOT
43848: OR
43849: IFFALSE 43853
// exit ;
43851: GO 44589
// side := GetSide ( depot ) ;
43853: LD_ADDR_VAR 0 9
43857: PUSH
43858: LD_VAR 0 1
43862: PPUSH
43863: CALL_OW 255
43867: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43868: LD_VAR 0 9
43872: PPUSH
43873: LD_VAR 0 2
43877: PPUSH
43878: CALL 43366 0 2
43882: NOT
43883: IFFALSE 43887
// exit ;
43885: GO 44589
// pom := GetBase ( depot ) ;
43887: LD_ADDR_VAR 0 10
43891: PUSH
43892: LD_VAR 0 1
43896: PPUSH
43897: CALL_OW 274
43901: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43902: LD_ADDR_VAR 0 11
43906: PUSH
43907: LD_VAR 0 2
43911: PPUSH
43912: LD_VAR 0 1
43916: PPUSH
43917: CALL_OW 248
43921: PPUSH
43922: CALL_OW 450
43926: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43927: LD_VAR 0 10
43931: PPUSH
43932: LD_INT 1
43934: PPUSH
43935: CALL_OW 275
43939: PUSH
43940: LD_VAR 0 11
43944: PUSH
43945: LD_INT 1
43947: ARRAY
43948: GREATEREQUAL
43949: PUSH
43950: LD_VAR 0 10
43954: PPUSH
43955: LD_INT 2
43957: PPUSH
43958: CALL_OW 275
43962: PUSH
43963: LD_VAR 0 11
43967: PUSH
43968: LD_INT 2
43970: ARRAY
43971: GREATEREQUAL
43972: AND
43973: PUSH
43974: LD_VAR 0 10
43978: PPUSH
43979: LD_INT 3
43981: PPUSH
43982: CALL_OW 275
43986: PUSH
43987: LD_VAR 0 11
43991: PUSH
43992: LD_INT 3
43994: ARRAY
43995: GREATEREQUAL
43996: AND
43997: NOT
43998: IFFALSE 44002
// exit ;
44000: GO 44589
// if GetBType ( depot ) = b_depot then
44002: LD_VAR 0 1
44006: PPUSH
44007: CALL_OW 266
44011: PUSH
44012: LD_INT 0
44014: EQUAL
44015: IFFALSE 44027
// dist := 28 else
44017: LD_ADDR_VAR 0 14
44021: PUSH
44022: LD_INT 28
44024: ST_TO_ADDR
44025: GO 44035
// dist := 36 ;
44027: LD_ADDR_VAR 0 14
44031: PUSH
44032: LD_INT 36
44034: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44035: LD_VAR 0 1
44039: PPUSH
44040: LD_VAR 0 3
44044: PPUSH
44045: LD_VAR 0 4
44049: PPUSH
44050: CALL_OW 297
44054: PUSH
44055: LD_VAR 0 14
44059: GREATER
44060: IFFALSE 44064
// exit ;
44062: GO 44589
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44064: LD_ADDR_VAR 0 12
44068: PUSH
44069: LD_VAR 0 2
44073: PPUSH
44074: LD_VAR 0 3
44078: PPUSH
44079: LD_VAR 0 4
44083: PPUSH
44084: LD_VAR 0 5
44088: PPUSH
44089: LD_VAR 0 1
44093: PPUSH
44094: CALL_OW 248
44098: PPUSH
44099: LD_INT 0
44101: PPUSH
44102: CALL 44594 0 6
44106: ST_TO_ADDR
// if not hexes then
44107: LD_VAR 0 12
44111: NOT
44112: IFFALSE 44116
// exit ;
44114: GO 44589
// hex := GetHexInfo ( x , y ) ;
44116: LD_ADDR_VAR 0 15
44120: PUSH
44121: LD_VAR 0 3
44125: PPUSH
44126: LD_VAR 0 4
44130: PPUSH
44131: CALL_OW 546
44135: ST_TO_ADDR
// if hex [ 1 ] then
44136: LD_VAR 0 15
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: IFFALSE 44148
// exit ;
44146: GO 44589
// height := hex [ 2 ] ;
44148: LD_ADDR_VAR 0 13
44152: PUSH
44153: LD_VAR 0 15
44157: PUSH
44158: LD_INT 2
44160: ARRAY
44161: ST_TO_ADDR
// for i = 1 to hexes do
44162: LD_ADDR_VAR 0 7
44166: PUSH
44167: DOUBLE
44168: LD_INT 1
44170: DEC
44171: ST_TO_ADDR
44172: LD_VAR 0 12
44176: PUSH
44177: FOR_TO
44178: IFFALSE 44508
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44180: LD_VAR 0 12
44184: PUSH
44185: LD_VAR 0 7
44189: ARRAY
44190: PUSH
44191: LD_INT 1
44193: ARRAY
44194: PPUSH
44195: LD_VAR 0 12
44199: PUSH
44200: LD_VAR 0 7
44204: ARRAY
44205: PUSH
44206: LD_INT 2
44208: ARRAY
44209: PPUSH
44210: CALL_OW 488
44214: NOT
44215: PUSH
44216: LD_VAR 0 12
44220: PUSH
44221: LD_VAR 0 7
44225: ARRAY
44226: PUSH
44227: LD_INT 1
44229: ARRAY
44230: PPUSH
44231: LD_VAR 0 12
44235: PUSH
44236: LD_VAR 0 7
44240: ARRAY
44241: PUSH
44242: LD_INT 2
44244: ARRAY
44245: PPUSH
44246: CALL_OW 428
44250: PUSH
44251: LD_INT 0
44253: GREATER
44254: OR
44255: PUSH
44256: LD_VAR 0 12
44260: PUSH
44261: LD_VAR 0 7
44265: ARRAY
44266: PUSH
44267: LD_INT 1
44269: ARRAY
44270: PPUSH
44271: LD_VAR 0 12
44275: PUSH
44276: LD_VAR 0 7
44280: ARRAY
44281: PUSH
44282: LD_INT 2
44284: ARRAY
44285: PPUSH
44286: CALL_OW 351
44290: OR
44291: IFFALSE 44297
// exit ;
44293: POP
44294: POP
44295: GO 44589
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44297: LD_ADDR_VAR 0 8
44301: PUSH
44302: LD_VAR 0 12
44306: PUSH
44307: LD_VAR 0 7
44311: ARRAY
44312: PUSH
44313: LD_INT 1
44315: ARRAY
44316: PPUSH
44317: LD_VAR 0 12
44321: PUSH
44322: LD_VAR 0 7
44326: ARRAY
44327: PUSH
44328: LD_INT 2
44330: ARRAY
44331: PPUSH
44332: CALL_OW 546
44336: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44337: LD_VAR 0 8
44341: PUSH
44342: LD_INT 1
44344: ARRAY
44345: PUSH
44346: LD_VAR 0 8
44350: PUSH
44351: LD_INT 2
44353: ARRAY
44354: PUSH
44355: LD_VAR 0 13
44359: PUSH
44360: LD_INT 2
44362: PLUS
44363: GREATER
44364: OR
44365: PUSH
44366: LD_VAR 0 8
44370: PUSH
44371: LD_INT 2
44373: ARRAY
44374: PUSH
44375: LD_VAR 0 13
44379: PUSH
44380: LD_INT 2
44382: MINUS
44383: LESS
44384: OR
44385: PUSH
44386: LD_VAR 0 8
44390: PUSH
44391: LD_INT 3
44393: ARRAY
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 8
44400: PUSH
44401: LD_INT 9
44403: PUSH
44404: LD_INT 10
44406: PUSH
44407: LD_INT 11
44409: PUSH
44410: LD_INT 12
44412: PUSH
44413: LD_INT 13
44415: PUSH
44416: LD_INT 16
44418: PUSH
44419: LD_INT 17
44421: PUSH
44422: LD_INT 18
44424: PUSH
44425: LD_INT 19
44427: PUSH
44428: LD_INT 20
44430: PUSH
44431: LD_INT 21
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: IN
44449: NOT
44450: OR
44451: PUSH
44452: LD_VAR 0 8
44456: PUSH
44457: LD_INT 5
44459: ARRAY
44460: NOT
44461: OR
44462: PUSH
44463: LD_VAR 0 8
44467: PUSH
44468: LD_INT 6
44470: ARRAY
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 7
44480: PUSH
44481: LD_INT 9
44483: PUSH
44484: LD_INT 10
44486: PUSH
44487: LD_INT 11
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: IN
44498: NOT
44499: OR
44500: IFFALSE 44506
// exit ;
44502: POP
44503: POP
44504: GO 44589
// end ;
44506: GO 44177
44508: POP
44509: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44510: LD_VAR 0 9
44514: PPUSH
44515: LD_VAR 0 3
44519: PPUSH
44520: LD_VAR 0 4
44524: PPUSH
44525: LD_INT 20
44527: PPUSH
44528: CALL 36541 0 4
44532: PUSH
44533: LD_INT 4
44535: ARRAY
44536: IFFALSE 44540
// exit ;
44538: GO 44589
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44540: LD_VAR 0 2
44544: PUSH
44545: LD_INT 29
44547: PUSH
44548: LD_INT 30
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: IN
44555: PUSH
44556: LD_VAR 0 3
44560: PPUSH
44561: LD_VAR 0 4
44565: PPUSH
44566: LD_VAR 0 9
44570: PPUSH
44571: CALL_OW 440
44575: NOT
44576: AND
44577: IFFALSE 44581
// exit ;
44579: GO 44589
// result := true ;
44581: LD_ADDR_VAR 0 6
44585: PUSH
44586: LD_INT 1
44588: ST_TO_ADDR
// end ;
44589: LD_VAR 0 6
44593: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44594: LD_INT 0
44596: PPUSH
44597: PPUSH
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
44604: PPUSH
44605: PPUSH
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
// result = [ ] ;
44654: LD_ADDR_VAR 0 7
44658: PUSH
44659: EMPTY
44660: ST_TO_ADDR
// temp_list = [ ] ;
44661: LD_ADDR_VAR 0 9
44665: PUSH
44666: EMPTY
44667: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44668: LD_VAR 0 4
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: LD_INT 4
44687: PUSH
44688: LD_INT 5
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: IN
44699: NOT
44700: PUSH
44701: LD_VAR 0 1
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: IN
44716: PUSH
44717: LD_VAR 0 5
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: IN
44736: NOT
44737: AND
44738: OR
44739: IFFALSE 44743
// exit ;
44741: GO 63134
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44743: LD_VAR 0 1
44747: PUSH
44748: LD_INT 6
44750: PUSH
44751: LD_INT 7
44753: PUSH
44754: LD_INT 8
44756: PUSH
44757: LD_INT 13
44759: PUSH
44760: LD_INT 12
44762: PUSH
44763: LD_INT 15
44765: PUSH
44766: LD_INT 11
44768: PUSH
44769: LD_INT 14
44771: PUSH
44772: LD_INT 10
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: IN
44786: IFFALSE 44796
// btype = b_lab ;
44788: LD_ADDR_VAR 0 1
44792: PUSH
44793: LD_INT 6
44795: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44796: LD_VAR 0 6
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: IN
44815: NOT
44816: PUSH
44817: LD_VAR 0 1
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 3
44833: PUSH
44834: LD_INT 6
44836: PUSH
44837: LD_INT 36
44839: PUSH
44840: LD_INT 4
44842: PUSH
44843: LD_INT 5
44845: PUSH
44846: LD_INT 31
44848: PUSH
44849: LD_INT 32
44851: PUSH
44852: LD_INT 33
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: IN
44868: NOT
44869: PUSH
44870: LD_VAR 0 6
44874: PUSH
44875: LD_INT 1
44877: EQUAL
44878: AND
44879: OR
44880: PUSH
44881: LD_VAR 0 1
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: IN
44896: NOT
44897: PUSH
44898: LD_VAR 0 6
44902: PUSH
44903: LD_INT 2
44905: EQUAL
44906: AND
44907: OR
44908: IFFALSE 44918
// mode = 0 ;
44910: LD_ADDR_VAR 0 6
44914: PUSH
44915: LD_INT 0
44917: ST_TO_ADDR
// case mode of 0 :
44918: LD_VAR 0 6
44922: PUSH
44923: LD_INT 0
44925: DOUBLE
44926: EQUAL
44927: IFTRUE 44931
44929: GO 56384
44931: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44932: LD_ADDR_VAR 0 11
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 3
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 3
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45125: LD_ADDR_VAR 0 12
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 3
45282: NEG
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45321: LD_ADDR_VAR 0 13
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 3
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 3
45480: NEG
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 3
45492: NEG
45493: PUSH
45494: LD_INT 3
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45520: LD_ADDR_VAR 0 14
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 3
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45716: LD_ADDR_VAR 0 15
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45909: LD_ADDR_VAR 0 16
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 3
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46102: LD_ADDR_VAR 0 17
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46332: LD_ADDR_VAR 0 18
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46562: LD_ADDR_VAR 0 19
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46792: LD_ADDR_VAR 0 20
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47022: LD_ADDR_VAR 0 21
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47252: LD_ADDR_VAR 0 22
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47482: LD_ADDR_VAR 0 23
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: LD_INT 3
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 3
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47762: LD_ADDR_VAR 0 24
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 3
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 3
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48038: LD_ADDR_VAR 0 25
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: PUSH
48270: LD_INT 3
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48312: LD_ADDR_VAR 0 26
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48588: LD_ADDR_VAR 0 27
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48868: LD_ADDR_VAR 0 28
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: NEG
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 3
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 3
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49150: LD_ADDR_VAR 0 29
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 3
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 3
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 3
49394: NEG
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49429: LD_ADDR_VAR 0 30
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 3
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 3
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49707: LD_ADDR_VAR 0 31
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49985: LD_ADDR_VAR 0 32
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: LD_INT 3
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 3
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50263: LD_ADDR_VAR 0 33
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 3
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 3
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50542: LD_ADDR_VAR 0 34
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50822: LD_ADDR_VAR 0 35
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50934: LD_ADDR_VAR 0 36
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51046: LD_ADDR_VAR 0 37
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51158: LD_ADDR_VAR 0 38
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51270: LD_ADDR_VAR 0 39
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51382: LD_ADDR_VAR 0 40
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51494: LD_ADDR_VAR 0 41
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 3
51803: NEG
51804: PUSH
51805: LD_INT 3
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51844: LD_ADDR_VAR 0 42
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 3
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: NEG
52154: PUSH
52155: LD_INT 3
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52194: LD_ADDR_VAR 0 43
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 3
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52542: LD_ADDR_VAR 0 44
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 3
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 3
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: LD_INT 3
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52892: LD_ADDR_VAR 0 45
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 3
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: LD_INT 3
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 3
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: NEG
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: NEG
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53242: LD_ADDR_VAR 0 46
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 3
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 3
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53590: LD_ADDR_VAR 0 47
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53741: LD_ADDR_VAR 0 48
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53888: LD_ADDR_VAR 0 49
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54032: LD_ADDR_VAR 0 50
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54176: LD_ADDR_VAR 0 51
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54323: LD_ADDR_VAR 0 52
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54474: LD_ADDR_VAR 0 53
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54704: LD_ADDR_VAR 0 54
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54934: LD_ADDR_VAR 0 55
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55164: LD_ADDR_VAR 0 56
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55394: LD_ADDR_VAR 0 57
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55624: LD_ADDR_VAR 0 58
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55854: LD_ADDR_VAR 0 59
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55942: LD_ADDR_VAR 0 60
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56030: LD_ADDR_VAR 0 61
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56118: LD_ADDR_VAR 0 62
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56206: LD_ADDR_VAR 0 63
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56294: LD_ADDR_VAR 0 64
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// end ; 1 :
56382: GO 62279
56384: LD_INT 1
56386: DOUBLE
56387: EQUAL
56388: IFTRUE 56392
56390: GO 59015
56392: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56393: LD_ADDR_VAR 0 11
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56437: LD_ADDR_VAR 0 12
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 3
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56478: LD_ADDR_VAR 0 13
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: LIST
56517: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56518: LD_ADDR_VAR 0 14
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56559: LD_ADDR_VAR 0 15
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 3
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56603: LD_ADDR_VAR 0 16
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: LD_INT 3
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: LIST
56648: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56649: LD_ADDR_VAR 0 17
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56693: LD_ADDR_VAR 0 18
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56734: LD_ADDR_VAR 0 19
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56774: LD_ADDR_VAR 0 20
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56815: LD_ADDR_VAR 0 21
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: LIST
56858: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56859: LD_ADDR_VAR 0 22
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: LD_INT 3
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 3
56890: NEG
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56905: LD_ADDR_VAR 0 23
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 4
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56949: LD_ADDR_VAR 0 24
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 4
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56990: LD_ADDR_VAR 0 25
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: LD_INT 4
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: LIST
57029: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57030: LD_ADDR_VAR 0 26
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 4
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: LIST
57070: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57071: LD_ADDR_VAR 0 27
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 4
57100: NEG
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57115: LD_ADDR_VAR 0 28
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: NEG
57135: PUSH
57136: LD_INT 4
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 4
57146: NEG
57147: PUSH
57148: LD_INT 3
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57161: LD_ADDR_VAR 0 29
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 3
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 3
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 4
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 4
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 5
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 5
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 4
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 6
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 6
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 5
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57316: LD_ADDR_VAR 0 30
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 4
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 4
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 4
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 5
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 5
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 5
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 6
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 6
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57459: LD_ADDR_VAR 0 31
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 3
57476: PUSH
57477: LD_INT 3
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 4
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: PUSH
57517: LD_INT 4
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 5
57526: PUSH
57527: LD_INT 4
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 5
57536: PUSH
57537: LD_INT 5
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 4
57546: PUSH
57547: LD_INT 5
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 6
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 6
57566: PUSH
57567: LD_INT 6
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 5
57576: PUSH
57577: LD_INT 6
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57598: LD_ADDR_VAR 0 32
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 4
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 4
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 3
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 5
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 5
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 6
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 6
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 5
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57741: LD_ADDR_VAR 0 33
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 4
57793: NEG
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 4
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 5
57827: NEG
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 5
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 5
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 6
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 6
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57896: LD_ADDR_VAR 0 34
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: LD_INT 3
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: LD_INT 4
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 4
57951: NEG
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 4
57963: NEG
57964: PUSH
57965: LD_INT 4
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 4
57975: NEG
57976: PUSH
57977: LD_INT 5
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 5
57987: NEG
57988: PUSH
57989: LD_INT 4
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 5
57999: NEG
58000: PUSH
58001: LD_INT 5
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 5
58011: NEG
58012: PUSH
58013: LD_INT 6
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 6
58023: NEG
58024: PUSH
58025: LD_INT 5
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 6
58035: NEG
58036: PUSH
58037: LD_INT 6
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58059: LD_ADDR_VAR 0 41
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58103: LD_ADDR_VAR 0 42
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58144: LD_ADDR_VAR 0 43
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58184: LD_ADDR_VAR 0 44
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58225: LD_ADDR_VAR 0 45
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58269: LD_ADDR_VAR 0 46
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 3
58300: NEG
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58315: LD_ADDR_VAR 0 47
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58348: LD_ADDR_VAR 0 48
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58379: LD_ADDR_VAR 0 49
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58408: LD_ADDR_VAR 0 50
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58437: LD_ADDR_VAR 0 51
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58468: LD_ADDR_VAR 0 52
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 3
58487: NEG
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58501: LD_ADDR_VAR 0 53
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: LD_INT 3
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: LIST
58544: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58545: LD_ADDR_VAR 0 54
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58586: LD_ADDR_VAR 0 55
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58626: LD_ADDR_VAR 0 56
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58667: LD_ADDR_VAR 0 57
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58711: LD_ADDR_VAR 0 58
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: LD_INT 3
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: LIST
58756: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58757: LD_ADDR_VAR 0 59
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 2
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58801: LD_ADDR_VAR 0 60
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58842: LD_ADDR_VAR 0 61
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58882: LD_ADDR_VAR 0 62
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58923: LD_ADDR_VAR 0 63
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58967: LD_ADDR_VAR 0 64
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: ST_TO_ADDR
// end ; 2 :
59013: GO 62279
59015: LD_INT 2
59017: DOUBLE
59018: EQUAL
59019: IFTRUE 59023
59021: GO 62278
59023: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59024: LD_ADDR_VAR 0 29
59028: PUSH
59029: LD_INT 4
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 4
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 5
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 5
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 4
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 3
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 5
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 3
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 4
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 4
59154: PUSH
59155: LD_INT 4
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 3
59164: PUSH
59165: LD_INT 4
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 4
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: LD_INT 4
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 4
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: LD_INT 3
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: LD_INT 5
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: LD_INT 5
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: LD_INT 4
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 5
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 3
59318: NEG
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 3
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 4
59363: NEG
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 4
59374: NEG
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 4
59386: NEG
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 4
59409: NEG
59410: PUSH
59411: LD_INT 4
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 4
59421: NEG
59422: PUSH
59423: LD_INT 5
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: LD_INT 4
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 4
59457: NEG
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 5
59469: NEG
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 5
59481: NEG
59482: PUSH
59483: LD_INT 5
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: NEG
59494: PUSH
59495: LD_INT 5
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 5
59505: NEG
59506: PUSH
59507: LD_INT 3
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59562: LD_ADDR_VAR 0 30
59566: PUSH
59567: LD_INT 4
59569: PUSH
59570: LD_INT 4
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 4
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 5
59589: PUSH
59590: LD_INT 4
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 5
59599: PUSH
59600: LD_INT 5
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: PUSH
59610: LD_INT 5
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: LD_INT 4
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 3
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 5
59639: PUSH
59640: LD_INT 3
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: LD_INT 5
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 4
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 4
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 4
59752: NEG
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 4
59763: NEG
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 3
59775: NEG
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 3
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 4
59797: NEG
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 5
59808: NEG
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 5
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 5
59831: NEG
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: NEG
59867: PUSH
59868: LD_INT 4
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: LD_INT 3
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 4
59914: NEG
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 4
59926: NEG
59927: PUSH
59928: LD_INT 4
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 4
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 4
59950: NEG
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 4
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 5
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 4
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 3
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 4
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 5
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: LD_INT 3
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: LD_INT 5
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60109: LD_ADDR_VAR 0 31
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 4
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 3
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 4
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 5
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 5
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 4
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: LD_INT 5
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 3
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 4
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 4
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 4
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 4
60311: NEG
60312: PUSH
60313: LD_INT 4
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 4
60323: NEG
60324: PUSH
60325: LD_INT 5
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: LD_INT 4
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 4
60359: NEG
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 5
60371: NEG
60372: PUSH
60373: LD_INT 4
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 5
60383: NEG
60384: PUSH
60385: LD_INT 5
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 5
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 5
60407: NEG
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 4
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 3
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 4
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: LD_INT 4
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 5
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 5
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 4
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 3
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 5
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60659: LD_ADDR_VAR 0 32
60663: PUSH
60664: LD_INT 4
60666: NEG
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 4
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 3
60689: NEG
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 3
60700: NEG
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 4
60711: NEG
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 5
60722: NEG
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 5
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 5
60745: NEG
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 3
60768: NEG
60769: PUSH
60770: LD_INT 3
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: LD_INT 4
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 4
60828: NEG
60829: PUSH
60830: LD_INT 3
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 4
60840: NEG
60841: PUSH
60842: LD_INT 4
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: LD_INT 4
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 4
60864: NEG
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 4
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 5
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 3
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: LD_INT 4
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: LD_INT 5
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: LD_INT 3
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: LD_INT 5
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 3
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 4
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 4
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 4
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 4
61071: PUSH
61072: LD_INT 4
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 4
61081: PUSH
61082: LD_INT 3
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 5
61091: PUSH
61092: LD_INT 4
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 5
61101: PUSH
61102: LD_INT 5
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 4
61111: PUSH
61112: LD_INT 5
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: LD_INT 4
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 5
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 3
61151: PUSH
61152: LD_INT 5
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61206: LD_ADDR_VAR 0 33
61210: PUSH
61211: LD_INT 4
61213: NEG
61214: PUSH
61215: LD_INT 4
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 4
61225: NEG
61226: PUSH
61227: LD_INT 5
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: LD_INT 4
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 3
61249: NEG
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 4
61261: NEG
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 5
61273: NEG
61274: PUSH
61275: LD_INT 4
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 5
61285: NEG
61286: PUSH
61287: LD_INT 5
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: LD_INT 5
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 5
61309: NEG
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: LD_INT 4
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 2
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: LD_INT 4
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 4
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 5
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 5
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 4
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 5
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 3
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 4
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 4
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: LD_INT 4
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 4
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: LD_INT 4
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 4
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 4
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 5
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 5
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 4
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: LD_INT 5
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61744: LD_ADDR_VAR 0 34
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 4
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 5
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 4
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: LD_INT 3
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: PUSH
61808: LD_INT 4
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: LD_INT 5
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 5
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 3
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 4
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 4
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 3
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 4
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 4
61946: PUSH
61947: LD_INT 4
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 4
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 5
61966: PUSH
61967: LD_INT 4
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 5
61976: PUSH
61977: LD_INT 5
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 4
61986: PUSH
61987: LD_INT 5
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 3
61996: PUSH
61997: LD_INT 4
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: LD_INT 3
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 5
62016: PUSH
62017: LD_INT 3
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 5
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 3
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 4
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 4
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: LD_INT 4
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 4
62129: NEG
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 4
62140: NEG
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 3
62163: NEG
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 4
62174: NEG
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 5
62185: NEG
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 5
62196: NEG
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 5
62208: NEG
62209: PUSH
62210: LD_INT 2
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 3
62220: NEG
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: ST_TO_ADDR
// end ; end ;
62276: GO 62279
62278: POP
// case btype of b_depot , b_warehouse :
62279: LD_VAR 0 1
62283: PUSH
62284: LD_INT 0
62286: DOUBLE
62287: EQUAL
62288: IFTRUE 62298
62290: LD_INT 1
62292: DOUBLE
62293: EQUAL
62294: IFTRUE 62298
62296: GO 62499
62298: POP
// case nation of nation_american :
62299: LD_VAR 0 5
62303: PUSH
62304: LD_INT 1
62306: DOUBLE
62307: EQUAL
62308: IFTRUE 62312
62310: GO 62368
62312: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62313: LD_ADDR_VAR 0 9
62317: PUSH
62318: LD_VAR 0 11
62322: PUSH
62323: LD_VAR 0 12
62327: PUSH
62328: LD_VAR 0 13
62332: PUSH
62333: LD_VAR 0 14
62337: PUSH
62338: LD_VAR 0 15
62342: PUSH
62343: LD_VAR 0 16
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: PUSH
62356: LD_VAR 0 4
62360: PUSH
62361: LD_INT 1
62363: PLUS
62364: ARRAY
62365: ST_TO_ADDR
62366: GO 62497
62368: LD_INT 2
62370: DOUBLE
62371: EQUAL
62372: IFTRUE 62376
62374: GO 62432
62376: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62377: LD_ADDR_VAR 0 9
62381: PUSH
62382: LD_VAR 0 17
62386: PUSH
62387: LD_VAR 0 18
62391: PUSH
62392: LD_VAR 0 19
62396: PUSH
62397: LD_VAR 0 20
62401: PUSH
62402: LD_VAR 0 21
62406: PUSH
62407: LD_VAR 0 22
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: PUSH
62420: LD_VAR 0 4
62424: PUSH
62425: LD_INT 1
62427: PLUS
62428: ARRAY
62429: ST_TO_ADDR
62430: GO 62497
62432: LD_INT 3
62434: DOUBLE
62435: EQUAL
62436: IFTRUE 62440
62438: GO 62496
62440: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62441: LD_ADDR_VAR 0 9
62445: PUSH
62446: LD_VAR 0 23
62450: PUSH
62451: LD_VAR 0 24
62455: PUSH
62456: LD_VAR 0 25
62460: PUSH
62461: LD_VAR 0 26
62465: PUSH
62466: LD_VAR 0 27
62470: PUSH
62471: LD_VAR 0 28
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: PUSH
62484: LD_VAR 0 4
62488: PUSH
62489: LD_INT 1
62491: PLUS
62492: ARRAY
62493: ST_TO_ADDR
62494: GO 62497
62496: POP
62497: GO 63052
62499: LD_INT 2
62501: DOUBLE
62502: EQUAL
62503: IFTRUE 62513
62505: LD_INT 3
62507: DOUBLE
62508: EQUAL
62509: IFTRUE 62513
62511: GO 62569
62513: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62514: LD_ADDR_VAR 0 9
62518: PUSH
62519: LD_VAR 0 29
62523: PUSH
62524: LD_VAR 0 30
62528: PUSH
62529: LD_VAR 0 31
62533: PUSH
62534: LD_VAR 0 32
62538: PUSH
62539: LD_VAR 0 33
62543: PUSH
62544: LD_VAR 0 34
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: PUSH
62557: LD_VAR 0 4
62561: PUSH
62562: LD_INT 1
62564: PLUS
62565: ARRAY
62566: ST_TO_ADDR
62567: GO 63052
62569: LD_INT 16
62571: DOUBLE
62572: EQUAL
62573: IFTRUE 62631
62575: LD_INT 17
62577: DOUBLE
62578: EQUAL
62579: IFTRUE 62631
62581: LD_INT 18
62583: DOUBLE
62584: EQUAL
62585: IFTRUE 62631
62587: LD_INT 19
62589: DOUBLE
62590: EQUAL
62591: IFTRUE 62631
62593: LD_INT 22
62595: DOUBLE
62596: EQUAL
62597: IFTRUE 62631
62599: LD_INT 20
62601: DOUBLE
62602: EQUAL
62603: IFTRUE 62631
62605: LD_INT 21
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62631
62611: LD_INT 23
62613: DOUBLE
62614: EQUAL
62615: IFTRUE 62631
62617: LD_INT 24
62619: DOUBLE
62620: EQUAL
62621: IFTRUE 62631
62623: LD_INT 25
62625: DOUBLE
62626: EQUAL
62627: IFTRUE 62631
62629: GO 62687
62631: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62632: LD_ADDR_VAR 0 9
62636: PUSH
62637: LD_VAR 0 35
62641: PUSH
62642: LD_VAR 0 36
62646: PUSH
62647: LD_VAR 0 37
62651: PUSH
62652: LD_VAR 0 38
62656: PUSH
62657: LD_VAR 0 39
62661: PUSH
62662: LD_VAR 0 40
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: PUSH
62675: LD_VAR 0 4
62679: PUSH
62680: LD_INT 1
62682: PLUS
62683: ARRAY
62684: ST_TO_ADDR
62685: GO 63052
62687: LD_INT 6
62689: DOUBLE
62690: EQUAL
62691: IFTRUE 62743
62693: LD_INT 7
62695: DOUBLE
62696: EQUAL
62697: IFTRUE 62743
62699: LD_INT 8
62701: DOUBLE
62702: EQUAL
62703: IFTRUE 62743
62705: LD_INT 13
62707: DOUBLE
62708: EQUAL
62709: IFTRUE 62743
62711: LD_INT 12
62713: DOUBLE
62714: EQUAL
62715: IFTRUE 62743
62717: LD_INT 15
62719: DOUBLE
62720: EQUAL
62721: IFTRUE 62743
62723: LD_INT 11
62725: DOUBLE
62726: EQUAL
62727: IFTRUE 62743
62729: LD_INT 14
62731: DOUBLE
62732: EQUAL
62733: IFTRUE 62743
62735: LD_INT 10
62737: DOUBLE
62738: EQUAL
62739: IFTRUE 62743
62741: GO 62799
62743: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62744: LD_ADDR_VAR 0 9
62748: PUSH
62749: LD_VAR 0 41
62753: PUSH
62754: LD_VAR 0 42
62758: PUSH
62759: LD_VAR 0 43
62763: PUSH
62764: LD_VAR 0 44
62768: PUSH
62769: LD_VAR 0 45
62773: PUSH
62774: LD_VAR 0 46
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: PUSH
62787: LD_VAR 0 4
62791: PUSH
62792: LD_INT 1
62794: PLUS
62795: ARRAY
62796: ST_TO_ADDR
62797: GO 63052
62799: LD_INT 36
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62807
62805: GO 62863
62807: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62808: LD_ADDR_VAR 0 9
62812: PUSH
62813: LD_VAR 0 47
62817: PUSH
62818: LD_VAR 0 48
62822: PUSH
62823: LD_VAR 0 49
62827: PUSH
62828: LD_VAR 0 50
62832: PUSH
62833: LD_VAR 0 51
62837: PUSH
62838: LD_VAR 0 52
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: PUSH
62851: LD_VAR 0 4
62855: PUSH
62856: LD_INT 1
62858: PLUS
62859: ARRAY
62860: ST_TO_ADDR
62861: GO 63052
62863: LD_INT 4
62865: DOUBLE
62866: EQUAL
62867: IFTRUE 62889
62869: LD_INT 5
62871: DOUBLE
62872: EQUAL
62873: IFTRUE 62889
62875: LD_INT 34
62877: DOUBLE
62878: EQUAL
62879: IFTRUE 62889
62881: LD_INT 37
62883: DOUBLE
62884: EQUAL
62885: IFTRUE 62889
62887: GO 62945
62889: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62890: LD_ADDR_VAR 0 9
62894: PUSH
62895: LD_VAR 0 53
62899: PUSH
62900: LD_VAR 0 54
62904: PUSH
62905: LD_VAR 0 55
62909: PUSH
62910: LD_VAR 0 56
62914: PUSH
62915: LD_VAR 0 57
62919: PUSH
62920: LD_VAR 0 58
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: PUSH
62933: LD_VAR 0 4
62937: PUSH
62938: LD_INT 1
62940: PLUS
62941: ARRAY
62942: ST_TO_ADDR
62943: GO 63052
62945: LD_INT 31
62947: DOUBLE
62948: EQUAL
62949: IFTRUE 62995
62951: LD_INT 32
62953: DOUBLE
62954: EQUAL
62955: IFTRUE 62995
62957: LD_INT 33
62959: DOUBLE
62960: EQUAL
62961: IFTRUE 62995
62963: LD_INT 27
62965: DOUBLE
62966: EQUAL
62967: IFTRUE 62995
62969: LD_INT 26
62971: DOUBLE
62972: EQUAL
62973: IFTRUE 62995
62975: LD_INT 28
62977: DOUBLE
62978: EQUAL
62979: IFTRUE 62995
62981: LD_INT 29
62983: DOUBLE
62984: EQUAL
62985: IFTRUE 62995
62987: LD_INT 30
62989: DOUBLE
62990: EQUAL
62991: IFTRUE 62995
62993: GO 63051
62995: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62996: LD_ADDR_VAR 0 9
63000: PUSH
63001: LD_VAR 0 59
63005: PUSH
63006: LD_VAR 0 60
63010: PUSH
63011: LD_VAR 0 61
63015: PUSH
63016: LD_VAR 0 62
63020: PUSH
63021: LD_VAR 0 63
63025: PUSH
63026: LD_VAR 0 64
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: PUSH
63039: LD_VAR 0 4
63043: PUSH
63044: LD_INT 1
63046: PLUS
63047: ARRAY
63048: ST_TO_ADDR
63049: GO 63052
63051: POP
// temp_list2 = [ ] ;
63052: LD_ADDR_VAR 0 10
63056: PUSH
63057: EMPTY
63058: ST_TO_ADDR
// for i in temp_list do
63059: LD_ADDR_VAR 0 8
63063: PUSH
63064: LD_VAR 0 9
63068: PUSH
63069: FOR_IN
63070: IFFALSE 63122
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63072: LD_ADDR_VAR 0 10
63076: PUSH
63077: LD_VAR 0 10
63081: PUSH
63082: LD_VAR 0 8
63086: PUSH
63087: LD_INT 1
63089: ARRAY
63090: PUSH
63091: LD_VAR 0 2
63095: PLUS
63096: PUSH
63097: LD_VAR 0 8
63101: PUSH
63102: LD_INT 2
63104: ARRAY
63105: PUSH
63106: LD_VAR 0 3
63110: PLUS
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: EMPTY
63117: LIST
63118: ADD
63119: ST_TO_ADDR
63120: GO 63069
63122: POP
63123: POP
// result = temp_list2 ;
63124: LD_ADDR_VAR 0 7
63128: PUSH
63129: LD_VAR 0 10
63133: ST_TO_ADDR
// end ;
63134: LD_VAR 0 7
63138: RET
// export function EnemyInRange ( unit , dist ) ; begin
63139: LD_INT 0
63141: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63142: LD_ADDR_VAR 0 3
63146: PUSH
63147: LD_VAR 0 1
63151: PPUSH
63152: CALL_OW 255
63156: PPUSH
63157: LD_VAR 0 1
63161: PPUSH
63162: CALL_OW 250
63166: PPUSH
63167: LD_VAR 0 1
63171: PPUSH
63172: CALL_OW 251
63176: PPUSH
63177: LD_VAR 0 2
63181: PPUSH
63182: CALL 36541 0 4
63186: PUSH
63187: LD_INT 4
63189: ARRAY
63190: ST_TO_ADDR
// end ;
63191: LD_VAR 0 3
63195: RET
// export function PlayerSeeMe ( unit ) ; begin
63196: LD_INT 0
63198: PPUSH
// result := See ( your_side , unit ) ;
63199: LD_ADDR_VAR 0 2
63203: PUSH
63204: LD_OWVAR 2
63208: PPUSH
63209: LD_VAR 0 1
63213: PPUSH
63214: CALL_OW 292
63218: ST_TO_ADDR
// end ;
63219: LD_VAR 0 2
63223: RET
// export function ReverseDir ( unit ) ; begin
63224: LD_INT 0
63226: PPUSH
// if not unit then
63227: LD_VAR 0 1
63231: NOT
63232: IFFALSE 63236
// exit ;
63234: GO 63259
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63236: LD_ADDR_VAR 0 2
63240: PUSH
63241: LD_VAR 0 1
63245: PPUSH
63246: CALL_OW 254
63250: PUSH
63251: LD_INT 3
63253: PLUS
63254: PUSH
63255: LD_INT 6
63257: MOD
63258: ST_TO_ADDR
// end ;
63259: LD_VAR 0 2
63263: RET
// export function ReverseArray ( array ) ; var i ; begin
63264: LD_INT 0
63266: PPUSH
63267: PPUSH
// if not array then
63268: LD_VAR 0 1
63272: NOT
63273: IFFALSE 63277
// exit ;
63275: GO 63332
// result := [ ] ;
63277: LD_ADDR_VAR 0 2
63281: PUSH
63282: EMPTY
63283: ST_TO_ADDR
// for i := array downto 1 do
63284: LD_ADDR_VAR 0 3
63288: PUSH
63289: DOUBLE
63290: LD_VAR 0 1
63294: INC
63295: ST_TO_ADDR
63296: LD_INT 1
63298: PUSH
63299: FOR_DOWNTO
63300: IFFALSE 63330
// result := Join ( result , array [ i ] ) ;
63302: LD_ADDR_VAR 0 2
63306: PUSH
63307: LD_VAR 0 2
63311: PPUSH
63312: LD_VAR 0 1
63316: PUSH
63317: LD_VAR 0 3
63321: ARRAY
63322: PPUSH
63323: CALL 67976 0 2
63327: ST_TO_ADDR
63328: GO 63299
63330: POP
63331: POP
// end ;
63332: LD_VAR 0 2
63336: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63337: LD_INT 0
63339: PPUSH
63340: PPUSH
63341: PPUSH
63342: PPUSH
63343: PPUSH
63344: PPUSH
// if not unit or not hexes then
63345: LD_VAR 0 1
63349: NOT
63350: PUSH
63351: LD_VAR 0 2
63355: NOT
63356: OR
63357: IFFALSE 63361
// exit ;
63359: GO 63484
// dist := 9999 ;
63361: LD_ADDR_VAR 0 5
63365: PUSH
63366: LD_INT 9999
63368: ST_TO_ADDR
// for i = 1 to hexes do
63369: LD_ADDR_VAR 0 4
63373: PUSH
63374: DOUBLE
63375: LD_INT 1
63377: DEC
63378: ST_TO_ADDR
63379: LD_VAR 0 2
63383: PUSH
63384: FOR_TO
63385: IFFALSE 63472
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63387: LD_ADDR_VAR 0 6
63391: PUSH
63392: LD_VAR 0 1
63396: PPUSH
63397: LD_VAR 0 2
63401: PUSH
63402: LD_VAR 0 4
63406: ARRAY
63407: PUSH
63408: LD_INT 1
63410: ARRAY
63411: PPUSH
63412: LD_VAR 0 2
63416: PUSH
63417: LD_VAR 0 4
63421: ARRAY
63422: PUSH
63423: LD_INT 2
63425: ARRAY
63426: PPUSH
63427: CALL_OW 297
63431: ST_TO_ADDR
// if tdist < dist then
63432: LD_VAR 0 6
63436: PUSH
63437: LD_VAR 0 5
63441: LESS
63442: IFFALSE 63470
// begin hex := hexes [ i ] ;
63444: LD_ADDR_VAR 0 8
63448: PUSH
63449: LD_VAR 0 2
63453: PUSH
63454: LD_VAR 0 4
63458: ARRAY
63459: ST_TO_ADDR
// dist := tdist ;
63460: LD_ADDR_VAR 0 5
63464: PUSH
63465: LD_VAR 0 6
63469: ST_TO_ADDR
// end ; end ;
63470: GO 63384
63472: POP
63473: POP
// result := hex ;
63474: LD_ADDR_VAR 0 3
63478: PUSH
63479: LD_VAR 0 8
63483: ST_TO_ADDR
// end ;
63484: LD_VAR 0 3
63488: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63489: LD_INT 0
63491: PPUSH
63492: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63493: LD_VAR 0 1
63497: NOT
63498: PUSH
63499: LD_VAR 0 1
63503: PUSH
63504: LD_INT 21
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 23
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PPUSH
63528: CALL_OW 69
63532: IN
63533: NOT
63534: OR
63535: IFFALSE 63539
// exit ;
63537: GO 63586
// for i = 1 to 3 do
63539: LD_ADDR_VAR 0 3
63543: PUSH
63544: DOUBLE
63545: LD_INT 1
63547: DEC
63548: ST_TO_ADDR
63549: LD_INT 3
63551: PUSH
63552: FOR_TO
63553: IFFALSE 63584
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63555: LD_VAR 0 1
63559: PPUSH
63560: CALL_OW 250
63564: PPUSH
63565: LD_VAR 0 1
63569: PPUSH
63570: CALL_OW 251
63574: PPUSH
63575: LD_INT 1
63577: PPUSH
63578: CALL_OW 453
63582: GO 63552
63584: POP
63585: POP
// end ;
63586: LD_VAR 0 2
63590: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63591: LD_INT 0
63593: PPUSH
63594: PPUSH
63595: PPUSH
63596: PPUSH
63597: PPUSH
63598: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63599: LD_VAR 0 1
63603: NOT
63604: PUSH
63605: LD_VAR 0 2
63609: NOT
63610: OR
63611: PUSH
63612: LD_VAR 0 1
63616: PPUSH
63617: CALL_OW 314
63621: OR
63622: IFFALSE 63626
// exit ;
63624: GO 64093
// if GetLives ( i ) < 250 then
63626: LD_VAR 0 4
63630: PPUSH
63631: CALL_OW 256
63635: PUSH
63636: LD_INT 250
63638: LESS
63639: IFFALSE 63652
// begin ComAutodestruct ( i ) ;
63641: LD_VAR 0 4
63645: PPUSH
63646: CALL 63489 0 1
// exit ;
63650: GO 64093
// end ; x := GetX ( enemy_unit ) ;
63652: LD_ADDR_VAR 0 7
63656: PUSH
63657: LD_VAR 0 2
63661: PPUSH
63662: CALL_OW 250
63666: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63667: LD_ADDR_VAR 0 8
63671: PUSH
63672: LD_VAR 0 2
63676: PPUSH
63677: CALL_OW 251
63681: ST_TO_ADDR
// if not x or not y then
63682: LD_VAR 0 7
63686: NOT
63687: PUSH
63688: LD_VAR 0 8
63692: NOT
63693: OR
63694: IFFALSE 63698
// exit ;
63696: GO 64093
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63698: LD_ADDR_VAR 0 6
63702: PUSH
63703: LD_VAR 0 7
63707: PPUSH
63708: LD_INT 0
63710: PPUSH
63711: LD_INT 4
63713: PPUSH
63714: CALL_OW 272
63718: PUSH
63719: LD_VAR 0 8
63723: PPUSH
63724: LD_INT 0
63726: PPUSH
63727: LD_INT 4
63729: PPUSH
63730: CALL_OW 273
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_VAR 0 7
63743: PPUSH
63744: LD_INT 1
63746: PPUSH
63747: LD_INT 4
63749: PPUSH
63750: CALL_OW 272
63754: PUSH
63755: LD_VAR 0 8
63759: PPUSH
63760: LD_INT 1
63762: PPUSH
63763: LD_INT 4
63765: PPUSH
63766: CALL_OW 273
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_VAR 0 7
63779: PPUSH
63780: LD_INT 2
63782: PPUSH
63783: LD_INT 4
63785: PPUSH
63786: CALL_OW 272
63790: PUSH
63791: LD_VAR 0 8
63795: PPUSH
63796: LD_INT 2
63798: PPUSH
63799: LD_INT 4
63801: PPUSH
63802: CALL_OW 273
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_VAR 0 7
63815: PPUSH
63816: LD_INT 3
63818: PPUSH
63819: LD_INT 4
63821: PPUSH
63822: CALL_OW 272
63826: PUSH
63827: LD_VAR 0 8
63831: PPUSH
63832: LD_INT 3
63834: PPUSH
63835: LD_INT 4
63837: PPUSH
63838: CALL_OW 273
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_VAR 0 7
63851: PPUSH
63852: LD_INT 4
63854: PPUSH
63855: LD_INT 4
63857: PPUSH
63858: CALL_OW 272
63862: PUSH
63863: LD_VAR 0 8
63867: PPUSH
63868: LD_INT 4
63870: PPUSH
63871: LD_INT 4
63873: PPUSH
63874: CALL_OW 273
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_VAR 0 7
63887: PPUSH
63888: LD_INT 5
63890: PPUSH
63891: LD_INT 4
63893: PPUSH
63894: CALL_OW 272
63898: PUSH
63899: LD_VAR 0 8
63903: PPUSH
63904: LD_INT 5
63906: PPUSH
63907: LD_INT 4
63909: PPUSH
63910: CALL_OW 273
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: ST_TO_ADDR
// for i = tmp downto 1 do
63927: LD_ADDR_VAR 0 4
63931: PUSH
63932: DOUBLE
63933: LD_VAR 0 6
63937: INC
63938: ST_TO_ADDR
63939: LD_INT 1
63941: PUSH
63942: FOR_DOWNTO
63943: IFFALSE 64044
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63945: LD_VAR 0 6
63949: PUSH
63950: LD_VAR 0 4
63954: ARRAY
63955: PUSH
63956: LD_INT 1
63958: ARRAY
63959: PPUSH
63960: LD_VAR 0 6
63964: PUSH
63965: LD_VAR 0 4
63969: ARRAY
63970: PUSH
63971: LD_INT 2
63973: ARRAY
63974: PPUSH
63975: CALL_OW 488
63979: NOT
63980: PUSH
63981: LD_VAR 0 6
63985: PUSH
63986: LD_VAR 0 4
63990: ARRAY
63991: PUSH
63992: LD_INT 1
63994: ARRAY
63995: PPUSH
63996: LD_VAR 0 6
64000: PUSH
64001: LD_VAR 0 4
64005: ARRAY
64006: PUSH
64007: LD_INT 2
64009: ARRAY
64010: PPUSH
64011: CALL_OW 428
64015: PUSH
64016: LD_INT 0
64018: NONEQUAL
64019: OR
64020: IFFALSE 64042
// tmp := Delete ( tmp , i ) ;
64022: LD_ADDR_VAR 0 6
64026: PUSH
64027: LD_VAR 0 6
64031: PPUSH
64032: LD_VAR 0 4
64036: PPUSH
64037: CALL_OW 3
64041: ST_TO_ADDR
64042: GO 63942
64044: POP
64045: POP
// j := GetClosestHex ( unit , tmp ) ;
64046: LD_ADDR_VAR 0 5
64050: PUSH
64051: LD_VAR 0 1
64055: PPUSH
64056: LD_VAR 0 6
64060: PPUSH
64061: CALL 63337 0 2
64065: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64066: LD_VAR 0 1
64070: PPUSH
64071: LD_VAR 0 5
64075: PUSH
64076: LD_INT 1
64078: ARRAY
64079: PPUSH
64080: LD_VAR 0 5
64084: PUSH
64085: LD_INT 2
64087: ARRAY
64088: PPUSH
64089: CALL_OW 111
// end ;
64093: LD_VAR 0 3
64097: RET
// export function PrepareApemanSoldier ( ) ; begin
64098: LD_INT 0
64100: PPUSH
// uc_nation := 0 ;
64101: LD_ADDR_OWVAR 21
64105: PUSH
64106: LD_INT 0
64108: ST_TO_ADDR
// hc_sex := sex_male ;
64109: LD_ADDR_OWVAR 27
64113: PUSH
64114: LD_INT 1
64116: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64117: LD_ADDR_OWVAR 28
64121: PUSH
64122: LD_INT 15
64124: ST_TO_ADDR
// hc_gallery :=  ;
64125: LD_ADDR_OWVAR 33
64129: PUSH
64130: LD_STRING 
64132: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64133: LD_ADDR_OWVAR 31
64137: PUSH
64138: LD_INT 0
64140: PPUSH
64141: LD_INT 3
64143: PPUSH
64144: CALL_OW 12
64148: PUSH
64149: LD_INT 0
64151: PPUSH
64152: LD_INT 3
64154: PPUSH
64155: CALL_OW 12
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: ST_TO_ADDR
// end ;
64172: LD_VAR 0 1
64176: RET
// export function PrepareApemanEngineer ( ) ; begin
64177: LD_INT 0
64179: PPUSH
// uc_nation := 0 ;
64180: LD_ADDR_OWVAR 21
64184: PUSH
64185: LD_INT 0
64187: ST_TO_ADDR
// hc_sex := sex_male ;
64188: LD_ADDR_OWVAR 27
64192: PUSH
64193: LD_INT 1
64195: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64196: LD_ADDR_OWVAR 28
64200: PUSH
64201: LD_INT 16
64203: ST_TO_ADDR
// hc_gallery :=  ;
64204: LD_ADDR_OWVAR 33
64208: PUSH
64209: LD_STRING 
64211: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64212: LD_ADDR_OWVAR 31
64216: PUSH
64217: LD_INT 0
64219: PPUSH
64220: LD_INT 3
64222: PPUSH
64223: CALL_OW 12
64227: PUSH
64228: LD_INT 0
64230: PPUSH
64231: LD_INT 3
64233: PPUSH
64234: CALL_OW 12
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: ST_TO_ADDR
// end ;
64251: LD_VAR 0 1
64255: RET
// export function PrepareApeman ( agressivity ) ; begin
64256: LD_INT 0
64258: PPUSH
// uc_side := 0 ;
64259: LD_ADDR_OWVAR 20
64263: PUSH
64264: LD_INT 0
64266: ST_TO_ADDR
// uc_nation := 0 ;
64267: LD_ADDR_OWVAR 21
64271: PUSH
64272: LD_INT 0
64274: ST_TO_ADDR
// hc_sex := sex_male ;
64275: LD_ADDR_OWVAR 27
64279: PUSH
64280: LD_INT 1
64282: ST_TO_ADDR
// hc_class := class_apeman ;
64283: LD_ADDR_OWVAR 28
64287: PUSH
64288: LD_INT 12
64290: ST_TO_ADDR
// hc_gallery :=  ;
64291: LD_ADDR_OWVAR 33
64295: PUSH
64296: LD_STRING 
64298: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64299: LD_ADDR_OWVAR 35
64303: PUSH
64304: LD_VAR 0 1
64308: NEG
64309: PPUSH
64310: LD_VAR 0 1
64314: PPUSH
64315: CALL_OW 12
64319: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64320: LD_ADDR_OWVAR 31
64324: PUSH
64325: LD_INT 0
64327: PPUSH
64328: LD_INT 3
64330: PPUSH
64331: CALL_OW 12
64335: PUSH
64336: LD_INT 0
64338: PPUSH
64339: LD_INT 3
64341: PPUSH
64342: CALL_OW 12
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: ST_TO_ADDR
// end ;
64359: LD_VAR 0 2
64363: RET
// export function PrepareTiger ( agressivity ) ; begin
64364: LD_INT 0
64366: PPUSH
// uc_side := 0 ;
64367: LD_ADDR_OWVAR 20
64371: PUSH
64372: LD_INT 0
64374: ST_TO_ADDR
// uc_nation := 0 ;
64375: LD_ADDR_OWVAR 21
64379: PUSH
64380: LD_INT 0
64382: ST_TO_ADDR
// hc_class := class_tiger ;
64383: LD_ADDR_OWVAR 28
64387: PUSH
64388: LD_INT 14
64390: ST_TO_ADDR
// hc_gallery :=  ;
64391: LD_ADDR_OWVAR 33
64395: PUSH
64396: LD_STRING 
64398: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64399: LD_ADDR_OWVAR 35
64403: PUSH
64404: LD_VAR 0 1
64408: NEG
64409: PPUSH
64410: LD_VAR 0 1
64414: PPUSH
64415: CALL_OW 12
64419: ST_TO_ADDR
// end ;
64420: LD_VAR 0 2
64424: RET
// export function PrepareEnchidna ( ) ; begin
64425: LD_INT 0
64427: PPUSH
// uc_side := 0 ;
64428: LD_ADDR_OWVAR 20
64432: PUSH
64433: LD_INT 0
64435: ST_TO_ADDR
// uc_nation := 0 ;
64436: LD_ADDR_OWVAR 21
64440: PUSH
64441: LD_INT 0
64443: ST_TO_ADDR
// hc_class := class_baggie ;
64444: LD_ADDR_OWVAR 28
64448: PUSH
64449: LD_INT 13
64451: ST_TO_ADDR
// hc_gallery :=  ;
64452: LD_ADDR_OWVAR 33
64456: PUSH
64457: LD_STRING 
64459: ST_TO_ADDR
// end ;
64460: LD_VAR 0 1
64464: RET
// export function PrepareFrog ( ) ; begin
64465: LD_INT 0
64467: PPUSH
// uc_side := 0 ;
64468: LD_ADDR_OWVAR 20
64472: PUSH
64473: LD_INT 0
64475: ST_TO_ADDR
// uc_nation := 0 ;
64476: LD_ADDR_OWVAR 21
64480: PUSH
64481: LD_INT 0
64483: ST_TO_ADDR
// hc_class := class_frog ;
64484: LD_ADDR_OWVAR 28
64488: PUSH
64489: LD_INT 19
64491: ST_TO_ADDR
// hc_gallery :=  ;
64492: LD_ADDR_OWVAR 33
64496: PUSH
64497: LD_STRING 
64499: ST_TO_ADDR
// end ;
64500: LD_VAR 0 1
64504: RET
// export function PrepareFish ( ) ; begin
64505: LD_INT 0
64507: PPUSH
// uc_side := 0 ;
64508: LD_ADDR_OWVAR 20
64512: PUSH
64513: LD_INT 0
64515: ST_TO_ADDR
// uc_nation := 0 ;
64516: LD_ADDR_OWVAR 21
64520: PUSH
64521: LD_INT 0
64523: ST_TO_ADDR
// hc_class := class_fish ;
64524: LD_ADDR_OWVAR 28
64528: PUSH
64529: LD_INT 20
64531: ST_TO_ADDR
// hc_gallery :=  ;
64532: LD_ADDR_OWVAR 33
64536: PUSH
64537: LD_STRING 
64539: ST_TO_ADDR
// end ;
64540: LD_VAR 0 1
64544: RET
// export function PrepareBird ( ) ; begin
64545: LD_INT 0
64547: PPUSH
// uc_side := 0 ;
64548: LD_ADDR_OWVAR 20
64552: PUSH
64553: LD_INT 0
64555: ST_TO_ADDR
// uc_nation := 0 ;
64556: LD_ADDR_OWVAR 21
64560: PUSH
64561: LD_INT 0
64563: ST_TO_ADDR
// hc_class := class_phororhacos ;
64564: LD_ADDR_OWVAR 28
64568: PUSH
64569: LD_INT 18
64571: ST_TO_ADDR
// hc_gallery :=  ;
64572: LD_ADDR_OWVAR 33
64576: PUSH
64577: LD_STRING 
64579: ST_TO_ADDR
// end ;
64580: LD_VAR 0 1
64584: RET
// export function PrepareHorse ( ) ; begin
64585: LD_INT 0
64587: PPUSH
// uc_side := 0 ;
64588: LD_ADDR_OWVAR 20
64592: PUSH
64593: LD_INT 0
64595: ST_TO_ADDR
// uc_nation := 0 ;
64596: LD_ADDR_OWVAR 21
64600: PUSH
64601: LD_INT 0
64603: ST_TO_ADDR
// hc_class := class_horse ;
64604: LD_ADDR_OWVAR 28
64608: PUSH
64609: LD_INT 21
64611: ST_TO_ADDR
// hc_gallery :=  ;
64612: LD_ADDR_OWVAR 33
64616: PUSH
64617: LD_STRING 
64619: ST_TO_ADDR
// end ;
64620: LD_VAR 0 1
64624: RET
// export function PrepareMastodont ( ) ; begin
64625: LD_INT 0
64627: PPUSH
// uc_side := 0 ;
64628: LD_ADDR_OWVAR 20
64632: PUSH
64633: LD_INT 0
64635: ST_TO_ADDR
// uc_nation := 0 ;
64636: LD_ADDR_OWVAR 21
64640: PUSH
64641: LD_INT 0
64643: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64644: LD_ADDR_OWVAR 37
64648: PUSH
64649: LD_INT 31
64651: ST_TO_ADDR
// vc_control := control_rider ;
64652: LD_ADDR_OWVAR 38
64656: PUSH
64657: LD_INT 4
64659: ST_TO_ADDR
// end ;
64660: LD_VAR 0 1
64664: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64665: LD_INT 0
64667: PPUSH
64668: PPUSH
64669: PPUSH
// uc_side = 0 ;
64670: LD_ADDR_OWVAR 20
64674: PUSH
64675: LD_INT 0
64677: ST_TO_ADDR
// uc_nation = 0 ;
64678: LD_ADDR_OWVAR 21
64682: PUSH
64683: LD_INT 0
64685: ST_TO_ADDR
// InitHc_All ( ) ;
64686: CALL_OW 584
// InitVc ;
64690: CALL_OW 20
// if mastodonts then
64694: LD_VAR 0 6
64698: IFFALSE 64765
// for i = 1 to mastodonts do
64700: LD_ADDR_VAR 0 11
64704: PUSH
64705: DOUBLE
64706: LD_INT 1
64708: DEC
64709: ST_TO_ADDR
64710: LD_VAR 0 6
64714: PUSH
64715: FOR_TO
64716: IFFALSE 64763
// begin vc_chassis := 31 ;
64718: LD_ADDR_OWVAR 37
64722: PUSH
64723: LD_INT 31
64725: ST_TO_ADDR
// vc_control := control_rider ;
64726: LD_ADDR_OWVAR 38
64730: PUSH
64731: LD_INT 4
64733: ST_TO_ADDR
// animal := CreateVehicle ;
64734: LD_ADDR_VAR 0 12
64738: PUSH
64739: CALL_OW 45
64743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64744: LD_VAR 0 12
64748: PPUSH
64749: LD_VAR 0 8
64753: PPUSH
64754: LD_INT 0
64756: PPUSH
64757: CALL 66893 0 3
// end ;
64761: GO 64715
64763: POP
64764: POP
// if horses then
64765: LD_VAR 0 5
64769: IFFALSE 64836
// for i = 1 to horses do
64771: LD_ADDR_VAR 0 11
64775: PUSH
64776: DOUBLE
64777: LD_INT 1
64779: DEC
64780: ST_TO_ADDR
64781: LD_VAR 0 5
64785: PUSH
64786: FOR_TO
64787: IFFALSE 64834
// begin hc_class := 21 ;
64789: LD_ADDR_OWVAR 28
64793: PUSH
64794: LD_INT 21
64796: ST_TO_ADDR
// hc_gallery :=  ;
64797: LD_ADDR_OWVAR 33
64801: PUSH
64802: LD_STRING 
64804: ST_TO_ADDR
// animal := CreateHuman ;
64805: LD_ADDR_VAR 0 12
64809: PUSH
64810: CALL_OW 44
64814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64815: LD_VAR 0 12
64819: PPUSH
64820: LD_VAR 0 8
64824: PPUSH
64825: LD_INT 0
64827: PPUSH
64828: CALL 66893 0 3
// end ;
64832: GO 64786
64834: POP
64835: POP
// if birds then
64836: LD_VAR 0 1
64840: IFFALSE 64907
// for i = 1 to birds do
64842: LD_ADDR_VAR 0 11
64846: PUSH
64847: DOUBLE
64848: LD_INT 1
64850: DEC
64851: ST_TO_ADDR
64852: LD_VAR 0 1
64856: PUSH
64857: FOR_TO
64858: IFFALSE 64905
// begin hc_class = 18 ;
64860: LD_ADDR_OWVAR 28
64864: PUSH
64865: LD_INT 18
64867: ST_TO_ADDR
// hc_gallery =  ;
64868: LD_ADDR_OWVAR 33
64872: PUSH
64873: LD_STRING 
64875: ST_TO_ADDR
// animal := CreateHuman ;
64876: LD_ADDR_VAR 0 12
64880: PUSH
64881: CALL_OW 44
64885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64886: LD_VAR 0 12
64890: PPUSH
64891: LD_VAR 0 8
64895: PPUSH
64896: LD_INT 0
64898: PPUSH
64899: CALL 66893 0 3
// end ;
64903: GO 64857
64905: POP
64906: POP
// if tigers then
64907: LD_VAR 0 2
64911: IFFALSE 64995
// for i = 1 to tigers do
64913: LD_ADDR_VAR 0 11
64917: PUSH
64918: DOUBLE
64919: LD_INT 1
64921: DEC
64922: ST_TO_ADDR
64923: LD_VAR 0 2
64927: PUSH
64928: FOR_TO
64929: IFFALSE 64993
// begin hc_class = class_tiger ;
64931: LD_ADDR_OWVAR 28
64935: PUSH
64936: LD_INT 14
64938: ST_TO_ADDR
// hc_gallery =  ;
64939: LD_ADDR_OWVAR 33
64943: PUSH
64944: LD_STRING 
64946: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64947: LD_ADDR_OWVAR 35
64951: PUSH
64952: LD_INT 7
64954: NEG
64955: PPUSH
64956: LD_INT 7
64958: PPUSH
64959: CALL_OW 12
64963: ST_TO_ADDR
// animal := CreateHuman ;
64964: LD_ADDR_VAR 0 12
64968: PUSH
64969: CALL_OW 44
64973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64974: LD_VAR 0 12
64978: PPUSH
64979: LD_VAR 0 8
64983: PPUSH
64984: LD_INT 0
64986: PPUSH
64987: CALL 66893 0 3
// end ;
64991: GO 64928
64993: POP
64994: POP
// if apemans then
64995: LD_VAR 0 3
64999: IFFALSE 65122
// for i = 1 to apemans do
65001: LD_ADDR_VAR 0 11
65005: PUSH
65006: DOUBLE
65007: LD_INT 1
65009: DEC
65010: ST_TO_ADDR
65011: LD_VAR 0 3
65015: PUSH
65016: FOR_TO
65017: IFFALSE 65120
// begin hc_class = class_apeman ;
65019: LD_ADDR_OWVAR 28
65023: PUSH
65024: LD_INT 12
65026: ST_TO_ADDR
// hc_gallery =  ;
65027: LD_ADDR_OWVAR 33
65031: PUSH
65032: LD_STRING 
65034: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65035: LD_ADDR_OWVAR 35
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PPUSH
65044: LD_INT 2
65046: PPUSH
65047: CALL_OW 12
65051: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65052: LD_ADDR_OWVAR 31
65056: PUSH
65057: LD_INT 1
65059: PPUSH
65060: LD_INT 3
65062: PPUSH
65063: CALL_OW 12
65067: PUSH
65068: LD_INT 1
65070: PPUSH
65071: LD_INT 3
65073: PPUSH
65074: CALL_OW 12
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: ST_TO_ADDR
// animal := CreateHuman ;
65091: LD_ADDR_VAR 0 12
65095: PUSH
65096: CALL_OW 44
65100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65101: LD_VAR 0 12
65105: PPUSH
65106: LD_VAR 0 8
65110: PPUSH
65111: LD_INT 0
65113: PPUSH
65114: CALL 66893 0 3
// end ;
65118: GO 65016
65120: POP
65121: POP
// if enchidnas then
65122: LD_VAR 0 4
65126: IFFALSE 65193
// for i = 1 to enchidnas do
65128: LD_ADDR_VAR 0 11
65132: PUSH
65133: DOUBLE
65134: LD_INT 1
65136: DEC
65137: ST_TO_ADDR
65138: LD_VAR 0 4
65142: PUSH
65143: FOR_TO
65144: IFFALSE 65191
// begin hc_class = 13 ;
65146: LD_ADDR_OWVAR 28
65150: PUSH
65151: LD_INT 13
65153: ST_TO_ADDR
// hc_gallery =  ;
65154: LD_ADDR_OWVAR 33
65158: PUSH
65159: LD_STRING 
65161: ST_TO_ADDR
// animal := CreateHuman ;
65162: LD_ADDR_VAR 0 12
65166: PUSH
65167: CALL_OW 44
65171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65172: LD_VAR 0 12
65176: PPUSH
65177: LD_VAR 0 8
65181: PPUSH
65182: LD_INT 0
65184: PPUSH
65185: CALL 66893 0 3
// end ;
65189: GO 65143
65191: POP
65192: POP
// if fishes then
65193: LD_VAR 0 7
65197: IFFALSE 65264
// for i = 1 to fishes do
65199: LD_ADDR_VAR 0 11
65203: PUSH
65204: DOUBLE
65205: LD_INT 1
65207: DEC
65208: ST_TO_ADDR
65209: LD_VAR 0 7
65213: PUSH
65214: FOR_TO
65215: IFFALSE 65262
// begin hc_class = 20 ;
65217: LD_ADDR_OWVAR 28
65221: PUSH
65222: LD_INT 20
65224: ST_TO_ADDR
// hc_gallery =  ;
65225: LD_ADDR_OWVAR 33
65229: PUSH
65230: LD_STRING 
65232: ST_TO_ADDR
// animal := CreateHuman ;
65233: LD_ADDR_VAR 0 12
65237: PUSH
65238: CALL_OW 44
65242: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65243: LD_VAR 0 12
65247: PPUSH
65248: LD_VAR 0 9
65252: PPUSH
65253: LD_INT 0
65255: PPUSH
65256: CALL 66893 0 3
// end ;
65260: GO 65214
65262: POP
65263: POP
// end ;
65264: LD_VAR 0 10
65268: RET
// export function WantHeal ( sci , unit ) ; begin
65269: LD_INT 0
65271: PPUSH
// if GetTaskList ( sci ) > 0 then
65272: LD_VAR 0 1
65276: PPUSH
65277: CALL_OW 437
65281: PUSH
65282: LD_INT 0
65284: GREATER
65285: IFFALSE 65355
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65287: LD_VAR 0 1
65291: PPUSH
65292: CALL_OW 437
65296: PUSH
65297: LD_INT 1
65299: ARRAY
65300: PUSH
65301: LD_INT 1
65303: ARRAY
65304: PUSH
65305: LD_STRING l
65307: EQUAL
65308: PUSH
65309: LD_VAR 0 1
65313: PPUSH
65314: CALL_OW 437
65318: PUSH
65319: LD_INT 1
65321: ARRAY
65322: PUSH
65323: LD_INT 4
65325: ARRAY
65326: PUSH
65327: LD_VAR 0 2
65331: EQUAL
65332: AND
65333: IFFALSE 65345
// result := true else
65335: LD_ADDR_VAR 0 3
65339: PUSH
65340: LD_INT 1
65342: ST_TO_ADDR
65343: GO 65353
// result := false ;
65345: LD_ADDR_VAR 0 3
65349: PUSH
65350: LD_INT 0
65352: ST_TO_ADDR
// end else
65353: GO 65363
// result := false ;
65355: LD_ADDR_VAR 0 3
65359: PUSH
65360: LD_INT 0
65362: ST_TO_ADDR
// end ;
65363: LD_VAR 0 3
65367: RET
// export function HealTarget ( sci ) ; begin
65368: LD_INT 0
65370: PPUSH
// if not sci then
65371: LD_VAR 0 1
65375: NOT
65376: IFFALSE 65380
// exit ;
65378: GO 65445
// result := 0 ;
65380: LD_ADDR_VAR 0 2
65384: PUSH
65385: LD_INT 0
65387: ST_TO_ADDR
// if GetTaskList ( sci ) then
65388: LD_VAR 0 1
65392: PPUSH
65393: CALL_OW 437
65397: IFFALSE 65445
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65399: LD_VAR 0 1
65403: PPUSH
65404: CALL_OW 437
65408: PUSH
65409: LD_INT 1
65411: ARRAY
65412: PUSH
65413: LD_INT 1
65415: ARRAY
65416: PUSH
65417: LD_STRING l
65419: EQUAL
65420: IFFALSE 65445
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65422: LD_ADDR_VAR 0 2
65426: PUSH
65427: LD_VAR 0 1
65431: PPUSH
65432: CALL_OW 437
65436: PUSH
65437: LD_INT 1
65439: ARRAY
65440: PUSH
65441: LD_INT 4
65443: ARRAY
65444: ST_TO_ADDR
// end ;
65445: LD_VAR 0 2
65449: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65450: LD_INT 0
65452: PPUSH
65453: PPUSH
65454: PPUSH
65455: PPUSH
// if not base_units then
65456: LD_VAR 0 1
65460: NOT
65461: IFFALSE 65465
// exit ;
65463: GO 65552
// result := false ;
65465: LD_ADDR_VAR 0 2
65469: PUSH
65470: LD_INT 0
65472: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65473: LD_ADDR_VAR 0 5
65477: PUSH
65478: LD_VAR 0 1
65482: PPUSH
65483: LD_INT 21
65485: PUSH
65486: LD_INT 3
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PPUSH
65493: CALL_OW 72
65497: ST_TO_ADDR
// if not tmp then
65498: LD_VAR 0 5
65502: NOT
65503: IFFALSE 65507
// exit ;
65505: GO 65552
// for i in tmp do
65507: LD_ADDR_VAR 0 3
65511: PUSH
65512: LD_VAR 0 5
65516: PUSH
65517: FOR_IN
65518: IFFALSE 65550
// begin result := EnemyInRange ( i , 22 ) ;
65520: LD_ADDR_VAR 0 2
65524: PUSH
65525: LD_VAR 0 3
65529: PPUSH
65530: LD_INT 22
65532: PPUSH
65533: CALL 63139 0 2
65537: ST_TO_ADDR
// if result then
65538: LD_VAR 0 2
65542: IFFALSE 65548
// exit ;
65544: POP
65545: POP
65546: GO 65552
// end ;
65548: GO 65517
65550: POP
65551: POP
// end ;
65552: LD_VAR 0 2
65556: RET
// export function FilterByTag ( units , tag ) ; begin
65557: LD_INT 0
65559: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65560: LD_ADDR_VAR 0 3
65564: PUSH
65565: LD_VAR 0 1
65569: PPUSH
65570: LD_INT 120
65572: PUSH
65573: LD_VAR 0 2
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PPUSH
65582: CALL_OW 72
65586: ST_TO_ADDR
// end ;
65587: LD_VAR 0 3
65591: RET
// export function IsDriver ( un ) ; begin
65592: LD_INT 0
65594: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65595: LD_ADDR_VAR 0 2
65599: PUSH
65600: LD_VAR 0 1
65604: PUSH
65605: LD_INT 55
65607: PUSH
65608: EMPTY
65609: LIST
65610: PPUSH
65611: CALL_OW 69
65615: IN
65616: ST_TO_ADDR
// end ;
65617: LD_VAR 0 2
65621: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65622: LD_INT 0
65624: PPUSH
65625: PPUSH
// list := [ ] ;
65626: LD_ADDR_VAR 0 5
65630: PUSH
65631: EMPTY
65632: ST_TO_ADDR
// case d of 0 :
65633: LD_VAR 0 3
65637: PUSH
65638: LD_INT 0
65640: DOUBLE
65641: EQUAL
65642: IFTRUE 65646
65644: GO 65779
65646: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65647: LD_ADDR_VAR 0 5
65651: PUSH
65652: LD_VAR 0 1
65656: PUSH
65657: LD_INT 4
65659: MINUS
65660: PUSH
65661: LD_VAR 0 2
65665: PUSH
65666: LD_INT 4
65668: MINUS
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: PUSH
65678: LD_VAR 0 1
65682: PUSH
65683: LD_INT 3
65685: MINUS
65686: PUSH
65687: LD_VAR 0 2
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: PUSH
65700: LD_VAR 0 1
65704: PUSH
65705: LD_INT 4
65707: PLUS
65708: PUSH
65709: LD_VAR 0 2
65713: PUSH
65714: LD_INT 4
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: LIST
65721: PUSH
65722: LD_VAR 0 1
65726: PUSH
65727: LD_INT 3
65729: PLUS
65730: PUSH
65731: LD_VAR 0 2
65735: PUSH
65736: LD_INT 3
65738: PLUS
65739: PUSH
65740: LD_INT 5
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: LIST
65747: PUSH
65748: LD_VAR 0 1
65752: PUSH
65753: LD_VAR 0 2
65757: PUSH
65758: LD_INT 4
65760: PLUS
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: ST_TO_ADDR
// end ; 1 :
65777: GO 66477
65779: LD_INT 1
65781: DOUBLE
65782: EQUAL
65783: IFTRUE 65787
65785: GO 65920
65787: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65788: LD_ADDR_VAR 0 5
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: LD_VAR 0 2
65802: PUSH
65803: LD_INT 4
65805: MINUS
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: LIST
65814: PUSH
65815: LD_VAR 0 1
65819: PUSH
65820: LD_INT 3
65822: MINUS
65823: PUSH
65824: LD_VAR 0 2
65828: PUSH
65829: LD_INT 3
65831: MINUS
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: PUSH
65841: LD_VAR 0 1
65845: PUSH
65846: LD_INT 4
65848: MINUS
65849: PUSH
65850: LD_VAR 0 2
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: LIST
65862: PUSH
65863: LD_VAR 0 1
65867: PUSH
65868: LD_VAR 0 2
65872: PUSH
65873: LD_INT 3
65875: PLUS
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: PUSH
65885: LD_VAR 0 1
65889: PUSH
65890: LD_INT 4
65892: PLUS
65893: PUSH
65894: LD_VAR 0 2
65898: PUSH
65899: LD_INT 4
65901: PLUS
65902: PUSH
65903: LD_INT 5
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: ST_TO_ADDR
// end ; 2 :
65918: GO 66477
65920: LD_INT 2
65922: DOUBLE
65923: EQUAL
65924: IFTRUE 65928
65926: GO 66057
65928: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65929: LD_ADDR_VAR 0 5
65933: PUSH
65934: LD_VAR 0 1
65938: PUSH
65939: LD_VAR 0 2
65943: PUSH
65944: LD_INT 3
65946: MINUS
65947: PUSH
65948: LD_INT 3
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: PUSH
65956: LD_VAR 0 1
65960: PUSH
65961: LD_INT 4
65963: PLUS
65964: PUSH
65965: LD_VAR 0 2
65969: PUSH
65970: LD_INT 4
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: LIST
65977: PUSH
65978: LD_VAR 0 1
65982: PUSH
65983: LD_VAR 0 2
65987: PUSH
65988: LD_INT 4
65990: PLUS
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: PUSH
66000: LD_VAR 0 1
66004: PUSH
66005: LD_INT 3
66007: MINUS
66008: PUSH
66009: LD_VAR 0 2
66013: PUSH
66014: LD_INT 1
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: LIST
66021: PUSH
66022: LD_VAR 0 1
66026: PUSH
66027: LD_INT 4
66029: MINUS
66030: PUSH
66031: LD_VAR 0 2
66035: PUSH
66036: LD_INT 4
66038: MINUS
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: ST_TO_ADDR
// end ; 3 :
66055: GO 66477
66057: LD_INT 3
66059: DOUBLE
66060: EQUAL
66061: IFTRUE 66065
66063: GO 66198
66065: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66066: LD_ADDR_VAR 0 5
66070: PUSH
66071: LD_VAR 0 1
66075: PUSH
66076: LD_INT 3
66078: PLUS
66079: PUSH
66080: LD_VAR 0 2
66084: PUSH
66085: LD_INT 4
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: PUSH
66093: LD_VAR 0 1
66097: PUSH
66098: LD_INT 4
66100: PLUS
66101: PUSH
66102: LD_VAR 0 2
66106: PUSH
66107: LD_INT 4
66109: PLUS
66110: PUSH
66111: LD_INT 5
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: PUSH
66119: LD_VAR 0 1
66123: PUSH
66124: LD_INT 4
66126: MINUS
66127: PUSH
66128: LD_VAR 0 2
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: PUSH
66141: LD_VAR 0 1
66145: PUSH
66146: LD_VAR 0 2
66150: PUSH
66151: LD_INT 4
66153: MINUS
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: LIST
66162: PUSH
66163: LD_VAR 0 1
66167: PUSH
66168: LD_INT 3
66170: MINUS
66171: PUSH
66172: LD_VAR 0 2
66176: PUSH
66177: LD_INT 3
66179: MINUS
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: LIST
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: ST_TO_ADDR
// end ; 4 :
66196: GO 66477
66198: LD_INT 4
66200: DOUBLE
66201: EQUAL
66202: IFTRUE 66206
66204: GO 66339
66206: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66207: LD_ADDR_VAR 0 5
66211: PUSH
66212: LD_VAR 0 1
66216: PUSH
66217: LD_VAR 0 2
66221: PUSH
66222: LD_INT 4
66224: PLUS
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: PUSH
66234: LD_VAR 0 1
66238: PUSH
66239: LD_INT 3
66241: PLUS
66242: PUSH
66243: LD_VAR 0 2
66247: PUSH
66248: LD_INT 3
66250: PLUS
66251: PUSH
66252: LD_INT 5
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: LIST
66259: PUSH
66260: LD_VAR 0 1
66264: PUSH
66265: LD_INT 4
66267: PLUS
66268: PUSH
66269: LD_VAR 0 2
66273: PUSH
66274: LD_INT 4
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: LD_VAR 0 2
66291: PUSH
66292: LD_INT 3
66294: MINUS
66295: PUSH
66296: LD_INT 3
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: LD_INT 4
66311: MINUS
66312: PUSH
66313: LD_VAR 0 2
66317: PUSH
66318: LD_INT 4
66320: MINUS
66321: PUSH
66322: LD_INT 2
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: ST_TO_ADDR
// end ; 5 :
66337: GO 66477
66339: LD_INT 5
66341: DOUBLE
66342: EQUAL
66343: IFTRUE 66347
66345: GO 66476
66347: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66348: LD_ADDR_VAR 0 5
66352: PUSH
66353: LD_VAR 0 1
66357: PUSH
66358: LD_INT 4
66360: MINUS
66361: PUSH
66362: LD_VAR 0 2
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: LIST
66374: PUSH
66375: LD_VAR 0 1
66379: PUSH
66380: LD_VAR 0 2
66384: PUSH
66385: LD_INT 4
66387: MINUS
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: LIST
66396: PUSH
66397: LD_VAR 0 1
66401: PUSH
66402: LD_INT 4
66404: PLUS
66405: PUSH
66406: LD_VAR 0 2
66410: PUSH
66411: LD_INT 4
66413: PLUS
66414: PUSH
66415: LD_INT 5
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: PUSH
66423: LD_VAR 0 1
66427: PUSH
66428: LD_INT 3
66430: PLUS
66431: PUSH
66432: LD_VAR 0 2
66436: PUSH
66437: LD_INT 4
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: LIST
66444: PUSH
66445: LD_VAR 0 1
66449: PUSH
66450: LD_VAR 0 2
66454: PUSH
66455: LD_INT 3
66457: PLUS
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: ST_TO_ADDR
// end ; end ;
66474: GO 66477
66476: POP
// result := list ;
66477: LD_ADDR_VAR 0 4
66481: PUSH
66482: LD_VAR 0 5
66486: ST_TO_ADDR
// end ;
66487: LD_VAR 0 4
66491: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66492: LD_INT 0
66494: PPUSH
66495: PPUSH
66496: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66497: LD_VAR 0 1
66501: NOT
66502: PUSH
66503: LD_VAR 0 2
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: LD_INT 3
66516: PUSH
66517: LD_INT 4
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: IN
66526: NOT
66527: OR
66528: IFFALSE 66532
// exit ;
66530: GO 66615
// tmp := [ ] ;
66532: LD_ADDR_VAR 0 5
66536: PUSH
66537: EMPTY
66538: ST_TO_ADDR
// for i in units do
66539: LD_ADDR_VAR 0 4
66543: PUSH
66544: LD_VAR 0 1
66548: PUSH
66549: FOR_IN
66550: IFFALSE 66584
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66552: LD_ADDR_VAR 0 5
66556: PUSH
66557: LD_VAR 0 5
66561: PPUSH
66562: LD_VAR 0 4
66566: PPUSH
66567: LD_VAR 0 2
66571: PPUSH
66572: CALL_OW 259
66576: PPUSH
66577: CALL 67976 0 2
66581: ST_TO_ADDR
66582: GO 66549
66584: POP
66585: POP
// if not tmp then
66586: LD_VAR 0 5
66590: NOT
66591: IFFALSE 66595
// exit ;
66593: GO 66615
// result := SortListByListDesc ( units , tmp ) ;
66595: LD_ADDR_VAR 0 3
66599: PUSH
66600: LD_VAR 0 1
66604: PPUSH
66605: LD_VAR 0 5
66609: PPUSH
66610: CALL_OW 77
66614: ST_TO_ADDR
// end ;
66615: LD_VAR 0 3
66619: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66620: LD_INT 0
66622: PPUSH
66623: PPUSH
66624: PPUSH
// result := false ;
66625: LD_ADDR_VAR 0 3
66629: PUSH
66630: LD_INT 0
66632: ST_TO_ADDR
// if not building then
66633: LD_VAR 0 2
66637: NOT
66638: IFFALSE 66642
// exit ;
66640: GO 66780
// x := GetX ( building ) ;
66642: LD_ADDR_VAR 0 4
66646: PUSH
66647: LD_VAR 0 2
66651: PPUSH
66652: CALL_OW 250
66656: ST_TO_ADDR
// y := GetY ( building ) ;
66657: LD_ADDR_VAR 0 5
66661: PUSH
66662: LD_VAR 0 2
66666: PPUSH
66667: CALL_OW 251
66671: ST_TO_ADDR
// if not x or not y then
66672: LD_VAR 0 4
66676: NOT
66677: PUSH
66678: LD_VAR 0 5
66682: NOT
66683: OR
66684: IFFALSE 66688
// exit ;
66686: GO 66780
// if GetTaskList ( unit ) then
66688: LD_VAR 0 1
66692: PPUSH
66693: CALL_OW 437
66697: IFFALSE 66780
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66699: LD_STRING e
66701: PUSH
66702: LD_VAR 0 1
66706: PPUSH
66707: CALL_OW 437
66711: PUSH
66712: LD_INT 1
66714: ARRAY
66715: PUSH
66716: LD_INT 1
66718: ARRAY
66719: EQUAL
66720: PUSH
66721: LD_VAR 0 4
66725: PUSH
66726: LD_VAR 0 1
66730: PPUSH
66731: CALL_OW 437
66735: PUSH
66736: LD_INT 1
66738: ARRAY
66739: PUSH
66740: LD_INT 2
66742: ARRAY
66743: EQUAL
66744: AND
66745: PUSH
66746: LD_VAR 0 5
66750: PUSH
66751: LD_VAR 0 1
66755: PPUSH
66756: CALL_OW 437
66760: PUSH
66761: LD_INT 1
66763: ARRAY
66764: PUSH
66765: LD_INT 3
66767: ARRAY
66768: EQUAL
66769: AND
66770: IFFALSE 66780
// result := true end ;
66772: LD_ADDR_VAR 0 3
66776: PUSH
66777: LD_INT 1
66779: ST_TO_ADDR
// end ;
66780: LD_VAR 0 3
66784: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66785: LD_INT 0
66787: PPUSH
// result := false ;
66788: LD_ADDR_VAR 0 4
66792: PUSH
66793: LD_INT 0
66795: ST_TO_ADDR
// if GetTaskList ( unit ) then
66796: LD_VAR 0 1
66800: PPUSH
66801: CALL_OW 437
66805: IFFALSE 66888
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66807: LD_STRING M
66809: PUSH
66810: LD_VAR 0 1
66814: PPUSH
66815: CALL_OW 437
66819: PUSH
66820: LD_INT 1
66822: ARRAY
66823: PUSH
66824: LD_INT 1
66826: ARRAY
66827: EQUAL
66828: PUSH
66829: LD_VAR 0 2
66833: PUSH
66834: LD_VAR 0 1
66838: PPUSH
66839: CALL_OW 437
66843: PUSH
66844: LD_INT 1
66846: ARRAY
66847: PUSH
66848: LD_INT 2
66850: ARRAY
66851: EQUAL
66852: AND
66853: PUSH
66854: LD_VAR 0 3
66858: PUSH
66859: LD_VAR 0 1
66863: PPUSH
66864: CALL_OW 437
66868: PUSH
66869: LD_INT 1
66871: ARRAY
66872: PUSH
66873: LD_INT 3
66875: ARRAY
66876: EQUAL
66877: AND
66878: IFFALSE 66888
// result := true ;
66880: LD_ADDR_VAR 0 4
66884: PUSH
66885: LD_INT 1
66887: ST_TO_ADDR
// end ; end ;
66888: LD_VAR 0 4
66892: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66893: LD_INT 0
66895: PPUSH
66896: PPUSH
66897: PPUSH
66898: PPUSH
// if not unit or not area then
66899: LD_VAR 0 1
66903: NOT
66904: PUSH
66905: LD_VAR 0 2
66909: NOT
66910: OR
66911: IFFALSE 66915
// exit ;
66913: GO 67079
// tmp := AreaToList ( area , i ) ;
66915: LD_ADDR_VAR 0 6
66919: PUSH
66920: LD_VAR 0 2
66924: PPUSH
66925: LD_VAR 0 5
66929: PPUSH
66930: CALL_OW 517
66934: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66935: LD_ADDR_VAR 0 5
66939: PUSH
66940: DOUBLE
66941: LD_INT 1
66943: DEC
66944: ST_TO_ADDR
66945: LD_VAR 0 6
66949: PUSH
66950: LD_INT 1
66952: ARRAY
66953: PUSH
66954: FOR_TO
66955: IFFALSE 67077
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66957: LD_ADDR_VAR 0 7
66961: PUSH
66962: LD_VAR 0 6
66966: PUSH
66967: LD_INT 1
66969: ARRAY
66970: PUSH
66971: LD_VAR 0 5
66975: ARRAY
66976: PUSH
66977: LD_VAR 0 6
66981: PUSH
66982: LD_INT 2
66984: ARRAY
66985: PUSH
66986: LD_VAR 0 5
66990: ARRAY
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66996: LD_VAR 0 7
67000: PUSH
67001: LD_INT 1
67003: ARRAY
67004: PPUSH
67005: LD_VAR 0 7
67009: PUSH
67010: LD_INT 2
67012: ARRAY
67013: PPUSH
67014: CALL_OW 428
67018: PUSH
67019: LD_INT 0
67021: EQUAL
67022: IFFALSE 67075
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67024: LD_VAR 0 1
67028: PPUSH
67029: LD_VAR 0 7
67033: PUSH
67034: LD_INT 1
67036: ARRAY
67037: PPUSH
67038: LD_VAR 0 7
67042: PUSH
67043: LD_INT 2
67045: ARRAY
67046: PPUSH
67047: LD_VAR 0 3
67051: PPUSH
67052: CALL_OW 48
// result := IsPlaced ( unit ) ;
67056: LD_ADDR_VAR 0 4
67060: PUSH
67061: LD_VAR 0 1
67065: PPUSH
67066: CALL_OW 305
67070: ST_TO_ADDR
// exit ;
67071: POP
67072: POP
67073: GO 67079
// end ; end ;
67075: GO 66954
67077: POP
67078: POP
// end ;
67079: LD_VAR 0 4
67083: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67084: LD_INT 0
67086: PPUSH
67087: PPUSH
67088: PPUSH
// if not side or side > 8 then
67089: LD_VAR 0 1
67093: NOT
67094: PUSH
67095: LD_VAR 0 1
67099: PUSH
67100: LD_INT 8
67102: GREATER
67103: OR
67104: IFFALSE 67108
// exit ;
67106: GO 67295
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67108: LD_ADDR_VAR 0 4
67112: PUSH
67113: LD_INT 22
67115: PUSH
67116: LD_VAR 0 1
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 21
67127: PUSH
67128: LD_INT 3
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PPUSH
67139: CALL_OW 69
67143: ST_TO_ADDR
// if not tmp then
67144: LD_VAR 0 4
67148: NOT
67149: IFFALSE 67153
// exit ;
67151: GO 67295
// enable_addtolog := true ;
67153: LD_ADDR_OWVAR 81
67157: PUSH
67158: LD_INT 1
67160: ST_TO_ADDR
// AddToLog ( [ ) ;
67161: LD_STRING [
67163: PPUSH
67164: CALL_OW 561
// for i in tmp do
67168: LD_ADDR_VAR 0 3
67172: PUSH
67173: LD_VAR 0 4
67177: PUSH
67178: FOR_IN
67179: IFFALSE 67286
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67181: LD_STRING [
67183: PUSH
67184: LD_VAR 0 3
67188: PPUSH
67189: CALL_OW 266
67193: STR
67194: PUSH
67195: LD_STRING , 
67197: STR
67198: PUSH
67199: LD_VAR 0 3
67203: PPUSH
67204: CALL_OW 250
67208: STR
67209: PUSH
67210: LD_STRING , 
67212: STR
67213: PUSH
67214: LD_VAR 0 3
67218: PPUSH
67219: CALL_OW 251
67223: STR
67224: PUSH
67225: LD_STRING , 
67227: STR
67228: PUSH
67229: LD_VAR 0 3
67233: PPUSH
67234: CALL_OW 254
67238: STR
67239: PUSH
67240: LD_STRING , 
67242: STR
67243: PUSH
67244: LD_VAR 0 3
67248: PPUSH
67249: LD_INT 1
67251: PPUSH
67252: CALL_OW 268
67256: STR
67257: PUSH
67258: LD_STRING , 
67260: STR
67261: PUSH
67262: LD_VAR 0 3
67266: PPUSH
67267: LD_INT 2
67269: PPUSH
67270: CALL_OW 268
67274: STR
67275: PUSH
67276: LD_STRING ],
67278: STR
67279: PPUSH
67280: CALL_OW 561
// end ;
67284: GO 67178
67286: POP
67287: POP
// AddToLog ( ]; ) ;
67288: LD_STRING ];
67290: PPUSH
67291: CALL_OW 561
// end ;
67295: LD_VAR 0 2
67299: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67300: LD_INT 0
67302: PPUSH
67303: PPUSH
67304: PPUSH
67305: PPUSH
67306: PPUSH
// if not area or not rate or not max then
67307: LD_VAR 0 1
67311: NOT
67312: PUSH
67313: LD_VAR 0 2
67317: NOT
67318: OR
67319: PUSH
67320: LD_VAR 0 4
67324: NOT
67325: OR
67326: IFFALSE 67330
// exit ;
67328: GO 67519
// while 1 do
67330: LD_INT 1
67332: IFFALSE 67519
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67334: LD_ADDR_VAR 0 9
67338: PUSH
67339: LD_VAR 0 1
67343: PPUSH
67344: LD_INT 1
67346: PPUSH
67347: CALL_OW 287
67351: PUSH
67352: LD_INT 10
67354: MUL
67355: ST_TO_ADDR
// r := rate / 10 ;
67356: LD_ADDR_VAR 0 7
67360: PUSH
67361: LD_VAR 0 2
67365: PUSH
67366: LD_INT 10
67368: DIVREAL
67369: ST_TO_ADDR
// time := 1 1$00 ;
67370: LD_ADDR_VAR 0 8
67374: PUSH
67375: LD_INT 2100
67377: ST_TO_ADDR
// if amount < min then
67378: LD_VAR 0 9
67382: PUSH
67383: LD_VAR 0 3
67387: LESS
67388: IFFALSE 67406
// r := r * 2 else
67390: LD_ADDR_VAR 0 7
67394: PUSH
67395: LD_VAR 0 7
67399: PUSH
67400: LD_INT 2
67402: MUL
67403: ST_TO_ADDR
67404: GO 67432
// if amount > max then
67406: LD_VAR 0 9
67410: PUSH
67411: LD_VAR 0 4
67415: GREATER
67416: IFFALSE 67432
// r := r / 2 ;
67418: LD_ADDR_VAR 0 7
67422: PUSH
67423: LD_VAR 0 7
67427: PUSH
67428: LD_INT 2
67430: DIVREAL
67431: ST_TO_ADDR
// time := time / r ;
67432: LD_ADDR_VAR 0 8
67436: PUSH
67437: LD_VAR 0 8
67441: PUSH
67442: LD_VAR 0 7
67446: DIVREAL
67447: ST_TO_ADDR
// if time < 0 then
67448: LD_VAR 0 8
67452: PUSH
67453: LD_INT 0
67455: LESS
67456: IFFALSE 67473
// time := time * - 1 ;
67458: LD_ADDR_VAR 0 8
67462: PUSH
67463: LD_VAR 0 8
67467: PUSH
67468: LD_INT 1
67470: NEG
67471: MUL
67472: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67473: LD_VAR 0 8
67477: PUSH
67478: LD_INT 35
67480: PPUSH
67481: LD_INT 875
67483: PPUSH
67484: CALL_OW 12
67488: PLUS
67489: PPUSH
67490: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67494: LD_INT 1
67496: PPUSH
67497: LD_INT 5
67499: PPUSH
67500: CALL_OW 12
67504: PPUSH
67505: LD_VAR 0 1
67509: PPUSH
67510: LD_INT 1
67512: PPUSH
67513: CALL_OW 55
// end ;
67517: GO 67330
// end ;
67519: LD_VAR 0 5
67523: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67524: LD_INT 0
67526: PPUSH
67527: PPUSH
67528: PPUSH
67529: PPUSH
67530: PPUSH
67531: PPUSH
67532: PPUSH
67533: PPUSH
// if not turrets or not factories then
67534: LD_VAR 0 1
67538: NOT
67539: PUSH
67540: LD_VAR 0 2
67544: NOT
67545: OR
67546: IFFALSE 67550
// exit ;
67548: GO 67857
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67550: LD_ADDR_VAR 0 10
67554: PUSH
67555: LD_INT 5
67557: PUSH
67558: LD_INT 6
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: LD_INT 4
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 3
67577: PUSH
67578: LD_INT 5
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 24
67592: PUSH
67593: LD_INT 25
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 23
67602: PUSH
67603: LD_INT 27
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 42
67616: PUSH
67617: LD_INT 43
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 44
67626: PUSH
67627: LD_INT 46
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 45
67636: PUSH
67637: LD_INT 47
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: LIST
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: LIST
67653: ST_TO_ADDR
// result := [ ] ;
67654: LD_ADDR_VAR 0 3
67658: PUSH
67659: EMPTY
67660: ST_TO_ADDR
// for i in turrets do
67661: LD_ADDR_VAR 0 4
67665: PUSH
67666: LD_VAR 0 1
67670: PUSH
67671: FOR_IN
67672: IFFALSE 67855
// begin nat := GetNation ( i ) ;
67674: LD_ADDR_VAR 0 7
67678: PUSH
67679: LD_VAR 0 4
67683: PPUSH
67684: CALL_OW 248
67688: ST_TO_ADDR
// weapon := 0 ;
67689: LD_ADDR_VAR 0 8
67693: PUSH
67694: LD_INT 0
67696: ST_TO_ADDR
// if not nat then
67697: LD_VAR 0 7
67701: NOT
67702: IFFALSE 67706
// continue ;
67704: GO 67671
// for j in list [ nat ] do
67706: LD_ADDR_VAR 0 5
67710: PUSH
67711: LD_VAR 0 10
67715: PUSH
67716: LD_VAR 0 7
67720: ARRAY
67721: PUSH
67722: FOR_IN
67723: IFFALSE 67764
// if GetBWeapon ( i ) = j [ 1 ] then
67725: LD_VAR 0 4
67729: PPUSH
67730: CALL_OW 269
67734: PUSH
67735: LD_VAR 0 5
67739: PUSH
67740: LD_INT 1
67742: ARRAY
67743: EQUAL
67744: IFFALSE 67762
// begin weapon := j [ 2 ] ;
67746: LD_ADDR_VAR 0 8
67750: PUSH
67751: LD_VAR 0 5
67755: PUSH
67756: LD_INT 2
67758: ARRAY
67759: ST_TO_ADDR
// break ;
67760: GO 67764
// end ;
67762: GO 67722
67764: POP
67765: POP
// if not weapon then
67766: LD_VAR 0 8
67770: NOT
67771: IFFALSE 67775
// continue ;
67773: GO 67671
// for k in factories do
67775: LD_ADDR_VAR 0 6
67779: PUSH
67780: LD_VAR 0 2
67784: PUSH
67785: FOR_IN
67786: IFFALSE 67851
// begin weapons := AvailableWeaponList ( k ) ;
67788: LD_ADDR_VAR 0 9
67792: PUSH
67793: LD_VAR 0 6
67797: PPUSH
67798: CALL_OW 478
67802: ST_TO_ADDR
// if not weapons then
67803: LD_VAR 0 9
67807: NOT
67808: IFFALSE 67812
// continue ;
67810: GO 67785
// if weapon in weapons then
67812: LD_VAR 0 8
67816: PUSH
67817: LD_VAR 0 9
67821: IN
67822: IFFALSE 67849
// begin result := [ i , weapon ] ;
67824: LD_ADDR_VAR 0 3
67828: PUSH
67829: LD_VAR 0 4
67833: PUSH
67834: LD_VAR 0 8
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: ST_TO_ADDR
// exit ;
67843: POP
67844: POP
67845: POP
67846: POP
67847: GO 67857
// end ; end ;
67849: GO 67785
67851: POP
67852: POP
// end ;
67853: GO 67671
67855: POP
67856: POP
// end ;
67857: LD_VAR 0 3
67861: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67862: LD_INT 0
67864: PPUSH
// if not side or side > 8 then
67865: LD_VAR 0 3
67869: NOT
67870: PUSH
67871: LD_VAR 0 3
67875: PUSH
67876: LD_INT 8
67878: GREATER
67879: OR
67880: IFFALSE 67884
// exit ;
67882: GO 67943
// if not range then
67884: LD_VAR 0 4
67888: NOT
67889: IFFALSE 67900
// range := - 12 ;
67891: LD_ADDR_VAR 0 4
67895: PUSH
67896: LD_INT 12
67898: NEG
67899: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67900: LD_VAR 0 1
67904: PPUSH
67905: LD_VAR 0 2
67909: PPUSH
67910: LD_VAR 0 3
67914: PPUSH
67915: LD_VAR 0 4
67919: PPUSH
67920: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67924: LD_VAR 0 1
67928: PPUSH
67929: LD_VAR 0 2
67933: PPUSH
67934: LD_VAR 0 3
67938: PPUSH
67939: CALL_OW 331
// end ;
67943: LD_VAR 0 5
67947: RET
// export function Video ( mode ) ; begin
67948: LD_INT 0
67950: PPUSH
// ingame_video = mode ;
67951: LD_ADDR_OWVAR 52
67955: PUSH
67956: LD_VAR 0 1
67960: ST_TO_ADDR
// interface_hidden = mode ;
67961: LD_ADDR_OWVAR 54
67965: PUSH
67966: LD_VAR 0 1
67970: ST_TO_ADDR
// end ;
67971: LD_VAR 0 2
67975: RET
// export function Join ( array , element ) ; begin
67976: LD_INT 0
67978: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67979: LD_ADDR_VAR 0 3
67983: PUSH
67984: LD_VAR 0 1
67988: PPUSH
67989: LD_VAR 0 1
67993: PUSH
67994: LD_INT 1
67996: PLUS
67997: PPUSH
67998: LD_VAR 0 2
68002: PPUSH
68003: CALL_OW 1
68007: ST_TO_ADDR
// end ;
68008: LD_VAR 0 3
68012: RET
// export function JoinUnion ( array , element ) ; begin
68013: LD_INT 0
68015: PPUSH
// result := array union element ;
68016: LD_ADDR_VAR 0 3
68020: PUSH
68021: LD_VAR 0 1
68025: PUSH
68026: LD_VAR 0 2
68030: UNION
68031: ST_TO_ADDR
// end ;
68032: LD_VAR 0 3
68036: RET
// export function GetBehemoths ( side ) ; begin
68037: LD_INT 0
68039: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68040: LD_ADDR_VAR 0 2
68044: PUSH
68045: LD_INT 22
68047: PUSH
68048: LD_VAR 0 1
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 31
68059: PUSH
68060: LD_INT 25
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PPUSH
68071: CALL_OW 69
68075: ST_TO_ADDR
// end ;
68076: LD_VAR 0 2
68080: RET
// export function Shuffle ( array ) ; var i , index ; begin
68081: LD_INT 0
68083: PPUSH
68084: PPUSH
68085: PPUSH
// result := [ ] ;
68086: LD_ADDR_VAR 0 2
68090: PUSH
68091: EMPTY
68092: ST_TO_ADDR
// if not array then
68093: LD_VAR 0 1
68097: NOT
68098: IFFALSE 68102
// exit ;
68100: GO 68201
// Randomize ;
68102: CALL_OW 10
// for i = array downto 1 do
68106: LD_ADDR_VAR 0 3
68110: PUSH
68111: DOUBLE
68112: LD_VAR 0 1
68116: INC
68117: ST_TO_ADDR
68118: LD_INT 1
68120: PUSH
68121: FOR_DOWNTO
68122: IFFALSE 68199
// begin index := rand ( 1 , array ) ;
68124: LD_ADDR_VAR 0 4
68128: PUSH
68129: LD_INT 1
68131: PPUSH
68132: LD_VAR 0 1
68136: PPUSH
68137: CALL_OW 12
68141: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68142: LD_ADDR_VAR 0 2
68146: PUSH
68147: LD_VAR 0 2
68151: PPUSH
68152: LD_VAR 0 2
68156: PUSH
68157: LD_INT 1
68159: PLUS
68160: PPUSH
68161: LD_VAR 0 1
68165: PUSH
68166: LD_VAR 0 4
68170: ARRAY
68171: PPUSH
68172: CALL_OW 2
68176: ST_TO_ADDR
// array := Delete ( array , index ) ;
68177: LD_ADDR_VAR 0 1
68181: PUSH
68182: LD_VAR 0 1
68186: PPUSH
68187: LD_VAR 0 4
68191: PPUSH
68192: CALL_OW 3
68196: ST_TO_ADDR
// end ;
68197: GO 68121
68199: POP
68200: POP
// end ;
68201: LD_VAR 0 2
68205: RET
// export function GetBaseMaterials ( base ) ; begin
68206: LD_INT 0
68208: PPUSH
// result := [ 0 , 0 , 0 ] ;
68209: LD_ADDR_VAR 0 2
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: ST_TO_ADDR
// if not base then
68228: LD_VAR 0 1
68232: NOT
68233: IFFALSE 68237
// exit ;
68235: GO 68286
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68237: LD_ADDR_VAR 0 2
68241: PUSH
68242: LD_VAR 0 1
68246: PPUSH
68247: LD_INT 1
68249: PPUSH
68250: CALL_OW 275
68254: PUSH
68255: LD_VAR 0 1
68259: PPUSH
68260: LD_INT 2
68262: PPUSH
68263: CALL_OW 275
68267: PUSH
68268: LD_VAR 0 1
68272: PPUSH
68273: LD_INT 3
68275: PPUSH
68276: CALL_OW 275
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: LIST
68285: ST_TO_ADDR
// end ;
68286: LD_VAR 0 2
68290: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68291: LD_INT 0
68293: PPUSH
68294: PPUSH
// result := array ;
68295: LD_ADDR_VAR 0 3
68299: PUSH
68300: LD_VAR 0 1
68304: ST_TO_ADDR
// if size >= result then
68305: LD_VAR 0 2
68309: PUSH
68310: LD_VAR 0 3
68314: GREATEREQUAL
68315: IFFALSE 68319
// exit ;
68317: GO 68369
// if size then
68319: LD_VAR 0 2
68323: IFFALSE 68369
// for i := array downto size do
68325: LD_ADDR_VAR 0 4
68329: PUSH
68330: DOUBLE
68331: LD_VAR 0 1
68335: INC
68336: ST_TO_ADDR
68337: LD_VAR 0 2
68341: PUSH
68342: FOR_DOWNTO
68343: IFFALSE 68367
// result := Delete ( result , result ) ;
68345: LD_ADDR_VAR 0 3
68349: PUSH
68350: LD_VAR 0 3
68354: PPUSH
68355: LD_VAR 0 3
68359: PPUSH
68360: CALL_OW 3
68364: ST_TO_ADDR
68365: GO 68342
68367: POP
68368: POP
// end ;
68369: LD_VAR 0 3
68373: RET
// export function ComExit ( unit ) ; var tmp ; begin
68374: LD_INT 0
68376: PPUSH
68377: PPUSH
// if not IsInUnit ( unit ) then
68378: LD_VAR 0 1
68382: PPUSH
68383: CALL_OW 310
68387: NOT
68388: IFFALSE 68392
// exit ;
68390: GO 68452
// tmp := IsInUnit ( unit ) ;
68392: LD_ADDR_VAR 0 3
68396: PUSH
68397: LD_VAR 0 1
68401: PPUSH
68402: CALL_OW 310
68406: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68407: LD_VAR 0 3
68411: PPUSH
68412: CALL_OW 247
68416: PUSH
68417: LD_INT 2
68419: EQUAL
68420: IFFALSE 68433
// ComExitVehicle ( unit ) else
68422: LD_VAR 0 1
68426: PPUSH
68427: CALL_OW 121
68431: GO 68442
// ComExitBuilding ( unit ) ;
68433: LD_VAR 0 1
68437: PPUSH
68438: CALL_OW 122
// result := tmp ;
68442: LD_ADDR_VAR 0 2
68446: PUSH
68447: LD_VAR 0 3
68451: ST_TO_ADDR
// end ;
68452: LD_VAR 0 2
68456: RET
// export function ComExitAll ( units ) ; var i ; begin
68457: LD_INT 0
68459: PPUSH
68460: PPUSH
// if not units then
68461: LD_VAR 0 1
68465: NOT
68466: IFFALSE 68470
// exit ;
68468: GO 68496
// for i in units do
68470: LD_ADDR_VAR 0 3
68474: PUSH
68475: LD_VAR 0 1
68479: PUSH
68480: FOR_IN
68481: IFFALSE 68494
// ComExit ( i ) ;
68483: LD_VAR 0 3
68487: PPUSH
68488: CALL 68374 0 1
68492: GO 68480
68494: POP
68495: POP
// end ;
68496: LD_VAR 0 2
68500: RET
// export function ResetHc ; begin
68501: LD_INT 0
68503: PPUSH
// InitHc ;
68504: CALL_OW 19
// hc_importance := 0 ;
68508: LD_ADDR_OWVAR 32
68512: PUSH
68513: LD_INT 0
68515: ST_TO_ADDR
// end ;
68516: LD_VAR 0 1
68520: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68521: LD_INT 0
68523: PPUSH
68524: PPUSH
68525: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68526: LD_ADDR_VAR 0 6
68530: PUSH
68531: LD_VAR 0 1
68535: PUSH
68536: LD_VAR 0 3
68540: PLUS
68541: PUSH
68542: LD_INT 2
68544: DIV
68545: ST_TO_ADDR
// if _x < 0 then
68546: LD_VAR 0 6
68550: PUSH
68551: LD_INT 0
68553: LESS
68554: IFFALSE 68571
// _x := _x * - 1 ;
68556: LD_ADDR_VAR 0 6
68560: PUSH
68561: LD_VAR 0 6
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: MUL
68570: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68571: LD_ADDR_VAR 0 7
68575: PUSH
68576: LD_VAR 0 2
68580: PUSH
68581: LD_VAR 0 4
68585: PLUS
68586: PUSH
68587: LD_INT 2
68589: DIV
68590: ST_TO_ADDR
// if _y < 0 then
68591: LD_VAR 0 7
68595: PUSH
68596: LD_INT 0
68598: LESS
68599: IFFALSE 68616
// _y := _y * - 1 ;
68601: LD_ADDR_VAR 0 7
68605: PUSH
68606: LD_VAR 0 7
68610: PUSH
68611: LD_INT 1
68613: NEG
68614: MUL
68615: ST_TO_ADDR
// result := [ _x , _y ] ;
68616: LD_ADDR_VAR 0 5
68620: PUSH
68621: LD_VAR 0 6
68625: PUSH
68626: LD_VAR 0 7
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: ST_TO_ADDR
// end ;
68635: LD_VAR 0 5
68639: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68640: LD_INT 0
68642: PPUSH
68643: PPUSH
68644: PPUSH
68645: PPUSH
// task := GetTaskList ( unit ) ;
68646: LD_ADDR_VAR 0 7
68650: PUSH
68651: LD_VAR 0 1
68655: PPUSH
68656: CALL_OW 437
68660: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68661: LD_VAR 0 7
68665: NOT
68666: PUSH
68667: LD_VAR 0 1
68671: PPUSH
68672: LD_VAR 0 2
68676: PPUSH
68677: CALL_OW 308
68681: NOT
68682: AND
68683: IFFALSE 68687
// exit ;
68685: GO 68805
// if IsInArea ( unit , area ) then
68687: LD_VAR 0 1
68691: PPUSH
68692: LD_VAR 0 2
68696: PPUSH
68697: CALL_OW 308
68701: IFFALSE 68719
// begin ComMoveToArea ( unit , goAway ) ;
68703: LD_VAR 0 1
68707: PPUSH
68708: LD_VAR 0 3
68712: PPUSH
68713: CALL_OW 113
// exit ;
68717: GO 68805
// end ; if task [ 1 ] [ 1 ] <> M then
68719: LD_VAR 0 7
68723: PUSH
68724: LD_INT 1
68726: ARRAY
68727: PUSH
68728: LD_INT 1
68730: ARRAY
68731: PUSH
68732: LD_STRING M
68734: NONEQUAL
68735: IFFALSE 68739
// exit ;
68737: GO 68805
// x := task [ 1 ] [ 2 ] ;
68739: LD_ADDR_VAR 0 5
68743: PUSH
68744: LD_VAR 0 7
68748: PUSH
68749: LD_INT 1
68751: ARRAY
68752: PUSH
68753: LD_INT 2
68755: ARRAY
68756: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68757: LD_ADDR_VAR 0 6
68761: PUSH
68762: LD_VAR 0 7
68766: PUSH
68767: LD_INT 1
68769: ARRAY
68770: PUSH
68771: LD_INT 3
68773: ARRAY
68774: ST_TO_ADDR
// if InArea ( x , y , area ) then
68775: LD_VAR 0 5
68779: PPUSH
68780: LD_VAR 0 6
68784: PPUSH
68785: LD_VAR 0 2
68789: PPUSH
68790: CALL_OW 309
68794: IFFALSE 68805
// ComStop ( unit ) ;
68796: LD_VAR 0 1
68800: PPUSH
68801: CALL_OW 141
// end ;
68805: LD_VAR 0 4
68809: RET
// export function Abs ( value ) ; begin
68810: LD_INT 0
68812: PPUSH
// result := value ;
68813: LD_ADDR_VAR 0 2
68817: PUSH
68818: LD_VAR 0 1
68822: ST_TO_ADDR
// if value < 0 then
68823: LD_VAR 0 1
68827: PUSH
68828: LD_INT 0
68830: LESS
68831: IFFALSE 68848
// result := value * - 1 ;
68833: LD_ADDR_VAR 0 2
68837: PUSH
68838: LD_VAR 0 1
68842: PUSH
68843: LD_INT 1
68845: NEG
68846: MUL
68847: ST_TO_ADDR
// end ;
68848: LD_VAR 0 2
68852: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68853: LD_INT 0
68855: PPUSH
68856: PPUSH
68857: PPUSH
68858: PPUSH
68859: PPUSH
68860: PPUSH
68861: PPUSH
68862: PPUSH
// if not unit or not building then
68863: LD_VAR 0 1
68867: NOT
68868: PUSH
68869: LD_VAR 0 2
68873: NOT
68874: OR
68875: IFFALSE 68879
// exit ;
68877: GO 69105
// x := GetX ( building ) ;
68879: LD_ADDR_VAR 0 4
68883: PUSH
68884: LD_VAR 0 2
68888: PPUSH
68889: CALL_OW 250
68893: ST_TO_ADDR
// y := GetY ( building ) ;
68894: LD_ADDR_VAR 0 6
68898: PUSH
68899: LD_VAR 0 2
68903: PPUSH
68904: CALL_OW 251
68908: ST_TO_ADDR
// d := GetDir ( building ) ;
68909: LD_ADDR_VAR 0 8
68913: PUSH
68914: LD_VAR 0 2
68918: PPUSH
68919: CALL_OW 254
68923: ST_TO_ADDR
// r := 4 ;
68924: LD_ADDR_VAR 0 9
68928: PUSH
68929: LD_INT 4
68931: ST_TO_ADDR
// for i := 1 to 5 do
68932: LD_ADDR_VAR 0 10
68936: PUSH
68937: DOUBLE
68938: LD_INT 1
68940: DEC
68941: ST_TO_ADDR
68942: LD_INT 5
68944: PUSH
68945: FOR_TO
68946: IFFALSE 69103
// begin _x := ShiftX ( x , d , r + i ) ;
68948: LD_ADDR_VAR 0 5
68952: PUSH
68953: LD_VAR 0 4
68957: PPUSH
68958: LD_VAR 0 8
68962: PPUSH
68963: LD_VAR 0 9
68967: PUSH
68968: LD_VAR 0 10
68972: PLUS
68973: PPUSH
68974: CALL_OW 272
68978: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68979: LD_ADDR_VAR 0 7
68983: PUSH
68984: LD_VAR 0 6
68988: PPUSH
68989: LD_VAR 0 8
68993: PPUSH
68994: LD_VAR 0 9
68998: PUSH
68999: LD_VAR 0 10
69003: PLUS
69004: PPUSH
69005: CALL_OW 273
69009: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69010: LD_VAR 0 5
69014: PPUSH
69015: LD_VAR 0 7
69019: PPUSH
69020: CALL_OW 488
69024: PUSH
69025: LD_VAR 0 5
69029: PPUSH
69030: LD_VAR 0 7
69034: PPUSH
69035: CALL_OW 428
69039: PPUSH
69040: CALL_OW 247
69044: PUSH
69045: LD_INT 3
69047: PUSH
69048: LD_INT 2
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: IN
69055: NOT
69056: AND
69057: IFFALSE 69101
// begin ComMoveXY ( unit , _x , _y ) ;
69059: LD_VAR 0 1
69063: PPUSH
69064: LD_VAR 0 5
69068: PPUSH
69069: LD_VAR 0 7
69073: PPUSH
69074: CALL_OW 111
// result := [ _x , _y ] ;
69078: LD_ADDR_VAR 0 3
69082: PUSH
69083: LD_VAR 0 5
69087: PUSH
69088: LD_VAR 0 7
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: ST_TO_ADDR
// exit ;
69097: POP
69098: POP
69099: GO 69105
// end ; end ;
69101: GO 68945
69103: POP
69104: POP
// end ;
69105: LD_VAR 0 3
69109: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69110: LD_INT 0
69112: PPUSH
69113: PPUSH
69114: PPUSH
// result := 0 ;
69115: LD_ADDR_VAR 0 3
69119: PUSH
69120: LD_INT 0
69122: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69123: LD_VAR 0 1
69127: PUSH
69128: LD_INT 0
69130: LESS
69131: PUSH
69132: LD_VAR 0 1
69136: PUSH
69137: LD_INT 8
69139: GREATER
69140: OR
69141: PUSH
69142: LD_VAR 0 2
69146: PUSH
69147: LD_INT 0
69149: LESS
69150: OR
69151: PUSH
69152: LD_VAR 0 2
69156: PUSH
69157: LD_INT 8
69159: GREATER
69160: OR
69161: IFFALSE 69165
// exit ;
69163: GO 69240
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69165: LD_ADDR_VAR 0 4
69169: PUSH
69170: LD_INT 22
69172: PUSH
69173: LD_VAR 0 2
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PPUSH
69182: CALL_OW 69
69186: PUSH
69187: FOR_IN
69188: IFFALSE 69238
// begin un := UnitShoot ( i ) ;
69190: LD_ADDR_VAR 0 5
69194: PUSH
69195: LD_VAR 0 4
69199: PPUSH
69200: CALL_OW 504
69204: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69205: LD_VAR 0 5
69209: PPUSH
69210: CALL_OW 255
69214: PUSH
69215: LD_VAR 0 1
69219: EQUAL
69220: IFFALSE 69236
// begin result := un ;
69222: LD_ADDR_VAR 0 3
69226: PUSH
69227: LD_VAR 0 5
69231: ST_TO_ADDR
// exit ;
69232: POP
69233: POP
69234: GO 69240
// end ; end ;
69236: GO 69187
69238: POP
69239: POP
// end ;
69240: LD_VAR 0 3
69244: RET
// export function GetCargoBay ( units ) ; begin
69245: LD_INT 0
69247: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69248: LD_ADDR_VAR 0 2
69252: PUSH
69253: LD_VAR 0 1
69257: PPUSH
69258: LD_INT 2
69260: PUSH
69261: LD_INT 34
69263: PUSH
69264: LD_INT 12
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 34
69273: PUSH
69274: LD_INT 51
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 34
69283: PUSH
69284: LD_INT 32
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 34
69293: PUSH
69294: LD_INT 89
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: PPUSH
69308: CALL_OW 72
69312: ST_TO_ADDR
// end ;
69313: LD_VAR 0 2
69317: RET
// export function Negate ( value ) ; begin
69318: LD_INT 0
69320: PPUSH
// result := not value ;
69321: LD_ADDR_VAR 0 2
69325: PUSH
69326: LD_VAR 0 1
69330: NOT
69331: ST_TO_ADDR
// end ;
69332: LD_VAR 0 2
69336: RET
// export function Inc ( value ) ; begin
69337: LD_INT 0
69339: PPUSH
// result := value + 1 ;
69340: LD_ADDR_VAR 0 2
69344: PUSH
69345: LD_VAR 0 1
69349: PUSH
69350: LD_INT 1
69352: PLUS
69353: ST_TO_ADDR
// end ;
69354: LD_VAR 0 2
69358: RET
// export function Dec ( value ) ; begin
69359: LD_INT 0
69361: PPUSH
// result := value - 1 ;
69362: LD_ADDR_VAR 0 2
69366: PUSH
69367: LD_VAR 0 1
69371: PUSH
69372: LD_INT 1
69374: MINUS
69375: ST_TO_ADDR
// end ;
69376: LD_VAR 0 2
69380: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69381: LD_INT 0
69383: PPUSH
69384: PPUSH
69385: PPUSH
69386: PPUSH
69387: PPUSH
69388: PPUSH
69389: PPUSH
69390: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69391: LD_VAR 0 1
69395: PPUSH
69396: LD_VAR 0 2
69400: PPUSH
69401: CALL_OW 488
69405: NOT
69406: PUSH
69407: LD_VAR 0 3
69411: PPUSH
69412: LD_VAR 0 4
69416: PPUSH
69417: CALL_OW 488
69421: NOT
69422: OR
69423: IFFALSE 69436
// begin result := - 1 ;
69425: LD_ADDR_VAR 0 5
69429: PUSH
69430: LD_INT 1
69432: NEG
69433: ST_TO_ADDR
// exit ;
69434: GO 69671
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69436: LD_ADDR_VAR 0 12
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: LD_VAR 0 2
69450: PPUSH
69451: LD_VAR 0 3
69455: PPUSH
69456: LD_VAR 0 4
69460: PPUSH
69461: CALL 68521 0 4
69465: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69466: LD_ADDR_VAR 0 11
69470: PUSH
69471: LD_VAR 0 1
69475: PPUSH
69476: LD_VAR 0 2
69480: PPUSH
69481: LD_VAR 0 12
69485: PUSH
69486: LD_INT 1
69488: ARRAY
69489: PPUSH
69490: LD_VAR 0 12
69494: PUSH
69495: LD_INT 2
69497: ARRAY
69498: PPUSH
69499: CALL_OW 298
69503: ST_TO_ADDR
// distance := 9999 ;
69504: LD_ADDR_VAR 0 10
69508: PUSH
69509: LD_INT 9999
69511: ST_TO_ADDR
// for i := 0 to 5 do
69512: LD_ADDR_VAR 0 6
69516: PUSH
69517: DOUBLE
69518: LD_INT 0
69520: DEC
69521: ST_TO_ADDR
69522: LD_INT 5
69524: PUSH
69525: FOR_TO
69526: IFFALSE 69669
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69528: LD_ADDR_VAR 0 7
69532: PUSH
69533: LD_VAR 0 1
69537: PPUSH
69538: LD_VAR 0 6
69542: PPUSH
69543: LD_VAR 0 11
69547: PPUSH
69548: CALL_OW 272
69552: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69553: LD_ADDR_VAR 0 8
69557: PUSH
69558: LD_VAR 0 2
69562: PPUSH
69563: LD_VAR 0 6
69567: PPUSH
69568: LD_VAR 0 11
69572: PPUSH
69573: CALL_OW 273
69577: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69578: LD_VAR 0 7
69582: PPUSH
69583: LD_VAR 0 8
69587: PPUSH
69588: CALL_OW 488
69592: NOT
69593: IFFALSE 69597
// continue ;
69595: GO 69525
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69597: LD_ADDR_VAR 0 9
69601: PUSH
69602: LD_VAR 0 12
69606: PUSH
69607: LD_INT 1
69609: ARRAY
69610: PPUSH
69611: LD_VAR 0 12
69615: PUSH
69616: LD_INT 2
69618: ARRAY
69619: PPUSH
69620: LD_VAR 0 7
69624: PPUSH
69625: LD_VAR 0 8
69629: PPUSH
69630: CALL_OW 298
69634: ST_TO_ADDR
// if tmp < distance then
69635: LD_VAR 0 9
69639: PUSH
69640: LD_VAR 0 10
69644: LESS
69645: IFFALSE 69667
// begin result := i ;
69647: LD_ADDR_VAR 0 5
69651: PUSH
69652: LD_VAR 0 6
69656: ST_TO_ADDR
// distance := tmp ;
69657: LD_ADDR_VAR 0 10
69661: PUSH
69662: LD_VAR 0 9
69666: ST_TO_ADDR
// end ; end ;
69667: GO 69525
69669: POP
69670: POP
// end ;
69671: LD_VAR 0 5
69675: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69676: LD_INT 0
69678: PPUSH
69679: PPUSH
// if not driver or not IsInUnit ( driver ) then
69680: LD_VAR 0 1
69684: NOT
69685: PUSH
69686: LD_VAR 0 1
69690: PPUSH
69691: CALL_OW 310
69695: NOT
69696: OR
69697: IFFALSE 69701
// exit ;
69699: GO 69791
// vehicle := IsInUnit ( driver ) ;
69701: LD_ADDR_VAR 0 3
69705: PUSH
69706: LD_VAR 0 1
69710: PPUSH
69711: CALL_OW 310
69715: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69716: LD_VAR 0 1
69720: PPUSH
69721: LD_STRING \
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: LD_INT 0
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: PUSH
69751: LD_STRING E
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: LD_VAR 0 3
69764: PUSH
69765: LD_INT 0
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PPUSH
69787: CALL_OW 446
// end ;
69791: LD_VAR 0 2
69795: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69796: LD_INT 0
69798: PPUSH
69799: PPUSH
// if not driver or not IsInUnit ( driver ) then
69800: LD_VAR 0 1
69804: NOT
69805: PUSH
69806: LD_VAR 0 1
69810: PPUSH
69811: CALL_OW 310
69815: NOT
69816: OR
69817: IFFALSE 69821
// exit ;
69819: GO 69911
// vehicle := IsInUnit ( driver ) ;
69821: LD_ADDR_VAR 0 3
69825: PUSH
69826: LD_VAR 0 1
69830: PPUSH
69831: CALL_OW 310
69835: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69836: LD_VAR 0 1
69840: PPUSH
69841: LD_STRING \
69843: PUSH
69844: LD_INT 0
69846: PUSH
69847: LD_INT 0
69849: PUSH
69850: LD_INT 0
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: LD_INT 0
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: PUSH
69871: LD_STRING E
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: LD_VAR 0 3
69884: PUSH
69885: LD_INT 0
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PPUSH
69907: CALL_OW 447
// end ;
69911: LD_VAR 0 2
69915: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69916: LD_INT 0
69918: PPUSH
69919: PPUSH
69920: PPUSH
// tmp := [ ] ;
69921: LD_ADDR_VAR 0 5
69925: PUSH
69926: EMPTY
69927: ST_TO_ADDR
// for i in units do
69928: LD_ADDR_VAR 0 4
69932: PUSH
69933: LD_VAR 0 1
69937: PUSH
69938: FOR_IN
69939: IFFALSE 69977
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69941: LD_ADDR_VAR 0 5
69945: PUSH
69946: LD_VAR 0 5
69950: PPUSH
69951: LD_VAR 0 5
69955: PUSH
69956: LD_INT 1
69958: PLUS
69959: PPUSH
69960: LD_VAR 0 4
69964: PPUSH
69965: CALL_OW 256
69969: PPUSH
69970: CALL_OW 2
69974: ST_TO_ADDR
69975: GO 69938
69977: POP
69978: POP
// if not tmp then
69979: LD_VAR 0 5
69983: NOT
69984: IFFALSE 69988
// exit ;
69986: GO 70036
// if asc then
69988: LD_VAR 0 2
69992: IFFALSE 70016
// result := SortListByListAsc ( units , tmp ) else
69994: LD_ADDR_VAR 0 3
69998: PUSH
69999: LD_VAR 0 1
70003: PPUSH
70004: LD_VAR 0 5
70008: PPUSH
70009: CALL_OW 76
70013: ST_TO_ADDR
70014: GO 70036
// result := SortListByListDesc ( units , tmp ) ;
70016: LD_ADDR_VAR 0 3
70020: PUSH
70021: LD_VAR 0 1
70025: PPUSH
70026: LD_VAR 0 5
70030: PPUSH
70031: CALL_OW 77
70035: ST_TO_ADDR
// end ;
70036: LD_VAR 0 3
70040: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70041: LD_INT 0
70043: PPUSH
70044: PPUSH
// task := GetTaskList ( mech ) ;
70045: LD_ADDR_VAR 0 4
70049: PUSH
70050: LD_VAR 0 1
70054: PPUSH
70055: CALL_OW 437
70059: ST_TO_ADDR
// if not task then
70060: LD_VAR 0 4
70064: NOT
70065: IFFALSE 70069
// exit ;
70067: GO 70111
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70069: LD_ADDR_VAR 0 3
70073: PUSH
70074: LD_VAR 0 4
70078: PUSH
70079: LD_INT 1
70081: ARRAY
70082: PUSH
70083: LD_INT 1
70085: ARRAY
70086: PUSH
70087: LD_STRING r
70089: EQUAL
70090: PUSH
70091: LD_VAR 0 4
70095: PUSH
70096: LD_INT 1
70098: ARRAY
70099: PUSH
70100: LD_INT 4
70102: ARRAY
70103: PUSH
70104: LD_VAR 0 2
70108: EQUAL
70109: AND
70110: ST_TO_ADDR
// end ;
70111: LD_VAR 0 3
70115: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70116: LD_INT 0
70118: PPUSH
// SetDir ( unit , d ) ;
70119: LD_VAR 0 1
70123: PPUSH
70124: LD_VAR 0 4
70128: PPUSH
70129: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70133: LD_VAR 0 1
70137: PPUSH
70138: LD_VAR 0 2
70142: PPUSH
70143: LD_VAR 0 3
70147: PPUSH
70148: LD_VAR 0 5
70152: PPUSH
70153: CALL_OW 48
// end ;
70157: LD_VAR 0 6
70161: RET
// export function ToNaturalNumber ( number ) ; begin
70162: LD_INT 0
70164: PPUSH
// result := number div 1 ;
70165: LD_ADDR_VAR 0 2
70169: PUSH
70170: LD_VAR 0 1
70174: PUSH
70175: LD_INT 1
70177: DIV
70178: ST_TO_ADDR
// if number < 0 then
70179: LD_VAR 0 1
70183: PUSH
70184: LD_INT 0
70186: LESS
70187: IFFALSE 70197
// result := 0 ;
70189: LD_ADDR_VAR 0 2
70193: PUSH
70194: LD_INT 0
70196: ST_TO_ADDR
// end ;
70197: LD_VAR 0 2
70201: RET
// export function SortByClass ( units , class ) ; var un ; begin
70202: LD_INT 0
70204: PPUSH
70205: PPUSH
// if not units or not class then
70206: LD_VAR 0 1
70210: NOT
70211: PUSH
70212: LD_VAR 0 2
70216: NOT
70217: OR
70218: IFFALSE 70222
// exit ;
70220: GO 70317
// result := [ ] ;
70222: LD_ADDR_VAR 0 3
70226: PUSH
70227: EMPTY
70228: ST_TO_ADDR
// for un in units do
70229: LD_ADDR_VAR 0 4
70233: PUSH
70234: LD_VAR 0 1
70238: PUSH
70239: FOR_IN
70240: IFFALSE 70315
// if GetClass ( un ) = class then
70242: LD_VAR 0 4
70246: PPUSH
70247: CALL_OW 257
70251: PUSH
70252: LD_VAR 0 2
70256: EQUAL
70257: IFFALSE 70284
// result := Insert ( result , 1 , un ) else
70259: LD_ADDR_VAR 0 3
70263: PUSH
70264: LD_VAR 0 3
70268: PPUSH
70269: LD_INT 1
70271: PPUSH
70272: LD_VAR 0 4
70276: PPUSH
70277: CALL_OW 2
70281: ST_TO_ADDR
70282: GO 70313
// result := Replace ( result , result + 1 , un ) ;
70284: LD_ADDR_VAR 0 3
70288: PUSH
70289: LD_VAR 0 3
70293: PPUSH
70294: LD_VAR 0 3
70298: PUSH
70299: LD_INT 1
70301: PLUS
70302: PPUSH
70303: LD_VAR 0 4
70307: PPUSH
70308: CALL_OW 1
70312: ST_TO_ADDR
70313: GO 70239
70315: POP
70316: POP
// end ;
70317: LD_VAR 0 3
70321: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70322: LD_INT 0
70324: PPUSH
70325: PPUSH
70326: PPUSH
70327: PPUSH
70328: PPUSH
70329: PPUSH
70330: PPUSH
// result := [ ] ;
70331: LD_ADDR_VAR 0 4
70335: PUSH
70336: EMPTY
70337: ST_TO_ADDR
// if x - r < 0 then
70338: LD_VAR 0 1
70342: PUSH
70343: LD_VAR 0 3
70347: MINUS
70348: PUSH
70349: LD_INT 0
70351: LESS
70352: IFFALSE 70364
// min_x := 0 else
70354: LD_ADDR_VAR 0 8
70358: PUSH
70359: LD_INT 0
70361: ST_TO_ADDR
70362: GO 70380
// min_x := x - r ;
70364: LD_ADDR_VAR 0 8
70368: PUSH
70369: LD_VAR 0 1
70373: PUSH
70374: LD_VAR 0 3
70378: MINUS
70379: ST_TO_ADDR
// if y - r < 0 then
70380: LD_VAR 0 2
70384: PUSH
70385: LD_VAR 0 3
70389: MINUS
70390: PUSH
70391: LD_INT 0
70393: LESS
70394: IFFALSE 70406
// min_y := 0 else
70396: LD_ADDR_VAR 0 7
70400: PUSH
70401: LD_INT 0
70403: ST_TO_ADDR
70404: GO 70422
// min_y := y - r ;
70406: LD_ADDR_VAR 0 7
70410: PUSH
70411: LD_VAR 0 2
70415: PUSH
70416: LD_VAR 0 3
70420: MINUS
70421: ST_TO_ADDR
// max_x := x + r ;
70422: LD_ADDR_VAR 0 9
70426: PUSH
70427: LD_VAR 0 1
70431: PUSH
70432: LD_VAR 0 3
70436: PLUS
70437: ST_TO_ADDR
// max_y := y + r ;
70438: LD_ADDR_VAR 0 10
70442: PUSH
70443: LD_VAR 0 2
70447: PUSH
70448: LD_VAR 0 3
70452: PLUS
70453: ST_TO_ADDR
// for _x = min_x to max_x do
70454: LD_ADDR_VAR 0 5
70458: PUSH
70459: DOUBLE
70460: LD_VAR 0 8
70464: DEC
70465: ST_TO_ADDR
70466: LD_VAR 0 9
70470: PUSH
70471: FOR_TO
70472: IFFALSE 70573
// for _y = min_y to max_y do
70474: LD_ADDR_VAR 0 6
70478: PUSH
70479: DOUBLE
70480: LD_VAR 0 7
70484: DEC
70485: ST_TO_ADDR
70486: LD_VAR 0 10
70490: PUSH
70491: FOR_TO
70492: IFFALSE 70569
// begin if not ValidHex ( _x , _y ) then
70494: LD_VAR 0 5
70498: PPUSH
70499: LD_VAR 0 6
70503: PPUSH
70504: CALL_OW 488
70508: NOT
70509: IFFALSE 70513
// continue ;
70511: GO 70491
// if GetResourceTypeXY ( _x , _y ) then
70513: LD_VAR 0 5
70517: PPUSH
70518: LD_VAR 0 6
70522: PPUSH
70523: CALL_OW 283
70527: IFFALSE 70567
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70529: LD_ADDR_VAR 0 4
70533: PUSH
70534: LD_VAR 0 4
70538: PPUSH
70539: LD_VAR 0 4
70543: PUSH
70544: LD_INT 1
70546: PLUS
70547: PPUSH
70548: LD_VAR 0 5
70552: PUSH
70553: LD_VAR 0 6
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PPUSH
70562: CALL_OW 1
70566: ST_TO_ADDR
// end ;
70567: GO 70491
70569: POP
70570: POP
70571: GO 70471
70573: POP
70574: POP
// end ;
70575: LD_VAR 0 4
70579: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70580: LD_INT 0
70582: PPUSH
70583: PPUSH
70584: PPUSH
70585: PPUSH
70586: PPUSH
70587: PPUSH
70588: PPUSH
70589: PPUSH
// if not units then
70590: LD_VAR 0 1
70594: NOT
70595: IFFALSE 70599
// exit ;
70597: GO 71123
// result := UnitFilter ( units , [ f_ok ] ) ;
70599: LD_ADDR_VAR 0 3
70603: PUSH
70604: LD_VAR 0 1
70608: PPUSH
70609: LD_INT 50
70611: PUSH
70612: EMPTY
70613: LIST
70614: PPUSH
70615: CALL_OW 72
70619: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70620: LD_ADDR_VAR 0 8
70624: PUSH
70625: LD_VAR 0 1
70629: PUSH
70630: LD_INT 1
70632: ARRAY
70633: PPUSH
70634: CALL_OW 255
70638: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70639: LD_ADDR_VAR 0 10
70643: PUSH
70644: LD_INT 29
70646: PUSH
70647: LD_INT 91
70649: PUSH
70650: LD_INT 49
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: LIST
70657: ST_TO_ADDR
// if not result then
70658: LD_VAR 0 3
70662: NOT
70663: IFFALSE 70667
// exit ;
70665: GO 71123
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70667: LD_ADDR_VAR 0 5
70671: PUSH
70672: LD_INT 81
70674: PUSH
70675: LD_VAR 0 8
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PPUSH
70684: CALL_OW 69
70688: ST_TO_ADDR
// for i in result do
70689: LD_ADDR_VAR 0 4
70693: PUSH
70694: LD_VAR 0 3
70698: PUSH
70699: FOR_IN
70700: IFFALSE 71121
// begin tag := GetTag ( i ) + 1 ;
70702: LD_ADDR_VAR 0 9
70706: PUSH
70707: LD_VAR 0 4
70711: PPUSH
70712: CALL_OW 110
70716: PUSH
70717: LD_INT 1
70719: PLUS
70720: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70721: LD_ADDR_VAR 0 7
70725: PUSH
70726: LD_VAR 0 4
70730: PPUSH
70731: CALL_OW 250
70735: PPUSH
70736: LD_VAR 0 4
70740: PPUSH
70741: CALL_OW 251
70745: PPUSH
70746: LD_INT 6
70748: PPUSH
70749: CALL 70322 0 3
70753: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70754: LD_VAR 0 4
70758: PPUSH
70759: CALL_OW 247
70763: PUSH
70764: LD_INT 2
70766: EQUAL
70767: PUSH
70768: LD_VAR 0 7
70772: AND
70773: PUSH
70774: LD_VAR 0 4
70778: PPUSH
70779: CALL_OW 264
70783: PUSH
70784: LD_VAR 0 10
70788: IN
70789: NOT
70790: AND
70791: IFFALSE 70830
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70793: LD_VAR 0 4
70797: PPUSH
70798: LD_VAR 0 7
70802: PUSH
70803: LD_INT 1
70805: ARRAY
70806: PUSH
70807: LD_INT 1
70809: ARRAY
70810: PPUSH
70811: LD_VAR 0 7
70815: PUSH
70816: LD_INT 1
70818: ARRAY
70819: PUSH
70820: LD_INT 2
70822: ARRAY
70823: PPUSH
70824: CALL_OW 116
70828: GO 71119
// if path > tag then
70830: LD_VAR 0 2
70834: PUSH
70835: LD_VAR 0 9
70839: GREATER
70840: IFFALSE 71048
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70842: LD_ADDR_VAR 0 6
70846: PUSH
70847: LD_VAR 0 5
70851: PPUSH
70852: LD_INT 91
70854: PUSH
70855: LD_VAR 0 4
70859: PUSH
70860: LD_INT 8
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: LIST
70867: PPUSH
70868: CALL_OW 72
70872: ST_TO_ADDR
// if nearEnemy then
70873: LD_VAR 0 6
70877: IFFALSE 70946
// begin if GetWeapon ( i ) = ru_time_lapser then
70879: LD_VAR 0 4
70883: PPUSH
70884: CALL_OW 264
70888: PUSH
70889: LD_INT 49
70891: EQUAL
70892: IFFALSE 70920
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70894: LD_VAR 0 4
70898: PPUSH
70899: LD_VAR 0 6
70903: PPUSH
70904: LD_VAR 0 4
70908: PPUSH
70909: CALL_OW 74
70913: PPUSH
70914: CALL_OW 112
70918: GO 70944
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70920: LD_VAR 0 4
70924: PPUSH
70925: LD_VAR 0 6
70929: PPUSH
70930: LD_VAR 0 4
70934: PPUSH
70935: CALL_OW 74
70939: PPUSH
70940: CALL_OW 115
// end else
70944: GO 71046
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70946: LD_VAR 0 4
70950: PPUSH
70951: LD_VAR 0 2
70955: PUSH
70956: LD_VAR 0 9
70960: ARRAY
70961: PUSH
70962: LD_INT 1
70964: ARRAY
70965: PPUSH
70966: LD_VAR 0 2
70970: PUSH
70971: LD_VAR 0 9
70975: ARRAY
70976: PUSH
70977: LD_INT 2
70979: ARRAY
70980: PPUSH
70981: CALL_OW 297
70985: PUSH
70986: LD_INT 6
70988: GREATER
70989: IFFALSE 71032
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70991: LD_VAR 0 4
70995: PPUSH
70996: LD_VAR 0 2
71000: PUSH
71001: LD_VAR 0 9
71005: ARRAY
71006: PUSH
71007: LD_INT 1
71009: ARRAY
71010: PPUSH
71011: LD_VAR 0 2
71015: PUSH
71016: LD_VAR 0 9
71020: ARRAY
71021: PUSH
71022: LD_INT 2
71024: ARRAY
71025: PPUSH
71026: CALL_OW 114
71030: GO 71046
// SetTag ( i , tag ) ;
71032: LD_VAR 0 4
71036: PPUSH
71037: LD_VAR 0 9
71041: PPUSH
71042: CALL_OW 109
// end else
71046: GO 71119
// if enemy then
71048: LD_VAR 0 5
71052: IFFALSE 71119
// begin if GetWeapon ( i ) = ru_time_lapser then
71054: LD_VAR 0 4
71058: PPUSH
71059: CALL_OW 264
71063: PUSH
71064: LD_INT 49
71066: EQUAL
71067: IFFALSE 71095
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71069: LD_VAR 0 4
71073: PPUSH
71074: LD_VAR 0 5
71078: PPUSH
71079: LD_VAR 0 4
71083: PPUSH
71084: CALL_OW 74
71088: PPUSH
71089: CALL_OW 112
71093: GO 71119
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71095: LD_VAR 0 4
71099: PPUSH
71100: LD_VAR 0 5
71104: PPUSH
71105: LD_VAR 0 4
71109: PPUSH
71110: CALL_OW 74
71114: PPUSH
71115: CALL_OW 115
// end ; end ;
71119: GO 70699
71121: POP
71122: POP
// end ;
71123: LD_VAR 0 3
71127: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71128: LD_INT 0
71130: PPUSH
71131: PPUSH
71132: PPUSH
// if not unit or IsInUnit ( unit ) then
71133: LD_VAR 0 1
71137: NOT
71138: PUSH
71139: LD_VAR 0 1
71143: PPUSH
71144: CALL_OW 310
71148: OR
71149: IFFALSE 71153
// exit ;
71151: GO 71244
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71153: LD_ADDR_VAR 0 4
71157: PUSH
71158: LD_VAR 0 1
71162: PPUSH
71163: CALL_OW 250
71167: PPUSH
71168: LD_VAR 0 2
71172: PPUSH
71173: LD_INT 1
71175: PPUSH
71176: CALL_OW 272
71180: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71181: LD_ADDR_VAR 0 5
71185: PUSH
71186: LD_VAR 0 1
71190: PPUSH
71191: CALL_OW 251
71195: PPUSH
71196: LD_VAR 0 2
71200: PPUSH
71201: LD_INT 1
71203: PPUSH
71204: CALL_OW 273
71208: ST_TO_ADDR
// if ValidHex ( x , y ) then
71209: LD_VAR 0 4
71213: PPUSH
71214: LD_VAR 0 5
71218: PPUSH
71219: CALL_OW 488
71223: IFFALSE 71244
// ComTurnXY ( unit , x , y ) ;
71225: LD_VAR 0 1
71229: PPUSH
71230: LD_VAR 0 4
71234: PPUSH
71235: LD_VAR 0 5
71239: PPUSH
71240: CALL_OW 118
// end ;
71244: LD_VAR 0 3
71248: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71249: LD_INT 0
71251: PPUSH
71252: PPUSH
// result := false ;
71253: LD_ADDR_VAR 0 3
71257: PUSH
71258: LD_INT 0
71260: ST_TO_ADDR
// if not units then
71261: LD_VAR 0 2
71265: NOT
71266: IFFALSE 71270
// exit ;
71268: GO 71315
// for i in units do
71270: LD_ADDR_VAR 0 4
71274: PUSH
71275: LD_VAR 0 2
71279: PUSH
71280: FOR_IN
71281: IFFALSE 71313
// if See ( side , i ) then
71283: LD_VAR 0 1
71287: PPUSH
71288: LD_VAR 0 4
71292: PPUSH
71293: CALL_OW 292
71297: IFFALSE 71311
// begin result := true ;
71299: LD_ADDR_VAR 0 3
71303: PUSH
71304: LD_INT 1
71306: ST_TO_ADDR
// exit ;
71307: POP
71308: POP
71309: GO 71315
// end ;
71311: GO 71280
71313: POP
71314: POP
// end ;
71315: LD_VAR 0 3
71319: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71320: LD_INT 0
71322: PPUSH
71323: PPUSH
71324: PPUSH
71325: PPUSH
// if not unit or not points then
71326: LD_VAR 0 1
71330: NOT
71331: PUSH
71332: LD_VAR 0 2
71336: NOT
71337: OR
71338: IFFALSE 71342
// exit ;
71340: GO 71432
// dist := 99999 ;
71342: LD_ADDR_VAR 0 5
71346: PUSH
71347: LD_INT 99999
71349: ST_TO_ADDR
// for i in points do
71350: LD_ADDR_VAR 0 4
71354: PUSH
71355: LD_VAR 0 2
71359: PUSH
71360: FOR_IN
71361: IFFALSE 71430
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71363: LD_ADDR_VAR 0 6
71367: PUSH
71368: LD_VAR 0 1
71372: PPUSH
71373: LD_VAR 0 4
71377: PUSH
71378: LD_INT 1
71380: ARRAY
71381: PPUSH
71382: LD_VAR 0 4
71386: PUSH
71387: LD_INT 2
71389: ARRAY
71390: PPUSH
71391: CALL_OW 297
71395: ST_TO_ADDR
// if tmpDist < dist then
71396: LD_VAR 0 6
71400: PUSH
71401: LD_VAR 0 5
71405: LESS
71406: IFFALSE 71428
// begin result := i ;
71408: LD_ADDR_VAR 0 3
71412: PUSH
71413: LD_VAR 0 4
71417: ST_TO_ADDR
// dist := tmpDist ;
71418: LD_ADDR_VAR 0 5
71422: PUSH
71423: LD_VAR 0 6
71427: ST_TO_ADDR
// end ; end ;
71428: GO 71360
71430: POP
71431: POP
// end ;
71432: LD_VAR 0 3
71436: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71437: LD_INT 0
71439: PPUSH
// uc_side := side ;
71440: LD_ADDR_OWVAR 20
71444: PUSH
71445: LD_VAR 0 1
71449: ST_TO_ADDR
// uc_nation := 3 ;
71450: LD_ADDR_OWVAR 21
71454: PUSH
71455: LD_INT 3
71457: ST_TO_ADDR
// vc_chassis := 25 ;
71458: LD_ADDR_OWVAR 37
71462: PUSH
71463: LD_INT 25
71465: ST_TO_ADDR
// vc_engine := engine_siberite ;
71466: LD_ADDR_OWVAR 39
71470: PUSH
71471: LD_INT 3
71473: ST_TO_ADDR
// vc_control := control_computer ;
71474: LD_ADDR_OWVAR 38
71478: PUSH
71479: LD_INT 3
71481: ST_TO_ADDR
// vc_weapon := 59 ;
71482: LD_ADDR_OWVAR 40
71486: PUSH
71487: LD_INT 59
71489: ST_TO_ADDR
// result := CreateVehicle ;
71490: LD_ADDR_VAR 0 5
71494: PUSH
71495: CALL_OW 45
71499: ST_TO_ADDR
// SetDir ( result , d ) ;
71500: LD_VAR 0 5
71504: PPUSH
71505: LD_VAR 0 4
71509: PPUSH
71510: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71514: LD_VAR 0 5
71518: PPUSH
71519: LD_VAR 0 2
71523: PPUSH
71524: LD_VAR 0 3
71528: PPUSH
71529: LD_INT 0
71531: PPUSH
71532: CALL_OW 48
// end ;
71536: LD_VAR 0 5
71540: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71541: LD_INT 0
71543: PPUSH
71544: PPUSH
71545: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71546: LD_ADDR_VAR 0 2
71550: PUSH
71551: LD_INT 0
71553: PUSH
71554: LD_INT 0
71556: PUSH
71557: LD_INT 0
71559: PUSH
71560: LD_INT 0
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71569: LD_VAR 0 1
71573: NOT
71574: PUSH
71575: LD_VAR 0 1
71579: PPUSH
71580: CALL_OW 264
71584: PUSH
71585: LD_INT 12
71587: PUSH
71588: LD_INT 51
71590: PUSH
71591: LD_INT 32
71593: PUSH
71594: LD_INT 89
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: IN
71603: NOT
71604: OR
71605: IFFALSE 71609
// exit ;
71607: GO 71707
// for i := 1 to 3 do
71609: LD_ADDR_VAR 0 3
71613: PUSH
71614: DOUBLE
71615: LD_INT 1
71617: DEC
71618: ST_TO_ADDR
71619: LD_INT 3
71621: PUSH
71622: FOR_TO
71623: IFFALSE 71705
// begin tmp := GetCargo ( cargo , i ) ;
71625: LD_ADDR_VAR 0 4
71629: PUSH
71630: LD_VAR 0 1
71634: PPUSH
71635: LD_VAR 0 3
71639: PPUSH
71640: CALL_OW 289
71644: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71645: LD_ADDR_VAR 0 2
71649: PUSH
71650: LD_VAR 0 2
71654: PPUSH
71655: LD_VAR 0 3
71659: PPUSH
71660: LD_VAR 0 4
71664: PPUSH
71665: CALL_OW 1
71669: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71670: LD_ADDR_VAR 0 2
71674: PUSH
71675: LD_VAR 0 2
71679: PPUSH
71680: LD_INT 4
71682: PPUSH
71683: LD_VAR 0 2
71687: PUSH
71688: LD_INT 4
71690: ARRAY
71691: PUSH
71692: LD_VAR 0 4
71696: PLUS
71697: PPUSH
71698: CALL_OW 1
71702: ST_TO_ADDR
// end ;
71703: GO 71622
71705: POP
71706: POP
// end ;
71707: LD_VAR 0 2
71711: RET
// export function Length ( array ) ; begin
71712: LD_INT 0
71714: PPUSH
// result := array + 0 ;
71715: LD_ADDR_VAR 0 2
71719: PUSH
71720: LD_VAR 0 1
71724: PUSH
71725: LD_INT 0
71727: PLUS
71728: ST_TO_ADDR
// end ;
71729: LD_VAR 0 2
71733: RET
// export function PrepareArray ( array ) ; begin
71734: LD_INT 0
71736: PPUSH
// result := array diff 0 ;
71737: LD_ADDR_VAR 0 2
71741: PUSH
71742: LD_VAR 0 1
71746: PUSH
71747: LD_INT 0
71749: DIFF
71750: ST_TO_ADDR
// if not result [ 1 ] then
71751: LD_VAR 0 2
71755: PUSH
71756: LD_INT 1
71758: ARRAY
71759: NOT
71760: IFFALSE 71780
// result := Delete ( result , 1 ) ;
71762: LD_ADDR_VAR 0 2
71766: PUSH
71767: LD_VAR 0 2
71771: PPUSH
71772: LD_INT 1
71774: PPUSH
71775: CALL_OW 3
71779: ST_TO_ADDR
// end ;
71780: LD_VAR 0 2
71784: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71785: LD_INT 0
71787: PPUSH
71788: PPUSH
71789: PPUSH
71790: PPUSH
// sibRocketRange := 25 ;
71791: LD_ADDR_VAR 0 6
71795: PUSH
71796: LD_INT 25
71798: ST_TO_ADDR
// result := false ;
71799: LD_ADDR_VAR 0 4
71803: PUSH
71804: LD_INT 0
71806: ST_TO_ADDR
// for i := 0 to 5 do
71807: LD_ADDR_VAR 0 5
71811: PUSH
71812: DOUBLE
71813: LD_INT 0
71815: DEC
71816: ST_TO_ADDR
71817: LD_INT 5
71819: PUSH
71820: FOR_TO
71821: IFFALSE 71888
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71823: LD_VAR 0 1
71827: PPUSH
71828: LD_VAR 0 5
71832: PPUSH
71833: LD_VAR 0 6
71837: PPUSH
71838: CALL_OW 272
71842: PPUSH
71843: LD_VAR 0 2
71847: PPUSH
71848: LD_VAR 0 5
71852: PPUSH
71853: LD_VAR 0 6
71857: PPUSH
71858: CALL_OW 273
71862: PPUSH
71863: LD_VAR 0 3
71867: PPUSH
71868: CALL_OW 309
71872: IFFALSE 71886
// begin result := true ;
71874: LD_ADDR_VAR 0 4
71878: PUSH
71879: LD_INT 1
71881: ST_TO_ADDR
// exit ;
71882: POP
71883: POP
71884: GO 71890
// end ;
71886: GO 71820
71888: POP
71889: POP
// end ;
71890: LD_VAR 0 4
71894: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71895: LD_INT 0
71897: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71898: LD_VAR 0 1
71902: PPUSH
71903: LD_VAR 0 2
71907: PPUSH
71908: LD_INT 0
71910: PPUSH
71911: LD_INT 0
71913: PPUSH
71914: LD_INT 1
71916: PPUSH
71917: LD_INT 0
71919: PPUSH
71920: CALL_OW 587
// end ; end_of_file
71924: LD_VAR 0 3
71928: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71929: LD_VAR 0 1
71933: PPUSH
71934: LD_VAR 0 2
71938: PPUSH
71939: LD_VAR 0 3
71943: PPUSH
71944: LD_VAR 0 4
71948: PPUSH
71949: LD_VAR 0 5
71953: PPUSH
71954: LD_VAR 0 6
71958: PPUSH
71959: CALL 10417 0 6
// end ;
71963: PPOPN 6
71965: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71966: LD_INT 0
71968: PPUSH
// begin if not units then
71969: LD_VAR 0 1
71973: NOT
71974: IFFALSE 71978
// exit ;
71976: GO 71978
// end ;
71978: PPOPN 7
71980: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71981: CALL 10321 0 0
// end ;
71985: PPOPN 1
71987: END
