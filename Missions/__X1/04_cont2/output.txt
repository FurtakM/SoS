// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 237 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 649 0 1
// PrepareRussian ;
  19: CALL 2266 0 0
// PrepareArabian ;
  23: CALL 1246 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5992 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape , activeInvincible ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// activeInvincible := true ;
 224: LD_ADDR_EXP 17
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export tEscape ; function InitTag ; begin
 237: LD_INT 0
 239: PPUSH
// tEscape := 10 ;
 240: LD_ADDR_EXP 18
 244: PUSH
 245: LD_INT 10
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 1
 252: RET
// every 0 0$1 trigger debug do var i ;
 253: LD_EXP 1
 257: IFFALSE 341
 259: GO 261
 261: DISABLE
 262: LD_INT 0
 264: PPUSH
// begin enable ;
 265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 266: LD_ADDR_VAR 0 1
 270: PUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: LD_INT 21
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 339
// if GetLives ( i ) < 1000 then
 310: LD_VAR 0 1
 314: PPUSH
 315: CALL_OW 256
 319: PUSH
 320: LD_INT 1000
 322: LESS
 323: IFFALSE 337
// SetLives ( i , 1000 ) ;
 325: LD_VAR 0 1
 329: PPUSH
 330: LD_INT 1000
 332: PPUSH
 333: CALL_OW 234
 337: GO 307
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function CreateNature ( forest ) ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 653: LD_VAR 0 1
 657: PPUSH
 658: LD_INT 3
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: PPUSH
 682: CALL 512 0 2
// for i := 1 to 2 do
 686: LD_ADDR_VAR 0 3
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 2
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := 21 ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 21
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 1
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 2 do
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 2
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := 18 ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 18
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// for i := 1 to 2 do
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: DOUBLE
 798: LD_INT 1
 800: DEC
 801: ST_TO_ADDR
 802: LD_INT 2
 804: PUSH
 805: FOR_TO
 806: IFFALSE 843
// begin hc_class := 13 ;
 808: LD_ADDR_OWVAR 28
 812: PUSH
 813: LD_INT 13
 815: ST_TO_ADDR
// hc_gallery :=  ;
 816: LD_ADDR_OWVAR 33
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 824: CALL_OW 44
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: LD_INT 0
 836: PPUSH
 837: CALL_OW 49
// end ;
 841: GO 805
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 2
 849: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
 854: PPUSH
// if not observer or not unit then
 855: LD_VAR 0 1
 859: NOT
 860: IFTRUE 869
 862: PUSH
 863: LD_VAR 0 2
 867: NOT
 868: OR
 869: IFFALSE 873
// exit ;
 871: GO 921
// if not See ( GetSide ( observer ) , unit ) then
 873: LD_VAR 0 1
 877: PPUSH
 878: CALL_OW 255
 882: PPUSH
 883: LD_VAR 0 2
 887: PPUSH
 888: CALL_OW 292
 892: NOT
 893: IFFALSE 897
// exit ;
 895: GO 921
// result := GetDistUnits ( observer , unit ) < 12 ;
 897: LD_ADDR_VAR 0 3
 901: PUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_VAR 0 2
 911: PPUSH
 912: CALL_OW 296
 916: PUSH
 917: LD_INT 12
 919: LESS
 920: ST_TO_ADDR
// end ;
 921: LD_VAR 0 3
 925: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 926: LD_INT 0
 928: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 929: LD_VAR 0 2
 933: PUSH
 934: LD_INT 1
 936: ARRAY
 937: PPUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 2
 945: ARRAY
 946: PPUSH
 947: CALL_OW 488
 951: IFFALSE 981
 953: PUSH
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: ARRAY
 971: PPUSH
 972: CALL_OW 428
 976: PUSH
 977: LD_INT 0
 979: EQUAL
 980: AND
 981: IFFALSE 1015
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 983: LD_VAR 0 1
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PPUSH
1006: LD_VAR 0 3
1010: PPUSH
1011: CALL_OW 48
// end ;
1015: LD_VAR 0 4
1019: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1020: LD_INT 0
1022: PPUSH
1023: PPUSH
1024: PPUSH
1025: PPUSH
1026: PPUSH
// if not unit then
1027: LD_VAR 0 1
1031: NOT
1032: IFFALSE 1036
// exit ;
1034: GO 1241
// side := GetSide ( unit ) ;
1036: LD_ADDR_VAR 0 4
1040: PUSH
1041: LD_VAR 0 1
1045: PPUSH
1046: CALL_OW 255
1050: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1051: LD_ADDR_VAR 0 5
1055: PUSH
1056: LD_INT 22
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 30
1070: PUSH
1071: LD_VAR 0 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PPUSH
1084: CALL_OW 69
1088: ST_TO_ADDR
// if not tmp then
1089: LD_VAR 0 5
1093: NOT
1094: IFFALSE 1098
// exit ;
1096: GO 1241
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: LD_VAR 0 1
1107: PPUSH
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_INT 1
1115: PPUSH
1116: LD_INT 1
1118: PPUSH
1119: CALL 38744 0 4
1123: ST_TO_ADDR
// places := 1 ;
1124: LD_ADDR_VAR 0 7
1128: PUSH
1129: LD_INT 1
1131: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 4
1145: PUSH
1146: LD_INT 5
1148: PUSH
1149: LD_INT 2
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 6
1157: PUSH
1158: LD_INT 7
1160: PUSH
1161: LD_INT 8
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: IN
1175: IFFALSE 1185
// places := 6 ;
1177: LD_ADDR_VAR 0 7
1181: PUSH
1182: LD_INT 6
1184: ST_TO_ADDR
// for i in tmp do
1185: LD_ADDR_VAR 0 6
1189: PUSH
1190: LD_VAR 0 5
1194: PUSH
1195: FOR_IN
1196: IFFALSE 1239
// begin if UnitsInside ( i ) - places <= 0 then
1198: LD_VAR 0 6
1202: PPUSH
1203: CALL_OW 313
1207: PUSH
1208: LD_VAR 0 7
1212: MINUS
1213: PUSH
1214: LD_INT 0
1216: LESSEQUAL
1217: IFFALSE 1223
// continue else
1219: GO 1195
1221: GO 1237
// begin result := i ;
1223: LD_ADDR_VAR 0 3
1227: PUSH
1228: LD_VAR 0 6
1232: ST_TO_ADDR
// exit ;
1233: POP
1234: POP
1235: GO 1241
// end ; end ;
1237: GO 1195
1239: POP
1240: POP
// end ; end_of_file
1241: LD_VAR 0 3
1245: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
// uc_side := 2 ;
1250: LD_ADDR_OWVAR 20
1254: PUSH
1255: LD_INT 2
1257: ST_TO_ADDR
// uc_nation := 2 ;
1258: LD_ADDR_OWVAR 21
1262: PUSH
1263: LD_INT 2
1265: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1266: LD_ADDR_EXP 19
1270: PUSH
1271: LD_STRING Heike
1273: PPUSH
1274: LD_EXP 1
1278: NOT
1279: PPUSH
1280: LD_EXP 2
1284: PPUSH
1285: CALL 33167 0 3
1289: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1290: LD_ADDR_EXP 22
1294: PUSH
1295: LD_STRING Ibrahim
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_EXP 2
1308: PPUSH
1309: CALL 33167 0 3
1313: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1314: LD_ADDR_EXP 20
1318: PUSH
1319: LD_STRING Givi
1321: PPUSH
1322: LD_EXP 1
1326: NOT
1327: PPUSH
1328: LD_EXP 2
1332: PPUSH
1333: CALL 33167 0 3
1337: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1338: LD_ADDR_EXP 23
1342: PUSH
1343: LD_STRING Kamil
1345: PPUSH
1346: LD_EXP 1
1350: NOT
1351: PPUSH
1352: LD_EXP 2
1356: PPUSH
1357: CALL 33167 0 3
1361: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1362: LD_ADDR_EXP 24
1366: PUSH
1367: LD_STRING Kaia
1369: PPUSH
1370: LD_EXP 1
1374: NOT
1375: PPUSH
1376: LD_EXP 2
1380: PPUSH
1381: CALL 33167 0 3
1385: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1386: LD_ADDR_EXP 25
1390: PUSH
1391: LD_STRING Sophia
1393: PPUSH
1394: LD_EXP 1
1398: NOT
1399: PPUSH
1400: LD_EXP 2
1404: PPUSH
1405: CALL 33167 0 3
1409: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1410: LD_ADDR_EXP 26
1414: PUSH
1415: LD_STRING Markov
1417: PPUSH
1418: LD_EXP 1
1422: NOT
1423: PPUSH
1424: LD_EXP 2
1428: PPUSH
1429: CALL 33167 0 3
1433: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1434: LD_ADDR_EXP 29
1438: PUSH
1439: LD_STRING Aviradze
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 2
1452: PPUSH
1453: CALL 33167 0 3
1457: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1458: LD_ADDR_EXP 28
1462: PUSH
1463: LD_STRING Kurt
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 2
1476: PPUSH
1477: CALL 33167 0 3
1481: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1482: LD_ADDR_EXP 21
1486: PUSH
1487: LD_STRING Mike
1489: PPUSH
1490: LD_EXP 1
1494: NOT
1495: PPUSH
1496: LD_EXP 2
1500: PPUSH
1501: CALL 33167 0 3
1505: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1506: LD_ADDR_EXP 30
1510: PUSH
1511: LD_STRING 04_1_others
1513: PPUSH
1514: CALL_OW 31
1518: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1519: LD_ADDR_EXP 32
1523: PUSH
1524: LD_STRING 04_1_apes
1526: PPUSH
1527: CALL_OW 31
1531: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1532: LD_ADDR_EXP 31
1536: PUSH
1537: LD_STRING 04_1_Vehicles
1539: PPUSH
1540: EMPTY
1541: PPUSH
1542: CALL_OW 30
1546: ST_TO_ADDR
// if debug then
1547: LD_EXP 1
1551: IFFALSE 1770
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_big_cargo_bay , 3 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1553: LD_ADDR_EXP 31
1557: PUSH
1558: LD_INT 13
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: LD_INT 27
1569: PUSH
1570: LD_INT 2
1572: PUSH
1573: LD_INT 1000
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: LD_INT 0
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 13
1601: PUSH
1602: LD_INT 1
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: LD_INT 25
1610: PUSH
1611: LD_INT 2
1613: PUSH
1614: LD_INT 1000
1616: PUSH
1617: LD_INT 0
1619: PUSH
1620: LD_INT 0
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 3
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 13
1642: PUSH
1643: LD_INT 1
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: LD_INT 27
1651: PUSH
1652: LD_INT 2
1654: PUSH
1655: LD_INT 1000
1657: PUSH
1658: LD_INT 0
1660: PUSH
1661: LD_INT 0
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 13
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: LD_INT 27
1692: PUSH
1693: LD_INT 2
1695: PUSH
1696: LD_INT 1000
1698: PUSH
1699: LD_INT 0
1701: PUSH
1702: LD_INT 0
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 23
1724: PUSH
1725: LD_INT 1
1727: PUSH
1728: LD_INT 1
1730: PUSH
1731: LD_INT 89
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: LD_INT 1000
1739: PUSH
1740: LD_INT 40
1742: PUSH
1743: LD_INT 40
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: ST_TO_ADDR
// uc_side := 5 ;
1770: LD_ADDR_OWVAR 20
1774: PUSH
1775: LD_INT 5
1777: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1778: LD_ADDR_EXP 27
1782: PUSH
1783: LD_STRING Abdul
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: LD_STRING 
1791: PPUSH
1792: CALL 33167 0 3
1796: ST_TO_ADDR
// end ;
1797: LD_VAR 0 1
1801: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , debug ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1802: LD_STRING 04_1_KaganCaptured
1804: PPUSH
1805: LD_EXP 1
1809: PPUSH
1810: CALL_OW 30
1814: IFFALSE 1833
1816: PUSH
1817: LD_INT 22
1819: PUSH
1820: LD_INT 5
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PPUSH
1827: CALL_OW 69
1831: NOT
1832: AND
1833: IFFALSE 1872
1835: PUSH
1836: LD_INT 124
1838: PPUSH
1839: LD_INT 26
1841: PPUSH
1842: CALL_OW 428
1846: PUSH
1847: LD_INT 0
1849: EQUAL
1850: PUSH
1851: LD_INT 124
1853: PPUSH
1854: LD_INT 26
1856: PPUSH
1857: CALL_OW 428
1861: PPUSH
1862: CALL_OW 255
1866: PUSH
1867: LD_INT 2
1869: EQUAL
1870: XOR
1871: AND
1872: IFFALSE 2263
1874: GO 1876
1876: DISABLE
1877: LD_INT 0
1879: PPUSH
1880: PPUSH
// begin enable ;
1881: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1882: LD_EXP 34
1886: NOT
1887: IFTRUE 1899
1889: PUSH
1890: LD_EXP 34
1894: PUSH
1895: LD_INT 4
1897: GREATER
1898: OR
1899: IFFALSE 1909
// cargoCounter := 1 ;
1901: LD_ADDR_EXP 34
1905: PUSH
1906: LD_INT 1
1908: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: LD_INT 142
1916: PUSH
1917: LD_INT 15
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 129
1926: PUSH
1927: LD_INT 11
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 138
1936: PUSH
1937: LD_INT 9
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 133
1946: PUSH
1947: LD_INT 10
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// uc_side := 5 ;
1960: LD_ADDR_OWVAR 20
1964: PUSH
1965: LD_INT 5
1967: ST_TO_ADDR
// uc_nation := 2 ;
1968: LD_ADDR_OWVAR 21
1972: PUSH
1973: LD_INT 2
1975: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1976: LD_INT 5
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: LD_INT 13
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: LD_INT 32
1993: PPUSH
1994: LD_INT 70
1996: PPUSH
1997: CALL 344 0 7
// veh := CreateVehicle ;
2001: LD_ADDR_VAR 0 1
2005: PUSH
2006: CALL_OW 45
2010: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_INT 3
2018: PPUSH
2019: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2023: LD_VAR 0 1
2027: PPUSH
2028: LD_INT 8
2030: PPUSH
2031: LD_INT 0
2033: PPUSH
2034: CALL_OW 49
// if not cargoDriver then
2038: LD_EXP 33
2042: NOT
2043: IFFALSE 2068
// begin PrepareHuman ( false , 1 , 3 ) ;
2045: LD_INT 0
2047: PPUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 3
2053: PPUSH
2054: CALL_OW 380
// cargoDriver := CreateHuman ;
2058: LD_ADDR_EXP 33
2062: PUSH
2063: CALL_OW 44
2067: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2068: LD_EXP 33
2072: PPUSH
2073: LD_VAR 0 1
2077: PPUSH
2078: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2082: LD_VAR 0 1
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: LD_INT 100
2092: PPUSH
2093: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2097: LD_VAR 0 1
2101: PPUSH
2102: LD_VAR 0 2
2106: PUSH
2107: LD_EXP 34
2111: ARRAY
2112: PUSH
2113: LD_INT 1
2115: ARRAY
2116: PPUSH
2117: LD_VAR 0 2
2121: PUSH
2122: LD_EXP 34
2126: ARRAY
2127: PUSH
2128: LD_INT 2
2130: ARRAY
2131: PPUSH
2132: CALL_OW 111
// AddComUnload ( veh ) ;
2136: LD_VAR 0 1
2140: PPUSH
2141: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2145: LD_VAR 0 1
2149: PPUSH
2150: LD_INT 133
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL_OW 171
// wait ( 0 0$5 ) ;
2160: LD_INT 175
2162: PPUSH
2163: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2167: LD_INT 35
2169: PPUSH
2170: CALL_OW 67
// if not HasTask ( veh ) then
2174: LD_VAR 0 1
2178: PPUSH
2179: CALL_OW 314
2183: NOT
2184: IFFALSE 2201
// ComMoveXY ( veh , 133 , 2 ) ;
2186: LD_VAR 0 1
2190: PPUSH
2191: LD_INT 133
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2201: LD_VAR 0 1
2205: PPUSH
2206: LD_INT 133
2208: PPUSH
2209: LD_INT 2
2211: PPUSH
2212: CALL_OW 307
2216: IFTRUE 2232
2218: PUSH
2219: LD_VAR 0 1
2223: PPUSH
2224: LD_INT 8
2226: PPUSH
2227: CALL_OW 308
2231: OR
2232: IFFALSE 2167
// RemoveUnit ( cargoDriver ) ;
2234: LD_EXP 33
2238: PPUSH
2239: CALL_OW 64
// RemoveUnit ( veh ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: CALL_OW 64
// if tick >= 20 20$00 then
2252: LD_OWVAR 1
2256: PUSH
2257: LD_INT 42000
2259: GREATEREQUAL
2260: IFFALSE 2263
// disable ;
2262: DISABLE
// end ; end_of_file
2263: PPOPN 2
2265: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
2273: PPUSH
2274: PPUSH
2275: PPUSH
2276: PPUSH
// uc_side := 3 ;
2277: LD_ADDR_OWVAR 20
2281: PUSH
2282: LD_INT 3
2284: ST_TO_ADDR
// uc_nation := 3 ;
2285: LD_ADDR_OWVAR 21
2289: PUSH
2290: LD_INT 3
2292: ST_TO_ADDR
// ruForce := [ ] ;
2293: LD_ADDR_EXP 38
2297: PUSH
2298: EMPTY
2299: ST_TO_ADDR
// ruMech := [ ] ;
2300: LD_ADDR_EXP 40
2304: PUSH
2305: EMPTY
2306: ST_TO_ADDR
// ruEng := [ ] ;
2307: LD_ADDR_EXP 39
2311: PUSH
2312: EMPTY
2313: ST_TO_ADDR
// ruSci := [ ] ;
2314: LD_ADDR_EXP 41
2318: PUSH
2319: EMPTY
2320: ST_TO_ADDR
// ruMobile := [ ] ;
2321: LD_ADDR_EXP 42
2325: PUSH
2326: EMPTY
2327: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2328: LD_ADDR_EXP 35
2332: PUSH
2333: LD_STRING Burlak
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: LD_STRING 
2341: PPUSH
2342: CALL 33167 0 3
2346: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2347: LD_ADDR_EXP 36
2351: PUSH
2352: LD_STRING Gaydar
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: LD_STRING 
2360: PPUSH
2361: CALL 33167 0 3
2365: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2366: LD_ADDR_EXP 37
2370: PUSH
2371: LD_STRING Kuzmov
2373: PPUSH
2374: LD_INT 0
2376: PPUSH
2377: LD_STRING 
2379: PPUSH
2380: CALL 33167 0 3
2384: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2385: LD_EXP 37
2389: PPUSH
2390: LD_INT 200
2392: PPUSH
2393: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2397: LD_INT 200
2399: PPUSH
2400: LD_STRING chuikov
2402: PPUSH
2403: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2407: LD_INT 200
2409: PPUSH
2410: CALL_OW 274
2414: PPUSH
2415: LD_INT 1
2417: PPUSH
2418: LD_INT 800
2420: PUSH
2421: LD_INT 1000
2423: PUSH
2424: LD_INT 1250
2426: PUSH
2427: LD_INT 1300
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: PUSH
2436: LD_OWVAR 67
2440: ARRAY
2441: PPUSH
2442: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2446: LD_INT 200
2448: PPUSH
2449: CALL_OW 274
2453: PPUSH
2454: LD_INT 2
2456: PPUSH
2457: LD_INT 160
2459: PPUSH
2460: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2464: LD_INT 225
2466: PPUSH
2467: CALL_OW 274
2471: PPUSH
2472: LD_INT 1
2474: PPUSH
2475: LD_INT 200
2477: PPUSH
2478: CALL_OW 277
// oil := 150 ;
2482: LD_ADDR_VAR 0 9
2486: PUSH
2487: LD_INT 150
2489: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2490: LD_EXP 5
2494: PUSH
2495: LD_INT 94500
2497: PUSH
2498: LD_INT 84000
2500: PUSH
2501: LD_INT 73500
2503: PUSH
2504: LD_INT 67200
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: PUSH
2513: LD_OWVAR 67
2517: ARRAY
2518: GREATEREQUAL
2519: IFFALSE 2674
// begin oil := 450 ;
2521: LD_ADDR_VAR 0 9
2525: PUSH
2526: LD_INT 450
2528: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2529: LD_ADDR_VAR 0 7
2533: PUSH
2534: LD_INT 123
2536: PUSH
2537: LD_INT 17
2539: PUSH
2540: LD_INT 3
2542: PUSH
2543: LD_INT 31
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 152
2554: PUSH
2555: LD_INT 38
2557: PUSH
2558: LD_INT 3
2560: PUSH
2561: LD_INT 31
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PUSH
2570: LD_INT 81
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 4
2578: PUSH
2579: LD_INT 31
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 113
2590: PUSH
2591: LD_INT 67
2593: PUSH
2594: LD_INT 4
2596: PUSH
2597: LD_INT 32
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: ST_TO_ADDR
// for i in tmp do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: LD_VAR 0 7
2621: PUSH
2622: FOR_IN
2623: IFFALSE 2672
// begin bc_type := i [ 4 ] ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 4
2637: ARRAY
2638: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2639: LD_VAR 0 4
2643: PUSH
2644: LD_INT 1
2646: ARRAY
2647: PPUSH
2648: LD_VAR 0 4
2652: PUSH
2653: LD_INT 2
2655: ARRAY
2656: PPUSH
2657: LD_VAR 0 4
2661: PUSH
2662: LD_INT 3
2664: ARRAY
2665: PPUSH
2666: CALL_OW 47
// end ;
2670: GO 2622
2672: POP
2673: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2674: LD_INT 225
2676: PPUSH
2677: CALL_OW 274
2681: PPUSH
2682: LD_INT 2
2684: PPUSH
2685: LD_VAR 0 9
2689: PPUSH
2690: CALL_OW 277
// if Difficulty > 1 then
2694: LD_OWVAR 67
2698: PUSH
2699: LD_INT 1
2701: GREATER
2702: IFFALSE 2797
// begin bc_type := b_bunker ;
2704: LD_ADDR_OWVAR 42
2708: PUSH
2709: LD_INT 32
2711: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2712: LD_ADDR_VAR 0 7
2716: PUSH
2717: LD_INT 121
2719: PUSH
2720: LD_INT 85
2722: PUSH
2723: LD_INT 5
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 93
2733: PUSH
2734: LD_INT 72
2736: PUSH
2737: LD_INT 1
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: ST_TO_ADDR
// for i in tmp do
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: LD_VAR 0 7
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2795
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2762: LD_VAR 0 4
2766: PUSH
2767: LD_INT 1
2769: ARRAY
2770: PPUSH
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 4
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: CALL_OW 47
2793: GO 2759
2795: POP
2796: POP
// end ; base := GetBase ( ruMainBase ) ;
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: LD_INT 200
2804: PPUSH
2805: CALL_OW 274
2809: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2810: LD_ADDR_VAR 0 3
2814: PUSH
2815: LD_VAR 0 2
2819: PPUSH
2820: CALL_OW 417
2824: ST_TO_ADDR
// for b in blist do
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 3
2834: PUSH
2835: FOR_IN
2836: IFFALSE 3287
// begin if b [ 1 ] = b_factory then
2838: LD_VAR 0 5
2842: PUSH
2843: LD_INT 1
2845: ARRAY
2846: PUSH
2847: LD_INT 3
2849: EQUAL
2850: IFFALSE 3001
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2852: LD_ADDR_VAR 0 8
2856: PUSH
2857: LD_VAR 0 5
2861: PUSH
2862: LD_INT 2
2864: ARRAY
2865: PPUSH
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 3
2873: ARRAY
2874: PPUSH
2875: CALL_OW 428
2879: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 2
2892: PUSH
2893: LD_INT 2
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 2997
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 3
2928: PPUSH
2929: LD_INT 1
2931: PUSH
2932: LD_OWVAR 67
2936: PLUS
2937: PPUSH
2938: CALL_OW 380
// un := CreateHuman ;
2942: LD_ADDR_VAR 0 6
2946: PUSH
2947: CALL_OW 44
2951: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2952: LD_ADDR_EXP 40
2956: PUSH
2957: LD_EXP 40
2961: PPUSH
2962: LD_EXP 40
2966: PUSH
2967: LD_INT 1
2969: PLUS
2970: PPUSH
2971: LD_VAR 0 6
2975: PPUSH
2976: CALL_OW 1
2980: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2981: LD_VAR 0 6
2985: PPUSH
2986: LD_VAR 0 8
2990: PPUSH
2991: CALL_OW 52
// end ;
2995: GO 2920
2997: POP
2998: POP
// end else
2999: GO 3285
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
3001: LD_VAR 0 5
3005: PUSH
3006: LD_INT 1
3008: ARRAY
3009: PUSH
3010: LD_INT 6
3012: PUSH
3013: LD_INT 7
3015: PUSH
3016: LD_INT 8
3018: PUSH
3019: LD_INT 10
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: IN
3028: IFFALSE 3138
// begin for i := 1 to 2 do
3030: LD_ADDR_VAR 0 4
3034: PUSH
3035: DOUBLE
3036: LD_INT 1
3038: DEC
3039: ST_TO_ADDR
3040: LD_INT 2
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3134
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3046: LD_INT 0
3048: PPUSH
3049: LD_INT 4
3051: PPUSH
3052: LD_OWVAR 67
3056: PPUSH
3057: CALL_OW 380
// un := CreateHuman ;
3061: LD_ADDR_VAR 0 6
3065: PUSH
3066: CALL_OW 44
3070: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3071: LD_ADDR_EXP 41
3075: PUSH
3076: LD_EXP 41
3080: PPUSH
3081: LD_EXP 41
3085: PUSH
3086: LD_INT 1
3088: PLUS
3089: PPUSH
3090: LD_VAR 0 6
3094: PPUSH
3095: CALL_OW 1
3099: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3100: LD_VAR 0 6
3104: PPUSH
3105: LD_VAR 0 5
3109: PUSH
3110: LD_INT 2
3112: ARRAY
3113: PPUSH
3114: LD_VAR 0 5
3118: PUSH
3119: LD_INT 3
3121: ARRAY
3122: PPUSH
3123: CALL_OW 428
3127: PPUSH
3128: CALL_OW 52
// end ;
3132: GO 3043
3134: POP
3135: POP
// end else
3136: GO 3285
// if b [ 1 ] = b_warehouse then
3138: LD_VAR 0 5
3142: PUSH
3143: LD_INT 1
3145: ARRAY
3146: PUSH
3147: LD_INT 1
3149: EQUAL
3150: IFFALSE 3285
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3152: LD_ADDR_VAR 0 4
3156: PUSH
3157: DOUBLE
3158: LD_INT 1
3160: DEC
3161: ST_TO_ADDR
3162: LD_INT 1
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: LD_OWVAR 67
3172: PLUS
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: LD_EXP 10
3182: PUSH
3183: LD_INT 3
3185: GREATER
3186: PUSH
3187: LD_INT 1
3189: PLUS
3190: ARRAY
3191: PUSH
3192: FOR_TO
3193: IFFALSE 3283
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3195: LD_INT 0
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_OWVAR 67
3205: PPUSH
3206: CALL_OW 380
// un := CreateHuman ;
3210: LD_ADDR_VAR 0 6
3214: PUSH
3215: CALL_OW 44
3219: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3220: LD_ADDR_EXP 39
3224: PUSH
3225: LD_EXP 39
3229: PPUSH
3230: LD_EXP 39
3234: PUSH
3235: LD_INT 1
3237: PLUS
3238: PPUSH
3239: LD_VAR 0 6
3243: PPUSH
3244: CALL_OW 1
3248: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3249: LD_VAR 0 6
3253: PPUSH
3254: LD_VAR 0 5
3258: PUSH
3259: LD_INT 2
3261: ARRAY
3262: PPUSH
3263: LD_VAR 0 5
3267: PUSH
3268: LD_INT 3
3270: ARRAY
3271: PPUSH
3272: CALL_OW 428
3276: PPUSH
3277: CALL_OW 52
// end ;
3281: GO 3192
3283: POP
3284: POP
// end ; end ;
3285: GO 2835
3287: POP
3288: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 22
3296: PUSH
3297: LD_INT 3
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 21
3306: PUSH
3307: LD_INT 3
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: ST_TO_ADDR
// for b in blist do
3323: LD_ADDR_VAR 0 5
3327: PUSH
3328: LD_VAR 0 3
3332: PUSH
3333: FOR_IN
3334: IFFALSE 3356
// SetBLevel ( b , 3 + Difficulty ) ;
3336: LD_VAR 0 5
3340: PPUSH
3341: LD_INT 3
3343: PUSH
3344: LD_OWVAR 67
3348: PLUS
3349: PPUSH
3350: CALL_OW 241
3354: GO 3333
3356: POP
3357: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: LD_INT 22
3365: PUSH
3366: LD_INT 3
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_INT 30
3375: PUSH
3376: LD_INT 32
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PPUSH
3387: CALL_OW 69
3391: ST_TO_ADDR
// for b in blist do
3392: LD_ADDR_VAR 0 5
3396: PUSH
3397: LD_VAR 0 3
3401: PUSH
3402: FOR_IN
3403: IFFALSE 3512
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 1
3410: PPUSH
3411: LD_INT 1
3413: PUSH
3414: LD_OWVAR 67
3418: PLUS
3419: PPUSH
3420: CALL_OW 380
// un := CreateHuman ;
3424: LD_ADDR_VAR 0 6
3428: PUSH
3429: CALL_OW 44
3433: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3434: LD_ADDR_EXP 38
3438: PUSH
3439: LD_EXP 38
3443: PPUSH
3444: LD_EXP 38
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: PPUSH
3453: LD_VAR 0 6
3457: PPUSH
3458: CALL_OW 1
3462: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3463: LD_VAR 0 6
3467: PPUSH
3468: LD_VAR 0 5
3472: PPUSH
3473: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3477: LD_VAR 0 5
3481: PPUSH
3482: LD_INT 44
3484: PUSH
3485: LD_INT 43
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_VAR 0 5
3496: PUSH
3497: LD_INT 2
3499: MOD
3500: PUSH
3501: LD_INT 1
3503: PLUS
3504: ARRAY
3505: PPUSH
3506: CALL_OW 431
// end ;
3510: GO 3402
3512: POP
3513: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3514: LD_ADDR_VAR 0 3
3518: PUSH
3519: LD_INT 22
3521: PUSH
3522: LD_INT 3
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 30
3531: PUSH
3532: LD_INT 31
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PPUSH
3543: CALL_OW 69
3547: ST_TO_ADDR
// for b in blist do
3548: LD_ADDR_VAR 0 5
3552: PUSH
3553: LD_VAR 0 3
3557: PUSH
3558: FOR_IN
3559: IFFALSE 3658
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 1
3569: PUSH
3570: LD_OWVAR 67
3574: PLUS
3575: PPUSH
3576: CALL_OW 380
// un := CreateHuman ;
3580: LD_ADDR_VAR 0 6
3584: PUSH
3585: CALL_OW 44
3589: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3590: LD_ADDR_EXP 38
3594: PUSH
3595: LD_EXP 38
3599: PPUSH
3600: LD_EXP 38
3604: PUSH
3605: LD_INT 1
3607: PLUS
3608: PPUSH
3609: LD_VAR 0 6
3613: PPUSH
3614: CALL_OW 1
3618: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3619: LD_VAR 0 6
3623: PPUSH
3624: LD_VAR 0 5
3628: PPUSH
3629: CALL_OW 254
3633: PUSH
3634: LD_INT 3
3636: PLUS
3637: PPUSH
3638: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3642: LD_VAR 0 6
3646: PPUSH
3647: LD_VAR 0 5
3651: PPUSH
3652: CALL_OW 52
// end ;
3656: GO 3558
3658: POP
3659: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: LD_INT 22
3667: PUSH
3668: LD_INT 3
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 4
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: LD_INT 30
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: LIST
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PPUSH
3707: CALL_OW 69
3711: ST_TO_ADDR
// for b in blist do
3712: LD_ADDR_VAR 0 5
3716: PUSH
3717: LD_VAR 0 3
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3819
// begin for i := 1 to 2 do
3725: LD_ADDR_VAR 0 4
3729: PUSH
3730: DOUBLE
3731: LD_INT 1
3733: DEC
3734: ST_TO_ADDR
3735: LD_INT 2
3737: PUSH
3738: FOR_TO
3739: IFFALSE 3815
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3741: LD_INT 0
3743: PPUSH
3744: LD_INT 1
3746: PPUSH
3747: LD_INT 1
3749: PUSH
3750: LD_OWVAR 67
3754: PLUS
3755: PPUSH
3756: CALL_OW 380
// un := CreateHuman ;
3760: LD_ADDR_VAR 0 6
3764: PUSH
3765: CALL_OW 44
3769: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3770: LD_ADDR_EXP 38
3774: PUSH
3775: LD_EXP 38
3779: PPUSH
3780: LD_EXP 38
3784: PUSH
3785: LD_INT 1
3787: PLUS
3788: PPUSH
3789: LD_VAR 0 6
3793: PPUSH
3794: CALL_OW 1
3798: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3799: LD_VAR 0 6
3803: PPUSH
3804: LD_VAR 0 5
3808: PPUSH
3809: CALL_OW 52
// end ;
3813: GO 3738
3815: POP
3816: POP
// end ;
3817: GO 3722
3819: POP
3820: POP
// if ibrahimOnRuSide then
3821: LD_EXP 3
3825: IFFALSE 3923
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3827: LD_ADDR_EXP 22
3831: PUSH
3832: LD_STRING IbrahimRu
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: LD_STRING 
3840: PPUSH
3841: CALL 33167 0 3
3845: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3846: LD_EXP 22
3850: PPUSH
3851: LD_INT 121
3853: PPUSH
3854: LD_INT 78
3856: PPUSH
3857: LD_INT 0
3859: PPUSH
3860: CALL_OW 48
// ComHold ( Ibrahim ) ;
3864: LD_EXP 22
3868: PPUSH
3869: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3873: LD_INT 1
3875: PPUSH
3876: LD_INT 1
3878: PPUSH
3879: LD_INT 2
3881: PPUSH
3882: CALL_OW 380
// ruSol := CreateHuman ;
3886: LD_ADDR_EXP 43
3890: PUSH
3891: CALL_OW 44
3895: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3896: LD_EXP 43
3900: PPUSH
3901: LD_INT 121
3903: PPUSH
3904: LD_INT 75
3906: PPUSH
3907: LD_INT 0
3909: PPUSH
3910: CALL_OW 48
// ComHold ( ruSol ) ;
3914: LD_EXP 43
3918: PPUSH
3919: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3923: LD_ADDR_VAR 0 4
3927: PUSH
3928: DOUBLE
3929: LD_INT 1
3931: DEC
3932: ST_TO_ADDR
3933: LD_INT 2
3935: PUSH
3936: LD_INT 2
3938: PUSH
3939: LD_OWVAR 67
3943: PLUS
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PUSH
3949: LD_EXP 10
3953: PUSH
3954: LD_INT 3
3956: GREATER
3957: PUSH
3958: LD_INT 1
3960: PLUS
3961: ARRAY
3962: PUSH
3963: FOR_TO
3964: IFFALSE 4033
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3966: LD_VAR 0 8
3970: PPUSH
3971: LD_INT 21
3973: PUSH
3974: LD_INT 23
3976: PUSH
3977: LD_INT 24
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: LD_VAR 0 4
3989: PUSH
3990: LD_INT 3
3992: MOD
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: ARRAY
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 43
4007: PUSH
4008: LD_INT 44
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PUSH
4015: LD_INT 1
4017: PPUSH
4018: LD_INT 2
4020: PPUSH
4021: CALL_OW 12
4025: ARRAY
4026: PPUSH
4027: CALL_OW 185
4031: GO 3963
4033: POP
4034: POP
// end ;
4035: LD_VAR 0 1
4039: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4040: LD_EXP 42
4044: IFFALSE 4053
4046: PUSH
4047: LD_EXP 4
4051: NOT
4052: AND
4053: IFFALSE 4551
4055: GO 4057
4057: DISABLE
4058: LD_INT 0
4060: PPUSH
4061: PPUSH
4062: PPUSH
4063: PPUSH
4064: PPUSH
4065: PPUSH
// begin enable ;
4066: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4067: LD_ADDR_VAR 0 2
4071: PUSH
4072: LD_EXP 42
4076: PPUSH
4077: LD_INT 21
4079: PUSH
4080: LD_INT 2
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 72
4091: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_INT 81
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 2
4109: PUSH
4110: LD_INT 95
4112: PUSH
4113: LD_INT 4
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 95
4122: PUSH
4123: LD_INT 5
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 95
4132: PUSH
4133: LD_INT 6
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 95
4142: PUSH
4143: LD_INT 7
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PPUSH
4161: CALL_OW 69
4165: ST_TO_ADDR
// for i in filter do
4166: LD_ADDR_VAR 0 1
4170: PUSH
4171: LD_VAR 0 2
4175: PUSH
4176: FOR_IN
4177: IFFALSE 4549
// begin tmp := IsDrivenBy ( i ) ;
4179: LD_ADDR_VAR 0 3
4183: PUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 311
4193: ST_TO_ADDR
// tag := GetTag ( i ) ;
4194: LD_ADDR_VAR 0 6
4198: PUSH
4199: LD_VAR 0 1
4203: PPUSH
4204: CALL_OW 110
4208: ST_TO_ADDR
// if not tmp then
4209: LD_VAR 0 3
4213: NOT
4214: IFFALSE 4218
// continue ;
4216: GO 4176
// if GetFuel ( i ) > 90 and tag = 2 then
4218: LD_VAR 0 1
4222: PPUSH
4223: CALL_OW 261
4227: PUSH
4228: LD_INT 90
4230: GREATER
4231: IFFALSE 4243
4233: PUSH
4234: LD_VAR 0 6
4238: PUSH
4239: LD_INT 2
4241: EQUAL
4242: AND
4243: IFFALSE 4259
// SetTag ( i , 0 ) else
4245: LD_VAR 0 1
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL_OW 109
4257: GO 4302
// if GetTag ( i ) = 2 then
4259: LD_VAR 0 1
4263: PPUSH
4264: CALL_OW 110
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: IFFALSE 4302
// begin x := rand ( 1 , 2 ) ;
4274: LD_ADDR_VAR 0 5
4278: PUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_INT 2
4284: PPUSH
4285: CALL_OW 12
4289: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4290: LD_VAR 0 1
4294: PPUSH
4295: LD_INT 200
4297: PPUSH
4298: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4302: LD_VAR 0 1
4306: PPUSH
4307: CALL_OW 256
4311: PUSH
4312: LD_INT 650
4314: GREATEREQUAL
4315: IFFALSE 4324
4317: PUSH
4318: LD_VAR 0 6
4322: NOT
4323: AND
4324: IFFALSE 4350
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4326: LD_VAR 0 1
4330: PPUSH
4331: LD_VAR 0 4
4335: PPUSH
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 74
4345: PPUSH
4346: CALL_OW 115
// if GetLives ( i ) < 650 and not tag then
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 256
4359: PUSH
4360: LD_INT 650
4362: LESS
4363: IFFALSE 4372
4365: PUSH
4366: LD_VAR 0 6
4370: NOT
4371: AND
4372: IFFALSE 4401
// begin SetTag ( i , 1 ) ;
4374: LD_VAR 0 1
4378: PPUSH
4379: LD_INT 1
4381: PPUSH
4382: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4386: LD_VAR 0 1
4390: PPUSH
4391: LD_INT 112
4393: PPUSH
4394: LD_INT 119
4396: PPUSH
4397: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: PUSH
4411: LD_INT 1
4413: EQUAL
4414: IFFALSE 4437
4416: PUSH
4417: LD_VAR 0 1
4421: PPUSH
4422: LD_INT 112
4424: PPUSH
4425: LD_INT 119
4427: PPUSH
4428: CALL_OW 297
4432: PUSH
4433: LD_INT 9
4435: LESS
4436: AND
4437: IFFALSE 4445
4439: PUSH
4440: LD_VAR 0 3
4444: AND
4445: IFFALSE 4547
// begin ComExitVehicle ( tmp ) ;
4447: LD_VAR 0 3
4451: PPUSH
4452: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4456: LD_VAR 0 3
4460: PPUSH
4461: LD_VAR 0 1
4465: PPUSH
4466: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4470: LD_INT 35
4472: PPUSH
4473: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4477: LD_VAR 0 1
4481: PPUSH
4482: CALL_OW 256
4486: PUSH
4487: LD_INT 1000
4489: EQUAL
4490: IFFALSE 4470
// ComEnterUnit ( tmp , i ) ;
4492: LD_VAR 0 3
4496: PPUSH
4497: LD_VAR 0 1
4501: PPUSH
4502: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4506: LD_VAR 0 1
4510: PPUSH
4511: CALL_OW 261
4515: PUSH
4516: LD_INT 50
4518: LESSEQUAL
4519: IFFALSE 4535
// SetTag ( i , 2 ) else
4521: LD_VAR 0 1
4525: PPUSH
4526: LD_INT 2
4528: PPUSH
4529: CALL_OW 109
4533: GO 4547
// SetTag ( i , 0 ) ;
4535: LD_VAR 0 1
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: CALL_OW 109
// end ; end ;
4547: GO 4176
4549: POP
4550: POP
// end ;
4551: PPOPN 6
4553: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4554: LD_EXP 4
4558: NOT
4559: IFFALSE 4567
4561: PUSH
4562: LD_EXP 39
4566: AND
4567: IFFALSE 4830
4569: GO 4571
4571: DISABLE
4572: LD_INT 0
4574: PPUSH
4575: PPUSH
4576: PPUSH
4577: PPUSH
// begin enable ;
4578: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4579: LD_ADDR_VAR 0 2
4583: PUSH
4584: LD_INT 3
4586: PPUSH
4587: LD_INT 22
4589: PUSH
4590: LD_INT 3
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 21
4599: PUSH
4600: LD_INT 3
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 3
4609: PUSH
4610: LD_INT 24
4612: PUSH
4613: LD_INT 1000
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: PPUSH
4629: CALL_OW 70
4633: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4634: LD_ADDR_VAR 0 3
4638: PUSH
4639: LD_EXP 39
4643: PPUSH
4644: LD_INT 50
4646: PUSH
4647: EMPTY
4648: LIST
4649: PPUSH
4650: CALL_OW 72
4654: ST_TO_ADDR
// if filter and tmp then
4655: LD_VAR 0 2
4659: IFFALSE 4667
4661: PUSH
4662: LD_VAR 0 3
4666: AND
4667: IFFALSE 4759
// begin for i in tmp do
4669: LD_ADDR_VAR 0 1
4673: PUSH
4674: LD_VAR 0 3
4678: PUSH
4679: FOR_IN
4680: IFFALSE 4755
// begin if GetTag ( i ) = tEscape then
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 110
4691: PUSH
4692: LD_EXP 18
4696: EQUAL
4697: IFFALSE 4701
// continue ;
4699: GO 4679
// if IsInUnit ( i ) then
4701: LD_VAR 0 1
4705: PPUSH
4706: CALL_OW 310
4710: IFFALSE 4723
// ComExitBuilding ( i ) else
4712: LD_VAR 0 1
4716: PPUSH
4717: CALL_OW 122
4721: GO 4753
// if not HasTask ( i ) then
4723: LD_VAR 0 1
4727: PPUSH
4728: CALL_OW 314
4732: NOT
4733: IFFALSE 4753
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4735: LD_VAR 0 1
4739: PPUSH
4740: LD_VAR 0 2
4744: PUSH
4745: LD_INT 1
4747: ARRAY
4748: PPUSH
4749: CALL_OW 130
// end ;
4753: GO 4679
4755: POP
4756: POP
// end else
4757: GO 4830
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4759: LD_VAR 0 3
4763: PPUSH
4764: LD_INT 3
4766: PUSH
4767: LD_INT 54
4769: PUSH
4770: EMPTY
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 72
4781: IFFALSE 4830
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4783: LD_ADDR_VAR 0 1
4787: PUSH
4788: LD_VAR 0 3
4792: PPUSH
4793: LD_INT 3
4795: PUSH
4796: LD_INT 54
4798: PUSH
4799: EMPTY
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 72
4810: PUSH
4811: FOR_IN
4812: IFFALSE 4828
// ComEnterUnit ( i , ruMainBase ) ;
4814: LD_VAR 0 1
4818: PPUSH
4819: LD_INT 200
4821: PPUSH
4822: CALL_OW 120
4826: GO 4811
4828: POP
4829: POP
// end ; end ;
4830: PPOPN 4
4832: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4833: LD_EXP 4
4837: NOT
4838: IFFALSE 4846
4840: PUSH
4841: LD_EXP 41
4845: AND
4846: IFFALSE 5127
4848: GO 4850
4850: DISABLE
4851: LD_INT 0
4853: PPUSH
4854: PPUSH
4855: PPUSH
4856: PPUSH
// begin enable ;
4857: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4858: LD_ADDR_VAR 0 2
4862: PUSH
4863: LD_INT 3
4865: PPUSH
4866: LD_INT 22
4868: PUSH
4869: LD_INT 3
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 21
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 3
4888: PUSH
4889: LD_INT 24
4891: PUSH
4892: LD_INT 1000
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: PPUSH
4908: CALL_OW 70
4912: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4913: LD_ADDR_VAR 0 3
4917: PUSH
4918: LD_EXP 41
4922: PPUSH
4923: LD_INT 50
4925: PUSH
4926: EMPTY
4927: LIST
4928: PPUSH
4929: CALL_OW 72
4933: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4934: LD_ADDR_VAR 0 4
4938: PUSH
4939: LD_INT 118
4941: PPUSH
4942: LD_INT 121
4944: PPUSH
4945: CALL_OW 428
4949: ST_TO_ADDR
// if filter and tmp then
4950: LD_VAR 0 2
4954: IFFALSE 4962
4956: PUSH
4957: LD_VAR 0 3
4961: AND
4962: IFFALSE 5054
// begin for i in tmp do
4964: LD_ADDR_VAR 0 1
4968: PUSH
4969: LD_VAR 0 3
4973: PUSH
4974: FOR_IN
4975: IFFALSE 5050
// begin if GetTag ( i ) = tEscape then
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL_OW 110
4986: PUSH
4987: LD_EXP 18
4991: EQUAL
4992: IFFALSE 4996
// continue ;
4994: GO 4974
// if IsInUnit ( i ) then
4996: LD_VAR 0 1
5000: PPUSH
5001: CALL_OW 310
5005: IFFALSE 5018
// ComExitBuilding ( i ) else
5007: LD_VAR 0 1
5011: PPUSH
5012: CALL_OW 122
5016: GO 5048
// if not HasTask ( i ) then
5018: LD_VAR 0 1
5022: PPUSH
5023: CALL_OW 314
5027: NOT
5028: IFFALSE 5048
// ComHeal ( i , filter [ 1 ] ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_VAR 0 2
5039: PUSH
5040: LD_INT 1
5042: ARRAY
5043: PPUSH
5044: CALL_OW 128
// end ;
5048: GO 4974
5050: POP
5051: POP
// end else
5052: GO 5127
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5054: LD_VAR 0 3
5058: PPUSH
5059: LD_INT 3
5061: PUSH
5062: LD_INT 54
5064: PUSH
5065: EMPTY
5066: LIST
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PPUSH
5072: CALL_OW 72
5076: IFFALSE 5127
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5078: LD_ADDR_VAR 0 1
5082: PUSH
5083: LD_VAR 0 3
5087: PPUSH
5088: LD_INT 3
5090: PUSH
5091: LD_INT 54
5093: PUSH
5094: EMPTY
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 72
5105: PUSH
5106: FOR_IN
5107: IFFALSE 5125
// ComEnterUnit ( i , lab ) ;
5109: LD_VAR 0 1
5113: PPUSH
5114: LD_VAR 0 4
5118: PPUSH
5119: CALL_OW 120
5123: GO 5106
5125: POP
5126: POP
// end ; end ; end_of_file
5127: PPOPN 4
5129: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5130: LD_VAR 0 1
5134: PPUSH
5135: CALL 26793 0 1
// if un = Heike then
5139: LD_VAR 0 1
5143: PUSH
5144: LD_EXP 19
5148: EQUAL
5149: IFFALSE 5158
// YouLost ( Heike ) ;
5151: LD_STRING Heike
5153: PPUSH
5154: CALL_OW 104
// if un in ruEng then
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 39
5167: IN
5168: IFFALSE 5186
// ruEng := ruEng diff un ;
5170: LD_ADDR_EXP 39
5174: PUSH
5175: LD_EXP 39
5179: PUSH
5180: LD_VAR 0 1
5184: DIFF
5185: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_INT 22
5193: PUSH
5194: LD_INT 2
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 21
5203: PUSH
5204: LD_INT 1
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: LD_INT 23
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: IN
5231: IFFALSE 5247
// loseCounter := loseCounter + 1 ;
5233: LD_ADDR_EXP 6
5237: PUSH
5238: LD_EXP 6
5242: PUSH
5243: LD_INT 1
5245: PLUS
5246: ST_TO_ADDR
// end ;
5247: PPOPN 1
5249: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5250: LD_INT 0
5252: PPUSH
5253: PPUSH
// begin if un in ruMobile then
5254: LD_VAR 0 2
5258: PUSH
5259: LD_EXP 42
5263: IN
5264: IFFALSE 5427
// begin ruMobile := ruMobile diff un ;
5266: LD_ADDR_EXP 42
5270: PUSH
5271: LD_EXP 42
5275: PUSH
5276: LD_VAR 0 2
5280: DIFF
5281: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5282: LD_ADDR_VAR 0 5
5286: PUSH
5287: LD_VAR 0 2
5291: PPUSH
5292: CALL_OW 264
5296: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5297: LD_ADDR_VAR 0 6
5301: PUSH
5302: LD_INT 110
5304: PPUSH
5305: LD_INT 126
5307: PPUSH
5308: CALL_OW 428
5312: ST_TO_ADDR
// if not driver or not fac then
5313: LD_VAR 0 1
5317: NOT
5318: IFTRUE 5327
5320: PUSH
5321: LD_VAR 0 6
5325: NOT
5326: OR
5327: IFFALSE 5331
// exit ;
5329: GO 5427
// AddComMoveXY ( driver , 111 , 121 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 111
5338: PPUSH
5339: LD_INT 121
5341: PPUSH
5342: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: LD_VAR 0 6
5355: PPUSH
5356: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5360: LD_INT 35
5362: PPUSH
5363: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5367: LD_VAR 0 1
5371: PPUSH
5372: CALL_OW 301
5376: IFTRUE 5389
5378: PUSH
5379: LD_VAR 0 1
5383: PPUSH
5384: CALL_OW 310
5388: OR
5389: IFFALSE 5360
// if IsDead ( driver ) then
5391: LD_VAR 0 1
5395: PPUSH
5396: CALL_OW 301
5400: IFFALSE 5404
// exit ;
5402: GO 5427
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5404: LD_VAR 0 6
5408: PPUSH
5409: LD_INT 21
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: CALL_OW 185
// end ; end ;
5427: PPOPN 6
5429: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_VAR 0 2
5439: PPUSH
5440: CALL 26851 0 2
// if GetSide ( fac ) = 3 then
5444: LD_VAR 0 2
5448: PPUSH
5449: CALL_OW 255
5453: PUSH
5454: LD_INT 3
5456: EQUAL
5457: IFFALSE 5503
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5459: LD_ADDR_EXP 42
5463: PUSH
5464: LD_EXP 42
5468: PPUSH
5469: LD_EXP 42
5473: PUSH
5474: LD_INT 1
5476: PLUS
5477: PPUSH
5478: LD_VAR 0 1
5482: PPUSH
5483: CALL_OW 1
5487: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5488: LD_VAR 0 1
5492: PPUSH
5493: LD_INT 110
5495: PPUSH
5496: LD_INT 117
5498: PPUSH
5499: CALL_OW 171
// end ; end ;
5503: PPOPN 2
5505: END
// on LeaveBuilding ( b , un ) do var barracks ;
5506: LD_INT 0
5508: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5509: LD_VAR 0 1
5513: PUSH
5514: LD_INT 130
5516: PPUSH
5517: LD_INT 17
5519: PPUSH
5520: CALL_OW 428
5524: PUSH
5525: LD_INT 138
5527: PPUSH
5528: LD_INT 22
5530: PPUSH
5531: CALL_OW 428
5535: PUSH
5536: LD_INT 123
5538: PPUSH
5539: LD_INT 17
5541: PPUSH
5542: CALL_OW 428
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: IN
5552: IFFALSE 5576
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5554: LD_VAR 0 2
5558: PPUSH
5559: LD_INT 135
5561: PPUSH
5562: LD_INT 31
5564: PPUSH
5565: CALL_OW 428
5569: PPUSH
5570: CALL_OW 180
// exit ;
5574: GO 5850
// end ; if b = HexInfo ( 135 , 31 ) then
5576: LD_VAR 0 1
5580: PUSH
5581: LD_INT 135
5583: PPUSH
5584: LD_INT 31
5586: PPUSH
5587: CALL_OW 428
5591: EQUAL
5592: IFFALSE 5664
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_INT 106
5601: PPUSH
5602: LD_INT 51
5604: PPUSH
5605: CALL_OW 428
5609: PPUSH
5610: CALL_OW 180
// if not explodeFirstDepot then
5614: LD_EXP 12
5618: NOT
5619: IFFALSE 5662
// begin explodeFirstDepot := true ;
5621: LD_ADDR_EXP 12
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5629: LD_INT 525
5631: PPUSH
5632: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5636: LD_INT 127
5638: PPUSH
5639: LD_INT 27
5641: PPUSH
5642: LD_INT 1
5644: PPUSH
5645: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5649: LD_INT 125
5651: PPUSH
5652: LD_INT 29
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 453
// end ; exit ;
5662: GO 5850
// end ; if b = HexInfo ( 106 , 51 ) then
5664: LD_VAR 0 1
5668: PUSH
5669: LD_INT 106
5671: PPUSH
5672: LD_INT 51
5674: PPUSH
5675: CALL_OW 428
5679: EQUAL
5680: IFFALSE 5780
// begin AddComMoveXY ( un , 106 , 93 ) ;
5682: LD_VAR 0 2
5686: PPUSH
5687: LD_INT 106
5689: PPUSH
5690: LD_INT 93
5692: PPUSH
5693: CALL_OW 171
// if not explodeSecondDepot then
5697: LD_EXP 13
5701: NOT
5702: IFFALSE 5778
// begin explodeSecondDepot := true ;
5704: LD_ADDR_EXP 13
5708: PUSH
5709: LD_INT 1
5711: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5712: LD_INT 420
5714: PPUSH
5715: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5719: LD_INT 111
5721: PPUSH
5722: LD_INT 75
5724: PPUSH
5725: LD_INT 1
5727: PPUSH
5728: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5732: LD_INT 111
5734: PPUSH
5735: LD_INT 75
5737: PPUSH
5738: LD_INT 1
5740: PPUSH
5741: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5745: LD_INT 108
5747: PPUSH
5748: LD_INT 69
5750: PPUSH
5751: LD_INT 1
5753: PPUSH
5754: CALL_OW 453
// wait ( 0 0$2 ) ;
5758: LD_INT 70
5760: PPUSH
5761: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5765: LD_INT 94
5767: PPUSH
5768: LD_INT 65
5770: PPUSH
5771: LD_INT 1
5773: PPUSH
5774: CALL_OW 453
// end ; exit ;
5778: GO 5850
// end ; if GetBType ( b ) = b_bunker then
5780: LD_VAR 0 1
5784: PPUSH
5785: CALL_OW 266
5789: PUSH
5790: LD_INT 32
5792: EQUAL
5793: IFFALSE 5850
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_VAR 0 2
5804: PPUSH
5805: LD_INT 5
5807: PPUSH
5808: CALL 1020 0 2
5812: ST_TO_ADDR
// if barracks then
5813: LD_VAR 0 3
5817: IFFALSE 5835
// AddComEnterUnit ( un , barracks ) else
5819: LD_VAR 0 2
5823: PPUSH
5824: LD_VAR 0 3
5828: PPUSH
5829: CALL_OW 180
5833: GO 5850
// AddComMoveXY ( un , 116 , 110 ) ;
5835: LD_VAR 0 2
5839: PPUSH
5840: LD_INT 116
5842: PPUSH
5843: LD_INT 110
5845: PPUSH
5846: CALL_OW 171
// end ; end ;
5850: PPOPN 3
5852: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5853: LD_VAR 0 1
5857: PUSH
5858: LD_EXP 24
5862: EQUAL
5863: IFFALSE 5882
5865: PUSH
5866: LD_VAR 0 2
5870: PUSH
5871: LD_INT 3
5873: PUSH
5874: LD_INT 6
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: IN
5881: AND
5882: IFFALSE 5913
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5884: LD_ADDR_EXP 8
5888: PUSH
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL_OW 250
5898: PUSH
5899: LD_VAR 0 1
5903: PPUSH
5904: CALL_OW 251
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: ST_TO_ADDR
// end ;
5913: PPOPN 3
5915: END
// every 0 0$1 trigger activeInvincible do var i ;
5916: LD_EXP 17
5920: IFFALSE 5989
5922: GO 5924
5924: DISABLE
5925: LD_INT 0
5927: PPUSH
// begin enable ;
5928: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
5929: LD_ADDR_VAR 0 1
5933: PUSH
5934: LD_INT 22
5936: PUSH
5937: LD_INT 2
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PUSH
5944: LD_INT 3
5946: PUSH
5947: LD_INT 24
5949: PUSH
5950: LD_INT 1000
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PPUSH
5965: CALL_OW 69
5969: PUSH
5970: FOR_IN
5971: IFFALSE 5987
// SetLives ( i , 1000 ) ;
5973: LD_VAR 0 1
5977: PPUSH
5978: LD_INT 1000
5980: PPUSH
5981: CALL_OW 234
5985: GO 5970
5987: POP
5988: POP
// end ; end_of_file
5989: PPOPN 1
5991: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5992: LD_INT 0
5994: PPUSH
5995: PPUSH
5996: PPUSH
5997: PPUSH
5998: PPUSH
5999: PPUSH
6000: PPUSH
// Video ( true ) ;
6001: LD_INT 1
6003: PPUSH
6004: CALL 71329 0 1
// ChangeSideFog ( 5 , 2 ) ;
6008: LD_INT 5
6010: PPUSH
6011: LD_INT 2
6013: PPUSH
6014: CALL_OW 343
// music_nat := 4 ;
6018: LD_ADDR_OWVAR 71
6022: PUSH
6023: LD_INT 4
6025: ST_TO_ADDR
// music_class := music_combat ;
6026: LD_ADDR_OWVAR 72
6030: PUSH
6031: LD_INT 1
6033: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
6034: LD_INT 133
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: LD_INT 2
6042: PPUSH
6043: LD_INT 10
6045: PPUSH
6046: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
6050: LD_INT 133
6052: PPUSH
6053: LD_INT 2
6055: PPUSH
6056: CALL_OW 86
// wait ( 0 0$1 ) ;
6060: LD_INT 35
6062: PPUSH
6063: CALL_OW 67
// uc_side := 6 ;
6067: LD_ADDR_OWVAR 20
6071: PUSH
6072: LD_INT 6
6074: ST_TO_ADDR
// uc_nation := 3 ;
6075: LD_ADDR_OWVAR 21
6079: PUSH
6080: LD_INT 3
6082: ST_TO_ADDR
// rutmp := [ ] ;
6083: LD_ADDR_VAR 0 7
6087: PUSH
6088: EMPTY
6089: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
6090: LD_INT 6
6092: PPUSH
6093: LD_INT 3
6095: PPUSH
6096: LD_INT 21
6098: PPUSH
6099: LD_INT 1
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: LD_INT 44
6107: PPUSH
6108: LD_INT 66
6110: PPUSH
6111: CALL 344 0 7
// veh := CreateVehicle ;
6115: LD_ADDR_VAR 0 5
6119: PUSH
6120: CALL_OW 45
6124: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6125: LD_VAR 0 5
6129: PPUSH
6130: LD_INT 3
6132: PPUSH
6133: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6137: LD_VAR 0 5
6141: PPUSH
6142: LD_INT 8
6144: PPUSH
6145: LD_INT 0
6147: PPUSH
6148: CALL_OW 49
// SetLives ( veh , 500 ) ;
6152: LD_VAR 0 5
6156: PPUSH
6157: LD_INT 500
6159: PPUSH
6160: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6164: LD_INT 0
6166: PPUSH
6167: LD_INT 3
6169: PPUSH
6170: LD_INT 3
6172: PPUSH
6173: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6177: CALL_OW 44
6181: PPUSH
6182: LD_VAR 0 5
6186: PPUSH
6187: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6191: LD_VAR 0 5
6195: PPUSH
6196: LD_INT 133
6198: PPUSH
6199: LD_INT 11
6201: PPUSH
6202: CALL_OW 111
// rutmp := [ veh ] ;
6206: LD_ADDR_VAR 0 7
6210: PUSH
6211: LD_VAR 0 5
6215: PUSH
6216: EMPTY
6217: LIST
6218: ST_TO_ADDR
// for i := 1 to 4 do
6219: LD_ADDR_VAR 0 2
6223: PUSH
6224: DOUBLE
6225: LD_INT 1
6227: DEC
6228: ST_TO_ADDR
6229: LD_INT 4
6231: PUSH
6232: FOR_TO
6233: IFFALSE 6340
// begin PrepareHuman ( false , i , 2 ) ;
6235: LD_INT 0
6237: PPUSH
6238: LD_VAR 0 2
6242: PPUSH
6243: LD_INT 2
6245: PPUSH
6246: CALL_OW 380
// un := CreateHuman ;
6250: LD_ADDR_VAR 0 4
6254: PUSH
6255: CALL_OW 44
6259: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6260: LD_VAR 0 4
6264: PPUSH
6265: LD_INT 3
6267: PPUSH
6268: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6272: LD_VAR 0 4
6276: PPUSH
6277: LD_INT 8
6279: PPUSH
6280: LD_INT 0
6282: PPUSH
6283: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6287: LD_ADDR_VAR 0 7
6291: PUSH
6292: LD_VAR 0 7
6296: PPUSH
6297: LD_VAR 0 7
6301: PUSH
6302: LD_INT 1
6304: PLUS
6305: PPUSH
6306: LD_VAR 0 4
6310: PPUSH
6311: CALL_OW 1
6315: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6316: LD_VAR 0 4
6320: PPUSH
6321: LD_INT 133
6323: PPUSH
6324: LD_INT 11
6326: PPUSH
6327: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6331: LD_INT 18
6333: PPUSH
6334: CALL_OW 67
// end ;
6338: GO 6232
6340: POP
6341: POP
// for i in rutmp do
6342: LD_ADDR_VAR 0 2
6346: PUSH
6347: LD_VAR 0 7
6351: PUSH
6352: FOR_IN
6353: IFFALSE 6402
// begin AddComMoveXY ( i , 99 , 65 ) ;
6355: LD_VAR 0 2
6359: PPUSH
6360: LD_INT 99
6362: PPUSH
6363: LD_INT 65
6365: PPUSH
6366: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6370: LD_VAR 0 2
6374: PPUSH
6375: LD_INT 76
6377: PPUSH
6378: LD_INT 108
6380: PPUSH
6381: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6385: LD_VAR 0 2
6389: PPUSH
6390: LD_INT 92
6392: PPUSH
6393: LD_INT 176
6395: PPUSH
6396: CALL_OW 171
// end ;
6400: GO 6352
6402: POP
6403: POP
// wait ( 0 0$10 ) ;
6404: LD_INT 350
6406: PPUSH
6407: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6411: LD_ADDR_VAR 0 6
6415: PUSH
6416: LD_EXP 19
6420: PUSH
6421: LD_EXP 20
6425: PUSH
6426: LD_EXP 21
6430: PUSH
6431: LD_EXP 22
6435: PUSH
6436: LD_EXP 23
6440: PUSH
6441: LD_EXP 24
6445: PUSH
6446: LD_EXP 25
6450: PUSH
6451: LD_EXP 26
6455: PUSH
6456: LD_EXP 28
6460: PUSH
6461: LD_EXP 29
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: PUSH
6478: LD_EXP 30
6482: UNION
6483: ST_TO_ADDR
// tmp := tmp diff 0 ;
6484: LD_ADDR_VAR 0 6
6488: PUSH
6489: LD_VAR 0 6
6493: PUSH
6494: LD_INT 0
6496: DIFF
6497: ST_TO_ADDR
// for i in heikeVehicles do
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: LD_EXP 31
6507: PUSH
6508: FOR_IN
6509: IFFALSE 6928
// begin if not tmp then
6511: LD_VAR 0 6
6515: NOT
6516: IFFALSE 6520
// continue ;
6518: GO 6508
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6520: LD_INT 2
6522: PPUSH
6523: LD_VAR 0 2
6527: PUSH
6528: LD_INT 5
6530: ARRAY
6531: PPUSH
6532: LD_VAR 0 2
6536: PUSH
6537: LD_INT 1
6539: ARRAY
6540: PPUSH
6541: LD_VAR 0 2
6545: PUSH
6546: LD_INT 2
6548: ARRAY
6549: PPUSH
6550: LD_VAR 0 2
6554: PUSH
6555: LD_INT 3
6557: ARRAY
6558: PPUSH
6559: LD_VAR 0 2
6563: PUSH
6564: LD_INT 4
6566: ARRAY
6567: PPUSH
6568: LD_INT 34
6570: PPUSH
6571: CALL 344 0 7
// veh := CreateVehicle ;
6575: LD_ADDR_VAR 0 5
6579: PUSH
6580: CALL_OW 45
6584: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6585: LD_VAR 0 2
6589: PUSH
6590: LD_INT 4
6592: ARRAY
6593: PUSH
6594: LD_INT 51
6596: PUSH
6597: LD_INT 32
6599: PUSH
6600: LD_INT 12
6602: PUSH
6603: LD_INT 89
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: IN
6612: IFFALSE 6692
// begin if i [ 7 ] [ 1 ] then
6614: LD_VAR 0 2
6618: PUSH
6619: LD_INT 7
6621: ARRAY
6622: PUSH
6623: LD_INT 1
6625: ARRAY
6626: IFFALSE 6653
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6628: LD_VAR 0 5
6632: PPUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_VAR 0 2
6640: PUSH
6641: LD_INT 7
6643: ARRAY
6644: PUSH
6645: LD_INT 1
6647: ARRAY
6648: PPUSH
6649: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6653: LD_VAR 0 2
6657: PUSH
6658: LD_INT 7
6660: ARRAY
6661: PUSH
6662: LD_INT 2
6664: ARRAY
6665: IFFALSE 6692
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6667: LD_VAR 0 5
6671: PPUSH
6672: LD_INT 2
6674: PPUSH
6675: LD_VAR 0 2
6679: PUSH
6680: LD_INT 7
6682: ARRAY
6683: PUSH
6684: LD_INT 2
6686: ARRAY
6687: PPUSH
6688: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6692: LD_VAR 0 5
6696: PPUSH
6697: LD_INT 3
6699: PPUSH
6700: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6704: LD_VAR 0 5
6708: PPUSH
6709: LD_INT 8
6711: PPUSH
6712: LD_INT 0
6714: PPUSH
6715: CALL_OW 49
// for j := 1 to tmp do
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: DOUBLE
6725: LD_INT 1
6727: DEC
6728: ST_TO_ADDR
6729: LD_VAR 0 6
6733: PUSH
6734: FOR_TO
6735: IFFALSE 6808
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6737: LD_VAR 0 2
6741: PUSH
6742: LD_INT 8
6744: ARRAY
6745: PUSH
6746: LD_VAR 0 6
6750: PUSH
6751: LD_VAR 0 3
6755: ARRAY
6756: PPUSH
6757: CALL_OW 257
6761: EQUAL
6762: IFFALSE 6806
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6764: LD_VAR 0 6
6768: PUSH
6769: LD_VAR 0 3
6773: ARRAY
6774: PPUSH
6775: LD_VAR 0 5
6779: PPUSH
6780: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6784: LD_ADDR_VAR 0 6
6788: PUSH
6789: LD_VAR 0 6
6793: PPUSH
6794: LD_VAR 0 3
6798: PPUSH
6799: CALL_OW 3
6803: ST_TO_ADDR
// break ;
6804: GO 6808
// end ; end ;
6806: GO 6734
6808: POP
6809: POP
// if IsEmpty ( veh ) then
6810: LD_VAR 0 5
6814: PPUSH
6815: CALL 35413 0 1
6819: IFFALSE 6857
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6821: LD_VAR 0 6
6825: PUSH
6826: LD_INT 1
6828: ARRAY
6829: PPUSH
6830: LD_VAR 0 5
6834: PPUSH
6835: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6839: LD_ADDR_VAR 0 6
6843: PUSH
6844: LD_VAR 0 6
6848: PPUSH
6849: LD_INT 1
6851: PPUSH
6852: CALL_OW 3
6856: ST_TO_ADDR
// end ; if GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6857: LD_VAR 0 5
6861: PPUSH
6862: CALL_OW 264
6866: PUSH
6867: LD_INT 51
6869: PUSH
6870: LD_INT 32
6872: PUSH
6873: LD_INT 12
6875: PUSH
6876: LD_INT 89
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: IN
6885: IFFALSE 6904
// ComMoveXY ( veh , 130 , 8 ) else
6887: LD_VAR 0 5
6891: PPUSH
6892: LD_INT 130
6894: PPUSH
6895: LD_INT 8
6897: PPUSH
6898: CALL_OW 111
6902: GO 6919
// ComMoveXY ( veh , 134 , 15 ) ;
6904: LD_VAR 0 5
6908: PPUSH
6909: LD_INT 134
6911: PPUSH
6912: LD_INT 15
6914: PPUSH
6915: CALL_OW 111
// wait ( 0 0$3 ) ;
6919: LD_INT 105
6921: PPUSH
6922: CALL_OW 67
// end ;
6926: GO 6508
6928: POP
6929: POP
// if tmp then
6930: LD_VAR 0 6
6934: IFFALSE 6990
// for i in tmp do
6936: LD_ADDR_VAR 0 2
6940: PUSH
6941: LD_VAR 0 6
6945: PUSH
6946: FOR_IN
6947: IFFALSE 6988
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6949: LD_VAR 0 2
6953: PPUSH
6954: LD_INT 10
6956: PPUSH
6957: LD_INT 0
6959: PPUSH
6960: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6964: LD_VAR 0 2
6968: PPUSH
6969: LD_INT 146
6971: PPUSH
6972: LD_INT 7
6974: PPUSH
6975: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6979: LD_INT 18
6981: PPUSH
6982: CALL_OW 67
// end ;
6986: GO 6946
6988: POP
6989: POP
// if heikeApes then
6990: LD_EXP 32
6994: IFFALSE 7050
// for i in heikeApes do
6996: LD_ADDR_VAR 0 2
7000: PUSH
7001: LD_EXP 32
7005: PUSH
7006: FOR_IN
7007: IFFALSE 7048
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
7009: LD_VAR 0 2
7013: PPUSH
7014: LD_INT 10
7016: PPUSH
7017: LD_INT 0
7019: PPUSH
7020: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
7024: LD_VAR 0 2
7028: PPUSH
7029: LD_INT 146
7031: PPUSH
7032: LD_INT 7
7034: PPUSH
7035: CALL_OW 114
// wait ( 0 0$0.5 ) ;
7039: LD_INT 18
7041: PPUSH
7042: CALL_OW 67
// end ;
7046: GO 7006
7048: POP
7049: POP
// DialogueOn ;
7050: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
7054: LD_EXP 19
7058: PPUSH
7059: LD_STRING DH-outpost-a-1
7061: PPUSH
7062: CALL_OW 88
// DialogueOff ;
7066: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
7070: LD_INT 133
7072: PPUSH
7073: LD_INT 2
7075: PPUSH
7076: LD_INT 2
7078: PPUSH
7079: CALL_OW 331
// activeInvincible := false ;
7083: LD_ADDR_EXP 17
7087: PUSH
7088: LD_INT 0
7090: ST_TO_ADDR
// Video ( false ) ;
7091: LD_INT 0
7093: PPUSH
7094: CALL 71329 0 1
// music_nat := 0 ;
7098: LD_ADDR_OWVAR 71
7102: PUSH
7103: LD_INT 0
7105: ST_TO_ADDR
// music_class := 0 ;
7106: LD_ADDR_OWVAR 72
7110: PUSH
7111: LD_INT 0
7113: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
7114: LD_STRING Outposts
7116: PPUSH
7117: CALL_OW 337
// SaveForQuickRestart ;
7121: CALL_OW 22
// end ;
7125: LD_VAR 0 1
7129: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
7130: LD_INT 22
7132: PUSH
7133: LD_INT 2
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 91
7142: PUSH
7143: LD_EXP 22
7147: PUSH
7148: LD_INT 20
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PPUSH
7160: CALL_OW 69
7164: IFFALSE 7172
7166: PUSH
7167: LD_EXP 3
7171: AND
7172: IFFALSE 7185
7174: PUSH
7175: LD_EXP 22
7179: PPUSH
7180: CALL_OW 302
7184: AND
7185: IFFALSE 7436
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
// begin IbrahimBetrayal ;
7196: CALL 7439 0 0
// repeat wait ( 0 0$1 ) ;
7200: LD_INT 35
7202: PPUSH
7203: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7207: LD_EXP 22
7211: PPUSH
7212: CALL_OW 301
7216: IFTRUE 7267
7218: PUSH
7219: LD_INT 22
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 91
7231: PUSH
7232: LD_EXP 22
7236: PUSH
7237: LD_INT 6
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 69
7253: IFFALSE 7266
7255: PUSH
7256: LD_EXP 22
7260: PPUSH
7261: CALL_OW 302
7265: AND
7266: OR
7267: IFFALSE 7200
// if IsDead ( Ibrahim ) then
7269: LD_EXP 22
7273: PPUSH
7274: CALL_OW 301
7278: IFFALSE 7282
// exit ;
7280: GO 7436
// x := GetX ( Ibrahim ) ;
7282: LD_ADDR_VAR 0 1
7286: PUSH
7287: LD_EXP 22
7291: PPUSH
7292: CALL_OW 250
7296: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7297: LD_ADDR_VAR 0 2
7301: PUSH
7302: LD_EXP 22
7306: PPUSH
7307: CALL_OW 251
7311: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7312: LD_ADDR_VAR 0 3
7316: PUSH
7317: LD_EXP 22
7321: PPUSH
7322: CALL_OW 254
7326: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_EXP 22
7336: PPUSH
7337: CALL_OW 256
7341: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7342: LD_EXP 22
7346: PPUSH
7347: CALL_OW 64
// uc_side := 2 ;
7351: LD_ADDR_OWVAR 20
7355: PUSH
7356: LD_INT 2
7358: ST_TO_ADDR
// uc_nation := 2 ;
7359: LD_ADDR_OWVAR 21
7363: PUSH
7364: LD_INT 2
7366: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7367: LD_ADDR_EXP 22
7371: PUSH
7372: LD_STRING Ibrahim
7374: PPUSH
7375: LD_INT 0
7377: PPUSH
7378: LD_STRING 
7380: PPUSH
7381: CALL 33167 0 3
7385: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7386: LD_EXP 22
7390: PPUSH
7391: LD_VAR 0 3
7395: PPUSH
7396: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7400: LD_EXP 22
7404: PPUSH
7405: LD_VAR 0 1
7409: PPUSH
7410: LD_VAR 0 2
7414: PPUSH
7415: LD_INT 0
7417: PPUSH
7418: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7422: LD_EXP 22
7426: PPUSH
7427: LD_VAR 0 4
7431: PPUSH
7432: CALL_OW 234
// end ;
7436: PPOPN 4
7438: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7439: LD_INT 0
7441: PPUSH
7442: PPUSH
7443: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7444: LD_INT 122
7446: PPUSH
7447: LD_INT 77
7449: PPUSH
7450: LD_INT 2
7452: PPUSH
7453: LD_INT 6
7455: NEG
7456: PPUSH
7457: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7461: LD_EXP 22
7465: PPUSH
7466: LD_INT 123
7468: PPUSH
7469: LD_INT 79
7471: PPUSH
7472: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7476: LD_EXP 22
7480: PPUSH
7481: LD_INT 125
7483: PPUSH
7484: LD_INT 82
7486: PPUSH
7487: CALL_OW 178
// wait ( 0 0$2 ) ;
7491: LD_INT 70
7493: PPUSH
7494: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7498: LD_EXP 43
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7512: LD_EXP 43
7516: PPUSH
7517: LD_STRING DRum-outpost-b-3
7519: PPUSH
7520: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7524: LD_ADDR_VAR 0 3
7528: PUSH
7529: LD_INT 125
7531: PPUSH
7532: LD_INT 76
7534: PPUSH
7535: CALL_OW 428
7539: PUSH
7540: LD_INT 125
7542: PPUSH
7543: LD_INT 79
7545: PPUSH
7546: CALL_OW 428
7550: PUSH
7551: LD_INT 125
7553: PPUSH
7554: LD_INT 82
7556: PPUSH
7557: CALL_OW 428
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: ST_TO_ADDR
// for i in tmp do
7567: LD_ADDR_VAR 0 2
7571: PUSH
7572: LD_VAR 0 3
7576: PUSH
7577: FOR_IN
7578: IFFALSE 7594
// SetLives ( i , 200 ) ;
7580: LD_VAR 0 2
7584: PPUSH
7585: LD_INT 200
7587: PPUSH
7588: CALL_OW 234
7592: GO 7577
7594: POP
7595: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7596: LD_EXP 22
7600: PPUSH
7601: LD_STRING DI-outpost-b-4
7603: PPUSH
7604: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7608: LD_EXP 22
7612: PPUSH
7613: LD_INT 5
7615: PPUSH
7616: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7620: LD_EXP 22
7624: PUSH
7625: LD_EXP 43
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7638: LD_INT 122
7640: PPUSH
7641: LD_INT 77
7643: PPUSH
7644: LD_INT 2
7646: PPUSH
7647: CALL_OW 331
// if Givi then
7651: LD_EXP 20
7655: IFFALSE 7671
// Say ( Givi , DG-1-outpost-b-5 ) else
7657: LD_EXP 20
7661: PPUSH
7662: LD_STRING DG-1-outpost-b-5
7664: PPUSH
7665: CALL_OW 88
7669: GO 7736
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7671: LD_EXP 30
7675: PPUSH
7676: LD_INT 26
7678: PUSH
7679: LD_INT 2
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: PUSH
7691: LD_INT 1
7693: ARRAY
7694: PPUSH
7695: LD_STRING DArf-outpost-b-a-5
7697: PPUSH
7698: CALL_OW 88
7702: NOT
7703: IFFALSE 7736
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7705: LD_EXP 30
7709: PPUSH
7710: LD_INT 26
7712: PUSH
7713: LD_INT 1
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 72
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: PPUSH
7729: LD_STRING DArm-outpost-b-a-5
7731: PPUSH
7732: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7736: LD_INT 35
7738: PPUSH
7739: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7743: LD_EXP 22
7747: PPUSH
7748: CALL_OW 301
7752: IFTRUE 7787
7754: PUSH
7755: LD_EXP 19
7759: PPUSH
7760: LD_EXP 22
7764: PPUSH
7765: CALL_OW 296
7769: PUSH
7770: LD_INT 6
7772: LESS
7773: IFFALSE 7786
7775: PUSH
7776: LD_EXP 22
7780: PPUSH
7781: CALL_OW 302
7785: AND
7786: OR
7787: IFFALSE 7736
// if IsDead ( Ibrahim ) then
7789: LD_EXP 22
7793: PPUSH
7794: CALL_OW 301
7798: IFFALSE 7814
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7800: LD_EXP 19
7804: PPUSH
7805: LD_STRING DH-ibrahimdead-1
7807: PPUSH
7808: CALL_OW 88
// exit ;
7812: GO 7855
// end ; CenterNowOnUnits ( Ibrahim ) ;
7814: LD_EXP 22
7818: PPUSH
7819: CALL_OW 87
// DialogueOn ;
7823: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7827: LD_EXP 22
7831: PPUSH
7832: LD_STRING DI-ibrahimlives-1
7834: PPUSH
7835: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7839: LD_EXP 19
7843: PPUSH
7844: LD_STRING DH-Ibrahimlives-2
7846: PPUSH
7847: CALL_OW 88
// DialogueOff ;
7851: CALL_OW 7
// end ;
7855: LD_VAR 0 1
7859: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7860: LD_INT 11
7862: PPUSH
7863: LD_INT 22
7865: PUSH
7866: LD_INT 2
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 70
7877: IFTRUE 7910
7879: PUSH
7880: LD_OWVAR 1
7884: PUSH
7885: LD_INT 18900
7887: PUSH
7888: LD_INT 16800
7890: PUSH
7891: LD_INT 16800
7893: PUSH
7894: LD_INT 15750
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: PUSH
7903: LD_OWVAR 67
7907: ARRAY
7908: GREATEREQUAL
7909: OR
7910: IFFALSE 8420
7912: GO 7914
7914: DISABLE
// begin outerAreaAchived := true ;
7915: LD_ADDR_EXP 15
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7923: LD_INT 700
7925: PPUSH
7926: CALL_OW 67
// DialogueOn ;
7930: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7934: LD_EXP 27
7938: PPUSH
7939: LD_STRING DShar-radio-1
7941: PPUSH
7942: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7946: LD_EXP 27
7950: PPUSH
7951: LD_STRING DShar-radio-2
7953: PPUSH
7954: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7958: LD_EXP 19
7962: PPUSH
7963: LD_STRING DH-radio-2
7965: PPUSH
7966: CALL_OW 88
// DialogueOff ;
7970: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7974: LD_STRING Gaidar
7976: PPUSH
7977: CALL_OW 337
// if Difficulty < 3 then
7981: LD_OWVAR 67
7985: PUSH
7986: LD_INT 3
7988: LESS
7989: IFFALSE 8055
// begin DialogueOn ;
7991: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7995: LD_INT 11
7997: PPUSH
7998: LD_INT 14
8000: PPUSH
8001: LD_INT 2
8003: PPUSH
8004: LD_INT 6
8006: NEG
8007: PPUSH
8008: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
8012: LD_INT 11
8014: PPUSH
8015: LD_INT 14
8017: PPUSH
8018: LD_INT 2
8020: PPUSH
8021: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
8025: LD_INT 11
8027: PPUSH
8028: LD_INT 14
8030: PPUSH
8031: CALL_OW 84
// dwait ( 0 0$1 ) ;
8035: LD_INT 35
8037: PPUSH
8038: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8042: LD_EXP 19
8046: PPUSH
8047: CALL_OW 87
// DialogueOff ;
8051: CALL_OW 7
// end ; wait ( 1 1$20 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
8055: LD_INT 2800
8057: PUSH
8058: LD_INT 350
8060: PPUSH
8061: LD_INT 525
8063: PPUSH
8064: CALL_OW 12
8068: PUSH
8069: LD_OWVAR 67
8073: MUL
8074: PLUS
8075: PPUSH
8076: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8080: LD_INT 35
8082: PPUSH
8083: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
8087: LD_INT 2
8089: PPUSH
8090: LD_INT 1
8092: PPUSH
8093: CALL_OW 428
8097: PUSH
8098: LD_INT 0
8100: EQUAL
8101: IFFALSE 8080
// SetDir ( Gaidar , 2 ) ;
8103: LD_EXP 36
8107: PPUSH
8108: LD_INT 2
8110: PPUSH
8111: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
8115: LD_EXP 36
8119: PPUSH
8120: LD_INT 2
8122: PPUSH
8123: LD_INT 1
8125: PPUSH
8126: LD_INT 0
8128: PPUSH
8129: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
8133: LD_EXP 36
8137: PPUSH
8138: LD_INT 19
8140: PPUSH
8141: LD_INT 24
8143: PPUSH
8144: CALL_OW 111
// if Difficulty < 3 then
8148: LD_OWVAR 67
8152: PUSH
8153: LD_INT 3
8155: LESS
8156: IFFALSE 8195
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8158: LD_INT 11
8160: PPUSH
8161: LD_INT 14
8163: PPUSH
8164: LD_INT 2
8166: PPUSH
8167: LD_INT 6
8169: NEG
8170: PPUSH
8171: CALL_OW 330
// wait ( 0 0$2 ) ;
8175: LD_INT 70
8177: PPUSH
8178: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
8182: LD_INT 11
8184: PPUSH
8185: LD_INT 14
8187: PPUSH
8188: LD_INT 2
8190: PPUSH
8191: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
8195: LD_EXP 36
8199: PPUSH
8200: LD_INT 210
8202: PPUSH
8203: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8207: LD_EXP 36
8211: PPUSH
8212: LD_INT 38
8214: PPUSH
8215: LD_INT 47
8217: PPUSH
8218: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8222: LD_EXP 36
8226: PPUSH
8227: LD_INT 32
8229: PPUSH
8230: LD_INT 59
8232: PPUSH
8233: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8237: LD_EXP 36
8241: PPUSH
8242: LD_INT 350
8244: PPUSH
8245: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8249: LD_EXP 36
8253: PPUSH
8254: LD_INT 62
8256: PPUSH
8257: LD_INT 116
8259: PPUSH
8260: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8264: LD_EXP 36
8268: PPUSH
8269: LD_INT 92
8271: PPUSH
8272: LD_INT 177
8274: PPUSH
8275: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8286: LD_EXP 36
8290: PPUSH
8291: CALL_OW 301
8295: IFTRUE 8314
8297: PUSH
8298: LD_EXP 36
8302: PPUSH
8303: LD_INT 92
8305: PPUSH
8306: LD_INT 177
8308: PPUSH
8309: CALL_OW 307
8313: OR
8314: IFFALSE 8279
// if IsAt ( Gaidar , 92 , 177 ) then
8316: LD_EXP 36
8320: PPUSH
8321: LD_INT 92
8323: PPUSH
8324: LD_INT 177
8326: PPUSH
8327: CALL_OW 307
8331: IFFALSE 8398
// begin DialogueOn ;
8333: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8337: LD_INT 92
8339: PPUSH
8340: LD_INT 177
8342: PPUSH
8343: LD_INT 2
8345: PPUSH
8346: LD_INT 3
8348: NEG
8349: PPUSH
8350: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8354: LD_EXP 36
8358: PPUSH
8359: CALL_OW 87
// dwait ( 0 0$2 ) ;
8363: LD_INT 70
8365: PPUSH
8366: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8370: LD_INT 92
8372: PPUSH
8373: LD_INT 177
8375: PPUSH
8376: LD_INT 2
8378: PPUSH
8379: CALL_OW 331
// DialogueOff ;
8383: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8387: LD_EXP 36
8391: PPUSH
8392: CALL_OW 64
// exit ;
8396: GO 8420
// end ; gaidarKilled := true ;
8398: LD_ADDR_EXP 14
8402: PUSH
8403: LD_INT 1
8405: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8406: LD_STRING GaidarKilled
8408: PPUSH
8409: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8413: LD_STRING ACH_COMMISAR
8415: PPUSH
8416: CALL_OW 543
// end ;
8420: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8421: LD_INT 2
8423: PPUSH
8424: LD_EXP 36
8428: PPUSH
8429: CALL_OW 292
8433: IFFALSE 8450
8435: GO 8437
8437: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8438: LD_EXP 36
8442: PPUSH
8443: LD_STRING DT-objective-1
8445: PPUSH
8446: CALL_OW 88
8450: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8451: LD_INT 22
8453: PUSH
8454: LD_INT 2
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 2
8463: PUSH
8464: LD_INT 95
8466: PUSH
8467: LD_INT 5
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 95
8476: PUSH
8477: LD_INT 6
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 95
8486: PUSH
8487: LD_INT 7
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PPUSH
8504: CALL_OW 69
8508: IFFALSE 8545
8510: GO 8512
8512: DISABLE
// begin DialogueOn ;
8513: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8517: LD_EXP 19
8521: PPUSH
8522: LD_STRING DH-outpost-last-1
8524: PPUSH
8525: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8529: LD_EXP 35
8533: PPUSH
8534: LD_STRING DB-outpost-last-2
8536: PPUSH
8537: CALL_OW 94
// DialogueOff ;
8541: CALL_OW 7
// end ;
8545: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8546: LD_INT 200
8548: PPUSH
8549: CALL_OW 256
8553: PUSH
8554: LD_INT 999
8556: LESS
8557: IFTRUE 8572
8559: PUSH
8560: LD_INT 200
8562: PPUSH
8563: CALL_OW 255
8567: PUSH
8568: LD_INT 2
8570: EQUAL
8571: OR
8572: IFFALSE 8745
8574: GO 8576
8576: DISABLE
8577: LD_INT 0
8579: PPUSH
8580: PPUSH
// begin if not earlyEscape then
8581: LD_EXP 16
8585: NOT
8586: IFFALSE 8612
// begin SayRadio ( Burlak , DB-end-1 ) ;
8588: LD_EXP 35
8592: PPUSH
8593: LD_STRING DB-end-1
8595: PPUSH
8596: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8600: LD_EXP 19
8604: PPUSH
8605: LD_STRING DH-end-2
8607: PPUSH
8608: CALL_OW 88
// end ; if tick <= 15 15$00 then
8612: LD_OWVAR 1
8616: PUSH
8617: LD_INT 31500
8619: LESSEQUAL
8620: IFFALSE 8629
// SetAchievement ( ACH_FIST ) ;
8622: LD_STRING ACH_FIST
8624: PPUSH
8625: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8629: LD_ADDR_VAR 0 2
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: LD_INT 21
8649: PUSH
8650: LD_INT 3
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PPUSH
8665: CALL_OW 69
8669: ST_TO_ADDR
// if not tmp then
8670: LD_VAR 0 2
8674: NOT
8675: IFFALSE 8679
// exit ;
8677: GO 8745
// for i in tmp do
8679: LD_ADDR_VAR 0 1
8683: PUSH
8684: LD_VAR 0 2
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8743
// begin SetTag ( i , tEscape ) ;
8692: LD_VAR 0 1
8696: PPUSH
8697: LD_EXP 18
8701: PPUSH
8702: CALL_OW 109
// if IsInUnit ( i ) then
8706: LD_VAR 0 1
8710: PPUSH
8711: CALL_OW 310
8715: IFFALSE 8726
// ComExitBuilding ( i ) ;
8717: LD_VAR 0 1
8721: PPUSH
8722: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8726: LD_VAR 0 1
8730: PPUSH
8731: LD_INT 92
8733: PPUSH
8734: LD_INT 177
8736: PPUSH
8737: CALL_OW 171
// end ;
8741: GO 8689
8743: POP
8744: POP
// end ;
8745: PPOPN 2
8747: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8748: LD_INT 4
8750: PPUSH
8751: LD_INT 22
8753: PUSH
8754: LD_INT 2
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 70
8765: IFFALSE 8774
8767: PUSH
8768: LD_EXP 15
8772: NOT
8773: AND
8774: IFFALSE 8787
8776: PUSH
8777: LD_EXP 28
8781: PPUSH
8782: CALL_OW 302
8786: AND
8787: IFFALSE 9029
8789: GO 8791
8791: DISABLE
// begin DialogueOn ;
8792: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8796: LD_INT 111
8798: PPUSH
8799: LD_INT 54
8801: PPUSH
8802: LD_INT 2
8804: PPUSH
8805: LD_INT 16
8807: NEG
8808: PPUSH
8809: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8813: LD_INT 111
8815: PPUSH
8816: LD_INT 53
8818: PPUSH
8819: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8823: LD_INT 10
8825: PPUSH
8826: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8830: LD_EXP 28
8834: PPUSH
8835: LD_STRING DKs-Hannibal-1
8837: PPUSH
8838: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8842: LD_EXP 28
8846: PPUSH
8847: LD_STRING DKs-Hannibal-2
8849: PPUSH
8850: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8854: LD_EXP 28
8858: PPUSH
8859: LD_STRING DKs-Hannibal-3
8861: PPUSH
8862: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8866: LD_EXP 28
8870: PPUSH
8871: LD_STRING DKs-Hannibal-4
8873: PPUSH
8874: CALL_OW 88
// dwait ( 0 0$1 ) ;
8878: LD_INT 35
8880: PPUSH
8881: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8885: LD_INT 111
8887: PPUSH
8888: LD_INT 54
8890: PPUSH
8891: LD_INT 2
8893: PPUSH
8894: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8898: LD_INT 173
8900: PPUSH
8901: LD_INT 76
8903: PPUSH
8904: LD_INT 2
8906: PPUSH
8907: LD_INT 12
8909: NEG
8910: PPUSH
8911: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8915: LD_INT 173
8917: PPUSH
8918: LD_INT 76
8920: PPUSH
8921: LD_INT 2
8923: PPUSH
8924: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8928: LD_INT 173
8930: PPUSH
8931: LD_INT 76
8933: PPUSH
8934: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8938: LD_EXP 28
8942: PPUSH
8943: LD_STRING DKs-Hannibal-5
8945: PPUSH
8946: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8950: LD_EXP 23
8954: IFFALSE 8987
8956: PUSH
8957: LD_INT 22
8959: PUSH
8960: LD_INT 2
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 34
8969: PUSH
8970: LD_INT 26
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PPUSH
8981: CALL_OW 69
8985: NOT
8986: AND
8987: IFFALSE 9025
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8989: LD_EXP 23
8993: PPUSH
8994: LD_STRING DKam-Hannibal-a-6
8996: PPUSH
8997: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
9001: LD_EXP 23
9005: PPUSH
9006: LD_STRING DKam-Hannibal-a-7
9008: PPUSH
9009: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
9013: LD_EXP 20
9017: PPUSH
9018: LD_STRING DG-Hannibal-a-8
9020: PPUSH
9021: CALL_OW 88
// end ; DialogueOff ;
9025: CALL_OW 7
// end ;
9029: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
9030: LD_INT 225
9032: PPUSH
9033: CALL_OW 302
9037: IFFALSE 9048
9039: PUSH
9040: LD_INT 200
9042: PPUSH
9043: CALL_OW 302
9047: AND
9048: IFFALSE 9073
9050: PUSH
9051: LD_INT 12
9053: PPUSH
9054: LD_INT 21
9056: PUSH
9057: LD_INT 3
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 70
9068: PUSH
9069: LD_INT 2
9071: GREATER
9072: AND
9073: IFFALSE 9098
9075: PUSH
9076: LD_INT 13
9078: PPUSH
9079: LD_INT 22
9081: PUSH
9082: LD_INT 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 70
9093: PUSH
9094: LD_INT 3
9096: GREATER
9097: AND
9098: IFFALSE 9111
9100: GO 9102
9102: DISABLE
// hannibalPath := true ;
9103: LD_ADDR_EXP 9
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
9111: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
9112: LD_EXP 9
9116: IFFALSE 9137
9118: PUSH
9119: LD_INT 6
9121: PPUSH
9122: LD_INT 22
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PPUSH
9132: CALL_OW 70
9136: AND
9137: IFFALSE 9482
9139: GO 9141
9141: DISABLE
9142: LD_INT 0
9144: PPUSH
9145: PPUSH
9146: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
9147: LD_ADDR_VAR 0 2
9151: PUSH
9152: LD_INT 6
9154: PPUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 70
9169: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
9170: LD_ADDR_VAR 0 3
9174: PUSH
9175: LD_VAR 0 2
9179: PPUSH
9180: LD_INT 34
9182: PUSH
9183: LD_INT 26
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PPUSH
9190: CALL_OW 72
9194: PUSH
9195: LD_INT 0
9197: GREATER
9198: ST_TO_ADDR
// DialogueOn ;
9199: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
9203: LD_EXP 19
9207: PPUSH
9208: LD_STRING DH-Cleverattack-1
9210: PPUSH
9211: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
9215: LD_EXP 19
9219: PPUSH
9220: LD_STRING DH-Cleverattack-2
9222: PPUSH
9223: CALL_OW 88
// if hasFlameThrower then
9227: LD_VAR 0 3
9231: IFFALSE 9259
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9233: LD_EXP 35
9237: PPUSH
9238: LD_STRING DB-Cleverattack-3
9240: PPUSH
9241: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9245: LD_EXP 19
9249: PPUSH
9250: LD_STRING DH-Cleverattack-4
9252: PPUSH
9253: CALL_OW 88
// end else
9257: GO 9283
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9259: LD_EXP 35
9263: PPUSH
9264: LD_STRING DB-Cleverattack-a-3
9266: PPUSH
9267: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9271: LD_EXP 19
9275: PPUSH
9276: LD_STRING DH-Cleverattack-a-4
9278: PPUSH
9279: CALL_OW 88
// end ; DialogueOff ;
9283: CALL_OW 7
// if not hasFlameThrower then
9287: LD_VAR 0 3
9291: NOT
9292: IFFALSE 9296
// exit ;
9294: GO 9482
// earlyEscape := true ;
9296: LD_ADDR_EXP 16
9300: PUSH
9301: LD_INT 1
9303: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9304: LD_INT 140
9306: PPUSH
9307: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9311: LD_ADDR_VAR 0 2
9315: PUSH
9316: LD_INT 22
9318: PUSH
9319: LD_INT 3
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 2
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 1
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 25
9341: PUSH
9342: LD_INT 2
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 25
9351: PUSH
9352: LD_INT 4
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 69
9373: PUSH
9374: LD_EXP 22
9378: PUSH
9379: LD_EXP 37
9383: PUSH
9384: LD_EXP 36
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: LIST
9393: DIFF
9394: ST_TO_ADDR
// for i in tmp do
9395: LD_ADDR_VAR 0 1
9399: PUSH
9400: LD_VAR 0 2
9404: PUSH
9405: FOR_IN
9406: IFFALSE 9480
// begin if Prob ( 40 + 10 * Difficulty ) then
9408: LD_INT 40
9410: PUSH
9411: LD_INT 10
9413: PUSH
9414: LD_OWVAR 67
9418: MUL
9419: PLUS
9420: PPUSH
9421: CALL_OW 13
9425: IFFALSE 9429
// continue ;
9427: GO 9405
// SetTag ( i , tEscape ) ;
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_EXP 18
9438: PPUSH
9439: CALL_OW 109
// if IsInUnit ( i ) then
9443: LD_VAR 0 1
9447: PPUSH
9448: CALL_OW 310
9452: IFFALSE 9463
// ComExitBuilding ( i ) ;
9454: LD_VAR 0 1
9458: PPUSH
9459: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9463: LD_VAR 0 1
9467: PPUSH
9468: LD_INT 92
9470: PPUSH
9471: LD_INT 177
9473: PPUSH
9474: CALL_OW 171
// end ;
9478: GO 9405
9480: POP
9481: POP
// end ;
9482: PPOPN 3
9484: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9485: LD_INT 9
9487: PPUSH
9488: LD_INT 2
9490: PUSH
9491: LD_INT 22
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 22
9503: PUSH
9504: LD_INT 6
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: PPUSH
9516: CALL_OW 70
9520: IFFALSE 9620
9522: GO 9524
9524: DISABLE
9525: LD_INT 0
9527: PPUSH
// begin enable ;
9528: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9529: LD_ADDR_VAR 0 1
9533: PUSH
9534: LD_INT 9
9536: PPUSH
9537: LD_INT 2
9539: PUSH
9540: LD_INT 22
9542: PUSH
9543: LD_INT 3
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 22
9552: PUSH
9553: LD_INT 6
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 70
9569: PUSH
9570: FOR_IN
9571: IFFALSE 9618
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9573: LD_VAR 0 1
9577: PPUSH
9578: CALL_OW 110
9582: PUSH
9583: LD_EXP 18
9587: EQUAL
9588: IFTRUE 9605
9590: PUSH
9591: LD_VAR 0 1
9595: PPUSH
9596: CALL_OW 255
9600: PUSH
9601: LD_INT 6
9603: EQUAL
9604: OR
9605: IFFALSE 9616
// RemoveUnit ( i ) ;
9607: LD_VAR 0 1
9611: PPUSH
9612: CALL_OW 64
9616: GO 9570
9618: POP
9619: POP
// end ;
9620: PPOPN 1
9622: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9623: LD_EXP 24
9627: IFFALSE 9644
9629: PUSH
9630: LD_EXP 24
9634: PPUSH
9635: CALL_OW 256
9639: PUSH
9640: LD_INT 3
9642: LESS
9643: AND
9644: IFFALSE 9690
9646: GO 9648
9648: DISABLE
// begin DialogueOn ;
9649: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9653: LD_EXP 24
9657: PPUSH
9658: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9662: LD_EXP 24
9666: PPUSH
9667: LD_STRING DK-Kkilled-1
9669: PPUSH
9670: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9674: LD_EXP 19
9678: PPUSH
9679: LD_STRING DH-Kkilled-2
9681: PPUSH
9682: CALL_OW 88
// DialogueOff ;
9686: CALL_OW 7
// end ;
9690: END
// every 0 0$1 trigger kaiaKilledByRussian do
9691: LD_EXP 8
9695: IFFALSE 9712
9697: GO 9699
9699: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9700: LD_EXP 19
9704: PPUSH
9705: LD_STRING DH-Kkilled-3
9707: PPUSH
9708: CALL_OW 88
9712: END
// every 0 0$1 trigger tick >= 24 24$00 do
9713: LD_OWVAR 1
9717: PUSH
9718: LD_INT 50400
9720: GREATEREQUAL
9721: IFFALSE 9758
9723: GO 9725
9725: DISABLE
// begin DialogueOn ;
9726: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9730: LD_EXP 27
9734: PPUSH
9735: LD_STRING DShar-slow-1
9737: PPUSH
9738: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9742: LD_EXP 27
9746: PPUSH
9747: LD_STRING DShar-slow-2
9749: PPUSH
9750: CALL_OW 94
// DialogueOff ;
9754: CALL_OW 7
// end ;
9758: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9759: LD_OWVAR 1
9763: PUSH
9764: LD_INT 84000
9766: PUSH
9767: LD_INT 75600
9769: PUSH
9770: LD_INT 67200
9772: PUSH
9773: LD_INT 63000
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: LD_OWVAR 67
9786: ARRAY
9787: GREATEREQUAL
9788: IFFALSE 9832
9790: GO 9792
9792: DISABLE
// begin DialogueOn ;
9793: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9797: LD_EXP 27
9801: PPUSH
9802: LD_STRING DShar-fail-1
9804: PPUSH
9805: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9809: LD_EXP 27
9813: PPUSH
9814: LD_STRING DShar-fail-2
9816: PPUSH
9817: CALL_OW 94
// DialogueOff ;
9821: CALL_OW 7
// YouLost ( Time ) ;
9825: LD_STRING Time
9827: PPUSH
9828: CALL_OW 104
// end ;
9832: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9833: LD_INT 22
9835: PUSH
9836: LD_INT 3
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: LD_INT 30
9848: PUSH
9849: LD_INT 1
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 30
9858: PUSH
9859: LD_INT 0
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PPUSH
9875: CALL_OW 69
9879: PUSH
9880: LD_INT 0
9882: EQUAL
9883: IFFALSE 10548
9885: GO 9887
9887: DISABLE
9888: LD_INT 0
9890: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 5 then
9891: LD_INT 22
9893: PUSH
9894: LD_INT 2
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 23
9903: PUSH
9904: LD_INT 2
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 21
9913: PUSH
9914: LD_INT 1
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: LD_INT 50
9923: PUSH
9924: EMPTY
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: PPUSH
9933: CALL_OW 69
9937: PPUSH
9938: CALL 35391 0 1
9942: PUSH
9943: LD_INT 5
9945: LESS
9946: IFFALSE 9957
// begin YouLost ( Troops ) ;
9948: LD_STRING Troops
9950: PPUSH
9951: CALL_OW 104
// exit ;
9955: GO 10548
// end ; if ( tick + gameTime ) <= 55 55$00 then
9957: LD_OWVAR 1
9961: PUSH
9962: LD_EXP 5
9966: PLUS
9967: PUSH
9968: LD_INT 115500
9970: LESSEQUAL
9971: IFFALSE 9980
// SetAchievement ( ACH_HSPEED_4 ) ;
9973: LD_STRING ACH_HSPEED_4
9975: PPUSH
9976: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9980: LD_OWVAR 1
9984: PUSH
9985: LD_EXP 5
9989: PLUS
9990: PUSH
9991: LD_INT 178500
9993: PUSH
9994: LD_INT 157500
9996: PUSH
9997: LD_INT 136500
9999: PUSH
10000: LD_INT 126000
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: PUSH
10009: LD_OWVAR 67
10013: ARRAY
10014: LESSEQUAL
10015: IFFALSE 10029
// AddMedal ( med1 , 1 ) else
10017: LD_STRING med1
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL_OW 101
10027: GO 10040
// AddMedal ( med1 , - 1 ) ;
10029: LD_STRING med1
10031: PPUSH
10032: LD_INT 1
10034: NEG
10035: PPUSH
10036: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
10040: LD_EXP 7
10044: PUSH
10045: LD_INT 3
10047: GREATEREQUAL
10048: PUSH
10049: LD_EXP 11
10053: MUL
10054: PUSH
10055: LD_EXP 9
10059: MUL
10060: PUSH
10061: LD_EXP 6
10065: PUSH
10066: LD_INT 6
10068: PUSH
10069: LD_INT 5
10071: PUSH
10072: LD_INT 4
10074: PUSH
10075: LD_INT 3
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: PUSH
10084: LD_OWVAR 67
10088: ARRAY
10089: LESS
10090: MUL
10091: IFFALSE 10105
// AddMedal ( med2 , 1 ) else
10093: LD_STRING med2
10095: PPUSH
10096: LD_INT 1
10098: PPUSH
10099: CALL_OW 101
10103: GO 10179
// if flamethrowers < 3 then
10105: LD_EXP 7
10109: PUSH
10110: LD_INT 3
10112: LESS
10113: IFFALSE 10128
// AddMedal ( med2 , - 1 ) else
10115: LD_STRING med2
10117: PPUSH
10118: LD_INT 1
10120: NEG
10121: PPUSH
10122: CALL_OW 101
10126: GO 10179
// if not baseHill then
10128: LD_EXP 11
10132: NOT
10133: IFFALSE 10148
// AddMedal ( med2 , - 2 ) else
10135: LD_STRING med2
10137: PPUSH
10138: LD_INT 2
10140: NEG
10141: PPUSH
10142: CALL_OW 101
10146: GO 10179
// if not hannibalPath then
10148: LD_EXP 9
10152: NOT
10153: IFFALSE 10168
// AddMedal ( med2 , - 3 ) else
10155: LD_STRING med2
10157: PPUSH
10158: LD_INT 3
10160: NEG
10161: PPUSH
10162: CALL_OW 101
10166: GO 10179
// AddMedal ( med3 , - 2 ) ;
10168: LD_STRING med3
10170: PPUSH
10171: LD_INT 2
10173: NEG
10174: PPUSH
10175: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
10179: LD_EXP 14
10183: PPUSH
10184: LD_STRING 04_2_GaidarKilled
10186: PPUSH
10187: CALL_OW 39
// if gaidarKilled then
10191: LD_EXP 14
10195: IFFALSE 10209
// AddMedal ( med3 , 1 ) else
10197: LD_STRING med3
10199: PPUSH
10200: LD_INT 1
10202: PPUSH
10203: CALL_OW 101
10207: GO 10220
// AddMedal ( med3 , - 1 ) ;
10209: LD_STRING med3
10211: PPUSH
10212: LD_INT 1
10214: NEG
10215: PPUSH
10216: CALL_OW 101
// GiveMedals ( MAIN ) ;
10220: LD_STRING MAIN
10222: PPUSH
10223: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
10227: LD_INT 22
10229: PUSH
10230: LD_INT 2
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 3
10239: PUSH
10240: LD_INT 23
10242: PUSH
10243: LD_INT 0
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PPUSH
10258: CALL_OW 69
10262: PPUSH
10263: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
10267: LD_EXP 19
10271: PPUSH
10272: LD_STRING 04_2_Heike
10274: PPUSH
10275: CALL_OW 38
// if Aviradze then
10279: LD_EXP 29
10283: IFFALSE 10297
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
10285: LD_EXP 29
10289: PPUSH
10290: LD_STRING 04_2_Aviradze
10292: PPUSH
10293: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10297: LD_EXP 22
10301: IFFALSE 10318
10303: PUSH
10304: LD_EXP 22
10308: PPUSH
10309: CALL_OW 255
10313: PUSH
10314: LD_INT 2
10316: EQUAL
10317: AND
10318: IFFALSE 10348
// begin if ibrahimOnRuSide then
10320: LD_EXP 3
10324: IFFALSE 10336
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10326: LD_INT 1
10328: PPUSH
10329: LD_STRING 04_2_IbrahimJoined
10331: PPUSH
10332: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10336: LD_EXP 22
10340: PPUSH
10341: LD_STRING 04_2_Ibrahim
10343: PPUSH
10344: CALL_OW 38
// end ; if Kamil then
10348: LD_EXP 23
10352: IFFALSE 10366
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10354: LD_EXP 23
10358: PPUSH
10359: LD_STRING 04_2_Kamil
10361: PPUSH
10362: CALL_OW 38
// if Sophia then
10366: LD_EXP 25
10370: IFFALSE 10384
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10372: LD_EXP 25
10376: PPUSH
10377: LD_STRING 04_2_Sophia
10379: PPUSH
10380: CALL_OW 38
// if Kaia then
10384: LD_EXP 24
10388: IFFALSE 10402
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10390: LD_EXP 24
10394: PPUSH
10395: LD_STRING 04_2_Kaia
10397: PPUSH
10398: CALL_OW 38
// if Givi then
10402: LD_EXP 20
10406: IFFALSE 10420
// SaveCharacters ( Givi , 04_2_Givi ) ;
10408: LD_EXP 20
10412: PPUSH
10413: LD_STRING 04_2_Givi
10415: PPUSH
10416: CALL_OW 38
// if Mike then
10420: LD_EXP 21
10424: IFFALSE 10438
// SaveCharacters ( Mike , 04_2_Mike ) ;
10426: LD_EXP 21
10430: PPUSH
10431: LD_STRING 04_2_Mike
10433: PPUSH
10434: CALL_OW 38
// if Markov then
10438: LD_EXP 26
10442: IFFALSE 10456
// SaveCharacters ( Markov , 04_2_Markov ) ;
10444: LD_EXP 26
10448: PPUSH
10449: LD_STRING 04_2_Markov
10451: PPUSH
10452: CALL_OW 38
// if Kurt then
10456: LD_EXP 28
10460: IFFALSE 10474
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10462: LD_EXP 28
10466: PPUSH
10467: LD_STRING 04_2_Kurt
10469: PPUSH
10470: CALL_OW 38
// if heikeSecondSquad then
10474: LD_EXP 30
10478: IFFALSE 10492
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10480: LD_EXP 30
10484: PPUSH
10485: LD_STRING 04_2_others
10487: PPUSH
10488: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10492: LD_ADDR_VAR 0 1
10496: PUSH
10497: LD_INT 22
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 23
10509: PUSH
10510: LD_INT 0
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PPUSH
10521: CALL_OW 69
10525: ST_TO_ADDR
// if tmp then
10526: LD_VAR 0 1
10530: IFFALSE 10544
// SaveCharacters ( tmp , 04_2_apes ) ;
10532: LD_VAR 0 1
10536: PPUSH
10537: LD_STRING 04_2_apes
10539: PPUSH
10540: CALL_OW 38
// YouWin ;
10544: CALL_OW 103
// end ; end_of_file
10548: PPOPN 1
10550: END
// export globalGameSaveCounter ; every 0 0$1 do
10551: GO 10553
10553: DISABLE
// begin enable ;
10554: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10555: LD_STRING updateTimer(
10557: PUSH
10558: LD_OWVAR 1
10562: STR
10563: PUSH
10564: LD_STRING );
10566: STR
10567: PPUSH
10568: CALL_OW 559
// end ;
10572: END
// every 0 0$1 do
10573: GO 10575
10575: DISABLE
// begin globalGameSaveCounter := 0 ;
10576: LD_ADDR_EXP 44
10580: PUSH
10581: LD_INT 0
10583: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10584: LD_STRING setGameSaveCounter(0)
10586: PPUSH
10587: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10591: LD_STRING initStreamRollete();
10593: PPUSH
10594: CALL_OW 559
// InitStreamMode ;
10598: CALL 11943 0 0
// DefineStreamItems ( false ) ;
10602: LD_INT 0
10604: PPUSH
10605: CALL 12407 0 1
// end ;
10609: END
// export function SOS_MapStart ( ) ; begin
10610: LD_INT 0
10612: PPUSH
// if streamModeActive then
10613: LD_EXP 45
10617: IFFALSE 10626
// DefineStreamItems ( true ) ;
10619: LD_INT 1
10621: PPUSH
10622: CALL 12407 0 1
// UpdateLuaVariables ( ) ;
10626: CALL 10643 0 0
// UpdateFactoryWaypoints ( ) ;
10630: CALL 25529 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10634: CALL 25781 0 0
// end ;
10638: LD_VAR 0 1
10642: RET
// function UpdateLuaVariables ( ) ; begin
10643: LD_INT 0
10645: PPUSH
// if globalGameSaveCounter then
10646: LD_EXP 44
10650: IFFALSE 10684
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10652: LD_ADDR_EXP 44
10656: PUSH
10657: LD_EXP 44
10661: PPUSH
10662: CALL 72730 0 1
10666: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10667: LD_STRING setGameSaveCounter(
10669: PUSH
10670: LD_EXP 44
10674: STR
10675: PUSH
10676: LD_STRING )
10678: STR
10679: PPUSH
10680: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10684: LD_STRING setGameDifficulty(
10686: PUSH
10687: LD_OWVAR 67
10691: STR
10692: PUSH
10693: LD_STRING )
10695: STR
10696: PPUSH
10697: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10701: LD_STRING displayDifficulty(
10703: PUSH
10704: LD_OWVAR 67
10708: STR
10709: PUSH
10710: LD_STRING )
10712: STR
10713: PPUSH
10714: CALL_OW 559
// end ;
10718: LD_VAR 0 1
10722: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10723: LD_INT 0
10725: PPUSH
// if p2 = stream_mode then
10726: LD_VAR 0 2
10730: PUSH
10731: LD_INT 100
10733: EQUAL
10734: IFFALSE 11737
// begin if not StreamModeActive then
10736: LD_EXP 45
10740: NOT
10741: IFFALSE 10751
// StreamModeActive := true ;
10743: LD_ADDR_EXP 45
10747: PUSH
10748: LD_INT 1
10750: ST_TO_ADDR
// if p3 = 0 then
10751: LD_VAR 0 3
10755: PUSH
10756: LD_INT 0
10758: EQUAL
10759: IFFALSE 10765
// InitStreamMode ;
10761: CALL 11943 0 0
// if p3 = 1 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 1
10772: EQUAL
10773: IFFALSE 10783
// sRocket := true ;
10775: LD_ADDR_EXP 50
10779: PUSH
10780: LD_INT 1
10782: ST_TO_ADDR
// if p3 = 2 then
10783: LD_VAR 0 3
10787: PUSH
10788: LD_INT 2
10790: EQUAL
10791: IFFALSE 10801
// sSpeed := true ;
10793: LD_ADDR_EXP 49
10797: PUSH
10798: LD_INT 1
10800: ST_TO_ADDR
// if p3 = 3 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 3
10808: EQUAL
10809: IFFALSE 10819
// sEngine := true ;
10811: LD_ADDR_EXP 51
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// if p3 = 4 then
10819: LD_VAR 0 3
10823: PUSH
10824: LD_INT 4
10826: EQUAL
10827: IFFALSE 10837
// sSpec := true ;
10829: LD_ADDR_EXP 48
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if p3 = 5 then
10837: LD_VAR 0 3
10841: PUSH
10842: LD_INT 5
10844: EQUAL
10845: IFFALSE 10855
// sLevel := true ;
10847: LD_ADDR_EXP 52
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if p3 = 6 then
10855: LD_VAR 0 3
10859: PUSH
10860: LD_INT 6
10862: EQUAL
10863: IFFALSE 10873
// sArmoury := true ;
10865: LD_ADDR_EXP 53
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if p3 = 7 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 7
10880: EQUAL
10881: IFFALSE 10891
// sRadar := true ;
10883: LD_ADDR_EXP 54
10887: PUSH
10888: LD_INT 1
10890: ST_TO_ADDR
// if p3 = 8 then
10891: LD_VAR 0 3
10895: PUSH
10896: LD_INT 8
10898: EQUAL
10899: IFFALSE 10909
// sBunker := true ;
10901: LD_ADDR_EXP 55
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// if p3 = 9 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 9
10916: EQUAL
10917: IFFALSE 10927
// sHack := true ;
10919: LD_ADDR_EXP 56
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// if p3 = 10 then
10927: LD_VAR 0 3
10931: PUSH
10932: LD_INT 10
10934: EQUAL
10935: IFFALSE 10945
// sFire := true ;
10937: LD_ADDR_EXP 57
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// if p3 = 11 then
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 11
10952: EQUAL
10953: IFFALSE 10963
// sRefresh := true ;
10955: LD_ADDR_EXP 58
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// if p3 = 12 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 12
10970: EQUAL
10971: IFFALSE 10981
// sExp := true ;
10973: LD_ADDR_EXP 59
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// if p3 = 13 then
10981: LD_VAR 0 3
10985: PUSH
10986: LD_INT 13
10988: EQUAL
10989: IFFALSE 10999
// sDepot := true ;
10991: LD_ADDR_EXP 60
10995: PUSH
10996: LD_INT 1
10998: ST_TO_ADDR
// if p3 = 14 then
10999: LD_VAR 0 3
11003: PUSH
11004: LD_INT 14
11006: EQUAL
11007: IFFALSE 11017
// sFlag := true ;
11009: LD_ADDR_EXP 61
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// if p3 = 15 then
11017: LD_VAR 0 3
11021: PUSH
11022: LD_INT 15
11024: EQUAL
11025: IFFALSE 11035
// sKamikadze := true ;
11027: LD_ADDR_EXP 69
11031: PUSH
11032: LD_INT 1
11034: ST_TO_ADDR
// if p3 = 16 then
11035: LD_VAR 0 3
11039: PUSH
11040: LD_INT 16
11042: EQUAL
11043: IFFALSE 11053
// sTroll := true ;
11045: LD_ADDR_EXP 70
11049: PUSH
11050: LD_INT 1
11052: ST_TO_ADDR
// if p3 = 17 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 17
11060: EQUAL
11061: IFFALSE 11071
// sSlow := true ;
11063: LD_ADDR_EXP 71
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// if p3 = 18 then
11071: LD_VAR 0 3
11075: PUSH
11076: LD_INT 18
11078: EQUAL
11079: IFFALSE 11089
// sLack := true ;
11081: LD_ADDR_EXP 72
11085: PUSH
11086: LD_INT 1
11088: ST_TO_ADDR
// if p3 = 19 then
11089: LD_VAR 0 3
11093: PUSH
11094: LD_INT 19
11096: EQUAL
11097: IFFALSE 11107
// sTank := true ;
11099: LD_ADDR_EXP 74
11103: PUSH
11104: LD_INT 1
11106: ST_TO_ADDR
// if p3 = 20 then
11107: LD_VAR 0 3
11111: PUSH
11112: LD_INT 20
11114: EQUAL
11115: IFFALSE 11125
// sRemote := true ;
11117: LD_ADDR_EXP 75
11121: PUSH
11122: LD_INT 1
11124: ST_TO_ADDR
// if p3 = 21 then
11125: LD_VAR 0 3
11129: PUSH
11130: LD_INT 21
11132: EQUAL
11133: IFFALSE 11143
// sPowell := true ;
11135: LD_ADDR_EXP 76
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// if p3 = 22 then
11143: LD_VAR 0 3
11147: PUSH
11148: LD_INT 22
11150: EQUAL
11151: IFFALSE 11161
// sTeleport := true ;
11153: LD_ADDR_EXP 79
11157: PUSH
11158: LD_INT 1
11160: ST_TO_ADDR
// if p3 = 23 then
11161: LD_VAR 0 3
11165: PUSH
11166: LD_INT 23
11168: EQUAL
11169: IFFALSE 11179
// sOilTower := true ;
11171: LD_ADDR_EXP 81
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// if p3 = 24 then
11179: LD_VAR 0 3
11183: PUSH
11184: LD_INT 24
11186: EQUAL
11187: IFFALSE 11197
// sShovel := true ;
11189: LD_ADDR_EXP 82
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// if p3 = 25 then
11197: LD_VAR 0 3
11201: PUSH
11202: LD_INT 25
11204: EQUAL
11205: IFFALSE 11215
// sSheik := true ;
11207: LD_ADDR_EXP 83
11211: PUSH
11212: LD_INT 1
11214: ST_TO_ADDR
// if p3 = 26 then
11215: LD_VAR 0 3
11219: PUSH
11220: LD_INT 26
11222: EQUAL
11223: IFFALSE 11233
// sEarthquake := true ;
11225: LD_ADDR_EXP 85
11229: PUSH
11230: LD_INT 1
11232: ST_TO_ADDR
// if p3 = 27 then
11233: LD_VAR 0 3
11237: PUSH
11238: LD_INT 27
11240: EQUAL
11241: IFFALSE 11251
// sAI := true ;
11243: LD_ADDR_EXP 86
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// if p3 = 28 then
11251: LD_VAR 0 3
11255: PUSH
11256: LD_INT 28
11258: EQUAL
11259: IFFALSE 11269
// sCargo := true ;
11261: LD_ADDR_EXP 89
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// if p3 = 29 then
11269: LD_VAR 0 3
11273: PUSH
11274: LD_INT 29
11276: EQUAL
11277: IFFALSE 11287
// sDLaser := true ;
11279: LD_ADDR_EXP 90
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if p3 = 30 then
11287: LD_VAR 0 3
11291: PUSH
11292: LD_INT 30
11294: EQUAL
11295: IFFALSE 11305
// sExchange := true ;
11297: LD_ADDR_EXP 91
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// if p3 = 31 then
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 31
11312: EQUAL
11313: IFFALSE 11323
// sFac := true ;
11315: LD_ADDR_EXP 92
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// if p3 = 32 then
11323: LD_VAR 0 3
11327: PUSH
11328: LD_INT 32
11330: EQUAL
11331: IFFALSE 11341
// sPower := true ;
11333: LD_ADDR_EXP 93
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// if p3 = 33 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 33
11348: EQUAL
11349: IFFALSE 11359
// sRandom := true ;
11351: LD_ADDR_EXP 94
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if p3 = 34 then
11359: LD_VAR 0 3
11363: PUSH
11364: LD_INT 34
11366: EQUAL
11367: IFFALSE 11377
// sShield := true ;
11369: LD_ADDR_EXP 95
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// if p3 = 35 then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 35
11384: EQUAL
11385: IFFALSE 11395
// sTime := true ;
11387: LD_ADDR_EXP 96
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// if p3 = 36 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 36
11402: EQUAL
11403: IFFALSE 11413
// sTools := true ;
11405: LD_ADDR_EXP 97
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// if p3 = 101 then
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 101
11420: EQUAL
11421: IFFALSE 11431
// sSold := true ;
11423: LD_ADDR_EXP 62
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if p3 = 102 then
11431: LD_VAR 0 3
11435: PUSH
11436: LD_INT 102
11438: EQUAL
11439: IFFALSE 11449
// sDiff := true ;
11441: LD_ADDR_EXP 63
11445: PUSH
11446: LD_INT 1
11448: ST_TO_ADDR
// if p3 = 103 then
11449: LD_VAR 0 3
11453: PUSH
11454: LD_INT 103
11456: EQUAL
11457: IFFALSE 11467
// sFog := true ;
11459: LD_ADDR_EXP 66
11463: PUSH
11464: LD_INT 1
11466: ST_TO_ADDR
// if p3 = 104 then
11467: LD_VAR 0 3
11471: PUSH
11472: LD_INT 104
11474: EQUAL
11475: IFFALSE 11485
// sReset := true ;
11477: LD_ADDR_EXP 67
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// if p3 = 105 then
11485: LD_VAR 0 3
11489: PUSH
11490: LD_INT 105
11492: EQUAL
11493: IFFALSE 11503
// sSun := true ;
11495: LD_ADDR_EXP 68
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// if p3 = 106 then
11503: LD_VAR 0 3
11507: PUSH
11508: LD_INT 106
11510: EQUAL
11511: IFFALSE 11521
// sTiger := true ;
11513: LD_ADDR_EXP 64
11517: PUSH
11518: LD_INT 1
11520: ST_TO_ADDR
// if p3 = 107 then
11521: LD_VAR 0 3
11525: PUSH
11526: LD_INT 107
11528: EQUAL
11529: IFFALSE 11539
// sBomb := true ;
11531: LD_ADDR_EXP 65
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// if p3 = 108 then
11539: LD_VAR 0 3
11543: PUSH
11544: LD_INT 108
11546: EQUAL
11547: IFFALSE 11557
// sWound := true ;
11549: LD_ADDR_EXP 73
11553: PUSH
11554: LD_INT 1
11556: ST_TO_ADDR
// if p3 = 109 then
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 109
11564: EQUAL
11565: IFFALSE 11575
// sBetray := true ;
11567: LD_ADDR_EXP 77
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// if p3 = 110 then
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 110
11582: EQUAL
11583: IFFALSE 11593
// sContamin := true ;
11585: LD_ADDR_EXP 78
11589: PUSH
11590: LD_INT 1
11592: ST_TO_ADDR
// if p3 = 111 then
11593: LD_VAR 0 3
11597: PUSH
11598: LD_INT 111
11600: EQUAL
11601: IFFALSE 11611
// sOil := true ;
11603: LD_ADDR_EXP 80
11607: PUSH
11608: LD_INT 1
11610: ST_TO_ADDR
// if p3 = 112 then
11611: LD_VAR 0 3
11615: PUSH
11616: LD_INT 112
11618: EQUAL
11619: IFFALSE 11629
// sStu := true ;
11621: LD_ADDR_EXP 84
11625: PUSH
11626: LD_INT 1
11628: ST_TO_ADDR
// if p3 = 113 then
11629: LD_VAR 0 3
11633: PUSH
11634: LD_INT 113
11636: EQUAL
11637: IFFALSE 11647
// sBazooka := true ;
11639: LD_ADDR_EXP 87
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// if p3 = 114 then
11647: LD_VAR 0 3
11651: PUSH
11652: LD_INT 114
11654: EQUAL
11655: IFFALSE 11665
// sMortar := true ;
11657: LD_ADDR_EXP 88
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// if p3 = 115 then
11665: LD_VAR 0 3
11669: PUSH
11670: LD_INT 115
11672: EQUAL
11673: IFFALSE 11683
// sRanger := true ;
11675: LD_ADDR_EXP 98
11679: PUSH
11680: LD_INT 1
11682: ST_TO_ADDR
// if p3 = 116 then
11683: LD_VAR 0 3
11687: PUSH
11688: LD_INT 116
11690: EQUAL
11691: IFFALSE 11701
// sComputer := true ;
11693: LD_ADDR_EXP 99
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// if p3 = 117 then
11701: LD_VAR 0 3
11705: PUSH
11706: LD_INT 117
11708: EQUAL
11709: IFFALSE 11719
// s30 := true ;
11711: LD_ADDR_EXP 100
11715: PUSH
11716: LD_INT 1
11718: ST_TO_ADDR
// if p3 = 118 then
11719: LD_VAR 0 3
11723: PUSH
11724: LD_INT 118
11726: EQUAL
11727: IFFALSE 11737
// s60 := true ;
11729: LD_ADDR_EXP 101
11733: PUSH
11734: LD_INT 1
11736: ST_TO_ADDR
// end ; if p2 = hack_mode then
11737: LD_VAR 0 2
11741: PUSH
11742: LD_INT 101
11744: EQUAL
11745: IFFALSE 11873
// begin case p3 of 1 :
11747: LD_VAR 0 3
11751: PUSH
11752: LD_INT 1
11754: DOUBLE
11755: EQUAL
11756: IFTRUE 11760
11758: GO 11767
11760: POP
// hHackUnlimitedResources ; 2 :
11761: CALL 24136 0 0
11765: GO 11873
11767: LD_INT 2
11769: DOUBLE
11770: EQUAL
11771: IFTRUE 11775
11773: GO 11782
11775: POP
// hHackSetLevel10 ; 3 :
11776: CALL 24269 0 0
11780: GO 11873
11782: LD_INT 3
11784: DOUBLE
11785: EQUAL
11786: IFTRUE 11790
11788: GO 11797
11790: POP
// hHackSetLevel10YourUnits ; 4 :
11791: CALL 24354 0 0
11795: GO 11873
11797: LD_INT 4
11799: DOUBLE
11800: EQUAL
11801: IFTRUE 11805
11803: GO 11812
11805: POP
// hHackInvincible ; 5 :
11806: CALL 24802 0 0
11810: GO 11873
11812: LD_INT 5
11814: DOUBLE
11815: EQUAL
11816: IFTRUE 11820
11818: GO 11827
11820: POP
// hHackInvisible ; 6 :
11821: CALL 24913 0 0
11825: GO 11873
11827: LD_INT 6
11829: DOUBLE
11830: EQUAL
11831: IFTRUE 11835
11833: GO 11842
11835: POP
// hHackChangeYourSide ; 7 :
11836: CALL 24970 0 0
11840: GO 11873
11842: LD_INT 7
11844: DOUBLE
11845: EQUAL
11846: IFTRUE 11850
11848: GO 11857
11850: POP
// hHackChangeUnitSide ; 8 :
11851: CALL 25012 0 0
11855: GO 11873
11857: LD_INT 8
11859: DOUBLE
11860: EQUAL
11861: IFTRUE 11865
11863: GO 11872
11865: POP
// hHackFog ; end ;
11866: CALL 25113 0 0
11870: GO 11873
11872: POP
// end ; if p2 = game_save_mode then
11873: LD_VAR 0 2
11877: PUSH
11878: LD_INT 102
11880: EQUAL
11881: IFFALSE 11938
// begin if p3 = 1 then
11883: LD_VAR 0 3
11887: PUSH
11888: LD_INT 1
11890: EQUAL
11891: IFFALSE 11903
// globalGameSaveCounter := p4 ;
11893: LD_ADDR_EXP 44
11897: PUSH
11898: LD_VAR 0 4
11902: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 2
11910: EQUAL
11911: IFFALSE 11919
11913: PUSH
11914: LD_EXP 44
11918: AND
11919: IFFALSE 11938
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11921: LD_STRING setGameSaveCounter(
11923: PUSH
11924: LD_EXP 44
11928: STR
11929: PUSH
11930: LD_STRING )
11932: STR
11933: PPUSH
11934: CALL_OW 559
// end ; end ;
11938: LD_VAR 0 7
11942: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11943: LD_INT 0
11945: PPUSH
// streamModeActive := false ;
11946: LD_ADDR_EXP 45
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// normalCounter := 36 ;
11954: LD_ADDR_EXP 46
11958: PUSH
11959: LD_INT 36
11961: ST_TO_ADDR
// hardcoreCounter := 18 ;
11962: LD_ADDR_EXP 47
11966: PUSH
11967: LD_INT 18
11969: ST_TO_ADDR
// sRocket := false ;
11970: LD_ADDR_EXP 50
11974: PUSH
11975: LD_INT 0
11977: ST_TO_ADDR
// sSpeed := false ;
11978: LD_ADDR_EXP 49
11982: PUSH
11983: LD_INT 0
11985: ST_TO_ADDR
// sEngine := false ;
11986: LD_ADDR_EXP 51
11990: PUSH
11991: LD_INT 0
11993: ST_TO_ADDR
// sSpec := false ;
11994: LD_ADDR_EXP 48
11998: PUSH
11999: LD_INT 0
12001: ST_TO_ADDR
// sLevel := false ;
12002: LD_ADDR_EXP 52
12006: PUSH
12007: LD_INT 0
12009: ST_TO_ADDR
// sArmoury := false ;
12010: LD_ADDR_EXP 53
12014: PUSH
12015: LD_INT 0
12017: ST_TO_ADDR
// sRadar := false ;
12018: LD_ADDR_EXP 54
12022: PUSH
12023: LD_INT 0
12025: ST_TO_ADDR
// sBunker := false ;
12026: LD_ADDR_EXP 55
12030: PUSH
12031: LD_INT 0
12033: ST_TO_ADDR
// sHack := false ;
12034: LD_ADDR_EXP 56
12038: PUSH
12039: LD_INT 0
12041: ST_TO_ADDR
// sFire := false ;
12042: LD_ADDR_EXP 57
12046: PUSH
12047: LD_INT 0
12049: ST_TO_ADDR
// sRefresh := false ;
12050: LD_ADDR_EXP 58
12054: PUSH
12055: LD_INT 0
12057: ST_TO_ADDR
// sExp := false ;
12058: LD_ADDR_EXP 59
12062: PUSH
12063: LD_INT 0
12065: ST_TO_ADDR
// sDepot := false ;
12066: LD_ADDR_EXP 60
12070: PUSH
12071: LD_INT 0
12073: ST_TO_ADDR
// sFlag := false ;
12074: LD_ADDR_EXP 61
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// sKamikadze := false ;
12082: LD_ADDR_EXP 69
12086: PUSH
12087: LD_INT 0
12089: ST_TO_ADDR
// sTroll := false ;
12090: LD_ADDR_EXP 70
12094: PUSH
12095: LD_INT 0
12097: ST_TO_ADDR
// sSlow := false ;
12098: LD_ADDR_EXP 71
12102: PUSH
12103: LD_INT 0
12105: ST_TO_ADDR
// sLack := false ;
12106: LD_ADDR_EXP 72
12110: PUSH
12111: LD_INT 0
12113: ST_TO_ADDR
// sTank := false ;
12114: LD_ADDR_EXP 74
12118: PUSH
12119: LD_INT 0
12121: ST_TO_ADDR
// sRemote := false ;
12122: LD_ADDR_EXP 75
12126: PUSH
12127: LD_INT 0
12129: ST_TO_ADDR
// sPowell := false ;
12130: LD_ADDR_EXP 76
12134: PUSH
12135: LD_INT 0
12137: ST_TO_ADDR
// sTeleport := false ;
12138: LD_ADDR_EXP 79
12142: PUSH
12143: LD_INT 0
12145: ST_TO_ADDR
// sOilTower := false ;
12146: LD_ADDR_EXP 81
12150: PUSH
12151: LD_INT 0
12153: ST_TO_ADDR
// sShovel := false ;
12154: LD_ADDR_EXP 82
12158: PUSH
12159: LD_INT 0
12161: ST_TO_ADDR
// sSheik := false ;
12162: LD_ADDR_EXP 83
12166: PUSH
12167: LD_INT 0
12169: ST_TO_ADDR
// sEarthquake := false ;
12170: LD_ADDR_EXP 85
12174: PUSH
12175: LD_INT 0
12177: ST_TO_ADDR
// sAI := false ;
12178: LD_ADDR_EXP 86
12182: PUSH
12183: LD_INT 0
12185: ST_TO_ADDR
// sCargo := false ;
12186: LD_ADDR_EXP 89
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// sDLaser := false ;
12194: LD_ADDR_EXP 90
12198: PUSH
12199: LD_INT 0
12201: ST_TO_ADDR
// sExchange := false ;
12202: LD_ADDR_EXP 91
12206: PUSH
12207: LD_INT 0
12209: ST_TO_ADDR
// sFac := false ;
12210: LD_ADDR_EXP 92
12214: PUSH
12215: LD_INT 0
12217: ST_TO_ADDR
// sPower := false ;
12218: LD_ADDR_EXP 93
12222: PUSH
12223: LD_INT 0
12225: ST_TO_ADDR
// sRandom := false ;
12226: LD_ADDR_EXP 94
12230: PUSH
12231: LD_INT 0
12233: ST_TO_ADDR
// sShield := false ;
12234: LD_ADDR_EXP 95
12238: PUSH
12239: LD_INT 0
12241: ST_TO_ADDR
// sTime := false ;
12242: LD_ADDR_EXP 96
12246: PUSH
12247: LD_INT 0
12249: ST_TO_ADDR
// sTools := false ;
12250: LD_ADDR_EXP 97
12254: PUSH
12255: LD_INT 0
12257: ST_TO_ADDR
// sSold := false ;
12258: LD_ADDR_EXP 62
12262: PUSH
12263: LD_INT 0
12265: ST_TO_ADDR
// sDiff := false ;
12266: LD_ADDR_EXP 63
12270: PUSH
12271: LD_INT 0
12273: ST_TO_ADDR
// sFog := false ;
12274: LD_ADDR_EXP 66
12278: PUSH
12279: LD_INT 0
12281: ST_TO_ADDR
// sReset := false ;
12282: LD_ADDR_EXP 67
12286: PUSH
12287: LD_INT 0
12289: ST_TO_ADDR
// sSun := false ;
12290: LD_ADDR_EXP 68
12294: PUSH
12295: LD_INT 0
12297: ST_TO_ADDR
// sTiger := false ;
12298: LD_ADDR_EXP 64
12302: PUSH
12303: LD_INT 0
12305: ST_TO_ADDR
// sBomb := false ;
12306: LD_ADDR_EXP 65
12310: PUSH
12311: LD_INT 0
12313: ST_TO_ADDR
// sWound := false ;
12314: LD_ADDR_EXP 73
12318: PUSH
12319: LD_INT 0
12321: ST_TO_ADDR
// sBetray := false ;
12322: LD_ADDR_EXP 77
12326: PUSH
12327: LD_INT 0
12329: ST_TO_ADDR
// sContamin := false ;
12330: LD_ADDR_EXP 78
12334: PUSH
12335: LD_INT 0
12337: ST_TO_ADDR
// sOil := false ;
12338: LD_ADDR_EXP 80
12342: PUSH
12343: LD_INT 0
12345: ST_TO_ADDR
// sStu := false ;
12346: LD_ADDR_EXP 84
12350: PUSH
12351: LD_INT 0
12353: ST_TO_ADDR
// sBazooka := false ;
12354: LD_ADDR_EXP 87
12358: PUSH
12359: LD_INT 0
12361: ST_TO_ADDR
// sMortar := false ;
12362: LD_ADDR_EXP 88
12366: PUSH
12367: LD_INT 0
12369: ST_TO_ADDR
// sRanger := false ;
12370: LD_ADDR_EXP 98
12374: PUSH
12375: LD_INT 0
12377: ST_TO_ADDR
// sComputer := false ;
12378: LD_ADDR_EXP 99
12382: PUSH
12383: LD_INT 0
12385: ST_TO_ADDR
// s30 := false ;
12386: LD_ADDR_EXP 100
12390: PUSH
12391: LD_INT 0
12393: ST_TO_ADDR
// s60 := false ;
12394: LD_ADDR_EXP 101
12398: PUSH
12399: LD_INT 0
12401: ST_TO_ADDR
// end ;
12402: LD_VAR 0 1
12406: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12407: LD_INT 0
12409: PPUSH
12410: PPUSH
12411: PPUSH
12412: PPUSH
12413: PPUSH
12414: PPUSH
12415: PPUSH
// result := [ ] ;
12416: LD_ADDR_VAR 0 2
12420: PUSH
12421: EMPTY
12422: ST_TO_ADDR
// if campaign_id = 1 then
12423: LD_OWVAR 69
12427: PUSH
12428: LD_INT 1
12430: EQUAL
12431: IFFALSE 15597
// begin case mission_number of 1 :
12433: LD_OWVAR 70
12437: PUSH
12438: LD_INT 1
12440: DOUBLE
12441: EQUAL
12442: IFTRUE 12446
12444: GO 12522
12446: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: LD_INT 2
12454: PUSH
12455: LD_INT 4
12457: PUSH
12458: LD_INT 11
12460: PUSH
12461: LD_INT 12
12463: PUSH
12464: LD_INT 15
12466: PUSH
12467: LD_INT 16
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_INT 23
12475: PUSH
12476: LD_INT 26
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 101
12492: PUSH
12493: LD_INT 102
12495: PUSH
12496: LD_INT 106
12498: PUSH
12499: LD_INT 116
12501: PUSH
12502: LD_INT 117
12504: PUSH
12505: LD_INT 118
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: ST_TO_ADDR
12520: GO 15595
12522: LD_INT 2
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12614
12530: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12531: LD_ADDR_VAR 0 2
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: LD_INT 4
12541: PUSH
12542: LD_INT 11
12544: PUSH
12545: LD_INT 12
12547: PUSH
12548: LD_INT 15
12550: PUSH
12551: LD_INT 16
12553: PUSH
12554: LD_INT 22
12556: PUSH
12557: LD_INT 23
12559: PUSH
12560: LD_INT 26
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 101
12576: PUSH
12577: LD_INT 102
12579: PUSH
12580: LD_INT 105
12582: PUSH
12583: LD_INT 106
12585: PUSH
12586: LD_INT 108
12588: PUSH
12589: LD_INT 116
12591: PUSH
12592: LD_INT 117
12594: PUSH
12595: LD_INT 118
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: ST_TO_ADDR
12612: GO 15595
12614: LD_INT 3
12616: DOUBLE
12617: EQUAL
12618: IFTRUE 12622
12620: GO 12710
12622: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12623: LD_ADDR_VAR 0 2
12627: PUSH
12628: LD_INT 2
12630: PUSH
12631: LD_INT 4
12633: PUSH
12634: LD_INT 5
12636: PUSH
12637: LD_INT 11
12639: PUSH
12640: LD_INT 12
12642: PUSH
12643: LD_INT 15
12645: PUSH
12646: LD_INT 16
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_INT 26
12654: PUSH
12655: LD_INT 36
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 101
12672: PUSH
12673: LD_INT 102
12675: PUSH
12676: LD_INT 105
12678: PUSH
12679: LD_INT 106
12681: PUSH
12682: LD_INT 108
12684: PUSH
12685: LD_INT 116
12687: PUSH
12688: LD_INT 117
12690: PUSH
12691: LD_INT 118
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: ST_TO_ADDR
12708: GO 15595
12710: LD_INT 4
12712: DOUBLE
12713: EQUAL
12714: IFTRUE 12718
12716: GO 12814
12718: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12719: LD_ADDR_VAR 0 2
12723: PUSH
12724: LD_INT 2
12726: PUSH
12727: LD_INT 4
12729: PUSH
12730: LD_INT 5
12732: PUSH
12733: LD_INT 8
12735: PUSH
12736: LD_INT 11
12738: PUSH
12739: LD_INT 12
12741: PUSH
12742: LD_INT 15
12744: PUSH
12745: LD_INT 16
12747: PUSH
12748: LD_INT 22
12750: PUSH
12751: LD_INT 23
12753: PUSH
12754: LD_INT 26
12756: PUSH
12757: LD_INT 36
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 101
12776: PUSH
12777: LD_INT 102
12779: PUSH
12780: LD_INT 105
12782: PUSH
12783: LD_INT 106
12785: PUSH
12786: LD_INT 108
12788: PUSH
12789: LD_INT 116
12791: PUSH
12792: LD_INT 117
12794: PUSH
12795: LD_INT 118
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: ST_TO_ADDR
12812: GO 15595
12814: LD_INT 5
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12934
12822: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12823: LD_ADDR_VAR 0 2
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: LD_INT 4
12833: PUSH
12834: LD_INT 5
12836: PUSH
12837: LD_INT 6
12839: PUSH
12840: LD_INT 8
12842: PUSH
12843: LD_INT 11
12845: PUSH
12846: LD_INT 12
12848: PUSH
12849: LD_INT 15
12851: PUSH
12852: LD_INT 16
12854: PUSH
12855: LD_INT 22
12857: PUSH
12858: LD_INT 23
12860: PUSH
12861: LD_INT 25
12863: PUSH
12864: LD_INT 26
12866: PUSH
12867: LD_INT 36
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 101
12888: PUSH
12889: LD_INT 102
12891: PUSH
12892: LD_INT 105
12894: PUSH
12895: LD_INT 106
12897: PUSH
12898: LD_INT 108
12900: PUSH
12901: LD_INT 109
12903: PUSH
12904: LD_INT 112
12906: PUSH
12907: LD_INT 116
12909: PUSH
12910: LD_INT 117
12912: PUSH
12913: LD_INT 118
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: ST_TO_ADDR
12932: GO 15595
12934: LD_INT 6
12936: DOUBLE
12937: EQUAL
12938: IFTRUE 12942
12940: GO 13074
12942: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12943: LD_ADDR_VAR 0 2
12947: PUSH
12948: LD_INT 2
12950: PUSH
12951: LD_INT 4
12953: PUSH
12954: LD_INT 5
12956: PUSH
12957: LD_INT 6
12959: PUSH
12960: LD_INT 8
12962: PUSH
12963: LD_INT 11
12965: PUSH
12966: LD_INT 12
12968: PUSH
12969: LD_INT 15
12971: PUSH
12972: LD_INT 16
12974: PUSH
12975: LD_INT 20
12977: PUSH
12978: LD_INT 21
12980: PUSH
12981: LD_INT 22
12983: PUSH
12984: LD_INT 23
12986: PUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 26
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: LD_INT 32
13001: PUSH
13002: LD_INT 36
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 101
13028: PUSH
13029: LD_INT 102
13031: PUSH
13032: LD_INT 105
13034: PUSH
13035: LD_INT 106
13037: PUSH
13038: LD_INT 108
13040: PUSH
13041: LD_INT 109
13043: PUSH
13044: LD_INT 112
13046: PUSH
13047: LD_INT 116
13049: PUSH
13050: LD_INT 117
13052: PUSH
13053: LD_INT 118
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: ST_TO_ADDR
13072: GO 15595
13074: LD_INT 7
13076: DOUBLE
13077: EQUAL
13078: IFTRUE 13082
13080: GO 13194
13082: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13083: LD_ADDR_VAR 0 2
13087: PUSH
13088: LD_INT 2
13090: PUSH
13091: LD_INT 4
13093: PUSH
13094: LD_INT 5
13096: PUSH
13097: LD_INT 7
13099: PUSH
13100: LD_INT 11
13102: PUSH
13103: LD_INT 12
13105: PUSH
13106: LD_INT 15
13108: PUSH
13109: LD_INT 16
13111: PUSH
13112: LD_INT 20
13114: PUSH
13115: LD_INT 21
13117: PUSH
13118: LD_INT 22
13120: PUSH
13121: LD_INT 23
13123: PUSH
13124: LD_INT 25
13126: PUSH
13127: LD_INT 26
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 101
13148: PUSH
13149: LD_INT 102
13151: PUSH
13152: LD_INT 103
13154: PUSH
13155: LD_INT 105
13157: PUSH
13158: LD_INT 106
13160: PUSH
13161: LD_INT 108
13163: PUSH
13164: LD_INT 112
13166: PUSH
13167: LD_INT 116
13169: PUSH
13170: LD_INT 117
13172: PUSH
13173: LD_INT 118
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: ST_TO_ADDR
13192: GO 15595
13194: LD_INT 8
13196: DOUBLE
13197: EQUAL
13198: IFTRUE 13202
13200: GO 13342
13202: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13203: LD_ADDR_VAR 0 2
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: LD_INT 4
13213: PUSH
13214: LD_INT 5
13216: PUSH
13217: LD_INT 6
13219: PUSH
13220: LD_INT 7
13222: PUSH
13223: LD_INT 8
13225: PUSH
13226: LD_INT 11
13228: PUSH
13229: LD_INT 12
13231: PUSH
13232: LD_INT 15
13234: PUSH
13235: LD_INT 16
13237: PUSH
13238: LD_INT 20
13240: PUSH
13241: LD_INT 21
13243: PUSH
13244: LD_INT 22
13246: PUSH
13247: LD_INT 23
13249: PUSH
13250: LD_INT 25
13252: PUSH
13253: LD_INT 26
13255: PUSH
13256: LD_INT 30
13258: PUSH
13259: LD_INT 31
13261: PUSH
13262: LD_INT 32
13264: PUSH
13265: LD_INT 36
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 101
13292: PUSH
13293: LD_INT 102
13295: PUSH
13296: LD_INT 103
13298: PUSH
13299: LD_INT 105
13301: PUSH
13302: LD_INT 106
13304: PUSH
13305: LD_INT 108
13307: PUSH
13308: LD_INT 109
13310: PUSH
13311: LD_INT 112
13313: PUSH
13314: LD_INT 116
13316: PUSH
13317: LD_INT 117
13319: PUSH
13320: LD_INT 118
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: ST_TO_ADDR
13340: GO 15595
13342: LD_INT 9
13344: DOUBLE
13345: EQUAL
13346: IFTRUE 13350
13348: GO 13498
13350: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: LD_INT 2
13358: PUSH
13359: LD_INT 4
13361: PUSH
13362: LD_INT 5
13364: PUSH
13365: LD_INT 6
13367: PUSH
13368: LD_INT 7
13370: PUSH
13371: LD_INT 8
13373: PUSH
13374: LD_INT 11
13376: PUSH
13377: LD_INT 12
13379: PUSH
13380: LD_INT 15
13382: PUSH
13383: LD_INT 16
13385: PUSH
13386: LD_INT 20
13388: PUSH
13389: LD_INT 21
13391: PUSH
13392: LD_INT 22
13394: PUSH
13395: LD_INT 23
13397: PUSH
13398: LD_INT 25
13400: PUSH
13401: LD_INT 26
13403: PUSH
13404: LD_INT 28
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 31
13412: PUSH
13413: LD_INT 32
13415: PUSH
13416: LD_INT 36
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 101
13444: PUSH
13445: LD_INT 102
13447: PUSH
13448: LD_INT 103
13450: PUSH
13451: LD_INT 105
13453: PUSH
13454: LD_INT 106
13456: PUSH
13457: LD_INT 108
13459: PUSH
13460: LD_INT 109
13462: PUSH
13463: LD_INT 112
13465: PUSH
13466: LD_INT 114
13468: PUSH
13469: LD_INT 116
13471: PUSH
13472: LD_INT 117
13474: PUSH
13475: LD_INT 118
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: ST_TO_ADDR
13496: GO 15595
13498: LD_INT 10
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13702
13506: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13507: LD_ADDR_VAR 0 2
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 4
13517: PUSH
13518: LD_INT 5
13520: PUSH
13521: LD_INT 6
13523: PUSH
13524: LD_INT 7
13526: PUSH
13527: LD_INT 8
13529: PUSH
13530: LD_INT 9
13532: PUSH
13533: LD_INT 10
13535: PUSH
13536: LD_INT 11
13538: PUSH
13539: LD_INT 12
13541: PUSH
13542: LD_INT 13
13544: PUSH
13545: LD_INT 14
13547: PUSH
13548: LD_INT 15
13550: PUSH
13551: LD_INT 16
13553: PUSH
13554: LD_INT 17
13556: PUSH
13557: LD_INT 18
13559: PUSH
13560: LD_INT 19
13562: PUSH
13563: LD_INT 20
13565: PUSH
13566: LD_INT 21
13568: PUSH
13569: LD_INT 22
13571: PUSH
13572: LD_INT 23
13574: PUSH
13575: LD_INT 24
13577: PUSH
13578: LD_INT 25
13580: PUSH
13581: LD_INT 26
13583: PUSH
13584: LD_INT 28
13586: PUSH
13587: LD_INT 30
13589: PUSH
13590: LD_INT 31
13592: PUSH
13593: LD_INT 32
13595: PUSH
13596: LD_INT 36
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 101
13632: PUSH
13633: LD_INT 102
13635: PUSH
13636: LD_INT 103
13638: PUSH
13639: LD_INT 104
13641: PUSH
13642: LD_INT 105
13644: PUSH
13645: LD_INT 106
13647: PUSH
13648: LD_INT 107
13650: PUSH
13651: LD_INT 108
13653: PUSH
13654: LD_INT 109
13656: PUSH
13657: LD_INT 110
13659: PUSH
13660: LD_INT 111
13662: PUSH
13663: LD_INT 112
13665: PUSH
13666: LD_INT 114
13668: PUSH
13669: LD_INT 116
13671: PUSH
13672: LD_INT 117
13674: PUSH
13675: LD_INT 118
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: ST_TO_ADDR
13700: GO 15595
13702: LD_INT 11
13704: DOUBLE
13705: EQUAL
13706: IFTRUE 13710
13708: GO 13914
13710: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13711: LD_ADDR_VAR 0 2
13715: PUSH
13716: LD_INT 2
13718: PUSH
13719: LD_INT 3
13721: PUSH
13722: LD_INT 4
13724: PUSH
13725: LD_INT 5
13727: PUSH
13728: LD_INT 6
13730: PUSH
13731: LD_INT 7
13733: PUSH
13734: LD_INT 8
13736: PUSH
13737: LD_INT 9
13739: PUSH
13740: LD_INT 10
13742: PUSH
13743: LD_INT 11
13745: PUSH
13746: LD_INT 12
13748: PUSH
13749: LD_INT 13
13751: PUSH
13752: LD_INT 14
13754: PUSH
13755: LD_INT 15
13757: PUSH
13758: LD_INT 16
13760: PUSH
13761: LD_INT 17
13763: PUSH
13764: LD_INT 18
13766: PUSH
13767: LD_INT 19
13769: PUSH
13770: LD_INT 20
13772: PUSH
13773: LD_INT 21
13775: PUSH
13776: LD_INT 22
13778: PUSH
13779: LD_INT 23
13781: PUSH
13782: LD_INT 24
13784: PUSH
13785: LD_INT 25
13787: PUSH
13788: LD_INT 26
13790: PUSH
13791: LD_INT 28
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_INT 31
13799: PUSH
13800: LD_INT 32
13802: PUSH
13803: LD_INT 34
13805: PUSH
13806: LD_INT 36
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 101
13844: PUSH
13845: LD_INT 102
13847: PUSH
13848: LD_INT 103
13850: PUSH
13851: LD_INT 104
13853: PUSH
13854: LD_INT 105
13856: PUSH
13857: LD_INT 106
13859: PUSH
13860: LD_INT 107
13862: PUSH
13863: LD_INT 108
13865: PUSH
13866: LD_INT 109
13868: PUSH
13869: LD_INT 110
13871: PUSH
13872: LD_INT 111
13874: PUSH
13875: LD_INT 112
13877: PUSH
13878: LD_INT 114
13880: PUSH
13881: LD_INT 116
13883: PUSH
13884: LD_INT 117
13886: PUSH
13887: LD_INT 118
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: ST_TO_ADDR
13912: GO 15595
13914: LD_INT 12
13916: DOUBLE
13917: EQUAL
13918: IFTRUE 13922
13920: GO 14142
13922: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13923: LD_ADDR_VAR 0 2
13927: PUSH
13928: LD_INT 1
13930: PUSH
13931: LD_INT 2
13933: PUSH
13934: LD_INT 3
13936: PUSH
13937: LD_INT 4
13939: PUSH
13940: LD_INT 5
13942: PUSH
13943: LD_INT 6
13945: PUSH
13946: LD_INT 7
13948: PUSH
13949: LD_INT 8
13951: PUSH
13952: LD_INT 9
13954: PUSH
13955: LD_INT 10
13957: PUSH
13958: LD_INT 11
13960: PUSH
13961: LD_INT 12
13963: PUSH
13964: LD_INT 13
13966: PUSH
13967: LD_INT 14
13969: PUSH
13970: LD_INT 15
13972: PUSH
13973: LD_INT 16
13975: PUSH
13976: LD_INT 17
13978: PUSH
13979: LD_INT 18
13981: PUSH
13982: LD_INT 19
13984: PUSH
13985: LD_INT 20
13987: PUSH
13988: LD_INT 21
13990: PUSH
13991: LD_INT 22
13993: PUSH
13994: LD_INT 23
13996: PUSH
13997: LD_INT 24
13999: PUSH
14000: LD_INT 25
14002: PUSH
14003: LD_INT 26
14005: PUSH
14006: LD_INT 27
14008: PUSH
14009: LD_INT 28
14011: PUSH
14012: LD_INT 30
14014: PUSH
14015: LD_INT 31
14017: PUSH
14018: LD_INT 32
14020: PUSH
14021: LD_INT 33
14023: PUSH
14024: LD_INT 34
14026: PUSH
14027: LD_INT 36
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 101
14068: PUSH
14069: LD_INT 102
14071: PUSH
14072: LD_INT 103
14074: PUSH
14075: LD_INT 104
14077: PUSH
14078: LD_INT 105
14080: PUSH
14081: LD_INT 106
14083: PUSH
14084: LD_INT 107
14086: PUSH
14087: LD_INT 108
14089: PUSH
14090: LD_INT 109
14092: PUSH
14093: LD_INT 110
14095: PUSH
14096: LD_INT 111
14098: PUSH
14099: LD_INT 112
14101: PUSH
14102: LD_INT 113
14104: PUSH
14105: LD_INT 114
14107: PUSH
14108: LD_INT 116
14110: PUSH
14111: LD_INT 117
14113: PUSH
14114: LD_INT 118
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: ST_TO_ADDR
14140: GO 15595
14142: LD_INT 13
14144: DOUBLE
14145: EQUAL
14146: IFTRUE 14150
14148: GO 14358
14150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14151: LD_ADDR_VAR 0 2
14155: PUSH
14156: LD_INT 1
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 3
14164: PUSH
14165: LD_INT 4
14167: PUSH
14168: LD_INT 5
14170: PUSH
14171: LD_INT 8
14173: PUSH
14174: LD_INT 9
14176: PUSH
14177: LD_INT 10
14179: PUSH
14180: LD_INT 11
14182: PUSH
14183: LD_INT 12
14185: PUSH
14186: LD_INT 14
14188: PUSH
14189: LD_INT 15
14191: PUSH
14192: LD_INT 16
14194: PUSH
14195: LD_INT 17
14197: PUSH
14198: LD_INT 18
14200: PUSH
14201: LD_INT 19
14203: PUSH
14204: LD_INT 20
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 22
14212: PUSH
14213: LD_INT 23
14215: PUSH
14216: LD_INT 24
14218: PUSH
14219: LD_INT 25
14221: PUSH
14222: LD_INT 26
14224: PUSH
14225: LD_INT 27
14227: PUSH
14228: LD_INT 28
14230: PUSH
14231: LD_INT 30
14233: PUSH
14234: LD_INT 31
14236: PUSH
14237: LD_INT 32
14239: PUSH
14240: LD_INT 33
14242: PUSH
14243: LD_INT 34
14245: PUSH
14246: LD_INT 36
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 101
14284: PUSH
14285: LD_INT 102
14287: PUSH
14288: LD_INT 103
14290: PUSH
14291: LD_INT 104
14293: PUSH
14294: LD_INT 105
14296: PUSH
14297: LD_INT 106
14299: PUSH
14300: LD_INT 107
14302: PUSH
14303: LD_INT 108
14305: PUSH
14306: LD_INT 109
14308: PUSH
14309: LD_INT 110
14311: PUSH
14312: LD_INT 111
14314: PUSH
14315: LD_INT 112
14317: PUSH
14318: LD_INT 113
14320: PUSH
14321: LD_INT 114
14323: PUSH
14324: LD_INT 116
14326: PUSH
14327: LD_INT 117
14329: PUSH
14330: LD_INT 118
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: ST_TO_ADDR
14356: GO 15595
14358: LD_INT 14
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14590
14366: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: LD_INT 1
14374: PUSH
14375: LD_INT 2
14377: PUSH
14378: LD_INT 3
14380: PUSH
14381: LD_INT 4
14383: PUSH
14384: LD_INT 5
14386: PUSH
14387: LD_INT 6
14389: PUSH
14390: LD_INT 7
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: LD_INT 9
14398: PUSH
14399: LD_INT 10
14401: PUSH
14402: LD_INT 11
14404: PUSH
14405: LD_INT 12
14407: PUSH
14408: LD_INT 13
14410: PUSH
14411: LD_INT 14
14413: PUSH
14414: LD_INT 15
14416: PUSH
14417: LD_INT 16
14419: PUSH
14420: LD_INT 17
14422: PUSH
14423: LD_INT 18
14425: PUSH
14426: LD_INT 19
14428: PUSH
14429: LD_INT 20
14431: PUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 22
14437: PUSH
14438: LD_INT 23
14440: PUSH
14441: LD_INT 24
14443: PUSH
14444: LD_INT 25
14446: PUSH
14447: LD_INT 26
14449: PUSH
14450: LD_INT 27
14452: PUSH
14453: LD_INT 28
14455: PUSH
14456: LD_INT 29
14458: PUSH
14459: LD_INT 30
14461: PUSH
14462: LD_INT 31
14464: PUSH
14465: LD_INT 32
14467: PUSH
14468: LD_INT 33
14470: PUSH
14471: LD_INT 34
14473: PUSH
14474: LD_INT 36
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 101
14516: PUSH
14517: LD_INT 102
14519: PUSH
14520: LD_INT 103
14522: PUSH
14523: LD_INT 104
14525: PUSH
14526: LD_INT 105
14528: PUSH
14529: LD_INT 106
14531: PUSH
14532: LD_INT 107
14534: PUSH
14535: LD_INT 108
14537: PUSH
14538: LD_INT 109
14540: PUSH
14541: LD_INT 110
14543: PUSH
14544: LD_INT 111
14546: PUSH
14547: LD_INT 112
14549: PUSH
14550: LD_INT 113
14552: PUSH
14553: LD_INT 114
14555: PUSH
14556: LD_INT 116
14558: PUSH
14559: LD_INT 117
14561: PUSH
14562: LD_INT 118
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: ST_TO_ADDR
14588: GO 15595
14590: LD_INT 15
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14822
14598: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14599: LD_ADDR_VAR 0 2
14603: PUSH
14604: LD_INT 1
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: LD_INT 3
14612: PUSH
14613: LD_INT 4
14615: PUSH
14616: LD_INT 5
14618: PUSH
14619: LD_INT 6
14621: PUSH
14622: LD_INT 7
14624: PUSH
14625: LD_INT 8
14627: PUSH
14628: LD_INT 9
14630: PUSH
14631: LD_INT 10
14633: PUSH
14634: LD_INT 11
14636: PUSH
14637: LD_INT 12
14639: PUSH
14640: LD_INT 13
14642: PUSH
14643: LD_INT 14
14645: PUSH
14646: LD_INT 15
14648: PUSH
14649: LD_INT 16
14651: PUSH
14652: LD_INT 17
14654: PUSH
14655: LD_INT 18
14657: PUSH
14658: LD_INT 19
14660: PUSH
14661: LD_INT 20
14663: PUSH
14664: LD_INT 21
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_INT 23
14672: PUSH
14673: LD_INT 24
14675: PUSH
14676: LD_INT 25
14678: PUSH
14679: LD_INT 26
14681: PUSH
14682: LD_INT 27
14684: PUSH
14685: LD_INT 28
14687: PUSH
14688: LD_INT 29
14690: PUSH
14691: LD_INT 30
14693: PUSH
14694: LD_INT 31
14696: PUSH
14697: LD_INT 32
14699: PUSH
14700: LD_INT 33
14702: PUSH
14703: LD_INT 34
14705: PUSH
14706: LD_INT 36
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 101
14748: PUSH
14749: LD_INT 102
14751: PUSH
14752: LD_INT 103
14754: PUSH
14755: LD_INT 104
14757: PUSH
14758: LD_INT 105
14760: PUSH
14761: LD_INT 106
14763: PUSH
14764: LD_INT 107
14766: PUSH
14767: LD_INT 108
14769: PUSH
14770: LD_INT 109
14772: PUSH
14773: LD_INT 110
14775: PUSH
14776: LD_INT 111
14778: PUSH
14779: LD_INT 112
14781: PUSH
14782: LD_INT 113
14784: PUSH
14785: LD_INT 114
14787: PUSH
14788: LD_INT 116
14790: PUSH
14791: LD_INT 117
14793: PUSH
14794: LD_INT 118
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: ST_TO_ADDR
14820: GO 15595
14822: LD_INT 16
14824: DOUBLE
14825: EQUAL
14826: IFTRUE 14830
14828: GO 14966
14830: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: LD_INT 2
14838: PUSH
14839: LD_INT 4
14841: PUSH
14842: LD_INT 5
14844: PUSH
14845: LD_INT 7
14847: PUSH
14848: LD_INT 11
14850: PUSH
14851: LD_INT 12
14853: PUSH
14854: LD_INT 15
14856: PUSH
14857: LD_INT 16
14859: PUSH
14860: LD_INT 20
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 25
14874: PUSH
14875: LD_INT 26
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: LD_INT 32
14886: PUSH
14887: LD_INT 33
14889: PUSH
14890: LD_INT 34
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 101
14916: PUSH
14917: LD_INT 102
14919: PUSH
14920: LD_INT 103
14922: PUSH
14923: LD_INT 106
14925: PUSH
14926: LD_INT 108
14928: PUSH
14929: LD_INT 112
14931: PUSH
14932: LD_INT 113
14934: PUSH
14935: LD_INT 114
14937: PUSH
14938: LD_INT 116
14940: PUSH
14941: LD_INT 117
14943: PUSH
14944: LD_INT 118
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: ST_TO_ADDR
14964: GO 15595
14966: LD_INT 17
14968: DOUBLE
14969: EQUAL
14970: IFTRUE 14974
14972: GO 15198
14974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14975: LD_ADDR_VAR 0 2
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: LD_INT 2
14985: PUSH
14986: LD_INT 3
14988: PUSH
14989: LD_INT 4
14991: PUSH
14992: LD_INT 5
14994: PUSH
14995: LD_INT 6
14997: PUSH
14998: LD_INT 7
15000: PUSH
15001: LD_INT 8
15003: PUSH
15004: LD_INT 9
15006: PUSH
15007: LD_INT 10
15009: PUSH
15010: LD_INT 11
15012: PUSH
15013: LD_INT 12
15015: PUSH
15016: LD_INT 13
15018: PUSH
15019: LD_INT 14
15021: PUSH
15022: LD_INT 15
15024: PUSH
15025: LD_INT 16
15027: PUSH
15028: LD_INT 17
15030: PUSH
15031: LD_INT 18
15033: PUSH
15034: LD_INT 19
15036: PUSH
15037: LD_INT 20
15039: PUSH
15040: LD_INT 21
15042: PUSH
15043: LD_INT 22
15045: PUSH
15046: LD_INT 23
15048: PUSH
15049: LD_INT 24
15051: PUSH
15052: LD_INT 25
15054: PUSH
15055: LD_INT 26
15057: PUSH
15058: LD_INT 27
15060: PUSH
15061: LD_INT 28
15063: PUSH
15064: LD_INT 29
15066: PUSH
15067: LD_INT 30
15069: PUSH
15070: LD_INT 31
15072: PUSH
15073: LD_INT 32
15075: PUSH
15076: LD_INT 33
15078: PUSH
15079: LD_INT 34
15081: PUSH
15082: LD_INT 36
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 101
15124: PUSH
15125: LD_INT 102
15127: PUSH
15128: LD_INT 103
15130: PUSH
15131: LD_INT 104
15133: PUSH
15134: LD_INT 105
15136: PUSH
15137: LD_INT 106
15139: PUSH
15140: LD_INT 107
15142: PUSH
15143: LD_INT 108
15145: PUSH
15146: LD_INT 109
15148: PUSH
15149: LD_INT 110
15151: PUSH
15152: LD_INT 111
15154: PUSH
15155: LD_INT 112
15157: PUSH
15158: LD_INT 113
15160: PUSH
15161: LD_INT 114
15163: PUSH
15164: LD_INT 116
15166: PUSH
15167: LD_INT 117
15169: PUSH
15170: LD_INT 118
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: ST_TO_ADDR
15196: GO 15595
15198: LD_INT 18
15200: DOUBLE
15201: EQUAL
15202: IFTRUE 15206
15204: GO 15354
15206: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15207: LD_ADDR_VAR 0 2
15211: PUSH
15212: LD_INT 2
15214: PUSH
15215: LD_INT 4
15217: PUSH
15218: LD_INT 5
15220: PUSH
15221: LD_INT 7
15223: PUSH
15224: LD_INT 11
15226: PUSH
15227: LD_INT 12
15229: PUSH
15230: LD_INT 15
15232: PUSH
15233: LD_INT 16
15235: PUSH
15236: LD_INT 20
15238: PUSH
15239: LD_INT 21
15241: PUSH
15242: LD_INT 22
15244: PUSH
15245: LD_INT 23
15247: PUSH
15248: LD_INT 25
15250: PUSH
15251: LD_INT 26
15253: PUSH
15254: LD_INT 30
15256: PUSH
15257: LD_INT 31
15259: PUSH
15260: LD_INT 32
15262: PUSH
15263: LD_INT 33
15265: PUSH
15266: LD_INT 34
15268: PUSH
15269: LD_INT 35
15271: PUSH
15272: LD_INT 36
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 101
15300: PUSH
15301: LD_INT 102
15303: PUSH
15304: LD_INT 103
15306: PUSH
15307: LD_INT 106
15309: PUSH
15310: LD_INT 108
15312: PUSH
15313: LD_INT 112
15315: PUSH
15316: LD_INT 113
15318: PUSH
15319: LD_INT 114
15321: PUSH
15322: LD_INT 115
15324: PUSH
15325: LD_INT 116
15327: PUSH
15328: LD_INT 117
15330: PUSH
15331: LD_INT 118
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: ST_TO_ADDR
15352: GO 15595
15354: LD_INT 19
15356: DOUBLE
15357: EQUAL
15358: IFTRUE 15362
15360: GO 15594
15362: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15363: LD_ADDR_VAR 0 2
15367: PUSH
15368: LD_INT 1
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 3
15376: PUSH
15377: LD_INT 4
15379: PUSH
15380: LD_INT 5
15382: PUSH
15383: LD_INT 6
15385: PUSH
15386: LD_INT 7
15388: PUSH
15389: LD_INT 8
15391: PUSH
15392: LD_INT 9
15394: PUSH
15395: LD_INT 10
15397: PUSH
15398: LD_INT 11
15400: PUSH
15401: LD_INT 12
15403: PUSH
15404: LD_INT 13
15406: PUSH
15407: LD_INT 14
15409: PUSH
15410: LD_INT 15
15412: PUSH
15413: LD_INT 16
15415: PUSH
15416: LD_INT 17
15418: PUSH
15419: LD_INT 18
15421: PUSH
15422: LD_INT 19
15424: PUSH
15425: LD_INT 20
15427: PUSH
15428: LD_INT 21
15430: PUSH
15431: LD_INT 22
15433: PUSH
15434: LD_INT 23
15436: PUSH
15437: LD_INT 24
15439: PUSH
15440: LD_INT 25
15442: PUSH
15443: LD_INT 26
15445: PUSH
15446: LD_INT 27
15448: PUSH
15449: LD_INT 28
15451: PUSH
15452: LD_INT 29
15454: PUSH
15455: LD_INT 30
15457: PUSH
15458: LD_INT 31
15460: PUSH
15461: LD_INT 32
15463: PUSH
15464: LD_INT 33
15466: PUSH
15467: LD_INT 34
15469: PUSH
15470: LD_INT 35
15472: PUSH
15473: LD_INT 36
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 101
15516: PUSH
15517: LD_INT 102
15519: PUSH
15520: LD_INT 103
15522: PUSH
15523: LD_INT 104
15525: PUSH
15526: LD_INT 105
15528: PUSH
15529: LD_INT 106
15531: PUSH
15532: LD_INT 107
15534: PUSH
15535: LD_INT 108
15537: PUSH
15538: LD_INT 109
15540: PUSH
15541: LD_INT 110
15543: PUSH
15544: LD_INT 111
15546: PUSH
15547: LD_INT 112
15549: PUSH
15550: LD_INT 113
15552: PUSH
15553: LD_INT 114
15555: PUSH
15556: LD_INT 115
15558: PUSH
15559: LD_INT 116
15561: PUSH
15562: LD_INT 117
15564: PUSH
15565: LD_INT 118
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: ST_TO_ADDR
15592: GO 15595
15594: POP
// end else
15595: GO 15826
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15597: LD_ADDR_VAR 0 2
15601: PUSH
15602: LD_INT 1
15604: PUSH
15605: LD_INT 2
15607: PUSH
15608: LD_INT 3
15610: PUSH
15611: LD_INT 4
15613: PUSH
15614: LD_INT 5
15616: PUSH
15617: LD_INT 6
15619: PUSH
15620: LD_INT 7
15622: PUSH
15623: LD_INT 8
15625: PUSH
15626: LD_INT 9
15628: PUSH
15629: LD_INT 10
15631: PUSH
15632: LD_INT 11
15634: PUSH
15635: LD_INT 12
15637: PUSH
15638: LD_INT 13
15640: PUSH
15641: LD_INT 14
15643: PUSH
15644: LD_INT 15
15646: PUSH
15647: LD_INT 16
15649: PUSH
15650: LD_INT 17
15652: PUSH
15653: LD_INT 18
15655: PUSH
15656: LD_INT 19
15658: PUSH
15659: LD_INT 20
15661: PUSH
15662: LD_INT 21
15664: PUSH
15665: LD_INT 22
15667: PUSH
15668: LD_INT 23
15670: PUSH
15671: LD_INT 24
15673: PUSH
15674: LD_INT 25
15676: PUSH
15677: LD_INT 26
15679: PUSH
15680: LD_INT 27
15682: PUSH
15683: LD_INT 28
15685: PUSH
15686: LD_INT 29
15688: PUSH
15689: LD_INT 30
15691: PUSH
15692: LD_INT 31
15694: PUSH
15695: LD_INT 32
15697: PUSH
15698: LD_INT 33
15700: PUSH
15701: LD_INT 34
15703: PUSH
15704: LD_INT 35
15706: PUSH
15707: LD_INT 36
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 101
15750: PUSH
15751: LD_INT 102
15753: PUSH
15754: LD_INT 103
15756: PUSH
15757: LD_INT 104
15759: PUSH
15760: LD_INT 105
15762: PUSH
15763: LD_INT 106
15765: PUSH
15766: LD_INT 107
15768: PUSH
15769: LD_INT 108
15771: PUSH
15772: LD_INT 109
15774: PUSH
15775: LD_INT 110
15777: PUSH
15778: LD_INT 111
15780: PUSH
15781: LD_INT 112
15783: PUSH
15784: LD_INT 113
15786: PUSH
15787: LD_INT 114
15789: PUSH
15790: LD_INT 115
15792: PUSH
15793: LD_INT 116
15795: PUSH
15796: LD_INT 117
15798: PUSH
15799: LD_INT 118
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: ST_TO_ADDR
// if result then
15826: LD_VAR 0 2
15830: IFFALSE 16616
// begin normal :=  ;
15832: LD_ADDR_VAR 0 5
15836: PUSH
15837: LD_STRING 
15839: ST_TO_ADDR
// hardcore :=  ;
15840: LD_ADDR_VAR 0 6
15844: PUSH
15845: LD_STRING 
15847: ST_TO_ADDR
// active :=  ;
15848: LD_ADDR_VAR 0 7
15852: PUSH
15853: LD_STRING 
15855: ST_TO_ADDR
// for i = 1 to normalCounter do
15856: LD_ADDR_VAR 0 8
15860: PUSH
15861: DOUBLE
15862: LD_INT 1
15864: DEC
15865: ST_TO_ADDR
15866: LD_EXP 46
15870: PUSH
15871: FOR_TO
15872: IFFALSE 15973
// begin tmp := 0 ;
15874: LD_ADDR_VAR 0 3
15878: PUSH
15879: LD_STRING 0
15881: ST_TO_ADDR
// if result [ 1 ] then
15882: LD_VAR 0 2
15886: PUSH
15887: LD_INT 1
15889: ARRAY
15890: IFFALSE 15955
// if result [ 1 ] [ 1 ] = i then
15892: LD_VAR 0 2
15896: PUSH
15897: LD_INT 1
15899: ARRAY
15900: PUSH
15901: LD_INT 1
15903: ARRAY
15904: PUSH
15905: LD_VAR 0 8
15909: EQUAL
15910: IFFALSE 15955
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15912: LD_ADDR_VAR 0 2
15916: PUSH
15917: LD_VAR 0 2
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: LD_VAR 0 2
15929: PUSH
15930: LD_INT 1
15932: ARRAY
15933: PPUSH
15934: LD_INT 1
15936: PPUSH
15937: CALL_OW 3
15941: PPUSH
15942: CALL_OW 1
15946: ST_TO_ADDR
// tmp := 1 ;
15947: LD_ADDR_VAR 0 3
15951: PUSH
15952: LD_STRING 1
15954: ST_TO_ADDR
// end ; normal := normal & tmp ;
15955: LD_ADDR_VAR 0 5
15959: PUSH
15960: LD_VAR 0 5
15964: PUSH
15965: LD_VAR 0 3
15969: STR
15970: ST_TO_ADDR
// end ;
15971: GO 15871
15973: POP
15974: POP
// for i = 1 to hardcoreCounter do
15975: LD_ADDR_VAR 0 8
15979: PUSH
15980: DOUBLE
15981: LD_INT 1
15983: DEC
15984: ST_TO_ADDR
15985: LD_EXP 47
15989: PUSH
15990: FOR_TO
15991: IFFALSE 16096
// begin tmp := 0 ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_STRING 0
16000: ST_TO_ADDR
// if result [ 2 ] then
16001: LD_VAR 0 2
16005: PUSH
16006: LD_INT 2
16008: ARRAY
16009: IFFALSE 16078
// if result [ 2 ] [ 1 ] = 100 + i then
16011: LD_VAR 0 2
16015: PUSH
16016: LD_INT 2
16018: ARRAY
16019: PUSH
16020: LD_INT 1
16022: ARRAY
16023: PUSH
16024: LD_INT 100
16026: PUSH
16027: LD_VAR 0 8
16031: PLUS
16032: EQUAL
16033: IFFALSE 16078
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16035: LD_ADDR_VAR 0 2
16039: PUSH
16040: LD_VAR 0 2
16044: PPUSH
16045: LD_INT 2
16047: PPUSH
16048: LD_VAR 0 2
16052: PUSH
16053: LD_INT 2
16055: ARRAY
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: CALL_OW 3
16064: PPUSH
16065: CALL_OW 1
16069: ST_TO_ADDR
// tmp := 1 ;
16070: LD_ADDR_VAR 0 3
16074: PUSH
16075: LD_STRING 1
16077: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16078: LD_ADDR_VAR 0 6
16082: PUSH
16083: LD_VAR 0 6
16087: PUSH
16088: LD_VAR 0 3
16092: STR
16093: ST_TO_ADDR
// end ;
16094: GO 15990
16096: POP
16097: POP
// if isGameLoad then
16098: LD_VAR 0 1
16102: IFFALSE 16577
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16104: LD_ADDR_VAR 0 4
16108: PUSH
16109: LD_EXP 50
16113: PUSH
16114: LD_EXP 49
16118: PUSH
16119: LD_EXP 51
16123: PUSH
16124: LD_EXP 48
16128: PUSH
16129: LD_EXP 52
16133: PUSH
16134: LD_EXP 53
16138: PUSH
16139: LD_EXP 54
16143: PUSH
16144: LD_EXP 55
16148: PUSH
16149: LD_EXP 56
16153: PUSH
16154: LD_EXP 57
16158: PUSH
16159: LD_EXP 58
16163: PUSH
16164: LD_EXP 59
16168: PUSH
16169: LD_EXP 60
16173: PUSH
16174: LD_EXP 61
16178: PUSH
16179: LD_EXP 69
16183: PUSH
16184: LD_EXP 70
16188: PUSH
16189: LD_EXP 71
16193: PUSH
16194: LD_EXP 72
16198: PUSH
16199: LD_EXP 74
16203: PUSH
16204: LD_EXP 75
16208: PUSH
16209: LD_EXP 76
16213: PUSH
16214: LD_EXP 79
16218: PUSH
16219: LD_EXP 81
16223: PUSH
16224: LD_EXP 82
16228: PUSH
16229: LD_EXP 83
16233: PUSH
16234: LD_EXP 85
16238: PUSH
16239: LD_EXP 86
16243: PUSH
16244: LD_EXP 89
16248: PUSH
16249: LD_EXP 90
16253: PUSH
16254: LD_EXP 91
16258: PUSH
16259: LD_EXP 92
16263: PUSH
16264: LD_EXP 93
16268: PUSH
16269: LD_EXP 94
16273: PUSH
16274: LD_EXP 95
16278: PUSH
16279: LD_EXP 96
16283: PUSH
16284: LD_EXP 97
16288: PUSH
16289: LD_EXP 62
16293: PUSH
16294: LD_EXP 63
16298: PUSH
16299: LD_EXP 66
16303: PUSH
16304: LD_EXP 67
16308: PUSH
16309: LD_EXP 68
16313: PUSH
16314: LD_EXP 64
16318: PUSH
16319: LD_EXP 65
16323: PUSH
16324: LD_EXP 73
16328: PUSH
16329: LD_EXP 77
16333: PUSH
16334: LD_EXP 78
16338: PUSH
16339: LD_EXP 80
16343: PUSH
16344: LD_EXP 84
16348: PUSH
16349: LD_EXP 87
16353: PUSH
16354: LD_EXP 88
16358: PUSH
16359: LD_EXP 98
16363: PUSH
16364: LD_EXP 99
16368: PUSH
16369: LD_EXP 100
16373: PUSH
16374: LD_EXP 101
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: ST_TO_ADDR
// tmp :=  ;
16435: LD_ADDR_VAR 0 3
16439: PUSH
16440: LD_STRING 
16442: ST_TO_ADDR
// for i = 1 to normalCounter do
16443: LD_ADDR_VAR 0 8
16447: PUSH
16448: DOUBLE
16449: LD_INT 1
16451: DEC
16452: ST_TO_ADDR
16453: LD_EXP 46
16457: PUSH
16458: FOR_TO
16459: IFFALSE 16495
// begin if flags [ i ] then
16461: LD_VAR 0 4
16465: PUSH
16466: LD_VAR 0 8
16470: ARRAY
16471: IFFALSE 16493
// tmp := tmp & i & ; ;
16473: LD_ADDR_VAR 0 3
16477: PUSH
16478: LD_VAR 0 3
16482: PUSH
16483: LD_VAR 0 8
16487: STR
16488: PUSH
16489: LD_STRING ;
16491: STR
16492: ST_TO_ADDR
// end ;
16493: GO 16458
16495: POP
16496: POP
// for i = 1 to hardcoreCounter do
16497: LD_ADDR_VAR 0 8
16501: PUSH
16502: DOUBLE
16503: LD_INT 1
16505: DEC
16506: ST_TO_ADDR
16507: LD_EXP 47
16511: PUSH
16512: FOR_TO
16513: IFFALSE 16559
// begin if flags [ normalCounter + i ] then
16515: LD_VAR 0 4
16519: PUSH
16520: LD_EXP 46
16524: PUSH
16525: LD_VAR 0 8
16529: PLUS
16530: ARRAY
16531: IFFALSE 16557
// tmp := tmp & ( 100 + i ) & ; ;
16533: LD_ADDR_VAR 0 3
16537: PUSH
16538: LD_VAR 0 3
16542: PUSH
16543: LD_INT 100
16545: PUSH
16546: LD_VAR 0 8
16550: PLUS
16551: STR
16552: PUSH
16553: LD_STRING ;
16555: STR
16556: ST_TO_ADDR
// end ;
16557: GO 16512
16559: POP
16560: POP
// if tmp then
16561: LD_VAR 0 3
16565: IFFALSE 16577
// active := tmp ;
16567: LD_ADDR_VAR 0 7
16571: PUSH
16572: LD_VAR 0 3
16576: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16577: LD_STRING getStreamItemsFromMission("
16579: PUSH
16580: LD_VAR 0 5
16584: STR
16585: PUSH
16586: LD_STRING ","
16588: STR
16589: PUSH
16590: LD_VAR 0 6
16594: STR
16595: PUSH
16596: LD_STRING ","
16598: STR
16599: PUSH
16600: LD_VAR 0 7
16604: STR
16605: PUSH
16606: LD_STRING ")
16608: STR
16609: PPUSH
16610: CALL_OW 559
// end else
16614: GO 16623
// ToLua ( getStreamItemsFromMission("","","") ) ;
16616: LD_STRING getStreamItemsFromMission("","","")
16618: PPUSH
16619: CALL_OW 559
// end ;
16623: LD_VAR 0 2
16627: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16628: LD_EXP 45
16632: IFFALSE 16640
16634: PUSH
16635: LD_EXP 50
16639: AND
16640: IFFALSE 16764
16642: GO 16644
16644: DISABLE
16645: LD_INT 0
16647: PPUSH
16648: PPUSH
// begin enable ;
16649: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_INT 22
16657: PUSH
16658: LD_OWVAR 2
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 34
16672: PUSH
16673: LD_INT 7
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 34
16682: PUSH
16683: LD_INT 45
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 34
16692: PUSH
16693: LD_INT 28
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 34
16702: PUSH
16703: LD_INT 47
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PPUSH
16721: CALL_OW 69
16725: ST_TO_ADDR
// if not tmp then
16726: LD_VAR 0 2
16730: NOT
16731: IFFALSE 16735
// exit ;
16733: GO 16764
// for i in tmp do
16735: LD_ADDR_VAR 0 1
16739: PUSH
16740: LD_VAR 0 2
16744: PUSH
16745: FOR_IN
16746: IFFALSE 16762
// begin SetLives ( i , 0 ) ;
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_INT 0
16755: PPUSH
16756: CALL_OW 234
// end ;
16760: GO 16745
16762: POP
16763: POP
// end ;
16764: PPOPN 2
16766: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16767: LD_EXP 45
16771: IFFALSE 16779
16773: PUSH
16774: LD_EXP 51
16778: AND
16779: IFFALSE 16863
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
// begin enable ;
16788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16789: LD_ADDR_VAR 0 2
16793: PUSH
16794: LD_INT 22
16796: PUSH
16797: LD_OWVAR 2
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 32
16808: PUSH
16809: LD_INT 3
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PPUSH
16820: CALL_OW 69
16824: ST_TO_ADDR
// if not tmp then
16825: LD_VAR 0 2
16829: NOT
16830: IFFALSE 16834
// exit ;
16832: GO 16863
// for i in tmp do
16834: LD_ADDR_VAR 0 1
16838: PUSH
16839: LD_VAR 0 2
16843: PUSH
16844: FOR_IN
16845: IFFALSE 16861
// begin SetLives ( i , 0 ) ;
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_INT 0
16854: PPUSH
16855: CALL_OW 234
// end ;
16859: GO 16844
16861: POP
16862: POP
// end ;
16863: PPOPN 2
16865: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16866: LD_EXP 45
16870: IFFALSE 16878
16872: PUSH
16873: LD_EXP 48
16877: AND
16878: IFFALSE 16971
16880: GO 16882
16882: DISABLE
16883: LD_INT 0
16885: PPUSH
// begin enable ;
16886: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16887: LD_ADDR_VAR 0 1
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_OWVAR 2
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: LD_INT 25
16909: PUSH
16910: LD_INT 5
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 25
16919: PUSH
16920: LD_INT 9
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 25
16929: PUSH
16930: LD_INT 8
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PPUSH
16947: CALL_OW 69
16951: PUSH
16952: FOR_IN
16953: IFFALSE 16969
// begin SetClass ( i , 1 ) ;
16955: LD_VAR 0 1
16959: PPUSH
16960: LD_INT 1
16962: PPUSH
16963: CALL_OW 336
// end ;
16967: GO 16952
16969: POP
16970: POP
// end ;
16971: PPOPN 1
16973: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16974: LD_EXP 45
16978: IFFALSE 16986
16980: PUSH
16981: LD_EXP 49
16985: AND
16986: IFFALSE 16998
16988: PUSH
16989: LD_OWVAR 65
16993: PUSH
16994: LD_INT 7
16996: LESS
16997: AND
16998: IFFALSE 17012
17000: GO 17002
17002: DISABLE
// begin enable ;
17003: ENABLE
// game_speed := 7 ;
17004: LD_ADDR_OWVAR 65
17008: PUSH
17009: LD_INT 7
17011: ST_TO_ADDR
// end ;
17012: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17013: LD_EXP 45
17017: IFFALSE 17025
17019: PUSH
17020: LD_EXP 52
17024: AND
17025: IFFALSE 17227
17027: GO 17029
17029: DISABLE
17030: LD_INT 0
17032: PPUSH
17033: PPUSH
17034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17035: LD_ADDR_VAR 0 3
17039: PUSH
17040: LD_INT 81
17042: PUSH
17043: LD_OWVAR 2
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 21
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: ST_TO_ADDR
// if not tmp then
17071: LD_VAR 0 3
17075: NOT
17076: IFFALSE 17080
// exit ;
17078: GO 17227
// if tmp > 5 then
17080: LD_VAR 0 3
17084: PUSH
17085: LD_INT 5
17087: GREATER
17088: IFFALSE 17100
// k := 5 else
17090: LD_ADDR_VAR 0 2
17094: PUSH
17095: LD_INT 5
17097: ST_TO_ADDR
17098: GO 17110
// k := tmp ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_VAR 0 3
17109: ST_TO_ADDR
// for i := 1 to k do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_VAR 0 2
17124: PUSH
17125: FOR_TO
17126: IFFALSE 17225
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17128: LD_VAR 0 3
17132: PUSH
17133: LD_VAR 0 1
17137: ARRAY
17138: PPUSH
17139: LD_VAR 0 1
17143: PUSH
17144: LD_INT 4
17146: MOD
17147: PUSH
17148: LD_INT 1
17150: PLUS
17151: PPUSH
17152: CALL_OW 259
17156: PUSH
17157: LD_INT 10
17159: LESS
17160: IFFALSE 17223
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17162: LD_VAR 0 3
17166: PUSH
17167: LD_VAR 0 1
17171: ARRAY
17172: PPUSH
17173: LD_VAR 0 1
17177: PUSH
17178: LD_INT 4
17180: MOD
17181: PUSH
17182: LD_INT 1
17184: PLUS
17185: PPUSH
17186: LD_VAR 0 3
17190: PUSH
17191: LD_VAR 0 1
17195: ARRAY
17196: PPUSH
17197: LD_VAR 0 1
17201: PUSH
17202: LD_INT 4
17204: MOD
17205: PUSH
17206: LD_INT 1
17208: PLUS
17209: PPUSH
17210: CALL_OW 259
17214: PUSH
17215: LD_INT 1
17217: PLUS
17218: PPUSH
17219: CALL_OW 237
17223: GO 17125
17225: POP
17226: POP
// end ;
17227: PPOPN 3
17229: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17230: LD_EXP 45
17234: IFFALSE 17242
17236: PUSH
17237: LD_EXP 53
17241: AND
17242: IFFALSE 17262
17244: GO 17246
17246: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17247: LD_INT 4
17249: PPUSH
17250: LD_OWVAR 2
17254: PPUSH
17255: LD_INT 0
17257: PPUSH
17258: CALL_OW 324
17262: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17263: LD_EXP 45
17267: IFFALSE 17275
17269: PUSH
17270: LD_EXP 82
17274: AND
17275: IFFALSE 17295
17277: GO 17279
17279: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17280: LD_INT 19
17282: PPUSH
17283: LD_OWVAR 2
17287: PPUSH
17288: LD_INT 0
17290: PPUSH
17291: CALL_OW 324
17295: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17296: LD_EXP 45
17300: IFFALSE 17308
17302: PUSH
17303: LD_EXP 54
17307: AND
17308: IFFALSE 17410
17310: GO 17312
17312: DISABLE
17313: LD_INT 0
17315: PPUSH
17316: PPUSH
// begin enable ;
17317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17318: LD_ADDR_VAR 0 2
17322: PUSH
17323: LD_INT 22
17325: PUSH
17326: LD_OWVAR 2
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: LD_INT 34
17340: PUSH
17341: LD_INT 11
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 34
17350: PUSH
17351: LD_INT 30
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PPUSH
17367: CALL_OW 69
17371: ST_TO_ADDR
// if not tmp then
17372: LD_VAR 0 2
17376: NOT
17377: IFFALSE 17381
// exit ;
17379: GO 17410
// for i in tmp do
17381: LD_ADDR_VAR 0 1
17385: PUSH
17386: LD_VAR 0 2
17390: PUSH
17391: FOR_IN
17392: IFFALSE 17408
// begin SetLives ( i , 0 ) ;
17394: LD_VAR 0 1
17398: PPUSH
17399: LD_INT 0
17401: PPUSH
17402: CALL_OW 234
// end ;
17406: GO 17391
17408: POP
17409: POP
// end ;
17410: PPOPN 2
17412: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17413: LD_EXP 45
17417: IFFALSE 17425
17419: PUSH
17420: LD_EXP 55
17424: AND
17425: IFFALSE 17445
17427: GO 17429
17429: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17430: LD_INT 32
17432: PPUSH
17433: LD_OWVAR 2
17437: PPUSH
17438: LD_INT 0
17440: PPUSH
17441: CALL_OW 324
17445: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17446: LD_EXP 45
17450: IFFALSE 17458
17452: PUSH
17453: LD_EXP 56
17457: AND
17458: IFFALSE 17641
17460: GO 17462
17462: DISABLE
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17468: LD_ADDR_VAR 0 2
17472: PUSH
17473: LD_INT 22
17475: PUSH
17476: LD_OWVAR 2
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 33
17487: PUSH
17488: LD_INT 3
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PPUSH
17499: CALL_OW 69
17503: ST_TO_ADDR
// if not tmp then
17504: LD_VAR 0 2
17508: NOT
17509: IFFALSE 17513
// exit ;
17511: GO 17641
// side := 0 ;
17513: LD_ADDR_VAR 0 3
17517: PUSH
17518: LD_INT 0
17520: ST_TO_ADDR
// for i := 1 to 8 do
17521: LD_ADDR_VAR 0 1
17525: PUSH
17526: DOUBLE
17527: LD_INT 1
17529: DEC
17530: ST_TO_ADDR
17531: LD_INT 8
17533: PUSH
17534: FOR_TO
17535: IFFALSE 17585
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17537: LD_OWVAR 2
17541: PUSH
17542: LD_VAR 0 1
17546: NONEQUAL
17547: IFFALSE 17569
17549: PUSH
17550: LD_OWVAR 2
17554: PPUSH
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL_OW 81
17564: PUSH
17565: LD_INT 2
17567: EQUAL
17568: AND
17569: IFFALSE 17583
// begin side := i ;
17571: LD_ADDR_VAR 0 3
17575: PUSH
17576: LD_VAR 0 1
17580: ST_TO_ADDR
// break ;
17581: GO 17585
// end ;
17583: GO 17534
17585: POP
17586: POP
// if not side then
17587: LD_VAR 0 3
17591: NOT
17592: IFFALSE 17596
// exit ;
17594: GO 17641
// for i := 1 to tmp do
17596: LD_ADDR_VAR 0 1
17600: PUSH
17601: DOUBLE
17602: LD_INT 1
17604: DEC
17605: ST_TO_ADDR
17606: LD_VAR 0 2
17610: PUSH
17611: FOR_TO
17612: IFFALSE 17639
// if Prob ( 60 ) then
17614: LD_INT 60
17616: PPUSH
17617: CALL_OW 13
17621: IFFALSE 17637
// SetSide ( i , side ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: LD_VAR 0 3
17632: PPUSH
17633: CALL_OW 235
17637: GO 17611
17639: POP
17640: POP
// end ;
17641: PPOPN 3
17643: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17644: LD_EXP 45
17648: IFFALSE 17656
17650: PUSH
17651: LD_EXP 58
17655: AND
17656: IFFALSE 17775
17658: GO 17660
17660: DISABLE
17661: LD_INT 0
17663: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17664: LD_ADDR_VAR 0 1
17668: PUSH
17669: LD_INT 22
17671: PUSH
17672: LD_OWVAR 2
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 21
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 3
17693: PUSH
17694: LD_INT 23
17696: PUSH
17697: LD_INT 0
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: PPUSH
17713: CALL_OW 69
17717: PUSH
17718: FOR_IN
17719: IFFALSE 17773
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 257
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: LD_INT 2
17736: PUSH
17737: LD_INT 3
17739: PUSH
17740: LD_INT 4
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: IN
17749: IFFALSE 17771
// SetClass ( un , rand ( 1 , 4 ) ) ;
17751: LD_VAR 0 1
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: LD_INT 4
17761: PPUSH
17762: CALL_OW 12
17766: PPUSH
17767: CALL_OW 336
17771: GO 17718
17773: POP
17774: POP
// end ;
17775: PPOPN 1
17777: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17778: LD_EXP 45
17782: IFFALSE 17790
17784: PUSH
17785: LD_EXP 57
17789: AND
17790: IFFALSE 17869
17792: GO 17794
17794: DISABLE
17795: LD_INT 0
17797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17798: LD_ADDR_VAR 0 1
17802: PUSH
17803: LD_INT 22
17805: PUSH
17806: LD_OWVAR 2
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 21
17817: PUSH
17818: LD_INT 3
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// if not tmp then
17834: LD_VAR 0 1
17838: NOT
17839: IFFALSE 17843
// exit ;
17841: GO 17869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17843: LD_VAR 0 1
17847: PUSH
17848: LD_INT 1
17850: PPUSH
17851: LD_VAR 0 1
17855: PPUSH
17856: CALL_OW 12
17860: ARRAY
17861: PPUSH
17862: LD_INT 100
17864: PPUSH
17865: CALL_OW 234
// end ;
17869: PPOPN 1
17871: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17872: LD_EXP 45
17876: IFFALSE 17884
17878: PUSH
17879: LD_EXP 59
17883: AND
17884: IFFALSE 17982
17886: GO 17888
17888: DISABLE
17889: LD_INT 0
17891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17892: LD_ADDR_VAR 0 1
17896: PUSH
17897: LD_INT 22
17899: PUSH
17900: LD_OWVAR 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 21
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PPUSH
17923: CALL_OW 69
17927: ST_TO_ADDR
// if not tmp then
17928: LD_VAR 0 1
17932: NOT
17933: IFFALSE 17937
// exit ;
17935: GO 17982
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17937: LD_VAR 0 1
17941: PUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 12
17954: ARRAY
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 4
17961: PPUSH
17962: CALL_OW 12
17966: PPUSH
17967: LD_INT 3000
17969: PPUSH
17970: LD_INT 9000
17972: PPUSH
17973: CALL_OW 12
17977: PPUSH
17978: CALL_OW 492
// end ;
17982: PPOPN 1
17984: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17985: LD_EXP 45
17989: IFFALSE 17997
17991: PUSH
17992: LD_EXP 60
17996: AND
17997: IFFALSE 18017
17999: GO 18001
18001: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18002: LD_INT 1
18004: PPUSH
18005: LD_OWVAR 2
18009: PPUSH
18010: LD_INT 0
18012: PPUSH
18013: CALL_OW 324
18017: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18018: LD_EXP 45
18022: IFFALSE 18030
18024: PUSH
18025: LD_EXP 61
18029: AND
18030: IFFALSE 18113
18032: GO 18034
18034: DISABLE
18035: LD_INT 0
18037: PPUSH
18038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18039: LD_ADDR_VAR 0 2
18043: PUSH
18044: LD_INT 22
18046: PUSH
18047: LD_OWVAR 2
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 21
18058: PUSH
18059: LD_INT 3
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: ST_TO_ADDR
// if not tmp then
18075: LD_VAR 0 2
18079: NOT
18080: IFFALSE 18084
// exit ;
18082: GO 18113
// for i in tmp do
18084: LD_ADDR_VAR 0 1
18088: PUSH
18089: LD_VAR 0 2
18093: PUSH
18094: FOR_IN
18095: IFFALSE 18111
// SetBLevel ( i , 10 ) ;
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 10
18104: PPUSH
18105: CALL_OW 241
18109: GO 18094
18111: POP
18112: POP
// end ;
18113: PPOPN 2
18115: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18116: LD_EXP 45
18120: IFFALSE 18128
18122: PUSH
18123: LD_EXP 62
18127: AND
18128: IFFALSE 18239
18130: GO 18132
18132: DISABLE
18133: LD_INT 0
18135: PPUSH
18136: PPUSH
18137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18138: LD_ADDR_VAR 0 3
18142: PUSH
18143: LD_INT 22
18145: PUSH
18146: LD_OWVAR 2
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 25
18157: PUSH
18158: LD_INT 1
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PPUSH
18169: CALL_OW 69
18173: ST_TO_ADDR
// if not tmp then
18174: LD_VAR 0 3
18178: NOT
18179: IFFALSE 18183
// exit ;
18181: GO 18239
// un := tmp [ rand ( 1 , tmp ) ] ;
18183: LD_ADDR_VAR 0 2
18187: PUSH
18188: LD_VAR 0 3
18192: PUSH
18193: LD_INT 1
18195: PPUSH
18196: LD_VAR 0 3
18200: PPUSH
18201: CALL_OW 12
18205: ARRAY
18206: ST_TO_ADDR
// if Crawls ( un ) then
18207: LD_VAR 0 2
18211: PPUSH
18212: CALL_OW 318
18216: IFFALSE 18227
// ComWalk ( un ) ;
18218: LD_VAR 0 2
18222: PPUSH
18223: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18227: LD_VAR 0 2
18231: PPUSH
18232: LD_INT 5
18234: PPUSH
18235: CALL_OW 336
// end ;
18239: PPOPN 3
18241: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18242: LD_EXP 45
18246: IFFALSE 18254
18248: PUSH
18249: LD_EXP 63
18253: AND
18254: IFFALSE 18266
18256: PUSH
18257: LD_OWVAR 67
18261: PUSH
18262: LD_INT 4
18264: LESS
18265: AND
18266: IFFALSE 18285
18268: GO 18270
18270: DISABLE
// begin Difficulty := Difficulty + 1 ;
18271: LD_ADDR_OWVAR 67
18275: PUSH
18276: LD_OWVAR 67
18280: PUSH
18281: LD_INT 1
18283: PLUS
18284: ST_TO_ADDR
// end ;
18285: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18286: LD_EXP 45
18290: IFFALSE 18298
18292: PUSH
18293: LD_EXP 64
18297: AND
18298: IFFALSE 18401
18300: GO 18302
18302: DISABLE
18303: LD_INT 0
18305: PPUSH
// begin for i := 1 to 5 do
18306: LD_ADDR_VAR 0 1
18310: PUSH
18311: DOUBLE
18312: LD_INT 1
18314: DEC
18315: ST_TO_ADDR
18316: LD_INT 5
18318: PUSH
18319: FOR_TO
18320: IFFALSE 18399
// begin uc_nation := nation_nature ;
18322: LD_ADDR_OWVAR 21
18326: PUSH
18327: LD_INT 0
18329: ST_TO_ADDR
// uc_side := 0 ;
18330: LD_ADDR_OWVAR 20
18334: PUSH
18335: LD_INT 0
18337: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18338: LD_ADDR_OWVAR 29
18342: PUSH
18343: LD_INT 12
18345: PUSH
18346: LD_INT 12
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: ST_TO_ADDR
// hc_agressivity := 20 ;
18353: LD_ADDR_OWVAR 35
18357: PUSH
18358: LD_INT 20
18360: ST_TO_ADDR
// hc_class := class_tiger ;
18361: LD_ADDR_OWVAR 28
18365: PUSH
18366: LD_INT 14
18368: ST_TO_ADDR
// hc_gallery :=  ;
18369: LD_ADDR_OWVAR 33
18373: PUSH
18374: LD_STRING 
18376: ST_TO_ADDR
// hc_name :=  ;
18377: LD_ADDR_OWVAR 26
18381: PUSH
18382: LD_STRING 
18384: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18385: CALL_OW 44
18389: PPUSH
18390: LD_INT 0
18392: PPUSH
18393: CALL_OW 51
// end ;
18397: GO 18319
18399: POP
18400: POP
// end ;
18401: PPOPN 1
18403: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18404: LD_EXP 45
18408: IFFALSE 18416
18410: PUSH
18411: LD_EXP 65
18415: AND
18416: IFFALSE 18425
18418: GO 18420
18420: DISABLE
// StreamSibBomb ;
18421: CALL 18426 0 0
18425: END
// export function StreamSibBomb ; var i , x , y ; begin
18426: LD_INT 0
18428: PPUSH
18429: PPUSH
18430: PPUSH
18431: PPUSH
// result := false ;
18432: LD_ADDR_VAR 0 1
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// for i := 1 to 16 do
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: DOUBLE
18446: LD_INT 1
18448: DEC
18449: ST_TO_ADDR
18450: LD_INT 16
18452: PUSH
18453: FOR_TO
18454: IFFALSE 18653
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18456: LD_ADDR_VAR 0 3
18460: PUSH
18461: LD_INT 10
18463: PUSH
18464: LD_INT 20
18466: PUSH
18467: LD_INT 30
18469: PUSH
18470: LD_INT 40
18472: PUSH
18473: LD_INT 50
18475: PUSH
18476: LD_INT 60
18478: PUSH
18479: LD_INT 70
18481: PUSH
18482: LD_INT 80
18484: PUSH
18485: LD_INT 90
18487: PUSH
18488: LD_INT 100
18490: PUSH
18491: LD_INT 110
18493: PUSH
18494: LD_INT 120
18496: PUSH
18497: LD_INT 130
18499: PUSH
18500: LD_INT 140
18502: PUSH
18503: LD_INT 150
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: PPUSH
18526: LD_INT 15
18528: PPUSH
18529: CALL_OW 12
18533: ARRAY
18534: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18535: LD_ADDR_VAR 0 4
18539: PUSH
18540: LD_INT 10
18542: PUSH
18543: LD_INT 20
18545: PUSH
18546: LD_INT 30
18548: PUSH
18549: LD_INT 40
18551: PUSH
18552: LD_INT 50
18554: PUSH
18555: LD_INT 60
18557: PUSH
18558: LD_INT 70
18560: PUSH
18561: LD_INT 80
18563: PUSH
18564: LD_INT 90
18566: PUSH
18567: LD_INT 100
18569: PUSH
18570: LD_INT 110
18572: PUSH
18573: LD_INT 120
18575: PUSH
18576: LD_INT 130
18578: PUSH
18579: LD_INT 140
18581: PUSH
18582: LD_INT 150
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 1
18604: PPUSH
18605: LD_INT 15
18607: PPUSH
18608: CALL_OW 12
18612: ARRAY
18613: ST_TO_ADDR
// if ValidHex ( x , y ) then
18614: LD_VAR 0 3
18618: PPUSH
18619: LD_VAR 0 4
18623: PPUSH
18624: CALL_OW 488
18628: IFFALSE 18651
// begin result := [ x , y ] ;
18630: LD_ADDR_VAR 0 1
18634: PUSH
18635: LD_VAR 0 3
18639: PUSH
18640: LD_VAR 0 4
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: ST_TO_ADDR
// break ;
18649: GO 18653
// end ; end ;
18651: GO 18453
18653: POP
18654: POP
// if result then
18655: LD_VAR 0 1
18659: IFFALSE 18719
// begin ToLua ( playSibBomb() ) ;
18661: LD_STRING playSibBomb()
18663: PPUSH
18664: CALL_OW 559
// wait ( 0 0$14 ) ;
18668: LD_INT 490
18670: PPUSH
18671: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18675: LD_VAR 0 1
18679: PUSH
18680: LD_INT 1
18682: ARRAY
18683: PPUSH
18684: LD_VAR 0 1
18688: PUSH
18689: LD_INT 2
18691: ARRAY
18692: PPUSH
18693: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18697: LD_VAR 0 1
18701: PUSH
18702: LD_INT 1
18704: ARRAY
18705: PPUSH
18706: LD_VAR 0 1
18710: PUSH
18711: LD_INT 2
18713: ARRAY
18714: PPUSH
18715: CALL_OW 429
// end ; end ;
18719: LD_VAR 0 1
18723: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18724: LD_EXP 45
18728: IFFALSE 18736
18730: PUSH
18731: LD_EXP 67
18735: AND
18736: IFFALSE 18748
18738: GO 18740
18740: DISABLE
// YouLost (  ) ;
18741: LD_STRING 
18743: PPUSH
18744: CALL_OW 104
18748: END
// every 0 0$1 trigger StreamModeActive and sFog do
18749: LD_EXP 45
18753: IFFALSE 18761
18755: PUSH
18756: LD_EXP 66
18760: AND
18761: IFFALSE 18775
18763: GO 18765
18765: DISABLE
// FogOff ( your_side ) ;
18766: LD_OWVAR 2
18770: PPUSH
18771: CALL_OW 344
18775: END
// every 0 0$1 trigger StreamModeActive and sSun do
18776: LD_EXP 45
18780: IFFALSE 18788
18782: PUSH
18783: LD_EXP 68
18787: AND
18788: IFFALSE 18816
18790: GO 18792
18792: DISABLE
// begin solar_recharge_percent := 0 ;
18793: LD_ADDR_OWVAR 79
18797: PUSH
18798: LD_INT 0
18800: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18801: LD_INT 10500
18803: PPUSH
18804: CALL_OW 67
// solar_recharge_percent := 100 ;
18808: LD_ADDR_OWVAR 79
18812: PUSH
18813: LD_INT 100
18815: ST_TO_ADDR
// end ;
18816: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18817: LD_EXP 45
18821: IFFALSE 18829
18823: PUSH
18824: LD_EXP 69
18828: AND
18829: IFFALSE 19068
18831: GO 18833
18833: DISABLE
18834: LD_INT 0
18836: PPUSH
18837: PPUSH
18838: PPUSH
// begin tmp := [ ] ;
18839: LD_ADDR_VAR 0 3
18843: PUSH
18844: EMPTY
18845: ST_TO_ADDR
// for i := 1 to 6 do
18846: LD_ADDR_VAR 0 1
18850: PUSH
18851: DOUBLE
18852: LD_INT 1
18854: DEC
18855: ST_TO_ADDR
18856: LD_INT 6
18858: PUSH
18859: FOR_TO
18860: IFFALSE 18965
// begin uc_nation := nation_nature ;
18862: LD_ADDR_OWVAR 21
18866: PUSH
18867: LD_INT 0
18869: ST_TO_ADDR
// uc_side := 0 ;
18870: LD_ADDR_OWVAR 20
18874: PUSH
18875: LD_INT 0
18877: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18878: LD_ADDR_OWVAR 29
18882: PUSH
18883: LD_INT 12
18885: PUSH
18886: LD_INT 12
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: ST_TO_ADDR
// hc_agressivity := 20 ;
18893: LD_ADDR_OWVAR 35
18897: PUSH
18898: LD_INT 20
18900: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18901: LD_ADDR_OWVAR 28
18905: PUSH
18906: LD_INT 17
18908: ST_TO_ADDR
// hc_gallery :=  ;
18909: LD_ADDR_OWVAR 33
18913: PUSH
18914: LD_STRING 
18916: ST_TO_ADDR
// hc_name :=  ;
18917: LD_ADDR_OWVAR 26
18921: PUSH
18922: LD_STRING 
18924: ST_TO_ADDR
// un := CreateHuman ;
18925: LD_ADDR_VAR 0 2
18929: PUSH
18930: CALL_OW 44
18934: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18935: LD_VAR 0 2
18939: PPUSH
18940: LD_INT 1
18942: PPUSH
18943: CALL_OW 51
// tmp := tmp ^ un ;
18947: LD_ADDR_VAR 0 3
18951: PUSH
18952: LD_VAR 0 3
18956: PUSH
18957: LD_VAR 0 2
18961: ADD
18962: ST_TO_ADDR
// end ;
18963: GO 18859
18965: POP
18966: POP
// repeat wait ( 0 0$1 ) ;
18967: LD_INT 35
18969: PPUSH
18970: CALL_OW 67
// for un in tmp do
18974: LD_ADDR_VAR 0 2
18978: PUSH
18979: LD_VAR 0 3
18983: PUSH
18984: FOR_IN
18985: IFFALSE 19059
// begin if IsDead ( un ) then
18987: LD_VAR 0 2
18991: PPUSH
18992: CALL_OW 301
18996: IFFALSE 19016
// begin tmp := tmp diff un ;
18998: LD_ADDR_VAR 0 3
19002: PUSH
19003: LD_VAR 0 3
19007: PUSH
19008: LD_VAR 0 2
19012: DIFF
19013: ST_TO_ADDR
// continue ;
19014: GO 18984
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19016: LD_VAR 0 2
19020: PPUSH
19021: LD_INT 3
19023: PUSH
19024: LD_INT 22
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: PPUSH
19043: LD_VAR 0 2
19047: PPUSH
19048: CALL_OW 74
19052: PPUSH
19053: CALL_OW 115
// end ;
19057: GO 18984
19059: POP
19060: POP
// until not tmp ;
19061: LD_VAR 0 3
19065: NOT
19066: IFFALSE 18967
// end ;
19068: PPOPN 3
19070: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19071: LD_EXP 45
19075: IFFALSE 19083
19077: PUSH
19078: LD_EXP 70
19082: AND
19083: IFFALSE 19137
19085: GO 19087
19087: DISABLE
// begin ToLua ( displayTroll(); ) ;
19088: LD_STRING displayTroll();
19090: PPUSH
19091: CALL_OW 559
// wait ( 3 3$00 ) ;
19095: LD_INT 6300
19097: PPUSH
19098: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19102: LD_STRING hideTroll();
19104: PPUSH
19105: CALL_OW 559
// wait ( 1 1$00 ) ;
19109: LD_INT 2100
19111: PPUSH
19112: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19116: LD_STRING displayTroll();
19118: PPUSH
19119: CALL_OW 559
// wait ( 1 1$00 ) ;
19123: LD_INT 2100
19125: PPUSH
19126: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19130: LD_STRING hideTroll();
19132: PPUSH
19133: CALL_OW 559
// end ;
19137: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19138: LD_EXP 45
19142: IFFALSE 19150
19144: PUSH
19145: LD_EXP 71
19149: AND
19150: IFFALSE 19213
19152: GO 19154
19154: DISABLE
19155: LD_INT 0
19157: PPUSH
// begin p := 0 ;
19158: LD_ADDR_VAR 0 1
19162: PUSH
19163: LD_INT 0
19165: ST_TO_ADDR
// repeat game_speed := 1 ;
19166: LD_ADDR_OWVAR 65
19170: PUSH
19171: LD_INT 1
19173: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19174: LD_INT 35
19176: PPUSH
19177: CALL_OW 67
// p := p + 1 ;
19181: LD_ADDR_VAR 0 1
19185: PUSH
19186: LD_VAR 0 1
19190: PUSH
19191: LD_INT 1
19193: PLUS
19194: ST_TO_ADDR
// until p >= 60 ;
19195: LD_VAR 0 1
19199: PUSH
19200: LD_INT 60
19202: GREATEREQUAL
19203: IFFALSE 19166
// game_speed := 4 ;
19205: LD_ADDR_OWVAR 65
19209: PUSH
19210: LD_INT 4
19212: ST_TO_ADDR
// end ;
19213: PPOPN 1
19215: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19216: LD_EXP 45
19220: IFFALSE 19228
19222: PUSH
19223: LD_EXP 72
19227: AND
19228: IFFALSE 19374
19230: GO 19232
19232: DISABLE
19233: LD_INT 0
19235: PPUSH
19236: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19237: LD_ADDR_VAR 0 1
19241: PUSH
19242: LD_INT 22
19244: PUSH
19245: LD_OWVAR 2
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 30
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 30
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: ST_TO_ADDR
// if not depot then
19291: LD_VAR 0 1
19295: NOT
19296: IFFALSE 19300
// exit ;
19298: GO 19374
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19300: LD_ADDR_VAR 0 2
19304: PUSH
19305: LD_VAR 0 1
19309: PUSH
19310: LD_INT 1
19312: PPUSH
19313: LD_VAR 0 1
19317: PPUSH
19318: CALL_OW 12
19322: ARRAY
19323: PPUSH
19324: CALL_OW 274
19328: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19329: LD_VAR 0 2
19333: PPUSH
19334: LD_INT 1
19336: PPUSH
19337: LD_INT 0
19339: PPUSH
19340: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19344: LD_VAR 0 2
19348: PPUSH
19349: LD_INT 2
19351: PPUSH
19352: LD_INT 0
19354: PPUSH
19355: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19359: LD_VAR 0 2
19363: PPUSH
19364: LD_INT 3
19366: PPUSH
19367: LD_INT 0
19369: PPUSH
19370: CALL_OW 277
// end ;
19374: PPOPN 2
19376: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19377: LD_EXP 45
19381: IFFALSE 19389
19383: PUSH
19384: LD_EXP 73
19388: AND
19389: IFFALSE 19486
19391: GO 19393
19393: DISABLE
19394: LD_INT 0
19396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19397: LD_ADDR_VAR 0 1
19401: PUSH
19402: LD_INT 22
19404: PUSH
19405: LD_OWVAR 2
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 21
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 3
19426: PUSH
19427: LD_INT 23
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 69
19450: ST_TO_ADDR
// if not tmp then
19451: LD_VAR 0 1
19455: NOT
19456: IFFALSE 19460
// exit ;
19458: GO 19486
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19460: LD_VAR 0 1
19464: PUSH
19465: LD_INT 1
19467: PPUSH
19468: LD_VAR 0 1
19472: PPUSH
19473: CALL_OW 12
19477: ARRAY
19478: PPUSH
19479: LD_INT 200
19481: PPUSH
19482: CALL_OW 234
// end ;
19486: PPOPN 1
19488: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19489: LD_EXP 45
19493: IFFALSE 19501
19495: PUSH
19496: LD_EXP 74
19500: AND
19501: IFFALSE 19580
19503: GO 19505
19505: DISABLE
19506: LD_INT 0
19508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19509: LD_ADDR_VAR 0 1
19513: PUSH
19514: LD_INT 22
19516: PUSH
19517: LD_OWVAR 2
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 21
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PPUSH
19540: CALL_OW 69
19544: ST_TO_ADDR
// if not tmp then
19545: LD_VAR 0 1
19549: NOT
19550: IFFALSE 19554
// exit ;
19552: GO 19580
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19554: LD_VAR 0 1
19558: PUSH
19559: LD_INT 1
19561: PPUSH
19562: LD_VAR 0 1
19566: PPUSH
19567: CALL_OW 12
19571: ARRAY
19572: PPUSH
19573: LD_INT 60
19575: PPUSH
19576: CALL_OW 234
// end ;
19580: PPOPN 1
19582: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19583: LD_EXP 45
19587: IFFALSE 19595
19589: PUSH
19590: LD_EXP 75
19594: AND
19595: IFFALSE 19694
19597: GO 19599
19599: DISABLE
19600: LD_INT 0
19602: PPUSH
19603: PPUSH
// begin enable ;
19604: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19605: LD_ADDR_VAR 0 1
19609: PUSH
19610: LD_INT 22
19612: PUSH
19613: LD_OWVAR 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 61
19624: PUSH
19625: EMPTY
19626: LIST
19627: PUSH
19628: LD_INT 33
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: PPUSH
19643: CALL_OW 69
19647: ST_TO_ADDR
// if not tmp then
19648: LD_VAR 0 1
19652: NOT
19653: IFFALSE 19657
// exit ;
19655: GO 19694
// for i in tmp do
19657: LD_ADDR_VAR 0 2
19661: PUSH
19662: LD_VAR 0 1
19666: PUSH
19667: FOR_IN
19668: IFFALSE 19692
// if IsControledBy ( i ) then
19670: LD_VAR 0 2
19674: PPUSH
19675: CALL_OW 312
19679: IFFALSE 19690
// ComUnlink ( i ) ;
19681: LD_VAR 0 2
19685: PPUSH
19686: CALL_OW 136
19690: GO 19667
19692: POP
19693: POP
// end ;
19694: PPOPN 2
19696: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19697: LD_EXP 45
19701: IFFALSE 19709
19703: PUSH
19704: LD_EXP 76
19708: AND
19709: IFFALSE 19849
19711: GO 19713
19713: DISABLE
19714: LD_INT 0
19716: PPUSH
19717: PPUSH
// begin ToLua ( displayPowell(); ) ;
19718: LD_STRING displayPowell();
19720: PPUSH
19721: CALL_OW 559
// uc_side := 0 ;
19725: LD_ADDR_OWVAR 20
19729: PUSH
19730: LD_INT 0
19732: ST_TO_ADDR
// uc_nation := 2 ;
19733: LD_ADDR_OWVAR 21
19737: PUSH
19738: LD_INT 2
19740: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19741: LD_ADDR_OWVAR 37
19745: PUSH
19746: LD_INT 14
19748: ST_TO_ADDR
// vc_engine := engine_siberite ;
19749: LD_ADDR_OWVAR 39
19753: PUSH
19754: LD_INT 3
19756: ST_TO_ADDR
// vc_control := control_apeman ;
19757: LD_ADDR_OWVAR 38
19761: PUSH
19762: LD_INT 5
19764: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19765: LD_ADDR_OWVAR 40
19769: PUSH
19770: LD_INT 29
19772: ST_TO_ADDR
// un := CreateVehicle ;
19773: LD_ADDR_VAR 0 2
19777: PUSH
19778: CALL_OW 45
19782: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19783: LD_VAR 0 2
19787: PPUSH
19788: LD_INT 1
19790: PPUSH
19791: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19795: LD_INT 35
19797: PPUSH
19798: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19802: LD_VAR 0 2
19806: PPUSH
19807: LD_INT 22
19809: PUSH
19810: LD_OWVAR 2
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PPUSH
19819: CALL_OW 69
19823: PPUSH
19824: LD_VAR 0 2
19828: PPUSH
19829: CALL_OW 74
19833: PPUSH
19834: CALL_OW 115
// until IsDead ( un ) ;
19838: LD_VAR 0 2
19842: PPUSH
19843: CALL_OW 301
19847: IFFALSE 19795
// end ;
19849: PPOPN 2
19851: END
// every 0 0$1 trigger StreamModeActive and sStu do
19852: LD_EXP 45
19856: IFFALSE 19864
19858: PUSH
19859: LD_EXP 84
19863: AND
19864: IFFALSE 19880
19866: GO 19868
19868: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19869: LD_STRING displayStucuk();
19871: PPUSH
19872: CALL_OW 559
// ResetFog ;
19876: CALL_OW 335
// end ;
19880: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19881: LD_EXP 45
19885: IFFALSE 19893
19887: PUSH
19888: LD_EXP 77
19892: AND
19893: IFFALSE 20034
19895: GO 19897
19897: DISABLE
19898: LD_INT 0
19900: PPUSH
19901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19902: LD_ADDR_VAR 0 2
19906: PUSH
19907: LD_INT 22
19909: PUSH
19910: LD_OWVAR 2
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 21
19921: PUSH
19922: LD_INT 1
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 69
19937: ST_TO_ADDR
// if not tmp then
19938: LD_VAR 0 2
19942: NOT
19943: IFFALSE 19947
// exit ;
19945: GO 20034
// un := tmp [ rand ( 1 , tmp ) ] ;
19947: LD_ADDR_VAR 0 1
19951: PUSH
19952: LD_VAR 0 2
19956: PUSH
19957: LD_INT 1
19959: PPUSH
19960: LD_VAR 0 2
19964: PPUSH
19965: CALL_OW 12
19969: ARRAY
19970: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19971: LD_VAR 0 1
19975: PPUSH
19976: LD_INT 0
19978: PPUSH
19979: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19983: LD_VAR 0 1
19987: PPUSH
19988: LD_OWVAR 3
19992: PUSH
19993: LD_VAR 0 1
19997: DIFF
19998: PPUSH
19999: LD_VAR 0 1
20003: PPUSH
20004: CALL_OW 74
20008: PPUSH
20009: CALL_OW 115
// wait ( 0 0$20 ) ;
20013: LD_INT 700
20015: PPUSH
20016: CALL_OW 67
// SetSide ( un , your_side ) ;
20020: LD_VAR 0 1
20024: PPUSH
20025: LD_OWVAR 2
20029: PPUSH
20030: CALL_OW 235
// end ;
20034: PPOPN 2
20036: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20037: LD_EXP 45
20041: IFFALSE 20049
20043: PUSH
20044: LD_EXP 78
20048: AND
20049: IFFALSE 20155
20051: GO 20053
20053: DISABLE
20054: LD_INT 0
20056: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20057: LD_ADDR_VAR 0 1
20061: PUSH
20062: LD_INT 22
20064: PUSH
20065: LD_OWVAR 2
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 2
20076: PUSH
20077: LD_INT 30
20079: PUSH
20080: LD_INT 0
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 30
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PPUSH
20106: CALL_OW 69
20110: ST_TO_ADDR
// if not depot then
20111: LD_VAR 0 1
20115: NOT
20116: IFFALSE 20120
// exit ;
20118: GO 20155
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20120: LD_VAR 0 1
20124: PUSH
20125: LD_INT 1
20127: ARRAY
20128: PPUSH
20129: CALL_OW 250
20133: PPUSH
20134: LD_VAR 0 1
20138: PUSH
20139: LD_INT 1
20141: ARRAY
20142: PPUSH
20143: CALL_OW 251
20147: PPUSH
20148: LD_INT 70
20150: PPUSH
20151: CALL_OW 495
// end ;
20155: PPOPN 1
20157: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20158: LD_EXP 45
20162: IFFALSE 20170
20164: PUSH
20165: LD_EXP 79
20169: AND
20170: IFFALSE 20381
20172: GO 20174
20174: DISABLE
20175: LD_INT 0
20177: PPUSH
20178: PPUSH
20179: PPUSH
20180: PPUSH
20181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20182: LD_ADDR_VAR 0 5
20186: PUSH
20187: LD_INT 22
20189: PUSH
20190: LD_OWVAR 2
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 21
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PPUSH
20213: CALL_OW 69
20217: ST_TO_ADDR
// if not tmp then
20218: LD_VAR 0 5
20222: NOT
20223: IFFALSE 20227
// exit ;
20225: GO 20381
// for i in tmp do
20227: LD_ADDR_VAR 0 1
20231: PUSH
20232: LD_VAR 0 5
20236: PUSH
20237: FOR_IN
20238: IFFALSE 20379
// begin d := rand ( 0 , 5 ) ;
20240: LD_ADDR_VAR 0 4
20244: PUSH
20245: LD_INT 0
20247: PPUSH
20248: LD_INT 5
20250: PPUSH
20251: CALL_OW 12
20255: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20256: LD_ADDR_VAR 0 2
20260: PUSH
20261: LD_VAR 0 1
20265: PPUSH
20266: CALL_OW 250
20270: PPUSH
20271: LD_VAR 0 4
20275: PPUSH
20276: LD_INT 3
20278: PPUSH
20279: LD_INT 12
20281: PPUSH
20282: CALL_OW 12
20286: PPUSH
20287: CALL_OW 272
20291: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_VAR 0 1
20301: PPUSH
20302: CALL_OW 251
20306: PPUSH
20307: LD_VAR 0 4
20311: PPUSH
20312: LD_INT 3
20314: PPUSH
20315: LD_INT 12
20317: PPUSH
20318: CALL_OW 12
20322: PPUSH
20323: CALL_OW 273
20327: ST_TO_ADDR
// if ValidHex ( x , y ) then
20328: LD_VAR 0 2
20332: PPUSH
20333: LD_VAR 0 3
20337: PPUSH
20338: CALL_OW 488
20342: IFFALSE 20377
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20344: LD_VAR 0 1
20348: PPUSH
20349: LD_VAR 0 2
20353: PPUSH
20354: LD_VAR 0 3
20358: PPUSH
20359: LD_INT 3
20361: PPUSH
20362: LD_INT 6
20364: PPUSH
20365: CALL_OW 12
20369: PPUSH
20370: LD_INT 1
20372: PPUSH
20373: CALL_OW 483
// end ;
20377: GO 20237
20379: POP
20380: POP
// end ;
20381: PPOPN 5
20383: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20384: LD_EXP 45
20388: IFFALSE 20396
20390: PUSH
20391: LD_EXP 80
20395: AND
20396: IFFALSE 20490
20398: GO 20400
20400: DISABLE
20401: LD_INT 0
20403: PPUSH
20404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20405: LD_ADDR_VAR 0 2
20409: PUSH
20410: LD_INT 22
20412: PUSH
20413: LD_OWVAR 2
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 32
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 21
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: LIST
20446: PPUSH
20447: CALL_OW 69
20451: ST_TO_ADDR
// if not tmp then
20452: LD_VAR 0 2
20456: NOT
20457: IFFALSE 20461
// exit ;
20459: GO 20490
// for i in tmp do
20461: LD_ADDR_VAR 0 1
20465: PUSH
20466: LD_VAR 0 2
20470: PUSH
20471: FOR_IN
20472: IFFALSE 20488
// SetFuel ( i , 0 ) ;
20474: LD_VAR 0 1
20478: PPUSH
20479: LD_INT 0
20481: PPUSH
20482: CALL_OW 240
20486: GO 20471
20488: POP
20489: POP
// end ;
20490: PPOPN 2
20492: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20493: LD_EXP 45
20497: IFFALSE 20505
20499: PUSH
20500: LD_EXP 81
20504: AND
20505: IFFALSE 20571
20507: GO 20509
20509: DISABLE
20510: LD_INT 0
20512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20513: LD_ADDR_VAR 0 1
20517: PUSH
20518: LD_INT 22
20520: PUSH
20521: LD_OWVAR 2
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 30
20532: PUSH
20533: LD_INT 29
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PPUSH
20544: CALL_OW 69
20548: ST_TO_ADDR
// if not tmp then
20549: LD_VAR 0 1
20553: NOT
20554: IFFALSE 20558
// exit ;
20556: GO 20571
// DestroyUnit ( tmp [ 1 ] ) ;
20558: LD_VAR 0 1
20562: PUSH
20563: LD_INT 1
20565: ARRAY
20566: PPUSH
20567: CALL_OW 65
// end ;
20571: PPOPN 1
20573: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20574: LD_EXP 45
20578: IFFALSE 20586
20580: PUSH
20581: LD_EXP 83
20585: AND
20586: IFFALSE 20715
20588: GO 20590
20590: DISABLE
20591: LD_INT 0
20593: PPUSH
// begin uc_side := 0 ;
20594: LD_ADDR_OWVAR 20
20598: PUSH
20599: LD_INT 0
20601: ST_TO_ADDR
// uc_nation := nation_arabian ;
20602: LD_ADDR_OWVAR 21
20606: PUSH
20607: LD_INT 2
20609: ST_TO_ADDR
// hc_gallery :=  ;
20610: LD_ADDR_OWVAR 33
20614: PUSH
20615: LD_STRING 
20617: ST_TO_ADDR
// hc_name :=  ;
20618: LD_ADDR_OWVAR 26
20622: PUSH
20623: LD_STRING 
20625: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20626: LD_INT 1
20628: PPUSH
20629: LD_INT 11
20631: PPUSH
20632: LD_INT 10
20634: PPUSH
20635: CALL_OW 380
// un := CreateHuman ;
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: CALL_OW 44
20648: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20649: LD_VAR 0 1
20653: PPUSH
20654: LD_INT 1
20656: PPUSH
20657: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20661: LD_INT 35
20663: PPUSH
20664: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20668: LD_VAR 0 1
20672: PPUSH
20673: LD_INT 22
20675: PUSH
20676: LD_OWVAR 2
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PPUSH
20685: CALL_OW 69
20689: PPUSH
20690: LD_VAR 0 1
20694: PPUSH
20695: CALL_OW 74
20699: PPUSH
20700: CALL_OW 115
// until IsDead ( un ) ;
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 301
20713: IFFALSE 20661
// end ;
20715: PPOPN 1
20717: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20718: LD_EXP 45
20722: IFFALSE 20730
20724: PUSH
20725: LD_EXP 85
20729: AND
20730: IFFALSE 20742
20732: GO 20734
20734: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20735: LD_STRING earthquake(getX(game), 0, 32)
20737: PPUSH
20738: CALL_OW 559
20742: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20743: LD_EXP 45
20747: IFFALSE 20755
20749: PUSH
20750: LD_EXP 86
20754: AND
20755: IFFALSE 20846
20757: GO 20759
20759: DISABLE
20760: LD_INT 0
20762: PPUSH
// begin enable ;
20763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20764: LD_ADDR_VAR 0 1
20768: PUSH
20769: LD_INT 22
20771: PUSH
20772: LD_OWVAR 2
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 21
20783: PUSH
20784: LD_INT 2
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 33
20793: PUSH
20794: LD_INT 3
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: PPUSH
20806: CALL_OW 69
20810: ST_TO_ADDR
// if not tmp then
20811: LD_VAR 0 1
20815: NOT
20816: IFFALSE 20820
// exit ;
20818: GO 20846
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20820: LD_VAR 0 1
20824: PUSH
20825: LD_INT 1
20827: PPUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: CALL_OW 12
20837: ARRAY
20838: PPUSH
20839: LD_INT 1
20841: PPUSH
20842: CALL_OW 234
// end ;
20846: PPOPN 1
20848: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20849: LD_EXP 45
20853: IFFALSE 20861
20855: PUSH
20856: LD_EXP 87
20860: AND
20861: IFFALSE 21002
20863: GO 20865
20865: DISABLE
20866: LD_INT 0
20868: PPUSH
20869: PPUSH
20870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20871: LD_ADDR_VAR 0 3
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_OWVAR 2
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 25
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PPUSH
20902: CALL_OW 69
20906: ST_TO_ADDR
// if not tmp then
20907: LD_VAR 0 3
20911: NOT
20912: IFFALSE 20916
// exit ;
20914: GO 21002
// un := tmp [ rand ( 1 , tmp ) ] ;
20916: LD_ADDR_VAR 0 2
20920: PUSH
20921: LD_VAR 0 3
20925: PUSH
20926: LD_INT 1
20928: PPUSH
20929: LD_VAR 0 3
20933: PPUSH
20934: CALL_OW 12
20938: ARRAY
20939: ST_TO_ADDR
// if Crawls ( un ) then
20940: LD_VAR 0 2
20944: PPUSH
20945: CALL_OW 318
20949: IFFALSE 20960
// ComWalk ( un ) ;
20951: LD_VAR 0 2
20955: PPUSH
20956: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20960: LD_VAR 0 2
20964: PPUSH
20965: LD_INT 9
20967: PPUSH
20968: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20972: LD_INT 28
20974: PPUSH
20975: LD_OWVAR 2
20979: PPUSH
20980: LD_INT 2
20982: PPUSH
20983: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20987: LD_INT 29
20989: PPUSH
20990: LD_OWVAR 2
20994: PPUSH
20995: LD_INT 2
20997: PPUSH
20998: CALL_OW 322
// end ;
21002: PPOPN 3
21004: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21005: LD_EXP 45
21009: IFFALSE 21017
21011: PUSH
21012: LD_EXP 88
21016: AND
21017: IFFALSE 21128
21019: GO 21021
21021: DISABLE
21022: LD_INT 0
21024: PPUSH
21025: PPUSH
21026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21027: LD_ADDR_VAR 0 3
21031: PUSH
21032: LD_INT 22
21034: PUSH
21035: LD_OWVAR 2
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 25
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PPUSH
21058: CALL_OW 69
21062: ST_TO_ADDR
// if not tmp then
21063: LD_VAR 0 3
21067: NOT
21068: IFFALSE 21072
// exit ;
21070: GO 21128
// un := tmp [ rand ( 1 , tmp ) ] ;
21072: LD_ADDR_VAR 0 2
21076: PUSH
21077: LD_VAR 0 3
21081: PUSH
21082: LD_INT 1
21084: PPUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: CALL_OW 12
21094: ARRAY
21095: ST_TO_ADDR
// if Crawls ( un ) then
21096: LD_VAR 0 2
21100: PPUSH
21101: CALL_OW 318
21105: IFFALSE 21116
// ComWalk ( un ) ;
21107: LD_VAR 0 2
21111: PPUSH
21112: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21116: LD_VAR 0 2
21120: PPUSH
21121: LD_INT 8
21123: PPUSH
21124: CALL_OW 336
// end ;
21128: PPOPN 3
21130: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21131: LD_EXP 45
21135: IFFALSE 21143
21137: PUSH
21138: LD_EXP 89
21142: AND
21143: IFFALSE 21287
21145: GO 21147
21147: DISABLE
21148: LD_INT 0
21150: PPUSH
21151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21152: LD_ADDR_VAR 0 2
21156: PUSH
21157: LD_INT 22
21159: PUSH
21160: LD_OWVAR 2
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 21
21171: PUSH
21172: LD_INT 2
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: LD_INT 34
21184: PUSH
21185: LD_INT 12
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 34
21194: PUSH
21195: LD_INT 51
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 34
21204: PUSH
21205: LD_INT 32
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: LIST
21222: PPUSH
21223: CALL_OW 69
21227: ST_TO_ADDR
// if not tmp then
21228: LD_VAR 0 2
21232: NOT
21233: IFFALSE 21237
// exit ;
21235: GO 21287
// for i in tmp do
21237: LD_ADDR_VAR 0 1
21241: PUSH
21242: LD_VAR 0 2
21246: PUSH
21247: FOR_IN
21248: IFFALSE 21285
// if GetCargo ( i , mat_artifact ) = 0 then
21250: LD_VAR 0 1
21254: PPUSH
21255: LD_INT 4
21257: PPUSH
21258: CALL_OW 289
21262: PUSH
21263: LD_INT 0
21265: EQUAL
21266: IFFALSE 21283
// SetCargo ( i , mat_siberit , 100 ) ;
21268: LD_VAR 0 1
21272: PPUSH
21273: LD_INT 3
21275: PPUSH
21276: LD_INT 100
21278: PPUSH
21279: CALL_OW 290
21283: GO 21247
21285: POP
21286: POP
// end ;
21287: PPOPN 2
21289: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21290: LD_EXP 45
21294: IFFALSE 21302
21296: PUSH
21297: LD_EXP 90
21301: AND
21302: IFFALSE 21485
21304: GO 21306
21306: DISABLE
21307: LD_INT 0
21309: PPUSH
21310: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21311: LD_ADDR_VAR 0 2
21315: PUSH
21316: LD_INT 22
21318: PUSH
21319: LD_OWVAR 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PPUSH
21328: CALL_OW 69
21332: ST_TO_ADDR
// if not tmp then
21333: LD_VAR 0 2
21337: NOT
21338: IFFALSE 21342
// exit ;
21340: GO 21485
// for i := 1 to 2 do
21342: LD_ADDR_VAR 0 1
21346: PUSH
21347: DOUBLE
21348: LD_INT 1
21350: DEC
21351: ST_TO_ADDR
21352: LD_INT 2
21354: PUSH
21355: FOR_TO
21356: IFFALSE 21483
// begin uc_side := your_side ;
21358: LD_ADDR_OWVAR 20
21362: PUSH
21363: LD_OWVAR 2
21367: ST_TO_ADDR
// uc_nation := nation_american ;
21368: LD_ADDR_OWVAR 21
21372: PUSH
21373: LD_INT 1
21375: ST_TO_ADDR
// vc_chassis := us_morphling ;
21376: LD_ADDR_OWVAR 37
21380: PUSH
21381: LD_INT 5
21383: ST_TO_ADDR
// vc_engine := engine_siberite ;
21384: LD_ADDR_OWVAR 39
21388: PUSH
21389: LD_INT 3
21391: ST_TO_ADDR
// vc_control := control_computer ;
21392: LD_ADDR_OWVAR 38
21396: PUSH
21397: LD_INT 3
21399: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21400: LD_ADDR_OWVAR 40
21404: PUSH
21405: LD_INT 10
21407: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21408: LD_VAR 0 2
21412: PUSH
21413: LD_INT 1
21415: ARRAY
21416: PPUSH
21417: CALL_OW 310
21421: NOT
21422: IFFALSE 21469
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21424: CALL_OW 45
21428: PPUSH
21429: LD_VAR 0 2
21433: PUSH
21434: LD_INT 1
21436: ARRAY
21437: PPUSH
21438: CALL_OW 250
21442: PPUSH
21443: LD_VAR 0 2
21447: PUSH
21448: LD_INT 1
21450: ARRAY
21451: PPUSH
21452: CALL_OW 251
21456: PPUSH
21457: LD_INT 12
21459: PPUSH
21460: LD_INT 1
21462: PPUSH
21463: CALL_OW 50
21467: GO 21481
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21469: CALL_OW 45
21473: PPUSH
21474: LD_INT 1
21476: PPUSH
21477: CALL_OW 51
// end ;
21481: GO 21355
21483: POP
21484: POP
// end ;
21485: PPOPN 2
21487: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21488: LD_EXP 45
21492: IFFALSE 21500
21494: PUSH
21495: LD_EXP 91
21499: AND
21500: IFFALSE 21722
21502: GO 21504
21504: DISABLE
21505: LD_INT 0
21507: PPUSH
21508: PPUSH
21509: PPUSH
21510: PPUSH
21511: PPUSH
21512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21513: LD_ADDR_VAR 0 6
21517: PUSH
21518: LD_INT 22
21520: PUSH
21521: LD_OWVAR 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 21
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 3
21542: PUSH
21543: LD_INT 23
21545: PUSH
21546: LD_INT 0
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: LIST
21561: PPUSH
21562: CALL_OW 69
21566: ST_TO_ADDR
// if not tmp then
21567: LD_VAR 0 6
21571: NOT
21572: IFFALSE 21576
// exit ;
21574: GO 21722
// s1 := rand ( 1 , 4 ) ;
21576: LD_ADDR_VAR 0 2
21580: PUSH
21581: LD_INT 1
21583: PPUSH
21584: LD_INT 4
21586: PPUSH
21587: CALL_OW 12
21591: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21592: LD_ADDR_VAR 0 4
21596: PUSH
21597: LD_VAR 0 6
21601: PUSH
21602: LD_INT 1
21604: ARRAY
21605: PPUSH
21606: LD_VAR 0 2
21610: PPUSH
21611: CALL_OW 259
21615: ST_TO_ADDR
// if s1 = 1 then
21616: LD_VAR 0 2
21620: PUSH
21621: LD_INT 1
21623: EQUAL
21624: IFFALSE 21644
// s2 := rand ( 2 , 4 ) else
21626: LD_ADDR_VAR 0 3
21630: PUSH
21631: LD_INT 2
21633: PPUSH
21634: LD_INT 4
21636: PPUSH
21637: CALL_OW 12
21641: ST_TO_ADDR
21642: GO 21652
// s2 := 1 ;
21644: LD_ADDR_VAR 0 3
21648: PUSH
21649: LD_INT 1
21651: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21652: LD_ADDR_VAR 0 5
21656: PUSH
21657: LD_VAR 0 6
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: PPUSH
21666: LD_VAR 0 3
21670: PPUSH
21671: CALL_OW 259
21675: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21676: LD_VAR 0 6
21680: PUSH
21681: LD_INT 1
21683: ARRAY
21684: PPUSH
21685: LD_VAR 0 2
21689: PPUSH
21690: LD_VAR 0 5
21694: PPUSH
21695: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21699: LD_VAR 0 6
21703: PUSH
21704: LD_INT 1
21706: ARRAY
21707: PPUSH
21708: LD_VAR 0 3
21712: PPUSH
21713: LD_VAR 0 4
21717: PPUSH
21718: CALL_OW 237
// end ;
21722: PPOPN 6
21724: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21725: LD_EXP 45
21729: IFFALSE 21737
21731: PUSH
21732: LD_EXP 92
21736: AND
21737: IFFALSE 21816
21739: GO 21741
21741: DISABLE
21742: LD_INT 0
21744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21745: LD_ADDR_VAR 0 1
21749: PUSH
21750: LD_INT 22
21752: PUSH
21753: LD_OWVAR 2
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 30
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PPUSH
21776: CALL_OW 69
21780: ST_TO_ADDR
// if not tmp then
21781: LD_VAR 0 1
21785: NOT
21786: IFFALSE 21790
// exit ;
21788: GO 21816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21790: LD_VAR 0 1
21794: PUSH
21795: LD_INT 1
21797: PPUSH
21798: LD_VAR 0 1
21802: PPUSH
21803: CALL_OW 12
21807: ARRAY
21808: PPUSH
21809: LD_INT 1
21811: PPUSH
21812: CALL_OW 234
// end ;
21816: PPOPN 1
21818: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21819: LD_EXP 45
21823: IFFALSE 21831
21825: PUSH
21826: LD_EXP 93
21830: AND
21831: IFFALSE 21943
21833: GO 21835
21835: DISABLE
21836: LD_INT 0
21838: PPUSH
21839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21840: LD_ADDR_VAR 0 2
21844: PUSH
21845: LD_INT 22
21847: PUSH
21848: LD_OWVAR 2
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 2
21859: PUSH
21860: LD_INT 30
21862: PUSH
21863: LD_INT 27
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 30
21872: PUSH
21873: LD_INT 26
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 30
21882: PUSH
21883: LD_INT 28
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PPUSH
21900: CALL_OW 69
21904: ST_TO_ADDR
// if not tmp then
21905: LD_VAR 0 2
21909: NOT
21910: IFFALSE 21914
// exit ;
21912: GO 21943
// for i in tmp do
21914: LD_ADDR_VAR 0 1
21918: PUSH
21919: LD_VAR 0 2
21923: PUSH
21924: FOR_IN
21925: IFFALSE 21941
// SetLives ( i , 1 ) ;
21927: LD_VAR 0 1
21931: PPUSH
21932: LD_INT 1
21934: PPUSH
21935: CALL_OW 234
21939: GO 21924
21941: POP
21942: POP
// end ;
21943: PPOPN 2
21945: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21946: LD_EXP 45
21950: IFFALSE 21958
21952: PUSH
21953: LD_EXP 94
21957: AND
21958: IFFALSE 22245
21960: GO 21962
21962: DISABLE
21963: LD_INT 0
21965: PPUSH
21966: PPUSH
21967: PPUSH
// begin i := rand ( 1 , 7 ) ;
21968: LD_ADDR_VAR 0 1
21972: PUSH
21973: LD_INT 1
21975: PPUSH
21976: LD_INT 7
21978: PPUSH
21979: CALL_OW 12
21983: ST_TO_ADDR
// case i of 1 :
21984: LD_VAR 0 1
21988: PUSH
21989: LD_INT 1
21991: DOUBLE
21992: EQUAL
21993: IFTRUE 21997
21995: GO 22007
21997: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21998: LD_STRING earthquake(getX(game), 0, 32)
22000: PPUSH
22001: CALL_OW 559
22005: GO 22245
22007: LD_INT 2
22009: DOUBLE
22010: EQUAL
22011: IFTRUE 22015
22013: GO 22029
22015: POP
// begin ToLua ( displayStucuk(); ) ;
22016: LD_STRING displayStucuk();
22018: PPUSH
22019: CALL_OW 559
// ResetFog ;
22023: CALL_OW 335
// end ; 3 :
22027: GO 22245
22029: LD_INT 3
22031: DOUBLE
22032: EQUAL
22033: IFTRUE 22037
22035: GO 22141
22037: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22038: LD_ADDR_VAR 0 2
22042: PUSH
22043: LD_INT 22
22045: PUSH
22046: LD_OWVAR 2
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 25
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PPUSH
22069: CALL_OW 69
22073: ST_TO_ADDR
// if not tmp then
22074: LD_VAR 0 2
22078: NOT
22079: IFFALSE 22083
// exit ;
22081: GO 22245
// un := tmp [ rand ( 1 , tmp ) ] ;
22083: LD_ADDR_VAR 0 3
22087: PUSH
22088: LD_VAR 0 2
22092: PUSH
22093: LD_INT 1
22095: PPUSH
22096: LD_VAR 0 2
22100: PPUSH
22101: CALL_OW 12
22105: ARRAY
22106: ST_TO_ADDR
// if Crawls ( un ) then
22107: LD_VAR 0 3
22111: PPUSH
22112: CALL_OW 318
22116: IFFALSE 22127
// ComWalk ( un ) ;
22118: LD_VAR 0 3
22122: PPUSH
22123: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22127: LD_VAR 0 3
22131: PPUSH
22132: LD_INT 8
22134: PPUSH
22135: CALL_OW 336
// end ; 4 :
22139: GO 22245
22141: LD_INT 4
22143: DOUBLE
22144: EQUAL
22145: IFTRUE 22149
22147: GO 22223
22149: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22150: LD_ADDR_VAR 0 2
22154: PUSH
22155: LD_INT 22
22157: PUSH
22158: LD_OWVAR 2
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 30
22169: PUSH
22170: LD_INT 29
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PPUSH
22181: CALL_OW 69
22185: ST_TO_ADDR
// if not tmp then
22186: LD_VAR 0 2
22190: NOT
22191: IFFALSE 22195
// exit ;
22193: GO 22245
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22195: LD_VAR 0 2
22199: PUSH
22200: LD_INT 1
22202: ARRAY
22203: PPUSH
22204: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22208: LD_VAR 0 2
22212: PUSH
22213: LD_INT 1
22215: ARRAY
22216: PPUSH
22217: CALL_OW 65
// end ; 5 .. 7 :
22221: GO 22245
22223: LD_INT 5
22225: DOUBLE
22226: GREATEREQUAL
22227: IFFALSE 22235
22229: LD_INT 7
22231: DOUBLE
22232: LESSEQUAL
22233: IFTRUE 22237
22235: GO 22244
22237: POP
// StreamSibBomb ; end ;
22238: CALL 18426 0 0
22242: GO 22245
22244: POP
// end ;
22245: PPOPN 3
22247: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22248: LD_EXP 45
22252: IFFALSE 22260
22254: PUSH
22255: LD_EXP 95
22259: AND
22260: IFFALSE 22416
22262: GO 22264
22264: DISABLE
22265: LD_INT 0
22267: PPUSH
22268: PPUSH
22269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22270: LD_ADDR_VAR 0 2
22274: PUSH
22275: LD_INT 81
22277: PUSH
22278: LD_OWVAR 2
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 2
22289: PUSH
22290: LD_INT 21
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 21
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PPUSH
22319: CALL_OW 69
22323: ST_TO_ADDR
// if not tmp then
22324: LD_VAR 0 2
22328: NOT
22329: IFFALSE 22333
// exit ;
22331: GO 22416
// p := 0 ;
22333: LD_ADDR_VAR 0 3
22337: PUSH
22338: LD_INT 0
22340: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22341: LD_INT 35
22343: PPUSH
22344: CALL_OW 67
// p := p + 1 ;
22348: LD_ADDR_VAR 0 3
22352: PUSH
22353: LD_VAR 0 3
22357: PUSH
22358: LD_INT 1
22360: PLUS
22361: ST_TO_ADDR
// for i in tmp do
22362: LD_ADDR_VAR 0 1
22366: PUSH
22367: LD_VAR 0 2
22371: PUSH
22372: FOR_IN
22373: IFFALSE 22404
// if GetLives ( i ) < 1000 then
22375: LD_VAR 0 1
22379: PPUSH
22380: CALL_OW 256
22384: PUSH
22385: LD_INT 1000
22387: LESS
22388: IFFALSE 22402
// SetLives ( i , 1000 ) ;
22390: LD_VAR 0 1
22394: PPUSH
22395: LD_INT 1000
22397: PPUSH
22398: CALL_OW 234
22402: GO 22372
22404: POP
22405: POP
// until p > 20 ;
22406: LD_VAR 0 3
22410: PUSH
22411: LD_INT 20
22413: GREATER
22414: IFFALSE 22341
// end ;
22416: PPOPN 3
22418: END
// every 0 0$1 trigger StreamModeActive and sTime do
22419: LD_EXP 45
22423: IFFALSE 22431
22425: PUSH
22426: LD_EXP 96
22430: AND
22431: IFFALSE 22466
22433: GO 22435
22435: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22436: LD_INT 28
22438: PPUSH
22439: LD_OWVAR 2
22443: PPUSH
22444: LD_INT 2
22446: PPUSH
22447: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22451: LD_INT 30
22453: PPUSH
22454: LD_OWVAR 2
22458: PPUSH
22459: LD_INT 2
22461: PPUSH
22462: CALL_OW 322
// end ;
22466: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22467: LD_EXP 45
22471: IFFALSE 22479
22473: PUSH
22474: LD_EXP 97
22478: AND
22479: IFFALSE 22600
22481: GO 22483
22483: DISABLE
22484: LD_INT 0
22486: PPUSH
22487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22488: LD_ADDR_VAR 0 2
22492: PUSH
22493: LD_INT 22
22495: PUSH
22496: LD_OWVAR 2
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 21
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 3
22517: PUSH
22518: LD_INT 23
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: PPUSH
22537: CALL_OW 69
22541: ST_TO_ADDR
// if not tmp then
22542: LD_VAR 0 2
22546: NOT
22547: IFFALSE 22551
// exit ;
22549: GO 22600
// for i in tmp do
22551: LD_ADDR_VAR 0 1
22555: PUSH
22556: LD_VAR 0 2
22560: PUSH
22561: FOR_IN
22562: IFFALSE 22598
// begin if Crawls ( i ) then
22564: LD_VAR 0 1
22568: PPUSH
22569: CALL_OW 318
22573: IFFALSE 22584
// ComWalk ( i ) ;
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL_OW 138
// SetClass ( i , 2 ) ;
22584: LD_VAR 0 1
22588: PPUSH
22589: LD_INT 2
22591: PPUSH
22592: CALL_OW 336
// end ;
22596: GO 22561
22598: POP
22599: POP
// end ;
22600: PPOPN 2
22602: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22603: LD_EXP 45
22607: IFFALSE 22615
22609: PUSH
22610: LD_EXP 98
22614: AND
22615: IFFALSE 22905
22617: GO 22619
22619: DISABLE
22620: LD_INT 0
22622: PPUSH
22623: PPUSH
22624: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22625: LD_OWVAR 2
22629: PPUSH
22630: LD_INT 9
22632: PPUSH
22633: LD_INT 1
22635: PPUSH
22636: LD_INT 1
22638: PPUSH
22639: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22643: LD_INT 9
22645: PPUSH
22646: LD_OWVAR 2
22650: PPUSH
22651: CALL_OW 343
// uc_side := 9 ;
22655: LD_ADDR_OWVAR 20
22659: PUSH
22660: LD_INT 9
22662: ST_TO_ADDR
// uc_nation := 2 ;
22663: LD_ADDR_OWVAR 21
22667: PUSH
22668: LD_INT 2
22670: ST_TO_ADDR
// hc_name := Dark Warrior ;
22671: LD_ADDR_OWVAR 26
22675: PUSH
22676: LD_STRING Dark Warrior
22678: ST_TO_ADDR
// hc_gallery :=  ;
22679: LD_ADDR_OWVAR 33
22683: PUSH
22684: LD_STRING 
22686: ST_TO_ADDR
// hc_noskilllimit := true ;
22687: LD_ADDR_OWVAR 76
22691: PUSH
22692: LD_INT 1
22694: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22695: LD_ADDR_OWVAR 31
22699: PUSH
22700: LD_INT 30
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_INT 30
22708: PUSH
22709: LD_INT 30
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: ST_TO_ADDR
// un := CreateHuman ;
22718: LD_ADDR_VAR 0 3
22722: PUSH
22723: CALL_OW 44
22727: ST_TO_ADDR
// hc_noskilllimit := false ;
22728: LD_ADDR_OWVAR 76
22732: PUSH
22733: LD_INT 0
22735: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22736: LD_VAR 0 3
22740: PPUSH
22741: LD_INT 1
22743: PPUSH
22744: CALL_OW 51
// ToLua ( playRanger() ) ;
22748: LD_STRING playRanger()
22750: PPUSH
22751: CALL_OW 559
// p := 0 ;
22755: LD_ADDR_VAR 0 2
22759: PUSH
22760: LD_INT 0
22762: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22763: LD_INT 35
22765: PPUSH
22766: CALL_OW 67
// p := p + 1 ;
22770: LD_ADDR_VAR 0 2
22774: PUSH
22775: LD_VAR 0 2
22779: PUSH
22780: LD_INT 1
22782: PLUS
22783: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22784: LD_VAR 0 3
22788: PPUSH
22789: CALL_OW 256
22793: PUSH
22794: LD_INT 1000
22796: LESS
22797: IFFALSE 22811
// SetLives ( un , 1000 ) ;
22799: LD_VAR 0 3
22803: PPUSH
22804: LD_INT 1000
22806: PPUSH
22807: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22811: LD_VAR 0 3
22815: PPUSH
22816: LD_INT 81
22818: PUSH
22819: LD_OWVAR 2
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 91
22830: PUSH
22831: LD_VAR 0 3
22835: PUSH
22836: LD_INT 30
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PPUSH
22848: CALL_OW 69
22852: PPUSH
22853: LD_VAR 0 3
22857: PPUSH
22858: CALL_OW 74
22862: PPUSH
22863: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22867: LD_VAR 0 2
22871: PUSH
22872: LD_INT 80
22874: GREATER
22875: IFTRUE 22888
22877: PUSH
22878: LD_VAR 0 3
22882: PPUSH
22883: CALL_OW 301
22887: OR
22888: IFFALSE 22763
// if un then
22890: LD_VAR 0 3
22894: IFFALSE 22905
// RemoveUnit ( un ) ;
22896: LD_VAR 0 3
22900: PPUSH
22901: CALL_OW 64
// end ;
22905: PPOPN 3
22907: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22908: LD_EXP 99
22912: IFFALSE 23028
22914: GO 22916
22916: DISABLE
22917: LD_INT 0
22919: PPUSH
22920: PPUSH
22921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22922: LD_ADDR_VAR 0 2
22926: PUSH
22927: LD_INT 81
22929: PUSH
22930: LD_OWVAR 2
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 21
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PPUSH
22953: CALL_OW 69
22957: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22958: LD_STRING playComputer()
22960: PPUSH
22961: CALL_OW 559
// if not tmp then
22965: LD_VAR 0 2
22969: NOT
22970: IFFALSE 22974
// exit ;
22972: GO 23028
// for i in tmp do
22974: LD_ADDR_VAR 0 1
22978: PUSH
22979: LD_VAR 0 2
22983: PUSH
22984: FOR_IN
22985: IFFALSE 23026
// for j := 1 to 4 do
22987: LD_ADDR_VAR 0 3
22991: PUSH
22992: DOUBLE
22993: LD_INT 1
22995: DEC
22996: ST_TO_ADDR
22997: LD_INT 4
22999: PUSH
23000: FOR_TO
23001: IFFALSE 23022
// SetSkill ( i , j , 10 ) ;
23003: LD_VAR 0 1
23007: PPUSH
23008: LD_VAR 0 3
23012: PPUSH
23013: LD_INT 10
23015: PPUSH
23016: CALL_OW 237
23020: GO 23000
23022: POP
23023: POP
23024: GO 22984
23026: POP
23027: POP
// end ;
23028: PPOPN 3
23030: END
// every 0 0$1 trigger s30 do var i , tmp ;
23031: LD_EXP 100
23035: IFFALSE 23104
23037: GO 23039
23039: DISABLE
23040: LD_INT 0
23042: PPUSH
23043: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23044: LD_ADDR_VAR 0 2
23048: PUSH
23049: LD_INT 22
23051: PUSH
23052: LD_OWVAR 2
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PPUSH
23061: CALL_OW 69
23065: ST_TO_ADDR
// if not tmp then
23066: LD_VAR 0 2
23070: NOT
23071: IFFALSE 23075
// exit ;
23073: GO 23104
// for i in tmp do
23075: LD_ADDR_VAR 0 1
23079: PUSH
23080: LD_VAR 0 2
23084: PUSH
23085: FOR_IN
23086: IFFALSE 23102
// SetLives ( i , 300 ) ;
23088: LD_VAR 0 1
23092: PPUSH
23093: LD_INT 300
23095: PPUSH
23096: CALL_OW 234
23100: GO 23085
23102: POP
23103: POP
// end ;
23104: PPOPN 2
23106: END
// every 0 0$1 trigger s60 do var i , tmp ;
23107: LD_EXP 101
23111: IFFALSE 23180
23113: GO 23115
23115: DISABLE
23116: LD_INT 0
23118: PPUSH
23119: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23120: LD_ADDR_VAR 0 2
23124: PUSH
23125: LD_INT 22
23127: PUSH
23128: LD_OWVAR 2
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PPUSH
23137: CALL_OW 69
23141: ST_TO_ADDR
// if not tmp then
23142: LD_VAR 0 2
23146: NOT
23147: IFFALSE 23151
// exit ;
23149: GO 23180
// for i in tmp do
23151: LD_ADDR_VAR 0 1
23155: PUSH
23156: LD_VAR 0 2
23160: PUSH
23161: FOR_IN
23162: IFFALSE 23178
// SetLives ( i , 600 ) ;
23164: LD_VAR 0 1
23168: PPUSH
23169: LD_INT 600
23171: PPUSH
23172: CALL_OW 234
23176: GO 23161
23178: POP
23179: POP
// end ;
23180: PPOPN 2
23182: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23183: LD_INT 0
23185: PPUSH
// case cmd of 301 :
23186: LD_VAR 0 1
23190: PUSH
23191: LD_INT 301
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23231
23199: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23200: LD_VAR 0 6
23204: PPUSH
23205: LD_VAR 0 7
23209: PPUSH
23210: LD_VAR 0 8
23214: PPUSH
23215: LD_VAR 0 4
23219: PPUSH
23220: LD_VAR 0 5
23224: PPUSH
23225: CALL 24444 0 5
23229: GO 23352
23231: LD_INT 302
23233: DOUBLE
23234: EQUAL
23235: IFTRUE 23239
23237: GO 23276
23239: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23240: LD_VAR 0 6
23244: PPUSH
23245: LD_VAR 0 7
23249: PPUSH
23250: LD_VAR 0 8
23254: PPUSH
23255: LD_VAR 0 9
23259: PPUSH
23260: LD_VAR 0 4
23264: PPUSH
23265: LD_VAR 0 5
23269: PPUSH
23270: CALL 24535 0 6
23274: GO 23352
23276: LD_INT 303
23278: DOUBLE
23279: EQUAL
23280: IFTRUE 23284
23282: GO 23321
23284: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23285: LD_VAR 0 6
23289: PPUSH
23290: LD_VAR 0 7
23294: PPUSH
23295: LD_VAR 0 8
23299: PPUSH
23300: LD_VAR 0 9
23304: PPUSH
23305: LD_VAR 0 4
23309: PPUSH
23310: LD_VAR 0 5
23314: PPUSH
23315: CALL 23357 0 6
23319: GO 23352
23321: LD_INT 304
23323: DOUBLE
23324: EQUAL
23325: IFTRUE 23329
23327: GO 23351
23329: POP
// hHackTeleport ( unit , x , y ) ; end ;
23330: LD_VAR 0 2
23334: PPUSH
23335: LD_VAR 0 4
23339: PPUSH
23340: LD_VAR 0 5
23344: PPUSH
23345: CALL 25128 0 3
23349: GO 23352
23351: POP
// end ;
23352: LD_VAR 0 12
23356: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23357: LD_INT 0
23359: PPUSH
23360: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23361: LD_VAR 0 1
23365: PUSH
23366: LD_INT 1
23368: LESS
23369: IFTRUE 23381
23371: PUSH
23372: LD_VAR 0 1
23376: PUSH
23377: LD_INT 3
23379: GREATER
23380: OR
23381: IFTRUE 23399
23383: PUSH
23384: LD_VAR 0 5
23388: PPUSH
23389: LD_VAR 0 6
23393: PPUSH
23394: CALL_OW 428
23398: OR
23399: IFFALSE 23403
// exit ;
23401: GO 24131
// uc_side := your_side ;
23403: LD_ADDR_OWVAR 20
23407: PUSH
23408: LD_OWVAR 2
23412: ST_TO_ADDR
// uc_nation := nation ;
23413: LD_ADDR_OWVAR 21
23417: PUSH
23418: LD_VAR 0 1
23422: ST_TO_ADDR
// bc_level = 1 ;
23423: LD_ADDR_OWVAR 43
23427: PUSH
23428: LD_INT 1
23430: ST_TO_ADDR
// case btype of 1 :
23431: LD_VAR 0 2
23435: PUSH
23436: LD_INT 1
23438: DOUBLE
23439: EQUAL
23440: IFTRUE 23444
23442: GO 23455
23444: POP
// bc_type := b_depot ; 2 :
23445: LD_ADDR_OWVAR 42
23449: PUSH
23450: LD_INT 0
23452: ST_TO_ADDR
23453: GO 24075
23455: LD_INT 2
23457: DOUBLE
23458: EQUAL
23459: IFTRUE 23463
23461: GO 23474
23463: POP
// bc_type := b_warehouse ; 3 :
23464: LD_ADDR_OWVAR 42
23468: PUSH
23469: LD_INT 1
23471: ST_TO_ADDR
23472: GO 24075
23474: LD_INT 3
23476: DOUBLE
23477: EQUAL
23478: IFTRUE 23482
23480: GO 23493
23482: POP
// bc_type := b_lab ; 4 .. 9 :
23483: LD_ADDR_OWVAR 42
23487: PUSH
23488: LD_INT 6
23490: ST_TO_ADDR
23491: GO 24075
23493: LD_INT 4
23495: DOUBLE
23496: GREATEREQUAL
23497: IFFALSE 23505
23499: LD_INT 9
23501: DOUBLE
23502: LESSEQUAL
23503: IFTRUE 23507
23505: GO 23567
23507: POP
// begin bc_type := b_lab_half ;
23508: LD_ADDR_OWVAR 42
23512: PUSH
23513: LD_INT 7
23515: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23516: LD_ADDR_OWVAR 44
23520: PUSH
23521: LD_INT 10
23523: PUSH
23524: LD_INT 11
23526: PUSH
23527: LD_INT 12
23529: PUSH
23530: LD_INT 15
23532: PUSH
23533: LD_INT 14
23535: PUSH
23536: LD_INT 13
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: PUSH
23547: LD_VAR 0 2
23551: PUSH
23552: LD_INT 3
23554: MINUS
23555: ARRAY
23556: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23557: LD_ADDR_OWVAR 45
23561: PUSH
23562: LD_INT 9
23564: ST_TO_ADDR
// end ; 10 .. 13 :
23565: GO 24075
23567: LD_INT 10
23569: DOUBLE
23570: GREATEREQUAL
23571: IFFALSE 23579
23573: LD_INT 13
23575: DOUBLE
23576: LESSEQUAL
23577: IFTRUE 23581
23579: GO 23658
23581: POP
// begin bc_type := b_lab_full ;
23582: LD_ADDR_OWVAR 42
23586: PUSH
23587: LD_INT 8
23589: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23590: LD_ADDR_OWVAR 44
23594: PUSH
23595: LD_INT 10
23597: PUSH
23598: LD_INT 12
23600: PUSH
23601: LD_INT 14
23603: PUSH
23604: LD_INT 13
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: PUSH
23613: LD_VAR 0 2
23617: PUSH
23618: LD_INT 9
23620: MINUS
23621: ARRAY
23622: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23623: LD_ADDR_OWVAR 45
23627: PUSH
23628: LD_INT 11
23630: PUSH
23631: LD_INT 15
23633: PUSH
23634: LD_INT 12
23636: PUSH
23637: LD_INT 15
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: PUSH
23646: LD_VAR 0 2
23650: PUSH
23651: LD_INT 9
23653: MINUS
23654: ARRAY
23655: ST_TO_ADDR
// end ; 14 :
23656: GO 24075
23658: LD_INT 14
23660: DOUBLE
23661: EQUAL
23662: IFTRUE 23666
23664: GO 23677
23666: POP
// bc_type := b_workshop ; 15 :
23667: LD_ADDR_OWVAR 42
23671: PUSH
23672: LD_INT 2
23674: ST_TO_ADDR
23675: GO 24075
23677: LD_INT 15
23679: DOUBLE
23680: EQUAL
23681: IFTRUE 23685
23683: GO 23696
23685: POP
// bc_type := b_factory ; 16 :
23686: LD_ADDR_OWVAR 42
23690: PUSH
23691: LD_INT 3
23693: ST_TO_ADDR
23694: GO 24075
23696: LD_INT 16
23698: DOUBLE
23699: EQUAL
23700: IFTRUE 23704
23702: GO 23715
23704: POP
// bc_type := b_ext_gun ; 17 :
23705: LD_ADDR_OWVAR 42
23709: PUSH
23710: LD_INT 17
23712: ST_TO_ADDR
23713: GO 24075
23715: LD_INT 17
23717: DOUBLE
23718: EQUAL
23719: IFTRUE 23723
23721: GO 23751
23723: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23724: LD_ADDR_OWVAR 42
23728: PUSH
23729: LD_INT 19
23731: PUSH
23732: LD_INT 23
23734: PUSH
23735: LD_INT 19
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: PUSH
23743: LD_VAR 0 1
23747: ARRAY
23748: ST_TO_ADDR
23749: GO 24075
23751: LD_INT 18
23753: DOUBLE
23754: EQUAL
23755: IFTRUE 23759
23757: GO 23770
23759: POP
// bc_type := b_ext_radar ; 19 :
23760: LD_ADDR_OWVAR 42
23764: PUSH
23765: LD_INT 20
23767: ST_TO_ADDR
23768: GO 24075
23770: LD_INT 19
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 23789
23778: POP
// bc_type := b_ext_radio ; 20 :
23779: LD_ADDR_OWVAR 42
23783: PUSH
23784: LD_INT 22
23786: ST_TO_ADDR
23787: GO 24075
23789: LD_INT 20
23791: DOUBLE
23792: EQUAL
23793: IFTRUE 23797
23795: GO 23808
23797: POP
// bc_type := b_ext_siberium ; 21 :
23798: LD_ADDR_OWVAR 42
23802: PUSH
23803: LD_INT 21
23805: ST_TO_ADDR
23806: GO 24075
23808: LD_INT 21
23810: DOUBLE
23811: EQUAL
23812: IFTRUE 23816
23814: GO 23827
23816: POP
// bc_type := b_ext_computer ; 22 :
23817: LD_ADDR_OWVAR 42
23821: PUSH
23822: LD_INT 24
23824: ST_TO_ADDR
23825: GO 24075
23827: LD_INT 22
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23835
23833: GO 23846
23835: POP
// bc_type := b_ext_track ; 23 :
23836: LD_ADDR_OWVAR 42
23840: PUSH
23841: LD_INT 16
23843: ST_TO_ADDR
23844: GO 24075
23846: LD_INT 23
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23865
23854: POP
// bc_type := b_ext_laser ; 24 :
23855: LD_ADDR_OWVAR 42
23859: PUSH
23860: LD_INT 25
23862: ST_TO_ADDR
23863: GO 24075
23865: LD_INT 24
23867: DOUBLE
23868: EQUAL
23869: IFTRUE 23873
23871: GO 23884
23873: POP
// bc_type := b_control_tower ; 25 :
23874: LD_ADDR_OWVAR 42
23878: PUSH
23879: LD_INT 36
23881: ST_TO_ADDR
23882: GO 24075
23884: LD_INT 25
23886: DOUBLE
23887: EQUAL
23888: IFTRUE 23892
23890: GO 23903
23892: POP
// bc_type := b_breastwork ; 26 :
23893: LD_ADDR_OWVAR 42
23897: PUSH
23898: LD_INT 31
23900: ST_TO_ADDR
23901: GO 24075
23903: LD_INT 26
23905: DOUBLE
23906: EQUAL
23907: IFTRUE 23911
23909: GO 23922
23911: POP
// bc_type := b_bunker ; 27 :
23912: LD_ADDR_OWVAR 42
23916: PUSH
23917: LD_INT 32
23919: ST_TO_ADDR
23920: GO 24075
23922: LD_INT 27
23924: DOUBLE
23925: EQUAL
23926: IFTRUE 23930
23928: GO 23941
23930: POP
// bc_type := b_turret ; 28 :
23931: LD_ADDR_OWVAR 42
23935: PUSH
23936: LD_INT 33
23938: ST_TO_ADDR
23939: GO 24075
23941: LD_INT 28
23943: DOUBLE
23944: EQUAL
23945: IFTRUE 23949
23947: GO 23960
23949: POP
// bc_type := b_armoury ; 29 :
23950: LD_ADDR_OWVAR 42
23954: PUSH
23955: LD_INT 4
23957: ST_TO_ADDR
23958: GO 24075
23960: LD_INT 29
23962: DOUBLE
23963: EQUAL
23964: IFTRUE 23968
23966: GO 23979
23968: POP
// bc_type := b_barracks ; 30 :
23969: LD_ADDR_OWVAR 42
23973: PUSH
23974: LD_INT 5
23976: ST_TO_ADDR
23977: GO 24075
23979: LD_INT 30
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 23998
23987: POP
// bc_type := b_solar_power ; 31 :
23988: LD_ADDR_OWVAR 42
23992: PUSH
23993: LD_INT 27
23995: ST_TO_ADDR
23996: GO 24075
23998: LD_INT 31
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24017
24006: POP
// bc_type := b_oil_power ; 32 :
24007: LD_ADDR_OWVAR 42
24011: PUSH
24012: LD_INT 26
24014: ST_TO_ADDR
24015: GO 24075
24017: LD_INT 32
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24036
24025: POP
// bc_type := b_siberite_power ; 33 :
24026: LD_ADDR_OWVAR 42
24030: PUSH
24031: LD_INT 28
24033: ST_TO_ADDR
24034: GO 24075
24036: LD_INT 33
24038: DOUBLE
24039: EQUAL
24040: IFTRUE 24044
24042: GO 24055
24044: POP
// bc_type := b_oil_mine ; 34 :
24045: LD_ADDR_OWVAR 42
24049: PUSH
24050: LD_INT 29
24052: ST_TO_ADDR
24053: GO 24075
24055: LD_INT 34
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24074
24063: POP
// bc_type := b_siberite_mine ; end ;
24064: LD_ADDR_OWVAR 42
24068: PUSH
24069: LD_INT 30
24071: ST_TO_ADDR
24072: GO 24075
24074: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24075: LD_ADDR_VAR 0 8
24079: PUSH
24080: LD_VAR 0 5
24084: PPUSH
24085: LD_VAR 0 6
24089: PPUSH
24090: LD_VAR 0 3
24094: PPUSH
24095: CALL_OW 47
24099: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24100: LD_OWVAR 42
24104: PUSH
24105: LD_INT 32
24107: PUSH
24108: LD_INT 33
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: IN
24115: IFFALSE 24131
// PlaceWeaponTurret ( b , weapon ) ;
24117: LD_VAR 0 8
24121: PPUSH
24122: LD_VAR 0 4
24126: PPUSH
24127: CALL_OW 431
// end ;
24131: LD_VAR 0 7
24135: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24136: LD_INT 0
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24142: LD_ADDR_VAR 0 4
24146: PUSH
24147: LD_INT 22
24149: PUSH
24150: LD_OWVAR 2
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 30
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 30
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PPUSH
24191: CALL_OW 69
24195: ST_TO_ADDR
// if not tmp then
24196: LD_VAR 0 4
24200: NOT
24201: IFFALSE 24205
// exit ;
24203: GO 24264
// for i in tmp do
24205: LD_ADDR_VAR 0 2
24209: PUSH
24210: LD_VAR 0 4
24214: PUSH
24215: FOR_IN
24216: IFFALSE 24262
// for j = 1 to 3 do
24218: LD_ADDR_VAR 0 3
24222: PUSH
24223: DOUBLE
24224: LD_INT 1
24226: DEC
24227: ST_TO_ADDR
24228: LD_INT 3
24230: PUSH
24231: FOR_TO
24232: IFFALSE 24258
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24234: LD_VAR 0 2
24238: PPUSH
24239: CALL_OW 274
24243: PPUSH
24244: LD_VAR 0 3
24248: PPUSH
24249: LD_INT 99999
24251: PPUSH
24252: CALL_OW 277
24256: GO 24231
24258: POP
24259: POP
24260: GO 24215
24262: POP
24263: POP
// end ;
24264: LD_VAR 0 1
24268: RET
// export function hHackSetLevel10 ; var i , j ; begin
24269: LD_INT 0
24271: PPUSH
24272: PPUSH
24273: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24274: LD_ADDR_VAR 0 2
24278: PUSH
24279: LD_INT 21
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PPUSH
24289: CALL_OW 69
24293: PUSH
24294: FOR_IN
24295: IFFALSE 24347
// if IsSelected ( i ) then
24297: LD_VAR 0 2
24301: PPUSH
24302: CALL_OW 306
24306: IFFALSE 24345
// begin for j := 1 to 4 do
24308: LD_ADDR_VAR 0 3
24312: PUSH
24313: DOUBLE
24314: LD_INT 1
24316: DEC
24317: ST_TO_ADDR
24318: LD_INT 4
24320: PUSH
24321: FOR_TO
24322: IFFALSE 24343
// SetSkill ( i , j , 10 ) ;
24324: LD_VAR 0 2
24328: PPUSH
24329: LD_VAR 0 3
24333: PPUSH
24334: LD_INT 10
24336: PPUSH
24337: CALL_OW 237
24341: GO 24321
24343: POP
24344: POP
// end ;
24345: GO 24294
24347: POP
24348: POP
// end ;
24349: LD_VAR 0 1
24353: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24354: LD_INT 0
24356: PPUSH
24357: PPUSH
24358: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24359: LD_ADDR_VAR 0 2
24363: PUSH
24364: LD_INT 22
24366: PUSH
24367: LD_OWVAR 2
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 21
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PPUSH
24390: CALL_OW 69
24394: PUSH
24395: FOR_IN
24396: IFFALSE 24437
// begin for j := 1 to 4 do
24398: LD_ADDR_VAR 0 3
24402: PUSH
24403: DOUBLE
24404: LD_INT 1
24406: DEC
24407: ST_TO_ADDR
24408: LD_INT 4
24410: PUSH
24411: FOR_TO
24412: IFFALSE 24433
// SetSkill ( i , j , 10 ) ;
24414: LD_VAR 0 2
24418: PPUSH
24419: LD_VAR 0 3
24423: PPUSH
24424: LD_INT 10
24426: PPUSH
24427: CALL_OW 237
24431: GO 24411
24433: POP
24434: POP
// end ;
24435: GO 24395
24437: POP
24438: POP
// end ;
24439: LD_VAR 0 1
24443: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24444: LD_INT 0
24446: PPUSH
// uc_side := your_side ;
24447: LD_ADDR_OWVAR 20
24451: PUSH
24452: LD_OWVAR 2
24456: ST_TO_ADDR
// uc_nation := nation ;
24457: LD_ADDR_OWVAR 21
24461: PUSH
24462: LD_VAR 0 1
24466: ST_TO_ADDR
// InitHc ;
24467: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24471: LD_INT 0
24473: PPUSH
24474: LD_VAR 0 2
24478: PPUSH
24479: LD_VAR 0 3
24483: PPUSH
24484: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24488: LD_VAR 0 4
24492: PPUSH
24493: LD_VAR 0 5
24497: PPUSH
24498: CALL_OW 428
24502: PUSH
24503: LD_INT 0
24505: EQUAL
24506: IFFALSE 24530
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24508: CALL_OW 44
24512: PPUSH
24513: LD_VAR 0 4
24517: PPUSH
24518: LD_VAR 0 5
24522: PPUSH
24523: LD_INT 1
24525: PPUSH
24526: CALL_OW 48
// end ;
24530: LD_VAR 0 6
24534: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24535: LD_INT 0
24537: PPUSH
24538: PPUSH
// uc_side := your_side ;
24539: LD_ADDR_OWVAR 20
24543: PUSH
24544: LD_OWVAR 2
24548: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24549: LD_VAR 0 1
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: LD_INT 3
24562: PUSH
24563: LD_INT 4
24565: PUSH
24566: LD_INT 5
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: IN
24576: IFFALSE 24588
// uc_nation := nation_american else
24578: LD_ADDR_OWVAR 21
24582: PUSH
24583: LD_INT 1
24585: ST_TO_ADDR
24586: GO 24631
// if chassis in [ 11 , 12 , 13 , 14 ] then
24588: LD_VAR 0 1
24592: PUSH
24593: LD_INT 11
24595: PUSH
24596: LD_INT 12
24598: PUSH
24599: LD_INT 13
24601: PUSH
24602: LD_INT 14
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: IN
24611: IFFALSE 24623
// uc_nation := nation_arabian else
24613: LD_ADDR_OWVAR 21
24617: PUSH
24618: LD_INT 2
24620: ST_TO_ADDR
24621: GO 24631
// uc_nation := nation_russian ;
24623: LD_ADDR_OWVAR 21
24627: PUSH
24628: LD_INT 3
24630: ST_TO_ADDR
// vc_chassis := chassis ;
24631: LD_ADDR_OWVAR 37
24635: PUSH
24636: LD_VAR 0 1
24640: ST_TO_ADDR
// vc_engine := engine ;
24641: LD_ADDR_OWVAR 39
24645: PUSH
24646: LD_VAR 0 2
24650: ST_TO_ADDR
// vc_control := control ;
24651: LD_ADDR_OWVAR 38
24655: PUSH
24656: LD_VAR 0 3
24660: ST_TO_ADDR
// vc_weapon := weapon ;
24661: LD_ADDR_OWVAR 40
24665: PUSH
24666: LD_VAR 0 4
24670: ST_TO_ADDR
// un := CreateVehicle ;
24671: LD_ADDR_VAR 0 8
24675: PUSH
24676: CALL_OW 45
24680: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24681: LD_VAR 0 8
24685: PPUSH
24686: LD_INT 0
24688: PPUSH
24689: LD_INT 5
24691: PPUSH
24692: CALL_OW 12
24696: PPUSH
24697: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24701: LD_VAR 0 8
24705: PPUSH
24706: LD_VAR 0 5
24710: PPUSH
24711: LD_VAR 0 6
24715: PPUSH
24716: LD_INT 1
24718: PPUSH
24719: CALL_OW 48
// end ;
24723: LD_VAR 0 7
24727: RET
// export hInvincible ; every 1 do
24728: GO 24730
24730: DISABLE
// hInvincible := [ ] ;
24731: LD_ADDR_EXP 102
24735: PUSH
24736: EMPTY
24737: ST_TO_ADDR
24738: END
// every 10 do var i ;
24739: GO 24741
24741: DISABLE
24742: LD_INT 0
24744: PPUSH
// begin enable ;
24745: ENABLE
// if not hInvincible then
24746: LD_EXP 102
24750: NOT
24751: IFFALSE 24755
// exit ;
24753: GO 24799
// for i in hInvincible do
24755: LD_ADDR_VAR 0 1
24759: PUSH
24760: LD_EXP 102
24764: PUSH
24765: FOR_IN
24766: IFFALSE 24797
// if GetLives ( i ) < 1000 then
24768: LD_VAR 0 1
24772: PPUSH
24773: CALL_OW 256
24777: PUSH
24778: LD_INT 1000
24780: LESS
24781: IFFALSE 24795
// SetLives ( i , 1000 ) ;
24783: LD_VAR 0 1
24787: PPUSH
24788: LD_INT 1000
24790: PPUSH
24791: CALL_OW 234
24795: GO 24765
24797: POP
24798: POP
// end ;
24799: PPOPN 1
24801: END
// export function hHackInvincible ; var i ; begin
24802: LD_INT 0
24804: PPUSH
24805: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24806: LD_ADDR_VAR 0 2
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: LD_INT 21
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 21
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: LIST
24838: PPUSH
24839: CALL_OW 69
24843: PUSH
24844: FOR_IN
24845: IFFALSE 24906
// if IsSelected ( i ) then
24847: LD_VAR 0 2
24851: PPUSH
24852: CALL_OW 306
24856: IFFALSE 24904
// begin if i in hInvincible then
24858: LD_VAR 0 2
24862: PUSH
24863: LD_EXP 102
24867: IN
24868: IFFALSE 24888
// hInvincible := hInvincible diff i else
24870: LD_ADDR_EXP 102
24874: PUSH
24875: LD_EXP 102
24879: PUSH
24880: LD_VAR 0 2
24884: DIFF
24885: ST_TO_ADDR
24886: GO 24904
// hInvincible := hInvincible union i ;
24888: LD_ADDR_EXP 102
24892: PUSH
24893: LD_EXP 102
24897: PUSH
24898: LD_VAR 0 2
24902: UNION
24903: ST_TO_ADDR
// end ;
24904: GO 24844
24906: POP
24907: POP
// end ;
24908: LD_VAR 0 1
24912: RET
// export function hHackInvisible ; var i , j ; begin
24913: LD_INT 0
24915: PPUSH
24916: PPUSH
24917: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24918: LD_ADDR_VAR 0 2
24922: PUSH
24923: LD_INT 21
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL_OW 69
24937: PUSH
24938: FOR_IN
24939: IFFALSE 24963
// if IsSelected ( i ) then
24941: LD_VAR 0 2
24945: PPUSH
24946: CALL_OW 306
24950: IFFALSE 24961
// ComForceInvisible ( i ) ;
24952: LD_VAR 0 2
24956: PPUSH
24957: CALL_OW 496
24961: GO 24938
24963: POP
24964: POP
// end ;
24965: LD_VAR 0 1
24969: RET
// export function hHackChangeYourSide ; begin
24970: LD_INT 0
24972: PPUSH
// if your_side = 8 then
24973: LD_OWVAR 2
24977: PUSH
24978: LD_INT 8
24980: EQUAL
24981: IFFALSE 24993
// your_side := 0 else
24983: LD_ADDR_OWVAR 2
24987: PUSH
24988: LD_INT 0
24990: ST_TO_ADDR
24991: GO 25007
// your_side := your_side + 1 ;
24993: LD_ADDR_OWVAR 2
24997: PUSH
24998: LD_OWVAR 2
25002: PUSH
25003: LD_INT 1
25005: PLUS
25006: ST_TO_ADDR
// end ;
25007: LD_VAR 0 1
25011: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25012: LD_INT 0
25014: PPUSH
25015: PPUSH
25016: PPUSH
// for i in all_units do
25017: LD_ADDR_VAR 0 2
25021: PUSH
25022: LD_OWVAR 3
25026: PUSH
25027: FOR_IN
25028: IFFALSE 25106
// if IsSelected ( i ) then
25030: LD_VAR 0 2
25034: PPUSH
25035: CALL_OW 306
25039: IFFALSE 25104
// begin j := GetSide ( i ) ;
25041: LD_ADDR_VAR 0 3
25045: PUSH
25046: LD_VAR 0 2
25050: PPUSH
25051: CALL_OW 255
25055: ST_TO_ADDR
// if j = 8 then
25056: LD_VAR 0 3
25060: PUSH
25061: LD_INT 8
25063: EQUAL
25064: IFFALSE 25076
// j := 0 else
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_INT 0
25073: ST_TO_ADDR
25074: GO 25090
// j := j + 1 ;
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_VAR 0 3
25085: PUSH
25086: LD_INT 1
25088: PLUS
25089: ST_TO_ADDR
// SetSide ( i , j ) ;
25090: LD_VAR 0 2
25094: PPUSH
25095: LD_VAR 0 3
25099: PPUSH
25100: CALL_OW 235
// end ;
25104: GO 25027
25106: POP
25107: POP
// end ;
25108: LD_VAR 0 1
25112: RET
// export function hHackFog ; begin
25113: LD_INT 0
25115: PPUSH
// FogOff ( true ) ;
25116: LD_INT 1
25118: PPUSH
25119: CALL_OW 344
// end ;
25123: LD_VAR 0 1
25127: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25128: LD_INT 0
25130: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25131: LD_VAR 0 1
25135: PPUSH
25136: LD_VAR 0 2
25140: PPUSH
25141: LD_VAR 0 3
25145: PPUSH
25146: LD_INT 1
25148: PPUSH
25149: LD_INT 1
25151: PPUSH
25152: CALL_OW 483
// CenterOnXY ( x , y ) ;
25156: LD_VAR 0 2
25160: PPUSH
25161: LD_VAR 0 3
25165: PPUSH
25166: CALL_OW 84
// end ;
25170: LD_VAR 0 4
25174: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25175: LD_INT 0
25177: PPUSH
25178: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25179: LD_VAR 0 1
25183: NOT
25184: IFTRUE 25203
25186: PUSH
25187: LD_VAR 0 2
25191: PPUSH
25192: LD_VAR 0 3
25196: PPUSH
25197: CALL_OW 488
25201: NOT
25202: OR
25203: IFTRUE 25238
25205: PUSH
25206: LD_VAR 0 1
25210: PPUSH
25211: CALL_OW 266
25215: PUSH
25216: LD_INT 3
25218: NONEQUAL
25219: IFFALSE 25237
25221: PUSH
25222: LD_VAR 0 1
25226: PPUSH
25227: CALL_OW 247
25231: PUSH
25232: LD_INT 1
25234: EQUAL
25235: NOT
25236: AND
25237: OR
25238: IFFALSE 25242
// exit ;
25240: GO 25524
// if GetType ( factory ) = unit_human then
25242: LD_VAR 0 1
25246: PPUSH
25247: CALL_OW 247
25251: PUSH
25252: LD_INT 1
25254: EQUAL
25255: IFFALSE 25272
// factory := IsInUnit ( factory ) ;
25257: LD_ADDR_VAR 0 1
25261: PUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 310
25271: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25272: LD_VAR 0 1
25276: PPUSH
25277: CALL_OW 266
25281: PUSH
25282: LD_INT 3
25284: NONEQUAL
25285: IFFALSE 25289
// exit ;
25287: GO 25524
// for i := 1 to Count ( factoryWaypoints ) do
25289: LD_ADDR_VAR 0 5
25293: PUSH
25294: DOUBLE
25295: LD_INT 1
25297: DEC
25298: ST_TO_ADDR
25299: LD_EXP 103
25303: PPUSH
25304: CALL 35391 0 1
25308: PUSH
25309: FOR_TO
25310: IFFALSE 25472
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25312: LD_VAR 0 2
25316: PPUSH
25317: LD_VAR 0 3
25321: PPUSH
25322: CALL_OW 428
25326: PUSH
25327: LD_EXP 103
25331: PUSH
25332: LD_VAR 0 5
25336: ARRAY
25337: PUSH
25338: LD_INT 2
25340: ARRAY
25341: EQUAL
25342: IFFALSE 25374
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25344: LD_ADDR_EXP 103
25348: PUSH
25349: LD_EXP 103
25353: PPUSH
25354: LD_VAR 0 5
25358: PPUSH
25359: CALL_OW 3
25363: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25364: CALL 25529 0 0
// exit ;
25368: POP
25369: POP
25370: GO 25524
// end else
25372: GO 25470
// if factory = factoryWaypoints [ i ] [ 2 ] then
25374: LD_VAR 0 1
25378: PUSH
25379: LD_EXP 103
25383: PUSH
25384: LD_VAR 0 5
25388: ARRAY
25389: PUSH
25390: LD_INT 2
25392: ARRAY
25393: EQUAL
25394: IFFALSE 25470
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25396: LD_ADDR_EXP 103
25400: PUSH
25401: LD_EXP 103
25405: PPUSH
25406: LD_VAR 0 5
25410: PPUSH
25411: CALL_OW 3
25415: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25416: LD_ADDR_EXP 103
25420: PUSH
25421: LD_EXP 103
25425: PPUSH
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 255
25435: PUSH
25436: LD_VAR 0 1
25440: PUSH
25441: LD_VAR 0 2
25445: PUSH
25446: LD_VAR 0 3
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: PPUSH
25457: CALL 71357 0 2
25461: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25462: CALL 25529 0 0
// exit ;
25466: POP
25467: POP
25468: GO 25524
// end ; end ;
25470: GO 25309
25472: POP
25473: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25474: LD_ADDR_EXP 103
25478: PUSH
25479: LD_EXP 103
25483: PPUSH
25484: LD_VAR 0 1
25488: PPUSH
25489: CALL_OW 255
25493: PUSH
25494: LD_VAR 0 1
25498: PUSH
25499: LD_VAR 0 2
25503: PUSH
25504: LD_VAR 0 3
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: PPUSH
25515: CALL 71357 0 2
25519: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25520: CALL 25529 0 0
// end ;
25524: LD_VAR 0 4
25528: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25529: LD_INT 0
25531: PPUSH
25532: PPUSH
25533: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25534: LD_STRING resetFactoryWaypoint();
25536: PPUSH
25537: CALL_OW 559
// if factoryWaypoints then
25541: LD_EXP 103
25545: IFFALSE 25666
// begin list := factoryWaypoints ;
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_EXP 103
25556: ST_TO_ADDR
// for i := 1 to list do
25557: LD_ADDR_VAR 0 2
25561: PUSH
25562: DOUBLE
25563: LD_INT 1
25565: DEC
25566: ST_TO_ADDR
25567: LD_VAR 0 3
25571: PUSH
25572: FOR_TO
25573: IFFALSE 25664
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25575: LD_STRING setFactoryWaypointXY(
25577: PUSH
25578: LD_VAR 0 3
25582: PUSH
25583: LD_VAR 0 2
25587: ARRAY
25588: PUSH
25589: LD_INT 1
25591: ARRAY
25592: STR
25593: PUSH
25594: LD_STRING ,
25596: STR
25597: PUSH
25598: LD_VAR 0 3
25602: PUSH
25603: LD_VAR 0 2
25607: ARRAY
25608: PUSH
25609: LD_INT 2
25611: ARRAY
25612: STR
25613: PUSH
25614: LD_STRING ,
25616: STR
25617: PUSH
25618: LD_VAR 0 3
25622: PUSH
25623: LD_VAR 0 2
25627: ARRAY
25628: PUSH
25629: LD_INT 3
25631: ARRAY
25632: STR
25633: PUSH
25634: LD_STRING ,
25636: STR
25637: PUSH
25638: LD_VAR 0 3
25642: PUSH
25643: LD_VAR 0 2
25647: ARRAY
25648: PUSH
25649: LD_INT 4
25651: ARRAY
25652: STR
25653: PUSH
25654: LD_STRING )
25656: STR
25657: PPUSH
25658: CALL_OW 559
25662: GO 25572
25664: POP
25665: POP
// end ; end ;
25666: LD_VAR 0 1
25670: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25671: LD_INT 0
25673: PPUSH
// if HexInfo ( x , y ) = warehouse then
25674: LD_VAR 0 2
25678: PPUSH
25679: LD_VAR 0 3
25683: PPUSH
25684: CALL_OW 428
25688: PUSH
25689: LD_VAR 0 1
25693: EQUAL
25694: IFFALSE 25721
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25696: LD_ADDR_EXP 105
25700: PUSH
25701: LD_EXP 105
25705: PPUSH
25706: LD_VAR 0 1
25710: PPUSH
25711: LD_INT 0
25713: PPUSH
25714: CALL_OW 1
25718: ST_TO_ADDR
25719: GO 25772
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25721: LD_ADDR_EXP 105
25725: PUSH
25726: LD_EXP 105
25730: PPUSH
25731: LD_VAR 0 1
25735: PPUSH
25736: LD_VAR 0 1
25740: PPUSH
25741: CALL_OW 255
25745: PUSH
25746: LD_VAR 0 1
25750: PUSH
25751: LD_VAR 0 2
25755: PUSH
25756: LD_VAR 0 3
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: PPUSH
25767: CALL_OW 1
25771: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25772: CALL 25781 0 0
// end ;
25776: LD_VAR 0 4
25780: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25781: LD_INT 0
25783: PPUSH
25784: PPUSH
25785: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25786: LD_STRING resetWarehouseGatheringPoints();
25788: PPUSH
25789: CALL_OW 559
// if warehouseGatheringPoints then
25793: LD_EXP 105
25797: IFFALSE 25923
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25799: LD_ADDR_VAR 0 3
25803: PUSH
25804: LD_EXP 105
25808: PPUSH
25809: CALL 75291 0 1
25813: ST_TO_ADDR
// for i := 1 to list do
25814: LD_ADDR_VAR 0 2
25818: PUSH
25819: DOUBLE
25820: LD_INT 1
25822: DEC
25823: ST_TO_ADDR
25824: LD_VAR 0 3
25828: PUSH
25829: FOR_TO
25830: IFFALSE 25921
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25832: LD_STRING setWarehouseGatheringPointXY(
25834: PUSH
25835: LD_VAR 0 3
25839: PUSH
25840: LD_VAR 0 2
25844: ARRAY
25845: PUSH
25846: LD_INT 1
25848: ARRAY
25849: STR
25850: PUSH
25851: LD_STRING ,
25853: STR
25854: PUSH
25855: LD_VAR 0 3
25859: PUSH
25860: LD_VAR 0 2
25864: ARRAY
25865: PUSH
25866: LD_INT 2
25868: ARRAY
25869: STR
25870: PUSH
25871: LD_STRING ,
25873: STR
25874: PUSH
25875: LD_VAR 0 3
25879: PUSH
25880: LD_VAR 0 2
25884: ARRAY
25885: PUSH
25886: LD_INT 3
25888: ARRAY
25889: STR
25890: PUSH
25891: LD_STRING ,
25893: STR
25894: PUSH
25895: LD_VAR 0 3
25899: PUSH
25900: LD_VAR 0 2
25904: ARRAY
25905: PUSH
25906: LD_INT 4
25908: ARRAY
25909: STR
25910: PUSH
25911: LD_STRING )
25913: STR
25914: PPUSH
25915: CALL_OW 559
25919: GO 25829
25921: POP
25922: POP
// end ; end ;
25923: LD_VAR 0 1
25927: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25928: LD_EXP 105
25932: IFFALSE 26627
25934: GO 25936
25936: DISABLE
25937: LD_INT 0
25939: PPUSH
25940: PPUSH
25941: PPUSH
25942: PPUSH
25943: PPUSH
25944: PPUSH
25945: PPUSH
25946: PPUSH
25947: PPUSH
// begin enable ;
25948: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: LD_EXP 105
25958: PPUSH
25959: CALL 75291 0 1
25963: ST_TO_ADDR
// if not list then
25964: LD_VAR 0 3
25968: NOT
25969: IFFALSE 25973
// exit ;
25971: GO 26627
// for i := 1 to list do
25973: LD_ADDR_VAR 0 1
25977: PUSH
25978: DOUBLE
25979: LD_INT 1
25981: DEC
25982: ST_TO_ADDR
25983: LD_VAR 0 3
25987: PUSH
25988: FOR_TO
25989: IFFALSE 26625
// begin depot := list [ i ] [ 2 ] ;
25991: LD_ADDR_VAR 0 8
25995: PUSH
25996: LD_VAR 0 3
26000: PUSH
26001: LD_VAR 0 1
26005: ARRAY
26006: PUSH
26007: LD_INT 2
26009: ARRAY
26010: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26011: LD_ADDR_VAR 0 5
26015: PUSH
26016: LD_VAR 0 3
26020: PUSH
26021: LD_VAR 0 1
26025: ARRAY
26026: PUSH
26027: LD_INT 1
26029: ARRAY
26030: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26031: LD_VAR 0 8
26035: PPUSH
26036: CALL_OW 301
26040: IFTRUE 26059
26042: PUSH
26043: LD_VAR 0 5
26047: PUSH
26048: LD_VAR 0 8
26052: PPUSH
26053: CALL_OW 255
26057: NONEQUAL
26058: OR
26059: IFFALSE 26088
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26061: LD_ADDR_EXP 105
26065: PUSH
26066: LD_EXP 105
26070: PPUSH
26071: LD_VAR 0 8
26075: PPUSH
26076: LD_INT 0
26078: PPUSH
26079: CALL_OW 1
26083: ST_TO_ADDR
// exit ;
26084: POP
26085: POP
26086: GO 26627
// end ; x := list [ i ] [ 3 ] ;
26088: LD_ADDR_VAR 0 6
26092: PUSH
26093: LD_VAR 0 3
26097: PUSH
26098: LD_VAR 0 1
26102: ARRAY
26103: PUSH
26104: LD_INT 3
26106: ARRAY
26107: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26108: LD_ADDR_VAR 0 7
26112: PUSH
26113: LD_VAR 0 3
26117: PUSH
26118: LD_VAR 0 1
26122: ARRAY
26123: PUSH
26124: LD_INT 4
26126: ARRAY
26127: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26128: LD_ADDR_VAR 0 9
26132: PUSH
26133: LD_VAR 0 6
26137: PPUSH
26138: LD_VAR 0 7
26142: PPUSH
26143: LD_INT 16
26145: PPUSH
26146: CALL 73865 0 3
26150: ST_TO_ADDR
// if not cratesNearbyPoint then
26151: LD_VAR 0 9
26155: NOT
26156: IFFALSE 26162
// exit ;
26158: POP
26159: POP
26160: GO 26627
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26162: LD_ADDR_VAR 0 4
26166: PUSH
26167: LD_INT 22
26169: PUSH
26170: LD_VAR 0 5
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: LD_INT 60
26184: PUSH
26185: EMPTY
26186: LIST
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 91
26194: PUSH
26195: LD_VAR 0 8
26199: PUSH
26200: LD_INT 6
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: LD_INT 25
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 25
26223: PUSH
26224: LD_INT 16
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: PPUSH
26242: CALL_OW 69
26246: PUSH
26247: LD_VAR 0 8
26251: PPUSH
26252: CALL_OW 313
26256: PPUSH
26257: LD_INT 3
26259: PUSH
26260: LD_INT 60
26262: PUSH
26263: EMPTY
26264: LIST
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: LD_INT 25
26275: PUSH
26276: LD_INT 2
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 25
26285: PUSH
26286: LD_INT 16
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL_OW 72
26306: UNION
26307: ST_TO_ADDR
// if tmp then
26308: LD_VAR 0 4
26312: IFFALSE 26392
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26314: LD_ADDR_VAR 0 4
26318: PUSH
26319: LD_VAR 0 4
26323: PPUSH
26324: LD_INT 3
26326: PPUSH
26327: CALL 71672 0 2
26331: ST_TO_ADDR
// for j in tmp do
26332: LD_ADDR_VAR 0 2
26336: PUSH
26337: LD_VAR 0 4
26341: PUSH
26342: FOR_IN
26343: IFFALSE 26386
// begin if IsInUnit ( j ) then
26345: LD_VAR 0 2
26349: PPUSH
26350: CALL_OW 310
26354: IFFALSE 26365
// ComExit ( j ) ;
26356: LD_VAR 0 2
26360: PPUSH
26361: CALL 71755 0 1
// AddComCollect ( j , x , y ) ;
26365: LD_VAR 0 2
26369: PPUSH
26370: LD_VAR 0 6
26374: PPUSH
26375: LD_VAR 0 7
26379: PPUSH
26380: CALL_OW 177
// end ;
26384: GO 26342
26386: POP
26387: POP
// exit ;
26388: POP
26389: POP
26390: GO 26627
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26392: LD_ADDR_VAR 0 4
26396: PUSH
26397: LD_INT 22
26399: PUSH
26400: LD_VAR 0 5
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 91
26411: PUSH
26412: LD_VAR 0 8
26416: PUSH
26417: LD_INT 8
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 34
26430: PUSH
26431: LD_INT 12
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 34
26440: PUSH
26441: LD_INT 51
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 34
26450: PUSH
26451: LD_INT 32
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 34
26460: PUSH
26461: LD_INT 89
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: ST_TO_ADDR
// if tmp then
26485: LD_VAR 0 4
26489: IFFALSE 26623
// begin for j in tmp do
26491: LD_ADDR_VAR 0 2
26495: PUSH
26496: LD_VAR 0 4
26500: PUSH
26501: FOR_IN
26502: IFFALSE 26621
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26504: LD_VAR 0 2
26508: PPUSH
26509: CALL_OW 262
26513: PUSH
26514: LD_INT 3
26516: EQUAL
26517: IFTRUE 26534
26519: PUSH
26520: LD_VAR 0 2
26524: PPUSH
26525: CALL_OW 261
26529: PUSH
26530: LD_INT 20
26532: GREATER
26533: OR
26534: IFFALSE 26548
26536: PUSH
26537: LD_VAR 0 2
26541: PPUSH
26542: CALL_OW 314
26546: NOT
26547: AND
26548: IFFALSE 26578
26550: PUSH
26551: LD_VAR 0 2
26555: PPUSH
26556: CALL_OW 263
26560: PUSH
26561: LD_INT 1
26563: NONEQUAL
26564: IFTRUE 26577
26566: PUSH
26567: LD_VAR 0 2
26571: PPUSH
26572: CALL_OW 311
26576: OR
26577: AND
26578: IFFALSE 26619
// begin ComCollect ( j , x , y ) ;
26580: LD_VAR 0 2
26584: PPUSH
26585: LD_VAR 0 6
26589: PPUSH
26590: LD_VAR 0 7
26594: PPUSH
26595: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26599: LD_VAR 0 2
26603: PPUSH
26604: LD_VAR 0 8
26608: PPUSH
26609: CALL_OW 172
// exit ;
26613: POP
26614: POP
26615: POP
26616: POP
26617: GO 26627
// end ;
26619: GO 26501
26621: POP
26622: POP
// end ; end ;
26623: GO 25988
26625: POP
26626: POP
// end ; end_of_file
26627: PPOPN 9
26629: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26630: LD_VAR 0 1
26634: PUSH
26635: LD_INT 200
26637: DOUBLE
26638: GREATEREQUAL
26639: IFFALSE 26647
26641: LD_INT 299
26643: DOUBLE
26644: LESSEQUAL
26645: IFTRUE 26649
26647: GO 26681
26649: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26650: LD_VAR 0 1
26654: PPUSH
26655: LD_VAR 0 2
26659: PPUSH
26660: LD_VAR 0 3
26664: PPUSH
26665: LD_VAR 0 4
26669: PPUSH
26670: LD_VAR 0 5
26674: PPUSH
26675: CALL 27543 0 5
26679: GO 26758
26681: LD_INT 300
26683: DOUBLE
26684: GREATEREQUAL
26685: IFFALSE 26693
26687: LD_INT 399
26689: DOUBLE
26690: LESSEQUAL
26691: IFTRUE 26695
26693: GO 26757
26695: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26696: LD_VAR 0 1
26700: PPUSH
26701: LD_VAR 0 2
26705: PPUSH
26706: LD_VAR 0 3
26710: PPUSH
26711: LD_VAR 0 4
26715: PPUSH
26716: LD_VAR 0 5
26720: PPUSH
26721: LD_VAR 0 6
26725: PPUSH
26726: LD_VAR 0 7
26730: PPUSH
26731: LD_VAR 0 8
26735: PPUSH
26736: LD_VAR 0 9
26740: PPUSH
26741: LD_VAR 0 10
26745: PPUSH
26746: LD_VAR 0 11
26750: PPUSH
26751: CALL 23183 0 11
26755: GO 26758
26757: POP
// end ;
26758: PPOPN 11
26760: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26761: LD_VAR 0 1
26765: PPUSH
26766: LD_VAR 0 2
26770: PPUSH
26771: LD_VAR 0 3
26775: PPUSH
26776: LD_VAR 0 4
26780: PPUSH
26781: LD_VAR 0 5
26785: PPUSH
26786: CALL 26843 0 5
// end ; end_of_file
26790: PPOPN 5
26792: END
// export function SOS_UnitDestroyed ( un ) ; begin
26793: LD_INT 0
26795: PPUSH
// ComRadiation ( un ) ;
26796: LD_VAR 0 1
26800: PPUSH
26801: CALL 27963 0 1
// end ;
26805: LD_VAR 0 2
26809: RET
// export function SOS_UnitKamikazed ( un ) ; begin
26810: LD_INT 0
26812: PPUSH
// ComRadiation ( un ) ;
26813: LD_VAR 0 1
26817: PPUSH
26818: CALL 27963 0 1
// end ;
26822: LD_VAR 0 2
26826: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26827: LD_INT 0
26829: PPUSH
// end ;
26830: LD_VAR 0 4
26834: RET
// export function SOS_Command ( cmd ) ; begin
26835: LD_INT 0
26837: PPUSH
// end ;
26838: LD_VAR 0 2
26842: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26843: LD_INT 0
26845: PPUSH
// end ;
26846: LD_VAR 0 6
26850: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
26851: LD_INT 0
26853: PPUSH
26854: PPUSH
26855: PPUSH
26856: PPUSH
26857: PPUSH
// if not vehicle or not factory then
26858: LD_VAR 0 1
26862: NOT
26863: IFTRUE 26872
26865: PUSH
26866: LD_VAR 0 2
26870: NOT
26871: OR
26872: IFFALSE 26876
// exit ;
26874: GO 27538
// weapon := GetWeapon ( vehicle ) ;
26876: LD_ADDR_VAR 0 7
26880: PUSH
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL_OW 264
26890: ST_TO_ADDR
// if weapon = ar_miner then
26891: LD_VAR 0 7
26895: PUSH
26896: LD_INT 81
26898: EQUAL
26899: IFFALSE 26956
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
26901: LD_ADDR_EXP 114
26905: PUSH
26906: LD_EXP 114
26910: PPUSH
26911: LD_EXP 114
26915: PUSH
26916: LD_INT 1
26918: PLUS
26919: PPUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 1
26929: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26930: LD_ADDR_EXP 115
26934: PUSH
26935: LD_EXP 115
26939: PPUSH
26940: LD_EXP 115
26944: PUSH
26945: LD_INT 1
26947: PLUS
26948: PPUSH
26949: EMPTY
26950: PPUSH
26951: CALL_OW 1
26955: ST_TO_ADDR
// end ; if not factoryWaypoints then
26956: LD_EXP 103
26960: NOT
26961: IFFALSE 26965
// exit ;
26963: GO 27538
// for i := 1 to Count ( factoryWaypoints ) do
26965: LD_ADDR_VAR 0 4
26969: PUSH
26970: DOUBLE
26971: LD_INT 1
26973: DEC
26974: ST_TO_ADDR
26975: LD_EXP 103
26979: PPUSH
26980: CALL 35391 0 1
26984: PUSH
26985: FOR_TO
26986: IFFALSE 27536
// if factoryWaypoints [ i ] [ 2 ] = factory then
26988: LD_EXP 103
26992: PUSH
26993: LD_VAR 0 4
26997: ARRAY
26998: PUSH
26999: LD_INT 2
27001: ARRAY
27002: PUSH
27003: LD_VAR 0 2
27007: EQUAL
27008: IFFALSE 27534
// begin if GetControl ( vehicle ) = control_manual then
27010: LD_VAR 0 1
27014: PPUSH
27015: CALL_OW 263
27019: PUSH
27020: LD_INT 1
27022: EQUAL
27023: IFFALSE 27387
// begin driver := IsDrivenBy ( vehicle ) ;
27025: LD_ADDR_VAR 0 5
27029: PUSH
27030: LD_VAR 0 1
27034: PPUSH
27035: CALL_OW 311
27039: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27040: LD_VAR 0 5
27044: PUSH
27045: LD_EXP 104
27049: IN
27050: IFTRUE 27064
27052: PUSH
27053: LD_VAR 0 1
27057: PUSH
27058: LD_EXP 104
27062: IN
27063: OR
27064: IFFALSE 27070
// exit ;
27066: POP
27067: POP
27068: GO 27538
// if not HasTask ( driver ) then
27070: LD_VAR 0 5
27074: PPUSH
27075: CALL_OW 314
27079: NOT
27080: IFFALSE 27385
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27082: LD_ADDR_EXP 104
27086: PUSH
27087: LD_EXP 104
27091: PPUSH
27092: LD_VAR 0 5
27096: PPUSH
27097: CALL 71357 0 2
27101: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27102: LD_ADDR_EXP 104
27106: PUSH
27107: LD_EXP 104
27111: PPUSH
27112: LD_VAR 0 1
27116: PPUSH
27117: CALL 71357 0 2
27121: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27122: LD_ADDR_VAR 0 6
27126: PUSH
27127: LD_EXP 103
27131: PUSH
27132: LD_VAR 0 4
27136: ARRAY
27137: PUSH
27138: LD_INT 3
27140: ARRAY
27141: PPUSH
27142: LD_EXP 103
27146: PUSH
27147: LD_VAR 0 4
27151: ARRAY
27152: PUSH
27153: LD_INT 4
27155: ARRAY
27156: PPUSH
27157: CALL_OW 428
27161: ST_TO_ADDR
// if hex then
27162: LD_VAR 0 6
27166: IFFALSE 27184
// ComMoveUnit ( driver , hex ) else
27168: LD_VAR 0 5
27172: PPUSH
27173: LD_VAR 0 6
27177: PPUSH
27178: CALL_OW 112
27182: GO 27268
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27184: LD_VAR 0 1
27188: PPUSH
27189: LD_EXP 103
27193: PUSH
27194: LD_VAR 0 4
27198: ARRAY
27199: PUSH
27200: LD_INT 3
27202: ARRAY
27203: PPUSH
27204: LD_EXP 103
27208: PUSH
27209: LD_VAR 0 4
27213: ARRAY
27214: PUSH
27215: LD_INT 4
27217: ARRAY
27218: PPUSH
27219: CALL_OW 297
27223: PUSH
27224: LD_INT 0
27226: GREATER
27227: IFFALSE 27268
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27229: LD_VAR 0 5
27233: PPUSH
27234: LD_EXP 103
27238: PUSH
27239: LD_VAR 0 4
27243: ARRAY
27244: PUSH
27245: LD_INT 3
27247: ARRAY
27248: PPUSH
27249: LD_EXP 103
27253: PUSH
27254: LD_VAR 0 4
27258: ARRAY
27259: PUSH
27260: LD_INT 4
27262: ARRAY
27263: PPUSH
27264: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27268: LD_VAR 0 5
27272: PPUSH
27273: CALL_OW 181
// if Multiplayer then
27277: LD_OWVAR 4
27281: IFFALSE 27330
// begin repeat wait ( 10 ) ;
27283: LD_INT 10
27285: PPUSH
27286: CALL_OW 67
// until not IsInUnit ( driver ) ;
27290: LD_VAR 0 5
27294: PPUSH
27295: CALL_OW 310
27299: NOT
27300: IFFALSE 27283
// if not HasTask ( driver ) then
27302: LD_VAR 0 5
27306: PPUSH
27307: CALL_OW 314
27311: NOT
27312: IFFALSE 27328
// ComEnterUnit ( driver , factory ) ;
27314: LD_VAR 0 5
27318: PPUSH
27319: LD_VAR 0 2
27323: PPUSH
27324: CALL_OW 120
// end else
27328: GO 27344
// AddComEnterUnit ( driver , factory ) ;
27330: LD_VAR 0 5
27334: PPUSH
27335: LD_VAR 0 2
27339: PPUSH
27340: CALL_OW 180
// wait ( 0 0$1 ) ;
27344: LD_INT 35
27346: PPUSH
27347: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27351: LD_ADDR_EXP 104
27355: PUSH
27356: LD_EXP 104
27360: PUSH
27361: LD_VAR 0 5
27365: DIFF
27366: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27367: LD_ADDR_EXP 104
27371: PUSH
27372: LD_EXP 104
27376: PUSH
27377: LD_VAR 0 1
27381: DIFF
27382: ST_TO_ADDR
// break ;
27383: GO 27536
// end ; end else
27385: GO 27534
// if GetControl ( vehicle ) = control_remote then
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 263
27396: PUSH
27397: LD_INT 2
27399: EQUAL
27400: IFFALSE 27486
// begin wait ( 0 0$2 ) ;
27402: LD_INT 70
27404: PPUSH
27405: CALL_OW 67
// repeat wait ( 10 ) ;
27409: LD_INT 10
27411: PPUSH
27412: CALL_OW 67
// Connect ( vehicle ) ;
27416: LD_VAR 0 1
27420: PPUSH
27421: CALL 41669 0 1
// until IsControledBy ( vehicle ) ;
27425: LD_VAR 0 1
27429: PPUSH
27430: CALL_OW 312
27434: IFFALSE 27409
// wait ( 10 ) ;
27436: LD_INT 10
27438: PPUSH
27439: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27443: LD_VAR 0 1
27447: PPUSH
27448: LD_EXP 103
27452: PUSH
27453: LD_VAR 0 4
27457: ARRAY
27458: PUSH
27459: LD_INT 3
27461: ARRAY
27462: PPUSH
27463: LD_EXP 103
27467: PUSH
27468: LD_VAR 0 4
27472: ARRAY
27473: PUSH
27474: LD_INT 4
27476: ARRAY
27477: PPUSH
27478: CALL_OW 111
// break ;
27482: GO 27536
// end else
27484: GO 27534
// begin wait ( 0 0$3 ) ;
27486: LD_INT 105
27488: PPUSH
27489: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27493: LD_VAR 0 1
27497: PPUSH
27498: LD_EXP 103
27502: PUSH
27503: LD_VAR 0 4
27507: ARRAY
27508: PUSH
27509: LD_INT 3
27511: ARRAY
27512: PPUSH
27513: LD_EXP 103
27517: PUSH
27518: LD_VAR 0 4
27522: ARRAY
27523: PUSH
27524: LD_INT 4
27526: ARRAY
27527: PPUSH
27528: CALL_OW 111
// break ;
27532: GO 27536
// end ; end ;
27534: GO 26985
27536: POP
27537: POP
// end ;
27538: LD_VAR 0 3
27542: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27543: LD_INT 0
27545: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27546: LD_VAR 0 1
27550: PUSH
27551: LD_INT 250
27553: EQUAL
27554: IFFALSE 27571
27556: PUSH
27557: LD_VAR 0 2
27561: PPUSH
27562: CALL_OW 264
27566: PUSH
27567: LD_INT 81
27569: EQUAL
27570: AND
27571: IFFALSE 27592
// MinerPlaceMine ( unit , x , y ) ;
27573: LD_VAR 0 2
27577: PPUSH
27578: LD_VAR 0 4
27582: PPUSH
27583: LD_VAR 0 5
27587: PPUSH
27588: CALL 30873 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27592: LD_VAR 0 1
27596: PUSH
27597: LD_INT 251
27599: EQUAL
27600: IFFALSE 27617
27602: PUSH
27603: LD_VAR 0 2
27607: PPUSH
27608: CALL_OW 264
27612: PUSH
27613: LD_INT 81
27615: EQUAL
27616: AND
27617: IFFALSE 27638
// MinerDetonateMine ( unit , x , y ) ;
27619: LD_VAR 0 2
27623: PPUSH
27624: LD_VAR 0 4
27628: PPUSH
27629: LD_VAR 0 5
27633: PPUSH
27634: CALL 31280 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27638: LD_VAR 0 1
27642: PUSH
27643: LD_INT 252
27645: EQUAL
27646: IFFALSE 27663
27648: PUSH
27649: LD_VAR 0 2
27653: PPUSH
27654: CALL_OW 264
27658: PUSH
27659: LD_INT 81
27661: EQUAL
27662: AND
27663: IFFALSE 27684
// MinerCreateMinefield ( unit , x , y ) ;
27665: LD_VAR 0 2
27669: PPUSH
27670: LD_VAR 0 4
27674: PPUSH
27675: LD_VAR 0 5
27679: PPUSH
27680: CALL 31512 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27684: LD_VAR 0 1
27688: PUSH
27689: LD_INT 253
27691: EQUAL
27692: IFFALSE 27709
27694: PUSH
27695: LD_VAR 0 2
27699: PPUSH
27700: CALL_OW 257
27704: PUSH
27705: LD_INT 5
27707: EQUAL
27708: AND
27709: IFFALSE 27730
// ComBinocular ( unit , x , y ) ;
27711: LD_VAR 0 2
27715: PPUSH
27716: LD_VAR 0 4
27720: PPUSH
27721: LD_VAR 0 5
27725: PPUSH
27726: CALL 31887 0 3
// if selectedUnit then
27730: LD_VAR 0 3
27734: IFFALSE 27794
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27736: LD_VAR 0 1
27740: PUSH
27741: LD_INT 254
27743: EQUAL
27744: IFFALSE 27761
27746: PUSH
27747: LD_VAR 0 2
27751: PPUSH
27752: CALL_OW 264
27756: PUSH
27757: LD_INT 99
27759: EQUAL
27760: AND
27761: IFFALSE 27778
27763: PUSH
27764: LD_VAR 0 3
27768: PPUSH
27769: CALL_OW 263
27773: PUSH
27774: LD_INT 3
27776: EQUAL
27777: AND
27778: IFFALSE 27794
// HackDestroyVehicle ( unit , selectedUnit ) ;
27780: LD_VAR 0 2
27784: PPUSH
27785: LD_VAR 0 3
27789: PPUSH
27790: CALL 30084 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27794: LD_VAR 0 1
27798: PUSH
27799: LD_INT 255
27801: EQUAL
27802: IFFALSE 27826
27804: PUSH
27805: LD_VAR 0 2
27809: PPUSH
27810: CALL_OW 264
27814: PUSH
27815: LD_INT 14
27817: PUSH
27818: LD_INT 53
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: IN
27825: AND
27826: IFFALSE 27844
27828: PUSH
27829: LD_VAR 0 4
27833: PPUSH
27834: LD_VAR 0 5
27838: PPUSH
27839: CALL_OW 488
27843: AND
27844: IFFALSE 27868
// CutTreeXYR ( unit , x , y , 12 ) ;
27846: LD_VAR 0 2
27850: PPUSH
27851: LD_VAR 0 4
27855: PPUSH
27856: LD_VAR 0 5
27860: PPUSH
27861: LD_INT 12
27863: PPUSH
27864: CALL 28059 0 4
// if cmd = 256 then
27868: LD_VAR 0 1
27872: PUSH
27873: LD_INT 256
27875: EQUAL
27876: IFFALSE 27897
// SetFactoryWaypoint ( unit , x , y ) ;
27878: LD_VAR 0 2
27882: PPUSH
27883: LD_VAR 0 4
27887: PPUSH
27888: LD_VAR 0 5
27892: PPUSH
27893: CALL 25175 0 3
// if cmd = 257 then
27897: LD_VAR 0 1
27901: PUSH
27902: LD_INT 257
27904: EQUAL
27905: IFFALSE 27926
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27907: LD_VAR 0 2
27911: PPUSH
27912: LD_VAR 0 4
27916: PPUSH
27917: LD_VAR 0 5
27921: PPUSH
27922: CALL 25671 0 3
// if cmd = 258 then
27926: LD_VAR 0 1
27930: PUSH
27931: LD_INT 258
27933: EQUAL
27934: IFFALSE 27958
// BurnTreeXYR ( unit , x , y , 8 ) ;
27936: LD_VAR 0 2
27940: PPUSH
27941: LD_VAR 0 4
27945: PPUSH
27946: LD_VAR 0 5
27950: PPUSH
27951: LD_INT 8
27953: PPUSH
27954: CALL 28459 0 4
// end ;
27958: LD_VAR 0 6
27962: RET
// export function ComRadiation ( un ) ; var eff ; begin
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
27967: LD_VAR 0 1
27971: PPUSH
27972: CALL_OW 264
27976: PUSH
27977: LD_INT 91
27979: NONEQUAL
27980: IFFALSE 27984
// exit ;
27982: GO 28054
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27984: LD_INT 68
27986: PPUSH
27987: LD_VAR 0 1
27991: PPUSH
27992: CALL_OW 255
27996: PPUSH
27997: CALL_OW 321
28001: PUSH
28002: LD_INT 2
28004: EQUAL
28005: IFFALSE 28017
// eff := 50 else
28007: LD_ADDR_VAR 0 3
28011: PUSH
28012: LD_INT 50
28014: ST_TO_ADDR
28015: GO 28025
// eff := 25 ;
28017: LD_ADDR_VAR 0 3
28021: PUSH
28022: LD_INT 25
28024: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28025: LD_VAR 0 1
28029: PPUSH
28030: CALL_OW 250
28034: PPUSH
28035: LD_VAR 0 1
28039: PPUSH
28040: CALL_OW 251
28044: PPUSH
28045: LD_VAR 0 3
28049: PPUSH
28050: CALL_OW 495
// end ;
28054: LD_VAR 0 2
28058: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28059: LD_INT 0
28061: PPUSH
28062: PPUSH
28063: PPUSH
28064: PPUSH
28065: PPUSH
28066: PPUSH
28067: PPUSH
28068: PPUSH
28069: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28070: LD_VAR 0 1
28074: PPUSH
28075: CALL_OW 302
28079: NOT
28080: IFTRUE 28099
28082: PUSH
28083: LD_VAR 0 2
28087: PPUSH
28088: LD_VAR 0 3
28092: PPUSH
28093: CALL_OW 488
28097: NOT
28098: OR
28099: IFTRUE 28108
28101: PUSH
28102: LD_VAR 0 4
28106: NOT
28107: OR
28108: IFFALSE 28112
// exit ;
28110: GO 28454
// list := [ ] ;
28112: LD_ADDR_VAR 0 13
28116: PUSH
28117: EMPTY
28118: ST_TO_ADDR
// if x - r < 0 then
28119: LD_VAR 0 2
28123: PUSH
28124: LD_VAR 0 4
28128: MINUS
28129: PUSH
28130: LD_INT 0
28132: LESS
28133: IFFALSE 28145
// min_x := 0 else
28135: LD_ADDR_VAR 0 7
28139: PUSH
28140: LD_INT 0
28142: ST_TO_ADDR
28143: GO 28161
// min_x := x - r ;
28145: LD_ADDR_VAR 0 7
28149: PUSH
28150: LD_VAR 0 2
28154: PUSH
28155: LD_VAR 0 4
28159: MINUS
28160: ST_TO_ADDR
// if y - r < 0 then
28161: LD_VAR 0 3
28165: PUSH
28166: LD_VAR 0 4
28170: MINUS
28171: PUSH
28172: LD_INT 0
28174: LESS
28175: IFFALSE 28187
// min_y := 0 else
28177: LD_ADDR_VAR 0 8
28181: PUSH
28182: LD_INT 0
28184: ST_TO_ADDR
28185: GO 28203
// min_y := y - r ;
28187: LD_ADDR_VAR 0 8
28191: PUSH
28192: LD_VAR 0 3
28196: PUSH
28197: LD_VAR 0 4
28201: MINUS
28202: ST_TO_ADDR
// max_x := x + r ;
28203: LD_ADDR_VAR 0 9
28207: PUSH
28208: LD_VAR 0 2
28212: PUSH
28213: LD_VAR 0 4
28217: PLUS
28218: ST_TO_ADDR
// max_y := y + r ;
28219: LD_ADDR_VAR 0 10
28223: PUSH
28224: LD_VAR 0 3
28228: PUSH
28229: LD_VAR 0 4
28233: PLUS
28234: ST_TO_ADDR
// for _x = min_x to max_x do
28235: LD_ADDR_VAR 0 11
28239: PUSH
28240: DOUBLE
28241: LD_VAR 0 7
28245: DEC
28246: ST_TO_ADDR
28247: LD_VAR 0 9
28251: PUSH
28252: FOR_TO
28253: IFFALSE 28372
// for _y = min_y to max_y do
28255: LD_ADDR_VAR 0 12
28259: PUSH
28260: DOUBLE
28261: LD_VAR 0 8
28265: DEC
28266: ST_TO_ADDR
28267: LD_VAR 0 10
28271: PUSH
28272: FOR_TO
28273: IFFALSE 28368
// begin if not ValidHex ( _x , _y ) then
28275: LD_VAR 0 11
28279: PPUSH
28280: LD_VAR 0 12
28284: PPUSH
28285: CALL_OW 488
28289: NOT
28290: IFFALSE 28294
// continue ;
28292: GO 28272
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28294: LD_VAR 0 11
28298: PPUSH
28299: LD_VAR 0 12
28303: PPUSH
28304: CALL_OW 351
28308: IFFALSE 28326
28310: PUSH
28311: LD_VAR 0 11
28315: PPUSH
28316: LD_VAR 0 12
28320: PPUSH
28321: CALL_OW 554
28325: AND
28326: IFFALSE 28366
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28328: LD_ADDR_VAR 0 13
28332: PUSH
28333: LD_VAR 0 13
28337: PPUSH
28338: LD_VAR 0 13
28342: PUSH
28343: LD_INT 1
28345: PLUS
28346: PPUSH
28347: LD_VAR 0 11
28351: PUSH
28352: LD_VAR 0 12
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 2
28365: ST_TO_ADDR
// end ;
28366: GO 28272
28368: POP
28369: POP
28370: GO 28252
28372: POP
28373: POP
// if not list then
28374: LD_VAR 0 13
28378: NOT
28379: IFFALSE 28383
// exit ;
28381: GO 28454
// for i in list do
28383: LD_ADDR_VAR 0 6
28387: PUSH
28388: LD_VAR 0 13
28392: PUSH
28393: FOR_IN
28394: IFFALSE 28452
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28396: LD_VAR 0 1
28400: PPUSH
28401: LD_STRING M
28403: PUSH
28404: LD_VAR 0 6
28408: PUSH
28409: LD_INT 1
28411: ARRAY
28412: PUSH
28413: LD_VAR 0 6
28417: PUSH
28418: LD_INT 2
28420: ARRAY
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: PPUSH
28446: CALL_OW 447
28450: GO 28393
28452: POP
28453: POP
// end ;
28454: LD_VAR 0 5
28458: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28459: LD_INT 0
28461: PPUSH
28462: PPUSH
28463: PPUSH
28464: PPUSH
28465: PPUSH
28466: PPUSH
28467: PPUSH
28468: PPUSH
28469: PPUSH
28470: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28471: LD_VAR 0 1
28475: PPUSH
28476: CALL_OW 302
28480: NOT
28481: IFTRUE 28500
28483: PUSH
28484: LD_VAR 0 2
28488: PPUSH
28489: LD_VAR 0 3
28493: PPUSH
28494: CALL_OW 488
28498: NOT
28499: OR
28500: IFTRUE 28509
28502: PUSH
28503: LD_VAR 0 4
28507: NOT
28508: OR
28509: IFFALSE 28513
// exit ;
28511: GO 29030
// list := [ ] ;
28513: LD_ADDR_VAR 0 13
28517: PUSH
28518: EMPTY
28519: ST_TO_ADDR
// if x - r < 0 then
28520: LD_VAR 0 2
28524: PUSH
28525: LD_VAR 0 4
28529: MINUS
28530: PUSH
28531: LD_INT 0
28533: LESS
28534: IFFALSE 28546
// min_x := 0 else
28536: LD_ADDR_VAR 0 7
28540: PUSH
28541: LD_INT 0
28543: ST_TO_ADDR
28544: GO 28562
// min_x := x - r ;
28546: LD_ADDR_VAR 0 7
28550: PUSH
28551: LD_VAR 0 2
28555: PUSH
28556: LD_VAR 0 4
28560: MINUS
28561: ST_TO_ADDR
// if y - r < 0 then
28562: LD_VAR 0 3
28566: PUSH
28567: LD_VAR 0 4
28571: MINUS
28572: PUSH
28573: LD_INT 0
28575: LESS
28576: IFFALSE 28588
// min_y := 0 else
28578: LD_ADDR_VAR 0 8
28582: PUSH
28583: LD_INT 0
28585: ST_TO_ADDR
28586: GO 28604
// min_y := y - r ;
28588: LD_ADDR_VAR 0 8
28592: PUSH
28593: LD_VAR 0 3
28597: PUSH
28598: LD_VAR 0 4
28602: MINUS
28603: ST_TO_ADDR
// max_x := x + r ;
28604: LD_ADDR_VAR 0 9
28608: PUSH
28609: LD_VAR 0 2
28613: PUSH
28614: LD_VAR 0 4
28618: PLUS
28619: ST_TO_ADDR
// max_y := y + r ;
28620: LD_ADDR_VAR 0 10
28624: PUSH
28625: LD_VAR 0 3
28629: PUSH
28630: LD_VAR 0 4
28634: PLUS
28635: ST_TO_ADDR
// for _x = min_x to max_x do
28636: LD_ADDR_VAR 0 11
28640: PUSH
28641: DOUBLE
28642: LD_VAR 0 7
28646: DEC
28647: ST_TO_ADDR
28648: LD_VAR 0 9
28652: PUSH
28653: FOR_TO
28654: IFFALSE 28773
// for _y = min_y to max_y do
28656: LD_ADDR_VAR 0 12
28660: PUSH
28661: DOUBLE
28662: LD_VAR 0 8
28666: DEC
28667: ST_TO_ADDR
28668: LD_VAR 0 10
28672: PUSH
28673: FOR_TO
28674: IFFALSE 28769
// begin if not ValidHex ( _x , _y ) then
28676: LD_VAR 0 11
28680: PPUSH
28681: LD_VAR 0 12
28685: PPUSH
28686: CALL_OW 488
28690: NOT
28691: IFFALSE 28695
// continue ;
28693: GO 28673
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28695: LD_VAR 0 11
28699: PPUSH
28700: LD_VAR 0 12
28704: PPUSH
28705: CALL_OW 351
28709: IFFALSE 28727
28711: PUSH
28712: LD_VAR 0 11
28716: PPUSH
28717: LD_VAR 0 12
28721: PPUSH
28722: CALL_OW 554
28726: AND
28727: IFFALSE 28767
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28729: LD_ADDR_VAR 0 13
28733: PUSH
28734: LD_VAR 0 13
28738: PPUSH
28739: LD_VAR 0 13
28743: PUSH
28744: LD_INT 1
28746: PLUS
28747: PPUSH
28748: LD_VAR 0 11
28752: PUSH
28753: LD_VAR 0 12
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PPUSH
28762: CALL_OW 2
28766: ST_TO_ADDR
// end ;
28767: GO 28673
28769: POP
28770: POP
28771: GO 28653
28773: POP
28774: POP
// if not list then
28775: LD_VAR 0 13
28779: NOT
28780: IFFALSE 28784
// exit ;
28782: GO 29030
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28784: LD_ADDR_VAR 0 13
28788: PUSH
28789: LD_VAR 0 1
28793: PPUSH
28794: LD_VAR 0 13
28798: PPUSH
28799: LD_INT 1
28801: PPUSH
28802: LD_INT 1
28804: PPUSH
28805: CALL 38797 0 4
28809: ST_TO_ADDR
// ComStop ( flame ) ;
28810: LD_VAR 0 1
28814: PPUSH
28815: CALL_OW 141
// for i in list do
28819: LD_ADDR_VAR 0 6
28823: PUSH
28824: LD_VAR 0 13
28828: PUSH
28829: FOR_IN
28830: IFFALSE 28861
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28832: LD_VAR 0 1
28836: PPUSH
28837: LD_VAR 0 6
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: PPUSH
28846: LD_VAR 0 6
28850: PUSH
28851: LD_INT 2
28853: ARRAY
28854: PPUSH
28855: CALL_OW 176
28859: GO 28829
28861: POP
28862: POP
// repeat wait ( 0 0$1 ) ;
28863: LD_INT 35
28865: PPUSH
28866: CALL_OW 67
// task := GetTaskList ( flame ) ;
28870: LD_ADDR_VAR 0 14
28874: PUSH
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 437
28884: ST_TO_ADDR
// if not task then
28885: LD_VAR 0 14
28889: NOT
28890: IFFALSE 28894
// exit ;
28892: GO 29030
// if task [ 1 ] [ 1 ] <> | then
28894: LD_VAR 0 14
28898: PUSH
28899: LD_INT 1
28901: ARRAY
28902: PUSH
28903: LD_INT 1
28905: ARRAY
28906: PUSH
28907: LD_STRING |
28909: NONEQUAL
28910: IFFALSE 28914
// exit ;
28912: GO 29030
// _x := task [ 1 ] [ 2 ] ;
28914: LD_ADDR_VAR 0 11
28918: PUSH
28919: LD_VAR 0 14
28923: PUSH
28924: LD_INT 1
28926: ARRAY
28927: PUSH
28928: LD_INT 2
28930: ARRAY
28931: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28932: LD_ADDR_VAR 0 12
28936: PUSH
28937: LD_VAR 0 14
28941: PUSH
28942: LD_INT 1
28944: ARRAY
28945: PUSH
28946: LD_INT 3
28948: ARRAY
28949: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28950: LD_VAR 0 11
28954: PPUSH
28955: LD_VAR 0 12
28959: PPUSH
28960: CALL_OW 351
28964: NOT
28965: IFTRUE 28984
28967: PUSH
28968: LD_VAR 0 11
28972: PPUSH
28973: LD_VAR 0 12
28977: PPUSH
28978: CALL_OW 554
28982: NOT
28983: OR
28984: IFFALSE 29018
// begin task := Delete ( task , 1 ) ;
28986: LD_ADDR_VAR 0 14
28990: PUSH
28991: LD_VAR 0 14
28995: PPUSH
28996: LD_INT 1
28998: PPUSH
28999: CALL_OW 3
29003: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29004: LD_VAR 0 1
29008: PPUSH
29009: LD_VAR 0 14
29013: PPUSH
29014: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29018: LD_VAR 0 1
29022: PPUSH
29023: CALL_OW 314
29027: NOT
29028: IFFALSE 28863
// end ;
29030: LD_VAR 0 5
29034: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29035: LD_EXP 107
29039: NOT
29040: IFFALSE 29090
29042: GO 29044
29044: DISABLE
// begin initHack := true ;
29045: LD_ADDR_EXP 107
29049: PUSH
29050: LD_INT 1
29052: ST_TO_ADDR
// hackTanks := [ ] ;
29053: LD_ADDR_EXP 108
29057: PUSH
29058: EMPTY
29059: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29060: LD_ADDR_EXP 109
29064: PUSH
29065: EMPTY
29066: ST_TO_ADDR
// hackLimit := 3 ;
29067: LD_ADDR_EXP 110
29071: PUSH
29072: LD_INT 3
29074: ST_TO_ADDR
// hackDist := 12 ;
29075: LD_ADDR_EXP 111
29079: PUSH
29080: LD_INT 12
29082: ST_TO_ADDR
// hackCounter := [ ] ;
29083: LD_ADDR_EXP 112
29087: PUSH
29088: EMPTY
29089: ST_TO_ADDR
// end ;
29090: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29091: LD_EXP 107
29095: IFFALSE 29113
29097: PUSH
29098: LD_INT 34
29100: PUSH
29101: LD_INT 99
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PPUSH
29108: CALL_OW 69
29112: AND
29113: IFFALSE 29366
29115: GO 29117
29117: DISABLE
29118: LD_INT 0
29120: PPUSH
29121: PPUSH
// begin enable ;
29122: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29123: LD_ADDR_VAR 0 1
29127: PUSH
29128: LD_INT 34
29130: PUSH
29131: LD_INT 99
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PPUSH
29138: CALL_OW 69
29142: PUSH
29143: FOR_IN
29144: IFFALSE 29364
// begin if not i in hackTanks then
29146: LD_VAR 0 1
29150: PUSH
29151: LD_EXP 108
29155: IN
29156: NOT
29157: IFFALSE 29240
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29159: LD_ADDR_EXP 108
29163: PUSH
29164: LD_EXP 108
29168: PPUSH
29169: LD_EXP 108
29173: PUSH
29174: LD_INT 1
29176: PLUS
29177: PPUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: CALL_OW 1
29187: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29188: LD_ADDR_EXP 109
29192: PUSH
29193: LD_EXP 109
29197: PPUSH
29198: LD_EXP 109
29202: PUSH
29203: LD_INT 1
29205: PLUS
29206: PPUSH
29207: EMPTY
29208: PPUSH
29209: CALL_OW 1
29213: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29214: LD_ADDR_EXP 112
29218: PUSH
29219: LD_EXP 112
29223: PPUSH
29224: LD_EXP 112
29228: PUSH
29229: LD_INT 1
29231: PLUS
29232: PPUSH
29233: EMPTY
29234: PPUSH
29235: CALL_OW 1
29239: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 302
29249: NOT
29250: IFFALSE 29263
// begin HackUnlinkAll ( i ) ;
29252: LD_VAR 0 1
29256: PPUSH
29257: CALL 29369 0 1
// continue ;
29261: GO 29143
// end ; HackCheckCapturedStatus ( i ) ;
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL 29814 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29272: LD_ADDR_VAR 0 2
29276: PUSH
29277: LD_INT 81
29279: PUSH
29280: LD_VAR 0 1
29284: PPUSH
29285: CALL_OW 255
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 33
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 91
29306: PUSH
29307: LD_VAR 0 1
29311: PUSH
29312: LD_EXP 111
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 50
29324: PUSH
29325: EMPTY
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: PPUSH
29334: CALL_OW 69
29338: ST_TO_ADDR
// if not tmp then
29339: LD_VAR 0 2
29343: NOT
29344: IFFALSE 29348
// continue ;
29346: GO 29143
// HackLink ( i , tmp ) ;
29348: LD_VAR 0 1
29352: PPUSH
29353: LD_VAR 0 2
29357: PPUSH
29358: CALL 29505 0 2
// end ;
29362: GO 29143
29364: POP
29365: POP
// end ;
29366: PPOPN 2
29368: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29369: LD_INT 0
29371: PPUSH
29372: PPUSH
29373: PPUSH
// if not hack in hackTanks then
29374: LD_VAR 0 1
29378: PUSH
29379: LD_EXP 108
29383: IN
29384: NOT
29385: IFFALSE 29389
// exit ;
29387: GO 29500
// index := GetElementIndex ( hackTanks , hack ) ;
29389: LD_ADDR_VAR 0 4
29393: PUSH
29394: LD_EXP 108
29398: PPUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL 38092 0 2
29408: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29409: LD_EXP 109
29413: PUSH
29414: LD_VAR 0 4
29418: ARRAY
29419: IFFALSE 29500
// begin for i in hackTanksCaptured [ index ] do
29421: LD_ADDR_VAR 0 3
29425: PUSH
29426: LD_EXP 109
29430: PUSH
29431: LD_VAR 0 4
29435: ARRAY
29436: PUSH
29437: FOR_IN
29438: IFFALSE 29464
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29440: LD_VAR 0 3
29444: PUSH
29445: LD_INT 1
29447: ARRAY
29448: PPUSH
29449: LD_VAR 0 3
29453: PUSH
29454: LD_INT 2
29456: ARRAY
29457: PPUSH
29458: CALL_OW 235
29462: GO 29437
29464: POP
29465: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29466: LD_ADDR_EXP 109
29470: PUSH
29471: LD_EXP 109
29475: PPUSH
29476: LD_VAR 0 4
29480: PPUSH
29481: EMPTY
29482: PPUSH
29483: CALL_OW 1
29487: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29488: LD_VAR 0 1
29492: PPUSH
29493: LD_INT 0
29495: PPUSH
29496: CALL_OW 505
// end ; end ;
29500: LD_VAR 0 2
29504: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29505: LD_INT 0
29507: PPUSH
29508: PPUSH
29509: PPUSH
// if not hack in hackTanks or not vehicles then
29510: LD_VAR 0 1
29514: PUSH
29515: LD_EXP 108
29519: IN
29520: NOT
29521: IFTRUE 29530
29523: PUSH
29524: LD_VAR 0 2
29528: NOT
29529: OR
29530: IFFALSE 29534
// exit ;
29532: GO 29809
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29534: LD_ADDR_VAR 0 2
29538: PUSH
29539: LD_VAR 0 1
29543: PPUSH
29544: LD_VAR 0 2
29548: PPUSH
29549: LD_INT 1
29551: PPUSH
29552: LD_INT 1
29554: PPUSH
29555: CALL 38744 0 4
29559: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29560: LD_ADDR_VAR 0 5
29564: PUSH
29565: LD_EXP 108
29569: PPUSH
29570: LD_VAR 0 1
29574: PPUSH
29575: CALL 38092 0 2
29579: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29580: LD_EXP 109
29584: PUSH
29585: LD_VAR 0 5
29589: ARRAY
29590: PUSH
29591: LD_EXP 110
29595: LESS
29596: IFFALSE 29785
// begin for i := 1 to vehicles do
29598: LD_ADDR_VAR 0 4
29602: PUSH
29603: DOUBLE
29604: LD_INT 1
29606: DEC
29607: ST_TO_ADDR
29608: LD_VAR 0 2
29612: PUSH
29613: FOR_TO
29614: IFFALSE 29783
// begin if hackTanksCaptured [ index ] = hackLimit then
29616: LD_EXP 109
29620: PUSH
29621: LD_VAR 0 5
29625: ARRAY
29626: PUSH
29627: LD_EXP 110
29631: EQUAL
29632: IFFALSE 29636
// break ;
29634: GO 29783
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29636: LD_ADDR_EXP 112
29640: PUSH
29641: LD_EXP 112
29645: PPUSH
29646: LD_VAR 0 5
29650: PPUSH
29651: LD_EXP 112
29655: PUSH
29656: LD_VAR 0 5
29660: ARRAY
29661: PUSH
29662: LD_INT 1
29664: PLUS
29665: PPUSH
29666: CALL_OW 1
29670: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29671: LD_ADDR_EXP 109
29675: PUSH
29676: LD_EXP 109
29680: PPUSH
29681: LD_VAR 0 5
29685: PUSH
29686: LD_EXP 109
29690: PUSH
29691: LD_VAR 0 5
29695: ARRAY
29696: PUSH
29697: LD_INT 1
29699: PLUS
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PPUSH
29705: LD_VAR 0 2
29709: PUSH
29710: LD_VAR 0 4
29714: ARRAY
29715: PUSH
29716: LD_VAR 0 2
29720: PUSH
29721: LD_VAR 0 4
29725: ARRAY
29726: PPUSH
29727: CALL_OW 255
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PPUSH
29736: CALL 38309 0 3
29740: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29741: LD_VAR 0 2
29745: PUSH
29746: LD_VAR 0 4
29750: ARRAY
29751: PPUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: CALL_OW 255
29761: PPUSH
29762: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29766: LD_VAR 0 2
29770: PUSH
29771: LD_VAR 0 4
29775: ARRAY
29776: PPUSH
29777: CALL_OW 141
// end ;
29781: GO 29613
29783: POP
29784: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29785: LD_VAR 0 1
29789: PPUSH
29790: LD_EXP 109
29794: PUSH
29795: LD_VAR 0 5
29799: ARRAY
29800: PUSH
29801: LD_INT 0
29803: PLUS
29804: PPUSH
29805: CALL_OW 505
// end ;
29809: LD_VAR 0 3
29813: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29814: LD_INT 0
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
// if not hack in hackTanks then
29820: LD_VAR 0 1
29824: PUSH
29825: LD_EXP 108
29829: IN
29830: NOT
29831: IFFALSE 29835
// exit ;
29833: GO 30079
// index := GetElementIndex ( hackTanks , hack ) ;
29835: LD_ADDR_VAR 0 4
29839: PUSH
29840: LD_EXP 108
29844: PPUSH
29845: LD_VAR 0 1
29849: PPUSH
29850: CALL 38092 0 2
29854: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29855: LD_ADDR_VAR 0 3
29859: PUSH
29860: DOUBLE
29861: LD_EXP 109
29865: PUSH
29866: LD_VAR 0 4
29870: ARRAY
29871: INC
29872: ST_TO_ADDR
29873: LD_INT 1
29875: PUSH
29876: FOR_DOWNTO
29877: IFFALSE 30053
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29879: LD_ADDR_VAR 0 5
29883: PUSH
29884: LD_EXP 109
29888: PUSH
29889: LD_VAR 0 4
29893: ARRAY
29894: PUSH
29895: LD_VAR 0 3
29899: ARRAY
29900: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29901: LD_VAR 0 5
29905: PUSH
29906: LD_INT 1
29908: ARRAY
29909: PPUSH
29910: CALL_OW 302
29914: NOT
29915: IFTRUE 29943
29917: PUSH
29918: LD_VAR 0 5
29922: PUSH
29923: LD_INT 1
29925: ARRAY
29926: PPUSH
29927: CALL_OW 255
29931: PUSH
29932: LD_VAR 0 1
29936: PPUSH
29937: CALL_OW 255
29941: NONEQUAL
29942: OR
29943: IFFALSE 30051
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29945: LD_VAR 0 5
29949: PUSH
29950: LD_INT 1
29952: ARRAY
29953: PPUSH
29954: CALL_OW 305
29958: IFFALSE 29986
29960: PUSH
29961: LD_VAR 0 5
29965: PUSH
29966: LD_INT 1
29968: ARRAY
29969: PPUSH
29970: CALL_OW 255
29974: PUSH
29975: LD_VAR 0 1
29979: PPUSH
29980: CALL_OW 255
29984: EQUAL
29985: AND
29986: IFFALSE 30010
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29988: LD_VAR 0 5
29992: PUSH
29993: LD_INT 1
29995: ARRAY
29996: PPUSH
29997: LD_VAR 0 5
30001: PUSH
30002: LD_INT 2
30004: ARRAY
30005: PPUSH
30006: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30010: LD_ADDR_EXP 109
30014: PUSH
30015: LD_EXP 109
30019: PPUSH
30020: LD_VAR 0 4
30024: PPUSH
30025: LD_EXP 109
30029: PUSH
30030: LD_VAR 0 4
30034: ARRAY
30035: PPUSH
30036: LD_VAR 0 3
30040: PPUSH
30041: CALL_OW 3
30045: PPUSH
30046: CALL_OW 1
30050: ST_TO_ADDR
// end ; end ;
30051: GO 29876
30053: POP
30054: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30055: LD_VAR 0 1
30059: PPUSH
30060: LD_EXP 109
30064: PUSH
30065: LD_VAR 0 4
30069: ARRAY
30070: PUSH
30071: LD_INT 0
30073: PLUS
30074: PPUSH
30075: CALL_OW 505
// end ;
30079: LD_VAR 0 2
30083: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30084: LD_INT 0
30086: PPUSH
30087: PPUSH
30088: PPUSH
30089: PPUSH
// if not hack in hackTanks then
30090: LD_VAR 0 1
30094: PUSH
30095: LD_EXP 108
30099: IN
30100: NOT
30101: IFFALSE 30105
// exit ;
30103: GO 30190
// index := GetElementIndex ( hackTanks , hack ) ;
30105: LD_ADDR_VAR 0 5
30109: PUSH
30110: LD_EXP 108
30114: PPUSH
30115: LD_VAR 0 1
30119: PPUSH
30120: CALL 38092 0 2
30124: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30125: LD_ADDR_VAR 0 4
30129: PUSH
30130: DOUBLE
30131: LD_INT 1
30133: DEC
30134: ST_TO_ADDR
30135: LD_EXP 109
30139: PUSH
30140: LD_VAR 0 5
30144: ARRAY
30145: PUSH
30146: FOR_TO
30147: IFFALSE 30188
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30149: LD_EXP 109
30153: PUSH
30154: LD_VAR 0 5
30158: ARRAY
30159: PUSH
30160: LD_VAR 0 4
30164: ARRAY
30165: PUSH
30166: LD_INT 1
30168: ARRAY
30169: PUSH
30170: LD_VAR 0 2
30174: EQUAL
30175: IFFALSE 30186
// KillUnit ( vehicle ) ;
30177: LD_VAR 0 2
30181: PPUSH
30182: CALL_OW 66
30186: GO 30146
30188: POP
30189: POP
// end ;
30190: LD_VAR 0 3
30194: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
30195: LD_EXP 113
30199: NOT
30200: IFFALSE 30333
30202: GO 30204
30204: DISABLE
30205: LD_INT 0
30207: PPUSH
// begin initMiner := true ;
30208: LD_ADDR_EXP 113
30212: PUSH
30213: LD_INT 1
30215: ST_TO_ADDR
// minersList := [ ] ;
30216: LD_ADDR_EXP 114
30220: PUSH
30221: EMPTY
30222: ST_TO_ADDR
// minerMinesList := [ ] ;
30223: LD_ADDR_EXP 115
30227: PUSH
30228: EMPTY
30229: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
30230: LD_ADDR_EXP 116
30234: PUSH
30235: LD_INT 6
30237: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30238: LD_ADDR_VAR 0 1
30242: PUSH
30243: LD_INT 34
30245: PUSH
30246: LD_INT 81
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PPUSH
30253: CALL_OW 69
30257: PUSH
30258: FOR_IN
30259: IFFALSE 30331
// begin if not i in minersList then
30261: LD_VAR 0 1
30265: PUSH
30266: LD_EXP 114
30270: IN
30271: NOT
30272: IFFALSE 30329
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30274: LD_ADDR_EXP 114
30278: PUSH
30279: LD_EXP 114
30283: PPUSH
30284: LD_EXP 114
30288: PUSH
30289: LD_INT 1
30291: PLUS
30292: PPUSH
30293: LD_VAR 0 1
30297: PPUSH
30298: CALL_OW 1
30302: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30303: LD_ADDR_EXP 115
30307: PUSH
30308: LD_EXP 115
30312: PPUSH
30313: LD_EXP 115
30317: PUSH
30318: LD_INT 1
30320: PLUS
30321: PPUSH
30322: EMPTY
30323: PPUSH
30324: CALL_OW 1
30328: ST_TO_ADDR
// end end ;
30329: GO 30258
30331: POP
30332: POP
// end ;
30333: PPOPN 1
30335: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
30336: LD_EXP 113
30340: IFFALSE 30371
30342: PUSH
30343: LD_EXP 115
30347: PPUSH
30348: CALL 35391 0 1
30352: IFTRUE 30370
30354: PUSH
30355: LD_INT 34
30357: PUSH
30358: LD_INT 81
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PPUSH
30365: CALL_OW 69
30369: OR
30370: AND
30371: IFFALSE 30870
30373: GO 30375
30375: DISABLE
30376: LD_INT 0
30378: PPUSH
30379: PPUSH
30380: PPUSH
30381: PPUSH
// begin enable ;
30382: ENABLE
// for i := minerMinesList downto 1 do
30383: LD_ADDR_VAR 0 1
30387: PUSH
30388: DOUBLE
30389: LD_EXP 115
30393: INC
30394: ST_TO_ADDR
30395: LD_INT 1
30397: PUSH
30398: FOR_DOWNTO
30399: IFFALSE 30868
// begin if IsLive ( minersList [ i ] ) then
30401: LD_EXP 114
30405: PUSH
30406: LD_VAR 0 1
30410: ARRAY
30411: PPUSH
30412: CALL_OW 300
30416: IFFALSE 30449
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
30418: LD_EXP 114
30422: PUSH
30423: LD_VAR 0 1
30427: ARRAY
30428: PPUSH
30429: LD_EXP 115
30433: PUSH
30434: LD_VAR 0 1
30438: ARRAY
30439: PPUSH
30440: CALL 35391 0 1
30444: PPUSH
30445: CALL_OW 505
// if not minerMinesList [ i ] then
30449: LD_EXP 115
30453: PUSH
30454: LD_VAR 0 1
30458: ARRAY
30459: NOT
30460: IFFALSE 30464
// continue ;
30462: GO 30398
// for j := minerMinesList [ i ] downto 1 do
30464: LD_ADDR_VAR 0 2
30468: PUSH
30469: DOUBLE
30470: LD_EXP 115
30474: PUSH
30475: LD_VAR 0 1
30479: ARRAY
30480: INC
30481: ST_TO_ADDR
30482: LD_INT 1
30484: PUSH
30485: FOR_DOWNTO
30486: IFFALSE 30864
// begin side := GetSide ( minersList [ i ] ) ;
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: LD_EXP 114
30497: PUSH
30498: LD_VAR 0 1
30502: ARRAY
30503: PPUSH
30504: CALL_OW 255
30508: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
30509: LD_EXP 114
30513: PUSH
30514: LD_VAR 0 1
30518: ARRAY
30519: PPUSH
30520: CALL_OW 301
30524: IFTRUE 30544
30526: PUSH
30527: LD_EXP 114
30531: PUSH
30532: LD_VAR 0 1
30536: ARRAY
30537: PPUSH
30538: CALL_OW 305
30542: NOT
30543: OR
30544: IFFALSE 30635
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30546: LD_EXP 115
30550: PUSH
30551: LD_VAR 0 1
30555: ARRAY
30556: PUSH
30557: LD_VAR 0 2
30561: ARRAY
30562: PUSH
30563: LD_INT 1
30565: ARRAY
30566: PPUSH
30567: LD_EXP 115
30571: PUSH
30572: LD_VAR 0 1
30576: ARRAY
30577: PUSH
30578: LD_VAR 0 2
30582: ARRAY
30583: PUSH
30584: LD_INT 2
30586: ARRAY
30587: PPUSH
30588: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30592: LD_ADDR_EXP 115
30596: PUSH
30597: LD_EXP 115
30601: PPUSH
30602: LD_VAR 0 1
30606: PPUSH
30607: LD_EXP 115
30611: PUSH
30612: LD_VAR 0 1
30616: ARRAY
30617: PPUSH
30618: LD_VAR 0 2
30622: PPUSH
30623: CALL_OW 3
30627: PPUSH
30628: CALL_OW 1
30632: ST_TO_ADDR
// continue ;
30633: GO 30485
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30635: LD_ADDR_VAR 0 4
30639: PUSH
30640: LD_EXP 115
30644: PUSH
30645: LD_VAR 0 1
30649: ARRAY
30650: PUSH
30651: LD_VAR 0 2
30655: ARRAY
30656: PUSH
30657: LD_INT 1
30659: ARRAY
30660: PPUSH
30661: LD_EXP 115
30665: PUSH
30666: LD_VAR 0 1
30670: ARRAY
30671: PUSH
30672: LD_VAR 0 2
30676: ARRAY
30677: PUSH
30678: LD_INT 2
30680: ARRAY
30681: PPUSH
30682: CALL_OW 428
30686: ST_TO_ADDR
// if not tmp then
30687: LD_VAR 0 4
30691: NOT
30692: IFFALSE 30696
// continue ;
30694: GO 30485
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30696: LD_VAR 0 4
30700: PUSH
30701: LD_INT 81
30703: PUSH
30704: LD_VAR 0 3
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PPUSH
30713: CALL_OW 69
30717: IN
30718: IFFALSE 30768
30720: PUSH
30721: LD_EXP 115
30725: PUSH
30726: LD_VAR 0 1
30730: ARRAY
30731: PUSH
30732: LD_VAR 0 2
30736: ARRAY
30737: PUSH
30738: LD_INT 1
30740: ARRAY
30741: PPUSH
30742: LD_EXP 115
30746: PUSH
30747: LD_VAR 0 1
30751: ARRAY
30752: PUSH
30753: LD_VAR 0 2
30757: ARRAY
30758: PUSH
30759: LD_INT 2
30761: ARRAY
30762: PPUSH
30763: CALL_OW 458
30767: AND
30768: IFFALSE 30862
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30770: LD_EXP 115
30774: PUSH
30775: LD_VAR 0 1
30779: ARRAY
30780: PUSH
30781: LD_VAR 0 2
30785: ARRAY
30786: PUSH
30787: LD_INT 1
30789: ARRAY
30790: PPUSH
30791: LD_EXP 115
30795: PUSH
30796: LD_VAR 0 1
30800: ARRAY
30801: PUSH
30802: LD_VAR 0 2
30806: ARRAY
30807: PUSH
30808: LD_INT 2
30810: ARRAY
30811: PPUSH
30812: LD_VAR 0 3
30816: PPUSH
30817: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30821: LD_ADDR_EXP 115
30825: PUSH
30826: LD_EXP 115
30830: PPUSH
30831: LD_VAR 0 1
30835: PPUSH
30836: LD_EXP 115
30840: PUSH
30841: LD_VAR 0 1
30845: ARRAY
30846: PPUSH
30847: LD_VAR 0 2
30851: PPUSH
30852: CALL_OW 3
30856: PPUSH
30857: CALL_OW 1
30861: ST_TO_ADDR
// end ; end ;
30862: GO 30485
30864: POP
30865: POP
// end ;
30866: GO 30398
30868: POP
30869: POP
// end ;
30870: PPOPN 4
30872: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
30873: LD_INT 0
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
// result := false ;
30879: LD_ADDR_VAR 0 4
30883: PUSH
30884: LD_INT 0
30886: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30887: LD_VAR 0 1
30891: PPUSH
30892: CALL_OW 264
30896: PUSH
30897: LD_INT 81
30899: EQUAL
30900: NOT
30901: IFFALSE 30905
// exit ;
30903: GO 31275
// side := GetSide ( unit ) ;
30905: LD_ADDR_VAR 0 6
30909: PUSH
30910: LD_VAR 0 1
30914: PPUSH
30915: CALL_OW 255
30919: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
30920: LD_ADDR_VAR 0 5
30924: PUSH
30925: LD_EXP 114
30929: PPUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: CALL 38092 0 2
30939: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30940: LD_EXP 115
30944: PUSH
30945: LD_VAR 0 5
30949: ARRAY
30950: PUSH
30951: LD_EXP 116
30955: GREATEREQUAL
30956: IFFALSE 30960
// exit ;
30958: GO 31275
// ComMoveXY ( unit , x , y ) ;
30960: LD_VAR 0 1
30964: PPUSH
30965: LD_VAR 0 2
30969: PPUSH
30970: LD_VAR 0 3
30974: PPUSH
30975: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30979: LD_INT 35
30981: PPUSH
30982: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30986: LD_VAR 0 1
30990: PPUSH
30991: LD_VAR 0 2
30995: PPUSH
30996: LD_VAR 0 3
31000: PPUSH
31001: CALL 70138 0 3
31005: NOT
31006: IFFALSE 31019
31008: PUSH
31009: LD_VAR 0 1
31013: PPUSH
31014: CALL_OW 314
31018: AND
31019: IFFALSE 31023
// exit ;
31021: GO 31275
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31023: LD_VAR 0 2
31027: PPUSH
31028: LD_VAR 0 3
31032: PPUSH
31033: CALL_OW 428
31037: PUSH
31038: LD_VAR 0 1
31042: EQUAL
31043: IFFALSE 31057
31045: PUSH
31046: LD_VAR 0 1
31050: PPUSH
31051: CALL_OW 314
31055: NOT
31056: AND
31057: IFFALSE 30979
// if MineAtPos ( x , y ) then
31059: LD_VAR 0 2
31063: PPUSH
31064: LD_VAR 0 3
31068: PPUSH
31069: CALL_OW 458
31073: IFFALSE 31077
// exit ;
31075: GO 31275
// if your_side = side then
31077: LD_OWVAR 2
31081: PUSH
31082: LD_VAR 0 6
31086: EQUAL
31087: IFFALSE 31106
// PlaySoundXY ( x , y , PlantMine ) ;
31089: LD_VAR 0 2
31093: PPUSH
31094: LD_VAR 0 3
31098: PPUSH
31099: LD_STRING PlantMine
31101: PPUSH
31102: CALL_OW 366
// repeat wait ( 1 ) ;
31106: LD_INT 1
31108: PPUSH
31109: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
31113: LD_VAR 0 2
31117: PPUSH
31118: LD_VAR 0 3
31122: PPUSH
31123: LD_VAR 0 6
31127: PPUSH
31128: LD_INT 0
31130: PPUSH
31131: CALL_OW 454
31135: IFFALSE 31106
// if MineAtPos ( x , y ) then
31137: LD_VAR 0 2
31141: PPUSH
31142: LD_VAR 0 3
31146: PPUSH
31147: CALL_OW 458
31151: IFFALSE 31267
// begin for i in minerMinesList [ index ] do
31153: LD_ADDR_VAR 0 7
31157: PUSH
31158: LD_EXP 115
31162: PUSH
31163: LD_VAR 0 5
31167: ARRAY
31168: PUSH
31169: FOR_IN
31170: IFFALSE 31212
// if i [ 1 ] = x and i [ 2 ] = y then
31172: LD_VAR 0 7
31176: PUSH
31177: LD_INT 1
31179: ARRAY
31180: PUSH
31181: LD_VAR 0 2
31185: EQUAL
31186: IFFALSE 31204
31188: PUSH
31189: LD_VAR 0 7
31193: PUSH
31194: LD_INT 2
31196: ARRAY
31197: PUSH
31198: LD_VAR 0 3
31202: EQUAL
31203: AND
31204: IFFALSE 31210
// exit ;
31206: POP
31207: POP
31208: GO 31275
31210: GO 31169
31212: POP
31213: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31214: LD_ADDR_EXP 115
31218: PUSH
31219: LD_EXP 115
31223: PPUSH
31224: LD_VAR 0 5
31228: PUSH
31229: LD_EXP 115
31233: PUSH
31234: LD_VAR 0 5
31238: ARRAY
31239: PUSH
31240: LD_INT 1
31242: PLUS
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PPUSH
31248: LD_VAR 0 2
31252: PUSH
31253: LD_VAR 0 3
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PPUSH
31262: CALL 38309 0 3
31266: ST_TO_ADDR
// end ; result := true ;
31267: LD_ADDR_VAR 0 4
31271: PUSH
31272: LD_INT 1
31274: ST_TO_ADDR
// end ;
31275: LD_VAR 0 4
31279: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31280: LD_INT 0
31282: PPUSH
31283: PPUSH
31284: PPUSH
// if not unit in minersList then
31285: LD_VAR 0 1
31289: PUSH
31290: LD_EXP 114
31294: IN
31295: NOT
31296: IFFALSE 31300
// exit ;
31298: GO 31507
// index := GetElementIndex ( minersList , unit ) ;
31300: LD_ADDR_VAR 0 6
31304: PUSH
31305: LD_EXP 114
31309: PPUSH
31310: LD_VAR 0 1
31314: PPUSH
31315: CALL 38092 0 2
31319: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31320: LD_ADDR_VAR 0 5
31324: PUSH
31325: DOUBLE
31326: LD_EXP 115
31330: PUSH
31331: LD_VAR 0 6
31335: ARRAY
31336: INC
31337: ST_TO_ADDR
31338: LD_INT 1
31340: PUSH
31341: FOR_DOWNTO
31342: IFFALSE 31505
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31344: LD_EXP 115
31348: PUSH
31349: LD_VAR 0 6
31353: ARRAY
31354: PUSH
31355: LD_VAR 0 5
31359: ARRAY
31360: PUSH
31361: LD_INT 1
31363: ARRAY
31364: PPUSH
31365: LD_EXP 115
31369: PUSH
31370: LD_VAR 0 6
31374: ARRAY
31375: PUSH
31376: LD_VAR 0 5
31380: ARRAY
31381: PUSH
31382: LD_INT 2
31384: ARRAY
31385: PPUSH
31386: LD_VAR 0 2
31390: PPUSH
31391: LD_VAR 0 3
31395: PPUSH
31396: CALL_OW 298
31400: PUSH
31401: LD_INT 6
31403: LESS
31404: IFFALSE 31503
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31406: LD_EXP 115
31410: PUSH
31411: LD_VAR 0 6
31415: ARRAY
31416: PUSH
31417: LD_VAR 0 5
31421: ARRAY
31422: PUSH
31423: LD_INT 1
31425: ARRAY
31426: PPUSH
31427: LD_EXP 115
31431: PUSH
31432: LD_VAR 0 6
31436: ARRAY
31437: PUSH
31438: LD_VAR 0 5
31442: ARRAY
31443: PUSH
31444: LD_INT 2
31446: ARRAY
31447: PPUSH
31448: LD_VAR 0 1
31452: PPUSH
31453: CALL_OW 255
31457: PPUSH
31458: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31462: LD_ADDR_EXP 115
31466: PUSH
31467: LD_EXP 115
31471: PPUSH
31472: LD_VAR 0 6
31476: PPUSH
31477: LD_EXP 115
31481: PUSH
31482: LD_VAR 0 6
31486: ARRAY
31487: PPUSH
31488: LD_VAR 0 5
31492: PPUSH
31493: CALL_OW 3
31497: PPUSH
31498: CALL_OW 1
31502: ST_TO_ADDR
// end ; end ;
31503: GO 31341
31505: POP
31506: POP
// end ;
31507: LD_VAR 0 4
31511: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31512: LD_INT 0
31514: PPUSH
31515: PPUSH
31516: PPUSH
31517: PPUSH
31518: PPUSH
31519: PPUSH
31520: PPUSH
31521: PPUSH
31522: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31523: LD_VAR 0 1
31527: PPUSH
31528: CALL_OW 264
31532: PUSH
31533: LD_INT 81
31535: EQUAL
31536: NOT
31537: IFTRUE 31552
31539: PUSH
31540: LD_VAR 0 1
31544: PUSH
31545: LD_EXP 114
31549: IN
31550: NOT
31551: OR
31552: IFFALSE 31556
// exit ;
31554: GO 31882
// index := GetElementIndex ( minersList , unit ) ;
31556: LD_ADDR_VAR 0 6
31560: PUSH
31561: LD_EXP 114
31565: PPUSH
31566: LD_VAR 0 1
31570: PPUSH
31571: CALL 38092 0 2
31575: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31576: LD_ADDR_VAR 0 8
31580: PUSH
31581: LD_EXP 116
31585: PUSH
31586: LD_EXP 115
31590: PUSH
31591: LD_VAR 0 6
31595: ARRAY
31596: MINUS
31597: ST_TO_ADDR
// if not minesFreeAmount then
31598: LD_VAR 0 8
31602: NOT
31603: IFFALSE 31607
// exit ;
31605: GO 31882
// tmp := [ ] ;
31607: LD_ADDR_VAR 0 7
31611: PUSH
31612: EMPTY
31613: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31614: LD_ADDR_VAR 0 5
31618: PUSH
31619: DOUBLE
31620: LD_INT 1
31622: DEC
31623: ST_TO_ADDR
31624: LD_VAR 0 8
31628: PUSH
31629: FOR_TO
31630: IFFALSE 31829
// begin _d := rand ( 0 , 5 ) ;
31632: LD_ADDR_VAR 0 11
31636: PUSH
31637: LD_INT 0
31639: PPUSH
31640: LD_INT 5
31642: PPUSH
31643: CALL_OW 12
31647: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31648: LD_ADDR_VAR 0 12
31652: PUSH
31653: LD_INT 2
31655: PPUSH
31656: LD_INT 6
31658: PPUSH
31659: CALL_OW 12
31663: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31664: LD_ADDR_VAR 0 9
31668: PUSH
31669: LD_VAR 0 2
31673: PPUSH
31674: LD_VAR 0 11
31678: PPUSH
31679: LD_VAR 0 12
31683: PPUSH
31684: CALL_OW 272
31688: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31689: LD_ADDR_VAR 0 10
31693: PUSH
31694: LD_VAR 0 3
31698: PPUSH
31699: LD_VAR 0 11
31703: PPUSH
31704: LD_VAR 0 12
31708: PPUSH
31709: CALL_OW 273
31713: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31714: LD_VAR 0 9
31718: PPUSH
31719: LD_VAR 0 10
31723: PPUSH
31724: CALL_OW 488
31728: IFFALSE 31752
31730: PUSH
31731: LD_VAR 0 9
31735: PUSH
31736: LD_VAR 0 10
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_VAR 0 7
31749: IN
31750: NOT
31751: AND
31752: IFFALSE 31771
31754: PUSH
31755: LD_VAR 0 9
31759: PPUSH
31760: LD_VAR 0 10
31764: PPUSH
31765: CALL_OW 458
31769: NOT
31770: AND
31771: IFFALSE 31813
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31773: LD_ADDR_VAR 0 7
31777: PUSH
31778: LD_VAR 0 7
31782: PPUSH
31783: LD_VAR 0 7
31787: PUSH
31788: LD_INT 1
31790: PLUS
31791: PPUSH
31792: LD_VAR 0 9
31796: PUSH
31797: LD_VAR 0 10
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PPUSH
31806: CALL_OW 1
31810: ST_TO_ADDR
31811: GO 31827
// i := i - 1 ;
31813: LD_ADDR_VAR 0 5
31817: PUSH
31818: LD_VAR 0 5
31822: PUSH
31823: LD_INT 1
31825: MINUS
31826: ST_TO_ADDR
// end ;
31827: GO 31629
31829: POP
31830: POP
// for i in tmp do
31831: LD_ADDR_VAR 0 5
31835: PUSH
31836: LD_VAR 0 7
31840: PUSH
31841: FOR_IN
31842: IFFALSE 31880
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31844: LD_VAR 0 1
31848: PPUSH
31849: LD_VAR 0 5
31853: PUSH
31854: LD_INT 1
31856: ARRAY
31857: PPUSH
31858: LD_VAR 0 5
31862: PUSH
31863: LD_INT 2
31865: ARRAY
31866: PPUSH
31867: CALL 30873 0 3
31871: NOT
31872: IFFALSE 31878
// exit ;
31874: POP
31875: POP
31876: GO 31882
31878: GO 31841
31880: POP
31881: POP
// end ;
31882: LD_VAR 0 4
31886: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
31887: LD_INT 0
31889: PPUSH
31890: PPUSH
31891: PPUSH
31892: PPUSH
31893: PPUSH
31894: PPUSH
31895: PPUSH
31896: PPUSH
31897: PPUSH
// if GetClass ( unit ) <> class_sniper then
31898: LD_VAR 0 1
31902: PPUSH
31903: CALL_OW 257
31907: PUSH
31908: LD_INT 5
31910: NONEQUAL
31911: IFFALSE 31915
// exit ;
31913: GO 32385
// dist := 8 ;
31915: LD_ADDR_VAR 0 5
31919: PUSH
31920: LD_INT 8
31922: ST_TO_ADDR
// viewRange := 12 ;
31923: LD_ADDR_VAR 0 8
31927: PUSH
31928: LD_INT 12
31930: ST_TO_ADDR
// side := GetSide ( unit ) ;
31931: LD_ADDR_VAR 0 6
31935: PUSH
31936: LD_VAR 0 1
31940: PPUSH
31941: CALL_OW 255
31945: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31946: LD_INT 61
31948: PPUSH
31949: LD_VAR 0 6
31953: PPUSH
31954: CALL_OW 321
31958: PUSH
31959: LD_INT 2
31961: EQUAL
31962: IFFALSE 31972
// viewRange := 16 ;
31964: LD_ADDR_VAR 0 8
31968: PUSH
31969: LD_INT 16
31971: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31972: LD_VAR 0 1
31976: PPUSH
31977: LD_VAR 0 2
31981: PPUSH
31982: LD_VAR 0 3
31986: PPUSH
31987: CALL_OW 297
31991: PUSH
31992: LD_VAR 0 5
31996: GREATER
31997: IFFALSE 32076
// begin ComMoveXY ( unit , x , y ) ;
31999: LD_VAR 0 1
32003: PPUSH
32004: LD_VAR 0 2
32008: PPUSH
32009: LD_VAR 0 3
32013: PPUSH
32014: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32018: LD_INT 35
32020: PPUSH
32021: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32025: LD_VAR 0 1
32029: PPUSH
32030: LD_VAR 0 2
32034: PPUSH
32035: LD_VAR 0 3
32039: PPUSH
32040: CALL 70138 0 3
32044: NOT
32045: IFFALSE 32049
// exit ;
32047: GO 32385
// until GetDistUnitXY ( unit , x , y ) < dist ;
32049: LD_VAR 0 1
32053: PPUSH
32054: LD_VAR 0 2
32058: PPUSH
32059: LD_VAR 0 3
32063: PPUSH
32064: CALL_OW 297
32068: PUSH
32069: LD_VAR 0 5
32073: LESS
32074: IFFALSE 32018
// end ; ComTurnXY ( unit , x , y ) ;
32076: LD_VAR 0 1
32080: PPUSH
32081: LD_VAR 0 2
32085: PPUSH
32086: LD_VAR 0 3
32090: PPUSH
32091: CALL_OW 118
// repeat if Multiplayer then
32095: LD_OWVAR 4
32099: IFFALSE 32110
// wait ( 35 ) else
32101: LD_INT 35
32103: PPUSH
32104: CALL_OW 67
32108: GO 32117
// wait ( 5 ) ;
32110: LD_INT 5
32112: PPUSH
32113: CALL_OW 67
// _d := GetDir ( unit ) ;
32117: LD_ADDR_VAR 0 11
32121: PUSH
32122: LD_VAR 0 1
32126: PPUSH
32127: CALL_OW 254
32131: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32132: LD_ADDR_VAR 0 7
32136: PUSH
32137: LD_VAR 0 1
32141: PPUSH
32142: CALL_OW 250
32146: PPUSH
32147: LD_VAR 0 1
32151: PPUSH
32152: CALL_OW 251
32156: PPUSH
32157: LD_VAR 0 2
32161: PPUSH
32162: LD_VAR 0 3
32166: PPUSH
32167: CALL 72774 0 4
32171: ST_TO_ADDR
// until dir = _d ;
32172: LD_VAR 0 7
32176: PUSH
32177: LD_VAR 0 11
32181: EQUAL
32182: IFFALSE 32095
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32184: LD_ADDR_VAR 0 9
32188: PUSH
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 250
32198: PPUSH
32199: LD_VAR 0 7
32203: PPUSH
32204: LD_VAR 0 5
32208: PPUSH
32209: CALL_OW 272
32213: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32214: LD_ADDR_VAR 0 10
32218: PUSH
32219: LD_VAR 0 1
32223: PPUSH
32224: CALL_OW 251
32228: PPUSH
32229: LD_VAR 0 7
32233: PPUSH
32234: LD_VAR 0 5
32238: PPUSH
32239: CALL_OW 273
32243: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32244: LD_VAR 0 9
32248: PPUSH
32249: LD_VAR 0 10
32253: PPUSH
32254: CALL_OW 488
32258: NOT
32259: IFFALSE 32263
// exit ;
32261: GO 32385
// ComAnimCustom ( unit , 1 ) ;
32263: LD_VAR 0 1
32267: PPUSH
32268: LD_INT 1
32270: PPUSH
32271: CALL_OW 592
// p := 0 ;
32275: LD_ADDR_VAR 0 12
32279: PUSH
32280: LD_INT 0
32282: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32283: LD_VAR 0 9
32287: PPUSH
32288: LD_VAR 0 10
32292: PPUSH
32293: LD_VAR 0 6
32297: PPUSH
32298: LD_VAR 0 8
32302: PPUSH
32303: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32307: LD_INT 35
32309: PPUSH
32310: CALL_OW 67
// p := Inc ( p ) ;
32314: LD_ADDR_VAR 0 12
32318: PUSH
32319: LD_VAR 0 12
32323: PPUSH
32324: CALL 72730 0 1
32328: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32329: LD_VAR 0 12
32333: PUSH
32334: LD_INT 3
32336: EQUAL
32337: IFTRUE 32351
32339: PUSH
32340: LD_VAR 0 1
32344: PPUSH
32345: CALL_OW 302
32349: NOT
32350: OR
32351: IFTRUE 32364
32353: PUSH
32354: LD_VAR 0 1
32358: PPUSH
32359: CALL_OW 301
32363: OR
32364: IFFALSE 32307
// RemoveSeeing ( _x , _y , side ) ;
32366: LD_VAR 0 9
32370: PPUSH
32371: LD_VAR 0 10
32375: PPUSH
32376: LD_VAR 0 6
32380: PPUSH
32381: CALL_OW 331
// end ;
32385: LD_VAR 0 4
32389: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
32390: LD_INT 0
32392: PPUSH
32393: PPUSH
32394: PPUSH
32395: PPUSH
32396: PPUSH
32397: PPUSH
32398: PPUSH
32399: PPUSH
32400: PPUSH
32401: PPUSH
32402: PPUSH
// if not unit then
32403: LD_VAR 0 1
32407: NOT
32408: IFFALSE 32412
// exit ;
32410: GO 32683
// side := GetSide ( unit ) ;
32412: LD_ADDR_VAR 0 3
32416: PUSH
32417: LD_VAR 0 1
32421: PPUSH
32422: CALL_OW 255
32426: ST_TO_ADDR
// x := GetX ( unit ) ;
32427: LD_ADDR_VAR 0 5
32431: PUSH
32432: LD_VAR 0 1
32436: PPUSH
32437: CALL_OW 250
32441: ST_TO_ADDR
// y := GetY ( unit ) ;
32442: LD_ADDR_VAR 0 6
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: CALL_OW 251
32456: ST_TO_ADDR
// r := 8 ;
32457: LD_ADDR_VAR 0 4
32461: PUSH
32462: LD_INT 8
32464: ST_TO_ADDR
// if x - r < 0 then
32465: LD_VAR 0 5
32469: PUSH
32470: LD_VAR 0 4
32474: MINUS
32475: PUSH
32476: LD_INT 0
32478: LESS
32479: IFFALSE 32491
// min_x := 0 else
32481: LD_ADDR_VAR 0 7
32485: PUSH
32486: LD_INT 0
32488: ST_TO_ADDR
32489: GO 32507
// min_x := x - r ;
32491: LD_ADDR_VAR 0 7
32495: PUSH
32496: LD_VAR 0 5
32500: PUSH
32501: LD_VAR 0 4
32505: MINUS
32506: ST_TO_ADDR
// if y - r < 0 then
32507: LD_VAR 0 6
32511: PUSH
32512: LD_VAR 0 4
32516: MINUS
32517: PUSH
32518: LD_INT 0
32520: LESS
32521: IFFALSE 32533
// min_y := 0 else
32523: LD_ADDR_VAR 0 8
32527: PUSH
32528: LD_INT 0
32530: ST_TO_ADDR
32531: GO 32549
// min_y := y - r ;
32533: LD_ADDR_VAR 0 8
32537: PUSH
32538: LD_VAR 0 6
32542: PUSH
32543: LD_VAR 0 4
32547: MINUS
32548: ST_TO_ADDR
// max_x := x + r ;
32549: LD_ADDR_VAR 0 9
32553: PUSH
32554: LD_VAR 0 5
32558: PUSH
32559: LD_VAR 0 4
32563: PLUS
32564: ST_TO_ADDR
// max_y := y + r ;
32565: LD_ADDR_VAR 0 10
32569: PUSH
32570: LD_VAR 0 6
32574: PUSH
32575: LD_VAR 0 4
32579: PLUS
32580: ST_TO_ADDR
// for _x = min_x to max_x do
32581: LD_ADDR_VAR 0 11
32585: PUSH
32586: DOUBLE
32587: LD_VAR 0 7
32591: DEC
32592: ST_TO_ADDR
32593: LD_VAR 0 9
32597: PUSH
32598: FOR_TO
32599: IFFALSE 32681
// for _y = min_y to max_y do
32601: LD_ADDR_VAR 0 12
32605: PUSH
32606: DOUBLE
32607: LD_VAR 0 8
32611: DEC
32612: ST_TO_ADDR
32613: LD_VAR 0 10
32617: PUSH
32618: FOR_TO
32619: IFFALSE 32677
// begin if not ValidHex ( _x , _y ) then
32621: LD_VAR 0 11
32625: PPUSH
32626: LD_VAR 0 12
32630: PPUSH
32631: CALL_OW 488
32635: NOT
32636: IFFALSE 32640
// continue ;
32638: GO 32618
// if MineAtPos ( _x , _y ) then
32640: LD_VAR 0 11
32644: PPUSH
32645: LD_VAR 0 12
32649: PPUSH
32650: CALL_OW 458
32654: IFFALSE 32675
// ViewMineAtPos ( _x , _y , side ) ;
32656: LD_VAR 0 11
32660: PPUSH
32661: LD_VAR 0 12
32665: PPUSH
32666: LD_VAR 0 3
32670: PPUSH
32671: CALL_OW 457
// end ;
32675: GO 32618
32677: POP
32678: POP
32679: GO 32598
32681: POP
32682: POP
// end ;
32683: LD_VAR 0 2
32687: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
32688: LD_INT 0
32690: PPUSH
32691: PPUSH
32692: PPUSH
32693: PPUSH
32694: PPUSH
32695: PPUSH
// if not units then
32696: LD_VAR 0 1
32700: NOT
32701: IFFALSE 32705
// exit ;
32703: GO 33135
// scaners := [ ] ;
32705: LD_ADDR_VAR 0 6
32709: PUSH
32710: EMPTY
32711: ST_TO_ADDR
// for i in units do
32712: LD_ADDR_VAR 0 3
32716: PUSH
32717: LD_VAR 0 1
32721: PUSH
32722: FOR_IN
32723: IFFALSE 32880
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
32725: LD_VAR 0 3
32729: PPUSH
32730: CALL_OW 264
32734: PUSH
32735: LD_INT 11
32737: NONEQUAL
32738: IFTRUE 32752
32740: PUSH
32741: LD_VAR 0 3
32745: PPUSH
32746: CALL_OW 302
32750: NOT
32751: OR
32752: IFTRUE 32769
32754: PUSH
32755: LD_VAR 0 3
32759: PPUSH
32760: CALL_OW 110
32764: PUSH
32765: LD_INT 502
32767: EQUAL
32768: OR
32769: IFFALSE 32773
// continue ;
32771: GO 32722
// ComStop ( i ) ;
32773: LD_VAR 0 3
32777: PPUSH
32778: CALL_OW 141
// x := GetX ( i ) ;
32782: LD_ADDR_VAR 0 4
32786: PUSH
32787: LD_VAR 0 3
32791: PPUSH
32792: CALL_OW 250
32796: ST_TO_ADDR
// y := GetY ( i ) ;
32797: LD_ADDR_VAR 0 5
32801: PUSH
32802: LD_VAR 0 3
32806: PPUSH
32807: CALL_OW 251
32811: ST_TO_ADDR
// if GetSide ( i ) = your_side then
32812: LD_VAR 0 3
32816: PPUSH
32817: CALL_OW 255
32821: PUSH
32822: LD_OWVAR 2
32826: EQUAL
32827: IFFALSE 32846
// PlaySoundXY ( x , y , mineDetector ) ;
32829: LD_VAR 0 4
32833: PPUSH
32834: LD_VAR 0 5
32838: PPUSH
32839: LD_STRING mineDetector
32841: PPUSH
32842: CALL_OW 366
// scaners := Join ( scaners , i ) ;
32846: LD_ADDR_VAR 0 6
32850: PUSH
32851: LD_VAR 0 6
32855: PPUSH
32856: LD_VAR 0 3
32860: PPUSH
32861: CALL 71357 0 2
32865: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
32866: LD_VAR 0 3
32870: PPUSH
32871: LD_INT 502
32873: PPUSH
32874: CALL_OW 109
// end ;
32878: GO 32722
32880: POP
32881: POP
// if not scaners then
32882: LD_VAR 0 6
32886: NOT
32887: IFFALSE 32891
// exit ;
32889: GO 33135
// wait ( 3 ) ;
32891: LD_INT 3
32893: PPUSH
32894: CALL_OW 67
// timer := 6 ;
32898: LD_ADDR_VAR 0 7
32902: PUSH
32903: LD_INT 6
32905: ST_TO_ADDR
// repeat for i in scaners do
32906: LD_ADDR_VAR 0 3
32910: PUSH
32911: LD_VAR 0 6
32915: PUSH
32916: FOR_IN
32917: IFFALSE 33033
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
32919: LD_VAR 0 3
32923: PPUSH
32924: CALL_OW 302
32928: NOT
32929: IFTRUE 32942
32931: PUSH
32932: LD_VAR 0 3
32936: PPUSH
32937: CALL_OW 314
32941: OR
32942: IFTRUE 32973
32944: PUSH
32945: LD_VAR 0 3
32949: PPUSH
32950: CALL_OW 263
32954: PUSH
32955: LD_INT 1
32957: EQUAL
32958: IFFALSE 32972
32960: PUSH
32961: LD_VAR 0 3
32965: PPUSH
32966: CALL_OW 311
32970: NOT
32971: AND
32972: OR
32973: IFFALSE 33017
// begin SetUnitDisplayNumber ( i , 0 ) ;
32975: LD_VAR 0 3
32979: PPUSH
32980: LD_INT 0
32982: PPUSH
32983: CALL_OW 505
// SetTag ( i , 0 ) ;
32987: LD_VAR 0 3
32991: PPUSH
32992: LD_INT 0
32994: PPUSH
32995: CALL_OW 109
// scaners := scaners diff i ;
32999: LD_ADDR_VAR 0 6
33003: PUSH
33004: LD_VAR 0 6
33008: PUSH
33009: LD_VAR 0 3
33013: DIFF
33014: ST_TO_ADDR
// continue ;
33015: GO 32916
// end ; SetUnitDisplayNumber ( i , timer ) ;
33017: LD_VAR 0 3
33021: PPUSH
33022: LD_VAR 0 7
33026: PPUSH
33027: CALL_OW 505
// end ;
33031: GO 32916
33033: POP
33034: POP
// if not scaners then
33035: LD_VAR 0 6
33039: NOT
33040: IFFALSE 33044
// exit ;
33042: GO 33135
// timer := Dec ( timer ) ;
33044: LD_ADDR_VAR 0 7
33048: PUSH
33049: LD_VAR 0 7
33053: PPUSH
33054: CALL 72752 0 1
33058: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33059: LD_INT 35
33061: PPUSH
33062: CALL_OW 67
// until timer = 0 ;
33066: LD_VAR 0 7
33070: PUSH
33071: LD_INT 0
33073: EQUAL
33074: IFFALSE 32906
// if not scaners then
33076: LD_VAR 0 6
33080: NOT
33081: IFFALSE 33085
// exit ;
33083: GO 33135
// for i in scaners do
33085: LD_ADDR_VAR 0 3
33089: PUSH
33090: LD_VAR 0 6
33094: PUSH
33095: FOR_IN
33096: IFFALSE 33133
// begin SetUnitDisplayNumber ( i , 0 ) ;
33098: LD_VAR 0 3
33102: PPUSH
33103: LD_INT 0
33105: PPUSH
33106: CALL_OW 505
// SetTag ( i , 0 ) ;
33110: LD_VAR 0 3
33114: PPUSH
33115: LD_INT 0
33117: PPUSH
33118: CALL_OW 109
// RevealDetectorMine ( i ) ;
33122: LD_VAR 0 3
33126: PPUSH
33127: CALL 32390 0 1
// end ;
33131: GO 33095
33133: POP
33134: POP
// end ;
33135: LD_VAR 0 2
33139: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33140: LD_INT 0
33142: PPUSH
// if p1 = mine_detector_mode then
33143: LD_VAR 0 2
33147: PUSH
33148: LD_INT 103
33150: EQUAL
33151: IFFALSE 33162
// DetectMine ( units ) ;
33153: LD_VAR 0 1
33157: PPUSH
33158: CALL 32688 0 1
// end ; end_of_file
33162: LD_VAR 0 7
33166: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33167: LD_INT 0
33169: PPUSH
33170: PPUSH
// if exist_mode then
33171: LD_VAR 0 2
33175: IFFALSE 33221
// begin unit := CreateCharacter ( prefix & ident ) ;
33177: LD_ADDR_VAR 0 5
33181: PUSH
33182: LD_VAR 0 3
33186: PUSH
33187: LD_VAR 0 1
33191: STR
33192: PPUSH
33193: CALL_OW 34
33197: ST_TO_ADDR
// if unit then
33198: LD_VAR 0 5
33202: IFFALSE 33219
// DeleteCharacters ( prefix & ident ) ;
33204: LD_VAR 0 3
33208: PUSH
33209: LD_VAR 0 1
33213: STR
33214: PPUSH
33215: CALL_OW 40
// end else
33219: GO 33236
// unit := NewCharacter ( ident ) ;
33221: LD_ADDR_VAR 0 5
33225: PUSH
33226: LD_VAR 0 1
33230: PPUSH
33231: CALL_OW 25
33235: ST_TO_ADDR
// result := unit ;
33236: LD_ADDR_VAR 0 4
33240: PUSH
33241: LD_VAR 0 5
33245: ST_TO_ADDR
// end ;
33246: LD_VAR 0 4
33250: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33251: LD_INT 0
33253: PPUSH
33254: PPUSH
// if exist_mode then
33255: LD_VAR 0 2
33259: IFFALSE 33284
// unit := CreateCharacter ( prefix & ident ) else
33261: LD_ADDR_VAR 0 5
33265: PUSH
33266: LD_VAR 0 3
33270: PUSH
33271: LD_VAR 0 1
33275: STR
33276: PPUSH
33277: CALL_OW 34
33281: ST_TO_ADDR
33282: GO 33299
// unit := NewCharacter ( ident ) ;
33284: LD_ADDR_VAR 0 5
33288: PUSH
33289: LD_VAR 0 1
33293: PPUSH
33294: CALL_OW 25
33298: ST_TO_ADDR
// result := unit ;
33299: LD_ADDR_VAR 0 4
33303: PUSH
33304: LD_VAR 0 5
33308: ST_TO_ADDR
// end ;
33309: LD_VAR 0 4
33313: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33314: LD_INT 0
33316: PPUSH
33317: PPUSH
// if not side or not nation then
33318: LD_VAR 0 1
33322: NOT
33323: IFTRUE 33332
33325: PUSH
33326: LD_VAR 0 2
33330: NOT
33331: OR
33332: IFFALSE 33336
// exit ;
33334: GO 34130
// case nation of nation_american :
33336: LD_VAR 0 2
33340: PUSH
33341: LD_INT 1
33343: DOUBLE
33344: EQUAL
33345: IFTRUE 33349
33347: GO 33571
33349: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33350: LD_ADDR_VAR 0 4
33354: PUSH
33355: LD_INT 35
33357: PUSH
33358: LD_INT 45
33360: PUSH
33361: LD_INT 46
33363: PUSH
33364: LD_INT 47
33366: PUSH
33367: LD_INT 82
33369: PUSH
33370: LD_INT 83
33372: PUSH
33373: LD_INT 84
33375: PUSH
33376: LD_INT 85
33378: PUSH
33379: LD_INT 86
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: LD_INT 2
33387: PUSH
33388: LD_INT 6
33390: PUSH
33391: LD_INT 15
33393: PUSH
33394: LD_INT 16
33396: PUSH
33397: LD_INT 7
33399: PUSH
33400: LD_INT 12
33402: PUSH
33403: LD_INT 13
33405: PUSH
33406: LD_INT 10
33408: PUSH
33409: LD_INT 14
33411: PUSH
33412: LD_INT 20
33414: PUSH
33415: LD_INT 21
33417: PUSH
33418: LD_INT 22
33420: PUSH
33421: LD_INT 25
33423: PUSH
33424: LD_INT 32
33426: PUSH
33427: LD_INT 27
33429: PUSH
33430: LD_INT 36
33432: PUSH
33433: LD_INT 69
33435: PUSH
33436: LD_INT 39
33438: PUSH
33439: LD_INT 34
33441: PUSH
33442: LD_INT 40
33444: PUSH
33445: LD_INT 48
33447: PUSH
33448: LD_INT 49
33450: PUSH
33451: LD_INT 50
33453: PUSH
33454: LD_INT 51
33456: PUSH
33457: LD_INT 52
33459: PUSH
33460: LD_INT 53
33462: PUSH
33463: LD_INT 54
33465: PUSH
33466: LD_INT 55
33468: PUSH
33469: LD_INT 56
33471: PUSH
33472: LD_INT 57
33474: PUSH
33475: LD_INT 58
33477: PUSH
33478: LD_INT 59
33480: PUSH
33481: LD_INT 60
33483: PUSH
33484: LD_INT 61
33486: PUSH
33487: LD_INT 62
33489: PUSH
33490: LD_INT 80
33492: PUSH
33493: LD_INT 82
33495: PUSH
33496: LD_INT 83
33498: PUSH
33499: LD_INT 84
33501: PUSH
33502: LD_INT 85
33504: PUSH
33505: LD_INT 86
33507: PUSH
33508: LD_INT 90
33510: PUSH
33511: LD_INT 93
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: ST_TO_ADDR
33569: GO 34052
33571: LD_INT 2
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33579
33577: GO 33813
33579: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33580: LD_ADDR_VAR 0 4
33584: PUSH
33585: LD_INT 35
33587: PUSH
33588: LD_INT 45
33590: PUSH
33591: LD_INT 46
33593: PUSH
33594: LD_INT 47
33596: PUSH
33597: LD_INT 82
33599: PUSH
33600: LD_INT 83
33602: PUSH
33603: LD_INT 84
33605: PUSH
33606: LD_INT 85
33608: PUSH
33609: LD_INT 87
33611: PUSH
33612: LD_INT 70
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: LD_INT 11
33620: PUSH
33621: LD_INT 3
33623: PUSH
33624: LD_INT 4
33626: PUSH
33627: LD_INT 5
33629: PUSH
33630: LD_INT 6
33632: PUSH
33633: LD_INT 15
33635: PUSH
33636: LD_INT 18
33638: PUSH
33639: LD_INT 7
33641: PUSH
33642: LD_INT 17
33644: PUSH
33645: LD_INT 8
33647: PUSH
33648: LD_INT 20
33650: PUSH
33651: LD_INT 21
33653: PUSH
33654: LD_INT 22
33656: PUSH
33657: LD_INT 72
33659: PUSH
33660: LD_INT 26
33662: PUSH
33663: LD_INT 69
33665: PUSH
33666: LD_INT 39
33668: PUSH
33669: LD_INT 40
33671: PUSH
33672: LD_INT 41
33674: PUSH
33675: LD_INT 42
33677: PUSH
33678: LD_INT 43
33680: PUSH
33681: LD_INT 48
33683: PUSH
33684: LD_INT 49
33686: PUSH
33687: LD_INT 50
33689: PUSH
33690: LD_INT 51
33692: PUSH
33693: LD_INT 52
33695: PUSH
33696: LD_INT 53
33698: PUSH
33699: LD_INT 54
33701: PUSH
33702: LD_INT 55
33704: PUSH
33705: LD_INT 56
33707: PUSH
33708: LD_INT 60
33710: PUSH
33711: LD_INT 61
33713: PUSH
33714: LD_INT 62
33716: PUSH
33717: LD_INT 66
33719: PUSH
33720: LD_INT 67
33722: PUSH
33723: LD_INT 68
33725: PUSH
33726: LD_INT 81
33728: PUSH
33729: LD_INT 82
33731: PUSH
33732: LD_INT 83
33734: PUSH
33735: LD_INT 84
33737: PUSH
33738: LD_INT 85
33740: PUSH
33741: LD_INT 87
33743: PUSH
33744: LD_INT 88
33746: PUSH
33747: LD_INT 92
33749: PUSH
33750: LD_INT 94
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: ST_TO_ADDR
33811: GO 34052
33813: LD_INT 3
33815: DOUBLE
33816: EQUAL
33817: IFTRUE 33821
33819: GO 34051
33821: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
33822: LD_ADDR_VAR 0 4
33826: PUSH
33827: LD_INT 46
33829: PUSH
33830: LD_INT 47
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: LD_INT 82
33841: PUSH
33842: LD_INT 83
33844: PUSH
33845: LD_INT 84
33847: PUSH
33848: LD_INT 85
33850: PUSH
33851: LD_INT 86
33853: PUSH
33854: LD_INT 11
33856: PUSH
33857: LD_INT 9
33859: PUSH
33860: LD_INT 20
33862: PUSH
33863: LD_INT 19
33865: PUSH
33866: LD_INT 21
33868: PUSH
33869: LD_INT 24
33871: PUSH
33872: LD_INT 22
33874: PUSH
33875: LD_INT 25
33877: PUSH
33878: LD_INT 28
33880: PUSH
33881: LD_INT 29
33883: PUSH
33884: LD_INT 30
33886: PUSH
33887: LD_INT 31
33889: PUSH
33890: LD_INT 37
33892: PUSH
33893: LD_INT 38
33895: PUSH
33896: LD_INT 32
33898: PUSH
33899: LD_INT 27
33901: PUSH
33902: LD_INT 33
33904: PUSH
33905: LD_INT 69
33907: PUSH
33908: LD_INT 39
33910: PUSH
33911: LD_INT 34
33913: PUSH
33914: LD_INT 40
33916: PUSH
33917: LD_INT 71
33919: PUSH
33920: LD_INT 23
33922: PUSH
33923: LD_INT 44
33925: PUSH
33926: LD_INT 48
33928: PUSH
33929: LD_INT 49
33931: PUSH
33932: LD_INT 50
33934: PUSH
33935: LD_INT 51
33937: PUSH
33938: LD_INT 52
33940: PUSH
33941: LD_INT 53
33943: PUSH
33944: LD_INT 54
33946: PUSH
33947: LD_INT 55
33949: PUSH
33950: LD_INT 56
33952: PUSH
33953: LD_INT 57
33955: PUSH
33956: LD_INT 58
33958: PUSH
33959: LD_INT 59
33961: PUSH
33962: LD_INT 63
33964: PUSH
33965: LD_INT 64
33967: PUSH
33968: LD_INT 65
33970: PUSH
33971: LD_INT 82
33973: PUSH
33974: LD_INT 83
33976: PUSH
33977: LD_INT 84
33979: PUSH
33980: LD_INT 85
33982: PUSH
33983: LD_INT 86
33985: PUSH
33986: LD_INT 89
33988: PUSH
33989: LD_INT 91
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
34049: GO 34052
34051: POP
// if state > - 1 and state < 3 then
34052: LD_VAR 0 3
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: GREATER
34061: IFFALSE 34073
34063: PUSH
34064: LD_VAR 0 3
34068: PUSH
34069: LD_INT 3
34071: LESS
34072: AND
34073: IFFALSE 34130
// for i in result do
34075: LD_ADDR_VAR 0 5
34079: PUSH
34080: LD_VAR 0 4
34084: PUSH
34085: FOR_IN
34086: IFFALSE 34128
// if GetTech ( i , side ) <> state then
34088: LD_VAR 0 5
34092: PPUSH
34093: LD_VAR 0 1
34097: PPUSH
34098: CALL_OW 321
34102: PUSH
34103: LD_VAR 0 3
34107: NONEQUAL
34108: IFFALSE 34126
// result := result diff i ;
34110: LD_ADDR_VAR 0 4
34114: PUSH
34115: LD_VAR 0 4
34119: PUSH
34120: LD_VAR 0 5
34124: DIFF
34125: ST_TO_ADDR
34126: GO 34085
34128: POP
34129: POP
// end ;
34130: LD_VAR 0 4
34134: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34135: LD_INT 0
34137: PPUSH
34138: PPUSH
34139: PPUSH
// result := true ;
34140: LD_ADDR_VAR 0 3
34144: PUSH
34145: LD_INT 1
34147: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34148: LD_ADDR_VAR 0 5
34152: PUSH
34153: LD_VAR 0 2
34157: PPUSH
34158: CALL_OW 480
34162: ST_TO_ADDR
// if not tmp then
34163: LD_VAR 0 5
34167: NOT
34168: IFFALSE 34172
// exit ;
34170: GO 34221
// for i in tmp do
34172: LD_ADDR_VAR 0 4
34176: PUSH
34177: LD_VAR 0 5
34181: PUSH
34182: FOR_IN
34183: IFFALSE 34219
// if GetTech ( i , side ) <> state_researched then
34185: LD_VAR 0 4
34189: PPUSH
34190: LD_VAR 0 1
34194: PPUSH
34195: CALL_OW 321
34199: PUSH
34200: LD_INT 2
34202: NONEQUAL
34203: IFFALSE 34217
// begin result := false ;
34205: LD_ADDR_VAR 0 3
34209: PUSH
34210: LD_INT 0
34212: ST_TO_ADDR
// exit ;
34213: POP
34214: POP
34215: GO 34221
// end ;
34217: GO 34182
34219: POP
34220: POP
// end ;
34221: LD_VAR 0 3
34225: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34226: LD_INT 0
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
34239: PPUSH
34240: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34241: LD_VAR 0 1
34245: NOT
34246: IFTRUE 34263
34248: PUSH
34249: LD_VAR 0 1
34253: PPUSH
34254: CALL_OW 257
34258: PUSH
34259: LD_INT 9
34261: NONEQUAL
34262: OR
34263: IFFALSE 34267
// exit ;
34265: GO 34846
// side := GetSide ( unit ) ;
34267: LD_ADDR_VAR 0 9
34271: PUSH
34272: LD_VAR 0 1
34276: PPUSH
34277: CALL_OW 255
34281: ST_TO_ADDR
// tech_space := tech_spacanom ;
34282: LD_ADDR_VAR 0 12
34286: PUSH
34287: LD_INT 29
34289: ST_TO_ADDR
// tech_time := tech_taurad ;
34290: LD_ADDR_VAR 0 13
34294: PUSH
34295: LD_INT 28
34297: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34298: LD_ADDR_VAR 0 11
34302: PUSH
34303: LD_VAR 0 1
34307: PPUSH
34308: CALL_OW 310
34312: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34313: LD_VAR 0 11
34317: PPUSH
34318: CALL_OW 247
34322: PUSH
34323: LD_INT 2
34325: EQUAL
34326: IFFALSE 34330
// exit ;
34328: GO 34846
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34330: LD_ADDR_VAR 0 8
34334: PUSH
34335: LD_INT 81
34337: PUSH
34338: LD_VAR 0 9
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 3
34349: PUSH
34350: LD_INT 21
34352: PUSH
34353: LD_INT 3
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PPUSH
34368: CALL_OW 69
34372: ST_TO_ADDR
// if not tmp then
34373: LD_VAR 0 8
34377: NOT
34378: IFFALSE 34382
// exit ;
34380: GO 34846
// if in_unit then
34382: LD_VAR 0 11
34386: IFFALSE 34410
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34388: LD_ADDR_VAR 0 10
34392: PUSH
34393: LD_VAR 0 8
34397: PPUSH
34398: LD_VAR 0 11
34402: PPUSH
34403: CALL_OW 74
34407: ST_TO_ADDR
34408: GO 34430
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34410: LD_ADDR_VAR 0 10
34414: PUSH
34415: LD_VAR 0 8
34419: PPUSH
34420: LD_VAR 0 1
34424: PPUSH
34425: CALL_OW 74
34429: ST_TO_ADDR
// if not enemy then
34430: LD_VAR 0 10
34434: NOT
34435: IFFALSE 34439
// exit ;
34437: GO 34846
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34439: LD_VAR 0 11
34443: IFFALSE 34465
34445: PUSH
34446: LD_VAR 0 11
34450: PPUSH
34451: LD_VAR 0 10
34455: PPUSH
34456: CALL_OW 296
34460: PUSH
34461: LD_INT 13
34463: GREATER
34464: AND
34465: IFTRUE 34487
34467: PUSH
34468: LD_VAR 0 1
34472: PPUSH
34473: LD_VAR 0 10
34477: PPUSH
34478: CALL_OW 296
34482: PUSH
34483: LD_INT 12
34485: GREATER
34486: OR
34487: IFFALSE 34491
// exit ;
34489: GO 34846
// missile := [ 1 ] ;
34491: LD_ADDR_VAR 0 14
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: EMPTY
34500: LIST
34501: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34502: LD_VAR 0 9
34506: PPUSH
34507: LD_VAR 0 12
34511: PPUSH
34512: CALL_OW 325
34516: IFFALSE 34545
// missile := Replace ( missile , missile + 1 , 2 ) ;
34518: LD_ADDR_VAR 0 14
34522: PUSH
34523: LD_VAR 0 14
34527: PPUSH
34528: LD_VAR 0 14
34532: PUSH
34533: LD_INT 1
34535: PLUS
34536: PPUSH
34537: LD_INT 2
34539: PPUSH
34540: CALL_OW 1
34544: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34545: LD_VAR 0 9
34549: PPUSH
34550: LD_VAR 0 13
34554: PPUSH
34555: CALL_OW 325
34559: IFFALSE 34583
34561: PUSH
34562: LD_VAR 0 10
34566: PPUSH
34567: CALL_OW 255
34571: PPUSH
34572: LD_VAR 0 13
34576: PPUSH
34577: CALL_OW 325
34581: NOT
34582: AND
34583: IFFALSE 34612
// missile := Replace ( missile , missile + 1 , 3 ) ;
34585: LD_ADDR_VAR 0 14
34589: PUSH
34590: LD_VAR 0 14
34594: PPUSH
34595: LD_VAR 0 14
34599: PUSH
34600: LD_INT 1
34602: PLUS
34603: PPUSH
34604: LD_INT 3
34606: PPUSH
34607: CALL_OW 1
34611: ST_TO_ADDR
// if missile < 2 then
34612: LD_VAR 0 14
34616: PUSH
34617: LD_INT 2
34619: LESS
34620: IFFALSE 34624
// exit ;
34622: GO 34846
// x := GetX ( enemy ) ;
34624: LD_ADDR_VAR 0 4
34628: PUSH
34629: LD_VAR 0 10
34633: PPUSH
34634: CALL_OW 250
34638: ST_TO_ADDR
// y := GetY ( enemy ) ;
34639: LD_ADDR_VAR 0 5
34643: PUSH
34644: LD_VAR 0 10
34648: PPUSH
34649: CALL_OW 251
34653: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34654: LD_ADDR_VAR 0 6
34658: PUSH
34659: LD_VAR 0 4
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PPUSH
34668: LD_INT 1
34670: PPUSH
34671: CALL_OW 12
34675: PLUS
34676: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34677: LD_ADDR_VAR 0 7
34681: PUSH
34682: LD_VAR 0 5
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PPUSH
34691: LD_INT 1
34693: PPUSH
34694: CALL_OW 12
34698: PLUS
34699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34700: LD_VAR 0 6
34704: PPUSH
34705: LD_VAR 0 7
34709: PPUSH
34710: CALL_OW 488
34714: NOT
34715: IFFALSE 34737
// begin _x := x ;
34717: LD_ADDR_VAR 0 6
34721: PUSH
34722: LD_VAR 0 4
34726: ST_TO_ADDR
// _y := y ;
34727: LD_ADDR_VAR 0 7
34731: PUSH
34732: LD_VAR 0 5
34736: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34737: LD_ADDR_VAR 0 3
34741: PUSH
34742: LD_INT 1
34744: PPUSH
34745: LD_VAR 0 14
34749: PPUSH
34750: CALL_OW 12
34754: ST_TO_ADDR
// case i of 1 :
34755: LD_VAR 0 3
34759: PUSH
34760: LD_INT 1
34762: DOUBLE
34763: EQUAL
34764: IFTRUE 34768
34766: GO 34785
34768: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34769: LD_VAR 0 1
34773: PPUSH
34774: LD_VAR 0 10
34778: PPUSH
34779: CALL_OW 115
34783: GO 34846
34785: LD_INT 2
34787: DOUBLE
34788: EQUAL
34789: IFTRUE 34793
34791: GO 34815
34793: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34794: LD_VAR 0 1
34798: PPUSH
34799: LD_VAR 0 6
34803: PPUSH
34804: LD_VAR 0 7
34808: PPUSH
34809: CALL_OW 153
34813: GO 34846
34815: LD_INT 3
34817: DOUBLE
34818: EQUAL
34819: IFTRUE 34823
34821: GO 34845
34823: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34824: LD_VAR 0 1
34828: PPUSH
34829: LD_VAR 0 6
34833: PPUSH
34834: LD_VAR 0 7
34838: PPUSH
34839: CALL_OW 154
34843: GO 34846
34845: POP
// end ;
34846: LD_VAR 0 2
34850: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34851: LD_INT 0
34853: PPUSH
34854: PPUSH
34855: PPUSH
34856: PPUSH
34857: PPUSH
34858: PPUSH
// if not unit or not building then
34859: LD_VAR 0 1
34863: NOT
34864: IFTRUE 34873
34866: PUSH
34867: LD_VAR 0 2
34871: NOT
34872: OR
34873: IFFALSE 34877
// exit ;
34875: GO 35035
// x := GetX ( building ) ;
34877: LD_ADDR_VAR 0 5
34881: PUSH
34882: LD_VAR 0 2
34886: PPUSH
34887: CALL_OW 250
34891: ST_TO_ADDR
// y := GetY ( building ) ;
34892: LD_ADDR_VAR 0 6
34896: PUSH
34897: LD_VAR 0 2
34901: PPUSH
34902: CALL_OW 251
34906: ST_TO_ADDR
// for i := 0 to 5 do
34907: LD_ADDR_VAR 0 4
34911: PUSH
34912: DOUBLE
34913: LD_INT 0
34915: DEC
34916: ST_TO_ADDR
34917: LD_INT 5
34919: PUSH
34920: FOR_TO
34921: IFFALSE 35033
// begin _x := ShiftX ( x , i , 3 ) ;
34923: LD_ADDR_VAR 0 7
34927: PUSH
34928: LD_VAR 0 5
34932: PPUSH
34933: LD_VAR 0 4
34937: PPUSH
34938: LD_INT 3
34940: PPUSH
34941: CALL_OW 272
34945: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34946: LD_ADDR_VAR 0 8
34950: PUSH
34951: LD_VAR 0 6
34955: PPUSH
34956: LD_VAR 0 4
34960: PPUSH
34961: LD_INT 3
34963: PPUSH
34964: CALL_OW 273
34968: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34969: LD_VAR 0 7
34973: PPUSH
34974: LD_VAR 0 8
34978: PPUSH
34979: CALL_OW 488
34983: NOT
34984: IFFALSE 34988
// continue ;
34986: GO 34920
// if HexInfo ( _x , _y ) = 0 then
34988: LD_VAR 0 7
34992: PPUSH
34993: LD_VAR 0 8
34997: PPUSH
34998: CALL_OW 428
35002: PUSH
35003: LD_INT 0
35005: EQUAL
35006: IFFALSE 35031
// begin ComMoveXY ( unit , _x , _y ) ;
35008: LD_VAR 0 1
35012: PPUSH
35013: LD_VAR 0 7
35017: PPUSH
35018: LD_VAR 0 8
35022: PPUSH
35023: CALL_OW 111
// exit ;
35027: POP
35028: POP
35029: GO 35035
// end ; end ;
35031: GO 34920
35033: POP
35034: POP
// end ;
35035: LD_VAR 0 3
35039: RET
// export function ScanBase ( side , base_area ) ; begin
35040: LD_INT 0
35042: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35043: LD_ADDR_VAR 0 3
35047: PUSH
35048: LD_VAR 0 2
35052: PPUSH
35053: LD_INT 81
35055: PUSH
35056: LD_VAR 0 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PPUSH
35065: CALL_OW 70
35069: ST_TO_ADDR
// end ;
35070: LD_VAR 0 3
35074: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35075: LD_INT 0
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
// result := false ;
35081: LD_ADDR_VAR 0 2
35085: PUSH
35086: LD_INT 0
35088: ST_TO_ADDR
// side := GetSide ( unit ) ;
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: CALL_OW 255
35103: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35104: LD_ADDR_VAR 0 4
35108: PUSH
35109: LD_VAR 0 1
35113: PPUSH
35114: CALL_OW 248
35118: ST_TO_ADDR
// case nat of 1 :
35119: LD_VAR 0 4
35123: PUSH
35124: LD_INT 1
35126: DOUBLE
35127: EQUAL
35128: IFTRUE 35132
35130: GO 35143
35132: POP
// tech := tech_lassight ; 2 :
35133: LD_ADDR_VAR 0 5
35137: PUSH
35138: LD_INT 12
35140: ST_TO_ADDR
35141: GO 35182
35143: LD_INT 2
35145: DOUBLE
35146: EQUAL
35147: IFTRUE 35151
35149: GO 35162
35151: POP
// tech := tech_mortar ; 3 :
35152: LD_ADDR_VAR 0 5
35156: PUSH
35157: LD_INT 41
35159: ST_TO_ADDR
35160: GO 35182
35162: LD_INT 3
35164: DOUBLE
35165: EQUAL
35166: IFTRUE 35170
35168: GO 35181
35170: POP
// tech := tech_bazooka ; end ;
35171: LD_ADDR_VAR 0 5
35175: PUSH
35176: LD_INT 44
35178: ST_TO_ADDR
35179: GO 35182
35181: POP
// if Researched ( side , tech ) then
35182: LD_VAR 0 3
35186: PPUSH
35187: LD_VAR 0 5
35191: PPUSH
35192: CALL_OW 325
35196: IFFALSE 35223
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35198: LD_ADDR_VAR 0 2
35202: PUSH
35203: LD_INT 5
35205: PUSH
35206: LD_INT 8
35208: PUSH
35209: LD_INT 9
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: LIST
35216: PUSH
35217: LD_VAR 0 4
35221: ARRAY
35222: ST_TO_ADDR
// end ;
35223: LD_VAR 0 2
35227: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35228: LD_INT 0
35230: PPUSH
35231: PPUSH
35232: PPUSH
// if not mines then
35233: LD_VAR 0 2
35237: NOT
35238: IFFALSE 35242
// exit ;
35240: GO 35386
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: LD_INT 81
35249: PUSH
35250: LD_VAR 0 1
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 3
35261: PUSH
35262: LD_INT 21
35264: PUSH
35265: LD_INT 3
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PPUSH
35280: CALL_OW 69
35284: ST_TO_ADDR
// for i in mines do
35285: LD_ADDR_VAR 0 4
35289: PUSH
35290: LD_VAR 0 2
35294: PUSH
35295: FOR_IN
35296: IFFALSE 35384
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35298: LD_VAR 0 4
35302: PUSH
35303: LD_INT 1
35305: ARRAY
35306: PPUSH
35307: LD_VAR 0 4
35311: PUSH
35312: LD_INT 2
35314: ARRAY
35315: PPUSH
35316: CALL_OW 458
35320: NOT
35321: IFFALSE 35325
// continue ;
35323: GO 35295
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35325: LD_VAR 0 4
35329: PUSH
35330: LD_INT 1
35332: ARRAY
35333: PPUSH
35334: LD_VAR 0 4
35338: PUSH
35339: LD_INT 2
35341: ARRAY
35342: PPUSH
35343: CALL_OW 428
35347: PUSH
35348: LD_VAR 0 5
35352: IN
35353: IFFALSE 35382
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35355: LD_VAR 0 4
35359: PUSH
35360: LD_INT 1
35362: ARRAY
35363: PPUSH
35364: LD_VAR 0 4
35368: PUSH
35369: LD_INT 2
35371: ARRAY
35372: PPUSH
35373: LD_VAR 0 1
35377: PPUSH
35378: CALL_OW 456
// end ;
35382: GO 35295
35384: POP
35385: POP
// end ;
35386: LD_VAR 0 3
35390: RET
// export function Count ( array ) ; begin
35391: LD_INT 0
35393: PPUSH
// result := array + 0 ;
35394: LD_ADDR_VAR 0 2
35398: PUSH
35399: LD_VAR 0 1
35403: PUSH
35404: LD_INT 0
35406: PLUS
35407: ST_TO_ADDR
// end ;
35408: LD_VAR 0 2
35412: RET
// export function IsEmpty ( building ) ; begin
35413: LD_INT 0
35415: PPUSH
// if not building then
35416: LD_VAR 0 1
35420: NOT
35421: IFFALSE 35425
// exit ;
35423: GO 35468
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35425: LD_ADDR_VAR 0 2
35429: PUSH
35430: LD_VAR 0 1
35434: PUSH
35435: LD_INT 22
35437: PUSH
35438: LD_VAR 0 1
35442: PPUSH
35443: CALL_OW 255
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 58
35454: PUSH
35455: EMPTY
35456: LIST
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PPUSH
35462: CALL_OW 69
35466: IN
35467: ST_TO_ADDR
// end ;
35468: LD_VAR 0 2
35472: RET
// export function IsNotFull ( building ) ; var places ; begin
35473: LD_INT 0
35475: PPUSH
35476: PPUSH
// if not building then
35477: LD_VAR 0 1
35481: NOT
35482: IFFALSE 35486
// exit ;
35484: GO 35514
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35486: LD_ADDR_VAR 0 2
35490: PUSH
35491: LD_VAR 0 1
35495: PPUSH
35496: LD_INT 3
35498: PUSH
35499: LD_INT 62
35501: PUSH
35502: EMPTY
35503: LIST
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PPUSH
35509: CALL_OW 72
35513: ST_TO_ADDR
// end ;
35514: LD_VAR 0 2
35518: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35519: LD_INT 0
35521: PPUSH
35522: PPUSH
35523: PPUSH
35524: PPUSH
// tmp := [ ] ;
35525: LD_ADDR_VAR 0 3
35529: PUSH
35530: EMPTY
35531: ST_TO_ADDR
// list := [ ] ;
35532: LD_ADDR_VAR 0 5
35536: PUSH
35537: EMPTY
35538: ST_TO_ADDR
// for i = 16 to 25 do
35539: LD_ADDR_VAR 0 4
35543: PUSH
35544: DOUBLE
35545: LD_INT 16
35547: DEC
35548: ST_TO_ADDR
35549: LD_INT 25
35551: PUSH
35552: FOR_TO
35553: IFFALSE 35626
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35555: LD_ADDR_VAR 0 3
35559: PUSH
35560: LD_VAR 0 3
35564: PUSH
35565: LD_INT 22
35567: PUSH
35568: LD_VAR 0 1
35572: PPUSH
35573: CALL_OW 255
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 91
35584: PUSH
35585: LD_VAR 0 1
35589: PUSH
35590: LD_INT 6
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 30
35600: PUSH
35601: LD_VAR 0 4
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: LIST
35614: PUSH
35615: EMPTY
35616: LIST
35617: PPUSH
35618: CALL_OW 69
35622: ADD
35623: ST_TO_ADDR
35624: GO 35552
35626: POP
35627: POP
// for i = 1 to tmp do
35628: LD_ADDR_VAR 0 4
35632: PUSH
35633: DOUBLE
35634: LD_INT 1
35636: DEC
35637: ST_TO_ADDR
35638: LD_VAR 0 3
35642: PUSH
35643: FOR_TO
35644: IFFALSE 35732
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35646: LD_ADDR_VAR 0 5
35650: PUSH
35651: LD_VAR 0 5
35655: PUSH
35656: LD_VAR 0 3
35660: PUSH
35661: LD_VAR 0 4
35665: ARRAY
35666: PPUSH
35667: CALL_OW 266
35671: PUSH
35672: LD_VAR 0 3
35676: PUSH
35677: LD_VAR 0 4
35681: ARRAY
35682: PPUSH
35683: CALL_OW 250
35687: PUSH
35688: LD_VAR 0 3
35692: PUSH
35693: LD_VAR 0 4
35697: ARRAY
35698: PPUSH
35699: CALL_OW 251
35703: PUSH
35704: LD_VAR 0 3
35708: PUSH
35709: LD_VAR 0 4
35713: ARRAY
35714: PPUSH
35715: CALL_OW 254
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: PUSH
35726: EMPTY
35727: LIST
35728: ADD
35729: ST_TO_ADDR
35730: GO 35643
35732: POP
35733: POP
// result := list ;
35734: LD_ADDR_VAR 0 2
35738: PUSH
35739: LD_VAR 0 5
35743: ST_TO_ADDR
// end ;
35744: LD_VAR 0 2
35748: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35749: LD_INT 0
35751: PPUSH
35752: PPUSH
35753: PPUSH
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
// if not factory then
35758: LD_VAR 0 1
35762: NOT
35763: IFFALSE 35767
// exit ;
35765: GO 36370
// if control = control_apeman then
35767: LD_VAR 0 4
35771: PUSH
35772: LD_INT 5
35774: EQUAL
35775: IFFALSE 35884
// begin tmp := UnitsInside ( factory ) ;
35777: LD_ADDR_VAR 0 8
35781: PUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL_OW 313
35791: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35792: LD_VAR 0 8
35796: PPUSH
35797: LD_INT 25
35799: PUSH
35800: LD_INT 12
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PPUSH
35807: CALL_OW 72
35811: NOT
35812: IFFALSE 35822
// control := control_manual ;
35814: LD_ADDR_VAR 0 4
35818: PUSH
35819: LD_INT 1
35821: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35822: LD_ADDR_VAR 0 8
35826: PUSH
35827: LD_VAR 0 1
35831: PPUSH
35832: CALL 35519 0 1
35836: ST_TO_ADDR
// if tmp then
35837: LD_VAR 0 8
35841: IFFALSE 35884
// begin for i in tmp do
35843: LD_ADDR_VAR 0 7
35847: PUSH
35848: LD_VAR 0 8
35852: PUSH
35853: FOR_IN
35854: IFFALSE 35882
// if i [ 1 ] = b_ext_radio then
35856: LD_VAR 0 7
35860: PUSH
35861: LD_INT 1
35863: ARRAY
35864: PUSH
35865: LD_INT 22
35867: EQUAL
35868: IFFALSE 35880
// begin control := control_remote ;
35870: LD_ADDR_VAR 0 4
35874: PUSH
35875: LD_INT 2
35877: ST_TO_ADDR
// break ;
35878: GO 35882
// end ;
35880: GO 35853
35882: POP
35883: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35884: LD_VAR 0 1
35888: PPUSH
35889: LD_VAR 0 2
35893: PPUSH
35894: LD_VAR 0 3
35898: PPUSH
35899: LD_VAR 0 4
35903: PPUSH
35904: LD_VAR 0 5
35908: PPUSH
35909: CALL_OW 448
35913: IFFALSE 35948
// begin result := [ chassis , engine , control , weapon ] ;
35915: LD_ADDR_VAR 0 6
35919: PUSH
35920: LD_VAR 0 2
35924: PUSH
35925: LD_VAR 0 3
35929: PUSH
35930: LD_VAR 0 4
35934: PUSH
35935: LD_VAR 0 5
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: ST_TO_ADDR
// exit ;
35946: GO 36370
// end ; _chassis := AvailableChassisList ( factory ) ;
35948: LD_ADDR_VAR 0 9
35952: PUSH
35953: LD_VAR 0 1
35957: PPUSH
35958: CALL_OW 475
35962: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35963: LD_ADDR_VAR 0 11
35967: PUSH
35968: LD_VAR 0 1
35972: PPUSH
35973: CALL_OW 476
35977: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35978: LD_ADDR_VAR 0 12
35982: PUSH
35983: LD_VAR 0 1
35987: PPUSH
35988: CALL_OW 477
35992: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35993: LD_ADDR_VAR 0 10
35997: PUSH
35998: LD_VAR 0 1
36002: PPUSH
36003: CALL_OW 478
36007: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36008: LD_VAR 0 9
36012: NOT
36013: IFTRUE 36022
36015: PUSH
36016: LD_VAR 0 11
36020: NOT
36021: OR
36022: IFTRUE 36031
36024: PUSH
36025: LD_VAR 0 12
36029: NOT
36030: OR
36031: IFTRUE 36040
36033: PUSH
36034: LD_VAR 0 10
36038: NOT
36039: OR
36040: IFFALSE 36075
// begin result := [ chassis , engine , control , weapon ] ;
36042: LD_ADDR_VAR 0 6
36046: PUSH
36047: LD_VAR 0 2
36051: PUSH
36052: LD_VAR 0 3
36056: PUSH
36057: LD_VAR 0 4
36061: PUSH
36062: LD_VAR 0 5
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: ST_TO_ADDR
// exit ;
36073: GO 36370
// end ; if not chassis in _chassis then
36075: LD_VAR 0 2
36079: PUSH
36080: LD_VAR 0 9
36084: IN
36085: NOT
36086: IFFALSE 36112
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36088: LD_ADDR_VAR 0 2
36092: PUSH
36093: LD_VAR 0 9
36097: PUSH
36098: LD_INT 1
36100: PPUSH
36101: LD_VAR 0 9
36105: PPUSH
36106: CALL_OW 12
36110: ARRAY
36111: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36112: LD_VAR 0 2
36116: PPUSH
36117: LD_VAR 0 3
36121: PPUSH
36122: CALL 36375 0 2
36126: NOT
36127: IFFALSE 36188
// repeat engine := _engine [ 1 ] ;
36129: LD_ADDR_VAR 0 3
36133: PUSH
36134: LD_VAR 0 11
36138: PUSH
36139: LD_INT 1
36141: ARRAY
36142: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36143: LD_ADDR_VAR 0 11
36147: PUSH
36148: LD_VAR 0 11
36152: PPUSH
36153: LD_INT 1
36155: PPUSH
36156: CALL_OW 3
36160: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36161: LD_VAR 0 2
36165: PPUSH
36166: LD_VAR 0 3
36170: PPUSH
36171: CALL 36375 0 2
36175: IFTRUE 36186
36177: PUSH
36178: LD_VAR 0 11
36182: PUSH
36183: EMPTY
36184: EQUAL
36185: OR
36186: IFFALSE 36129
// if not control in _control then
36188: LD_VAR 0 4
36192: PUSH
36193: LD_VAR 0 12
36197: IN
36198: NOT
36199: IFFALSE 36225
// control := _control [ rand ( 1 , _control ) ] ;
36201: LD_ADDR_VAR 0 4
36205: PUSH
36206: LD_VAR 0 12
36210: PUSH
36211: LD_INT 1
36213: PPUSH
36214: LD_VAR 0 12
36218: PPUSH
36219: CALL_OW 12
36223: ARRAY
36224: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36225: LD_VAR 0 2
36229: PPUSH
36230: LD_VAR 0 5
36234: PPUSH
36235: CALL 36597 0 2
36239: NOT
36240: IFFALSE 36301
// repeat weapon := _weapon [ 1 ] ;
36242: LD_ADDR_VAR 0 5
36246: PUSH
36247: LD_VAR 0 10
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36256: LD_ADDR_VAR 0 10
36260: PUSH
36261: LD_VAR 0 10
36265: PPUSH
36266: LD_INT 1
36268: PPUSH
36269: CALL_OW 3
36273: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36274: LD_VAR 0 2
36278: PPUSH
36279: LD_VAR 0 5
36283: PPUSH
36284: CALL 36597 0 2
36288: IFTRUE 36299
36290: PUSH
36291: LD_VAR 0 10
36295: PUSH
36296: EMPTY
36297: EQUAL
36298: OR
36299: IFFALSE 36242
// result := [ ] ;
36301: LD_ADDR_VAR 0 6
36305: PUSH
36306: EMPTY
36307: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36308: LD_VAR 0 1
36312: PPUSH
36313: LD_VAR 0 2
36317: PPUSH
36318: LD_VAR 0 3
36322: PPUSH
36323: LD_VAR 0 4
36327: PPUSH
36328: LD_VAR 0 5
36332: PPUSH
36333: CALL_OW 448
36337: IFFALSE 36370
// result := [ chassis , engine , control , weapon ] ;
36339: LD_ADDR_VAR 0 6
36343: PUSH
36344: LD_VAR 0 2
36348: PUSH
36349: LD_VAR 0 3
36353: PUSH
36354: LD_VAR 0 4
36358: PUSH
36359: LD_VAR 0 5
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// end ;
36370: LD_VAR 0 6
36374: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36375: LD_INT 0
36377: PPUSH
// if not chassis or not engine then
36378: LD_VAR 0 1
36382: NOT
36383: IFTRUE 36392
36385: PUSH
36386: LD_VAR 0 2
36390: NOT
36391: OR
36392: IFFALSE 36396
// exit ;
36394: GO 36592
// case engine of engine_solar :
36396: LD_VAR 0 2
36400: PUSH
36401: LD_INT 2
36403: DOUBLE
36404: EQUAL
36405: IFTRUE 36409
36407: GO 36447
36409: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36410: LD_ADDR_VAR 0 3
36414: PUSH
36415: LD_INT 11
36417: PUSH
36418: LD_INT 12
36420: PUSH
36421: LD_INT 13
36423: PUSH
36424: LD_INT 14
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: LD_INT 2
36432: PUSH
36433: LD_INT 3
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: ST_TO_ADDR
36445: GO 36576
36447: LD_INT 1
36449: DOUBLE
36450: EQUAL
36451: IFTRUE 36455
36453: GO 36517
36455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36456: LD_ADDR_VAR 0 3
36460: PUSH
36461: LD_INT 11
36463: PUSH
36464: LD_INT 12
36466: PUSH
36467: LD_INT 13
36469: PUSH
36470: LD_INT 14
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: LD_INT 4
36484: PUSH
36485: LD_INT 5
36487: PUSH
36488: LD_INT 21
36490: PUSH
36491: LD_INT 23
36493: PUSH
36494: LD_INT 22
36496: PUSH
36497: LD_INT 24
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
36515: GO 36576
36517: LD_INT 3
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36525
36523: GO 36575
36525: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36526: LD_ADDR_VAR 0 3
36530: PUSH
36531: LD_INT 13
36533: PUSH
36534: LD_INT 14
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 4
36545: PUSH
36546: LD_INT 5
36548: PUSH
36549: LD_INT 21
36551: PUSH
36552: LD_INT 22
36554: PUSH
36555: LD_INT 23
36557: PUSH
36558: LD_INT 24
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: ST_TO_ADDR
36573: GO 36576
36575: POP
// result := ( chassis in result ) ;
36576: LD_ADDR_VAR 0 3
36580: PUSH
36581: LD_VAR 0 1
36585: PUSH
36586: LD_VAR 0 3
36590: IN
36591: ST_TO_ADDR
// end ;
36592: LD_VAR 0 3
36596: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36597: LD_INT 0
36599: PPUSH
// if not chassis or not weapon then
36600: LD_VAR 0 1
36604: NOT
36605: IFTRUE 36614
36607: PUSH
36608: LD_VAR 0 2
36612: NOT
36613: OR
36614: IFFALSE 36618
// exit ;
36616: GO 37712
// case weapon of us_machine_gun :
36618: LD_VAR 0 2
36622: PUSH
36623: LD_INT 2
36625: DOUBLE
36626: EQUAL
36627: IFTRUE 36631
36629: GO 36661
36631: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36632: LD_ADDR_VAR 0 3
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: LD_INT 3
36645: PUSH
36646: LD_INT 4
36648: PUSH
36649: LD_INT 5
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: ST_TO_ADDR
36659: GO 37696
36661: LD_INT 3
36663: DOUBLE
36664: EQUAL
36665: IFTRUE 36669
36667: GO 36699
36669: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36670: LD_ADDR_VAR 0 3
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: LD_INT 3
36683: PUSH
36684: LD_INT 4
36686: PUSH
36687: LD_INT 5
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
36697: GO 37696
36699: LD_INT 11
36701: DOUBLE
36702: EQUAL
36703: IFTRUE 36707
36705: GO 36737
36707: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36708: LD_ADDR_VAR 0 3
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: LD_INT 3
36721: PUSH
36722: LD_INT 4
36724: PUSH
36725: LD_INT 5
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
36735: GO 37696
36737: LD_INT 4
36739: DOUBLE
36740: EQUAL
36741: IFTRUE 36745
36743: GO 36771
36745: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36746: LD_ADDR_VAR 0 3
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: LD_INT 3
36756: PUSH
36757: LD_INT 4
36759: PUSH
36760: LD_INT 5
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
36769: GO 37696
36771: LD_INT 5
36773: DOUBLE
36774: EQUAL
36775: IFTRUE 36779
36777: GO 36805
36779: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36780: LD_ADDR_VAR 0 3
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: LD_INT 3
36790: PUSH
36791: LD_INT 4
36793: PUSH
36794: LD_INT 5
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: ST_TO_ADDR
36803: GO 37696
36805: LD_INT 9
36807: DOUBLE
36808: EQUAL
36809: IFTRUE 36813
36811: GO 36839
36813: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36814: LD_ADDR_VAR 0 3
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: LD_INT 3
36824: PUSH
36825: LD_INT 4
36827: PUSH
36828: LD_INT 5
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: ST_TO_ADDR
36837: GO 37696
36839: LD_INT 7
36841: DOUBLE
36842: EQUAL
36843: IFTRUE 36847
36845: GO 36873
36847: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36848: LD_ADDR_VAR 0 3
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: LD_INT 4
36861: PUSH
36862: LD_INT 5
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: ST_TO_ADDR
36871: GO 37696
36873: LD_INT 12
36875: DOUBLE
36876: EQUAL
36877: IFTRUE 36881
36879: GO 36907
36881: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36882: LD_ADDR_VAR 0 3
36886: PUSH
36887: LD_INT 2
36889: PUSH
36890: LD_INT 3
36892: PUSH
36893: LD_INT 4
36895: PUSH
36896: LD_INT 5
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
36905: GO 37696
36907: LD_INT 13
36909: DOUBLE
36910: EQUAL
36911: IFTRUE 36915
36913: GO 36941
36915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36916: LD_ADDR_VAR 0 3
36920: PUSH
36921: LD_INT 2
36923: PUSH
36924: LD_INT 3
36926: PUSH
36927: LD_INT 4
36929: PUSH
36930: LD_INT 5
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: ST_TO_ADDR
36939: GO 37696
36941: LD_INT 14
36943: DOUBLE
36944: EQUAL
36945: IFTRUE 36949
36947: GO 36967
36949: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36950: LD_ADDR_VAR 0 3
36954: PUSH
36955: LD_INT 4
36957: PUSH
36958: LD_INT 5
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: ST_TO_ADDR
36965: GO 37696
36967: LD_INT 6
36969: DOUBLE
36970: EQUAL
36971: IFTRUE 36975
36973: GO 36993
36975: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36976: LD_ADDR_VAR 0 3
36980: PUSH
36981: LD_INT 4
36983: PUSH
36984: LD_INT 5
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: ST_TO_ADDR
36991: GO 37696
36993: LD_INT 10
36995: DOUBLE
36996: EQUAL
36997: IFTRUE 37001
36999: GO 37019
37001: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37002: LD_ADDR_VAR 0 3
37006: PUSH
37007: LD_INT 4
37009: PUSH
37010: LD_INT 5
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: ST_TO_ADDR
37017: GO 37696
37019: LD_INT 22
37021: DOUBLE
37022: EQUAL
37023: IFTRUE 37027
37025: GO 37053
37027: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37028: LD_ADDR_VAR 0 3
37032: PUSH
37033: LD_INT 11
37035: PUSH
37036: LD_INT 12
37038: PUSH
37039: LD_INT 13
37041: PUSH
37042: LD_INT 14
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: ST_TO_ADDR
37051: GO 37696
37053: LD_INT 23
37055: DOUBLE
37056: EQUAL
37057: IFTRUE 37061
37059: GO 37087
37061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37062: LD_ADDR_VAR 0 3
37066: PUSH
37067: LD_INT 11
37069: PUSH
37070: LD_INT 12
37072: PUSH
37073: LD_INT 13
37075: PUSH
37076: LD_INT 14
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
37085: GO 37696
37087: LD_INT 24
37089: DOUBLE
37090: EQUAL
37091: IFTRUE 37095
37093: GO 37121
37095: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37096: LD_ADDR_VAR 0 3
37100: PUSH
37101: LD_INT 11
37103: PUSH
37104: LD_INT 12
37106: PUSH
37107: LD_INT 13
37109: PUSH
37110: LD_INT 14
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: ST_TO_ADDR
37119: GO 37696
37121: LD_INT 30
37123: DOUBLE
37124: EQUAL
37125: IFTRUE 37129
37127: GO 37155
37129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37130: LD_ADDR_VAR 0 3
37134: PUSH
37135: LD_INT 11
37137: PUSH
37138: LD_INT 12
37140: PUSH
37141: LD_INT 13
37143: PUSH
37144: LD_INT 14
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: ST_TO_ADDR
37153: GO 37696
37155: LD_INT 25
37157: DOUBLE
37158: EQUAL
37159: IFTRUE 37163
37161: GO 37181
37163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37164: LD_ADDR_VAR 0 3
37168: PUSH
37169: LD_INT 13
37171: PUSH
37172: LD_INT 14
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: ST_TO_ADDR
37179: GO 37696
37181: LD_INT 27
37183: DOUBLE
37184: EQUAL
37185: IFTRUE 37189
37187: GO 37207
37189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37190: LD_ADDR_VAR 0 3
37194: PUSH
37195: LD_INT 13
37197: PUSH
37198: LD_INT 14
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: ST_TO_ADDR
37205: GO 37696
37207: LD_INT 92
37209: DOUBLE
37210: EQUAL
37211: IFTRUE 37215
37213: GO 37241
37215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37216: LD_ADDR_VAR 0 3
37220: PUSH
37221: LD_INT 11
37223: PUSH
37224: LD_INT 12
37226: PUSH
37227: LD_INT 13
37229: PUSH
37230: LD_INT 14
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: ST_TO_ADDR
37239: GO 37696
37241: LD_INT 28
37243: DOUBLE
37244: EQUAL
37245: IFTRUE 37249
37247: GO 37267
37249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37250: LD_ADDR_VAR 0 3
37254: PUSH
37255: LD_INT 13
37257: PUSH
37258: LD_INT 14
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: ST_TO_ADDR
37265: GO 37696
37267: LD_INT 29
37269: DOUBLE
37270: EQUAL
37271: IFTRUE 37275
37273: GO 37293
37275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37276: LD_ADDR_VAR 0 3
37280: PUSH
37281: LD_INT 13
37283: PUSH
37284: LD_INT 14
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: ST_TO_ADDR
37291: GO 37696
37293: LD_INT 31
37295: DOUBLE
37296: EQUAL
37297: IFTRUE 37301
37299: GO 37319
37301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37302: LD_ADDR_VAR 0 3
37306: PUSH
37307: LD_INT 13
37309: PUSH
37310: LD_INT 14
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: ST_TO_ADDR
37317: GO 37696
37319: LD_INT 26
37321: DOUBLE
37322: EQUAL
37323: IFTRUE 37327
37325: GO 37345
37327: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37328: LD_ADDR_VAR 0 3
37332: PUSH
37333: LD_INT 13
37335: PUSH
37336: LD_INT 14
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: ST_TO_ADDR
37343: GO 37696
37345: LD_INT 42
37347: DOUBLE
37348: EQUAL
37349: IFTRUE 37353
37351: GO 37379
37353: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37354: LD_ADDR_VAR 0 3
37358: PUSH
37359: LD_INT 21
37361: PUSH
37362: LD_INT 22
37364: PUSH
37365: LD_INT 23
37367: PUSH
37368: LD_INT 24
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
37377: GO 37696
37379: LD_INT 43
37381: DOUBLE
37382: EQUAL
37383: IFTRUE 37387
37385: GO 37413
37387: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37388: LD_ADDR_VAR 0 3
37392: PUSH
37393: LD_INT 21
37395: PUSH
37396: LD_INT 22
37398: PUSH
37399: LD_INT 23
37401: PUSH
37402: LD_INT 24
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: ST_TO_ADDR
37411: GO 37696
37413: LD_INT 44
37415: DOUBLE
37416: EQUAL
37417: IFTRUE 37421
37419: GO 37447
37421: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37422: LD_ADDR_VAR 0 3
37426: PUSH
37427: LD_INT 21
37429: PUSH
37430: LD_INT 22
37432: PUSH
37433: LD_INT 23
37435: PUSH
37436: LD_INT 24
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: ST_TO_ADDR
37445: GO 37696
37447: LD_INT 45
37449: DOUBLE
37450: EQUAL
37451: IFTRUE 37455
37453: GO 37481
37455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37456: LD_ADDR_VAR 0 3
37460: PUSH
37461: LD_INT 21
37463: PUSH
37464: LD_INT 22
37466: PUSH
37467: LD_INT 23
37469: PUSH
37470: LD_INT 24
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: ST_TO_ADDR
37479: GO 37696
37481: LD_INT 49
37483: DOUBLE
37484: EQUAL
37485: IFTRUE 37489
37487: GO 37515
37489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37490: LD_ADDR_VAR 0 3
37494: PUSH
37495: LD_INT 21
37497: PUSH
37498: LD_INT 22
37500: PUSH
37501: LD_INT 23
37503: PUSH
37504: LD_INT 24
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
37513: GO 37696
37515: LD_INT 51
37517: DOUBLE
37518: EQUAL
37519: IFTRUE 37523
37521: GO 37549
37523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37524: LD_ADDR_VAR 0 3
37528: PUSH
37529: LD_INT 21
37531: PUSH
37532: LD_INT 22
37534: PUSH
37535: LD_INT 23
37537: PUSH
37538: LD_INT 24
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: ST_TO_ADDR
37547: GO 37696
37549: LD_INT 52
37551: DOUBLE
37552: EQUAL
37553: IFTRUE 37557
37555: GO 37583
37557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37558: LD_ADDR_VAR 0 3
37562: PUSH
37563: LD_INT 21
37565: PUSH
37566: LD_INT 22
37568: PUSH
37569: LD_INT 23
37571: PUSH
37572: LD_INT 24
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: ST_TO_ADDR
37581: GO 37696
37583: LD_INT 53
37585: DOUBLE
37586: EQUAL
37587: IFTRUE 37591
37589: GO 37609
37591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37592: LD_ADDR_VAR 0 3
37596: PUSH
37597: LD_INT 23
37599: PUSH
37600: LD_INT 24
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: ST_TO_ADDR
37607: GO 37696
37609: LD_INT 46
37611: DOUBLE
37612: EQUAL
37613: IFTRUE 37617
37615: GO 37635
37617: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37618: LD_ADDR_VAR 0 3
37622: PUSH
37623: LD_INT 23
37625: PUSH
37626: LD_INT 24
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: ST_TO_ADDR
37633: GO 37696
37635: LD_INT 47
37637: DOUBLE
37638: EQUAL
37639: IFTRUE 37643
37641: GO 37661
37643: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
37644: LD_ADDR_VAR 0 3
37648: PUSH
37649: LD_INT 23
37651: PUSH
37652: LD_INT 24
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: ST_TO_ADDR
37659: GO 37696
37661: LD_INT 98
37663: DOUBLE
37664: EQUAL
37665: IFTRUE 37669
37667: GO 37695
37669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37670: LD_ADDR_VAR 0 3
37674: PUSH
37675: LD_INT 21
37677: PUSH
37678: LD_INT 22
37680: PUSH
37681: LD_INT 23
37683: PUSH
37684: LD_INT 24
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: ST_TO_ADDR
37693: GO 37696
37695: POP
// result := ( chassis in result ) ;
37696: LD_ADDR_VAR 0 3
37700: PUSH
37701: LD_VAR 0 1
37705: PUSH
37706: LD_VAR 0 3
37710: IN
37711: ST_TO_ADDR
// end ;
37712: LD_VAR 0 3
37716: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37717: LD_INT 0
37719: PPUSH
37720: PPUSH
37721: PPUSH
37722: PPUSH
37723: PPUSH
37724: PPUSH
37725: PPUSH
// result := array ;
37726: LD_ADDR_VAR 0 5
37730: PUSH
37731: LD_VAR 0 1
37735: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37736: LD_VAR 0 1
37740: NOT
37741: IFTRUE 37750
37743: PUSH
37744: LD_VAR 0 2
37748: NOT
37749: OR
37750: IFTRUE 37759
37752: PUSH
37753: LD_VAR 0 3
37757: NOT
37758: OR
37759: IFTRUE 37773
37761: PUSH
37762: LD_VAR 0 2
37766: PUSH
37767: LD_VAR 0 1
37771: GREATER
37772: OR
37773: IFTRUE 37787
37775: PUSH
37776: LD_VAR 0 3
37780: PUSH
37781: LD_VAR 0 1
37785: GREATER
37786: OR
37787: IFFALSE 37791
// exit ;
37789: GO 38087
// if direction then
37791: LD_VAR 0 4
37795: IFFALSE 37859
// begin d := 1 ;
37797: LD_ADDR_VAR 0 9
37801: PUSH
37802: LD_INT 1
37804: ST_TO_ADDR
// if i_from > i_to then
37805: LD_VAR 0 2
37809: PUSH
37810: LD_VAR 0 3
37814: GREATER
37815: IFFALSE 37841
// length := ( array - i_from ) + i_to else
37817: LD_ADDR_VAR 0 11
37821: PUSH
37822: LD_VAR 0 1
37826: PUSH
37827: LD_VAR 0 2
37831: MINUS
37832: PUSH
37833: LD_VAR 0 3
37837: PLUS
37838: ST_TO_ADDR
37839: GO 37857
// length := i_to - i_from ;
37841: LD_ADDR_VAR 0 11
37845: PUSH
37846: LD_VAR 0 3
37850: PUSH
37851: LD_VAR 0 2
37855: MINUS
37856: ST_TO_ADDR
// end else
37857: GO 37920
// begin d := - 1 ;
37859: LD_ADDR_VAR 0 9
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: ST_TO_ADDR
// if i_from > i_to then
37868: LD_VAR 0 2
37872: PUSH
37873: LD_VAR 0 3
37877: GREATER
37878: IFFALSE 37898
// length := i_from - i_to else
37880: LD_ADDR_VAR 0 11
37884: PUSH
37885: LD_VAR 0 2
37889: PUSH
37890: LD_VAR 0 3
37894: MINUS
37895: ST_TO_ADDR
37896: GO 37920
// length := ( array - i_to ) + i_from ;
37898: LD_ADDR_VAR 0 11
37902: PUSH
37903: LD_VAR 0 1
37907: PUSH
37908: LD_VAR 0 3
37912: MINUS
37913: PUSH
37914: LD_VAR 0 2
37918: PLUS
37919: ST_TO_ADDR
// end ; if not length then
37920: LD_VAR 0 11
37924: NOT
37925: IFFALSE 37929
// exit ;
37927: GO 38087
// tmp := array ;
37929: LD_ADDR_VAR 0 10
37933: PUSH
37934: LD_VAR 0 1
37938: ST_TO_ADDR
// for i = 1 to length do
37939: LD_ADDR_VAR 0 6
37943: PUSH
37944: DOUBLE
37945: LD_INT 1
37947: DEC
37948: ST_TO_ADDR
37949: LD_VAR 0 11
37953: PUSH
37954: FOR_TO
37955: IFFALSE 38075
// begin for j = 1 to array do
37957: LD_ADDR_VAR 0 7
37961: PUSH
37962: DOUBLE
37963: LD_INT 1
37965: DEC
37966: ST_TO_ADDR
37967: LD_VAR 0 1
37971: PUSH
37972: FOR_TO
37973: IFFALSE 38061
// begin k := j + d ;
37975: LD_ADDR_VAR 0 8
37979: PUSH
37980: LD_VAR 0 7
37984: PUSH
37985: LD_VAR 0 9
37989: PLUS
37990: ST_TO_ADDR
// if k > array then
37991: LD_VAR 0 8
37995: PUSH
37996: LD_VAR 0 1
38000: GREATER
38001: IFFALSE 38011
// k := 1 ;
38003: LD_ADDR_VAR 0 8
38007: PUSH
38008: LD_INT 1
38010: ST_TO_ADDR
// if not k then
38011: LD_VAR 0 8
38015: NOT
38016: IFFALSE 38028
// k := array ;
38018: LD_ADDR_VAR 0 8
38022: PUSH
38023: LD_VAR 0 1
38027: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38028: LD_ADDR_VAR 0 10
38032: PUSH
38033: LD_VAR 0 10
38037: PPUSH
38038: LD_VAR 0 8
38042: PPUSH
38043: LD_VAR 0 1
38047: PUSH
38048: LD_VAR 0 7
38052: ARRAY
38053: PPUSH
38054: CALL_OW 1
38058: ST_TO_ADDR
// end ;
38059: GO 37972
38061: POP
38062: POP
// array := tmp ;
38063: LD_ADDR_VAR 0 1
38067: PUSH
38068: LD_VAR 0 10
38072: ST_TO_ADDR
// end ;
38073: GO 37954
38075: POP
38076: POP
// result := array ;
38077: LD_ADDR_VAR 0 5
38081: PUSH
38082: LD_VAR 0 1
38086: ST_TO_ADDR
// end ;
38087: LD_VAR 0 5
38091: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38092: LD_INT 0
38094: PPUSH
38095: PPUSH
// result := 0 ;
38096: LD_ADDR_VAR 0 3
38100: PUSH
38101: LD_INT 0
38103: ST_TO_ADDR
// if not array or not value in array then
38104: LD_VAR 0 1
38108: NOT
38109: IFTRUE 38124
38111: PUSH
38112: LD_VAR 0 2
38116: PUSH
38117: LD_VAR 0 1
38121: IN
38122: NOT
38123: OR
38124: IFFALSE 38128
// exit ;
38126: GO 38182
// for i = 1 to array do
38128: LD_ADDR_VAR 0 4
38132: PUSH
38133: DOUBLE
38134: LD_INT 1
38136: DEC
38137: ST_TO_ADDR
38138: LD_VAR 0 1
38142: PUSH
38143: FOR_TO
38144: IFFALSE 38180
// if value = array [ i ] then
38146: LD_VAR 0 2
38150: PUSH
38151: LD_VAR 0 1
38155: PUSH
38156: LD_VAR 0 4
38160: ARRAY
38161: EQUAL
38162: IFFALSE 38178
// begin result := i ;
38164: LD_ADDR_VAR 0 3
38168: PUSH
38169: LD_VAR 0 4
38173: ST_TO_ADDR
// exit ;
38174: POP
38175: POP
38176: GO 38182
// end ;
38178: GO 38143
38180: POP
38181: POP
// end ;
38182: LD_VAR 0 3
38186: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38187: LD_INT 0
38189: PPUSH
// vc_chassis := chassis ;
38190: LD_ADDR_OWVAR 37
38194: PUSH
38195: LD_VAR 0 1
38199: ST_TO_ADDR
// vc_engine := engine ;
38200: LD_ADDR_OWVAR 39
38204: PUSH
38205: LD_VAR 0 2
38209: ST_TO_ADDR
// vc_control := control ;
38210: LD_ADDR_OWVAR 38
38214: PUSH
38215: LD_VAR 0 3
38219: ST_TO_ADDR
// vc_weapon := weapon ;
38220: LD_ADDR_OWVAR 40
38224: PUSH
38225: LD_VAR 0 4
38229: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38230: LD_ADDR_OWVAR 41
38234: PUSH
38235: LD_VAR 0 5
38239: ST_TO_ADDR
// end ;
38240: LD_VAR 0 6
38244: RET
// export function WantPlant ( unit ) ; var task ; begin
38245: LD_INT 0
38247: PPUSH
38248: PPUSH
// result := false ;
38249: LD_ADDR_VAR 0 2
38253: PUSH
38254: LD_INT 0
38256: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38257: LD_ADDR_VAR 0 3
38261: PUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: CALL_OW 437
38271: ST_TO_ADDR
// if task then
38272: LD_VAR 0 3
38276: IFFALSE 38304
// if task [ 1 ] [ 1 ] = p then
38278: LD_VAR 0 3
38282: PUSH
38283: LD_INT 1
38285: ARRAY
38286: PUSH
38287: LD_INT 1
38289: ARRAY
38290: PUSH
38291: LD_STRING p
38293: EQUAL
38294: IFFALSE 38304
// result := true ;
38296: LD_ADDR_VAR 0 2
38300: PUSH
38301: LD_INT 1
38303: ST_TO_ADDR
// end ;
38304: LD_VAR 0 2
38308: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38309: LD_INT 0
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
// if pos < 1 then
38315: LD_VAR 0 2
38319: PUSH
38320: LD_INT 1
38322: LESS
38323: IFFALSE 38327
// exit ;
38325: GO 38630
// if pos = 1 then
38327: LD_VAR 0 2
38331: PUSH
38332: LD_INT 1
38334: EQUAL
38335: IFFALSE 38368
// result := Replace ( arr , pos [ 1 ] , value ) else
38337: LD_ADDR_VAR 0 4
38341: PUSH
38342: LD_VAR 0 1
38346: PPUSH
38347: LD_VAR 0 2
38351: PUSH
38352: LD_INT 1
38354: ARRAY
38355: PPUSH
38356: LD_VAR 0 3
38360: PPUSH
38361: CALL_OW 1
38365: ST_TO_ADDR
38366: GO 38630
// begin tmp := arr ;
38368: LD_ADDR_VAR 0 6
38372: PUSH
38373: LD_VAR 0 1
38377: ST_TO_ADDR
// s_arr := [ tmp ] ;
38378: LD_ADDR_VAR 0 7
38382: PUSH
38383: LD_VAR 0 6
38387: PUSH
38388: EMPTY
38389: LIST
38390: ST_TO_ADDR
// for i = 1 to pos - 1 do
38391: LD_ADDR_VAR 0 5
38395: PUSH
38396: DOUBLE
38397: LD_INT 1
38399: DEC
38400: ST_TO_ADDR
38401: LD_VAR 0 2
38405: PUSH
38406: LD_INT 1
38408: MINUS
38409: PUSH
38410: FOR_TO
38411: IFFALSE 38456
// begin tmp := tmp [ pos [ i ] ] ;
38413: LD_ADDR_VAR 0 6
38417: PUSH
38418: LD_VAR 0 6
38422: PUSH
38423: LD_VAR 0 2
38427: PUSH
38428: LD_VAR 0 5
38432: ARRAY
38433: ARRAY
38434: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38435: LD_ADDR_VAR 0 7
38439: PUSH
38440: LD_VAR 0 7
38444: PUSH
38445: LD_VAR 0 6
38449: PUSH
38450: EMPTY
38451: LIST
38452: ADD
38453: ST_TO_ADDR
// end ;
38454: GO 38410
38456: POP
38457: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38458: LD_ADDR_VAR 0 6
38462: PUSH
38463: LD_VAR 0 6
38467: PPUSH
38468: LD_VAR 0 2
38472: PUSH
38473: LD_VAR 0 2
38477: ARRAY
38478: PPUSH
38479: LD_VAR 0 3
38483: PPUSH
38484: CALL_OW 1
38488: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38489: LD_ADDR_VAR 0 7
38493: PUSH
38494: LD_VAR 0 7
38498: PPUSH
38499: LD_VAR 0 7
38503: PPUSH
38504: LD_VAR 0 6
38508: PPUSH
38509: CALL_OW 1
38513: ST_TO_ADDR
// for i = s_arr downto 2 do
38514: LD_ADDR_VAR 0 5
38518: PUSH
38519: DOUBLE
38520: LD_VAR 0 7
38524: INC
38525: ST_TO_ADDR
38526: LD_INT 2
38528: PUSH
38529: FOR_DOWNTO
38530: IFFALSE 38614
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38532: LD_ADDR_VAR 0 6
38536: PUSH
38537: LD_VAR 0 7
38541: PUSH
38542: LD_VAR 0 5
38546: PUSH
38547: LD_INT 1
38549: MINUS
38550: ARRAY
38551: PPUSH
38552: LD_VAR 0 2
38556: PUSH
38557: LD_VAR 0 5
38561: PUSH
38562: LD_INT 1
38564: MINUS
38565: ARRAY
38566: PPUSH
38567: LD_VAR 0 7
38571: PUSH
38572: LD_VAR 0 5
38576: ARRAY
38577: PPUSH
38578: CALL_OW 1
38582: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38583: LD_ADDR_VAR 0 7
38587: PUSH
38588: LD_VAR 0 7
38592: PPUSH
38593: LD_VAR 0 5
38597: PUSH
38598: LD_INT 1
38600: MINUS
38601: PPUSH
38602: LD_VAR 0 6
38606: PPUSH
38607: CALL_OW 1
38611: ST_TO_ADDR
// end ;
38612: GO 38529
38614: POP
38615: POP
// result := s_arr [ 1 ] ;
38616: LD_ADDR_VAR 0 4
38620: PUSH
38621: LD_VAR 0 7
38625: PUSH
38626: LD_INT 1
38628: ARRAY
38629: ST_TO_ADDR
// end ; end ;
38630: LD_VAR 0 4
38634: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38635: LD_INT 0
38637: PPUSH
38638: PPUSH
// if not list then
38639: LD_VAR 0 1
38643: NOT
38644: IFFALSE 38648
// exit ;
38646: GO 38739
// i := list [ pos1 ] ;
38648: LD_ADDR_VAR 0 5
38652: PUSH
38653: LD_VAR 0 1
38657: PUSH
38658: LD_VAR 0 2
38662: ARRAY
38663: ST_TO_ADDR
// if not i then
38664: LD_VAR 0 5
38668: NOT
38669: IFFALSE 38673
// exit ;
38671: GO 38739
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38673: LD_ADDR_VAR 0 1
38677: PUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: LD_VAR 0 2
38687: PPUSH
38688: LD_VAR 0 1
38692: PUSH
38693: LD_VAR 0 3
38697: ARRAY
38698: PPUSH
38699: CALL_OW 1
38703: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38704: LD_ADDR_VAR 0 1
38708: PUSH
38709: LD_VAR 0 1
38713: PPUSH
38714: LD_VAR 0 3
38718: PPUSH
38719: LD_VAR 0 5
38723: PPUSH
38724: CALL_OW 1
38728: ST_TO_ADDR
// result := list ;
38729: LD_ADDR_VAR 0 4
38733: PUSH
38734: LD_VAR 0 1
38738: ST_TO_ADDR
// end ;
38739: LD_VAR 0 4
38743: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38744: LD_INT 0
38746: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38747: LD_ADDR_VAR 0 5
38751: PUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: CALL_OW 250
38761: PPUSH
38762: LD_VAR 0 1
38766: PPUSH
38767: CALL_OW 251
38771: PPUSH
38772: LD_VAR 0 2
38776: PPUSH
38777: LD_VAR 0 3
38781: PPUSH
38782: LD_VAR 0 4
38786: PPUSH
38787: CALL 39169 0 5
38791: ST_TO_ADDR
// end ;
38792: LD_VAR 0 5
38796: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38797: LD_INT 0
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
// if not list or not unit then
38803: LD_VAR 0 2
38807: NOT
38808: IFTRUE 38817
38810: PUSH
38811: LD_VAR 0 1
38815: NOT
38816: OR
38817: IFFALSE 38821
// exit ;
38819: GO 39164
// result := [ ] ;
38821: LD_ADDR_VAR 0 5
38825: PUSH
38826: EMPTY
38827: ST_TO_ADDR
// for i in list do
38828: LD_ADDR_VAR 0 6
38832: PUSH
38833: LD_VAR 0 2
38837: PUSH
38838: FOR_IN
38839: IFFALSE 39057
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38841: LD_ADDR_VAR 0 8
38845: PUSH
38846: LD_VAR 0 1
38850: PPUSH
38851: LD_VAR 0 6
38855: PUSH
38856: LD_INT 1
38858: ARRAY
38859: PPUSH
38860: LD_VAR 0 6
38864: PUSH
38865: LD_INT 2
38867: ARRAY
38868: PPUSH
38869: CALL_OW 297
38873: ST_TO_ADDR
// if not Count ( result ) then
38874: LD_VAR 0 5
38878: PPUSH
38879: CALL 35391 0 1
38883: NOT
38884: IFFALSE 38917
// begin result := Join ( result , [ i , tmp ] ) ;
38886: LD_ADDR_VAR 0 5
38890: PUSH
38891: LD_VAR 0 5
38895: PPUSH
38896: LD_VAR 0 6
38900: PUSH
38901: LD_VAR 0 8
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PPUSH
38910: CALL 71357 0 2
38914: ST_TO_ADDR
// continue ;
38915: GO 38838
// end ; if result [ result ] [ 2 ] <= tmp then
38917: LD_VAR 0 5
38921: PUSH
38922: LD_VAR 0 5
38926: ARRAY
38927: PUSH
38928: LD_INT 2
38930: ARRAY
38931: PUSH
38932: LD_VAR 0 8
38936: LESSEQUAL
38937: IFFALSE 38970
// result := Join ( result , [ i , tmp ] ) else
38939: LD_ADDR_VAR 0 5
38943: PUSH
38944: LD_VAR 0 5
38948: PPUSH
38949: LD_VAR 0 6
38953: PUSH
38954: LD_VAR 0 8
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PPUSH
38963: CALL 71357 0 2
38967: ST_TO_ADDR
38968: GO 39055
// begin for j := 1 to Count ( result ) do
38970: LD_ADDR_VAR 0 7
38974: PUSH
38975: DOUBLE
38976: LD_INT 1
38978: DEC
38979: ST_TO_ADDR
38980: LD_VAR 0 5
38984: PPUSH
38985: CALL 35391 0 1
38989: PUSH
38990: FOR_TO
38991: IFFALSE 39053
// begin if tmp < result [ j ] [ 2 ] then
38993: LD_VAR 0 8
38997: PUSH
38998: LD_VAR 0 5
39002: PUSH
39003: LD_VAR 0 7
39007: ARRAY
39008: PUSH
39009: LD_INT 2
39011: ARRAY
39012: LESS
39013: IFFALSE 39051
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39015: LD_ADDR_VAR 0 5
39019: PUSH
39020: LD_VAR 0 5
39024: PPUSH
39025: LD_VAR 0 7
39029: PPUSH
39030: LD_VAR 0 6
39034: PUSH
39035: LD_VAR 0 8
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PPUSH
39044: CALL_OW 2
39048: ST_TO_ADDR
// break ;
39049: GO 39053
// end ; end ;
39051: GO 38990
39053: POP
39054: POP
// end ; end ;
39055: GO 38838
39057: POP
39058: POP
// if result and not asc then
39059: LD_VAR 0 5
39063: IFFALSE 39072
39065: PUSH
39066: LD_VAR 0 3
39070: NOT
39071: AND
39072: IFFALSE 39089
// result := ReverseArray ( result ) ;
39074: LD_ADDR_VAR 0 5
39078: PUSH
39079: LD_VAR 0 5
39083: PPUSH
39084: CALL 66447 0 1
39088: ST_TO_ADDR
// tmp := [ ] ;
39089: LD_ADDR_VAR 0 8
39093: PUSH
39094: EMPTY
39095: ST_TO_ADDR
// if mode then
39096: LD_VAR 0 4
39100: IFFALSE 39164
// begin for i := 1 to result do
39102: LD_ADDR_VAR 0 6
39106: PUSH
39107: DOUBLE
39108: LD_INT 1
39110: DEC
39111: ST_TO_ADDR
39112: LD_VAR 0 5
39116: PUSH
39117: FOR_TO
39118: IFFALSE 39152
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39120: LD_ADDR_VAR 0 8
39124: PUSH
39125: LD_VAR 0 8
39129: PPUSH
39130: LD_VAR 0 5
39134: PUSH
39135: LD_VAR 0 6
39139: ARRAY
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: PPUSH
39145: CALL 71357 0 2
39149: ST_TO_ADDR
39150: GO 39117
39152: POP
39153: POP
// result := tmp ;
39154: LD_ADDR_VAR 0 5
39158: PUSH
39159: LD_VAR 0 8
39163: ST_TO_ADDR
// end ; end ;
39164: LD_VAR 0 5
39168: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39169: LD_INT 0
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
// if not list then
39175: LD_VAR 0 3
39179: NOT
39180: IFFALSE 39184
// exit ;
39182: GO 39574
// result := [ ] ;
39184: LD_ADDR_VAR 0 6
39188: PUSH
39189: EMPTY
39190: ST_TO_ADDR
// for i in list do
39191: LD_ADDR_VAR 0 7
39195: PUSH
39196: LD_VAR 0 3
39200: PUSH
39201: FOR_IN
39202: IFFALSE 39404
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39204: LD_ADDR_VAR 0 9
39208: PUSH
39209: LD_VAR 0 7
39213: PPUSH
39214: LD_VAR 0 1
39218: PPUSH
39219: LD_VAR 0 2
39223: PPUSH
39224: CALL_OW 297
39228: ST_TO_ADDR
// if not result then
39229: LD_VAR 0 6
39233: NOT
39234: IFFALSE 39260
// result := [ [ i , tmp ] ] else
39236: LD_ADDR_VAR 0 6
39240: PUSH
39241: LD_VAR 0 7
39245: PUSH
39246: LD_VAR 0 9
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: ST_TO_ADDR
39258: GO 39402
// begin if result [ result ] [ 2 ] <= tmp then
39260: LD_VAR 0 6
39264: PUSH
39265: LD_VAR 0 6
39269: ARRAY
39270: PUSH
39271: LD_INT 2
39273: ARRAY
39274: PUSH
39275: LD_VAR 0 9
39279: LESSEQUAL
39280: IFFALSE 39322
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39282: LD_ADDR_VAR 0 6
39286: PUSH
39287: LD_VAR 0 6
39291: PPUSH
39292: LD_VAR 0 6
39296: PUSH
39297: LD_INT 1
39299: PLUS
39300: PPUSH
39301: LD_VAR 0 7
39305: PUSH
39306: LD_VAR 0 9
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PPUSH
39315: CALL_OW 2
39319: ST_TO_ADDR
39320: GO 39402
// for j := 1 to result do
39322: LD_ADDR_VAR 0 8
39326: PUSH
39327: DOUBLE
39328: LD_INT 1
39330: DEC
39331: ST_TO_ADDR
39332: LD_VAR 0 6
39336: PUSH
39337: FOR_TO
39338: IFFALSE 39400
// begin if tmp < result [ j ] [ 2 ] then
39340: LD_VAR 0 9
39344: PUSH
39345: LD_VAR 0 6
39349: PUSH
39350: LD_VAR 0 8
39354: ARRAY
39355: PUSH
39356: LD_INT 2
39358: ARRAY
39359: LESS
39360: IFFALSE 39398
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39362: LD_ADDR_VAR 0 6
39366: PUSH
39367: LD_VAR 0 6
39371: PPUSH
39372: LD_VAR 0 8
39376: PPUSH
39377: LD_VAR 0 7
39381: PUSH
39382: LD_VAR 0 9
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PPUSH
39391: CALL_OW 2
39395: ST_TO_ADDR
// break ;
39396: GO 39400
// end ; end ;
39398: GO 39337
39400: POP
39401: POP
// end ; end ;
39402: GO 39201
39404: POP
39405: POP
// if result and not asc then
39406: LD_VAR 0 6
39410: IFFALSE 39419
39412: PUSH
39413: LD_VAR 0 4
39417: NOT
39418: AND
39419: IFFALSE 39494
// begin tmp := result ;
39421: LD_ADDR_VAR 0 9
39425: PUSH
39426: LD_VAR 0 6
39430: ST_TO_ADDR
// for i = tmp downto 1 do
39431: LD_ADDR_VAR 0 7
39435: PUSH
39436: DOUBLE
39437: LD_VAR 0 9
39441: INC
39442: ST_TO_ADDR
39443: LD_INT 1
39445: PUSH
39446: FOR_DOWNTO
39447: IFFALSE 39492
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39449: LD_ADDR_VAR 0 6
39453: PUSH
39454: LD_VAR 0 6
39458: PPUSH
39459: LD_VAR 0 9
39463: PUSH
39464: LD_VAR 0 7
39468: MINUS
39469: PUSH
39470: LD_INT 1
39472: PLUS
39473: PPUSH
39474: LD_VAR 0 9
39478: PUSH
39479: LD_VAR 0 7
39483: ARRAY
39484: PPUSH
39485: CALL_OW 1
39489: ST_TO_ADDR
39490: GO 39446
39492: POP
39493: POP
// end ; tmp := [ ] ;
39494: LD_ADDR_VAR 0 9
39498: PUSH
39499: EMPTY
39500: ST_TO_ADDR
// if mode then
39501: LD_VAR 0 5
39505: IFFALSE 39574
// begin for i = 1 to result do
39507: LD_ADDR_VAR 0 7
39511: PUSH
39512: DOUBLE
39513: LD_INT 1
39515: DEC
39516: ST_TO_ADDR
39517: LD_VAR 0 6
39521: PUSH
39522: FOR_TO
39523: IFFALSE 39562
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39525: LD_ADDR_VAR 0 9
39529: PUSH
39530: LD_VAR 0 9
39534: PPUSH
39535: LD_VAR 0 7
39539: PPUSH
39540: LD_VAR 0 6
39544: PUSH
39545: LD_VAR 0 7
39549: ARRAY
39550: PUSH
39551: LD_INT 1
39553: ARRAY
39554: PPUSH
39555: CALL_OW 1
39559: ST_TO_ADDR
39560: GO 39522
39562: POP
39563: POP
// result := tmp ;
39564: LD_ADDR_VAR 0 6
39568: PUSH
39569: LD_VAR 0 9
39573: ST_TO_ADDR
// end ; end ;
39574: LD_VAR 0 6
39578: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39579: LD_INT 0
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39587: LD_ADDR_VAR 0 5
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: ST_TO_ADDR
// if not x or not y then
39609: LD_VAR 0 2
39613: NOT
39614: IFTRUE 39623
39616: PUSH
39617: LD_VAR 0 3
39621: NOT
39622: OR
39623: IFFALSE 39627
// exit ;
39625: GO 41283
// if not range then
39627: LD_VAR 0 4
39631: NOT
39632: IFFALSE 39642
// range := 10 ;
39634: LD_ADDR_VAR 0 4
39638: PUSH
39639: LD_INT 10
39641: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39642: LD_ADDR_VAR 0 8
39646: PUSH
39647: LD_INT 81
39649: PUSH
39650: LD_VAR 0 1
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 92
39661: PUSH
39662: LD_VAR 0 2
39666: PUSH
39667: LD_VAR 0 3
39671: PUSH
39672: LD_VAR 0 4
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 3
39685: PUSH
39686: LD_INT 21
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: LIST
39704: PPUSH
39705: CALL_OW 69
39709: ST_TO_ADDR
// if not tmp then
39710: LD_VAR 0 8
39714: NOT
39715: IFFALSE 39719
// exit ;
39717: GO 41283
// for i in tmp do
39719: LD_ADDR_VAR 0 6
39723: PUSH
39724: LD_VAR 0 8
39728: PUSH
39729: FOR_IN
39730: IFFALSE 41258
// begin points := [ 0 , 0 , 0 ] ;
39732: LD_ADDR_VAR 0 9
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: LIST
39750: ST_TO_ADDR
// bpoints := 1 ;
39751: LD_ADDR_VAR 0 10
39755: PUSH
39756: LD_INT 1
39758: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39759: LD_VAR 0 6
39763: PPUSH
39764: CALL_OW 247
39768: PUSH
39769: LD_INT 1
39771: DOUBLE
39772: EQUAL
39773: IFTRUE 39777
39775: GO 40359
39777: POP
// begin if GetClass ( i ) = 1 then
39778: LD_VAR 0 6
39782: PPUSH
39783: CALL_OW 257
39787: PUSH
39788: LD_INT 1
39790: EQUAL
39791: IFFALSE 39812
// points := [ 10 , 5 , 3 ] ;
39793: LD_ADDR_VAR 0 9
39797: PUSH
39798: LD_INT 10
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: LD_INT 3
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: LIST
39811: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39812: LD_VAR 0 6
39816: PPUSH
39817: CALL_OW 257
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: LD_INT 4
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: LIST
39835: IN
39836: IFFALSE 39857
// points := [ 3 , 2 , 1 ] ;
39838: LD_ADDR_VAR 0 9
39842: PUSH
39843: LD_INT 3
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: LIST
39856: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39857: LD_VAR 0 6
39861: PPUSH
39862: CALL_OW 257
39866: PUSH
39867: LD_INT 5
39869: EQUAL
39870: IFFALSE 39891
// points := [ 130 , 5 , 2 ] ;
39872: LD_ADDR_VAR 0 9
39876: PUSH
39877: LD_INT 130
39879: PUSH
39880: LD_INT 5
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: LIST
39890: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39891: LD_VAR 0 6
39895: PPUSH
39896: CALL_OW 257
39900: PUSH
39901: LD_INT 8
39903: EQUAL
39904: IFFALSE 39925
// points := [ 35 , 35 , 30 ] ;
39906: LD_ADDR_VAR 0 9
39910: PUSH
39911: LD_INT 35
39913: PUSH
39914: LD_INT 35
39916: PUSH
39917: LD_INT 30
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: LIST
39924: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39925: LD_VAR 0 6
39929: PPUSH
39930: CALL_OW 257
39934: PUSH
39935: LD_INT 9
39937: EQUAL
39938: IFFALSE 39959
// points := [ 20 , 55 , 40 ] ;
39940: LD_ADDR_VAR 0 9
39944: PUSH
39945: LD_INT 20
39947: PUSH
39948: LD_INT 55
39950: PUSH
39951: LD_INT 40
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39959: LD_VAR 0 6
39963: PPUSH
39964: CALL_OW 257
39968: PUSH
39969: LD_INT 12
39971: PUSH
39972: LD_INT 16
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: IN
39979: IFFALSE 40000
// points := [ 5 , 3 , 2 ] ;
39981: LD_ADDR_VAR 0 9
39985: PUSH
39986: LD_INT 5
39988: PUSH
39989: LD_INT 3
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40000: LD_VAR 0 6
40004: PPUSH
40005: CALL_OW 257
40009: PUSH
40010: LD_INT 17
40012: EQUAL
40013: IFFALSE 40034
// points := [ 100 , 50 , 75 ] ;
40015: LD_ADDR_VAR 0 9
40019: PUSH
40020: LD_INT 100
40022: PUSH
40023: LD_INT 50
40025: PUSH
40026: LD_INT 75
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: LIST
40033: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40034: LD_VAR 0 6
40038: PPUSH
40039: CALL_OW 257
40043: PUSH
40044: LD_INT 15
40046: EQUAL
40047: IFFALSE 40068
// points := [ 10 , 5 , 3 ] ;
40049: LD_ADDR_VAR 0 9
40053: PUSH
40054: LD_INT 10
40056: PUSH
40057: LD_INT 5
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40068: LD_VAR 0 6
40072: PPUSH
40073: CALL_OW 257
40077: PUSH
40078: LD_INT 14
40080: EQUAL
40081: IFFALSE 40102
// points := [ 10 , 0 , 0 ] ;
40083: LD_ADDR_VAR 0 9
40087: PUSH
40088: LD_INT 10
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: LIST
40101: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40102: LD_VAR 0 6
40106: PPUSH
40107: CALL_OW 257
40111: PUSH
40112: LD_INT 11
40114: EQUAL
40115: IFFALSE 40136
// points := [ 30 , 10 , 5 ] ;
40117: LD_ADDR_VAR 0 9
40121: PUSH
40122: LD_INT 30
40124: PUSH
40125: LD_INT 10
40127: PUSH
40128: LD_INT 5
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40136: LD_VAR 0 1
40140: PPUSH
40141: LD_INT 5
40143: PPUSH
40144: CALL_OW 321
40148: PUSH
40149: LD_INT 2
40151: EQUAL
40152: IFFALSE 40169
// bpoints := bpoints * 1.8 ;
40154: LD_ADDR_VAR 0 10
40158: PUSH
40159: LD_VAR 0 10
40163: PUSH
40164: LD_REAL  1.80000000000000E+0000
40167: MUL
40168: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40169: LD_VAR 0 6
40173: PPUSH
40174: CALL_OW 257
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: LD_INT 3
40187: PUSH
40188: LD_INT 4
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: IN
40197: IFFALSE 40217
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: LD_INT 51
40207: PPUSH
40208: CALL_OW 321
40212: PUSH
40213: LD_INT 2
40215: EQUAL
40216: AND
40217: IFFALSE 40234
// bpoints := bpoints * 1.2 ;
40219: LD_ADDR_VAR 0 10
40223: PUSH
40224: LD_VAR 0 10
40228: PUSH
40229: LD_REAL  1.20000000000000E+0000
40232: MUL
40233: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40234: LD_VAR 0 6
40238: PPUSH
40239: CALL_OW 257
40243: PUSH
40244: LD_INT 5
40246: PUSH
40247: LD_INT 7
40249: PUSH
40250: LD_INT 9
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: IN
40258: IFFALSE 40278
40260: PUSH
40261: LD_VAR 0 1
40265: PPUSH
40266: LD_INT 52
40268: PPUSH
40269: CALL_OW 321
40273: PUSH
40274: LD_INT 2
40276: EQUAL
40277: AND
40278: IFFALSE 40295
// bpoints := bpoints * 1.5 ;
40280: LD_ADDR_VAR 0 10
40284: PUSH
40285: LD_VAR 0 10
40289: PUSH
40290: LD_REAL  1.50000000000000E+0000
40293: MUL
40294: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40295: LD_VAR 0 1
40299: PPUSH
40300: LD_INT 66
40302: PPUSH
40303: CALL_OW 321
40307: PUSH
40308: LD_INT 2
40310: EQUAL
40311: IFFALSE 40328
// bpoints := bpoints * 1.1 ;
40313: LD_ADDR_VAR 0 10
40317: PUSH
40318: LD_VAR 0 10
40322: PUSH
40323: LD_REAL  1.10000000000000E+0000
40326: MUL
40327: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40328: LD_ADDR_VAR 0 10
40332: PUSH
40333: LD_VAR 0 10
40337: PUSH
40338: LD_VAR 0 6
40342: PPUSH
40343: LD_INT 1
40345: PPUSH
40346: CALL_OW 259
40350: PUSH
40351: LD_REAL  1.15000000000000E+0000
40354: MUL
40355: MUL
40356: ST_TO_ADDR
// end ; unit_vehicle :
40357: GO 41187
40359: LD_INT 2
40361: DOUBLE
40362: EQUAL
40363: IFTRUE 40367
40365: GO 41175
40367: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40368: LD_VAR 0 6
40372: PPUSH
40373: CALL_OW 264
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: LD_INT 42
40383: PUSH
40384: LD_INT 24
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: LIST
40391: IN
40392: IFFALSE 40413
// points := [ 25 , 5 , 3 ] ;
40394: LD_ADDR_VAR 0 9
40398: PUSH
40399: LD_INT 25
40401: PUSH
40402: LD_INT 5
40404: PUSH
40405: LD_INT 3
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: LIST
40412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40413: LD_VAR 0 6
40417: PPUSH
40418: CALL_OW 264
40422: PUSH
40423: LD_INT 4
40425: PUSH
40426: LD_INT 43
40428: PUSH
40429: LD_INT 25
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: IN
40437: IFFALSE 40458
// points := [ 40 , 15 , 5 ] ;
40439: LD_ADDR_VAR 0 9
40443: PUSH
40444: LD_INT 40
40446: PUSH
40447: LD_INT 15
40449: PUSH
40450: LD_INT 5
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40458: LD_VAR 0 6
40462: PPUSH
40463: CALL_OW 264
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: LD_INT 23
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: IN
40478: IFFALSE 40499
// points := [ 7 , 25 , 8 ] ;
40480: LD_ADDR_VAR 0 9
40484: PUSH
40485: LD_INT 7
40487: PUSH
40488: LD_INT 25
40490: PUSH
40491: LD_INT 8
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: LIST
40498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40499: LD_VAR 0 6
40503: PPUSH
40504: CALL_OW 264
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: LD_INT 27
40514: PUSH
40515: LD_INT 44
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: IN
40523: IFFALSE 40544
// points := [ 14 , 50 , 16 ] ;
40525: LD_ADDR_VAR 0 9
40529: PUSH
40530: LD_INT 14
40532: PUSH
40533: LD_INT 50
40535: PUSH
40536: LD_INT 16
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40544: LD_VAR 0 6
40548: PPUSH
40549: CALL_OW 264
40553: PUSH
40554: LD_INT 6
40556: PUSH
40557: LD_INT 46
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: IN
40564: IFFALSE 40585
// points := [ 32 , 120 , 70 ] ;
40566: LD_ADDR_VAR 0 9
40570: PUSH
40571: LD_INT 32
40573: PUSH
40574: LD_INT 120
40576: PUSH
40577: LD_INT 70
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40585: LD_VAR 0 6
40589: PPUSH
40590: CALL_OW 264
40594: PUSH
40595: LD_INT 7
40597: PUSH
40598: LD_INT 28
40600: PUSH
40601: LD_INT 45
40603: PUSH
40604: LD_INT 92
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: IN
40613: IFFALSE 40634
// points := [ 35 , 20 , 45 ] ;
40615: LD_ADDR_VAR 0 9
40619: PUSH
40620: LD_INT 35
40622: PUSH
40623: LD_INT 20
40625: PUSH
40626: LD_INT 45
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40634: LD_VAR 0 6
40638: PPUSH
40639: CALL_OW 264
40643: PUSH
40644: LD_INT 47
40646: PUSH
40647: EMPTY
40648: LIST
40649: IN
40650: IFFALSE 40671
// points := [ 67 , 45 , 75 ] ;
40652: LD_ADDR_VAR 0 9
40656: PUSH
40657: LD_INT 67
40659: PUSH
40660: LD_INT 45
40662: PUSH
40663: LD_INT 75
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: LIST
40670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40671: LD_VAR 0 6
40675: PPUSH
40676: CALL_OW 264
40680: PUSH
40681: LD_INT 26
40683: PUSH
40684: EMPTY
40685: LIST
40686: IN
40687: IFFALSE 40708
// points := [ 120 , 30 , 80 ] ;
40689: LD_ADDR_VAR 0 9
40693: PUSH
40694: LD_INT 120
40696: PUSH
40697: LD_INT 30
40699: PUSH
40700: LD_INT 80
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40708: LD_VAR 0 6
40712: PPUSH
40713: CALL_OW 264
40717: PUSH
40718: LD_INT 22
40720: PUSH
40721: EMPTY
40722: LIST
40723: IN
40724: IFFALSE 40745
// points := [ 40 , 1 , 1 ] ;
40726: LD_ADDR_VAR 0 9
40730: PUSH
40731: LD_INT 40
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40745: LD_VAR 0 6
40749: PPUSH
40750: CALL_OW 264
40754: PUSH
40755: LD_INT 29
40757: PUSH
40758: EMPTY
40759: LIST
40760: IN
40761: IFFALSE 40782
// points := [ 70 , 200 , 400 ] ;
40763: LD_ADDR_VAR 0 9
40767: PUSH
40768: LD_INT 70
40770: PUSH
40771: LD_INT 200
40773: PUSH
40774: LD_INT 400
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40782: LD_VAR 0 6
40786: PPUSH
40787: CALL_OW 264
40791: PUSH
40792: LD_INT 14
40794: PUSH
40795: LD_INT 53
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: IN
40802: IFFALSE 40823
// points := [ 40 , 10 , 20 ] ;
40804: LD_ADDR_VAR 0 9
40808: PUSH
40809: LD_INT 40
40811: PUSH
40812: LD_INT 10
40814: PUSH
40815: LD_INT 20
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40823: LD_VAR 0 6
40827: PPUSH
40828: CALL_OW 264
40832: PUSH
40833: LD_INT 9
40835: PUSH
40836: EMPTY
40837: LIST
40838: IN
40839: IFFALSE 40860
// points := [ 5 , 70 , 20 ] ;
40841: LD_ADDR_VAR 0 9
40845: PUSH
40846: LD_INT 5
40848: PUSH
40849: LD_INT 70
40851: PUSH
40852: LD_INT 20
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40860: LD_VAR 0 6
40864: PPUSH
40865: CALL_OW 264
40869: PUSH
40870: LD_INT 10
40872: PUSH
40873: EMPTY
40874: LIST
40875: IN
40876: IFFALSE 40897
// points := [ 35 , 110 , 70 ] ;
40878: LD_ADDR_VAR 0 9
40882: PUSH
40883: LD_INT 35
40885: PUSH
40886: LD_INT 110
40888: PUSH
40889: LD_INT 70
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40897: LD_VAR 0 6
40901: PPUSH
40902: CALL_OW 265
40906: PUSH
40907: LD_INT 25
40909: EQUAL
40910: IFFALSE 40931
// points := [ 80 , 65 , 100 ] ;
40912: LD_ADDR_VAR 0 9
40916: PUSH
40917: LD_INT 80
40919: PUSH
40920: LD_INT 65
40922: PUSH
40923: LD_INT 100
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40931: LD_VAR 0 6
40935: PPUSH
40936: CALL_OW 263
40940: PUSH
40941: LD_INT 1
40943: EQUAL
40944: IFFALSE 40979
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40946: LD_ADDR_VAR 0 10
40950: PUSH
40951: LD_VAR 0 10
40955: PUSH
40956: LD_VAR 0 6
40960: PPUSH
40961: CALL_OW 311
40965: PPUSH
40966: LD_INT 3
40968: PPUSH
40969: CALL_OW 259
40973: PUSH
40974: LD_INT 4
40976: MUL
40977: MUL
40978: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40979: LD_VAR 0 6
40983: PPUSH
40984: CALL_OW 263
40988: PUSH
40989: LD_INT 2
40991: EQUAL
40992: IFFALSE 41043
// begin j := IsControledBy ( i ) ;
40994: LD_ADDR_VAR 0 7
40998: PUSH
40999: LD_VAR 0 6
41003: PPUSH
41004: CALL_OW 312
41008: ST_TO_ADDR
// if j then
41009: LD_VAR 0 7
41013: IFFALSE 41043
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41015: LD_ADDR_VAR 0 10
41019: PUSH
41020: LD_VAR 0 10
41024: PUSH
41025: LD_VAR 0 7
41029: PPUSH
41030: LD_INT 3
41032: PPUSH
41033: CALL_OW 259
41037: PUSH
41038: LD_INT 3
41040: MUL
41041: MUL
41042: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41043: LD_VAR 0 6
41047: PPUSH
41048: CALL_OW 264
41052: PUSH
41053: LD_INT 5
41055: PUSH
41056: LD_INT 6
41058: PUSH
41059: LD_INT 46
41061: PUSH
41062: LD_INT 44
41064: PUSH
41065: LD_INT 47
41067: PUSH
41068: LD_INT 45
41070: PUSH
41071: LD_INT 28
41073: PUSH
41074: LD_INT 7
41076: PUSH
41077: LD_INT 27
41079: PUSH
41080: LD_INT 29
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: IN
41095: IFFALSE 41115
41097: PUSH
41098: LD_VAR 0 1
41102: PPUSH
41103: LD_INT 52
41105: PPUSH
41106: CALL_OW 321
41110: PUSH
41111: LD_INT 2
41113: EQUAL
41114: AND
41115: IFFALSE 41132
// bpoints := bpoints * 1.2 ;
41117: LD_ADDR_VAR 0 10
41121: PUSH
41122: LD_VAR 0 10
41126: PUSH
41127: LD_REAL  1.20000000000000E+0000
41130: MUL
41131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41132: LD_VAR 0 6
41136: PPUSH
41137: CALL_OW 264
41141: PUSH
41142: LD_INT 6
41144: PUSH
41145: LD_INT 46
41147: PUSH
41148: LD_INT 47
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: IN
41156: IFFALSE 41173
// bpoints := bpoints * 1.2 ;
41158: LD_ADDR_VAR 0 10
41162: PUSH
41163: LD_VAR 0 10
41167: PUSH
41168: LD_REAL  1.20000000000000E+0000
41171: MUL
41172: ST_TO_ADDR
// end ; unit_building :
41173: GO 41187
41175: LD_INT 3
41177: DOUBLE
41178: EQUAL
41179: IFTRUE 41183
41181: GO 41186
41183: POP
// ; end ;
41184: GO 41187
41186: POP
// for j = 1 to 3 do
41187: LD_ADDR_VAR 0 7
41191: PUSH
41192: DOUBLE
41193: LD_INT 1
41195: DEC
41196: ST_TO_ADDR
41197: LD_INT 3
41199: PUSH
41200: FOR_TO
41201: IFFALSE 41254
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41203: LD_ADDR_VAR 0 5
41207: PUSH
41208: LD_VAR 0 5
41212: PPUSH
41213: LD_VAR 0 7
41217: PPUSH
41218: LD_VAR 0 5
41222: PUSH
41223: LD_VAR 0 7
41227: ARRAY
41228: PUSH
41229: LD_VAR 0 9
41233: PUSH
41234: LD_VAR 0 7
41238: ARRAY
41239: PUSH
41240: LD_VAR 0 10
41244: MUL
41245: PLUS
41246: PPUSH
41247: CALL_OW 1
41251: ST_TO_ADDR
41252: GO 41200
41254: POP
41255: POP
// end ;
41256: GO 39729
41258: POP
41259: POP
// result := Replace ( result , 4 , tmp ) ;
41260: LD_ADDR_VAR 0 5
41264: PUSH
41265: LD_VAR 0 5
41269: PPUSH
41270: LD_INT 4
41272: PPUSH
41273: LD_VAR 0 8
41277: PPUSH
41278: CALL_OW 1
41282: ST_TO_ADDR
// end ;
41283: LD_VAR 0 5
41287: RET
// export function DangerAtRange ( unit , range ) ; begin
41288: LD_INT 0
41290: PPUSH
// if not unit then
41291: LD_VAR 0 1
41295: NOT
41296: IFFALSE 41300
// exit ;
41298: GO 41345
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41300: LD_ADDR_VAR 0 3
41304: PUSH
41305: LD_VAR 0 1
41309: PPUSH
41310: CALL_OW 255
41314: PPUSH
41315: LD_VAR 0 1
41319: PPUSH
41320: CALL_OW 250
41324: PPUSH
41325: LD_VAR 0 1
41329: PPUSH
41330: CALL_OW 251
41334: PPUSH
41335: LD_VAR 0 2
41339: PPUSH
41340: CALL 39579 0 4
41344: ST_TO_ADDR
// end ;
41345: LD_VAR 0 3
41349: RET
// export function DangerInArea ( side , area ) ; begin
41350: LD_INT 0
41352: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41353: LD_ADDR_VAR 0 3
41357: PUSH
41358: LD_VAR 0 2
41362: PPUSH
41363: LD_INT 81
41365: PUSH
41366: LD_VAR 0 1
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PPUSH
41375: CALL_OW 70
41379: ST_TO_ADDR
// end ;
41380: LD_VAR 0 3
41384: RET
// export function IsExtension ( b ) ; begin
41385: LD_INT 0
41387: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41388: LD_ADDR_VAR 0 2
41392: PUSH
41393: LD_VAR 0 1
41397: PUSH
41398: LD_INT 23
41400: PUSH
41401: LD_INT 20
41403: PUSH
41404: LD_INT 22
41406: PUSH
41407: LD_INT 17
41409: PUSH
41410: LD_INT 24
41412: PUSH
41413: LD_INT 21
41415: PUSH
41416: LD_INT 19
41418: PUSH
41419: LD_INT 16
41421: PUSH
41422: LD_INT 25
41424: PUSH
41425: LD_INT 18
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: IN
41440: ST_TO_ADDR
// end ;
41441: LD_VAR 0 2
41445: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
41450: PPUSH
// result := [ ] ;
41451: LD_ADDR_VAR 0 4
41455: PUSH
41456: EMPTY
41457: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41458: LD_ADDR_VAR 0 5
41462: PUSH
41463: LD_VAR 0 2
41467: PPUSH
41468: LD_INT 21
41470: PUSH
41471: LD_INT 3
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PPUSH
41478: CALL_OW 70
41482: ST_TO_ADDR
// if not tmp then
41483: LD_VAR 0 5
41487: NOT
41488: IFFALSE 41492
// exit ;
41490: GO 41556
// if checkLink then
41492: LD_VAR 0 3
41496: IFFALSE 41546
// begin for i in tmp do
41498: LD_ADDR_VAR 0 6
41502: PUSH
41503: LD_VAR 0 5
41507: PUSH
41508: FOR_IN
41509: IFFALSE 41544
// if GetBase ( i ) <> base then
41511: LD_VAR 0 6
41515: PPUSH
41516: CALL_OW 274
41520: PUSH
41521: LD_VAR 0 1
41525: NONEQUAL
41526: IFFALSE 41542
// ComLinkToBase ( base , i ) ;
41528: LD_VAR 0 1
41532: PPUSH
41533: LD_VAR 0 6
41537: PPUSH
41538: CALL_OW 169
41542: GO 41508
41544: POP
41545: POP
// end ; result := tmp ;
41546: LD_ADDR_VAR 0 4
41550: PUSH
41551: LD_VAR 0 5
41555: ST_TO_ADDR
// end ;
41556: LD_VAR 0 4
41560: RET
// export function ComComplete ( units , b ) ; var i ; begin
41561: LD_INT 0
41563: PPUSH
41564: PPUSH
// if not units then
41565: LD_VAR 0 1
41569: NOT
41570: IFFALSE 41574
// exit ;
41572: GO 41664
// for i in units do
41574: LD_ADDR_VAR 0 4
41578: PUSH
41579: LD_VAR 0 1
41583: PUSH
41584: FOR_IN
41585: IFFALSE 41662
// if BuildingStatus ( b ) = bs_build then
41587: LD_VAR 0 2
41591: PPUSH
41592: CALL_OW 461
41596: PUSH
41597: LD_INT 1
41599: EQUAL
41600: IFFALSE 41660
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41602: LD_VAR 0 4
41606: PPUSH
41607: LD_STRING h
41609: PUSH
41610: LD_VAR 0 2
41614: PPUSH
41615: CALL_OW 250
41619: PUSH
41620: LD_VAR 0 2
41624: PPUSH
41625: CALL_OW 251
41629: PUSH
41630: LD_VAR 0 2
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: PUSH
41653: EMPTY
41654: LIST
41655: PPUSH
41656: CALL_OW 446
41660: GO 41584
41662: POP
41663: POP
// end ;
41664: LD_VAR 0 3
41668: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41669: LD_INT 0
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41677: LD_VAR 0 1
41681: NOT
41682: IFTRUE 41699
41684: PUSH
41685: LD_VAR 0 1
41689: PPUSH
41690: CALL_OW 263
41694: PUSH
41695: LD_INT 2
41697: NONEQUAL
41698: OR
41699: IFFALSE 41703
// exit ;
41701: GO 42019
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41703: LD_ADDR_VAR 0 6
41707: PUSH
41708: LD_INT 22
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: CALL_OW 255
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 30
41730: PUSH
41731: LD_INT 36
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 34
41740: PUSH
41741: LD_INT 31
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PPUSH
41757: CALL_OW 69
41761: ST_TO_ADDR
// if not tmp then
41762: LD_VAR 0 6
41766: NOT
41767: IFFALSE 41771
// exit ;
41769: GO 42019
// result := [ ] ;
41771: LD_ADDR_VAR 0 2
41775: PUSH
41776: EMPTY
41777: ST_TO_ADDR
// for i in tmp do
41778: LD_ADDR_VAR 0 3
41782: PUSH
41783: LD_VAR 0 6
41787: PUSH
41788: FOR_IN
41789: IFFALSE 41860
// begin t := UnitsInside ( i ) ;
41791: LD_ADDR_VAR 0 4
41795: PUSH
41796: LD_VAR 0 3
41800: PPUSH
41801: CALL_OW 313
41805: ST_TO_ADDR
// if t then
41806: LD_VAR 0 4
41810: IFFALSE 41858
// for j in t do
41812: LD_ADDR_VAR 0 7
41816: PUSH
41817: LD_VAR 0 4
41821: PUSH
41822: FOR_IN
41823: IFFALSE 41856
// result := Replace ( result , result + 1 , j ) ;
41825: LD_ADDR_VAR 0 2
41829: PUSH
41830: LD_VAR 0 2
41834: PPUSH
41835: LD_VAR 0 2
41839: PUSH
41840: LD_INT 1
41842: PLUS
41843: PPUSH
41844: LD_VAR 0 7
41848: PPUSH
41849: CALL_OW 1
41853: ST_TO_ADDR
41854: GO 41822
41856: POP
41857: POP
// end ;
41858: GO 41788
41860: POP
41861: POP
// if not result then
41862: LD_VAR 0 2
41866: NOT
41867: IFFALSE 41871
// exit ;
41869: GO 42019
// mech := result [ 1 ] ;
41871: LD_ADDR_VAR 0 5
41875: PUSH
41876: LD_VAR 0 2
41880: PUSH
41881: LD_INT 1
41883: ARRAY
41884: ST_TO_ADDR
// if result > 1 then
41885: LD_VAR 0 2
41889: PUSH
41890: LD_INT 1
41892: GREATER
41893: IFFALSE 42005
// begin for i = 2 to result do
41895: LD_ADDR_VAR 0 3
41899: PUSH
41900: DOUBLE
41901: LD_INT 2
41903: DEC
41904: ST_TO_ADDR
41905: LD_VAR 0 2
41909: PUSH
41910: FOR_TO
41911: IFFALSE 42003
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41913: LD_ADDR_VAR 0 4
41917: PUSH
41918: LD_VAR 0 2
41922: PUSH
41923: LD_VAR 0 3
41927: ARRAY
41928: PPUSH
41929: LD_INT 3
41931: PPUSH
41932: CALL_OW 259
41936: PUSH
41937: LD_VAR 0 2
41941: PUSH
41942: LD_VAR 0 3
41946: ARRAY
41947: PPUSH
41948: CALL_OW 432
41952: MINUS
41953: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41954: LD_VAR 0 4
41958: PUSH
41959: LD_VAR 0 5
41963: PPUSH
41964: LD_INT 3
41966: PPUSH
41967: CALL_OW 259
41971: PUSH
41972: LD_VAR 0 5
41976: PPUSH
41977: CALL_OW 432
41981: MINUS
41982: GREATEREQUAL
41983: IFFALSE 42001
// mech := result [ i ] ;
41985: LD_ADDR_VAR 0 5
41989: PUSH
41990: LD_VAR 0 2
41994: PUSH
41995: LD_VAR 0 3
41999: ARRAY
42000: ST_TO_ADDR
// end ;
42001: GO 41910
42003: POP
42004: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42005: LD_VAR 0 1
42009: PPUSH
42010: LD_VAR 0 5
42014: PPUSH
42015: CALL_OW 135
// end ;
42019: LD_VAR 0 2
42023: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42024: LD_INT 0
42026: PPUSH
42027: PPUSH
42028: PPUSH
42029: PPUSH
42030: PPUSH
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
42037: PPUSH
42038: PPUSH
// result := [ ] ;
42039: LD_ADDR_VAR 0 7
42043: PUSH
42044: EMPTY
42045: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42046: LD_VAR 0 1
42050: PPUSH
42051: CALL_OW 266
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: IN
42066: NOT
42067: IFFALSE 42071
// exit ;
42069: GO 43711
// if name then
42071: LD_VAR 0 3
42075: IFFALSE 42091
// SetBName ( base_dep , name ) ;
42077: LD_VAR 0 1
42081: PPUSH
42082: LD_VAR 0 3
42086: PPUSH
42087: CALL_OW 500
// base := GetBase ( base_dep ) ;
42091: LD_ADDR_VAR 0 15
42095: PUSH
42096: LD_VAR 0 1
42100: PPUSH
42101: CALL_OW 274
42105: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42106: LD_ADDR_VAR 0 16
42110: PUSH
42111: LD_VAR 0 1
42115: PPUSH
42116: CALL_OW 255
42120: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42121: LD_ADDR_VAR 0 17
42125: PUSH
42126: LD_VAR 0 1
42130: PPUSH
42131: CALL_OW 248
42135: ST_TO_ADDR
// if sources then
42136: LD_VAR 0 5
42140: IFFALSE 42187
// for i = 1 to 3 do
42142: LD_ADDR_VAR 0 8
42146: PUSH
42147: DOUBLE
42148: LD_INT 1
42150: DEC
42151: ST_TO_ADDR
42152: LD_INT 3
42154: PUSH
42155: FOR_TO
42156: IFFALSE 42185
// AddResourceType ( base , i , sources [ i ] ) ;
42158: LD_VAR 0 15
42162: PPUSH
42163: LD_VAR 0 8
42167: PPUSH
42168: LD_VAR 0 5
42172: PUSH
42173: LD_VAR 0 8
42177: ARRAY
42178: PPUSH
42179: CALL_OW 276
42183: GO 42155
42185: POP
42186: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42187: LD_ADDR_VAR 0 18
42191: PUSH
42192: LD_VAR 0 15
42196: PPUSH
42197: LD_VAR 0 2
42201: PPUSH
42202: LD_INT 1
42204: PPUSH
42205: CALL 41446 0 3
42209: ST_TO_ADDR
// InitHc ;
42210: CALL_OW 19
// InitUc ;
42214: CALL_OW 18
// uc_side := side ;
42218: LD_ADDR_OWVAR 20
42222: PUSH
42223: LD_VAR 0 16
42227: ST_TO_ADDR
// uc_nation := nation ;
42228: LD_ADDR_OWVAR 21
42232: PUSH
42233: LD_VAR 0 17
42237: ST_TO_ADDR
// if buildings then
42238: LD_VAR 0 18
42242: IFFALSE 43570
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42244: LD_ADDR_VAR 0 19
42248: PUSH
42249: LD_VAR 0 18
42253: PPUSH
42254: LD_INT 2
42256: PUSH
42257: LD_INT 30
42259: PUSH
42260: LD_INT 29
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 30
42269: PUSH
42270: LD_INT 30
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: PPUSH
42282: CALL_OW 72
42286: ST_TO_ADDR
// if tmp then
42287: LD_VAR 0 19
42291: IFFALSE 42339
// for i in tmp do
42293: LD_ADDR_VAR 0 8
42297: PUSH
42298: LD_VAR 0 19
42302: PUSH
42303: FOR_IN
42304: IFFALSE 42337
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42306: LD_VAR 0 8
42310: PPUSH
42311: CALL_OW 250
42315: PPUSH
42316: LD_VAR 0 8
42320: PPUSH
42321: CALL_OW 251
42325: PPUSH
42326: LD_VAR 0 16
42330: PPUSH
42331: CALL_OW 441
42335: GO 42303
42337: POP
42338: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42339: LD_VAR 0 18
42343: PPUSH
42344: LD_INT 2
42346: PUSH
42347: LD_INT 30
42349: PUSH
42350: LD_INT 32
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 30
42359: PUSH
42360: LD_INT 33
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: PPUSH
42372: CALL_OW 72
42376: IFFALSE 42464
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42378: LD_ADDR_VAR 0 8
42382: PUSH
42383: LD_VAR 0 18
42387: PPUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 30
42393: PUSH
42394: LD_INT 32
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 30
42403: PUSH
42404: LD_INT 33
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: LIST
42415: PPUSH
42416: CALL_OW 72
42420: PUSH
42421: FOR_IN
42422: IFFALSE 42462
// begin if not GetBWeapon ( i ) then
42424: LD_VAR 0 8
42428: PPUSH
42429: CALL_OW 269
42433: NOT
42434: IFFALSE 42460
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42436: LD_VAR 0 8
42440: PPUSH
42441: LD_VAR 0 8
42445: PPUSH
42446: LD_VAR 0 2
42450: PPUSH
42451: CALL 43716 0 2
42455: PPUSH
42456: CALL_OW 431
// end ;
42460: GO 42421
42462: POP
42463: POP
// end ; for i = 1 to personel do
42464: LD_ADDR_VAR 0 8
42468: PUSH
42469: DOUBLE
42470: LD_INT 1
42472: DEC
42473: ST_TO_ADDR
42474: LD_VAR 0 6
42478: PUSH
42479: FOR_TO
42480: IFFALSE 43550
// begin if i > 4 then
42482: LD_VAR 0 8
42486: PUSH
42487: LD_INT 4
42489: GREATER
42490: IFFALSE 42494
// break ;
42492: GO 43550
// case i of 1 :
42494: LD_VAR 0 8
42498: PUSH
42499: LD_INT 1
42501: DOUBLE
42502: EQUAL
42503: IFTRUE 42507
42505: GO 42587
42507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42508: LD_ADDR_VAR 0 12
42512: PUSH
42513: LD_VAR 0 18
42517: PPUSH
42518: LD_INT 22
42520: PUSH
42521: LD_VAR 0 16
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 58
42532: PUSH
42533: EMPTY
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 30
42541: PUSH
42542: LD_INT 32
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 30
42551: PUSH
42552: LD_INT 4
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 30
42561: PUSH
42562: LD_INT 5
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: PPUSH
42580: CALL_OW 72
42584: ST_TO_ADDR
42585: GO 42809
42587: LD_INT 2
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42595
42593: GO 42657
42595: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42596: LD_ADDR_VAR 0 12
42600: PUSH
42601: LD_VAR 0 18
42605: PPUSH
42606: LD_INT 22
42608: PUSH
42609: LD_VAR 0 16
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 30
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 30
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: LIST
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PPUSH
42650: CALL_OW 72
42654: ST_TO_ADDR
42655: GO 42809
42657: LD_INT 3
42659: DOUBLE
42660: EQUAL
42661: IFTRUE 42665
42663: GO 42727
42665: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42666: LD_ADDR_VAR 0 12
42670: PUSH
42671: LD_VAR 0 18
42675: PPUSH
42676: LD_INT 22
42678: PUSH
42679: LD_VAR 0 16
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 30
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 30
42703: PUSH
42704: LD_INT 3
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PPUSH
42720: CALL_OW 72
42724: ST_TO_ADDR
42725: GO 42809
42727: LD_INT 4
42729: DOUBLE
42730: EQUAL
42731: IFTRUE 42735
42733: GO 42808
42735: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42736: LD_ADDR_VAR 0 12
42740: PUSH
42741: LD_VAR 0 18
42745: PPUSH
42746: LD_INT 22
42748: PUSH
42749: LD_VAR 0 16
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 30
42763: PUSH
42764: LD_INT 6
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 30
42773: PUSH
42774: LD_INT 7
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 30
42783: PUSH
42784: LD_INT 8
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PPUSH
42801: CALL_OW 72
42805: ST_TO_ADDR
42806: GO 42809
42808: POP
// if i = 1 then
42809: LD_VAR 0 8
42813: PUSH
42814: LD_INT 1
42816: EQUAL
42817: IFFALSE 42928
// begin tmp := [ ] ;
42819: LD_ADDR_VAR 0 19
42823: PUSH
42824: EMPTY
42825: ST_TO_ADDR
// for j in f do
42826: LD_ADDR_VAR 0 9
42830: PUSH
42831: LD_VAR 0 12
42835: PUSH
42836: FOR_IN
42837: IFFALSE 42910
// if GetBType ( j ) = b_bunker then
42839: LD_VAR 0 9
42843: PPUSH
42844: CALL_OW 266
42848: PUSH
42849: LD_INT 32
42851: EQUAL
42852: IFFALSE 42879
// tmp := Insert ( tmp , 1 , j ) else
42854: LD_ADDR_VAR 0 19
42858: PUSH
42859: LD_VAR 0 19
42863: PPUSH
42864: LD_INT 1
42866: PPUSH
42867: LD_VAR 0 9
42871: PPUSH
42872: CALL_OW 2
42876: ST_TO_ADDR
42877: GO 42908
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42879: LD_ADDR_VAR 0 19
42883: PUSH
42884: LD_VAR 0 19
42888: PPUSH
42889: LD_VAR 0 19
42893: PUSH
42894: LD_INT 1
42896: PLUS
42897: PPUSH
42898: LD_VAR 0 9
42902: PPUSH
42903: CALL_OW 2
42907: ST_TO_ADDR
42908: GO 42836
42910: POP
42911: POP
// if tmp then
42912: LD_VAR 0 19
42916: IFFALSE 42928
// f := tmp ;
42918: LD_ADDR_VAR 0 12
42922: PUSH
42923: LD_VAR 0 19
42927: ST_TO_ADDR
// end ; x := personel [ i ] ;
42928: LD_ADDR_VAR 0 13
42932: PUSH
42933: LD_VAR 0 6
42937: PUSH
42938: LD_VAR 0 8
42942: ARRAY
42943: ST_TO_ADDR
// if x = - 1 then
42944: LD_VAR 0 13
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: EQUAL
42953: IFFALSE 43164
// begin for j in f do
42955: LD_ADDR_VAR 0 9
42959: PUSH
42960: LD_VAR 0 12
42964: PUSH
42965: FOR_IN
42966: IFFALSE 43160
// repeat InitHc ;
42968: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42972: LD_VAR 0 9
42976: PPUSH
42977: CALL_OW 266
42981: PUSH
42982: LD_INT 5
42984: EQUAL
42985: IFFALSE 43055
// begin if UnitsInside ( j ) < 3 then
42987: LD_VAR 0 9
42991: PPUSH
42992: CALL_OW 313
42996: PUSH
42997: LD_INT 3
42999: LESS
43000: IFFALSE 43036
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43002: LD_INT 0
43004: PPUSH
43005: LD_INT 5
43007: PUSH
43008: LD_INT 8
43010: PUSH
43011: LD_INT 9
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: PUSH
43019: LD_VAR 0 17
43023: ARRAY
43024: PPUSH
43025: LD_VAR 0 4
43029: PPUSH
43030: CALL_OW 380
43034: GO 43053
// PrepareHuman ( false , i , skill ) ;
43036: LD_INT 0
43038: PPUSH
43039: LD_VAR 0 8
43043: PPUSH
43044: LD_VAR 0 4
43048: PPUSH
43049: CALL_OW 380
// end else
43053: GO 43072
// PrepareHuman ( false , i , skill ) ;
43055: LD_INT 0
43057: PPUSH
43058: LD_VAR 0 8
43062: PPUSH
43063: LD_VAR 0 4
43067: PPUSH
43068: CALL_OW 380
// un := CreateHuman ;
43072: LD_ADDR_VAR 0 14
43076: PUSH
43077: CALL_OW 44
43081: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43082: LD_ADDR_VAR 0 7
43086: PUSH
43087: LD_VAR 0 7
43091: PPUSH
43092: LD_INT 1
43094: PPUSH
43095: LD_VAR 0 14
43099: PPUSH
43100: CALL_OW 2
43104: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43105: LD_VAR 0 14
43109: PPUSH
43110: LD_VAR 0 9
43114: PPUSH
43115: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43119: LD_VAR 0 9
43123: PPUSH
43124: CALL_OW 313
43128: PUSH
43129: LD_INT 6
43131: EQUAL
43132: IFTRUE 43156
43134: PUSH
43135: LD_VAR 0 9
43139: PPUSH
43140: CALL_OW 266
43144: PUSH
43145: LD_INT 32
43147: PUSH
43148: LD_INT 31
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: IN
43155: OR
43156: IFFALSE 42968
43158: GO 42965
43160: POP
43161: POP
// end else
43162: GO 43548
// for j = 1 to x do
43164: LD_ADDR_VAR 0 9
43168: PUSH
43169: DOUBLE
43170: LD_INT 1
43172: DEC
43173: ST_TO_ADDR
43174: LD_VAR 0 13
43178: PUSH
43179: FOR_TO
43180: IFFALSE 43546
// begin InitHc ;
43182: CALL_OW 19
// if not f then
43186: LD_VAR 0 12
43190: NOT
43191: IFFALSE 43280
// begin PrepareHuman ( false , i , skill ) ;
43193: LD_INT 0
43195: PPUSH
43196: LD_VAR 0 8
43200: PPUSH
43201: LD_VAR 0 4
43205: PPUSH
43206: CALL_OW 380
// un := CreateHuman ;
43210: LD_ADDR_VAR 0 14
43214: PUSH
43215: CALL_OW 44
43219: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43220: LD_ADDR_VAR 0 7
43224: PUSH
43225: LD_VAR 0 7
43229: PPUSH
43230: LD_INT 1
43232: PPUSH
43233: LD_VAR 0 14
43237: PPUSH
43238: CALL_OW 2
43242: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43243: LD_VAR 0 14
43247: PPUSH
43248: LD_VAR 0 1
43252: PPUSH
43253: CALL_OW 250
43257: PPUSH
43258: LD_VAR 0 1
43262: PPUSH
43263: CALL_OW 251
43267: PPUSH
43268: LD_INT 10
43270: PPUSH
43271: LD_INT 0
43273: PPUSH
43274: CALL_OW 50
// continue ;
43278: GO 43179
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43280: LD_VAR 0 12
43284: PUSH
43285: LD_INT 1
43287: ARRAY
43288: PPUSH
43289: CALL_OW 313
43293: IFFALSE 43321
43295: PUSH
43296: LD_VAR 0 12
43300: PUSH
43301: LD_INT 1
43303: ARRAY
43304: PPUSH
43305: CALL_OW 266
43309: PUSH
43310: LD_INT 32
43312: PUSH
43313: LD_INT 31
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: IN
43320: AND
43321: IFTRUE 43342
43323: PUSH
43324: LD_VAR 0 12
43328: PUSH
43329: LD_INT 1
43331: ARRAY
43332: PPUSH
43333: CALL_OW 313
43337: PUSH
43338: LD_INT 6
43340: EQUAL
43341: OR
43342: IFFALSE 43362
// f := Delete ( f , 1 ) ;
43344: LD_ADDR_VAR 0 12
43348: PUSH
43349: LD_VAR 0 12
43353: PPUSH
43354: LD_INT 1
43356: PPUSH
43357: CALL_OW 3
43361: ST_TO_ADDR
// if not f then
43362: LD_VAR 0 12
43366: NOT
43367: IFFALSE 43385
// begin x := x + 2 ;
43369: LD_ADDR_VAR 0 13
43373: PUSH
43374: LD_VAR 0 13
43378: PUSH
43379: LD_INT 2
43381: PLUS
43382: ST_TO_ADDR
// continue ;
43383: GO 43179
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43385: LD_VAR 0 12
43389: PUSH
43390: LD_INT 1
43392: ARRAY
43393: PPUSH
43394: CALL_OW 266
43398: PUSH
43399: LD_INT 5
43401: EQUAL
43402: IFFALSE 43476
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43404: LD_VAR 0 12
43408: PUSH
43409: LD_INT 1
43411: ARRAY
43412: PPUSH
43413: CALL_OW 313
43417: PUSH
43418: LD_INT 3
43420: LESS
43421: IFFALSE 43457
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43423: LD_INT 0
43425: PPUSH
43426: LD_INT 5
43428: PUSH
43429: LD_INT 8
43431: PUSH
43432: LD_INT 9
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: PUSH
43440: LD_VAR 0 17
43444: ARRAY
43445: PPUSH
43446: LD_VAR 0 4
43450: PPUSH
43451: CALL_OW 380
43455: GO 43474
// PrepareHuman ( false , i , skill ) ;
43457: LD_INT 0
43459: PPUSH
43460: LD_VAR 0 8
43464: PPUSH
43465: LD_VAR 0 4
43469: PPUSH
43470: CALL_OW 380
// end else
43474: GO 43493
// PrepareHuman ( false , i , skill ) ;
43476: LD_INT 0
43478: PPUSH
43479: LD_VAR 0 8
43483: PPUSH
43484: LD_VAR 0 4
43488: PPUSH
43489: CALL_OW 380
// un := CreateHuman ;
43493: LD_ADDR_VAR 0 14
43497: PUSH
43498: CALL_OW 44
43502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43503: LD_ADDR_VAR 0 7
43507: PUSH
43508: LD_VAR 0 7
43512: PPUSH
43513: LD_INT 1
43515: PPUSH
43516: LD_VAR 0 14
43520: PPUSH
43521: CALL_OW 2
43525: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43526: LD_VAR 0 14
43530: PPUSH
43531: LD_VAR 0 12
43535: PUSH
43536: LD_INT 1
43538: ARRAY
43539: PPUSH
43540: CALL_OW 52
// end ;
43544: GO 43179
43546: POP
43547: POP
// end ;
43548: GO 42479
43550: POP
43551: POP
// result := result ^ buildings ;
43552: LD_ADDR_VAR 0 7
43556: PUSH
43557: LD_VAR 0 7
43561: PUSH
43562: LD_VAR 0 18
43566: ADD
43567: ST_TO_ADDR
// end else
43568: GO 43711
// begin for i = 1 to personel do
43570: LD_ADDR_VAR 0 8
43574: PUSH
43575: DOUBLE
43576: LD_INT 1
43578: DEC
43579: ST_TO_ADDR
43580: LD_VAR 0 6
43584: PUSH
43585: FOR_TO
43586: IFFALSE 43709
// begin if i > 4 then
43588: LD_VAR 0 8
43592: PUSH
43593: LD_INT 4
43595: GREATER
43596: IFFALSE 43600
// break ;
43598: GO 43709
// x := personel [ i ] ;
43600: LD_ADDR_VAR 0 13
43604: PUSH
43605: LD_VAR 0 6
43609: PUSH
43610: LD_VAR 0 8
43614: ARRAY
43615: ST_TO_ADDR
// if x = - 1 then
43616: LD_VAR 0 13
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: EQUAL
43625: IFFALSE 43629
// continue ;
43627: GO 43585
// PrepareHuman ( false , i , skill ) ;
43629: LD_INT 0
43631: PPUSH
43632: LD_VAR 0 8
43636: PPUSH
43637: LD_VAR 0 4
43641: PPUSH
43642: CALL_OW 380
// un := CreateHuman ;
43646: LD_ADDR_VAR 0 14
43650: PUSH
43651: CALL_OW 44
43655: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43656: LD_VAR 0 14
43660: PPUSH
43661: LD_VAR 0 1
43665: PPUSH
43666: CALL_OW 250
43670: PPUSH
43671: LD_VAR 0 1
43675: PPUSH
43676: CALL_OW 251
43680: PPUSH
43681: LD_INT 10
43683: PPUSH
43684: LD_INT 0
43686: PPUSH
43687: CALL_OW 50
// result := result ^ un ;
43691: LD_ADDR_VAR 0 7
43695: PUSH
43696: LD_VAR 0 7
43700: PUSH
43701: LD_VAR 0 14
43705: ADD
43706: ST_TO_ADDR
// end ;
43707: GO 43585
43709: POP
43710: POP
// end ; end ;
43711: LD_VAR 0 7
43715: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43716: LD_INT 0
43718: PPUSH
43719: PPUSH
43720: PPUSH
43721: PPUSH
43722: PPUSH
43723: PPUSH
43724: PPUSH
43725: PPUSH
43726: PPUSH
43727: PPUSH
43728: PPUSH
43729: PPUSH
43730: PPUSH
43731: PPUSH
43732: PPUSH
43733: PPUSH
// result := false ;
43734: LD_ADDR_VAR 0 3
43738: PUSH
43739: LD_INT 0
43741: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43742: LD_VAR 0 1
43746: NOT
43747: IFTRUE 43772
43749: PUSH
43750: LD_VAR 0 1
43754: PPUSH
43755: CALL_OW 266
43759: PUSH
43760: LD_INT 32
43762: PUSH
43763: LD_INT 33
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: IN
43770: NOT
43771: OR
43772: IFFALSE 43776
// exit ;
43774: GO 44911
// nat := GetNation ( tower ) ;
43776: LD_ADDR_VAR 0 12
43780: PUSH
43781: LD_VAR 0 1
43785: PPUSH
43786: CALL_OW 248
43790: ST_TO_ADDR
// side := GetSide ( tower ) ;
43791: LD_ADDR_VAR 0 16
43795: PUSH
43796: LD_VAR 0 1
43800: PPUSH
43801: CALL_OW 255
43805: ST_TO_ADDR
// x := GetX ( tower ) ;
43806: LD_ADDR_VAR 0 10
43810: PUSH
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 250
43820: ST_TO_ADDR
// y := GetY ( tower ) ;
43821: LD_ADDR_VAR 0 11
43825: PUSH
43826: LD_VAR 0 1
43830: PPUSH
43831: CALL_OW 251
43835: ST_TO_ADDR
// if not x or not y then
43836: LD_VAR 0 10
43840: NOT
43841: IFTRUE 43850
43843: PUSH
43844: LD_VAR 0 11
43848: NOT
43849: OR
43850: IFFALSE 43854
// exit ;
43852: GO 44911
// weapon := 0 ;
43854: LD_ADDR_VAR 0 18
43858: PUSH
43859: LD_INT 0
43861: ST_TO_ADDR
// fac_list := [ ] ;
43862: LD_ADDR_VAR 0 17
43866: PUSH
43867: EMPTY
43868: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43869: LD_ADDR_VAR 0 6
43873: PUSH
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL_OW 274
43883: PPUSH
43884: LD_VAR 0 2
43888: PPUSH
43889: LD_INT 0
43891: PPUSH
43892: CALL 41446 0 3
43896: PPUSH
43897: LD_INT 30
43899: PUSH
43900: LD_INT 3
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PPUSH
43907: CALL_OW 72
43911: ST_TO_ADDR
// if not factories then
43912: LD_VAR 0 6
43916: NOT
43917: IFFALSE 43921
// exit ;
43919: GO 44911
// for i in factories do
43921: LD_ADDR_VAR 0 8
43925: PUSH
43926: LD_VAR 0 6
43930: PUSH
43931: FOR_IN
43932: IFFALSE 43957
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43934: LD_ADDR_VAR 0 17
43938: PUSH
43939: LD_VAR 0 17
43943: PUSH
43944: LD_VAR 0 8
43948: PPUSH
43949: CALL_OW 478
43953: UNION
43954: ST_TO_ADDR
43955: GO 43931
43957: POP
43958: POP
// if not fac_list then
43959: LD_VAR 0 17
43963: NOT
43964: IFFALSE 43968
// exit ;
43966: GO 44911
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43968: LD_ADDR_VAR 0 5
43972: PUSH
43973: LD_INT 4
43975: PUSH
43976: LD_INT 5
43978: PUSH
43979: LD_INT 9
43981: PUSH
43982: LD_INT 10
43984: PUSH
43985: LD_INT 6
43987: PUSH
43988: LD_INT 7
43990: PUSH
43991: LD_INT 11
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 27
44005: PUSH
44006: LD_INT 28
44008: PUSH
44009: LD_INT 26
44011: PUSH
44012: LD_INT 30
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 43
44023: PUSH
44024: LD_INT 44
44026: PUSH
44027: LD_INT 46
44029: PUSH
44030: LD_INT 45
44032: PUSH
44033: LD_INT 47
44035: PUSH
44036: LD_INT 49
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: PUSH
44052: LD_VAR 0 12
44056: ARRAY
44057: ST_TO_ADDR
// list := list isect fac_list ;
44058: LD_ADDR_VAR 0 5
44062: PUSH
44063: LD_VAR 0 5
44067: PUSH
44068: LD_VAR 0 17
44072: ISECT
44073: ST_TO_ADDR
// if not list then
44074: LD_VAR 0 5
44078: NOT
44079: IFFALSE 44083
// exit ;
44081: GO 44911
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44083: LD_VAR 0 12
44087: PUSH
44088: LD_INT 3
44090: EQUAL
44091: IFFALSE 44103
44093: PUSH
44094: LD_INT 49
44096: PUSH
44097: LD_VAR 0 5
44101: IN
44102: AND
44103: IFFALSE 44123
44105: PUSH
44106: LD_INT 31
44108: PPUSH
44109: LD_VAR 0 16
44113: PPUSH
44114: CALL_OW 321
44118: PUSH
44119: LD_INT 2
44121: EQUAL
44122: AND
44123: IFFALSE 44183
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44125: LD_INT 22
44127: PUSH
44128: LD_VAR 0 16
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 35
44139: PUSH
44140: LD_INT 49
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 91
44149: PUSH
44150: LD_VAR 0 1
44154: PUSH
44155: LD_INT 10
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: LIST
44167: PPUSH
44168: CALL_OW 69
44172: NOT
44173: IFFALSE 44183
// weapon := ru_time_lapser ;
44175: LD_ADDR_VAR 0 18
44179: PUSH
44180: LD_INT 49
44182: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44183: LD_VAR 0 12
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: IN
44198: IFFALSE 44222
44200: PUSH
44201: LD_INT 11
44203: PUSH
44204: LD_VAR 0 5
44208: IN
44209: IFTRUE 44221
44211: PUSH
44212: LD_INT 30
44214: PUSH
44215: LD_VAR 0 5
44219: IN
44220: OR
44221: AND
44222: IFFALSE 44242
44224: PUSH
44225: LD_INT 6
44227: PPUSH
44228: LD_VAR 0 16
44232: PPUSH
44233: CALL_OW 321
44237: PUSH
44238: LD_INT 2
44240: EQUAL
44241: AND
44242: IFFALSE 44409
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44244: LD_INT 22
44246: PUSH
44247: LD_VAR 0 16
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 35
44261: PUSH
44262: LD_INT 11
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 35
44271: PUSH
44272: LD_INT 30
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 91
44286: PUSH
44287: LD_VAR 0 1
44291: PUSH
44292: LD_INT 18
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: LIST
44304: PPUSH
44305: CALL_OW 69
44309: NOT
44310: IFFALSE 44386
44312: PUSH
44313: LD_INT 22
44315: PUSH
44316: LD_VAR 0 16
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: PUSH
44328: LD_INT 30
44330: PUSH
44331: LD_INT 32
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 30
44340: PUSH
44341: LD_INT 33
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 91
44355: PUSH
44356: LD_VAR 0 1
44360: PUSH
44361: LD_INT 12
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: PUSH
44374: EMPTY
44375: LIST
44376: PPUSH
44377: CALL_OW 69
44381: PUSH
44382: LD_INT 2
44384: GREATER
44385: AND
44386: IFFALSE 44409
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44388: LD_ADDR_VAR 0 18
44392: PUSH
44393: LD_INT 11
44395: PUSH
44396: LD_INT 30
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_VAR 0 12
44407: ARRAY
44408: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44409: LD_VAR 0 18
44413: NOT
44414: IFFALSE 44434
44416: PUSH
44417: LD_INT 40
44419: PPUSH
44420: LD_VAR 0 16
44424: PPUSH
44425: CALL_OW 321
44429: PUSH
44430: LD_INT 2
44432: EQUAL
44433: AND
44434: IFFALSE 44470
44436: PUSH
44437: LD_INT 7
44439: PUSH
44440: LD_VAR 0 5
44444: IN
44445: IFTRUE 44457
44447: PUSH
44448: LD_INT 28
44450: PUSH
44451: LD_VAR 0 5
44455: IN
44456: OR
44457: IFTRUE 44469
44459: PUSH
44460: LD_INT 45
44462: PUSH
44463: LD_VAR 0 5
44467: IN
44468: OR
44469: AND
44470: IFFALSE 44724
// begin hex := GetHexInfo ( x , y ) ;
44472: LD_ADDR_VAR 0 4
44476: PUSH
44477: LD_VAR 0 10
44481: PPUSH
44482: LD_VAR 0 11
44486: PPUSH
44487: CALL_OW 546
44491: ST_TO_ADDR
// if hex [ 1 ] then
44492: LD_VAR 0 4
44496: PUSH
44497: LD_INT 1
44499: ARRAY
44500: IFFALSE 44504
// exit ;
44502: GO 44911
// height := hex [ 2 ] ;
44504: LD_ADDR_VAR 0 15
44508: PUSH
44509: LD_VAR 0 4
44513: PUSH
44514: LD_INT 2
44516: ARRAY
44517: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44518: LD_ADDR_VAR 0 14
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: LD_INT 5
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: ST_TO_ADDR
// for i in tmp do
44541: LD_ADDR_VAR 0 8
44545: PUSH
44546: LD_VAR 0 14
44550: PUSH
44551: FOR_IN
44552: IFFALSE 44722
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44554: LD_ADDR_VAR 0 9
44558: PUSH
44559: LD_VAR 0 10
44563: PPUSH
44564: LD_VAR 0 8
44568: PPUSH
44569: LD_INT 5
44571: PPUSH
44572: CALL_OW 272
44576: PUSH
44577: LD_VAR 0 11
44581: PPUSH
44582: LD_VAR 0 8
44586: PPUSH
44587: LD_INT 5
44589: PPUSH
44590: CALL_OW 273
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44599: LD_VAR 0 9
44603: PUSH
44604: LD_INT 1
44606: ARRAY
44607: PPUSH
44608: LD_VAR 0 9
44612: PUSH
44613: LD_INT 2
44615: ARRAY
44616: PPUSH
44617: CALL_OW 488
44621: IFFALSE 44720
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44623: LD_ADDR_VAR 0 4
44627: PUSH
44628: LD_VAR 0 9
44632: PUSH
44633: LD_INT 1
44635: ARRAY
44636: PPUSH
44637: LD_VAR 0 9
44641: PUSH
44642: LD_INT 2
44644: ARRAY
44645: PPUSH
44646: CALL_OW 546
44650: ST_TO_ADDR
// if hex [ 1 ] then
44651: LD_VAR 0 4
44655: PUSH
44656: LD_INT 1
44658: ARRAY
44659: IFFALSE 44663
// continue ;
44661: GO 44551
// h := hex [ 2 ] ;
44663: LD_ADDR_VAR 0 13
44667: PUSH
44668: LD_VAR 0 4
44672: PUSH
44673: LD_INT 2
44675: ARRAY
44676: ST_TO_ADDR
// if h + 7 < height then
44677: LD_VAR 0 13
44681: PUSH
44682: LD_INT 7
44684: PLUS
44685: PUSH
44686: LD_VAR 0 15
44690: LESS
44691: IFFALSE 44720
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44693: LD_ADDR_VAR 0 18
44697: PUSH
44698: LD_INT 7
44700: PUSH
44701: LD_INT 28
44703: PUSH
44704: LD_INT 45
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: LIST
44711: PUSH
44712: LD_VAR 0 12
44716: ARRAY
44717: ST_TO_ADDR
// break ;
44718: GO 44722
// end ; end ; end ;
44720: GO 44551
44722: POP
44723: POP
// end ; if not weapon then
44724: LD_VAR 0 18
44728: NOT
44729: IFFALSE 44789
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44731: LD_ADDR_VAR 0 5
44735: PUSH
44736: LD_VAR 0 5
44740: PUSH
44741: LD_INT 11
44743: PUSH
44744: LD_INT 30
44746: PUSH
44747: LD_INT 49
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: LIST
44754: DIFF
44755: ST_TO_ADDR
// if not list then
44756: LD_VAR 0 5
44760: NOT
44761: IFFALSE 44765
// exit ;
44763: GO 44911
// weapon := list [ rand ( 1 , list ) ] ;
44765: LD_ADDR_VAR 0 18
44769: PUSH
44770: LD_VAR 0 5
44774: PUSH
44775: LD_INT 1
44777: PPUSH
44778: LD_VAR 0 5
44782: PPUSH
44783: CALL_OW 12
44787: ARRAY
44788: ST_TO_ADDR
// end ; if weapon then
44789: LD_VAR 0 18
44793: IFFALSE 44911
// begin tmp := CostOfWeapon ( weapon ) ;
44795: LD_ADDR_VAR 0 14
44799: PUSH
44800: LD_VAR 0 18
44804: PPUSH
44805: CALL_OW 451
44809: ST_TO_ADDR
// j := GetBase ( tower ) ;
44810: LD_ADDR_VAR 0 9
44814: PUSH
44815: LD_VAR 0 1
44819: PPUSH
44820: CALL_OW 274
44824: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44825: LD_VAR 0 9
44829: PPUSH
44830: LD_INT 1
44832: PPUSH
44833: CALL_OW 275
44837: PUSH
44838: LD_VAR 0 14
44842: PUSH
44843: LD_INT 1
44845: ARRAY
44846: GREATEREQUAL
44847: IFFALSE 44873
44849: PUSH
44850: LD_VAR 0 9
44854: PPUSH
44855: LD_INT 2
44857: PPUSH
44858: CALL_OW 275
44862: PUSH
44863: LD_VAR 0 14
44867: PUSH
44868: LD_INT 2
44870: ARRAY
44871: GREATEREQUAL
44872: AND
44873: IFFALSE 44899
44875: PUSH
44876: LD_VAR 0 9
44880: PPUSH
44881: LD_INT 3
44883: PPUSH
44884: CALL_OW 275
44888: PUSH
44889: LD_VAR 0 14
44893: PUSH
44894: LD_INT 3
44896: ARRAY
44897: GREATEREQUAL
44898: AND
44899: IFFALSE 44911
// result := weapon ;
44901: LD_ADDR_VAR 0 3
44905: PUSH
44906: LD_VAR 0 18
44910: ST_TO_ADDR
// end ; end ;
44911: LD_VAR 0 3
44915: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44916: LD_INT 0
44918: PPUSH
44919: PPUSH
// result := true ;
44920: LD_ADDR_VAR 0 3
44924: PUSH
44925: LD_INT 1
44927: ST_TO_ADDR
// if array1 = array2 then
44928: LD_VAR 0 1
44932: PUSH
44933: LD_VAR 0 2
44937: EQUAL
44938: IFFALSE 44998
// begin for i = 1 to array1 do
44940: LD_ADDR_VAR 0 4
44944: PUSH
44945: DOUBLE
44946: LD_INT 1
44948: DEC
44949: ST_TO_ADDR
44950: LD_VAR 0 1
44954: PUSH
44955: FOR_TO
44956: IFFALSE 44994
// if array1 [ i ] <> array2 [ i ] then
44958: LD_VAR 0 1
44962: PUSH
44963: LD_VAR 0 4
44967: ARRAY
44968: PUSH
44969: LD_VAR 0 2
44973: PUSH
44974: LD_VAR 0 4
44978: ARRAY
44979: NONEQUAL
44980: IFFALSE 44992
// begin result := false ;
44982: LD_ADDR_VAR 0 3
44986: PUSH
44987: LD_INT 0
44989: ST_TO_ADDR
// break ;
44990: GO 44994
// end ;
44992: GO 44955
44994: POP
44995: POP
// end else
44996: GO 45006
// result := false ;
44998: LD_ADDR_VAR 0 3
45002: PUSH
45003: LD_INT 0
45005: ST_TO_ADDR
// end ;
45006: LD_VAR 0 3
45010: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45011: LD_INT 0
45013: PPUSH
45014: PPUSH
// if not array1 or not array2 then
45015: LD_VAR 0 1
45019: NOT
45020: IFTRUE 45029
45022: PUSH
45023: LD_VAR 0 2
45027: NOT
45028: OR
45029: IFFALSE 45033
// exit ;
45031: GO 45097
// result := true ;
45033: LD_ADDR_VAR 0 3
45037: PUSH
45038: LD_INT 1
45040: ST_TO_ADDR
// for i = 1 to array1 do
45041: LD_ADDR_VAR 0 4
45045: PUSH
45046: DOUBLE
45047: LD_INT 1
45049: DEC
45050: ST_TO_ADDR
45051: LD_VAR 0 1
45055: PUSH
45056: FOR_TO
45057: IFFALSE 45095
// if array1 [ i ] <> array2 [ i ] then
45059: LD_VAR 0 1
45063: PUSH
45064: LD_VAR 0 4
45068: ARRAY
45069: PUSH
45070: LD_VAR 0 2
45074: PUSH
45075: LD_VAR 0 4
45079: ARRAY
45080: NONEQUAL
45081: IFFALSE 45093
// begin result := false ;
45083: LD_ADDR_VAR 0 3
45087: PUSH
45088: LD_INT 0
45090: ST_TO_ADDR
// break ;
45091: GO 45095
// end ;
45093: GO 45056
45095: POP
45096: POP
// end ;
45097: LD_VAR 0 3
45101: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45102: LD_INT 0
45104: PPUSH
45105: PPUSH
45106: PPUSH
// pom := GetBase ( fac ) ;
45107: LD_ADDR_VAR 0 5
45111: PUSH
45112: LD_VAR 0 1
45116: PPUSH
45117: CALL_OW 274
45121: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45122: LD_ADDR_VAR 0 4
45126: PUSH
45127: LD_VAR 0 2
45131: PUSH
45132: LD_INT 1
45134: ARRAY
45135: PPUSH
45136: LD_VAR 0 2
45140: PUSH
45141: LD_INT 2
45143: ARRAY
45144: PPUSH
45145: LD_VAR 0 2
45149: PUSH
45150: LD_INT 3
45152: ARRAY
45153: PPUSH
45154: LD_VAR 0 2
45158: PUSH
45159: LD_INT 4
45161: ARRAY
45162: PPUSH
45163: CALL_OW 449
45167: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45168: LD_ADDR_VAR 0 3
45172: PUSH
45173: LD_VAR 0 5
45177: PPUSH
45178: LD_INT 1
45180: PPUSH
45181: CALL_OW 275
45185: PUSH
45186: LD_VAR 0 4
45190: PUSH
45191: LD_INT 1
45193: ARRAY
45194: GREATEREQUAL
45195: IFFALSE 45221
45197: PUSH
45198: LD_VAR 0 5
45202: PPUSH
45203: LD_INT 2
45205: PPUSH
45206: CALL_OW 275
45210: PUSH
45211: LD_VAR 0 4
45215: PUSH
45216: LD_INT 2
45218: ARRAY
45219: GREATEREQUAL
45220: AND
45221: IFFALSE 45247
45223: PUSH
45224: LD_VAR 0 5
45228: PPUSH
45229: LD_INT 3
45231: PPUSH
45232: CALL_OW 275
45236: PUSH
45237: LD_VAR 0 4
45241: PUSH
45242: LD_INT 3
45244: ARRAY
45245: GREATEREQUAL
45246: AND
45247: ST_TO_ADDR
// end ;
45248: LD_VAR 0 3
45252: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45253: LD_INT 0
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
// pom := GetBase ( building ) ;
45259: LD_ADDR_VAR 0 3
45263: PUSH
45264: LD_VAR 0 1
45268: PPUSH
45269: CALL_OW 274
45273: ST_TO_ADDR
// if not pom then
45274: LD_VAR 0 3
45278: NOT
45279: IFFALSE 45283
// exit ;
45281: GO 45457
// btype := GetBType ( building ) ;
45283: LD_ADDR_VAR 0 5
45287: PUSH
45288: LD_VAR 0 1
45292: PPUSH
45293: CALL_OW 266
45297: ST_TO_ADDR
// if btype = b_armoury then
45298: LD_VAR 0 5
45302: PUSH
45303: LD_INT 4
45305: EQUAL
45306: IFFALSE 45316
// btype := b_barracks ;
45308: LD_ADDR_VAR 0 5
45312: PUSH
45313: LD_INT 5
45315: ST_TO_ADDR
// if btype = b_depot then
45316: LD_VAR 0 5
45320: PUSH
45321: LD_INT 0
45323: EQUAL
45324: IFFALSE 45334
// btype := b_warehouse ;
45326: LD_ADDR_VAR 0 5
45330: PUSH
45331: LD_INT 1
45333: ST_TO_ADDR
// if btype = b_workshop then
45334: LD_VAR 0 5
45338: PUSH
45339: LD_INT 2
45341: EQUAL
45342: IFFALSE 45352
// btype := b_factory ;
45344: LD_ADDR_VAR 0 5
45348: PUSH
45349: LD_INT 3
45351: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45352: LD_ADDR_VAR 0 4
45356: PUSH
45357: LD_VAR 0 5
45361: PPUSH
45362: LD_VAR 0 1
45366: PPUSH
45367: CALL_OW 248
45371: PPUSH
45372: CALL_OW 450
45376: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45377: LD_ADDR_VAR 0 2
45381: PUSH
45382: LD_VAR 0 3
45386: PPUSH
45387: LD_INT 1
45389: PPUSH
45390: CALL_OW 275
45394: PUSH
45395: LD_VAR 0 4
45399: PUSH
45400: LD_INT 1
45402: ARRAY
45403: GREATEREQUAL
45404: IFFALSE 45430
45406: PUSH
45407: LD_VAR 0 3
45411: PPUSH
45412: LD_INT 2
45414: PPUSH
45415: CALL_OW 275
45419: PUSH
45420: LD_VAR 0 4
45424: PUSH
45425: LD_INT 2
45427: ARRAY
45428: GREATEREQUAL
45429: AND
45430: IFFALSE 45456
45432: PUSH
45433: LD_VAR 0 3
45437: PPUSH
45438: LD_INT 3
45440: PPUSH
45441: CALL_OW 275
45445: PUSH
45446: LD_VAR 0 4
45450: PUSH
45451: LD_INT 3
45453: ARRAY
45454: GREATEREQUAL
45455: AND
45456: ST_TO_ADDR
// end ;
45457: LD_VAR 0 2
45461: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45462: LD_INT 0
45464: PPUSH
45465: PPUSH
45466: PPUSH
// pom := GetBase ( building ) ;
45467: LD_ADDR_VAR 0 4
45471: PUSH
45472: LD_VAR 0 1
45476: PPUSH
45477: CALL_OW 274
45481: ST_TO_ADDR
// if not pom then
45482: LD_VAR 0 4
45486: NOT
45487: IFFALSE 45491
// exit ;
45489: GO 45596
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45491: LD_ADDR_VAR 0 5
45495: PUSH
45496: LD_VAR 0 2
45500: PPUSH
45501: LD_VAR 0 1
45505: PPUSH
45506: CALL_OW 248
45510: PPUSH
45511: CALL_OW 450
45515: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45516: LD_ADDR_VAR 0 3
45520: PUSH
45521: LD_VAR 0 4
45525: PPUSH
45526: LD_INT 1
45528: PPUSH
45529: CALL_OW 275
45533: PUSH
45534: LD_VAR 0 5
45538: PUSH
45539: LD_INT 1
45541: ARRAY
45542: GREATEREQUAL
45543: IFFALSE 45569
45545: PUSH
45546: LD_VAR 0 4
45550: PPUSH
45551: LD_INT 2
45553: PPUSH
45554: CALL_OW 275
45558: PUSH
45559: LD_VAR 0 5
45563: PUSH
45564: LD_INT 2
45566: ARRAY
45567: GREATEREQUAL
45568: AND
45569: IFFALSE 45595
45571: PUSH
45572: LD_VAR 0 4
45576: PPUSH
45577: LD_INT 3
45579: PPUSH
45580: CALL_OW 275
45584: PUSH
45585: LD_VAR 0 5
45589: PUSH
45590: LD_INT 3
45592: ARRAY
45593: GREATEREQUAL
45594: AND
45595: ST_TO_ADDR
// end ;
45596: LD_VAR 0 3
45600: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45601: LD_INT 0
45603: PPUSH
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
45608: PPUSH
45609: PPUSH
45610: PPUSH
45611: PPUSH
45612: PPUSH
45613: PPUSH
// result := false ;
45614: LD_ADDR_VAR 0 8
45618: PUSH
45619: LD_INT 0
45621: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45622: LD_VAR 0 5
45626: NOT
45627: IFTRUE 45636
45629: PUSH
45630: LD_VAR 0 1
45634: NOT
45635: OR
45636: IFTRUE 45645
45638: PUSH
45639: LD_VAR 0 2
45643: NOT
45644: OR
45645: IFTRUE 45654
45647: PUSH
45648: LD_VAR 0 3
45652: NOT
45653: OR
45654: IFFALSE 45658
// exit ;
45656: GO 46484
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45658: LD_ADDR_VAR 0 14
45662: PUSH
45663: LD_VAR 0 1
45667: PPUSH
45668: LD_VAR 0 2
45672: PPUSH
45673: LD_VAR 0 3
45677: PPUSH
45678: LD_VAR 0 4
45682: PPUSH
45683: LD_VAR 0 5
45687: PUSH
45688: LD_INT 1
45690: ARRAY
45691: PPUSH
45692: CALL_OW 248
45696: PPUSH
45697: LD_INT 0
45699: PPUSH
45700: CALL 47765 0 6
45704: ST_TO_ADDR
// if not hexes then
45705: LD_VAR 0 14
45709: NOT
45710: IFFALSE 45714
// exit ;
45712: GO 46484
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45714: LD_ADDR_VAR 0 17
45718: PUSH
45719: LD_VAR 0 5
45723: PPUSH
45724: LD_INT 22
45726: PUSH
45727: LD_VAR 0 13
45731: PPUSH
45732: CALL_OW 255
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 30
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 30
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PPUSH
45773: CALL_OW 72
45777: ST_TO_ADDR
// for i = 1 to hexes do
45778: LD_ADDR_VAR 0 9
45782: PUSH
45783: DOUBLE
45784: LD_INT 1
45786: DEC
45787: ST_TO_ADDR
45788: LD_VAR 0 14
45792: PUSH
45793: FOR_TO
45794: IFFALSE 46482
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45796: LD_ADDR_VAR 0 13
45800: PUSH
45801: LD_VAR 0 14
45805: PUSH
45806: LD_VAR 0 9
45810: ARRAY
45811: PUSH
45812: LD_INT 1
45814: ARRAY
45815: PPUSH
45816: LD_VAR 0 14
45820: PUSH
45821: LD_VAR 0 9
45825: ARRAY
45826: PUSH
45827: LD_INT 2
45829: ARRAY
45830: PPUSH
45831: CALL_OW 428
45835: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45836: LD_VAR 0 14
45840: PUSH
45841: LD_VAR 0 9
45845: ARRAY
45846: PUSH
45847: LD_INT 1
45849: ARRAY
45850: PPUSH
45851: LD_VAR 0 14
45855: PUSH
45856: LD_VAR 0 9
45860: ARRAY
45861: PUSH
45862: LD_INT 2
45864: ARRAY
45865: PPUSH
45866: CALL_OW 351
45870: IFTRUE 45909
45872: PUSH
45873: LD_VAR 0 14
45877: PUSH
45878: LD_VAR 0 9
45882: ARRAY
45883: PUSH
45884: LD_INT 1
45886: ARRAY
45887: PPUSH
45888: LD_VAR 0 14
45892: PUSH
45893: LD_VAR 0 9
45897: ARRAY
45898: PUSH
45899: LD_INT 2
45901: ARRAY
45902: PPUSH
45903: CALL_OW 488
45907: NOT
45908: OR
45909: IFTRUE 45926
45911: PUSH
45912: LD_VAR 0 13
45916: PPUSH
45917: CALL_OW 247
45921: PUSH
45922: LD_INT 3
45924: EQUAL
45925: OR
45926: IFFALSE 45932
// exit ;
45928: POP
45929: POP
45930: GO 46484
// if not tmp then
45932: LD_VAR 0 13
45936: NOT
45937: IFFALSE 45941
// continue ;
45939: GO 45793
// result := true ;
45941: LD_ADDR_VAR 0 8
45945: PUSH
45946: LD_INT 1
45948: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45949: LD_VAR 0 6
45953: IFFALSE 45970
45955: PUSH
45956: LD_VAR 0 13
45960: PPUSH
45961: CALL_OW 247
45965: PUSH
45966: LD_INT 2
45968: EQUAL
45969: AND
45970: IFFALSE 45987
45972: PUSH
45973: LD_VAR 0 13
45977: PPUSH
45978: CALL_OW 263
45982: PUSH
45983: LD_INT 1
45985: EQUAL
45986: AND
45987: IFFALSE 46151
// begin if IsDrivenBy ( tmp ) then
45989: LD_VAR 0 13
45993: PPUSH
45994: CALL_OW 311
45998: IFFALSE 46002
// continue ;
46000: GO 45793
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46002: LD_VAR 0 6
46006: PPUSH
46007: LD_INT 3
46009: PUSH
46010: LD_INT 60
46012: PUSH
46013: EMPTY
46014: LIST
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 3
46022: PUSH
46023: LD_INT 55
46025: PUSH
46026: EMPTY
46027: LIST
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PPUSH
46037: CALL_OW 72
46041: IFFALSE 46149
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46043: LD_ADDR_VAR 0 18
46047: PUSH
46048: LD_VAR 0 6
46052: PPUSH
46053: LD_INT 3
46055: PUSH
46056: LD_INT 60
46058: PUSH
46059: EMPTY
46060: LIST
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: LD_INT 55
46071: PUSH
46072: EMPTY
46073: LIST
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PPUSH
46083: CALL_OW 72
46087: PUSH
46088: LD_INT 1
46090: ARRAY
46091: ST_TO_ADDR
// if IsInUnit ( driver ) then
46092: LD_VAR 0 18
46096: PPUSH
46097: CALL_OW 310
46101: IFFALSE 46112
// ComExit ( driver ) ;
46103: LD_VAR 0 18
46107: PPUSH
46108: CALL 71755 0 1
// AddComEnterUnit ( driver , tmp ) ;
46112: LD_VAR 0 18
46116: PPUSH
46117: LD_VAR 0 13
46121: PPUSH
46122: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46126: LD_VAR 0 18
46130: PPUSH
46131: LD_VAR 0 7
46135: PPUSH
46136: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46140: LD_VAR 0 18
46144: PPUSH
46145: CALL_OW 181
// end ; continue ;
46149: GO 45793
// end ; if not cleaners or not tmp in cleaners then
46151: LD_VAR 0 6
46155: NOT
46156: IFTRUE 46171
46158: PUSH
46159: LD_VAR 0 13
46163: PUSH
46164: LD_VAR 0 6
46168: IN
46169: NOT
46170: OR
46171: IFFALSE 46480
// begin if dep then
46173: LD_VAR 0 17
46177: IFFALSE 46313
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46179: LD_ADDR_VAR 0 16
46183: PUSH
46184: LD_VAR 0 17
46188: PUSH
46189: LD_INT 1
46191: ARRAY
46192: PPUSH
46193: CALL_OW 250
46197: PPUSH
46198: LD_VAR 0 17
46202: PUSH
46203: LD_INT 1
46205: ARRAY
46206: PPUSH
46207: CALL_OW 254
46211: PPUSH
46212: LD_INT 5
46214: PPUSH
46215: CALL_OW 272
46219: PUSH
46220: LD_VAR 0 17
46224: PUSH
46225: LD_INT 1
46227: ARRAY
46228: PPUSH
46229: CALL_OW 251
46233: PPUSH
46234: LD_VAR 0 17
46238: PUSH
46239: LD_INT 1
46241: ARRAY
46242: PPUSH
46243: CALL_OW 254
46247: PPUSH
46248: LD_INT 5
46250: PPUSH
46251: CALL_OW 273
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46260: LD_VAR 0 16
46264: PUSH
46265: LD_INT 1
46267: ARRAY
46268: PPUSH
46269: LD_VAR 0 16
46273: PUSH
46274: LD_INT 2
46276: ARRAY
46277: PPUSH
46278: CALL_OW 488
46282: IFFALSE 46313
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46284: LD_VAR 0 13
46288: PPUSH
46289: LD_VAR 0 16
46293: PUSH
46294: LD_INT 1
46296: ARRAY
46297: PPUSH
46298: LD_VAR 0 16
46302: PUSH
46303: LD_INT 2
46305: ARRAY
46306: PPUSH
46307: CALL_OW 111
// continue ;
46311: GO 45793
// end ; end ; r := GetDir ( tmp ) ;
46313: LD_ADDR_VAR 0 15
46317: PUSH
46318: LD_VAR 0 13
46322: PPUSH
46323: CALL_OW 254
46327: ST_TO_ADDR
// if r = 5 then
46328: LD_VAR 0 15
46332: PUSH
46333: LD_INT 5
46335: EQUAL
46336: IFFALSE 46346
// r := 0 ;
46338: LD_ADDR_VAR 0 15
46342: PUSH
46343: LD_INT 0
46345: ST_TO_ADDR
// for j = r to 5 do
46346: LD_ADDR_VAR 0 10
46350: PUSH
46351: DOUBLE
46352: LD_VAR 0 15
46356: DEC
46357: ST_TO_ADDR
46358: LD_INT 5
46360: PUSH
46361: FOR_TO
46362: IFFALSE 46478
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46364: LD_ADDR_VAR 0 11
46368: PUSH
46369: LD_VAR 0 13
46373: PPUSH
46374: CALL_OW 250
46378: PPUSH
46379: LD_VAR 0 10
46383: PPUSH
46384: LD_INT 2
46386: PPUSH
46387: CALL_OW 272
46391: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46392: LD_ADDR_VAR 0 12
46396: PUSH
46397: LD_VAR 0 13
46401: PPUSH
46402: CALL_OW 251
46406: PPUSH
46407: LD_VAR 0 10
46411: PPUSH
46412: LD_INT 2
46414: PPUSH
46415: CALL_OW 273
46419: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46420: LD_VAR 0 11
46424: PPUSH
46425: LD_VAR 0 12
46429: PPUSH
46430: CALL_OW 488
46434: IFFALSE 46453
46436: PUSH
46437: LD_VAR 0 11
46441: PPUSH
46442: LD_VAR 0 12
46446: PPUSH
46447: CALL_OW 428
46451: NOT
46452: AND
46453: IFFALSE 46476
// begin ComMoveXY ( tmp , _x , _y ) ;
46455: LD_VAR 0 13
46459: PPUSH
46460: LD_VAR 0 11
46464: PPUSH
46465: LD_VAR 0 12
46469: PPUSH
46470: CALL_OW 111
// break ;
46474: GO 46478
// end ; end ;
46476: GO 46361
46478: POP
46479: POP
// end ; end ;
46480: GO 45793
46482: POP
46483: POP
// end ;
46484: LD_VAR 0 8
46488: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46489: LD_INT 0
46491: PPUSH
// result := true ;
46492: LD_ADDR_VAR 0 3
46496: PUSH
46497: LD_INT 1
46499: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46500: LD_VAR 0 2
46504: PUSH
46505: LD_INT 24
46507: DOUBLE
46508: EQUAL
46509: IFTRUE 46519
46511: LD_INT 33
46513: DOUBLE
46514: EQUAL
46515: IFTRUE 46519
46517: GO 46544
46519: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46520: LD_ADDR_VAR 0 3
46524: PUSH
46525: LD_INT 32
46527: PPUSH
46528: LD_VAR 0 1
46532: PPUSH
46533: CALL_OW 321
46537: PUSH
46538: LD_INT 2
46540: EQUAL
46541: ST_TO_ADDR
46542: GO 46860
46544: LD_INT 20
46546: DOUBLE
46547: EQUAL
46548: IFTRUE 46552
46550: GO 46577
46552: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46553: LD_ADDR_VAR 0 3
46557: PUSH
46558: LD_INT 6
46560: PPUSH
46561: LD_VAR 0 1
46565: PPUSH
46566: CALL_OW 321
46570: PUSH
46571: LD_INT 2
46573: EQUAL
46574: ST_TO_ADDR
46575: GO 46860
46577: LD_INT 22
46579: DOUBLE
46580: EQUAL
46581: IFTRUE 46591
46583: LD_INT 36
46585: DOUBLE
46586: EQUAL
46587: IFTRUE 46591
46589: GO 46616
46591: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46592: LD_ADDR_VAR 0 3
46596: PUSH
46597: LD_INT 15
46599: PPUSH
46600: LD_VAR 0 1
46604: PPUSH
46605: CALL_OW 321
46609: PUSH
46610: LD_INT 2
46612: EQUAL
46613: ST_TO_ADDR
46614: GO 46860
46616: LD_INT 30
46618: DOUBLE
46619: EQUAL
46620: IFTRUE 46624
46622: GO 46649
46624: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46625: LD_ADDR_VAR 0 3
46629: PUSH
46630: LD_INT 20
46632: PPUSH
46633: LD_VAR 0 1
46637: PPUSH
46638: CALL_OW 321
46642: PUSH
46643: LD_INT 2
46645: EQUAL
46646: ST_TO_ADDR
46647: GO 46860
46649: LD_INT 28
46651: DOUBLE
46652: EQUAL
46653: IFTRUE 46663
46655: LD_INT 21
46657: DOUBLE
46658: EQUAL
46659: IFTRUE 46663
46661: GO 46688
46663: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46664: LD_ADDR_VAR 0 3
46668: PUSH
46669: LD_INT 21
46671: PPUSH
46672: LD_VAR 0 1
46676: PPUSH
46677: CALL_OW 321
46681: PUSH
46682: LD_INT 2
46684: EQUAL
46685: ST_TO_ADDR
46686: GO 46860
46688: LD_INT 16
46690: DOUBLE
46691: EQUAL
46692: IFTRUE 46696
46694: GO 46721
46696: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46697: LD_ADDR_VAR 0 3
46701: PUSH
46702: LD_INT 84
46704: PPUSH
46705: LD_VAR 0 1
46709: PPUSH
46710: CALL_OW 321
46714: PUSH
46715: LD_INT 2
46717: EQUAL
46718: ST_TO_ADDR
46719: GO 46860
46721: LD_INT 19
46723: DOUBLE
46724: EQUAL
46725: IFTRUE 46735
46727: LD_INT 23
46729: DOUBLE
46730: EQUAL
46731: IFTRUE 46735
46733: GO 46760
46735: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46736: LD_ADDR_VAR 0 3
46740: PUSH
46741: LD_INT 83
46743: PPUSH
46744: LD_VAR 0 1
46748: PPUSH
46749: CALL_OW 321
46753: PUSH
46754: LD_INT 2
46756: EQUAL
46757: ST_TO_ADDR
46758: GO 46860
46760: LD_INT 17
46762: DOUBLE
46763: EQUAL
46764: IFTRUE 46768
46766: GO 46793
46768: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46769: LD_ADDR_VAR 0 3
46773: PUSH
46774: LD_INT 39
46776: PPUSH
46777: LD_VAR 0 1
46781: PPUSH
46782: CALL_OW 321
46786: PUSH
46787: LD_INT 2
46789: EQUAL
46790: ST_TO_ADDR
46791: GO 46860
46793: LD_INT 18
46795: DOUBLE
46796: EQUAL
46797: IFTRUE 46801
46799: GO 46826
46801: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46802: LD_ADDR_VAR 0 3
46806: PUSH
46807: LD_INT 40
46809: PPUSH
46810: LD_VAR 0 1
46814: PPUSH
46815: CALL_OW 321
46819: PUSH
46820: LD_INT 2
46822: EQUAL
46823: ST_TO_ADDR
46824: GO 46860
46826: LD_INT 27
46828: DOUBLE
46829: EQUAL
46830: IFTRUE 46834
46832: GO 46859
46834: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46835: LD_ADDR_VAR 0 3
46839: PUSH
46840: LD_INT 35
46842: PPUSH
46843: LD_VAR 0 1
46847: PPUSH
46848: CALL_OW 321
46852: PUSH
46853: LD_INT 2
46855: EQUAL
46856: ST_TO_ADDR
46857: GO 46860
46859: POP
// end ;
46860: LD_VAR 0 3
46864: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46865: LD_INT 0
46867: PPUSH
46868: PPUSH
46869: PPUSH
46870: PPUSH
46871: PPUSH
46872: PPUSH
46873: PPUSH
46874: PPUSH
46875: PPUSH
46876: PPUSH
46877: PPUSH
// result := false ;
46878: LD_ADDR_VAR 0 6
46882: PUSH
46883: LD_INT 0
46885: ST_TO_ADDR
// if btype = b_depot then
46886: LD_VAR 0 2
46890: PUSH
46891: LD_INT 0
46893: EQUAL
46894: IFFALSE 46906
// begin result := true ;
46896: LD_ADDR_VAR 0 6
46900: PUSH
46901: LD_INT 1
46903: ST_TO_ADDR
// exit ;
46904: GO 47760
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46906: LD_VAR 0 1
46910: NOT
46911: IFTRUE 46936
46913: PUSH
46914: LD_VAR 0 1
46918: PPUSH
46919: CALL_OW 266
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: IN
46934: NOT
46935: OR
46936: IFTRUE 46945
46938: PUSH
46939: LD_VAR 0 2
46943: NOT
46944: OR
46945: IFTRUE 46981
46947: PUSH
46948: LD_VAR 0 5
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 3
46964: PUSH
46965: LD_INT 4
46967: PUSH
46968: LD_INT 5
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: IN
46979: NOT
46980: OR
46981: IFTRUE 47000
46983: PUSH
46984: LD_VAR 0 3
46988: PPUSH
46989: LD_VAR 0 4
46993: PPUSH
46994: CALL_OW 488
46998: NOT
46999: OR
47000: IFFALSE 47004
// exit ;
47002: GO 47760
// side := GetSide ( depot ) ;
47004: LD_ADDR_VAR 0 9
47008: PUSH
47009: LD_VAR 0 1
47013: PPUSH
47014: CALL_OW 255
47018: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47019: LD_VAR 0 9
47023: PPUSH
47024: LD_VAR 0 2
47028: PPUSH
47029: CALL 46489 0 2
47033: NOT
47034: IFFALSE 47038
// exit ;
47036: GO 47760
// pom := GetBase ( depot ) ;
47038: LD_ADDR_VAR 0 10
47042: PUSH
47043: LD_VAR 0 1
47047: PPUSH
47048: CALL_OW 274
47052: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47053: LD_ADDR_VAR 0 11
47057: PUSH
47058: LD_VAR 0 2
47062: PPUSH
47063: LD_VAR 0 1
47067: PPUSH
47068: CALL_OW 248
47072: PPUSH
47073: CALL_OW 450
47077: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47078: LD_VAR 0 10
47082: PPUSH
47083: LD_INT 1
47085: PPUSH
47086: CALL_OW 275
47090: PUSH
47091: LD_VAR 0 11
47095: PUSH
47096: LD_INT 1
47098: ARRAY
47099: GREATEREQUAL
47100: IFFALSE 47126
47102: PUSH
47103: LD_VAR 0 10
47107: PPUSH
47108: LD_INT 2
47110: PPUSH
47111: CALL_OW 275
47115: PUSH
47116: LD_VAR 0 11
47120: PUSH
47121: LD_INT 2
47123: ARRAY
47124: GREATEREQUAL
47125: AND
47126: IFFALSE 47152
47128: PUSH
47129: LD_VAR 0 10
47133: PPUSH
47134: LD_INT 3
47136: PPUSH
47137: CALL_OW 275
47141: PUSH
47142: LD_VAR 0 11
47146: PUSH
47147: LD_INT 3
47149: ARRAY
47150: GREATEREQUAL
47151: AND
47152: NOT
47153: IFFALSE 47157
// exit ;
47155: GO 47760
// if GetBType ( depot ) = b_depot then
47157: LD_VAR 0 1
47161: PPUSH
47162: CALL_OW 266
47166: PUSH
47167: LD_INT 0
47169: EQUAL
47170: IFFALSE 47182
// dist := 28 else
47172: LD_ADDR_VAR 0 14
47176: PUSH
47177: LD_INT 28
47179: ST_TO_ADDR
47180: GO 47190
// dist := 36 ;
47182: LD_ADDR_VAR 0 14
47186: PUSH
47187: LD_INT 36
47189: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47190: LD_VAR 0 1
47194: PPUSH
47195: LD_VAR 0 3
47199: PPUSH
47200: LD_VAR 0 4
47204: PPUSH
47205: CALL_OW 297
47209: PUSH
47210: LD_VAR 0 14
47214: GREATER
47215: IFFALSE 47219
// exit ;
47217: GO 47760
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47219: LD_ADDR_VAR 0 12
47223: PUSH
47224: LD_VAR 0 2
47228: PPUSH
47229: LD_VAR 0 3
47233: PPUSH
47234: LD_VAR 0 4
47238: PPUSH
47239: LD_VAR 0 5
47243: PPUSH
47244: LD_VAR 0 1
47248: PPUSH
47249: CALL_OW 248
47253: PPUSH
47254: LD_INT 0
47256: PPUSH
47257: CALL 47765 0 6
47261: ST_TO_ADDR
// if not hexes then
47262: LD_VAR 0 12
47266: NOT
47267: IFFALSE 47271
// exit ;
47269: GO 47760
// hex := GetHexInfo ( x , y ) ;
47271: LD_ADDR_VAR 0 15
47275: PUSH
47276: LD_VAR 0 3
47280: PPUSH
47281: LD_VAR 0 4
47285: PPUSH
47286: CALL_OW 546
47290: ST_TO_ADDR
// if hex [ 1 ] then
47291: LD_VAR 0 15
47295: PUSH
47296: LD_INT 1
47298: ARRAY
47299: IFFALSE 47303
// exit ;
47301: GO 47760
// height := hex [ 2 ] ;
47303: LD_ADDR_VAR 0 13
47307: PUSH
47308: LD_VAR 0 15
47312: PUSH
47313: LD_INT 2
47315: ARRAY
47316: ST_TO_ADDR
// for i = 1 to hexes do
47317: LD_ADDR_VAR 0 7
47321: PUSH
47322: DOUBLE
47323: LD_INT 1
47325: DEC
47326: ST_TO_ADDR
47327: LD_VAR 0 12
47331: PUSH
47332: FOR_TO
47333: IFFALSE 47677
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47335: LD_VAR 0 12
47339: PUSH
47340: LD_VAR 0 7
47344: ARRAY
47345: PUSH
47346: LD_INT 1
47348: ARRAY
47349: PPUSH
47350: LD_VAR 0 12
47354: PUSH
47355: LD_VAR 0 7
47359: ARRAY
47360: PUSH
47361: LD_INT 2
47363: ARRAY
47364: PPUSH
47365: CALL_OW 488
47369: NOT
47370: IFTRUE 47412
47372: PUSH
47373: LD_VAR 0 12
47377: PUSH
47378: LD_VAR 0 7
47382: ARRAY
47383: PUSH
47384: LD_INT 1
47386: ARRAY
47387: PPUSH
47388: LD_VAR 0 12
47392: PUSH
47393: LD_VAR 0 7
47397: ARRAY
47398: PUSH
47399: LD_INT 2
47401: ARRAY
47402: PPUSH
47403: CALL_OW 428
47407: PUSH
47408: LD_INT 0
47410: GREATER
47411: OR
47412: IFTRUE 47450
47414: PUSH
47415: LD_VAR 0 12
47419: PUSH
47420: LD_VAR 0 7
47424: ARRAY
47425: PUSH
47426: LD_INT 1
47428: ARRAY
47429: PPUSH
47430: LD_VAR 0 12
47434: PUSH
47435: LD_VAR 0 7
47439: ARRAY
47440: PUSH
47441: LD_INT 2
47443: ARRAY
47444: PPUSH
47445: CALL_OW 351
47449: OR
47450: IFFALSE 47456
// exit ;
47452: POP
47453: POP
47454: GO 47760
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47456: LD_ADDR_VAR 0 8
47460: PUSH
47461: LD_VAR 0 12
47465: PUSH
47466: LD_VAR 0 7
47470: ARRAY
47471: PUSH
47472: LD_INT 1
47474: ARRAY
47475: PPUSH
47476: LD_VAR 0 12
47480: PUSH
47481: LD_VAR 0 7
47485: ARRAY
47486: PUSH
47487: LD_INT 2
47489: ARRAY
47490: PPUSH
47491: CALL_OW 546
47495: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47496: LD_VAR 0 8
47500: PUSH
47501: LD_INT 1
47503: ARRAY
47504: IFTRUE 47526
47506: PUSH
47507: LD_VAR 0 8
47511: PUSH
47512: LD_INT 2
47514: ARRAY
47515: PUSH
47516: LD_VAR 0 13
47520: PUSH
47521: LD_INT 2
47523: PLUS
47524: GREATER
47525: OR
47526: IFTRUE 47548
47528: PUSH
47529: LD_VAR 0 8
47533: PUSH
47534: LD_INT 2
47536: ARRAY
47537: PUSH
47538: LD_VAR 0 13
47542: PUSH
47543: LD_INT 2
47545: MINUS
47546: LESS
47547: OR
47548: IFTRUE 47616
47550: PUSH
47551: LD_VAR 0 8
47555: PUSH
47556: LD_INT 3
47558: ARRAY
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 8
47565: PUSH
47566: LD_INT 9
47568: PUSH
47569: LD_INT 10
47571: PUSH
47572: LD_INT 11
47574: PUSH
47575: LD_INT 12
47577: PUSH
47578: LD_INT 13
47580: PUSH
47581: LD_INT 16
47583: PUSH
47584: LD_INT 17
47586: PUSH
47587: LD_INT 18
47589: PUSH
47590: LD_INT 19
47592: PUSH
47593: LD_INT 20
47595: PUSH
47596: LD_INT 21
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: IN
47614: NOT
47615: OR
47616: IFTRUE 47629
47618: PUSH
47619: LD_VAR 0 8
47623: PUSH
47624: LD_INT 5
47626: ARRAY
47627: NOT
47628: OR
47629: IFTRUE 47669
47631: PUSH
47632: LD_VAR 0 8
47636: PUSH
47637: LD_INT 6
47639: ARRAY
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: LD_INT 7
47649: PUSH
47650: LD_INT 9
47652: PUSH
47653: LD_INT 10
47655: PUSH
47656: LD_INT 11
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: IN
47667: NOT
47668: OR
47669: IFFALSE 47675
// exit ;
47671: POP
47672: POP
47673: GO 47760
// end ;
47675: GO 47332
47677: POP
47678: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47679: LD_VAR 0 9
47683: PPUSH
47684: LD_VAR 0 3
47688: PPUSH
47689: LD_VAR 0 4
47693: PPUSH
47694: LD_INT 20
47696: PPUSH
47697: CALL 39579 0 4
47701: PUSH
47702: LD_INT 4
47704: ARRAY
47705: IFFALSE 47709
// exit ;
47707: GO 47760
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47709: LD_VAR 0 2
47713: PUSH
47714: LD_INT 29
47716: PUSH
47717: LD_INT 30
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: IN
47724: IFFALSE 47748
47726: PUSH
47727: LD_VAR 0 3
47731: PPUSH
47732: LD_VAR 0 4
47736: PPUSH
47737: LD_VAR 0 9
47741: PPUSH
47742: CALL_OW 440
47746: NOT
47747: AND
47748: IFFALSE 47752
// exit ;
47750: GO 47760
// result := true ;
47752: LD_ADDR_VAR 0 6
47756: PUSH
47757: LD_INT 1
47759: ST_TO_ADDR
// end ;
47760: LD_VAR 0 6
47764: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47765: LD_INT 0
47767: PPUSH
47768: PPUSH
47769: PPUSH
47770: PPUSH
47771: PPUSH
47772: PPUSH
47773: PPUSH
47774: PPUSH
47775: PPUSH
47776: PPUSH
47777: PPUSH
47778: PPUSH
47779: PPUSH
47780: PPUSH
47781: PPUSH
47782: PPUSH
47783: PPUSH
47784: PPUSH
47785: PPUSH
47786: PPUSH
47787: PPUSH
47788: PPUSH
47789: PPUSH
47790: PPUSH
47791: PPUSH
47792: PPUSH
47793: PPUSH
47794: PPUSH
47795: PPUSH
47796: PPUSH
47797: PPUSH
47798: PPUSH
47799: PPUSH
47800: PPUSH
47801: PPUSH
47802: PPUSH
47803: PPUSH
47804: PPUSH
47805: PPUSH
47806: PPUSH
47807: PPUSH
47808: PPUSH
47809: PPUSH
47810: PPUSH
47811: PPUSH
47812: PPUSH
47813: PPUSH
47814: PPUSH
47815: PPUSH
47816: PPUSH
47817: PPUSH
47818: PPUSH
47819: PPUSH
47820: PPUSH
47821: PPUSH
47822: PPUSH
47823: PPUSH
47824: PPUSH
// result = [ ] ;
47825: LD_ADDR_VAR 0 7
47829: PUSH
47830: EMPTY
47831: ST_TO_ADDR
// temp_list = [ ] ;
47832: LD_ADDR_VAR 0 9
47836: PUSH
47837: EMPTY
47838: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47839: LD_VAR 0 4
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: LD_INT 4
47858: PUSH
47859: LD_INT 5
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: IN
47870: NOT
47871: IFTRUE 47914
47873: PUSH
47874: LD_VAR 0 1
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: IN
47889: IFFALSE 47913
47891: PUSH
47892: LD_VAR 0 5
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 3
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: IN
47911: NOT
47912: AND
47913: OR
47914: IFFALSE 47918
// exit ;
47916: GO 66317
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47918: LD_VAR 0 1
47922: PUSH
47923: LD_INT 6
47925: PUSH
47926: LD_INT 7
47928: PUSH
47929: LD_INT 8
47931: PUSH
47932: LD_INT 13
47934: PUSH
47935: LD_INT 12
47937: PUSH
47938: LD_INT 15
47940: PUSH
47941: LD_INT 11
47943: PUSH
47944: LD_INT 14
47946: PUSH
47947: LD_INT 10
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: IN
47961: IFFALSE 47971
// btype = b_lab ;
47963: LD_ADDR_VAR 0 1
47967: PUSH
47968: LD_INT 6
47970: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47971: LD_VAR 0 6
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: IN
47990: NOT
47991: IFTRUE 48059
47993: PUSH
47994: LD_VAR 0 1
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: LD_INT 6
48013: PUSH
48014: LD_INT 36
48016: PUSH
48017: LD_INT 4
48019: PUSH
48020: LD_INT 5
48022: PUSH
48023: LD_INT 31
48025: PUSH
48026: LD_INT 32
48028: PUSH
48029: LD_INT 33
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: IN
48045: NOT
48046: IFFALSE 48058
48048: PUSH
48049: LD_VAR 0 6
48053: PUSH
48054: LD_INT 1
48056: EQUAL
48057: AND
48058: OR
48059: IFTRUE 48091
48061: PUSH
48062: LD_VAR 0 1
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 3
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: IN
48077: NOT
48078: IFFALSE 48090
48080: PUSH
48081: LD_VAR 0 6
48085: PUSH
48086: LD_INT 2
48088: EQUAL
48089: AND
48090: OR
48091: IFFALSE 48101
// mode = 0 ;
48093: LD_ADDR_VAR 0 6
48097: PUSH
48098: LD_INT 0
48100: ST_TO_ADDR
// case mode of 0 :
48101: LD_VAR 0 6
48105: PUSH
48106: LD_INT 0
48108: DOUBLE
48109: EQUAL
48110: IFTRUE 48114
48112: GO 59567
48114: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48115: LD_ADDR_VAR 0 11
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 3
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48308: LD_ADDR_VAR 0 12
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 3
48465: NEG
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 3
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48504: LD_ADDR_VAR 0 13
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 3
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: NEG
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 3
48675: NEG
48676: PUSH
48677: LD_INT 3
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48703: LD_ADDR_VAR 0 14
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: LD_INT 3
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 3
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48899: LD_ADDR_VAR 0 15
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 3
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49092: LD_ADDR_VAR 0 16
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 3
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: LD_INT 3
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49285: LD_ADDR_VAR 0 17
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49515: LD_ADDR_VAR 0 18
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49745: LD_ADDR_VAR 0 19
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49975: LD_ADDR_VAR 0 20
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50205: LD_ADDR_VAR 0 21
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50435: LD_ADDR_VAR 0 22
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50665: LD_ADDR_VAR 0 23
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50945: LD_ADDR_VAR 0 24
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51221: LD_ADDR_VAR 0 25
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 3
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 3
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: LD_INT 3
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51495: LD_ADDR_VAR 0 26
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51771: LD_ADDR_VAR 0 27
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 2
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52051: LD_ADDR_VAR 0 28
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 3
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: NEG
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52333: LD_ADDR_VAR 0 29
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: LD_INT 3
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 3
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 3
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 3
52577: NEG
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52612: LD_ADDR_VAR 0 30
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 3
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: NEG
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52890: LD_ADDR_VAR 0 31
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: LD_INT 3
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 3
53133: NEG
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53168: LD_ADDR_VAR 0 32
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 3
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 3
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53446: LD_ADDR_VAR 0 33
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 3
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: NEG
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53725: LD_ADDR_VAR 0 34
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: LD_INT 2
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: LD_INT 3
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 3
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54005: LD_ADDR_VAR 0 35
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54117: LD_ADDR_VAR 0 36
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54229: LD_ADDR_VAR 0 37
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54341: LD_ADDR_VAR 0 38
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54453: LD_ADDR_VAR 0 39
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54565: LD_ADDR_VAR 0 40
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54677: LD_ADDR_VAR 0 41
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 3
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 3
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 3
54951: NEG
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55027: LD_ADDR_VAR 0 42
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 3
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55377: LD_ADDR_VAR 0 43
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55725: LD_ADDR_VAR 0 44
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: LD_INT 3
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56075: LD_ADDR_VAR 0 45
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: NEG
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: LD_INT 3
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 3
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: LD_INT 3
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: LD_INT 3
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 3
56384: NEG
56385: PUSH
56386: LD_INT 3
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56425: LD_ADDR_VAR 0 46
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: NEG
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 3
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 3
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56773: LD_ADDR_VAR 0 47
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56924: LD_ADDR_VAR 0 48
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57071: LD_ADDR_VAR 0 49
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57215: LD_ADDR_VAR 0 50
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57359: LD_ADDR_VAR 0 51
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57506: LD_ADDR_VAR 0 52
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57657: LD_ADDR_VAR 0 53
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57887: LD_ADDR_VAR 0 54
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 2
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58117: LD_ADDR_VAR 0 55
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58347: LD_ADDR_VAR 0 56
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58577: LD_ADDR_VAR 0 57
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58807: LD_ADDR_VAR 0 58
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59037: LD_ADDR_VAR 0 59
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59125: LD_ADDR_VAR 0 60
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59213: LD_ADDR_VAR 0 61
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59301: LD_ADDR_VAR 0 62
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59389: LD_ADDR_VAR 0 63
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59477: LD_ADDR_VAR 0 64
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: ST_TO_ADDR
// end ; 1 :
59565: GO 65462
59567: LD_INT 1
59569: DOUBLE
59570: EQUAL
59571: IFTRUE 59575
59573: GO 62198
59575: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59576: LD_ADDR_VAR 0 11
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: LIST
59619: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59620: LD_ADDR_VAR 0 12
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59661: LD_ADDR_VAR 0 13
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 3
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59701: LD_ADDR_VAR 0 14
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 3
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59742: LD_ADDR_VAR 0 15
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59786: LD_ADDR_VAR 0 16
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: LD_INT 3
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: LD_INT 3
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59832: LD_ADDR_VAR 0 17
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59876: LD_ADDR_VAR 0 18
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 3
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59917: LD_ADDR_VAR 0 19
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59957: LD_ADDR_VAR 0 20
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 3
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59998: LD_ADDR_VAR 0 21
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 3
60016: NEG
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 3
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: LIST
60041: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60042: LD_ADDR_VAR 0 22
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 3
60073: NEG
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60088: LD_ADDR_VAR 0 23
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 4
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: LIST
60131: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60132: LD_ADDR_VAR 0 24
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60173: LD_ADDR_VAR 0 25
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 4
60190: PUSH
60191: LD_INT 3
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 4
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60213: LD_ADDR_VAR 0 26
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 4
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60254: LD_ADDR_VAR 0 27
60258: PUSH
60259: LD_INT 3
60261: NEG
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: LIST
60297: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60298: LD_ADDR_VAR 0 28
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: LD_INT 4
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 4
60329: NEG
60330: PUSH
60331: LD_INT 3
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60344: LD_ADDR_VAR 0 29
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 4
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 4
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 5
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 5
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: LD_INT 4
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 6
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 6
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 5
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60499: LD_ADDR_VAR 0 30
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 4
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 4
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 4
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 5
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 5
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 5
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 6
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 6
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60642: LD_ADDR_VAR 0 31
60646: PUSH
60647: LD_INT 3
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: LD_INT 3
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 4
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 4
60689: PUSH
60690: LD_INT 4
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: LD_INT 4
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 5
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 5
60719: PUSH
60720: LD_INT 5
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 4
60729: PUSH
60730: LD_INT 5
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 6
60739: PUSH
60740: LD_INT 5
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 6
60749: PUSH
60750: LD_INT 6
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 5
60759: PUSH
60760: LD_INT 6
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60781: LD_ADDR_VAR 0 32
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 3
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 4
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 4
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: LD_INT 3
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 5
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 5
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: LD_INT 4
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 6
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 6
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 5
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60924: LD_ADDR_VAR 0 33
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 4
60976: NEG
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 4
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 4
60999: NEG
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 5
61010: NEG
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 5
61021: NEG
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 5
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 6
61044: NEG
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 6
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61079: LD_ADDR_VAR 0 34
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 3
61098: NEG
61099: PUSH
61100: LD_INT 2
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: LD_INT 3
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 3
61122: NEG
61123: PUSH
61124: LD_INT 4
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 4
61134: NEG
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 4
61146: NEG
61147: PUSH
61148: LD_INT 4
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 4
61158: NEG
61159: PUSH
61160: LD_INT 5
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 5
61170: NEG
61171: PUSH
61172: LD_INT 4
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 5
61182: NEG
61183: PUSH
61184: LD_INT 5
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 5
61194: NEG
61195: PUSH
61196: LD_INT 6
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 6
61206: NEG
61207: PUSH
61208: LD_INT 5
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 6
61218: NEG
61219: PUSH
61220: LD_INT 6
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61242: LD_ADDR_VAR 0 41
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: LIST
61285: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61286: LD_ADDR_VAR 0 42
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 3
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: LIST
61326: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61327: LD_ADDR_VAR 0 43
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 2
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61367: LD_ADDR_VAR 0 44
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61408: LD_ADDR_VAR 0 45
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: NEG
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: LIST
61451: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61452: LD_ADDR_VAR 0 46
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 2
61471: NEG
61472: PUSH
61473: LD_INT 3
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 3
61483: NEG
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: LIST
61497: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61498: LD_ADDR_VAR 0 47
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61531: LD_ADDR_VAR 0 48
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 2
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61562: LD_ADDR_VAR 0 49
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61591: LD_ADDR_VAR 0 50
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61620: LD_ADDR_VAR 0 51
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61651: LD_ADDR_VAR 0 52
61655: PUSH
61656: LD_INT 3
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 3
61670: NEG
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61684: LD_ADDR_VAR 0 53
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 3
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61728: LD_ADDR_VAR 0 54
61732: PUSH
61733: LD_INT 2
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61769: LD_ADDR_VAR 0 55
61773: PUSH
61774: LD_INT 3
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 3
61786: PUSH
61787: LD_INT 3
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: LD_INT 3
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: LIST
61808: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61809: LD_ADDR_VAR 0 56
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: LD_INT 3
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 3
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: LIST
61849: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61850: LD_ADDR_VAR 0 57
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 3
61868: NEG
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: LIST
61893: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61894: LD_ADDR_VAR 0 58
61898: PUSH
61899: LD_INT 2
61901: NEG
61902: PUSH
61903: LD_INT 3
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 3
61925: NEG
61926: PUSH
61927: LD_INT 3
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: LIST
61939: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61940: LD_ADDR_VAR 0 59
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 2
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61984: LD_ADDR_VAR 0 60
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 2
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62025: LD_ADDR_VAR 0 61
62029: PUSH
62030: LD_INT 2
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: LIST
62064: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62065: LD_ADDR_VAR 0 62
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 2
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: LIST
62105: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62106: LD_ADDR_VAR 0 63
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62150: LD_ADDR_VAR 0 64
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: LD_INT 2
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: ST_TO_ADDR
// end ; 2 :
62196: GO 65462
62198: LD_INT 2
62200: DOUBLE
62201: EQUAL
62202: IFTRUE 62206
62204: GO 65461
62206: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62207: LD_ADDR_VAR 0 29
62211: PUSH
62212: LD_INT 4
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 4
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 5
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 5
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 4
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 3
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 5
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 3
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 4
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 4
62337: PUSH
62338: LD_INT 4
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 3
62347: PUSH
62348: LD_INT 4
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: LD_INT 3
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 4
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 2
62387: PUSH
62388: LD_INT 4
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 4
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 4
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: LD_INT 5
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 5
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 4
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: PUSH
62470: LD_INT 5
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: NEG
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 3
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 2
62513: NEG
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: NEG
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 3
62535: NEG
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 4
62546: NEG
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 4
62557: NEG
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 4
62569: NEG
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 2
62581: NEG
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 4
62592: NEG
62593: PUSH
62594: LD_INT 4
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 4
62604: NEG
62605: PUSH
62606: LD_INT 5
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 3
62616: NEG
62617: PUSH
62618: LD_INT 4
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 3
62628: NEG
62629: PUSH
62630: LD_INT 3
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 4
62640: NEG
62641: PUSH
62642: LD_INT 3
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 5
62652: NEG
62653: PUSH
62654: LD_INT 4
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 5
62664: NEG
62665: PUSH
62666: LD_INT 5
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 3
62676: NEG
62677: PUSH
62678: LD_INT 5
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 5
62688: NEG
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62745: LD_ADDR_VAR 0 30
62749: PUSH
62750: LD_INT 4
62752: PUSH
62753: LD_INT 4
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 4
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 5
62772: PUSH
62773: LD_INT 4
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 5
62782: PUSH
62783: LD_INT 5
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 4
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 3
62802: PUSH
62803: LD_INT 4
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: LD_INT 3
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 5
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: PUSH
62833: LD_INT 5
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 3
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: LD_INT 4
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 4
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 3
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: LD_INT 2
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: LD_INT 4
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: LD_INT 2
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 4
62935: NEG
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 4
62946: NEG
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 3
62958: NEG
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 3
62969: NEG
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 4
62980: NEG
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 5
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 5
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 5
63014: NEG
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 3
63026: NEG
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 3
63037: NEG
63038: PUSH
63039: LD_INT 3
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 3
63049: NEG
63050: PUSH
63051: LD_INT 4
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: LD_INT 3
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: LD_INT 2
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 3
63085: NEG
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 4
63097: NEG
63098: PUSH
63099: LD_INT 3
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 4
63109: NEG
63110: PUSH
63111: LD_INT 4
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: LD_INT 4
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 4
63133: NEG
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: LD_INT 4
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: LD_INT 5
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 4
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: PUSH
63179: LD_INT 3
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: LD_INT 4
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: LD_INT 5
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: PUSH
63225: LD_INT 3
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 2
63235: NEG
63236: PUSH
63237: LD_INT 5
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63292: LD_ADDR_VAR 0 31
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: LD_INT 4
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 3
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: LD_INT 4
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: LD_INT 5
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: LD_INT 5
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: LD_INT 4
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: LD_INT 3
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 2
63371: PUSH
63372: LD_INT 5
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: LD_INT 3
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 3
63392: NEG
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 3
63403: NEG
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 2
63415: NEG
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: NEG
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 3
63437: NEG
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 4
63448: NEG
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 4
63459: NEG
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 4
63471: NEG
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: NEG
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 4
63494: NEG
63495: PUSH
63496: LD_INT 4
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 4
63506: NEG
63507: PUSH
63508: LD_INT 5
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: NEG
63519: PUSH
63520: LD_INT 4
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 3
63530: NEG
63531: PUSH
63532: LD_INT 3
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 4
63542: NEG
63543: PUSH
63544: LD_INT 3
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 5
63554: NEG
63555: PUSH
63556: LD_INT 4
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 5
63566: NEG
63567: PUSH
63568: LD_INT 5
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 3
63578: NEG
63579: PUSH
63580: LD_INT 5
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 5
63590: NEG
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: LD_INT 3
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 4
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: LD_INT 2
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 3
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: LD_INT 4
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 2
63692: NEG
63693: PUSH
63694: LD_INT 4
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 4
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 4
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 5
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 5
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 4
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 3
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 3
63776: PUSH
63777: LD_INT 2
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 5
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63842: LD_ADDR_VAR 0 32
63846: PUSH
63847: LD_INT 4
63849: NEG
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 4
63860: NEG
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 3
63872: NEG
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 3
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 4
63894: NEG
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 5
63905: NEG
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 5
63916: NEG
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 5
63928: NEG
63929: PUSH
63930: LD_INT 2
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 3
63951: NEG
63952: PUSH
63953: LD_INT 3
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 3
63963: NEG
63964: PUSH
63965: LD_INT 4
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: LD_INT 3
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 2
63987: NEG
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 3
63999: NEG
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 4
64011: NEG
64012: PUSH
64013: LD_INT 3
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 4
64023: NEG
64024: PUSH
64025: LD_INT 4
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 2
64035: NEG
64036: PUSH
64037: LD_INT 4
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 4
64047: NEG
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 4
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: LD_INT 5
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: LD_INT 4
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 3
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: LD_INT 3
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: LD_INT 4
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: LD_INT 5
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: LD_INT 3
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 5
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 3
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 3
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 4
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 4
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 3
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 4
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 4
64254: PUSH
64255: LD_INT 4
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 4
64264: PUSH
64265: LD_INT 3
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 5
64274: PUSH
64275: LD_INT 4
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 5
64284: PUSH
64285: LD_INT 5
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 4
64294: PUSH
64295: LD_INT 5
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 3
64304: PUSH
64305: LD_INT 4
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 3
64314: PUSH
64315: LD_INT 3
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 5
64324: PUSH
64325: LD_INT 3
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 3
64334: PUSH
64335: LD_INT 5
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64389: LD_ADDR_VAR 0 33
64393: PUSH
64394: LD_INT 4
64396: NEG
64397: PUSH
64398: LD_INT 4
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 4
64408: NEG
64409: PUSH
64410: LD_INT 5
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 3
64420: NEG
64421: PUSH
64422: LD_INT 4
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 3
64432: NEG
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 4
64444: NEG
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 5
64456: NEG
64457: PUSH
64458: LD_INT 4
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 5
64468: NEG
64469: PUSH
64470: LD_INT 5
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 3
64480: NEG
64481: PUSH
64482: LD_INT 5
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 5
64492: NEG
64493: PUSH
64494: LD_INT 3
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: LD_INT 3
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: LD_INT 4
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: LD_INT 3
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: LD_INT 2
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: LD_INT 3
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: LD_INT 4
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 2
64583: PUSH
64584: LD_INT 2
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: LD_INT 4
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 4
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 4
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 5
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 5
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 4
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 3
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 3
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: PUSH
64679: LD_INT 2
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 5
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: LD_INT 3
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 3
64709: PUSH
64710: LD_INT 2
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 4
64719: PUSH
64720: LD_INT 3
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 4
64729: PUSH
64730: LD_INT 4
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 3
64739: PUSH
64740: LD_INT 4
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 2
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 2
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 4
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 2
64779: PUSH
64780: LD_INT 4
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: LD_INT 4
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: LD_INT 3
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: LD_INT 4
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: LD_INT 5
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 5
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 1
64839: NEG
64840: PUSH
64841: LD_INT 4
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: PUSH
64852: LD_INT 3
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 5
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 2
64871: NEG
64872: PUSH
64873: LD_INT 3
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64927: LD_ADDR_VAR 0 34
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 4
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 5
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: LD_INT 4
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: LD_INT 3
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: LD_INT 3
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: LD_INT 4
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: LD_INT 5
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: LD_INT 3
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 2
65024: NEG
65025: PUSH
65026: LD_INT 5
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 3
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 4
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 4
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 2
65108: PUSH
65109: LD_INT 2
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 4
65119: PUSH
65120: LD_INT 2
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 4
65129: PUSH
65130: LD_INT 4
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 4
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 5
65149: PUSH
65150: LD_INT 4
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 5
65159: PUSH
65160: LD_INT 5
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 4
65169: PUSH
65170: LD_INT 5
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 3
65179: PUSH
65180: LD_INT 4
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 3
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 5
65199: PUSH
65200: LD_INT 3
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 3
65209: PUSH
65210: LD_INT 5
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: LD_INT 3
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: LD_INT 2
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: LD_INT 3
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 4
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 0
65259: PUSH
65260: LD_INT 4
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 1
65269: NEG
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: LD_INT 2
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: LD_INT 4
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 2
65301: NEG
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 4
65312: NEG
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 4
65323: NEG
65324: PUSH
65325: LD_INT 1
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 3
65335: NEG
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 3
65346: NEG
65347: PUSH
65348: LD_INT 1
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 4
65357: NEG
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 5
65368: NEG
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 5
65379: NEG
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 5
65391: NEG
65392: PUSH
65393: LD_INT 2
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// end ; end ;
65459: GO 65462
65461: POP
// case btype of b_depot , b_warehouse :
65462: LD_VAR 0 1
65466: PUSH
65467: LD_INT 0
65469: DOUBLE
65470: EQUAL
65471: IFTRUE 65481
65473: LD_INT 1
65475: DOUBLE
65476: EQUAL
65477: IFTRUE 65481
65479: GO 65682
65481: POP
// case nation of nation_american :
65482: LD_VAR 0 5
65486: PUSH
65487: LD_INT 1
65489: DOUBLE
65490: EQUAL
65491: IFTRUE 65495
65493: GO 65551
65495: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65496: LD_ADDR_VAR 0 9
65500: PUSH
65501: LD_VAR 0 11
65505: PUSH
65506: LD_VAR 0 12
65510: PUSH
65511: LD_VAR 0 13
65515: PUSH
65516: LD_VAR 0 14
65520: PUSH
65521: LD_VAR 0 15
65525: PUSH
65526: LD_VAR 0 16
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: PUSH
65539: LD_VAR 0 4
65543: PUSH
65544: LD_INT 1
65546: PLUS
65547: ARRAY
65548: ST_TO_ADDR
65549: GO 65680
65551: LD_INT 2
65553: DOUBLE
65554: EQUAL
65555: IFTRUE 65559
65557: GO 65615
65559: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65560: LD_ADDR_VAR 0 9
65564: PUSH
65565: LD_VAR 0 17
65569: PUSH
65570: LD_VAR 0 18
65574: PUSH
65575: LD_VAR 0 19
65579: PUSH
65580: LD_VAR 0 20
65584: PUSH
65585: LD_VAR 0 21
65589: PUSH
65590: LD_VAR 0 22
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: PUSH
65603: LD_VAR 0 4
65607: PUSH
65608: LD_INT 1
65610: PLUS
65611: ARRAY
65612: ST_TO_ADDR
65613: GO 65680
65615: LD_INT 3
65617: DOUBLE
65618: EQUAL
65619: IFTRUE 65623
65621: GO 65679
65623: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65624: LD_ADDR_VAR 0 9
65628: PUSH
65629: LD_VAR 0 23
65633: PUSH
65634: LD_VAR 0 24
65638: PUSH
65639: LD_VAR 0 25
65643: PUSH
65644: LD_VAR 0 26
65648: PUSH
65649: LD_VAR 0 27
65653: PUSH
65654: LD_VAR 0 28
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: PUSH
65667: LD_VAR 0 4
65671: PUSH
65672: LD_INT 1
65674: PLUS
65675: ARRAY
65676: ST_TO_ADDR
65677: GO 65680
65679: POP
65680: GO 66235
65682: LD_INT 2
65684: DOUBLE
65685: EQUAL
65686: IFTRUE 65696
65688: LD_INT 3
65690: DOUBLE
65691: EQUAL
65692: IFTRUE 65696
65694: GO 65752
65696: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65697: LD_ADDR_VAR 0 9
65701: PUSH
65702: LD_VAR 0 29
65706: PUSH
65707: LD_VAR 0 30
65711: PUSH
65712: LD_VAR 0 31
65716: PUSH
65717: LD_VAR 0 32
65721: PUSH
65722: LD_VAR 0 33
65726: PUSH
65727: LD_VAR 0 34
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: PUSH
65740: LD_VAR 0 4
65744: PUSH
65745: LD_INT 1
65747: PLUS
65748: ARRAY
65749: ST_TO_ADDR
65750: GO 66235
65752: LD_INT 16
65754: DOUBLE
65755: EQUAL
65756: IFTRUE 65814
65758: LD_INT 17
65760: DOUBLE
65761: EQUAL
65762: IFTRUE 65814
65764: LD_INT 18
65766: DOUBLE
65767: EQUAL
65768: IFTRUE 65814
65770: LD_INT 19
65772: DOUBLE
65773: EQUAL
65774: IFTRUE 65814
65776: LD_INT 22
65778: DOUBLE
65779: EQUAL
65780: IFTRUE 65814
65782: LD_INT 20
65784: DOUBLE
65785: EQUAL
65786: IFTRUE 65814
65788: LD_INT 21
65790: DOUBLE
65791: EQUAL
65792: IFTRUE 65814
65794: LD_INT 23
65796: DOUBLE
65797: EQUAL
65798: IFTRUE 65814
65800: LD_INT 24
65802: DOUBLE
65803: EQUAL
65804: IFTRUE 65814
65806: LD_INT 25
65808: DOUBLE
65809: EQUAL
65810: IFTRUE 65814
65812: GO 65870
65814: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65815: LD_ADDR_VAR 0 9
65819: PUSH
65820: LD_VAR 0 35
65824: PUSH
65825: LD_VAR 0 36
65829: PUSH
65830: LD_VAR 0 37
65834: PUSH
65835: LD_VAR 0 38
65839: PUSH
65840: LD_VAR 0 39
65844: PUSH
65845: LD_VAR 0 40
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: PUSH
65858: LD_VAR 0 4
65862: PUSH
65863: LD_INT 1
65865: PLUS
65866: ARRAY
65867: ST_TO_ADDR
65868: GO 66235
65870: LD_INT 6
65872: DOUBLE
65873: EQUAL
65874: IFTRUE 65926
65876: LD_INT 7
65878: DOUBLE
65879: EQUAL
65880: IFTRUE 65926
65882: LD_INT 8
65884: DOUBLE
65885: EQUAL
65886: IFTRUE 65926
65888: LD_INT 13
65890: DOUBLE
65891: EQUAL
65892: IFTRUE 65926
65894: LD_INT 12
65896: DOUBLE
65897: EQUAL
65898: IFTRUE 65926
65900: LD_INT 15
65902: DOUBLE
65903: EQUAL
65904: IFTRUE 65926
65906: LD_INT 11
65908: DOUBLE
65909: EQUAL
65910: IFTRUE 65926
65912: LD_INT 14
65914: DOUBLE
65915: EQUAL
65916: IFTRUE 65926
65918: LD_INT 10
65920: DOUBLE
65921: EQUAL
65922: IFTRUE 65926
65924: GO 65982
65926: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65927: LD_ADDR_VAR 0 9
65931: PUSH
65932: LD_VAR 0 41
65936: PUSH
65937: LD_VAR 0 42
65941: PUSH
65942: LD_VAR 0 43
65946: PUSH
65947: LD_VAR 0 44
65951: PUSH
65952: LD_VAR 0 45
65956: PUSH
65957: LD_VAR 0 46
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: PUSH
65970: LD_VAR 0 4
65974: PUSH
65975: LD_INT 1
65977: PLUS
65978: ARRAY
65979: ST_TO_ADDR
65980: GO 66235
65982: LD_INT 36
65984: DOUBLE
65985: EQUAL
65986: IFTRUE 65990
65988: GO 66046
65990: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65991: LD_ADDR_VAR 0 9
65995: PUSH
65996: LD_VAR 0 47
66000: PUSH
66001: LD_VAR 0 48
66005: PUSH
66006: LD_VAR 0 49
66010: PUSH
66011: LD_VAR 0 50
66015: PUSH
66016: LD_VAR 0 51
66020: PUSH
66021: LD_VAR 0 52
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: PUSH
66034: LD_VAR 0 4
66038: PUSH
66039: LD_INT 1
66041: PLUS
66042: ARRAY
66043: ST_TO_ADDR
66044: GO 66235
66046: LD_INT 4
66048: DOUBLE
66049: EQUAL
66050: IFTRUE 66072
66052: LD_INT 5
66054: DOUBLE
66055: EQUAL
66056: IFTRUE 66072
66058: LD_INT 34
66060: DOUBLE
66061: EQUAL
66062: IFTRUE 66072
66064: LD_INT 37
66066: DOUBLE
66067: EQUAL
66068: IFTRUE 66072
66070: GO 66128
66072: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66073: LD_ADDR_VAR 0 9
66077: PUSH
66078: LD_VAR 0 53
66082: PUSH
66083: LD_VAR 0 54
66087: PUSH
66088: LD_VAR 0 55
66092: PUSH
66093: LD_VAR 0 56
66097: PUSH
66098: LD_VAR 0 57
66102: PUSH
66103: LD_VAR 0 58
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: PUSH
66116: LD_VAR 0 4
66120: PUSH
66121: LD_INT 1
66123: PLUS
66124: ARRAY
66125: ST_TO_ADDR
66126: GO 66235
66128: LD_INT 31
66130: DOUBLE
66131: EQUAL
66132: IFTRUE 66178
66134: LD_INT 32
66136: DOUBLE
66137: EQUAL
66138: IFTRUE 66178
66140: LD_INT 33
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66178
66146: LD_INT 27
66148: DOUBLE
66149: EQUAL
66150: IFTRUE 66178
66152: LD_INT 26
66154: DOUBLE
66155: EQUAL
66156: IFTRUE 66178
66158: LD_INT 28
66160: DOUBLE
66161: EQUAL
66162: IFTRUE 66178
66164: LD_INT 29
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66178
66170: LD_INT 30
66172: DOUBLE
66173: EQUAL
66174: IFTRUE 66178
66176: GO 66234
66178: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66179: LD_ADDR_VAR 0 9
66183: PUSH
66184: LD_VAR 0 59
66188: PUSH
66189: LD_VAR 0 60
66193: PUSH
66194: LD_VAR 0 61
66198: PUSH
66199: LD_VAR 0 62
66203: PUSH
66204: LD_VAR 0 63
66208: PUSH
66209: LD_VAR 0 64
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: PUSH
66222: LD_VAR 0 4
66226: PUSH
66227: LD_INT 1
66229: PLUS
66230: ARRAY
66231: ST_TO_ADDR
66232: GO 66235
66234: POP
// temp_list2 = [ ] ;
66235: LD_ADDR_VAR 0 10
66239: PUSH
66240: EMPTY
66241: ST_TO_ADDR
// for i in temp_list do
66242: LD_ADDR_VAR 0 8
66246: PUSH
66247: LD_VAR 0 9
66251: PUSH
66252: FOR_IN
66253: IFFALSE 66305
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66255: LD_ADDR_VAR 0 10
66259: PUSH
66260: LD_VAR 0 10
66264: PUSH
66265: LD_VAR 0 8
66269: PUSH
66270: LD_INT 1
66272: ARRAY
66273: PUSH
66274: LD_VAR 0 2
66278: PLUS
66279: PUSH
66280: LD_VAR 0 8
66284: PUSH
66285: LD_INT 2
66287: ARRAY
66288: PUSH
66289: LD_VAR 0 3
66293: PLUS
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: EMPTY
66300: LIST
66301: ADD
66302: ST_TO_ADDR
66303: GO 66252
66305: POP
66306: POP
// result = temp_list2 ;
66307: LD_ADDR_VAR 0 7
66311: PUSH
66312: LD_VAR 0 10
66316: ST_TO_ADDR
// end ;
66317: LD_VAR 0 7
66321: RET
// export function EnemyInRange ( unit , dist ) ; begin
66322: LD_INT 0
66324: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66325: LD_ADDR_VAR 0 3
66329: PUSH
66330: LD_VAR 0 1
66334: PPUSH
66335: CALL_OW 255
66339: PPUSH
66340: LD_VAR 0 1
66344: PPUSH
66345: CALL_OW 250
66349: PPUSH
66350: LD_VAR 0 1
66354: PPUSH
66355: CALL_OW 251
66359: PPUSH
66360: LD_VAR 0 2
66364: PPUSH
66365: CALL 39579 0 4
66369: PUSH
66370: LD_INT 4
66372: ARRAY
66373: ST_TO_ADDR
// end ;
66374: LD_VAR 0 3
66378: RET
// export function PlayerSeeMe ( unit ) ; begin
66379: LD_INT 0
66381: PPUSH
// result := See ( your_side , unit ) ;
66382: LD_ADDR_VAR 0 2
66386: PUSH
66387: LD_OWVAR 2
66391: PPUSH
66392: LD_VAR 0 1
66396: PPUSH
66397: CALL_OW 292
66401: ST_TO_ADDR
// end ;
66402: LD_VAR 0 2
66406: RET
// export function ReverseDir ( unit ) ; begin
66407: LD_INT 0
66409: PPUSH
// if not unit then
66410: LD_VAR 0 1
66414: NOT
66415: IFFALSE 66419
// exit ;
66417: GO 66442
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66419: LD_ADDR_VAR 0 2
66423: PUSH
66424: LD_VAR 0 1
66428: PPUSH
66429: CALL_OW 254
66433: PUSH
66434: LD_INT 3
66436: PLUS
66437: PUSH
66438: LD_INT 6
66440: MOD
66441: ST_TO_ADDR
// end ;
66442: LD_VAR 0 2
66446: RET
// export function ReverseArray ( array ) ; var i ; begin
66447: LD_INT 0
66449: PPUSH
66450: PPUSH
// if not array then
66451: LD_VAR 0 1
66455: NOT
66456: IFFALSE 66460
// exit ;
66458: GO 66515
// result := [ ] ;
66460: LD_ADDR_VAR 0 2
66464: PUSH
66465: EMPTY
66466: ST_TO_ADDR
// for i := array downto 1 do
66467: LD_ADDR_VAR 0 3
66471: PUSH
66472: DOUBLE
66473: LD_VAR 0 1
66477: INC
66478: ST_TO_ADDR
66479: LD_INT 1
66481: PUSH
66482: FOR_DOWNTO
66483: IFFALSE 66513
// result := Join ( result , array [ i ] ) ;
66485: LD_ADDR_VAR 0 2
66489: PUSH
66490: LD_VAR 0 2
66494: PPUSH
66495: LD_VAR 0 1
66499: PUSH
66500: LD_VAR 0 3
66504: ARRAY
66505: PPUSH
66506: CALL 71357 0 2
66510: ST_TO_ADDR
66511: GO 66482
66513: POP
66514: POP
// end ;
66515: LD_VAR 0 2
66519: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66520: LD_INT 0
66522: PPUSH
66523: PPUSH
66524: PPUSH
66525: PPUSH
66526: PPUSH
66527: PPUSH
// if not unit or not hexes then
66528: LD_VAR 0 1
66532: NOT
66533: IFTRUE 66542
66535: PUSH
66536: LD_VAR 0 2
66540: NOT
66541: OR
66542: IFFALSE 66546
// exit ;
66544: GO 66669
// dist := 9999 ;
66546: LD_ADDR_VAR 0 5
66550: PUSH
66551: LD_INT 9999
66553: ST_TO_ADDR
// for i = 1 to hexes do
66554: LD_ADDR_VAR 0 4
66558: PUSH
66559: DOUBLE
66560: LD_INT 1
66562: DEC
66563: ST_TO_ADDR
66564: LD_VAR 0 2
66568: PUSH
66569: FOR_TO
66570: IFFALSE 66657
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66572: LD_ADDR_VAR 0 6
66576: PUSH
66577: LD_VAR 0 1
66581: PPUSH
66582: LD_VAR 0 2
66586: PUSH
66587: LD_VAR 0 4
66591: ARRAY
66592: PUSH
66593: LD_INT 1
66595: ARRAY
66596: PPUSH
66597: LD_VAR 0 2
66601: PUSH
66602: LD_VAR 0 4
66606: ARRAY
66607: PUSH
66608: LD_INT 2
66610: ARRAY
66611: PPUSH
66612: CALL_OW 297
66616: ST_TO_ADDR
// if tdist < dist then
66617: LD_VAR 0 6
66621: PUSH
66622: LD_VAR 0 5
66626: LESS
66627: IFFALSE 66655
// begin hex := hexes [ i ] ;
66629: LD_ADDR_VAR 0 8
66633: PUSH
66634: LD_VAR 0 2
66638: PUSH
66639: LD_VAR 0 4
66643: ARRAY
66644: ST_TO_ADDR
// dist := tdist ;
66645: LD_ADDR_VAR 0 5
66649: PUSH
66650: LD_VAR 0 6
66654: ST_TO_ADDR
// end ; end ;
66655: GO 66569
66657: POP
66658: POP
// result := hex ;
66659: LD_ADDR_VAR 0 3
66663: PUSH
66664: LD_VAR 0 8
66668: ST_TO_ADDR
// end ;
66669: LD_VAR 0 3
66673: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66674: LD_INT 0
66676: PPUSH
66677: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66678: LD_VAR 0 1
66682: NOT
66683: IFTRUE 66722
66685: PUSH
66686: LD_VAR 0 1
66690: PUSH
66691: LD_INT 21
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 23
66703: PUSH
66704: LD_INT 2
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PPUSH
66715: CALL_OW 69
66719: IN
66720: NOT
66721: OR
66722: IFFALSE 66726
// exit ;
66724: GO 66773
// for i = 1 to 3 do
66726: LD_ADDR_VAR 0 3
66730: PUSH
66731: DOUBLE
66732: LD_INT 1
66734: DEC
66735: ST_TO_ADDR
66736: LD_INT 3
66738: PUSH
66739: FOR_TO
66740: IFFALSE 66771
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66742: LD_VAR 0 1
66746: PPUSH
66747: CALL_OW 250
66751: PPUSH
66752: LD_VAR 0 1
66756: PPUSH
66757: CALL_OW 251
66761: PPUSH
66762: LD_INT 1
66764: PPUSH
66765: CALL_OW 453
66769: GO 66739
66771: POP
66772: POP
// end ;
66773: LD_VAR 0 2
66777: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
66782: PPUSH
66783: PPUSH
66784: PPUSH
66785: PPUSH
// if not unit or not enemy_unit then
66786: LD_VAR 0 1
66790: NOT
66791: IFTRUE 66800
66793: PUSH
66794: LD_VAR 0 2
66798: NOT
66799: OR
66800: IFFALSE 66804
// exit ;
66802: GO 67275
// if GetLives ( i ) < 250 then
66804: LD_VAR 0 4
66808: PPUSH
66809: CALL_OW 256
66813: PUSH
66814: LD_INT 250
66816: LESS
66817: IFFALSE 66830
// begin ComAutodestruct ( i ) ;
66819: LD_VAR 0 4
66823: PPUSH
66824: CALL 66674 0 1
// exit ;
66828: GO 67275
// end ; x := GetX ( enemy_unit ) ;
66830: LD_ADDR_VAR 0 7
66834: PUSH
66835: LD_VAR 0 2
66839: PPUSH
66840: CALL_OW 250
66844: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66845: LD_ADDR_VAR 0 8
66849: PUSH
66850: LD_VAR 0 2
66854: PPUSH
66855: CALL_OW 251
66859: ST_TO_ADDR
// if not x or not y then
66860: LD_VAR 0 7
66864: NOT
66865: IFTRUE 66874
66867: PUSH
66868: LD_VAR 0 8
66872: NOT
66873: OR
66874: IFFALSE 66878
// exit ;
66876: GO 67275
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66878: LD_ADDR_VAR 0 6
66882: PUSH
66883: LD_VAR 0 7
66887: PPUSH
66888: LD_INT 0
66890: PPUSH
66891: LD_INT 4
66893: PPUSH
66894: CALL_OW 272
66898: PUSH
66899: LD_VAR 0 8
66903: PPUSH
66904: LD_INT 0
66906: PPUSH
66907: LD_INT 4
66909: PPUSH
66910: CALL_OW 273
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_VAR 0 7
66923: PPUSH
66924: LD_INT 1
66926: PPUSH
66927: LD_INT 4
66929: PPUSH
66930: CALL_OW 272
66934: PUSH
66935: LD_VAR 0 8
66939: PPUSH
66940: LD_INT 1
66942: PPUSH
66943: LD_INT 4
66945: PPUSH
66946: CALL_OW 273
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_VAR 0 7
66959: PPUSH
66960: LD_INT 2
66962: PPUSH
66963: LD_INT 4
66965: PPUSH
66966: CALL_OW 272
66970: PUSH
66971: LD_VAR 0 8
66975: PPUSH
66976: LD_INT 2
66978: PPUSH
66979: LD_INT 4
66981: PPUSH
66982: CALL_OW 273
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_VAR 0 7
66995: PPUSH
66996: LD_INT 3
66998: PPUSH
66999: LD_INT 4
67001: PPUSH
67002: CALL_OW 272
67006: PUSH
67007: LD_VAR 0 8
67011: PPUSH
67012: LD_INT 3
67014: PPUSH
67015: LD_INT 4
67017: PPUSH
67018: CALL_OW 273
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_VAR 0 7
67031: PPUSH
67032: LD_INT 4
67034: PPUSH
67035: LD_INT 4
67037: PPUSH
67038: CALL_OW 272
67042: PUSH
67043: LD_VAR 0 8
67047: PPUSH
67048: LD_INT 4
67050: PPUSH
67051: LD_INT 4
67053: PPUSH
67054: CALL_OW 273
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_VAR 0 7
67067: PPUSH
67068: LD_INT 5
67070: PPUSH
67071: LD_INT 4
67073: PPUSH
67074: CALL_OW 272
67078: PUSH
67079: LD_VAR 0 8
67083: PPUSH
67084: LD_INT 5
67086: PPUSH
67087: LD_INT 4
67089: PPUSH
67090: CALL_OW 273
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: ST_TO_ADDR
// for i = tmp downto 1 do
67107: LD_ADDR_VAR 0 4
67111: PUSH
67112: DOUBLE
67113: LD_VAR 0 6
67117: INC
67118: ST_TO_ADDR
67119: LD_INT 1
67121: PUSH
67122: FOR_DOWNTO
67123: IFFALSE 67226
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67125: LD_VAR 0 6
67129: PUSH
67130: LD_VAR 0 4
67134: ARRAY
67135: PUSH
67136: LD_INT 1
67138: ARRAY
67139: PPUSH
67140: LD_VAR 0 6
67144: PUSH
67145: LD_VAR 0 4
67149: ARRAY
67150: PUSH
67151: LD_INT 2
67153: ARRAY
67154: PPUSH
67155: CALL_OW 488
67159: NOT
67160: IFTRUE 67202
67162: PUSH
67163: LD_VAR 0 6
67167: PUSH
67168: LD_VAR 0 4
67172: ARRAY
67173: PUSH
67174: LD_INT 1
67176: ARRAY
67177: PPUSH
67178: LD_VAR 0 6
67182: PUSH
67183: LD_VAR 0 4
67187: ARRAY
67188: PUSH
67189: LD_INT 2
67191: ARRAY
67192: PPUSH
67193: CALL_OW 428
67197: PUSH
67198: LD_INT 0
67200: NONEQUAL
67201: OR
67202: IFFALSE 67224
// tmp := Delete ( tmp , i ) ;
67204: LD_ADDR_VAR 0 6
67208: PUSH
67209: LD_VAR 0 6
67213: PPUSH
67214: LD_VAR 0 4
67218: PPUSH
67219: CALL_OW 3
67223: ST_TO_ADDR
67224: GO 67122
67226: POP
67227: POP
// j := GetClosestHex ( unit , tmp ) ;
67228: LD_ADDR_VAR 0 5
67232: PUSH
67233: LD_VAR 0 1
67237: PPUSH
67238: LD_VAR 0 6
67242: PPUSH
67243: CALL 66520 0 2
67247: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67248: LD_VAR 0 1
67252: PPUSH
67253: LD_VAR 0 5
67257: PUSH
67258: LD_INT 1
67260: ARRAY
67261: PPUSH
67262: LD_VAR 0 5
67266: PUSH
67267: LD_INT 2
67269: ARRAY
67270: PPUSH
67271: CALL_OW 111
// end ;
67275: LD_VAR 0 3
67279: RET
// export function PrepareApemanSoldier ( ) ; begin
67280: LD_INT 0
67282: PPUSH
// uc_nation := 0 ;
67283: LD_ADDR_OWVAR 21
67287: PUSH
67288: LD_INT 0
67290: ST_TO_ADDR
// hc_sex := sex_male ;
67291: LD_ADDR_OWVAR 27
67295: PUSH
67296: LD_INT 1
67298: ST_TO_ADDR
// hc_name :=  ;
67299: LD_ADDR_OWVAR 26
67303: PUSH
67304: LD_STRING 
67306: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67307: LD_ADDR_OWVAR 28
67311: PUSH
67312: LD_INT 15
67314: ST_TO_ADDR
// hc_gallery :=  ;
67315: LD_ADDR_OWVAR 33
67319: PUSH
67320: LD_STRING 
67322: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67323: LD_ADDR_OWVAR 31
67327: PUSH
67328: LD_INT 0
67330: PPUSH
67331: LD_INT 3
67333: PPUSH
67334: CALL_OW 12
67338: PUSH
67339: LD_INT 0
67341: PPUSH
67342: LD_INT 3
67344: PPUSH
67345: CALL_OW 12
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67362: LD_ADDR_OWVAR 29
67366: PUSH
67367: LD_INT 12
67369: PUSH
67370: LD_INT 12
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: ST_TO_ADDR
// end ;
67377: LD_VAR 0 1
67381: RET
// export function PrepareApemanEngineer ( ) ; begin
67382: LD_INT 0
67384: PPUSH
// uc_nation := 0 ;
67385: LD_ADDR_OWVAR 21
67389: PUSH
67390: LD_INT 0
67392: ST_TO_ADDR
// hc_sex := sex_male ;
67393: LD_ADDR_OWVAR 27
67397: PUSH
67398: LD_INT 1
67400: ST_TO_ADDR
// hc_name :=  ;
67401: LD_ADDR_OWVAR 26
67405: PUSH
67406: LD_STRING 
67408: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67409: LD_ADDR_OWVAR 28
67413: PUSH
67414: LD_INT 16
67416: ST_TO_ADDR
// hc_gallery :=  ;
67417: LD_ADDR_OWVAR 33
67421: PUSH
67422: LD_STRING 
67424: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67425: LD_ADDR_OWVAR 31
67429: PUSH
67430: LD_INT 0
67432: PPUSH
67433: LD_INT 3
67435: PPUSH
67436: CALL_OW 12
67440: PUSH
67441: LD_INT 0
67443: PPUSH
67444: LD_INT 3
67446: PPUSH
67447: CALL_OW 12
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67464: LD_ADDR_OWVAR 29
67468: PUSH
67469: LD_INT 12
67471: PUSH
67472: LD_INT 12
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: ST_TO_ADDR
// end ;
67479: LD_VAR 0 1
67483: RET
// export function PrepareApeman ( agressivity ) ; begin
67484: LD_INT 0
67486: PPUSH
// uc_side := 0 ;
67487: LD_ADDR_OWVAR 20
67491: PUSH
67492: LD_INT 0
67494: ST_TO_ADDR
// uc_nation := 0 ;
67495: LD_ADDR_OWVAR 21
67499: PUSH
67500: LD_INT 0
67502: ST_TO_ADDR
// hc_sex := sex_male ;
67503: LD_ADDR_OWVAR 27
67507: PUSH
67508: LD_INT 1
67510: ST_TO_ADDR
// hc_class := class_apeman ;
67511: LD_ADDR_OWVAR 28
67515: PUSH
67516: LD_INT 12
67518: ST_TO_ADDR
// hc_gallery :=  ;
67519: LD_ADDR_OWVAR 33
67523: PUSH
67524: LD_STRING 
67526: ST_TO_ADDR
// hc_name :=  ;
67527: LD_ADDR_OWVAR 26
67531: PUSH
67532: LD_STRING 
67534: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67535: LD_ADDR_OWVAR 29
67539: PUSH
67540: LD_INT 12
67542: PUSH
67543: LD_INT 12
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: ST_TO_ADDR
// if agressivity = 0 then
67550: LD_VAR 0 1
67554: PUSH
67555: LD_INT 0
67557: EQUAL
67558: IFFALSE 67570
// hc_agressivity := 0 else
67560: LD_ADDR_OWVAR 35
67564: PUSH
67565: LD_INT 0
67567: ST_TO_ADDR
67568: GO 67591
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67570: LD_ADDR_OWVAR 35
67574: PUSH
67575: LD_VAR 0 1
67579: NEG
67580: PPUSH
67581: LD_VAR 0 1
67585: PPUSH
67586: CALL_OW 12
67590: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67591: LD_ADDR_OWVAR 31
67595: PUSH
67596: LD_INT 0
67598: PPUSH
67599: LD_INT 3
67601: PPUSH
67602: CALL_OW 12
67606: PUSH
67607: LD_INT 0
67609: PPUSH
67610: LD_INT 3
67612: PPUSH
67613: CALL_OW 12
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: LD_INT 0
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: ST_TO_ADDR
// end ;
67630: LD_VAR 0 2
67634: RET
// export function PrepareTiger ( agressivity ) ; begin
67635: LD_INT 0
67637: PPUSH
// uc_side := 0 ;
67638: LD_ADDR_OWVAR 20
67642: PUSH
67643: LD_INT 0
67645: ST_TO_ADDR
// uc_nation := 0 ;
67646: LD_ADDR_OWVAR 21
67650: PUSH
67651: LD_INT 0
67653: ST_TO_ADDR
// InitHc ;
67654: CALL_OW 19
// hc_class := class_tiger ;
67658: LD_ADDR_OWVAR 28
67662: PUSH
67663: LD_INT 14
67665: ST_TO_ADDR
// hc_gallery :=  ;
67666: LD_ADDR_OWVAR 33
67670: PUSH
67671: LD_STRING 
67673: ST_TO_ADDR
// hc_name :=  ;
67674: LD_ADDR_OWVAR 26
67678: PUSH
67679: LD_STRING 
67681: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67682: LD_ADDR_OWVAR 35
67686: PUSH
67687: LD_VAR 0 1
67691: NEG
67692: PPUSH
67693: LD_VAR 0 1
67697: PPUSH
67698: CALL_OW 12
67702: ST_TO_ADDR
// end ;
67703: LD_VAR 0 2
67707: RET
// export function PrepareEnchidna ( ) ; begin
67708: LD_INT 0
67710: PPUSH
// uc_side := 0 ;
67711: LD_ADDR_OWVAR 20
67715: PUSH
67716: LD_INT 0
67718: ST_TO_ADDR
// uc_nation := 0 ;
67719: LD_ADDR_OWVAR 21
67723: PUSH
67724: LD_INT 0
67726: ST_TO_ADDR
// InitHc ;
67727: CALL_OW 19
// hc_class := class_baggie ;
67731: LD_ADDR_OWVAR 28
67735: PUSH
67736: LD_INT 13
67738: ST_TO_ADDR
// hc_gallery :=  ;
67739: LD_ADDR_OWVAR 33
67743: PUSH
67744: LD_STRING 
67746: ST_TO_ADDR
// hc_name :=  ;
67747: LD_ADDR_OWVAR 26
67751: PUSH
67752: LD_STRING 
67754: ST_TO_ADDR
// end ;
67755: LD_VAR 0 1
67759: RET
// export function PrepareFrog ( ) ; begin
67760: LD_INT 0
67762: PPUSH
// uc_side := 0 ;
67763: LD_ADDR_OWVAR 20
67767: PUSH
67768: LD_INT 0
67770: ST_TO_ADDR
// uc_nation := 0 ;
67771: LD_ADDR_OWVAR 21
67775: PUSH
67776: LD_INT 0
67778: ST_TO_ADDR
// InitHc ;
67779: CALL_OW 19
// hc_class := class_frog ;
67783: LD_ADDR_OWVAR 28
67787: PUSH
67788: LD_INT 19
67790: ST_TO_ADDR
// hc_gallery :=  ;
67791: LD_ADDR_OWVAR 33
67795: PUSH
67796: LD_STRING 
67798: ST_TO_ADDR
// hc_name :=  ;
67799: LD_ADDR_OWVAR 26
67803: PUSH
67804: LD_STRING 
67806: ST_TO_ADDR
// end ;
67807: LD_VAR 0 1
67811: RET
// export function PrepareFish ( ) ; begin
67812: LD_INT 0
67814: PPUSH
// uc_side := 0 ;
67815: LD_ADDR_OWVAR 20
67819: PUSH
67820: LD_INT 0
67822: ST_TO_ADDR
// uc_nation := 0 ;
67823: LD_ADDR_OWVAR 21
67827: PUSH
67828: LD_INT 0
67830: ST_TO_ADDR
// InitHc ;
67831: CALL_OW 19
// hc_class := class_fish ;
67835: LD_ADDR_OWVAR 28
67839: PUSH
67840: LD_INT 20
67842: ST_TO_ADDR
// hc_gallery :=  ;
67843: LD_ADDR_OWVAR 33
67847: PUSH
67848: LD_STRING 
67850: ST_TO_ADDR
// hc_name :=  ;
67851: LD_ADDR_OWVAR 26
67855: PUSH
67856: LD_STRING 
67858: ST_TO_ADDR
// end ;
67859: LD_VAR 0 1
67863: RET
// export function PrepareBird ( ) ; begin
67864: LD_INT 0
67866: PPUSH
// uc_side := 0 ;
67867: LD_ADDR_OWVAR 20
67871: PUSH
67872: LD_INT 0
67874: ST_TO_ADDR
// uc_nation := 0 ;
67875: LD_ADDR_OWVAR 21
67879: PUSH
67880: LD_INT 0
67882: ST_TO_ADDR
// InitHc ;
67883: CALL_OW 19
// hc_class := class_phororhacos ;
67887: LD_ADDR_OWVAR 28
67891: PUSH
67892: LD_INT 18
67894: ST_TO_ADDR
// hc_gallery :=  ;
67895: LD_ADDR_OWVAR 33
67899: PUSH
67900: LD_STRING 
67902: ST_TO_ADDR
// hc_name :=  ;
67903: LD_ADDR_OWVAR 26
67907: PUSH
67908: LD_STRING 
67910: ST_TO_ADDR
// end ;
67911: LD_VAR 0 1
67915: RET
// export function PrepareHorse ( ) ; begin
67916: LD_INT 0
67918: PPUSH
// uc_side := 0 ;
67919: LD_ADDR_OWVAR 20
67923: PUSH
67924: LD_INT 0
67926: ST_TO_ADDR
// uc_nation := 0 ;
67927: LD_ADDR_OWVAR 21
67931: PUSH
67932: LD_INT 0
67934: ST_TO_ADDR
// InitHc ;
67935: CALL_OW 19
// hc_class := class_horse ;
67939: LD_ADDR_OWVAR 28
67943: PUSH
67944: LD_INT 21
67946: ST_TO_ADDR
// hc_gallery :=  ;
67947: LD_ADDR_OWVAR 33
67951: PUSH
67952: LD_STRING 
67954: ST_TO_ADDR
// hc_name :=  ;
67955: LD_ADDR_OWVAR 26
67959: PUSH
67960: LD_STRING 
67962: ST_TO_ADDR
// end ;
67963: LD_VAR 0 1
67967: RET
// export function PrepareMastodont ( ) ; begin
67968: LD_INT 0
67970: PPUSH
// uc_side := 0 ;
67971: LD_ADDR_OWVAR 20
67975: PUSH
67976: LD_INT 0
67978: ST_TO_ADDR
// uc_nation := 0 ;
67979: LD_ADDR_OWVAR 21
67983: PUSH
67984: LD_INT 0
67986: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67987: LD_ADDR_OWVAR 37
67991: PUSH
67992: LD_INT 31
67994: ST_TO_ADDR
// vc_control := control_rider ;
67995: LD_ADDR_OWVAR 38
67999: PUSH
68000: LD_INT 4
68002: ST_TO_ADDR
// end ;
68003: LD_VAR 0 1
68007: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68008: LD_INT 0
68010: PPUSH
68011: PPUSH
68012: PPUSH
// uc_side = 0 ;
68013: LD_ADDR_OWVAR 20
68017: PUSH
68018: LD_INT 0
68020: ST_TO_ADDR
// uc_nation = 0 ;
68021: LD_ADDR_OWVAR 21
68025: PUSH
68026: LD_INT 0
68028: ST_TO_ADDR
// InitHc_All ( ) ;
68029: CALL_OW 584
// InitVc ;
68033: CALL_OW 20
// if mastodonts then
68037: LD_VAR 0 6
68041: IFFALSE 68108
// for i = 1 to mastodonts do
68043: LD_ADDR_VAR 0 11
68047: PUSH
68048: DOUBLE
68049: LD_INT 1
68051: DEC
68052: ST_TO_ADDR
68053: LD_VAR 0 6
68057: PUSH
68058: FOR_TO
68059: IFFALSE 68106
// begin vc_chassis := 31 ;
68061: LD_ADDR_OWVAR 37
68065: PUSH
68066: LD_INT 31
68068: ST_TO_ADDR
// vc_control := control_rider ;
68069: LD_ADDR_OWVAR 38
68073: PUSH
68074: LD_INT 4
68076: ST_TO_ADDR
// animal := CreateVehicle ;
68077: LD_ADDR_VAR 0 12
68081: PUSH
68082: CALL_OW 45
68086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68087: LD_VAR 0 12
68091: PPUSH
68092: LD_VAR 0 8
68096: PPUSH
68097: LD_INT 0
68099: PPUSH
68100: CALL 70250 0 3
// end ;
68104: GO 68058
68106: POP
68107: POP
// if horses then
68108: LD_VAR 0 5
68112: IFFALSE 68179
// for i = 1 to horses do
68114: LD_ADDR_VAR 0 11
68118: PUSH
68119: DOUBLE
68120: LD_INT 1
68122: DEC
68123: ST_TO_ADDR
68124: LD_VAR 0 5
68128: PUSH
68129: FOR_TO
68130: IFFALSE 68177
// begin hc_class := 21 ;
68132: LD_ADDR_OWVAR 28
68136: PUSH
68137: LD_INT 21
68139: ST_TO_ADDR
// hc_gallery :=  ;
68140: LD_ADDR_OWVAR 33
68144: PUSH
68145: LD_STRING 
68147: ST_TO_ADDR
// animal := CreateHuman ;
68148: LD_ADDR_VAR 0 12
68152: PUSH
68153: CALL_OW 44
68157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68158: LD_VAR 0 12
68162: PPUSH
68163: LD_VAR 0 8
68167: PPUSH
68168: LD_INT 0
68170: PPUSH
68171: CALL 70250 0 3
// end ;
68175: GO 68129
68177: POP
68178: POP
// if birds then
68179: LD_VAR 0 1
68183: IFFALSE 68250
// for i = 1 to birds do
68185: LD_ADDR_VAR 0 11
68189: PUSH
68190: DOUBLE
68191: LD_INT 1
68193: DEC
68194: ST_TO_ADDR
68195: LD_VAR 0 1
68199: PUSH
68200: FOR_TO
68201: IFFALSE 68248
// begin hc_class := 18 ;
68203: LD_ADDR_OWVAR 28
68207: PUSH
68208: LD_INT 18
68210: ST_TO_ADDR
// hc_gallery =  ;
68211: LD_ADDR_OWVAR 33
68215: PUSH
68216: LD_STRING 
68218: ST_TO_ADDR
// animal := CreateHuman ;
68219: LD_ADDR_VAR 0 12
68223: PUSH
68224: CALL_OW 44
68228: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68229: LD_VAR 0 12
68233: PPUSH
68234: LD_VAR 0 8
68238: PPUSH
68239: LD_INT 0
68241: PPUSH
68242: CALL 70250 0 3
// end ;
68246: GO 68200
68248: POP
68249: POP
// if tigers then
68250: LD_VAR 0 2
68254: IFFALSE 68338
// for i = 1 to tigers do
68256: LD_ADDR_VAR 0 11
68260: PUSH
68261: DOUBLE
68262: LD_INT 1
68264: DEC
68265: ST_TO_ADDR
68266: LD_VAR 0 2
68270: PUSH
68271: FOR_TO
68272: IFFALSE 68336
// begin hc_class = class_tiger ;
68274: LD_ADDR_OWVAR 28
68278: PUSH
68279: LD_INT 14
68281: ST_TO_ADDR
// hc_gallery =  ;
68282: LD_ADDR_OWVAR 33
68286: PUSH
68287: LD_STRING 
68289: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68290: LD_ADDR_OWVAR 35
68294: PUSH
68295: LD_INT 7
68297: NEG
68298: PPUSH
68299: LD_INT 7
68301: PPUSH
68302: CALL_OW 12
68306: ST_TO_ADDR
// animal := CreateHuman ;
68307: LD_ADDR_VAR 0 12
68311: PUSH
68312: CALL_OW 44
68316: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68317: LD_VAR 0 12
68321: PPUSH
68322: LD_VAR 0 8
68326: PPUSH
68327: LD_INT 0
68329: PPUSH
68330: CALL 70250 0 3
// end ;
68334: GO 68271
68336: POP
68337: POP
// if apemans then
68338: LD_VAR 0 3
68342: IFFALSE 68465
// for i = 1 to apemans do
68344: LD_ADDR_VAR 0 11
68348: PUSH
68349: DOUBLE
68350: LD_INT 1
68352: DEC
68353: ST_TO_ADDR
68354: LD_VAR 0 3
68358: PUSH
68359: FOR_TO
68360: IFFALSE 68463
// begin hc_class = class_apeman ;
68362: LD_ADDR_OWVAR 28
68366: PUSH
68367: LD_INT 12
68369: ST_TO_ADDR
// hc_gallery =  ;
68370: LD_ADDR_OWVAR 33
68374: PUSH
68375: LD_STRING 
68377: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68378: LD_ADDR_OWVAR 35
68382: PUSH
68383: LD_INT 2
68385: NEG
68386: PPUSH
68387: LD_INT 2
68389: PPUSH
68390: CALL_OW 12
68394: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68395: LD_ADDR_OWVAR 31
68399: PUSH
68400: LD_INT 1
68402: PPUSH
68403: LD_INT 3
68405: PPUSH
68406: CALL_OW 12
68410: PUSH
68411: LD_INT 1
68413: PPUSH
68414: LD_INT 3
68416: PPUSH
68417: CALL_OW 12
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: LD_INT 0
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: ST_TO_ADDR
// animal := CreateHuman ;
68434: LD_ADDR_VAR 0 12
68438: PUSH
68439: CALL_OW 44
68443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68444: LD_VAR 0 12
68448: PPUSH
68449: LD_VAR 0 8
68453: PPUSH
68454: LD_INT 0
68456: PPUSH
68457: CALL 70250 0 3
// end ;
68461: GO 68359
68463: POP
68464: POP
// if enchidnas then
68465: LD_VAR 0 4
68469: IFFALSE 68536
// for i = 1 to enchidnas do
68471: LD_ADDR_VAR 0 11
68475: PUSH
68476: DOUBLE
68477: LD_INT 1
68479: DEC
68480: ST_TO_ADDR
68481: LD_VAR 0 4
68485: PUSH
68486: FOR_TO
68487: IFFALSE 68534
// begin hc_class = 13 ;
68489: LD_ADDR_OWVAR 28
68493: PUSH
68494: LD_INT 13
68496: ST_TO_ADDR
// hc_gallery =  ;
68497: LD_ADDR_OWVAR 33
68501: PUSH
68502: LD_STRING 
68504: ST_TO_ADDR
// animal := CreateHuman ;
68505: LD_ADDR_VAR 0 12
68509: PUSH
68510: CALL_OW 44
68514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68515: LD_VAR 0 12
68519: PPUSH
68520: LD_VAR 0 8
68524: PPUSH
68525: LD_INT 0
68527: PPUSH
68528: CALL 70250 0 3
// end ;
68532: GO 68486
68534: POP
68535: POP
// if fishes then
68536: LD_VAR 0 7
68540: IFFALSE 68607
// for i = 1 to fishes do
68542: LD_ADDR_VAR 0 11
68546: PUSH
68547: DOUBLE
68548: LD_INT 1
68550: DEC
68551: ST_TO_ADDR
68552: LD_VAR 0 7
68556: PUSH
68557: FOR_TO
68558: IFFALSE 68605
// begin hc_class = 20 ;
68560: LD_ADDR_OWVAR 28
68564: PUSH
68565: LD_INT 20
68567: ST_TO_ADDR
// hc_gallery =  ;
68568: LD_ADDR_OWVAR 33
68572: PUSH
68573: LD_STRING 
68575: ST_TO_ADDR
// animal := CreateHuman ;
68576: LD_ADDR_VAR 0 12
68580: PUSH
68581: CALL_OW 44
68585: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68586: LD_VAR 0 12
68590: PPUSH
68591: LD_VAR 0 9
68595: PPUSH
68596: LD_INT 0
68598: PPUSH
68599: CALL 70250 0 3
// end ;
68603: GO 68557
68605: POP
68606: POP
// end ;
68607: LD_VAR 0 10
68611: RET
// export function WantHeal ( sci , unit ) ; begin
68612: LD_INT 0
68614: PPUSH
// if GetTaskList ( sci ) > 0 then
68615: LD_VAR 0 1
68619: PPUSH
68620: CALL_OW 437
68624: PUSH
68625: LD_INT 0
68627: GREATER
68628: IFFALSE 68700
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68630: LD_VAR 0 1
68634: PPUSH
68635: CALL_OW 437
68639: PUSH
68640: LD_INT 1
68642: ARRAY
68643: PUSH
68644: LD_INT 1
68646: ARRAY
68647: PUSH
68648: LD_STRING l
68650: EQUAL
68651: IFFALSE 68678
68653: PUSH
68654: LD_VAR 0 1
68658: PPUSH
68659: CALL_OW 437
68663: PUSH
68664: LD_INT 1
68666: ARRAY
68667: PUSH
68668: LD_INT 4
68670: ARRAY
68671: PUSH
68672: LD_VAR 0 2
68676: EQUAL
68677: AND
68678: IFFALSE 68690
// result := true else
68680: LD_ADDR_VAR 0 3
68684: PUSH
68685: LD_INT 1
68687: ST_TO_ADDR
68688: GO 68698
// result := false ;
68690: LD_ADDR_VAR 0 3
68694: PUSH
68695: LD_INT 0
68697: ST_TO_ADDR
// end else
68698: GO 68708
// result := false ;
68700: LD_ADDR_VAR 0 3
68704: PUSH
68705: LD_INT 0
68707: ST_TO_ADDR
// end ;
68708: LD_VAR 0 3
68712: RET
// export function HealTarget ( sci ) ; begin
68713: LD_INT 0
68715: PPUSH
// if not sci then
68716: LD_VAR 0 1
68720: NOT
68721: IFFALSE 68725
// exit ;
68723: GO 68790
// result := 0 ;
68725: LD_ADDR_VAR 0 2
68729: PUSH
68730: LD_INT 0
68732: ST_TO_ADDR
// if GetTaskList ( sci ) then
68733: LD_VAR 0 1
68737: PPUSH
68738: CALL_OW 437
68742: IFFALSE 68790
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68744: LD_VAR 0 1
68748: PPUSH
68749: CALL_OW 437
68753: PUSH
68754: LD_INT 1
68756: ARRAY
68757: PUSH
68758: LD_INT 1
68760: ARRAY
68761: PUSH
68762: LD_STRING l
68764: EQUAL
68765: IFFALSE 68790
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68767: LD_ADDR_VAR 0 2
68771: PUSH
68772: LD_VAR 0 1
68776: PPUSH
68777: CALL_OW 437
68781: PUSH
68782: LD_INT 1
68784: ARRAY
68785: PUSH
68786: LD_INT 4
68788: ARRAY
68789: ST_TO_ADDR
// end ;
68790: LD_VAR 0 2
68794: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68795: LD_INT 0
68797: PPUSH
68798: PPUSH
68799: PPUSH
68800: PPUSH
// if not base_units then
68801: LD_VAR 0 1
68805: NOT
68806: IFFALSE 68810
// exit ;
68808: GO 68897
// result := false ;
68810: LD_ADDR_VAR 0 2
68814: PUSH
68815: LD_INT 0
68817: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68818: LD_ADDR_VAR 0 5
68822: PUSH
68823: LD_VAR 0 1
68827: PPUSH
68828: LD_INT 21
68830: PUSH
68831: LD_INT 3
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PPUSH
68838: CALL_OW 72
68842: ST_TO_ADDR
// if not tmp then
68843: LD_VAR 0 5
68847: NOT
68848: IFFALSE 68852
// exit ;
68850: GO 68897
// for i in tmp do
68852: LD_ADDR_VAR 0 3
68856: PUSH
68857: LD_VAR 0 5
68861: PUSH
68862: FOR_IN
68863: IFFALSE 68895
// begin result := EnemyInRange ( i , 22 ) ;
68865: LD_ADDR_VAR 0 2
68869: PUSH
68870: LD_VAR 0 3
68874: PPUSH
68875: LD_INT 22
68877: PPUSH
68878: CALL 66322 0 2
68882: ST_TO_ADDR
// if result then
68883: LD_VAR 0 2
68887: IFFALSE 68893
// exit ;
68889: POP
68890: POP
68891: GO 68897
// end ;
68893: GO 68862
68895: POP
68896: POP
// end ;
68897: LD_VAR 0 2
68901: RET
// export function FilterByTag ( units , tag ) ; begin
68902: LD_INT 0
68904: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68905: LD_ADDR_VAR 0 3
68909: PUSH
68910: LD_VAR 0 1
68914: PPUSH
68915: LD_INT 120
68917: PUSH
68918: LD_VAR 0 2
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PPUSH
68927: CALL_OW 72
68931: ST_TO_ADDR
// end ;
68932: LD_VAR 0 3
68936: RET
// export function IsDriver ( un ) ; begin
68937: LD_INT 0
68939: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68940: LD_ADDR_VAR 0 2
68944: PUSH
68945: LD_VAR 0 1
68949: PUSH
68950: LD_INT 55
68952: PUSH
68953: EMPTY
68954: LIST
68955: PPUSH
68956: CALL_OW 69
68960: IN
68961: ST_TO_ADDR
// end ;
68962: LD_VAR 0 2
68966: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68967: LD_INT 0
68969: PPUSH
68970: PPUSH
// list := [ ] ;
68971: LD_ADDR_VAR 0 5
68975: PUSH
68976: EMPTY
68977: ST_TO_ADDR
// case d of 0 :
68978: LD_VAR 0 3
68982: PUSH
68983: LD_INT 0
68985: DOUBLE
68986: EQUAL
68987: IFTRUE 68991
68989: GO 69124
68991: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68992: LD_ADDR_VAR 0 5
68996: PUSH
68997: LD_VAR 0 1
69001: PUSH
69002: LD_INT 4
69004: MINUS
69005: PUSH
69006: LD_VAR 0 2
69010: PUSH
69011: LD_INT 4
69013: MINUS
69014: PUSH
69015: LD_INT 2
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: LIST
69022: PUSH
69023: LD_VAR 0 1
69027: PUSH
69028: LD_INT 3
69030: MINUS
69031: PUSH
69032: LD_VAR 0 2
69036: PUSH
69037: LD_INT 1
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: PUSH
69045: LD_VAR 0 1
69049: PUSH
69050: LD_INT 4
69052: PLUS
69053: PUSH
69054: LD_VAR 0 2
69058: PUSH
69059: LD_INT 4
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: LIST
69066: PUSH
69067: LD_VAR 0 1
69071: PUSH
69072: LD_INT 3
69074: PLUS
69075: PUSH
69076: LD_VAR 0 2
69080: PUSH
69081: LD_INT 3
69083: PLUS
69084: PUSH
69085: LD_INT 5
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: LIST
69092: PUSH
69093: LD_VAR 0 1
69097: PUSH
69098: LD_VAR 0 2
69102: PUSH
69103: LD_INT 4
69105: PLUS
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: LIST
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: ST_TO_ADDR
// end ; 1 :
69122: GO 69822
69124: LD_INT 1
69126: DOUBLE
69127: EQUAL
69128: IFTRUE 69132
69130: GO 69265
69132: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69133: LD_ADDR_VAR 0 5
69137: PUSH
69138: LD_VAR 0 1
69142: PUSH
69143: LD_VAR 0 2
69147: PUSH
69148: LD_INT 4
69150: MINUS
69151: PUSH
69152: LD_INT 3
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: LIST
69159: PUSH
69160: LD_VAR 0 1
69164: PUSH
69165: LD_INT 3
69167: MINUS
69168: PUSH
69169: LD_VAR 0 2
69173: PUSH
69174: LD_INT 3
69176: MINUS
69177: PUSH
69178: LD_INT 2
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: LIST
69185: PUSH
69186: LD_VAR 0 1
69190: PUSH
69191: LD_INT 4
69193: MINUS
69194: PUSH
69195: LD_VAR 0 2
69199: PUSH
69200: LD_INT 1
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: LIST
69207: PUSH
69208: LD_VAR 0 1
69212: PUSH
69213: LD_VAR 0 2
69217: PUSH
69218: LD_INT 3
69220: PLUS
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: LIST
69229: PUSH
69230: LD_VAR 0 1
69234: PUSH
69235: LD_INT 4
69237: PLUS
69238: PUSH
69239: LD_VAR 0 2
69243: PUSH
69244: LD_INT 4
69246: PLUS
69247: PUSH
69248: LD_INT 5
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: LIST
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: ST_TO_ADDR
// end ; 2 :
69263: GO 69822
69265: LD_INT 2
69267: DOUBLE
69268: EQUAL
69269: IFTRUE 69273
69271: GO 69402
69273: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69274: LD_ADDR_VAR 0 5
69278: PUSH
69279: LD_VAR 0 1
69283: PUSH
69284: LD_VAR 0 2
69288: PUSH
69289: LD_INT 3
69291: MINUS
69292: PUSH
69293: LD_INT 3
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: LIST
69300: PUSH
69301: LD_VAR 0 1
69305: PUSH
69306: LD_INT 4
69308: PLUS
69309: PUSH
69310: LD_VAR 0 2
69314: PUSH
69315: LD_INT 4
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: LIST
69322: PUSH
69323: LD_VAR 0 1
69327: PUSH
69328: LD_VAR 0 2
69332: PUSH
69333: LD_INT 4
69335: PLUS
69336: PUSH
69337: LD_INT 0
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: LIST
69344: PUSH
69345: LD_VAR 0 1
69349: PUSH
69350: LD_INT 3
69352: MINUS
69353: PUSH
69354: LD_VAR 0 2
69358: PUSH
69359: LD_INT 1
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: LIST
69366: PUSH
69367: LD_VAR 0 1
69371: PUSH
69372: LD_INT 4
69374: MINUS
69375: PUSH
69376: LD_VAR 0 2
69380: PUSH
69381: LD_INT 4
69383: MINUS
69384: PUSH
69385: LD_INT 2
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: LIST
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: ST_TO_ADDR
// end ; 3 :
69400: GO 69822
69402: LD_INT 3
69404: DOUBLE
69405: EQUAL
69406: IFTRUE 69410
69408: GO 69543
69410: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69411: LD_ADDR_VAR 0 5
69415: PUSH
69416: LD_VAR 0 1
69420: PUSH
69421: LD_INT 3
69423: PLUS
69424: PUSH
69425: LD_VAR 0 2
69429: PUSH
69430: LD_INT 4
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: LIST
69437: PUSH
69438: LD_VAR 0 1
69442: PUSH
69443: LD_INT 4
69445: PLUS
69446: PUSH
69447: LD_VAR 0 2
69451: PUSH
69452: LD_INT 4
69454: PLUS
69455: PUSH
69456: LD_INT 5
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: LIST
69463: PUSH
69464: LD_VAR 0 1
69468: PUSH
69469: LD_INT 4
69471: MINUS
69472: PUSH
69473: LD_VAR 0 2
69477: PUSH
69478: LD_INT 1
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: LIST
69485: PUSH
69486: LD_VAR 0 1
69490: PUSH
69491: LD_VAR 0 2
69495: PUSH
69496: LD_INT 4
69498: MINUS
69499: PUSH
69500: LD_INT 3
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: LIST
69507: PUSH
69508: LD_VAR 0 1
69512: PUSH
69513: LD_INT 3
69515: MINUS
69516: PUSH
69517: LD_VAR 0 2
69521: PUSH
69522: LD_INT 3
69524: MINUS
69525: PUSH
69526: LD_INT 2
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: LIST
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: ST_TO_ADDR
// end ; 4 :
69541: GO 69822
69543: LD_INT 4
69545: DOUBLE
69546: EQUAL
69547: IFTRUE 69551
69549: GO 69684
69551: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69552: LD_ADDR_VAR 0 5
69556: PUSH
69557: LD_VAR 0 1
69561: PUSH
69562: LD_VAR 0 2
69566: PUSH
69567: LD_INT 4
69569: PLUS
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: LIST
69578: PUSH
69579: LD_VAR 0 1
69583: PUSH
69584: LD_INT 3
69586: PLUS
69587: PUSH
69588: LD_VAR 0 2
69592: PUSH
69593: LD_INT 3
69595: PLUS
69596: PUSH
69597: LD_INT 5
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: LIST
69604: PUSH
69605: LD_VAR 0 1
69609: PUSH
69610: LD_INT 4
69612: PLUS
69613: PUSH
69614: LD_VAR 0 2
69618: PUSH
69619: LD_INT 4
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: LIST
69626: PUSH
69627: LD_VAR 0 1
69631: PUSH
69632: LD_VAR 0 2
69636: PUSH
69637: LD_INT 3
69639: MINUS
69640: PUSH
69641: LD_INT 3
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: LIST
69648: PUSH
69649: LD_VAR 0 1
69653: PUSH
69654: LD_INT 4
69656: MINUS
69657: PUSH
69658: LD_VAR 0 2
69662: PUSH
69663: LD_INT 4
69665: MINUS
69666: PUSH
69667: LD_INT 2
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: LIST
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: ST_TO_ADDR
// end ; 5 :
69682: GO 69822
69684: LD_INT 5
69686: DOUBLE
69687: EQUAL
69688: IFTRUE 69692
69690: GO 69821
69692: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69693: LD_ADDR_VAR 0 5
69697: PUSH
69698: LD_VAR 0 1
69702: PUSH
69703: LD_INT 4
69705: MINUS
69706: PUSH
69707: LD_VAR 0 2
69711: PUSH
69712: LD_INT 1
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: LIST
69719: PUSH
69720: LD_VAR 0 1
69724: PUSH
69725: LD_VAR 0 2
69729: PUSH
69730: LD_INT 4
69732: MINUS
69733: PUSH
69734: LD_INT 3
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: PUSH
69742: LD_VAR 0 1
69746: PUSH
69747: LD_INT 4
69749: PLUS
69750: PUSH
69751: LD_VAR 0 2
69755: PUSH
69756: LD_INT 4
69758: PLUS
69759: PUSH
69760: LD_INT 5
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: LIST
69767: PUSH
69768: LD_VAR 0 1
69772: PUSH
69773: LD_INT 3
69775: PLUS
69776: PUSH
69777: LD_VAR 0 2
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: LIST
69789: PUSH
69790: LD_VAR 0 1
69794: PUSH
69795: LD_VAR 0 2
69799: PUSH
69800: LD_INT 3
69802: PLUS
69803: PUSH
69804: LD_INT 0
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: LIST
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: ST_TO_ADDR
// end ; end ;
69819: GO 69822
69821: POP
// result := list ;
69822: LD_ADDR_VAR 0 4
69826: PUSH
69827: LD_VAR 0 5
69831: ST_TO_ADDR
// end ;
69832: LD_VAR 0 4
69836: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69837: LD_INT 0
69839: PPUSH
69840: PPUSH
69841: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69842: LD_VAR 0 1
69846: NOT
69847: IFTRUE 69875
69849: PUSH
69850: LD_VAR 0 2
69854: PUSH
69855: LD_INT 1
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: LD_INT 3
69863: PUSH
69864: LD_INT 4
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: IN
69873: NOT
69874: OR
69875: IFFALSE 69879
// exit ;
69877: GO 69962
// tmp := [ ] ;
69879: LD_ADDR_VAR 0 5
69883: PUSH
69884: EMPTY
69885: ST_TO_ADDR
// for i in units do
69886: LD_ADDR_VAR 0 4
69890: PUSH
69891: LD_VAR 0 1
69895: PUSH
69896: FOR_IN
69897: IFFALSE 69931
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69899: LD_ADDR_VAR 0 5
69903: PUSH
69904: LD_VAR 0 5
69908: PPUSH
69909: LD_VAR 0 4
69913: PPUSH
69914: LD_VAR 0 2
69918: PPUSH
69919: CALL_OW 259
69923: PPUSH
69924: CALL 71357 0 2
69928: ST_TO_ADDR
69929: GO 69896
69931: POP
69932: POP
// if not tmp then
69933: LD_VAR 0 5
69937: NOT
69938: IFFALSE 69942
// exit ;
69940: GO 69962
// result := SortListByListDesc ( units , tmp ) ;
69942: LD_ADDR_VAR 0 3
69946: PUSH
69947: LD_VAR 0 1
69951: PPUSH
69952: LD_VAR 0 5
69956: PPUSH
69957: CALL_OW 77
69961: ST_TO_ADDR
// end ;
69962: LD_VAR 0 3
69966: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69967: LD_INT 0
69969: PPUSH
69970: PPUSH
69971: PPUSH
// result := false ;
69972: LD_ADDR_VAR 0 3
69976: PUSH
69977: LD_INT 0
69979: ST_TO_ADDR
// if not building then
69980: LD_VAR 0 2
69984: NOT
69985: IFFALSE 69989
// exit ;
69987: GO 70133
// x := GetX ( building ) ;
69989: LD_ADDR_VAR 0 4
69993: PUSH
69994: LD_VAR 0 2
69998: PPUSH
69999: CALL_OW 250
70003: ST_TO_ADDR
// y := GetY ( building ) ;
70004: LD_ADDR_VAR 0 5
70008: PUSH
70009: LD_VAR 0 2
70013: PPUSH
70014: CALL_OW 251
70018: ST_TO_ADDR
// if not x or not y then
70019: LD_VAR 0 4
70023: NOT
70024: IFTRUE 70033
70026: PUSH
70027: LD_VAR 0 5
70031: NOT
70032: OR
70033: IFFALSE 70037
// exit ;
70035: GO 70133
// if GetTaskList ( unit ) then
70037: LD_VAR 0 1
70041: PPUSH
70042: CALL_OW 437
70046: IFFALSE 70133
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70048: LD_STRING e
70050: PUSH
70051: LD_VAR 0 1
70055: PPUSH
70056: CALL_OW 437
70060: PUSH
70061: LD_INT 1
70063: ARRAY
70064: PUSH
70065: LD_INT 1
70067: ARRAY
70068: EQUAL
70069: IFFALSE 70096
70071: PUSH
70072: LD_VAR 0 4
70076: PUSH
70077: LD_VAR 0 1
70081: PPUSH
70082: CALL_OW 437
70086: PUSH
70087: LD_INT 1
70089: ARRAY
70090: PUSH
70091: LD_INT 2
70093: ARRAY
70094: EQUAL
70095: AND
70096: IFFALSE 70123
70098: PUSH
70099: LD_VAR 0 5
70103: PUSH
70104: LD_VAR 0 1
70108: PPUSH
70109: CALL_OW 437
70113: PUSH
70114: LD_INT 1
70116: ARRAY
70117: PUSH
70118: LD_INT 3
70120: ARRAY
70121: EQUAL
70122: AND
70123: IFFALSE 70133
// result := true end ;
70125: LD_ADDR_VAR 0 3
70129: PUSH
70130: LD_INT 1
70132: ST_TO_ADDR
// end ;
70133: LD_VAR 0 3
70137: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70138: LD_INT 0
70140: PPUSH
// result := false ;
70141: LD_ADDR_VAR 0 4
70145: PUSH
70146: LD_INT 0
70148: ST_TO_ADDR
// if GetTaskList ( unit ) then
70149: LD_VAR 0 1
70153: PPUSH
70154: CALL_OW 437
70158: IFFALSE 70245
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70160: LD_STRING M
70162: PUSH
70163: LD_VAR 0 1
70167: PPUSH
70168: CALL_OW 437
70172: PUSH
70173: LD_INT 1
70175: ARRAY
70176: PUSH
70177: LD_INT 1
70179: ARRAY
70180: EQUAL
70181: IFFALSE 70208
70183: PUSH
70184: LD_VAR 0 2
70188: PUSH
70189: LD_VAR 0 1
70193: PPUSH
70194: CALL_OW 437
70198: PUSH
70199: LD_INT 1
70201: ARRAY
70202: PUSH
70203: LD_INT 2
70205: ARRAY
70206: EQUAL
70207: AND
70208: IFFALSE 70235
70210: PUSH
70211: LD_VAR 0 3
70215: PUSH
70216: LD_VAR 0 1
70220: PPUSH
70221: CALL_OW 437
70225: PUSH
70226: LD_INT 1
70228: ARRAY
70229: PUSH
70230: LD_INT 3
70232: ARRAY
70233: EQUAL
70234: AND
70235: IFFALSE 70245
// result := true ;
70237: LD_ADDR_VAR 0 4
70241: PUSH
70242: LD_INT 1
70244: ST_TO_ADDR
// end ; end ;
70245: LD_VAR 0 4
70249: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70250: LD_INT 0
70252: PPUSH
70253: PPUSH
70254: PPUSH
70255: PPUSH
// if not unit or not area then
70256: LD_VAR 0 1
70260: NOT
70261: IFTRUE 70270
70263: PUSH
70264: LD_VAR 0 2
70268: NOT
70269: OR
70270: IFFALSE 70274
// exit ;
70272: GO 70450
// tmp := AreaToList ( area , i ) ;
70274: LD_ADDR_VAR 0 6
70278: PUSH
70279: LD_VAR 0 2
70283: PPUSH
70284: LD_VAR 0 5
70288: PPUSH
70289: CALL_OW 517
70293: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70294: LD_ADDR_VAR 0 5
70298: PUSH
70299: DOUBLE
70300: LD_INT 1
70302: DEC
70303: ST_TO_ADDR
70304: LD_VAR 0 6
70308: PUSH
70309: LD_INT 1
70311: ARRAY
70312: PUSH
70313: FOR_TO
70314: IFFALSE 70448
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70316: LD_ADDR_VAR 0 7
70320: PUSH
70321: LD_VAR 0 6
70325: PUSH
70326: LD_INT 1
70328: ARRAY
70329: PUSH
70330: LD_VAR 0 5
70334: ARRAY
70335: PUSH
70336: LD_VAR 0 6
70340: PUSH
70341: LD_INT 2
70343: ARRAY
70344: PUSH
70345: LD_VAR 0 5
70349: ARRAY
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70355: LD_INT 92
70357: PUSH
70358: LD_VAR 0 7
70362: PUSH
70363: LD_INT 1
70365: ARRAY
70366: PUSH
70367: LD_VAR 0 7
70371: PUSH
70372: LD_INT 2
70374: ARRAY
70375: PUSH
70376: LD_INT 2
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: PPUSH
70385: CALL_OW 69
70389: PUSH
70390: LD_INT 0
70392: EQUAL
70393: IFFALSE 70446
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70395: LD_VAR 0 1
70399: PPUSH
70400: LD_VAR 0 7
70404: PUSH
70405: LD_INT 1
70407: ARRAY
70408: PPUSH
70409: LD_VAR 0 7
70413: PUSH
70414: LD_INT 2
70416: ARRAY
70417: PPUSH
70418: LD_VAR 0 3
70422: PPUSH
70423: CALL_OW 48
// result := IsPlaced ( unit ) ;
70427: LD_ADDR_VAR 0 4
70431: PUSH
70432: LD_VAR 0 1
70436: PPUSH
70437: CALL_OW 305
70441: ST_TO_ADDR
// exit ;
70442: POP
70443: POP
70444: GO 70450
// end ; end ;
70446: GO 70313
70448: POP
70449: POP
// end ;
70450: LD_VAR 0 4
70454: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70455: LD_INT 0
70457: PPUSH
70458: PPUSH
70459: PPUSH
// if not side or side > 8 then
70460: LD_VAR 0 1
70464: NOT
70465: IFTRUE 70477
70467: PUSH
70468: LD_VAR 0 1
70472: PUSH
70473: LD_INT 8
70475: GREATER
70476: OR
70477: IFFALSE 70481
// exit ;
70479: GO 70668
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70481: LD_ADDR_VAR 0 4
70485: PUSH
70486: LD_INT 22
70488: PUSH
70489: LD_VAR 0 1
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 21
70500: PUSH
70501: LD_INT 3
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PPUSH
70512: CALL_OW 69
70516: ST_TO_ADDR
// if not tmp then
70517: LD_VAR 0 4
70521: NOT
70522: IFFALSE 70526
// exit ;
70524: GO 70668
// enable_addtolog := true ;
70526: LD_ADDR_OWVAR 81
70530: PUSH
70531: LD_INT 1
70533: ST_TO_ADDR
// AddToLog ( [ ) ;
70534: LD_STRING [
70536: PPUSH
70537: CALL_OW 561
// for i in tmp do
70541: LD_ADDR_VAR 0 3
70545: PUSH
70546: LD_VAR 0 4
70550: PUSH
70551: FOR_IN
70552: IFFALSE 70659
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70554: LD_STRING [
70556: PUSH
70557: LD_VAR 0 3
70561: PPUSH
70562: CALL_OW 266
70566: STR
70567: PUSH
70568: LD_STRING , 
70570: STR
70571: PUSH
70572: LD_VAR 0 3
70576: PPUSH
70577: CALL_OW 250
70581: STR
70582: PUSH
70583: LD_STRING , 
70585: STR
70586: PUSH
70587: LD_VAR 0 3
70591: PPUSH
70592: CALL_OW 251
70596: STR
70597: PUSH
70598: LD_STRING , 
70600: STR
70601: PUSH
70602: LD_VAR 0 3
70606: PPUSH
70607: CALL_OW 254
70611: STR
70612: PUSH
70613: LD_STRING , 
70615: STR
70616: PUSH
70617: LD_VAR 0 3
70621: PPUSH
70622: LD_INT 1
70624: PPUSH
70625: CALL_OW 268
70629: STR
70630: PUSH
70631: LD_STRING , 
70633: STR
70634: PUSH
70635: LD_VAR 0 3
70639: PPUSH
70640: LD_INT 2
70642: PPUSH
70643: CALL_OW 268
70647: STR
70648: PUSH
70649: LD_STRING ],
70651: STR
70652: PPUSH
70653: CALL_OW 561
// end ;
70657: GO 70551
70659: POP
70660: POP
// AddToLog ( ]; ) ;
70661: LD_STRING ];
70663: PPUSH
70664: CALL_OW 561
// end ;
70668: LD_VAR 0 2
70672: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70673: LD_INT 0
70675: PPUSH
70676: PPUSH
70677: PPUSH
70678: PPUSH
70679: PPUSH
// if not area or not rate or not max then
70680: LD_VAR 0 1
70684: NOT
70685: IFTRUE 70694
70687: PUSH
70688: LD_VAR 0 2
70692: NOT
70693: OR
70694: IFTRUE 70703
70696: PUSH
70697: LD_VAR 0 4
70701: NOT
70702: OR
70703: IFFALSE 70707
// exit ;
70705: GO 70896
// while 1 do
70707: LD_INT 1
70709: IFFALSE 70896
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70711: LD_ADDR_VAR 0 9
70715: PUSH
70716: LD_VAR 0 1
70720: PPUSH
70721: LD_INT 1
70723: PPUSH
70724: CALL_OW 287
70728: PUSH
70729: LD_INT 10
70731: MUL
70732: ST_TO_ADDR
// r := rate / 10 ;
70733: LD_ADDR_VAR 0 7
70737: PUSH
70738: LD_VAR 0 2
70742: PUSH
70743: LD_INT 10
70745: DIVREAL
70746: ST_TO_ADDR
// time := 1 1$00 ;
70747: LD_ADDR_VAR 0 8
70751: PUSH
70752: LD_INT 2100
70754: ST_TO_ADDR
// if amount < min then
70755: LD_VAR 0 9
70759: PUSH
70760: LD_VAR 0 3
70764: LESS
70765: IFFALSE 70783
// r := r * 2 else
70767: LD_ADDR_VAR 0 7
70771: PUSH
70772: LD_VAR 0 7
70776: PUSH
70777: LD_INT 2
70779: MUL
70780: ST_TO_ADDR
70781: GO 70809
// if amount > max then
70783: LD_VAR 0 9
70787: PUSH
70788: LD_VAR 0 4
70792: GREATER
70793: IFFALSE 70809
// r := r / 2 ;
70795: LD_ADDR_VAR 0 7
70799: PUSH
70800: LD_VAR 0 7
70804: PUSH
70805: LD_INT 2
70807: DIVREAL
70808: ST_TO_ADDR
// time := time / r ;
70809: LD_ADDR_VAR 0 8
70813: PUSH
70814: LD_VAR 0 8
70818: PUSH
70819: LD_VAR 0 7
70823: DIVREAL
70824: ST_TO_ADDR
// if time < 0 then
70825: LD_VAR 0 8
70829: PUSH
70830: LD_INT 0
70832: LESS
70833: IFFALSE 70850
// time := time * - 1 ;
70835: LD_ADDR_VAR 0 8
70839: PUSH
70840: LD_VAR 0 8
70844: PUSH
70845: LD_INT 1
70847: NEG
70848: MUL
70849: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70850: LD_VAR 0 8
70854: PUSH
70855: LD_INT 35
70857: PPUSH
70858: LD_INT 875
70860: PPUSH
70861: CALL_OW 12
70865: PLUS
70866: PPUSH
70867: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70871: LD_INT 1
70873: PPUSH
70874: LD_INT 5
70876: PPUSH
70877: CALL_OW 12
70881: PPUSH
70882: LD_VAR 0 1
70886: PPUSH
70887: LD_INT 1
70889: PPUSH
70890: CALL_OW 55
// end ;
70894: GO 70707
// end ;
70896: LD_VAR 0 5
70900: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70901: LD_INT 0
70903: PPUSH
70904: PPUSH
70905: PPUSH
70906: PPUSH
70907: PPUSH
70908: PPUSH
70909: PPUSH
70910: PPUSH
// if not turrets or not factories then
70911: LD_VAR 0 1
70915: NOT
70916: IFTRUE 70925
70918: PUSH
70919: LD_VAR 0 2
70923: NOT
70924: OR
70925: IFFALSE 70929
// exit ;
70927: GO 71236
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70929: LD_ADDR_VAR 0 10
70933: PUSH
70934: LD_INT 5
70936: PUSH
70937: LD_INT 6
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 2
70946: PUSH
70947: LD_INT 4
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 3
70956: PUSH
70957: LD_INT 5
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 24
70971: PUSH
70972: LD_INT 25
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 23
70981: PUSH
70982: LD_INT 27
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 42
70995: PUSH
70996: LD_INT 43
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 44
71005: PUSH
71006: LD_INT 46
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 45
71015: PUSH
71016: LD_INT 47
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: LIST
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: LIST
71032: ST_TO_ADDR
// result := [ ] ;
71033: LD_ADDR_VAR 0 3
71037: PUSH
71038: EMPTY
71039: ST_TO_ADDR
// for i in turrets do
71040: LD_ADDR_VAR 0 4
71044: PUSH
71045: LD_VAR 0 1
71049: PUSH
71050: FOR_IN
71051: IFFALSE 71234
// begin nat := GetNation ( i ) ;
71053: LD_ADDR_VAR 0 7
71057: PUSH
71058: LD_VAR 0 4
71062: PPUSH
71063: CALL_OW 248
71067: ST_TO_ADDR
// weapon := 0 ;
71068: LD_ADDR_VAR 0 8
71072: PUSH
71073: LD_INT 0
71075: ST_TO_ADDR
// if not nat then
71076: LD_VAR 0 7
71080: NOT
71081: IFFALSE 71085
// continue ;
71083: GO 71050
// for j in list [ nat ] do
71085: LD_ADDR_VAR 0 5
71089: PUSH
71090: LD_VAR 0 10
71094: PUSH
71095: LD_VAR 0 7
71099: ARRAY
71100: PUSH
71101: FOR_IN
71102: IFFALSE 71143
// if GetBWeapon ( i ) = j [ 1 ] then
71104: LD_VAR 0 4
71108: PPUSH
71109: CALL_OW 269
71113: PUSH
71114: LD_VAR 0 5
71118: PUSH
71119: LD_INT 1
71121: ARRAY
71122: EQUAL
71123: IFFALSE 71141
// begin weapon := j [ 2 ] ;
71125: LD_ADDR_VAR 0 8
71129: PUSH
71130: LD_VAR 0 5
71134: PUSH
71135: LD_INT 2
71137: ARRAY
71138: ST_TO_ADDR
// break ;
71139: GO 71143
// end ;
71141: GO 71101
71143: POP
71144: POP
// if not weapon then
71145: LD_VAR 0 8
71149: NOT
71150: IFFALSE 71154
// continue ;
71152: GO 71050
// for k in factories do
71154: LD_ADDR_VAR 0 6
71158: PUSH
71159: LD_VAR 0 2
71163: PUSH
71164: FOR_IN
71165: IFFALSE 71230
// begin weapons := AvailableWeaponList ( k ) ;
71167: LD_ADDR_VAR 0 9
71171: PUSH
71172: LD_VAR 0 6
71176: PPUSH
71177: CALL_OW 478
71181: ST_TO_ADDR
// if not weapons then
71182: LD_VAR 0 9
71186: NOT
71187: IFFALSE 71191
// continue ;
71189: GO 71164
// if weapon in weapons then
71191: LD_VAR 0 8
71195: PUSH
71196: LD_VAR 0 9
71200: IN
71201: IFFALSE 71228
// begin result := [ i , weapon ] ;
71203: LD_ADDR_VAR 0 3
71207: PUSH
71208: LD_VAR 0 4
71212: PUSH
71213: LD_VAR 0 8
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: ST_TO_ADDR
// exit ;
71222: POP
71223: POP
71224: POP
71225: POP
71226: GO 71236
// end ; end ;
71228: GO 71164
71230: POP
71231: POP
// end ;
71232: GO 71050
71234: POP
71235: POP
// end ;
71236: LD_VAR 0 3
71240: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71241: LD_INT 0
71243: PPUSH
// if not side or side > 8 then
71244: LD_VAR 0 3
71248: NOT
71249: IFTRUE 71261
71251: PUSH
71252: LD_VAR 0 3
71256: PUSH
71257: LD_INT 8
71259: GREATER
71260: OR
71261: IFFALSE 71265
// exit ;
71263: GO 71324
// if not range then
71265: LD_VAR 0 4
71269: NOT
71270: IFFALSE 71281
// range := - 12 ;
71272: LD_ADDR_VAR 0 4
71276: PUSH
71277: LD_INT 12
71279: NEG
71280: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71281: LD_VAR 0 1
71285: PPUSH
71286: LD_VAR 0 2
71290: PPUSH
71291: LD_VAR 0 3
71295: PPUSH
71296: LD_VAR 0 4
71300: PPUSH
71301: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71305: LD_VAR 0 1
71309: PPUSH
71310: LD_VAR 0 2
71314: PPUSH
71315: LD_VAR 0 3
71319: PPUSH
71320: CALL_OW 331
// end ;
71324: LD_VAR 0 5
71328: RET
// export function Video ( mode ) ; begin
71329: LD_INT 0
71331: PPUSH
// ingame_video = mode ;
71332: LD_ADDR_OWVAR 52
71336: PUSH
71337: LD_VAR 0 1
71341: ST_TO_ADDR
// interface_hidden = mode ;
71342: LD_ADDR_OWVAR 54
71346: PUSH
71347: LD_VAR 0 1
71351: ST_TO_ADDR
// end ;
71352: LD_VAR 0 2
71356: RET
// export function Join ( array , element ) ; begin
71357: LD_INT 0
71359: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71360: LD_ADDR_VAR 0 3
71364: PUSH
71365: LD_VAR 0 1
71369: PPUSH
71370: LD_VAR 0 1
71374: PUSH
71375: LD_INT 1
71377: PLUS
71378: PPUSH
71379: LD_VAR 0 2
71383: PPUSH
71384: CALL_OW 1
71388: ST_TO_ADDR
// end ;
71389: LD_VAR 0 3
71393: RET
// export function JoinUnion ( array , element ) ; begin
71394: LD_INT 0
71396: PPUSH
// result := array union element ;
71397: LD_ADDR_VAR 0 3
71401: PUSH
71402: LD_VAR 0 1
71406: PUSH
71407: LD_VAR 0 2
71411: UNION
71412: ST_TO_ADDR
// end ;
71413: LD_VAR 0 3
71417: RET
// export function GetBehemoths ( side ) ; begin
71418: LD_INT 0
71420: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71421: LD_ADDR_VAR 0 2
71425: PUSH
71426: LD_INT 22
71428: PUSH
71429: LD_VAR 0 1
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 31
71440: PUSH
71441: LD_INT 25
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PPUSH
71452: CALL_OW 69
71456: ST_TO_ADDR
// end ;
71457: LD_VAR 0 2
71461: RET
// export function Shuffle ( array ) ; var i , index ; begin
71462: LD_INT 0
71464: PPUSH
71465: PPUSH
71466: PPUSH
// result := [ ] ;
71467: LD_ADDR_VAR 0 2
71471: PUSH
71472: EMPTY
71473: ST_TO_ADDR
// if not array then
71474: LD_VAR 0 1
71478: NOT
71479: IFFALSE 71483
// exit ;
71481: GO 71582
// Randomize ;
71483: CALL_OW 10
// for i = array downto 1 do
71487: LD_ADDR_VAR 0 3
71491: PUSH
71492: DOUBLE
71493: LD_VAR 0 1
71497: INC
71498: ST_TO_ADDR
71499: LD_INT 1
71501: PUSH
71502: FOR_DOWNTO
71503: IFFALSE 71580
// begin index := rand ( 1 , array ) ;
71505: LD_ADDR_VAR 0 4
71509: PUSH
71510: LD_INT 1
71512: PPUSH
71513: LD_VAR 0 1
71517: PPUSH
71518: CALL_OW 12
71522: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71523: LD_ADDR_VAR 0 2
71527: PUSH
71528: LD_VAR 0 2
71532: PPUSH
71533: LD_VAR 0 2
71537: PUSH
71538: LD_INT 1
71540: PLUS
71541: PPUSH
71542: LD_VAR 0 1
71546: PUSH
71547: LD_VAR 0 4
71551: ARRAY
71552: PPUSH
71553: CALL_OW 2
71557: ST_TO_ADDR
// array := Delete ( array , index ) ;
71558: LD_ADDR_VAR 0 1
71562: PUSH
71563: LD_VAR 0 1
71567: PPUSH
71568: LD_VAR 0 4
71572: PPUSH
71573: CALL_OW 3
71577: ST_TO_ADDR
// end ;
71578: GO 71502
71580: POP
71581: POP
// end ;
71582: LD_VAR 0 2
71586: RET
// export function GetBaseMaterials ( base ) ; begin
71587: LD_INT 0
71589: PPUSH
// result := [ 0 , 0 , 0 ] ;
71590: LD_ADDR_VAR 0 2
71594: PUSH
71595: LD_INT 0
71597: PUSH
71598: LD_INT 0
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: LIST
71608: ST_TO_ADDR
// if not base then
71609: LD_VAR 0 1
71613: NOT
71614: IFFALSE 71618
// exit ;
71616: GO 71667
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71618: LD_ADDR_VAR 0 2
71622: PUSH
71623: LD_VAR 0 1
71627: PPUSH
71628: LD_INT 1
71630: PPUSH
71631: CALL_OW 275
71635: PUSH
71636: LD_VAR 0 1
71640: PPUSH
71641: LD_INT 2
71643: PPUSH
71644: CALL_OW 275
71648: PUSH
71649: LD_VAR 0 1
71653: PPUSH
71654: LD_INT 3
71656: PPUSH
71657: CALL_OW 275
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: LIST
71666: ST_TO_ADDR
// end ;
71667: LD_VAR 0 2
71671: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71672: LD_INT 0
71674: PPUSH
71675: PPUSH
// result := array ;
71676: LD_ADDR_VAR 0 3
71680: PUSH
71681: LD_VAR 0 1
71685: ST_TO_ADDR
// if size >= result then
71686: LD_VAR 0 2
71690: PUSH
71691: LD_VAR 0 3
71695: GREATEREQUAL
71696: IFFALSE 71700
// exit ;
71698: GO 71750
// if size then
71700: LD_VAR 0 2
71704: IFFALSE 71750
// for i := array downto size do
71706: LD_ADDR_VAR 0 4
71710: PUSH
71711: DOUBLE
71712: LD_VAR 0 1
71716: INC
71717: ST_TO_ADDR
71718: LD_VAR 0 2
71722: PUSH
71723: FOR_DOWNTO
71724: IFFALSE 71748
// result := Delete ( result , result ) ;
71726: LD_ADDR_VAR 0 3
71730: PUSH
71731: LD_VAR 0 3
71735: PPUSH
71736: LD_VAR 0 3
71740: PPUSH
71741: CALL_OW 3
71745: ST_TO_ADDR
71746: GO 71723
71748: POP
71749: POP
// end ;
71750: LD_VAR 0 3
71754: RET
// export function ComExit ( unit ) ; var tmp ; begin
71755: LD_INT 0
71757: PPUSH
71758: PPUSH
// if not IsInUnit ( unit ) then
71759: LD_VAR 0 1
71763: PPUSH
71764: CALL_OW 310
71768: NOT
71769: IFFALSE 71773
// exit ;
71771: GO 71833
// tmp := IsInUnit ( unit ) ;
71773: LD_ADDR_VAR 0 3
71777: PUSH
71778: LD_VAR 0 1
71782: PPUSH
71783: CALL_OW 310
71787: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71788: LD_VAR 0 3
71792: PPUSH
71793: CALL_OW 247
71797: PUSH
71798: LD_INT 2
71800: EQUAL
71801: IFFALSE 71814
// ComExitVehicle ( unit ) else
71803: LD_VAR 0 1
71807: PPUSH
71808: CALL_OW 121
71812: GO 71823
// ComExitBuilding ( unit ) ;
71814: LD_VAR 0 1
71818: PPUSH
71819: CALL_OW 122
// result := tmp ;
71823: LD_ADDR_VAR 0 2
71827: PUSH
71828: LD_VAR 0 3
71832: ST_TO_ADDR
// end ;
71833: LD_VAR 0 2
71837: RET
// export function ComExitAll ( units ) ; var i ; begin
71838: LD_INT 0
71840: PPUSH
71841: PPUSH
// if not units then
71842: LD_VAR 0 1
71846: NOT
71847: IFFALSE 71851
// exit ;
71849: GO 71877
// for i in units do
71851: LD_ADDR_VAR 0 3
71855: PUSH
71856: LD_VAR 0 1
71860: PUSH
71861: FOR_IN
71862: IFFALSE 71875
// ComExit ( i ) ;
71864: LD_VAR 0 3
71868: PPUSH
71869: CALL 71755 0 1
71873: GO 71861
71875: POP
71876: POP
// end ;
71877: LD_VAR 0 2
71881: RET
// export function ResetHc ; begin
71882: LD_INT 0
71884: PPUSH
// InitHc ;
71885: CALL_OW 19
// hc_importance := 0 ;
71889: LD_ADDR_OWVAR 32
71893: PUSH
71894: LD_INT 0
71896: ST_TO_ADDR
// end ;
71897: LD_VAR 0 1
71901: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71902: LD_INT 0
71904: PPUSH
71905: PPUSH
71906: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71907: LD_ADDR_VAR 0 6
71911: PUSH
71912: LD_VAR 0 1
71916: PUSH
71917: LD_VAR 0 3
71921: PLUS
71922: PUSH
71923: LD_INT 2
71925: DIV
71926: ST_TO_ADDR
// if _x < 0 then
71927: LD_VAR 0 6
71931: PUSH
71932: LD_INT 0
71934: LESS
71935: IFFALSE 71952
// _x := _x * - 1 ;
71937: LD_ADDR_VAR 0 6
71941: PUSH
71942: LD_VAR 0 6
71946: PUSH
71947: LD_INT 1
71949: NEG
71950: MUL
71951: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71952: LD_ADDR_VAR 0 7
71956: PUSH
71957: LD_VAR 0 2
71961: PUSH
71962: LD_VAR 0 4
71966: PLUS
71967: PUSH
71968: LD_INT 2
71970: DIV
71971: ST_TO_ADDR
// if _y < 0 then
71972: LD_VAR 0 7
71976: PUSH
71977: LD_INT 0
71979: LESS
71980: IFFALSE 71997
// _y := _y * - 1 ;
71982: LD_ADDR_VAR 0 7
71986: PUSH
71987: LD_VAR 0 7
71991: PUSH
71992: LD_INT 1
71994: NEG
71995: MUL
71996: ST_TO_ADDR
// result := [ _x , _y ] ;
71997: LD_ADDR_VAR 0 5
72001: PUSH
72002: LD_VAR 0 6
72006: PUSH
72007: LD_VAR 0 7
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: ST_TO_ADDR
// end ;
72016: LD_VAR 0 5
72020: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72021: LD_INT 0
72023: PPUSH
72024: PPUSH
72025: PPUSH
72026: PPUSH
// task := GetTaskList ( unit ) ;
72027: LD_ADDR_VAR 0 7
72031: PUSH
72032: LD_VAR 0 1
72036: PPUSH
72037: CALL_OW 437
72041: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72042: LD_VAR 0 7
72046: NOT
72047: IFFALSE 72066
72049: PUSH
72050: LD_VAR 0 1
72054: PPUSH
72055: LD_VAR 0 2
72059: PPUSH
72060: CALL_OW 308
72064: NOT
72065: AND
72066: IFFALSE 72070
// exit ;
72068: GO 72188
// if IsInArea ( unit , area ) then
72070: LD_VAR 0 1
72074: PPUSH
72075: LD_VAR 0 2
72079: PPUSH
72080: CALL_OW 308
72084: IFFALSE 72102
// begin ComMoveToArea ( unit , goAway ) ;
72086: LD_VAR 0 1
72090: PPUSH
72091: LD_VAR 0 3
72095: PPUSH
72096: CALL_OW 113
// exit ;
72100: GO 72188
// end ; if task [ 1 ] [ 1 ] <> M then
72102: LD_VAR 0 7
72106: PUSH
72107: LD_INT 1
72109: ARRAY
72110: PUSH
72111: LD_INT 1
72113: ARRAY
72114: PUSH
72115: LD_STRING M
72117: NONEQUAL
72118: IFFALSE 72122
// exit ;
72120: GO 72188
// x := task [ 1 ] [ 2 ] ;
72122: LD_ADDR_VAR 0 5
72126: PUSH
72127: LD_VAR 0 7
72131: PUSH
72132: LD_INT 1
72134: ARRAY
72135: PUSH
72136: LD_INT 2
72138: ARRAY
72139: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72140: LD_ADDR_VAR 0 6
72144: PUSH
72145: LD_VAR 0 7
72149: PUSH
72150: LD_INT 1
72152: ARRAY
72153: PUSH
72154: LD_INT 3
72156: ARRAY
72157: ST_TO_ADDR
// if InArea ( x , y , area ) then
72158: LD_VAR 0 5
72162: PPUSH
72163: LD_VAR 0 6
72167: PPUSH
72168: LD_VAR 0 2
72172: PPUSH
72173: CALL_OW 309
72177: IFFALSE 72188
// ComStop ( unit ) ;
72179: LD_VAR 0 1
72183: PPUSH
72184: CALL_OW 141
// end ;
72188: LD_VAR 0 4
72192: RET
// export function Abs ( value ) ; begin
72193: LD_INT 0
72195: PPUSH
// result := value ;
72196: LD_ADDR_VAR 0 2
72200: PUSH
72201: LD_VAR 0 1
72205: ST_TO_ADDR
// if value < 0 then
72206: LD_VAR 0 1
72210: PUSH
72211: LD_INT 0
72213: LESS
72214: IFFALSE 72231
// result := value * - 1 ;
72216: LD_ADDR_VAR 0 2
72220: PUSH
72221: LD_VAR 0 1
72225: PUSH
72226: LD_INT 1
72228: NEG
72229: MUL
72230: ST_TO_ADDR
// end ;
72231: LD_VAR 0 2
72235: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72236: LD_INT 0
72238: PPUSH
72239: PPUSH
72240: PPUSH
72241: PPUSH
72242: PPUSH
72243: PPUSH
72244: PPUSH
72245: PPUSH
// if not unit or not building then
72246: LD_VAR 0 1
72250: NOT
72251: IFTRUE 72260
72253: PUSH
72254: LD_VAR 0 2
72258: NOT
72259: OR
72260: IFFALSE 72264
// exit ;
72262: GO 72492
// x := GetX ( building ) ;
72264: LD_ADDR_VAR 0 4
72268: PUSH
72269: LD_VAR 0 2
72273: PPUSH
72274: CALL_OW 250
72278: ST_TO_ADDR
// y := GetY ( building ) ;
72279: LD_ADDR_VAR 0 6
72283: PUSH
72284: LD_VAR 0 2
72288: PPUSH
72289: CALL_OW 251
72293: ST_TO_ADDR
// d := GetDir ( building ) ;
72294: LD_ADDR_VAR 0 8
72298: PUSH
72299: LD_VAR 0 2
72303: PPUSH
72304: CALL_OW 254
72308: ST_TO_ADDR
// r := 4 ;
72309: LD_ADDR_VAR 0 9
72313: PUSH
72314: LD_INT 4
72316: ST_TO_ADDR
// for i := 1 to 5 do
72317: LD_ADDR_VAR 0 10
72321: PUSH
72322: DOUBLE
72323: LD_INT 1
72325: DEC
72326: ST_TO_ADDR
72327: LD_INT 5
72329: PUSH
72330: FOR_TO
72331: IFFALSE 72490
// begin _x := ShiftX ( x , d , r + i ) ;
72333: LD_ADDR_VAR 0 5
72337: PUSH
72338: LD_VAR 0 4
72342: PPUSH
72343: LD_VAR 0 8
72347: PPUSH
72348: LD_VAR 0 9
72352: PUSH
72353: LD_VAR 0 10
72357: PLUS
72358: PPUSH
72359: CALL_OW 272
72363: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72364: LD_ADDR_VAR 0 7
72368: PUSH
72369: LD_VAR 0 6
72373: PPUSH
72374: LD_VAR 0 8
72378: PPUSH
72379: LD_VAR 0 9
72383: PUSH
72384: LD_VAR 0 10
72388: PLUS
72389: PPUSH
72390: CALL_OW 273
72394: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72395: LD_VAR 0 5
72399: PPUSH
72400: LD_VAR 0 7
72404: PPUSH
72405: CALL_OW 488
72409: IFFALSE 72444
72411: PUSH
72412: LD_VAR 0 5
72416: PPUSH
72417: LD_VAR 0 7
72421: PPUSH
72422: CALL_OW 428
72426: PPUSH
72427: CALL_OW 247
72431: PUSH
72432: LD_INT 3
72434: PUSH
72435: LD_INT 2
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: IN
72442: NOT
72443: AND
72444: IFFALSE 72488
// begin ComMoveXY ( unit , _x , _y ) ;
72446: LD_VAR 0 1
72450: PPUSH
72451: LD_VAR 0 5
72455: PPUSH
72456: LD_VAR 0 7
72460: PPUSH
72461: CALL_OW 111
// result := [ _x , _y ] ;
72465: LD_ADDR_VAR 0 3
72469: PUSH
72470: LD_VAR 0 5
72474: PUSH
72475: LD_VAR 0 7
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: ST_TO_ADDR
// exit ;
72484: POP
72485: POP
72486: GO 72492
// end ; end ;
72488: GO 72330
72490: POP
72491: POP
// end ;
72492: LD_VAR 0 3
72496: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72497: LD_INT 0
72499: PPUSH
72500: PPUSH
72501: PPUSH
// result := 0 ;
72502: LD_ADDR_VAR 0 3
72506: PUSH
72507: LD_INT 0
72509: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72510: LD_VAR 0 1
72514: PUSH
72515: LD_INT 0
72517: LESS
72518: IFTRUE 72530
72520: PUSH
72521: LD_VAR 0 1
72525: PUSH
72526: LD_INT 8
72528: GREATER
72529: OR
72530: IFTRUE 72542
72532: PUSH
72533: LD_VAR 0 2
72537: PUSH
72538: LD_INT 0
72540: LESS
72541: OR
72542: IFTRUE 72554
72544: PUSH
72545: LD_VAR 0 2
72549: PUSH
72550: LD_INT 8
72552: GREATER
72553: OR
72554: IFFALSE 72558
// exit ;
72556: GO 72633
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72558: LD_ADDR_VAR 0 4
72562: PUSH
72563: LD_INT 22
72565: PUSH
72566: LD_VAR 0 2
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PPUSH
72575: CALL_OW 69
72579: PUSH
72580: FOR_IN
72581: IFFALSE 72631
// begin un := UnitShoot ( i ) ;
72583: LD_ADDR_VAR 0 5
72587: PUSH
72588: LD_VAR 0 4
72592: PPUSH
72593: CALL_OW 504
72597: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72598: LD_VAR 0 5
72602: PPUSH
72603: CALL_OW 255
72607: PUSH
72608: LD_VAR 0 1
72612: EQUAL
72613: IFFALSE 72629
// begin result := un ;
72615: LD_ADDR_VAR 0 3
72619: PUSH
72620: LD_VAR 0 5
72624: ST_TO_ADDR
// exit ;
72625: POP
72626: POP
72627: GO 72633
// end ; end ;
72629: GO 72580
72631: POP
72632: POP
// end ;
72633: LD_VAR 0 3
72637: RET
// export function GetCargoBay ( units ) ; begin
72638: LD_INT 0
72640: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72641: LD_ADDR_VAR 0 2
72645: PUSH
72646: LD_VAR 0 1
72650: PPUSH
72651: LD_INT 2
72653: PUSH
72654: LD_INT 34
72656: PUSH
72657: LD_INT 12
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 34
72666: PUSH
72667: LD_INT 51
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PUSH
72674: LD_INT 34
72676: PUSH
72677: LD_INT 32
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 34
72686: PUSH
72687: LD_INT 89
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: PPUSH
72701: CALL_OW 72
72705: ST_TO_ADDR
// end ;
72706: LD_VAR 0 2
72710: RET
// export function Negate ( value ) ; begin
72711: LD_INT 0
72713: PPUSH
// result := not value ;
72714: LD_ADDR_VAR 0 2
72718: PUSH
72719: LD_VAR 0 1
72723: NOT
72724: ST_TO_ADDR
// end ;
72725: LD_VAR 0 2
72729: RET
// export function Inc ( value ) ; begin
72730: LD_INT 0
72732: PPUSH
// result := value + 1 ;
72733: LD_ADDR_VAR 0 2
72737: PUSH
72738: LD_VAR 0 1
72742: PUSH
72743: LD_INT 1
72745: PLUS
72746: ST_TO_ADDR
// end ;
72747: LD_VAR 0 2
72751: RET
// export function Dec ( value ) ; begin
72752: LD_INT 0
72754: PPUSH
// result := value - 1 ;
72755: LD_ADDR_VAR 0 2
72759: PUSH
72760: LD_VAR 0 1
72764: PUSH
72765: LD_INT 1
72767: MINUS
72768: ST_TO_ADDR
// end ;
72769: LD_VAR 0 2
72773: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72774: LD_INT 0
72776: PPUSH
72777: PPUSH
72778: PPUSH
72779: PPUSH
72780: PPUSH
72781: PPUSH
72782: PPUSH
72783: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72784: LD_VAR 0 1
72788: PPUSH
72789: LD_VAR 0 2
72793: PPUSH
72794: CALL_OW 488
72798: NOT
72799: IFTRUE 72818
72801: PUSH
72802: LD_VAR 0 3
72806: PPUSH
72807: LD_VAR 0 4
72811: PPUSH
72812: CALL_OW 488
72816: NOT
72817: OR
72818: IFFALSE 72831
// begin result := - 1 ;
72820: LD_ADDR_VAR 0 5
72824: PUSH
72825: LD_INT 1
72827: NEG
72828: ST_TO_ADDR
// exit ;
72829: GO 73066
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72831: LD_ADDR_VAR 0 12
72835: PUSH
72836: LD_VAR 0 1
72840: PPUSH
72841: LD_VAR 0 2
72845: PPUSH
72846: LD_VAR 0 3
72850: PPUSH
72851: LD_VAR 0 4
72855: PPUSH
72856: CALL 71902 0 4
72860: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72861: LD_ADDR_VAR 0 11
72865: PUSH
72866: LD_VAR 0 1
72870: PPUSH
72871: LD_VAR 0 2
72875: PPUSH
72876: LD_VAR 0 12
72880: PUSH
72881: LD_INT 1
72883: ARRAY
72884: PPUSH
72885: LD_VAR 0 12
72889: PUSH
72890: LD_INT 2
72892: ARRAY
72893: PPUSH
72894: CALL_OW 298
72898: ST_TO_ADDR
// distance := 9999 ;
72899: LD_ADDR_VAR 0 10
72903: PUSH
72904: LD_INT 9999
72906: ST_TO_ADDR
// for i := 0 to 5 do
72907: LD_ADDR_VAR 0 6
72911: PUSH
72912: DOUBLE
72913: LD_INT 0
72915: DEC
72916: ST_TO_ADDR
72917: LD_INT 5
72919: PUSH
72920: FOR_TO
72921: IFFALSE 73064
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72923: LD_ADDR_VAR 0 7
72927: PUSH
72928: LD_VAR 0 1
72932: PPUSH
72933: LD_VAR 0 6
72937: PPUSH
72938: LD_VAR 0 11
72942: PPUSH
72943: CALL_OW 272
72947: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72948: LD_ADDR_VAR 0 8
72952: PUSH
72953: LD_VAR 0 2
72957: PPUSH
72958: LD_VAR 0 6
72962: PPUSH
72963: LD_VAR 0 11
72967: PPUSH
72968: CALL_OW 273
72972: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72973: LD_VAR 0 7
72977: PPUSH
72978: LD_VAR 0 8
72982: PPUSH
72983: CALL_OW 488
72987: NOT
72988: IFFALSE 72992
// continue ;
72990: GO 72920
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72992: LD_ADDR_VAR 0 9
72996: PUSH
72997: LD_VAR 0 12
73001: PUSH
73002: LD_INT 1
73004: ARRAY
73005: PPUSH
73006: LD_VAR 0 12
73010: PUSH
73011: LD_INT 2
73013: ARRAY
73014: PPUSH
73015: LD_VAR 0 7
73019: PPUSH
73020: LD_VAR 0 8
73024: PPUSH
73025: CALL_OW 298
73029: ST_TO_ADDR
// if tmp < distance then
73030: LD_VAR 0 9
73034: PUSH
73035: LD_VAR 0 10
73039: LESS
73040: IFFALSE 73062
// begin result := i ;
73042: LD_ADDR_VAR 0 5
73046: PUSH
73047: LD_VAR 0 6
73051: ST_TO_ADDR
// distance := tmp ;
73052: LD_ADDR_VAR 0 10
73056: PUSH
73057: LD_VAR 0 9
73061: ST_TO_ADDR
// end ; end ;
73062: GO 72920
73064: POP
73065: POP
// end ;
73066: LD_VAR 0 5
73070: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73071: LD_INT 0
73073: PPUSH
73074: PPUSH
// if not driver or not IsInUnit ( driver ) then
73075: LD_VAR 0 1
73079: NOT
73080: IFTRUE 73094
73082: PUSH
73083: LD_VAR 0 1
73087: PPUSH
73088: CALL_OW 310
73092: NOT
73093: OR
73094: IFFALSE 73098
// exit ;
73096: GO 73188
// vehicle := IsInUnit ( driver ) ;
73098: LD_ADDR_VAR 0 3
73102: PUSH
73103: LD_VAR 0 1
73107: PPUSH
73108: CALL_OW 310
73112: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73113: LD_VAR 0 1
73117: PPUSH
73118: LD_STRING \
73120: PUSH
73121: LD_INT 0
73123: PUSH
73124: LD_INT 0
73126: PUSH
73127: LD_INT 0
73129: PUSH
73130: LD_INT 0
73132: PUSH
73133: LD_INT 0
73135: PUSH
73136: LD_INT 0
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: PUSH
73148: LD_STRING E
73150: PUSH
73151: LD_INT 0
73153: PUSH
73154: LD_INT 0
73156: PUSH
73157: LD_VAR 0 3
73161: PUSH
73162: LD_INT 0
73164: PUSH
73165: LD_INT 0
73167: PUSH
73168: LD_INT 0
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PPUSH
73184: CALL_OW 446
// end ;
73188: LD_VAR 0 2
73192: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73193: LD_INT 0
73195: PPUSH
73196: PPUSH
// if not driver or not IsInUnit ( driver ) then
73197: LD_VAR 0 1
73201: NOT
73202: IFTRUE 73216
73204: PUSH
73205: LD_VAR 0 1
73209: PPUSH
73210: CALL_OW 310
73214: NOT
73215: OR
73216: IFFALSE 73220
// exit ;
73218: GO 73310
// vehicle := IsInUnit ( driver ) ;
73220: LD_ADDR_VAR 0 3
73224: PUSH
73225: LD_VAR 0 1
73229: PPUSH
73230: CALL_OW 310
73234: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73235: LD_VAR 0 1
73239: PPUSH
73240: LD_STRING \
73242: PUSH
73243: LD_INT 0
73245: PUSH
73246: LD_INT 0
73248: PUSH
73249: LD_INT 0
73251: PUSH
73252: LD_INT 0
73254: PUSH
73255: LD_INT 0
73257: PUSH
73258: LD_INT 0
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: PUSH
73270: LD_STRING E
73272: PUSH
73273: LD_INT 0
73275: PUSH
73276: LD_INT 0
73278: PUSH
73279: LD_VAR 0 3
73283: PUSH
73284: LD_INT 0
73286: PUSH
73287: LD_INT 0
73289: PUSH
73290: LD_INT 0
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PPUSH
73306: CALL_OW 447
// end ;
73310: LD_VAR 0 2
73314: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73315: LD_INT 0
73317: PPUSH
73318: PPUSH
73319: PPUSH
// tmp := [ ] ;
73320: LD_ADDR_VAR 0 5
73324: PUSH
73325: EMPTY
73326: ST_TO_ADDR
// for i in units do
73327: LD_ADDR_VAR 0 4
73331: PUSH
73332: LD_VAR 0 1
73336: PUSH
73337: FOR_IN
73338: IFFALSE 73376
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73340: LD_ADDR_VAR 0 5
73344: PUSH
73345: LD_VAR 0 5
73349: PPUSH
73350: LD_VAR 0 5
73354: PUSH
73355: LD_INT 1
73357: PLUS
73358: PPUSH
73359: LD_VAR 0 4
73363: PPUSH
73364: CALL_OW 256
73368: PPUSH
73369: CALL_OW 2
73373: ST_TO_ADDR
73374: GO 73337
73376: POP
73377: POP
// if not tmp then
73378: LD_VAR 0 5
73382: NOT
73383: IFFALSE 73387
// exit ;
73385: GO 73435
// if asc then
73387: LD_VAR 0 2
73391: IFFALSE 73415
// result := SortListByListAsc ( units , tmp ) else
73393: LD_ADDR_VAR 0 3
73397: PUSH
73398: LD_VAR 0 1
73402: PPUSH
73403: LD_VAR 0 5
73407: PPUSH
73408: CALL_OW 76
73412: ST_TO_ADDR
73413: GO 73435
// result := SortListByListDesc ( units , tmp ) ;
73415: LD_ADDR_VAR 0 3
73419: PUSH
73420: LD_VAR 0 1
73424: PPUSH
73425: LD_VAR 0 5
73429: PPUSH
73430: CALL_OW 77
73434: ST_TO_ADDR
// end ;
73435: LD_VAR 0 3
73439: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73440: LD_INT 0
73442: PPUSH
73443: PPUSH
// task := GetTaskList ( mech ) ;
73444: LD_ADDR_VAR 0 4
73448: PUSH
73449: LD_VAR 0 1
73453: PPUSH
73454: CALL_OW 437
73458: ST_TO_ADDR
// if not task then
73459: LD_VAR 0 4
73463: NOT
73464: IFFALSE 73468
// exit ;
73466: GO 73512
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73468: LD_ADDR_VAR 0 3
73472: PUSH
73473: LD_VAR 0 4
73477: PUSH
73478: LD_INT 1
73480: ARRAY
73481: PUSH
73482: LD_INT 1
73484: ARRAY
73485: PUSH
73486: LD_STRING r
73488: EQUAL
73489: IFFALSE 73511
73491: PUSH
73492: LD_VAR 0 4
73496: PUSH
73497: LD_INT 1
73499: ARRAY
73500: PUSH
73501: LD_INT 4
73503: ARRAY
73504: PUSH
73505: LD_VAR 0 2
73509: EQUAL
73510: AND
73511: ST_TO_ADDR
// end ;
73512: LD_VAR 0 3
73516: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73517: LD_INT 0
73519: PPUSH
// SetDir ( unit , d ) ;
73520: LD_VAR 0 1
73524: PPUSH
73525: LD_VAR 0 4
73529: PPUSH
73530: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73534: LD_ADDR_VAR 0 6
73538: PUSH
73539: LD_VAR 0 1
73543: PPUSH
73544: LD_VAR 0 2
73548: PPUSH
73549: LD_VAR 0 3
73553: PPUSH
73554: LD_VAR 0 5
73558: PPUSH
73559: CALL_OW 48
73563: ST_TO_ADDR
// end ;
73564: LD_VAR 0 6
73568: RET
// export function ToNaturalNumber ( number ) ; begin
73569: LD_INT 0
73571: PPUSH
// result := number div 1 ;
73572: LD_ADDR_VAR 0 2
73576: PUSH
73577: LD_VAR 0 1
73581: PUSH
73582: LD_INT 1
73584: DIV
73585: ST_TO_ADDR
// if number < 0 then
73586: LD_VAR 0 1
73590: PUSH
73591: LD_INT 0
73593: LESS
73594: IFFALSE 73604
// result := 0 ;
73596: LD_ADDR_VAR 0 2
73600: PUSH
73601: LD_INT 0
73603: ST_TO_ADDR
// end ;
73604: LD_VAR 0 2
73608: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73609: LD_INT 0
73611: PPUSH
73612: PPUSH
73613: PPUSH
// if not buildings then
73614: LD_VAR 0 1
73618: NOT
73619: IFFALSE 73623
// exit ;
73621: GO 73738
// tmp := [ ] ;
73623: LD_ADDR_VAR 0 5
73627: PUSH
73628: EMPTY
73629: ST_TO_ADDR
// for b in buildings do
73630: LD_ADDR_VAR 0 4
73634: PUSH
73635: LD_VAR 0 1
73639: PUSH
73640: FOR_IN
73641: IFFALSE 73679
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73643: LD_ADDR_VAR 0 5
73647: PUSH
73648: LD_VAR 0 5
73652: PPUSH
73653: LD_VAR 0 5
73657: PUSH
73658: LD_INT 1
73660: PLUS
73661: PPUSH
73662: LD_VAR 0 4
73666: PPUSH
73667: CALL_OW 266
73671: PPUSH
73672: CALL_OW 1
73676: ST_TO_ADDR
73677: GO 73640
73679: POP
73680: POP
// if not tmp then
73681: LD_VAR 0 5
73685: NOT
73686: IFFALSE 73690
// exit ;
73688: GO 73738
// if asc then
73690: LD_VAR 0 2
73694: IFFALSE 73718
// result := SortListByListAsc ( buildings , tmp ) else
73696: LD_ADDR_VAR 0 3
73700: PUSH
73701: LD_VAR 0 1
73705: PPUSH
73706: LD_VAR 0 5
73710: PPUSH
73711: CALL_OW 76
73715: ST_TO_ADDR
73716: GO 73738
// result := SortListByListDesc ( buildings , tmp ) ;
73718: LD_ADDR_VAR 0 3
73722: PUSH
73723: LD_VAR 0 1
73727: PPUSH
73728: LD_VAR 0 5
73732: PPUSH
73733: CALL_OW 77
73737: ST_TO_ADDR
// end ;
73738: LD_VAR 0 3
73742: RET
// export function SortByClass ( units , class ) ; var un ; begin
73743: LD_INT 0
73745: PPUSH
73746: PPUSH
// if not units or not class then
73747: LD_VAR 0 1
73751: NOT
73752: IFTRUE 73761
73754: PUSH
73755: LD_VAR 0 2
73759: NOT
73760: OR
73761: IFFALSE 73765
// exit ;
73763: GO 73860
// result := [ ] ;
73765: LD_ADDR_VAR 0 3
73769: PUSH
73770: EMPTY
73771: ST_TO_ADDR
// for un in units do
73772: LD_ADDR_VAR 0 4
73776: PUSH
73777: LD_VAR 0 1
73781: PUSH
73782: FOR_IN
73783: IFFALSE 73858
// if GetClass ( un ) = class then
73785: LD_VAR 0 4
73789: PPUSH
73790: CALL_OW 257
73794: PUSH
73795: LD_VAR 0 2
73799: EQUAL
73800: IFFALSE 73827
// result := Insert ( result , 1 , un ) else
73802: LD_ADDR_VAR 0 3
73806: PUSH
73807: LD_VAR 0 3
73811: PPUSH
73812: LD_INT 1
73814: PPUSH
73815: LD_VAR 0 4
73819: PPUSH
73820: CALL_OW 2
73824: ST_TO_ADDR
73825: GO 73856
// result := Replace ( result , result + 1 , un ) ;
73827: LD_ADDR_VAR 0 3
73831: PUSH
73832: LD_VAR 0 3
73836: PPUSH
73837: LD_VAR 0 3
73841: PUSH
73842: LD_INT 1
73844: PLUS
73845: PPUSH
73846: LD_VAR 0 4
73850: PPUSH
73851: CALL_OW 1
73855: ST_TO_ADDR
73856: GO 73782
73858: POP
73859: POP
// end ;
73860: LD_VAR 0 3
73864: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73865: LD_INT 0
73867: PPUSH
73868: PPUSH
73869: PPUSH
73870: PPUSH
73871: PPUSH
73872: PPUSH
73873: PPUSH
// result := [ ] ;
73874: LD_ADDR_VAR 0 4
73878: PUSH
73879: EMPTY
73880: ST_TO_ADDR
// if x - r < 0 then
73881: LD_VAR 0 1
73885: PUSH
73886: LD_VAR 0 3
73890: MINUS
73891: PUSH
73892: LD_INT 0
73894: LESS
73895: IFFALSE 73907
// min_x := 0 else
73897: LD_ADDR_VAR 0 8
73901: PUSH
73902: LD_INT 0
73904: ST_TO_ADDR
73905: GO 73923
// min_x := x - r ;
73907: LD_ADDR_VAR 0 8
73911: PUSH
73912: LD_VAR 0 1
73916: PUSH
73917: LD_VAR 0 3
73921: MINUS
73922: ST_TO_ADDR
// if y - r < 0 then
73923: LD_VAR 0 2
73927: PUSH
73928: LD_VAR 0 3
73932: MINUS
73933: PUSH
73934: LD_INT 0
73936: LESS
73937: IFFALSE 73949
// min_y := 0 else
73939: LD_ADDR_VAR 0 7
73943: PUSH
73944: LD_INT 0
73946: ST_TO_ADDR
73947: GO 73965
// min_y := y - r ;
73949: LD_ADDR_VAR 0 7
73953: PUSH
73954: LD_VAR 0 2
73958: PUSH
73959: LD_VAR 0 3
73963: MINUS
73964: ST_TO_ADDR
// max_x := x + r ;
73965: LD_ADDR_VAR 0 9
73969: PUSH
73970: LD_VAR 0 1
73974: PUSH
73975: LD_VAR 0 3
73979: PLUS
73980: ST_TO_ADDR
// max_y := y + r ;
73981: LD_ADDR_VAR 0 10
73985: PUSH
73986: LD_VAR 0 2
73990: PUSH
73991: LD_VAR 0 3
73995: PLUS
73996: ST_TO_ADDR
// for _x = min_x to max_x do
73997: LD_ADDR_VAR 0 5
74001: PUSH
74002: DOUBLE
74003: LD_VAR 0 8
74007: DEC
74008: ST_TO_ADDR
74009: LD_VAR 0 9
74013: PUSH
74014: FOR_TO
74015: IFFALSE 74116
// for _y = min_y to max_y do
74017: LD_ADDR_VAR 0 6
74021: PUSH
74022: DOUBLE
74023: LD_VAR 0 7
74027: DEC
74028: ST_TO_ADDR
74029: LD_VAR 0 10
74033: PUSH
74034: FOR_TO
74035: IFFALSE 74112
// begin if not ValidHex ( _x , _y ) then
74037: LD_VAR 0 5
74041: PPUSH
74042: LD_VAR 0 6
74046: PPUSH
74047: CALL_OW 488
74051: NOT
74052: IFFALSE 74056
// continue ;
74054: GO 74034
// if GetResourceTypeXY ( _x , _y ) then
74056: LD_VAR 0 5
74060: PPUSH
74061: LD_VAR 0 6
74065: PPUSH
74066: CALL_OW 283
74070: IFFALSE 74110
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74072: LD_ADDR_VAR 0 4
74076: PUSH
74077: LD_VAR 0 4
74081: PPUSH
74082: LD_VAR 0 4
74086: PUSH
74087: LD_INT 1
74089: PLUS
74090: PPUSH
74091: LD_VAR 0 5
74095: PUSH
74096: LD_VAR 0 6
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PPUSH
74105: CALL_OW 1
74109: ST_TO_ADDR
// end ;
74110: GO 74034
74112: POP
74113: POP
74114: GO 74014
74116: POP
74117: POP
// end ;
74118: LD_VAR 0 4
74122: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74123: LD_INT 0
74125: PPUSH
74126: PPUSH
74127: PPUSH
74128: PPUSH
74129: PPUSH
74130: PPUSH
74131: PPUSH
74132: PPUSH
// if not units then
74133: LD_VAR 0 1
74137: NOT
74138: IFFALSE 74142
// exit ;
74140: GO 74674
// result := UnitFilter ( units , [ f_ok ] ) ;
74142: LD_ADDR_VAR 0 3
74146: PUSH
74147: LD_VAR 0 1
74151: PPUSH
74152: LD_INT 50
74154: PUSH
74155: EMPTY
74156: LIST
74157: PPUSH
74158: CALL_OW 72
74162: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74163: LD_ADDR_VAR 0 8
74167: PUSH
74168: LD_VAR 0 1
74172: PUSH
74173: LD_INT 1
74175: ARRAY
74176: PPUSH
74177: CALL_OW 255
74181: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74182: LD_ADDR_VAR 0 10
74186: PUSH
74187: LD_INT 29
74189: PUSH
74190: LD_INT 91
74192: PUSH
74193: LD_INT 49
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: LIST
74200: ST_TO_ADDR
// if not result then
74201: LD_VAR 0 3
74205: NOT
74206: IFFALSE 74210
// exit ;
74208: GO 74674
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74210: LD_ADDR_VAR 0 5
74214: PUSH
74215: LD_INT 81
74217: PUSH
74218: LD_VAR 0 8
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PPUSH
74227: CALL_OW 69
74231: ST_TO_ADDR
// for i in result do
74232: LD_ADDR_VAR 0 4
74236: PUSH
74237: LD_VAR 0 3
74241: PUSH
74242: FOR_IN
74243: IFFALSE 74672
// begin tag := GetTag ( i ) + 1 ;
74245: LD_ADDR_VAR 0 9
74249: PUSH
74250: LD_VAR 0 4
74254: PPUSH
74255: CALL_OW 110
74259: PUSH
74260: LD_INT 1
74262: PLUS
74263: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74264: LD_ADDR_VAR 0 7
74268: PUSH
74269: LD_VAR 0 4
74273: PPUSH
74274: CALL_OW 250
74278: PPUSH
74279: LD_VAR 0 4
74283: PPUSH
74284: CALL_OW 251
74288: PPUSH
74289: LD_INT 4
74291: PPUSH
74292: CALL 73865 0 3
74296: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74297: LD_VAR 0 4
74301: PPUSH
74302: CALL_OW 247
74306: PUSH
74307: LD_INT 2
74309: EQUAL
74310: IFFALSE 74322
74312: PUSH
74313: LD_VAR 0 7
74317: PUSH
74318: LD_INT 2
74320: GREATER
74321: AND
74322: IFFALSE 74342
74324: PUSH
74325: LD_VAR 0 4
74329: PPUSH
74330: CALL_OW 264
74334: PUSH
74335: LD_VAR 0 10
74339: IN
74340: NOT
74341: AND
74342: IFFALSE 74381
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74344: LD_VAR 0 4
74348: PPUSH
74349: LD_VAR 0 7
74353: PUSH
74354: LD_INT 1
74356: ARRAY
74357: PUSH
74358: LD_INT 1
74360: ARRAY
74361: PPUSH
74362: LD_VAR 0 7
74366: PUSH
74367: LD_INT 1
74369: ARRAY
74370: PUSH
74371: LD_INT 2
74373: ARRAY
74374: PPUSH
74375: CALL_OW 116
74379: GO 74670
// if path > tag then
74381: LD_VAR 0 2
74385: PUSH
74386: LD_VAR 0 9
74390: GREATER
74391: IFFALSE 74599
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74393: LD_ADDR_VAR 0 6
74397: PUSH
74398: LD_VAR 0 5
74402: PPUSH
74403: LD_INT 91
74405: PUSH
74406: LD_VAR 0 4
74410: PUSH
74411: LD_INT 8
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: LIST
74418: PPUSH
74419: CALL_OW 72
74423: ST_TO_ADDR
// if nearEnemy then
74424: LD_VAR 0 6
74428: IFFALSE 74497
// begin if GetWeapon ( i ) = ru_time_lapser then
74430: LD_VAR 0 4
74434: PPUSH
74435: CALL_OW 264
74439: PUSH
74440: LD_INT 49
74442: EQUAL
74443: IFFALSE 74471
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74445: LD_VAR 0 4
74449: PPUSH
74450: LD_VAR 0 6
74454: PPUSH
74455: LD_VAR 0 4
74459: PPUSH
74460: CALL_OW 74
74464: PPUSH
74465: CALL_OW 112
74469: GO 74495
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74471: LD_VAR 0 4
74475: PPUSH
74476: LD_VAR 0 6
74480: PPUSH
74481: LD_VAR 0 4
74485: PPUSH
74486: CALL_OW 74
74490: PPUSH
74491: CALL 75755 0 2
// end else
74495: GO 74597
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74497: LD_VAR 0 4
74501: PPUSH
74502: LD_VAR 0 2
74506: PUSH
74507: LD_VAR 0 9
74511: ARRAY
74512: PUSH
74513: LD_INT 1
74515: ARRAY
74516: PPUSH
74517: LD_VAR 0 2
74521: PUSH
74522: LD_VAR 0 9
74526: ARRAY
74527: PUSH
74528: LD_INT 2
74530: ARRAY
74531: PPUSH
74532: CALL_OW 297
74536: PUSH
74537: LD_INT 6
74539: GREATER
74540: IFFALSE 74583
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74542: LD_VAR 0 4
74546: PPUSH
74547: LD_VAR 0 2
74551: PUSH
74552: LD_VAR 0 9
74556: ARRAY
74557: PUSH
74558: LD_INT 1
74560: ARRAY
74561: PPUSH
74562: LD_VAR 0 2
74566: PUSH
74567: LD_VAR 0 9
74571: ARRAY
74572: PUSH
74573: LD_INT 2
74575: ARRAY
74576: PPUSH
74577: CALL_OW 114
74581: GO 74597
// SetTag ( i , tag ) ;
74583: LD_VAR 0 4
74587: PPUSH
74588: LD_VAR 0 9
74592: PPUSH
74593: CALL_OW 109
// end else
74597: GO 74670
// if enemy then
74599: LD_VAR 0 5
74603: IFFALSE 74670
// begin if GetWeapon ( i ) = ru_time_lapser then
74605: LD_VAR 0 4
74609: PPUSH
74610: CALL_OW 264
74614: PUSH
74615: LD_INT 49
74617: EQUAL
74618: IFFALSE 74646
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74620: LD_VAR 0 4
74624: PPUSH
74625: LD_VAR 0 5
74629: PPUSH
74630: LD_VAR 0 4
74634: PPUSH
74635: CALL_OW 74
74639: PPUSH
74640: CALL_OW 112
74644: GO 74670
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74646: LD_VAR 0 4
74650: PPUSH
74651: LD_VAR 0 5
74655: PPUSH
74656: LD_VAR 0 4
74660: PPUSH
74661: CALL_OW 74
74665: PPUSH
74666: CALL 75755 0 2
// end ; end ;
74670: GO 74242
74672: POP
74673: POP
// end ;
74674: LD_VAR 0 3
74678: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74679: LD_INT 0
74681: PPUSH
74682: PPUSH
74683: PPUSH
// if not unit or IsInUnit ( unit ) then
74684: LD_VAR 0 1
74688: NOT
74689: IFTRUE 74702
74691: PUSH
74692: LD_VAR 0 1
74696: PPUSH
74697: CALL_OW 310
74701: OR
74702: IFFALSE 74706
// exit ;
74704: GO 74797
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74706: LD_ADDR_VAR 0 4
74710: PUSH
74711: LD_VAR 0 1
74715: PPUSH
74716: CALL_OW 250
74720: PPUSH
74721: LD_VAR 0 2
74725: PPUSH
74726: LD_INT 1
74728: PPUSH
74729: CALL_OW 272
74733: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74734: LD_ADDR_VAR 0 5
74738: PUSH
74739: LD_VAR 0 1
74743: PPUSH
74744: CALL_OW 251
74748: PPUSH
74749: LD_VAR 0 2
74753: PPUSH
74754: LD_INT 1
74756: PPUSH
74757: CALL_OW 273
74761: ST_TO_ADDR
// if ValidHex ( x , y ) then
74762: LD_VAR 0 4
74766: PPUSH
74767: LD_VAR 0 5
74771: PPUSH
74772: CALL_OW 488
74776: IFFALSE 74797
// ComTurnXY ( unit , x , y ) ;
74778: LD_VAR 0 1
74782: PPUSH
74783: LD_VAR 0 4
74787: PPUSH
74788: LD_VAR 0 5
74792: PPUSH
74793: CALL_OW 118
// end ;
74797: LD_VAR 0 3
74801: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74802: LD_INT 0
74804: PPUSH
74805: PPUSH
// result := false ;
74806: LD_ADDR_VAR 0 3
74810: PUSH
74811: LD_INT 0
74813: ST_TO_ADDR
// if not units then
74814: LD_VAR 0 2
74818: NOT
74819: IFFALSE 74823
// exit ;
74821: GO 74868
// for i in units do
74823: LD_ADDR_VAR 0 4
74827: PUSH
74828: LD_VAR 0 2
74832: PUSH
74833: FOR_IN
74834: IFFALSE 74866
// if See ( side , i ) then
74836: LD_VAR 0 1
74840: PPUSH
74841: LD_VAR 0 4
74845: PPUSH
74846: CALL_OW 292
74850: IFFALSE 74864
// begin result := true ;
74852: LD_ADDR_VAR 0 3
74856: PUSH
74857: LD_INT 1
74859: ST_TO_ADDR
// exit ;
74860: POP
74861: POP
74862: GO 74868
// end ;
74864: GO 74833
74866: POP
74867: POP
// end ;
74868: LD_VAR 0 3
74872: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74873: LD_INT 0
74875: PPUSH
74876: PPUSH
74877: PPUSH
74878: PPUSH
// if not unit or not points then
74879: LD_VAR 0 1
74883: NOT
74884: IFTRUE 74893
74886: PUSH
74887: LD_VAR 0 2
74891: NOT
74892: OR
74893: IFFALSE 74897
// exit ;
74895: GO 74987
// dist := 99999 ;
74897: LD_ADDR_VAR 0 5
74901: PUSH
74902: LD_INT 99999
74904: ST_TO_ADDR
// for i in points do
74905: LD_ADDR_VAR 0 4
74909: PUSH
74910: LD_VAR 0 2
74914: PUSH
74915: FOR_IN
74916: IFFALSE 74985
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74918: LD_ADDR_VAR 0 6
74922: PUSH
74923: LD_VAR 0 1
74927: PPUSH
74928: LD_VAR 0 4
74932: PUSH
74933: LD_INT 1
74935: ARRAY
74936: PPUSH
74937: LD_VAR 0 4
74941: PUSH
74942: LD_INT 2
74944: ARRAY
74945: PPUSH
74946: CALL_OW 297
74950: ST_TO_ADDR
// if tmpDist < dist then
74951: LD_VAR 0 6
74955: PUSH
74956: LD_VAR 0 5
74960: LESS
74961: IFFALSE 74983
// begin result := i ;
74963: LD_ADDR_VAR 0 3
74967: PUSH
74968: LD_VAR 0 4
74972: ST_TO_ADDR
// dist := tmpDist ;
74973: LD_ADDR_VAR 0 5
74977: PUSH
74978: LD_VAR 0 6
74982: ST_TO_ADDR
// end ; end ;
74983: GO 74915
74985: POP
74986: POP
// end ;
74987: LD_VAR 0 3
74991: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74992: LD_INT 0
74994: PPUSH
// uc_side := side ;
74995: LD_ADDR_OWVAR 20
74999: PUSH
75000: LD_VAR 0 1
75004: ST_TO_ADDR
// uc_nation := 3 ;
75005: LD_ADDR_OWVAR 21
75009: PUSH
75010: LD_INT 3
75012: ST_TO_ADDR
// vc_chassis := 25 ;
75013: LD_ADDR_OWVAR 37
75017: PUSH
75018: LD_INT 25
75020: ST_TO_ADDR
// vc_engine := engine_siberite ;
75021: LD_ADDR_OWVAR 39
75025: PUSH
75026: LD_INT 3
75028: ST_TO_ADDR
// vc_control := control_computer ;
75029: LD_ADDR_OWVAR 38
75033: PUSH
75034: LD_INT 3
75036: ST_TO_ADDR
// vc_weapon := 59 ;
75037: LD_ADDR_OWVAR 40
75041: PUSH
75042: LD_INT 59
75044: ST_TO_ADDR
// result := CreateVehicle ;
75045: LD_ADDR_VAR 0 5
75049: PUSH
75050: CALL_OW 45
75054: ST_TO_ADDR
// SetDir ( result , d ) ;
75055: LD_VAR 0 5
75059: PPUSH
75060: LD_VAR 0 4
75064: PPUSH
75065: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75069: LD_VAR 0 5
75073: PPUSH
75074: LD_VAR 0 2
75078: PPUSH
75079: LD_VAR 0 3
75083: PPUSH
75084: LD_INT 0
75086: PPUSH
75087: CALL_OW 48
// end ;
75091: LD_VAR 0 5
75095: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75096: LD_INT 0
75098: PPUSH
75099: PPUSH
75100: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75101: LD_ADDR_VAR 0 2
75105: PUSH
75106: LD_INT 0
75108: PUSH
75109: LD_INT 0
75111: PUSH
75112: LD_INT 0
75114: PUSH
75115: LD_INT 0
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75124: LD_VAR 0 1
75128: NOT
75129: IFTRUE 75162
75131: PUSH
75132: LD_VAR 0 1
75136: PPUSH
75137: CALL_OW 264
75141: PUSH
75142: LD_INT 12
75144: PUSH
75145: LD_INT 51
75147: PUSH
75148: LD_INT 32
75150: PUSH
75151: LD_INT 89
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: LIST
75158: LIST
75159: IN
75160: NOT
75161: OR
75162: IFFALSE 75166
// exit ;
75164: GO 75264
// for i := 1 to 3 do
75166: LD_ADDR_VAR 0 3
75170: PUSH
75171: DOUBLE
75172: LD_INT 1
75174: DEC
75175: ST_TO_ADDR
75176: LD_INT 3
75178: PUSH
75179: FOR_TO
75180: IFFALSE 75262
// begin tmp := GetCargo ( cargo , i ) ;
75182: LD_ADDR_VAR 0 4
75186: PUSH
75187: LD_VAR 0 1
75191: PPUSH
75192: LD_VAR 0 3
75196: PPUSH
75197: CALL_OW 289
75201: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75202: LD_ADDR_VAR 0 2
75206: PUSH
75207: LD_VAR 0 2
75211: PPUSH
75212: LD_VAR 0 3
75216: PPUSH
75217: LD_VAR 0 4
75221: PPUSH
75222: CALL_OW 1
75226: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75227: LD_ADDR_VAR 0 2
75231: PUSH
75232: LD_VAR 0 2
75236: PPUSH
75237: LD_INT 4
75239: PPUSH
75240: LD_VAR 0 2
75244: PUSH
75245: LD_INT 4
75247: ARRAY
75248: PUSH
75249: LD_VAR 0 4
75253: PLUS
75254: PPUSH
75255: CALL_OW 1
75259: ST_TO_ADDR
// end ;
75260: GO 75179
75262: POP
75263: POP
// end ;
75264: LD_VAR 0 2
75268: RET
// export function Length ( array ) ; begin
75269: LD_INT 0
75271: PPUSH
// result := array + 0 ;
75272: LD_ADDR_VAR 0 2
75276: PUSH
75277: LD_VAR 0 1
75281: PUSH
75282: LD_INT 0
75284: PLUS
75285: ST_TO_ADDR
// end ;
75286: LD_VAR 0 2
75290: RET
// export function PrepareArray ( array ) ; begin
75291: LD_INT 0
75293: PPUSH
// result := array diff 0 ;
75294: LD_ADDR_VAR 0 2
75298: PUSH
75299: LD_VAR 0 1
75303: PUSH
75304: LD_INT 0
75306: DIFF
75307: ST_TO_ADDR
// if not result [ 1 ] then
75308: LD_VAR 0 2
75312: PUSH
75313: LD_INT 1
75315: ARRAY
75316: NOT
75317: IFFALSE 75337
// result := Delete ( result , 1 ) ;
75319: LD_ADDR_VAR 0 2
75323: PUSH
75324: LD_VAR 0 2
75328: PPUSH
75329: LD_INT 1
75331: PPUSH
75332: CALL_OW 3
75336: ST_TO_ADDR
// end ;
75337: LD_VAR 0 2
75341: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75342: LD_INT 0
75344: PPUSH
75345: PPUSH
75346: PPUSH
75347: PPUSH
// sibRocketRange := 25 ;
75348: LD_ADDR_VAR 0 6
75352: PUSH
75353: LD_INT 25
75355: ST_TO_ADDR
// result := false ;
75356: LD_ADDR_VAR 0 4
75360: PUSH
75361: LD_INT 0
75363: ST_TO_ADDR
// for i := 0 to 5 do
75364: LD_ADDR_VAR 0 5
75368: PUSH
75369: DOUBLE
75370: LD_INT 0
75372: DEC
75373: ST_TO_ADDR
75374: LD_INT 5
75376: PUSH
75377: FOR_TO
75378: IFFALSE 75445
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75380: LD_VAR 0 1
75384: PPUSH
75385: LD_VAR 0 5
75389: PPUSH
75390: LD_VAR 0 6
75394: PPUSH
75395: CALL_OW 272
75399: PPUSH
75400: LD_VAR 0 2
75404: PPUSH
75405: LD_VAR 0 5
75409: PPUSH
75410: LD_VAR 0 6
75414: PPUSH
75415: CALL_OW 273
75419: PPUSH
75420: LD_VAR 0 3
75424: PPUSH
75425: CALL_OW 309
75429: IFFALSE 75443
// begin result := true ;
75431: LD_ADDR_VAR 0 4
75435: PUSH
75436: LD_INT 1
75438: ST_TO_ADDR
// exit ;
75439: POP
75440: POP
75441: GO 75447
// end ;
75443: GO 75377
75445: POP
75446: POP
// end ;
75447: LD_VAR 0 4
75451: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75452: LD_INT 0
75454: PPUSH
75455: PPUSH
75456: PPUSH
// if btype = b_depot then
75457: LD_VAR 0 2
75461: PUSH
75462: LD_INT 0
75464: EQUAL
75465: IFFALSE 75477
// begin result := true ;
75467: LD_ADDR_VAR 0 3
75471: PUSH
75472: LD_INT 1
75474: ST_TO_ADDR
// exit ;
75475: GO 75597
// end ; pom := GetBase ( depot ) ;
75477: LD_ADDR_VAR 0 4
75481: PUSH
75482: LD_VAR 0 1
75486: PPUSH
75487: CALL_OW 274
75491: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75492: LD_ADDR_VAR 0 5
75496: PUSH
75497: LD_VAR 0 2
75501: PPUSH
75502: LD_VAR 0 1
75506: PPUSH
75507: CALL_OW 248
75511: PPUSH
75512: CALL_OW 450
75516: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75517: LD_ADDR_VAR 0 3
75521: PUSH
75522: LD_VAR 0 4
75526: PPUSH
75527: LD_INT 1
75529: PPUSH
75530: CALL_OW 275
75534: PUSH
75535: LD_VAR 0 5
75539: PUSH
75540: LD_INT 1
75542: ARRAY
75543: GREATEREQUAL
75544: IFFALSE 75570
75546: PUSH
75547: LD_VAR 0 4
75551: PPUSH
75552: LD_INT 2
75554: PPUSH
75555: CALL_OW 275
75559: PUSH
75560: LD_VAR 0 5
75564: PUSH
75565: LD_INT 2
75567: ARRAY
75568: GREATEREQUAL
75569: AND
75570: IFFALSE 75596
75572: PUSH
75573: LD_VAR 0 4
75577: PPUSH
75578: LD_INT 3
75580: PPUSH
75581: CALL_OW 275
75585: PUSH
75586: LD_VAR 0 5
75590: PUSH
75591: LD_INT 3
75593: ARRAY
75594: GREATEREQUAL
75595: AND
75596: ST_TO_ADDR
// end ;
75597: LD_VAR 0 3
75601: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75602: LD_INT 0
75604: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75605: LD_VAR 0 1
75609: PPUSH
75610: LD_VAR 0 2
75614: PPUSH
75615: LD_INT 0
75617: PPUSH
75618: LD_INT 0
75620: PPUSH
75621: LD_INT 1
75623: PPUSH
75624: LD_INT 0
75626: PPUSH
75627: CALL_OW 587
// end ;
75631: LD_VAR 0 3
75635: RET
// export function CenterOnNow ( unit ) ; begin
75636: LD_INT 0
75638: PPUSH
// result := IsInUnit ( unit ) ;
75639: LD_ADDR_VAR 0 2
75643: PUSH
75644: LD_VAR 0 1
75648: PPUSH
75649: CALL_OW 310
75653: ST_TO_ADDR
// if not result then
75654: LD_VAR 0 2
75658: NOT
75659: IFFALSE 75671
// result := unit ;
75661: LD_ADDR_VAR 0 2
75665: PUSH
75666: LD_VAR 0 1
75670: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75671: LD_VAR 0 1
75675: PPUSH
75676: CALL_OW 87
// end ;
75680: LD_VAR 0 2
75684: RET
// export function ComMoveHex ( unit , hex ) ; begin
75685: LD_INT 0
75687: PPUSH
// if not hex then
75688: LD_VAR 0 2
75692: NOT
75693: IFFALSE 75697
// exit ;
75695: GO 75750
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75697: LD_VAR 0 2
75701: PUSH
75702: LD_INT 1
75704: ARRAY
75705: PPUSH
75706: LD_VAR 0 2
75710: PUSH
75711: LD_INT 2
75713: ARRAY
75714: PPUSH
75715: CALL_OW 428
75719: IFFALSE 75723
// exit ;
75721: GO 75750
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75723: LD_VAR 0 1
75727: PPUSH
75728: LD_VAR 0 2
75732: PUSH
75733: LD_INT 1
75735: ARRAY
75736: PPUSH
75737: LD_VAR 0 2
75741: PUSH
75742: LD_INT 2
75744: ARRAY
75745: PPUSH
75746: CALL_OW 111
// end ;
75750: LD_VAR 0 3
75754: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75755: LD_INT 0
75757: PPUSH
75758: PPUSH
75759: PPUSH
// if not unit or not enemy then
75760: LD_VAR 0 1
75764: NOT
75765: IFTRUE 75774
75767: PUSH
75768: LD_VAR 0 2
75772: NOT
75773: OR
75774: IFFALSE 75778
// exit ;
75776: GO 75904
// x := GetX ( enemy ) ;
75778: LD_ADDR_VAR 0 4
75782: PUSH
75783: LD_VAR 0 2
75787: PPUSH
75788: CALL_OW 250
75792: ST_TO_ADDR
// y := GetY ( enemy ) ;
75793: LD_ADDR_VAR 0 5
75797: PUSH
75798: LD_VAR 0 2
75802: PPUSH
75803: CALL_OW 251
75807: ST_TO_ADDR
// if ValidHex ( x , y ) then
75808: LD_VAR 0 4
75812: PPUSH
75813: LD_VAR 0 5
75817: PPUSH
75818: CALL_OW 488
75822: IFFALSE 75904
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75824: LD_VAR 0 2
75828: PPUSH
75829: CALL_OW 247
75833: PUSH
75834: LD_INT 3
75836: PUSH
75837: LD_INT 2
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: IN
75844: IFTRUE 75867
75846: PUSH
75847: LD_VAR 0 1
75851: PPUSH
75852: CALL_OW 255
75856: PPUSH
75857: LD_VAR 0 2
75861: PPUSH
75862: CALL_OW 292
75866: OR
75867: IFFALSE 75885
// ComAttackUnit ( unit , enemy ) else
75869: LD_VAR 0 1
75873: PPUSH
75874: LD_VAR 0 2
75878: PPUSH
75879: CALL_OW 115
75883: GO 75904
// ComAgressiveMove ( unit , x , y ) ;
75885: LD_VAR 0 1
75889: PPUSH
75890: LD_VAR 0 4
75894: PPUSH
75895: LD_VAR 0 5
75899: PPUSH
75900: CALL_OW 114
// end ;
75904: LD_VAR 0 3
75908: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75909: LD_INT 0
75911: PPUSH
75912: PPUSH
75913: PPUSH
// list := AreaToList ( area , 0 ) ;
75914: LD_ADDR_VAR 0 5
75918: PUSH
75919: LD_VAR 0 1
75923: PPUSH
75924: LD_INT 0
75926: PPUSH
75927: CALL_OW 517
75931: ST_TO_ADDR
// if not list then
75932: LD_VAR 0 5
75936: NOT
75937: IFFALSE 75941
// exit ;
75939: GO 76071
// if all then
75941: LD_VAR 0 2
75945: IFFALSE 76033
// begin for i := 1 to list [ 1 ] do
75947: LD_ADDR_VAR 0 4
75951: PUSH
75952: DOUBLE
75953: LD_INT 1
75955: DEC
75956: ST_TO_ADDR
75957: LD_VAR 0 5
75961: PUSH
75962: LD_INT 1
75964: ARRAY
75965: PUSH
75966: FOR_TO
75967: IFFALSE 76029
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75969: LD_ADDR_VAR 0 3
75973: PUSH
75974: LD_VAR 0 3
75978: PPUSH
75979: LD_VAR 0 3
75983: PUSH
75984: LD_INT 1
75986: PLUS
75987: PPUSH
75988: LD_VAR 0 5
75992: PUSH
75993: LD_INT 1
75995: ARRAY
75996: PUSH
75997: LD_VAR 0 4
76001: ARRAY
76002: PUSH
76003: LD_VAR 0 5
76007: PUSH
76008: LD_INT 2
76010: ARRAY
76011: PUSH
76012: LD_VAR 0 4
76016: ARRAY
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PPUSH
76022: CALL_OW 1
76026: ST_TO_ADDR
76027: GO 75966
76029: POP
76030: POP
// exit ;
76031: GO 76071
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76033: LD_ADDR_VAR 0 3
76037: PUSH
76038: LD_VAR 0 5
76042: PUSH
76043: LD_INT 1
76045: ARRAY
76046: PUSH
76047: LD_INT 1
76049: ARRAY
76050: PUSH
76051: LD_VAR 0 5
76055: PUSH
76056: LD_INT 2
76058: ARRAY
76059: PUSH
76060: LD_INT 1
76062: ARRAY
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: PUSH
76068: EMPTY
76069: LIST
76070: ST_TO_ADDR
// end ;
76071: LD_VAR 0 3
76075: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76076: LD_INT 0
76078: PPUSH
76079: PPUSH
// list := AreaToList ( area , 0 ) ;
76080: LD_ADDR_VAR 0 4
76084: PUSH
76085: LD_VAR 0 1
76089: PPUSH
76090: LD_INT 0
76092: PPUSH
76093: CALL_OW 517
76097: ST_TO_ADDR
// if not list then
76098: LD_VAR 0 4
76102: NOT
76103: IFFALSE 76107
// exit ;
76105: GO 76148
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76107: LD_ADDR_VAR 0 3
76111: PUSH
76112: LD_VAR 0 4
76116: PUSH
76117: LD_INT 1
76119: ARRAY
76120: PUSH
76121: LD_INT 1
76123: ARRAY
76124: PUSH
76125: LD_VAR 0 4
76129: PUSH
76130: LD_INT 2
76132: ARRAY
76133: PUSH
76134: LD_INT 1
76136: ARRAY
76137: PUSH
76138: LD_VAR 0 2
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: LIST
76147: ST_TO_ADDR
// end ;
76148: LD_VAR 0 3
76152: RET
// export function First ( array ) ; begin
76153: LD_INT 0
76155: PPUSH
// if not array then
76156: LD_VAR 0 1
76160: NOT
76161: IFFALSE 76165
// exit ;
76163: GO 76179
// result := array [ 1 ] ;
76165: LD_ADDR_VAR 0 2
76169: PUSH
76170: LD_VAR 0 1
76174: PUSH
76175: LD_INT 1
76177: ARRAY
76178: ST_TO_ADDR
// end ;
76179: LD_VAR 0 2
76183: RET
// export function Last ( array ) ; begin
76184: LD_INT 0
76186: PPUSH
// if not array then
76187: LD_VAR 0 1
76191: NOT
76192: IFFALSE 76196
// exit ;
76194: GO 76212
// result := array [ array ] ;
76196: LD_ADDR_VAR 0 2
76200: PUSH
76201: LD_VAR 0 1
76205: PUSH
76206: LD_VAR 0 1
76210: ARRAY
76211: ST_TO_ADDR
// end ;
76212: LD_VAR 0 2
76216: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76217: LD_INT 0
76219: PPUSH
76220: PPUSH
// result := [ ] ;
76221: LD_ADDR_VAR 0 5
76225: PUSH
76226: EMPTY
76227: ST_TO_ADDR
// if not array then
76228: LD_VAR 0 1
76232: NOT
76233: IFFALSE 76237
// exit ;
76235: GO 76349
// for i := 1 to array do
76237: LD_ADDR_VAR 0 6
76241: PUSH
76242: DOUBLE
76243: LD_INT 1
76245: DEC
76246: ST_TO_ADDR
76247: LD_VAR 0 1
76251: PUSH
76252: FOR_TO
76253: IFFALSE 76347
// if array [ i ] [ index ] = value then
76255: LD_VAR 0 1
76259: PUSH
76260: LD_VAR 0 6
76264: ARRAY
76265: PUSH
76266: LD_VAR 0 2
76270: ARRAY
76271: PUSH
76272: LD_VAR 0 3
76276: EQUAL
76277: IFFALSE 76345
// begin if indexColumn then
76279: LD_VAR 0 4
76283: IFFALSE 76319
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76285: LD_ADDR_VAR 0 5
76289: PUSH
76290: LD_VAR 0 5
76294: PPUSH
76295: LD_VAR 0 1
76299: PUSH
76300: LD_VAR 0 6
76304: ARRAY
76305: PUSH
76306: LD_VAR 0 4
76310: ARRAY
76311: PPUSH
76312: CALL 71357 0 2
76316: ST_TO_ADDR
76317: GO 76345
// result := Join ( result , array [ i ] ) ;
76319: LD_ADDR_VAR 0 5
76323: PUSH
76324: LD_VAR 0 5
76328: PPUSH
76329: LD_VAR 0 1
76333: PUSH
76334: LD_VAR 0 6
76338: ARRAY
76339: PPUSH
76340: CALL 71357 0 2
76344: ST_TO_ADDR
// end ;
76345: GO 76252
76347: POP
76348: POP
// end ;
76349: LD_VAR 0 5
76353: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76354: LD_INT 0
76356: PPUSH
// if not vehicles or not parkingPoint then
76357: LD_VAR 0 1
76361: NOT
76362: IFTRUE 76371
76364: PUSH
76365: LD_VAR 0 2
76369: NOT
76370: OR
76371: IFFALSE 76375
// exit ;
76373: GO 76473
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76375: LD_ADDR_VAR 0 1
76379: PUSH
76380: LD_VAR 0 1
76384: PPUSH
76385: LD_INT 50
76387: PUSH
76388: EMPTY
76389: LIST
76390: PUSH
76391: LD_INT 3
76393: PUSH
76394: LD_INT 92
76396: PUSH
76397: LD_VAR 0 2
76401: PUSH
76402: LD_INT 1
76404: ARRAY
76405: PUSH
76406: LD_VAR 0 2
76410: PUSH
76411: LD_INT 2
76413: ARRAY
76414: PUSH
76415: LD_INT 8
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: PPUSH
76432: CALL_OW 72
76436: ST_TO_ADDR
// if not vehicles then
76437: LD_VAR 0 1
76441: NOT
76442: IFFALSE 76446
// exit ;
76444: GO 76473
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76446: LD_VAR 0 1
76450: PPUSH
76451: LD_VAR 0 2
76455: PUSH
76456: LD_INT 1
76458: ARRAY
76459: PPUSH
76460: LD_VAR 0 2
76464: PUSH
76465: LD_INT 2
76467: ARRAY
76468: PPUSH
76469: CALL_OW 111
// end ;
76473: LD_VAR 0 3
76477: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76478: LD_INT 0
76480: PPUSH
76481: PPUSH
76482: PPUSH
// if not side or not area then
76483: LD_VAR 0 1
76487: NOT
76488: IFTRUE 76497
76490: PUSH
76491: LD_VAR 0 2
76495: NOT
76496: OR
76497: IFFALSE 76501
// exit ;
76499: GO 76620
// tmp := AreaToList ( area , 0 ) ;
76501: LD_ADDR_VAR 0 5
76505: PUSH
76506: LD_VAR 0 2
76510: PPUSH
76511: LD_INT 0
76513: PPUSH
76514: CALL_OW 517
76518: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76519: LD_ADDR_VAR 0 4
76523: PUSH
76524: DOUBLE
76525: LD_INT 1
76527: DEC
76528: ST_TO_ADDR
76529: LD_VAR 0 5
76533: PUSH
76534: LD_INT 1
76536: ARRAY
76537: PUSH
76538: FOR_TO
76539: IFFALSE 76618
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76541: LD_VAR 0 5
76545: PUSH
76546: LD_INT 1
76548: ARRAY
76549: PUSH
76550: LD_VAR 0 4
76554: ARRAY
76555: PPUSH
76556: LD_VAR 0 5
76560: PUSH
76561: LD_INT 2
76563: ARRAY
76564: PUSH
76565: LD_VAR 0 4
76569: ARRAY
76570: PPUSH
76571: CALL_OW 351
76575: IFFALSE 76616
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76577: LD_VAR 0 5
76581: PUSH
76582: LD_INT 1
76584: ARRAY
76585: PUSH
76586: LD_VAR 0 4
76590: ARRAY
76591: PPUSH
76592: LD_VAR 0 5
76596: PUSH
76597: LD_INT 2
76599: ARRAY
76600: PUSH
76601: LD_VAR 0 4
76605: ARRAY
76606: PPUSH
76607: LD_VAR 0 1
76611: PPUSH
76612: CALL_OW 244
// end ;
76616: GO 76538
76618: POP
76619: POP
// end ;
76620: LD_VAR 0 3
76624: RET
// export function UniqueArray ( array ) ; var i ; begin
76625: LD_INT 0
76627: PPUSH
76628: PPUSH
// result := [ ] ;
76629: LD_ADDR_VAR 0 2
76633: PUSH
76634: EMPTY
76635: ST_TO_ADDR
// if not array then
76636: LD_VAR 0 1
76640: NOT
76641: IFFALSE 76645
// exit ;
76643: GO 76706
// for i := 1 to array do
76645: LD_ADDR_VAR 0 3
76649: PUSH
76650: DOUBLE
76651: LD_INT 1
76653: DEC
76654: ST_TO_ADDR
76655: LD_VAR 0 1
76659: PUSH
76660: FOR_TO
76661: IFFALSE 76704
// if not array [ i ] in result then
76663: LD_VAR 0 1
76667: PUSH
76668: LD_VAR 0 3
76672: ARRAY
76673: PUSH
76674: LD_VAR 0 2
76678: IN
76679: NOT
76680: IFFALSE 76702
// result := Join ( result , i ) ;
76682: LD_ADDR_VAR 0 2
76686: PUSH
76687: LD_VAR 0 2
76691: PPUSH
76692: LD_VAR 0 3
76696: PPUSH
76697: CALL 71357 0 2
76701: ST_TO_ADDR
76702: GO 76660
76704: POP
76705: POP
// end ; end_of_file
76706: LD_VAR 0 2
76710: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76711: LD_VAR 0 1
76715: PPUSH
76716: LD_VAR 0 2
76720: PPUSH
76721: LD_VAR 0 3
76725: PPUSH
76726: LD_VAR 0 4
76730: PPUSH
76731: LD_VAR 0 5
76735: PPUSH
76736: LD_VAR 0 6
76740: PPUSH
76741: CALL 10723 0 6
// end ;
76745: PPOPN 6
76747: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76748: LD_INT 0
76750: PPUSH
// begin if not units then
76751: LD_VAR 0 1
76755: NOT
76756: IFFALSE 76760
// exit ;
76758: GO 76794
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
76760: LD_VAR 0 1
76764: PPUSH
76765: LD_VAR 0 2
76769: PPUSH
76770: LD_VAR 0 3
76774: PPUSH
76775: LD_VAR 0 4
76779: PPUSH
76780: LD_VAR 0 5
76784: PPUSH
76785: LD_VAR 0 6
76789: PPUSH
76790: CALL 33140 0 6
// end ;
76794: PPOPN 7
76796: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76797: CALL 10610 0 0
// end ;
76801: PPOPN 1
76803: END
