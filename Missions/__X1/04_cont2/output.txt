// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 2244 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5868 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 36352 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 30955 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 30955 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 30955 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 30955 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 30955 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 30955 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 30955 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 30955 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 30955 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 30955 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// if debug then
1535: LD_EXP 1
1539: IFFALSE 1758
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1541: LD_ADDR_EXP 30
1545: PUSH
1546: LD_INT 13
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 27
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1000
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 3
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 13
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 25
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 1000
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 3
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 13
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 27
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1000
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 13
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 27
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 40
1730: PUSH
1731: LD_INT 40
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// uc_side := 5 ;
1758: LD_ADDR_OWVAR 20
1762: PUSH
1763: LD_INT 5
1765: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1766: LD_ADDR_EXP 26
1770: PUSH
1771: LD_STRING Abdul
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 30955 0 3
1784: ST_TO_ADDR
// end ;
1785: LD_VAR 0 1
1789: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1790: LD_STRING 04_1_KaganCaptured
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 30
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PPUSH
1811: CALL_OW 69
1815: NOT
1816: AND
1817: PUSH
1818: LD_INT 124
1820: PPUSH
1821: LD_INT 26
1823: PPUSH
1824: CALL_OW 428
1828: PUSH
1829: LD_INT 0
1831: EQUAL
1832: PUSH
1833: LD_INT 124
1835: PPUSH
1836: LD_INT 26
1838: PPUSH
1839: CALL_OW 428
1843: PPUSH
1844: CALL_OW 255
1848: PUSH
1849: LD_INT 2
1851: EQUAL
1852: XOR
1853: AND
1854: IFFALSE 2241
1856: GO 1858
1858: DISABLE
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
// begin enable ;
1863: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1864: LD_EXP 33
1868: NOT
1869: PUSH
1870: LD_EXP 33
1874: PUSH
1875: LD_INT 4
1877: GREATER
1878: OR
1879: IFFALSE 1889
// cargoCounter := 1 ;
1881: LD_ADDR_EXP 33
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1889: LD_ADDR_VAR 0 2
1893: PUSH
1894: LD_INT 142
1896: PUSH
1897: LD_INT 15
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 129
1906: PUSH
1907: LD_INT 11
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 138
1916: PUSH
1917: LD_INT 9
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 133
1926: PUSH
1927: LD_INT 10
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: ST_TO_ADDR
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1956: LD_INT 5
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 13
1964: PPUSH
1965: LD_INT 2
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 32
1973: PPUSH
1974: LD_INT 70
1976: PPUSH
1977: CALL 336 0 7
// veh := CreateVehicle ;
1981: LD_ADDR_VAR 0 1
1985: PUSH
1986: CALL_OW 45
1990: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1991: LD_VAR 0 1
1995: PPUSH
1996: LD_INT 3
1998: PPUSH
1999: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 8
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// if not cargoDriver then
2018: LD_EXP 32
2022: NOT
2023: IFFALSE 2048
// begin PrepareHuman ( false , 1 , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: CALL_OW 380
// cargoDriver := CreateHuman ;
2038: LD_ADDR_EXP 32
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2048: LD_EXP 32
2052: PPUSH
2053: LD_VAR 0 1
2057: PPUSH
2058: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2062: LD_VAR 0 1
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 100
2072: PPUSH
2073: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2077: LD_VAR 0 1
2081: PPUSH
2082: LD_VAR 0 2
2086: PUSH
2087: LD_EXP 33
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PPUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_EXP 33
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: CALL_OW 111
// AddComUnload ( veh ) ;
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2125: LD_VAR 0 1
2129: PPUSH
2130: LD_INT 133
2132: PPUSH
2133: LD_INT 2
2135: PPUSH
2136: CALL_OW 171
// wait ( 0 0$5 ) ;
2140: LD_INT 175
2142: PPUSH
2143: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// if not HasTask ( veh ) then
2154: LD_VAR 0 1
2158: PPUSH
2159: CALL_OW 314
2163: NOT
2164: IFFALSE 2181
// ComMoveXY ( veh , 133 , 2 ) ;
2166: LD_VAR 0 1
2170: PPUSH
2171: LD_INT 133
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2181: LD_VAR 0 1
2185: PPUSH
2186: LD_INT 133
2188: PPUSH
2189: LD_INT 2
2191: PPUSH
2192: CALL_OW 307
2196: PUSH
2197: LD_VAR 0 1
2201: PPUSH
2202: LD_INT 8
2204: PPUSH
2205: CALL_OW 308
2209: OR
2210: IFFALSE 2147
// RemoveUnit ( cargoDriver ) ;
2212: LD_EXP 32
2216: PPUSH
2217: CALL_OW 64
// RemoveUnit ( veh ) ;
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 64
// if tick >= 20 20$00 then
2230: LD_OWVAR 1
2234: PUSH
2235: LD_INT 42000
2237: GREATEREQUAL
2238: IFFALSE 2241
// disable ;
2240: DISABLE
// end ; end_of_file
2241: PPOPN 2
2243: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
2254: PPUSH
// uc_side := 3 ;
2255: LD_ADDR_OWVAR 20
2259: PUSH
2260: LD_INT 3
2262: ST_TO_ADDR
// uc_nation := 3 ;
2263: LD_ADDR_OWVAR 21
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// ruForce := [ ] ;
2271: LD_ADDR_EXP 37
2275: PUSH
2276: EMPTY
2277: ST_TO_ADDR
// ruMech := [ ] ;
2278: LD_ADDR_EXP 39
2282: PUSH
2283: EMPTY
2284: ST_TO_ADDR
// ruEng := [ ] ;
2285: LD_ADDR_EXP 38
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// ruSci := [ ] ;
2292: LD_ADDR_EXP 40
2296: PUSH
2297: EMPTY
2298: ST_TO_ADDR
// ruMobile := [ ] ;
2299: LD_ADDR_EXP 41
2303: PUSH
2304: EMPTY
2305: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2306: LD_ADDR_EXP 34
2310: PUSH
2311: LD_STRING Burlak
2313: PPUSH
2314: LD_INT 0
2316: PPUSH
2317: LD_STRING 
2319: PPUSH
2320: CALL 30955 0 3
2324: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2325: LD_ADDR_EXP 35
2329: PUSH
2330: LD_STRING Gaydar
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: LD_STRING 
2338: PPUSH
2339: CALL 30955 0 3
2343: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2344: LD_ADDR_EXP 36
2348: PUSH
2349: LD_STRING Kuzmov
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: LD_STRING 
2357: PPUSH
2358: CALL 30955 0 3
2362: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2363: LD_EXP 36
2367: PPUSH
2368: LD_INT 200
2370: PPUSH
2371: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2375: LD_INT 200
2377: PPUSH
2378: LD_STRING chuikov
2380: PPUSH
2381: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2385: LD_INT 200
2387: PPUSH
2388: CALL_OW 274
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: LD_INT 800
2398: PUSH
2399: LD_INT 1000
2401: PUSH
2402: LD_INT 1250
2404: PUSH
2405: LD_INT 1300
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: PUSH
2414: LD_OWVAR 67
2418: ARRAY
2419: PPUSH
2420: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2424: LD_INT 200
2426: PPUSH
2427: CALL_OW 274
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: LD_INT 160
2437: PPUSH
2438: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2442: LD_INT 225
2444: PPUSH
2445: CALL_OW 274
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_INT 200
2455: PPUSH
2456: CALL_OW 277
// oil := 150 ;
2460: LD_ADDR_VAR 0 9
2464: PUSH
2465: LD_INT 150
2467: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2468: LD_EXP 5
2472: PUSH
2473: LD_INT 94500
2475: PUSH
2476: LD_INT 84000
2478: PUSH
2479: LD_INT 73500
2481: PUSH
2482: LD_INT 67200
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: LD_OWVAR 67
2495: ARRAY
2496: GREATEREQUAL
2497: IFFALSE 2652
// begin oil := 450 ;
2499: LD_ADDR_VAR 0 9
2503: PUSH
2504: LD_INT 450
2506: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 123
2514: PUSH
2515: LD_INT 17
2517: PUSH
2518: LD_INT 3
2520: PUSH
2521: LD_INT 31
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 152
2532: PUSH
2533: LD_INT 38
2535: PUSH
2536: LD_INT 3
2538: PUSH
2539: LD_INT 31
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 81
2550: PUSH
2551: LD_INT 6
2553: PUSH
2554: LD_INT 4
2556: PUSH
2557: LD_INT 31
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 113
2568: PUSH
2569: LD_INT 67
2571: PUSH
2572: LD_INT 4
2574: PUSH
2575: LD_INT 32
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: ST_TO_ADDR
// for i in tmp do
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_VAR 0 7
2599: PUSH
2600: FOR_IN
2601: IFFALSE 2650
// begin bc_type := i [ 4 ] ;
2603: LD_ADDR_OWVAR 42
2607: PUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_INT 4
2615: ARRAY
2616: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2617: LD_VAR 0 4
2621: PUSH
2622: LD_INT 1
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 4
2630: PUSH
2631: LD_INT 2
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 3
2642: ARRAY
2643: PPUSH
2644: CALL_OW 47
// end ;
2648: GO 2600
2650: POP
2651: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2652: LD_INT 225
2654: PPUSH
2655: CALL_OW 274
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: LD_VAR 0 9
2667: PPUSH
2668: CALL_OW 277
// if Difficulty > 1 then
2672: LD_OWVAR 67
2676: PUSH
2677: LD_INT 1
2679: GREATER
2680: IFFALSE 2775
// begin bc_type := b_bunker ;
2682: LD_ADDR_OWVAR 42
2686: PUSH
2687: LD_INT 32
2689: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2690: LD_ADDR_VAR 0 7
2694: PUSH
2695: LD_INT 121
2697: PUSH
2698: LD_INT 85
2700: PUSH
2701: LD_INT 5
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 93
2711: PUSH
2712: LD_INT 72
2714: PUSH
2715: LD_INT 1
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: ST_TO_ADDR
// for i in tmp do
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: LD_VAR 0 7
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2773
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2740: LD_VAR 0 4
2744: PUSH
2745: LD_INT 1
2747: ARRAY
2748: PPUSH
2749: LD_VAR 0 4
2753: PUSH
2754: LD_INT 2
2756: ARRAY
2757: PPUSH
2758: LD_VAR 0 4
2762: PUSH
2763: LD_INT 3
2765: ARRAY
2766: PPUSH
2767: CALL_OW 47
2771: GO 2737
2773: POP
2774: POP
// end ; base := GetBase ( ruMainBase ) ;
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 200
2782: PPUSH
2783: CALL_OW 274
2787: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2788: LD_ADDR_VAR 0 3
2792: PUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: CALL_OW 417
2802: ST_TO_ADDR
// for b in blist do
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_VAR 0 3
2812: PUSH
2813: FOR_IN
2814: IFFALSE 3265
// begin if b [ 1 ] = b_factory then
2816: LD_VAR 0 5
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: PUSH
2825: LD_INT 3
2827: EQUAL
2828: IFFALSE 2979
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2830: LD_ADDR_VAR 0 8
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 2
2842: ARRAY
2843: PPUSH
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 3
2851: ARRAY
2852: PPUSH
2853: CALL_OW 428
2857: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2858: LD_ADDR_VAR 0 4
2862: PUSH
2863: DOUBLE
2864: LD_INT 1
2866: DEC
2867: ST_TO_ADDR
2868: LD_INT 2
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: LD_OWVAR 67
2878: PLUS
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: LD_EXP 10
2888: PUSH
2889: LD_INT 3
2891: GREATER
2892: PUSH
2893: LD_INT 1
2895: PLUS
2896: ARRAY
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2975
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: LD_INT 1
2909: PUSH
2910: LD_OWVAR 67
2914: PLUS
2915: PPUSH
2916: CALL_OW 380
// un := CreateHuman ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: CALL_OW 44
2929: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2930: LD_ADDR_EXP 39
2934: PUSH
2935: LD_EXP 39
2939: PPUSH
2940: LD_EXP 39
2944: PUSH
2945: LD_INT 1
2947: PLUS
2948: PPUSH
2949: LD_VAR 0 6
2953: PPUSH
2954: CALL_OW 1
2958: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2959: LD_VAR 0 6
2963: PPUSH
2964: LD_VAR 0 8
2968: PPUSH
2969: CALL_OW 52
// end ;
2973: GO 2898
2975: POP
2976: POP
// end else
2977: GO 3263
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2979: LD_VAR 0 5
2983: PUSH
2984: LD_INT 1
2986: ARRAY
2987: PUSH
2988: LD_INT 6
2990: PUSH
2991: LD_INT 7
2993: PUSH
2994: LD_INT 8
2996: PUSH
2997: LD_INT 10
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: IN
3006: IFFALSE 3116
// begin for i := 1 to 2 do
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: DOUBLE
3014: LD_INT 1
3016: DEC
3017: ST_TO_ADDR
3018: LD_INT 2
3020: PUSH
3021: FOR_TO
3022: IFFALSE 3112
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3024: LD_INT 0
3026: PPUSH
3027: LD_INT 4
3029: PPUSH
3030: LD_OWVAR 67
3034: PPUSH
3035: CALL_OW 380
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3049: LD_ADDR_EXP 40
3053: PUSH
3054: LD_EXP 40
3058: PPUSH
3059: LD_EXP 40
3063: PUSH
3064: LD_INT 1
3066: PLUS
3067: PPUSH
3068: LD_VAR 0 6
3072: PPUSH
3073: CALL_OW 1
3077: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3078: LD_VAR 0 6
3082: PPUSH
3083: LD_VAR 0 5
3087: PUSH
3088: LD_INT 2
3090: ARRAY
3091: PPUSH
3092: LD_VAR 0 5
3096: PUSH
3097: LD_INT 3
3099: ARRAY
3100: PPUSH
3101: CALL_OW 428
3105: PPUSH
3106: CALL_OW 52
// end ;
3110: GO 3021
3112: POP
3113: POP
// end else
3114: GO 3263
// if b [ 1 ] = b_warehouse then
3116: LD_VAR 0 5
3120: PUSH
3121: LD_INT 1
3123: ARRAY
3124: PUSH
3125: LD_INT 1
3127: EQUAL
3128: IFFALSE 3263
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3130: LD_ADDR_VAR 0 4
3134: PUSH
3135: DOUBLE
3136: LD_INT 1
3138: DEC
3139: ST_TO_ADDR
3140: LD_INT 1
3142: PUSH
3143: LD_INT 1
3145: PUSH
3146: LD_OWVAR 67
3150: PLUS
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_EXP 10
3160: PUSH
3161: LD_INT 3
3163: GREATER
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: ARRAY
3169: PUSH
3170: FOR_TO
3171: IFFALSE 3261
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3173: LD_INT 0
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: LD_OWVAR 67
3183: PPUSH
3184: CALL_OW 380
// un := CreateHuman ;
3188: LD_ADDR_VAR 0 6
3192: PUSH
3193: CALL_OW 44
3197: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3198: LD_ADDR_EXP 38
3202: PUSH
3203: LD_EXP 38
3207: PPUSH
3208: LD_EXP 38
3212: PUSH
3213: LD_INT 1
3215: PLUS
3216: PPUSH
3217: LD_VAR 0 6
3221: PPUSH
3222: CALL_OW 1
3226: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3227: LD_VAR 0 6
3231: PPUSH
3232: LD_VAR 0 5
3236: PUSH
3237: LD_INT 2
3239: ARRAY
3240: PPUSH
3241: LD_VAR 0 5
3245: PUSH
3246: LD_INT 3
3248: ARRAY
3249: PPUSH
3250: CALL_OW 428
3254: PPUSH
3255: CALL_OW 52
// end ;
3259: GO 3170
3261: POP
3262: POP
// end ; end ;
3263: GO 2813
3265: POP
3266: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3267: LD_ADDR_VAR 0 3
3271: PUSH
3272: LD_INT 22
3274: PUSH
3275: LD_INT 3
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 21
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PPUSH
3296: CALL_OW 69
3300: ST_TO_ADDR
// for b in blist do
3301: LD_ADDR_VAR 0 5
3305: PUSH
3306: LD_VAR 0 3
3310: PUSH
3311: FOR_IN
3312: IFFALSE 3334
// SetBLevel ( b , 3 + Difficulty ) ;
3314: LD_VAR 0 5
3318: PPUSH
3319: LD_INT 3
3321: PUSH
3322: LD_OWVAR 67
3326: PLUS
3327: PPUSH
3328: CALL_OW 241
3332: GO 3311
3334: POP
3335: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3336: LD_ADDR_VAR 0 3
3340: PUSH
3341: LD_INT 22
3343: PUSH
3344: LD_INT 3
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 30
3353: PUSH
3354: LD_INT 32
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 69
3369: ST_TO_ADDR
// for b in blist do
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 3
3379: PUSH
3380: FOR_IN
3381: IFFALSE 3490
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3383: LD_INT 0
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: LD_INT 1
3391: PUSH
3392: LD_OWVAR 67
3396: PLUS
3397: PPUSH
3398: CALL_OW 380
// un := CreateHuman ;
3402: LD_ADDR_VAR 0 6
3406: PUSH
3407: CALL_OW 44
3411: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3412: LD_ADDR_EXP 37
3416: PUSH
3417: LD_EXP 37
3421: PPUSH
3422: LD_EXP 37
3426: PUSH
3427: LD_INT 1
3429: PLUS
3430: PPUSH
3431: LD_VAR 0 6
3435: PPUSH
3436: CALL_OW 1
3440: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3441: LD_VAR 0 6
3445: PPUSH
3446: LD_VAR 0 5
3450: PPUSH
3451: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3455: LD_VAR 0 5
3459: PPUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 43
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_VAR 0 5
3474: PUSH
3475: LD_INT 2
3477: MOD
3478: PUSH
3479: LD_INT 1
3481: PLUS
3482: ARRAY
3483: PPUSH
3484: CALL_OW 431
// end ;
3488: GO 3380
3490: POP
3491: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3492: LD_ADDR_VAR 0 3
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_INT 3
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 30
3509: PUSH
3510: LD_INT 31
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 69
3525: ST_TO_ADDR
// for b in blist do
3526: LD_ADDR_VAR 0 5
3530: PUSH
3531: LD_VAR 0 3
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3636
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3539: LD_INT 0
3541: PPUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_INT 1
3547: PUSH
3548: LD_OWVAR 67
3552: PLUS
3553: PPUSH
3554: CALL_OW 380
// un := CreateHuman ;
3558: LD_ADDR_VAR 0 6
3562: PUSH
3563: CALL_OW 44
3567: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3568: LD_ADDR_EXP 37
3572: PUSH
3573: LD_EXP 37
3577: PPUSH
3578: LD_EXP 37
3582: PUSH
3583: LD_INT 1
3585: PLUS
3586: PPUSH
3587: LD_VAR 0 6
3591: PPUSH
3592: CALL_OW 1
3596: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3597: LD_VAR 0 6
3601: PPUSH
3602: LD_VAR 0 5
3606: PPUSH
3607: CALL_OW 254
3611: PUSH
3612: LD_INT 3
3614: PLUS
3615: PPUSH
3616: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3620: LD_VAR 0 6
3624: PPUSH
3625: LD_VAR 0 5
3629: PPUSH
3630: CALL_OW 52
// end ;
3634: GO 3536
3636: POP
3637: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3638: LD_ADDR_VAR 0 3
3642: PUSH
3643: LD_INT 22
3645: PUSH
3646: LD_INT 3
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 2
3655: PUSH
3656: LD_INT 30
3658: PUSH
3659: LD_INT 4
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 30
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 69
3689: ST_TO_ADDR
// for b in blist do
3690: LD_ADDR_VAR 0 5
3694: PUSH
3695: LD_VAR 0 3
3699: PUSH
3700: FOR_IN
3701: IFFALSE 3797
// begin for i := 1 to 2 do
3703: LD_ADDR_VAR 0 4
3707: PUSH
3708: DOUBLE
3709: LD_INT 1
3711: DEC
3712: ST_TO_ADDR
3713: LD_INT 2
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3793
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3719: LD_INT 0
3721: PPUSH
3722: LD_INT 1
3724: PPUSH
3725: LD_INT 1
3727: PUSH
3728: LD_OWVAR 67
3732: PLUS
3733: PPUSH
3734: CALL_OW 380
// un := CreateHuman ;
3738: LD_ADDR_VAR 0 6
3742: PUSH
3743: CALL_OW 44
3747: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3748: LD_ADDR_EXP 37
3752: PUSH
3753: LD_EXP 37
3757: PPUSH
3758: LD_EXP 37
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: PPUSH
3767: LD_VAR 0 6
3771: PPUSH
3772: CALL_OW 1
3776: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3777: LD_VAR 0 6
3781: PPUSH
3782: LD_VAR 0 5
3786: PPUSH
3787: CALL_OW 52
// end ;
3791: GO 3716
3793: POP
3794: POP
// end ;
3795: GO 3700
3797: POP
3798: POP
// if ibrahimOnRuSide then
3799: LD_EXP 3
3803: IFFALSE 3901
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3805: LD_ADDR_EXP 21
3809: PUSH
3810: LD_STRING IbrahimRu
3812: PPUSH
3813: LD_INT 0
3815: PPUSH
3816: LD_STRING 
3818: PPUSH
3819: CALL 30955 0 3
3823: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3824: LD_EXP 21
3828: PPUSH
3829: LD_INT 121
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 48
// ComHold ( Ibrahim ) ;
3842: LD_EXP 21
3846: PPUSH
3847: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 2
3859: PPUSH
3860: CALL_OW 380
// ruSol := CreateHuman ;
3864: LD_ADDR_EXP 42
3868: PUSH
3869: CALL_OW 44
3873: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3874: LD_EXP 42
3878: PPUSH
3879: LD_INT 121
3881: PPUSH
3882: LD_INT 75
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 48
// ComHold ( ruSol ) ;
3892: LD_EXP 42
3896: PPUSH
3897: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3901: LD_ADDR_VAR 0 4
3905: PUSH
3906: DOUBLE
3907: LD_INT 1
3909: DEC
3910: ST_TO_ADDR
3911: LD_INT 2
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_OWVAR 67
3921: PLUS
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_EXP 10
3931: PUSH
3932: LD_INT 3
3934: GREATER
3935: PUSH
3936: LD_INT 1
3938: PLUS
3939: ARRAY
3940: PUSH
3941: FOR_TO
3942: IFFALSE 4011
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3944: LD_VAR 0 8
3948: PPUSH
3949: LD_INT 21
3951: PUSH
3952: LD_INT 23
3954: PUSH
3955: LD_INT 24
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: PUSH
3963: LD_VAR 0 4
3967: PUSH
3968: LD_INT 3
3970: MOD
3971: PUSH
3972: LD_INT 1
3974: PLUS
3975: ARRAY
3976: PPUSH
3977: LD_INT 1
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 43
3985: PUSH
3986: LD_INT 44
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 2
3998: PPUSH
3999: CALL_OW 12
4003: ARRAY
4004: PPUSH
4005: CALL_OW 185
4009: GO 3941
4011: POP
4012: POP
// end ;
4013: LD_VAR 0 1
4017: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4018: LD_EXP 41
4022: PUSH
4023: LD_EXP 4
4027: NOT
4028: AND
4029: IFFALSE 4517
4031: GO 4033
4033: DISABLE
4034: LD_INT 0
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
4040: PPUSH
4041: PPUSH
// begin enable ;
4042: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4043: LD_ADDR_VAR 0 2
4047: PUSH
4048: LD_EXP 41
4052: PPUSH
4053: LD_INT 21
4055: PUSH
4056: LD_INT 2
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PPUSH
4063: CALL_OW 72
4067: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4068: LD_ADDR_VAR 0 4
4072: PUSH
4073: LD_INT 81
4075: PUSH
4076: LD_INT 3
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: LD_INT 2
4085: PUSH
4086: LD_INT 95
4088: PUSH
4089: LD_INT 4
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 95
4098: PUSH
4099: LD_INT 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 95
4108: PUSH
4109: LD_INT 6
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 95
4118: PUSH
4119: LD_INT 7
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PPUSH
4137: CALL_OW 69
4141: ST_TO_ADDR
// for i in filter do
4142: LD_ADDR_VAR 0 1
4146: PUSH
4147: LD_VAR 0 2
4151: PUSH
4152: FOR_IN
4153: IFFALSE 4515
// begin tmp := IsDrivenBy ( i ) ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: LD_VAR 0 1
4164: PPUSH
4165: CALL_OW 311
4169: ST_TO_ADDR
// tag := GetTag ( i ) ;
4170: LD_ADDR_VAR 0 6
4174: PUSH
4175: LD_VAR 0 1
4179: PPUSH
4180: CALL_OW 110
4184: ST_TO_ADDR
// if not tmp then
4185: LD_VAR 0 3
4189: NOT
4190: IFFALSE 4194
// continue ;
4192: GO 4152
// if GetFuel ( i ) > 90 and tag = 2 then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 261
4203: PUSH
4204: LD_INT 90
4206: GREATER
4207: PUSH
4208: LD_VAR 0 6
4212: PUSH
4213: LD_INT 2
4215: EQUAL
4216: AND
4217: IFFALSE 4233
// SetTag ( i , 0 ) else
4219: LD_VAR 0 1
4223: PPUSH
4224: LD_INT 0
4226: PPUSH
4227: CALL_OW 109
4231: GO 4276
// if GetTag ( i ) = 2 then
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 110
4242: PUSH
4243: LD_INT 2
4245: EQUAL
4246: IFFALSE 4276
// begin x := rand ( 1 , 2 ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_INT 1
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 12
4263: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4264: LD_VAR 0 1
4268: PPUSH
4269: LD_INT 200
4271: PPUSH
4272: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4276: LD_VAR 0 1
4280: PPUSH
4281: CALL_OW 256
4285: PUSH
4286: LD_INT 650
4288: GREATEREQUAL
4289: PUSH
4290: LD_VAR 0 6
4294: NOT
4295: AND
4296: IFFALSE 4322
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4298: LD_VAR 0 1
4302: PPUSH
4303: LD_VAR 0 4
4307: PPUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 74
4317: PPUSH
4318: CALL_OW 115
// if GetLives ( i ) < 650 and not tag then
4322: LD_VAR 0 1
4326: PPUSH
4327: CALL_OW 256
4331: PUSH
4332: LD_INT 650
4334: LESS
4335: PUSH
4336: LD_VAR 0 6
4340: NOT
4341: AND
4342: IFFALSE 4371
// begin SetTag ( i , 1 ) ;
4344: LD_VAR 0 1
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4356: LD_VAR 0 1
4360: PPUSH
4361: LD_INT 112
4363: PPUSH
4364: LD_INT 119
4366: PPUSH
4367: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4371: LD_VAR 0 1
4375: PPUSH
4376: CALL_OW 110
4380: PUSH
4381: LD_INT 1
4383: EQUAL
4384: PUSH
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_INT 112
4392: PPUSH
4393: LD_INT 119
4395: PPUSH
4396: CALL_OW 297
4400: PUSH
4401: LD_INT 9
4403: LESS
4404: AND
4405: PUSH
4406: LD_VAR 0 3
4410: AND
4411: IFFALSE 4513
// begin ComExitVehicle ( tmp ) ;
4413: LD_VAR 0 3
4417: PPUSH
4418: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4422: LD_VAR 0 3
4426: PPUSH
4427: LD_VAR 0 1
4431: PPUSH
4432: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4436: LD_INT 35
4438: PPUSH
4439: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4443: LD_VAR 0 1
4447: PPUSH
4448: CALL_OW 256
4452: PUSH
4453: LD_INT 1000
4455: EQUAL
4456: IFFALSE 4436
// ComEnterUnit ( tmp , i ) ;
4458: LD_VAR 0 3
4462: PPUSH
4463: LD_VAR 0 1
4467: PPUSH
4468: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4472: LD_VAR 0 1
4476: PPUSH
4477: CALL_OW 261
4481: PUSH
4482: LD_INT 50
4484: LESSEQUAL
4485: IFFALSE 4501
// SetTag ( i , 2 ) else
4487: LD_VAR 0 1
4491: PPUSH
4492: LD_INT 2
4494: PPUSH
4495: CALL_OW 109
4499: GO 4513
// SetTag ( i , 0 ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 109
// end ; end ;
4513: GO 4152
4515: POP
4516: POP
// end ;
4517: PPOPN 6
4519: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4520: LD_EXP 4
4524: NOT
4525: PUSH
4526: LD_EXP 38
4530: AND
4531: IFFALSE 4792
4533: GO 4535
4535: DISABLE
4536: LD_INT 0
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
// begin enable ;
4542: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: LD_INT 3
4550: PPUSH
4551: LD_INT 22
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 21
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 3
4573: PUSH
4574: LD_INT 24
4576: PUSH
4577: LD_INT 1000
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 70
4597: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: LD_EXP 38
4607: PPUSH
4608: LD_INT 50
4610: PUSH
4611: EMPTY
4612: LIST
4613: PPUSH
4614: CALL_OW 72
4618: ST_TO_ADDR
// if filter and tmp then
4619: LD_VAR 0 2
4623: PUSH
4624: LD_VAR 0 3
4628: AND
4629: IFFALSE 4721
// begin for i in tmp do
4631: LD_ADDR_VAR 0 1
4635: PUSH
4636: LD_VAR 0 3
4640: PUSH
4641: FOR_IN
4642: IFFALSE 4717
// begin if GetTag ( i ) = tEscape then
4644: LD_VAR 0 1
4648: PPUSH
4649: CALL_OW 110
4653: PUSH
4654: LD_EXP 17
4658: EQUAL
4659: IFFALSE 4663
// continue ;
4661: GO 4641
// if IsInUnit ( i ) then
4663: LD_VAR 0 1
4667: PPUSH
4668: CALL_OW 310
4672: IFFALSE 4685
// ComExitBuilding ( i ) else
4674: LD_VAR 0 1
4678: PPUSH
4679: CALL_OW 122
4683: GO 4715
// if not HasTask ( i ) then
4685: LD_VAR 0 1
4689: PPUSH
4690: CALL_OW 314
4694: NOT
4695: IFFALSE 4715
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4697: LD_VAR 0 1
4701: PPUSH
4702: LD_VAR 0 2
4706: PUSH
4707: LD_INT 1
4709: ARRAY
4710: PPUSH
4711: CALL_OW 130
// end ;
4715: GO 4641
4717: POP
4718: POP
// end else
4719: GO 4792
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4721: LD_VAR 0 3
4725: PPUSH
4726: LD_INT 3
4728: PUSH
4729: LD_INT 54
4731: PUSH
4732: EMPTY
4733: LIST
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PPUSH
4739: CALL_OW 72
4743: IFFALSE 4792
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4745: LD_ADDR_VAR 0 1
4749: PUSH
4750: LD_VAR 0 3
4754: PPUSH
4755: LD_INT 3
4757: PUSH
4758: LD_INT 54
4760: PUSH
4761: EMPTY
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 72
4772: PUSH
4773: FOR_IN
4774: IFFALSE 4790
// ComEnterUnit ( i , ruMainBase ) ;
4776: LD_VAR 0 1
4780: PPUSH
4781: LD_INT 200
4783: PPUSH
4784: CALL_OW 120
4788: GO 4773
4790: POP
4791: POP
// end ; end ;
4792: PPOPN 4
4794: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4795: LD_EXP 4
4799: NOT
4800: PUSH
4801: LD_EXP 40
4805: AND
4806: IFFALSE 5085
4808: GO 4810
4810: DISABLE
4811: LD_INT 0
4813: PPUSH
4814: PPUSH
4815: PPUSH
4816: PPUSH
// begin enable ;
4817: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4818: LD_ADDR_VAR 0 2
4822: PUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 22
4828: PUSH
4829: LD_INT 3
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 21
4838: PUSH
4839: LD_INT 1
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 3
4848: PUSH
4849: LD_INT 24
4851: PUSH
4852: LD_INT 1000
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PPUSH
4868: CALL_OW 70
4872: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4873: LD_ADDR_VAR 0 3
4877: PUSH
4878: LD_EXP 40
4882: PPUSH
4883: LD_INT 50
4885: PUSH
4886: EMPTY
4887: LIST
4888: PPUSH
4889: CALL_OW 72
4893: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4894: LD_ADDR_VAR 0 4
4898: PUSH
4899: LD_INT 118
4901: PPUSH
4902: LD_INT 121
4904: PPUSH
4905: CALL_OW 428
4909: ST_TO_ADDR
// if filter and tmp then
4910: LD_VAR 0 2
4914: PUSH
4915: LD_VAR 0 3
4919: AND
4920: IFFALSE 5012
// begin for i in tmp do
4922: LD_ADDR_VAR 0 1
4926: PUSH
4927: LD_VAR 0 3
4931: PUSH
4932: FOR_IN
4933: IFFALSE 5008
// begin if GetTag ( i ) = tEscape then
4935: LD_VAR 0 1
4939: PPUSH
4940: CALL_OW 110
4944: PUSH
4945: LD_EXP 17
4949: EQUAL
4950: IFFALSE 4954
// continue ;
4952: GO 4932
// if IsInUnit ( i ) then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 310
4963: IFFALSE 4976
// ComExitBuilding ( i ) else
4965: LD_VAR 0 1
4969: PPUSH
4970: CALL_OW 122
4974: GO 5006
// if not HasTask ( i ) then
4976: LD_VAR 0 1
4980: PPUSH
4981: CALL_OW 314
4985: NOT
4986: IFFALSE 5006
// ComHeal ( i , filter [ 1 ] ) ;
4988: LD_VAR 0 1
4992: PPUSH
4993: LD_VAR 0 2
4997: PUSH
4998: LD_INT 1
5000: ARRAY
5001: PPUSH
5002: CALL_OW 128
// end ;
5006: GO 4932
5008: POP
5009: POP
// end else
5010: GO 5085
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5012: LD_VAR 0 3
5016: PPUSH
5017: LD_INT 3
5019: PUSH
5020: LD_INT 54
5022: PUSH
5023: EMPTY
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 72
5034: IFFALSE 5085
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5036: LD_ADDR_VAR 0 1
5040: PUSH
5041: LD_VAR 0 3
5045: PPUSH
5046: LD_INT 3
5048: PUSH
5049: LD_INT 54
5051: PUSH
5052: EMPTY
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: PUSH
5064: FOR_IN
5065: IFFALSE 5083
// ComEnterUnit ( i , lab ) ;
5067: LD_VAR 0 1
5071: PPUSH
5072: LD_VAR 0 4
5076: PPUSH
5077: CALL_OW 120
5081: GO 5064
5083: POP
5084: POP
// end ; end ; end_of_file
5085: PPOPN 4
5087: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5088: LD_VAR 0 1
5092: PPUSH
5093: CALL 26227 0 1
// if un = Heike then
5097: LD_VAR 0 1
5101: PUSH
5102: LD_EXP 18
5106: EQUAL
5107: IFFALSE 5116
// YouLost ( Heike ) ;
5109: LD_STRING Heike
5111: PPUSH
5112: CALL_OW 104
// if un in ruEng then
5116: LD_VAR 0 1
5120: PUSH
5121: LD_EXP 38
5125: IN
5126: IFFALSE 5144
// ruEng := ruEng diff un ;
5128: LD_ADDR_EXP 38
5132: PUSH
5133: LD_EXP 38
5137: PUSH
5138: LD_VAR 0 1
5142: DIFF
5143: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5144: LD_VAR 0 1
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 21
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: PPUSH
5184: CALL_OW 69
5188: IN
5189: IFFALSE 5205
// loseCounter := loseCounter + 1 ;
5191: LD_ADDR_EXP 6
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: ST_TO_ADDR
// end ;
5205: PPOPN 1
5207: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5208: LD_INT 0
5210: PPUSH
5211: PPUSH
// begin if un in ruMobile then
5212: LD_VAR 0 2
5216: PUSH
5217: LD_EXP 41
5221: IN
5222: IFFALSE 5381
// begin ruMobile := ruMobile diff un ;
5224: LD_ADDR_EXP 41
5228: PUSH
5229: LD_EXP 41
5233: PUSH
5234: LD_VAR 0 2
5238: DIFF
5239: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5240: LD_ADDR_VAR 0 5
5244: PUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: CALL_OW 264
5254: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5255: LD_ADDR_VAR 0 6
5259: PUSH
5260: LD_INT 110
5262: PPUSH
5263: LD_INT 126
5265: PPUSH
5266: CALL_OW 428
5270: ST_TO_ADDR
// if not driver or not fac then
5271: LD_VAR 0 1
5275: NOT
5276: PUSH
5277: LD_VAR 0 6
5281: NOT
5282: OR
5283: IFFALSE 5287
// exit ;
5285: GO 5381
// AddComMoveXY ( driver , 111 , 121 ) ;
5287: LD_VAR 0 1
5291: PPUSH
5292: LD_INT 111
5294: PPUSH
5295: LD_INT 121
5297: PPUSH
5298: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5302: LD_VAR 0 1
5306: PPUSH
5307: LD_VAR 0 6
5311: PPUSH
5312: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5316: LD_INT 35
5318: PPUSH
5319: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5323: LD_VAR 0 1
5327: PPUSH
5328: CALL_OW 301
5332: PUSH
5333: LD_VAR 0 1
5337: PPUSH
5338: CALL_OW 310
5342: OR
5343: IFFALSE 5316
// if IsDead ( driver ) then
5345: LD_VAR 0 1
5349: PPUSH
5350: CALL_OW 301
5354: IFFALSE 5358
// exit ;
5356: GO 5381
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5358: LD_VAR 0 6
5362: PPUSH
5363: LD_INT 21
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_VAR 0 5
5376: PPUSH
5377: CALL_OW 185
// end ; end ;
5381: PPOPN 6
5383: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL 26347 0 2
// if GetSide ( fac ) = 3 then
5398: LD_VAR 0 2
5402: PPUSH
5403: CALL_OW 255
5407: PUSH
5408: LD_INT 3
5410: EQUAL
5411: IFFALSE 5457
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5413: LD_ADDR_EXP 41
5417: PUSH
5418: LD_EXP 41
5422: PPUSH
5423: LD_EXP 41
5427: PUSH
5428: LD_INT 1
5430: PLUS
5431: PPUSH
5432: LD_VAR 0 1
5436: PPUSH
5437: CALL_OW 1
5441: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_INT 110
5449: PPUSH
5450: LD_INT 117
5452: PPUSH
5453: CALL_OW 171
// end ; end ;
5457: PPOPN 2
5459: END
// on LeaveBuilding ( b , un ) do var barracks ;
5460: LD_INT 0
5462: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5463: LD_VAR 0 1
5467: PUSH
5468: LD_INT 130
5470: PPUSH
5471: LD_INT 17
5473: PPUSH
5474: CALL_OW 428
5478: PUSH
5479: LD_INT 138
5481: PPUSH
5482: LD_INT 22
5484: PPUSH
5485: CALL_OW 428
5489: PUSH
5490: LD_INT 123
5492: PPUSH
5493: LD_INT 17
5495: PPUSH
5496: CALL_OW 428
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: LIST
5505: IN
5506: IFFALSE 5530
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5508: LD_VAR 0 2
5512: PPUSH
5513: LD_INT 135
5515: PPUSH
5516: LD_INT 31
5518: PPUSH
5519: CALL_OW 428
5523: PPUSH
5524: CALL_OW 180
// exit ;
5528: GO 5804
// end ; if b = HexInfo ( 135 , 31 ) then
5530: LD_VAR 0 1
5534: PUSH
5535: LD_INT 135
5537: PPUSH
5538: LD_INT 31
5540: PPUSH
5541: CALL_OW 428
5545: EQUAL
5546: IFFALSE 5618
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5548: LD_VAR 0 2
5552: PPUSH
5553: LD_INT 106
5555: PPUSH
5556: LD_INT 51
5558: PPUSH
5559: CALL_OW 428
5563: PPUSH
5564: CALL_OW 180
// if not explodeFirstDepot then
5568: LD_EXP 12
5572: NOT
5573: IFFALSE 5616
// begin explodeFirstDepot := true ;
5575: LD_ADDR_EXP 12
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5583: LD_INT 525
5585: PPUSH
5586: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5590: LD_INT 127
5592: PPUSH
5593: LD_INT 27
5595: PPUSH
5596: LD_INT 1
5598: PPUSH
5599: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5603: LD_INT 125
5605: PPUSH
5606: LD_INT 29
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 453
// end ; exit ;
5616: GO 5804
// end ; if b = HexInfo ( 106 , 51 ) then
5618: LD_VAR 0 1
5622: PUSH
5623: LD_INT 106
5625: PPUSH
5626: LD_INT 51
5628: PPUSH
5629: CALL_OW 428
5633: EQUAL
5634: IFFALSE 5734
// begin AddComMoveXY ( un , 106 , 93 ) ;
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_INT 106
5643: PPUSH
5644: LD_INT 93
5646: PPUSH
5647: CALL_OW 171
// if not explodeSecondDepot then
5651: LD_EXP 13
5655: NOT
5656: IFFALSE 5732
// begin explodeSecondDepot := true ;
5658: LD_ADDR_EXP 13
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5666: LD_INT 420
5668: PPUSH
5669: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5673: LD_INT 111
5675: PPUSH
5676: LD_INT 75
5678: PPUSH
5679: LD_INT 1
5681: PPUSH
5682: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5686: LD_INT 111
5688: PPUSH
5689: LD_INT 75
5691: PPUSH
5692: LD_INT 1
5694: PPUSH
5695: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5699: LD_INT 108
5701: PPUSH
5702: LD_INT 69
5704: PPUSH
5705: LD_INT 1
5707: PPUSH
5708: CALL_OW 453
// wait ( 0 0$2 ) ;
5712: LD_INT 70
5714: PPUSH
5715: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5719: LD_INT 94
5721: PPUSH
5722: LD_INT 65
5724: PPUSH
5725: LD_INT 1
5727: PPUSH
5728: CALL_OW 453
// end ; exit ;
5732: GO 5804
// end ; if GetBType ( b ) = b_bunker then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 266
5743: PUSH
5744: LD_INT 32
5746: EQUAL
5747: IFFALSE 5804
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_VAR 0 2
5758: PPUSH
5759: LD_INT 5
5761: PPUSH
5762: CALL 1008 0 2
5766: ST_TO_ADDR
// if barracks then
5767: LD_VAR 0 3
5771: IFFALSE 5789
// AddComEnterUnit ( un , barracks ) else
5773: LD_VAR 0 2
5777: PPUSH
5778: LD_VAR 0 3
5782: PPUSH
5783: CALL_OW 180
5787: GO 5804
// AddComMoveXY ( un , 116 , 110 ) ;
5789: LD_VAR 0 2
5793: PPUSH
5794: LD_INT 116
5796: PPUSH
5797: LD_INT 110
5799: PPUSH
5800: CALL_OW 171
// end ; end ;
5804: PPOPN 3
5806: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5807: LD_VAR 0 1
5811: PUSH
5812: LD_EXP 23
5816: EQUAL
5817: PUSH
5818: LD_VAR 0 2
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: LD_INT 6
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: IN
5833: AND
5834: IFFALSE 5865
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5836: LD_ADDR_EXP 8
5840: PUSH
5841: LD_VAR 0 1
5845: PPUSH
5846: CALL_OW 250
5850: PUSH
5851: LD_VAR 0 1
5855: PPUSH
5856: CALL_OW 251
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: ST_TO_ADDR
// end ; end_of_file
5865: PPOPN 3
5867: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5868: LD_INT 0
5870: PPUSH
5871: PPUSH
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
5876: PPUSH
// InGameOn ;
5877: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5881: LD_INT 5
5883: PPUSH
5884: LD_INT 2
5886: PPUSH
5887: CALL_OW 343
// music_nat := 4 ;
5891: LD_ADDR_OWVAR 71
5895: PUSH
5896: LD_INT 4
5898: ST_TO_ADDR
// music_class := music_combat ;
5899: LD_ADDR_OWVAR 72
5903: PUSH
5904: LD_INT 1
5906: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5907: LD_INT 133
5909: PPUSH
5910: LD_INT 2
5912: PPUSH
5913: LD_INT 2
5915: PPUSH
5916: LD_INT 10
5918: PPUSH
5919: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5923: LD_INT 133
5925: PPUSH
5926: LD_INT 2
5928: PPUSH
5929: CALL_OW 86
// wait ( 0 0$1 ) ;
5933: LD_INT 35
5935: PPUSH
5936: CALL_OW 67
// uc_side := 6 ;
5940: LD_ADDR_OWVAR 20
5944: PUSH
5945: LD_INT 6
5947: ST_TO_ADDR
// uc_nation := 3 ;
5948: LD_ADDR_OWVAR 21
5952: PUSH
5953: LD_INT 3
5955: ST_TO_ADDR
// rutmp := [ ] ;
5956: LD_ADDR_VAR 0 7
5960: PUSH
5961: EMPTY
5962: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5963: LD_INT 6
5965: PPUSH
5966: LD_INT 3
5968: PPUSH
5969: LD_INT 21
5971: PPUSH
5972: LD_INT 1
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 44
5980: PPUSH
5981: LD_INT 66
5983: PPUSH
5984: CALL 336 0 7
// veh := CreateVehicle ;
5988: LD_ADDR_VAR 0 5
5992: PUSH
5993: CALL_OW 45
5997: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6010: LD_VAR 0 5
6014: PPUSH
6015: LD_INT 8
6017: PPUSH
6018: LD_INT 0
6020: PPUSH
6021: CALL_OW 49
// SetLives ( veh , 500 ) ;
6025: LD_VAR 0 5
6029: PPUSH
6030: LD_INT 500
6032: PPUSH
6033: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 3
6042: PPUSH
6043: LD_INT 3
6045: PPUSH
6046: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6050: CALL_OW 44
6054: PPUSH
6055: LD_VAR 0 5
6059: PPUSH
6060: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6064: LD_VAR 0 5
6068: PPUSH
6069: LD_INT 133
6071: PPUSH
6072: LD_INT 11
6074: PPUSH
6075: CALL_OW 111
// rutmp := [ veh ] ;
6079: LD_ADDR_VAR 0 7
6083: PUSH
6084: LD_VAR 0 5
6088: PUSH
6089: EMPTY
6090: LIST
6091: ST_TO_ADDR
// for i := 1 to 4 do
6092: LD_ADDR_VAR 0 2
6096: PUSH
6097: DOUBLE
6098: LD_INT 1
6100: DEC
6101: ST_TO_ADDR
6102: LD_INT 4
6104: PUSH
6105: FOR_TO
6106: IFFALSE 6213
// begin PrepareHuman ( false , i , 2 ) ;
6108: LD_INT 0
6110: PPUSH
6111: LD_VAR 0 2
6115: PPUSH
6116: LD_INT 2
6118: PPUSH
6119: CALL_OW 380
// un := CreateHuman ;
6123: LD_ADDR_VAR 0 4
6127: PUSH
6128: CALL_OW 44
6132: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6133: LD_VAR 0 4
6137: PPUSH
6138: LD_INT 3
6140: PPUSH
6141: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6145: LD_VAR 0 4
6149: PPUSH
6150: LD_INT 8
6152: PPUSH
6153: LD_INT 0
6155: PPUSH
6156: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6160: LD_ADDR_VAR 0 7
6164: PUSH
6165: LD_VAR 0 7
6169: PPUSH
6170: LD_VAR 0 7
6174: PUSH
6175: LD_INT 1
6177: PLUS
6178: PPUSH
6179: LD_VAR 0 4
6183: PPUSH
6184: CALL_OW 1
6188: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6189: LD_VAR 0 4
6193: PPUSH
6194: LD_INT 133
6196: PPUSH
6197: LD_INT 11
6199: PPUSH
6200: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6204: LD_INT 18
6206: PPUSH
6207: CALL_OW 67
// end ;
6211: GO 6105
6213: POP
6214: POP
// for i in rutmp do
6215: LD_ADDR_VAR 0 2
6219: PUSH
6220: LD_VAR 0 7
6224: PUSH
6225: FOR_IN
6226: IFFALSE 6275
// begin AddComMoveXY ( i , 99 , 65 ) ;
6228: LD_VAR 0 2
6232: PPUSH
6233: LD_INT 99
6235: PPUSH
6236: LD_INT 65
6238: PPUSH
6239: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6243: LD_VAR 0 2
6247: PPUSH
6248: LD_INT 76
6250: PPUSH
6251: LD_INT 108
6253: PPUSH
6254: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6258: LD_VAR 0 2
6262: PPUSH
6263: LD_INT 92
6265: PPUSH
6266: LD_INT 176
6268: PPUSH
6269: CALL_OW 171
// end ;
6273: GO 6225
6275: POP
6276: POP
// wait ( 0 0$10 ) ;
6277: LD_INT 350
6279: PPUSH
6280: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6284: LD_ADDR_VAR 0 6
6288: PUSH
6289: LD_EXP 18
6293: PUSH
6294: LD_EXP 19
6298: PUSH
6299: LD_EXP 20
6303: PUSH
6304: LD_EXP 21
6308: PUSH
6309: LD_EXP 22
6313: PUSH
6314: LD_EXP 23
6318: PUSH
6319: LD_EXP 24
6323: PUSH
6324: LD_EXP 25
6328: PUSH
6329: LD_EXP 27
6333: PUSH
6334: LD_EXP 28
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: LD_EXP 29
6355: UNION
6356: ST_TO_ADDR
// tmp := tmp diff 0 ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 6
6366: PUSH
6367: LD_INT 0
6369: DIFF
6370: ST_TO_ADDR
// for i in heikeVehicles do
6371: LD_ADDR_VAR 0 2
6375: PUSH
6376: LD_EXP 30
6380: PUSH
6381: FOR_IN
6382: IFFALSE 6754
// begin if not tmp then
6384: LD_VAR 0 6
6388: NOT
6389: IFFALSE 6393
// continue ;
6391: GO 6381
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6393: LD_INT 2
6395: PPUSH
6396: LD_VAR 0 2
6400: PUSH
6401: LD_INT 5
6403: ARRAY
6404: PPUSH
6405: LD_VAR 0 2
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: PPUSH
6414: LD_VAR 0 2
6418: PUSH
6419: LD_INT 2
6421: ARRAY
6422: PPUSH
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 3
6430: ARRAY
6431: PPUSH
6432: LD_VAR 0 2
6436: PUSH
6437: LD_INT 4
6439: ARRAY
6440: PPUSH
6441: LD_INT 34
6443: PPUSH
6444: CALL 336 0 7
// veh := CreateVehicle ;
6448: LD_ADDR_VAR 0 5
6452: PUSH
6453: CALL_OW 45
6457: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6458: LD_VAR 0 2
6462: PUSH
6463: LD_INT 4
6465: ARRAY
6466: PUSH
6467: LD_INT 51
6469: PUSH
6470: LD_INT 32
6472: PUSH
6473: LD_INT 12
6475: PUSH
6476: LD_INT 89
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: IN
6485: IFFALSE 6565
// begin if i [ 7 ] [ 1 ] then
6487: LD_VAR 0 2
6491: PUSH
6492: LD_INT 7
6494: ARRAY
6495: PUSH
6496: LD_INT 1
6498: ARRAY
6499: IFFALSE 6526
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6501: LD_VAR 0 5
6505: PPUSH
6506: LD_INT 1
6508: PPUSH
6509: LD_VAR 0 2
6513: PUSH
6514: LD_INT 7
6516: ARRAY
6517: PUSH
6518: LD_INT 1
6520: ARRAY
6521: PPUSH
6522: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6526: LD_VAR 0 2
6530: PUSH
6531: LD_INT 7
6533: ARRAY
6534: PUSH
6535: LD_INT 2
6537: ARRAY
6538: IFFALSE 6565
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6540: LD_VAR 0 5
6544: PPUSH
6545: LD_INT 2
6547: PPUSH
6548: LD_VAR 0 2
6552: PUSH
6553: LD_INT 7
6555: ARRAY
6556: PUSH
6557: LD_INT 2
6559: ARRAY
6560: PPUSH
6561: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6577: LD_VAR 0 5
6581: PPUSH
6582: LD_INT 8
6584: PPUSH
6585: LD_INT 0
6587: PPUSH
6588: CALL_OW 49
// for j := 1 to tmp do
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: DOUBLE
6598: LD_INT 1
6600: DEC
6601: ST_TO_ADDR
6602: LD_VAR 0 6
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6681
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6610: LD_VAR 0 2
6614: PUSH
6615: LD_INT 8
6617: ARRAY
6618: PUSH
6619: LD_VAR 0 6
6623: PUSH
6624: LD_VAR 0 3
6628: ARRAY
6629: PPUSH
6630: CALL_OW 257
6634: EQUAL
6635: IFFALSE 6679
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6637: LD_VAR 0 6
6641: PUSH
6642: LD_VAR 0 3
6646: ARRAY
6647: PPUSH
6648: LD_VAR 0 5
6652: PPUSH
6653: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6657: LD_ADDR_VAR 0 6
6661: PUSH
6662: LD_VAR 0 6
6666: PPUSH
6667: LD_VAR 0 3
6671: PPUSH
6672: CALL_OW 3
6676: ST_TO_ADDR
// break ;
6677: GO 6681
// end ; end ;
6679: GO 6607
6681: POP
6682: POP
// if IsEmpty ( veh ) then
6683: LD_VAR 0 5
6687: PPUSH
6688: CALL 33079 0 1
6692: IFFALSE 6730
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6694: LD_VAR 0 6
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PPUSH
6703: LD_VAR 0 5
6707: PPUSH
6708: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6712: LD_ADDR_VAR 0 6
6716: PUSH
6717: LD_VAR 0 6
6721: PPUSH
6722: LD_INT 1
6724: PPUSH
6725: CALL_OW 3
6729: ST_TO_ADDR
// end ; ComAgressiveMove ( veh , 133 , 7 ) ;
6730: LD_VAR 0 5
6734: PPUSH
6735: LD_INT 133
6737: PPUSH
6738: LD_INT 7
6740: PPUSH
6741: CALL_OW 114
// wait ( 0 0$3 ) ;
6745: LD_INT 105
6747: PPUSH
6748: CALL_OW 67
// end ;
6752: GO 6381
6754: POP
6755: POP
// if tmp then
6756: LD_VAR 0 6
6760: IFFALSE 6816
// for i in tmp do
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_VAR 0 6
6771: PUSH
6772: FOR_IN
6773: IFFALSE 6814
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6775: LD_VAR 0 2
6779: PPUSH
6780: LD_INT 10
6782: PPUSH
6783: LD_INT 0
6785: PPUSH
6786: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_INT 146
6797: PPUSH
6798: LD_INT 7
6800: PPUSH
6801: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6805: LD_INT 18
6807: PPUSH
6808: CALL_OW 67
// end ;
6812: GO 6772
6814: POP
6815: POP
// if heikeApes then
6816: LD_EXP 31
6820: IFFALSE 6876
// for i in heikeApes do
6822: LD_ADDR_VAR 0 2
6826: PUSH
6827: LD_EXP 31
6831: PUSH
6832: FOR_IN
6833: IFFALSE 6874
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6835: LD_VAR 0 2
6839: PPUSH
6840: LD_INT 10
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_INT 146
6857: PPUSH
6858: LD_INT 7
6860: PPUSH
6861: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6865: LD_INT 18
6867: PPUSH
6868: CALL_OW 67
// end ;
6872: GO 6832
6874: POP
6875: POP
// DialogueOn ;
6876: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6880: LD_EXP 18
6884: PPUSH
6885: LD_STRING DH-outpost-a-1
6887: PPUSH
6888: CALL_OW 88
// DialogueOff ;
6892: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6896: LD_INT 133
6898: PPUSH
6899: LD_INT 2
6901: PPUSH
6902: LD_INT 2
6904: PPUSH
6905: CALL_OW 331
// InGameOff ;
6909: CALL_OW 9
// music_nat := 0 ;
6913: LD_ADDR_OWVAR 71
6917: PUSH
6918: LD_INT 0
6920: ST_TO_ADDR
// music_class := 0 ;
6921: LD_ADDR_OWVAR 72
6925: PUSH
6926: LD_INT 0
6928: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6929: LD_STRING Outposts
6931: PPUSH
6932: CALL_OW 337
// SaveForQuickRestart ;
6936: CALL_OW 22
// end ;
6940: LD_VAR 0 1
6944: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6945: LD_INT 22
6947: PUSH
6948: LD_INT 2
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 91
6957: PUSH
6958: LD_EXP 21
6962: PUSH
6963: LD_INT 20
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: PUSH
6980: LD_EXP 3
6984: AND
6985: PUSH
6986: LD_EXP 21
6990: PPUSH
6991: CALL_OW 302
6995: AND
6996: IFFALSE 7243
6998: GO 7000
7000: DISABLE
7001: LD_INT 0
7003: PPUSH
7004: PPUSH
7005: PPUSH
7006: PPUSH
// begin IbrahimBetrayal ;
7007: CALL 7246 0 0
// repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7018: LD_EXP 21
7022: PPUSH
7023: CALL_OW 301
7027: PUSH
7028: LD_INT 22
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 91
7040: PUSH
7041: LD_EXP 21
7045: PUSH
7046: LD_INT 6
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PUSH
7063: LD_EXP 21
7067: PPUSH
7068: CALL_OW 302
7072: AND
7073: OR
7074: IFFALSE 7011
// if IsDead ( Ibrahim ) then
7076: LD_EXP 21
7080: PPUSH
7081: CALL_OW 301
7085: IFFALSE 7089
// exit ;
7087: GO 7243
// x := GetX ( Ibrahim ) ;
7089: LD_ADDR_VAR 0 1
7093: PUSH
7094: LD_EXP 21
7098: PPUSH
7099: CALL_OW 250
7103: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7104: LD_ADDR_VAR 0 2
7108: PUSH
7109: LD_EXP 21
7113: PPUSH
7114: CALL_OW 251
7118: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_EXP 21
7128: PPUSH
7129: CALL_OW 254
7133: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_EXP 21
7143: PPUSH
7144: CALL_OW 256
7148: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7149: LD_EXP 21
7153: PPUSH
7154: CALL_OW 64
// uc_side := 2 ;
7158: LD_ADDR_OWVAR 20
7162: PUSH
7163: LD_INT 2
7165: ST_TO_ADDR
// uc_nation := 2 ;
7166: LD_ADDR_OWVAR 21
7170: PUSH
7171: LD_INT 2
7173: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7174: LD_ADDR_EXP 21
7178: PUSH
7179: LD_STRING Ibrahim
7181: PPUSH
7182: LD_INT 0
7184: PPUSH
7185: LD_STRING 
7187: PPUSH
7188: CALL 30955 0 3
7192: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7193: LD_EXP 21
7197: PPUSH
7198: LD_VAR 0 3
7202: PPUSH
7203: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7207: LD_EXP 21
7211: PPUSH
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_VAR 0 2
7221: PPUSH
7222: LD_INT 0
7224: PPUSH
7225: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7229: LD_EXP 21
7233: PPUSH
7234: LD_VAR 0 4
7238: PPUSH
7239: CALL_OW 234
// end ;
7243: PPOPN 4
7245: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7251: LD_INT 122
7253: PPUSH
7254: LD_INT 77
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: LD_INT 6
7262: NEG
7263: PPUSH
7264: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7268: LD_EXP 21
7272: PPUSH
7273: LD_INT 123
7275: PPUSH
7276: LD_INT 79
7278: PPUSH
7279: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7283: LD_EXP 21
7287: PPUSH
7288: LD_INT 125
7290: PPUSH
7291: LD_INT 82
7293: PPUSH
7294: CALL_OW 178
// wait ( 0 0$2 ) ;
7298: LD_INT 70
7300: PPUSH
7301: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7305: LD_EXP 42
7309: PPUSH
7310: LD_EXP 21
7314: PPUSH
7315: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7319: LD_EXP 42
7323: PPUSH
7324: LD_STRING DRum-outpost-b-3
7326: PPUSH
7327: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_INT 125
7338: PPUSH
7339: LD_INT 76
7341: PPUSH
7342: CALL_OW 428
7346: PUSH
7347: LD_INT 125
7349: PPUSH
7350: LD_INT 79
7352: PPUSH
7353: CALL_OW 428
7357: PUSH
7358: LD_INT 125
7360: PPUSH
7361: LD_INT 82
7363: PPUSH
7364: CALL_OW 428
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: ST_TO_ADDR
// for i in tmp do
7374: LD_ADDR_VAR 0 2
7378: PUSH
7379: LD_VAR 0 3
7383: PUSH
7384: FOR_IN
7385: IFFALSE 7401
// SetLives ( i , 200 ) ;
7387: LD_VAR 0 2
7391: PPUSH
7392: LD_INT 200
7394: PPUSH
7395: CALL_OW 234
7399: GO 7384
7401: POP
7402: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7403: LD_EXP 21
7407: PPUSH
7408: LD_STRING DI-outpost-b-4
7410: PPUSH
7411: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7415: LD_EXP 21
7419: PPUSH
7420: LD_INT 5
7422: PPUSH
7423: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7427: LD_EXP 21
7431: PUSH
7432: LD_EXP 42
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PPUSH
7441: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7445: LD_INT 122
7447: PPUSH
7448: LD_INT 77
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: CALL_OW 331
// if Givi then
7458: LD_EXP 19
7462: IFFALSE 7478
// Say ( Givi , DG-1-outpost-b-5 ) else
7464: LD_EXP 19
7468: PPUSH
7469: LD_STRING DG-1-outpost-b-5
7471: PPUSH
7472: CALL_OW 88
7476: GO 7543
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7478: LD_EXP 29
7482: PPUSH
7483: LD_INT 26
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 72
7497: PUSH
7498: LD_INT 1
7500: ARRAY
7501: PPUSH
7502: LD_STRING DArf-outpost-b-a-5
7504: PPUSH
7505: CALL_OW 88
7509: NOT
7510: IFFALSE 7543
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7512: LD_EXP 29
7516: PPUSH
7517: LD_INT 26
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PPUSH
7527: CALL_OW 72
7531: PUSH
7532: LD_INT 1
7534: ARRAY
7535: PPUSH
7536: LD_STRING DArm-outpost-b-a-5
7538: PPUSH
7539: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7550: LD_EXP 21
7554: PPUSH
7555: CALL_OW 301
7559: PUSH
7560: LD_EXP 18
7564: PPUSH
7565: LD_EXP 21
7569: PPUSH
7570: CALL_OW 296
7574: PUSH
7575: LD_INT 6
7577: LESS
7578: PUSH
7579: LD_EXP 21
7583: PPUSH
7584: CALL_OW 302
7588: AND
7589: OR
7590: IFFALSE 7543
// if IsDead ( Ibrahim ) then
7592: LD_EXP 21
7596: PPUSH
7597: CALL_OW 301
7601: IFFALSE 7617
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7603: LD_EXP 18
7607: PPUSH
7608: LD_STRING DH-ibrahimdead-1
7610: PPUSH
7611: CALL_OW 88
// exit ;
7615: GO 7658
// end ; CenterNowOnUnits ( Ibrahim ) ;
7617: LD_EXP 21
7621: PPUSH
7622: CALL_OW 87
// DialogueOn ;
7626: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7630: LD_EXP 21
7634: PPUSH
7635: LD_STRING DI-ibrahimlives-1
7637: PPUSH
7638: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7642: LD_EXP 18
7646: PPUSH
7647: LD_STRING DH-Ibrahimlives-2
7649: PPUSH
7650: CALL_OW 88
// DialogueOff ;
7654: CALL_OW 7
// end ;
7658: LD_VAR 0 1
7662: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7663: LD_INT 11
7665: PPUSH
7666: LD_INT 22
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 70
7680: PUSH
7681: LD_OWVAR 1
7685: PUSH
7686: LD_INT 18900
7688: PUSH
7689: LD_INT 16800
7691: PUSH
7692: LD_INT 16800
7694: PUSH
7695: LD_INT 15750
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: LD_OWVAR 67
7708: ARRAY
7709: GREATEREQUAL
7710: OR
7711: IFFALSE 8219
7713: GO 7715
7715: DISABLE
// begin outerAreaAchived := true ;
7716: LD_ADDR_EXP 15
7720: PUSH
7721: LD_INT 1
7723: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7724: LD_INT 700
7726: PPUSH
7727: CALL_OW 67
// DialogueOn ;
7731: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7735: LD_EXP 26
7739: PPUSH
7740: LD_STRING DShar-radio-1
7742: PPUSH
7743: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7747: LD_EXP 26
7751: PPUSH
7752: LD_STRING DShar-radio-2
7754: PPUSH
7755: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7759: LD_EXP 18
7763: PPUSH
7764: LD_STRING DH-radio-2
7766: PPUSH
7767: CALL_OW 88
// DialogueOff ;
7771: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7775: LD_STRING Gaidar
7777: PPUSH
7778: CALL_OW 337
// if Difficulty < 3 then
7782: LD_OWVAR 67
7786: PUSH
7787: LD_INT 3
7789: LESS
7790: IFFALSE 7856
// begin DialogueOn ;
7792: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7796: LD_INT 11
7798: PPUSH
7799: LD_INT 14
7801: PPUSH
7802: LD_INT 2
7804: PPUSH
7805: LD_INT 6
7807: NEG
7808: PPUSH
7809: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7813: LD_INT 11
7815: PPUSH
7816: LD_INT 14
7818: PPUSH
7819: LD_INT 2
7821: PPUSH
7822: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7826: LD_INT 11
7828: PPUSH
7829: LD_INT 14
7831: PPUSH
7832: CALL_OW 84
// dwait ( 0 0$1 ) ;
7836: LD_INT 35
7838: PPUSH
7839: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7843: LD_EXP 18
7847: PPUSH
7848: CALL_OW 87
// DialogueOff ;
7852: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7856: LD_INT 1050
7858: PUSH
7859: LD_INT 350
7861: PPUSH
7862: LD_INT 525
7864: PPUSH
7865: CALL_OW 12
7869: PUSH
7870: LD_OWVAR 67
7874: MUL
7875: PLUS
7876: PPUSH
7877: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7881: LD_INT 35
7883: PPUSH
7884: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7888: LD_INT 2
7890: PPUSH
7891: LD_INT 1
7893: PPUSH
7894: CALL_OW 428
7898: PUSH
7899: LD_INT 0
7901: EQUAL
7902: IFFALSE 7881
// SetDir ( Gaidar , 2 ) ;
7904: LD_EXP 35
7908: PPUSH
7909: LD_INT 2
7911: PPUSH
7912: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7916: LD_EXP 35
7920: PPUSH
7921: LD_INT 2
7923: PPUSH
7924: LD_INT 1
7926: PPUSH
7927: LD_INT 0
7929: PPUSH
7930: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7934: LD_EXP 35
7938: PPUSH
7939: LD_INT 19
7941: PPUSH
7942: LD_INT 24
7944: PPUSH
7945: CALL_OW 111
// if Difficulty < 3 then
7949: LD_OWVAR 67
7953: PUSH
7954: LD_INT 3
7956: LESS
7957: IFFALSE 7996
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7959: LD_INT 11
7961: PPUSH
7962: LD_INT 14
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 6
7970: NEG
7971: PPUSH
7972: CALL_OW 330
// wait ( 0 0$2 ) ;
7976: LD_INT 70
7978: PPUSH
7979: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7983: LD_INT 11
7985: PPUSH
7986: LD_INT 14
7988: PPUSH
7989: LD_INT 2
7991: PPUSH
7992: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7996: LD_EXP 35
8000: PPUSH
8001: LD_INT 210
8003: PPUSH
8004: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8008: LD_EXP 35
8012: PPUSH
8013: LD_INT 38
8015: PPUSH
8016: LD_INT 47
8018: PPUSH
8019: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8023: LD_EXP 35
8027: PPUSH
8028: LD_INT 32
8030: PPUSH
8031: LD_INT 59
8033: PPUSH
8034: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8038: LD_EXP 35
8042: PPUSH
8043: LD_INT 350
8045: PPUSH
8046: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8050: LD_EXP 35
8054: PPUSH
8055: LD_INT 62
8057: PPUSH
8058: LD_INT 116
8060: PPUSH
8061: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8065: LD_EXP 35
8069: PPUSH
8070: LD_INT 92
8072: PPUSH
8073: LD_INT 177
8075: PPUSH
8076: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8080: LD_INT 35
8082: PPUSH
8083: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8087: LD_EXP 35
8091: PPUSH
8092: CALL_OW 301
8096: PUSH
8097: LD_EXP 35
8101: PPUSH
8102: LD_INT 92
8104: PPUSH
8105: LD_INT 177
8107: PPUSH
8108: CALL_OW 307
8112: OR
8113: IFFALSE 8080
// if IsAt ( Gaidar , 92 , 177 ) then
8115: LD_EXP 35
8119: PPUSH
8120: LD_INT 92
8122: PPUSH
8123: LD_INT 177
8125: PPUSH
8126: CALL_OW 307
8130: IFFALSE 8197
// begin DialogueOn ;
8132: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8136: LD_INT 92
8138: PPUSH
8139: LD_INT 177
8141: PPUSH
8142: LD_INT 2
8144: PPUSH
8145: LD_INT 3
8147: NEG
8148: PPUSH
8149: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8153: LD_EXP 35
8157: PPUSH
8158: CALL_OW 87
// dwait ( 0 0$2 ) ;
8162: LD_INT 70
8164: PPUSH
8165: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8169: LD_INT 92
8171: PPUSH
8172: LD_INT 177
8174: PPUSH
8175: LD_INT 2
8177: PPUSH
8178: CALL_OW 331
// DialogueOff ;
8182: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8186: LD_EXP 35
8190: PPUSH
8191: CALL_OW 64
// exit ;
8195: GO 8219
// end ; gaidarKilled := true ;
8197: LD_ADDR_EXP 14
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8205: LD_STRING GaidarKilled
8207: PPUSH
8208: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8212: LD_STRING ACH_COMMISAR
8214: PPUSH
8215: CALL_OW 543
// end ;
8219: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8220: LD_INT 2
8222: PPUSH
8223: LD_EXP 35
8227: PPUSH
8228: CALL_OW 292
8232: IFFALSE 8249
8234: GO 8236
8236: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8237: LD_EXP 35
8241: PPUSH
8242: LD_STRING DT-objective-1
8244: PPUSH
8245: CALL_OW 88
8249: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8250: LD_INT 22
8252: PUSH
8253: LD_INT 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 2
8262: PUSH
8263: LD_INT 95
8265: PUSH
8266: LD_INT 5
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 95
8275: PUSH
8276: LD_INT 6
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 95
8285: PUSH
8286: LD_INT 7
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 69
8307: IFFALSE 8344
8309: GO 8311
8311: DISABLE
// begin DialogueOn ;
8312: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8316: LD_EXP 18
8320: PPUSH
8321: LD_STRING DH-outpost-last-1
8323: PPUSH
8324: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8328: LD_EXP 34
8332: PPUSH
8333: LD_STRING DB-outpost-last-2
8335: PPUSH
8336: CALL_OW 94
// DialogueOff ;
8340: CALL_OW 7
// end ;
8344: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8345: LD_INT 200
8347: PPUSH
8348: CALL_OW 256
8352: PUSH
8353: LD_INT 999
8355: LESS
8356: PUSH
8357: LD_INT 200
8359: PPUSH
8360: CALL_OW 255
8364: PUSH
8365: LD_INT 2
8367: EQUAL
8368: OR
8369: IFFALSE 8542
8371: GO 8373
8373: DISABLE
8374: LD_INT 0
8376: PPUSH
8377: PPUSH
// begin if not earlyEscape then
8378: LD_EXP 16
8382: NOT
8383: IFFALSE 8409
// begin SayRadio ( Burlak , DB-end-1 ) ;
8385: LD_EXP 34
8389: PPUSH
8390: LD_STRING DB-end-1
8392: PPUSH
8393: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8397: LD_EXP 18
8401: PPUSH
8402: LD_STRING DH-end-2
8404: PPUSH
8405: CALL_OW 88
// end ; if tick <= 15 15$00 then
8409: LD_OWVAR 1
8413: PUSH
8414: LD_INT 31500
8416: LESSEQUAL
8417: IFFALSE 8426
// SetAchievement ( ACH_FIST ) ;
8419: LD_STRING ACH_FIST
8421: PPUSH
8422: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8426: LD_ADDR_VAR 0 2
8430: PUSH
8431: LD_INT 22
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: LD_INT 21
8446: PUSH
8447: LD_INT 3
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 69
8466: ST_TO_ADDR
// if not tmp then
8467: LD_VAR 0 2
8471: NOT
8472: IFFALSE 8476
// exit ;
8474: GO 8542
// for i in tmp do
8476: LD_ADDR_VAR 0 1
8480: PUSH
8481: LD_VAR 0 2
8485: PUSH
8486: FOR_IN
8487: IFFALSE 8540
// begin SetTag ( i , tEscape ) ;
8489: LD_VAR 0 1
8493: PPUSH
8494: LD_EXP 17
8498: PPUSH
8499: CALL_OW 109
// if IsInUnit ( i ) then
8503: LD_VAR 0 1
8507: PPUSH
8508: CALL_OW 310
8512: IFFALSE 8523
// ComExitBuilding ( i ) ;
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_INT 92
8530: PPUSH
8531: LD_INT 177
8533: PPUSH
8534: CALL_OW 171
// end ;
8538: GO 8486
8540: POP
8541: POP
// end ;
8542: PPOPN 2
8544: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8545: LD_INT 4
8547: PPUSH
8548: LD_INT 22
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 70
8562: PUSH
8563: LD_EXP 15
8567: NOT
8568: AND
8569: PUSH
8570: LD_EXP 27
8574: PPUSH
8575: CALL_OW 302
8579: AND
8580: IFFALSE 8820
8582: GO 8584
8584: DISABLE
// begin DialogueOn ;
8585: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8589: LD_INT 111
8591: PPUSH
8592: LD_INT 54
8594: PPUSH
8595: LD_INT 2
8597: PPUSH
8598: LD_INT 16
8600: NEG
8601: PPUSH
8602: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8606: LD_INT 111
8608: PPUSH
8609: LD_INT 53
8611: PPUSH
8612: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8616: LD_INT 10
8618: PPUSH
8619: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8623: LD_EXP 27
8627: PPUSH
8628: LD_STRING DKs-Hannibal-1
8630: PPUSH
8631: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8635: LD_EXP 27
8639: PPUSH
8640: LD_STRING DKs-Hannibal-2
8642: PPUSH
8643: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8647: LD_EXP 27
8651: PPUSH
8652: LD_STRING DKs-Hannibal-3
8654: PPUSH
8655: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8659: LD_EXP 27
8663: PPUSH
8664: LD_STRING DKs-Hannibal-4
8666: PPUSH
8667: CALL_OW 88
// dwait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8678: LD_INT 111
8680: PPUSH
8681: LD_INT 54
8683: PPUSH
8684: LD_INT 2
8686: PPUSH
8687: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8691: LD_INT 173
8693: PPUSH
8694: LD_INT 76
8696: PPUSH
8697: LD_INT 2
8699: PPUSH
8700: LD_INT 12
8702: NEG
8703: PPUSH
8704: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8708: LD_INT 173
8710: PPUSH
8711: LD_INT 76
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8721: LD_INT 173
8723: PPUSH
8724: LD_INT 76
8726: PPUSH
8727: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8731: LD_EXP 27
8735: PPUSH
8736: LD_STRING DKs-Hannibal-5
8738: PPUSH
8739: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8743: LD_EXP 22
8747: PUSH
8748: LD_INT 22
8750: PUSH
8751: LD_INT 2
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 34
8760: PUSH
8761: LD_INT 26
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 69
8776: NOT
8777: AND
8778: IFFALSE 8816
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8780: LD_EXP 22
8784: PPUSH
8785: LD_STRING DKam-Hannibal-a-6
8787: PPUSH
8788: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8792: LD_EXP 22
8796: PPUSH
8797: LD_STRING DKam-Hannibal-a-7
8799: PPUSH
8800: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8804: LD_EXP 19
8808: PPUSH
8809: LD_STRING DG-Hannibal-a-8
8811: PPUSH
8812: CALL_OW 88
// end ; DialogueOff ;
8816: CALL_OW 7
// end ;
8820: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8821: LD_INT 225
8823: PPUSH
8824: CALL_OW 302
8828: PUSH
8829: LD_INT 200
8831: PPUSH
8832: CALL_OW 302
8836: AND
8837: PUSH
8838: LD_INT 12
8840: PPUSH
8841: LD_INT 21
8843: PUSH
8844: LD_INT 3
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 70
8855: PUSH
8856: LD_INT 2
8858: GREATER
8859: AND
8860: PUSH
8861: LD_INT 13
8863: PPUSH
8864: LD_INT 22
8866: PUSH
8867: LD_INT 2
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PPUSH
8874: CALL_OW 70
8878: PUSH
8879: LD_INT 3
8881: GREATER
8882: AND
8883: IFFALSE 8896
8885: GO 8887
8887: DISABLE
// hannibalPath := true ;
8888: LD_ADDR_EXP 9
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
8896: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8897: LD_EXP 9
8901: PUSH
8902: LD_INT 6
8904: PPUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PPUSH
8915: CALL_OW 70
8919: AND
8920: IFFALSE 9265
8922: GO 8924
8924: DISABLE
8925: LD_INT 0
8927: PPUSH
8928: PPUSH
8929: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8930: LD_ADDR_VAR 0 2
8934: PUSH
8935: LD_INT 6
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PPUSH
8948: CALL_OW 70
8952: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8953: LD_ADDR_VAR 0 3
8957: PUSH
8958: LD_VAR 0 2
8962: PPUSH
8963: LD_INT 34
8965: PUSH
8966: LD_INT 26
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 72
8977: PUSH
8978: LD_INT 0
8980: GREATER
8981: ST_TO_ADDR
// DialogueOn ;
8982: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8986: LD_EXP 18
8990: PPUSH
8991: LD_STRING DH-Cleverattack-1
8993: PPUSH
8994: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8998: LD_EXP 18
9002: PPUSH
9003: LD_STRING DH-Cleverattack-2
9005: PPUSH
9006: CALL_OW 88
// if hasFlameThrower then
9010: LD_VAR 0 3
9014: IFFALSE 9042
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9016: LD_EXP 34
9020: PPUSH
9021: LD_STRING DB-Cleverattack-3
9023: PPUSH
9024: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9028: LD_EXP 18
9032: PPUSH
9033: LD_STRING DH-Cleverattack-4
9035: PPUSH
9036: CALL_OW 88
// end else
9040: GO 9066
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9042: LD_EXP 34
9046: PPUSH
9047: LD_STRING DB-Cleverattack-a-3
9049: PPUSH
9050: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9054: LD_EXP 18
9058: PPUSH
9059: LD_STRING DH-Cleverattack-a-4
9061: PPUSH
9062: CALL_OW 88
// end ; DialogueOff ;
9066: CALL_OW 7
// if not hasFlameThrower then
9070: LD_VAR 0 3
9074: NOT
9075: IFFALSE 9079
// exit ;
9077: GO 9265
// earlyEscape := true ;
9079: LD_ADDR_EXP 16
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9087: LD_INT 140
9089: PPUSH
9090: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9094: LD_ADDR_VAR 0 2
9098: PUSH
9099: LD_INT 22
9101: PUSH
9102: LD_INT 3
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 2
9111: PUSH
9112: LD_INT 25
9114: PUSH
9115: LD_INT 1
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 25
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 25
9134: PUSH
9135: LD_INT 4
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 69
9156: PUSH
9157: LD_EXP 21
9161: PUSH
9162: LD_EXP 36
9166: PUSH
9167: LD_EXP 35
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: DIFF
9177: ST_TO_ADDR
// for i in tmp do
9178: LD_ADDR_VAR 0 1
9182: PUSH
9183: LD_VAR 0 2
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9263
// begin if Prob ( 40 + 10 * Difficulty ) then
9191: LD_INT 40
9193: PUSH
9194: LD_INT 10
9196: PUSH
9197: LD_OWVAR 67
9201: MUL
9202: PLUS
9203: PPUSH
9204: CALL_OW 13
9208: IFFALSE 9212
// continue ;
9210: GO 9188
// SetTag ( i , tEscape ) ;
9212: LD_VAR 0 1
9216: PPUSH
9217: LD_EXP 17
9221: PPUSH
9222: CALL_OW 109
// if IsInUnit ( i ) then
9226: LD_VAR 0 1
9230: PPUSH
9231: CALL_OW 310
9235: IFFALSE 9246
// ComExitBuilding ( i ) ;
9237: LD_VAR 0 1
9241: PPUSH
9242: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9246: LD_VAR 0 1
9250: PPUSH
9251: LD_INT 92
9253: PPUSH
9254: LD_INT 177
9256: PPUSH
9257: CALL_OW 171
// end ;
9261: GO 9188
9263: POP
9264: POP
// end ;
9265: PPOPN 3
9267: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9268: LD_INT 9
9270: PPUSH
9271: LD_INT 2
9273: PUSH
9274: LD_INT 22
9276: PUSH
9277: LD_INT 3
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 22
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 70
9303: IFFALSE 9401
9305: GO 9307
9307: DISABLE
9308: LD_INT 0
9310: PPUSH
// begin enable ;
9311: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9312: LD_ADDR_VAR 0 1
9316: PUSH
9317: LD_INT 9
9319: PPUSH
9320: LD_INT 2
9322: PUSH
9323: LD_INT 22
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 22
9335: PUSH
9336: LD_INT 6
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 70
9352: PUSH
9353: FOR_IN
9354: IFFALSE 9399
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 110
9365: PUSH
9366: LD_EXP 17
9370: EQUAL
9371: PUSH
9372: LD_VAR 0 1
9376: PPUSH
9377: CALL_OW 255
9381: PUSH
9382: LD_INT 6
9384: EQUAL
9385: OR
9386: IFFALSE 9397
// RemoveUnit ( i ) ;
9388: LD_VAR 0 1
9392: PPUSH
9393: CALL_OW 64
9397: GO 9353
9399: POP
9400: POP
// end ;
9401: PPOPN 1
9403: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9404: LD_EXP 23
9408: PUSH
9409: LD_EXP 23
9413: PPUSH
9414: CALL_OW 256
9418: PUSH
9419: LD_INT 3
9421: LESS
9422: AND
9423: IFFALSE 9469
9425: GO 9427
9427: DISABLE
// begin DialogueOn ;
9428: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9432: LD_EXP 23
9436: PPUSH
9437: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9441: LD_EXP 23
9445: PPUSH
9446: LD_STRING DK-Kkilled-1
9448: PPUSH
9449: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9453: LD_EXP 18
9457: PPUSH
9458: LD_STRING DH-Kkilled-2
9460: PPUSH
9461: CALL_OW 88
// DialogueOff ;
9465: CALL_OW 7
// end ;
9469: END
// every 0 0$1 trigger kaiaKilledByRussian do
9470: LD_EXP 8
9474: IFFALSE 9491
9476: GO 9478
9478: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_STRING DH-Kkilled-3
9486: PPUSH
9487: CALL_OW 88
9491: END
// every 0 0$1 trigger tick >= 24 24$00 do
9492: LD_OWVAR 1
9496: PUSH
9497: LD_INT 50400
9499: GREATEREQUAL
9500: IFFALSE 9537
9502: GO 9504
9504: DISABLE
// begin DialogueOn ;
9505: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9509: LD_EXP 26
9513: PPUSH
9514: LD_STRING DShar-slow-1
9516: PPUSH
9517: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9521: LD_EXP 26
9525: PPUSH
9526: LD_STRING DShar-slow-2
9528: PPUSH
9529: CALL_OW 94
// DialogueOff ;
9533: CALL_OW 7
// end ;
9537: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9538: LD_OWVAR 1
9542: PUSH
9543: LD_INT 84000
9545: PUSH
9546: LD_INT 75600
9548: PUSH
9549: LD_INT 67200
9551: PUSH
9552: LD_INT 63000
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: PUSH
9561: LD_OWVAR 67
9565: ARRAY
9566: GREATEREQUAL
9567: IFFALSE 9611
9569: GO 9571
9571: DISABLE
// begin DialogueOn ;
9572: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9576: LD_EXP 26
9580: PPUSH
9581: LD_STRING DShar-fail-1
9583: PPUSH
9584: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9588: LD_EXP 26
9592: PPUSH
9593: LD_STRING DShar-fail-2
9595: PPUSH
9596: CALL_OW 94
// DialogueOff ;
9600: CALL_OW 7
// YouLost ( Time ) ;
9604: LD_STRING Time
9606: PPUSH
9607: CALL_OW 104
// end ;
9611: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9612: LD_INT 22
9614: PUSH
9615: LD_INT 3
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 2
9624: PUSH
9625: LD_INT 30
9627: PUSH
9628: LD_INT 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 30
9637: PUSH
9638: LD_INT 0
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PPUSH
9654: CALL_OW 69
9658: PUSH
9659: LD_INT 0
9661: EQUAL
9662: IFFALSE 10259
9664: GO 9666
9666: DISABLE
9667: LD_INT 0
9669: PPUSH
// begin if ( tick + gameTime ) <= 55 55$00 then
9670: LD_OWVAR 1
9674: PUSH
9675: LD_EXP 5
9679: PLUS
9680: PUSH
9681: LD_INT 115500
9683: LESSEQUAL
9684: IFFALSE 9693
// SetAchievement ( ACH_HSPEED_4 ) ;
9686: LD_STRING ACH_HSPEED_4
9688: PPUSH
9689: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9693: LD_OWVAR 1
9697: PUSH
9698: LD_EXP 5
9702: PLUS
9703: PUSH
9704: LD_INT 178500
9706: PUSH
9707: LD_INT 157500
9709: PUSH
9710: LD_INT 136500
9712: PUSH
9713: LD_INT 126000
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: LD_OWVAR 67
9726: ARRAY
9727: LESSEQUAL
9728: IFFALSE 9742
// AddMedal ( med1 , 1 ) else
9730: LD_STRING med1
9732: PPUSH
9733: LD_INT 1
9735: PPUSH
9736: CALL_OW 101
9740: GO 9753
// AddMedal ( med1 , - 1 ) ;
9742: LD_STRING med1
9744: PPUSH
9745: LD_INT 1
9747: NEG
9748: PPUSH
9749: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9753: LD_EXP 7
9757: PUSH
9758: LD_INT 3
9760: GREATEREQUAL
9761: PUSH
9762: LD_EXP 11
9766: MUL
9767: PUSH
9768: LD_EXP 9
9772: MUL
9773: PUSH
9774: LD_EXP 6
9778: PUSH
9779: LD_INT 6
9781: PUSH
9782: LD_INT 5
9784: PUSH
9785: LD_INT 4
9787: PUSH
9788: LD_INT 3
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: LD_OWVAR 67
9801: ARRAY
9802: LESS
9803: MUL
9804: IFFALSE 9818
// AddMedal ( med2 , 1 ) else
9806: LD_STRING med2
9808: PPUSH
9809: LD_INT 1
9811: PPUSH
9812: CALL_OW 101
9816: GO 9892
// if flamethrowers < 3 then
9818: LD_EXP 7
9822: PUSH
9823: LD_INT 3
9825: LESS
9826: IFFALSE 9841
// AddMedal ( med2 , - 1 ) else
9828: LD_STRING med2
9830: PPUSH
9831: LD_INT 1
9833: NEG
9834: PPUSH
9835: CALL_OW 101
9839: GO 9892
// if not baseHill then
9841: LD_EXP 11
9845: NOT
9846: IFFALSE 9861
// AddMedal ( med2 , - 2 ) else
9848: LD_STRING med2
9850: PPUSH
9851: LD_INT 2
9853: NEG
9854: PPUSH
9855: CALL_OW 101
9859: GO 9892
// if not hannibalPath then
9861: LD_EXP 9
9865: NOT
9866: IFFALSE 9881
// AddMedal ( med2 , - 3 ) else
9868: LD_STRING med2
9870: PPUSH
9871: LD_INT 3
9873: NEG
9874: PPUSH
9875: CALL_OW 101
9879: GO 9892
// AddMedal ( med3 , - 2 ) ;
9881: LD_STRING med3
9883: PPUSH
9884: LD_INT 2
9886: NEG
9887: PPUSH
9888: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9892: LD_EXP 14
9896: PPUSH
9897: LD_STRING 04_2_GaidarKilled
9899: PPUSH
9900: CALL_OW 39
// if gaidarKilled then
9904: LD_EXP 14
9908: IFFALSE 9922
// AddMedal ( med3 , 1 ) else
9910: LD_STRING med3
9912: PPUSH
9913: LD_INT 1
9915: PPUSH
9916: CALL_OW 101
9920: GO 9933
// AddMedal ( med3 , - 1 ) ;
9922: LD_STRING med3
9924: PPUSH
9925: LD_INT 1
9927: NEG
9928: PPUSH
9929: CALL_OW 101
// GiveMedals ( MAIN ) ;
9933: LD_STRING MAIN
9935: PPUSH
9936: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9940: LD_INT 22
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 3
9952: PUSH
9953: LD_INT 23
9955: PUSH
9956: LD_INT 0
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: PPUSH
9976: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9980: LD_EXP 18
9984: PPUSH
9985: LD_STRING 04_2_Heike
9987: PPUSH
9988: CALL_OW 38
// if Aviradze then
9992: LD_EXP 28
9996: IFFALSE 10010
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9998: LD_EXP 28
10002: PPUSH
10003: LD_STRING 04_2_Aviradze
10005: PPUSH
10006: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10010: LD_EXP 21
10014: PUSH
10015: LD_EXP 21
10019: PPUSH
10020: CALL_OW 255
10024: PUSH
10025: LD_INT 2
10027: EQUAL
10028: AND
10029: IFFALSE 10059
// begin if ibrahimOnRuSide then
10031: LD_EXP 3
10035: IFFALSE 10047
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10037: LD_INT 1
10039: PPUSH
10040: LD_STRING 04_2_IbrahimJoined
10042: PPUSH
10043: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10047: LD_EXP 21
10051: PPUSH
10052: LD_STRING 04_2_Ibrahim
10054: PPUSH
10055: CALL_OW 38
// end ; if Kamil then
10059: LD_EXP 22
10063: IFFALSE 10077
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10065: LD_EXP 22
10069: PPUSH
10070: LD_STRING 04_2_Kamil
10072: PPUSH
10073: CALL_OW 38
// if Sophia then
10077: LD_EXP 24
10081: IFFALSE 10095
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10083: LD_EXP 24
10087: PPUSH
10088: LD_STRING 04_2_Sophia
10090: PPUSH
10091: CALL_OW 38
// if Kaia then
10095: LD_EXP 23
10099: IFFALSE 10113
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10101: LD_EXP 23
10105: PPUSH
10106: LD_STRING 04_2_Kaia
10108: PPUSH
10109: CALL_OW 38
// if Givi then
10113: LD_EXP 19
10117: IFFALSE 10131
// SaveCharacters ( Givi , 04_2_Givi ) ;
10119: LD_EXP 19
10123: PPUSH
10124: LD_STRING 04_2_Givi
10126: PPUSH
10127: CALL_OW 38
// if Mike then
10131: LD_EXP 20
10135: IFFALSE 10149
// SaveCharacters ( Mike , 04_2_Mike ) ;
10137: LD_EXP 20
10141: PPUSH
10142: LD_STRING 04_2_Mike
10144: PPUSH
10145: CALL_OW 38
// if Markov then
10149: LD_EXP 25
10153: IFFALSE 10167
// SaveCharacters ( Markov , 04_2_Markov ) ;
10155: LD_EXP 25
10159: PPUSH
10160: LD_STRING 04_2_Markov
10162: PPUSH
10163: CALL_OW 38
// if Kurt then
10167: LD_EXP 27
10171: IFFALSE 10185
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10173: LD_EXP 27
10177: PPUSH
10178: LD_STRING 04_2_Kurt
10180: PPUSH
10181: CALL_OW 38
// if heikeSecondSquad then
10185: LD_EXP 29
10189: IFFALSE 10203
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10191: LD_EXP 29
10195: PPUSH
10196: LD_STRING 04_2_others
10198: PPUSH
10199: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10203: LD_ADDR_VAR 0 1
10207: PUSH
10208: LD_INT 22
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 23
10220: PUSH
10221: LD_INT 0
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: ST_TO_ADDR
// if tmp then
10237: LD_VAR 0 1
10241: IFFALSE 10255
// SaveCharacters ( tmp , 04_2_apes ) ;
10243: LD_VAR 0 1
10247: PPUSH
10248: LD_STRING 04_2_apes
10250: PPUSH
10251: CALL_OW 38
// YouWin ;
10255: CALL_OW 103
// end ; end_of_file
10259: PPOPN 1
10261: END
// export globalGameSaveCounter ; every 0 0$1 do
10262: GO 10264
10264: DISABLE
// begin enable ;
10265: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10266: LD_STRING updateTimer(
10268: PUSH
10269: LD_OWVAR 1
10273: STR
10274: PUSH
10275: LD_STRING );
10277: STR
10278: PPUSH
10279: CALL_OW 559
// end ;
10283: END
// every 0 0$1 do
10284: GO 10286
10286: DISABLE
// begin globalGameSaveCounter := 0 ;
10287: LD_ADDR_EXP 43
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10295: LD_STRING setGameSaveCounter(0)
10297: PPUSH
10298: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10302: LD_STRING initStreamRollete();
10304: PPUSH
10305: CALL_OW 559
// InitStreamMode ;
10309: CALL 11635 0 0
// DefineStreamItems ( false ) ;
10313: LD_INT 0
10315: PPUSH
10316: CALL 12099 0 1
// end ;
10320: END
// export function SOS_MapStart ( ) ; begin
10321: LD_INT 0
10323: PPUSH
// if streamModeActive then
10324: LD_EXP 44
10328: IFFALSE 10337
// DefineStreamItems ( true ) ;
10330: LD_INT 1
10332: PPUSH
10333: CALL 12099 0 1
// UpdateLuaVariables ( ) ;
10337: CALL 10354 0 0
// UpdateFactoryWaypoints ( ) ;
10341: CALL 24968 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10345: CALL 25225 0 0
// end ;
10349: LD_VAR 0 1
10353: RET
// function UpdateLuaVariables ( ) ; begin
10354: LD_INT 0
10356: PPUSH
// if globalGameSaveCounter then
10357: LD_EXP 43
10361: IFFALSE 10395
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10363: LD_ADDR_EXP 43
10367: PUSH
10368: LD_EXP 43
10372: PPUSH
10373: CALL 70018 0 1
10377: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10378: LD_STRING setGameSaveCounter(
10380: PUSH
10381: LD_EXP 43
10385: STR
10386: PUSH
10387: LD_STRING )
10389: STR
10390: PPUSH
10391: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10395: LD_STRING setGameDifficulty(
10397: PUSH
10398: LD_OWVAR 67
10402: STR
10403: PUSH
10404: LD_STRING )
10406: STR
10407: PPUSH
10408: CALL_OW 559
// end ;
10412: LD_VAR 0 1
10416: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10417: LD_INT 0
10419: PPUSH
// if p2 = stream_mode then
10420: LD_VAR 0 2
10424: PUSH
10425: LD_INT 100
10427: EQUAL
10428: IFFALSE 11431
// begin if not StreamModeActive then
10430: LD_EXP 44
10434: NOT
10435: IFFALSE 10445
// StreamModeActive := true ;
10437: LD_ADDR_EXP 44
10441: PUSH
10442: LD_INT 1
10444: ST_TO_ADDR
// if p3 = 0 then
10445: LD_VAR 0 3
10449: PUSH
10450: LD_INT 0
10452: EQUAL
10453: IFFALSE 10459
// InitStreamMode ;
10455: CALL 11635 0 0
// if p3 = 1 then
10459: LD_VAR 0 3
10463: PUSH
10464: LD_INT 1
10466: EQUAL
10467: IFFALSE 10477
// sRocket := true ;
10469: LD_ADDR_EXP 49
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// if p3 = 2 then
10477: LD_VAR 0 3
10481: PUSH
10482: LD_INT 2
10484: EQUAL
10485: IFFALSE 10495
// sSpeed := true ;
10487: LD_ADDR_EXP 48
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// if p3 = 3 then
10495: LD_VAR 0 3
10499: PUSH
10500: LD_INT 3
10502: EQUAL
10503: IFFALSE 10513
// sEngine := true ;
10505: LD_ADDR_EXP 50
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if p3 = 4 then
10513: LD_VAR 0 3
10517: PUSH
10518: LD_INT 4
10520: EQUAL
10521: IFFALSE 10531
// sSpec := true ;
10523: LD_ADDR_EXP 47
10527: PUSH
10528: LD_INT 1
10530: ST_TO_ADDR
// if p3 = 5 then
10531: LD_VAR 0 3
10535: PUSH
10536: LD_INT 5
10538: EQUAL
10539: IFFALSE 10549
// sLevel := true ;
10541: LD_ADDR_EXP 51
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// if p3 = 6 then
10549: LD_VAR 0 3
10553: PUSH
10554: LD_INT 6
10556: EQUAL
10557: IFFALSE 10567
// sArmoury := true ;
10559: LD_ADDR_EXP 52
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// if p3 = 7 then
10567: LD_VAR 0 3
10571: PUSH
10572: LD_INT 7
10574: EQUAL
10575: IFFALSE 10585
// sRadar := true ;
10577: LD_ADDR_EXP 53
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
// if p3 = 8 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 8
10592: EQUAL
10593: IFFALSE 10603
// sBunker := true ;
10595: LD_ADDR_EXP 54
10599: PUSH
10600: LD_INT 1
10602: ST_TO_ADDR
// if p3 = 9 then
10603: LD_VAR 0 3
10607: PUSH
10608: LD_INT 9
10610: EQUAL
10611: IFFALSE 10621
// sHack := true ;
10613: LD_ADDR_EXP 55
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// if p3 = 10 then
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 10
10628: EQUAL
10629: IFFALSE 10639
// sFire := true ;
10631: LD_ADDR_EXP 56
10635: PUSH
10636: LD_INT 1
10638: ST_TO_ADDR
// if p3 = 11 then
10639: LD_VAR 0 3
10643: PUSH
10644: LD_INT 11
10646: EQUAL
10647: IFFALSE 10657
// sRefresh := true ;
10649: LD_ADDR_EXP 57
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// if p3 = 12 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 12
10664: EQUAL
10665: IFFALSE 10675
// sExp := true ;
10667: LD_ADDR_EXP 58
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 13 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 13
10682: EQUAL
10683: IFFALSE 10693
// sDepot := true ;
10685: LD_ADDR_EXP 59
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// if p3 = 14 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 14
10700: EQUAL
10701: IFFALSE 10711
// sFlag := true ;
10703: LD_ADDR_EXP 60
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// if p3 = 15 then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 15
10718: EQUAL
10719: IFFALSE 10729
// sKamikadze := true ;
10721: LD_ADDR_EXP 68
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// if p3 = 16 then
10729: LD_VAR 0 3
10733: PUSH
10734: LD_INT 16
10736: EQUAL
10737: IFFALSE 10747
// sTroll := true ;
10739: LD_ADDR_EXP 69
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// if p3 = 17 then
10747: LD_VAR 0 3
10751: PUSH
10752: LD_INT 17
10754: EQUAL
10755: IFFALSE 10765
// sSlow := true ;
10757: LD_ADDR_EXP 70
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// if p3 = 18 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 18
10772: EQUAL
10773: IFFALSE 10783
// sLack := true ;
10775: LD_ADDR_EXP 71
10779: PUSH
10780: LD_INT 1
10782: ST_TO_ADDR
// if p3 = 19 then
10783: LD_VAR 0 3
10787: PUSH
10788: LD_INT 19
10790: EQUAL
10791: IFFALSE 10801
// sTank := true ;
10793: LD_ADDR_EXP 73
10797: PUSH
10798: LD_INT 1
10800: ST_TO_ADDR
// if p3 = 20 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 20
10808: EQUAL
10809: IFFALSE 10819
// sRemote := true ;
10811: LD_ADDR_EXP 74
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// if p3 = 21 then
10819: LD_VAR 0 3
10823: PUSH
10824: LD_INT 21
10826: EQUAL
10827: IFFALSE 10837
// sPowell := true ;
10829: LD_ADDR_EXP 75
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if p3 = 22 then
10837: LD_VAR 0 3
10841: PUSH
10842: LD_INT 22
10844: EQUAL
10845: IFFALSE 10855
// sTeleport := true ;
10847: LD_ADDR_EXP 78
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if p3 = 23 then
10855: LD_VAR 0 3
10859: PUSH
10860: LD_INT 23
10862: EQUAL
10863: IFFALSE 10873
// sOilTower := true ;
10865: LD_ADDR_EXP 80
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if p3 = 24 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 24
10880: EQUAL
10881: IFFALSE 10891
// sShovel := true ;
10883: LD_ADDR_EXP 81
10887: PUSH
10888: LD_INT 1
10890: ST_TO_ADDR
// if p3 = 25 then
10891: LD_VAR 0 3
10895: PUSH
10896: LD_INT 25
10898: EQUAL
10899: IFFALSE 10909
// sSheik := true ;
10901: LD_ADDR_EXP 82
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// if p3 = 26 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 26
10916: EQUAL
10917: IFFALSE 10927
// sEarthquake := true ;
10919: LD_ADDR_EXP 84
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// if p3 = 27 then
10927: LD_VAR 0 3
10931: PUSH
10932: LD_INT 27
10934: EQUAL
10935: IFFALSE 10945
// sAI := true ;
10937: LD_ADDR_EXP 85
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// if p3 = 28 then
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 28
10952: EQUAL
10953: IFFALSE 10963
// sCargo := true ;
10955: LD_ADDR_EXP 88
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// if p3 = 29 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 29
10970: EQUAL
10971: IFFALSE 10981
// sDLaser := true ;
10973: LD_ADDR_EXP 89
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// if p3 = 30 then
10981: LD_VAR 0 3
10985: PUSH
10986: LD_INT 30
10988: EQUAL
10989: IFFALSE 10999
// sExchange := true ;
10991: LD_ADDR_EXP 90
10995: PUSH
10996: LD_INT 1
10998: ST_TO_ADDR
// if p3 = 31 then
10999: LD_VAR 0 3
11003: PUSH
11004: LD_INT 31
11006: EQUAL
11007: IFFALSE 11017
// sFac := true ;
11009: LD_ADDR_EXP 91
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// if p3 = 32 then
11017: LD_VAR 0 3
11021: PUSH
11022: LD_INT 32
11024: EQUAL
11025: IFFALSE 11035
// sPower := true ;
11027: LD_ADDR_EXP 92
11031: PUSH
11032: LD_INT 1
11034: ST_TO_ADDR
// if p3 = 33 then
11035: LD_VAR 0 3
11039: PUSH
11040: LD_INT 33
11042: EQUAL
11043: IFFALSE 11053
// sRandom := true ;
11045: LD_ADDR_EXP 93
11049: PUSH
11050: LD_INT 1
11052: ST_TO_ADDR
// if p3 = 34 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 34
11060: EQUAL
11061: IFFALSE 11071
// sShield := true ;
11063: LD_ADDR_EXP 94
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// if p3 = 35 then
11071: LD_VAR 0 3
11075: PUSH
11076: LD_INT 35
11078: EQUAL
11079: IFFALSE 11089
// sTime := true ;
11081: LD_ADDR_EXP 95
11085: PUSH
11086: LD_INT 1
11088: ST_TO_ADDR
// if p3 = 36 then
11089: LD_VAR 0 3
11093: PUSH
11094: LD_INT 36
11096: EQUAL
11097: IFFALSE 11107
// sTools := true ;
11099: LD_ADDR_EXP 96
11103: PUSH
11104: LD_INT 1
11106: ST_TO_ADDR
// if p3 = 101 then
11107: LD_VAR 0 3
11111: PUSH
11112: LD_INT 101
11114: EQUAL
11115: IFFALSE 11125
// sSold := true ;
11117: LD_ADDR_EXP 61
11121: PUSH
11122: LD_INT 1
11124: ST_TO_ADDR
// if p3 = 102 then
11125: LD_VAR 0 3
11129: PUSH
11130: LD_INT 102
11132: EQUAL
11133: IFFALSE 11143
// sDiff := true ;
11135: LD_ADDR_EXP 62
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// if p3 = 103 then
11143: LD_VAR 0 3
11147: PUSH
11148: LD_INT 103
11150: EQUAL
11151: IFFALSE 11161
// sFog := true ;
11153: LD_ADDR_EXP 65
11157: PUSH
11158: LD_INT 1
11160: ST_TO_ADDR
// if p3 = 104 then
11161: LD_VAR 0 3
11165: PUSH
11166: LD_INT 104
11168: EQUAL
11169: IFFALSE 11179
// sReset := true ;
11171: LD_ADDR_EXP 66
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// if p3 = 105 then
11179: LD_VAR 0 3
11183: PUSH
11184: LD_INT 105
11186: EQUAL
11187: IFFALSE 11197
// sSun := true ;
11189: LD_ADDR_EXP 67
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// if p3 = 106 then
11197: LD_VAR 0 3
11201: PUSH
11202: LD_INT 106
11204: EQUAL
11205: IFFALSE 11215
// sTiger := true ;
11207: LD_ADDR_EXP 63
11211: PUSH
11212: LD_INT 1
11214: ST_TO_ADDR
// if p3 = 107 then
11215: LD_VAR 0 3
11219: PUSH
11220: LD_INT 107
11222: EQUAL
11223: IFFALSE 11233
// sBomb := true ;
11225: LD_ADDR_EXP 64
11229: PUSH
11230: LD_INT 1
11232: ST_TO_ADDR
// if p3 = 108 then
11233: LD_VAR 0 3
11237: PUSH
11238: LD_INT 108
11240: EQUAL
11241: IFFALSE 11251
// sWound := true ;
11243: LD_ADDR_EXP 72
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// if p3 = 109 then
11251: LD_VAR 0 3
11255: PUSH
11256: LD_INT 109
11258: EQUAL
11259: IFFALSE 11269
// sBetray := true ;
11261: LD_ADDR_EXP 76
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// if p3 = 110 then
11269: LD_VAR 0 3
11273: PUSH
11274: LD_INT 110
11276: EQUAL
11277: IFFALSE 11287
// sContamin := true ;
11279: LD_ADDR_EXP 77
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if p3 = 111 then
11287: LD_VAR 0 3
11291: PUSH
11292: LD_INT 111
11294: EQUAL
11295: IFFALSE 11305
// sOil := true ;
11297: LD_ADDR_EXP 79
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// if p3 = 112 then
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 112
11312: EQUAL
11313: IFFALSE 11323
// sStu := true ;
11315: LD_ADDR_EXP 83
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// if p3 = 113 then
11323: LD_VAR 0 3
11327: PUSH
11328: LD_INT 113
11330: EQUAL
11331: IFFALSE 11341
// sBazooka := true ;
11333: LD_ADDR_EXP 86
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// if p3 = 114 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 114
11348: EQUAL
11349: IFFALSE 11359
// sMortar := true ;
11351: LD_ADDR_EXP 87
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if p3 = 115 then
11359: LD_VAR 0 3
11363: PUSH
11364: LD_INT 115
11366: EQUAL
11367: IFFALSE 11377
// sRanger := true ;
11369: LD_ADDR_EXP 97
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// if p3 = 116 then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 116
11384: EQUAL
11385: IFFALSE 11395
// sComputer := true ;
11387: LD_ADDR_EXP 98
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// if p3 = 117 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 117
11402: EQUAL
11403: IFFALSE 11413
// s30 := true ;
11405: LD_ADDR_EXP 99
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// if p3 = 118 then
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 118
11420: EQUAL
11421: IFFALSE 11431
// s60 := true ;
11423: LD_ADDR_EXP 100
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// end ; if p2 = hack_mode then
11431: LD_VAR 0 2
11435: PUSH
11436: LD_INT 101
11438: EQUAL
11439: IFFALSE 11567
// begin case p3 of 1 :
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 1
11448: DOUBLE
11449: EQUAL
11450: IFTRUE 11454
11452: GO 11461
11454: POP
// hHackUnlimitedResources ; 2 :
11455: CALL 23714 0 0
11459: GO 11567
11461: LD_INT 2
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11476
11469: POP
// hHackSetLevel10 ; 3 :
11470: CALL 23847 0 0
11474: GO 11567
11476: LD_INT 3
11478: DOUBLE
11479: EQUAL
11480: IFTRUE 11484
11482: GO 11491
11484: POP
// hHackSetLevel10YourUnits ; 4 :
11485: CALL 23932 0 0
11489: GO 11567
11491: LD_INT 4
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 11506
11499: POP
// hHackInvincible ; 5 :
11500: CALL 24380 0 0
11504: GO 11567
11506: LD_INT 5
11508: DOUBLE
11509: EQUAL
11510: IFTRUE 11514
11512: GO 11521
11514: POP
// hHackInvisible ; 6 :
11515: CALL 24491 0 0
11519: GO 11567
11521: LD_INT 6
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11536
11529: POP
// hHackChangeYourSide ; 7 :
11530: CALL 24548 0 0
11534: GO 11567
11536: LD_INT 7
11538: DOUBLE
11539: EQUAL
11540: IFTRUE 11544
11542: GO 11551
11544: POP
// hHackChangeUnitSide ; 8 :
11545: CALL 24590 0 0
11549: GO 11567
11551: LD_INT 8
11553: DOUBLE
11554: EQUAL
11555: IFTRUE 11559
11557: GO 11566
11559: POP
// hHackFog ; end ;
11560: CALL 24691 0 0
11564: GO 11567
11566: POP
// end ; if p2 = game_save_mode then
11567: LD_VAR 0 2
11571: PUSH
11572: LD_INT 102
11574: EQUAL
11575: IFFALSE 11630
// begin if p3 = 1 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 1
11584: EQUAL
11585: IFFALSE 11597
// globalGameSaveCounter := p4 ;
11587: LD_ADDR_EXP 43
11591: PUSH
11592: LD_VAR 0 4
11596: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 2
11604: EQUAL
11605: PUSH
11606: LD_EXP 43
11610: AND
11611: IFFALSE 11630
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11613: LD_STRING setGameSaveCounter(
11615: PUSH
11616: LD_EXP 43
11620: STR
11621: PUSH
11622: LD_STRING )
11624: STR
11625: PPUSH
11626: CALL_OW 559
// end ; end ;
11630: LD_VAR 0 7
11634: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11635: LD_INT 0
11637: PPUSH
// streamModeActive := false ;
11638: LD_ADDR_EXP 44
11642: PUSH
11643: LD_INT 0
11645: ST_TO_ADDR
// normalCounter := 36 ;
11646: LD_ADDR_EXP 45
11650: PUSH
11651: LD_INT 36
11653: ST_TO_ADDR
// hardcoreCounter := 18 ;
11654: LD_ADDR_EXP 46
11658: PUSH
11659: LD_INT 18
11661: ST_TO_ADDR
// sRocket := false ;
11662: LD_ADDR_EXP 49
11666: PUSH
11667: LD_INT 0
11669: ST_TO_ADDR
// sSpeed := false ;
11670: LD_ADDR_EXP 48
11674: PUSH
11675: LD_INT 0
11677: ST_TO_ADDR
// sEngine := false ;
11678: LD_ADDR_EXP 50
11682: PUSH
11683: LD_INT 0
11685: ST_TO_ADDR
// sSpec := false ;
11686: LD_ADDR_EXP 47
11690: PUSH
11691: LD_INT 0
11693: ST_TO_ADDR
// sLevel := false ;
11694: LD_ADDR_EXP 51
11698: PUSH
11699: LD_INT 0
11701: ST_TO_ADDR
// sArmoury := false ;
11702: LD_ADDR_EXP 52
11706: PUSH
11707: LD_INT 0
11709: ST_TO_ADDR
// sRadar := false ;
11710: LD_ADDR_EXP 53
11714: PUSH
11715: LD_INT 0
11717: ST_TO_ADDR
// sBunker := false ;
11718: LD_ADDR_EXP 54
11722: PUSH
11723: LD_INT 0
11725: ST_TO_ADDR
// sHack := false ;
11726: LD_ADDR_EXP 55
11730: PUSH
11731: LD_INT 0
11733: ST_TO_ADDR
// sFire := false ;
11734: LD_ADDR_EXP 56
11738: PUSH
11739: LD_INT 0
11741: ST_TO_ADDR
// sRefresh := false ;
11742: LD_ADDR_EXP 57
11746: PUSH
11747: LD_INT 0
11749: ST_TO_ADDR
// sExp := false ;
11750: LD_ADDR_EXP 58
11754: PUSH
11755: LD_INT 0
11757: ST_TO_ADDR
// sDepot := false ;
11758: LD_ADDR_EXP 59
11762: PUSH
11763: LD_INT 0
11765: ST_TO_ADDR
// sFlag := false ;
11766: LD_ADDR_EXP 60
11770: PUSH
11771: LD_INT 0
11773: ST_TO_ADDR
// sKamikadze := false ;
11774: LD_ADDR_EXP 68
11778: PUSH
11779: LD_INT 0
11781: ST_TO_ADDR
// sTroll := false ;
11782: LD_ADDR_EXP 69
11786: PUSH
11787: LD_INT 0
11789: ST_TO_ADDR
// sSlow := false ;
11790: LD_ADDR_EXP 70
11794: PUSH
11795: LD_INT 0
11797: ST_TO_ADDR
// sLack := false ;
11798: LD_ADDR_EXP 71
11802: PUSH
11803: LD_INT 0
11805: ST_TO_ADDR
// sTank := false ;
11806: LD_ADDR_EXP 73
11810: PUSH
11811: LD_INT 0
11813: ST_TO_ADDR
// sRemote := false ;
11814: LD_ADDR_EXP 74
11818: PUSH
11819: LD_INT 0
11821: ST_TO_ADDR
// sPowell := false ;
11822: LD_ADDR_EXP 75
11826: PUSH
11827: LD_INT 0
11829: ST_TO_ADDR
// sTeleport := false ;
11830: LD_ADDR_EXP 78
11834: PUSH
11835: LD_INT 0
11837: ST_TO_ADDR
// sOilTower := false ;
11838: LD_ADDR_EXP 80
11842: PUSH
11843: LD_INT 0
11845: ST_TO_ADDR
// sShovel := false ;
11846: LD_ADDR_EXP 81
11850: PUSH
11851: LD_INT 0
11853: ST_TO_ADDR
// sSheik := false ;
11854: LD_ADDR_EXP 82
11858: PUSH
11859: LD_INT 0
11861: ST_TO_ADDR
// sEarthquake := false ;
11862: LD_ADDR_EXP 84
11866: PUSH
11867: LD_INT 0
11869: ST_TO_ADDR
// sAI := false ;
11870: LD_ADDR_EXP 85
11874: PUSH
11875: LD_INT 0
11877: ST_TO_ADDR
// sCargo := false ;
11878: LD_ADDR_EXP 88
11882: PUSH
11883: LD_INT 0
11885: ST_TO_ADDR
// sDLaser := false ;
11886: LD_ADDR_EXP 89
11890: PUSH
11891: LD_INT 0
11893: ST_TO_ADDR
// sExchange := false ;
11894: LD_ADDR_EXP 90
11898: PUSH
11899: LD_INT 0
11901: ST_TO_ADDR
// sFac := false ;
11902: LD_ADDR_EXP 91
11906: PUSH
11907: LD_INT 0
11909: ST_TO_ADDR
// sPower := false ;
11910: LD_ADDR_EXP 92
11914: PUSH
11915: LD_INT 0
11917: ST_TO_ADDR
// sRandom := false ;
11918: LD_ADDR_EXP 93
11922: PUSH
11923: LD_INT 0
11925: ST_TO_ADDR
// sShield := false ;
11926: LD_ADDR_EXP 94
11930: PUSH
11931: LD_INT 0
11933: ST_TO_ADDR
// sTime := false ;
11934: LD_ADDR_EXP 95
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// sTools := false ;
11942: LD_ADDR_EXP 96
11946: PUSH
11947: LD_INT 0
11949: ST_TO_ADDR
// sSold := false ;
11950: LD_ADDR_EXP 61
11954: PUSH
11955: LD_INT 0
11957: ST_TO_ADDR
// sDiff := false ;
11958: LD_ADDR_EXP 62
11962: PUSH
11963: LD_INT 0
11965: ST_TO_ADDR
// sFog := false ;
11966: LD_ADDR_EXP 65
11970: PUSH
11971: LD_INT 0
11973: ST_TO_ADDR
// sReset := false ;
11974: LD_ADDR_EXP 66
11978: PUSH
11979: LD_INT 0
11981: ST_TO_ADDR
// sSun := false ;
11982: LD_ADDR_EXP 67
11986: PUSH
11987: LD_INT 0
11989: ST_TO_ADDR
// sTiger := false ;
11990: LD_ADDR_EXP 63
11994: PUSH
11995: LD_INT 0
11997: ST_TO_ADDR
// sBomb := false ;
11998: LD_ADDR_EXP 64
12002: PUSH
12003: LD_INT 0
12005: ST_TO_ADDR
// sWound := false ;
12006: LD_ADDR_EXP 72
12010: PUSH
12011: LD_INT 0
12013: ST_TO_ADDR
// sBetray := false ;
12014: LD_ADDR_EXP 76
12018: PUSH
12019: LD_INT 0
12021: ST_TO_ADDR
// sContamin := false ;
12022: LD_ADDR_EXP 77
12026: PUSH
12027: LD_INT 0
12029: ST_TO_ADDR
// sOil := false ;
12030: LD_ADDR_EXP 79
12034: PUSH
12035: LD_INT 0
12037: ST_TO_ADDR
// sStu := false ;
12038: LD_ADDR_EXP 83
12042: PUSH
12043: LD_INT 0
12045: ST_TO_ADDR
// sBazooka := false ;
12046: LD_ADDR_EXP 86
12050: PUSH
12051: LD_INT 0
12053: ST_TO_ADDR
// sMortar := false ;
12054: LD_ADDR_EXP 87
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// sRanger := false ;
12062: LD_ADDR_EXP 97
12066: PUSH
12067: LD_INT 0
12069: ST_TO_ADDR
// sComputer := false ;
12070: LD_ADDR_EXP 98
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// s30 := false ;
12078: LD_ADDR_EXP 99
12082: PUSH
12083: LD_INT 0
12085: ST_TO_ADDR
// s60 := false ;
12086: LD_ADDR_EXP 100
12090: PUSH
12091: LD_INT 0
12093: ST_TO_ADDR
// end ;
12094: LD_VAR 0 1
12098: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12099: LD_INT 0
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// result := [ ] ;
12108: LD_ADDR_VAR 0 2
12112: PUSH
12113: EMPTY
12114: ST_TO_ADDR
// if campaign_id = 1 then
12115: LD_OWVAR 69
12119: PUSH
12120: LD_INT 1
12122: EQUAL
12123: IFFALSE 15289
// begin case mission_number of 1 :
12125: LD_OWVAR 70
12129: PUSH
12130: LD_INT 1
12132: DOUBLE
12133: EQUAL
12134: IFTRUE 12138
12136: GO 12214
12138: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12139: LD_ADDR_VAR 0 2
12143: PUSH
12144: LD_INT 2
12146: PUSH
12147: LD_INT 4
12149: PUSH
12150: LD_INT 11
12152: PUSH
12153: LD_INT 12
12155: PUSH
12156: LD_INT 15
12158: PUSH
12159: LD_INT 16
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 26
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 101
12184: PUSH
12185: LD_INT 102
12187: PUSH
12188: LD_INT 106
12190: PUSH
12191: LD_INT 116
12193: PUSH
12194: LD_INT 117
12196: PUSH
12197: LD_INT 118
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: ST_TO_ADDR
12212: GO 15287
12214: LD_INT 2
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12306
12222: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: LD_INT 4
12233: PUSH
12234: LD_INT 11
12236: PUSH
12237: LD_INT 12
12239: PUSH
12240: LD_INT 15
12242: PUSH
12243: LD_INT 16
12245: PUSH
12246: LD_INT 22
12248: PUSH
12249: LD_INT 23
12251: PUSH
12252: LD_INT 26
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 101
12268: PUSH
12269: LD_INT 102
12271: PUSH
12272: LD_INT 105
12274: PUSH
12275: LD_INT 106
12277: PUSH
12278: LD_INT 108
12280: PUSH
12281: LD_INT 116
12283: PUSH
12284: LD_INT 117
12286: PUSH
12287: LD_INT 118
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: ST_TO_ADDR
12304: GO 15287
12306: LD_INT 3
12308: DOUBLE
12309: EQUAL
12310: IFTRUE 12314
12312: GO 12402
12314: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_INT 2
12322: PUSH
12323: LD_INT 4
12325: PUSH
12326: LD_INT 5
12328: PUSH
12329: LD_INT 11
12331: PUSH
12332: LD_INT 12
12334: PUSH
12335: LD_INT 15
12337: PUSH
12338: LD_INT 16
12340: PUSH
12341: LD_INT 22
12343: PUSH
12344: LD_INT 26
12346: PUSH
12347: LD_INT 36
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 101
12364: PUSH
12365: LD_INT 102
12367: PUSH
12368: LD_INT 105
12370: PUSH
12371: LD_INT 106
12373: PUSH
12374: LD_INT 108
12376: PUSH
12377: LD_INT 116
12379: PUSH
12380: LD_INT 117
12382: PUSH
12383: LD_INT 118
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: ST_TO_ADDR
12400: GO 15287
12402: LD_INT 4
12404: DOUBLE
12405: EQUAL
12406: IFTRUE 12410
12408: GO 12506
12410: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12411: LD_ADDR_VAR 0 2
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: LD_INT 4
12421: PUSH
12422: LD_INT 5
12424: PUSH
12425: LD_INT 8
12427: PUSH
12428: LD_INT 11
12430: PUSH
12431: LD_INT 12
12433: PUSH
12434: LD_INT 15
12436: PUSH
12437: LD_INT 16
12439: PUSH
12440: LD_INT 22
12442: PUSH
12443: LD_INT 23
12445: PUSH
12446: LD_INT 26
12448: PUSH
12449: LD_INT 36
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 101
12468: PUSH
12469: LD_INT 102
12471: PUSH
12472: LD_INT 105
12474: PUSH
12475: LD_INT 106
12477: PUSH
12478: LD_INT 108
12480: PUSH
12481: LD_INT 116
12483: PUSH
12484: LD_INT 117
12486: PUSH
12487: LD_INT 118
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: ST_TO_ADDR
12504: GO 15287
12506: LD_INT 5
12508: DOUBLE
12509: EQUAL
12510: IFTRUE 12514
12512: GO 12626
12514: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12515: LD_ADDR_VAR 0 2
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: LD_INT 4
12525: PUSH
12526: LD_INT 5
12528: PUSH
12529: LD_INT 6
12531: PUSH
12532: LD_INT 8
12534: PUSH
12535: LD_INT 11
12537: PUSH
12538: LD_INT 12
12540: PUSH
12541: LD_INT 15
12543: PUSH
12544: LD_INT 16
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: LD_INT 23
12552: PUSH
12553: LD_INT 25
12555: PUSH
12556: LD_INT 26
12558: PUSH
12559: LD_INT 36
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 101
12580: PUSH
12581: LD_INT 102
12583: PUSH
12584: LD_INT 105
12586: PUSH
12587: LD_INT 106
12589: PUSH
12590: LD_INT 108
12592: PUSH
12593: LD_INT 109
12595: PUSH
12596: LD_INT 112
12598: PUSH
12599: LD_INT 116
12601: PUSH
12602: LD_INT 117
12604: PUSH
12605: LD_INT 118
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: ST_TO_ADDR
12624: GO 15287
12626: LD_INT 6
12628: DOUBLE
12629: EQUAL
12630: IFTRUE 12634
12632: GO 12766
12634: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 4
12645: PUSH
12646: LD_INT 5
12648: PUSH
12649: LD_INT 6
12651: PUSH
12652: LD_INT 8
12654: PUSH
12655: LD_INT 11
12657: PUSH
12658: LD_INT 12
12660: PUSH
12661: LD_INT 15
12663: PUSH
12664: LD_INT 16
12666: PUSH
12667: LD_INT 20
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_INT 23
12678: PUSH
12679: LD_INT 25
12681: PUSH
12682: LD_INT 26
12684: PUSH
12685: LD_INT 30
12687: PUSH
12688: LD_INT 31
12690: PUSH
12691: LD_INT 32
12693: PUSH
12694: LD_INT 36
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 101
12720: PUSH
12721: LD_INT 102
12723: PUSH
12724: LD_INT 105
12726: PUSH
12727: LD_INT 106
12729: PUSH
12730: LD_INT 108
12732: PUSH
12733: LD_INT 109
12735: PUSH
12736: LD_INT 112
12738: PUSH
12739: LD_INT 116
12741: PUSH
12742: LD_INT 117
12744: PUSH
12745: LD_INT 118
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: ST_TO_ADDR
12764: GO 15287
12766: LD_INT 7
12768: DOUBLE
12769: EQUAL
12770: IFTRUE 12774
12772: GO 12886
12774: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12775: LD_ADDR_VAR 0 2
12779: PUSH
12780: LD_INT 2
12782: PUSH
12783: LD_INT 4
12785: PUSH
12786: LD_INT 5
12788: PUSH
12789: LD_INT 7
12791: PUSH
12792: LD_INT 11
12794: PUSH
12795: LD_INT 12
12797: PUSH
12798: LD_INT 15
12800: PUSH
12801: LD_INT 16
12803: PUSH
12804: LD_INT 20
12806: PUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 22
12812: PUSH
12813: LD_INT 23
12815: PUSH
12816: LD_INT 25
12818: PUSH
12819: LD_INT 26
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 101
12840: PUSH
12841: LD_INT 102
12843: PUSH
12844: LD_INT 103
12846: PUSH
12847: LD_INT 105
12849: PUSH
12850: LD_INT 106
12852: PUSH
12853: LD_INT 108
12855: PUSH
12856: LD_INT 112
12858: PUSH
12859: LD_INT 116
12861: PUSH
12862: LD_INT 117
12864: PUSH
12865: LD_INT 118
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: ST_TO_ADDR
12884: GO 15287
12886: LD_INT 8
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 13034
12894: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12895: LD_ADDR_VAR 0 2
12899: PUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 4
12905: PUSH
12906: LD_INT 5
12908: PUSH
12909: LD_INT 6
12911: PUSH
12912: LD_INT 7
12914: PUSH
12915: LD_INT 8
12917: PUSH
12918: LD_INT 11
12920: PUSH
12921: LD_INT 12
12923: PUSH
12924: LD_INT 15
12926: PUSH
12927: LD_INT 16
12929: PUSH
12930: LD_INT 20
12932: PUSH
12933: LD_INT 21
12935: PUSH
12936: LD_INT 22
12938: PUSH
12939: LD_INT 23
12941: PUSH
12942: LD_INT 25
12944: PUSH
12945: LD_INT 26
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 31
12953: PUSH
12954: LD_INT 32
12956: PUSH
12957: LD_INT 36
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 101
12984: PUSH
12985: LD_INT 102
12987: PUSH
12988: LD_INT 103
12990: PUSH
12991: LD_INT 105
12993: PUSH
12994: LD_INT 106
12996: PUSH
12997: LD_INT 108
12999: PUSH
13000: LD_INT 109
13002: PUSH
13003: LD_INT 112
13005: PUSH
13006: LD_INT 116
13008: PUSH
13009: LD_INT 117
13011: PUSH
13012: LD_INT 118
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: ST_TO_ADDR
13032: GO 15287
13034: LD_INT 9
13036: DOUBLE
13037: EQUAL
13038: IFTRUE 13042
13040: GO 13190
13042: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 2
13050: PUSH
13051: LD_INT 4
13053: PUSH
13054: LD_INT 5
13056: PUSH
13057: LD_INT 6
13059: PUSH
13060: LD_INT 7
13062: PUSH
13063: LD_INT 8
13065: PUSH
13066: LD_INT 11
13068: PUSH
13069: LD_INT 12
13071: PUSH
13072: LD_INT 15
13074: PUSH
13075: LD_INT 16
13077: PUSH
13078: LD_INT 20
13080: PUSH
13081: LD_INT 21
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_INT 23
13089: PUSH
13090: LD_INT 25
13092: PUSH
13093: LD_INT 26
13095: PUSH
13096: LD_INT 28
13098: PUSH
13099: LD_INT 30
13101: PUSH
13102: LD_INT 31
13104: PUSH
13105: LD_INT 32
13107: PUSH
13108: LD_INT 36
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 101
13136: PUSH
13137: LD_INT 102
13139: PUSH
13140: LD_INT 103
13142: PUSH
13143: LD_INT 105
13145: PUSH
13146: LD_INT 106
13148: PUSH
13149: LD_INT 108
13151: PUSH
13152: LD_INT 109
13154: PUSH
13155: LD_INT 112
13157: PUSH
13158: LD_INT 114
13160: PUSH
13161: LD_INT 116
13163: PUSH
13164: LD_INT 117
13166: PUSH
13167: LD_INT 118
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: ST_TO_ADDR
13188: GO 15287
13190: LD_INT 10
13192: DOUBLE
13193: EQUAL
13194: IFTRUE 13198
13196: GO 13394
13198: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13199: LD_ADDR_VAR 0 2
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: LD_INT 5
13212: PUSH
13213: LD_INT 6
13215: PUSH
13216: LD_INT 7
13218: PUSH
13219: LD_INT 8
13221: PUSH
13222: LD_INT 9
13224: PUSH
13225: LD_INT 10
13227: PUSH
13228: LD_INT 11
13230: PUSH
13231: LD_INT 12
13233: PUSH
13234: LD_INT 13
13236: PUSH
13237: LD_INT 14
13239: PUSH
13240: LD_INT 15
13242: PUSH
13243: LD_INT 16
13245: PUSH
13246: LD_INT 17
13248: PUSH
13249: LD_INT 18
13251: PUSH
13252: LD_INT 19
13254: PUSH
13255: LD_INT 20
13257: PUSH
13258: LD_INT 21
13260: PUSH
13261: LD_INT 22
13263: PUSH
13264: LD_INT 23
13266: PUSH
13267: LD_INT 24
13269: PUSH
13270: LD_INT 25
13272: PUSH
13273: LD_INT 26
13275: PUSH
13276: LD_INT 28
13278: PUSH
13279: LD_INT 30
13281: PUSH
13282: LD_INT 31
13284: PUSH
13285: LD_INT 32
13287: PUSH
13288: LD_INT 36
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 101
13324: PUSH
13325: LD_INT 102
13327: PUSH
13328: LD_INT 103
13330: PUSH
13331: LD_INT 104
13333: PUSH
13334: LD_INT 105
13336: PUSH
13337: LD_INT 106
13339: PUSH
13340: LD_INT 107
13342: PUSH
13343: LD_INT 108
13345: PUSH
13346: LD_INT 109
13348: PUSH
13349: LD_INT 110
13351: PUSH
13352: LD_INT 111
13354: PUSH
13355: LD_INT 112
13357: PUSH
13358: LD_INT 114
13360: PUSH
13361: LD_INT 116
13363: PUSH
13364: LD_INT 117
13366: PUSH
13367: LD_INT 118
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: ST_TO_ADDR
13392: GO 15287
13394: LD_INT 11
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13606
13402: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13403: LD_ADDR_VAR 0 2
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: LD_INT 3
13413: PUSH
13414: LD_INT 4
13416: PUSH
13417: LD_INT 5
13419: PUSH
13420: LD_INT 6
13422: PUSH
13423: LD_INT 7
13425: PUSH
13426: LD_INT 8
13428: PUSH
13429: LD_INT 9
13431: PUSH
13432: LD_INT 10
13434: PUSH
13435: LD_INT 11
13437: PUSH
13438: LD_INT 12
13440: PUSH
13441: LD_INT 13
13443: PUSH
13444: LD_INT 14
13446: PUSH
13447: LD_INT 15
13449: PUSH
13450: LD_INT 16
13452: PUSH
13453: LD_INT 17
13455: PUSH
13456: LD_INT 18
13458: PUSH
13459: LD_INT 19
13461: PUSH
13462: LD_INT 20
13464: PUSH
13465: LD_INT 21
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 23
13473: PUSH
13474: LD_INT 24
13476: PUSH
13477: LD_INT 25
13479: PUSH
13480: LD_INT 26
13482: PUSH
13483: LD_INT 28
13485: PUSH
13486: LD_INT 30
13488: PUSH
13489: LD_INT 31
13491: PUSH
13492: LD_INT 32
13494: PUSH
13495: LD_INT 34
13497: PUSH
13498: LD_INT 36
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 101
13536: PUSH
13537: LD_INT 102
13539: PUSH
13540: LD_INT 103
13542: PUSH
13543: LD_INT 104
13545: PUSH
13546: LD_INT 105
13548: PUSH
13549: LD_INT 106
13551: PUSH
13552: LD_INT 107
13554: PUSH
13555: LD_INT 108
13557: PUSH
13558: LD_INT 109
13560: PUSH
13561: LD_INT 110
13563: PUSH
13564: LD_INT 111
13566: PUSH
13567: LD_INT 112
13569: PUSH
13570: LD_INT 114
13572: PUSH
13573: LD_INT 116
13575: PUSH
13576: LD_INT 117
13578: PUSH
13579: LD_INT 118
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: ST_TO_ADDR
13604: GO 15287
13606: LD_INT 12
13608: DOUBLE
13609: EQUAL
13610: IFTRUE 13614
13612: GO 13834
13614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13615: LD_ADDR_VAR 0 2
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: LD_INT 2
13625: PUSH
13626: LD_INT 3
13628: PUSH
13629: LD_INT 4
13631: PUSH
13632: LD_INT 5
13634: PUSH
13635: LD_INT 6
13637: PUSH
13638: LD_INT 7
13640: PUSH
13641: LD_INT 8
13643: PUSH
13644: LD_INT 9
13646: PUSH
13647: LD_INT 10
13649: PUSH
13650: LD_INT 11
13652: PUSH
13653: LD_INT 12
13655: PUSH
13656: LD_INT 13
13658: PUSH
13659: LD_INT 14
13661: PUSH
13662: LD_INT 15
13664: PUSH
13665: LD_INT 16
13667: PUSH
13668: LD_INT 17
13670: PUSH
13671: LD_INT 18
13673: PUSH
13674: LD_INT 19
13676: PUSH
13677: LD_INT 20
13679: PUSH
13680: LD_INT 21
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_INT 23
13688: PUSH
13689: LD_INT 24
13691: PUSH
13692: LD_INT 25
13694: PUSH
13695: LD_INT 26
13697: PUSH
13698: LD_INT 27
13700: PUSH
13701: LD_INT 28
13703: PUSH
13704: LD_INT 30
13706: PUSH
13707: LD_INT 31
13709: PUSH
13710: LD_INT 32
13712: PUSH
13713: LD_INT 33
13715: PUSH
13716: LD_INT 34
13718: PUSH
13719: LD_INT 36
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 101
13760: PUSH
13761: LD_INT 102
13763: PUSH
13764: LD_INT 103
13766: PUSH
13767: LD_INT 104
13769: PUSH
13770: LD_INT 105
13772: PUSH
13773: LD_INT 106
13775: PUSH
13776: LD_INT 107
13778: PUSH
13779: LD_INT 108
13781: PUSH
13782: LD_INT 109
13784: PUSH
13785: LD_INT 110
13787: PUSH
13788: LD_INT 111
13790: PUSH
13791: LD_INT 112
13793: PUSH
13794: LD_INT 113
13796: PUSH
13797: LD_INT 114
13799: PUSH
13800: LD_INT 116
13802: PUSH
13803: LD_INT 117
13805: PUSH
13806: LD_INT 118
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: ST_TO_ADDR
13832: GO 15287
13834: LD_INT 13
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 14050
13842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13843: LD_ADDR_VAR 0 2
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 3
13856: PUSH
13857: LD_INT 4
13859: PUSH
13860: LD_INT 5
13862: PUSH
13863: LD_INT 8
13865: PUSH
13866: LD_INT 9
13868: PUSH
13869: LD_INT 10
13871: PUSH
13872: LD_INT 11
13874: PUSH
13875: LD_INT 12
13877: PUSH
13878: LD_INT 14
13880: PUSH
13881: LD_INT 15
13883: PUSH
13884: LD_INT 16
13886: PUSH
13887: LD_INT 17
13889: PUSH
13890: LD_INT 18
13892: PUSH
13893: LD_INT 19
13895: PUSH
13896: LD_INT 20
13898: PUSH
13899: LD_INT 21
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_INT 23
13907: PUSH
13908: LD_INT 24
13910: PUSH
13911: LD_INT 25
13913: PUSH
13914: LD_INT 26
13916: PUSH
13917: LD_INT 27
13919: PUSH
13920: LD_INT 28
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 31
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: LD_INT 33
13934: PUSH
13935: LD_INT 34
13937: PUSH
13938: LD_INT 36
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 101
13976: PUSH
13977: LD_INT 102
13979: PUSH
13980: LD_INT 103
13982: PUSH
13983: LD_INT 104
13985: PUSH
13986: LD_INT 105
13988: PUSH
13989: LD_INT 106
13991: PUSH
13992: LD_INT 107
13994: PUSH
13995: LD_INT 108
13997: PUSH
13998: LD_INT 109
14000: PUSH
14001: LD_INT 110
14003: PUSH
14004: LD_INT 111
14006: PUSH
14007: LD_INT 112
14009: PUSH
14010: LD_INT 113
14012: PUSH
14013: LD_INT 114
14015: PUSH
14016: LD_INT 116
14018: PUSH
14019: LD_INT 117
14021: PUSH
14022: LD_INT 118
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: ST_TO_ADDR
14048: GO 15287
14050: LD_INT 14
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14282
14058: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_INT 1
14066: PUSH
14067: LD_INT 2
14069: PUSH
14070: LD_INT 3
14072: PUSH
14073: LD_INT 4
14075: PUSH
14076: LD_INT 5
14078: PUSH
14079: LD_INT 6
14081: PUSH
14082: LD_INT 7
14084: PUSH
14085: LD_INT 8
14087: PUSH
14088: LD_INT 9
14090: PUSH
14091: LD_INT 10
14093: PUSH
14094: LD_INT 11
14096: PUSH
14097: LD_INT 12
14099: PUSH
14100: LD_INT 13
14102: PUSH
14103: LD_INT 14
14105: PUSH
14106: LD_INT 15
14108: PUSH
14109: LD_INT 16
14111: PUSH
14112: LD_INT 17
14114: PUSH
14115: LD_INT 18
14117: PUSH
14118: LD_INT 19
14120: PUSH
14121: LD_INT 20
14123: PUSH
14124: LD_INT 21
14126: PUSH
14127: LD_INT 22
14129: PUSH
14130: LD_INT 23
14132: PUSH
14133: LD_INT 24
14135: PUSH
14136: LD_INT 25
14138: PUSH
14139: LD_INT 26
14141: PUSH
14142: LD_INT 27
14144: PUSH
14145: LD_INT 28
14147: PUSH
14148: LD_INT 29
14150: PUSH
14151: LD_INT 30
14153: PUSH
14154: LD_INT 31
14156: PUSH
14157: LD_INT 32
14159: PUSH
14160: LD_INT 33
14162: PUSH
14163: LD_INT 34
14165: PUSH
14166: LD_INT 36
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 101
14208: PUSH
14209: LD_INT 102
14211: PUSH
14212: LD_INT 103
14214: PUSH
14215: LD_INT 104
14217: PUSH
14218: LD_INT 105
14220: PUSH
14221: LD_INT 106
14223: PUSH
14224: LD_INT 107
14226: PUSH
14227: LD_INT 108
14229: PUSH
14230: LD_INT 109
14232: PUSH
14233: LD_INT 110
14235: PUSH
14236: LD_INT 111
14238: PUSH
14239: LD_INT 112
14241: PUSH
14242: LD_INT 113
14244: PUSH
14245: LD_INT 114
14247: PUSH
14248: LD_INT 116
14250: PUSH
14251: LD_INT 117
14253: PUSH
14254: LD_INT 118
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: ST_TO_ADDR
14280: GO 15287
14282: LD_INT 15
14284: DOUBLE
14285: EQUAL
14286: IFTRUE 14290
14288: GO 14514
14290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14291: LD_ADDR_VAR 0 2
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: LD_INT 2
14301: PUSH
14302: LD_INT 3
14304: PUSH
14305: LD_INT 4
14307: PUSH
14308: LD_INT 5
14310: PUSH
14311: LD_INT 6
14313: PUSH
14314: LD_INT 7
14316: PUSH
14317: LD_INT 8
14319: PUSH
14320: LD_INT 9
14322: PUSH
14323: LD_INT 10
14325: PUSH
14326: LD_INT 11
14328: PUSH
14329: LD_INT 12
14331: PUSH
14332: LD_INT 13
14334: PUSH
14335: LD_INT 14
14337: PUSH
14338: LD_INT 15
14340: PUSH
14341: LD_INT 16
14343: PUSH
14344: LD_INT 17
14346: PUSH
14347: LD_INT 18
14349: PUSH
14350: LD_INT 19
14352: PUSH
14353: LD_INT 20
14355: PUSH
14356: LD_INT 21
14358: PUSH
14359: LD_INT 22
14361: PUSH
14362: LD_INT 23
14364: PUSH
14365: LD_INT 24
14367: PUSH
14368: LD_INT 25
14370: PUSH
14371: LD_INT 26
14373: PUSH
14374: LD_INT 27
14376: PUSH
14377: LD_INT 28
14379: PUSH
14380: LD_INT 29
14382: PUSH
14383: LD_INT 30
14385: PUSH
14386: LD_INT 31
14388: PUSH
14389: LD_INT 32
14391: PUSH
14392: LD_INT 33
14394: PUSH
14395: LD_INT 34
14397: PUSH
14398: LD_INT 36
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 101
14440: PUSH
14441: LD_INT 102
14443: PUSH
14444: LD_INT 103
14446: PUSH
14447: LD_INT 104
14449: PUSH
14450: LD_INT 105
14452: PUSH
14453: LD_INT 106
14455: PUSH
14456: LD_INT 107
14458: PUSH
14459: LD_INT 108
14461: PUSH
14462: LD_INT 109
14464: PUSH
14465: LD_INT 110
14467: PUSH
14468: LD_INT 111
14470: PUSH
14471: LD_INT 112
14473: PUSH
14474: LD_INT 113
14476: PUSH
14477: LD_INT 114
14479: PUSH
14480: LD_INT 116
14482: PUSH
14483: LD_INT 117
14485: PUSH
14486: LD_INT 118
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: ST_TO_ADDR
14512: GO 15287
14514: LD_INT 16
14516: DOUBLE
14517: EQUAL
14518: IFTRUE 14522
14520: GO 14658
14522: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14523: LD_ADDR_VAR 0 2
14527: PUSH
14528: LD_INT 2
14530: PUSH
14531: LD_INT 4
14533: PUSH
14534: LD_INT 5
14536: PUSH
14537: LD_INT 7
14539: PUSH
14540: LD_INT 11
14542: PUSH
14543: LD_INT 12
14545: PUSH
14546: LD_INT 15
14548: PUSH
14549: LD_INT 16
14551: PUSH
14552: LD_INT 20
14554: PUSH
14555: LD_INT 21
14557: PUSH
14558: LD_INT 22
14560: PUSH
14561: LD_INT 23
14563: PUSH
14564: LD_INT 25
14566: PUSH
14567: LD_INT 26
14569: PUSH
14570: LD_INT 30
14572: PUSH
14573: LD_INT 31
14575: PUSH
14576: LD_INT 32
14578: PUSH
14579: LD_INT 33
14581: PUSH
14582: LD_INT 34
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 101
14608: PUSH
14609: LD_INT 102
14611: PUSH
14612: LD_INT 103
14614: PUSH
14615: LD_INT 106
14617: PUSH
14618: LD_INT 108
14620: PUSH
14621: LD_INT 112
14623: PUSH
14624: LD_INT 113
14626: PUSH
14627: LD_INT 114
14629: PUSH
14630: LD_INT 116
14632: PUSH
14633: LD_INT 117
14635: PUSH
14636: LD_INT 118
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: ST_TO_ADDR
14656: GO 15287
14658: LD_INT 17
14660: DOUBLE
14661: EQUAL
14662: IFTRUE 14666
14664: GO 14890
14666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14667: LD_ADDR_VAR 0 2
14671: PUSH
14672: LD_INT 1
14674: PUSH
14675: LD_INT 2
14677: PUSH
14678: LD_INT 3
14680: PUSH
14681: LD_INT 4
14683: PUSH
14684: LD_INT 5
14686: PUSH
14687: LD_INT 6
14689: PUSH
14690: LD_INT 7
14692: PUSH
14693: LD_INT 8
14695: PUSH
14696: LD_INT 9
14698: PUSH
14699: LD_INT 10
14701: PUSH
14702: LD_INT 11
14704: PUSH
14705: LD_INT 12
14707: PUSH
14708: LD_INT 13
14710: PUSH
14711: LD_INT 14
14713: PUSH
14714: LD_INT 15
14716: PUSH
14717: LD_INT 16
14719: PUSH
14720: LD_INT 17
14722: PUSH
14723: LD_INT 18
14725: PUSH
14726: LD_INT 19
14728: PUSH
14729: LD_INT 20
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_INT 23
14740: PUSH
14741: LD_INT 24
14743: PUSH
14744: LD_INT 25
14746: PUSH
14747: LD_INT 26
14749: PUSH
14750: LD_INT 27
14752: PUSH
14753: LD_INT 28
14755: PUSH
14756: LD_INT 29
14758: PUSH
14759: LD_INT 30
14761: PUSH
14762: LD_INT 31
14764: PUSH
14765: LD_INT 32
14767: PUSH
14768: LD_INT 33
14770: PUSH
14771: LD_INT 34
14773: PUSH
14774: LD_INT 36
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 101
14816: PUSH
14817: LD_INT 102
14819: PUSH
14820: LD_INT 103
14822: PUSH
14823: LD_INT 104
14825: PUSH
14826: LD_INT 105
14828: PUSH
14829: LD_INT 106
14831: PUSH
14832: LD_INT 107
14834: PUSH
14835: LD_INT 108
14837: PUSH
14838: LD_INT 109
14840: PUSH
14841: LD_INT 110
14843: PUSH
14844: LD_INT 111
14846: PUSH
14847: LD_INT 112
14849: PUSH
14850: LD_INT 113
14852: PUSH
14853: LD_INT 114
14855: PUSH
14856: LD_INT 116
14858: PUSH
14859: LD_INT 117
14861: PUSH
14862: LD_INT 118
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: ST_TO_ADDR
14888: GO 15287
14890: LD_INT 18
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 15046
14898: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14899: LD_ADDR_VAR 0 2
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: LD_INT 4
14909: PUSH
14910: LD_INT 5
14912: PUSH
14913: LD_INT 7
14915: PUSH
14916: LD_INT 11
14918: PUSH
14919: LD_INT 12
14921: PUSH
14922: LD_INT 15
14924: PUSH
14925: LD_INT 16
14927: PUSH
14928: LD_INT 20
14930: PUSH
14931: LD_INT 21
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_INT 23
14939: PUSH
14940: LD_INT 25
14942: PUSH
14943: LD_INT 26
14945: PUSH
14946: LD_INT 30
14948: PUSH
14949: LD_INT 31
14951: PUSH
14952: LD_INT 32
14954: PUSH
14955: LD_INT 33
14957: PUSH
14958: LD_INT 34
14960: PUSH
14961: LD_INT 35
14963: PUSH
14964: LD_INT 36
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 101
14992: PUSH
14993: LD_INT 102
14995: PUSH
14996: LD_INT 103
14998: PUSH
14999: LD_INT 106
15001: PUSH
15002: LD_INT 108
15004: PUSH
15005: LD_INT 112
15007: PUSH
15008: LD_INT 113
15010: PUSH
15011: LD_INT 114
15013: PUSH
15014: LD_INT 115
15016: PUSH
15017: LD_INT 116
15019: PUSH
15020: LD_INT 117
15022: PUSH
15023: LD_INT 118
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: ST_TO_ADDR
15044: GO 15287
15046: LD_INT 19
15048: DOUBLE
15049: EQUAL
15050: IFTRUE 15054
15052: GO 15286
15054: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: LD_INT 1
15062: PUSH
15063: LD_INT 2
15065: PUSH
15066: LD_INT 3
15068: PUSH
15069: LD_INT 4
15071: PUSH
15072: LD_INT 5
15074: PUSH
15075: LD_INT 6
15077: PUSH
15078: LD_INT 7
15080: PUSH
15081: LD_INT 8
15083: PUSH
15084: LD_INT 9
15086: PUSH
15087: LD_INT 10
15089: PUSH
15090: LD_INT 11
15092: PUSH
15093: LD_INT 12
15095: PUSH
15096: LD_INT 13
15098: PUSH
15099: LD_INT 14
15101: PUSH
15102: LD_INT 15
15104: PUSH
15105: LD_INT 16
15107: PUSH
15108: LD_INT 17
15110: PUSH
15111: LD_INT 18
15113: PUSH
15114: LD_INT 19
15116: PUSH
15117: LD_INT 20
15119: PUSH
15120: LD_INT 21
15122: PUSH
15123: LD_INT 22
15125: PUSH
15126: LD_INT 23
15128: PUSH
15129: LD_INT 24
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 26
15137: PUSH
15138: LD_INT 27
15140: PUSH
15141: LD_INT 28
15143: PUSH
15144: LD_INT 29
15146: PUSH
15147: LD_INT 30
15149: PUSH
15150: LD_INT 31
15152: PUSH
15153: LD_INT 32
15155: PUSH
15156: LD_INT 33
15158: PUSH
15159: LD_INT 34
15161: PUSH
15162: LD_INT 35
15164: PUSH
15165: LD_INT 36
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 101
15208: PUSH
15209: LD_INT 102
15211: PUSH
15212: LD_INT 103
15214: PUSH
15215: LD_INT 104
15217: PUSH
15218: LD_INT 105
15220: PUSH
15221: LD_INT 106
15223: PUSH
15224: LD_INT 107
15226: PUSH
15227: LD_INT 108
15229: PUSH
15230: LD_INT 109
15232: PUSH
15233: LD_INT 110
15235: PUSH
15236: LD_INT 111
15238: PUSH
15239: LD_INT 112
15241: PUSH
15242: LD_INT 113
15244: PUSH
15245: LD_INT 114
15247: PUSH
15248: LD_INT 115
15250: PUSH
15251: LD_INT 116
15253: PUSH
15254: LD_INT 117
15256: PUSH
15257: LD_INT 118
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: ST_TO_ADDR
15284: GO 15287
15286: POP
// end else
15287: GO 15518
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15289: LD_ADDR_VAR 0 2
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: LD_INT 2
15299: PUSH
15300: LD_INT 3
15302: PUSH
15303: LD_INT 4
15305: PUSH
15306: LD_INT 5
15308: PUSH
15309: LD_INT 6
15311: PUSH
15312: LD_INT 7
15314: PUSH
15315: LD_INT 8
15317: PUSH
15318: LD_INT 9
15320: PUSH
15321: LD_INT 10
15323: PUSH
15324: LD_INT 11
15326: PUSH
15327: LD_INT 12
15329: PUSH
15330: LD_INT 13
15332: PUSH
15333: LD_INT 14
15335: PUSH
15336: LD_INT 15
15338: PUSH
15339: LD_INT 16
15341: PUSH
15342: LD_INT 17
15344: PUSH
15345: LD_INT 18
15347: PUSH
15348: LD_INT 19
15350: PUSH
15351: LD_INT 20
15353: PUSH
15354: LD_INT 21
15356: PUSH
15357: LD_INT 22
15359: PUSH
15360: LD_INT 23
15362: PUSH
15363: LD_INT 24
15365: PUSH
15366: LD_INT 25
15368: PUSH
15369: LD_INT 26
15371: PUSH
15372: LD_INT 27
15374: PUSH
15375: LD_INT 28
15377: PUSH
15378: LD_INT 29
15380: PUSH
15381: LD_INT 30
15383: PUSH
15384: LD_INT 31
15386: PUSH
15387: LD_INT 32
15389: PUSH
15390: LD_INT 33
15392: PUSH
15393: LD_INT 34
15395: PUSH
15396: LD_INT 35
15398: PUSH
15399: LD_INT 36
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 101
15442: PUSH
15443: LD_INT 102
15445: PUSH
15446: LD_INT 103
15448: PUSH
15449: LD_INT 104
15451: PUSH
15452: LD_INT 105
15454: PUSH
15455: LD_INT 106
15457: PUSH
15458: LD_INT 107
15460: PUSH
15461: LD_INT 108
15463: PUSH
15464: LD_INT 109
15466: PUSH
15467: LD_INT 110
15469: PUSH
15470: LD_INT 111
15472: PUSH
15473: LD_INT 112
15475: PUSH
15476: LD_INT 113
15478: PUSH
15479: LD_INT 114
15481: PUSH
15482: LD_INT 115
15484: PUSH
15485: LD_INT 116
15487: PUSH
15488: LD_INT 117
15490: PUSH
15491: LD_INT 118
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: ST_TO_ADDR
// if result then
15518: LD_VAR 0 2
15522: IFFALSE 16308
// begin normal :=  ;
15524: LD_ADDR_VAR 0 5
15528: PUSH
15529: LD_STRING 
15531: ST_TO_ADDR
// hardcore :=  ;
15532: LD_ADDR_VAR 0 6
15536: PUSH
15537: LD_STRING 
15539: ST_TO_ADDR
// active :=  ;
15540: LD_ADDR_VAR 0 7
15544: PUSH
15545: LD_STRING 
15547: ST_TO_ADDR
// for i = 1 to normalCounter do
15548: LD_ADDR_VAR 0 8
15552: PUSH
15553: DOUBLE
15554: LD_INT 1
15556: DEC
15557: ST_TO_ADDR
15558: LD_EXP 45
15562: PUSH
15563: FOR_TO
15564: IFFALSE 15665
// begin tmp := 0 ;
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: LD_STRING 0
15573: ST_TO_ADDR
// if result [ 1 ] then
15574: LD_VAR 0 2
15578: PUSH
15579: LD_INT 1
15581: ARRAY
15582: IFFALSE 15647
// if result [ 1 ] [ 1 ] = i then
15584: LD_VAR 0 2
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PUSH
15593: LD_INT 1
15595: ARRAY
15596: PUSH
15597: LD_VAR 0 8
15601: EQUAL
15602: IFFALSE 15647
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15604: LD_ADDR_VAR 0 2
15608: PUSH
15609: LD_VAR 0 2
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: LD_VAR 0 2
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PPUSH
15626: LD_INT 1
15628: PPUSH
15629: CALL_OW 3
15633: PPUSH
15634: CALL_OW 1
15638: ST_TO_ADDR
// tmp := 1 ;
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_STRING 1
15646: ST_TO_ADDR
// end ; normal := normal & tmp ;
15647: LD_ADDR_VAR 0 5
15651: PUSH
15652: LD_VAR 0 5
15656: PUSH
15657: LD_VAR 0 3
15661: STR
15662: ST_TO_ADDR
// end ;
15663: GO 15563
15665: POP
15666: POP
// for i = 1 to hardcoreCounter do
15667: LD_ADDR_VAR 0 8
15671: PUSH
15672: DOUBLE
15673: LD_INT 1
15675: DEC
15676: ST_TO_ADDR
15677: LD_EXP 46
15681: PUSH
15682: FOR_TO
15683: IFFALSE 15788
// begin tmp := 0 ;
15685: LD_ADDR_VAR 0 3
15689: PUSH
15690: LD_STRING 0
15692: ST_TO_ADDR
// if result [ 2 ] then
15693: LD_VAR 0 2
15697: PUSH
15698: LD_INT 2
15700: ARRAY
15701: IFFALSE 15770
// if result [ 2 ] [ 1 ] = 100 + i then
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 2
15710: ARRAY
15711: PUSH
15712: LD_INT 1
15714: ARRAY
15715: PUSH
15716: LD_INT 100
15718: PUSH
15719: LD_VAR 0 8
15723: PLUS
15724: EQUAL
15725: IFFALSE 15770
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_VAR 0 2
15736: PPUSH
15737: LD_INT 2
15739: PPUSH
15740: LD_VAR 0 2
15744: PUSH
15745: LD_INT 2
15747: ARRAY
15748: PPUSH
15749: LD_INT 1
15751: PPUSH
15752: CALL_OW 3
15756: PPUSH
15757: CALL_OW 1
15761: ST_TO_ADDR
// tmp := 1 ;
15762: LD_ADDR_VAR 0 3
15766: PUSH
15767: LD_STRING 1
15769: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15770: LD_ADDR_VAR 0 6
15774: PUSH
15775: LD_VAR 0 6
15779: PUSH
15780: LD_VAR 0 3
15784: STR
15785: ST_TO_ADDR
// end ;
15786: GO 15682
15788: POP
15789: POP
// if isGameLoad then
15790: LD_VAR 0 1
15794: IFFALSE 16269
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15796: LD_ADDR_VAR 0 4
15800: PUSH
15801: LD_EXP 49
15805: PUSH
15806: LD_EXP 48
15810: PUSH
15811: LD_EXP 50
15815: PUSH
15816: LD_EXP 47
15820: PUSH
15821: LD_EXP 51
15825: PUSH
15826: LD_EXP 52
15830: PUSH
15831: LD_EXP 53
15835: PUSH
15836: LD_EXP 54
15840: PUSH
15841: LD_EXP 55
15845: PUSH
15846: LD_EXP 56
15850: PUSH
15851: LD_EXP 57
15855: PUSH
15856: LD_EXP 58
15860: PUSH
15861: LD_EXP 59
15865: PUSH
15866: LD_EXP 60
15870: PUSH
15871: LD_EXP 68
15875: PUSH
15876: LD_EXP 69
15880: PUSH
15881: LD_EXP 70
15885: PUSH
15886: LD_EXP 71
15890: PUSH
15891: LD_EXP 73
15895: PUSH
15896: LD_EXP 74
15900: PUSH
15901: LD_EXP 75
15905: PUSH
15906: LD_EXP 78
15910: PUSH
15911: LD_EXP 80
15915: PUSH
15916: LD_EXP 81
15920: PUSH
15921: LD_EXP 82
15925: PUSH
15926: LD_EXP 84
15930: PUSH
15931: LD_EXP 85
15935: PUSH
15936: LD_EXP 88
15940: PUSH
15941: LD_EXP 89
15945: PUSH
15946: LD_EXP 90
15950: PUSH
15951: LD_EXP 91
15955: PUSH
15956: LD_EXP 92
15960: PUSH
15961: LD_EXP 93
15965: PUSH
15966: LD_EXP 94
15970: PUSH
15971: LD_EXP 95
15975: PUSH
15976: LD_EXP 96
15980: PUSH
15981: LD_EXP 61
15985: PUSH
15986: LD_EXP 62
15990: PUSH
15991: LD_EXP 65
15995: PUSH
15996: LD_EXP 66
16000: PUSH
16001: LD_EXP 67
16005: PUSH
16006: LD_EXP 63
16010: PUSH
16011: LD_EXP 64
16015: PUSH
16016: LD_EXP 72
16020: PUSH
16021: LD_EXP 76
16025: PUSH
16026: LD_EXP 77
16030: PUSH
16031: LD_EXP 79
16035: PUSH
16036: LD_EXP 83
16040: PUSH
16041: LD_EXP 86
16045: PUSH
16046: LD_EXP 87
16050: PUSH
16051: LD_EXP 97
16055: PUSH
16056: LD_EXP 98
16060: PUSH
16061: LD_EXP 99
16065: PUSH
16066: LD_EXP 100
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: ST_TO_ADDR
// tmp :=  ;
16127: LD_ADDR_VAR 0 3
16131: PUSH
16132: LD_STRING 
16134: ST_TO_ADDR
// for i = 1 to normalCounter do
16135: LD_ADDR_VAR 0 8
16139: PUSH
16140: DOUBLE
16141: LD_INT 1
16143: DEC
16144: ST_TO_ADDR
16145: LD_EXP 45
16149: PUSH
16150: FOR_TO
16151: IFFALSE 16187
// begin if flags [ i ] then
16153: LD_VAR 0 4
16157: PUSH
16158: LD_VAR 0 8
16162: ARRAY
16163: IFFALSE 16185
// tmp := tmp & i & ; ;
16165: LD_ADDR_VAR 0 3
16169: PUSH
16170: LD_VAR 0 3
16174: PUSH
16175: LD_VAR 0 8
16179: STR
16180: PUSH
16181: LD_STRING ;
16183: STR
16184: ST_TO_ADDR
// end ;
16185: GO 16150
16187: POP
16188: POP
// for i = 1 to hardcoreCounter do
16189: LD_ADDR_VAR 0 8
16193: PUSH
16194: DOUBLE
16195: LD_INT 1
16197: DEC
16198: ST_TO_ADDR
16199: LD_EXP 46
16203: PUSH
16204: FOR_TO
16205: IFFALSE 16251
// begin if flags [ normalCounter + i ] then
16207: LD_VAR 0 4
16211: PUSH
16212: LD_EXP 45
16216: PUSH
16217: LD_VAR 0 8
16221: PLUS
16222: ARRAY
16223: IFFALSE 16249
// tmp := tmp & ( 100 + i ) & ; ;
16225: LD_ADDR_VAR 0 3
16229: PUSH
16230: LD_VAR 0 3
16234: PUSH
16235: LD_INT 100
16237: PUSH
16238: LD_VAR 0 8
16242: PLUS
16243: STR
16244: PUSH
16245: LD_STRING ;
16247: STR
16248: ST_TO_ADDR
// end ;
16249: GO 16204
16251: POP
16252: POP
// if tmp then
16253: LD_VAR 0 3
16257: IFFALSE 16269
// active := tmp ;
16259: LD_ADDR_VAR 0 7
16263: PUSH
16264: LD_VAR 0 3
16268: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16269: LD_STRING getStreamItemsFromMission("
16271: PUSH
16272: LD_VAR 0 5
16276: STR
16277: PUSH
16278: LD_STRING ","
16280: STR
16281: PUSH
16282: LD_VAR 0 6
16286: STR
16287: PUSH
16288: LD_STRING ","
16290: STR
16291: PUSH
16292: LD_VAR 0 7
16296: STR
16297: PUSH
16298: LD_STRING ")
16300: STR
16301: PPUSH
16302: CALL_OW 559
// end else
16306: GO 16315
// ToLua ( getStreamItemsFromMission("","","") ) ;
16308: LD_STRING getStreamItemsFromMission("","","")
16310: PPUSH
16311: CALL_OW 559
// end ;
16315: LD_VAR 0 2
16319: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16320: LD_EXP 44
16324: PUSH
16325: LD_EXP 49
16329: AND
16330: IFFALSE 16454
16332: GO 16334
16334: DISABLE
16335: LD_INT 0
16337: PPUSH
16338: PPUSH
// begin enable ;
16339: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16340: LD_ADDR_VAR 0 2
16344: PUSH
16345: LD_INT 22
16347: PUSH
16348: LD_OWVAR 2
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 2
16359: PUSH
16360: LD_INT 34
16362: PUSH
16363: LD_INT 7
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 34
16372: PUSH
16373: LD_INT 45
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 34
16382: PUSH
16383: LD_INT 28
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 34
16392: PUSH
16393: LD_INT 47
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PPUSH
16411: CALL_OW 69
16415: ST_TO_ADDR
// if not tmp then
16416: LD_VAR 0 2
16420: NOT
16421: IFFALSE 16425
// exit ;
16423: GO 16454
// for i in tmp do
16425: LD_ADDR_VAR 0 1
16429: PUSH
16430: LD_VAR 0 2
16434: PUSH
16435: FOR_IN
16436: IFFALSE 16452
// begin SetLives ( i , 0 ) ;
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_INT 0
16445: PPUSH
16446: CALL_OW 234
// end ;
16450: GO 16435
16452: POP
16453: POP
// end ;
16454: PPOPN 2
16456: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16457: LD_EXP 44
16461: PUSH
16462: LD_EXP 50
16466: AND
16467: IFFALSE 16551
16469: GO 16471
16471: DISABLE
16472: LD_INT 0
16474: PPUSH
16475: PPUSH
// begin enable ;
16476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16477: LD_ADDR_VAR 0 2
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_OWVAR 2
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 32
16496: PUSH
16497: LD_INT 3
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: ST_TO_ADDR
// if not tmp then
16513: LD_VAR 0 2
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 16551
// for i in tmp do
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 2
16531: PUSH
16532: FOR_IN
16533: IFFALSE 16549
// begin SetLives ( i , 0 ) ;
16535: LD_VAR 0 1
16539: PPUSH
16540: LD_INT 0
16542: PPUSH
16543: CALL_OW 234
// end ;
16547: GO 16532
16549: POP
16550: POP
// end ;
16551: PPOPN 2
16553: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16554: LD_EXP 44
16558: PUSH
16559: LD_EXP 47
16563: AND
16564: IFFALSE 16657
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
// begin enable ;
16572: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16573: LD_ADDR_VAR 0 1
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: LD_INT 25
16595: PUSH
16596: LD_INT 5
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 25
16605: PUSH
16606: LD_INT 9
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 25
16615: PUSH
16616: LD_INT 8
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PPUSH
16633: CALL_OW 69
16637: PUSH
16638: FOR_IN
16639: IFFALSE 16655
// begin SetClass ( i , 1 ) ;
16641: LD_VAR 0 1
16645: PPUSH
16646: LD_INT 1
16648: PPUSH
16649: CALL_OW 336
// end ;
16653: GO 16638
16655: POP
16656: POP
// end ;
16657: PPOPN 1
16659: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16660: LD_EXP 44
16664: PUSH
16665: LD_EXP 48
16669: AND
16670: PUSH
16671: LD_OWVAR 65
16675: PUSH
16676: LD_INT 7
16678: LESS
16679: AND
16680: IFFALSE 16694
16682: GO 16684
16684: DISABLE
// begin enable ;
16685: ENABLE
// game_speed := 7 ;
16686: LD_ADDR_OWVAR 65
16690: PUSH
16691: LD_INT 7
16693: ST_TO_ADDR
// end ;
16694: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16695: LD_EXP 44
16699: PUSH
16700: LD_EXP 51
16704: AND
16705: IFFALSE 16907
16707: GO 16709
16709: DISABLE
16710: LD_INT 0
16712: PPUSH
16713: PPUSH
16714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16715: LD_ADDR_VAR 0 3
16719: PUSH
16720: LD_INT 81
16722: PUSH
16723: LD_OWVAR 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 21
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PPUSH
16746: CALL_OW 69
16750: ST_TO_ADDR
// if not tmp then
16751: LD_VAR 0 3
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16907
// if tmp > 5 then
16760: LD_VAR 0 3
16764: PUSH
16765: LD_INT 5
16767: GREATER
16768: IFFALSE 16780
// k := 5 else
16770: LD_ADDR_VAR 0 2
16774: PUSH
16775: LD_INT 5
16777: ST_TO_ADDR
16778: GO 16790
// k := tmp ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_VAR 0 3
16789: ST_TO_ADDR
// for i := 1 to k do
16790: LD_ADDR_VAR 0 1
16794: PUSH
16795: DOUBLE
16796: LD_INT 1
16798: DEC
16799: ST_TO_ADDR
16800: LD_VAR 0 2
16804: PUSH
16805: FOR_TO
16806: IFFALSE 16905
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16808: LD_VAR 0 3
16812: PUSH
16813: LD_VAR 0 1
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 1
16823: PUSH
16824: LD_INT 4
16826: MOD
16827: PUSH
16828: LD_INT 1
16830: PLUS
16831: PPUSH
16832: CALL_OW 259
16836: PUSH
16837: LD_INT 10
16839: LESS
16840: IFFALSE 16903
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16842: LD_VAR 0 3
16846: PUSH
16847: LD_VAR 0 1
16851: ARRAY
16852: PPUSH
16853: LD_VAR 0 1
16857: PUSH
16858: LD_INT 4
16860: MOD
16861: PUSH
16862: LD_INT 1
16864: PLUS
16865: PPUSH
16866: LD_VAR 0 3
16870: PUSH
16871: LD_VAR 0 1
16875: ARRAY
16876: PPUSH
16877: LD_VAR 0 1
16881: PUSH
16882: LD_INT 4
16884: MOD
16885: PUSH
16886: LD_INT 1
16888: PLUS
16889: PPUSH
16890: CALL_OW 259
16894: PUSH
16895: LD_INT 1
16897: PLUS
16898: PPUSH
16899: CALL_OW 237
16903: GO 16805
16905: POP
16906: POP
// end ;
16907: PPOPN 3
16909: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16910: LD_EXP 44
16914: PUSH
16915: LD_EXP 52
16919: AND
16920: IFFALSE 16940
16922: GO 16924
16924: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16925: LD_INT 4
16927: PPUSH
16928: LD_OWVAR 2
16932: PPUSH
16933: LD_INT 0
16935: PPUSH
16936: CALL_OW 324
16940: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16941: LD_EXP 44
16945: PUSH
16946: LD_EXP 81
16950: AND
16951: IFFALSE 16971
16953: GO 16955
16955: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16956: LD_INT 19
16958: PPUSH
16959: LD_OWVAR 2
16963: PPUSH
16964: LD_INT 0
16966: PPUSH
16967: CALL_OW 324
16971: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16972: LD_EXP 44
16976: PUSH
16977: LD_EXP 53
16981: AND
16982: IFFALSE 17084
16984: GO 16986
16986: DISABLE
16987: LD_INT 0
16989: PPUSH
16990: PPUSH
// begin enable ;
16991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16992: LD_ADDR_VAR 0 2
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_OWVAR 2
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 34
17014: PUSH
17015: LD_INT 11
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 34
17024: PUSH
17025: LD_INT 30
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PPUSH
17041: CALL_OW 69
17045: ST_TO_ADDR
// if not tmp then
17046: LD_VAR 0 2
17050: NOT
17051: IFFALSE 17055
// exit ;
17053: GO 17084
// for i in tmp do
17055: LD_ADDR_VAR 0 1
17059: PUSH
17060: LD_VAR 0 2
17064: PUSH
17065: FOR_IN
17066: IFFALSE 17082
// begin SetLives ( i , 0 ) ;
17068: LD_VAR 0 1
17072: PPUSH
17073: LD_INT 0
17075: PPUSH
17076: CALL_OW 234
// end ;
17080: GO 17065
17082: POP
17083: POP
// end ;
17084: PPOPN 2
17086: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17087: LD_EXP 44
17091: PUSH
17092: LD_EXP 54
17096: AND
17097: IFFALSE 17117
17099: GO 17101
17101: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17102: LD_INT 32
17104: PPUSH
17105: LD_OWVAR 2
17109: PPUSH
17110: LD_INT 0
17112: PPUSH
17113: CALL_OW 324
17117: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17118: LD_EXP 44
17122: PUSH
17123: LD_EXP 55
17127: AND
17128: IFFALSE 17309
17130: GO 17132
17132: DISABLE
17133: LD_INT 0
17135: PPUSH
17136: PPUSH
17137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17138: LD_ADDR_VAR 0 2
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_OWVAR 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 33
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PPUSH
17169: CALL_OW 69
17173: ST_TO_ADDR
// if not tmp then
17174: LD_VAR 0 2
17178: NOT
17179: IFFALSE 17183
// exit ;
17181: GO 17309
// side := 0 ;
17183: LD_ADDR_VAR 0 3
17187: PUSH
17188: LD_INT 0
17190: ST_TO_ADDR
// for i := 1 to 8 do
17191: LD_ADDR_VAR 0 1
17195: PUSH
17196: DOUBLE
17197: LD_INT 1
17199: DEC
17200: ST_TO_ADDR
17201: LD_INT 8
17203: PUSH
17204: FOR_TO
17205: IFFALSE 17253
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17207: LD_OWVAR 2
17211: PUSH
17212: LD_VAR 0 1
17216: NONEQUAL
17217: PUSH
17218: LD_OWVAR 2
17222: PPUSH
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 81
17232: PUSH
17233: LD_INT 2
17235: EQUAL
17236: AND
17237: IFFALSE 17251
// begin side := i ;
17239: LD_ADDR_VAR 0 3
17243: PUSH
17244: LD_VAR 0 1
17248: ST_TO_ADDR
// break ;
17249: GO 17253
// end ;
17251: GO 17204
17253: POP
17254: POP
// if not side then
17255: LD_VAR 0 3
17259: NOT
17260: IFFALSE 17264
// exit ;
17262: GO 17309
// for i := 1 to tmp do
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: DOUBLE
17270: LD_INT 1
17272: DEC
17273: ST_TO_ADDR
17274: LD_VAR 0 2
17278: PUSH
17279: FOR_TO
17280: IFFALSE 17307
// if Prob ( 60 ) then
17282: LD_INT 60
17284: PPUSH
17285: CALL_OW 13
17289: IFFALSE 17305
// SetSide ( i , side ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: CALL_OW 235
17305: GO 17279
17307: POP
17308: POP
// end ;
17309: PPOPN 3
17311: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17312: LD_EXP 44
17316: PUSH
17317: LD_EXP 57
17321: AND
17322: IFFALSE 17441
17324: GO 17326
17326: DISABLE
17327: LD_INT 0
17329: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17330: LD_ADDR_VAR 0 1
17334: PUSH
17335: LD_INT 22
17337: PUSH
17338: LD_OWVAR 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 21
17349: PUSH
17350: LD_INT 1
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 3
17359: PUSH
17360: LD_INT 23
17362: PUSH
17363: LD_INT 0
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: PUSH
17384: FOR_IN
17385: IFFALSE 17439
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17387: LD_VAR 0 1
17391: PPUSH
17392: CALL_OW 257
17396: PUSH
17397: LD_INT 1
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: LD_INT 3
17405: PUSH
17406: LD_INT 4
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: IN
17415: IFFALSE 17437
// SetClass ( un , rand ( 1 , 4 ) ) ;
17417: LD_VAR 0 1
17421: PPUSH
17422: LD_INT 1
17424: PPUSH
17425: LD_INT 4
17427: PPUSH
17428: CALL_OW 12
17432: PPUSH
17433: CALL_OW 336
17437: GO 17384
17439: POP
17440: POP
// end ;
17441: PPOPN 1
17443: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17444: LD_EXP 44
17448: PUSH
17449: LD_EXP 56
17453: AND
17454: IFFALSE 17533
17456: GO 17458
17458: DISABLE
17459: LD_INT 0
17461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17462: LD_ADDR_VAR 0 1
17466: PUSH
17467: LD_INT 22
17469: PUSH
17470: LD_OWVAR 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 21
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 69
17497: ST_TO_ADDR
// if not tmp then
17498: LD_VAR 0 1
17502: NOT
17503: IFFALSE 17507
// exit ;
17505: GO 17533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17507: LD_VAR 0 1
17511: PUSH
17512: LD_INT 1
17514: PPUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 12
17524: ARRAY
17525: PPUSH
17526: LD_INT 100
17528: PPUSH
17529: CALL_OW 234
// end ;
17533: PPOPN 1
17535: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17536: LD_EXP 44
17540: PUSH
17541: LD_EXP 58
17545: AND
17546: IFFALSE 17644
17548: GO 17550
17550: DISABLE
17551: LD_INT 0
17553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17554: LD_ADDR_VAR 0 1
17558: PUSH
17559: LD_INT 22
17561: PUSH
17562: LD_OWVAR 2
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 21
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PPUSH
17585: CALL_OW 69
17589: ST_TO_ADDR
// if not tmp then
17590: LD_VAR 0 1
17594: NOT
17595: IFFALSE 17599
// exit ;
17597: GO 17644
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17599: LD_VAR 0 1
17603: PUSH
17604: LD_INT 1
17606: PPUSH
17607: LD_VAR 0 1
17611: PPUSH
17612: CALL_OW 12
17616: ARRAY
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_INT 4
17623: PPUSH
17624: CALL_OW 12
17628: PPUSH
17629: LD_INT 3000
17631: PPUSH
17632: LD_INT 9000
17634: PPUSH
17635: CALL_OW 12
17639: PPUSH
17640: CALL_OW 492
// end ;
17644: PPOPN 1
17646: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17647: LD_EXP 44
17651: PUSH
17652: LD_EXP 59
17656: AND
17657: IFFALSE 17677
17659: GO 17661
17661: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17662: LD_INT 1
17664: PPUSH
17665: LD_OWVAR 2
17669: PPUSH
17670: LD_INT 0
17672: PPUSH
17673: CALL_OW 324
17677: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17678: LD_EXP 44
17682: PUSH
17683: LD_EXP 60
17687: AND
17688: IFFALSE 17771
17690: GO 17692
17692: DISABLE
17693: LD_INT 0
17695: PPUSH
17696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17697: LD_ADDR_VAR 0 2
17701: PUSH
17702: LD_INT 22
17704: PUSH
17705: LD_OWVAR 2
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 21
17716: PUSH
17717: LD_INT 3
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PPUSH
17728: CALL_OW 69
17732: ST_TO_ADDR
// if not tmp then
17733: LD_VAR 0 2
17737: NOT
17738: IFFALSE 17742
// exit ;
17740: GO 17771
// for i in tmp do
17742: LD_ADDR_VAR 0 1
17746: PUSH
17747: LD_VAR 0 2
17751: PUSH
17752: FOR_IN
17753: IFFALSE 17769
// SetBLevel ( i , 10 ) ;
17755: LD_VAR 0 1
17759: PPUSH
17760: LD_INT 10
17762: PPUSH
17763: CALL_OW 241
17767: GO 17752
17769: POP
17770: POP
// end ;
17771: PPOPN 2
17773: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17774: LD_EXP 44
17778: PUSH
17779: LD_EXP 61
17783: AND
17784: IFFALSE 17895
17786: GO 17788
17788: DISABLE
17789: LD_INT 0
17791: PPUSH
17792: PPUSH
17793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_INT 22
17801: PUSH
17802: LD_OWVAR 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 25
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: ST_TO_ADDR
// if not tmp then
17830: LD_VAR 0 3
17834: NOT
17835: IFFALSE 17839
// exit ;
17837: GO 17895
// un := tmp [ rand ( 1 , tmp ) ] ;
17839: LD_ADDR_VAR 0 2
17843: PUSH
17844: LD_VAR 0 3
17848: PUSH
17849: LD_INT 1
17851: PPUSH
17852: LD_VAR 0 3
17856: PPUSH
17857: CALL_OW 12
17861: ARRAY
17862: ST_TO_ADDR
// if Crawls ( un ) then
17863: LD_VAR 0 2
17867: PPUSH
17868: CALL_OW 318
17872: IFFALSE 17883
// ComWalk ( un ) ;
17874: LD_VAR 0 2
17878: PPUSH
17879: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17883: LD_VAR 0 2
17887: PPUSH
17888: LD_INT 5
17890: PPUSH
17891: CALL_OW 336
// end ;
17895: PPOPN 3
17897: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17898: LD_EXP 44
17902: PUSH
17903: LD_EXP 62
17907: AND
17908: PUSH
17909: LD_OWVAR 67
17913: PUSH
17914: LD_INT 4
17916: LESS
17917: AND
17918: IFFALSE 17937
17920: GO 17922
17922: DISABLE
// begin Difficulty := Difficulty + 1 ;
17923: LD_ADDR_OWVAR 67
17927: PUSH
17928: LD_OWVAR 67
17932: PUSH
17933: LD_INT 1
17935: PLUS
17936: ST_TO_ADDR
// end ;
17937: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17938: LD_EXP 44
17942: PUSH
17943: LD_EXP 63
17947: AND
17948: IFFALSE 18051
17950: GO 17952
17952: DISABLE
17953: LD_INT 0
17955: PPUSH
// begin for i := 1 to 5 do
17956: LD_ADDR_VAR 0 1
17960: PUSH
17961: DOUBLE
17962: LD_INT 1
17964: DEC
17965: ST_TO_ADDR
17966: LD_INT 5
17968: PUSH
17969: FOR_TO
17970: IFFALSE 18049
// begin uc_nation := nation_nature ;
17972: LD_ADDR_OWVAR 21
17976: PUSH
17977: LD_INT 0
17979: ST_TO_ADDR
// uc_side := 0 ;
17980: LD_ADDR_OWVAR 20
17984: PUSH
17985: LD_INT 0
17987: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17988: LD_ADDR_OWVAR 29
17992: PUSH
17993: LD_INT 12
17995: PUSH
17996: LD_INT 12
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: ST_TO_ADDR
// hc_agressivity := 20 ;
18003: LD_ADDR_OWVAR 35
18007: PUSH
18008: LD_INT 20
18010: ST_TO_ADDR
// hc_class := class_tiger ;
18011: LD_ADDR_OWVAR 28
18015: PUSH
18016: LD_INT 14
18018: ST_TO_ADDR
// hc_gallery :=  ;
18019: LD_ADDR_OWVAR 33
18023: PUSH
18024: LD_STRING 
18026: ST_TO_ADDR
// hc_name :=  ;
18027: LD_ADDR_OWVAR 26
18031: PUSH
18032: LD_STRING 
18034: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18035: CALL_OW 44
18039: PPUSH
18040: LD_INT 0
18042: PPUSH
18043: CALL_OW 51
// end ;
18047: GO 17969
18049: POP
18050: POP
// end ;
18051: PPOPN 1
18053: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18054: LD_EXP 44
18058: PUSH
18059: LD_EXP 64
18063: AND
18064: IFFALSE 18073
18066: GO 18068
18068: DISABLE
// StreamSibBomb ;
18069: CALL 18074 0 0
18073: END
// export function StreamSibBomb ; var i , x , y ; begin
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
18078: PPUSH
18079: PPUSH
// result := false ;
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// for i := 1 to 16 do
18088: LD_ADDR_VAR 0 2
18092: PUSH
18093: DOUBLE
18094: LD_INT 1
18096: DEC
18097: ST_TO_ADDR
18098: LD_INT 16
18100: PUSH
18101: FOR_TO
18102: IFFALSE 18301
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18104: LD_ADDR_VAR 0 3
18108: PUSH
18109: LD_INT 10
18111: PUSH
18112: LD_INT 20
18114: PUSH
18115: LD_INT 30
18117: PUSH
18118: LD_INT 40
18120: PUSH
18121: LD_INT 50
18123: PUSH
18124: LD_INT 60
18126: PUSH
18127: LD_INT 70
18129: PUSH
18130: LD_INT 80
18132: PUSH
18133: LD_INT 90
18135: PUSH
18136: LD_INT 100
18138: PUSH
18139: LD_INT 110
18141: PUSH
18142: LD_INT 120
18144: PUSH
18145: LD_INT 130
18147: PUSH
18148: LD_INT 140
18150: PUSH
18151: LD_INT 150
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 1
18173: PPUSH
18174: LD_INT 15
18176: PPUSH
18177: CALL_OW 12
18181: ARRAY
18182: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18183: LD_ADDR_VAR 0 4
18187: PUSH
18188: LD_INT 10
18190: PUSH
18191: LD_INT 20
18193: PUSH
18194: LD_INT 30
18196: PUSH
18197: LD_INT 40
18199: PUSH
18200: LD_INT 50
18202: PUSH
18203: LD_INT 60
18205: PUSH
18206: LD_INT 70
18208: PUSH
18209: LD_INT 80
18211: PUSH
18212: LD_INT 90
18214: PUSH
18215: LD_INT 100
18217: PUSH
18218: LD_INT 110
18220: PUSH
18221: LD_INT 120
18223: PUSH
18224: LD_INT 130
18226: PUSH
18227: LD_INT 140
18229: PUSH
18230: LD_INT 150
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: PPUSH
18253: LD_INT 15
18255: PPUSH
18256: CALL_OW 12
18260: ARRAY
18261: ST_TO_ADDR
// if ValidHex ( x , y ) then
18262: LD_VAR 0 3
18266: PPUSH
18267: LD_VAR 0 4
18271: PPUSH
18272: CALL_OW 488
18276: IFFALSE 18299
// begin result := [ x , y ] ;
18278: LD_ADDR_VAR 0 1
18282: PUSH
18283: LD_VAR 0 3
18287: PUSH
18288: LD_VAR 0 4
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: ST_TO_ADDR
// break ;
18297: GO 18301
// end ; end ;
18299: GO 18101
18301: POP
18302: POP
// if result then
18303: LD_VAR 0 1
18307: IFFALSE 18367
// begin ToLua ( playSibBomb() ) ;
18309: LD_STRING playSibBomb()
18311: PPUSH
18312: CALL_OW 559
// wait ( 0 0$14 ) ;
18316: LD_INT 490
18318: PPUSH
18319: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18323: LD_VAR 0 1
18327: PUSH
18328: LD_INT 1
18330: ARRAY
18331: PPUSH
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 2
18339: ARRAY
18340: PPUSH
18341: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18345: LD_VAR 0 1
18349: PUSH
18350: LD_INT 1
18352: ARRAY
18353: PPUSH
18354: LD_VAR 0 1
18358: PUSH
18359: LD_INT 2
18361: ARRAY
18362: PPUSH
18363: CALL_OW 429
// end ; end ;
18367: LD_VAR 0 1
18371: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18372: LD_EXP 44
18376: PUSH
18377: LD_EXP 66
18381: AND
18382: IFFALSE 18394
18384: GO 18386
18386: DISABLE
// YouLost (  ) ;
18387: LD_STRING 
18389: PPUSH
18390: CALL_OW 104
18394: END
// every 0 0$1 trigger StreamModeActive and sFog do
18395: LD_EXP 44
18399: PUSH
18400: LD_EXP 65
18404: AND
18405: IFFALSE 18419
18407: GO 18409
18409: DISABLE
// FogOff ( your_side ) ;
18410: LD_OWVAR 2
18414: PPUSH
18415: CALL_OW 344
18419: END
// every 0 0$1 trigger StreamModeActive and sSun do
18420: LD_EXP 44
18424: PUSH
18425: LD_EXP 67
18429: AND
18430: IFFALSE 18458
18432: GO 18434
18434: DISABLE
// begin solar_recharge_percent := 0 ;
18435: LD_ADDR_OWVAR 79
18439: PUSH
18440: LD_INT 0
18442: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18443: LD_INT 10500
18445: PPUSH
18446: CALL_OW 67
// solar_recharge_percent := 100 ;
18450: LD_ADDR_OWVAR 79
18454: PUSH
18455: LD_INT 100
18457: ST_TO_ADDR
// end ;
18458: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18459: LD_EXP 44
18463: PUSH
18464: LD_EXP 68
18468: AND
18469: IFFALSE 18708
18471: GO 18473
18473: DISABLE
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
// begin tmp := [ ] ;
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: EMPTY
18485: ST_TO_ADDR
// for i := 1 to 6 do
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: DOUBLE
18492: LD_INT 1
18494: DEC
18495: ST_TO_ADDR
18496: LD_INT 6
18498: PUSH
18499: FOR_TO
18500: IFFALSE 18605
// begin uc_nation := nation_nature ;
18502: LD_ADDR_OWVAR 21
18506: PUSH
18507: LD_INT 0
18509: ST_TO_ADDR
// uc_side := 0 ;
18510: LD_ADDR_OWVAR 20
18514: PUSH
18515: LD_INT 0
18517: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18518: LD_ADDR_OWVAR 29
18522: PUSH
18523: LD_INT 12
18525: PUSH
18526: LD_INT 12
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: ST_TO_ADDR
// hc_agressivity := 20 ;
18533: LD_ADDR_OWVAR 35
18537: PUSH
18538: LD_INT 20
18540: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18541: LD_ADDR_OWVAR 28
18545: PUSH
18546: LD_INT 17
18548: ST_TO_ADDR
// hc_gallery :=  ;
18549: LD_ADDR_OWVAR 33
18553: PUSH
18554: LD_STRING 
18556: ST_TO_ADDR
// hc_name :=  ;
18557: LD_ADDR_OWVAR 26
18561: PUSH
18562: LD_STRING 
18564: ST_TO_ADDR
// un := CreateHuman ;
18565: LD_ADDR_VAR 0 2
18569: PUSH
18570: CALL_OW 44
18574: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18575: LD_VAR 0 2
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 51
// tmp := tmp ^ un ;
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_VAR 0 3
18596: PUSH
18597: LD_VAR 0 2
18601: ADD
18602: ST_TO_ADDR
// end ;
18603: GO 18499
18605: POP
18606: POP
// repeat wait ( 0 0$1 ) ;
18607: LD_INT 35
18609: PPUSH
18610: CALL_OW 67
// for un in tmp do
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_VAR 0 3
18623: PUSH
18624: FOR_IN
18625: IFFALSE 18699
// begin if IsDead ( un ) then
18627: LD_VAR 0 2
18631: PPUSH
18632: CALL_OW 301
18636: IFFALSE 18656
// begin tmp := tmp diff un ;
18638: LD_ADDR_VAR 0 3
18642: PUSH
18643: LD_VAR 0 3
18647: PUSH
18648: LD_VAR 0 2
18652: DIFF
18653: ST_TO_ADDR
// continue ;
18654: GO 18624
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18656: LD_VAR 0 2
18660: PPUSH
18661: LD_INT 3
18663: PUSH
18664: LD_INT 22
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 69
18682: PPUSH
18683: LD_VAR 0 2
18687: PPUSH
18688: CALL_OW 74
18692: PPUSH
18693: CALL_OW 115
// end ;
18697: GO 18624
18699: POP
18700: POP
// until not tmp ;
18701: LD_VAR 0 3
18705: NOT
18706: IFFALSE 18607
// end ;
18708: PPOPN 3
18710: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18711: LD_EXP 44
18715: PUSH
18716: LD_EXP 69
18720: AND
18721: IFFALSE 18775
18723: GO 18725
18725: DISABLE
// begin ToLua ( displayTroll(); ) ;
18726: LD_STRING displayTroll();
18728: PPUSH
18729: CALL_OW 559
// wait ( 3 3$00 ) ;
18733: LD_INT 6300
18735: PPUSH
18736: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18740: LD_STRING hideTroll();
18742: PPUSH
18743: CALL_OW 559
// wait ( 1 1$00 ) ;
18747: LD_INT 2100
18749: PPUSH
18750: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18754: LD_STRING displayTroll();
18756: PPUSH
18757: CALL_OW 559
// wait ( 1 1$00 ) ;
18761: LD_INT 2100
18763: PPUSH
18764: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18768: LD_STRING hideTroll();
18770: PPUSH
18771: CALL_OW 559
// end ;
18775: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18776: LD_EXP 44
18780: PUSH
18781: LD_EXP 70
18785: AND
18786: IFFALSE 18849
18788: GO 18790
18790: DISABLE
18791: LD_INT 0
18793: PPUSH
// begin p := 0 ;
18794: LD_ADDR_VAR 0 1
18798: PUSH
18799: LD_INT 0
18801: ST_TO_ADDR
// repeat game_speed := 1 ;
18802: LD_ADDR_OWVAR 65
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18810: LD_INT 35
18812: PPUSH
18813: CALL_OW 67
// p := p + 1 ;
18817: LD_ADDR_VAR 0 1
18821: PUSH
18822: LD_VAR 0 1
18826: PUSH
18827: LD_INT 1
18829: PLUS
18830: ST_TO_ADDR
// until p >= 60 ;
18831: LD_VAR 0 1
18835: PUSH
18836: LD_INT 60
18838: GREATEREQUAL
18839: IFFALSE 18802
// game_speed := 4 ;
18841: LD_ADDR_OWVAR 65
18845: PUSH
18846: LD_INT 4
18848: ST_TO_ADDR
// end ;
18849: PPOPN 1
18851: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18852: LD_EXP 44
18856: PUSH
18857: LD_EXP 71
18861: AND
18862: IFFALSE 19008
18864: GO 18866
18866: DISABLE
18867: LD_INT 0
18869: PPUSH
18870: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18871: LD_ADDR_VAR 0 1
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_OWVAR 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: LD_INT 30
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 30
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: ST_TO_ADDR
// if not depot then
18925: LD_VAR 0 1
18929: NOT
18930: IFFALSE 18934
// exit ;
18932: GO 19008
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18934: LD_ADDR_VAR 0 2
18938: PUSH
18939: LD_VAR 0 1
18943: PUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 12
18956: ARRAY
18957: PPUSH
18958: CALL_OW 274
18962: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18963: LD_VAR 0 2
18967: PPUSH
18968: LD_INT 1
18970: PPUSH
18971: LD_INT 0
18973: PPUSH
18974: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18978: LD_VAR 0 2
18982: PPUSH
18983: LD_INT 2
18985: PPUSH
18986: LD_INT 0
18988: PPUSH
18989: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_INT 3
19000: PPUSH
19001: LD_INT 0
19003: PPUSH
19004: CALL_OW 277
// end ;
19008: PPOPN 2
19010: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19011: LD_EXP 44
19015: PUSH
19016: LD_EXP 72
19020: AND
19021: IFFALSE 19118
19023: GO 19025
19025: DISABLE
19026: LD_INT 0
19028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19029: LD_ADDR_VAR 0 1
19033: PUSH
19034: LD_INT 22
19036: PUSH
19037: LD_OWVAR 2
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 21
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: LD_INT 23
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: PPUSH
19078: CALL_OW 69
19082: ST_TO_ADDR
// if not tmp then
19083: LD_VAR 0 1
19087: NOT
19088: IFFALSE 19092
// exit ;
19090: GO 19118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19092: LD_VAR 0 1
19096: PUSH
19097: LD_INT 1
19099: PPUSH
19100: LD_VAR 0 1
19104: PPUSH
19105: CALL_OW 12
19109: ARRAY
19110: PPUSH
19111: LD_INT 200
19113: PPUSH
19114: CALL_OW 234
// end ;
19118: PPOPN 1
19120: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19121: LD_EXP 44
19125: PUSH
19126: LD_EXP 73
19130: AND
19131: IFFALSE 19210
19133: GO 19135
19135: DISABLE
19136: LD_INT 0
19138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19139: LD_ADDR_VAR 0 1
19143: PUSH
19144: LD_INT 22
19146: PUSH
19147: LD_OWVAR 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 21
19158: PUSH
19159: LD_INT 2
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 69
19174: ST_TO_ADDR
// if not tmp then
19175: LD_VAR 0 1
19179: NOT
19180: IFFALSE 19184
// exit ;
19182: GO 19210
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19184: LD_VAR 0 1
19188: PUSH
19189: LD_INT 1
19191: PPUSH
19192: LD_VAR 0 1
19196: PPUSH
19197: CALL_OW 12
19201: ARRAY
19202: PPUSH
19203: LD_INT 60
19205: PPUSH
19206: CALL_OW 234
// end ;
19210: PPOPN 1
19212: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19213: LD_EXP 44
19217: PUSH
19218: LD_EXP 74
19222: AND
19223: IFFALSE 19322
19225: GO 19227
19227: DISABLE
19228: LD_INT 0
19230: PPUSH
19231: PPUSH
// begin enable ;
19232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19233: LD_ADDR_VAR 0 1
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 61
19252: PUSH
19253: EMPTY
19254: LIST
19255: PUSH
19256: LD_INT 33
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 69
19275: ST_TO_ADDR
// if not tmp then
19276: LD_VAR 0 1
19280: NOT
19281: IFFALSE 19285
// exit ;
19283: GO 19322
// for i in tmp do
19285: LD_ADDR_VAR 0 2
19289: PUSH
19290: LD_VAR 0 1
19294: PUSH
19295: FOR_IN
19296: IFFALSE 19320
// if IsControledBy ( i ) then
19298: LD_VAR 0 2
19302: PPUSH
19303: CALL_OW 312
19307: IFFALSE 19318
// ComUnlink ( i ) ;
19309: LD_VAR 0 2
19313: PPUSH
19314: CALL_OW 136
19318: GO 19295
19320: POP
19321: POP
// end ;
19322: PPOPN 2
19324: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19325: LD_EXP 44
19329: PUSH
19330: LD_EXP 75
19334: AND
19335: IFFALSE 19475
19337: GO 19339
19339: DISABLE
19340: LD_INT 0
19342: PPUSH
19343: PPUSH
// begin ToLua ( displayPowell(); ) ;
19344: LD_STRING displayPowell();
19346: PPUSH
19347: CALL_OW 559
// uc_side := 0 ;
19351: LD_ADDR_OWVAR 20
19355: PUSH
19356: LD_INT 0
19358: ST_TO_ADDR
// uc_nation := 2 ;
19359: LD_ADDR_OWVAR 21
19363: PUSH
19364: LD_INT 2
19366: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19367: LD_ADDR_OWVAR 37
19371: PUSH
19372: LD_INT 14
19374: ST_TO_ADDR
// vc_engine := engine_siberite ;
19375: LD_ADDR_OWVAR 39
19379: PUSH
19380: LD_INT 3
19382: ST_TO_ADDR
// vc_control := control_apeman ;
19383: LD_ADDR_OWVAR 38
19387: PUSH
19388: LD_INT 5
19390: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19391: LD_ADDR_OWVAR 40
19395: PUSH
19396: LD_INT 29
19398: ST_TO_ADDR
// un := CreateVehicle ;
19399: LD_ADDR_VAR 0 2
19403: PUSH
19404: CALL_OW 45
19408: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19409: LD_VAR 0 2
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19421: LD_INT 35
19423: PPUSH
19424: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19428: LD_VAR 0 2
19432: PPUSH
19433: LD_INT 22
19435: PUSH
19436: LD_OWVAR 2
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PPUSH
19445: CALL_OW 69
19449: PPUSH
19450: LD_VAR 0 2
19454: PPUSH
19455: CALL_OW 74
19459: PPUSH
19460: CALL_OW 115
// until IsDead ( un ) ;
19464: LD_VAR 0 2
19468: PPUSH
19469: CALL_OW 301
19473: IFFALSE 19421
// end ;
19475: PPOPN 2
19477: END
// every 0 0$1 trigger StreamModeActive and sStu do
19478: LD_EXP 44
19482: PUSH
19483: LD_EXP 83
19487: AND
19488: IFFALSE 19504
19490: GO 19492
19492: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19493: LD_STRING displayStucuk();
19495: PPUSH
19496: CALL_OW 559
// ResetFog ;
19500: CALL_OW 335
// end ;
19504: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19505: LD_EXP 44
19509: PUSH
19510: LD_EXP 76
19514: AND
19515: IFFALSE 19656
19517: GO 19519
19519: DISABLE
19520: LD_INT 0
19522: PPUSH
19523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19524: LD_ADDR_VAR 0 2
19528: PUSH
19529: LD_INT 22
19531: PUSH
19532: LD_OWVAR 2
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 21
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 69
19559: ST_TO_ADDR
// if not tmp then
19560: LD_VAR 0 2
19564: NOT
19565: IFFALSE 19569
// exit ;
19567: GO 19656
// un := tmp [ rand ( 1 , tmp ) ] ;
19569: LD_ADDR_VAR 0 1
19573: PUSH
19574: LD_VAR 0 2
19578: PUSH
19579: LD_INT 1
19581: PPUSH
19582: LD_VAR 0 2
19586: PPUSH
19587: CALL_OW 12
19591: ARRAY
19592: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19593: LD_VAR 0 1
19597: PPUSH
19598: LD_INT 0
19600: PPUSH
19601: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19605: LD_VAR 0 1
19609: PPUSH
19610: LD_OWVAR 3
19614: PUSH
19615: LD_VAR 0 1
19619: DIFF
19620: PPUSH
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL_OW 74
19630: PPUSH
19631: CALL_OW 115
// wait ( 0 0$20 ) ;
19635: LD_INT 700
19637: PPUSH
19638: CALL_OW 67
// SetSide ( un , your_side ) ;
19642: LD_VAR 0 1
19646: PPUSH
19647: LD_OWVAR 2
19651: PPUSH
19652: CALL_OW 235
// end ;
19656: PPOPN 2
19658: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19659: LD_EXP 44
19663: PUSH
19664: LD_EXP 77
19668: AND
19669: IFFALSE 19775
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: LD_INT 22
19684: PUSH
19685: LD_OWVAR 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: LD_INT 30
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 30
19709: PUSH
19710: LD_INT 1
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: ST_TO_ADDR
// if not depot then
19731: LD_VAR 0 1
19735: NOT
19736: IFFALSE 19740
// exit ;
19738: GO 19775
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19740: LD_VAR 0 1
19744: PUSH
19745: LD_INT 1
19747: ARRAY
19748: PPUSH
19749: CALL_OW 250
19753: PPUSH
19754: LD_VAR 0 1
19758: PUSH
19759: LD_INT 1
19761: ARRAY
19762: PPUSH
19763: CALL_OW 251
19767: PPUSH
19768: LD_INT 70
19770: PPUSH
19771: CALL_OW 495
// end ;
19775: PPOPN 1
19777: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19778: LD_EXP 44
19782: PUSH
19783: LD_EXP 78
19787: AND
19788: IFFALSE 19999
19790: GO 19792
19792: DISABLE
19793: LD_INT 0
19795: PPUSH
19796: PPUSH
19797: PPUSH
19798: PPUSH
19799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19800: LD_ADDR_VAR 0 5
19804: PUSH
19805: LD_INT 22
19807: PUSH
19808: LD_OWVAR 2
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 21
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PPUSH
19831: CALL_OW 69
19835: ST_TO_ADDR
// if not tmp then
19836: LD_VAR 0 5
19840: NOT
19841: IFFALSE 19845
// exit ;
19843: GO 19999
// for i in tmp do
19845: LD_ADDR_VAR 0 1
19849: PUSH
19850: LD_VAR 0 5
19854: PUSH
19855: FOR_IN
19856: IFFALSE 19997
// begin d := rand ( 0 , 5 ) ;
19858: LD_ADDR_VAR 0 4
19862: PUSH
19863: LD_INT 0
19865: PPUSH
19866: LD_INT 5
19868: PPUSH
19869: CALL_OW 12
19873: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19874: LD_ADDR_VAR 0 2
19878: PUSH
19879: LD_VAR 0 1
19883: PPUSH
19884: CALL_OW 250
19888: PPUSH
19889: LD_VAR 0 4
19893: PPUSH
19894: LD_INT 3
19896: PPUSH
19897: LD_INT 12
19899: PPUSH
19900: CALL_OW 12
19904: PPUSH
19905: CALL_OW 272
19909: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19910: LD_ADDR_VAR 0 3
19914: PUSH
19915: LD_VAR 0 1
19919: PPUSH
19920: CALL_OW 251
19924: PPUSH
19925: LD_VAR 0 4
19929: PPUSH
19930: LD_INT 3
19932: PPUSH
19933: LD_INT 12
19935: PPUSH
19936: CALL_OW 12
19940: PPUSH
19941: CALL_OW 273
19945: ST_TO_ADDR
// if ValidHex ( x , y ) then
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: CALL_OW 488
19960: IFFALSE 19995
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19962: LD_VAR 0 1
19966: PPUSH
19967: LD_VAR 0 2
19971: PPUSH
19972: LD_VAR 0 3
19976: PPUSH
19977: LD_INT 3
19979: PPUSH
19980: LD_INT 6
19982: PPUSH
19983: CALL_OW 12
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 483
// end ;
19995: GO 19855
19997: POP
19998: POP
// end ;
19999: PPOPN 5
20001: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20002: LD_EXP 44
20006: PUSH
20007: LD_EXP 79
20011: AND
20012: IFFALSE 20106
20014: GO 20016
20016: DISABLE
20017: LD_INT 0
20019: PPUSH
20020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20021: LD_ADDR_VAR 0 2
20025: PUSH
20026: LD_INT 22
20028: PUSH
20029: LD_OWVAR 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 32
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: ST_TO_ADDR
// if not tmp then
20068: LD_VAR 0 2
20072: NOT
20073: IFFALSE 20077
// exit ;
20075: GO 20106
// for i in tmp do
20077: LD_ADDR_VAR 0 1
20081: PUSH
20082: LD_VAR 0 2
20086: PUSH
20087: FOR_IN
20088: IFFALSE 20104
// SetFuel ( i , 0 ) ;
20090: LD_VAR 0 1
20094: PPUSH
20095: LD_INT 0
20097: PPUSH
20098: CALL_OW 240
20102: GO 20087
20104: POP
20105: POP
// end ;
20106: PPOPN 2
20108: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20109: LD_EXP 44
20113: PUSH
20114: LD_EXP 80
20118: AND
20119: IFFALSE 20185
20121: GO 20123
20123: DISABLE
20124: LD_INT 0
20126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20127: LD_ADDR_VAR 0 1
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_OWVAR 2
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 30
20146: PUSH
20147: LD_INT 29
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: ST_TO_ADDR
// if not tmp then
20163: LD_VAR 0 1
20167: NOT
20168: IFFALSE 20172
// exit ;
20170: GO 20185
// DestroyUnit ( tmp [ 1 ] ) ;
20172: LD_VAR 0 1
20176: PUSH
20177: LD_INT 1
20179: ARRAY
20180: PPUSH
20181: CALL_OW 65
// end ;
20185: PPOPN 1
20187: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20188: LD_EXP 44
20192: PUSH
20193: LD_EXP 82
20197: AND
20198: IFFALSE 20327
20200: GO 20202
20202: DISABLE
20203: LD_INT 0
20205: PPUSH
// begin uc_side := 0 ;
20206: LD_ADDR_OWVAR 20
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// uc_nation := nation_arabian ;
20214: LD_ADDR_OWVAR 21
20218: PUSH
20219: LD_INT 2
20221: ST_TO_ADDR
// hc_gallery :=  ;
20222: LD_ADDR_OWVAR 33
20226: PUSH
20227: LD_STRING 
20229: ST_TO_ADDR
// hc_name :=  ;
20230: LD_ADDR_OWVAR 26
20234: PUSH
20235: LD_STRING 
20237: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20238: LD_INT 1
20240: PPUSH
20241: LD_INT 11
20243: PPUSH
20244: LD_INT 10
20246: PPUSH
20247: CALL_OW 380
// un := CreateHuman ;
20251: LD_ADDR_VAR 0 1
20255: PUSH
20256: CALL_OW 44
20260: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: LD_INT 1
20268: PPUSH
20269: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20273: LD_INT 35
20275: PPUSH
20276: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20280: LD_VAR 0 1
20284: PPUSH
20285: LD_INT 22
20287: PUSH
20288: LD_OWVAR 2
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PPUSH
20297: CALL_OW 69
20301: PPUSH
20302: LD_VAR 0 1
20306: PPUSH
20307: CALL_OW 74
20311: PPUSH
20312: CALL_OW 115
// until IsDead ( un ) ;
20316: LD_VAR 0 1
20320: PPUSH
20321: CALL_OW 301
20325: IFFALSE 20273
// end ;
20327: PPOPN 1
20329: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20330: LD_EXP 44
20334: PUSH
20335: LD_EXP 84
20339: AND
20340: IFFALSE 20352
20342: GO 20344
20344: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20345: LD_STRING earthquake(getX(game), 0, 32)
20347: PPUSH
20348: CALL_OW 559
20352: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20353: LD_EXP 44
20357: PUSH
20358: LD_EXP 85
20362: AND
20363: IFFALSE 20454
20365: GO 20367
20367: DISABLE
20368: LD_INT 0
20370: PPUSH
// begin enable ;
20371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20372: LD_ADDR_VAR 0 1
20376: PUSH
20377: LD_INT 22
20379: PUSH
20380: LD_OWVAR 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 21
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 33
20401: PUSH
20402: LD_INT 3
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: PPUSH
20414: CALL_OW 69
20418: ST_TO_ADDR
// if not tmp then
20419: LD_VAR 0 1
20423: NOT
20424: IFFALSE 20428
// exit ;
20426: GO 20454
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20428: LD_VAR 0 1
20432: PUSH
20433: LD_INT 1
20435: PPUSH
20436: LD_VAR 0 1
20440: PPUSH
20441: CALL_OW 12
20445: ARRAY
20446: PPUSH
20447: LD_INT 1
20449: PPUSH
20450: CALL_OW 234
// end ;
20454: PPOPN 1
20456: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20457: LD_EXP 44
20461: PUSH
20462: LD_EXP 86
20466: AND
20467: IFFALSE 20608
20469: GO 20471
20471: DISABLE
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
20476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20477: LD_ADDR_VAR 0 3
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_OWVAR 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 25
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PPUSH
20508: CALL_OW 69
20512: ST_TO_ADDR
// if not tmp then
20513: LD_VAR 0 3
20517: NOT
20518: IFFALSE 20522
// exit ;
20520: GO 20608
// un := tmp [ rand ( 1 , tmp ) ] ;
20522: LD_ADDR_VAR 0 2
20526: PUSH
20527: LD_VAR 0 3
20531: PUSH
20532: LD_INT 1
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: CALL_OW 12
20544: ARRAY
20545: ST_TO_ADDR
// if Crawls ( un ) then
20546: LD_VAR 0 2
20550: PPUSH
20551: CALL_OW 318
20555: IFFALSE 20566
// ComWalk ( un ) ;
20557: LD_VAR 0 2
20561: PPUSH
20562: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20566: LD_VAR 0 2
20570: PPUSH
20571: LD_INT 9
20573: PPUSH
20574: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20578: LD_INT 28
20580: PPUSH
20581: LD_OWVAR 2
20585: PPUSH
20586: LD_INT 2
20588: PPUSH
20589: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20593: LD_INT 29
20595: PPUSH
20596: LD_OWVAR 2
20600: PPUSH
20601: LD_INT 2
20603: PPUSH
20604: CALL_OW 322
// end ;
20608: PPOPN 3
20610: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20611: LD_EXP 44
20615: PUSH
20616: LD_EXP 87
20620: AND
20621: IFFALSE 20732
20623: GO 20625
20625: DISABLE
20626: LD_INT 0
20628: PPUSH
20629: PPUSH
20630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20631: LD_ADDR_VAR 0 3
20635: PUSH
20636: LD_INT 22
20638: PUSH
20639: LD_OWVAR 2
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 25
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PPUSH
20662: CALL_OW 69
20666: ST_TO_ADDR
// if not tmp then
20667: LD_VAR 0 3
20671: NOT
20672: IFFALSE 20676
// exit ;
20674: GO 20732
// un := tmp [ rand ( 1 , tmp ) ] ;
20676: LD_ADDR_VAR 0 2
20680: PUSH
20681: LD_VAR 0 3
20685: PUSH
20686: LD_INT 1
20688: PPUSH
20689: LD_VAR 0 3
20693: PPUSH
20694: CALL_OW 12
20698: ARRAY
20699: ST_TO_ADDR
// if Crawls ( un ) then
20700: LD_VAR 0 2
20704: PPUSH
20705: CALL_OW 318
20709: IFFALSE 20720
// ComWalk ( un ) ;
20711: LD_VAR 0 2
20715: PPUSH
20716: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20720: LD_VAR 0 2
20724: PPUSH
20725: LD_INT 8
20727: PPUSH
20728: CALL_OW 336
// end ;
20732: PPOPN 3
20734: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20735: LD_EXP 44
20739: PUSH
20740: LD_EXP 88
20744: AND
20745: IFFALSE 20889
20747: GO 20749
20749: DISABLE
20750: LD_INT 0
20752: PPUSH
20753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20754: LD_ADDR_VAR 0 2
20758: PUSH
20759: LD_INT 22
20761: PUSH
20762: LD_OWVAR 2
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 21
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: LD_INT 34
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 34
20796: PUSH
20797: LD_INT 51
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 34
20806: PUSH
20807: LD_INT 32
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: PPUSH
20825: CALL_OW 69
20829: ST_TO_ADDR
// if not tmp then
20830: LD_VAR 0 2
20834: NOT
20835: IFFALSE 20839
// exit ;
20837: GO 20889
// for i in tmp do
20839: LD_ADDR_VAR 0 1
20843: PUSH
20844: LD_VAR 0 2
20848: PUSH
20849: FOR_IN
20850: IFFALSE 20887
// if GetCargo ( i , mat_artifact ) = 0 then
20852: LD_VAR 0 1
20856: PPUSH
20857: LD_INT 4
20859: PPUSH
20860: CALL_OW 289
20864: PUSH
20865: LD_INT 0
20867: EQUAL
20868: IFFALSE 20885
// SetCargo ( i , mat_siberit , 100 ) ;
20870: LD_VAR 0 1
20874: PPUSH
20875: LD_INT 3
20877: PPUSH
20878: LD_INT 100
20880: PPUSH
20881: CALL_OW 290
20885: GO 20849
20887: POP
20888: POP
// end ;
20889: PPOPN 2
20891: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20892: LD_EXP 44
20896: PUSH
20897: LD_EXP 89
20901: AND
20902: IFFALSE 21085
20904: GO 20906
20906: DISABLE
20907: LD_INT 0
20909: PPUSH
20910: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20911: LD_ADDR_VAR 0 2
20915: PUSH
20916: LD_INT 22
20918: PUSH
20919: LD_OWVAR 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PPUSH
20928: CALL_OW 69
20932: ST_TO_ADDR
// if not tmp then
20933: LD_VAR 0 2
20937: NOT
20938: IFFALSE 20942
// exit ;
20940: GO 21085
// for i := 1 to 2 do
20942: LD_ADDR_VAR 0 1
20946: PUSH
20947: DOUBLE
20948: LD_INT 1
20950: DEC
20951: ST_TO_ADDR
20952: LD_INT 2
20954: PUSH
20955: FOR_TO
20956: IFFALSE 21083
// begin uc_side := your_side ;
20958: LD_ADDR_OWVAR 20
20962: PUSH
20963: LD_OWVAR 2
20967: ST_TO_ADDR
// uc_nation := nation_american ;
20968: LD_ADDR_OWVAR 21
20972: PUSH
20973: LD_INT 1
20975: ST_TO_ADDR
// vc_chassis := us_morphling ;
20976: LD_ADDR_OWVAR 37
20980: PUSH
20981: LD_INT 5
20983: ST_TO_ADDR
// vc_engine := engine_siberite ;
20984: LD_ADDR_OWVAR 39
20988: PUSH
20989: LD_INT 3
20991: ST_TO_ADDR
// vc_control := control_computer ;
20992: LD_ADDR_OWVAR 38
20996: PUSH
20997: LD_INT 3
20999: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21000: LD_ADDR_OWVAR 40
21004: PUSH
21005: LD_INT 10
21007: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21008: LD_VAR 0 2
21012: PUSH
21013: LD_INT 1
21015: ARRAY
21016: PPUSH
21017: CALL_OW 310
21021: NOT
21022: IFFALSE 21069
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21024: CALL_OW 45
21028: PPUSH
21029: LD_VAR 0 2
21033: PUSH
21034: LD_INT 1
21036: ARRAY
21037: PPUSH
21038: CALL_OW 250
21042: PPUSH
21043: LD_VAR 0 2
21047: PUSH
21048: LD_INT 1
21050: ARRAY
21051: PPUSH
21052: CALL_OW 251
21056: PPUSH
21057: LD_INT 12
21059: PPUSH
21060: LD_INT 1
21062: PPUSH
21063: CALL_OW 50
21067: GO 21081
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21069: CALL_OW 45
21073: PPUSH
21074: LD_INT 1
21076: PPUSH
21077: CALL_OW 51
// end ;
21081: GO 20955
21083: POP
21084: POP
// end ;
21085: PPOPN 2
21087: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21088: LD_EXP 44
21092: PUSH
21093: LD_EXP 90
21097: AND
21098: IFFALSE 21320
21100: GO 21102
21102: DISABLE
21103: LD_INT 0
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21111: LD_ADDR_VAR 0 6
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 3
21140: PUSH
21141: LD_INT 23
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: PPUSH
21160: CALL_OW 69
21164: ST_TO_ADDR
// if not tmp then
21165: LD_VAR 0 6
21169: NOT
21170: IFFALSE 21174
// exit ;
21172: GO 21320
// s1 := rand ( 1 , 4 ) ;
21174: LD_ADDR_VAR 0 2
21178: PUSH
21179: LD_INT 1
21181: PPUSH
21182: LD_INT 4
21184: PPUSH
21185: CALL_OW 12
21189: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21190: LD_ADDR_VAR 0 4
21194: PUSH
21195: LD_VAR 0 6
21199: PUSH
21200: LD_INT 1
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 2
21208: PPUSH
21209: CALL_OW 259
21213: ST_TO_ADDR
// if s1 = 1 then
21214: LD_VAR 0 2
21218: PUSH
21219: LD_INT 1
21221: EQUAL
21222: IFFALSE 21242
// s2 := rand ( 2 , 4 ) else
21224: LD_ADDR_VAR 0 3
21228: PUSH
21229: LD_INT 2
21231: PPUSH
21232: LD_INT 4
21234: PPUSH
21235: CALL_OW 12
21239: ST_TO_ADDR
21240: GO 21250
// s2 := 1 ;
21242: LD_ADDR_VAR 0 3
21246: PUSH
21247: LD_INT 1
21249: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21250: LD_ADDR_VAR 0 5
21254: PUSH
21255: LD_VAR 0 6
21259: PUSH
21260: LD_INT 1
21262: ARRAY
21263: PPUSH
21264: LD_VAR 0 3
21268: PPUSH
21269: CALL_OW 259
21273: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21274: LD_VAR 0 6
21278: PUSH
21279: LD_INT 1
21281: ARRAY
21282: PPUSH
21283: LD_VAR 0 2
21287: PPUSH
21288: LD_VAR 0 5
21292: PPUSH
21293: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21297: LD_VAR 0 6
21301: PUSH
21302: LD_INT 1
21304: ARRAY
21305: PPUSH
21306: LD_VAR 0 3
21310: PPUSH
21311: LD_VAR 0 4
21315: PPUSH
21316: CALL_OW 237
// end ;
21320: PPOPN 6
21322: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21323: LD_EXP 44
21327: PUSH
21328: LD_EXP 91
21332: AND
21333: IFFALSE 21412
21335: GO 21337
21337: DISABLE
21338: LD_INT 0
21340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21341: LD_ADDR_VAR 0 1
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_OWVAR 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 30
21360: PUSH
21361: LD_INT 3
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PPUSH
21372: CALL_OW 69
21376: ST_TO_ADDR
// if not tmp then
21377: LD_VAR 0 1
21381: NOT
21382: IFFALSE 21386
// exit ;
21384: GO 21412
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21386: LD_VAR 0 1
21390: PUSH
21391: LD_INT 1
21393: PPUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: CALL_OW 12
21403: ARRAY
21404: PPUSH
21405: LD_INT 1
21407: PPUSH
21408: CALL_OW 234
// end ;
21412: PPOPN 1
21414: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21415: LD_EXP 44
21419: PUSH
21420: LD_EXP 92
21424: AND
21425: IFFALSE 21537
21427: GO 21429
21429: DISABLE
21430: LD_INT 0
21432: PPUSH
21433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21434: LD_ADDR_VAR 0 2
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_OWVAR 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 2
21453: PUSH
21454: LD_INT 30
21456: PUSH
21457: LD_INT 27
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 30
21466: PUSH
21467: LD_INT 26
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 30
21476: PUSH
21477: LD_INT 28
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PPUSH
21494: CALL_OW 69
21498: ST_TO_ADDR
// if not tmp then
21499: LD_VAR 0 2
21503: NOT
21504: IFFALSE 21508
// exit ;
21506: GO 21537
// for i in tmp do
21508: LD_ADDR_VAR 0 1
21512: PUSH
21513: LD_VAR 0 2
21517: PUSH
21518: FOR_IN
21519: IFFALSE 21535
// SetLives ( i , 1 ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_INT 1
21528: PPUSH
21529: CALL_OW 234
21533: GO 21518
21535: POP
21536: POP
// end ;
21537: PPOPN 2
21539: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21540: LD_EXP 44
21544: PUSH
21545: LD_EXP 93
21549: AND
21550: IFFALSE 21837
21552: GO 21554
21554: DISABLE
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
// begin i := rand ( 1 , 7 ) ;
21560: LD_ADDR_VAR 0 1
21564: PUSH
21565: LD_INT 1
21567: PPUSH
21568: LD_INT 7
21570: PPUSH
21571: CALL_OW 12
21575: ST_TO_ADDR
// case i of 1 :
21576: LD_VAR 0 1
21580: PUSH
21581: LD_INT 1
21583: DOUBLE
21584: EQUAL
21585: IFTRUE 21589
21587: GO 21599
21589: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21590: LD_STRING earthquake(getX(game), 0, 32)
21592: PPUSH
21593: CALL_OW 559
21597: GO 21837
21599: LD_INT 2
21601: DOUBLE
21602: EQUAL
21603: IFTRUE 21607
21605: GO 21621
21607: POP
// begin ToLua ( displayStucuk(); ) ;
21608: LD_STRING displayStucuk();
21610: PPUSH
21611: CALL_OW 559
// ResetFog ;
21615: CALL_OW 335
// end ; 3 :
21619: GO 21837
21621: LD_INT 3
21623: DOUBLE
21624: EQUAL
21625: IFTRUE 21629
21627: GO 21733
21629: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21630: LD_ADDR_VAR 0 2
21634: PUSH
21635: LD_INT 22
21637: PUSH
21638: LD_OWVAR 2
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 25
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 69
21665: ST_TO_ADDR
// if not tmp then
21666: LD_VAR 0 2
21670: NOT
21671: IFFALSE 21675
// exit ;
21673: GO 21837
// un := tmp [ rand ( 1 , tmp ) ] ;
21675: LD_ADDR_VAR 0 3
21679: PUSH
21680: LD_VAR 0 2
21684: PUSH
21685: LD_INT 1
21687: PPUSH
21688: LD_VAR 0 2
21692: PPUSH
21693: CALL_OW 12
21697: ARRAY
21698: ST_TO_ADDR
// if Crawls ( un ) then
21699: LD_VAR 0 3
21703: PPUSH
21704: CALL_OW 318
21708: IFFALSE 21719
// ComWalk ( un ) ;
21710: LD_VAR 0 3
21714: PPUSH
21715: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21719: LD_VAR 0 3
21723: PPUSH
21724: LD_INT 8
21726: PPUSH
21727: CALL_OW 336
// end ; 4 :
21731: GO 21837
21733: LD_INT 4
21735: DOUBLE
21736: EQUAL
21737: IFTRUE 21741
21739: GO 21815
21741: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21742: LD_ADDR_VAR 0 2
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_OWVAR 2
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 30
21761: PUSH
21762: LD_INT 29
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PPUSH
21773: CALL_OW 69
21777: ST_TO_ADDR
// if not tmp then
21778: LD_VAR 0 2
21782: NOT
21783: IFFALSE 21787
// exit ;
21785: GO 21837
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21787: LD_VAR 0 2
21791: PUSH
21792: LD_INT 1
21794: ARRAY
21795: PPUSH
21796: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21800: LD_VAR 0 2
21804: PUSH
21805: LD_INT 1
21807: ARRAY
21808: PPUSH
21809: CALL_OW 65
// end ; 5 .. 7 :
21813: GO 21837
21815: LD_INT 5
21817: DOUBLE
21818: GREATEREQUAL
21819: IFFALSE 21827
21821: LD_INT 7
21823: DOUBLE
21824: LESSEQUAL
21825: IFTRUE 21829
21827: GO 21836
21829: POP
// StreamSibBomb ; end ;
21830: CALL 18074 0 0
21834: GO 21837
21836: POP
// end ;
21837: PPOPN 3
21839: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21840: LD_EXP 44
21844: PUSH
21845: LD_EXP 94
21849: AND
21850: IFFALSE 22006
21852: GO 21854
21854: DISABLE
21855: LD_INT 0
21857: PPUSH
21858: PPUSH
21859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21860: LD_ADDR_VAR 0 2
21864: PUSH
21865: LD_INT 81
21867: PUSH
21868: LD_OWVAR 2
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 21
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 21
21892: PUSH
21893: LD_INT 2
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PPUSH
21909: CALL_OW 69
21913: ST_TO_ADDR
// if not tmp then
21914: LD_VAR 0 2
21918: NOT
21919: IFFALSE 21923
// exit ;
21921: GO 22006
// p := 0 ;
21923: LD_ADDR_VAR 0 3
21927: PUSH
21928: LD_INT 0
21930: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21931: LD_INT 35
21933: PPUSH
21934: CALL_OW 67
// p := p + 1 ;
21938: LD_ADDR_VAR 0 3
21942: PUSH
21943: LD_VAR 0 3
21947: PUSH
21948: LD_INT 1
21950: PLUS
21951: ST_TO_ADDR
// for i in tmp do
21952: LD_ADDR_VAR 0 1
21956: PUSH
21957: LD_VAR 0 2
21961: PUSH
21962: FOR_IN
21963: IFFALSE 21994
// if GetLives ( i ) < 1000 then
21965: LD_VAR 0 1
21969: PPUSH
21970: CALL_OW 256
21974: PUSH
21975: LD_INT 1000
21977: LESS
21978: IFFALSE 21992
// SetLives ( i , 1000 ) ;
21980: LD_VAR 0 1
21984: PPUSH
21985: LD_INT 1000
21987: PPUSH
21988: CALL_OW 234
21992: GO 21962
21994: POP
21995: POP
// until p > 20 ;
21996: LD_VAR 0 3
22000: PUSH
22001: LD_INT 20
22003: GREATER
22004: IFFALSE 21931
// end ;
22006: PPOPN 3
22008: END
// every 0 0$1 trigger StreamModeActive and sTime do
22009: LD_EXP 44
22013: PUSH
22014: LD_EXP 95
22018: AND
22019: IFFALSE 22054
22021: GO 22023
22023: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22024: LD_INT 28
22026: PPUSH
22027: LD_OWVAR 2
22031: PPUSH
22032: LD_INT 2
22034: PPUSH
22035: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22039: LD_INT 30
22041: PPUSH
22042: LD_OWVAR 2
22046: PPUSH
22047: LD_INT 2
22049: PPUSH
22050: CALL_OW 322
// end ;
22054: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22055: LD_EXP 44
22059: PUSH
22060: LD_EXP 96
22064: AND
22065: IFFALSE 22186
22067: GO 22069
22069: DISABLE
22070: LD_INT 0
22072: PPUSH
22073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22074: LD_ADDR_VAR 0 2
22078: PUSH
22079: LD_INT 22
22081: PUSH
22082: LD_OWVAR 2
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 21
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 3
22103: PUSH
22104: LD_INT 23
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: PPUSH
22123: CALL_OW 69
22127: ST_TO_ADDR
// if not tmp then
22128: LD_VAR 0 2
22132: NOT
22133: IFFALSE 22137
// exit ;
22135: GO 22186
// for i in tmp do
22137: LD_ADDR_VAR 0 1
22141: PUSH
22142: LD_VAR 0 2
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22184
// begin if Crawls ( i ) then
22150: LD_VAR 0 1
22154: PPUSH
22155: CALL_OW 318
22159: IFFALSE 22170
// ComWalk ( i ) ;
22161: LD_VAR 0 1
22165: PPUSH
22166: CALL_OW 138
// SetClass ( i , 2 ) ;
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_INT 2
22177: PPUSH
22178: CALL_OW 336
// end ;
22182: GO 22147
22184: POP
22185: POP
// end ;
22186: PPOPN 2
22188: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22189: LD_EXP 44
22193: PUSH
22194: LD_EXP 97
22198: AND
22199: IFFALSE 22487
22201: GO 22203
22203: DISABLE
22204: LD_INT 0
22206: PPUSH
22207: PPUSH
22208: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22209: LD_OWVAR 2
22213: PPUSH
22214: LD_INT 9
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22227: LD_INT 9
22229: PPUSH
22230: LD_OWVAR 2
22234: PPUSH
22235: CALL_OW 343
// uc_side := 9 ;
22239: LD_ADDR_OWVAR 20
22243: PUSH
22244: LD_INT 9
22246: ST_TO_ADDR
// uc_nation := 2 ;
22247: LD_ADDR_OWVAR 21
22251: PUSH
22252: LD_INT 2
22254: ST_TO_ADDR
// hc_name := Dark Warrior ;
22255: LD_ADDR_OWVAR 26
22259: PUSH
22260: LD_STRING Dark Warrior
22262: ST_TO_ADDR
// hc_gallery :=  ;
22263: LD_ADDR_OWVAR 33
22267: PUSH
22268: LD_STRING 
22270: ST_TO_ADDR
// hc_noskilllimit := true ;
22271: LD_ADDR_OWVAR 76
22275: PUSH
22276: LD_INT 1
22278: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22279: LD_ADDR_OWVAR 31
22283: PUSH
22284: LD_INT 30
22286: PUSH
22287: LD_INT 30
22289: PUSH
22290: LD_INT 30
22292: PUSH
22293: LD_INT 30
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: ST_TO_ADDR
// un := CreateHuman ;
22302: LD_ADDR_VAR 0 3
22306: PUSH
22307: CALL_OW 44
22311: ST_TO_ADDR
// hc_noskilllimit := false ;
22312: LD_ADDR_OWVAR 76
22316: PUSH
22317: LD_INT 0
22319: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22320: LD_VAR 0 3
22324: PPUSH
22325: LD_INT 1
22327: PPUSH
22328: CALL_OW 51
// ToLua ( playRanger() ) ;
22332: LD_STRING playRanger()
22334: PPUSH
22335: CALL_OW 559
// p := 0 ;
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_INT 0
22346: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22347: LD_INT 35
22349: PPUSH
22350: CALL_OW 67
// p := p + 1 ;
22354: LD_ADDR_VAR 0 2
22358: PUSH
22359: LD_VAR 0 2
22363: PUSH
22364: LD_INT 1
22366: PLUS
22367: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22368: LD_VAR 0 3
22372: PPUSH
22373: CALL_OW 256
22377: PUSH
22378: LD_INT 1000
22380: LESS
22381: IFFALSE 22395
// SetLives ( un , 1000 ) ;
22383: LD_VAR 0 3
22387: PPUSH
22388: LD_INT 1000
22390: PPUSH
22391: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22395: LD_VAR 0 3
22399: PPUSH
22400: LD_INT 81
22402: PUSH
22403: LD_OWVAR 2
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 91
22414: PUSH
22415: LD_VAR 0 3
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 69
22436: PPUSH
22437: LD_VAR 0 3
22441: PPUSH
22442: CALL_OW 74
22446: PPUSH
22447: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22451: LD_VAR 0 2
22455: PUSH
22456: LD_INT 80
22458: GREATER
22459: PUSH
22460: LD_VAR 0 3
22464: PPUSH
22465: CALL_OW 301
22469: OR
22470: IFFALSE 22347
// if un then
22472: LD_VAR 0 3
22476: IFFALSE 22487
// RemoveUnit ( un ) ;
22478: LD_VAR 0 3
22482: PPUSH
22483: CALL_OW 64
// end ;
22487: PPOPN 3
22489: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22490: LD_EXP 98
22494: IFFALSE 22610
22496: GO 22498
22498: DISABLE
22499: LD_INT 0
22501: PPUSH
22502: PPUSH
22503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22504: LD_ADDR_VAR 0 2
22508: PUSH
22509: LD_INT 81
22511: PUSH
22512: LD_OWVAR 2
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 21
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PPUSH
22535: CALL_OW 69
22539: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22540: LD_STRING playComputer()
22542: PPUSH
22543: CALL_OW 559
// if not tmp then
22547: LD_VAR 0 2
22551: NOT
22552: IFFALSE 22556
// exit ;
22554: GO 22610
// for i in tmp do
22556: LD_ADDR_VAR 0 1
22560: PUSH
22561: LD_VAR 0 2
22565: PUSH
22566: FOR_IN
22567: IFFALSE 22608
// for j := 1 to 4 do
22569: LD_ADDR_VAR 0 3
22573: PUSH
22574: DOUBLE
22575: LD_INT 1
22577: DEC
22578: ST_TO_ADDR
22579: LD_INT 4
22581: PUSH
22582: FOR_TO
22583: IFFALSE 22604
// SetSkill ( i , j , 10 ) ;
22585: LD_VAR 0 1
22589: PPUSH
22590: LD_VAR 0 3
22594: PPUSH
22595: LD_INT 10
22597: PPUSH
22598: CALL_OW 237
22602: GO 22582
22604: POP
22605: POP
22606: GO 22566
22608: POP
22609: POP
// end ;
22610: PPOPN 3
22612: END
// every 0 0$1 trigger s30 do var i , tmp ;
22613: LD_EXP 99
22617: IFFALSE 22686
22619: GO 22621
22621: DISABLE
22622: LD_INT 0
22624: PPUSH
22625: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22626: LD_ADDR_VAR 0 2
22630: PUSH
22631: LD_INT 22
22633: PUSH
22634: LD_OWVAR 2
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PPUSH
22643: CALL_OW 69
22647: ST_TO_ADDR
// if not tmp then
22648: LD_VAR 0 2
22652: NOT
22653: IFFALSE 22657
// exit ;
22655: GO 22686
// for i in tmp do
22657: LD_ADDR_VAR 0 1
22661: PUSH
22662: LD_VAR 0 2
22666: PUSH
22667: FOR_IN
22668: IFFALSE 22684
// SetLives ( i , 300 ) ;
22670: LD_VAR 0 1
22674: PPUSH
22675: LD_INT 300
22677: PPUSH
22678: CALL_OW 234
22682: GO 22667
22684: POP
22685: POP
// end ;
22686: PPOPN 2
22688: END
// every 0 0$1 trigger s60 do var i , tmp ;
22689: LD_EXP 100
22693: IFFALSE 22762
22695: GO 22697
22697: DISABLE
22698: LD_INT 0
22700: PPUSH
22701: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22702: LD_ADDR_VAR 0 2
22706: PUSH
22707: LD_INT 22
22709: PUSH
22710: LD_OWVAR 2
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL_OW 69
22723: ST_TO_ADDR
// if not tmp then
22724: LD_VAR 0 2
22728: NOT
22729: IFFALSE 22733
// exit ;
22731: GO 22762
// for i in tmp do
22733: LD_ADDR_VAR 0 1
22737: PUSH
22738: LD_VAR 0 2
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22760
// SetLives ( i , 600 ) ;
22746: LD_VAR 0 1
22750: PPUSH
22751: LD_INT 600
22753: PPUSH
22754: CALL_OW 234
22758: GO 22743
22760: POP
22761: POP
// end ;
22762: PPOPN 2
22764: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22765: LD_INT 0
22767: PPUSH
// case cmd of 301 :
22768: LD_VAR 0 1
22772: PUSH
22773: LD_INT 301
22775: DOUBLE
22776: EQUAL
22777: IFTRUE 22781
22779: GO 22813
22781: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22782: LD_VAR 0 6
22786: PPUSH
22787: LD_VAR 0 7
22791: PPUSH
22792: LD_VAR 0 8
22796: PPUSH
22797: LD_VAR 0 4
22801: PPUSH
22802: LD_VAR 0 5
22806: PPUSH
22807: CALL 24022 0 5
22811: GO 22934
22813: LD_INT 302
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22858
22821: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22822: LD_VAR 0 6
22826: PPUSH
22827: LD_VAR 0 7
22831: PPUSH
22832: LD_VAR 0 8
22836: PPUSH
22837: LD_VAR 0 9
22841: PPUSH
22842: LD_VAR 0 4
22846: PPUSH
22847: LD_VAR 0 5
22851: PPUSH
22852: CALL 24113 0 6
22856: GO 22934
22858: LD_INT 303
22860: DOUBLE
22861: EQUAL
22862: IFTRUE 22866
22864: GO 22903
22866: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22867: LD_VAR 0 6
22871: PPUSH
22872: LD_VAR 0 7
22876: PPUSH
22877: LD_VAR 0 8
22881: PPUSH
22882: LD_VAR 0 9
22886: PPUSH
22887: LD_VAR 0 4
22891: PPUSH
22892: LD_VAR 0 5
22896: PPUSH
22897: CALL 22939 0 6
22901: GO 22934
22903: LD_INT 304
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22933
22911: POP
// hHackTeleport ( unit , x , y ) ; end ;
22912: LD_VAR 0 2
22916: PPUSH
22917: LD_VAR 0 4
22921: PPUSH
22922: LD_VAR 0 5
22926: PPUSH
22927: CALL 24706 0 3
22931: GO 22934
22933: POP
// end ;
22934: LD_VAR 0 12
22938: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22939: LD_INT 0
22941: PPUSH
22942: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22943: LD_VAR 0 1
22947: PUSH
22948: LD_INT 1
22950: LESS
22951: PUSH
22952: LD_VAR 0 1
22956: PUSH
22957: LD_INT 3
22959: GREATER
22960: OR
22961: PUSH
22962: LD_VAR 0 5
22966: PPUSH
22967: LD_VAR 0 6
22971: PPUSH
22972: CALL_OW 428
22976: OR
22977: IFFALSE 22981
// exit ;
22979: GO 23709
// uc_side := your_side ;
22981: LD_ADDR_OWVAR 20
22985: PUSH
22986: LD_OWVAR 2
22990: ST_TO_ADDR
// uc_nation := nation ;
22991: LD_ADDR_OWVAR 21
22995: PUSH
22996: LD_VAR 0 1
23000: ST_TO_ADDR
// bc_level = 1 ;
23001: LD_ADDR_OWVAR 43
23005: PUSH
23006: LD_INT 1
23008: ST_TO_ADDR
// case btype of 1 :
23009: LD_VAR 0 2
23013: PUSH
23014: LD_INT 1
23016: DOUBLE
23017: EQUAL
23018: IFTRUE 23022
23020: GO 23033
23022: POP
// bc_type := b_depot ; 2 :
23023: LD_ADDR_OWVAR 42
23027: PUSH
23028: LD_INT 0
23030: ST_TO_ADDR
23031: GO 23653
23033: LD_INT 2
23035: DOUBLE
23036: EQUAL
23037: IFTRUE 23041
23039: GO 23052
23041: POP
// bc_type := b_warehouse ; 3 :
23042: LD_ADDR_OWVAR 42
23046: PUSH
23047: LD_INT 1
23049: ST_TO_ADDR
23050: GO 23653
23052: LD_INT 3
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23071
23060: POP
// bc_type := b_lab ; 4 .. 9 :
23061: LD_ADDR_OWVAR 42
23065: PUSH
23066: LD_INT 6
23068: ST_TO_ADDR
23069: GO 23653
23071: LD_INT 4
23073: DOUBLE
23074: GREATEREQUAL
23075: IFFALSE 23083
23077: LD_INT 9
23079: DOUBLE
23080: LESSEQUAL
23081: IFTRUE 23085
23083: GO 23145
23085: POP
// begin bc_type := b_lab_half ;
23086: LD_ADDR_OWVAR 42
23090: PUSH
23091: LD_INT 7
23093: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23094: LD_ADDR_OWVAR 44
23098: PUSH
23099: LD_INT 10
23101: PUSH
23102: LD_INT 11
23104: PUSH
23105: LD_INT 12
23107: PUSH
23108: LD_INT 15
23110: PUSH
23111: LD_INT 14
23113: PUSH
23114: LD_INT 13
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: PUSH
23125: LD_VAR 0 2
23129: PUSH
23130: LD_INT 3
23132: MINUS
23133: ARRAY
23134: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23135: LD_ADDR_OWVAR 45
23139: PUSH
23140: LD_INT 9
23142: ST_TO_ADDR
// end ; 10 .. 13 :
23143: GO 23653
23145: LD_INT 10
23147: DOUBLE
23148: GREATEREQUAL
23149: IFFALSE 23157
23151: LD_INT 13
23153: DOUBLE
23154: LESSEQUAL
23155: IFTRUE 23159
23157: GO 23236
23159: POP
// begin bc_type := b_lab_full ;
23160: LD_ADDR_OWVAR 42
23164: PUSH
23165: LD_INT 8
23167: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23168: LD_ADDR_OWVAR 44
23172: PUSH
23173: LD_INT 10
23175: PUSH
23176: LD_INT 12
23178: PUSH
23179: LD_INT 14
23181: PUSH
23182: LD_INT 13
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: PUSH
23191: LD_VAR 0 2
23195: PUSH
23196: LD_INT 9
23198: MINUS
23199: ARRAY
23200: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23201: LD_ADDR_OWVAR 45
23205: PUSH
23206: LD_INT 11
23208: PUSH
23209: LD_INT 15
23211: PUSH
23212: LD_INT 12
23214: PUSH
23215: LD_INT 15
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: PUSH
23224: LD_VAR 0 2
23228: PUSH
23229: LD_INT 9
23231: MINUS
23232: ARRAY
23233: ST_TO_ADDR
// end ; 14 :
23234: GO 23653
23236: LD_INT 14
23238: DOUBLE
23239: EQUAL
23240: IFTRUE 23244
23242: GO 23255
23244: POP
// bc_type := b_workshop ; 15 :
23245: LD_ADDR_OWVAR 42
23249: PUSH
23250: LD_INT 2
23252: ST_TO_ADDR
23253: GO 23653
23255: LD_INT 15
23257: DOUBLE
23258: EQUAL
23259: IFTRUE 23263
23261: GO 23274
23263: POP
// bc_type := b_factory ; 16 :
23264: LD_ADDR_OWVAR 42
23268: PUSH
23269: LD_INT 3
23271: ST_TO_ADDR
23272: GO 23653
23274: LD_INT 16
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23293
23282: POP
// bc_type := b_ext_gun ; 17 :
23283: LD_ADDR_OWVAR 42
23287: PUSH
23288: LD_INT 17
23290: ST_TO_ADDR
23291: GO 23653
23293: LD_INT 17
23295: DOUBLE
23296: EQUAL
23297: IFTRUE 23301
23299: GO 23329
23301: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23302: LD_ADDR_OWVAR 42
23306: PUSH
23307: LD_INT 19
23309: PUSH
23310: LD_INT 23
23312: PUSH
23313: LD_INT 19
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: PUSH
23321: LD_VAR 0 1
23325: ARRAY
23326: ST_TO_ADDR
23327: GO 23653
23329: LD_INT 18
23331: DOUBLE
23332: EQUAL
23333: IFTRUE 23337
23335: GO 23348
23337: POP
// bc_type := b_ext_radar ; 19 :
23338: LD_ADDR_OWVAR 42
23342: PUSH
23343: LD_INT 20
23345: ST_TO_ADDR
23346: GO 23653
23348: LD_INT 19
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23367
23356: POP
// bc_type := b_ext_radio ; 20 :
23357: LD_ADDR_OWVAR 42
23361: PUSH
23362: LD_INT 22
23364: ST_TO_ADDR
23365: GO 23653
23367: LD_INT 20
23369: DOUBLE
23370: EQUAL
23371: IFTRUE 23375
23373: GO 23386
23375: POP
// bc_type := b_ext_siberium ; 21 :
23376: LD_ADDR_OWVAR 42
23380: PUSH
23381: LD_INT 21
23383: ST_TO_ADDR
23384: GO 23653
23386: LD_INT 21
23388: DOUBLE
23389: EQUAL
23390: IFTRUE 23394
23392: GO 23405
23394: POP
// bc_type := b_ext_computer ; 22 :
23395: LD_ADDR_OWVAR 42
23399: PUSH
23400: LD_INT 24
23402: ST_TO_ADDR
23403: GO 23653
23405: LD_INT 22
23407: DOUBLE
23408: EQUAL
23409: IFTRUE 23413
23411: GO 23424
23413: POP
// bc_type := b_ext_track ; 23 :
23414: LD_ADDR_OWVAR 42
23418: PUSH
23419: LD_INT 16
23421: ST_TO_ADDR
23422: GO 23653
23424: LD_INT 23
23426: DOUBLE
23427: EQUAL
23428: IFTRUE 23432
23430: GO 23443
23432: POP
// bc_type := b_ext_laser ; 24 :
23433: LD_ADDR_OWVAR 42
23437: PUSH
23438: LD_INT 25
23440: ST_TO_ADDR
23441: GO 23653
23443: LD_INT 24
23445: DOUBLE
23446: EQUAL
23447: IFTRUE 23451
23449: GO 23462
23451: POP
// bc_type := b_control_tower ; 25 :
23452: LD_ADDR_OWVAR 42
23456: PUSH
23457: LD_INT 36
23459: ST_TO_ADDR
23460: GO 23653
23462: LD_INT 25
23464: DOUBLE
23465: EQUAL
23466: IFTRUE 23470
23468: GO 23481
23470: POP
// bc_type := b_breastwork ; 26 :
23471: LD_ADDR_OWVAR 42
23475: PUSH
23476: LD_INT 31
23478: ST_TO_ADDR
23479: GO 23653
23481: LD_INT 26
23483: DOUBLE
23484: EQUAL
23485: IFTRUE 23489
23487: GO 23500
23489: POP
// bc_type := b_bunker ; 27 :
23490: LD_ADDR_OWVAR 42
23494: PUSH
23495: LD_INT 32
23497: ST_TO_ADDR
23498: GO 23653
23500: LD_INT 27
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23519
23508: POP
// bc_type := b_turret ; 28 :
23509: LD_ADDR_OWVAR 42
23513: PUSH
23514: LD_INT 33
23516: ST_TO_ADDR
23517: GO 23653
23519: LD_INT 28
23521: DOUBLE
23522: EQUAL
23523: IFTRUE 23527
23525: GO 23538
23527: POP
// bc_type := b_armoury ; 29 :
23528: LD_ADDR_OWVAR 42
23532: PUSH
23533: LD_INT 4
23535: ST_TO_ADDR
23536: GO 23653
23538: LD_INT 29
23540: DOUBLE
23541: EQUAL
23542: IFTRUE 23546
23544: GO 23557
23546: POP
// bc_type := b_barracks ; 30 :
23547: LD_ADDR_OWVAR 42
23551: PUSH
23552: LD_INT 5
23554: ST_TO_ADDR
23555: GO 23653
23557: LD_INT 30
23559: DOUBLE
23560: EQUAL
23561: IFTRUE 23565
23563: GO 23576
23565: POP
// bc_type := b_solar_power ; 31 :
23566: LD_ADDR_OWVAR 42
23570: PUSH
23571: LD_INT 27
23573: ST_TO_ADDR
23574: GO 23653
23576: LD_INT 31
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23595
23584: POP
// bc_type := b_oil_power ; 32 :
23585: LD_ADDR_OWVAR 42
23589: PUSH
23590: LD_INT 26
23592: ST_TO_ADDR
23593: GO 23653
23595: LD_INT 32
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23614
23603: POP
// bc_type := b_siberite_power ; 33 :
23604: LD_ADDR_OWVAR 42
23608: PUSH
23609: LD_INT 28
23611: ST_TO_ADDR
23612: GO 23653
23614: LD_INT 33
23616: DOUBLE
23617: EQUAL
23618: IFTRUE 23622
23620: GO 23633
23622: POP
// bc_type := b_oil_mine ; 34 :
23623: LD_ADDR_OWVAR 42
23627: PUSH
23628: LD_INT 29
23630: ST_TO_ADDR
23631: GO 23653
23633: LD_INT 34
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23652
23641: POP
// bc_type := b_siberite_mine ; end ;
23642: LD_ADDR_OWVAR 42
23646: PUSH
23647: LD_INT 30
23649: ST_TO_ADDR
23650: GO 23653
23652: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23653: LD_ADDR_VAR 0 8
23657: PUSH
23658: LD_VAR 0 5
23662: PPUSH
23663: LD_VAR 0 6
23667: PPUSH
23668: LD_VAR 0 3
23672: PPUSH
23673: CALL_OW 47
23677: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23678: LD_OWVAR 42
23682: PUSH
23683: LD_INT 32
23685: PUSH
23686: LD_INT 33
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: IN
23693: IFFALSE 23709
// PlaceWeaponTurret ( b , weapon ) ;
23695: LD_VAR 0 8
23699: PPUSH
23700: LD_VAR 0 4
23704: PPUSH
23705: CALL_OW 431
// end ;
23709: LD_VAR 0 7
23713: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23714: LD_INT 0
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23720: LD_ADDR_VAR 0 4
23724: PUSH
23725: LD_INT 22
23727: PUSH
23728: LD_OWVAR 2
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 30
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 30
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 69
23773: ST_TO_ADDR
// if not tmp then
23774: LD_VAR 0 4
23778: NOT
23779: IFFALSE 23783
// exit ;
23781: GO 23842
// for i in tmp do
23783: LD_ADDR_VAR 0 2
23787: PUSH
23788: LD_VAR 0 4
23792: PUSH
23793: FOR_IN
23794: IFFALSE 23840
// for j = 1 to 3 do
23796: LD_ADDR_VAR 0 3
23800: PUSH
23801: DOUBLE
23802: LD_INT 1
23804: DEC
23805: ST_TO_ADDR
23806: LD_INT 3
23808: PUSH
23809: FOR_TO
23810: IFFALSE 23836
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23812: LD_VAR 0 2
23816: PPUSH
23817: CALL_OW 274
23821: PPUSH
23822: LD_VAR 0 3
23826: PPUSH
23827: LD_INT 99999
23829: PPUSH
23830: CALL_OW 277
23834: GO 23809
23836: POP
23837: POP
23838: GO 23793
23840: POP
23841: POP
// end ;
23842: LD_VAR 0 1
23846: RET
// export function hHackSetLevel10 ; var i , j ; begin
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
23851: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23852: LD_ADDR_VAR 0 2
23856: PUSH
23857: LD_INT 21
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PPUSH
23867: CALL_OW 69
23871: PUSH
23872: FOR_IN
23873: IFFALSE 23925
// if IsSelected ( i ) then
23875: LD_VAR 0 2
23879: PPUSH
23880: CALL_OW 306
23884: IFFALSE 23923
// begin for j := 1 to 4 do
23886: LD_ADDR_VAR 0 3
23890: PUSH
23891: DOUBLE
23892: LD_INT 1
23894: DEC
23895: ST_TO_ADDR
23896: LD_INT 4
23898: PUSH
23899: FOR_TO
23900: IFFALSE 23921
// SetSkill ( i , j , 10 ) ;
23902: LD_VAR 0 2
23906: PPUSH
23907: LD_VAR 0 3
23911: PPUSH
23912: LD_INT 10
23914: PPUSH
23915: CALL_OW 237
23919: GO 23899
23921: POP
23922: POP
// end ;
23923: GO 23872
23925: POP
23926: POP
// end ;
23927: LD_VAR 0 1
23931: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23932: LD_INT 0
23934: PPUSH
23935: PPUSH
23936: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23937: LD_ADDR_VAR 0 2
23941: PUSH
23942: LD_INT 22
23944: PUSH
23945: LD_OWVAR 2
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 21
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PPUSH
23968: CALL_OW 69
23972: PUSH
23973: FOR_IN
23974: IFFALSE 24015
// begin for j := 1 to 4 do
23976: LD_ADDR_VAR 0 3
23980: PUSH
23981: DOUBLE
23982: LD_INT 1
23984: DEC
23985: ST_TO_ADDR
23986: LD_INT 4
23988: PUSH
23989: FOR_TO
23990: IFFALSE 24011
// SetSkill ( i , j , 10 ) ;
23992: LD_VAR 0 2
23996: PPUSH
23997: LD_VAR 0 3
24001: PPUSH
24002: LD_INT 10
24004: PPUSH
24005: CALL_OW 237
24009: GO 23989
24011: POP
24012: POP
// end ;
24013: GO 23973
24015: POP
24016: POP
// end ;
24017: LD_VAR 0 1
24021: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24022: LD_INT 0
24024: PPUSH
// uc_side := your_side ;
24025: LD_ADDR_OWVAR 20
24029: PUSH
24030: LD_OWVAR 2
24034: ST_TO_ADDR
// uc_nation := nation ;
24035: LD_ADDR_OWVAR 21
24039: PUSH
24040: LD_VAR 0 1
24044: ST_TO_ADDR
// InitHc ;
24045: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24049: LD_INT 0
24051: PPUSH
24052: LD_VAR 0 2
24056: PPUSH
24057: LD_VAR 0 3
24061: PPUSH
24062: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24066: LD_VAR 0 4
24070: PPUSH
24071: LD_VAR 0 5
24075: PPUSH
24076: CALL_OW 428
24080: PUSH
24081: LD_INT 0
24083: EQUAL
24084: IFFALSE 24108
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24086: CALL_OW 44
24090: PPUSH
24091: LD_VAR 0 4
24095: PPUSH
24096: LD_VAR 0 5
24100: PPUSH
24101: LD_INT 1
24103: PPUSH
24104: CALL_OW 48
// end ;
24108: LD_VAR 0 6
24112: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24113: LD_INT 0
24115: PPUSH
24116: PPUSH
// uc_side := your_side ;
24117: LD_ADDR_OWVAR 20
24121: PUSH
24122: LD_OWVAR 2
24126: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24127: LD_VAR 0 1
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 3
24140: PUSH
24141: LD_INT 4
24143: PUSH
24144: LD_INT 5
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: IN
24154: IFFALSE 24166
// uc_nation := nation_american else
24156: LD_ADDR_OWVAR 21
24160: PUSH
24161: LD_INT 1
24163: ST_TO_ADDR
24164: GO 24209
// if chassis in [ 11 , 12 , 13 , 14 ] then
24166: LD_VAR 0 1
24170: PUSH
24171: LD_INT 11
24173: PUSH
24174: LD_INT 12
24176: PUSH
24177: LD_INT 13
24179: PUSH
24180: LD_INT 14
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: IN
24189: IFFALSE 24201
// uc_nation := nation_arabian else
24191: LD_ADDR_OWVAR 21
24195: PUSH
24196: LD_INT 2
24198: ST_TO_ADDR
24199: GO 24209
// uc_nation := nation_russian ;
24201: LD_ADDR_OWVAR 21
24205: PUSH
24206: LD_INT 3
24208: ST_TO_ADDR
// vc_chassis := chassis ;
24209: LD_ADDR_OWVAR 37
24213: PUSH
24214: LD_VAR 0 1
24218: ST_TO_ADDR
// vc_engine := engine ;
24219: LD_ADDR_OWVAR 39
24223: PUSH
24224: LD_VAR 0 2
24228: ST_TO_ADDR
// vc_control := control ;
24229: LD_ADDR_OWVAR 38
24233: PUSH
24234: LD_VAR 0 3
24238: ST_TO_ADDR
// vc_weapon := weapon ;
24239: LD_ADDR_OWVAR 40
24243: PUSH
24244: LD_VAR 0 4
24248: ST_TO_ADDR
// un := CreateVehicle ;
24249: LD_ADDR_VAR 0 8
24253: PUSH
24254: CALL_OW 45
24258: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24259: LD_VAR 0 8
24263: PPUSH
24264: LD_INT 0
24266: PPUSH
24267: LD_INT 5
24269: PPUSH
24270: CALL_OW 12
24274: PPUSH
24275: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24279: LD_VAR 0 8
24283: PPUSH
24284: LD_VAR 0 5
24288: PPUSH
24289: LD_VAR 0 6
24293: PPUSH
24294: LD_INT 1
24296: PPUSH
24297: CALL_OW 48
// end ;
24301: LD_VAR 0 7
24305: RET
// export hInvincible ; every 1 do
24306: GO 24308
24308: DISABLE
// hInvincible := [ ] ;
24309: LD_ADDR_EXP 101
24313: PUSH
24314: EMPTY
24315: ST_TO_ADDR
24316: END
// every 10 do var i ;
24317: GO 24319
24319: DISABLE
24320: LD_INT 0
24322: PPUSH
// begin enable ;
24323: ENABLE
// if not hInvincible then
24324: LD_EXP 101
24328: NOT
24329: IFFALSE 24333
// exit ;
24331: GO 24377
// for i in hInvincible do
24333: LD_ADDR_VAR 0 1
24337: PUSH
24338: LD_EXP 101
24342: PUSH
24343: FOR_IN
24344: IFFALSE 24375
// if GetLives ( i ) < 1000 then
24346: LD_VAR 0 1
24350: PPUSH
24351: CALL_OW 256
24355: PUSH
24356: LD_INT 1000
24358: LESS
24359: IFFALSE 24373
// SetLives ( i , 1000 ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_INT 1000
24368: PPUSH
24369: CALL_OW 234
24373: GO 24343
24375: POP
24376: POP
// end ;
24377: PPOPN 1
24379: END
// export function hHackInvincible ; var i ; begin
24380: LD_INT 0
24382: PPUSH
24383: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24384: LD_ADDR_VAR 0 2
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: LD_INT 21
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 21
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: LIST
24416: PPUSH
24417: CALL_OW 69
24421: PUSH
24422: FOR_IN
24423: IFFALSE 24484
// if IsSelected ( i ) then
24425: LD_VAR 0 2
24429: PPUSH
24430: CALL_OW 306
24434: IFFALSE 24482
// begin if i in hInvincible then
24436: LD_VAR 0 2
24440: PUSH
24441: LD_EXP 101
24445: IN
24446: IFFALSE 24466
// hInvincible := hInvincible diff i else
24448: LD_ADDR_EXP 101
24452: PUSH
24453: LD_EXP 101
24457: PUSH
24458: LD_VAR 0 2
24462: DIFF
24463: ST_TO_ADDR
24464: GO 24482
// hInvincible := hInvincible union i ;
24466: LD_ADDR_EXP 101
24470: PUSH
24471: LD_EXP 101
24475: PUSH
24476: LD_VAR 0 2
24480: UNION
24481: ST_TO_ADDR
// end ;
24482: GO 24422
24484: POP
24485: POP
// end ;
24486: LD_VAR 0 1
24490: RET
// export function hHackInvisible ; var i , j ; begin
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_INT 21
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PPUSH
24511: CALL_OW 69
24515: PUSH
24516: FOR_IN
24517: IFFALSE 24541
// if IsSelected ( i ) then
24519: LD_VAR 0 2
24523: PPUSH
24524: CALL_OW 306
24528: IFFALSE 24539
// ComForceInvisible ( i ) ;
24530: LD_VAR 0 2
24534: PPUSH
24535: CALL_OW 496
24539: GO 24516
24541: POP
24542: POP
// end ;
24543: LD_VAR 0 1
24547: RET
// export function hHackChangeYourSide ; begin
24548: LD_INT 0
24550: PPUSH
// if your_side = 8 then
24551: LD_OWVAR 2
24555: PUSH
24556: LD_INT 8
24558: EQUAL
24559: IFFALSE 24571
// your_side := 0 else
24561: LD_ADDR_OWVAR 2
24565: PUSH
24566: LD_INT 0
24568: ST_TO_ADDR
24569: GO 24585
// your_side := your_side + 1 ;
24571: LD_ADDR_OWVAR 2
24575: PUSH
24576: LD_OWVAR 2
24580: PUSH
24581: LD_INT 1
24583: PLUS
24584: ST_TO_ADDR
// end ;
24585: LD_VAR 0 1
24589: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24590: LD_INT 0
24592: PPUSH
24593: PPUSH
24594: PPUSH
// for i in all_units do
24595: LD_ADDR_VAR 0 2
24599: PUSH
24600: LD_OWVAR 3
24604: PUSH
24605: FOR_IN
24606: IFFALSE 24684
// if IsSelected ( i ) then
24608: LD_VAR 0 2
24612: PPUSH
24613: CALL_OW 306
24617: IFFALSE 24682
// begin j := GetSide ( i ) ;
24619: LD_ADDR_VAR 0 3
24623: PUSH
24624: LD_VAR 0 2
24628: PPUSH
24629: CALL_OW 255
24633: ST_TO_ADDR
// if j = 8 then
24634: LD_VAR 0 3
24638: PUSH
24639: LD_INT 8
24641: EQUAL
24642: IFFALSE 24654
// j := 0 else
24644: LD_ADDR_VAR 0 3
24648: PUSH
24649: LD_INT 0
24651: ST_TO_ADDR
24652: GO 24668
// j := j + 1 ;
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: LD_VAR 0 3
24663: PUSH
24664: LD_INT 1
24666: PLUS
24667: ST_TO_ADDR
// SetSide ( i , j ) ;
24668: LD_VAR 0 2
24672: PPUSH
24673: LD_VAR 0 3
24677: PPUSH
24678: CALL_OW 235
// end ;
24682: GO 24605
24684: POP
24685: POP
// end ;
24686: LD_VAR 0 1
24690: RET
// export function hHackFog ; begin
24691: LD_INT 0
24693: PPUSH
// FogOff ( true ) ;
24694: LD_INT 1
24696: PPUSH
24697: CALL_OW 344
// end ;
24701: LD_VAR 0 1
24705: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24706: LD_INT 0
24708: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: LD_VAR 0 2
24718: PPUSH
24719: LD_VAR 0 3
24723: PPUSH
24724: LD_INT 1
24726: PPUSH
24727: LD_INT 1
24729: PPUSH
24730: CALL_OW 483
// CenterOnXY ( x , y ) ;
24734: LD_VAR 0 2
24738: PPUSH
24739: LD_VAR 0 3
24743: PPUSH
24744: CALL_OW 84
// end ;
24748: LD_VAR 0 4
24752: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24753: LD_INT 0
24755: PPUSH
24756: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24757: LD_VAR 0 1
24761: NOT
24762: PUSH
24763: LD_VAR 0 2
24767: PPUSH
24768: LD_VAR 0 3
24772: PPUSH
24773: CALL_OW 488
24777: NOT
24778: OR
24779: PUSH
24780: LD_VAR 0 1
24784: PPUSH
24785: CALL_OW 266
24789: PUSH
24790: LD_INT 3
24792: NONEQUAL
24793: PUSH
24794: LD_VAR 0 1
24798: PPUSH
24799: CALL_OW 247
24803: PUSH
24804: LD_INT 1
24806: EQUAL
24807: NOT
24808: AND
24809: OR
24810: IFFALSE 24814
// exit ;
24812: GO 24963
// if GetType ( factory ) = unit_human then
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 247
24823: PUSH
24824: LD_INT 1
24826: EQUAL
24827: IFFALSE 24844
// factory := IsInUnit ( factory ) ;
24829: LD_ADDR_VAR 0 1
24833: PUSH
24834: LD_VAR 0 1
24838: PPUSH
24839: CALL_OW 310
24843: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24844: LD_VAR 0 1
24848: PPUSH
24849: CALL_OW 266
24853: PUSH
24854: LD_INT 3
24856: NONEQUAL
24857: IFFALSE 24861
// exit ;
24859: GO 24963
// if HexInfo ( x , y ) = factory then
24861: LD_VAR 0 2
24865: PPUSH
24866: LD_VAR 0 3
24870: PPUSH
24871: CALL_OW 428
24875: PUSH
24876: LD_VAR 0 1
24880: EQUAL
24881: IFFALSE 24908
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24883: LD_ADDR_EXP 102
24887: PUSH
24888: LD_EXP 102
24892: PPUSH
24893: LD_VAR 0 1
24897: PPUSH
24898: LD_INT 0
24900: PPUSH
24901: CALL_OW 1
24905: ST_TO_ADDR
24906: GO 24959
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24908: LD_ADDR_EXP 102
24912: PUSH
24913: LD_EXP 102
24917: PPUSH
24918: LD_VAR 0 1
24922: PPUSH
24923: LD_VAR 0 1
24927: PPUSH
24928: CALL_OW 255
24932: PUSH
24933: LD_VAR 0 1
24937: PUSH
24938: LD_VAR 0 2
24942: PUSH
24943: LD_VAR 0 3
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: PPUSH
24954: CALL_OW 1
24958: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24959: CALL 24968 0 0
// end ;
24963: LD_VAR 0 4
24967: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24968: LD_INT 0
24970: PPUSH
24971: PPUSH
24972: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24973: LD_STRING resetFactoryWaypoint();
24975: PPUSH
24976: CALL_OW 559
// if factoryWaypoints then
24980: LD_EXP 102
24984: IFFALSE 25110
// begin list := PrepareArray ( factoryWaypoints ) ;
24986: LD_ADDR_VAR 0 3
24990: PUSH
24991: LD_EXP 102
24995: PPUSH
24996: CALL 72415 0 1
25000: ST_TO_ADDR
// for i := 1 to list do
25001: LD_ADDR_VAR 0 2
25005: PUSH
25006: DOUBLE
25007: LD_INT 1
25009: DEC
25010: ST_TO_ADDR
25011: LD_VAR 0 3
25015: PUSH
25016: FOR_TO
25017: IFFALSE 25108
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25019: LD_STRING setFactoryWaypointXY(
25021: PUSH
25022: LD_VAR 0 3
25026: PUSH
25027: LD_VAR 0 2
25031: ARRAY
25032: PUSH
25033: LD_INT 1
25035: ARRAY
25036: STR
25037: PUSH
25038: LD_STRING ,
25040: STR
25041: PUSH
25042: LD_VAR 0 3
25046: PUSH
25047: LD_VAR 0 2
25051: ARRAY
25052: PUSH
25053: LD_INT 2
25055: ARRAY
25056: STR
25057: PUSH
25058: LD_STRING ,
25060: STR
25061: PUSH
25062: LD_VAR 0 3
25066: PUSH
25067: LD_VAR 0 2
25071: ARRAY
25072: PUSH
25073: LD_INT 3
25075: ARRAY
25076: STR
25077: PUSH
25078: LD_STRING ,
25080: STR
25081: PUSH
25082: LD_VAR 0 3
25086: PUSH
25087: LD_VAR 0 2
25091: ARRAY
25092: PUSH
25093: LD_INT 4
25095: ARRAY
25096: STR
25097: PUSH
25098: LD_STRING )
25100: STR
25101: PPUSH
25102: CALL_OW 559
25106: GO 25016
25108: POP
25109: POP
// end ; end ;
25110: LD_VAR 0 1
25114: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25115: LD_INT 0
25117: PPUSH
// if HexInfo ( x , y ) = warehouse then
25118: LD_VAR 0 2
25122: PPUSH
25123: LD_VAR 0 3
25127: PPUSH
25128: CALL_OW 428
25132: PUSH
25133: LD_VAR 0 1
25137: EQUAL
25138: IFFALSE 25165
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25140: LD_ADDR_EXP 103
25144: PUSH
25145: LD_EXP 103
25149: PPUSH
25150: LD_VAR 0 1
25154: PPUSH
25155: LD_INT 0
25157: PPUSH
25158: CALL_OW 1
25162: ST_TO_ADDR
25163: GO 25216
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25165: LD_ADDR_EXP 103
25169: PUSH
25170: LD_EXP 103
25174: PPUSH
25175: LD_VAR 0 1
25179: PPUSH
25180: LD_VAR 0 1
25184: PPUSH
25185: CALL_OW 255
25189: PUSH
25190: LD_VAR 0 1
25194: PUSH
25195: LD_VAR 0 2
25199: PUSH
25200: LD_VAR 0 3
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: PPUSH
25211: CALL_OW 1
25215: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25216: CALL 25225 0 0
// end ;
25220: LD_VAR 0 4
25224: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25225: LD_INT 0
25227: PPUSH
25228: PPUSH
25229: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25230: LD_STRING resetWarehouseGatheringPoints();
25232: PPUSH
25233: CALL_OW 559
// if warehouseGatheringPoints then
25237: LD_EXP 103
25241: IFFALSE 25367
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25243: LD_ADDR_VAR 0 3
25247: PUSH
25248: LD_EXP 103
25252: PPUSH
25253: CALL 72415 0 1
25257: ST_TO_ADDR
// for i := 1 to list do
25258: LD_ADDR_VAR 0 2
25262: PUSH
25263: DOUBLE
25264: LD_INT 1
25266: DEC
25267: ST_TO_ADDR
25268: LD_VAR 0 3
25272: PUSH
25273: FOR_TO
25274: IFFALSE 25365
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25276: LD_STRING setWarehouseGatheringPointXY(
25278: PUSH
25279: LD_VAR 0 3
25283: PUSH
25284: LD_VAR 0 2
25288: ARRAY
25289: PUSH
25290: LD_INT 1
25292: ARRAY
25293: STR
25294: PUSH
25295: LD_STRING ,
25297: STR
25298: PUSH
25299: LD_VAR 0 3
25303: PUSH
25304: LD_VAR 0 2
25308: ARRAY
25309: PUSH
25310: LD_INT 2
25312: ARRAY
25313: STR
25314: PUSH
25315: LD_STRING ,
25317: STR
25318: PUSH
25319: LD_VAR 0 3
25323: PUSH
25324: LD_VAR 0 2
25328: ARRAY
25329: PUSH
25330: LD_INT 3
25332: ARRAY
25333: STR
25334: PUSH
25335: LD_STRING ,
25337: STR
25338: PUSH
25339: LD_VAR 0 3
25343: PUSH
25344: LD_VAR 0 2
25348: ARRAY
25349: PUSH
25350: LD_INT 4
25352: ARRAY
25353: STR
25354: PUSH
25355: LD_STRING )
25357: STR
25358: PPUSH
25359: CALL_OW 559
25363: GO 25273
25365: POP
25366: POP
// end ; end ;
25367: LD_VAR 0 1
25371: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25372: LD_EXP 103
25376: IFFALSE 26061
25378: GO 25380
25380: DISABLE
25381: LD_INT 0
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
// begin enable ;
25392: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_EXP 103
25402: PPUSH
25403: CALL 72415 0 1
25407: ST_TO_ADDR
// if not list then
25408: LD_VAR 0 3
25412: NOT
25413: IFFALSE 25417
// exit ;
25415: GO 26061
// for i := 1 to list do
25417: LD_ADDR_VAR 0 1
25421: PUSH
25422: DOUBLE
25423: LD_INT 1
25425: DEC
25426: ST_TO_ADDR
25427: LD_VAR 0 3
25431: PUSH
25432: FOR_TO
25433: IFFALSE 26059
// begin depot := list [ i ] [ 2 ] ;
25435: LD_ADDR_VAR 0 8
25439: PUSH
25440: LD_VAR 0 3
25444: PUSH
25445: LD_VAR 0 1
25449: ARRAY
25450: PUSH
25451: LD_INT 2
25453: ARRAY
25454: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25455: LD_ADDR_VAR 0 5
25459: PUSH
25460: LD_VAR 0 3
25464: PUSH
25465: LD_VAR 0 1
25469: ARRAY
25470: PUSH
25471: LD_INT 1
25473: ARRAY
25474: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25475: LD_VAR 0 8
25479: PPUSH
25480: CALL_OW 301
25484: PUSH
25485: LD_VAR 0 5
25489: PUSH
25490: LD_VAR 0 8
25494: PPUSH
25495: CALL_OW 255
25499: NONEQUAL
25500: OR
25501: IFFALSE 25530
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25503: LD_ADDR_EXP 103
25507: PUSH
25508: LD_EXP 103
25512: PPUSH
25513: LD_VAR 0 8
25517: PPUSH
25518: LD_INT 0
25520: PPUSH
25521: CALL_OW 1
25525: ST_TO_ADDR
// exit ;
25526: POP
25527: POP
25528: GO 26061
// end ; x := list [ i ] [ 3 ] ;
25530: LD_ADDR_VAR 0 6
25534: PUSH
25535: LD_VAR 0 3
25539: PUSH
25540: LD_VAR 0 1
25544: ARRAY
25545: PUSH
25546: LD_INT 3
25548: ARRAY
25549: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25550: LD_ADDR_VAR 0 7
25554: PUSH
25555: LD_VAR 0 3
25559: PUSH
25560: LD_VAR 0 1
25564: ARRAY
25565: PUSH
25566: LD_INT 4
25568: ARRAY
25569: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25570: LD_ADDR_VAR 0 9
25574: PUSH
25575: LD_VAR 0 6
25579: PPUSH
25580: LD_VAR 0 7
25584: PPUSH
25585: LD_INT 16
25587: PPUSH
25588: CALL 71003 0 3
25592: ST_TO_ADDR
// if not cratesNearbyPoint then
25593: LD_VAR 0 9
25597: NOT
25598: IFFALSE 25604
// exit ;
25600: POP
25601: POP
25602: GO 26061
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25604: LD_ADDR_VAR 0 4
25608: PUSH
25609: LD_INT 22
25611: PUSH
25612: LD_VAR 0 5
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 3
25623: PUSH
25624: LD_INT 60
25626: PUSH
25627: EMPTY
25628: LIST
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 91
25636: PUSH
25637: LD_VAR 0 8
25641: PUSH
25642: LD_INT 6
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: LD_INT 25
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 25
25665: PUSH
25666: LD_INT 16
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: PPUSH
25684: CALL_OW 69
25688: PUSH
25689: LD_VAR 0 8
25693: PPUSH
25694: CALL_OW 313
25698: PPUSH
25699: LD_INT 3
25701: PUSH
25702: LD_INT 60
25704: PUSH
25705: EMPTY
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: LD_INT 25
25717: PUSH
25718: LD_INT 2
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 25
25727: PUSH
25728: LD_INT 16
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 72
25748: UNION
25749: ST_TO_ADDR
// if tmp then
25750: LD_VAR 0 4
25754: IFFALSE 25834
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25756: LD_ADDR_VAR 0 4
25760: PUSH
25761: LD_VAR 0 4
25765: PPUSH
25766: LD_INT 3
25768: PPUSH
25769: CALL 68972 0 2
25773: ST_TO_ADDR
// for j in tmp do
25774: LD_ADDR_VAR 0 2
25778: PUSH
25779: LD_VAR 0 4
25783: PUSH
25784: FOR_IN
25785: IFFALSE 25828
// begin if IsInUnit ( j ) then
25787: LD_VAR 0 2
25791: PPUSH
25792: CALL_OW 310
25796: IFFALSE 25807
// ComExit ( j ) ;
25798: LD_VAR 0 2
25802: PPUSH
25803: CALL 69055 0 1
// AddComCollect ( j , x , y ) ;
25807: LD_VAR 0 2
25811: PPUSH
25812: LD_VAR 0 6
25816: PPUSH
25817: LD_VAR 0 7
25821: PPUSH
25822: CALL_OW 177
// end ;
25826: GO 25784
25828: POP
25829: POP
// exit ;
25830: POP
25831: POP
25832: GO 26061
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25834: LD_ADDR_VAR 0 4
25838: PUSH
25839: LD_INT 22
25841: PUSH
25842: LD_VAR 0 5
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 91
25853: PUSH
25854: LD_VAR 0 8
25858: PUSH
25859: LD_INT 8
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 2
25869: PUSH
25870: LD_INT 34
25872: PUSH
25873: LD_INT 12
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 34
25882: PUSH
25883: LD_INT 51
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 34
25892: PUSH
25893: LD_INT 32
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 34
25902: PUSH
25903: LD_INT 89
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: ST_TO_ADDR
// if tmp then
25927: LD_VAR 0 4
25931: IFFALSE 26057
// begin for j in tmp do
25933: LD_ADDR_VAR 0 2
25937: PUSH
25938: LD_VAR 0 4
25942: PUSH
25943: FOR_IN
25944: IFFALSE 26055
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25946: LD_VAR 0 2
25950: PPUSH
25951: CALL_OW 262
25955: PUSH
25956: LD_INT 3
25958: EQUAL
25959: PUSH
25960: LD_VAR 0 2
25964: PPUSH
25965: CALL_OW 261
25969: PUSH
25970: LD_INT 20
25972: GREATER
25973: OR
25974: PUSH
25975: LD_VAR 0 2
25979: PPUSH
25980: CALL_OW 314
25984: NOT
25985: AND
25986: PUSH
25987: LD_VAR 0 2
25991: PPUSH
25992: CALL_OW 263
25996: PUSH
25997: LD_INT 1
25999: NONEQUAL
26000: PUSH
26001: LD_VAR 0 2
26005: PPUSH
26006: CALL_OW 311
26010: OR
26011: AND
26012: IFFALSE 26053
// begin ComCollect ( j , x , y ) ;
26014: LD_VAR 0 2
26018: PPUSH
26019: LD_VAR 0 6
26023: PPUSH
26024: LD_VAR 0 7
26028: PPUSH
26029: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26033: LD_VAR 0 2
26037: PPUSH
26038: LD_VAR 0 8
26042: PPUSH
26043: CALL_OW 172
// exit ;
26047: POP
26048: POP
26049: POP
26050: POP
26051: GO 26061
// end ;
26053: GO 25943
26055: POP
26056: POP
// end ; end ;
26057: GO 25432
26059: POP
26060: POP
// end ; end_of_file
26061: PPOPN 9
26063: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26064: LD_VAR 0 1
26068: PUSH
26069: LD_INT 200
26071: DOUBLE
26072: GREATEREQUAL
26073: IFFALSE 26081
26075: LD_INT 299
26077: DOUBLE
26078: LESSEQUAL
26079: IFTRUE 26083
26081: GO 26115
26083: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26084: LD_VAR 0 1
26088: PPUSH
26089: LD_VAR 0 2
26093: PPUSH
26094: LD_VAR 0 3
26098: PPUSH
26099: LD_VAR 0 4
26103: PPUSH
26104: LD_VAR 0 5
26108: PPUSH
26109: CALL 26603 0 5
26113: GO 26192
26115: LD_INT 300
26117: DOUBLE
26118: GREATEREQUAL
26119: IFFALSE 26127
26121: LD_INT 399
26123: DOUBLE
26124: LESSEQUAL
26125: IFTRUE 26129
26127: GO 26191
26129: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26130: LD_VAR 0 1
26134: PPUSH
26135: LD_VAR 0 2
26139: PPUSH
26140: LD_VAR 0 3
26144: PPUSH
26145: LD_VAR 0 4
26149: PPUSH
26150: LD_VAR 0 5
26154: PPUSH
26155: LD_VAR 0 6
26159: PPUSH
26160: LD_VAR 0 7
26164: PPUSH
26165: LD_VAR 0 8
26169: PPUSH
26170: LD_VAR 0 9
26174: PPUSH
26175: LD_VAR 0 10
26179: PPUSH
26180: LD_VAR 0 11
26184: PPUSH
26185: CALL 22765 0 11
26189: GO 26192
26191: POP
// end ;
26192: PPOPN 11
26194: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26195: LD_VAR 0 1
26199: PPUSH
26200: LD_VAR 0 2
26204: PPUSH
26205: LD_VAR 0 3
26209: PPUSH
26210: LD_VAR 0 4
26214: PPUSH
26215: LD_VAR 0 5
26219: PPUSH
26220: CALL 26339 0 5
// end ; end_of_file
26224: PPOPN 5
26226: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26227: LD_INT 0
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26233: LD_VAR 0 1
26237: PPUSH
26238: CALL_OW 264
26242: PUSH
26243: LD_INT 91
26245: EQUAL
26246: IFFALSE 26318
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26248: LD_INT 68
26250: PPUSH
26251: LD_VAR 0 1
26255: PPUSH
26256: CALL_OW 255
26260: PPUSH
26261: CALL_OW 321
26265: PUSH
26266: LD_INT 2
26268: EQUAL
26269: IFFALSE 26281
// eff := 70 else
26271: LD_ADDR_VAR 0 4
26275: PUSH
26276: LD_INT 70
26278: ST_TO_ADDR
26279: GO 26289
// eff := 30 ;
26281: LD_ADDR_VAR 0 4
26285: PUSH
26286: LD_INT 30
26288: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 250
26298: PPUSH
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL_OW 251
26308: PPUSH
26309: LD_VAR 0 4
26313: PPUSH
26314: CALL_OW 495
// end ; end ;
26318: LD_VAR 0 2
26322: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26323: LD_INT 0
26325: PPUSH
// end ;
26326: LD_VAR 0 4
26330: RET
// export function SOS_Command ( cmd ) ; begin
26331: LD_INT 0
26333: PPUSH
// end ;
26334: LD_VAR 0 2
26338: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26339: LD_INT 0
26341: PPUSH
// end ;
26342: LD_VAR 0 6
26346: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26347: LD_INT 0
26349: PPUSH
26350: PPUSH
// if not vehicle or not factory then
26351: LD_VAR 0 1
26355: NOT
26356: PUSH
26357: LD_VAR 0 2
26361: NOT
26362: OR
26363: IFFALSE 26367
// exit ;
26365: GO 26598
// if factoryWaypoints >= factory then
26367: LD_EXP 102
26371: PUSH
26372: LD_VAR 0 2
26376: GREATEREQUAL
26377: IFFALSE 26598
// if factoryWaypoints [ factory ] then
26379: LD_EXP 102
26383: PUSH
26384: LD_VAR 0 2
26388: ARRAY
26389: IFFALSE 26598
// begin if GetControl ( vehicle ) = control_manual then
26391: LD_VAR 0 1
26395: PPUSH
26396: CALL_OW 263
26400: PUSH
26401: LD_INT 1
26403: EQUAL
26404: IFFALSE 26485
// begin driver := IsDrivenBy ( vehicle ) ;
26406: LD_ADDR_VAR 0 4
26410: PUSH
26411: LD_VAR 0 1
26415: PPUSH
26416: CALL_OW 311
26420: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26421: LD_VAR 0 4
26425: PPUSH
26426: LD_EXP 102
26430: PUSH
26431: LD_VAR 0 2
26435: ARRAY
26436: PUSH
26437: LD_INT 3
26439: ARRAY
26440: PPUSH
26441: LD_EXP 102
26445: PUSH
26446: LD_VAR 0 2
26450: ARRAY
26451: PUSH
26452: LD_INT 4
26454: ARRAY
26455: PPUSH
26456: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26460: LD_VAR 0 4
26464: PPUSH
26465: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26469: LD_VAR 0 4
26473: PPUSH
26474: LD_VAR 0 2
26478: PPUSH
26479: CALL_OW 180
// end else
26483: GO 26598
// if GetControl ( vehicle ) = control_remote then
26485: LD_VAR 0 1
26489: PPUSH
26490: CALL_OW 263
26494: PUSH
26495: LD_INT 2
26497: EQUAL
26498: IFFALSE 26559
// begin wait ( 0 0$2 ) ;
26500: LD_INT 70
26502: PPUSH
26503: CALL_OW 67
// if Connect ( vehicle ) then
26507: LD_VAR 0 1
26511: PPUSH
26512: CALL 39263 0 1
26516: IFFALSE 26557
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26518: LD_VAR 0 1
26522: PPUSH
26523: LD_EXP 102
26527: PUSH
26528: LD_VAR 0 2
26532: ARRAY
26533: PUSH
26534: LD_INT 3
26536: ARRAY
26537: PPUSH
26538: LD_EXP 102
26542: PUSH
26543: LD_VAR 0 2
26547: ARRAY
26548: PUSH
26549: LD_INT 4
26551: ARRAY
26552: PPUSH
26553: CALL_OW 171
// end else
26557: GO 26598
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26559: LD_VAR 0 1
26563: PPUSH
26564: LD_EXP 102
26568: PUSH
26569: LD_VAR 0 2
26573: ARRAY
26574: PUSH
26575: LD_INT 3
26577: ARRAY
26578: PPUSH
26579: LD_EXP 102
26583: PUSH
26584: LD_VAR 0 2
26588: ARRAY
26589: PUSH
26590: LD_INT 4
26592: ARRAY
26593: PPUSH
26594: CALL_OW 171
// end ; end ;
26598: LD_VAR 0 3
26602: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26603: LD_INT 0
26605: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26606: LD_VAR 0 1
26610: PUSH
26611: LD_INT 250
26613: EQUAL
26614: PUSH
26615: LD_VAR 0 2
26619: PPUSH
26620: CALL_OW 264
26624: PUSH
26625: LD_INT 81
26627: EQUAL
26628: AND
26629: IFFALSE 26650
// MinerPlaceMine ( unit , x , y ) ;
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_VAR 0 4
26640: PPUSH
26641: LD_VAR 0 5
26645: PPUSH
26646: CALL 29474 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26650: LD_VAR 0 1
26654: PUSH
26655: LD_INT 251
26657: EQUAL
26658: PUSH
26659: LD_VAR 0 2
26663: PPUSH
26664: CALL_OW 264
26668: PUSH
26669: LD_INT 81
26671: EQUAL
26672: AND
26673: IFFALSE 26694
// MinerDetonateMine ( unit , x , y ) ;
26675: LD_VAR 0 2
26679: PPUSH
26680: LD_VAR 0 4
26684: PPUSH
26685: LD_VAR 0 5
26689: PPUSH
26690: CALL 29749 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26694: LD_VAR 0 1
26698: PUSH
26699: LD_INT 252
26701: EQUAL
26702: PUSH
26703: LD_VAR 0 2
26707: PPUSH
26708: CALL_OW 264
26712: PUSH
26713: LD_INT 81
26715: EQUAL
26716: AND
26717: IFFALSE 26738
// MinerCreateMinefield ( unit , x , y ) ;
26719: LD_VAR 0 2
26723: PPUSH
26724: LD_VAR 0 4
26728: PPUSH
26729: LD_VAR 0 5
26733: PPUSH
26734: CALL 30166 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26738: LD_VAR 0 1
26742: PUSH
26743: LD_INT 253
26745: EQUAL
26746: PUSH
26747: LD_VAR 0 2
26751: PPUSH
26752: CALL_OW 257
26756: PUSH
26757: LD_INT 5
26759: EQUAL
26760: AND
26761: IFFALSE 26782
// ComBinocular ( unit , x , y ) ;
26763: LD_VAR 0 2
26767: PPUSH
26768: LD_VAR 0 4
26772: PPUSH
26773: LD_VAR 0 5
26777: PPUSH
26778: CALL 30535 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26782: LD_VAR 0 1
26786: PUSH
26787: LD_INT 254
26789: EQUAL
26790: PUSH
26791: LD_VAR 0 2
26795: PPUSH
26796: CALL_OW 264
26800: PUSH
26801: LD_INT 99
26803: EQUAL
26804: AND
26805: PUSH
26806: LD_VAR 0 3
26810: PPUSH
26811: CALL_OW 263
26815: PUSH
26816: LD_INT 3
26818: EQUAL
26819: AND
26820: IFFALSE 26836
// HackDestroyVehicle ( unit , selectedUnit ) ;
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_VAR 0 3
26831: PPUSH
26832: CALL 28838 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26836: LD_VAR 0 1
26840: PUSH
26841: LD_INT 255
26843: EQUAL
26844: PUSH
26845: LD_VAR 0 2
26849: PPUSH
26850: CALL_OW 264
26854: PUSH
26855: LD_INT 14
26857: PUSH
26858: LD_INT 53
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: IN
26865: AND
26866: PUSH
26867: LD_VAR 0 4
26871: PPUSH
26872: LD_VAR 0 5
26876: PPUSH
26877: CALL_OW 488
26881: AND
26882: IFFALSE 26906
// CutTreeXYR ( unit , x , y , 12 ) ;
26884: LD_VAR 0 2
26888: PPUSH
26889: LD_VAR 0 4
26893: PPUSH
26894: LD_VAR 0 5
26898: PPUSH
26899: LD_INT 12
26901: PPUSH
26902: CALL 27001 0 4
// if cmd = 256 then
26906: LD_VAR 0 1
26910: PUSH
26911: LD_INT 256
26913: EQUAL
26914: IFFALSE 26935
// SetFactoryWaypoint ( unit , x , y ) ;
26916: LD_VAR 0 2
26920: PPUSH
26921: LD_VAR 0 4
26925: PPUSH
26926: LD_VAR 0 5
26930: PPUSH
26931: CALL 24753 0 3
// if cmd = 257 then
26935: LD_VAR 0 1
26939: PUSH
26940: LD_INT 257
26942: EQUAL
26943: IFFALSE 26964
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26945: LD_VAR 0 2
26949: PPUSH
26950: LD_VAR 0 4
26954: PPUSH
26955: LD_VAR 0 5
26959: PPUSH
26960: CALL 25115 0 3
// if cmd = 258 then
26964: LD_VAR 0 1
26968: PUSH
26969: LD_INT 258
26971: EQUAL
26972: IFFALSE 26996
// BurnTreeXYR ( unit , x , y , 8 ) ;
26974: LD_VAR 0 2
26978: PPUSH
26979: LD_VAR 0 4
26983: PPUSH
26984: LD_VAR 0 5
26988: PPUSH
26989: LD_INT 8
26991: PPUSH
26992: CALL 27395 0 4
// end ;
26996: LD_VAR 0 6
27000: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27001: LD_INT 0
27003: PPUSH
27004: PPUSH
27005: PPUSH
27006: PPUSH
27007: PPUSH
27008: PPUSH
27009: PPUSH
27010: PPUSH
27011: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27012: LD_VAR 0 1
27016: PPUSH
27017: CALL_OW 302
27021: NOT
27022: PUSH
27023: LD_VAR 0 2
27027: PPUSH
27028: LD_VAR 0 3
27032: PPUSH
27033: CALL_OW 488
27037: NOT
27038: OR
27039: PUSH
27040: LD_VAR 0 4
27044: NOT
27045: OR
27046: IFFALSE 27050
// exit ;
27048: GO 27390
// list := [ ] ;
27050: LD_ADDR_VAR 0 13
27054: PUSH
27055: EMPTY
27056: ST_TO_ADDR
// if x - r < 0 then
27057: LD_VAR 0 2
27061: PUSH
27062: LD_VAR 0 4
27066: MINUS
27067: PUSH
27068: LD_INT 0
27070: LESS
27071: IFFALSE 27083
// min_x := 0 else
27073: LD_ADDR_VAR 0 7
27077: PUSH
27078: LD_INT 0
27080: ST_TO_ADDR
27081: GO 27099
// min_x := x - r ;
27083: LD_ADDR_VAR 0 7
27087: PUSH
27088: LD_VAR 0 2
27092: PUSH
27093: LD_VAR 0 4
27097: MINUS
27098: ST_TO_ADDR
// if y - r < 0 then
27099: LD_VAR 0 3
27103: PUSH
27104: LD_VAR 0 4
27108: MINUS
27109: PUSH
27110: LD_INT 0
27112: LESS
27113: IFFALSE 27125
// min_y := 0 else
27115: LD_ADDR_VAR 0 8
27119: PUSH
27120: LD_INT 0
27122: ST_TO_ADDR
27123: GO 27141
// min_y := y - r ;
27125: LD_ADDR_VAR 0 8
27129: PUSH
27130: LD_VAR 0 3
27134: PUSH
27135: LD_VAR 0 4
27139: MINUS
27140: ST_TO_ADDR
// max_x := x + r ;
27141: LD_ADDR_VAR 0 9
27145: PUSH
27146: LD_VAR 0 2
27150: PUSH
27151: LD_VAR 0 4
27155: PLUS
27156: ST_TO_ADDR
// max_y := y + r ;
27157: LD_ADDR_VAR 0 10
27161: PUSH
27162: LD_VAR 0 3
27166: PUSH
27167: LD_VAR 0 4
27171: PLUS
27172: ST_TO_ADDR
// for _x = min_x to max_x do
27173: LD_ADDR_VAR 0 11
27177: PUSH
27178: DOUBLE
27179: LD_VAR 0 7
27183: DEC
27184: ST_TO_ADDR
27185: LD_VAR 0 9
27189: PUSH
27190: FOR_TO
27191: IFFALSE 27308
// for _y = min_y to max_y do
27193: LD_ADDR_VAR 0 12
27197: PUSH
27198: DOUBLE
27199: LD_VAR 0 8
27203: DEC
27204: ST_TO_ADDR
27205: LD_VAR 0 10
27209: PUSH
27210: FOR_TO
27211: IFFALSE 27304
// begin if not ValidHex ( _x , _y ) then
27213: LD_VAR 0 11
27217: PPUSH
27218: LD_VAR 0 12
27222: PPUSH
27223: CALL_OW 488
27227: NOT
27228: IFFALSE 27232
// continue ;
27230: GO 27210
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27232: LD_VAR 0 11
27236: PPUSH
27237: LD_VAR 0 12
27241: PPUSH
27242: CALL_OW 351
27246: PUSH
27247: LD_VAR 0 11
27251: PPUSH
27252: LD_VAR 0 12
27256: PPUSH
27257: CALL_OW 554
27261: AND
27262: IFFALSE 27302
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27264: LD_ADDR_VAR 0 13
27268: PUSH
27269: LD_VAR 0 13
27273: PPUSH
27274: LD_VAR 0 13
27278: PUSH
27279: LD_INT 1
27281: PLUS
27282: PPUSH
27283: LD_VAR 0 11
27287: PUSH
27288: LD_VAR 0 12
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PPUSH
27297: CALL_OW 2
27301: ST_TO_ADDR
// end ;
27302: GO 27210
27304: POP
27305: POP
27306: GO 27190
27308: POP
27309: POP
// if not list then
27310: LD_VAR 0 13
27314: NOT
27315: IFFALSE 27319
// exit ;
27317: GO 27390
// for i in list do
27319: LD_ADDR_VAR 0 6
27323: PUSH
27324: LD_VAR 0 13
27328: PUSH
27329: FOR_IN
27330: IFFALSE 27388
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27332: LD_VAR 0 1
27336: PPUSH
27337: LD_STRING M
27339: PUSH
27340: LD_VAR 0 6
27344: PUSH
27345: LD_INT 1
27347: ARRAY
27348: PUSH
27349: LD_VAR 0 6
27353: PUSH
27354: LD_INT 2
27356: ARRAY
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: PPUSH
27382: CALL_OW 447
27386: GO 27329
27388: POP
27389: POP
// end ;
27390: LD_VAR 0 5
27394: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27395: LD_INT 0
27397: PPUSH
27398: PPUSH
27399: PPUSH
27400: PPUSH
27401: PPUSH
27402: PPUSH
27403: PPUSH
27404: PPUSH
27405: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27406: LD_VAR 0 1
27410: PPUSH
27411: CALL_OW 302
27415: NOT
27416: PUSH
27417: LD_VAR 0 2
27421: PPUSH
27422: LD_VAR 0 3
27426: PPUSH
27427: CALL_OW 488
27431: NOT
27432: OR
27433: PUSH
27434: LD_VAR 0 4
27438: NOT
27439: OR
27440: IFFALSE 27444
// exit ;
27442: GO 27792
// list := [ ] ;
27444: LD_ADDR_VAR 0 13
27448: PUSH
27449: EMPTY
27450: ST_TO_ADDR
// if x - r < 0 then
27451: LD_VAR 0 2
27455: PUSH
27456: LD_VAR 0 4
27460: MINUS
27461: PUSH
27462: LD_INT 0
27464: LESS
27465: IFFALSE 27477
// min_x := 0 else
27467: LD_ADDR_VAR 0 7
27471: PUSH
27472: LD_INT 0
27474: ST_TO_ADDR
27475: GO 27493
// min_x := x - r ;
27477: LD_ADDR_VAR 0 7
27481: PUSH
27482: LD_VAR 0 2
27486: PUSH
27487: LD_VAR 0 4
27491: MINUS
27492: ST_TO_ADDR
// if y - r < 0 then
27493: LD_VAR 0 3
27497: PUSH
27498: LD_VAR 0 4
27502: MINUS
27503: PUSH
27504: LD_INT 0
27506: LESS
27507: IFFALSE 27519
// min_y := 0 else
27509: LD_ADDR_VAR 0 8
27513: PUSH
27514: LD_INT 0
27516: ST_TO_ADDR
27517: GO 27535
// min_y := y - r ;
27519: LD_ADDR_VAR 0 8
27523: PUSH
27524: LD_VAR 0 3
27528: PUSH
27529: LD_VAR 0 4
27533: MINUS
27534: ST_TO_ADDR
// max_x := x + r ;
27535: LD_ADDR_VAR 0 9
27539: PUSH
27540: LD_VAR 0 2
27544: PUSH
27545: LD_VAR 0 4
27549: PLUS
27550: ST_TO_ADDR
// max_y := y + r ;
27551: LD_ADDR_VAR 0 10
27555: PUSH
27556: LD_VAR 0 3
27560: PUSH
27561: LD_VAR 0 4
27565: PLUS
27566: ST_TO_ADDR
// for _x = min_x to max_x do
27567: LD_ADDR_VAR 0 11
27571: PUSH
27572: DOUBLE
27573: LD_VAR 0 7
27577: DEC
27578: ST_TO_ADDR
27579: LD_VAR 0 9
27583: PUSH
27584: FOR_TO
27585: IFFALSE 27702
// for _y = min_y to max_y do
27587: LD_ADDR_VAR 0 12
27591: PUSH
27592: DOUBLE
27593: LD_VAR 0 8
27597: DEC
27598: ST_TO_ADDR
27599: LD_VAR 0 10
27603: PUSH
27604: FOR_TO
27605: IFFALSE 27698
// begin if not ValidHex ( _x , _y ) then
27607: LD_VAR 0 11
27611: PPUSH
27612: LD_VAR 0 12
27616: PPUSH
27617: CALL_OW 488
27621: NOT
27622: IFFALSE 27626
// continue ;
27624: GO 27604
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27626: LD_VAR 0 11
27630: PPUSH
27631: LD_VAR 0 12
27635: PPUSH
27636: CALL_OW 351
27640: PUSH
27641: LD_VAR 0 11
27645: PPUSH
27646: LD_VAR 0 12
27650: PPUSH
27651: CALL_OW 554
27655: AND
27656: IFFALSE 27696
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27658: LD_ADDR_VAR 0 13
27662: PUSH
27663: LD_VAR 0 13
27667: PPUSH
27668: LD_VAR 0 13
27672: PUSH
27673: LD_INT 1
27675: PLUS
27676: PPUSH
27677: LD_VAR 0 11
27681: PUSH
27682: LD_VAR 0 12
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PPUSH
27691: CALL_OW 2
27695: ST_TO_ADDR
// end ;
27696: GO 27604
27698: POP
27699: POP
27700: GO 27584
27702: POP
27703: POP
// if not list then
27704: LD_VAR 0 13
27708: NOT
27709: IFFALSE 27713
// exit ;
27711: GO 27792
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27713: LD_ADDR_VAR 0 13
27717: PUSH
27718: LD_VAR 0 1
27722: PPUSH
27723: LD_VAR 0 13
27727: PPUSH
27728: LD_INT 1
27730: PPUSH
27731: LD_INT 1
27733: PPUSH
27734: CALL 36405 0 4
27738: ST_TO_ADDR
// ComStop ( flame ) ;
27739: LD_VAR 0 1
27743: PPUSH
27744: CALL_OW 141
// for i in list do
27748: LD_ADDR_VAR 0 6
27752: PUSH
27753: LD_VAR 0 13
27757: PUSH
27758: FOR_IN
27759: IFFALSE 27790
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27761: LD_VAR 0 1
27765: PPUSH
27766: LD_VAR 0 6
27770: PUSH
27771: LD_INT 1
27773: ARRAY
27774: PPUSH
27775: LD_VAR 0 6
27779: PUSH
27780: LD_INT 2
27782: ARRAY
27783: PPUSH
27784: CALL_OW 176
27788: GO 27758
27790: POP
27791: POP
// end ;
27792: LD_VAR 0 5
27796: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27797: LD_EXP 105
27801: NOT
27802: IFFALSE 27852
27804: GO 27806
27806: DISABLE
// begin initHack := true ;
27807: LD_ADDR_EXP 105
27811: PUSH
27812: LD_INT 1
27814: ST_TO_ADDR
// hackTanks := [ ] ;
27815: LD_ADDR_EXP 106
27819: PUSH
27820: EMPTY
27821: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27822: LD_ADDR_EXP 107
27826: PUSH
27827: EMPTY
27828: ST_TO_ADDR
// hackLimit := 3 ;
27829: LD_ADDR_EXP 108
27833: PUSH
27834: LD_INT 3
27836: ST_TO_ADDR
// hackDist := 12 ;
27837: LD_ADDR_EXP 109
27841: PUSH
27842: LD_INT 12
27844: ST_TO_ADDR
// hackCounter := [ ] ;
27845: LD_ADDR_EXP 110
27849: PUSH
27850: EMPTY
27851: ST_TO_ADDR
// end ;
27852: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27853: LD_EXP 105
27857: PUSH
27858: LD_INT 34
27860: PUSH
27861: LD_INT 99
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PPUSH
27868: CALL_OW 69
27872: AND
27873: IFFALSE 28126
27875: GO 27877
27877: DISABLE
27878: LD_INT 0
27880: PPUSH
27881: PPUSH
// begin enable ;
27882: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27883: LD_ADDR_VAR 0 1
27887: PUSH
27888: LD_INT 34
27890: PUSH
27891: LD_INT 99
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PPUSH
27898: CALL_OW 69
27902: PUSH
27903: FOR_IN
27904: IFFALSE 28124
// begin if not i in hackTanks then
27906: LD_VAR 0 1
27910: PUSH
27911: LD_EXP 106
27915: IN
27916: NOT
27917: IFFALSE 28000
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27919: LD_ADDR_EXP 106
27923: PUSH
27924: LD_EXP 106
27928: PPUSH
27929: LD_EXP 106
27933: PUSH
27934: LD_INT 1
27936: PLUS
27937: PPUSH
27938: LD_VAR 0 1
27942: PPUSH
27943: CALL_OW 1
27947: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27948: LD_ADDR_EXP 107
27952: PUSH
27953: LD_EXP 107
27957: PPUSH
27958: LD_EXP 107
27962: PUSH
27963: LD_INT 1
27965: PLUS
27966: PPUSH
27967: EMPTY
27968: PPUSH
27969: CALL_OW 1
27973: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27974: LD_ADDR_EXP 110
27978: PUSH
27979: LD_EXP 110
27983: PPUSH
27984: LD_EXP 110
27988: PUSH
27989: LD_INT 1
27991: PLUS
27992: PPUSH
27993: EMPTY
27994: PPUSH
27995: CALL_OW 1
27999: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28000: LD_VAR 0 1
28004: PPUSH
28005: CALL_OW 302
28009: NOT
28010: IFFALSE 28023
// begin HackUnlinkAll ( i ) ;
28012: LD_VAR 0 1
28016: PPUSH
28017: CALL 28129 0 1
// continue ;
28021: GO 27903
// end ; HackCheckCapturedStatus ( i ) ;
28023: LD_VAR 0 1
28027: PPUSH
28028: CALL 28572 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28032: LD_ADDR_VAR 0 2
28036: PUSH
28037: LD_INT 81
28039: PUSH
28040: LD_VAR 0 1
28044: PPUSH
28045: CALL_OW 255
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 33
28056: PUSH
28057: LD_INT 3
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 91
28066: PUSH
28067: LD_VAR 0 1
28071: PUSH
28072: LD_EXP 109
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 50
28084: PUSH
28085: EMPTY
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: PPUSH
28094: CALL_OW 69
28098: ST_TO_ADDR
// if not tmp then
28099: LD_VAR 0 2
28103: NOT
28104: IFFALSE 28108
// continue ;
28106: GO 27903
// HackLink ( i , tmp ) ;
28108: LD_VAR 0 1
28112: PPUSH
28113: LD_VAR 0 2
28117: PPUSH
28118: CALL 28265 0 2
// end ;
28122: GO 27903
28124: POP
28125: POP
// end ;
28126: PPOPN 2
28128: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28129: LD_INT 0
28131: PPUSH
28132: PPUSH
28133: PPUSH
// if not hack in hackTanks then
28134: LD_VAR 0 1
28138: PUSH
28139: LD_EXP 106
28143: IN
28144: NOT
28145: IFFALSE 28149
// exit ;
28147: GO 28260
// index := GetElementIndex ( hackTanks , hack ) ;
28149: LD_ADDR_VAR 0 4
28153: PUSH
28154: LD_EXP 106
28158: PPUSH
28159: LD_VAR 0 1
28163: PPUSH
28164: CALL 35702 0 2
28168: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28169: LD_EXP 107
28173: PUSH
28174: LD_VAR 0 4
28178: ARRAY
28179: IFFALSE 28260
// begin for i in hackTanksCaptured [ index ] do
28181: LD_ADDR_VAR 0 3
28185: PUSH
28186: LD_EXP 107
28190: PUSH
28191: LD_VAR 0 4
28195: ARRAY
28196: PUSH
28197: FOR_IN
28198: IFFALSE 28224
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28200: LD_VAR 0 3
28204: PUSH
28205: LD_INT 1
28207: ARRAY
28208: PPUSH
28209: LD_VAR 0 3
28213: PUSH
28214: LD_INT 2
28216: ARRAY
28217: PPUSH
28218: CALL_OW 235
28222: GO 28197
28224: POP
28225: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28226: LD_ADDR_EXP 107
28230: PUSH
28231: LD_EXP 107
28235: PPUSH
28236: LD_VAR 0 4
28240: PPUSH
28241: EMPTY
28242: PPUSH
28243: CALL_OW 1
28247: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28248: LD_VAR 0 1
28252: PPUSH
28253: LD_INT 0
28255: PPUSH
28256: CALL_OW 505
// end ; end ;
28260: LD_VAR 0 2
28264: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28265: LD_INT 0
28267: PPUSH
28268: PPUSH
28269: PPUSH
// if not hack in hackTanks or not vehicles then
28270: LD_VAR 0 1
28274: PUSH
28275: LD_EXP 106
28279: IN
28280: NOT
28281: PUSH
28282: LD_VAR 0 2
28286: NOT
28287: OR
28288: IFFALSE 28292
// exit ;
28290: GO 28567
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28292: LD_ADDR_VAR 0 2
28296: PUSH
28297: LD_VAR 0 1
28301: PPUSH
28302: LD_VAR 0 2
28306: PPUSH
28307: LD_INT 1
28309: PPUSH
28310: LD_INT 1
28312: PPUSH
28313: CALL 36352 0 4
28317: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28318: LD_ADDR_VAR 0 5
28322: PUSH
28323: LD_EXP 106
28327: PPUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL 35702 0 2
28337: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28338: LD_EXP 107
28342: PUSH
28343: LD_VAR 0 5
28347: ARRAY
28348: PUSH
28349: LD_EXP 108
28353: LESS
28354: IFFALSE 28543
// begin for i := 1 to vehicles do
28356: LD_ADDR_VAR 0 4
28360: PUSH
28361: DOUBLE
28362: LD_INT 1
28364: DEC
28365: ST_TO_ADDR
28366: LD_VAR 0 2
28370: PUSH
28371: FOR_TO
28372: IFFALSE 28541
// begin if hackTanksCaptured [ index ] = hackLimit then
28374: LD_EXP 107
28378: PUSH
28379: LD_VAR 0 5
28383: ARRAY
28384: PUSH
28385: LD_EXP 108
28389: EQUAL
28390: IFFALSE 28394
// break ;
28392: GO 28541
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28394: LD_ADDR_EXP 110
28398: PUSH
28399: LD_EXP 110
28403: PPUSH
28404: LD_VAR 0 5
28408: PPUSH
28409: LD_EXP 110
28413: PUSH
28414: LD_VAR 0 5
28418: ARRAY
28419: PUSH
28420: LD_INT 1
28422: PLUS
28423: PPUSH
28424: CALL_OW 1
28428: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28429: LD_ADDR_EXP 107
28433: PUSH
28434: LD_EXP 107
28438: PPUSH
28439: LD_VAR 0 5
28443: PUSH
28444: LD_EXP 107
28448: PUSH
28449: LD_VAR 0 5
28453: ARRAY
28454: PUSH
28455: LD_INT 1
28457: PLUS
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PPUSH
28463: LD_VAR 0 2
28467: PUSH
28468: LD_VAR 0 4
28472: ARRAY
28473: PUSH
28474: LD_VAR 0 2
28478: PUSH
28479: LD_VAR 0 4
28483: ARRAY
28484: PPUSH
28485: CALL_OW 255
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PPUSH
28494: CALL 35917 0 3
28498: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28499: LD_VAR 0 2
28503: PUSH
28504: LD_VAR 0 4
28508: ARRAY
28509: PPUSH
28510: LD_VAR 0 1
28514: PPUSH
28515: CALL_OW 255
28519: PPUSH
28520: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28524: LD_VAR 0 2
28528: PUSH
28529: LD_VAR 0 4
28533: ARRAY
28534: PPUSH
28535: CALL_OW 141
// end ;
28539: GO 28371
28541: POP
28542: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28543: LD_VAR 0 1
28547: PPUSH
28548: LD_EXP 107
28552: PUSH
28553: LD_VAR 0 5
28557: ARRAY
28558: PUSH
28559: LD_INT 0
28561: PLUS
28562: PPUSH
28563: CALL_OW 505
// end ;
28567: LD_VAR 0 3
28571: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28572: LD_INT 0
28574: PPUSH
28575: PPUSH
28576: PPUSH
28577: PPUSH
// if not hack in hackTanks then
28578: LD_VAR 0 1
28582: PUSH
28583: LD_EXP 106
28587: IN
28588: NOT
28589: IFFALSE 28593
// exit ;
28591: GO 28833
// index := GetElementIndex ( hackTanks , hack ) ;
28593: LD_ADDR_VAR 0 4
28597: PUSH
28598: LD_EXP 106
28602: PPUSH
28603: LD_VAR 0 1
28607: PPUSH
28608: CALL 35702 0 2
28612: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: DOUBLE
28619: LD_EXP 107
28623: PUSH
28624: LD_VAR 0 4
28628: ARRAY
28629: INC
28630: ST_TO_ADDR
28631: LD_INT 1
28633: PUSH
28634: FOR_DOWNTO
28635: IFFALSE 28807
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28637: LD_ADDR_VAR 0 5
28641: PUSH
28642: LD_EXP 107
28646: PUSH
28647: LD_VAR 0 4
28651: ARRAY
28652: PUSH
28653: LD_VAR 0 3
28657: ARRAY
28658: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28659: LD_VAR 0 5
28663: PUSH
28664: LD_INT 1
28666: ARRAY
28667: PPUSH
28668: CALL_OW 302
28672: NOT
28673: PUSH
28674: LD_VAR 0 5
28678: PUSH
28679: LD_INT 1
28681: ARRAY
28682: PPUSH
28683: CALL_OW 255
28687: PUSH
28688: LD_VAR 0 1
28692: PPUSH
28693: CALL_OW 255
28697: NONEQUAL
28698: OR
28699: IFFALSE 28805
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28701: LD_VAR 0 5
28705: PUSH
28706: LD_INT 1
28708: ARRAY
28709: PPUSH
28710: CALL_OW 305
28714: PUSH
28715: LD_VAR 0 5
28719: PUSH
28720: LD_INT 1
28722: ARRAY
28723: PPUSH
28724: CALL_OW 255
28728: PUSH
28729: LD_VAR 0 1
28733: PPUSH
28734: CALL_OW 255
28738: EQUAL
28739: AND
28740: IFFALSE 28764
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28742: LD_VAR 0 5
28746: PUSH
28747: LD_INT 1
28749: ARRAY
28750: PPUSH
28751: LD_VAR 0 5
28755: PUSH
28756: LD_INT 2
28758: ARRAY
28759: PPUSH
28760: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28764: LD_ADDR_EXP 107
28768: PUSH
28769: LD_EXP 107
28773: PPUSH
28774: LD_VAR 0 4
28778: PPUSH
28779: LD_EXP 107
28783: PUSH
28784: LD_VAR 0 4
28788: ARRAY
28789: PPUSH
28790: LD_VAR 0 3
28794: PPUSH
28795: CALL_OW 3
28799: PPUSH
28800: CALL_OW 1
28804: ST_TO_ADDR
// end ; end ;
28805: GO 28634
28807: POP
28808: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28809: LD_VAR 0 1
28813: PPUSH
28814: LD_EXP 107
28818: PUSH
28819: LD_VAR 0 4
28823: ARRAY
28824: PUSH
28825: LD_INT 0
28827: PLUS
28828: PPUSH
28829: CALL_OW 505
// end ;
28833: LD_VAR 0 2
28837: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28838: LD_INT 0
28840: PPUSH
28841: PPUSH
28842: PPUSH
28843: PPUSH
// if not hack in hackTanks then
28844: LD_VAR 0 1
28848: PUSH
28849: LD_EXP 106
28853: IN
28854: NOT
28855: IFFALSE 28859
// exit ;
28857: GO 28944
// index := GetElementIndex ( hackTanks , hack ) ;
28859: LD_ADDR_VAR 0 5
28863: PUSH
28864: LD_EXP 106
28868: PPUSH
28869: LD_VAR 0 1
28873: PPUSH
28874: CALL 35702 0 2
28878: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28879: LD_ADDR_VAR 0 4
28883: PUSH
28884: DOUBLE
28885: LD_INT 1
28887: DEC
28888: ST_TO_ADDR
28889: LD_EXP 107
28893: PUSH
28894: LD_VAR 0 5
28898: ARRAY
28899: PUSH
28900: FOR_TO
28901: IFFALSE 28942
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28903: LD_EXP 107
28907: PUSH
28908: LD_VAR 0 5
28912: ARRAY
28913: PUSH
28914: LD_VAR 0 4
28918: ARRAY
28919: PUSH
28920: LD_INT 1
28922: ARRAY
28923: PUSH
28924: LD_VAR 0 2
28928: EQUAL
28929: IFFALSE 28940
// KillUnit ( vehicle ) ;
28931: LD_VAR 0 2
28935: PPUSH
28936: CALL_OW 66
28940: GO 28900
28942: POP
28943: POP
// end ;
28944: LD_VAR 0 3
28948: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28949: LD_EXP 111
28953: NOT
28954: IFFALSE 28989
28956: GO 28958
28958: DISABLE
// begin initMiner := true ;
28959: LD_ADDR_EXP 111
28963: PUSH
28964: LD_INT 1
28966: ST_TO_ADDR
// minersList := [ ] ;
28967: LD_ADDR_EXP 112
28971: PUSH
28972: EMPTY
28973: ST_TO_ADDR
// minerMinesList := [ ] ;
28974: LD_ADDR_EXP 113
28978: PUSH
28979: EMPTY
28980: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28981: LD_ADDR_EXP 114
28985: PUSH
28986: LD_INT 5
28988: ST_TO_ADDR
// end ;
28989: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28990: LD_EXP 111
28994: PUSH
28995: LD_INT 34
28997: PUSH
28998: LD_INT 81
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PPUSH
29005: CALL_OW 69
29009: AND
29010: IFFALSE 29471
29012: GO 29014
29014: DISABLE
29015: LD_INT 0
29017: PPUSH
29018: PPUSH
29019: PPUSH
29020: PPUSH
// begin enable ;
29021: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29022: LD_ADDR_VAR 0 1
29026: PUSH
29027: LD_INT 34
29029: PUSH
29030: LD_INT 81
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PPUSH
29037: CALL_OW 69
29041: PUSH
29042: FOR_IN
29043: IFFALSE 29115
// begin if not i in minersList then
29045: LD_VAR 0 1
29049: PUSH
29050: LD_EXP 112
29054: IN
29055: NOT
29056: IFFALSE 29113
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29058: LD_ADDR_EXP 112
29062: PUSH
29063: LD_EXP 112
29067: PPUSH
29068: LD_EXP 112
29072: PUSH
29073: LD_INT 1
29075: PLUS
29076: PPUSH
29077: LD_VAR 0 1
29081: PPUSH
29082: CALL_OW 1
29086: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29087: LD_ADDR_EXP 113
29091: PUSH
29092: LD_EXP 113
29096: PPUSH
29097: LD_EXP 113
29101: PUSH
29102: LD_INT 1
29104: PLUS
29105: PPUSH
29106: EMPTY
29107: PPUSH
29108: CALL_OW 1
29112: ST_TO_ADDR
// end end ;
29113: GO 29042
29115: POP
29116: POP
// for i := minerMinesList downto 1 do
29117: LD_ADDR_VAR 0 1
29121: PUSH
29122: DOUBLE
29123: LD_EXP 113
29127: INC
29128: ST_TO_ADDR
29129: LD_INT 1
29131: PUSH
29132: FOR_DOWNTO
29133: IFFALSE 29469
// begin if IsLive ( minersList [ i ] ) then
29135: LD_EXP 112
29139: PUSH
29140: LD_VAR 0 1
29144: ARRAY
29145: PPUSH
29146: CALL_OW 300
29150: IFFALSE 29178
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29152: LD_EXP 112
29156: PUSH
29157: LD_VAR 0 1
29161: ARRAY
29162: PPUSH
29163: LD_EXP 113
29167: PUSH
29168: LD_VAR 0 1
29172: ARRAY
29173: PPUSH
29174: CALL_OW 505
// if not minerMinesList [ i ] then
29178: LD_EXP 113
29182: PUSH
29183: LD_VAR 0 1
29187: ARRAY
29188: NOT
29189: IFFALSE 29193
// continue ;
29191: GO 29132
// for j := minerMinesList [ i ] downto 1 do
29193: LD_ADDR_VAR 0 2
29197: PUSH
29198: DOUBLE
29199: LD_EXP 113
29203: PUSH
29204: LD_VAR 0 1
29208: ARRAY
29209: INC
29210: ST_TO_ADDR
29211: LD_INT 1
29213: PUSH
29214: FOR_DOWNTO
29215: IFFALSE 29465
// begin side := GetSide ( minersList [ i ] ) ;
29217: LD_ADDR_VAR 0 3
29221: PUSH
29222: LD_EXP 112
29226: PUSH
29227: LD_VAR 0 1
29231: ARRAY
29232: PPUSH
29233: CALL_OW 255
29237: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29238: LD_ADDR_VAR 0 4
29242: PUSH
29243: LD_EXP 113
29247: PUSH
29248: LD_VAR 0 1
29252: ARRAY
29253: PUSH
29254: LD_VAR 0 2
29258: ARRAY
29259: PUSH
29260: LD_INT 1
29262: ARRAY
29263: PPUSH
29264: LD_EXP 113
29268: PUSH
29269: LD_VAR 0 1
29273: ARRAY
29274: PUSH
29275: LD_VAR 0 2
29279: ARRAY
29280: PUSH
29281: LD_INT 2
29283: ARRAY
29284: PPUSH
29285: CALL_OW 428
29289: ST_TO_ADDR
// if not tmp then
29290: LD_VAR 0 4
29294: NOT
29295: IFFALSE 29299
// continue ;
29297: GO 29214
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29299: LD_VAR 0 4
29303: PUSH
29304: LD_INT 81
29306: PUSH
29307: LD_VAR 0 3
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PPUSH
29316: CALL_OW 69
29320: IN
29321: PUSH
29322: LD_EXP 113
29326: PUSH
29327: LD_VAR 0 1
29331: ARRAY
29332: PUSH
29333: LD_VAR 0 2
29337: ARRAY
29338: PUSH
29339: LD_INT 1
29341: ARRAY
29342: PPUSH
29343: LD_EXP 113
29347: PUSH
29348: LD_VAR 0 1
29352: ARRAY
29353: PUSH
29354: LD_VAR 0 2
29358: ARRAY
29359: PUSH
29360: LD_INT 2
29362: ARRAY
29363: PPUSH
29364: CALL_OW 458
29368: AND
29369: IFFALSE 29463
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29371: LD_EXP 113
29375: PUSH
29376: LD_VAR 0 1
29380: ARRAY
29381: PUSH
29382: LD_VAR 0 2
29386: ARRAY
29387: PUSH
29388: LD_INT 1
29390: ARRAY
29391: PPUSH
29392: LD_EXP 113
29396: PUSH
29397: LD_VAR 0 1
29401: ARRAY
29402: PUSH
29403: LD_VAR 0 2
29407: ARRAY
29408: PUSH
29409: LD_INT 2
29411: ARRAY
29412: PPUSH
29413: LD_VAR 0 3
29417: PPUSH
29418: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29422: LD_ADDR_EXP 113
29426: PUSH
29427: LD_EXP 113
29431: PPUSH
29432: LD_VAR 0 1
29436: PPUSH
29437: LD_EXP 113
29441: PUSH
29442: LD_VAR 0 1
29446: ARRAY
29447: PPUSH
29448: LD_VAR 0 2
29452: PPUSH
29453: CALL_OW 3
29457: PPUSH
29458: CALL_OW 1
29462: ST_TO_ADDR
// end ; end ;
29463: GO 29214
29465: POP
29466: POP
// end ;
29467: GO 29132
29469: POP
29470: POP
// end ;
29471: PPOPN 4
29473: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29474: LD_INT 0
29476: PPUSH
29477: PPUSH
// result := false ;
29478: LD_ADDR_VAR 0 4
29482: PUSH
29483: LD_INT 0
29485: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29486: LD_VAR 0 1
29490: PPUSH
29491: CALL_OW 264
29495: PUSH
29496: LD_INT 81
29498: EQUAL
29499: NOT
29500: IFFALSE 29504
// exit ;
29502: GO 29744
// index := GetElementIndex ( minersList , unit ) ;
29504: LD_ADDR_VAR 0 5
29508: PUSH
29509: LD_EXP 112
29513: PPUSH
29514: LD_VAR 0 1
29518: PPUSH
29519: CALL 35702 0 2
29523: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29524: LD_EXP 113
29528: PUSH
29529: LD_VAR 0 5
29533: ARRAY
29534: PUSH
29535: LD_EXP 114
29539: GREATEREQUAL
29540: IFFALSE 29544
// exit ;
29542: GO 29744
// ComMoveXY ( unit , x , y ) ;
29544: LD_VAR 0 1
29548: PPUSH
29549: LD_VAR 0 2
29553: PPUSH
29554: LD_VAR 0 3
29558: PPUSH
29559: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29563: LD_INT 35
29565: PPUSH
29566: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29570: LD_VAR 0 1
29574: PPUSH
29575: LD_VAR 0 2
29579: PPUSH
29580: LD_VAR 0 3
29584: PPUSH
29585: CALL 67454 0 3
29589: NOT
29590: PUSH
29591: LD_VAR 0 1
29595: PPUSH
29596: CALL_OW 314
29600: AND
29601: IFFALSE 29605
// exit ;
29603: GO 29744
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29605: LD_VAR 0 2
29609: PPUSH
29610: LD_VAR 0 3
29614: PPUSH
29615: CALL_OW 428
29619: PUSH
29620: LD_VAR 0 1
29624: EQUAL
29625: PUSH
29626: LD_VAR 0 1
29630: PPUSH
29631: CALL_OW 314
29635: NOT
29636: AND
29637: IFFALSE 29563
// PlaySoundXY ( x , y , PlantMine ) ;
29639: LD_VAR 0 2
29643: PPUSH
29644: LD_VAR 0 3
29648: PPUSH
29649: LD_STRING PlantMine
29651: PPUSH
29652: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29656: LD_VAR 0 2
29660: PPUSH
29661: LD_VAR 0 3
29665: PPUSH
29666: LD_VAR 0 1
29670: PPUSH
29671: CALL_OW 255
29675: PPUSH
29676: LD_INT 0
29678: PPUSH
29679: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29683: LD_ADDR_EXP 113
29687: PUSH
29688: LD_EXP 113
29692: PPUSH
29693: LD_VAR 0 5
29697: PUSH
29698: LD_EXP 113
29702: PUSH
29703: LD_VAR 0 5
29707: ARRAY
29708: PUSH
29709: LD_INT 1
29711: PLUS
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PPUSH
29717: LD_VAR 0 2
29721: PUSH
29722: LD_VAR 0 3
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL 35917 0 3
29735: ST_TO_ADDR
// result := true ;
29736: LD_ADDR_VAR 0 4
29740: PUSH
29741: LD_INT 1
29743: ST_TO_ADDR
// end ;
29744: LD_VAR 0 4
29748: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29749: LD_INT 0
29751: PPUSH
29752: PPUSH
29753: PPUSH
// if not unit in minersList then
29754: LD_VAR 0 1
29758: PUSH
29759: LD_EXP 112
29763: IN
29764: NOT
29765: IFFALSE 29769
// exit ;
29767: GO 30161
// index := GetElementIndex ( minersList , unit ) ;
29769: LD_ADDR_VAR 0 6
29773: PUSH
29774: LD_EXP 112
29778: PPUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL 35702 0 2
29788: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29789: LD_ADDR_VAR 0 5
29793: PUSH
29794: DOUBLE
29795: LD_EXP 113
29799: PUSH
29800: LD_VAR 0 6
29804: ARRAY
29805: INC
29806: ST_TO_ADDR
29807: LD_INT 1
29809: PUSH
29810: FOR_DOWNTO
29811: IFFALSE 29972
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29813: LD_EXP 113
29817: PUSH
29818: LD_VAR 0 6
29822: ARRAY
29823: PUSH
29824: LD_VAR 0 5
29828: ARRAY
29829: PUSH
29830: LD_INT 1
29832: ARRAY
29833: PUSH
29834: LD_VAR 0 2
29838: EQUAL
29839: PUSH
29840: LD_EXP 113
29844: PUSH
29845: LD_VAR 0 6
29849: ARRAY
29850: PUSH
29851: LD_VAR 0 5
29855: ARRAY
29856: PUSH
29857: LD_INT 2
29859: ARRAY
29860: PUSH
29861: LD_VAR 0 3
29865: EQUAL
29866: AND
29867: IFFALSE 29970
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29869: LD_EXP 113
29873: PUSH
29874: LD_VAR 0 6
29878: ARRAY
29879: PUSH
29880: LD_VAR 0 5
29884: ARRAY
29885: PUSH
29886: LD_INT 1
29888: ARRAY
29889: PPUSH
29890: LD_EXP 113
29894: PUSH
29895: LD_VAR 0 6
29899: ARRAY
29900: PUSH
29901: LD_VAR 0 5
29905: ARRAY
29906: PUSH
29907: LD_INT 2
29909: ARRAY
29910: PPUSH
29911: LD_VAR 0 1
29915: PPUSH
29916: CALL_OW 255
29920: PPUSH
29921: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29925: LD_ADDR_EXP 113
29929: PUSH
29930: LD_EXP 113
29934: PPUSH
29935: LD_VAR 0 6
29939: PPUSH
29940: LD_EXP 113
29944: PUSH
29945: LD_VAR 0 6
29949: ARRAY
29950: PPUSH
29951: LD_VAR 0 5
29955: PPUSH
29956: CALL_OW 3
29960: PPUSH
29961: CALL_OW 1
29965: ST_TO_ADDR
// exit ;
29966: POP
29967: POP
29968: GO 30161
// end ; end ;
29970: GO 29810
29972: POP
29973: POP
// for i := minerMinesList [ index ] downto 1 do
29974: LD_ADDR_VAR 0 5
29978: PUSH
29979: DOUBLE
29980: LD_EXP 113
29984: PUSH
29985: LD_VAR 0 6
29989: ARRAY
29990: INC
29991: ST_TO_ADDR
29992: LD_INT 1
29994: PUSH
29995: FOR_DOWNTO
29996: IFFALSE 30159
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29998: LD_EXP 113
30002: PUSH
30003: LD_VAR 0 6
30007: ARRAY
30008: PUSH
30009: LD_VAR 0 5
30013: ARRAY
30014: PUSH
30015: LD_INT 1
30017: ARRAY
30018: PPUSH
30019: LD_EXP 113
30023: PUSH
30024: LD_VAR 0 6
30028: ARRAY
30029: PUSH
30030: LD_VAR 0 5
30034: ARRAY
30035: PUSH
30036: LD_INT 2
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 2
30044: PPUSH
30045: LD_VAR 0 3
30049: PPUSH
30050: CALL_OW 298
30054: PUSH
30055: LD_INT 6
30057: LESS
30058: IFFALSE 30157
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30060: LD_EXP 113
30064: PUSH
30065: LD_VAR 0 6
30069: ARRAY
30070: PUSH
30071: LD_VAR 0 5
30075: ARRAY
30076: PUSH
30077: LD_INT 1
30079: ARRAY
30080: PPUSH
30081: LD_EXP 113
30085: PUSH
30086: LD_VAR 0 6
30090: ARRAY
30091: PUSH
30092: LD_VAR 0 5
30096: ARRAY
30097: PUSH
30098: LD_INT 2
30100: ARRAY
30101: PPUSH
30102: LD_VAR 0 1
30106: PPUSH
30107: CALL_OW 255
30111: PPUSH
30112: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30116: LD_ADDR_EXP 113
30120: PUSH
30121: LD_EXP 113
30125: PPUSH
30126: LD_VAR 0 6
30130: PPUSH
30131: LD_EXP 113
30135: PUSH
30136: LD_VAR 0 6
30140: ARRAY
30141: PPUSH
30142: LD_VAR 0 5
30146: PPUSH
30147: CALL_OW 3
30151: PPUSH
30152: CALL_OW 1
30156: ST_TO_ADDR
// end ; end ;
30157: GO 29995
30159: POP
30160: POP
// end ;
30161: LD_VAR 0 4
30165: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30166: LD_INT 0
30168: PPUSH
30169: PPUSH
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
30174: PPUSH
30175: PPUSH
30176: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30177: LD_VAR 0 1
30181: PPUSH
30182: CALL_OW 264
30186: PUSH
30187: LD_INT 81
30189: EQUAL
30190: NOT
30191: PUSH
30192: LD_VAR 0 1
30196: PUSH
30197: LD_EXP 112
30201: IN
30202: NOT
30203: OR
30204: IFFALSE 30208
// exit ;
30206: GO 30530
// index := GetElementIndex ( minersList , unit ) ;
30208: LD_ADDR_VAR 0 6
30212: PUSH
30213: LD_EXP 112
30217: PPUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL 35702 0 2
30227: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30228: LD_ADDR_VAR 0 8
30232: PUSH
30233: LD_EXP 114
30237: PUSH
30238: LD_EXP 113
30242: PUSH
30243: LD_VAR 0 6
30247: ARRAY
30248: MINUS
30249: ST_TO_ADDR
// if not minesFreeAmount then
30250: LD_VAR 0 8
30254: NOT
30255: IFFALSE 30259
// exit ;
30257: GO 30530
// tmp := [ ] ;
30259: LD_ADDR_VAR 0 7
30263: PUSH
30264: EMPTY
30265: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30266: LD_ADDR_VAR 0 5
30270: PUSH
30271: DOUBLE
30272: LD_INT 1
30274: DEC
30275: ST_TO_ADDR
30276: LD_VAR 0 8
30280: PUSH
30281: FOR_TO
30282: IFFALSE 30477
// begin _d := rand ( 0 , 5 ) ;
30284: LD_ADDR_VAR 0 11
30288: PUSH
30289: LD_INT 0
30291: PPUSH
30292: LD_INT 5
30294: PPUSH
30295: CALL_OW 12
30299: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30300: LD_ADDR_VAR 0 12
30304: PUSH
30305: LD_INT 2
30307: PPUSH
30308: LD_INT 6
30310: PPUSH
30311: CALL_OW 12
30315: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30316: LD_ADDR_VAR 0 9
30320: PUSH
30321: LD_VAR 0 2
30325: PPUSH
30326: LD_VAR 0 11
30330: PPUSH
30331: LD_VAR 0 12
30335: PPUSH
30336: CALL_OW 272
30340: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30341: LD_ADDR_VAR 0 10
30345: PUSH
30346: LD_VAR 0 3
30350: PPUSH
30351: LD_VAR 0 11
30355: PPUSH
30356: LD_VAR 0 12
30360: PPUSH
30361: CALL_OW 273
30365: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30366: LD_VAR 0 9
30370: PPUSH
30371: LD_VAR 0 10
30375: PPUSH
30376: CALL_OW 488
30380: PUSH
30381: LD_VAR 0 9
30385: PUSH
30386: LD_VAR 0 10
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_VAR 0 7
30399: IN
30400: NOT
30401: AND
30402: PUSH
30403: LD_VAR 0 9
30407: PPUSH
30408: LD_VAR 0 10
30412: PPUSH
30413: CALL_OW 458
30417: NOT
30418: AND
30419: IFFALSE 30461
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30421: LD_ADDR_VAR 0 7
30425: PUSH
30426: LD_VAR 0 7
30430: PPUSH
30431: LD_VAR 0 7
30435: PUSH
30436: LD_INT 1
30438: PLUS
30439: PPUSH
30440: LD_VAR 0 9
30444: PUSH
30445: LD_VAR 0 10
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 1
30458: ST_TO_ADDR
30459: GO 30475
// i := i - 1 ;
30461: LD_ADDR_VAR 0 5
30465: PUSH
30466: LD_VAR 0 5
30470: PUSH
30471: LD_INT 1
30473: MINUS
30474: ST_TO_ADDR
// end ;
30475: GO 30281
30477: POP
30478: POP
// for i in tmp do
30479: LD_ADDR_VAR 0 5
30483: PUSH
30484: LD_VAR 0 7
30488: PUSH
30489: FOR_IN
30490: IFFALSE 30528
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30492: LD_VAR 0 1
30496: PPUSH
30497: LD_VAR 0 5
30501: PUSH
30502: LD_INT 1
30504: ARRAY
30505: PPUSH
30506: LD_VAR 0 5
30510: PUSH
30511: LD_INT 2
30513: ARRAY
30514: PPUSH
30515: CALL 29474 0 3
30519: NOT
30520: IFFALSE 30526
// exit ;
30522: POP
30523: POP
30524: GO 30530
30526: GO 30489
30528: POP
30529: POP
// end ;
30530: LD_VAR 0 4
30534: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30535: LD_INT 0
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
// if not GetClass ( unit ) = class_sniper then
30544: LD_VAR 0 1
30548: PPUSH
30549: CALL_OW 257
30553: PUSH
30554: LD_INT 5
30556: EQUAL
30557: NOT
30558: IFFALSE 30562
// exit ;
30560: GO 30950
// dist := 8 ;
30562: LD_ADDR_VAR 0 5
30566: PUSH
30567: LD_INT 8
30569: ST_TO_ADDR
// viewRange := 12 ;
30570: LD_ADDR_VAR 0 7
30574: PUSH
30575: LD_INT 12
30577: ST_TO_ADDR
// side := GetSide ( unit ) ;
30578: LD_ADDR_VAR 0 6
30582: PUSH
30583: LD_VAR 0 1
30587: PPUSH
30588: CALL_OW 255
30592: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30593: LD_INT 61
30595: PPUSH
30596: LD_VAR 0 6
30600: PPUSH
30601: CALL_OW 321
30605: PUSH
30606: LD_INT 2
30608: EQUAL
30609: IFFALSE 30619
// viewRange := 16 ;
30611: LD_ADDR_VAR 0 7
30615: PUSH
30616: LD_INT 16
30618: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30619: LD_VAR 0 1
30623: PPUSH
30624: LD_VAR 0 2
30628: PPUSH
30629: LD_VAR 0 3
30633: PPUSH
30634: CALL_OW 297
30638: PUSH
30639: LD_VAR 0 5
30643: GREATER
30644: IFFALSE 30723
// begin ComMoveXY ( unit , x , y ) ;
30646: LD_VAR 0 1
30650: PPUSH
30651: LD_VAR 0 2
30655: PPUSH
30656: LD_VAR 0 3
30660: PPUSH
30661: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30665: LD_INT 35
30667: PPUSH
30668: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30672: LD_VAR 0 1
30676: PPUSH
30677: LD_VAR 0 2
30681: PPUSH
30682: LD_VAR 0 3
30686: PPUSH
30687: CALL 67454 0 3
30691: NOT
30692: IFFALSE 30696
// exit ;
30694: GO 30950
// until GetDistUnitXY ( unit , x , y ) < dist ;
30696: LD_VAR 0 1
30700: PPUSH
30701: LD_VAR 0 2
30705: PPUSH
30706: LD_VAR 0 3
30710: PPUSH
30711: CALL_OW 297
30715: PUSH
30716: LD_VAR 0 5
30720: LESS
30721: IFFALSE 30665
// end ; ComTurnXY ( unit , x , y ) ;
30723: LD_VAR 0 1
30727: PPUSH
30728: LD_VAR 0 2
30732: PPUSH
30733: LD_VAR 0 3
30737: PPUSH
30738: CALL_OW 118
// wait ( 5 ) ;
30742: LD_INT 5
30744: PPUSH
30745: CALL_OW 67
// _d := GetDir ( unit ) ;
30749: LD_ADDR_VAR 0 10
30753: PUSH
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 254
30763: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30764: LD_ADDR_VAR 0 8
30768: PUSH
30769: LD_VAR 0 1
30773: PPUSH
30774: CALL_OW 250
30778: PPUSH
30779: LD_VAR 0 10
30783: PPUSH
30784: LD_VAR 0 5
30788: PPUSH
30789: CALL_OW 272
30793: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30794: LD_ADDR_VAR 0 9
30798: PUSH
30799: LD_VAR 0 1
30803: PPUSH
30804: CALL_OW 251
30808: PPUSH
30809: LD_VAR 0 10
30813: PPUSH
30814: LD_VAR 0 5
30818: PPUSH
30819: CALL_OW 273
30823: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30824: LD_VAR 0 8
30828: PPUSH
30829: LD_VAR 0 9
30833: PPUSH
30834: CALL_OW 488
30838: NOT
30839: IFFALSE 30843
// exit ;
30841: GO 30950
// ComAnimCustom ( unit , 1 ) ;
30843: LD_VAR 0 1
30847: PPUSH
30848: LD_INT 1
30850: PPUSH
30851: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30855: LD_VAR 0 8
30859: PPUSH
30860: LD_VAR 0 9
30864: PPUSH
30865: LD_VAR 0 6
30869: PPUSH
30870: LD_VAR 0 7
30874: PPUSH
30875: CALL_OW 330
// repeat wait ( 1 ) ;
30879: LD_INT 1
30881: PPUSH
30882: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30886: LD_VAR 0 1
30890: PPUSH
30891: CALL_OW 316
30895: PUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 314
30905: OR
30906: PUSH
30907: LD_VAR 0 1
30911: PPUSH
30912: CALL_OW 302
30916: NOT
30917: OR
30918: PUSH
30919: LD_VAR 0 1
30923: PPUSH
30924: CALL_OW 301
30928: OR
30929: IFFALSE 30879
// RemoveSeeing ( _x , _y , side ) ;
30931: LD_VAR 0 8
30935: PPUSH
30936: LD_VAR 0 9
30940: PPUSH
30941: LD_VAR 0 6
30945: PPUSH
30946: CALL_OW 331
// end ; end_of_file
30950: LD_VAR 0 4
30954: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30955: LD_INT 0
30957: PPUSH
30958: PPUSH
// if exist_mode then
30959: LD_VAR 0 2
30963: IFFALSE 30988
// unit := CreateCharacter ( prefix & ident ) else
30965: LD_ADDR_VAR 0 5
30969: PUSH
30970: LD_VAR 0 3
30974: PUSH
30975: LD_VAR 0 1
30979: STR
30980: PPUSH
30981: CALL_OW 34
30985: ST_TO_ADDR
30986: GO 31003
// unit := NewCharacter ( ident ) ;
30988: LD_ADDR_VAR 0 5
30992: PUSH
30993: LD_VAR 0 1
30997: PPUSH
30998: CALL_OW 25
31002: ST_TO_ADDR
// result := unit ;
31003: LD_ADDR_VAR 0 4
31007: PUSH
31008: LD_VAR 0 5
31012: ST_TO_ADDR
// end ;
31013: LD_VAR 0 4
31017: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31018: LD_INT 0
31020: PPUSH
31021: PPUSH
// if not side or not nation then
31022: LD_VAR 0 1
31026: NOT
31027: PUSH
31028: LD_VAR 0 2
31032: NOT
31033: OR
31034: IFFALSE 31038
// exit ;
31036: GO 31806
// case nation of nation_american :
31038: LD_VAR 0 2
31042: PUSH
31043: LD_INT 1
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31265
31051: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31052: LD_ADDR_VAR 0 4
31056: PUSH
31057: LD_INT 35
31059: PUSH
31060: LD_INT 45
31062: PUSH
31063: LD_INT 46
31065: PUSH
31066: LD_INT 47
31068: PUSH
31069: LD_INT 82
31071: PUSH
31072: LD_INT 83
31074: PUSH
31075: LD_INT 84
31077: PUSH
31078: LD_INT 85
31080: PUSH
31081: LD_INT 86
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: LD_INT 6
31092: PUSH
31093: LD_INT 15
31095: PUSH
31096: LD_INT 16
31098: PUSH
31099: LD_INT 7
31101: PUSH
31102: LD_INT 12
31104: PUSH
31105: LD_INT 13
31107: PUSH
31108: LD_INT 10
31110: PUSH
31111: LD_INT 14
31113: PUSH
31114: LD_INT 20
31116: PUSH
31117: LD_INT 21
31119: PUSH
31120: LD_INT 22
31122: PUSH
31123: LD_INT 25
31125: PUSH
31126: LD_INT 32
31128: PUSH
31129: LD_INT 27
31131: PUSH
31132: LD_INT 36
31134: PUSH
31135: LD_INT 69
31137: PUSH
31138: LD_INT 39
31140: PUSH
31141: LD_INT 34
31143: PUSH
31144: LD_INT 40
31146: PUSH
31147: LD_INT 48
31149: PUSH
31150: LD_INT 49
31152: PUSH
31153: LD_INT 50
31155: PUSH
31156: LD_INT 51
31158: PUSH
31159: LD_INT 52
31161: PUSH
31162: LD_INT 53
31164: PUSH
31165: LD_INT 54
31167: PUSH
31168: LD_INT 55
31170: PUSH
31171: LD_INT 56
31173: PUSH
31174: LD_INT 57
31176: PUSH
31177: LD_INT 58
31179: PUSH
31180: LD_INT 59
31182: PUSH
31183: LD_INT 60
31185: PUSH
31186: LD_INT 61
31188: PUSH
31189: LD_INT 62
31191: PUSH
31192: LD_INT 80
31194: PUSH
31195: LD_INT 82
31197: PUSH
31198: LD_INT 83
31200: PUSH
31201: LD_INT 84
31203: PUSH
31204: LD_INT 85
31206: PUSH
31207: LD_INT 86
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: ST_TO_ADDR
31263: GO 31730
31265: LD_INT 2
31267: DOUBLE
31268: EQUAL
31269: IFTRUE 31273
31271: GO 31499
31273: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31274: LD_ADDR_VAR 0 4
31278: PUSH
31279: LD_INT 35
31281: PUSH
31282: LD_INT 45
31284: PUSH
31285: LD_INT 46
31287: PUSH
31288: LD_INT 47
31290: PUSH
31291: LD_INT 82
31293: PUSH
31294: LD_INT 83
31296: PUSH
31297: LD_INT 84
31299: PUSH
31300: LD_INT 85
31302: PUSH
31303: LD_INT 87
31305: PUSH
31306: LD_INT 70
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: LD_INT 11
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: LD_INT 4
31320: PUSH
31321: LD_INT 5
31323: PUSH
31324: LD_INT 6
31326: PUSH
31327: LD_INT 15
31329: PUSH
31330: LD_INT 18
31332: PUSH
31333: LD_INT 7
31335: PUSH
31336: LD_INT 17
31338: PUSH
31339: LD_INT 8
31341: PUSH
31342: LD_INT 20
31344: PUSH
31345: LD_INT 21
31347: PUSH
31348: LD_INT 22
31350: PUSH
31351: LD_INT 72
31353: PUSH
31354: LD_INT 26
31356: PUSH
31357: LD_INT 69
31359: PUSH
31360: LD_INT 39
31362: PUSH
31363: LD_INT 40
31365: PUSH
31366: LD_INT 41
31368: PUSH
31369: LD_INT 42
31371: PUSH
31372: LD_INT 43
31374: PUSH
31375: LD_INT 48
31377: PUSH
31378: LD_INT 49
31380: PUSH
31381: LD_INT 50
31383: PUSH
31384: LD_INT 51
31386: PUSH
31387: LD_INT 52
31389: PUSH
31390: LD_INT 53
31392: PUSH
31393: LD_INT 54
31395: PUSH
31396: LD_INT 55
31398: PUSH
31399: LD_INT 56
31401: PUSH
31402: LD_INT 60
31404: PUSH
31405: LD_INT 61
31407: PUSH
31408: LD_INT 62
31410: PUSH
31411: LD_INT 66
31413: PUSH
31414: LD_INT 67
31416: PUSH
31417: LD_INT 68
31419: PUSH
31420: LD_INT 81
31422: PUSH
31423: LD_INT 82
31425: PUSH
31426: LD_INT 83
31428: PUSH
31429: LD_INT 84
31431: PUSH
31432: LD_INT 85
31434: PUSH
31435: LD_INT 87
31437: PUSH
31438: LD_INT 88
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
31497: GO 31730
31499: LD_INT 3
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 31729
31507: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31508: LD_ADDR_VAR 0 4
31512: PUSH
31513: LD_INT 46
31515: PUSH
31516: LD_INT 47
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: LD_INT 2
31524: PUSH
31525: LD_INT 82
31527: PUSH
31528: LD_INT 83
31530: PUSH
31531: LD_INT 84
31533: PUSH
31534: LD_INT 85
31536: PUSH
31537: LD_INT 86
31539: PUSH
31540: LD_INT 11
31542: PUSH
31543: LD_INT 9
31545: PUSH
31546: LD_INT 20
31548: PUSH
31549: LD_INT 19
31551: PUSH
31552: LD_INT 21
31554: PUSH
31555: LD_INT 24
31557: PUSH
31558: LD_INT 22
31560: PUSH
31561: LD_INT 25
31563: PUSH
31564: LD_INT 28
31566: PUSH
31567: LD_INT 29
31569: PUSH
31570: LD_INT 30
31572: PUSH
31573: LD_INT 31
31575: PUSH
31576: LD_INT 37
31578: PUSH
31579: LD_INT 38
31581: PUSH
31582: LD_INT 32
31584: PUSH
31585: LD_INT 27
31587: PUSH
31588: LD_INT 33
31590: PUSH
31591: LD_INT 69
31593: PUSH
31594: LD_INT 39
31596: PUSH
31597: LD_INT 34
31599: PUSH
31600: LD_INT 40
31602: PUSH
31603: LD_INT 71
31605: PUSH
31606: LD_INT 23
31608: PUSH
31609: LD_INT 44
31611: PUSH
31612: LD_INT 48
31614: PUSH
31615: LD_INT 49
31617: PUSH
31618: LD_INT 50
31620: PUSH
31621: LD_INT 51
31623: PUSH
31624: LD_INT 52
31626: PUSH
31627: LD_INT 53
31629: PUSH
31630: LD_INT 54
31632: PUSH
31633: LD_INT 55
31635: PUSH
31636: LD_INT 56
31638: PUSH
31639: LD_INT 57
31641: PUSH
31642: LD_INT 58
31644: PUSH
31645: LD_INT 59
31647: PUSH
31648: LD_INT 63
31650: PUSH
31651: LD_INT 64
31653: PUSH
31654: LD_INT 65
31656: PUSH
31657: LD_INT 82
31659: PUSH
31660: LD_INT 83
31662: PUSH
31663: LD_INT 84
31665: PUSH
31666: LD_INT 85
31668: PUSH
31669: LD_INT 86
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: ST_TO_ADDR
31727: GO 31730
31729: POP
// if state > - 1 and state < 3 then
31730: LD_VAR 0 3
31734: PUSH
31735: LD_INT 1
31737: NEG
31738: GREATER
31739: PUSH
31740: LD_VAR 0 3
31744: PUSH
31745: LD_INT 3
31747: LESS
31748: AND
31749: IFFALSE 31806
// for i in result do
31751: LD_ADDR_VAR 0 5
31755: PUSH
31756: LD_VAR 0 4
31760: PUSH
31761: FOR_IN
31762: IFFALSE 31804
// if GetTech ( i , side ) <> state then
31764: LD_VAR 0 5
31768: PPUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL_OW 321
31778: PUSH
31779: LD_VAR 0 3
31783: NONEQUAL
31784: IFFALSE 31802
// result := result diff i ;
31786: LD_ADDR_VAR 0 4
31790: PUSH
31791: LD_VAR 0 4
31795: PUSH
31796: LD_VAR 0 5
31800: DIFF
31801: ST_TO_ADDR
31802: GO 31761
31804: POP
31805: POP
// end ;
31806: LD_VAR 0 4
31810: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31811: LD_INT 0
31813: PPUSH
31814: PPUSH
31815: PPUSH
// result := true ;
31816: LD_ADDR_VAR 0 3
31820: PUSH
31821: LD_INT 1
31823: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31824: LD_ADDR_VAR 0 5
31828: PUSH
31829: LD_VAR 0 2
31833: PPUSH
31834: CALL_OW 480
31838: ST_TO_ADDR
// if not tmp then
31839: LD_VAR 0 5
31843: NOT
31844: IFFALSE 31848
// exit ;
31846: GO 31897
// for i in tmp do
31848: LD_ADDR_VAR 0 4
31852: PUSH
31853: LD_VAR 0 5
31857: PUSH
31858: FOR_IN
31859: IFFALSE 31895
// if GetTech ( i , side ) <> state_researched then
31861: LD_VAR 0 4
31865: PPUSH
31866: LD_VAR 0 1
31870: PPUSH
31871: CALL_OW 321
31875: PUSH
31876: LD_INT 2
31878: NONEQUAL
31879: IFFALSE 31893
// begin result := false ;
31881: LD_ADDR_VAR 0 3
31885: PUSH
31886: LD_INT 0
31888: ST_TO_ADDR
// exit ;
31889: POP
31890: POP
31891: GO 31897
// end ;
31893: GO 31858
31895: POP
31896: POP
// end ;
31897: LD_VAR 0 3
31901: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31902: LD_INT 0
31904: PPUSH
31905: PPUSH
31906: PPUSH
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31917: LD_VAR 0 1
31921: NOT
31922: PUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 257
31932: PUSH
31933: LD_INT 9
31935: NONEQUAL
31936: OR
31937: IFFALSE 31941
// exit ;
31939: GO 32514
// side := GetSide ( unit ) ;
31941: LD_ADDR_VAR 0 9
31945: PUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 255
31955: ST_TO_ADDR
// tech_space := tech_spacanom ;
31956: LD_ADDR_VAR 0 12
31960: PUSH
31961: LD_INT 29
31963: ST_TO_ADDR
// tech_time := tech_taurad ;
31964: LD_ADDR_VAR 0 13
31968: PUSH
31969: LD_INT 28
31971: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31972: LD_ADDR_VAR 0 11
31976: PUSH
31977: LD_VAR 0 1
31981: PPUSH
31982: CALL_OW 310
31986: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31987: LD_VAR 0 11
31991: PPUSH
31992: CALL_OW 247
31996: PUSH
31997: LD_INT 2
31999: EQUAL
32000: IFFALSE 32004
// exit ;
32002: GO 32514
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32004: LD_ADDR_VAR 0 8
32008: PUSH
32009: LD_INT 81
32011: PUSH
32012: LD_VAR 0 9
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 3
32023: PUSH
32024: LD_INT 21
32026: PUSH
32027: LD_INT 3
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PPUSH
32042: CALL_OW 69
32046: ST_TO_ADDR
// if not tmp then
32047: LD_VAR 0 8
32051: NOT
32052: IFFALSE 32056
// exit ;
32054: GO 32514
// if in_unit then
32056: LD_VAR 0 11
32060: IFFALSE 32084
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32062: LD_ADDR_VAR 0 10
32066: PUSH
32067: LD_VAR 0 8
32071: PPUSH
32072: LD_VAR 0 11
32076: PPUSH
32077: CALL_OW 74
32081: ST_TO_ADDR
32082: GO 32104
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32084: LD_ADDR_VAR 0 10
32088: PUSH
32089: LD_VAR 0 8
32093: PPUSH
32094: LD_VAR 0 1
32098: PPUSH
32099: CALL_OW 74
32103: ST_TO_ADDR
// if not enemy then
32104: LD_VAR 0 10
32108: NOT
32109: IFFALSE 32113
// exit ;
32111: GO 32514
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32113: LD_VAR 0 11
32117: PUSH
32118: LD_VAR 0 11
32122: PPUSH
32123: LD_VAR 0 10
32127: PPUSH
32128: CALL_OW 296
32132: PUSH
32133: LD_INT 13
32135: GREATER
32136: AND
32137: PUSH
32138: LD_VAR 0 1
32142: PPUSH
32143: LD_VAR 0 10
32147: PPUSH
32148: CALL_OW 296
32152: PUSH
32153: LD_INT 12
32155: GREATER
32156: OR
32157: IFFALSE 32161
// exit ;
32159: GO 32514
// missile := [ 1 ] ;
32161: LD_ADDR_VAR 0 14
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32172: LD_VAR 0 9
32176: PPUSH
32177: LD_VAR 0 12
32181: PPUSH
32182: CALL_OW 325
32186: IFFALSE 32215
// missile := Replace ( missile , missile + 1 , 2 ) ;
32188: LD_ADDR_VAR 0 14
32192: PUSH
32193: LD_VAR 0 14
32197: PPUSH
32198: LD_VAR 0 14
32202: PUSH
32203: LD_INT 1
32205: PLUS
32206: PPUSH
32207: LD_INT 2
32209: PPUSH
32210: CALL_OW 1
32214: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32215: LD_VAR 0 9
32219: PPUSH
32220: LD_VAR 0 13
32224: PPUSH
32225: CALL_OW 325
32229: PUSH
32230: LD_VAR 0 10
32234: PPUSH
32235: CALL_OW 255
32239: PPUSH
32240: LD_VAR 0 13
32244: PPUSH
32245: CALL_OW 325
32249: NOT
32250: AND
32251: IFFALSE 32280
// missile := Replace ( missile , missile + 1 , 3 ) ;
32253: LD_ADDR_VAR 0 14
32257: PUSH
32258: LD_VAR 0 14
32262: PPUSH
32263: LD_VAR 0 14
32267: PUSH
32268: LD_INT 1
32270: PLUS
32271: PPUSH
32272: LD_INT 3
32274: PPUSH
32275: CALL_OW 1
32279: ST_TO_ADDR
// if missile < 2 then
32280: LD_VAR 0 14
32284: PUSH
32285: LD_INT 2
32287: LESS
32288: IFFALSE 32292
// exit ;
32290: GO 32514
// x := GetX ( enemy ) ;
32292: LD_ADDR_VAR 0 4
32296: PUSH
32297: LD_VAR 0 10
32301: PPUSH
32302: CALL_OW 250
32306: ST_TO_ADDR
// y := GetY ( enemy ) ;
32307: LD_ADDR_VAR 0 5
32311: PUSH
32312: LD_VAR 0 10
32316: PPUSH
32317: CALL_OW 251
32321: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32322: LD_ADDR_VAR 0 6
32326: PUSH
32327: LD_VAR 0 4
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PPUSH
32336: LD_INT 1
32338: PPUSH
32339: CALL_OW 12
32343: PLUS
32344: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32345: LD_ADDR_VAR 0 7
32349: PUSH
32350: LD_VAR 0 5
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PPUSH
32359: LD_INT 1
32361: PPUSH
32362: CALL_OW 12
32366: PLUS
32367: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32368: LD_VAR 0 6
32372: PPUSH
32373: LD_VAR 0 7
32377: PPUSH
32378: CALL_OW 488
32382: NOT
32383: IFFALSE 32405
// begin _x := x ;
32385: LD_ADDR_VAR 0 6
32389: PUSH
32390: LD_VAR 0 4
32394: ST_TO_ADDR
// _y := y ;
32395: LD_ADDR_VAR 0 7
32399: PUSH
32400: LD_VAR 0 5
32404: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32405: LD_ADDR_VAR 0 3
32409: PUSH
32410: LD_INT 1
32412: PPUSH
32413: LD_VAR 0 14
32417: PPUSH
32418: CALL_OW 12
32422: ST_TO_ADDR
// case i of 1 :
32423: LD_VAR 0 3
32427: PUSH
32428: LD_INT 1
32430: DOUBLE
32431: EQUAL
32432: IFTRUE 32436
32434: GO 32453
32436: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32437: LD_VAR 0 1
32441: PPUSH
32442: LD_VAR 0 10
32446: PPUSH
32447: CALL_OW 115
32451: GO 32514
32453: LD_INT 2
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32483
32461: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32462: LD_VAR 0 1
32466: PPUSH
32467: LD_VAR 0 6
32471: PPUSH
32472: LD_VAR 0 7
32476: PPUSH
32477: CALL_OW 153
32481: GO 32514
32483: LD_INT 3
32485: DOUBLE
32486: EQUAL
32487: IFTRUE 32491
32489: GO 32513
32491: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32492: LD_VAR 0 1
32496: PPUSH
32497: LD_VAR 0 6
32501: PPUSH
32502: LD_VAR 0 7
32506: PPUSH
32507: CALL_OW 154
32511: GO 32514
32513: POP
// end ;
32514: LD_VAR 0 2
32518: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32519: LD_INT 0
32521: PPUSH
32522: PPUSH
32523: PPUSH
32524: PPUSH
32525: PPUSH
32526: PPUSH
// if not unit or not building then
32527: LD_VAR 0 1
32531: NOT
32532: PUSH
32533: LD_VAR 0 2
32537: NOT
32538: OR
32539: IFFALSE 32543
// exit ;
32541: GO 32701
// x := GetX ( building ) ;
32543: LD_ADDR_VAR 0 5
32547: PUSH
32548: LD_VAR 0 2
32552: PPUSH
32553: CALL_OW 250
32557: ST_TO_ADDR
// y := GetY ( building ) ;
32558: LD_ADDR_VAR 0 6
32562: PUSH
32563: LD_VAR 0 2
32567: PPUSH
32568: CALL_OW 251
32572: ST_TO_ADDR
// for i = 0 to 5 do
32573: LD_ADDR_VAR 0 4
32577: PUSH
32578: DOUBLE
32579: LD_INT 0
32581: DEC
32582: ST_TO_ADDR
32583: LD_INT 5
32585: PUSH
32586: FOR_TO
32587: IFFALSE 32699
// begin _x := ShiftX ( x , i , 3 ) ;
32589: LD_ADDR_VAR 0 7
32593: PUSH
32594: LD_VAR 0 5
32598: PPUSH
32599: LD_VAR 0 4
32603: PPUSH
32604: LD_INT 3
32606: PPUSH
32607: CALL_OW 272
32611: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32612: LD_ADDR_VAR 0 8
32616: PUSH
32617: LD_VAR 0 6
32621: PPUSH
32622: LD_VAR 0 4
32626: PPUSH
32627: LD_INT 3
32629: PPUSH
32630: CALL_OW 273
32634: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32635: LD_VAR 0 7
32639: PPUSH
32640: LD_VAR 0 8
32644: PPUSH
32645: CALL_OW 488
32649: NOT
32650: IFFALSE 32654
// continue ;
32652: GO 32586
// if HexInfo ( _x , _y ) = 0 then
32654: LD_VAR 0 7
32658: PPUSH
32659: LD_VAR 0 8
32663: PPUSH
32664: CALL_OW 428
32668: PUSH
32669: LD_INT 0
32671: EQUAL
32672: IFFALSE 32697
// begin ComMoveXY ( unit , _x , _y ) ;
32674: LD_VAR 0 1
32678: PPUSH
32679: LD_VAR 0 7
32683: PPUSH
32684: LD_VAR 0 8
32688: PPUSH
32689: CALL_OW 111
// exit ;
32693: POP
32694: POP
32695: GO 32701
// end ; end ;
32697: GO 32586
32699: POP
32700: POP
// end ;
32701: LD_VAR 0 3
32705: RET
// export function ScanBase ( side , base_area ) ; begin
32706: LD_INT 0
32708: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32709: LD_ADDR_VAR 0 3
32713: PUSH
32714: LD_VAR 0 2
32718: PPUSH
32719: LD_INT 81
32721: PUSH
32722: LD_VAR 0 1
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PPUSH
32731: CALL_OW 70
32735: ST_TO_ADDR
// end ;
32736: LD_VAR 0 3
32740: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32741: LD_INT 0
32743: PPUSH
32744: PPUSH
32745: PPUSH
32746: PPUSH
// result := false ;
32747: LD_ADDR_VAR 0 2
32751: PUSH
32752: LD_INT 0
32754: ST_TO_ADDR
// side := GetSide ( unit ) ;
32755: LD_ADDR_VAR 0 3
32759: PUSH
32760: LD_VAR 0 1
32764: PPUSH
32765: CALL_OW 255
32769: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32770: LD_ADDR_VAR 0 4
32774: PUSH
32775: LD_VAR 0 1
32779: PPUSH
32780: CALL_OW 248
32784: ST_TO_ADDR
// case nat of 1 :
32785: LD_VAR 0 4
32789: PUSH
32790: LD_INT 1
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32809
32798: POP
// tech := tech_lassight ; 2 :
32799: LD_ADDR_VAR 0 5
32803: PUSH
32804: LD_INT 12
32806: ST_TO_ADDR
32807: GO 32848
32809: LD_INT 2
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32828
32817: POP
// tech := tech_mortar ; 3 :
32818: LD_ADDR_VAR 0 5
32822: PUSH
32823: LD_INT 41
32825: ST_TO_ADDR
32826: GO 32848
32828: LD_INT 3
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32847
32836: POP
// tech := tech_bazooka ; end ;
32837: LD_ADDR_VAR 0 5
32841: PUSH
32842: LD_INT 44
32844: ST_TO_ADDR
32845: GO 32848
32847: POP
// if Researched ( side , tech ) then
32848: LD_VAR 0 3
32852: PPUSH
32853: LD_VAR 0 5
32857: PPUSH
32858: CALL_OW 325
32862: IFFALSE 32889
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32864: LD_ADDR_VAR 0 2
32868: PUSH
32869: LD_INT 5
32871: PUSH
32872: LD_INT 8
32874: PUSH
32875: LD_INT 9
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: PUSH
32883: LD_VAR 0 4
32887: ARRAY
32888: ST_TO_ADDR
// end ;
32889: LD_VAR 0 2
32893: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32894: LD_INT 0
32896: PPUSH
32897: PPUSH
32898: PPUSH
// if not mines then
32899: LD_VAR 0 2
32903: NOT
32904: IFFALSE 32908
// exit ;
32906: GO 33052
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32908: LD_ADDR_VAR 0 5
32912: PUSH
32913: LD_INT 81
32915: PUSH
32916: LD_VAR 0 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 3
32927: PUSH
32928: LD_INT 21
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PPUSH
32946: CALL_OW 69
32950: ST_TO_ADDR
// for i in mines do
32951: LD_ADDR_VAR 0 4
32955: PUSH
32956: LD_VAR 0 2
32960: PUSH
32961: FOR_IN
32962: IFFALSE 33050
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32964: LD_VAR 0 4
32968: PUSH
32969: LD_INT 1
32971: ARRAY
32972: PPUSH
32973: LD_VAR 0 4
32977: PUSH
32978: LD_INT 2
32980: ARRAY
32981: PPUSH
32982: CALL_OW 458
32986: NOT
32987: IFFALSE 32991
// continue ;
32989: GO 32961
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32991: LD_VAR 0 4
32995: PUSH
32996: LD_INT 1
32998: ARRAY
32999: PPUSH
33000: LD_VAR 0 4
33004: PUSH
33005: LD_INT 2
33007: ARRAY
33008: PPUSH
33009: CALL_OW 428
33013: PUSH
33014: LD_VAR 0 5
33018: IN
33019: IFFALSE 33048
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33021: LD_VAR 0 4
33025: PUSH
33026: LD_INT 1
33028: ARRAY
33029: PPUSH
33030: LD_VAR 0 4
33034: PUSH
33035: LD_INT 2
33037: ARRAY
33038: PPUSH
33039: LD_VAR 0 1
33043: PPUSH
33044: CALL_OW 456
// end ;
33048: GO 32961
33050: POP
33051: POP
// end ;
33052: LD_VAR 0 3
33056: RET
// export function Count ( array ) ; begin
33057: LD_INT 0
33059: PPUSH
// result := array + 0 ;
33060: LD_ADDR_VAR 0 2
33064: PUSH
33065: LD_VAR 0 1
33069: PUSH
33070: LD_INT 0
33072: PLUS
33073: ST_TO_ADDR
// end ;
33074: LD_VAR 0 2
33078: RET
// export function IsEmpty ( building ) ; begin
33079: LD_INT 0
33081: PPUSH
// if not building then
33082: LD_VAR 0 1
33086: NOT
33087: IFFALSE 33091
// exit ;
33089: GO 33134
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33091: LD_ADDR_VAR 0 2
33095: PUSH
33096: LD_VAR 0 1
33100: PUSH
33101: LD_INT 22
33103: PUSH
33104: LD_VAR 0 1
33108: PPUSH
33109: CALL_OW 255
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 58
33120: PUSH
33121: EMPTY
33122: LIST
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PPUSH
33128: CALL_OW 69
33132: IN
33133: ST_TO_ADDR
// end ;
33134: LD_VAR 0 2
33138: RET
// export function IsNotFull ( building ) ; var places ; begin
33139: LD_INT 0
33141: PPUSH
33142: PPUSH
// if not building then
33143: LD_VAR 0 1
33147: NOT
33148: IFFALSE 33152
// exit ;
33150: GO 33180
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33152: LD_ADDR_VAR 0 2
33156: PUSH
33157: LD_VAR 0 1
33161: PPUSH
33162: LD_INT 3
33164: PUSH
33165: LD_INT 62
33167: PUSH
33168: EMPTY
33169: LIST
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PPUSH
33175: CALL_OW 72
33179: ST_TO_ADDR
// end ;
33180: LD_VAR 0 2
33184: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33185: LD_INT 0
33187: PPUSH
33188: PPUSH
33189: PPUSH
33190: PPUSH
// tmp := [ ] ;
33191: LD_ADDR_VAR 0 3
33195: PUSH
33196: EMPTY
33197: ST_TO_ADDR
// list := [ ] ;
33198: LD_ADDR_VAR 0 5
33202: PUSH
33203: EMPTY
33204: ST_TO_ADDR
// for i = 16 to 25 do
33205: LD_ADDR_VAR 0 4
33209: PUSH
33210: DOUBLE
33211: LD_INT 16
33213: DEC
33214: ST_TO_ADDR
33215: LD_INT 25
33217: PUSH
33218: FOR_TO
33219: IFFALSE 33292
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33221: LD_ADDR_VAR 0 3
33225: PUSH
33226: LD_VAR 0 3
33230: PUSH
33231: LD_INT 22
33233: PUSH
33234: LD_VAR 0 1
33238: PPUSH
33239: CALL_OW 255
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 91
33250: PUSH
33251: LD_VAR 0 1
33255: PUSH
33256: LD_INT 6
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 30
33266: PUSH
33267: LD_VAR 0 4
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: PUSH
33281: EMPTY
33282: LIST
33283: PPUSH
33284: CALL_OW 69
33288: ADD
33289: ST_TO_ADDR
33290: GO 33218
33292: POP
33293: POP
// for i = 1 to tmp do
33294: LD_ADDR_VAR 0 4
33298: PUSH
33299: DOUBLE
33300: LD_INT 1
33302: DEC
33303: ST_TO_ADDR
33304: LD_VAR 0 3
33308: PUSH
33309: FOR_TO
33310: IFFALSE 33398
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33312: LD_ADDR_VAR 0 5
33316: PUSH
33317: LD_VAR 0 5
33321: PUSH
33322: LD_VAR 0 3
33326: PUSH
33327: LD_VAR 0 4
33331: ARRAY
33332: PPUSH
33333: CALL_OW 266
33337: PUSH
33338: LD_VAR 0 3
33342: PUSH
33343: LD_VAR 0 4
33347: ARRAY
33348: PPUSH
33349: CALL_OW 250
33353: PUSH
33354: LD_VAR 0 3
33358: PUSH
33359: LD_VAR 0 4
33363: ARRAY
33364: PPUSH
33365: CALL_OW 251
33369: PUSH
33370: LD_VAR 0 3
33374: PUSH
33375: LD_VAR 0 4
33379: ARRAY
33380: PPUSH
33381: CALL_OW 254
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: PUSH
33392: EMPTY
33393: LIST
33394: ADD
33395: ST_TO_ADDR
33396: GO 33309
33398: POP
33399: POP
// result := list ;
33400: LD_ADDR_VAR 0 2
33404: PUSH
33405: LD_VAR 0 5
33409: ST_TO_ADDR
// end ;
33410: LD_VAR 0 2
33414: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33415: LD_INT 0
33417: PPUSH
33418: PPUSH
33419: PPUSH
33420: PPUSH
33421: PPUSH
33422: PPUSH
33423: PPUSH
// if not factory then
33424: LD_VAR 0 1
33428: NOT
33429: IFFALSE 33433
// exit ;
33431: GO 34026
// if control = control_apeman then
33433: LD_VAR 0 4
33437: PUSH
33438: LD_INT 5
33440: EQUAL
33441: IFFALSE 33550
// begin tmp := UnitsInside ( factory ) ;
33443: LD_ADDR_VAR 0 8
33447: PUSH
33448: LD_VAR 0 1
33452: PPUSH
33453: CALL_OW 313
33457: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33458: LD_VAR 0 8
33462: PPUSH
33463: LD_INT 25
33465: PUSH
33466: LD_INT 12
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PPUSH
33473: CALL_OW 72
33477: NOT
33478: IFFALSE 33488
// control := control_manual ;
33480: LD_ADDR_VAR 0 4
33484: PUSH
33485: LD_INT 1
33487: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33488: LD_ADDR_VAR 0 8
33492: PUSH
33493: LD_VAR 0 1
33497: PPUSH
33498: CALL 33185 0 1
33502: ST_TO_ADDR
// if tmp then
33503: LD_VAR 0 8
33507: IFFALSE 33550
// begin for i in tmp do
33509: LD_ADDR_VAR 0 7
33513: PUSH
33514: LD_VAR 0 8
33518: PUSH
33519: FOR_IN
33520: IFFALSE 33548
// if i [ 1 ] = b_ext_radio then
33522: LD_VAR 0 7
33526: PUSH
33527: LD_INT 1
33529: ARRAY
33530: PUSH
33531: LD_INT 22
33533: EQUAL
33534: IFFALSE 33546
// begin control := control_remote ;
33536: LD_ADDR_VAR 0 4
33540: PUSH
33541: LD_INT 2
33543: ST_TO_ADDR
// break ;
33544: GO 33548
// end ;
33546: GO 33519
33548: POP
33549: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33550: LD_VAR 0 1
33554: PPUSH
33555: LD_VAR 0 2
33559: PPUSH
33560: LD_VAR 0 3
33564: PPUSH
33565: LD_VAR 0 4
33569: PPUSH
33570: LD_VAR 0 5
33574: PPUSH
33575: CALL_OW 448
33579: IFFALSE 33614
// begin result := [ chassis , engine , control , weapon ] ;
33581: LD_ADDR_VAR 0 6
33585: PUSH
33586: LD_VAR 0 2
33590: PUSH
33591: LD_VAR 0 3
33595: PUSH
33596: LD_VAR 0 4
33600: PUSH
33601: LD_VAR 0 5
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: ST_TO_ADDR
// exit ;
33612: GO 34026
// end ; _chassis := AvailableChassisList ( factory ) ;
33614: LD_ADDR_VAR 0 9
33618: PUSH
33619: LD_VAR 0 1
33623: PPUSH
33624: CALL_OW 475
33628: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33629: LD_ADDR_VAR 0 11
33633: PUSH
33634: LD_VAR 0 1
33638: PPUSH
33639: CALL_OW 476
33643: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33644: LD_ADDR_VAR 0 12
33648: PUSH
33649: LD_VAR 0 1
33653: PPUSH
33654: CALL_OW 477
33658: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33659: LD_ADDR_VAR 0 10
33663: PUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 478
33673: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33674: LD_VAR 0 9
33678: NOT
33679: PUSH
33680: LD_VAR 0 11
33684: NOT
33685: OR
33686: PUSH
33687: LD_VAR 0 12
33691: NOT
33692: OR
33693: PUSH
33694: LD_VAR 0 10
33698: NOT
33699: OR
33700: IFFALSE 33735
// begin result := [ chassis , engine , control , weapon ] ;
33702: LD_ADDR_VAR 0 6
33706: PUSH
33707: LD_VAR 0 2
33711: PUSH
33712: LD_VAR 0 3
33716: PUSH
33717: LD_VAR 0 4
33721: PUSH
33722: LD_VAR 0 5
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: ST_TO_ADDR
// exit ;
33733: GO 34026
// end ; if not chassis in _chassis then
33735: LD_VAR 0 2
33739: PUSH
33740: LD_VAR 0 9
33744: IN
33745: NOT
33746: IFFALSE 33772
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33748: LD_ADDR_VAR 0 2
33752: PUSH
33753: LD_VAR 0 9
33757: PUSH
33758: LD_INT 1
33760: PPUSH
33761: LD_VAR 0 9
33765: PPUSH
33766: CALL_OW 12
33770: ARRAY
33771: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33772: LD_VAR 0 2
33776: PPUSH
33777: LD_VAR 0 3
33781: PPUSH
33782: CALL 34031 0 2
33786: NOT
33787: IFFALSE 33846
// repeat engine := _engine [ 1 ] ;
33789: LD_ADDR_VAR 0 3
33793: PUSH
33794: LD_VAR 0 11
33798: PUSH
33799: LD_INT 1
33801: ARRAY
33802: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33803: LD_ADDR_VAR 0 11
33807: PUSH
33808: LD_VAR 0 11
33812: PPUSH
33813: LD_INT 1
33815: PPUSH
33816: CALL_OW 3
33820: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33821: LD_VAR 0 2
33825: PPUSH
33826: LD_VAR 0 3
33830: PPUSH
33831: CALL 34031 0 2
33835: PUSH
33836: LD_VAR 0 11
33840: PUSH
33841: EMPTY
33842: EQUAL
33843: OR
33844: IFFALSE 33789
// if not control in _control then
33846: LD_VAR 0 4
33850: PUSH
33851: LD_VAR 0 12
33855: IN
33856: NOT
33857: IFFALSE 33883
// control := _control [ rand ( 1 , _control ) ] ;
33859: LD_ADDR_VAR 0 4
33863: PUSH
33864: LD_VAR 0 12
33868: PUSH
33869: LD_INT 1
33871: PPUSH
33872: LD_VAR 0 12
33876: PPUSH
33877: CALL_OW 12
33881: ARRAY
33882: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33883: LD_VAR 0 2
33887: PPUSH
33888: LD_VAR 0 5
33892: PPUSH
33893: CALL 34251 0 2
33897: NOT
33898: IFFALSE 33957
// repeat weapon := _weapon [ 1 ] ;
33900: LD_ADDR_VAR 0 5
33904: PUSH
33905: LD_VAR 0 10
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33914: LD_ADDR_VAR 0 10
33918: PUSH
33919: LD_VAR 0 10
33923: PPUSH
33924: LD_INT 1
33926: PPUSH
33927: CALL_OW 3
33931: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33932: LD_VAR 0 2
33936: PPUSH
33937: LD_VAR 0 5
33941: PPUSH
33942: CALL 34251 0 2
33946: PUSH
33947: LD_VAR 0 10
33951: PUSH
33952: EMPTY
33953: EQUAL
33954: OR
33955: IFFALSE 33900
// result := [ ] ;
33957: LD_ADDR_VAR 0 6
33961: PUSH
33962: EMPTY
33963: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33964: LD_VAR 0 1
33968: PPUSH
33969: LD_VAR 0 2
33973: PPUSH
33974: LD_VAR 0 3
33978: PPUSH
33979: LD_VAR 0 4
33983: PPUSH
33984: LD_VAR 0 5
33988: PPUSH
33989: CALL_OW 448
33993: IFFALSE 34026
// result := [ chassis , engine , control , weapon ] ;
33995: LD_ADDR_VAR 0 6
33999: PUSH
34000: LD_VAR 0 2
34004: PUSH
34005: LD_VAR 0 3
34009: PUSH
34010: LD_VAR 0 4
34014: PUSH
34015: LD_VAR 0 5
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: ST_TO_ADDR
// end ;
34026: LD_VAR 0 6
34030: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34031: LD_INT 0
34033: PPUSH
// if not chassis or not engine then
34034: LD_VAR 0 1
34038: NOT
34039: PUSH
34040: LD_VAR 0 2
34044: NOT
34045: OR
34046: IFFALSE 34050
// exit ;
34048: GO 34246
// case engine of engine_solar :
34050: LD_VAR 0 2
34054: PUSH
34055: LD_INT 2
34057: DOUBLE
34058: EQUAL
34059: IFTRUE 34063
34061: GO 34101
34063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34064: LD_ADDR_VAR 0 3
34068: PUSH
34069: LD_INT 11
34071: PUSH
34072: LD_INT 12
34074: PUSH
34075: LD_INT 13
34077: PUSH
34078: LD_INT 14
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: LD_INT 3
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: ST_TO_ADDR
34099: GO 34230
34101: LD_INT 1
34103: DOUBLE
34104: EQUAL
34105: IFTRUE 34109
34107: GO 34171
34109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34110: LD_ADDR_VAR 0 3
34114: PUSH
34115: LD_INT 11
34117: PUSH
34118: LD_INT 12
34120: PUSH
34121: LD_INT 13
34123: PUSH
34124: LD_INT 14
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: LD_INT 4
34138: PUSH
34139: LD_INT 5
34141: PUSH
34142: LD_INT 21
34144: PUSH
34145: LD_INT 23
34147: PUSH
34148: LD_INT 22
34150: PUSH
34151: LD_INT 24
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: ST_TO_ADDR
34169: GO 34230
34171: LD_INT 3
34173: DOUBLE
34174: EQUAL
34175: IFTRUE 34179
34177: GO 34229
34179: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34180: LD_ADDR_VAR 0 3
34184: PUSH
34185: LD_INT 13
34187: PUSH
34188: LD_INT 14
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: LD_INT 4
34199: PUSH
34200: LD_INT 5
34202: PUSH
34203: LD_INT 21
34205: PUSH
34206: LD_INT 22
34208: PUSH
34209: LD_INT 23
34211: PUSH
34212: LD_INT 24
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: ST_TO_ADDR
34227: GO 34230
34229: POP
// result := ( chassis in result ) ;
34230: LD_ADDR_VAR 0 3
34234: PUSH
34235: LD_VAR 0 1
34239: PUSH
34240: LD_VAR 0 3
34244: IN
34245: ST_TO_ADDR
// end ;
34246: LD_VAR 0 3
34250: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34251: LD_INT 0
34253: PPUSH
// if not chassis or not weapon then
34254: LD_VAR 0 1
34258: NOT
34259: PUSH
34260: LD_VAR 0 2
34264: NOT
34265: OR
34266: IFFALSE 34270
// exit ;
34268: GO 35330
// case weapon of us_machine_gun :
34270: LD_VAR 0 2
34274: PUSH
34275: LD_INT 2
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34313
34283: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: LD_INT 4
34300: PUSH
34301: LD_INT 5
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: ST_TO_ADDR
34311: GO 35314
34313: LD_INT 3
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34351
34321: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: LD_INT 3
34335: PUSH
34336: LD_INT 4
34338: PUSH
34339: LD_INT 5
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: ST_TO_ADDR
34349: GO 35314
34351: LD_INT 11
34353: DOUBLE
34354: EQUAL
34355: IFTRUE 34359
34357: GO 34389
34359: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34360: LD_ADDR_VAR 0 3
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: LD_INT 3
34373: PUSH
34374: LD_INT 4
34376: PUSH
34377: LD_INT 5
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: ST_TO_ADDR
34387: GO 35314
34389: LD_INT 4
34391: DOUBLE
34392: EQUAL
34393: IFTRUE 34397
34395: GO 34423
34397: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34398: LD_ADDR_VAR 0 3
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: LD_INT 3
34408: PUSH
34409: LD_INT 4
34411: PUSH
34412: LD_INT 5
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: ST_TO_ADDR
34421: GO 35314
34423: LD_INT 5
34425: DOUBLE
34426: EQUAL
34427: IFTRUE 34431
34429: GO 34457
34431: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34432: LD_ADDR_VAR 0 3
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: LD_INT 4
34445: PUSH
34446: LD_INT 5
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: ST_TO_ADDR
34455: GO 35314
34457: LD_INT 9
34459: DOUBLE
34460: EQUAL
34461: IFTRUE 34465
34463: GO 34491
34465: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34466: LD_ADDR_VAR 0 3
34470: PUSH
34471: LD_INT 2
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: LD_INT 4
34479: PUSH
34480: LD_INT 5
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: ST_TO_ADDR
34489: GO 35314
34491: LD_INT 7
34493: DOUBLE
34494: EQUAL
34495: IFTRUE 34499
34497: GO 34525
34499: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34500: LD_ADDR_VAR 0 3
34504: PUSH
34505: LD_INT 2
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: LD_INT 5
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: ST_TO_ADDR
34523: GO 35314
34525: LD_INT 12
34527: DOUBLE
34528: EQUAL
34529: IFTRUE 34533
34531: GO 34559
34533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34534: LD_ADDR_VAR 0 3
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: LD_INT 4
34547: PUSH
34548: LD_INT 5
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: ST_TO_ADDR
34557: GO 35314
34559: LD_INT 13
34561: DOUBLE
34562: EQUAL
34563: IFTRUE 34567
34565: GO 34593
34567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34568: LD_ADDR_VAR 0 3
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: LD_INT 4
34581: PUSH
34582: LD_INT 5
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: ST_TO_ADDR
34591: GO 35314
34593: LD_INT 14
34595: DOUBLE
34596: EQUAL
34597: IFTRUE 34601
34599: GO 34619
34601: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34602: LD_ADDR_VAR 0 3
34606: PUSH
34607: LD_INT 4
34609: PUSH
34610: LD_INT 5
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: ST_TO_ADDR
34617: GO 35314
34619: LD_INT 6
34621: DOUBLE
34622: EQUAL
34623: IFTRUE 34627
34625: GO 34645
34627: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34628: LD_ADDR_VAR 0 3
34632: PUSH
34633: LD_INT 4
34635: PUSH
34636: LD_INT 5
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: ST_TO_ADDR
34643: GO 35314
34645: LD_INT 10
34647: DOUBLE
34648: EQUAL
34649: IFTRUE 34653
34651: GO 34671
34653: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34654: LD_ADDR_VAR 0 3
34658: PUSH
34659: LD_INT 4
34661: PUSH
34662: LD_INT 5
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: ST_TO_ADDR
34669: GO 35314
34671: LD_INT 22
34673: DOUBLE
34674: EQUAL
34675: IFTRUE 34679
34677: GO 34705
34679: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34680: LD_ADDR_VAR 0 3
34684: PUSH
34685: LD_INT 11
34687: PUSH
34688: LD_INT 12
34690: PUSH
34691: LD_INT 13
34693: PUSH
34694: LD_INT 14
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: ST_TO_ADDR
34703: GO 35314
34705: LD_INT 23
34707: DOUBLE
34708: EQUAL
34709: IFTRUE 34713
34711: GO 34739
34713: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34714: LD_ADDR_VAR 0 3
34718: PUSH
34719: LD_INT 11
34721: PUSH
34722: LD_INT 12
34724: PUSH
34725: LD_INT 13
34727: PUSH
34728: LD_INT 14
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: ST_TO_ADDR
34737: GO 35314
34739: LD_INT 24
34741: DOUBLE
34742: EQUAL
34743: IFTRUE 34747
34745: GO 34773
34747: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34748: LD_ADDR_VAR 0 3
34752: PUSH
34753: LD_INT 11
34755: PUSH
34756: LD_INT 12
34758: PUSH
34759: LD_INT 13
34761: PUSH
34762: LD_INT 14
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: ST_TO_ADDR
34771: GO 35314
34773: LD_INT 30
34775: DOUBLE
34776: EQUAL
34777: IFTRUE 34781
34779: GO 34807
34781: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34782: LD_ADDR_VAR 0 3
34786: PUSH
34787: LD_INT 11
34789: PUSH
34790: LD_INT 12
34792: PUSH
34793: LD_INT 13
34795: PUSH
34796: LD_INT 14
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: ST_TO_ADDR
34805: GO 35314
34807: LD_INT 25
34809: DOUBLE
34810: EQUAL
34811: IFTRUE 34815
34813: GO 34833
34815: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34816: LD_ADDR_VAR 0 3
34820: PUSH
34821: LD_INT 13
34823: PUSH
34824: LD_INT 14
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: ST_TO_ADDR
34831: GO 35314
34833: LD_INT 27
34835: DOUBLE
34836: EQUAL
34837: IFTRUE 34841
34839: GO 34859
34841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34842: LD_ADDR_VAR 0 3
34846: PUSH
34847: LD_INT 13
34849: PUSH
34850: LD_INT 14
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: ST_TO_ADDR
34857: GO 35314
34859: LD_INT 92
34861: DOUBLE
34862: EQUAL
34863: IFTRUE 34867
34865: GO 34893
34867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34868: LD_ADDR_VAR 0 3
34872: PUSH
34873: LD_INT 11
34875: PUSH
34876: LD_INT 12
34878: PUSH
34879: LD_INT 13
34881: PUSH
34882: LD_INT 14
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: ST_TO_ADDR
34891: GO 35314
34893: LD_INT 28
34895: DOUBLE
34896: EQUAL
34897: IFTRUE 34901
34899: GO 34919
34901: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34902: LD_ADDR_VAR 0 3
34906: PUSH
34907: LD_INT 13
34909: PUSH
34910: LD_INT 14
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: ST_TO_ADDR
34917: GO 35314
34919: LD_INT 29
34921: DOUBLE
34922: EQUAL
34923: IFTRUE 34927
34925: GO 34945
34927: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34928: LD_ADDR_VAR 0 3
34932: PUSH
34933: LD_INT 13
34935: PUSH
34936: LD_INT 14
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: ST_TO_ADDR
34943: GO 35314
34945: LD_INT 31
34947: DOUBLE
34948: EQUAL
34949: IFTRUE 34953
34951: GO 34971
34953: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34954: LD_ADDR_VAR 0 3
34958: PUSH
34959: LD_INT 13
34961: PUSH
34962: LD_INT 14
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: ST_TO_ADDR
34969: GO 35314
34971: LD_INT 26
34973: DOUBLE
34974: EQUAL
34975: IFTRUE 34979
34977: GO 34997
34979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34980: LD_ADDR_VAR 0 3
34984: PUSH
34985: LD_INT 13
34987: PUSH
34988: LD_INT 14
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: ST_TO_ADDR
34995: GO 35314
34997: LD_INT 42
34999: DOUBLE
35000: EQUAL
35001: IFTRUE 35005
35003: GO 35031
35005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35006: LD_ADDR_VAR 0 3
35010: PUSH
35011: LD_INT 21
35013: PUSH
35014: LD_INT 22
35016: PUSH
35017: LD_INT 23
35019: PUSH
35020: LD_INT 24
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: ST_TO_ADDR
35029: GO 35314
35031: LD_INT 43
35033: DOUBLE
35034: EQUAL
35035: IFTRUE 35039
35037: GO 35065
35039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35040: LD_ADDR_VAR 0 3
35044: PUSH
35045: LD_INT 21
35047: PUSH
35048: LD_INT 22
35050: PUSH
35051: LD_INT 23
35053: PUSH
35054: LD_INT 24
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: ST_TO_ADDR
35063: GO 35314
35065: LD_INT 44
35067: DOUBLE
35068: EQUAL
35069: IFTRUE 35073
35071: GO 35099
35073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35074: LD_ADDR_VAR 0 3
35078: PUSH
35079: LD_INT 21
35081: PUSH
35082: LD_INT 22
35084: PUSH
35085: LD_INT 23
35087: PUSH
35088: LD_INT 24
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
35097: GO 35314
35099: LD_INT 45
35101: DOUBLE
35102: EQUAL
35103: IFTRUE 35107
35105: GO 35133
35107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35108: LD_ADDR_VAR 0 3
35112: PUSH
35113: LD_INT 21
35115: PUSH
35116: LD_INT 22
35118: PUSH
35119: LD_INT 23
35121: PUSH
35122: LD_INT 24
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: ST_TO_ADDR
35131: GO 35314
35133: LD_INT 49
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35167
35141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35142: LD_ADDR_VAR 0 3
35146: PUSH
35147: LD_INT 21
35149: PUSH
35150: LD_INT 22
35152: PUSH
35153: LD_INT 23
35155: PUSH
35156: LD_INT 24
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: ST_TO_ADDR
35165: GO 35314
35167: LD_INT 51
35169: DOUBLE
35170: EQUAL
35171: IFTRUE 35175
35173: GO 35201
35175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35176: LD_ADDR_VAR 0 3
35180: PUSH
35181: LD_INT 21
35183: PUSH
35184: LD_INT 22
35186: PUSH
35187: LD_INT 23
35189: PUSH
35190: LD_INT 24
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: ST_TO_ADDR
35199: GO 35314
35201: LD_INT 52
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35209
35207: GO 35235
35209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_INT 21
35217: PUSH
35218: LD_INT 22
35220: PUSH
35221: LD_INT 23
35223: PUSH
35224: LD_INT 24
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: ST_TO_ADDR
35233: GO 35314
35235: LD_INT 53
35237: DOUBLE
35238: EQUAL
35239: IFTRUE 35243
35241: GO 35261
35243: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35244: LD_ADDR_VAR 0 3
35248: PUSH
35249: LD_INT 23
35251: PUSH
35252: LD_INT 24
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: ST_TO_ADDR
35259: GO 35314
35261: LD_INT 46
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35269
35267: GO 35287
35269: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35270: LD_ADDR_VAR 0 3
35274: PUSH
35275: LD_INT 23
35277: PUSH
35278: LD_INT 24
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: ST_TO_ADDR
35285: GO 35314
35287: LD_INT 47
35289: DOUBLE
35290: EQUAL
35291: IFTRUE 35295
35293: GO 35313
35295: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35296: LD_ADDR_VAR 0 3
35300: PUSH
35301: LD_INT 23
35303: PUSH
35304: LD_INT 24
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: ST_TO_ADDR
35311: GO 35314
35313: POP
// result := ( chassis in result ) ;
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: LD_VAR 0 1
35323: PUSH
35324: LD_VAR 0 3
35328: IN
35329: ST_TO_ADDR
// end ;
35330: LD_VAR 0 3
35334: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35335: LD_INT 0
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
// result := array ;
35344: LD_ADDR_VAR 0 5
35348: PUSH
35349: LD_VAR 0 1
35353: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35354: LD_VAR 0 1
35358: NOT
35359: PUSH
35360: LD_VAR 0 2
35364: NOT
35365: OR
35366: PUSH
35367: LD_VAR 0 3
35371: NOT
35372: OR
35373: PUSH
35374: LD_VAR 0 2
35378: PUSH
35379: LD_VAR 0 1
35383: GREATER
35384: OR
35385: PUSH
35386: LD_VAR 0 3
35390: PUSH
35391: LD_VAR 0 1
35395: GREATER
35396: OR
35397: IFFALSE 35401
// exit ;
35399: GO 35697
// if direction then
35401: LD_VAR 0 4
35405: IFFALSE 35469
// begin d := 1 ;
35407: LD_ADDR_VAR 0 9
35411: PUSH
35412: LD_INT 1
35414: ST_TO_ADDR
// if i_from > i_to then
35415: LD_VAR 0 2
35419: PUSH
35420: LD_VAR 0 3
35424: GREATER
35425: IFFALSE 35451
// length := ( array - i_from ) + i_to else
35427: LD_ADDR_VAR 0 11
35431: PUSH
35432: LD_VAR 0 1
35436: PUSH
35437: LD_VAR 0 2
35441: MINUS
35442: PUSH
35443: LD_VAR 0 3
35447: PLUS
35448: ST_TO_ADDR
35449: GO 35467
// length := i_to - i_from ;
35451: LD_ADDR_VAR 0 11
35455: PUSH
35456: LD_VAR 0 3
35460: PUSH
35461: LD_VAR 0 2
35465: MINUS
35466: ST_TO_ADDR
// end else
35467: GO 35530
// begin d := - 1 ;
35469: LD_ADDR_VAR 0 9
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: ST_TO_ADDR
// if i_from > i_to then
35478: LD_VAR 0 2
35482: PUSH
35483: LD_VAR 0 3
35487: GREATER
35488: IFFALSE 35508
// length := i_from - i_to else
35490: LD_ADDR_VAR 0 11
35494: PUSH
35495: LD_VAR 0 2
35499: PUSH
35500: LD_VAR 0 3
35504: MINUS
35505: ST_TO_ADDR
35506: GO 35530
// length := ( array - i_to ) + i_from ;
35508: LD_ADDR_VAR 0 11
35512: PUSH
35513: LD_VAR 0 1
35517: PUSH
35518: LD_VAR 0 3
35522: MINUS
35523: PUSH
35524: LD_VAR 0 2
35528: PLUS
35529: ST_TO_ADDR
// end ; if not length then
35530: LD_VAR 0 11
35534: NOT
35535: IFFALSE 35539
// exit ;
35537: GO 35697
// tmp := array ;
35539: LD_ADDR_VAR 0 10
35543: PUSH
35544: LD_VAR 0 1
35548: ST_TO_ADDR
// for i = 1 to length do
35549: LD_ADDR_VAR 0 6
35553: PUSH
35554: DOUBLE
35555: LD_INT 1
35557: DEC
35558: ST_TO_ADDR
35559: LD_VAR 0 11
35563: PUSH
35564: FOR_TO
35565: IFFALSE 35685
// begin for j = 1 to array do
35567: LD_ADDR_VAR 0 7
35571: PUSH
35572: DOUBLE
35573: LD_INT 1
35575: DEC
35576: ST_TO_ADDR
35577: LD_VAR 0 1
35581: PUSH
35582: FOR_TO
35583: IFFALSE 35671
// begin k := j + d ;
35585: LD_ADDR_VAR 0 8
35589: PUSH
35590: LD_VAR 0 7
35594: PUSH
35595: LD_VAR 0 9
35599: PLUS
35600: ST_TO_ADDR
// if k > array then
35601: LD_VAR 0 8
35605: PUSH
35606: LD_VAR 0 1
35610: GREATER
35611: IFFALSE 35621
// k := 1 ;
35613: LD_ADDR_VAR 0 8
35617: PUSH
35618: LD_INT 1
35620: ST_TO_ADDR
// if not k then
35621: LD_VAR 0 8
35625: NOT
35626: IFFALSE 35638
// k := array ;
35628: LD_ADDR_VAR 0 8
35632: PUSH
35633: LD_VAR 0 1
35637: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35638: LD_ADDR_VAR 0 10
35642: PUSH
35643: LD_VAR 0 10
35647: PPUSH
35648: LD_VAR 0 8
35652: PPUSH
35653: LD_VAR 0 1
35657: PUSH
35658: LD_VAR 0 7
35662: ARRAY
35663: PPUSH
35664: CALL_OW 1
35668: ST_TO_ADDR
// end ;
35669: GO 35582
35671: POP
35672: POP
// array := tmp ;
35673: LD_ADDR_VAR 0 1
35677: PUSH
35678: LD_VAR 0 10
35682: ST_TO_ADDR
// end ;
35683: GO 35564
35685: POP
35686: POP
// result := array ;
35687: LD_ADDR_VAR 0 5
35691: PUSH
35692: LD_VAR 0 1
35696: ST_TO_ADDR
// end ;
35697: LD_VAR 0 5
35701: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35702: LD_INT 0
35704: PPUSH
35705: PPUSH
// result := 0 ;
35706: LD_ADDR_VAR 0 3
35710: PUSH
35711: LD_INT 0
35713: ST_TO_ADDR
// if not array or not value in array then
35714: LD_VAR 0 1
35718: NOT
35719: PUSH
35720: LD_VAR 0 2
35724: PUSH
35725: LD_VAR 0 1
35729: IN
35730: NOT
35731: OR
35732: IFFALSE 35736
// exit ;
35734: GO 35790
// for i = 1 to array do
35736: LD_ADDR_VAR 0 4
35740: PUSH
35741: DOUBLE
35742: LD_INT 1
35744: DEC
35745: ST_TO_ADDR
35746: LD_VAR 0 1
35750: PUSH
35751: FOR_TO
35752: IFFALSE 35788
// if value = array [ i ] then
35754: LD_VAR 0 2
35758: PUSH
35759: LD_VAR 0 1
35763: PUSH
35764: LD_VAR 0 4
35768: ARRAY
35769: EQUAL
35770: IFFALSE 35786
// begin result := i ;
35772: LD_ADDR_VAR 0 3
35776: PUSH
35777: LD_VAR 0 4
35781: ST_TO_ADDR
// exit ;
35782: POP
35783: POP
35784: GO 35790
// end ;
35786: GO 35751
35788: POP
35789: POP
// end ;
35790: LD_VAR 0 3
35794: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35795: LD_INT 0
35797: PPUSH
// vc_chassis := chassis ;
35798: LD_ADDR_OWVAR 37
35802: PUSH
35803: LD_VAR 0 1
35807: ST_TO_ADDR
// vc_engine := engine ;
35808: LD_ADDR_OWVAR 39
35812: PUSH
35813: LD_VAR 0 2
35817: ST_TO_ADDR
// vc_control := control ;
35818: LD_ADDR_OWVAR 38
35822: PUSH
35823: LD_VAR 0 3
35827: ST_TO_ADDR
// vc_weapon := weapon ;
35828: LD_ADDR_OWVAR 40
35832: PUSH
35833: LD_VAR 0 4
35837: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35838: LD_ADDR_OWVAR 41
35842: PUSH
35843: LD_VAR 0 5
35847: ST_TO_ADDR
// end ;
35848: LD_VAR 0 6
35852: RET
// export function WantPlant ( unit ) ; var task ; begin
35853: LD_INT 0
35855: PPUSH
35856: PPUSH
// result := false ;
35857: LD_ADDR_VAR 0 2
35861: PUSH
35862: LD_INT 0
35864: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35865: LD_ADDR_VAR 0 3
35869: PUSH
35870: LD_VAR 0 1
35874: PPUSH
35875: CALL_OW 437
35879: ST_TO_ADDR
// if task then
35880: LD_VAR 0 3
35884: IFFALSE 35912
// if task [ 1 ] [ 1 ] = p then
35886: LD_VAR 0 3
35890: PUSH
35891: LD_INT 1
35893: ARRAY
35894: PUSH
35895: LD_INT 1
35897: ARRAY
35898: PUSH
35899: LD_STRING p
35901: EQUAL
35902: IFFALSE 35912
// result := true ;
35904: LD_ADDR_VAR 0 2
35908: PUSH
35909: LD_INT 1
35911: ST_TO_ADDR
// end ;
35912: LD_VAR 0 2
35916: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35917: LD_INT 0
35919: PPUSH
35920: PPUSH
35921: PPUSH
35922: PPUSH
// if pos < 1 then
35923: LD_VAR 0 2
35927: PUSH
35928: LD_INT 1
35930: LESS
35931: IFFALSE 35935
// exit ;
35933: GO 36238
// if pos = 1 then
35935: LD_VAR 0 2
35939: PUSH
35940: LD_INT 1
35942: EQUAL
35943: IFFALSE 35976
// result := Replace ( arr , pos [ 1 ] , value ) else
35945: LD_ADDR_VAR 0 4
35949: PUSH
35950: LD_VAR 0 1
35954: PPUSH
35955: LD_VAR 0 2
35959: PUSH
35960: LD_INT 1
35962: ARRAY
35963: PPUSH
35964: LD_VAR 0 3
35968: PPUSH
35969: CALL_OW 1
35973: ST_TO_ADDR
35974: GO 36238
// begin tmp := arr ;
35976: LD_ADDR_VAR 0 6
35980: PUSH
35981: LD_VAR 0 1
35985: ST_TO_ADDR
// s_arr := [ tmp ] ;
35986: LD_ADDR_VAR 0 7
35990: PUSH
35991: LD_VAR 0 6
35995: PUSH
35996: EMPTY
35997: LIST
35998: ST_TO_ADDR
// for i = 1 to pos - 1 do
35999: LD_ADDR_VAR 0 5
36003: PUSH
36004: DOUBLE
36005: LD_INT 1
36007: DEC
36008: ST_TO_ADDR
36009: LD_VAR 0 2
36013: PUSH
36014: LD_INT 1
36016: MINUS
36017: PUSH
36018: FOR_TO
36019: IFFALSE 36064
// begin tmp := tmp [ pos [ i ] ] ;
36021: LD_ADDR_VAR 0 6
36025: PUSH
36026: LD_VAR 0 6
36030: PUSH
36031: LD_VAR 0 2
36035: PUSH
36036: LD_VAR 0 5
36040: ARRAY
36041: ARRAY
36042: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36043: LD_ADDR_VAR 0 7
36047: PUSH
36048: LD_VAR 0 7
36052: PUSH
36053: LD_VAR 0 6
36057: PUSH
36058: EMPTY
36059: LIST
36060: ADD
36061: ST_TO_ADDR
// end ;
36062: GO 36018
36064: POP
36065: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36066: LD_ADDR_VAR 0 6
36070: PUSH
36071: LD_VAR 0 6
36075: PPUSH
36076: LD_VAR 0 2
36080: PUSH
36081: LD_VAR 0 2
36085: ARRAY
36086: PPUSH
36087: LD_VAR 0 3
36091: PPUSH
36092: CALL_OW 1
36096: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36097: LD_ADDR_VAR 0 7
36101: PUSH
36102: LD_VAR 0 7
36106: PPUSH
36107: LD_VAR 0 7
36111: PPUSH
36112: LD_VAR 0 6
36116: PPUSH
36117: CALL_OW 1
36121: ST_TO_ADDR
// for i = s_arr downto 2 do
36122: LD_ADDR_VAR 0 5
36126: PUSH
36127: DOUBLE
36128: LD_VAR 0 7
36132: INC
36133: ST_TO_ADDR
36134: LD_INT 2
36136: PUSH
36137: FOR_DOWNTO
36138: IFFALSE 36222
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36140: LD_ADDR_VAR 0 6
36144: PUSH
36145: LD_VAR 0 7
36149: PUSH
36150: LD_VAR 0 5
36154: PUSH
36155: LD_INT 1
36157: MINUS
36158: ARRAY
36159: PPUSH
36160: LD_VAR 0 2
36164: PUSH
36165: LD_VAR 0 5
36169: PUSH
36170: LD_INT 1
36172: MINUS
36173: ARRAY
36174: PPUSH
36175: LD_VAR 0 7
36179: PUSH
36180: LD_VAR 0 5
36184: ARRAY
36185: PPUSH
36186: CALL_OW 1
36190: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36191: LD_ADDR_VAR 0 7
36195: PUSH
36196: LD_VAR 0 7
36200: PPUSH
36201: LD_VAR 0 5
36205: PUSH
36206: LD_INT 1
36208: MINUS
36209: PPUSH
36210: LD_VAR 0 6
36214: PPUSH
36215: CALL_OW 1
36219: ST_TO_ADDR
// end ;
36220: GO 36137
36222: POP
36223: POP
// result := s_arr [ 1 ] ;
36224: LD_ADDR_VAR 0 4
36228: PUSH
36229: LD_VAR 0 7
36233: PUSH
36234: LD_INT 1
36236: ARRAY
36237: ST_TO_ADDR
// end ; end ;
36238: LD_VAR 0 4
36242: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36243: LD_INT 0
36245: PPUSH
36246: PPUSH
// if not list then
36247: LD_VAR 0 1
36251: NOT
36252: IFFALSE 36256
// exit ;
36254: GO 36347
// i := list [ pos1 ] ;
36256: LD_ADDR_VAR 0 5
36260: PUSH
36261: LD_VAR 0 1
36265: PUSH
36266: LD_VAR 0 2
36270: ARRAY
36271: ST_TO_ADDR
// if not i then
36272: LD_VAR 0 5
36276: NOT
36277: IFFALSE 36281
// exit ;
36279: GO 36347
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36281: LD_ADDR_VAR 0 1
36285: PUSH
36286: LD_VAR 0 1
36290: PPUSH
36291: LD_VAR 0 2
36295: PPUSH
36296: LD_VAR 0 1
36300: PUSH
36301: LD_VAR 0 3
36305: ARRAY
36306: PPUSH
36307: CALL_OW 1
36311: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36312: LD_ADDR_VAR 0 1
36316: PUSH
36317: LD_VAR 0 1
36321: PPUSH
36322: LD_VAR 0 3
36326: PPUSH
36327: LD_VAR 0 5
36331: PPUSH
36332: CALL_OW 1
36336: ST_TO_ADDR
// result := list ;
36337: LD_ADDR_VAR 0 4
36341: PUSH
36342: LD_VAR 0 1
36346: ST_TO_ADDR
// end ;
36347: LD_VAR 0 4
36351: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36352: LD_INT 0
36354: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36355: LD_ADDR_VAR 0 5
36359: PUSH
36360: LD_VAR 0 1
36364: PPUSH
36365: CALL_OW 250
36369: PPUSH
36370: LD_VAR 0 1
36374: PPUSH
36375: CALL_OW 251
36379: PPUSH
36380: LD_VAR 0 2
36384: PPUSH
36385: LD_VAR 0 3
36389: PPUSH
36390: LD_VAR 0 4
36394: PPUSH
36395: CALL 36773 0 5
36399: ST_TO_ADDR
// end ;
36400: LD_VAR 0 5
36404: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36405: LD_INT 0
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
// if not list or not unit then
36411: LD_VAR 0 2
36415: NOT
36416: PUSH
36417: LD_VAR 0 1
36421: NOT
36422: OR
36423: IFFALSE 36427
// exit ;
36425: GO 36768
// result := [ ] ;
36427: LD_ADDR_VAR 0 5
36431: PUSH
36432: EMPTY
36433: ST_TO_ADDR
// for i in list do
36434: LD_ADDR_VAR 0 6
36438: PUSH
36439: LD_VAR 0 2
36443: PUSH
36444: FOR_IN
36445: IFFALSE 36663
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36447: LD_ADDR_VAR 0 8
36451: PUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: LD_VAR 0 6
36461: PUSH
36462: LD_INT 1
36464: ARRAY
36465: PPUSH
36466: LD_VAR 0 6
36470: PUSH
36471: LD_INT 2
36473: ARRAY
36474: PPUSH
36475: CALL_OW 297
36479: ST_TO_ADDR
// if not Count ( result ) then
36480: LD_VAR 0 5
36484: PPUSH
36485: CALL 33057 0 1
36489: NOT
36490: IFFALSE 36523
// begin result := Join ( result , [ i , tmp ] ) ;
36492: LD_ADDR_VAR 0 5
36496: PUSH
36497: LD_VAR 0 5
36501: PPUSH
36502: LD_VAR 0 6
36506: PUSH
36507: LD_VAR 0 8
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PPUSH
36516: CALL 68657 0 2
36520: ST_TO_ADDR
// continue ;
36521: GO 36444
// end ; if result [ result ] [ 2 ] <= tmp then
36523: LD_VAR 0 5
36527: PUSH
36528: LD_VAR 0 5
36532: ARRAY
36533: PUSH
36534: LD_INT 2
36536: ARRAY
36537: PUSH
36538: LD_VAR 0 8
36542: LESSEQUAL
36543: IFFALSE 36576
// result := Join ( result , [ i , tmp ] ) else
36545: LD_ADDR_VAR 0 5
36549: PUSH
36550: LD_VAR 0 5
36554: PPUSH
36555: LD_VAR 0 6
36559: PUSH
36560: LD_VAR 0 8
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PPUSH
36569: CALL 68657 0 2
36573: ST_TO_ADDR
36574: GO 36661
// begin for j := 1 to Count ( result ) do
36576: LD_ADDR_VAR 0 7
36580: PUSH
36581: DOUBLE
36582: LD_INT 1
36584: DEC
36585: ST_TO_ADDR
36586: LD_VAR 0 5
36590: PPUSH
36591: CALL 33057 0 1
36595: PUSH
36596: FOR_TO
36597: IFFALSE 36659
// begin if tmp < result [ j ] [ 2 ] then
36599: LD_VAR 0 8
36603: PUSH
36604: LD_VAR 0 5
36608: PUSH
36609: LD_VAR 0 7
36613: ARRAY
36614: PUSH
36615: LD_INT 2
36617: ARRAY
36618: LESS
36619: IFFALSE 36657
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36621: LD_ADDR_VAR 0 5
36625: PUSH
36626: LD_VAR 0 5
36630: PPUSH
36631: LD_VAR 0 7
36635: PPUSH
36636: LD_VAR 0 6
36640: PUSH
36641: LD_VAR 0 8
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PPUSH
36650: CALL_OW 2
36654: ST_TO_ADDR
// break ;
36655: GO 36659
// end ; end ;
36657: GO 36596
36659: POP
36660: POP
// end ; end ;
36661: GO 36444
36663: POP
36664: POP
// if result and not asc then
36665: LD_VAR 0 5
36669: PUSH
36670: LD_VAR 0 3
36674: NOT
36675: AND
36676: IFFALSE 36693
// result := ReverseArray ( result ) ;
36678: LD_ADDR_VAR 0 5
36682: PUSH
36683: LD_VAR 0 5
36687: PPUSH
36688: CALL 63933 0 1
36692: ST_TO_ADDR
// tmp := [ ] ;
36693: LD_ADDR_VAR 0 8
36697: PUSH
36698: EMPTY
36699: ST_TO_ADDR
// if mode then
36700: LD_VAR 0 4
36704: IFFALSE 36768
// begin for i := 1 to result do
36706: LD_ADDR_VAR 0 6
36710: PUSH
36711: DOUBLE
36712: LD_INT 1
36714: DEC
36715: ST_TO_ADDR
36716: LD_VAR 0 5
36720: PUSH
36721: FOR_TO
36722: IFFALSE 36756
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36724: LD_ADDR_VAR 0 8
36728: PUSH
36729: LD_VAR 0 8
36733: PPUSH
36734: LD_VAR 0 5
36738: PUSH
36739: LD_VAR 0 6
36743: ARRAY
36744: PUSH
36745: LD_INT 1
36747: ARRAY
36748: PPUSH
36749: CALL 68657 0 2
36753: ST_TO_ADDR
36754: GO 36721
36756: POP
36757: POP
// result := tmp ;
36758: LD_ADDR_VAR 0 5
36762: PUSH
36763: LD_VAR 0 8
36767: ST_TO_ADDR
// end ; end ;
36768: LD_VAR 0 5
36772: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36773: LD_INT 0
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
// if not list then
36779: LD_VAR 0 3
36783: NOT
36784: IFFALSE 36788
// exit ;
36786: GO 37176
// result := [ ] ;
36788: LD_ADDR_VAR 0 6
36792: PUSH
36793: EMPTY
36794: ST_TO_ADDR
// for i in list do
36795: LD_ADDR_VAR 0 7
36799: PUSH
36800: LD_VAR 0 3
36804: PUSH
36805: FOR_IN
36806: IFFALSE 37008
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36808: LD_ADDR_VAR 0 9
36812: PUSH
36813: LD_VAR 0 7
36817: PPUSH
36818: LD_VAR 0 1
36822: PPUSH
36823: LD_VAR 0 2
36827: PPUSH
36828: CALL_OW 297
36832: ST_TO_ADDR
// if not result then
36833: LD_VAR 0 6
36837: NOT
36838: IFFALSE 36864
// result := [ [ i , tmp ] ] else
36840: LD_ADDR_VAR 0 6
36844: PUSH
36845: LD_VAR 0 7
36849: PUSH
36850: LD_VAR 0 9
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: EMPTY
36860: LIST
36861: ST_TO_ADDR
36862: GO 37006
// begin if result [ result ] [ 2 ] < tmp then
36864: LD_VAR 0 6
36868: PUSH
36869: LD_VAR 0 6
36873: ARRAY
36874: PUSH
36875: LD_INT 2
36877: ARRAY
36878: PUSH
36879: LD_VAR 0 9
36883: LESS
36884: IFFALSE 36926
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36886: LD_ADDR_VAR 0 6
36890: PUSH
36891: LD_VAR 0 6
36895: PPUSH
36896: LD_VAR 0 6
36900: PUSH
36901: LD_INT 1
36903: PLUS
36904: PPUSH
36905: LD_VAR 0 7
36909: PUSH
36910: LD_VAR 0 9
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PPUSH
36919: CALL_OW 2
36923: ST_TO_ADDR
36924: GO 37006
// for j = 1 to result do
36926: LD_ADDR_VAR 0 8
36930: PUSH
36931: DOUBLE
36932: LD_INT 1
36934: DEC
36935: ST_TO_ADDR
36936: LD_VAR 0 6
36940: PUSH
36941: FOR_TO
36942: IFFALSE 37004
// begin if tmp < result [ j ] [ 2 ] then
36944: LD_VAR 0 9
36948: PUSH
36949: LD_VAR 0 6
36953: PUSH
36954: LD_VAR 0 8
36958: ARRAY
36959: PUSH
36960: LD_INT 2
36962: ARRAY
36963: LESS
36964: IFFALSE 37002
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36966: LD_ADDR_VAR 0 6
36970: PUSH
36971: LD_VAR 0 6
36975: PPUSH
36976: LD_VAR 0 8
36980: PPUSH
36981: LD_VAR 0 7
36985: PUSH
36986: LD_VAR 0 9
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PPUSH
36995: CALL_OW 2
36999: ST_TO_ADDR
// break ;
37000: GO 37004
// end ; end ;
37002: GO 36941
37004: POP
37005: POP
// end ; end ;
37006: GO 36805
37008: POP
37009: POP
// if result and not asc then
37010: LD_VAR 0 6
37014: PUSH
37015: LD_VAR 0 4
37019: NOT
37020: AND
37021: IFFALSE 37096
// begin tmp := result ;
37023: LD_ADDR_VAR 0 9
37027: PUSH
37028: LD_VAR 0 6
37032: ST_TO_ADDR
// for i = tmp downto 1 do
37033: LD_ADDR_VAR 0 7
37037: PUSH
37038: DOUBLE
37039: LD_VAR 0 9
37043: INC
37044: ST_TO_ADDR
37045: LD_INT 1
37047: PUSH
37048: FOR_DOWNTO
37049: IFFALSE 37094
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37051: LD_ADDR_VAR 0 6
37055: PUSH
37056: LD_VAR 0 6
37060: PPUSH
37061: LD_VAR 0 9
37065: PUSH
37066: LD_VAR 0 7
37070: MINUS
37071: PUSH
37072: LD_INT 1
37074: PLUS
37075: PPUSH
37076: LD_VAR 0 9
37080: PUSH
37081: LD_VAR 0 7
37085: ARRAY
37086: PPUSH
37087: CALL_OW 1
37091: ST_TO_ADDR
37092: GO 37048
37094: POP
37095: POP
// end ; tmp := [ ] ;
37096: LD_ADDR_VAR 0 9
37100: PUSH
37101: EMPTY
37102: ST_TO_ADDR
// if mode then
37103: LD_VAR 0 5
37107: IFFALSE 37176
// begin for i = 1 to result do
37109: LD_ADDR_VAR 0 7
37113: PUSH
37114: DOUBLE
37115: LD_INT 1
37117: DEC
37118: ST_TO_ADDR
37119: LD_VAR 0 6
37123: PUSH
37124: FOR_TO
37125: IFFALSE 37164
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37127: LD_ADDR_VAR 0 9
37131: PUSH
37132: LD_VAR 0 9
37136: PPUSH
37137: LD_VAR 0 7
37141: PPUSH
37142: LD_VAR 0 6
37146: PUSH
37147: LD_VAR 0 7
37151: ARRAY
37152: PUSH
37153: LD_INT 1
37155: ARRAY
37156: PPUSH
37157: CALL_OW 1
37161: ST_TO_ADDR
37162: GO 37124
37164: POP
37165: POP
// result := tmp ;
37166: LD_ADDR_VAR 0 6
37170: PUSH
37171: LD_VAR 0 9
37175: ST_TO_ADDR
// end ; end ;
37176: LD_VAR 0 6
37180: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37181: LD_INT 0
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37189: LD_ADDR_VAR 0 5
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: ST_TO_ADDR
// if not x or not y then
37211: LD_VAR 0 2
37215: NOT
37216: PUSH
37217: LD_VAR 0 3
37221: NOT
37222: OR
37223: IFFALSE 37227
// exit ;
37225: GO 38877
// if not range then
37227: LD_VAR 0 4
37231: NOT
37232: IFFALSE 37242
// range := 10 ;
37234: LD_ADDR_VAR 0 4
37238: PUSH
37239: LD_INT 10
37241: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37242: LD_ADDR_VAR 0 8
37246: PUSH
37247: LD_INT 81
37249: PUSH
37250: LD_VAR 0 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 92
37261: PUSH
37262: LD_VAR 0 2
37266: PUSH
37267: LD_VAR 0 3
37271: PUSH
37272: LD_VAR 0 4
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 3
37285: PUSH
37286: LD_INT 21
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: PPUSH
37305: CALL_OW 69
37309: ST_TO_ADDR
// if not tmp then
37310: LD_VAR 0 8
37314: NOT
37315: IFFALSE 37319
// exit ;
37317: GO 38877
// for i in tmp do
37319: LD_ADDR_VAR 0 6
37323: PUSH
37324: LD_VAR 0 8
37328: PUSH
37329: FOR_IN
37330: IFFALSE 38852
// begin points := [ 0 , 0 , 0 ] ;
37332: LD_ADDR_VAR 0 9
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: ST_TO_ADDR
// bpoints := 1 ;
37351: LD_ADDR_VAR 0 10
37355: PUSH
37356: LD_INT 1
37358: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37359: LD_VAR 0 6
37363: PPUSH
37364: CALL_OW 247
37368: PUSH
37369: LD_INT 1
37371: DOUBLE
37372: EQUAL
37373: IFTRUE 37377
37375: GO 37955
37377: POP
// begin if GetClass ( i ) = 1 then
37378: LD_VAR 0 6
37382: PPUSH
37383: CALL_OW 257
37387: PUSH
37388: LD_INT 1
37390: EQUAL
37391: IFFALSE 37412
// points := [ 10 , 5 , 3 ] ;
37393: LD_ADDR_VAR 0 9
37397: PUSH
37398: LD_INT 10
37400: PUSH
37401: LD_INT 5
37403: PUSH
37404: LD_INT 3
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37412: LD_VAR 0 6
37416: PPUSH
37417: CALL_OW 257
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: LD_INT 3
37427: PUSH
37428: LD_INT 4
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: IN
37436: IFFALSE 37457
// points := [ 3 , 2 , 1 ] ;
37438: LD_ADDR_VAR 0 9
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37457: LD_VAR 0 6
37461: PPUSH
37462: CALL_OW 257
37466: PUSH
37467: LD_INT 5
37469: EQUAL
37470: IFFALSE 37491
// points := [ 130 , 5 , 2 ] ;
37472: LD_ADDR_VAR 0 9
37476: PUSH
37477: LD_INT 130
37479: PUSH
37480: LD_INT 5
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37491: LD_VAR 0 6
37495: PPUSH
37496: CALL_OW 257
37500: PUSH
37501: LD_INT 8
37503: EQUAL
37504: IFFALSE 37525
// points := [ 35 , 35 , 30 ] ;
37506: LD_ADDR_VAR 0 9
37510: PUSH
37511: LD_INT 35
37513: PUSH
37514: LD_INT 35
37516: PUSH
37517: LD_INT 30
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37525: LD_VAR 0 6
37529: PPUSH
37530: CALL_OW 257
37534: PUSH
37535: LD_INT 9
37537: EQUAL
37538: IFFALSE 37559
// points := [ 20 , 55 , 40 ] ;
37540: LD_ADDR_VAR 0 9
37544: PUSH
37545: LD_INT 20
37547: PUSH
37548: LD_INT 55
37550: PUSH
37551: LD_INT 40
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37559: LD_VAR 0 6
37563: PPUSH
37564: CALL_OW 257
37568: PUSH
37569: LD_INT 12
37571: PUSH
37572: LD_INT 16
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: IN
37579: IFFALSE 37600
// points := [ 5 , 3 , 2 ] ;
37581: LD_ADDR_VAR 0 9
37585: PUSH
37586: LD_INT 5
37588: PUSH
37589: LD_INT 3
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37600: LD_VAR 0 6
37604: PPUSH
37605: CALL_OW 257
37609: PUSH
37610: LD_INT 17
37612: EQUAL
37613: IFFALSE 37634
// points := [ 100 , 50 , 75 ] ;
37615: LD_ADDR_VAR 0 9
37619: PUSH
37620: LD_INT 100
37622: PUSH
37623: LD_INT 50
37625: PUSH
37626: LD_INT 75
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37634: LD_VAR 0 6
37638: PPUSH
37639: CALL_OW 257
37643: PUSH
37644: LD_INT 15
37646: EQUAL
37647: IFFALSE 37668
// points := [ 10 , 5 , 3 ] ;
37649: LD_ADDR_VAR 0 9
37653: PUSH
37654: LD_INT 10
37656: PUSH
37657: LD_INT 5
37659: PUSH
37660: LD_INT 3
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37668: LD_VAR 0 6
37672: PPUSH
37673: CALL_OW 257
37677: PUSH
37678: LD_INT 14
37680: EQUAL
37681: IFFALSE 37702
// points := [ 10 , 0 , 0 ] ;
37683: LD_ADDR_VAR 0 9
37687: PUSH
37688: LD_INT 10
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37702: LD_VAR 0 6
37706: PPUSH
37707: CALL_OW 257
37711: PUSH
37712: LD_INT 11
37714: EQUAL
37715: IFFALSE 37736
// points := [ 30 , 10 , 5 ] ;
37717: LD_ADDR_VAR 0 9
37721: PUSH
37722: LD_INT 30
37724: PUSH
37725: LD_INT 10
37727: PUSH
37728: LD_INT 5
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37736: LD_VAR 0 1
37740: PPUSH
37741: LD_INT 5
37743: PPUSH
37744: CALL_OW 321
37748: PUSH
37749: LD_INT 2
37751: EQUAL
37752: IFFALSE 37769
// bpoints := bpoints * 1.8 ;
37754: LD_ADDR_VAR 0 10
37758: PUSH
37759: LD_VAR 0 10
37763: PUSH
37764: LD_REAL  1.80000000000000E+0000
37767: MUL
37768: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37769: LD_VAR 0 6
37773: PPUSH
37774: CALL_OW 257
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 4
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: IN
37797: PUSH
37798: LD_VAR 0 1
37802: PPUSH
37803: LD_INT 51
37805: PPUSH
37806: CALL_OW 321
37810: PUSH
37811: LD_INT 2
37813: EQUAL
37814: AND
37815: IFFALSE 37832
// bpoints := bpoints * 1.2 ;
37817: LD_ADDR_VAR 0 10
37821: PUSH
37822: LD_VAR 0 10
37826: PUSH
37827: LD_REAL  1.20000000000000E+0000
37830: MUL
37831: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37832: LD_VAR 0 6
37836: PPUSH
37837: CALL_OW 257
37841: PUSH
37842: LD_INT 5
37844: PUSH
37845: LD_INT 7
37847: PUSH
37848: LD_INT 9
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: IN
37856: PUSH
37857: LD_VAR 0 1
37861: PPUSH
37862: LD_INT 52
37864: PPUSH
37865: CALL_OW 321
37869: PUSH
37870: LD_INT 2
37872: EQUAL
37873: AND
37874: IFFALSE 37891
// bpoints := bpoints * 1.5 ;
37876: LD_ADDR_VAR 0 10
37880: PUSH
37881: LD_VAR 0 10
37885: PUSH
37886: LD_REAL  1.50000000000000E+0000
37889: MUL
37890: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37891: LD_VAR 0 1
37895: PPUSH
37896: LD_INT 66
37898: PPUSH
37899: CALL_OW 321
37903: PUSH
37904: LD_INT 2
37906: EQUAL
37907: IFFALSE 37924
// bpoints := bpoints * 1.1 ;
37909: LD_ADDR_VAR 0 10
37913: PUSH
37914: LD_VAR 0 10
37918: PUSH
37919: LD_REAL  1.10000000000000E+0000
37922: MUL
37923: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37924: LD_ADDR_VAR 0 10
37928: PUSH
37929: LD_VAR 0 10
37933: PUSH
37934: LD_VAR 0 6
37938: PPUSH
37939: LD_INT 1
37941: PPUSH
37942: CALL_OW 259
37946: PUSH
37947: LD_REAL  1.15000000000000E+0000
37950: MUL
37951: MUL
37952: ST_TO_ADDR
// end ; unit_vehicle :
37953: GO 38781
37955: LD_INT 2
37957: DOUBLE
37958: EQUAL
37959: IFTRUE 37963
37961: GO 38769
37963: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37964: LD_VAR 0 6
37968: PPUSH
37969: CALL_OW 264
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 42
37979: PUSH
37980: LD_INT 24
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: IN
37988: IFFALSE 38009
// points := [ 25 , 5 , 3 ] ;
37990: LD_ADDR_VAR 0 9
37994: PUSH
37995: LD_INT 25
37997: PUSH
37998: LD_INT 5
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: LIST
38008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38009: LD_VAR 0 6
38013: PPUSH
38014: CALL_OW 264
38018: PUSH
38019: LD_INT 4
38021: PUSH
38022: LD_INT 43
38024: PUSH
38025: LD_INT 25
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: IN
38033: IFFALSE 38054
// points := [ 40 , 15 , 5 ] ;
38035: LD_ADDR_VAR 0 9
38039: PUSH
38040: LD_INT 40
38042: PUSH
38043: LD_INT 15
38045: PUSH
38046: LD_INT 5
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: LIST
38053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38054: LD_VAR 0 6
38058: PPUSH
38059: CALL_OW 264
38063: PUSH
38064: LD_INT 3
38066: PUSH
38067: LD_INT 23
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: IN
38074: IFFALSE 38095
// points := [ 7 , 25 , 8 ] ;
38076: LD_ADDR_VAR 0 9
38080: PUSH
38081: LD_INT 7
38083: PUSH
38084: LD_INT 25
38086: PUSH
38087: LD_INT 8
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38095: LD_VAR 0 6
38099: PPUSH
38100: CALL_OW 264
38104: PUSH
38105: LD_INT 5
38107: PUSH
38108: LD_INT 27
38110: PUSH
38111: LD_INT 44
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: LIST
38118: IN
38119: IFFALSE 38140
// points := [ 14 , 50 , 16 ] ;
38121: LD_ADDR_VAR 0 9
38125: PUSH
38126: LD_INT 14
38128: PUSH
38129: LD_INT 50
38131: PUSH
38132: LD_INT 16
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38140: LD_VAR 0 6
38144: PPUSH
38145: CALL_OW 264
38149: PUSH
38150: LD_INT 6
38152: PUSH
38153: LD_INT 46
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: IN
38160: IFFALSE 38181
// points := [ 32 , 120 , 70 ] ;
38162: LD_ADDR_VAR 0 9
38166: PUSH
38167: LD_INT 32
38169: PUSH
38170: LD_INT 120
38172: PUSH
38173: LD_INT 70
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38181: LD_VAR 0 6
38185: PPUSH
38186: CALL_OW 264
38190: PUSH
38191: LD_INT 7
38193: PUSH
38194: LD_INT 28
38196: PUSH
38197: LD_INT 45
38199: PUSH
38200: LD_INT 92
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: IN
38209: IFFALSE 38230
// points := [ 35 , 20 , 45 ] ;
38211: LD_ADDR_VAR 0 9
38215: PUSH
38216: LD_INT 35
38218: PUSH
38219: LD_INT 20
38221: PUSH
38222: LD_INT 45
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38230: LD_VAR 0 6
38234: PPUSH
38235: CALL_OW 264
38239: PUSH
38240: LD_INT 47
38242: PUSH
38243: EMPTY
38244: LIST
38245: IN
38246: IFFALSE 38267
// points := [ 67 , 45 , 75 ] ;
38248: LD_ADDR_VAR 0 9
38252: PUSH
38253: LD_INT 67
38255: PUSH
38256: LD_INT 45
38258: PUSH
38259: LD_INT 75
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38267: LD_VAR 0 6
38271: PPUSH
38272: CALL_OW 264
38276: PUSH
38277: LD_INT 26
38279: PUSH
38280: EMPTY
38281: LIST
38282: IN
38283: IFFALSE 38304
// points := [ 120 , 30 , 80 ] ;
38285: LD_ADDR_VAR 0 9
38289: PUSH
38290: LD_INT 120
38292: PUSH
38293: LD_INT 30
38295: PUSH
38296: LD_INT 80
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38304: LD_VAR 0 6
38308: PPUSH
38309: CALL_OW 264
38313: PUSH
38314: LD_INT 22
38316: PUSH
38317: EMPTY
38318: LIST
38319: IN
38320: IFFALSE 38341
// points := [ 40 , 1 , 1 ] ;
38322: LD_ADDR_VAR 0 9
38326: PUSH
38327: LD_INT 40
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38341: LD_VAR 0 6
38345: PPUSH
38346: CALL_OW 264
38350: PUSH
38351: LD_INT 29
38353: PUSH
38354: EMPTY
38355: LIST
38356: IN
38357: IFFALSE 38378
// points := [ 70 , 200 , 400 ] ;
38359: LD_ADDR_VAR 0 9
38363: PUSH
38364: LD_INT 70
38366: PUSH
38367: LD_INT 200
38369: PUSH
38370: LD_INT 400
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38378: LD_VAR 0 6
38382: PPUSH
38383: CALL_OW 264
38387: PUSH
38388: LD_INT 14
38390: PUSH
38391: LD_INT 53
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: IN
38398: IFFALSE 38419
// points := [ 40 , 10 , 20 ] ;
38400: LD_ADDR_VAR 0 9
38404: PUSH
38405: LD_INT 40
38407: PUSH
38408: LD_INT 10
38410: PUSH
38411: LD_INT 20
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: LIST
38418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38419: LD_VAR 0 6
38423: PPUSH
38424: CALL_OW 264
38428: PUSH
38429: LD_INT 9
38431: PUSH
38432: EMPTY
38433: LIST
38434: IN
38435: IFFALSE 38456
// points := [ 5 , 70 , 20 ] ;
38437: LD_ADDR_VAR 0 9
38441: PUSH
38442: LD_INT 5
38444: PUSH
38445: LD_INT 70
38447: PUSH
38448: LD_INT 20
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38456: LD_VAR 0 6
38460: PPUSH
38461: CALL_OW 264
38465: PUSH
38466: LD_INT 10
38468: PUSH
38469: EMPTY
38470: LIST
38471: IN
38472: IFFALSE 38493
// points := [ 35 , 110 , 70 ] ;
38474: LD_ADDR_VAR 0 9
38478: PUSH
38479: LD_INT 35
38481: PUSH
38482: LD_INT 110
38484: PUSH
38485: LD_INT 70
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: LIST
38492: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38493: LD_VAR 0 6
38497: PPUSH
38498: CALL_OW 265
38502: PUSH
38503: LD_INT 25
38505: EQUAL
38506: IFFALSE 38527
// points := [ 80 , 65 , 100 ] ;
38508: LD_ADDR_VAR 0 9
38512: PUSH
38513: LD_INT 80
38515: PUSH
38516: LD_INT 65
38518: PUSH
38519: LD_INT 100
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38527: LD_VAR 0 6
38531: PPUSH
38532: CALL_OW 263
38536: PUSH
38537: LD_INT 1
38539: EQUAL
38540: IFFALSE 38575
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38542: LD_ADDR_VAR 0 10
38546: PUSH
38547: LD_VAR 0 10
38551: PUSH
38552: LD_VAR 0 6
38556: PPUSH
38557: CALL_OW 311
38561: PPUSH
38562: LD_INT 3
38564: PPUSH
38565: CALL_OW 259
38569: PUSH
38570: LD_INT 4
38572: MUL
38573: MUL
38574: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38575: LD_VAR 0 6
38579: PPUSH
38580: CALL_OW 263
38584: PUSH
38585: LD_INT 2
38587: EQUAL
38588: IFFALSE 38639
// begin j := IsControledBy ( i ) ;
38590: LD_ADDR_VAR 0 7
38594: PUSH
38595: LD_VAR 0 6
38599: PPUSH
38600: CALL_OW 312
38604: ST_TO_ADDR
// if j then
38605: LD_VAR 0 7
38609: IFFALSE 38639
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38611: LD_ADDR_VAR 0 10
38615: PUSH
38616: LD_VAR 0 10
38620: PUSH
38621: LD_VAR 0 7
38625: PPUSH
38626: LD_INT 3
38628: PPUSH
38629: CALL_OW 259
38633: PUSH
38634: LD_INT 3
38636: MUL
38637: MUL
38638: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38639: LD_VAR 0 6
38643: PPUSH
38644: CALL_OW 264
38648: PUSH
38649: LD_INT 5
38651: PUSH
38652: LD_INT 6
38654: PUSH
38655: LD_INT 46
38657: PUSH
38658: LD_INT 44
38660: PUSH
38661: LD_INT 47
38663: PUSH
38664: LD_INT 45
38666: PUSH
38667: LD_INT 28
38669: PUSH
38670: LD_INT 7
38672: PUSH
38673: LD_INT 27
38675: PUSH
38676: LD_INT 29
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: IN
38691: PUSH
38692: LD_VAR 0 1
38696: PPUSH
38697: LD_INT 52
38699: PPUSH
38700: CALL_OW 321
38704: PUSH
38705: LD_INT 2
38707: EQUAL
38708: AND
38709: IFFALSE 38726
// bpoints := bpoints * 1.2 ;
38711: LD_ADDR_VAR 0 10
38715: PUSH
38716: LD_VAR 0 10
38720: PUSH
38721: LD_REAL  1.20000000000000E+0000
38724: MUL
38725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38726: LD_VAR 0 6
38730: PPUSH
38731: CALL_OW 264
38735: PUSH
38736: LD_INT 6
38738: PUSH
38739: LD_INT 46
38741: PUSH
38742: LD_INT 47
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: IN
38750: IFFALSE 38767
// bpoints := bpoints * 1.2 ;
38752: LD_ADDR_VAR 0 10
38756: PUSH
38757: LD_VAR 0 10
38761: PUSH
38762: LD_REAL  1.20000000000000E+0000
38765: MUL
38766: ST_TO_ADDR
// end ; unit_building :
38767: GO 38781
38769: LD_INT 3
38771: DOUBLE
38772: EQUAL
38773: IFTRUE 38777
38775: GO 38780
38777: POP
// ; end ;
38778: GO 38781
38780: POP
// for j = 1 to 3 do
38781: LD_ADDR_VAR 0 7
38785: PUSH
38786: DOUBLE
38787: LD_INT 1
38789: DEC
38790: ST_TO_ADDR
38791: LD_INT 3
38793: PUSH
38794: FOR_TO
38795: IFFALSE 38848
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38797: LD_ADDR_VAR 0 5
38801: PUSH
38802: LD_VAR 0 5
38806: PPUSH
38807: LD_VAR 0 7
38811: PPUSH
38812: LD_VAR 0 5
38816: PUSH
38817: LD_VAR 0 7
38821: ARRAY
38822: PUSH
38823: LD_VAR 0 9
38827: PUSH
38828: LD_VAR 0 7
38832: ARRAY
38833: PUSH
38834: LD_VAR 0 10
38838: MUL
38839: PLUS
38840: PPUSH
38841: CALL_OW 1
38845: ST_TO_ADDR
38846: GO 38794
38848: POP
38849: POP
// end ;
38850: GO 37329
38852: POP
38853: POP
// result := Replace ( result , 4 , tmp ) ;
38854: LD_ADDR_VAR 0 5
38858: PUSH
38859: LD_VAR 0 5
38863: PPUSH
38864: LD_INT 4
38866: PPUSH
38867: LD_VAR 0 8
38871: PPUSH
38872: CALL_OW 1
38876: ST_TO_ADDR
// end ;
38877: LD_VAR 0 5
38881: RET
// export function DangerAtRange ( unit , range ) ; begin
38882: LD_INT 0
38884: PPUSH
// if not unit then
38885: LD_VAR 0 1
38889: NOT
38890: IFFALSE 38894
// exit ;
38892: GO 38939
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38894: LD_ADDR_VAR 0 3
38898: PUSH
38899: LD_VAR 0 1
38903: PPUSH
38904: CALL_OW 255
38908: PPUSH
38909: LD_VAR 0 1
38913: PPUSH
38914: CALL_OW 250
38918: PPUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL_OW 251
38928: PPUSH
38929: LD_VAR 0 2
38933: PPUSH
38934: CALL 37181 0 4
38938: ST_TO_ADDR
// end ;
38939: LD_VAR 0 3
38943: RET
// export function DangerInArea ( side , area ) ; begin
38944: LD_INT 0
38946: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38947: LD_ADDR_VAR 0 3
38951: PUSH
38952: LD_VAR 0 2
38956: PPUSH
38957: LD_INT 81
38959: PUSH
38960: LD_VAR 0 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PPUSH
38969: CALL_OW 70
38973: ST_TO_ADDR
// end ;
38974: LD_VAR 0 3
38978: RET
// export function IsExtension ( b ) ; begin
38979: LD_INT 0
38981: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38982: LD_ADDR_VAR 0 2
38986: PUSH
38987: LD_VAR 0 1
38991: PUSH
38992: LD_INT 23
38994: PUSH
38995: LD_INT 20
38997: PUSH
38998: LD_INT 22
39000: PUSH
39001: LD_INT 17
39003: PUSH
39004: LD_INT 24
39006: PUSH
39007: LD_INT 21
39009: PUSH
39010: LD_INT 19
39012: PUSH
39013: LD_INT 16
39015: PUSH
39016: LD_INT 25
39018: PUSH
39019: LD_INT 18
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: IN
39034: ST_TO_ADDR
// end ;
39035: LD_VAR 0 2
39039: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39040: LD_INT 0
39042: PPUSH
39043: PPUSH
39044: PPUSH
// result := [ ] ;
39045: LD_ADDR_VAR 0 4
39049: PUSH
39050: EMPTY
39051: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39052: LD_ADDR_VAR 0 5
39056: PUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: LD_INT 21
39064: PUSH
39065: LD_INT 3
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PPUSH
39072: CALL_OW 70
39076: ST_TO_ADDR
// if not tmp then
39077: LD_VAR 0 5
39081: NOT
39082: IFFALSE 39086
// exit ;
39084: GO 39150
// if checkLink then
39086: LD_VAR 0 3
39090: IFFALSE 39140
// begin for i in tmp do
39092: LD_ADDR_VAR 0 6
39096: PUSH
39097: LD_VAR 0 5
39101: PUSH
39102: FOR_IN
39103: IFFALSE 39138
// if GetBase ( i ) <> base then
39105: LD_VAR 0 6
39109: PPUSH
39110: CALL_OW 274
39114: PUSH
39115: LD_VAR 0 1
39119: NONEQUAL
39120: IFFALSE 39136
// ComLinkToBase ( base , i ) ;
39122: LD_VAR 0 1
39126: PPUSH
39127: LD_VAR 0 6
39131: PPUSH
39132: CALL_OW 169
39136: GO 39102
39138: POP
39139: POP
// end ; result := tmp ;
39140: LD_ADDR_VAR 0 4
39144: PUSH
39145: LD_VAR 0 5
39149: ST_TO_ADDR
// end ;
39150: LD_VAR 0 4
39154: RET
// export function ComComplete ( units , b ) ; var i ; begin
39155: LD_INT 0
39157: PPUSH
39158: PPUSH
// if not units then
39159: LD_VAR 0 1
39163: NOT
39164: IFFALSE 39168
// exit ;
39166: GO 39258
// for i in units do
39168: LD_ADDR_VAR 0 4
39172: PUSH
39173: LD_VAR 0 1
39177: PUSH
39178: FOR_IN
39179: IFFALSE 39256
// if BuildingStatus ( b ) = bs_build then
39181: LD_VAR 0 2
39185: PPUSH
39186: CALL_OW 461
39190: PUSH
39191: LD_INT 1
39193: EQUAL
39194: IFFALSE 39254
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39196: LD_VAR 0 4
39200: PPUSH
39201: LD_STRING h
39203: PUSH
39204: LD_VAR 0 2
39208: PPUSH
39209: CALL_OW 250
39213: PUSH
39214: LD_VAR 0 2
39218: PPUSH
39219: CALL_OW 251
39223: PUSH
39224: LD_VAR 0 2
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: PUSH
39247: EMPTY
39248: LIST
39249: PPUSH
39250: CALL_OW 446
39254: GO 39178
39256: POP
39257: POP
// end ;
39258: LD_VAR 0 3
39262: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39263: LD_INT 0
39265: PPUSH
39266: PPUSH
39267: PPUSH
39268: PPUSH
39269: PPUSH
39270: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39271: LD_VAR 0 1
39275: NOT
39276: PUSH
39277: LD_VAR 0 1
39281: PPUSH
39282: CALL_OW 263
39286: PUSH
39287: LD_INT 2
39289: NONEQUAL
39290: OR
39291: IFFALSE 39295
// exit ;
39293: GO 39611
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39295: LD_ADDR_VAR 0 6
39299: PUSH
39300: LD_INT 22
39302: PUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: CALL_OW 255
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 30
39322: PUSH
39323: LD_INT 36
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 34
39332: PUSH
39333: LD_INT 31
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PPUSH
39349: CALL_OW 69
39353: ST_TO_ADDR
// if not tmp then
39354: LD_VAR 0 6
39358: NOT
39359: IFFALSE 39363
// exit ;
39361: GO 39611
// result := [ ] ;
39363: LD_ADDR_VAR 0 2
39367: PUSH
39368: EMPTY
39369: ST_TO_ADDR
// for i in tmp do
39370: LD_ADDR_VAR 0 3
39374: PUSH
39375: LD_VAR 0 6
39379: PUSH
39380: FOR_IN
39381: IFFALSE 39452
// begin t := UnitsInside ( i ) ;
39383: LD_ADDR_VAR 0 4
39387: PUSH
39388: LD_VAR 0 3
39392: PPUSH
39393: CALL_OW 313
39397: ST_TO_ADDR
// if t then
39398: LD_VAR 0 4
39402: IFFALSE 39450
// for j in t do
39404: LD_ADDR_VAR 0 7
39408: PUSH
39409: LD_VAR 0 4
39413: PUSH
39414: FOR_IN
39415: IFFALSE 39448
// result := Replace ( result , result + 1 , j ) ;
39417: LD_ADDR_VAR 0 2
39421: PUSH
39422: LD_VAR 0 2
39426: PPUSH
39427: LD_VAR 0 2
39431: PUSH
39432: LD_INT 1
39434: PLUS
39435: PPUSH
39436: LD_VAR 0 7
39440: PPUSH
39441: CALL_OW 1
39445: ST_TO_ADDR
39446: GO 39414
39448: POP
39449: POP
// end ;
39450: GO 39380
39452: POP
39453: POP
// if not result then
39454: LD_VAR 0 2
39458: NOT
39459: IFFALSE 39463
// exit ;
39461: GO 39611
// mech := result [ 1 ] ;
39463: LD_ADDR_VAR 0 5
39467: PUSH
39468: LD_VAR 0 2
39472: PUSH
39473: LD_INT 1
39475: ARRAY
39476: ST_TO_ADDR
// if result > 1 then
39477: LD_VAR 0 2
39481: PUSH
39482: LD_INT 1
39484: GREATER
39485: IFFALSE 39597
// begin for i = 2 to result do
39487: LD_ADDR_VAR 0 3
39491: PUSH
39492: DOUBLE
39493: LD_INT 2
39495: DEC
39496: ST_TO_ADDR
39497: LD_VAR 0 2
39501: PUSH
39502: FOR_TO
39503: IFFALSE 39595
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39505: LD_ADDR_VAR 0 4
39509: PUSH
39510: LD_VAR 0 2
39514: PUSH
39515: LD_VAR 0 3
39519: ARRAY
39520: PPUSH
39521: LD_INT 3
39523: PPUSH
39524: CALL_OW 259
39528: PUSH
39529: LD_VAR 0 2
39533: PUSH
39534: LD_VAR 0 3
39538: ARRAY
39539: PPUSH
39540: CALL_OW 432
39544: MINUS
39545: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39546: LD_VAR 0 4
39550: PUSH
39551: LD_VAR 0 5
39555: PPUSH
39556: LD_INT 3
39558: PPUSH
39559: CALL_OW 259
39563: PUSH
39564: LD_VAR 0 5
39568: PPUSH
39569: CALL_OW 432
39573: MINUS
39574: GREATEREQUAL
39575: IFFALSE 39593
// mech := result [ i ] ;
39577: LD_ADDR_VAR 0 5
39581: PUSH
39582: LD_VAR 0 2
39586: PUSH
39587: LD_VAR 0 3
39591: ARRAY
39592: ST_TO_ADDR
// end ;
39593: GO 39502
39595: POP
39596: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39597: LD_VAR 0 1
39601: PPUSH
39602: LD_VAR 0 5
39606: PPUSH
39607: CALL_OW 135
// end ;
39611: LD_VAR 0 2
39615: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39616: LD_INT 0
39618: PPUSH
39619: PPUSH
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
// result := [ ] ;
39631: LD_ADDR_VAR 0 7
39635: PUSH
39636: EMPTY
39637: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39638: LD_VAR 0 1
39642: PPUSH
39643: CALL_OW 266
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: IN
39658: NOT
39659: IFFALSE 39663
// exit ;
39661: GO 41297
// if name then
39663: LD_VAR 0 3
39667: IFFALSE 39683
// SetBName ( base_dep , name ) ;
39669: LD_VAR 0 1
39673: PPUSH
39674: LD_VAR 0 3
39678: PPUSH
39679: CALL_OW 500
// base := GetBase ( base_dep ) ;
39683: LD_ADDR_VAR 0 15
39687: PUSH
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL_OW 274
39697: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39698: LD_ADDR_VAR 0 16
39702: PUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: CALL_OW 255
39712: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39713: LD_ADDR_VAR 0 17
39717: PUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 248
39727: ST_TO_ADDR
// if sources then
39728: LD_VAR 0 5
39732: IFFALSE 39779
// for i = 1 to 3 do
39734: LD_ADDR_VAR 0 8
39738: PUSH
39739: DOUBLE
39740: LD_INT 1
39742: DEC
39743: ST_TO_ADDR
39744: LD_INT 3
39746: PUSH
39747: FOR_TO
39748: IFFALSE 39777
// AddResourceType ( base , i , sources [ i ] ) ;
39750: LD_VAR 0 15
39754: PPUSH
39755: LD_VAR 0 8
39759: PPUSH
39760: LD_VAR 0 5
39764: PUSH
39765: LD_VAR 0 8
39769: ARRAY
39770: PPUSH
39771: CALL_OW 276
39775: GO 39747
39777: POP
39778: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39779: LD_ADDR_VAR 0 18
39783: PUSH
39784: LD_VAR 0 15
39788: PPUSH
39789: LD_VAR 0 2
39793: PPUSH
39794: LD_INT 1
39796: PPUSH
39797: CALL 39040 0 3
39801: ST_TO_ADDR
// InitHc ;
39802: CALL_OW 19
// InitUc ;
39806: CALL_OW 18
// uc_side := side ;
39810: LD_ADDR_OWVAR 20
39814: PUSH
39815: LD_VAR 0 16
39819: ST_TO_ADDR
// uc_nation := nation ;
39820: LD_ADDR_OWVAR 21
39824: PUSH
39825: LD_VAR 0 17
39829: ST_TO_ADDR
// if buildings then
39830: LD_VAR 0 18
39834: IFFALSE 41156
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39836: LD_ADDR_VAR 0 19
39840: PUSH
39841: LD_VAR 0 18
39845: PPUSH
39846: LD_INT 2
39848: PUSH
39849: LD_INT 30
39851: PUSH
39852: LD_INT 29
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 30
39861: PUSH
39862: LD_INT 30
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: PPUSH
39874: CALL_OW 72
39878: ST_TO_ADDR
// if tmp then
39879: LD_VAR 0 19
39883: IFFALSE 39931
// for i in tmp do
39885: LD_ADDR_VAR 0 8
39889: PUSH
39890: LD_VAR 0 19
39894: PUSH
39895: FOR_IN
39896: IFFALSE 39929
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39898: LD_VAR 0 8
39902: PPUSH
39903: CALL_OW 250
39907: PPUSH
39908: LD_VAR 0 8
39912: PPUSH
39913: CALL_OW 251
39917: PPUSH
39918: LD_VAR 0 16
39922: PPUSH
39923: CALL_OW 441
39927: GO 39895
39929: POP
39930: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39931: LD_VAR 0 18
39935: PPUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 30
39941: PUSH
39942: LD_INT 32
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 30
39951: PUSH
39952: LD_INT 33
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: PPUSH
39964: CALL_OW 72
39968: IFFALSE 40056
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39970: LD_ADDR_VAR 0 8
39974: PUSH
39975: LD_VAR 0 18
39979: PPUSH
39980: LD_INT 2
39982: PUSH
39983: LD_INT 30
39985: PUSH
39986: LD_INT 32
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 30
39995: PUSH
39996: LD_INT 33
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: PPUSH
40008: CALL_OW 72
40012: PUSH
40013: FOR_IN
40014: IFFALSE 40054
// begin if not GetBWeapon ( i ) then
40016: LD_VAR 0 8
40020: PPUSH
40021: CALL_OW 269
40025: NOT
40026: IFFALSE 40052
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40028: LD_VAR 0 8
40032: PPUSH
40033: LD_VAR 0 8
40037: PPUSH
40038: LD_VAR 0 2
40042: PPUSH
40043: CALL 41302 0 2
40047: PPUSH
40048: CALL_OW 431
// end ;
40052: GO 40013
40054: POP
40055: POP
// end ; for i = 1 to personel do
40056: LD_ADDR_VAR 0 8
40060: PUSH
40061: DOUBLE
40062: LD_INT 1
40064: DEC
40065: ST_TO_ADDR
40066: LD_VAR 0 6
40070: PUSH
40071: FOR_TO
40072: IFFALSE 41136
// begin if i > 4 then
40074: LD_VAR 0 8
40078: PUSH
40079: LD_INT 4
40081: GREATER
40082: IFFALSE 40086
// break ;
40084: GO 41136
// case i of 1 :
40086: LD_VAR 0 8
40090: PUSH
40091: LD_INT 1
40093: DOUBLE
40094: EQUAL
40095: IFTRUE 40099
40097: GO 40179
40099: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40100: LD_ADDR_VAR 0 12
40104: PUSH
40105: LD_VAR 0 18
40109: PPUSH
40110: LD_INT 22
40112: PUSH
40113: LD_VAR 0 16
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 58
40124: PUSH
40125: EMPTY
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 30
40133: PUSH
40134: LD_INT 32
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 30
40143: PUSH
40144: LD_INT 4
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 30
40153: PUSH
40154: LD_INT 5
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: PPUSH
40172: CALL_OW 72
40176: ST_TO_ADDR
40177: GO 40401
40179: LD_INT 2
40181: DOUBLE
40182: EQUAL
40183: IFTRUE 40187
40185: GO 40249
40187: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40188: LD_ADDR_VAR 0 12
40192: PUSH
40193: LD_VAR 0 18
40197: PPUSH
40198: LD_INT 22
40200: PUSH
40201: LD_VAR 0 16
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: LD_INT 30
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 30
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PPUSH
40242: CALL_OW 72
40246: ST_TO_ADDR
40247: GO 40401
40249: LD_INT 3
40251: DOUBLE
40252: EQUAL
40253: IFTRUE 40257
40255: GO 40319
40257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40258: LD_ADDR_VAR 0 12
40262: PUSH
40263: LD_VAR 0 18
40267: PPUSH
40268: LD_INT 22
40270: PUSH
40271: LD_VAR 0 16
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: LD_INT 30
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 30
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PPUSH
40312: CALL_OW 72
40316: ST_TO_ADDR
40317: GO 40401
40319: LD_INT 4
40321: DOUBLE
40322: EQUAL
40323: IFTRUE 40327
40325: GO 40400
40327: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40328: LD_ADDR_VAR 0 12
40332: PUSH
40333: LD_VAR 0 18
40337: PPUSH
40338: LD_INT 22
40340: PUSH
40341: LD_VAR 0 16
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: LD_INT 30
40355: PUSH
40356: LD_INT 6
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 30
40365: PUSH
40366: LD_INT 7
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 30
40375: PUSH
40376: LD_INT 8
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PPUSH
40393: CALL_OW 72
40397: ST_TO_ADDR
40398: GO 40401
40400: POP
// if i = 1 then
40401: LD_VAR 0 8
40405: PUSH
40406: LD_INT 1
40408: EQUAL
40409: IFFALSE 40520
// begin tmp := [ ] ;
40411: LD_ADDR_VAR 0 19
40415: PUSH
40416: EMPTY
40417: ST_TO_ADDR
// for j in f do
40418: LD_ADDR_VAR 0 9
40422: PUSH
40423: LD_VAR 0 12
40427: PUSH
40428: FOR_IN
40429: IFFALSE 40502
// if GetBType ( j ) = b_bunker then
40431: LD_VAR 0 9
40435: PPUSH
40436: CALL_OW 266
40440: PUSH
40441: LD_INT 32
40443: EQUAL
40444: IFFALSE 40471
// tmp := Insert ( tmp , 1 , j ) else
40446: LD_ADDR_VAR 0 19
40450: PUSH
40451: LD_VAR 0 19
40455: PPUSH
40456: LD_INT 1
40458: PPUSH
40459: LD_VAR 0 9
40463: PPUSH
40464: CALL_OW 2
40468: ST_TO_ADDR
40469: GO 40500
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40471: LD_ADDR_VAR 0 19
40475: PUSH
40476: LD_VAR 0 19
40480: PPUSH
40481: LD_VAR 0 19
40485: PUSH
40486: LD_INT 1
40488: PLUS
40489: PPUSH
40490: LD_VAR 0 9
40494: PPUSH
40495: CALL_OW 2
40499: ST_TO_ADDR
40500: GO 40428
40502: POP
40503: POP
// if tmp then
40504: LD_VAR 0 19
40508: IFFALSE 40520
// f := tmp ;
40510: LD_ADDR_VAR 0 12
40514: PUSH
40515: LD_VAR 0 19
40519: ST_TO_ADDR
// end ; x := personel [ i ] ;
40520: LD_ADDR_VAR 0 13
40524: PUSH
40525: LD_VAR 0 6
40529: PUSH
40530: LD_VAR 0 8
40534: ARRAY
40535: ST_TO_ADDR
// if x = - 1 then
40536: LD_VAR 0 13
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: EQUAL
40545: IFFALSE 40754
// begin for j in f do
40547: LD_ADDR_VAR 0 9
40551: PUSH
40552: LD_VAR 0 12
40556: PUSH
40557: FOR_IN
40558: IFFALSE 40750
// repeat InitHc ;
40560: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40564: LD_VAR 0 9
40568: PPUSH
40569: CALL_OW 266
40573: PUSH
40574: LD_INT 5
40576: EQUAL
40577: IFFALSE 40647
// begin if UnitsInside ( j ) < 3 then
40579: LD_VAR 0 9
40583: PPUSH
40584: CALL_OW 313
40588: PUSH
40589: LD_INT 3
40591: LESS
40592: IFFALSE 40628
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40594: LD_INT 0
40596: PPUSH
40597: LD_INT 5
40599: PUSH
40600: LD_INT 8
40602: PUSH
40603: LD_INT 9
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: LIST
40610: PUSH
40611: LD_VAR 0 17
40615: ARRAY
40616: PPUSH
40617: LD_VAR 0 4
40621: PPUSH
40622: CALL_OW 380
40626: GO 40645
// PrepareHuman ( false , i , skill ) ;
40628: LD_INT 0
40630: PPUSH
40631: LD_VAR 0 8
40635: PPUSH
40636: LD_VAR 0 4
40640: PPUSH
40641: CALL_OW 380
// end else
40645: GO 40664
// PrepareHuman ( false , i , skill ) ;
40647: LD_INT 0
40649: PPUSH
40650: LD_VAR 0 8
40654: PPUSH
40655: LD_VAR 0 4
40659: PPUSH
40660: CALL_OW 380
// un := CreateHuman ;
40664: LD_ADDR_VAR 0 14
40668: PUSH
40669: CALL_OW 44
40673: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40674: LD_ADDR_VAR 0 7
40678: PUSH
40679: LD_VAR 0 7
40683: PPUSH
40684: LD_INT 1
40686: PPUSH
40687: LD_VAR 0 14
40691: PPUSH
40692: CALL_OW 2
40696: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40697: LD_VAR 0 14
40701: PPUSH
40702: LD_VAR 0 9
40706: PPUSH
40707: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40711: LD_VAR 0 9
40715: PPUSH
40716: CALL_OW 313
40720: PUSH
40721: LD_INT 6
40723: EQUAL
40724: PUSH
40725: LD_VAR 0 9
40729: PPUSH
40730: CALL_OW 266
40734: PUSH
40735: LD_INT 32
40737: PUSH
40738: LD_INT 31
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: IN
40745: OR
40746: IFFALSE 40560
40748: GO 40557
40750: POP
40751: POP
// end else
40752: GO 41134
// for j = 1 to x do
40754: LD_ADDR_VAR 0 9
40758: PUSH
40759: DOUBLE
40760: LD_INT 1
40762: DEC
40763: ST_TO_ADDR
40764: LD_VAR 0 13
40768: PUSH
40769: FOR_TO
40770: IFFALSE 41132
// begin InitHc ;
40772: CALL_OW 19
// if not f then
40776: LD_VAR 0 12
40780: NOT
40781: IFFALSE 40870
// begin PrepareHuman ( false , i , skill ) ;
40783: LD_INT 0
40785: PPUSH
40786: LD_VAR 0 8
40790: PPUSH
40791: LD_VAR 0 4
40795: PPUSH
40796: CALL_OW 380
// un := CreateHuman ;
40800: LD_ADDR_VAR 0 14
40804: PUSH
40805: CALL_OW 44
40809: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40810: LD_ADDR_VAR 0 7
40814: PUSH
40815: LD_VAR 0 7
40819: PPUSH
40820: LD_INT 1
40822: PPUSH
40823: LD_VAR 0 14
40827: PPUSH
40828: CALL_OW 2
40832: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40833: LD_VAR 0 14
40837: PPUSH
40838: LD_VAR 0 1
40842: PPUSH
40843: CALL_OW 250
40847: PPUSH
40848: LD_VAR 0 1
40852: PPUSH
40853: CALL_OW 251
40857: PPUSH
40858: LD_INT 10
40860: PPUSH
40861: LD_INT 0
40863: PPUSH
40864: CALL_OW 50
// continue ;
40868: GO 40769
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40870: LD_VAR 0 12
40874: PUSH
40875: LD_INT 1
40877: ARRAY
40878: PPUSH
40879: CALL_OW 313
40883: PUSH
40884: LD_VAR 0 12
40888: PUSH
40889: LD_INT 1
40891: ARRAY
40892: PPUSH
40893: CALL_OW 266
40897: PUSH
40898: LD_INT 32
40900: PUSH
40901: LD_INT 31
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: IN
40908: AND
40909: PUSH
40910: LD_VAR 0 12
40914: PUSH
40915: LD_INT 1
40917: ARRAY
40918: PPUSH
40919: CALL_OW 313
40923: PUSH
40924: LD_INT 6
40926: EQUAL
40927: OR
40928: IFFALSE 40948
// f := Delete ( f , 1 ) ;
40930: LD_ADDR_VAR 0 12
40934: PUSH
40935: LD_VAR 0 12
40939: PPUSH
40940: LD_INT 1
40942: PPUSH
40943: CALL_OW 3
40947: ST_TO_ADDR
// if not f then
40948: LD_VAR 0 12
40952: NOT
40953: IFFALSE 40971
// begin x := x + 2 ;
40955: LD_ADDR_VAR 0 13
40959: PUSH
40960: LD_VAR 0 13
40964: PUSH
40965: LD_INT 2
40967: PLUS
40968: ST_TO_ADDR
// continue ;
40969: GO 40769
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40971: LD_VAR 0 12
40975: PUSH
40976: LD_INT 1
40978: ARRAY
40979: PPUSH
40980: CALL_OW 266
40984: PUSH
40985: LD_INT 5
40987: EQUAL
40988: IFFALSE 41062
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40990: LD_VAR 0 12
40994: PUSH
40995: LD_INT 1
40997: ARRAY
40998: PPUSH
40999: CALL_OW 313
41003: PUSH
41004: LD_INT 3
41006: LESS
41007: IFFALSE 41043
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41009: LD_INT 0
41011: PPUSH
41012: LD_INT 5
41014: PUSH
41015: LD_INT 8
41017: PUSH
41018: LD_INT 9
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: LIST
41025: PUSH
41026: LD_VAR 0 17
41030: ARRAY
41031: PPUSH
41032: LD_VAR 0 4
41036: PPUSH
41037: CALL_OW 380
41041: GO 41060
// PrepareHuman ( false , i , skill ) ;
41043: LD_INT 0
41045: PPUSH
41046: LD_VAR 0 8
41050: PPUSH
41051: LD_VAR 0 4
41055: PPUSH
41056: CALL_OW 380
// end else
41060: GO 41079
// PrepareHuman ( false , i , skill ) ;
41062: LD_INT 0
41064: PPUSH
41065: LD_VAR 0 8
41069: PPUSH
41070: LD_VAR 0 4
41074: PPUSH
41075: CALL_OW 380
// un := CreateHuman ;
41079: LD_ADDR_VAR 0 14
41083: PUSH
41084: CALL_OW 44
41088: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41089: LD_ADDR_VAR 0 7
41093: PUSH
41094: LD_VAR 0 7
41098: PPUSH
41099: LD_INT 1
41101: PPUSH
41102: LD_VAR 0 14
41106: PPUSH
41107: CALL_OW 2
41111: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41112: LD_VAR 0 14
41116: PPUSH
41117: LD_VAR 0 12
41121: PUSH
41122: LD_INT 1
41124: ARRAY
41125: PPUSH
41126: CALL_OW 52
// end ;
41130: GO 40769
41132: POP
41133: POP
// end ;
41134: GO 40071
41136: POP
41137: POP
// result := result ^ buildings ;
41138: LD_ADDR_VAR 0 7
41142: PUSH
41143: LD_VAR 0 7
41147: PUSH
41148: LD_VAR 0 18
41152: ADD
41153: ST_TO_ADDR
// end else
41154: GO 41297
// begin for i = 1 to personel do
41156: LD_ADDR_VAR 0 8
41160: PUSH
41161: DOUBLE
41162: LD_INT 1
41164: DEC
41165: ST_TO_ADDR
41166: LD_VAR 0 6
41170: PUSH
41171: FOR_TO
41172: IFFALSE 41295
// begin if i > 4 then
41174: LD_VAR 0 8
41178: PUSH
41179: LD_INT 4
41181: GREATER
41182: IFFALSE 41186
// break ;
41184: GO 41295
// x := personel [ i ] ;
41186: LD_ADDR_VAR 0 13
41190: PUSH
41191: LD_VAR 0 6
41195: PUSH
41196: LD_VAR 0 8
41200: ARRAY
41201: ST_TO_ADDR
// if x = - 1 then
41202: LD_VAR 0 13
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: EQUAL
41211: IFFALSE 41215
// continue ;
41213: GO 41171
// PrepareHuman ( false , i , skill ) ;
41215: LD_INT 0
41217: PPUSH
41218: LD_VAR 0 8
41222: PPUSH
41223: LD_VAR 0 4
41227: PPUSH
41228: CALL_OW 380
// un := CreateHuman ;
41232: LD_ADDR_VAR 0 14
41236: PUSH
41237: CALL_OW 44
41241: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41242: LD_VAR 0 14
41246: PPUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL_OW 250
41256: PPUSH
41257: LD_VAR 0 1
41261: PPUSH
41262: CALL_OW 251
41266: PPUSH
41267: LD_INT 10
41269: PPUSH
41270: LD_INT 0
41272: PPUSH
41273: CALL_OW 50
// result := result ^ un ;
41277: LD_ADDR_VAR 0 7
41281: PUSH
41282: LD_VAR 0 7
41286: PUSH
41287: LD_VAR 0 14
41291: ADD
41292: ST_TO_ADDR
// end ;
41293: GO 41171
41295: POP
41296: POP
// end ; end ;
41297: LD_VAR 0 7
41301: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41302: LD_INT 0
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
// result := false ;
41320: LD_ADDR_VAR 0 3
41324: PUSH
41325: LD_INT 0
41327: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41328: LD_VAR 0 1
41332: NOT
41333: PUSH
41334: LD_VAR 0 1
41338: PPUSH
41339: CALL_OW 266
41343: PUSH
41344: LD_INT 32
41346: PUSH
41347: LD_INT 33
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: IN
41354: NOT
41355: OR
41356: IFFALSE 41360
// exit ;
41358: GO 42469
// nat := GetNation ( tower ) ;
41360: LD_ADDR_VAR 0 12
41364: PUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: CALL_OW 248
41374: ST_TO_ADDR
// side := GetSide ( tower ) ;
41375: LD_ADDR_VAR 0 16
41379: PUSH
41380: LD_VAR 0 1
41384: PPUSH
41385: CALL_OW 255
41389: ST_TO_ADDR
// x := GetX ( tower ) ;
41390: LD_ADDR_VAR 0 10
41394: PUSH
41395: LD_VAR 0 1
41399: PPUSH
41400: CALL_OW 250
41404: ST_TO_ADDR
// y := GetY ( tower ) ;
41405: LD_ADDR_VAR 0 11
41409: PUSH
41410: LD_VAR 0 1
41414: PPUSH
41415: CALL_OW 251
41419: ST_TO_ADDR
// if not x or not y then
41420: LD_VAR 0 10
41424: NOT
41425: PUSH
41426: LD_VAR 0 11
41430: NOT
41431: OR
41432: IFFALSE 41436
// exit ;
41434: GO 42469
// weapon := 0 ;
41436: LD_ADDR_VAR 0 18
41440: PUSH
41441: LD_INT 0
41443: ST_TO_ADDR
// fac_list := [ ] ;
41444: LD_ADDR_VAR 0 17
41448: PUSH
41449: EMPTY
41450: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41451: LD_ADDR_VAR 0 6
41455: PUSH
41456: LD_VAR 0 1
41460: PPUSH
41461: CALL_OW 274
41465: PPUSH
41466: LD_VAR 0 2
41470: PPUSH
41471: LD_INT 0
41473: PPUSH
41474: CALL 39040 0 3
41478: PPUSH
41479: LD_INT 30
41481: PUSH
41482: LD_INT 3
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PPUSH
41489: CALL_OW 72
41493: ST_TO_ADDR
// if not factories then
41494: LD_VAR 0 6
41498: NOT
41499: IFFALSE 41503
// exit ;
41501: GO 42469
// for i in factories do
41503: LD_ADDR_VAR 0 8
41507: PUSH
41508: LD_VAR 0 6
41512: PUSH
41513: FOR_IN
41514: IFFALSE 41539
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41516: LD_ADDR_VAR 0 17
41520: PUSH
41521: LD_VAR 0 17
41525: PUSH
41526: LD_VAR 0 8
41530: PPUSH
41531: CALL_OW 478
41535: UNION
41536: ST_TO_ADDR
41537: GO 41513
41539: POP
41540: POP
// if not fac_list then
41541: LD_VAR 0 17
41545: NOT
41546: IFFALSE 41550
// exit ;
41548: GO 42469
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41550: LD_ADDR_VAR 0 5
41554: PUSH
41555: LD_INT 4
41557: PUSH
41558: LD_INT 5
41560: PUSH
41561: LD_INT 9
41563: PUSH
41564: LD_INT 10
41566: PUSH
41567: LD_INT 6
41569: PUSH
41570: LD_INT 7
41572: PUSH
41573: LD_INT 11
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 27
41587: PUSH
41588: LD_INT 28
41590: PUSH
41591: LD_INT 26
41593: PUSH
41594: LD_INT 30
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 43
41605: PUSH
41606: LD_INT 44
41608: PUSH
41609: LD_INT 46
41611: PUSH
41612: LD_INT 45
41614: PUSH
41615: LD_INT 47
41617: PUSH
41618: LD_INT 49
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: PUSH
41634: LD_VAR 0 12
41638: ARRAY
41639: ST_TO_ADDR
// list := list isect fac_list ;
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_VAR 0 5
41649: PUSH
41650: LD_VAR 0 17
41654: ISECT
41655: ST_TO_ADDR
// if not list then
41656: LD_VAR 0 5
41660: NOT
41661: IFFALSE 41665
// exit ;
41663: GO 42469
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41665: LD_VAR 0 12
41669: PUSH
41670: LD_INT 3
41672: EQUAL
41673: PUSH
41674: LD_INT 49
41676: PUSH
41677: LD_VAR 0 5
41681: IN
41682: AND
41683: PUSH
41684: LD_INT 31
41686: PPUSH
41687: LD_VAR 0 16
41691: PPUSH
41692: CALL_OW 321
41696: PUSH
41697: LD_INT 2
41699: EQUAL
41700: AND
41701: IFFALSE 41761
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41703: LD_INT 22
41705: PUSH
41706: LD_VAR 0 16
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 35
41717: PUSH
41718: LD_INT 49
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 91
41727: PUSH
41728: LD_VAR 0 1
41732: PUSH
41733: LD_INT 10
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: PPUSH
41746: CALL_OW 69
41750: NOT
41751: IFFALSE 41761
// weapon := ru_time_lapser ;
41753: LD_ADDR_VAR 0 18
41757: PUSH
41758: LD_INT 49
41760: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41761: LD_VAR 0 12
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: IN
41776: PUSH
41777: LD_INT 11
41779: PUSH
41780: LD_VAR 0 5
41784: IN
41785: PUSH
41786: LD_INT 30
41788: PUSH
41789: LD_VAR 0 5
41793: IN
41794: OR
41795: AND
41796: PUSH
41797: LD_INT 6
41799: PPUSH
41800: LD_VAR 0 16
41804: PPUSH
41805: CALL_OW 321
41809: PUSH
41810: LD_INT 2
41812: EQUAL
41813: AND
41814: IFFALSE 41979
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41816: LD_INT 22
41818: PUSH
41819: LD_VAR 0 16
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: LD_INT 35
41833: PUSH
41834: LD_INT 11
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 35
41843: PUSH
41844: LD_INT 30
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 91
41858: PUSH
41859: LD_VAR 0 1
41863: PUSH
41864: LD_INT 18
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: PPUSH
41877: CALL_OW 69
41881: NOT
41882: PUSH
41883: LD_INT 22
41885: PUSH
41886: LD_VAR 0 16
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: LD_INT 30
41900: PUSH
41901: LD_INT 32
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 30
41910: PUSH
41911: LD_INT 33
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 91
41925: PUSH
41926: LD_VAR 0 1
41930: PUSH
41931: LD_INT 12
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: PUSH
41944: EMPTY
41945: LIST
41946: PPUSH
41947: CALL_OW 69
41951: PUSH
41952: LD_INT 2
41954: GREATER
41955: AND
41956: IFFALSE 41979
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41958: LD_ADDR_VAR 0 18
41962: PUSH
41963: LD_INT 11
41965: PUSH
41966: LD_INT 30
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_VAR 0 12
41977: ARRAY
41978: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41979: LD_VAR 0 18
41983: NOT
41984: PUSH
41985: LD_INT 40
41987: PPUSH
41988: LD_VAR 0 16
41992: PPUSH
41993: CALL_OW 321
41997: PUSH
41998: LD_INT 2
42000: EQUAL
42001: AND
42002: PUSH
42003: LD_INT 7
42005: PUSH
42006: LD_VAR 0 5
42010: IN
42011: PUSH
42012: LD_INT 28
42014: PUSH
42015: LD_VAR 0 5
42019: IN
42020: OR
42021: PUSH
42022: LD_INT 45
42024: PUSH
42025: LD_VAR 0 5
42029: IN
42030: OR
42031: AND
42032: IFFALSE 42286
// begin hex := GetHexInfo ( x , y ) ;
42034: LD_ADDR_VAR 0 4
42038: PUSH
42039: LD_VAR 0 10
42043: PPUSH
42044: LD_VAR 0 11
42048: PPUSH
42049: CALL_OW 546
42053: ST_TO_ADDR
// if hex [ 1 ] then
42054: LD_VAR 0 4
42058: PUSH
42059: LD_INT 1
42061: ARRAY
42062: IFFALSE 42066
// exit ;
42064: GO 42469
// height := hex [ 2 ] ;
42066: LD_ADDR_VAR 0 15
42070: PUSH
42071: LD_VAR 0 4
42075: PUSH
42076: LD_INT 2
42078: ARRAY
42079: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42080: LD_ADDR_VAR 0 14
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: LD_INT 3
42093: PUSH
42094: LD_INT 5
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// for i in tmp do
42103: LD_ADDR_VAR 0 8
42107: PUSH
42108: LD_VAR 0 14
42112: PUSH
42113: FOR_IN
42114: IFFALSE 42284
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42116: LD_ADDR_VAR 0 9
42120: PUSH
42121: LD_VAR 0 10
42125: PPUSH
42126: LD_VAR 0 8
42130: PPUSH
42131: LD_INT 5
42133: PPUSH
42134: CALL_OW 272
42138: PUSH
42139: LD_VAR 0 11
42143: PPUSH
42144: LD_VAR 0 8
42148: PPUSH
42149: LD_INT 5
42151: PPUSH
42152: CALL_OW 273
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42161: LD_VAR 0 9
42165: PUSH
42166: LD_INT 1
42168: ARRAY
42169: PPUSH
42170: LD_VAR 0 9
42174: PUSH
42175: LD_INT 2
42177: ARRAY
42178: PPUSH
42179: CALL_OW 488
42183: IFFALSE 42282
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42185: LD_ADDR_VAR 0 4
42189: PUSH
42190: LD_VAR 0 9
42194: PUSH
42195: LD_INT 1
42197: ARRAY
42198: PPUSH
42199: LD_VAR 0 9
42203: PUSH
42204: LD_INT 2
42206: ARRAY
42207: PPUSH
42208: CALL_OW 546
42212: ST_TO_ADDR
// if hex [ 1 ] then
42213: LD_VAR 0 4
42217: PUSH
42218: LD_INT 1
42220: ARRAY
42221: IFFALSE 42225
// continue ;
42223: GO 42113
// h := hex [ 2 ] ;
42225: LD_ADDR_VAR 0 13
42229: PUSH
42230: LD_VAR 0 4
42234: PUSH
42235: LD_INT 2
42237: ARRAY
42238: ST_TO_ADDR
// if h + 7 < height then
42239: LD_VAR 0 13
42243: PUSH
42244: LD_INT 7
42246: PLUS
42247: PUSH
42248: LD_VAR 0 15
42252: LESS
42253: IFFALSE 42282
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42255: LD_ADDR_VAR 0 18
42259: PUSH
42260: LD_INT 7
42262: PUSH
42263: LD_INT 28
42265: PUSH
42266: LD_INT 45
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: PUSH
42274: LD_VAR 0 12
42278: ARRAY
42279: ST_TO_ADDR
// break ;
42280: GO 42284
// end ; end ; end ;
42282: GO 42113
42284: POP
42285: POP
// end ; if not weapon then
42286: LD_VAR 0 18
42290: NOT
42291: IFFALSE 42351
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42293: LD_ADDR_VAR 0 5
42297: PUSH
42298: LD_VAR 0 5
42302: PUSH
42303: LD_INT 11
42305: PUSH
42306: LD_INT 30
42308: PUSH
42309: LD_INT 49
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: DIFF
42317: ST_TO_ADDR
// if not list then
42318: LD_VAR 0 5
42322: NOT
42323: IFFALSE 42327
// exit ;
42325: GO 42469
// weapon := list [ rand ( 1 , list ) ] ;
42327: LD_ADDR_VAR 0 18
42331: PUSH
42332: LD_VAR 0 5
42336: PUSH
42337: LD_INT 1
42339: PPUSH
42340: LD_VAR 0 5
42344: PPUSH
42345: CALL_OW 12
42349: ARRAY
42350: ST_TO_ADDR
// end ; if weapon then
42351: LD_VAR 0 18
42355: IFFALSE 42469
// begin tmp := CostOfWeapon ( weapon ) ;
42357: LD_ADDR_VAR 0 14
42361: PUSH
42362: LD_VAR 0 18
42366: PPUSH
42367: CALL_OW 451
42371: ST_TO_ADDR
// j := GetBase ( tower ) ;
42372: LD_ADDR_VAR 0 9
42376: PUSH
42377: LD_VAR 0 1
42381: PPUSH
42382: CALL_OW 274
42386: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42387: LD_VAR 0 9
42391: PPUSH
42392: LD_INT 1
42394: PPUSH
42395: CALL_OW 275
42399: PUSH
42400: LD_VAR 0 14
42404: PUSH
42405: LD_INT 1
42407: ARRAY
42408: GREATEREQUAL
42409: PUSH
42410: LD_VAR 0 9
42414: PPUSH
42415: LD_INT 2
42417: PPUSH
42418: CALL_OW 275
42422: PUSH
42423: LD_VAR 0 14
42427: PUSH
42428: LD_INT 2
42430: ARRAY
42431: GREATEREQUAL
42432: AND
42433: PUSH
42434: LD_VAR 0 9
42438: PPUSH
42439: LD_INT 3
42441: PPUSH
42442: CALL_OW 275
42446: PUSH
42447: LD_VAR 0 14
42451: PUSH
42452: LD_INT 3
42454: ARRAY
42455: GREATEREQUAL
42456: AND
42457: IFFALSE 42469
// result := weapon ;
42459: LD_ADDR_VAR 0 3
42463: PUSH
42464: LD_VAR 0 18
42468: ST_TO_ADDR
// end ; end ;
42469: LD_VAR 0 3
42473: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42474: LD_INT 0
42476: PPUSH
42477: PPUSH
// result := true ;
42478: LD_ADDR_VAR 0 3
42482: PUSH
42483: LD_INT 1
42485: ST_TO_ADDR
// if array1 = array2 then
42486: LD_VAR 0 1
42490: PUSH
42491: LD_VAR 0 2
42495: EQUAL
42496: IFFALSE 42556
// begin for i = 1 to array1 do
42498: LD_ADDR_VAR 0 4
42502: PUSH
42503: DOUBLE
42504: LD_INT 1
42506: DEC
42507: ST_TO_ADDR
42508: LD_VAR 0 1
42512: PUSH
42513: FOR_TO
42514: IFFALSE 42552
// if array1 [ i ] <> array2 [ i ] then
42516: LD_VAR 0 1
42520: PUSH
42521: LD_VAR 0 4
42525: ARRAY
42526: PUSH
42527: LD_VAR 0 2
42531: PUSH
42532: LD_VAR 0 4
42536: ARRAY
42537: NONEQUAL
42538: IFFALSE 42550
// begin result := false ;
42540: LD_ADDR_VAR 0 3
42544: PUSH
42545: LD_INT 0
42547: ST_TO_ADDR
// break ;
42548: GO 42552
// end ;
42550: GO 42513
42552: POP
42553: POP
// end else
42554: GO 42564
// result := false ;
42556: LD_ADDR_VAR 0 3
42560: PUSH
42561: LD_INT 0
42563: ST_TO_ADDR
// end ;
42564: LD_VAR 0 3
42568: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42569: LD_INT 0
42571: PPUSH
42572: PPUSH
// if not array1 or not array2 then
42573: LD_VAR 0 1
42577: NOT
42578: PUSH
42579: LD_VAR 0 2
42583: NOT
42584: OR
42585: IFFALSE 42589
// exit ;
42587: GO 42653
// result := true ;
42589: LD_ADDR_VAR 0 3
42593: PUSH
42594: LD_INT 1
42596: ST_TO_ADDR
// for i = 1 to array1 do
42597: LD_ADDR_VAR 0 4
42601: PUSH
42602: DOUBLE
42603: LD_INT 1
42605: DEC
42606: ST_TO_ADDR
42607: LD_VAR 0 1
42611: PUSH
42612: FOR_TO
42613: IFFALSE 42651
// if array1 [ i ] <> array2 [ i ] then
42615: LD_VAR 0 1
42619: PUSH
42620: LD_VAR 0 4
42624: ARRAY
42625: PUSH
42626: LD_VAR 0 2
42630: PUSH
42631: LD_VAR 0 4
42635: ARRAY
42636: NONEQUAL
42637: IFFALSE 42649
// begin result := false ;
42639: LD_ADDR_VAR 0 3
42643: PUSH
42644: LD_INT 0
42646: ST_TO_ADDR
// break ;
42647: GO 42651
// end ;
42649: GO 42612
42651: POP
42652: POP
// end ;
42653: LD_VAR 0 3
42657: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42658: LD_INT 0
42660: PPUSH
42661: PPUSH
42662: PPUSH
// pom := GetBase ( fac ) ;
42663: LD_ADDR_VAR 0 5
42667: PUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 274
42677: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42678: LD_ADDR_VAR 0 4
42682: PUSH
42683: LD_VAR 0 2
42687: PUSH
42688: LD_INT 1
42690: ARRAY
42691: PPUSH
42692: LD_VAR 0 2
42696: PUSH
42697: LD_INT 2
42699: ARRAY
42700: PPUSH
42701: LD_VAR 0 2
42705: PUSH
42706: LD_INT 3
42708: ARRAY
42709: PPUSH
42710: LD_VAR 0 2
42714: PUSH
42715: LD_INT 4
42717: ARRAY
42718: PPUSH
42719: CALL_OW 449
42723: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42724: LD_ADDR_VAR 0 3
42728: PUSH
42729: LD_VAR 0 5
42733: PPUSH
42734: LD_INT 1
42736: PPUSH
42737: CALL_OW 275
42741: PUSH
42742: LD_VAR 0 4
42746: PUSH
42747: LD_INT 1
42749: ARRAY
42750: GREATEREQUAL
42751: PUSH
42752: LD_VAR 0 5
42756: PPUSH
42757: LD_INT 2
42759: PPUSH
42760: CALL_OW 275
42764: PUSH
42765: LD_VAR 0 4
42769: PUSH
42770: LD_INT 2
42772: ARRAY
42773: GREATEREQUAL
42774: AND
42775: PUSH
42776: LD_VAR 0 5
42780: PPUSH
42781: LD_INT 3
42783: PPUSH
42784: CALL_OW 275
42788: PUSH
42789: LD_VAR 0 4
42793: PUSH
42794: LD_INT 3
42796: ARRAY
42797: GREATEREQUAL
42798: AND
42799: ST_TO_ADDR
// end ;
42800: LD_VAR 0 3
42804: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42805: LD_INT 0
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
// pom := GetBase ( building ) ;
42811: LD_ADDR_VAR 0 3
42815: PUSH
42816: LD_VAR 0 1
42820: PPUSH
42821: CALL_OW 274
42825: ST_TO_ADDR
// if not pom then
42826: LD_VAR 0 3
42830: NOT
42831: IFFALSE 42835
// exit ;
42833: GO 43005
// btype := GetBType ( building ) ;
42835: LD_ADDR_VAR 0 5
42839: PUSH
42840: LD_VAR 0 1
42844: PPUSH
42845: CALL_OW 266
42849: ST_TO_ADDR
// if btype = b_armoury then
42850: LD_VAR 0 5
42854: PUSH
42855: LD_INT 4
42857: EQUAL
42858: IFFALSE 42868
// btype := b_barracks ;
42860: LD_ADDR_VAR 0 5
42864: PUSH
42865: LD_INT 5
42867: ST_TO_ADDR
// if btype = b_depot then
42868: LD_VAR 0 5
42872: PUSH
42873: LD_INT 0
42875: EQUAL
42876: IFFALSE 42886
// btype := b_warehouse ;
42878: LD_ADDR_VAR 0 5
42882: PUSH
42883: LD_INT 1
42885: ST_TO_ADDR
// if btype = b_workshop then
42886: LD_VAR 0 5
42890: PUSH
42891: LD_INT 2
42893: EQUAL
42894: IFFALSE 42904
// btype := b_factory ;
42896: LD_ADDR_VAR 0 5
42900: PUSH
42901: LD_INT 3
42903: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42904: LD_ADDR_VAR 0 4
42908: PUSH
42909: LD_VAR 0 5
42913: PPUSH
42914: LD_VAR 0 1
42918: PPUSH
42919: CALL_OW 248
42923: PPUSH
42924: CALL_OW 450
42928: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42929: LD_ADDR_VAR 0 2
42933: PUSH
42934: LD_VAR 0 3
42938: PPUSH
42939: LD_INT 1
42941: PPUSH
42942: CALL_OW 275
42946: PUSH
42947: LD_VAR 0 4
42951: PUSH
42952: LD_INT 1
42954: ARRAY
42955: GREATEREQUAL
42956: PUSH
42957: LD_VAR 0 3
42961: PPUSH
42962: LD_INT 2
42964: PPUSH
42965: CALL_OW 275
42969: PUSH
42970: LD_VAR 0 4
42974: PUSH
42975: LD_INT 2
42977: ARRAY
42978: GREATEREQUAL
42979: AND
42980: PUSH
42981: LD_VAR 0 3
42985: PPUSH
42986: LD_INT 3
42988: PPUSH
42989: CALL_OW 275
42993: PUSH
42994: LD_VAR 0 4
42998: PUSH
42999: LD_INT 3
43001: ARRAY
43002: GREATEREQUAL
43003: AND
43004: ST_TO_ADDR
// end ;
43005: LD_VAR 0 2
43009: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43010: LD_INT 0
43012: PPUSH
43013: PPUSH
43014: PPUSH
// pom := GetBase ( building ) ;
43015: LD_ADDR_VAR 0 4
43019: PUSH
43020: LD_VAR 0 1
43024: PPUSH
43025: CALL_OW 274
43029: ST_TO_ADDR
// if not pom then
43030: LD_VAR 0 4
43034: NOT
43035: IFFALSE 43039
// exit ;
43037: GO 43140
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43039: LD_ADDR_VAR 0 5
43043: PUSH
43044: LD_VAR 0 2
43048: PPUSH
43049: LD_VAR 0 1
43053: PPUSH
43054: CALL_OW 248
43058: PPUSH
43059: CALL_OW 450
43063: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43064: LD_ADDR_VAR 0 3
43068: PUSH
43069: LD_VAR 0 4
43073: PPUSH
43074: LD_INT 1
43076: PPUSH
43077: CALL_OW 275
43081: PUSH
43082: LD_VAR 0 5
43086: PUSH
43087: LD_INT 1
43089: ARRAY
43090: GREATEREQUAL
43091: PUSH
43092: LD_VAR 0 4
43096: PPUSH
43097: LD_INT 2
43099: PPUSH
43100: CALL_OW 275
43104: PUSH
43105: LD_VAR 0 5
43109: PUSH
43110: LD_INT 2
43112: ARRAY
43113: GREATEREQUAL
43114: AND
43115: PUSH
43116: LD_VAR 0 4
43120: PPUSH
43121: LD_INT 3
43123: PPUSH
43124: CALL_OW 275
43128: PUSH
43129: LD_VAR 0 5
43133: PUSH
43134: LD_INT 3
43136: ARRAY
43137: GREATEREQUAL
43138: AND
43139: ST_TO_ADDR
// end ;
43140: LD_VAR 0 3
43144: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43145: LD_INT 0
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
43151: PPUSH
43152: PPUSH
43153: PPUSH
43154: PPUSH
43155: PPUSH
43156: PPUSH
43157: PPUSH
// result := false ;
43158: LD_ADDR_VAR 0 8
43162: PUSH
43163: LD_INT 0
43165: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43166: LD_VAR 0 5
43170: NOT
43171: PUSH
43172: LD_VAR 0 1
43176: NOT
43177: OR
43178: PUSH
43179: LD_VAR 0 2
43183: NOT
43184: OR
43185: PUSH
43186: LD_VAR 0 3
43190: NOT
43191: OR
43192: IFFALSE 43196
// exit ;
43194: GO 44010
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43196: LD_ADDR_VAR 0 14
43200: PUSH
43201: LD_VAR 0 1
43205: PPUSH
43206: LD_VAR 0 2
43210: PPUSH
43211: LD_VAR 0 3
43215: PPUSH
43216: LD_VAR 0 4
43220: PPUSH
43221: LD_VAR 0 5
43225: PUSH
43226: LD_INT 1
43228: ARRAY
43229: PPUSH
43230: CALL_OW 248
43234: PPUSH
43235: LD_INT 0
43237: PPUSH
43238: CALL 45263 0 6
43242: ST_TO_ADDR
// if not hexes then
43243: LD_VAR 0 14
43247: NOT
43248: IFFALSE 43252
// exit ;
43250: GO 44010
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43252: LD_ADDR_VAR 0 17
43256: PUSH
43257: LD_VAR 0 5
43261: PPUSH
43262: LD_INT 22
43264: PUSH
43265: LD_VAR 0 13
43269: PPUSH
43270: CALL_OW 255
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 30
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 30
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: LIST
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PPUSH
43311: CALL_OW 72
43315: ST_TO_ADDR
// for i = 1 to hexes do
43316: LD_ADDR_VAR 0 9
43320: PUSH
43321: DOUBLE
43322: LD_INT 1
43324: DEC
43325: ST_TO_ADDR
43326: LD_VAR 0 14
43330: PUSH
43331: FOR_TO
43332: IFFALSE 44008
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43334: LD_ADDR_VAR 0 13
43338: PUSH
43339: LD_VAR 0 14
43343: PUSH
43344: LD_VAR 0 9
43348: ARRAY
43349: PUSH
43350: LD_INT 1
43352: ARRAY
43353: PPUSH
43354: LD_VAR 0 14
43358: PUSH
43359: LD_VAR 0 9
43363: ARRAY
43364: PUSH
43365: LD_INT 2
43367: ARRAY
43368: PPUSH
43369: CALL_OW 428
43373: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43374: LD_VAR 0 14
43378: PUSH
43379: LD_VAR 0 9
43383: ARRAY
43384: PUSH
43385: LD_INT 1
43387: ARRAY
43388: PPUSH
43389: LD_VAR 0 14
43393: PUSH
43394: LD_VAR 0 9
43398: ARRAY
43399: PUSH
43400: LD_INT 2
43402: ARRAY
43403: PPUSH
43404: CALL_OW 351
43408: PUSH
43409: LD_VAR 0 14
43413: PUSH
43414: LD_VAR 0 9
43418: ARRAY
43419: PUSH
43420: LD_INT 1
43422: ARRAY
43423: PPUSH
43424: LD_VAR 0 14
43428: PUSH
43429: LD_VAR 0 9
43433: ARRAY
43434: PUSH
43435: LD_INT 2
43437: ARRAY
43438: PPUSH
43439: CALL_OW 488
43443: NOT
43444: OR
43445: PUSH
43446: LD_VAR 0 13
43450: PPUSH
43451: CALL_OW 247
43455: PUSH
43456: LD_INT 3
43458: EQUAL
43459: OR
43460: IFFALSE 43466
// exit ;
43462: POP
43463: POP
43464: GO 44010
// if not tmp then
43466: LD_VAR 0 13
43470: NOT
43471: IFFALSE 43475
// continue ;
43473: GO 43331
// result := true ;
43475: LD_ADDR_VAR 0 8
43479: PUSH
43480: LD_INT 1
43482: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43483: LD_VAR 0 6
43487: PUSH
43488: LD_VAR 0 13
43492: PPUSH
43493: CALL_OW 247
43497: PUSH
43498: LD_INT 2
43500: EQUAL
43501: AND
43502: PUSH
43503: LD_VAR 0 13
43507: PPUSH
43508: CALL_OW 263
43512: PUSH
43513: LD_INT 1
43515: EQUAL
43516: AND
43517: IFFALSE 43681
// begin if IsDrivenBy ( tmp ) then
43519: LD_VAR 0 13
43523: PPUSH
43524: CALL_OW 311
43528: IFFALSE 43532
// continue ;
43530: GO 43331
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43532: LD_VAR 0 6
43536: PPUSH
43537: LD_INT 3
43539: PUSH
43540: LD_INT 60
43542: PUSH
43543: EMPTY
43544: LIST
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 55
43555: PUSH
43556: EMPTY
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PPUSH
43567: CALL_OW 72
43571: IFFALSE 43679
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43573: LD_ADDR_VAR 0 18
43577: PUSH
43578: LD_VAR 0 6
43582: PPUSH
43583: LD_INT 3
43585: PUSH
43586: LD_INT 60
43588: PUSH
43589: EMPTY
43590: LIST
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: LD_INT 55
43601: PUSH
43602: EMPTY
43603: LIST
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PPUSH
43613: CALL_OW 72
43617: PUSH
43618: LD_INT 1
43620: ARRAY
43621: ST_TO_ADDR
// if IsInUnit ( driver ) then
43622: LD_VAR 0 18
43626: PPUSH
43627: CALL_OW 310
43631: IFFALSE 43642
// ComExit ( driver ) ;
43633: LD_VAR 0 18
43637: PPUSH
43638: CALL 69055 0 1
// AddComEnterUnit ( driver , tmp ) ;
43642: LD_VAR 0 18
43646: PPUSH
43647: LD_VAR 0 13
43651: PPUSH
43652: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43656: LD_VAR 0 18
43660: PPUSH
43661: LD_VAR 0 7
43665: PPUSH
43666: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43670: LD_VAR 0 18
43674: PPUSH
43675: CALL_OW 181
// end ; continue ;
43679: GO 43331
// end ; if not cleaners or not tmp in cleaners then
43681: LD_VAR 0 6
43685: NOT
43686: PUSH
43687: LD_VAR 0 13
43691: PUSH
43692: LD_VAR 0 6
43696: IN
43697: NOT
43698: OR
43699: IFFALSE 44006
// begin if dep then
43701: LD_VAR 0 17
43705: IFFALSE 43841
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43707: LD_ADDR_VAR 0 16
43711: PUSH
43712: LD_VAR 0 17
43716: PUSH
43717: LD_INT 1
43719: ARRAY
43720: PPUSH
43721: CALL_OW 250
43725: PPUSH
43726: LD_VAR 0 17
43730: PUSH
43731: LD_INT 1
43733: ARRAY
43734: PPUSH
43735: CALL_OW 254
43739: PPUSH
43740: LD_INT 5
43742: PPUSH
43743: CALL_OW 272
43747: PUSH
43748: LD_VAR 0 17
43752: PUSH
43753: LD_INT 1
43755: ARRAY
43756: PPUSH
43757: CALL_OW 251
43761: PPUSH
43762: LD_VAR 0 17
43766: PUSH
43767: LD_INT 1
43769: ARRAY
43770: PPUSH
43771: CALL_OW 254
43775: PPUSH
43776: LD_INT 5
43778: PPUSH
43779: CALL_OW 273
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43788: LD_VAR 0 16
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: PPUSH
43797: LD_VAR 0 16
43801: PUSH
43802: LD_INT 2
43804: ARRAY
43805: PPUSH
43806: CALL_OW 488
43810: IFFALSE 43841
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43812: LD_VAR 0 13
43816: PPUSH
43817: LD_VAR 0 16
43821: PUSH
43822: LD_INT 1
43824: ARRAY
43825: PPUSH
43826: LD_VAR 0 16
43830: PUSH
43831: LD_INT 2
43833: ARRAY
43834: PPUSH
43835: CALL_OW 111
// continue ;
43839: GO 43331
// end ; end ; r := GetDir ( tmp ) ;
43841: LD_ADDR_VAR 0 15
43845: PUSH
43846: LD_VAR 0 13
43850: PPUSH
43851: CALL_OW 254
43855: ST_TO_ADDR
// if r = 5 then
43856: LD_VAR 0 15
43860: PUSH
43861: LD_INT 5
43863: EQUAL
43864: IFFALSE 43874
// r := 0 ;
43866: LD_ADDR_VAR 0 15
43870: PUSH
43871: LD_INT 0
43873: ST_TO_ADDR
// for j = r to 5 do
43874: LD_ADDR_VAR 0 10
43878: PUSH
43879: DOUBLE
43880: LD_VAR 0 15
43884: DEC
43885: ST_TO_ADDR
43886: LD_INT 5
43888: PUSH
43889: FOR_TO
43890: IFFALSE 44004
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43892: LD_ADDR_VAR 0 11
43896: PUSH
43897: LD_VAR 0 13
43901: PPUSH
43902: CALL_OW 250
43906: PPUSH
43907: LD_VAR 0 10
43911: PPUSH
43912: LD_INT 2
43914: PPUSH
43915: CALL_OW 272
43919: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43920: LD_ADDR_VAR 0 12
43924: PUSH
43925: LD_VAR 0 13
43929: PPUSH
43930: CALL_OW 251
43934: PPUSH
43935: LD_VAR 0 10
43939: PPUSH
43940: LD_INT 2
43942: PPUSH
43943: CALL_OW 273
43947: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43948: LD_VAR 0 11
43952: PPUSH
43953: LD_VAR 0 12
43957: PPUSH
43958: CALL_OW 488
43962: PUSH
43963: LD_VAR 0 11
43967: PPUSH
43968: LD_VAR 0 12
43972: PPUSH
43973: CALL_OW 428
43977: NOT
43978: AND
43979: IFFALSE 44002
// begin ComMoveXY ( tmp , _x , _y ) ;
43981: LD_VAR 0 13
43985: PPUSH
43986: LD_VAR 0 11
43990: PPUSH
43991: LD_VAR 0 12
43995: PPUSH
43996: CALL_OW 111
// break ;
44000: GO 44004
// end ; end ;
44002: GO 43889
44004: POP
44005: POP
// end ; end ;
44006: GO 43331
44008: POP
44009: POP
// end ;
44010: LD_VAR 0 8
44014: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44015: LD_INT 0
44017: PPUSH
// result := true ;
44018: LD_ADDR_VAR 0 3
44022: PUSH
44023: LD_INT 1
44025: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44026: LD_VAR 0 2
44030: PUSH
44031: LD_INT 24
44033: DOUBLE
44034: EQUAL
44035: IFTRUE 44045
44037: LD_INT 33
44039: DOUBLE
44040: EQUAL
44041: IFTRUE 44045
44043: GO 44070
44045: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44046: LD_ADDR_VAR 0 3
44050: PUSH
44051: LD_INT 32
44053: PPUSH
44054: LD_VAR 0 1
44058: PPUSH
44059: CALL_OW 321
44063: PUSH
44064: LD_INT 2
44066: EQUAL
44067: ST_TO_ADDR
44068: GO 44386
44070: LD_INT 20
44072: DOUBLE
44073: EQUAL
44074: IFTRUE 44078
44076: GO 44103
44078: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44079: LD_ADDR_VAR 0 3
44083: PUSH
44084: LD_INT 6
44086: PPUSH
44087: LD_VAR 0 1
44091: PPUSH
44092: CALL_OW 321
44096: PUSH
44097: LD_INT 2
44099: EQUAL
44100: ST_TO_ADDR
44101: GO 44386
44103: LD_INT 22
44105: DOUBLE
44106: EQUAL
44107: IFTRUE 44117
44109: LD_INT 36
44111: DOUBLE
44112: EQUAL
44113: IFTRUE 44117
44115: GO 44142
44117: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44118: LD_ADDR_VAR 0 3
44122: PUSH
44123: LD_INT 15
44125: PPUSH
44126: LD_VAR 0 1
44130: PPUSH
44131: CALL_OW 321
44135: PUSH
44136: LD_INT 2
44138: EQUAL
44139: ST_TO_ADDR
44140: GO 44386
44142: LD_INT 30
44144: DOUBLE
44145: EQUAL
44146: IFTRUE 44150
44148: GO 44175
44150: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44151: LD_ADDR_VAR 0 3
44155: PUSH
44156: LD_INT 20
44158: PPUSH
44159: LD_VAR 0 1
44163: PPUSH
44164: CALL_OW 321
44168: PUSH
44169: LD_INT 2
44171: EQUAL
44172: ST_TO_ADDR
44173: GO 44386
44175: LD_INT 28
44177: DOUBLE
44178: EQUAL
44179: IFTRUE 44189
44181: LD_INT 21
44183: DOUBLE
44184: EQUAL
44185: IFTRUE 44189
44187: GO 44214
44189: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44190: LD_ADDR_VAR 0 3
44194: PUSH
44195: LD_INT 21
44197: PPUSH
44198: LD_VAR 0 1
44202: PPUSH
44203: CALL_OW 321
44207: PUSH
44208: LD_INT 2
44210: EQUAL
44211: ST_TO_ADDR
44212: GO 44386
44214: LD_INT 16
44216: DOUBLE
44217: EQUAL
44218: IFTRUE 44222
44220: GO 44247
44222: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44223: LD_ADDR_VAR 0 3
44227: PUSH
44228: LD_INT 84
44230: PPUSH
44231: LD_VAR 0 1
44235: PPUSH
44236: CALL_OW 321
44240: PUSH
44241: LD_INT 2
44243: EQUAL
44244: ST_TO_ADDR
44245: GO 44386
44247: LD_INT 19
44249: DOUBLE
44250: EQUAL
44251: IFTRUE 44261
44253: LD_INT 23
44255: DOUBLE
44256: EQUAL
44257: IFTRUE 44261
44259: GO 44286
44261: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44262: LD_ADDR_VAR 0 3
44266: PUSH
44267: LD_INT 83
44269: PPUSH
44270: LD_VAR 0 1
44274: PPUSH
44275: CALL_OW 321
44279: PUSH
44280: LD_INT 2
44282: EQUAL
44283: ST_TO_ADDR
44284: GO 44386
44286: LD_INT 17
44288: DOUBLE
44289: EQUAL
44290: IFTRUE 44294
44292: GO 44319
44294: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44295: LD_ADDR_VAR 0 3
44299: PUSH
44300: LD_INT 39
44302: PPUSH
44303: LD_VAR 0 1
44307: PPUSH
44308: CALL_OW 321
44312: PUSH
44313: LD_INT 2
44315: EQUAL
44316: ST_TO_ADDR
44317: GO 44386
44319: LD_INT 18
44321: DOUBLE
44322: EQUAL
44323: IFTRUE 44327
44325: GO 44352
44327: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44328: LD_ADDR_VAR 0 3
44332: PUSH
44333: LD_INT 40
44335: PPUSH
44336: LD_VAR 0 1
44340: PPUSH
44341: CALL_OW 321
44345: PUSH
44346: LD_INT 2
44348: EQUAL
44349: ST_TO_ADDR
44350: GO 44386
44352: LD_INT 27
44354: DOUBLE
44355: EQUAL
44356: IFTRUE 44360
44358: GO 44385
44360: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44361: LD_ADDR_VAR 0 3
44365: PUSH
44366: LD_INT 35
44368: PPUSH
44369: LD_VAR 0 1
44373: PPUSH
44374: CALL_OW 321
44378: PUSH
44379: LD_INT 2
44381: EQUAL
44382: ST_TO_ADDR
44383: GO 44386
44385: POP
// end ;
44386: LD_VAR 0 3
44390: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44391: LD_INT 0
44393: PPUSH
44394: PPUSH
44395: PPUSH
44396: PPUSH
44397: PPUSH
44398: PPUSH
44399: PPUSH
44400: PPUSH
44401: PPUSH
44402: PPUSH
44403: PPUSH
// result := false ;
44404: LD_ADDR_VAR 0 6
44408: PUSH
44409: LD_INT 0
44411: ST_TO_ADDR
// if btype = b_depot then
44412: LD_VAR 0 2
44416: PUSH
44417: LD_INT 0
44419: EQUAL
44420: IFFALSE 44432
// begin result := true ;
44422: LD_ADDR_VAR 0 6
44426: PUSH
44427: LD_INT 1
44429: ST_TO_ADDR
// exit ;
44430: GO 45258
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44432: LD_VAR 0 1
44436: NOT
44437: PUSH
44438: LD_VAR 0 1
44442: PPUSH
44443: CALL_OW 266
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: IN
44458: NOT
44459: OR
44460: PUSH
44461: LD_VAR 0 2
44465: NOT
44466: OR
44467: PUSH
44468: LD_VAR 0 5
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 3
44484: PUSH
44485: LD_INT 4
44487: PUSH
44488: LD_INT 5
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: IN
44499: NOT
44500: OR
44501: PUSH
44502: LD_VAR 0 3
44506: PPUSH
44507: LD_VAR 0 4
44511: PPUSH
44512: CALL_OW 488
44516: NOT
44517: OR
44518: IFFALSE 44522
// exit ;
44520: GO 45258
// side := GetSide ( depot ) ;
44522: LD_ADDR_VAR 0 9
44526: PUSH
44527: LD_VAR 0 1
44531: PPUSH
44532: CALL_OW 255
44536: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44537: LD_VAR 0 9
44541: PPUSH
44542: LD_VAR 0 2
44546: PPUSH
44547: CALL 44015 0 2
44551: NOT
44552: IFFALSE 44556
// exit ;
44554: GO 45258
// pom := GetBase ( depot ) ;
44556: LD_ADDR_VAR 0 10
44560: PUSH
44561: LD_VAR 0 1
44565: PPUSH
44566: CALL_OW 274
44570: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44571: LD_ADDR_VAR 0 11
44575: PUSH
44576: LD_VAR 0 2
44580: PPUSH
44581: LD_VAR 0 1
44585: PPUSH
44586: CALL_OW 248
44590: PPUSH
44591: CALL_OW 450
44595: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44596: LD_VAR 0 10
44600: PPUSH
44601: LD_INT 1
44603: PPUSH
44604: CALL_OW 275
44608: PUSH
44609: LD_VAR 0 11
44613: PUSH
44614: LD_INT 1
44616: ARRAY
44617: GREATEREQUAL
44618: PUSH
44619: LD_VAR 0 10
44623: PPUSH
44624: LD_INT 2
44626: PPUSH
44627: CALL_OW 275
44631: PUSH
44632: LD_VAR 0 11
44636: PUSH
44637: LD_INT 2
44639: ARRAY
44640: GREATEREQUAL
44641: AND
44642: PUSH
44643: LD_VAR 0 10
44647: PPUSH
44648: LD_INT 3
44650: PPUSH
44651: CALL_OW 275
44655: PUSH
44656: LD_VAR 0 11
44660: PUSH
44661: LD_INT 3
44663: ARRAY
44664: GREATEREQUAL
44665: AND
44666: NOT
44667: IFFALSE 44671
// exit ;
44669: GO 45258
// if GetBType ( depot ) = b_depot then
44671: LD_VAR 0 1
44675: PPUSH
44676: CALL_OW 266
44680: PUSH
44681: LD_INT 0
44683: EQUAL
44684: IFFALSE 44696
// dist := 28 else
44686: LD_ADDR_VAR 0 14
44690: PUSH
44691: LD_INT 28
44693: ST_TO_ADDR
44694: GO 44704
// dist := 36 ;
44696: LD_ADDR_VAR 0 14
44700: PUSH
44701: LD_INT 36
44703: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44704: LD_VAR 0 1
44708: PPUSH
44709: LD_VAR 0 3
44713: PPUSH
44714: LD_VAR 0 4
44718: PPUSH
44719: CALL_OW 297
44723: PUSH
44724: LD_VAR 0 14
44728: GREATER
44729: IFFALSE 44733
// exit ;
44731: GO 45258
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44733: LD_ADDR_VAR 0 12
44737: PUSH
44738: LD_VAR 0 2
44742: PPUSH
44743: LD_VAR 0 3
44747: PPUSH
44748: LD_VAR 0 4
44752: PPUSH
44753: LD_VAR 0 5
44757: PPUSH
44758: LD_VAR 0 1
44762: PPUSH
44763: CALL_OW 248
44767: PPUSH
44768: LD_INT 0
44770: PPUSH
44771: CALL 45263 0 6
44775: ST_TO_ADDR
// if not hexes then
44776: LD_VAR 0 12
44780: NOT
44781: IFFALSE 44785
// exit ;
44783: GO 45258
// hex := GetHexInfo ( x , y ) ;
44785: LD_ADDR_VAR 0 15
44789: PUSH
44790: LD_VAR 0 3
44794: PPUSH
44795: LD_VAR 0 4
44799: PPUSH
44800: CALL_OW 546
44804: ST_TO_ADDR
// if hex [ 1 ] then
44805: LD_VAR 0 15
44809: PUSH
44810: LD_INT 1
44812: ARRAY
44813: IFFALSE 44817
// exit ;
44815: GO 45258
// height := hex [ 2 ] ;
44817: LD_ADDR_VAR 0 13
44821: PUSH
44822: LD_VAR 0 15
44826: PUSH
44827: LD_INT 2
44829: ARRAY
44830: ST_TO_ADDR
// for i = 1 to hexes do
44831: LD_ADDR_VAR 0 7
44835: PUSH
44836: DOUBLE
44837: LD_INT 1
44839: DEC
44840: ST_TO_ADDR
44841: LD_VAR 0 12
44845: PUSH
44846: FOR_TO
44847: IFFALSE 45177
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44849: LD_VAR 0 12
44853: PUSH
44854: LD_VAR 0 7
44858: ARRAY
44859: PUSH
44860: LD_INT 1
44862: ARRAY
44863: PPUSH
44864: LD_VAR 0 12
44868: PUSH
44869: LD_VAR 0 7
44873: ARRAY
44874: PUSH
44875: LD_INT 2
44877: ARRAY
44878: PPUSH
44879: CALL_OW 488
44883: NOT
44884: PUSH
44885: LD_VAR 0 12
44889: PUSH
44890: LD_VAR 0 7
44894: ARRAY
44895: PUSH
44896: LD_INT 1
44898: ARRAY
44899: PPUSH
44900: LD_VAR 0 12
44904: PUSH
44905: LD_VAR 0 7
44909: ARRAY
44910: PUSH
44911: LD_INT 2
44913: ARRAY
44914: PPUSH
44915: CALL_OW 428
44919: PUSH
44920: LD_INT 0
44922: GREATER
44923: OR
44924: PUSH
44925: LD_VAR 0 12
44929: PUSH
44930: LD_VAR 0 7
44934: ARRAY
44935: PUSH
44936: LD_INT 1
44938: ARRAY
44939: PPUSH
44940: LD_VAR 0 12
44944: PUSH
44945: LD_VAR 0 7
44949: ARRAY
44950: PUSH
44951: LD_INT 2
44953: ARRAY
44954: PPUSH
44955: CALL_OW 351
44959: OR
44960: IFFALSE 44966
// exit ;
44962: POP
44963: POP
44964: GO 45258
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44966: LD_ADDR_VAR 0 8
44970: PUSH
44971: LD_VAR 0 12
44975: PUSH
44976: LD_VAR 0 7
44980: ARRAY
44981: PUSH
44982: LD_INT 1
44984: ARRAY
44985: PPUSH
44986: LD_VAR 0 12
44990: PUSH
44991: LD_VAR 0 7
44995: ARRAY
44996: PUSH
44997: LD_INT 2
44999: ARRAY
45000: PPUSH
45001: CALL_OW 546
45005: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45006: LD_VAR 0 8
45010: PUSH
45011: LD_INT 1
45013: ARRAY
45014: PUSH
45015: LD_VAR 0 8
45019: PUSH
45020: LD_INT 2
45022: ARRAY
45023: PUSH
45024: LD_VAR 0 13
45028: PUSH
45029: LD_INT 2
45031: PLUS
45032: GREATER
45033: OR
45034: PUSH
45035: LD_VAR 0 8
45039: PUSH
45040: LD_INT 2
45042: ARRAY
45043: PUSH
45044: LD_VAR 0 13
45048: PUSH
45049: LD_INT 2
45051: MINUS
45052: LESS
45053: OR
45054: PUSH
45055: LD_VAR 0 8
45059: PUSH
45060: LD_INT 3
45062: ARRAY
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 8
45069: PUSH
45070: LD_INT 9
45072: PUSH
45073: LD_INT 10
45075: PUSH
45076: LD_INT 11
45078: PUSH
45079: LD_INT 12
45081: PUSH
45082: LD_INT 13
45084: PUSH
45085: LD_INT 16
45087: PUSH
45088: LD_INT 17
45090: PUSH
45091: LD_INT 18
45093: PUSH
45094: LD_INT 19
45096: PUSH
45097: LD_INT 20
45099: PUSH
45100: LD_INT 21
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: IN
45118: NOT
45119: OR
45120: PUSH
45121: LD_VAR 0 8
45125: PUSH
45126: LD_INT 5
45128: ARRAY
45129: NOT
45130: OR
45131: PUSH
45132: LD_VAR 0 8
45136: PUSH
45137: LD_INT 6
45139: ARRAY
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: LD_INT 7
45149: PUSH
45150: LD_INT 9
45152: PUSH
45153: LD_INT 10
45155: PUSH
45156: LD_INT 11
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: IN
45167: NOT
45168: OR
45169: IFFALSE 45175
// exit ;
45171: POP
45172: POP
45173: GO 45258
// end ;
45175: GO 44846
45177: POP
45178: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45179: LD_VAR 0 9
45183: PPUSH
45184: LD_VAR 0 3
45188: PPUSH
45189: LD_VAR 0 4
45193: PPUSH
45194: LD_INT 20
45196: PPUSH
45197: CALL 37181 0 4
45201: PUSH
45202: LD_INT 4
45204: ARRAY
45205: IFFALSE 45209
// exit ;
45207: GO 45258
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45209: LD_VAR 0 2
45213: PUSH
45214: LD_INT 29
45216: PUSH
45217: LD_INT 30
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: IN
45224: PUSH
45225: LD_VAR 0 3
45229: PPUSH
45230: LD_VAR 0 4
45234: PPUSH
45235: LD_VAR 0 9
45239: PPUSH
45240: CALL_OW 440
45244: NOT
45245: AND
45246: IFFALSE 45250
// exit ;
45248: GO 45258
// result := true ;
45250: LD_ADDR_VAR 0 6
45254: PUSH
45255: LD_INT 1
45257: ST_TO_ADDR
// end ;
45258: LD_VAR 0 6
45262: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45263: LD_INT 0
45265: PPUSH
45266: PPUSH
45267: PPUSH
45268: PPUSH
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
45279: PPUSH
45280: PPUSH
45281: PPUSH
45282: PPUSH
45283: PPUSH
45284: PPUSH
45285: PPUSH
45286: PPUSH
45287: PPUSH
45288: PPUSH
45289: PPUSH
45290: PPUSH
45291: PPUSH
45292: PPUSH
45293: PPUSH
45294: PPUSH
45295: PPUSH
45296: PPUSH
45297: PPUSH
45298: PPUSH
45299: PPUSH
45300: PPUSH
45301: PPUSH
45302: PPUSH
45303: PPUSH
45304: PPUSH
45305: PPUSH
45306: PPUSH
45307: PPUSH
45308: PPUSH
45309: PPUSH
45310: PPUSH
45311: PPUSH
45312: PPUSH
45313: PPUSH
45314: PPUSH
45315: PPUSH
45316: PPUSH
45317: PPUSH
45318: PPUSH
45319: PPUSH
45320: PPUSH
45321: PPUSH
45322: PPUSH
// result = [ ] ;
45323: LD_ADDR_VAR 0 7
45327: PUSH
45328: EMPTY
45329: ST_TO_ADDR
// temp_list = [ ] ;
45330: LD_ADDR_VAR 0 9
45334: PUSH
45335: EMPTY
45336: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45337: LD_VAR 0 4
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: LD_INT 4
45356: PUSH
45357: LD_INT 5
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: IN
45368: NOT
45369: PUSH
45370: LD_VAR 0 1
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: IN
45385: PUSH
45386: LD_VAR 0 5
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 3
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: IN
45405: NOT
45406: AND
45407: OR
45408: IFFALSE 45412
// exit ;
45410: GO 63803
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45412: LD_VAR 0 1
45416: PUSH
45417: LD_INT 6
45419: PUSH
45420: LD_INT 7
45422: PUSH
45423: LD_INT 8
45425: PUSH
45426: LD_INT 13
45428: PUSH
45429: LD_INT 12
45431: PUSH
45432: LD_INT 15
45434: PUSH
45435: LD_INT 11
45437: PUSH
45438: LD_INT 14
45440: PUSH
45441: LD_INT 10
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: IN
45455: IFFALSE 45465
// btype = b_lab ;
45457: LD_ADDR_VAR 0 1
45461: PUSH
45462: LD_INT 6
45464: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45465: LD_VAR 0 6
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: LIST
45483: IN
45484: NOT
45485: PUSH
45486: LD_VAR 0 1
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: LD_INT 6
45505: PUSH
45506: LD_INT 36
45508: PUSH
45509: LD_INT 4
45511: PUSH
45512: LD_INT 5
45514: PUSH
45515: LD_INT 31
45517: PUSH
45518: LD_INT 32
45520: PUSH
45521: LD_INT 33
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: IN
45537: NOT
45538: PUSH
45539: LD_VAR 0 6
45543: PUSH
45544: LD_INT 1
45546: EQUAL
45547: AND
45548: OR
45549: PUSH
45550: LD_VAR 0 1
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: LD_INT 3
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: IN
45565: NOT
45566: PUSH
45567: LD_VAR 0 6
45571: PUSH
45572: LD_INT 2
45574: EQUAL
45575: AND
45576: OR
45577: IFFALSE 45587
// mode = 0 ;
45579: LD_ADDR_VAR 0 6
45583: PUSH
45584: LD_INT 0
45586: ST_TO_ADDR
// case mode of 0 :
45587: LD_VAR 0 6
45591: PUSH
45592: LD_INT 0
45594: DOUBLE
45595: EQUAL
45596: IFTRUE 45600
45598: GO 57053
45600: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45601: LD_ADDR_VAR 0 11
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45794: LD_ADDR_VAR 0 12
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 3
45951: NEG
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45990: LD_ADDR_VAR 0 13
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 3
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 3
46149: NEG
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 3
46161: NEG
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46189: LD_ADDR_VAR 0 14
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 3
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 3
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46385: LD_ADDR_VAR 0 15
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 3
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46578: LD_ADDR_VAR 0 16
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 3
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: LD_INT 3
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 3
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46771: LD_ADDR_VAR 0 17
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47001: LD_ADDR_VAR 0 18
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47231: LD_ADDR_VAR 0 19
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47461: LD_ADDR_VAR 0 20
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47691: LD_ADDR_VAR 0 21
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47921: LD_ADDR_VAR 0 22
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48151: LD_ADDR_VAR 0 23
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: LD_INT 3
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 3
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48431: LD_ADDR_VAR 0 24
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 3
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48707: LD_ADDR_VAR 0 25
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: NEG
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48981: LD_ADDR_VAR 0 26
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 3
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49257: LD_ADDR_VAR 0 27
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 3
49502: NEG
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49537: LD_ADDR_VAR 0 28
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: LD_INT 3
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49819: LD_ADDR_VAR 0 29
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 3
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 3
50063: NEG
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50098: LD_ADDR_VAR 0 30
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 3
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 3
50341: NEG
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50376: LD_ADDR_VAR 0 31
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 3
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 3
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50654: LD_ADDR_VAR 0 32
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50932: LD_ADDR_VAR 0 33
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51211: LD_ADDR_VAR 0 34
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 3
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51491: LD_ADDR_VAR 0 35
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51603: LD_ADDR_VAR 0 36
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51715: LD_ADDR_VAR 0 37
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51827: LD_ADDR_VAR 0 38
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51939: LD_ADDR_VAR 0 39
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52051: LD_ADDR_VAR 0 40
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52163: LD_ADDR_VAR 0 41
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 3
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 3
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: LD_INT 3
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52513: LD_ADDR_VAR 0 42
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 3
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 3
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 3
52810: NEG
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 3
52822: NEG
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52863: LD_ADDR_VAR 0 43
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: LD_INT 3
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 3
53159: NEG
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 3
53170: NEG
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53211: LD_ADDR_VAR 0 44
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 3
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 3
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53561: LD_ADDR_VAR 0 45
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 3
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 3
53870: NEG
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53911: LD_ADDR_VAR 0 46
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 3
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54259: LD_ADDR_VAR 0 47
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 2
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 2
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54410: LD_ADDR_VAR 0 48
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54557: LD_ADDR_VAR 0 49
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: LD_INT 2
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54701: LD_ADDR_VAR 0 50
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54845: LD_ADDR_VAR 0 51
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54992: LD_ADDR_VAR 0 52
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55143: LD_ADDR_VAR 0 53
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55373: LD_ADDR_VAR 0 54
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55603: LD_ADDR_VAR 0 55
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55833: LD_ADDR_VAR 0 56
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56063: LD_ADDR_VAR 0 57
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56293: LD_ADDR_VAR 0 58
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56523: LD_ADDR_VAR 0 59
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56611: LD_ADDR_VAR 0 60
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56699: LD_ADDR_VAR 0 61
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56787: LD_ADDR_VAR 0 62
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56875: LD_ADDR_VAR 0 63
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56963: LD_ADDR_VAR 0 64
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// end ; 1 :
57051: GO 62948
57053: LD_INT 1
57055: DOUBLE
57056: EQUAL
57057: IFTRUE 57061
57059: GO 59684
57061: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57062: LD_ADDR_VAR 0 11
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: LIST
57105: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57106: LD_ADDR_VAR 0 12
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: LIST
57146: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57147: LD_ADDR_VAR 0 13
57151: PUSH
57152: LD_INT 3
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57187: LD_ADDR_VAR 0 14
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 3
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 3
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57228: LD_ADDR_VAR 0 15
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 3
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57272: LD_ADDR_VAR 0 16
57276: PUSH
57277: LD_INT 2
57279: NEG
57280: PUSH
57281: LD_INT 3
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: NEG
57292: PUSH
57293: LD_INT 2
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: LD_INT 3
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57318: LD_ADDR_VAR 0 17
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 3
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: LIST
57361: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57362: LD_ADDR_VAR 0 18
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57403: LD_ADDR_VAR 0 19
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: LIST
57442: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57443: LD_ADDR_VAR 0 20
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 3
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: LIST
57483: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57484: LD_ADDR_VAR 0 21
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 3
57513: NEG
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: LIST
57527: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57528: LD_ADDR_VAR 0 22
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 3
57559: NEG
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57574: LD_ADDR_VAR 0 23
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: LD_INT 4
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57618: LD_ADDR_VAR 0 24
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 4
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: LIST
57658: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57659: LD_ADDR_VAR 0 25
57663: PUSH
57664: LD_INT 3
57666: PUSH
57667: LD_INT 3
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 4
57676: PUSH
57677: LD_INT 3
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: LD_INT 4
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: LIST
57698: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57699: LD_ADDR_VAR 0 26
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 3
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 4
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57740: LD_ADDR_VAR 0 27
57744: PUSH
57745: LD_INT 3
57747: NEG
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 4
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57784: LD_ADDR_VAR 0 28
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 3
57803: NEG
57804: PUSH
57805: LD_INT 4
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 4
57815: NEG
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: LIST
57829: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57830: LD_ADDR_VAR 0 29
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: LD_INT 3
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 4
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 4
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 5
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 5
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: LD_INT 4
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 6
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: LD_INT 6
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: LD_INT 5
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57985: LD_ADDR_VAR 0 30
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 4
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 4
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 4
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 5
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 5
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 5
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 6
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 6
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58128: LD_ADDR_VAR 0 31
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 4
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 4
58175: PUSH
58176: LD_INT 4
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 4
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 5
58195: PUSH
58196: LD_INT 4
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 5
58205: PUSH
58206: LD_INT 5
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 4
58215: PUSH
58216: LD_INT 5
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 6
58225: PUSH
58226: LD_INT 5
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 6
58235: PUSH
58236: LD_INT 6
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 5
58245: PUSH
58246: LD_INT 6
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58267: LD_ADDR_VAR 0 32
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 3
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 4
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 5
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 5
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 6
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 6
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 5
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58410: LD_ADDR_VAR 0 33
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 4
58473: NEG
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 4
58485: NEG
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 5
58496: NEG
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 5
58507: NEG
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 5
58519: NEG
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 6
58530: NEG
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 6
58541: NEG
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58565: LD_ADDR_VAR 0 34
58569: PUSH
58570: LD_INT 2
58572: NEG
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: NEG
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: LD_INT 4
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 4
58620: NEG
58621: PUSH
58622: LD_INT 3
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 4
58632: NEG
58633: PUSH
58634: LD_INT 4
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 4
58644: NEG
58645: PUSH
58646: LD_INT 5
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 5
58656: NEG
58657: PUSH
58658: LD_INT 4
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 5
58668: NEG
58669: PUSH
58670: LD_INT 5
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 5
58680: NEG
58681: PUSH
58682: LD_INT 6
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 6
58692: NEG
58693: PUSH
58694: LD_INT 5
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 6
58704: NEG
58705: PUSH
58706: LD_INT 6
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58728: LD_ADDR_VAR 0 41
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58772: LD_ADDR_VAR 0 42
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58813: LD_ADDR_VAR 0 43
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58853: LD_ADDR_VAR 0 44
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 3
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58894: LD_ADDR_VAR 0 45
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58938: LD_ADDR_VAR 0 46
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: NEG
58970: PUSH
58971: LD_INT 2
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58984: LD_ADDR_VAR 0 47
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59017: LD_ADDR_VAR 0 48
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59048: LD_ADDR_VAR 0 49
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59077: LD_ADDR_VAR 0 50
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: LD_INT 3
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 3
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59106: LD_ADDR_VAR 0 51
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59137: LD_ADDR_VAR 0 52
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59170: LD_ADDR_VAR 0 53
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: LD_INT 3
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 3
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59214: LD_ADDR_VAR 0 54
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 3
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: LIST
59254: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59255: LD_ADDR_VAR 0 55
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: LIST
59294: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59295: LD_ADDR_VAR 0 56
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59336: LD_ADDR_VAR 0 57
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: LIST
59379: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59380: LD_ADDR_VAR 0 58
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: LD_INT 3
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59426: LD_ADDR_VAR 0 59
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 2
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59470: LD_ADDR_VAR 0 60
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: LIST
59510: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59511: LD_ADDR_VAR 0 61
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59551: LD_ADDR_VAR 0 62
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: LIST
59591: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59592: LD_ADDR_VAR 0 63
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59636: LD_ADDR_VAR 0 64
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: ST_TO_ADDR
// end ; 2 :
59682: GO 62948
59684: LD_INT 2
59686: DOUBLE
59687: EQUAL
59688: IFTRUE 59692
59690: GO 62947
59692: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59693: LD_ADDR_VAR 0 29
59697: PUSH
59698: LD_INT 4
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 4
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 5
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 5
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 4
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 3
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 5
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: LD_INT 3
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 4
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 4
59823: PUSH
59824: LD_INT 4
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: LD_INT 4
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: LD_INT 3
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 4
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: LD_INT 4
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 4
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 4
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 5
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: LD_INT 5
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 4
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: PUSH
59956: LD_INT 5
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: LD_INT 3
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 3
59976: NEG
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 3
59987: NEG
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: NEG
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 4
60032: NEG
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 4
60043: NEG
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 4
60055: NEG
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 4
60078: NEG
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 4
60090: NEG
60091: PUSH
60092: LD_INT 5
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: LD_INT 4
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 4
60126: NEG
60127: PUSH
60128: LD_INT 3
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 5
60138: NEG
60139: PUSH
60140: LD_INT 4
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 5
60150: NEG
60151: PUSH
60152: LD_INT 5
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: LD_INT 5
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 5
60174: NEG
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60231: LD_ADDR_VAR 0 30
60235: PUSH
60236: LD_INT 4
60238: PUSH
60239: LD_INT 4
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 4
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 5
60258: PUSH
60259: LD_INT 4
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 5
60268: PUSH
60269: LD_INT 5
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 4
60278: PUSH
60279: LD_INT 5
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 3
60288: PUSH
60289: LD_INT 4
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 5
60308: PUSH
60309: LD_INT 3
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 3
60318: PUSH
60319: LD_INT 5
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: LD_INT 3
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 4
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 4
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 2
60400: PUSH
60401: LD_INT 4
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 4
60421: NEG
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 4
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: NEG
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 4
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 5
60477: NEG
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 5
60488: NEG
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 5
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 3
60512: NEG
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: NEG
60524: PUSH
60525: LD_INT 3
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: LD_INT 4
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 3
60571: NEG
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 4
60583: NEG
60584: PUSH
60585: LD_INT 3
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 4
60595: NEG
60596: PUSH
60597: LD_INT 4
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: LD_INT 4
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 4
60619: NEG
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 4
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 5
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 4
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: LD_INT 4
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 5
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: LD_INT 5
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60778: LD_ADDR_VAR 0 31
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 4
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 3
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 5
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 5
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: LD_INT 4
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 3
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: LD_INT 5
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 3
60878: NEG
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 4
60934: NEG
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 4
60945: NEG
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 4
60957: NEG
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 4
60980: NEG
60981: PUSH
60982: LD_INT 4
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 4
60992: NEG
60993: PUSH
60994: LD_INT 5
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: LD_INT 4
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: LD_INT 3
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 5
61040: NEG
61041: PUSH
61042: LD_INT 4
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 5
61052: NEG
61053: PUSH
61054: LD_INT 5
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: NEG
61065: PUSH
61066: LD_INT 5
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 5
61076: NEG
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: LD_INT 4
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: LD_INT 3
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: LD_INT 4
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 2
61178: NEG
61179: PUSH
61180: LD_INT 4
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 4
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 4
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 5
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 5
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 4
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 3
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 5
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61328: LD_ADDR_VAR 0 32
61332: PUSH
61333: LD_INT 4
61335: NEG
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 4
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 4
61380: NEG
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 5
61391: NEG
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 5
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 5
61414: NEG
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 3
61426: NEG
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: NEG
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: NEG
61450: PUSH
61451: LD_INT 4
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 4
61497: NEG
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 4
61509: NEG
61510: PUSH
61511: LD_INT 4
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: LD_INT 4
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 4
61533: NEG
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 4
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 5
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: LD_INT 4
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 3
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 3
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: LD_INT 4
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 5
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: LD_INT 3
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: LD_INT 5
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 4
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 4
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 3
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 2
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: PUSH
61720: LD_INT 2
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 4
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 4
61740: PUSH
61741: LD_INT 4
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 4
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 5
61760: PUSH
61761: LD_INT 4
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 5
61770: PUSH
61771: LD_INT 5
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 4
61780: PUSH
61781: LD_INT 5
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: LD_INT 4
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 3
61800: PUSH
61801: LD_INT 3
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 5
61810: PUSH
61811: LD_INT 3
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: LD_INT 5
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61875: LD_ADDR_VAR 0 33
61879: PUSH
61880: LD_INT 4
61882: NEG
61883: PUSH
61884: LD_INT 4
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 4
61894: NEG
61895: PUSH
61896: LD_INT 5
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 3
61906: NEG
61907: PUSH
61908: LD_INT 4
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 3
61918: NEG
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 5
61942: NEG
61943: PUSH
61944: LD_INT 4
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 5
61954: NEG
61955: PUSH
61956: LD_INT 5
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 3
61966: NEG
61967: PUSH
61968: LD_INT 5
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 5
61978: NEG
61979: PUSH
61980: LD_INT 3
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: LD_INT 3
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: LD_INT 4
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: NEG
62058: PUSH
62059: LD_INT 4
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 2
62069: PUSH
62070: LD_INT 2
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: NEG
62081: PUSH
62082: LD_INT 4
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 4
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 4
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 5
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 5
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 4
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 3
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 3
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 5
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 4
62205: PUSH
62206: LD_INT 3
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 4
62215: PUSH
62216: LD_INT 4
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 3
62225: PUSH
62226: LD_INT 4
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 3
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 4
62255: PUSH
62256: LD_INT 2
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: PUSH
62266: LD_INT 4
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: LD_INT 4
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 3
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 4
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: LD_INT 5
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: LD_INT 5
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: LD_INT 3
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: LD_INT 5
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: LD_INT 3
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62413: LD_ADDR_VAR 0 34
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 4
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 5
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: LD_INT 4
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: LD_INT 3
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: LD_INT 3
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: LD_INT 4
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: LD_INT 5
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: LD_INT 5
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 3
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 3
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 4
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 4
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 4
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 4
62615: PUSH
62616: LD_INT 4
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 4
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 5
62635: PUSH
62636: LD_INT 4
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 5
62645: PUSH
62646: LD_INT 5
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 4
62655: PUSH
62656: LD_INT 5
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 3
62665: PUSH
62666: LD_INT 4
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 3
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 5
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 3
62695: PUSH
62696: LD_INT 5
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: LD_INT 3
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 4
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 4
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: LD_INT 3
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: LD_INT 4
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 4
62798: NEG
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 4
62809: NEG
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 3
62821: NEG
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: NEG
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 4
62843: NEG
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 5
62854: NEG
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 5
62865: NEG
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 5
62877: NEG
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: ST_TO_ADDR
// end ; end ;
62945: GO 62948
62947: POP
// case btype of b_depot , b_warehouse :
62948: LD_VAR 0 1
62952: PUSH
62953: LD_INT 0
62955: DOUBLE
62956: EQUAL
62957: IFTRUE 62967
62959: LD_INT 1
62961: DOUBLE
62962: EQUAL
62963: IFTRUE 62967
62965: GO 63168
62967: POP
// case nation of nation_american :
62968: LD_VAR 0 5
62972: PUSH
62973: LD_INT 1
62975: DOUBLE
62976: EQUAL
62977: IFTRUE 62981
62979: GO 63037
62981: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62982: LD_ADDR_VAR 0 9
62986: PUSH
62987: LD_VAR 0 11
62991: PUSH
62992: LD_VAR 0 12
62996: PUSH
62997: LD_VAR 0 13
63001: PUSH
63002: LD_VAR 0 14
63006: PUSH
63007: LD_VAR 0 15
63011: PUSH
63012: LD_VAR 0 16
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: PUSH
63025: LD_VAR 0 4
63029: PUSH
63030: LD_INT 1
63032: PLUS
63033: ARRAY
63034: ST_TO_ADDR
63035: GO 63166
63037: LD_INT 2
63039: DOUBLE
63040: EQUAL
63041: IFTRUE 63045
63043: GO 63101
63045: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63046: LD_ADDR_VAR 0 9
63050: PUSH
63051: LD_VAR 0 17
63055: PUSH
63056: LD_VAR 0 18
63060: PUSH
63061: LD_VAR 0 19
63065: PUSH
63066: LD_VAR 0 20
63070: PUSH
63071: LD_VAR 0 21
63075: PUSH
63076: LD_VAR 0 22
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: PUSH
63089: LD_VAR 0 4
63093: PUSH
63094: LD_INT 1
63096: PLUS
63097: ARRAY
63098: ST_TO_ADDR
63099: GO 63166
63101: LD_INT 3
63103: DOUBLE
63104: EQUAL
63105: IFTRUE 63109
63107: GO 63165
63109: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63110: LD_ADDR_VAR 0 9
63114: PUSH
63115: LD_VAR 0 23
63119: PUSH
63120: LD_VAR 0 24
63124: PUSH
63125: LD_VAR 0 25
63129: PUSH
63130: LD_VAR 0 26
63134: PUSH
63135: LD_VAR 0 27
63139: PUSH
63140: LD_VAR 0 28
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: PUSH
63153: LD_VAR 0 4
63157: PUSH
63158: LD_INT 1
63160: PLUS
63161: ARRAY
63162: ST_TO_ADDR
63163: GO 63166
63165: POP
63166: GO 63721
63168: LD_INT 2
63170: DOUBLE
63171: EQUAL
63172: IFTRUE 63182
63174: LD_INT 3
63176: DOUBLE
63177: EQUAL
63178: IFTRUE 63182
63180: GO 63238
63182: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63183: LD_ADDR_VAR 0 9
63187: PUSH
63188: LD_VAR 0 29
63192: PUSH
63193: LD_VAR 0 30
63197: PUSH
63198: LD_VAR 0 31
63202: PUSH
63203: LD_VAR 0 32
63207: PUSH
63208: LD_VAR 0 33
63212: PUSH
63213: LD_VAR 0 34
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: PUSH
63226: LD_VAR 0 4
63230: PUSH
63231: LD_INT 1
63233: PLUS
63234: ARRAY
63235: ST_TO_ADDR
63236: GO 63721
63238: LD_INT 16
63240: DOUBLE
63241: EQUAL
63242: IFTRUE 63300
63244: LD_INT 17
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63300
63250: LD_INT 18
63252: DOUBLE
63253: EQUAL
63254: IFTRUE 63300
63256: LD_INT 19
63258: DOUBLE
63259: EQUAL
63260: IFTRUE 63300
63262: LD_INT 22
63264: DOUBLE
63265: EQUAL
63266: IFTRUE 63300
63268: LD_INT 20
63270: DOUBLE
63271: EQUAL
63272: IFTRUE 63300
63274: LD_INT 21
63276: DOUBLE
63277: EQUAL
63278: IFTRUE 63300
63280: LD_INT 23
63282: DOUBLE
63283: EQUAL
63284: IFTRUE 63300
63286: LD_INT 24
63288: DOUBLE
63289: EQUAL
63290: IFTRUE 63300
63292: LD_INT 25
63294: DOUBLE
63295: EQUAL
63296: IFTRUE 63300
63298: GO 63356
63300: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63301: LD_ADDR_VAR 0 9
63305: PUSH
63306: LD_VAR 0 35
63310: PUSH
63311: LD_VAR 0 36
63315: PUSH
63316: LD_VAR 0 37
63320: PUSH
63321: LD_VAR 0 38
63325: PUSH
63326: LD_VAR 0 39
63330: PUSH
63331: LD_VAR 0 40
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: PUSH
63344: LD_VAR 0 4
63348: PUSH
63349: LD_INT 1
63351: PLUS
63352: ARRAY
63353: ST_TO_ADDR
63354: GO 63721
63356: LD_INT 6
63358: DOUBLE
63359: EQUAL
63360: IFTRUE 63412
63362: LD_INT 7
63364: DOUBLE
63365: EQUAL
63366: IFTRUE 63412
63368: LD_INT 8
63370: DOUBLE
63371: EQUAL
63372: IFTRUE 63412
63374: LD_INT 13
63376: DOUBLE
63377: EQUAL
63378: IFTRUE 63412
63380: LD_INT 12
63382: DOUBLE
63383: EQUAL
63384: IFTRUE 63412
63386: LD_INT 15
63388: DOUBLE
63389: EQUAL
63390: IFTRUE 63412
63392: LD_INT 11
63394: DOUBLE
63395: EQUAL
63396: IFTRUE 63412
63398: LD_INT 14
63400: DOUBLE
63401: EQUAL
63402: IFTRUE 63412
63404: LD_INT 10
63406: DOUBLE
63407: EQUAL
63408: IFTRUE 63412
63410: GO 63468
63412: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63413: LD_ADDR_VAR 0 9
63417: PUSH
63418: LD_VAR 0 41
63422: PUSH
63423: LD_VAR 0 42
63427: PUSH
63428: LD_VAR 0 43
63432: PUSH
63433: LD_VAR 0 44
63437: PUSH
63438: LD_VAR 0 45
63442: PUSH
63443: LD_VAR 0 46
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: PUSH
63456: LD_VAR 0 4
63460: PUSH
63461: LD_INT 1
63463: PLUS
63464: ARRAY
63465: ST_TO_ADDR
63466: GO 63721
63468: LD_INT 36
63470: DOUBLE
63471: EQUAL
63472: IFTRUE 63476
63474: GO 63532
63476: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63477: LD_ADDR_VAR 0 9
63481: PUSH
63482: LD_VAR 0 47
63486: PUSH
63487: LD_VAR 0 48
63491: PUSH
63492: LD_VAR 0 49
63496: PUSH
63497: LD_VAR 0 50
63501: PUSH
63502: LD_VAR 0 51
63506: PUSH
63507: LD_VAR 0 52
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: PUSH
63520: LD_VAR 0 4
63524: PUSH
63525: LD_INT 1
63527: PLUS
63528: ARRAY
63529: ST_TO_ADDR
63530: GO 63721
63532: LD_INT 4
63534: DOUBLE
63535: EQUAL
63536: IFTRUE 63558
63538: LD_INT 5
63540: DOUBLE
63541: EQUAL
63542: IFTRUE 63558
63544: LD_INT 34
63546: DOUBLE
63547: EQUAL
63548: IFTRUE 63558
63550: LD_INT 37
63552: DOUBLE
63553: EQUAL
63554: IFTRUE 63558
63556: GO 63614
63558: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63559: LD_ADDR_VAR 0 9
63563: PUSH
63564: LD_VAR 0 53
63568: PUSH
63569: LD_VAR 0 54
63573: PUSH
63574: LD_VAR 0 55
63578: PUSH
63579: LD_VAR 0 56
63583: PUSH
63584: LD_VAR 0 57
63588: PUSH
63589: LD_VAR 0 58
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: PUSH
63602: LD_VAR 0 4
63606: PUSH
63607: LD_INT 1
63609: PLUS
63610: ARRAY
63611: ST_TO_ADDR
63612: GO 63721
63614: LD_INT 31
63616: DOUBLE
63617: EQUAL
63618: IFTRUE 63664
63620: LD_INT 32
63622: DOUBLE
63623: EQUAL
63624: IFTRUE 63664
63626: LD_INT 33
63628: DOUBLE
63629: EQUAL
63630: IFTRUE 63664
63632: LD_INT 27
63634: DOUBLE
63635: EQUAL
63636: IFTRUE 63664
63638: LD_INT 26
63640: DOUBLE
63641: EQUAL
63642: IFTRUE 63664
63644: LD_INT 28
63646: DOUBLE
63647: EQUAL
63648: IFTRUE 63664
63650: LD_INT 29
63652: DOUBLE
63653: EQUAL
63654: IFTRUE 63664
63656: LD_INT 30
63658: DOUBLE
63659: EQUAL
63660: IFTRUE 63664
63662: GO 63720
63664: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63665: LD_ADDR_VAR 0 9
63669: PUSH
63670: LD_VAR 0 59
63674: PUSH
63675: LD_VAR 0 60
63679: PUSH
63680: LD_VAR 0 61
63684: PUSH
63685: LD_VAR 0 62
63689: PUSH
63690: LD_VAR 0 63
63694: PUSH
63695: LD_VAR 0 64
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: PUSH
63708: LD_VAR 0 4
63712: PUSH
63713: LD_INT 1
63715: PLUS
63716: ARRAY
63717: ST_TO_ADDR
63718: GO 63721
63720: POP
// temp_list2 = [ ] ;
63721: LD_ADDR_VAR 0 10
63725: PUSH
63726: EMPTY
63727: ST_TO_ADDR
// for i in temp_list do
63728: LD_ADDR_VAR 0 8
63732: PUSH
63733: LD_VAR 0 9
63737: PUSH
63738: FOR_IN
63739: IFFALSE 63791
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63741: LD_ADDR_VAR 0 10
63745: PUSH
63746: LD_VAR 0 10
63750: PUSH
63751: LD_VAR 0 8
63755: PUSH
63756: LD_INT 1
63758: ARRAY
63759: PUSH
63760: LD_VAR 0 2
63764: PLUS
63765: PUSH
63766: LD_VAR 0 8
63770: PUSH
63771: LD_INT 2
63773: ARRAY
63774: PUSH
63775: LD_VAR 0 3
63779: PLUS
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: EMPTY
63786: LIST
63787: ADD
63788: ST_TO_ADDR
63789: GO 63738
63791: POP
63792: POP
// result = temp_list2 ;
63793: LD_ADDR_VAR 0 7
63797: PUSH
63798: LD_VAR 0 10
63802: ST_TO_ADDR
// end ;
63803: LD_VAR 0 7
63807: RET
// export function EnemyInRange ( unit , dist ) ; begin
63808: LD_INT 0
63810: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63811: LD_ADDR_VAR 0 3
63815: PUSH
63816: LD_VAR 0 1
63820: PPUSH
63821: CALL_OW 255
63825: PPUSH
63826: LD_VAR 0 1
63830: PPUSH
63831: CALL_OW 250
63835: PPUSH
63836: LD_VAR 0 1
63840: PPUSH
63841: CALL_OW 251
63845: PPUSH
63846: LD_VAR 0 2
63850: PPUSH
63851: CALL 37181 0 4
63855: PUSH
63856: LD_INT 4
63858: ARRAY
63859: ST_TO_ADDR
// end ;
63860: LD_VAR 0 3
63864: RET
// export function PlayerSeeMe ( unit ) ; begin
63865: LD_INT 0
63867: PPUSH
// result := See ( your_side , unit ) ;
63868: LD_ADDR_VAR 0 2
63872: PUSH
63873: LD_OWVAR 2
63877: PPUSH
63878: LD_VAR 0 1
63882: PPUSH
63883: CALL_OW 292
63887: ST_TO_ADDR
// end ;
63888: LD_VAR 0 2
63892: RET
// export function ReverseDir ( unit ) ; begin
63893: LD_INT 0
63895: PPUSH
// if not unit then
63896: LD_VAR 0 1
63900: NOT
63901: IFFALSE 63905
// exit ;
63903: GO 63928
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63905: LD_ADDR_VAR 0 2
63909: PUSH
63910: LD_VAR 0 1
63914: PPUSH
63915: CALL_OW 254
63919: PUSH
63920: LD_INT 3
63922: PLUS
63923: PUSH
63924: LD_INT 6
63926: MOD
63927: ST_TO_ADDR
// end ;
63928: LD_VAR 0 2
63932: RET
// export function ReverseArray ( array ) ; var i ; begin
63933: LD_INT 0
63935: PPUSH
63936: PPUSH
// if not array then
63937: LD_VAR 0 1
63941: NOT
63942: IFFALSE 63946
// exit ;
63944: GO 64001
// result := [ ] ;
63946: LD_ADDR_VAR 0 2
63950: PUSH
63951: EMPTY
63952: ST_TO_ADDR
// for i := array downto 1 do
63953: LD_ADDR_VAR 0 3
63957: PUSH
63958: DOUBLE
63959: LD_VAR 0 1
63963: INC
63964: ST_TO_ADDR
63965: LD_INT 1
63967: PUSH
63968: FOR_DOWNTO
63969: IFFALSE 63999
// result := Join ( result , array [ i ] ) ;
63971: LD_ADDR_VAR 0 2
63975: PUSH
63976: LD_VAR 0 2
63980: PPUSH
63981: LD_VAR 0 1
63985: PUSH
63986: LD_VAR 0 3
63990: ARRAY
63991: PPUSH
63992: CALL 68657 0 2
63996: ST_TO_ADDR
63997: GO 63968
63999: POP
64000: POP
// end ;
64001: LD_VAR 0 2
64005: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64006: LD_INT 0
64008: PPUSH
64009: PPUSH
64010: PPUSH
64011: PPUSH
64012: PPUSH
64013: PPUSH
// if not unit or not hexes then
64014: LD_VAR 0 1
64018: NOT
64019: PUSH
64020: LD_VAR 0 2
64024: NOT
64025: OR
64026: IFFALSE 64030
// exit ;
64028: GO 64153
// dist := 9999 ;
64030: LD_ADDR_VAR 0 5
64034: PUSH
64035: LD_INT 9999
64037: ST_TO_ADDR
// for i = 1 to hexes do
64038: LD_ADDR_VAR 0 4
64042: PUSH
64043: DOUBLE
64044: LD_INT 1
64046: DEC
64047: ST_TO_ADDR
64048: LD_VAR 0 2
64052: PUSH
64053: FOR_TO
64054: IFFALSE 64141
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64056: LD_ADDR_VAR 0 6
64060: PUSH
64061: LD_VAR 0 1
64065: PPUSH
64066: LD_VAR 0 2
64070: PUSH
64071: LD_VAR 0 4
64075: ARRAY
64076: PUSH
64077: LD_INT 1
64079: ARRAY
64080: PPUSH
64081: LD_VAR 0 2
64085: PUSH
64086: LD_VAR 0 4
64090: ARRAY
64091: PUSH
64092: LD_INT 2
64094: ARRAY
64095: PPUSH
64096: CALL_OW 297
64100: ST_TO_ADDR
// if tdist < dist then
64101: LD_VAR 0 6
64105: PUSH
64106: LD_VAR 0 5
64110: LESS
64111: IFFALSE 64139
// begin hex := hexes [ i ] ;
64113: LD_ADDR_VAR 0 8
64117: PUSH
64118: LD_VAR 0 2
64122: PUSH
64123: LD_VAR 0 4
64127: ARRAY
64128: ST_TO_ADDR
// dist := tdist ;
64129: LD_ADDR_VAR 0 5
64133: PUSH
64134: LD_VAR 0 6
64138: ST_TO_ADDR
// end ; end ;
64139: GO 64053
64141: POP
64142: POP
// result := hex ;
64143: LD_ADDR_VAR 0 3
64147: PUSH
64148: LD_VAR 0 8
64152: ST_TO_ADDR
// end ;
64153: LD_VAR 0 3
64157: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64158: LD_INT 0
64160: PPUSH
64161: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64162: LD_VAR 0 1
64166: NOT
64167: PUSH
64168: LD_VAR 0 1
64172: PUSH
64173: LD_INT 21
64175: PUSH
64176: LD_INT 2
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 23
64185: PUSH
64186: LD_INT 2
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PPUSH
64197: CALL_OW 69
64201: IN
64202: NOT
64203: OR
64204: IFFALSE 64208
// exit ;
64206: GO 64255
// for i = 1 to 3 do
64208: LD_ADDR_VAR 0 3
64212: PUSH
64213: DOUBLE
64214: LD_INT 1
64216: DEC
64217: ST_TO_ADDR
64218: LD_INT 3
64220: PUSH
64221: FOR_TO
64222: IFFALSE 64253
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64224: LD_VAR 0 1
64228: PPUSH
64229: CALL_OW 250
64233: PPUSH
64234: LD_VAR 0 1
64238: PPUSH
64239: CALL_OW 251
64243: PPUSH
64244: LD_INT 1
64246: PPUSH
64247: CALL_OW 453
64251: GO 64221
64253: POP
64254: POP
// end ;
64255: LD_VAR 0 2
64259: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64260: LD_INT 0
64262: PPUSH
64263: PPUSH
64264: PPUSH
64265: PPUSH
64266: PPUSH
64267: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64268: LD_VAR 0 1
64272: NOT
64273: PUSH
64274: LD_VAR 0 2
64278: NOT
64279: OR
64280: PUSH
64281: LD_VAR 0 1
64285: PPUSH
64286: CALL_OW 314
64290: OR
64291: IFFALSE 64295
// exit ;
64293: GO 64762
// if GetLives ( i ) < 250 then
64295: LD_VAR 0 4
64299: PPUSH
64300: CALL_OW 256
64304: PUSH
64305: LD_INT 250
64307: LESS
64308: IFFALSE 64321
// begin ComAutodestruct ( i ) ;
64310: LD_VAR 0 4
64314: PPUSH
64315: CALL 64158 0 1
// exit ;
64319: GO 64762
// end ; x := GetX ( enemy_unit ) ;
64321: LD_ADDR_VAR 0 7
64325: PUSH
64326: LD_VAR 0 2
64330: PPUSH
64331: CALL_OW 250
64335: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64336: LD_ADDR_VAR 0 8
64340: PUSH
64341: LD_VAR 0 2
64345: PPUSH
64346: CALL_OW 251
64350: ST_TO_ADDR
// if not x or not y then
64351: LD_VAR 0 7
64355: NOT
64356: PUSH
64357: LD_VAR 0 8
64361: NOT
64362: OR
64363: IFFALSE 64367
// exit ;
64365: GO 64762
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64367: LD_ADDR_VAR 0 6
64371: PUSH
64372: LD_VAR 0 7
64376: PPUSH
64377: LD_INT 0
64379: PPUSH
64380: LD_INT 4
64382: PPUSH
64383: CALL_OW 272
64387: PUSH
64388: LD_VAR 0 8
64392: PPUSH
64393: LD_INT 0
64395: PPUSH
64396: LD_INT 4
64398: PPUSH
64399: CALL_OW 273
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_VAR 0 7
64412: PPUSH
64413: LD_INT 1
64415: PPUSH
64416: LD_INT 4
64418: PPUSH
64419: CALL_OW 272
64423: PUSH
64424: LD_VAR 0 8
64428: PPUSH
64429: LD_INT 1
64431: PPUSH
64432: LD_INT 4
64434: PPUSH
64435: CALL_OW 273
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_VAR 0 7
64448: PPUSH
64449: LD_INT 2
64451: PPUSH
64452: LD_INT 4
64454: PPUSH
64455: CALL_OW 272
64459: PUSH
64460: LD_VAR 0 8
64464: PPUSH
64465: LD_INT 2
64467: PPUSH
64468: LD_INT 4
64470: PPUSH
64471: CALL_OW 273
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_VAR 0 7
64484: PPUSH
64485: LD_INT 3
64487: PPUSH
64488: LD_INT 4
64490: PPUSH
64491: CALL_OW 272
64495: PUSH
64496: LD_VAR 0 8
64500: PPUSH
64501: LD_INT 3
64503: PPUSH
64504: LD_INT 4
64506: PPUSH
64507: CALL_OW 273
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_VAR 0 7
64520: PPUSH
64521: LD_INT 4
64523: PPUSH
64524: LD_INT 4
64526: PPUSH
64527: CALL_OW 272
64531: PUSH
64532: LD_VAR 0 8
64536: PPUSH
64537: LD_INT 4
64539: PPUSH
64540: LD_INT 4
64542: PPUSH
64543: CALL_OW 273
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_VAR 0 7
64556: PPUSH
64557: LD_INT 5
64559: PPUSH
64560: LD_INT 4
64562: PPUSH
64563: CALL_OW 272
64567: PUSH
64568: LD_VAR 0 8
64572: PPUSH
64573: LD_INT 5
64575: PPUSH
64576: LD_INT 4
64578: PPUSH
64579: CALL_OW 273
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: ST_TO_ADDR
// for i = tmp downto 1 do
64596: LD_ADDR_VAR 0 4
64600: PUSH
64601: DOUBLE
64602: LD_VAR 0 6
64606: INC
64607: ST_TO_ADDR
64608: LD_INT 1
64610: PUSH
64611: FOR_DOWNTO
64612: IFFALSE 64713
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64614: LD_VAR 0 6
64618: PUSH
64619: LD_VAR 0 4
64623: ARRAY
64624: PUSH
64625: LD_INT 1
64627: ARRAY
64628: PPUSH
64629: LD_VAR 0 6
64633: PUSH
64634: LD_VAR 0 4
64638: ARRAY
64639: PUSH
64640: LD_INT 2
64642: ARRAY
64643: PPUSH
64644: CALL_OW 488
64648: NOT
64649: PUSH
64650: LD_VAR 0 6
64654: PUSH
64655: LD_VAR 0 4
64659: ARRAY
64660: PUSH
64661: LD_INT 1
64663: ARRAY
64664: PPUSH
64665: LD_VAR 0 6
64669: PUSH
64670: LD_VAR 0 4
64674: ARRAY
64675: PUSH
64676: LD_INT 2
64678: ARRAY
64679: PPUSH
64680: CALL_OW 428
64684: PUSH
64685: LD_INT 0
64687: NONEQUAL
64688: OR
64689: IFFALSE 64711
// tmp := Delete ( tmp , i ) ;
64691: LD_ADDR_VAR 0 6
64695: PUSH
64696: LD_VAR 0 6
64700: PPUSH
64701: LD_VAR 0 4
64705: PPUSH
64706: CALL_OW 3
64710: ST_TO_ADDR
64711: GO 64611
64713: POP
64714: POP
// j := GetClosestHex ( unit , tmp ) ;
64715: LD_ADDR_VAR 0 5
64719: PUSH
64720: LD_VAR 0 1
64724: PPUSH
64725: LD_VAR 0 6
64729: PPUSH
64730: CALL 64006 0 2
64734: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64735: LD_VAR 0 1
64739: PPUSH
64740: LD_VAR 0 5
64744: PUSH
64745: LD_INT 1
64747: ARRAY
64748: PPUSH
64749: LD_VAR 0 5
64753: PUSH
64754: LD_INT 2
64756: ARRAY
64757: PPUSH
64758: CALL_OW 111
// end ;
64762: LD_VAR 0 3
64766: RET
// export function PrepareApemanSoldier ( ) ; begin
64767: LD_INT 0
64769: PPUSH
// uc_nation := 0 ;
64770: LD_ADDR_OWVAR 21
64774: PUSH
64775: LD_INT 0
64777: ST_TO_ADDR
// hc_sex := sex_male ;
64778: LD_ADDR_OWVAR 27
64782: PUSH
64783: LD_INT 1
64785: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64786: LD_ADDR_OWVAR 28
64790: PUSH
64791: LD_INT 15
64793: ST_TO_ADDR
// hc_gallery :=  ;
64794: LD_ADDR_OWVAR 33
64798: PUSH
64799: LD_STRING 
64801: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64802: LD_ADDR_OWVAR 31
64806: PUSH
64807: LD_INT 0
64809: PPUSH
64810: LD_INT 3
64812: PPUSH
64813: CALL_OW 12
64817: PUSH
64818: LD_INT 0
64820: PPUSH
64821: LD_INT 3
64823: PPUSH
64824: CALL_OW 12
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: ST_TO_ADDR
// end ;
64841: LD_VAR 0 1
64845: RET
// export function PrepareApemanEngineer ( ) ; begin
64846: LD_INT 0
64848: PPUSH
// uc_nation := 0 ;
64849: LD_ADDR_OWVAR 21
64853: PUSH
64854: LD_INT 0
64856: ST_TO_ADDR
// hc_sex := sex_male ;
64857: LD_ADDR_OWVAR 27
64861: PUSH
64862: LD_INT 1
64864: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64865: LD_ADDR_OWVAR 28
64869: PUSH
64870: LD_INT 16
64872: ST_TO_ADDR
// hc_gallery :=  ;
64873: LD_ADDR_OWVAR 33
64877: PUSH
64878: LD_STRING 
64880: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64881: LD_ADDR_OWVAR 31
64885: PUSH
64886: LD_INT 0
64888: PPUSH
64889: LD_INT 3
64891: PPUSH
64892: CALL_OW 12
64896: PUSH
64897: LD_INT 0
64899: PPUSH
64900: LD_INT 3
64902: PPUSH
64903: CALL_OW 12
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: ST_TO_ADDR
// end ;
64920: LD_VAR 0 1
64924: RET
// export function PrepareApeman ( agressivity ) ; begin
64925: LD_INT 0
64927: PPUSH
// uc_side := 0 ;
64928: LD_ADDR_OWVAR 20
64932: PUSH
64933: LD_INT 0
64935: ST_TO_ADDR
// uc_nation := 0 ;
64936: LD_ADDR_OWVAR 21
64940: PUSH
64941: LD_INT 0
64943: ST_TO_ADDR
// hc_sex := sex_male ;
64944: LD_ADDR_OWVAR 27
64948: PUSH
64949: LD_INT 1
64951: ST_TO_ADDR
// hc_class := class_apeman ;
64952: LD_ADDR_OWVAR 28
64956: PUSH
64957: LD_INT 12
64959: ST_TO_ADDR
// hc_gallery :=  ;
64960: LD_ADDR_OWVAR 33
64964: PUSH
64965: LD_STRING 
64967: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64968: LD_ADDR_OWVAR 35
64972: PUSH
64973: LD_VAR 0 1
64977: NEG
64978: PPUSH
64979: LD_VAR 0 1
64983: PPUSH
64984: CALL_OW 12
64988: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64989: LD_ADDR_OWVAR 31
64993: PUSH
64994: LD_INT 0
64996: PPUSH
64997: LD_INT 3
64999: PPUSH
65000: CALL_OW 12
65004: PUSH
65005: LD_INT 0
65007: PPUSH
65008: LD_INT 3
65010: PPUSH
65011: CALL_OW 12
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: ST_TO_ADDR
// end ;
65028: LD_VAR 0 2
65032: RET
// export function PrepareTiger ( agressivity ) ; begin
65033: LD_INT 0
65035: PPUSH
// uc_side := 0 ;
65036: LD_ADDR_OWVAR 20
65040: PUSH
65041: LD_INT 0
65043: ST_TO_ADDR
// uc_nation := 0 ;
65044: LD_ADDR_OWVAR 21
65048: PUSH
65049: LD_INT 0
65051: ST_TO_ADDR
// hc_class := class_tiger ;
65052: LD_ADDR_OWVAR 28
65056: PUSH
65057: LD_INT 14
65059: ST_TO_ADDR
// hc_gallery :=  ;
65060: LD_ADDR_OWVAR 33
65064: PUSH
65065: LD_STRING 
65067: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65068: LD_ADDR_OWVAR 35
65072: PUSH
65073: LD_VAR 0 1
65077: NEG
65078: PPUSH
65079: LD_VAR 0 1
65083: PPUSH
65084: CALL_OW 12
65088: ST_TO_ADDR
// end ;
65089: LD_VAR 0 2
65093: RET
// export function PrepareEnchidna ( ) ; begin
65094: LD_INT 0
65096: PPUSH
// uc_side := 0 ;
65097: LD_ADDR_OWVAR 20
65101: PUSH
65102: LD_INT 0
65104: ST_TO_ADDR
// uc_nation := 0 ;
65105: LD_ADDR_OWVAR 21
65109: PUSH
65110: LD_INT 0
65112: ST_TO_ADDR
// hc_class := class_baggie ;
65113: LD_ADDR_OWVAR 28
65117: PUSH
65118: LD_INT 13
65120: ST_TO_ADDR
// hc_gallery :=  ;
65121: LD_ADDR_OWVAR 33
65125: PUSH
65126: LD_STRING 
65128: ST_TO_ADDR
// end ;
65129: LD_VAR 0 1
65133: RET
// export function PrepareFrog ( ) ; begin
65134: LD_INT 0
65136: PPUSH
// uc_side := 0 ;
65137: LD_ADDR_OWVAR 20
65141: PUSH
65142: LD_INT 0
65144: ST_TO_ADDR
// uc_nation := 0 ;
65145: LD_ADDR_OWVAR 21
65149: PUSH
65150: LD_INT 0
65152: ST_TO_ADDR
// hc_class := class_frog ;
65153: LD_ADDR_OWVAR 28
65157: PUSH
65158: LD_INT 19
65160: ST_TO_ADDR
// hc_gallery :=  ;
65161: LD_ADDR_OWVAR 33
65165: PUSH
65166: LD_STRING 
65168: ST_TO_ADDR
// end ;
65169: LD_VAR 0 1
65173: RET
// export function PrepareFish ( ) ; begin
65174: LD_INT 0
65176: PPUSH
// uc_side := 0 ;
65177: LD_ADDR_OWVAR 20
65181: PUSH
65182: LD_INT 0
65184: ST_TO_ADDR
// uc_nation := 0 ;
65185: LD_ADDR_OWVAR 21
65189: PUSH
65190: LD_INT 0
65192: ST_TO_ADDR
// hc_class := class_fish ;
65193: LD_ADDR_OWVAR 28
65197: PUSH
65198: LD_INT 20
65200: ST_TO_ADDR
// hc_gallery :=  ;
65201: LD_ADDR_OWVAR 33
65205: PUSH
65206: LD_STRING 
65208: ST_TO_ADDR
// end ;
65209: LD_VAR 0 1
65213: RET
// export function PrepareBird ( ) ; begin
65214: LD_INT 0
65216: PPUSH
// uc_side := 0 ;
65217: LD_ADDR_OWVAR 20
65221: PUSH
65222: LD_INT 0
65224: ST_TO_ADDR
// uc_nation := 0 ;
65225: LD_ADDR_OWVAR 21
65229: PUSH
65230: LD_INT 0
65232: ST_TO_ADDR
// hc_class := class_phororhacos ;
65233: LD_ADDR_OWVAR 28
65237: PUSH
65238: LD_INT 18
65240: ST_TO_ADDR
// hc_gallery :=  ;
65241: LD_ADDR_OWVAR 33
65245: PUSH
65246: LD_STRING 
65248: ST_TO_ADDR
// end ;
65249: LD_VAR 0 1
65253: RET
// export function PrepareHorse ( ) ; begin
65254: LD_INT 0
65256: PPUSH
// uc_side := 0 ;
65257: LD_ADDR_OWVAR 20
65261: PUSH
65262: LD_INT 0
65264: ST_TO_ADDR
// uc_nation := 0 ;
65265: LD_ADDR_OWVAR 21
65269: PUSH
65270: LD_INT 0
65272: ST_TO_ADDR
// hc_class := class_horse ;
65273: LD_ADDR_OWVAR 28
65277: PUSH
65278: LD_INT 21
65280: ST_TO_ADDR
// hc_gallery :=  ;
65281: LD_ADDR_OWVAR 33
65285: PUSH
65286: LD_STRING 
65288: ST_TO_ADDR
// end ;
65289: LD_VAR 0 1
65293: RET
// export function PrepareMastodont ( ) ; begin
65294: LD_INT 0
65296: PPUSH
// uc_side := 0 ;
65297: LD_ADDR_OWVAR 20
65301: PUSH
65302: LD_INT 0
65304: ST_TO_ADDR
// uc_nation := 0 ;
65305: LD_ADDR_OWVAR 21
65309: PUSH
65310: LD_INT 0
65312: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65313: LD_ADDR_OWVAR 37
65317: PUSH
65318: LD_INT 31
65320: ST_TO_ADDR
// vc_control := control_rider ;
65321: LD_ADDR_OWVAR 38
65325: PUSH
65326: LD_INT 4
65328: ST_TO_ADDR
// end ;
65329: LD_VAR 0 1
65333: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65334: LD_INT 0
65336: PPUSH
65337: PPUSH
65338: PPUSH
// uc_side = 0 ;
65339: LD_ADDR_OWVAR 20
65343: PUSH
65344: LD_INT 0
65346: ST_TO_ADDR
// uc_nation = 0 ;
65347: LD_ADDR_OWVAR 21
65351: PUSH
65352: LD_INT 0
65354: ST_TO_ADDR
// InitHc_All ( ) ;
65355: CALL_OW 584
// InitVc ;
65359: CALL_OW 20
// if mastodonts then
65363: LD_VAR 0 6
65367: IFFALSE 65434
// for i = 1 to mastodonts do
65369: LD_ADDR_VAR 0 11
65373: PUSH
65374: DOUBLE
65375: LD_INT 1
65377: DEC
65378: ST_TO_ADDR
65379: LD_VAR 0 6
65383: PUSH
65384: FOR_TO
65385: IFFALSE 65432
// begin vc_chassis := 31 ;
65387: LD_ADDR_OWVAR 37
65391: PUSH
65392: LD_INT 31
65394: ST_TO_ADDR
// vc_control := control_rider ;
65395: LD_ADDR_OWVAR 38
65399: PUSH
65400: LD_INT 4
65402: ST_TO_ADDR
// animal := CreateVehicle ;
65403: LD_ADDR_VAR 0 12
65407: PUSH
65408: CALL_OW 45
65412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65413: LD_VAR 0 12
65417: PPUSH
65418: LD_VAR 0 8
65422: PPUSH
65423: LD_INT 0
65425: PPUSH
65426: CALL 67562 0 3
// end ;
65430: GO 65384
65432: POP
65433: POP
// if horses then
65434: LD_VAR 0 5
65438: IFFALSE 65505
// for i = 1 to horses do
65440: LD_ADDR_VAR 0 11
65444: PUSH
65445: DOUBLE
65446: LD_INT 1
65448: DEC
65449: ST_TO_ADDR
65450: LD_VAR 0 5
65454: PUSH
65455: FOR_TO
65456: IFFALSE 65503
// begin hc_class := 21 ;
65458: LD_ADDR_OWVAR 28
65462: PUSH
65463: LD_INT 21
65465: ST_TO_ADDR
// hc_gallery :=  ;
65466: LD_ADDR_OWVAR 33
65470: PUSH
65471: LD_STRING 
65473: ST_TO_ADDR
// animal := CreateHuman ;
65474: LD_ADDR_VAR 0 12
65478: PUSH
65479: CALL_OW 44
65483: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65484: LD_VAR 0 12
65488: PPUSH
65489: LD_VAR 0 8
65493: PPUSH
65494: LD_INT 0
65496: PPUSH
65497: CALL 67562 0 3
// end ;
65501: GO 65455
65503: POP
65504: POP
// if birds then
65505: LD_VAR 0 1
65509: IFFALSE 65576
// for i = 1 to birds do
65511: LD_ADDR_VAR 0 11
65515: PUSH
65516: DOUBLE
65517: LD_INT 1
65519: DEC
65520: ST_TO_ADDR
65521: LD_VAR 0 1
65525: PUSH
65526: FOR_TO
65527: IFFALSE 65574
// begin hc_class := 18 ;
65529: LD_ADDR_OWVAR 28
65533: PUSH
65534: LD_INT 18
65536: ST_TO_ADDR
// hc_gallery =  ;
65537: LD_ADDR_OWVAR 33
65541: PUSH
65542: LD_STRING 
65544: ST_TO_ADDR
// animal := CreateHuman ;
65545: LD_ADDR_VAR 0 12
65549: PUSH
65550: CALL_OW 44
65554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65555: LD_VAR 0 12
65559: PPUSH
65560: LD_VAR 0 8
65564: PPUSH
65565: LD_INT 0
65567: PPUSH
65568: CALL 67562 0 3
// end ;
65572: GO 65526
65574: POP
65575: POP
// if tigers then
65576: LD_VAR 0 2
65580: IFFALSE 65664
// for i = 1 to tigers do
65582: LD_ADDR_VAR 0 11
65586: PUSH
65587: DOUBLE
65588: LD_INT 1
65590: DEC
65591: ST_TO_ADDR
65592: LD_VAR 0 2
65596: PUSH
65597: FOR_TO
65598: IFFALSE 65662
// begin hc_class = class_tiger ;
65600: LD_ADDR_OWVAR 28
65604: PUSH
65605: LD_INT 14
65607: ST_TO_ADDR
// hc_gallery =  ;
65608: LD_ADDR_OWVAR 33
65612: PUSH
65613: LD_STRING 
65615: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65616: LD_ADDR_OWVAR 35
65620: PUSH
65621: LD_INT 7
65623: NEG
65624: PPUSH
65625: LD_INT 7
65627: PPUSH
65628: CALL_OW 12
65632: ST_TO_ADDR
// animal := CreateHuman ;
65633: LD_ADDR_VAR 0 12
65637: PUSH
65638: CALL_OW 44
65642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65643: LD_VAR 0 12
65647: PPUSH
65648: LD_VAR 0 8
65652: PPUSH
65653: LD_INT 0
65655: PPUSH
65656: CALL 67562 0 3
// end ;
65660: GO 65597
65662: POP
65663: POP
// if apemans then
65664: LD_VAR 0 3
65668: IFFALSE 65791
// for i = 1 to apemans do
65670: LD_ADDR_VAR 0 11
65674: PUSH
65675: DOUBLE
65676: LD_INT 1
65678: DEC
65679: ST_TO_ADDR
65680: LD_VAR 0 3
65684: PUSH
65685: FOR_TO
65686: IFFALSE 65789
// begin hc_class = class_apeman ;
65688: LD_ADDR_OWVAR 28
65692: PUSH
65693: LD_INT 12
65695: ST_TO_ADDR
// hc_gallery =  ;
65696: LD_ADDR_OWVAR 33
65700: PUSH
65701: LD_STRING 
65703: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65704: LD_ADDR_OWVAR 35
65708: PUSH
65709: LD_INT 2
65711: NEG
65712: PPUSH
65713: LD_INT 2
65715: PPUSH
65716: CALL_OW 12
65720: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65721: LD_ADDR_OWVAR 31
65725: PUSH
65726: LD_INT 1
65728: PPUSH
65729: LD_INT 3
65731: PPUSH
65732: CALL_OW 12
65736: PUSH
65737: LD_INT 1
65739: PPUSH
65740: LD_INT 3
65742: PPUSH
65743: CALL_OW 12
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: ST_TO_ADDR
// animal := CreateHuman ;
65760: LD_ADDR_VAR 0 12
65764: PUSH
65765: CALL_OW 44
65769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65770: LD_VAR 0 12
65774: PPUSH
65775: LD_VAR 0 8
65779: PPUSH
65780: LD_INT 0
65782: PPUSH
65783: CALL 67562 0 3
// end ;
65787: GO 65685
65789: POP
65790: POP
// if enchidnas then
65791: LD_VAR 0 4
65795: IFFALSE 65862
// for i = 1 to enchidnas do
65797: LD_ADDR_VAR 0 11
65801: PUSH
65802: DOUBLE
65803: LD_INT 1
65805: DEC
65806: ST_TO_ADDR
65807: LD_VAR 0 4
65811: PUSH
65812: FOR_TO
65813: IFFALSE 65860
// begin hc_class = 13 ;
65815: LD_ADDR_OWVAR 28
65819: PUSH
65820: LD_INT 13
65822: ST_TO_ADDR
// hc_gallery =  ;
65823: LD_ADDR_OWVAR 33
65827: PUSH
65828: LD_STRING 
65830: ST_TO_ADDR
// animal := CreateHuman ;
65831: LD_ADDR_VAR 0 12
65835: PUSH
65836: CALL_OW 44
65840: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65841: LD_VAR 0 12
65845: PPUSH
65846: LD_VAR 0 8
65850: PPUSH
65851: LD_INT 0
65853: PPUSH
65854: CALL 67562 0 3
// end ;
65858: GO 65812
65860: POP
65861: POP
// if fishes then
65862: LD_VAR 0 7
65866: IFFALSE 65933
// for i = 1 to fishes do
65868: LD_ADDR_VAR 0 11
65872: PUSH
65873: DOUBLE
65874: LD_INT 1
65876: DEC
65877: ST_TO_ADDR
65878: LD_VAR 0 7
65882: PUSH
65883: FOR_TO
65884: IFFALSE 65931
// begin hc_class = 20 ;
65886: LD_ADDR_OWVAR 28
65890: PUSH
65891: LD_INT 20
65893: ST_TO_ADDR
// hc_gallery =  ;
65894: LD_ADDR_OWVAR 33
65898: PUSH
65899: LD_STRING 
65901: ST_TO_ADDR
// animal := CreateHuman ;
65902: LD_ADDR_VAR 0 12
65906: PUSH
65907: CALL_OW 44
65911: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65912: LD_VAR 0 12
65916: PPUSH
65917: LD_VAR 0 9
65921: PPUSH
65922: LD_INT 0
65924: PPUSH
65925: CALL 67562 0 3
// end ;
65929: GO 65883
65931: POP
65932: POP
// end ;
65933: LD_VAR 0 10
65937: RET
// export function WantHeal ( sci , unit ) ; begin
65938: LD_INT 0
65940: PPUSH
// if GetTaskList ( sci ) > 0 then
65941: LD_VAR 0 1
65945: PPUSH
65946: CALL_OW 437
65950: PUSH
65951: LD_INT 0
65953: GREATER
65954: IFFALSE 66024
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65956: LD_VAR 0 1
65960: PPUSH
65961: CALL_OW 437
65965: PUSH
65966: LD_INT 1
65968: ARRAY
65969: PUSH
65970: LD_INT 1
65972: ARRAY
65973: PUSH
65974: LD_STRING l
65976: EQUAL
65977: PUSH
65978: LD_VAR 0 1
65982: PPUSH
65983: CALL_OW 437
65987: PUSH
65988: LD_INT 1
65990: ARRAY
65991: PUSH
65992: LD_INT 4
65994: ARRAY
65995: PUSH
65996: LD_VAR 0 2
66000: EQUAL
66001: AND
66002: IFFALSE 66014
// result := true else
66004: LD_ADDR_VAR 0 3
66008: PUSH
66009: LD_INT 1
66011: ST_TO_ADDR
66012: GO 66022
// result := false ;
66014: LD_ADDR_VAR 0 3
66018: PUSH
66019: LD_INT 0
66021: ST_TO_ADDR
// end else
66022: GO 66032
// result := false ;
66024: LD_ADDR_VAR 0 3
66028: PUSH
66029: LD_INT 0
66031: ST_TO_ADDR
// end ;
66032: LD_VAR 0 3
66036: RET
// export function HealTarget ( sci ) ; begin
66037: LD_INT 0
66039: PPUSH
// if not sci then
66040: LD_VAR 0 1
66044: NOT
66045: IFFALSE 66049
// exit ;
66047: GO 66114
// result := 0 ;
66049: LD_ADDR_VAR 0 2
66053: PUSH
66054: LD_INT 0
66056: ST_TO_ADDR
// if GetTaskList ( sci ) then
66057: LD_VAR 0 1
66061: PPUSH
66062: CALL_OW 437
66066: IFFALSE 66114
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66068: LD_VAR 0 1
66072: PPUSH
66073: CALL_OW 437
66077: PUSH
66078: LD_INT 1
66080: ARRAY
66081: PUSH
66082: LD_INT 1
66084: ARRAY
66085: PUSH
66086: LD_STRING l
66088: EQUAL
66089: IFFALSE 66114
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66091: LD_ADDR_VAR 0 2
66095: PUSH
66096: LD_VAR 0 1
66100: PPUSH
66101: CALL_OW 437
66105: PUSH
66106: LD_INT 1
66108: ARRAY
66109: PUSH
66110: LD_INT 4
66112: ARRAY
66113: ST_TO_ADDR
// end ;
66114: LD_VAR 0 2
66118: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66119: LD_INT 0
66121: PPUSH
66122: PPUSH
66123: PPUSH
66124: PPUSH
// if not base_units then
66125: LD_VAR 0 1
66129: NOT
66130: IFFALSE 66134
// exit ;
66132: GO 66221
// result := false ;
66134: LD_ADDR_VAR 0 2
66138: PUSH
66139: LD_INT 0
66141: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66142: LD_ADDR_VAR 0 5
66146: PUSH
66147: LD_VAR 0 1
66151: PPUSH
66152: LD_INT 21
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PPUSH
66162: CALL_OW 72
66166: ST_TO_ADDR
// if not tmp then
66167: LD_VAR 0 5
66171: NOT
66172: IFFALSE 66176
// exit ;
66174: GO 66221
// for i in tmp do
66176: LD_ADDR_VAR 0 3
66180: PUSH
66181: LD_VAR 0 5
66185: PUSH
66186: FOR_IN
66187: IFFALSE 66219
// begin result := EnemyInRange ( i , 22 ) ;
66189: LD_ADDR_VAR 0 2
66193: PUSH
66194: LD_VAR 0 3
66198: PPUSH
66199: LD_INT 22
66201: PPUSH
66202: CALL 63808 0 2
66206: ST_TO_ADDR
// if result then
66207: LD_VAR 0 2
66211: IFFALSE 66217
// exit ;
66213: POP
66214: POP
66215: GO 66221
// end ;
66217: GO 66186
66219: POP
66220: POP
// end ;
66221: LD_VAR 0 2
66225: RET
// export function FilterByTag ( units , tag ) ; begin
66226: LD_INT 0
66228: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66229: LD_ADDR_VAR 0 3
66233: PUSH
66234: LD_VAR 0 1
66238: PPUSH
66239: LD_INT 120
66241: PUSH
66242: LD_VAR 0 2
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PPUSH
66251: CALL_OW 72
66255: ST_TO_ADDR
// end ;
66256: LD_VAR 0 3
66260: RET
// export function IsDriver ( un ) ; begin
66261: LD_INT 0
66263: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66264: LD_ADDR_VAR 0 2
66268: PUSH
66269: LD_VAR 0 1
66273: PUSH
66274: LD_INT 55
66276: PUSH
66277: EMPTY
66278: LIST
66279: PPUSH
66280: CALL_OW 69
66284: IN
66285: ST_TO_ADDR
// end ;
66286: LD_VAR 0 2
66290: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66291: LD_INT 0
66293: PPUSH
66294: PPUSH
// list := [ ] ;
66295: LD_ADDR_VAR 0 5
66299: PUSH
66300: EMPTY
66301: ST_TO_ADDR
// case d of 0 :
66302: LD_VAR 0 3
66306: PUSH
66307: LD_INT 0
66309: DOUBLE
66310: EQUAL
66311: IFTRUE 66315
66313: GO 66448
66315: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66316: LD_ADDR_VAR 0 5
66320: PUSH
66321: LD_VAR 0 1
66325: PUSH
66326: LD_INT 4
66328: MINUS
66329: PUSH
66330: LD_VAR 0 2
66334: PUSH
66335: LD_INT 4
66337: MINUS
66338: PUSH
66339: LD_INT 2
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: PUSH
66347: LD_VAR 0 1
66351: PUSH
66352: LD_INT 3
66354: MINUS
66355: PUSH
66356: LD_VAR 0 2
66360: PUSH
66361: LD_INT 1
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: PUSH
66369: LD_VAR 0 1
66373: PUSH
66374: LD_INT 4
66376: PLUS
66377: PUSH
66378: LD_VAR 0 2
66382: PUSH
66383: LD_INT 4
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: LIST
66390: PUSH
66391: LD_VAR 0 1
66395: PUSH
66396: LD_INT 3
66398: PLUS
66399: PUSH
66400: LD_VAR 0 2
66404: PUSH
66405: LD_INT 3
66407: PLUS
66408: PUSH
66409: LD_INT 5
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: PUSH
66417: LD_VAR 0 1
66421: PUSH
66422: LD_VAR 0 2
66426: PUSH
66427: LD_INT 4
66429: PLUS
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: ST_TO_ADDR
// end ; 1 :
66446: GO 67146
66448: LD_INT 1
66450: DOUBLE
66451: EQUAL
66452: IFTRUE 66456
66454: GO 66589
66456: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66457: LD_ADDR_VAR 0 5
66461: PUSH
66462: LD_VAR 0 1
66466: PUSH
66467: LD_VAR 0 2
66471: PUSH
66472: LD_INT 4
66474: MINUS
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: PUSH
66484: LD_VAR 0 1
66488: PUSH
66489: LD_INT 3
66491: MINUS
66492: PUSH
66493: LD_VAR 0 2
66497: PUSH
66498: LD_INT 3
66500: MINUS
66501: PUSH
66502: LD_INT 2
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: PUSH
66510: LD_VAR 0 1
66514: PUSH
66515: LD_INT 4
66517: MINUS
66518: PUSH
66519: LD_VAR 0 2
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 1
66536: PUSH
66537: LD_VAR 0 2
66541: PUSH
66542: LD_INT 3
66544: PLUS
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: LIST
66553: PUSH
66554: LD_VAR 0 1
66558: PUSH
66559: LD_INT 4
66561: PLUS
66562: PUSH
66563: LD_VAR 0 2
66567: PUSH
66568: LD_INT 4
66570: PLUS
66571: PUSH
66572: LD_INT 5
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: LIST
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: ST_TO_ADDR
// end ; 2 :
66587: GO 67146
66589: LD_INT 2
66591: DOUBLE
66592: EQUAL
66593: IFTRUE 66597
66595: GO 66726
66597: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66598: LD_ADDR_VAR 0 5
66602: PUSH
66603: LD_VAR 0 1
66607: PUSH
66608: LD_VAR 0 2
66612: PUSH
66613: LD_INT 3
66615: MINUS
66616: PUSH
66617: LD_INT 3
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: LIST
66624: PUSH
66625: LD_VAR 0 1
66629: PUSH
66630: LD_INT 4
66632: PLUS
66633: PUSH
66634: LD_VAR 0 2
66638: PUSH
66639: LD_INT 4
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: PUSH
66647: LD_VAR 0 1
66651: PUSH
66652: LD_VAR 0 2
66656: PUSH
66657: LD_INT 4
66659: PLUS
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: PUSH
66669: LD_VAR 0 1
66673: PUSH
66674: LD_INT 3
66676: MINUS
66677: PUSH
66678: LD_VAR 0 2
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: PUSH
66691: LD_VAR 0 1
66695: PUSH
66696: LD_INT 4
66698: MINUS
66699: PUSH
66700: LD_VAR 0 2
66704: PUSH
66705: LD_INT 4
66707: MINUS
66708: PUSH
66709: LD_INT 2
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: ST_TO_ADDR
// end ; 3 :
66724: GO 67146
66726: LD_INT 3
66728: DOUBLE
66729: EQUAL
66730: IFTRUE 66734
66732: GO 66867
66734: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66735: LD_ADDR_VAR 0 5
66739: PUSH
66740: LD_VAR 0 1
66744: PUSH
66745: LD_INT 3
66747: PLUS
66748: PUSH
66749: LD_VAR 0 2
66753: PUSH
66754: LD_INT 4
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: LIST
66761: PUSH
66762: LD_VAR 0 1
66766: PUSH
66767: LD_INT 4
66769: PLUS
66770: PUSH
66771: LD_VAR 0 2
66775: PUSH
66776: LD_INT 4
66778: PLUS
66779: PUSH
66780: LD_INT 5
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: PUSH
66788: LD_VAR 0 1
66792: PUSH
66793: LD_INT 4
66795: MINUS
66796: PUSH
66797: LD_VAR 0 2
66801: PUSH
66802: LD_INT 1
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: LIST
66809: PUSH
66810: LD_VAR 0 1
66814: PUSH
66815: LD_VAR 0 2
66819: PUSH
66820: LD_INT 4
66822: MINUS
66823: PUSH
66824: LD_INT 3
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: LIST
66831: PUSH
66832: LD_VAR 0 1
66836: PUSH
66837: LD_INT 3
66839: MINUS
66840: PUSH
66841: LD_VAR 0 2
66845: PUSH
66846: LD_INT 3
66848: MINUS
66849: PUSH
66850: LD_INT 2
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: LIST
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: ST_TO_ADDR
// end ; 4 :
66865: GO 67146
66867: LD_INT 4
66869: DOUBLE
66870: EQUAL
66871: IFTRUE 66875
66873: GO 67008
66875: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66876: LD_ADDR_VAR 0 5
66880: PUSH
66881: LD_VAR 0 1
66885: PUSH
66886: LD_VAR 0 2
66890: PUSH
66891: LD_INT 4
66893: PLUS
66894: PUSH
66895: LD_INT 0
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: PUSH
66903: LD_VAR 0 1
66907: PUSH
66908: LD_INT 3
66910: PLUS
66911: PUSH
66912: LD_VAR 0 2
66916: PUSH
66917: LD_INT 3
66919: PLUS
66920: PUSH
66921: LD_INT 5
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: LIST
66928: PUSH
66929: LD_VAR 0 1
66933: PUSH
66934: LD_INT 4
66936: PLUS
66937: PUSH
66938: LD_VAR 0 2
66942: PUSH
66943: LD_INT 4
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: PUSH
66951: LD_VAR 0 1
66955: PUSH
66956: LD_VAR 0 2
66960: PUSH
66961: LD_INT 3
66963: MINUS
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: LIST
66972: PUSH
66973: LD_VAR 0 1
66977: PUSH
66978: LD_INT 4
66980: MINUS
66981: PUSH
66982: LD_VAR 0 2
66986: PUSH
66987: LD_INT 4
66989: MINUS
66990: PUSH
66991: LD_INT 2
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: ST_TO_ADDR
// end ; 5 :
67006: GO 67146
67008: LD_INT 5
67010: DOUBLE
67011: EQUAL
67012: IFTRUE 67016
67014: GO 67145
67016: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67017: LD_ADDR_VAR 0 5
67021: PUSH
67022: LD_VAR 0 1
67026: PUSH
67027: LD_INT 4
67029: MINUS
67030: PUSH
67031: LD_VAR 0 2
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: LIST
67043: PUSH
67044: LD_VAR 0 1
67048: PUSH
67049: LD_VAR 0 2
67053: PUSH
67054: LD_INT 4
67056: MINUS
67057: PUSH
67058: LD_INT 3
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: LIST
67065: PUSH
67066: LD_VAR 0 1
67070: PUSH
67071: LD_INT 4
67073: PLUS
67074: PUSH
67075: LD_VAR 0 2
67079: PUSH
67080: LD_INT 4
67082: PLUS
67083: PUSH
67084: LD_INT 5
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: LIST
67091: PUSH
67092: LD_VAR 0 1
67096: PUSH
67097: LD_INT 3
67099: PLUS
67100: PUSH
67101: LD_VAR 0 2
67105: PUSH
67106: LD_INT 4
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: LIST
67113: PUSH
67114: LD_VAR 0 1
67118: PUSH
67119: LD_VAR 0 2
67123: PUSH
67124: LD_INT 3
67126: PLUS
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: LIST
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: ST_TO_ADDR
// end ; end ;
67143: GO 67146
67145: POP
// result := list ;
67146: LD_ADDR_VAR 0 4
67150: PUSH
67151: LD_VAR 0 5
67155: ST_TO_ADDR
// end ;
67156: LD_VAR 0 4
67160: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67161: LD_INT 0
67163: PPUSH
67164: PPUSH
67165: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67166: LD_VAR 0 1
67170: NOT
67171: PUSH
67172: LD_VAR 0 2
67176: PUSH
67177: LD_INT 1
67179: PUSH
67180: LD_INT 2
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: LD_INT 4
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: IN
67195: NOT
67196: OR
67197: IFFALSE 67201
// exit ;
67199: GO 67284
// tmp := [ ] ;
67201: LD_ADDR_VAR 0 5
67205: PUSH
67206: EMPTY
67207: ST_TO_ADDR
// for i in units do
67208: LD_ADDR_VAR 0 4
67212: PUSH
67213: LD_VAR 0 1
67217: PUSH
67218: FOR_IN
67219: IFFALSE 67253
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67221: LD_ADDR_VAR 0 5
67225: PUSH
67226: LD_VAR 0 5
67230: PPUSH
67231: LD_VAR 0 4
67235: PPUSH
67236: LD_VAR 0 2
67240: PPUSH
67241: CALL_OW 259
67245: PPUSH
67246: CALL 68657 0 2
67250: ST_TO_ADDR
67251: GO 67218
67253: POP
67254: POP
// if not tmp then
67255: LD_VAR 0 5
67259: NOT
67260: IFFALSE 67264
// exit ;
67262: GO 67284
// result := SortListByListDesc ( units , tmp ) ;
67264: LD_ADDR_VAR 0 3
67268: PUSH
67269: LD_VAR 0 1
67273: PPUSH
67274: LD_VAR 0 5
67278: PPUSH
67279: CALL_OW 77
67283: ST_TO_ADDR
// end ;
67284: LD_VAR 0 3
67288: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67289: LD_INT 0
67291: PPUSH
67292: PPUSH
67293: PPUSH
// result := false ;
67294: LD_ADDR_VAR 0 3
67298: PUSH
67299: LD_INT 0
67301: ST_TO_ADDR
// if not building then
67302: LD_VAR 0 2
67306: NOT
67307: IFFALSE 67311
// exit ;
67309: GO 67449
// x := GetX ( building ) ;
67311: LD_ADDR_VAR 0 4
67315: PUSH
67316: LD_VAR 0 2
67320: PPUSH
67321: CALL_OW 250
67325: ST_TO_ADDR
// y := GetY ( building ) ;
67326: LD_ADDR_VAR 0 5
67330: PUSH
67331: LD_VAR 0 2
67335: PPUSH
67336: CALL_OW 251
67340: ST_TO_ADDR
// if not x or not y then
67341: LD_VAR 0 4
67345: NOT
67346: PUSH
67347: LD_VAR 0 5
67351: NOT
67352: OR
67353: IFFALSE 67357
// exit ;
67355: GO 67449
// if GetTaskList ( unit ) then
67357: LD_VAR 0 1
67361: PPUSH
67362: CALL_OW 437
67366: IFFALSE 67449
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67368: LD_STRING e
67370: PUSH
67371: LD_VAR 0 1
67375: PPUSH
67376: CALL_OW 437
67380: PUSH
67381: LD_INT 1
67383: ARRAY
67384: PUSH
67385: LD_INT 1
67387: ARRAY
67388: EQUAL
67389: PUSH
67390: LD_VAR 0 4
67394: PUSH
67395: LD_VAR 0 1
67399: PPUSH
67400: CALL_OW 437
67404: PUSH
67405: LD_INT 1
67407: ARRAY
67408: PUSH
67409: LD_INT 2
67411: ARRAY
67412: EQUAL
67413: AND
67414: PUSH
67415: LD_VAR 0 5
67419: PUSH
67420: LD_VAR 0 1
67424: PPUSH
67425: CALL_OW 437
67429: PUSH
67430: LD_INT 1
67432: ARRAY
67433: PUSH
67434: LD_INT 3
67436: ARRAY
67437: EQUAL
67438: AND
67439: IFFALSE 67449
// result := true end ;
67441: LD_ADDR_VAR 0 3
67445: PUSH
67446: LD_INT 1
67448: ST_TO_ADDR
// end ;
67449: LD_VAR 0 3
67453: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67454: LD_INT 0
67456: PPUSH
// result := false ;
67457: LD_ADDR_VAR 0 4
67461: PUSH
67462: LD_INT 0
67464: ST_TO_ADDR
// if GetTaskList ( unit ) then
67465: LD_VAR 0 1
67469: PPUSH
67470: CALL_OW 437
67474: IFFALSE 67557
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67476: LD_STRING M
67478: PUSH
67479: LD_VAR 0 1
67483: PPUSH
67484: CALL_OW 437
67488: PUSH
67489: LD_INT 1
67491: ARRAY
67492: PUSH
67493: LD_INT 1
67495: ARRAY
67496: EQUAL
67497: PUSH
67498: LD_VAR 0 2
67502: PUSH
67503: LD_VAR 0 1
67507: PPUSH
67508: CALL_OW 437
67512: PUSH
67513: LD_INT 1
67515: ARRAY
67516: PUSH
67517: LD_INT 2
67519: ARRAY
67520: EQUAL
67521: AND
67522: PUSH
67523: LD_VAR 0 3
67527: PUSH
67528: LD_VAR 0 1
67532: PPUSH
67533: CALL_OW 437
67537: PUSH
67538: LD_INT 1
67540: ARRAY
67541: PUSH
67542: LD_INT 3
67544: ARRAY
67545: EQUAL
67546: AND
67547: IFFALSE 67557
// result := true ;
67549: LD_ADDR_VAR 0 4
67553: PUSH
67554: LD_INT 1
67556: ST_TO_ADDR
// end ; end ;
67557: LD_VAR 0 4
67561: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67562: LD_INT 0
67564: PPUSH
67565: PPUSH
67566: PPUSH
67567: PPUSH
// if not unit or not area then
67568: LD_VAR 0 1
67572: NOT
67573: PUSH
67574: LD_VAR 0 2
67578: NOT
67579: OR
67580: IFFALSE 67584
// exit ;
67582: GO 67760
// tmp := AreaToList ( area , i ) ;
67584: LD_ADDR_VAR 0 6
67588: PUSH
67589: LD_VAR 0 2
67593: PPUSH
67594: LD_VAR 0 5
67598: PPUSH
67599: CALL_OW 517
67603: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67604: LD_ADDR_VAR 0 5
67608: PUSH
67609: DOUBLE
67610: LD_INT 1
67612: DEC
67613: ST_TO_ADDR
67614: LD_VAR 0 6
67618: PUSH
67619: LD_INT 1
67621: ARRAY
67622: PUSH
67623: FOR_TO
67624: IFFALSE 67758
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67626: LD_ADDR_VAR 0 7
67630: PUSH
67631: LD_VAR 0 6
67635: PUSH
67636: LD_INT 1
67638: ARRAY
67639: PUSH
67640: LD_VAR 0 5
67644: ARRAY
67645: PUSH
67646: LD_VAR 0 6
67650: PUSH
67651: LD_INT 2
67653: ARRAY
67654: PUSH
67655: LD_VAR 0 5
67659: ARRAY
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67665: LD_INT 92
67667: PUSH
67668: LD_VAR 0 7
67672: PUSH
67673: LD_INT 1
67675: ARRAY
67676: PUSH
67677: LD_VAR 0 7
67681: PUSH
67682: LD_INT 2
67684: ARRAY
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: PPUSH
67695: CALL_OW 69
67699: PUSH
67700: LD_INT 0
67702: EQUAL
67703: IFFALSE 67756
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67705: LD_VAR 0 1
67709: PPUSH
67710: LD_VAR 0 7
67714: PUSH
67715: LD_INT 1
67717: ARRAY
67718: PPUSH
67719: LD_VAR 0 7
67723: PUSH
67724: LD_INT 2
67726: ARRAY
67727: PPUSH
67728: LD_VAR 0 3
67732: PPUSH
67733: CALL_OW 48
// result := IsPlaced ( unit ) ;
67737: LD_ADDR_VAR 0 4
67741: PUSH
67742: LD_VAR 0 1
67746: PPUSH
67747: CALL_OW 305
67751: ST_TO_ADDR
// exit ;
67752: POP
67753: POP
67754: GO 67760
// end ; end ;
67756: GO 67623
67758: POP
67759: POP
// end ;
67760: LD_VAR 0 4
67764: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67765: LD_INT 0
67767: PPUSH
67768: PPUSH
67769: PPUSH
// if not side or side > 8 then
67770: LD_VAR 0 1
67774: NOT
67775: PUSH
67776: LD_VAR 0 1
67780: PUSH
67781: LD_INT 8
67783: GREATER
67784: OR
67785: IFFALSE 67789
// exit ;
67787: GO 67976
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67789: LD_ADDR_VAR 0 4
67793: PUSH
67794: LD_INT 22
67796: PUSH
67797: LD_VAR 0 1
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 21
67808: PUSH
67809: LD_INT 3
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PPUSH
67820: CALL_OW 69
67824: ST_TO_ADDR
// if not tmp then
67825: LD_VAR 0 4
67829: NOT
67830: IFFALSE 67834
// exit ;
67832: GO 67976
// enable_addtolog := true ;
67834: LD_ADDR_OWVAR 81
67838: PUSH
67839: LD_INT 1
67841: ST_TO_ADDR
// AddToLog ( [ ) ;
67842: LD_STRING [
67844: PPUSH
67845: CALL_OW 561
// for i in tmp do
67849: LD_ADDR_VAR 0 3
67853: PUSH
67854: LD_VAR 0 4
67858: PUSH
67859: FOR_IN
67860: IFFALSE 67967
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67862: LD_STRING [
67864: PUSH
67865: LD_VAR 0 3
67869: PPUSH
67870: CALL_OW 266
67874: STR
67875: PUSH
67876: LD_STRING , 
67878: STR
67879: PUSH
67880: LD_VAR 0 3
67884: PPUSH
67885: CALL_OW 250
67889: STR
67890: PUSH
67891: LD_STRING , 
67893: STR
67894: PUSH
67895: LD_VAR 0 3
67899: PPUSH
67900: CALL_OW 251
67904: STR
67905: PUSH
67906: LD_STRING , 
67908: STR
67909: PUSH
67910: LD_VAR 0 3
67914: PPUSH
67915: CALL_OW 254
67919: STR
67920: PUSH
67921: LD_STRING , 
67923: STR
67924: PUSH
67925: LD_VAR 0 3
67929: PPUSH
67930: LD_INT 1
67932: PPUSH
67933: CALL_OW 268
67937: STR
67938: PUSH
67939: LD_STRING , 
67941: STR
67942: PUSH
67943: LD_VAR 0 3
67947: PPUSH
67948: LD_INT 2
67950: PPUSH
67951: CALL_OW 268
67955: STR
67956: PUSH
67957: LD_STRING ],
67959: STR
67960: PPUSH
67961: CALL_OW 561
// end ;
67965: GO 67859
67967: POP
67968: POP
// AddToLog ( ]; ) ;
67969: LD_STRING ];
67971: PPUSH
67972: CALL_OW 561
// end ;
67976: LD_VAR 0 2
67980: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67981: LD_INT 0
67983: PPUSH
67984: PPUSH
67985: PPUSH
67986: PPUSH
67987: PPUSH
// if not area or not rate or not max then
67988: LD_VAR 0 1
67992: NOT
67993: PUSH
67994: LD_VAR 0 2
67998: NOT
67999: OR
68000: PUSH
68001: LD_VAR 0 4
68005: NOT
68006: OR
68007: IFFALSE 68011
// exit ;
68009: GO 68200
// while 1 do
68011: LD_INT 1
68013: IFFALSE 68200
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68015: LD_ADDR_VAR 0 9
68019: PUSH
68020: LD_VAR 0 1
68024: PPUSH
68025: LD_INT 1
68027: PPUSH
68028: CALL_OW 287
68032: PUSH
68033: LD_INT 10
68035: MUL
68036: ST_TO_ADDR
// r := rate / 10 ;
68037: LD_ADDR_VAR 0 7
68041: PUSH
68042: LD_VAR 0 2
68046: PUSH
68047: LD_INT 10
68049: DIVREAL
68050: ST_TO_ADDR
// time := 1 1$00 ;
68051: LD_ADDR_VAR 0 8
68055: PUSH
68056: LD_INT 2100
68058: ST_TO_ADDR
// if amount < min then
68059: LD_VAR 0 9
68063: PUSH
68064: LD_VAR 0 3
68068: LESS
68069: IFFALSE 68087
// r := r * 2 else
68071: LD_ADDR_VAR 0 7
68075: PUSH
68076: LD_VAR 0 7
68080: PUSH
68081: LD_INT 2
68083: MUL
68084: ST_TO_ADDR
68085: GO 68113
// if amount > max then
68087: LD_VAR 0 9
68091: PUSH
68092: LD_VAR 0 4
68096: GREATER
68097: IFFALSE 68113
// r := r / 2 ;
68099: LD_ADDR_VAR 0 7
68103: PUSH
68104: LD_VAR 0 7
68108: PUSH
68109: LD_INT 2
68111: DIVREAL
68112: ST_TO_ADDR
// time := time / r ;
68113: LD_ADDR_VAR 0 8
68117: PUSH
68118: LD_VAR 0 8
68122: PUSH
68123: LD_VAR 0 7
68127: DIVREAL
68128: ST_TO_ADDR
// if time < 0 then
68129: LD_VAR 0 8
68133: PUSH
68134: LD_INT 0
68136: LESS
68137: IFFALSE 68154
// time := time * - 1 ;
68139: LD_ADDR_VAR 0 8
68143: PUSH
68144: LD_VAR 0 8
68148: PUSH
68149: LD_INT 1
68151: NEG
68152: MUL
68153: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68154: LD_VAR 0 8
68158: PUSH
68159: LD_INT 35
68161: PPUSH
68162: LD_INT 875
68164: PPUSH
68165: CALL_OW 12
68169: PLUS
68170: PPUSH
68171: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68175: LD_INT 1
68177: PPUSH
68178: LD_INT 5
68180: PPUSH
68181: CALL_OW 12
68185: PPUSH
68186: LD_VAR 0 1
68190: PPUSH
68191: LD_INT 1
68193: PPUSH
68194: CALL_OW 55
// end ;
68198: GO 68011
// end ;
68200: LD_VAR 0 5
68204: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68205: LD_INT 0
68207: PPUSH
68208: PPUSH
68209: PPUSH
68210: PPUSH
68211: PPUSH
68212: PPUSH
68213: PPUSH
68214: PPUSH
// if not turrets or not factories then
68215: LD_VAR 0 1
68219: NOT
68220: PUSH
68221: LD_VAR 0 2
68225: NOT
68226: OR
68227: IFFALSE 68231
// exit ;
68229: GO 68538
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68231: LD_ADDR_VAR 0 10
68235: PUSH
68236: LD_INT 5
68238: PUSH
68239: LD_INT 6
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 2
68248: PUSH
68249: LD_INT 4
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 3
68258: PUSH
68259: LD_INT 5
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 24
68273: PUSH
68274: LD_INT 25
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 23
68283: PUSH
68284: LD_INT 27
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 42
68297: PUSH
68298: LD_INT 43
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 44
68307: PUSH
68308: LD_INT 46
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 45
68317: PUSH
68318: LD_INT 47
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: LIST
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: LIST
68334: ST_TO_ADDR
// result := [ ] ;
68335: LD_ADDR_VAR 0 3
68339: PUSH
68340: EMPTY
68341: ST_TO_ADDR
// for i in turrets do
68342: LD_ADDR_VAR 0 4
68346: PUSH
68347: LD_VAR 0 1
68351: PUSH
68352: FOR_IN
68353: IFFALSE 68536
// begin nat := GetNation ( i ) ;
68355: LD_ADDR_VAR 0 7
68359: PUSH
68360: LD_VAR 0 4
68364: PPUSH
68365: CALL_OW 248
68369: ST_TO_ADDR
// weapon := 0 ;
68370: LD_ADDR_VAR 0 8
68374: PUSH
68375: LD_INT 0
68377: ST_TO_ADDR
// if not nat then
68378: LD_VAR 0 7
68382: NOT
68383: IFFALSE 68387
// continue ;
68385: GO 68352
// for j in list [ nat ] do
68387: LD_ADDR_VAR 0 5
68391: PUSH
68392: LD_VAR 0 10
68396: PUSH
68397: LD_VAR 0 7
68401: ARRAY
68402: PUSH
68403: FOR_IN
68404: IFFALSE 68445
// if GetBWeapon ( i ) = j [ 1 ] then
68406: LD_VAR 0 4
68410: PPUSH
68411: CALL_OW 269
68415: PUSH
68416: LD_VAR 0 5
68420: PUSH
68421: LD_INT 1
68423: ARRAY
68424: EQUAL
68425: IFFALSE 68443
// begin weapon := j [ 2 ] ;
68427: LD_ADDR_VAR 0 8
68431: PUSH
68432: LD_VAR 0 5
68436: PUSH
68437: LD_INT 2
68439: ARRAY
68440: ST_TO_ADDR
// break ;
68441: GO 68445
// end ;
68443: GO 68403
68445: POP
68446: POP
// if not weapon then
68447: LD_VAR 0 8
68451: NOT
68452: IFFALSE 68456
// continue ;
68454: GO 68352
// for k in factories do
68456: LD_ADDR_VAR 0 6
68460: PUSH
68461: LD_VAR 0 2
68465: PUSH
68466: FOR_IN
68467: IFFALSE 68532
// begin weapons := AvailableWeaponList ( k ) ;
68469: LD_ADDR_VAR 0 9
68473: PUSH
68474: LD_VAR 0 6
68478: PPUSH
68479: CALL_OW 478
68483: ST_TO_ADDR
// if not weapons then
68484: LD_VAR 0 9
68488: NOT
68489: IFFALSE 68493
// continue ;
68491: GO 68466
// if weapon in weapons then
68493: LD_VAR 0 8
68497: PUSH
68498: LD_VAR 0 9
68502: IN
68503: IFFALSE 68530
// begin result := [ i , weapon ] ;
68505: LD_ADDR_VAR 0 3
68509: PUSH
68510: LD_VAR 0 4
68514: PUSH
68515: LD_VAR 0 8
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: ST_TO_ADDR
// exit ;
68524: POP
68525: POP
68526: POP
68527: POP
68528: GO 68538
// end ; end ;
68530: GO 68466
68532: POP
68533: POP
// end ;
68534: GO 68352
68536: POP
68537: POP
// end ;
68538: LD_VAR 0 3
68542: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68543: LD_INT 0
68545: PPUSH
// if not side or side > 8 then
68546: LD_VAR 0 3
68550: NOT
68551: PUSH
68552: LD_VAR 0 3
68556: PUSH
68557: LD_INT 8
68559: GREATER
68560: OR
68561: IFFALSE 68565
// exit ;
68563: GO 68624
// if not range then
68565: LD_VAR 0 4
68569: NOT
68570: IFFALSE 68581
// range := - 12 ;
68572: LD_ADDR_VAR 0 4
68576: PUSH
68577: LD_INT 12
68579: NEG
68580: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68581: LD_VAR 0 1
68585: PPUSH
68586: LD_VAR 0 2
68590: PPUSH
68591: LD_VAR 0 3
68595: PPUSH
68596: LD_VAR 0 4
68600: PPUSH
68601: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68605: LD_VAR 0 1
68609: PPUSH
68610: LD_VAR 0 2
68614: PPUSH
68615: LD_VAR 0 3
68619: PPUSH
68620: CALL_OW 331
// end ;
68624: LD_VAR 0 5
68628: RET
// export function Video ( mode ) ; begin
68629: LD_INT 0
68631: PPUSH
// ingame_video = mode ;
68632: LD_ADDR_OWVAR 52
68636: PUSH
68637: LD_VAR 0 1
68641: ST_TO_ADDR
// interface_hidden = mode ;
68642: LD_ADDR_OWVAR 54
68646: PUSH
68647: LD_VAR 0 1
68651: ST_TO_ADDR
// end ;
68652: LD_VAR 0 2
68656: RET
// export function Join ( array , element ) ; begin
68657: LD_INT 0
68659: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68660: LD_ADDR_VAR 0 3
68664: PUSH
68665: LD_VAR 0 1
68669: PPUSH
68670: LD_VAR 0 1
68674: PUSH
68675: LD_INT 1
68677: PLUS
68678: PPUSH
68679: LD_VAR 0 2
68683: PPUSH
68684: CALL_OW 1
68688: ST_TO_ADDR
// end ;
68689: LD_VAR 0 3
68693: RET
// export function JoinUnion ( array , element ) ; begin
68694: LD_INT 0
68696: PPUSH
// result := array union element ;
68697: LD_ADDR_VAR 0 3
68701: PUSH
68702: LD_VAR 0 1
68706: PUSH
68707: LD_VAR 0 2
68711: UNION
68712: ST_TO_ADDR
// end ;
68713: LD_VAR 0 3
68717: RET
// export function GetBehemoths ( side ) ; begin
68718: LD_INT 0
68720: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68721: LD_ADDR_VAR 0 2
68725: PUSH
68726: LD_INT 22
68728: PUSH
68729: LD_VAR 0 1
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 31
68740: PUSH
68741: LD_INT 25
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PPUSH
68752: CALL_OW 69
68756: ST_TO_ADDR
// end ;
68757: LD_VAR 0 2
68761: RET
// export function Shuffle ( array ) ; var i , index ; begin
68762: LD_INT 0
68764: PPUSH
68765: PPUSH
68766: PPUSH
// result := [ ] ;
68767: LD_ADDR_VAR 0 2
68771: PUSH
68772: EMPTY
68773: ST_TO_ADDR
// if not array then
68774: LD_VAR 0 1
68778: NOT
68779: IFFALSE 68783
// exit ;
68781: GO 68882
// Randomize ;
68783: CALL_OW 10
// for i = array downto 1 do
68787: LD_ADDR_VAR 0 3
68791: PUSH
68792: DOUBLE
68793: LD_VAR 0 1
68797: INC
68798: ST_TO_ADDR
68799: LD_INT 1
68801: PUSH
68802: FOR_DOWNTO
68803: IFFALSE 68880
// begin index := rand ( 1 , array ) ;
68805: LD_ADDR_VAR 0 4
68809: PUSH
68810: LD_INT 1
68812: PPUSH
68813: LD_VAR 0 1
68817: PPUSH
68818: CALL_OW 12
68822: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68823: LD_ADDR_VAR 0 2
68827: PUSH
68828: LD_VAR 0 2
68832: PPUSH
68833: LD_VAR 0 2
68837: PUSH
68838: LD_INT 1
68840: PLUS
68841: PPUSH
68842: LD_VAR 0 1
68846: PUSH
68847: LD_VAR 0 4
68851: ARRAY
68852: PPUSH
68853: CALL_OW 2
68857: ST_TO_ADDR
// array := Delete ( array , index ) ;
68858: LD_ADDR_VAR 0 1
68862: PUSH
68863: LD_VAR 0 1
68867: PPUSH
68868: LD_VAR 0 4
68872: PPUSH
68873: CALL_OW 3
68877: ST_TO_ADDR
// end ;
68878: GO 68802
68880: POP
68881: POP
// end ;
68882: LD_VAR 0 2
68886: RET
// export function GetBaseMaterials ( base ) ; begin
68887: LD_INT 0
68889: PPUSH
// result := [ 0 , 0 , 0 ] ;
68890: LD_ADDR_VAR 0 2
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: LD_INT 0
68900: PUSH
68901: LD_INT 0
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: LIST
68908: ST_TO_ADDR
// if not base then
68909: LD_VAR 0 1
68913: NOT
68914: IFFALSE 68918
// exit ;
68916: GO 68967
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68918: LD_ADDR_VAR 0 2
68922: PUSH
68923: LD_VAR 0 1
68927: PPUSH
68928: LD_INT 1
68930: PPUSH
68931: CALL_OW 275
68935: PUSH
68936: LD_VAR 0 1
68940: PPUSH
68941: LD_INT 2
68943: PPUSH
68944: CALL_OW 275
68948: PUSH
68949: LD_VAR 0 1
68953: PPUSH
68954: LD_INT 3
68956: PPUSH
68957: CALL_OW 275
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: LIST
68966: ST_TO_ADDR
// end ;
68967: LD_VAR 0 2
68971: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68972: LD_INT 0
68974: PPUSH
68975: PPUSH
// result := array ;
68976: LD_ADDR_VAR 0 3
68980: PUSH
68981: LD_VAR 0 1
68985: ST_TO_ADDR
// if size >= result then
68986: LD_VAR 0 2
68990: PUSH
68991: LD_VAR 0 3
68995: GREATEREQUAL
68996: IFFALSE 69000
// exit ;
68998: GO 69050
// if size then
69000: LD_VAR 0 2
69004: IFFALSE 69050
// for i := array downto size do
69006: LD_ADDR_VAR 0 4
69010: PUSH
69011: DOUBLE
69012: LD_VAR 0 1
69016: INC
69017: ST_TO_ADDR
69018: LD_VAR 0 2
69022: PUSH
69023: FOR_DOWNTO
69024: IFFALSE 69048
// result := Delete ( result , result ) ;
69026: LD_ADDR_VAR 0 3
69030: PUSH
69031: LD_VAR 0 3
69035: PPUSH
69036: LD_VAR 0 3
69040: PPUSH
69041: CALL_OW 3
69045: ST_TO_ADDR
69046: GO 69023
69048: POP
69049: POP
// end ;
69050: LD_VAR 0 3
69054: RET
// export function ComExit ( unit ) ; var tmp ; begin
69055: LD_INT 0
69057: PPUSH
69058: PPUSH
// if not IsInUnit ( unit ) then
69059: LD_VAR 0 1
69063: PPUSH
69064: CALL_OW 310
69068: NOT
69069: IFFALSE 69073
// exit ;
69071: GO 69133
// tmp := IsInUnit ( unit ) ;
69073: LD_ADDR_VAR 0 3
69077: PUSH
69078: LD_VAR 0 1
69082: PPUSH
69083: CALL_OW 310
69087: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69088: LD_VAR 0 3
69092: PPUSH
69093: CALL_OW 247
69097: PUSH
69098: LD_INT 2
69100: EQUAL
69101: IFFALSE 69114
// ComExitVehicle ( unit ) else
69103: LD_VAR 0 1
69107: PPUSH
69108: CALL_OW 121
69112: GO 69123
// ComExitBuilding ( unit ) ;
69114: LD_VAR 0 1
69118: PPUSH
69119: CALL_OW 122
// result := tmp ;
69123: LD_ADDR_VAR 0 2
69127: PUSH
69128: LD_VAR 0 3
69132: ST_TO_ADDR
// end ;
69133: LD_VAR 0 2
69137: RET
// export function ComExitAll ( units ) ; var i ; begin
69138: LD_INT 0
69140: PPUSH
69141: PPUSH
// if not units then
69142: LD_VAR 0 1
69146: NOT
69147: IFFALSE 69151
// exit ;
69149: GO 69177
// for i in units do
69151: LD_ADDR_VAR 0 3
69155: PUSH
69156: LD_VAR 0 1
69160: PUSH
69161: FOR_IN
69162: IFFALSE 69175
// ComExit ( i ) ;
69164: LD_VAR 0 3
69168: PPUSH
69169: CALL 69055 0 1
69173: GO 69161
69175: POP
69176: POP
// end ;
69177: LD_VAR 0 2
69181: RET
// export function ResetHc ; begin
69182: LD_INT 0
69184: PPUSH
// InitHc ;
69185: CALL_OW 19
// hc_importance := 0 ;
69189: LD_ADDR_OWVAR 32
69193: PUSH
69194: LD_INT 0
69196: ST_TO_ADDR
// end ;
69197: LD_VAR 0 1
69201: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69202: LD_INT 0
69204: PPUSH
69205: PPUSH
69206: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69207: LD_ADDR_VAR 0 6
69211: PUSH
69212: LD_VAR 0 1
69216: PUSH
69217: LD_VAR 0 3
69221: PLUS
69222: PUSH
69223: LD_INT 2
69225: DIV
69226: ST_TO_ADDR
// if _x < 0 then
69227: LD_VAR 0 6
69231: PUSH
69232: LD_INT 0
69234: LESS
69235: IFFALSE 69252
// _x := _x * - 1 ;
69237: LD_ADDR_VAR 0 6
69241: PUSH
69242: LD_VAR 0 6
69246: PUSH
69247: LD_INT 1
69249: NEG
69250: MUL
69251: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69252: LD_ADDR_VAR 0 7
69256: PUSH
69257: LD_VAR 0 2
69261: PUSH
69262: LD_VAR 0 4
69266: PLUS
69267: PUSH
69268: LD_INT 2
69270: DIV
69271: ST_TO_ADDR
// if _y < 0 then
69272: LD_VAR 0 7
69276: PUSH
69277: LD_INT 0
69279: LESS
69280: IFFALSE 69297
// _y := _y * - 1 ;
69282: LD_ADDR_VAR 0 7
69286: PUSH
69287: LD_VAR 0 7
69291: PUSH
69292: LD_INT 1
69294: NEG
69295: MUL
69296: ST_TO_ADDR
// result := [ _x , _y ] ;
69297: LD_ADDR_VAR 0 5
69301: PUSH
69302: LD_VAR 0 6
69306: PUSH
69307: LD_VAR 0 7
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: ST_TO_ADDR
// end ;
69316: LD_VAR 0 5
69320: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69321: LD_INT 0
69323: PPUSH
69324: PPUSH
69325: PPUSH
69326: PPUSH
// task := GetTaskList ( unit ) ;
69327: LD_ADDR_VAR 0 7
69331: PUSH
69332: LD_VAR 0 1
69336: PPUSH
69337: CALL_OW 437
69341: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69342: LD_VAR 0 7
69346: NOT
69347: PUSH
69348: LD_VAR 0 1
69352: PPUSH
69353: LD_VAR 0 2
69357: PPUSH
69358: CALL_OW 308
69362: NOT
69363: AND
69364: IFFALSE 69368
// exit ;
69366: GO 69486
// if IsInArea ( unit , area ) then
69368: LD_VAR 0 1
69372: PPUSH
69373: LD_VAR 0 2
69377: PPUSH
69378: CALL_OW 308
69382: IFFALSE 69400
// begin ComMoveToArea ( unit , goAway ) ;
69384: LD_VAR 0 1
69388: PPUSH
69389: LD_VAR 0 3
69393: PPUSH
69394: CALL_OW 113
// exit ;
69398: GO 69486
// end ; if task [ 1 ] [ 1 ] <> M then
69400: LD_VAR 0 7
69404: PUSH
69405: LD_INT 1
69407: ARRAY
69408: PUSH
69409: LD_INT 1
69411: ARRAY
69412: PUSH
69413: LD_STRING M
69415: NONEQUAL
69416: IFFALSE 69420
// exit ;
69418: GO 69486
// x := task [ 1 ] [ 2 ] ;
69420: LD_ADDR_VAR 0 5
69424: PUSH
69425: LD_VAR 0 7
69429: PUSH
69430: LD_INT 1
69432: ARRAY
69433: PUSH
69434: LD_INT 2
69436: ARRAY
69437: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69438: LD_ADDR_VAR 0 6
69442: PUSH
69443: LD_VAR 0 7
69447: PUSH
69448: LD_INT 1
69450: ARRAY
69451: PUSH
69452: LD_INT 3
69454: ARRAY
69455: ST_TO_ADDR
// if InArea ( x , y , area ) then
69456: LD_VAR 0 5
69460: PPUSH
69461: LD_VAR 0 6
69465: PPUSH
69466: LD_VAR 0 2
69470: PPUSH
69471: CALL_OW 309
69475: IFFALSE 69486
// ComStop ( unit ) ;
69477: LD_VAR 0 1
69481: PPUSH
69482: CALL_OW 141
// end ;
69486: LD_VAR 0 4
69490: RET
// export function Abs ( value ) ; begin
69491: LD_INT 0
69493: PPUSH
// result := value ;
69494: LD_ADDR_VAR 0 2
69498: PUSH
69499: LD_VAR 0 1
69503: ST_TO_ADDR
// if value < 0 then
69504: LD_VAR 0 1
69508: PUSH
69509: LD_INT 0
69511: LESS
69512: IFFALSE 69529
// result := value * - 1 ;
69514: LD_ADDR_VAR 0 2
69518: PUSH
69519: LD_VAR 0 1
69523: PUSH
69524: LD_INT 1
69526: NEG
69527: MUL
69528: ST_TO_ADDR
// end ;
69529: LD_VAR 0 2
69533: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69534: LD_INT 0
69536: PPUSH
69537: PPUSH
69538: PPUSH
69539: PPUSH
69540: PPUSH
69541: PPUSH
69542: PPUSH
69543: PPUSH
// if not unit or not building then
69544: LD_VAR 0 1
69548: NOT
69549: PUSH
69550: LD_VAR 0 2
69554: NOT
69555: OR
69556: IFFALSE 69560
// exit ;
69558: GO 69786
// x := GetX ( building ) ;
69560: LD_ADDR_VAR 0 4
69564: PUSH
69565: LD_VAR 0 2
69569: PPUSH
69570: CALL_OW 250
69574: ST_TO_ADDR
// y := GetY ( building ) ;
69575: LD_ADDR_VAR 0 6
69579: PUSH
69580: LD_VAR 0 2
69584: PPUSH
69585: CALL_OW 251
69589: ST_TO_ADDR
// d := GetDir ( building ) ;
69590: LD_ADDR_VAR 0 8
69594: PUSH
69595: LD_VAR 0 2
69599: PPUSH
69600: CALL_OW 254
69604: ST_TO_ADDR
// r := 4 ;
69605: LD_ADDR_VAR 0 9
69609: PUSH
69610: LD_INT 4
69612: ST_TO_ADDR
// for i := 1 to 5 do
69613: LD_ADDR_VAR 0 10
69617: PUSH
69618: DOUBLE
69619: LD_INT 1
69621: DEC
69622: ST_TO_ADDR
69623: LD_INT 5
69625: PUSH
69626: FOR_TO
69627: IFFALSE 69784
// begin _x := ShiftX ( x , d , r + i ) ;
69629: LD_ADDR_VAR 0 5
69633: PUSH
69634: LD_VAR 0 4
69638: PPUSH
69639: LD_VAR 0 8
69643: PPUSH
69644: LD_VAR 0 9
69648: PUSH
69649: LD_VAR 0 10
69653: PLUS
69654: PPUSH
69655: CALL_OW 272
69659: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69660: LD_ADDR_VAR 0 7
69664: PUSH
69665: LD_VAR 0 6
69669: PPUSH
69670: LD_VAR 0 8
69674: PPUSH
69675: LD_VAR 0 9
69679: PUSH
69680: LD_VAR 0 10
69684: PLUS
69685: PPUSH
69686: CALL_OW 273
69690: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69691: LD_VAR 0 5
69695: PPUSH
69696: LD_VAR 0 7
69700: PPUSH
69701: CALL_OW 488
69705: PUSH
69706: LD_VAR 0 5
69710: PPUSH
69711: LD_VAR 0 7
69715: PPUSH
69716: CALL_OW 428
69720: PPUSH
69721: CALL_OW 247
69725: PUSH
69726: LD_INT 3
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: IN
69736: NOT
69737: AND
69738: IFFALSE 69782
// begin ComMoveXY ( unit , _x , _y ) ;
69740: LD_VAR 0 1
69744: PPUSH
69745: LD_VAR 0 5
69749: PPUSH
69750: LD_VAR 0 7
69754: PPUSH
69755: CALL_OW 111
// result := [ _x , _y ] ;
69759: LD_ADDR_VAR 0 3
69763: PUSH
69764: LD_VAR 0 5
69768: PUSH
69769: LD_VAR 0 7
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: ST_TO_ADDR
// exit ;
69778: POP
69779: POP
69780: GO 69786
// end ; end ;
69782: GO 69626
69784: POP
69785: POP
// end ;
69786: LD_VAR 0 3
69790: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69791: LD_INT 0
69793: PPUSH
69794: PPUSH
69795: PPUSH
// result := 0 ;
69796: LD_ADDR_VAR 0 3
69800: PUSH
69801: LD_INT 0
69803: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69804: LD_VAR 0 1
69808: PUSH
69809: LD_INT 0
69811: LESS
69812: PUSH
69813: LD_VAR 0 1
69817: PUSH
69818: LD_INT 8
69820: GREATER
69821: OR
69822: PUSH
69823: LD_VAR 0 2
69827: PUSH
69828: LD_INT 0
69830: LESS
69831: OR
69832: PUSH
69833: LD_VAR 0 2
69837: PUSH
69838: LD_INT 8
69840: GREATER
69841: OR
69842: IFFALSE 69846
// exit ;
69844: GO 69921
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69846: LD_ADDR_VAR 0 4
69850: PUSH
69851: LD_INT 22
69853: PUSH
69854: LD_VAR 0 2
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PPUSH
69863: CALL_OW 69
69867: PUSH
69868: FOR_IN
69869: IFFALSE 69919
// begin un := UnitShoot ( i ) ;
69871: LD_ADDR_VAR 0 5
69875: PUSH
69876: LD_VAR 0 4
69880: PPUSH
69881: CALL_OW 504
69885: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69886: LD_VAR 0 5
69890: PPUSH
69891: CALL_OW 255
69895: PUSH
69896: LD_VAR 0 1
69900: EQUAL
69901: IFFALSE 69917
// begin result := un ;
69903: LD_ADDR_VAR 0 3
69907: PUSH
69908: LD_VAR 0 5
69912: ST_TO_ADDR
// exit ;
69913: POP
69914: POP
69915: GO 69921
// end ; end ;
69917: GO 69868
69919: POP
69920: POP
// end ;
69921: LD_VAR 0 3
69925: RET
// export function GetCargoBay ( units ) ; begin
69926: LD_INT 0
69928: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69929: LD_ADDR_VAR 0 2
69933: PUSH
69934: LD_VAR 0 1
69938: PPUSH
69939: LD_INT 2
69941: PUSH
69942: LD_INT 34
69944: PUSH
69945: LD_INT 12
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 34
69954: PUSH
69955: LD_INT 51
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 34
69964: PUSH
69965: LD_INT 32
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 34
69974: PUSH
69975: LD_INT 89
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: PPUSH
69989: CALL_OW 72
69993: ST_TO_ADDR
// end ;
69994: LD_VAR 0 2
69998: RET
// export function Negate ( value ) ; begin
69999: LD_INT 0
70001: PPUSH
// result := not value ;
70002: LD_ADDR_VAR 0 2
70006: PUSH
70007: LD_VAR 0 1
70011: NOT
70012: ST_TO_ADDR
// end ;
70013: LD_VAR 0 2
70017: RET
// export function Inc ( value ) ; begin
70018: LD_INT 0
70020: PPUSH
// result := value + 1 ;
70021: LD_ADDR_VAR 0 2
70025: PUSH
70026: LD_VAR 0 1
70030: PUSH
70031: LD_INT 1
70033: PLUS
70034: ST_TO_ADDR
// end ;
70035: LD_VAR 0 2
70039: RET
// export function Dec ( value ) ; begin
70040: LD_INT 0
70042: PPUSH
// result := value - 1 ;
70043: LD_ADDR_VAR 0 2
70047: PUSH
70048: LD_VAR 0 1
70052: PUSH
70053: LD_INT 1
70055: MINUS
70056: ST_TO_ADDR
// end ;
70057: LD_VAR 0 2
70061: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70062: LD_INT 0
70064: PPUSH
70065: PPUSH
70066: PPUSH
70067: PPUSH
70068: PPUSH
70069: PPUSH
70070: PPUSH
70071: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70072: LD_VAR 0 1
70076: PPUSH
70077: LD_VAR 0 2
70081: PPUSH
70082: CALL_OW 488
70086: NOT
70087: PUSH
70088: LD_VAR 0 3
70092: PPUSH
70093: LD_VAR 0 4
70097: PPUSH
70098: CALL_OW 488
70102: NOT
70103: OR
70104: IFFALSE 70117
// begin result := - 1 ;
70106: LD_ADDR_VAR 0 5
70110: PUSH
70111: LD_INT 1
70113: NEG
70114: ST_TO_ADDR
// exit ;
70115: GO 70352
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70117: LD_ADDR_VAR 0 12
70121: PUSH
70122: LD_VAR 0 1
70126: PPUSH
70127: LD_VAR 0 2
70131: PPUSH
70132: LD_VAR 0 3
70136: PPUSH
70137: LD_VAR 0 4
70141: PPUSH
70142: CALL 69202 0 4
70146: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70147: LD_ADDR_VAR 0 11
70151: PUSH
70152: LD_VAR 0 1
70156: PPUSH
70157: LD_VAR 0 2
70161: PPUSH
70162: LD_VAR 0 12
70166: PUSH
70167: LD_INT 1
70169: ARRAY
70170: PPUSH
70171: LD_VAR 0 12
70175: PUSH
70176: LD_INT 2
70178: ARRAY
70179: PPUSH
70180: CALL_OW 298
70184: ST_TO_ADDR
// distance := 9999 ;
70185: LD_ADDR_VAR 0 10
70189: PUSH
70190: LD_INT 9999
70192: ST_TO_ADDR
// for i := 0 to 5 do
70193: LD_ADDR_VAR 0 6
70197: PUSH
70198: DOUBLE
70199: LD_INT 0
70201: DEC
70202: ST_TO_ADDR
70203: LD_INT 5
70205: PUSH
70206: FOR_TO
70207: IFFALSE 70350
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70209: LD_ADDR_VAR 0 7
70213: PUSH
70214: LD_VAR 0 1
70218: PPUSH
70219: LD_VAR 0 6
70223: PPUSH
70224: LD_VAR 0 11
70228: PPUSH
70229: CALL_OW 272
70233: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70234: LD_ADDR_VAR 0 8
70238: PUSH
70239: LD_VAR 0 2
70243: PPUSH
70244: LD_VAR 0 6
70248: PPUSH
70249: LD_VAR 0 11
70253: PPUSH
70254: CALL_OW 273
70258: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70259: LD_VAR 0 7
70263: PPUSH
70264: LD_VAR 0 8
70268: PPUSH
70269: CALL_OW 488
70273: NOT
70274: IFFALSE 70278
// continue ;
70276: GO 70206
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70278: LD_ADDR_VAR 0 9
70282: PUSH
70283: LD_VAR 0 12
70287: PUSH
70288: LD_INT 1
70290: ARRAY
70291: PPUSH
70292: LD_VAR 0 12
70296: PUSH
70297: LD_INT 2
70299: ARRAY
70300: PPUSH
70301: LD_VAR 0 7
70305: PPUSH
70306: LD_VAR 0 8
70310: PPUSH
70311: CALL_OW 298
70315: ST_TO_ADDR
// if tmp < distance then
70316: LD_VAR 0 9
70320: PUSH
70321: LD_VAR 0 10
70325: LESS
70326: IFFALSE 70348
// begin result := i ;
70328: LD_ADDR_VAR 0 5
70332: PUSH
70333: LD_VAR 0 6
70337: ST_TO_ADDR
// distance := tmp ;
70338: LD_ADDR_VAR 0 10
70342: PUSH
70343: LD_VAR 0 9
70347: ST_TO_ADDR
// end ; end ;
70348: GO 70206
70350: POP
70351: POP
// end ;
70352: LD_VAR 0 5
70356: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70357: LD_INT 0
70359: PPUSH
70360: PPUSH
// if not driver or not IsInUnit ( driver ) then
70361: LD_VAR 0 1
70365: NOT
70366: PUSH
70367: LD_VAR 0 1
70371: PPUSH
70372: CALL_OW 310
70376: NOT
70377: OR
70378: IFFALSE 70382
// exit ;
70380: GO 70472
// vehicle := IsInUnit ( driver ) ;
70382: LD_ADDR_VAR 0 3
70386: PUSH
70387: LD_VAR 0 1
70391: PPUSH
70392: CALL_OW 310
70396: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70397: LD_VAR 0 1
70401: PPUSH
70402: LD_STRING \
70404: PUSH
70405: LD_INT 0
70407: PUSH
70408: LD_INT 0
70410: PUSH
70411: LD_INT 0
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: LD_INT 0
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: PUSH
70432: LD_STRING E
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_VAR 0 3
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: LD_INT 0
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PPUSH
70468: CALL_OW 446
// end ;
70472: LD_VAR 0 2
70476: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70477: LD_INT 0
70479: PPUSH
70480: PPUSH
// if not driver or not IsInUnit ( driver ) then
70481: LD_VAR 0 1
70485: NOT
70486: PUSH
70487: LD_VAR 0 1
70491: PPUSH
70492: CALL_OW 310
70496: NOT
70497: OR
70498: IFFALSE 70502
// exit ;
70500: GO 70592
// vehicle := IsInUnit ( driver ) ;
70502: LD_ADDR_VAR 0 3
70506: PUSH
70507: LD_VAR 0 1
70511: PPUSH
70512: CALL_OW 310
70516: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70517: LD_VAR 0 1
70521: PPUSH
70522: LD_STRING \
70524: PUSH
70525: LD_INT 0
70527: PUSH
70528: LD_INT 0
70530: PUSH
70531: LD_INT 0
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: LD_INT 0
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: PUSH
70552: LD_STRING E
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_VAR 0 3
70565: PUSH
70566: LD_INT 0
70568: PUSH
70569: LD_INT 0
70571: PUSH
70572: LD_INT 0
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PPUSH
70588: CALL_OW 447
// end ;
70592: LD_VAR 0 2
70596: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70597: LD_INT 0
70599: PPUSH
70600: PPUSH
70601: PPUSH
// tmp := [ ] ;
70602: LD_ADDR_VAR 0 5
70606: PUSH
70607: EMPTY
70608: ST_TO_ADDR
// for i in units do
70609: LD_ADDR_VAR 0 4
70613: PUSH
70614: LD_VAR 0 1
70618: PUSH
70619: FOR_IN
70620: IFFALSE 70658
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70622: LD_ADDR_VAR 0 5
70626: PUSH
70627: LD_VAR 0 5
70631: PPUSH
70632: LD_VAR 0 5
70636: PUSH
70637: LD_INT 1
70639: PLUS
70640: PPUSH
70641: LD_VAR 0 4
70645: PPUSH
70646: CALL_OW 256
70650: PPUSH
70651: CALL_OW 2
70655: ST_TO_ADDR
70656: GO 70619
70658: POP
70659: POP
// if not tmp then
70660: LD_VAR 0 5
70664: NOT
70665: IFFALSE 70669
// exit ;
70667: GO 70717
// if asc then
70669: LD_VAR 0 2
70673: IFFALSE 70697
// result := SortListByListAsc ( units , tmp ) else
70675: LD_ADDR_VAR 0 3
70679: PUSH
70680: LD_VAR 0 1
70684: PPUSH
70685: LD_VAR 0 5
70689: PPUSH
70690: CALL_OW 76
70694: ST_TO_ADDR
70695: GO 70717
// result := SortListByListDesc ( units , tmp ) ;
70697: LD_ADDR_VAR 0 3
70701: PUSH
70702: LD_VAR 0 1
70706: PPUSH
70707: LD_VAR 0 5
70711: PPUSH
70712: CALL_OW 77
70716: ST_TO_ADDR
// end ;
70717: LD_VAR 0 3
70721: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70722: LD_INT 0
70724: PPUSH
70725: PPUSH
// task := GetTaskList ( mech ) ;
70726: LD_ADDR_VAR 0 4
70730: PUSH
70731: LD_VAR 0 1
70735: PPUSH
70736: CALL_OW 437
70740: ST_TO_ADDR
// if not task then
70741: LD_VAR 0 4
70745: NOT
70746: IFFALSE 70750
// exit ;
70748: GO 70792
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70750: LD_ADDR_VAR 0 3
70754: PUSH
70755: LD_VAR 0 4
70759: PUSH
70760: LD_INT 1
70762: ARRAY
70763: PUSH
70764: LD_INT 1
70766: ARRAY
70767: PUSH
70768: LD_STRING r
70770: EQUAL
70771: PUSH
70772: LD_VAR 0 4
70776: PUSH
70777: LD_INT 1
70779: ARRAY
70780: PUSH
70781: LD_INT 4
70783: ARRAY
70784: PUSH
70785: LD_VAR 0 2
70789: EQUAL
70790: AND
70791: ST_TO_ADDR
// end ;
70792: LD_VAR 0 3
70796: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70797: LD_INT 0
70799: PPUSH
// SetDir ( unit , d ) ;
70800: LD_VAR 0 1
70804: PPUSH
70805: LD_VAR 0 4
70809: PPUSH
70810: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70814: LD_VAR 0 1
70818: PPUSH
70819: LD_VAR 0 2
70823: PPUSH
70824: LD_VAR 0 3
70828: PPUSH
70829: LD_VAR 0 5
70833: PPUSH
70834: CALL_OW 48
// end ;
70838: LD_VAR 0 6
70842: RET
// export function ToNaturalNumber ( number ) ; begin
70843: LD_INT 0
70845: PPUSH
// result := number div 1 ;
70846: LD_ADDR_VAR 0 2
70850: PUSH
70851: LD_VAR 0 1
70855: PUSH
70856: LD_INT 1
70858: DIV
70859: ST_TO_ADDR
// if number < 0 then
70860: LD_VAR 0 1
70864: PUSH
70865: LD_INT 0
70867: LESS
70868: IFFALSE 70878
// result := 0 ;
70870: LD_ADDR_VAR 0 2
70874: PUSH
70875: LD_INT 0
70877: ST_TO_ADDR
// end ;
70878: LD_VAR 0 2
70882: RET
// export function SortByClass ( units , class ) ; var un ; begin
70883: LD_INT 0
70885: PPUSH
70886: PPUSH
// if not units or not class then
70887: LD_VAR 0 1
70891: NOT
70892: PUSH
70893: LD_VAR 0 2
70897: NOT
70898: OR
70899: IFFALSE 70903
// exit ;
70901: GO 70998
// result := [ ] ;
70903: LD_ADDR_VAR 0 3
70907: PUSH
70908: EMPTY
70909: ST_TO_ADDR
// for un in units do
70910: LD_ADDR_VAR 0 4
70914: PUSH
70915: LD_VAR 0 1
70919: PUSH
70920: FOR_IN
70921: IFFALSE 70996
// if GetClass ( un ) = class then
70923: LD_VAR 0 4
70927: PPUSH
70928: CALL_OW 257
70932: PUSH
70933: LD_VAR 0 2
70937: EQUAL
70938: IFFALSE 70965
// result := Insert ( result , 1 , un ) else
70940: LD_ADDR_VAR 0 3
70944: PUSH
70945: LD_VAR 0 3
70949: PPUSH
70950: LD_INT 1
70952: PPUSH
70953: LD_VAR 0 4
70957: PPUSH
70958: CALL_OW 2
70962: ST_TO_ADDR
70963: GO 70994
// result := Replace ( result , result + 1 , un ) ;
70965: LD_ADDR_VAR 0 3
70969: PUSH
70970: LD_VAR 0 3
70974: PPUSH
70975: LD_VAR 0 3
70979: PUSH
70980: LD_INT 1
70982: PLUS
70983: PPUSH
70984: LD_VAR 0 4
70988: PPUSH
70989: CALL_OW 1
70993: ST_TO_ADDR
70994: GO 70920
70996: POP
70997: POP
// end ;
70998: LD_VAR 0 3
71002: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71003: LD_INT 0
71005: PPUSH
71006: PPUSH
71007: PPUSH
71008: PPUSH
71009: PPUSH
71010: PPUSH
71011: PPUSH
// result := [ ] ;
71012: LD_ADDR_VAR 0 4
71016: PUSH
71017: EMPTY
71018: ST_TO_ADDR
// if x - r < 0 then
71019: LD_VAR 0 1
71023: PUSH
71024: LD_VAR 0 3
71028: MINUS
71029: PUSH
71030: LD_INT 0
71032: LESS
71033: IFFALSE 71045
// min_x := 0 else
71035: LD_ADDR_VAR 0 8
71039: PUSH
71040: LD_INT 0
71042: ST_TO_ADDR
71043: GO 71061
// min_x := x - r ;
71045: LD_ADDR_VAR 0 8
71049: PUSH
71050: LD_VAR 0 1
71054: PUSH
71055: LD_VAR 0 3
71059: MINUS
71060: ST_TO_ADDR
// if y - r < 0 then
71061: LD_VAR 0 2
71065: PUSH
71066: LD_VAR 0 3
71070: MINUS
71071: PUSH
71072: LD_INT 0
71074: LESS
71075: IFFALSE 71087
// min_y := 0 else
71077: LD_ADDR_VAR 0 7
71081: PUSH
71082: LD_INT 0
71084: ST_TO_ADDR
71085: GO 71103
// min_y := y - r ;
71087: LD_ADDR_VAR 0 7
71091: PUSH
71092: LD_VAR 0 2
71096: PUSH
71097: LD_VAR 0 3
71101: MINUS
71102: ST_TO_ADDR
// max_x := x + r ;
71103: LD_ADDR_VAR 0 9
71107: PUSH
71108: LD_VAR 0 1
71112: PUSH
71113: LD_VAR 0 3
71117: PLUS
71118: ST_TO_ADDR
// max_y := y + r ;
71119: LD_ADDR_VAR 0 10
71123: PUSH
71124: LD_VAR 0 2
71128: PUSH
71129: LD_VAR 0 3
71133: PLUS
71134: ST_TO_ADDR
// for _x = min_x to max_x do
71135: LD_ADDR_VAR 0 5
71139: PUSH
71140: DOUBLE
71141: LD_VAR 0 8
71145: DEC
71146: ST_TO_ADDR
71147: LD_VAR 0 9
71151: PUSH
71152: FOR_TO
71153: IFFALSE 71254
// for _y = min_y to max_y do
71155: LD_ADDR_VAR 0 6
71159: PUSH
71160: DOUBLE
71161: LD_VAR 0 7
71165: DEC
71166: ST_TO_ADDR
71167: LD_VAR 0 10
71171: PUSH
71172: FOR_TO
71173: IFFALSE 71250
// begin if not ValidHex ( _x , _y ) then
71175: LD_VAR 0 5
71179: PPUSH
71180: LD_VAR 0 6
71184: PPUSH
71185: CALL_OW 488
71189: NOT
71190: IFFALSE 71194
// continue ;
71192: GO 71172
// if GetResourceTypeXY ( _x , _y ) then
71194: LD_VAR 0 5
71198: PPUSH
71199: LD_VAR 0 6
71203: PPUSH
71204: CALL_OW 283
71208: IFFALSE 71248
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71210: LD_ADDR_VAR 0 4
71214: PUSH
71215: LD_VAR 0 4
71219: PPUSH
71220: LD_VAR 0 4
71224: PUSH
71225: LD_INT 1
71227: PLUS
71228: PPUSH
71229: LD_VAR 0 5
71233: PUSH
71234: LD_VAR 0 6
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PPUSH
71243: CALL_OW 1
71247: ST_TO_ADDR
// end ;
71248: GO 71172
71250: POP
71251: POP
71252: GO 71152
71254: POP
71255: POP
// end ;
71256: LD_VAR 0 4
71260: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71261: LD_INT 0
71263: PPUSH
71264: PPUSH
71265: PPUSH
71266: PPUSH
71267: PPUSH
71268: PPUSH
71269: PPUSH
71270: PPUSH
// if not units then
71271: LD_VAR 0 1
71275: NOT
71276: IFFALSE 71280
// exit ;
71278: GO 71804
// result := UnitFilter ( units , [ f_ok ] ) ;
71280: LD_ADDR_VAR 0 3
71284: PUSH
71285: LD_VAR 0 1
71289: PPUSH
71290: LD_INT 50
71292: PUSH
71293: EMPTY
71294: LIST
71295: PPUSH
71296: CALL_OW 72
71300: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71301: LD_ADDR_VAR 0 8
71305: PUSH
71306: LD_VAR 0 1
71310: PUSH
71311: LD_INT 1
71313: ARRAY
71314: PPUSH
71315: CALL_OW 255
71319: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71320: LD_ADDR_VAR 0 10
71324: PUSH
71325: LD_INT 29
71327: PUSH
71328: LD_INT 91
71330: PUSH
71331: LD_INT 49
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: LIST
71338: ST_TO_ADDR
// if not result then
71339: LD_VAR 0 3
71343: NOT
71344: IFFALSE 71348
// exit ;
71346: GO 71804
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71348: LD_ADDR_VAR 0 5
71352: PUSH
71353: LD_INT 81
71355: PUSH
71356: LD_VAR 0 8
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PPUSH
71365: CALL_OW 69
71369: ST_TO_ADDR
// for i in result do
71370: LD_ADDR_VAR 0 4
71374: PUSH
71375: LD_VAR 0 3
71379: PUSH
71380: FOR_IN
71381: IFFALSE 71802
// begin tag := GetTag ( i ) + 1 ;
71383: LD_ADDR_VAR 0 9
71387: PUSH
71388: LD_VAR 0 4
71392: PPUSH
71393: CALL_OW 110
71397: PUSH
71398: LD_INT 1
71400: PLUS
71401: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71402: LD_ADDR_VAR 0 7
71406: PUSH
71407: LD_VAR 0 4
71411: PPUSH
71412: CALL_OW 250
71416: PPUSH
71417: LD_VAR 0 4
71421: PPUSH
71422: CALL_OW 251
71426: PPUSH
71427: LD_INT 6
71429: PPUSH
71430: CALL 71003 0 3
71434: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71435: LD_VAR 0 4
71439: PPUSH
71440: CALL_OW 247
71444: PUSH
71445: LD_INT 2
71447: EQUAL
71448: PUSH
71449: LD_VAR 0 7
71453: AND
71454: PUSH
71455: LD_VAR 0 4
71459: PPUSH
71460: CALL_OW 264
71464: PUSH
71465: LD_VAR 0 10
71469: IN
71470: NOT
71471: AND
71472: IFFALSE 71511
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71474: LD_VAR 0 4
71478: PPUSH
71479: LD_VAR 0 7
71483: PUSH
71484: LD_INT 1
71486: ARRAY
71487: PUSH
71488: LD_INT 1
71490: ARRAY
71491: PPUSH
71492: LD_VAR 0 7
71496: PUSH
71497: LD_INT 1
71499: ARRAY
71500: PUSH
71501: LD_INT 2
71503: ARRAY
71504: PPUSH
71505: CALL_OW 116
71509: GO 71800
// if path > tag then
71511: LD_VAR 0 2
71515: PUSH
71516: LD_VAR 0 9
71520: GREATER
71521: IFFALSE 71729
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71523: LD_ADDR_VAR 0 6
71527: PUSH
71528: LD_VAR 0 5
71532: PPUSH
71533: LD_INT 91
71535: PUSH
71536: LD_VAR 0 4
71540: PUSH
71541: LD_INT 8
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: LIST
71548: PPUSH
71549: CALL_OW 72
71553: ST_TO_ADDR
// if nearEnemy then
71554: LD_VAR 0 6
71558: IFFALSE 71627
// begin if GetWeapon ( i ) = ru_time_lapser then
71560: LD_VAR 0 4
71564: PPUSH
71565: CALL_OW 264
71569: PUSH
71570: LD_INT 49
71572: EQUAL
71573: IFFALSE 71601
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71575: LD_VAR 0 4
71579: PPUSH
71580: LD_VAR 0 6
71584: PPUSH
71585: LD_VAR 0 4
71589: PPUSH
71590: CALL_OW 74
71594: PPUSH
71595: CALL_OW 112
71599: GO 71625
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71601: LD_VAR 0 4
71605: PPUSH
71606: LD_VAR 0 6
71610: PPUSH
71611: LD_VAR 0 4
71615: PPUSH
71616: CALL_OW 74
71620: PPUSH
71621: CALL 72729 0 2
// end else
71625: GO 71727
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71627: LD_VAR 0 4
71631: PPUSH
71632: LD_VAR 0 2
71636: PUSH
71637: LD_VAR 0 9
71641: ARRAY
71642: PUSH
71643: LD_INT 1
71645: ARRAY
71646: PPUSH
71647: LD_VAR 0 2
71651: PUSH
71652: LD_VAR 0 9
71656: ARRAY
71657: PUSH
71658: LD_INT 2
71660: ARRAY
71661: PPUSH
71662: CALL_OW 297
71666: PUSH
71667: LD_INT 6
71669: GREATER
71670: IFFALSE 71713
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71672: LD_VAR 0 4
71676: PPUSH
71677: LD_VAR 0 2
71681: PUSH
71682: LD_VAR 0 9
71686: ARRAY
71687: PUSH
71688: LD_INT 1
71690: ARRAY
71691: PPUSH
71692: LD_VAR 0 2
71696: PUSH
71697: LD_VAR 0 9
71701: ARRAY
71702: PUSH
71703: LD_INT 2
71705: ARRAY
71706: PPUSH
71707: CALL_OW 114
71711: GO 71727
// SetTag ( i , tag ) ;
71713: LD_VAR 0 4
71717: PPUSH
71718: LD_VAR 0 9
71722: PPUSH
71723: CALL_OW 109
// end else
71727: GO 71800
// if enemy then
71729: LD_VAR 0 5
71733: IFFALSE 71800
// begin if GetWeapon ( i ) = ru_time_lapser then
71735: LD_VAR 0 4
71739: PPUSH
71740: CALL_OW 264
71744: PUSH
71745: LD_INT 49
71747: EQUAL
71748: IFFALSE 71776
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71750: LD_VAR 0 4
71754: PPUSH
71755: LD_VAR 0 5
71759: PPUSH
71760: LD_VAR 0 4
71764: PPUSH
71765: CALL_OW 74
71769: PPUSH
71770: CALL_OW 112
71774: GO 71800
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71776: LD_VAR 0 4
71780: PPUSH
71781: LD_VAR 0 5
71785: PPUSH
71786: LD_VAR 0 4
71790: PPUSH
71791: CALL_OW 74
71795: PPUSH
71796: CALL 72729 0 2
// end ; end ;
71800: GO 71380
71802: POP
71803: POP
// end ;
71804: LD_VAR 0 3
71808: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71809: LD_INT 0
71811: PPUSH
71812: PPUSH
71813: PPUSH
// if not unit or IsInUnit ( unit ) then
71814: LD_VAR 0 1
71818: NOT
71819: PUSH
71820: LD_VAR 0 1
71824: PPUSH
71825: CALL_OW 310
71829: OR
71830: IFFALSE 71834
// exit ;
71832: GO 71925
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71834: LD_ADDR_VAR 0 4
71838: PUSH
71839: LD_VAR 0 1
71843: PPUSH
71844: CALL_OW 250
71848: PPUSH
71849: LD_VAR 0 2
71853: PPUSH
71854: LD_INT 1
71856: PPUSH
71857: CALL_OW 272
71861: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71862: LD_ADDR_VAR 0 5
71866: PUSH
71867: LD_VAR 0 1
71871: PPUSH
71872: CALL_OW 251
71876: PPUSH
71877: LD_VAR 0 2
71881: PPUSH
71882: LD_INT 1
71884: PPUSH
71885: CALL_OW 273
71889: ST_TO_ADDR
// if ValidHex ( x , y ) then
71890: LD_VAR 0 4
71894: PPUSH
71895: LD_VAR 0 5
71899: PPUSH
71900: CALL_OW 488
71904: IFFALSE 71925
// ComTurnXY ( unit , x , y ) ;
71906: LD_VAR 0 1
71910: PPUSH
71911: LD_VAR 0 4
71915: PPUSH
71916: LD_VAR 0 5
71920: PPUSH
71921: CALL_OW 118
// end ;
71925: LD_VAR 0 3
71929: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71930: LD_INT 0
71932: PPUSH
71933: PPUSH
// result := false ;
71934: LD_ADDR_VAR 0 3
71938: PUSH
71939: LD_INT 0
71941: ST_TO_ADDR
// if not units then
71942: LD_VAR 0 2
71946: NOT
71947: IFFALSE 71951
// exit ;
71949: GO 71996
// for i in units do
71951: LD_ADDR_VAR 0 4
71955: PUSH
71956: LD_VAR 0 2
71960: PUSH
71961: FOR_IN
71962: IFFALSE 71994
// if See ( side , i ) then
71964: LD_VAR 0 1
71968: PPUSH
71969: LD_VAR 0 4
71973: PPUSH
71974: CALL_OW 292
71978: IFFALSE 71992
// begin result := true ;
71980: LD_ADDR_VAR 0 3
71984: PUSH
71985: LD_INT 1
71987: ST_TO_ADDR
// exit ;
71988: POP
71989: POP
71990: GO 71996
// end ;
71992: GO 71961
71994: POP
71995: POP
// end ;
71996: LD_VAR 0 3
72000: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72001: LD_INT 0
72003: PPUSH
72004: PPUSH
72005: PPUSH
72006: PPUSH
// if not unit or not points then
72007: LD_VAR 0 1
72011: NOT
72012: PUSH
72013: LD_VAR 0 2
72017: NOT
72018: OR
72019: IFFALSE 72023
// exit ;
72021: GO 72113
// dist := 99999 ;
72023: LD_ADDR_VAR 0 5
72027: PUSH
72028: LD_INT 99999
72030: ST_TO_ADDR
// for i in points do
72031: LD_ADDR_VAR 0 4
72035: PUSH
72036: LD_VAR 0 2
72040: PUSH
72041: FOR_IN
72042: IFFALSE 72111
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72044: LD_ADDR_VAR 0 6
72048: PUSH
72049: LD_VAR 0 1
72053: PPUSH
72054: LD_VAR 0 4
72058: PUSH
72059: LD_INT 1
72061: ARRAY
72062: PPUSH
72063: LD_VAR 0 4
72067: PUSH
72068: LD_INT 2
72070: ARRAY
72071: PPUSH
72072: CALL_OW 297
72076: ST_TO_ADDR
// if tmpDist < dist then
72077: LD_VAR 0 6
72081: PUSH
72082: LD_VAR 0 5
72086: LESS
72087: IFFALSE 72109
// begin result := i ;
72089: LD_ADDR_VAR 0 3
72093: PUSH
72094: LD_VAR 0 4
72098: ST_TO_ADDR
// dist := tmpDist ;
72099: LD_ADDR_VAR 0 5
72103: PUSH
72104: LD_VAR 0 6
72108: ST_TO_ADDR
// end ; end ;
72109: GO 72041
72111: POP
72112: POP
// end ;
72113: LD_VAR 0 3
72117: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72118: LD_INT 0
72120: PPUSH
// uc_side := side ;
72121: LD_ADDR_OWVAR 20
72125: PUSH
72126: LD_VAR 0 1
72130: ST_TO_ADDR
// uc_nation := 3 ;
72131: LD_ADDR_OWVAR 21
72135: PUSH
72136: LD_INT 3
72138: ST_TO_ADDR
// vc_chassis := 25 ;
72139: LD_ADDR_OWVAR 37
72143: PUSH
72144: LD_INT 25
72146: ST_TO_ADDR
// vc_engine := engine_siberite ;
72147: LD_ADDR_OWVAR 39
72151: PUSH
72152: LD_INT 3
72154: ST_TO_ADDR
// vc_control := control_computer ;
72155: LD_ADDR_OWVAR 38
72159: PUSH
72160: LD_INT 3
72162: ST_TO_ADDR
// vc_weapon := 59 ;
72163: LD_ADDR_OWVAR 40
72167: PUSH
72168: LD_INT 59
72170: ST_TO_ADDR
// result := CreateVehicle ;
72171: LD_ADDR_VAR 0 5
72175: PUSH
72176: CALL_OW 45
72180: ST_TO_ADDR
// SetDir ( result , d ) ;
72181: LD_VAR 0 5
72185: PPUSH
72186: LD_VAR 0 4
72190: PPUSH
72191: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72195: LD_VAR 0 5
72199: PPUSH
72200: LD_VAR 0 2
72204: PPUSH
72205: LD_VAR 0 3
72209: PPUSH
72210: LD_INT 0
72212: PPUSH
72213: CALL_OW 48
// end ;
72217: LD_VAR 0 5
72221: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72222: LD_INT 0
72224: PPUSH
72225: PPUSH
72226: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72227: LD_ADDR_VAR 0 2
72231: PUSH
72232: LD_INT 0
72234: PUSH
72235: LD_INT 0
72237: PUSH
72238: LD_INT 0
72240: PUSH
72241: LD_INT 0
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72250: LD_VAR 0 1
72254: NOT
72255: PUSH
72256: LD_VAR 0 1
72260: PPUSH
72261: CALL_OW 264
72265: PUSH
72266: LD_INT 12
72268: PUSH
72269: LD_INT 51
72271: PUSH
72272: LD_INT 32
72274: PUSH
72275: LD_INT 89
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: IN
72284: NOT
72285: OR
72286: IFFALSE 72290
// exit ;
72288: GO 72388
// for i := 1 to 3 do
72290: LD_ADDR_VAR 0 3
72294: PUSH
72295: DOUBLE
72296: LD_INT 1
72298: DEC
72299: ST_TO_ADDR
72300: LD_INT 3
72302: PUSH
72303: FOR_TO
72304: IFFALSE 72386
// begin tmp := GetCargo ( cargo , i ) ;
72306: LD_ADDR_VAR 0 4
72310: PUSH
72311: LD_VAR 0 1
72315: PPUSH
72316: LD_VAR 0 3
72320: PPUSH
72321: CALL_OW 289
72325: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72326: LD_ADDR_VAR 0 2
72330: PUSH
72331: LD_VAR 0 2
72335: PPUSH
72336: LD_VAR 0 3
72340: PPUSH
72341: LD_VAR 0 4
72345: PPUSH
72346: CALL_OW 1
72350: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72351: LD_ADDR_VAR 0 2
72355: PUSH
72356: LD_VAR 0 2
72360: PPUSH
72361: LD_INT 4
72363: PPUSH
72364: LD_VAR 0 2
72368: PUSH
72369: LD_INT 4
72371: ARRAY
72372: PUSH
72373: LD_VAR 0 4
72377: PLUS
72378: PPUSH
72379: CALL_OW 1
72383: ST_TO_ADDR
// end ;
72384: GO 72303
72386: POP
72387: POP
// end ;
72388: LD_VAR 0 2
72392: RET
// export function Length ( array ) ; begin
72393: LD_INT 0
72395: PPUSH
// result := array + 0 ;
72396: LD_ADDR_VAR 0 2
72400: PUSH
72401: LD_VAR 0 1
72405: PUSH
72406: LD_INT 0
72408: PLUS
72409: ST_TO_ADDR
// end ;
72410: LD_VAR 0 2
72414: RET
// export function PrepareArray ( array ) ; begin
72415: LD_INT 0
72417: PPUSH
// result := array diff 0 ;
72418: LD_ADDR_VAR 0 2
72422: PUSH
72423: LD_VAR 0 1
72427: PUSH
72428: LD_INT 0
72430: DIFF
72431: ST_TO_ADDR
// if not result [ 1 ] then
72432: LD_VAR 0 2
72436: PUSH
72437: LD_INT 1
72439: ARRAY
72440: NOT
72441: IFFALSE 72461
// result := Delete ( result , 1 ) ;
72443: LD_ADDR_VAR 0 2
72447: PUSH
72448: LD_VAR 0 2
72452: PPUSH
72453: LD_INT 1
72455: PPUSH
72456: CALL_OW 3
72460: ST_TO_ADDR
// end ;
72461: LD_VAR 0 2
72465: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72466: LD_INT 0
72468: PPUSH
72469: PPUSH
72470: PPUSH
72471: PPUSH
// sibRocketRange := 25 ;
72472: LD_ADDR_VAR 0 6
72476: PUSH
72477: LD_INT 25
72479: ST_TO_ADDR
// result := false ;
72480: LD_ADDR_VAR 0 4
72484: PUSH
72485: LD_INT 0
72487: ST_TO_ADDR
// for i := 0 to 5 do
72488: LD_ADDR_VAR 0 5
72492: PUSH
72493: DOUBLE
72494: LD_INT 0
72496: DEC
72497: ST_TO_ADDR
72498: LD_INT 5
72500: PUSH
72501: FOR_TO
72502: IFFALSE 72569
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72504: LD_VAR 0 1
72508: PPUSH
72509: LD_VAR 0 5
72513: PPUSH
72514: LD_VAR 0 6
72518: PPUSH
72519: CALL_OW 272
72523: PPUSH
72524: LD_VAR 0 2
72528: PPUSH
72529: LD_VAR 0 5
72533: PPUSH
72534: LD_VAR 0 6
72538: PPUSH
72539: CALL_OW 273
72543: PPUSH
72544: LD_VAR 0 3
72548: PPUSH
72549: CALL_OW 309
72553: IFFALSE 72567
// begin result := true ;
72555: LD_ADDR_VAR 0 4
72559: PUSH
72560: LD_INT 1
72562: ST_TO_ADDR
// exit ;
72563: POP
72564: POP
72565: GO 72571
// end ;
72567: GO 72501
72569: POP
72570: POP
// end ;
72571: LD_VAR 0 4
72575: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72576: LD_INT 0
72578: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72579: LD_VAR 0 1
72583: PPUSH
72584: LD_VAR 0 2
72588: PPUSH
72589: LD_INT 0
72591: PPUSH
72592: LD_INT 0
72594: PPUSH
72595: LD_INT 1
72597: PPUSH
72598: LD_INT 0
72600: PPUSH
72601: CALL_OW 587
// end ;
72605: LD_VAR 0 3
72609: RET
// export function CenterOnNow ( unit ) ; begin
72610: LD_INT 0
72612: PPUSH
// result := IsInUnit ( unit ) ;
72613: LD_ADDR_VAR 0 2
72617: PUSH
72618: LD_VAR 0 1
72622: PPUSH
72623: CALL_OW 310
72627: ST_TO_ADDR
// if not result then
72628: LD_VAR 0 2
72632: NOT
72633: IFFALSE 72645
// result := unit ;
72635: LD_ADDR_VAR 0 2
72639: PUSH
72640: LD_VAR 0 1
72644: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72645: LD_VAR 0 1
72649: PPUSH
72650: CALL_OW 87
// end ;
72654: LD_VAR 0 2
72658: RET
// export function ComMoveHex ( unit , hex ) ; begin
72659: LD_INT 0
72661: PPUSH
// if not hex then
72662: LD_VAR 0 2
72666: NOT
72667: IFFALSE 72671
// exit ;
72669: GO 72724
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72671: LD_VAR 0 2
72675: PUSH
72676: LD_INT 1
72678: ARRAY
72679: PPUSH
72680: LD_VAR 0 2
72684: PUSH
72685: LD_INT 2
72687: ARRAY
72688: PPUSH
72689: CALL_OW 428
72693: IFFALSE 72697
// exit ;
72695: GO 72724
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72697: LD_VAR 0 1
72701: PPUSH
72702: LD_VAR 0 2
72706: PUSH
72707: LD_INT 1
72709: ARRAY
72710: PPUSH
72711: LD_VAR 0 2
72715: PUSH
72716: LD_INT 2
72718: ARRAY
72719: PPUSH
72720: CALL_OW 111
// end ;
72724: LD_VAR 0 3
72728: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72729: LD_INT 0
72731: PPUSH
72732: PPUSH
72733: PPUSH
// if not unit or not enemy then
72734: LD_VAR 0 1
72738: NOT
72739: PUSH
72740: LD_VAR 0 2
72744: NOT
72745: OR
72746: IFFALSE 72750
// exit ;
72748: GO 72874
// x := GetX ( enemy ) ;
72750: LD_ADDR_VAR 0 4
72754: PUSH
72755: LD_VAR 0 2
72759: PPUSH
72760: CALL_OW 250
72764: ST_TO_ADDR
// y := GetY ( enemy ) ;
72765: LD_ADDR_VAR 0 5
72769: PUSH
72770: LD_VAR 0 2
72774: PPUSH
72775: CALL_OW 251
72779: ST_TO_ADDR
// if ValidHex ( x , y ) then
72780: LD_VAR 0 4
72784: PPUSH
72785: LD_VAR 0 5
72789: PPUSH
72790: CALL_OW 488
72794: IFFALSE 72874
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72796: LD_VAR 0 2
72800: PPUSH
72801: CALL_OW 247
72805: PUSH
72806: LD_INT 3
72808: PUSH
72809: LD_INT 2
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: IN
72816: PUSH
72817: LD_VAR 0 1
72821: PPUSH
72822: CALL_OW 255
72826: PPUSH
72827: LD_VAR 0 2
72831: PPUSH
72832: CALL_OW 292
72836: AND
72837: IFFALSE 72855
// ComAttackUnit ( unit , enemy ) else
72839: LD_VAR 0 1
72843: PPUSH
72844: LD_VAR 0 2
72848: PPUSH
72849: CALL_OW 115
72853: GO 72874
// ComAgressiveMove ( unit , x , y ) ;
72855: LD_VAR 0 1
72859: PPUSH
72860: LD_VAR 0 4
72864: PPUSH
72865: LD_VAR 0 5
72869: PPUSH
72870: CALL_OW 114
// end ; end_of_file
72874: LD_VAR 0 3
72878: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72879: LD_VAR 0 1
72883: PPUSH
72884: LD_VAR 0 2
72888: PPUSH
72889: LD_VAR 0 3
72893: PPUSH
72894: LD_VAR 0 4
72898: PPUSH
72899: LD_VAR 0 5
72903: PPUSH
72904: LD_VAR 0 6
72908: PPUSH
72909: CALL 10417 0 6
// end ;
72913: PPOPN 6
72915: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72916: LD_INT 0
72918: PPUSH
// begin if not units then
72919: LD_VAR 0 1
72923: NOT
72924: IFFALSE 72928
// exit ;
72926: GO 72928
// end ;
72928: PPOPN 7
72930: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72931: CALL 10321 0 0
// end ;
72935: PPOPN 1
72937: END
