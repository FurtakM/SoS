// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 2244 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5867 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 36079 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 30507 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 30507 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 30507 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 30507 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 30507 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 30507 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 30507 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 30507 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 30507 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 30507 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// if debug then
1535: LD_EXP 1
1539: IFFALSE 1758
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1541: LD_ADDR_EXP 30
1545: PUSH
1546: LD_INT 13
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 27
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1000
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 3
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 13
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 25
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 1000
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 3
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 13
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 27
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1000
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 13
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 27
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 40
1730: PUSH
1731: LD_INT 40
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// uc_side := 5 ;
1758: LD_ADDR_OWVAR 20
1762: PUSH
1763: LD_INT 5
1765: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1766: LD_ADDR_EXP 26
1770: PUSH
1771: LD_STRING Abdul
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 30507 0 3
1784: ST_TO_ADDR
// end ;
1785: LD_VAR 0 1
1789: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1790: LD_STRING 04_1_KaganCaptured
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 30
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PPUSH
1811: CALL_OW 69
1815: NOT
1816: AND
1817: PUSH
1818: LD_INT 124
1820: PPUSH
1821: LD_INT 26
1823: PPUSH
1824: CALL_OW 428
1828: PUSH
1829: LD_INT 0
1831: EQUAL
1832: PUSH
1833: LD_INT 124
1835: PPUSH
1836: LD_INT 26
1838: PPUSH
1839: CALL_OW 428
1843: PPUSH
1844: CALL_OW 255
1848: PUSH
1849: LD_INT 2
1851: EQUAL
1852: XOR
1853: AND
1854: IFFALSE 2241
1856: GO 1858
1858: DISABLE
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
// begin enable ;
1863: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1864: LD_EXP 33
1868: NOT
1869: PUSH
1870: LD_EXP 33
1874: PUSH
1875: LD_INT 4
1877: GREATER
1878: OR
1879: IFFALSE 1889
// cargoCounter := 1 ;
1881: LD_ADDR_EXP 33
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1889: LD_ADDR_VAR 0 2
1893: PUSH
1894: LD_INT 142
1896: PUSH
1897: LD_INT 15
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 129
1906: PUSH
1907: LD_INT 11
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 138
1916: PUSH
1917: LD_INT 9
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 133
1926: PUSH
1927: LD_INT 10
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: ST_TO_ADDR
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1956: LD_INT 5
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 13
1964: PPUSH
1965: LD_INT 2
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 32
1973: PPUSH
1974: LD_INT 70
1976: PPUSH
1977: CALL 336 0 7
// veh := CreateVehicle ;
1981: LD_ADDR_VAR 0 1
1985: PUSH
1986: CALL_OW 45
1990: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1991: LD_VAR 0 1
1995: PPUSH
1996: LD_INT 3
1998: PPUSH
1999: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 8
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// if not cargoDriver then
2018: LD_EXP 32
2022: NOT
2023: IFFALSE 2048
// begin PrepareHuman ( false , 1 , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: CALL_OW 380
// cargoDriver := CreateHuman ;
2038: LD_ADDR_EXP 32
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2048: LD_EXP 32
2052: PPUSH
2053: LD_VAR 0 1
2057: PPUSH
2058: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2062: LD_VAR 0 1
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 100
2072: PPUSH
2073: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2077: LD_VAR 0 1
2081: PPUSH
2082: LD_VAR 0 2
2086: PUSH
2087: LD_EXP 33
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PPUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_EXP 33
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: CALL_OW 111
// AddComUnload ( veh ) ;
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2125: LD_VAR 0 1
2129: PPUSH
2130: LD_INT 133
2132: PPUSH
2133: LD_INT 2
2135: PPUSH
2136: CALL_OW 171
// wait ( 0 0$5 ) ;
2140: LD_INT 175
2142: PPUSH
2143: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// if not HasTask ( veh ) then
2154: LD_VAR 0 1
2158: PPUSH
2159: CALL_OW 314
2163: NOT
2164: IFFALSE 2181
// ComMoveXY ( veh , 133 , 2 ) ;
2166: LD_VAR 0 1
2170: PPUSH
2171: LD_INT 133
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2181: LD_VAR 0 1
2185: PPUSH
2186: LD_INT 133
2188: PPUSH
2189: LD_INT 2
2191: PPUSH
2192: CALL_OW 307
2196: PUSH
2197: LD_VAR 0 1
2201: PPUSH
2202: LD_INT 8
2204: PPUSH
2205: CALL_OW 308
2209: OR
2210: IFFALSE 2147
// RemoveUnit ( cargoDriver ) ;
2212: LD_EXP 32
2216: PPUSH
2217: CALL_OW 64
// RemoveUnit ( veh ) ;
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 64
// if tick >= 20 20$00 then
2230: LD_OWVAR 1
2234: PUSH
2235: LD_INT 42000
2237: GREATEREQUAL
2238: IFFALSE 2241
// disable ;
2240: DISABLE
// end ; end_of_file
2241: PPOPN 2
2243: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
2254: PPUSH
// uc_side := 3 ;
2255: LD_ADDR_OWVAR 20
2259: PUSH
2260: LD_INT 3
2262: ST_TO_ADDR
// uc_nation := 3 ;
2263: LD_ADDR_OWVAR 21
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// ruForce := [ ] ;
2271: LD_ADDR_EXP 37
2275: PUSH
2276: EMPTY
2277: ST_TO_ADDR
// ruMech := [ ] ;
2278: LD_ADDR_EXP 39
2282: PUSH
2283: EMPTY
2284: ST_TO_ADDR
// ruEng := [ ] ;
2285: LD_ADDR_EXP 38
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// ruSci := [ ] ;
2292: LD_ADDR_EXP 40
2296: PUSH
2297: EMPTY
2298: ST_TO_ADDR
// ruMobile := [ ] ;
2299: LD_ADDR_EXP 41
2303: PUSH
2304: EMPTY
2305: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2306: LD_ADDR_EXP 34
2310: PUSH
2311: LD_STRING Burlak
2313: PPUSH
2314: LD_INT 0
2316: PPUSH
2317: LD_STRING 
2319: PPUSH
2320: CALL 30507 0 3
2324: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2325: LD_ADDR_EXP 35
2329: PUSH
2330: LD_STRING Gaydar
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: LD_STRING 
2338: PPUSH
2339: CALL 30507 0 3
2343: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2344: LD_ADDR_EXP 36
2348: PUSH
2349: LD_STRING Kuzmov
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: LD_STRING 
2357: PPUSH
2358: CALL 30507 0 3
2362: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2363: LD_EXP 36
2367: PPUSH
2368: LD_INT 200
2370: PPUSH
2371: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2375: LD_INT 200
2377: PPUSH
2378: LD_STRING chuikov
2380: PPUSH
2381: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2385: LD_INT 200
2387: PPUSH
2388: CALL_OW 274
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: LD_INT 800
2398: PUSH
2399: LD_INT 1000
2401: PUSH
2402: LD_INT 1250
2404: PUSH
2405: LD_INT 1300
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: PUSH
2414: LD_OWVAR 67
2418: ARRAY
2419: PPUSH
2420: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2424: LD_INT 200
2426: PPUSH
2427: CALL_OW 274
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: LD_INT 160
2437: PPUSH
2438: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2442: LD_INT 225
2444: PPUSH
2445: CALL_OW 274
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_INT 200
2455: PPUSH
2456: CALL_OW 277
// oil := 150 ;
2460: LD_ADDR_VAR 0 9
2464: PUSH
2465: LD_INT 150
2467: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2468: LD_EXP 5
2472: PUSH
2473: LD_INT 94500
2475: PUSH
2476: LD_INT 84000
2478: PUSH
2479: LD_INT 73500
2481: PUSH
2482: LD_INT 67200
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: LD_OWVAR 67
2495: ARRAY
2496: GREATEREQUAL
2497: IFFALSE 2652
// begin oil := 450 ;
2499: LD_ADDR_VAR 0 9
2503: PUSH
2504: LD_INT 450
2506: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 123
2514: PUSH
2515: LD_INT 17
2517: PUSH
2518: LD_INT 3
2520: PUSH
2521: LD_INT 31
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 152
2532: PUSH
2533: LD_INT 38
2535: PUSH
2536: LD_INT 3
2538: PUSH
2539: LD_INT 31
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 81
2550: PUSH
2551: LD_INT 6
2553: PUSH
2554: LD_INT 4
2556: PUSH
2557: LD_INT 31
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 113
2568: PUSH
2569: LD_INT 67
2571: PUSH
2572: LD_INT 4
2574: PUSH
2575: LD_INT 32
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: ST_TO_ADDR
// for i in tmp do
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_VAR 0 7
2599: PUSH
2600: FOR_IN
2601: IFFALSE 2650
// begin bc_type := i [ 4 ] ;
2603: LD_ADDR_OWVAR 42
2607: PUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_INT 4
2615: ARRAY
2616: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2617: LD_VAR 0 4
2621: PUSH
2622: LD_INT 1
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 4
2630: PUSH
2631: LD_INT 2
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 3
2642: ARRAY
2643: PPUSH
2644: CALL_OW 47
// end ;
2648: GO 2600
2650: POP
2651: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2652: LD_INT 225
2654: PPUSH
2655: CALL_OW 274
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: LD_VAR 0 9
2667: PPUSH
2668: CALL_OW 277
// if Difficulty > 1 then
2672: LD_OWVAR 67
2676: PUSH
2677: LD_INT 1
2679: GREATER
2680: IFFALSE 2775
// begin bc_type := b_bunker ;
2682: LD_ADDR_OWVAR 42
2686: PUSH
2687: LD_INT 32
2689: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2690: LD_ADDR_VAR 0 7
2694: PUSH
2695: LD_INT 121
2697: PUSH
2698: LD_INT 85
2700: PUSH
2701: LD_INT 5
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 93
2711: PUSH
2712: LD_INT 72
2714: PUSH
2715: LD_INT 1
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: ST_TO_ADDR
// for i in tmp do
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: LD_VAR 0 7
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2773
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2740: LD_VAR 0 4
2744: PUSH
2745: LD_INT 1
2747: ARRAY
2748: PPUSH
2749: LD_VAR 0 4
2753: PUSH
2754: LD_INT 2
2756: ARRAY
2757: PPUSH
2758: LD_VAR 0 4
2762: PUSH
2763: LD_INT 3
2765: ARRAY
2766: PPUSH
2767: CALL_OW 47
2771: GO 2737
2773: POP
2774: POP
// end ; base := GetBase ( ruMainBase ) ;
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 200
2782: PPUSH
2783: CALL_OW 274
2787: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2788: LD_ADDR_VAR 0 3
2792: PUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: CALL_OW 417
2802: ST_TO_ADDR
// for b in blist do
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_VAR 0 3
2812: PUSH
2813: FOR_IN
2814: IFFALSE 3265
// begin if b [ 1 ] = b_factory then
2816: LD_VAR 0 5
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: PUSH
2825: LD_INT 3
2827: EQUAL
2828: IFFALSE 2979
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2830: LD_ADDR_VAR 0 8
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 2
2842: ARRAY
2843: PPUSH
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 3
2851: ARRAY
2852: PPUSH
2853: CALL_OW 428
2857: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2858: LD_ADDR_VAR 0 4
2862: PUSH
2863: DOUBLE
2864: LD_INT 1
2866: DEC
2867: ST_TO_ADDR
2868: LD_INT 2
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: LD_OWVAR 67
2878: PLUS
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: LD_EXP 10
2888: PUSH
2889: LD_INT 3
2891: GREATER
2892: PUSH
2893: LD_INT 1
2895: PLUS
2896: ARRAY
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2975
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: LD_INT 1
2909: PUSH
2910: LD_OWVAR 67
2914: PLUS
2915: PPUSH
2916: CALL_OW 380
// un := CreateHuman ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: CALL_OW 44
2929: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2930: LD_ADDR_EXP 39
2934: PUSH
2935: LD_EXP 39
2939: PPUSH
2940: LD_EXP 39
2944: PUSH
2945: LD_INT 1
2947: PLUS
2948: PPUSH
2949: LD_VAR 0 6
2953: PPUSH
2954: CALL_OW 1
2958: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2959: LD_VAR 0 6
2963: PPUSH
2964: LD_VAR 0 8
2968: PPUSH
2969: CALL_OW 52
// end ;
2973: GO 2898
2975: POP
2976: POP
// end else
2977: GO 3263
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2979: LD_VAR 0 5
2983: PUSH
2984: LD_INT 1
2986: ARRAY
2987: PUSH
2988: LD_INT 6
2990: PUSH
2991: LD_INT 7
2993: PUSH
2994: LD_INT 8
2996: PUSH
2997: LD_INT 10
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: IN
3006: IFFALSE 3116
// begin for i := 1 to 2 do
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: DOUBLE
3014: LD_INT 1
3016: DEC
3017: ST_TO_ADDR
3018: LD_INT 2
3020: PUSH
3021: FOR_TO
3022: IFFALSE 3112
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3024: LD_INT 0
3026: PPUSH
3027: LD_INT 4
3029: PPUSH
3030: LD_OWVAR 67
3034: PPUSH
3035: CALL_OW 380
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3049: LD_ADDR_EXP 40
3053: PUSH
3054: LD_EXP 40
3058: PPUSH
3059: LD_EXP 40
3063: PUSH
3064: LD_INT 1
3066: PLUS
3067: PPUSH
3068: LD_VAR 0 6
3072: PPUSH
3073: CALL_OW 1
3077: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3078: LD_VAR 0 6
3082: PPUSH
3083: LD_VAR 0 5
3087: PUSH
3088: LD_INT 2
3090: ARRAY
3091: PPUSH
3092: LD_VAR 0 5
3096: PUSH
3097: LD_INT 3
3099: ARRAY
3100: PPUSH
3101: CALL_OW 428
3105: PPUSH
3106: CALL_OW 52
// end ;
3110: GO 3021
3112: POP
3113: POP
// end else
3114: GO 3263
// if b [ 1 ] = b_warehouse then
3116: LD_VAR 0 5
3120: PUSH
3121: LD_INT 1
3123: ARRAY
3124: PUSH
3125: LD_INT 1
3127: EQUAL
3128: IFFALSE 3263
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3130: LD_ADDR_VAR 0 4
3134: PUSH
3135: DOUBLE
3136: LD_INT 1
3138: DEC
3139: ST_TO_ADDR
3140: LD_INT 1
3142: PUSH
3143: LD_INT 1
3145: PUSH
3146: LD_OWVAR 67
3150: PLUS
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_EXP 10
3160: PUSH
3161: LD_INT 3
3163: GREATER
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: ARRAY
3169: PUSH
3170: FOR_TO
3171: IFFALSE 3261
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3173: LD_INT 0
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: LD_OWVAR 67
3183: PPUSH
3184: CALL_OW 380
// un := CreateHuman ;
3188: LD_ADDR_VAR 0 6
3192: PUSH
3193: CALL_OW 44
3197: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3198: LD_ADDR_EXP 38
3202: PUSH
3203: LD_EXP 38
3207: PPUSH
3208: LD_EXP 38
3212: PUSH
3213: LD_INT 1
3215: PLUS
3216: PPUSH
3217: LD_VAR 0 6
3221: PPUSH
3222: CALL_OW 1
3226: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3227: LD_VAR 0 6
3231: PPUSH
3232: LD_VAR 0 5
3236: PUSH
3237: LD_INT 2
3239: ARRAY
3240: PPUSH
3241: LD_VAR 0 5
3245: PUSH
3246: LD_INT 3
3248: ARRAY
3249: PPUSH
3250: CALL_OW 428
3254: PPUSH
3255: CALL_OW 52
// end ;
3259: GO 3170
3261: POP
3262: POP
// end ; end ;
3263: GO 2813
3265: POP
3266: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3267: LD_ADDR_VAR 0 3
3271: PUSH
3272: LD_INT 22
3274: PUSH
3275: LD_INT 3
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 21
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PPUSH
3296: CALL_OW 69
3300: ST_TO_ADDR
// for b in blist do
3301: LD_ADDR_VAR 0 5
3305: PUSH
3306: LD_VAR 0 3
3310: PUSH
3311: FOR_IN
3312: IFFALSE 3334
// SetBLevel ( b , 3 + Difficulty ) ;
3314: LD_VAR 0 5
3318: PPUSH
3319: LD_INT 3
3321: PUSH
3322: LD_OWVAR 67
3326: PLUS
3327: PPUSH
3328: CALL_OW 241
3332: GO 3311
3334: POP
3335: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3336: LD_ADDR_VAR 0 3
3340: PUSH
3341: LD_INT 22
3343: PUSH
3344: LD_INT 3
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 30
3353: PUSH
3354: LD_INT 32
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 69
3369: ST_TO_ADDR
// for b in blist do
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 3
3379: PUSH
3380: FOR_IN
3381: IFFALSE 3490
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3383: LD_INT 0
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: LD_INT 1
3391: PUSH
3392: LD_OWVAR 67
3396: PLUS
3397: PPUSH
3398: CALL_OW 380
// un := CreateHuman ;
3402: LD_ADDR_VAR 0 6
3406: PUSH
3407: CALL_OW 44
3411: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3412: LD_ADDR_EXP 37
3416: PUSH
3417: LD_EXP 37
3421: PPUSH
3422: LD_EXP 37
3426: PUSH
3427: LD_INT 1
3429: PLUS
3430: PPUSH
3431: LD_VAR 0 6
3435: PPUSH
3436: CALL_OW 1
3440: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3441: LD_VAR 0 6
3445: PPUSH
3446: LD_VAR 0 5
3450: PPUSH
3451: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3455: LD_VAR 0 5
3459: PPUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 43
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_VAR 0 5
3474: PUSH
3475: LD_INT 2
3477: MOD
3478: PUSH
3479: LD_INT 1
3481: PLUS
3482: ARRAY
3483: PPUSH
3484: CALL_OW 431
// end ;
3488: GO 3380
3490: POP
3491: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3492: LD_ADDR_VAR 0 3
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_INT 3
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 30
3509: PUSH
3510: LD_INT 31
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 69
3525: ST_TO_ADDR
// for b in blist do
3526: LD_ADDR_VAR 0 5
3530: PUSH
3531: LD_VAR 0 3
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3636
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3539: LD_INT 0
3541: PPUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_INT 1
3547: PUSH
3548: LD_OWVAR 67
3552: PLUS
3553: PPUSH
3554: CALL_OW 380
// un := CreateHuman ;
3558: LD_ADDR_VAR 0 6
3562: PUSH
3563: CALL_OW 44
3567: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3568: LD_ADDR_EXP 37
3572: PUSH
3573: LD_EXP 37
3577: PPUSH
3578: LD_EXP 37
3582: PUSH
3583: LD_INT 1
3585: PLUS
3586: PPUSH
3587: LD_VAR 0 6
3591: PPUSH
3592: CALL_OW 1
3596: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3597: LD_VAR 0 6
3601: PPUSH
3602: LD_VAR 0 5
3606: PPUSH
3607: CALL_OW 254
3611: PUSH
3612: LD_INT 3
3614: PLUS
3615: PPUSH
3616: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3620: LD_VAR 0 6
3624: PPUSH
3625: LD_VAR 0 5
3629: PPUSH
3630: CALL_OW 52
// end ;
3634: GO 3536
3636: POP
3637: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3638: LD_ADDR_VAR 0 3
3642: PUSH
3643: LD_INT 22
3645: PUSH
3646: LD_INT 3
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 2
3655: PUSH
3656: LD_INT 30
3658: PUSH
3659: LD_INT 4
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 30
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 69
3689: ST_TO_ADDR
// for b in blist do
3690: LD_ADDR_VAR 0 5
3694: PUSH
3695: LD_VAR 0 3
3699: PUSH
3700: FOR_IN
3701: IFFALSE 3797
// begin for i := 1 to 2 do
3703: LD_ADDR_VAR 0 4
3707: PUSH
3708: DOUBLE
3709: LD_INT 1
3711: DEC
3712: ST_TO_ADDR
3713: LD_INT 2
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3793
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3719: LD_INT 0
3721: PPUSH
3722: LD_INT 1
3724: PPUSH
3725: LD_INT 1
3727: PUSH
3728: LD_OWVAR 67
3732: PLUS
3733: PPUSH
3734: CALL_OW 380
// un := CreateHuman ;
3738: LD_ADDR_VAR 0 6
3742: PUSH
3743: CALL_OW 44
3747: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3748: LD_ADDR_EXP 37
3752: PUSH
3753: LD_EXP 37
3757: PPUSH
3758: LD_EXP 37
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: PPUSH
3767: LD_VAR 0 6
3771: PPUSH
3772: CALL_OW 1
3776: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3777: LD_VAR 0 6
3781: PPUSH
3782: LD_VAR 0 5
3786: PPUSH
3787: CALL_OW 52
// end ;
3791: GO 3716
3793: POP
3794: POP
// end ;
3795: GO 3700
3797: POP
3798: POP
// if ibrahimOnRuSide then
3799: LD_EXP 3
3803: IFFALSE 3901
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3805: LD_ADDR_EXP 21
3809: PUSH
3810: LD_STRING IbrahimRu
3812: PPUSH
3813: LD_INT 0
3815: PPUSH
3816: LD_STRING 
3818: PPUSH
3819: CALL 30507 0 3
3823: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3824: LD_EXP 21
3828: PPUSH
3829: LD_INT 121
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 48
// ComHold ( Ibrahim ) ;
3842: LD_EXP 21
3846: PPUSH
3847: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 2
3859: PPUSH
3860: CALL_OW 380
// ruSol := CreateHuman ;
3864: LD_ADDR_EXP 42
3868: PUSH
3869: CALL_OW 44
3873: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3874: LD_EXP 42
3878: PPUSH
3879: LD_INT 121
3881: PPUSH
3882: LD_INT 75
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 48
// ComHold ( ruSol ) ;
3892: LD_EXP 42
3896: PPUSH
3897: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3901: LD_ADDR_VAR 0 4
3905: PUSH
3906: DOUBLE
3907: LD_INT 1
3909: DEC
3910: ST_TO_ADDR
3911: LD_INT 2
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_OWVAR 67
3921: PLUS
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_EXP 10
3931: PUSH
3932: LD_INT 3
3934: GREATER
3935: PUSH
3936: LD_INT 1
3938: PLUS
3939: ARRAY
3940: PUSH
3941: FOR_TO
3942: IFFALSE 4011
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3944: LD_VAR 0 8
3948: PPUSH
3949: LD_INT 21
3951: PUSH
3952: LD_INT 23
3954: PUSH
3955: LD_INT 24
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: PUSH
3963: LD_VAR 0 4
3967: PUSH
3968: LD_INT 3
3970: MOD
3971: PUSH
3972: LD_INT 1
3974: PLUS
3975: ARRAY
3976: PPUSH
3977: LD_INT 1
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 43
3985: PUSH
3986: LD_INT 44
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 2
3998: PPUSH
3999: CALL_OW 12
4003: ARRAY
4004: PPUSH
4005: CALL_OW 185
4009: GO 3941
4011: POP
4012: POP
// end ;
4013: LD_VAR 0 1
4017: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
4018: LD_EXP 41
4022: PUSH
4023: LD_EXP 4
4027: NOT
4028: AND
4029: IFFALSE 4516
4031: GO 4033
4033: DISABLE
4034: LD_INT 0
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
4040: PPUSH
// begin enable ;
4041: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4042: LD_ADDR_VAR 0 2
4046: PUSH
4047: LD_EXP 41
4051: PPUSH
4052: LD_INT 21
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PPUSH
4062: CALL_OW 72
4066: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4067: LD_ADDR_VAR 0 4
4071: PUSH
4072: LD_INT 81
4074: PUSH
4075: LD_INT 3
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: LD_INT 95
4087: PUSH
4088: LD_INT 4
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: LD_INT 95
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: LD_INT 95
4107: PUSH
4108: LD_INT 6
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 95
4117: PUSH
4118: LD_INT 7
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 69
4140: ST_TO_ADDR
// for i in filter do
4141: LD_ADDR_VAR 0 1
4145: PUSH
4146: LD_VAR 0 2
4150: PUSH
4151: FOR_IN
4152: IFFALSE 4514
// begin tmp := IsDrivenBy ( i ) ;
4154: LD_ADDR_VAR 0 3
4158: PUSH
4159: LD_VAR 0 1
4163: PPUSH
4164: CALL_OW 311
4168: ST_TO_ADDR
// if not tmp then
4169: LD_VAR 0 3
4173: NOT
4174: IFFALSE 4178
// continue ;
4176: GO 4151
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4178: LD_VAR 0 1
4182: PPUSH
4183: CALL_OW 261
4187: PUSH
4188: LD_INT 90
4190: GREATER
4191: PUSH
4192: LD_VAR 0 1
4196: PPUSH
4197: CALL_OW 110
4201: PUSH
4202: LD_INT 2
4204: EQUAL
4205: AND
4206: IFFALSE 4222
// SetTag ( i , 0 ) else
4208: LD_VAR 0 1
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: CALL_OW 109
4220: GO 4265
// if GetTag ( i ) = 2 then
4222: LD_VAR 0 1
4226: PPUSH
4227: CALL_OW 110
4231: PUSH
4232: LD_INT 2
4234: EQUAL
4235: IFFALSE 4265
// begin x := rand ( 1 , 2 ) ;
4237: LD_ADDR_VAR 0 5
4241: PUSH
4242: LD_INT 1
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 12
4252: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4253: LD_VAR 0 1
4257: PPUSH
4258: LD_INT 200
4260: PPUSH
4261: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4265: LD_VAR 0 1
4269: PPUSH
4270: CALL_OW 256
4274: PUSH
4275: LD_INT 600
4277: GREATEREQUAL
4278: PUSH
4279: LD_VAR 0 1
4283: PPUSH
4284: CALL_OW 110
4288: NOT
4289: AND
4290: IFFALSE 4316
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4292: LD_VAR 0 1
4296: PPUSH
4297: LD_VAR 0 4
4301: PPUSH
4302: LD_VAR 0 1
4306: PPUSH
4307: CALL_OW 74
4311: PPUSH
4312: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4316: LD_VAR 0 1
4320: PPUSH
4321: CALL_OW 256
4325: PUSH
4326: LD_INT 600
4328: LESS
4329: PUSH
4330: LD_VAR 0 1
4334: PPUSH
4335: CALL_OW 110
4339: NOT
4340: AND
4341: IFFALSE 4370
// begin SetTag ( i , 1 ) ;
4343: LD_VAR 0 1
4347: PPUSH
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4355: LD_VAR 0 1
4359: PPUSH
4360: LD_INT 112
4362: PPUSH
4363: LD_INT 119
4365: PPUSH
4366: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 110
4379: PUSH
4380: LD_INT 1
4382: EQUAL
4383: PUSH
4384: LD_VAR 0 1
4388: PPUSH
4389: LD_INT 112
4391: PPUSH
4392: LD_INT 119
4394: PPUSH
4395: CALL_OW 297
4399: PUSH
4400: LD_INT 9
4402: LESS
4403: AND
4404: PUSH
4405: LD_VAR 0 3
4409: AND
4410: IFFALSE 4512
// begin ComExitVehicle ( tmp ) ;
4412: LD_VAR 0 3
4416: PPUSH
4417: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4421: LD_VAR 0 3
4425: PPUSH
4426: LD_VAR 0 1
4430: PPUSH
4431: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4435: LD_INT 35
4437: PPUSH
4438: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4442: LD_VAR 0 1
4446: PPUSH
4447: CALL_OW 256
4451: PUSH
4452: LD_INT 1000
4454: EQUAL
4455: IFFALSE 4435
// ComEnterUnit ( tmp , i ) ;
4457: LD_VAR 0 3
4461: PPUSH
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4471: LD_VAR 0 1
4475: PPUSH
4476: CALL_OW 261
4480: PUSH
4481: LD_INT 50
4483: LESSEQUAL
4484: IFFALSE 4500
// SetTag ( i , 2 ) else
4486: LD_VAR 0 1
4490: PPUSH
4491: LD_INT 2
4493: PPUSH
4494: CALL_OW 109
4498: GO 4512
// SetTag ( i , 0 ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL_OW 109
// end ; end ;
4512: GO 4151
4514: POP
4515: POP
// end ;
4516: PPOPN 5
4518: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4519: LD_EXP 4
4523: NOT
4524: PUSH
4525: LD_EXP 38
4529: AND
4530: IFFALSE 4791
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
// begin enable ;
4541: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: LD_INT 3
4549: PPUSH
4550: LD_INT 22
4552: PUSH
4553: LD_INT 3
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 21
4562: PUSH
4563: LD_INT 3
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: LD_INT 24
4575: PUSH
4576: LD_INT 1000
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: PPUSH
4592: CALL_OW 70
4596: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4597: LD_ADDR_VAR 0 3
4601: PUSH
4602: LD_EXP 38
4606: PPUSH
4607: LD_INT 50
4609: PUSH
4610: EMPTY
4611: LIST
4612: PPUSH
4613: CALL_OW 72
4617: ST_TO_ADDR
// if filter and tmp then
4618: LD_VAR 0 2
4622: PUSH
4623: LD_VAR 0 3
4627: AND
4628: IFFALSE 4720
// begin for i in tmp do
4630: LD_ADDR_VAR 0 1
4634: PUSH
4635: LD_VAR 0 3
4639: PUSH
4640: FOR_IN
4641: IFFALSE 4716
// begin if GetTag ( i ) = tEscape then
4643: LD_VAR 0 1
4647: PPUSH
4648: CALL_OW 110
4652: PUSH
4653: LD_EXP 17
4657: EQUAL
4658: IFFALSE 4662
// continue ;
4660: GO 4640
// if IsInUnit ( i ) then
4662: LD_VAR 0 1
4666: PPUSH
4667: CALL_OW 310
4671: IFFALSE 4684
// ComExitBuilding ( i ) else
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 122
4682: GO 4714
// if not HasTask ( i ) then
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 314
4693: NOT
4694: IFFALSE 4714
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4696: LD_VAR 0 1
4700: PPUSH
4701: LD_VAR 0 2
4705: PUSH
4706: LD_INT 1
4708: ARRAY
4709: PPUSH
4710: CALL_OW 130
// end ;
4714: GO 4640
4716: POP
4717: POP
// end else
4718: GO 4791
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4720: LD_VAR 0 3
4724: PPUSH
4725: LD_INT 3
4727: PUSH
4728: LD_INT 54
4730: PUSH
4731: EMPTY
4732: LIST
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PPUSH
4738: CALL_OW 72
4742: IFFALSE 4791
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4744: LD_ADDR_VAR 0 1
4748: PUSH
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_INT 3
4756: PUSH
4757: LD_INT 54
4759: PUSH
4760: EMPTY
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: PUSH
4772: FOR_IN
4773: IFFALSE 4789
// ComEnterUnit ( i , ruMainBase ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 200
4782: PPUSH
4783: CALL_OW 120
4787: GO 4772
4789: POP
4790: POP
// end ; end ;
4791: PPOPN 4
4793: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4794: LD_EXP 4
4798: NOT
4799: PUSH
4800: LD_EXP 40
4804: AND
4805: IFFALSE 5084
4807: GO 4809
4809: DISABLE
4810: LD_INT 0
4812: PPUSH
4813: PPUSH
4814: PPUSH
4815: PPUSH
// begin enable ;
4816: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4817: LD_ADDR_VAR 0 2
4821: PUSH
4822: LD_INT 3
4824: PPUSH
4825: LD_INT 22
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 21
4837: PUSH
4838: LD_INT 1
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: LD_INT 3
4847: PUSH
4848: LD_INT 24
4850: PUSH
4851: LD_INT 1000
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 70
4871: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4872: LD_ADDR_VAR 0 3
4876: PUSH
4877: LD_EXP 40
4881: PPUSH
4882: LD_INT 50
4884: PUSH
4885: EMPTY
4886: LIST
4887: PPUSH
4888: CALL_OW 72
4892: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4893: LD_ADDR_VAR 0 4
4897: PUSH
4898: LD_INT 118
4900: PPUSH
4901: LD_INT 121
4903: PPUSH
4904: CALL_OW 428
4908: ST_TO_ADDR
// if filter and tmp then
4909: LD_VAR 0 2
4913: PUSH
4914: LD_VAR 0 3
4918: AND
4919: IFFALSE 5011
// begin for i in tmp do
4921: LD_ADDR_VAR 0 1
4925: PUSH
4926: LD_VAR 0 3
4930: PUSH
4931: FOR_IN
4932: IFFALSE 5007
// begin if GetTag ( i ) = tEscape then
4934: LD_VAR 0 1
4938: PPUSH
4939: CALL_OW 110
4943: PUSH
4944: LD_EXP 17
4948: EQUAL
4949: IFFALSE 4953
// continue ;
4951: GO 4931
// if IsInUnit ( i ) then
4953: LD_VAR 0 1
4957: PPUSH
4958: CALL_OW 310
4962: IFFALSE 4975
// ComExitBuilding ( i ) else
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 122
4973: GO 5005
// if not HasTask ( i ) then
4975: LD_VAR 0 1
4979: PPUSH
4980: CALL_OW 314
4984: NOT
4985: IFFALSE 5005
// ComHeal ( i , filter [ 1 ] ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: LD_VAR 0 2
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: CALL_OW 128
// end ;
5005: GO 4931
5007: POP
5008: POP
// end else
5009: GO 5084
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5011: LD_VAR 0 3
5015: PPUSH
5016: LD_INT 3
5018: PUSH
5019: LD_INT 54
5021: PUSH
5022: EMPTY
5023: LIST
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PPUSH
5029: CALL_OW 72
5033: IFFALSE 5084
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5035: LD_ADDR_VAR 0 1
5039: PUSH
5040: LD_VAR 0 3
5044: PPUSH
5045: LD_INT 3
5047: PUSH
5048: LD_INT 54
5050: PUSH
5051: EMPTY
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 72
5062: PUSH
5063: FOR_IN
5064: IFFALSE 5082
// ComEnterUnit ( i , lab ) ;
5066: LD_VAR 0 1
5070: PPUSH
5071: LD_VAR 0 4
5075: PPUSH
5076: CALL_OW 120
5080: GO 5063
5082: POP
5083: POP
// end ; end ; end_of_file
5084: PPOPN 4
5086: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5087: LD_VAR 0 1
5091: PPUSH
5092: CALL 26218 0 1
// if un = Heike then
5096: LD_VAR 0 1
5100: PUSH
5101: LD_EXP 18
5105: EQUAL
5106: IFFALSE 5115
// YouLost ( Heike ) ;
5108: LD_STRING Heike
5110: PPUSH
5111: CALL_OW 104
// if un in ruEng then
5115: LD_VAR 0 1
5119: PUSH
5120: LD_EXP 38
5124: IN
5125: IFFALSE 5143
// ruEng := ruEng diff un ;
5127: LD_ADDR_EXP 38
5131: PUSH
5132: LD_EXP 38
5136: PUSH
5137: LD_VAR 0 1
5141: DIFF
5142: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5143: LD_VAR 0 1
5147: PUSH
5148: LD_INT 22
5150: PUSH
5151: LD_INT 2
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: LD_INT 21
5160: PUSH
5161: LD_INT 1
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 23
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: PPUSH
5183: CALL_OW 69
5187: IN
5188: IFFALSE 5204
// loseCounter := loseCounter + 1 ;
5190: LD_ADDR_EXP 6
5194: PUSH
5195: LD_EXP 6
5199: PUSH
5200: LD_INT 1
5202: PLUS
5203: ST_TO_ADDR
// end ;
5204: PPOPN 1
5206: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5207: LD_INT 0
5209: PPUSH
5210: PPUSH
// begin if un in ruMobile then
5211: LD_VAR 0 2
5215: PUSH
5216: LD_EXP 41
5220: IN
5221: IFFALSE 5380
// begin ruMobile := ruMobile diff un ;
5223: LD_ADDR_EXP 41
5227: PUSH
5228: LD_EXP 41
5232: PUSH
5233: LD_VAR 0 2
5237: DIFF
5238: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5239: LD_ADDR_VAR 0 5
5243: PUSH
5244: LD_VAR 0 2
5248: PPUSH
5249: CALL_OW 264
5253: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5254: LD_ADDR_VAR 0 6
5258: PUSH
5259: LD_INT 110
5261: PPUSH
5262: LD_INT 126
5264: PPUSH
5265: CALL_OW 428
5269: ST_TO_ADDR
// if not driver or not fac then
5270: LD_VAR 0 1
5274: NOT
5275: PUSH
5276: LD_VAR 0 6
5280: NOT
5281: OR
5282: IFFALSE 5286
// exit ;
5284: GO 5380
// AddComMoveXY ( driver , 111 , 121 ) ;
5286: LD_VAR 0 1
5290: PPUSH
5291: LD_INT 111
5293: PPUSH
5294: LD_INT 121
5296: PPUSH
5297: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5301: LD_VAR 0 1
5305: PPUSH
5306: LD_VAR 0 6
5310: PPUSH
5311: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5315: LD_INT 35
5317: PPUSH
5318: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5322: LD_VAR 0 1
5326: PPUSH
5327: CALL_OW 301
5331: PUSH
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 310
5341: OR
5342: IFFALSE 5315
// if IsDead ( driver ) then
5344: LD_VAR 0 1
5348: PPUSH
5349: CALL_OW 301
5353: IFFALSE 5357
// exit ;
5355: GO 5380
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5357: LD_VAR 0 6
5361: PPUSH
5362: LD_INT 21
5364: PPUSH
5365: LD_INT 1
5367: PPUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_VAR 0 5
5375: PPUSH
5376: CALL_OW 185
// end ; end ;
5380: PPOPN 6
5382: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_VAR 0 2
5392: PPUSH
5393: CALL 26338 0 2
// if GetSide ( fac ) = 3 then
5397: LD_VAR 0 2
5401: PPUSH
5402: CALL_OW 255
5406: PUSH
5407: LD_INT 3
5409: EQUAL
5410: IFFALSE 5456
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5412: LD_ADDR_EXP 41
5416: PUSH
5417: LD_EXP 41
5421: PPUSH
5422: LD_EXP 41
5426: PUSH
5427: LD_INT 1
5429: PLUS
5430: PPUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: CALL_OW 1
5440: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5441: LD_VAR 0 1
5445: PPUSH
5446: LD_INT 110
5448: PPUSH
5449: LD_INT 117
5451: PPUSH
5452: CALL_OW 171
// end ; end ;
5456: PPOPN 2
5458: END
// on LeaveBuilding ( b , un ) do var barracks ;
5459: LD_INT 0
5461: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5462: LD_VAR 0 1
5466: PUSH
5467: LD_INT 130
5469: PPUSH
5470: LD_INT 17
5472: PPUSH
5473: CALL_OW 428
5477: PUSH
5478: LD_INT 138
5480: PPUSH
5481: LD_INT 22
5483: PPUSH
5484: CALL_OW 428
5488: PUSH
5489: LD_INT 123
5491: PPUSH
5492: LD_INT 17
5494: PPUSH
5495: CALL_OW 428
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: IN
5505: IFFALSE 5529
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5507: LD_VAR 0 2
5511: PPUSH
5512: LD_INT 135
5514: PPUSH
5515: LD_INT 31
5517: PPUSH
5518: CALL_OW 428
5522: PPUSH
5523: CALL_OW 180
// exit ;
5527: GO 5803
// end ; if b = HexInfo ( 135 , 31 ) then
5529: LD_VAR 0 1
5533: PUSH
5534: LD_INT 135
5536: PPUSH
5537: LD_INT 31
5539: PPUSH
5540: CALL_OW 428
5544: EQUAL
5545: IFFALSE 5617
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5547: LD_VAR 0 2
5551: PPUSH
5552: LD_INT 106
5554: PPUSH
5555: LD_INT 51
5557: PPUSH
5558: CALL_OW 428
5562: PPUSH
5563: CALL_OW 180
// if not explodeFirstDepot then
5567: LD_EXP 12
5571: NOT
5572: IFFALSE 5615
// begin explodeFirstDepot := true ;
5574: LD_ADDR_EXP 12
5578: PUSH
5579: LD_INT 1
5581: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5582: LD_INT 525
5584: PPUSH
5585: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5589: LD_INT 127
5591: PPUSH
5592: LD_INT 27
5594: PPUSH
5595: LD_INT 1
5597: PPUSH
5598: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5602: LD_INT 125
5604: PPUSH
5605: LD_INT 29
5607: PPUSH
5608: LD_INT 1
5610: PPUSH
5611: CALL_OW 453
// end ; exit ;
5615: GO 5803
// end ; if b = HexInfo ( 106 , 51 ) then
5617: LD_VAR 0 1
5621: PUSH
5622: LD_INT 106
5624: PPUSH
5625: LD_INT 51
5627: PPUSH
5628: CALL_OW 428
5632: EQUAL
5633: IFFALSE 5733
// begin AddComMoveXY ( un , 106 , 93 ) ;
5635: LD_VAR 0 2
5639: PPUSH
5640: LD_INT 106
5642: PPUSH
5643: LD_INT 93
5645: PPUSH
5646: CALL_OW 171
// if not explodeSecondDepot then
5650: LD_EXP 13
5654: NOT
5655: IFFALSE 5731
// begin explodeSecondDepot := true ;
5657: LD_ADDR_EXP 13
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5665: LD_INT 420
5667: PPUSH
5668: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5672: LD_INT 111
5674: PPUSH
5675: LD_INT 75
5677: PPUSH
5678: LD_INT 1
5680: PPUSH
5681: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5685: LD_INT 111
5687: PPUSH
5688: LD_INT 75
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5698: LD_INT 108
5700: PPUSH
5701: LD_INT 69
5703: PPUSH
5704: LD_INT 1
5706: PPUSH
5707: CALL_OW 453
// wait ( 0 0$2 ) ;
5711: LD_INT 70
5713: PPUSH
5714: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5718: LD_INT 94
5720: PPUSH
5721: LD_INT 65
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 453
// end ; exit ;
5731: GO 5803
// end ; if GetBType ( b ) = b_bunker then
5733: LD_VAR 0 1
5737: PPUSH
5738: CALL_OW 266
5742: PUSH
5743: LD_INT 32
5745: EQUAL
5746: IFFALSE 5803
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5748: LD_ADDR_VAR 0 3
5752: PUSH
5753: LD_VAR 0 2
5757: PPUSH
5758: LD_INT 5
5760: PPUSH
5761: CALL 1008 0 2
5765: ST_TO_ADDR
// if barracks then
5766: LD_VAR 0 3
5770: IFFALSE 5788
// AddComEnterUnit ( un , barracks ) else
5772: LD_VAR 0 2
5776: PPUSH
5777: LD_VAR 0 3
5781: PPUSH
5782: CALL_OW 180
5786: GO 5803
// AddComMoveXY ( un , 116 , 110 ) ;
5788: LD_VAR 0 2
5792: PPUSH
5793: LD_INT 116
5795: PPUSH
5796: LD_INT 110
5798: PPUSH
5799: CALL_OW 171
// end ; end ;
5803: PPOPN 3
5805: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5806: LD_VAR 0 1
5810: PUSH
5811: LD_EXP 23
5815: EQUAL
5816: PUSH
5817: LD_VAR 0 2
5821: PUSH
5822: LD_INT 3
5824: PUSH
5825: LD_INT 6
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: IN
5832: AND
5833: IFFALSE 5864
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5835: LD_ADDR_EXP 8
5839: PUSH
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 250
5849: PUSH
5850: LD_VAR 0 1
5854: PPUSH
5855: CALL_OW 251
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: ST_TO_ADDR
// end ; end_of_file
5864: PPOPN 3
5866: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5867: LD_INT 0
5869: PPUSH
5870: PPUSH
5871: PPUSH
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
// InGameOn ;
5876: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5880: LD_INT 5
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: CALL_OW 343
// music_nat := 4 ;
5890: LD_ADDR_OWVAR 71
5894: PUSH
5895: LD_INT 4
5897: ST_TO_ADDR
// music_class := music_combat ;
5898: LD_ADDR_OWVAR 72
5902: PUSH
5903: LD_INT 1
5905: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5906: LD_INT 133
5908: PPUSH
5909: LD_INT 2
5911: PPUSH
5912: LD_INT 2
5914: PPUSH
5915: LD_INT 10
5917: PPUSH
5918: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5922: LD_INT 133
5924: PPUSH
5925: LD_INT 2
5927: PPUSH
5928: CALL_OW 86
// wait ( 0 0$1 ) ;
5932: LD_INT 35
5934: PPUSH
5935: CALL_OW 67
// uc_side := 6 ;
5939: LD_ADDR_OWVAR 20
5943: PUSH
5944: LD_INT 6
5946: ST_TO_ADDR
// uc_nation := 3 ;
5947: LD_ADDR_OWVAR 21
5951: PUSH
5952: LD_INT 3
5954: ST_TO_ADDR
// rutmp := [ ] ;
5955: LD_ADDR_VAR 0 7
5959: PUSH
5960: EMPTY
5961: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5962: LD_INT 6
5964: PPUSH
5965: LD_INT 3
5967: PPUSH
5968: LD_INT 21
5970: PPUSH
5971: LD_INT 1
5973: PPUSH
5974: LD_INT 1
5976: PPUSH
5977: LD_INT 44
5979: PPUSH
5980: LD_INT 66
5982: PPUSH
5983: CALL 336 0 7
// veh := CreateVehicle ;
5987: LD_ADDR_VAR 0 5
5991: PUSH
5992: CALL_OW 45
5996: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5997: LD_VAR 0 5
6001: PPUSH
6002: LD_INT 3
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6009: LD_VAR 0 5
6013: PPUSH
6014: LD_INT 8
6016: PPUSH
6017: LD_INT 0
6019: PPUSH
6020: CALL_OW 49
// SetLives ( veh , 500 ) ;
6024: LD_VAR 0 5
6028: PPUSH
6029: LD_INT 500
6031: PPUSH
6032: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6036: LD_INT 0
6038: PPUSH
6039: LD_INT 3
6041: PPUSH
6042: LD_INT 3
6044: PPUSH
6045: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6049: CALL_OW 44
6053: PPUSH
6054: LD_VAR 0 5
6058: PPUSH
6059: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6063: LD_VAR 0 5
6067: PPUSH
6068: LD_INT 133
6070: PPUSH
6071: LD_INT 11
6073: PPUSH
6074: CALL_OW 111
// rutmp := [ veh ] ;
6078: LD_ADDR_VAR 0 7
6082: PUSH
6083: LD_VAR 0 5
6087: PUSH
6088: EMPTY
6089: LIST
6090: ST_TO_ADDR
// for i := 1 to 4 do
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_INT 4
6103: PUSH
6104: FOR_TO
6105: IFFALSE 6212
// begin PrepareHuman ( false , i , 2 ) ;
6107: LD_INT 0
6109: PPUSH
6110: LD_VAR 0 2
6114: PPUSH
6115: LD_INT 2
6117: PPUSH
6118: CALL_OW 380
// un := CreateHuman ;
6122: LD_ADDR_VAR 0 4
6126: PUSH
6127: CALL_OW 44
6131: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6132: LD_VAR 0 4
6136: PPUSH
6137: LD_INT 3
6139: PPUSH
6140: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6144: LD_VAR 0 4
6148: PPUSH
6149: LD_INT 8
6151: PPUSH
6152: LD_INT 0
6154: PPUSH
6155: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6159: LD_ADDR_VAR 0 7
6163: PUSH
6164: LD_VAR 0 7
6168: PPUSH
6169: LD_VAR 0 7
6173: PUSH
6174: LD_INT 1
6176: PLUS
6177: PPUSH
6178: LD_VAR 0 4
6182: PPUSH
6183: CALL_OW 1
6187: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6188: LD_VAR 0 4
6192: PPUSH
6193: LD_INT 133
6195: PPUSH
6196: LD_INT 11
6198: PPUSH
6199: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6203: LD_INT 18
6205: PPUSH
6206: CALL_OW 67
// end ;
6210: GO 6104
6212: POP
6213: POP
// for i in rutmp do
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: LD_VAR 0 7
6223: PUSH
6224: FOR_IN
6225: IFFALSE 6274
// begin AddComMoveXY ( i , 99 , 65 ) ;
6227: LD_VAR 0 2
6231: PPUSH
6232: LD_INT 99
6234: PPUSH
6235: LD_INT 65
6237: PPUSH
6238: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6242: LD_VAR 0 2
6246: PPUSH
6247: LD_INT 76
6249: PPUSH
6250: LD_INT 108
6252: PPUSH
6253: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6257: LD_VAR 0 2
6261: PPUSH
6262: LD_INT 92
6264: PPUSH
6265: LD_INT 176
6267: PPUSH
6268: CALL_OW 171
// end ;
6272: GO 6224
6274: POP
6275: POP
// wait ( 0 0$10 ) ;
6276: LD_INT 350
6278: PPUSH
6279: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6283: LD_ADDR_VAR 0 6
6287: PUSH
6288: LD_EXP 18
6292: PUSH
6293: LD_EXP 19
6297: PUSH
6298: LD_EXP 20
6302: PUSH
6303: LD_EXP 21
6307: PUSH
6308: LD_EXP 22
6312: PUSH
6313: LD_EXP 23
6317: PUSH
6318: LD_EXP 24
6322: PUSH
6323: LD_EXP 25
6327: PUSH
6328: LD_EXP 27
6332: PUSH
6333: LD_EXP 28
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_EXP 29
6354: UNION
6355: ST_TO_ADDR
// tmp := tmp diff 0 ;
6356: LD_ADDR_VAR 0 6
6360: PUSH
6361: LD_VAR 0 6
6365: PUSH
6366: LD_INT 0
6368: DIFF
6369: ST_TO_ADDR
// for i in heikeVehicles do
6370: LD_ADDR_VAR 0 2
6374: PUSH
6375: LD_EXP 30
6379: PUSH
6380: FOR_IN
6381: IFFALSE 6753
// begin if not tmp then
6383: LD_VAR 0 6
6387: NOT
6388: IFFALSE 6392
// continue ;
6390: GO 6380
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6392: LD_INT 2
6394: PPUSH
6395: LD_VAR 0 2
6399: PUSH
6400: LD_INT 5
6402: ARRAY
6403: PPUSH
6404: LD_VAR 0 2
6408: PUSH
6409: LD_INT 1
6411: ARRAY
6412: PPUSH
6413: LD_VAR 0 2
6417: PUSH
6418: LD_INT 2
6420: ARRAY
6421: PPUSH
6422: LD_VAR 0 2
6426: PUSH
6427: LD_INT 3
6429: ARRAY
6430: PPUSH
6431: LD_VAR 0 2
6435: PUSH
6436: LD_INT 4
6438: ARRAY
6439: PPUSH
6440: LD_INT 34
6442: PPUSH
6443: CALL 336 0 7
// veh := CreateVehicle ;
6447: LD_ADDR_VAR 0 5
6451: PUSH
6452: CALL_OW 45
6456: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6457: LD_VAR 0 2
6461: PUSH
6462: LD_INT 4
6464: ARRAY
6465: PUSH
6466: LD_INT 51
6468: PUSH
6469: LD_INT 32
6471: PUSH
6472: LD_INT 12
6474: PUSH
6475: LD_INT 89
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: IN
6484: IFFALSE 6564
// begin if i [ 7 ] [ 1 ] then
6486: LD_VAR 0 2
6490: PUSH
6491: LD_INT 7
6493: ARRAY
6494: PUSH
6495: LD_INT 1
6497: ARRAY
6498: IFFALSE 6525
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6500: LD_VAR 0 5
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: LD_VAR 0 2
6512: PUSH
6513: LD_INT 7
6515: ARRAY
6516: PUSH
6517: LD_INT 1
6519: ARRAY
6520: PPUSH
6521: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6525: LD_VAR 0 2
6529: PUSH
6530: LD_INT 7
6532: ARRAY
6533: PUSH
6534: LD_INT 2
6536: ARRAY
6537: IFFALSE 6564
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6539: LD_VAR 0 5
6543: PPUSH
6544: LD_INT 2
6546: PPUSH
6547: LD_VAR 0 2
6551: PUSH
6552: LD_INT 7
6554: ARRAY
6555: PUSH
6556: LD_INT 2
6558: ARRAY
6559: PPUSH
6560: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6564: LD_VAR 0 5
6568: PPUSH
6569: LD_INT 3
6571: PPUSH
6572: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6576: LD_VAR 0 5
6580: PPUSH
6581: LD_INT 8
6583: PPUSH
6584: LD_INT 0
6586: PPUSH
6587: CALL_OW 49
// for j := 1 to tmp do
6591: LD_ADDR_VAR 0 3
6595: PUSH
6596: DOUBLE
6597: LD_INT 1
6599: DEC
6600: ST_TO_ADDR
6601: LD_VAR 0 6
6605: PUSH
6606: FOR_TO
6607: IFFALSE 6680
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6609: LD_VAR 0 2
6613: PUSH
6614: LD_INT 8
6616: ARRAY
6617: PUSH
6618: LD_VAR 0 6
6622: PUSH
6623: LD_VAR 0 3
6627: ARRAY
6628: PPUSH
6629: CALL_OW 257
6633: EQUAL
6634: IFFALSE 6678
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6636: LD_VAR 0 6
6640: PUSH
6641: LD_VAR 0 3
6645: ARRAY
6646: PPUSH
6647: LD_VAR 0 5
6651: PPUSH
6652: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6656: LD_ADDR_VAR 0 6
6660: PUSH
6661: LD_VAR 0 6
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: CALL_OW 3
6675: ST_TO_ADDR
// break ;
6676: GO 6680
// end ; end ;
6678: GO 6606
6680: POP
6681: POP
// if IsEmpty ( veh ) then
6682: LD_VAR 0 5
6686: PPUSH
6687: CALL 32663 0 1
6691: IFFALSE 6729
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6693: LD_VAR 0 6
6697: PUSH
6698: LD_INT 1
6700: ARRAY
6701: PPUSH
6702: LD_VAR 0 5
6706: PPUSH
6707: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6711: LD_ADDR_VAR 0 6
6715: PUSH
6716: LD_VAR 0 6
6720: PPUSH
6721: LD_INT 1
6723: PPUSH
6724: CALL_OW 3
6728: ST_TO_ADDR
// end ; ComAgressiveMove ( veh , 133 , 7 ) ;
6729: LD_VAR 0 5
6733: PPUSH
6734: LD_INT 133
6736: PPUSH
6737: LD_INT 7
6739: PPUSH
6740: CALL_OW 114
// wait ( 0 0$3 ) ;
6744: LD_INT 105
6746: PPUSH
6747: CALL_OW 67
// end ;
6751: GO 6380
6753: POP
6754: POP
// if tmp then
6755: LD_VAR 0 6
6759: IFFALSE 6815
// for i in tmp do
6761: LD_ADDR_VAR 0 2
6765: PUSH
6766: LD_VAR 0 6
6770: PUSH
6771: FOR_IN
6772: IFFALSE 6813
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6774: LD_VAR 0 2
6778: PPUSH
6779: LD_INT 10
6781: PPUSH
6782: LD_INT 0
6784: PPUSH
6785: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6789: LD_VAR 0 2
6793: PPUSH
6794: LD_INT 146
6796: PPUSH
6797: LD_INT 7
6799: PPUSH
6800: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6804: LD_INT 18
6806: PPUSH
6807: CALL_OW 67
// end ;
6811: GO 6771
6813: POP
6814: POP
// if heikeApes then
6815: LD_EXP 31
6819: IFFALSE 6875
// for i in heikeApes do
6821: LD_ADDR_VAR 0 2
6825: PUSH
6826: LD_EXP 31
6830: PUSH
6831: FOR_IN
6832: IFFALSE 6873
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6834: LD_VAR 0 2
6838: PPUSH
6839: LD_INT 10
6841: PPUSH
6842: LD_INT 0
6844: PPUSH
6845: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6849: LD_VAR 0 2
6853: PPUSH
6854: LD_INT 146
6856: PPUSH
6857: LD_INT 7
6859: PPUSH
6860: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6864: LD_INT 18
6866: PPUSH
6867: CALL_OW 67
// end ;
6871: GO 6831
6873: POP
6874: POP
// DialogueOn ;
6875: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6879: LD_EXP 18
6883: PPUSH
6884: LD_STRING DH-outpost-a-1
6886: PPUSH
6887: CALL_OW 88
// DialogueOff ;
6891: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6895: LD_INT 133
6897: PPUSH
6898: LD_INT 2
6900: PPUSH
6901: LD_INT 2
6903: PPUSH
6904: CALL_OW 331
// InGameOff ;
6908: CALL_OW 9
// music_nat := 0 ;
6912: LD_ADDR_OWVAR 71
6916: PUSH
6917: LD_INT 0
6919: ST_TO_ADDR
// music_class := 0 ;
6920: LD_ADDR_OWVAR 72
6924: PUSH
6925: LD_INT 0
6927: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6928: LD_STRING Outposts
6930: PPUSH
6931: CALL_OW 337
// SaveForQuickRestart ;
6935: CALL_OW 22
// end ;
6939: LD_VAR 0 1
6943: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6944: LD_INT 22
6946: PUSH
6947: LD_INT 2
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 91
6956: PUSH
6957: LD_EXP 21
6961: PUSH
6962: LD_INT 20
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 69
6978: PUSH
6979: LD_EXP 3
6983: AND
6984: PUSH
6985: LD_EXP 21
6989: PPUSH
6990: CALL_OW 302
6994: AND
6995: IFFALSE 7242
6997: GO 6999
6999: DISABLE
7000: LD_INT 0
7002: PPUSH
7003: PPUSH
7004: PPUSH
7005: PPUSH
// begin IbrahimBetrayal ;
7006: CALL 7245 0 0
// repeat wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7017: LD_EXP 21
7021: PPUSH
7022: CALL_OW 301
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_INT 2
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 91
7039: PUSH
7040: LD_EXP 21
7044: PUSH
7045: LD_INT 6
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PPUSH
7057: CALL_OW 69
7061: PUSH
7062: LD_EXP 21
7066: PPUSH
7067: CALL_OW 302
7071: AND
7072: OR
7073: IFFALSE 7010
// if IsDead ( Ibrahim ) then
7075: LD_EXP 21
7079: PPUSH
7080: CALL_OW 301
7084: IFFALSE 7088
// exit ;
7086: GO 7242
// x := GetX ( Ibrahim ) ;
7088: LD_ADDR_VAR 0 1
7092: PUSH
7093: LD_EXP 21
7097: PPUSH
7098: CALL_OW 250
7102: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7103: LD_ADDR_VAR 0 2
7107: PUSH
7108: LD_EXP 21
7112: PPUSH
7113: CALL_OW 251
7117: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_EXP 21
7127: PPUSH
7128: CALL_OW 254
7132: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7133: LD_ADDR_VAR 0 4
7137: PUSH
7138: LD_EXP 21
7142: PPUSH
7143: CALL_OW 256
7147: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7148: LD_EXP 21
7152: PPUSH
7153: CALL_OW 64
// uc_side := 2 ;
7157: LD_ADDR_OWVAR 20
7161: PUSH
7162: LD_INT 2
7164: ST_TO_ADDR
// uc_nation := 2 ;
7165: LD_ADDR_OWVAR 21
7169: PUSH
7170: LD_INT 2
7172: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7173: LD_ADDR_EXP 21
7177: PUSH
7178: LD_STRING Ibrahim
7180: PPUSH
7181: LD_INT 0
7183: PPUSH
7184: LD_STRING 
7186: PPUSH
7187: CALL 30507 0 3
7191: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7192: LD_EXP 21
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7206: LD_EXP 21
7210: PPUSH
7211: LD_VAR 0 1
7215: PPUSH
7216: LD_VAR 0 2
7220: PPUSH
7221: LD_INT 0
7223: PPUSH
7224: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7228: LD_EXP 21
7232: PPUSH
7233: LD_VAR 0 4
7237: PPUSH
7238: CALL_OW 234
// end ;
7242: PPOPN 4
7244: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7245: LD_INT 0
7247: PPUSH
7248: PPUSH
7249: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7250: LD_INT 122
7252: PPUSH
7253: LD_INT 77
7255: PPUSH
7256: LD_INT 2
7258: PPUSH
7259: LD_INT 6
7261: NEG
7262: PPUSH
7263: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7267: LD_EXP 21
7271: PPUSH
7272: LD_INT 123
7274: PPUSH
7275: LD_INT 79
7277: PPUSH
7278: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7282: LD_EXP 21
7286: PPUSH
7287: LD_INT 125
7289: PPUSH
7290: LD_INT 82
7292: PPUSH
7293: CALL_OW 178
// wait ( 0 0$2 ) ;
7297: LD_INT 70
7299: PPUSH
7300: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7304: LD_EXP 42
7308: PPUSH
7309: LD_EXP 21
7313: PPUSH
7314: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7318: LD_EXP 42
7322: PPUSH
7323: LD_STRING DRum-outpost-b-3
7325: PPUSH
7326: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7330: LD_ADDR_VAR 0 3
7334: PUSH
7335: LD_INT 125
7337: PPUSH
7338: LD_INT 76
7340: PPUSH
7341: CALL_OW 428
7345: PUSH
7346: LD_INT 125
7348: PPUSH
7349: LD_INT 79
7351: PPUSH
7352: CALL_OW 428
7356: PUSH
7357: LD_INT 125
7359: PPUSH
7360: LD_INT 82
7362: PPUSH
7363: CALL_OW 428
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
// for i in tmp do
7373: LD_ADDR_VAR 0 2
7377: PUSH
7378: LD_VAR 0 3
7382: PUSH
7383: FOR_IN
7384: IFFALSE 7400
// SetLives ( i , 200 ) ;
7386: LD_VAR 0 2
7390: PPUSH
7391: LD_INT 200
7393: PPUSH
7394: CALL_OW 234
7398: GO 7383
7400: POP
7401: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7402: LD_EXP 21
7406: PPUSH
7407: LD_STRING DI-outpost-b-4
7409: PPUSH
7410: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7414: LD_EXP 21
7418: PPUSH
7419: LD_INT 5
7421: PPUSH
7422: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7426: LD_EXP 21
7430: PUSH
7431: LD_EXP 42
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7444: LD_INT 122
7446: PPUSH
7447: LD_INT 77
7449: PPUSH
7450: LD_INT 2
7452: PPUSH
7453: CALL_OW 331
// if Givi then
7457: LD_EXP 19
7461: IFFALSE 7477
// Say ( Givi , DG-1-outpost-b-5 ) else
7463: LD_EXP 19
7467: PPUSH
7468: LD_STRING DG-1-outpost-b-5
7470: PPUSH
7471: CALL_OW 88
7475: GO 7542
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7477: LD_EXP 29
7481: PPUSH
7482: LD_INT 26
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 72
7496: PUSH
7497: LD_INT 1
7499: ARRAY
7500: PPUSH
7501: LD_STRING DArf-outpost-b-a-5
7503: PPUSH
7504: CALL_OW 88
7508: NOT
7509: IFFALSE 7542
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7511: LD_EXP 29
7515: PPUSH
7516: LD_INT 26
7518: PUSH
7519: LD_INT 1
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PPUSH
7526: CALL_OW 72
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PPUSH
7535: LD_STRING DArm-outpost-b-a-5
7537: PPUSH
7538: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7542: LD_INT 35
7544: PPUSH
7545: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7549: LD_EXP 21
7553: PPUSH
7554: CALL_OW 301
7558: PUSH
7559: LD_EXP 18
7563: PPUSH
7564: LD_EXP 21
7568: PPUSH
7569: CALL_OW 296
7573: PUSH
7574: LD_INT 6
7576: LESS
7577: PUSH
7578: LD_EXP 21
7582: PPUSH
7583: CALL_OW 302
7587: AND
7588: OR
7589: IFFALSE 7542
// if IsDead ( Ibrahim ) then
7591: LD_EXP 21
7595: PPUSH
7596: CALL_OW 301
7600: IFFALSE 7616
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7602: LD_EXP 18
7606: PPUSH
7607: LD_STRING DH-ibrahimdead-1
7609: PPUSH
7610: CALL_OW 88
// exit ;
7614: GO 7657
// end ; CenterNowOnUnits ( Ibrahim ) ;
7616: LD_EXP 21
7620: PPUSH
7621: CALL_OW 87
// DialogueOn ;
7625: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7629: LD_EXP 21
7633: PPUSH
7634: LD_STRING DI-ibrahimlives-1
7636: PPUSH
7637: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7641: LD_EXP 18
7645: PPUSH
7646: LD_STRING DH-Ibrahimlives-2
7648: PPUSH
7649: CALL_OW 88
// DialogueOff ;
7653: CALL_OW 7
// end ;
7657: LD_VAR 0 1
7661: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7662: LD_INT 11
7664: PPUSH
7665: LD_INT 22
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PPUSH
7675: CALL_OW 70
7679: PUSH
7680: LD_OWVAR 1
7684: PUSH
7685: LD_INT 18900
7687: PUSH
7688: LD_INT 16800
7690: PUSH
7691: LD_INT 16800
7693: PUSH
7694: LD_INT 15750
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_OWVAR 67
7707: ARRAY
7708: GREATEREQUAL
7709: OR
7710: IFFALSE 8218
7712: GO 7714
7714: DISABLE
// begin outerAreaAchived := true ;
7715: LD_ADDR_EXP 15
7719: PUSH
7720: LD_INT 1
7722: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7723: LD_INT 700
7725: PPUSH
7726: CALL_OW 67
// DialogueOn ;
7730: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7734: LD_EXP 26
7738: PPUSH
7739: LD_STRING DShar-radio-1
7741: PPUSH
7742: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7746: LD_EXP 26
7750: PPUSH
7751: LD_STRING DShar-radio-2
7753: PPUSH
7754: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_STRING DH-radio-2
7765: PPUSH
7766: CALL_OW 88
// DialogueOff ;
7770: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7774: LD_STRING Gaidar
7776: PPUSH
7777: CALL_OW 337
// if Difficulty < 3 then
7781: LD_OWVAR 67
7785: PUSH
7786: LD_INT 3
7788: LESS
7789: IFFALSE 7855
// begin DialogueOn ;
7791: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7795: LD_INT 11
7797: PPUSH
7798: LD_INT 14
7800: PPUSH
7801: LD_INT 2
7803: PPUSH
7804: LD_INT 6
7806: NEG
7807: PPUSH
7808: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7812: LD_INT 11
7814: PPUSH
7815: LD_INT 14
7817: PPUSH
7818: LD_INT 2
7820: PPUSH
7821: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7825: LD_INT 11
7827: PPUSH
7828: LD_INT 14
7830: PPUSH
7831: CALL_OW 84
// dwait ( 0 0$1 ) ;
7835: LD_INT 35
7837: PPUSH
7838: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7842: LD_EXP 18
7846: PPUSH
7847: CALL_OW 87
// DialogueOff ;
7851: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7855: LD_INT 1050
7857: PUSH
7858: LD_INT 350
7860: PPUSH
7861: LD_INT 525
7863: PPUSH
7864: CALL_OW 12
7868: PUSH
7869: LD_OWVAR 67
7873: MUL
7874: PLUS
7875: PPUSH
7876: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7880: LD_INT 35
7882: PPUSH
7883: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7887: LD_INT 2
7889: PPUSH
7890: LD_INT 1
7892: PPUSH
7893: CALL_OW 428
7897: PUSH
7898: LD_INT 0
7900: EQUAL
7901: IFFALSE 7880
// SetDir ( Gaidar , 2 ) ;
7903: LD_EXP 35
7907: PPUSH
7908: LD_INT 2
7910: PPUSH
7911: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7915: LD_EXP 35
7919: PPUSH
7920: LD_INT 2
7922: PPUSH
7923: LD_INT 1
7925: PPUSH
7926: LD_INT 0
7928: PPUSH
7929: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7933: LD_EXP 35
7937: PPUSH
7938: LD_INT 19
7940: PPUSH
7941: LD_INT 24
7943: PPUSH
7944: CALL_OW 111
// if Difficulty < 3 then
7948: LD_OWVAR 67
7952: PUSH
7953: LD_INT 3
7955: LESS
7956: IFFALSE 7995
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7958: LD_INT 11
7960: PPUSH
7961: LD_INT 14
7963: PPUSH
7964: LD_INT 2
7966: PPUSH
7967: LD_INT 6
7969: NEG
7970: PPUSH
7971: CALL_OW 330
// wait ( 0 0$2 ) ;
7975: LD_INT 70
7977: PPUSH
7978: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7982: LD_INT 11
7984: PPUSH
7985: LD_INT 14
7987: PPUSH
7988: LD_INT 2
7990: PPUSH
7991: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7995: LD_EXP 35
7999: PPUSH
8000: LD_INT 210
8002: PPUSH
8003: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8007: LD_EXP 35
8011: PPUSH
8012: LD_INT 38
8014: PPUSH
8015: LD_INT 47
8017: PPUSH
8018: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8022: LD_EXP 35
8026: PPUSH
8027: LD_INT 32
8029: PPUSH
8030: LD_INT 59
8032: PPUSH
8033: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8037: LD_EXP 35
8041: PPUSH
8042: LD_INT 350
8044: PPUSH
8045: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8049: LD_EXP 35
8053: PPUSH
8054: LD_INT 62
8056: PPUSH
8057: LD_INT 116
8059: PPUSH
8060: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8064: LD_EXP 35
8068: PPUSH
8069: LD_INT 92
8071: PPUSH
8072: LD_INT 177
8074: PPUSH
8075: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8079: LD_INT 35
8081: PPUSH
8082: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8086: LD_EXP 35
8090: PPUSH
8091: CALL_OW 301
8095: PUSH
8096: LD_EXP 35
8100: PPUSH
8101: LD_INT 92
8103: PPUSH
8104: LD_INT 177
8106: PPUSH
8107: CALL_OW 307
8111: OR
8112: IFFALSE 8079
// if IsAt ( Gaidar , 92 , 177 ) then
8114: LD_EXP 35
8118: PPUSH
8119: LD_INT 92
8121: PPUSH
8122: LD_INT 177
8124: PPUSH
8125: CALL_OW 307
8129: IFFALSE 8196
// begin DialogueOn ;
8131: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8135: LD_INT 92
8137: PPUSH
8138: LD_INT 177
8140: PPUSH
8141: LD_INT 2
8143: PPUSH
8144: LD_INT 3
8146: NEG
8147: PPUSH
8148: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8152: LD_EXP 35
8156: PPUSH
8157: CALL_OW 87
// dwait ( 0 0$2 ) ;
8161: LD_INT 70
8163: PPUSH
8164: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8168: LD_INT 92
8170: PPUSH
8171: LD_INT 177
8173: PPUSH
8174: LD_INT 2
8176: PPUSH
8177: CALL_OW 331
// DialogueOff ;
8181: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8185: LD_EXP 35
8189: PPUSH
8190: CALL_OW 64
// exit ;
8194: GO 8218
// end ; gaidarKilled := true ;
8196: LD_ADDR_EXP 14
8200: PUSH
8201: LD_INT 1
8203: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8204: LD_STRING GaidarKilled
8206: PPUSH
8207: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8211: LD_STRING ACH_COMMISAR
8213: PPUSH
8214: CALL_OW 543
// end ;
8218: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8219: LD_INT 2
8221: PPUSH
8222: LD_EXP 35
8226: PPUSH
8227: CALL_OW 292
8231: IFFALSE 8248
8233: GO 8235
8235: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8236: LD_EXP 35
8240: PPUSH
8241: LD_STRING DT-objective-1
8243: PPUSH
8244: CALL_OW 88
8248: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8249: LD_INT 22
8251: PUSH
8252: LD_INT 2
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 2
8261: PUSH
8262: LD_INT 95
8264: PUSH
8265: LD_INT 5
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: LD_INT 95
8274: PUSH
8275: LD_INT 6
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 95
8284: PUSH
8285: LD_INT 7
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PPUSH
8302: CALL_OW 69
8306: IFFALSE 8343
8308: GO 8310
8310: DISABLE
// begin DialogueOn ;
8311: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8315: LD_EXP 18
8319: PPUSH
8320: LD_STRING DH-outpost-last-1
8322: PPUSH
8323: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8327: LD_EXP 34
8331: PPUSH
8332: LD_STRING DB-outpost-last-2
8334: PPUSH
8335: CALL_OW 94
// DialogueOff ;
8339: CALL_OW 7
// end ;
8343: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8344: LD_INT 200
8346: PPUSH
8347: CALL_OW 256
8351: PUSH
8352: LD_INT 999
8354: LESS
8355: PUSH
8356: LD_INT 200
8358: PPUSH
8359: CALL_OW 255
8363: PUSH
8364: LD_INT 2
8366: EQUAL
8367: OR
8368: IFFALSE 8541
8370: GO 8372
8372: DISABLE
8373: LD_INT 0
8375: PPUSH
8376: PPUSH
// begin if not earlyEscape then
8377: LD_EXP 16
8381: NOT
8382: IFFALSE 8408
// begin SayRadio ( Burlak , DB-end-1 ) ;
8384: LD_EXP 34
8388: PPUSH
8389: LD_STRING DB-end-1
8391: PPUSH
8392: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8396: LD_EXP 18
8400: PPUSH
8401: LD_STRING DH-end-2
8403: PPUSH
8404: CALL_OW 88
// end ; if tick <= 15 15$00 then
8408: LD_OWVAR 1
8412: PUSH
8413: LD_INT 31500
8415: LESSEQUAL
8416: IFFALSE 8425
// SetAchievement ( ACH_FIST ) ;
8418: LD_STRING ACH_FIST
8420: PPUSH
8421: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8425: LD_ADDR_VAR 0 2
8429: PUSH
8430: LD_INT 22
8432: PUSH
8433: LD_INT 3
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: LD_INT 3
8442: PUSH
8443: LD_INT 21
8445: PUSH
8446: LD_INT 3
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PPUSH
8461: CALL_OW 69
8465: ST_TO_ADDR
// if not tmp then
8466: LD_VAR 0 2
8470: NOT
8471: IFFALSE 8475
// exit ;
8473: GO 8541
// for i in tmp do
8475: LD_ADDR_VAR 0 1
8479: PUSH
8480: LD_VAR 0 2
8484: PUSH
8485: FOR_IN
8486: IFFALSE 8539
// begin SetTag ( i , tEscape ) ;
8488: LD_VAR 0 1
8492: PPUSH
8493: LD_EXP 17
8497: PPUSH
8498: CALL_OW 109
// if IsInUnit ( i ) then
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 310
8511: IFFALSE 8522
// ComExitBuilding ( i ) ;
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8522: LD_VAR 0 1
8526: PPUSH
8527: LD_INT 92
8529: PPUSH
8530: LD_INT 177
8532: PPUSH
8533: CALL_OW 171
// end ;
8537: GO 8485
8539: POP
8540: POP
// end ;
8541: PPOPN 2
8543: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8544: LD_INT 4
8546: PPUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 70
8561: PUSH
8562: LD_EXP 15
8566: NOT
8567: AND
8568: PUSH
8569: LD_EXP 27
8573: PPUSH
8574: CALL_OW 302
8578: AND
8579: IFFALSE 8819
8581: GO 8583
8583: DISABLE
// begin DialogueOn ;
8584: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8588: LD_INT 111
8590: PPUSH
8591: LD_INT 54
8593: PPUSH
8594: LD_INT 2
8596: PPUSH
8597: LD_INT 16
8599: NEG
8600: PPUSH
8601: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8605: LD_INT 111
8607: PPUSH
8608: LD_INT 53
8610: PPUSH
8611: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8615: LD_INT 10
8617: PPUSH
8618: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8622: LD_EXP 27
8626: PPUSH
8627: LD_STRING DKs-Hannibal-1
8629: PPUSH
8630: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8634: LD_EXP 27
8638: PPUSH
8639: LD_STRING DKs-Hannibal-2
8641: PPUSH
8642: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8646: LD_EXP 27
8650: PPUSH
8651: LD_STRING DKs-Hannibal-3
8653: PPUSH
8654: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8658: LD_EXP 27
8662: PPUSH
8663: LD_STRING DKs-Hannibal-4
8665: PPUSH
8666: CALL_OW 88
// dwait ( 0 0$1 ) ;
8670: LD_INT 35
8672: PPUSH
8673: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8677: LD_INT 111
8679: PPUSH
8680: LD_INT 54
8682: PPUSH
8683: LD_INT 2
8685: PPUSH
8686: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8690: LD_INT 173
8692: PPUSH
8693: LD_INT 76
8695: PPUSH
8696: LD_INT 2
8698: PPUSH
8699: LD_INT 12
8701: NEG
8702: PPUSH
8703: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8707: LD_INT 173
8709: PPUSH
8710: LD_INT 76
8712: PPUSH
8713: LD_INT 2
8715: PPUSH
8716: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8720: LD_INT 173
8722: PPUSH
8723: LD_INT 76
8725: PPUSH
8726: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8730: LD_EXP 27
8734: PPUSH
8735: LD_STRING DKs-Hannibal-5
8737: PPUSH
8738: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8742: LD_EXP 22
8746: PUSH
8747: LD_INT 22
8749: PUSH
8750: LD_INT 2
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 34
8759: PUSH
8760: LD_INT 26
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 69
8775: NOT
8776: AND
8777: IFFALSE 8815
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8779: LD_EXP 22
8783: PPUSH
8784: LD_STRING DKam-Hannibal-a-6
8786: PPUSH
8787: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8791: LD_EXP 22
8795: PPUSH
8796: LD_STRING DKam-Hannibal-a-7
8798: PPUSH
8799: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8803: LD_EXP 19
8807: PPUSH
8808: LD_STRING DG-Hannibal-a-8
8810: PPUSH
8811: CALL_OW 88
// end ; DialogueOff ;
8815: CALL_OW 7
// end ;
8819: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8820: LD_INT 225
8822: PPUSH
8823: CALL_OW 302
8827: PUSH
8828: LD_INT 200
8830: PPUSH
8831: CALL_OW 302
8835: AND
8836: PUSH
8837: LD_INT 12
8839: PPUSH
8840: LD_INT 21
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 70
8854: PUSH
8855: LD_INT 2
8857: GREATER
8858: AND
8859: PUSH
8860: LD_INT 13
8862: PPUSH
8863: LD_INT 22
8865: PUSH
8866: LD_INT 2
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 70
8877: PUSH
8878: LD_INT 3
8880: GREATER
8881: AND
8882: IFFALSE 8895
8884: GO 8886
8886: DISABLE
// hannibalPath := true ;
8887: LD_ADDR_EXP 9
8891: PUSH
8892: LD_INT 1
8894: ST_TO_ADDR
8895: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8896: LD_EXP 9
8900: PUSH
8901: LD_INT 6
8903: PPUSH
8904: LD_INT 22
8906: PUSH
8907: LD_INT 2
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 70
8918: AND
8919: IFFALSE 9264
8921: GO 8923
8923: DISABLE
8924: LD_INT 0
8926: PPUSH
8927: PPUSH
8928: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8929: LD_ADDR_VAR 0 2
8933: PUSH
8934: LD_INT 6
8936: PPUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 2
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PPUSH
8947: CALL_OW 70
8951: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8952: LD_ADDR_VAR 0 3
8956: PUSH
8957: LD_VAR 0 2
8961: PPUSH
8962: LD_INT 34
8964: PUSH
8965: LD_INT 26
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 72
8976: PUSH
8977: LD_INT 0
8979: GREATER
8980: ST_TO_ADDR
// DialogueOn ;
8981: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8985: LD_EXP 18
8989: PPUSH
8990: LD_STRING DH-Cleverattack-1
8992: PPUSH
8993: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8997: LD_EXP 18
9001: PPUSH
9002: LD_STRING DH-Cleverattack-2
9004: PPUSH
9005: CALL_OW 88
// if hasFlameThrower then
9009: LD_VAR 0 3
9013: IFFALSE 9041
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9015: LD_EXP 34
9019: PPUSH
9020: LD_STRING DB-Cleverattack-3
9022: PPUSH
9023: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9027: LD_EXP 18
9031: PPUSH
9032: LD_STRING DH-Cleverattack-4
9034: PPUSH
9035: CALL_OW 88
// end else
9039: GO 9065
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9041: LD_EXP 34
9045: PPUSH
9046: LD_STRING DB-Cleverattack-a-3
9048: PPUSH
9049: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9053: LD_EXP 18
9057: PPUSH
9058: LD_STRING DH-Cleverattack-a-4
9060: PPUSH
9061: CALL_OW 88
// end ; DialogueOff ;
9065: CALL_OW 7
// if not hasFlameThrower then
9069: LD_VAR 0 3
9073: NOT
9074: IFFALSE 9078
// exit ;
9076: GO 9264
// earlyEscape := true ;
9078: LD_ADDR_EXP 16
9082: PUSH
9083: LD_INT 1
9085: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9086: LD_INT 140
9088: PPUSH
9089: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: LD_INT 22
9100: PUSH
9101: LD_INT 3
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: LD_INT 2
9110: PUSH
9111: LD_INT 25
9113: PUSH
9114: LD_INT 1
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: LD_INT 25
9123: PUSH
9124: LD_INT 2
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PUSH
9131: LD_INT 25
9133: PUSH
9134: LD_INT 4
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PPUSH
9151: CALL_OW 69
9155: PUSH
9156: LD_EXP 21
9160: PUSH
9161: LD_EXP 36
9165: PUSH
9166: LD_EXP 35
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: DIFF
9176: ST_TO_ADDR
// for i in tmp do
9177: LD_ADDR_VAR 0 1
9181: PUSH
9182: LD_VAR 0 2
9186: PUSH
9187: FOR_IN
9188: IFFALSE 9262
// begin if Prob ( 40 + 10 * Difficulty ) then
9190: LD_INT 40
9192: PUSH
9193: LD_INT 10
9195: PUSH
9196: LD_OWVAR 67
9200: MUL
9201: PLUS
9202: PPUSH
9203: CALL_OW 13
9207: IFFALSE 9211
// continue ;
9209: GO 9187
// SetTag ( i , tEscape ) ;
9211: LD_VAR 0 1
9215: PPUSH
9216: LD_EXP 17
9220: PPUSH
9221: CALL_OW 109
// if IsInUnit ( i ) then
9225: LD_VAR 0 1
9229: PPUSH
9230: CALL_OW 310
9234: IFFALSE 9245
// ComExitBuilding ( i ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 92
9252: PPUSH
9253: LD_INT 177
9255: PPUSH
9256: CALL_OW 171
// end ;
9260: GO 9187
9262: POP
9263: POP
// end ;
9264: PPOPN 3
9266: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9267: LD_INT 9
9269: PPUSH
9270: LD_INT 2
9272: PUSH
9273: LD_INT 22
9275: PUSH
9276: LD_INT 3
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 22
9285: PUSH
9286: LD_INT 6
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: PPUSH
9298: CALL_OW 70
9302: IFFALSE 9400
9304: GO 9306
9306: DISABLE
9307: LD_INT 0
9309: PPUSH
// begin enable ;
9310: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9311: LD_ADDR_VAR 0 1
9315: PUSH
9316: LD_INT 9
9318: PPUSH
9319: LD_INT 2
9321: PUSH
9322: LD_INT 22
9324: PUSH
9325: LD_INT 3
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 22
9334: PUSH
9335: LD_INT 6
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: PPUSH
9347: CALL_OW 70
9351: PUSH
9352: FOR_IN
9353: IFFALSE 9398
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9355: LD_VAR 0 1
9359: PPUSH
9360: CALL_OW 110
9364: PUSH
9365: LD_EXP 17
9369: EQUAL
9370: PUSH
9371: LD_VAR 0 1
9375: PPUSH
9376: CALL_OW 255
9380: PUSH
9381: LD_INT 6
9383: EQUAL
9384: OR
9385: IFFALSE 9396
// RemoveUnit ( i ) ;
9387: LD_VAR 0 1
9391: PPUSH
9392: CALL_OW 64
9396: GO 9352
9398: POP
9399: POP
// end ;
9400: PPOPN 1
9402: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9403: LD_EXP 23
9407: PUSH
9408: LD_EXP 23
9412: PPUSH
9413: CALL_OW 256
9417: PUSH
9418: LD_INT 3
9420: LESS
9421: AND
9422: IFFALSE 9468
9424: GO 9426
9426: DISABLE
// begin DialogueOn ;
9427: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9431: LD_EXP 23
9435: PPUSH
9436: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9440: LD_EXP 23
9444: PPUSH
9445: LD_STRING DK-Kkilled-1
9447: PPUSH
9448: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9452: LD_EXP 18
9456: PPUSH
9457: LD_STRING DH-Kkilled-2
9459: PPUSH
9460: CALL_OW 88
// DialogueOff ;
9464: CALL_OW 7
// end ;
9468: END
// every 0 0$1 trigger kaiaKilledByRussian do
9469: LD_EXP 8
9473: IFFALSE 9490
9475: GO 9477
9477: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9478: LD_EXP 18
9482: PPUSH
9483: LD_STRING DH-Kkilled-3
9485: PPUSH
9486: CALL_OW 88
9490: END
// every 0 0$1 trigger tick >= 24 24$00 do
9491: LD_OWVAR 1
9495: PUSH
9496: LD_INT 50400
9498: GREATEREQUAL
9499: IFFALSE 9536
9501: GO 9503
9503: DISABLE
// begin DialogueOn ;
9504: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9508: LD_EXP 26
9512: PPUSH
9513: LD_STRING DShar-slow-1
9515: PPUSH
9516: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9520: LD_EXP 26
9524: PPUSH
9525: LD_STRING DShar-slow-2
9527: PPUSH
9528: CALL_OW 94
// DialogueOff ;
9532: CALL_OW 7
// end ;
9536: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9537: LD_OWVAR 1
9541: PUSH
9542: LD_INT 84000
9544: PUSH
9545: LD_INT 75600
9547: PUSH
9548: LD_INT 67200
9550: PUSH
9551: LD_INT 63000
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: PUSH
9560: LD_OWVAR 67
9564: ARRAY
9565: GREATEREQUAL
9566: IFFALSE 9610
9568: GO 9570
9570: DISABLE
// begin DialogueOn ;
9571: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9575: LD_EXP 26
9579: PPUSH
9580: LD_STRING DShar-fail-1
9582: PPUSH
9583: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9587: LD_EXP 26
9591: PPUSH
9592: LD_STRING DShar-fail-2
9594: PPUSH
9595: CALL_OW 94
// DialogueOff ;
9599: CALL_OW 7
// YouLost ( Time ) ;
9603: LD_STRING Time
9605: PPUSH
9606: CALL_OW 104
// end ;
9610: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9611: LD_INT 22
9613: PUSH
9614: LD_INT 3
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: LD_INT 30
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 30
9636: PUSH
9637: LD_INT 0
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: CALL_OW 69
9657: PUSH
9658: LD_INT 0
9660: EQUAL
9661: IFFALSE 10258
9663: GO 9665
9665: DISABLE
9666: LD_INT 0
9668: PPUSH
// begin if ( tick + gameTime ) <= 55 55$00 then
9669: LD_OWVAR 1
9673: PUSH
9674: LD_EXP 5
9678: PLUS
9679: PUSH
9680: LD_INT 115500
9682: LESSEQUAL
9683: IFFALSE 9692
// SetAchievement ( ACH_HSPEED_4 ) ;
9685: LD_STRING ACH_HSPEED_4
9687: PPUSH
9688: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9692: LD_OWVAR 1
9696: PUSH
9697: LD_EXP 5
9701: PLUS
9702: PUSH
9703: LD_INT 178500
9705: PUSH
9706: LD_INT 157500
9708: PUSH
9709: LD_INT 136500
9711: PUSH
9712: LD_INT 126000
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: PUSH
9721: LD_OWVAR 67
9725: ARRAY
9726: LESSEQUAL
9727: IFFALSE 9741
// AddMedal ( med1 , 1 ) else
9729: LD_STRING med1
9731: PPUSH
9732: LD_INT 1
9734: PPUSH
9735: CALL_OW 101
9739: GO 9752
// AddMedal ( med1 , - 1 ) ;
9741: LD_STRING med1
9743: PPUSH
9744: LD_INT 1
9746: NEG
9747: PPUSH
9748: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9752: LD_EXP 7
9756: PUSH
9757: LD_INT 3
9759: GREATEREQUAL
9760: PUSH
9761: LD_EXP 11
9765: MUL
9766: PUSH
9767: LD_EXP 9
9771: MUL
9772: PUSH
9773: LD_EXP 6
9777: PUSH
9778: LD_INT 6
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: LD_INT 4
9786: PUSH
9787: LD_INT 3
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: LD_OWVAR 67
9800: ARRAY
9801: LESS
9802: MUL
9803: IFFALSE 9817
// AddMedal ( med2 , 1 ) else
9805: LD_STRING med2
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 101
9815: GO 9891
// if flamethrowers < 3 then
9817: LD_EXP 7
9821: PUSH
9822: LD_INT 3
9824: LESS
9825: IFFALSE 9840
// AddMedal ( med2 , - 1 ) else
9827: LD_STRING med2
9829: PPUSH
9830: LD_INT 1
9832: NEG
9833: PPUSH
9834: CALL_OW 101
9838: GO 9891
// if not baseHill then
9840: LD_EXP 11
9844: NOT
9845: IFFALSE 9860
// AddMedal ( med2 , - 2 ) else
9847: LD_STRING med2
9849: PPUSH
9850: LD_INT 2
9852: NEG
9853: PPUSH
9854: CALL_OW 101
9858: GO 9891
// if not hannibalPath then
9860: LD_EXP 9
9864: NOT
9865: IFFALSE 9880
// AddMedal ( med2 , - 3 ) else
9867: LD_STRING med2
9869: PPUSH
9870: LD_INT 3
9872: NEG
9873: PPUSH
9874: CALL_OW 101
9878: GO 9891
// AddMedal ( med3 , - 2 ) ;
9880: LD_STRING med3
9882: PPUSH
9883: LD_INT 2
9885: NEG
9886: PPUSH
9887: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9891: LD_EXP 14
9895: PPUSH
9896: LD_STRING 04_2_GaidarKilled
9898: PPUSH
9899: CALL_OW 39
// if gaidarKilled then
9903: LD_EXP 14
9907: IFFALSE 9921
// AddMedal ( med3 , 1 ) else
9909: LD_STRING med3
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 101
9919: GO 9932
// AddMedal ( med3 , - 1 ) ;
9921: LD_STRING med3
9923: PPUSH
9924: LD_INT 1
9926: NEG
9927: PPUSH
9928: CALL_OW 101
// GiveMedals ( MAIN ) ;
9932: LD_STRING MAIN
9934: PPUSH
9935: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9939: LD_INT 22
9941: PUSH
9942: LD_INT 2
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 3
9951: PUSH
9952: LD_INT 23
9954: PUSH
9955: LD_INT 0
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PPUSH
9970: CALL_OW 69
9974: PPUSH
9975: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9979: LD_EXP 18
9983: PPUSH
9984: LD_STRING 04_2_Heike
9986: PPUSH
9987: CALL_OW 38
// if Aviradze then
9991: LD_EXP 28
9995: IFFALSE 10009
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9997: LD_EXP 28
10001: PPUSH
10002: LD_STRING 04_2_Aviradze
10004: PPUSH
10005: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10009: LD_EXP 21
10013: PUSH
10014: LD_EXP 21
10018: PPUSH
10019: CALL_OW 255
10023: PUSH
10024: LD_INT 2
10026: EQUAL
10027: AND
10028: IFFALSE 10058
// begin if ibrahimOnRuSide then
10030: LD_EXP 3
10034: IFFALSE 10046
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10036: LD_INT 1
10038: PPUSH
10039: LD_STRING 04_2_IbrahimJoined
10041: PPUSH
10042: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10046: LD_EXP 21
10050: PPUSH
10051: LD_STRING 04_2_Ibrahim
10053: PPUSH
10054: CALL_OW 38
// end ; if Kamil then
10058: LD_EXP 22
10062: IFFALSE 10076
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10064: LD_EXP 22
10068: PPUSH
10069: LD_STRING 04_2_Kamil
10071: PPUSH
10072: CALL_OW 38
// if Sophia then
10076: LD_EXP 24
10080: IFFALSE 10094
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10082: LD_EXP 24
10086: PPUSH
10087: LD_STRING 04_2_Sophia
10089: PPUSH
10090: CALL_OW 38
// if Kaia then
10094: LD_EXP 23
10098: IFFALSE 10112
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10100: LD_EXP 23
10104: PPUSH
10105: LD_STRING 04_2_Kaia
10107: PPUSH
10108: CALL_OW 38
// if Givi then
10112: LD_EXP 19
10116: IFFALSE 10130
// SaveCharacters ( Givi , 04_2_Givi ) ;
10118: LD_EXP 19
10122: PPUSH
10123: LD_STRING 04_2_Givi
10125: PPUSH
10126: CALL_OW 38
// if Mike then
10130: LD_EXP 20
10134: IFFALSE 10148
// SaveCharacters ( Mike , 04_2_Mike ) ;
10136: LD_EXP 20
10140: PPUSH
10141: LD_STRING 04_2_Mike
10143: PPUSH
10144: CALL_OW 38
// if Markov then
10148: LD_EXP 25
10152: IFFALSE 10166
// SaveCharacters ( Markov , 04_2_Markov ) ;
10154: LD_EXP 25
10158: PPUSH
10159: LD_STRING 04_2_Markov
10161: PPUSH
10162: CALL_OW 38
// if Kurt then
10166: LD_EXP 27
10170: IFFALSE 10184
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10172: LD_EXP 27
10176: PPUSH
10177: LD_STRING 04_2_Kurt
10179: PPUSH
10180: CALL_OW 38
// if heikeSecondSquad then
10184: LD_EXP 29
10188: IFFALSE 10202
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10190: LD_EXP 29
10194: PPUSH
10195: LD_STRING 04_2_others
10197: PPUSH
10198: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10202: LD_ADDR_VAR 0 1
10206: PUSH
10207: LD_INT 22
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 23
10219: PUSH
10220: LD_INT 0
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ST_TO_ADDR
// if tmp then
10236: LD_VAR 0 1
10240: IFFALSE 10254
// SaveCharacters ( tmp , 04_2_apes ) ;
10242: LD_VAR 0 1
10246: PPUSH
10247: LD_STRING 04_2_apes
10249: PPUSH
10250: CALL_OW 38
// YouWin ;
10254: CALL_OW 103
// end ; end_of_file
10258: PPOPN 1
10260: END
// export globalGameSaveCounter ; every 0 0$1 do
10261: GO 10263
10263: DISABLE
// begin enable ;
10264: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10265: LD_STRING updateTimer(
10267: PUSH
10268: LD_OWVAR 1
10272: STR
10273: PUSH
10274: LD_STRING );
10276: STR
10277: PPUSH
10278: CALL_OW 559
// end ;
10282: END
// every 0 0$1 do
10283: GO 10285
10285: DISABLE
// begin globalGameSaveCounter := 0 ;
10286: LD_ADDR_EXP 43
10290: PUSH
10291: LD_INT 0
10293: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10294: LD_STRING setGameSaveCounter(0)
10296: PPUSH
10297: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10301: LD_STRING initStreamRollete();
10303: PPUSH
10304: CALL_OW 559
// InitStreamMode ;
10308: CALL 11634 0 0
// DefineStreamItems ( false ) ;
10312: LD_INT 0
10314: PPUSH
10315: CALL 12098 0 1
// end ;
10319: END
// export function SOS_MapStart ( ) ; begin
10320: LD_INT 0
10322: PPUSH
// if streamModeActive then
10323: LD_EXP 44
10327: IFFALSE 10336
// DefineStreamItems ( true ) ;
10329: LD_INT 1
10331: PPUSH
10332: CALL 12098 0 1
// UpdateLuaVariables ( ) ;
10336: CALL 10353 0 0
// UpdateFactoryWaypoints ( ) ;
10340: CALL 24959 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10344: CALL 25216 0 0
// end ;
10348: LD_VAR 0 1
10352: RET
// function UpdateLuaVariables ( ) ; begin
10353: LD_INT 0
10355: PPUSH
// if globalGameSaveCounter then
10356: LD_EXP 43
10360: IFFALSE 10394
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10362: LD_ADDR_EXP 43
10366: PUSH
10367: LD_EXP 43
10371: PPUSH
10372: CALL 69336 0 1
10376: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10377: LD_STRING setGameSaveCounter(
10379: PUSH
10380: LD_EXP 43
10384: STR
10385: PUSH
10386: LD_STRING )
10388: STR
10389: PPUSH
10390: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10394: LD_STRING setGameDifficulty(
10396: PUSH
10397: LD_OWVAR 67
10401: STR
10402: PUSH
10403: LD_STRING )
10405: STR
10406: PPUSH
10407: CALL_OW 559
// end ;
10411: LD_VAR 0 1
10415: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10416: LD_INT 0
10418: PPUSH
// if p2 = stream_mode then
10419: LD_VAR 0 2
10423: PUSH
10424: LD_INT 100
10426: EQUAL
10427: IFFALSE 11430
// begin if not StreamModeActive then
10429: LD_EXP 44
10433: NOT
10434: IFFALSE 10444
// StreamModeActive := true ;
10436: LD_ADDR_EXP 44
10440: PUSH
10441: LD_INT 1
10443: ST_TO_ADDR
// if p3 = 0 then
10444: LD_VAR 0 3
10448: PUSH
10449: LD_INT 0
10451: EQUAL
10452: IFFALSE 10458
// InitStreamMode ;
10454: CALL 11634 0 0
// if p3 = 1 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 1
10465: EQUAL
10466: IFFALSE 10476
// sRocket := true ;
10468: LD_ADDR_EXP 49
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 2 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 2
10483: EQUAL
10484: IFFALSE 10494
// sSpeed := true ;
10486: LD_ADDR_EXP 48
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 3 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 3
10501: EQUAL
10502: IFFALSE 10512
// sEngine := true ;
10504: LD_ADDR_EXP 50
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 4 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 4
10519: EQUAL
10520: IFFALSE 10530
// sSpec := true ;
10522: LD_ADDR_EXP 47
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 5 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 5
10537: EQUAL
10538: IFFALSE 10548
// sLevel := true ;
10540: LD_ADDR_EXP 51
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 6 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 6
10555: EQUAL
10556: IFFALSE 10566
// sArmoury := true ;
10558: LD_ADDR_EXP 52
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 7 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 7
10573: EQUAL
10574: IFFALSE 10584
// sRadar := true ;
10576: LD_ADDR_EXP 53
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 8 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 8
10591: EQUAL
10592: IFFALSE 10602
// sBunker := true ;
10594: LD_ADDR_EXP 54
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 9 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 9
10609: EQUAL
10610: IFFALSE 10620
// sHack := true ;
10612: LD_ADDR_EXP 55
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 10 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 10
10627: EQUAL
10628: IFFALSE 10638
// sFire := true ;
10630: LD_ADDR_EXP 56
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// if p3 = 11 then
10638: LD_VAR 0 3
10642: PUSH
10643: LD_INT 11
10645: EQUAL
10646: IFFALSE 10656
// sRefresh := true ;
10648: LD_ADDR_EXP 57
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
// if p3 = 12 then
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 12
10663: EQUAL
10664: IFFALSE 10674
// sExp := true ;
10666: LD_ADDR_EXP 58
10670: PUSH
10671: LD_INT 1
10673: ST_TO_ADDR
// if p3 = 13 then
10674: LD_VAR 0 3
10678: PUSH
10679: LD_INT 13
10681: EQUAL
10682: IFFALSE 10692
// sDepot := true ;
10684: LD_ADDR_EXP 59
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// if p3 = 14 then
10692: LD_VAR 0 3
10696: PUSH
10697: LD_INT 14
10699: EQUAL
10700: IFFALSE 10710
// sFlag := true ;
10702: LD_ADDR_EXP 60
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// if p3 = 15 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 15
10717: EQUAL
10718: IFFALSE 10728
// sKamikadze := true ;
10720: LD_ADDR_EXP 68
10724: PUSH
10725: LD_INT 1
10727: ST_TO_ADDR
// if p3 = 16 then
10728: LD_VAR 0 3
10732: PUSH
10733: LD_INT 16
10735: EQUAL
10736: IFFALSE 10746
// sTroll := true ;
10738: LD_ADDR_EXP 69
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if p3 = 17 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 17
10753: EQUAL
10754: IFFALSE 10764
// sSlow := true ;
10756: LD_ADDR_EXP 70
10760: PUSH
10761: LD_INT 1
10763: ST_TO_ADDR
// if p3 = 18 then
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 18
10771: EQUAL
10772: IFFALSE 10782
// sLack := true ;
10774: LD_ADDR_EXP 71
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if p3 = 19 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 19
10789: EQUAL
10790: IFFALSE 10800
// sTank := true ;
10792: LD_ADDR_EXP 73
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// if p3 = 20 then
10800: LD_VAR 0 3
10804: PUSH
10805: LD_INT 20
10807: EQUAL
10808: IFFALSE 10818
// sRemote := true ;
10810: LD_ADDR_EXP 74
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// if p3 = 21 then
10818: LD_VAR 0 3
10822: PUSH
10823: LD_INT 21
10825: EQUAL
10826: IFFALSE 10836
// sPowell := true ;
10828: LD_ADDR_EXP 75
10832: PUSH
10833: LD_INT 1
10835: ST_TO_ADDR
// if p3 = 22 then
10836: LD_VAR 0 3
10840: PUSH
10841: LD_INT 22
10843: EQUAL
10844: IFFALSE 10854
// sTeleport := true ;
10846: LD_ADDR_EXP 78
10850: PUSH
10851: LD_INT 1
10853: ST_TO_ADDR
// if p3 = 23 then
10854: LD_VAR 0 3
10858: PUSH
10859: LD_INT 23
10861: EQUAL
10862: IFFALSE 10872
// sOilTower := true ;
10864: LD_ADDR_EXP 80
10868: PUSH
10869: LD_INT 1
10871: ST_TO_ADDR
// if p3 = 24 then
10872: LD_VAR 0 3
10876: PUSH
10877: LD_INT 24
10879: EQUAL
10880: IFFALSE 10890
// sShovel := true ;
10882: LD_ADDR_EXP 81
10886: PUSH
10887: LD_INT 1
10889: ST_TO_ADDR
// if p3 = 25 then
10890: LD_VAR 0 3
10894: PUSH
10895: LD_INT 25
10897: EQUAL
10898: IFFALSE 10908
// sSheik := true ;
10900: LD_ADDR_EXP 82
10904: PUSH
10905: LD_INT 1
10907: ST_TO_ADDR
// if p3 = 26 then
10908: LD_VAR 0 3
10912: PUSH
10913: LD_INT 26
10915: EQUAL
10916: IFFALSE 10926
// sEarthquake := true ;
10918: LD_ADDR_EXP 84
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if p3 = 27 then
10926: LD_VAR 0 3
10930: PUSH
10931: LD_INT 27
10933: EQUAL
10934: IFFALSE 10944
// sAI := true ;
10936: LD_ADDR_EXP 85
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// if p3 = 28 then
10944: LD_VAR 0 3
10948: PUSH
10949: LD_INT 28
10951: EQUAL
10952: IFFALSE 10962
// sCargo := true ;
10954: LD_ADDR_EXP 88
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// if p3 = 29 then
10962: LD_VAR 0 3
10966: PUSH
10967: LD_INT 29
10969: EQUAL
10970: IFFALSE 10980
// sDLaser := true ;
10972: LD_ADDR_EXP 89
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// if p3 = 30 then
10980: LD_VAR 0 3
10984: PUSH
10985: LD_INT 30
10987: EQUAL
10988: IFFALSE 10998
// sExchange := true ;
10990: LD_ADDR_EXP 90
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// if p3 = 31 then
10998: LD_VAR 0 3
11002: PUSH
11003: LD_INT 31
11005: EQUAL
11006: IFFALSE 11016
// sFac := true ;
11008: LD_ADDR_EXP 91
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if p3 = 32 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 32
11023: EQUAL
11024: IFFALSE 11034
// sPower := true ;
11026: LD_ADDR_EXP 92
11030: PUSH
11031: LD_INT 1
11033: ST_TO_ADDR
// if p3 = 33 then
11034: LD_VAR 0 3
11038: PUSH
11039: LD_INT 33
11041: EQUAL
11042: IFFALSE 11052
// sRandom := true ;
11044: LD_ADDR_EXP 93
11048: PUSH
11049: LD_INT 1
11051: ST_TO_ADDR
// if p3 = 34 then
11052: LD_VAR 0 3
11056: PUSH
11057: LD_INT 34
11059: EQUAL
11060: IFFALSE 11070
// sShield := true ;
11062: LD_ADDR_EXP 94
11066: PUSH
11067: LD_INT 1
11069: ST_TO_ADDR
// if p3 = 35 then
11070: LD_VAR 0 3
11074: PUSH
11075: LD_INT 35
11077: EQUAL
11078: IFFALSE 11088
// sTime := true ;
11080: LD_ADDR_EXP 95
11084: PUSH
11085: LD_INT 1
11087: ST_TO_ADDR
// if p3 = 36 then
11088: LD_VAR 0 3
11092: PUSH
11093: LD_INT 36
11095: EQUAL
11096: IFFALSE 11106
// sTools := true ;
11098: LD_ADDR_EXP 96
11102: PUSH
11103: LD_INT 1
11105: ST_TO_ADDR
// if p3 = 101 then
11106: LD_VAR 0 3
11110: PUSH
11111: LD_INT 101
11113: EQUAL
11114: IFFALSE 11124
// sSold := true ;
11116: LD_ADDR_EXP 61
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// if p3 = 102 then
11124: LD_VAR 0 3
11128: PUSH
11129: LD_INT 102
11131: EQUAL
11132: IFFALSE 11142
// sDiff := true ;
11134: LD_ADDR_EXP 62
11138: PUSH
11139: LD_INT 1
11141: ST_TO_ADDR
// if p3 = 103 then
11142: LD_VAR 0 3
11146: PUSH
11147: LD_INT 103
11149: EQUAL
11150: IFFALSE 11160
// sFog := true ;
11152: LD_ADDR_EXP 65
11156: PUSH
11157: LD_INT 1
11159: ST_TO_ADDR
// if p3 = 104 then
11160: LD_VAR 0 3
11164: PUSH
11165: LD_INT 104
11167: EQUAL
11168: IFFALSE 11178
// sReset := true ;
11170: LD_ADDR_EXP 66
11174: PUSH
11175: LD_INT 1
11177: ST_TO_ADDR
// if p3 = 105 then
11178: LD_VAR 0 3
11182: PUSH
11183: LD_INT 105
11185: EQUAL
11186: IFFALSE 11196
// sSun := true ;
11188: LD_ADDR_EXP 67
11192: PUSH
11193: LD_INT 1
11195: ST_TO_ADDR
// if p3 = 106 then
11196: LD_VAR 0 3
11200: PUSH
11201: LD_INT 106
11203: EQUAL
11204: IFFALSE 11214
// sTiger := true ;
11206: LD_ADDR_EXP 63
11210: PUSH
11211: LD_INT 1
11213: ST_TO_ADDR
// if p3 = 107 then
11214: LD_VAR 0 3
11218: PUSH
11219: LD_INT 107
11221: EQUAL
11222: IFFALSE 11232
// sBomb := true ;
11224: LD_ADDR_EXP 64
11228: PUSH
11229: LD_INT 1
11231: ST_TO_ADDR
// if p3 = 108 then
11232: LD_VAR 0 3
11236: PUSH
11237: LD_INT 108
11239: EQUAL
11240: IFFALSE 11250
// sWound := true ;
11242: LD_ADDR_EXP 72
11246: PUSH
11247: LD_INT 1
11249: ST_TO_ADDR
// if p3 = 109 then
11250: LD_VAR 0 3
11254: PUSH
11255: LD_INT 109
11257: EQUAL
11258: IFFALSE 11268
// sBetray := true ;
11260: LD_ADDR_EXP 76
11264: PUSH
11265: LD_INT 1
11267: ST_TO_ADDR
// if p3 = 110 then
11268: LD_VAR 0 3
11272: PUSH
11273: LD_INT 110
11275: EQUAL
11276: IFFALSE 11286
// sContamin := true ;
11278: LD_ADDR_EXP 77
11282: PUSH
11283: LD_INT 1
11285: ST_TO_ADDR
// if p3 = 111 then
11286: LD_VAR 0 3
11290: PUSH
11291: LD_INT 111
11293: EQUAL
11294: IFFALSE 11304
// sOil := true ;
11296: LD_ADDR_EXP 79
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// if p3 = 112 then
11304: LD_VAR 0 3
11308: PUSH
11309: LD_INT 112
11311: EQUAL
11312: IFFALSE 11322
// sStu := true ;
11314: LD_ADDR_EXP 83
11318: PUSH
11319: LD_INT 1
11321: ST_TO_ADDR
// if p3 = 113 then
11322: LD_VAR 0 3
11326: PUSH
11327: LD_INT 113
11329: EQUAL
11330: IFFALSE 11340
// sBazooka := true ;
11332: LD_ADDR_EXP 86
11336: PUSH
11337: LD_INT 1
11339: ST_TO_ADDR
// if p3 = 114 then
11340: LD_VAR 0 3
11344: PUSH
11345: LD_INT 114
11347: EQUAL
11348: IFFALSE 11358
// sMortar := true ;
11350: LD_ADDR_EXP 87
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// if p3 = 115 then
11358: LD_VAR 0 3
11362: PUSH
11363: LD_INT 115
11365: EQUAL
11366: IFFALSE 11376
// sRanger := true ;
11368: LD_ADDR_EXP 97
11372: PUSH
11373: LD_INT 1
11375: ST_TO_ADDR
// if p3 = 116 then
11376: LD_VAR 0 3
11380: PUSH
11381: LD_INT 116
11383: EQUAL
11384: IFFALSE 11394
// sComputer := true ;
11386: LD_ADDR_EXP 98
11390: PUSH
11391: LD_INT 1
11393: ST_TO_ADDR
// if p3 = 117 then
11394: LD_VAR 0 3
11398: PUSH
11399: LD_INT 117
11401: EQUAL
11402: IFFALSE 11412
// s30 := true ;
11404: LD_ADDR_EXP 99
11408: PUSH
11409: LD_INT 1
11411: ST_TO_ADDR
// if p3 = 118 then
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 118
11419: EQUAL
11420: IFFALSE 11430
// s60 := true ;
11422: LD_ADDR_EXP 100
11426: PUSH
11427: LD_INT 1
11429: ST_TO_ADDR
// end ; if p2 = hack_mode then
11430: LD_VAR 0 2
11434: PUSH
11435: LD_INT 101
11437: EQUAL
11438: IFFALSE 11566
// begin case p3 of 1 :
11440: LD_VAR 0 3
11444: PUSH
11445: LD_INT 1
11447: DOUBLE
11448: EQUAL
11449: IFTRUE 11453
11451: GO 11460
11453: POP
// hHackUnlimitedResources ; 2 :
11454: CALL 23705 0 0
11458: GO 11566
11460: LD_INT 2
11462: DOUBLE
11463: EQUAL
11464: IFTRUE 11468
11466: GO 11475
11468: POP
// hHackSetLevel10 ; 3 :
11469: CALL 23838 0 0
11473: GO 11566
11475: LD_INT 3
11477: DOUBLE
11478: EQUAL
11479: IFTRUE 11483
11481: GO 11490
11483: POP
// hHackSetLevel10YourUnits ; 4 :
11484: CALL 23923 0 0
11488: GO 11566
11490: LD_INT 4
11492: DOUBLE
11493: EQUAL
11494: IFTRUE 11498
11496: GO 11505
11498: POP
// hHackInvincible ; 5 :
11499: CALL 24371 0 0
11503: GO 11566
11505: LD_INT 5
11507: DOUBLE
11508: EQUAL
11509: IFTRUE 11513
11511: GO 11520
11513: POP
// hHackInvisible ; 6 :
11514: CALL 24482 0 0
11518: GO 11566
11520: LD_INT 6
11522: DOUBLE
11523: EQUAL
11524: IFTRUE 11528
11526: GO 11535
11528: POP
// hHackChangeYourSide ; 7 :
11529: CALL 24539 0 0
11533: GO 11566
11535: LD_INT 7
11537: DOUBLE
11538: EQUAL
11539: IFTRUE 11543
11541: GO 11550
11543: POP
// hHackChangeUnitSide ; 8 :
11544: CALL 24581 0 0
11548: GO 11566
11550: LD_INT 8
11552: DOUBLE
11553: EQUAL
11554: IFTRUE 11558
11556: GO 11565
11558: POP
// hHackFog ; end ;
11559: CALL 24682 0 0
11563: GO 11566
11565: POP
// end ; if p2 = game_save_mode then
11566: LD_VAR 0 2
11570: PUSH
11571: LD_INT 102
11573: EQUAL
11574: IFFALSE 11629
// begin if p3 = 1 then
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 1
11583: EQUAL
11584: IFFALSE 11596
// globalGameSaveCounter := p4 ;
11586: LD_ADDR_EXP 43
11590: PUSH
11591: LD_VAR 0 4
11595: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11596: LD_VAR 0 3
11600: PUSH
11601: LD_INT 2
11603: EQUAL
11604: PUSH
11605: LD_EXP 43
11609: AND
11610: IFFALSE 11629
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11612: LD_STRING setGameSaveCounter(
11614: PUSH
11615: LD_EXP 43
11619: STR
11620: PUSH
11621: LD_STRING )
11623: STR
11624: PPUSH
11625: CALL_OW 559
// end ; end ;
11629: LD_VAR 0 7
11633: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11634: LD_INT 0
11636: PPUSH
// streamModeActive := false ;
11637: LD_ADDR_EXP 44
11641: PUSH
11642: LD_INT 0
11644: ST_TO_ADDR
// normalCounter := 36 ;
11645: LD_ADDR_EXP 45
11649: PUSH
11650: LD_INT 36
11652: ST_TO_ADDR
// hardcoreCounter := 18 ;
11653: LD_ADDR_EXP 46
11657: PUSH
11658: LD_INT 18
11660: ST_TO_ADDR
// sRocket := false ;
11661: LD_ADDR_EXP 49
11665: PUSH
11666: LD_INT 0
11668: ST_TO_ADDR
// sSpeed := false ;
11669: LD_ADDR_EXP 48
11673: PUSH
11674: LD_INT 0
11676: ST_TO_ADDR
// sEngine := false ;
11677: LD_ADDR_EXP 50
11681: PUSH
11682: LD_INT 0
11684: ST_TO_ADDR
// sSpec := false ;
11685: LD_ADDR_EXP 47
11689: PUSH
11690: LD_INT 0
11692: ST_TO_ADDR
// sLevel := false ;
11693: LD_ADDR_EXP 51
11697: PUSH
11698: LD_INT 0
11700: ST_TO_ADDR
// sArmoury := false ;
11701: LD_ADDR_EXP 52
11705: PUSH
11706: LD_INT 0
11708: ST_TO_ADDR
// sRadar := false ;
11709: LD_ADDR_EXP 53
11713: PUSH
11714: LD_INT 0
11716: ST_TO_ADDR
// sBunker := false ;
11717: LD_ADDR_EXP 54
11721: PUSH
11722: LD_INT 0
11724: ST_TO_ADDR
// sHack := false ;
11725: LD_ADDR_EXP 55
11729: PUSH
11730: LD_INT 0
11732: ST_TO_ADDR
// sFire := false ;
11733: LD_ADDR_EXP 56
11737: PUSH
11738: LD_INT 0
11740: ST_TO_ADDR
// sRefresh := false ;
11741: LD_ADDR_EXP 57
11745: PUSH
11746: LD_INT 0
11748: ST_TO_ADDR
// sExp := false ;
11749: LD_ADDR_EXP 58
11753: PUSH
11754: LD_INT 0
11756: ST_TO_ADDR
// sDepot := false ;
11757: LD_ADDR_EXP 59
11761: PUSH
11762: LD_INT 0
11764: ST_TO_ADDR
// sFlag := false ;
11765: LD_ADDR_EXP 60
11769: PUSH
11770: LD_INT 0
11772: ST_TO_ADDR
// sKamikadze := false ;
11773: LD_ADDR_EXP 68
11777: PUSH
11778: LD_INT 0
11780: ST_TO_ADDR
// sTroll := false ;
11781: LD_ADDR_EXP 69
11785: PUSH
11786: LD_INT 0
11788: ST_TO_ADDR
// sSlow := false ;
11789: LD_ADDR_EXP 70
11793: PUSH
11794: LD_INT 0
11796: ST_TO_ADDR
// sLack := false ;
11797: LD_ADDR_EXP 71
11801: PUSH
11802: LD_INT 0
11804: ST_TO_ADDR
// sTank := false ;
11805: LD_ADDR_EXP 73
11809: PUSH
11810: LD_INT 0
11812: ST_TO_ADDR
// sRemote := false ;
11813: LD_ADDR_EXP 74
11817: PUSH
11818: LD_INT 0
11820: ST_TO_ADDR
// sPowell := false ;
11821: LD_ADDR_EXP 75
11825: PUSH
11826: LD_INT 0
11828: ST_TO_ADDR
// sTeleport := false ;
11829: LD_ADDR_EXP 78
11833: PUSH
11834: LD_INT 0
11836: ST_TO_ADDR
// sOilTower := false ;
11837: LD_ADDR_EXP 80
11841: PUSH
11842: LD_INT 0
11844: ST_TO_ADDR
// sShovel := false ;
11845: LD_ADDR_EXP 81
11849: PUSH
11850: LD_INT 0
11852: ST_TO_ADDR
// sSheik := false ;
11853: LD_ADDR_EXP 82
11857: PUSH
11858: LD_INT 0
11860: ST_TO_ADDR
// sEarthquake := false ;
11861: LD_ADDR_EXP 84
11865: PUSH
11866: LD_INT 0
11868: ST_TO_ADDR
// sAI := false ;
11869: LD_ADDR_EXP 85
11873: PUSH
11874: LD_INT 0
11876: ST_TO_ADDR
// sCargo := false ;
11877: LD_ADDR_EXP 88
11881: PUSH
11882: LD_INT 0
11884: ST_TO_ADDR
// sDLaser := false ;
11885: LD_ADDR_EXP 89
11889: PUSH
11890: LD_INT 0
11892: ST_TO_ADDR
// sExchange := false ;
11893: LD_ADDR_EXP 90
11897: PUSH
11898: LD_INT 0
11900: ST_TO_ADDR
// sFac := false ;
11901: LD_ADDR_EXP 91
11905: PUSH
11906: LD_INT 0
11908: ST_TO_ADDR
// sPower := false ;
11909: LD_ADDR_EXP 92
11913: PUSH
11914: LD_INT 0
11916: ST_TO_ADDR
// sRandom := false ;
11917: LD_ADDR_EXP 93
11921: PUSH
11922: LD_INT 0
11924: ST_TO_ADDR
// sShield := false ;
11925: LD_ADDR_EXP 94
11929: PUSH
11930: LD_INT 0
11932: ST_TO_ADDR
// sTime := false ;
11933: LD_ADDR_EXP 95
11937: PUSH
11938: LD_INT 0
11940: ST_TO_ADDR
// sTools := false ;
11941: LD_ADDR_EXP 96
11945: PUSH
11946: LD_INT 0
11948: ST_TO_ADDR
// sSold := false ;
11949: LD_ADDR_EXP 61
11953: PUSH
11954: LD_INT 0
11956: ST_TO_ADDR
// sDiff := false ;
11957: LD_ADDR_EXP 62
11961: PUSH
11962: LD_INT 0
11964: ST_TO_ADDR
// sFog := false ;
11965: LD_ADDR_EXP 65
11969: PUSH
11970: LD_INT 0
11972: ST_TO_ADDR
// sReset := false ;
11973: LD_ADDR_EXP 66
11977: PUSH
11978: LD_INT 0
11980: ST_TO_ADDR
// sSun := false ;
11981: LD_ADDR_EXP 67
11985: PUSH
11986: LD_INT 0
11988: ST_TO_ADDR
// sTiger := false ;
11989: LD_ADDR_EXP 63
11993: PUSH
11994: LD_INT 0
11996: ST_TO_ADDR
// sBomb := false ;
11997: LD_ADDR_EXP 64
12001: PUSH
12002: LD_INT 0
12004: ST_TO_ADDR
// sWound := false ;
12005: LD_ADDR_EXP 72
12009: PUSH
12010: LD_INT 0
12012: ST_TO_ADDR
// sBetray := false ;
12013: LD_ADDR_EXP 76
12017: PUSH
12018: LD_INT 0
12020: ST_TO_ADDR
// sContamin := false ;
12021: LD_ADDR_EXP 77
12025: PUSH
12026: LD_INT 0
12028: ST_TO_ADDR
// sOil := false ;
12029: LD_ADDR_EXP 79
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// sStu := false ;
12037: LD_ADDR_EXP 83
12041: PUSH
12042: LD_INT 0
12044: ST_TO_ADDR
// sBazooka := false ;
12045: LD_ADDR_EXP 86
12049: PUSH
12050: LD_INT 0
12052: ST_TO_ADDR
// sMortar := false ;
12053: LD_ADDR_EXP 87
12057: PUSH
12058: LD_INT 0
12060: ST_TO_ADDR
// sRanger := false ;
12061: LD_ADDR_EXP 97
12065: PUSH
12066: LD_INT 0
12068: ST_TO_ADDR
// sComputer := false ;
12069: LD_ADDR_EXP 98
12073: PUSH
12074: LD_INT 0
12076: ST_TO_ADDR
// s30 := false ;
12077: LD_ADDR_EXP 99
12081: PUSH
12082: LD_INT 0
12084: ST_TO_ADDR
// s60 := false ;
12085: LD_ADDR_EXP 100
12089: PUSH
12090: LD_INT 0
12092: ST_TO_ADDR
// end ;
12093: LD_VAR 0 1
12097: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12098: LD_INT 0
12100: PPUSH
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
12106: PPUSH
// result := [ ] ;
12107: LD_ADDR_VAR 0 2
12111: PUSH
12112: EMPTY
12113: ST_TO_ADDR
// if campaign_id = 1 then
12114: LD_OWVAR 69
12118: PUSH
12119: LD_INT 1
12121: EQUAL
12122: IFFALSE 15288
// begin case mission_number of 1 :
12124: LD_OWVAR 70
12128: PUSH
12129: LD_INT 1
12131: DOUBLE
12132: EQUAL
12133: IFTRUE 12137
12135: GO 12213
12137: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12138: LD_ADDR_VAR 0 2
12142: PUSH
12143: LD_INT 2
12145: PUSH
12146: LD_INT 4
12148: PUSH
12149: LD_INT 11
12151: PUSH
12152: LD_INT 12
12154: PUSH
12155: LD_INT 15
12157: PUSH
12158: LD_INT 16
12160: PUSH
12161: LD_INT 22
12163: PUSH
12164: LD_INT 23
12166: PUSH
12167: LD_INT 26
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 101
12183: PUSH
12184: LD_INT 102
12186: PUSH
12187: LD_INT 106
12189: PUSH
12190: LD_INT 116
12192: PUSH
12193: LD_INT 117
12195: PUSH
12196: LD_INT 118
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: ST_TO_ADDR
12211: GO 15286
12213: LD_INT 2
12215: DOUBLE
12216: EQUAL
12217: IFTRUE 12221
12219: GO 12305
12221: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12222: LD_ADDR_VAR 0 2
12226: PUSH
12227: LD_INT 2
12229: PUSH
12230: LD_INT 4
12232: PUSH
12233: LD_INT 11
12235: PUSH
12236: LD_INT 12
12238: PUSH
12239: LD_INT 15
12241: PUSH
12242: LD_INT 16
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 23
12250: PUSH
12251: LD_INT 26
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 101
12267: PUSH
12268: LD_INT 102
12270: PUSH
12271: LD_INT 105
12273: PUSH
12274: LD_INT 106
12276: PUSH
12277: LD_INT 108
12279: PUSH
12280: LD_INT 116
12282: PUSH
12283: LD_INT 117
12285: PUSH
12286: LD_INT 118
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: ST_TO_ADDR
12303: GO 15286
12305: LD_INT 3
12307: DOUBLE
12308: EQUAL
12309: IFTRUE 12313
12311: GO 12401
12313: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: LD_INT 4
12324: PUSH
12325: LD_INT 5
12327: PUSH
12328: LD_INT 11
12330: PUSH
12331: LD_INT 12
12333: PUSH
12334: LD_INT 15
12336: PUSH
12337: LD_INT 16
12339: PUSH
12340: LD_INT 22
12342: PUSH
12343: LD_INT 26
12345: PUSH
12346: LD_INT 36
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 101
12363: PUSH
12364: LD_INT 102
12366: PUSH
12367: LD_INT 105
12369: PUSH
12370: LD_INT 106
12372: PUSH
12373: LD_INT 108
12375: PUSH
12376: LD_INT 116
12378: PUSH
12379: LD_INT 117
12381: PUSH
12382: LD_INT 118
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: ST_TO_ADDR
12399: GO 15286
12401: LD_INT 4
12403: DOUBLE
12404: EQUAL
12405: IFTRUE 12409
12407: GO 12505
12409: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12410: LD_ADDR_VAR 0 2
12414: PUSH
12415: LD_INT 2
12417: PUSH
12418: LD_INT 4
12420: PUSH
12421: LD_INT 5
12423: PUSH
12424: LD_INT 8
12426: PUSH
12427: LD_INT 11
12429: PUSH
12430: LD_INT 12
12432: PUSH
12433: LD_INT 15
12435: PUSH
12436: LD_INT 16
12438: PUSH
12439: LD_INT 22
12441: PUSH
12442: LD_INT 23
12444: PUSH
12445: LD_INT 26
12447: PUSH
12448: LD_INT 36
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 101
12467: PUSH
12468: LD_INT 102
12470: PUSH
12471: LD_INT 105
12473: PUSH
12474: LD_INT 106
12476: PUSH
12477: LD_INT 108
12479: PUSH
12480: LD_INT 116
12482: PUSH
12483: LD_INT 117
12485: PUSH
12486: LD_INT 118
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: ST_TO_ADDR
12503: GO 15286
12505: LD_INT 5
12507: DOUBLE
12508: EQUAL
12509: IFTRUE 12513
12511: GO 12625
12513: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12514: LD_ADDR_VAR 0 2
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: LD_INT 4
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: LD_INT 6
12530: PUSH
12531: LD_INT 8
12533: PUSH
12534: LD_INT 11
12536: PUSH
12537: LD_INT 12
12539: PUSH
12540: LD_INT 15
12542: PUSH
12543: LD_INT 16
12545: PUSH
12546: LD_INT 22
12548: PUSH
12549: LD_INT 23
12551: PUSH
12552: LD_INT 25
12554: PUSH
12555: LD_INT 26
12557: PUSH
12558: LD_INT 36
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 101
12579: PUSH
12580: LD_INT 102
12582: PUSH
12583: LD_INT 105
12585: PUSH
12586: LD_INT 106
12588: PUSH
12589: LD_INT 108
12591: PUSH
12592: LD_INT 109
12594: PUSH
12595: LD_INT 112
12597: PUSH
12598: LD_INT 116
12600: PUSH
12601: LD_INT 117
12603: PUSH
12604: LD_INT 118
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: ST_TO_ADDR
12623: GO 15286
12625: LD_INT 6
12627: DOUBLE
12628: EQUAL
12629: IFTRUE 12633
12631: GO 12765
12633: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12634: LD_ADDR_VAR 0 2
12638: PUSH
12639: LD_INT 2
12641: PUSH
12642: LD_INT 4
12644: PUSH
12645: LD_INT 5
12647: PUSH
12648: LD_INT 6
12650: PUSH
12651: LD_INT 8
12653: PUSH
12654: LD_INT 11
12656: PUSH
12657: LD_INT 12
12659: PUSH
12660: LD_INT 15
12662: PUSH
12663: LD_INT 16
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: LD_INT 21
12671: PUSH
12672: LD_INT 22
12674: PUSH
12675: LD_INT 23
12677: PUSH
12678: LD_INT 25
12680: PUSH
12681: LD_INT 26
12683: PUSH
12684: LD_INT 30
12686: PUSH
12687: LD_INT 31
12689: PUSH
12690: LD_INT 32
12692: PUSH
12693: LD_INT 36
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 101
12719: PUSH
12720: LD_INT 102
12722: PUSH
12723: LD_INT 105
12725: PUSH
12726: LD_INT 106
12728: PUSH
12729: LD_INT 108
12731: PUSH
12732: LD_INT 109
12734: PUSH
12735: LD_INT 112
12737: PUSH
12738: LD_INT 116
12740: PUSH
12741: LD_INT 117
12743: PUSH
12744: LD_INT 118
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: ST_TO_ADDR
12763: GO 15286
12765: LD_INT 7
12767: DOUBLE
12768: EQUAL
12769: IFTRUE 12773
12771: GO 12885
12773: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12774: LD_ADDR_VAR 0 2
12778: PUSH
12779: LD_INT 2
12781: PUSH
12782: LD_INT 4
12784: PUSH
12785: LD_INT 5
12787: PUSH
12788: LD_INT 7
12790: PUSH
12791: LD_INT 11
12793: PUSH
12794: LD_INT 12
12796: PUSH
12797: LD_INT 15
12799: PUSH
12800: LD_INT 16
12802: PUSH
12803: LD_INT 20
12805: PUSH
12806: LD_INT 21
12808: PUSH
12809: LD_INT 22
12811: PUSH
12812: LD_INT 23
12814: PUSH
12815: LD_INT 25
12817: PUSH
12818: LD_INT 26
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 101
12839: PUSH
12840: LD_INT 102
12842: PUSH
12843: LD_INT 103
12845: PUSH
12846: LD_INT 105
12848: PUSH
12849: LD_INT 106
12851: PUSH
12852: LD_INT 108
12854: PUSH
12855: LD_INT 112
12857: PUSH
12858: LD_INT 116
12860: PUSH
12861: LD_INT 117
12863: PUSH
12864: LD_INT 118
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: ST_TO_ADDR
12883: GO 15286
12885: LD_INT 8
12887: DOUBLE
12888: EQUAL
12889: IFTRUE 12893
12891: GO 13033
12893: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12894: LD_ADDR_VAR 0 2
12898: PUSH
12899: LD_INT 2
12901: PUSH
12902: LD_INT 4
12904: PUSH
12905: LD_INT 5
12907: PUSH
12908: LD_INT 6
12910: PUSH
12911: LD_INT 7
12913: PUSH
12914: LD_INT 8
12916: PUSH
12917: LD_INT 11
12919: PUSH
12920: LD_INT 12
12922: PUSH
12923: LD_INT 15
12925: PUSH
12926: LD_INT 16
12928: PUSH
12929: LD_INT 20
12931: PUSH
12932: LD_INT 21
12934: PUSH
12935: LD_INT 22
12937: PUSH
12938: LD_INT 23
12940: PUSH
12941: LD_INT 25
12943: PUSH
12944: LD_INT 26
12946: PUSH
12947: LD_INT 30
12949: PUSH
12950: LD_INT 31
12952: PUSH
12953: LD_INT 32
12955: PUSH
12956: LD_INT 36
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 101
12983: PUSH
12984: LD_INT 102
12986: PUSH
12987: LD_INT 103
12989: PUSH
12990: LD_INT 105
12992: PUSH
12993: LD_INT 106
12995: PUSH
12996: LD_INT 108
12998: PUSH
12999: LD_INT 109
13001: PUSH
13002: LD_INT 112
13004: PUSH
13005: LD_INT 116
13007: PUSH
13008: LD_INT 117
13010: PUSH
13011: LD_INT 118
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: ST_TO_ADDR
13031: GO 15286
13033: LD_INT 9
13035: DOUBLE
13036: EQUAL
13037: IFTRUE 13041
13039: GO 13189
13041: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13042: LD_ADDR_VAR 0 2
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 4
13052: PUSH
13053: LD_INT 5
13055: PUSH
13056: LD_INT 6
13058: PUSH
13059: LD_INT 7
13061: PUSH
13062: LD_INT 8
13064: PUSH
13065: LD_INT 11
13067: PUSH
13068: LD_INT 12
13070: PUSH
13071: LD_INT 15
13073: PUSH
13074: LD_INT 16
13076: PUSH
13077: LD_INT 20
13079: PUSH
13080: LD_INT 21
13082: PUSH
13083: LD_INT 22
13085: PUSH
13086: LD_INT 23
13088: PUSH
13089: LD_INT 25
13091: PUSH
13092: LD_INT 26
13094: PUSH
13095: LD_INT 28
13097: PUSH
13098: LD_INT 30
13100: PUSH
13101: LD_INT 31
13103: PUSH
13104: LD_INT 32
13106: PUSH
13107: LD_INT 36
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 101
13135: PUSH
13136: LD_INT 102
13138: PUSH
13139: LD_INT 103
13141: PUSH
13142: LD_INT 105
13144: PUSH
13145: LD_INT 106
13147: PUSH
13148: LD_INT 108
13150: PUSH
13151: LD_INT 109
13153: PUSH
13154: LD_INT 112
13156: PUSH
13157: LD_INT 114
13159: PUSH
13160: LD_INT 116
13162: PUSH
13163: LD_INT 117
13165: PUSH
13166: LD_INT 118
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: ST_TO_ADDR
13187: GO 15286
13189: LD_INT 10
13191: DOUBLE
13192: EQUAL
13193: IFTRUE 13197
13195: GO 13393
13197: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13198: LD_ADDR_VAR 0 2
13202: PUSH
13203: LD_INT 2
13205: PUSH
13206: LD_INT 4
13208: PUSH
13209: LD_INT 5
13211: PUSH
13212: LD_INT 6
13214: PUSH
13215: LD_INT 7
13217: PUSH
13218: LD_INT 8
13220: PUSH
13221: LD_INT 9
13223: PUSH
13224: LD_INT 10
13226: PUSH
13227: LD_INT 11
13229: PUSH
13230: LD_INT 12
13232: PUSH
13233: LD_INT 13
13235: PUSH
13236: LD_INT 14
13238: PUSH
13239: LD_INT 15
13241: PUSH
13242: LD_INT 16
13244: PUSH
13245: LD_INT 17
13247: PUSH
13248: LD_INT 18
13250: PUSH
13251: LD_INT 19
13253: PUSH
13254: LD_INT 20
13256: PUSH
13257: LD_INT 21
13259: PUSH
13260: LD_INT 22
13262: PUSH
13263: LD_INT 23
13265: PUSH
13266: LD_INT 24
13268: PUSH
13269: LD_INT 25
13271: PUSH
13272: LD_INT 26
13274: PUSH
13275: LD_INT 28
13277: PUSH
13278: LD_INT 30
13280: PUSH
13281: LD_INT 31
13283: PUSH
13284: LD_INT 32
13286: PUSH
13287: LD_INT 36
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: PUSH
13321: LD_INT 101
13323: PUSH
13324: LD_INT 102
13326: PUSH
13327: LD_INT 103
13329: PUSH
13330: LD_INT 104
13332: PUSH
13333: LD_INT 105
13335: PUSH
13336: LD_INT 106
13338: PUSH
13339: LD_INT 107
13341: PUSH
13342: LD_INT 108
13344: PUSH
13345: LD_INT 109
13347: PUSH
13348: LD_INT 110
13350: PUSH
13351: LD_INT 111
13353: PUSH
13354: LD_INT 112
13356: PUSH
13357: LD_INT 114
13359: PUSH
13360: LD_INT 116
13362: PUSH
13363: LD_INT 117
13365: PUSH
13366: LD_INT 118
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: ST_TO_ADDR
13391: GO 15286
13393: LD_INT 11
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13605
13401: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13402: LD_ADDR_VAR 0 2
13406: PUSH
13407: LD_INT 2
13409: PUSH
13410: LD_INT 3
13412: PUSH
13413: LD_INT 4
13415: PUSH
13416: LD_INT 5
13418: PUSH
13419: LD_INT 6
13421: PUSH
13422: LD_INT 7
13424: PUSH
13425: LD_INT 8
13427: PUSH
13428: LD_INT 9
13430: PUSH
13431: LD_INT 10
13433: PUSH
13434: LD_INT 11
13436: PUSH
13437: LD_INT 12
13439: PUSH
13440: LD_INT 13
13442: PUSH
13443: LD_INT 14
13445: PUSH
13446: LD_INT 15
13448: PUSH
13449: LD_INT 16
13451: PUSH
13452: LD_INT 17
13454: PUSH
13455: LD_INT 18
13457: PUSH
13458: LD_INT 19
13460: PUSH
13461: LD_INT 20
13463: PUSH
13464: LD_INT 21
13466: PUSH
13467: LD_INT 22
13469: PUSH
13470: LD_INT 23
13472: PUSH
13473: LD_INT 24
13475: PUSH
13476: LD_INT 25
13478: PUSH
13479: LD_INT 26
13481: PUSH
13482: LD_INT 28
13484: PUSH
13485: LD_INT 30
13487: PUSH
13488: LD_INT 31
13490: PUSH
13491: LD_INT 32
13493: PUSH
13494: LD_INT 34
13496: PUSH
13497: LD_INT 36
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 101
13535: PUSH
13536: LD_INT 102
13538: PUSH
13539: LD_INT 103
13541: PUSH
13542: LD_INT 104
13544: PUSH
13545: LD_INT 105
13547: PUSH
13548: LD_INT 106
13550: PUSH
13551: LD_INT 107
13553: PUSH
13554: LD_INT 108
13556: PUSH
13557: LD_INT 109
13559: PUSH
13560: LD_INT 110
13562: PUSH
13563: LD_INT 111
13565: PUSH
13566: LD_INT 112
13568: PUSH
13569: LD_INT 114
13571: PUSH
13572: LD_INT 116
13574: PUSH
13575: LD_INT 117
13577: PUSH
13578: LD_INT 118
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: ST_TO_ADDR
13603: GO 15286
13605: LD_INT 12
13607: DOUBLE
13608: EQUAL
13609: IFTRUE 13613
13611: GO 13833
13613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13614: LD_ADDR_VAR 0 2
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: LD_INT 2
13624: PUSH
13625: LD_INT 3
13627: PUSH
13628: LD_INT 4
13630: PUSH
13631: LD_INT 5
13633: PUSH
13634: LD_INT 6
13636: PUSH
13637: LD_INT 7
13639: PUSH
13640: LD_INT 8
13642: PUSH
13643: LD_INT 9
13645: PUSH
13646: LD_INT 10
13648: PUSH
13649: LD_INT 11
13651: PUSH
13652: LD_INT 12
13654: PUSH
13655: LD_INT 13
13657: PUSH
13658: LD_INT 14
13660: PUSH
13661: LD_INT 15
13663: PUSH
13664: LD_INT 16
13666: PUSH
13667: LD_INT 17
13669: PUSH
13670: LD_INT 18
13672: PUSH
13673: LD_INT 19
13675: PUSH
13676: LD_INT 20
13678: PUSH
13679: LD_INT 21
13681: PUSH
13682: LD_INT 22
13684: PUSH
13685: LD_INT 23
13687: PUSH
13688: LD_INT 24
13690: PUSH
13691: LD_INT 25
13693: PUSH
13694: LD_INT 26
13696: PUSH
13697: LD_INT 27
13699: PUSH
13700: LD_INT 28
13702: PUSH
13703: LD_INT 30
13705: PUSH
13706: LD_INT 31
13708: PUSH
13709: LD_INT 32
13711: PUSH
13712: LD_INT 33
13714: PUSH
13715: LD_INT 34
13717: PUSH
13718: LD_INT 36
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 101
13759: PUSH
13760: LD_INT 102
13762: PUSH
13763: LD_INT 103
13765: PUSH
13766: LD_INT 104
13768: PUSH
13769: LD_INT 105
13771: PUSH
13772: LD_INT 106
13774: PUSH
13775: LD_INT 107
13777: PUSH
13778: LD_INT 108
13780: PUSH
13781: LD_INT 109
13783: PUSH
13784: LD_INT 110
13786: PUSH
13787: LD_INT 111
13789: PUSH
13790: LD_INT 112
13792: PUSH
13793: LD_INT 113
13795: PUSH
13796: LD_INT 114
13798: PUSH
13799: LD_INT 116
13801: PUSH
13802: LD_INT 117
13804: PUSH
13805: LD_INT 118
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: ST_TO_ADDR
13831: GO 15286
13833: LD_INT 13
13835: DOUBLE
13836: EQUAL
13837: IFTRUE 13841
13839: GO 14049
13841: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13842: LD_ADDR_VAR 0 2
13846: PUSH
13847: LD_INT 1
13849: PUSH
13850: LD_INT 2
13852: PUSH
13853: LD_INT 3
13855: PUSH
13856: LD_INT 4
13858: PUSH
13859: LD_INT 5
13861: PUSH
13862: LD_INT 8
13864: PUSH
13865: LD_INT 9
13867: PUSH
13868: LD_INT 10
13870: PUSH
13871: LD_INT 11
13873: PUSH
13874: LD_INT 12
13876: PUSH
13877: LD_INT 14
13879: PUSH
13880: LD_INT 15
13882: PUSH
13883: LD_INT 16
13885: PUSH
13886: LD_INT 17
13888: PUSH
13889: LD_INT 18
13891: PUSH
13892: LD_INT 19
13894: PUSH
13895: LD_INT 20
13897: PUSH
13898: LD_INT 21
13900: PUSH
13901: LD_INT 22
13903: PUSH
13904: LD_INT 23
13906: PUSH
13907: LD_INT 24
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 26
13915: PUSH
13916: LD_INT 27
13918: PUSH
13919: LD_INT 28
13921: PUSH
13922: LD_INT 30
13924: PUSH
13925: LD_INT 31
13927: PUSH
13928: LD_INT 32
13930: PUSH
13931: LD_INT 33
13933: PUSH
13934: LD_INT 34
13936: PUSH
13937: LD_INT 36
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 101
13975: PUSH
13976: LD_INT 102
13978: PUSH
13979: LD_INT 103
13981: PUSH
13982: LD_INT 104
13984: PUSH
13985: LD_INT 105
13987: PUSH
13988: LD_INT 106
13990: PUSH
13991: LD_INT 107
13993: PUSH
13994: LD_INT 108
13996: PUSH
13997: LD_INT 109
13999: PUSH
14000: LD_INT 110
14002: PUSH
14003: LD_INT 111
14005: PUSH
14006: LD_INT 112
14008: PUSH
14009: LD_INT 113
14011: PUSH
14012: LD_INT 114
14014: PUSH
14015: LD_INT 116
14017: PUSH
14018: LD_INT 117
14020: PUSH
14021: LD_INT 118
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: ST_TO_ADDR
14047: GO 15286
14049: LD_INT 14
14051: DOUBLE
14052: EQUAL
14053: IFTRUE 14057
14055: GO 14281
14057: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14058: LD_ADDR_VAR 0 2
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: LD_INT 2
14068: PUSH
14069: LD_INT 3
14071: PUSH
14072: LD_INT 4
14074: PUSH
14075: LD_INT 5
14077: PUSH
14078: LD_INT 6
14080: PUSH
14081: LD_INT 7
14083: PUSH
14084: LD_INT 8
14086: PUSH
14087: LD_INT 9
14089: PUSH
14090: LD_INT 10
14092: PUSH
14093: LD_INT 11
14095: PUSH
14096: LD_INT 12
14098: PUSH
14099: LD_INT 13
14101: PUSH
14102: LD_INT 14
14104: PUSH
14105: LD_INT 15
14107: PUSH
14108: LD_INT 16
14110: PUSH
14111: LD_INT 17
14113: PUSH
14114: LD_INT 18
14116: PUSH
14117: LD_INT 19
14119: PUSH
14120: LD_INT 20
14122: PUSH
14123: LD_INT 21
14125: PUSH
14126: LD_INT 22
14128: PUSH
14129: LD_INT 23
14131: PUSH
14132: LD_INT 24
14134: PUSH
14135: LD_INT 25
14137: PUSH
14138: LD_INT 26
14140: PUSH
14141: LD_INT 27
14143: PUSH
14144: LD_INT 28
14146: PUSH
14147: LD_INT 29
14149: PUSH
14150: LD_INT 30
14152: PUSH
14153: LD_INT 31
14155: PUSH
14156: LD_INT 32
14158: PUSH
14159: LD_INT 33
14161: PUSH
14162: LD_INT 34
14164: PUSH
14165: LD_INT 36
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 101
14207: PUSH
14208: LD_INT 102
14210: PUSH
14211: LD_INT 103
14213: PUSH
14214: LD_INT 104
14216: PUSH
14217: LD_INT 105
14219: PUSH
14220: LD_INT 106
14222: PUSH
14223: LD_INT 107
14225: PUSH
14226: LD_INT 108
14228: PUSH
14229: LD_INT 109
14231: PUSH
14232: LD_INT 110
14234: PUSH
14235: LD_INT 111
14237: PUSH
14238: LD_INT 112
14240: PUSH
14241: LD_INT 113
14243: PUSH
14244: LD_INT 114
14246: PUSH
14247: LD_INT 116
14249: PUSH
14250: LD_INT 117
14252: PUSH
14253: LD_INT 118
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: ST_TO_ADDR
14279: GO 15286
14281: LD_INT 15
14283: DOUBLE
14284: EQUAL
14285: IFTRUE 14289
14287: GO 14513
14289: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14290: LD_ADDR_VAR 0 2
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: LD_INT 2
14300: PUSH
14301: LD_INT 3
14303: PUSH
14304: LD_INT 4
14306: PUSH
14307: LD_INT 5
14309: PUSH
14310: LD_INT 6
14312: PUSH
14313: LD_INT 7
14315: PUSH
14316: LD_INT 8
14318: PUSH
14319: LD_INT 9
14321: PUSH
14322: LD_INT 10
14324: PUSH
14325: LD_INT 11
14327: PUSH
14328: LD_INT 12
14330: PUSH
14331: LD_INT 13
14333: PUSH
14334: LD_INT 14
14336: PUSH
14337: LD_INT 15
14339: PUSH
14340: LD_INT 16
14342: PUSH
14343: LD_INT 17
14345: PUSH
14346: LD_INT 18
14348: PUSH
14349: LD_INT 19
14351: PUSH
14352: LD_INT 20
14354: PUSH
14355: LD_INT 21
14357: PUSH
14358: LD_INT 22
14360: PUSH
14361: LD_INT 23
14363: PUSH
14364: LD_INT 24
14366: PUSH
14367: LD_INT 25
14369: PUSH
14370: LD_INT 26
14372: PUSH
14373: LD_INT 27
14375: PUSH
14376: LD_INT 28
14378: PUSH
14379: LD_INT 29
14381: PUSH
14382: LD_INT 30
14384: PUSH
14385: LD_INT 31
14387: PUSH
14388: LD_INT 32
14390: PUSH
14391: LD_INT 33
14393: PUSH
14394: LD_INT 34
14396: PUSH
14397: LD_INT 36
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 101
14439: PUSH
14440: LD_INT 102
14442: PUSH
14443: LD_INT 103
14445: PUSH
14446: LD_INT 104
14448: PUSH
14449: LD_INT 105
14451: PUSH
14452: LD_INT 106
14454: PUSH
14455: LD_INT 107
14457: PUSH
14458: LD_INT 108
14460: PUSH
14461: LD_INT 109
14463: PUSH
14464: LD_INT 110
14466: PUSH
14467: LD_INT 111
14469: PUSH
14470: LD_INT 112
14472: PUSH
14473: LD_INT 113
14475: PUSH
14476: LD_INT 114
14478: PUSH
14479: LD_INT 116
14481: PUSH
14482: LD_INT 117
14484: PUSH
14485: LD_INT 118
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: ST_TO_ADDR
14511: GO 15286
14513: LD_INT 16
14515: DOUBLE
14516: EQUAL
14517: IFTRUE 14521
14519: GO 14657
14521: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14522: LD_ADDR_VAR 0 2
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: LD_INT 4
14532: PUSH
14533: LD_INT 5
14535: PUSH
14536: LD_INT 7
14538: PUSH
14539: LD_INT 11
14541: PUSH
14542: LD_INT 12
14544: PUSH
14545: LD_INT 15
14547: PUSH
14548: LD_INT 16
14550: PUSH
14551: LD_INT 20
14553: PUSH
14554: LD_INT 21
14556: PUSH
14557: LD_INT 22
14559: PUSH
14560: LD_INT 23
14562: PUSH
14563: LD_INT 25
14565: PUSH
14566: LD_INT 26
14568: PUSH
14569: LD_INT 30
14571: PUSH
14572: LD_INT 31
14574: PUSH
14575: LD_INT 32
14577: PUSH
14578: LD_INT 33
14580: PUSH
14581: LD_INT 34
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 101
14607: PUSH
14608: LD_INT 102
14610: PUSH
14611: LD_INT 103
14613: PUSH
14614: LD_INT 106
14616: PUSH
14617: LD_INT 108
14619: PUSH
14620: LD_INT 112
14622: PUSH
14623: LD_INT 113
14625: PUSH
14626: LD_INT 114
14628: PUSH
14629: LD_INT 116
14631: PUSH
14632: LD_INT 117
14634: PUSH
14635: LD_INT 118
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: ST_TO_ADDR
14655: GO 15286
14657: LD_INT 17
14659: DOUBLE
14660: EQUAL
14661: IFTRUE 14665
14663: GO 14889
14665: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14666: LD_ADDR_VAR 0 2
14670: PUSH
14671: LD_INT 1
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: LD_INT 4
14682: PUSH
14683: LD_INT 5
14685: PUSH
14686: LD_INT 6
14688: PUSH
14689: LD_INT 7
14691: PUSH
14692: LD_INT 8
14694: PUSH
14695: LD_INT 9
14697: PUSH
14698: LD_INT 10
14700: PUSH
14701: LD_INT 11
14703: PUSH
14704: LD_INT 12
14706: PUSH
14707: LD_INT 13
14709: PUSH
14710: LD_INT 14
14712: PUSH
14713: LD_INT 15
14715: PUSH
14716: LD_INT 16
14718: PUSH
14719: LD_INT 17
14721: PUSH
14722: LD_INT 18
14724: PUSH
14725: LD_INT 19
14727: PUSH
14728: LD_INT 20
14730: PUSH
14731: LD_INT 21
14733: PUSH
14734: LD_INT 22
14736: PUSH
14737: LD_INT 23
14739: PUSH
14740: LD_INT 24
14742: PUSH
14743: LD_INT 25
14745: PUSH
14746: LD_INT 26
14748: PUSH
14749: LD_INT 27
14751: PUSH
14752: LD_INT 28
14754: PUSH
14755: LD_INT 29
14757: PUSH
14758: LD_INT 30
14760: PUSH
14761: LD_INT 31
14763: PUSH
14764: LD_INT 32
14766: PUSH
14767: LD_INT 33
14769: PUSH
14770: LD_INT 34
14772: PUSH
14773: LD_INT 36
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 101
14815: PUSH
14816: LD_INT 102
14818: PUSH
14819: LD_INT 103
14821: PUSH
14822: LD_INT 104
14824: PUSH
14825: LD_INT 105
14827: PUSH
14828: LD_INT 106
14830: PUSH
14831: LD_INT 107
14833: PUSH
14834: LD_INT 108
14836: PUSH
14837: LD_INT 109
14839: PUSH
14840: LD_INT 110
14842: PUSH
14843: LD_INT 111
14845: PUSH
14846: LD_INT 112
14848: PUSH
14849: LD_INT 113
14851: PUSH
14852: LD_INT 114
14854: PUSH
14855: LD_INT 116
14857: PUSH
14858: LD_INT 117
14860: PUSH
14861: LD_INT 118
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: ST_TO_ADDR
14887: GO 15286
14889: LD_INT 18
14891: DOUBLE
14892: EQUAL
14893: IFTRUE 14897
14895: GO 15045
14897: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14898: LD_ADDR_VAR 0 2
14902: PUSH
14903: LD_INT 2
14905: PUSH
14906: LD_INT 4
14908: PUSH
14909: LD_INT 5
14911: PUSH
14912: LD_INT 7
14914: PUSH
14915: LD_INT 11
14917: PUSH
14918: LD_INT 12
14920: PUSH
14921: LD_INT 15
14923: PUSH
14924: LD_INT 16
14926: PUSH
14927: LD_INT 20
14929: PUSH
14930: LD_INT 21
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_INT 23
14938: PUSH
14939: LD_INT 25
14941: PUSH
14942: LD_INT 26
14944: PUSH
14945: LD_INT 30
14947: PUSH
14948: LD_INT 31
14950: PUSH
14951: LD_INT 32
14953: PUSH
14954: LD_INT 33
14956: PUSH
14957: LD_INT 34
14959: PUSH
14960: LD_INT 35
14962: PUSH
14963: LD_INT 36
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 101
14991: PUSH
14992: LD_INT 102
14994: PUSH
14995: LD_INT 103
14997: PUSH
14998: LD_INT 106
15000: PUSH
15001: LD_INT 108
15003: PUSH
15004: LD_INT 112
15006: PUSH
15007: LD_INT 113
15009: PUSH
15010: LD_INT 114
15012: PUSH
15013: LD_INT 115
15015: PUSH
15016: LD_INT 116
15018: PUSH
15019: LD_INT 117
15021: PUSH
15022: LD_INT 118
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: ST_TO_ADDR
15043: GO 15286
15045: LD_INT 19
15047: DOUBLE
15048: EQUAL
15049: IFTRUE 15053
15051: GO 15285
15053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15054: LD_ADDR_VAR 0 2
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: LD_INT 3
15067: PUSH
15068: LD_INT 4
15070: PUSH
15071: LD_INT 5
15073: PUSH
15074: LD_INT 6
15076: PUSH
15077: LD_INT 7
15079: PUSH
15080: LD_INT 8
15082: PUSH
15083: LD_INT 9
15085: PUSH
15086: LD_INT 10
15088: PUSH
15089: LD_INT 11
15091: PUSH
15092: LD_INT 12
15094: PUSH
15095: LD_INT 13
15097: PUSH
15098: LD_INT 14
15100: PUSH
15101: LD_INT 15
15103: PUSH
15104: LD_INT 16
15106: PUSH
15107: LD_INT 17
15109: PUSH
15110: LD_INT 18
15112: PUSH
15113: LD_INT 19
15115: PUSH
15116: LD_INT 20
15118: PUSH
15119: LD_INT 21
15121: PUSH
15122: LD_INT 22
15124: PUSH
15125: LD_INT 23
15127: PUSH
15128: LD_INT 24
15130: PUSH
15131: LD_INT 25
15133: PUSH
15134: LD_INT 26
15136: PUSH
15137: LD_INT 27
15139: PUSH
15140: LD_INT 28
15142: PUSH
15143: LD_INT 29
15145: PUSH
15146: LD_INT 30
15148: PUSH
15149: LD_INT 31
15151: PUSH
15152: LD_INT 32
15154: PUSH
15155: LD_INT 33
15157: PUSH
15158: LD_INT 34
15160: PUSH
15161: LD_INT 35
15163: PUSH
15164: LD_INT 36
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 101
15207: PUSH
15208: LD_INT 102
15210: PUSH
15211: LD_INT 103
15213: PUSH
15214: LD_INT 104
15216: PUSH
15217: LD_INT 105
15219: PUSH
15220: LD_INT 106
15222: PUSH
15223: LD_INT 107
15225: PUSH
15226: LD_INT 108
15228: PUSH
15229: LD_INT 109
15231: PUSH
15232: LD_INT 110
15234: PUSH
15235: LD_INT 111
15237: PUSH
15238: LD_INT 112
15240: PUSH
15241: LD_INT 113
15243: PUSH
15244: LD_INT 114
15246: PUSH
15247: LD_INT 115
15249: PUSH
15250: LD_INT 116
15252: PUSH
15253: LD_INT 117
15255: PUSH
15256: LD_INT 118
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: ST_TO_ADDR
15283: GO 15286
15285: POP
// end else
15286: GO 15517
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15288: LD_ADDR_VAR 0 2
15292: PUSH
15293: LD_INT 1
15295: PUSH
15296: LD_INT 2
15298: PUSH
15299: LD_INT 3
15301: PUSH
15302: LD_INT 4
15304: PUSH
15305: LD_INT 5
15307: PUSH
15308: LD_INT 6
15310: PUSH
15311: LD_INT 7
15313: PUSH
15314: LD_INT 8
15316: PUSH
15317: LD_INT 9
15319: PUSH
15320: LD_INT 10
15322: PUSH
15323: LD_INT 11
15325: PUSH
15326: LD_INT 12
15328: PUSH
15329: LD_INT 13
15331: PUSH
15332: LD_INT 14
15334: PUSH
15335: LD_INT 15
15337: PUSH
15338: LD_INT 16
15340: PUSH
15341: LD_INT 17
15343: PUSH
15344: LD_INT 18
15346: PUSH
15347: LD_INT 19
15349: PUSH
15350: LD_INT 20
15352: PUSH
15353: LD_INT 21
15355: PUSH
15356: LD_INT 22
15358: PUSH
15359: LD_INT 23
15361: PUSH
15362: LD_INT 24
15364: PUSH
15365: LD_INT 25
15367: PUSH
15368: LD_INT 26
15370: PUSH
15371: LD_INT 27
15373: PUSH
15374: LD_INT 28
15376: PUSH
15377: LD_INT 29
15379: PUSH
15380: LD_INT 30
15382: PUSH
15383: LD_INT 31
15385: PUSH
15386: LD_INT 32
15388: PUSH
15389: LD_INT 33
15391: PUSH
15392: LD_INT 34
15394: PUSH
15395: LD_INT 35
15397: PUSH
15398: LD_INT 36
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 101
15441: PUSH
15442: LD_INT 102
15444: PUSH
15445: LD_INT 103
15447: PUSH
15448: LD_INT 104
15450: PUSH
15451: LD_INT 105
15453: PUSH
15454: LD_INT 106
15456: PUSH
15457: LD_INT 107
15459: PUSH
15460: LD_INT 108
15462: PUSH
15463: LD_INT 109
15465: PUSH
15466: LD_INT 110
15468: PUSH
15469: LD_INT 111
15471: PUSH
15472: LD_INT 112
15474: PUSH
15475: LD_INT 113
15477: PUSH
15478: LD_INT 114
15480: PUSH
15481: LD_INT 115
15483: PUSH
15484: LD_INT 116
15486: PUSH
15487: LD_INT 117
15489: PUSH
15490: LD_INT 118
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: ST_TO_ADDR
// if result then
15517: LD_VAR 0 2
15521: IFFALSE 16307
// begin normal :=  ;
15523: LD_ADDR_VAR 0 5
15527: PUSH
15528: LD_STRING 
15530: ST_TO_ADDR
// hardcore :=  ;
15531: LD_ADDR_VAR 0 6
15535: PUSH
15536: LD_STRING 
15538: ST_TO_ADDR
// active :=  ;
15539: LD_ADDR_VAR 0 7
15543: PUSH
15544: LD_STRING 
15546: ST_TO_ADDR
// for i = 1 to normalCounter do
15547: LD_ADDR_VAR 0 8
15551: PUSH
15552: DOUBLE
15553: LD_INT 1
15555: DEC
15556: ST_TO_ADDR
15557: LD_EXP 45
15561: PUSH
15562: FOR_TO
15563: IFFALSE 15664
// begin tmp := 0 ;
15565: LD_ADDR_VAR 0 3
15569: PUSH
15570: LD_STRING 0
15572: ST_TO_ADDR
// if result [ 1 ] then
15573: LD_VAR 0 2
15577: PUSH
15578: LD_INT 1
15580: ARRAY
15581: IFFALSE 15646
// if result [ 1 ] [ 1 ] = i then
15583: LD_VAR 0 2
15587: PUSH
15588: LD_INT 1
15590: ARRAY
15591: PUSH
15592: LD_INT 1
15594: ARRAY
15595: PUSH
15596: LD_VAR 0 8
15600: EQUAL
15601: IFFALSE 15646
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15603: LD_ADDR_VAR 0 2
15607: PUSH
15608: LD_VAR 0 2
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_INT 1
15623: ARRAY
15624: PPUSH
15625: LD_INT 1
15627: PPUSH
15628: CALL_OW 3
15632: PPUSH
15633: CALL_OW 1
15637: ST_TO_ADDR
// tmp := 1 ;
15638: LD_ADDR_VAR 0 3
15642: PUSH
15643: LD_STRING 1
15645: ST_TO_ADDR
// end ; normal := normal & tmp ;
15646: LD_ADDR_VAR 0 5
15650: PUSH
15651: LD_VAR 0 5
15655: PUSH
15656: LD_VAR 0 3
15660: STR
15661: ST_TO_ADDR
// end ;
15662: GO 15562
15664: POP
15665: POP
// for i = 1 to hardcoreCounter do
15666: LD_ADDR_VAR 0 8
15670: PUSH
15671: DOUBLE
15672: LD_INT 1
15674: DEC
15675: ST_TO_ADDR
15676: LD_EXP 46
15680: PUSH
15681: FOR_TO
15682: IFFALSE 15787
// begin tmp := 0 ;
15684: LD_ADDR_VAR 0 3
15688: PUSH
15689: LD_STRING 0
15691: ST_TO_ADDR
// if result [ 2 ] then
15692: LD_VAR 0 2
15696: PUSH
15697: LD_INT 2
15699: ARRAY
15700: IFFALSE 15769
// if result [ 2 ] [ 1 ] = 100 + i then
15702: LD_VAR 0 2
15706: PUSH
15707: LD_INT 2
15709: ARRAY
15710: PUSH
15711: LD_INT 1
15713: ARRAY
15714: PUSH
15715: LD_INT 100
15717: PUSH
15718: LD_VAR 0 8
15722: PLUS
15723: EQUAL
15724: IFFALSE 15769
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15726: LD_ADDR_VAR 0 2
15730: PUSH
15731: LD_VAR 0 2
15735: PPUSH
15736: LD_INT 2
15738: PPUSH
15739: LD_VAR 0 2
15743: PUSH
15744: LD_INT 2
15746: ARRAY
15747: PPUSH
15748: LD_INT 1
15750: PPUSH
15751: CALL_OW 3
15755: PPUSH
15756: CALL_OW 1
15760: ST_TO_ADDR
// tmp := 1 ;
15761: LD_ADDR_VAR 0 3
15765: PUSH
15766: LD_STRING 1
15768: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15769: LD_ADDR_VAR 0 6
15773: PUSH
15774: LD_VAR 0 6
15778: PUSH
15779: LD_VAR 0 3
15783: STR
15784: ST_TO_ADDR
// end ;
15785: GO 15681
15787: POP
15788: POP
// if isGameLoad then
15789: LD_VAR 0 1
15793: IFFALSE 16268
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15795: LD_ADDR_VAR 0 4
15799: PUSH
15800: LD_EXP 49
15804: PUSH
15805: LD_EXP 48
15809: PUSH
15810: LD_EXP 50
15814: PUSH
15815: LD_EXP 47
15819: PUSH
15820: LD_EXP 51
15824: PUSH
15825: LD_EXP 52
15829: PUSH
15830: LD_EXP 53
15834: PUSH
15835: LD_EXP 54
15839: PUSH
15840: LD_EXP 55
15844: PUSH
15845: LD_EXP 56
15849: PUSH
15850: LD_EXP 57
15854: PUSH
15855: LD_EXP 58
15859: PUSH
15860: LD_EXP 59
15864: PUSH
15865: LD_EXP 60
15869: PUSH
15870: LD_EXP 68
15874: PUSH
15875: LD_EXP 69
15879: PUSH
15880: LD_EXP 70
15884: PUSH
15885: LD_EXP 71
15889: PUSH
15890: LD_EXP 73
15894: PUSH
15895: LD_EXP 74
15899: PUSH
15900: LD_EXP 75
15904: PUSH
15905: LD_EXP 78
15909: PUSH
15910: LD_EXP 80
15914: PUSH
15915: LD_EXP 81
15919: PUSH
15920: LD_EXP 82
15924: PUSH
15925: LD_EXP 84
15929: PUSH
15930: LD_EXP 85
15934: PUSH
15935: LD_EXP 88
15939: PUSH
15940: LD_EXP 89
15944: PUSH
15945: LD_EXP 90
15949: PUSH
15950: LD_EXP 91
15954: PUSH
15955: LD_EXP 92
15959: PUSH
15960: LD_EXP 93
15964: PUSH
15965: LD_EXP 94
15969: PUSH
15970: LD_EXP 95
15974: PUSH
15975: LD_EXP 96
15979: PUSH
15980: LD_EXP 61
15984: PUSH
15985: LD_EXP 62
15989: PUSH
15990: LD_EXP 65
15994: PUSH
15995: LD_EXP 66
15999: PUSH
16000: LD_EXP 67
16004: PUSH
16005: LD_EXP 63
16009: PUSH
16010: LD_EXP 64
16014: PUSH
16015: LD_EXP 72
16019: PUSH
16020: LD_EXP 76
16024: PUSH
16025: LD_EXP 77
16029: PUSH
16030: LD_EXP 79
16034: PUSH
16035: LD_EXP 83
16039: PUSH
16040: LD_EXP 86
16044: PUSH
16045: LD_EXP 87
16049: PUSH
16050: LD_EXP 97
16054: PUSH
16055: LD_EXP 98
16059: PUSH
16060: LD_EXP 99
16064: PUSH
16065: LD_EXP 100
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: ST_TO_ADDR
// tmp :=  ;
16126: LD_ADDR_VAR 0 3
16130: PUSH
16131: LD_STRING 
16133: ST_TO_ADDR
// for i = 1 to normalCounter do
16134: LD_ADDR_VAR 0 8
16138: PUSH
16139: DOUBLE
16140: LD_INT 1
16142: DEC
16143: ST_TO_ADDR
16144: LD_EXP 45
16148: PUSH
16149: FOR_TO
16150: IFFALSE 16186
// begin if flags [ i ] then
16152: LD_VAR 0 4
16156: PUSH
16157: LD_VAR 0 8
16161: ARRAY
16162: IFFALSE 16184
// tmp := tmp & i & ; ;
16164: LD_ADDR_VAR 0 3
16168: PUSH
16169: LD_VAR 0 3
16173: PUSH
16174: LD_VAR 0 8
16178: STR
16179: PUSH
16180: LD_STRING ;
16182: STR
16183: ST_TO_ADDR
// end ;
16184: GO 16149
16186: POP
16187: POP
// for i = 1 to hardcoreCounter do
16188: LD_ADDR_VAR 0 8
16192: PUSH
16193: DOUBLE
16194: LD_INT 1
16196: DEC
16197: ST_TO_ADDR
16198: LD_EXP 46
16202: PUSH
16203: FOR_TO
16204: IFFALSE 16250
// begin if flags [ normalCounter + i ] then
16206: LD_VAR 0 4
16210: PUSH
16211: LD_EXP 45
16215: PUSH
16216: LD_VAR 0 8
16220: PLUS
16221: ARRAY
16222: IFFALSE 16248
// tmp := tmp & ( 100 + i ) & ; ;
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: LD_VAR 0 3
16233: PUSH
16234: LD_INT 100
16236: PUSH
16237: LD_VAR 0 8
16241: PLUS
16242: STR
16243: PUSH
16244: LD_STRING ;
16246: STR
16247: ST_TO_ADDR
// end ;
16248: GO 16203
16250: POP
16251: POP
// if tmp then
16252: LD_VAR 0 3
16256: IFFALSE 16268
// active := tmp ;
16258: LD_ADDR_VAR 0 7
16262: PUSH
16263: LD_VAR 0 3
16267: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16268: LD_STRING getStreamItemsFromMission("
16270: PUSH
16271: LD_VAR 0 5
16275: STR
16276: PUSH
16277: LD_STRING ","
16279: STR
16280: PUSH
16281: LD_VAR 0 6
16285: STR
16286: PUSH
16287: LD_STRING ","
16289: STR
16290: PUSH
16291: LD_VAR 0 7
16295: STR
16296: PUSH
16297: LD_STRING ")
16299: STR
16300: PPUSH
16301: CALL_OW 559
// end else
16305: GO 16314
// ToLua ( getStreamItemsFromMission("","","") ) ;
16307: LD_STRING getStreamItemsFromMission("","","")
16309: PPUSH
16310: CALL_OW 559
// end ;
16314: LD_VAR 0 2
16318: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16319: LD_EXP 44
16323: PUSH
16324: LD_EXP 49
16328: AND
16329: IFFALSE 16453
16331: GO 16333
16333: DISABLE
16334: LD_INT 0
16336: PPUSH
16337: PPUSH
// begin enable ;
16338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16339: LD_ADDR_VAR 0 2
16343: PUSH
16344: LD_INT 22
16346: PUSH
16347: LD_OWVAR 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: LD_INT 34
16361: PUSH
16362: LD_INT 7
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 34
16371: PUSH
16372: LD_INT 45
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 34
16381: PUSH
16382: LD_INT 28
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 34
16391: PUSH
16392: LD_INT 47
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PPUSH
16410: CALL_OW 69
16414: ST_TO_ADDR
// if not tmp then
16415: LD_VAR 0 2
16419: NOT
16420: IFFALSE 16424
// exit ;
16422: GO 16453
// for i in tmp do
16424: LD_ADDR_VAR 0 1
16428: PUSH
16429: LD_VAR 0 2
16433: PUSH
16434: FOR_IN
16435: IFFALSE 16451
// begin SetLives ( i , 0 ) ;
16437: LD_VAR 0 1
16441: PPUSH
16442: LD_INT 0
16444: PPUSH
16445: CALL_OW 234
// end ;
16449: GO 16434
16451: POP
16452: POP
// end ;
16453: PPOPN 2
16455: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16456: LD_EXP 44
16460: PUSH
16461: LD_EXP 50
16465: AND
16466: IFFALSE 16550
16468: GO 16470
16470: DISABLE
16471: LD_INT 0
16473: PPUSH
16474: PPUSH
// begin enable ;
16475: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16476: LD_ADDR_VAR 0 2
16480: PUSH
16481: LD_INT 22
16483: PUSH
16484: LD_OWVAR 2
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 32
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PPUSH
16507: CALL_OW 69
16511: ST_TO_ADDR
// if not tmp then
16512: LD_VAR 0 2
16516: NOT
16517: IFFALSE 16521
// exit ;
16519: GO 16550
// for i in tmp do
16521: LD_ADDR_VAR 0 1
16525: PUSH
16526: LD_VAR 0 2
16530: PUSH
16531: FOR_IN
16532: IFFALSE 16548
// begin SetLives ( i , 0 ) ;
16534: LD_VAR 0 1
16538: PPUSH
16539: LD_INT 0
16541: PPUSH
16542: CALL_OW 234
// end ;
16546: GO 16531
16548: POP
16549: POP
// end ;
16550: PPOPN 2
16552: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16553: LD_EXP 44
16557: PUSH
16558: LD_EXP 47
16562: AND
16563: IFFALSE 16656
16565: GO 16567
16567: DISABLE
16568: LD_INT 0
16570: PPUSH
// begin enable ;
16571: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16572: LD_ADDR_VAR 0 1
16576: PUSH
16577: LD_INT 22
16579: PUSH
16580: LD_OWVAR 2
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 2
16591: PUSH
16592: LD_INT 25
16594: PUSH
16595: LD_INT 5
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 25
16604: PUSH
16605: LD_INT 9
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 25
16614: PUSH
16615: LD_INT 8
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PPUSH
16632: CALL_OW 69
16636: PUSH
16637: FOR_IN
16638: IFFALSE 16654
// begin SetClass ( i , 1 ) ;
16640: LD_VAR 0 1
16644: PPUSH
16645: LD_INT 1
16647: PPUSH
16648: CALL_OW 336
// end ;
16652: GO 16637
16654: POP
16655: POP
// end ;
16656: PPOPN 1
16658: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16659: LD_EXP 44
16663: PUSH
16664: LD_EXP 48
16668: AND
16669: PUSH
16670: LD_OWVAR 65
16674: PUSH
16675: LD_INT 7
16677: LESS
16678: AND
16679: IFFALSE 16693
16681: GO 16683
16683: DISABLE
// begin enable ;
16684: ENABLE
// game_speed := 7 ;
16685: LD_ADDR_OWVAR 65
16689: PUSH
16690: LD_INT 7
16692: ST_TO_ADDR
// end ;
16693: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16694: LD_EXP 44
16698: PUSH
16699: LD_EXP 51
16703: AND
16704: IFFALSE 16906
16706: GO 16708
16708: DISABLE
16709: LD_INT 0
16711: PPUSH
16712: PPUSH
16713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16714: LD_ADDR_VAR 0 3
16718: PUSH
16719: LD_INT 81
16721: PUSH
16722: LD_OWVAR 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 21
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 69
16749: ST_TO_ADDR
// if not tmp then
16750: LD_VAR 0 3
16754: NOT
16755: IFFALSE 16759
// exit ;
16757: GO 16906
// if tmp > 5 then
16759: LD_VAR 0 3
16763: PUSH
16764: LD_INT 5
16766: GREATER
16767: IFFALSE 16779
// k := 5 else
16769: LD_ADDR_VAR 0 2
16773: PUSH
16774: LD_INT 5
16776: ST_TO_ADDR
16777: GO 16789
// k := tmp ;
16779: LD_ADDR_VAR 0 2
16783: PUSH
16784: LD_VAR 0 3
16788: ST_TO_ADDR
// for i := 1 to k do
16789: LD_ADDR_VAR 0 1
16793: PUSH
16794: DOUBLE
16795: LD_INT 1
16797: DEC
16798: ST_TO_ADDR
16799: LD_VAR 0 2
16803: PUSH
16804: FOR_TO
16805: IFFALSE 16904
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16807: LD_VAR 0 3
16811: PUSH
16812: LD_VAR 0 1
16816: ARRAY
16817: PPUSH
16818: LD_VAR 0 1
16822: PUSH
16823: LD_INT 4
16825: MOD
16826: PUSH
16827: LD_INT 1
16829: PLUS
16830: PPUSH
16831: CALL_OW 259
16835: PUSH
16836: LD_INT 10
16838: LESS
16839: IFFALSE 16902
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16841: LD_VAR 0 3
16845: PUSH
16846: LD_VAR 0 1
16850: ARRAY
16851: PPUSH
16852: LD_VAR 0 1
16856: PUSH
16857: LD_INT 4
16859: MOD
16860: PUSH
16861: LD_INT 1
16863: PLUS
16864: PPUSH
16865: LD_VAR 0 3
16869: PUSH
16870: LD_VAR 0 1
16874: ARRAY
16875: PPUSH
16876: LD_VAR 0 1
16880: PUSH
16881: LD_INT 4
16883: MOD
16884: PUSH
16885: LD_INT 1
16887: PLUS
16888: PPUSH
16889: CALL_OW 259
16893: PUSH
16894: LD_INT 1
16896: PLUS
16897: PPUSH
16898: CALL_OW 237
16902: GO 16804
16904: POP
16905: POP
// end ;
16906: PPOPN 3
16908: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16909: LD_EXP 44
16913: PUSH
16914: LD_EXP 52
16918: AND
16919: IFFALSE 16939
16921: GO 16923
16923: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16924: LD_INT 4
16926: PPUSH
16927: LD_OWVAR 2
16931: PPUSH
16932: LD_INT 0
16934: PPUSH
16935: CALL_OW 324
16939: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16940: LD_EXP 44
16944: PUSH
16945: LD_EXP 81
16949: AND
16950: IFFALSE 16970
16952: GO 16954
16954: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16955: LD_INT 19
16957: PPUSH
16958: LD_OWVAR 2
16962: PPUSH
16963: LD_INT 0
16965: PPUSH
16966: CALL_OW 324
16970: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16971: LD_EXP 44
16975: PUSH
16976: LD_EXP 53
16980: AND
16981: IFFALSE 17083
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
// begin enable ;
16990: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_INT 22
16998: PUSH
16999: LD_OWVAR 2
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 34
17013: PUSH
17014: LD_INT 11
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 34
17023: PUSH
17024: LD_INT 30
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: ST_TO_ADDR
// if not tmp then
17045: LD_VAR 0 2
17049: NOT
17050: IFFALSE 17054
// exit ;
17052: GO 17083
// for i in tmp do
17054: LD_ADDR_VAR 0 1
17058: PUSH
17059: LD_VAR 0 2
17063: PUSH
17064: FOR_IN
17065: IFFALSE 17081
// begin SetLives ( i , 0 ) ;
17067: LD_VAR 0 1
17071: PPUSH
17072: LD_INT 0
17074: PPUSH
17075: CALL_OW 234
// end ;
17079: GO 17064
17081: POP
17082: POP
// end ;
17083: PPOPN 2
17085: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17086: LD_EXP 44
17090: PUSH
17091: LD_EXP 54
17095: AND
17096: IFFALSE 17116
17098: GO 17100
17100: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17101: LD_INT 32
17103: PPUSH
17104: LD_OWVAR 2
17108: PPUSH
17109: LD_INT 0
17111: PPUSH
17112: CALL_OW 324
17116: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17117: LD_EXP 44
17121: PUSH
17122: LD_EXP 55
17126: AND
17127: IFFALSE 17308
17129: GO 17131
17131: DISABLE
17132: LD_INT 0
17134: PPUSH
17135: PPUSH
17136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17137: LD_ADDR_VAR 0 2
17141: PUSH
17142: LD_INT 22
17144: PUSH
17145: LD_OWVAR 2
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 33
17156: PUSH
17157: LD_INT 3
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PPUSH
17168: CALL_OW 69
17172: ST_TO_ADDR
// if not tmp then
17173: LD_VAR 0 2
17177: NOT
17178: IFFALSE 17182
// exit ;
17180: GO 17308
// side := 0 ;
17182: LD_ADDR_VAR 0 3
17186: PUSH
17187: LD_INT 0
17189: ST_TO_ADDR
// for i := 1 to 8 do
17190: LD_ADDR_VAR 0 1
17194: PUSH
17195: DOUBLE
17196: LD_INT 1
17198: DEC
17199: ST_TO_ADDR
17200: LD_INT 8
17202: PUSH
17203: FOR_TO
17204: IFFALSE 17252
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17206: LD_OWVAR 2
17210: PUSH
17211: LD_VAR 0 1
17215: NONEQUAL
17216: PUSH
17217: LD_OWVAR 2
17221: PPUSH
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 81
17231: PUSH
17232: LD_INT 2
17234: EQUAL
17235: AND
17236: IFFALSE 17250
// begin side := i ;
17238: LD_ADDR_VAR 0 3
17242: PUSH
17243: LD_VAR 0 1
17247: ST_TO_ADDR
// break ;
17248: GO 17252
// end ;
17250: GO 17203
17252: POP
17253: POP
// if not side then
17254: LD_VAR 0 3
17258: NOT
17259: IFFALSE 17263
// exit ;
17261: GO 17308
// for i := 1 to tmp do
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: DOUBLE
17269: LD_INT 1
17271: DEC
17272: ST_TO_ADDR
17273: LD_VAR 0 2
17277: PUSH
17278: FOR_TO
17279: IFFALSE 17306
// if Prob ( 60 ) then
17281: LD_INT 60
17283: PPUSH
17284: CALL_OW 13
17288: IFFALSE 17304
// SetSide ( i , side ) ;
17290: LD_VAR 0 1
17294: PPUSH
17295: LD_VAR 0 3
17299: PPUSH
17300: CALL_OW 235
17304: GO 17278
17306: POP
17307: POP
// end ;
17308: PPOPN 3
17310: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17311: LD_EXP 44
17315: PUSH
17316: LD_EXP 57
17320: AND
17321: IFFALSE 17440
17323: GO 17325
17325: DISABLE
17326: LD_INT 0
17328: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17329: LD_ADDR_VAR 0 1
17333: PUSH
17334: LD_INT 22
17336: PUSH
17337: LD_OWVAR 2
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 3
17358: PUSH
17359: LD_INT 23
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: PPUSH
17378: CALL_OW 69
17382: PUSH
17383: FOR_IN
17384: IFFALSE 17438
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 257
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: LD_INT 2
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: LD_INT 4
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: IN
17414: IFFALSE 17436
// SetClass ( un , rand ( 1 , 4 ) ) ;
17416: LD_VAR 0 1
17420: PPUSH
17421: LD_INT 1
17423: PPUSH
17424: LD_INT 4
17426: PPUSH
17427: CALL_OW 12
17431: PPUSH
17432: CALL_OW 336
17436: GO 17383
17438: POP
17439: POP
// end ;
17440: PPOPN 1
17442: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17443: LD_EXP 44
17447: PUSH
17448: LD_EXP 56
17452: AND
17453: IFFALSE 17532
17455: GO 17457
17457: DISABLE
17458: LD_INT 0
17460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17461: LD_ADDR_VAR 0 1
17465: PUSH
17466: LD_INT 22
17468: PUSH
17469: LD_OWVAR 2
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 21
17480: PUSH
17481: LD_INT 3
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PPUSH
17492: CALL_OW 69
17496: ST_TO_ADDR
// if not tmp then
17497: LD_VAR 0 1
17501: NOT
17502: IFFALSE 17506
// exit ;
17504: GO 17532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17506: LD_VAR 0 1
17510: PUSH
17511: LD_INT 1
17513: PPUSH
17514: LD_VAR 0 1
17518: PPUSH
17519: CALL_OW 12
17523: ARRAY
17524: PPUSH
17525: LD_INT 100
17527: PPUSH
17528: CALL_OW 234
// end ;
17532: PPOPN 1
17534: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17535: LD_EXP 44
17539: PUSH
17540: LD_EXP 58
17544: AND
17545: IFFALSE 17643
17547: GO 17549
17549: DISABLE
17550: LD_INT 0
17552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17553: LD_ADDR_VAR 0 1
17557: PUSH
17558: LD_INT 22
17560: PUSH
17561: LD_OWVAR 2
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 21
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PPUSH
17584: CALL_OW 69
17588: ST_TO_ADDR
// if not tmp then
17589: LD_VAR 0 1
17593: NOT
17594: IFFALSE 17598
// exit ;
17596: GO 17643
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 1
17605: PPUSH
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 12
17615: ARRAY
17616: PPUSH
17617: LD_INT 1
17619: PPUSH
17620: LD_INT 4
17622: PPUSH
17623: CALL_OW 12
17627: PPUSH
17628: LD_INT 3000
17630: PPUSH
17631: LD_INT 9000
17633: PPUSH
17634: CALL_OW 12
17638: PPUSH
17639: CALL_OW 492
// end ;
17643: PPOPN 1
17645: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17646: LD_EXP 44
17650: PUSH
17651: LD_EXP 59
17655: AND
17656: IFFALSE 17676
17658: GO 17660
17660: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17661: LD_INT 1
17663: PPUSH
17664: LD_OWVAR 2
17668: PPUSH
17669: LD_INT 0
17671: PPUSH
17672: CALL_OW 324
17676: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17677: LD_EXP 44
17681: PUSH
17682: LD_EXP 60
17686: AND
17687: IFFALSE 17770
17689: GO 17691
17691: DISABLE
17692: LD_INT 0
17694: PPUSH
17695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17696: LD_ADDR_VAR 0 2
17700: PUSH
17701: LD_INT 22
17703: PUSH
17704: LD_OWVAR 2
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 21
17715: PUSH
17716: LD_INT 3
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PPUSH
17727: CALL_OW 69
17731: ST_TO_ADDR
// if not tmp then
17732: LD_VAR 0 2
17736: NOT
17737: IFFALSE 17741
// exit ;
17739: GO 17770
// for i in tmp do
17741: LD_ADDR_VAR 0 1
17745: PUSH
17746: LD_VAR 0 2
17750: PUSH
17751: FOR_IN
17752: IFFALSE 17768
// SetBLevel ( i , 10 ) ;
17754: LD_VAR 0 1
17758: PPUSH
17759: LD_INT 10
17761: PPUSH
17762: CALL_OW 241
17766: GO 17751
17768: POP
17769: POP
// end ;
17770: PPOPN 2
17772: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17773: LD_EXP 44
17777: PUSH
17778: LD_EXP 61
17782: AND
17783: IFFALSE 17894
17785: GO 17787
17787: DISABLE
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
17792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17793: LD_ADDR_VAR 0 3
17797: PUSH
17798: LD_INT 22
17800: PUSH
17801: LD_OWVAR 2
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 25
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL_OW 69
17828: ST_TO_ADDR
// if not tmp then
17829: LD_VAR 0 3
17833: NOT
17834: IFFALSE 17838
// exit ;
17836: GO 17894
// un := tmp [ rand ( 1 , tmp ) ] ;
17838: LD_ADDR_VAR 0 2
17842: PUSH
17843: LD_VAR 0 3
17847: PUSH
17848: LD_INT 1
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: CALL_OW 12
17860: ARRAY
17861: ST_TO_ADDR
// if Crawls ( un ) then
17862: LD_VAR 0 2
17866: PPUSH
17867: CALL_OW 318
17871: IFFALSE 17882
// ComWalk ( un ) ;
17873: LD_VAR 0 2
17877: PPUSH
17878: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17882: LD_VAR 0 2
17886: PPUSH
17887: LD_INT 5
17889: PPUSH
17890: CALL_OW 336
// end ;
17894: PPOPN 3
17896: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17897: LD_EXP 44
17901: PUSH
17902: LD_EXP 62
17906: AND
17907: PUSH
17908: LD_OWVAR 67
17912: PUSH
17913: LD_INT 4
17915: LESS
17916: AND
17917: IFFALSE 17936
17919: GO 17921
17921: DISABLE
// begin Difficulty := Difficulty + 1 ;
17922: LD_ADDR_OWVAR 67
17926: PUSH
17927: LD_OWVAR 67
17931: PUSH
17932: LD_INT 1
17934: PLUS
17935: ST_TO_ADDR
// end ;
17936: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17937: LD_EXP 44
17941: PUSH
17942: LD_EXP 63
17946: AND
17947: IFFALSE 18050
17949: GO 17951
17951: DISABLE
17952: LD_INT 0
17954: PPUSH
// begin for i := 1 to 5 do
17955: LD_ADDR_VAR 0 1
17959: PUSH
17960: DOUBLE
17961: LD_INT 1
17963: DEC
17964: ST_TO_ADDR
17965: LD_INT 5
17967: PUSH
17968: FOR_TO
17969: IFFALSE 18048
// begin uc_nation := nation_nature ;
17971: LD_ADDR_OWVAR 21
17975: PUSH
17976: LD_INT 0
17978: ST_TO_ADDR
// uc_side := 0 ;
17979: LD_ADDR_OWVAR 20
17983: PUSH
17984: LD_INT 0
17986: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17987: LD_ADDR_OWVAR 29
17991: PUSH
17992: LD_INT 12
17994: PUSH
17995: LD_INT 12
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: ST_TO_ADDR
// hc_agressivity := 20 ;
18002: LD_ADDR_OWVAR 35
18006: PUSH
18007: LD_INT 20
18009: ST_TO_ADDR
// hc_class := class_tiger ;
18010: LD_ADDR_OWVAR 28
18014: PUSH
18015: LD_INT 14
18017: ST_TO_ADDR
// hc_gallery :=  ;
18018: LD_ADDR_OWVAR 33
18022: PUSH
18023: LD_STRING 
18025: ST_TO_ADDR
// hc_name :=  ;
18026: LD_ADDR_OWVAR 26
18030: PUSH
18031: LD_STRING 
18033: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18034: CALL_OW 44
18038: PPUSH
18039: LD_INT 0
18041: PPUSH
18042: CALL_OW 51
// end ;
18046: GO 17968
18048: POP
18049: POP
// end ;
18050: PPOPN 1
18052: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18053: LD_EXP 44
18057: PUSH
18058: LD_EXP 64
18062: AND
18063: IFFALSE 18072
18065: GO 18067
18067: DISABLE
// StreamSibBomb ;
18068: CALL 18073 0 0
18072: END
// export function StreamSibBomb ; var i , x , y ; begin
18073: LD_INT 0
18075: PPUSH
18076: PPUSH
18077: PPUSH
18078: PPUSH
// result := false ;
18079: LD_ADDR_VAR 0 1
18083: PUSH
18084: LD_INT 0
18086: ST_TO_ADDR
// for i := 1 to 16 do
18087: LD_ADDR_VAR 0 2
18091: PUSH
18092: DOUBLE
18093: LD_INT 1
18095: DEC
18096: ST_TO_ADDR
18097: LD_INT 16
18099: PUSH
18100: FOR_TO
18101: IFFALSE 18300
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18103: LD_ADDR_VAR 0 3
18107: PUSH
18108: LD_INT 10
18110: PUSH
18111: LD_INT 20
18113: PUSH
18114: LD_INT 30
18116: PUSH
18117: LD_INT 40
18119: PUSH
18120: LD_INT 50
18122: PUSH
18123: LD_INT 60
18125: PUSH
18126: LD_INT 70
18128: PUSH
18129: LD_INT 80
18131: PUSH
18132: LD_INT 90
18134: PUSH
18135: LD_INT 100
18137: PUSH
18138: LD_INT 110
18140: PUSH
18141: LD_INT 120
18143: PUSH
18144: LD_INT 130
18146: PUSH
18147: LD_INT 140
18149: PUSH
18150: LD_INT 150
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: PPUSH
18173: LD_INT 15
18175: PPUSH
18176: CALL_OW 12
18180: ARRAY
18181: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18182: LD_ADDR_VAR 0 4
18186: PUSH
18187: LD_INT 10
18189: PUSH
18190: LD_INT 20
18192: PUSH
18193: LD_INT 30
18195: PUSH
18196: LD_INT 40
18198: PUSH
18199: LD_INT 50
18201: PUSH
18202: LD_INT 60
18204: PUSH
18205: LD_INT 70
18207: PUSH
18208: LD_INT 80
18210: PUSH
18211: LD_INT 90
18213: PUSH
18214: LD_INT 100
18216: PUSH
18217: LD_INT 110
18219: PUSH
18220: LD_INT 120
18222: PUSH
18223: LD_INT 130
18225: PUSH
18226: LD_INT 140
18228: PUSH
18229: LD_INT 150
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: PPUSH
18252: LD_INT 15
18254: PPUSH
18255: CALL_OW 12
18259: ARRAY
18260: ST_TO_ADDR
// if ValidHex ( x , y ) then
18261: LD_VAR 0 3
18265: PPUSH
18266: LD_VAR 0 4
18270: PPUSH
18271: CALL_OW 488
18275: IFFALSE 18298
// begin result := [ x , y ] ;
18277: LD_ADDR_VAR 0 1
18281: PUSH
18282: LD_VAR 0 3
18286: PUSH
18287: LD_VAR 0 4
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: ST_TO_ADDR
// break ;
18296: GO 18300
// end ; end ;
18298: GO 18100
18300: POP
18301: POP
// if result then
18302: LD_VAR 0 1
18306: IFFALSE 18366
// begin ToLua ( playSibBomb() ) ;
18308: LD_STRING playSibBomb()
18310: PPUSH
18311: CALL_OW 559
// wait ( 0 0$14 ) ;
18315: LD_INT 490
18317: PPUSH
18318: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18322: LD_VAR 0 1
18326: PUSH
18327: LD_INT 1
18329: ARRAY
18330: PPUSH
18331: LD_VAR 0 1
18335: PUSH
18336: LD_INT 2
18338: ARRAY
18339: PPUSH
18340: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18344: LD_VAR 0 1
18348: PUSH
18349: LD_INT 1
18351: ARRAY
18352: PPUSH
18353: LD_VAR 0 1
18357: PUSH
18358: LD_INT 2
18360: ARRAY
18361: PPUSH
18362: CALL_OW 429
// end ; end ;
18366: LD_VAR 0 1
18370: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18371: LD_EXP 44
18375: PUSH
18376: LD_EXP 66
18380: AND
18381: IFFALSE 18393
18383: GO 18385
18385: DISABLE
// YouLost (  ) ;
18386: LD_STRING 
18388: PPUSH
18389: CALL_OW 104
18393: END
// every 0 0$1 trigger StreamModeActive and sFog do
18394: LD_EXP 44
18398: PUSH
18399: LD_EXP 65
18403: AND
18404: IFFALSE 18418
18406: GO 18408
18408: DISABLE
// FogOff ( your_side ) ;
18409: LD_OWVAR 2
18413: PPUSH
18414: CALL_OW 344
18418: END
// every 0 0$1 trigger StreamModeActive and sSun do
18419: LD_EXP 44
18423: PUSH
18424: LD_EXP 67
18428: AND
18429: IFFALSE 18457
18431: GO 18433
18433: DISABLE
// begin solar_recharge_percent := 0 ;
18434: LD_ADDR_OWVAR 79
18438: PUSH
18439: LD_INT 0
18441: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18442: LD_INT 10500
18444: PPUSH
18445: CALL_OW 67
// solar_recharge_percent := 100 ;
18449: LD_ADDR_OWVAR 79
18453: PUSH
18454: LD_INT 100
18456: ST_TO_ADDR
// end ;
18457: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18458: LD_EXP 44
18462: PUSH
18463: LD_EXP 68
18467: AND
18468: IFFALSE 18707
18470: GO 18472
18472: DISABLE
18473: LD_INT 0
18475: PPUSH
18476: PPUSH
18477: PPUSH
// begin tmp := [ ] ;
18478: LD_ADDR_VAR 0 3
18482: PUSH
18483: EMPTY
18484: ST_TO_ADDR
// for i := 1 to 6 do
18485: LD_ADDR_VAR 0 1
18489: PUSH
18490: DOUBLE
18491: LD_INT 1
18493: DEC
18494: ST_TO_ADDR
18495: LD_INT 6
18497: PUSH
18498: FOR_TO
18499: IFFALSE 18604
// begin uc_nation := nation_nature ;
18501: LD_ADDR_OWVAR 21
18505: PUSH
18506: LD_INT 0
18508: ST_TO_ADDR
// uc_side := 0 ;
18509: LD_ADDR_OWVAR 20
18513: PUSH
18514: LD_INT 0
18516: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18517: LD_ADDR_OWVAR 29
18521: PUSH
18522: LD_INT 12
18524: PUSH
18525: LD_INT 12
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: ST_TO_ADDR
// hc_agressivity := 20 ;
18532: LD_ADDR_OWVAR 35
18536: PUSH
18537: LD_INT 20
18539: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18540: LD_ADDR_OWVAR 28
18544: PUSH
18545: LD_INT 17
18547: ST_TO_ADDR
// hc_gallery :=  ;
18548: LD_ADDR_OWVAR 33
18552: PUSH
18553: LD_STRING 
18555: ST_TO_ADDR
// hc_name :=  ;
18556: LD_ADDR_OWVAR 26
18560: PUSH
18561: LD_STRING 
18563: ST_TO_ADDR
// un := CreateHuman ;
18564: LD_ADDR_VAR 0 2
18568: PUSH
18569: CALL_OW 44
18573: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18574: LD_VAR 0 2
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: CALL_OW 51
// tmp := tmp ^ un ;
18586: LD_ADDR_VAR 0 3
18590: PUSH
18591: LD_VAR 0 3
18595: PUSH
18596: LD_VAR 0 2
18600: ADD
18601: ST_TO_ADDR
// end ;
18602: GO 18498
18604: POP
18605: POP
// repeat wait ( 0 0$1 ) ;
18606: LD_INT 35
18608: PPUSH
18609: CALL_OW 67
// for un in tmp do
18613: LD_ADDR_VAR 0 2
18617: PUSH
18618: LD_VAR 0 3
18622: PUSH
18623: FOR_IN
18624: IFFALSE 18698
// begin if IsDead ( un ) then
18626: LD_VAR 0 2
18630: PPUSH
18631: CALL_OW 301
18635: IFFALSE 18655
// begin tmp := tmp diff un ;
18637: LD_ADDR_VAR 0 3
18641: PUSH
18642: LD_VAR 0 3
18646: PUSH
18647: LD_VAR 0 2
18651: DIFF
18652: ST_TO_ADDR
// continue ;
18653: GO 18623
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18655: LD_VAR 0 2
18659: PPUSH
18660: LD_INT 3
18662: PUSH
18663: LD_INT 22
18665: PUSH
18666: LD_INT 0
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PPUSH
18677: CALL_OW 69
18681: PPUSH
18682: LD_VAR 0 2
18686: PPUSH
18687: CALL_OW 74
18691: PPUSH
18692: CALL_OW 115
// end ;
18696: GO 18623
18698: POP
18699: POP
// until not tmp ;
18700: LD_VAR 0 3
18704: NOT
18705: IFFALSE 18606
// end ;
18707: PPOPN 3
18709: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18710: LD_EXP 44
18714: PUSH
18715: LD_EXP 69
18719: AND
18720: IFFALSE 18774
18722: GO 18724
18724: DISABLE
// begin ToLua ( displayTroll(); ) ;
18725: LD_STRING displayTroll();
18727: PPUSH
18728: CALL_OW 559
// wait ( 3 3$00 ) ;
18732: LD_INT 6300
18734: PPUSH
18735: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18739: LD_STRING hideTroll();
18741: PPUSH
18742: CALL_OW 559
// wait ( 1 1$00 ) ;
18746: LD_INT 2100
18748: PPUSH
18749: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18753: LD_STRING displayTroll();
18755: PPUSH
18756: CALL_OW 559
// wait ( 1 1$00 ) ;
18760: LD_INT 2100
18762: PPUSH
18763: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18767: LD_STRING hideTroll();
18769: PPUSH
18770: CALL_OW 559
// end ;
18774: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18775: LD_EXP 44
18779: PUSH
18780: LD_EXP 70
18784: AND
18785: IFFALSE 18848
18787: GO 18789
18789: DISABLE
18790: LD_INT 0
18792: PPUSH
// begin p := 0 ;
18793: LD_ADDR_VAR 0 1
18797: PUSH
18798: LD_INT 0
18800: ST_TO_ADDR
// repeat game_speed := 1 ;
18801: LD_ADDR_OWVAR 65
18805: PUSH
18806: LD_INT 1
18808: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18809: LD_INT 35
18811: PPUSH
18812: CALL_OW 67
// p := p + 1 ;
18816: LD_ADDR_VAR 0 1
18820: PUSH
18821: LD_VAR 0 1
18825: PUSH
18826: LD_INT 1
18828: PLUS
18829: ST_TO_ADDR
// until p >= 60 ;
18830: LD_VAR 0 1
18834: PUSH
18835: LD_INT 60
18837: GREATEREQUAL
18838: IFFALSE 18801
// game_speed := 4 ;
18840: LD_ADDR_OWVAR 65
18844: PUSH
18845: LD_INT 4
18847: ST_TO_ADDR
// end ;
18848: PPOPN 1
18850: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18851: LD_EXP 44
18855: PUSH
18856: LD_EXP 71
18860: AND
18861: IFFALSE 19007
18863: GO 18865
18865: DISABLE
18866: LD_INT 0
18868: PPUSH
18869: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18870: LD_ADDR_VAR 0 1
18874: PUSH
18875: LD_INT 22
18877: PUSH
18878: LD_OWVAR 2
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: LD_INT 30
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 30
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PPUSH
18919: CALL_OW 69
18923: ST_TO_ADDR
// if not depot then
18924: LD_VAR 0 1
18928: NOT
18929: IFFALSE 18933
// exit ;
18931: GO 19007
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18933: LD_ADDR_VAR 0 2
18937: PUSH
18938: LD_VAR 0 1
18942: PUSH
18943: LD_INT 1
18945: PPUSH
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL_OW 12
18955: ARRAY
18956: PPUSH
18957: CALL_OW 274
18961: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18962: LD_VAR 0 2
18966: PPUSH
18967: LD_INT 1
18969: PPUSH
18970: LD_INT 0
18972: PPUSH
18973: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18977: LD_VAR 0 2
18981: PPUSH
18982: LD_INT 2
18984: PPUSH
18985: LD_INT 0
18987: PPUSH
18988: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18992: LD_VAR 0 2
18996: PPUSH
18997: LD_INT 3
18999: PPUSH
19000: LD_INT 0
19002: PPUSH
19003: CALL_OW 277
// end ;
19007: PPOPN 2
19009: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19010: LD_EXP 44
19014: PUSH
19015: LD_EXP 72
19019: AND
19020: IFFALSE 19117
19022: GO 19024
19024: DISABLE
19025: LD_INT 0
19027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19028: LD_ADDR_VAR 0 1
19032: PUSH
19033: LD_INT 22
19035: PUSH
19036: LD_OWVAR 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 21
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 3
19057: PUSH
19058: LD_INT 23
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: PPUSH
19077: CALL_OW 69
19081: ST_TO_ADDR
// if not tmp then
19082: LD_VAR 0 1
19086: NOT
19087: IFFALSE 19091
// exit ;
19089: GO 19117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19091: LD_VAR 0 1
19095: PUSH
19096: LD_INT 1
19098: PPUSH
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 12
19108: ARRAY
19109: PPUSH
19110: LD_INT 200
19112: PPUSH
19113: CALL_OW 234
// end ;
19117: PPOPN 1
19119: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19120: LD_EXP 44
19124: PUSH
19125: LD_EXP 73
19129: AND
19130: IFFALSE 19209
19132: GO 19134
19134: DISABLE
19135: LD_INT 0
19137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19138: LD_ADDR_VAR 0 1
19142: PUSH
19143: LD_INT 22
19145: PUSH
19146: LD_OWVAR 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 21
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PPUSH
19169: CALL_OW 69
19173: ST_TO_ADDR
// if not tmp then
19174: LD_VAR 0 1
19178: NOT
19179: IFFALSE 19183
// exit ;
19181: GO 19209
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19183: LD_VAR 0 1
19187: PUSH
19188: LD_INT 1
19190: PPUSH
19191: LD_VAR 0 1
19195: PPUSH
19196: CALL_OW 12
19200: ARRAY
19201: PPUSH
19202: LD_INT 60
19204: PPUSH
19205: CALL_OW 234
// end ;
19209: PPOPN 1
19211: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19212: LD_EXP 44
19216: PUSH
19217: LD_EXP 74
19221: AND
19222: IFFALSE 19321
19224: GO 19226
19226: DISABLE
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
// begin enable ;
19231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19232: LD_ADDR_VAR 0 1
19236: PUSH
19237: LD_INT 22
19239: PUSH
19240: LD_OWVAR 2
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 61
19251: PUSH
19252: EMPTY
19253: LIST
19254: PUSH
19255: LD_INT 33
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: ST_TO_ADDR
// if not tmp then
19275: LD_VAR 0 1
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19321
// for i in tmp do
19284: LD_ADDR_VAR 0 2
19288: PUSH
19289: LD_VAR 0 1
19293: PUSH
19294: FOR_IN
19295: IFFALSE 19319
// if IsControledBy ( i ) then
19297: LD_VAR 0 2
19301: PPUSH
19302: CALL_OW 312
19306: IFFALSE 19317
// ComUnlink ( i ) ;
19308: LD_VAR 0 2
19312: PPUSH
19313: CALL_OW 136
19317: GO 19294
19319: POP
19320: POP
// end ;
19321: PPOPN 2
19323: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19324: LD_EXP 44
19328: PUSH
19329: LD_EXP 75
19333: AND
19334: IFFALSE 19474
19336: GO 19338
19338: DISABLE
19339: LD_INT 0
19341: PPUSH
19342: PPUSH
// begin ToLua ( displayPowell(); ) ;
19343: LD_STRING displayPowell();
19345: PPUSH
19346: CALL_OW 559
// uc_side := 0 ;
19350: LD_ADDR_OWVAR 20
19354: PUSH
19355: LD_INT 0
19357: ST_TO_ADDR
// uc_nation := 2 ;
19358: LD_ADDR_OWVAR 21
19362: PUSH
19363: LD_INT 2
19365: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19366: LD_ADDR_OWVAR 37
19370: PUSH
19371: LD_INT 14
19373: ST_TO_ADDR
// vc_engine := engine_siberite ;
19374: LD_ADDR_OWVAR 39
19378: PUSH
19379: LD_INT 3
19381: ST_TO_ADDR
// vc_control := control_apeman ;
19382: LD_ADDR_OWVAR 38
19386: PUSH
19387: LD_INT 5
19389: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19390: LD_ADDR_OWVAR 40
19394: PUSH
19395: LD_INT 29
19397: ST_TO_ADDR
// un := CreateVehicle ;
19398: LD_ADDR_VAR 0 2
19402: PUSH
19403: CALL_OW 45
19407: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19408: LD_VAR 0 2
19412: PPUSH
19413: LD_INT 1
19415: PPUSH
19416: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19420: LD_INT 35
19422: PPUSH
19423: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19427: LD_VAR 0 2
19431: PPUSH
19432: LD_INT 22
19434: PUSH
19435: LD_OWVAR 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PPUSH
19444: CALL_OW 69
19448: PPUSH
19449: LD_VAR 0 2
19453: PPUSH
19454: CALL_OW 74
19458: PPUSH
19459: CALL_OW 115
// until IsDead ( un ) ;
19463: LD_VAR 0 2
19467: PPUSH
19468: CALL_OW 301
19472: IFFALSE 19420
// end ;
19474: PPOPN 2
19476: END
// every 0 0$1 trigger StreamModeActive and sStu do
19477: LD_EXP 44
19481: PUSH
19482: LD_EXP 83
19486: AND
19487: IFFALSE 19503
19489: GO 19491
19491: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19492: LD_STRING displayStucuk();
19494: PPUSH
19495: CALL_OW 559
// ResetFog ;
19499: CALL_OW 335
// end ;
19503: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19504: LD_EXP 44
19508: PUSH
19509: LD_EXP 76
19513: AND
19514: IFFALSE 19655
19516: GO 19518
19518: DISABLE
19519: LD_INT 0
19521: PPUSH
19522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19523: LD_ADDR_VAR 0 2
19527: PUSH
19528: LD_INT 22
19530: PUSH
19531: LD_OWVAR 2
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 21
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PPUSH
19554: CALL_OW 69
19558: ST_TO_ADDR
// if not tmp then
19559: LD_VAR 0 2
19563: NOT
19564: IFFALSE 19568
// exit ;
19566: GO 19655
// un := tmp [ rand ( 1 , tmp ) ] ;
19568: LD_ADDR_VAR 0 1
19572: PUSH
19573: LD_VAR 0 2
19577: PUSH
19578: LD_INT 1
19580: PPUSH
19581: LD_VAR 0 2
19585: PPUSH
19586: CALL_OW 12
19590: ARRAY
19591: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19592: LD_VAR 0 1
19596: PPUSH
19597: LD_INT 0
19599: PPUSH
19600: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19604: LD_VAR 0 1
19608: PPUSH
19609: LD_OWVAR 3
19613: PUSH
19614: LD_VAR 0 1
19618: DIFF
19619: PPUSH
19620: LD_VAR 0 1
19624: PPUSH
19625: CALL_OW 74
19629: PPUSH
19630: CALL_OW 115
// wait ( 0 0$20 ) ;
19634: LD_INT 700
19636: PPUSH
19637: CALL_OW 67
// SetSide ( un , your_side ) ;
19641: LD_VAR 0 1
19645: PPUSH
19646: LD_OWVAR 2
19650: PPUSH
19651: CALL_OW 235
// end ;
19655: PPOPN 2
19657: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19658: LD_EXP 44
19662: PUSH
19663: LD_EXP 77
19667: AND
19668: IFFALSE 19774
19670: GO 19672
19672: DISABLE
19673: LD_INT 0
19675: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19676: LD_ADDR_VAR 0 1
19680: PUSH
19681: LD_INT 22
19683: PUSH
19684: LD_OWVAR 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 30
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 30
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PPUSH
19725: CALL_OW 69
19729: ST_TO_ADDR
// if not depot then
19730: LD_VAR 0 1
19734: NOT
19735: IFFALSE 19739
// exit ;
19737: GO 19774
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19739: LD_VAR 0 1
19743: PUSH
19744: LD_INT 1
19746: ARRAY
19747: PPUSH
19748: CALL_OW 250
19752: PPUSH
19753: LD_VAR 0 1
19757: PUSH
19758: LD_INT 1
19760: ARRAY
19761: PPUSH
19762: CALL_OW 251
19766: PPUSH
19767: LD_INT 70
19769: PPUSH
19770: CALL_OW 495
// end ;
19774: PPOPN 1
19776: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19777: LD_EXP 44
19781: PUSH
19782: LD_EXP 78
19786: AND
19787: IFFALSE 19998
19789: GO 19791
19791: DISABLE
19792: LD_INT 0
19794: PPUSH
19795: PPUSH
19796: PPUSH
19797: PPUSH
19798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19799: LD_ADDR_VAR 0 5
19803: PUSH
19804: LD_INT 22
19806: PUSH
19807: LD_OWVAR 2
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 21
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PPUSH
19830: CALL_OW 69
19834: ST_TO_ADDR
// if not tmp then
19835: LD_VAR 0 5
19839: NOT
19840: IFFALSE 19844
// exit ;
19842: GO 19998
// for i in tmp do
19844: LD_ADDR_VAR 0 1
19848: PUSH
19849: LD_VAR 0 5
19853: PUSH
19854: FOR_IN
19855: IFFALSE 19996
// begin d := rand ( 0 , 5 ) ;
19857: LD_ADDR_VAR 0 4
19861: PUSH
19862: LD_INT 0
19864: PPUSH
19865: LD_INT 5
19867: PPUSH
19868: CALL_OW 12
19872: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19873: LD_ADDR_VAR 0 2
19877: PUSH
19878: LD_VAR 0 1
19882: PPUSH
19883: CALL_OW 250
19887: PPUSH
19888: LD_VAR 0 4
19892: PPUSH
19893: LD_INT 3
19895: PPUSH
19896: LD_INT 12
19898: PPUSH
19899: CALL_OW 12
19903: PPUSH
19904: CALL_OW 272
19908: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19909: LD_ADDR_VAR 0 3
19913: PUSH
19914: LD_VAR 0 1
19918: PPUSH
19919: CALL_OW 251
19923: PPUSH
19924: LD_VAR 0 4
19928: PPUSH
19929: LD_INT 3
19931: PPUSH
19932: LD_INT 12
19934: PPUSH
19935: CALL_OW 12
19939: PPUSH
19940: CALL_OW 273
19944: ST_TO_ADDR
// if ValidHex ( x , y ) then
19945: LD_VAR 0 2
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: CALL_OW 488
19959: IFFALSE 19994
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19961: LD_VAR 0 1
19965: PPUSH
19966: LD_VAR 0 2
19970: PPUSH
19971: LD_VAR 0 3
19975: PPUSH
19976: LD_INT 3
19978: PPUSH
19979: LD_INT 6
19981: PPUSH
19982: CALL_OW 12
19986: PPUSH
19987: LD_INT 1
19989: PPUSH
19990: CALL_OW 483
// end ;
19994: GO 19854
19996: POP
19997: POP
// end ;
19998: PPOPN 5
20000: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20001: LD_EXP 44
20005: PUSH
20006: LD_EXP 79
20010: AND
20011: IFFALSE 20105
20013: GO 20015
20015: DISABLE
20016: LD_INT 0
20018: PPUSH
20019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20020: LD_ADDR_VAR 0 2
20024: PUSH
20025: LD_INT 22
20027: PUSH
20028: LD_OWVAR 2
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 32
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 21
20049: PUSH
20050: LD_INT 2
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: PPUSH
20062: CALL_OW 69
20066: ST_TO_ADDR
// if not tmp then
20067: LD_VAR 0 2
20071: NOT
20072: IFFALSE 20076
// exit ;
20074: GO 20105
// for i in tmp do
20076: LD_ADDR_VAR 0 1
20080: PUSH
20081: LD_VAR 0 2
20085: PUSH
20086: FOR_IN
20087: IFFALSE 20103
// SetFuel ( i , 0 ) ;
20089: LD_VAR 0 1
20093: PPUSH
20094: LD_INT 0
20096: PPUSH
20097: CALL_OW 240
20101: GO 20086
20103: POP
20104: POP
// end ;
20105: PPOPN 2
20107: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20108: LD_EXP 44
20112: PUSH
20113: LD_EXP 80
20117: AND
20118: IFFALSE 20184
20120: GO 20122
20122: DISABLE
20123: LD_INT 0
20125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20126: LD_ADDR_VAR 0 1
20130: PUSH
20131: LD_INT 22
20133: PUSH
20134: LD_OWVAR 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 30
20145: PUSH
20146: LD_INT 29
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PPUSH
20157: CALL_OW 69
20161: ST_TO_ADDR
// if not tmp then
20162: LD_VAR 0 1
20166: NOT
20167: IFFALSE 20171
// exit ;
20169: GO 20184
// DestroyUnit ( tmp [ 1 ] ) ;
20171: LD_VAR 0 1
20175: PUSH
20176: LD_INT 1
20178: ARRAY
20179: PPUSH
20180: CALL_OW 65
// end ;
20184: PPOPN 1
20186: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20187: LD_EXP 44
20191: PUSH
20192: LD_EXP 82
20196: AND
20197: IFFALSE 20326
20199: GO 20201
20201: DISABLE
20202: LD_INT 0
20204: PPUSH
// begin uc_side := 0 ;
20205: LD_ADDR_OWVAR 20
20209: PUSH
20210: LD_INT 0
20212: ST_TO_ADDR
// uc_nation := nation_arabian ;
20213: LD_ADDR_OWVAR 21
20217: PUSH
20218: LD_INT 2
20220: ST_TO_ADDR
// hc_gallery :=  ;
20221: LD_ADDR_OWVAR 33
20225: PUSH
20226: LD_STRING 
20228: ST_TO_ADDR
// hc_name :=  ;
20229: LD_ADDR_OWVAR 26
20233: PUSH
20234: LD_STRING 
20236: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20237: LD_INT 1
20239: PPUSH
20240: LD_INT 11
20242: PPUSH
20243: LD_INT 10
20245: PPUSH
20246: CALL_OW 380
// un := CreateHuman ;
20250: LD_ADDR_VAR 0 1
20254: PUSH
20255: CALL_OW 44
20259: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20260: LD_VAR 0 1
20264: PPUSH
20265: LD_INT 1
20267: PPUSH
20268: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20272: LD_INT 35
20274: PPUSH
20275: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20279: LD_VAR 0 1
20283: PPUSH
20284: LD_INT 22
20286: PUSH
20287: LD_OWVAR 2
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PPUSH
20296: CALL_OW 69
20300: PPUSH
20301: LD_VAR 0 1
20305: PPUSH
20306: CALL_OW 74
20310: PPUSH
20311: CALL_OW 115
// until IsDead ( un ) ;
20315: LD_VAR 0 1
20319: PPUSH
20320: CALL_OW 301
20324: IFFALSE 20272
// end ;
20326: PPOPN 1
20328: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20329: LD_EXP 44
20333: PUSH
20334: LD_EXP 84
20338: AND
20339: IFFALSE 20351
20341: GO 20343
20343: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20344: LD_STRING earthquake(getX(game), 0, 32)
20346: PPUSH
20347: CALL_OW 559
20351: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20352: LD_EXP 44
20356: PUSH
20357: LD_EXP 85
20361: AND
20362: IFFALSE 20453
20364: GO 20366
20366: DISABLE
20367: LD_INT 0
20369: PPUSH
// begin enable ;
20370: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20371: LD_ADDR_VAR 0 1
20375: PUSH
20376: LD_INT 22
20378: PUSH
20379: LD_OWVAR 2
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 21
20390: PUSH
20391: LD_INT 2
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 33
20400: PUSH
20401: LD_INT 3
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: PPUSH
20413: CALL_OW 69
20417: ST_TO_ADDR
// if not tmp then
20418: LD_VAR 0 1
20422: NOT
20423: IFFALSE 20427
// exit ;
20425: GO 20453
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20427: LD_VAR 0 1
20431: PUSH
20432: LD_INT 1
20434: PPUSH
20435: LD_VAR 0 1
20439: PPUSH
20440: CALL_OW 12
20444: ARRAY
20445: PPUSH
20446: LD_INT 1
20448: PPUSH
20449: CALL_OW 234
// end ;
20453: PPOPN 1
20455: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20456: LD_EXP 44
20460: PUSH
20461: LD_EXP 86
20465: AND
20466: IFFALSE 20607
20468: GO 20470
20470: DISABLE
20471: LD_INT 0
20473: PPUSH
20474: PPUSH
20475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20476: LD_ADDR_VAR 0 3
20480: PUSH
20481: LD_INT 22
20483: PUSH
20484: LD_OWVAR 2
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 25
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PPUSH
20507: CALL_OW 69
20511: ST_TO_ADDR
// if not tmp then
20512: LD_VAR 0 3
20516: NOT
20517: IFFALSE 20521
// exit ;
20519: GO 20607
// un := tmp [ rand ( 1 , tmp ) ] ;
20521: LD_ADDR_VAR 0 2
20525: PUSH
20526: LD_VAR 0 3
20530: PUSH
20531: LD_INT 1
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 12
20543: ARRAY
20544: ST_TO_ADDR
// if Crawls ( un ) then
20545: LD_VAR 0 2
20549: PPUSH
20550: CALL_OW 318
20554: IFFALSE 20565
// ComWalk ( un ) ;
20556: LD_VAR 0 2
20560: PPUSH
20561: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20565: LD_VAR 0 2
20569: PPUSH
20570: LD_INT 9
20572: PPUSH
20573: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20577: LD_INT 28
20579: PPUSH
20580: LD_OWVAR 2
20584: PPUSH
20585: LD_INT 2
20587: PPUSH
20588: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20592: LD_INT 29
20594: PPUSH
20595: LD_OWVAR 2
20599: PPUSH
20600: LD_INT 2
20602: PPUSH
20603: CALL_OW 322
// end ;
20607: PPOPN 3
20609: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20610: LD_EXP 44
20614: PUSH
20615: LD_EXP 87
20619: AND
20620: IFFALSE 20731
20622: GO 20624
20624: DISABLE
20625: LD_INT 0
20627: PPUSH
20628: PPUSH
20629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20630: LD_ADDR_VAR 0 3
20634: PUSH
20635: LD_INT 22
20637: PUSH
20638: LD_OWVAR 2
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 25
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PPUSH
20661: CALL_OW 69
20665: ST_TO_ADDR
// if not tmp then
20666: LD_VAR 0 3
20670: NOT
20671: IFFALSE 20675
// exit ;
20673: GO 20731
// un := tmp [ rand ( 1 , tmp ) ] ;
20675: LD_ADDR_VAR 0 2
20679: PUSH
20680: LD_VAR 0 3
20684: PUSH
20685: LD_INT 1
20687: PPUSH
20688: LD_VAR 0 3
20692: PPUSH
20693: CALL_OW 12
20697: ARRAY
20698: ST_TO_ADDR
// if Crawls ( un ) then
20699: LD_VAR 0 2
20703: PPUSH
20704: CALL_OW 318
20708: IFFALSE 20719
// ComWalk ( un ) ;
20710: LD_VAR 0 2
20714: PPUSH
20715: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20719: LD_VAR 0 2
20723: PPUSH
20724: LD_INT 8
20726: PPUSH
20727: CALL_OW 336
// end ;
20731: PPOPN 3
20733: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20734: LD_EXP 44
20738: PUSH
20739: LD_EXP 88
20743: AND
20744: IFFALSE 20888
20746: GO 20748
20748: DISABLE
20749: LD_INT 0
20751: PPUSH
20752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20753: LD_ADDR_VAR 0 2
20757: PUSH
20758: LD_INT 22
20760: PUSH
20761: LD_OWVAR 2
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 21
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: LD_INT 34
20785: PUSH
20786: LD_INT 12
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 34
20795: PUSH
20796: LD_INT 51
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 34
20805: PUSH
20806: LD_INT 32
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: PPUSH
20824: CALL_OW 69
20828: ST_TO_ADDR
// if not tmp then
20829: LD_VAR 0 2
20833: NOT
20834: IFFALSE 20838
// exit ;
20836: GO 20888
// for i in tmp do
20838: LD_ADDR_VAR 0 1
20842: PUSH
20843: LD_VAR 0 2
20847: PUSH
20848: FOR_IN
20849: IFFALSE 20886
// if GetCargo ( i , mat_artifact ) = 0 then
20851: LD_VAR 0 1
20855: PPUSH
20856: LD_INT 4
20858: PPUSH
20859: CALL_OW 289
20863: PUSH
20864: LD_INT 0
20866: EQUAL
20867: IFFALSE 20884
// SetCargo ( i , mat_siberit , 100 ) ;
20869: LD_VAR 0 1
20873: PPUSH
20874: LD_INT 3
20876: PPUSH
20877: LD_INT 100
20879: PPUSH
20880: CALL_OW 290
20884: GO 20848
20886: POP
20887: POP
// end ;
20888: PPOPN 2
20890: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20891: LD_EXP 44
20895: PUSH
20896: LD_EXP 89
20900: AND
20901: IFFALSE 21084
20903: GO 20905
20905: DISABLE
20906: LD_INT 0
20908: PPUSH
20909: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20910: LD_ADDR_VAR 0 2
20914: PUSH
20915: LD_INT 22
20917: PUSH
20918: LD_OWVAR 2
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PPUSH
20927: CALL_OW 69
20931: ST_TO_ADDR
// if not tmp then
20932: LD_VAR 0 2
20936: NOT
20937: IFFALSE 20941
// exit ;
20939: GO 21084
// for i := 1 to 2 do
20941: LD_ADDR_VAR 0 1
20945: PUSH
20946: DOUBLE
20947: LD_INT 1
20949: DEC
20950: ST_TO_ADDR
20951: LD_INT 2
20953: PUSH
20954: FOR_TO
20955: IFFALSE 21082
// begin uc_side := your_side ;
20957: LD_ADDR_OWVAR 20
20961: PUSH
20962: LD_OWVAR 2
20966: ST_TO_ADDR
// uc_nation := nation_american ;
20967: LD_ADDR_OWVAR 21
20971: PUSH
20972: LD_INT 1
20974: ST_TO_ADDR
// vc_chassis := us_morphling ;
20975: LD_ADDR_OWVAR 37
20979: PUSH
20980: LD_INT 5
20982: ST_TO_ADDR
// vc_engine := engine_siberite ;
20983: LD_ADDR_OWVAR 39
20987: PUSH
20988: LD_INT 3
20990: ST_TO_ADDR
// vc_control := control_computer ;
20991: LD_ADDR_OWVAR 38
20995: PUSH
20996: LD_INT 3
20998: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20999: LD_ADDR_OWVAR 40
21003: PUSH
21004: LD_INT 10
21006: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21007: LD_VAR 0 2
21011: PUSH
21012: LD_INT 1
21014: ARRAY
21015: PPUSH
21016: CALL_OW 310
21020: NOT
21021: IFFALSE 21068
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21023: CALL_OW 45
21027: PPUSH
21028: LD_VAR 0 2
21032: PUSH
21033: LD_INT 1
21035: ARRAY
21036: PPUSH
21037: CALL_OW 250
21041: PPUSH
21042: LD_VAR 0 2
21046: PUSH
21047: LD_INT 1
21049: ARRAY
21050: PPUSH
21051: CALL_OW 251
21055: PPUSH
21056: LD_INT 12
21058: PPUSH
21059: LD_INT 1
21061: PPUSH
21062: CALL_OW 50
21066: GO 21080
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21068: CALL_OW 45
21072: PPUSH
21073: LD_INT 1
21075: PPUSH
21076: CALL_OW 51
// end ;
21080: GO 20954
21082: POP
21083: POP
// end ;
21084: PPOPN 2
21086: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21087: LD_EXP 44
21091: PUSH
21092: LD_EXP 90
21096: AND
21097: IFFALSE 21319
21099: GO 21101
21101: DISABLE
21102: LD_INT 0
21104: PPUSH
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21110: LD_ADDR_VAR 0 6
21114: PUSH
21115: LD_INT 22
21117: PUSH
21118: LD_OWVAR 2
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 21
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 3
21139: PUSH
21140: LD_INT 23
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: LIST
21158: PPUSH
21159: CALL_OW 69
21163: ST_TO_ADDR
// if not tmp then
21164: LD_VAR 0 6
21168: NOT
21169: IFFALSE 21173
// exit ;
21171: GO 21319
// s1 := rand ( 1 , 4 ) ;
21173: LD_ADDR_VAR 0 2
21177: PUSH
21178: LD_INT 1
21180: PPUSH
21181: LD_INT 4
21183: PPUSH
21184: CALL_OW 12
21188: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21189: LD_ADDR_VAR 0 4
21193: PUSH
21194: LD_VAR 0 6
21198: PUSH
21199: LD_INT 1
21201: ARRAY
21202: PPUSH
21203: LD_VAR 0 2
21207: PPUSH
21208: CALL_OW 259
21212: ST_TO_ADDR
// if s1 = 1 then
21213: LD_VAR 0 2
21217: PUSH
21218: LD_INT 1
21220: EQUAL
21221: IFFALSE 21241
// s2 := rand ( 2 , 4 ) else
21223: LD_ADDR_VAR 0 3
21227: PUSH
21228: LD_INT 2
21230: PPUSH
21231: LD_INT 4
21233: PPUSH
21234: CALL_OW 12
21238: ST_TO_ADDR
21239: GO 21249
// s2 := 1 ;
21241: LD_ADDR_VAR 0 3
21245: PUSH
21246: LD_INT 1
21248: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21249: LD_ADDR_VAR 0 5
21253: PUSH
21254: LD_VAR 0 6
21258: PUSH
21259: LD_INT 1
21261: ARRAY
21262: PPUSH
21263: LD_VAR 0 3
21267: PPUSH
21268: CALL_OW 259
21272: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21273: LD_VAR 0 6
21277: PUSH
21278: LD_INT 1
21280: ARRAY
21281: PPUSH
21282: LD_VAR 0 2
21286: PPUSH
21287: LD_VAR 0 5
21291: PPUSH
21292: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21296: LD_VAR 0 6
21300: PUSH
21301: LD_INT 1
21303: ARRAY
21304: PPUSH
21305: LD_VAR 0 3
21309: PPUSH
21310: LD_VAR 0 4
21314: PPUSH
21315: CALL_OW 237
// end ;
21319: PPOPN 6
21321: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21322: LD_EXP 44
21326: PUSH
21327: LD_EXP 91
21331: AND
21332: IFFALSE 21411
21334: GO 21336
21336: DISABLE
21337: LD_INT 0
21339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21340: LD_ADDR_VAR 0 1
21344: PUSH
21345: LD_INT 22
21347: PUSH
21348: LD_OWVAR 2
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 30
21359: PUSH
21360: LD_INT 3
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PPUSH
21371: CALL_OW 69
21375: ST_TO_ADDR
// if not tmp then
21376: LD_VAR 0 1
21380: NOT
21381: IFFALSE 21385
// exit ;
21383: GO 21411
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21385: LD_VAR 0 1
21389: PUSH
21390: LD_INT 1
21392: PPUSH
21393: LD_VAR 0 1
21397: PPUSH
21398: CALL_OW 12
21402: ARRAY
21403: PPUSH
21404: LD_INT 1
21406: PPUSH
21407: CALL_OW 234
// end ;
21411: PPOPN 1
21413: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21414: LD_EXP 44
21418: PUSH
21419: LD_EXP 92
21423: AND
21424: IFFALSE 21536
21426: GO 21428
21428: DISABLE
21429: LD_INT 0
21431: PPUSH
21432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_OWVAR 2
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: LD_INT 30
21455: PUSH
21456: LD_INT 27
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 30
21465: PUSH
21466: LD_INT 26
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 30
21475: PUSH
21476: LD_INT 28
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PPUSH
21493: CALL_OW 69
21497: ST_TO_ADDR
// if not tmp then
21498: LD_VAR 0 2
21502: NOT
21503: IFFALSE 21507
// exit ;
21505: GO 21536
// for i in tmp do
21507: LD_ADDR_VAR 0 1
21511: PUSH
21512: LD_VAR 0 2
21516: PUSH
21517: FOR_IN
21518: IFFALSE 21534
// SetLives ( i , 1 ) ;
21520: LD_VAR 0 1
21524: PPUSH
21525: LD_INT 1
21527: PPUSH
21528: CALL_OW 234
21532: GO 21517
21534: POP
21535: POP
// end ;
21536: PPOPN 2
21538: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21539: LD_EXP 44
21543: PUSH
21544: LD_EXP 93
21548: AND
21549: IFFALSE 21836
21551: GO 21553
21553: DISABLE
21554: LD_INT 0
21556: PPUSH
21557: PPUSH
21558: PPUSH
// begin i := rand ( 1 , 7 ) ;
21559: LD_ADDR_VAR 0 1
21563: PUSH
21564: LD_INT 1
21566: PPUSH
21567: LD_INT 7
21569: PPUSH
21570: CALL_OW 12
21574: ST_TO_ADDR
// case i of 1 :
21575: LD_VAR 0 1
21579: PUSH
21580: LD_INT 1
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21598
21588: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21589: LD_STRING earthquake(getX(game), 0, 32)
21591: PPUSH
21592: CALL_OW 559
21596: GO 21836
21598: LD_INT 2
21600: DOUBLE
21601: EQUAL
21602: IFTRUE 21606
21604: GO 21620
21606: POP
// begin ToLua ( displayStucuk(); ) ;
21607: LD_STRING displayStucuk();
21609: PPUSH
21610: CALL_OW 559
// ResetFog ;
21614: CALL_OW 335
// end ; 3 :
21618: GO 21836
21620: LD_INT 3
21622: DOUBLE
21623: EQUAL
21624: IFTRUE 21628
21626: GO 21732
21628: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21629: LD_ADDR_VAR 0 2
21633: PUSH
21634: LD_INT 22
21636: PUSH
21637: LD_OWVAR 2
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 25
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PPUSH
21660: CALL_OW 69
21664: ST_TO_ADDR
// if not tmp then
21665: LD_VAR 0 2
21669: NOT
21670: IFFALSE 21674
// exit ;
21672: GO 21836
// un := tmp [ rand ( 1 , tmp ) ] ;
21674: LD_ADDR_VAR 0 3
21678: PUSH
21679: LD_VAR 0 2
21683: PUSH
21684: LD_INT 1
21686: PPUSH
21687: LD_VAR 0 2
21691: PPUSH
21692: CALL_OW 12
21696: ARRAY
21697: ST_TO_ADDR
// if Crawls ( un ) then
21698: LD_VAR 0 3
21702: PPUSH
21703: CALL_OW 318
21707: IFFALSE 21718
// ComWalk ( un ) ;
21709: LD_VAR 0 3
21713: PPUSH
21714: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21718: LD_VAR 0 3
21722: PPUSH
21723: LD_INT 8
21725: PPUSH
21726: CALL_OW 336
// end ; 4 :
21730: GO 21836
21732: LD_INT 4
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21814
21740: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21741: LD_ADDR_VAR 0 2
21745: PUSH
21746: LD_INT 22
21748: PUSH
21749: LD_OWVAR 2
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 30
21760: PUSH
21761: LD_INT 29
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 69
21776: ST_TO_ADDR
// if not tmp then
21777: LD_VAR 0 2
21781: NOT
21782: IFFALSE 21786
// exit ;
21784: GO 21836
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21786: LD_VAR 0 2
21790: PUSH
21791: LD_INT 1
21793: ARRAY
21794: PPUSH
21795: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21799: LD_VAR 0 2
21803: PUSH
21804: LD_INT 1
21806: ARRAY
21807: PPUSH
21808: CALL_OW 65
// end ; 5 .. 7 :
21812: GO 21836
21814: LD_INT 5
21816: DOUBLE
21817: GREATEREQUAL
21818: IFFALSE 21826
21820: LD_INT 7
21822: DOUBLE
21823: LESSEQUAL
21824: IFTRUE 21828
21826: GO 21835
21828: POP
// StreamSibBomb ; end ;
21829: CALL 18073 0 0
21833: GO 21836
21835: POP
// end ;
21836: PPOPN 3
21838: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21839: LD_EXP 44
21843: PUSH
21844: LD_EXP 94
21848: AND
21849: IFFALSE 22005
21851: GO 21853
21853: DISABLE
21854: LD_INT 0
21856: PPUSH
21857: PPUSH
21858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21859: LD_ADDR_VAR 0 2
21863: PUSH
21864: LD_INT 81
21866: PUSH
21867: LD_OWVAR 2
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 2
21878: PUSH
21879: LD_INT 21
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 21
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PPUSH
21908: CALL_OW 69
21912: ST_TO_ADDR
// if not tmp then
21913: LD_VAR 0 2
21917: NOT
21918: IFFALSE 21922
// exit ;
21920: GO 22005
// p := 0 ;
21922: LD_ADDR_VAR 0 3
21926: PUSH
21927: LD_INT 0
21929: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21930: LD_INT 35
21932: PPUSH
21933: CALL_OW 67
// p := p + 1 ;
21937: LD_ADDR_VAR 0 3
21941: PUSH
21942: LD_VAR 0 3
21946: PUSH
21947: LD_INT 1
21949: PLUS
21950: ST_TO_ADDR
// for i in tmp do
21951: LD_ADDR_VAR 0 1
21955: PUSH
21956: LD_VAR 0 2
21960: PUSH
21961: FOR_IN
21962: IFFALSE 21993
// if GetLives ( i ) < 1000 then
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 256
21973: PUSH
21974: LD_INT 1000
21976: LESS
21977: IFFALSE 21991
// SetLives ( i , 1000 ) ;
21979: LD_VAR 0 1
21983: PPUSH
21984: LD_INT 1000
21986: PPUSH
21987: CALL_OW 234
21991: GO 21961
21993: POP
21994: POP
// until p > 20 ;
21995: LD_VAR 0 3
21999: PUSH
22000: LD_INT 20
22002: GREATER
22003: IFFALSE 21930
// end ;
22005: PPOPN 3
22007: END
// every 0 0$1 trigger StreamModeActive and sTime do
22008: LD_EXP 44
22012: PUSH
22013: LD_EXP 95
22017: AND
22018: IFFALSE 22053
22020: GO 22022
22022: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22023: LD_INT 28
22025: PPUSH
22026: LD_OWVAR 2
22030: PPUSH
22031: LD_INT 2
22033: PPUSH
22034: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22038: LD_INT 30
22040: PPUSH
22041: LD_OWVAR 2
22045: PPUSH
22046: LD_INT 2
22048: PPUSH
22049: CALL_OW 322
// end ;
22053: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22054: LD_EXP 44
22058: PUSH
22059: LD_EXP 96
22063: AND
22064: IFFALSE 22185
22066: GO 22068
22068: DISABLE
22069: LD_INT 0
22071: PPUSH
22072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22073: LD_ADDR_VAR 0 2
22077: PUSH
22078: LD_INT 22
22080: PUSH
22081: LD_OWVAR 2
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 21
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: LD_INT 23
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: PPUSH
22122: CALL_OW 69
22126: ST_TO_ADDR
// if not tmp then
22127: LD_VAR 0 2
22131: NOT
22132: IFFALSE 22136
// exit ;
22134: GO 22185
// for i in tmp do
22136: LD_ADDR_VAR 0 1
22140: PUSH
22141: LD_VAR 0 2
22145: PUSH
22146: FOR_IN
22147: IFFALSE 22183
// begin if Crawls ( i ) then
22149: LD_VAR 0 1
22153: PPUSH
22154: CALL_OW 318
22158: IFFALSE 22169
// ComWalk ( i ) ;
22160: LD_VAR 0 1
22164: PPUSH
22165: CALL_OW 138
// SetClass ( i , 2 ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_INT 2
22176: PPUSH
22177: CALL_OW 336
// end ;
22181: GO 22146
22183: POP
22184: POP
// end ;
22185: PPOPN 2
22187: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22188: LD_EXP 44
22192: PUSH
22193: LD_EXP 97
22197: AND
22198: IFFALSE 22486
22200: GO 22202
22202: DISABLE
22203: LD_INT 0
22205: PPUSH
22206: PPUSH
22207: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22208: LD_OWVAR 2
22212: PPUSH
22213: LD_INT 9
22215: PPUSH
22216: LD_INT 1
22218: PPUSH
22219: LD_INT 1
22221: PPUSH
22222: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22226: LD_INT 9
22228: PPUSH
22229: LD_OWVAR 2
22233: PPUSH
22234: CALL_OW 343
// uc_side := 9 ;
22238: LD_ADDR_OWVAR 20
22242: PUSH
22243: LD_INT 9
22245: ST_TO_ADDR
// uc_nation := 2 ;
22246: LD_ADDR_OWVAR 21
22250: PUSH
22251: LD_INT 2
22253: ST_TO_ADDR
// hc_name := Dark Warrior ;
22254: LD_ADDR_OWVAR 26
22258: PUSH
22259: LD_STRING Dark Warrior
22261: ST_TO_ADDR
// hc_gallery :=  ;
22262: LD_ADDR_OWVAR 33
22266: PUSH
22267: LD_STRING 
22269: ST_TO_ADDR
// hc_noskilllimit := true ;
22270: LD_ADDR_OWVAR 76
22274: PUSH
22275: LD_INT 1
22277: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22278: LD_ADDR_OWVAR 31
22282: PUSH
22283: LD_INT 30
22285: PUSH
22286: LD_INT 30
22288: PUSH
22289: LD_INT 30
22291: PUSH
22292: LD_INT 30
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: ST_TO_ADDR
// un := CreateHuman ;
22301: LD_ADDR_VAR 0 3
22305: PUSH
22306: CALL_OW 44
22310: ST_TO_ADDR
// hc_noskilllimit := false ;
22311: LD_ADDR_OWVAR 76
22315: PUSH
22316: LD_INT 0
22318: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22319: LD_VAR 0 3
22323: PPUSH
22324: LD_INT 1
22326: PPUSH
22327: CALL_OW 51
// ToLua ( playRanger() ) ;
22331: LD_STRING playRanger()
22333: PPUSH
22334: CALL_OW 559
// p := 0 ;
22338: LD_ADDR_VAR 0 2
22342: PUSH
22343: LD_INT 0
22345: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22346: LD_INT 35
22348: PPUSH
22349: CALL_OW 67
// p := p + 1 ;
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_VAR 0 2
22362: PUSH
22363: LD_INT 1
22365: PLUS
22366: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22367: LD_VAR 0 3
22371: PPUSH
22372: CALL_OW 256
22376: PUSH
22377: LD_INT 1000
22379: LESS
22380: IFFALSE 22394
// SetLives ( un , 1000 ) ;
22382: LD_VAR 0 3
22386: PPUSH
22387: LD_INT 1000
22389: PPUSH
22390: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22394: LD_VAR 0 3
22398: PPUSH
22399: LD_INT 81
22401: PUSH
22402: LD_OWVAR 2
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 91
22413: PUSH
22414: LD_VAR 0 3
22418: PUSH
22419: LD_INT 30
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PPUSH
22431: CALL_OW 69
22435: PPUSH
22436: LD_VAR 0 3
22440: PPUSH
22441: CALL_OW 74
22445: PPUSH
22446: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22450: LD_VAR 0 2
22454: PUSH
22455: LD_INT 80
22457: GREATER
22458: PUSH
22459: LD_VAR 0 3
22463: PPUSH
22464: CALL_OW 301
22468: OR
22469: IFFALSE 22346
// if un then
22471: LD_VAR 0 3
22475: IFFALSE 22486
// RemoveUnit ( un ) ;
22477: LD_VAR 0 3
22481: PPUSH
22482: CALL_OW 64
// end ;
22486: PPOPN 3
22488: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22489: LD_EXP 98
22493: IFFALSE 22609
22495: GO 22497
22497: DISABLE
22498: LD_INT 0
22500: PPUSH
22501: PPUSH
22502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22503: LD_ADDR_VAR 0 2
22507: PUSH
22508: LD_INT 81
22510: PUSH
22511: LD_OWVAR 2
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 21
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PPUSH
22534: CALL_OW 69
22538: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22539: LD_STRING playComputer()
22541: PPUSH
22542: CALL_OW 559
// if not tmp then
22546: LD_VAR 0 2
22550: NOT
22551: IFFALSE 22555
// exit ;
22553: GO 22609
// for i in tmp do
22555: LD_ADDR_VAR 0 1
22559: PUSH
22560: LD_VAR 0 2
22564: PUSH
22565: FOR_IN
22566: IFFALSE 22607
// for j := 1 to 4 do
22568: LD_ADDR_VAR 0 3
22572: PUSH
22573: DOUBLE
22574: LD_INT 1
22576: DEC
22577: ST_TO_ADDR
22578: LD_INT 4
22580: PUSH
22581: FOR_TO
22582: IFFALSE 22603
// SetSkill ( i , j , 10 ) ;
22584: LD_VAR 0 1
22588: PPUSH
22589: LD_VAR 0 3
22593: PPUSH
22594: LD_INT 10
22596: PPUSH
22597: CALL_OW 237
22601: GO 22581
22603: POP
22604: POP
22605: GO 22565
22607: POP
22608: POP
// end ;
22609: PPOPN 3
22611: END
// every 0 0$1 trigger s30 do var i , tmp ;
22612: LD_EXP 99
22616: IFFALSE 22685
22618: GO 22620
22620: DISABLE
22621: LD_INT 0
22623: PPUSH
22624: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22625: LD_ADDR_VAR 0 2
22629: PUSH
22630: LD_INT 22
22632: PUSH
22633: LD_OWVAR 2
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PPUSH
22642: CALL_OW 69
22646: ST_TO_ADDR
// if not tmp then
22647: LD_VAR 0 2
22651: NOT
22652: IFFALSE 22656
// exit ;
22654: GO 22685
// for i in tmp do
22656: LD_ADDR_VAR 0 1
22660: PUSH
22661: LD_VAR 0 2
22665: PUSH
22666: FOR_IN
22667: IFFALSE 22683
// SetLives ( i , 300 ) ;
22669: LD_VAR 0 1
22673: PPUSH
22674: LD_INT 300
22676: PPUSH
22677: CALL_OW 234
22681: GO 22666
22683: POP
22684: POP
// end ;
22685: PPOPN 2
22687: END
// every 0 0$1 trigger s60 do var i , tmp ;
22688: LD_EXP 100
22692: IFFALSE 22761
22694: GO 22696
22696: DISABLE
22697: LD_INT 0
22699: PPUSH
22700: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22701: LD_ADDR_VAR 0 2
22705: PUSH
22706: LD_INT 22
22708: PUSH
22709: LD_OWVAR 2
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PPUSH
22718: CALL_OW 69
22722: ST_TO_ADDR
// if not tmp then
22723: LD_VAR 0 2
22727: NOT
22728: IFFALSE 22732
// exit ;
22730: GO 22761
// for i in tmp do
22732: LD_ADDR_VAR 0 1
22736: PUSH
22737: LD_VAR 0 2
22741: PUSH
22742: FOR_IN
22743: IFFALSE 22759
// SetLives ( i , 600 ) ;
22745: LD_VAR 0 1
22749: PPUSH
22750: LD_INT 600
22752: PPUSH
22753: CALL_OW 234
22757: GO 22742
22759: POP
22760: POP
// end ;
22761: PPOPN 2
22763: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22764: LD_INT 0
22766: PPUSH
// case cmd of 301 :
22767: LD_VAR 0 1
22771: PUSH
22772: LD_INT 301
22774: DOUBLE
22775: EQUAL
22776: IFTRUE 22780
22778: GO 22812
22780: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22781: LD_VAR 0 6
22785: PPUSH
22786: LD_VAR 0 7
22790: PPUSH
22791: LD_VAR 0 8
22795: PPUSH
22796: LD_VAR 0 4
22800: PPUSH
22801: LD_VAR 0 5
22805: PPUSH
22806: CALL 24013 0 5
22810: GO 22933
22812: LD_INT 302
22814: DOUBLE
22815: EQUAL
22816: IFTRUE 22820
22818: GO 22857
22820: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22821: LD_VAR 0 6
22825: PPUSH
22826: LD_VAR 0 7
22830: PPUSH
22831: LD_VAR 0 8
22835: PPUSH
22836: LD_VAR 0 9
22840: PPUSH
22841: LD_VAR 0 4
22845: PPUSH
22846: LD_VAR 0 5
22850: PPUSH
22851: CALL 24104 0 6
22855: GO 22933
22857: LD_INT 303
22859: DOUBLE
22860: EQUAL
22861: IFTRUE 22865
22863: GO 22902
22865: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22866: LD_VAR 0 6
22870: PPUSH
22871: LD_VAR 0 7
22875: PPUSH
22876: LD_VAR 0 8
22880: PPUSH
22881: LD_VAR 0 9
22885: PPUSH
22886: LD_VAR 0 4
22890: PPUSH
22891: LD_VAR 0 5
22895: PPUSH
22896: CALL 22938 0 6
22900: GO 22933
22902: LD_INT 304
22904: DOUBLE
22905: EQUAL
22906: IFTRUE 22910
22908: GO 22932
22910: POP
// hHackTeleport ( unit , x , y ) ; end ;
22911: LD_VAR 0 2
22915: PPUSH
22916: LD_VAR 0 4
22920: PPUSH
22921: LD_VAR 0 5
22925: PPUSH
22926: CALL 24697 0 3
22930: GO 22933
22932: POP
// end ;
22933: LD_VAR 0 12
22937: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22938: LD_INT 0
22940: PPUSH
22941: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22942: LD_VAR 0 1
22946: PUSH
22947: LD_INT 1
22949: LESS
22950: PUSH
22951: LD_VAR 0 1
22955: PUSH
22956: LD_INT 3
22958: GREATER
22959: OR
22960: PUSH
22961: LD_VAR 0 5
22965: PPUSH
22966: LD_VAR 0 6
22970: PPUSH
22971: CALL_OW 428
22975: OR
22976: IFFALSE 22980
// exit ;
22978: GO 23700
// uc_side := your_side ;
22980: LD_ADDR_OWVAR 20
22984: PUSH
22985: LD_OWVAR 2
22989: ST_TO_ADDR
// uc_nation := nation ;
22990: LD_ADDR_OWVAR 21
22994: PUSH
22995: LD_VAR 0 1
22999: ST_TO_ADDR
// bc_level = 1 ;
23000: LD_ADDR_OWVAR 43
23004: PUSH
23005: LD_INT 1
23007: ST_TO_ADDR
// case btype of 1 :
23008: LD_VAR 0 2
23012: PUSH
23013: LD_INT 1
23015: DOUBLE
23016: EQUAL
23017: IFTRUE 23021
23019: GO 23032
23021: POP
// bc_type := b_depot ; 2 :
23022: LD_ADDR_OWVAR 42
23026: PUSH
23027: LD_INT 0
23029: ST_TO_ADDR
23030: GO 23644
23032: LD_INT 2
23034: DOUBLE
23035: EQUAL
23036: IFTRUE 23040
23038: GO 23051
23040: POP
// bc_type := b_warehouse ; 3 :
23041: LD_ADDR_OWVAR 42
23045: PUSH
23046: LD_INT 1
23048: ST_TO_ADDR
23049: GO 23644
23051: LD_INT 3
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23070
23059: POP
// bc_type := b_lab ; 4 .. 9 :
23060: LD_ADDR_OWVAR 42
23064: PUSH
23065: LD_INT 6
23067: ST_TO_ADDR
23068: GO 23644
23070: LD_INT 4
23072: DOUBLE
23073: GREATEREQUAL
23074: IFFALSE 23082
23076: LD_INT 9
23078: DOUBLE
23079: LESSEQUAL
23080: IFTRUE 23084
23082: GO 23136
23084: POP
// begin bc_type := b_lab_half ;
23085: LD_ADDR_OWVAR 42
23089: PUSH
23090: LD_INT 7
23092: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23093: LD_ADDR_OWVAR 44
23097: PUSH
23098: LD_INT 10
23100: PUSH
23101: LD_INT 11
23103: PUSH
23104: LD_INT 12
23106: PUSH
23107: LD_INT 15
23109: PUSH
23110: LD_INT 14
23112: PUSH
23113: LD_INT 13
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: PUSH
23124: LD_VAR 0 2
23128: PUSH
23129: LD_INT 3
23131: MINUS
23132: ARRAY
23133: ST_TO_ADDR
// end ; 10 .. 13 :
23134: GO 23644
23136: LD_INT 10
23138: DOUBLE
23139: GREATEREQUAL
23140: IFFALSE 23148
23142: LD_INT 13
23144: DOUBLE
23145: LESSEQUAL
23146: IFTRUE 23150
23148: GO 23227
23150: POP
// begin bc_type := b_lab_full ;
23151: LD_ADDR_OWVAR 42
23155: PUSH
23156: LD_INT 8
23158: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23159: LD_ADDR_OWVAR 44
23163: PUSH
23164: LD_INT 10
23166: PUSH
23167: LD_INT 12
23169: PUSH
23170: LD_INT 14
23172: PUSH
23173: LD_INT 13
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: PUSH
23182: LD_VAR 0 2
23186: PUSH
23187: LD_INT 9
23189: MINUS
23190: ARRAY
23191: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23192: LD_ADDR_OWVAR 45
23196: PUSH
23197: LD_INT 11
23199: PUSH
23200: LD_INT 15
23202: PUSH
23203: LD_INT 12
23205: PUSH
23206: LD_INT 15
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: PUSH
23215: LD_VAR 0 2
23219: PUSH
23220: LD_INT 9
23222: MINUS
23223: ARRAY
23224: ST_TO_ADDR
// end ; 14 :
23225: GO 23644
23227: LD_INT 14
23229: DOUBLE
23230: EQUAL
23231: IFTRUE 23235
23233: GO 23246
23235: POP
// bc_type := b_workshop ; 15 :
23236: LD_ADDR_OWVAR 42
23240: PUSH
23241: LD_INT 2
23243: ST_TO_ADDR
23244: GO 23644
23246: LD_INT 15
23248: DOUBLE
23249: EQUAL
23250: IFTRUE 23254
23252: GO 23265
23254: POP
// bc_type := b_factory ; 16 :
23255: LD_ADDR_OWVAR 42
23259: PUSH
23260: LD_INT 3
23262: ST_TO_ADDR
23263: GO 23644
23265: LD_INT 16
23267: DOUBLE
23268: EQUAL
23269: IFTRUE 23273
23271: GO 23284
23273: POP
// bc_type := b_ext_gun ; 17 :
23274: LD_ADDR_OWVAR 42
23278: PUSH
23279: LD_INT 17
23281: ST_TO_ADDR
23282: GO 23644
23284: LD_INT 17
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23320
23292: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23293: LD_ADDR_OWVAR 42
23297: PUSH
23298: LD_INT 19
23300: PUSH
23301: LD_INT 23
23303: PUSH
23304: LD_INT 19
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: PUSH
23312: LD_VAR 0 1
23316: ARRAY
23317: ST_TO_ADDR
23318: GO 23644
23320: LD_INT 18
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 23339
23328: POP
// bc_type := b_ext_radar ; 19 :
23329: LD_ADDR_OWVAR 42
23333: PUSH
23334: LD_INT 20
23336: ST_TO_ADDR
23337: GO 23644
23339: LD_INT 19
23341: DOUBLE
23342: EQUAL
23343: IFTRUE 23347
23345: GO 23358
23347: POP
// bc_type := b_ext_radio ; 20 :
23348: LD_ADDR_OWVAR 42
23352: PUSH
23353: LD_INT 22
23355: ST_TO_ADDR
23356: GO 23644
23358: LD_INT 20
23360: DOUBLE
23361: EQUAL
23362: IFTRUE 23366
23364: GO 23377
23366: POP
// bc_type := b_ext_siberium ; 21 :
23367: LD_ADDR_OWVAR 42
23371: PUSH
23372: LD_INT 21
23374: ST_TO_ADDR
23375: GO 23644
23377: LD_INT 21
23379: DOUBLE
23380: EQUAL
23381: IFTRUE 23385
23383: GO 23396
23385: POP
// bc_type := b_ext_computer ; 22 :
23386: LD_ADDR_OWVAR 42
23390: PUSH
23391: LD_INT 24
23393: ST_TO_ADDR
23394: GO 23644
23396: LD_INT 22
23398: DOUBLE
23399: EQUAL
23400: IFTRUE 23404
23402: GO 23415
23404: POP
// bc_type := b_ext_track ; 23 :
23405: LD_ADDR_OWVAR 42
23409: PUSH
23410: LD_INT 16
23412: ST_TO_ADDR
23413: GO 23644
23415: LD_INT 23
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 23434
23423: POP
// bc_type := b_ext_laser ; 24 :
23424: LD_ADDR_OWVAR 42
23428: PUSH
23429: LD_INT 25
23431: ST_TO_ADDR
23432: GO 23644
23434: LD_INT 24
23436: DOUBLE
23437: EQUAL
23438: IFTRUE 23442
23440: GO 23453
23442: POP
// bc_type := b_control_tower ; 25 :
23443: LD_ADDR_OWVAR 42
23447: PUSH
23448: LD_INT 36
23450: ST_TO_ADDR
23451: GO 23644
23453: LD_INT 25
23455: DOUBLE
23456: EQUAL
23457: IFTRUE 23461
23459: GO 23472
23461: POP
// bc_type := b_breastwork ; 26 :
23462: LD_ADDR_OWVAR 42
23466: PUSH
23467: LD_INT 31
23469: ST_TO_ADDR
23470: GO 23644
23472: LD_INT 26
23474: DOUBLE
23475: EQUAL
23476: IFTRUE 23480
23478: GO 23491
23480: POP
// bc_type := b_bunker ; 27 :
23481: LD_ADDR_OWVAR 42
23485: PUSH
23486: LD_INT 32
23488: ST_TO_ADDR
23489: GO 23644
23491: LD_INT 27
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 23510
23499: POP
// bc_type := b_turret ; 28 :
23500: LD_ADDR_OWVAR 42
23504: PUSH
23505: LD_INT 33
23507: ST_TO_ADDR
23508: GO 23644
23510: LD_INT 28
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23518
23516: GO 23529
23518: POP
// bc_type := b_armoury ; 29 :
23519: LD_ADDR_OWVAR 42
23523: PUSH
23524: LD_INT 4
23526: ST_TO_ADDR
23527: GO 23644
23529: LD_INT 29
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23548
23537: POP
// bc_type := b_barracks ; 30 :
23538: LD_ADDR_OWVAR 42
23542: PUSH
23543: LD_INT 5
23545: ST_TO_ADDR
23546: GO 23644
23548: LD_INT 30
23550: DOUBLE
23551: EQUAL
23552: IFTRUE 23556
23554: GO 23567
23556: POP
// bc_type := b_solar_power ; 31 :
23557: LD_ADDR_OWVAR 42
23561: PUSH
23562: LD_INT 27
23564: ST_TO_ADDR
23565: GO 23644
23567: LD_INT 31
23569: DOUBLE
23570: EQUAL
23571: IFTRUE 23575
23573: GO 23586
23575: POP
// bc_type := b_oil_power ; 32 :
23576: LD_ADDR_OWVAR 42
23580: PUSH
23581: LD_INT 26
23583: ST_TO_ADDR
23584: GO 23644
23586: LD_INT 32
23588: DOUBLE
23589: EQUAL
23590: IFTRUE 23594
23592: GO 23605
23594: POP
// bc_type := b_siberite_power ; 33 :
23595: LD_ADDR_OWVAR 42
23599: PUSH
23600: LD_INT 28
23602: ST_TO_ADDR
23603: GO 23644
23605: LD_INT 33
23607: DOUBLE
23608: EQUAL
23609: IFTRUE 23613
23611: GO 23624
23613: POP
// bc_type := b_oil_mine ; 34 :
23614: LD_ADDR_OWVAR 42
23618: PUSH
23619: LD_INT 29
23621: ST_TO_ADDR
23622: GO 23644
23624: LD_INT 34
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23632
23630: GO 23643
23632: POP
// bc_type := b_siberite_mine ; end ;
23633: LD_ADDR_OWVAR 42
23637: PUSH
23638: LD_INT 30
23640: ST_TO_ADDR
23641: GO 23644
23643: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23644: LD_ADDR_VAR 0 8
23648: PUSH
23649: LD_VAR 0 5
23653: PPUSH
23654: LD_VAR 0 6
23658: PPUSH
23659: LD_VAR 0 3
23663: PPUSH
23664: CALL_OW 47
23668: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23669: LD_OWVAR 42
23673: PUSH
23674: LD_INT 32
23676: PUSH
23677: LD_INT 33
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: IN
23684: IFFALSE 23700
// PlaceWeaponTurret ( b , weapon ) ;
23686: LD_VAR 0 8
23690: PPUSH
23691: LD_VAR 0 4
23695: PPUSH
23696: CALL_OW 431
// end ;
23700: LD_VAR 0 7
23704: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23705: LD_INT 0
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23711: LD_ADDR_VAR 0 4
23715: PUSH
23716: LD_INT 22
23718: PUSH
23719: LD_OWVAR 2
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: LD_INT 30
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 30
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PPUSH
23760: CALL_OW 69
23764: ST_TO_ADDR
// if not tmp then
23765: LD_VAR 0 4
23769: NOT
23770: IFFALSE 23774
// exit ;
23772: GO 23833
// for i in tmp do
23774: LD_ADDR_VAR 0 2
23778: PUSH
23779: LD_VAR 0 4
23783: PUSH
23784: FOR_IN
23785: IFFALSE 23831
// for j = 1 to 3 do
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: DOUBLE
23793: LD_INT 1
23795: DEC
23796: ST_TO_ADDR
23797: LD_INT 3
23799: PUSH
23800: FOR_TO
23801: IFFALSE 23827
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23803: LD_VAR 0 2
23807: PPUSH
23808: CALL_OW 274
23812: PPUSH
23813: LD_VAR 0 3
23817: PPUSH
23818: LD_INT 99999
23820: PPUSH
23821: CALL_OW 277
23825: GO 23800
23827: POP
23828: POP
23829: GO 23784
23831: POP
23832: POP
// end ;
23833: LD_VAR 0 1
23837: RET
// export function hHackSetLevel10 ; var i , j ; begin
23838: LD_INT 0
23840: PPUSH
23841: PPUSH
23842: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23843: LD_ADDR_VAR 0 2
23847: PUSH
23848: LD_INT 21
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PPUSH
23858: CALL_OW 69
23862: PUSH
23863: FOR_IN
23864: IFFALSE 23916
// if IsSelected ( i ) then
23866: LD_VAR 0 2
23870: PPUSH
23871: CALL_OW 306
23875: IFFALSE 23914
// begin for j := 1 to 4 do
23877: LD_ADDR_VAR 0 3
23881: PUSH
23882: DOUBLE
23883: LD_INT 1
23885: DEC
23886: ST_TO_ADDR
23887: LD_INT 4
23889: PUSH
23890: FOR_TO
23891: IFFALSE 23912
// SetSkill ( i , j , 10 ) ;
23893: LD_VAR 0 2
23897: PPUSH
23898: LD_VAR 0 3
23902: PPUSH
23903: LD_INT 10
23905: PPUSH
23906: CALL_OW 237
23910: GO 23890
23912: POP
23913: POP
// end ;
23914: GO 23863
23916: POP
23917: POP
// end ;
23918: LD_VAR 0 1
23922: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23923: LD_INT 0
23925: PPUSH
23926: PPUSH
23927: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23928: LD_ADDR_VAR 0 2
23932: PUSH
23933: LD_INT 22
23935: PUSH
23936: LD_OWVAR 2
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 21
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PPUSH
23959: CALL_OW 69
23963: PUSH
23964: FOR_IN
23965: IFFALSE 24006
// begin for j := 1 to 4 do
23967: LD_ADDR_VAR 0 3
23971: PUSH
23972: DOUBLE
23973: LD_INT 1
23975: DEC
23976: ST_TO_ADDR
23977: LD_INT 4
23979: PUSH
23980: FOR_TO
23981: IFFALSE 24002
// SetSkill ( i , j , 10 ) ;
23983: LD_VAR 0 2
23987: PPUSH
23988: LD_VAR 0 3
23992: PPUSH
23993: LD_INT 10
23995: PPUSH
23996: CALL_OW 237
24000: GO 23980
24002: POP
24003: POP
// end ;
24004: GO 23964
24006: POP
24007: POP
// end ;
24008: LD_VAR 0 1
24012: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24013: LD_INT 0
24015: PPUSH
// uc_side := your_side ;
24016: LD_ADDR_OWVAR 20
24020: PUSH
24021: LD_OWVAR 2
24025: ST_TO_ADDR
// uc_nation := nation ;
24026: LD_ADDR_OWVAR 21
24030: PUSH
24031: LD_VAR 0 1
24035: ST_TO_ADDR
// InitHc ;
24036: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24040: LD_INT 0
24042: PPUSH
24043: LD_VAR 0 2
24047: PPUSH
24048: LD_VAR 0 3
24052: PPUSH
24053: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24057: LD_VAR 0 4
24061: PPUSH
24062: LD_VAR 0 5
24066: PPUSH
24067: CALL_OW 428
24071: PUSH
24072: LD_INT 0
24074: EQUAL
24075: IFFALSE 24099
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24077: CALL_OW 44
24081: PPUSH
24082: LD_VAR 0 4
24086: PPUSH
24087: LD_VAR 0 5
24091: PPUSH
24092: LD_INT 1
24094: PPUSH
24095: CALL_OW 48
// end ;
24099: LD_VAR 0 6
24103: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24104: LD_INT 0
24106: PPUSH
24107: PPUSH
// uc_side := your_side ;
24108: LD_ADDR_OWVAR 20
24112: PUSH
24113: LD_OWVAR 2
24117: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24118: LD_VAR 0 1
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 4
24134: PUSH
24135: LD_INT 5
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: IN
24145: IFFALSE 24157
// uc_nation := nation_american else
24147: LD_ADDR_OWVAR 21
24151: PUSH
24152: LD_INT 1
24154: ST_TO_ADDR
24155: GO 24200
// if chassis in [ 11 , 12 , 13 , 14 ] then
24157: LD_VAR 0 1
24161: PUSH
24162: LD_INT 11
24164: PUSH
24165: LD_INT 12
24167: PUSH
24168: LD_INT 13
24170: PUSH
24171: LD_INT 14
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: IN
24180: IFFALSE 24192
// uc_nation := nation_arabian else
24182: LD_ADDR_OWVAR 21
24186: PUSH
24187: LD_INT 2
24189: ST_TO_ADDR
24190: GO 24200
// uc_nation := nation_russian ;
24192: LD_ADDR_OWVAR 21
24196: PUSH
24197: LD_INT 3
24199: ST_TO_ADDR
// vc_chassis := chassis ;
24200: LD_ADDR_OWVAR 37
24204: PUSH
24205: LD_VAR 0 1
24209: ST_TO_ADDR
// vc_engine := engine ;
24210: LD_ADDR_OWVAR 39
24214: PUSH
24215: LD_VAR 0 2
24219: ST_TO_ADDR
// vc_control := control ;
24220: LD_ADDR_OWVAR 38
24224: PUSH
24225: LD_VAR 0 3
24229: ST_TO_ADDR
// vc_weapon := weapon ;
24230: LD_ADDR_OWVAR 40
24234: PUSH
24235: LD_VAR 0 4
24239: ST_TO_ADDR
// un := CreateVehicle ;
24240: LD_ADDR_VAR 0 8
24244: PUSH
24245: CALL_OW 45
24249: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24250: LD_VAR 0 8
24254: PPUSH
24255: LD_INT 0
24257: PPUSH
24258: LD_INT 5
24260: PPUSH
24261: CALL_OW 12
24265: PPUSH
24266: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24270: LD_VAR 0 8
24274: PPUSH
24275: LD_VAR 0 5
24279: PPUSH
24280: LD_VAR 0 6
24284: PPUSH
24285: LD_INT 1
24287: PPUSH
24288: CALL_OW 48
// end ;
24292: LD_VAR 0 7
24296: RET
// export hInvincible ; every 1 do
24297: GO 24299
24299: DISABLE
// hInvincible := [ ] ;
24300: LD_ADDR_EXP 101
24304: PUSH
24305: EMPTY
24306: ST_TO_ADDR
24307: END
// every 10 do var i ;
24308: GO 24310
24310: DISABLE
24311: LD_INT 0
24313: PPUSH
// begin enable ;
24314: ENABLE
// if not hInvincible then
24315: LD_EXP 101
24319: NOT
24320: IFFALSE 24324
// exit ;
24322: GO 24368
// for i in hInvincible do
24324: LD_ADDR_VAR 0 1
24328: PUSH
24329: LD_EXP 101
24333: PUSH
24334: FOR_IN
24335: IFFALSE 24366
// if GetLives ( i ) < 1000 then
24337: LD_VAR 0 1
24341: PPUSH
24342: CALL_OW 256
24346: PUSH
24347: LD_INT 1000
24349: LESS
24350: IFFALSE 24364
// SetLives ( i , 1000 ) ;
24352: LD_VAR 0 1
24356: PPUSH
24357: LD_INT 1000
24359: PPUSH
24360: CALL_OW 234
24364: GO 24334
24366: POP
24367: POP
// end ;
24368: PPOPN 1
24370: END
// export function hHackInvincible ; var i ; begin
24371: LD_INT 0
24373: PPUSH
24374: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24375: LD_ADDR_VAR 0 2
24379: PUSH
24380: LD_INT 2
24382: PUSH
24383: LD_INT 21
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 21
24395: PUSH
24396: LD_INT 2
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: LIST
24407: PPUSH
24408: CALL_OW 69
24412: PUSH
24413: FOR_IN
24414: IFFALSE 24475
// if IsSelected ( i ) then
24416: LD_VAR 0 2
24420: PPUSH
24421: CALL_OW 306
24425: IFFALSE 24473
// begin if i in hInvincible then
24427: LD_VAR 0 2
24431: PUSH
24432: LD_EXP 101
24436: IN
24437: IFFALSE 24457
// hInvincible := hInvincible diff i else
24439: LD_ADDR_EXP 101
24443: PUSH
24444: LD_EXP 101
24448: PUSH
24449: LD_VAR 0 2
24453: DIFF
24454: ST_TO_ADDR
24455: GO 24473
// hInvincible := hInvincible union i ;
24457: LD_ADDR_EXP 101
24461: PUSH
24462: LD_EXP 101
24466: PUSH
24467: LD_VAR 0 2
24471: UNION
24472: ST_TO_ADDR
// end ;
24473: GO 24413
24475: POP
24476: POP
// end ;
24477: LD_VAR 0 1
24481: RET
// export function hHackInvisible ; var i , j ; begin
24482: LD_INT 0
24484: PPUSH
24485: PPUSH
24486: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24487: LD_ADDR_VAR 0 2
24491: PUSH
24492: LD_INT 21
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PPUSH
24502: CALL_OW 69
24506: PUSH
24507: FOR_IN
24508: IFFALSE 24532
// if IsSelected ( i ) then
24510: LD_VAR 0 2
24514: PPUSH
24515: CALL_OW 306
24519: IFFALSE 24530
// ComForceInvisible ( i ) ;
24521: LD_VAR 0 2
24525: PPUSH
24526: CALL_OW 496
24530: GO 24507
24532: POP
24533: POP
// end ;
24534: LD_VAR 0 1
24538: RET
// export function hHackChangeYourSide ; begin
24539: LD_INT 0
24541: PPUSH
// if your_side = 8 then
24542: LD_OWVAR 2
24546: PUSH
24547: LD_INT 8
24549: EQUAL
24550: IFFALSE 24562
// your_side := 0 else
24552: LD_ADDR_OWVAR 2
24556: PUSH
24557: LD_INT 0
24559: ST_TO_ADDR
24560: GO 24576
// your_side := your_side + 1 ;
24562: LD_ADDR_OWVAR 2
24566: PUSH
24567: LD_OWVAR 2
24571: PUSH
24572: LD_INT 1
24574: PLUS
24575: ST_TO_ADDR
// end ;
24576: LD_VAR 0 1
24580: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24581: LD_INT 0
24583: PPUSH
24584: PPUSH
24585: PPUSH
// for i in all_units do
24586: LD_ADDR_VAR 0 2
24590: PUSH
24591: LD_OWVAR 3
24595: PUSH
24596: FOR_IN
24597: IFFALSE 24675
// if IsSelected ( i ) then
24599: LD_VAR 0 2
24603: PPUSH
24604: CALL_OW 306
24608: IFFALSE 24673
// begin j := GetSide ( i ) ;
24610: LD_ADDR_VAR 0 3
24614: PUSH
24615: LD_VAR 0 2
24619: PPUSH
24620: CALL_OW 255
24624: ST_TO_ADDR
// if j = 8 then
24625: LD_VAR 0 3
24629: PUSH
24630: LD_INT 8
24632: EQUAL
24633: IFFALSE 24645
// j := 0 else
24635: LD_ADDR_VAR 0 3
24639: PUSH
24640: LD_INT 0
24642: ST_TO_ADDR
24643: GO 24659
// j := j + 1 ;
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_VAR 0 3
24654: PUSH
24655: LD_INT 1
24657: PLUS
24658: ST_TO_ADDR
// SetSide ( i , j ) ;
24659: LD_VAR 0 2
24663: PPUSH
24664: LD_VAR 0 3
24668: PPUSH
24669: CALL_OW 235
// end ;
24673: GO 24596
24675: POP
24676: POP
// end ;
24677: LD_VAR 0 1
24681: RET
// export function hHackFog ; begin
24682: LD_INT 0
24684: PPUSH
// FogOff ( true ) ;
24685: LD_INT 1
24687: PPUSH
24688: CALL_OW 344
// end ;
24692: LD_VAR 0 1
24696: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24697: LD_INT 0
24699: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24700: LD_VAR 0 1
24704: PPUSH
24705: LD_VAR 0 2
24709: PPUSH
24710: LD_VAR 0 3
24714: PPUSH
24715: LD_INT 1
24717: PPUSH
24718: LD_INT 1
24720: PPUSH
24721: CALL_OW 483
// CenterOnXY ( x , y ) ;
24725: LD_VAR 0 2
24729: PPUSH
24730: LD_VAR 0 3
24734: PPUSH
24735: CALL_OW 84
// end ;
24739: LD_VAR 0 4
24743: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24744: LD_INT 0
24746: PPUSH
24747: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24748: LD_VAR 0 1
24752: NOT
24753: PUSH
24754: LD_VAR 0 2
24758: PPUSH
24759: LD_VAR 0 3
24763: PPUSH
24764: CALL_OW 488
24768: NOT
24769: OR
24770: PUSH
24771: LD_VAR 0 1
24775: PPUSH
24776: CALL_OW 266
24780: PUSH
24781: LD_INT 3
24783: NONEQUAL
24784: PUSH
24785: LD_VAR 0 1
24789: PPUSH
24790: CALL_OW 247
24794: PUSH
24795: LD_INT 1
24797: EQUAL
24798: NOT
24799: AND
24800: OR
24801: IFFALSE 24805
// exit ;
24803: GO 24954
// if GetType ( factory ) = unit_human then
24805: LD_VAR 0 1
24809: PPUSH
24810: CALL_OW 247
24814: PUSH
24815: LD_INT 1
24817: EQUAL
24818: IFFALSE 24835
// factory := IsInUnit ( factory ) ;
24820: LD_ADDR_VAR 0 1
24824: PUSH
24825: LD_VAR 0 1
24829: PPUSH
24830: CALL_OW 310
24834: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24835: LD_VAR 0 1
24839: PPUSH
24840: CALL_OW 266
24844: PUSH
24845: LD_INT 3
24847: NONEQUAL
24848: IFFALSE 24852
// exit ;
24850: GO 24954
// if HexInfo ( x , y ) = factory then
24852: LD_VAR 0 2
24856: PPUSH
24857: LD_VAR 0 3
24861: PPUSH
24862: CALL_OW 428
24866: PUSH
24867: LD_VAR 0 1
24871: EQUAL
24872: IFFALSE 24899
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24874: LD_ADDR_EXP 102
24878: PUSH
24879: LD_EXP 102
24883: PPUSH
24884: LD_VAR 0 1
24888: PPUSH
24889: LD_INT 0
24891: PPUSH
24892: CALL_OW 1
24896: ST_TO_ADDR
24897: GO 24950
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24899: LD_ADDR_EXP 102
24903: PUSH
24904: LD_EXP 102
24908: PPUSH
24909: LD_VAR 0 1
24913: PPUSH
24914: LD_VAR 0 1
24918: PPUSH
24919: CALL_OW 255
24923: PUSH
24924: LD_VAR 0 1
24928: PUSH
24929: LD_VAR 0 2
24933: PUSH
24934: LD_VAR 0 3
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: PPUSH
24945: CALL_OW 1
24949: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24950: CALL 24959 0 0
// end ;
24954: LD_VAR 0 4
24958: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24959: LD_INT 0
24961: PPUSH
24962: PPUSH
24963: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24964: LD_STRING resetFactoryWaypoint();
24966: PPUSH
24967: CALL_OW 559
// if factoryWaypoints then
24971: LD_EXP 102
24975: IFFALSE 25101
// begin list := PrepareArray ( factoryWaypoints ) ;
24977: LD_ADDR_VAR 0 3
24981: PUSH
24982: LD_EXP 102
24986: PPUSH
24987: CALL 71733 0 1
24991: ST_TO_ADDR
// for i := 1 to list do
24992: LD_ADDR_VAR 0 2
24996: PUSH
24997: DOUBLE
24998: LD_INT 1
25000: DEC
25001: ST_TO_ADDR
25002: LD_VAR 0 3
25006: PUSH
25007: FOR_TO
25008: IFFALSE 25099
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25010: LD_STRING setFactoryWaypointXY(
25012: PUSH
25013: LD_VAR 0 3
25017: PUSH
25018: LD_VAR 0 2
25022: ARRAY
25023: PUSH
25024: LD_INT 1
25026: ARRAY
25027: STR
25028: PUSH
25029: LD_STRING ,
25031: STR
25032: PUSH
25033: LD_VAR 0 3
25037: PUSH
25038: LD_VAR 0 2
25042: ARRAY
25043: PUSH
25044: LD_INT 2
25046: ARRAY
25047: STR
25048: PUSH
25049: LD_STRING ,
25051: STR
25052: PUSH
25053: LD_VAR 0 3
25057: PUSH
25058: LD_VAR 0 2
25062: ARRAY
25063: PUSH
25064: LD_INT 3
25066: ARRAY
25067: STR
25068: PUSH
25069: LD_STRING ,
25071: STR
25072: PUSH
25073: LD_VAR 0 3
25077: PUSH
25078: LD_VAR 0 2
25082: ARRAY
25083: PUSH
25084: LD_INT 4
25086: ARRAY
25087: STR
25088: PUSH
25089: LD_STRING )
25091: STR
25092: PPUSH
25093: CALL_OW 559
25097: GO 25007
25099: POP
25100: POP
// end ; end ;
25101: LD_VAR 0 1
25105: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25106: LD_INT 0
25108: PPUSH
// if HexInfo ( x , y ) = warehouse then
25109: LD_VAR 0 2
25113: PPUSH
25114: LD_VAR 0 3
25118: PPUSH
25119: CALL_OW 428
25123: PUSH
25124: LD_VAR 0 1
25128: EQUAL
25129: IFFALSE 25156
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25131: LD_ADDR_EXP 103
25135: PUSH
25136: LD_EXP 103
25140: PPUSH
25141: LD_VAR 0 1
25145: PPUSH
25146: LD_INT 0
25148: PPUSH
25149: CALL_OW 1
25153: ST_TO_ADDR
25154: GO 25207
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25156: LD_ADDR_EXP 103
25160: PUSH
25161: LD_EXP 103
25165: PPUSH
25166: LD_VAR 0 1
25170: PPUSH
25171: LD_VAR 0 1
25175: PPUSH
25176: CALL_OW 255
25180: PUSH
25181: LD_VAR 0 1
25185: PUSH
25186: LD_VAR 0 2
25190: PUSH
25191: LD_VAR 0 3
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 1
25206: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25207: CALL 25216 0 0
// end ;
25211: LD_VAR 0 4
25215: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25216: LD_INT 0
25218: PPUSH
25219: PPUSH
25220: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25221: LD_STRING resetWarehouseGatheringPoints();
25223: PPUSH
25224: CALL_OW 559
// if warehouseGatheringPoints then
25228: LD_EXP 103
25232: IFFALSE 25358
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25234: LD_ADDR_VAR 0 3
25238: PUSH
25239: LD_EXP 103
25243: PPUSH
25244: CALL 71733 0 1
25248: ST_TO_ADDR
// for i := 1 to list do
25249: LD_ADDR_VAR 0 2
25253: PUSH
25254: DOUBLE
25255: LD_INT 1
25257: DEC
25258: ST_TO_ADDR
25259: LD_VAR 0 3
25263: PUSH
25264: FOR_TO
25265: IFFALSE 25356
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25267: LD_STRING setWarehouseGatheringPointXY(
25269: PUSH
25270: LD_VAR 0 3
25274: PUSH
25275: LD_VAR 0 2
25279: ARRAY
25280: PUSH
25281: LD_INT 1
25283: ARRAY
25284: STR
25285: PUSH
25286: LD_STRING ,
25288: STR
25289: PUSH
25290: LD_VAR 0 3
25294: PUSH
25295: LD_VAR 0 2
25299: ARRAY
25300: PUSH
25301: LD_INT 2
25303: ARRAY
25304: STR
25305: PUSH
25306: LD_STRING ,
25308: STR
25309: PUSH
25310: LD_VAR 0 3
25314: PUSH
25315: LD_VAR 0 2
25319: ARRAY
25320: PUSH
25321: LD_INT 3
25323: ARRAY
25324: STR
25325: PUSH
25326: LD_STRING ,
25328: STR
25329: PUSH
25330: LD_VAR 0 3
25334: PUSH
25335: LD_VAR 0 2
25339: ARRAY
25340: PUSH
25341: LD_INT 4
25343: ARRAY
25344: STR
25345: PUSH
25346: LD_STRING )
25348: STR
25349: PPUSH
25350: CALL_OW 559
25354: GO 25264
25356: POP
25357: POP
// end ; end ;
25358: LD_VAR 0 1
25362: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25363: LD_EXP 103
25367: IFFALSE 26052
25369: GO 25371
25371: DISABLE
25372: LD_INT 0
25374: PPUSH
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
// begin enable ;
25383: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25384: LD_ADDR_VAR 0 3
25388: PUSH
25389: LD_EXP 103
25393: PPUSH
25394: CALL 71733 0 1
25398: ST_TO_ADDR
// if not list then
25399: LD_VAR 0 3
25403: NOT
25404: IFFALSE 25408
// exit ;
25406: GO 26052
// for i := 1 to list do
25408: LD_ADDR_VAR 0 1
25412: PUSH
25413: DOUBLE
25414: LD_INT 1
25416: DEC
25417: ST_TO_ADDR
25418: LD_VAR 0 3
25422: PUSH
25423: FOR_TO
25424: IFFALSE 26050
// begin depot := list [ i ] [ 2 ] ;
25426: LD_ADDR_VAR 0 8
25430: PUSH
25431: LD_VAR 0 3
25435: PUSH
25436: LD_VAR 0 1
25440: ARRAY
25441: PUSH
25442: LD_INT 2
25444: ARRAY
25445: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25446: LD_ADDR_VAR 0 5
25450: PUSH
25451: LD_VAR 0 3
25455: PUSH
25456: LD_VAR 0 1
25460: ARRAY
25461: PUSH
25462: LD_INT 1
25464: ARRAY
25465: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25466: LD_VAR 0 8
25470: PPUSH
25471: CALL_OW 301
25475: PUSH
25476: LD_VAR 0 5
25480: PUSH
25481: LD_VAR 0 8
25485: PPUSH
25486: CALL_OW 255
25490: NONEQUAL
25491: OR
25492: IFFALSE 25521
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25494: LD_ADDR_EXP 103
25498: PUSH
25499: LD_EXP 103
25503: PPUSH
25504: LD_VAR 0 8
25508: PPUSH
25509: LD_INT 0
25511: PPUSH
25512: CALL_OW 1
25516: ST_TO_ADDR
// exit ;
25517: POP
25518: POP
25519: GO 26052
// end ; x := list [ i ] [ 3 ] ;
25521: LD_ADDR_VAR 0 6
25525: PUSH
25526: LD_VAR 0 3
25530: PUSH
25531: LD_VAR 0 1
25535: ARRAY
25536: PUSH
25537: LD_INT 3
25539: ARRAY
25540: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25541: LD_ADDR_VAR 0 7
25545: PUSH
25546: LD_VAR 0 3
25550: PUSH
25551: LD_VAR 0 1
25555: ARRAY
25556: PUSH
25557: LD_INT 4
25559: ARRAY
25560: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25561: LD_ADDR_VAR 0 9
25565: PUSH
25566: LD_VAR 0 6
25570: PPUSH
25571: LD_VAR 0 7
25575: PPUSH
25576: LD_INT 16
25578: PPUSH
25579: CALL 70321 0 3
25583: ST_TO_ADDR
// if not cratesNearbyPoint then
25584: LD_VAR 0 9
25588: NOT
25589: IFFALSE 25595
// exit ;
25591: POP
25592: POP
25593: GO 26052
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25595: LD_ADDR_VAR 0 4
25599: PUSH
25600: LD_INT 22
25602: PUSH
25603: LD_VAR 0 5
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 3
25614: PUSH
25615: LD_INT 60
25617: PUSH
25618: EMPTY
25619: LIST
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 91
25627: PUSH
25628: LD_VAR 0 8
25632: PUSH
25633: LD_INT 6
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: LD_INT 25
25646: PUSH
25647: LD_INT 2
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 25
25656: PUSH
25657: LD_INT 16
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: LIST
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: PPUSH
25675: CALL_OW 69
25679: PUSH
25680: LD_VAR 0 8
25684: PPUSH
25685: CALL_OW 313
25689: PPUSH
25690: LD_INT 3
25692: PUSH
25693: LD_INT 60
25695: PUSH
25696: EMPTY
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 25
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 25
25718: PUSH
25719: LD_INT 16
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PPUSH
25735: CALL_OW 72
25739: UNION
25740: ST_TO_ADDR
// if tmp then
25741: LD_VAR 0 4
25745: IFFALSE 25825
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25747: LD_ADDR_VAR 0 4
25751: PUSH
25752: LD_VAR 0 4
25756: PPUSH
25757: LD_INT 3
25759: PPUSH
25760: CALL 68290 0 2
25764: ST_TO_ADDR
// for j in tmp do
25765: LD_ADDR_VAR 0 2
25769: PUSH
25770: LD_VAR 0 4
25774: PUSH
25775: FOR_IN
25776: IFFALSE 25819
// begin if IsInUnit ( j ) then
25778: LD_VAR 0 2
25782: PPUSH
25783: CALL_OW 310
25787: IFFALSE 25798
// ComExit ( j ) ;
25789: LD_VAR 0 2
25793: PPUSH
25794: CALL 68373 0 1
// AddComCollect ( j , x , y ) ;
25798: LD_VAR 0 2
25802: PPUSH
25803: LD_VAR 0 6
25807: PPUSH
25808: LD_VAR 0 7
25812: PPUSH
25813: CALL_OW 177
// end ;
25817: GO 25775
25819: POP
25820: POP
// exit ;
25821: POP
25822: POP
25823: GO 26052
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25825: LD_ADDR_VAR 0 4
25829: PUSH
25830: LD_INT 22
25832: PUSH
25833: LD_VAR 0 5
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 91
25844: PUSH
25845: LD_VAR 0 8
25849: PUSH
25850: LD_INT 8
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 2
25860: PUSH
25861: LD_INT 34
25863: PUSH
25864: LD_INT 12
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 34
25873: PUSH
25874: LD_INT 51
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 34
25883: PUSH
25884: LD_INT 32
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 34
25893: PUSH
25894: LD_INT 89
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: PPUSH
25913: CALL_OW 69
25917: ST_TO_ADDR
// if tmp then
25918: LD_VAR 0 4
25922: IFFALSE 26048
// begin for j in tmp do
25924: LD_ADDR_VAR 0 2
25928: PUSH
25929: LD_VAR 0 4
25933: PUSH
25934: FOR_IN
25935: IFFALSE 26046
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25937: LD_VAR 0 2
25941: PPUSH
25942: CALL_OW 262
25946: PUSH
25947: LD_INT 3
25949: EQUAL
25950: PUSH
25951: LD_VAR 0 2
25955: PPUSH
25956: CALL_OW 261
25960: PUSH
25961: LD_INT 20
25963: GREATER
25964: OR
25965: PUSH
25966: LD_VAR 0 2
25970: PPUSH
25971: CALL_OW 314
25975: NOT
25976: AND
25977: PUSH
25978: LD_VAR 0 2
25982: PPUSH
25983: CALL_OW 263
25987: PUSH
25988: LD_INT 1
25990: NONEQUAL
25991: PUSH
25992: LD_VAR 0 2
25996: PPUSH
25997: CALL_OW 311
26001: OR
26002: AND
26003: IFFALSE 26044
// begin ComCollect ( j , x , y ) ;
26005: LD_VAR 0 2
26009: PPUSH
26010: LD_VAR 0 6
26014: PPUSH
26015: LD_VAR 0 7
26019: PPUSH
26020: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26024: LD_VAR 0 2
26028: PPUSH
26029: LD_VAR 0 8
26033: PPUSH
26034: CALL_OW 172
// exit ;
26038: POP
26039: POP
26040: POP
26041: POP
26042: GO 26052
// end ;
26044: GO 25934
26046: POP
26047: POP
// end ; end ;
26048: GO 25423
26050: POP
26051: POP
// end ; end_of_file
26052: PPOPN 9
26054: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26055: LD_VAR 0 1
26059: PUSH
26060: LD_INT 200
26062: DOUBLE
26063: GREATEREQUAL
26064: IFFALSE 26072
26066: LD_INT 299
26068: DOUBLE
26069: LESSEQUAL
26070: IFTRUE 26074
26072: GO 26106
26074: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26075: LD_VAR 0 1
26079: PPUSH
26080: LD_VAR 0 2
26084: PPUSH
26085: LD_VAR 0 3
26089: PPUSH
26090: LD_VAR 0 4
26094: PPUSH
26095: LD_VAR 0 5
26099: PPUSH
26100: CALL 26594 0 5
26104: GO 26183
26106: LD_INT 300
26108: DOUBLE
26109: GREATEREQUAL
26110: IFFALSE 26118
26112: LD_INT 399
26114: DOUBLE
26115: LESSEQUAL
26116: IFTRUE 26120
26118: GO 26182
26120: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26121: LD_VAR 0 1
26125: PPUSH
26126: LD_VAR 0 2
26130: PPUSH
26131: LD_VAR 0 3
26135: PPUSH
26136: LD_VAR 0 4
26140: PPUSH
26141: LD_VAR 0 5
26145: PPUSH
26146: LD_VAR 0 6
26150: PPUSH
26151: LD_VAR 0 7
26155: PPUSH
26156: LD_VAR 0 8
26160: PPUSH
26161: LD_VAR 0 9
26165: PPUSH
26166: LD_VAR 0 10
26170: PPUSH
26171: LD_VAR 0 11
26175: PPUSH
26176: CALL 22764 0 11
26180: GO 26183
26182: POP
// end ;
26183: PPOPN 11
26185: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26186: LD_VAR 0 1
26190: PPUSH
26191: LD_VAR 0 2
26195: PPUSH
26196: LD_VAR 0 3
26200: PPUSH
26201: LD_VAR 0 4
26205: PPUSH
26206: LD_VAR 0 5
26210: PPUSH
26211: CALL 26330 0 5
// end ; end_of_file
26215: PPOPN 5
26217: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26218: LD_INT 0
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26224: LD_VAR 0 1
26228: PPUSH
26229: CALL_OW 264
26233: PUSH
26234: LD_INT 91
26236: EQUAL
26237: IFFALSE 26309
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26239: LD_INT 68
26241: PPUSH
26242: LD_VAR 0 1
26246: PPUSH
26247: CALL_OW 255
26251: PPUSH
26252: CALL_OW 321
26256: PUSH
26257: LD_INT 2
26259: EQUAL
26260: IFFALSE 26272
// eff := 70 else
26262: LD_ADDR_VAR 0 4
26266: PUSH
26267: LD_INT 70
26269: ST_TO_ADDR
26270: GO 26280
// eff := 30 ;
26272: LD_ADDR_VAR 0 4
26276: PUSH
26277: LD_INT 30
26279: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26280: LD_VAR 0 1
26284: PPUSH
26285: CALL_OW 250
26289: PPUSH
26290: LD_VAR 0 1
26294: PPUSH
26295: CALL_OW 251
26299: PPUSH
26300: LD_VAR 0 4
26304: PPUSH
26305: CALL_OW 495
// end ; end ;
26309: LD_VAR 0 2
26313: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26314: LD_INT 0
26316: PPUSH
// end ;
26317: LD_VAR 0 4
26321: RET
// export function SOS_Command ( cmd ) ; begin
26322: LD_INT 0
26324: PPUSH
// end ;
26325: LD_VAR 0 2
26329: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26330: LD_INT 0
26332: PPUSH
// end ;
26333: LD_VAR 0 6
26337: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26338: LD_INT 0
26340: PPUSH
26341: PPUSH
// if not vehicle or not factory then
26342: LD_VAR 0 1
26346: NOT
26347: PUSH
26348: LD_VAR 0 2
26352: NOT
26353: OR
26354: IFFALSE 26358
// exit ;
26356: GO 26589
// if factoryWaypoints >= factory then
26358: LD_EXP 102
26362: PUSH
26363: LD_VAR 0 2
26367: GREATEREQUAL
26368: IFFALSE 26589
// if factoryWaypoints [ factory ] then
26370: LD_EXP 102
26374: PUSH
26375: LD_VAR 0 2
26379: ARRAY
26380: IFFALSE 26589
// begin if GetControl ( vehicle ) = control_manual then
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL_OW 263
26391: PUSH
26392: LD_INT 1
26394: EQUAL
26395: IFFALSE 26476
// begin driver := IsDrivenBy ( vehicle ) ;
26397: LD_ADDR_VAR 0 4
26401: PUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 311
26411: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26412: LD_VAR 0 4
26416: PPUSH
26417: LD_EXP 102
26421: PUSH
26422: LD_VAR 0 2
26426: ARRAY
26427: PUSH
26428: LD_INT 3
26430: ARRAY
26431: PPUSH
26432: LD_EXP 102
26436: PUSH
26437: LD_VAR 0 2
26441: ARRAY
26442: PUSH
26443: LD_INT 4
26445: ARRAY
26446: PPUSH
26447: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26451: LD_VAR 0 4
26455: PPUSH
26456: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26460: LD_VAR 0 4
26464: PPUSH
26465: LD_VAR 0 2
26469: PPUSH
26470: CALL_OW 180
// end else
26474: GO 26589
// if GetControl ( vehicle ) = control_remote then
26476: LD_VAR 0 1
26480: PPUSH
26481: CALL_OW 263
26485: PUSH
26486: LD_INT 2
26488: EQUAL
26489: IFFALSE 26550
// begin wait ( 0 0$2 ) ;
26491: LD_INT 70
26493: PPUSH
26494: CALL_OW 67
// if Connect ( vehicle ) then
26498: LD_VAR 0 1
26502: PPUSH
26503: CALL 38613 0 1
26507: IFFALSE 26548
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26509: LD_VAR 0 1
26513: PPUSH
26514: LD_EXP 102
26518: PUSH
26519: LD_VAR 0 2
26523: ARRAY
26524: PUSH
26525: LD_INT 3
26527: ARRAY
26528: PPUSH
26529: LD_EXP 102
26533: PUSH
26534: LD_VAR 0 2
26538: ARRAY
26539: PUSH
26540: LD_INT 4
26542: ARRAY
26543: PPUSH
26544: CALL_OW 171
// end else
26548: GO 26589
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26550: LD_VAR 0 1
26554: PPUSH
26555: LD_EXP 102
26559: PUSH
26560: LD_VAR 0 2
26564: ARRAY
26565: PUSH
26566: LD_INT 3
26568: ARRAY
26569: PPUSH
26570: LD_EXP 102
26574: PUSH
26575: LD_VAR 0 2
26579: ARRAY
26580: PUSH
26581: LD_INT 4
26583: ARRAY
26584: PPUSH
26585: CALL_OW 171
// end ; end ;
26589: LD_VAR 0 3
26593: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26594: LD_INT 0
26596: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26597: LD_VAR 0 1
26601: PUSH
26602: LD_INT 250
26604: EQUAL
26605: PUSH
26606: LD_VAR 0 2
26610: PPUSH
26611: CALL_OW 264
26615: PUSH
26616: LD_INT 81
26618: EQUAL
26619: AND
26620: IFFALSE 26641
// MinerPlaceMine ( unit , x , y ) ;
26622: LD_VAR 0 2
26626: PPUSH
26627: LD_VAR 0 4
26631: PPUSH
26632: LD_VAR 0 5
26636: PPUSH
26637: CALL 29026 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26641: LD_VAR 0 1
26645: PUSH
26646: LD_INT 251
26648: EQUAL
26649: PUSH
26650: LD_VAR 0 2
26654: PPUSH
26655: CALL_OW 264
26659: PUSH
26660: LD_INT 81
26662: EQUAL
26663: AND
26664: IFFALSE 26685
// MinerDetonateMine ( unit , x , y ) ;
26666: LD_VAR 0 2
26670: PPUSH
26671: LD_VAR 0 4
26675: PPUSH
26676: LD_VAR 0 5
26680: PPUSH
26681: CALL 29301 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26685: LD_VAR 0 1
26689: PUSH
26690: LD_INT 252
26692: EQUAL
26693: PUSH
26694: LD_VAR 0 2
26698: PPUSH
26699: CALL_OW 264
26703: PUSH
26704: LD_INT 81
26706: EQUAL
26707: AND
26708: IFFALSE 26729
// MinerCreateMinefield ( unit , x , y ) ;
26710: LD_VAR 0 2
26714: PPUSH
26715: LD_VAR 0 4
26719: PPUSH
26720: LD_VAR 0 5
26724: PPUSH
26725: CALL 29718 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26729: LD_VAR 0 1
26733: PUSH
26734: LD_INT 253
26736: EQUAL
26737: PUSH
26738: LD_VAR 0 2
26742: PPUSH
26743: CALL_OW 257
26747: PUSH
26748: LD_INT 5
26750: EQUAL
26751: AND
26752: IFFALSE 26773
// ComBinocular ( unit , x , y ) ;
26754: LD_VAR 0 2
26758: PPUSH
26759: LD_VAR 0 4
26763: PPUSH
26764: LD_VAR 0 5
26768: PPUSH
26769: CALL 30087 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26773: LD_VAR 0 1
26777: PUSH
26778: LD_INT 254
26780: EQUAL
26781: PUSH
26782: LD_VAR 0 2
26786: PPUSH
26787: CALL_OW 264
26791: PUSH
26792: LD_INT 99
26794: EQUAL
26795: AND
26796: PUSH
26797: LD_VAR 0 3
26801: PPUSH
26802: CALL_OW 263
26806: PUSH
26807: LD_INT 3
26809: EQUAL
26810: AND
26811: IFFALSE 26827
// HackDestroyVehicle ( unit , selectedUnit ) ;
26813: LD_VAR 0 2
26817: PPUSH
26818: LD_VAR 0 3
26822: PPUSH
26823: CALL 28390 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26827: LD_VAR 0 1
26831: PUSH
26832: LD_INT 255
26834: EQUAL
26835: PUSH
26836: LD_VAR 0 2
26840: PPUSH
26841: CALL_OW 264
26845: PUSH
26846: LD_INT 14
26848: PUSH
26849: LD_INT 53
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: IN
26856: AND
26857: PUSH
26858: LD_VAR 0 4
26862: PPUSH
26863: LD_VAR 0 5
26867: PPUSH
26868: CALL_OW 488
26872: AND
26873: IFFALSE 26897
// CutTreeXYR ( unit , x , y , 12 ) ;
26875: LD_VAR 0 2
26879: PPUSH
26880: LD_VAR 0 4
26884: PPUSH
26885: LD_VAR 0 5
26889: PPUSH
26890: LD_INT 12
26892: PPUSH
26893: CALL 26960 0 4
// if cmd = 256 then
26897: LD_VAR 0 1
26901: PUSH
26902: LD_INT 256
26904: EQUAL
26905: IFFALSE 26926
// SetFactoryWaypoint ( unit , x , y ) ;
26907: LD_VAR 0 2
26911: PPUSH
26912: LD_VAR 0 4
26916: PPUSH
26917: LD_VAR 0 5
26921: PPUSH
26922: CALL 24744 0 3
// if cmd = 257 then
26926: LD_VAR 0 1
26930: PUSH
26931: LD_INT 257
26933: EQUAL
26934: IFFALSE 26955
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26936: LD_VAR 0 2
26940: PPUSH
26941: LD_VAR 0 4
26945: PPUSH
26946: LD_VAR 0 5
26950: PPUSH
26951: CALL 25106 0 3
// end ;
26955: LD_VAR 0 6
26959: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26960: LD_INT 0
26962: PPUSH
26963: PPUSH
26964: PPUSH
26965: PPUSH
26966: PPUSH
26967: PPUSH
26968: PPUSH
26969: PPUSH
26970: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26971: LD_VAR 0 1
26975: NOT
26976: PUSH
26977: LD_VAR 0 2
26981: PPUSH
26982: LD_VAR 0 3
26986: PPUSH
26987: CALL_OW 488
26991: NOT
26992: OR
26993: PUSH
26994: LD_VAR 0 4
26998: NOT
26999: OR
27000: IFFALSE 27004
// exit ;
27002: GO 27344
// list := [ ] ;
27004: LD_ADDR_VAR 0 13
27008: PUSH
27009: EMPTY
27010: ST_TO_ADDR
// if x - r < 0 then
27011: LD_VAR 0 2
27015: PUSH
27016: LD_VAR 0 4
27020: MINUS
27021: PUSH
27022: LD_INT 0
27024: LESS
27025: IFFALSE 27037
// min_x := 0 else
27027: LD_ADDR_VAR 0 7
27031: PUSH
27032: LD_INT 0
27034: ST_TO_ADDR
27035: GO 27053
// min_x := x - r ;
27037: LD_ADDR_VAR 0 7
27041: PUSH
27042: LD_VAR 0 2
27046: PUSH
27047: LD_VAR 0 4
27051: MINUS
27052: ST_TO_ADDR
// if y - r < 0 then
27053: LD_VAR 0 3
27057: PUSH
27058: LD_VAR 0 4
27062: MINUS
27063: PUSH
27064: LD_INT 0
27066: LESS
27067: IFFALSE 27079
// min_y := 0 else
27069: LD_ADDR_VAR 0 8
27073: PUSH
27074: LD_INT 0
27076: ST_TO_ADDR
27077: GO 27095
// min_y := y - r ;
27079: LD_ADDR_VAR 0 8
27083: PUSH
27084: LD_VAR 0 3
27088: PUSH
27089: LD_VAR 0 4
27093: MINUS
27094: ST_TO_ADDR
// max_x := x + r ;
27095: LD_ADDR_VAR 0 9
27099: PUSH
27100: LD_VAR 0 2
27104: PUSH
27105: LD_VAR 0 4
27109: PLUS
27110: ST_TO_ADDR
// max_y := y + r ;
27111: LD_ADDR_VAR 0 10
27115: PUSH
27116: LD_VAR 0 3
27120: PUSH
27121: LD_VAR 0 4
27125: PLUS
27126: ST_TO_ADDR
// for _x = min_x to max_x do
27127: LD_ADDR_VAR 0 11
27131: PUSH
27132: DOUBLE
27133: LD_VAR 0 7
27137: DEC
27138: ST_TO_ADDR
27139: LD_VAR 0 9
27143: PUSH
27144: FOR_TO
27145: IFFALSE 27262
// for _y = min_y to max_y do
27147: LD_ADDR_VAR 0 12
27151: PUSH
27152: DOUBLE
27153: LD_VAR 0 8
27157: DEC
27158: ST_TO_ADDR
27159: LD_VAR 0 10
27163: PUSH
27164: FOR_TO
27165: IFFALSE 27258
// begin if not ValidHex ( _x , _y ) then
27167: LD_VAR 0 11
27171: PPUSH
27172: LD_VAR 0 12
27176: PPUSH
27177: CALL_OW 488
27181: NOT
27182: IFFALSE 27186
// continue ;
27184: GO 27164
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27186: LD_VAR 0 11
27190: PPUSH
27191: LD_VAR 0 12
27195: PPUSH
27196: CALL_OW 351
27200: PUSH
27201: LD_VAR 0 11
27205: PPUSH
27206: LD_VAR 0 12
27210: PPUSH
27211: CALL_OW 554
27215: AND
27216: IFFALSE 27256
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27218: LD_ADDR_VAR 0 13
27222: PUSH
27223: LD_VAR 0 13
27227: PPUSH
27228: LD_VAR 0 13
27232: PUSH
27233: LD_INT 1
27235: PLUS
27236: PPUSH
27237: LD_VAR 0 11
27241: PUSH
27242: LD_VAR 0 12
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PPUSH
27251: CALL_OW 2
27255: ST_TO_ADDR
// end ;
27256: GO 27164
27258: POP
27259: POP
27260: GO 27144
27262: POP
27263: POP
// if not list then
27264: LD_VAR 0 13
27268: NOT
27269: IFFALSE 27273
// exit ;
27271: GO 27344
// for i in list do
27273: LD_ADDR_VAR 0 6
27277: PUSH
27278: LD_VAR 0 13
27282: PUSH
27283: FOR_IN
27284: IFFALSE 27342
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27286: LD_VAR 0 1
27290: PPUSH
27291: LD_STRING M
27293: PUSH
27294: LD_VAR 0 6
27298: PUSH
27299: LD_INT 1
27301: ARRAY
27302: PUSH
27303: LD_VAR 0 6
27307: PUSH
27308: LD_INT 2
27310: ARRAY
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: PUSH
27333: EMPTY
27334: LIST
27335: PPUSH
27336: CALL_OW 447
27340: GO 27283
27342: POP
27343: POP
// end ;
27344: LD_VAR 0 5
27348: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27349: LD_EXP 105
27353: NOT
27354: IFFALSE 27404
27356: GO 27358
27358: DISABLE
// begin initHack := true ;
27359: LD_ADDR_EXP 105
27363: PUSH
27364: LD_INT 1
27366: ST_TO_ADDR
// hackTanks := [ ] ;
27367: LD_ADDR_EXP 106
27371: PUSH
27372: EMPTY
27373: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27374: LD_ADDR_EXP 107
27378: PUSH
27379: EMPTY
27380: ST_TO_ADDR
// hackLimit := 3 ;
27381: LD_ADDR_EXP 108
27385: PUSH
27386: LD_INT 3
27388: ST_TO_ADDR
// hackDist := 12 ;
27389: LD_ADDR_EXP 109
27393: PUSH
27394: LD_INT 12
27396: ST_TO_ADDR
// hackCounter := [ ] ;
27397: LD_ADDR_EXP 110
27401: PUSH
27402: EMPTY
27403: ST_TO_ADDR
// end ;
27404: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27405: LD_EXP 105
27409: PUSH
27410: LD_INT 34
27412: PUSH
27413: LD_INT 99
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PPUSH
27420: CALL_OW 69
27424: AND
27425: IFFALSE 27678
27427: GO 27429
27429: DISABLE
27430: LD_INT 0
27432: PPUSH
27433: PPUSH
// begin enable ;
27434: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27435: LD_ADDR_VAR 0 1
27439: PUSH
27440: LD_INT 34
27442: PUSH
27443: LD_INT 99
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PPUSH
27450: CALL_OW 69
27454: PUSH
27455: FOR_IN
27456: IFFALSE 27676
// begin if not i in hackTanks then
27458: LD_VAR 0 1
27462: PUSH
27463: LD_EXP 106
27467: IN
27468: NOT
27469: IFFALSE 27552
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27471: LD_ADDR_EXP 106
27475: PUSH
27476: LD_EXP 106
27480: PPUSH
27481: LD_EXP 106
27485: PUSH
27486: LD_INT 1
27488: PLUS
27489: PPUSH
27490: LD_VAR 0 1
27494: PPUSH
27495: CALL_OW 1
27499: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27500: LD_ADDR_EXP 107
27504: PUSH
27505: LD_EXP 107
27509: PPUSH
27510: LD_EXP 107
27514: PUSH
27515: LD_INT 1
27517: PLUS
27518: PPUSH
27519: EMPTY
27520: PPUSH
27521: CALL_OW 1
27525: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27526: LD_ADDR_EXP 110
27530: PUSH
27531: LD_EXP 110
27535: PPUSH
27536: LD_EXP 110
27540: PUSH
27541: LD_INT 1
27543: PLUS
27544: PPUSH
27545: EMPTY
27546: PPUSH
27547: CALL_OW 1
27551: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27552: LD_VAR 0 1
27556: PPUSH
27557: CALL_OW 302
27561: NOT
27562: IFFALSE 27575
// begin HackUnlinkAll ( i ) ;
27564: LD_VAR 0 1
27568: PPUSH
27569: CALL 27681 0 1
// continue ;
27573: GO 27455
// end ; HackCheckCapturedStatus ( i ) ;
27575: LD_VAR 0 1
27579: PPUSH
27580: CALL 28124 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27584: LD_ADDR_VAR 0 2
27588: PUSH
27589: LD_INT 81
27591: PUSH
27592: LD_VAR 0 1
27596: PPUSH
27597: CALL_OW 255
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 33
27608: PUSH
27609: LD_INT 3
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 91
27618: PUSH
27619: LD_VAR 0 1
27623: PUSH
27624: LD_EXP 109
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 50
27636: PUSH
27637: EMPTY
27638: LIST
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: PPUSH
27646: CALL_OW 69
27650: ST_TO_ADDR
// if not tmp then
27651: LD_VAR 0 2
27655: NOT
27656: IFFALSE 27660
// continue ;
27658: GO 27455
// HackLink ( i , tmp ) ;
27660: LD_VAR 0 1
27664: PPUSH
27665: LD_VAR 0 2
27669: PPUSH
27670: CALL 27817 0 2
// end ;
27674: GO 27455
27676: POP
27677: POP
// end ;
27678: PPOPN 2
27680: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27681: LD_INT 0
27683: PPUSH
27684: PPUSH
27685: PPUSH
// if not hack in hackTanks then
27686: LD_VAR 0 1
27690: PUSH
27691: LD_EXP 106
27695: IN
27696: NOT
27697: IFFALSE 27701
// exit ;
27699: GO 27812
// index := GetElementIndex ( hackTanks , hack ) ;
27701: LD_ADDR_VAR 0 4
27705: PUSH
27706: LD_EXP 106
27710: PPUSH
27711: LD_VAR 0 1
27715: PPUSH
27716: CALL 35429 0 2
27720: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27721: LD_EXP 107
27725: PUSH
27726: LD_VAR 0 4
27730: ARRAY
27731: IFFALSE 27812
// begin for i in hackTanksCaptured [ index ] do
27733: LD_ADDR_VAR 0 3
27737: PUSH
27738: LD_EXP 107
27742: PUSH
27743: LD_VAR 0 4
27747: ARRAY
27748: PUSH
27749: FOR_IN
27750: IFFALSE 27776
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27752: LD_VAR 0 3
27756: PUSH
27757: LD_INT 1
27759: ARRAY
27760: PPUSH
27761: LD_VAR 0 3
27765: PUSH
27766: LD_INT 2
27768: ARRAY
27769: PPUSH
27770: CALL_OW 235
27774: GO 27749
27776: POP
27777: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27778: LD_ADDR_EXP 107
27782: PUSH
27783: LD_EXP 107
27787: PPUSH
27788: LD_VAR 0 4
27792: PPUSH
27793: EMPTY
27794: PPUSH
27795: CALL_OW 1
27799: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27800: LD_VAR 0 1
27804: PPUSH
27805: LD_INT 0
27807: PPUSH
27808: CALL_OW 505
// end ; end ;
27812: LD_VAR 0 2
27816: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27817: LD_INT 0
27819: PPUSH
27820: PPUSH
27821: PPUSH
// if not hack in hackTanks or not vehicles then
27822: LD_VAR 0 1
27826: PUSH
27827: LD_EXP 106
27831: IN
27832: NOT
27833: PUSH
27834: LD_VAR 0 2
27838: NOT
27839: OR
27840: IFFALSE 27844
// exit ;
27842: GO 28119
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27844: LD_ADDR_VAR 0 2
27848: PUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: LD_VAR 0 2
27858: PPUSH
27859: LD_INT 1
27861: PPUSH
27862: LD_INT 1
27864: PPUSH
27865: CALL 36079 0 4
27869: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27870: LD_ADDR_VAR 0 5
27874: PUSH
27875: LD_EXP 106
27879: PPUSH
27880: LD_VAR 0 1
27884: PPUSH
27885: CALL 35429 0 2
27889: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27890: LD_EXP 107
27894: PUSH
27895: LD_VAR 0 5
27899: ARRAY
27900: PUSH
27901: LD_EXP 108
27905: LESS
27906: IFFALSE 28095
// begin for i := 1 to vehicles do
27908: LD_ADDR_VAR 0 4
27912: PUSH
27913: DOUBLE
27914: LD_INT 1
27916: DEC
27917: ST_TO_ADDR
27918: LD_VAR 0 2
27922: PUSH
27923: FOR_TO
27924: IFFALSE 28093
// begin if hackTanksCaptured [ index ] = hackLimit then
27926: LD_EXP 107
27930: PUSH
27931: LD_VAR 0 5
27935: ARRAY
27936: PUSH
27937: LD_EXP 108
27941: EQUAL
27942: IFFALSE 27946
// break ;
27944: GO 28093
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27946: LD_ADDR_EXP 110
27950: PUSH
27951: LD_EXP 110
27955: PPUSH
27956: LD_VAR 0 5
27960: PPUSH
27961: LD_EXP 110
27965: PUSH
27966: LD_VAR 0 5
27970: ARRAY
27971: PUSH
27972: LD_INT 1
27974: PLUS
27975: PPUSH
27976: CALL_OW 1
27980: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27981: LD_ADDR_EXP 107
27985: PUSH
27986: LD_EXP 107
27990: PPUSH
27991: LD_VAR 0 5
27995: PUSH
27996: LD_EXP 107
28000: PUSH
28001: LD_VAR 0 5
28005: ARRAY
28006: PUSH
28007: LD_INT 1
28009: PLUS
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PPUSH
28015: LD_VAR 0 2
28019: PUSH
28020: LD_VAR 0 4
28024: ARRAY
28025: PUSH
28026: LD_VAR 0 2
28030: PUSH
28031: LD_VAR 0 4
28035: ARRAY
28036: PPUSH
28037: CALL_OW 255
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PPUSH
28046: CALL 35644 0 3
28050: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28051: LD_VAR 0 2
28055: PUSH
28056: LD_VAR 0 4
28060: ARRAY
28061: PPUSH
28062: LD_VAR 0 1
28066: PPUSH
28067: CALL_OW 255
28071: PPUSH
28072: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28076: LD_VAR 0 2
28080: PUSH
28081: LD_VAR 0 4
28085: ARRAY
28086: PPUSH
28087: CALL_OW 141
// end ;
28091: GO 27923
28093: POP
28094: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28095: LD_VAR 0 1
28099: PPUSH
28100: LD_EXP 107
28104: PUSH
28105: LD_VAR 0 5
28109: ARRAY
28110: PUSH
28111: LD_INT 0
28113: PLUS
28114: PPUSH
28115: CALL_OW 505
// end ;
28119: LD_VAR 0 3
28123: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28124: LD_INT 0
28126: PPUSH
28127: PPUSH
28128: PPUSH
28129: PPUSH
// if not hack in hackTanks then
28130: LD_VAR 0 1
28134: PUSH
28135: LD_EXP 106
28139: IN
28140: NOT
28141: IFFALSE 28145
// exit ;
28143: GO 28385
// index := GetElementIndex ( hackTanks , hack ) ;
28145: LD_ADDR_VAR 0 4
28149: PUSH
28150: LD_EXP 106
28154: PPUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: CALL 35429 0 2
28164: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28165: LD_ADDR_VAR 0 3
28169: PUSH
28170: DOUBLE
28171: LD_EXP 107
28175: PUSH
28176: LD_VAR 0 4
28180: ARRAY
28181: INC
28182: ST_TO_ADDR
28183: LD_INT 1
28185: PUSH
28186: FOR_DOWNTO
28187: IFFALSE 28359
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28189: LD_ADDR_VAR 0 5
28193: PUSH
28194: LD_EXP 107
28198: PUSH
28199: LD_VAR 0 4
28203: ARRAY
28204: PUSH
28205: LD_VAR 0 3
28209: ARRAY
28210: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28211: LD_VAR 0 5
28215: PUSH
28216: LD_INT 1
28218: ARRAY
28219: PPUSH
28220: CALL_OW 302
28224: NOT
28225: PUSH
28226: LD_VAR 0 5
28230: PUSH
28231: LD_INT 1
28233: ARRAY
28234: PPUSH
28235: CALL_OW 255
28239: PUSH
28240: LD_VAR 0 1
28244: PPUSH
28245: CALL_OW 255
28249: NONEQUAL
28250: OR
28251: IFFALSE 28357
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28253: LD_VAR 0 5
28257: PUSH
28258: LD_INT 1
28260: ARRAY
28261: PPUSH
28262: CALL_OW 305
28266: PUSH
28267: LD_VAR 0 5
28271: PUSH
28272: LD_INT 1
28274: ARRAY
28275: PPUSH
28276: CALL_OW 255
28280: PUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: CALL_OW 255
28290: EQUAL
28291: AND
28292: IFFALSE 28316
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28294: LD_VAR 0 5
28298: PUSH
28299: LD_INT 1
28301: ARRAY
28302: PPUSH
28303: LD_VAR 0 5
28307: PUSH
28308: LD_INT 2
28310: ARRAY
28311: PPUSH
28312: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28316: LD_ADDR_EXP 107
28320: PUSH
28321: LD_EXP 107
28325: PPUSH
28326: LD_VAR 0 4
28330: PPUSH
28331: LD_EXP 107
28335: PUSH
28336: LD_VAR 0 4
28340: ARRAY
28341: PPUSH
28342: LD_VAR 0 3
28346: PPUSH
28347: CALL_OW 3
28351: PPUSH
28352: CALL_OW 1
28356: ST_TO_ADDR
// end ; end ;
28357: GO 28186
28359: POP
28360: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28361: LD_VAR 0 1
28365: PPUSH
28366: LD_EXP 107
28370: PUSH
28371: LD_VAR 0 4
28375: ARRAY
28376: PUSH
28377: LD_INT 0
28379: PLUS
28380: PPUSH
28381: CALL_OW 505
// end ;
28385: LD_VAR 0 2
28389: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28390: LD_INT 0
28392: PPUSH
28393: PPUSH
28394: PPUSH
28395: PPUSH
// if not hack in hackTanks then
28396: LD_VAR 0 1
28400: PUSH
28401: LD_EXP 106
28405: IN
28406: NOT
28407: IFFALSE 28411
// exit ;
28409: GO 28496
// index := GetElementIndex ( hackTanks , hack ) ;
28411: LD_ADDR_VAR 0 5
28415: PUSH
28416: LD_EXP 106
28420: PPUSH
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL 35429 0 2
28430: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28431: LD_ADDR_VAR 0 4
28435: PUSH
28436: DOUBLE
28437: LD_INT 1
28439: DEC
28440: ST_TO_ADDR
28441: LD_EXP 107
28445: PUSH
28446: LD_VAR 0 5
28450: ARRAY
28451: PUSH
28452: FOR_TO
28453: IFFALSE 28494
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28455: LD_EXP 107
28459: PUSH
28460: LD_VAR 0 5
28464: ARRAY
28465: PUSH
28466: LD_VAR 0 4
28470: ARRAY
28471: PUSH
28472: LD_INT 1
28474: ARRAY
28475: PUSH
28476: LD_VAR 0 2
28480: EQUAL
28481: IFFALSE 28492
// KillUnit ( vehicle ) ;
28483: LD_VAR 0 2
28487: PPUSH
28488: CALL_OW 66
28492: GO 28452
28494: POP
28495: POP
// end ;
28496: LD_VAR 0 3
28500: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28501: LD_EXP 111
28505: NOT
28506: IFFALSE 28541
28508: GO 28510
28510: DISABLE
// begin initMiner := true ;
28511: LD_ADDR_EXP 111
28515: PUSH
28516: LD_INT 1
28518: ST_TO_ADDR
// minersList := [ ] ;
28519: LD_ADDR_EXP 112
28523: PUSH
28524: EMPTY
28525: ST_TO_ADDR
// minerMinesList := [ ] ;
28526: LD_ADDR_EXP 113
28530: PUSH
28531: EMPTY
28532: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28533: LD_ADDR_EXP 114
28537: PUSH
28538: LD_INT 5
28540: ST_TO_ADDR
// end ;
28541: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28542: LD_EXP 111
28546: PUSH
28547: LD_INT 34
28549: PUSH
28550: LD_INT 81
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PPUSH
28557: CALL_OW 69
28561: AND
28562: IFFALSE 29023
28564: GO 28566
28566: DISABLE
28567: LD_INT 0
28569: PPUSH
28570: PPUSH
28571: PPUSH
28572: PPUSH
// begin enable ;
28573: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28574: LD_ADDR_VAR 0 1
28578: PUSH
28579: LD_INT 34
28581: PUSH
28582: LD_INT 81
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PPUSH
28589: CALL_OW 69
28593: PUSH
28594: FOR_IN
28595: IFFALSE 28667
// begin if not i in minersList then
28597: LD_VAR 0 1
28601: PUSH
28602: LD_EXP 112
28606: IN
28607: NOT
28608: IFFALSE 28665
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28610: LD_ADDR_EXP 112
28614: PUSH
28615: LD_EXP 112
28619: PPUSH
28620: LD_EXP 112
28624: PUSH
28625: LD_INT 1
28627: PLUS
28628: PPUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 1
28638: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28639: LD_ADDR_EXP 113
28643: PUSH
28644: LD_EXP 113
28648: PPUSH
28649: LD_EXP 113
28653: PUSH
28654: LD_INT 1
28656: PLUS
28657: PPUSH
28658: EMPTY
28659: PPUSH
28660: CALL_OW 1
28664: ST_TO_ADDR
// end end ;
28665: GO 28594
28667: POP
28668: POP
// for i := minerMinesList downto 1 do
28669: LD_ADDR_VAR 0 1
28673: PUSH
28674: DOUBLE
28675: LD_EXP 113
28679: INC
28680: ST_TO_ADDR
28681: LD_INT 1
28683: PUSH
28684: FOR_DOWNTO
28685: IFFALSE 29021
// begin if IsLive ( minersList [ i ] ) then
28687: LD_EXP 112
28691: PUSH
28692: LD_VAR 0 1
28696: ARRAY
28697: PPUSH
28698: CALL_OW 300
28702: IFFALSE 28730
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28704: LD_EXP 112
28708: PUSH
28709: LD_VAR 0 1
28713: ARRAY
28714: PPUSH
28715: LD_EXP 113
28719: PUSH
28720: LD_VAR 0 1
28724: ARRAY
28725: PPUSH
28726: CALL_OW 505
// if not minerMinesList [ i ] then
28730: LD_EXP 113
28734: PUSH
28735: LD_VAR 0 1
28739: ARRAY
28740: NOT
28741: IFFALSE 28745
// continue ;
28743: GO 28684
// for j := minerMinesList [ i ] downto 1 do
28745: LD_ADDR_VAR 0 2
28749: PUSH
28750: DOUBLE
28751: LD_EXP 113
28755: PUSH
28756: LD_VAR 0 1
28760: ARRAY
28761: INC
28762: ST_TO_ADDR
28763: LD_INT 1
28765: PUSH
28766: FOR_DOWNTO
28767: IFFALSE 29017
// begin side := GetSide ( minersList [ i ] ) ;
28769: LD_ADDR_VAR 0 3
28773: PUSH
28774: LD_EXP 112
28778: PUSH
28779: LD_VAR 0 1
28783: ARRAY
28784: PPUSH
28785: CALL_OW 255
28789: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28790: LD_ADDR_VAR 0 4
28794: PUSH
28795: LD_EXP 113
28799: PUSH
28800: LD_VAR 0 1
28804: ARRAY
28805: PUSH
28806: LD_VAR 0 2
28810: ARRAY
28811: PUSH
28812: LD_INT 1
28814: ARRAY
28815: PPUSH
28816: LD_EXP 113
28820: PUSH
28821: LD_VAR 0 1
28825: ARRAY
28826: PUSH
28827: LD_VAR 0 2
28831: ARRAY
28832: PUSH
28833: LD_INT 2
28835: ARRAY
28836: PPUSH
28837: CALL_OW 428
28841: ST_TO_ADDR
// if not tmp then
28842: LD_VAR 0 4
28846: NOT
28847: IFFALSE 28851
// continue ;
28849: GO 28766
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28851: LD_VAR 0 4
28855: PUSH
28856: LD_INT 81
28858: PUSH
28859: LD_VAR 0 3
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PPUSH
28868: CALL_OW 69
28872: IN
28873: PUSH
28874: LD_EXP 113
28878: PUSH
28879: LD_VAR 0 1
28883: ARRAY
28884: PUSH
28885: LD_VAR 0 2
28889: ARRAY
28890: PUSH
28891: LD_INT 1
28893: ARRAY
28894: PPUSH
28895: LD_EXP 113
28899: PUSH
28900: LD_VAR 0 1
28904: ARRAY
28905: PUSH
28906: LD_VAR 0 2
28910: ARRAY
28911: PUSH
28912: LD_INT 2
28914: ARRAY
28915: PPUSH
28916: CALL_OW 458
28920: AND
28921: IFFALSE 29015
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28923: LD_EXP 113
28927: PUSH
28928: LD_VAR 0 1
28932: ARRAY
28933: PUSH
28934: LD_VAR 0 2
28938: ARRAY
28939: PUSH
28940: LD_INT 1
28942: ARRAY
28943: PPUSH
28944: LD_EXP 113
28948: PUSH
28949: LD_VAR 0 1
28953: ARRAY
28954: PUSH
28955: LD_VAR 0 2
28959: ARRAY
28960: PUSH
28961: LD_INT 2
28963: ARRAY
28964: PPUSH
28965: LD_VAR 0 3
28969: PPUSH
28970: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28974: LD_ADDR_EXP 113
28978: PUSH
28979: LD_EXP 113
28983: PPUSH
28984: LD_VAR 0 1
28988: PPUSH
28989: LD_EXP 113
28993: PUSH
28994: LD_VAR 0 1
28998: ARRAY
28999: PPUSH
29000: LD_VAR 0 2
29004: PPUSH
29005: CALL_OW 3
29009: PPUSH
29010: CALL_OW 1
29014: ST_TO_ADDR
// end ; end ;
29015: GO 28766
29017: POP
29018: POP
// end ;
29019: GO 28684
29021: POP
29022: POP
// end ;
29023: PPOPN 4
29025: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29026: LD_INT 0
29028: PPUSH
29029: PPUSH
// result := false ;
29030: LD_ADDR_VAR 0 4
29034: PUSH
29035: LD_INT 0
29037: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29038: LD_VAR 0 1
29042: PPUSH
29043: CALL_OW 264
29047: PUSH
29048: LD_INT 81
29050: EQUAL
29051: NOT
29052: IFFALSE 29056
// exit ;
29054: GO 29296
// index := GetElementIndex ( minersList , unit ) ;
29056: LD_ADDR_VAR 0 5
29060: PUSH
29061: LD_EXP 112
29065: PPUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL 35429 0 2
29075: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29076: LD_EXP 113
29080: PUSH
29081: LD_VAR 0 5
29085: ARRAY
29086: PUSH
29087: LD_EXP 114
29091: GREATEREQUAL
29092: IFFALSE 29096
// exit ;
29094: GO 29296
// ComMoveXY ( unit , x , y ) ;
29096: LD_VAR 0 1
29100: PPUSH
29101: LD_VAR 0 2
29105: PPUSH
29106: LD_VAR 0 3
29110: PPUSH
29111: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29115: LD_INT 35
29117: PPUSH
29118: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29122: LD_VAR 0 1
29126: PPUSH
29127: LD_VAR 0 2
29131: PPUSH
29132: LD_VAR 0 3
29136: PPUSH
29137: CALL 66784 0 3
29141: NOT
29142: PUSH
29143: LD_VAR 0 1
29147: PPUSH
29148: CALL_OW 314
29152: AND
29153: IFFALSE 29157
// exit ;
29155: GO 29296
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29157: LD_VAR 0 2
29161: PPUSH
29162: LD_VAR 0 3
29166: PPUSH
29167: CALL_OW 428
29171: PUSH
29172: LD_VAR 0 1
29176: EQUAL
29177: PUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: CALL_OW 314
29187: NOT
29188: AND
29189: IFFALSE 29115
// PlaySoundXY ( x , y , PlantMine ) ;
29191: LD_VAR 0 2
29195: PPUSH
29196: LD_VAR 0 3
29200: PPUSH
29201: LD_STRING PlantMine
29203: PPUSH
29204: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29208: LD_VAR 0 2
29212: PPUSH
29213: LD_VAR 0 3
29217: PPUSH
29218: LD_VAR 0 1
29222: PPUSH
29223: CALL_OW 255
29227: PPUSH
29228: LD_INT 0
29230: PPUSH
29231: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29235: LD_ADDR_EXP 113
29239: PUSH
29240: LD_EXP 113
29244: PPUSH
29245: LD_VAR 0 5
29249: PUSH
29250: LD_EXP 113
29254: PUSH
29255: LD_VAR 0 5
29259: ARRAY
29260: PUSH
29261: LD_INT 1
29263: PLUS
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PPUSH
29269: LD_VAR 0 2
29273: PUSH
29274: LD_VAR 0 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PPUSH
29283: CALL 35644 0 3
29287: ST_TO_ADDR
// result := true ;
29288: LD_ADDR_VAR 0 4
29292: PUSH
29293: LD_INT 1
29295: ST_TO_ADDR
// end ;
29296: LD_VAR 0 4
29300: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29301: LD_INT 0
29303: PPUSH
29304: PPUSH
29305: PPUSH
// if not unit in minersList then
29306: LD_VAR 0 1
29310: PUSH
29311: LD_EXP 112
29315: IN
29316: NOT
29317: IFFALSE 29321
// exit ;
29319: GO 29713
// index := GetElementIndex ( minersList , unit ) ;
29321: LD_ADDR_VAR 0 6
29325: PUSH
29326: LD_EXP 112
29330: PPUSH
29331: LD_VAR 0 1
29335: PPUSH
29336: CALL 35429 0 2
29340: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29341: LD_ADDR_VAR 0 5
29345: PUSH
29346: DOUBLE
29347: LD_EXP 113
29351: PUSH
29352: LD_VAR 0 6
29356: ARRAY
29357: INC
29358: ST_TO_ADDR
29359: LD_INT 1
29361: PUSH
29362: FOR_DOWNTO
29363: IFFALSE 29524
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29365: LD_EXP 113
29369: PUSH
29370: LD_VAR 0 6
29374: ARRAY
29375: PUSH
29376: LD_VAR 0 5
29380: ARRAY
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: PUSH
29386: LD_VAR 0 2
29390: EQUAL
29391: PUSH
29392: LD_EXP 113
29396: PUSH
29397: LD_VAR 0 6
29401: ARRAY
29402: PUSH
29403: LD_VAR 0 5
29407: ARRAY
29408: PUSH
29409: LD_INT 2
29411: ARRAY
29412: PUSH
29413: LD_VAR 0 3
29417: EQUAL
29418: AND
29419: IFFALSE 29522
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29421: LD_EXP 113
29425: PUSH
29426: LD_VAR 0 6
29430: ARRAY
29431: PUSH
29432: LD_VAR 0 5
29436: ARRAY
29437: PUSH
29438: LD_INT 1
29440: ARRAY
29441: PPUSH
29442: LD_EXP 113
29446: PUSH
29447: LD_VAR 0 6
29451: ARRAY
29452: PUSH
29453: LD_VAR 0 5
29457: ARRAY
29458: PUSH
29459: LD_INT 2
29461: ARRAY
29462: PPUSH
29463: LD_VAR 0 1
29467: PPUSH
29468: CALL_OW 255
29472: PPUSH
29473: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29477: LD_ADDR_EXP 113
29481: PUSH
29482: LD_EXP 113
29486: PPUSH
29487: LD_VAR 0 6
29491: PPUSH
29492: LD_EXP 113
29496: PUSH
29497: LD_VAR 0 6
29501: ARRAY
29502: PPUSH
29503: LD_VAR 0 5
29507: PPUSH
29508: CALL_OW 3
29512: PPUSH
29513: CALL_OW 1
29517: ST_TO_ADDR
// exit ;
29518: POP
29519: POP
29520: GO 29713
// end ; end ;
29522: GO 29362
29524: POP
29525: POP
// for i := minerMinesList [ index ] downto 1 do
29526: LD_ADDR_VAR 0 5
29530: PUSH
29531: DOUBLE
29532: LD_EXP 113
29536: PUSH
29537: LD_VAR 0 6
29541: ARRAY
29542: INC
29543: ST_TO_ADDR
29544: LD_INT 1
29546: PUSH
29547: FOR_DOWNTO
29548: IFFALSE 29711
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29550: LD_EXP 113
29554: PUSH
29555: LD_VAR 0 6
29559: ARRAY
29560: PUSH
29561: LD_VAR 0 5
29565: ARRAY
29566: PUSH
29567: LD_INT 1
29569: ARRAY
29570: PPUSH
29571: LD_EXP 113
29575: PUSH
29576: LD_VAR 0 6
29580: ARRAY
29581: PUSH
29582: LD_VAR 0 5
29586: ARRAY
29587: PUSH
29588: LD_INT 2
29590: ARRAY
29591: PPUSH
29592: LD_VAR 0 2
29596: PPUSH
29597: LD_VAR 0 3
29601: PPUSH
29602: CALL_OW 298
29606: PUSH
29607: LD_INT 6
29609: LESS
29610: IFFALSE 29709
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29612: LD_EXP 113
29616: PUSH
29617: LD_VAR 0 6
29621: ARRAY
29622: PUSH
29623: LD_VAR 0 5
29627: ARRAY
29628: PUSH
29629: LD_INT 1
29631: ARRAY
29632: PPUSH
29633: LD_EXP 113
29637: PUSH
29638: LD_VAR 0 6
29642: ARRAY
29643: PUSH
29644: LD_VAR 0 5
29648: ARRAY
29649: PUSH
29650: LD_INT 2
29652: ARRAY
29653: PPUSH
29654: LD_VAR 0 1
29658: PPUSH
29659: CALL_OW 255
29663: PPUSH
29664: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29668: LD_ADDR_EXP 113
29672: PUSH
29673: LD_EXP 113
29677: PPUSH
29678: LD_VAR 0 6
29682: PPUSH
29683: LD_EXP 113
29687: PUSH
29688: LD_VAR 0 6
29692: ARRAY
29693: PPUSH
29694: LD_VAR 0 5
29698: PPUSH
29699: CALL_OW 3
29703: PPUSH
29704: CALL_OW 1
29708: ST_TO_ADDR
// end ; end ;
29709: GO 29547
29711: POP
29712: POP
// end ;
29713: LD_VAR 0 4
29717: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29718: LD_INT 0
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
29728: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29729: LD_VAR 0 1
29733: PPUSH
29734: CALL_OW 264
29738: PUSH
29739: LD_INT 81
29741: EQUAL
29742: NOT
29743: PUSH
29744: LD_VAR 0 1
29748: PUSH
29749: LD_EXP 112
29753: IN
29754: NOT
29755: OR
29756: IFFALSE 29760
// exit ;
29758: GO 30082
// index := GetElementIndex ( minersList , unit ) ;
29760: LD_ADDR_VAR 0 6
29764: PUSH
29765: LD_EXP 112
29769: PPUSH
29770: LD_VAR 0 1
29774: PPUSH
29775: CALL 35429 0 2
29779: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29780: LD_ADDR_VAR 0 8
29784: PUSH
29785: LD_EXP 114
29789: PUSH
29790: LD_EXP 113
29794: PUSH
29795: LD_VAR 0 6
29799: ARRAY
29800: MINUS
29801: ST_TO_ADDR
// if not minesFreeAmount then
29802: LD_VAR 0 8
29806: NOT
29807: IFFALSE 29811
// exit ;
29809: GO 30082
// tmp := [ ] ;
29811: LD_ADDR_VAR 0 7
29815: PUSH
29816: EMPTY
29817: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29818: LD_ADDR_VAR 0 5
29822: PUSH
29823: DOUBLE
29824: LD_INT 1
29826: DEC
29827: ST_TO_ADDR
29828: LD_VAR 0 8
29832: PUSH
29833: FOR_TO
29834: IFFALSE 30029
// begin _d := rand ( 0 , 5 ) ;
29836: LD_ADDR_VAR 0 11
29840: PUSH
29841: LD_INT 0
29843: PPUSH
29844: LD_INT 5
29846: PPUSH
29847: CALL_OW 12
29851: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29852: LD_ADDR_VAR 0 12
29856: PUSH
29857: LD_INT 2
29859: PPUSH
29860: LD_INT 6
29862: PPUSH
29863: CALL_OW 12
29867: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29868: LD_ADDR_VAR 0 9
29872: PUSH
29873: LD_VAR 0 2
29877: PPUSH
29878: LD_VAR 0 11
29882: PPUSH
29883: LD_VAR 0 12
29887: PPUSH
29888: CALL_OW 272
29892: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29893: LD_ADDR_VAR 0 10
29897: PUSH
29898: LD_VAR 0 3
29902: PPUSH
29903: LD_VAR 0 11
29907: PPUSH
29908: LD_VAR 0 12
29912: PPUSH
29913: CALL_OW 273
29917: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29918: LD_VAR 0 9
29922: PPUSH
29923: LD_VAR 0 10
29927: PPUSH
29928: CALL_OW 488
29932: PUSH
29933: LD_VAR 0 9
29937: PUSH
29938: LD_VAR 0 10
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_VAR 0 7
29951: IN
29952: NOT
29953: AND
29954: PUSH
29955: LD_VAR 0 9
29959: PPUSH
29960: LD_VAR 0 10
29964: PPUSH
29965: CALL_OW 458
29969: NOT
29970: AND
29971: IFFALSE 30013
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29973: LD_ADDR_VAR 0 7
29977: PUSH
29978: LD_VAR 0 7
29982: PPUSH
29983: LD_VAR 0 7
29987: PUSH
29988: LD_INT 1
29990: PLUS
29991: PPUSH
29992: LD_VAR 0 9
29996: PUSH
29997: LD_VAR 0 10
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PPUSH
30006: CALL_OW 1
30010: ST_TO_ADDR
30011: GO 30027
// i := i - 1 ;
30013: LD_ADDR_VAR 0 5
30017: PUSH
30018: LD_VAR 0 5
30022: PUSH
30023: LD_INT 1
30025: MINUS
30026: ST_TO_ADDR
// end ;
30027: GO 29833
30029: POP
30030: POP
// for i in tmp do
30031: LD_ADDR_VAR 0 5
30035: PUSH
30036: LD_VAR 0 7
30040: PUSH
30041: FOR_IN
30042: IFFALSE 30080
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30044: LD_VAR 0 1
30048: PPUSH
30049: LD_VAR 0 5
30053: PUSH
30054: LD_INT 1
30056: ARRAY
30057: PPUSH
30058: LD_VAR 0 5
30062: PUSH
30063: LD_INT 2
30065: ARRAY
30066: PPUSH
30067: CALL 29026 0 3
30071: NOT
30072: IFFALSE 30078
// exit ;
30074: POP
30075: POP
30076: GO 30082
30078: GO 30041
30080: POP
30081: POP
// end ;
30082: LD_VAR 0 4
30086: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30087: LD_INT 0
30089: PPUSH
30090: PPUSH
30091: PPUSH
30092: PPUSH
30093: PPUSH
30094: PPUSH
30095: PPUSH
// if not GetClass ( unit ) = class_sniper then
30096: LD_VAR 0 1
30100: PPUSH
30101: CALL_OW 257
30105: PUSH
30106: LD_INT 5
30108: EQUAL
30109: NOT
30110: IFFALSE 30114
// exit ;
30112: GO 30502
// dist := 8 ;
30114: LD_ADDR_VAR 0 5
30118: PUSH
30119: LD_INT 8
30121: ST_TO_ADDR
// viewRange := 12 ;
30122: LD_ADDR_VAR 0 7
30126: PUSH
30127: LD_INT 12
30129: ST_TO_ADDR
// side := GetSide ( unit ) ;
30130: LD_ADDR_VAR 0 6
30134: PUSH
30135: LD_VAR 0 1
30139: PPUSH
30140: CALL_OW 255
30144: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30145: LD_INT 61
30147: PPUSH
30148: LD_VAR 0 6
30152: PPUSH
30153: CALL_OW 321
30157: PUSH
30158: LD_INT 2
30160: EQUAL
30161: IFFALSE 30171
// viewRange := 16 ;
30163: LD_ADDR_VAR 0 7
30167: PUSH
30168: LD_INT 16
30170: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30171: LD_VAR 0 1
30175: PPUSH
30176: LD_VAR 0 2
30180: PPUSH
30181: LD_VAR 0 3
30185: PPUSH
30186: CALL_OW 297
30190: PUSH
30191: LD_VAR 0 5
30195: GREATER
30196: IFFALSE 30275
// begin ComMoveXY ( unit , x , y ) ;
30198: LD_VAR 0 1
30202: PPUSH
30203: LD_VAR 0 2
30207: PPUSH
30208: LD_VAR 0 3
30212: PPUSH
30213: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30217: LD_INT 35
30219: PPUSH
30220: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30224: LD_VAR 0 1
30228: PPUSH
30229: LD_VAR 0 2
30233: PPUSH
30234: LD_VAR 0 3
30238: PPUSH
30239: CALL 66784 0 3
30243: NOT
30244: IFFALSE 30248
// exit ;
30246: GO 30502
// until GetDistUnitXY ( unit , x , y ) < dist ;
30248: LD_VAR 0 1
30252: PPUSH
30253: LD_VAR 0 2
30257: PPUSH
30258: LD_VAR 0 3
30262: PPUSH
30263: CALL_OW 297
30267: PUSH
30268: LD_VAR 0 5
30272: LESS
30273: IFFALSE 30217
// end ; ComTurnXY ( unit , x , y ) ;
30275: LD_VAR 0 1
30279: PPUSH
30280: LD_VAR 0 2
30284: PPUSH
30285: LD_VAR 0 3
30289: PPUSH
30290: CALL_OW 118
// wait ( 5 ) ;
30294: LD_INT 5
30296: PPUSH
30297: CALL_OW 67
// _d := GetDir ( unit ) ;
30301: LD_ADDR_VAR 0 10
30305: PUSH
30306: LD_VAR 0 1
30310: PPUSH
30311: CALL_OW 254
30315: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30316: LD_ADDR_VAR 0 8
30320: PUSH
30321: LD_VAR 0 1
30325: PPUSH
30326: CALL_OW 250
30330: PPUSH
30331: LD_VAR 0 10
30335: PPUSH
30336: LD_VAR 0 5
30340: PPUSH
30341: CALL_OW 272
30345: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30346: LD_ADDR_VAR 0 9
30350: PUSH
30351: LD_VAR 0 1
30355: PPUSH
30356: CALL_OW 251
30360: PPUSH
30361: LD_VAR 0 10
30365: PPUSH
30366: LD_VAR 0 5
30370: PPUSH
30371: CALL_OW 273
30375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30376: LD_VAR 0 8
30380: PPUSH
30381: LD_VAR 0 9
30385: PPUSH
30386: CALL_OW 488
30390: NOT
30391: IFFALSE 30395
// exit ;
30393: GO 30502
// ComAnimCustom ( unit , 1 ) ;
30395: LD_VAR 0 1
30399: PPUSH
30400: LD_INT 1
30402: PPUSH
30403: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30407: LD_VAR 0 8
30411: PPUSH
30412: LD_VAR 0 9
30416: PPUSH
30417: LD_VAR 0 6
30421: PPUSH
30422: LD_VAR 0 7
30426: PPUSH
30427: CALL_OW 330
// repeat wait ( 1 ) ;
30431: LD_INT 1
30433: PPUSH
30434: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30438: LD_VAR 0 1
30442: PPUSH
30443: CALL_OW 316
30447: PUSH
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 314
30457: OR
30458: PUSH
30459: LD_VAR 0 1
30463: PPUSH
30464: CALL_OW 302
30468: NOT
30469: OR
30470: PUSH
30471: LD_VAR 0 1
30475: PPUSH
30476: CALL_OW 301
30480: OR
30481: IFFALSE 30431
// RemoveSeeing ( _x , _y , side ) ;
30483: LD_VAR 0 8
30487: PPUSH
30488: LD_VAR 0 9
30492: PPUSH
30493: LD_VAR 0 6
30497: PPUSH
30498: CALL_OW 331
// end ; end_of_file
30502: LD_VAR 0 4
30506: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30507: LD_INT 0
30509: PPUSH
30510: PPUSH
// if exist_mode then
30511: LD_VAR 0 2
30515: IFFALSE 30540
// unit := CreateCharacter ( prefix & ident ) else
30517: LD_ADDR_VAR 0 5
30521: PUSH
30522: LD_VAR 0 3
30526: PUSH
30527: LD_VAR 0 1
30531: STR
30532: PPUSH
30533: CALL_OW 34
30537: ST_TO_ADDR
30538: GO 30555
// unit := NewCharacter ( ident ) ;
30540: LD_ADDR_VAR 0 5
30544: PUSH
30545: LD_VAR 0 1
30549: PPUSH
30550: CALL_OW 25
30554: ST_TO_ADDR
// result := unit ;
30555: LD_ADDR_VAR 0 4
30559: PUSH
30560: LD_VAR 0 5
30564: ST_TO_ADDR
// end ;
30565: LD_VAR 0 4
30569: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30570: LD_INT 0
30572: PPUSH
30573: PPUSH
// if not side or not nation then
30574: LD_VAR 0 1
30578: NOT
30579: PUSH
30580: LD_VAR 0 2
30584: NOT
30585: OR
30586: IFFALSE 30590
// exit ;
30588: GO 31358
// case nation of nation_american :
30590: LD_VAR 0 2
30594: PUSH
30595: LD_INT 1
30597: DOUBLE
30598: EQUAL
30599: IFTRUE 30603
30601: GO 30817
30603: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30604: LD_ADDR_VAR 0 4
30608: PUSH
30609: LD_INT 35
30611: PUSH
30612: LD_INT 45
30614: PUSH
30615: LD_INT 46
30617: PUSH
30618: LD_INT 47
30620: PUSH
30621: LD_INT 82
30623: PUSH
30624: LD_INT 83
30626: PUSH
30627: LD_INT 84
30629: PUSH
30630: LD_INT 85
30632: PUSH
30633: LD_INT 86
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: LD_INT 6
30644: PUSH
30645: LD_INT 15
30647: PUSH
30648: LD_INT 16
30650: PUSH
30651: LD_INT 7
30653: PUSH
30654: LD_INT 12
30656: PUSH
30657: LD_INT 13
30659: PUSH
30660: LD_INT 10
30662: PUSH
30663: LD_INT 14
30665: PUSH
30666: LD_INT 20
30668: PUSH
30669: LD_INT 21
30671: PUSH
30672: LD_INT 22
30674: PUSH
30675: LD_INT 25
30677: PUSH
30678: LD_INT 32
30680: PUSH
30681: LD_INT 27
30683: PUSH
30684: LD_INT 36
30686: PUSH
30687: LD_INT 69
30689: PUSH
30690: LD_INT 39
30692: PUSH
30693: LD_INT 34
30695: PUSH
30696: LD_INT 40
30698: PUSH
30699: LD_INT 48
30701: PUSH
30702: LD_INT 49
30704: PUSH
30705: LD_INT 50
30707: PUSH
30708: LD_INT 51
30710: PUSH
30711: LD_INT 52
30713: PUSH
30714: LD_INT 53
30716: PUSH
30717: LD_INT 54
30719: PUSH
30720: LD_INT 55
30722: PUSH
30723: LD_INT 56
30725: PUSH
30726: LD_INT 57
30728: PUSH
30729: LD_INT 58
30731: PUSH
30732: LD_INT 59
30734: PUSH
30735: LD_INT 60
30737: PUSH
30738: LD_INT 61
30740: PUSH
30741: LD_INT 62
30743: PUSH
30744: LD_INT 80
30746: PUSH
30747: LD_INT 82
30749: PUSH
30750: LD_INT 83
30752: PUSH
30753: LD_INT 84
30755: PUSH
30756: LD_INT 85
30758: PUSH
30759: LD_INT 86
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: ST_TO_ADDR
30815: GO 31282
30817: LD_INT 2
30819: DOUBLE
30820: EQUAL
30821: IFTRUE 30825
30823: GO 31051
30825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30826: LD_ADDR_VAR 0 4
30830: PUSH
30831: LD_INT 35
30833: PUSH
30834: LD_INT 45
30836: PUSH
30837: LD_INT 46
30839: PUSH
30840: LD_INT 47
30842: PUSH
30843: LD_INT 82
30845: PUSH
30846: LD_INT 83
30848: PUSH
30849: LD_INT 84
30851: PUSH
30852: LD_INT 85
30854: PUSH
30855: LD_INT 87
30857: PUSH
30858: LD_INT 70
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: LD_INT 11
30866: PUSH
30867: LD_INT 3
30869: PUSH
30870: LD_INT 4
30872: PUSH
30873: LD_INT 5
30875: PUSH
30876: LD_INT 6
30878: PUSH
30879: LD_INT 15
30881: PUSH
30882: LD_INT 18
30884: PUSH
30885: LD_INT 7
30887: PUSH
30888: LD_INT 17
30890: PUSH
30891: LD_INT 8
30893: PUSH
30894: LD_INT 20
30896: PUSH
30897: LD_INT 21
30899: PUSH
30900: LD_INT 22
30902: PUSH
30903: LD_INT 72
30905: PUSH
30906: LD_INT 26
30908: PUSH
30909: LD_INT 69
30911: PUSH
30912: LD_INT 39
30914: PUSH
30915: LD_INT 40
30917: PUSH
30918: LD_INT 41
30920: PUSH
30921: LD_INT 42
30923: PUSH
30924: LD_INT 43
30926: PUSH
30927: LD_INT 48
30929: PUSH
30930: LD_INT 49
30932: PUSH
30933: LD_INT 50
30935: PUSH
30936: LD_INT 51
30938: PUSH
30939: LD_INT 52
30941: PUSH
30942: LD_INT 53
30944: PUSH
30945: LD_INT 54
30947: PUSH
30948: LD_INT 55
30950: PUSH
30951: LD_INT 56
30953: PUSH
30954: LD_INT 60
30956: PUSH
30957: LD_INT 61
30959: PUSH
30960: LD_INT 62
30962: PUSH
30963: LD_INT 66
30965: PUSH
30966: LD_INT 67
30968: PUSH
30969: LD_INT 68
30971: PUSH
30972: LD_INT 81
30974: PUSH
30975: LD_INT 82
30977: PUSH
30978: LD_INT 83
30980: PUSH
30981: LD_INT 84
30983: PUSH
30984: LD_INT 85
30986: PUSH
30987: LD_INT 87
30989: PUSH
30990: LD_INT 88
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: ST_TO_ADDR
31049: GO 31282
31051: LD_INT 3
31053: DOUBLE
31054: EQUAL
31055: IFTRUE 31059
31057: GO 31281
31059: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31060: LD_ADDR_VAR 0 4
31064: PUSH
31065: LD_INT 46
31067: PUSH
31068: LD_INT 47
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: LD_INT 82
31079: PUSH
31080: LD_INT 83
31082: PUSH
31083: LD_INT 84
31085: PUSH
31086: LD_INT 85
31088: PUSH
31089: LD_INT 86
31091: PUSH
31092: LD_INT 11
31094: PUSH
31095: LD_INT 9
31097: PUSH
31098: LD_INT 20
31100: PUSH
31101: LD_INT 19
31103: PUSH
31104: LD_INT 21
31106: PUSH
31107: LD_INT 24
31109: PUSH
31110: LD_INT 22
31112: PUSH
31113: LD_INT 25
31115: PUSH
31116: LD_INT 28
31118: PUSH
31119: LD_INT 29
31121: PUSH
31122: LD_INT 30
31124: PUSH
31125: LD_INT 31
31127: PUSH
31128: LD_INT 37
31130: PUSH
31131: LD_INT 38
31133: PUSH
31134: LD_INT 32
31136: PUSH
31137: LD_INT 27
31139: PUSH
31140: LD_INT 33
31142: PUSH
31143: LD_INT 69
31145: PUSH
31146: LD_INT 39
31148: PUSH
31149: LD_INT 34
31151: PUSH
31152: LD_INT 40
31154: PUSH
31155: LD_INT 71
31157: PUSH
31158: LD_INT 23
31160: PUSH
31161: LD_INT 44
31163: PUSH
31164: LD_INT 48
31166: PUSH
31167: LD_INT 49
31169: PUSH
31170: LD_INT 50
31172: PUSH
31173: LD_INT 51
31175: PUSH
31176: LD_INT 52
31178: PUSH
31179: LD_INT 53
31181: PUSH
31182: LD_INT 54
31184: PUSH
31185: LD_INT 55
31187: PUSH
31188: LD_INT 56
31190: PUSH
31191: LD_INT 57
31193: PUSH
31194: LD_INT 58
31196: PUSH
31197: LD_INT 59
31199: PUSH
31200: LD_INT 63
31202: PUSH
31203: LD_INT 64
31205: PUSH
31206: LD_INT 65
31208: PUSH
31209: LD_INT 82
31211: PUSH
31212: LD_INT 83
31214: PUSH
31215: LD_INT 84
31217: PUSH
31218: LD_INT 85
31220: PUSH
31221: LD_INT 86
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: ST_TO_ADDR
31279: GO 31282
31281: POP
// if state > - 1 and state < 3 then
31282: LD_VAR 0 3
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: GREATER
31291: PUSH
31292: LD_VAR 0 3
31296: PUSH
31297: LD_INT 3
31299: LESS
31300: AND
31301: IFFALSE 31358
// for i in result do
31303: LD_ADDR_VAR 0 5
31307: PUSH
31308: LD_VAR 0 4
31312: PUSH
31313: FOR_IN
31314: IFFALSE 31356
// if GetTech ( i , side ) <> state then
31316: LD_VAR 0 5
31320: PPUSH
31321: LD_VAR 0 1
31325: PPUSH
31326: CALL_OW 321
31330: PUSH
31331: LD_VAR 0 3
31335: NONEQUAL
31336: IFFALSE 31354
// result := result diff i ;
31338: LD_ADDR_VAR 0 4
31342: PUSH
31343: LD_VAR 0 4
31347: PUSH
31348: LD_VAR 0 5
31352: DIFF
31353: ST_TO_ADDR
31354: GO 31313
31356: POP
31357: POP
// end ;
31358: LD_VAR 0 4
31362: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31363: LD_INT 0
31365: PPUSH
31366: PPUSH
31367: PPUSH
// result := true ;
31368: LD_ADDR_VAR 0 3
31372: PUSH
31373: LD_INT 1
31375: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31376: LD_ADDR_VAR 0 5
31380: PUSH
31381: LD_VAR 0 2
31385: PPUSH
31386: CALL_OW 480
31390: ST_TO_ADDR
// if not tmp then
31391: LD_VAR 0 5
31395: NOT
31396: IFFALSE 31400
// exit ;
31398: GO 31449
// for i in tmp do
31400: LD_ADDR_VAR 0 4
31404: PUSH
31405: LD_VAR 0 5
31409: PUSH
31410: FOR_IN
31411: IFFALSE 31447
// if GetTech ( i , side ) <> state_researched then
31413: LD_VAR 0 4
31417: PPUSH
31418: LD_VAR 0 1
31422: PPUSH
31423: CALL_OW 321
31427: PUSH
31428: LD_INT 2
31430: NONEQUAL
31431: IFFALSE 31445
// begin result := false ;
31433: LD_ADDR_VAR 0 3
31437: PUSH
31438: LD_INT 0
31440: ST_TO_ADDR
// exit ;
31441: POP
31442: POP
31443: GO 31449
// end ;
31445: GO 31410
31447: POP
31448: POP
// end ;
31449: LD_VAR 0 3
31453: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31454: LD_INT 0
31456: PPUSH
31457: PPUSH
31458: PPUSH
31459: PPUSH
31460: PPUSH
31461: PPUSH
31462: PPUSH
31463: PPUSH
31464: PPUSH
31465: PPUSH
31466: PPUSH
31467: PPUSH
31468: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31469: LD_VAR 0 1
31473: NOT
31474: PUSH
31475: LD_VAR 0 1
31479: PPUSH
31480: CALL_OW 257
31484: PUSH
31485: LD_INT 9
31487: NONEQUAL
31488: OR
31489: IFFALSE 31493
// exit ;
31491: GO 32066
// side := GetSide ( unit ) ;
31493: LD_ADDR_VAR 0 9
31497: PUSH
31498: LD_VAR 0 1
31502: PPUSH
31503: CALL_OW 255
31507: ST_TO_ADDR
// tech_space := tech_spacanom ;
31508: LD_ADDR_VAR 0 12
31512: PUSH
31513: LD_INT 29
31515: ST_TO_ADDR
// tech_time := tech_taurad ;
31516: LD_ADDR_VAR 0 13
31520: PUSH
31521: LD_INT 28
31523: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31524: LD_ADDR_VAR 0 11
31528: PUSH
31529: LD_VAR 0 1
31533: PPUSH
31534: CALL_OW 310
31538: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31539: LD_VAR 0 11
31543: PPUSH
31544: CALL_OW 247
31548: PUSH
31549: LD_INT 2
31551: EQUAL
31552: IFFALSE 31556
// exit ;
31554: GO 32066
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31556: LD_ADDR_VAR 0 8
31560: PUSH
31561: LD_INT 81
31563: PUSH
31564: LD_VAR 0 9
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: LD_INT 21
31578: PUSH
31579: LD_INT 3
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PPUSH
31594: CALL_OW 69
31598: ST_TO_ADDR
// if not tmp then
31599: LD_VAR 0 8
31603: NOT
31604: IFFALSE 31608
// exit ;
31606: GO 32066
// if in_unit then
31608: LD_VAR 0 11
31612: IFFALSE 31636
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31614: LD_ADDR_VAR 0 10
31618: PUSH
31619: LD_VAR 0 8
31623: PPUSH
31624: LD_VAR 0 11
31628: PPUSH
31629: CALL_OW 74
31633: ST_TO_ADDR
31634: GO 31656
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31636: LD_ADDR_VAR 0 10
31640: PUSH
31641: LD_VAR 0 8
31645: PPUSH
31646: LD_VAR 0 1
31650: PPUSH
31651: CALL_OW 74
31655: ST_TO_ADDR
// if not enemy then
31656: LD_VAR 0 10
31660: NOT
31661: IFFALSE 31665
// exit ;
31663: GO 32066
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31665: LD_VAR 0 11
31669: PUSH
31670: LD_VAR 0 11
31674: PPUSH
31675: LD_VAR 0 10
31679: PPUSH
31680: CALL_OW 296
31684: PUSH
31685: LD_INT 13
31687: GREATER
31688: AND
31689: PUSH
31690: LD_VAR 0 1
31694: PPUSH
31695: LD_VAR 0 10
31699: PPUSH
31700: CALL_OW 296
31704: PUSH
31705: LD_INT 12
31707: GREATER
31708: OR
31709: IFFALSE 31713
// exit ;
31711: GO 32066
// missile := [ 1 ] ;
31713: LD_ADDR_VAR 0 14
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: EMPTY
31722: LIST
31723: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31724: LD_VAR 0 9
31728: PPUSH
31729: LD_VAR 0 12
31733: PPUSH
31734: CALL_OW 325
31738: IFFALSE 31767
// missile := Replace ( missile , missile + 1 , 2 ) ;
31740: LD_ADDR_VAR 0 14
31744: PUSH
31745: LD_VAR 0 14
31749: PPUSH
31750: LD_VAR 0 14
31754: PUSH
31755: LD_INT 1
31757: PLUS
31758: PPUSH
31759: LD_INT 2
31761: PPUSH
31762: CALL_OW 1
31766: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31767: LD_VAR 0 9
31771: PPUSH
31772: LD_VAR 0 13
31776: PPUSH
31777: CALL_OW 325
31781: PUSH
31782: LD_VAR 0 10
31786: PPUSH
31787: CALL_OW 255
31791: PPUSH
31792: LD_VAR 0 13
31796: PPUSH
31797: CALL_OW 325
31801: NOT
31802: AND
31803: IFFALSE 31832
// missile := Replace ( missile , missile + 1 , 3 ) ;
31805: LD_ADDR_VAR 0 14
31809: PUSH
31810: LD_VAR 0 14
31814: PPUSH
31815: LD_VAR 0 14
31819: PUSH
31820: LD_INT 1
31822: PLUS
31823: PPUSH
31824: LD_INT 3
31826: PPUSH
31827: CALL_OW 1
31831: ST_TO_ADDR
// if missile < 2 then
31832: LD_VAR 0 14
31836: PUSH
31837: LD_INT 2
31839: LESS
31840: IFFALSE 31844
// exit ;
31842: GO 32066
// x := GetX ( enemy ) ;
31844: LD_ADDR_VAR 0 4
31848: PUSH
31849: LD_VAR 0 10
31853: PPUSH
31854: CALL_OW 250
31858: ST_TO_ADDR
// y := GetY ( enemy ) ;
31859: LD_ADDR_VAR 0 5
31863: PUSH
31864: LD_VAR 0 10
31868: PPUSH
31869: CALL_OW 251
31873: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31874: LD_ADDR_VAR 0 6
31878: PUSH
31879: LD_VAR 0 4
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PPUSH
31888: LD_INT 1
31890: PPUSH
31891: CALL_OW 12
31895: PLUS
31896: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31897: LD_ADDR_VAR 0 7
31901: PUSH
31902: LD_VAR 0 5
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PPUSH
31911: LD_INT 1
31913: PPUSH
31914: CALL_OW 12
31918: PLUS
31919: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31920: LD_VAR 0 6
31924: PPUSH
31925: LD_VAR 0 7
31929: PPUSH
31930: CALL_OW 488
31934: NOT
31935: IFFALSE 31957
// begin _x := x ;
31937: LD_ADDR_VAR 0 6
31941: PUSH
31942: LD_VAR 0 4
31946: ST_TO_ADDR
// _y := y ;
31947: LD_ADDR_VAR 0 7
31951: PUSH
31952: LD_VAR 0 5
31956: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31957: LD_ADDR_VAR 0 3
31961: PUSH
31962: LD_INT 1
31964: PPUSH
31965: LD_VAR 0 14
31969: PPUSH
31970: CALL_OW 12
31974: ST_TO_ADDR
// case i of 1 :
31975: LD_VAR 0 3
31979: PUSH
31980: LD_INT 1
31982: DOUBLE
31983: EQUAL
31984: IFTRUE 31988
31986: GO 32005
31988: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31989: LD_VAR 0 1
31993: PPUSH
31994: LD_VAR 0 10
31998: PPUSH
31999: CALL_OW 115
32003: GO 32066
32005: LD_INT 2
32007: DOUBLE
32008: EQUAL
32009: IFTRUE 32013
32011: GO 32035
32013: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32014: LD_VAR 0 1
32018: PPUSH
32019: LD_VAR 0 6
32023: PPUSH
32024: LD_VAR 0 7
32028: PPUSH
32029: CALL_OW 153
32033: GO 32066
32035: LD_INT 3
32037: DOUBLE
32038: EQUAL
32039: IFTRUE 32043
32041: GO 32065
32043: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32044: LD_VAR 0 1
32048: PPUSH
32049: LD_VAR 0 6
32053: PPUSH
32054: LD_VAR 0 7
32058: PPUSH
32059: CALL_OW 154
32063: GO 32066
32065: POP
// end ;
32066: LD_VAR 0 2
32070: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32071: LD_INT 0
32073: PPUSH
32074: PPUSH
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
// if not unit or not building then
32079: LD_VAR 0 1
32083: NOT
32084: PUSH
32085: LD_VAR 0 2
32089: NOT
32090: OR
32091: IFFALSE 32095
// exit ;
32093: GO 32253
// x := GetX ( building ) ;
32095: LD_ADDR_VAR 0 5
32099: PUSH
32100: LD_VAR 0 2
32104: PPUSH
32105: CALL_OW 250
32109: ST_TO_ADDR
// y := GetY ( building ) ;
32110: LD_ADDR_VAR 0 6
32114: PUSH
32115: LD_VAR 0 2
32119: PPUSH
32120: CALL_OW 251
32124: ST_TO_ADDR
// for i = 0 to 5 do
32125: LD_ADDR_VAR 0 4
32129: PUSH
32130: DOUBLE
32131: LD_INT 0
32133: DEC
32134: ST_TO_ADDR
32135: LD_INT 5
32137: PUSH
32138: FOR_TO
32139: IFFALSE 32251
// begin _x := ShiftX ( x , i , 3 ) ;
32141: LD_ADDR_VAR 0 7
32145: PUSH
32146: LD_VAR 0 5
32150: PPUSH
32151: LD_VAR 0 4
32155: PPUSH
32156: LD_INT 3
32158: PPUSH
32159: CALL_OW 272
32163: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32164: LD_ADDR_VAR 0 8
32168: PUSH
32169: LD_VAR 0 6
32173: PPUSH
32174: LD_VAR 0 4
32178: PPUSH
32179: LD_INT 3
32181: PPUSH
32182: CALL_OW 273
32186: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32187: LD_VAR 0 7
32191: PPUSH
32192: LD_VAR 0 8
32196: PPUSH
32197: CALL_OW 488
32201: NOT
32202: IFFALSE 32206
// continue ;
32204: GO 32138
// if HexInfo ( _x , _y ) = 0 then
32206: LD_VAR 0 7
32210: PPUSH
32211: LD_VAR 0 8
32215: PPUSH
32216: CALL_OW 428
32220: PUSH
32221: LD_INT 0
32223: EQUAL
32224: IFFALSE 32249
// begin ComMoveXY ( unit , _x , _y ) ;
32226: LD_VAR 0 1
32230: PPUSH
32231: LD_VAR 0 7
32235: PPUSH
32236: LD_VAR 0 8
32240: PPUSH
32241: CALL_OW 111
// exit ;
32245: POP
32246: POP
32247: GO 32253
// end ; end ;
32249: GO 32138
32251: POP
32252: POP
// end ;
32253: LD_VAR 0 3
32257: RET
// export function ScanBase ( side , base_area ) ; begin
32258: LD_INT 0
32260: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32261: LD_ADDR_VAR 0 3
32265: PUSH
32266: LD_VAR 0 2
32270: PPUSH
32271: LD_INT 81
32273: PUSH
32274: LD_VAR 0 1
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PPUSH
32283: CALL_OW 70
32287: ST_TO_ADDR
// end ;
32288: LD_VAR 0 3
32292: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32293: LD_INT 0
32295: PPUSH
32296: PPUSH
32297: PPUSH
32298: PPUSH
// result := false ;
32299: LD_ADDR_VAR 0 2
32303: PUSH
32304: LD_INT 0
32306: ST_TO_ADDR
// side := GetSide ( unit ) ;
32307: LD_ADDR_VAR 0 3
32311: PUSH
32312: LD_VAR 0 1
32316: PPUSH
32317: CALL_OW 255
32321: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32322: LD_ADDR_VAR 0 4
32326: PUSH
32327: LD_VAR 0 1
32331: PPUSH
32332: CALL_OW 248
32336: ST_TO_ADDR
// case nat of 1 :
32337: LD_VAR 0 4
32341: PUSH
32342: LD_INT 1
32344: DOUBLE
32345: EQUAL
32346: IFTRUE 32350
32348: GO 32361
32350: POP
// tech := tech_lassight ; 2 :
32351: LD_ADDR_VAR 0 5
32355: PUSH
32356: LD_INT 12
32358: ST_TO_ADDR
32359: GO 32400
32361: LD_INT 2
32363: DOUBLE
32364: EQUAL
32365: IFTRUE 32369
32367: GO 32380
32369: POP
// tech := tech_mortar ; 3 :
32370: LD_ADDR_VAR 0 5
32374: PUSH
32375: LD_INT 41
32377: ST_TO_ADDR
32378: GO 32400
32380: LD_INT 3
32382: DOUBLE
32383: EQUAL
32384: IFTRUE 32388
32386: GO 32399
32388: POP
// tech := tech_bazooka ; end ;
32389: LD_ADDR_VAR 0 5
32393: PUSH
32394: LD_INT 44
32396: ST_TO_ADDR
32397: GO 32400
32399: POP
// if Researched ( side , tech ) then
32400: LD_VAR 0 3
32404: PPUSH
32405: LD_VAR 0 5
32409: PPUSH
32410: CALL_OW 325
32414: IFFALSE 32441
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32416: LD_ADDR_VAR 0 2
32420: PUSH
32421: LD_INT 5
32423: PUSH
32424: LD_INT 8
32426: PUSH
32427: LD_INT 9
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: PUSH
32435: LD_VAR 0 4
32439: ARRAY
32440: ST_TO_ADDR
// end ;
32441: LD_VAR 0 2
32445: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32446: LD_INT 0
32448: PPUSH
32449: PPUSH
32450: PPUSH
// if not mines then
32451: LD_VAR 0 2
32455: NOT
32456: IFFALSE 32460
// exit ;
32458: GO 32604
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32460: LD_ADDR_VAR 0 5
32464: PUSH
32465: LD_INT 81
32467: PUSH
32468: LD_VAR 0 1
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: LD_INT 21
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PPUSH
32498: CALL_OW 69
32502: ST_TO_ADDR
// for i in mines do
32503: LD_ADDR_VAR 0 4
32507: PUSH
32508: LD_VAR 0 2
32512: PUSH
32513: FOR_IN
32514: IFFALSE 32602
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32516: LD_VAR 0 4
32520: PUSH
32521: LD_INT 1
32523: ARRAY
32524: PPUSH
32525: LD_VAR 0 4
32529: PUSH
32530: LD_INT 2
32532: ARRAY
32533: PPUSH
32534: CALL_OW 458
32538: NOT
32539: IFFALSE 32543
// continue ;
32541: GO 32513
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32543: LD_VAR 0 4
32547: PUSH
32548: LD_INT 1
32550: ARRAY
32551: PPUSH
32552: LD_VAR 0 4
32556: PUSH
32557: LD_INT 2
32559: ARRAY
32560: PPUSH
32561: CALL_OW 428
32565: PUSH
32566: LD_VAR 0 5
32570: IN
32571: IFFALSE 32600
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32573: LD_VAR 0 4
32577: PUSH
32578: LD_INT 1
32580: ARRAY
32581: PPUSH
32582: LD_VAR 0 4
32586: PUSH
32587: LD_INT 2
32589: ARRAY
32590: PPUSH
32591: LD_VAR 0 1
32595: PPUSH
32596: CALL_OW 456
// end ;
32600: GO 32513
32602: POP
32603: POP
// end ;
32604: LD_VAR 0 3
32608: RET
// export function Count ( array ) ; var i ; begin
32609: LD_INT 0
32611: PPUSH
32612: PPUSH
// result := 0 ;
32613: LD_ADDR_VAR 0 2
32617: PUSH
32618: LD_INT 0
32620: ST_TO_ADDR
// for i in array do
32621: LD_ADDR_VAR 0 3
32625: PUSH
32626: LD_VAR 0 1
32630: PUSH
32631: FOR_IN
32632: IFFALSE 32656
// if i then
32634: LD_VAR 0 3
32638: IFFALSE 32654
// result := result + 1 ;
32640: LD_ADDR_VAR 0 2
32644: PUSH
32645: LD_VAR 0 2
32649: PUSH
32650: LD_INT 1
32652: PLUS
32653: ST_TO_ADDR
32654: GO 32631
32656: POP
32657: POP
// end ;
32658: LD_VAR 0 2
32662: RET
// export function IsEmpty ( building ) ; begin
32663: LD_INT 0
32665: PPUSH
// if not building then
32666: LD_VAR 0 1
32670: NOT
32671: IFFALSE 32675
// exit ;
32673: GO 32718
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32675: LD_ADDR_VAR 0 2
32679: PUSH
32680: LD_VAR 0 1
32684: PUSH
32685: LD_INT 22
32687: PUSH
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL_OW 255
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 58
32704: PUSH
32705: EMPTY
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PPUSH
32712: CALL_OW 69
32716: IN
32717: ST_TO_ADDR
// end ;
32718: LD_VAR 0 2
32722: RET
// export function IsNotFull ( building ) ; var places ; begin
32723: LD_INT 0
32725: PPUSH
32726: PPUSH
// if not building then
32727: LD_VAR 0 1
32731: NOT
32732: IFFALSE 32736
// exit ;
32734: GO 32907
// result := false ;
32736: LD_ADDR_VAR 0 2
32740: PUSH
32741: LD_INT 0
32743: ST_TO_ADDR
// places := 0 ;
32744: LD_ADDR_VAR 0 3
32748: PUSH
32749: LD_INT 0
32751: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32752: LD_VAR 0 1
32756: PPUSH
32757: CALL_OW 266
32761: PUSH
32762: LD_INT 0
32764: DOUBLE
32765: EQUAL
32766: IFTRUE 32824
32768: LD_INT 1
32770: DOUBLE
32771: EQUAL
32772: IFTRUE 32824
32774: LD_INT 6
32776: DOUBLE
32777: EQUAL
32778: IFTRUE 32824
32780: LD_INT 7
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32824
32786: LD_INT 8
32788: DOUBLE
32789: EQUAL
32790: IFTRUE 32824
32792: LD_INT 4
32794: DOUBLE
32795: EQUAL
32796: IFTRUE 32824
32798: LD_INT 5
32800: DOUBLE
32801: EQUAL
32802: IFTRUE 32824
32804: LD_INT 2
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32824
32810: LD_INT 3
32812: DOUBLE
32813: EQUAL
32814: IFTRUE 32824
32816: LD_INT 35
32818: DOUBLE
32819: EQUAL
32820: IFTRUE 32824
32822: GO 32835
32824: POP
// places := 6 ; b_bunker , b_breastwork :
32825: LD_ADDR_VAR 0 3
32829: PUSH
32830: LD_INT 6
32832: ST_TO_ADDR
32833: GO 32880
32835: LD_INT 32
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32849
32841: LD_INT 31
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32849
32847: GO 32860
32849: POP
// places := 1 ; b_control_tower :
32850: LD_ADDR_VAR 0 3
32854: PUSH
32855: LD_INT 1
32857: ST_TO_ADDR
32858: GO 32880
32860: LD_INT 36
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32879
32868: POP
// places := 3 ; end ;
32869: LD_ADDR_VAR 0 3
32873: PUSH
32874: LD_INT 3
32876: ST_TO_ADDR
32877: GO 32880
32879: POP
// if places then
32880: LD_VAR 0 3
32884: IFFALSE 32907
// result := UnitsInside ( building ) < places ;
32886: LD_ADDR_VAR 0 2
32890: PUSH
32891: LD_VAR 0 1
32895: PPUSH
32896: CALL_OW 313
32900: PUSH
32901: LD_VAR 0 3
32905: LESS
32906: ST_TO_ADDR
// end ;
32907: LD_VAR 0 2
32911: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32912: LD_INT 0
32914: PPUSH
32915: PPUSH
32916: PPUSH
32917: PPUSH
// tmp := [ ] ;
32918: LD_ADDR_VAR 0 3
32922: PUSH
32923: EMPTY
32924: ST_TO_ADDR
// list := [ ] ;
32925: LD_ADDR_VAR 0 5
32929: PUSH
32930: EMPTY
32931: ST_TO_ADDR
// for i = 16 to 25 do
32932: LD_ADDR_VAR 0 4
32936: PUSH
32937: DOUBLE
32938: LD_INT 16
32940: DEC
32941: ST_TO_ADDR
32942: LD_INT 25
32944: PUSH
32945: FOR_TO
32946: IFFALSE 33019
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32948: LD_ADDR_VAR 0 3
32952: PUSH
32953: LD_VAR 0 3
32957: PUSH
32958: LD_INT 22
32960: PUSH
32961: LD_VAR 0 1
32965: PPUSH
32966: CALL_OW 255
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 91
32977: PUSH
32978: LD_VAR 0 1
32982: PUSH
32983: LD_INT 6
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 30
32993: PUSH
32994: LD_VAR 0 4
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: PUSH
33008: EMPTY
33009: LIST
33010: PPUSH
33011: CALL_OW 69
33015: ADD
33016: ST_TO_ADDR
33017: GO 32945
33019: POP
33020: POP
// for i = 1 to tmp do
33021: LD_ADDR_VAR 0 4
33025: PUSH
33026: DOUBLE
33027: LD_INT 1
33029: DEC
33030: ST_TO_ADDR
33031: LD_VAR 0 3
33035: PUSH
33036: FOR_TO
33037: IFFALSE 33125
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33039: LD_ADDR_VAR 0 5
33043: PUSH
33044: LD_VAR 0 5
33048: PUSH
33049: LD_VAR 0 3
33053: PUSH
33054: LD_VAR 0 4
33058: ARRAY
33059: PPUSH
33060: CALL_OW 266
33064: PUSH
33065: LD_VAR 0 3
33069: PUSH
33070: LD_VAR 0 4
33074: ARRAY
33075: PPUSH
33076: CALL_OW 250
33080: PUSH
33081: LD_VAR 0 3
33085: PUSH
33086: LD_VAR 0 4
33090: ARRAY
33091: PPUSH
33092: CALL_OW 251
33096: PUSH
33097: LD_VAR 0 3
33101: PUSH
33102: LD_VAR 0 4
33106: ARRAY
33107: PPUSH
33108: CALL_OW 254
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: PUSH
33119: EMPTY
33120: LIST
33121: ADD
33122: ST_TO_ADDR
33123: GO 33036
33125: POP
33126: POP
// result := list ;
33127: LD_ADDR_VAR 0 2
33131: PUSH
33132: LD_VAR 0 5
33136: ST_TO_ADDR
// end ;
33137: LD_VAR 0 2
33141: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33142: LD_INT 0
33144: PPUSH
33145: PPUSH
33146: PPUSH
33147: PPUSH
33148: PPUSH
33149: PPUSH
33150: PPUSH
// if not factory then
33151: LD_VAR 0 1
33155: NOT
33156: IFFALSE 33160
// exit ;
33158: GO 33753
// if control = control_apeman then
33160: LD_VAR 0 4
33164: PUSH
33165: LD_INT 5
33167: EQUAL
33168: IFFALSE 33277
// begin tmp := UnitsInside ( factory ) ;
33170: LD_ADDR_VAR 0 8
33174: PUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: CALL_OW 313
33184: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33185: LD_VAR 0 8
33189: PPUSH
33190: LD_INT 25
33192: PUSH
33193: LD_INT 12
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PPUSH
33200: CALL_OW 72
33204: NOT
33205: IFFALSE 33215
// control := control_manual ;
33207: LD_ADDR_VAR 0 4
33211: PUSH
33212: LD_INT 1
33214: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33215: LD_ADDR_VAR 0 8
33219: PUSH
33220: LD_VAR 0 1
33224: PPUSH
33225: CALL 32912 0 1
33229: ST_TO_ADDR
// if tmp then
33230: LD_VAR 0 8
33234: IFFALSE 33277
// begin for i in tmp do
33236: LD_ADDR_VAR 0 7
33240: PUSH
33241: LD_VAR 0 8
33245: PUSH
33246: FOR_IN
33247: IFFALSE 33275
// if i [ 1 ] = b_ext_radio then
33249: LD_VAR 0 7
33253: PUSH
33254: LD_INT 1
33256: ARRAY
33257: PUSH
33258: LD_INT 22
33260: EQUAL
33261: IFFALSE 33273
// begin control := control_remote ;
33263: LD_ADDR_VAR 0 4
33267: PUSH
33268: LD_INT 2
33270: ST_TO_ADDR
// break ;
33271: GO 33275
// end ;
33273: GO 33246
33275: POP
33276: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33277: LD_VAR 0 1
33281: PPUSH
33282: LD_VAR 0 2
33286: PPUSH
33287: LD_VAR 0 3
33291: PPUSH
33292: LD_VAR 0 4
33296: PPUSH
33297: LD_VAR 0 5
33301: PPUSH
33302: CALL_OW 448
33306: IFFALSE 33341
// begin result := [ chassis , engine , control , weapon ] ;
33308: LD_ADDR_VAR 0 6
33312: PUSH
33313: LD_VAR 0 2
33317: PUSH
33318: LD_VAR 0 3
33322: PUSH
33323: LD_VAR 0 4
33327: PUSH
33328: LD_VAR 0 5
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: ST_TO_ADDR
// exit ;
33339: GO 33753
// end ; _chassis := AvailableChassisList ( factory ) ;
33341: LD_ADDR_VAR 0 9
33345: PUSH
33346: LD_VAR 0 1
33350: PPUSH
33351: CALL_OW 475
33355: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33356: LD_ADDR_VAR 0 11
33360: PUSH
33361: LD_VAR 0 1
33365: PPUSH
33366: CALL_OW 476
33370: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33371: LD_ADDR_VAR 0 12
33375: PUSH
33376: LD_VAR 0 1
33380: PPUSH
33381: CALL_OW 477
33385: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33386: LD_ADDR_VAR 0 10
33390: PUSH
33391: LD_VAR 0 1
33395: PPUSH
33396: CALL_OW 478
33400: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33401: LD_VAR 0 9
33405: NOT
33406: PUSH
33407: LD_VAR 0 11
33411: NOT
33412: OR
33413: PUSH
33414: LD_VAR 0 12
33418: NOT
33419: OR
33420: PUSH
33421: LD_VAR 0 10
33425: NOT
33426: OR
33427: IFFALSE 33462
// begin result := [ chassis , engine , control , weapon ] ;
33429: LD_ADDR_VAR 0 6
33433: PUSH
33434: LD_VAR 0 2
33438: PUSH
33439: LD_VAR 0 3
33443: PUSH
33444: LD_VAR 0 4
33448: PUSH
33449: LD_VAR 0 5
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: ST_TO_ADDR
// exit ;
33460: GO 33753
// end ; if not chassis in _chassis then
33462: LD_VAR 0 2
33466: PUSH
33467: LD_VAR 0 9
33471: IN
33472: NOT
33473: IFFALSE 33499
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33475: LD_ADDR_VAR 0 2
33479: PUSH
33480: LD_VAR 0 9
33484: PUSH
33485: LD_INT 1
33487: PPUSH
33488: LD_VAR 0 9
33492: PPUSH
33493: CALL_OW 12
33497: ARRAY
33498: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33499: LD_VAR 0 2
33503: PPUSH
33504: LD_VAR 0 3
33508: PPUSH
33509: CALL 33758 0 2
33513: NOT
33514: IFFALSE 33573
// repeat engine := _engine [ 1 ] ;
33516: LD_ADDR_VAR 0 3
33520: PUSH
33521: LD_VAR 0 11
33525: PUSH
33526: LD_INT 1
33528: ARRAY
33529: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33530: LD_ADDR_VAR 0 11
33534: PUSH
33535: LD_VAR 0 11
33539: PPUSH
33540: LD_INT 1
33542: PPUSH
33543: CALL_OW 3
33547: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33548: LD_VAR 0 2
33552: PPUSH
33553: LD_VAR 0 3
33557: PPUSH
33558: CALL 33758 0 2
33562: PUSH
33563: LD_VAR 0 11
33567: PUSH
33568: EMPTY
33569: EQUAL
33570: OR
33571: IFFALSE 33516
// if not control in _control then
33573: LD_VAR 0 4
33577: PUSH
33578: LD_VAR 0 12
33582: IN
33583: NOT
33584: IFFALSE 33610
// control := _control [ rand ( 1 , _control ) ] ;
33586: LD_ADDR_VAR 0 4
33590: PUSH
33591: LD_VAR 0 12
33595: PUSH
33596: LD_INT 1
33598: PPUSH
33599: LD_VAR 0 12
33603: PPUSH
33604: CALL_OW 12
33608: ARRAY
33609: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33610: LD_VAR 0 2
33614: PPUSH
33615: LD_VAR 0 5
33619: PPUSH
33620: CALL 33978 0 2
33624: NOT
33625: IFFALSE 33684
// repeat weapon := _weapon [ 1 ] ;
33627: LD_ADDR_VAR 0 5
33631: PUSH
33632: LD_VAR 0 10
33636: PUSH
33637: LD_INT 1
33639: ARRAY
33640: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33641: LD_ADDR_VAR 0 10
33645: PUSH
33646: LD_VAR 0 10
33650: PPUSH
33651: LD_INT 1
33653: PPUSH
33654: CALL_OW 3
33658: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33659: LD_VAR 0 2
33663: PPUSH
33664: LD_VAR 0 5
33668: PPUSH
33669: CALL 33978 0 2
33673: PUSH
33674: LD_VAR 0 10
33678: PUSH
33679: EMPTY
33680: EQUAL
33681: OR
33682: IFFALSE 33627
// result := [ ] ;
33684: LD_ADDR_VAR 0 6
33688: PUSH
33689: EMPTY
33690: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33691: LD_VAR 0 1
33695: PPUSH
33696: LD_VAR 0 2
33700: PPUSH
33701: LD_VAR 0 3
33705: PPUSH
33706: LD_VAR 0 4
33710: PPUSH
33711: LD_VAR 0 5
33715: PPUSH
33716: CALL_OW 448
33720: IFFALSE 33753
// result := [ chassis , engine , control , weapon ] ;
33722: LD_ADDR_VAR 0 6
33726: PUSH
33727: LD_VAR 0 2
33731: PUSH
33732: LD_VAR 0 3
33736: PUSH
33737: LD_VAR 0 4
33741: PUSH
33742: LD_VAR 0 5
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: ST_TO_ADDR
// end ;
33753: LD_VAR 0 6
33757: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33758: LD_INT 0
33760: PPUSH
// if not chassis or not engine then
33761: LD_VAR 0 1
33765: NOT
33766: PUSH
33767: LD_VAR 0 2
33771: NOT
33772: OR
33773: IFFALSE 33777
// exit ;
33775: GO 33973
// case engine of engine_solar :
33777: LD_VAR 0 2
33781: PUSH
33782: LD_INT 2
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33790
33788: GO 33828
33790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_INT 11
33798: PUSH
33799: LD_INT 12
33801: PUSH
33802: LD_INT 13
33804: PUSH
33805: LD_INT 14
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 3
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: ST_TO_ADDR
33826: GO 33957
33828: LD_INT 1
33830: DOUBLE
33831: EQUAL
33832: IFTRUE 33836
33834: GO 33898
33836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33837: LD_ADDR_VAR 0 3
33841: PUSH
33842: LD_INT 11
33844: PUSH
33845: LD_INT 12
33847: PUSH
33848: LD_INT 13
33850: PUSH
33851: LD_INT 14
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: LD_INT 4
33865: PUSH
33866: LD_INT 5
33868: PUSH
33869: LD_INT 21
33871: PUSH
33872: LD_INT 23
33874: PUSH
33875: LD_INT 22
33877: PUSH
33878: LD_INT 24
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: ST_TO_ADDR
33896: GO 33957
33898: LD_INT 3
33900: DOUBLE
33901: EQUAL
33902: IFTRUE 33906
33904: GO 33956
33906: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_INT 13
33914: PUSH
33915: LD_INT 14
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: LD_INT 3
33923: PUSH
33924: LD_INT 4
33926: PUSH
33927: LD_INT 5
33929: PUSH
33930: LD_INT 21
33932: PUSH
33933: LD_INT 22
33935: PUSH
33936: LD_INT 23
33938: PUSH
33939: LD_INT 24
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: ST_TO_ADDR
33954: GO 33957
33956: POP
// result := ( chassis in result ) ;
33957: LD_ADDR_VAR 0 3
33961: PUSH
33962: LD_VAR 0 1
33966: PUSH
33967: LD_VAR 0 3
33971: IN
33972: ST_TO_ADDR
// end ;
33973: LD_VAR 0 3
33977: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33978: LD_INT 0
33980: PPUSH
// if not chassis or not weapon then
33981: LD_VAR 0 1
33985: NOT
33986: PUSH
33987: LD_VAR 0 2
33991: NOT
33992: OR
33993: IFFALSE 33997
// exit ;
33995: GO 35057
// case weapon of us_machine_gun :
33997: LD_VAR 0 2
34001: PUSH
34002: LD_INT 2
34004: DOUBLE
34005: EQUAL
34006: IFTRUE 34010
34008: GO 34040
34010: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34011: LD_ADDR_VAR 0 3
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: LD_INT 3
34024: PUSH
34025: LD_INT 4
34027: PUSH
34028: LD_INT 5
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: ST_TO_ADDR
34038: GO 35041
34040: LD_INT 3
34042: DOUBLE
34043: EQUAL
34044: IFTRUE 34048
34046: GO 34078
34048: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34049: LD_ADDR_VAR 0 3
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: LD_INT 3
34062: PUSH
34063: LD_INT 4
34065: PUSH
34066: LD_INT 5
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: ST_TO_ADDR
34076: GO 35041
34078: LD_INT 11
34080: DOUBLE
34081: EQUAL
34082: IFTRUE 34086
34084: GO 34116
34086: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34087: LD_ADDR_VAR 0 3
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: LD_INT 3
34100: PUSH
34101: LD_INT 4
34103: PUSH
34104: LD_INT 5
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: ST_TO_ADDR
34114: GO 35041
34116: LD_INT 4
34118: DOUBLE
34119: EQUAL
34120: IFTRUE 34124
34122: GO 34150
34124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: LD_INT 4
34138: PUSH
34139: LD_INT 5
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
34148: GO 35041
34150: LD_INT 5
34152: DOUBLE
34153: EQUAL
34154: IFTRUE 34158
34156: GO 34184
34158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: LD_INT 4
34172: PUSH
34173: LD_INT 5
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: ST_TO_ADDR
34182: GO 35041
34184: LD_INT 9
34186: DOUBLE
34187: EQUAL
34188: IFTRUE 34192
34190: GO 34218
34192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34193: LD_ADDR_VAR 0 3
34197: PUSH
34198: LD_INT 2
34200: PUSH
34201: LD_INT 3
34203: PUSH
34204: LD_INT 4
34206: PUSH
34207: LD_INT 5
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: ST_TO_ADDR
34216: GO 35041
34218: LD_INT 7
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34252
34226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34227: LD_ADDR_VAR 0 3
34231: PUSH
34232: LD_INT 2
34234: PUSH
34235: LD_INT 3
34237: PUSH
34238: LD_INT 4
34240: PUSH
34241: LD_INT 5
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: ST_TO_ADDR
34250: GO 35041
34252: LD_INT 12
34254: DOUBLE
34255: EQUAL
34256: IFTRUE 34260
34258: GO 34286
34260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34261: LD_ADDR_VAR 0 3
34265: PUSH
34266: LD_INT 2
34268: PUSH
34269: LD_INT 3
34271: PUSH
34272: LD_INT 4
34274: PUSH
34275: LD_INT 5
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: ST_TO_ADDR
34284: GO 35041
34286: LD_INT 13
34288: DOUBLE
34289: EQUAL
34290: IFTRUE 34294
34292: GO 34320
34294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34295: LD_ADDR_VAR 0 3
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: LD_INT 3
34305: PUSH
34306: LD_INT 4
34308: PUSH
34309: LD_INT 5
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: ST_TO_ADDR
34318: GO 35041
34320: LD_INT 14
34322: DOUBLE
34323: EQUAL
34324: IFTRUE 34328
34326: GO 34346
34328: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34329: LD_ADDR_VAR 0 3
34333: PUSH
34334: LD_INT 4
34336: PUSH
34337: LD_INT 5
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: ST_TO_ADDR
34344: GO 35041
34346: LD_INT 6
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34372
34354: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34355: LD_ADDR_VAR 0 3
34359: PUSH
34360: LD_INT 4
34362: PUSH
34363: LD_INT 5
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: ST_TO_ADDR
34370: GO 35041
34372: LD_INT 10
34374: DOUBLE
34375: EQUAL
34376: IFTRUE 34380
34378: GO 34398
34380: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34381: LD_ADDR_VAR 0 3
34385: PUSH
34386: LD_INT 4
34388: PUSH
34389: LD_INT 5
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: ST_TO_ADDR
34396: GO 35041
34398: LD_INT 22
34400: DOUBLE
34401: EQUAL
34402: IFTRUE 34406
34404: GO 34432
34406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34407: LD_ADDR_VAR 0 3
34411: PUSH
34412: LD_INT 11
34414: PUSH
34415: LD_INT 12
34417: PUSH
34418: LD_INT 13
34420: PUSH
34421: LD_INT 14
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: ST_TO_ADDR
34430: GO 35041
34432: LD_INT 23
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34466
34440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34441: LD_ADDR_VAR 0 3
34445: PUSH
34446: LD_INT 11
34448: PUSH
34449: LD_INT 12
34451: PUSH
34452: LD_INT 13
34454: PUSH
34455: LD_INT 14
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: ST_TO_ADDR
34464: GO 35041
34466: LD_INT 24
34468: DOUBLE
34469: EQUAL
34470: IFTRUE 34474
34472: GO 34500
34474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34475: LD_ADDR_VAR 0 3
34479: PUSH
34480: LD_INT 11
34482: PUSH
34483: LD_INT 12
34485: PUSH
34486: LD_INT 13
34488: PUSH
34489: LD_INT 14
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: ST_TO_ADDR
34498: GO 35041
34500: LD_INT 30
34502: DOUBLE
34503: EQUAL
34504: IFTRUE 34508
34506: GO 34534
34508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34509: LD_ADDR_VAR 0 3
34513: PUSH
34514: LD_INT 11
34516: PUSH
34517: LD_INT 12
34519: PUSH
34520: LD_INT 13
34522: PUSH
34523: LD_INT 14
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: ST_TO_ADDR
34532: GO 35041
34534: LD_INT 25
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34542
34540: GO 34560
34542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_INT 13
34550: PUSH
34551: LD_INT 14
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: ST_TO_ADDR
34558: GO 35041
34560: LD_INT 27
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34586
34568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34569: LD_ADDR_VAR 0 3
34573: PUSH
34574: LD_INT 13
34576: PUSH
34577: LD_INT 14
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: ST_TO_ADDR
34584: GO 35041
34586: LD_INT 92
34588: DOUBLE
34589: EQUAL
34590: IFTRUE 34594
34592: GO 34620
34594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34595: LD_ADDR_VAR 0 3
34599: PUSH
34600: LD_INT 11
34602: PUSH
34603: LD_INT 12
34605: PUSH
34606: LD_INT 13
34608: PUSH
34609: LD_INT 14
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: ST_TO_ADDR
34618: GO 35041
34620: LD_INT 28
34622: DOUBLE
34623: EQUAL
34624: IFTRUE 34628
34626: GO 34646
34628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34629: LD_ADDR_VAR 0 3
34633: PUSH
34634: LD_INT 13
34636: PUSH
34637: LD_INT 14
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: ST_TO_ADDR
34644: GO 35041
34646: LD_INT 29
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34654
34652: GO 34672
34654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34655: LD_ADDR_VAR 0 3
34659: PUSH
34660: LD_INT 13
34662: PUSH
34663: LD_INT 14
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: ST_TO_ADDR
34670: GO 35041
34672: LD_INT 31
34674: DOUBLE
34675: EQUAL
34676: IFTRUE 34680
34678: GO 34698
34680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34681: LD_ADDR_VAR 0 3
34685: PUSH
34686: LD_INT 13
34688: PUSH
34689: LD_INT 14
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: ST_TO_ADDR
34696: GO 35041
34698: LD_INT 26
34700: DOUBLE
34701: EQUAL
34702: IFTRUE 34706
34704: GO 34724
34706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34707: LD_ADDR_VAR 0 3
34711: PUSH
34712: LD_INT 13
34714: PUSH
34715: LD_INT 14
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: ST_TO_ADDR
34722: GO 35041
34724: LD_INT 42
34726: DOUBLE
34727: EQUAL
34728: IFTRUE 34732
34730: GO 34758
34732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34733: LD_ADDR_VAR 0 3
34737: PUSH
34738: LD_INT 21
34740: PUSH
34741: LD_INT 22
34743: PUSH
34744: LD_INT 23
34746: PUSH
34747: LD_INT 24
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: ST_TO_ADDR
34756: GO 35041
34758: LD_INT 43
34760: DOUBLE
34761: EQUAL
34762: IFTRUE 34766
34764: GO 34792
34766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34767: LD_ADDR_VAR 0 3
34771: PUSH
34772: LD_INT 21
34774: PUSH
34775: LD_INT 22
34777: PUSH
34778: LD_INT 23
34780: PUSH
34781: LD_INT 24
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: ST_TO_ADDR
34790: GO 35041
34792: LD_INT 44
34794: DOUBLE
34795: EQUAL
34796: IFTRUE 34800
34798: GO 34826
34800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34801: LD_ADDR_VAR 0 3
34805: PUSH
34806: LD_INT 21
34808: PUSH
34809: LD_INT 22
34811: PUSH
34812: LD_INT 23
34814: PUSH
34815: LD_INT 24
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: ST_TO_ADDR
34824: GO 35041
34826: LD_INT 45
34828: DOUBLE
34829: EQUAL
34830: IFTRUE 34834
34832: GO 34860
34834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34835: LD_ADDR_VAR 0 3
34839: PUSH
34840: LD_INT 21
34842: PUSH
34843: LD_INT 22
34845: PUSH
34846: LD_INT 23
34848: PUSH
34849: LD_INT 24
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: ST_TO_ADDR
34858: GO 35041
34860: LD_INT 49
34862: DOUBLE
34863: EQUAL
34864: IFTRUE 34868
34866: GO 34894
34868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34869: LD_ADDR_VAR 0 3
34873: PUSH
34874: LD_INT 21
34876: PUSH
34877: LD_INT 22
34879: PUSH
34880: LD_INT 23
34882: PUSH
34883: LD_INT 24
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: ST_TO_ADDR
34892: GO 35041
34894: LD_INT 51
34896: DOUBLE
34897: EQUAL
34898: IFTRUE 34902
34900: GO 34928
34902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34903: LD_ADDR_VAR 0 3
34907: PUSH
34908: LD_INT 21
34910: PUSH
34911: LD_INT 22
34913: PUSH
34914: LD_INT 23
34916: PUSH
34917: LD_INT 24
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
34926: GO 35041
34928: LD_INT 52
34930: DOUBLE
34931: EQUAL
34932: IFTRUE 34936
34934: GO 34962
34936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_INT 21
34944: PUSH
34945: LD_INT 22
34947: PUSH
34948: LD_INT 23
34950: PUSH
34951: LD_INT 24
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: ST_TO_ADDR
34960: GO 35041
34962: LD_INT 53
34964: DOUBLE
34965: EQUAL
34966: IFTRUE 34970
34968: GO 34988
34970: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34971: LD_ADDR_VAR 0 3
34975: PUSH
34976: LD_INT 23
34978: PUSH
34979: LD_INT 24
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: ST_TO_ADDR
34986: GO 35041
34988: LD_INT 46
34990: DOUBLE
34991: EQUAL
34992: IFTRUE 34996
34994: GO 35014
34996: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34997: LD_ADDR_VAR 0 3
35001: PUSH
35002: LD_INT 23
35004: PUSH
35005: LD_INT 24
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: ST_TO_ADDR
35012: GO 35041
35014: LD_INT 47
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35040
35022: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_INT 23
35030: PUSH
35031: LD_INT 24
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: ST_TO_ADDR
35038: GO 35041
35040: POP
// result := ( chassis in result ) ;
35041: LD_ADDR_VAR 0 3
35045: PUSH
35046: LD_VAR 0 1
35050: PUSH
35051: LD_VAR 0 3
35055: IN
35056: ST_TO_ADDR
// end ;
35057: LD_VAR 0 3
35061: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35062: LD_INT 0
35064: PPUSH
35065: PPUSH
35066: PPUSH
35067: PPUSH
35068: PPUSH
35069: PPUSH
35070: PPUSH
// result := array ;
35071: LD_ADDR_VAR 0 5
35075: PUSH
35076: LD_VAR 0 1
35080: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35081: LD_VAR 0 1
35085: NOT
35086: PUSH
35087: LD_VAR 0 2
35091: NOT
35092: OR
35093: PUSH
35094: LD_VAR 0 3
35098: NOT
35099: OR
35100: PUSH
35101: LD_VAR 0 2
35105: PUSH
35106: LD_VAR 0 1
35110: GREATER
35111: OR
35112: PUSH
35113: LD_VAR 0 3
35117: PUSH
35118: LD_VAR 0 1
35122: GREATER
35123: OR
35124: IFFALSE 35128
// exit ;
35126: GO 35424
// if direction then
35128: LD_VAR 0 4
35132: IFFALSE 35196
// begin d := 1 ;
35134: LD_ADDR_VAR 0 9
35138: PUSH
35139: LD_INT 1
35141: ST_TO_ADDR
// if i_from > i_to then
35142: LD_VAR 0 2
35146: PUSH
35147: LD_VAR 0 3
35151: GREATER
35152: IFFALSE 35178
// length := ( array - i_from ) + i_to else
35154: LD_ADDR_VAR 0 11
35158: PUSH
35159: LD_VAR 0 1
35163: PUSH
35164: LD_VAR 0 2
35168: MINUS
35169: PUSH
35170: LD_VAR 0 3
35174: PLUS
35175: ST_TO_ADDR
35176: GO 35194
// length := i_to - i_from ;
35178: LD_ADDR_VAR 0 11
35182: PUSH
35183: LD_VAR 0 3
35187: PUSH
35188: LD_VAR 0 2
35192: MINUS
35193: ST_TO_ADDR
// end else
35194: GO 35257
// begin d := - 1 ;
35196: LD_ADDR_VAR 0 9
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: ST_TO_ADDR
// if i_from > i_to then
35205: LD_VAR 0 2
35209: PUSH
35210: LD_VAR 0 3
35214: GREATER
35215: IFFALSE 35235
// length := i_from - i_to else
35217: LD_ADDR_VAR 0 11
35221: PUSH
35222: LD_VAR 0 2
35226: PUSH
35227: LD_VAR 0 3
35231: MINUS
35232: ST_TO_ADDR
35233: GO 35257
// length := ( array - i_to ) + i_from ;
35235: LD_ADDR_VAR 0 11
35239: PUSH
35240: LD_VAR 0 1
35244: PUSH
35245: LD_VAR 0 3
35249: MINUS
35250: PUSH
35251: LD_VAR 0 2
35255: PLUS
35256: ST_TO_ADDR
// end ; if not length then
35257: LD_VAR 0 11
35261: NOT
35262: IFFALSE 35266
// exit ;
35264: GO 35424
// tmp := array ;
35266: LD_ADDR_VAR 0 10
35270: PUSH
35271: LD_VAR 0 1
35275: ST_TO_ADDR
// for i = 1 to length do
35276: LD_ADDR_VAR 0 6
35280: PUSH
35281: DOUBLE
35282: LD_INT 1
35284: DEC
35285: ST_TO_ADDR
35286: LD_VAR 0 11
35290: PUSH
35291: FOR_TO
35292: IFFALSE 35412
// begin for j = 1 to array do
35294: LD_ADDR_VAR 0 7
35298: PUSH
35299: DOUBLE
35300: LD_INT 1
35302: DEC
35303: ST_TO_ADDR
35304: LD_VAR 0 1
35308: PUSH
35309: FOR_TO
35310: IFFALSE 35398
// begin k := j + d ;
35312: LD_ADDR_VAR 0 8
35316: PUSH
35317: LD_VAR 0 7
35321: PUSH
35322: LD_VAR 0 9
35326: PLUS
35327: ST_TO_ADDR
// if k > array then
35328: LD_VAR 0 8
35332: PUSH
35333: LD_VAR 0 1
35337: GREATER
35338: IFFALSE 35348
// k := 1 ;
35340: LD_ADDR_VAR 0 8
35344: PUSH
35345: LD_INT 1
35347: ST_TO_ADDR
// if not k then
35348: LD_VAR 0 8
35352: NOT
35353: IFFALSE 35365
// k := array ;
35355: LD_ADDR_VAR 0 8
35359: PUSH
35360: LD_VAR 0 1
35364: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35365: LD_ADDR_VAR 0 10
35369: PUSH
35370: LD_VAR 0 10
35374: PPUSH
35375: LD_VAR 0 8
35379: PPUSH
35380: LD_VAR 0 1
35384: PUSH
35385: LD_VAR 0 7
35389: ARRAY
35390: PPUSH
35391: CALL_OW 1
35395: ST_TO_ADDR
// end ;
35396: GO 35309
35398: POP
35399: POP
// array := tmp ;
35400: LD_ADDR_VAR 0 1
35404: PUSH
35405: LD_VAR 0 10
35409: ST_TO_ADDR
// end ;
35410: GO 35291
35412: POP
35413: POP
// result := array ;
35414: LD_ADDR_VAR 0 5
35418: PUSH
35419: LD_VAR 0 1
35423: ST_TO_ADDR
// end ;
35424: LD_VAR 0 5
35428: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35429: LD_INT 0
35431: PPUSH
35432: PPUSH
// result := 0 ;
35433: LD_ADDR_VAR 0 3
35437: PUSH
35438: LD_INT 0
35440: ST_TO_ADDR
// if not array or not value in array then
35441: LD_VAR 0 1
35445: NOT
35446: PUSH
35447: LD_VAR 0 2
35451: PUSH
35452: LD_VAR 0 1
35456: IN
35457: NOT
35458: OR
35459: IFFALSE 35463
// exit ;
35461: GO 35517
// for i = 1 to array do
35463: LD_ADDR_VAR 0 4
35467: PUSH
35468: DOUBLE
35469: LD_INT 1
35471: DEC
35472: ST_TO_ADDR
35473: LD_VAR 0 1
35477: PUSH
35478: FOR_TO
35479: IFFALSE 35515
// if value = array [ i ] then
35481: LD_VAR 0 2
35485: PUSH
35486: LD_VAR 0 1
35490: PUSH
35491: LD_VAR 0 4
35495: ARRAY
35496: EQUAL
35497: IFFALSE 35513
// begin result := i ;
35499: LD_ADDR_VAR 0 3
35503: PUSH
35504: LD_VAR 0 4
35508: ST_TO_ADDR
// exit ;
35509: POP
35510: POP
35511: GO 35517
// end ;
35513: GO 35478
35515: POP
35516: POP
// end ;
35517: LD_VAR 0 3
35521: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35522: LD_INT 0
35524: PPUSH
// vc_chassis := chassis ;
35525: LD_ADDR_OWVAR 37
35529: PUSH
35530: LD_VAR 0 1
35534: ST_TO_ADDR
// vc_engine := engine ;
35535: LD_ADDR_OWVAR 39
35539: PUSH
35540: LD_VAR 0 2
35544: ST_TO_ADDR
// vc_control := control ;
35545: LD_ADDR_OWVAR 38
35549: PUSH
35550: LD_VAR 0 3
35554: ST_TO_ADDR
// vc_weapon := weapon ;
35555: LD_ADDR_OWVAR 40
35559: PUSH
35560: LD_VAR 0 4
35564: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35565: LD_ADDR_OWVAR 41
35569: PUSH
35570: LD_VAR 0 5
35574: ST_TO_ADDR
// end ;
35575: LD_VAR 0 6
35579: RET
// export function WantPlant ( unit ) ; var task ; begin
35580: LD_INT 0
35582: PPUSH
35583: PPUSH
// result := false ;
35584: LD_ADDR_VAR 0 2
35588: PUSH
35589: LD_INT 0
35591: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35592: LD_ADDR_VAR 0 3
35596: PUSH
35597: LD_VAR 0 1
35601: PPUSH
35602: CALL_OW 437
35606: ST_TO_ADDR
// if task then
35607: LD_VAR 0 3
35611: IFFALSE 35639
// if task [ 1 ] [ 1 ] = p then
35613: LD_VAR 0 3
35617: PUSH
35618: LD_INT 1
35620: ARRAY
35621: PUSH
35622: LD_INT 1
35624: ARRAY
35625: PUSH
35626: LD_STRING p
35628: EQUAL
35629: IFFALSE 35639
// result := true ;
35631: LD_ADDR_VAR 0 2
35635: PUSH
35636: LD_INT 1
35638: ST_TO_ADDR
// end ;
35639: LD_VAR 0 2
35643: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35644: LD_INT 0
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
// if pos < 1 then
35650: LD_VAR 0 2
35654: PUSH
35655: LD_INT 1
35657: LESS
35658: IFFALSE 35662
// exit ;
35660: GO 35965
// if pos = 1 then
35662: LD_VAR 0 2
35666: PUSH
35667: LD_INT 1
35669: EQUAL
35670: IFFALSE 35703
// result := Replace ( arr , pos [ 1 ] , value ) else
35672: LD_ADDR_VAR 0 4
35676: PUSH
35677: LD_VAR 0 1
35681: PPUSH
35682: LD_VAR 0 2
35686: PUSH
35687: LD_INT 1
35689: ARRAY
35690: PPUSH
35691: LD_VAR 0 3
35695: PPUSH
35696: CALL_OW 1
35700: ST_TO_ADDR
35701: GO 35965
// begin tmp := arr ;
35703: LD_ADDR_VAR 0 6
35707: PUSH
35708: LD_VAR 0 1
35712: ST_TO_ADDR
// s_arr := [ tmp ] ;
35713: LD_ADDR_VAR 0 7
35717: PUSH
35718: LD_VAR 0 6
35722: PUSH
35723: EMPTY
35724: LIST
35725: ST_TO_ADDR
// for i = 1 to pos - 1 do
35726: LD_ADDR_VAR 0 5
35730: PUSH
35731: DOUBLE
35732: LD_INT 1
35734: DEC
35735: ST_TO_ADDR
35736: LD_VAR 0 2
35740: PUSH
35741: LD_INT 1
35743: MINUS
35744: PUSH
35745: FOR_TO
35746: IFFALSE 35791
// begin tmp := tmp [ pos [ i ] ] ;
35748: LD_ADDR_VAR 0 6
35752: PUSH
35753: LD_VAR 0 6
35757: PUSH
35758: LD_VAR 0 2
35762: PUSH
35763: LD_VAR 0 5
35767: ARRAY
35768: ARRAY
35769: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35770: LD_ADDR_VAR 0 7
35774: PUSH
35775: LD_VAR 0 7
35779: PUSH
35780: LD_VAR 0 6
35784: PUSH
35785: EMPTY
35786: LIST
35787: ADD
35788: ST_TO_ADDR
// end ;
35789: GO 35745
35791: POP
35792: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35793: LD_ADDR_VAR 0 6
35797: PUSH
35798: LD_VAR 0 6
35802: PPUSH
35803: LD_VAR 0 2
35807: PUSH
35808: LD_VAR 0 2
35812: ARRAY
35813: PPUSH
35814: LD_VAR 0 3
35818: PPUSH
35819: CALL_OW 1
35823: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35824: LD_ADDR_VAR 0 7
35828: PUSH
35829: LD_VAR 0 7
35833: PPUSH
35834: LD_VAR 0 7
35838: PPUSH
35839: LD_VAR 0 6
35843: PPUSH
35844: CALL_OW 1
35848: ST_TO_ADDR
// for i = s_arr downto 2 do
35849: LD_ADDR_VAR 0 5
35853: PUSH
35854: DOUBLE
35855: LD_VAR 0 7
35859: INC
35860: ST_TO_ADDR
35861: LD_INT 2
35863: PUSH
35864: FOR_DOWNTO
35865: IFFALSE 35949
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35867: LD_ADDR_VAR 0 6
35871: PUSH
35872: LD_VAR 0 7
35876: PUSH
35877: LD_VAR 0 5
35881: PUSH
35882: LD_INT 1
35884: MINUS
35885: ARRAY
35886: PPUSH
35887: LD_VAR 0 2
35891: PUSH
35892: LD_VAR 0 5
35896: PUSH
35897: LD_INT 1
35899: MINUS
35900: ARRAY
35901: PPUSH
35902: LD_VAR 0 7
35906: PUSH
35907: LD_VAR 0 5
35911: ARRAY
35912: PPUSH
35913: CALL_OW 1
35917: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35918: LD_ADDR_VAR 0 7
35922: PUSH
35923: LD_VAR 0 7
35927: PPUSH
35928: LD_VAR 0 5
35932: PUSH
35933: LD_INT 1
35935: MINUS
35936: PPUSH
35937: LD_VAR 0 6
35941: PPUSH
35942: CALL_OW 1
35946: ST_TO_ADDR
// end ;
35947: GO 35864
35949: POP
35950: POP
// result := s_arr [ 1 ] ;
35951: LD_ADDR_VAR 0 4
35955: PUSH
35956: LD_VAR 0 7
35960: PUSH
35961: LD_INT 1
35963: ARRAY
35964: ST_TO_ADDR
// end ; end ;
35965: LD_VAR 0 4
35969: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35970: LD_INT 0
35972: PPUSH
35973: PPUSH
// if not list then
35974: LD_VAR 0 1
35978: NOT
35979: IFFALSE 35983
// exit ;
35981: GO 36074
// i := list [ pos1 ] ;
35983: LD_ADDR_VAR 0 5
35987: PUSH
35988: LD_VAR 0 1
35992: PUSH
35993: LD_VAR 0 2
35997: ARRAY
35998: ST_TO_ADDR
// if not i then
35999: LD_VAR 0 5
36003: NOT
36004: IFFALSE 36008
// exit ;
36006: GO 36074
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36008: LD_ADDR_VAR 0 1
36012: PUSH
36013: LD_VAR 0 1
36017: PPUSH
36018: LD_VAR 0 2
36022: PPUSH
36023: LD_VAR 0 1
36027: PUSH
36028: LD_VAR 0 3
36032: ARRAY
36033: PPUSH
36034: CALL_OW 1
36038: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36039: LD_ADDR_VAR 0 1
36043: PUSH
36044: LD_VAR 0 1
36048: PPUSH
36049: LD_VAR 0 3
36053: PPUSH
36054: LD_VAR 0 5
36058: PPUSH
36059: CALL_OW 1
36063: ST_TO_ADDR
// result := list ;
36064: LD_ADDR_VAR 0 4
36068: PUSH
36069: LD_VAR 0 1
36073: ST_TO_ADDR
// end ;
36074: LD_VAR 0 4
36078: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36079: LD_INT 0
36081: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36082: LD_ADDR_VAR 0 5
36086: PUSH
36087: LD_VAR 0 1
36091: PPUSH
36092: CALL_OW 250
36096: PPUSH
36097: LD_VAR 0 1
36101: PPUSH
36102: CALL_OW 251
36106: PPUSH
36107: LD_VAR 0 2
36111: PPUSH
36112: LD_VAR 0 3
36116: PPUSH
36117: LD_VAR 0 4
36121: PPUSH
36122: CALL 36132 0 5
36126: ST_TO_ADDR
// end ;
36127: LD_VAR 0 5
36131: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36132: LD_INT 0
36134: PPUSH
36135: PPUSH
36136: PPUSH
36137: PPUSH
// if not list then
36138: LD_VAR 0 3
36142: NOT
36143: IFFALSE 36147
// exit ;
36145: GO 36535
// result := [ ] ;
36147: LD_ADDR_VAR 0 6
36151: PUSH
36152: EMPTY
36153: ST_TO_ADDR
// for i in list do
36154: LD_ADDR_VAR 0 7
36158: PUSH
36159: LD_VAR 0 3
36163: PUSH
36164: FOR_IN
36165: IFFALSE 36367
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36167: LD_ADDR_VAR 0 9
36171: PUSH
36172: LD_VAR 0 7
36176: PPUSH
36177: LD_VAR 0 1
36181: PPUSH
36182: LD_VAR 0 2
36186: PPUSH
36187: CALL_OW 297
36191: ST_TO_ADDR
// if not result then
36192: LD_VAR 0 6
36196: NOT
36197: IFFALSE 36223
// result := [ [ i , tmp ] ] else
36199: LD_ADDR_VAR 0 6
36203: PUSH
36204: LD_VAR 0 7
36208: PUSH
36209: LD_VAR 0 9
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: EMPTY
36219: LIST
36220: ST_TO_ADDR
36221: GO 36365
// begin if result [ result ] [ 2 ] < tmp then
36223: LD_VAR 0 6
36227: PUSH
36228: LD_VAR 0 6
36232: ARRAY
36233: PUSH
36234: LD_INT 2
36236: ARRAY
36237: PUSH
36238: LD_VAR 0 9
36242: LESS
36243: IFFALSE 36285
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36245: LD_ADDR_VAR 0 6
36249: PUSH
36250: LD_VAR 0 6
36254: PPUSH
36255: LD_VAR 0 6
36259: PUSH
36260: LD_INT 1
36262: PLUS
36263: PPUSH
36264: LD_VAR 0 7
36268: PUSH
36269: LD_VAR 0 9
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PPUSH
36278: CALL_OW 2
36282: ST_TO_ADDR
36283: GO 36365
// for j = 1 to result do
36285: LD_ADDR_VAR 0 8
36289: PUSH
36290: DOUBLE
36291: LD_INT 1
36293: DEC
36294: ST_TO_ADDR
36295: LD_VAR 0 6
36299: PUSH
36300: FOR_TO
36301: IFFALSE 36363
// begin if tmp < result [ j ] [ 2 ] then
36303: LD_VAR 0 9
36307: PUSH
36308: LD_VAR 0 6
36312: PUSH
36313: LD_VAR 0 8
36317: ARRAY
36318: PUSH
36319: LD_INT 2
36321: ARRAY
36322: LESS
36323: IFFALSE 36361
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36325: LD_ADDR_VAR 0 6
36329: PUSH
36330: LD_VAR 0 6
36334: PPUSH
36335: LD_VAR 0 8
36339: PPUSH
36340: LD_VAR 0 7
36344: PUSH
36345: LD_VAR 0 9
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PPUSH
36354: CALL_OW 2
36358: ST_TO_ADDR
// break ;
36359: GO 36363
// end ; end ;
36361: GO 36300
36363: POP
36364: POP
// end ; end ;
36365: GO 36164
36367: POP
36368: POP
// if result and not asc then
36369: LD_VAR 0 6
36373: PUSH
36374: LD_VAR 0 4
36378: NOT
36379: AND
36380: IFFALSE 36455
// begin tmp := result ;
36382: LD_ADDR_VAR 0 9
36386: PUSH
36387: LD_VAR 0 6
36391: ST_TO_ADDR
// for i = tmp downto 1 do
36392: LD_ADDR_VAR 0 7
36396: PUSH
36397: DOUBLE
36398: LD_VAR 0 9
36402: INC
36403: ST_TO_ADDR
36404: LD_INT 1
36406: PUSH
36407: FOR_DOWNTO
36408: IFFALSE 36453
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36410: LD_ADDR_VAR 0 6
36414: PUSH
36415: LD_VAR 0 6
36419: PPUSH
36420: LD_VAR 0 9
36424: PUSH
36425: LD_VAR 0 7
36429: MINUS
36430: PUSH
36431: LD_INT 1
36433: PLUS
36434: PPUSH
36435: LD_VAR 0 9
36439: PUSH
36440: LD_VAR 0 7
36444: ARRAY
36445: PPUSH
36446: CALL_OW 1
36450: ST_TO_ADDR
36451: GO 36407
36453: POP
36454: POP
// end ; tmp := [ ] ;
36455: LD_ADDR_VAR 0 9
36459: PUSH
36460: EMPTY
36461: ST_TO_ADDR
// if mode then
36462: LD_VAR 0 5
36466: IFFALSE 36535
// begin for i = 1 to result do
36468: LD_ADDR_VAR 0 7
36472: PUSH
36473: DOUBLE
36474: LD_INT 1
36476: DEC
36477: ST_TO_ADDR
36478: LD_VAR 0 6
36482: PUSH
36483: FOR_TO
36484: IFFALSE 36523
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36486: LD_ADDR_VAR 0 9
36490: PUSH
36491: LD_VAR 0 9
36495: PPUSH
36496: LD_VAR 0 7
36500: PPUSH
36501: LD_VAR 0 6
36505: PUSH
36506: LD_VAR 0 7
36510: ARRAY
36511: PUSH
36512: LD_INT 1
36514: ARRAY
36515: PPUSH
36516: CALL_OW 1
36520: ST_TO_ADDR
36521: GO 36483
36523: POP
36524: POP
// result := tmp ;
36525: LD_ADDR_VAR 0 6
36529: PUSH
36530: LD_VAR 0 9
36534: ST_TO_ADDR
// end ; end ;
36535: LD_VAR 0 6
36539: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36540: LD_INT 0
36542: PPUSH
36543: PPUSH
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36548: LD_ADDR_VAR 0 5
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// if not x or not y then
36570: LD_VAR 0 2
36574: NOT
36575: PUSH
36576: LD_VAR 0 3
36580: NOT
36581: OR
36582: IFFALSE 36586
// exit ;
36584: GO 38236
// if not range then
36586: LD_VAR 0 4
36590: NOT
36591: IFFALSE 36601
// range := 10 ;
36593: LD_ADDR_VAR 0 4
36597: PUSH
36598: LD_INT 10
36600: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36601: LD_ADDR_VAR 0 8
36605: PUSH
36606: LD_INT 81
36608: PUSH
36609: LD_VAR 0 1
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 92
36620: PUSH
36621: LD_VAR 0 2
36625: PUSH
36626: LD_VAR 0 3
36630: PUSH
36631: LD_VAR 0 4
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 3
36644: PUSH
36645: LD_INT 21
36647: PUSH
36648: LD_INT 3
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: PPUSH
36664: CALL_OW 69
36668: ST_TO_ADDR
// if not tmp then
36669: LD_VAR 0 8
36673: NOT
36674: IFFALSE 36678
// exit ;
36676: GO 38236
// for i in tmp do
36678: LD_ADDR_VAR 0 6
36682: PUSH
36683: LD_VAR 0 8
36687: PUSH
36688: FOR_IN
36689: IFFALSE 38211
// begin points := [ 0 , 0 , 0 ] ;
36691: LD_ADDR_VAR 0 9
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: ST_TO_ADDR
// bpoints := 1 ;
36710: LD_ADDR_VAR 0 10
36714: PUSH
36715: LD_INT 1
36717: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36718: LD_VAR 0 6
36722: PPUSH
36723: CALL_OW 247
36727: PUSH
36728: LD_INT 1
36730: DOUBLE
36731: EQUAL
36732: IFTRUE 36736
36734: GO 37314
36736: POP
// begin if GetClass ( i ) = 1 then
36737: LD_VAR 0 6
36741: PPUSH
36742: CALL_OW 257
36746: PUSH
36747: LD_INT 1
36749: EQUAL
36750: IFFALSE 36771
// points := [ 10 , 5 , 3 ] ;
36752: LD_ADDR_VAR 0 9
36756: PUSH
36757: LD_INT 10
36759: PUSH
36760: LD_INT 5
36762: PUSH
36763: LD_INT 3
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36771: LD_VAR 0 6
36775: PPUSH
36776: CALL_OW 257
36780: PUSH
36781: LD_INT 2
36783: PUSH
36784: LD_INT 3
36786: PUSH
36787: LD_INT 4
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: IN
36795: IFFALSE 36816
// points := [ 3 , 2 , 1 ] ;
36797: LD_ADDR_VAR 0 9
36801: PUSH
36802: LD_INT 3
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36816: LD_VAR 0 6
36820: PPUSH
36821: CALL_OW 257
36825: PUSH
36826: LD_INT 5
36828: EQUAL
36829: IFFALSE 36850
// points := [ 130 , 5 , 2 ] ;
36831: LD_ADDR_VAR 0 9
36835: PUSH
36836: LD_INT 130
36838: PUSH
36839: LD_INT 5
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36850: LD_VAR 0 6
36854: PPUSH
36855: CALL_OW 257
36859: PUSH
36860: LD_INT 8
36862: EQUAL
36863: IFFALSE 36884
// points := [ 35 , 35 , 30 ] ;
36865: LD_ADDR_VAR 0 9
36869: PUSH
36870: LD_INT 35
36872: PUSH
36873: LD_INT 35
36875: PUSH
36876: LD_INT 30
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36884: LD_VAR 0 6
36888: PPUSH
36889: CALL_OW 257
36893: PUSH
36894: LD_INT 9
36896: EQUAL
36897: IFFALSE 36918
// points := [ 20 , 55 , 40 ] ;
36899: LD_ADDR_VAR 0 9
36903: PUSH
36904: LD_INT 20
36906: PUSH
36907: LD_INT 55
36909: PUSH
36910: LD_INT 40
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: LIST
36917: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36918: LD_VAR 0 6
36922: PPUSH
36923: CALL_OW 257
36927: PUSH
36928: LD_INT 12
36930: PUSH
36931: LD_INT 16
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: IN
36938: IFFALSE 36959
// points := [ 5 , 3 , 2 ] ;
36940: LD_ADDR_VAR 0 9
36944: PUSH
36945: LD_INT 5
36947: PUSH
36948: LD_INT 3
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36959: LD_VAR 0 6
36963: PPUSH
36964: CALL_OW 257
36968: PUSH
36969: LD_INT 17
36971: EQUAL
36972: IFFALSE 36993
// points := [ 100 , 50 , 75 ] ;
36974: LD_ADDR_VAR 0 9
36978: PUSH
36979: LD_INT 100
36981: PUSH
36982: LD_INT 50
36984: PUSH
36985: LD_INT 75
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36993: LD_VAR 0 6
36997: PPUSH
36998: CALL_OW 257
37002: PUSH
37003: LD_INT 15
37005: EQUAL
37006: IFFALSE 37027
// points := [ 10 , 5 , 3 ] ;
37008: LD_ADDR_VAR 0 9
37012: PUSH
37013: LD_INT 10
37015: PUSH
37016: LD_INT 5
37018: PUSH
37019: LD_INT 3
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37027: LD_VAR 0 6
37031: PPUSH
37032: CALL_OW 257
37036: PUSH
37037: LD_INT 14
37039: EQUAL
37040: IFFALSE 37061
// points := [ 10 , 0 , 0 ] ;
37042: LD_ADDR_VAR 0 9
37046: PUSH
37047: LD_INT 10
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37061: LD_VAR 0 6
37065: PPUSH
37066: CALL_OW 257
37070: PUSH
37071: LD_INT 11
37073: EQUAL
37074: IFFALSE 37095
// points := [ 30 , 10 , 5 ] ;
37076: LD_ADDR_VAR 0 9
37080: PUSH
37081: LD_INT 30
37083: PUSH
37084: LD_INT 10
37086: PUSH
37087: LD_INT 5
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37095: LD_VAR 0 1
37099: PPUSH
37100: LD_INT 5
37102: PPUSH
37103: CALL_OW 321
37107: PUSH
37108: LD_INT 2
37110: EQUAL
37111: IFFALSE 37128
// bpoints := bpoints * 1.8 ;
37113: LD_ADDR_VAR 0 10
37117: PUSH
37118: LD_VAR 0 10
37122: PUSH
37123: LD_REAL  1.80000000000000E+0000
37126: MUL
37127: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37128: LD_VAR 0 6
37132: PPUSH
37133: CALL_OW 257
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 3
37146: PUSH
37147: LD_INT 4
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: IN
37156: PUSH
37157: LD_VAR 0 1
37161: PPUSH
37162: LD_INT 51
37164: PPUSH
37165: CALL_OW 321
37169: PUSH
37170: LD_INT 2
37172: EQUAL
37173: AND
37174: IFFALSE 37191
// bpoints := bpoints * 1.2 ;
37176: LD_ADDR_VAR 0 10
37180: PUSH
37181: LD_VAR 0 10
37185: PUSH
37186: LD_REAL  1.20000000000000E+0000
37189: MUL
37190: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37191: LD_VAR 0 6
37195: PPUSH
37196: CALL_OW 257
37200: PUSH
37201: LD_INT 5
37203: PUSH
37204: LD_INT 7
37206: PUSH
37207: LD_INT 9
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: IN
37215: PUSH
37216: LD_VAR 0 1
37220: PPUSH
37221: LD_INT 52
37223: PPUSH
37224: CALL_OW 321
37228: PUSH
37229: LD_INT 2
37231: EQUAL
37232: AND
37233: IFFALSE 37250
// bpoints := bpoints * 1.5 ;
37235: LD_ADDR_VAR 0 10
37239: PUSH
37240: LD_VAR 0 10
37244: PUSH
37245: LD_REAL  1.50000000000000E+0000
37248: MUL
37249: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37250: LD_VAR 0 1
37254: PPUSH
37255: LD_INT 66
37257: PPUSH
37258: CALL_OW 321
37262: PUSH
37263: LD_INT 2
37265: EQUAL
37266: IFFALSE 37283
// bpoints := bpoints * 1.1 ;
37268: LD_ADDR_VAR 0 10
37272: PUSH
37273: LD_VAR 0 10
37277: PUSH
37278: LD_REAL  1.10000000000000E+0000
37281: MUL
37282: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37283: LD_ADDR_VAR 0 10
37287: PUSH
37288: LD_VAR 0 10
37292: PUSH
37293: LD_VAR 0 6
37297: PPUSH
37298: LD_INT 1
37300: PPUSH
37301: CALL_OW 259
37305: PUSH
37306: LD_REAL  1.15000000000000E+0000
37309: MUL
37310: MUL
37311: ST_TO_ADDR
// end ; unit_vehicle :
37312: GO 38140
37314: LD_INT 2
37316: DOUBLE
37317: EQUAL
37318: IFTRUE 37322
37320: GO 38128
37322: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37323: LD_VAR 0 6
37327: PPUSH
37328: CALL_OW 264
37332: PUSH
37333: LD_INT 2
37335: PUSH
37336: LD_INT 42
37338: PUSH
37339: LD_INT 24
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: IN
37347: IFFALSE 37368
// points := [ 25 , 5 , 3 ] ;
37349: LD_ADDR_VAR 0 9
37353: PUSH
37354: LD_INT 25
37356: PUSH
37357: LD_INT 5
37359: PUSH
37360: LD_INT 3
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37368: LD_VAR 0 6
37372: PPUSH
37373: CALL_OW 264
37377: PUSH
37378: LD_INT 4
37380: PUSH
37381: LD_INT 43
37383: PUSH
37384: LD_INT 25
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: IN
37392: IFFALSE 37413
// points := [ 40 , 15 , 5 ] ;
37394: LD_ADDR_VAR 0 9
37398: PUSH
37399: LD_INT 40
37401: PUSH
37402: LD_INT 15
37404: PUSH
37405: LD_INT 5
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37413: LD_VAR 0 6
37417: PPUSH
37418: CALL_OW 264
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: LD_INT 23
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: IN
37433: IFFALSE 37454
// points := [ 7 , 25 , 8 ] ;
37435: LD_ADDR_VAR 0 9
37439: PUSH
37440: LD_INT 7
37442: PUSH
37443: LD_INT 25
37445: PUSH
37446: LD_INT 8
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37454: LD_VAR 0 6
37458: PPUSH
37459: CALL_OW 264
37463: PUSH
37464: LD_INT 5
37466: PUSH
37467: LD_INT 27
37469: PUSH
37470: LD_INT 44
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: IN
37478: IFFALSE 37499
// points := [ 14 , 50 , 16 ] ;
37480: LD_ADDR_VAR 0 9
37484: PUSH
37485: LD_INT 14
37487: PUSH
37488: LD_INT 50
37490: PUSH
37491: LD_INT 16
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37499: LD_VAR 0 6
37503: PPUSH
37504: CALL_OW 264
37508: PUSH
37509: LD_INT 6
37511: PUSH
37512: LD_INT 46
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: IN
37519: IFFALSE 37540
// points := [ 32 , 120 , 70 ] ;
37521: LD_ADDR_VAR 0 9
37525: PUSH
37526: LD_INT 32
37528: PUSH
37529: LD_INT 120
37531: PUSH
37532: LD_INT 70
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37540: LD_VAR 0 6
37544: PPUSH
37545: CALL_OW 264
37549: PUSH
37550: LD_INT 7
37552: PUSH
37553: LD_INT 28
37555: PUSH
37556: LD_INT 45
37558: PUSH
37559: LD_INT 92
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: IN
37568: IFFALSE 37589
// points := [ 35 , 20 , 45 ] ;
37570: LD_ADDR_VAR 0 9
37574: PUSH
37575: LD_INT 35
37577: PUSH
37578: LD_INT 20
37580: PUSH
37581: LD_INT 45
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37589: LD_VAR 0 6
37593: PPUSH
37594: CALL_OW 264
37598: PUSH
37599: LD_INT 47
37601: PUSH
37602: EMPTY
37603: LIST
37604: IN
37605: IFFALSE 37626
// points := [ 67 , 45 , 75 ] ;
37607: LD_ADDR_VAR 0 9
37611: PUSH
37612: LD_INT 67
37614: PUSH
37615: LD_INT 45
37617: PUSH
37618: LD_INT 75
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37626: LD_VAR 0 6
37630: PPUSH
37631: CALL_OW 264
37635: PUSH
37636: LD_INT 26
37638: PUSH
37639: EMPTY
37640: LIST
37641: IN
37642: IFFALSE 37663
// points := [ 120 , 30 , 80 ] ;
37644: LD_ADDR_VAR 0 9
37648: PUSH
37649: LD_INT 120
37651: PUSH
37652: LD_INT 30
37654: PUSH
37655: LD_INT 80
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37663: LD_VAR 0 6
37667: PPUSH
37668: CALL_OW 264
37672: PUSH
37673: LD_INT 22
37675: PUSH
37676: EMPTY
37677: LIST
37678: IN
37679: IFFALSE 37700
// points := [ 40 , 1 , 1 ] ;
37681: LD_ADDR_VAR 0 9
37685: PUSH
37686: LD_INT 40
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37700: LD_VAR 0 6
37704: PPUSH
37705: CALL_OW 264
37709: PUSH
37710: LD_INT 29
37712: PUSH
37713: EMPTY
37714: LIST
37715: IN
37716: IFFALSE 37737
// points := [ 70 , 200 , 400 ] ;
37718: LD_ADDR_VAR 0 9
37722: PUSH
37723: LD_INT 70
37725: PUSH
37726: LD_INT 200
37728: PUSH
37729: LD_INT 400
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: LIST
37736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37737: LD_VAR 0 6
37741: PPUSH
37742: CALL_OW 264
37746: PUSH
37747: LD_INT 14
37749: PUSH
37750: LD_INT 53
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: IN
37757: IFFALSE 37778
// points := [ 40 , 10 , 20 ] ;
37759: LD_ADDR_VAR 0 9
37763: PUSH
37764: LD_INT 40
37766: PUSH
37767: LD_INT 10
37769: PUSH
37770: LD_INT 20
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37778: LD_VAR 0 6
37782: PPUSH
37783: CALL_OW 264
37787: PUSH
37788: LD_INT 9
37790: PUSH
37791: EMPTY
37792: LIST
37793: IN
37794: IFFALSE 37815
// points := [ 5 , 70 , 20 ] ;
37796: LD_ADDR_VAR 0 9
37800: PUSH
37801: LD_INT 5
37803: PUSH
37804: LD_INT 70
37806: PUSH
37807: LD_INT 20
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37815: LD_VAR 0 6
37819: PPUSH
37820: CALL_OW 264
37824: PUSH
37825: LD_INT 10
37827: PUSH
37828: EMPTY
37829: LIST
37830: IN
37831: IFFALSE 37852
// points := [ 35 , 110 , 70 ] ;
37833: LD_ADDR_VAR 0 9
37837: PUSH
37838: LD_INT 35
37840: PUSH
37841: LD_INT 110
37843: PUSH
37844: LD_INT 70
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37852: LD_VAR 0 6
37856: PPUSH
37857: CALL_OW 265
37861: PUSH
37862: LD_INT 25
37864: EQUAL
37865: IFFALSE 37886
// points := [ 80 , 65 , 100 ] ;
37867: LD_ADDR_VAR 0 9
37871: PUSH
37872: LD_INT 80
37874: PUSH
37875: LD_INT 65
37877: PUSH
37878: LD_INT 100
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37886: LD_VAR 0 6
37890: PPUSH
37891: CALL_OW 263
37895: PUSH
37896: LD_INT 1
37898: EQUAL
37899: IFFALSE 37934
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37901: LD_ADDR_VAR 0 10
37905: PUSH
37906: LD_VAR 0 10
37910: PUSH
37911: LD_VAR 0 6
37915: PPUSH
37916: CALL_OW 311
37920: PPUSH
37921: LD_INT 3
37923: PPUSH
37924: CALL_OW 259
37928: PUSH
37929: LD_INT 4
37931: MUL
37932: MUL
37933: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37934: LD_VAR 0 6
37938: PPUSH
37939: CALL_OW 263
37943: PUSH
37944: LD_INT 2
37946: EQUAL
37947: IFFALSE 37998
// begin j := IsControledBy ( i ) ;
37949: LD_ADDR_VAR 0 7
37953: PUSH
37954: LD_VAR 0 6
37958: PPUSH
37959: CALL_OW 312
37963: ST_TO_ADDR
// if j then
37964: LD_VAR 0 7
37968: IFFALSE 37998
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37970: LD_ADDR_VAR 0 10
37974: PUSH
37975: LD_VAR 0 10
37979: PUSH
37980: LD_VAR 0 7
37984: PPUSH
37985: LD_INT 3
37987: PPUSH
37988: CALL_OW 259
37992: PUSH
37993: LD_INT 3
37995: MUL
37996: MUL
37997: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37998: LD_VAR 0 6
38002: PPUSH
38003: CALL_OW 264
38007: PUSH
38008: LD_INT 5
38010: PUSH
38011: LD_INT 6
38013: PUSH
38014: LD_INT 46
38016: PUSH
38017: LD_INT 44
38019: PUSH
38020: LD_INT 47
38022: PUSH
38023: LD_INT 45
38025: PUSH
38026: LD_INT 28
38028: PUSH
38029: LD_INT 7
38031: PUSH
38032: LD_INT 27
38034: PUSH
38035: LD_INT 29
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: IN
38050: PUSH
38051: LD_VAR 0 1
38055: PPUSH
38056: LD_INT 52
38058: PPUSH
38059: CALL_OW 321
38063: PUSH
38064: LD_INT 2
38066: EQUAL
38067: AND
38068: IFFALSE 38085
// bpoints := bpoints * 1.2 ;
38070: LD_ADDR_VAR 0 10
38074: PUSH
38075: LD_VAR 0 10
38079: PUSH
38080: LD_REAL  1.20000000000000E+0000
38083: MUL
38084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38085: LD_VAR 0 6
38089: PPUSH
38090: CALL_OW 264
38094: PUSH
38095: LD_INT 6
38097: PUSH
38098: LD_INT 46
38100: PUSH
38101: LD_INT 47
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: IN
38109: IFFALSE 38126
// bpoints := bpoints * 1.2 ;
38111: LD_ADDR_VAR 0 10
38115: PUSH
38116: LD_VAR 0 10
38120: PUSH
38121: LD_REAL  1.20000000000000E+0000
38124: MUL
38125: ST_TO_ADDR
// end ; unit_building :
38126: GO 38140
38128: LD_INT 3
38130: DOUBLE
38131: EQUAL
38132: IFTRUE 38136
38134: GO 38139
38136: POP
// ; end ;
38137: GO 38140
38139: POP
// for j = 1 to 3 do
38140: LD_ADDR_VAR 0 7
38144: PUSH
38145: DOUBLE
38146: LD_INT 1
38148: DEC
38149: ST_TO_ADDR
38150: LD_INT 3
38152: PUSH
38153: FOR_TO
38154: IFFALSE 38207
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38156: LD_ADDR_VAR 0 5
38160: PUSH
38161: LD_VAR 0 5
38165: PPUSH
38166: LD_VAR 0 7
38170: PPUSH
38171: LD_VAR 0 5
38175: PUSH
38176: LD_VAR 0 7
38180: ARRAY
38181: PUSH
38182: LD_VAR 0 9
38186: PUSH
38187: LD_VAR 0 7
38191: ARRAY
38192: PUSH
38193: LD_VAR 0 10
38197: MUL
38198: PLUS
38199: PPUSH
38200: CALL_OW 1
38204: ST_TO_ADDR
38205: GO 38153
38207: POP
38208: POP
// end ;
38209: GO 36688
38211: POP
38212: POP
// result := Replace ( result , 4 , tmp ) ;
38213: LD_ADDR_VAR 0 5
38217: PUSH
38218: LD_VAR 0 5
38222: PPUSH
38223: LD_INT 4
38225: PPUSH
38226: LD_VAR 0 8
38230: PPUSH
38231: CALL_OW 1
38235: ST_TO_ADDR
// end ;
38236: LD_VAR 0 5
38240: RET
// export function DangerAtRange ( unit , range ) ; begin
38241: LD_INT 0
38243: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38244: LD_ADDR_VAR 0 3
38248: PUSH
38249: LD_VAR 0 1
38253: PPUSH
38254: CALL_OW 255
38258: PPUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: CALL_OW 250
38268: PPUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 251
38278: PPUSH
38279: LD_VAR 0 2
38283: PPUSH
38284: CALL 36540 0 4
38288: ST_TO_ADDR
// end ;
38289: LD_VAR 0 3
38293: RET
// export function DangerInArea ( side , area ) ; begin
38294: LD_INT 0
38296: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38297: LD_ADDR_VAR 0 3
38301: PUSH
38302: LD_VAR 0 2
38306: PPUSH
38307: LD_INT 81
38309: PUSH
38310: LD_VAR 0 1
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PPUSH
38319: CALL_OW 70
38323: ST_TO_ADDR
// end ;
38324: LD_VAR 0 3
38328: RET
// export function IsExtension ( b ) ; begin
38329: LD_INT 0
38331: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38332: LD_ADDR_VAR 0 2
38336: PUSH
38337: LD_VAR 0 1
38341: PUSH
38342: LD_INT 23
38344: PUSH
38345: LD_INT 20
38347: PUSH
38348: LD_INT 22
38350: PUSH
38351: LD_INT 17
38353: PUSH
38354: LD_INT 24
38356: PUSH
38357: LD_INT 21
38359: PUSH
38360: LD_INT 19
38362: PUSH
38363: LD_INT 16
38365: PUSH
38366: LD_INT 25
38368: PUSH
38369: LD_INT 18
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: IN
38384: ST_TO_ADDR
// end ;
38385: LD_VAR 0 2
38389: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38390: LD_INT 0
38392: PPUSH
38393: PPUSH
38394: PPUSH
// result := [ ] ;
38395: LD_ADDR_VAR 0 4
38399: PUSH
38400: EMPTY
38401: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38402: LD_ADDR_VAR 0 5
38406: PUSH
38407: LD_VAR 0 2
38411: PPUSH
38412: LD_INT 21
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PPUSH
38422: CALL_OW 70
38426: ST_TO_ADDR
// if not tmp then
38427: LD_VAR 0 5
38431: NOT
38432: IFFALSE 38436
// exit ;
38434: GO 38500
// if checkLink then
38436: LD_VAR 0 3
38440: IFFALSE 38490
// begin for i in tmp do
38442: LD_ADDR_VAR 0 6
38446: PUSH
38447: LD_VAR 0 5
38451: PUSH
38452: FOR_IN
38453: IFFALSE 38488
// if GetBase ( i ) <> base then
38455: LD_VAR 0 6
38459: PPUSH
38460: CALL_OW 274
38464: PUSH
38465: LD_VAR 0 1
38469: NONEQUAL
38470: IFFALSE 38486
// ComLinkToBase ( base , i ) ;
38472: LD_VAR 0 1
38476: PPUSH
38477: LD_VAR 0 6
38481: PPUSH
38482: CALL_OW 169
38486: GO 38452
38488: POP
38489: POP
// end ; result := tmp ;
38490: LD_ADDR_VAR 0 4
38494: PUSH
38495: LD_VAR 0 5
38499: ST_TO_ADDR
// end ;
38500: LD_VAR 0 4
38504: RET
// export function ComComplete ( units , b ) ; var i ; begin
38505: LD_INT 0
38507: PPUSH
38508: PPUSH
// if not units then
38509: LD_VAR 0 1
38513: NOT
38514: IFFALSE 38518
// exit ;
38516: GO 38608
// for i in units do
38518: LD_ADDR_VAR 0 4
38522: PUSH
38523: LD_VAR 0 1
38527: PUSH
38528: FOR_IN
38529: IFFALSE 38606
// if BuildingStatus ( b ) = bs_build then
38531: LD_VAR 0 2
38535: PPUSH
38536: CALL_OW 461
38540: PUSH
38541: LD_INT 1
38543: EQUAL
38544: IFFALSE 38604
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38546: LD_VAR 0 4
38550: PPUSH
38551: LD_STRING h
38553: PUSH
38554: LD_VAR 0 2
38558: PPUSH
38559: CALL_OW 250
38563: PUSH
38564: LD_VAR 0 2
38568: PPUSH
38569: CALL_OW 251
38573: PUSH
38574: LD_VAR 0 2
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: PUSH
38597: EMPTY
38598: LIST
38599: PPUSH
38600: CALL_OW 446
38604: GO 38528
38606: POP
38607: POP
// end ;
38608: LD_VAR 0 3
38612: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38613: LD_INT 0
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38621: LD_VAR 0 1
38625: NOT
38626: PUSH
38627: LD_VAR 0 1
38631: PPUSH
38632: CALL_OW 263
38636: PUSH
38637: LD_INT 2
38639: NONEQUAL
38640: OR
38641: IFFALSE 38645
// exit ;
38643: GO 38961
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38645: LD_ADDR_VAR 0 6
38649: PUSH
38650: LD_INT 22
38652: PUSH
38653: LD_VAR 0 1
38657: PPUSH
38658: CALL_OW 255
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: LD_INT 30
38672: PUSH
38673: LD_INT 36
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 34
38682: PUSH
38683: LD_INT 31
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PPUSH
38699: CALL_OW 69
38703: ST_TO_ADDR
// if not tmp then
38704: LD_VAR 0 6
38708: NOT
38709: IFFALSE 38713
// exit ;
38711: GO 38961
// result := [ ] ;
38713: LD_ADDR_VAR 0 2
38717: PUSH
38718: EMPTY
38719: ST_TO_ADDR
// for i in tmp do
38720: LD_ADDR_VAR 0 3
38724: PUSH
38725: LD_VAR 0 6
38729: PUSH
38730: FOR_IN
38731: IFFALSE 38802
// begin t := UnitsInside ( i ) ;
38733: LD_ADDR_VAR 0 4
38737: PUSH
38738: LD_VAR 0 3
38742: PPUSH
38743: CALL_OW 313
38747: ST_TO_ADDR
// if t then
38748: LD_VAR 0 4
38752: IFFALSE 38800
// for j in t do
38754: LD_ADDR_VAR 0 7
38758: PUSH
38759: LD_VAR 0 4
38763: PUSH
38764: FOR_IN
38765: IFFALSE 38798
// result := Replace ( result , result + 1 , j ) ;
38767: LD_ADDR_VAR 0 2
38771: PUSH
38772: LD_VAR 0 2
38776: PPUSH
38777: LD_VAR 0 2
38781: PUSH
38782: LD_INT 1
38784: PLUS
38785: PPUSH
38786: LD_VAR 0 7
38790: PPUSH
38791: CALL_OW 1
38795: ST_TO_ADDR
38796: GO 38764
38798: POP
38799: POP
// end ;
38800: GO 38730
38802: POP
38803: POP
// if not result then
38804: LD_VAR 0 2
38808: NOT
38809: IFFALSE 38813
// exit ;
38811: GO 38961
// mech := result [ 1 ] ;
38813: LD_ADDR_VAR 0 5
38817: PUSH
38818: LD_VAR 0 2
38822: PUSH
38823: LD_INT 1
38825: ARRAY
38826: ST_TO_ADDR
// if result > 1 then
38827: LD_VAR 0 2
38831: PUSH
38832: LD_INT 1
38834: GREATER
38835: IFFALSE 38947
// begin for i = 2 to result do
38837: LD_ADDR_VAR 0 3
38841: PUSH
38842: DOUBLE
38843: LD_INT 2
38845: DEC
38846: ST_TO_ADDR
38847: LD_VAR 0 2
38851: PUSH
38852: FOR_TO
38853: IFFALSE 38945
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38855: LD_ADDR_VAR 0 4
38859: PUSH
38860: LD_VAR 0 2
38864: PUSH
38865: LD_VAR 0 3
38869: ARRAY
38870: PPUSH
38871: LD_INT 3
38873: PPUSH
38874: CALL_OW 259
38878: PUSH
38879: LD_VAR 0 2
38883: PUSH
38884: LD_VAR 0 3
38888: ARRAY
38889: PPUSH
38890: CALL_OW 432
38894: MINUS
38895: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38896: LD_VAR 0 4
38900: PUSH
38901: LD_VAR 0 5
38905: PPUSH
38906: LD_INT 3
38908: PPUSH
38909: CALL_OW 259
38913: PUSH
38914: LD_VAR 0 5
38918: PPUSH
38919: CALL_OW 432
38923: MINUS
38924: GREATEREQUAL
38925: IFFALSE 38943
// mech := result [ i ] ;
38927: LD_ADDR_VAR 0 5
38931: PUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_VAR 0 3
38941: ARRAY
38942: ST_TO_ADDR
// end ;
38943: GO 38852
38945: POP
38946: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38947: LD_VAR 0 1
38951: PPUSH
38952: LD_VAR 0 5
38956: PPUSH
38957: CALL_OW 135
// end ;
38961: LD_VAR 0 2
38965: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38966: LD_INT 0
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
// result := [ ] ;
38981: LD_ADDR_VAR 0 7
38985: PUSH
38986: EMPTY
38987: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38988: LD_VAR 0 1
38992: PPUSH
38993: CALL_OW 266
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: IN
39008: NOT
39009: IFFALSE 39013
// exit ;
39011: GO 40647
// if name then
39013: LD_VAR 0 3
39017: IFFALSE 39033
// SetBName ( base_dep , name ) ;
39019: LD_VAR 0 1
39023: PPUSH
39024: LD_VAR 0 3
39028: PPUSH
39029: CALL_OW 500
// base := GetBase ( base_dep ) ;
39033: LD_ADDR_VAR 0 15
39037: PUSH
39038: LD_VAR 0 1
39042: PPUSH
39043: CALL_OW 274
39047: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39048: LD_ADDR_VAR 0 16
39052: PUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: CALL_OW 255
39062: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39063: LD_ADDR_VAR 0 17
39067: PUSH
39068: LD_VAR 0 1
39072: PPUSH
39073: CALL_OW 248
39077: ST_TO_ADDR
// if sources then
39078: LD_VAR 0 5
39082: IFFALSE 39129
// for i = 1 to 3 do
39084: LD_ADDR_VAR 0 8
39088: PUSH
39089: DOUBLE
39090: LD_INT 1
39092: DEC
39093: ST_TO_ADDR
39094: LD_INT 3
39096: PUSH
39097: FOR_TO
39098: IFFALSE 39127
// AddResourceType ( base , i , sources [ i ] ) ;
39100: LD_VAR 0 15
39104: PPUSH
39105: LD_VAR 0 8
39109: PPUSH
39110: LD_VAR 0 5
39114: PUSH
39115: LD_VAR 0 8
39119: ARRAY
39120: PPUSH
39121: CALL_OW 276
39125: GO 39097
39127: POP
39128: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39129: LD_ADDR_VAR 0 18
39133: PUSH
39134: LD_VAR 0 15
39138: PPUSH
39139: LD_VAR 0 2
39143: PPUSH
39144: LD_INT 1
39146: PPUSH
39147: CALL 38390 0 3
39151: ST_TO_ADDR
// InitHc ;
39152: CALL_OW 19
// InitUc ;
39156: CALL_OW 18
// uc_side := side ;
39160: LD_ADDR_OWVAR 20
39164: PUSH
39165: LD_VAR 0 16
39169: ST_TO_ADDR
// uc_nation := nation ;
39170: LD_ADDR_OWVAR 21
39174: PUSH
39175: LD_VAR 0 17
39179: ST_TO_ADDR
// if buildings then
39180: LD_VAR 0 18
39184: IFFALSE 40506
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39186: LD_ADDR_VAR 0 19
39190: PUSH
39191: LD_VAR 0 18
39195: PPUSH
39196: LD_INT 2
39198: PUSH
39199: LD_INT 30
39201: PUSH
39202: LD_INT 29
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 30
39211: PUSH
39212: LD_INT 30
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: PPUSH
39224: CALL_OW 72
39228: ST_TO_ADDR
// if tmp then
39229: LD_VAR 0 19
39233: IFFALSE 39281
// for i in tmp do
39235: LD_ADDR_VAR 0 8
39239: PUSH
39240: LD_VAR 0 19
39244: PUSH
39245: FOR_IN
39246: IFFALSE 39279
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39248: LD_VAR 0 8
39252: PPUSH
39253: CALL_OW 250
39257: PPUSH
39258: LD_VAR 0 8
39262: PPUSH
39263: CALL_OW 251
39267: PPUSH
39268: LD_VAR 0 16
39272: PPUSH
39273: CALL_OW 441
39277: GO 39245
39279: POP
39280: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39281: LD_VAR 0 18
39285: PPUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 30
39291: PUSH
39292: LD_INT 32
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 30
39301: PUSH
39302: LD_INT 33
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: PPUSH
39314: CALL_OW 72
39318: IFFALSE 39406
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39320: LD_ADDR_VAR 0 8
39324: PUSH
39325: LD_VAR 0 18
39329: PPUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 30
39335: PUSH
39336: LD_INT 32
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 30
39345: PUSH
39346: LD_INT 33
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: LIST
39357: PPUSH
39358: CALL_OW 72
39362: PUSH
39363: FOR_IN
39364: IFFALSE 39404
// begin if not GetBWeapon ( i ) then
39366: LD_VAR 0 8
39370: PPUSH
39371: CALL_OW 269
39375: NOT
39376: IFFALSE 39402
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39378: LD_VAR 0 8
39382: PPUSH
39383: LD_VAR 0 8
39387: PPUSH
39388: LD_VAR 0 2
39392: PPUSH
39393: CALL 40652 0 2
39397: PPUSH
39398: CALL_OW 431
// end ;
39402: GO 39363
39404: POP
39405: POP
// end ; for i = 1 to personel do
39406: LD_ADDR_VAR 0 8
39410: PUSH
39411: DOUBLE
39412: LD_INT 1
39414: DEC
39415: ST_TO_ADDR
39416: LD_VAR 0 6
39420: PUSH
39421: FOR_TO
39422: IFFALSE 40486
// begin if i > 4 then
39424: LD_VAR 0 8
39428: PUSH
39429: LD_INT 4
39431: GREATER
39432: IFFALSE 39436
// break ;
39434: GO 40486
// case i of 1 :
39436: LD_VAR 0 8
39440: PUSH
39441: LD_INT 1
39443: DOUBLE
39444: EQUAL
39445: IFTRUE 39449
39447: GO 39529
39449: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39450: LD_ADDR_VAR 0 12
39454: PUSH
39455: LD_VAR 0 18
39459: PPUSH
39460: LD_INT 22
39462: PUSH
39463: LD_VAR 0 16
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 58
39474: PUSH
39475: EMPTY
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_INT 30
39483: PUSH
39484: LD_INT 32
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 30
39493: PUSH
39494: LD_INT 4
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 30
39503: PUSH
39504: LD_INT 5
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: PPUSH
39522: CALL_OW 72
39526: ST_TO_ADDR
39527: GO 39751
39529: LD_INT 2
39531: DOUBLE
39532: EQUAL
39533: IFTRUE 39537
39535: GO 39599
39537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39538: LD_ADDR_VAR 0 12
39542: PUSH
39543: LD_VAR 0 18
39547: PPUSH
39548: LD_INT 22
39550: PUSH
39551: LD_VAR 0 16
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 30
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 30
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PPUSH
39592: CALL_OW 72
39596: ST_TO_ADDR
39597: GO 39751
39599: LD_INT 3
39601: DOUBLE
39602: EQUAL
39603: IFTRUE 39607
39605: GO 39669
39607: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39608: LD_ADDR_VAR 0 12
39612: PUSH
39613: LD_VAR 0 18
39617: PPUSH
39618: LD_INT 22
39620: PUSH
39621: LD_VAR 0 16
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: LD_INT 30
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 30
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PPUSH
39662: CALL_OW 72
39666: ST_TO_ADDR
39667: GO 39751
39669: LD_INT 4
39671: DOUBLE
39672: EQUAL
39673: IFTRUE 39677
39675: GO 39750
39677: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39678: LD_ADDR_VAR 0 12
39682: PUSH
39683: LD_VAR 0 18
39687: PPUSH
39688: LD_INT 22
39690: PUSH
39691: LD_VAR 0 16
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 30
39705: PUSH
39706: LD_INT 6
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 30
39715: PUSH
39716: LD_INT 7
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 30
39725: PUSH
39726: LD_INT 8
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PPUSH
39743: CALL_OW 72
39747: ST_TO_ADDR
39748: GO 39751
39750: POP
// if i = 1 then
39751: LD_VAR 0 8
39755: PUSH
39756: LD_INT 1
39758: EQUAL
39759: IFFALSE 39870
// begin tmp := [ ] ;
39761: LD_ADDR_VAR 0 19
39765: PUSH
39766: EMPTY
39767: ST_TO_ADDR
// for j in f do
39768: LD_ADDR_VAR 0 9
39772: PUSH
39773: LD_VAR 0 12
39777: PUSH
39778: FOR_IN
39779: IFFALSE 39852
// if GetBType ( j ) = b_bunker then
39781: LD_VAR 0 9
39785: PPUSH
39786: CALL_OW 266
39790: PUSH
39791: LD_INT 32
39793: EQUAL
39794: IFFALSE 39821
// tmp := Insert ( tmp , 1 , j ) else
39796: LD_ADDR_VAR 0 19
39800: PUSH
39801: LD_VAR 0 19
39805: PPUSH
39806: LD_INT 1
39808: PPUSH
39809: LD_VAR 0 9
39813: PPUSH
39814: CALL_OW 2
39818: ST_TO_ADDR
39819: GO 39850
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39821: LD_ADDR_VAR 0 19
39825: PUSH
39826: LD_VAR 0 19
39830: PPUSH
39831: LD_VAR 0 19
39835: PUSH
39836: LD_INT 1
39838: PLUS
39839: PPUSH
39840: LD_VAR 0 9
39844: PPUSH
39845: CALL_OW 2
39849: ST_TO_ADDR
39850: GO 39778
39852: POP
39853: POP
// if tmp then
39854: LD_VAR 0 19
39858: IFFALSE 39870
// f := tmp ;
39860: LD_ADDR_VAR 0 12
39864: PUSH
39865: LD_VAR 0 19
39869: ST_TO_ADDR
// end ; x := personel [ i ] ;
39870: LD_ADDR_VAR 0 13
39874: PUSH
39875: LD_VAR 0 6
39879: PUSH
39880: LD_VAR 0 8
39884: ARRAY
39885: ST_TO_ADDR
// if x = - 1 then
39886: LD_VAR 0 13
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: EQUAL
39895: IFFALSE 40104
// begin for j in f do
39897: LD_ADDR_VAR 0 9
39901: PUSH
39902: LD_VAR 0 12
39906: PUSH
39907: FOR_IN
39908: IFFALSE 40100
// repeat InitHc ;
39910: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39914: LD_VAR 0 9
39918: PPUSH
39919: CALL_OW 266
39923: PUSH
39924: LD_INT 5
39926: EQUAL
39927: IFFALSE 39997
// begin if UnitsInside ( j ) < 3 then
39929: LD_VAR 0 9
39933: PPUSH
39934: CALL_OW 313
39938: PUSH
39939: LD_INT 3
39941: LESS
39942: IFFALSE 39978
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39944: LD_INT 0
39946: PPUSH
39947: LD_INT 5
39949: PUSH
39950: LD_INT 8
39952: PUSH
39953: LD_INT 9
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: LIST
39960: PUSH
39961: LD_VAR 0 17
39965: ARRAY
39966: PPUSH
39967: LD_VAR 0 4
39971: PPUSH
39972: CALL_OW 380
39976: GO 39995
// PrepareHuman ( false , i , skill ) ;
39978: LD_INT 0
39980: PPUSH
39981: LD_VAR 0 8
39985: PPUSH
39986: LD_VAR 0 4
39990: PPUSH
39991: CALL_OW 380
// end else
39995: GO 40014
// PrepareHuman ( false , i , skill ) ;
39997: LD_INT 0
39999: PPUSH
40000: LD_VAR 0 8
40004: PPUSH
40005: LD_VAR 0 4
40009: PPUSH
40010: CALL_OW 380
// un := CreateHuman ;
40014: LD_ADDR_VAR 0 14
40018: PUSH
40019: CALL_OW 44
40023: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40024: LD_ADDR_VAR 0 7
40028: PUSH
40029: LD_VAR 0 7
40033: PPUSH
40034: LD_INT 1
40036: PPUSH
40037: LD_VAR 0 14
40041: PPUSH
40042: CALL_OW 2
40046: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40047: LD_VAR 0 14
40051: PPUSH
40052: LD_VAR 0 9
40056: PPUSH
40057: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40061: LD_VAR 0 9
40065: PPUSH
40066: CALL_OW 313
40070: PUSH
40071: LD_INT 6
40073: EQUAL
40074: PUSH
40075: LD_VAR 0 9
40079: PPUSH
40080: CALL_OW 266
40084: PUSH
40085: LD_INT 32
40087: PUSH
40088: LD_INT 31
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: IN
40095: OR
40096: IFFALSE 39910
40098: GO 39907
40100: POP
40101: POP
// end else
40102: GO 40484
// for j = 1 to x do
40104: LD_ADDR_VAR 0 9
40108: PUSH
40109: DOUBLE
40110: LD_INT 1
40112: DEC
40113: ST_TO_ADDR
40114: LD_VAR 0 13
40118: PUSH
40119: FOR_TO
40120: IFFALSE 40482
// begin InitHc ;
40122: CALL_OW 19
// if not f then
40126: LD_VAR 0 12
40130: NOT
40131: IFFALSE 40220
// begin PrepareHuman ( false , i , skill ) ;
40133: LD_INT 0
40135: PPUSH
40136: LD_VAR 0 8
40140: PPUSH
40141: LD_VAR 0 4
40145: PPUSH
40146: CALL_OW 380
// un := CreateHuman ;
40150: LD_ADDR_VAR 0 14
40154: PUSH
40155: CALL_OW 44
40159: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40160: LD_ADDR_VAR 0 7
40164: PUSH
40165: LD_VAR 0 7
40169: PPUSH
40170: LD_INT 1
40172: PPUSH
40173: LD_VAR 0 14
40177: PPUSH
40178: CALL_OW 2
40182: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40183: LD_VAR 0 14
40187: PPUSH
40188: LD_VAR 0 1
40192: PPUSH
40193: CALL_OW 250
40197: PPUSH
40198: LD_VAR 0 1
40202: PPUSH
40203: CALL_OW 251
40207: PPUSH
40208: LD_INT 10
40210: PPUSH
40211: LD_INT 0
40213: PPUSH
40214: CALL_OW 50
// continue ;
40218: GO 40119
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40220: LD_VAR 0 12
40224: PUSH
40225: LD_INT 1
40227: ARRAY
40228: PPUSH
40229: CALL_OW 313
40233: PUSH
40234: LD_VAR 0 12
40238: PUSH
40239: LD_INT 1
40241: ARRAY
40242: PPUSH
40243: CALL_OW 266
40247: PUSH
40248: LD_INT 32
40250: PUSH
40251: LD_INT 31
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: IN
40258: AND
40259: PUSH
40260: LD_VAR 0 12
40264: PUSH
40265: LD_INT 1
40267: ARRAY
40268: PPUSH
40269: CALL_OW 313
40273: PUSH
40274: LD_INT 6
40276: EQUAL
40277: OR
40278: IFFALSE 40298
// f := Delete ( f , 1 ) ;
40280: LD_ADDR_VAR 0 12
40284: PUSH
40285: LD_VAR 0 12
40289: PPUSH
40290: LD_INT 1
40292: PPUSH
40293: CALL_OW 3
40297: ST_TO_ADDR
// if not f then
40298: LD_VAR 0 12
40302: NOT
40303: IFFALSE 40321
// begin x := x + 2 ;
40305: LD_ADDR_VAR 0 13
40309: PUSH
40310: LD_VAR 0 13
40314: PUSH
40315: LD_INT 2
40317: PLUS
40318: ST_TO_ADDR
// continue ;
40319: GO 40119
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40321: LD_VAR 0 12
40325: PUSH
40326: LD_INT 1
40328: ARRAY
40329: PPUSH
40330: CALL_OW 266
40334: PUSH
40335: LD_INT 5
40337: EQUAL
40338: IFFALSE 40412
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40340: LD_VAR 0 12
40344: PUSH
40345: LD_INT 1
40347: ARRAY
40348: PPUSH
40349: CALL_OW 313
40353: PUSH
40354: LD_INT 3
40356: LESS
40357: IFFALSE 40393
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40359: LD_INT 0
40361: PPUSH
40362: LD_INT 5
40364: PUSH
40365: LD_INT 8
40367: PUSH
40368: LD_INT 9
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: PUSH
40376: LD_VAR 0 17
40380: ARRAY
40381: PPUSH
40382: LD_VAR 0 4
40386: PPUSH
40387: CALL_OW 380
40391: GO 40410
// PrepareHuman ( false , i , skill ) ;
40393: LD_INT 0
40395: PPUSH
40396: LD_VAR 0 8
40400: PPUSH
40401: LD_VAR 0 4
40405: PPUSH
40406: CALL_OW 380
// end else
40410: GO 40429
// PrepareHuman ( false , i , skill ) ;
40412: LD_INT 0
40414: PPUSH
40415: LD_VAR 0 8
40419: PPUSH
40420: LD_VAR 0 4
40424: PPUSH
40425: CALL_OW 380
// un := CreateHuman ;
40429: LD_ADDR_VAR 0 14
40433: PUSH
40434: CALL_OW 44
40438: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40439: LD_ADDR_VAR 0 7
40443: PUSH
40444: LD_VAR 0 7
40448: PPUSH
40449: LD_INT 1
40451: PPUSH
40452: LD_VAR 0 14
40456: PPUSH
40457: CALL_OW 2
40461: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40462: LD_VAR 0 14
40466: PPUSH
40467: LD_VAR 0 12
40471: PUSH
40472: LD_INT 1
40474: ARRAY
40475: PPUSH
40476: CALL_OW 52
// end ;
40480: GO 40119
40482: POP
40483: POP
// end ;
40484: GO 39421
40486: POP
40487: POP
// result := result ^ buildings ;
40488: LD_ADDR_VAR 0 7
40492: PUSH
40493: LD_VAR 0 7
40497: PUSH
40498: LD_VAR 0 18
40502: ADD
40503: ST_TO_ADDR
// end else
40504: GO 40647
// begin for i = 1 to personel do
40506: LD_ADDR_VAR 0 8
40510: PUSH
40511: DOUBLE
40512: LD_INT 1
40514: DEC
40515: ST_TO_ADDR
40516: LD_VAR 0 6
40520: PUSH
40521: FOR_TO
40522: IFFALSE 40645
// begin if i > 4 then
40524: LD_VAR 0 8
40528: PUSH
40529: LD_INT 4
40531: GREATER
40532: IFFALSE 40536
// break ;
40534: GO 40645
// x := personel [ i ] ;
40536: LD_ADDR_VAR 0 13
40540: PUSH
40541: LD_VAR 0 6
40545: PUSH
40546: LD_VAR 0 8
40550: ARRAY
40551: ST_TO_ADDR
// if x = - 1 then
40552: LD_VAR 0 13
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: EQUAL
40561: IFFALSE 40565
// continue ;
40563: GO 40521
// PrepareHuman ( false , i , skill ) ;
40565: LD_INT 0
40567: PPUSH
40568: LD_VAR 0 8
40572: PPUSH
40573: LD_VAR 0 4
40577: PPUSH
40578: CALL_OW 380
// un := CreateHuman ;
40582: LD_ADDR_VAR 0 14
40586: PUSH
40587: CALL_OW 44
40591: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40592: LD_VAR 0 14
40596: PPUSH
40597: LD_VAR 0 1
40601: PPUSH
40602: CALL_OW 250
40606: PPUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 251
40616: PPUSH
40617: LD_INT 10
40619: PPUSH
40620: LD_INT 0
40622: PPUSH
40623: CALL_OW 50
// result := result ^ un ;
40627: LD_ADDR_VAR 0 7
40631: PUSH
40632: LD_VAR 0 7
40636: PUSH
40637: LD_VAR 0 14
40641: ADD
40642: ST_TO_ADDR
// end ;
40643: GO 40521
40645: POP
40646: POP
// end ; end ;
40647: LD_VAR 0 7
40651: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40652: LD_INT 0
40654: PPUSH
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
40659: PPUSH
40660: PPUSH
40661: PPUSH
40662: PPUSH
40663: PPUSH
40664: PPUSH
40665: PPUSH
40666: PPUSH
40667: PPUSH
40668: PPUSH
40669: PPUSH
// result := false ;
40670: LD_ADDR_VAR 0 3
40674: PUSH
40675: LD_INT 0
40677: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40678: LD_VAR 0 1
40682: NOT
40683: PUSH
40684: LD_VAR 0 1
40688: PPUSH
40689: CALL_OW 266
40693: PUSH
40694: LD_INT 32
40696: PUSH
40697: LD_INT 33
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: IN
40704: NOT
40705: OR
40706: IFFALSE 40710
// exit ;
40708: GO 41819
// nat := GetNation ( tower ) ;
40710: LD_ADDR_VAR 0 12
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: CALL_OW 248
40724: ST_TO_ADDR
// side := GetSide ( tower ) ;
40725: LD_ADDR_VAR 0 16
40729: PUSH
40730: LD_VAR 0 1
40734: PPUSH
40735: CALL_OW 255
40739: ST_TO_ADDR
// x := GetX ( tower ) ;
40740: LD_ADDR_VAR 0 10
40744: PUSH
40745: LD_VAR 0 1
40749: PPUSH
40750: CALL_OW 250
40754: ST_TO_ADDR
// y := GetY ( tower ) ;
40755: LD_ADDR_VAR 0 11
40759: PUSH
40760: LD_VAR 0 1
40764: PPUSH
40765: CALL_OW 251
40769: ST_TO_ADDR
// if not x or not y then
40770: LD_VAR 0 10
40774: NOT
40775: PUSH
40776: LD_VAR 0 11
40780: NOT
40781: OR
40782: IFFALSE 40786
// exit ;
40784: GO 41819
// weapon := 0 ;
40786: LD_ADDR_VAR 0 18
40790: PUSH
40791: LD_INT 0
40793: ST_TO_ADDR
// fac_list := [ ] ;
40794: LD_ADDR_VAR 0 17
40798: PUSH
40799: EMPTY
40800: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40801: LD_ADDR_VAR 0 6
40805: PUSH
40806: LD_VAR 0 1
40810: PPUSH
40811: CALL_OW 274
40815: PPUSH
40816: LD_VAR 0 2
40820: PPUSH
40821: LD_INT 0
40823: PPUSH
40824: CALL 38390 0 3
40828: PPUSH
40829: LD_INT 30
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PPUSH
40839: CALL_OW 72
40843: ST_TO_ADDR
// if not factories then
40844: LD_VAR 0 6
40848: NOT
40849: IFFALSE 40853
// exit ;
40851: GO 41819
// for i in factories do
40853: LD_ADDR_VAR 0 8
40857: PUSH
40858: LD_VAR 0 6
40862: PUSH
40863: FOR_IN
40864: IFFALSE 40889
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40866: LD_ADDR_VAR 0 17
40870: PUSH
40871: LD_VAR 0 17
40875: PUSH
40876: LD_VAR 0 8
40880: PPUSH
40881: CALL_OW 478
40885: UNION
40886: ST_TO_ADDR
40887: GO 40863
40889: POP
40890: POP
// if not fac_list then
40891: LD_VAR 0 17
40895: NOT
40896: IFFALSE 40900
// exit ;
40898: GO 41819
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40900: LD_ADDR_VAR 0 5
40904: PUSH
40905: LD_INT 4
40907: PUSH
40908: LD_INT 5
40910: PUSH
40911: LD_INT 9
40913: PUSH
40914: LD_INT 10
40916: PUSH
40917: LD_INT 6
40919: PUSH
40920: LD_INT 7
40922: PUSH
40923: LD_INT 11
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 27
40937: PUSH
40938: LD_INT 28
40940: PUSH
40941: LD_INT 26
40943: PUSH
40944: LD_INT 30
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 43
40955: PUSH
40956: LD_INT 44
40958: PUSH
40959: LD_INT 46
40961: PUSH
40962: LD_INT 45
40964: PUSH
40965: LD_INT 47
40967: PUSH
40968: LD_INT 49
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: PUSH
40984: LD_VAR 0 12
40988: ARRAY
40989: ST_TO_ADDR
// list := list isect fac_list ;
40990: LD_ADDR_VAR 0 5
40994: PUSH
40995: LD_VAR 0 5
40999: PUSH
41000: LD_VAR 0 17
41004: ISECT
41005: ST_TO_ADDR
// if not list then
41006: LD_VAR 0 5
41010: NOT
41011: IFFALSE 41015
// exit ;
41013: GO 41819
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41015: LD_VAR 0 12
41019: PUSH
41020: LD_INT 3
41022: EQUAL
41023: PUSH
41024: LD_INT 49
41026: PUSH
41027: LD_VAR 0 5
41031: IN
41032: AND
41033: PUSH
41034: LD_INT 31
41036: PPUSH
41037: LD_VAR 0 16
41041: PPUSH
41042: CALL_OW 321
41046: PUSH
41047: LD_INT 2
41049: EQUAL
41050: AND
41051: IFFALSE 41111
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41053: LD_INT 22
41055: PUSH
41056: LD_VAR 0 16
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 35
41067: PUSH
41068: LD_INT 49
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 91
41077: PUSH
41078: LD_VAR 0 1
41082: PUSH
41083: LD_INT 10
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: PPUSH
41096: CALL_OW 69
41100: NOT
41101: IFFALSE 41111
// weapon := ru_time_lapser ;
41103: LD_ADDR_VAR 0 18
41107: PUSH
41108: LD_INT 49
41110: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41111: LD_VAR 0 12
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: IN
41126: PUSH
41127: LD_INT 11
41129: PUSH
41130: LD_VAR 0 5
41134: IN
41135: PUSH
41136: LD_INT 30
41138: PUSH
41139: LD_VAR 0 5
41143: IN
41144: OR
41145: AND
41146: PUSH
41147: LD_INT 6
41149: PPUSH
41150: LD_VAR 0 16
41154: PPUSH
41155: CALL_OW 321
41159: PUSH
41160: LD_INT 2
41162: EQUAL
41163: AND
41164: IFFALSE 41329
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41166: LD_INT 22
41168: PUSH
41169: LD_VAR 0 16
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: LD_INT 35
41183: PUSH
41184: LD_INT 11
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 35
41193: PUSH
41194: LD_INT 30
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 91
41208: PUSH
41209: LD_VAR 0 1
41213: PUSH
41214: LD_INT 18
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: LIST
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: LIST
41226: PPUSH
41227: CALL_OW 69
41231: NOT
41232: PUSH
41233: LD_INT 22
41235: PUSH
41236: LD_VAR 0 16
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 30
41250: PUSH
41251: LD_INT 32
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 30
41260: PUSH
41261: LD_INT 33
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 91
41275: PUSH
41276: LD_VAR 0 1
41280: PUSH
41281: LD_INT 12
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: PUSH
41294: EMPTY
41295: LIST
41296: PPUSH
41297: CALL_OW 69
41301: PUSH
41302: LD_INT 2
41304: GREATER
41305: AND
41306: IFFALSE 41329
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41308: LD_ADDR_VAR 0 18
41312: PUSH
41313: LD_INT 11
41315: PUSH
41316: LD_INT 30
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_VAR 0 12
41327: ARRAY
41328: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41329: LD_VAR 0 18
41333: NOT
41334: PUSH
41335: LD_INT 40
41337: PPUSH
41338: LD_VAR 0 16
41342: PPUSH
41343: CALL_OW 321
41347: PUSH
41348: LD_INT 2
41350: EQUAL
41351: AND
41352: PUSH
41353: LD_INT 7
41355: PUSH
41356: LD_VAR 0 5
41360: IN
41361: PUSH
41362: LD_INT 28
41364: PUSH
41365: LD_VAR 0 5
41369: IN
41370: OR
41371: PUSH
41372: LD_INT 45
41374: PUSH
41375: LD_VAR 0 5
41379: IN
41380: OR
41381: AND
41382: IFFALSE 41636
// begin hex := GetHexInfo ( x , y ) ;
41384: LD_ADDR_VAR 0 4
41388: PUSH
41389: LD_VAR 0 10
41393: PPUSH
41394: LD_VAR 0 11
41398: PPUSH
41399: CALL_OW 546
41403: ST_TO_ADDR
// if hex [ 1 ] then
41404: LD_VAR 0 4
41408: PUSH
41409: LD_INT 1
41411: ARRAY
41412: IFFALSE 41416
// exit ;
41414: GO 41819
// height := hex [ 2 ] ;
41416: LD_ADDR_VAR 0 15
41420: PUSH
41421: LD_VAR 0 4
41425: PUSH
41426: LD_INT 2
41428: ARRAY
41429: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41430: LD_ADDR_VAR 0 14
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: LD_INT 5
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: ST_TO_ADDR
// for i in tmp do
41453: LD_ADDR_VAR 0 8
41457: PUSH
41458: LD_VAR 0 14
41462: PUSH
41463: FOR_IN
41464: IFFALSE 41634
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41466: LD_ADDR_VAR 0 9
41470: PUSH
41471: LD_VAR 0 10
41475: PPUSH
41476: LD_VAR 0 8
41480: PPUSH
41481: LD_INT 5
41483: PPUSH
41484: CALL_OW 272
41488: PUSH
41489: LD_VAR 0 11
41493: PPUSH
41494: LD_VAR 0 8
41498: PPUSH
41499: LD_INT 5
41501: PPUSH
41502: CALL_OW 273
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41511: LD_VAR 0 9
41515: PUSH
41516: LD_INT 1
41518: ARRAY
41519: PPUSH
41520: LD_VAR 0 9
41524: PUSH
41525: LD_INT 2
41527: ARRAY
41528: PPUSH
41529: CALL_OW 488
41533: IFFALSE 41632
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41535: LD_ADDR_VAR 0 4
41539: PUSH
41540: LD_VAR 0 9
41544: PUSH
41545: LD_INT 1
41547: ARRAY
41548: PPUSH
41549: LD_VAR 0 9
41553: PUSH
41554: LD_INT 2
41556: ARRAY
41557: PPUSH
41558: CALL_OW 546
41562: ST_TO_ADDR
// if hex [ 1 ] then
41563: LD_VAR 0 4
41567: PUSH
41568: LD_INT 1
41570: ARRAY
41571: IFFALSE 41575
// continue ;
41573: GO 41463
// h := hex [ 2 ] ;
41575: LD_ADDR_VAR 0 13
41579: PUSH
41580: LD_VAR 0 4
41584: PUSH
41585: LD_INT 2
41587: ARRAY
41588: ST_TO_ADDR
// if h + 7 < height then
41589: LD_VAR 0 13
41593: PUSH
41594: LD_INT 7
41596: PLUS
41597: PUSH
41598: LD_VAR 0 15
41602: LESS
41603: IFFALSE 41632
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41605: LD_ADDR_VAR 0 18
41609: PUSH
41610: LD_INT 7
41612: PUSH
41613: LD_INT 28
41615: PUSH
41616: LD_INT 45
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: LIST
41623: PUSH
41624: LD_VAR 0 12
41628: ARRAY
41629: ST_TO_ADDR
// break ;
41630: GO 41634
// end ; end ; end ;
41632: GO 41463
41634: POP
41635: POP
// end ; if not weapon then
41636: LD_VAR 0 18
41640: NOT
41641: IFFALSE 41701
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41643: LD_ADDR_VAR 0 5
41647: PUSH
41648: LD_VAR 0 5
41652: PUSH
41653: LD_INT 11
41655: PUSH
41656: LD_INT 30
41658: PUSH
41659: LD_INT 49
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: LIST
41666: DIFF
41667: ST_TO_ADDR
// if not list then
41668: LD_VAR 0 5
41672: NOT
41673: IFFALSE 41677
// exit ;
41675: GO 41819
// weapon := list [ rand ( 1 , list ) ] ;
41677: LD_ADDR_VAR 0 18
41681: PUSH
41682: LD_VAR 0 5
41686: PUSH
41687: LD_INT 1
41689: PPUSH
41690: LD_VAR 0 5
41694: PPUSH
41695: CALL_OW 12
41699: ARRAY
41700: ST_TO_ADDR
// end ; if weapon then
41701: LD_VAR 0 18
41705: IFFALSE 41819
// begin tmp := CostOfWeapon ( weapon ) ;
41707: LD_ADDR_VAR 0 14
41711: PUSH
41712: LD_VAR 0 18
41716: PPUSH
41717: CALL_OW 451
41721: ST_TO_ADDR
// j := GetBase ( tower ) ;
41722: LD_ADDR_VAR 0 9
41726: PUSH
41727: LD_VAR 0 1
41731: PPUSH
41732: CALL_OW 274
41736: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41737: LD_VAR 0 9
41741: PPUSH
41742: LD_INT 1
41744: PPUSH
41745: CALL_OW 275
41749: PUSH
41750: LD_VAR 0 14
41754: PUSH
41755: LD_INT 1
41757: ARRAY
41758: GREATEREQUAL
41759: PUSH
41760: LD_VAR 0 9
41764: PPUSH
41765: LD_INT 2
41767: PPUSH
41768: CALL_OW 275
41772: PUSH
41773: LD_VAR 0 14
41777: PUSH
41778: LD_INT 2
41780: ARRAY
41781: GREATEREQUAL
41782: AND
41783: PUSH
41784: LD_VAR 0 9
41788: PPUSH
41789: LD_INT 3
41791: PPUSH
41792: CALL_OW 275
41796: PUSH
41797: LD_VAR 0 14
41801: PUSH
41802: LD_INT 3
41804: ARRAY
41805: GREATEREQUAL
41806: AND
41807: IFFALSE 41819
// result := weapon ;
41809: LD_ADDR_VAR 0 3
41813: PUSH
41814: LD_VAR 0 18
41818: ST_TO_ADDR
// end ; end ;
41819: LD_VAR 0 3
41823: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41824: LD_INT 0
41826: PPUSH
41827: PPUSH
// result := true ;
41828: LD_ADDR_VAR 0 3
41832: PUSH
41833: LD_INT 1
41835: ST_TO_ADDR
// if array1 = array2 then
41836: LD_VAR 0 1
41840: PUSH
41841: LD_VAR 0 2
41845: EQUAL
41846: IFFALSE 41906
// begin for i = 1 to array1 do
41848: LD_ADDR_VAR 0 4
41852: PUSH
41853: DOUBLE
41854: LD_INT 1
41856: DEC
41857: ST_TO_ADDR
41858: LD_VAR 0 1
41862: PUSH
41863: FOR_TO
41864: IFFALSE 41902
// if array1 [ i ] <> array2 [ i ] then
41866: LD_VAR 0 1
41870: PUSH
41871: LD_VAR 0 4
41875: ARRAY
41876: PUSH
41877: LD_VAR 0 2
41881: PUSH
41882: LD_VAR 0 4
41886: ARRAY
41887: NONEQUAL
41888: IFFALSE 41900
// begin result := false ;
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: LD_INT 0
41897: ST_TO_ADDR
// break ;
41898: GO 41902
// end ;
41900: GO 41863
41902: POP
41903: POP
// end else
41904: GO 41914
// result := false ;
41906: LD_ADDR_VAR 0 3
41910: PUSH
41911: LD_INT 0
41913: ST_TO_ADDR
// end ;
41914: LD_VAR 0 3
41918: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41919: LD_INT 0
41921: PPUSH
41922: PPUSH
// if not array1 or not array2 then
41923: LD_VAR 0 1
41927: NOT
41928: PUSH
41929: LD_VAR 0 2
41933: NOT
41934: OR
41935: IFFALSE 41939
// exit ;
41937: GO 42003
// result := true ;
41939: LD_ADDR_VAR 0 3
41943: PUSH
41944: LD_INT 1
41946: ST_TO_ADDR
// for i = 1 to array1 do
41947: LD_ADDR_VAR 0 4
41951: PUSH
41952: DOUBLE
41953: LD_INT 1
41955: DEC
41956: ST_TO_ADDR
41957: LD_VAR 0 1
41961: PUSH
41962: FOR_TO
41963: IFFALSE 42001
// if array1 [ i ] <> array2 [ i ] then
41965: LD_VAR 0 1
41969: PUSH
41970: LD_VAR 0 4
41974: ARRAY
41975: PUSH
41976: LD_VAR 0 2
41980: PUSH
41981: LD_VAR 0 4
41985: ARRAY
41986: NONEQUAL
41987: IFFALSE 41999
// begin result := false ;
41989: LD_ADDR_VAR 0 3
41993: PUSH
41994: LD_INT 0
41996: ST_TO_ADDR
// break ;
41997: GO 42001
// end ;
41999: GO 41962
42001: POP
42002: POP
// end ;
42003: LD_VAR 0 3
42007: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42008: LD_INT 0
42010: PPUSH
42011: PPUSH
42012: PPUSH
// pom := GetBase ( fac ) ;
42013: LD_ADDR_VAR 0 5
42017: PUSH
42018: LD_VAR 0 1
42022: PPUSH
42023: CALL_OW 274
42027: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42028: LD_ADDR_VAR 0 4
42032: PUSH
42033: LD_VAR 0 2
42037: PUSH
42038: LD_INT 1
42040: ARRAY
42041: PPUSH
42042: LD_VAR 0 2
42046: PUSH
42047: LD_INT 2
42049: ARRAY
42050: PPUSH
42051: LD_VAR 0 2
42055: PUSH
42056: LD_INT 3
42058: ARRAY
42059: PPUSH
42060: LD_VAR 0 2
42064: PUSH
42065: LD_INT 4
42067: ARRAY
42068: PPUSH
42069: CALL_OW 449
42073: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42074: LD_ADDR_VAR 0 3
42078: PUSH
42079: LD_VAR 0 5
42083: PPUSH
42084: LD_INT 1
42086: PPUSH
42087: CALL_OW 275
42091: PUSH
42092: LD_VAR 0 4
42096: PUSH
42097: LD_INT 1
42099: ARRAY
42100: GREATEREQUAL
42101: PUSH
42102: LD_VAR 0 5
42106: PPUSH
42107: LD_INT 2
42109: PPUSH
42110: CALL_OW 275
42114: PUSH
42115: LD_VAR 0 4
42119: PUSH
42120: LD_INT 2
42122: ARRAY
42123: GREATEREQUAL
42124: AND
42125: PUSH
42126: LD_VAR 0 5
42130: PPUSH
42131: LD_INT 3
42133: PPUSH
42134: CALL_OW 275
42138: PUSH
42139: LD_VAR 0 4
42143: PUSH
42144: LD_INT 3
42146: ARRAY
42147: GREATEREQUAL
42148: AND
42149: ST_TO_ADDR
// end ;
42150: LD_VAR 0 3
42154: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42155: LD_INT 0
42157: PPUSH
42158: PPUSH
42159: PPUSH
42160: PPUSH
// pom := GetBase ( building ) ;
42161: LD_ADDR_VAR 0 3
42165: PUSH
42166: LD_VAR 0 1
42170: PPUSH
42171: CALL_OW 274
42175: ST_TO_ADDR
// if not pom then
42176: LD_VAR 0 3
42180: NOT
42181: IFFALSE 42185
// exit ;
42183: GO 42355
// btype := GetBType ( building ) ;
42185: LD_ADDR_VAR 0 5
42189: PUSH
42190: LD_VAR 0 1
42194: PPUSH
42195: CALL_OW 266
42199: ST_TO_ADDR
// if btype = b_armoury then
42200: LD_VAR 0 5
42204: PUSH
42205: LD_INT 4
42207: EQUAL
42208: IFFALSE 42218
// btype := b_barracks ;
42210: LD_ADDR_VAR 0 5
42214: PUSH
42215: LD_INT 5
42217: ST_TO_ADDR
// if btype = b_depot then
42218: LD_VAR 0 5
42222: PUSH
42223: LD_INT 0
42225: EQUAL
42226: IFFALSE 42236
// btype := b_warehouse ;
42228: LD_ADDR_VAR 0 5
42232: PUSH
42233: LD_INT 1
42235: ST_TO_ADDR
// if btype = b_workshop then
42236: LD_VAR 0 5
42240: PUSH
42241: LD_INT 2
42243: EQUAL
42244: IFFALSE 42254
// btype := b_factory ;
42246: LD_ADDR_VAR 0 5
42250: PUSH
42251: LD_INT 3
42253: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42254: LD_ADDR_VAR 0 4
42258: PUSH
42259: LD_VAR 0 5
42263: PPUSH
42264: LD_VAR 0 1
42268: PPUSH
42269: CALL_OW 248
42273: PPUSH
42274: CALL_OW 450
42278: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42279: LD_ADDR_VAR 0 2
42283: PUSH
42284: LD_VAR 0 3
42288: PPUSH
42289: LD_INT 1
42291: PPUSH
42292: CALL_OW 275
42296: PUSH
42297: LD_VAR 0 4
42301: PUSH
42302: LD_INT 1
42304: ARRAY
42305: GREATEREQUAL
42306: PUSH
42307: LD_VAR 0 3
42311: PPUSH
42312: LD_INT 2
42314: PPUSH
42315: CALL_OW 275
42319: PUSH
42320: LD_VAR 0 4
42324: PUSH
42325: LD_INT 2
42327: ARRAY
42328: GREATEREQUAL
42329: AND
42330: PUSH
42331: LD_VAR 0 3
42335: PPUSH
42336: LD_INT 3
42338: PPUSH
42339: CALL_OW 275
42343: PUSH
42344: LD_VAR 0 4
42348: PUSH
42349: LD_INT 3
42351: ARRAY
42352: GREATEREQUAL
42353: AND
42354: ST_TO_ADDR
// end ;
42355: LD_VAR 0 2
42359: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42360: LD_INT 0
42362: PPUSH
42363: PPUSH
42364: PPUSH
// pom := GetBase ( building ) ;
42365: LD_ADDR_VAR 0 4
42369: PUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: CALL_OW 274
42379: ST_TO_ADDR
// if not pom then
42380: LD_VAR 0 4
42384: NOT
42385: IFFALSE 42389
// exit ;
42387: GO 42490
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42389: LD_ADDR_VAR 0 5
42393: PUSH
42394: LD_VAR 0 2
42398: PPUSH
42399: LD_VAR 0 1
42403: PPUSH
42404: CALL_OW 248
42408: PPUSH
42409: CALL_OW 450
42413: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42414: LD_ADDR_VAR 0 3
42418: PUSH
42419: LD_VAR 0 4
42423: PPUSH
42424: LD_INT 1
42426: PPUSH
42427: CALL_OW 275
42431: PUSH
42432: LD_VAR 0 5
42436: PUSH
42437: LD_INT 1
42439: ARRAY
42440: GREATEREQUAL
42441: PUSH
42442: LD_VAR 0 4
42446: PPUSH
42447: LD_INT 2
42449: PPUSH
42450: CALL_OW 275
42454: PUSH
42455: LD_VAR 0 5
42459: PUSH
42460: LD_INT 2
42462: ARRAY
42463: GREATEREQUAL
42464: AND
42465: PUSH
42466: LD_VAR 0 4
42470: PPUSH
42471: LD_INT 3
42473: PPUSH
42474: CALL_OW 275
42478: PUSH
42479: LD_VAR 0 5
42483: PUSH
42484: LD_INT 3
42486: ARRAY
42487: GREATEREQUAL
42488: AND
42489: ST_TO_ADDR
// end ;
42490: LD_VAR 0 3
42494: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42495: LD_INT 0
42497: PPUSH
42498: PPUSH
42499: PPUSH
42500: PPUSH
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
42505: PPUSH
42506: PPUSH
42507: PPUSH
// result := false ;
42508: LD_ADDR_VAR 0 8
42512: PUSH
42513: LD_INT 0
42515: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42516: LD_VAR 0 5
42520: NOT
42521: PUSH
42522: LD_VAR 0 1
42526: NOT
42527: OR
42528: PUSH
42529: LD_VAR 0 2
42533: NOT
42534: OR
42535: PUSH
42536: LD_VAR 0 3
42540: NOT
42541: OR
42542: IFFALSE 42546
// exit ;
42544: GO 43360
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42546: LD_ADDR_VAR 0 14
42550: PUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: LD_VAR 0 2
42560: PPUSH
42561: LD_VAR 0 3
42565: PPUSH
42566: LD_VAR 0 4
42570: PPUSH
42571: LD_VAR 0 5
42575: PUSH
42576: LD_INT 1
42578: ARRAY
42579: PPUSH
42580: CALL_OW 248
42584: PPUSH
42585: LD_INT 0
42587: PPUSH
42588: CALL 44593 0 6
42592: ST_TO_ADDR
// if not hexes then
42593: LD_VAR 0 14
42597: NOT
42598: IFFALSE 42602
// exit ;
42600: GO 43360
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42602: LD_ADDR_VAR 0 17
42606: PUSH
42607: LD_VAR 0 5
42611: PPUSH
42612: LD_INT 22
42614: PUSH
42615: LD_VAR 0 13
42619: PPUSH
42620: CALL_OW 255
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: LD_INT 30
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 30
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PPUSH
42661: CALL_OW 72
42665: ST_TO_ADDR
// for i = 1 to hexes do
42666: LD_ADDR_VAR 0 9
42670: PUSH
42671: DOUBLE
42672: LD_INT 1
42674: DEC
42675: ST_TO_ADDR
42676: LD_VAR 0 14
42680: PUSH
42681: FOR_TO
42682: IFFALSE 43358
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42684: LD_ADDR_VAR 0 13
42688: PUSH
42689: LD_VAR 0 14
42693: PUSH
42694: LD_VAR 0 9
42698: ARRAY
42699: PUSH
42700: LD_INT 1
42702: ARRAY
42703: PPUSH
42704: LD_VAR 0 14
42708: PUSH
42709: LD_VAR 0 9
42713: ARRAY
42714: PUSH
42715: LD_INT 2
42717: ARRAY
42718: PPUSH
42719: CALL_OW 428
42723: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42724: LD_VAR 0 14
42728: PUSH
42729: LD_VAR 0 9
42733: ARRAY
42734: PUSH
42735: LD_INT 1
42737: ARRAY
42738: PPUSH
42739: LD_VAR 0 14
42743: PUSH
42744: LD_VAR 0 9
42748: ARRAY
42749: PUSH
42750: LD_INT 2
42752: ARRAY
42753: PPUSH
42754: CALL_OW 351
42758: PUSH
42759: LD_VAR 0 14
42763: PUSH
42764: LD_VAR 0 9
42768: ARRAY
42769: PUSH
42770: LD_INT 1
42772: ARRAY
42773: PPUSH
42774: LD_VAR 0 14
42778: PUSH
42779: LD_VAR 0 9
42783: ARRAY
42784: PUSH
42785: LD_INT 2
42787: ARRAY
42788: PPUSH
42789: CALL_OW 488
42793: NOT
42794: OR
42795: PUSH
42796: LD_VAR 0 13
42800: PPUSH
42801: CALL_OW 247
42805: PUSH
42806: LD_INT 3
42808: EQUAL
42809: OR
42810: IFFALSE 42816
// exit ;
42812: POP
42813: POP
42814: GO 43360
// if not tmp then
42816: LD_VAR 0 13
42820: NOT
42821: IFFALSE 42825
// continue ;
42823: GO 42681
// result := true ;
42825: LD_ADDR_VAR 0 8
42829: PUSH
42830: LD_INT 1
42832: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42833: LD_VAR 0 6
42837: PUSH
42838: LD_VAR 0 13
42842: PPUSH
42843: CALL_OW 247
42847: PUSH
42848: LD_INT 2
42850: EQUAL
42851: AND
42852: PUSH
42853: LD_VAR 0 13
42857: PPUSH
42858: CALL_OW 263
42862: PUSH
42863: LD_INT 1
42865: EQUAL
42866: AND
42867: IFFALSE 43031
// begin if IsDrivenBy ( tmp ) then
42869: LD_VAR 0 13
42873: PPUSH
42874: CALL_OW 311
42878: IFFALSE 42882
// continue ;
42880: GO 42681
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42882: LD_VAR 0 6
42886: PPUSH
42887: LD_INT 3
42889: PUSH
42890: LD_INT 60
42892: PUSH
42893: EMPTY
42894: LIST
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 3
42902: PUSH
42903: LD_INT 55
42905: PUSH
42906: EMPTY
42907: LIST
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PPUSH
42917: CALL_OW 72
42921: IFFALSE 43029
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42923: LD_ADDR_VAR 0 18
42927: PUSH
42928: LD_VAR 0 6
42932: PPUSH
42933: LD_INT 3
42935: PUSH
42936: LD_INT 60
42938: PUSH
42939: EMPTY
42940: LIST
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: PUSH
42949: LD_INT 55
42951: PUSH
42952: EMPTY
42953: LIST
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PPUSH
42963: CALL_OW 72
42967: PUSH
42968: LD_INT 1
42970: ARRAY
42971: ST_TO_ADDR
// if IsInUnit ( driver ) then
42972: LD_VAR 0 18
42976: PPUSH
42977: CALL_OW 310
42981: IFFALSE 42992
// ComExit ( driver ) ;
42983: LD_VAR 0 18
42987: PPUSH
42988: CALL 68373 0 1
// AddComEnterUnit ( driver , tmp ) ;
42992: LD_VAR 0 18
42996: PPUSH
42997: LD_VAR 0 13
43001: PPUSH
43002: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43006: LD_VAR 0 18
43010: PPUSH
43011: LD_VAR 0 7
43015: PPUSH
43016: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43020: LD_VAR 0 18
43024: PPUSH
43025: CALL_OW 181
// end ; continue ;
43029: GO 42681
// end ; if not cleaners or not tmp in cleaners then
43031: LD_VAR 0 6
43035: NOT
43036: PUSH
43037: LD_VAR 0 13
43041: PUSH
43042: LD_VAR 0 6
43046: IN
43047: NOT
43048: OR
43049: IFFALSE 43356
// begin if dep then
43051: LD_VAR 0 17
43055: IFFALSE 43191
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43057: LD_ADDR_VAR 0 16
43061: PUSH
43062: LD_VAR 0 17
43066: PUSH
43067: LD_INT 1
43069: ARRAY
43070: PPUSH
43071: CALL_OW 250
43075: PPUSH
43076: LD_VAR 0 17
43080: PUSH
43081: LD_INT 1
43083: ARRAY
43084: PPUSH
43085: CALL_OW 254
43089: PPUSH
43090: LD_INT 5
43092: PPUSH
43093: CALL_OW 272
43097: PUSH
43098: LD_VAR 0 17
43102: PUSH
43103: LD_INT 1
43105: ARRAY
43106: PPUSH
43107: CALL_OW 251
43111: PPUSH
43112: LD_VAR 0 17
43116: PUSH
43117: LD_INT 1
43119: ARRAY
43120: PPUSH
43121: CALL_OW 254
43125: PPUSH
43126: LD_INT 5
43128: PPUSH
43129: CALL_OW 273
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43138: LD_VAR 0 16
43142: PUSH
43143: LD_INT 1
43145: ARRAY
43146: PPUSH
43147: LD_VAR 0 16
43151: PUSH
43152: LD_INT 2
43154: ARRAY
43155: PPUSH
43156: CALL_OW 488
43160: IFFALSE 43191
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43162: LD_VAR 0 13
43166: PPUSH
43167: LD_VAR 0 16
43171: PUSH
43172: LD_INT 1
43174: ARRAY
43175: PPUSH
43176: LD_VAR 0 16
43180: PUSH
43181: LD_INT 2
43183: ARRAY
43184: PPUSH
43185: CALL_OW 111
// continue ;
43189: GO 42681
// end ; end ; r := GetDir ( tmp ) ;
43191: LD_ADDR_VAR 0 15
43195: PUSH
43196: LD_VAR 0 13
43200: PPUSH
43201: CALL_OW 254
43205: ST_TO_ADDR
// if r = 5 then
43206: LD_VAR 0 15
43210: PUSH
43211: LD_INT 5
43213: EQUAL
43214: IFFALSE 43224
// r := 0 ;
43216: LD_ADDR_VAR 0 15
43220: PUSH
43221: LD_INT 0
43223: ST_TO_ADDR
// for j = r to 5 do
43224: LD_ADDR_VAR 0 10
43228: PUSH
43229: DOUBLE
43230: LD_VAR 0 15
43234: DEC
43235: ST_TO_ADDR
43236: LD_INT 5
43238: PUSH
43239: FOR_TO
43240: IFFALSE 43354
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43242: LD_ADDR_VAR 0 11
43246: PUSH
43247: LD_VAR 0 13
43251: PPUSH
43252: CALL_OW 250
43256: PPUSH
43257: LD_VAR 0 10
43261: PPUSH
43262: LD_INT 2
43264: PPUSH
43265: CALL_OW 272
43269: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43270: LD_ADDR_VAR 0 12
43274: PUSH
43275: LD_VAR 0 13
43279: PPUSH
43280: CALL_OW 251
43284: PPUSH
43285: LD_VAR 0 10
43289: PPUSH
43290: LD_INT 2
43292: PPUSH
43293: CALL_OW 273
43297: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43298: LD_VAR 0 11
43302: PPUSH
43303: LD_VAR 0 12
43307: PPUSH
43308: CALL_OW 488
43312: PUSH
43313: LD_VAR 0 11
43317: PPUSH
43318: LD_VAR 0 12
43322: PPUSH
43323: CALL_OW 428
43327: NOT
43328: AND
43329: IFFALSE 43352
// begin ComMoveXY ( tmp , _x , _y ) ;
43331: LD_VAR 0 13
43335: PPUSH
43336: LD_VAR 0 11
43340: PPUSH
43341: LD_VAR 0 12
43345: PPUSH
43346: CALL_OW 111
// break ;
43350: GO 43354
// end ; end ;
43352: GO 43239
43354: POP
43355: POP
// end ; end ;
43356: GO 42681
43358: POP
43359: POP
// end ;
43360: LD_VAR 0 8
43364: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43365: LD_INT 0
43367: PPUSH
// result := true ;
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_INT 1
43375: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43376: LD_VAR 0 2
43380: PUSH
43381: LD_INT 24
43383: DOUBLE
43384: EQUAL
43385: IFTRUE 43395
43387: LD_INT 33
43389: DOUBLE
43390: EQUAL
43391: IFTRUE 43395
43393: GO 43420
43395: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: LD_INT 32
43403: PPUSH
43404: LD_VAR 0 1
43408: PPUSH
43409: CALL_OW 321
43413: PUSH
43414: LD_INT 2
43416: EQUAL
43417: ST_TO_ADDR
43418: GO 43736
43420: LD_INT 20
43422: DOUBLE
43423: EQUAL
43424: IFTRUE 43428
43426: GO 43453
43428: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43429: LD_ADDR_VAR 0 3
43433: PUSH
43434: LD_INT 6
43436: PPUSH
43437: LD_VAR 0 1
43441: PPUSH
43442: CALL_OW 321
43446: PUSH
43447: LD_INT 2
43449: EQUAL
43450: ST_TO_ADDR
43451: GO 43736
43453: LD_INT 22
43455: DOUBLE
43456: EQUAL
43457: IFTRUE 43467
43459: LD_INT 36
43461: DOUBLE
43462: EQUAL
43463: IFTRUE 43467
43465: GO 43492
43467: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43468: LD_ADDR_VAR 0 3
43472: PUSH
43473: LD_INT 15
43475: PPUSH
43476: LD_VAR 0 1
43480: PPUSH
43481: CALL_OW 321
43485: PUSH
43486: LD_INT 2
43488: EQUAL
43489: ST_TO_ADDR
43490: GO 43736
43492: LD_INT 30
43494: DOUBLE
43495: EQUAL
43496: IFTRUE 43500
43498: GO 43525
43500: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43501: LD_ADDR_VAR 0 3
43505: PUSH
43506: LD_INT 20
43508: PPUSH
43509: LD_VAR 0 1
43513: PPUSH
43514: CALL_OW 321
43518: PUSH
43519: LD_INT 2
43521: EQUAL
43522: ST_TO_ADDR
43523: GO 43736
43525: LD_INT 28
43527: DOUBLE
43528: EQUAL
43529: IFTRUE 43539
43531: LD_INT 21
43533: DOUBLE
43534: EQUAL
43535: IFTRUE 43539
43537: GO 43564
43539: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43540: LD_ADDR_VAR 0 3
43544: PUSH
43545: LD_INT 21
43547: PPUSH
43548: LD_VAR 0 1
43552: PPUSH
43553: CALL_OW 321
43557: PUSH
43558: LD_INT 2
43560: EQUAL
43561: ST_TO_ADDR
43562: GO 43736
43564: LD_INT 16
43566: DOUBLE
43567: EQUAL
43568: IFTRUE 43572
43570: GO 43597
43572: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43573: LD_ADDR_VAR 0 3
43577: PUSH
43578: LD_INT 84
43580: PPUSH
43581: LD_VAR 0 1
43585: PPUSH
43586: CALL_OW 321
43590: PUSH
43591: LD_INT 2
43593: EQUAL
43594: ST_TO_ADDR
43595: GO 43736
43597: LD_INT 19
43599: DOUBLE
43600: EQUAL
43601: IFTRUE 43611
43603: LD_INT 23
43605: DOUBLE
43606: EQUAL
43607: IFTRUE 43611
43609: GO 43636
43611: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43612: LD_ADDR_VAR 0 3
43616: PUSH
43617: LD_INT 83
43619: PPUSH
43620: LD_VAR 0 1
43624: PPUSH
43625: CALL_OW 321
43629: PUSH
43630: LD_INT 2
43632: EQUAL
43633: ST_TO_ADDR
43634: GO 43736
43636: LD_INT 17
43638: DOUBLE
43639: EQUAL
43640: IFTRUE 43644
43642: GO 43669
43644: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43645: LD_ADDR_VAR 0 3
43649: PUSH
43650: LD_INT 39
43652: PPUSH
43653: LD_VAR 0 1
43657: PPUSH
43658: CALL_OW 321
43662: PUSH
43663: LD_INT 2
43665: EQUAL
43666: ST_TO_ADDR
43667: GO 43736
43669: LD_INT 18
43671: DOUBLE
43672: EQUAL
43673: IFTRUE 43677
43675: GO 43702
43677: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43678: LD_ADDR_VAR 0 3
43682: PUSH
43683: LD_INT 40
43685: PPUSH
43686: LD_VAR 0 1
43690: PPUSH
43691: CALL_OW 321
43695: PUSH
43696: LD_INT 2
43698: EQUAL
43699: ST_TO_ADDR
43700: GO 43736
43702: LD_INT 27
43704: DOUBLE
43705: EQUAL
43706: IFTRUE 43710
43708: GO 43735
43710: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43711: LD_ADDR_VAR 0 3
43715: PUSH
43716: LD_INT 35
43718: PPUSH
43719: LD_VAR 0 1
43723: PPUSH
43724: CALL_OW 321
43728: PUSH
43729: LD_INT 2
43731: EQUAL
43732: ST_TO_ADDR
43733: GO 43736
43735: POP
// end ;
43736: LD_VAR 0 3
43740: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43741: LD_INT 0
43743: PPUSH
43744: PPUSH
43745: PPUSH
43746: PPUSH
43747: PPUSH
43748: PPUSH
43749: PPUSH
43750: PPUSH
43751: PPUSH
43752: PPUSH
43753: PPUSH
// result := false ;
43754: LD_ADDR_VAR 0 6
43758: PUSH
43759: LD_INT 0
43761: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43762: LD_VAR 0 1
43766: NOT
43767: PUSH
43768: LD_VAR 0 1
43772: PPUSH
43773: CALL_OW 266
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: IN
43788: NOT
43789: OR
43790: PUSH
43791: LD_VAR 0 2
43795: NOT
43796: OR
43797: PUSH
43798: LD_VAR 0 5
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: LD_INT 4
43817: PUSH
43818: LD_INT 5
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: IN
43829: NOT
43830: OR
43831: PUSH
43832: LD_VAR 0 3
43836: PPUSH
43837: LD_VAR 0 4
43841: PPUSH
43842: CALL_OW 488
43846: NOT
43847: OR
43848: IFFALSE 43852
// exit ;
43850: GO 44588
// side := GetSide ( depot ) ;
43852: LD_ADDR_VAR 0 9
43856: PUSH
43857: LD_VAR 0 1
43861: PPUSH
43862: CALL_OW 255
43866: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43867: LD_VAR 0 9
43871: PPUSH
43872: LD_VAR 0 2
43876: PPUSH
43877: CALL 43365 0 2
43881: NOT
43882: IFFALSE 43886
// exit ;
43884: GO 44588
// pom := GetBase ( depot ) ;
43886: LD_ADDR_VAR 0 10
43890: PUSH
43891: LD_VAR 0 1
43895: PPUSH
43896: CALL_OW 274
43900: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43901: LD_ADDR_VAR 0 11
43905: PUSH
43906: LD_VAR 0 2
43910: PPUSH
43911: LD_VAR 0 1
43915: PPUSH
43916: CALL_OW 248
43920: PPUSH
43921: CALL_OW 450
43925: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43926: LD_VAR 0 10
43930: PPUSH
43931: LD_INT 1
43933: PPUSH
43934: CALL_OW 275
43938: PUSH
43939: LD_VAR 0 11
43943: PUSH
43944: LD_INT 1
43946: ARRAY
43947: GREATEREQUAL
43948: PUSH
43949: LD_VAR 0 10
43953: PPUSH
43954: LD_INT 2
43956: PPUSH
43957: CALL_OW 275
43961: PUSH
43962: LD_VAR 0 11
43966: PUSH
43967: LD_INT 2
43969: ARRAY
43970: GREATEREQUAL
43971: AND
43972: PUSH
43973: LD_VAR 0 10
43977: PPUSH
43978: LD_INT 3
43980: PPUSH
43981: CALL_OW 275
43985: PUSH
43986: LD_VAR 0 11
43990: PUSH
43991: LD_INT 3
43993: ARRAY
43994: GREATEREQUAL
43995: AND
43996: NOT
43997: IFFALSE 44001
// exit ;
43999: GO 44588
// if GetBType ( depot ) = b_depot then
44001: LD_VAR 0 1
44005: PPUSH
44006: CALL_OW 266
44010: PUSH
44011: LD_INT 0
44013: EQUAL
44014: IFFALSE 44026
// dist := 28 else
44016: LD_ADDR_VAR 0 14
44020: PUSH
44021: LD_INT 28
44023: ST_TO_ADDR
44024: GO 44034
// dist := 36 ;
44026: LD_ADDR_VAR 0 14
44030: PUSH
44031: LD_INT 36
44033: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44034: LD_VAR 0 1
44038: PPUSH
44039: LD_VAR 0 3
44043: PPUSH
44044: LD_VAR 0 4
44048: PPUSH
44049: CALL_OW 297
44053: PUSH
44054: LD_VAR 0 14
44058: GREATER
44059: IFFALSE 44063
// exit ;
44061: GO 44588
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44063: LD_ADDR_VAR 0 12
44067: PUSH
44068: LD_VAR 0 2
44072: PPUSH
44073: LD_VAR 0 3
44077: PPUSH
44078: LD_VAR 0 4
44082: PPUSH
44083: LD_VAR 0 5
44087: PPUSH
44088: LD_VAR 0 1
44092: PPUSH
44093: CALL_OW 248
44097: PPUSH
44098: LD_INT 0
44100: PPUSH
44101: CALL 44593 0 6
44105: ST_TO_ADDR
// if not hexes then
44106: LD_VAR 0 12
44110: NOT
44111: IFFALSE 44115
// exit ;
44113: GO 44588
// hex := GetHexInfo ( x , y ) ;
44115: LD_ADDR_VAR 0 15
44119: PUSH
44120: LD_VAR 0 3
44124: PPUSH
44125: LD_VAR 0 4
44129: PPUSH
44130: CALL_OW 546
44134: ST_TO_ADDR
// if hex [ 1 ] then
44135: LD_VAR 0 15
44139: PUSH
44140: LD_INT 1
44142: ARRAY
44143: IFFALSE 44147
// exit ;
44145: GO 44588
// height := hex [ 2 ] ;
44147: LD_ADDR_VAR 0 13
44151: PUSH
44152: LD_VAR 0 15
44156: PUSH
44157: LD_INT 2
44159: ARRAY
44160: ST_TO_ADDR
// for i = 1 to hexes do
44161: LD_ADDR_VAR 0 7
44165: PUSH
44166: DOUBLE
44167: LD_INT 1
44169: DEC
44170: ST_TO_ADDR
44171: LD_VAR 0 12
44175: PUSH
44176: FOR_TO
44177: IFFALSE 44507
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44179: LD_VAR 0 12
44183: PUSH
44184: LD_VAR 0 7
44188: ARRAY
44189: PUSH
44190: LD_INT 1
44192: ARRAY
44193: PPUSH
44194: LD_VAR 0 12
44198: PUSH
44199: LD_VAR 0 7
44203: ARRAY
44204: PUSH
44205: LD_INT 2
44207: ARRAY
44208: PPUSH
44209: CALL_OW 488
44213: NOT
44214: PUSH
44215: LD_VAR 0 12
44219: PUSH
44220: LD_VAR 0 7
44224: ARRAY
44225: PUSH
44226: LD_INT 1
44228: ARRAY
44229: PPUSH
44230: LD_VAR 0 12
44234: PUSH
44235: LD_VAR 0 7
44239: ARRAY
44240: PUSH
44241: LD_INT 2
44243: ARRAY
44244: PPUSH
44245: CALL_OW 428
44249: PUSH
44250: LD_INT 0
44252: GREATER
44253: OR
44254: PUSH
44255: LD_VAR 0 12
44259: PUSH
44260: LD_VAR 0 7
44264: ARRAY
44265: PUSH
44266: LD_INT 1
44268: ARRAY
44269: PPUSH
44270: LD_VAR 0 12
44274: PUSH
44275: LD_VAR 0 7
44279: ARRAY
44280: PUSH
44281: LD_INT 2
44283: ARRAY
44284: PPUSH
44285: CALL_OW 351
44289: OR
44290: IFFALSE 44296
// exit ;
44292: POP
44293: POP
44294: GO 44588
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44296: LD_ADDR_VAR 0 8
44300: PUSH
44301: LD_VAR 0 12
44305: PUSH
44306: LD_VAR 0 7
44310: ARRAY
44311: PUSH
44312: LD_INT 1
44314: ARRAY
44315: PPUSH
44316: LD_VAR 0 12
44320: PUSH
44321: LD_VAR 0 7
44325: ARRAY
44326: PUSH
44327: LD_INT 2
44329: ARRAY
44330: PPUSH
44331: CALL_OW 546
44335: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44336: LD_VAR 0 8
44340: PUSH
44341: LD_INT 1
44343: ARRAY
44344: PUSH
44345: LD_VAR 0 8
44349: PUSH
44350: LD_INT 2
44352: ARRAY
44353: PUSH
44354: LD_VAR 0 13
44358: PUSH
44359: LD_INT 2
44361: PLUS
44362: GREATER
44363: OR
44364: PUSH
44365: LD_VAR 0 8
44369: PUSH
44370: LD_INT 2
44372: ARRAY
44373: PUSH
44374: LD_VAR 0 13
44378: PUSH
44379: LD_INT 2
44381: MINUS
44382: LESS
44383: OR
44384: PUSH
44385: LD_VAR 0 8
44389: PUSH
44390: LD_INT 3
44392: ARRAY
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 8
44399: PUSH
44400: LD_INT 9
44402: PUSH
44403: LD_INT 10
44405: PUSH
44406: LD_INT 11
44408: PUSH
44409: LD_INT 12
44411: PUSH
44412: LD_INT 13
44414: PUSH
44415: LD_INT 16
44417: PUSH
44418: LD_INT 17
44420: PUSH
44421: LD_INT 18
44423: PUSH
44424: LD_INT 19
44426: PUSH
44427: LD_INT 20
44429: PUSH
44430: LD_INT 21
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: IN
44448: NOT
44449: OR
44450: PUSH
44451: LD_VAR 0 8
44455: PUSH
44456: LD_INT 5
44458: ARRAY
44459: NOT
44460: OR
44461: PUSH
44462: LD_VAR 0 8
44466: PUSH
44467: LD_INT 6
44469: ARRAY
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: LD_INT 7
44479: PUSH
44480: LD_INT 9
44482: PUSH
44483: LD_INT 10
44485: PUSH
44486: LD_INT 11
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: IN
44497: NOT
44498: OR
44499: IFFALSE 44505
// exit ;
44501: POP
44502: POP
44503: GO 44588
// end ;
44505: GO 44176
44507: POP
44508: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44509: LD_VAR 0 9
44513: PPUSH
44514: LD_VAR 0 3
44518: PPUSH
44519: LD_VAR 0 4
44523: PPUSH
44524: LD_INT 20
44526: PPUSH
44527: CALL 36540 0 4
44531: PUSH
44532: LD_INT 4
44534: ARRAY
44535: IFFALSE 44539
// exit ;
44537: GO 44588
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44539: LD_VAR 0 2
44543: PUSH
44544: LD_INT 29
44546: PUSH
44547: LD_INT 30
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: IN
44554: PUSH
44555: LD_VAR 0 3
44559: PPUSH
44560: LD_VAR 0 4
44564: PPUSH
44565: LD_VAR 0 9
44569: PPUSH
44570: CALL_OW 440
44574: NOT
44575: AND
44576: IFFALSE 44580
// exit ;
44578: GO 44588
// result := true ;
44580: LD_ADDR_VAR 0 6
44584: PUSH
44585: LD_INT 1
44587: ST_TO_ADDR
// end ;
44588: LD_VAR 0 6
44592: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44593: LD_INT 0
44595: PPUSH
44596: PPUSH
44597: PPUSH
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
44604: PPUSH
44605: PPUSH
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
// result = [ ] ;
44653: LD_ADDR_VAR 0 7
44657: PUSH
44658: EMPTY
44659: ST_TO_ADDR
// temp_list = [ ] ;
44660: LD_ADDR_VAR 0 9
44664: PUSH
44665: EMPTY
44666: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44667: LD_VAR 0 4
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 3
44683: PUSH
44684: LD_INT 4
44686: PUSH
44687: LD_INT 5
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: IN
44698: NOT
44699: PUSH
44700: LD_VAR 0 1
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: IN
44715: PUSH
44716: LD_VAR 0 5
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: LIST
44734: IN
44735: NOT
44736: AND
44737: OR
44738: IFFALSE 44742
// exit ;
44740: GO 63133
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44742: LD_VAR 0 1
44746: PUSH
44747: LD_INT 6
44749: PUSH
44750: LD_INT 7
44752: PUSH
44753: LD_INT 8
44755: PUSH
44756: LD_INT 13
44758: PUSH
44759: LD_INT 12
44761: PUSH
44762: LD_INT 15
44764: PUSH
44765: LD_INT 11
44767: PUSH
44768: LD_INT 14
44770: PUSH
44771: LD_INT 10
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: IN
44785: IFFALSE 44795
// btype = b_lab ;
44787: LD_ADDR_VAR 0 1
44791: PUSH
44792: LD_INT 6
44794: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44795: LD_VAR 0 6
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: IN
44814: NOT
44815: PUSH
44816: LD_VAR 0 1
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 3
44832: PUSH
44833: LD_INT 6
44835: PUSH
44836: LD_INT 36
44838: PUSH
44839: LD_INT 4
44841: PUSH
44842: LD_INT 5
44844: PUSH
44845: LD_INT 31
44847: PUSH
44848: LD_INT 32
44850: PUSH
44851: LD_INT 33
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: IN
44867: NOT
44868: PUSH
44869: LD_VAR 0 6
44873: PUSH
44874: LD_INT 1
44876: EQUAL
44877: AND
44878: OR
44879: PUSH
44880: LD_VAR 0 1
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: IN
44895: NOT
44896: PUSH
44897: LD_VAR 0 6
44901: PUSH
44902: LD_INT 2
44904: EQUAL
44905: AND
44906: OR
44907: IFFALSE 44917
// mode = 0 ;
44909: LD_ADDR_VAR 0 6
44913: PUSH
44914: LD_INT 0
44916: ST_TO_ADDR
// case mode of 0 :
44917: LD_VAR 0 6
44921: PUSH
44922: LD_INT 0
44924: DOUBLE
44925: EQUAL
44926: IFTRUE 44930
44928: GO 56383
44930: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44931: LD_ADDR_VAR 0 11
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 3
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 3
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45124: LD_ADDR_VAR 0 12
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 3
45281: NEG
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 3
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45320: LD_ADDR_VAR 0 13
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 3
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 3
45491: NEG
45492: PUSH
45493: LD_INT 3
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45519: LD_ADDR_VAR 0 14
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 3
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45715: LD_ADDR_VAR 0 15
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 3
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45908: LD_ADDR_VAR 0 16
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 3
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46101: LD_ADDR_VAR 0 17
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46331: LD_ADDR_VAR 0 18
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46561: LD_ADDR_VAR 0 19
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46791: LD_ADDR_VAR 0 20
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47021: LD_ADDR_VAR 0 21
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47251: LD_ADDR_VAR 0 22
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47481: LD_ADDR_VAR 0 23
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 3
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47761: LD_ADDR_VAR 0 24
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48037: LD_ADDR_VAR 0 25
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 3
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 3
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 3
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48311: LD_ADDR_VAR 0 26
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48587: LD_ADDR_VAR 0 27
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48867: LD_ADDR_VAR 0 28
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 3
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: NEG
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49149: LD_ADDR_VAR 0 29
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: LD_INT 3
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 3
49393: NEG
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49428: LD_ADDR_VAR 0 30
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 3
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 3
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49706: LD_ADDR_VAR 0 31
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 3
49949: NEG
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49984: LD_ADDR_VAR 0 32
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 3
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50262: LD_ADDR_VAR 0 33
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 3
50506: NEG
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50541: LD_ADDR_VAR 0 34
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 3
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50821: LD_ADDR_VAR 0 35
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50933: LD_ADDR_VAR 0 36
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51045: LD_ADDR_VAR 0 37
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51157: LD_ADDR_VAR 0 38
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51269: LD_ADDR_VAR 0 39
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51381: LD_ADDR_VAR 0 40
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51493: LD_ADDR_VAR 0 41
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 2
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 3
51767: NEG
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 3
51778: NEG
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 3
51790: NEG
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51843: LD_ADDR_VAR 0 42
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 3
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 3
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 3
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 3
52140: NEG
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: LD_INT 3
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52193: LD_ADDR_VAR 0 43
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 3
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 3
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52541: LD_ADDR_VAR 0 44
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 3
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 3
52838: NEG
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 3
52850: NEG
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52891: LD_ADDR_VAR 0 45
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 3
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: NEG
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53241: LD_ADDR_VAR 0 46
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 3
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 3
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 3
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 3
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 3
53537: NEG
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53589: LD_ADDR_VAR 0 47
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53740: LD_ADDR_VAR 0 48
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53887: LD_ADDR_VAR 0 49
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54031: LD_ADDR_VAR 0 50
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54175: LD_ADDR_VAR 0 51
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54322: LD_ADDR_VAR 0 52
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54473: LD_ADDR_VAR 0 53
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54703: LD_ADDR_VAR 0 54
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54933: LD_ADDR_VAR 0 55
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55163: LD_ADDR_VAR 0 56
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55393: LD_ADDR_VAR 0 57
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55623: LD_ADDR_VAR 0 58
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55853: LD_ADDR_VAR 0 59
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55941: LD_ADDR_VAR 0 60
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56029: LD_ADDR_VAR 0 61
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56117: LD_ADDR_VAR 0 62
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56205: LD_ADDR_VAR 0 63
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56293: LD_ADDR_VAR 0 64
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// end ; 1 :
56381: GO 62278
56383: LD_INT 1
56385: DOUBLE
56386: EQUAL
56387: IFTRUE 56391
56389: GO 59014
56391: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56392: LD_ADDR_VAR 0 11
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56436: LD_ADDR_VAR 0 12
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: LIST
56476: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56477: LD_ADDR_VAR 0 13
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56517: LD_ADDR_VAR 0 14
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 3
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56558: LD_ADDR_VAR 0 15
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56602: LD_ADDR_VAR 0 16
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 3
56621: NEG
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: LIST
56647: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56648: LD_ADDR_VAR 0 17
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 3
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56692: LD_ADDR_VAR 0 18
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56733: LD_ADDR_VAR 0 19
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: LIST
56772: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56773: LD_ADDR_VAR 0 20
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 3
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56814: LD_ADDR_VAR 0 21
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 3
56832: NEG
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 3
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56858: LD_ADDR_VAR 0 22
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 3
56877: NEG
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: LD_INT 3
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56904: LD_ADDR_VAR 0 23
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 3
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 4
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: LIST
56947: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56948: LD_ADDR_VAR 0 24
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 4
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: LIST
56988: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56989: LD_ADDR_VAR 0 25
56993: PUSH
56994: LD_INT 3
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 4
57006: PUSH
57007: LD_INT 3
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: LD_INT 4
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: LIST
57028: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57029: LD_ADDR_VAR 0 26
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 4
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57070: LD_ADDR_VAR 0 27
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 4
57099: NEG
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57114: LD_ADDR_VAR 0 28
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: LD_INT 3
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 3
57133: NEG
57134: PUSH
57135: LD_INT 4
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 4
57145: NEG
57146: PUSH
57147: LD_INT 3
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: LIST
57159: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57160: LD_ADDR_VAR 0 29
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: LD_INT 4
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 4
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 5
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 5
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 4
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 6
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 6
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 5
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57315: LD_ADDR_VAR 0 30
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 3
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 4
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 5
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 5
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 5
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 6
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 6
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57458: LD_ADDR_VAR 0 31
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 4
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 4
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: LD_INT 4
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 5
57525: PUSH
57526: LD_INT 4
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 5
57535: PUSH
57536: LD_INT 5
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 4
57545: PUSH
57546: LD_INT 5
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 6
57555: PUSH
57556: LD_INT 5
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 6
57565: PUSH
57566: LD_INT 6
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 5
57575: PUSH
57576: LD_INT 6
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57597: LD_ADDR_VAR 0 32
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 3
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 4
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 4
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: LD_INT 5
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 5
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: LD_INT 4
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 6
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 6
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: LD_INT 5
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57740: LD_ADDR_VAR 0 33
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 4
57792: NEG
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 4
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 4
57815: NEG
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 5
57826: NEG
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 5
57837: NEG
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 5
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 6
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 6
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57895: LD_ADDR_VAR 0 34
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 3
57914: NEG
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: LD_INT 3
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: NEG
57939: PUSH
57940: LD_INT 4
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 4
57950: NEG
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 4
57962: NEG
57963: PUSH
57964: LD_INT 4
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 4
57974: NEG
57975: PUSH
57976: LD_INT 5
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 5
57986: NEG
57987: PUSH
57988: LD_INT 4
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 5
57998: NEG
57999: PUSH
58000: LD_INT 5
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 5
58010: NEG
58011: PUSH
58012: LD_INT 6
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 6
58022: NEG
58023: PUSH
58024: LD_INT 5
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 6
58034: NEG
58035: PUSH
58036: LD_INT 6
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58058: LD_ADDR_VAR 0 41
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 3
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: LIST
58101: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58102: LD_ADDR_VAR 0 42
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58143: LD_ADDR_VAR 0 43
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 3
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: LIST
58182: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58183: LD_ADDR_VAR 0 44
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: LD_INT 3
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58224: LD_ADDR_VAR 0 45
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: LIST
58267: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58268: LD_ADDR_VAR 0 46
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58314: LD_ADDR_VAR 0 47
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58347: LD_ADDR_VAR 0 48
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58378: LD_ADDR_VAR 0 49
58382: PUSH
58383: LD_INT 3
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58407: LD_ADDR_VAR 0 50
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58436: LD_ADDR_VAR 0 51
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58467: LD_ADDR_VAR 0 52
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: NEG
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58500: LD_ADDR_VAR 0 53
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58544: LD_ADDR_VAR 0 54
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58585: LD_ADDR_VAR 0 55
58589: PUSH
58590: LD_INT 3
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58625: LD_ADDR_VAR 0 56
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58666: LD_ADDR_VAR 0 57
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 3
58684: NEG
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: NEG
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: LIST
58709: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58710: LD_ADDR_VAR 0 58
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: NEG
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58756: LD_ADDR_VAR 0 59
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: LIST
58799: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58800: LD_ADDR_VAR 0 60
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: LIST
58840: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58841: LD_ADDR_VAR 0 61
58845: PUSH
58846: LD_INT 2
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: LIST
58880: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58881: LD_ADDR_VAR 0 62
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: LIST
58921: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58922: LD_ADDR_VAR 0 63
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58966: LD_ADDR_VAR 0 64
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// end ; 2 :
59012: GO 62278
59014: LD_INT 2
59016: DOUBLE
59017: EQUAL
59018: IFTRUE 59022
59020: GO 62277
59022: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59023: LD_ADDR_VAR 0 29
59027: PUSH
59028: LD_INT 4
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 4
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 5
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 5
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 4
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 5
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 4
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 4
59153: PUSH
59154: LD_INT 4
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 3
59163: PUSH
59164: LD_INT 4
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 4
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 3
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 4
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 5
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 5
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 4
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: LD_INT 5
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 2
59295: NEG
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 3
59317: NEG
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 4
59362: NEG
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 4
59373: NEG
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 4
59385: NEG
59386: PUSH
59387: LD_INT 2
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 4
59408: NEG
59409: PUSH
59410: LD_INT 4
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 4
59420: NEG
59421: PUSH
59422: LD_INT 5
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: NEG
59433: PUSH
59434: LD_INT 4
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: LD_INT 3
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 4
59456: NEG
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 5
59468: NEG
59469: PUSH
59470: LD_INT 4
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 5
59480: NEG
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: LD_INT 5
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 5
59504: NEG
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59561: LD_ADDR_VAR 0 30
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: LD_INT 4
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 4
59578: PUSH
59579: LD_INT 3
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 5
59588: PUSH
59589: LD_INT 4
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 5
59598: PUSH
59599: LD_INT 5
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: PUSH
59609: LD_INT 5
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: LD_INT 4
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 5
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 5
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 3
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 4
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 4
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: LD_INT 4
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 4
59751: NEG
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 4
59762: NEG
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 3
59774: NEG
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 3
59785: NEG
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 4
59796: NEG
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 5
59807: NEG
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 5
59818: NEG
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 5
59830: NEG
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: NEG
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 3
59853: NEG
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: LD_INT 4
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: NEG
59878: PUSH
59879: LD_INT 3
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: LD_INT 2
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 4
59913: NEG
59914: PUSH
59915: LD_INT 3
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 4
59925: NEG
59926: PUSH
59927: LD_INT 4
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 2
59937: NEG
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 4
59949: NEG
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 4
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: LD_INT 5
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: LD_INT 4
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 3
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: LD_INT 4
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 5
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: LD_INT 3
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 5
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60108: LD_ADDR_VAR 0 31
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 4
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 5
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 5
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 4
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: LD_INT 5
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 3
60208: NEG
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 3
60219: NEG
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 2
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 4
60264: NEG
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 4
60275: NEG
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 4
60287: NEG
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 4
60310: NEG
60311: PUSH
60312: LD_INT 4
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 4
60322: NEG
60323: PUSH
60324: LD_INT 5
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: LD_INT 4
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 4
60358: NEG
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 5
60370: NEG
60371: PUSH
60372: LD_INT 4
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 5
60382: NEG
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 5
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 5
60406: NEG
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 4
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 3
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: LD_INT 4
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 4
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 4
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 4
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 5
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 5
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 4
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 3
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 5
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60658: LD_ADDR_VAR 0 32
60662: PUSH
60663: LD_INT 4
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 4
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 3
60688: NEG
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 3
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 4
60710: NEG
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 5
60721: NEG
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 5
60732: NEG
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 5
60744: NEG
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 3
60756: NEG
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 3
60767: NEG
60768: PUSH
60769: LD_INT 3
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 3
60779: NEG
60780: PUSH
60781: LD_INT 4
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: LD_INT 3
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: NEG
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 4
60827: NEG
60828: PUSH
60829: LD_INT 3
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 4
60839: NEG
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: LD_INT 4
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 4
60863: NEG
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 5
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 4
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 3
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: LD_INT 4
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: LD_INT 5
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: LD_INT 3
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: LD_INT 5
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 3
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 3
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 4
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 4
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 3
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 4
61060: PUSH
61061: LD_INT 2
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 4
61070: PUSH
61071: LD_INT 4
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 4
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 5
61090: PUSH
61091: LD_INT 4
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 5
61100: PUSH
61101: LD_INT 5
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 4
61110: PUSH
61111: LD_INT 5
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: LD_INT 4
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: LD_INT 3
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 5
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: LD_INT 5
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61205: LD_ADDR_VAR 0 33
61209: PUSH
61210: LD_INT 4
61212: NEG
61213: PUSH
61214: LD_INT 4
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 4
61224: NEG
61225: PUSH
61226: LD_INT 5
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: LD_INT 4
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 3
61248: NEG
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 4
61260: NEG
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 5
61272: NEG
61273: PUSH
61274: LD_INT 4
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 5
61284: NEG
61285: PUSH
61286: LD_INT 5
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: NEG
61297: PUSH
61298: LD_INT 5
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 5
61308: NEG
61309: PUSH
61310: LD_INT 3
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: LD_INT 3
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 4
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: LD_INT 3
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 4
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: LD_INT 4
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 4
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 4
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 5
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 5
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 4
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 3
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 3
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 5
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 3
61515: PUSH
61516: LD_INT 3
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 3
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 4
61535: PUSH
61536: LD_INT 3
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 4
61545: PUSH
61546: LD_INT 4
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: LD_INT 4
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: LD_INT 3
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: LD_INT 4
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 4
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 4
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: LD_INT 5
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: LD_INT 5
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: LD_INT 4
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: LD_INT 3
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: LD_INT 5
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61743: LD_ADDR_VAR 0 34
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: LD_INT 4
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 5
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: LD_INT 4
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: LD_INT 3
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 3
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 4
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: LD_INT 5
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: LD_INT 5
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 3
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 3
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 4
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 4
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 2
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: LD_INT 2
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 4
61945: PUSH
61946: LD_INT 4
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 4
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 5
61965: PUSH
61966: LD_INT 4
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 5
61975: PUSH
61976: LD_INT 5
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 4
61985: PUSH
61986: LD_INT 5
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: LD_INT 4
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: LD_INT 3
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 5
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: PUSH
62026: LD_INT 5
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 3
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: LD_INT 4
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: LD_INT 4
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: LD_INT 4
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: NEG
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 4
62128: NEG
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 4
62139: NEG
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 3
62151: NEG
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 3
62162: NEG
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 4
62173: NEG
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 5
62184: NEG
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 5
62195: NEG
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 5
62207: NEG
62208: PUSH
62209: LD_INT 2
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 3
62219: NEG
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: ST_TO_ADDR
// end ; end ;
62275: GO 62278
62277: POP
// case btype of b_depot , b_warehouse :
62278: LD_VAR 0 1
62282: PUSH
62283: LD_INT 0
62285: DOUBLE
62286: EQUAL
62287: IFTRUE 62297
62289: LD_INT 1
62291: DOUBLE
62292: EQUAL
62293: IFTRUE 62297
62295: GO 62498
62297: POP
// case nation of nation_american :
62298: LD_VAR 0 5
62302: PUSH
62303: LD_INT 1
62305: DOUBLE
62306: EQUAL
62307: IFTRUE 62311
62309: GO 62367
62311: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62312: LD_ADDR_VAR 0 9
62316: PUSH
62317: LD_VAR 0 11
62321: PUSH
62322: LD_VAR 0 12
62326: PUSH
62327: LD_VAR 0 13
62331: PUSH
62332: LD_VAR 0 14
62336: PUSH
62337: LD_VAR 0 15
62341: PUSH
62342: LD_VAR 0 16
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: PUSH
62355: LD_VAR 0 4
62359: PUSH
62360: LD_INT 1
62362: PLUS
62363: ARRAY
62364: ST_TO_ADDR
62365: GO 62496
62367: LD_INT 2
62369: DOUBLE
62370: EQUAL
62371: IFTRUE 62375
62373: GO 62431
62375: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62376: LD_ADDR_VAR 0 9
62380: PUSH
62381: LD_VAR 0 17
62385: PUSH
62386: LD_VAR 0 18
62390: PUSH
62391: LD_VAR 0 19
62395: PUSH
62396: LD_VAR 0 20
62400: PUSH
62401: LD_VAR 0 21
62405: PUSH
62406: LD_VAR 0 22
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: PUSH
62419: LD_VAR 0 4
62423: PUSH
62424: LD_INT 1
62426: PLUS
62427: ARRAY
62428: ST_TO_ADDR
62429: GO 62496
62431: LD_INT 3
62433: DOUBLE
62434: EQUAL
62435: IFTRUE 62439
62437: GO 62495
62439: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62440: LD_ADDR_VAR 0 9
62444: PUSH
62445: LD_VAR 0 23
62449: PUSH
62450: LD_VAR 0 24
62454: PUSH
62455: LD_VAR 0 25
62459: PUSH
62460: LD_VAR 0 26
62464: PUSH
62465: LD_VAR 0 27
62469: PUSH
62470: LD_VAR 0 28
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: PUSH
62483: LD_VAR 0 4
62487: PUSH
62488: LD_INT 1
62490: PLUS
62491: ARRAY
62492: ST_TO_ADDR
62493: GO 62496
62495: POP
62496: GO 63051
62498: LD_INT 2
62500: DOUBLE
62501: EQUAL
62502: IFTRUE 62512
62504: LD_INT 3
62506: DOUBLE
62507: EQUAL
62508: IFTRUE 62512
62510: GO 62568
62512: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62513: LD_ADDR_VAR 0 9
62517: PUSH
62518: LD_VAR 0 29
62522: PUSH
62523: LD_VAR 0 30
62527: PUSH
62528: LD_VAR 0 31
62532: PUSH
62533: LD_VAR 0 32
62537: PUSH
62538: LD_VAR 0 33
62542: PUSH
62543: LD_VAR 0 34
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: PUSH
62556: LD_VAR 0 4
62560: PUSH
62561: LD_INT 1
62563: PLUS
62564: ARRAY
62565: ST_TO_ADDR
62566: GO 63051
62568: LD_INT 16
62570: DOUBLE
62571: EQUAL
62572: IFTRUE 62630
62574: LD_INT 17
62576: DOUBLE
62577: EQUAL
62578: IFTRUE 62630
62580: LD_INT 18
62582: DOUBLE
62583: EQUAL
62584: IFTRUE 62630
62586: LD_INT 19
62588: DOUBLE
62589: EQUAL
62590: IFTRUE 62630
62592: LD_INT 22
62594: DOUBLE
62595: EQUAL
62596: IFTRUE 62630
62598: LD_INT 20
62600: DOUBLE
62601: EQUAL
62602: IFTRUE 62630
62604: LD_INT 21
62606: DOUBLE
62607: EQUAL
62608: IFTRUE 62630
62610: LD_INT 23
62612: DOUBLE
62613: EQUAL
62614: IFTRUE 62630
62616: LD_INT 24
62618: DOUBLE
62619: EQUAL
62620: IFTRUE 62630
62622: LD_INT 25
62624: DOUBLE
62625: EQUAL
62626: IFTRUE 62630
62628: GO 62686
62630: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62631: LD_ADDR_VAR 0 9
62635: PUSH
62636: LD_VAR 0 35
62640: PUSH
62641: LD_VAR 0 36
62645: PUSH
62646: LD_VAR 0 37
62650: PUSH
62651: LD_VAR 0 38
62655: PUSH
62656: LD_VAR 0 39
62660: PUSH
62661: LD_VAR 0 40
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: PUSH
62674: LD_VAR 0 4
62678: PUSH
62679: LD_INT 1
62681: PLUS
62682: ARRAY
62683: ST_TO_ADDR
62684: GO 63051
62686: LD_INT 6
62688: DOUBLE
62689: EQUAL
62690: IFTRUE 62742
62692: LD_INT 7
62694: DOUBLE
62695: EQUAL
62696: IFTRUE 62742
62698: LD_INT 8
62700: DOUBLE
62701: EQUAL
62702: IFTRUE 62742
62704: LD_INT 13
62706: DOUBLE
62707: EQUAL
62708: IFTRUE 62742
62710: LD_INT 12
62712: DOUBLE
62713: EQUAL
62714: IFTRUE 62742
62716: LD_INT 15
62718: DOUBLE
62719: EQUAL
62720: IFTRUE 62742
62722: LD_INT 11
62724: DOUBLE
62725: EQUAL
62726: IFTRUE 62742
62728: LD_INT 14
62730: DOUBLE
62731: EQUAL
62732: IFTRUE 62742
62734: LD_INT 10
62736: DOUBLE
62737: EQUAL
62738: IFTRUE 62742
62740: GO 62798
62742: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62743: LD_ADDR_VAR 0 9
62747: PUSH
62748: LD_VAR 0 41
62752: PUSH
62753: LD_VAR 0 42
62757: PUSH
62758: LD_VAR 0 43
62762: PUSH
62763: LD_VAR 0 44
62767: PUSH
62768: LD_VAR 0 45
62772: PUSH
62773: LD_VAR 0 46
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: PUSH
62786: LD_VAR 0 4
62790: PUSH
62791: LD_INT 1
62793: PLUS
62794: ARRAY
62795: ST_TO_ADDR
62796: GO 63051
62798: LD_INT 36
62800: DOUBLE
62801: EQUAL
62802: IFTRUE 62806
62804: GO 62862
62806: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62807: LD_ADDR_VAR 0 9
62811: PUSH
62812: LD_VAR 0 47
62816: PUSH
62817: LD_VAR 0 48
62821: PUSH
62822: LD_VAR 0 49
62826: PUSH
62827: LD_VAR 0 50
62831: PUSH
62832: LD_VAR 0 51
62836: PUSH
62837: LD_VAR 0 52
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: PUSH
62850: LD_VAR 0 4
62854: PUSH
62855: LD_INT 1
62857: PLUS
62858: ARRAY
62859: ST_TO_ADDR
62860: GO 63051
62862: LD_INT 4
62864: DOUBLE
62865: EQUAL
62866: IFTRUE 62888
62868: LD_INT 5
62870: DOUBLE
62871: EQUAL
62872: IFTRUE 62888
62874: LD_INT 34
62876: DOUBLE
62877: EQUAL
62878: IFTRUE 62888
62880: LD_INT 37
62882: DOUBLE
62883: EQUAL
62884: IFTRUE 62888
62886: GO 62944
62888: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62889: LD_ADDR_VAR 0 9
62893: PUSH
62894: LD_VAR 0 53
62898: PUSH
62899: LD_VAR 0 54
62903: PUSH
62904: LD_VAR 0 55
62908: PUSH
62909: LD_VAR 0 56
62913: PUSH
62914: LD_VAR 0 57
62918: PUSH
62919: LD_VAR 0 58
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: PUSH
62932: LD_VAR 0 4
62936: PUSH
62937: LD_INT 1
62939: PLUS
62940: ARRAY
62941: ST_TO_ADDR
62942: GO 63051
62944: LD_INT 31
62946: DOUBLE
62947: EQUAL
62948: IFTRUE 62994
62950: LD_INT 32
62952: DOUBLE
62953: EQUAL
62954: IFTRUE 62994
62956: LD_INT 33
62958: DOUBLE
62959: EQUAL
62960: IFTRUE 62994
62962: LD_INT 27
62964: DOUBLE
62965: EQUAL
62966: IFTRUE 62994
62968: LD_INT 26
62970: DOUBLE
62971: EQUAL
62972: IFTRUE 62994
62974: LD_INT 28
62976: DOUBLE
62977: EQUAL
62978: IFTRUE 62994
62980: LD_INT 29
62982: DOUBLE
62983: EQUAL
62984: IFTRUE 62994
62986: LD_INT 30
62988: DOUBLE
62989: EQUAL
62990: IFTRUE 62994
62992: GO 63050
62994: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62995: LD_ADDR_VAR 0 9
62999: PUSH
63000: LD_VAR 0 59
63004: PUSH
63005: LD_VAR 0 60
63009: PUSH
63010: LD_VAR 0 61
63014: PUSH
63015: LD_VAR 0 62
63019: PUSH
63020: LD_VAR 0 63
63024: PUSH
63025: LD_VAR 0 64
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: PUSH
63038: LD_VAR 0 4
63042: PUSH
63043: LD_INT 1
63045: PLUS
63046: ARRAY
63047: ST_TO_ADDR
63048: GO 63051
63050: POP
// temp_list2 = [ ] ;
63051: LD_ADDR_VAR 0 10
63055: PUSH
63056: EMPTY
63057: ST_TO_ADDR
// for i in temp_list do
63058: LD_ADDR_VAR 0 8
63062: PUSH
63063: LD_VAR 0 9
63067: PUSH
63068: FOR_IN
63069: IFFALSE 63121
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63071: LD_ADDR_VAR 0 10
63075: PUSH
63076: LD_VAR 0 10
63080: PUSH
63081: LD_VAR 0 8
63085: PUSH
63086: LD_INT 1
63088: ARRAY
63089: PUSH
63090: LD_VAR 0 2
63094: PLUS
63095: PUSH
63096: LD_VAR 0 8
63100: PUSH
63101: LD_INT 2
63103: ARRAY
63104: PUSH
63105: LD_VAR 0 3
63109: PLUS
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: EMPTY
63116: LIST
63117: ADD
63118: ST_TO_ADDR
63119: GO 63068
63121: POP
63122: POP
// result = temp_list2 ;
63123: LD_ADDR_VAR 0 7
63127: PUSH
63128: LD_VAR 0 10
63132: ST_TO_ADDR
// end ;
63133: LD_VAR 0 7
63137: RET
// export function EnemyInRange ( unit , dist ) ; begin
63138: LD_INT 0
63140: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63141: LD_ADDR_VAR 0 3
63145: PUSH
63146: LD_VAR 0 1
63150: PPUSH
63151: CALL_OW 255
63155: PPUSH
63156: LD_VAR 0 1
63160: PPUSH
63161: CALL_OW 250
63165: PPUSH
63166: LD_VAR 0 1
63170: PPUSH
63171: CALL_OW 251
63175: PPUSH
63176: LD_VAR 0 2
63180: PPUSH
63181: CALL 36540 0 4
63185: PUSH
63186: LD_INT 4
63188: ARRAY
63189: ST_TO_ADDR
// end ;
63190: LD_VAR 0 3
63194: RET
// export function PlayerSeeMe ( unit ) ; begin
63195: LD_INT 0
63197: PPUSH
// result := See ( your_side , unit ) ;
63198: LD_ADDR_VAR 0 2
63202: PUSH
63203: LD_OWVAR 2
63207: PPUSH
63208: LD_VAR 0 1
63212: PPUSH
63213: CALL_OW 292
63217: ST_TO_ADDR
// end ;
63218: LD_VAR 0 2
63222: RET
// export function ReverseDir ( unit ) ; begin
63223: LD_INT 0
63225: PPUSH
// if not unit then
63226: LD_VAR 0 1
63230: NOT
63231: IFFALSE 63235
// exit ;
63233: GO 63258
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63235: LD_ADDR_VAR 0 2
63239: PUSH
63240: LD_VAR 0 1
63244: PPUSH
63245: CALL_OW 254
63249: PUSH
63250: LD_INT 3
63252: PLUS
63253: PUSH
63254: LD_INT 6
63256: MOD
63257: ST_TO_ADDR
// end ;
63258: LD_VAR 0 2
63262: RET
// export function ReverseArray ( array ) ; var i ; begin
63263: LD_INT 0
63265: PPUSH
63266: PPUSH
// if not array then
63267: LD_VAR 0 1
63271: NOT
63272: IFFALSE 63276
// exit ;
63274: GO 63331
// result := [ ] ;
63276: LD_ADDR_VAR 0 2
63280: PUSH
63281: EMPTY
63282: ST_TO_ADDR
// for i := array downto 1 do
63283: LD_ADDR_VAR 0 3
63287: PUSH
63288: DOUBLE
63289: LD_VAR 0 1
63293: INC
63294: ST_TO_ADDR
63295: LD_INT 1
63297: PUSH
63298: FOR_DOWNTO
63299: IFFALSE 63329
// result := Join ( result , array [ i ] ) ;
63301: LD_ADDR_VAR 0 2
63305: PUSH
63306: LD_VAR 0 2
63310: PPUSH
63311: LD_VAR 0 1
63315: PUSH
63316: LD_VAR 0 3
63320: ARRAY
63321: PPUSH
63322: CALL 67975 0 2
63326: ST_TO_ADDR
63327: GO 63298
63329: POP
63330: POP
// end ;
63331: LD_VAR 0 2
63335: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63336: LD_INT 0
63338: PPUSH
63339: PPUSH
63340: PPUSH
63341: PPUSH
63342: PPUSH
63343: PPUSH
// if not unit or not hexes then
63344: LD_VAR 0 1
63348: NOT
63349: PUSH
63350: LD_VAR 0 2
63354: NOT
63355: OR
63356: IFFALSE 63360
// exit ;
63358: GO 63483
// dist := 9999 ;
63360: LD_ADDR_VAR 0 5
63364: PUSH
63365: LD_INT 9999
63367: ST_TO_ADDR
// for i = 1 to hexes do
63368: LD_ADDR_VAR 0 4
63372: PUSH
63373: DOUBLE
63374: LD_INT 1
63376: DEC
63377: ST_TO_ADDR
63378: LD_VAR 0 2
63382: PUSH
63383: FOR_TO
63384: IFFALSE 63471
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63386: LD_ADDR_VAR 0 6
63390: PUSH
63391: LD_VAR 0 1
63395: PPUSH
63396: LD_VAR 0 2
63400: PUSH
63401: LD_VAR 0 4
63405: ARRAY
63406: PUSH
63407: LD_INT 1
63409: ARRAY
63410: PPUSH
63411: LD_VAR 0 2
63415: PUSH
63416: LD_VAR 0 4
63420: ARRAY
63421: PUSH
63422: LD_INT 2
63424: ARRAY
63425: PPUSH
63426: CALL_OW 297
63430: ST_TO_ADDR
// if tdist < dist then
63431: LD_VAR 0 6
63435: PUSH
63436: LD_VAR 0 5
63440: LESS
63441: IFFALSE 63469
// begin hex := hexes [ i ] ;
63443: LD_ADDR_VAR 0 8
63447: PUSH
63448: LD_VAR 0 2
63452: PUSH
63453: LD_VAR 0 4
63457: ARRAY
63458: ST_TO_ADDR
// dist := tdist ;
63459: LD_ADDR_VAR 0 5
63463: PUSH
63464: LD_VAR 0 6
63468: ST_TO_ADDR
// end ; end ;
63469: GO 63383
63471: POP
63472: POP
// result := hex ;
63473: LD_ADDR_VAR 0 3
63477: PUSH
63478: LD_VAR 0 8
63482: ST_TO_ADDR
// end ;
63483: LD_VAR 0 3
63487: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63488: LD_INT 0
63490: PPUSH
63491: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63492: LD_VAR 0 1
63496: NOT
63497: PUSH
63498: LD_VAR 0 1
63502: PUSH
63503: LD_INT 21
63505: PUSH
63506: LD_INT 2
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 23
63515: PUSH
63516: LD_INT 2
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PPUSH
63527: CALL_OW 69
63531: IN
63532: NOT
63533: OR
63534: IFFALSE 63538
// exit ;
63536: GO 63585
// for i = 1 to 3 do
63538: LD_ADDR_VAR 0 3
63542: PUSH
63543: DOUBLE
63544: LD_INT 1
63546: DEC
63547: ST_TO_ADDR
63548: LD_INT 3
63550: PUSH
63551: FOR_TO
63552: IFFALSE 63583
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63554: LD_VAR 0 1
63558: PPUSH
63559: CALL_OW 250
63563: PPUSH
63564: LD_VAR 0 1
63568: PPUSH
63569: CALL_OW 251
63573: PPUSH
63574: LD_INT 1
63576: PPUSH
63577: CALL_OW 453
63581: GO 63551
63583: POP
63584: POP
// end ;
63585: LD_VAR 0 2
63589: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63590: LD_INT 0
63592: PPUSH
63593: PPUSH
63594: PPUSH
63595: PPUSH
63596: PPUSH
63597: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63598: LD_VAR 0 1
63602: NOT
63603: PUSH
63604: LD_VAR 0 2
63608: NOT
63609: OR
63610: PUSH
63611: LD_VAR 0 1
63615: PPUSH
63616: CALL_OW 314
63620: OR
63621: IFFALSE 63625
// exit ;
63623: GO 64092
// if GetLives ( i ) < 250 then
63625: LD_VAR 0 4
63629: PPUSH
63630: CALL_OW 256
63634: PUSH
63635: LD_INT 250
63637: LESS
63638: IFFALSE 63651
// begin ComAutodestruct ( i ) ;
63640: LD_VAR 0 4
63644: PPUSH
63645: CALL 63488 0 1
// exit ;
63649: GO 64092
// end ; x := GetX ( enemy_unit ) ;
63651: LD_ADDR_VAR 0 7
63655: PUSH
63656: LD_VAR 0 2
63660: PPUSH
63661: CALL_OW 250
63665: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63666: LD_ADDR_VAR 0 8
63670: PUSH
63671: LD_VAR 0 2
63675: PPUSH
63676: CALL_OW 251
63680: ST_TO_ADDR
// if not x or not y then
63681: LD_VAR 0 7
63685: NOT
63686: PUSH
63687: LD_VAR 0 8
63691: NOT
63692: OR
63693: IFFALSE 63697
// exit ;
63695: GO 64092
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63697: LD_ADDR_VAR 0 6
63701: PUSH
63702: LD_VAR 0 7
63706: PPUSH
63707: LD_INT 0
63709: PPUSH
63710: LD_INT 4
63712: PPUSH
63713: CALL_OW 272
63717: PUSH
63718: LD_VAR 0 8
63722: PPUSH
63723: LD_INT 0
63725: PPUSH
63726: LD_INT 4
63728: PPUSH
63729: CALL_OW 273
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_VAR 0 7
63742: PPUSH
63743: LD_INT 1
63745: PPUSH
63746: LD_INT 4
63748: PPUSH
63749: CALL_OW 272
63753: PUSH
63754: LD_VAR 0 8
63758: PPUSH
63759: LD_INT 1
63761: PPUSH
63762: LD_INT 4
63764: PPUSH
63765: CALL_OW 273
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_VAR 0 7
63778: PPUSH
63779: LD_INT 2
63781: PPUSH
63782: LD_INT 4
63784: PPUSH
63785: CALL_OW 272
63789: PUSH
63790: LD_VAR 0 8
63794: PPUSH
63795: LD_INT 2
63797: PPUSH
63798: LD_INT 4
63800: PPUSH
63801: CALL_OW 273
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_VAR 0 7
63814: PPUSH
63815: LD_INT 3
63817: PPUSH
63818: LD_INT 4
63820: PPUSH
63821: CALL_OW 272
63825: PUSH
63826: LD_VAR 0 8
63830: PPUSH
63831: LD_INT 3
63833: PPUSH
63834: LD_INT 4
63836: PPUSH
63837: CALL_OW 273
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_VAR 0 7
63850: PPUSH
63851: LD_INT 4
63853: PPUSH
63854: LD_INT 4
63856: PPUSH
63857: CALL_OW 272
63861: PUSH
63862: LD_VAR 0 8
63866: PPUSH
63867: LD_INT 4
63869: PPUSH
63870: LD_INT 4
63872: PPUSH
63873: CALL_OW 273
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_VAR 0 7
63886: PPUSH
63887: LD_INT 5
63889: PPUSH
63890: LD_INT 4
63892: PPUSH
63893: CALL_OW 272
63897: PUSH
63898: LD_VAR 0 8
63902: PPUSH
63903: LD_INT 5
63905: PPUSH
63906: LD_INT 4
63908: PPUSH
63909: CALL_OW 273
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: ST_TO_ADDR
// for i = tmp downto 1 do
63926: LD_ADDR_VAR 0 4
63930: PUSH
63931: DOUBLE
63932: LD_VAR 0 6
63936: INC
63937: ST_TO_ADDR
63938: LD_INT 1
63940: PUSH
63941: FOR_DOWNTO
63942: IFFALSE 64043
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63944: LD_VAR 0 6
63948: PUSH
63949: LD_VAR 0 4
63953: ARRAY
63954: PUSH
63955: LD_INT 1
63957: ARRAY
63958: PPUSH
63959: LD_VAR 0 6
63963: PUSH
63964: LD_VAR 0 4
63968: ARRAY
63969: PUSH
63970: LD_INT 2
63972: ARRAY
63973: PPUSH
63974: CALL_OW 488
63978: NOT
63979: PUSH
63980: LD_VAR 0 6
63984: PUSH
63985: LD_VAR 0 4
63989: ARRAY
63990: PUSH
63991: LD_INT 1
63993: ARRAY
63994: PPUSH
63995: LD_VAR 0 6
63999: PUSH
64000: LD_VAR 0 4
64004: ARRAY
64005: PUSH
64006: LD_INT 2
64008: ARRAY
64009: PPUSH
64010: CALL_OW 428
64014: PUSH
64015: LD_INT 0
64017: NONEQUAL
64018: OR
64019: IFFALSE 64041
// tmp := Delete ( tmp , i ) ;
64021: LD_ADDR_VAR 0 6
64025: PUSH
64026: LD_VAR 0 6
64030: PPUSH
64031: LD_VAR 0 4
64035: PPUSH
64036: CALL_OW 3
64040: ST_TO_ADDR
64041: GO 63941
64043: POP
64044: POP
// j := GetClosestHex ( unit , tmp ) ;
64045: LD_ADDR_VAR 0 5
64049: PUSH
64050: LD_VAR 0 1
64054: PPUSH
64055: LD_VAR 0 6
64059: PPUSH
64060: CALL 63336 0 2
64064: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64065: LD_VAR 0 1
64069: PPUSH
64070: LD_VAR 0 5
64074: PUSH
64075: LD_INT 1
64077: ARRAY
64078: PPUSH
64079: LD_VAR 0 5
64083: PUSH
64084: LD_INT 2
64086: ARRAY
64087: PPUSH
64088: CALL_OW 111
// end ;
64092: LD_VAR 0 3
64096: RET
// export function PrepareApemanSoldier ( ) ; begin
64097: LD_INT 0
64099: PPUSH
// uc_nation := 0 ;
64100: LD_ADDR_OWVAR 21
64104: PUSH
64105: LD_INT 0
64107: ST_TO_ADDR
// hc_sex := sex_male ;
64108: LD_ADDR_OWVAR 27
64112: PUSH
64113: LD_INT 1
64115: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64116: LD_ADDR_OWVAR 28
64120: PUSH
64121: LD_INT 15
64123: ST_TO_ADDR
// hc_gallery :=  ;
64124: LD_ADDR_OWVAR 33
64128: PUSH
64129: LD_STRING 
64131: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64132: LD_ADDR_OWVAR 31
64136: PUSH
64137: LD_INT 0
64139: PPUSH
64140: LD_INT 3
64142: PPUSH
64143: CALL_OW 12
64147: PUSH
64148: LD_INT 0
64150: PPUSH
64151: LD_INT 3
64153: PPUSH
64154: CALL_OW 12
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: ST_TO_ADDR
// end ;
64171: LD_VAR 0 1
64175: RET
// export function PrepareApemanEngineer ( ) ; begin
64176: LD_INT 0
64178: PPUSH
// uc_nation := 0 ;
64179: LD_ADDR_OWVAR 21
64183: PUSH
64184: LD_INT 0
64186: ST_TO_ADDR
// hc_sex := sex_male ;
64187: LD_ADDR_OWVAR 27
64191: PUSH
64192: LD_INT 1
64194: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64195: LD_ADDR_OWVAR 28
64199: PUSH
64200: LD_INT 16
64202: ST_TO_ADDR
// hc_gallery :=  ;
64203: LD_ADDR_OWVAR 33
64207: PUSH
64208: LD_STRING 
64210: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64211: LD_ADDR_OWVAR 31
64215: PUSH
64216: LD_INT 0
64218: PPUSH
64219: LD_INT 3
64221: PPUSH
64222: CALL_OW 12
64226: PUSH
64227: LD_INT 0
64229: PPUSH
64230: LD_INT 3
64232: PPUSH
64233: CALL_OW 12
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: ST_TO_ADDR
// end ;
64250: LD_VAR 0 1
64254: RET
// export function PrepareApeman ( agressivity ) ; begin
64255: LD_INT 0
64257: PPUSH
// uc_side := 0 ;
64258: LD_ADDR_OWVAR 20
64262: PUSH
64263: LD_INT 0
64265: ST_TO_ADDR
// uc_nation := 0 ;
64266: LD_ADDR_OWVAR 21
64270: PUSH
64271: LD_INT 0
64273: ST_TO_ADDR
// hc_sex := sex_male ;
64274: LD_ADDR_OWVAR 27
64278: PUSH
64279: LD_INT 1
64281: ST_TO_ADDR
// hc_class := class_apeman ;
64282: LD_ADDR_OWVAR 28
64286: PUSH
64287: LD_INT 12
64289: ST_TO_ADDR
// hc_gallery :=  ;
64290: LD_ADDR_OWVAR 33
64294: PUSH
64295: LD_STRING 
64297: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64298: LD_ADDR_OWVAR 35
64302: PUSH
64303: LD_VAR 0 1
64307: NEG
64308: PPUSH
64309: LD_VAR 0 1
64313: PPUSH
64314: CALL_OW 12
64318: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64319: LD_ADDR_OWVAR 31
64323: PUSH
64324: LD_INT 0
64326: PPUSH
64327: LD_INT 3
64329: PPUSH
64330: CALL_OW 12
64334: PUSH
64335: LD_INT 0
64337: PPUSH
64338: LD_INT 3
64340: PPUSH
64341: CALL_OW 12
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: ST_TO_ADDR
// end ;
64358: LD_VAR 0 2
64362: RET
// export function PrepareTiger ( agressivity ) ; begin
64363: LD_INT 0
64365: PPUSH
// uc_side := 0 ;
64366: LD_ADDR_OWVAR 20
64370: PUSH
64371: LD_INT 0
64373: ST_TO_ADDR
// uc_nation := 0 ;
64374: LD_ADDR_OWVAR 21
64378: PUSH
64379: LD_INT 0
64381: ST_TO_ADDR
// hc_class := class_tiger ;
64382: LD_ADDR_OWVAR 28
64386: PUSH
64387: LD_INT 14
64389: ST_TO_ADDR
// hc_gallery :=  ;
64390: LD_ADDR_OWVAR 33
64394: PUSH
64395: LD_STRING 
64397: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64398: LD_ADDR_OWVAR 35
64402: PUSH
64403: LD_VAR 0 1
64407: NEG
64408: PPUSH
64409: LD_VAR 0 1
64413: PPUSH
64414: CALL_OW 12
64418: ST_TO_ADDR
// end ;
64419: LD_VAR 0 2
64423: RET
// export function PrepareEnchidna ( ) ; begin
64424: LD_INT 0
64426: PPUSH
// uc_side := 0 ;
64427: LD_ADDR_OWVAR 20
64431: PUSH
64432: LD_INT 0
64434: ST_TO_ADDR
// uc_nation := 0 ;
64435: LD_ADDR_OWVAR 21
64439: PUSH
64440: LD_INT 0
64442: ST_TO_ADDR
// hc_class := class_baggie ;
64443: LD_ADDR_OWVAR 28
64447: PUSH
64448: LD_INT 13
64450: ST_TO_ADDR
// hc_gallery :=  ;
64451: LD_ADDR_OWVAR 33
64455: PUSH
64456: LD_STRING 
64458: ST_TO_ADDR
// end ;
64459: LD_VAR 0 1
64463: RET
// export function PrepareFrog ( ) ; begin
64464: LD_INT 0
64466: PPUSH
// uc_side := 0 ;
64467: LD_ADDR_OWVAR 20
64471: PUSH
64472: LD_INT 0
64474: ST_TO_ADDR
// uc_nation := 0 ;
64475: LD_ADDR_OWVAR 21
64479: PUSH
64480: LD_INT 0
64482: ST_TO_ADDR
// hc_class := class_frog ;
64483: LD_ADDR_OWVAR 28
64487: PUSH
64488: LD_INT 19
64490: ST_TO_ADDR
// hc_gallery :=  ;
64491: LD_ADDR_OWVAR 33
64495: PUSH
64496: LD_STRING 
64498: ST_TO_ADDR
// end ;
64499: LD_VAR 0 1
64503: RET
// export function PrepareFish ( ) ; begin
64504: LD_INT 0
64506: PPUSH
// uc_side := 0 ;
64507: LD_ADDR_OWVAR 20
64511: PUSH
64512: LD_INT 0
64514: ST_TO_ADDR
// uc_nation := 0 ;
64515: LD_ADDR_OWVAR 21
64519: PUSH
64520: LD_INT 0
64522: ST_TO_ADDR
// hc_class := class_fish ;
64523: LD_ADDR_OWVAR 28
64527: PUSH
64528: LD_INT 20
64530: ST_TO_ADDR
// hc_gallery :=  ;
64531: LD_ADDR_OWVAR 33
64535: PUSH
64536: LD_STRING 
64538: ST_TO_ADDR
// end ;
64539: LD_VAR 0 1
64543: RET
// export function PrepareBird ( ) ; begin
64544: LD_INT 0
64546: PPUSH
// uc_side := 0 ;
64547: LD_ADDR_OWVAR 20
64551: PUSH
64552: LD_INT 0
64554: ST_TO_ADDR
// uc_nation := 0 ;
64555: LD_ADDR_OWVAR 21
64559: PUSH
64560: LD_INT 0
64562: ST_TO_ADDR
// hc_class := class_phororhacos ;
64563: LD_ADDR_OWVAR 28
64567: PUSH
64568: LD_INT 18
64570: ST_TO_ADDR
// hc_gallery :=  ;
64571: LD_ADDR_OWVAR 33
64575: PUSH
64576: LD_STRING 
64578: ST_TO_ADDR
// end ;
64579: LD_VAR 0 1
64583: RET
// export function PrepareHorse ( ) ; begin
64584: LD_INT 0
64586: PPUSH
// uc_side := 0 ;
64587: LD_ADDR_OWVAR 20
64591: PUSH
64592: LD_INT 0
64594: ST_TO_ADDR
// uc_nation := 0 ;
64595: LD_ADDR_OWVAR 21
64599: PUSH
64600: LD_INT 0
64602: ST_TO_ADDR
// hc_class := class_horse ;
64603: LD_ADDR_OWVAR 28
64607: PUSH
64608: LD_INT 21
64610: ST_TO_ADDR
// hc_gallery :=  ;
64611: LD_ADDR_OWVAR 33
64615: PUSH
64616: LD_STRING 
64618: ST_TO_ADDR
// end ;
64619: LD_VAR 0 1
64623: RET
// export function PrepareMastodont ( ) ; begin
64624: LD_INT 0
64626: PPUSH
// uc_side := 0 ;
64627: LD_ADDR_OWVAR 20
64631: PUSH
64632: LD_INT 0
64634: ST_TO_ADDR
// uc_nation := 0 ;
64635: LD_ADDR_OWVAR 21
64639: PUSH
64640: LD_INT 0
64642: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64643: LD_ADDR_OWVAR 37
64647: PUSH
64648: LD_INT 31
64650: ST_TO_ADDR
// vc_control := control_rider ;
64651: LD_ADDR_OWVAR 38
64655: PUSH
64656: LD_INT 4
64658: ST_TO_ADDR
// end ;
64659: LD_VAR 0 1
64663: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64664: LD_INT 0
64666: PPUSH
64667: PPUSH
64668: PPUSH
// uc_side = 0 ;
64669: LD_ADDR_OWVAR 20
64673: PUSH
64674: LD_INT 0
64676: ST_TO_ADDR
// uc_nation = 0 ;
64677: LD_ADDR_OWVAR 21
64681: PUSH
64682: LD_INT 0
64684: ST_TO_ADDR
// InitHc_All ( ) ;
64685: CALL_OW 584
// InitVc ;
64689: CALL_OW 20
// if mastodonts then
64693: LD_VAR 0 6
64697: IFFALSE 64764
// for i = 1 to mastodonts do
64699: LD_ADDR_VAR 0 11
64703: PUSH
64704: DOUBLE
64705: LD_INT 1
64707: DEC
64708: ST_TO_ADDR
64709: LD_VAR 0 6
64713: PUSH
64714: FOR_TO
64715: IFFALSE 64762
// begin vc_chassis := 31 ;
64717: LD_ADDR_OWVAR 37
64721: PUSH
64722: LD_INT 31
64724: ST_TO_ADDR
// vc_control := control_rider ;
64725: LD_ADDR_OWVAR 38
64729: PUSH
64730: LD_INT 4
64732: ST_TO_ADDR
// animal := CreateVehicle ;
64733: LD_ADDR_VAR 0 12
64737: PUSH
64738: CALL_OW 45
64742: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64743: LD_VAR 0 12
64747: PPUSH
64748: LD_VAR 0 8
64752: PPUSH
64753: LD_INT 0
64755: PPUSH
64756: CALL 66892 0 3
// end ;
64760: GO 64714
64762: POP
64763: POP
// if horses then
64764: LD_VAR 0 5
64768: IFFALSE 64835
// for i = 1 to horses do
64770: LD_ADDR_VAR 0 11
64774: PUSH
64775: DOUBLE
64776: LD_INT 1
64778: DEC
64779: ST_TO_ADDR
64780: LD_VAR 0 5
64784: PUSH
64785: FOR_TO
64786: IFFALSE 64833
// begin hc_class := 21 ;
64788: LD_ADDR_OWVAR 28
64792: PUSH
64793: LD_INT 21
64795: ST_TO_ADDR
// hc_gallery :=  ;
64796: LD_ADDR_OWVAR 33
64800: PUSH
64801: LD_STRING 
64803: ST_TO_ADDR
// animal := CreateHuman ;
64804: LD_ADDR_VAR 0 12
64808: PUSH
64809: CALL_OW 44
64813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64814: LD_VAR 0 12
64818: PPUSH
64819: LD_VAR 0 8
64823: PPUSH
64824: LD_INT 0
64826: PPUSH
64827: CALL 66892 0 3
// end ;
64831: GO 64785
64833: POP
64834: POP
// if birds then
64835: LD_VAR 0 1
64839: IFFALSE 64906
// for i = 1 to birds do
64841: LD_ADDR_VAR 0 11
64845: PUSH
64846: DOUBLE
64847: LD_INT 1
64849: DEC
64850: ST_TO_ADDR
64851: LD_VAR 0 1
64855: PUSH
64856: FOR_TO
64857: IFFALSE 64904
// begin hc_class = 18 ;
64859: LD_ADDR_OWVAR 28
64863: PUSH
64864: LD_INT 18
64866: ST_TO_ADDR
// hc_gallery =  ;
64867: LD_ADDR_OWVAR 33
64871: PUSH
64872: LD_STRING 
64874: ST_TO_ADDR
// animal := CreateHuman ;
64875: LD_ADDR_VAR 0 12
64879: PUSH
64880: CALL_OW 44
64884: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64885: LD_VAR 0 12
64889: PPUSH
64890: LD_VAR 0 8
64894: PPUSH
64895: LD_INT 0
64897: PPUSH
64898: CALL 66892 0 3
// end ;
64902: GO 64856
64904: POP
64905: POP
// if tigers then
64906: LD_VAR 0 2
64910: IFFALSE 64994
// for i = 1 to tigers do
64912: LD_ADDR_VAR 0 11
64916: PUSH
64917: DOUBLE
64918: LD_INT 1
64920: DEC
64921: ST_TO_ADDR
64922: LD_VAR 0 2
64926: PUSH
64927: FOR_TO
64928: IFFALSE 64992
// begin hc_class = class_tiger ;
64930: LD_ADDR_OWVAR 28
64934: PUSH
64935: LD_INT 14
64937: ST_TO_ADDR
// hc_gallery =  ;
64938: LD_ADDR_OWVAR 33
64942: PUSH
64943: LD_STRING 
64945: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64946: LD_ADDR_OWVAR 35
64950: PUSH
64951: LD_INT 7
64953: NEG
64954: PPUSH
64955: LD_INT 7
64957: PPUSH
64958: CALL_OW 12
64962: ST_TO_ADDR
// animal := CreateHuman ;
64963: LD_ADDR_VAR 0 12
64967: PUSH
64968: CALL_OW 44
64972: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64973: LD_VAR 0 12
64977: PPUSH
64978: LD_VAR 0 8
64982: PPUSH
64983: LD_INT 0
64985: PPUSH
64986: CALL 66892 0 3
// end ;
64990: GO 64927
64992: POP
64993: POP
// if apemans then
64994: LD_VAR 0 3
64998: IFFALSE 65121
// for i = 1 to apemans do
65000: LD_ADDR_VAR 0 11
65004: PUSH
65005: DOUBLE
65006: LD_INT 1
65008: DEC
65009: ST_TO_ADDR
65010: LD_VAR 0 3
65014: PUSH
65015: FOR_TO
65016: IFFALSE 65119
// begin hc_class = class_apeman ;
65018: LD_ADDR_OWVAR 28
65022: PUSH
65023: LD_INT 12
65025: ST_TO_ADDR
// hc_gallery =  ;
65026: LD_ADDR_OWVAR 33
65030: PUSH
65031: LD_STRING 
65033: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65034: LD_ADDR_OWVAR 35
65038: PUSH
65039: LD_INT 2
65041: NEG
65042: PPUSH
65043: LD_INT 2
65045: PPUSH
65046: CALL_OW 12
65050: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65051: LD_ADDR_OWVAR 31
65055: PUSH
65056: LD_INT 1
65058: PPUSH
65059: LD_INT 3
65061: PPUSH
65062: CALL_OW 12
65066: PUSH
65067: LD_INT 1
65069: PPUSH
65070: LD_INT 3
65072: PPUSH
65073: CALL_OW 12
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: ST_TO_ADDR
// animal := CreateHuman ;
65090: LD_ADDR_VAR 0 12
65094: PUSH
65095: CALL_OW 44
65099: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65100: LD_VAR 0 12
65104: PPUSH
65105: LD_VAR 0 8
65109: PPUSH
65110: LD_INT 0
65112: PPUSH
65113: CALL 66892 0 3
// end ;
65117: GO 65015
65119: POP
65120: POP
// if enchidnas then
65121: LD_VAR 0 4
65125: IFFALSE 65192
// for i = 1 to enchidnas do
65127: LD_ADDR_VAR 0 11
65131: PUSH
65132: DOUBLE
65133: LD_INT 1
65135: DEC
65136: ST_TO_ADDR
65137: LD_VAR 0 4
65141: PUSH
65142: FOR_TO
65143: IFFALSE 65190
// begin hc_class = 13 ;
65145: LD_ADDR_OWVAR 28
65149: PUSH
65150: LD_INT 13
65152: ST_TO_ADDR
// hc_gallery =  ;
65153: LD_ADDR_OWVAR 33
65157: PUSH
65158: LD_STRING 
65160: ST_TO_ADDR
// animal := CreateHuman ;
65161: LD_ADDR_VAR 0 12
65165: PUSH
65166: CALL_OW 44
65170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65171: LD_VAR 0 12
65175: PPUSH
65176: LD_VAR 0 8
65180: PPUSH
65181: LD_INT 0
65183: PPUSH
65184: CALL 66892 0 3
// end ;
65188: GO 65142
65190: POP
65191: POP
// if fishes then
65192: LD_VAR 0 7
65196: IFFALSE 65263
// for i = 1 to fishes do
65198: LD_ADDR_VAR 0 11
65202: PUSH
65203: DOUBLE
65204: LD_INT 1
65206: DEC
65207: ST_TO_ADDR
65208: LD_VAR 0 7
65212: PUSH
65213: FOR_TO
65214: IFFALSE 65261
// begin hc_class = 20 ;
65216: LD_ADDR_OWVAR 28
65220: PUSH
65221: LD_INT 20
65223: ST_TO_ADDR
// hc_gallery =  ;
65224: LD_ADDR_OWVAR 33
65228: PUSH
65229: LD_STRING 
65231: ST_TO_ADDR
// animal := CreateHuman ;
65232: LD_ADDR_VAR 0 12
65236: PUSH
65237: CALL_OW 44
65241: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65242: LD_VAR 0 12
65246: PPUSH
65247: LD_VAR 0 9
65251: PPUSH
65252: LD_INT 0
65254: PPUSH
65255: CALL 66892 0 3
// end ;
65259: GO 65213
65261: POP
65262: POP
// end ;
65263: LD_VAR 0 10
65267: RET
// export function WantHeal ( sci , unit ) ; begin
65268: LD_INT 0
65270: PPUSH
// if GetTaskList ( sci ) > 0 then
65271: LD_VAR 0 1
65275: PPUSH
65276: CALL_OW 437
65280: PUSH
65281: LD_INT 0
65283: GREATER
65284: IFFALSE 65354
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65286: LD_VAR 0 1
65290: PPUSH
65291: CALL_OW 437
65295: PUSH
65296: LD_INT 1
65298: ARRAY
65299: PUSH
65300: LD_INT 1
65302: ARRAY
65303: PUSH
65304: LD_STRING l
65306: EQUAL
65307: PUSH
65308: LD_VAR 0 1
65312: PPUSH
65313: CALL_OW 437
65317: PUSH
65318: LD_INT 1
65320: ARRAY
65321: PUSH
65322: LD_INT 4
65324: ARRAY
65325: PUSH
65326: LD_VAR 0 2
65330: EQUAL
65331: AND
65332: IFFALSE 65344
// result := true else
65334: LD_ADDR_VAR 0 3
65338: PUSH
65339: LD_INT 1
65341: ST_TO_ADDR
65342: GO 65352
// result := false ;
65344: LD_ADDR_VAR 0 3
65348: PUSH
65349: LD_INT 0
65351: ST_TO_ADDR
// end else
65352: GO 65362
// result := false ;
65354: LD_ADDR_VAR 0 3
65358: PUSH
65359: LD_INT 0
65361: ST_TO_ADDR
// end ;
65362: LD_VAR 0 3
65366: RET
// export function HealTarget ( sci ) ; begin
65367: LD_INT 0
65369: PPUSH
// if not sci then
65370: LD_VAR 0 1
65374: NOT
65375: IFFALSE 65379
// exit ;
65377: GO 65444
// result := 0 ;
65379: LD_ADDR_VAR 0 2
65383: PUSH
65384: LD_INT 0
65386: ST_TO_ADDR
// if GetTaskList ( sci ) then
65387: LD_VAR 0 1
65391: PPUSH
65392: CALL_OW 437
65396: IFFALSE 65444
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65398: LD_VAR 0 1
65402: PPUSH
65403: CALL_OW 437
65407: PUSH
65408: LD_INT 1
65410: ARRAY
65411: PUSH
65412: LD_INT 1
65414: ARRAY
65415: PUSH
65416: LD_STRING l
65418: EQUAL
65419: IFFALSE 65444
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65421: LD_ADDR_VAR 0 2
65425: PUSH
65426: LD_VAR 0 1
65430: PPUSH
65431: CALL_OW 437
65435: PUSH
65436: LD_INT 1
65438: ARRAY
65439: PUSH
65440: LD_INT 4
65442: ARRAY
65443: ST_TO_ADDR
// end ;
65444: LD_VAR 0 2
65448: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65449: LD_INT 0
65451: PPUSH
65452: PPUSH
65453: PPUSH
65454: PPUSH
// if not base_units then
65455: LD_VAR 0 1
65459: NOT
65460: IFFALSE 65464
// exit ;
65462: GO 65551
// result := false ;
65464: LD_ADDR_VAR 0 2
65468: PUSH
65469: LD_INT 0
65471: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65472: LD_ADDR_VAR 0 5
65476: PUSH
65477: LD_VAR 0 1
65481: PPUSH
65482: LD_INT 21
65484: PUSH
65485: LD_INT 3
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PPUSH
65492: CALL_OW 72
65496: ST_TO_ADDR
// if not tmp then
65497: LD_VAR 0 5
65501: NOT
65502: IFFALSE 65506
// exit ;
65504: GO 65551
// for i in tmp do
65506: LD_ADDR_VAR 0 3
65510: PUSH
65511: LD_VAR 0 5
65515: PUSH
65516: FOR_IN
65517: IFFALSE 65549
// begin result := EnemyInRange ( i , 22 ) ;
65519: LD_ADDR_VAR 0 2
65523: PUSH
65524: LD_VAR 0 3
65528: PPUSH
65529: LD_INT 22
65531: PPUSH
65532: CALL 63138 0 2
65536: ST_TO_ADDR
// if result then
65537: LD_VAR 0 2
65541: IFFALSE 65547
// exit ;
65543: POP
65544: POP
65545: GO 65551
// end ;
65547: GO 65516
65549: POP
65550: POP
// end ;
65551: LD_VAR 0 2
65555: RET
// export function FilterByTag ( units , tag ) ; begin
65556: LD_INT 0
65558: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65559: LD_ADDR_VAR 0 3
65563: PUSH
65564: LD_VAR 0 1
65568: PPUSH
65569: LD_INT 120
65571: PUSH
65572: LD_VAR 0 2
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PPUSH
65581: CALL_OW 72
65585: ST_TO_ADDR
// end ;
65586: LD_VAR 0 3
65590: RET
// export function IsDriver ( un ) ; begin
65591: LD_INT 0
65593: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65594: LD_ADDR_VAR 0 2
65598: PUSH
65599: LD_VAR 0 1
65603: PUSH
65604: LD_INT 55
65606: PUSH
65607: EMPTY
65608: LIST
65609: PPUSH
65610: CALL_OW 69
65614: IN
65615: ST_TO_ADDR
// end ;
65616: LD_VAR 0 2
65620: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65621: LD_INT 0
65623: PPUSH
65624: PPUSH
// list := [ ] ;
65625: LD_ADDR_VAR 0 5
65629: PUSH
65630: EMPTY
65631: ST_TO_ADDR
// case d of 0 :
65632: LD_VAR 0 3
65636: PUSH
65637: LD_INT 0
65639: DOUBLE
65640: EQUAL
65641: IFTRUE 65645
65643: GO 65778
65645: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65646: LD_ADDR_VAR 0 5
65650: PUSH
65651: LD_VAR 0 1
65655: PUSH
65656: LD_INT 4
65658: MINUS
65659: PUSH
65660: LD_VAR 0 2
65664: PUSH
65665: LD_INT 4
65667: MINUS
65668: PUSH
65669: LD_INT 2
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: PUSH
65677: LD_VAR 0 1
65681: PUSH
65682: LD_INT 3
65684: MINUS
65685: PUSH
65686: LD_VAR 0 2
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: PUSH
65699: LD_VAR 0 1
65703: PUSH
65704: LD_INT 4
65706: PLUS
65707: PUSH
65708: LD_VAR 0 2
65712: PUSH
65713: LD_INT 4
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: PUSH
65721: LD_VAR 0 1
65725: PUSH
65726: LD_INT 3
65728: PLUS
65729: PUSH
65730: LD_VAR 0 2
65734: PUSH
65735: LD_INT 3
65737: PLUS
65738: PUSH
65739: LD_INT 5
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: PUSH
65747: LD_VAR 0 1
65751: PUSH
65752: LD_VAR 0 2
65756: PUSH
65757: LD_INT 4
65759: PLUS
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: ST_TO_ADDR
// end ; 1 :
65776: GO 66476
65778: LD_INT 1
65780: DOUBLE
65781: EQUAL
65782: IFTRUE 65786
65784: GO 65919
65786: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65787: LD_ADDR_VAR 0 5
65791: PUSH
65792: LD_VAR 0 1
65796: PUSH
65797: LD_VAR 0 2
65801: PUSH
65802: LD_INT 4
65804: MINUS
65805: PUSH
65806: LD_INT 3
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: LIST
65813: PUSH
65814: LD_VAR 0 1
65818: PUSH
65819: LD_INT 3
65821: MINUS
65822: PUSH
65823: LD_VAR 0 2
65827: PUSH
65828: LD_INT 3
65830: MINUS
65831: PUSH
65832: LD_INT 2
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: LIST
65839: PUSH
65840: LD_VAR 0 1
65844: PUSH
65845: LD_INT 4
65847: MINUS
65848: PUSH
65849: LD_VAR 0 2
65853: PUSH
65854: LD_INT 1
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: PUSH
65862: LD_VAR 0 1
65866: PUSH
65867: LD_VAR 0 2
65871: PUSH
65872: LD_INT 3
65874: PLUS
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: LIST
65883: PUSH
65884: LD_VAR 0 1
65888: PUSH
65889: LD_INT 4
65891: PLUS
65892: PUSH
65893: LD_VAR 0 2
65897: PUSH
65898: LD_INT 4
65900: PLUS
65901: PUSH
65902: LD_INT 5
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: LIST
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: ST_TO_ADDR
// end ; 2 :
65917: GO 66476
65919: LD_INT 2
65921: DOUBLE
65922: EQUAL
65923: IFTRUE 65927
65925: GO 66056
65927: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65928: LD_ADDR_VAR 0 5
65932: PUSH
65933: LD_VAR 0 1
65937: PUSH
65938: LD_VAR 0 2
65942: PUSH
65943: LD_INT 3
65945: MINUS
65946: PUSH
65947: LD_INT 3
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: LIST
65954: PUSH
65955: LD_VAR 0 1
65959: PUSH
65960: LD_INT 4
65962: PLUS
65963: PUSH
65964: LD_VAR 0 2
65968: PUSH
65969: LD_INT 4
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: LIST
65976: PUSH
65977: LD_VAR 0 1
65981: PUSH
65982: LD_VAR 0 2
65986: PUSH
65987: LD_INT 4
65989: PLUS
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: PUSH
65999: LD_VAR 0 1
66003: PUSH
66004: LD_INT 3
66006: MINUS
66007: PUSH
66008: LD_VAR 0 2
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: LIST
66020: PUSH
66021: LD_VAR 0 1
66025: PUSH
66026: LD_INT 4
66028: MINUS
66029: PUSH
66030: LD_VAR 0 2
66034: PUSH
66035: LD_INT 4
66037: MINUS
66038: PUSH
66039: LD_INT 2
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: ST_TO_ADDR
// end ; 3 :
66054: GO 66476
66056: LD_INT 3
66058: DOUBLE
66059: EQUAL
66060: IFTRUE 66064
66062: GO 66197
66064: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66065: LD_ADDR_VAR 0 5
66069: PUSH
66070: LD_VAR 0 1
66074: PUSH
66075: LD_INT 3
66077: PLUS
66078: PUSH
66079: LD_VAR 0 2
66083: PUSH
66084: LD_INT 4
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: LIST
66091: PUSH
66092: LD_VAR 0 1
66096: PUSH
66097: LD_INT 4
66099: PLUS
66100: PUSH
66101: LD_VAR 0 2
66105: PUSH
66106: LD_INT 4
66108: PLUS
66109: PUSH
66110: LD_INT 5
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: LIST
66117: PUSH
66118: LD_VAR 0 1
66122: PUSH
66123: LD_INT 4
66125: MINUS
66126: PUSH
66127: LD_VAR 0 2
66131: PUSH
66132: LD_INT 1
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: LIST
66139: PUSH
66140: LD_VAR 0 1
66144: PUSH
66145: LD_VAR 0 2
66149: PUSH
66150: LD_INT 4
66152: MINUS
66153: PUSH
66154: LD_INT 3
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: LIST
66161: PUSH
66162: LD_VAR 0 1
66166: PUSH
66167: LD_INT 3
66169: MINUS
66170: PUSH
66171: LD_VAR 0 2
66175: PUSH
66176: LD_INT 3
66178: MINUS
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: ST_TO_ADDR
// end ; 4 :
66195: GO 66476
66197: LD_INT 4
66199: DOUBLE
66200: EQUAL
66201: IFTRUE 66205
66203: GO 66338
66205: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66206: LD_ADDR_VAR 0 5
66210: PUSH
66211: LD_VAR 0 1
66215: PUSH
66216: LD_VAR 0 2
66220: PUSH
66221: LD_INT 4
66223: PLUS
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: LIST
66232: PUSH
66233: LD_VAR 0 1
66237: PUSH
66238: LD_INT 3
66240: PLUS
66241: PUSH
66242: LD_VAR 0 2
66246: PUSH
66247: LD_INT 3
66249: PLUS
66250: PUSH
66251: LD_INT 5
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: LIST
66258: PUSH
66259: LD_VAR 0 1
66263: PUSH
66264: LD_INT 4
66266: PLUS
66267: PUSH
66268: LD_VAR 0 2
66272: PUSH
66273: LD_INT 4
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: PUSH
66281: LD_VAR 0 1
66285: PUSH
66286: LD_VAR 0 2
66290: PUSH
66291: LD_INT 3
66293: MINUS
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: LIST
66302: PUSH
66303: LD_VAR 0 1
66307: PUSH
66308: LD_INT 4
66310: MINUS
66311: PUSH
66312: LD_VAR 0 2
66316: PUSH
66317: LD_INT 4
66319: MINUS
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: ST_TO_ADDR
// end ; 5 :
66336: GO 66476
66338: LD_INT 5
66340: DOUBLE
66341: EQUAL
66342: IFTRUE 66346
66344: GO 66475
66346: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66347: LD_ADDR_VAR 0 5
66351: PUSH
66352: LD_VAR 0 1
66356: PUSH
66357: LD_INT 4
66359: MINUS
66360: PUSH
66361: LD_VAR 0 2
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: LD_VAR 0 2
66383: PUSH
66384: LD_INT 4
66386: MINUS
66387: PUSH
66388: LD_INT 3
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: LIST
66395: PUSH
66396: LD_VAR 0 1
66400: PUSH
66401: LD_INT 4
66403: PLUS
66404: PUSH
66405: LD_VAR 0 2
66409: PUSH
66410: LD_INT 4
66412: PLUS
66413: PUSH
66414: LD_INT 5
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: PUSH
66422: LD_VAR 0 1
66426: PUSH
66427: LD_INT 3
66429: PLUS
66430: PUSH
66431: LD_VAR 0 2
66435: PUSH
66436: LD_INT 4
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: PUSH
66444: LD_VAR 0 1
66448: PUSH
66449: LD_VAR 0 2
66453: PUSH
66454: LD_INT 3
66456: PLUS
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: ST_TO_ADDR
// end ; end ;
66473: GO 66476
66475: POP
// result := list ;
66476: LD_ADDR_VAR 0 4
66480: PUSH
66481: LD_VAR 0 5
66485: ST_TO_ADDR
// end ;
66486: LD_VAR 0 4
66490: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66491: LD_INT 0
66493: PPUSH
66494: PPUSH
66495: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66496: LD_VAR 0 1
66500: NOT
66501: PUSH
66502: LD_VAR 0 2
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: LD_INT 2
66512: PUSH
66513: LD_INT 3
66515: PUSH
66516: LD_INT 4
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: IN
66525: NOT
66526: OR
66527: IFFALSE 66531
// exit ;
66529: GO 66614
// tmp := [ ] ;
66531: LD_ADDR_VAR 0 5
66535: PUSH
66536: EMPTY
66537: ST_TO_ADDR
// for i in units do
66538: LD_ADDR_VAR 0 4
66542: PUSH
66543: LD_VAR 0 1
66547: PUSH
66548: FOR_IN
66549: IFFALSE 66583
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66551: LD_ADDR_VAR 0 5
66555: PUSH
66556: LD_VAR 0 5
66560: PPUSH
66561: LD_VAR 0 4
66565: PPUSH
66566: LD_VAR 0 2
66570: PPUSH
66571: CALL_OW 259
66575: PPUSH
66576: CALL 67975 0 2
66580: ST_TO_ADDR
66581: GO 66548
66583: POP
66584: POP
// if not tmp then
66585: LD_VAR 0 5
66589: NOT
66590: IFFALSE 66594
// exit ;
66592: GO 66614
// result := SortListByListDesc ( units , tmp ) ;
66594: LD_ADDR_VAR 0 3
66598: PUSH
66599: LD_VAR 0 1
66603: PPUSH
66604: LD_VAR 0 5
66608: PPUSH
66609: CALL_OW 77
66613: ST_TO_ADDR
// end ;
66614: LD_VAR 0 3
66618: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66619: LD_INT 0
66621: PPUSH
66622: PPUSH
66623: PPUSH
// result := false ;
66624: LD_ADDR_VAR 0 3
66628: PUSH
66629: LD_INT 0
66631: ST_TO_ADDR
// if not building then
66632: LD_VAR 0 2
66636: NOT
66637: IFFALSE 66641
// exit ;
66639: GO 66779
// x := GetX ( building ) ;
66641: LD_ADDR_VAR 0 4
66645: PUSH
66646: LD_VAR 0 2
66650: PPUSH
66651: CALL_OW 250
66655: ST_TO_ADDR
// y := GetY ( building ) ;
66656: LD_ADDR_VAR 0 5
66660: PUSH
66661: LD_VAR 0 2
66665: PPUSH
66666: CALL_OW 251
66670: ST_TO_ADDR
// if not x or not y then
66671: LD_VAR 0 4
66675: NOT
66676: PUSH
66677: LD_VAR 0 5
66681: NOT
66682: OR
66683: IFFALSE 66687
// exit ;
66685: GO 66779
// if GetTaskList ( unit ) then
66687: LD_VAR 0 1
66691: PPUSH
66692: CALL_OW 437
66696: IFFALSE 66779
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66698: LD_STRING e
66700: PUSH
66701: LD_VAR 0 1
66705: PPUSH
66706: CALL_OW 437
66710: PUSH
66711: LD_INT 1
66713: ARRAY
66714: PUSH
66715: LD_INT 1
66717: ARRAY
66718: EQUAL
66719: PUSH
66720: LD_VAR 0 4
66724: PUSH
66725: LD_VAR 0 1
66729: PPUSH
66730: CALL_OW 437
66734: PUSH
66735: LD_INT 1
66737: ARRAY
66738: PUSH
66739: LD_INT 2
66741: ARRAY
66742: EQUAL
66743: AND
66744: PUSH
66745: LD_VAR 0 5
66749: PUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: CALL_OW 437
66759: PUSH
66760: LD_INT 1
66762: ARRAY
66763: PUSH
66764: LD_INT 3
66766: ARRAY
66767: EQUAL
66768: AND
66769: IFFALSE 66779
// result := true end ;
66771: LD_ADDR_VAR 0 3
66775: PUSH
66776: LD_INT 1
66778: ST_TO_ADDR
// end ;
66779: LD_VAR 0 3
66783: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66784: LD_INT 0
66786: PPUSH
// result := false ;
66787: LD_ADDR_VAR 0 4
66791: PUSH
66792: LD_INT 0
66794: ST_TO_ADDR
// if GetTaskList ( unit ) then
66795: LD_VAR 0 1
66799: PPUSH
66800: CALL_OW 437
66804: IFFALSE 66887
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66806: LD_STRING M
66808: PUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: CALL_OW 437
66818: PUSH
66819: LD_INT 1
66821: ARRAY
66822: PUSH
66823: LD_INT 1
66825: ARRAY
66826: EQUAL
66827: PUSH
66828: LD_VAR 0 2
66832: PUSH
66833: LD_VAR 0 1
66837: PPUSH
66838: CALL_OW 437
66842: PUSH
66843: LD_INT 1
66845: ARRAY
66846: PUSH
66847: LD_INT 2
66849: ARRAY
66850: EQUAL
66851: AND
66852: PUSH
66853: LD_VAR 0 3
66857: PUSH
66858: LD_VAR 0 1
66862: PPUSH
66863: CALL_OW 437
66867: PUSH
66868: LD_INT 1
66870: ARRAY
66871: PUSH
66872: LD_INT 3
66874: ARRAY
66875: EQUAL
66876: AND
66877: IFFALSE 66887
// result := true ;
66879: LD_ADDR_VAR 0 4
66883: PUSH
66884: LD_INT 1
66886: ST_TO_ADDR
// end ; end ;
66887: LD_VAR 0 4
66891: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66892: LD_INT 0
66894: PPUSH
66895: PPUSH
66896: PPUSH
66897: PPUSH
// if not unit or not area then
66898: LD_VAR 0 1
66902: NOT
66903: PUSH
66904: LD_VAR 0 2
66908: NOT
66909: OR
66910: IFFALSE 66914
// exit ;
66912: GO 67078
// tmp := AreaToList ( area , i ) ;
66914: LD_ADDR_VAR 0 6
66918: PUSH
66919: LD_VAR 0 2
66923: PPUSH
66924: LD_VAR 0 5
66928: PPUSH
66929: CALL_OW 517
66933: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66934: LD_ADDR_VAR 0 5
66938: PUSH
66939: DOUBLE
66940: LD_INT 1
66942: DEC
66943: ST_TO_ADDR
66944: LD_VAR 0 6
66948: PUSH
66949: LD_INT 1
66951: ARRAY
66952: PUSH
66953: FOR_TO
66954: IFFALSE 67076
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66956: LD_ADDR_VAR 0 7
66960: PUSH
66961: LD_VAR 0 6
66965: PUSH
66966: LD_INT 1
66968: ARRAY
66969: PUSH
66970: LD_VAR 0 5
66974: ARRAY
66975: PUSH
66976: LD_VAR 0 6
66980: PUSH
66981: LD_INT 2
66983: ARRAY
66984: PUSH
66985: LD_VAR 0 5
66989: ARRAY
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66995: LD_VAR 0 7
66999: PUSH
67000: LD_INT 1
67002: ARRAY
67003: PPUSH
67004: LD_VAR 0 7
67008: PUSH
67009: LD_INT 2
67011: ARRAY
67012: PPUSH
67013: CALL_OW 428
67017: PUSH
67018: LD_INT 0
67020: EQUAL
67021: IFFALSE 67074
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67023: LD_VAR 0 1
67027: PPUSH
67028: LD_VAR 0 7
67032: PUSH
67033: LD_INT 1
67035: ARRAY
67036: PPUSH
67037: LD_VAR 0 7
67041: PUSH
67042: LD_INT 2
67044: ARRAY
67045: PPUSH
67046: LD_VAR 0 3
67050: PPUSH
67051: CALL_OW 48
// result := IsPlaced ( unit ) ;
67055: LD_ADDR_VAR 0 4
67059: PUSH
67060: LD_VAR 0 1
67064: PPUSH
67065: CALL_OW 305
67069: ST_TO_ADDR
// exit ;
67070: POP
67071: POP
67072: GO 67078
// end ; end ;
67074: GO 66953
67076: POP
67077: POP
// end ;
67078: LD_VAR 0 4
67082: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67083: LD_INT 0
67085: PPUSH
67086: PPUSH
67087: PPUSH
// if not side or side > 8 then
67088: LD_VAR 0 1
67092: NOT
67093: PUSH
67094: LD_VAR 0 1
67098: PUSH
67099: LD_INT 8
67101: GREATER
67102: OR
67103: IFFALSE 67107
// exit ;
67105: GO 67294
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67107: LD_ADDR_VAR 0 4
67111: PUSH
67112: LD_INT 22
67114: PUSH
67115: LD_VAR 0 1
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 21
67126: PUSH
67127: LD_INT 3
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PPUSH
67138: CALL_OW 69
67142: ST_TO_ADDR
// if not tmp then
67143: LD_VAR 0 4
67147: NOT
67148: IFFALSE 67152
// exit ;
67150: GO 67294
// enable_addtolog := true ;
67152: LD_ADDR_OWVAR 81
67156: PUSH
67157: LD_INT 1
67159: ST_TO_ADDR
// AddToLog ( [ ) ;
67160: LD_STRING [
67162: PPUSH
67163: CALL_OW 561
// for i in tmp do
67167: LD_ADDR_VAR 0 3
67171: PUSH
67172: LD_VAR 0 4
67176: PUSH
67177: FOR_IN
67178: IFFALSE 67285
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67180: LD_STRING [
67182: PUSH
67183: LD_VAR 0 3
67187: PPUSH
67188: CALL_OW 266
67192: STR
67193: PUSH
67194: LD_STRING , 
67196: STR
67197: PUSH
67198: LD_VAR 0 3
67202: PPUSH
67203: CALL_OW 250
67207: STR
67208: PUSH
67209: LD_STRING , 
67211: STR
67212: PUSH
67213: LD_VAR 0 3
67217: PPUSH
67218: CALL_OW 251
67222: STR
67223: PUSH
67224: LD_STRING , 
67226: STR
67227: PUSH
67228: LD_VAR 0 3
67232: PPUSH
67233: CALL_OW 254
67237: STR
67238: PUSH
67239: LD_STRING , 
67241: STR
67242: PUSH
67243: LD_VAR 0 3
67247: PPUSH
67248: LD_INT 1
67250: PPUSH
67251: CALL_OW 268
67255: STR
67256: PUSH
67257: LD_STRING , 
67259: STR
67260: PUSH
67261: LD_VAR 0 3
67265: PPUSH
67266: LD_INT 2
67268: PPUSH
67269: CALL_OW 268
67273: STR
67274: PUSH
67275: LD_STRING ],
67277: STR
67278: PPUSH
67279: CALL_OW 561
// end ;
67283: GO 67177
67285: POP
67286: POP
// AddToLog ( ]; ) ;
67287: LD_STRING ];
67289: PPUSH
67290: CALL_OW 561
// end ;
67294: LD_VAR 0 2
67298: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67299: LD_INT 0
67301: PPUSH
67302: PPUSH
67303: PPUSH
67304: PPUSH
67305: PPUSH
// if not area or not rate or not max then
67306: LD_VAR 0 1
67310: NOT
67311: PUSH
67312: LD_VAR 0 2
67316: NOT
67317: OR
67318: PUSH
67319: LD_VAR 0 4
67323: NOT
67324: OR
67325: IFFALSE 67329
// exit ;
67327: GO 67518
// while 1 do
67329: LD_INT 1
67331: IFFALSE 67518
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67333: LD_ADDR_VAR 0 9
67337: PUSH
67338: LD_VAR 0 1
67342: PPUSH
67343: LD_INT 1
67345: PPUSH
67346: CALL_OW 287
67350: PUSH
67351: LD_INT 10
67353: MUL
67354: ST_TO_ADDR
// r := rate / 10 ;
67355: LD_ADDR_VAR 0 7
67359: PUSH
67360: LD_VAR 0 2
67364: PUSH
67365: LD_INT 10
67367: DIVREAL
67368: ST_TO_ADDR
// time := 1 1$00 ;
67369: LD_ADDR_VAR 0 8
67373: PUSH
67374: LD_INT 2100
67376: ST_TO_ADDR
// if amount < min then
67377: LD_VAR 0 9
67381: PUSH
67382: LD_VAR 0 3
67386: LESS
67387: IFFALSE 67405
// r := r * 2 else
67389: LD_ADDR_VAR 0 7
67393: PUSH
67394: LD_VAR 0 7
67398: PUSH
67399: LD_INT 2
67401: MUL
67402: ST_TO_ADDR
67403: GO 67431
// if amount > max then
67405: LD_VAR 0 9
67409: PUSH
67410: LD_VAR 0 4
67414: GREATER
67415: IFFALSE 67431
// r := r / 2 ;
67417: LD_ADDR_VAR 0 7
67421: PUSH
67422: LD_VAR 0 7
67426: PUSH
67427: LD_INT 2
67429: DIVREAL
67430: ST_TO_ADDR
// time := time / r ;
67431: LD_ADDR_VAR 0 8
67435: PUSH
67436: LD_VAR 0 8
67440: PUSH
67441: LD_VAR 0 7
67445: DIVREAL
67446: ST_TO_ADDR
// if time < 0 then
67447: LD_VAR 0 8
67451: PUSH
67452: LD_INT 0
67454: LESS
67455: IFFALSE 67472
// time := time * - 1 ;
67457: LD_ADDR_VAR 0 8
67461: PUSH
67462: LD_VAR 0 8
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: MUL
67471: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67472: LD_VAR 0 8
67476: PUSH
67477: LD_INT 35
67479: PPUSH
67480: LD_INT 875
67482: PPUSH
67483: CALL_OW 12
67487: PLUS
67488: PPUSH
67489: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67493: LD_INT 1
67495: PPUSH
67496: LD_INT 5
67498: PPUSH
67499: CALL_OW 12
67503: PPUSH
67504: LD_VAR 0 1
67508: PPUSH
67509: LD_INT 1
67511: PPUSH
67512: CALL_OW 55
// end ;
67516: GO 67329
// end ;
67518: LD_VAR 0 5
67522: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67523: LD_INT 0
67525: PPUSH
67526: PPUSH
67527: PPUSH
67528: PPUSH
67529: PPUSH
67530: PPUSH
67531: PPUSH
67532: PPUSH
// if not turrets or not factories then
67533: LD_VAR 0 1
67537: NOT
67538: PUSH
67539: LD_VAR 0 2
67543: NOT
67544: OR
67545: IFFALSE 67549
// exit ;
67547: GO 67856
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67549: LD_ADDR_VAR 0 10
67553: PUSH
67554: LD_INT 5
67556: PUSH
67557: LD_INT 6
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 2
67566: PUSH
67567: LD_INT 4
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 3
67576: PUSH
67577: LD_INT 5
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 24
67591: PUSH
67592: LD_INT 25
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 23
67601: PUSH
67602: LD_INT 27
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 42
67615: PUSH
67616: LD_INT 43
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 44
67625: PUSH
67626: LD_INT 46
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 45
67635: PUSH
67636: LD_INT 47
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: LIST
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: LIST
67652: ST_TO_ADDR
// result := [ ] ;
67653: LD_ADDR_VAR 0 3
67657: PUSH
67658: EMPTY
67659: ST_TO_ADDR
// for i in turrets do
67660: LD_ADDR_VAR 0 4
67664: PUSH
67665: LD_VAR 0 1
67669: PUSH
67670: FOR_IN
67671: IFFALSE 67854
// begin nat := GetNation ( i ) ;
67673: LD_ADDR_VAR 0 7
67677: PUSH
67678: LD_VAR 0 4
67682: PPUSH
67683: CALL_OW 248
67687: ST_TO_ADDR
// weapon := 0 ;
67688: LD_ADDR_VAR 0 8
67692: PUSH
67693: LD_INT 0
67695: ST_TO_ADDR
// if not nat then
67696: LD_VAR 0 7
67700: NOT
67701: IFFALSE 67705
// continue ;
67703: GO 67670
// for j in list [ nat ] do
67705: LD_ADDR_VAR 0 5
67709: PUSH
67710: LD_VAR 0 10
67714: PUSH
67715: LD_VAR 0 7
67719: ARRAY
67720: PUSH
67721: FOR_IN
67722: IFFALSE 67763
// if GetBWeapon ( i ) = j [ 1 ] then
67724: LD_VAR 0 4
67728: PPUSH
67729: CALL_OW 269
67733: PUSH
67734: LD_VAR 0 5
67738: PUSH
67739: LD_INT 1
67741: ARRAY
67742: EQUAL
67743: IFFALSE 67761
// begin weapon := j [ 2 ] ;
67745: LD_ADDR_VAR 0 8
67749: PUSH
67750: LD_VAR 0 5
67754: PUSH
67755: LD_INT 2
67757: ARRAY
67758: ST_TO_ADDR
// break ;
67759: GO 67763
// end ;
67761: GO 67721
67763: POP
67764: POP
// if not weapon then
67765: LD_VAR 0 8
67769: NOT
67770: IFFALSE 67774
// continue ;
67772: GO 67670
// for k in factories do
67774: LD_ADDR_VAR 0 6
67778: PUSH
67779: LD_VAR 0 2
67783: PUSH
67784: FOR_IN
67785: IFFALSE 67850
// begin weapons := AvailableWeaponList ( k ) ;
67787: LD_ADDR_VAR 0 9
67791: PUSH
67792: LD_VAR 0 6
67796: PPUSH
67797: CALL_OW 478
67801: ST_TO_ADDR
// if not weapons then
67802: LD_VAR 0 9
67806: NOT
67807: IFFALSE 67811
// continue ;
67809: GO 67784
// if weapon in weapons then
67811: LD_VAR 0 8
67815: PUSH
67816: LD_VAR 0 9
67820: IN
67821: IFFALSE 67848
// begin result := [ i , weapon ] ;
67823: LD_ADDR_VAR 0 3
67827: PUSH
67828: LD_VAR 0 4
67832: PUSH
67833: LD_VAR 0 8
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: ST_TO_ADDR
// exit ;
67842: POP
67843: POP
67844: POP
67845: POP
67846: GO 67856
// end ; end ;
67848: GO 67784
67850: POP
67851: POP
// end ;
67852: GO 67670
67854: POP
67855: POP
// end ;
67856: LD_VAR 0 3
67860: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67861: LD_INT 0
67863: PPUSH
// if not side or side > 8 then
67864: LD_VAR 0 3
67868: NOT
67869: PUSH
67870: LD_VAR 0 3
67874: PUSH
67875: LD_INT 8
67877: GREATER
67878: OR
67879: IFFALSE 67883
// exit ;
67881: GO 67942
// if not range then
67883: LD_VAR 0 4
67887: NOT
67888: IFFALSE 67899
// range := - 12 ;
67890: LD_ADDR_VAR 0 4
67894: PUSH
67895: LD_INT 12
67897: NEG
67898: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67899: LD_VAR 0 1
67903: PPUSH
67904: LD_VAR 0 2
67908: PPUSH
67909: LD_VAR 0 3
67913: PPUSH
67914: LD_VAR 0 4
67918: PPUSH
67919: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67923: LD_VAR 0 1
67927: PPUSH
67928: LD_VAR 0 2
67932: PPUSH
67933: LD_VAR 0 3
67937: PPUSH
67938: CALL_OW 331
// end ;
67942: LD_VAR 0 5
67946: RET
// export function Video ( mode ) ; begin
67947: LD_INT 0
67949: PPUSH
// ingame_video = mode ;
67950: LD_ADDR_OWVAR 52
67954: PUSH
67955: LD_VAR 0 1
67959: ST_TO_ADDR
// interface_hidden = mode ;
67960: LD_ADDR_OWVAR 54
67964: PUSH
67965: LD_VAR 0 1
67969: ST_TO_ADDR
// end ;
67970: LD_VAR 0 2
67974: RET
// export function Join ( array , element ) ; begin
67975: LD_INT 0
67977: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67978: LD_ADDR_VAR 0 3
67982: PUSH
67983: LD_VAR 0 1
67987: PPUSH
67988: LD_VAR 0 1
67992: PUSH
67993: LD_INT 1
67995: PLUS
67996: PPUSH
67997: LD_VAR 0 2
68001: PPUSH
68002: CALL_OW 1
68006: ST_TO_ADDR
// end ;
68007: LD_VAR 0 3
68011: RET
// export function JoinUnion ( array , element ) ; begin
68012: LD_INT 0
68014: PPUSH
// result := array union element ;
68015: LD_ADDR_VAR 0 3
68019: PUSH
68020: LD_VAR 0 1
68024: PUSH
68025: LD_VAR 0 2
68029: UNION
68030: ST_TO_ADDR
// end ;
68031: LD_VAR 0 3
68035: RET
// export function GetBehemoths ( side ) ; begin
68036: LD_INT 0
68038: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68039: LD_ADDR_VAR 0 2
68043: PUSH
68044: LD_INT 22
68046: PUSH
68047: LD_VAR 0 1
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 31
68058: PUSH
68059: LD_INT 25
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PPUSH
68070: CALL_OW 69
68074: ST_TO_ADDR
// end ;
68075: LD_VAR 0 2
68079: RET
// export function Shuffle ( array ) ; var i , index ; begin
68080: LD_INT 0
68082: PPUSH
68083: PPUSH
68084: PPUSH
// result := [ ] ;
68085: LD_ADDR_VAR 0 2
68089: PUSH
68090: EMPTY
68091: ST_TO_ADDR
// if not array then
68092: LD_VAR 0 1
68096: NOT
68097: IFFALSE 68101
// exit ;
68099: GO 68200
// Randomize ;
68101: CALL_OW 10
// for i = array downto 1 do
68105: LD_ADDR_VAR 0 3
68109: PUSH
68110: DOUBLE
68111: LD_VAR 0 1
68115: INC
68116: ST_TO_ADDR
68117: LD_INT 1
68119: PUSH
68120: FOR_DOWNTO
68121: IFFALSE 68198
// begin index := rand ( 1 , array ) ;
68123: LD_ADDR_VAR 0 4
68127: PUSH
68128: LD_INT 1
68130: PPUSH
68131: LD_VAR 0 1
68135: PPUSH
68136: CALL_OW 12
68140: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68141: LD_ADDR_VAR 0 2
68145: PUSH
68146: LD_VAR 0 2
68150: PPUSH
68151: LD_VAR 0 2
68155: PUSH
68156: LD_INT 1
68158: PLUS
68159: PPUSH
68160: LD_VAR 0 1
68164: PUSH
68165: LD_VAR 0 4
68169: ARRAY
68170: PPUSH
68171: CALL_OW 2
68175: ST_TO_ADDR
// array := Delete ( array , index ) ;
68176: LD_ADDR_VAR 0 1
68180: PUSH
68181: LD_VAR 0 1
68185: PPUSH
68186: LD_VAR 0 4
68190: PPUSH
68191: CALL_OW 3
68195: ST_TO_ADDR
// end ;
68196: GO 68120
68198: POP
68199: POP
// end ;
68200: LD_VAR 0 2
68204: RET
// export function GetBaseMaterials ( base ) ; begin
68205: LD_INT 0
68207: PPUSH
// result := [ 0 , 0 , 0 ] ;
68208: LD_ADDR_VAR 0 2
68212: PUSH
68213: LD_INT 0
68215: PUSH
68216: LD_INT 0
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: LIST
68226: ST_TO_ADDR
// if not base then
68227: LD_VAR 0 1
68231: NOT
68232: IFFALSE 68236
// exit ;
68234: GO 68285
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68236: LD_ADDR_VAR 0 2
68240: PUSH
68241: LD_VAR 0 1
68245: PPUSH
68246: LD_INT 1
68248: PPUSH
68249: CALL_OW 275
68253: PUSH
68254: LD_VAR 0 1
68258: PPUSH
68259: LD_INT 2
68261: PPUSH
68262: CALL_OW 275
68266: PUSH
68267: LD_VAR 0 1
68271: PPUSH
68272: LD_INT 3
68274: PPUSH
68275: CALL_OW 275
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: LIST
68284: ST_TO_ADDR
// end ;
68285: LD_VAR 0 2
68289: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68290: LD_INT 0
68292: PPUSH
68293: PPUSH
// result := array ;
68294: LD_ADDR_VAR 0 3
68298: PUSH
68299: LD_VAR 0 1
68303: ST_TO_ADDR
// if size >= result then
68304: LD_VAR 0 2
68308: PUSH
68309: LD_VAR 0 3
68313: GREATEREQUAL
68314: IFFALSE 68318
// exit ;
68316: GO 68368
// if size then
68318: LD_VAR 0 2
68322: IFFALSE 68368
// for i := array downto size do
68324: LD_ADDR_VAR 0 4
68328: PUSH
68329: DOUBLE
68330: LD_VAR 0 1
68334: INC
68335: ST_TO_ADDR
68336: LD_VAR 0 2
68340: PUSH
68341: FOR_DOWNTO
68342: IFFALSE 68366
// result := Delete ( result , result ) ;
68344: LD_ADDR_VAR 0 3
68348: PUSH
68349: LD_VAR 0 3
68353: PPUSH
68354: LD_VAR 0 3
68358: PPUSH
68359: CALL_OW 3
68363: ST_TO_ADDR
68364: GO 68341
68366: POP
68367: POP
// end ;
68368: LD_VAR 0 3
68372: RET
// export function ComExit ( unit ) ; var tmp ; begin
68373: LD_INT 0
68375: PPUSH
68376: PPUSH
// if not IsInUnit ( unit ) then
68377: LD_VAR 0 1
68381: PPUSH
68382: CALL_OW 310
68386: NOT
68387: IFFALSE 68391
// exit ;
68389: GO 68451
// tmp := IsInUnit ( unit ) ;
68391: LD_ADDR_VAR 0 3
68395: PUSH
68396: LD_VAR 0 1
68400: PPUSH
68401: CALL_OW 310
68405: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68406: LD_VAR 0 3
68410: PPUSH
68411: CALL_OW 247
68415: PUSH
68416: LD_INT 2
68418: EQUAL
68419: IFFALSE 68432
// ComExitVehicle ( unit ) else
68421: LD_VAR 0 1
68425: PPUSH
68426: CALL_OW 121
68430: GO 68441
// ComExitBuilding ( unit ) ;
68432: LD_VAR 0 1
68436: PPUSH
68437: CALL_OW 122
// result := tmp ;
68441: LD_ADDR_VAR 0 2
68445: PUSH
68446: LD_VAR 0 3
68450: ST_TO_ADDR
// end ;
68451: LD_VAR 0 2
68455: RET
// export function ComExitAll ( units ) ; var i ; begin
68456: LD_INT 0
68458: PPUSH
68459: PPUSH
// if not units then
68460: LD_VAR 0 1
68464: NOT
68465: IFFALSE 68469
// exit ;
68467: GO 68495
// for i in units do
68469: LD_ADDR_VAR 0 3
68473: PUSH
68474: LD_VAR 0 1
68478: PUSH
68479: FOR_IN
68480: IFFALSE 68493
// ComExit ( i ) ;
68482: LD_VAR 0 3
68486: PPUSH
68487: CALL 68373 0 1
68491: GO 68479
68493: POP
68494: POP
// end ;
68495: LD_VAR 0 2
68499: RET
// export function ResetHc ; begin
68500: LD_INT 0
68502: PPUSH
// InitHc ;
68503: CALL_OW 19
// hc_importance := 0 ;
68507: LD_ADDR_OWVAR 32
68511: PUSH
68512: LD_INT 0
68514: ST_TO_ADDR
// end ;
68515: LD_VAR 0 1
68519: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68520: LD_INT 0
68522: PPUSH
68523: PPUSH
68524: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68525: LD_ADDR_VAR 0 6
68529: PUSH
68530: LD_VAR 0 1
68534: PUSH
68535: LD_VAR 0 3
68539: PLUS
68540: PUSH
68541: LD_INT 2
68543: DIV
68544: ST_TO_ADDR
// if _x < 0 then
68545: LD_VAR 0 6
68549: PUSH
68550: LD_INT 0
68552: LESS
68553: IFFALSE 68570
// _x := _x * - 1 ;
68555: LD_ADDR_VAR 0 6
68559: PUSH
68560: LD_VAR 0 6
68564: PUSH
68565: LD_INT 1
68567: NEG
68568: MUL
68569: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68570: LD_ADDR_VAR 0 7
68574: PUSH
68575: LD_VAR 0 2
68579: PUSH
68580: LD_VAR 0 4
68584: PLUS
68585: PUSH
68586: LD_INT 2
68588: DIV
68589: ST_TO_ADDR
// if _y < 0 then
68590: LD_VAR 0 7
68594: PUSH
68595: LD_INT 0
68597: LESS
68598: IFFALSE 68615
// _y := _y * - 1 ;
68600: LD_ADDR_VAR 0 7
68604: PUSH
68605: LD_VAR 0 7
68609: PUSH
68610: LD_INT 1
68612: NEG
68613: MUL
68614: ST_TO_ADDR
// result := [ _x , _y ] ;
68615: LD_ADDR_VAR 0 5
68619: PUSH
68620: LD_VAR 0 6
68624: PUSH
68625: LD_VAR 0 7
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: ST_TO_ADDR
// end ;
68634: LD_VAR 0 5
68638: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68639: LD_INT 0
68641: PPUSH
68642: PPUSH
68643: PPUSH
68644: PPUSH
// task := GetTaskList ( unit ) ;
68645: LD_ADDR_VAR 0 7
68649: PUSH
68650: LD_VAR 0 1
68654: PPUSH
68655: CALL_OW 437
68659: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68660: LD_VAR 0 7
68664: NOT
68665: PUSH
68666: LD_VAR 0 1
68670: PPUSH
68671: LD_VAR 0 2
68675: PPUSH
68676: CALL_OW 308
68680: NOT
68681: AND
68682: IFFALSE 68686
// exit ;
68684: GO 68804
// if IsInArea ( unit , area ) then
68686: LD_VAR 0 1
68690: PPUSH
68691: LD_VAR 0 2
68695: PPUSH
68696: CALL_OW 308
68700: IFFALSE 68718
// begin ComMoveToArea ( unit , goAway ) ;
68702: LD_VAR 0 1
68706: PPUSH
68707: LD_VAR 0 3
68711: PPUSH
68712: CALL_OW 113
// exit ;
68716: GO 68804
// end ; if task [ 1 ] [ 1 ] <> M then
68718: LD_VAR 0 7
68722: PUSH
68723: LD_INT 1
68725: ARRAY
68726: PUSH
68727: LD_INT 1
68729: ARRAY
68730: PUSH
68731: LD_STRING M
68733: NONEQUAL
68734: IFFALSE 68738
// exit ;
68736: GO 68804
// x := task [ 1 ] [ 2 ] ;
68738: LD_ADDR_VAR 0 5
68742: PUSH
68743: LD_VAR 0 7
68747: PUSH
68748: LD_INT 1
68750: ARRAY
68751: PUSH
68752: LD_INT 2
68754: ARRAY
68755: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68756: LD_ADDR_VAR 0 6
68760: PUSH
68761: LD_VAR 0 7
68765: PUSH
68766: LD_INT 1
68768: ARRAY
68769: PUSH
68770: LD_INT 3
68772: ARRAY
68773: ST_TO_ADDR
// if InArea ( x , y , area ) then
68774: LD_VAR 0 5
68778: PPUSH
68779: LD_VAR 0 6
68783: PPUSH
68784: LD_VAR 0 2
68788: PPUSH
68789: CALL_OW 309
68793: IFFALSE 68804
// ComStop ( unit ) ;
68795: LD_VAR 0 1
68799: PPUSH
68800: CALL_OW 141
// end ;
68804: LD_VAR 0 4
68808: RET
// export function Abs ( value ) ; begin
68809: LD_INT 0
68811: PPUSH
// result := value ;
68812: LD_ADDR_VAR 0 2
68816: PUSH
68817: LD_VAR 0 1
68821: ST_TO_ADDR
// if value < 0 then
68822: LD_VAR 0 1
68826: PUSH
68827: LD_INT 0
68829: LESS
68830: IFFALSE 68847
// result := value * - 1 ;
68832: LD_ADDR_VAR 0 2
68836: PUSH
68837: LD_VAR 0 1
68841: PUSH
68842: LD_INT 1
68844: NEG
68845: MUL
68846: ST_TO_ADDR
// end ;
68847: LD_VAR 0 2
68851: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68852: LD_INT 0
68854: PPUSH
68855: PPUSH
68856: PPUSH
68857: PPUSH
68858: PPUSH
68859: PPUSH
68860: PPUSH
68861: PPUSH
// if not unit or not building then
68862: LD_VAR 0 1
68866: NOT
68867: PUSH
68868: LD_VAR 0 2
68872: NOT
68873: OR
68874: IFFALSE 68878
// exit ;
68876: GO 69104
// x := GetX ( building ) ;
68878: LD_ADDR_VAR 0 4
68882: PUSH
68883: LD_VAR 0 2
68887: PPUSH
68888: CALL_OW 250
68892: ST_TO_ADDR
// y := GetY ( building ) ;
68893: LD_ADDR_VAR 0 6
68897: PUSH
68898: LD_VAR 0 2
68902: PPUSH
68903: CALL_OW 251
68907: ST_TO_ADDR
// d := GetDir ( building ) ;
68908: LD_ADDR_VAR 0 8
68912: PUSH
68913: LD_VAR 0 2
68917: PPUSH
68918: CALL_OW 254
68922: ST_TO_ADDR
// r := 4 ;
68923: LD_ADDR_VAR 0 9
68927: PUSH
68928: LD_INT 4
68930: ST_TO_ADDR
// for i := 1 to 5 do
68931: LD_ADDR_VAR 0 10
68935: PUSH
68936: DOUBLE
68937: LD_INT 1
68939: DEC
68940: ST_TO_ADDR
68941: LD_INT 5
68943: PUSH
68944: FOR_TO
68945: IFFALSE 69102
// begin _x := ShiftX ( x , d , r + i ) ;
68947: LD_ADDR_VAR 0 5
68951: PUSH
68952: LD_VAR 0 4
68956: PPUSH
68957: LD_VAR 0 8
68961: PPUSH
68962: LD_VAR 0 9
68966: PUSH
68967: LD_VAR 0 10
68971: PLUS
68972: PPUSH
68973: CALL_OW 272
68977: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68978: LD_ADDR_VAR 0 7
68982: PUSH
68983: LD_VAR 0 6
68987: PPUSH
68988: LD_VAR 0 8
68992: PPUSH
68993: LD_VAR 0 9
68997: PUSH
68998: LD_VAR 0 10
69002: PLUS
69003: PPUSH
69004: CALL_OW 273
69008: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69009: LD_VAR 0 5
69013: PPUSH
69014: LD_VAR 0 7
69018: PPUSH
69019: CALL_OW 488
69023: PUSH
69024: LD_VAR 0 5
69028: PPUSH
69029: LD_VAR 0 7
69033: PPUSH
69034: CALL_OW 428
69038: PPUSH
69039: CALL_OW 247
69043: PUSH
69044: LD_INT 3
69046: PUSH
69047: LD_INT 2
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: IN
69054: NOT
69055: AND
69056: IFFALSE 69100
// begin ComMoveXY ( unit , _x , _y ) ;
69058: LD_VAR 0 1
69062: PPUSH
69063: LD_VAR 0 5
69067: PPUSH
69068: LD_VAR 0 7
69072: PPUSH
69073: CALL_OW 111
// result := [ _x , _y ] ;
69077: LD_ADDR_VAR 0 3
69081: PUSH
69082: LD_VAR 0 5
69086: PUSH
69087: LD_VAR 0 7
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: ST_TO_ADDR
// exit ;
69096: POP
69097: POP
69098: GO 69104
// end ; end ;
69100: GO 68944
69102: POP
69103: POP
// end ;
69104: LD_VAR 0 3
69108: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69109: LD_INT 0
69111: PPUSH
69112: PPUSH
69113: PPUSH
// result := 0 ;
69114: LD_ADDR_VAR 0 3
69118: PUSH
69119: LD_INT 0
69121: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69122: LD_VAR 0 1
69126: PUSH
69127: LD_INT 0
69129: LESS
69130: PUSH
69131: LD_VAR 0 1
69135: PUSH
69136: LD_INT 8
69138: GREATER
69139: OR
69140: PUSH
69141: LD_VAR 0 2
69145: PUSH
69146: LD_INT 0
69148: LESS
69149: OR
69150: PUSH
69151: LD_VAR 0 2
69155: PUSH
69156: LD_INT 8
69158: GREATER
69159: OR
69160: IFFALSE 69164
// exit ;
69162: GO 69239
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69164: LD_ADDR_VAR 0 4
69168: PUSH
69169: LD_INT 22
69171: PUSH
69172: LD_VAR 0 2
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PPUSH
69181: CALL_OW 69
69185: PUSH
69186: FOR_IN
69187: IFFALSE 69237
// begin un := UnitShoot ( i ) ;
69189: LD_ADDR_VAR 0 5
69193: PUSH
69194: LD_VAR 0 4
69198: PPUSH
69199: CALL_OW 504
69203: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69204: LD_VAR 0 5
69208: PPUSH
69209: CALL_OW 255
69213: PUSH
69214: LD_VAR 0 1
69218: EQUAL
69219: IFFALSE 69235
// begin result := un ;
69221: LD_ADDR_VAR 0 3
69225: PUSH
69226: LD_VAR 0 5
69230: ST_TO_ADDR
// exit ;
69231: POP
69232: POP
69233: GO 69239
// end ; end ;
69235: GO 69186
69237: POP
69238: POP
// end ;
69239: LD_VAR 0 3
69243: RET
// export function GetCargoBay ( units ) ; begin
69244: LD_INT 0
69246: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69247: LD_ADDR_VAR 0 2
69251: PUSH
69252: LD_VAR 0 1
69256: PPUSH
69257: LD_INT 2
69259: PUSH
69260: LD_INT 34
69262: PUSH
69263: LD_INT 12
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 34
69272: PUSH
69273: LD_INT 51
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 34
69282: PUSH
69283: LD_INT 32
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 34
69292: PUSH
69293: LD_INT 89
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: PPUSH
69307: CALL_OW 72
69311: ST_TO_ADDR
// end ;
69312: LD_VAR 0 2
69316: RET
// export function Negate ( value ) ; begin
69317: LD_INT 0
69319: PPUSH
// result := not value ;
69320: LD_ADDR_VAR 0 2
69324: PUSH
69325: LD_VAR 0 1
69329: NOT
69330: ST_TO_ADDR
// end ;
69331: LD_VAR 0 2
69335: RET
// export function Inc ( value ) ; begin
69336: LD_INT 0
69338: PPUSH
// result := value + 1 ;
69339: LD_ADDR_VAR 0 2
69343: PUSH
69344: LD_VAR 0 1
69348: PUSH
69349: LD_INT 1
69351: PLUS
69352: ST_TO_ADDR
// end ;
69353: LD_VAR 0 2
69357: RET
// export function Dec ( value ) ; begin
69358: LD_INT 0
69360: PPUSH
// result := value - 1 ;
69361: LD_ADDR_VAR 0 2
69365: PUSH
69366: LD_VAR 0 1
69370: PUSH
69371: LD_INT 1
69373: MINUS
69374: ST_TO_ADDR
// end ;
69375: LD_VAR 0 2
69379: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69380: LD_INT 0
69382: PPUSH
69383: PPUSH
69384: PPUSH
69385: PPUSH
69386: PPUSH
69387: PPUSH
69388: PPUSH
69389: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_VAR 0 2
69399: PPUSH
69400: CALL_OW 488
69404: NOT
69405: PUSH
69406: LD_VAR 0 3
69410: PPUSH
69411: LD_VAR 0 4
69415: PPUSH
69416: CALL_OW 488
69420: NOT
69421: OR
69422: IFFALSE 69435
// begin result := - 1 ;
69424: LD_ADDR_VAR 0 5
69428: PUSH
69429: LD_INT 1
69431: NEG
69432: ST_TO_ADDR
// exit ;
69433: GO 69670
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69435: LD_ADDR_VAR 0 12
69439: PUSH
69440: LD_VAR 0 1
69444: PPUSH
69445: LD_VAR 0 2
69449: PPUSH
69450: LD_VAR 0 3
69454: PPUSH
69455: LD_VAR 0 4
69459: PPUSH
69460: CALL 68520 0 4
69464: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69465: LD_ADDR_VAR 0 11
69469: PUSH
69470: LD_VAR 0 1
69474: PPUSH
69475: LD_VAR 0 2
69479: PPUSH
69480: LD_VAR 0 12
69484: PUSH
69485: LD_INT 1
69487: ARRAY
69488: PPUSH
69489: LD_VAR 0 12
69493: PUSH
69494: LD_INT 2
69496: ARRAY
69497: PPUSH
69498: CALL_OW 298
69502: ST_TO_ADDR
// distance := 9999 ;
69503: LD_ADDR_VAR 0 10
69507: PUSH
69508: LD_INT 9999
69510: ST_TO_ADDR
// for i := 0 to 5 do
69511: LD_ADDR_VAR 0 6
69515: PUSH
69516: DOUBLE
69517: LD_INT 0
69519: DEC
69520: ST_TO_ADDR
69521: LD_INT 5
69523: PUSH
69524: FOR_TO
69525: IFFALSE 69668
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69527: LD_ADDR_VAR 0 7
69531: PUSH
69532: LD_VAR 0 1
69536: PPUSH
69537: LD_VAR 0 6
69541: PPUSH
69542: LD_VAR 0 11
69546: PPUSH
69547: CALL_OW 272
69551: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69552: LD_ADDR_VAR 0 8
69556: PUSH
69557: LD_VAR 0 2
69561: PPUSH
69562: LD_VAR 0 6
69566: PPUSH
69567: LD_VAR 0 11
69571: PPUSH
69572: CALL_OW 273
69576: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69577: LD_VAR 0 7
69581: PPUSH
69582: LD_VAR 0 8
69586: PPUSH
69587: CALL_OW 488
69591: NOT
69592: IFFALSE 69596
// continue ;
69594: GO 69524
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69596: LD_ADDR_VAR 0 9
69600: PUSH
69601: LD_VAR 0 12
69605: PUSH
69606: LD_INT 1
69608: ARRAY
69609: PPUSH
69610: LD_VAR 0 12
69614: PUSH
69615: LD_INT 2
69617: ARRAY
69618: PPUSH
69619: LD_VAR 0 7
69623: PPUSH
69624: LD_VAR 0 8
69628: PPUSH
69629: CALL_OW 298
69633: ST_TO_ADDR
// if tmp < distance then
69634: LD_VAR 0 9
69638: PUSH
69639: LD_VAR 0 10
69643: LESS
69644: IFFALSE 69666
// begin result := i ;
69646: LD_ADDR_VAR 0 5
69650: PUSH
69651: LD_VAR 0 6
69655: ST_TO_ADDR
// distance := tmp ;
69656: LD_ADDR_VAR 0 10
69660: PUSH
69661: LD_VAR 0 9
69665: ST_TO_ADDR
// end ; end ;
69666: GO 69524
69668: POP
69669: POP
// end ;
69670: LD_VAR 0 5
69674: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69675: LD_INT 0
69677: PPUSH
69678: PPUSH
// if not driver or not IsInUnit ( driver ) then
69679: LD_VAR 0 1
69683: NOT
69684: PUSH
69685: LD_VAR 0 1
69689: PPUSH
69690: CALL_OW 310
69694: NOT
69695: OR
69696: IFFALSE 69700
// exit ;
69698: GO 69790
// vehicle := IsInUnit ( driver ) ;
69700: LD_ADDR_VAR 0 3
69704: PUSH
69705: LD_VAR 0 1
69709: PPUSH
69710: CALL_OW 310
69714: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69715: LD_VAR 0 1
69719: PPUSH
69720: LD_STRING \
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: LD_INT 0
69728: PUSH
69729: LD_INT 0
69731: PUSH
69732: LD_INT 0
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: PUSH
69750: LD_STRING E
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: LD_VAR 0 3
69763: PUSH
69764: LD_INT 0
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PPUSH
69786: CALL_OW 446
// end ;
69790: LD_VAR 0 2
69794: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69795: LD_INT 0
69797: PPUSH
69798: PPUSH
// if not driver or not IsInUnit ( driver ) then
69799: LD_VAR 0 1
69803: NOT
69804: PUSH
69805: LD_VAR 0 1
69809: PPUSH
69810: CALL_OW 310
69814: NOT
69815: OR
69816: IFFALSE 69820
// exit ;
69818: GO 69910
// vehicle := IsInUnit ( driver ) ;
69820: LD_ADDR_VAR 0 3
69824: PUSH
69825: LD_VAR 0 1
69829: PPUSH
69830: CALL_OW 310
69834: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69835: LD_VAR 0 1
69839: PPUSH
69840: LD_STRING \
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: LD_INT 0
69848: PUSH
69849: LD_INT 0
69851: PUSH
69852: LD_INT 0
69854: PUSH
69855: LD_INT 0
69857: PUSH
69858: LD_INT 0
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: PUSH
69870: LD_STRING E
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: LD_INT 0
69878: PUSH
69879: LD_VAR 0 3
69883: PUSH
69884: LD_INT 0
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: LD_INT 0
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PPUSH
69906: CALL_OW 447
// end ;
69910: LD_VAR 0 2
69914: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69915: LD_INT 0
69917: PPUSH
69918: PPUSH
69919: PPUSH
// tmp := [ ] ;
69920: LD_ADDR_VAR 0 5
69924: PUSH
69925: EMPTY
69926: ST_TO_ADDR
// for i in units do
69927: LD_ADDR_VAR 0 4
69931: PUSH
69932: LD_VAR 0 1
69936: PUSH
69937: FOR_IN
69938: IFFALSE 69976
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69940: LD_ADDR_VAR 0 5
69944: PUSH
69945: LD_VAR 0 5
69949: PPUSH
69950: LD_VAR 0 5
69954: PUSH
69955: LD_INT 1
69957: PLUS
69958: PPUSH
69959: LD_VAR 0 4
69963: PPUSH
69964: CALL_OW 256
69968: PPUSH
69969: CALL_OW 2
69973: ST_TO_ADDR
69974: GO 69937
69976: POP
69977: POP
// if not tmp then
69978: LD_VAR 0 5
69982: NOT
69983: IFFALSE 69987
// exit ;
69985: GO 70035
// if asc then
69987: LD_VAR 0 2
69991: IFFALSE 70015
// result := SortListByListAsc ( units , tmp ) else
69993: LD_ADDR_VAR 0 3
69997: PUSH
69998: LD_VAR 0 1
70002: PPUSH
70003: LD_VAR 0 5
70007: PPUSH
70008: CALL_OW 76
70012: ST_TO_ADDR
70013: GO 70035
// result := SortListByListDesc ( units , tmp ) ;
70015: LD_ADDR_VAR 0 3
70019: PUSH
70020: LD_VAR 0 1
70024: PPUSH
70025: LD_VAR 0 5
70029: PPUSH
70030: CALL_OW 77
70034: ST_TO_ADDR
// end ;
70035: LD_VAR 0 3
70039: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70040: LD_INT 0
70042: PPUSH
70043: PPUSH
// task := GetTaskList ( mech ) ;
70044: LD_ADDR_VAR 0 4
70048: PUSH
70049: LD_VAR 0 1
70053: PPUSH
70054: CALL_OW 437
70058: ST_TO_ADDR
// if not task then
70059: LD_VAR 0 4
70063: NOT
70064: IFFALSE 70068
// exit ;
70066: GO 70110
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70068: LD_ADDR_VAR 0 3
70072: PUSH
70073: LD_VAR 0 4
70077: PUSH
70078: LD_INT 1
70080: ARRAY
70081: PUSH
70082: LD_INT 1
70084: ARRAY
70085: PUSH
70086: LD_STRING r
70088: EQUAL
70089: PUSH
70090: LD_VAR 0 4
70094: PUSH
70095: LD_INT 1
70097: ARRAY
70098: PUSH
70099: LD_INT 4
70101: ARRAY
70102: PUSH
70103: LD_VAR 0 2
70107: EQUAL
70108: AND
70109: ST_TO_ADDR
// end ;
70110: LD_VAR 0 3
70114: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70115: LD_INT 0
70117: PPUSH
// SetDir ( unit , d ) ;
70118: LD_VAR 0 1
70122: PPUSH
70123: LD_VAR 0 4
70127: PPUSH
70128: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70132: LD_VAR 0 1
70136: PPUSH
70137: LD_VAR 0 2
70141: PPUSH
70142: LD_VAR 0 3
70146: PPUSH
70147: LD_VAR 0 5
70151: PPUSH
70152: CALL_OW 48
// end ;
70156: LD_VAR 0 6
70160: RET
// export function ToNaturalNumber ( number ) ; begin
70161: LD_INT 0
70163: PPUSH
// result := number div 1 ;
70164: LD_ADDR_VAR 0 2
70168: PUSH
70169: LD_VAR 0 1
70173: PUSH
70174: LD_INT 1
70176: DIV
70177: ST_TO_ADDR
// if number < 0 then
70178: LD_VAR 0 1
70182: PUSH
70183: LD_INT 0
70185: LESS
70186: IFFALSE 70196
// result := 0 ;
70188: LD_ADDR_VAR 0 2
70192: PUSH
70193: LD_INT 0
70195: ST_TO_ADDR
// end ;
70196: LD_VAR 0 2
70200: RET
// export function SortByClass ( units , class ) ; var un ; begin
70201: LD_INT 0
70203: PPUSH
70204: PPUSH
// if not units or not class then
70205: LD_VAR 0 1
70209: NOT
70210: PUSH
70211: LD_VAR 0 2
70215: NOT
70216: OR
70217: IFFALSE 70221
// exit ;
70219: GO 70316
// result := [ ] ;
70221: LD_ADDR_VAR 0 3
70225: PUSH
70226: EMPTY
70227: ST_TO_ADDR
// for un in units do
70228: LD_ADDR_VAR 0 4
70232: PUSH
70233: LD_VAR 0 1
70237: PUSH
70238: FOR_IN
70239: IFFALSE 70314
// if GetClass ( un ) = class then
70241: LD_VAR 0 4
70245: PPUSH
70246: CALL_OW 257
70250: PUSH
70251: LD_VAR 0 2
70255: EQUAL
70256: IFFALSE 70283
// result := Insert ( result , 1 , un ) else
70258: LD_ADDR_VAR 0 3
70262: PUSH
70263: LD_VAR 0 3
70267: PPUSH
70268: LD_INT 1
70270: PPUSH
70271: LD_VAR 0 4
70275: PPUSH
70276: CALL_OW 2
70280: ST_TO_ADDR
70281: GO 70312
// result := Replace ( result , result + 1 , un ) ;
70283: LD_ADDR_VAR 0 3
70287: PUSH
70288: LD_VAR 0 3
70292: PPUSH
70293: LD_VAR 0 3
70297: PUSH
70298: LD_INT 1
70300: PLUS
70301: PPUSH
70302: LD_VAR 0 4
70306: PPUSH
70307: CALL_OW 1
70311: ST_TO_ADDR
70312: GO 70238
70314: POP
70315: POP
// end ;
70316: LD_VAR 0 3
70320: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70321: LD_INT 0
70323: PPUSH
70324: PPUSH
70325: PPUSH
70326: PPUSH
70327: PPUSH
70328: PPUSH
70329: PPUSH
// result := [ ] ;
70330: LD_ADDR_VAR 0 4
70334: PUSH
70335: EMPTY
70336: ST_TO_ADDR
// if x - r < 0 then
70337: LD_VAR 0 1
70341: PUSH
70342: LD_VAR 0 3
70346: MINUS
70347: PUSH
70348: LD_INT 0
70350: LESS
70351: IFFALSE 70363
// min_x := 0 else
70353: LD_ADDR_VAR 0 8
70357: PUSH
70358: LD_INT 0
70360: ST_TO_ADDR
70361: GO 70379
// min_x := x - r ;
70363: LD_ADDR_VAR 0 8
70367: PUSH
70368: LD_VAR 0 1
70372: PUSH
70373: LD_VAR 0 3
70377: MINUS
70378: ST_TO_ADDR
// if y - r < 0 then
70379: LD_VAR 0 2
70383: PUSH
70384: LD_VAR 0 3
70388: MINUS
70389: PUSH
70390: LD_INT 0
70392: LESS
70393: IFFALSE 70405
// min_y := 0 else
70395: LD_ADDR_VAR 0 7
70399: PUSH
70400: LD_INT 0
70402: ST_TO_ADDR
70403: GO 70421
// min_y := y - r ;
70405: LD_ADDR_VAR 0 7
70409: PUSH
70410: LD_VAR 0 2
70414: PUSH
70415: LD_VAR 0 3
70419: MINUS
70420: ST_TO_ADDR
// max_x := x + r ;
70421: LD_ADDR_VAR 0 9
70425: PUSH
70426: LD_VAR 0 1
70430: PUSH
70431: LD_VAR 0 3
70435: PLUS
70436: ST_TO_ADDR
// max_y := y + r ;
70437: LD_ADDR_VAR 0 10
70441: PUSH
70442: LD_VAR 0 2
70446: PUSH
70447: LD_VAR 0 3
70451: PLUS
70452: ST_TO_ADDR
// for _x = min_x to max_x do
70453: LD_ADDR_VAR 0 5
70457: PUSH
70458: DOUBLE
70459: LD_VAR 0 8
70463: DEC
70464: ST_TO_ADDR
70465: LD_VAR 0 9
70469: PUSH
70470: FOR_TO
70471: IFFALSE 70572
// for _y = min_y to max_y do
70473: LD_ADDR_VAR 0 6
70477: PUSH
70478: DOUBLE
70479: LD_VAR 0 7
70483: DEC
70484: ST_TO_ADDR
70485: LD_VAR 0 10
70489: PUSH
70490: FOR_TO
70491: IFFALSE 70568
// begin if not ValidHex ( _x , _y ) then
70493: LD_VAR 0 5
70497: PPUSH
70498: LD_VAR 0 6
70502: PPUSH
70503: CALL_OW 488
70507: NOT
70508: IFFALSE 70512
// continue ;
70510: GO 70490
// if GetResourceTypeXY ( _x , _y ) then
70512: LD_VAR 0 5
70516: PPUSH
70517: LD_VAR 0 6
70521: PPUSH
70522: CALL_OW 283
70526: IFFALSE 70566
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70528: LD_ADDR_VAR 0 4
70532: PUSH
70533: LD_VAR 0 4
70537: PPUSH
70538: LD_VAR 0 4
70542: PUSH
70543: LD_INT 1
70545: PLUS
70546: PPUSH
70547: LD_VAR 0 5
70551: PUSH
70552: LD_VAR 0 6
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PPUSH
70561: CALL_OW 1
70565: ST_TO_ADDR
// end ;
70566: GO 70490
70568: POP
70569: POP
70570: GO 70470
70572: POP
70573: POP
// end ;
70574: LD_VAR 0 4
70578: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70579: LD_INT 0
70581: PPUSH
70582: PPUSH
70583: PPUSH
70584: PPUSH
70585: PPUSH
70586: PPUSH
70587: PPUSH
70588: PPUSH
// if not units then
70589: LD_VAR 0 1
70593: NOT
70594: IFFALSE 70598
// exit ;
70596: GO 71122
// result := UnitFilter ( units , [ f_ok ] ) ;
70598: LD_ADDR_VAR 0 3
70602: PUSH
70603: LD_VAR 0 1
70607: PPUSH
70608: LD_INT 50
70610: PUSH
70611: EMPTY
70612: LIST
70613: PPUSH
70614: CALL_OW 72
70618: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70619: LD_ADDR_VAR 0 8
70623: PUSH
70624: LD_VAR 0 1
70628: PUSH
70629: LD_INT 1
70631: ARRAY
70632: PPUSH
70633: CALL_OW 255
70637: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70638: LD_ADDR_VAR 0 10
70642: PUSH
70643: LD_INT 29
70645: PUSH
70646: LD_INT 91
70648: PUSH
70649: LD_INT 49
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: LIST
70656: ST_TO_ADDR
// if not result then
70657: LD_VAR 0 3
70661: NOT
70662: IFFALSE 70666
// exit ;
70664: GO 71122
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70666: LD_ADDR_VAR 0 5
70670: PUSH
70671: LD_INT 81
70673: PUSH
70674: LD_VAR 0 8
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PPUSH
70683: CALL_OW 69
70687: ST_TO_ADDR
// for i in result do
70688: LD_ADDR_VAR 0 4
70692: PUSH
70693: LD_VAR 0 3
70697: PUSH
70698: FOR_IN
70699: IFFALSE 71120
// begin tag := GetTag ( i ) + 1 ;
70701: LD_ADDR_VAR 0 9
70705: PUSH
70706: LD_VAR 0 4
70710: PPUSH
70711: CALL_OW 110
70715: PUSH
70716: LD_INT 1
70718: PLUS
70719: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70720: LD_ADDR_VAR 0 7
70724: PUSH
70725: LD_VAR 0 4
70729: PPUSH
70730: CALL_OW 250
70734: PPUSH
70735: LD_VAR 0 4
70739: PPUSH
70740: CALL_OW 251
70744: PPUSH
70745: LD_INT 6
70747: PPUSH
70748: CALL 70321 0 3
70752: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70753: LD_VAR 0 4
70757: PPUSH
70758: CALL_OW 247
70762: PUSH
70763: LD_INT 2
70765: EQUAL
70766: PUSH
70767: LD_VAR 0 7
70771: AND
70772: PUSH
70773: LD_VAR 0 4
70777: PPUSH
70778: CALL_OW 264
70782: PUSH
70783: LD_VAR 0 10
70787: IN
70788: NOT
70789: AND
70790: IFFALSE 70829
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70792: LD_VAR 0 4
70796: PPUSH
70797: LD_VAR 0 7
70801: PUSH
70802: LD_INT 1
70804: ARRAY
70805: PUSH
70806: LD_INT 1
70808: ARRAY
70809: PPUSH
70810: LD_VAR 0 7
70814: PUSH
70815: LD_INT 1
70817: ARRAY
70818: PUSH
70819: LD_INT 2
70821: ARRAY
70822: PPUSH
70823: CALL_OW 116
70827: GO 71118
// if path > tag then
70829: LD_VAR 0 2
70833: PUSH
70834: LD_VAR 0 9
70838: GREATER
70839: IFFALSE 71047
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70841: LD_ADDR_VAR 0 6
70845: PUSH
70846: LD_VAR 0 5
70850: PPUSH
70851: LD_INT 91
70853: PUSH
70854: LD_VAR 0 4
70858: PUSH
70859: LD_INT 8
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: LIST
70866: PPUSH
70867: CALL_OW 72
70871: ST_TO_ADDR
// if nearEnemy then
70872: LD_VAR 0 6
70876: IFFALSE 70945
// begin if GetWeapon ( i ) = ru_time_lapser then
70878: LD_VAR 0 4
70882: PPUSH
70883: CALL_OW 264
70887: PUSH
70888: LD_INT 49
70890: EQUAL
70891: IFFALSE 70919
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70893: LD_VAR 0 4
70897: PPUSH
70898: LD_VAR 0 6
70902: PPUSH
70903: LD_VAR 0 4
70907: PPUSH
70908: CALL_OW 74
70912: PPUSH
70913: CALL_OW 112
70917: GO 70943
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70919: LD_VAR 0 4
70923: PPUSH
70924: LD_VAR 0 6
70928: PPUSH
70929: LD_VAR 0 4
70933: PPUSH
70934: CALL_OW 74
70938: PPUSH
70939: CALL_OW 115
// end else
70943: GO 71045
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70945: LD_VAR 0 4
70949: PPUSH
70950: LD_VAR 0 2
70954: PUSH
70955: LD_VAR 0 9
70959: ARRAY
70960: PUSH
70961: LD_INT 1
70963: ARRAY
70964: PPUSH
70965: LD_VAR 0 2
70969: PUSH
70970: LD_VAR 0 9
70974: ARRAY
70975: PUSH
70976: LD_INT 2
70978: ARRAY
70979: PPUSH
70980: CALL_OW 297
70984: PUSH
70985: LD_INT 6
70987: GREATER
70988: IFFALSE 71031
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70990: LD_VAR 0 4
70994: PPUSH
70995: LD_VAR 0 2
70999: PUSH
71000: LD_VAR 0 9
71004: ARRAY
71005: PUSH
71006: LD_INT 1
71008: ARRAY
71009: PPUSH
71010: LD_VAR 0 2
71014: PUSH
71015: LD_VAR 0 9
71019: ARRAY
71020: PUSH
71021: LD_INT 2
71023: ARRAY
71024: PPUSH
71025: CALL_OW 114
71029: GO 71045
// SetTag ( i , tag ) ;
71031: LD_VAR 0 4
71035: PPUSH
71036: LD_VAR 0 9
71040: PPUSH
71041: CALL_OW 109
// end else
71045: GO 71118
// if enemy then
71047: LD_VAR 0 5
71051: IFFALSE 71118
// begin if GetWeapon ( i ) = ru_time_lapser then
71053: LD_VAR 0 4
71057: PPUSH
71058: CALL_OW 264
71062: PUSH
71063: LD_INT 49
71065: EQUAL
71066: IFFALSE 71094
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71068: LD_VAR 0 4
71072: PPUSH
71073: LD_VAR 0 5
71077: PPUSH
71078: LD_VAR 0 4
71082: PPUSH
71083: CALL_OW 74
71087: PPUSH
71088: CALL_OW 112
71092: GO 71118
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71094: LD_VAR 0 4
71098: PPUSH
71099: LD_VAR 0 5
71103: PPUSH
71104: LD_VAR 0 4
71108: PPUSH
71109: CALL_OW 74
71113: PPUSH
71114: CALL_OW 115
// end ; end ;
71118: GO 70698
71120: POP
71121: POP
// end ;
71122: LD_VAR 0 3
71126: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71127: LD_INT 0
71129: PPUSH
71130: PPUSH
71131: PPUSH
// if not unit or IsInUnit ( unit ) then
71132: LD_VAR 0 1
71136: NOT
71137: PUSH
71138: LD_VAR 0 1
71142: PPUSH
71143: CALL_OW 310
71147: OR
71148: IFFALSE 71152
// exit ;
71150: GO 71243
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71152: LD_ADDR_VAR 0 4
71156: PUSH
71157: LD_VAR 0 1
71161: PPUSH
71162: CALL_OW 250
71166: PPUSH
71167: LD_VAR 0 2
71171: PPUSH
71172: LD_INT 1
71174: PPUSH
71175: CALL_OW 272
71179: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71180: LD_ADDR_VAR 0 5
71184: PUSH
71185: LD_VAR 0 1
71189: PPUSH
71190: CALL_OW 251
71194: PPUSH
71195: LD_VAR 0 2
71199: PPUSH
71200: LD_INT 1
71202: PPUSH
71203: CALL_OW 273
71207: ST_TO_ADDR
// if ValidHex ( x , y ) then
71208: LD_VAR 0 4
71212: PPUSH
71213: LD_VAR 0 5
71217: PPUSH
71218: CALL_OW 488
71222: IFFALSE 71243
// ComTurnXY ( unit , x , y ) ;
71224: LD_VAR 0 1
71228: PPUSH
71229: LD_VAR 0 4
71233: PPUSH
71234: LD_VAR 0 5
71238: PPUSH
71239: CALL_OW 118
// end ;
71243: LD_VAR 0 3
71247: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71248: LD_INT 0
71250: PPUSH
71251: PPUSH
// result := false ;
71252: LD_ADDR_VAR 0 3
71256: PUSH
71257: LD_INT 0
71259: ST_TO_ADDR
// if not units then
71260: LD_VAR 0 2
71264: NOT
71265: IFFALSE 71269
// exit ;
71267: GO 71314
// for i in units do
71269: LD_ADDR_VAR 0 4
71273: PUSH
71274: LD_VAR 0 2
71278: PUSH
71279: FOR_IN
71280: IFFALSE 71312
// if See ( side , i ) then
71282: LD_VAR 0 1
71286: PPUSH
71287: LD_VAR 0 4
71291: PPUSH
71292: CALL_OW 292
71296: IFFALSE 71310
// begin result := true ;
71298: LD_ADDR_VAR 0 3
71302: PUSH
71303: LD_INT 1
71305: ST_TO_ADDR
// exit ;
71306: POP
71307: POP
71308: GO 71314
// end ;
71310: GO 71279
71312: POP
71313: POP
// end ;
71314: LD_VAR 0 3
71318: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71319: LD_INT 0
71321: PPUSH
71322: PPUSH
71323: PPUSH
71324: PPUSH
// if not unit or not points then
71325: LD_VAR 0 1
71329: NOT
71330: PUSH
71331: LD_VAR 0 2
71335: NOT
71336: OR
71337: IFFALSE 71341
// exit ;
71339: GO 71431
// dist := 99999 ;
71341: LD_ADDR_VAR 0 5
71345: PUSH
71346: LD_INT 99999
71348: ST_TO_ADDR
// for i in points do
71349: LD_ADDR_VAR 0 4
71353: PUSH
71354: LD_VAR 0 2
71358: PUSH
71359: FOR_IN
71360: IFFALSE 71429
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71362: LD_ADDR_VAR 0 6
71366: PUSH
71367: LD_VAR 0 1
71371: PPUSH
71372: LD_VAR 0 4
71376: PUSH
71377: LD_INT 1
71379: ARRAY
71380: PPUSH
71381: LD_VAR 0 4
71385: PUSH
71386: LD_INT 2
71388: ARRAY
71389: PPUSH
71390: CALL_OW 297
71394: ST_TO_ADDR
// if tmpDist < dist then
71395: LD_VAR 0 6
71399: PUSH
71400: LD_VAR 0 5
71404: LESS
71405: IFFALSE 71427
// begin result := i ;
71407: LD_ADDR_VAR 0 3
71411: PUSH
71412: LD_VAR 0 4
71416: ST_TO_ADDR
// dist := tmpDist ;
71417: LD_ADDR_VAR 0 5
71421: PUSH
71422: LD_VAR 0 6
71426: ST_TO_ADDR
// end ; end ;
71427: GO 71359
71429: POP
71430: POP
// end ;
71431: LD_VAR 0 3
71435: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71436: LD_INT 0
71438: PPUSH
// uc_side := side ;
71439: LD_ADDR_OWVAR 20
71443: PUSH
71444: LD_VAR 0 1
71448: ST_TO_ADDR
// uc_nation := 3 ;
71449: LD_ADDR_OWVAR 21
71453: PUSH
71454: LD_INT 3
71456: ST_TO_ADDR
// vc_chassis := 25 ;
71457: LD_ADDR_OWVAR 37
71461: PUSH
71462: LD_INT 25
71464: ST_TO_ADDR
// vc_engine := engine_siberite ;
71465: LD_ADDR_OWVAR 39
71469: PUSH
71470: LD_INT 3
71472: ST_TO_ADDR
// vc_control := control_computer ;
71473: LD_ADDR_OWVAR 38
71477: PUSH
71478: LD_INT 3
71480: ST_TO_ADDR
// vc_weapon := 59 ;
71481: LD_ADDR_OWVAR 40
71485: PUSH
71486: LD_INT 59
71488: ST_TO_ADDR
// result := CreateVehicle ;
71489: LD_ADDR_VAR 0 5
71493: PUSH
71494: CALL_OW 45
71498: ST_TO_ADDR
// SetDir ( result , d ) ;
71499: LD_VAR 0 5
71503: PPUSH
71504: LD_VAR 0 4
71508: PPUSH
71509: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71513: LD_VAR 0 5
71517: PPUSH
71518: LD_VAR 0 2
71522: PPUSH
71523: LD_VAR 0 3
71527: PPUSH
71528: LD_INT 0
71530: PPUSH
71531: CALL_OW 48
// end ;
71535: LD_VAR 0 5
71539: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71540: LD_INT 0
71542: PPUSH
71543: PPUSH
71544: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71545: LD_ADDR_VAR 0 2
71549: PUSH
71550: LD_INT 0
71552: PUSH
71553: LD_INT 0
71555: PUSH
71556: LD_INT 0
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71568: LD_VAR 0 1
71572: NOT
71573: PUSH
71574: LD_VAR 0 1
71578: PPUSH
71579: CALL_OW 264
71583: PUSH
71584: LD_INT 12
71586: PUSH
71587: LD_INT 51
71589: PUSH
71590: LD_INT 32
71592: PUSH
71593: LD_INT 89
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: IN
71602: NOT
71603: OR
71604: IFFALSE 71608
// exit ;
71606: GO 71706
// for i := 1 to 3 do
71608: LD_ADDR_VAR 0 3
71612: PUSH
71613: DOUBLE
71614: LD_INT 1
71616: DEC
71617: ST_TO_ADDR
71618: LD_INT 3
71620: PUSH
71621: FOR_TO
71622: IFFALSE 71704
// begin tmp := GetCargo ( cargo , i ) ;
71624: LD_ADDR_VAR 0 4
71628: PUSH
71629: LD_VAR 0 1
71633: PPUSH
71634: LD_VAR 0 3
71638: PPUSH
71639: CALL_OW 289
71643: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71644: LD_ADDR_VAR 0 2
71648: PUSH
71649: LD_VAR 0 2
71653: PPUSH
71654: LD_VAR 0 3
71658: PPUSH
71659: LD_VAR 0 4
71663: PPUSH
71664: CALL_OW 1
71668: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71669: LD_ADDR_VAR 0 2
71673: PUSH
71674: LD_VAR 0 2
71678: PPUSH
71679: LD_INT 4
71681: PPUSH
71682: LD_VAR 0 2
71686: PUSH
71687: LD_INT 4
71689: ARRAY
71690: PUSH
71691: LD_VAR 0 4
71695: PLUS
71696: PPUSH
71697: CALL_OW 1
71701: ST_TO_ADDR
// end ;
71702: GO 71621
71704: POP
71705: POP
// end ;
71706: LD_VAR 0 2
71710: RET
// export function Length ( array ) ; begin
71711: LD_INT 0
71713: PPUSH
// result := array + 0 ;
71714: LD_ADDR_VAR 0 2
71718: PUSH
71719: LD_VAR 0 1
71723: PUSH
71724: LD_INT 0
71726: PLUS
71727: ST_TO_ADDR
// end ;
71728: LD_VAR 0 2
71732: RET
// export function PrepareArray ( array ) ; begin
71733: LD_INT 0
71735: PPUSH
// result := array diff 0 ;
71736: LD_ADDR_VAR 0 2
71740: PUSH
71741: LD_VAR 0 1
71745: PUSH
71746: LD_INT 0
71748: DIFF
71749: ST_TO_ADDR
// if not result [ 1 ] then
71750: LD_VAR 0 2
71754: PUSH
71755: LD_INT 1
71757: ARRAY
71758: NOT
71759: IFFALSE 71779
// result := Delete ( result , 1 ) ;
71761: LD_ADDR_VAR 0 2
71765: PUSH
71766: LD_VAR 0 2
71770: PPUSH
71771: LD_INT 1
71773: PPUSH
71774: CALL_OW 3
71778: ST_TO_ADDR
// end ;
71779: LD_VAR 0 2
71783: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71784: LD_INT 0
71786: PPUSH
71787: PPUSH
71788: PPUSH
71789: PPUSH
// sibRocketRange := 25 ;
71790: LD_ADDR_VAR 0 6
71794: PUSH
71795: LD_INT 25
71797: ST_TO_ADDR
// result := false ;
71798: LD_ADDR_VAR 0 4
71802: PUSH
71803: LD_INT 0
71805: ST_TO_ADDR
// for i := 0 to 5 do
71806: LD_ADDR_VAR 0 5
71810: PUSH
71811: DOUBLE
71812: LD_INT 0
71814: DEC
71815: ST_TO_ADDR
71816: LD_INT 5
71818: PUSH
71819: FOR_TO
71820: IFFALSE 71887
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71822: LD_VAR 0 1
71826: PPUSH
71827: LD_VAR 0 5
71831: PPUSH
71832: LD_VAR 0 6
71836: PPUSH
71837: CALL_OW 272
71841: PPUSH
71842: LD_VAR 0 2
71846: PPUSH
71847: LD_VAR 0 5
71851: PPUSH
71852: LD_VAR 0 6
71856: PPUSH
71857: CALL_OW 273
71861: PPUSH
71862: LD_VAR 0 3
71866: PPUSH
71867: CALL_OW 309
71871: IFFALSE 71885
// begin result := true ;
71873: LD_ADDR_VAR 0 4
71877: PUSH
71878: LD_INT 1
71880: ST_TO_ADDR
// exit ;
71881: POP
71882: POP
71883: GO 71889
// end ;
71885: GO 71819
71887: POP
71888: POP
// end ;
71889: LD_VAR 0 4
71893: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71894: LD_INT 0
71896: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71897: LD_VAR 0 1
71901: PPUSH
71902: LD_VAR 0 2
71906: PPUSH
71907: LD_INT 0
71909: PPUSH
71910: LD_INT 0
71912: PPUSH
71913: LD_INT 1
71915: PPUSH
71916: LD_INT 0
71918: PPUSH
71919: CALL_OW 587
// end ; end_of_file
71923: LD_VAR 0 3
71927: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71928: LD_VAR 0 1
71932: PPUSH
71933: LD_VAR 0 2
71937: PPUSH
71938: LD_VAR 0 3
71942: PPUSH
71943: LD_VAR 0 4
71947: PPUSH
71948: LD_VAR 0 5
71952: PPUSH
71953: LD_VAR 0 6
71957: PPUSH
71958: CALL 10416 0 6
// end ;
71962: PPOPN 6
71964: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71965: LD_INT 0
71967: PPUSH
// begin if not units then
71968: LD_VAR 0 1
71972: NOT
71973: IFFALSE 71977
// exit ;
71975: GO 71977
// end ;
71977: PPOPN 7
71979: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71980: CALL 10320 0 0
// end ;
71984: PPOPN 1
71986: END
