// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 237 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 649 0 1
// PrepareRussian ;
  19: CALL 2254 0 0
// PrepareArabian ;
  23: CALL 1242 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5954 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape , activeInvincible ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// activeInvincible := true ;
 224: LD_ADDR_EXP 17
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export tEscape ; function InitTag ; begin
 237: LD_INT 0
 239: PPUSH
// tEscape := 10 ;
 240: LD_ADDR_EXP 18
 244: PUSH
 245: LD_INT 10
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 1
 252: RET
// every 0 0$1 trigger debug do var i ;
 253: LD_EXP 1
 257: IFFALSE 341
 259: GO 261
 261: DISABLE
 262: LD_INT 0
 264: PPUSH
// begin enable ;
 265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 266: LD_ADDR_VAR 0 1
 270: PUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: LD_INT 21
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 339
// if GetLives ( i ) < 1000 then
 310: LD_VAR 0 1
 314: PPUSH
 315: CALL_OW 256
 319: PUSH
 320: LD_INT 1000
 322: LESS
 323: IFFALSE 337
// SetLives ( i , 1000 ) ;
 325: LD_VAR 0 1
 329: PPUSH
 330: LD_INT 1000
 332: PPUSH
 333: CALL_OW 234
 337: GO 307
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function CreateNature ( forest ) ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 653: LD_VAR 0 1
 657: PPUSH
 658: LD_INT 3
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: PPUSH
 682: CALL 512 0 2
// for i := 1 to 2 do
 686: LD_ADDR_VAR 0 3
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 2
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := 21 ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 21
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 1
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 2 do
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 2
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := 18 ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 18
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// for i := 1 to 2 do
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: DOUBLE
 798: LD_INT 1
 800: DEC
 801: ST_TO_ADDR
 802: LD_INT 2
 804: PUSH
 805: FOR_TO
 806: IFFALSE 843
// begin hc_class := 13 ;
 808: LD_ADDR_OWVAR 28
 812: PUSH
 813: LD_INT 13
 815: ST_TO_ADDR
// hc_gallery :=  ;
 816: LD_ADDR_OWVAR 33
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 824: CALL_OW 44
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: LD_INT 0
 836: PPUSH
 837: CALL_OW 49
// end ;
 841: GO 805
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 2
 849: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
 854: PPUSH
// if not observer or not unit then
 855: LD_VAR 0 1
 859: NOT
 860: PUSH
 861: LD_VAR 0 2
 865: NOT
 866: OR
 867: IFFALSE 871
// exit ;
 869: GO 919
// if not See ( GetSide ( observer ) , unit ) then
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: PPUSH
 881: LD_VAR 0 2
 885: PPUSH
 886: CALL_OW 292
 890: NOT
 891: IFFALSE 895
// exit ;
 893: GO 919
// result := GetDistUnits ( observer , unit ) < 12 ;
 895: LD_ADDR_VAR 0 3
 899: PUSH
 900: LD_VAR 0 1
 904: PPUSH
 905: LD_VAR 0 2
 909: PPUSH
 910: CALL_OW 296
 914: PUSH
 915: LD_INT 12
 917: LESS
 918: ST_TO_ADDR
// end ;
 919: LD_VAR 0 3
 923: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 924: LD_INT 0
 926: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 927: LD_VAR 0 2
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PPUSH
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 2
 943: ARRAY
 944: PPUSH
 945: CALL_OW 488
 949: PUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 2
 963: PUSH
 964: LD_INT 2
 966: ARRAY
 967: PPUSH
 968: CALL_OW 428
 972: PUSH
 973: LD_INT 0
 975: EQUAL
 976: AND
 977: IFFALSE 1011
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 979: LD_VAR 0 1
 983: PPUSH
 984: LD_VAR 0 2
 988: PUSH
 989: LD_INT 1
 991: ARRAY
 992: PPUSH
 993: LD_VAR 0 2
 997: PUSH
 998: LD_INT 2
1000: ARRAY
1001: PPUSH
1002: LD_VAR 0 3
1006: PPUSH
1007: CALL_OW 48
// end ;
1011: LD_VAR 0 4
1015: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1016: LD_INT 0
1018: PPUSH
1019: PPUSH
1020: PPUSH
1021: PPUSH
1022: PPUSH
// if not unit then
1023: LD_VAR 0 1
1027: NOT
1028: IFFALSE 1032
// exit ;
1030: GO 1237
// side := GetSide ( unit ) ;
1032: LD_ADDR_VAR 0 4
1036: PUSH
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 255
1046: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1047: LD_ADDR_VAR 0 5
1051: PUSH
1052: LD_INT 22
1054: PUSH
1055: LD_VAR 0 4
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 30
1066: PUSH
1067: LD_VAR 0 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: ST_TO_ADDR
// if not tmp then
1085: LD_VAR 0 5
1089: NOT
1090: IFFALSE 1094
// exit ;
1092: GO 1237
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1094: LD_ADDR_VAR 0 5
1098: PUSH
1099: LD_VAR 0 1
1103: PPUSH
1104: LD_VAR 0 5
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL 37287 0 4
1119: ST_TO_ADDR
// places := 1 ;
1120: LD_ADDR_VAR 0 7
1124: PUSH
1125: LD_INT 1
1127: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1128: LD_VAR 0 2
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 4
1141: PUSH
1142: LD_INT 5
1144: PUSH
1145: LD_INT 2
1147: PUSH
1148: LD_INT 3
1150: PUSH
1151: LD_INT 6
1153: PUSH
1154: LD_INT 7
1156: PUSH
1157: LD_INT 8
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: IN
1171: IFFALSE 1181
// places := 6 ;
1173: LD_ADDR_VAR 0 7
1177: PUSH
1178: LD_INT 6
1180: ST_TO_ADDR
// for i in tmp do
1181: LD_ADDR_VAR 0 6
1185: PUSH
1186: LD_VAR 0 5
1190: PUSH
1191: FOR_IN
1192: IFFALSE 1235
// begin if UnitsInside ( i ) - places <= 0 then
1194: LD_VAR 0 6
1198: PPUSH
1199: CALL_OW 313
1203: PUSH
1204: LD_VAR 0 7
1208: MINUS
1209: PUSH
1210: LD_INT 0
1212: LESSEQUAL
1213: IFFALSE 1219
// continue else
1215: GO 1191
1217: GO 1233
// begin result := i ;
1219: LD_ADDR_VAR 0 3
1223: PUSH
1224: LD_VAR 0 6
1228: ST_TO_ADDR
// exit ;
1229: POP
1230: POP
1231: GO 1237
// end ; end ;
1233: GO 1191
1235: POP
1236: POP
// end ; end_of_file
1237: LD_VAR 0 3
1241: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1242: LD_INT 0
1244: PPUSH
1245: PPUSH
// uc_side := 2 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// uc_nation := 2 ;
1254: LD_ADDR_OWVAR 21
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1262: LD_ADDR_EXP 19
1266: PUSH
1267: LD_STRING Heike
1269: PPUSH
1270: LD_EXP 1
1274: NOT
1275: PPUSH
1276: LD_EXP 2
1280: PPUSH
1281: CALL 31869 0 3
1285: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1286: LD_ADDR_EXP 22
1290: PUSH
1291: LD_STRING Ibrahim
1293: PPUSH
1294: LD_EXP 1
1298: NOT
1299: PPUSH
1300: LD_EXP 2
1304: PPUSH
1305: CALL 31869 0 3
1309: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1310: LD_ADDR_EXP 20
1314: PUSH
1315: LD_STRING Givi
1317: PPUSH
1318: LD_EXP 1
1322: NOT
1323: PPUSH
1324: LD_EXP 2
1328: PPUSH
1329: CALL 31869 0 3
1333: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1334: LD_ADDR_EXP 23
1338: PUSH
1339: LD_STRING Kamil
1341: PPUSH
1342: LD_EXP 1
1346: NOT
1347: PPUSH
1348: LD_EXP 2
1352: PPUSH
1353: CALL 31869 0 3
1357: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1358: LD_ADDR_EXP 24
1362: PUSH
1363: LD_STRING Kaia
1365: PPUSH
1366: LD_EXP 1
1370: NOT
1371: PPUSH
1372: LD_EXP 2
1376: PPUSH
1377: CALL 31869 0 3
1381: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1382: LD_ADDR_EXP 25
1386: PUSH
1387: LD_STRING Sophia
1389: PPUSH
1390: LD_EXP 1
1394: NOT
1395: PPUSH
1396: LD_EXP 2
1400: PPUSH
1401: CALL 31869 0 3
1405: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1406: LD_ADDR_EXP 26
1410: PUSH
1411: LD_STRING Markov
1413: PPUSH
1414: LD_EXP 1
1418: NOT
1419: PPUSH
1420: LD_EXP 2
1424: PPUSH
1425: CALL 31869 0 3
1429: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1430: LD_ADDR_EXP 29
1434: PUSH
1435: LD_STRING Aviradze
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 2
1448: PPUSH
1449: CALL 31869 0 3
1453: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1454: LD_ADDR_EXP 28
1458: PUSH
1459: LD_STRING Kurt
1461: PPUSH
1462: LD_EXP 1
1466: NOT
1467: PPUSH
1468: LD_EXP 2
1472: PPUSH
1473: CALL 31869 0 3
1477: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1478: LD_ADDR_EXP 21
1482: PUSH
1483: LD_STRING Mike
1485: PPUSH
1486: LD_EXP 1
1490: NOT
1491: PPUSH
1492: LD_EXP 2
1496: PPUSH
1497: CALL 31869 0 3
1501: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1502: LD_ADDR_EXP 30
1506: PUSH
1507: LD_STRING 04_1_others
1509: PPUSH
1510: CALL_OW 31
1514: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1515: LD_ADDR_EXP 32
1519: PUSH
1520: LD_STRING 04_1_apes
1522: PPUSH
1523: CALL_OW 31
1527: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1528: LD_ADDR_EXP 31
1532: PUSH
1533: LD_STRING 04_1_Vehicles
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// if debug then
1543: LD_EXP 1
1547: IFFALSE 1766
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_big_cargo_bay , 3 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1549: LD_ADDR_EXP 31
1553: PUSH
1554: LD_INT 13
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: LD_INT 27
1565: PUSH
1566: LD_INT 2
1568: PUSH
1569: LD_INT 1000
1571: PUSH
1572: LD_INT 0
1574: PUSH
1575: LD_INT 0
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 3
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 13
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: LD_INT 1
1603: PUSH
1604: LD_INT 25
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 1000
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 0
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 3
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 13
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 2
1650: PUSH
1651: LD_INT 1000
1653: PUSH
1654: LD_INT 0
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 1
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 13
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: LD_INT 1
1685: PUSH
1686: LD_INT 27
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 1000
1694: PUSH
1695: LD_INT 0
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 1
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 23
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: LD_INT 89
1729: PUSH
1730: LD_INT 3
1732: PUSH
1733: LD_INT 1000
1735: PUSH
1736: LD_INT 40
1738: PUSH
1739: LD_INT 40
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// uc_side := 5 ;
1766: LD_ADDR_OWVAR 20
1770: PUSH
1771: LD_INT 5
1773: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1774: LD_ADDR_EXP 27
1778: PUSH
1779: LD_STRING Abdul
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: LD_STRING 
1787: PPUSH
1788: CALL 31869 0 3
1792: ST_TO_ADDR
// end ;
1793: LD_VAR 0 1
1797: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , debug ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1798: LD_STRING 04_1_KaganCaptured
1800: PPUSH
1801: LD_EXP 1
1805: PPUSH
1806: CALL_OW 30
1810: PUSH
1811: LD_INT 22
1813: PUSH
1814: LD_INT 5
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: NOT
1826: AND
1827: PUSH
1828: LD_INT 124
1830: PPUSH
1831: LD_INT 26
1833: PPUSH
1834: CALL_OW 428
1838: PUSH
1839: LD_INT 0
1841: EQUAL
1842: PUSH
1843: LD_INT 124
1845: PPUSH
1846: LD_INT 26
1848: PPUSH
1849: CALL_OW 428
1853: PPUSH
1854: CALL_OW 255
1858: PUSH
1859: LD_INT 2
1861: EQUAL
1862: XOR
1863: AND
1864: IFFALSE 2251
1866: GO 1868
1868: DISABLE
1869: LD_INT 0
1871: PPUSH
1872: PPUSH
// begin enable ;
1873: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1874: LD_EXP 34
1878: NOT
1879: PUSH
1880: LD_EXP 34
1884: PUSH
1885: LD_INT 4
1887: GREATER
1888: OR
1889: IFFALSE 1899
// cargoCounter := 1 ;
1891: LD_ADDR_EXP 34
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1899: LD_ADDR_VAR 0 2
1903: PUSH
1904: LD_INT 142
1906: PUSH
1907: LD_INT 15
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 129
1916: PUSH
1917: LD_INT 11
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 138
1926: PUSH
1927: LD_INT 9
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 133
1936: PUSH
1937: LD_INT 10
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
// uc_side := 5 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 5
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1966: LD_INT 5
1968: PPUSH
1969: LD_INT 2
1971: PPUSH
1972: LD_INT 13
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: LD_INT 1
1980: PPUSH
1981: LD_INT 32
1983: PPUSH
1984: LD_INT 70
1986: PPUSH
1987: CALL 344 0 7
// veh := CreateVehicle ;
1991: LD_ADDR_VAR 0 1
1995: PUSH
1996: CALL_OW 45
2000: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2001: LD_VAR 0 1
2005: PPUSH
2006: LD_INT 3
2008: PPUSH
2009: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2013: LD_VAR 0 1
2017: PPUSH
2018: LD_INT 8
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// if not cargoDriver then
2028: LD_EXP 33
2032: NOT
2033: IFFALSE 2058
// begin PrepareHuman ( false , 1 , 3 ) ;
2035: LD_INT 0
2037: PPUSH
2038: LD_INT 1
2040: PPUSH
2041: LD_INT 3
2043: PPUSH
2044: CALL_OW 380
// cargoDriver := CreateHuman ;
2048: LD_ADDR_EXP 33
2052: PUSH
2053: CALL_OW 44
2057: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2058: LD_EXP 33
2062: PPUSH
2063: LD_VAR 0 1
2067: PPUSH
2068: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: LD_INT 100
2082: PPUSH
2083: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2087: LD_VAR 0 1
2091: PPUSH
2092: LD_VAR 0 2
2096: PUSH
2097: LD_EXP 34
2101: ARRAY
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_VAR 0 2
2111: PUSH
2112: LD_EXP 34
2116: ARRAY
2117: PUSH
2118: LD_INT 2
2120: ARRAY
2121: PPUSH
2122: CALL_OW 111
// AddComUnload ( veh ) ;
2126: LD_VAR 0 1
2130: PPUSH
2131: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2135: LD_VAR 0 1
2139: PPUSH
2140: LD_INT 133
2142: PPUSH
2143: LD_INT 2
2145: PPUSH
2146: CALL_OW 171
// wait ( 0 0$5 ) ;
2150: LD_INT 175
2152: PPUSH
2153: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2157: LD_INT 35
2159: PPUSH
2160: CALL_OW 67
// if not HasTask ( veh ) then
2164: LD_VAR 0 1
2168: PPUSH
2169: CALL_OW 314
2173: NOT
2174: IFFALSE 2191
// ComMoveXY ( veh , 133 , 2 ) ;
2176: LD_VAR 0 1
2180: PPUSH
2181: LD_INT 133
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2191: LD_VAR 0 1
2195: PPUSH
2196: LD_INT 133
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 307
2206: PUSH
2207: LD_VAR 0 1
2211: PPUSH
2212: LD_INT 8
2214: PPUSH
2215: CALL_OW 308
2219: OR
2220: IFFALSE 2157
// RemoveUnit ( cargoDriver ) ;
2222: LD_EXP 33
2226: PPUSH
2227: CALL_OW 64
// RemoveUnit ( veh ) ;
2231: LD_VAR 0 1
2235: PPUSH
2236: CALL_OW 64
// if tick >= 20 20$00 then
2240: LD_OWVAR 1
2244: PUSH
2245: LD_INT 42000
2247: GREATEREQUAL
2248: IFFALSE 2251
// disable ;
2250: DISABLE
// end ; end_of_file
2251: PPOPN 2
2253: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2254: LD_INT 0
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
2262: PPUSH
2263: PPUSH
2264: PPUSH
// uc_side := 3 ;
2265: LD_ADDR_OWVAR 20
2269: PUSH
2270: LD_INT 3
2272: ST_TO_ADDR
// uc_nation := 3 ;
2273: LD_ADDR_OWVAR 21
2277: PUSH
2278: LD_INT 3
2280: ST_TO_ADDR
// ruForce := [ ] ;
2281: LD_ADDR_EXP 38
2285: PUSH
2286: EMPTY
2287: ST_TO_ADDR
// ruMech := [ ] ;
2288: LD_ADDR_EXP 40
2292: PUSH
2293: EMPTY
2294: ST_TO_ADDR
// ruEng := [ ] ;
2295: LD_ADDR_EXP 39
2299: PUSH
2300: EMPTY
2301: ST_TO_ADDR
// ruSci := [ ] ;
2302: LD_ADDR_EXP 41
2306: PUSH
2307: EMPTY
2308: ST_TO_ADDR
// ruMobile := [ ] ;
2309: LD_ADDR_EXP 42
2313: PUSH
2314: EMPTY
2315: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2316: LD_ADDR_EXP 35
2320: PUSH
2321: LD_STRING Burlak
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: LD_STRING 
2329: PPUSH
2330: CALL 31869 0 3
2334: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2335: LD_ADDR_EXP 36
2339: PUSH
2340: LD_STRING Gaydar
2342: PPUSH
2343: LD_INT 0
2345: PPUSH
2346: LD_STRING 
2348: PPUSH
2349: CALL 31869 0 3
2353: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2354: LD_ADDR_EXP 37
2358: PUSH
2359: LD_STRING Kuzmov
2361: PPUSH
2362: LD_INT 0
2364: PPUSH
2365: LD_STRING 
2367: PPUSH
2368: CALL 31869 0 3
2372: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2373: LD_EXP 37
2377: PPUSH
2378: LD_INT 200
2380: PPUSH
2381: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2385: LD_INT 200
2387: PPUSH
2388: LD_STRING chuikov
2390: PPUSH
2391: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2395: LD_INT 200
2397: PPUSH
2398: CALL_OW 274
2402: PPUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_INT 800
2408: PUSH
2409: LD_INT 1000
2411: PUSH
2412: LD_INT 1250
2414: PUSH
2415: LD_INT 1300
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: LD_OWVAR 67
2428: ARRAY
2429: PPUSH
2430: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2434: LD_INT 200
2436: PPUSH
2437: CALL_OW 274
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: LD_INT 160
2447: PPUSH
2448: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2452: LD_INT 225
2454: PPUSH
2455: CALL_OW 274
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 200
2465: PPUSH
2466: CALL_OW 277
// oil := 150 ;
2470: LD_ADDR_VAR 0 9
2474: PUSH
2475: LD_INT 150
2477: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2478: LD_EXP 5
2482: PUSH
2483: LD_INT 94500
2485: PUSH
2486: LD_INT 84000
2488: PUSH
2489: LD_INT 73500
2491: PUSH
2492: LD_INT 67200
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_OWVAR 67
2505: ARRAY
2506: GREATEREQUAL
2507: IFFALSE 2662
// begin oil := 450 ;
2509: LD_ADDR_VAR 0 9
2513: PUSH
2514: LD_INT 450
2516: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2517: LD_ADDR_VAR 0 7
2521: PUSH
2522: LD_INT 123
2524: PUSH
2525: LD_INT 17
2527: PUSH
2528: LD_INT 3
2530: PUSH
2531: LD_INT 31
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 152
2542: PUSH
2543: LD_INT 38
2545: PUSH
2546: LD_INT 3
2548: PUSH
2549: LD_INT 31
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 81
2560: PUSH
2561: LD_INT 6
2563: PUSH
2564: LD_INT 4
2566: PUSH
2567: LD_INT 31
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 113
2578: PUSH
2579: LD_INT 67
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 32
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: ST_TO_ADDR
// for i in tmp do
2600: LD_ADDR_VAR 0 4
2604: PUSH
2605: LD_VAR 0 7
2609: PUSH
2610: FOR_IN
2611: IFFALSE 2660
// begin bc_type := i [ 4 ] ;
2613: LD_ADDR_OWVAR 42
2617: PUSH
2618: LD_VAR 0 4
2622: PUSH
2623: LD_INT 4
2625: ARRAY
2626: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2627: LD_VAR 0 4
2631: PUSH
2632: LD_INT 1
2634: ARRAY
2635: PPUSH
2636: LD_VAR 0 4
2640: PUSH
2641: LD_INT 2
2643: ARRAY
2644: PPUSH
2645: LD_VAR 0 4
2649: PUSH
2650: LD_INT 3
2652: ARRAY
2653: PPUSH
2654: CALL_OW 47
// end ;
2658: GO 2610
2660: POP
2661: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2662: LD_INT 225
2664: PPUSH
2665: CALL_OW 274
2669: PPUSH
2670: LD_INT 2
2672: PPUSH
2673: LD_VAR 0 9
2677: PPUSH
2678: CALL_OW 277
// if Difficulty > 1 then
2682: LD_OWVAR 67
2686: PUSH
2687: LD_INT 1
2689: GREATER
2690: IFFALSE 2785
// begin bc_type := b_bunker ;
2692: LD_ADDR_OWVAR 42
2696: PUSH
2697: LD_INT 32
2699: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2700: LD_ADDR_VAR 0 7
2704: PUSH
2705: LD_INT 121
2707: PUSH
2708: LD_INT 85
2710: PUSH
2711: LD_INT 5
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 93
2721: PUSH
2722: LD_INT 72
2724: PUSH
2725: LD_INT 1
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: ST_TO_ADDR
// for i in tmp do
2737: LD_ADDR_VAR 0 4
2741: PUSH
2742: LD_VAR 0 7
2746: PUSH
2747: FOR_IN
2748: IFFALSE 2783
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2750: LD_VAR 0 4
2754: PUSH
2755: LD_INT 1
2757: ARRAY
2758: PPUSH
2759: LD_VAR 0 4
2763: PUSH
2764: LD_INT 2
2766: ARRAY
2767: PPUSH
2768: LD_VAR 0 4
2772: PUSH
2773: LD_INT 3
2775: ARRAY
2776: PPUSH
2777: CALL_OW 47
2781: GO 2747
2783: POP
2784: POP
// end ; base := GetBase ( ruMainBase ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_INT 200
2792: PPUSH
2793: CALL_OW 274
2797: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2798: LD_ADDR_VAR 0 3
2802: PUSH
2803: LD_VAR 0 2
2807: PPUSH
2808: CALL_OW 417
2812: ST_TO_ADDR
// for b in blist do
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 3
2822: PUSH
2823: FOR_IN
2824: IFFALSE 3275
// begin if b [ 1 ] = b_factory then
2826: LD_VAR 0 5
2830: PUSH
2831: LD_INT 1
2833: ARRAY
2834: PUSH
2835: LD_INT 3
2837: EQUAL
2838: IFFALSE 2989
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2840: LD_ADDR_VAR 0 8
2844: PUSH
2845: LD_VAR 0 5
2849: PUSH
2850: LD_INT 2
2852: ARRAY
2853: PPUSH
2854: LD_VAR 0 5
2858: PUSH
2859: LD_INT 3
2861: ARRAY
2862: PPUSH
2863: CALL_OW 428
2867: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 2
2880: PUSH
2881: LD_INT 2
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_EXP 10
2898: PUSH
2899: LD_INT 3
2901: GREATER
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2985
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 3
2916: PPUSH
2917: LD_INT 1
2919: PUSH
2920: LD_OWVAR 67
2924: PLUS
2925: PPUSH
2926: CALL_OW 380
// un := CreateHuman ;
2930: LD_ADDR_VAR 0 6
2934: PUSH
2935: CALL_OW 44
2939: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2940: LD_ADDR_EXP 40
2944: PUSH
2945: LD_EXP 40
2949: PPUSH
2950: LD_EXP 40
2954: PUSH
2955: LD_INT 1
2957: PLUS
2958: PPUSH
2959: LD_VAR 0 6
2963: PPUSH
2964: CALL_OW 1
2968: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2969: LD_VAR 0 6
2973: PPUSH
2974: LD_VAR 0 8
2978: PPUSH
2979: CALL_OW 52
// end ;
2983: GO 2908
2985: POP
2986: POP
// end else
2987: GO 3273
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2989: LD_VAR 0 5
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PUSH
2998: LD_INT 6
3000: PUSH
3001: LD_INT 7
3003: PUSH
3004: LD_INT 8
3006: PUSH
3007: LD_INT 10
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: IN
3016: IFFALSE 3126
// begin for i := 1 to 2 do
3018: LD_ADDR_VAR 0 4
3022: PUSH
3023: DOUBLE
3024: LD_INT 1
3026: DEC
3027: ST_TO_ADDR
3028: LD_INT 2
3030: PUSH
3031: FOR_TO
3032: IFFALSE 3122
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3034: LD_INT 0
3036: PPUSH
3037: LD_INT 4
3039: PPUSH
3040: LD_OWVAR 67
3044: PPUSH
3045: CALL_OW 380
// un := CreateHuman ;
3049: LD_ADDR_VAR 0 6
3053: PUSH
3054: CALL_OW 44
3058: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3059: LD_ADDR_EXP 41
3063: PUSH
3064: LD_EXP 41
3068: PPUSH
3069: LD_EXP 41
3073: PUSH
3074: LD_INT 1
3076: PLUS
3077: PPUSH
3078: LD_VAR 0 6
3082: PPUSH
3083: CALL_OW 1
3087: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3088: LD_VAR 0 6
3092: PPUSH
3093: LD_VAR 0 5
3097: PUSH
3098: LD_INT 2
3100: ARRAY
3101: PPUSH
3102: LD_VAR 0 5
3106: PUSH
3107: LD_INT 3
3109: ARRAY
3110: PPUSH
3111: CALL_OW 428
3115: PPUSH
3116: CALL_OW 52
// end ;
3120: GO 3031
3122: POP
3123: POP
// end else
3124: GO 3273
// if b [ 1 ] = b_warehouse then
3126: LD_VAR 0 5
3130: PUSH
3131: LD_INT 1
3133: ARRAY
3134: PUSH
3135: LD_INT 1
3137: EQUAL
3138: IFFALSE 3273
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3140: LD_ADDR_VAR 0 4
3144: PUSH
3145: DOUBLE
3146: LD_INT 1
3148: DEC
3149: ST_TO_ADDR
3150: LD_INT 1
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: LD_OWVAR 67
3160: PLUS
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_EXP 10
3170: PUSH
3171: LD_INT 3
3173: GREATER
3174: PUSH
3175: LD_INT 1
3177: PLUS
3178: ARRAY
3179: PUSH
3180: FOR_TO
3181: IFFALSE 3271
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_INT 2
3188: PPUSH
3189: LD_OWVAR 67
3193: PPUSH
3194: CALL_OW 380
// un := CreateHuman ;
3198: LD_ADDR_VAR 0 6
3202: PUSH
3203: CALL_OW 44
3207: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3208: LD_ADDR_EXP 39
3212: PUSH
3213: LD_EXP 39
3217: PPUSH
3218: LD_EXP 39
3222: PUSH
3223: LD_INT 1
3225: PLUS
3226: PPUSH
3227: LD_VAR 0 6
3231: PPUSH
3232: CALL_OW 1
3236: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3237: LD_VAR 0 6
3241: PPUSH
3242: LD_VAR 0 5
3246: PUSH
3247: LD_INT 2
3249: ARRAY
3250: PPUSH
3251: LD_VAR 0 5
3255: PUSH
3256: LD_INT 3
3258: ARRAY
3259: PPUSH
3260: CALL_OW 428
3264: PPUSH
3265: CALL_OW 52
// end ;
3269: GO 3180
3271: POP
3272: POP
// end ; end ;
3273: GO 2823
3275: POP
3276: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3277: LD_ADDR_VAR 0 3
3281: PUSH
3282: LD_INT 22
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 21
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PPUSH
3306: CALL_OW 69
3310: ST_TO_ADDR
// for b in blist do
3311: LD_ADDR_VAR 0 5
3315: PUSH
3316: LD_VAR 0 3
3320: PUSH
3321: FOR_IN
3322: IFFALSE 3344
// SetBLevel ( b , 3 + Difficulty ) ;
3324: LD_VAR 0 5
3328: PPUSH
3329: LD_INT 3
3331: PUSH
3332: LD_OWVAR 67
3336: PLUS
3337: PPUSH
3338: CALL_OW 241
3342: GO 3321
3344: POP
3345: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3346: LD_ADDR_VAR 0 3
3350: PUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 30
3363: PUSH
3364: LD_INT 32
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: ST_TO_ADDR
// for b in blist do
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_VAR 0 3
3389: PUSH
3390: FOR_IN
3391: IFFALSE 3500
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3393: LD_INT 0
3395: PPUSH
3396: LD_INT 1
3398: PPUSH
3399: LD_INT 1
3401: PUSH
3402: LD_OWVAR 67
3406: PLUS
3407: PPUSH
3408: CALL_OW 380
// un := CreateHuman ;
3412: LD_ADDR_VAR 0 6
3416: PUSH
3417: CALL_OW 44
3421: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3422: LD_ADDR_EXP 38
3426: PUSH
3427: LD_EXP 38
3431: PPUSH
3432: LD_EXP 38
3436: PUSH
3437: LD_INT 1
3439: PLUS
3440: PPUSH
3441: LD_VAR 0 6
3445: PPUSH
3446: CALL_OW 1
3450: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3451: LD_VAR 0 6
3455: PPUSH
3456: LD_VAR 0 5
3460: PPUSH
3461: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3465: LD_VAR 0 5
3469: PPUSH
3470: LD_INT 44
3472: PUSH
3473: LD_INT 43
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_VAR 0 5
3484: PUSH
3485: LD_INT 2
3487: MOD
3488: PUSH
3489: LD_INT 1
3491: PLUS
3492: ARRAY
3493: PPUSH
3494: CALL_OW 431
// end ;
3498: GO 3390
3500: POP
3501: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: LD_INT 22
3509: PUSH
3510: LD_INT 3
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: LD_INT 30
3519: PUSH
3520: LD_INT 31
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PPUSH
3531: CALL_OW 69
3535: ST_TO_ADDR
// for b in blist do
3536: LD_ADDR_VAR 0 5
3540: PUSH
3541: LD_VAR 0 3
3545: PUSH
3546: FOR_IN
3547: IFFALSE 3646
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3549: LD_INT 0
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_INT 1
3557: PUSH
3558: LD_OWVAR 67
3562: PLUS
3563: PPUSH
3564: CALL_OW 380
// un := CreateHuman ;
3568: LD_ADDR_VAR 0 6
3572: PUSH
3573: CALL_OW 44
3577: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3578: LD_ADDR_EXP 38
3582: PUSH
3583: LD_EXP 38
3587: PPUSH
3588: LD_EXP 38
3592: PUSH
3593: LD_INT 1
3595: PLUS
3596: PPUSH
3597: LD_VAR 0 6
3601: PPUSH
3602: CALL_OW 1
3606: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3607: LD_VAR 0 6
3611: PPUSH
3612: LD_VAR 0 5
3616: PPUSH
3617: CALL_OW 254
3621: PUSH
3622: LD_INT 3
3624: PLUS
3625: PPUSH
3626: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3630: LD_VAR 0 6
3634: PPUSH
3635: LD_VAR 0 5
3639: PPUSH
3640: CALL_OW 52
// end ;
3644: GO 3546
3646: POP
3647: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_INT 22
3655: PUSH
3656: LD_INT 3
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 2
3665: PUSH
3666: LD_INT 30
3668: PUSH
3669: LD_INT 4
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: LD_INT 30
3678: PUSH
3679: LD_INT 5
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PPUSH
3695: CALL_OW 69
3699: ST_TO_ADDR
// for b in blist do
3700: LD_ADDR_VAR 0 5
3704: PUSH
3705: LD_VAR 0 3
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3807
// begin for i := 1 to 2 do
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: DOUBLE
3719: LD_INT 1
3721: DEC
3722: ST_TO_ADDR
3723: LD_INT 2
3725: PUSH
3726: FOR_TO
3727: IFFALSE 3803
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3729: LD_INT 0
3731: PPUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 1
3737: PUSH
3738: LD_OWVAR 67
3742: PLUS
3743: PPUSH
3744: CALL_OW 380
// un := CreateHuman ;
3748: LD_ADDR_VAR 0 6
3752: PUSH
3753: CALL_OW 44
3757: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3758: LD_ADDR_EXP 38
3762: PUSH
3763: LD_EXP 38
3767: PPUSH
3768: LD_EXP 38
3772: PUSH
3773: LD_INT 1
3775: PLUS
3776: PPUSH
3777: LD_VAR 0 6
3781: PPUSH
3782: CALL_OW 1
3786: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3787: LD_VAR 0 6
3791: PPUSH
3792: LD_VAR 0 5
3796: PPUSH
3797: CALL_OW 52
// end ;
3801: GO 3726
3803: POP
3804: POP
// end ;
3805: GO 3710
3807: POP
3808: POP
// if ibrahimOnRuSide then
3809: LD_EXP 3
3813: IFFALSE 3911
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3815: LD_ADDR_EXP 22
3819: PUSH
3820: LD_STRING IbrahimRu
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: LD_STRING 
3828: PPUSH
3829: CALL 31869 0 3
3833: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3834: LD_EXP 22
3838: PPUSH
3839: LD_INT 121
3841: PPUSH
3842: LD_INT 78
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 48
// ComHold ( Ibrahim ) ;
3852: LD_EXP 22
3856: PPUSH
3857: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3861: LD_INT 1
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 2
3869: PPUSH
3870: CALL_OW 380
// ruSol := CreateHuman ;
3874: LD_ADDR_EXP 43
3878: PUSH
3879: CALL_OW 44
3883: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3884: LD_EXP 43
3888: PPUSH
3889: LD_INT 121
3891: PPUSH
3892: LD_INT 75
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL_OW 48
// ComHold ( ruSol ) ;
3902: LD_EXP 43
3906: PPUSH
3907: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3911: LD_ADDR_VAR 0 4
3915: PUSH
3916: DOUBLE
3917: LD_INT 1
3919: DEC
3920: ST_TO_ADDR
3921: LD_INT 2
3923: PUSH
3924: LD_INT 2
3926: PUSH
3927: LD_OWVAR 67
3931: PLUS
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_EXP 10
3941: PUSH
3942: LD_INT 3
3944: GREATER
3945: PUSH
3946: LD_INT 1
3948: PLUS
3949: ARRAY
3950: PUSH
3951: FOR_TO
3952: IFFALSE 4021
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3954: LD_VAR 0 8
3958: PPUSH
3959: LD_INT 21
3961: PUSH
3962: LD_INT 23
3964: PUSH
3965: LD_INT 24
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_VAR 0 4
3977: PUSH
3978: LD_INT 3
3980: MOD
3981: PUSH
3982: LD_INT 1
3984: PLUS
3985: ARRAY
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 43
3995: PUSH
3996: LD_INT 44
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: CALL_OW 185
4019: GO 3951
4021: POP
4022: POP
// end ;
4023: LD_VAR 0 1
4027: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4028: LD_EXP 42
4032: PUSH
4033: LD_EXP 4
4037: NOT
4038: AND
4039: IFFALSE 4527
4041: GO 4043
4043: DISABLE
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
4051: PPUSH
// begin enable ;
4052: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4053: LD_ADDR_VAR 0 2
4057: PUSH
4058: LD_EXP 42
4062: PPUSH
4063: LD_INT 21
4065: PUSH
4066: LD_INT 2
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 72
4077: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4078: LD_ADDR_VAR 0 4
4082: PUSH
4083: LD_INT 81
4085: PUSH
4086: LD_INT 3
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 2
4095: PUSH
4096: LD_INT 95
4098: PUSH
4099: LD_INT 4
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 95
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 95
4118: PUSH
4119: LD_INT 6
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 95
4128: PUSH
4129: LD_INT 7
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: ST_TO_ADDR
// for i in filter do
4152: LD_ADDR_VAR 0 1
4156: PUSH
4157: LD_VAR 0 2
4161: PUSH
4162: FOR_IN
4163: IFFALSE 4525
// begin tmp := IsDrivenBy ( i ) ;
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL_OW 311
4179: ST_TO_ADDR
// tag := GetTag ( i ) ;
4180: LD_ADDR_VAR 0 6
4184: PUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: CALL_OW 110
4194: ST_TO_ADDR
// if not tmp then
4195: LD_VAR 0 3
4199: NOT
4200: IFFALSE 4204
// continue ;
4202: GO 4162
// if GetFuel ( i ) > 90 and tag = 2 then
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 261
4213: PUSH
4214: LD_INT 90
4216: GREATER
4217: PUSH
4218: LD_VAR 0 6
4222: PUSH
4223: LD_INT 2
4225: EQUAL
4226: AND
4227: IFFALSE 4243
// SetTag ( i , 0 ) else
4229: LD_VAR 0 1
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 109
4241: GO 4286
// if GetTag ( i ) = 2 then
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 110
4252: PUSH
4253: LD_INT 2
4255: EQUAL
4256: IFFALSE 4286
// begin x := rand ( 1 , 2 ) ;
4258: LD_ADDR_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PPUSH
4266: LD_INT 2
4268: PPUSH
4269: CALL_OW 12
4273: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4274: LD_VAR 0 1
4278: PPUSH
4279: LD_INT 200
4281: PPUSH
4282: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4286: LD_VAR 0 1
4290: PPUSH
4291: CALL_OW 256
4295: PUSH
4296: LD_INT 650
4298: GREATEREQUAL
4299: PUSH
4300: LD_VAR 0 6
4304: NOT
4305: AND
4306: IFFALSE 4332
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_VAR 0 4
4317: PPUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 74
4327: PPUSH
4328: CALL_OW 115
// if GetLives ( i ) < 650 and not tag then
4332: LD_VAR 0 1
4336: PPUSH
4337: CALL_OW 256
4341: PUSH
4342: LD_INT 650
4344: LESS
4345: PUSH
4346: LD_VAR 0 6
4350: NOT
4351: AND
4352: IFFALSE 4381
// begin SetTag ( i , 1 ) ;
4354: LD_VAR 0 1
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4366: LD_VAR 0 1
4370: PPUSH
4371: LD_INT 112
4373: PPUSH
4374: LD_INT 119
4376: PPUSH
4377: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4381: LD_VAR 0 1
4385: PPUSH
4386: CALL_OW 110
4390: PUSH
4391: LD_INT 1
4393: EQUAL
4394: PUSH
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_INT 112
4402: PPUSH
4403: LD_INT 119
4405: PPUSH
4406: CALL_OW 297
4410: PUSH
4411: LD_INT 9
4413: LESS
4414: AND
4415: PUSH
4416: LD_VAR 0 3
4420: AND
4421: IFFALSE 4523
// begin ComExitVehicle ( tmp ) ;
4423: LD_VAR 0 3
4427: PPUSH
4428: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4432: LD_VAR 0 3
4436: PPUSH
4437: LD_VAR 0 1
4441: PPUSH
4442: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4446: LD_INT 35
4448: PPUSH
4449: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4453: LD_VAR 0 1
4457: PPUSH
4458: CALL_OW 256
4462: PUSH
4463: LD_INT 1000
4465: EQUAL
4466: IFFALSE 4446
// ComEnterUnit ( tmp , i ) ;
4468: LD_VAR 0 3
4472: PPUSH
4473: LD_VAR 0 1
4477: PPUSH
4478: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4482: LD_VAR 0 1
4486: PPUSH
4487: CALL_OW 261
4491: PUSH
4492: LD_INT 50
4494: LESSEQUAL
4495: IFFALSE 4511
// SetTag ( i , 2 ) else
4497: LD_VAR 0 1
4501: PPUSH
4502: LD_INT 2
4504: PPUSH
4505: CALL_OW 109
4509: GO 4523
// SetTag ( i , 0 ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 0
4518: PPUSH
4519: CALL_OW 109
// end ; end ;
4523: GO 4162
4525: POP
4526: POP
// end ;
4527: PPOPN 6
4529: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4530: LD_EXP 4
4534: NOT
4535: PUSH
4536: LD_EXP 39
4540: AND
4541: IFFALSE 4802
4543: GO 4545
4545: DISABLE
4546: LD_INT 0
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
// begin enable ;
4552: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 3
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: LD_INT 24
4586: PUSH
4587: LD_INT 1000
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: PPUSH
4603: CALL_OW 70
4607: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4608: LD_ADDR_VAR 0 3
4612: PUSH
4613: LD_EXP 39
4617: PPUSH
4618: LD_INT 50
4620: PUSH
4621: EMPTY
4622: LIST
4623: PPUSH
4624: CALL_OW 72
4628: ST_TO_ADDR
// if filter and tmp then
4629: LD_VAR 0 2
4633: PUSH
4634: LD_VAR 0 3
4638: AND
4639: IFFALSE 4731
// begin for i in tmp do
4641: LD_ADDR_VAR 0 1
4645: PUSH
4646: LD_VAR 0 3
4650: PUSH
4651: FOR_IN
4652: IFFALSE 4727
// begin if GetTag ( i ) = tEscape then
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL_OW 110
4663: PUSH
4664: LD_EXP 18
4668: EQUAL
4669: IFFALSE 4673
// continue ;
4671: GO 4651
// if IsInUnit ( i ) then
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 310
4682: IFFALSE 4695
// ComExitBuilding ( i ) else
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 122
4693: GO 4725
// if not HasTask ( i ) then
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 314
4704: NOT
4705: IFFALSE 4725
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4707: LD_VAR 0 1
4711: PPUSH
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: CALL_OW 130
// end ;
4725: GO 4651
4727: POP
4728: POP
// end else
4729: GO 4802
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 54
4741: PUSH
4742: EMPTY
4743: LIST
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PPUSH
4749: CALL_OW 72
4753: IFFALSE 4802
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4755: LD_ADDR_VAR 0 1
4759: PUSH
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 3
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: EMPTY
4772: LIST
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PPUSH
4778: CALL_OW 72
4782: PUSH
4783: FOR_IN
4784: IFFALSE 4800
// ComEnterUnit ( i , ruMainBase ) ;
4786: LD_VAR 0 1
4790: PPUSH
4791: LD_INT 200
4793: PPUSH
4794: CALL_OW 120
4798: GO 4783
4800: POP
4801: POP
// end ; end ;
4802: PPOPN 4
4804: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4805: LD_EXP 4
4809: NOT
4810: PUSH
4811: LD_EXP 41
4815: AND
4816: IFFALSE 5095
4818: GO 4820
4820: DISABLE
4821: LD_INT 0
4823: PPUSH
4824: PPUSH
4825: PPUSH
4826: PPUSH
// begin enable ;
4827: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4828: LD_ADDR_VAR 0 2
4832: PUSH
4833: LD_INT 3
4835: PPUSH
4836: LD_INT 22
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 21
4848: PUSH
4849: LD_INT 1
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: LD_INT 24
4861: PUSH
4862: LD_INT 1000
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: PPUSH
4878: CALL_OW 70
4882: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4883: LD_ADDR_VAR 0 3
4887: PUSH
4888: LD_EXP 41
4892: PPUSH
4893: LD_INT 50
4895: PUSH
4896: EMPTY
4897: LIST
4898: PPUSH
4899: CALL_OW 72
4903: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4904: LD_ADDR_VAR 0 4
4908: PUSH
4909: LD_INT 118
4911: PPUSH
4912: LD_INT 121
4914: PPUSH
4915: CALL_OW 428
4919: ST_TO_ADDR
// if filter and tmp then
4920: LD_VAR 0 2
4924: PUSH
4925: LD_VAR 0 3
4929: AND
4930: IFFALSE 5022
// begin for i in tmp do
4932: LD_ADDR_VAR 0 1
4936: PUSH
4937: LD_VAR 0 3
4941: PUSH
4942: FOR_IN
4943: IFFALSE 5018
// begin if GetTag ( i ) = tEscape then
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 110
4954: PUSH
4955: LD_EXP 18
4959: EQUAL
4960: IFFALSE 4964
// continue ;
4962: GO 4942
// if IsInUnit ( i ) then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 310
4973: IFFALSE 4986
// ComExitBuilding ( i ) else
4975: LD_VAR 0 1
4979: PPUSH
4980: CALL_OW 122
4984: GO 5016
// if not HasTask ( i ) then
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 314
4995: NOT
4996: IFFALSE 5016
// ComHeal ( i , filter [ 1 ] ) ;
4998: LD_VAR 0 1
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 1
5010: ARRAY
5011: PPUSH
5012: CALL_OW 128
// end ;
5016: GO 4942
5018: POP
5019: POP
// end else
5020: GO 5095
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5022: LD_VAR 0 3
5026: PPUSH
5027: LD_INT 3
5029: PUSH
5030: LD_INT 54
5032: PUSH
5033: EMPTY
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 72
5044: IFFALSE 5095
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5046: LD_ADDR_VAR 0 1
5050: PUSH
5051: LD_VAR 0 3
5055: PPUSH
5056: LD_INT 3
5058: PUSH
5059: LD_INT 54
5061: PUSH
5062: EMPTY
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 72
5073: PUSH
5074: FOR_IN
5075: IFFALSE 5093
// ComEnterUnit ( i , lab ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_VAR 0 4
5086: PPUSH
5087: CALL_OW 120
5091: GO 5074
5093: POP
5094: POP
// end ; end ; end_of_file
5095: PPOPN 4
5097: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL 26585 0 1
// if un = Heike then
5107: LD_VAR 0 1
5111: PUSH
5112: LD_EXP 19
5116: EQUAL
5117: IFFALSE 5126
// YouLost ( Heike ) ;
5119: LD_STRING Heike
5121: PPUSH
5122: CALL_OW 104
// if un in ruEng then
5126: LD_VAR 0 1
5130: PUSH
5131: LD_EXP 39
5135: IN
5136: IFFALSE 5154
// ruEng := ruEng diff un ;
5138: LD_ADDR_EXP 39
5142: PUSH
5143: LD_EXP 39
5147: PUSH
5148: LD_VAR 0 1
5152: DIFF
5153: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5154: LD_VAR 0 1
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 2
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 23
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 69
5198: IN
5199: IFFALSE 5215
// loseCounter := loseCounter + 1 ;
5201: LD_ADDR_EXP 6
5205: PUSH
5206: LD_EXP 6
5210: PUSH
5211: LD_INT 1
5213: PLUS
5214: ST_TO_ADDR
// end ;
5215: PPOPN 1
5217: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5218: LD_INT 0
5220: PPUSH
5221: PPUSH
// begin if un in ruMobile then
5222: LD_VAR 0 2
5226: PUSH
5227: LD_EXP 42
5231: IN
5232: IFFALSE 5391
// begin ruMobile := ruMobile diff un ;
5234: LD_ADDR_EXP 42
5238: PUSH
5239: LD_EXP 42
5243: PUSH
5244: LD_VAR 0 2
5248: DIFF
5249: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5250: LD_ADDR_VAR 0 5
5254: PUSH
5255: LD_VAR 0 2
5259: PPUSH
5260: CALL_OW 264
5264: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_INT 110
5272: PPUSH
5273: LD_INT 126
5275: PPUSH
5276: CALL_OW 428
5280: ST_TO_ADDR
// if not driver or not fac then
5281: LD_VAR 0 1
5285: NOT
5286: PUSH
5287: LD_VAR 0 6
5291: NOT
5292: OR
5293: IFFALSE 5297
// exit ;
5295: GO 5391
// AddComMoveXY ( driver , 111 , 121 ) ;
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 111
5304: PPUSH
5305: LD_INT 121
5307: PPUSH
5308: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5312: LD_VAR 0 1
5316: PPUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5326: LD_INT 35
5328: PPUSH
5329: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5333: LD_VAR 0 1
5337: PPUSH
5338: CALL_OW 301
5342: PUSH
5343: LD_VAR 0 1
5347: PPUSH
5348: CALL_OW 310
5352: OR
5353: IFFALSE 5326
// if IsDead ( driver ) then
5355: LD_VAR 0 1
5359: PPUSH
5360: CALL_OW 301
5364: IFFALSE 5368
// exit ;
5366: GO 5391
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5368: LD_VAR 0 6
5372: PPUSH
5373: LD_INT 21
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: LD_VAR 0 5
5386: PPUSH
5387: CALL_OW 185
// end ; end ;
5391: PPOPN 6
5393: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5394: LD_VAR 0 1
5398: PPUSH
5399: LD_VAR 0 2
5403: PPUSH
5404: CALL 26643 0 2
// if GetSide ( fac ) = 3 then
5408: LD_VAR 0 2
5412: PPUSH
5413: CALL_OW 255
5417: PUSH
5418: LD_INT 3
5420: EQUAL
5421: IFFALSE 5467
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5423: LD_ADDR_EXP 42
5427: PUSH
5428: LD_EXP 42
5432: PPUSH
5433: LD_EXP 42
5437: PUSH
5438: LD_INT 1
5440: PLUS
5441: PPUSH
5442: LD_VAR 0 1
5446: PPUSH
5447: CALL_OW 1
5451: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5452: LD_VAR 0 1
5456: PPUSH
5457: LD_INT 110
5459: PPUSH
5460: LD_INT 117
5462: PPUSH
5463: CALL_OW 171
// end ; end ;
5467: PPOPN 2
5469: END
// on LeaveBuilding ( b , un ) do var barracks ;
5470: LD_INT 0
5472: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5473: LD_VAR 0 1
5477: PUSH
5478: LD_INT 130
5480: PPUSH
5481: LD_INT 17
5483: PPUSH
5484: CALL_OW 428
5488: PUSH
5489: LD_INT 138
5491: PPUSH
5492: LD_INT 22
5494: PPUSH
5495: CALL_OW 428
5499: PUSH
5500: LD_INT 123
5502: PPUSH
5503: LD_INT 17
5505: PPUSH
5506: CALL_OW 428
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: IN
5516: IFFALSE 5540
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_INT 135
5525: PPUSH
5526: LD_INT 31
5528: PPUSH
5529: CALL_OW 428
5533: PPUSH
5534: CALL_OW 180
// exit ;
5538: GO 5814
// end ; if b = HexInfo ( 135 , 31 ) then
5540: LD_VAR 0 1
5544: PUSH
5545: LD_INT 135
5547: PPUSH
5548: LD_INT 31
5550: PPUSH
5551: CALL_OW 428
5555: EQUAL
5556: IFFALSE 5628
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_INT 106
5565: PPUSH
5566: LD_INT 51
5568: PPUSH
5569: CALL_OW 428
5573: PPUSH
5574: CALL_OW 180
// if not explodeFirstDepot then
5578: LD_EXP 12
5582: NOT
5583: IFFALSE 5626
// begin explodeFirstDepot := true ;
5585: LD_ADDR_EXP 12
5589: PUSH
5590: LD_INT 1
5592: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5593: LD_INT 525
5595: PPUSH
5596: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5600: LD_INT 127
5602: PPUSH
5603: LD_INT 27
5605: PPUSH
5606: LD_INT 1
5608: PPUSH
5609: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5613: LD_INT 125
5615: PPUSH
5616: LD_INT 29
5618: PPUSH
5619: LD_INT 1
5621: PPUSH
5622: CALL_OW 453
// end ; exit ;
5626: GO 5814
// end ; if b = HexInfo ( 106 , 51 ) then
5628: LD_VAR 0 1
5632: PUSH
5633: LD_INT 106
5635: PPUSH
5636: LD_INT 51
5638: PPUSH
5639: CALL_OW 428
5643: EQUAL
5644: IFFALSE 5744
// begin AddComMoveXY ( un , 106 , 93 ) ;
5646: LD_VAR 0 2
5650: PPUSH
5651: LD_INT 106
5653: PPUSH
5654: LD_INT 93
5656: PPUSH
5657: CALL_OW 171
// if not explodeSecondDepot then
5661: LD_EXP 13
5665: NOT
5666: IFFALSE 5742
// begin explodeSecondDepot := true ;
5668: LD_ADDR_EXP 13
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5676: LD_INT 420
5678: PPUSH
5679: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5683: LD_INT 111
5685: PPUSH
5686: LD_INT 75
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5696: LD_INT 111
5698: PPUSH
5699: LD_INT 75
5701: PPUSH
5702: LD_INT 1
5704: PPUSH
5705: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5709: LD_INT 108
5711: PPUSH
5712: LD_INT 69
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 453
// wait ( 0 0$2 ) ;
5722: LD_INT 70
5724: PPUSH
5725: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5729: LD_INT 94
5731: PPUSH
5732: LD_INT 65
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 453
// end ; exit ;
5742: GO 5814
// end ; if GetBType ( b ) = b_bunker then
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 266
5753: PUSH
5754: LD_INT 32
5756: EQUAL
5757: IFFALSE 5814
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: LD_VAR 0 2
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: CALL 1016 0 2
5776: ST_TO_ADDR
// if barracks then
5777: LD_VAR 0 3
5781: IFFALSE 5799
// AddComEnterUnit ( un , barracks ) else
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_VAR 0 3
5792: PPUSH
5793: CALL_OW 180
5797: GO 5814
// AddComMoveXY ( un , 116 , 110 ) ;
5799: LD_VAR 0 2
5803: PPUSH
5804: LD_INT 116
5806: PPUSH
5807: LD_INT 110
5809: PPUSH
5810: CALL_OW 171
// end ; end ;
5814: PPOPN 3
5816: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5817: LD_VAR 0 1
5821: PUSH
5822: LD_EXP 24
5826: EQUAL
5827: PUSH
5828: LD_VAR 0 2
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: LD_INT 6
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: IN
5843: AND
5844: IFFALSE 5875
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5846: LD_ADDR_EXP 8
5850: PUSH
5851: LD_VAR 0 1
5855: PPUSH
5856: CALL_OW 250
5860: PUSH
5861: LD_VAR 0 1
5865: PPUSH
5866: CALL_OW 251
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: ST_TO_ADDR
// end ;
5875: PPOPN 3
5877: END
// every 0 0$1 trigger activeInvincible do var i ;
5878: LD_EXP 17
5882: IFFALSE 5951
5884: GO 5886
5886: DISABLE
5887: LD_INT 0
5889: PPUSH
// begin enable ;
5890: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
5891: LD_ADDR_VAR 0 1
5895: PUSH
5896: LD_INT 22
5898: PUSH
5899: LD_INT 2
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 3
5908: PUSH
5909: LD_INT 24
5911: PUSH
5912: LD_INT 1000
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL_OW 69
5931: PUSH
5932: FOR_IN
5933: IFFALSE 5949
// SetLives ( i , 1000 ) ;
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_INT 1000
5942: PPUSH
5943: CALL_OW 234
5947: GO 5932
5949: POP
5950: POP
// end ; end_of_file
5951: PPOPN 1
5953: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5954: LD_INT 0
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
// Video ( true ) ;
5963: LD_INT 1
5965: PPUSH
5966: CALL 69573 0 1
// ChangeSideFog ( 5 , 2 ) ;
5970: LD_INT 5
5972: PPUSH
5973: LD_INT 2
5975: PPUSH
5976: CALL_OW 343
// music_nat := 4 ;
5980: LD_ADDR_OWVAR 71
5984: PUSH
5985: LD_INT 4
5987: ST_TO_ADDR
// music_class := music_combat ;
5988: LD_ADDR_OWVAR 72
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5996: LD_INT 133
5998: PPUSH
5999: LD_INT 2
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: LD_INT 10
6007: PPUSH
6008: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
6012: LD_INT 133
6014: PPUSH
6015: LD_INT 2
6017: PPUSH
6018: CALL_OW 86
// wait ( 0 0$1 ) ;
6022: LD_INT 35
6024: PPUSH
6025: CALL_OW 67
// uc_side := 6 ;
6029: LD_ADDR_OWVAR 20
6033: PUSH
6034: LD_INT 6
6036: ST_TO_ADDR
// uc_nation := 3 ;
6037: LD_ADDR_OWVAR 21
6041: PUSH
6042: LD_INT 3
6044: ST_TO_ADDR
// rutmp := [ ] ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: EMPTY
6051: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
6052: LD_INT 6
6054: PPUSH
6055: LD_INT 3
6057: PPUSH
6058: LD_INT 21
6060: PPUSH
6061: LD_INT 1
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: LD_INT 44
6069: PPUSH
6070: LD_INT 66
6072: PPUSH
6073: CALL 344 0 7
// veh := CreateVehicle ;
6077: LD_ADDR_VAR 0 5
6081: PUSH
6082: CALL_OW 45
6086: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6087: LD_VAR 0 5
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6099: LD_VAR 0 5
6103: PPUSH
6104: LD_INT 8
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 49
// SetLives ( veh , 500 ) ;
6114: LD_VAR 0 5
6118: PPUSH
6119: LD_INT 500
6121: PPUSH
6122: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6126: LD_INT 0
6128: PPUSH
6129: LD_INT 3
6131: PPUSH
6132: LD_INT 3
6134: PPUSH
6135: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6139: CALL_OW 44
6143: PPUSH
6144: LD_VAR 0 5
6148: PPUSH
6149: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6153: LD_VAR 0 5
6157: PPUSH
6158: LD_INT 133
6160: PPUSH
6161: LD_INT 11
6163: PPUSH
6164: CALL_OW 111
// rutmp := [ veh ] ;
6168: LD_ADDR_VAR 0 7
6172: PUSH
6173: LD_VAR 0 5
6177: PUSH
6178: EMPTY
6179: LIST
6180: ST_TO_ADDR
// for i := 1 to 4 do
6181: LD_ADDR_VAR 0 2
6185: PUSH
6186: DOUBLE
6187: LD_INT 1
6189: DEC
6190: ST_TO_ADDR
6191: LD_INT 4
6193: PUSH
6194: FOR_TO
6195: IFFALSE 6302
// begin PrepareHuman ( false , i , 2 ) ;
6197: LD_INT 0
6199: PPUSH
6200: LD_VAR 0 2
6204: PPUSH
6205: LD_INT 2
6207: PPUSH
6208: CALL_OW 380
// un := CreateHuman ;
6212: LD_ADDR_VAR 0 4
6216: PUSH
6217: CALL_OW 44
6221: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6222: LD_VAR 0 4
6226: PPUSH
6227: LD_INT 3
6229: PPUSH
6230: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6234: LD_VAR 0 4
6238: PPUSH
6239: LD_INT 8
6241: PPUSH
6242: LD_INT 0
6244: PPUSH
6245: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6249: LD_ADDR_VAR 0 7
6253: PUSH
6254: LD_VAR 0 7
6258: PPUSH
6259: LD_VAR 0 7
6263: PUSH
6264: LD_INT 1
6266: PLUS
6267: PPUSH
6268: LD_VAR 0 4
6272: PPUSH
6273: CALL_OW 1
6277: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6278: LD_VAR 0 4
6282: PPUSH
6283: LD_INT 133
6285: PPUSH
6286: LD_INT 11
6288: PPUSH
6289: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6293: LD_INT 18
6295: PPUSH
6296: CALL_OW 67
// end ;
6300: GO 6194
6302: POP
6303: POP
// for i in rutmp do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_VAR 0 7
6313: PUSH
6314: FOR_IN
6315: IFFALSE 6364
// begin AddComMoveXY ( i , 99 , 65 ) ;
6317: LD_VAR 0 2
6321: PPUSH
6322: LD_INT 99
6324: PPUSH
6325: LD_INT 65
6327: PPUSH
6328: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_INT 76
6339: PPUSH
6340: LD_INT 108
6342: PPUSH
6343: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_INT 92
6354: PPUSH
6355: LD_INT 176
6357: PPUSH
6358: CALL_OW 171
// end ;
6362: GO 6314
6364: POP
6365: POP
// wait ( 0 0$10 ) ;
6366: LD_INT 350
6368: PPUSH
6369: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6373: LD_ADDR_VAR 0 6
6377: PUSH
6378: LD_EXP 19
6382: PUSH
6383: LD_EXP 20
6387: PUSH
6388: LD_EXP 21
6392: PUSH
6393: LD_EXP 22
6397: PUSH
6398: LD_EXP 23
6402: PUSH
6403: LD_EXP 24
6407: PUSH
6408: LD_EXP 25
6412: PUSH
6413: LD_EXP 26
6417: PUSH
6418: LD_EXP 28
6422: PUSH
6423: LD_EXP 29
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_EXP 30
6444: UNION
6445: ST_TO_ADDR
// tmp := tmp diff 0 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_VAR 0 6
6455: PUSH
6456: LD_INT 0
6458: DIFF
6459: ST_TO_ADDR
// for i in heikeVehicles do
6460: LD_ADDR_VAR 0 2
6464: PUSH
6465: LD_EXP 31
6469: PUSH
6470: FOR_IN
6471: IFFALSE 6890
// begin if not tmp then
6473: LD_VAR 0 6
6477: NOT
6478: IFFALSE 6482
// continue ;
6480: GO 6470
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6482: LD_INT 2
6484: PPUSH
6485: LD_VAR 0 2
6489: PUSH
6490: LD_INT 5
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 2
6498: PUSH
6499: LD_INT 1
6501: ARRAY
6502: PPUSH
6503: LD_VAR 0 2
6507: PUSH
6508: LD_INT 2
6510: ARRAY
6511: PPUSH
6512: LD_VAR 0 2
6516: PUSH
6517: LD_INT 3
6519: ARRAY
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 4
6528: ARRAY
6529: PPUSH
6530: LD_INT 34
6532: PPUSH
6533: CALL 344 0 7
// veh := CreateVehicle ;
6537: LD_ADDR_VAR 0 5
6541: PUSH
6542: CALL_OW 45
6546: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6547: LD_VAR 0 2
6551: PUSH
6552: LD_INT 4
6554: ARRAY
6555: PUSH
6556: LD_INT 51
6558: PUSH
6559: LD_INT 32
6561: PUSH
6562: LD_INT 12
6564: PUSH
6565: LD_INT 89
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: IN
6574: IFFALSE 6654
// begin if i [ 7 ] [ 1 ] then
6576: LD_VAR 0 2
6580: PUSH
6581: LD_INT 7
6583: ARRAY
6584: PUSH
6585: LD_INT 1
6587: ARRAY
6588: IFFALSE 6615
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6590: LD_VAR 0 5
6594: PPUSH
6595: LD_INT 1
6597: PPUSH
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 7
6605: ARRAY
6606: PUSH
6607: LD_INT 1
6609: ARRAY
6610: PPUSH
6611: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6615: LD_VAR 0 2
6619: PUSH
6620: LD_INT 7
6622: ARRAY
6623: PUSH
6624: LD_INT 2
6626: ARRAY
6627: IFFALSE 6654
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6629: LD_VAR 0 5
6633: PPUSH
6634: LD_INT 2
6636: PPUSH
6637: LD_VAR 0 2
6641: PUSH
6642: LD_INT 7
6644: ARRAY
6645: PUSH
6646: LD_INT 2
6648: ARRAY
6649: PPUSH
6650: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6654: LD_VAR 0 5
6658: PPUSH
6659: LD_INT 3
6661: PPUSH
6662: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6666: LD_VAR 0 5
6670: PPUSH
6671: LD_INT 8
6673: PPUSH
6674: LD_INT 0
6676: PPUSH
6677: CALL_OW 49
// for j := 1 to tmp do
6681: LD_ADDR_VAR 0 3
6685: PUSH
6686: DOUBLE
6687: LD_INT 1
6689: DEC
6690: ST_TO_ADDR
6691: LD_VAR 0 6
6695: PUSH
6696: FOR_TO
6697: IFFALSE 6770
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6699: LD_VAR 0 2
6703: PUSH
6704: LD_INT 8
6706: ARRAY
6707: PUSH
6708: LD_VAR 0 6
6712: PUSH
6713: LD_VAR 0 3
6717: ARRAY
6718: PPUSH
6719: CALL_OW 257
6723: EQUAL
6724: IFFALSE 6768
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6726: LD_VAR 0 6
6730: PUSH
6731: LD_VAR 0 3
6735: ARRAY
6736: PPUSH
6737: LD_VAR 0 5
6741: PPUSH
6742: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6746: LD_ADDR_VAR 0 6
6750: PUSH
6751: LD_VAR 0 6
6755: PPUSH
6756: LD_VAR 0 3
6760: PPUSH
6761: CALL_OW 3
6765: ST_TO_ADDR
// break ;
6766: GO 6770
// end ; end ;
6768: GO 6696
6770: POP
6771: POP
// if IsEmpty ( veh ) then
6772: LD_VAR 0 5
6776: PPUSH
6777: CALL 34014 0 1
6781: IFFALSE 6819
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6783: LD_VAR 0 6
6787: PUSH
6788: LD_INT 1
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 5
6796: PPUSH
6797: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_VAR 0 6
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 3
6818: ST_TO_ADDR
// end ; if GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6819: LD_VAR 0 5
6823: PPUSH
6824: CALL_OW 264
6828: PUSH
6829: LD_INT 51
6831: PUSH
6832: LD_INT 32
6834: PUSH
6835: LD_INT 12
6837: PUSH
6838: LD_INT 89
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: IN
6847: IFFALSE 6866
// ComMoveXY ( veh , 130 , 8 ) else
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_INT 130
6856: PPUSH
6857: LD_INT 8
6859: PPUSH
6860: CALL_OW 111
6864: GO 6881
// ComMoveXY ( veh , 134 , 15 ) ;
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 134
6873: PPUSH
6874: LD_INT 15
6876: PPUSH
6877: CALL_OW 111
// wait ( 0 0$3 ) ;
6881: LD_INT 105
6883: PPUSH
6884: CALL_OW 67
// end ;
6888: GO 6470
6890: POP
6891: POP
// if tmp then
6892: LD_VAR 0 6
6896: IFFALSE 6952
// for i in tmp do
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: LD_VAR 0 6
6907: PUSH
6908: FOR_IN
6909: IFFALSE 6950
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6911: LD_VAR 0 2
6915: PPUSH
6916: LD_INT 10
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6926: LD_VAR 0 2
6930: PPUSH
6931: LD_INT 146
6933: PPUSH
6934: LD_INT 7
6936: PPUSH
6937: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6941: LD_INT 18
6943: PPUSH
6944: CALL_OW 67
// end ;
6948: GO 6908
6950: POP
6951: POP
// if heikeApes then
6952: LD_EXP 32
6956: IFFALSE 7012
// for i in heikeApes do
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: LD_EXP 32
6967: PUSH
6968: FOR_IN
6969: IFFALSE 7010
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6971: LD_VAR 0 2
6975: PPUSH
6976: LD_INT 10
6978: PPUSH
6979: LD_INT 0
6981: PPUSH
6982: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_INT 146
6993: PPUSH
6994: LD_INT 7
6996: PPUSH
6997: CALL_OW 114
// wait ( 0 0$0.5 ) ;
7001: LD_INT 18
7003: PPUSH
7004: CALL_OW 67
// end ;
7008: GO 6968
7010: POP
7011: POP
// DialogueOn ;
7012: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
7016: LD_EXP 19
7020: PPUSH
7021: LD_STRING DH-outpost-a-1
7023: PPUSH
7024: CALL_OW 88
// DialogueOff ;
7028: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
7032: LD_INT 133
7034: PPUSH
7035: LD_INT 2
7037: PPUSH
7038: LD_INT 2
7040: PPUSH
7041: CALL_OW 331
// activeInvincible := false ;
7045: LD_ADDR_EXP 17
7049: PUSH
7050: LD_INT 0
7052: ST_TO_ADDR
// Video ( false ) ;
7053: LD_INT 0
7055: PPUSH
7056: CALL 69573 0 1
// music_nat := 0 ;
7060: LD_ADDR_OWVAR 71
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// music_class := 0 ;
7068: LD_ADDR_OWVAR 72
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
7076: LD_STRING Outposts
7078: PPUSH
7079: CALL_OW 337
// SaveForQuickRestart ;
7083: CALL_OW 22
// end ;
7087: LD_VAR 0 1
7091: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
7092: LD_INT 22
7094: PUSH
7095: LD_INT 2
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 91
7104: PUSH
7105: LD_EXP 22
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: PUSH
7127: LD_EXP 3
7131: AND
7132: PUSH
7133: LD_EXP 22
7137: PPUSH
7138: CALL_OW 302
7142: AND
7143: IFFALSE 7390
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
7151: PPUSH
7152: PPUSH
7153: PPUSH
// begin IbrahimBetrayal ;
7154: CALL 7393 0 0
// repeat wait ( 0 0$1 ) ;
7158: LD_INT 35
7160: PPUSH
7161: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7165: LD_EXP 22
7169: PPUSH
7170: CALL_OW 301
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 2
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 91
7187: PUSH
7188: LD_EXP 22
7192: PUSH
7193: LD_INT 6
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PUSH
7210: LD_EXP 22
7214: PPUSH
7215: CALL_OW 302
7219: AND
7220: OR
7221: IFFALSE 7158
// if IsDead ( Ibrahim ) then
7223: LD_EXP 22
7227: PPUSH
7228: CALL_OW 301
7232: IFFALSE 7236
// exit ;
7234: GO 7390
// x := GetX ( Ibrahim ) ;
7236: LD_ADDR_VAR 0 1
7240: PUSH
7241: LD_EXP 22
7245: PPUSH
7246: CALL_OW 250
7250: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: LD_EXP 22
7260: PPUSH
7261: CALL_OW 251
7265: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7266: LD_ADDR_VAR 0 3
7270: PUSH
7271: LD_EXP 22
7275: PPUSH
7276: CALL_OW 254
7280: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7281: LD_ADDR_VAR 0 4
7285: PUSH
7286: LD_EXP 22
7290: PPUSH
7291: CALL_OW 256
7295: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7296: LD_EXP 22
7300: PPUSH
7301: CALL_OW 64
// uc_side := 2 ;
7305: LD_ADDR_OWVAR 20
7309: PUSH
7310: LD_INT 2
7312: ST_TO_ADDR
// uc_nation := 2 ;
7313: LD_ADDR_OWVAR 21
7317: PUSH
7318: LD_INT 2
7320: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7321: LD_ADDR_EXP 22
7325: PUSH
7326: LD_STRING Ibrahim
7328: PPUSH
7329: LD_INT 0
7331: PPUSH
7332: LD_STRING 
7334: PPUSH
7335: CALL 31869 0 3
7339: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7340: LD_EXP 22
7344: PPUSH
7345: LD_VAR 0 3
7349: PPUSH
7350: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7354: LD_EXP 22
7358: PPUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 2
7368: PPUSH
7369: LD_INT 0
7371: PPUSH
7372: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7376: LD_EXP 22
7380: PPUSH
7381: LD_VAR 0 4
7385: PPUSH
7386: CALL_OW 234
// end ;
7390: PPOPN 4
7392: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7393: LD_INT 0
7395: PPUSH
7396: PPUSH
7397: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7398: LD_INT 122
7400: PPUSH
7401: LD_INT 77
7403: PPUSH
7404: LD_INT 2
7406: PPUSH
7407: LD_INT 6
7409: NEG
7410: PPUSH
7411: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7415: LD_EXP 22
7419: PPUSH
7420: LD_INT 123
7422: PPUSH
7423: LD_INT 79
7425: PPUSH
7426: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7430: LD_EXP 22
7434: PPUSH
7435: LD_INT 125
7437: PPUSH
7438: LD_INT 82
7440: PPUSH
7441: CALL_OW 178
// wait ( 0 0$2 ) ;
7445: LD_INT 70
7447: PPUSH
7448: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7452: LD_EXP 43
7456: PPUSH
7457: LD_EXP 22
7461: PPUSH
7462: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7466: LD_EXP 43
7470: PPUSH
7471: LD_STRING DRum-outpost-b-3
7473: PPUSH
7474: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 125
7485: PPUSH
7486: LD_INT 76
7488: PPUSH
7489: CALL_OW 428
7493: PUSH
7494: LD_INT 125
7496: PPUSH
7497: LD_INT 79
7499: PPUSH
7500: CALL_OW 428
7504: PUSH
7505: LD_INT 125
7507: PPUSH
7508: LD_INT 82
7510: PPUSH
7511: CALL_OW 428
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: ST_TO_ADDR
// for i in tmp do
7521: LD_ADDR_VAR 0 2
7525: PUSH
7526: LD_VAR 0 3
7530: PUSH
7531: FOR_IN
7532: IFFALSE 7548
// SetLives ( i , 200 ) ;
7534: LD_VAR 0 2
7538: PPUSH
7539: LD_INT 200
7541: PPUSH
7542: CALL_OW 234
7546: GO 7531
7548: POP
7549: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7550: LD_EXP 22
7554: PPUSH
7555: LD_STRING DI-outpost-b-4
7557: PPUSH
7558: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7562: LD_EXP 22
7566: PPUSH
7567: LD_INT 5
7569: PPUSH
7570: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7574: LD_EXP 22
7578: PUSH
7579: LD_EXP 43
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7592: LD_INT 122
7594: PPUSH
7595: LD_INT 77
7597: PPUSH
7598: LD_INT 2
7600: PPUSH
7601: CALL_OW 331
// if Givi then
7605: LD_EXP 20
7609: IFFALSE 7625
// Say ( Givi , DG-1-outpost-b-5 ) else
7611: LD_EXP 20
7615: PPUSH
7616: LD_STRING DG-1-outpost-b-5
7618: PPUSH
7619: CALL_OW 88
7623: GO 7690
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7625: LD_EXP 30
7629: PPUSH
7630: LD_INT 26
7632: PUSH
7633: LD_INT 2
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 72
7644: PUSH
7645: LD_INT 1
7647: ARRAY
7648: PPUSH
7649: LD_STRING DArf-outpost-b-a-5
7651: PPUSH
7652: CALL_OW 88
7656: NOT
7657: IFFALSE 7690
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7659: LD_EXP 30
7663: PPUSH
7664: LD_INT 26
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 72
7678: PUSH
7679: LD_INT 1
7681: ARRAY
7682: PPUSH
7683: LD_STRING DArm-outpost-b-a-5
7685: PPUSH
7686: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7690: LD_INT 35
7692: PPUSH
7693: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7697: LD_EXP 22
7701: PPUSH
7702: CALL_OW 301
7706: PUSH
7707: LD_EXP 19
7711: PPUSH
7712: LD_EXP 22
7716: PPUSH
7717: CALL_OW 296
7721: PUSH
7722: LD_INT 6
7724: LESS
7725: PUSH
7726: LD_EXP 22
7730: PPUSH
7731: CALL_OW 302
7735: AND
7736: OR
7737: IFFALSE 7690
// if IsDead ( Ibrahim ) then
7739: LD_EXP 22
7743: PPUSH
7744: CALL_OW 301
7748: IFFALSE 7764
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7750: LD_EXP 19
7754: PPUSH
7755: LD_STRING DH-ibrahimdead-1
7757: PPUSH
7758: CALL_OW 88
// exit ;
7762: GO 7805
// end ; CenterNowOnUnits ( Ibrahim ) ;
7764: LD_EXP 22
7768: PPUSH
7769: CALL_OW 87
// DialogueOn ;
7773: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7777: LD_EXP 22
7781: PPUSH
7782: LD_STRING DI-ibrahimlives-1
7784: PPUSH
7785: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7789: LD_EXP 19
7793: PPUSH
7794: LD_STRING DH-Ibrahimlives-2
7796: PPUSH
7797: CALL_OW 88
// DialogueOff ;
7801: CALL_OW 7
// end ;
7805: LD_VAR 0 1
7809: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7810: LD_INT 11
7812: PPUSH
7813: LD_INT 22
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 70
7827: PUSH
7828: LD_OWVAR 1
7832: PUSH
7833: LD_INT 18900
7835: PUSH
7836: LD_INT 16800
7838: PUSH
7839: LD_INT 16800
7841: PUSH
7842: LD_INT 15750
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: LD_OWVAR 67
7855: ARRAY
7856: GREATEREQUAL
7857: OR
7858: IFFALSE 8366
7860: GO 7862
7862: DISABLE
// begin outerAreaAchived := true ;
7863: LD_ADDR_EXP 15
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7871: LD_INT 700
7873: PPUSH
7874: CALL_OW 67
// DialogueOn ;
7878: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7882: LD_EXP 27
7886: PPUSH
7887: LD_STRING DShar-radio-1
7889: PPUSH
7890: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7894: LD_EXP 27
7898: PPUSH
7899: LD_STRING DShar-radio-2
7901: PPUSH
7902: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_STRING DH-radio-2
7913: PPUSH
7914: CALL_OW 88
// DialogueOff ;
7918: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7922: LD_STRING Gaidar
7924: PPUSH
7925: CALL_OW 337
// if Difficulty < 3 then
7929: LD_OWVAR 67
7933: PUSH
7934: LD_INT 3
7936: LESS
7937: IFFALSE 8003
// begin DialogueOn ;
7939: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7943: LD_INT 11
7945: PPUSH
7946: LD_INT 14
7948: PPUSH
7949: LD_INT 2
7951: PPUSH
7952: LD_INT 6
7954: NEG
7955: PPUSH
7956: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7960: LD_INT 11
7962: PPUSH
7963: LD_INT 14
7965: PPUSH
7966: LD_INT 2
7968: PPUSH
7969: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7973: LD_INT 11
7975: PPUSH
7976: LD_INT 14
7978: PPUSH
7979: CALL_OW 84
// dwait ( 0 0$1 ) ;
7983: LD_INT 35
7985: PPUSH
7986: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7990: LD_EXP 19
7994: PPUSH
7995: CALL_OW 87
// DialogueOff ;
7999: CALL_OW 7
// end ; wait ( 1 1$20 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
8003: LD_INT 2800
8005: PUSH
8006: LD_INT 350
8008: PPUSH
8009: LD_INT 525
8011: PPUSH
8012: CALL_OW 12
8016: PUSH
8017: LD_OWVAR 67
8021: MUL
8022: PLUS
8023: PPUSH
8024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8028: LD_INT 35
8030: PPUSH
8031: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
8035: LD_INT 2
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: CALL_OW 428
8045: PUSH
8046: LD_INT 0
8048: EQUAL
8049: IFFALSE 8028
// SetDir ( Gaidar , 2 ) ;
8051: LD_EXP 36
8055: PPUSH
8056: LD_INT 2
8058: PPUSH
8059: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
8063: LD_EXP 36
8067: PPUSH
8068: LD_INT 2
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: LD_INT 0
8076: PPUSH
8077: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
8081: LD_EXP 36
8085: PPUSH
8086: LD_INT 19
8088: PPUSH
8089: LD_INT 24
8091: PPUSH
8092: CALL_OW 111
// if Difficulty < 3 then
8096: LD_OWVAR 67
8100: PUSH
8101: LD_INT 3
8103: LESS
8104: IFFALSE 8143
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8106: LD_INT 11
8108: PPUSH
8109: LD_INT 14
8111: PPUSH
8112: LD_INT 2
8114: PPUSH
8115: LD_INT 6
8117: NEG
8118: PPUSH
8119: CALL_OW 330
// wait ( 0 0$2 ) ;
8123: LD_INT 70
8125: PPUSH
8126: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
8130: LD_INT 11
8132: PPUSH
8133: LD_INT 14
8135: PPUSH
8136: LD_INT 2
8138: PPUSH
8139: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
8143: LD_EXP 36
8147: PPUSH
8148: LD_INT 210
8150: PPUSH
8151: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8155: LD_EXP 36
8159: PPUSH
8160: LD_INT 38
8162: PPUSH
8163: LD_INT 47
8165: PPUSH
8166: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8170: LD_EXP 36
8174: PPUSH
8175: LD_INT 32
8177: PPUSH
8178: LD_INT 59
8180: PPUSH
8181: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8185: LD_EXP 36
8189: PPUSH
8190: LD_INT 350
8192: PPUSH
8193: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8197: LD_EXP 36
8201: PPUSH
8202: LD_INT 62
8204: PPUSH
8205: LD_INT 116
8207: PPUSH
8208: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8212: LD_EXP 36
8216: PPUSH
8217: LD_INT 92
8219: PPUSH
8220: LD_INT 177
8222: PPUSH
8223: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8227: LD_INT 35
8229: PPUSH
8230: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8234: LD_EXP 36
8238: PPUSH
8239: CALL_OW 301
8243: PUSH
8244: LD_EXP 36
8248: PPUSH
8249: LD_INT 92
8251: PPUSH
8252: LD_INT 177
8254: PPUSH
8255: CALL_OW 307
8259: OR
8260: IFFALSE 8227
// if IsAt ( Gaidar , 92 , 177 ) then
8262: LD_EXP 36
8266: PPUSH
8267: LD_INT 92
8269: PPUSH
8270: LD_INT 177
8272: PPUSH
8273: CALL_OW 307
8277: IFFALSE 8344
// begin DialogueOn ;
8279: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8283: LD_INT 92
8285: PPUSH
8286: LD_INT 177
8288: PPUSH
8289: LD_INT 2
8291: PPUSH
8292: LD_INT 3
8294: NEG
8295: PPUSH
8296: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8300: LD_EXP 36
8304: PPUSH
8305: CALL_OW 87
// dwait ( 0 0$2 ) ;
8309: LD_INT 70
8311: PPUSH
8312: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8316: LD_INT 92
8318: PPUSH
8319: LD_INT 177
8321: PPUSH
8322: LD_INT 2
8324: PPUSH
8325: CALL_OW 331
// DialogueOff ;
8329: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8333: LD_EXP 36
8337: PPUSH
8338: CALL_OW 64
// exit ;
8342: GO 8366
// end ; gaidarKilled := true ;
8344: LD_ADDR_EXP 14
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8352: LD_STRING GaidarKilled
8354: PPUSH
8355: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8359: LD_STRING ACH_COMMISAR
8361: PPUSH
8362: CALL_OW 543
// end ;
8366: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8367: LD_INT 2
8369: PPUSH
8370: LD_EXP 36
8374: PPUSH
8375: CALL_OW 292
8379: IFFALSE 8396
8381: GO 8383
8383: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8384: LD_EXP 36
8388: PPUSH
8389: LD_STRING DT-objective-1
8391: PPUSH
8392: CALL_OW 88
8396: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8397: LD_INT 22
8399: PUSH
8400: LD_INT 2
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 2
8409: PUSH
8410: LD_INT 95
8412: PUSH
8413: LD_INT 5
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: LD_INT 95
8422: PUSH
8423: LD_INT 6
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 95
8432: PUSH
8433: LD_INT 7
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: IFFALSE 8491
8456: GO 8458
8458: DISABLE
// begin DialogueOn ;
8459: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8463: LD_EXP 19
8467: PPUSH
8468: LD_STRING DH-outpost-last-1
8470: PPUSH
8471: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8475: LD_EXP 35
8479: PPUSH
8480: LD_STRING DB-outpost-last-2
8482: PPUSH
8483: CALL_OW 94
// DialogueOff ;
8487: CALL_OW 7
// end ;
8491: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8492: LD_INT 200
8494: PPUSH
8495: CALL_OW 256
8499: PUSH
8500: LD_INT 999
8502: LESS
8503: PUSH
8504: LD_INT 200
8506: PPUSH
8507: CALL_OW 255
8511: PUSH
8512: LD_INT 2
8514: EQUAL
8515: OR
8516: IFFALSE 8689
8518: GO 8520
8520: DISABLE
8521: LD_INT 0
8523: PPUSH
8524: PPUSH
// begin if not earlyEscape then
8525: LD_EXP 16
8529: NOT
8530: IFFALSE 8556
// begin SayRadio ( Burlak , DB-end-1 ) ;
8532: LD_EXP 35
8536: PPUSH
8537: LD_STRING DB-end-1
8539: PPUSH
8540: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8544: LD_EXP 19
8548: PPUSH
8549: LD_STRING DH-end-2
8551: PPUSH
8552: CALL_OW 88
// end ; if tick <= 15 15$00 then
8556: LD_OWVAR 1
8560: PUSH
8561: LD_INT 31500
8563: LESSEQUAL
8564: IFFALSE 8573
// SetAchievement ( ACH_FIST ) ;
8566: LD_STRING ACH_FIST
8568: PPUSH
8569: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: LD_INT 22
8580: PUSH
8581: LD_INT 3
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: LD_INT 21
8593: PUSH
8594: LD_INT 3
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PPUSH
8609: CALL_OW 69
8613: ST_TO_ADDR
// if not tmp then
8614: LD_VAR 0 2
8618: NOT
8619: IFFALSE 8623
// exit ;
8621: GO 8689
// for i in tmp do
8623: LD_ADDR_VAR 0 1
8627: PUSH
8628: LD_VAR 0 2
8632: PUSH
8633: FOR_IN
8634: IFFALSE 8687
// begin SetTag ( i , tEscape ) ;
8636: LD_VAR 0 1
8640: PPUSH
8641: LD_EXP 18
8645: PPUSH
8646: CALL_OW 109
// if IsInUnit ( i ) then
8650: LD_VAR 0 1
8654: PPUSH
8655: CALL_OW 310
8659: IFFALSE 8670
// ComExitBuilding ( i ) ;
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8670: LD_VAR 0 1
8674: PPUSH
8675: LD_INT 92
8677: PPUSH
8678: LD_INT 177
8680: PPUSH
8681: CALL_OW 171
// end ;
8685: GO 8633
8687: POP
8688: POP
// end ;
8689: PPOPN 2
8691: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8692: LD_INT 4
8694: PPUSH
8695: LD_INT 22
8697: PUSH
8698: LD_INT 2
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 70
8709: PUSH
8710: LD_EXP 15
8714: NOT
8715: AND
8716: PUSH
8717: LD_EXP 28
8721: PPUSH
8722: CALL_OW 302
8726: AND
8727: IFFALSE 8967
8729: GO 8731
8731: DISABLE
// begin DialogueOn ;
8732: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8736: LD_INT 111
8738: PPUSH
8739: LD_INT 54
8741: PPUSH
8742: LD_INT 2
8744: PPUSH
8745: LD_INT 16
8747: NEG
8748: PPUSH
8749: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8753: LD_INT 111
8755: PPUSH
8756: LD_INT 53
8758: PPUSH
8759: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8763: LD_INT 10
8765: PPUSH
8766: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8770: LD_EXP 28
8774: PPUSH
8775: LD_STRING DKs-Hannibal-1
8777: PPUSH
8778: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8782: LD_EXP 28
8786: PPUSH
8787: LD_STRING DKs-Hannibal-2
8789: PPUSH
8790: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8794: LD_EXP 28
8798: PPUSH
8799: LD_STRING DKs-Hannibal-3
8801: PPUSH
8802: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8806: LD_EXP 28
8810: PPUSH
8811: LD_STRING DKs-Hannibal-4
8813: PPUSH
8814: CALL_OW 88
// dwait ( 0 0$1 ) ;
8818: LD_INT 35
8820: PPUSH
8821: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8825: LD_INT 111
8827: PPUSH
8828: LD_INT 54
8830: PPUSH
8831: LD_INT 2
8833: PPUSH
8834: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8838: LD_INT 173
8840: PPUSH
8841: LD_INT 76
8843: PPUSH
8844: LD_INT 2
8846: PPUSH
8847: LD_INT 12
8849: NEG
8850: PPUSH
8851: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8855: LD_INT 173
8857: PPUSH
8858: LD_INT 76
8860: PPUSH
8861: LD_INT 2
8863: PPUSH
8864: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8868: LD_INT 173
8870: PPUSH
8871: LD_INT 76
8873: PPUSH
8874: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8878: LD_EXP 28
8882: PPUSH
8883: LD_STRING DKs-Hannibal-5
8885: PPUSH
8886: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8890: LD_EXP 23
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 2
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 34
8907: PUSH
8908: LD_INT 26
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: NOT
8924: AND
8925: IFFALSE 8963
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8927: LD_EXP 23
8931: PPUSH
8932: LD_STRING DKam-Hannibal-a-6
8934: PPUSH
8935: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8939: LD_EXP 23
8943: PPUSH
8944: LD_STRING DKam-Hannibal-a-7
8946: PPUSH
8947: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8951: LD_EXP 20
8955: PPUSH
8956: LD_STRING DG-Hannibal-a-8
8958: PPUSH
8959: CALL_OW 88
// end ; DialogueOff ;
8963: CALL_OW 7
// end ;
8967: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8968: LD_INT 225
8970: PPUSH
8971: CALL_OW 302
8975: PUSH
8976: LD_INT 200
8978: PPUSH
8979: CALL_OW 302
8983: AND
8984: PUSH
8985: LD_INT 12
8987: PPUSH
8988: LD_INT 21
8990: PUSH
8991: LD_INT 3
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: PUSH
9003: LD_INT 2
9005: GREATER
9006: AND
9007: PUSH
9008: LD_INT 13
9010: PPUSH
9011: LD_INT 22
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PPUSH
9021: CALL_OW 70
9025: PUSH
9026: LD_INT 3
9028: GREATER
9029: AND
9030: IFFALSE 9043
9032: GO 9034
9034: DISABLE
// hannibalPath := true ;
9035: LD_ADDR_EXP 9
9039: PUSH
9040: LD_INT 1
9042: ST_TO_ADDR
9043: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
9044: LD_EXP 9
9048: PUSH
9049: LD_INT 6
9051: PPUSH
9052: LD_INT 22
9054: PUSH
9055: LD_INT 2
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PPUSH
9062: CALL_OW 70
9066: AND
9067: IFFALSE 9412
9069: GO 9071
9071: DISABLE
9072: LD_INT 0
9074: PPUSH
9075: PPUSH
9076: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
9077: LD_ADDR_VAR 0 2
9081: PUSH
9082: LD_INT 6
9084: PPUSH
9085: LD_INT 22
9087: PUSH
9088: LD_INT 2
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 70
9099: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
9100: LD_ADDR_VAR 0 3
9104: PUSH
9105: LD_VAR 0 2
9109: PPUSH
9110: LD_INT 34
9112: PUSH
9113: LD_INT 26
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 72
9124: PUSH
9125: LD_INT 0
9127: GREATER
9128: ST_TO_ADDR
// DialogueOn ;
9129: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
9133: LD_EXP 19
9137: PPUSH
9138: LD_STRING DH-Cleverattack-1
9140: PPUSH
9141: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
9145: LD_EXP 19
9149: PPUSH
9150: LD_STRING DH-Cleverattack-2
9152: PPUSH
9153: CALL_OW 88
// if hasFlameThrower then
9157: LD_VAR 0 3
9161: IFFALSE 9189
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9163: LD_EXP 35
9167: PPUSH
9168: LD_STRING DB-Cleverattack-3
9170: PPUSH
9171: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9175: LD_EXP 19
9179: PPUSH
9180: LD_STRING DH-Cleverattack-4
9182: PPUSH
9183: CALL_OW 88
// end else
9187: GO 9213
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9189: LD_EXP 35
9193: PPUSH
9194: LD_STRING DB-Cleverattack-a-3
9196: PPUSH
9197: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9201: LD_EXP 19
9205: PPUSH
9206: LD_STRING DH-Cleverattack-a-4
9208: PPUSH
9209: CALL_OW 88
// end ; DialogueOff ;
9213: CALL_OW 7
// if not hasFlameThrower then
9217: LD_VAR 0 3
9221: NOT
9222: IFFALSE 9226
// exit ;
9224: GO 9412
// earlyEscape := true ;
9226: LD_ADDR_EXP 16
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9234: LD_INT 140
9236: PPUSH
9237: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: LD_INT 25
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 25
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 4
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PUSH
9304: LD_EXP 22
9308: PUSH
9309: LD_EXP 37
9313: PUSH
9314: LD_EXP 36
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: DIFF
9324: ST_TO_ADDR
// for i in tmp do
9325: LD_ADDR_VAR 0 1
9329: PUSH
9330: LD_VAR 0 2
9334: PUSH
9335: FOR_IN
9336: IFFALSE 9410
// begin if Prob ( 40 + 10 * Difficulty ) then
9338: LD_INT 40
9340: PUSH
9341: LD_INT 10
9343: PUSH
9344: LD_OWVAR 67
9348: MUL
9349: PLUS
9350: PPUSH
9351: CALL_OW 13
9355: IFFALSE 9359
// continue ;
9357: GO 9335
// SetTag ( i , tEscape ) ;
9359: LD_VAR 0 1
9363: PPUSH
9364: LD_EXP 18
9368: PPUSH
9369: CALL_OW 109
// if IsInUnit ( i ) then
9373: LD_VAR 0 1
9377: PPUSH
9378: CALL_OW 310
9382: IFFALSE 9393
// ComExitBuilding ( i ) ;
9384: LD_VAR 0 1
9388: PPUSH
9389: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_INT 92
9400: PPUSH
9401: LD_INT 177
9403: PPUSH
9404: CALL_OW 171
// end ;
9408: GO 9335
9410: POP
9411: POP
// end ;
9412: PPOPN 3
9414: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9415: LD_INT 9
9417: PPUSH
9418: LD_INT 2
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_INT 6
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: PPUSH
9446: CALL_OW 70
9450: IFFALSE 9548
9452: GO 9454
9454: DISABLE
9455: LD_INT 0
9457: PPUSH
// begin enable ;
9458: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9459: LD_ADDR_VAR 0 1
9463: PUSH
9464: LD_INT 9
9466: PPUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 22
9482: PUSH
9483: LD_INT 6
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 70
9499: PUSH
9500: FOR_IN
9501: IFFALSE 9546
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9503: LD_VAR 0 1
9507: PPUSH
9508: CALL_OW 110
9512: PUSH
9513: LD_EXP 18
9517: EQUAL
9518: PUSH
9519: LD_VAR 0 1
9523: PPUSH
9524: CALL_OW 255
9528: PUSH
9529: LD_INT 6
9531: EQUAL
9532: OR
9533: IFFALSE 9544
// RemoveUnit ( i ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: CALL_OW 64
9544: GO 9500
9546: POP
9547: POP
// end ;
9548: PPOPN 1
9550: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9551: LD_EXP 24
9555: PUSH
9556: LD_EXP 24
9560: PPUSH
9561: CALL_OW 256
9565: PUSH
9566: LD_INT 3
9568: LESS
9569: AND
9570: IFFALSE 9616
9572: GO 9574
9574: DISABLE
// begin DialogueOn ;
9575: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9579: LD_EXP 24
9583: PPUSH
9584: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9588: LD_EXP 24
9592: PPUSH
9593: LD_STRING DK-Kkilled-1
9595: PPUSH
9596: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9600: LD_EXP 19
9604: PPUSH
9605: LD_STRING DH-Kkilled-2
9607: PPUSH
9608: CALL_OW 88
// DialogueOff ;
9612: CALL_OW 7
// end ;
9616: END
// every 0 0$1 trigger kaiaKilledByRussian do
9617: LD_EXP 8
9621: IFFALSE 9638
9623: GO 9625
9625: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9626: LD_EXP 19
9630: PPUSH
9631: LD_STRING DH-Kkilled-3
9633: PPUSH
9634: CALL_OW 88
9638: END
// every 0 0$1 trigger tick >= 24 24$00 do
9639: LD_OWVAR 1
9643: PUSH
9644: LD_INT 50400
9646: GREATEREQUAL
9647: IFFALSE 9684
9649: GO 9651
9651: DISABLE
// begin DialogueOn ;
9652: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9656: LD_EXP 27
9660: PPUSH
9661: LD_STRING DShar-slow-1
9663: PPUSH
9664: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9668: LD_EXP 27
9672: PPUSH
9673: LD_STRING DShar-slow-2
9675: PPUSH
9676: CALL_OW 94
// DialogueOff ;
9680: CALL_OW 7
// end ;
9684: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9685: LD_OWVAR 1
9689: PUSH
9690: LD_INT 84000
9692: PUSH
9693: LD_INT 75600
9695: PUSH
9696: LD_INT 67200
9698: PUSH
9699: LD_INT 63000
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_OWVAR 67
9712: ARRAY
9713: GREATEREQUAL
9714: IFFALSE 9758
9716: GO 9718
9718: DISABLE
// begin DialogueOn ;
9719: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9723: LD_EXP 27
9727: PPUSH
9728: LD_STRING DShar-fail-1
9730: PPUSH
9731: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9735: LD_EXP 27
9739: PPUSH
9740: LD_STRING DShar-fail-2
9742: PPUSH
9743: CALL_OW 94
// DialogueOff ;
9747: CALL_OW 7
// YouLost ( Time ) ;
9751: LD_STRING Time
9753: PPUSH
9754: CALL_OW 104
// end ;
9758: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9759: LD_INT 22
9761: PUSH
9762: LD_INT 3
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 30
9774: PUSH
9775: LD_INT 1
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 0
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: PUSH
9806: LD_INT 0
9808: EQUAL
9809: IFFALSE 10472
9811: GO 9813
9813: DISABLE
9814: LD_INT 0
9816: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 5 then
9817: LD_INT 22
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 50
9849: PUSH
9850: EMPTY
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: PPUSH
9859: CALL_OW 69
9863: PPUSH
9864: CALL 33992 0 1
9868: PUSH
9869: LD_INT 5
9871: LESS
9872: IFFALSE 9883
// begin YouLost ( Troops ) ;
9874: LD_STRING Troops
9876: PPUSH
9877: CALL_OW 104
// exit ;
9881: GO 10472
// end ; if ( tick + gameTime ) <= 55 55$00 then
9883: LD_OWVAR 1
9887: PUSH
9888: LD_EXP 5
9892: PLUS
9893: PUSH
9894: LD_INT 115500
9896: LESSEQUAL
9897: IFFALSE 9906
// SetAchievement ( ACH_HSPEED_4 ) ;
9899: LD_STRING ACH_HSPEED_4
9901: PPUSH
9902: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9906: LD_OWVAR 1
9910: PUSH
9911: LD_EXP 5
9915: PLUS
9916: PUSH
9917: LD_INT 178500
9919: PUSH
9920: LD_INT 157500
9922: PUSH
9923: LD_INT 136500
9925: PUSH
9926: LD_INT 126000
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: PUSH
9935: LD_OWVAR 67
9939: ARRAY
9940: LESSEQUAL
9941: IFFALSE 9955
// AddMedal ( med1 , 1 ) else
9943: LD_STRING med1
9945: PPUSH
9946: LD_INT 1
9948: PPUSH
9949: CALL_OW 101
9953: GO 9966
// AddMedal ( med1 , - 1 ) ;
9955: LD_STRING med1
9957: PPUSH
9958: LD_INT 1
9960: NEG
9961: PPUSH
9962: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9966: LD_EXP 7
9970: PUSH
9971: LD_INT 3
9973: GREATEREQUAL
9974: PUSH
9975: LD_EXP 11
9979: MUL
9980: PUSH
9981: LD_EXP 9
9985: MUL
9986: PUSH
9987: LD_EXP 6
9991: PUSH
9992: LD_INT 6
9994: PUSH
9995: LD_INT 5
9997: PUSH
9998: LD_INT 4
10000: PUSH
10001: LD_INT 3
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: PUSH
10010: LD_OWVAR 67
10014: ARRAY
10015: LESS
10016: MUL
10017: IFFALSE 10031
// AddMedal ( med2 , 1 ) else
10019: LD_STRING med2
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: CALL_OW 101
10029: GO 10105
// if flamethrowers < 3 then
10031: LD_EXP 7
10035: PUSH
10036: LD_INT 3
10038: LESS
10039: IFFALSE 10054
// AddMedal ( med2 , - 1 ) else
10041: LD_STRING med2
10043: PPUSH
10044: LD_INT 1
10046: NEG
10047: PPUSH
10048: CALL_OW 101
10052: GO 10105
// if not baseHill then
10054: LD_EXP 11
10058: NOT
10059: IFFALSE 10074
// AddMedal ( med2 , - 2 ) else
10061: LD_STRING med2
10063: PPUSH
10064: LD_INT 2
10066: NEG
10067: PPUSH
10068: CALL_OW 101
10072: GO 10105
// if not hannibalPath then
10074: LD_EXP 9
10078: NOT
10079: IFFALSE 10094
// AddMedal ( med2 , - 3 ) else
10081: LD_STRING med2
10083: PPUSH
10084: LD_INT 3
10086: NEG
10087: PPUSH
10088: CALL_OW 101
10092: GO 10105
// AddMedal ( med3 , - 2 ) ;
10094: LD_STRING med3
10096: PPUSH
10097: LD_INT 2
10099: NEG
10100: PPUSH
10101: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
10105: LD_EXP 14
10109: PPUSH
10110: LD_STRING 04_2_GaidarKilled
10112: PPUSH
10113: CALL_OW 39
// if gaidarKilled then
10117: LD_EXP 14
10121: IFFALSE 10135
// AddMedal ( med3 , 1 ) else
10123: LD_STRING med3
10125: PPUSH
10126: LD_INT 1
10128: PPUSH
10129: CALL_OW 101
10133: GO 10146
// AddMedal ( med3 , - 1 ) ;
10135: LD_STRING med3
10137: PPUSH
10138: LD_INT 1
10140: NEG
10141: PPUSH
10142: CALL_OW 101
// GiveMedals ( MAIN ) ;
10146: LD_STRING MAIN
10148: PPUSH
10149: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
10153: LD_INT 22
10155: PUSH
10156: LD_INT 2
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: LD_INT 23
10168: PUSH
10169: LD_INT 0
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 69
10188: PPUSH
10189: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
10193: LD_EXP 19
10197: PPUSH
10198: LD_STRING 04_2_Heike
10200: PPUSH
10201: CALL_OW 38
// if Aviradze then
10205: LD_EXP 29
10209: IFFALSE 10223
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
10211: LD_EXP 29
10215: PPUSH
10216: LD_STRING 04_2_Aviradze
10218: PPUSH
10219: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10223: LD_EXP 22
10227: PUSH
10228: LD_EXP 22
10232: PPUSH
10233: CALL_OW 255
10237: PUSH
10238: LD_INT 2
10240: EQUAL
10241: AND
10242: IFFALSE 10272
// begin if ibrahimOnRuSide then
10244: LD_EXP 3
10248: IFFALSE 10260
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10250: LD_INT 1
10252: PPUSH
10253: LD_STRING 04_2_IbrahimJoined
10255: PPUSH
10256: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10260: LD_EXP 22
10264: PPUSH
10265: LD_STRING 04_2_Ibrahim
10267: PPUSH
10268: CALL_OW 38
// end ; if Kamil then
10272: LD_EXP 23
10276: IFFALSE 10290
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10278: LD_EXP 23
10282: PPUSH
10283: LD_STRING 04_2_Kamil
10285: PPUSH
10286: CALL_OW 38
// if Sophia then
10290: LD_EXP 25
10294: IFFALSE 10308
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10296: LD_EXP 25
10300: PPUSH
10301: LD_STRING 04_2_Sophia
10303: PPUSH
10304: CALL_OW 38
// if Kaia then
10308: LD_EXP 24
10312: IFFALSE 10326
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10314: LD_EXP 24
10318: PPUSH
10319: LD_STRING 04_2_Kaia
10321: PPUSH
10322: CALL_OW 38
// if Givi then
10326: LD_EXP 20
10330: IFFALSE 10344
// SaveCharacters ( Givi , 04_2_Givi ) ;
10332: LD_EXP 20
10336: PPUSH
10337: LD_STRING 04_2_Givi
10339: PPUSH
10340: CALL_OW 38
// if Mike then
10344: LD_EXP 21
10348: IFFALSE 10362
// SaveCharacters ( Mike , 04_2_Mike ) ;
10350: LD_EXP 21
10354: PPUSH
10355: LD_STRING 04_2_Mike
10357: PPUSH
10358: CALL_OW 38
// if Markov then
10362: LD_EXP 26
10366: IFFALSE 10380
// SaveCharacters ( Markov , 04_2_Markov ) ;
10368: LD_EXP 26
10372: PPUSH
10373: LD_STRING 04_2_Markov
10375: PPUSH
10376: CALL_OW 38
// if Kurt then
10380: LD_EXP 28
10384: IFFALSE 10398
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10386: LD_EXP 28
10390: PPUSH
10391: LD_STRING 04_2_Kurt
10393: PPUSH
10394: CALL_OW 38
// if heikeSecondSquad then
10398: LD_EXP 30
10402: IFFALSE 10416
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10404: LD_EXP 30
10408: PPUSH
10409: LD_STRING 04_2_others
10411: PPUSH
10412: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10416: LD_ADDR_VAR 0 1
10420: PUSH
10421: LD_INT 22
10423: PUSH
10424: LD_INT 2
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 23
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: ST_TO_ADDR
// if tmp then
10450: LD_VAR 0 1
10454: IFFALSE 10468
// SaveCharacters ( tmp , 04_2_apes ) ;
10456: LD_VAR 0 1
10460: PPUSH
10461: LD_STRING 04_2_apes
10463: PPUSH
10464: CALL_OW 38
// YouWin ;
10468: CALL_OW 103
// end ; end_of_file
10472: PPOPN 1
10474: END
// export globalGameSaveCounter ; every 0 0$1 do
10475: GO 10477
10477: DISABLE
// begin enable ;
10478: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10479: LD_STRING updateTimer(
10481: PUSH
10482: LD_OWVAR 1
10486: STR
10487: PUSH
10488: LD_STRING );
10490: STR
10491: PPUSH
10492: CALL_OW 559
// end ;
10496: END
// every 0 0$1 do
10497: GO 10499
10499: DISABLE
// begin globalGameSaveCounter := 0 ;
10500: LD_ADDR_EXP 44
10504: PUSH
10505: LD_INT 0
10507: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10508: LD_STRING setGameSaveCounter(0)
10510: PPUSH
10511: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10515: LD_STRING initStreamRollete();
10517: PPUSH
10518: CALL_OW 559
// InitStreamMode ;
10522: CALL 11865 0 0
// DefineStreamItems ( false ) ;
10526: LD_INT 0
10528: PPUSH
10529: CALL 12329 0 1
// end ;
10533: END
// export function SOS_MapStart ( ) ; begin
10534: LD_INT 0
10536: PPUSH
// if streamModeActive then
10537: LD_EXP 45
10541: IFFALSE 10550
// DefineStreamItems ( true ) ;
10543: LD_INT 1
10545: PPUSH
10546: CALL 12329 0 1
// UpdateLuaVariables ( ) ;
10550: CALL 10567 0 0
// UpdateFactoryWaypoints ( ) ;
10554: CALL 25331 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10558: CALL 25583 0 0
// end ;
10562: LD_VAR 0 1
10566: RET
// function UpdateLuaVariables ( ) ; begin
10567: LD_INT 0
10569: PPUSH
// if globalGameSaveCounter then
10570: LD_EXP 44
10574: IFFALSE 10608
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10576: LD_ADDR_EXP 44
10580: PUSH
10581: LD_EXP 44
10585: PPUSH
10586: CALL 70962 0 1
10590: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10591: LD_STRING setGameSaveCounter(
10593: PUSH
10594: LD_EXP 44
10598: STR
10599: PUSH
10600: LD_STRING )
10602: STR
10603: PPUSH
10604: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10608: LD_STRING setGameDifficulty(
10610: PUSH
10611: LD_OWVAR 67
10615: STR
10616: PUSH
10617: LD_STRING )
10619: STR
10620: PPUSH
10621: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10625: LD_STRING displayDifficulty(
10627: PUSH
10628: LD_OWVAR 67
10632: STR
10633: PUSH
10634: LD_STRING )
10636: STR
10637: PPUSH
10638: CALL_OW 559
// end ;
10642: LD_VAR 0 1
10646: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10647: LD_INT 0
10649: PPUSH
// if p2 = stream_mode then
10650: LD_VAR 0 2
10654: PUSH
10655: LD_INT 100
10657: EQUAL
10658: IFFALSE 11661
// begin if not StreamModeActive then
10660: LD_EXP 45
10664: NOT
10665: IFFALSE 10675
// StreamModeActive := true ;
10667: LD_ADDR_EXP 45
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 0 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 0
10682: EQUAL
10683: IFFALSE 10689
// InitStreamMode ;
10685: CALL 11865 0 0
// if p3 = 1 then
10689: LD_VAR 0 3
10693: PUSH
10694: LD_INT 1
10696: EQUAL
10697: IFFALSE 10707
// sRocket := true ;
10699: LD_ADDR_EXP 50
10703: PUSH
10704: LD_INT 1
10706: ST_TO_ADDR
// if p3 = 2 then
10707: LD_VAR 0 3
10711: PUSH
10712: LD_INT 2
10714: EQUAL
10715: IFFALSE 10725
// sSpeed := true ;
10717: LD_ADDR_EXP 49
10721: PUSH
10722: LD_INT 1
10724: ST_TO_ADDR
// if p3 = 3 then
10725: LD_VAR 0 3
10729: PUSH
10730: LD_INT 3
10732: EQUAL
10733: IFFALSE 10743
// sEngine := true ;
10735: LD_ADDR_EXP 51
10739: PUSH
10740: LD_INT 1
10742: ST_TO_ADDR
// if p3 = 4 then
10743: LD_VAR 0 3
10747: PUSH
10748: LD_INT 4
10750: EQUAL
10751: IFFALSE 10761
// sSpec := true ;
10753: LD_ADDR_EXP 48
10757: PUSH
10758: LD_INT 1
10760: ST_TO_ADDR
// if p3 = 5 then
10761: LD_VAR 0 3
10765: PUSH
10766: LD_INT 5
10768: EQUAL
10769: IFFALSE 10779
// sLevel := true ;
10771: LD_ADDR_EXP 52
10775: PUSH
10776: LD_INT 1
10778: ST_TO_ADDR
// if p3 = 6 then
10779: LD_VAR 0 3
10783: PUSH
10784: LD_INT 6
10786: EQUAL
10787: IFFALSE 10797
// sArmoury := true ;
10789: LD_ADDR_EXP 53
10793: PUSH
10794: LD_INT 1
10796: ST_TO_ADDR
// if p3 = 7 then
10797: LD_VAR 0 3
10801: PUSH
10802: LD_INT 7
10804: EQUAL
10805: IFFALSE 10815
// sRadar := true ;
10807: LD_ADDR_EXP 54
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// if p3 = 8 then
10815: LD_VAR 0 3
10819: PUSH
10820: LD_INT 8
10822: EQUAL
10823: IFFALSE 10833
// sBunker := true ;
10825: LD_ADDR_EXP 55
10829: PUSH
10830: LD_INT 1
10832: ST_TO_ADDR
// if p3 = 9 then
10833: LD_VAR 0 3
10837: PUSH
10838: LD_INT 9
10840: EQUAL
10841: IFFALSE 10851
// sHack := true ;
10843: LD_ADDR_EXP 56
10847: PUSH
10848: LD_INT 1
10850: ST_TO_ADDR
// if p3 = 10 then
10851: LD_VAR 0 3
10855: PUSH
10856: LD_INT 10
10858: EQUAL
10859: IFFALSE 10869
// sFire := true ;
10861: LD_ADDR_EXP 57
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
// if p3 = 11 then
10869: LD_VAR 0 3
10873: PUSH
10874: LD_INT 11
10876: EQUAL
10877: IFFALSE 10887
// sRefresh := true ;
10879: LD_ADDR_EXP 58
10883: PUSH
10884: LD_INT 1
10886: ST_TO_ADDR
// if p3 = 12 then
10887: LD_VAR 0 3
10891: PUSH
10892: LD_INT 12
10894: EQUAL
10895: IFFALSE 10905
// sExp := true ;
10897: LD_ADDR_EXP 59
10901: PUSH
10902: LD_INT 1
10904: ST_TO_ADDR
// if p3 = 13 then
10905: LD_VAR 0 3
10909: PUSH
10910: LD_INT 13
10912: EQUAL
10913: IFFALSE 10923
// sDepot := true ;
10915: LD_ADDR_EXP 60
10919: PUSH
10920: LD_INT 1
10922: ST_TO_ADDR
// if p3 = 14 then
10923: LD_VAR 0 3
10927: PUSH
10928: LD_INT 14
10930: EQUAL
10931: IFFALSE 10941
// sFlag := true ;
10933: LD_ADDR_EXP 61
10937: PUSH
10938: LD_INT 1
10940: ST_TO_ADDR
// if p3 = 15 then
10941: LD_VAR 0 3
10945: PUSH
10946: LD_INT 15
10948: EQUAL
10949: IFFALSE 10959
// sKamikadze := true ;
10951: LD_ADDR_EXP 69
10955: PUSH
10956: LD_INT 1
10958: ST_TO_ADDR
// if p3 = 16 then
10959: LD_VAR 0 3
10963: PUSH
10964: LD_INT 16
10966: EQUAL
10967: IFFALSE 10977
// sTroll := true ;
10969: LD_ADDR_EXP 70
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// if p3 = 17 then
10977: LD_VAR 0 3
10981: PUSH
10982: LD_INT 17
10984: EQUAL
10985: IFFALSE 10995
// sSlow := true ;
10987: LD_ADDR_EXP 71
10991: PUSH
10992: LD_INT 1
10994: ST_TO_ADDR
// if p3 = 18 then
10995: LD_VAR 0 3
10999: PUSH
11000: LD_INT 18
11002: EQUAL
11003: IFFALSE 11013
// sLack := true ;
11005: LD_ADDR_EXP 72
11009: PUSH
11010: LD_INT 1
11012: ST_TO_ADDR
// if p3 = 19 then
11013: LD_VAR 0 3
11017: PUSH
11018: LD_INT 19
11020: EQUAL
11021: IFFALSE 11031
// sTank := true ;
11023: LD_ADDR_EXP 74
11027: PUSH
11028: LD_INT 1
11030: ST_TO_ADDR
// if p3 = 20 then
11031: LD_VAR 0 3
11035: PUSH
11036: LD_INT 20
11038: EQUAL
11039: IFFALSE 11049
// sRemote := true ;
11041: LD_ADDR_EXP 75
11045: PUSH
11046: LD_INT 1
11048: ST_TO_ADDR
// if p3 = 21 then
11049: LD_VAR 0 3
11053: PUSH
11054: LD_INT 21
11056: EQUAL
11057: IFFALSE 11067
// sPowell := true ;
11059: LD_ADDR_EXP 76
11063: PUSH
11064: LD_INT 1
11066: ST_TO_ADDR
// if p3 = 22 then
11067: LD_VAR 0 3
11071: PUSH
11072: LD_INT 22
11074: EQUAL
11075: IFFALSE 11085
// sTeleport := true ;
11077: LD_ADDR_EXP 79
11081: PUSH
11082: LD_INT 1
11084: ST_TO_ADDR
// if p3 = 23 then
11085: LD_VAR 0 3
11089: PUSH
11090: LD_INT 23
11092: EQUAL
11093: IFFALSE 11103
// sOilTower := true ;
11095: LD_ADDR_EXP 81
11099: PUSH
11100: LD_INT 1
11102: ST_TO_ADDR
// if p3 = 24 then
11103: LD_VAR 0 3
11107: PUSH
11108: LD_INT 24
11110: EQUAL
11111: IFFALSE 11121
// sShovel := true ;
11113: LD_ADDR_EXP 82
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// if p3 = 25 then
11121: LD_VAR 0 3
11125: PUSH
11126: LD_INT 25
11128: EQUAL
11129: IFFALSE 11139
// sSheik := true ;
11131: LD_ADDR_EXP 83
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// if p3 = 26 then
11139: LD_VAR 0 3
11143: PUSH
11144: LD_INT 26
11146: EQUAL
11147: IFFALSE 11157
// sEarthquake := true ;
11149: LD_ADDR_EXP 85
11153: PUSH
11154: LD_INT 1
11156: ST_TO_ADDR
// if p3 = 27 then
11157: LD_VAR 0 3
11161: PUSH
11162: LD_INT 27
11164: EQUAL
11165: IFFALSE 11175
// sAI := true ;
11167: LD_ADDR_EXP 86
11171: PUSH
11172: LD_INT 1
11174: ST_TO_ADDR
// if p3 = 28 then
11175: LD_VAR 0 3
11179: PUSH
11180: LD_INT 28
11182: EQUAL
11183: IFFALSE 11193
// sCargo := true ;
11185: LD_ADDR_EXP 89
11189: PUSH
11190: LD_INT 1
11192: ST_TO_ADDR
// if p3 = 29 then
11193: LD_VAR 0 3
11197: PUSH
11198: LD_INT 29
11200: EQUAL
11201: IFFALSE 11211
// sDLaser := true ;
11203: LD_ADDR_EXP 90
11207: PUSH
11208: LD_INT 1
11210: ST_TO_ADDR
// if p3 = 30 then
11211: LD_VAR 0 3
11215: PUSH
11216: LD_INT 30
11218: EQUAL
11219: IFFALSE 11229
// sExchange := true ;
11221: LD_ADDR_EXP 91
11225: PUSH
11226: LD_INT 1
11228: ST_TO_ADDR
// if p3 = 31 then
11229: LD_VAR 0 3
11233: PUSH
11234: LD_INT 31
11236: EQUAL
11237: IFFALSE 11247
// sFac := true ;
11239: LD_ADDR_EXP 92
11243: PUSH
11244: LD_INT 1
11246: ST_TO_ADDR
// if p3 = 32 then
11247: LD_VAR 0 3
11251: PUSH
11252: LD_INT 32
11254: EQUAL
11255: IFFALSE 11265
// sPower := true ;
11257: LD_ADDR_EXP 93
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// if p3 = 33 then
11265: LD_VAR 0 3
11269: PUSH
11270: LD_INT 33
11272: EQUAL
11273: IFFALSE 11283
// sRandom := true ;
11275: LD_ADDR_EXP 94
11279: PUSH
11280: LD_INT 1
11282: ST_TO_ADDR
// if p3 = 34 then
11283: LD_VAR 0 3
11287: PUSH
11288: LD_INT 34
11290: EQUAL
11291: IFFALSE 11301
// sShield := true ;
11293: LD_ADDR_EXP 95
11297: PUSH
11298: LD_INT 1
11300: ST_TO_ADDR
// if p3 = 35 then
11301: LD_VAR 0 3
11305: PUSH
11306: LD_INT 35
11308: EQUAL
11309: IFFALSE 11319
// sTime := true ;
11311: LD_ADDR_EXP 96
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// if p3 = 36 then
11319: LD_VAR 0 3
11323: PUSH
11324: LD_INT 36
11326: EQUAL
11327: IFFALSE 11337
// sTools := true ;
11329: LD_ADDR_EXP 97
11333: PUSH
11334: LD_INT 1
11336: ST_TO_ADDR
// if p3 = 101 then
11337: LD_VAR 0 3
11341: PUSH
11342: LD_INT 101
11344: EQUAL
11345: IFFALSE 11355
// sSold := true ;
11347: LD_ADDR_EXP 62
11351: PUSH
11352: LD_INT 1
11354: ST_TO_ADDR
// if p3 = 102 then
11355: LD_VAR 0 3
11359: PUSH
11360: LD_INT 102
11362: EQUAL
11363: IFFALSE 11373
// sDiff := true ;
11365: LD_ADDR_EXP 63
11369: PUSH
11370: LD_INT 1
11372: ST_TO_ADDR
// if p3 = 103 then
11373: LD_VAR 0 3
11377: PUSH
11378: LD_INT 103
11380: EQUAL
11381: IFFALSE 11391
// sFog := true ;
11383: LD_ADDR_EXP 66
11387: PUSH
11388: LD_INT 1
11390: ST_TO_ADDR
// if p3 = 104 then
11391: LD_VAR 0 3
11395: PUSH
11396: LD_INT 104
11398: EQUAL
11399: IFFALSE 11409
// sReset := true ;
11401: LD_ADDR_EXP 67
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// if p3 = 105 then
11409: LD_VAR 0 3
11413: PUSH
11414: LD_INT 105
11416: EQUAL
11417: IFFALSE 11427
// sSun := true ;
11419: LD_ADDR_EXP 68
11423: PUSH
11424: LD_INT 1
11426: ST_TO_ADDR
// if p3 = 106 then
11427: LD_VAR 0 3
11431: PUSH
11432: LD_INT 106
11434: EQUAL
11435: IFFALSE 11445
// sTiger := true ;
11437: LD_ADDR_EXP 64
11441: PUSH
11442: LD_INT 1
11444: ST_TO_ADDR
// if p3 = 107 then
11445: LD_VAR 0 3
11449: PUSH
11450: LD_INT 107
11452: EQUAL
11453: IFFALSE 11463
// sBomb := true ;
11455: LD_ADDR_EXP 65
11459: PUSH
11460: LD_INT 1
11462: ST_TO_ADDR
// if p3 = 108 then
11463: LD_VAR 0 3
11467: PUSH
11468: LD_INT 108
11470: EQUAL
11471: IFFALSE 11481
// sWound := true ;
11473: LD_ADDR_EXP 73
11477: PUSH
11478: LD_INT 1
11480: ST_TO_ADDR
// if p3 = 109 then
11481: LD_VAR 0 3
11485: PUSH
11486: LD_INT 109
11488: EQUAL
11489: IFFALSE 11499
// sBetray := true ;
11491: LD_ADDR_EXP 77
11495: PUSH
11496: LD_INT 1
11498: ST_TO_ADDR
// if p3 = 110 then
11499: LD_VAR 0 3
11503: PUSH
11504: LD_INT 110
11506: EQUAL
11507: IFFALSE 11517
// sContamin := true ;
11509: LD_ADDR_EXP 78
11513: PUSH
11514: LD_INT 1
11516: ST_TO_ADDR
// if p3 = 111 then
11517: LD_VAR 0 3
11521: PUSH
11522: LD_INT 111
11524: EQUAL
11525: IFFALSE 11535
// sOil := true ;
11527: LD_ADDR_EXP 80
11531: PUSH
11532: LD_INT 1
11534: ST_TO_ADDR
// if p3 = 112 then
11535: LD_VAR 0 3
11539: PUSH
11540: LD_INT 112
11542: EQUAL
11543: IFFALSE 11553
// sStu := true ;
11545: LD_ADDR_EXP 84
11549: PUSH
11550: LD_INT 1
11552: ST_TO_ADDR
// if p3 = 113 then
11553: LD_VAR 0 3
11557: PUSH
11558: LD_INT 113
11560: EQUAL
11561: IFFALSE 11571
// sBazooka := true ;
11563: LD_ADDR_EXP 87
11567: PUSH
11568: LD_INT 1
11570: ST_TO_ADDR
// if p3 = 114 then
11571: LD_VAR 0 3
11575: PUSH
11576: LD_INT 114
11578: EQUAL
11579: IFFALSE 11589
// sMortar := true ;
11581: LD_ADDR_EXP 88
11585: PUSH
11586: LD_INT 1
11588: ST_TO_ADDR
// if p3 = 115 then
11589: LD_VAR 0 3
11593: PUSH
11594: LD_INT 115
11596: EQUAL
11597: IFFALSE 11607
// sRanger := true ;
11599: LD_ADDR_EXP 98
11603: PUSH
11604: LD_INT 1
11606: ST_TO_ADDR
// if p3 = 116 then
11607: LD_VAR 0 3
11611: PUSH
11612: LD_INT 116
11614: EQUAL
11615: IFFALSE 11625
// sComputer := true ;
11617: LD_ADDR_EXP 99
11621: PUSH
11622: LD_INT 1
11624: ST_TO_ADDR
// if p3 = 117 then
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 117
11632: EQUAL
11633: IFFALSE 11643
// s30 := true ;
11635: LD_ADDR_EXP 100
11639: PUSH
11640: LD_INT 1
11642: ST_TO_ADDR
// if p3 = 118 then
11643: LD_VAR 0 3
11647: PUSH
11648: LD_INT 118
11650: EQUAL
11651: IFFALSE 11661
// s60 := true ;
11653: LD_ADDR_EXP 101
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// end ; if p2 = hack_mode then
11661: LD_VAR 0 2
11665: PUSH
11666: LD_INT 101
11668: EQUAL
11669: IFFALSE 11797
// begin case p3 of 1 :
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 1
11678: DOUBLE
11679: EQUAL
11680: IFTRUE 11684
11682: GO 11691
11684: POP
// hHackUnlimitedResources ; 2 :
11685: CALL 23944 0 0
11689: GO 11797
11691: LD_INT 2
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11706
11699: POP
// hHackSetLevel10 ; 3 :
11700: CALL 24077 0 0
11704: GO 11797
11706: LD_INT 3
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11714
11712: GO 11721
11714: POP
// hHackSetLevel10YourUnits ; 4 :
11715: CALL 24162 0 0
11719: GO 11797
11721: LD_INT 4
11723: DOUBLE
11724: EQUAL
11725: IFTRUE 11729
11727: GO 11736
11729: POP
// hHackInvincible ; 5 :
11730: CALL 24610 0 0
11734: GO 11797
11736: LD_INT 5
11738: DOUBLE
11739: EQUAL
11740: IFTRUE 11744
11742: GO 11751
11744: POP
// hHackInvisible ; 6 :
11745: CALL 24721 0 0
11749: GO 11797
11751: LD_INT 6
11753: DOUBLE
11754: EQUAL
11755: IFTRUE 11759
11757: GO 11766
11759: POP
// hHackChangeYourSide ; 7 :
11760: CALL 24778 0 0
11764: GO 11797
11766: LD_INT 7
11768: DOUBLE
11769: EQUAL
11770: IFTRUE 11774
11772: GO 11781
11774: POP
// hHackChangeUnitSide ; 8 :
11775: CALL 24820 0 0
11779: GO 11797
11781: LD_INT 8
11783: DOUBLE
11784: EQUAL
11785: IFTRUE 11789
11787: GO 11796
11789: POP
// hHackFog ; end ;
11790: CALL 24921 0 0
11794: GO 11797
11796: POP
// end ; if p2 = game_save_mode then
11797: LD_VAR 0 2
11801: PUSH
11802: LD_INT 102
11804: EQUAL
11805: IFFALSE 11860
// begin if p3 = 1 then
11807: LD_VAR 0 3
11811: PUSH
11812: LD_INT 1
11814: EQUAL
11815: IFFALSE 11827
// globalGameSaveCounter := p4 ;
11817: LD_ADDR_EXP 44
11821: PUSH
11822: LD_VAR 0 4
11826: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11827: LD_VAR 0 3
11831: PUSH
11832: LD_INT 2
11834: EQUAL
11835: PUSH
11836: LD_EXP 44
11840: AND
11841: IFFALSE 11860
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11843: LD_STRING setGameSaveCounter(
11845: PUSH
11846: LD_EXP 44
11850: STR
11851: PUSH
11852: LD_STRING )
11854: STR
11855: PPUSH
11856: CALL_OW 559
// end ; end ;
11860: LD_VAR 0 7
11864: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11865: LD_INT 0
11867: PPUSH
// streamModeActive := false ;
11868: LD_ADDR_EXP 45
11872: PUSH
11873: LD_INT 0
11875: ST_TO_ADDR
// normalCounter := 36 ;
11876: LD_ADDR_EXP 46
11880: PUSH
11881: LD_INT 36
11883: ST_TO_ADDR
// hardcoreCounter := 18 ;
11884: LD_ADDR_EXP 47
11888: PUSH
11889: LD_INT 18
11891: ST_TO_ADDR
// sRocket := false ;
11892: LD_ADDR_EXP 50
11896: PUSH
11897: LD_INT 0
11899: ST_TO_ADDR
// sSpeed := false ;
11900: LD_ADDR_EXP 49
11904: PUSH
11905: LD_INT 0
11907: ST_TO_ADDR
// sEngine := false ;
11908: LD_ADDR_EXP 51
11912: PUSH
11913: LD_INT 0
11915: ST_TO_ADDR
// sSpec := false ;
11916: LD_ADDR_EXP 48
11920: PUSH
11921: LD_INT 0
11923: ST_TO_ADDR
// sLevel := false ;
11924: LD_ADDR_EXP 52
11928: PUSH
11929: LD_INT 0
11931: ST_TO_ADDR
// sArmoury := false ;
11932: LD_ADDR_EXP 53
11936: PUSH
11937: LD_INT 0
11939: ST_TO_ADDR
// sRadar := false ;
11940: LD_ADDR_EXP 54
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// sBunker := false ;
11948: LD_ADDR_EXP 55
11952: PUSH
11953: LD_INT 0
11955: ST_TO_ADDR
// sHack := false ;
11956: LD_ADDR_EXP 56
11960: PUSH
11961: LD_INT 0
11963: ST_TO_ADDR
// sFire := false ;
11964: LD_ADDR_EXP 57
11968: PUSH
11969: LD_INT 0
11971: ST_TO_ADDR
// sRefresh := false ;
11972: LD_ADDR_EXP 58
11976: PUSH
11977: LD_INT 0
11979: ST_TO_ADDR
// sExp := false ;
11980: LD_ADDR_EXP 59
11984: PUSH
11985: LD_INT 0
11987: ST_TO_ADDR
// sDepot := false ;
11988: LD_ADDR_EXP 60
11992: PUSH
11993: LD_INT 0
11995: ST_TO_ADDR
// sFlag := false ;
11996: LD_ADDR_EXP 61
12000: PUSH
12001: LD_INT 0
12003: ST_TO_ADDR
// sKamikadze := false ;
12004: LD_ADDR_EXP 69
12008: PUSH
12009: LD_INT 0
12011: ST_TO_ADDR
// sTroll := false ;
12012: LD_ADDR_EXP 70
12016: PUSH
12017: LD_INT 0
12019: ST_TO_ADDR
// sSlow := false ;
12020: LD_ADDR_EXP 71
12024: PUSH
12025: LD_INT 0
12027: ST_TO_ADDR
// sLack := false ;
12028: LD_ADDR_EXP 72
12032: PUSH
12033: LD_INT 0
12035: ST_TO_ADDR
// sTank := false ;
12036: LD_ADDR_EXP 74
12040: PUSH
12041: LD_INT 0
12043: ST_TO_ADDR
// sRemote := false ;
12044: LD_ADDR_EXP 75
12048: PUSH
12049: LD_INT 0
12051: ST_TO_ADDR
// sPowell := false ;
12052: LD_ADDR_EXP 76
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// sTeleport := false ;
12060: LD_ADDR_EXP 79
12064: PUSH
12065: LD_INT 0
12067: ST_TO_ADDR
// sOilTower := false ;
12068: LD_ADDR_EXP 81
12072: PUSH
12073: LD_INT 0
12075: ST_TO_ADDR
// sShovel := false ;
12076: LD_ADDR_EXP 82
12080: PUSH
12081: LD_INT 0
12083: ST_TO_ADDR
// sSheik := false ;
12084: LD_ADDR_EXP 83
12088: PUSH
12089: LD_INT 0
12091: ST_TO_ADDR
// sEarthquake := false ;
12092: LD_ADDR_EXP 85
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
// sAI := false ;
12100: LD_ADDR_EXP 86
12104: PUSH
12105: LD_INT 0
12107: ST_TO_ADDR
// sCargo := false ;
12108: LD_ADDR_EXP 89
12112: PUSH
12113: LD_INT 0
12115: ST_TO_ADDR
// sDLaser := false ;
12116: LD_ADDR_EXP 90
12120: PUSH
12121: LD_INT 0
12123: ST_TO_ADDR
// sExchange := false ;
12124: LD_ADDR_EXP 91
12128: PUSH
12129: LD_INT 0
12131: ST_TO_ADDR
// sFac := false ;
12132: LD_ADDR_EXP 92
12136: PUSH
12137: LD_INT 0
12139: ST_TO_ADDR
// sPower := false ;
12140: LD_ADDR_EXP 93
12144: PUSH
12145: LD_INT 0
12147: ST_TO_ADDR
// sRandom := false ;
12148: LD_ADDR_EXP 94
12152: PUSH
12153: LD_INT 0
12155: ST_TO_ADDR
// sShield := false ;
12156: LD_ADDR_EXP 95
12160: PUSH
12161: LD_INT 0
12163: ST_TO_ADDR
// sTime := false ;
12164: LD_ADDR_EXP 96
12168: PUSH
12169: LD_INT 0
12171: ST_TO_ADDR
// sTools := false ;
12172: LD_ADDR_EXP 97
12176: PUSH
12177: LD_INT 0
12179: ST_TO_ADDR
// sSold := false ;
12180: LD_ADDR_EXP 62
12184: PUSH
12185: LD_INT 0
12187: ST_TO_ADDR
// sDiff := false ;
12188: LD_ADDR_EXP 63
12192: PUSH
12193: LD_INT 0
12195: ST_TO_ADDR
// sFog := false ;
12196: LD_ADDR_EXP 66
12200: PUSH
12201: LD_INT 0
12203: ST_TO_ADDR
// sReset := false ;
12204: LD_ADDR_EXP 67
12208: PUSH
12209: LD_INT 0
12211: ST_TO_ADDR
// sSun := false ;
12212: LD_ADDR_EXP 68
12216: PUSH
12217: LD_INT 0
12219: ST_TO_ADDR
// sTiger := false ;
12220: LD_ADDR_EXP 64
12224: PUSH
12225: LD_INT 0
12227: ST_TO_ADDR
// sBomb := false ;
12228: LD_ADDR_EXP 65
12232: PUSH
12233: LD_INT 0
12235: ST_TO_ADDR
// sWound := false ;
12236: LD_ADDR_EXP 73
12240: PUSH
12241: LD_INT 0
12243: ST_TO_ADDR
// sBetray := false ;
12244: LD_ADDR_EXP 77
12248: PUSH
12249: LD_INT 0
12251: ST_TO_ADDR
// sContamin := false ;
12252: LD_ADDR_EXP 78
12256: PUSH
12257: LD_INT 0
12259: ST_TO_ADDR
// sOil := false ;
12260: LD_ADDR_EXP 80
12264: PUSH
12265: LD_INT 0
12267: ST_TO_ADDR
// sStu := false ;
12268: LD_ADDR_EXP 84
12272: PUSH
12273: LD_INT 0
12275: ST_TO_ADDR
// sBazooka := false ;
12276: LD_ADDR_EXP 87
12280: PUSH
12281: LD_INT 0
12283: ST_TO_ADDR
// sMortar := false ;
12284: LD_ADDR_EXP 88
12288: PUSH
12289: LD_INT 0
12291: ST_TO_ADDR
// sRanger := false ;
12292: LD_ADDR_EXP 98
12296: PUSH
12297: LD_INT 0
12299: ST_TO_ADDR
// sComputer := false ;
12300: LD_ADDR_EXP 99
12304: PUSH
12305: LD_INT 0
12307: ST_TO_ADDR
// s30 := false ;
12308: LD_ADDR_EXP 100
12312: PUSH
12313: LD_INT 0
12315: ST_TO_ADDR
// s60 := false ;
12316: LD_ADDR_EXP 101
12320: PUSH
12321: LD_INT 0
12323: ST_TO_ADDR
// end ;
12324: LD_VAR 0 1
12328: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12329: LD_INT 0
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
12337: PPUSH
// result := [ ] ;
12338: LD_ADDR_VAR 0 2
12342: PUSH
12343: EMPTY
12344: ST_TO_ADDR
// if campaign_id = 1 then
12345: LD_OWVAR 69
12349: PUSH
12350: LD_INT 1
12352: EQUAL
12353: IFFALSE 15519
// begin case mission_number of 1 :
12355: LD_OWVAR 70
12359: PUSH
12360: LD_INT 1
12362: DOUBLE
12363: EQUAL
12364: IFTRUE 12368
12366: GO 12444
12368: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: LD_INT 2
12376: PUSH
12377: LD_INT 4
12379: PUSH
12380: LD_INT 11
12382: PUSH
12383: LD_INT 12
12385: PUSH
12386: LD_INT 15
12388: PUSH
12389: LD_INT 16
12391: PUSH
12392: LD_INT 22
12394: PUSH
12395: LD_INT 23
12397: PUSH
12398: LD_INT 26
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 101
12414: PUSH
12415: LD_INT 102
12417: PUSH
12418: LD_INT 106
12420: PUSH
12421: LD_INT 116
12423: PUSH
12424: LD_INT 117
12426: PUSH
12427: LD_INT 118
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: ST_TO_ADDR
12442: GO 15517
12444: LD_INT 2
12446: DOUBLE
12447: EQUAL
12448: IFTRUE 12452
12450: GO 12536
12452: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12453: LD_ADDR_VAR 0 2
12457: PUSH
12458: LD_INT 2
12460: PUSH
12461: LD_INT 4
12463: PUSH
12464: LD_INT 11
12466: PUSH
12467: LD_INT 12
12469: PUSH
12470: LD_INT 15
12472: PUSH
12473: LD_INT 16
12475: PUSH
12476: LD_INT 22
12478: PUSH
12479: LD_INT 23
12481: PUSH
12482: LD_INT 26
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 101
12498: PUSH
12499: LD_INT 102
12501: PUSH
12502: LD_INT 105
12504: PUSH
12505: LD_INT 106
12507: PUSH
12508: LD_INT 108
12510: PUSH
12511: LD_INT 116
12513: PUSH
12514: LD_INT 117
12516: PUSH
12517: LD_INT 118
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: ST_TO_ADDR
12534: GO 15517
12536: LD_INT 3
12538: DOUBLE
12539: EQUAL
12540: IFTRUE 12544
12542: GO 12632
12544: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: LD_INT 4
12555: PUSH
12556: LD_INT 5
12558: PUSH
12559: LD_INT 11
12561: PUSH
12562: LD_INT 12
12564: PUSH
12565: LD_INT 15
12567: PUSH
12568: LD_INT 16
12570: PUSH
12571: LD_INT 22
12573: PUSH
12574: LD_INT 26
12576: PUSH
12577: LD_INT 36
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 101
12594: PUSH
12595: LD_INT 102
12597: PUSH
12598: LD_INT 105
12600: PUSH
12601: LD_INT 106
12603: PUSH
12604: LD_INT 108
12606: PUSH
12607: LD_INT 116
12609: PUSH
12610: LD_INT 117
12612: PUSH
12613: LD_INT 118
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: ST_TO_ADDR
12630: GO 15517
12632: LD_INT 4
12634: DOUBLE
12635: EQUAL
12636: IFTRUE 12640
12638: GO 12736
12640: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12641: LD_ADDR_VAR 0 2
12645: PUSH
12646: LD_INT 2
12648: PUSH
12649: LD_INT 4
12651: PUSH
12652: LD_INT 5
12654: PUSH
12655: LD_INT 8
12657: PUSH
12658: LD_INT 11
12660: PUSH
12661: LD_INT 12
12663: PUSH
12664: LD_INT 15
12666: PUSH
12667: LD_INT 16
12669: PUSH
12670: LD_INT 22
12672: PUSH
12673: LD_INT 23
12675: PUSH
12676: LD_INT 26
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 101
12698: PUSH
12699: LD_INT 102
12701: PUSH
12702: LD_INT 105
12704: PUSH
12705: LD_INT 106
12707: PUSH
12708: LD_INT 108
12710: PUSH
12711: LD_INT 116
12713: PUSH
12714: LD_INT 117
12716: PUSH
12717: LD_INT 118
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: ST_TO_ADDR
12734: GO 15517
12736: LD_INT 5
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12856
12744: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12745: LD_ADDR_VAR 0 2
12749: PUSH
12750: LD_INT 2
12752: PUSH
12753: LD_INT 4
12755: PUSH
12756: LD_INT 5
12758: PUSH
12759: LD_INT 6
12761: PUSH
12762: LD_INT 8
12764: PUSH
12765: LD_INT 11
12767: PUSH
12768: LD_INT 12
12770: PUSH
12771: LD_INT 15
12773: PUSH
12774: LD_INT 16
12776: PUSH
12777: LD_INT 22
12779: PUSH
12780: LD_INT 23
12782: PUSH
12783: LD_INT 25
12785: PUSH
12786: LD_INT 26
12788: PUSH
12789: LD_INT 36
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 101
12810: PUSH
12811: LD_INT 102
12813: PUSH
12814: LD_INT 105
12816: PUSH
12817: LD_INT 106
12819: PUSH
12820: LD_INT 108
12822: PUSH
12823: LD_INT 109
12825: PUSH
12826: LD_INT 112
12828: PUSH
12829: LD_INT 116
12831: PUSH
12832: LD_INT 117
12834: PUSH
12835: LD_INT 118
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: ST_TO_ADDR
12854: GO 15517
12856: LD_INT 6
12858: DOUBLE
12859: EQUAL
12860: IFTRUE 12864
12862: GO 12996
12864: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12865: LD_ADDR_VAR 0 2
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: LD_INT 4
12875: PUSH
12876: LD_INT 5
12878: PUSH
12879: LD_INT 6
12881: PUSH
12882: LD_INT 8
12884: PUSH
12885: LD_INT 11
12887: PUSH
12888: LD_INT 12
12890: PUSH
12891: LD_INT 15
12893: PUSH
12894: LD_INT 16
12896: PUSH
12897: LD_INT 20
12899: PUSH
12900: LD_INT 21
12902: PUSH
12903: LD_INT 22
12905: PUSH
12906: LD_INT 23
12908: PUSH
12909: LD_INT 25
12911: PUSH
12912: LD_INT 26
12914: PUSH
12915: LD_INT 30
12917: PUSH
12918: LD_INT 31
12920: PUSH
12921: LD_INT 32
12923: PUSH
12924: LD_INT 36
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 101
12950: PUSH
12951: LD_INT 102
12953: PUSH
12954: LD_INT 105
12956: PUSH
12957: LD_INT 106
12959: PUSH
12960: LD_INT 108
12962: PUSH
12963: LD_INT 109
12965: PUSH
12966: LD_INT 112
12968: PUSH
12969: LD_INT 116
12971: PUSH
12972: LD_INT 117
12974: PUSH
12975: LD_INT 118
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: ST_TO_ADDR
12994: GO 15517
12996: LD_INT 7
12998: DOUBLE
12999: EQUAL
13000: IFTRUE 13004
13002: GO 13116
13004: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13005: LD_ADDR_VAR 0 2
13009: PUSH
13010: LD_INT 2
13012: PUSH
13013: LD_INT 4
13015: PUSH
13016: LD_INT 5
13018: PUSH
13019: LD_INT 7
13021: PUSH
13022: LD_INT 11
13024: PUSH
13025: LD_INT 12
13027: PUSH
13028: LD_INT 15
13030: PUSH
13031: LD_INT 16
13033: PUSH
13034: LD_INT 20
13036: PUSH
13037: LD_INT 21
13039: PUSH
13040: LD_INT 22
13042: PUSH
13043: LD_INT 23
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 26
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 101
13070: PUSH
13071: LD_INT 102
13073: PUSH
13074: LD_INT 103
13076: PUSH
13077: LD_INT 105
13079: PUSH
13080: LD_INT 106
13082: PUSH
13083: LD_INT 108
13085: PUSH
13086: LD_INT 112
13088: PUSH
13089: LD_INT 116
13091: PUSH
13092: LD_INT 117
13094: PUSH
13095: LD_INT 118
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: ST_TO_ADDR
13114: GO 15517
13116: LD_INT 8
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 13264
13124: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 4
13135: PUSH
13136: LD_INT 5
13138: PUSH
13139: LD_INT 6
13141: PUSH
13142: LD_INT 7
13144: PUSH
13145: LD_INT 8
13147: PUSH
13148: LD_INT 11
13150: PUSH
13151: LD_INT 12
13153: PUSH
13154: LD_INT 15
13156: PUSH
13157: LD_INT 16
13159: PUSH
13160: LD_INT 20
13162: PUSH
13163: LD_INT 21
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: LD_INT 25
13174: PUSH
13175: LD_INT 26
13177: PUSH
13178: LD_INT 30
13180: PUSH
13181: LD_INT 31
13183: PUSH
13184: LD_INT 32
13186: PUSH
13187: LD_INT 36
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 101
13214: PUSH
13215: LD_INT 102
13217: PUSH
13218: LD_INT 103
13220: PUSH
13221: LD_INT 105
13223: PUSH
13224: LD_INT 106
13226: PUSH
13227: LD_INT 108
13229: PUSH
13230: LD_INT 109
13232: PUSH
13233: LD_INT 112
13235: PUSH
13236: LD_INT 116
13238: PUSH
13239: LD_INT 117
13241: PUSH
13242: LD_INT 118
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: ST_TO_ADDR
13262: GO 15517
13264: LD_INT 9
13266: DOUBLE
13267: EQUAL
13268: IFTRUE 13272
13270: GO 13420
13272: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13273: LD_ADDR_VAR 0 2
13277: PUSH
13278: LD_INT 2
13280: PUSH
13281: LD_INT 4
13283: PUSH
13284: LD_INT 5
13286: PUSH
13287: LD_INT 6
13289: PUSH
13290: LD_INT 7
13292: PUSH
13293: LD_INT 8
13295: PUSH
13296: LD_INT 11
13298: PUSH
13299: LD_INT 12
13301: PUSH
13302: LD_INT 15
13304: PUSH
13305: LD_INT 16
13307: PUSH
13308: LD_INT 20
13310: PUSH
13311: LD_INT 21
13313: PUSH
13314: LD_INT 22
13316: PUSH
13317: LD_INT 23
13319: PUSH
13320: LD_INT 25
13322: PUSH
13323: LD_INT 26
13325: PUSH
13326: LD_INT 28
13328: PUSH
13329: LD_INT 30
13331: PUSH
13332: LD_INT 31
13334: PUSH
13335: LD_INT 32
13337: PUSH
13338: LD_INT 36
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 101
13366: PUSH
13367: LD_INT 102
13369: PUSH
13370: LD_INT 103
13372: PUSH
13373: LD_INT 105
13375: PUSH
13376: LD_INT 106
13378: PUSH
13379: LD_INT 108
13381: PUSH
13382: LD_INT 109
13384: PUSH
13385: LD_INT 112
13387: PUSH
13388: LD_INT 114
13390: PUSH
13391: LD_INT 116
13393: PUSH
13394: LD_INT 117
13396: PUSH
13397: LD_INT 118
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: ST_TO_ADDR
13418: GO 15517
13420: LD_INT 10
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13624
13428: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13429: LD_ADDR_VAR 0 2
13433: PUSH
13434: LD_INT 2
13436: PUSH
13437: LD_INT 4
13439: PUSH
13440: LD_INT 5
13442: PUSH
13443: LD_INT 6
13445: PUSH
13446: LD_INT 7
13448: PUSH
13449: LD_INT 8
13451: PUSH
13452: LD_INT 9
13454: PUSH
13455: LD_INT 10
13457: PUSH
13458: LD_INT 11
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: LD_INT 13
13466: PUSH
13467: LD_INT 14
13469: PUSH
13470: LD_INT 15
13472: PUSH
13473: LD_INT 16
13475: PUSH
13476: LD_INT 17
13478: PUSH
13479: LD_INT 18
13481: PUSH
13482: LD_INT 19
13484: PUSH
13485: LD_INT 20
13487: PUSH
13488: LD_INT 21
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_INT 23
13496: PUSH
13497: LD_INT 24
13499: PUSH
13500: LD_INT 25
13502: PUSH
13503: LD_INT 26
13505: PUSH
13506: LD_INT 28
13508: PUSH
13509: LD_INT 30
13511: PUSH
13512: LD_INT 31
13514: PUSH
13515: LD_INT 32
13517: PUSH
13518: LD_INT 36
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 101
13554: PUSH
13555: LD_INT 102
13557: PUSH
13558: LD_INT 103
13560: PUSH
13561: LD_INT 104
13563: PUSH
13564: LD_INT 105
13566: PUSH
13567: LD_INT 106
13569: PUSH
13570: LD_INT 107
13572: PUSH
13573: LD_INT 108
13575: PUSH
13576: LD_INT 109
13578: PUSH
13579: LD_INT 110
13581: PUSH
13582: LD_INT 111
13584: PUSH
13585: LD_INT 112
13587: PUSH
13588: LD_INT 114
13590: PUSH
13591: LD_INT 116
13593: PUSH
13594: LD_INT 117
13596: PUSH
13597: LD_INT 118
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: ST_TO_ADDR
13622: GO 15517
13624: LD_INT 11
13626: DOUBLE
13627: EQUAL
13628: IFTRUE 13632
13630: GO 13836
13632: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13633: LD_ADDR_VAR 0 2
13637: PUSH
13638: LD_INT 2
13640: PUSH
13641: LD_INT 3
13643: PUSH
13644: LD_INT 4
13646: PUSH
13647: LD_INT 5
13649: PUSH
13650: LD_INT 6
13652: PUSH
13653: LD_INT 7
13655: PUSH
13656: LD_INT 8
13658: PUSH
13659: LD_INT 9
13661: PUSH
13662: LD_INT 10
13664: PUSH
13665: LD_INT 11
13667: PUSH
13668: LD_INT 12
13670: PUSH
13671: LD_INT 13
13673: PUSH
13674: LD_INT 14
13676: PUSH
13677: LD_INT 15
13679: PUSH
13680: LD_INT 16
13682: PUSH
13683: LD_INT 17
13685: PUSH
13686: LD_INT 18
13688: PUSH
13689: LD_INT 19
13691: PUSH
13692: LD_INT 20
13694: PUSH
13695: LD_INT 21
13697: PUSH
13698: LD_INT 22
13700: PUSH
13701: LD_INT 23
13703: PUSH
13704: LD_INT 24
13706: PUSH
13707: LD_INT 25
13709: PUSH
13710: LD_INT 26
13712: PUSH
13713: LD_INT 28
13715: PUSH
13716: LD_INT 30
13718: PUSH
13719: LD_INT 31
13721: PUSH
13722: LD_INT 32
13724: PUSH
13725: LD_INT 34
13727: PUSH
13728: LD_INT 36
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 101
13766: PUSH
13767: LD_INT 102
13769: PUSH
13770: LD_INT 103
13772: PUSH
13773: LD_INT 104
13775: PUSH
13776: LD_INT 105
13778: PUSH
13779: LD_INT 106
13781: PUSH
13782: LD_INT 107
13784: PUSH
13785: LD_INT 108
13787: PUSH
13788: LD_INT 109
13790: PUSH
13791: LD_INT 110
13793: PUSH
13794: LD_INT 111
13796: PUSH
13797: LD_INT 112
13799: PUSH
13800: LD_INT 114
13802: PUSH
13803: LD_INT 116
13805: PUSH
13806: LD_INT 117
13808: PUSH
13809: LD_INT 118
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: ST_TO_ADDR
13834: GO 15517
13836: LD_INT 12
13838: DOUBLE
13839: EQUAL
13840: IFTRUE 13844
13842: GO 14064
13844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13845: LD_ADDR_VAR 0 2
13849: PUSH
13850: LD_INT 1
13852: PUSH
13853: LD_INT 2
13855: PUSH
13856: LD_INT 3
13858: PUSH
13859: LD_INT 4
13861: PUSH
13862: LD_INT 5
13864: PUSH
13865: LD_INT 6
13867: PUSH
13868: LD_INT 7
13870: PUSH
13871: LD_INT 8
13873: PUSH
13874: LD_INT 9
13876: PUSH
13877: LD_INT 10
13879: PUSH
13880: LD_INT 11
13882: PUSH
13883: LD_INT 12
13885: PUSH
13886: LD_INT 13
13888: PUSH
13889: LD_INT 14
13891: PUSH
13892: LD_INT 15
13894: PUSH
13895: LD_INT 16
13897: PUSH
13898: LD_INT 17
13900: PUSH
13901: LD_INT 18
13903: PUSH
13904: LD_INT 19
13906: PUSH
13907: LD_INT 20
13909: PUSH
13910: LD_INT 21
13912: PUSH
13913: LD_INT 22
13915: PUSH
13916: LD_INT 23
13918: PUSH
13919: LD_INT 24
13921: PUSH
13922: LD_INT 25
13924: PUSH
13925: LD_INT 26
13927: PUSH
13928: LD_INT 27
13930: PUSH
13931: LD_INT 28
13933: PUSH
13934: LD_INT 30
13936: PUSH
13937: LD_INT 31
13939: PUSH
13940: LD_INT 32
13942: PUSH
13943: LD_INT 33
13945: PUSH
13946: LD_INT 34
13948: PUSH
13949: LD_INT 36
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 101
13990: PUSH
13991: LD_INT 102
13993: PUSH
13994: LD_INT 103
13996: PUSH
13997: LD_INT 104
13999: PUSH
14000: LD_INT 105
14002: PUSH
14003: LD_INT 106
14005: PUSH
14006: LD_INT 107
14008: PUSH
14009: LD_INT 108
14011: PUSH
14012: LD_INT 109
14014: PUSH
14015: LD_INT 110
14017: PUSH
14018: LD_INT 111
14020: PUSH
14021: LD_INT 112
14023: PUSH
14024: LD_INT 113
14026: PUSH
14027: LD_INT 114
14029: PUSH
14030: LD_INT 116
14032: PUSH
14033: LD_INT 117
14035: PUSH
14036: LD_INT 118
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: ST_TO_ADDR
14062: GO 15517
14064: LD_INT 13
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14280
14072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: LD_INT 2
14083: PUSH
14084: LD_INT 3
14086: PUSH
14087: LD_INT 4
14089: PUSH
14090: LD_INT 5
14092: PUSH
14093: LD_INT 8
14095: PUSH
14096: LD_INT 9
14098: PUSH
14099: LD_INT 10
14101: PUSH
14102: LD_INT 11
14104: PUSH
14105: LD_INT 12
14107: PUSH
14108: LD_INT 14
14110: PUSH
14111: LD_INT 15
14113: PUSH
14114: LD_INT 16
14116: PUSH
14117: LD_INT 17
14119: PUSH
14120: LD_INT 18
14122: PUSH
14123: LD_INT 19
14125: PUSH
14126: LD_INT 20
14128: PUSH
14129: LD_INT 21
14131: PUSH
14132: LD_INT 22
14134: PUSH
14135: LD_INT 23
14137: PUSH
14138: LD_INT 24
14140: PUSH
14141: LD_INT 25
14143: PUSH
14144: LD_INT 26
14146: PUSH
14147: LD_INT 27
14149: PUSH
14150: LD_INT 28
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: LD_INT 32
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 34
14167: PUSH
14168: LD_INT 36
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 101
14206: PUSH
14207: LD_INT 102
14209: PUSH
14210: LD_INT 103
14212: PUSH
14213: LD_INT 104
14215: PUSH
14216: LD_INT 105
14218: PUSH
14219: LD_INT 106
14221: PUSH
14222: LD_INT 107
14224: PUSH
14225: LD_INT 108
14227: PUSH
14228: LD_INT 109
14230: PUSH
14231: LD_INT 110
14233: PUSH
14234: LD_INT 111
14236: PUSH
14237: LD_INT 112
14239: PUSH
14240: LD_INT 113
14242: PUSH
14243: LD_INT 114
14245: PUSH
14246: LD_INT 116
14248: PUSH
14249: LD_INT 117
14251: PUSH
14252: LD_INT 118
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: ST_TO_ADDR
14278: GO 15517
14280: LD_INT 14
14282: DOUBLE
14283: EQUAL
14284: IFTRUE 14288
14286: GO 14512
14288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14289: LD_ADDR_VAR 0 2
14293: PUSH
14294: LD_INT 1
14296: PUSH
14297: LD_INT 2
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: LD_INT 4
14305: PUSH
14306: LD_INT 5
14308: PUSH
14309: LD_INT 6
14311: PUSH
14312: LD_INT 7
14314: PUSH
14315: LD_INT 8
14317: PUSH
14318: LD_INT 9
14320: PUSH
14321: LD_INT 10
14323: PUSH
14324: LD_INT 11
14326: PUSH
14327: LD_INT 12
14329: PUSH
14330: LD_INT 13
14332: PUSH
14333: LD_INT 14
14335: PUSH
14336: LD_INT 15
14338: PUSH
14339: LD_INT 16
14341: PUSH
14342: LD_INT 17
14344: PUSH
14345: LD_INT 18
14347: PUSH
14348: LD_INT 19
14350: PUSH
14351: LD_INT 20
14353: PUSH
14354: LD_INT 21
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_INT 23
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: LD_INT 25
14368: PUSH
14369: LD_INT 26
14371: PUSH
14372: LD_INT 27
14374: PUSH
14375: LD_INT 28
14377: PUSH
14378: LD_INT 29
14380: PUSH
14381: LD_INT 30
14383: PUSH
14384: LD_INT 31
14386: PUSH
14387: LD_INT 32
14389: PUSH
14390: LD_INT 33
14392: PUSH
14393: LD_INT 34
14395: PUSH
14396: LD_INT 36
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 101
14438: PUSH
14439: LD_INT 102
14441: PUSH
14442: LD_INT 103
14444: PUSH
14445: LD_INT 104
14447: PUSH
14448: LD_INT 105
14450: PUSH
14451: LD_INT 106
14453: PUSH
14454: LD_INT 107
14456: PUSH
14457: LD_INT 108
14459: PUSH
14460: LD_INT 109
14462: PUSH
14463: LD_INT 110
14465: PUSH
14466: LD_INT 111
14468: PUSH
14469: LD_INT 112
14471: PUSH
14472: LD_INT 113
14474: PUSH
14475: LD_INT 114
14477: PUSH
14478: LD_INT 116
14480: PUSH
14481: LD_INT 117
14483: PUSH
14484: LD_INT 118
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: ST_TO_ADDR
14510: GO 15517
14512: LD_INT 15
14514: DOUBLE
14515: EQUAL
14516: IFTRUE 14520
14518: GO 14744
14520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14521: LD_ADDR_VAR 0 2
14525: PUSH
14526: LD_INT 1
14528: PUSH
14529: LD_INT 2
14531: PUSH
14532: LD_INT 3
14534: PUSH
14535: LD_INT 4
14537: PUSH
14538: LD_INT 5
14540: PUSH
14541: LD_INT 6
14543: PUSH
14544: LD_INT 7
14546: PUSH
14547: LD_INT 8
14549: PUSH
14550: LD_INT 9
14552: PUSH
14553: LD_INT 10
14555: PUSH
14556: LD_INT 11
14558: PUSH
14559: LD_INT 12
14561: PUSH
14562: LD_INT 13
14564: PUSH
14565: LD_INT 14
14567: PUSH
14568: LD_INT 15
14570: PUSH
14571: LD_INT 16
14573: PUSH
14574: LD_INT 17
14576: PUSH
14577: LD_INT 18
14579: PUSH
14580: LD_INT 19
14582: PUSH
14583: LD_INT 20
14585: PUSH
14586: LD_INT 21
14588: PUSH
14589: LD_INT 22
14591: PUSH
14592: LD_INT 23
14594: PUSH
14595: LD_INT 24
14597: PUSH
14598: LD_INT 25
14600: PUSH
14601: LD_INT 26
14603: PUSH
14604: LD_INT 27
14606: PUSH
14607: LD_INT 28
14609: PUSH
14610: LD_INT 29
14612: PUSH
14613: LD_INT 30
14615: PUSH
14616: LD_INT 31
14618: PUSH
14619: LD_INT 32
14621: PUSH
14622: LD_INT 33
14624: PUSH
14625: LD_INT 34
14627: PUSH
14628: LD_INT 36
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 101
14670: PUSH
14671: LD_INT 102
14673: PUSH
14674: LD_INT 103
14676: PUSH
14677: LD_INT 104
14679: PUSH
14680: LD_INT 105
14682: PUSH
14683: LD_INT 106
14685: PUSH
14686: LD_INT 107
14688: PUSH
14689: LD_INT 108
14691: PUSH
14692: LD_INT 109
14694: PUSH
14695: LD_INT 110
14697: PUSH
14698: LD_INT 111
14700: PUSH
14701: LD_INT 112
14703: PUSH
14704: LD_INT 113
14706: PUSH
14707: LD_INT 114
14709: PUSH
14710: LD_INT 116
14712: PUSH
14713: LD_INT 117
14715: PUSH
14716: LD_INT 118
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: ST_TO_ADDR
14742: GO 15517
14744: LD_INT 16
14746: DOUBLE
14747: EQUAL
14748: IFTRUE 14752
14750: GO 14888
14752: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14753: LD_ADDR_VAR 0 2
14757: PUSH
14758: LD_INT 2
14760: PUSH
14761: LD_INT 4
14763: PUSH
14764: LD_INT 5
14766: PUSH
14767: LD_INT 7
14769: PUSH
14770: LD_INT 11
14772: PUSH
14773: LD_INT 12
14775: PUSH
14776: LD_INT 15
14778: PUSH
14779: LD_INT 16
14781: PUSH
14782: LD_INT 20
14784: PUSH
14785: LD_INT 21
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_INT 23
14793: PUSH
14794: LD_INT 25
14796: PUSH
14797: LD_INT 26
14799: PUSH
14800: LD_INT 30
14802: PUSH
14803: LD_INT 31
14805: PUSH
14806: LD_INT 32
14808: PUSH
14809: LD_INT 33
14811: PUSH
14812: LD_INT 34
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 101
14838: PUSH
14839: LD_INT 102
14841: PUSH
14842: LD_INT 103
14844: PUSH
14845: LD_INT 106
14847: PUSH
14848: LD_INT 108
14850: PUSH
14851: LD_INT 112
14853: PUSH
14854: LD_INT 113
14856: PUSH
14857: LD_INT 114
14859: PUSH
14860: LD_INT 116
14862: PUSH
14863: LD_INT 117
14865: PUSH
14866: LD_INT 118
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: ST_TO_ADDR
14886: GO 15517
14888: LD_INT 17
14890: DOUBLE
14891: EQUAL
14892: IFTRUE 14896
14894: GO 15120
14896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14897: LD_ADDR_VAR 0 2
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: LD_INT 2
14907: PUSH
14908: LD_INT 3
14910: PUSH
14911: LD_INT 4
14913: PUSH
14914: LD_INT 5
14916: PUSH
14917: LD_INT 6
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: LD_INT 8
14925: PUSH
14926: LD_INT 9
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_INT 11
14934: PUSH
14935: LD_INT 12
14937: PUSH
14938: LD_INT 13
14940: PUSH
14941: LD_INT 14
14943: PUSH
14944: LD_INT 15
14946: PUSH
14947: LD_INT 16
14949: PUSH
14950: LD_INT 17
14952: PUSH
14953: LD_INT 18
14955: PUSH
14956: LD_INT 19
14958: PUSH
14959: LD_INT 20
14961: PUSH
14962: LD_INT 21
14964: PUSH
14965: LD_INT 22
14967: PUSH
14968: LD_INT 23
14970: PUSH
14971: LD_INT 24
14973: PUSH
14974: LD_INT 25
14976: PUSH
14977: LD_INT 26
14979: PUSH
14980: LD_INT 27
14982: PUSH
14983: LD_INT 28
14985: PUSH
14986: LD_INT 29
14988: PUSH
14989: LD_INT 30
14991: PUSH
14992: LD_INT 31
14994: PUSH
14995: LD_INT 32
14997: PUSH
14998: LD_INT 33
15000: PUSH
15001: LD_INT 34
15003: PUSH
15004: LD_INT 36
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 101
15046: PUSH
15047: LD_INT 102
15049: PUSH
15050: LD_INT 103
15052: PUSH
15053: LD_INT 104
15055: PUSH
15056: LD_INT 105
15058: PUSH
15059: LD_INT 106
15061: PUSH
15062: LD_INT 107
15064: PUSH
15065: LD_INT 108
15067: PUSH
15068: LD_INT 109
15070: PUSH
15071: LD_INT 110
15073: PUSH
15074: LD_INT 111
15076: PUSH
15077: LD_INT 112
15079: PUSH
15080: LD_INT 113
15082: PUSH
15083: LD_INT 114
15085: PUSH
15086: LD_INT 116
15088: PUSH
15089: LD_INT 117
15091: PUSH
15092: LD_INT 118
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: ST_TO_ADDR
15118: GO 15517
15120: LD_INT 18
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15276
15128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15129: LD_ADDR_VAR 0 2
15133: PUSH
15134: LD_INT 2
15136: PUSH
15137: LD_INT 4
15139: PUSH
15140: LD_INT 5
15142: PUSH
15143: LD_INT 7
15145: PUSH
15146: LD_INT 11
15148: PUSH
15149: LD_INT 12
15151: PUSH
15152: LD_INT 15
15154: PUSH
15155: LD_INT 16
15157: PUSH
15158: LD_INT 20
15160: PUSH
15161: LD_INT 21
15163: PUSH
15164: LD_INT 22
15166: PUSH
15167: LD_INT 23
15169: PUSH
15170: LD_INT 25
15172: PUSH
15173: LD_INT 26
15175: PUSH
15176: LD_INT 30
15178: PUSH
15179: LD_INT 31
15181: PUSH
15182: LD_INT 32
15184: PUSH
15185: LD_INT 33
15187: PUSH
15188: LD_INT 34
15190: PUSH
15191: LD_INT 35
15193: PUSH
15194: LD_INT 36
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 101
15222: PUSH
15223: LD_INT 102
15225: PUSH
15226: LD_INT 103
15228: PUSH
15229: LD_INT 106
15231: PUSH
15232: LD_INT 108
15234: PUSH
15235: LD_INT 112
15237: PUSH
15238: LD_INT 113
15240: PUSH
15241: LD_INT 114
15243: PUSH
15244: LD_INT 115
15246: PUSH
15247: LD_INT 116
15249: PUSH
15250: LD_INT 117
15252: PUSH
15253: LD_INT 118
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: ST_TO_ADDR
15274: GO 15517
15276: LD_INT 19
15278: DOUBLE
15279: EQUAL
15280: IFTRUE 15284
15282: GO 15516
15284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15285: LD_ADDR_VAR 0 2
15289: PUSH
15290: LD_INT 1
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: LD_INT 3
15298: PUSH
15299: LD_INT 4
15301: PUSH
15302: LD_INT 5
15304: PUSH
15305: LD_INT 6
15307: PUSH
15308: LD_INT 7
15310: PUSH
15311: LD_INT 8
15313: PUSH
15314: LD_INT 9
15316: PUSH
15317: LD_INT 10
15319: PUSH
15320: LD_INT 11
15322: PUSH
15323: LD_INT 12
15325: PUSH
15326: LD_INT 13
15328: PUSH
15329: LD_INT 14
15331: PUSH
15332: LD_INT 15
15334: PUSH
15335: LD_INT 16
15337: PUSH
15338: LD_INT 17
15340: PUSH
15341: LD_INT 18
15343: PUSH
15344: LD_INT 19
15346: PUSH
15347: LD_INT 20
15349: PUSH
15350: LD_INT 21
15352: PUSH
15353: LD_INT 22
15355: PUSH
15356: LD_INT 23
15358: PUSH
15359: LD_INT 24
15361: PUSH
15362: LD_INT 25
15364: PUSH
15365: LD_INT 26
15367: PUSH
15368: LD_INT 27
15370: PUSH
15371: LD_INT 28
15373: PUSH
15374: LD_INT 29
15376: PUSH
15377: LD_INT 30
15379: PUSH
15380: LD_INT 31
15382: PUSH
15383: LD_INT 32
15385: PUSH
15386: LD_INT 33
15388: PUSH
15389: LD_INT 34
15391: PUSH
15392: LD_INT 35
15394: PUSH
15395: LD_INT 36
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 101
15438: PUSH
15439: LD_INT 102
15441: PUSH
15442: LD_INT 103
15444: PUSH
15445: LD_INT 104
15447: PUSH
15448: LD_INT 105
15450: PUSH
15451: LD_INT 106
15453: PUSH
15454: LD_INT 107
15456: PUSH
15457: LD_INT 108
15459: PUSH
15460: LD_INT 109
15462: PUSH
15463: LD_INT 110
15465: PUSH
15466: LD_INT 111
15468: PUSH
15469: LD_INT 112
15471: PUSH
15472: LD_INT 113
15474: PUSH
15475: LD_INT 114
15477: PUSH
15478: LD_INT 115
15480: PUSH
15481: LD_INT 116
15483: PUSH
15484: LD_INT 117
15486: PUSH
15487: LD_INT 118
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: ST_TO_ADDR
15514: GO 15517
15516: POP
// end else
15517: GO 15748
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15519: LD_ADDR_VAR 0 2
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: LD_INT 2
15529: PUSH
15530: LD_INT 3
15532: PUSH
15533: LD_INT 4
15535: PUSH
15536: LD_INT 5
15538: PUSH
15539: LD_INT 6
15541: PUSH
15542: LD_INT 7
15544: PUSH
15545: LD_INT 8
15547: PUSH
15548: LD_INT 9
15550: PUSH
15551: LD_INT 10
15553: PUSH
15554: LD_INT 11
15556: PUSH
15557: LD_INT 12
15559: PUSH
15560: LD_INT 13
15562: PUSH
15563: LD_INT 14
15565: PUSH
15566: LD_INT 15
15568: PUSH
15569: LD_INT 16
15571: PUSH
15572: LD_INT 17
15574: PUSH
15575: LD_INT 18
15577: PUSH
15578: LD_INT 19
15580: PUSH
15581: LD_INT 20
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 22
15589: PUSH
15590: LD_INT 23
15592: PUSH
15593: LD_INT 24
15595: PUSH
15596: LD_INT 25
15598: PUSH
15599: LD_INT 26
15601: PUSH
15602: LD_INT 27
15604: PUSH
15605: LD_INT 28
15607: PUSH
15608: LD_INT 29
15610: PUSH
15611: LD_INT 30
15613: PUSH
15614: LD_INT 31
15616: PUSH
15617: LD_INT 32
15619: PUSH
15620: LD_INT 33
15622: PUSH
15623: LD_INT 34
15625: PUSH
15626: LD_INT 35
15628: PUSH
15629: LD_INT 36
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 101
15672: PUSH
15673: LD_INT 102
15675: PUSH
15676: LD_INT 103
15678: PUSH
15679: LD_INT 104
15681: PUSH
15682: LD_INT 105
15684: PUSH
15685: LD_INT 106
15687: PUSH
15688: LD_INT 107
15690: PUSH
15691: LD_INT 108
15693: PUSH
15694: LD_INT 109
15696: PUSH
15697: LD_INT 110
15699: PUSH
15700: LD_INT 111
15702: PUSH
15703: LD_INT 112
15705: PUSH
15706: LD_INT 113
15708: PUSH
15709: LD_INT 114
15711: PUSH
15712: LD_INT 115
15714: PUSH
15715: LD_INT 116
15717: PUSH
15718: LD_INT 117
15720: PUSH
15721: LD_INT 118
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: ST_TO_ADDR
// if result then
15748: LD_VAR 0 2
15752: IFFALSE 16538
// begin normal :=  ;
15754: LD_ADDR_VAR 0 5
15758: PUSH
15759: LD_STRING 
15761: ST_TO_ADDR
// hardcore :=  ;
15762: LD_ADDR_VAR 0 6
15766: PUSH
15767: LD_STRING 
15769: ST_TO_ADDR
// active :=  ;
15770: LD_ADDR_VAR 0 7
15774: PUSH
15775: LD_STRING 
15777: ST_TO_ADDR
// for i = 1 to normalCounter do
15778: LD_ADDR_VAR 0 8
15782: PUSH
15783: DOUBLE
15784: LD_INT 1
15786: DEC
15787: ST_TO_ADDR
15788: LD_EXP 46
15792: PUSH
15793: FOR_TO
15794: IFFALSE 15895
// begin tmp := 0 ;
15796: LD_ADDR_VAR 0 3
15800: PUSH
15801: LD_STRING 0
15803: ST_TO_ADDR
// if result [ 1 ] then
15804: LD_VAR 0 2
15808: PUSH
15809: LD_INT 1
15811: ARRAY
15812: IFFALSE 15877
// if result [ 1 ] [ 1 ] = i then
15814: LD_VAR 0 2
15818: PUSH
15819: LD_INT 1
15821: ARRAY
15822: PUSH
15823: LD_INT 1
15825: ARRAY
15826: PUSH
15827: LD_VAR 0 8
15831: EQUAL
15832: IFFALSE 15877
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15834: LD_ADDR_VAR 0 2
15838: PUSH
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_INT 1
15846: PPUSH
15847: LD_VAR 0 2
15851: PUSH
15852: LD_INT 1
15854: ARRAY
15855: PPUSH
15856: LD_INT 1
15858: PPUSH
15859: CALL_OW 3
15863: PPUSH
15864: CALL_OW 1
15868: ST_TO_ADDR
// tmp := 1 ;
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: LD_STRING 1
15876: ST_TO_ADDR
// end ; normal := normal & tmp ;
15877: LD_ADDR_VAR 0 5
15881: PUSH
15882: LD_VAR 0 5
15886: PUSH
15887: LD_VAR 0 3
15891: STR
15892: ST_TO_ADDR
// end ;
15893: GO 15793
15895: POP
15896: POP
// for i = 1 to hardcoreCounter do
15897: LD_ADDR_VAR 0 8
15901: PUSH
15902: DOUBLE
15903: LD_INT 1
15905: DEC
15906: ST_TO_ADDR
15907: LD_EXP 47
15911: PUSH
15912: FOR_TO
15913: IFFALSE 16018
// begin tmp := 0 ;
15915: LD_ADDR_VAR 0 3
15919: PUSH
15920: LD_STRING 0
15922: ST_TO_ADDR
// if result [ 2 ] then
15923: LD_VAR 0 2
15927: PUSH
15928: LD_INT 2
15930: ARRAY
15931: IFFALSE 16000
// if result [ 2 ] [ 1 ] = 100 + i then
15933: LD_VAR 0 2
15937: PUSH
15938: LD_INT 2
15940: ARRAY
15941: PUSH
15942: LD_INT 1
15944: ARRAY
15945: PUSH
15946: LD_INT 100
15948: PUSH
15949: LD_VAR 0 8
15953: PLUS
15954: EQUAL
15955: IFFALSE 16000
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15957: LD_ADDR_VAR 0 2
15961: PUSH
15962: LD_VAR 0 2
15966: PPUSH
15967: LD_INT 2
15969: PPUSH
15970: LD_VAR 0 2
15974: PUSH
15975: LD_INT 2
15977: ARRAY
15978: PPUSH
15979: LD_INT 1
15981: PPUSH
15982: CALL_OW 3
15986: PPUSH
15987: CALL_OW 1
15991: ST_TO_ADDR
// tmp := 1 ;
15992: LD_ADDR_VAR 0 3
15996: PUSH
15997: LD_STRING 1
15999: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16000: LD_ADDR_VAR 0 6
16004: PUSH
16005: LD_VAR 0 6
16009: PUSH
16010: LD_VAR 0 3
16014: STR
16015: ST_TO_ADDR
// end ;
16016: GO 15912
16018: POP
16019: POP
// if isGameLoad then
16020: LD_VAR 0 1
16024: IFFALSE 16499
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16026: LD_ADDR_VAR 0 4
16030: PUSH
16031: LD_EXP 50
16035: PUSH
16036: LD_EXP 49
16040: PUSH
16041: LD_EXP 51
16045: PUSH
16046: LD_EXP 48
16050: PUSH
16051: LD_EXP 52
16055: PUSH
16056: LD_EXP 53
16060: PUSH
16061: LD_EXP 54
16065: PUSH
16066: LD_EXP 55
16070: PUSH
16071: LD_EXP 56
16075: PUSH
16076: LD_EXP 57
16080: PUSH
16081: LD_EXP 58
16085: PUSH
16086: LD_EXP 59
16090: PUSH
16091: LD_EXP 60
16095: PUSH
16096: LD_EXP 61
16100: PUSH
16101: LD_EXP 69
16105: PUSH
16106: LD_EXP 70
16110: PUSH
16111: LD_EXP 71
16115: PUSH
16116: LD_EXP 72
16120: PUSH
16121: LD_EXP 74
16125: PUSH
16126: LD_EXP 75
16130: PUSH
16131: LD_EXP 76
16135: PUSH
16136: LD_EXP 79
16140: PUSH
16141: LD_EXP 81
16145: PUSH
16146: LD_EXP 82
16150: PUSH
16151: LD_EXP 83
16155: PUSH
16156: LD_EXP 85
16160: PUSH
16161: LD_EXP 86
16165: PUSH
16166: LD_EXP 89
16170: PUSH
16171: LD_EXP 90
16175: PUSH
16176: LD_EXP 91
16180: PUSH
16181: LD_EXP 92
16185: PUSH
16186: LD_EXP 93
16190: PUSH
16191: LD_EXP 94
16195: PUSH
16196: LD_EXP 95
16200: PUSH
16201: LD_EXP 96
16205: PUSH
16206: LD_EXP 97
16210: PUSH
16211: LD_EXP 62
16215: PUSH
16216: LD_EXP 63
16220: PUSH
16221: LD_EXP 66
16225: PUSH
16226: LD_EXP 67
16230: PUSH
16231: LD_EXP 68
16235: PUSH
16236: LD_EXP 64
16240: PUSH
16241: LD_EXP 65
16245: PUSH
16246: LD_EXP 73
16250: PUSH
16251: LD_EXP 77
16255: PUSH
16256: LD_EXP 78
16260: PUSH
16261: LD_EXP 80
16265: PUSH
16266: LD_EXP 84
16270: PUSH
16271: LD_EXP 87
16275: PUSH
16276: LD_EXP 88
16280: PUSH
16281: LD_EXP 98
16285: PUSH
16286: LD_EXP 99
16290: PUSH
16291: LD_EXP 100
16295: PUSH
16296: LD_EXP 101
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: ST_TO_ADDR
// tmp :=  ;
16357: LD_ADDR_VAR 0 3
16361: PUSH
16362: LD_STRING 
16364: ST_TO_ADDR
// for i = 1 to normalCounter do
16365: LD_ADDR_VAR 0 8
16369: PUSH
16370: DOUBLE
16371: LD_INT 1
16373: DEC
16374: ST_TO_ADDR
16375: LD_EXP 46
16379: PUSH
16380: FOR_TO
16381: IFFALSE 16417
// begin if flags [ i ] then
16383: LD_VAR 0 4
16387: PUSH
16388: LD_VAR 0 8
16392: ARRAY
16393: IFFALSE 16415
// tmp := tmp & i & ; ;
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: LD_VAR 0 3
16404: PUSH
16405: LD_VAR 0 8
16409: STR
16410: PUSH
16411: LD_STRING ;
16413: STR
16414: ST_TO_ADDR
// end ;
16415: GO 16380
16417: POP
16418: POP
// for i = 1 to hardcoreCounter do
16419: LD_ADDR_VAR 0 8
16423: PUSH
16424: DOUBLE
16425: LD_INT 1
16427: DEC
16428: ST_TO_ADDR
16429: LD_EXP 47
16433: PUSH
16434: FOR_TO
16435: IFFALSE 16481
// begin if flags [ normalCounter + i ] then
16437: LD_VAR 0 4
16441: PUSH
16442: LD_EXP 46
16446: PUSH
16447: LD_VAR 0 8
16451: PLUS
16452: ARRAY
16453: IFFALSE 16479
// tmp := tmp & ( 100 + i ) & ; ;
16455: LD_ADDR_VAR 0 3
16459: PUSH
16460: LD_VAR 0 3
16464: PUSH
16465: LD_INT 100
16467: PUSH
16468: LD_VAR 0 8
16472: PLUS
16473: STR
16474: PUSH
16475: LD_STRING ;
16477: STR
16478: ST_TO_ADDR
// end ;
16479: GO 16434
16481: POP
16482: POP
// if tmp then
16483: LD_VAR 0 3
16487: IFFALSE 16499
// active := tmp ;
16489: LD_ADDR_VAR 0 7
16493: PUSH
16494: LD_VAR 0 3
16498: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16499: LD_STRING getStreamItemsFromMission("
16501: PUSH
16502: LD_VAR 0 5
16506: STR
16507: PUSH
16508: LD_STRING ","
16510: STR
16511: PUSH
16512: LD_VAR 0 6
16516: STR
16517: PUSH
16518: LD_STRING ","
16520: STR
16521: PUSH
16522: LD_VAR 0 7
16526: STR
16527: PUSH
16528: LD_STRING ")
16530: STR
16531: PPUSH
16532: CALL_OW 559
// end else
16536: GO 16545
// ToLua ( getStreamItemsFromMission("","","") ) ;
16538: LD_STRING getStreamItemsFromMission("","","")
16540: PPUSH
16541: CALL_OW 559
// end ;
16545: LD_VAR 0 2
16549: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16550: LD_EXP 45
16554: PUSH
16555: LD_EXP 50
16559: AND
16560: IFFALSE 16684
16562: GO 16564
16564: DISABLE
16565: LD_INT 0
16567: PPUSH
16568: PPUSH
// begin enable ;
16569: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16570: LD_ADDR_VAR 0 2
16574: PUSH
16575: LD_INT 22
16577: PUSH
16578: LD_OWVAR 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 2
16589: PUSH
16590: LD_INT 34
16592: PUSH
16593: LD_INT 7
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 34
16602: PUSH
16603: LD_INT 45
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 34
16612: PUSH
16613: LD_INT 28
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 34
16622: PUSH
16623: LD_INT 47
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PPUSH
16641: CALL_OW 69
16645: ST_TO_ADDR
// if not tmp then
16646: LD_VAR 0 2
16650: NOT
16651: IFFALSE 16655
// exit ;
16653: GO 16684
// for i in tmp do
16655: LD_ADDR_VAR 0 1
16659: PUSH
16660: LD_VAR 0 2
16664: PUSH
16665: FOR_IN
16666: IFFALSE 16682
// begin SetLives ( i , 0 ) ;
16668: LD_VAR 0 1
16672: PPUSH
16673: LD_INT 0
16675: PPUSH
16676: CALL_OW 234
// end ;
16680: GO 16665
16682: POP
16683: POP
// end ;
16684: PPOPN 2
16686: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16687: LD_EXP 45
16691: PUSH
16692: LD_EXP 51
16696: AND
16697: IFFALSE 16781
16699: GO 16701
16701: DISABLE
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
// begin enable ;
16706: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16707: LD_ADDR_VAR 0 2
16711: PUSH
16712: LD_INT 22
16714: PUSH
16715: LD_OWVAR 2
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 32
16726: PUSH
16727: LD_INT 3
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: ST_TO_ADDR
// if not tmp then
16743: LD_VAR 0 2
16747: NOT
16748: IFFALSE 16752
// exit ;
16750: GO 16781
// for i in tmp do
16752: LD_ADDR_VAR 0 1
16756: PUSH
16757: LD_VAR 0 2
16761: PUSH
16762: FOR_IN
16763: IFFALSE 16779
// begin SetLives ( i , 0 ) ;
16765: LD_VAR 0 1
16769: PPUSH
16770: LD_INT 0
16772: PPUSH
16773: CALL_OW 234
// end ;
16777: GO 16762
16779: POP
16780: POP
// end ;
16781: PPOPN 2
16783: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16784: LD_EXP 45
16788: PUSH
16789: LD_EXP 48
16793: AND
16794: IFFALSE 16887
16796: GO 16798
16798: DISABLE
16799: LD_INT 0
16801: PPUSH
// begin enable ;
16802: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16803: LD_ADDR_VAR 0 1
16807: PUSH
16808: LD_INT 22
16810: PUSH
16811: LD_OWVAR 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 2
16822: PUSH
16823: LD_INT 25
16825: PUSH
16826: LD_INT 5
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 25
16835: PUSH
16836: LD_INT 9
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 25
16845: PUSH
16846: LD_INT 8
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PUSH
16868: FOR_IN
16869: IFFALSE 16885
// begin SetClass ( i , 1 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 1
16878: PPUSH
16879: CALL_OW 336
// end ;
16883: GO 16868
16885: POP
16886: POP
// end ;
16887: PPOPN 1
16889: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16890: LD_EXP 45
16894: PUSH
16895: LD_EXP 49
16899: AND
16900: PUSH
16901: LD_OWVAR 65
16905: PUSH
16906: LD_INT 7
16908: LESS
16909: AND
16910: IFFALSE 16924
16912: GO 16914
16914: DISABLE
// begin enable ;
16915: ENABLE
// game_speed := 7 ;
16916: LD_ADDR_OWVAR 65
16920: PUSH
16921: LD_INT 7
16923: ST_TO_ADDR
// end ;
16924: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16925: LD_EXP 45
16929: PUSH
16930: LD_EXP 52
16934: AND
16935: IFFALSE 17137
16937: GO 16939
16939: DISABLE
16940: LD_INT 0
16942: PPUSH
16943: PPUSH
16944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16945: LD_ADDR_VAR 0 3
16949: PUSH
16950: LD_INT 81
16952: PUSH
16953: LD_OWVAR 2
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 21
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PPUSH
16976: CALL_OW 69
16980: ST_TO_ADDR
// if not tmp then
16981: LD_VAR 0 3
16985: NOT
16986: IFFALSE 16990
// exit ;
16988: GO 17137
// if tmp > 5 then
16990: LD_VAR 0 3
16994: PUSH
16995: LD_INT 5
16997: GREATER
16998: IFFALSE 17010
// k := 5 else
17000: LD_ADDR_VAR 0 2
17004: PUSH
17005: LD_INT 5
17007: ST_TO_ADDR
17008: GO 17020
// k := tmp ;
17010: LD_ADDR_VAR 0 2
17014: PUSH
17015: LD_VAR 0 3
17019: ST_TO_ADDR
// for i := 1 to k do
17020: LD_ADDR_VAR 0 1
17024: PUSH
17025: DOUBLE
17026: LD_INT 1
17028: DEC
17029: ST_TO_ADDR
17030: LD_VAR 0 2
17034: PUSH
17035: FOR_TO
17036: IFFALSE 17135
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17038: LD_VAR 0 3
17042: PUSH
17043: LD_VAR 0 1
17047: ARRAY
17048: PPUSH
17049: LD_VAR 0 1
17053: PUSH
17054: LD_INT 4
17056: MOD
17057: PUSH
17058: LD_INT 1
17060: PLUS
17061: PPUSH
17062: CALL_OW 259
17066: PUSH
17067: LD_INT 10
17069: LESS
17070: IFFALSE 17133
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17072: LD_VAR 0 3
17076: PUSH
17077: LD_VAR 0 1
17081: ARRAY
17082: PPUSH
17083: LD_VAR 0 1
17087: PUSH
17088: LD_INT 4
17090: MOD
17091: PUSH
17092: LD_INT 1
17094: PLUS
17095: PPUSH
17096: LD_VAR 0 3
17100: PUSH
17101: LD_VAR 0 1
17105: ARRAY
17106: PPUSH
17107: LD_VAR 0 1
17111: PUSH
17112: LD_INT 4
17114: MOD
17115: PUSH
17116: LD_INT 1
17118: PLUS
17119: PPUSH
17120: CALL_OW 259
17124: PUSH
17125: LD_INT 1
17127: PLUS
17128: PPUSH
17129: CALL_OW 237
17133: GO 17035
17135: POP
17136: POP
// end ;
17137: PPOPN 3
17139: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17140: LD_EXP 45
17144: PUSH
17145: LD_EXP 53
17149: AND
17150: IFFALSE 17170
17152: GO 17154
17154: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17155: LD_INT 4
17157: PPUSH
17158: LD_OWVAR 2
17162: PPUSH
17163: LD_INT 0
17165: PPUSH
17166: CALL_OW 324
17170: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17171: LD_EXP 45
17175: PUSH
17176: LD_EXP 82
17180: AND
17181: IFFALSE 17201
17183: GO 17185
17185: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17186: LD_INT 19
17188: PPUSH
17189: LD_OWVAR 2
17193: PPUSH
17194: LD_INT 0
17196: PPUSH
17197: CALL_OW 324
17201: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17202: LD_EXP 45
17206: PUSH
17207: LD_EXP 54
17211: AND
17212: IFFALSE 17314
17214: GO 17216
17216: DISABLE
17217: LD_INT 0
17219: PPUSH
17220: PPUSH
// begin enable ;
17221: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_INT 22
17229: PUSH
17230: LD_OWVAR 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 2
17241: PUSH
17242: LD_INT 34
17244: PUSH
17245: LD_INT 11
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 34
17254: PUSH
17255: LD_INT 30
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: LIST
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PPUSH
17271: CALL_OW 69
17275: ST_TO_ADDR
// if not tmp then
17276: LD_VAR 0 2
17280: NOT
17281: IFFALSE 17285
// exit ;
17283: GO 17314
// for i in tmp do
17285: LD_ADDR_VAR 0 1
17289: PUSH
17290: LD_VAR 0 2
17294: PUSH
17295: FOR_IN
17296: IFFALSE 17312
// begin SetLives ( i , 0 ) ;
17298: LD_VAR 0 1
17302: PPUSH
17303: LD_INT 0
17305: PPUSH
17306: CALL_OW 234
// end ;
17310: GO 17295
17312: POP
17313: POP
// end ;
17314: PPOPN 2
17316: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17317: LD_EXP 45
17321: PUSH
17322: LD_EXP 55
17326: AND
17327: IFFALSE 17347
17329: GO 17331
17331: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17332: LD_INT 32
17334: PPUSH
17335: LD_OWVAR 2
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 324
17347: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17348: LD_EXP 45
17352: PUSH
17353: LD_EXP 56
17357: AND
17358: IFFALSE 17539
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
17366: PPUSH
17367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: LD_INT 22
17375: PUSH
17376: LD_OWVAR 2
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 33
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL_OW 69
17403: ST_TO_ADDR
// if not tmp then
17404: LD_VAR 0 2
17408: NOT
17409: IFFALSE 17413
// exit ;
17411: GO 17539
// side := 0 ;
17413: LD_ADDR_VAR 0 3
17417: PUSH
17418: LD_INT 0
17420: ST_TO_ADDR
// for i := 1 to 8 do
17421: LD_ADDR_VAR 0 1
17425: PUSH
17426: DOUBLE
17427: LD_INT 1
17429: DEC
17430: ST_TO_ADDR
17431: LD_INT 8
17433: PUSH
17434: FOR_TO
17435: IFFALSE 17483
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17437: LD_OWVAR 2
17441: PUSH
17442: LD_VAR 0 1
17446: NONEQUAL
17447: PUSH
17448: LD_OWVAR 2
17452: PPUSH
17453: LD_VAR 0 1
17457: PPUSH
17458: CALL_OW 81
17462: PUSH
17463: LD_INT 2
17465: EQUAL
17466: AND
17467: IFFALSE 17481
// begin side := i ;
17469: LD_ADDR_VAR 0 3
17473: PUSH
17474: LD_VAR 0 1
17478: ST_TO_ADDR
// break ;
17479: GO 17483
// end ;
17481: GO 17434
17483: POP
17484: POP
// if not side then
17485: LD_VAR 0 3
17489: NOT
17490: IFFALSE 17494
// exit ;
17492: GO 17539
// for i := 1 to tmp do
17494: LD_ADDR_VAR 0 1
17498: PUSH
17499: DOUBLE
17500: LD_INT 1
17502: DEC
17503: ST_TO_ADDR
17504: LD_VAR 0 2
17508: PUSH
17509: FOR_TO
17510: IFFALSE 17537
// if Prob ( 60 ) then
17512: LD_INT 60
17514: PPUSH
17515: CALL_OW 13
17519: IFFALSE 17535
// SetSide ( i , side ) ;
17521: LD_VAR 0 1
17525: PPUSH
17526: LD_VAR 0 3
17530: PPUSH
17531: CALL_OW 235
17535: GO 17509
17537: POP
17538: POP
// end ;
17539: PPOPN 3
17541: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17542: LD_EXP 45
17546: PUSH
17547: LD_EXP 58
17551: AND
17552: IFFALSE 17671
17554: GO 17556
17556: DISABLE
17557: LD_INT 0
17559: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17560: LD_ADDR_VAR 0 1
17564: PUSH
17565: LD_INT 22
17567: PUSH
17568: LD_OWVAR 2
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 21
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: LD_INT 23
17592: PUSH
17593: LD_INT 0
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: PPUSH
17609: CALL_OW 69
17613: PUSH
17614: FOR_IN
17615: IFFALSE 17669
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17617: LD_VAR 0 1
17621: PPUSH
17622: CALL_OW 257
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: LD_INT 3
17635: PUSH
17636: LD_INT 4
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: IN
17645: IFFALSE 17667
// SetClass ( un , rand ( 1 , 4 ) ) ;
17647: LD_VAR 0 1
17651: PPUSH
17652: LD_INT 1
17654: PPUSH
17655: LD_INT 4
17657: PPUSH
17658: CALL_OW 12
17662: PPUSH
17663: CALL_OW 336
17667: GO 17614
17669: POP
17670: POP
// end ;
17671: PPOPN 1
17673: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17674: LD_EXP 45
17678: PUSH
17679: LD_EXP 57
17683: AND
17684: IFFALSE 17763
17686: GO 17688
17688: DISABLE
17689: LD_INT 0
17691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17692: LD_ADDR_VAR 0 1
17696: PUSH
17697: LD_INT 22
17699: PUSH
17700: LD_OWVAR 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 21
17711: PUSH
17712: LD_INT 3
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: ST_TO_ADDR
// if not tmp then
17728: LD_VAR 0 1
17732: NOT
17733: IFFALSE 17737
// exit ;
17735: GO 17763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 1
17744: PPUSH
17745: LD_VAR 0 1
17749: PPUSH
17750: CALL_OW 12
17754: ARRAY
17755: PPUSH
17756: LD_INT 100
17758: PPUSH
17759: CALL_OW 234
// end ;
17763: PPOPN 1
17765: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17766: LD_EXP 45
17770: PUSH
17771: LD_EXP 59
17775: AND
17776: IFFALSE 17874
17778: GO 17780
17780: DISABLE
17781: LD_INT 0
17783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 22
17791: PUSH
17792: LD_OWVAR 2
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 21
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 69
17819: ST_TO_ADDR
// if not tmp then
17820: LD_VAR 0 1
17824: NOT
17825: IFFALSE 17829
// exit ;
17827: GO 17874
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17829: LD_VAR 0 1
17833: PUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 12
17846: ARRAY
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: LD_INT 4
17853: PPUSH
17854: CALL_OW 12
17858: PPUSH
17859: LD_INT 3000
17861: PPUSH
17862: LD_INT 9000
17864: PPUSH
17865: CALL_OW 12
17869: PPUSH
17870: CALL_OW 492
// end ;
17874: PPOPN 1
17876: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17877: LD_EXP 45
17881: PUSH
17882: LD_EXP 60
17886: AND
17887: IFFALSE 17907
17889: GO 17891
17891: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17892: LD_INT 1
17894: PPUSH
17895: LD_OWVAR 2
17899: PPUSH
17900: LD_INT 0
17902: PPUSH
17903: CALL_OW 324
17907: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17908: LD_EXP 45
17912: PUSH
17913: LD_EXP 61
17917: AND
17918: IFFALSE 18001
17920: GO 17922
17922: DISABLE
17923: LD_INT 0
17925: PPUSH
17926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_INT 22
17934: PUSH
17935: LD_OWVAR 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 21
17946: PUSH
17947: LD_INT 3
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PPUSH
17958: CALL_OW 69
17962: ST_TO_ADDR
// if not tmp then
17963: LD_VAR 0 2
17967: NOT
17968: IFFALSE 17972
// exit ;
17970: GO 18001
// for i in tmp do
17972: LD_ADDR_VAR 0 1
17976: PUSH
17977: LD_VAR 0 2
17981: PUSH
17982: FOR_IN
17983: IFFALSE 17999
// SetBLevel ( i , 10 ) ;
17985: LD_VAR 0 1
17989: PPUSH
17990: LD_INT 10
17992: PPUSH
17993: CALL_OW 241
17997: GO 17982
17999: POP
18000: POP
// end ;
18001: PPOPN 2
18003: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18004: LD_EXP 45
18008: PUSH
18009: LD_EXP 62
18013: AND
18014: IFFALSE 18125
18016: GO 18018
18018: DISABLE
18019: LD_INT 0
18021: PPUSH
18022: PPUSH
18023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18024: LD_ADDR_VAR 0 3
18028: PUSH
18029: LD_INT 22
18031: PUSH
18032: LD_OWVAR 2
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 25
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 69
18059: ST_TO_ADDR
// if not tmp then
18060: LD_VAR 0 3
18064: NOT
18065: IFFALSE 18069
// exit ;
18067: GO 18125
// un := tmp [ rand ( 1 , tmp ) ] ;
18069: LD_ADDR_VAR 0 2
18073: PUSH
18074: LD_VAR 0 3
18078: PUSH
18079: LD_INT 1
18081: PPUSH
18082: LD_VAR 0 3
18086: PPUSH
18087: CALL_OW 12
18091: ARRAY
18092: ST_TO_ADDR
// if Crawls ( un ) then
18093: LD_VAR 0 2
18097: PPUSH
18098: CALL_OW 318
18102: IFFALSE 18113
// ComWalk ( un ) ;
18104: LD_VAR 0 2
18108: PPUSH
18109: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18113: LD_VAR 0 2
18117: PPUSH
18118: LD_INT 5
18120: PPUSH
18121: CALL_OW 336
// end ;
18125: PPOPN 3
18127: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18128: LD_EXP 45
18132: PUSH
18133: LD_EXP 63
18137: AND
18138: PUSH
18139: LD_OWVAR 67
18143: PUSH
18144: LD_INT 4
18146: LESS
18147: AND
18148: IFFALSE 18167
18150: GO 18152
18152: DISABLE
// begin Difficulty := Difficulty + 1 ;
18153: LD_ADDR_OWVAR 67
18157: PUSH
18158: LD_OWVAR 67
18162: PUSH
18163: LD_INT 1
18165: PLUS
18166: ST_TO_ADDR
// end ;
18167: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18168: LD_EXP 45
18172: PUSH
18173: LD_EXP 64
18177: AND
18178: IFFALSE 18281
18180: GO 18182
18182: DISABLE
18183: LD_INT 0
18185: PPUSH
// begin for i := 1 to 5 do
18186: LD_ADDR_VAR 0 1
18190: PUSH
18191: DOUBLE
18192: LD_INT 1
18194: DEC
18195: ST_TO_ADDR
18196: LD_INT 5
18198: PUSH
18199: FOR_TO
18200: IFFALSE 18279
// begin uc_nation := nation_nature ;
18202: LD_ADDR_OWVAR 21
18206: PUSH
18207: LD_INT 0
18209: ST_TO_ADDR
// uc_side := 0 ;
18210: LD_ADDR_OWVAR 20
18214: PUSH
18215: LD_INT 0
18217: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18218: LD_ADDR_OWVAR 29
18222: PUSH
18223: LD_INT 12
18225: PUSH
18226: LD_INT 12
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: ST_TO_ADDR
// hc_agressivity := 20 ;
18233: LD_ADDR_OWVAR 35
18237: PUSH
18238: LD_INT 20
18240: ST_TO_ADDR
// hc_class := class_tiger ;
18241: LD_ADDR_OWVAR 28
18245: PUSH
18246: LD_INT 14
18248: ST_TO_ADDR
// hc_gallery :=  ;
18249: LD_ADDR_OWVAR 33
18253: PUSH
18254: LD_STRING 
18256: ST_TO_ADDR
// hc_name :=  ;
18257: LD_ADDR_OWVAR 26
18261: PUSH
18262: LD_STRING 
18264: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18265: CALL_OW 44
18269: PPUSH
18270: LD_INT 0
18272: PPUSH
18273: CALL_OW 51
// end ;
18277: GO 18199
18279: POP
18280: POP
// end ;
18281: PPOPN 1
18283: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18284: LD_EXP 45
18288: PUSH
18289: LD_EXP 65
18293: AND
18294: IFFALSE 18303
18296: GO 18298
18298: DISABLE
// StreamSibBomb ;
18299: CALL 18304 0 0
18303: END
// export function StreamSibBomb ; var i , x , y ; begin
18304: LD_INT 0
18306: PPUSH
18307: PPUSH
18308: PPUSH
18309: PPUSH
// result := false ;
18310: LD_ADDR_VAR 0 1
18314: PUSH
18315: LD_INT 0
18317: ST_TO_ADDR
// for i := 1 to 16 do
18318: LD_ADDR_VAR 0 2
18322: PUSH
18323: DOUBLE
18324: LD_INT 1
18326: DEC
18327: ST_TO_ADDR
18328: LD_INT 16
18330: PUSH
18331: FOR_TO
18332: IFFALSE 18531
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18334: LD_ADDR_VAR 0 3
18338: PUSH
18339: LD_INT 10
18341: PUSH
18342: LD_INT 20
18344: PUSH
18345: LD_INT 30
18347: PUSH
18348: LD_INT 40
18350: PUSH
18351: LD_INT 50
18353: PUSH
18354: LD_INT 60
18356: PUSH
18357: LD_INT 70
18359: PUSH
18360: LD_INT 80
18362: PUSH
18363: LD_INT 90
18365: PUSH
18366: LD_INT 100
18368: PUSH
18369: LD_INT 110
18371: PUSH
18372: LD_INT 120
18374: PUSH
18375: LD_INT 130
18377: PUSH
18378: LD_INT 140
18380: PUSH
18381: LD_INT 150
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 1
18403: PPUSH
18404: LD_INT 15
18406: PPUSH
18407: CALL_OW 12
18411: ARRAY
18412: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18413: LD_ADDR_VAR 0 4
18417: PUSH
18418: LD_INT 10
18420: PUSH
18421: LD_INT 20
18423: PUSH
18424: LD_INT 30
18426: PUSH
18427: LD_INT 40
18429: PUSH
18430: LD_INT 50
18432: PUSH
18433: LD_INT 60
18435: PUSH
18436: LD_INT 70
18438: PUSH
18439: LD_INT 80
18441: PUSH
18442: LD_INT 90
18444: PUSH
18445: LD_INT 100
18447: PUSH
18448: LD_INT 110
18450: PUSH
18451: LD_INT 120
18453: PUSH
18454: LD_INT 130
18456: PUSH
18457: LD_INT 140
18459: PUSH
18460: LD_INT 150
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: PPUSH
18483: LD_INT 15
18485: PPUSH
18486: CALL_OW 12
18490: ARRAY
18491: ST_TO_ADDR
// if ValidHex ( x , y ) then
18492: LD_VAR 0 3
18496: PPUSH
18497: LD_VAR 0 4
18501: PPUSH
18502: CALL_OW 488
18506: IFFALSE 18529
// begin result := [ x , y ] ;
18508: LD_ADDR_VAR 0 1
18512: PUSH
18513: LD_VAR 0 3
18517: PUSH
18518: LD_VAR 0 4
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: ST_TO_ADDR
// break ;
18527: GO 18531
// end ; end ;
18529: GO 18331
18531: POP
18532: POP
// if result then
18533: LD_VAR 0 1
18537: IFFALSE 18597
// begin ToLua ( playSibBomb() ) ;
18539: LD_STRING playSibBomb()
18541: PPUSH
18542: CALL_OW 559
// wait ( 0 0$14 ) ;
18546: LD_INT 490
18548: PPUSH
18549: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18553: LD_VAR 0 1
18557: PUSH
18558: LD_INT 1
18560: ARRAY
18561: PPUSH
18562: LD_VAR 0 1
18566: PUSH
18567: LD_INT 2
18569: ARRAY
18570: PPUSH
18571: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18575: LD_VAR 0 1
18579: PUSH
18580: LD_INT 1
18582: ARRAY
18583: PPUSH
18584: LD_VAR 0 1
18588: PUSH
18589: LD_INT 2
18591: ARRAY
18592: PPUSH
18593: CALL_OW 429
// end ; end ;
18597: LD_VAR 0 1
18601: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18602: LD_EXP 45
18606: PUSH
18607: LD_EXP 67
18611: AND
18612: IFFALSE 18624
18614: GO 18616
18616: DISABLE
// YouLost (  ) ;
18617: LD_STRING 
18619: PPUSH
18620: CALL_OW 104
18624: END
// every 0 0$1 trigger StreamModeActive and sFog do
18625: LD_EXP 45
18629: PUSH
18630: LD_EXP 66
18634: AND
18635: IFFALSE 18649
18637: GO 18639
18639: DISABLE
// FogOff ( your_side ) ;
18640: LD_OWVAR 2
18644: PPUSH
18645: CALL_OW 344
18649: END
// every 0 0$1 trigger StreamModeActive and sSun do
18650: LD_EXP 45
18654: PUSH
18655: LD_EXP 68
18659: AND
18660: IFFALSE 18688
18662: GO 18664
18664: DISABLE
// begin solar_recharge_percent := 0 ;
18665: LD_ADDR_OWVAR 79
18669: PUSH
18670: LD_INT 0
18672: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18673: LD_INT 10500
18675: PPUSH
18676: CALL_OW 67
// solar_recharge_percent := 100 ;
18680: LD_ADDR_OWVAR 79
18684: PUSH
18685: LD_INT 100
18687: ST_TO_ADDR
// end ;
18688: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18689: LD_EXP 45
18693: PUSH
18694: LD_EXP 69
18698: AND
18699: IFFALSE 18938
18701: GO 18703
18703: DISABLE
18704: LD_INT 0
18706: PPUSH
18707: PPUSH
18708: PPUSH
// begin tmp := [ ] ;
18709: LD_ADDR_VAR 0 3
18713: PUSH
18714: EMPTY
18715: ST_TO_ADDR
// for i := 1 to 6 do
18716: LD_ADDR_VAR 0 1
18720: PUSH
18721: DOUBLE
18722: LD_INT 1
18724: DEC
18725: ST_TO_ADDR
18726: LD_INT 6
18728: PUSH
18729: FOR_TO
18730: IFFALSE 18835
// begin uc_nation := nation_nature ;
18732: LD_ADDR_OWVAR 21
18736: PUSH
18737: LD_INT 0
18739: ST_TO_ADDR
// uc_side := 0 ;
18740: LD_ADDR_OWVAR 20
18744: PUSH
18745: LD_INT 0
18747: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18748: LD_ADDR_OWVAR 29
18752: PUSH
18753: LD_INT 12
18755: PUSH
18756: LD_INT 12
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: ST_TO_ADDR
// hc_agressivity := 20 ;
18763: LD_ADDR_OWVAR 35
18767: PUSH
18768: LD_INT 20
18770: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18771: LD_ADDR_OWVAR 28
18775: PUSH
18776: LD_INT 17
18778: ST_TO_ADDR
// hc_gallery :=  ;
18779: LD_ADDR_OWVAR 33
18783: PUSH
18784: LD_STRING 
18786: ST_TO_ADDR
// hc_name :=  ;
18787: LD_ADDR_OWVAR 26
18791: PUSH
18792: LD_STRING 
18794: ST_TO_ADDR
// un := CreateHuman ;
18795: LD_ADDR_VAR 0 2
18799: PUSH
18800: CALL_OW 44
18804: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18805: LD_VAR 0 2
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: CALL_OW 51
// tmp := tmp ^ un ;
18817: LD_ADDR_VAR 0 3
18821: PUSH
18822: LD_VAR 0 3
18826: PUSH
18827: LD_VAR 0 2
18831: ADD
18832: ST_TO_ADDR
// end ;
18833: GO 18729
18835: POP
18836: POP
// repeat wait ( 0 0$1 ) ;
18837: LD_INT 35
18839: PPUSH
18840: CALL_OW 67
// for un in tmp do
18844: LD_ADDR_VAR 0 2
18848: PUSH
18849: LD_VAR 0 3
18853: PUSH
18854: FOR_IN
18855: IFFALSE 18929
// begin if IsDead ( un ) then
18857: LD_VAR 0 2
18861: PPUSH
18862: CALL_OW 301
18866: IFFALSE 18886
// begin tmp := tmp diff un ;
18868: LD_ADDR_VAR 0 3
18872: PUSH
18873: LD_VAR 0 3
18877: PUSH
18878: LD_VAR 0 2
18882: DIFF
18883: ST_TO_ADDR
// continue ;
18884: GO 18854
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18886: LD_VAR 0 2
18890: PPUSH
18891: LD_INT 3
18893: PUSH
18894: LD_INT 22
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PPUSH
18908: CALL_OW 69
18912: PPUSH
18913: LD_VAR 0 2
18917: PPUSH
18918: CALL_OW 74
18922: PPUSH
18923: CALL_OW 115
// end ;
18927: GO 18854
18929: POP
18930: POP
// until not tmp ;
18931: LD_VAR 0 3
18935: NOT
18936: IFFALSE 18837
// end ;
18938: PPOPN 3
18940: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18941: LD_EXP 45
18945: PUSH
18946: LD_EXP 70
18950: AND
18951: IFFALSE 19005
18953: GO 18955
18955: DISABLE
// begin ToLua ( displayTroll(); ) ;
18956: LD_STRING displayTroll();
18958: PPUSH
18959: CALL_OW 559
// wait ( 3 3$00 ) ;
18963: LD_INT 6300
18965: PPUSH
18966: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18970: LD_STRING hideTroll();
18972: PPUSH
18973: CALL_OW 559
// wait ( 1 1$00 ) ;
18977: LD_INT 2100
18979: PPUSH
18980: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18984: LD_STRING displayTroll();
18986: PPUSH
18987: CALL_OW 559
// wait ( 1 1$00 ) ;
18991: LD_INT 2100
18993: PPUSH
18994: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18998: LD_STRING hideTroll();
19000: PPUSH
19001: CALL_OW 559
// end ;
19005: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19006: LD_EXP 45
19010: PUSH
19011: LD_EXP 71
19015: AND
19016: IFFALSE 19079
19018: GO 19020
19020: DISABLE
19021: LD_INT 0
19023: PPUSH
// begin p := 0 ;
19024: LD_ADDR_VAR 0 1
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// repeat game_speed := 1 ;
19032: LD_ADDR_OWVAR 65
19036: PUSH
19037: LD_INT 1
19039: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19040: LD_INT 35
19042: PPUSH
19043: CALL_OW 67
// p := p + 1 ;
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_VAR 0 1
19056: PUSH
19057: LD_INT 1
19059: PLUS
19060: ST_TO_ADDR
// until p >= 60 ;
19061: LD_VAR 0 1
19065: PUSH
19066: LD_INT 60
19068: GREATEREQUAL
19069: IFFALSE 19032
// game_speed := 4 ;
19071: LD_ADDR_OWVAR 65
19075: PUSH
19076: LD_INT 4
19078: ST_TO_ADDR
// end ;
19079: PPOPN 1
19081: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19082: LD_EXP 45
19086: PUSH
19087: LD_EXP 72
19091: AND
19092: IFFALSE 19238
19094: GO 19096
19096: DISABLE
19097: LD_INT 0
19099: PPUSH
19100: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19101: LD_ADDR_VAR 0 1
19105: PUSH
19106: LD_INT 22
19108: PUSH
19109: LD_OWVAR 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: LD_INT 30
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 30
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 69
19154: ST_TO_ADDR
// if not depot then
19155: LD_VAR 0 1
19159: NOT
19160: IFFALSE 19164
// exit ;
19162: GO 19238
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19164: LD_ADDR_VAR 0 2
19168: PUSH
19169: LD_VAR 0 1
19173: PUSH
19174: LD_INT 1
19176: PPUSH
19177: LD_VAR 0 1
19181: PPUSH
19182: CALL_OW 12
19186: ARRAY
19187: PPUSH
19188: CALL_OW 274
19192: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19193: LD_VAR 0 2
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: LD_INT 0
19203: PPUSH
19204: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19208: LD_VAR 0 2
19212: PPUSH
19213: LD_INT 2
19215: PPUSH
19216: LD_INT 0
19218: PPUSH
19219: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19223: LD_VAR 0 2
19227: PPUSH
19228: LD_INT 3
19230: PPUSH
19231: LD_INT 0
19233: PPUSH
19234: CALL_OW 277
// end ;
19238: PPOPN 2
19240: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19241: LD_EXP 45
19245: PUSH
19246: LD_EXP 73
19250: AND
19251: IFFALSE 19348
19253: GO 19255
19255: DISABLE
19256: LD_INT 0
19258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19259: LD_ADDR_VAR 0 1
19263: PUSH
19264: LD_INT 22
19266: PUSH
19267: LD_OWVAR 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 21
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 3
19288: PUSH
19289: LD_INT 23
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: LIST
19307: PPUSH
19308: CALL_OW 69
19312: ST_TO_ADDR
// if not tmp then
19313: LD_VAR 0 1
19317: NOT
19318: IFFALSE 19322
// exit ;
19320: GO 19348
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19322: LD_VAR 0 1
19326: PUSH
19327: LD_INT 1
19329: PPUSH
19330: LD_VAR 0 1
19334: PPUSH
19335: CALL_OW 12
19339: ARRAY
19340: PPUSH
19341: LD_INT 200
19343: PPUSH
19344: CALL_OW 234
// end ;
19348: PPOPN 1
19350: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19351: LD_EXP 45
19355: PUSH
19356: LD_EXP 74
19360: AND
19361: IFFALSE 19440
19363: GO 19365
19365: DISABLE
19366: LD_INT 0
19368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19369: LD_ADDR_VAR 0 1
19373: PUSH
19374: LD_INT 22
19376: PUSH
19377: LD_OWVAR 2
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 21
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PPUSH
19400: CALL_OW 69
19404: ST_TO_ADDR
// if not tmp then
19405: LD_VAR 0 1
19409: NOT
19410: IFFALSE 19414
// exit ;
19412: GO 19440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19414: LD_VAR 0 1
19418: PUSH
19419: LD_INT 1
19421: PPUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 12
19431: ARRAY
19432: PPUSH
19433: LD_INT 60
19435: PPUSH
19436: CALL_OW 234
// end ;
19440: PPOPN 1
19442: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19443: LD_EXP 45
19447: PUSH
19448: LD_EXP 75
19452: AND
19453: IFFALSE 19552
19455: GO 19457
19457: DISABLE
19458: LD_INT 0
19460: PPUSH
19461: PPUSH
// begin enable ;
19462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19463: LD_ADDR_VAR 0 1
19467: PUSH
19468: LD_INT 22
19470: PUSH
19471: LD_OWVAR 2
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 61
19482: PUSH
19483: EMPTY
19484: LIST
19485: PUSH
19486: LD_INT 33
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: PPUSH
19501: CALL_OW 69
19505: ST_TO_ADDR
// if not tmp then
19506: LD_VAR 0 1
19510: NOT
19511: IFFALSE 19515
// exit ;
19513: GO 19552
// for i in tmp do
19515: LD_ADDR_VAR 0 2
19519: PUSH
19520: LD_VAR 0 1
19524: PUSH
19525: FOR_IN
19526: IFFALSE 19550
// if IsControledBy ( i ) then
19528: LD_VAR 0 2
19532: PPUSH
19533: CALL_OW 312
19537: IFFALSE 19548
// ComUnlink ( i ) ;
19539: LD_VAR 0 2
19543: PPUSH
19544: CALL_OW 136
19548: GO 19525
19550: POP
19551: POP
// end ;
19552: PPOPN 2
19554: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19555: LD_EXP 45
19559: PUSH
19560: LD_EXP 76
19564: AND
19565: IFFALSE 19705
19567: GO 19569
19569: DISABLE
19570: LD_INT 0
19572: PPUSH
19573: PPUSH
// begin ToLua ( displayPowell(); ) ;
19574: LD_STRING displayPowell();
19576: PPUSH
19577: CALL_OW 559
// uc_side := 0 ;
19581: LD_ADDR_OWVAR 20
19585: PUSH
19586: LD_INT 0
19588: ST_TO_ADDR
// uc_nation := 2 ;
19589: LD_ADDR_OWVAR 21
19593: PUSH
19594: LD_INT 2
19596: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19597: LD_ADDR_OWVAR 37
19601: PUSH
19602: LD_INT 14
19604: ST_TO_ADDR
// vc_engine := engine_siberite ;
19605: LD_ADDR_OWVAR 39
19609: PUSH
19610: LD_INT 3
19612: ST_TO_ADDR
// vc_control := control_apeman ;
19613: LD_ADDR_OWVAR 38
19617: PUSH
19618: LD_INT 5
19620: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19621: LD_ADDR_OWVAR 40
19625: PUSH
19626: LD_INT 29
19628: ST_TO_ADDR
// un := CreateVehicle ;
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: CALL_OW 45
19638: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19639: LD_VAR 0 2
19643: PPUSH
19644: LD_INT 1
19646: PPUSH
19647: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19651: LD_INT 35
19653: PPUSH
19654: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19658: LD_VAR 0 2
19662: PPUSH
19663: LD_INT 22
19665: PUSH
19666: LD_OWVAR 2
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PPUSH
19675: CALL_OW 69
19679: PPUSH
19680: LD_VAR 0 2
19684: PPUSH
19685: CALL_OW 74
19689: PPUSH
19690: CALL_OW 115
// until IsDead ( un ) ;
19694: LD_VAR 0 2
19698: PPUSH
19699: CALL_OW 301
19703: IFFALSE 19651
// end ;
19705: PPOPN 2
19707: END
// every 0 0$1 trigger StreamModeActive and sStu do
19708: LD_EXP 45
19712: PUSH
19713: LD_EXP 84
19717: AND
19718: IFFALSE 19734
19720: GO 19722
19722: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19723: LD_STRING displayStucuk();
19725: PPUSH
19726: CALL_OW 559
// ResetFog ;
19730: CALL_OW 335
// end ;
19734: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19735: LD_EXP 45
19739: PUSH
19740: LD_EXP 77
19744: AND
19745: IFFALSE 19886
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
19753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: LD_INT 22
19761: PUSH
19762: LD_OWVAR 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// if not tmp then
19790: LD_VAR 0 2
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 19886
// un := tmp [ rand ( 1 , tmp ) ] ;
19799: LD_ADDR_VAR 0 1
19803: PUSH
19804: LD_VAR 0 2
19808: PUSH
19809: LD_INT 1
19811: PPUSH
19812: LD_VAR 0 2
19816: PPUSH
19817: CALL_OW 12
19821: ARRAY
19822: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19823: LD_VAR 0 1
19827: PPUSH
19828: LD_INT 0
19830: PPUSH
19831: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19835: LD_VAR 0 1
19839: PPUSH
19840: LD_OWVAR 3
19844: PUSH
19845: LD_VAR 0 1
19849: DIFF
19850: PPUSH
19851: LD_VAR 0 1
19855: PPUSH
19856: CALL_OW 74
19860: PPUSH
19861: CALL_OW 115
// wait ( 0 0$20 ) ;
19865: LD_INT 700
19867: PPUSH
19868: CALL_OW 67
// SetSide ( un , your_side ) ;
19872: LD_VAR 0 1
19876: PPUSH
19877: LD_OWVAR 2
19881: PPUSH
19882: CALL_OW 235
// end ;
19886: PPOPN 2
19888: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19889: LD_EXP 45
19893: PUSH
19894: LD_EXP 78
19898: AND
19899: IFFALSE 20005
19901: GO 19903
19903: DISABLE
19904: LD_INT 0
19906: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19907: LD_ADDR_VAR 0 1
19911: PUSH
19912: LD_INT 22
19914: PUSH
19915: LD_OWVAR 2
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: LD_INT 30
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 30
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PPUSH
19956: CALL_OW 69
19960: ST_TO_ADDR
// if not depot then
19961: LD_VAR 0 1
19965: NOT
19966: IFFALSE 19970
// exit ;
19968: GO 20005
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19970: LD_VAR 0 1
19974: PUSH
19975: LD_INT 1
19977: ARRAY
19978: PPUSH
19979: CALL_OW 250
19983: PPUSH
19984: LD_VAR 0 1
19988: PUSH
19989: LD_INT 1
19991: ARRAY
19992: PPUSH
19993: CALL_OW 251
19997: PPUSH
19998: LD_INT 70
20000: PPUSH
20001: CALL_OW 495
// end ;
20005: PPOPN 1
20007: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20008: LD_EXP 45
20012: PUSH
20013: LD_EXP 79
20017: AND
20018: IFFALSE 20229
20020: GO 20022
20022: DISABLE
20023: LD_INT 0
20025: PPUSH
20026: PPUSH
20027: PPUSH
20028: PPUSH
20029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20030: LD_ADDR_VAR 0 5
20034: PUSH
20035: LD_INT 22
20037: PUSH
20038: LD_OWVAR 2
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 21
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PPUSH
20061: CALL_OW 69
20065: ST_TO_ADDR
// if not tmp then
20066: LD_VAR 0 5
20070: NOT
20071: IFFALSE 20075
// exit ;
20073: GO 20229
// for i in tmp do
20075: LD_ADDR_VAR 0 1
20079: PUSH
20080: LD_VAR 0 5
20084: PUSH
20085: FOR_IN
20086: IFFALSE 20227
// begin d := rand ( 0 , 5 ) ;
20088: LD_ADDR_VAR 0 4
20092: PUSH
20093: LD_INT 0
20095: PPUSH
20096: LD_INT 5
20098: PPUSH
20099: CALL_OW 12
20103: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20104: LD_ADDR_VAR 0 2
20108: PUSH
20109: LD_VAR 0 1
20113: PPUSH
20114: CALL_OW 250
20118: PPUSH
20119: LD_VAR 0 4
20123: PPUSH
20124: LD_INT 3
20126: PPUSH
20127: LD_INT 12
20129: PPUSH
20130: CALL_OW 12
20134: PPUSH
20135: CALL_OW 272
20139: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 251
20154: PPUSH
20155: LD_VAR 0 4
20159: PPUSH
20160: LD_INT 3
20162: PPUSH
20163: LD_INT 12
20165: PPUSH
20166: CALL_OW 12
20170: PPUSH
20171: CALL_OW 273
20175: ST_TO_ADDR
// if ValidHex ( x , y ) then
20176: LD_VAR 0 2
20180: PPUSH
20181: LD_VAR 0 3
20185: PPUSH
20186: CALL_OW 488
20190: IFFALSE 20225
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20192: LD_VAR 0 1
20196: PPUSH
20197: LD_VAR 0 2
20201: PPUSH
20202: LD_VAR 0 3
20206: PPUSH
20207: LD_INT 3
20209: PPUSH
20210: LD_INT 6
20212: PPUSH
20213: CALL_OW 12
20217: PPUSH
20218: LD_INT 1
20220: PPUSH
20221: CALL_OW 483
// end ;
20225: GO 20085
20227: POP
20228: POP
// end ;
20229: PPOPN 5
20231: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20232: LD_EXP 45
20236: PUSH
20237: LD_EXP 80
20241: AND
20242: IFFALSE 20336
20244: GO 20246
20246: DISABLE
20247: LD_INT 0
20249: PPUSH
20250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20251: LD_ADDR_VAR 0 2
20255: PUSH
20256: LD_INT 22
20258: PUSH
20259: LD_OWVAR 2
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 32
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 21
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: PPUSH
20293: CALL_OW 69
20297: ST_TO_ADDR
// if not tmp then
20298: LD_VAR 0 2
20302: NOT
20303: IFFALSE 20307
// exit ;
20305: GO 20336
// for i in tmp do
20307: LD_ADDR_VAR 0 1
20311: PUSH
20312: LD_VAR 0 2
20316: PUSH
20317: FOR_IN
20318: IFFALSE 20334
// SetFuel ( i , 0 ) ;
20320: LD_VAR 0 1
20324: PPUSH
20325: LD_INT 0
20327: PPUSH
20328: CALL_OW 240
20332: GO 20317
20334: POP
20335: POP
// end ;
20336: PPOPN 2
20338: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20339: LD_EXP 45
20343: PUSH
20344: LD_EXP 81
20348: AND
20349: IFFALSE 20415
20351: GO 20353
20353: DISABLE
20354: LD_INT 0
20356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20357: LD_ADDR_VAR 0 1
20361: PUSH
20362: LD_INT 22
20364: PUSH
20365: LD_OWVAR 2
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 30
20376: PUSH
20377: LD_INT 29
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 69
20392: ST_TO_ADDR
// if not tmp then
20393: LD_VAR 0 1
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20415
// DestroyUnit ( tmp [ 1 ] ) ;
20402: LD_VAR 0 1
20406: PUSH
20407: LD_INT 1
20409: ARRAY
20410: PPUSH
20411: CALL_OW 65
// end ;
20415: PPOPN 1
20417: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20418: LD_EXP 45
20422: PUSH
20423: LD_EXP 83
20427: AND
20428: IFFALSE 20557
20430: GO 20432
20432: DISABLE
20433: LD_INT 0
20435: PPUSH
// begin uc_side := 0 ;
20436: LD_ADDR_OWVAR 20
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// uc_nation := nation_arabian ;
20444: LD_ADDR_OWVAR 21
20448: PUSH
20449: LD_INT 2
20451: ST_TO_ADDR
// hc_gallery :=  ;
20452: LD_ADDR_OWVAR 33
20456: PUSH
20457: LD_STRING 
20459: ST_TO_ADDR
// hc_name :=  ;
20460: LD_ADDR_OWVAR 26
20464: PUSH
20465: LD_STRING 
20467: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20468: LD_INT 1
20470: PPUSH
20471: LD_INT 11
20473: PPUSH
20474: LD_INT 10
20476: PPUSH
20477: CALL_OW 380
// un := CreateHuman ;
20481: LD_ADDR_VAR 0 1
20485: PUSH
20486: CALL_OW 44
20490: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20491: LD_VAR 0 1
20495: PPUSH
20496: LD_INT 1
20498: PPUSH
20499: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20503: LD_INT 35
20505: PPUSH
20506: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20510: LD_VAR 0 1
20514: PPUSH
20515: LD_INT 22
20517: PUSH
20518: LD_OWVAR 2
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PPUSH
20527: CALL_OW 69
20531: PPUSH
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 74
20541: PPUSH
20542: CALL_OW 115
// until IsDead ( un ) ;
20546: LD_VAR 0 1
20550: PPUSH
20551: CALL_OW 301
20555: IFFALSE 20503
// end ;
20557: PPOPN 1
20559: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20560: LD_EXP 45
20564: PUSH
20565: LD_EXP 85
20569: AND
20570: IFFALSE 20582
20572: GO 20574
20574: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20575: LD_STRING earthquake(getX(game), 0, 32)
20577: PPUSH
20578: CALL_OW 559
20582: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20583: LD_EXP 45
20587: PUSH
20588: LD_EXP 86
20592: AND
20593: IFFALSE 20684
20595: GO 20597
20597: DISABLE
20598: LD_INT 0
20600: PPUSH
// begin enable ;
20601: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20602: LD_ADDR_VAR 0 1
20606: PUSH
20607: LD_INT 22
20609: PUSH
20610: LD_OWVAR 2
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 21
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 33
20631: PUSH
20632: LD_INT 3
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 69
20648: ST_TO_ADDR
// if not tmp then
20649: LD_VAR 0 1
20653: NOT
20654: IFFALSE 20658
// exit ;
20656: GO 20684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20658: LD_VAR 0 1
20662: PUSH
20663: LD_INT 1
20665: PPUSH
20666: LD_VAR 0 1
20670: PPUSH
20671: CALL_OW 12
20675: ARRAY
20676: PPUSH
20677: LD_INT 1
20679: PPUSH
20680: CALL_OW 234
// end ;
20684: PPOPN 1
20686: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20687: LD_EXP 45
20691: PUSH
20692: LD_EXP 87
20696: AND
20697: IFFALSE 20838
20699: GO 20701
20701: DISABLE
20702: LD_INT 0
20704: PPUSH
20705: PPUSH
20706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20707: LD_ADDR_VAR 0 3
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_OWVAR 2
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 25
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 69
20742: ST_TO_ADDR
// if not tmp then
20743: LD_VAR 0 3
20747: NOT
20748: IFFALSE 20752
// exit ;
20750: GO 20838
// un := tmp [ rand ( 1 , tmp ) ] ;
20752: LD_ADDR_VAR 0 2
20756: PUSH
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 1
20764: PPUSH
20765: LD_VAR 0 3
20769: PPUSH
20770: CALL_OW 12
20774: ARRAY
20775: ST_TO_ADDR
// if Crawls ( un ) then
20776: LD_VAR 0 2
20780: PPUSH
20781: CALL_OW 318
20785: IFFALSE 20796
// ComWalk ( un ) ;
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_INT 9
20803: PPUSH
20804: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20808: LD_INT 28
20810: PPUSH
20811: LD_OWVAR 2
20815: PPUSH
20816: LD_INT 2
20818: PPUSH
20819: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20823: LD_INT 29
20825: PPUSH
20826: LD_OWVAR 2
20830: PPUSH
20831: LD_INT 2
20833: PPUSH
20834: CALL_OW 322
// end ;
20838: PPOPN 3
20840: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20841: LD_EXP 45
20845: PUSH
20846: LD_EXP 88
20850: AND
20851: IFFALSE 20962
20853: GO 20855
20855: DISABLE
20856: LD_INT 0
20858: PPUSH
20859: PPUSH
20860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20861: LD_ADDR_VAR 0 3
20865: PUSH
20866: LD_INT 22
20868: PUSH
20869: LD_OWVAR 2
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 25
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PPUSH
20892: CALL_OW 69
20896: ST_TO_ADDR
// if not tmp then
20897: LD_VAR 0 3
20901: NOT
20902: IFFALSE 20906
// exit ;
20904: GO 20962
// un := tmp [ rand ( 1 , tmp ) ] ;
20906: LD_ADDR_VAR 0 2
20910: PUSH
20911: LD_VAR 0 3
20915: PUSH
20916: LD_INT 1
20918: PPUSH
20919: LD_VAR 0 3
20923: PPUSH
20924: CALL_OW 12
20928: ARRAY
20929: ST_TO_ADDR
// if Crawls ( un ) then
20930: LD_VAR 0 2
20934: PPUSH
20935: CALL_OW 318
20939: IFFALSE 20950
// ComWalk ( un ) ;
20941: LD_VAR 0 2
20945: PPUSH
20946: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20950: LD_VAR 0 2
20954: PPUSH
20955: LD_INT 8
20957: PPUSH
20958: CALL_OW 336
// end ;
20962: PPOPN 3
20964: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20965: LD_EXP 45
20969: PUSH
20970: LD_EXP 89
20974: AND
20975: IFFALSE 21119
20977: GO 20979
20979: DISABLE
20980: LD_INT 0
20982: PPUSH
20983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20984: LD_ADDR_VAR 0 2
20988: PUSH
20989: LD_INT 22
20991: PUSH
20992: LD_OWVAR 2
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 21
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: LD_INT 34
21016: PUSH
21017: LD_INT 12
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 34
21026: PUSH
21027: LD_INT 51
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 34
21036: PUSH
21037: LD_INT 32
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: PPUSH
21055: CALL_OW 69
21059: ST_TO_ADDR
// if not tmp then
21060: LD_VAR 0 2
21064: NOT
21065: IFFALSE 21069
// exit ;
21067: GO 21119
// for i in tmp do
21069: LD_ADDR_VAR 0 1
21073: PUSH
21074: LD_VAR 0 2
21078: PUSH
21079: FOR_IN
21080: IFFALSE 21117
// if GetCargo ( i , mat_artifact ) = 0 then
21082: LD_VAR 0 1
21086: PPUSH
21087: LD_INT 4
21089: PPUSH
21090: CALL_OW 289
21094: PUSH
21095: LD_INT 0
21097: EQUAL
21098: IFFALSE 21115
// SetCargo ( i , mat_siberit , 100 ) ;
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_INT 3
21107: PPUSH
21108: LD_INT 100
21110: PPUSH
21111: CALL_OW 290
21115: GO 21079
21117: POP
21118: POP
// end ;
21119: PPOPN 2
21121: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21122: LD_EXP 45
21126: PUSH
21127: LD_EXP 90
21131: AND
21132: IFFALSE 21315
21134: GO 21136
21136: DISABLE
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21141: LD_ADDR_VAR 0 2
21145: PUSH
21146: LD_INT 22
21148: PUSH
21149: LD_OWVAR 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PPUSH
21158: CALL_OW 69
21162: ST_TO_ADDR
// if not tmp then
21163: LD_VAR 0 2
21167: NOT
21168: IFFALSE 21172
// exit ;
21170: GO 21315
// for i := 1 to 2 do
21172: LD_ADDR_VAR 0 1
21176: PUSH
21177: DOUBLE
21178: LD_INT 1
21180: DEC
21181: ST_TO_ADDR
21182: LD_INT 2
21184: PUSH
21185: FOR_TO
21186: IFFALSE 21313
// begin uc_side := your_side ;
21188: LD_ADDR_OWVAR 20
21192: PUSH
21193: LD_OWVAR 2
21197: ST_TO_ADDR
// uc_nation := nation_american ;
21198: LD_ADDR_OWVAR 21
21202: PUSH
21203: LD_INT 1
21205: ST_TO_ADDR
// vc_chassis := us_morphling ;
21206: LD_ADDR_OWVAR 37
21210: PUSH
21211: LD_INT 5
21213: ST_TO_ADDR
// vc_engine := engine_siberite ;
21214: LD_ADDR_OWVAR 39
21218: PUSH
21219: LD_INT 3
21221: ST_TO_ADDR
// vc_control := control_computer ;
21222: LD_ADDR_OWVAR 38
21226: PUSH
21227: LD_INT 3
21229: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21230: LD_ADDR_OWVAR 40
21234: PUSH
21235: LD_INT 10
21237: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21238: LD_VAR 0 2
21242: PUSH
21243: LD_INT 1
21245: ARRAY
21246: PPUSH
21247: CALL_OW 310
21251: NOT
21252: IFFALSE 21299
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21254: CALL_OW 45
21258: PPUSH
21259: LD_VAR 0 2
21263: PUSH
21264: LD_INT 1
21266: ARRAY
21267: PPUSH
21268: CALL_OW 250
21272: PPUSH
21273: LD_VAR 0 2
21277: PUSH
21278: LD_INT 1
21280: ARRAY
21281: PPUSH
21282: CALL_OW 251
21286: PPUSH
21287: LD_INT 12
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: CALL_OW 50
21297: GO 21311
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21299: CALL_OW 45
21303: PPUSH
21304: LD_INT 1
21306: PPUSH
21307: CALL_OW 51
// end ;
21311: GO 21185
21313: POP
21314: POP
// end ;
21315: PPOPN 2
21317: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21318: LD_EXP 45
21322: PUSH
21323: LD_EXP 91
21327: AND
21328: IFFALSE 21550
21330: GO 21332
21332: DISABLE
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
21339: PPUSH
21340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21341: LD_ADDR_VAR 0 6
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_OWVAR 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 21
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 23
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: PPUSH
21390: CALL_OW 69
21394: ST_TO_ADDR
// if not tmp then
21395: LD_VAR 0 6
21399: NOT
21400: IFFALSE 21404
// exit ;
21402: GO 21550
// s1 := rand ( 1 , 4 ) ;
21404: LD_ADDR_VAR 0 2
21408: PUSH
21409: LD_INT 1
21411: PPUSH
21412: LD_INT 4
21414: PPUSH
21415: CALL_OW 12
21419: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21420: LD_ADDR_VAR 0 4
21424: PUSH
21425: LD_VAR 0 6
21429: PUSH
21430: LD_INT 1
21432: ARRAY
21433: PPUSH
21434: LD_VAR 0 2
21438: PPUSH
21439: CALL_OW 259
21443: ST_TO_ADDR
// if s1 = 1 then
21444: LD_VAR 0 2
21448: PUSH
21449: LD_INT 1
21451: EQUAL
21452: IFFALSE 21472
// s2 := rand ( 2 , 4 ) else
21454: LD_ADDR_VAR 0 3
21458: PUSH
21459: LD_INT 2
21461: PPUSH
21462: LD_INT 4
21464: PPUSH
21465: CALL_OW 12
21469: ST_TO_ADDR
21470: GO 21480
// s2 := 1 ;
21472: LD_ADDR_VAR 0 3
21476: PUSH
21477: LD_INT 1
21479: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21480: LD_ADDR_VAR 0 5
21484: PUSH
21485: LD_VAR 0 6
21489: PUSH
21490: LD_INT 1
21492: ARRAY
21493: PPUSH
21494: LD_VAR 0 3
21498: PPUSH
21499: CALL_OW 259
21503: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21504: LD_VAR 0 6
21508: PUSH
21509: LD_INT 1
21511: ARRAY
21512: PPUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: LD_VAR 0 5
21522: PPUSH
21523: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21527: LD_VAR 0 6
21531: PUSH
21532: LD_INT 1
21534: ARRAY
21535: PPUSH
21536: LD_VAR 0 3
21540: PPUSH
21541: LD_VAR 0 4
21545: PPUSH
21546: CALL_OW 237
// end ;
21550: PPOPN 6
21552: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21553: LD_EXP 45
21557: PUSH
21558: LD_EXP 92
21562: AND
21563: IFFALSE 21642
21565: GO 21567
21567: DISABLE
21568: LD_INT 0
21570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21571: LD_ADDR_VAR 0 1
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_OWVAR 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 30
21590: PUSH
21591: LD_INT 3
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PPUSH
21602: CALL_OW 69
21606: ST_TO_ADDR
// if not tmp then
21607: LD_VAR 0 1
21611: NOT
21612: IFFALSE 21616
// exit ;
21614: GO 21642
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21616: LD_VAR 0 1
21620: PUSH
21621: LD_INT 1
21623: PPUSH
21624: LD_VAR 0 1
21628: PPUSH
21629: CALL_OW 12
21633: ARRAY
21634: PPUSH
21635: LD_INT 1
21637: PPUSH
21638: CALL_OW 234
// end ;
21642: PPOPN 1
21644: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21645: LD_EXP 45
21649: PUSH
21650: LD_EXP 93
21654: AND
21655: IFFALSE 21767
21657: GO 21659
21659: DISABLE
21660: LD_INT 0
21662: PPUSH
21663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21664: LD_ADDR_VAR 0 2
21668: PUSH
21669: LD_INT 22
21671: PUSH
21672: LD_OWVAR 2
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 30
21686: PUSH
21687: LD_INT 27
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 30
21696: PUSH
21697: LD_INT 26
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 28
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: ST_TO_ADDR
// if not tmp then
21729: LD_VAR 0 2
21733: NOT
21734: IFFALSE 21738
// exit ;
21736: GO 21767
// for i in tmp do
21738: LD_ADDR_VAR 0 1
21742: PUSH
21743: LD_VAR 0 2
21747: PUSH
21748: FOR_IN
21749: IFFALSE 21765
// SetLives ( i , 1 ) ;
21751: LD_VAR 0 1
21755: PPUSH
21756: LD_INT 1
21758: PPUSH
21759: CALL_OW 234
21763: GO 21748
21765: POP
21766: POP
// end ;
21767: PPOPN 2
21769: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21770: LD_EXP 45
21774: PUSH
21775: LD_EXP 94
21779: AND
21780: IFFALSE 22067
21782: GO 21784
21784: DISABLE
21785: LD_INT 0
21787: PPUSH
21788: PPUSH
21789: PPUSH
// begin i := rand ( 1 , 7 ) ;
21790: LD_ADDR_VAR 0 1
21794: PUSH
21795: LD_INT 1
21797: PPUSH
21798: LD_INT 7
21800: PPUSH
21801: CALL_OW 12
21805: ST_TO_ADDR
// case i of 1 :
21806: LD_VAR 0 1
21810: PUSH
21811: LD_INT 1
21813: DOUBLE
21814: EQUAL
21815: IFTRUE 21819
21817: GO 21829
21819: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21820: LD_STRING earthquake(getX(game), 0, 32)
21822: PPUSH
21823: CALL_OW 559
21827: GO 22067
21829: LD_INT 2
21831: DOUBLE
21832: EQUAL
21833: IFTRUE 21837
21835: GO 21851
21837: POP
// begin ToLua ( displayStucuk(); ) ;
21838: LD_STRING displayStucuk();
21840: PPUSH
21841: CALL_OW 559
// ResetFog ;
21845: CALL_OW 335
// end ; 3 :
21849: GO 22067
21851: LD_INT 3
21853: DOUBLE
21854: EQUAL
21855: IFTRUE 21859
21857: GO 21963
21859: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21860: LD_ADDR_VAR 0 2
21864: PUSH
21865: LD_INT 22
21867: PUSH
21868: LD_OWVAR 2
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 25
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PPUSH
21891: CALL_OW 69
21895: ST_TO_ADDR
// if not tmp then
21896: LD_VAR 0 2
21900: NOT
21901: IFFALSE 21905
// exit ;
21903: GO 22067
// un := tmp [ rand ( 1 , tmp ) ] ;
21905: LD_ADDR_VAR 0 3
21909: PUSH
21910: LD_VAR 0 2
21914: PUSH
21915: LD_INT 1
21917: PPUSH
21918: LD_VAR 0 2
21922: PPUSH
21923: CALL_OW 12
21927: ARRAY
21928: ST_TO_ADDR
// if Crawls ( un ) then
21929: LD_VAR 0 3
21933: PPUSH
21934: CALL_OW 318
21938: IFFALSE 21949
// ComWalk ( un ) ;
21940: LD_VAR 0 3
21944: PPUSH
21945: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21949: LD_VAR 0 3
21953: PPUSH
21954: LD_INT 8
21956: PPUSH
21957: CALL_OW 336
// end ; 4 :
21961: GO 22067
21963: LD_INT 4
21965: DOUBLE
21966: EQUAL
21967: IFTRUE 21971
21969: GO 22045
21971: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21972: LD_ADDR_VAR 0 2
21976: PUSH
21977: LD_INT 22
21979: PUSH
21980: LD_OWVAR 2
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 30
21991: PUSH
21992: LD_INT 29
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PPUSH
22003: CALL_OW 69
22007: ST_TO_ADDR
// if not tmp then
22008: LD_VAR 0 2
22012: NOT
22013: IFFALSE 22017
// exit ;
22015: GO 22067
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22017: LD_VAR 0 2
22021: PUSH
22022: LD_INT 1
22024: ARRAY
22025: PPUSH
22026: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22030: LD_VAR 0 2
22034: PUSH
22035: LD_INT 1
22037: ARRAY
22038: PPUSH
22039: CALL_OW 65
// end ; 5 .. 7 :
22043: GO 22067
22045: LD_INT 5
22047: DOUBLE
22048: GREATEREQUAL
22049: IFFALSE 22057
22051: LD_INT 7
22053: DOUBLE
22054: LESSEQUAL
22055: IFTRUE 22059
22057: GO 22066
22059: POP
// StreamSibBomb ; end ;
22060: CALL 18304 0 0
22064: GO 22067
22066: POP
// end ;
22067: PPOPN 3
22069: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22070: LD_EXP 45
22074: PUSH
22075: LD_EXP 95
22079: AND
22080: IFFALSE 22236
22082: GO 22084
22084: DISABLE
22085: LD_INT 0
22087: PPUSH
22088: PPUSH
22089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22090: LD_ADDR_VAR 0 2
22094: PUSH
22095: LD_INT 81
22097: PUSH
22098: LD_OWVAR 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: LD_INT 21
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 21
22122: PUSH
22123: LD_INT 2
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PPUSH
22139: CALL_OW 69
22143: ST_TO_ADDR
// if not tmp then
22144: LD_VAR 0 2
22148: NOT
22149: IFFALSE 22153
// exit ;
22151: GO 22236
// p := 0 ;
22153: LD_ADDR_VAR 0 3
22157: PUSH
22158: LD_INT 0
22160: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22161: LD_INT 35
22163: PPUSH
22164: CALL_OW 67
// p := p + 1 ;
22168: LD_ADDR_VAR 0 3
22172: PUSH
22173: LD_VAR 0 3
22177: PUSH
22178: LD_INT 1
22180: PLUS
22181: ST_TO_ADDR
// for i in tmp do
22182: LD_ADDR_VAR 0 1
22186: PUSH
22187: LD_VAR 0 2
22191: PUSH
22192: FOR_IN
22193: IFFALSE 22224
// if GetLives ( i ) < 1000 then
22195: LD_VAR 0 1
22199: PPUSH
22200: CALL_OW 256
22204: PUSH
22205: LD_INT 1000
22207: LESS
22208: IFFALSE 22222
// SetLives ( i , 1000 ) ;
22210: LD_VAR 0 1
22214: PPUSH
22215: LD_INT 1000
22217: PPUSH
22218: CALL_OW 234
22222: GO 22192
22224: POP
22225: POP
// until p > 20 ;
22226: LD_VAR 0 3
22230: PUSH
22231: LD_INT 20
22233: GREATER
22234: IFFALSE 22161
// end ;
22236: PPOPN 3
22238: END
// every 0 0$1 trigger StreamModeActive and sTime do
22239: LD_EXP 45
22243: PUSH
22244: LD_EXP 96
22248: AND
22249: IFFALSE 22284
22251: GO 22253
22253: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22254: LD_INT 28
22256: PPUSH
22257: LD_OWVAR 2
22261: PPUSH
22262: LD_INT 2
22264: PPUSH
22265: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22269: LD_INT 30
22271: PPUSH
22272: LD_OWVAR 2
22276: PPUSH
22277: LD_INT 2
22279: PPUSH
22280: CALL_OW 322
// end ;
22284: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22285: LD_EXP 45
22289: PUSH
22290: LD_EXP 97
22294: AND
22295: IFFALSE 22416
22297: GO 22299
22299: DISABLE
22300: LD_INT 0
22302: PPUSH
22303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22304: LD_ADDR_VAR 0 2
22308: PUSH
22309: LD_INT 22
22311: PUSH
22312: LD_OWVAR 2
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 21
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 3
22333: PUSH
22334: LD_INT 23
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: PPUSH
22353: CALL_OW 69
22357: ST_TO_ADDR
// if not tmp then
22358: LD_VAR 0 2
22362: NOT
22363: IFFALSE 22367
// exit ;
22365: GO 22416
// for i in tmp do
22367: LD_ADDR_VAR 0 1
22371: PUSH
22372: LD_VAR 0 2
22376: PUSH
22377: FOR_IN
22378: IFFALSE 22414
// begin if Crawls ( i ) then
22380: LD_VAR 0 1
22384: PPUSH
22385: CALL_OW 318
22389: IFFALSE 22400
// ComWalk ( i ) ;
22391: LD_VAR 0 1
22395: PPUSH
22396: CALL_OW 138
// SetClass ( i , 2 ) ;
22400: LD_VAR 0 1
22404: PPUSH
22405: LD_INT 2
22407: PPUSH
22408: CALL_OW 336
// end ;
22412: GO 22377
22414: POP
22415: POP
// end ;
22416: PPOPN 2
22418: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22419: LD_EXP 45
22423: PUSH
22424: LD_EXP 98
22428: AND
22429: IFFALSE 22717
22431: GO 22433
22433: DISABLE
22434: LD_INT 0
22436: PPUSH
22437: PPUSH
22438: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22439: LD_OWVAR 2
22443: PPUSH
22444: LD_INT 9
22446: PPUSH
22447: LD_INT 1
22449: PPUSH
22450: LD_INT 1
22452: PPUSH
22453: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22457: LD_INT 9
22459: PPUSH
22460: LD_OWVAR 2
22464: PPUSH
22465: CALL_OW 343
// uc_side := 9 ;
22469: LD_ADDR_OWVAR 20
22473: PUSH
22474: LD_INT 9
22476: ST_TO_ADDR
// uc_nation := 2 ;
22477: LD_ADDR_OWVAR 21
22481: PUSH
22482: LD_INT 2
22484: ST_TO_ADDR
// hc_name := Dark Warrior ;
22485: LD_ADDR_OWVAR 26
22489: PUSH
22490: LD_STRING Dark Warrior
22492: ST_TO_ADDR
// hc_gallery :=  ;
22493: LD_ADDR_OWVAR 33
22497: PUSH
22498: LD_STRING 
22500: ST_TO_ADDR
// hc_noskilllimit := true ;
22501: LD_ADDR_OWVAR 76
22505: PUSH
22506: LD_INT 1
22508: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22509: LD_ADDR_OWVAR 31
22513: PUSH
22514: LD_INT 30
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 30
22522: PUSH
22523: LD_INT 30
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: ST_TO_ADDR
// un := CreateHuman ;
22532: LD_ADDR_VAR 0 3
22536: PUSH
22537: CALL_OW 44
22541: ST_TO_ADDR
// hc_noskilllimit := false ;
22542: LD_ADDR_OWVAR 76
22546: PUSH
22547: LD_INT 0
22549: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22550: LD_VAR 0 3
22554: PPUSH
22555: LD_INT 1
22557: PPUSH
22558: CALL_OW 51
// ToLua ( playRanger() ) ;
22562: LD_STRING playRanger()
22564: PPUSH
22565: CALL_OW 559
// p := 0 ;
22569: LD_ADDR_VAR 0 2
22573: PUSH
22574: LD_INT 0
22576: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22577: LD_INT 35
22579: PPUSH
22580: CALL_OW 67
// p := p + 1 ;
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_VAR 0 2
22593: PUSH
22594: LD_INT 1
22596: PLUS
22597: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22598: LD_VAR 0 3
22602: PPUSH
22603: CALL_OW 256
22607: PUSH
22608: LD_INT 1000
22610: LESS
22611: IFFALSE 22625
// SetLives ( un , 1000 ) ;
22613: LD_VAR 0 3
22617: PPUSH
22618: LD_INT 1000
22620: PPUSH
22621: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22625: LD_VAR 0 3
22629: PPUSH
22630: LD_INT 81
22632: PUSH
22633: LD_OWVAR 2
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 91
22644: PUSH
22645: LD_VAR 0 3
22649: PUSH
22650: LD_INT 30
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PPUSH
22662: CALL_OW 69
22666: PPUSH
22667: LD_VAR 0 3
22671: PPUSH
22672: CALL_OW 74
22676: PPUSH
22677: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22681: LD_VAR 0 2
22685: PUSH
22686: LD_INT 80
22688: GREATER
22689: PUSH
22690: LD_VAR 0 3
22694: PPUSH
22695: CALL_OW 301
22699: OR
22700: IFFALSE 22577
// if un then
22702: LD_VAR 0 3
22706: IFFALSE 22717
// RemoveUnit ( un ) ;
22708: LD_VAR 0 3
22712: PPUSH
22713: CALL_OW 64
// end ;
22717: PPOPN 3
22719: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22720: LD_EXP 99
22724: IFFALSE 22840
22726: GO 22728
22728: DISABLE
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
22733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22734: LD_ADDR_VAR 0 2
22738: PUSH
22739: LD_INT 81
22741: PUSH
22742: LD_OWVAR 2
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 21
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PPUSH
22765: CALL_OW 69
22769: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22770: LD_STRING playComputer()
22772: PPUSH
22773: CALL_OW 559
// if not tmp then
22777: LD_VAR 0 2
22781: NOT
22782: IFFALSE 22786
// exit ;
22784: GO 22840
// for i in tmp do
22786: LD_ADDR_VAR 0 1
22790: PUSH
22791: LD_VAR 0 2
22795: PUSH
22796: FOR_IN
22797: IFFALSE 22838
// for j := 1 to 4 do
22799: LD_ADDR_VAR 0 3
22803: PUSH
22804: DOUBLE
22805: LD_INT 1
22807: DEC
22808: ST_TO_ADDR
22809: LD_INT 4
22811: PUSH
22812: FOR_TO
22813: IFFALSE 22834
// SetSkill ( i , j , 10 ) ;
22815: LD_VAR 0 1
22819: PPUSH
22820: LD_VAR 0 3
22824: PPUSH
22825: LD_INT 10
22827: PPUSH
22828: CALL_OW 237
22832: GO 22812
22834: POP
22835: POP
22836: GO 22796
22838: POP
22839: POP
// end ;
22840: PPOPN 3
22842: END
// every 0 0$1 trigger s30 do var i , tmp ;
22843: LD_EXP 100
22847: IFFALSE 22916
22849: GO 22851
22851: DISABLE
22852: LD_INT 0
22854: PPUSH
22855: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22856: LD_ADDR_VAR 0 2
22860: PUSH
22861: LD_INT 22
22863: PUSH
22864: LD_OWVAR 2
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PPUSH
22873: CALL_OW 69
22877: ST_TO_ADDR
// if not tmp then
22878: LD_VAR 0 2
22882: NOT
22883: IFFALSE 22887
// exit ;
22885: GO 22916
// for i in tmp do
22887: LD_ADDR_VAR 0 1
22891: PUSH
22892: LD_VAR 0 2
22896: PUSH
22897: FOR_IN
22898: IFFALSE 22914
// SetLives ( i , 300 ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: LD_INT 300
22907: PPUSH
22908: CALL_OW 234
22912: GO 22897
22914: POP
22915: POP
// end ;
22916: PPOPN 2
22918: END
// every 0 0$1 trigger s60 do var i , tmp ;
22919: LD_EXP 101
22923: IFFALSE 22992
22925: GO 22927
22927: DISABLE
22928: LD_INT 0
22930: PPUSH
22931: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22932: LD_ADDR_VAR 0 2
22936: PUSH
22937: LD_INT 22
22939: PUSH
22940: LD_OWVAR 2
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PPUSH
22949: CALL_OW 69
22953: ST_TO_ADDR
// if not tmp then
22954: LD_VAR 0 2
22958: NOT
22959: IFFALSE 22963
// exit ;
22961: GO 22992
// for i in tmp do
22963: LD_ADDR_VAR 0 1
22967: PUSH
22968: LD_VAR 0 2
22972: PUSH
22973: FOR_IN
22974: IFFALSE 22990
// SetLives ( i , 600 ) ;
22976: LD_VAR 0 1
22980: PPUSH
22981: LD_INT 600
22983: PPUSH
22984: CALL_OW 234
22988: GO 22973
22990: POP
22991: POP
// end ;
22992: PPOPN 2
22994: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22995: LD_INT 0
22997: PPUSH
// case cmd of 301 :
22998: LD_VAR 0 1
23002: PUSH
23003: LD_INT 301
23005: DOUBLE
23006: EQUAL
23007: IFTRUE 23011
23009: GO 23043
23011: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23012: LD_VAR 0 6
23016: PPUSH
23017: LD_VAR 0 7
23021: PPUSH
23022: LD_VAR 0 8
23026: PPUSH
23027: LD_VAR 0 4
23031: PPUSH
23032: LD_VAR 0 5
23036: PPUSH
23037: CALL 24252 0 5
23041: GO 23164
23043: LD_INT 302
23045: DOUBLE
23046: EQUAL
23047: IFTRUE 23051
23049: GO 23088
23051: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23052: LD_VAR 0 6
23056: PPUSH
23057: LD_VAR 0 7
23061: PPUSH
23062: LD_VAR 0 8
23066: PPUSH
23067: LD_VAR 0 9
23071: PPUSH
23072: LD_VAR 0 4
23076: PPUSH
23077: LD_VAR 0 5
23081: PPUSH
23082: CALL 24343 0 6
23086: GO 23164
23088: LD_INT 303
23090: DOUBLE
23091: EQUAL
23092: IFTRUE 23096
23094: GO 23133
23096: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23097: LD_VAR 0 6
23101: PPUSH
23102: LD_VAR 0 7
23106: PPUSH
23107: LD_VAR 0 8
23111: PPUSH
23112: LD_VAR 0 9
23116: PPUSH
23117: LD_VAR 0 4
23121: PPUSH
23122: LD_VAR 0 5
23126: PPUSH
23127: CALL 23169 0 6
23131: GO 23164
23133: LD_INT 304
23135: DOUBLE
23136: EQUAL
23137: IFTRUE 23141
23139: GO 23163
23141: POP
// hHackTeleport ( unit , x , y ) ; end ;
23142: LD_VAR 0 2
23146: PPUSH
23147: LD_VAR 0 4
23151: PPUSH
23152: LD_VAR 0 5
23156: PPUSH
23157: CALL 24936 0 3
23161: GO 23164
23163: POP
// end ;
23164: LD_VAR 0 12
23168: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23169: LD_INT 0
23171: PPUSH
23172: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23173: LD_VAR 0 1
23177: PUSH
23178: LD_INT 1
23180: LESS
23181: PUSH
23182: LD_VAR 0 1
23186: PUSH
23187: LD_INT 3
23189: GREATER
23190: OR
23191: PUSH
23192: LD_VAR 0 5
23196: PPUSH
23197: LD_VAR 0 6
23201: PPUSH
23202: CALL_OW 428
23206: OR
23207: IFFALSE 23211
// exit ;
23209: GO 23939
// uc_side := your_side ;
23211: LD_ADDR_OWVAR 20
23215: PUSH
23216: LD_OWVAR 2
23220: ST_TO_ADDR
// uc_nation := nation ;
23221: LD_ADDR_OWVAR 21
23225: PUSH
23226: LD_VAR 0 1
23230: ST_TO_ADDR
// bc_level = 1 ;
23231: LD_ADDR_OWVAR 43
23235: PUSH
23236: LD_INT 1
23238: ST_TO_ADDR
// case btype of 1 :
23239: LD_VAR 0 2
23243: PUSH
23244: LD_INT 1
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23263
23252: POP
// bc_type := b_depot ; 2 :
23253: LD_ADDR_OWVAR 42
23257: PUSH
23258: LD_INT 0
23260: ST_TO_ADDR
23261: GO 23883
23263: LD_INT 2
23265: DOUBLE
23266: EQUAL
23267: IFTRUE 23271
23269: GO 23282
23271: POP
// bc_type := b_warehouse ; 3 :
23272: LD_ADDR_OWVAR 42
23276: PUSH
23277: LD_INT 1
23279: ST_TO_ADDR
23280: GO 23883
23282: LD_INT 3
23284: DOUBLE
23285: EQUAL
23286: IFTRUE 23290
23288: GO 23301
23290: POP
// bc_type := b_lab ; 4 .. 9 :
23291: LD_ADDR_OWVAR 42
23295: PUSH
23296: LD_INT 6
23298: ST_TO_ADDR
23299: GO 23883
23301: LD_INT 4
23303: DOUBLE
23304: GREATEREQUAL
23305: IFFALSE 23313
23307: LD_INT 9
23309: DOUBLE
23310: LESSEQUAL
23311: IFTRUE 23315
23313: GO 23375
23315: POP
// begin bc_type := b_lab_half ;
23316: LD_ADDR_OWVAR 42
23320: PUSH
23321: LD_INT 7
23323: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23324: LD_ADDR_OWVAR 44
23328: PUSH
23329: LD_INT 10
23331: PUSH
23332: LD_INT 11
23334: PUSH
23335: LD_INT 12
23337: PUSH
23338: LD_INT 15
23340: PUSH
23341: LD_INT 14
23343: PUSH
23344: LD_INT 13
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: PUSH
23355: LD_VAR 0 2
23359: PUSH
23360: LD_INT 3
23362: MINUS
23363: ARRAY
23364: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23365: LD_ADDR_OWVAR 45
23369: PUSH
23370: LD_INT 9
23372: ST_TO_ADDR
// end ; 10 .. 13 :
23373: GO 23883
23375: LD_INT 10
23377: DOUBLE
23378: GREATEREQUAL
23379: IFFALSE 23387
23381: LD_INT 13
23383: DOUBLE
23384: LESSEQUAL
23385: IFTRUE 23389
23387: GO 23466
23389: POP
// begin bc_type := b_lab_full ;
23390: LD_ADDR_OWVAR 42
23394: PUSH
23395: LD_INT 8
23397: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23398: LD_ADDR_OWVAR 44
23402: PUSH
23403: LD_INT 10
23405: PUSH
23406: LD_INT 12
23408: PUSH
23409: LD_INT 14
23411: PUSH
23412: LD_INT 13
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: PUSH
23421: LD_VAR 0 2
23425: PUSH
23426: LD_INT 9
23428: MINUS
23429: ARRAY
23430: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23431: LD_ADDR_OWVAR 45
23435: PUSH
23436: LD_INT 11
23438: PUSH
23439: LD_INT 15
23441: PUSH
23442: LD_INT 12
23444: PUSH
23445: LD_INT 15
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: PUSH
23454: LD_VAR 0 2
23458: PUSH
23459: LD_INT 9
23461: MINUS
23462: ARRAY
23463: ST_TO_ADDR
// end ; 14 :
23464: GO 23883
23466: LD_INT 14
23468: DOUBLE
23469: EQUAL
23470: IFTRUE 23474
23472: GO 23485
23474: POP
// bc_type := b_workshop ; 15 :
23475: LD_ADDR_OWVAR 42
23479: PUSH
23480: LD_INT 2
23482: ST_TO_ADDR
23483: GO 23883
23485: LD_INT 15
23487: DOUBLE
23488: EQUAL
23489: IFTRUE 23493
23491: GO 23504
23493: POP
// bc_type := b_factory ; 16 :
23494: LD_ADDR_OWVAR 42
23498: PUSH
23499: LD_INT 3
23501: ST_TO_ADDR
23502: GO 23883
23504: LD_INT 16
23506: DOUBLE
23507: EQUAL
23508: IFTRUE 23512
23510: GO 23523
23512: POP
// bc_type := b_ext_gun ; 17 :
23513: LD_ADDR_OWVAR 42
23517: PUSH
23518: LD_INT 17
23520: ST_TO_ADDR
23521: GO 23883
23523: LD_INT 17
23525: DOUBLE
23526: EQUAL
23527: IFTRUE 23531
23529: GO 23559
23531: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23532: LD_ADDR_OWVAR 42
23536: PUSH
23537: LD_INT 19
23539: PUSH
23540: LD_INT 23
23542: PUSH
23543: LD_INT 19
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: PUSH
23551: LD_VAR 0 1
23555: ARRAY
23556: ST_TO_ADDR
23557: GO 23883
23559: LD_INT 18
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_ext_radar ; 19 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 20
23575: ST_TO_ADDR
23576: GO 23883
23578: LD_INT 19
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23597
23586: POP
// bc_type := b_ext_radio ; 20 :
23587: LD_ADDR_OWVAR 42
23591: PUSH
23592: LD_INT 22
23594: ST_TO_ADDR
23595: GO 23883
23597: LD_INT 20
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23616
23605: POP
// bc_type := b_ext_siberium ; 21 :
23606: LD_ADDR_OWVAR 42
23610: PUSH
23611: LD_INT 21
23613: ST_TO_ADDR
23614: GO 23883
23616: LD_INT 21
23618: DOUBLE
23619: EQUAL
23620: IFTRUE 23624
23622: GO 23635
23624: POP
// bc_type := b_ext_computer ; 22 :
23625: LD_ADDR_OWVAR 42
23629: PUSH
23630: LD_INT 24
23632: ST_TO_ADDR
23633: GO 23883
23635: LD_INT 22
23637: DOUBLE
23638: EQUAL
23639: IFTRUE 23643
23641: GO 23654
23643: POP
// bc_type := b_ext_track ; 23 :
23644: LD_ADDR_OWVAR 42
23648: PUSH
23649: LD_INT 16
23651: ST_TO_ADDR
23652: GO 23883
23654: LD_INT 23
23656: DOUBLE
23657: EQUAL
23658: IFTRUE 23662
23660: GO 23673
23662: POP
// bc_type := b_ext_laser ; 24 :
23663: LD_ADDR_OWVAR 42
23667: PUSH
23668: LD_INT 25
23670: ST_TO_ADDR
23671: GO 23883
23673: LD_INT 24
23675: DOUBLE
23676: EQUAL
23677: IFTRUE 23681
23679: GO 23692
23681: POP
// bc_type := b_control_tower ; 25 :
23682: LD_ADDR_OWVAR 42
23686: PUSH
23687: LD_INT 36
23689: ST_TO_ADDR
23690: GO 23883
23692: LD_INT 25
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23711
23700: POP
// bc_type := b_breastwork ; 26 :
23701: LD_ADDR_OWVAR 42
23705: PUSH
23706: LD_INT 31
23708: ST_TO_ADDR
23709: GO 23883
23711: LD_INT 26
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23730
23719: POP
// bc_type := b_bunker ; 27 :
23720: LD_ADDR_OWVAR 42
23724: PUSH
23725: LD_INT 32
23727: ST_TO_ADDR
23728: GO 23883
23730: LD_INT 27
23732: DOUBLE
23733: EQUAL
23734: IFTRUE 23738
23736: GO 23749
23738: POP
// bc_type := b_turret ; 28 :
23739: LD_ADDR_OWVAR 42
23743: PUSH
23744: LD_INT 33
23746: ST_TO_ADDR
23747: GO 23883
23749: LD_INT 28
23751: DOUBLE
23752: EQUAL
23753: IFTRUE 23757
23755: GO 23768
23757: POP
// bc_type := b_armoury ; 29 :
23758: LD_ADDR_OWVAR 42
23762: PUSH
23763: LD_INT 4
23765: ST_TO_ADDR
23766: GO 23883
23768: LD_INT 29
23770: DOUBLE
23771: EQUAL
23772: IFTRUE 23776
23774: GO 23787
23776: POP
// bc_type := b_barracks ; 30 :
23777: LD_ADDR_OWVAR 42
23781: PUSH
23782: LD_INT 5
23784: ST_TO_ADDR
23785: GO 23883
23787: LD_INT 30
23789: DOUBLE
23790: EQUAL
23791: IFTRUE 23795
23793: GO 23806
23795: POP
// bc_type := b_solar_power ; 31 :
23796: LD_ADDR_OWVAR 42
23800: PUSH
23801: LD_INT 27
23803: ST_TO_ADDR
23804: GO 23883
23806: LD_INT 31
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23825
23814: POP
// bc_type := b_oil_power ; 32 :
23815: LD_ADDR_OWVAR 42
23819: PUSH
23820: LD_INT 26
23822: ST_TO_ADDR
23823: GO 23883
23825: LD_INT 32
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23844
23833: POP
// bc_type := b_siberite_power ; 33 :
23834: LD_ADDR_OWVAR 42
23838: PUSH
23839: LD_INT 28
23841: ST_TO_ADDR
23842: GO 23883
23844: LD_INT 33
23846: DOUBLE
23847: EQUAL
23848: IFTRUE 23852
23850: GO 23863
23852: POP
// bc_type := b_oil_mine ; 34 :
23853: LD_ADDR_OWVAR 42
23857: PUSH
23858: LD_INT 29
23860: ST_TO_ADDR
23861: GO 23883
23863: LD_INT 34
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23871
23869: GO 23882
23871: POP
// bc_type := b_siberite_mine ; end ;
23872: LD_ADDR_OWVAR 42
23876: PUSH
23877: LD_INT 30
23879: ST_TO_ADDR
23880: GO 23883
23882: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23883: LD_ADDR_VAR 0 8
23887: PUSH
23888: LD_VAR 0 5
23892: PPUSH
23893: LD_VAR 0 6
23897: PPUSH
23898: LD_VAR 0 3
23902: PPUSH
23903: CALL_OW 47
23907: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23908: LD_OWVAR 42
23912: PUSH
23913: LD_INT 32
23915: PUSH
23916: LD_INT 33
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: IN
23923: IFFALSE 23939
// PlaceWeaponTurret ( b , weapon ) ;
23925: LD_VAR 0 8
23929: PPUSH
23930: LD_VAR 0 4
23934: PPUSH
23935: CALL_OW 431
// end ;
23939: LD_VAR 0 7
23943: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23944: LD_INT 0
23946: PPUSH
23947: PPUSH
23948: PPUSH
23949: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23950: LD_ADDR_VAR 0 4
23954: PUSH
23955: LD_INT 22
23957: PUSH
23958: LD_OWVAR 2
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 30
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 30
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PPUSH
23999: CALL_OW 69
24003: ST_TO_ADDR
// if not tmp then
24004: LD_VAR 0 4
24008: NOT
24009: IFFALSE 24013
// exit ;
24011: GO 24072
// for i in tmp do
24013: LD_ADDR_VAR 0 2
24017: PUSH
24018: LD_VAR 0 4
24022: PUSH
24023: FOR_IN
24024: IFFALSE 24070
// for j = 1 to 3 do
24026: LD_ADDR_VAR 0 3
24030: PUSH
24031: DOUBLE
24032: LD_INT 1
24034: DEC
24035: ST_TO_ADDR
24036: LD_INT 3
24038: PUSH
24039: FOR_TO
24040: IFFALSE 24066
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24042: LD_VAR 0 2
24046: PPUSH
24047: CALL_OW 274
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_INT 99999
24059: PPUSH
24060: CALL_OW 277
24064: GO 24039
24066: POP
24067: POP
24068: GO 24023
24070: POP
24071: POP
// end ;
24072: LD_VAR 0 1
24076: RET
// export function hHackSetLevel10 ; var i , j ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
24081: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24082: LD_ADDR_VAR 0 2
24086: PUSH
24087: LD_INT 21
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PPUSH
24097: CALL_OW 69
24101: PUSH
24102: FOR_IN
24103: IFFALSE 24155
// if IsSelected ( i ) then
24105: LD_VAR 0 2
24109: PPUSH
24110: CALL_OW 306
24114: IFFALSE 24153
// begin for j := 1 to 4 do
24116: LD_ADDR_VAR 0 3
24120: PUSH
24121: DOUBLE
24122: LD_INT 1
24124: DEC
24125: ST_TO_ADDR
24126: LD_INT 4
24128: PUSH
24129: FOR_TO
24130: IFFALSE 24151
// SetSkill ( i , j , 10 ) ;
24132: LD_VAR 0 2
24136: PPUSH
24137: LD_VAR 0 3
24141: PPUSH
24142: LD_INT 10
24144: PPUSH
24145: CALL_OW 237
24149: GO 24129
24151: POP
24152: POP
// end ;
24153: GO 24102
24155: POP
24156: POP
// end ;
24157: LD_VAR 0 1
24161: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24162: LD_INT 0
24164: PPUSH
24165: PPUSH
24166: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24167: LD_ADDR_VAR 0 2
24171: PUSH
24172: LD_INT 22
24174: PUSH
24175: LD_OWVAR 2
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 21
24186: PUSH
24187: LD_INT 1
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PPUSH
24198: CALL_OW 69
24202: PUSH
24203: FOR_IN
24204: IFFALSE 24245
// begin for j := 1 to 4 do
24206: LD_ADDR_VAR 0 3
24210: PUSH
24211: DOUBLE
24212: LD_INT 1
24214: DEC
24215: ST_TO_ADDR
24216: LD_INT 4
24218: PUSH
24219: FOR_TO
24220: IFFALSE 24241
// SetSkill ( i , j , 10 ) ;
24222: LD_VAR 0 2
24226: PPUSH
24227: LD_VAR 0 3
24231: PPUSH
24232: LD_INT 10
24234: PPUSH
24235: CALL_OW 237
24239: GO 24219
24241: POP
24242: POP
// end ;
24243: GO 24203
24245: POP
24246: POP
// end ;
24247: LD_VAR 0 1
24251: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24252: LD_INT 0
24254: PPUSH
// uc_side := your_side ;
24255: LD_ADDR_OWVAR 20
24259: PUSH
24260: LD_OWVAR 2
24264: ST_TO_ADDR
// uc_nation := nation ;
24265: LD_ADDR_OWVAR 21
24269: PUSH
24270: LD_VAR 0 1
24274: ST_TO_ADDR
// InitHc ;
24275: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24279: LD_INT 0
24281: PPUSH
24282: LD_VAR 0 2
24286: PPUSH
24287: LD_VAR 0 3
24291: PPUSH
24292: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24296: LD_VAR 0 4
24300: PPUSH
24301: LD_VAR 0 5
24305: PPUSH
24306: CALL_OW 428
24310: PUSH
24311: LD_INT 0
24313: EQUAL
24314: IFFALSE 24338
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24316: CALL_OW 44
24320: PPUSH
24321: LD_VAR 0 4
24325: PPUSH
24326: LD_VAR 0 5
24330: PPUSH
24331: LD_INT 1
24333: PPUSH
24334: CALL_OW 48
// end ;
24338: LD_VAR 0 6
24342: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24343: LD_INT 0
24345: PPUSH
24346: PPUSH
// uc_side := your_side ;
24347: LD_ADDR_OWVAR 20
24351: PUSH
24352: LD_OWVAR 2
24356: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24357: LD_VAR 0 1
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 3
24370: PUSH
24371: LD_INT 4
24373: PUSH
24374: LD_INT 5
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: IN
24384: IFFALSE 24396
// uc_nation := nation_american else
24386: LD_ADDR_OWVAR 21
24390: PUSH
24391: LD_INT 1
24393: ST_TO_ADDR
24394: GO 24439
// if chassis in [ 11 , 12 , 13 , 14 ] then
24396: LD_VAR 0 1
24400: PUSH
24401: LD_INT 11
24403: PUSH
24404: LD_INT 12
24406: PUSH
24407: LD_INT 13
24409: PUSH
24410: LD_INT 14
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: IN
24419: IFFALSE 24431
// uc_nation := nation_arabian else
24421: LD_ADDR_OWVAR 21
24425: PUSH
24426: LD_INT 2
24428: ST_TO_ADDR
24429: GO 24439
// uc_nation := nation_russian ;
24431: LD_ADDR_OWVAR 21
24435: PUSH
24436: LD_INT 3
24438: ST_TO_ADDR
// vc_chassis := chassis ;
24439: LD_ADDR_OWVAR 37
24443: PUSH
24444: LD_VAR 0 1
24448: ST_TO_ADDR
// vc_engine := engine ;
24449: LD_ADDR_OWVAR 39
24453: PUSH
24454: LD_VAR 0 2
24458: ST_TO_ADDR
// vc_control := control ;
24459: LD_ADDR_OWVAR 38
24463: PUSH
24464: LD_VAR 0 3
24468: ST_TO_ADDR
// vc_weapon := weapon ;
24469: LD_ADDR_OWVAR 40
24473: PUSH
24474: LD_VAR 0 4
24478: ST_TO_ADDR
// un := CreateVehicle ;
24479: LD_ADDR_VAR 0 8
24483: PUSH
24484: CALL_OW 45
24488: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24489: LD_VAR 0 8
24493: PPUSH
24494: LD_INT 0
24496: PPUSH
24497: LD_INT 5
24499: PPUSH
24500: CALL_OW 12
24504: PPUSH
24505: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24509: LD_VAR 0 8
24513: PPUSH
24514: LD_VAR 0 5
24518: PPUSH
24519: LD_VAR 0 6
24523: PPUSH
24524: LD_INT 1
24526: PPUSH
24527: CALL_OW 48
// end ;
24531: LD_VAR 0 7
24535: RET
// export hInvincible ; every 1 do
24536: GO 24538
24538: DISABLE
// hInvincible := [ ] ;
24539: LD_ADDR_EXP 102
24543: PUSH
24544: EMPTY
24545: ST_TO_ADDR
24546: END
// every 10 do var i ;
24547: GO 24549
24549: DISABLE
24550: LD_INT 0
24552: PPUSH
// begin enable ;
24553: ENABLE
// if not hInvincible then
24554: LD_EXP 102
24558: NOT
24559: IFFALSE 24563
// exit ;
24561: GO 24607
// for i in hInvincible do
24563: LD_ADDR_VAR 0 1
24567: PUSH
24568: LD_EXP 102
24572: PUSH
24573: FOR_IN
24574: IFFALSE 24605
// if GetLives ( i ) < 1000 then
24576: LD_VAR 0 1
24580: PPUSH
24581: CALL_OW 256
24585: PUSH
24586: LD_INT 1000
24588: LESS
24589: IFFALSE 24603
// SetLives ( i , 1000 ) ;
24591: LD_VAR 0 1
24595: PPUSH
24596: LD_INT 1000
24598: PPUSH
24599: CALL_OW 234
24603: GO 24573
24605: POP
24606: POP
// end ;
24607: PPOPN 1
24609: END
// export function hHackInvincible ; var i ; begin
24610: LD_INT 0
24612: PPUSH
24613: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24614: LD_ADDR_VAR 0 2
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: LD_INT 21
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 21
24634: PUSH
24635: LD_INT 2
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: PPUSH
24647: CALL_OW 69
24651: PUSH
24652: FOR_IN
24653: IFFALSE 24714
// if IsSelected ( i ) then
24655: LD_VAR 0 2
24659: PPUSH
24660: CALL_OW 306
24664: IFFALSE 24712
// begin if i in hInvincible then
24666: LD_VAR 0 2
24670: PUSH
24671: LD_EXP 102
24675: IN
24676: IFFALSE 24696
// hInvincible := hInvincible diff i else
24678: LD_ADDR_EXP 102
24682: PUSH
24683: LD_EXP 102
24687: PUSH
24688: LD_VAR 0 2
24692: DIFF
24693: ST_TO_ADDR
24694: GO 24712
// hInvincible := hInvincible union i ;
24696: LD_ADDR_EXP 102
24700: PUSH
24701: LD_EXP 102
24705: PUSH
24706: LD_VAR 0 2
24710: UNION
24711: ST_TO_ADDR
// end ;
24712: GO 24652
24714: POP
24715: POP
// end ;
24716: LD_VAR 0 1
24720: RET
// export function hHackInvisible ; var i , j ; begin
24721: LD_INT 0
24723: PPUSH
24724: PPUSH
24725: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24726: LD_ADDR_VAR 0 2
24730: PUSH
24731: LD_INT 21
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PPUSH
24741: CALL_OW 69
24745: PUSH
24746: FOR_IN
24747: IFFALSE 24771
// if IsSelected ( i ) then
24749: LD_VAR 0 2
24753: PPUSH
24754: CALL_OW 306
24758: IFFALSE 24769
// ComForceInvisible ( i ) ;
24760: LD_VAR 0 2
24764: PPUSH
24765: CALL_OW 496
24769: GO 24746
24771: POP
24772: POP
// end ;
24773: LD_VAR 0 1
24777: RET
// export function hHackChangeYourSide ; begin
24778: LD_INT 0
24780: PPUSH
// if your_side = 8 then
24781: LD_OWVAR 2
24785: PUSH
24786: LD_INT 8
24788: EQUAL
24789: IFFALSE 24801
// your_side := 0 else
24791: LD_ADDR_OWVAR 2
24795: PUSH
24796: LD_INT 0
24798: ST_TO_ADDR
24799: GO 24815
// your_side := your_side + 1 ;
24801: LD_ADDR_OWVAR 2
24805: PUSH
24806: LD_OWVAR 2
24810: PUSH
24811: LD_INT 1
24813: PLUS
24814: ST_TO_ADDR
// end ;
24815: LD_VAR 0 1
24819: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24820: LD_INT 0
24822: PPUSH
24823: PPUSH
24824: PPUSH
// for i in all_units do
24825: LD_ADDR_VAR 0 2
24829: PUSH
24830: LD_OWVAR 3
24834: PUSH
24835: FOR_IN
24836: IFFALSE 24914
// if IsSelected ( i ) then
24838: LD_VAR 0 2
24842: PPUSH
24843: CALL_OW 306
24847: IFFALSE 24912
// begin j := GetSide ( i ) ;
24849: LD_ADDR_VAR 0 3
24853: PUSH
24854: LD_VAR 0 2
24858: PPUSH
24859: CALL_OW 255
24863: ST_TO_ADDR
// if j = 8 then
24864: LD_VAR 0 3
24868: PUSH
24869: LD_INT 8
24871: EQUAL
24872: IFFALSE 24884
// j := 0 else
24874: LD_ADDR_VAR 0 3
24878: PUSH
24879: LD_INT 0
24881: ST_TO_ADDR
24882: GO 24898
// j := j + 1 ;
24884: LD_ADDR_VAR 0 3
24888: PUSH
24889: LD_VAR 0 3
24893: PUSH
24894: LD_INT 1
24896: PLUS
24897: ST_TO_ADDR
// SetSide ( i , j ) ;
24898: LD_VAR 0 2
24902: PPUSH
24903: LD_VAR 0 3
24907: PPUSH
24908: CALL_OW 235
// end ;
24912: GO 24835
24914: POP
24915: POP
// end ;
24916: LD_VAR 0 1
24920: RET
// export function hHackFog ; begin
24921: LD_INT 0
24923: PPUSH
// FogOff ( true ) ;
24924: LD_INT 1
24926: PPUSH
24927: CALL_OW 344
// end ;
24931: LD_VAR 0 1
24935: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24936: LD_INT 0
24938: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_VAR 0 2
24948: PPUSH
24949: LD_VAR 0 3
24953: PPUSH
24954: LD_INT 1
24956: PPUSH
24957: LD_INT 1
24959: PPUSH
24960: CALL_OW 483
// CenterOnXY ( x , y ) ;
24964: LD_VAR 0 2
24968: PPUSH
24969: LD_VAR 0 3
24973: PPUSH
24974: CALL_OW 84
// end ;
24978: LD_VAR 0 4
24982: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24983: LD_INT 0
24985: PPUSH
24986: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24987: LD_VAR 0 1
24991: NOT
24992: PUSH
24993: LD_VAR 0 2
24997: PPUSH
24998: LD_VAR 0 3
25002: PPUSH
25003: CALL_OW 488
25007: NOT
25008: OR
25009: PUSH
25010: LD_VAR 0 1
25014: PPUSH
25015: CALL_OW 266
25019: PUSH
25020: LD_INT 3
25022: NONEQUAL
25023: PUSH
25024: LD_VAR 0 1
25028: PPUSH
25029: CALL_OW 247
25033: PUSH
25034: LD_INT 1
25036: EQUAL
25037: NOT
25038: AND
25039: OR
25040: IFFALSE 25044
// exit ;
25042: GO 25326
// if GetType ( factory ) = unit_human then
25044: LD_VAR 0 1
25048: PPUSH
25049: CALL_OW 247
25053: PUSH
25054: LD_INT 1
25056: EQUAL
25057: IFFALSE 25074
// factory := IsInUnit ( factory ) ;
25059: LD_ADDR_VAR 0 1
25063: PUSH
25064: LD_VAR 0 1
25068: PPUSH
25069: CALL_OW 310
25073: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25074: LD_VAR 0 1
25078: PPUSH
25079: CALL_OW 266
25083: PUSH
25084: LD_INT 3
25086: NONEQUAL
25087: IFFALSE 25091
// exit ;
25089: GO 25326
// for i := 1 to Count ( factoryWaypoints ) do
25091: LD_ADDR_VAR 0 5
25095: PUSH
25096: DOUBLE
25097: LD_INT 1
25099: DEC
25100: ST_TO_ADDR
25101: LD_EXP 103
25105: PPUSH
25106: CALL 33992 0 1
25110: PUSH
25111: FOR_TO
25112: IFFALSE 25274
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25114: LD_VAR 0 2
25118: PPUSH
25119: LD_VAR 0 3
25123: PPUSH
25124: CALL_OW 428
25128: PUSH
25129: LD_EXP 103
25133: PUSH
25134: LD_VAR 0 5
25138: ARRAY
25139: PUSH
25140: LD_INT 2
25142: ARRAY
25143: EQUAL
25144: IFFALSE 25176
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25146: LD_ADDR_EXP 103
25150: PUSH
25151: LD_EXP 103
25155: PPUSH
25156: LD_VAR 0 5
25160: PPUSH
25161: CALL_OW 3
25165: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25166: CALL 25331 0 0
// exit ;
25170: POP
25171: POP
25172: GO 25326
// end else
25174: GO 25272
// if factory = factoryWaypoints [ i ] [ 2 ] then
25176: LD_VAR 0 1
25180: PUSH
25181: LD_EXP 103
25185: PUSH
25186: LD_VAR 0 5
25190: ARRAY
25191: PUSH
25192: LD_INT 2
25194: ARRAY
25195: EQUAL
25196: IFFALSE 25272
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25198: LD_ADDR_EXP 103
25202: PUSH
25203: LD_EXP 103
25207: PPUSH
25208: LD_VAR 0 5
25212: PPUSH
25213: CALL_OW 3
25217: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25218: LD_ADDR_EXP 103
25222: PUSH
25223: LD_EXP 103
25227: PPUSH
25228: LD_VAR 0 1
25232: PPUSH
25233: CALL_OW 255
25237: PUSH
25238: LD_VAR 0 1
25242: PUSH
25243: LD_VAR 0 2
25247: PUSH
25248: LD_VAR 0 3
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL 69601 0 2
25263: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25264: CALL 25331 0 0
// exit ;
25268: POP
25269: POP
25270: GO 25326
// end ; end ;
25272: GO 25111
25274: POP
25275: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25276: LD_ADDR_EXP 103
25280: PUSH
25281: LD_EXP 103
25285: PPUSH
25286: LD_VAR 0 1
25290: PPUSH
25291: CALL_OW 255
25295: PUSH
25296: LD_VAR 0 1
25300: PUSH
25301: LD_VAR 0 2
25305: PUSH
25306: LD_VAR 0 3
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL 69601 0 2
25321: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25322: CALL 25331 0 0
// end ;
25326: LD_VAR 0 4
25330: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25331: LD_INT 0
25333: PPUSH
25334: PPUSH
25335: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25336: LD_STRING resetFactoryWaypoint();
25338: PPUSH
25339: CALL_OW 559
// if factoryWaypoints then
25343: LD_EXP 103
25347: IFFALSE 25468
// begin list := factoryWaypoints ;
25349: LD_ADDR_VAR 0 3
25353: PUSH
25354: LD_EXP 103
25358: ST_TO_ADDR
// for i := 1 to list do
25359: LD_ADDR_VAR 0 2
25363: PUSH
25364: DOUBLE
25365: LD_INT 1
25367: DEC
25368: ST_TO_ADDR
25369: LD_VAR 0 3
25373: PUSH
25374: FOR_TO
25375: IFFALSE 25466
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25377: LD_STRING setFactoryWaypointXY(
25379: PUSH
25380: LD_VAR 0 3
25384: PUSH
25385: LD_VAR 0 2
25389: ARRAY
25390: PUSH
25391: LD_INT 1
25393: ARRAY
25394: STR
25395: PUSH
25396: LD_STRING ,
25398: STR
25399: PUSH
25400: LD_VAR 0 3
25404: PUSH
25405: LD_VAR 0 2
25409: ARRAY
25410: PUSH
25411: LD_INT 2
25413: ARRAY
25414: STR
25415: PUSH
25416: LD_STRING ,
25418: STR
25419: PUSH
25420: LD_VAR 0 3
25424: PUSH
25425: LD_VAR 0 2
25429: ARRAY
25430: PUSH
25431: LD_INT 3
25433: ARRAY
25434: STR
25435: PUSH
25436: LD_STRING ,
25438: STR
25439: PUSH
25440: LD_VAR 0 3
25444: PUSH
25445: LD_VAR 0 2
25449: ARRAY
25450: PUSH
25451: LD_INT 4
25453: ARRAY
25454: STR
25455: PUSH
25456: LD_STRING )
25458: STR
25459: PPUSH
25460: CALL_OW 559
25464: GO 25374
25466: POP
25467: POP
// end ; end ;
25468: LD_VAR 0 1
25472: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25473: LD_INT 0
25475: PPUSH
// if HexInfo ( x , y ) = warehouse then
25476: LD_VAR 0 2
25480: PPUSH
25481: LD_VAR 0 3
25485: PPUSH
25486: CALL_OW 428
25490: PUSH
25491: LD_VAR 0 1
25495: EQUAL
25496: IFFALSE 25523
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25498: LD_ADDR_EXP 104
25502: PUSH
25503: LD_EXP 104
25507: PPUSH
25508: LD_VAR 0 1
25512: PPUSH
25513: LD_INT 0
25515: PPUSH
25516: CALL_OW 1
25520: ST_TO_ADDR
25521: GO 25574
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25523: LD_ADDR_EXP 104
25527: PUSH
25528: LD_EXP 104
25532: PPUSH
25533: LD_VAR 0 1
25537: PPUSH
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 255
25547: PUSH
25548: LD_VAR 0 1
25552: PUSH
25553: LD_VAR 0 2
25557: PUSH
25558: LD_VAR 0 3
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: PPUSH
25569: CALL_OW 1
25573: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25574: CALL 25583 0 0
// end ;
25578: LD_VAR 0 4
25582: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25583: LD_INT 0
25585: PPUSH
25586: PPUSH
25587: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25588: LD_STRING resetWarehouseGatheringPoints();
25590: PPUSH
25591: CALL_OW 559
// if warehouseGatheringPoints then
25595: LD_EXP 104
25599: IFFALSE 25725
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25601: LD_ADDR_VAR 0 3
25605: PUSH
25606: LD_EXP 104
25610: PPUSH
25611: CALL 73363 0 1
25615: ST_TO_ADDR
// for i := 1 to list do
25616: LD_ADDR_VAR 0 2
25620: PUSH
25621: DOUBLE
25622: LD_INT 1
25624: DEC
25625: ST_TO_ADDR
25626: LD_VAR 0 3
25630: PUSH
25631: FOR_TO
25632: IFFALSE 25723
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25634: LD_STRING setWarehouseGatheringPointXY(
25636: PUSH
25637: LD_VAR 0 3
25641: PUSH
25642: LD_VAR 0 2
25646: ARRAY
25647: PUSH
25648: LD_INT 1
25650: ARRAY
25651: STR
25652: PUSH
25653: LD_STRING ,
25655: STR
25656: PUSH
25657: LD_VAR 0 3
25661: PUSH
25662: LD_VAR 0 2
25666: ARRAY
25667: PUSH
25668: LD_INT 2
25670: ARRAY
25671: STR
25672: PUSH
25673: LD_STRING ,
25675: STR
25676: PUSH
25677: LD_VAR 0 3
25681: PUSH
25682: LD_VAR 0 2
25686: ARRAY
25687: PUSH
25688: LD_INT 3
25690: ARRAY
25691: STR
25692: PUSH
25693: LD_STRING ,
25695: STR
25696: PUSH
25697: LD_VAR 0 3
25701: PUSH
25702: LD_VAR 0 2
25706: ARRAY
25707: PUSH
25708: LD_INT 4
25710: ARRAY
25711: STR
25712: PUSH
25713: LD_STRING )
25715: STR
25716: PPUSH
25717: CALL_OW 559
25721: GO 25631
25723: POP
25724: POP
// end ; end ;
25725: LD_VAR 0 1
25729: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25730: LD_EXP 104
25734: IFFALSE 26419
25736: GO 25738
25738: DISABLE
25739: LD_INT 0
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
25748: PPUSH
25749: PPUSH
// begin enable ;
25750: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25751: LD_ADDR_VAR 0 3
25755: PUSH
25756: LD_EXP 104
25760: PPUSH
25761: CALL 73363 0 1
25765: ST_TO_ADDR
// if not list then
25766: LD_VAR 0 3
25770: NOT
25771: IFFALSE 25775
// exit ;
25773: GO 26419
// for i := 1 to list do
25775: LD_ADDR_VAR 0 1
25779: PUSH
25780: DOUBLE
25781: LD_INT 1
25783: DEC
25784: ST_TO_ADDR
25785: LD_VAR 0 3
25789: PUSH
25790: FOR_TO
25791: IFFALSE 26417
// begin depot := list [ i ] [ 2 ] ;
25793: LD_ADDR_VAR 0 8
25797: PUSH
25798: LD_VAR 0 3
25802: PUSH
25803: LD_VAR 0 1
25807: ARRAY
25808: PUSH
25809: LD_INT 2
25811: ARRAY
25812: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25813: LD_ADDR_VAR 0 5
25817: PUSH
25818: LD_VAR 0 3
25822: PUSH
25823: LD_VAR 0 1
25827: ARRAY
25828: PUSH
25829: LD_INT 1
25831: ARRAY
25832: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25833: LD_VAR 0 8
25837: PPUSH
25838: CALL_OW 301
25842: PUSH
25843: LD_VAR 0 5
25847: PUSH
25848: LD_VAR 0 8
25852: PPUSH
25853: CALL_OW 255
25857: NONEQUAL
25858: OR
25859: IFFALSE 25888
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25861: LD_ADDR_EXP 104
25865: PUSH
25866: LD_EXP 104
25870: PPUSH
25871: LD_VAR 0 8
25875: PPUSH
25876: LD_INT 0
25878: PPUSH
25879: CALL_OW 1
25883: ST_TO_ADDR
// exit ;
25884: POP
25885: POP
25886: GO 26419
// end ; x := list [ i ] [ 3 ] ;
25888: LD_ADDR_VAR 0 6
25892: PUSH
25893: LD_VAR 0 3
25897: PUSH
25898: LD_VAR 0 1
25902: ARRAY
25903: PUSH
25904: LD_INT 3
25906: ARRAY
25907: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25908: LD_ADDR_VAR 0 7
25912: PUSH
25913: LD_VAR 0 3
25917: PUSH
25918: LD_VAR 0 1
25922: ARRAY
25923: PUSH
25924: LD_INT 4
25926: ARRAY
25927: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25928: LD_ADDR_VAR 0 9
25932: PUSH
25933: LD_VAR 0 6
25937: PPUSH
25938: LD_VAR 0 7
25942: PPUSH
25943: LD_INT 16
25945: PPUSH
25946: CALL 71947 0 3
25950: ST_TO_ADDR
// if not cratesNearbyPoint then
25951: LD_VAR 0 9
25955: NOT
25956: IFFALSE 25962
// exit ;
25958: POP
25959: POP
25960: GO 26419
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25962: LD_ADDR_VAR 0 4
25966: PUSH
25967: LD_INT 22
25969: PUSH
25970: LD_VAR 0 5
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 3
25981: PUSH
25982: LD_INT 60
25984: PUSH
25985: EMPTY
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 91
25994: PUSH
25995: LD_VAR 0 8
25999: PUSH
26000: LD_INT 6
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: LD_INT 25
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 25
26023: PUSH
26024: LD_INT 16
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: LIST
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: PPUSH
26042: CALL_OW 69
26046: PUSH
26047: LD_VAR 0 8
26051: PPUSH
26052: CALL_OW 313
26056: PPUSH
26057: LD_INT 3
26059: PUSH
26060: LD_INT 60
26062: PUSH
26063: EMPTY
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 25
26075: PUSH
26076: LD_INT 2
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 25
26085: PUSH
26086: LD_INT 16
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PPUSH
26102: CALL_OW 72
26106: UNION
26107: ST_TO_ADDR
// if tmp then
26108: LD_VAR 0 4
26112: IFFALSE 26192
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26114: LD_ADDR_VAR 0 4
26118: PUSH
26119: LD_VAR 0 4
26123: PPUSH
26124: LD_INT 3
26126: PPUSH
26127: CALL 69916 0 2
26131: ST_TO_ADDR
// for j in tmp do
26132: LD_ADDR_VAR 0 2
26136: PUSH
26137: LD_VAR 0 4
26141: PUSH
26142: FOR_IN
26143: IFFALSE 26186
// begin if IsInUnit ( j ) then
26145: LD_VAR 0 2
26149: PPUSH
26150: CALL_OW 310
26154: IFFALSE 26165
// ComExit ( j ) ;
26156: LD_VAR 0 2
26160: PPUSH
26161: CALL 69999 0 1
// AddComCollect ( j , x , y ) ;
26165: LD_VAR 0 2
26169: PPUSH
26170: LD_VAR 0 6
26174: PPUSH
26175: LD_VAR 0 7
26179: PPUSH
26180: CALL_OW 177
// end ;
26184: GO 26142
26186: POP
26187: POP
// exit ;
26188: POP
26189: POP
26190: GO 26419
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26192: LD_ADDR_VAR 0 4
26196: PUSH
26197: LD_INT 22
26199: PUSH
26200: LD_VAR 0 5
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 91
26211: PUSH
26212: LD_VAR 0 8
26216: PUSH
26217: LD_INT 8
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 34
26230: PUSH
26231: LD_INT 12
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 34
26240: PUSH
26241: LD_INT 51
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 34
26250: PUSH
26251: LD_INT 32
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 34
26260: PUSH
26261: LD_INT 89
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: PPUSH
26280: CALL_OW 69
26284: ST_TO_ADDR
// if tmp then
26285: LD_VAR 0 4
26289: IFFALSE 26415
// begin for j in tmp do
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: LD_VAR 0 4
26300: PUSH
26301: FOR_IN
26302: IFFALSE 26413
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26304: LD_VAR 0 2
26308: PPUSH
26309: CALL_OW 262
26313: PUSH
26314: LD_INT 3
26316: EQUAL
26317: PUSH
26318: LD_VAR 0 2
26322: PPUSH
26323: CALL_OW 261
26327: PUSH
26328: LD_INT 20
26330: GREATER
26331: OR
26332: PUSH
26333: LD_VAR 0 2
26337: PPUSH
26338: CALL_OW 314
26342: NOT
26343: AND
26344: PUSH
26345: LD_VAR 0 2
26349: PPUSH
26350: CALL_OW 263
26354: PUSH
26355: LD_INT 1
26357: NONEQUAL
26358: PUSH
26359: LD_VAR 0 2
26363: PPUSH
26364: CALL_OW 311
26368: OR
26369: AND
26370: IFFALSE 26411
// begin ComCollect ( j , x , y ) ;
26372: LD_VAR 0 2
26376: PPUSH
26377: LD_VAR 0 6
26381: PPUSH
26382: LD_VAR 0 7
26386: PPUSH
26387: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26391: LD_VAR 0 2
26395: PPUSH
26396: LD_VAR 0 8
26400: PPUSH
26401: CALL_OW 172
// exit ;
26405: POP
26406: POP
26407: POP
26408: POP
26409: GO 26419
// end ;
26411: GO 26301
26413: POP
26414: POP
// end ; end ;
26415: GO 25790
26417: POP
26418: POP
// end ; end_of_file
26419: PPOPN 9
26421: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26422: LD_VAR 0 1
26426: PUSH
26427: LD_INT 200
26429: DOUBLE
26430: GREATEREQUAL
26431: IFFALSE 26439
26433: LD_INT 299
26435: DOUBLE
26436: LESSEQUAL
26437: IFTRUE 26441
26439: GO 26473
26441: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26442: LD_VAR 0 1
26446: PPUSH
26447: LD_VAR 0 2
26451: PPUSH
26452: LD_VAR 0 3
26456: PPUSH
26457: LD_VAR 0 4
26461: PPUSH
26462: LD_VAR 0 5
26466: PPUSH
26467: CALL 27170 0 5
26471: GO 26550
26473: LD_INT 300
26475: DOUBLE
26476: GREATEREQUAL
26477: IFFALSE 26485
26479: LD_INT 399
26481: DOUBLE
26482: LESSEQUAL
26483: IFTRUE 26487
26485: GO 26549
26487: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26488: LD_VAR 0 1
26492: PPUSH
26493: LD_VAR 0 2
26497: PPUSH
26498: LD_VAR 0 3
26502: PPUSH
26503: LD_VAR 0 4
26507: PPUSH
26508: LD_VAR 0 5
26512: PPUSH
26513: LD_VAR 0 6
26517: PPUSH
26518: LD_VAR 0 7
26522: PPUSH
26523: LD_VAR 0 8
26527: PPUSH
26528: LD_VAR 0 9
26532: PPUSH
26533: LD_VAR 0 10
26537: PPUSH
26538: LD_VAR 0 11
26542: PPUSH
26543: CALL 22995 0 11
26547: GO 26550
26549: POP
// end ;
26550: PPOPN 11
26552: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26553: LD_VAR 0 1
26557: PPUSH
26558: LD_VAR 0 2
26562: PPUSH
26563: LD_VAR 0 3
26567: PPUSH
26568: LD_VAR 0 4
26572: PPUSH
26573: LD_VAR 0 5
26577: PPUSH
26578: CALL 26635 0 5
// end ; end_of_file
26582: PPOPN 5
26584: END
// export function SOS_UnitDestroyed ( un ) ; begin
26585: LD_INT 0
26587: PPUSH
// ComRadiation ( un ) ;
26588: LD_VAR 0 1
26592: PPUSH
26593: CALL 27574 0 1
// end ;
26597: LD_VAR 0 2
26601: RET
// export function SOS_UnitKamikazed ( un ) ; begin
26602: LD_INT 0
26604: PPUSH
// ComRadiation ( un ) ;
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL 27574 0 1
// end ;
26614: LD_VAR 0 2
26618: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26619: LD_INT 0
26621: PPUSH
// end ;
26622: LD_VAR 0 4
26626: RET
// export function SOS_Command ( cmd ) ; begin
26627: LD_INT 0
26629: PPUSH
// end ;
26630: LD_VAR 0 2
26634: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26635: LD_INT 0
26637: PPUSH
// end ;
26638: LD_VAR 0 6
26642: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
26643: LD_INT 0
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
// if not vehicle or not factory then
26650: LD_VAR 0 1
26654: NOT
26655: PUSH
26656: LD_VAR 0 2
26660: NOT
26661: OR
26662: IFFALSE 26666
// exit ;
26664: GO 27165
// if not factoryWaypoints then
26666: LD_EXP 103
26670: NOT
26671: IFFALSE 26675
// exit ;
26673: GO 27165
// for i := 1 to Count ( factoryWaypoints ) do
26675: LD_ADDR_VAR 0 4
26679: PUSH
26680: DOUBLE
26681: LD_INT 1
26683: DEC
26684: ST_TO_ADDR
26685: LD_EXP 103
26689: PPUSH
26690: CALL 33992 0 1
26694: PUSH
26695: FOR_TO
26696: IFFALSE 27163
// if factoryWaypoints [ i ] [ 2 ] = factory then
26698: LD_EXP 103
26702: PUSH
26703: LD_VAR 0 4
26707: ARRAY
26708: PUSH
26709: LD_INT 2
26711: ARRAY
26712: PUSH
26713: LD_VAR 0 2
26717: EQUAL
26718: IFFALSE 27161
// begin if GetControl ( vehicle ) = control_manual then
26720: LD_VAR 0 1
26724: PPUSH
26725: CALL_OW 263
26729: PUSH
26730: LD_INT 1
26732: EQUAL
26733: IFFALSE 27044
// begin driver := IsDrivenBy ( vehicle ) ;
26735: LD_ADDR_VAR 0 6
26739: PUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 311
26749: ST_TO_ADDR
// tag := GetTag ( driver ) ;
26750: LD_ADDR_VAR 0 5
26754: PUSH
26755: LD_VAR 0 6
26759: PPUSH
26760: CALL_OW 110
26764: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
26765: LD_VAR 0 5
26769: PUSH
26770: LD_INT 501
26772: EQUAL
26773: PUSH
26774: LD_VAR 0 1
26778: PPUSH
26779: CALL_OW 110
26783: PUSH
26784: LD_INT 501
26786: EQUAL
26787: OR
26788: IFFALSE 26794
// exit ;
26790: POP
26791: POP
26792: GO 27165
// if not HasTask ( driver ) then
26794: LD_VAR 0 6
26798: PPUSH
26799: CALL_OW 314
26803: NOT
26804: IFFALSE 27042
// begin SetTag ( driver , tDriver ) ;
26806: LD_VAR 0 6
26810: PPUSH
26811: LD_INT 501
26813: PPUSH
26814: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
26818: LD_VAR 0 1
26822: PPUSH
26823: LD_INT 501
26825: PPUSH
26826: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26830: LD_ADDR_VAR 0 7
26834: PUSH
26835: LD_EXP 103
26839: PUSH
26840: LD_VAR 0 4
26844: ARRAY
26845: PUSH
26846: LD_INT 3
26848: ARRAY
26849: PPUSH
26850: LD_EXP 103
26854: PUSH
26855: LD_VAR 0 4
26859: ARRAY
26860: PUSH
26861: LD_INT 4
26863: ARRAY
26864: PPUSH
26865: CALL_OW 428
26869: ST_TO_ADDR
// if hex then
26870: LD_VAR 0 7
26874: IFFALSE 26892
// ComMoveUnit ( driver , hex ) else
26876: LD_VAR 0 6
26880: PPUSH
26881: LD_VAR 0 7
26885: PPUSH
26886: CALL_OW 112
26890: GO 26931
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
26892: LD_VAR 0 6
26896: PPUSH
26897: LD_EXP 103
26901: PUSH
26902: LD_VAR 0 4
26906: ARRAY
26907: PUSH
26908: LD_INT 3
26910: ARRAY
26911: PPUSH
26912: LD_EXP 103
26916: PUSH
26917: LD_VAR 0 4
26921: ARRAY
26922: PUSH
26923: LD_INT 4
26925: ARRAY
26926: PPUSH
26927: CALL_OW 111
// AddComExitVehicle ( driver ) ;
26931: LD_VAR 0 6
26935: PPUSH
26936: CALL_OW 181
// if Multiplayer then
26940: LD_OWVAR 4
26944: IFFALSE 26993
// begin repeat wait ( 10 ) ;
26946: LD_INT 10
26948: PPUSH
26949: CALL_OW 67
// until not IsInUnit ( driver ) ;
26953: LD_VAR 0 6
26957: PPUSH
26958: CALL_OW 310
26962: NOT
26963: IFFALSE 26946
// if not HasTask ( driver ) then
26965: LD_VAR 0 6
26969: PPUSH
26970: CALL_OW 314
26974: NOT
26975: IFFALSE 26991
// ComEnterUnit ( driver , factory ) ;
26977: LD_VAR 0 6
26981: PPUSH
26982: LD_VAR 0 2
26986: PPUSH
26987: CALL_OW 120
// end else
26991: GO 27007
// AddComEnterUnit ( driver , factory ) ;
26993: LD_VAR 0 6
26997: PPUSH
26998: LD_VAR 0 2
27002: PPUSH
27003: CALL_OW 180
// wait ( 0 0$1 ) ;
27007: LD_INT 35
27009: PPUSH
27010: CALL_OW 67
// SetTag ( driver , tag ) ;
27014: LD_VAR 0 6
27018: PPUSH
27019: LD_VAR 0 5
27023: PPUSH
27024: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
27028: LD_VAR 0 1
27032: PPUSH
27033: LD_INT 0
27035: PPUSH
27036: CALL_OW 109
// break ;
27040: GO 27163
// end ; end else
27042: GO 27161
// if GetControl ( vehicle ) = control_remote then
27044: LD_VAR 0 1
27048: PPUSH
27049: CALL_OW 263
27053: PUSH
27054: LD_INT 2
27056: EQUAL
27057: IFFALSE 27120
// begin wait ( 0 0$2 ) ;
27059: LD_INT 70
27061: PPUSH
27062: CALL_OW 67
// if Connect ( vehicle ) then
27066: LD_VAR 0 1
27070: PPUSH
27071: CALL 40198 0 1
27075: IFFALSE 27116
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27077: LD_VAR 0 1
27081: PPUSH
27082: LD_EXP 103
27086: PUSH
27087: LD_VAR 0 4
27091: ARRAY
27092: PUSH
27093: LD_INT 3
27095: ARRAY
27096: PPUSH
27097: LD_EXP 103
27101: PUSH
27102: LD_VAR 0 4
27106: ARRAY
27107: PUSH
27108: LD_INT 4
27110: ARRAY
27111: PPUSH
27112: CALL_OW 171
// break ;
27116: GO 27163
// end else
27118: GO 27161
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27120: LD_VAR 0 1
27124: PPUSH
27125: LD_EXP 103
27129: PUSH
27130: LD_VAR 0 4
27134: ARRAY
27135: PUSH
27136: LD_INT 3
27138: ARRAY
27139: PPUSH
27140: LD_EXP 103
27144: PUSH
27145: LD_VAR 0 4
27149: ARRAY
27150: PUSH
27151: LD_INT 4
27153: ARRAY
27154: PPUSH
27155: CALL_OW 171
// break ;
27159: GO 27163
// end ; end ;
27161: GO 26695
27163: POP
27164: POP
// end ;
27165: LD_VAR 0 3
27169: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27170: LD_INT 0
27172: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27173: LD_VAR 0 1
27177: PUSH
27178: LD_INT 250
27180: EQUAL
27181: PUSH
27182: LD_VAR 0 2
27186: PPUSH
27187: CALL_OW 264
27191: PUSH
27192: LD_INT 81
27194: EQUAL
27195: AND
27196: IFFALSE 27217
// MinerPlaceMine ( unit , x , y ) ;
27198: LD_VAR 0 2
27202: PPUSH
27203: LD_VAR 0 4
27207: PPUSH
27208: LD_VAR 0 5
27212: PPUSH
27213: CALL 30309 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27217: LD_VAR 0 1
27221: PUSH
27222: LD_INT 251
27224: EQUAL
27225: PUSH
27226: LD_VAR 0 2
27230: PPUSH
27231: CALL_OW 264
27235: PUSH
27236: LD_INT 81
27238: EQUAL
27239: AND
27240: IFFALSE 27261
// MinerDetonateMine ( unit , x , y ) ;
27242: LD_VAR 0 2
27246: PPUSH
27247: LD_VAR 0 4
27251: PPUSH
27252: LD_VAR 0 5
27256: PPUSH
27257: CALL 30584 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27261: LD_VAR 0 1
27265: PUSH
27266: LD_INT 252
27268: EQUAL
27269: PUSH
27270: LD_VAR 0 2
27274: PPUSH
27275: CALL_OW 264
27279: PUSH
27280: LD_INT 81
27282: EQUAL
27283: AND
27284: IFFALSE 27305
// MinerCreateMinefield ( unit , x , y ) ;
27286: LD_VAR 0 2
27290: PPUSH
27291: LD_VAR 0 4
27295: PPUSH
27296: LD_VAR 0 5
27300: PPUSH
27301: CALL 31001 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27305: LD_VAR 0 1
27309: PUSH
27310: LD_INT 253
27312: EQUAL
27313: PUSH
27314: LD_VAR 0 2
27318: PPUSH
27319: CALL_OW 257
27323: PUSH
27324: LD_INT 5
27326: EQUAL
27327: AND
27328: IFFALSE 27349
// ComBinocular ( unit , x , y ) ;
27330: LD_VAR 0 2
27334: PPUSH
27335: LD_VAR 0 4
27339: PPUSH
27340: LD_VAR 0 5
27344: PPUSH
27345: CALL 31370 0 3
// if selectedUnit then
27349: LD_VAR 0 3
27353: IFFALSE 27409
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27355: LD_VAR 0 1
27359: PUSH
27360: LD_INT 254
27362: EQUAL
27363: PUSH
27364: LD_VAR 0 2
27368: PPUSH
27369: CALL_OW 264
27373: PUSH
27374: LD_INT 99
27376: EQUAL
27377: AND
27378: PUSH
27379: LD_VAR 0 3
27383: PPUSH
27384: CALL_OW 263
27388: PUSH
27389: LD_INT 3
27391: EQUAL
27392: AND
27393: IFFALSE 27409
// HackDestroyVehicle ( unit , selectedUnit ) ;
27395: LD_VAR 0 2
27399: PPUSH
27400: LD_VAR 0 3
27404: PPUSH
27405: CALL 29673 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27409: LD_VAR 0 1
27413: PUSH
27414: LD_INT 255
27416: EQUAL
27417: PUSH
27418: LD_VAR 0 2
27422: PPUSH
27423: CALL_OW 264
27427: PUSH
27428: LD_INT 14
27430: PUSH
27431: LD_INT 53
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: IN
27438: AND
27439: PUSH
27440: LD_VAR 0 4
27444: PPUSH
27445: LD_VAR 0 5
27449: PPUSH
27450: CALL_OW 488
27454: AND
27455: IFFALSE 27479
// CutTreeXYR ( unit , x , y , 12 ) ;
27457: LD_VAR 0 2
27461: PPUSH
27462: LD_VAR 0 4
27466: PPUSH
27467: LD_VAR 0 5
27471: PPUSH
27472: LD_INT 12
27474: PPUSH
27475: CALL 27670 0 4
// if cmd = 256 then
27479: LD_VAR 0 1
27483: PUSH
27484: LD_INT 256
27486: EQUAL
27487: IFFALSE 27508
// SetFactoryWaypoint ( unit , x , y ) ;
27489: LD_VAR 0 2
27493: PPUSH
27494: LD_VAR 0 4
27498: PPUSH
27499: LD_VAR 0 5
27503: PPUSH
27504: CALL 24983 0 3
// if cmd = 257 then
27508: LD_VAR 0 1
27512: PUSH
27513: LD_INT 257
27515: EQUAL
27516: IFFALSE 27537
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27518: LD_VAR 0 2
27522: PPUSH
27523: LD_VAR 0 4
27527: PPUSH
27528: LD_VAR 0 5
27532: PPUSH
27533: CALL 25473 0 3
// if cmd = 258 then
27537: LD_VAR 0 1
27541: PUSH
27542: LD_INT 258
27544: EQUAL
27545: IFFALSE 27569
// BurnTreeXYR ( unit , x , y , 8 ) ;
27547: LD_VAR 0 2
27551: PPUSH
27552: LD_VAR 0 4
27556: PPUSH
27557: LD_VAR 0 5
27561: PPUSH
27562: LD_INT 8
27564: PPUSH
27565: CALL 28064 0 4
// end ;
27569: LD_VAR 0 6
27573: RET
// export function ComRadiation ( un ) ; var eff ; begin
27574: LD_INT 0
27576: PPUSH
27577: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
27578: LD_VAR 0 1
27582: PPUSH
27583: CALL_OW 264
27587: PUSH
27588: LD_INT 91
27590: NONEQUAL
27591: IFFALSE 27595
// exit ;
27593: GO 27665
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27595: LD_INT 68
27597: PPUSH
27598: LD_VAR 0 1
27602: PPUSH
27603: CALL_OW 255
27607: PPUSH
27608: CALL_OW 321
27612: PUSH
27613: LD_INT 2
27615: EQUAL
27616: IFFALSE 27628
// eff := 70 else
27618: LD_ADDR_VAR 0 3
27622: PUSH
27623: LD_INT 70
27625: ST_TO_ADDR
27626: GO 27636
// eff := 30 ;
27628: LD_ADDR_VAR 0 3
27632: PUSH
27633: LD_INT 30
27635: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27636: LD_VAR 0 1
27640: PPUSH
27641: CALL_OW 250
27645: PPUSH
27646: LD_VAR 0 1
27650: PPUSH
27651: CALL_OW 251
27655: PPUSH
27656: LD_VAR 0 3
27660: PPUSH
27661: CALL_OW 495
// end ;
27665: LD_VAR 0 2
27669: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27670: LD_INT 0
27672: PPUSH
27673: PPUSH
27674: PPUSH
27675: PPUSH
27676: PPUSH
27677: PPUSH
27678: PPUSH
27679: PPUSH
27680: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27681: LD_VAR 0 1
27685: PPUSH
27686: CALL_OW 302
27690: NOT
27691: PUSH
27692: LD_VAR 0 2
27696: PPUSH
27697: LD_VAR 0 3
27701: PPUSH
27702: CALL_OW 488
27706: NOT
27707: OR
27708: PUSH
27709: LD_VAR 0 4
27713: NOT
27714: OR
27715: IFFALSE 27719
// exit ;
27717: GO 28059
// list := [ ] ;
27719: LD_ADDR_VAR 0 13
27723: PUSH
27724: EMPTY
27725: ST_TO_ADDR
// if x - r < 0 then
27726: LD_VAR 0 2
27730: PUSH
27731: LD_VAR 0 4
27735: MINUS
27736: PUSH
27737: LD_INT 0
27739: LESS
27740: IFFALSE 27752
// min_x := 0 else
27742: LD_ADDR_VAR 0 7
27746: PUSH
27747: LD_INT 0
27749: ST_TO_ADDR
27750: GO 27768
// min_x := x - r ;
27752: LD_ADDR_VAR 0 7
27756: PUSH
27757: LD_VAR 0 2
27761: PUSH
27762: LD_VAR 0 4
27766: MINUS
27767: ST_TO_ADDR
// if y - r < 0 then
27768: LD_VAR 0 3
27772: PUSH
27773: LD_VAR 0 4
27777: MINUS
27778: PUSH
27779: LD_INT 0
27781: LESS
27782: IFFALSE 27794
// min_y := 0 else
27784: LD_ADDR_VAR 0 8
27788: PUSH
27789: LD_INT 0
27791: ST_TO_ADDR
27792: GO 27810
// min_y := y - r ;
27794: LD_ADDR_VAR 0 8
27798: PUSH
27799: LD_VAR 0 3
27803: PUSH
27804: LD_VAR 0 4
27808: MINUS
27809: ST_TO_ADDR
// max_x := x + r ;
27810: LD_ADDR_VAR 0 9
27814: PUSH
27815: LD_VAR 0 2
27819: PUSH
27820: LD_VAR 0 4
27824: PLUS
27825: ST_TO_ADDR
// max_y := y + r ;
27826: LD_ADDR_VAR 0 10
27830: PUSH
27831: LD_VAR 0 3
27835: PUSH
27836: LD_VAR 0 4
27840: PLUS
27841: ST_TO_ADDR
// for _x = min_x to max_x do
27842: LD_ADDR_VAR 0 11
27846: PUSH
27847: DOUBLE
27848: LD_VAR 0 7
27852: DEC
27853: ST_TO_ADDR
27854: LD_VAR 0 9
27858: PUSH
27859: FOR_TO
27860: IFFALSE 27977
// for _y = min_y to max_y do
27862: LD_ADDR_VAR 0 12
27866: PUSH
27867: DOUBLE
27868: LD_VAR 0 8
27872: DEC
27873: ST_TO_ADDR
27874: LD_VAR 0 10
27878: PUSH
27879: FOR_TO
27880: IFFALSE 27973
// begin if not ValidHex ( _x , _y ) then
27882: LD_VAR 0 11
27886: PPUSH
27887: LD_VAR 0 12
27891: PPUSH
27892: CALL_OW 488
27896: NOT
27897: IFFALSE 27901
// continue ;
27899: GO 27879
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27901: LD_VAR 0 11
27905: PPUSH
27906: LD_VAR 0 12
27910: PPUSH
27911: CALL_OW 351
27915: PUSH
27916: LD_VAR 0 11
27920: PPUSH
27921: LD_VAR 0 12
27925: PPUSH
27926: CALL_OW 554
27930: AND
27931: IFFALSE 27971
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27933: LD_ADDR_VAR 0 13
27937: PUSH
27938: LD_VAR 0 13
27942: PPUSH
27943: LD_VAR 0 13
27947: PUSH
27948: LD_INT 1
27950: PLUS
27951: PPUSH
27952: LD_VAR 0 11
27956: PUSH
27957: LD_VAR 0 12
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PPUSH
27966: CALL_OW 2
27970: ST_TO_ADDR
// end ;
27971: GO 27879
27973: POP
27974: POP
27975: GO 27859
27977: POP
27978: POP
// if not list then
27979: LD_VAR 0 13
27983: NOT
27984: IFFALSE 27988
// exit ;
27986: GO 28059
// for i in list do
27988: LD_ADDR_VAR 0 6
27992: PUSH
27993: LD_VAR 0 13
27997: PUSH
27998: FOR_IN
27999: IFFALSE 28057
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28001: LD_VAR 0 1
28005: PPUSH
28006: LD_STRING M
28008: PUSH
28009: LD_VAR 0 6
28013: PUSH
28014: LD_INT 1
28016: ARRAY
28017: PUSH
28018: LD_VAR 0 6
28022: PUSH
28023: LD_INT 2
28025: ARRAY
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: PUSH
28048: EMPTY
28049: LIST
28050: PPUSH
28051: CALL_OW 447
28055: GO 27998
28057: POP
28058: POP
// end ;
28059: LD_VAR 0 5
28063: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28064: LD_INT 0
28066: PPUSH
28067: PPUSH
28068: PPUSH
28069: PPUSH
28070: PPUSH
28071: PPUSH
28072: PPUSH
28073: PPUSH
28074: PPUSH
28075: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28076: LD_VAR 0 1
28080: PPUSH
28081: CALL_OW 302
28085: NOT
28086: PUSH
28087: LD_VAR 0 2
28091: PPUSH
28092: LD_VAR 0 3
28096: PPUSH
28097: CALL_OW 488
28101: NOT
28102: OR
28103: PUSH
28104: LD_VAR 0 4
28108: NOT
28109: OR
28110: IFFALSE 28114
// exit ;
28112: GO 28627
// list := [ ] ;
28114: LD_ADDR_VAR 0 13
28118: PUSH
28119: EMPTY
28120: ST_TO_ADDR
// if x - r < 0 then
28121: LD_VAR 0 2
28125: PUSH
28126: LD_VAR 0 4
28130: MINUS
28131: PUSH
28132: LD_INT 0
28134: LESS
28135: IFFALSE 28147
// min_x := 0 else
28137: LD_ADDR_VAR 0 7
28141: PUSH
28142: LD_INT 0
28144: ST_TO_ADDR
28145: GO 28163
// min_x := x - r ;
28147: LD_ADDR_VAR 0 7
28151: PUSH
28152: LD_VAR 0 2
28156: PUSH
28157: LD_VAR 0 4
28161: MINUS
28162: ST_TO_ADDR
// if y - r < 0 then
28163: LD_VAR 0 3
28167: PUSH
28168: LD_VAR 0 4
28172: MINUS
28173: PUSH
28174: LD_INT 0
28176: LESS
28177: IFFALSE 28189
// min_y := 0 else
28179: LD_ADDR_VAR 0 8
28183: PUSH
28184: LD_INT 0
28186: ST_TO_ADDR
28187: GO 28205
// min_y := y - r ;
28189: LD_ADDR_VAR 0 8
28193: PUSH
28194: LD_VAR 0 3
28198: PUSH
28199: LD_VAR 0 4
28203: MINUS
28204: ST_TO_ADDR
// max_x := x + r ;
28205: LD_ADDR_VAR 0 9
28209: PUSH
28210: LD_VAR 0 2
28214: PUSH
28215: LD_VAR 0 4
28219: PLUS
28220: ST_TO_ADDR
// max_y := y + r ;
28221: LD_ADDR_VAR 0 10
28225: PUSH
28226: LD_VAR 0 3
28230: PUSH
28231: LD_VAR 0 4
28235: PLUS
28236: ST_TO_ADDR
// for _x = min_x to max_x do
28237: LD_ADDR_VAR 0 11
28241: PUSH
28242: DOUBLE
28243: LD_VAR 0 7
28247: DEC
28248: ST_TO_ADDR
28249: LD_VAR 0 9
28253: PUSH
28254: FOR_TO
28255: IFFALSE 28372
// for _y = min_y to max_y do
28257: LD_ADDR_VAR 0 12
28261: PUSH
28262: DOUBLE
28263: LD_VAR 0 8
28267: DEC
28268: ST_TO_ADDR
28269: LD_VAR 0 10
28273: PUSH
28274: FOR_TO
28275: IFFALSE 28368
// begin if not ValidHex ( _x , _y ) then
28277: LD_VAR 0 11
28281: PPUSH
28282: LD_VAR 0 12
28286: PPUSH
28287: CALL_OW 488
28291: NOT
28292: IFFALSE 28296
// continue ;
28294: GO 28274
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28296: LD_VAR 0 11
28300: PPUSH
28301: LD_VAR 0 12
28305: PPUSH
28306: CALL_OW 351
28310: PUSH
28311: LD_VAR 0 11
28315: PPUSH
28316: LD_VAR 0 12
28320: PPUSH
28321: CALL_OW 554
28325: AND
28326: IFFALSE 28366
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28328: LD_ADDR_VAR 0 13
28332: PUSH
28333: LD_VAR 0 13
28337: PPUSH
28338: LD_VAR 0 13
28342: PUSH
28343: LD_INT 1
28345: PLUS
28346: PPUSH
28347: LD_VAR 0 11
28351: PUSH
28352: LD_VAR 0 12
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 2
28365: ST_TO_ADDR
// end ;
28366: GO 28274
28368: POP
28369: POP
28370: GO 28254
28372: POP
28373: POP
// if not list then
28374: LD_VAR 0 13
28378: NOT
28379: IFFALSE 28383
// exit ;
28381: GO 28627
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28383: LD_ADDR_VAR 0 13
28387: PUSH
28388: LD_VAR 0 1
28392: PPUSH
28393: LD_VAR 0 13
28397: PPUSH
28398: LD_INT 1
28400: PPUSH
28401: LD_INT 1
28403: PPUSH
28404: CALL 37340 0 4
28408: ST_TO_ADDR
// ComStop ( flame ) ;
28409: LD_VAR 0 1
28413: PPUSH
28414: CALL_OW 141
// for i in list do
28418: LD_ADDR_VAR 0 6
28422: PUSH
28423: LD_VAR 0 13
28427: PUSH
28428: FOR_IN
28429: IFFALSE 28460
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28431: LD_VAR 0 1
28435: PPUSH
28436: LD_VAR 0 6
28440: PUSH
28441: LD_INT 1
28443: ARRAY
28444: PPUSH
28445: LD_VAR 0 6
28449: PUSH
28450: LD_INT 2
28452: ARRAY
28453: PPUSH
28454: CALL_OW 176
28458: GO 28428
28460: POP
28461: POP
// repeat wait ( 0 0$1 ) ;
28462: LD_INT 35
28464: PPUSH
28465: CALL_OW 67
// task := GetTaskList ( flame ) ;
28469: LD_ADDR_VAR 0 14
28473: PUSH
28474: LD_VAR 0 1
28478: PPUSH
28479: CALL_OW 437
28483: ST_TO_ADDR
// if not task then
28484: LD_VAR 0 14
28488: NOT
28489: IFFALSE 28493
// exit ;
28491: GO 28627
// if task [ 1 ] [ 1 ] <> | then
28493: LD_VAR 0 14
28497: PUSH
28498: LD_INT 1
28500: ARRAY
28501: PUSH
28502: LD_INT 1
28504: ARRAY
28505: PUSH
28506: LD_STRING |
28508: NONEQUAL
28509: IFFALSE 28513
// exit ;
28511: GO 28627
// _x := task [ 1 ] [ 2 ] ;
28513: LD_ADDR_VAR 0 11
28517: PUSH
28518: LD_VAR 0 14
28522: PUSH
28523: LD_INT 1
28525: ARRAY
28526: PUSH
28527: LD_INT 2
28529: ARRAY
28530: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28531: LD_ADDR_VAR 0 12
28535: PUSH
28536: LD_VAR 0 14
28540: PUSH
28541: LD_INT 1
28543: ARRAY
28544: PUSH
28545: LD_INT 3
28547: ARRAY
28548: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28549: LD_VAR 0 11
28553: PPUSH
28554: LD_VAR 0 12
28558: PPUSH
28559: CALL_OW 351
28563: NOT
28564: PUSH
28565: LD_VAR 0 11
28569: PPUSH
28570: LD_VAR 0 12
28574: PPUSH
28575: CALL_OW 554
28579: NOT
28580: OR
28581: IFFALSE 28615
// begin task := Delete ( task , 1 ) ;
28583: LD_ADDR_VAR 0 14
28587: PUSH
28588: LD_VAR 0 14
28592: PPUSH
28593: LD_INT 1
28595: PPUSH
28596: CALL_OW 3
28600: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28601: LD_VAR 0 1
28605: PPUSH
28606: LD_VAR 0 14
28610: PPUSH
28611: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28615: LD_VAR 0 1
28619: PPUSH
28620: CALL_OW 314
28624: NOT
28625: IFFALSE 28462
// end ;
28627: LD_VAR 0 5
28631: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28632: LD_EXP 106
28636: NOT
28637: IFFALSE 28687
28639: GO 28641
28641: DISABLE
// begin initHack := true ;
28642: LD_ADDR_EXP 106
28646: PUSH
28647: LD_INT 1
28649: ST_TO_ADDR
// hackTanks := [ ] ;
28650: LD_ADDR_EXP 107
28654: PUSH
28655: EMPTY
28656: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28657: LD_ADDR_EXP 108
28661: PUSH
28662: EMPTY
28663: ST_TO_ADDR
// hackLimit := 3 ;
28664: LD_ADDR_EXP 109
28668: PUSH
28669: LD_INT 3
28671: ST_TO_ADDR
// hackDist := 12 ;
28672: LD_ADDR_EXP 110
28676: PUSH
28677: LD_INT 12
28679: ST_TO_ADDR
// hackCounter := [ ] ;
28680: LD_ADDR_EXP 111
28684: PUSH
28685: EMPTY
28686: ST_TO_ADDR
// end ;
28687: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28688: LD_EXP 106
28692: PUSH
28693: LD_INT 34
28695: PUSH
28696: LD_INT 99
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PPUSH
28703: CALL_OW 69
28707: AND
28708: IFFALSE 28961
28710: GO 28712
28712: DISABLE
28713: LD_INT 0
28715: PPUSH
28716: PPUSH
// begin enable ;
28717: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28718: LD_ADDR_VAR 0 1
28722: PUSH
28723: LD_INT 34
28725: PUSH
28726: LD_INT 99
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PPUSH
28733: CALL_OW 69
28737: PUSH
28738: FOR_IN
28739: IFFALSE 28959
// begin if not i in hackTanks then
28741: LD_VAR 0 1
28745: PUSH
28746: LD_EXP 107
28750: IN
28751: NOT
28752: IFFALSE 28835
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28754: LD_ADDR_EXP 107
28758: PUSH
28759: LD_EXP 107
28763: PPUSH
28764: LD_EXP 107
28768: PUSH
28769: LD_INT 1
28771: PLUS
28772: PPUSH
28773: LD_VAR 0 1
28777: PPUSH
28778: CALL_OW 1
28782: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28783: LD_ADDR_EXP 108
28787: PUSH
28788: LD_EXP 108
28792: PPUSH
28793: LD_EXP 108
28797: PUSH
28798: LD_INT 1
28800: PLUS
28801: PPUSH
28802: EMPTY
28803: PPUSH
28804: CALL_OW 1
28808: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28809: LD_ADDR_EXP 111
28813: PUSH
28814: LD_EXP 111
28818: PPUSH
28819: LD_EXP 111
28823: PUSH
28824: LD_INT 1
28826: PLUS
28827: PPUSH
28828: EMPTY
28829: PPUSH
28830: CALL_OW 1
28834: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28835: LD_VAR 0 1
28839: PPUSH
28840: CALL_OW 302
28844: NOT
28845: IFFALSE 28858
// begin HackUnlinkAll ( i ) ;
28847: LD_VAR 0 1
28851: PPUSH
28852: CALL 28964 0 1
// continue ;
28856: GO 28738
// end ; HackCheckCapturedStatus ( i ) ;
28858: LD_VAR 0 1
28862: PPUSH
28863: CALL 29407 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28867: LD_ADDR_VAR 0 2
28871: PUSH
28872: LD_INT 81
28874: PUSH
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 255
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 33
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 91
28901: PUSH
28902: LD_VAR 0 1
28906: PUSH
28907: LD_EXP 110
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 50
28919: PUSH
28920: EMPTY
28921: LIST
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: PPUSH
28929: CALL_OW 69
28933: ST_TO_ADDR
// if not tmp then
28934: LD_VAR 0 2
28938: NOT
28939: IFFALSE 28943
// continue ;
28941: GO 28738
// HackLink ( i , tmp ) ;
28943: LD_VAR 0 1
28947: PPUSH
28948: LD_VAR 0 2
28952: PPUSH
28953: CALL 29100 0 2
// end ;
28957: GO 28738
28959: POP
28960: POP
// end ;
28961: PPOPN 2
28963: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28964: LD_INT 0
28966: PPUSH
28967: PPUSH
28968: PPUSH
// if not hack in hackTanks then
28969: LD_VAR 0 1
28973: PUSH
28974: LD_EXP 107
28978: IN
28979: NOT
28980: IFFALSE 28984
// exit ;
28982: GO 29095
// index := GetElementIndex ( hackTanks , hack ) ;
28984: LD_ADDR_VAR 0 4
28988: PUSH
28989: LD_EXP 107
28993: PPUSH
28994: LD_VAR 0 1
28998: PPUSH
28999: CALL 36637 0 2
29003: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29004: LD_EXP 108
29008: PUSH
29009: LD_VAR 0 4
29013: ARRAY
29014: IFFALSE 29095
// begin for i in hackTanksCaptured [ index ] do
29016: LD_ADDR_VAR 0 3
29020: PUSH
29021: LD_EXP 108
29025: PUSH
29026: LD_VAR 0 4
29030: ARRAY
29031: PUSH
29032: FOR_IN
29033: IFFALSE 29059
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29035: LD_VAR 0 3
29039: PUSH
29040: LD_INT 1
29042: ARRAY
29043: PPUSH
29044: LD_VAR 0 3
29048: PUSH
29049: LD_INT 2
29051: ARRAY
29052: PPUSH
29053: CALL_OW 235
29057: GO 29032
29059: POP
29060: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29061: LD_ADDR_EXP 108
29065: PUSH
29066: LD_EXP 108
29070: PPUSH
29071: LD_VAR 0 4
29075: PPUSH
29076: EMPTY
29077: PPUSH
29078: CALL_OW 1
29082: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_INT 0
29090: PPUSH
29091: CALL_OW 505
// end ; end ;
29095: LD_VAR 0 2
29099: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29100: LD_INT 0
29102: PPUSH
29103: PPUSH
29104: PPUSH
// if not hack in hackTanks or not vehicles then
29105: LD_VAR 0 1
29109: PUSH
29110: LD_EXP 107
29114: IN
29115: NOT
29116: PUSH
29117: LD_VAR 0 2
29121: NOT
29122: OR
29123: IFFALSE 29127
// exit ;
29125: GO 29402
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29127: LD_ADDR_VAR 0 2
29131: PUSH
29132: LD_VAR 0 1
29136: PPUSH
29137: LD_VAR 0 2
29141: PPUSH
29142: LD_INT 1
29144: PPUSH
29145: LD_INT 1
29147: PPUSH
29148: CALL 37287 0 4
29152: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29153: LD_ADDR_VAR 0 5
29157: PUSH
29158: LD_EXP 107
29162: PPUSH
29163: LD_VAR 0 1
29167: PPUSH
29168: CALL 36637 0 2
29172: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29173: LD_EXP 108
29177: PUSH
29178: LD_VAR 0 5
29182: ARRAY
29183: PUSH
29184: LD_EXP 109
29188: LESS
29189: IFFALSE 29378
// begin for i := 1 to vehicles do
29191: LD_ADDR_VAR 0 4
29195: PUSH
29196: DOUBLE
29197: LD_INT 1
29199: DEC
29200: ST_TO_ADDR
29201: LD_VAR 0 2
29205: PUSH
29206: FOR_TO
29207: IFFALSE 29376
// begin if hackTanksCaptured [ index ] = hackLimit then
29209: LD_EXP 108
29213: PUSH
29214: LD_VAR 0 5
29218: ARRAY
29219: PUSH
29220: LD_EXP 109
29224: EQUAL
29225: IFFALSE 29229
// break ;
29227: GO 29376
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29229: LD_ADDR_EXP 111
29233: PUSH
29234: LD_EXP 111
29238: PPUSH
29239: LD_VAR 0 5
29243: PPUSH
29244: LD_EXP 111
29248: PUSH
29249: LD_VAR 0 5
29253: ARRAY
29254: PUSH
29255: LD_INT 1
29257: PLUS
29258: PPUSH
29259: CALL_OW 1
29263: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29264: LD_ADDR_EXP 108
29268: PUSH
29269: LD_EXP 108
29273: PPUSH
29274: LD_VAR 0 5
29278: PUSH
29279: LD_EXP 108
29283: PUSH
29284: LD_VAR 0 5
29288: ARRAY
29289: PUSH
29290: LD_INT 1
29292: PLUS
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PPUSH
29298: LD_VAR 0 2
29302: PUSH
29303: LD_VAR 0 4
29307: ARRAY
29308: PUSH
29309: LD_VAR 0 2
29313: PUSH
29314: LD_VAR 0 4
29318: ARRAY
29319: PPUSH
29320: CALL_OW 255
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PPUSH
29329: CALL 36852 0 3
29333: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29334: LD_VAR 0 2
29338: PUSH
29339: LD_VAR 0 4
29343: ARRAY
29344: PPUSH
29345: LD_VAR 0 1
29349: PPUSH
29350: CALL_OW 255
29354: PPUSH
29355: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29359: LD_VAR 0 2
29363: PUSH
29364: LD_VAR 0 4
29368: ARRAY
29369: PPUSH
29370: CALL_OW 141
// end ;
29374: GO 29206
29376: POP
29377: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29378: LD_VAR 0 1
29382: PPUSH
29383: LD_EXP 108
29387: PUSH
29388: LD_VAR 0 5
29392: ARRAY
29393: PUSH
29394: LD_INT 0
29396: PLUS
29397: PPUSH
29398: CALL_OW 505
// end ;
29402: LD_VAR 0 3
29406: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29407: LD_INT 0
29409: PPUSH
29410: PPUSH
29411: PPUSH
29412: PPUSH
// if not hack in hackTanks then
29413: LD_VAR 0 1
29417: PUSH
29418: LD_EXP 107
29422: IN
29423: NOT
29424: IFFALSE 29428
// exit ;
29426: GO 29668
// index := GetElementIndex ( hackTanks , hack ) ;
29428: LD_ADDR_VAR 0 4
29432: PUSH
29433: LD_EXP 107
29437: PPUSH
29438: LD_VAR 0 1
29442: PPUSH
29443: CALL 36637 0 2
29447: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29448: LD_ADDR_VAR 0 3
29452: PUSH
29453: DOUBLE
29454: LD_EXP 108
29458: PUSH
29459: LD_VAR 0 4
29463: ARRAY
29464: INC
29465: ST_TO_ADDR
29466: LD_INT 1
29468: PUSH
29469: FOR_DOWNTO
29470: IFFALSE 29642
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29472: LD_ADDR_VAR 0 5
29476: PUSH
29477: LD_EXP 108
29481: PUSH
29482: LD_VAR 0 4
29486: ARRAY
29487: PUSH
29488: LD_VAR 0 3
29492: ARRAY
29493: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29494: LD_VAR 0 5
29498: PUSH
29499: LD_INT 1
29501: ARRAY
29502: PPUSH
29503: CALL_OW 302
29507: NOT
29508: PUSH
29509: LD_VAR 0 5
29513: PUSH
29514: LD_INT 1
29516: ARRAY
29517: PPUSH
29518: CALL_OW 255
29522: PUSH
29523: LD_VAR 0 1
29527: PPUSH
29528: CALL_OW 255
29532: NONEQUAL
29533: OR
29534: IFFALSE 29640
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29536: LD_VAR 0 5
29540: PUSH
29541: LD_INT 1
29543: ARRAY
29544: PPUSH
29545: CALL_OW 305
29549: PUSH
29550: LD_VAR 0 5
29554: PUSH
29555: LD_INT 1
29557: ARRAY
29558: PPUSH
29559: CALL_OW 255
29563: PUSH
29564: LD_VAR 0 1
29568: PPUSH
29569: CALL_OW 255
29573: EQUAL
29574: AND
29575: IFFALSE 29599
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29577: LD_VAR 0 5
29581: PUSH
29582: LD_INT 1
29584: ARRAY
29585: PPUSH
29586: LD_VAR 0 5
29590: PUSH
29591: LD_INT 2
29593: ARRAY
29594: PPUSH
29595: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29599: LD_ADDR_EXP 108
29603: PUSH
29604: LD_EXP 108
29608: PPUSH
29609: LD_VAR 0 4
29613: PPUSH
29614: LD_EXP 108
29618: PUSH
29619: LD_VAR 0 4
29623: ARRAY
29624: PPUSH
29625: LD_VAR 0 3
29629: PPUSH
29630: CALL_OW 3
29634: PPUSH
29635: CALL_OW 1
29639: ST_TO_ADDR
// end ; end ;
29640: GO 29469
29642: POP
29643: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29644: LD_VAR 0 1
29648: PPUSH
29649: LD_EXP 108
29653: PUSH
29654: LD_VAR 0 4
29658: ARRAY
29659: PUSH
29660: LD_INT 0
29662: PLUS
29663: PPUSH
29664: CALL_OW 505
// end ;
29668: LD_VAR 0 2
29672: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29673: LD_INT 0
29675: PPUSH
29676: PPUSH
29677: PPUSH
29678: PPUSH
// if not hack in hackTanks then
29679: LD_VAR 0 1
29683: PUSH
29684: LD_EXP 107
29688: IN
29689: NOT
29690: IFFALSE 29694
// exit ;
29692: GO 29779
// index := GetElementIndex ( hackTanks , hack ) ;
29694: LD_ADDR_VAR 0 5
29698: PUSH
29699: LD_EXP 107
29703: PPUSH
29704: LD_VAR 0 1
29708: PPUSH
29709: CALL 36637 0 2
29713: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29714: LD_ADDR_VAR 0 4
29718: PUSH
29719: DOUBLE
29720: LD_INT 1
29722: DEC
29723: ST_TO_ADDR
29724: LD_EXP 108
29728: PUSH
29729: LD_VAR 0 5
29733: ARRAY
29734: PUSH
29735: FOR_TO
29736: IFFALSE 29777
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29738: LD_EXP 108
29742: PUSH
29743: LD_VAR 0 5
29747: ARRAY
29748: PUSH
29749: LD_VAR 0 4
29753: ARRAY
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: PUSH
29759: LD_VAR 0 2
29763: EQUAL
29764: IFFALSE 29775
// KillUnit ( vehicle ) ;
29766: LD_VAR 0 2
29770: PPUSH
29771: CALL_OW 66
29775: GO 29735
29777: POP
29778: POP
// end ;
29779: LD_VAR 0 3
29783: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29784: LD_EXP 112
29788: NOT
29789: IFFALSE 29824
29791: GO 29793
29793: DISABLE
// begin initMiner := true ;
29794: LD_ADDR_EXP 112
29798: PUSH
29799: LD_INT 1
29801: ST_TO_ADDR
// minersList := [ ] ;
29802: LD_ADDR_EXP 113
29806: PUSH
29807: EMPTY
29808: ST_TO_ADDR
// minerMinesList := [ ] ;
29809: LD_ADDR_EXP 114
29813: PUSH
29814: EMPTY
29815: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29816: LD_ADDR_EXP 115
29820: PUSH
29821: LD_INT 5
29823: ST_TO_ADDR
// end ;
29824: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29825: LD_EXP 112
29829: PUSH
29830: LD_INT 34
29832: PUSH
29833: LD_INT 81
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PPUSH
29840: CALL_OW 69
29844: AND
29845: IFFALSE 30306
29847: GO 29849
29849: DISABLE
29850: LD_INT 0
29852: PPUSH
29853: PPUSH
29854: PPUSH
29855: PPUSH
// begin enable ;
29856: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29857: LD_ADDR_VAR 0 1
29861: PUSH
29862: LD_INT 34
29864: PUSH
29865: LD_INT 81
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PPUSH
29872: CALL_OW 69
29876: PUSH
29877: FOR_IN
29878: IFFALSE 29950
// begin if not i in minersList then
29880: LD_VAR 0 1
29884: PUSH
29885: LD_EXP 113
29889: IN
29890: NOT
29891: IFFALSE 29948
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29893: LD_ADDR_EXP 113
29897: PUSH
29898: LD_EXP 113
29902: PPUSH
29903: LD_EXP 113
29907: PUSH
29908: LD_INT 1
29910: PLUS
29911: PPUSH
29912: LD_VAR 0 1
29916: PPUSH
29917: CALL_OW 1
29921: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29922: LD_ADDR_EXP 114
29926: PUSH
29927: LD_EXP 114
29931: PPUSH
29932: LD_EXP 114
29936: PUSH
29937: LD_INT 1
29939: PLUS
29940: PPUSH
29941: EMPTY
29942: PPUSH
29943: CALL_OW 1
29947: ST_TO_ADDR
// end end ;
29948: GO 29877
29950: POP
29951: POP
// for i := minerMinesList downto 1 do
29952: LD_ADDR_VAR 0 1
29956: PUSH
29957: DOUBLE
29958: LD_EXP 114
29962: INC
29963: ST_TO_ADDR
29964: LD_INT 1
29966: PUSH
29967: FOR_DOWNTO
29968: IFFALSE 30304
// begin if IsLive ( minersList [ i ] ) then
29970: LD_EXP 113
29974: PUSH
29975: LD_VAR 0 1
29979: ARRAY
29980: PPUSH
29981: CALL_OW 300
29985: IFFALSE 30013
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29987: LD_EXP 113
29991: PUSH
29992: LD_VAR 0 1
29996: ARRAY
29997: PPUSH
29998: LD_EXP 114
30002: PUSH
30003: LD_VAR 0 1
30007: ARRAY
30008: PPUSH
30009: CALL_OW 505
// if not minerMinesList [ i ] then
30013: LD_EXP 114
30017: PUSH
30018: LD_VAR 0 1
30022: ARRAY
30023: NOT
30024: IFFALSE 30028
// continue ;
30026: GO 29967
// for j := minerMinesList [ i ] downto 1 do
30028: LD_ADDR_VAR 0 2
30032: PUSH
30033: DOUBLE
30034: LD_EXP 114
30038: PUSH
30039: LD_VAR 0 1
30043: ARRAY
30044: INC
30045: ST_TO_ADDR
30046: LD_INT 1
30048: PUSH
30049: FOR_DOWNTO
30050: IFFALSE 30300
// begin side := GetSide ( minersList [ i ] ) ;
30052: LD_ADDR_VAR 0 3
30056: PUSH
30057: LD_EXP 113
30061: PUSH
30062: LD_VAR 0 1
30066: ARRAY
30067: PPUSH
30068: CALL_OW 255
30072: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30073: LD_ADDR_VAR 0 4
30077: PUSH
30078: LD_EXP 114
30082: PUSH
30083: LD_VAR 0 1
30087: ARRAY
30088: PUSH
30089: LD_VAR 0 2
30093: ARRAY
30094: PUSH
30095: LD_INT 1
30097: ARRAY
30098: PPUSH
30099: LD_EXP 114
30103: PUSH
30104: LD_VAR 0 1
30108: ARRAY
30109: PUSH
30110: LD_VAR 0 2
30114: ARRAY
30115: PUSH
30116: LD_INT 2
30118: ARRAY
30119: PPUSH
30120: CALL_OW 428
30124: ST_TO_ADDR
// if not tmp then
30125: LD_VAR 0 4
30129: NOT
30130: IFFALSE 30134
// continue ;
30132: GO 30049
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30134: LD_VAR 0 4
30138: PUSH
30139: LD_INT 81
30141: PUSH
30142: LD_VAR 0 3
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PPUSH
30151: CALL_OW 69
30155: IN
30156: PUSH
30157: LD_EXP 114
30161: PUSH
30162: LD_VAR 0 1
30166: ARRAY
30167: PUSH
30168: LD_VAR 0 2
30172: ARRAY
30173: PUSH
30174: LD_INT 1
30176: ARRAY
30177: PPUSH
30178: LD_EXP 114
30182: PUSH
30183: LD_VAR 0 1
30187: ARRAY
30188: PUSH
30189: LD_VAR 0 2
30193: ARRAY
30194: PUSH
30195: LD_INT 2
30197: ARRAY
30198: PPUSH
30199: CALL_OW 458
30203: AND
30204: IFFALSE 30298
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30206: LD_EXP 114
30210: PUSH
30211: LD_VAR 0 1
30215: ARRAY
30216: PUSH
30217: LD_VAR 0 2
30221: ARRAY
30222: PUSH
30223: LD_INT 1
30225: ARRAY
30226: PPUSH
30227: LD_EXP 114
30231: PUSH
30232: LD_VAR 0 1
30236: ARRAY
30237: PUSH
30238: LD_VAR 0 2
30242: ARRAY
30243: PUSH
30244: LD_INT 2
30246: ARRAY
30247: PPUSH
30248: LD_VAR 0 3
30252: PPUSH
30253: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30257: LD_ADDR_EXP 114
30261: PUSH
30262: LD_EXP 114
30266: PPUSH
30267: LD_VAR 0 1
30271: PPUSH
30272: LD_EXP 114
30276: PUSH
30277: LD_VAR 0 1
30281: ARRAY
30282: PPUSH
30283: LD_VAR 0 2
30287: PPUSH
30288: CALL_OW 3
30292: PPUSH
30293: CALL_OW 1
30297: ST_TO_ADDR
// end ; end ;
30298: GO 30049
30300: POP
30301: POP
// end ;
30302: GO 29967
30304: POP
30305: POP
// end ;
30306: PPOPN 4
30308: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30309: LD_INT 0
30311: PPUSH
30312: PPUSH
// result := false ;
30313: LD_ADDR_VAR 0 4
30317: PUSH
30318: LD_INT 0
30320: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30321: LD_VAR 0 1
30325: PPUSH
30326: CALL_OW 264
30330: PUSH
30331: LD_INT 81
30333: EQUAL
30334: NOT
30335: IFFALSE 30339
// exit ;
30337: GO 30579
// index := GetElementIndex ( minersList , unit ) ;
30339: LD_ADDR_VAR 0 5
30343: PUSH
30344: LD_EXP 113
30348: PPUSH
30349: LD_VAR 0 1
30353: PPUSH
30354: CALL 36637 0 2
30358: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30359: LD_EXP 114
30363: PUSH
30364: LD_VAR 0 5
30368: ARRAY
30369: PUSH
30370: LD_EXP 115
30374: GREATEREQUAL
30375: IFFALSE 30379
// exit ;
30377: GO 30579
// ComMoveXY ( unit , x , y ) ;
30379: LD_VAR 0 1
30383: PPUSH
30384: LD_VAR 0 2
30388: PPUSH
30389: LD_VAR 0 3
30393: PPUSH
30394: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30398: LD_INT 35
30400: PPUSH
30401: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30405: LD_VAR 0 1
30409: PPUSH
30410: LD_VAR 0 2
30414: PPUSH
30415: LD_VAR 0 3
30419: PPUSH
30420: CALL 68398 0 3
30424: NOT
30425: PUSH
30426: LD_VAR 0 1
30430: PPUSH
30431: CALL_OW 314
30435: AND
30436: IFFALSE 30440
// exit ;
30438: GO 30579
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30440: LD_VAR 0 2
30444: PPUSH
30445: LD_VAR 0 3
30449: PPUSH
30450: CALL_OW 428
30454: PUSH
30455: LD_VAR 0 1
30459: EQUAL
30460: PUSH
30461: LD_VAR 0 1
30465: PPUSH
30466: CALL_OW 314
30470: NOT
30471: AND
30472: IFFALSE 30398
// PlaySoundXY ( x , y , PlantMine ) ;
30474: LD_VAR 0 2
30478: PPUSH
30479: LD_VAR 0 3
30483: PPUSH
30484: LD_STRING PlantMine
30486: PPUSH
30487: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30491: LD_VAR 0 2
30495: PPUSH
30496: LD_VAR 0 3
30500: PPUSH
30501: LD_VAR 0 1
30505: PPUSH
30506: CALL_OW 255
30510: PPUSH
30511: LD_INT 0
30513: PPUSH
30514: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30518: LD_ADDR_EXP 114
30522: PUSH
30523: LD_EXP 114
30527: PPUSH
30528: LD_VAR 0 5
30532: PUSH
30533: LD_EXP 114
30537: PUSH
30538: LD_VAR 0 5
30542: ARRAY
30543: PUSH
30544: LD_INT 1
30546: PLUS
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PPUSH
30552: LD_VAR 0 2
30556: PUSH
30557: LD_VAR 0 3
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PPUSH
30566: CALL 36852 0 3
30570: ST_TO_ADDR
// result := true ;
30571: LD_ADDR_VAR 0 4
30575: PUSH
30576: LD_INT 1
30578: ST_TO_ADDR
// end ;
30579: LD_VAR 0 4
30583: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30584: LD_INT 0
30586: PPUSH
30587: PPUSH
30588: PPUSH
// if not unit in minersList then
30589: LD_VAR 0 1
30593: PUSH
30594: LD_EXP 113
30598: IN
30599: NOT
30600: IFFALSE 30604
// exit ;
30602: GO 30996
// index := GetElementIndex ( minersList , unit ) ;
30604: LD_ADDR_VAR 0 6
30608: PUSH
30609: LD_EXP 113
30613: PPUSH
30614: LD_VAR 0 1
30618: PPUSH
30619: CALL 36637 0 2
30623: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30624: LD_ADDR_VAR 0 5
30628: PUSH
30629: DOUBLE
30630: LD_EXP 114
30634: PUSH
30635: LD_VAR 0 6
30639: ARRAY
30640: INC
30641: ST_TO_ADDR
30642: LD_INT 1
30644: PUSH
30645: FOR_DOWNTO
30646: IFFALSE 30807
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30648: LD_EXP 114
30652: PUSH
30653: LD_VAR 0 6
30657: ARRAY
30658: PUSH
30659: LD_VAR 0 5
30663: ARRAY
30664: PUSH
30665: LD_INT 1
30667: ARRAY
30668: PUSH
30669: LD_VAR 0 2
30673: EQUAL
30674: PUSH
30675: LD_EXP 114
30679: PUSH
30680: LD_VAR 0 6
30684: ARRAY
30685: PUSH
30686: LD_VAR 0 5
30690: ARRAY
30691: PUSH
30692: LD_INT 2
30694: ARRAY
30695: PUSH
30696: LD_VAR 0 3
30700: EQUAL
30701: AND
30702: IFFALSE 30805
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30704: LD_EXP 114
30708: PUSH
30709: LD_VAR 0 6
30713: ARRAY
30714: PUSH
30715: LD_VAR 0 5
30719: ARRAY
30720: PUSH
30721: LD_INT 1
30723: ARRAY
30724: PPUSH
30725: LD_EXP 114
30729: PUSH
30730: LD_VAR 0 6
30734: ARRAY
30735: PUSH
30736: LD_VAR 0 5
30740: ARRAY
30741: PUSH
30742: LD_INT 2
30744: ARRAY
30745: PPUSH
30746: LD_VAR 0 1
30750: PPUSH
30751: CALL_OW 255
30755: PPUSH
30756: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30760: LD_ADDR_EXP 114
30764: PUSH
30765: LD_EXP 114
30769: PPUSH
30770: LD_VAR 0 6
30774: PPUSH
30775: LD_EXP 114
30779: PUSH
30780: LD_VAR 0 6
30784: ARRAY
30785: PPUSH
30786: LD_VAR 0 5
30790: PPUSH
30791: CALL_OW 3
30795: PPUSH
30796: CALL_OW 1
30800: ST_TO_ADDR
// exit ;
30801: POP
30802: POP
30803: GO 30996
// end ; end ;
30805: GO 30645
30807: POP
30808: POP
// for i := minerMinesList [ index ] downto 1 do
30809: LD_ADDR_VAR 0 5
30813: PUSH
30814: DOUBLE
30815: LD_EXP 114
30819: PUSH
30820: LD_VAR 0 6
30824: ARRAY
30825: INC
30826: ST_TO_ADDR
30827: LD_INT 1
30829: PUSH
30830: FOR_DOWNTO
30831: IFFALSE 30994
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30833: LD_EXP 114
30837: PUSH
30838: LD_VAR 0 6
30842: ARRAY
30843: PUSH
30844: LD_VAR 0 5
30848: ARRAY
30849: PUSH
30850: LD_INT 1
30852: ARRAY
30853: PPUSH
30854: LD_EXP 114
30858: PUSH
30859: LD_VAR 0 6
30863: ARRAY
30864: PUSH
30865: LD_VAR 0 5
30869: ARRAY
30870: PUSH
30871: LD_INT 2
30873: ARRAY
30874: PPUSH
30875: LD_VAR 0 2
30879: PPUSH
30880: LD_VAR 0 3
30884: PPUSH
30885: CALL_OW 298
30889: PUSH
30890: LD_INT 6
30892: LESS
30893: IFFALSE 30992
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30895: LD_EXP 114
30899: PUSH
30900: LD_VAR 0 6
30904: ARRAY
30905: PUSH
30906: LD_VAR 0 5
30910: ARRAY
30911: PUSH
30912: LD_INT 1
30914: ARRAY
30915: PPUSH
30916: LD_EXP 114
30920: PUSH
30921: LD_VAR 0 6
30925: ARRAY
30926: PUSH
30927: LD_VAR 0 5
30931: ARRAY
30932: PUSH
30933: LD_INT 2
30935: ARRAY
30936: PPUSH
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 255
30946: PPUSH
30947: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30951: LD_ADDR_EXP 114
30955: PUSH
30956: LD_EXP 114
30960: PPUSH
30961: LD_VAR 0 6
30965: PPUSH
30966: LD_EXP 114
30970: PUSH
30971: LD_VAR 0 6
30975: ARRAY
30976: PPUSH
30977: LD_VAR 0 5
30981: PPUSH
30982: CALL_OW 3
30986: PPUSH
30987: CALL_OW 1
30991: ST_TO_ADDR
// end ; end ;
30992: GO 30830
30994: POP
30995: POP
// end ;
30996: LD_VAR 0 4
31000: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31001: LD_INT 0
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
31007: PPUSH
31008: PPUSH
31009: PPUSH
31010: PPUSH
31011: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31012: LD_VAR 0 1
31016: PPUSH
31017: CALL_OW 264
31021: PUSH
31022: LD_INT 81
31024: EQUAL
31025: NOT
31026: PUSH
31027: LD_VAR 0 1
31031: PUSH
31032: LD_EXP 113
31036: IN
31037: NOT
31038: OR
31039: IFFALSE 31043
// exit ;
31041: GO 31365
// index := GetElementIndex ( minersList , unit ) ;
31043: LD_ADDR_VAR 0 6
31047: PUSH
31048: LD_EXP 113
31052: PPUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL 36637 0 2
31062: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31063: LD_ADDR_VAR 0 8
31067: PUSH
31068: LD_EXP 115
31072: PUSH
31073: LD_EXP 114
31077: PUSH
31078: LD_VAR 0 6
31082: ARRAY
31083: MINUS
31084: ST_TO_ADDR
// if not minesFreeAmount then
31085: LD_VAR 0 8
31089: NOT
31090: IFFALSE 31094
// exit ;
31092: GO 31365
// tmp := [ ] ;
31094: LD_ADDR_VAR 0 7
31098: PUSH
31099: EMPTY
31100: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31101: LD_ADDR_VAR 0 5
31105: PUSH
31106: DOUBLE
31107: LD_INT 1
31109: DEC
31110: ST_TO_ADDR
31111: LD_VAR 0 8
31115: PUSH
31116: FOR_TO
31117: IFFALSE 31312
// begin _d := rand ( 0 , 5 ) ;
31119: LD_ADDR_VAR 0 11
31123: PUSH
31124: LD_INT 0
31126: PPUSH
31127: LD_INT 5
31129: PPUSH
31130: CALL_OW 12
31134: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31135: LD_ADDR_VAR 0 12
31139: PUSH
31140: LD_INT 2
31142: PPUSH
31143: LD_INT 6
31145: PPUSH
31146: CALL_OW 12
31150: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31151: LD_ADDR_VAR 0 9
31155: PUSH
31156: LD_VAR 0 2
31160: PPUSH
31161: LD_VAR 0 11
31165: PPUSH
31166: LD_VAR 0 12
31170: PPUSH
31171: CALL_OW 272
31175: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31176: LD_ADDR_VAR 0 10
31180: PUSH
31181: LD_VAR 0 3
31185: PPUSH
31186: LD_VAR 0 11
31190: PPUSH
31191: LD_VAR 0 12
31195: PPUSH
31196: CALL_OW 273
31200: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31201: LD_VAR 0 9
31205: PPUSH
31206: LD_VAR 0 10
31210: PPUSH
31211: CALL_OW 488
31215: PUSH
31216: LD_VAR 0 9
31220: PUSH
31221: LD_VAR 0 10
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_VAR 0 7
31234: IN
31235: NOT
31236: AND
31237: PUSH
31238: LD_VAR 0 9
31242: PPUSH
31243: LD_VAR 0 10
31247: PPUSH
31248: CALL_OW 458
31252: NOT
31253: AND
31254: IFFALSE 31296
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31256: LD_ADDR_VAR 0 7
31260: PUSH
31261: LD_VAR 0 7
31265: PPUSH
31266: LD_VAR 0 7
31270: PUSH
31271: LD_INT 1
31273: PLUS
31274: PPUSH
31275: LD_VAR 0 9
31279: PUSH
31280: LD_VAR 0 10
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PPUSH
31289: CALL_OW 1
31293: ST_TO_ADDR
31294: GO 31310
// i := i - 1 ;
31296: LD_ADDR_VAR 0 5
31300: PUSH
31301: LD_VAR 0 5
31305: PUSH
31306: LD_INT 1
31308: MINUS
31309: ST_TO_ADDR
// end ;
31310: GO 31116
31312: POP
31313: POP
// for i in tmp do
31314: LD_ADDR_VAR 0 5
31318: PUSH
31319: LD_VAR 0 7
31323: PUSH
31324: FOR_IN
31325: IFFALSE 31363
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31327: LD_VAR 0 1
31331: PPUSH
31332: LD_VAR 0 5
31336: PUSH
31337: LD_INT 1
31339: ARRAY
31340: PPUSH
31341: LD_VAR 0 5
31345: PUSH
31346: LD_INT 2
31348: ARRAY
31349: PPUSH
31350: CALL 30309 0 3
31354: NOT
31355: IFFALSE 31361
// exit ;
31357: POP
31358: POP
31359: GO 31365
31361: GO 31324
31363: POP
31364: POP
// end ;
31365: LD_VAR 0 4
31369: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
31370: LD_INT 0
31372: PPUSH
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
31377: PPUSH
31378: PPUSH
31379: PPUSH
31380: PPUSH
// if GetClass ( unit ) <> class_sniper then
31381: LD_VAR 0 1
31385: PPUSH
31386: CALL_OW 257
31390: PUSH
31391: LD_INT 5
31393: NONEQUAL
31394: IFFALSE 31398
// exit ;
31396: GO 31864
// dist := 8 ;
31398: LD_ADDR_VAR 0 5
31402: PUSH
31403: LD_INT 8
31405: ST_TO_ADDR
// viewRange := 12 ;
31406: LD_ADDR_VAR 0 8
31410: PUSH
31411: LD_INT 12
31413: ST_TO_ADDR
// side := GetSide ( unit ) ;
31414: LD_ADDR_VAR 0 6
31418: PUSH
31419: LD_VAR 0 1
31423: PPUSH
31424: CALL_OW 255
31428: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31429: LD_INT 61
31431: PPUSH
31432: LD_VAR 0 6
31436: PPUSH
31437: CALL_OW 321
31441: PUSH
31442: LD_INT 2
31444: EQUAL
31445: IFFALSE 31455
// viewRange := 16 ;
31447: LD_ADDR_VAR 0 8
31451: PUSH
31452: LD_INT 16
31454: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31455: LD_VAR 0 1
31459: PPUSH
31460: LD_VAR 0 2
31464: PPUSH
31465: LD_VAR 0 3
31469: PPUSH
31470: CALL_OW 297
31474: PUSH
31475: LD_VAR 0 5
31479: GREATER
31480: IFFALSE 31559
// begin ComMoveXY ( unit , x , y ) ;
31482: LD_VAR 0 1
31486: PPUSH
31487: LD_VAR 0 2
31491: PPUSH
31492: LD_VAR 0 3
31496: PPUSH
31497: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31501: LD_INT 35
31503: PPUSH
31504: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31508: LD_VAR 0 1
31512: PPUSH
31513: LD_VAR 0 2
31517: PPUSH
31518: LD_VAR 0 3
31522: PPUSH
31523: CALL 68398 0 3
31527: NOT
31528: IFFALSE 31532
// exit ;
31530: GO 31864
// until GetDistUnitXY ( unit , x , y ) < dist ;
31532: LD_VAR 0 1
31536: PPUSH
31537: LD_VAR 0 2
31541: PPUSH
31542: LD_VAR 0 3
31546: PPUSH
31547: CALL_OW 297
31551: PUSH
31552: LD_VAR 0 5
31556: LESS
31557: IFFALSE 31501
// end ; ComTurnXY ( unit , x , y ) ;
31559: LD_VAR 0 1
31563: PPUSH
31564: LD_VAR 0 2
31568: PPUSH
31569: LD_VAR 0 3
31573: PPUSH
31574: CALL_OW 118
// repeat if Multiplayer then
31578: LD_OWVAR 4
31582: IFFALSE 31593
// wait ( 35 ) else
31584: LD_INT 35
31586: PPUSH
31587: CALL_OW 67
31591: GO 31600
// wait ( 5 ) ;
31593: LD_INT 5
31595: PPUSH
31596: CALL_OW 67
// _d := GetDir ( unit ) ;
31600: LD_ADDR_VAR 0 11
31604: PUSH
31605: LD_VAR 0 1
31609: PPUSH
31610: CALL_OW 254
31614: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
31615: LD_ADDR_VAR 0 7
31619: PUSH
31620: LD_VAR 0 1
31624: PPUSH
31625: CALL_OW 250
31629: PPUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 251
31639: PPUSH
31640: LD_VAR 0 2
31644: PPUSH
31645: LD_VAR 0 3
31649: PPUSH
31650: CALL 71006 0 4
31654: ST_TO_ADDR
// until dir = _d ;
31655: LD_VAR 0 7
31659: PUSH
31660: LD_VAR 0 11
31664: EQUAL
31665: IFFALSE 31578
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
31667: LD_ADDR_VAR 0 9
31671: PUSH
31672: LD_VAR 0 1
31676: PPUSH
31677: CALL_OW 250
31681: PPUSH
31682: LD_VAR 0 7
31686: PPUSH
31687: LD_VAR 0 5
31691: PPUSH
31692: CALL_OW 272
31696: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
31697: LD_ADDR_VAR 0 10
31701: PUSH
31702: LD_VAR 0 1
31706: PPUSH
31707: CALL_OW 251
31711: PPUSH
31712: LD_VAR 0 7
31716: PPUSH
31717: LD_VAR 0 5
31721: PPUSH
31722: CALL_OW 273
31726: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31727: LD_VAR 0 9
31731: PPUSH
31732: LD_VAR 0 10
31736: PPUSH
31737: CALL_OW 488
31741: NOT
31742: IFFALSE 31746
// exit ;
31744: GO 31864
// ComAnimCustom ( unit , 1 ) ;
31746: LD_VAR 0 1
31750: PPUSH
31751: LD_INT 1
31753: PPUSH
31754: CALL_OW 592
// p := 0 ;
31758: LD_ADDR_VAR 0 12
31762: PUSH
31763: LD_INT 0
31765: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31766: LD_VAR 0 9
31770: PPUSH
31771: LD_VAR 0 10
31775: PPUSH
31776: LD_VAR 0 6
31780: PPUSH
31781: LD_VAR 0 8
31785: PPUSH
31786: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
31790: LD_INT 35
31792: PPUSH
31793: CALL_OW 67
// p := Inc ( p ) ;
31797: LD_ADDR_VAR 0 12
31801: PUSH
31802: LD_VAR 0 12
31806: PPUSH
31807: CALL 70962 0 1
31811: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
31812: LD_VAR 0 12
31816: PUSH
31817: LD_INT 3
31819: EQUAL
31820: PUSH
31821: LD_VAR 0 1
31825: PPUSH
31826: CALL_OW 302
31830: NOT
31831: OR
31832: PUSH
31833: LD_VAR 0 1
31837: PPUSH
31838: CALL_OW 301
31842: OR
31843: IFFALSE 31790
// RemoveSeeing ( _x , _y , side ) ;
31845: LD_VAR 0 9
31849: PPUSH
31850: LD_VAR 0 10
31854: PPUSH
31855: LD_VAR 0 6
31859: PPUSH
31860: CALL_OW 331
// end ; end_of_file
31864: LD_VAR 0 4
31868: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31869: LD_INT 0
31871: PPUSH
31872: PPUSH
// if exist_mode then
31873: LD_VAR 0 2
31877: IFFALSE 31923
// begin unit := CreateCharacter ( prefix & ident ) ;
31879: LD_ADDR_VAR 0 5
31883: PUSH
31884: LD_VAR 0 3
31888: PUSH
31889: LD_VAR 0 1
31893: STR
31894: PPUSH
31895: CALL_OW 34
31899: ST_TO_ADDR
// if unit then
31900: LD_VAR 0 5
31904: IFFALSE 31921
// DeleteCharacters ( prefix & ident ) ;
31906: LD_VAR 0 3
31910: PUSH
31911: LD_VAR 0 1
31915: STR
31916: PPUSH
31917: CALL_OW 40
// end else
31921: GO 31938
// unit := NewCharacter ( ident ) ;
31923: LD_ADDR_VAR 0 5
31927: PUSH
31928: LD_VAR 0 1
31932: PPUSH
31933: CALL_OW 25
31937: ST_TO_ADDR
// result := unit ;
31938: LD_ADDR_VAR 0 4
31942: PUSH
31943: LD_VAR 0 5
31947: ST_TO_ADDR
// end ;
31948: LD_VAR 0 4
31952: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31953: LD_INT 0
31955: PPUSH
31956: PPUSH
// if not side or not nation then
31957: LD_VAR 0 1
31961: NOT
31962: PUSH
31963: LD_VAR 0 2
31967: NOT
31968: OR
31969: IFFALSE 31973
// exit ;
31971: GO 32741
// case nation of nation_american :
31973: LD_VAR 0 2
31977: PUSH
31978: LD_INT 1
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 32200
31986: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31987: LD_ADDR_VAR 0 4
31991: PUSH
31992: LD_INT 35
31994: PUSH
31995: LD_INT 45
31997: PUSH
31998: LD_INT 46
32000: PUSH
32001: LD_INT 47
32003: PUSH
32004: LD_INT 82
32006: PUSH
32007: LD_INT 83
32009: PUSH
32010: LD_INT 84
32012: PUSH
32013: LD_INT 85
32015: PUSH
32016: LD_INT 86
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: LD_INT 6
32027: PUSH
32028: LD_INT 15
32030: PUSH
32031: LD_INT 16
32033: PUSH
32034: LD_INT 7
32036: PUSH
32037: LD_INT 12
32039: PUSH
32040: LD_INT 13
32042: PUSH
32043: LD_INT 10
32045: PUSH
32046: LD_INT 14
32048: PUSH
32049: LD_INT 20
32051: PUSH
32052: LD_INT 21
32054: PUSH
32055: LD_INT 22
32057: PUSH
32058: LD_INT 25
32060: PUSH
32061: LD_INT 32
32063: PUSH
32064: LD_INT 27
32066: PUSH
32067: LD_INT 36
32069: PUSH
32070: LD_INT 69
32072: PUSH
32073: LD_INT 39
32075: PUSH
32076: LD_INT 34
32078: PUSH
32079: LD_INT 40
32081: PUSH
32082: LD_INT 48
32084: PUSH
32085: LD_INT 49
32087: PUSH
32088: LD_INT 50
32090: PUSH
32091: LD_INT 51
32093: PUSH
32094: LD_INT 52
32096: PUSH
32097: LD_INT 53
32099: PUSH
32100: LD_INT 54
32102: PUSH
32103: LD_INT 55
32105: PUSH
32106: LD_INT 56
32108: PUSH
32109: LD_INT 57
32111: PUSH
32112: LD_INT 58
32114: PUSH
32115: LD_INT 59
32117: PUSH
32118: LD_INT 60
32120: PUSH
32121: LD_INT 61
32123: PUSH
32124: LD_INT 62
32126: PUSH
32127: LD_INT 80
32129: PUSH
32130: LD_INT 82
32132: PUSH
32133: LD_INT 83
32135: PUSH
32136: LD_INT 84
32138: PUSH
32139: LD_INT 85
32141: PUSH
32142: LD_INT 86
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: ST_TO_ADDR
32198: GO 32665
32200: LD_INT 2
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32208
32206: GO 32434
32208: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32209: LD_ADDR_VAR 0 4
32213: PUSH
32214: LD_INT 35
32216: PUSH
32217: LD_INT 45
32219: PUSH
32220: LD_INT 46
32222: PUSH
32223: LD_INT 47
32225: PUSH
32226: LD_INT 82
32228: PUSH
32229: LD_INT 83
32231: PUSH
32232: LD_INT 84
32234: PUSH
32235: LD_INT 85
32237: PUSH
32238: LD_INT 87
32240: PUSH
32241: LD_INT 70
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 11
32249: PUSH
32250: LD_INT 3
32252: PUSH
32253: LD_INT 4
32255: PUSH
32256: LD_INT 5
32258: PUSH
32259: LD_INT 6
32261: PUSH
32262: LD_INT 15
32264: PUSH
32265: LD_INT 18
32267: PUSH
32268: LD_INT 7
32270: PUSH
32271: LD_INT 17
32273: PUSH
32274: LD_INT 8
32276: PUSH
32277: LD_INT 20
32279: PUSH
32280: LD_INT 21
32282: PUSH
32283: LD_INT 22
32285: PUSH
32286: LD_INT 72
32288: PUSH
32289: LD_INT 26
32291: PUSH
32292: LD_INT 69
32294: PUSH
32295: LD_INT 39
32297: PUSH
32298: LD_INT 40
32300: PUSH
32301: LD_INT 41
32303: PUSH
32304: LD_INT 42
32306: PUSH
32307: LD_INT 43
32309: PUSH
32310: LD_INT 48
32312: PUSH
32313: LD_INT 49
32315: PUSH
32316: LD_INT 50
32318: PUSH
32319: LD_INT 51
32321: PUSH
32322: LD_INT 52
32324: PUSH
32325: LD_INT 53
32327: PUSH
32328: LD_INT 54
32330: PUSH
32331: LD_INT 55
32333: PUSH
32334: LD_INT 56
32336: PUSH
32337: LD_INT 60
32339: PUSH
32340: LD_INT 61
32342: PUSH
32343: LD_INT 62
32345: PUSH
32346: LD_INT 66
32348: PUSH
32349: LD_INT 67
32351: PUSH
32352: LD_INT 68
32354: PUSH
32355: LD_INT 81
32357: PUSH
32358: LD_INT 82
32360: PUSH
32361: LD_INT 83
32363: PUSH
32364: LD_INT 84
32366: PUSH
32367: LD_INT 85
32369: PUSH
32370: LD_INT 87
32372: PUSH
32373: LD_INT 88
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: ST_TO_ADDR
32432: GO 32665
32434: LD_INT 3
32436: DOUBLE
32437: EQUAL
32438: IFTRUE 32442
32440: GO 32664
32442: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32443: LD_ADDR_VAR 0 4
32447: PUSH
32448: LD_INT 46
32450: PUSH
32451: LD_INT 47
32453: PUSH
32454: LD_INT 1
32456: PUSH
32457: LD_INT 2
32459: PUSH
32460: LD_INT 82
32462: PUSH
32463: LD_INT 83
32465: PUSH
32466: LD_INT 84
32468: PUSH
32469: LD_INT 85
32471: PUSH
32472: LD_INT 86
32474: PUSH
32475: LD_INT 11
32477: PUSH
32478: LD_INT 9
32480: PUSH
32481: LD_INT 20
32483: PUSH
32484: LD_INT 19
32486: PUSH
32487: LD_INT 21
32489: PUSH
32490: LD_INT 24
32492: PUSH
32493: LD_INT 22
32495: PUSH
32496: LD_INT 25
32498: PUSH
32499: LD_INT 28
32501: PUSH
32502: LD_INT 29
32504: PUSH
32505: LD_INT 30
32507: PUSH
32508: LD_INT 31
32510: PUSH
32511: LD_INT 37
32513: PUSH
32514: LD_INT 38
32516: PUSH
32517: LD_INT 32
32519: PUSH
32520: LD_INT 27
32522: PUSH
32523: LD_INT 33
32525: PUSH
32526: LD_INT 69
32528: PUSH
32529: LD_INT 39
32531: PUSH
32532: LD_INT 34
32534: PUSH
32535: LD_INT 40
32537: PUSH
32538: LD_INT 71
32540: PUSH
32541: LD_INT 23
32543: PUSH
32544: LD_INT 44
32546: PUSH
32547: LD_INT 48
32549: PUSH
32550: LD_INT 49
32552: PUSH
32553: LD_INT 50
32555: PUSH
32556: LD_INT 51
32558: PUSH
32559: LD_INT 52
32561: PUSH
32562: LD_INT 53
32564: PUSH
32565: LD_INT 54
32567: PUSH
32568: LD_INT 55
32570: PUSH
32571: LD_INT 56
32573: PUSH
32574: LD_INT 57
32576: PUSH
32577: LD_INT 58
32579: PUSH
32580: LD_INT 59
32582: PUSH
32583: LD_INT 63
32585: PUSH
32586: LD_INT 64
32588: PUSH
32589: LD_INT 65
32591: PUSH
32592: LD_INT 82
32594: PUSH
32595: LD_INT 83
32597: PUSH
32598: LD_INT 84
32600: PUSH
32601: LD_INT 85
32603: PUSH
32604: LD_INT 86
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: ST_TO_ADDR
32662: GO 32665
32664: POP
// if state > - 1 and state < 3 then
32665: LD_VAR 0 3
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: GREATER
32674: PUSH
32675: LD_VAR 0 3
32679: PUSH
32680: LD_INT 3
32682: LESS
32683: AND
32684: IFFALSE 32741
// for i in result do
32686: LD_ADDR_VAR 0 5
32690: PUSH
32691: LD_VAR 0 4
32695: PUSH
32696: FOR_IN
32697: IFFALSE 32739
// if GetTech ( i , side ) <> state then
32699: LD_VAR 0 5
32703: PPUSH
32704: LD_VAR 0 1
32708: PPUSH
32709: CALL_OW 321
32713: PUSH
32714: LD_VAR 0 3
32718: NONEQUAL
32719: IFFALSE 32737
// result := result diff i ;
32721: LD_ADDR_VAR 0 4
32725: PUSH
32726: LD_VAR 0 4
32730: PUSH
32731: LD_VAR 0 5
32735: DIFF
32736: ST_TO_ADDR
32737: GO 32696
32739: POP
32740: POP
// end ;
32741: LD_VAR 0 4
32745: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32746: LD_INT 0
32748: PPUSH
32749: PPUSH
32750: PPUSH
// result := true ;
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: LD_INT 1
32758: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32759: LD_ADDR_VAR 0 5
32763: PUSH
32764: LD_VAR 0 2
32768: PPUSH
32769: CALL_OW 480
32773: ST_TO_ADDR
// if not tmp then
32774: LD_VAR 0 5
32778: NOT
32779: IFFALSE 32783
// exit ;
32781: GO 32832
// for i in tmp do
32783: LD_ADDR_VAR 0 4
32787: PUSH
32788: LD_VAR 0 5
32792: PUSH
32793: FOR_IN
32794: IFFALSE 32830
// if GetTech ( i , side ) <> state_researched then
32796: LD_VAR 0 4
32800: PPUSH
32801: LD_VAR 0 1
32805: PPUSH
32806: CALL_OW 321
32810: PUSH
32811: LD_INT 2
32813: NONEQUAL
32814: IFFALSE 32828
// begin result := false ;
32816: LD_ADDR_VAR 0 3
32820: PUSH
32821: LD_INT 0
32823: ST_TO_ADDR
// exit ;
32824: POP
32825: POP
32826: GO 32832
// end ;
32828: GO 32793
32830: POP
32831: POP
// end ;
32832: LD_VAR 0 3
32836: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32837: LD_INT 0
32839: PPUSH
32840: PPUSH
32841: PPUSH
32842: PPUSH
32843: PPUSH
32844: PPUSH
32845: PPUSH
32846: PPUSH
32847: PPUSH
32848: PPUSH
32849: PPUSH
32850: PPUSH
32851: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32852: LD_VAR 0 1
32856: NOT
32857: PUSH
32858: LD_VAR 0 1
32862: PPUSH
32863: CALL_OW 257
32867: PUSH
32868: LD_INT 9
32870: NONEQUAL
32871: OR
32872: IFFALSE 32876
// exit ;
32874: GO 33449
// side := GetSide ( unit ) ;
32876: LD_ADDR_VAR 0 9
32880: PUSH
32881: LD_VAR 0 1
32885: PPUSH
32886: CALL_OW 255
32890: ST_TO_ADDR
// tech_space := tech_spacanom ;
32891: LD_ADDR_VAR 0 12
32895: PUSH
32896: LD_INT 29
32898: ST_TO_ADDR
// tech_time := tech_taurad ;
32899: LD_ADDR_VAR 0 13
32903: PUSH
32904: LD_INT 28
32906: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32907: LD_ADDR_VAR 0 11
32911: PUSH
32912: LD_VAR 0 1
32916: PPUSH
32917: CALL_OW 310
32921: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32922: LD_VAR 0 11
32926: PPUSH
32927: CALL_OW 247
32931: PUSH
32932: LD_INT 2
32934: EQUAL
32935: IFFALSE 32939
// exit ;
32937: GO 33449
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32939: LD_ADDR_VAR 0 8
32943: PUSH
32944: LD_INT 81
32946: PUSH
32947: LD_VAR 0 9
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: LD_INT 21
32961: PUSH
32962: LD_INT 3
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PPUSH
32977: CALL_OW 69
32981: ST_TO_ADDR
// if not tmp then
32982: LD_VAR 0 8
32986: NOT
32987: IFFALSE 32991
// exit ;
32989: GO 33449
// if in_unit then
32991: LD_VAR 0 11
32995: IFFALSE 33019
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32997: LD_ADDR_VAR 0 10
33001: PUSH
33002: LD_VAR 0 8
33006: PPUSH
33007: LD_VAR 0 11
33011: PPUSH
33012: CALL_OW 74
33016: ST_TO_ADDR
33017: GO 33039
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33019: LD_ADDR_VAR 0 10
33023: PUSH
33024: LD_VAR 0 8
33028: PPUSH
33029: LD_VAR 0 1
33033: PPUSH
33034: CALL_OW 74
33038: ST_TO_ADDR
// if not enemy then
33039: LD_VAR 0 10
33043: NOT
33044: IFFALSE 33048
// exit ;
33046: GO 33449
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33048: LD_VAR 0 11
33052: PUSH
33053: LD_VAR 0 11
33057: PPUSH
33058: LD_VAR 0 10
33062: PPUSH
33063: CALL_OW 296
33067: PUSH
33068: LD_INT 13
33070: GREATER
33071: AND
33072: PUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: LD_VAR 0 10
33082: PPUSH
33083: CALL_OW 296
33087: PUSH
33088: LD_INT 12
33090: GREATER
33091: OR
33092: IFFALSE 33096
// exit ;
33094: GO 33449
// missile := [ 1 ] ;
33096: LD_ADDR_VAR 0 14
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33107: LD_VAR 0 9
33111: PPUSH
33112: LD_VAR 0 12
33116: PPUSH
33117: CALL_OW 325
33121: IFFALSE 33150
// missile := Replace ( missile , missile + 1 , 2 ) ;
33123: LD_ADDR_VAR 0 14
33127: PUSH
33128: LD_VAR 0 14
33132: PPUSH
33133: LD_VAR 0 14
33137: PUSH
33138: LD_INT 1
33140: PLUS
33141: PPUSH
33142: LD_INT 2
33144: PPUSH
33145: CALL_OW 1
33149: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33150: LD_VAR 0 9
33154: PPUSH
33155: LD_VAR 0 13
33159: PPUSH
33160: CALL_OW 325
33164: PUSH
33165: LD_VAR 0 10
33169: PPUSH
33170: CALL_OW 255
33174: PPUSH
33175: LD_VAR 0 13
33179: PPUSH
33180: CALL_OW 325
33184: NOT
33185: AND
33186: IFFALSE 33215
// missile := Replace ( missile , missile + 1 , 3 ) ;
33188: LD_ADDR_VAR 0 14
33192: PUSH
33193: LD_VAR 0 14
33197: PPUSH
33198: LD_VAR 0 14
33202: PUSH
33203: LD_INT 1
33205: PLUS
33206: PPUSH
33207: LD_INT 3
33209: PPUSH
33210: CALL_OW 1
33214: ST_TO_ADDR
// if missile < 2 then
33215: LD_VAR 0 14
33219: PUSH
33220: LD_INT 2
33222: LESS
33223: IFFALSE 33227
// exit ;
33225: GO 33449
// x := GetX ( enemy ) ;
33227: LD_ADDR_VAR 0 4
33231: PUSH
33232: LD_VAR 0 10
33236: PPUSH
33237: CALL_OW 250
33241: ST_TO_ADDR
// y := GetY ( enemy ) ;
33242: LD_ADDR_VAR 0 5
33246: PUSH
33247: LD_VAR 0 10
33251: PPUSH
33252: CALL_OW 251
33256: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33257: LD_ADDR_VAR 0 6
33261: PUSH
33262: LD_VAR 0 4
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PPUSH
33271: LD_INT 1
33273: PPUSH
33274: CALL_OW 12
33278: PLUS
33279: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33280: LD_ADDR_VAR 0 7
33284: PUSH
33285: LD_VAR 0 5
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PPUSH
33294: LD_INT 1
33296: PPUSH
33297: CALL_OW 12
33301: PLUS
33302: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33303: LD_VAR 0 6
33307: PPUSH
33308: LD_VAR 0 7
33312: PPUSH
33313: CALL_OW 488
33317: NOT
33318: IFFALSE 33340
// begin _x := x ;
33320: LD_ADDR_VAR 0 6
33324: PUSH
33325: LD_VAR 0 4
33329: ST_TO_ADDR
// _y := y ;
33330: LD_ADDR_VAR 0 7
33334: PUSH
33335: LD_VAR 0 5
33339: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33340: LD_ADDR_VAR 0 3
33344: PUSH
33345: LD_INT 1
33347: PPUSH
33348: LD_VAR 0 14
33352: PPUSH
33353: CALL_OW 12
33357: ST_TO_ADDR
// case i of 1 :
33358: LD_VAR 0 3
33362: PUSH
33363: LD_INT 1
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33371
33369: GO 33388
33371: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33372: LD_VAR 0 1
33376: PPUSH
33377: LD_VAR 0 10
33381: PPUSH
33382: CALL_OW 115
33386: GO 33449
33388: LD_INT 2
33390: DOUBLE
33391: EQUAL
33392: IFTRUE 33396
33394: GO 33418
33396: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33397: LD_VAR 0 1
33401: PPUSH
33402: LD_VAR 0 6
33406: PPUSH
33407: LD_VAR 0 7
33411: PPUSH
33412: CALL_OW 153
33416: GO 33449
33418: LD_INT 3
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33448
33426: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33427: LD_VAR 0 1
33431: PPUSH
33432: LD_VAR 0 6
33436: PPUSH
33437: LD_VAR 0 7
33441: PPUSH
33442: CALL_OW 154
33446: GO 33449
33448: POP
// end ;
33449: LD_VAR 0 2
33453: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33454: LD_INT 0
33456: PPUSH
33457: PPUSH
33458: PPUSH
33459: PPUSH
33460: PPUSH
33461: PPUSH
// if not unit or not building then
33462: LD_VAR 0 1
33466: NOT
33467: PUSH
33468: LD_VAR 0 2
33472: NOT
33473: OR
33474: IFFALSE 33478
// exit ;
33476: GO 33636
// x := GetX ( building ) ;
33478: LD_ADDR_VAR 0 5
33482: PUSH
33483: LD_VAR 0 2
33487: PPUSH
33488: CALL_OW 250
33492: ST_TO_ADDR
// y := GetY ( building ) ;
33493: LD_ADDR_VAR 0 6
33497: PUSH
33498: LD_VAR 0 2
33502: PPUSH
33503: CALL_OW 251
33507: ST_TO_ADDR
// for i = 0 to 5 do
33508: LD_ADDR_VAR 0 4
33512: PUSH
33513: DOUBLE
33514: LD_INT 0
33516: DEC
33517: ST_TO_ADDR
33518: LD_INT 5
33520: PUSH
33521: FOR_TO
33522: IFFALSE 33634
// begin _x := ShiftX ( x , i , 3 ) ;
33524: LD_ADDR_VAR 0 7
33528: PUSH
33529: LD_VAR 0 5
33533: PPUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: LD_INT 3
33541: PPUSH
33542: CALL_OW 272
33546: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33547: LD_ADDR_VAR 0 8
33551: PUSH
33552: LD_VAR 0 6
33556: PPUSH
33557: LD_VAR 0 4
33561: PPUSH
33562: LD_INT 3
33564: PPUSH
33565: CALL_OW 273
33569: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33570: LD_VAR 0 7
33574: PPUSH
33575: LD_VAR 0 8
33579: PPUSH
33580: CALL_OW 488
33584: NOT
33585: IFFALSE 33589
// continue ;
33587: GO 33521
// if HexInfo ( _x , _y ) = 0 then
33589: LD_VAR 0 7
33593: PPUSH
33594: LD_VAR 0 8
33598: PPUSH
33599: CALL_OW 428
33603: PUSH
33604: LD_INT 0
33606: EQUAL
33607: IFFALSE 33632
// begin ComMoveXY ( unit , _x , _y ) ;
33609: LD_VAR 0 1
33613: PPUSH
33614: LD_VAR 0 7
33618: PPUSH
33619: LD_VAR 0 8
33623: PPUSH
33624: CALL_OW 111
// exit ;
33628: POP
33629: POP
33630: GO 33636
// end ; end ;
33632: GO 33521
33634: POP
33635: POP
// end ;
33636: LD_VAR 0 3
33640: RET
// export function ScanBase ( side , base_area ) ; begin
33641: LD_INT 0
33643: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33644: LD_ADDR_VAR 0 3
33648: PUSH
33649: LD_VAR 0 2
33653: PPUSH
33654: LD_INT 81
33656: PUSH
33657: LD_VAR 0 1
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PPUSH
33666: CALL_OW 70
33670: ST_TO_ADDR
// end ;
33671: LD_VAR 0 3
33675: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33676: LD_INT 0
33678: PPUSH
33679: PPUSH
33680: PPUSH
33681: PPUSH
// result := false ;
33682: LD_ADDR_VAR 0 2
33686: PUSH
33687: LD_INT 0
33689: ST_TO_ADDR
// side := GetSide ( unit ) ;
33690: LD_ADDR_VAR 0 3
33694: PUSH
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 255
33704: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33705: LD_ADDR_VAR 0 4
33709: PUSH
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 248
33719: ST_TO_ADDR
// case nat of 1 :
33720: LD_VAR 0 4
33724: PUSH
33725: LD_INT 1
33727: DOUBLE
33728: EQUAL
33729: IFTRUE 33733
33731: GO 33744
33733: POP
// tech := tech_lassight ; 2 :
33734: LD_ADDR_VAR 0 5
33738: PUSH
33739: LD_INT 12
33741: ST_TO_ADDR
33742: GO 33783
33744: LD_INT 2
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33763
33752: POP
// tech := tech_mortar ; 3 :
33753: LD_ADDR_VAR 0 5
33757: PUSH
33758: LD_INT 41
33760: ST_TO_ADDR
33761: GO 33783
33763: LD_INT 3
33765: DOUBLE
33766: EQUAL
33767: IFTRUE 33771
33769: GO 33782
33771: POP
// tech := tech_bazooka ; end ;
33772: LD_ADDR_VAR 0 5
33776: PUSH
33777: LD_INT 44
33779: ST_TO_ADDR
33780: GO 33783
33782: POP
// if Researched ( side , tech ) then
33783: LD_VAR 0 3
33787: PPUSH
33788: LD_VAR 0 5
33792: PPUSH
33793: CALL_OW 325
33797: IFFALSE 33824
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33799: LD_ADDR_VAR 0 2
33803: PUSH
33804: LD_INT 5
33806: PUSH
33807: LD_INT 8
33809: PUSH
33810: LD_INT 9
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: PUSH
33818: LD_VAR 0 4
33822: ARRAY
33823: ST_TO_ADDR
// end ;
33824: LD_VAR 0 2
33828: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33829: LD_INT 0
33831: PPUSH
33832: PPUSH
33833: PPUSH
// if not mines then
33834: LD_VAR 0 2
33838: NOT
33839: IFFALSE 33843
// exit ;
33841: GO 33987
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33843: LD_ADDR_VAR 0 5
33847: PUSH
33848: LD_INT 81
33850: PUSH
33851: LD_VAR 0 1
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: LD_INT 21
33865: PUSH
33866: LD_INT 3
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PPUSH
33881: CALL_OW 69
33885: ST_TO_ADDR
// for i in mines do
33886: LD_ADDR_VAR 0 4
33890: PUSH
33891: LD_VAR 0 2
33895: PUSH
33896: FOR_IN
33897: IFFALSE 33985
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33899: LD_VAR 0 4
33903: PUSH
33904: LD_INT 1
33906: ARRAY
33907: PPUSH
33908: LD_VAR 0 4
33912: PUSH
33913: LD_INT 2
33915: ARRAY
33916: PPUSH
33917: CALL_OW 458
33921: NOT
33922: IFFALSE 33926
// continue ;
33924: GO 33896
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33926: LD_VAR 0 4
33930: PUSH
33931: LD_INT 1
33933: ARRAY
33934: PPUSH
33935: LD_VAR 0 4
33939: PUSH
33940: LD_INT 2
33942: ARRAY
33943: PPUSH
33944: CALL_OW 428
33948: PUSH
33949: LD_VAR 0 5
33953: IN
33954: IFFALSE 33983
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33956: LD_VAR 0 4
33960: PUSH
33961: LD_INT 1
33963: ARRAY
33964: PPUSH
33965: LD_VAR 0 4
33969: PUSH
33970: LD_INT 2
33972: ARRAY
33973: PPUSH
33974: LD_VAR 0 1
33978: PPUSH
33979: CALL_OW 456
// end ;
33983: GO 33896
33985: POP
33986: POP
// end ;
33987: LD_VAR 0 3
33991: RET
// export function Count ( array ) ; begin
33992: LD_INT 0
33994: PPUSH
// result := array + 0 ;
33995: LD_ADDR_VAR 0 2
33999: PUSH
34000: LD_VAR 0 1
34004: PUSH
34005: LD_INT 0
34007: PLUS
34008: ST_TO_ADDR
// end ;
34009: LD_VAR 0 2
34013: RET
// export function IsEmpty ( building ) ; begin
34014: LD_INT 0
34016: PPUSH
// if not building then
34017: LD_VAR 0 1
34021: NOT
34022: IFFALSE 34026
// exit ;
34024: GO 34069
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34026: LD_ADDR_VAR 0 2
34030: PUSH
34031: LD_VAR 0 1
34035: PUSH
34036: LD_INT 22
34038: PUSH
34039: LD_VAR 0 1
34043: PPUSH
34044: CALL_OW 255
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 58
34055: PUSH
34056: EMPTY
34057: LIST
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PPUSH
34063: CALL_OW 69
34067: IN
34068: ST_TO_ADDR
// end ;
34069: LD_VAR 0 2
34073: RET
// export function IsNotFull ( building ) ; var places ; begin
34074: LD_INT 0
34076: PPUSH
34077: PPUSH
// if not building then
34078: LD_VAR 0 1
34082: NOT
34083: IFFALSE 34087
// exit ;
34085: GO 34115
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34087: LD_ADDR_VAR 0 2
34091: PUSH
34092: LD_VAR 0 1
34096: PPUSH
34097: LD_INT 3
34099: PUSH
34100: LD_INT 62
34102: PUSH
34103: EMPTY
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PPUSH
34110: CALL_OW 72
34114: ST_TO_ADDR
// end ;
34115: LD_VAR 0 2
34119: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34120: LD_INT 0
34122: PPUSH
34123: PPUSH
34124: PPUSH
34125: PPUSH
// tmp := [ ] ;
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: EMPTY
34132: ST_TO_ADDR
// list := [ ] ;
34133: LD_ADDR_VAR 0 5
34137: PUSH
34138: EMPTY
34139: ST_TO_ADDR
// for i = 16 to 25 do
34140: LD_ADDR_VAR 0 4
34144: PUSH
34145: DOUBLE
34146: LD_INT 16
34148: DEC
34149: ST_TO_ADDR
34150: LD_INT 25
34152: PUSH
34153: FOR_TO
34154: IFFALSE 34227
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34156: LD_ADDR_VAR 0 3
34160: PUSH
34161: LD_VAR 0 3
34165: PUSH
34166: LD_INT 22
34168: PUSH
34169: LD_VAR 0 1
34173: PPUSH
34174: CALL_OW 255
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 91
34185: PUSH
34186: LD_VAR 0 1
34190: PUSH
34191: LD_INT 6
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 30
34201: PUSH
34202: LD_VAR 0 4
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: PUSH
34216: EMPTY
34217: LIST
34218: PPUSH
34219: CALL_OW 69
34223: ADD
34224: ST_TO_ADDR
34225: GO 34153
34227: POP
34228: POP
// for i = 1 to tmp do
34229: LD_ADDR_VAR 0 4
34233: PUSH
34234: DOUBLE
34235: LD_INT 1
34237: DEC
34238: ST_TO_ADDR
34239: LD_VAR 0 3
34243: PUSH
34244: FOR_TO
34245: IFFALSE 34333
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34247: LD_ADDR_VAR 0 5
34251: PUSH
34252: LD_VAR 0 5
34256: PUSH
34257: LD_VAR 0 3
34261: PUSH
34262: LD_VAR 0 4
34266: ARRAY
34267: PPUSH
34268: CALL_OW 266
34272: PUSH
34273: LD_VAR 0 3
34277: PUSH
34278: LD_VAR 0 4
34282: ARRAY
34283: PPUSH
34284: CALL_OW 250
34288: PUSH
34289: LD_VAR 0 3
34293: PUSH
34294: LD_VAR 0 4
34298: ARRAY
34299: PPUSH
34300: CALL_OW 251
34304: PUSH
34305: LD_VAR 0 3
34309: PUSH
34310: LD_VAR 0 4
34314: ARRAY
34315: PPUSH
34316: CALL_OW 254
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: ADD
34330: ST_TO_ADDR
34331: GO 34244
34333: POP
34334: POP
// result := list ;
34335: LD_ADDR_VAR 0 2
34339: PUSH
34340: LD_VAR 0 5
34344: ST_TO_ADDR
// end ;
34345: LD_VAR 0 2
34349: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34350: LD_INT 0
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
// if not factory then
34359: LD_VAR 0 1
34363: NOT
34364: IFFALSE 34368
// exit ;
34366: GO 34961
// if control = control_apeman then
34368: LD_VAR 0 4
34372: PUSH
34373: LD_INT 5
34375: EQUAL
34376: IFFALSE 34485
// begin tmp := UnitsInside ( factory ) ;
34378: LD_ADDR_VAR 0 8
34382: PUSH
34383: LD_VAR 0 1
34387: PPUSH
34388: CALL_OW 313
34392: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34393: LD_VAR 0 8
34397: PPUSH
34398: LD_INT 25
34400: PUSH
34401: LD_INT 12
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PPUSH
34408: CALL_OW 72
34412: NOT
34413: IFFALSE 34423
// control := control_manual ;
34415: LD_ADDR_VAR 0 4
34419: PUSH
34420: LD_INT 1
34422: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34423: LD_ADDR_VAR 0 8
34427: PUSH
34428: LD_VAR 0 1
34432: PPUSH
34433: CALL 34120 0 1
34437: ST_TO_ADDR
// if tmp then
34438: LD_VAR 0 8
34442: IFFALSE 34485
// begin for i in tmp do
34444: LD_ADDR_VAR 0 7
34448: PUSH
34449: LD_VAR 0 8
34453: PUSH
34454: FOR_IN
34455: IFFALSE 34483
// if i [ 1 ] = b_ext_radio then
34457: LD_VAR 0 7
34461: PUSH
34462: LD_INT 1
34464: ARRAY
34465: PUSH
34466: LD_INT 22
34468: EQUAL
34469: IFFALSE 34481
// begin control := control_remote ;
34471: LD_ADDR_VAR 0 4
34475: PUSH
34476: LD_INT 2
34478: ST_TO_ADDR
// break ;
34479: GO 34483
// end ;
34481: GO 34454
34483: POP
34484: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34485: LD_VAR 0 1
34489: PPUSH
34490: LD_VAR 0 2
34494: PPUSH
34495: LD_VAR 0 3
34499: PPUSH
34500: LD_VAR 0 4
34504: PPUSH
34505: LD_VAR 0 5
34509: PPUSH
34510: CALL_OW 448
34514: IFFALSE 34549
// begin result := [ chassis , engine , control , weapon ] ;
34516: LD_ADDR_VAR 0 6
34520: PUSH
34521: LD_VAR 0 2
34525: PUSH
34526: LD_VAR 0 3
34530: PUSH
34531: LD_VAR 0 4
34535: PUSH
34536: LD_VAR 0 5
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: ST_TO_ADDR
// exit ;
34547: GO 34961
// end ; _chassis := AvailableChassisList ( factory ) ;
34549: LD_ADDR_VAR 0 9
34553: PUSH
34554: LD_VAR 0 1
34558: PPUSH
34559: CALL_OW 475
34563: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34564: LD_ADDR_VAR 0 11
34568: PUSH
34569: LD_VAR 0 1
34573: PPUSH
34574: CALL_OW 476
34578: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34579: LD_ADDR_VAR 0 12
34583: PUSH
34584: LD_VAR 0 1
34588: PPUSH
34589: CALL_OW 477
34593: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34594: LD_ADDR_VAR 0 10
34598: PUSH
34599: LD_VAR 0 1
34603: PPUSH
34604: CALL_OW 478
34608: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34609: LD_VAR 0 9
34613: NOT
34614: PUSH
34615: LD_VAR 0 11
34619: NOT
34620: OR
34621: PUSH
34622: LD_VAR 0 12
34626: NOT
34627: OR
34628: PUSH
34629: LD_VAR 0 10
34633: NOT
34634: OR
34635: IFFALSE 34670
// begin result := [ chassis , engine , control , weapon ] ;
34637: LD_ADDR_VAR 0 6
34641: PUSH
34642: LD_VAR 0 2
34646: PUSH
34647: LD_VAR 0 3
34651: PUSH
34652: LD_VAR 0 4
34656: PUSH
34657: LD_VAR 0 5
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
// exit ;
34668: GO 34961
// end ; if not chassis in _chassis then
34670: LD_VAR 0 2
34674: PUSH
34675: LD_VAR 0 9
34679: IN
34680: NOT
34681: IFFALSE 34707
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34683: LD_ADDR_VAR 0 2
34687: PUSH
34688: LD_VAR 0 9
34692: PUSH
34693: LD_INT 1
34695: PPUSH
34696: LD_VAR 0 9
34700: PPUSH
34701: CALL_OW 12
34705: ARRAY
34706: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34707: LD_VAR 0 2
34711: PPUSH
34712: LD_VAR 0 3
34716: PPUSH
34717: CALL 34966 0 2
34721: NOT
34722: IFFALSE 34781
// repeat engine := _engine [ 1 ] ;
34724: LD_ADDR_VAR 0 3
34728: PUSH
34729: LD_VAR 0 11
34733: PUSH
34734: LD_INT 1
34736: ARRAY
34737: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34738: LD_ADDR_VAR 0 11
34742: PUSH
34743: LD_VAR 0 11
34747: PPUSH
34748: LD_INT 1
34750: PPUSH
34751: CALL_OW 3
34755: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34756: LD_VAR 0 2
34760: PPUSH
34761: LD_VAR 0 3
34765: PPUSH
34766: CALL 34966 0 2
34770: PUSH
34771: LD_VAR 0 11
34775: PUSH
34776: EMPTY
34777: EQUAL
34778: OR
34779: IFFALSE 34724
// if not control in _control then
34781: LD_VAR 0 4
34785: PUSH
34786: LD_VAR 0 12
34790: IN
34791: NOT
34792: IFFALSE 34818
// control := _control [ rand ( 1 , _control ) ] ;
34794: LD_ADDR_VAR 0 4
34798: PUSH
34799: LD_VAR 0 12
34803: PUSH
34804: LD_INT 1
34806: PPUSH
34807: LD_VAR 0 12
34811: PPUSH
34812: CALL_OW 12
34816: ARRAY
34817: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34818: LD_VAR 0 2
34822: PPUSH
34823: LD_VAR 0 5
34827: PPUSH
34828: CALL 35186 0 2
34832: NOT
34833: IFFALSE 34892
// repeat weapon := _weapon [ 1 ] ;
34835: LD_ADDR_VAR 0 5
34839: PUSH
34840: LD_VAR 0 10
34844: PUSH
34845: LD_INT 1
34847: ARRAY
34848: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34849: LD_ADDR_VAR 0 10
34853: PUSH
34854: LD_VAR 0 10
34858: PPUSH
34859: LD_INT 1
34861: PPUSH
34862: CALL_OW 3
34866: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34867: LD_VAR 0 2
34871: PPUSH
34872: LD_VAR 0 5
34876: PPUSH
34877: CALL 35186 0 2
34881: PUSH
34882: LD_VAR 0 10
34886: PUSH
34887: EMPTY
34888: EQUAL
34889: OR
34890: IFFALSE 34835
// result := [ ] ;
34892: LD_ADDR_VAR 0 6
34896: PUSH
34897: EMPTY
34898: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34899: LD_VAR 0 1
34903: PPUSH
34904: LD_VAR 0 2
34908: PPUSH
34909: LD_VAR 0 3
34913: PPUSH
34914: LD_VAR 0 4
34918: PPUSH
34919: LD_VAR 0 5
34923: PPUSH
34924: CALL_OW 448
34928: IFFALSE 34961
// result := [ chassis , engine , control , weapon ] ;
34930: LD_ADDR_VAR 0 6
34934: PUSH
34935: LD_VAR 0 2
34939: PUSH
34940: LD_VAR 0 3
34944: PUSH
34945: LD_VAR 0 4
34949: PUSH
34950: LD_VAR 0 5
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: ST_TO_ADDR
// end ;
34961: LD_VAR 0 6
34965: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34966: LD_INT 0
34968: PPUSH
// if not chassis or not engine then
34969: LD_VAR 0 1
34973: NOT
34974: PUSH
34975: LD_VAR 0 2
34979: NOT
34980: OR
34981: IFFALSE 34985
// exit ;
34983: GO 35181
// case engine of engine_solar :
34985: LD_VAR 0 2
34989: PUSH
34990: LD_INT 2
34992: DOUBLE
34993: EQUAL
34994: IFTRUE 34998
34996: GO 35036
34998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34999: LD_ADDR_VAR 0 3
35003: PUSH
35004: LD_INT 11
35006: PUSH
35007: LD_INT 12
35009: PUSH
35010: LD_INT 13
35012: PUSH
35013: LD_INT 14
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: LD_INT 3
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: ST_TO_ADDR
35034: GO 35165
35036: LD_INT 1
35038: DOUBLE
35039: EQUAL
35040: IFTRUE 35044
35042: GO 35106
35044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35045: LD_ADDR_VAR 0 3
35049: PUSH
35050: LD_INT 11
35052: PUSH
35053: LD_INT 12
35055: PUSH
35056: LD_INT 13
35058: PUSH
35059: LD_INT 14
35061: PUSH
35062: LD_INT 1
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: LD_INT 3
35070: PUSH
35071: LD_INT 4
35073: PUSH
35074: LD_INT 5
35076: PUSH
35077: LD_INT 21
35079: PUSH
35080: LD_INT 23
35082: PUSH
35083: LD_INT 22
35085: PUSH
35086: LD_INT 24
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: ST_TO_ADDR
35104: GO 35165
35106: LD_INT 3
35108: DOUBLE
35109: EQUAL
35110: IFTRUE 35114
35112: GO 35164
35114: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35115: LD_ADDR_VAR 0 3
35119: PUSH
35120: LD_INT 13
35122: PUSH
35123: LD_INT 14
35125: PUSH
35126: LD_INT 2
35128: PUSH
35129: LD_INT 3
35131: PUSH
35132: LD_INT 4
35134: PUSH
35135: LD_INT 5
35137: PUSH
35138: LD_INT 21
35140: PUSH
35141: LD_INT 22
35143: PUSH
35144: LD_INT 23
35146: PUSH
35147: LD_INT 24
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
35162: GO 35165
35164: POP
// result := ( chassis in result ) ;
35165: LD_ADDR_VAR 0 3
35169: PUSH
35170: LD_VAR 0 1
35174: PUSH
35175: LD_VAR 0 3
35179: IN
35180: ST_TO_ADDR
// end ;
35181: LD_VAR 0 3
35185: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35186: LD_INT 0
35188: PPUSH
// if not chassis or not weapon then
35189: LD_VAR 0 1
35193: NOT
35194: PUSH
35195: LD_VAR 0 2
35199: NOT
35200: OR
35201: IFFALSE 35205
// exit ;
35203: GO 36265
// case weapon of us_machine_gun :
35205: LD_VAR 0 2
35209: PUSH
35210: LD_INT 2
35212: DOUBLE
35213: EQUAL
35214: IFTRUE 35218
35216: GO 35248
35218: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35219: LD_ADDR_VAR 0 3
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 3
35232: PUSH
35233: LD_INT 4
35235: PUSH
35236: LD_INT 5
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: ST_TO_ADDR
35246: GO 36249
35248: LD_INT 3
35250: DOUBLE
35251: EQUAL
35252: IFTRUE 35256
35254: GO 35286
35256: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35257: LD_ADDR_VAR 0 3
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: LD_INT 3
35270: PUSH
35271: LD_INT 4
35273: PUSH
35274: LD_INT 5
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: ST_TO_ADDR
35284: GO 36249
35286: LD_INT 11
35288: DOUBLE
35289: EQUAL
35290: IFTRUE 35294
35292: GO 35324
35294: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35295: LD_ADDR_VAR 0 3
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 3
35308: PUSH
35309: LD_INT 4
35311: PUSH
35312: LD_INT 5
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: ST_TO_ADDR
35322: GO 36249
35324: LD_INT 4
35326: DOUBLE
35327: EQUAL
35328: IFTRUE 35332
35330: GO 35358
35332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: LD_INT 3
35343: PUSH
35344: LD_INT 4
35346: PUSH
35347: LD_INT 5
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: ST_TO_ADDR
35356: GO 36249
35358: LD_INT 5
35360: DOUBLE
35361: EQUAL
35362: IFTRUE 35366
35364: GO 35392
35366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35367: LD_ADDR_VAR 0 3
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: LD_INT 3
35377: PUSH
35378: LD_INT 4
35380: PUSH
35381: LD_INT 5
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
35390: GO 36249
35392: LD_INT 9
35394: DOUBLE
35395: EQUAL
35396: IFTRUE 35400
35398: GO 35426
35400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35401: LD_ADDR_VAR 0 3
35405: PUSH
35406: LD_INT 2
35408: PUSH
35409: LD_INT 3
35411: PUSH
35412: LD_INT 4
35414: PUSH
35415: LD_INT 5
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: ST_TO_ADDR
35424: GO 36249
35426: LD_INT 7
35428: DOUBLE
35429: EQUAL
35430: IFTRUE 35434
35432: GO 35460
35434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35435: LD_ADDR_VAR 0 3
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: LD_INT 3
35445: PUSH
35446: LD_INT 4
35448: PUSH
35449: LD_INT 5
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: ST_TO_ADDR
35458: GO 36249
35460: LD_INT 12
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35468
35466: GO 35494
35468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35469: LD_ADDR_VAR 0 3
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: LD_INT 3
35479: PUSH
35480: LD_INT 4
35482: PUSH
35483: LD_INT 5
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: ST_TO_ADDR
35492: GO 36249
35494: LD_INT 13
35496: DOUBLE
35497: EQUAL
35498: IFTRUE 35502
35500: GO 35528
35502: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35503: LD_ADDR_VAR 0 3
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: LD_INT 3
35513: PUSH
35514: LD_INT 4
35516: PUSH
35517: LD_INT 5
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
35526: GO 36249
35528: LD_INT 14
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 35554
35536: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35537: LD_ADDR_VAR 0 3
35541: PUSH
35542: LD_INT 4
35544: PUSH
35545: LD_INT 5
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: ST_TO_ADDR
35552: GO 36249
35554: LD_INT 6
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35562
35560: GO 35580
35562: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35563: LD_ADDR_VAR 0 3
35567: PUSH
35568: LD_INT 4
35570: PUSH
35571: LD_INT 5
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: ST_TO_ADDR
35578: GO 36249
35580: LD_INT 10
35582: DOUBLE
35583: EQUAL
35584: IFTRUE 35588
35586: GO 35606
35588: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35589: LD_ADDR_VAR 0 3
35593: PUSH
35594: LD_INT 4
35596: PUSH
35597: LD_INT 5
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: ST_TO_ADDR
35604: GO 36249
35606: LD_INT 22
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35614
35612: GO 35640
35614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35615: LD_ADDR_VAR 0 3
35619: PUSH
35620: LD_INT 11
35622: PUSH
35623: LD_INT 12
35625: PUSH
35626: LD_INT 13
35628: PUSH
35629: LD_INT 14
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
35638: GO 36249
35640: LD_INT 23
35642: DOUBLE
35643: EQUAL
35644: IFTRUE 35648
35646: GO 35674
35648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35649: LD_ADDR_VAR 0 3
35653: PUSH
35654: LD_INT 11
35656: PUSH
35657: LD_INT 12
35659: PUSH
35660: LD_INT 13
35662: PUSH
35663: LD_INT 14
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: ST_TO_ADDR
35672: GO 36249
35674: LD_INT 24
35676: DOUBLE
35677: EQUAL
35678: IFTRUE 35682
35680: GO 35708
35682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35683: LD_ADDR_VAR 0 3
35687: PUSH
35688: LD_INT 11
35690: PUSH
35691: LD_INT 12
35693: PUSH
35694: LD_INT 13
35696: PUSH
35697: LD_INT 14
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: ST_TO_ADDR
35706: GO 36249
35708: LD_INT 30
35710: DOUBLE
35711: EQUAL
35712: IFTRUE 35716
35714: GO 35742
35716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35717: LD_ADDR_VAR 0 3
35721: PUSH
35722: LD_INT 11
35724: PUSH
35725: LD_INT 12
35727: PUSH
35728: LD_INT 13
35730: PUSH
35731: LD_INT 14
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: ST_TO_ADDR
35740: GO 36249
35742: LD_INT 25
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35750
35748: GO 35768
35750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35751: LD_ADDR_VAR 0 3
35755: PUSH
35756: LD_INT 13
35758: PUSH
35759: LD_INT 14
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: ST_TO_ADDR
35766: GO 36249
35768: LD_INT 27
35770: DOUBLE
35771: EQUAL
35772: IFTRUE 35776
35774: GO 35794
35776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35777: LD_ADDR_VAR 0 3
35781: PUSH
35782: LD_INT 13
35784: PUSH
35785: LD_INT 14
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: ST_TO_ADDR
35792: GO 36249
35794: LD_INT 92
35796: DOUBLE
35797: EQUAL
35798: IFTRUE 35802
35800: GO 35828
35802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35803: LD_ADDR_VAR 0 3
35807: PUSH
35808: LD_INT 11
35810: PUSH
35811: LD_INT 12
35813: PUSH
35814: LD_INT 13
35816: PUSH
35817: LD_INT 14
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: ST_TO_ADDR
35826: GO 36249
35828: LD_INT 28
35830: DOUBLE
35831: EQUAL
35832: IFTRUE 35836
35834: GO 35854
35836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35837: LD_ADDR_VAR 0 3
35841: PUSH
35842: LD_INT 13
35844: PUSH
35845: LD_INT 14
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: ST_TO_ADDR
35852: GO 36249
35854: LD_INT 29
35856: DOUBLE
35857: EQUAL
35858: IFTRUE 35862
35860: GO 35880
35862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35863: LD_ADDR_VAR 0 3
35867: PUSH
35868: LD_INT 13
35870: PUSH
35871: LD_INT 14
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: ST_TO_ADDR
35878: GO 36249
35880: LD_INT 31
35882: DOUBLE
35883: EQUAL
35884: IFTRUE 35888
35886: GO 35906
35888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35889: LD_ADDR_VAR 0 3
35893: PUSH
35894: LD_INT 13
35896: PUSH
35897: LD_INT 14
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: ST_TO_ADDR
35904: GO 36249
35906: LD_INT 26
35908: DOUBLE
35909: EQUAL
35910: IFTRUE 35914
35912: GO 35932
35914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35915: LD_ADDR_VAR 0 3
35919: PUSH
35920: LD_INT 13
35922: PUSH
35923: LD_INT 14
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: ST_TO_ADDR
35930: GO 36249
35932: LD_INT 42
35934: DOUBLE
35935: EQUAL
35936: IFTRUE 35940
35938: GO 35966
35940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35941: LD_ADDR_VAR 0 3
35945: PUSH
35946: LD_INT 21
35948: PUSH
35949: LD_INT 22
35951: PUSH
35952: LD_INT 23
35954: PUSH
35955: LD_INT 24
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: ST_TO_ADDR
35964: GO 36249
35966: LD_INT 43
35968: DOUBLE
35969: EQUAL
35970: IFTRUE 35974
35972: GO 36000
35974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35975: LD_ADDR_VAR 0 3
35979: PUSH
35980: LD_INT 21
35982: PUSH
35983: LD_INT 22
35985: PUSH
35986: LD_INT 23
35988: PUSH
35989: LD_INT 24
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: ST_TO_ADDR
35998: GO 36249
36000: LD_INT 44
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36008
36006: GO 36034
36008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: LD_INT 21
36016: PUSH
36017: LD_INT 22
36019: PUSH
36020: LD_INT 23
36022: PUSH
36023: LD_INT 24
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: ST_TO_ADDR
36032: GO 36249
36034: LD_INT 45
36036: DOUBLE
36037: EQUAL
36038: IFTRUE 36042
36040: GO 36068
36042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36043: LD_ADDR_VAR 0 3
36047: PUSH
36048: LD_INT 21
36050: PUSH
36051: LD_INT 22
36053: PUSH
36054: LD_INT 23
36056: PUSH
36057: LD_INT 24
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: ST_TO_ADDR
36066: GO 36249
36068: LD_INT 49
36070: DOUBLE
36071: EQUAL
36072: IFTRUE 36076
36074: GO 36102
36076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36077: LD_ADDR_VAR 0 3
36081: PUSH
36082: LD_INT 21
36084: PUSH
36085: LD_INT 22
36087: PUSH
36088: LD_INT 23
36090: PUSH
36091: LD_INT 24
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: ST_TO_ADDR
36100: GO 36249
36102: LD_INT 51
36104: DOUBLE
36105: EQUAL
36106: IFTRUE 36110
36108: GO 36136
36110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36111: LD_ADDR_VAR 0 3
36115: PUSH
36116: LD_INT 21
36118: PUSH
36119: LD_INT 22
36121: PUSH
36122: LD_INT 23
36124: PUSH
36125: LD_INT 24
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: ST_TO_ADDR
36134: GO 36249
36136: LD_INT 52
36138: DOUBLE
36139: EQUAL
36140: IFTRUE 36144
36142: GO 36170
36144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36145: LD_ADDR_VAR 0 3
36149: PUSH
36150: LD_INT 21
36152: PUSH
36153: LD_INT 22
36155: PUSH
36156: LD_INT 23
36158: PUSH
36159: LD_INT 24
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: ST_TO_ADDR
36168: GO 36249
36170: LD_INT 53
36172: DOUBLE
36173: EQUAL
36174: IFTRUE 36178
36176: GO 36196
36178: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36179: LD_ADDR_VAR 0 3
36183: PUSH
36184: LD_INT 23
36186: PUSH
36187: LD_INT 24
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: ST_TO_ADDR
36194: GO 36249
36196: LD_INT 46
36198: DOUBLE
36199: EQUAL
36200: IFTRUE 36204
36202: GO 36222
36204: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36205: LD_ADDR_VAR 0 3
36209: PUSH
36210: LD_INT 23
36212: PUSH
36213: LD_INT 24
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: ST_TO_ADDR
36220: GO 36249
36222: LD_INT 47
36224: DOUBLE
36225: EQUAL
36226: IFTRUE 36230
36228: GO 36248
36230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36231: LD_ADDR_VAR 0 3
36235: PUSH
36236: LD_INT 23
36238: PUSH
36239: LD_INT 24
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: ST_TO_ADDR
36246: GO 36249
36248: POP
// result := ( chassis in result ) ;
36249: LD_ADDR_VAR 0 3
36253: PUSH
36254: LD_VAR 0 1
36258: PUSH
36259: LD_VAR 0 3
36263: IN
36264: ST_TO_ADDR
// end ;
36265: LD_VAR 0 3
36269: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36270: LD_INT 0
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
// result := array ;
36279: LD_ADDR_VAR 0 5
36283: PUSH
36284: LD_VAR 0 1
36288: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36289: LD_VAR 0 1
36293: NOT
36294: PUSH
36295: LD_VAR 0 2
36299: NOT
36300: OR
36301: PUSH
36302: LD_VAR 0 3
36306: NOT
36307: OR
36308: PUSH
36309: LD_VAR 0 2
36313: PUSH
36314: LD_VAR 0 1
36318: GREATER
36319: OR
36320: PUSH
36321: LD_VAR 0 3
36325: PUSH
36326: LD_VAR 0 1
36330: GREATER
36331: OR
36332: IFFALSE 36336
// exit ;
36334: GO 36632
// if direction then
36336: LD_VAR 0 4
36340: IFFALSE 36404
// begin d := 1 ;
36342: LD_ADDR_VAR 0 9
36346: PUSH
36347: LD_INT 1
36349: ST_TO_ADDR
// if i_from > i_to then
36350: LD_VAR 0 2
36354: PUSH
36355: LD_VAR 0 3
36359: GREATER
36360: IFFALSE 36386
// length := ( array - i_from ) + i_to else
36362: LD_ADDR_VAR 0 11
36366: PUSH
36367: LD_VAR 0 1
36371: PUSH
36372: LD_VAR 0 2
36376: MINUS
36377: PUSH
36378: LD_VAR 0 3
36382: PLUS
36383: ST_TO_ADDR
36384: GO 36402
// length := i_to - i_from ;
36386: LD_ADDR_VAR 0 11
36390: PUSH
36391: LD_VAR 0 3
36395: PUSH
36396: LD_VAR 0 2
36400: MINUS
36401: ST_TO_ADDR
// end else
36402: GO 36465
// begin d := - 1 ;
36404: LD_ADDR_VAR 0 9
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: ST_TO_ADDR
// if i_from > i_to then
36413: LD_VAR 0 2
36417: PUSH
36418: LD_VAR 0 3
36422: GREATER
36423: IFFALSE 36443
// length := i_from - i_to else
36425: LD_ADDR_VAR 0 11
36429: PUSH
36430: LD_VAR 0 2
36434: PUSH
36435: LD_VAR 0 3
36439: MINUS
36440: ST_TO_ADDR
36441: GO 36465
// length := ( array - i_to ) + i_from ;
36443: LD_ADDR_VAR 0 11
36447: PUSH
36448: LD_VAR 0 1
36452: PUSH
36453: LD_VAR 0 3
36457: MINUS
36458: PUSH
36459: LD_VAR 0 2
36463: PLUS
36464: ST_TO_ADDR
// end ; if not length then
36465: LD_VAR 0 11
36469: NOT
36470: IFFALSE 36474
// exit ;
36472: GO 36632
// tmp := array ;
36474: LD_ADDR_VAR 0 10
36478: PUSH
36479: LD_VAR 0 1
36483: ST_TO_ADDR
// for i = 1 to length do
36484: LD_ADDR_VAR 0 6
36488: PUSH
36489: DOUBLE
36490: LD_INT 1
36492: DEC
36493: ST_TO_ADDR
36494: LD_VAR 0 11
36498: PUSH
36499: FOR_TO
36500: IFFALSE 36620
// begin for j = 1 to array do
36502: LD_ADDR_VAR 0 7
36506: PUSH
36507: DOUBLE
36508: LD_INT 1
36510: DEC
36511: ST_TO_ADDR
36512: LD_VAR 0 1
36516: PUSH
36517: FOR_TO
36518: IFFALSE 36606
// begin k := j + d ;
36520: LD_ADDR_VAR 0 8
36524: PUSH
36525: LD_VAR 0 7
36529: PUSH
36530: LD_VAR 0 9
36534: PLUS
36535: ST_TO_ADDR
// if k > array then
36536: LD_VAR 0 8
36540: PUSH
36541: LD_VAR 0 1
36545: GREATER
36546: IFFALSE 36556
// k := 1 ;
36548: LD_ADDR_VAR 0 8
36552: PUSH
36553: LD_INT 1
36555: ST_TO_ADDR
// if not k then
36556: LD_VAR 0 8
36560: NOT
36561: IFFALSE 36573
// k := array ;
36563: LD_ADDR_VAR 0 8
36567: PUSH
36568: LD_VAR 0 1
36572: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36573: LD_ADDR_VAR 0 10
36577: PUSH
36578: LD_VAR 0 10
36582: PPUSH
36583: LD_VAR 0 8
36587: PPUSH
36588: LD_VAR 0 1
36592: PUSH
36593: LD_VAR 0 7
36597: ARRAY
36598: PPUSH
36599: CALL_OW 1
36603: ST_TO_ADDR
// end ;
36604: GO 36517
36606: POP
36607: POP
// array := tmp ;
36608: LD_ADDR_VAR 0 1
36612: PUSH
36613: LD_VAR 0 10
36617: ST_TO_ADDR
// end ;
36618: GO 36499
36620: POP
36621: POP
// result := array ;
36622: LD_ADDR_VAR 0 5
36626: PUSH
36627: LD_VAR 0 1
36631: ST_TO_ADDR
// end ;
36632: LD_VAR 0 5
36636: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36637: LD_INT 0
36639: PPUSH
36640: PPUSH
// result := 0 ;
36641: LD_ADDR_VAR 0 3
36645: PUSH
36646: LD_INT 0
36648: ST_TO_ADDR
// if not array or not value in array then
36649: LD_VAR 0 1
36653: NOT
36654: PUSH
36655: LD_VAR 0 2
36659: PUSH
36660: LD_VAR 0 1
36664: IN
36665: NOT
36666: OR
36667: IFFALSE 36671
// exit ;
36669: GO 36725
// for i = 1 to array do
36671: LD_ADDR_VAR 0 4
36675: PUSH
36676: DOUBLE
36677: LD_INT 1
36679: DEC
36680: ST_TO_ADDR
36681: LD_VAR 0 1
36685: PUSH
36686: FOR_TO
36687: IFFALSE 36723
// if value = array [ i ] then
36689: LD_VAR 0 2
36693: PUSH
36694: LD_VAR 0 1
36698: PUSH
36699: LD_VAR 0 4
36703: ARRAY
36704: EQUAL
36705: IFFALSE 36721
// begin result := i ;
36707: LD_ADDR_VAR 0 3
36711: PUSH
36712: LD_VAR 0 4
36716: ST_TO_ADDR
// exit ;
36717: POP
36718: POP
36719: GO 36725
// end ;
36721: GO 36686
36723: POP
36724: POP
// end ;
36725: LD_VAR 0 3
36729: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36730: LD_INT 0
36732: PPUSH
// vc_chassis := chassis ;
36733: LD_ADDR_OWVAR 37
36737: PUSH
36738: LD_VAR 0 1
36742: ST_TO_ADDR
// vc_engine := engine ;
36743: LD_ADDR_OWVAR 39
36747: PUSH
36748: LD_VAR 0 2
36752: ST_TO_ADDR
// vc_control := control ;
36753: LD_ADDR_OWVAR 38
36757: PUSH
36758: LD_VAR 0 3
36762: ST_TO_ADDR
// vc_weapon := weapon ;
36763: LD_ADDR_OWVAR 40
36767: PUSH
36768: LD_VAR 0 4
36772: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36773: LD_ADDR_OWVAR 41
36777: PUSH
36778: LD_VAR 0 5
36782: ST_TO_ADDR
// end ;
36783: LD_VAR 0 6
36787: RET
// export function WantPlant ( unit ) ; var task ; begin
36788: LD_INT 0
36790: PPUSH
36791: PPUSH
// result := false ;
36792: LD_ADDR_VAR 0 2
36796: PUSH
36797: LD_INT 0
36799: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36800: LD_ADDR_VAR 0 3
36804: PUSH
36805: LD_VAR 0 1
36809: PPUSH
36810: CALL_OW 437
36814: ST_TO_ADDR
// if task then
36815: LD_VAR 0 3
36819: IFFALSE 36847
// if task [ 1 ] [ 1 ] = p then
36821: LD_VAR 0 3
36825: PUSH
36826: LD_INT 1
36828: ARRAY
36829: PUSH
36830: LD_INT 1
36832: ARRAY
36833: PUSH
36834: LD_STRING p
36836: EQUAL
36837: IFFALSE 36847
// result := true ;
36839: LD_ADDR_VAR 0 2
36843: PUSH
36844: LD_INT 1
36846: ST_TO_ADDR
// end ;
36847: LD_VAR 0 2
36851: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36852: LD_INT 0
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
// if pos < 1 then
36858: LD_VAR 0 2
36862: PUSH
36863: LD_INT 1
36865: LESS
36866: IFFALSE 36870
// exit ;
36868: GO 37173
// if pos = 1 then
36870: LD_VAR 0 2
36874: PUSH
36875: LD_INT 1
36877: EQUAL
36878: IFFALSE 36911
// result := Replace ( arr , pos [ 1 ] , value ) else
36880: LD_ADDR_VAR 0 4
36884: PUSH
36885: LD_VAR 0 1
36889: PPUSH
36890: LD_VAR 0 2
36894: PUSH
36895: LD_INT 1
36897: ARRAY
36898: PPUSH
36899: LD_VAR 0 3
36903: PPUSH
36904: CALL_OW 1
36908: ST_TO_ADDR
36909: GO 37173
// begin tmp := arr ;
36911: LD_ADDR_VAR 0 6
36915: PUSH
36916: LD_VAR 0 1
36920: ST_TO_ADDR
// s_arr := [ tmp ] ;
36921: LD_ADDR_VAR 0 7
36925: PUSH
36926: LD_VAR 0 6
36930: PUSH
36931: EMPTY
36932: LIST
36933: ST_TO_ADDR
// for i = 1 to pos - 1 do
36934: LD_ADDR_VAR 0 5
36938: PUSH
36939: DOUBLE
36940: LD_INT 1
36942: DEC
36943: ST_TO_ADDR
36944: LD_VAR 0 2
36948: PUSH
36949: LD_INT 1
36951: MINUS
36952: PUSH
36953: FOR_TO
36954: IFFALSE 36999
// begin tmp := tmp [ pos [ i ] ] ;
36956: LD_ADDR_VAR 0 6
36960: PUSH
36961: LD_VAR 0 6
36965: PUSH
36966: LD_VAR 0 2
36970: PUSH
36971: LD_VAR 0 5
36975: ARRAY
36976: ARRAY
36977: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36978: LD_ADDR_VAR 0 7
36982: PUSH
36983: LD_VAR 0 7
36987: PUSH
36988: LD_VAR 0 6
36992: PUSH
36993: EMPTY
36994: LIST
36995: ADD
36996: ST_TO_ADDR
// end ;
36997: GO 36953
36999: POP
37000: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37001: LD_ADDR_VAR 0 6
37005: PUSH
37006: LD_VAR 0 6
37010: PPUSH
37011: LD_VAR 0 2
37015: PUSH
37016: LD_VAR 0 2
37020: ARRAY
37021: PPUSH
37022: LD_VAR 0 3
37026: PPUSH
37027: CALL_OW 1
37031: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37032: LD_ADDR_VAR 0 7
37036: PUSH
37037: LD_VAR 0 7
37041: PPUSH
37042: LD_VAR 0 7
37046: PPUSH
37047: LD_VAR 0 6
37051: PPUSH
37052: CALL_OW 1
37056: ST_TO_ADDR
// for i = s_arr downto 2 do
37057: LD_ADDR_VAR 0 5
37061: PUSH
37062: DOUBLE
37063: LD_VAR 0 7
37067: INC
37068: ST_TO_ADDR
37069: LD_INT 2
37071: PUSH
37072: FOR_DOWNTO
37073: IFFALSE 37157
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37075: LD_ADDR_VAR 0 6
37079: PUSH
37080: LD_VAR 0 7
37084: PUSH
37085: LD_VAR 0 5
37089: PUSH
37090: LD_INT 1
37092: MINUS
37093: ARRAY
37094: PPUSH
37095: LD_VAR 0 2
37099: PUSH
37100: LD_VAR 0 5
37104: PUSH
37105: LD_INT 1
37107: MINUS
37108: ARRAY
37109: PPUSH
37110: LD_VAR 0 7
37114: PUSH
37115: LD_VAR 0 5
37119: ARRAY
37120: PPUSH
37121: CALL_OW 1
37125: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37126: LD_ADDR_VAR 0 7
37130: PUSH
37131: LD_VAR 0 7
37135: PPUSH
37136: LD_VAR 0 5
37140: PUSH
37141: LD_INT 1
37143: MINUS
37144: PPUSH
37145: LD_VAR 0 6
37149: PPUSH
37150: CALL_OW 1
37154: ST_TO_ADDR
// end ;
37155: GO 37072
37157: POP
37158: POP
// result := s_arr [ 1 ] ;
37159: LD_ADDR_VAR 0 4
37163: PUSH
37164: LD_VAR 0 7
37168: PUSH
37169: LD_INT 1
37171: ARRAY
37172: ST_TO_ADDR
// end ; end ;
37173: LD_VAR 0 4
37177: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37178: LD_INT 0
37180: PPUSH
37181: PPUSH
// if not list then
37182: LD_VAR 0 1
37186: NOT
37187: IFFALSE 37191
// exit ;
37189: GO 37282
// i := list [ pos1 ] ;
37191: LD_ADDR_VAR 0 5
37195: PUSH
37196: LD_VAR 0 1
37200: PUSH
37201: LD_VAR 0 2
37205: ARRAY
37206: ST_TO_ADDR
// if not i then
37207: LD_VAR 0 5
37211: NOT
37212: IFFALSE 37216
// exit ;
37214: GO 37282
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37216: LD_ADDR_VAR 0 1
37220: PUSH
37221: LD_VAR 0 1
37225: PPUSH
37226: LD_VAR 0 2
37230: PPUSH
37231: LD_VAR 0 1
37235: PUSH
37236: LD_VAR 0 3
37240: ARRAY
37241: PPUSH
37242: CALL_OW 1
37246: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37247: LD_ADDR_VAR 0 1
37251: PUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: LD_VAR 0 3
37261: PPUSH
37262: LD_VAR 0 5
37266: PPUSH
37267: CALL_OW 1
37271: ST_TO_ADDR
// result := list ;
37272: LD_ADDR_VAR 0 4
37276: PUSH
37277: LD_VAR 0 1
37281: ST_TO_ADDR
// end ;
37282: LD_VAR 0 4
37286: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37287: LD_INT 0
37289: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37290: LD_ADDR_VAR 0 5
37294: PUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: CALL_OW 250
37304: PPUSH
37305: LD_VAR 0 1
37309: PPUSH
37310: CALL_OW 251
37314: PPUSH
37315: LD_VAR 0 2
37319: PPUSH
37320: LD_VAR 0 3
37324: PPUSH
37325: LD_VAR 0 4
37329: PPUSH
37330: CALL 37708 0 5
37334: ST_TO_ADDR
// end ;
37335: LD_VAR 0 5
37339: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37340: LD_INT 0
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
// if not list or not unit then
37346: LD_VAR 0 2
37350: NOT
37351: PUSH
37352: LD_VAR 0 1
37356: NOT
37357: OR
37358: IFFALSE 37362
// exit ;
37360: GO 37703
// result := [ ] ;
37362: LD_ADDR_VAR 0 5
37366: PUSH
37367: EMPTY
37368: ST_TO_ADDR
// for i in list do
37369: LD_ADDR_VAR 0 6
37373: PUSH
37374: LD_VAR 0 2
37378: PUSH
37379: FOR_IN
37380: IFFALSE 37598
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37382: LD_ADDR_VAR 0 8
37386: PUSH
37387: LD_VAR 0 1
37391: PPUSH
37392: LD_VAR 0 6
37396: PUSH
37397: LD_INT 1
37399: ARRAY
37400: PPUSH
37401: LD_VAR 0 6
37405: PUSH
37406: LD_INT 2
37408: ARRAY
37409: PPUSH
37410: CALL_OW 297
37414: ST_TO_ADDR
// if not Count ( result ) then
37415: LD_VAR 0 5
37419: PPUSH
37420: CALL 33992 0 1
37424: NOT
37425: IFFALSE 37458
// begin result := Join ( result , [ i , tmp ] ) ;
37427: LD_ADDR_VAR 0 5
37431: PUSH
37432: LD_VAR 0 5
37436: PPUSH
37437: LD_VAR 0 6
37441: PUSH
37442: LD_VAR 0 8
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PPUSH
37451: CALL 69601 0 2
37455: ST_TO_ADDR
// continue ;
37456: GO 37379
// end ; if result [ result ] [ 2 ] <= tmp then
37458: LD_VAR 0 5
37462: PUSH
37463: LD_VAR 0 5
37467: ARRAY
37468: PUSH
37469: LD_INT 2
37471: ARRAY
37472: PUSH
37473: LD_VAR 0 8
37477: LESSEQUAL
37478: IFFALSE 37511
// result := Join ( result , [ i , tmp ] ) else
37480: LD_ADDR_VAR 0 5
37484: PUSH
37485: LD_VAR 0 5
37489: PPUSH
37490: LD_VAR 0 6
37494: PUSH
37495: LD_VAR 0 8
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PPUSH
37504: CALL 69601 0 2
37508: ST_TO_ADDR
37509: GO 37596
// begin for j := 1 to Count ( result ) do
37511: LD_ADDR_VAR 0 7
37515: PUSH
37516: DOUBLE
37517: LD_INT 1
37519: DEC
37520: ST_TO_ADDR
37521: LD_VAR 0 5
37525: PPUSH
37526: CALL 33992 0 1
37530: PUSH
37531: FOR_TO
37532: IFFALSE 37594
// begin if tmp < result [ j ] [ 2 ] then
37534: LD_VAR 0 8
37538: PUSH
37539: LD_VAR 0 5
37543: PUSH
37544: LD_VAR 0 7
37548: ARRAY
37549: PUSH
37550: LD_INT 2
37552: ARRAY
37553: LESS
37554: IFFALSE 37592
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37556: LD_ADDR_VAR 0 5
37560: PUSH
37561: LD_VAR 0 5
37565: PPUSH
37566: LD_VAR 0 7
37570: PPUSH
37571: LD_VAR 0 6
37575: PUSH
37576: LD_VAR 0 8
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PPUSH
37585: CALL_OW 2
37589: ST_TO_ADDR
// break ;
37590: GO 37594
// end ; end ;
37592: GO 37531
37594: POP
37595: POP
// end ; end ;
37596: GO 37379
37598: POP
37599: POP
// if result and not asc then
37600: LD_VAR 0 5
37604: PUSH
37605: LD_VAR 0 3
37609: NOT
37610: AND
37611: IFFALSE 37628
// result := ReverseArray ( result ) ;
37613: LD_ADDR_VAR 0 5
37617: PUSH
37618: LD_VAR 0 5
37622: PPUSH
37623: CALL 64868 0 1
37627: ST_TO_ADDR
// tmp := [ ] ;
37628: LD_ADDR_VAR 0 8
37632: PUSH
37633: EMPTY
37634: ST_TO_ADDR
// if mode then
37635: LD_VAR 0 4
37639: IFFALSE 37703
// begin for i := 1 to result do
37641: LD_ADDR_VAR 0 6
37645: PUSH
37646: DOUBLE
37647: LD_INT 1
37649: DEC
37650: ST_TO_ADDR
37651: LD_VAR 0 5
37655: PUSH
37656: FOR_TO
37657: IFFALSE 37691
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37659: LD_ADDR_VAR 0 8
37663: PUSH
37664: LD_VAR 0 8
37668: PPUSH
37669: LD_VAR 0 5
37673: PUSH
37674: LD_VAR 0 6
37678: ARRAY
37679: PUSH
37680: LD_INT 1
37682: ARRAY
37683: PPUSH
37684: CALL 69601 0 2
37688: ST_TO_ADDR
37689: GO 37656
37691: POP
37692: POP
// result := tmp ;
37693: LD_ADDR_VAR 0 5
37697: PUSH
37698: LD_VAR 0 8
37702: ST_TO_ADDR
// end ; end ;
37703: LD_VAR 0 5
37707: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37708: LD_INT 0
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
// if not list then
37714: LD_VAR 0 3
37718: NOT
37719: IFFALSE 37723
// exit ;
37721: GO 38111
// result := [ ] ;
37723: LD_ADDR_VAR 0 6
37727: PUSH
37728: EMPTY
37729: ST_TO_ADDR
// for i in list do
37730: LD_ADDR_VAR 0 7
37734: PUSH
37735: LD_VAR 0 3
37739: PUSH
37740: FOR_IN
37741: IFFALSE 37943
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37743: LD_ADDR_VAR 0 9
37747: PUSH
37748: LD_VAR 0 7
37752: PPUSH
37753: LD_VAR 0 1
37757: PPUSH
37758: LD_VAR 0 2
37762: PPUSH
37763: CALL_OW 297
37767: ST_TO_ADDR
// if not result then
37768: LD_VAR 0 6
37772: NOT
37773: IFFALSE 37799
// result := [ [ i , tmp ] ] else
37775: LD_ADDR_VAR 0 6
37779: PUSH
37780: LD_VAR 0 7
37784: PUSH
37785: LD_VAR 0 9
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: EMPTY
37795: LIST
37796: ST_TO_ADDR
37797: GO 37941
// begin if result [ result ] [ 2 ] <= tmp then
37799: LD_VAR 0 6
37803: PUSH
37804: LD_VAR 0 6
37808: ARRAY
37809: PUSH
37810: LD_INT 2
37812: ARRAY
37813: PUSH
37814: LD_VAR 0 9
37818: LESSEQUAL
37819: IFFALSE 37861
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37821: LD_ADDR_VAR 0 6
37825: PUSH
37826: LD_VAR 0 6
37830: PPUSH
37831: LD_VAR 0 6
37835: PUSH
37836: LD_INT 1
37838: PLUS
37839: PPUSH
37840: LD_VAR 0 7
37844: PUSH
37845: LD_VAR 0 9
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PPUSH
37854: CALL_OW 2
37858: ST_TO_ADDR
37859: GO 37941
// for j := 1 to result do
37861: LD_ADDR_VAR 0 8
37865: PUSH
37866: DOUBLE
37867: LD_INT 1
37869: DEC
37870: ST_TO_ADDR
37871: LD_VAR 0 6
37875: PUSH
37876: FOR_TO
37877: IFFALSE 37939
// begin if tmp < result [ j ] [ 2 ] then
37879: LD_VAR 0 9
37883: PUSH
37884: LD_VAR 0 6
37888: PUSH
37889: LD_VAR 0 8
37893: ARRAY
37894: PUSH
37895: LD_INT 2
37897: ARRAY
37898: LESS
37899: IFFALSE 37937
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37901: LD_ADDR_VAR 0 6
37905: PUSH
37906: LD_VAR 0 6
37910: PPUSH
37911: LD_VAR 0 8
37915: PPUSH
37916: LD_VAR 0 7
37920: PUSH
37921: LD_VAR 0 9
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PPUSH
37930: CALL_OW 2
37934: ST_TO_ADDR
// break ;
37935: GO 37939
// end ; end ;
37937: GO 37876
37939: POP
37940: POP
// end ; end ;
37941: GO 37740
37943: POP
37944: POP
// if result and not asc then
37945: LD_VAR 0 6
37949: PUSH
37950: LD_VAR 0 4
37954: NOT
37955: AND
37956: IFFALSE 38031
// begin tmp := result ;
37958: LD_ADDR_VAR 0 9
37962: PUSH
37963: LD_VAR 0 6
37967: ST_TO_ADDR
// for i = tmp downto 1 do
37968: LD_ADDR_VAR 0 7
37972: PUSH
37973: DOUBLE
37974: LD_VAR 0 9
37978: INC
37979: ST_TO_ADDR
37980: LD_INT 1
37982: PUSH
37983: FOR_DOWNTO
37984: IFFALSE 38029
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37986: LD_ADDR_VAR 0 6
37990: PUSH
37991: LD_VAR 0 6
37995: PPUSH
37996: LD_VAR 0 9
38000: PUSH
38001: LD_VAR 0 7
38005: MINUS
38006: PUSH
38007: LD_INT 1
38009: PLUS
38010: PPUSH
38011: LD_VAR 0 9
38015: PUSH
38016: LD_VAR 0 7
38020: ARRAY
38021: PPUSH
38022: CALL_OW 1
38026: ST_TO_ADDR
38027: GO 37983
38029: POP
38030: POP
// end ; tmp := [ ] ;
38031: LD_ADDR_VAR 0 9
38035: PUSH
38036: EMPTY
38037: ST_TO_ADDR
// if mode then
38038: LD_VAR 0 5
38042: IFFALSE 38111
// begin for i = 1 to result do
38044: LD_ADDR_VAR 0 7
38048: PUSH
38049: DOUBLE
38050: LD_INT 1
38052: DEC
38053: ST_TO_ADDR
38054: LD_VAR 0 6
38058: PUSH
38059: FOR_TO
38060: IFFALSE 38099
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38062: LD_ADDR_VAR 0 9
38066: PUSH
38067: LD_VAR 0 9
38071: PPUSH
38072: LD_VAR 0 7
38076: PPUSH
38077: LD_VAR 0 6
38081: PUSH
38082: LD_VAR 0 7
38086: ARRAY
38087: PUSH
38088: LD_INT 1
38090: ARRAY
38091: PPUSH
38092: CALL_OW 1
38096: ST_TO_ADDR
38097: GO 38059
38099: POP
38100: POP
// result := tmp ;
38101: LD_ADDR_VAR 0 6
38105: PUSH
38106: LD_VAR 0 9
38110: ST_TO_ADDR
// end ; end ;
38111: LD_VAR 0 6
38115: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38116: LD_INT 0
38118: PPUSH
38119: PPUSH
38120: PPUSH
38121: PPUSH
38122: PPUSH
38123: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38124: LD_ADDR_VAR 0 5
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: EMPTY
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: ST_TO_ADDR
// if not x or not y then
38146: LD_VAR 0 2
38150: NOT
38151: PUSH
38152: LD_VAR 0 3
38156: NOT
38157: OR
38158: IFFALSE 38162
// exit ;
38160: GO 39812
// if not range then
38162: LD_VAR 0 4
38166: NOT
38167: IFFALSE 38177
// range := 10 ;
38169: LD_ADDR_VAR 0 4
38173: PUSH
38174: LD_INT 10
38176: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38177: LD_ADDR_VAR 0 8
38181: PUSH
38182: LD_INT 81
38184: PUSH
38185: LD_VAR 0 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 92
38196: PUSH
38197: LD_VAR 0 2
38201: PUSH
38202: LD_VAR 0 3
38206: PUSH
38207: LD_VAR 0 4
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 3
38220: PUSH
38221: LD_INT 21
38223: PUSH
38224: LD_INT 3
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: PPUSH
38240: CALL_OW 69
38244: ST_TO_ADDR
// if not tmp then
38245: LD_VAR 0 8
38249: NOT
38250: IFFALSE 38254
// exit ;
38252: GO 39812
// for i in tmp do
38254: LD_ADDR_VAR 0 6
38258: PUSH
38259: LD_VAR 0 8
38263: PUSH
38264: FOR_IN
38265: IFFALSE 39787
// begin points := [ 0 , 0 , 0 ] ;
38267: LD_ADDR_VAR 0 9
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: LIST
38285: ST_TO_ADDR
// bpoints := 1 ;
38286: LD_ADDR_VAR 0 10
38290: PUSH
38291: LD_INT 1
38293: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38294: LD_VAR 0 6
38298: PPUSH
38299: CALL_OW 247
38303: PUSH
38304: LD_INT 1
38306: DOUBLE
38307: EQUAL
38308: IFTRUE 38312
38310: GO 38890
38312: POP
// begin if GetClass ( i ) = 1 then
38313: LD_VAR 0 6
38317: PPUSH
38318: CALL_OW 257
38322: PUSH
38323: LD_INT 1
38325: EQUAL
38326: IFFALSE 38347
// points := [ 10 , 5 , 3 ] ;
38328: LD_ADDR_VAR 0 9
38332: PUSH
38333: LD_INT 10
38335: PUSH
38336: LD_INT 5
38338: PUSH
38339: LD_INT 3
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38347: LD_VAR 0 6
38351: PPUSH
38352: CALL_OW 257
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: LD_INT 4
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: IN
38371: IFFALSE 38392
// points := [ 3 , 2 , 1 ] ;
38373: LD_ADDR_VAR 0 9
38377: PUSH
38378: LD_INT 3
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38392: LD_VAR 0 6
38396: PPUSH
38397: CALL_OW 257
38401: PUSH
38402: LD_INT 5
38404: EQUAL
38405: IFFALSE 38426
// points := [ 130 , 5 , 2 ] ;
38407: LD_ADDR_VAR 0 9
38411: PUSH
38412: LD_INT 130
38414: PUSH
38415: LD_INT 5
38417: PUSH
38418: LD_INT 2
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38426: LD_VAR 0 6
38430: PPUSH
38431: CALL_OW 257
38435: PUSH
38436: LD_INT 8
38438: EQUAL
38439: IFFALSE 38460
// points := [ 35 , 35 , 30 ] ;
38441: LD_ADDR_VAR 0 9
38445: PUSH
38446: LD_INT 35
38448: PUSH
38449: LD_INT 35
38451: PUSH
38452: LD_INT 30
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38460: LD_VAR 0 6
38464: PPUSH
38465: CALL_OW 257
38469: PUSH
38470: LD_INT 9
38472: EQUAL
38473: IFFALSE 38494
// points := [ 20 , 55 , 40 ] ;
38475: LD_ADDR_VAR 0 9
38479: PUSH
38480: LD_INT 20
38482: PUSH
38483: LD_INT 55
38485: PUSH
38486: LD_INT 40
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: LIST
38493: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38494: LD_VAR 0 6
38498: PPUSH
38499: CALL_OW 257
38503: PUSH
38504: LD_INT 12
38506: PUSH
38507: LD_INT 16
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: IN
38514: IFFALSE 38535
// points := [ 5 , 3 , 2 ] ;
38516: LD_ADDR_VAR 0 9
38520: PUSH
38521: LD_INT 5
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38535: LD_VAR 0 6
38539: PPUSH
38540: CALL_OW 257
38544: PUSH
38545: LD_INT 17
38547: EQUAL
38548: IFFALSE 38569
// points := [ 100 , 50 , 75 ] ;
38550: LD_ADDR_VAR 0 9
38554: PUSH
38555: LD_INT 100
38557: PUSH
38558: LD_INT 50
38560: PUSH
38561: LD_INT 75
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38569: LD_VAR 0 6
38573: PPUSH
38574: CALL_OW 257
38578: PUSH
38579: LD_INT 15
38581: EQUAL
38582: IFFALSE 38603
// points := [ 10 , 5 , 3 ] ;
38584: LD_ADDR_VAR 0 9
38588: PUSH
38589: LD_INT 10
38591: PUSH
38592: LD_INT 5
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38603: LD_VAR 0 6
38607: PPUSH
38608: CALL_OW 257
38612: PUSH
38613: LD_INT 14
38615: EQUAL
38616: IFFALSE 38637
// points := [ 10 , 0 , 0 ] ;
38618: LD_ADDR_VAR 0 9
38622: PUSH
38623: LD_INT 10
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38637: LD_VAR 0 6
38641: PPUSH
38642: CALL_OW 257
38646: PUSH
38647: LD_INT 11
38649: EQUAL
38650: IFFALSE 38671
// points := [ 30 , 10 , 5 ] ;
38652: LD_ADDR_VAR 0 9
38656: PUSH
38657: LD_INT 30
38659: PUSH
38660: LD_INT 10
38662: PUSH
38663: LD_INT 5
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38671: LD_VAR 0 1
38675: PPUSH
38676: LD_INT 5
38678: PPUSH
38679: CALL_OW 321
38683: PUSH
38684: LD_INT 2
38686: EQUAL
38687: IFFALSE 38704
// bpoints := bpoints * 1.8 ;
38689: LD_ADDR_VAR 0 10
38693: PUSH
38694: LD_VAR 0 10
38698: PUSH
38699: LD_REAL  1.80000000000000E+0000
38702: MUL
38703: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38704: LD_VAR 0 6
38708: PPUSH
38709: CALL_OW 257
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: LD_INT 4
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: IN
38732: PUSH
38733: LD_VAR 0 1
38737: PPUSH
38738: LD_INT 51
38740: PPUSH
38741: CALL_OW 321
38745: PUSH
38746: LD_INT 2
38748: EQUAL
38749: AND
38750: IFFALSE 38767
// bpoints := bpoints * 1.2 ;
38752: LD_ADDR_VAR 0 10
38756: PUSH
38757: LD_VAR 0 10
38761: PUSH
38762: LD_REAL  1.20000000000000E+0000
38765: MUL
38766: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38767: LD_VAR 0 6
38771: PPUSH
38772: CALL_OW 257
38776: PUSH
38777: LD_INT 5
38779: PUSH
38780: LD_INT 7
38782: PUSH
38783: LD_INT 9
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: IN
38791: PUSH
38792: LD_VAR 0 1
38796: PPUSH
38797: LD_INT 52
38799: PPUSH
38800: CALL_OW 321
38804: PUSH
38805: LD_INT 2
38807: EQUAL
38808: AND
38809: IFFALSE 38826
// bpoints := bpoints * 1.5 ;
38811: LD_ADDR_VAR 0 10
38815: PUSH
38816: LD_VAR 0 10
38820: PUSH
38821: LD_REAL  1.50000000000000E+0000
38824: MUL
38825: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38826: LD_VAR 0 1
38830: PPUSH
38831: LD_INT 66
38833: PPUSH
38834: CALL_OW 321
38838: PUSH
38839: LD_INT 2
38841: EQUAL
38842: IFFALSE 38859
// bpoints := bpoints * 1.1 ;
38844: LD_ADDR_VAR 0 10
38848: PUSH
38849: LD_VAR 0 10
38853: PUSH
38854: LD_REAL  1.10000000000000E+0000
38857: MUL
38858: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38859: LD_ADDR_VAR 0 10
38863: PUSH
38864: LD_VAR 0 10
38868: PUSH
38869: LD_VAR 0 6
38873: PPUSH
38874: LD_INT 1
38876: PPUSH
38877: CALL_OW 259
38881: PUSH
38882: LD_REAL  1.15000000000000E+0000
38885: MUL
38886: MUL
38887: ST_TO_ADDR
// end ; unit_vehicle :
38888: GO 39716
38890: LD_INT 2
38892: DOUBLE
38893: EQUAL
38894: IFTRUE 38898
38896: GO 39704
38898: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38899: LD_VAR 0 6
38903: PPUSH
38904: CALL_OW 264
38908: PUSH
38909: LD_INT 2
38911: PUSH
38912: LD_INT 42
38914: PUSH
38915: LD_INT 24
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: IN
38923: IFFALSE 38944
// points := [ 25 , 5 , 3 ] ;
38925: LD_ADDR_VAR 0 9
38929: PUSH
38930: LD_INT 25
38932: PUSH
38933: LD_INT 5
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38944: LD_VAR 0 6
38948: PPUSH
38949: CALL_OW 264
38953: PUSH
38954: LD_INT 4
38956: PUSH
38957: LD_INT 43
38959: PUSH
38960: LD_INT 25
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: IN
38968: IFFALSE 38989
// points := [ 40 , 15 , 5 ] ;
38970: LD_ADDR_VAR 0 9
38974: PUSH
38975: LD_INT 40
38977: PUSH
38978: LD_INT 15
38980: PUSH
38981: LD_INT 5
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38989: LD_VAR 0 6
38993: PPUSH
38994: CALL_OW 264
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: LD_INT 23
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: IN
39009: IFFALSE 39030
// points := [ 7 , 25 , 8 ] ;
39011: LD_ADDR_VAR 0 9
39015: PUSH
39016: LD_INT 7
39018: PUSH
39019: LD_INT 25
39021: PUSH
39022: LD_INT 8
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39030: LD_VAR 0 6
39034: PPUSH
39035: CALL_OW 264
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: LD_INT 27
39045: PUSH
39046: LD_INT 44
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: LIST
39053: IN
39054: IFFALSE 39075
// points := [ 14 , 50 , 16 ] ;
39056: LD_ADDR_VAR 0 9
39060: PUSH
39061: LD_INT 14
39063: PUSH
39064: LD_INT 50
39066: PUSH
39067: LD_INT 16
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39075: LD_VAR 0 6
39079: PPUSH
39080: CALL_OW 264
39084: PUSH
39085: LD_INT 6
39087: PUSH
39088: LD_INT 46
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: IN
39095: IFFALSE 39116
// points := [ 32 , 120 , 70 ] ;
39097: LD_ADDR_VAR 0 9
39101: PUSH
39102: LD_INT 32
39104: PUSH
39105: LD_INT 120
39107: PUSH
39108: LD_INT 70
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39116: LD_VAR 0 6
39120: PPUSH
39121: CALL_OW 264
39125: PUSH
39126: LD_INT 7
39128: PUSH
39129: LD_INT 28
39131: PUSH
39132: LD_INT 45
39134: PUSH
39135: LD_INT 92
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: IN
39144: IFFALSE 39165
// points := [ 35 , 20 , 45 ] ;
39146: LD_ADDR_VAR 0 9
39150: PUSH
39151: LD_INT 35
39153: PUSH
39154: LD_INT 20
39156: PUSH
39157: LD_INT 45
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39165: LD_VAR 0 6
39169: PPUSH
39170: CALL_OW 264
39174: PUSH
39175: LD_INT 47
39177: PUSH
39178: EMPTY
39179: LIST
39180: IN
39181: IFFALSE 39202
// points := [ 67 , 45 , 75 ] ;
39183: LD_ADDR_VAR 0 9
39187: PUSH
39188: LD_INT 67
39190: PUSH
39191: LD_INT 45
39193: PUSH
39194: LD_INT 75
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39202: LD_VAR 0 6
39206: PPUSH
39207: CALL_OW 264
39211: PUSH
39212: LD_INT 26
39214: PUSH
39215: EMPTY
39216: LIST
39217: IN
39218: IFFALSE 39239
// points := [ 120 , 30 , 80 ] ;
39220: LD_ADDR_VAR 0 9
39224: PUSH
39225: LD_INT 120
39227: PUSH
39228: LD_INT 30
39230: PUSH
39231: LD_INT 80
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39239: LD_VAR 0 6
39243: PPUSH
39244: CALL_OW 264
39248: PUSH
39249: LD_INT 22
39251: PUSH
39252: EMPTY
39253: LIST
39254: IN
39255: IFFALSE 39276
// points := [ 40 , 1 , 1 ] ;
39257: LD_ADDR_VAR 0 9
39261: PUSH
39262: LD_INT 40
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: LIST
39275: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39276: LD_VAR 0 6
39280: PPUSH
39281: CALL_OW 264
39285: PUSH
39286: LD_INT 29
39288: PUSH
39289: EMPTY
39290: LIST
39291: IN
39292: IFFALSE 39313
// points := [ 70 , 200 , 400 ] ;
39294: LD_ADDR_VAR 0 9
39298: PUSH
39299: LD_INT 70
39301: PUSH
39302: LD_INT 200
39304: PUSH
39305: LD_INT 400
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39313: LD_VAR 0 6
39317: PPUSH
39318: CALL_OW 264
39322: PUSH
39323: LD_INT 14
39325: PUSH
39326: LD_INT 53
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: IN
39333: IFFALSE 39354
// points := [ 40 , 10 , 20 ] ;
39335: LD_ADDR_VAR 0 9
39339: PUSH
39340: LD_INT 40
39342: PUSH
39343: LD_INT 10
39345: PUSH
39346: LD_INT 20
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39354: LD_VAR 0 6
39358: PPUSH
39359: CALL_OW 264
39363: PUSH
39364: LD_INT 9
39366: PUSH
39367: EMPTY
39368: LIST
39369: IN
39370: IFFALSE 39391
// points := [ 5 , 70 , 20 ] ;
39372: LD_ADDR_VAR 0 9
39376: PUSH
39377: LD_INT 5
39379: PUSH
39380: LD_INT 70
39382: PUSH
39383: LD_INT 20
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: LIST
39390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39391: LD_VAR 0 6
39395: PPUSH
39396: CALL_OW 264
39400: PUSH
39401: LD_INT 10
39403: PUSH
39404: EMPTY
39405: LIST
39406: IN
39407: IFFALSE 39428
// points := [ 35 , 110 , 70 ] ;
39409: LD_ADDR_VAR 0 9
39413: PUSH
39414: LD_INT 35
39416: PUSH
39417: LD_INT 110
39419: PUSH
39420: LD_INT 70
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39428: LD_VAR 0 6
39432: PPUSH
39433: CALL_OW 265
39437: PUSH
39438: LD_INT 25
39440: EQUAL
39441: IFFALSE 39462
// points := [ 80 , 65 , 100 ] ;
39443: LD_ADDR_VAR 0 9
39447: PUSH
39448: LD_INT 80
39450: PUSH
39451: LD_INT 65
39453: PUSH
39454: LD_INT 100
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39462: LD_VAR 0 6
39466: PPUSH
39467: CALL_OW 263
39471: PUSH
39472: LD_INT 1
39474: EQUAL
39475: IFFALSE 39510
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39477: LD_ADDR_VAR 0 10
39481: PUSH
39482: LD_VAR 0 10
39486: PUSH
39487: LD_VAR 0 6
39491: PPUSH
39492: CALL_OW 311
39496: PPUSH
39497: LD_INT 3
39499: PPUSH
39500: CALL_OW 259
39504: PUSH
39505: LD_INT 4
39507: MUL
39508: MUL
39509: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39510: LD_VAR 0 6
39514: PPUSH
39515: CALL_OW 263
39519: PUSH
39520: LD_INT 2
39522: EQUAL
39523: IFFALSE 39574
// begin j := IsControledBy ( i ) ;
39525: LD_ADDR_VAR 0 7
39529: PUSH
39530: LD_VAR 0 6
39534: PPUSH
39535: CALL_OW 312
39539: ST_TO_ADDR
// if j then
39540: LD_VAR 0 7
39544: IFFALSE 39574
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39546: LD_ADDR_VAR 0 10
39550: PUSH
39551: LD_VAR 0 10
39555: PUSH
39556: LD_VAR 0 7
39560: PPUSH
39561: LD_INT 3
39563: PPUSH
39564: CALL_OW 259
39568: PUSH
39569: LD_INT 3
39571: MUL
39572: MUL
39573: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39574: LD_VAR 0 6
39578: PPUSH
39579: CALL_OW 264
39583: PUSH
39584: LD_INT 5
39586: PUSH
39587: LD_INT 6
39589: PUSH
39590: LD_INT 46
39592: PUSH
39593: LD_INT 44
39595: PUSH
39596: LD_INT 47
39598: PUSH
39599: LD_INT 45
39601: PUSH
39602: LD_INT 28
39604: PUSH
39605: LD_INT 7
39607: PUSH
39608: LD_INT 27
39610: PUSH
39611: LD_INT 29
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: IN
39626: PUSH
39627: LD_VAR 0 1
39631: PPUSH
39632: LD_INT 52
39634: PPUSH
39635: CALL_OW 321
39639: PUSH
39640: LD_INT 2
39642: EQUAL
39643: AND
39644: IFFALSE 39661
// bpoints := bpoints * 1.2 ;
39646: LD_ADDR_VAR 0 10
39650: PUSH
39651: LD_VAR 0 10
39655: PUSH
39656: LD_REAL  1.20000000000000E+0000
39659: MUL
39660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39661: LD_VAR 0 6
39665: PPUSH
39666: CALL_OW 264
39670: PUSH
39671: LD_INT 6
39673: PUSH
39674: LD_INT 46
39676: PUSH
39677: LD_INT 47
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: IN
39685: IFFALSE 39702
// bpoints := bpoints * 1.2 ;
39687: LD_ADDR_VAR 0 10
39691: PUSH
39692: LD_VAR 0 10
39696: PUSH
39697: LD_REAL  1.20000000000000E+0000
39700: MUL
39701: ST_TO_ADDR
// end ; unit_building :
39702: GO 39716
39704: LD_INT 3
39706: DOUBLE
39707: EQUAL
39708: IFTRUE 39712
39710: GO 39715
39712: POP
// ; end ;
39713: GO 39716
39715: POP
// for j = 1 to 3 do
39716: LD_ADDR_VAR 0 7
39720: PUSH
39721: DOUBLE
39722: LD_INT 1
39724: DEC
39725: ST_TO_ADDR
39726: LD_INT 3
39728: PUSH
39729: FOR_TO
39730: IFFALSE 39783
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39732: LD_ADDR_VAR 0 5
39736: PUSH
39737: LD_VAR 0 5
39741: PPUSH
39742: LD_VAR 0 7
39746: PPUSH
39747: LD_VAR 0 5
39751: PUSH
39752: LD_VAR 0 7
39756: ARRAY
39757: PUSH
39758: LD_VAR 0 9
39762: PUSH
39763: LD_VAR 0 7
39767: ARRAY
39768: PUSH
39769: LD_VAR 0 10
39773: MUL
39774: PLUS
39775: PPUSH
39776: CALL_OW 1
39780: ST_TO_ADDR
39781: GO 39729
39783: POP
39784: POP
// end ;
39785: GO 38264
39787: POP
39788: POP
// result := Replace ( result , 4 , tmp ) ;
39789: LD_ADDR_VAR 0 5
39793: PUSH
39794: LD_VAR 0 5
39798: PPUSH
39799: LD_INT 4
39801: PPUSH
39802: LD_VAR 0 8
39806: PPUSH
39807: CALL_OW 1
39811: ST_TO_ADDR
// end ;
39812: LD_VAR 0 5
39816: RET
// export function DangerAtRange ( unit , range ) ; begin
39817: LD_INT 0
39819: PPUSH
// if not unit then
39820: LD_VAR 0 1
39824: NOT
39825: IFFALSE 39829
// exit ;
39827: GO 39874
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39829: LD_ADDR_VAR 0 3
39833: PUSH
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 255
39843: PPUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: CALL_OW 250
39853: PPUSH
39854: LD_VAR 0 1
39858: PPUSH
39859: CALL_OW 251
39863: PPUSH
39864: LD_VAR 0 2
39868: PPUSH
39869: CALL 38116 0 4
39873: ST_TO_ADDR
// end ;
39874: LD_VAR 0 3
39878: RET
// export function DangerInArea ( side , area ) ; begin
39879: LD_INT 0
39881: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_VAR 0 2
39891: PPUSH
39892: LD_INT 81
39894: PUSH
39895: LD_VAR 0 1
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PPUSH
39904: CALL_OW 70
39908: ST_TO_ADDR
// end ;
39909: LD_VAR 0 3
39913: RET
// export function IsExtension ( b ) ; begin
39914: LD_INT 0
39916: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39917: LD_ADDR_VAR 0 2
39921: PUSH
39922: LD_VAR 0 1
39926: PUSH
39927: LD_INT 23
39929: PUSH
39930: LD_INT 20
39932: PUSH
39933: LD_INT 22
39935: PUSH
39936: LD_INT 17
39938: PUSH
39939: LD_INT 24
39941: PUSH
39942: LD_INT 21
39944: PUSH
39945: LD_INT 19
39947: PUSH
39948: LD_INT 16
39950: PUSH
39951: LD_INT 25
39953: PUSH
39954: LD_INT 18
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: IN
39969: ST_TO_ADDR
// end ;
39970: LD_VAR 0 2
39974: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39975: LD_INT 0
39977: PPUSH
39978: PPUSH
39979: PPUSH
// result := [ ] ;
39980: LD_ADDR_VAR 0 4
39984: PUSH
39985: EMPTY
39986: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39987: LD_ADDR_VAR 0 5
39991: PUSH
39992: LD_VAR 0 2
39996: PPUSH
39997: LD_INT 21
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PPUSH
40007: CALL_OW 70
40011: ST_TO_ADDR
// if not tmp then
40012: LD_VAR 0 5
40016: NOT
40017: IFFALSE 40021
// exit ;
40019: GO 40085
// if checkLink then
40021: LD_VAR 0 3
40025: IFFALSE 40075
// begin for i in tmp do
40027: LD_ADDR_VAR 0 6
40031: PUSH
40032: LD_VAR 0 5
40036: PUSH
40037: FOR_IN
40038: IFFALSE 40073
// if GetBase ( i ) <> base then
40040: LD_VAR 0 6
40044: PPUSH
40045: CALL_OW 274
40049: PUSH
40050: LD_VAR 0 1
40054: NONEQUAL
40055: IFFALSE 40071
// ComLinkToBase ( base , i ) ;
40057: LD_VAR 0 1
40061: PPUSH
40062: LD_VAR 0 6
40066: PPUSH
40067: CALL_OW 169
40071: GO 40037
40073: POP
40074: POP
// end ; result := tmp ;
40075: LD_ADDR_VAR 0 4
40079: PUSH
40080: LD_VAR 0 5
40084: ST_TO_ADDR
// end ;
40085: LD_VAR 0 4
40089: RET
// export function ComComplete ( units , b ) ; var i ; begin
40090: LD_INT 0
40092: PPUSH
40093: PPUSH
// if not units then
40094: LD_VAR 0 1
40098: NOT
40099: IFFALSE 40103
// exit ;
40101: GO 40193
// for i in units do
40103: LD_ADDR_VAR 0 4
40107: PUSH
40108: LD_VAR 0 1
40112: PUSH
40113: FOR_IN
40114: IFFALSE 40191
// if BuildingStatus ( b ) = bs_build then
40116: LD_VAR 0 2
40120: PPUSH
40121: CALL_OW 461
40125: PUSH
40126: LD_INT 1
40128: EQUAL
40129: IFFALSE 40189
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40131: LD_VAR 0 4
40135: PPUSH
40136: LD_STRING h
40138: PUSH
40139: LD_VAR 0 2
40143: PPUSH
40144: CALL_OW 250
40148: PUSH
40149: LD_VAR 0 2
40153: PPUSH
40154: CALL_OW 251
40158: PUSH
40159: LD_VAR 0 2
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: PPUSH
40185: CALL_OW 446
40189: GO 40113
40191: POP
40192: POP
// end ;
40193: LD_VAR 0 3
40197: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40198: LD_INT 0
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40206: LD_VAR 0 1
40210: NOT
40211: PUSH
40212: LD_VAR 0 1
40216: PPUSH
40217: CALL_OW 263
40221: PUSH
40222: LD_INT 2
40224: NONEQUAL
40225: OR
40226: IFFALSE 40230
// exit ;
40228: GO 40546
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40230: LD_ADDR_VAR 0 6
40234: PUSH
40235: LD_INT 22
40237: PUSH
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL_OW 255
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: LD_INT 30
40257: PUSH
40258: LD_INT 36
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 34
40267: PUSH
40268: LD_INT 31
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PPUSH
40284: CALL_OW 69
40288: ST_TO_ADDR
// if not tmp then
40289: LD_VAR 0 6
40293: NOT
40294: IFFALSE 40298
// exit ;
40296: GO 40546
// result := [ ] ;
40298: LD_ADDR_VAR 0 2
40302: PUSH
40303: EMPTY
40304: ST_TO_ADDR
// for i in tmp do
40305: LD_ADDR_VAR 0 3
40309: PUSH
40310: LD_VAR 0 6
40314: PUSH
40315: FOR_IN
40316: IFFALSE 40387
// begin t := UnitsInside ( i ) ;
40318: LD_ADDR_VAR 0 4
40322: PUSH
40323: LD_VAR 0 3
40327: PPUSH
40328: CALL_OW 313
40332: ST_TO_ADDR
// if t then
40333: LD_VAR 0 4
40337: IFFALSE 40385
// for j in t do
40339: LD_ADDR_VAR 0 7
40343: PUSH
40344: LD_VAR 0 4
40348: PUSH
40349: FOR_IN
40350: IFFALSE 40383
// result := Replace ( result , result + 1 , j ) ;
40352: LD_ADDR_VAR 0 2
40356: PUSH
40357: LD_VAR 0 2
40361: PPUSH
40362: LD_VAR 0 2
40366: PUSH
40367: LD_INT 1
40369: PLUS
40370: PPUSH
40371: LD_VAR 0 7
40375: PPUSH
40376: CALL_OW 1
40380: ST_TO_ADDR
40381: GO 40349
40383: POP
40384: POP
// end ;
40385: GO 40315
40387: POP
40388: POP
// if not result then
40389: LD_VAR 0 2
40393: NOT
40394: IFFALSE 40398
// exit ;
40396: GO 40546
// mech := result [ 1 ] ;
40398: LD_ADDR_VAR 0 5
40402: PUSH
40403: LD_VAR 0 2
40407: PUSH
40408: LD_INT 1
40410: ARRAY
40411: ST_TO_ADDR
// if result > 1 then
40412: LD_VAR 0 2
40416: PUSH
40417: LD_INT 1
40419: GREATER
40420: IFFALSE 40532
// begin for i = 2 to result do
40422: LD_ADDR_VAR 0 3
40426: PUSH
40427: DOUBLE
40428: LD_INT 2
40430: DEC
40431: ST_TO_ADDR
40432: LD_VAR 0 2
40436: PUSH
40437: FOR_TO
40438: IFFALSE 40530
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40440: LD_ADDR_VAR 0 4
40444: PUSH
40445: LD_VAR 0 2
40449: PUSH
40450: LD_VAR 0 3
40454: ARRAY
40455: PPUSH
40456: LD_INT 3
40458: PPUSH
40459: CALL_OW 259
40463: PUSH
40464: LD_VAR 0 2
40468: PUSH
40469: LD_VAR 0 3
40473: ARRAY
40474: PPUSH
40475: CALL_OW 432
40479: MINUS
40480: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40481: LD_VAR 0 4
40485: PUSH
40486: LD_VAR 0 5
40490: PPUSH
40491: LD_INT 3
40493: PPUSH
40494: CALL_OW 259
40498: PUSH
40499: LD_VAR 0 5
40503: PPUSH
40504: CALL_OW 432
40508: MINUS
40509: GREATEREQUAL
40510: IFFALSE 40528
// mech := result [ i ] ;
40512: LD_ADDR_VAR 0 5
40516: PUSH
40517: LD_VAR 0 2
40521: PUSH
40522: LD_VAR 0 3
40526: ARRAY
40527: ST_TO_ADDR
// end ;
40528: GO 40437
40530: POP
40531: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40532: LD_VAR 0 1
40536: PPUSH
40537: LD_VAR 0 5
40541: PPUSH
40542: CALL_OW 135
// end ;
40546: LD_VAR 0 2
40550: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40551: LD_INT 0
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
// result := [ ] ;
40566: LD_ADDR_VAR 0 7
40570: PUSH
40571: EMPTY
40572: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40573: LD_VAR 0 1
40577: PPUSH
40578: CALL_OW 266
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: IN
40593: NOT
40594: IFFALSE 40598
// exit ;
40596: GO 42232
// if name then
40598: LD_VAR 0 3
40602: IFFALSE 40618
// SetBName ( base_dep , name ) ;
40604: LD_VAR 0 1
40608: PPUSH
40609: LD_VAR 0 3
40613: PPUSH
40614: CALL_OW 500
// base := GetBase ( base_dep ) ;
40618: LD_ADDR_VAR 0 15
40622: PUSH
40623: LD_VAR 0 1
40627: PPUSH
40628: CALL_OW 274
40632: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40633: LD_ADDR_VAR 0 16
40637: PUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: CALL_OW 255
40647: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40648: LD_ADDR_VAR 0 17
40652: PUSH
40653: LD_VAR 0 1
40657: PPUSH
40658: CALL_OW 248
40662: ST_TO_ADDR
// if sources then
40663: LD_VAR 0 5
40667: IFFALSE 40714
// for i = 1 to 3 do
40669: LD_ADDR_VAR 0 8
40673: PUSH
40674: DOUBLE
40675: LD_INT 1
40677: DEC
40678: ST_TO_ADDR
40679: LD_INT 3
40681: PUSH
40682: FOR_TO
40683: IFFALSE 40712
// AddResourceType ( base , i , sources [ i ] ) ;
40685: LD_VAR 0 15
40689: PPUSH
40690: LD_VAR 0 8
40694: PPUSH
40695: LD_VAR 0 5
40699: PUSH
40700: LD_VAR 0 8
40704: ARRAY
40705: PPUSH
40706: CALL_OW 276
40710: GO 40682
40712: POP
40713: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40714: LD_ADDR_VAR 0 18
40718: PUSH
40719: LD_VAR 0 15
40723: PPUSH
40724: LD_VAR 0 2
40728: PPUSH
40729: LD_INT 1
40731: PPUSH
40732: CALL 39975 0 3
40736: ST_TO_ADDR
// InitHc ;
40737: CALL_OW 19
// InitUc ;
40741: CALL_OW 18
// uc_side := side ;
40745: LD_ADDR_OWVAR 20
40749: PUSH
40750: LD_VAR 0 16
40754: ST_TO_ADDR
// uc_nation := nation ;
40755: LD_ADDR_OWVAR 21
40759: PUSH
40760: LD_VAR 0 17
40764: ST_TO_ADDR
// if buildings then
40765: LD_VAR 0 18
40769: IFFALSE 42091
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40771: LD_ADDR_VAR 0 19
40775: PUSH
40776: LD_VAR 0 18
40780: PPUSH
40781: LD_INT 2
40783: PUSH
40784: LD_INT 30
40786: PUSH
40787: LD_INT 29
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 30
40796: PUSH
40797: LD_INT 30
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: PPUSH
40809: CALL_OW 72
40813: ST_TO_ADDR
// if tmp then
40814: LD_VAR 0 19
40818: IFFALSE 40866
// for i in tmp do
40820: LD_ADDR_VAR 0 8
40824: PUSH
40825: LD_VAR 0 19
40829: PUSH
40830: FOR_IN
40831: IFFALSE 40864
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40833: LD_VAR 0 8
40837: PPUSH
40838: CALL_OW 250
40842: PPUSH
40843: LD_VAR 0 8
40847: PPUSH
40848: CALL_OW 251
40852: PPUSH
40853: LD_VAR 0 16
40857: PPUSH
40858: CALL_OW 441
40862: GO 40830
40864: POP
40865: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40866: LD_VAR 0 18
40870: PPUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 30
40876: PUSH
40877: LD_INT 32
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 30
40886: PUSH
40887: LD_INT 33
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: PPUSH
40899: CALL_OW 72
40903: IFFALSE 40991
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40905: LD_ADDR_VAR 0 8
40909: PUSH
40910: LD_VAR 0 18
40914: PPUSH
40915: LD_INT 2
40917: PUSH
40918: LD_INT 30
40920: PUSH
40921: LD_INT 32
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 30
40930: PUSH
40931: LD_INT 33
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: PPUSH
40943: CALL_OW 72
40947: PUSH
40948: FOR_IN
40949: IFFALSE 40989
// begin if not GetBWeapon ( i ) then
40951: LD_VAR 0 8
40955: PPUSH
40956: CALL_OW 269
40960: NOT
40961: IFFALSE 40987
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40963: LD_VAR 0 8
40967: PPUSH
40968: LD_VAR 0 8
40972: PPUSH
40973: LD_VAR 0 2
40977: PPUSH
40978: CALL 42237 0 2
40982: PPUSH
40983: CALL_OW 431
// end ;
40987: GO 40948
40989: POP
40990: POP
// end ; for i = 1 to personel do
40991: LD_ADDR_VAR 0 8
40995: PUSH
40996: DOUBLE
40997: LD_INT 1
40999: DEC
41000: ST_TO_ADDR
41001: LD_VAR 0 6
41005: PUSH
41006: FOR_TO
41007: IFFALSE 42071
// begin if i > 4 then
41009: LD_VAR 0 8
41013: PUSH
41014: LD_INT 4
41016: GREATER
41017: IFFALSE 41021
// break ;
41019: GO 42071
// case i of 1 :
41021: LD_VAR 0 8
41025: PUSH
41026: LD_INT 1
41028: DOUBLE
41029: EQUAL
41030: IFTRUE 41034
41032: GO 41114
41034: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41035: LD_ADDR_VAR 0 12
41039: PUSH
41040: LD_VAR 0 18
41044: PPUSH
41045: LD_INT 22
41047: PUSH
41048: LD_VAR 0 16
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 58
41059: PUSH
41060: EMPTY
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: LD_INT 30
41068: PUSH
41069: LD_INT 32
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 30
41078: PUSH
41079: LD_INT 4
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 30
41088: PUSH
41089: LD_INT 5
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: PPUSH
41107: CALL_OW 72
41111: ST_TO_ADDR
41112: GO 41336
41114: LD_INT 2
41116: DOUBLE
41117: EQUAL
41118: IFTRUE 41122
41120: GO 41184
41122: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41123: LD_ADDR_VAR 0 12
41127: PUSH
41128: LD_VAR 0 18
41132: PPUSH
41133: LD_INT 22
41135: PUSH
41136: LD_VAR 0 16
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 30
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 30
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PPUSH
41177: CALL_OW 72
41181: ST_TO_ADDR
41182: GO 41336
41184: LD_INT 3
41186: DOUBLE
41187: EQUAL
41188: IFTRUE 41192
41190: GO 41254
41192: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41193: LD_ADDR_VAR 0 12
41197: PUSH
41198: LD_VAR 0 18
41202: PPUSH
41203: LD_INT 22
41205: PUSH
41206: LD_VAR 0 16
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 30
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 30
41230: PUSH
41231: LD_INT 3
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PPUSH
41247: CALL_OW 72
41251: ST_TO_ADDR
41252: GO 41336
41254: LD_INT 4
41256: DOUBLE
41257: EQUAL
41258: IFTRUE 41262
41260: GO 41335
41262: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41263: LD_ADDR_VAR 0 12
41267: PUSH
41268: LD_VAR 0 18
41272: PPUSH
41273: LD_INT 22
41275: PUSH
41276: LD_VAR 0 16
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: LD_INT 30
41290: PUSH
41291: LD_INT 6
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 30
41300: PUSH
41301: LD_INT 7
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 30
41310: PUSH
41311: LD_INT 8
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PPUSH
41328: CALL_OW 72
41332: ST_TO_ADDR
41333: GO 41336
41335: POP
// if i = 1 then
41336: LD_VAR 0 8
41340: PUSH
41341: LD_INT 1
41343: EQUAL
41344: IFFALSE 41455
// begin tmp := [ ] ;
41346: LD_ADDR_VAR 0 19
41350: PUSH
41351: EMPTY
41352: ST_TO_ADDR
// for j in f do
41353: LD_ADDR_VAR 0 9
41357: PUSH
41358: LD_VAR 0 12
41362: PUSH
41363: FOR_IN
41364: IFFALSE 41437
// if GetBType ( j ) = b_bunker then
41366: LD_VAR 0 9
41370: PPUSH
41371: CALL_OW 266
41375: PUSH
41376: LD_INT 32
41378: EQUAL
41379: IFFALSE 41406
// tmp := Insert ( tmp , 1 , j ) else
41381: LD_ADDR_VAR 0 19
41385: PUSH
41386: LD_VAR 0 19
41390: PPUSH
41391: LD_INT 1
41393: PPUSH
41394: LD_VAR 0 9
41398: PPUSH
41399: CALL_OW 2
41403: ST_TO_ADDR
41404: GO 41435
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41406: LD_ADDR_VAR 0 19
41410: PUSH
41411: LD_VAR 0 19
41415: PPUSH
41416: LD_VAR 0 19
41420: PUSH
41421: LD_INT 1
41423: PLUS
41424: PPUSH
41425: LD_VAR 0 9
41429: PPUSH
41430: CALL_OW 2
41434: ST_TO_ADDR
41435: GO 41363
41437: POP
41438: POP
// if tmp then
41439: LD_VAR 0 19
41443: IFFALSE 41455
// f := tmp ;
41445: LD_ADDR_VAR 0 12
41449: PUSH
41450: LD_VAR 0 19
41454: ST_TO_ADDR
// end ; x := personel [ i ] ;
41455: LD_ADDR_VAR 0 13
41459: PUSH
41460: LD_VAR 0 6
41464: PUSH
41465: LD_VAR 0 8
41469: ARRAY
41470: ST_TO_ADDR
// if x = - 1 then
41471: LD_VAR 0 13
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: EQUAL
41480: IFFALSE 41689
// begin for j in f do
41482: LD_ADDR_VAR 0 9
41486: PUSH
41487: LD_VAR 0 12
41491: PUSH
41492: FOR_IN
41493: IFFALSE 41685
// repeat InitHc ;
41495: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41499: LD_VAR 0 9
41503: PPUSH
41504: CALL_OW 266
41508: PUSH
41509: LD_INT 5
41511: EQUAL
41512: IFFALSE 41582
// begin if UnitsInside ( j ) < 3 then
41514: LD_VAR 0 9
41518: PPUSH
41519: CALL_OW 313
41523: PUSH
41524: LD_INT 3
41526: LESS
41527: IFFALSE 41563
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41529: LD_INT 0
41531: PPUSH
41532: LD_INT 5
41534: PUSH
41535: LD_INT 8
41537: PUSH
41538: LD_INT 9
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: PUSH
41546: LD_VAR 0 17
41550: ARRAY
41551: PPUSH
41552: LD_VAR 0 4
41556: PPUSH
41557: CALL_OW 380
41561: GO 41580
// PrepareHuman ( false , i , skill ) ;
41563: LD_INT 0
41565: PPUSH
41566: LD_VAR 0 8
41570: PPUSH
41571: LD_VAR 0 4
41575: PPUSH
41576: CALL_OW 380
// end else
41580: GO 41599
// PrepareHuman ( false , i , skill ) ;
41582: LD_INT 0
41584: PPUSH
41585: LD_VAR 0 8
41589: PPUSH
41590: LD_VAR 0 4
41594: PPUSH
41595: CALL_OW 380
// un := CreateHuman ;
41599: LD_ADDR_VAR 0 14
41603: PUSH
41604: CALL_OW 44
41608: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41609: LD_ADDR_VAR 0 7
41613: PUSH
41614: LD_VAR 0 7
41618: PPUSH
41619: LD_INT 1
41621: PPUSH
41622: LD_VAR 0 14
41626: PPUSH
41627: CALL_OW 2
41631: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41632: LD_VAR 0 14
41636: PPUSH
41637: LD_VAR 0 9
41641: PPUSH
41642: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41646: LD_VAR 0 9
41650: PPUSH
41651: CALL_OW 313
41655: PUSH
41656: LD_INT 6
41658: EQUAL
41659: PUSH
41660: LD_VAR 0 9
41664: PPUSH
41665: CALL_OW 266
41669: PUSH
41670: LD_INT 32
41672: PUSH
41673: LD_INT 31
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: IN
41680: OR
41681: IFFALSE 41495
41683: GO 41492
41685: POP
41686: POP
// end else
41687: GO 42069
// for j = 1 to x do
41689: LD_ADDR_VAR 0 9
41693: PUSH
41694: DOUBLE
41695: LD_INT 1
41697: DEC
41698: ST_TO_ADDR
41699: LD_VAR 0 13
41703: PUSH
41704: FOR_TO
41705: IFFALSE 42067
// begin InitHc ;
41707: CALL_OW 19
// if not f then
41711: LD_VAR 0 12
41715: NOT
41716: IFFALSE 41805
// begin PrepareHuman ( false , i , skill ) ;
41718: LD_INT 0
41720: PPUSH
41721: LD_VAR 0 8
41725: PPUSH
41726: LD_VAR 0 4
41730: PPUSH
41731: CALL_OW 380
// un := CreateHuman ;
41735: LD_ADDR_VAR 0 14
41739: PUSH
41740: CALL_OW 44
41744: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41745: LD_ADDR_VAR 0 7
41749: PUSH
41750: LD_VAR 0 7
41754: PPUSH
41755: LD_INT 1
41757: PPUSH
41758: LD_VAR 0 14
41762: PPUSH
41763: CALL_OW 2
41767: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41768: LD_VAR 0 14
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 250
41782: PPUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: CALL_OW 251
41792: PPUSH
41793: LD_INT 10
41795: PPUSH
41796: LD_INT 0
41798: PPUSH
41799: CALL_OW 50
// continue ;
41803: GO 41704
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41805: LD_VAR 0 12
41809: PUSH
41810: LD_INT 1
41812: ARRAY
41813: PPUSH
41814: CALL_OW 313
41818: PUSH
41819: LD_VAR 0 12
41823: PUSH
41824: LD_INT 1
41826: ARRAY
41827: PPUSH
41828: CALL_OW 266
41832: PUSH
41833: LD_INT 32
41835: PUSH
41836: LD_INT 31
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: IN
41843: AND
41844: PUSH
41845: LD_VAR 0 12
41849: PUSH
41850: LD_INT 1
41852: ARRAY
41853: PPUSH
41854: CALL_OW 313
41858: PUSH
41859: LD_INT 6
41861: EQUAL
41862: OR
41863: IFFALSE 41883
// f := Delete ( f , 1 ) ;
41865: LD_ADDR_VAR 0 12
41869: PUSH
41870: LD_VAR 0 12
41874: PPUSH
41875: LD_INT 1
41877: PPUSH
41878: CALL_OW 3
41882: ST_TO_ADDR
// if not f then
41883: LD_VAR 0 12
41887: NOT
41888: IFFALSE 41906
// begin x := x + 2 ;
41890: LD_ADDR_VAR 0 13
41894: PUSH
41895: LD_VAR 0 13
41899: PUSH
41900: LD_INT 2
41902: PLUS
41903: ST_TO_ADDR
// continue ;
41904: GO 41704
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41906: LD_VAR 0 12
41910: PUSH
41911: LD_INT 1
41913: ARRAY
41914: PPUSH
41915: CALL_OW 266
41919: PUSH
41920: LD_INT 5
41922: EQUAL
41923: IFFALSE 41997
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41925: LD_VAR 0 12
41929: PUSH
41930: LD_INT 1
41932: ARRAY
41933: PPUSH
41934: CALL_OW 313
41938: PUSH
41939: LD_INT 3
41941: LESS
41942: IFFALSE 41978
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41944: LD_INT 0
41946: PPUSH
41947: LD_INT 5
41949: PUSH
41950: LD_INT 8
41952: PUSH
41953: LD_INT 9
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: LIST
41960: PUSH
41961: LD_VAR 0 17
41965: ARRAY
41966: PPUSH
41967: LD_VAR 0 4
41971: PPUSH
41972: CALL_OW 380
41976: GO 41995
// PrepareHuman ( false , i , skill ) ;
41978: LD_INT 0
41980: PPUSH
41981: LD_VAR 0 8
41985: PPUSH
41986: LD_VAR 0 4
41990: PPUSH
41991: CALL_OW 380
// end else
41995: GO 42014
// PrepareHuman ( false , i , skill ) ;
41997: LD_INT 0
41999: PPUSH
42000: LD_VAR 0 8
42004: PPUSH
42005: LD_VAR 0 4
42009: PPUSH
42010: CALL_OW 380
// un := CreateHuman ;
42014: LD_ADDR_VAR 0 14
42018: PUSH
42019: CALL_OW 44
42023: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42024: LD_ADDR_VAR 0 7
42028: PUSH
42029: LD_VAR 0 7
42033: PPUSH
42034: LD_INT 1
42036: PPUSH
42037: LD_VAR 0 14
42041: PPUSH
42042: CALL_OW 2
42046: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42047: LD_VAR 0 14
42051: PPUSH
42052: LD_VAR 0 12
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: PPUSH
42061: CALL_OW 52
// end ;
42065: GO 41704
42067: POP
42068: POP
// end ;
42069: GO 41006
42071: POP
42072: POP
// result := result ^ buildings ;
42073: LD_ADDR_VAR 0 7
42077: PUSH
42078: LD_VAR 0 7
42082: PUSH
42083: LD_VAR 0 18
42087: ADD
42088: ST_TO_ADDR
// end else
42089: GO 42232
// begin for i = 1 to personel do
42091: LD_ADDR_VAR 0 8
42095: PUSH
42096: DOUBLE
42097: LD_INT 1
42099: DEC
42100: ST_TO_ADDR
42101: LD_VAR 0 6
42105: PUSH
42106: FOR_TO
42107: IFFALSE 42230
// begin if i > 4 then
42109: LD_VAR 0 8
42113: PUSH
42114: LD_INT 4
42116: GREATER
42117: IFFALSE 42121
// break ;
42119: GO 42230
// x := personel [ i ] ;
42121: LD_ADDR_VAR 0 13
42125: PUSH
42126: LD_VAR 0 6
42130: PUSH
42131: LD_VAR 0 8
42135: ARRAY
42136: ST_TO_ADDR
// if x = - 1 then
42137: LD_VAR 0 13
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: EQUAL
42146: IFFALSE 42150
// continue ;
42148: GO 42106
// PrepareHuman ( false , i , skill ) ;
42150: LD_INT 0
42152: PPUSH
42153: LD_VAR 0 8
42157: PPUSH
42158: LD_VAR 0 4
42162: PPUSH
42163: CALL_OW 380
// un := CreateHuman ;
42167: LD_ADDR_VAR 0 14
42171: PUSH
42172: CALL_OW 44
42176: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42177: LD_VAR 0 14
42181: PPUSH
42182: LD_VAR 0 1
42186: PPUSH
42187: CALL_OW 250
42191: PPUSH
42192: LD_VAR 0 1
42196: PPUSH
42197: CALL_OW 251
42201: PPUSH
42202: LD_INT 10
42204: PPUSH
42205: LD_INT 0
42207: PPUSH
42208: CALL_OW 50
// result := result ^ un ;
42212: LD_ADDR_VAR 0 7
42216: PUSH
42217: LD_VAR 0 7
42221: PUSH
42222: LD_VAR 0 14
42226: ADD
42227: ST_TO_ADDR
// end ;
42228: GO 42106
42230: POP
42231: POP
// end ; end ;
42232: LD_VAR 0 7
42236: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42237: LD_INT 0
42239: PPUSH
42240: PPUSH
42241: PPUSH
42242: PPUSH
42243: PPUSH
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
42249: PPUSH
42250: PPUSH
42251: PPUSH
42252: PPUSH
42253: PPUSH
42254: PPUSH
// result := false ;
42255: LD_ADDR_VAR 0 3
42259: PUSH
42260: LD_INT 0
42262: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42263: LD_VAR 0 1
42267: NOT
42268: PUSH
42269: LD_VAR 0 1
42273: PPUSH
42274: CALL_OW 266
42278: PUSH
42279: LD_INT 32
42281: PUSH
42282: LD_INT 33
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: IN
42289: NOT
42290: OR
42291: IFFALSE 42295
// exit ;
42293: GO 43404
// nat := GetNation ( tower ) ;
42295: LD_ADDR_VAR 0 12
42299: PUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 248
42309: ST_TO_ADDR
// side := GetSide ( tower ) ;
42310: LD_ADDR_VAR 0 16
42314: PUSH
42315: LD_VAR 0 1
42319: PPUSH
42320: CALL_OW 255
42324: ST_TO_ADDR
// x := GetX ( tower ) ;
42325: LD_ADDR_VAR 0 10
42329: PUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: CALL_OW 250
42339: ST_TO_ADDR
// y := GetY ( tower ) ;
42340: LD_ADDR_VAR 0 11
42344: PUSH
42345: LD_VAR 0 1
42349: PPUSH
42350: CALL_OW 251
42354: ST_TO_ADDR
// if not x or not y then
42355: LD_VAR 0 10
42359: NOT
42360: PUSH
42361: LD_VAR 0 11
42365: NOT
42366: OR
42367: IFFALSE 42371
// exit ;
42369: GO 43404
// weapon := 0 ;
42371: LD_ADDR_VAR 0 18
42375: PUSH
42376: LD_INT 0
42378: ST_TO_ADDR
// fac_list := [ ] ;
42379: LD_ADDR_VAR 0 17
42383: PUSH
42384: EMPTY
42385: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42386: LD_ADDR_VAR 0 6
42390: PUSH
42391: LD_VAR 0 1
42395: PPUSH
42396: CALL_OW 274
42400: PPUSH
42401: LD_VAR 0 2
42405: PPUSH
42406: LD_INT 0
42408: PPUSH
42409: CALL 39975 0 3
42413: PPUSH
42414: LD_INT 30
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PPUSH
42424: CALL_OW 72
42428: ST_TO_ADDR
// if not factories then
42429: LD_VAR 0 6
42433: NOT
42434: IFFALSE 42438
// exit ;
42436: GO 43404
// for i in factories do
42438: LD_ADDR_VAR 0 8
42442: PUSH
42443: LD_VAR 0 6
42447: PUSH
42448: FOR_IN
42449: IFFALSE 42474
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42451: LD_ADDR_VAR 0 17
42455: PUSH
42456: LD_VAR 0 17
42460: PUSH
42461: LD_VAR 0 8
42465: PPUSH
42466: CALL_OW 478
42470: UNION
42471: ST_TO_ADDR
42472: GO 42448
42474: POP
42475: POP
// if not fac_list then
42476: LD_VAR 0 17
42480: NOT
42481: IFFALSE 42485
// exit ;
42483: GO 43404
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42485: LD_ADDR_VAR 0 5
42489: PUSH
42490: LD_INT 4
42492: PUSH
42493: LD_INT 5
42495: PUSH
42496: LD_INT 9
42498: PUSH
42499: LD_INT 10
42501: PUSH
42502: LD_INT 6
42504: PUSH
42505: LD_INT 7
42507: PUSH
42508: LD_INT 11
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 27
42522: PUSH
42523: LD_INT 28
42525: PUSH
42526: LD_INT 26
42528: PUSH
42529: LD_INT 30
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 43
42540: PUSH
42541: LD_INT 44
42543: PUSH
42544: LD_INT 46
42546: PUSH
42547: LD_INT 45
42549: PUSH
42550: LD_INT 47
42552: PUSH
42553: LD_INT 49
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: PUSH
42569: LD_VAR 0 12
42573: ARRAY
42574: ST_TO_ADDR
// list := list isect fac_list ;
42575: LD_ADDR_VAR 0 5
42579: PUSH
42580: LD_VAR 0 5
42584: PUSH
42585: LD_VAR 0 17
42589: ISECT
42590: ST_TO_ADDR
// if not list then
42591: LD_VAR 0 5
42595: NOT
42596: IFFALSE 42600
// exit ;
42598: GO 43404
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42600: LD_VAR 0 12
42604: PUSH
42605: LD_INT 3
42607: EQUAL
42608: PUSH
42609: LD_INT 49
42611: PUSH
42612: LD_VAR 0 5
42616: IN
42617: AND
42618: PUSH
42619: LD_INT 31
42621: PPUSH
42622: LD_VAR 0 16
42626: PPUSH
42627: CALL_OW 321
42631: PUSH
42632: LD_INT 2
42634: EQUAL
42635: AND
42636: IFFALSE 42696
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42638: LD_INT 22
42640: PUSH
42641: LD_VAR 0 16
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 35
42652: PUSH
42653: LD_INT 49
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 91
42662: PUSH
42663: LD_VAR 0 1
42667: PUSH
42668: LD_INT 10
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: LIST
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: PPUSH
42681: CALL_OW 69
42685: NOT
42686: IFFALSE 42696
// weapon := ru_time_lapser ;
42688: LD_ADDR_VAR 0 18
42692: PUSH
42693: LD_INT 49
42695: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42696: LD_VAR 0 12
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: IN
42711: PUSH
42712: LD_INT 11
42714: PUSH
42715: LD_VAR 0 5
42719: IN
42720: PUSH
42721: LD_INT 30
42723: PUSH
42724: LD_VAR 0 5
42728: IN
42729: OR
42730: AND
42731: PUSH
42732: LD_INT 6
42734: PPUSH
42735: LD_VAR 0 16
42739: PPUSH
42740: CALL_OW 321
42744: PUSH
42745: LD_INT 2
42747: EQUAL
42748: AND
42749: IFFALSE 42914
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42751: LD_INT 22
42753: PUSH
42754: LD_VAR 0 16
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: LD_INT 35
42768: PUSH
42769: LD_INT 11
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 35
42778: PUSH
42779: LD_INT 30
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 91
42793: PUSH
42794: LD_VAR 0 1
42798: PUSH
42799: LD_INT 18
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: PPUSH
42812: CALL_OW 69
42816: NOT
42817: PUSH
42818: LD_INT 22
42820: PUSH
42821: LD_VAR 0 16
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: LD_INT 30
42835: PUSH
42836: LD_INT 32
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 30
42845: PUSH
42846: LD_INT 33
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 91
42860: PUSH
42861: LD_VAR 0 1
42865: PUSH
42866: LD_INT 12
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: PUSH
42879: EMPTY
42880: LIST
42881: PPUSH
42882: CALL_OW 69
42886: PUSH
42887: LD_INT 2
42889: GREATER
42890: AND
42891: IFFALSE 42914
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42893: LD_ADDR_VAR 0 18
42897: PUSH
42898: LD_INT 11
42900: PUSH
42901: LD_INT 30
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_VAR 0 12
42912: ARRAY
42913: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42914: LD_VAR 0 18
42918: NOT
42919: PUSH
42920: LD_INT 40
42922: PPUSH
42923: LD_VAR 0 16
42927: PPUSH
42928: CALL_OW 321
42932: PUSH
42933: LD_INT 2
42935: EQUAL
42936: AND
42937: PUSH
42938: LD_INT 7
42940: PUSH
42941: LD_VAR 0 5
42945: IN
42946: PUSH
42947: LD_INT 28
42949: PUSH
42950: LD_VAR 0 5
42954: IN
42955: OR
42956: PUSH
42957: LD_INT 45
42959: PUSH
42960: LD_VAR 0 5
42964: IN
42965: OR
42966: AND
42967: IFFALSE 43221
// begin hex := GetHexInfo ( x , y ) ;
42969: LD_ADDR_VAR 0 4
42973: PUSH
42974: LD_VAR 0 10
42978: PPUSH
42979: LD_VAR 0 11
42983: PPUSH
42984: CALL_OW 546
42988: ST_TO_ADDR
// if hex [ 1 ] then
42989: LD_VAR 0 4
42993: PUSH
42994: LD_INT 1
42996: ARRAY
42997: IFFALSE 43001
// exit ;
42999: GO 43404
// height := hex [ 2 ] ;
43001: LD_ADDR_VAR 0 15
43005: PUSH
43006: LD_VAR 0 4
43010: PUSH
43011: LD_INT 2
43013: ARRAY
43014: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43015: LD_ADDR_VAR 0 14
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 2
43025: PUSH
43026: LD_INT 3
43028: PUSH
43029: LD_INT 5
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: ST_TO_ADDR
// for i in tmp do
43038: LD_ADDR_VAR 0 8
43042: PUSH
43043: LD_VAR 0 14
43047: PUSH
43048: FOR_IN
43049: IFFALSE 43219
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43051: LD_ADDR_VAR 0 9
43055: PUSH
43056: LD_VAR 0 10
43060: PPUSH
43061: LD_VAR 0 8
43065: PPUSH
43066: LD_INT 5
43068: PPUSH
43069: CALL_OW 272
43073: PUSH
43074: LD_VAR 0 11
43078: PPUSH
43079: LD_VAR 0 8
43083: PPUSH
43084: LD_INT 5
43086: PPUSH
43087: CALL_OW 273
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43096: LD_VAR 0 9
43100: PUSH
43101: LD_INT 1
43103: ARRAY
43104: PPUSH
43105: LD_VAR 0 9
43109: PUSH
43110: LD_INT 2
43112: ARRAY
43113: PPUSH
43114: CALL_OW 488
43118: IFFALSE 43217
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43120: LD_ADDR_VAR 0 4
43124: PUSH
43125: LD_VAR 0 9
43129: PUSH
43130: LD_INT 1
43132: ARRAY
43133: PPUSH
43134: LD_VAR 0 9
43138: PUSH
43139: LD_INT 2
43141: ARRAY
43142: PPUSH
43143: CALL_OW 546
43147: ST_TO_ADDR
// if hex [ 1 ] then
43148: LD_VAR 0 4
43152: PUSH
43153: LD_INT 1
43155: ARRAY
43156: IFFALSE 43160
// continue ;
43158: GO 43048
// h := hex [ 2 ] ;
43160: LD_ADDR_VAR 0 13
43164: PUSH
43165: LD_VAR 0 4
43169: PUSH
43170: LD_INT 2
43172: ARRAY
43173: ST_TO_ADDR
// if h + 7 < height then
43174: LD_VAR 0 13
43178: PUSH
43179: LD_INT 7
43181: PLUS
43182: PUSH
43183: LD_VAR 0 15
43187: LESS
43188: IFFALSE 43217
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43190: LD_ADDR_VAR 0 18
43194: PUSH
43195: LD_INT 7
43197: PUSH
43198: LD_INT 28
43200: PUSH
43201: LD_INT 45
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: LIST
43208: PUSH
43209: LD_VAR 0 12
43213: ARRAY
43214: ST_TO_ADDR
// break ;
43215: GO 43219
// end ; end ; end ;
43217: GO 43048
43219: POP
43220: POP
// end ; if not weapon then
43221: LD_VAR 0 18
43225: NOT
43226: IFFALSE 43286
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43228: LD_ADDR_VAR 0 5
43232: PUSH
43233: LD_VAR 0 5
43237: PUSH
43238: LD_INT 11
43240: PUSH
43241: LD_INT 30
43243: PUSH
43244: LD_INT 49
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: DIFF
43252: ST_TO_ADDR
// if not list then
43253: LD_VAR 0 5
43257: NOT
43258: IFFALSE 43262
// exit ;
43260: GO 43404
// weapon := list [ rand ( 1 , list ) ] ;
43262: LD_ADDR_VAR 0 18
43266: PUSH
43267: LD_VAR 0 5
43271: PUSH
43272: LD_INT 1
43274: PPUSH
43275: LD_VAR 0 5
43279: PPUSH
43280: CALL_OW 12
43284: ARRAY
43285: ST_TO_ADDR
// end ; if weapon then
43286: LD_VAR 0 18
43290: IFFALSE 43404
// begin tmp := CostOfWeapon ( weapon ) ;
43292: LD_ADDR_VAR 0 14
43296: PUSH
43297: LD_VAR 0 18
43301: PPUSH
43302: CALL_OW 451
43306: ST_TO_ADDR
// j := GetBase ( tower ) ;
43307: LD_ADDR_VAR 0 9
43311: PUSH
43312: LD_VAR 0 1
43316: PPUSH
43317: CALL_OW 274
43321: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43322: LD_VAR 0 9
43326: PPUSH
43327: LD_INT 1
43329: PPUSH
43330: CALL_OW 275
43334: PUSH
43335: LD_VAR 0 14
43339: PUSH
43340: LD_INT 1
43342: ARRAY
43343: GREATEREQUAL
43344: PUSH
43345: LD_VAR 0 9
43349: PPUSH
43350: LD_INT 2
43352: PPUSH
43353: CALL_OW 275
43357: PUSH
43358: LD_VAR 0 14
43362: PUSH
43363: LD_INT 2
43365: ARRAY
43366: GREATEREQUAL
43367: AND
43368: PUSH
43369: LD_VAR 0 9
43373: PPUSH
43374: LD_INT 3
43376: PPUSH
43377: CALL_OW 275
43381: PUSH
43382: LD_VAR 0 14
43386: PUSH
43387: LD_INT 3
43389: ARRAY
43390: GREATEREQUAL
43391: AND
43392: IFFALSE 43404
// result := weapon ;
43394: LD_ADDR_VAR 0 3
43398: PUSH
43399: LD_VAR 0 18
43403: ST_TO_ADDR
// end ; end ;
43404: LD_VAR 0 3
43408: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43409: LD_INT 0
43411: PPUSH
43412: PPUSH
// result := true ;
43413: LD_ADDR_VAR 0 3
43417: PUSH
43418: LD_INT 1
43420: ST_TO_ADDR
// if array1 = array2 then
43421: LD_VAR 0 1
43425: PUSH
43426: LD_VAR 0 2
43430: EQUAL
43431: IFFALSE 43491
// begin for i = 1 to array1 do
43433: LD_ADDR_VAR 0 4
43437: PUSH
43438: DOUBLE
43439: LD_INT 1
43441: DEC
43442: ST_TO_ADDR
43443: LD_VAR 0 1
43447: PUSH
43448: FOR_TO
43449: IFFALSE 43487
// if array1 [ i ] <> array2 [ i ] then
43451: LD_VAR 0 1
43455: PUSH
43456: LD_VAR 0 4
43460: ARRAY
43461: PUSH
43462: LD_VAR 0 2
43466: PUSH
43467: LD_VAR 0 4
43471: ARRAY
43472: NONEQUAL
43473: IFFALSE 43485
// begin result := false ;
43475: LD_ADDR_VAR 0 3
43479: PUSH
43480: LD_INT 0
43482: ST_TO_ADDR
// break ;
43483: GO 43487
// end ;
43485: GO 43448
43487: POP
43488: POP
// end else
43489: GO 43499
// result := false ;
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_INT 0
43498: ST_TO_ADDR
// end ;
43499: LD_VAR 0 3
43503: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43504: LD_INT 0
43506: PPUSH
43507: PPUSH
// if not array1 or not array2 then
43508: LD_VAR 0 1
43512: NOT
43513: PUSH
43514: LD_VAR 0 2
43518: NOT
43519: OR
43520: IFFALSE 43524
// exit ;
43522: GO 43588
// result := true ;
43524: LD_ADDR_VAR 0 3
43528: PUSH
43529: LD_INT 1
43531: ST_TO_ADDR
// for i = 1 to array1 do
43532: LD_ADDR_VAR 0 4
43536: PUSH
43537: DOUBLE
43538: LD_INT 1
43540: DEC
43541: ST_TO_ADDR
43542: LD_VAR 0 1
43546: PUSH
43547: FOR_TO
43548: IFFALSE 43586
// if array1 [ i ] <> array2 [ i ] then
43550: LD_VAR 0 1
43554: PUSH
43555: LD_VAR 0 4
43559: ARRAY
43560: PUSH
43561: LD_VAR 0 2
43565: PUSH
43566: LD_VAR 0 4
43570: ARRAY
43571: NONEQUAL
43572: IFFALSE 43584
// begin result := false ;
43574: LD_ADDR_VAR 0 3
43578: PUSH
43579: LD_INT 0
43581: ST_TO_ADDR
// break ;
43582: GO 43586
// end ;
43584: GO 43547
43586: POP
43587: POP
// end ;
43588: LD_VAR 0 3
43592: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43593: LD_INT 0
43595: PPUSH
43596: PPUSH
43597: PPUSH
// pom := GetBase ( fac ) ;
43598: LD_ADDR_VAR 0 5
43602: PUSH
43603: LD_VAR 0 1
43607: PPUSH
43608: CALL_OW 274
43612: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43613: LD_ADDR_VAR 0 4
43617: PUSH
43618: LD_VAR 0 2
43622: PUSH
43623: LD_INT 1
43625: ARRAY
43626: PPUSH
43627: LD_VAR 0 2
43631: PUSH
43632: LD_INT 2
43634: ARRAY
43635: PPUSH
43636: LD_VAR 0 2
43640: PUSH
43641: LD_INT 3
43643: ARRAY
43644: PPUSH
43645: LD_VAR 0 2
43649: PUSH
43650: LD_INT 4
43652: ARRAY
43653: PPUSH
43654: CALL_OW 449
43658: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43659: LD_ADDR_VAR 0 3
43663: PUSH
43664: LD_VAR 0 5
43668: PPUSH
43669: LD_INT 1
43671: PPUSH
43672: CALL_OW 275
43676: PUSH
43677: LD_VAR 0 4
43681: PUSH
43682: LD_INT 1
43684: ARRAY
43685: GREATEREQUAL
43686: PUSH
43687: LD_VAR 0 5
43691: PPUSH
43692: LD_INT 2
43694: PPUSH
43695: CALL_OW 275
43699: PUSH
43700: LD_VAR 0 4
43704: PUSH
43705: LD_INT 2
43707: ARRAY
43708: GREATEREQUAL
43709: AND
43710: PUSH
43711: LD_VAR 0 5
43715: PPUSH
43716: LD_INT 3
43718: PPUSH
43719: CALL_OW 275
43723: PUSH
43724: LD_VAR 0 4
43728: PUSH
43729: LD_INT 3
43731: ARRAY
43732: GREATEREQUAL
43733: AND
43734: ST_TO_ADDR
// end ;
43735: LD_VAR 0 3
43739: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43740: LD_INT 0
43742: PPUSH
43743: PPUSH
43744: PPUSH
43745: PPUSH
// pom := GetBase ( building ) ;
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: LD_VAR 0 1
43755: PPUSH
43756: CALL_OW 274
43760: ST_TO_ADDR
// if not pom then
43761: LD_VAR 0 3
43765: NOT
43766: IFFALSE 43770
// exit ;
43768: GO 43940
// btype := GetBType ( building ) ;
43770: LD_ADDR_VAR 0 5
43774: PUSH
43775: LD_VAR 0 1
43779: PPUSH
43780: CALL_OW 266
43784: ST_TO_ADDR
// if btype = b_armoury then
43785: LD_VAR 0 5
43789: PUSH
43790: LD_INT 4
43792: EQUAL
43793: IFFALSE 43803
// btype := b_barracks ;
43795: LD_ADDR_VAR 0 5
43799: PUSH
43800: LD_INT 5
43802: ST_TO_ADDR
// if btype = b_depot then
43803: LD_VAR 0 5
43807: PUSH
43808: LD_INT 0
43810: EQUAL
43811: IFFALSE 43821
// btype := b_warehouse ;
43813: LD_ADDR_VAR 0 5
43817: PUSH
43818: LD_INT 1
43820: ST_TO_ADDR
// if btype = b_workshop then
43821: LD_VAR 0 5
43825: PUSH
43826: LD_INT 2
43828: EQUAL
43829: IFFALSE 43839
// btype := b_factory ;
43831: LD_ADDR_VAR 0 5
43835: PUSH
43836: LD_INT 3
43838: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43839: LD_ADDR_VAR 0 4
43843: PUSH
43844: LD_VAR 0 5
43848: PPUSH
43849: LD_VAR 0 1
43853: PPUSH
43854: CALL_OW 248
43858: PPUSH
43859: CALL_OW 450
43863: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43864: LD_ADDR_VAR 0 2
43868: PUSH
43869: LD_VAR 0 3
43873: PPUSH
43874: LD_INT 1
43876: PPUSH
43877: CALL_OW 275
43881: PUSH
43882: LD_VAR 0 4
43886: PUSH
43887: LD_INT 1
43889: ARRAY
43890: GREATEREQUAL
43891: PUSH
43892: LD_VAR 0 3
43896: PPUSH
43897: LD_INT 2
43899: PPUSH
43900: CALL_OW 275
43904: PUSH
43905: LD_VAR 0 4
43909: PUSH
43910: LD_INT 2
43912: ARRAY
43913: GREATEREQUAL
43914: AND
43915: PUSH
43916: LD_VAR 0 3
43920: PPUSH
43921: LD_INT 3
43923: PPUSH
43924: CALL_OW 275
43928: PUSH
43929: LD_VAR 0 4
43933: PUSH
43934: LD_INT 3
43936: ARRAY
43937: GREATEREQUAL
43938: AND
43939: ST_TO_ADDR
// end ;
43940: LD_VAR 0 2
43944: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43945: LD_INT 0
43947: PPUSH
43948: PPUSH
43949: PPUSH
// pom := GetBase ( building ) ;
43950: LD_ADDR_VAR 0 4
43954: PUSH
43955: LD_VAR 0 1
43959: PPUSH
43960: CALL_OW 274
43964: ST_TO_ADDR
// if not pom then
43965: LD_VAR 0 4
43969: NOT
43970: IFFALSE 43974
// exit ;
43972: GO 44075
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43974: LD_ADDR_VAR 0 5
43978: PUSH
43979: LD_VAR 0 2
43983: PPUSH
43984: LD_VAR 0 1
43988: PPUSH
43989: CALL_OW 248
43993: PPUSH
43994: CALL_OW 450
43998: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43999: LD_ADDR_VAR 0 3
44003: PUSH
44004: LD_VAR 0 4
44008: PPUSH
44009: LD_INT 1
44011: PPUSH
44012: CALL_OW 275
44016: PUSH
44017: LD_VAR 0 5
44021: PUSH
44022: LD_INT 1
44024: ARRAY
44025: GREATEREQUAL
44026: PUSH
44027: LD_VAR 0 4
44031: PPUSH
44032: LD_INT 2
44034: PPUSH
44035: CALL_OW 275
44039: PUSH
44040: LD_VAR 0 5
44044: PUSH
44045: LD_INT 2
44047: ARRAY
44048: GREATEREQUAL
44049: AND
44050: PUSH
44051: LD_VAR 0 4
44055: PPUSH
44056: LD_INT 3
44058: PPUSH
44059: CALL_OW 275
44063: PUSH
44064: LD_VAR 0 5
44068: PUSH
44069: LD_INT 3
44071: ARRAY
44072: GREATEREQUAL
44073: AND
44074: ST_TO_ADDR
// end ;
44075: LD_VAR 0 3
44079: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44080: LD_INT 0
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
// result := false ;
44093: LD_ADDR_VAR 0 8
44097: PUSH
44098: LD_INT 0
44100: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44101: LD_VAR 0 5
44105: NOT
44106: PUSH
44107: LD_VAR 0 1
44111: NOT
44112: OR
44113: PUSH
44114: LD_VAR 0 2
44118: NOT
44119: OR
44120: PUSH
44121: LD_VAR 0 3
44125: NOT
44126: OR
44127: IFFALSE 44131
// exit ;
44129: GO 44945
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44131: LD_ADDR_VAR 0 14
44135: PUSH
44136: LD_VAR 0 1
44140: PPUSH
44141: LD_VAR 0 2
44145: PPUSH
44146: LD_VAR 0 3
44150: PPUSH
44151: LD_VAR 0 4
44155: PPUSH
44156: LD_VAR 0 5
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PPUSH
44165: CALL_OW 248
44169: PPUSH
44170: LD_INT 0
44172: PPUSH
44173: CALL 46198 0 6
44177: ST_TO_ADDR
// if not hexes then
44178: LD_VAR 0 14
44182: NOT
44183: IFFALSE 44187
// exit ;
44185: GO 44945
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44187: LD_ADDR_VAR 0 17
44191: PUSH
44192: LD_VAR 0 5
44196: PPUSH
44197: LD_INT 22
44199: PUSH
44200: LD_VAR 0 13
44204: PPUSH
44205: CALL_OW 255
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: LD_INT 30
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 30
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PPUSH
44246: CALL_OW 72
44250: ST_TO_ADDR
// for i = 1 to hexes do
44251: LD_ADDR_VAR 0 9
44255: PUSH
44256: DOUBLE
44257: LD_INT 1
44259: DEC
44260: ST_TO_ADDR
44261: LD_VAR 0 14
44265: PUSH
44266: FOR_TO
44267: IFFALSE 44943
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44269: LD_ADDR_VAR 0 13
44273: PUSH
44274: LD_VAR 0 14
44278: PUSH
44279: LD_VAR 0 9
44283: ARRAY
44284: PUSH
44285: LD_INT 1
44287: ARRAY
44288: PPUSH
44289: LD_VAR 0 14
44293: PUSH
44294: LD_VAR 0 9
44298: ARRAY
44299: PUSH
44300: LD_INT 2
44302: ARRAY
44303: PPUSH
44304: CALL_OW 428
44308: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44309: LD_VAR 0 14
44313: PUSH
44314: LD_VAR 0 9
44318: ARRAY
44319: PUSH
44320: LD_INT 1
44322: ARRAY
44323: PPUSH
44324: LD_VAR 0 14
44328: PUSH
44329: LD_VAR 0 9
44333: ARRAY
44334: PUSH
44335: LD_INT 2
44337: ARRAY
44338: PPUSH
44339: CALL_OW 351
44343: PUSH
44344: LD_VAR 0 14
44348: PUSH
44349: LD_VAR 0 9
44353: ARRAY
44354: PUSH
44355: LD_INT 1
44357: ARRAY
44358: PPUSH
44359: LD_VAR 0 14
44363: PUSH
44364: LD_VAR 0 9
44368: ARRAY
44369: PUSH
44370: LD_INT 2
44372: ARRAY
44373: PPUSH
44374: CALL_OW 488
44378: NOT
44379: OR
44380: PUSH
44381: LD_VAR 0 13
44385: PPUSH
44386: CALL_OW 247
44390: PUSH
44391: LD_INT 3
44393: EQUAL
44394: OR
44395: IFFALSE 44401
// exit ;
44397: POP
44398: POP
44399: GO 44945
// if not tmp then
44401: LD_VAR 0 13
44405: NOT
44406: IFFALSE 44410
// continue ;
44408: GO 44266
// result := true ;
44410: LD_ADDR_VAR 0 8
44414: PUSH
44415: LD_INT 1
44417: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44418: LD_VAR 0 6
44422: PUSH
44423: LD_VAR 0 13
44427: PPUSH
44428: CALL_OW 247
44432: PUSH
44433: LD_INT 2
44435: EQUAL
44436: AND
44437: PUSH
44438: LD_VAR 0 13
44442: PPUSH
44443: CALL_OW 263
44447: PUSH
44448: LD_INT 1
44450: EQUAL
44451: AND
44452: IFFALSE 44616
// begin if IsDrivenBy ( tmp ) then
44454: LD_VAR 0 13
44458: PPUSH
44459: CALL_OW 311
44463: IFFALSE 44467
// continue ;
44465: GO 44266
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44467: LD_VAR 0 6
44471: PPUSH
44472: LD_INT 3
44474: PUSH
44475: LD_INT 60
44477: PUSH
44478: EMPTY
44479: LIST
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: LD_INT 55
44490: PUSH
44491: EMPTY
44492: LIST
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PPUSH
44502: CALL_OW 72
44506: IFFALSE 44614
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44508: LD_ADDR_VAR 0 18
44512: PUSH
44513: LD_VAR 0 6
44517: PPUSH
44518: LD_INT 3
44520: PUSH
44521: LD_INT 60
44523: PUSH
44524: EMPTY
44525: LIST
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 3
44533: PUSH
44534: LD_INT 55
44536: PUSH
44537: EMPTY
44538: LIST
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PPUSH
44548: CALL_OW 72
44552: PUSH
44553: LD_INT 1
44555: ARRAY
44556: ST_TO_ADDR
// if IsInUnit ( driver ) then
44557: LD_VAR 0 18
44561: PPUSH
44562: CALL_OW 310
44566: IFFALSE 44577
// ComExit ( driver ) ;
44568: LD_VAR 0 18
44572: PPUSH
44573: CALL 69999 0 1
// AddComEnterUnit ( driver , tmp ) ;
44577: LD_VAR 0 18
44581: PPUSH
44582: LD_VAR 0 13
44586: PPUSH
44587: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44591: LD_VAR 0 18
44595: PPUSH
44596: LD_VAR 0 7
44600: PPUSH
44601: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44605: LD_VAR 0 18
44609: PPUSH
44610: CALL_OW 181
// end ; continue ;
44614: GO 44266
// end ; if not cleaners or not tmp in cleaners then
44616: LD_VAR 0 6
44620: NOT
44621: PUSH
44622: LD_VAR 0 13
44626: PUSH
44627: LD_VAR 0 6
44631: IN
44632: NOT
44633: OR
44634: IFFALSE 44941
// begin if dep then
44636: LD_VAR 0 17
44640: IFFALSE 44776
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44642: LD_ADDR_VAR 0 16
44646: PUSH
44647: LD_VAR 0 17
44651: PUSH
44652: LD_INT 1
44654: ARRAY
44655: PPUSH
44656: CALL_OW 250
44660: PPUSH
44661: LD_VAR 0 17
44665: PUSH
44666: LD_INT 1
44668: ARRAY
44669: PPUSH
44670: CALL_OW 254
44674: PPUSH
44675: LD_INT 5
44677: PPUSH
44678: CALL_OW 272
44682: PUSH
44683: LD_VAR 0 17
44687: PUSH
44688: LD_INT 1
44690: ARRAY
44691: PPUSH
44692: CALL_OW 251
44696: PPUSH
44697: LD_VAR 0 17
44701: PUSH
44702: LD_INT 1
44704: ARRAY
44705: PPUSH
44706: CALL_OW 254
44710: PPUSH
44711: LD_INT 5
44713: PPUSH
44714: CALL_OW 273
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44723: LD_VAR 0 16
44727: PUSH
44728: LD_INT 1
44730: ARRAY
44731: PPUSH
44732: LD_VAR 0 16
44736: PUSH
44737: LD_INT 2
44739: ARRAY
44740: PPUSH
44741: CALL_OW 488
44745: IFFALSE 44776
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44747: LD_VAR 0 13
44751: PPUSH
44752: LD_VAR 0 16
44756: PUSH
44757: LD_INT 1
44759: ARRAY
44760: PPUSH
44761: LD_VAR 0 16
44765: PUSH
44766: LD_INT 2
44768: ARRAY
44769: PPUSH
44770: CALL_OW 111
// continue ;
44774: GO 44266
// end ; end ; r := GetDir ( tmp ) ;
44776: LD_ADDR_VAR 0 15
44780: PUSH
44781: LD_VAR 0 13
44785: PPUSH
44786: CALL_OW 254
44790: ST_TO_ADDR
// if r = 5 then
44791: LD_VAR 0 15
44795: PUSH
44796: LD_INT 5
44798: EQUAL
44799: IFFALSE 44809
// r := 0 ;
44801: LD_ADDR_VAR 0 15
44805: PUSH
44806: LD_INT 0
44808: ST_TO_ADDR
// for j = r to 5 do
44809: LD_ADDR_VAR 0 10
44813: PUSH
44814: DOUBLE
44815: LD_VAR 0 15
44819: DEC
44820: ST_TO_ADDR
44821: LD_INT 5
44823: PUSH
44824: FOR_TO
44825: IFFALSE 44939
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44827: LD_ADDR_VAR 0 11
44831: PUSH
44832: LD_VAR 0 13
44836: PPUSH
44837: CALL_OW 250
44841: PPUSH
44842: LD_VAR 0 10
44846: PPUSH
44847: LD_INT 2
44849: PPUSH
44850: CALL_OW 272
44854: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44855: LD_ADDR_VAR 0 12
44859: PUSH
44860: LD_VAR 0 13
44864: PPUSH
44865: CALL_OW 251
44869: PPUSH
44870: LD_VAR 0 10
44874: PPUSH
44875: LD_INT 2
44877: PPUSH
44878: CALL_OW 273
44882: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44883: LD_VAR 0 11
44887: PPUSH
44888: LD_VAR 0 12
44892: PPUSH
44893: CALL_OW 488
44897: PUSH
44898: LD_VAR 0 11
44902: PPUSH
44903: LD_VAR 0 12
44907: PPUSH
44908: CALL_OW 428
44912: NOT
44913: AND
44914: IFFALSE 44937
// begin ComMoveXY ( tmp , _x , _y ) ;
44916: LD_VAR 0 13
44920: PPUSH
44921: LD_VAR 0 11
44925: PPUSH
44926: LD_VAR 0 12
44930: PPUSH
44931: CALL_OW 111
// break ;
44935: GO 44939
// end ; end ;
44937: GO 44824
44939: POP
44940: POP
// end ; end ;
44941: GO 44266
44943: POP
44944: POP
// end ;
44945: LD_VAR 0 8
44949: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44950: LD_INT 0
44952: PPUSH
// result := true ;
44953: LD_ADDR_VAR 0 3
44957: PUSH
44958: LD_INT 1
44960: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44961: LD_VAR 0 2
44965: PUSH
44966: LD_INT 24
44968: DOUBLE
44969: EQUAL
44970: IFTRUE 44980
44972: LD_INT 33
44974: DOUBLE
44975: EQUAL
44976: IFTRUE 44980
44978: GO 45005
44980: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44981: LD_ADDR_VAR 0 3
44985: PUSH
44986: LD_INT 32
44988: PPUSH
44989: LD_VAR 0 1
44993: PPUSH
44994: CALL_OW 321
44998: PUSH
44999: LD_INT 2
45001: EQUAL
45002: ST_TO_ADDR
45003: GO 45321
45005: LD_INT 20
45007: DOUBLE
45008: EQUAL
45009: IFTRUE 45013
45011: GO 45038
45013: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45014: LD_ADDR_VAR 0 3
45018: PUSH
45019: LD_INT 6
45021: PPUSH
45022: LD_VAR 0 1
45026: PPUSH
45027: CALL_OW 321
45031: PUSH
45032: LD_INT 2
45034: EQUAL
45035: ST_TO_ADDR
45036: GO 45321
45038: LD_INT 22
45040: DOUBLE
45041: EQUAL
45042: IFTRUE 45052
45044: LD_INT 36
45046: DOUBLE
45047: EQUAL
45048: IFTRUE 45052
45050: GO 45077
45052: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45053: LD_ADDR_VAR 0 3
45057: PUSH
45058: LD_INT 15
45060: PPUSH
45061: LD_VAR 0 1
45065: PPUSH
45066: CALL_OW 321
45070: PUSH
45071: LD_INT 2
45073: EQUAL
45074: ST_TO_ADDR
45075: GO 45321
45077: LD_INT 30
45079: DOUBLE
45080: EQUAL
45081: IFTRUE 45085
45083: GO 45110
45085: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45086: LD_ADDR_VAR 0 3
45090: PUSH
45091: LD_INT 20
45093: PPUSH
45094: LD_VAR 0 1
45098: PPUSH
45099: CALL_OW 321
45103: PUSH
45104: LD_INT 2
45106: EQUAL
45107: ST_TO_ADDR
45108: GO 45321
45110: LD_INT 28
45112: DOUBLE
45113: EQUAL
45114: IFTRUE 45124
45116: LD_INT 21
45118: DOUBLE
45119: EQUAL
45120: IFTRUE 45124
45122: GO 45149
45124: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45125: LD_ADDR_VAR 0 3
45129: PUSH
45130: LD_INT 21
45132: PPUSH
45133: LD_VAR 0 1
45137: PPUSH
45138: CALL_OW 321
45142: PUSH
45143: LD_INT 2
45145: EQUAL
45146: ST_TO_ADDR
45147: GO 45321
45149: LD_INT 16
45151: DOUBLE
45152: EQUAL
45153: IFTRUE 45157
45155: GO 45182
45157: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45158: LD_ADDR_VAR 0 3
45162: PUSH
45163: LD_INT 84
45165: PPUSH
45166: LD_VAR 0 1
45170: PPUSH
45171: CALL_OW 321
45175: PUSH
45176: LD_INT 2
45178: EQUAL
45179: ST_TO_ADDR
45180: GO 45321
45182: LD_INT 19
45184: DOUBLE
45185: EQUAL
45186: IFTRUE 45196
45188: LD_INT 23
45190: DOUBLE
45191: EQUAL
45192: IFTRUE 45196
45194: GO 45221
45196: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45197: LD_ADDR_VAR 0 3
45201: PUSH
45202: LD_INT 83
45204: PPUSH
45205: LD_VAR 0 1
45209: PPUSH
45210: CALL_OW 321
45214: PUSH
45215: LD_INT 2
45217: EQUAL
45218: ST_TO_ADDR
45219: GO 45321
45221: LD_INT 17
45223: DOUBLE
45224: EQUAL
45225: IFTRUE 45229
45227: GO 45254
45229: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45230: LD_ADDR_VAR 0 3
45234: PUSH
45235: LD_INT 39
45237: PPUSH
45238: LD_VAR 0 1
45242: PPUSH
45243: CALL_OW 321
45247: PUSH
45248: LD_INT 2
45250: EQUAL
45251: ST_TO_ADDR
45252: GO 45321
45254: LD_INT 18
45256: DOUBLE
45257: EQUAL
45258: IFTRUE 45262
45260: GO 45287
45262: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45263: LD_ADDR_VAR 0 3
45267: PUSH
45268: LD_INT 40
45270: PPUSH
45271: LD_VAR 0 1
45275: PPUSH
45276: CALL_OW 321
45280: PUSH
45281: LD_INT 2
45283: EQUAL
45284: ST_TO_ADDR
45285: GO 45321
45287: LD_INT 27
45289: DOUBLE
45290: EQUAL
45291: IFTRUE 45295
45293: GO 45320
45295: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45296: LD_ADDR_VAR 0 3
45300: PUSH
45301: LD_INT 35
45303: PPUSH
45304: LD_VAR 0 1
45308: PPUSH
45309: CALL_OW 321
45313: PUSH
45314: LD_INT 2
45316: EQUAL
45317: ST_TO_ADDR
45318: GO 45321
45320: POP
// end ;
45321: LD_VAR 0 3
45325: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45326: LD_INT 0
45328: PPUSH
45329: PPUSH
45330: PPUSH
45331: PPUSH
45332: PPUSH
45333: PPUSH
45334: PPUSH
45335: PPUSH
45336: PPUSH
45337: PPUSH
45338: PPUSH
// result := false ;
45339: LD_ADDR_VAR 0 6
45343: PUSH
45344: LD_INT 0
45346: ST_TO_ADDR
// if btype = b_depot then
45347: LD_VAR 0 2
45351: PUSH
45352: LD_INT 0
45354: EQUAL
45355: IFFALSE 45367
// begin result := true ;
45357: LD_ADDR_VAR 0 6
45361: PUSH
45362: LD_INT 1
45364: ST_TO_ADDR
// exit ;
45365: GO 46193
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45367: LD_VAR 0 1
45371: NOT
45372: PUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: CALL_OW 266
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: IN
45393: NOT
45394: OR
45395: PUSH
45396: LD_VAR 0 2
45400: NOT
45401: OR
45402: PUSH
45403: LD_VAR 0 5
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 3
45419: PUSH
45420: LD_INT 4
45422: PUSH
45423: LD_INT 5
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: IN
45434: NOT
45435: OR
45436: PUSH
45437: LD_VAR 0 3
45441: PPUSH
45442: LD_VAR 0 4
45446: PPUSH
45447: CALL_OW 488
45451: NOT
45452: OR
45453: IFFALSE 45457
// exit ;
45455: GO 46193
// side := GetSide ( depot ) ;
45457: LD_ADDR_VAR 0 9
45461: PUSH
45462: LD_VAR 0 1
45466: PPUSH
45467: CALL_OW 255
45471: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45472: LD_VAR 0 9
45476: PPUSH
45477: LD_VAR 0 2
45481: PPUSH
45482: CALL 44950 0 2
45486: NOT
45487: IFFALSE 45491
// exit ;
45489: GO 46193
// pom := GetBase ( depot ) ;
45491: LD_ADDR_VAR 0 10
45495: PUSH
45496: LD_VAR 0 1
45500: PPUSH
45501: CALL_OW 274
45505: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45506: LD_ADDR_VAR 0 11
45510: PUSH
45511: LD_VAR 0 2
45515: PPUSH
45516: LD_VAR 0 1
45520: PPUSH
45521: CALL_OW 248
45525: PPUSH
45526: CALL_OW 450
45530: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45531: LD_VAR 0 10
45535: PPUSH
45536: LD_INT 1
45538: PPUSH
45539: CALL_OW 275
45543: PUSH
45544: LD_VAR 0 11
45548: PUSH
45549: LD_INT 1
45551: ARRAY
45552: GREATEREQUAL
45553: PUSH
45554: LD_VAR 0 10
45558: PPUSH
45559: LD_INT 2
45561: PPUSH
45562: CALL_OW 275
45566: PUSH
45567: LD_VAR 0 11
45571: PUSH
45572: LD_INT 2
45574: ARRAY
45575: GREATEREQUAL
45576: AND
45577: PUSH
45578: LD_VAR 0 10
45582: PPUSH
45583: LD_INT 3
45585: PPUSH
45586: CALL_OW 275
45590: PUSH
45591: LD_VAR 0 11
45595: PUSH
45596: LD_INT 3
45598: ARRAY
45599: GREATEREQUAL
45600: AND
45601: NOT
45602: IFFALSE 45606
// exit ;
45604: GO 46193
// if GetBType ( depot ) = b_depot then
45606: LD_VAR 0 1
45610: PPUSH
45611: CALL_OW 266
45615: PUSH
45616: LD_INT 0
45618: EQUAL
45619: IFFALSE 45631
// dist := 28 else
45621: LD_ADDR_VAR 0 14
45625: PUSH
45626: LD_INT 28
45628: ST_TO_ADDR
45629: GO 45639
// dist := 36 ;
45631: LD_ADDR_VAR 0 14
45635: PUSH
45636: LD_INT 36
45638: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45639: LD_VAR 0 1
45643: PPUSH
45644: LD_VAR 0 3
45648: PPUSH
45649: LD_VAR 0 4
45653: PPUSH
45654: CALL_OW 297
45658: PUSH
45659: LD_VAR 0 14
45663: GREATER
45664: IFFALSE 45668
// exit ;
45666: GO 46193
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45668: LD_ADDR_VAR 0 12
45672: PUSH
45673: LD_VAR 0 2
45677: PPUSH
45678: LD_VAR 0 3
45682: PPUSH
45683: LD_VAR 0 4
45687: PPUSH
45688: LD_VAR 0 5
45692: PPUSH
45693: LD_VAR 0 1
45697: PPUSH
45698: CALL_OW 248
45702: PPUSH
45703: LD_INT 0
45705: PPUSH
45706: CALL 46198 0 6
45710: ST_TO_ADDR
// if not hexes then
45711: LD_VAR 0 12
45715: NOT
45716: IFFALSE 45720
// exit ;
45718: GO 46193
// hex := GetHexInfo ( x , y ) ;
45720: LD_ADDR_VAR 0 15
45724: PUSH
45725: LD_VAR 0 3
45729: PPUSH
45730: LD_VAR 0 4
45734: PPUSH
45735: CALL_OW 546
45739: ST_TO_ADDR
// if hex [ 1 ] then
45740: LD_VAR 0 15
45744: PUSH
45745: LD_INT 1
45747: ARRAY
45748: IFFALSE 45752
// exit ;
45750: GO 46193
// height := hex [ 2 ] ;
45752: LD_ADDR_VAR 0 13
45756: PUSH
45757: LD_VAR 0 15
45761: PUSH
45762: LD_INT 2
45764: ARRAY
45765: ST_TO_ADDR
// for i = 1 to hexes do
45766: LD_ADDR_VAR 0 7
45770: PUSH
45771: DOUBLE
45772: LD_INT 1
45774: DEC
45775: ST_TO_ADDR
45776: LD_VAR 0 12
45780: PUSH
45781: FOR_TO
45782: IFFALSE 46112
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45784: LD_VAR 0 12
45788: PUSH
45789: LD_VAR 0 7
45793: ARRAY
45794: PUSH
45795: LD_INT 1
45797: ARRAY
45798: PPUSH
45799: LD_VAR 0 12
45803: PUSH
45804: LD_VAR 0 7
45808: ARRAY
45809: PUSH
45810: LD_INT 2
45812: ARRAY
45813: PPUSH
45814: CALL_OW 488
45818: NOT
45819: PUSH
45820: LD_VAR 0 12
45824: PUSH
45825: LD_VAR 0 7
45829: ARRAY
45830: PUSH
45831: LD_INT 1
45833: ARRAY
45834: PPUSH
45835: LD_VAR 0 12
45839: PUSH
45840: LD_VAR 0 7
45844: ARRAY
45845: PUSH
45846: LD_INT 2
45848: ARRAY
45849: PPUSH
45850: CALL_OW 428
45854: PUSH
45855: LD_INT 0
45857: GREATER
45858: OR
45859: PUSH
45860: LD_VAR 0 12
45864: PUSH
45865: LD_VAR 0 7
45869: ARRAY
45870: PUSH
45871: LD_INT 1
45873: ARRAY
45874: PPUSH
45875: LD_VAR 0 12
45879: PUSH
45880: LD_VAR 0 7
45884: ARRAY
45885: PUSH
45886: LD_INT 2
45888: ARRAY
45889: PPUSH
45890: CALL_OW 351
45894: OR
45895: IFFALSE 45901
// exit ;
45897: POP
45898: POP
45899: GO 46193
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45901: LD_ADDR_VAR 0 8
45905: PUSH
45906: LD_VAR 0 12
45910: PUSH
45911: LD_VAR 0 7
45915: ARRAY
45916: PUSH
45917: LD_INT 1
45919: ARRAY
45920: PPUSH
45921: LD_VAR 0 12
45925: PUSH
45926: LD_VAR 0 7
45930: ARRAY
45931: PUSH
45932: LD_INT 2
45934: ARRAY
45935: PPUSH
45936: CALL_OW 546
45940: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45941: LD_VAR 0 8
45945: PUSH
45946: LD_INT 1
45948: ARRAY
45949: PUSH
45950: LD_VAR 0 8
45954: PUSH
45955: LD_INT 2
45957: ARRAY
45958: PUSH
45959: LD_VAR 0 13
45963: PUSH
45964: LD_INT 2
45966: PLUS
45967: GREATER
45968: OR
45969: PUSH
45970: LD_VAR 0 8
45974: PUSH
45975: LD_INT 2
45977: ARRAY
45978: PUSH
45979: LD_VAR 0 13
45983: PUSH
45984: LD_INT 2
45986: MINUS
45987: LESS
45988: OR
45989: PUSH
45990: LD_VAR 0 8
45994: PUSH
45995: LD_INT 3
45997: ARRAY
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 8
46004: PUSH
46005: LD_INT 9
46007: PUSH
46008: LD_INT 10
46010: PUSH
46011: LD_INT 11
46013: PUSH
46014: LD_INT 12
46016: PUSH
46017: LD_INT 13
46019: PUSH
46020: LD_INT 16
46022: PUSH
46023: LD_INT 17
46025: PUSH
46026: LD_INT 18
46028: PUSH
46029: LD_INT 19
46031: PUSH
46032: LD_INT 20
46034: PUSH
46035: LD_INT 21
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: IN
46053: NOT
46054: OR
46055: PUSH
46056: LD_VAR 0 8
46060: PUSH
46061: LD_INT 5
46063: ARRAY
46064: NOT
46065: OR
46066: PUSH
46067: LD_VAR 0 8
46071: PUSH
46072: LD_INT 6
46074: ARRAY
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: LD_INT 7
46084: PUSH
46085: LD_INT 9
46087: PUSH
46088: LD_INT 10
46090: PUSH
46091: LD_INT 11
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: IN
46102: NOT
46103: OR
46104: IFFALSE 46110
// exit ;
46106: POP
46107: POP
46108: GO 46193
// end ;
46110: GO 45781
46112: POP
46113: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46114: LD_VAR 0 9
46118: PPUSH
46119: LD_VAR 0 3
46123: PPUSH
46124: LD_VAR 0 4
46128: PPUSH
46129: LD_INT 20
46131: PPUSH
46132: CALL 38116 0 4
46136: PUSH
46137: LD_INT 4
46139: ARRAY
46140: IFFALSE 46144
// exit ;
46142: GO 46193
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46144: LD_VAR 0 2
46148: PUSH
46149: LD_INT 29
46151: PUSH
46152: LD_INT 30
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: IN
46159: PUSH
46160: LD_VAR 0 3
46164: PPUSH
46165: LD_VAR 0 4
46169: PPUSH
46170: LD_VAR 0 9
46174: PPUSH
46175: CALL_OW 440
46179: NOT
46180: AND
46181: IFFALSE 46185
// exit ;
46183: GO 46193
// result := true ;
46185: LD_ADDR_VAR 0 6
46189: PUSH
46190: LD_INT 1
46192: ST_TO_ADDR
// end ;
46193: LD_VAR 0 6
46197: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46198: LD_INT 0
46200: PPUSH
46201: PPUSH
46202: PPUSH
46203: PPUSH
46204: PPUSH
46205: PPUSH
46206: PPUSH
46207: PPUSH
46208: PPUSH
46209: PPUSH
46210: PPUSH
46211: PPUSH
46212: PPUSH
46213: PPUSH
46214: PPUSH
46215: PPUSH
46216: PPUSH
46217: PPUSH
46218: PPUSH
46219: PPUSH
46220: PPUSH
46221: PPUSH
46222: PPUSH
46223: PPUSH
46224: PPUSH
46225: PPUSH
46226: PPUSH
46227: PPUSH
46228: PPUSH
46229: PPUSH
46230: PPUSH
46231: PPUSH
46232: PPUSH
46233: PPUSH
46234: PPUSH
46235: PPUSH
46236: PPUSH
46237: PPUSH
46238: PPUSH
46239: PPUSH
46240: PPUSH
46241: PPUSH
46242: PPUSH
46243: PPUSH
46244: PPUSH
46245: PPUSH
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
// result = [ ] ;
46258: LD_ADDR_VAR 0 7
46262: PUSH
46263: EMPTY
46264: ST_TO_ADDR
// temp_list = [ ] ;
46265: LD_ADDR_VAR 0 9
46269: PUSH
46270: EMPTY
46271: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46272: LD_VAR 0 4
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: LD_INT 4
46291: PUSH
46292: LD_INT 5
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: IN
46303: NOT
46304: PUSH
46305: LD_VAR 0 1
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: IN
46320: PUSH
46321: LD_VAR 0 5
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: IN
46340: NOT
46341: AND
46342: OR
46343: IFFALSE 46347
// exit ;
46345: GO 64738
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46347: LD_VAR 0 1
46351: PUSH
46352: LD_INT 6
46354: PUSH
46355: LD_INT 7
46357: PUSH
46358: LD_INT 8
46360: PUSH
46361: LD_INT 13
46363: PUSH
46364: LD_INT 12
46366: PUSH
46367: LD_INT 15
46369: PUSH
46370: LD_INT 11
46372: PUSH
46373: LD_INT 14
46375: PUSH
46376: LD_INT 10
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: IN
46390: IFFALSE 46400
// btype = b_lab ;
46392: LD_ADDR_VAR 0 1
46396: PUSH
46397: LD_INT 6
46399: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46400: LD_VAR 0 6
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: IN
46419: NOT
46420: PUSH
46421: LD_VAR 0 1
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 6
46440: PUSH
46441: LD_INT 36
46443: PUSH
46444: LD_INT 4
46446: PUSH
46447: LD_INT 5
46449: PUSH
46450: LD_INT 31
46452: PUSH
46453: LD_INT 32
46455: PUSH
46456: LD_INT 33
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: IN
46472: NOT
46473: PUSH
46474: LD_VAR 0 6
46478: PUSH
46479: LD_INT 1
46481: EQUAL
46482: AND
46483: OR
46484: PUSH
46485: LD_VAR 0 1
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: IN
46500: NOT
46501: PUSH
46502: LD_VAR 0 6
46506: PUSH
46507: LD_INT 2
46509: EQUAL
46510: AND
46511: OR
46512: IFFALSE 46522
// mode = 0 ;
46514: LD_ADDR_VAR 0 6
46518: PUSH
46519: LD_INT 0
46521: ST_TO_ADDR
// case mode of 0 :
46522: LD_VAR 0 6
46526: PUSH
46527: LD_INT 0
46529: DOUBLE
46530: EQUAL
46531: IFTRUE 46535
46533: GO 57988
46535: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46536: LD_ADDR_VAR 0 11
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46729: LD_ADDR_VAR 0 12
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 3
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46925: LD_ADDR_VAR 0 13
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 3
47084: NEG
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: LD_INT 3
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47124: LD_ADDR_VAR 0 14
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 3
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 3
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47320: LD_ADDR_VAR 0 15
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47513: LD_ADDR_VAR 0 16
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47706: LD_ADDR_VAR 0 17
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47936: LD_ADDR_VAR 0 18
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48166: LD_ADDR_VAR 0 19
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48396: LD_ADDR_VAR 0 20
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 2
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48626: LD_ADDR_VAR 0 21
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48856: LD_ADDR_VAR 0 22
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49086: LD_ADDR_VAR 0 23
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 2
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 3
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: LD_INT 3
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49366: LD_ADDR_VAR 0 24
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49642: LD_ADDR_VAR 0 25
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 3
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49916: LD_ADDR_VAR 0 26
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 3
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50192: LD_ADDR_VAR 0 27
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 3
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50472: LD_ADDR_VAR 0 28
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: LD_INT 3
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 3
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 3
50719: NEG
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50754: LD_ADDR_VAR 0 29
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51033: LD_ADDR_VAR 0 30
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 3
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51311: LD_ADDR_VAR 0 31
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51589: LD_ADDR_VAR 0 32
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 3
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51867: LD_ADDR_VAR 0 33
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52146: LD_ADDR_VAR 0 34
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 3
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52426: LD_ADDR_VAR 0 35
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52538: LD_ADDR_VAR 0 36
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52650: LD_ADDR_VAR 0 37
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52762: LD_ADDR_VAR 0 38
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52874: LD_ADDR_VAR 0 39
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52986: LD_ADDR_VAR 0 40
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53098: LD_ADDR_VAR 0 41
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 3
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 3
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 3
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 3
53372: NEG
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53448: LD_ADDR_VAR 0 42
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: LD_INT 3
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53798: LD_ADDR_VAR 0 43
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 3
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 3
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: NEG
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 3
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54146: LD_ADDR_VAR 0 44
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 3
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 3
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 3
54420: NEG
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54496: LD_ADDR_VAR 0 45
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 3
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 3
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 3
54793: NEG
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: NEG
54806: PUSH
54807: LD_INT 3
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54846: LD_ADDR_VAR 0 46
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 3
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 3
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 3
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55194: LD_ADDR_VAR 0 47
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55345: LD_ADDR_VAR 0 48
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55492: LD_ADDR_VAR 0 49
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55636: LD_ADDR_VAR 0 50
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55780: LD_ADDR_VAR 0 51
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55927: LD_ADDR_VAR 0 52
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56078: LD_ADDR_VAR 0 53
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56308: LD_ADDR_VAR 0 54
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56538: LD_ADDR_VAR 0 55
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56768: LD_ADDR_VAR 0 56
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56998: LD_ADDR_VAR 0 57
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57228: LD_ADDR_VAR 0 58
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57458: LD_ADDR_VAR 0 59
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57546: LD_ADDR_VAR 0 60
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57634: LD_ADDR_VAR 0 61
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57722: LD_ADDR_VAR 0 62
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57810: LD_ADDR_VAR 0 63
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57898: LD_ADDR_VAR 0 64
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: ST_TO_ADDR
// end ; 1 :
57986: GO 63883
57988: LD_INT 1
57990: DOUBLE
57991: EQUAL
57992: IFTRUE 57996
57994: GO 60619
57996: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57997: LD_ADDR_VAR 0 11
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58041: LD_ADDR_VAR 0 12
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58082: LD_ADDR_VAR 0 13
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58122: LD_ADDR_VAR 0 14
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 3
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58163: LD_ADDR_VAR 0 15
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 3
58181: NEG
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 3
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58207: LD_ADDR_VAR 0 16
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: NEG
58239: PUSH
58240: LD_INT 3
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58253: LD_ADDR_VAR 0 17
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 3
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: LIST
58296: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58297: LD_ADDR_VAR 0 18
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: LIST
58337: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58338: LD_ADDR_VAR 0 19
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: LD_INT 3
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: LD_INT 3
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58378: LD_ADDR_VAR 0 20
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 3
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58419: LD_ADDR_VAR 0 21
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 3
58437: NEG
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58463: LD_ADDR_VAR 0 22
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: LD_INT 3
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58509: LD_ADDR_VAR 0 23
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 4
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: LIST
58552: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58553: LD_ADDR_VAR 0 24
58557: PUSH
58558: LD_INT 3
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 4
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: LIST
58593: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58594: LD_ADDR_VAR 0 25
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: LD_INT 4
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58634: LD_ADDR_VAR 0 26
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 3
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 4
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 3
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: LIST
58674: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58675: LD_ADDR_VAR 0 27
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 4
58704: NEG
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: LIST
58718: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58719: LD_ADDR_VAR 0 28
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 3
58738: NEG
58739: PUSH
58740: LD_INT 4
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 4
58750: NEG
58751: PUSH
58752: LD_INT 3
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: LIST
58764: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58765: LD_ADDR_VAR 0 29
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 4
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 4
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 5
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: LD_INT 5
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 4
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 6
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 6
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 5
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58920: LD_ADDR_VAR 0 30
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 4
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 4
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 4
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 5
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 5
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 5
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 6
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 6
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59063: LD_ADDR_VAR 0 31
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: LD_INT 3
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: LD_INT 3
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 4
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 4
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 4
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 5
59130: PUSH
59131: LD_INT 4
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 5
59140: PUSH
59141: LD_INT 5
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 4
59150: PUSH
59151: LD_INT 5
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 6
59160: PUSH
59161: LD_INT 5
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 6
59170: PUSH
59171: LD_INT 6
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 5
59180: PUSH
59181: LD_INT 6
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59202: LD_ADDR_VAR 0 32
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 3
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 4
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 4
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: LD_INT 5
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 5
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: LD_INT 4
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 6
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 6
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 5
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59345: LD_ADDR_VAR 0 33
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 3
59363: NEG
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 3
59374: NEG
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 3
59386: NEG
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 4
59397: NEG
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 4
59408: NEG
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 4
59420: NEG
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 5
59431: NEG
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 5
59442: NEG
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 5
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 6
59465: NEG
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 6
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59500: LD_ADDR_VAR 0 34
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 3
59531: NEG
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 3
59543: NEG
59544: PUSH
59545: LD_INT 4
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 4
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: LD_INT 4
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: LD_INT 5
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 5
59591: NEG
59592: PUSH
59593: LD_INT 4
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 5
59603: NEG
59604: PUSH
59605: LD_INT 5
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 5
59615: NEG
59616: PUSH
59617: LD_INT 6
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 6
59627: NEG
59628: PUSH
59629: LD_INT 5
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 6
59639: NEG
59640: PUSH
59641: LD_INT 6
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59663: LD_ADDR_VAR 0 41
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59707: LD_ADDR_VAR 0 42
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 3
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59748: LD_ADDR_VAR 0 43
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 3
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: LD_INT 3
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: LIST
59787: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59788: LD_ADDR_VAR 0 44
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59829: LD_ADDR_VAR 0 45
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59873: LD_ADDR_VAR 0 46
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: LD_INT 3
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 3
59904: NEG
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: LIST
59918: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59919: LD_ADDR_VAR 0 47
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 3
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59952: LD_ADDR_VAR 0 48
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59983: LD_ADDR_VAR 0 49
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 3
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60012: LD_ADDR_VAR 0 50
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60041: LD_ADDR_VAR 0 51
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60072: LD_ADDR_VAR 0 52
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60105: LD_ADDR_VAR 0 53
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: LD_INT 3
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 3
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: LIST
60148: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60149: LD_ADDR_VAR 0 54
60153: PUSH
60154: LD_INT 2
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: LIST
60189: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60190: LD_ADDR_VAR 0 55
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: LD_INT 3
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60230: LD_ADDR_VAR 0 56
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: LIST
60270: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60271: LD_ADDR_VAR 0 57
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 3
60289: NEG
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: NEG
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60315: LD_ADDR_VAR 0 58
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60361: LD_ADDR_VAR 0 59
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: LIST
60404: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60405: LD_ADDR_VAR 0 60
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60446: LD_ADDR_VAR 0 61
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: LIST
60485: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60486: LD_ADDR_VAR 0 62
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60527: LD_ADDR_VAR 0 63
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60571: LD_ADDR_VAR 0 64
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 2
60590: NEG
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: ST_TO_ADDR
// end ; 2 :
60617: GO 63883
60619: LD_INT 2
60621: DOUBLE
60622: EQUAL
60623: IFTRUE 60627
60625: GO 63882
60627: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60628: LD_ADDR_VAR 0 29
60632: PUSH
60633: LD_INT 4
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 5
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 5
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 4
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 3
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 5
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: LD_INT 3
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 4
60758: PUSH
60759: LD_INT 4
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: LD_INT 4
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: LD_INT 4
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: LD_INT 4
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 4
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: LD_INT 5
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 5
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 4
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: LD_INT 3
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: LD_INT 5
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 3
60922: NEG
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 2
60934: NEG
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: NEG
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 4
60967: NEG
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 4
60978: NEG
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 4
60990: NEG
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: NEG
61014: PUSH
61015: LD_INT 4
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 4
61025: NEG
61026: PUSH
61027: LD_INT 5
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 3
61037: NEG
61038: PUSH
61039: LD_INT 4
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 3
61049: NEG
61050: PUSH
61051: LD_INT 3
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 4
61061: NEG
61062: PUSH
61063: LD_INT 3
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 5
61073: NEG
61074: PUSH
61075: LD_INT 4
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 5
61085: NEG
61086: PUSH
61087: LD_INT 5
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: LD_INT 5
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 5
61109: NEG
61110: PUSH
61111: LD_INT 3
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61166: LD_ADDR_VAR 0 30
61170: PUSH
61171: LD_INT 4
61173: PUSH
61174: LD_INT 4
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 4
61183: PUSH
61184: LD_INT 3
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 5
61193: PUSH
61194: LD_INT 4
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 5
61203: PUSH
61204: LD_INT 5
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 4
61213: PUSH
61214: LD_INT 5
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 3
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 5
61243: PUSH
61244: LD_INT 3
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: LD_INT 5
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 3
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 4
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: LD_INT 4
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: NEG
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 4
61356: NEG
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 4
61367: NEG
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 3
61390: NEG
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 4
61401: NEG
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 5
61412: NEG
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 5
61423: NEG
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 5
61435: NEG
61436: PUSH
61437: LD_INT 2
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: NEG
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: NEG
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: LD_INT 4
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: LD_INT 2
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 4
61518: NEG
61519: PUSH
61520: LD_INT 3
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 4
61530: NEG
61531: PUSH
61532: LD_INT 4
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: LD_INT 4
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 4
61554: NEG
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 4
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: LD_INT 5
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 4
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: LD_INT 3
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 3
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: LD_INT 4
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: LD_INT 5
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: LD_INT 3
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: LD_INT 5
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61713: LD_ADDR_VAR 0 31
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 4
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 4
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 5
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: LD_INT 5
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 4
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 3
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: LD_INT 5
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: LD_INT 3
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 3
61824: NEG
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: NEG
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 3
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 4
61869: NEG
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 4
61880: NEG
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 4
61892: NEG
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 4
61915: NEG
61916: PUSH
61917: LD_INT 4
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 4
61927: NEG
61928: PUSH
61929: LD_INT 5
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 3
61939: NEG
61940: PUSH
61941: LD_INT 4
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 3
61951: NEG
61952: PUSH
61953: LD_INT 3
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 4
61963: NEG
61964: PUSH
61965: LD_INT 3
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 5
61975: NEG
61976: PUSH
61977: LD_INT 4
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 5
61987: NEG
61988: PUSH
61989: LD_INT 5
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: LD_INT 5
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 5
62011: NEG
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 3
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 4
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 3
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 2
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 3
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: LD_INT 4
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: LD_INT 4
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 4
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 4
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 5
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 5
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 4
62166: PUSH
62167: LD_INT 1
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 3
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 3
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 5
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62263: LD_ADDR_VAR 0 32
62267: PUSH
62268: LD_INT 4
62270: NEG
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 4
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 3
62293: NEG
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 4
62315: NEG
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 5
62326: NEG
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 5
62337: NEG
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 5
62349: NEG
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 3
62372: NEG
62373: PUSH
62374: LD_INT 3
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 3
62384: NEG
62385: PUSH
62386: LD_INT 4
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 2
62396: NEG
62397: PUSH
62398: LD_INT 3
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 2
62408: NEG
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: LD_INT 2
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 4
62432: NEG
62433: PUSH
62434: LD_INT 3
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 4
62444: NEG
62445: PUSH
62446: LD_INT 4
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: LD_INT 4
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 4
62468: NEG
62469: PUSH
62470: LD_INT 2
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: LD_INT 4
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 5
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 4
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 3
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 3
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: LD_INT 4
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 5
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: LD_INT 3
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: LD_INT 5
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 3
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 4
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 4
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 4
62665: PUSH
62666: LD_INT 2
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 4
62675: PUSH
62676: LD_INT 4
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 4
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 5
62695: PUSH
62696: LD_INT 4
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 5
62705: PUSH
62706: LD_INT 5
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 4
62715: PUSH
62716: LD_INT 5
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: LD_INT 4
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 5
62745: PUSH
62746: LD_INT 3
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: LD_INT 5
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62810: LD_ADDR_VAR 0 33
62814: PUSH
62815: LD_INT 4
62817: NEG
62818: PUSH
62819: LD_INT 4
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 4
62829: NEG
62830: PUSH
62831: LD_INT 5
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 3
62841: NEG
62842: PUSH
62843: LD_INT 4
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 3
62853: NEG
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 4
62865: NEG
62866: PUSH
62867: LD_INT 3
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 5
62877: NEG
62878: PUSH
62879: LD_INT 4
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 5
62889: NEG
62890: PUSH
62891: LD_INT 5
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: LD_INT 5
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 5
62913: NEG
62914: PUSH
62915: LD_INT 3
62917: NEG
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: LD_INT 3
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: LD_INT 4
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: LD_INT 3
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: LD_INT 2
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: LD_INT 3
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: LD_INT 4
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 4
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 4
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 4
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 5
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 5
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 4
63068: PUSH
63069: LD_INT 1
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 3
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 3
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 5
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 3
63120: PUSH
63121: LD_INT 3
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 3
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 4
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 4
63150: PUSH
63151: LD_INT 4
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 3
63160: PUSH
63161: LD_INT 4
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: LD_INT 3
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 4
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: LD_INT 4
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 4
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: LD_INT 3
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: LD_INT 4
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 5
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 5
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 4
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 3
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: LD_INT 5
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 2
63292: NEG
63293: PUSH
63294: LD_INT 3
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63348: LD_ADDR_VAR 0 34
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: LD_INT 4
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 5
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 4
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 3
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 3
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: LD_INT 4
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: LD_INT 5
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: LD_INT 3
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: LD_INT 5
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 3
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 3
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 4
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 4
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 2
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 2
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 4
63540: PUSH
63541: LD_INT 2
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 4
63550: PUSH
63551: LD_INT 4
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 4
63560: PUSH
63561: LD_INT 3
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 5
63570: PUSH
63571: LD_INT 4
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 5
63580: PUSH
63581: LD_INT 5
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 4
63590: PUSH
63591: LD_INT 5
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: LD_INT 3
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 5
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 3
63630: PUSH
63631: LD_INT 5
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: LD_INT 3
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 4
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 4
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: LD_INT 3
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: LD_INT 2
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: LD_INT 4
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 2
63722: NEG
63723: PUSH
63724: LD_INT 2
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 4
63733: NEG
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 4
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 3
63756: NEG
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 3
63767: NEG
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 4
63778: NEG
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 5
63789: NEG
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 5
63800: NEG
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 5
63812: NEG
63813: PUSH
63814: LD_INT 2
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// end ; end ;
63880: GO 63883
63882: POP
// case btype of b_depot , b_warehouse :
63883: LD_VAR 0 1
63887: PUSH
63888: LD_INT 0
63890: DOUBLE
63891: EQUAL
63892: IFTRUE 63902
63894: LD_INT 1
63896: DOUBLE
63897: EQUAL
63898: IFTRUE 63902
63900: GO 64103
63902: POP
// case nation of nation_american :
63903: LD_VAR 0 5
63907: PUSH
63908: LD_INT 1
63910: DOUBLE
63911: EQUAL
63912: IFTRUE 63916
63914: GO 63972
63916: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63917: LD_ADDR_VAR 0 9
63921: PUSH
63922: LD_VAR 0 11
63926: PUSH
63927: LD_VAR 0 12
63931: PUSH
63932: LD_VAR 0 13
63936: PUSH
63937: LD_VAR 0 14
63941: PUSH
63942: LD_VAR 0 15
63946: PUSH
63947: LD_VAR 0 16
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: PUSH
63960: LD_VAR 0 4
63964: PUSH
63965: LD_INT 1
63967: PLUS
63968: ARRAY
63969: ST_TO_ADDR
63970: GO 64101
63972: LD_INT 2
63974: DOUBLE
63975: EQUAL
63976: IFTRUE 63980
63978: GO 64036
63980: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63981: LD_ADDR_VAR 0 9
63985: PUSH
63986: LD_VAR 0 17
63990: PUSH
63991: LD_VAR 0 18
63995: PUSH
63996: LD_VAR 0 19
64000: PUSH
64001: LD_VAR 0 20
64005: PUSH
64006: LD_VAR 0 21
64010: PUSH
64011: LD_VAR 0 22
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: PUSH
64024: LD_VAR 0 4
64028: PUSH
64029: LD_INT 1
64031: PLUS
64032: ARRAY
64033: ST_TO_ADDR
64034: GO 64101
64036: LD_INT 3
64038: DOUBLE
64039: EQUAL
64040: IFTRUE 64044
64042: GO 64100
64044: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64045: LD_ADDR_VAR 0 9
64049: PUSH
64050: LD_VAR 0 23
64054: PUSH
64055: LD_VAR 0 24
64059: PUSH
64060: LD_VAR 0 25
64064: PUSH
64065: LD_VAR 0 26
64069: PUSH
64070: LD_VAR 0 27
64074: PUSH
64075: LD_VAR 0 28
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: PUSH
64088: LD_VAR 0 4
64092: PUSH
64093: LD_INT 1
64095: PLUS
64096: ARRAY
64097: ST_TO_ADDR
64098: GO 64101
64100: POP
64101: GO 64656
64103: LD_INT 2
64105: DOUBLE
64106: EQUAL
64107: IFTRUE 64117
64109: LD_INT 3
64111: DOUBLE
64112: EQUAL
64113: IFTRUE 64117
64115: GO 64173
64117: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64118: LD_ADDR_VAR 0 9
64122: PUSH
64123: LD_VAR 0 29
64127: PUSH
64128: LD_VAR 0 30
64132: PUSH
64133: LD_VAR 0 31
64137: PUSH
64138: LD_VAR 0 32
64142: PUSH
64143: LD_VAR 0 33
64147: PUSH
64148: LD_VAR 0 34
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: PUSH
64161: LD_VAR 0 4
64165: PUSH
64166: LD_INT 1
64168: PLUS
64169: ARRAY
64170: ST_TO_ADDR
64171: GO 64656
64173: LD_INT 16
64175: DOUBLE
64176: EQUAL
64177: IFTRUE 64235
64179: LD_INT 17
64181: DOUBLE
64182: EQUAL
64183: IFTRUE 64235
64185: LD_INT 18
64187: DOUBLE
64188: EQUAL
64189: IFTRUE 64235
64191: LD_INT 19
64193: DOUBLE
64194: EQUAL
64195: IFTRUE 64235
64197: LD_INT 22
64199: DOUBLE
64200: EQUAL
64201: IFTRUE 64235
64203: LD_INT 20
64205: DOUBLE
64206: EQUAL
64207: IFTRUE 64235
64209: LD_INT 21
64211: DOUBLE
64212: EQUAL
64213: IFTRUE 64235
64215: LD_INT 23
64217: DOUBLE
64218: EQUAL
64219: IFTRUE 64235
64221: LD_INT 24
64223: DOUBLE
64224: EQUAL
64225: IFTRUE 64235
64227: LD_INT 25
64229: DOUBLE
64230: EQUAL
64231: IFTRUE 64235
64233: GO 64291
64235: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64236: LD_ADDR_VAR 0 9
64240: PUSH
64241: LD_VAR 0 35
64245: PUSH
64246: LD_VAR 0 36
64250: PUSH
64251: LD_VAR 0 37
64255: PUSH
64256: LD_VAR 0 38
64260: PUSH
64261: LD_VAR 0 39
64265: PUSH
64266: LD_VAR 0 40
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: PUSH
64279: LD_VAR 0 4
64283: PUSH
64284: LD_INT 1
64286: PLUS
64287: ARRAY
64288: ST_TO_ADDR
64289: GO 64656
64291: LD_INT 6
64293: DOUBLE
64294: EQUAL
64295: IFTRUE 64347
64297: LD_INT 7
64299: DOUBLE
64300: EQUAL
64301: IFTRUE 64347
64303: LD_INT 8
64305: DOUBLE
64306: EQUAL
64307: IFTRUE 64347
64309: LD_INT 13
64311: DOUBLE
64312: EQUAL
64313: IFTRUE 64347
64315: LD_INT 12
64317: DOUBLE
64318: EQUAL
64319: IFTRUE 64347
64321: LD_INT 15
64323: DOUBLE
64324: EQUAL
64325: IFTRUE 64347
64327: LD_INT 11
64329: DOUBLE
64330: EQUAL
64331: IFTRUE 64347
64333: LD_INT 14
64335: DOUBLE
64336: EQUAL
64337: IFTRUE 64347
64339: LD_INT 10
64341: DOUBLE
64342: EQUAL
64343: IFTRUE 64347
64345: GO 64403
64347: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64348: LD_ADDR_VAR 0 9
64352: PUSH
64353: LD_VAR 0 41
64357: PUSH
64358: LD_VAR 0 42
64362: PUSH
64363: LD_VAR 0 43
64367: PUSH
64368: LD_VAR 0 44
64372: PUSH
64373: LD_VAR 0 45
64377: PUSH
64378: LD_VAR 0 46
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: PUSH
64391: LD_VAR 0 4
64395: PUSH
64396: LD_INT 1
64398: PLUS
64399: ARRAY
64400: ST_TO_ADDR
64401: GO 64656
64403: LD_INT 36
64405: DOUBLE
64406: EQUAL
64407: IFTRUE 64411
64409: GO 64467
64411: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64412: LD_ADDR_VAR 0 9
64416: PUSH
64417: LD_VAR 0 47
64421: PUSH
64422: LD_VAR 0 48
64426: PUSH
64427: LD_VAR 0 49
64431: PUSH
64432: LD_VAR 0 50
64436: PUSH
64437: LD_VAR 0 51
64441: PUSH
64442: LD_VAR 0 52
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: PUSH
64455: LD_VAR 0 4
64459: PUSH
64460: LD_INT 1
64462: PLUS
64463: ARRAY
64464: ST_TO_ADDR
64465: GO 64656
64467: LD_INT 4
64469: DOUBLE
64470: EQUAL
64471: IFTRUE 64493
64473: LD_INT 5
64475: DOUBLE
64476: EQUAL
64477: IFTRUE 64493
64479: LD_INT 34
64481: DOUBLE
64482: EQUAL
64483: IFTRUE 64493
64485: LD_INT 37
64487: DOUBLE
64488: EQUAL
64489: IFTRUE 64493
64491: GO 64549
64493: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64494: LD_ADDR_VAR 0 9
64498: PUSH
64499: LD_VAR 0 53
64503: PUSH
64504: LD_VAR 0 54
64508: PUSH
64509: LD_VAR 0 55
64513: PUSH
64514: LD_VAR 0 56
64518: PUSH
64519: LD_VAR 0 57
64523: PUSH
64524: LD_VAR 0 58
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: PUSH
64537: LD_VAR 0 4
64541: PUSH
64542: LD_INT 1
64544: PLUS
64545: ARRAY
64546: ST_TO_ADDR
64547: GO 64656
64549: LD_INT 31
64551: DOUBLE
64552: EQUAL
64553: IFTRUE 64599
64555: LD_INT 32
64557: DOUBLE
64558: EQUAL
64559: IFTRUE 64599
64561: LD_INT 33
64563: DOUBLE
64564: EQUAL
64565: IFTRUE 64599
64567: LD_INT 27
64569: DOUBLE
64570: EQUAL
64571: IFTRUE 64599
64573: LD_INT 26
64575: DOUBLE
64576: EQUAL
64577: IFTRUE 64599
64579: LD_INT 28
64581: DOUBLE
64582: EQUAL
64583: IFTRUE 64599
64585: LD_INT 29
64587: DOUBLE
64588: EQUAL
64589: IFTRUE 64599
64591: LD_INT 30
64593: DOUBLE
64594: EQUAL
64595: IFTRUE 64599
64597: GO 64655
64599: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64600: LD_ADDR_VAR 0 9
64604: PUSH
64605: LD_VAR 0 59
64609: PUSH
64610: LD_VAR 0 60
64614: PUSH
64615: LD_VAR 0 61
64619: PUSH
64620: LD_VAR 0 62
64624: PUSH
64625: LD_VAR 0 63
64629: PUSH
64630: LD_VAR 0 64
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: PUSH
64643: LD_VAR 0 4
64647: PUSH
64648: LD_INT 1
64650: PLUS
64651: ARRAY
64652: ST_TO_ADDR
64653: GO 64656
64655: POP
// temp_list2 = [ ] ;
64656: LD_ADDR_VAR 0 10
64660: PUSH
64661: EMPTY
64662: ST_TO_ADDR
// for i in temp_list do
64663: LD_ADDR_VAR 0 8
64667: PUSH
64668: LD_VAR 0 9
64672: PUSH
64673: FOR_IN
64674: IFFALSE 64726
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64676: LD_ADDR_VAR 0 10
64680: PUSH
64681: LD_VAR 0 10
64685: PUSH
64686: LD_VAR 0 8
64690: PUSH
64691: LD_INT 1
64693: ARRAY
64694: PUSH
64695: LD_VAR 0 2
64699: PLUS
64700: PUSH
64701: LD_VAR 0 8
64705: PUSH
64706: LD_INT 2
64708: ARRAY
64709: PUSH
64710: LD_VAR 0 3
64714: PLUS
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: EMPTY
64721: LIST
64722: ADD
64723: ST_TO_ADDR
64724: GO 64673
64726: POP
64727: POP
// result = temp_list2 ;
64728: LD_ADDR_VAR 0 7
64732: PUSH
64733: LD_VAR 0 10
64737: ST_TO_ADDR
// end ;
64738: LD_VAR 0 7
64742: RET
// export function EnemyInRange ( unit , dist ) ; begin
64743: LD_INT 0
64745: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64746: LD_ADDR_VAR 0 3
64750: PUSH
64751: LD_VAR 0 1
64755: PPUSH
64756: CALL_OW 255
64760: PPUSH
64761: LD_VAR 0 1
64765: PPUSH
64766: CALL_OW 250
64770: PPUSH
64771: LD_VAR 0 1
64775: PPUSH
64776: CALL_OW 251
64780: PPUSH
64781: LD_VAR 0 2
64785: PPUSH
64786: CALL 38116 0 4
64790: PUSH
64791: LD_INT 4
64793: ARRAY
64794: ST_TO_ADDR
// end ;
64795: LD_VAR 0 3
64799: RET
// export function PlayerSeeMe ( unit ) ; begin
64800: LD_INT 0
64802: PPUSH
// result := See ( your_side , unit ) ;
64803: LD_ADDR_VAR 0 2
64807: PUSH
64808: LD_OWVAR 2
64812: PPUSH
64813: LD_VAR 0 1
64817: PPUSH
64818: CALL_OW 292
64822: ST_TO_ADDR
// end ;
64823: LD_VAR 0 2
64827: RET
// export function ReverseDir ( unit ) ; begin
64828: LD_INT 0
64830: PPUSH
// if not unit then
64831: LD_VAR 0 1
64835: NOT
64836: IFFALSE 64840
// exit ;
64838: GO 64863
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64840: LD_ADDR_VAR 0 2
64844: PUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: CALL_OW 254
64854: PUSH
64855: LD_INT 3
64857: PLUS
64858: PUSH
64859: LD_INT 6
64861: MOD
64862: ST_TO_ADDR
// end ;
64863: LD_VAR 0 2
64867: RET
// export function ReverseArray ( array ) ; var i ; begin
64868: LD_INT 0
64870: PPUSH
64871: PPUSH
// if not array then
64872: LD_VAR 0 1
64876: NOT
64877: IFFALSE 64881
// exit ;
64879: GO 64936
// result := [ ] ;
64881: LD_ADDR_VAR 0 2
64885: PUSH
64886: EMPTY
64887: ST_TO_ADDR
// for i := array downto 1 do
64888: LD_ADDR_VAR 0 3
64892: PUSH
64893: DOUBLE
64894: LD_VAR 0 1
64898: INC
64899: ST_TO_ADDR
64900: LD_INT 1
64902: PUSH
64903: FOR_DOWNTO
64904: IFFALSE 64934
// result := Join ( result , array [ i ] ) ;
64906: LD_ADDR_VAR 0 2
64910: PUSH
64911: LD_VAR 0 2
64915: PPUSH
64916: LD_VAR 0 1
64920: PUSH
64921: LD_VAR 0 3
64925: ARRAY
64926: PPUSH
64927: CALL 69601 0 2
64931: ST_TO_ADDR
64932: GO 64903
64934: POP
64935: POP
// end ;
64936: LD_VAR 0 2
64940: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64941: LD_INT 0
64943: PPUSH
64944: PPUSH
64945: PPUSH
64946: PPUSH
64947: PPUSH
64948: PPUSH
// if not unit or not hexes then
64949: LD_VAR 0 1
64953: NOT
64954: PUSH
64955: LD_VAR 0 2
64959: NOT
64960: OR
64961: IFFALSE 64965
// exit ;
64963: GO 65088
// dist := 9999 ;
64965: LD_ADDR_VAR 0 5
64969: PUSH
64970: LD_INT 9999
64972: ST_TO_ADDR
// for i = 1 to hexes do
64973: LD_ADDR_VAR 0 4
64977: PUSH
64978: DOUBLE
64979: LD_INT 1
64981: DEC
64982: ST_TO_ADDR
64983: LD_VAR 0 2
64987: PUSH
64988: FOR_TO
64989: IFFALSE 65076
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64991: LD_ADDR_VAR 0 6
64995: PUSH
64996: LD_VAR 0 1
65000: PPUSH
65001: LD_VAR 0 2
65005: PUSH
65006: LD_VAR 0 4
65010: ARRAY
65011: PUSH
65012: LD_INT 1
65014: ARRAY
65015: PPUSH
65016: LD_VAR 0 2
65020: PUSH
65021: LD_VAR 0 4
65025: ARRAY
65026: PUSH
65027: LD_INT 2
65029: ARRAY
65030: PPUSH
65031: CALL_OW 297
65035: ST_TO_ADDR
// if tdist < dist then
65036: LD_VAR 0 6
65040: PUSH
65041: LD_VAR 0 5
65045: LESS
65046: IFFALSE 65074
// begin hex := hexes [ i ] ;
65048: LD_ADDR_VAR 0 8
65052: PUSH
65053: LD_VAR 0 2
65057: PUSH
65058: LD_VAR 0 4
65062: ARRAY
65063: ST_TO_ADDR
// dist := tdist ;
65064: LD_ADDR_VAR 0 5
65068: PUSH
65069: LD_VAR 0 6
65073: ST_TO_ADDR
// end ; end ;
65074: GO 64988
65076: POP
65077: POP
// result := hex ;
65078: LD_ADDR_VAR 0 3
65082: PUSH
65083: LD_VAR 0 8
65087: ST_TO_ADDR
// end ;
65088: LD_VAR 0 3
65092: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65093: LD_INT 0
65095: PPUSH
65096: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65097: LD_VAR 0 1
65101: NOT
65102: PUSH
65103: LD_VAR 0 1
65107: PUSH
65108: LD_INT 21
65110: PUSH
65111: LD_INT 2
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 23
65120: PUSH
65121: LD_INT 2
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PPUSH
65132: CALL_OW 69
65136: IN
65137: NOT
65138: OR
65139: IFFALSE 65143
// exit ;
65141: GO 65190
// for i = 1 to 3 do
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: DOUBLE
65149: LD_INT 1
65151: DEC
65152: ST_TO_ADDR
65153: LD_INT 3
65155: PUSH
65156: FOR_TO
65157: IFFALSE 65188
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65159: LD_VAR 0 1
65163: PPUSH
65164: CALL_OW 250
65168: PPUSH
65169: LD_VAR 0 1
65173: PPUSH
65174: CALL_OW 251
65178: PPUSH
65179: LD_INT 1
65181: PPUSH
65182: CALL_OW 453
65186: GO 65156
65188: POP
65189: POP
// end ;
65190: LD_VAR 0 2
65194: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65195: LD_INT 0
65197: PPUSH
65198: PPUSH
65199: PPUSH
65200: PPUSH
65201: PPUSH
65202: PPUSH
// if not unit or not enemy_unit then
65203: LD_VAR 0 1
65207: NOT
65208: PUSH
65209: LD_VAR 0 2
65213: NOT
65214: OR
65215: IFFALSE 65219
// exit ;
65217: GO 65686
// if GetLives ( i ) < 250 then
65219: LD_VAR 0 4
65223: PPUSH
65224: CALL_OW 256
65228: PUSH
65229: LD_INT 250
65231: LESS
65232: IFFALSE 65245
// begin ComAutodestruct ( i ) ;
65234: LD_VAR 0 4
65238: PPUSH
65239: CALL 65093 0 1
// exit ;
65243: GO 65686
// end ; x := GetX ( enemy_unit ) ;
65245: LD_ADDR_VAR 0 7
65249: PUSH
65250: LD_VAR 0 2
65254: PPUSH
65255: CALL_OW 250
65259: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65260: LD_ADDR_VAR 0 8
65264: PUSH
65265: LD_VAR 0 2
65269: PPUSH
65270: CALL_OW 251
65274: ST_TO_ADDR
// if not x or not y then
65275: LD_VAR 0 7
65279: NOT
65280: PUSH
65281: LD_VAR 0 8
65285: NOT
65286: OR
65287: IFFALSE 65291
// exit ;
65289: GO 65686
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65291: LD_ADDR_VAR 0 6
65295: PUSH
65296: LD_VAR 0 7
65300: PPUSH
65301: LD_INT 0
65303: PPUSH
65304: LD_INT 4
65306: PPUSH
65307: CALL_OW 272
65311: PUSH
65312: LD_VAR 0 8
65316: PPUSH
65317: LD_INT 0
65319: PPUSH
65320: LD_INT 4
65322: PPUSH
65323: CALL_OW 273
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_VAR 0 7
65336: PPUSH
65337: LD_INT 1
65339: PPUSH
65340: LD_INT 4
65342: PPUSH
65343: CALL_OW 272
65347: PUSH
65348: LD_VAR 0 8
65352: PPUSH
65353: LD_INT 1
65355: PPUSH
65356: LD_INT 4
65358: PPUSH
65359: CALL_OW 273
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_VAR 0 7
65372: PPUSH
65373: LD_INT 2
65375: PPUSH
65376: LD_INT 4
65378: PPUSH
65379: CALL_OW 272
65383: PUSH
65384: LD_VAR 0 8
65388: PPUSH
65389: LD_INT 2
65391: PPUSH
65392: LD_INT 4
65394: PPUSH
65395: CALL_OW 273
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_VAR 0 7
65408: PPUSH
65409: LD_INT 3
65411: PPUSH
65412: LD_INT 4
65414: PPUSH
65415: CALL_OW 272
65419: PUSH
65420: LD_VAR 0 8
65424: PPUSH
65425: LD_INT 3
65427: PPUSH
65428: LD_INT 4
65430: PPUSH
65431: CALL_OW 273
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_VAR 0 7
65444: PPUSH
65445: LD_INT 4
65447: PPUSH
65448: LD_INT 4
65450: PPUSH
65451: CALL_OW 272
65455: PUSH
65456: LD_VAR 0 8
65460: PPUSH
65461: LD_INT 4
65463: PPUSH
65464: LD_INT 4
65466: PPUSH
65467: CALL_OW 273
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_VAR 0 7
65480: PPUSH
65481: LD_INT 5
65483: PPUSH
65484: LD_INT 4
65486: PPUSH
65487: CALL_OW 272
65491: PUSH
65492: LD_VAR 0 8
65496: PPUSH
65497: LD_INT 5
65499: PPUSH
65500: LD_INT 4
65502: PPUSH
65503: CALL_OW 273
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: ST_TO_ADDR
// for i = tmp downto 1 do
65520: LD_ADDR_VAR 0 4
65524: PUSH
65525: DOUBLE
65526: LD_VAR 0 6
65530: INC
65531: ST_TO_ADDR
65532: LD_INT 1
65534: PUSH
65535: FOR_DOWNTO
65536: IFFALSE 65637
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65538: LD_VAR 0 6
65542: PUSH
65543: LD_VAR 0 4
65547: ARRAY
65548: PUSH
65549: LD_INT 1
65551: ARRAY
65552: PPUSH
65553: LD_VAR 0 6
65557: PUSH
65558: LD_VAR 0 4
65562: ARRAY
65563: PUSH
65564: LD_INT 2
65566: ARRAY
65567: PPUSH
65568: CALL_OW 488
65572: NOT
65573: PUSH
65574: LD_VAR 0 6
65578: PUSH
65579: LD_VAR 0 4
65583: ARRAY
65584: PUSH
65585: LD_INT 1
65587: ARRAY
65588: PPUSH
65589: LD_VAR 0 6
65593: PUSH
65594: LD_VAR 0 4
65598: ARRAY
65599: PUSH
65600: LD_INT 2
65602: ARRAY
65603: PPUSH
65604: CALL_OW 428
65608: PUSH
65609: LD_INT 0
65611: NONEQUAL
65612: OR
65613: IFFALSE 65635
// tmp := Delete ( tmp , i ) ;
65615: LD_ADDR_VAR 0 6
65619: PUSH
65620: LD_VAR 0 6
65624: PPUSH
65625: LD_VAR 0 4
65629: PPUSH
65630: CALL_OW 3
65634: ST_TO_ADDR
65635: GO 65535
65637: POP
65638: POP
// j := GetClosestHex ( unit , tmp ) ;
65639: LD_ADDR_VAR 0 5
65643: PUSH
65644: LD_VAR 0 1
65648: PPUSH
65649: LD_VAR 0 6
65653: PPUSH
65654: CALL 64941 0 2
65658: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65659: LD_VAR 0 1
65663: PPUSH
65664: LD_VAR 0 5
65668: PUSH
65669: LD_INT 1
65671: ARRAY
65672: PPUSH
65673: LD_VAR 0 5
65677: PUSH
65678: LD_INT 2
65680: ARRAY
65681: PPUSH
65682: CALL_OW 111
// end ;
65686: LD_VAR 0 3
65690: RET
// export function PrepareApemanSoldier ( ) ; begin
65691: LD_INT 0
65693: PPUSH
// uc_nation := 0 ;
65694: LD_ADDR_OWVAR 21
65698: PUSH
65699: LD_INT 0
65701: ST_TO_ADDR
// hc_sex := sex_male ;
65702: LD_ADDR_OWVAR 27
65706: PUSH
65707: LD_INT 1
65709: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65710: LD_ADDR_OWVAR 28
65714: PUSH
65715: LD_INT 15
65717: ST_TO_ADDR
// hc_gallery :=  ;
65718: LD_ADDR_OWVAR 33
65722: PUSH
65723: LD_STRING 
65725: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65726: LD_ADDR_OWVAR 31
65730: PUSH
65731: LD_INT 0
65733: PPUSH
65734: LD_INT 3
65736: PPUSH
65737: CALL_OW 12
65741: PUSH
65742: LD_INT 0
65744: PPUSH
65745: LD_INT 3
65747: PPUSH
65748: CALL_OW 12
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: ST_TO_ADDR
// end ;
65765: LD_VAR 0 1
65769: RET
// export function PrepareApemanEngineer ( ) ; begin
65770: LD_INT 0
65772: PPUSH
// uc_nation := 0 ;
65773: LD_ADDR_OWVAR 21
65777: PUSH
65778: LD_INT 0
65780: ST_TO_ADDR
// hc_sex := sex_male ;
65781: LD_ADDR_OWVAR 27
65785: PUSH
65786: LD_INT 1
65788: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65789: LD_ADDR_OWVAR 28
65793: PUSH
65794: LD_INT 16
65796: ST_TO_ADDR
// hc_gallery :=  ;
65797: LD_ADDR_OWVAR 33
65801: PUSH
65802: LD_STRING 
65804: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65805: LD_ADDR_OWVAR 31
65809: PUSH
65810: LD_INT 0
65812: PPUSH
65813: LD_INT 3
65815: PPUSH
65816: CALL_OW 12
65820: PUSH
65821: LD_INT 0
65823: PPUSH
65824: LD_INT 3
65826: PPUSH
65827: CALL_OW 12
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: ST_TO_ADDR
// end ;
65844: LD_VAR 0 1
65848: RET
// export function PrepareApeman ( agressivity ) ; begin
65849: LD_INT 0
65851: PPUSH
// uc_side := 0 ;
65852: LD_ADDR_OWVAR 20
65856: PUSH
65857: LD_INT 0
65859: ST_TO_ADDR
// uc_nation := 0 ;
65860: LD_ADDR_OWVAR 21
65864: PUSH
65865: LD_INT 0
65867: ST_TO_ADDR
// hc_sex := sex_male ;
65868: LD_ADDR_OWVAR 27
65872: PUSH
65873: LD_INT 1
65875: ST_TO_ADDR
// hc_class := class_apeman ;
65876: LD_ADDR_OWVAR 28
65880: PUSH
65881: LD_INT 12
65883: ST_TO_ADDR
// hc_gallery :=  ;
65884: LD_ADDR_OWVAR 33
65888: PUSH
65889: LD_STRING 
65891: ST_TO_ADDR
// if agressivity = 0 then
65892: LD_VAR 0 1
65896: PUSH
65897: LD_INT 0
65899: EQUAL
65900: IFFALSE 65912
// hc_agressivity := 0 else
65902: LD_ADDR_OWVAR 35
65906: PUSH
65907: LD_INT 0
65909: ST_TO_ADDR
65910: GO 65933
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65912: LD_ADDR_OWVAR 35
65916: PUSH
65917: LD_VAR 0 1
65921: NEG
65922: PPUSH
65923: LD_VAR 0 1
65927: PPUSH
65928: CALL_OW 12
65932: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65933: LD_ADDR_OWVAR 31
65937: PUSH
65938: LD_INT 0
65940: PPUSH
65941: LD_INT 3
65943: PPUSH
65944: CALL_OW 12
65948: PUSH
65949: LD_INT 0
65951: PPUSH
65952: LD_INT 3
65954: PPUSH
65955: CALL_OW 12
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: ST_TO_ADDR
// end ;
65972: LD_VAR 0 2
65976: RET
// export function PrepareTiger ( agressivity ) ; begin
65977: LD_INT 0
65979: PPUSH
// uc_side := 0 ;
65980: LD_ADDR_OWVAR 20
65984: PUSH
65985: LD_INT 0
65987: ST_TO_ADDR
// uc_nation := 0 ;
65988: LD_ADDR_OWVAR 21
65992: PUSH
65993: LD_INT 0
65995: ST_TO_ADDR
// hc_class := class_tiger ;
65996: LD_ADDR_OWVAR 28
66000: PUSH
66001: LD_INT 14
66003: ST_TO_ADDR
// hc_gallery :=  ;
66004: LD_ADDR_OWVAR 33
66008: PUSH
66009: LD_STRING 
66011: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66012: LD_ADDR_OWVAR 35
66016: PUSH
66017: LD_VAR 0 1
66021: NEG
66022: PPUSH
66023: LD_VAR 0 1
66027: PPUSH
66028: CALL_OW 12
66032: ST_TO_ADDR
// end ;
66033: LD_VAR 0 2
66037: RET
// export function PrepareEnchidna ( ) ; begin
66038: LD_INT 0
66040: PPUSH
// uc_side := 0 ;
66041: LD_ADDR_OWVAR 20
66045: PUSH
66046: LD_INT 0
66048: ST_TO_ADDR
// uc_nation := 0 ;
66049: LD_ADDR_OWVAR 21
66053: PUSH
66054: LD_INT 0
66056: ST_TO_ADDR
// hc_class := class_baggie ;
66057: LD_ADDR_OWVAR 28
66061: PUSH
66062: LD_INT 13
66064: ST_TO_ADDR
// hc_gallery :=  ;
66065: LD_ADDR_OWVAR 33
66069: PUSH
66070: LD_STRING 
66072: ST_TO_ADDR
// end ;
66073: LD_VAR 0 1
66077: RET
// export function PrepareFrog ( ) ; begin
66078: LD_INT 0
66080: PPUSH
// uc_side := 0 ;
66081: LD_ADDR_OWVAR 20
66085: PUSH
66086: LD_INT 0
66088: ST_TO_ADDR
// uc_nation := 0 ;
66089: LD_ADDR_OWVAR 21
66093: PUSH
66094: LD_INT 0
66096: ST_TO_ADDR
// hc_class := class_frog ;
66097: LD_ADDR_OWVAR 28
66101: PUSH
66102: LD_INT 19
66104: ST_TO_ADDR
// hc_gallery :=  ;
66105: LD_ADDR_OWVAR 33
66109: PUSH
66110: LD_STRING 
66112: ST_TO_ADDR
// end ;
66113: LD_VAR 0 1
66117: RET
// export function PrepareFish ( ) ; begin
66118: LD_INT 0
66120: PPUSH
// uc_side := 0 ;
66121: LD_ADDR_OWVAR 20
66125: PUSH
66126: LD_INT 0
66128: ST_TO_ADDR
// uc_nation := 0 ;
66129: LD_ADDR_OWVAR 21
66133: PUSH
66134: LD_INT 0
66136: ST_TO_ADDR
// hc_class := class_fish ;
66137: LD_ADDR_OWVAR 28
66141: PUSH
66142: LD_INT 20
66144: ST_TO_ADDR
// hc_gallery :=  ;
66145: LD_ADDR_OWVAR 33
66149: PUSH
66150: LD_STRING 
66152: ST_TO_ADDR
// end ;
66153: LD_VAR 0 1
66157: RET
// export function PrepareBird ( ) ; begin
66158: LD_INT 0
66160: PPUSH
// uc_side := 0 ;
66161: LD_ADDR_OWVAR 20
66165: PUSH
66166: LD_INT 0
66168: ST_TO_ADDR
// uc_nation := 0 ;
66169: LD_ADDR_OWVAR 21
66173: PUSH
66174: LD_INT 0
66176: ST_TO_ADDR
// hc_class := class_phororhacos ;
66177: LD_ADDR_OWVAR 28
66181: PUSH
66182: LD_INT 18
66184: ST_TO_ADDR
// hc_gallery :=  ;
66185: LD_ADDR_OWVAR 33
66189: PUSH
66190: LD_STRING 
66192: ST_TO_ADDR
// end ;
66193: LD_VAR 0 1
66197: RET
// export function PrepareHorse ( ) ; begin
66198: LD_INT 0
66200: PPUSH
// uc_side := 0 ;
66201: LD_ADDR_OWVAR 20
66205: PUSH
66206: LD_INT 0
66208: ST_TO_ADDR
// uc_nation := 0 ;
66209: LD_ADDR_OWVAR 21
66213: PUSH
66214: LD_INT 0
66216: ST_TO_ADDR
// hc_class := class_horse ;
66217: LD_ADDR_OWVAR 28
66221: PUSH
66222: LD_INT 21
66224: ST_TO_ADDR
// hc_gallery :=  ;
66225: LD_ADDR_OWVAR 33
66229: PUSH
66230: LD_STRING 
66232: ST_TO_ADDR
// end ;
66233: LD_VAR 0 1
66237: RET
// export function PrepareMastodont ( ) ; begin
66238: LD_INT 0
66240: PPUSH
// uc_side := 0 ;
66241: LD_ADDR_OWVAR 20
66245: PUSH
66246: LD_INT 0
66248: ST_TO_ADDR
// uc_nation := 0 ;
66249: LD_ADDR_OWVAR 21
66253: PUSH
66254: LD_INT 0
66256: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66257: LD_ADDR_OWVAR 37
66261: PUSH
66262: LD_INT 31
66264: ST_TO_ADDR
// vc_control := control_rider ;
66265: LD_ADDR_OWVAR 38
66269: PUSH
66270: LD_INT 4
66272: ST_TO_ADDR
// end ;
66273: LD_VAR 0 1
66277: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66278: LD_INT 0
66280: PPUSH
66281: PPUSH
66282: PPUSH
// uc_side = 0 ;
66283: LD_ADDR_OWVAR 20
66287: PUSH
66288: LD_INT 0
66290: ST_TO_ADDR
// uc_nation = 0 ;
66291: LD_ADDR_OWVAR 21
66295: PUSH
66296: LD_INT 0
66298: ST_TO_ADDR
// InitHc_All ( ) ;
66299: CALL_OW 584
// InitVc ;
66303: CALL_OW 20
// if mastodonts then
66307: LD_VAR 0 6
66311: IFFALSE 66378
// for i = 1 to mastodonts do
66313: LD_ADDR_VAR 0 11
66317: PUSH
66318: DOUBLE
66319: LD_INT 1
66321: DEC
66322: ST_TO_ADDR
66323: LD_VAR 0 6
66327: PUSH
66328: FOR_TO
66329: IFFALSE 66376
// begin vc_chassis := 31 ;
66331: LD_ADDR_OWVAR 37
66335: PUSH
66336: LD_INT 31
66338: ST_TO_ADDR
// vc_control := control_rider ;
66339: LD_ADDR_OWVAR 38
66343: PUSH
66344: LD_INT 4
66346: ST_TO_ADDR
// animal := CreateVehicle ;
66347: LD_ADDR_VAR 0 12
66351: PUSH
66352: CALL_OW 45
66356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66357: LD_VAR 0 12
66361: PPUSH
66362: LD_VAR 0 8
66366: PPUSH
66367: LD_INT 0
66369: PPUSH
66370: CALL 68506 0 3
// end ;
66374: GO 66328
66376: POP
66377: POP
// if horses then
66378: LD_VAR 0 5
66382: IFFALSE 66449
// for i = 1 to horses do
66384: LD_ADDR_VAR 0 11
66388: PUSH
66389: DOUBLE
66390: LD_INT 1
66392: DEC
66393: ST_TO_ADDR
66394: LD_VAR 0 5
66398: PUSH
66399: FOR_TO
66400: IFFALSE 66447
// begin hc_class := 21 ;
66402: LD_ADDR_OWVAR 28
66406: PUSH
66407: LD_INT 21
66409: ST_TO_ADDR
// hc_gallery :=  ;
66410: LD_ADDR_OWVAR 33
66414: PUSH
66415: LD_STRING 
66417: ST_TO_ADDR
// animal := CreateHuman ;
66418: LD_ADDR_VAR 0 12
66422: PUSH
66423: CALL_OW 44
66427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66428: LD_VAR 0 12
66432: PPUSH
66433: LD_VAR 0 8
66437: PPUSH
66438: LD_INT 0
66440: PPUSH
66441: CALL 68506 0 3
// end ;
66445: GO 66399
66447: POP
66448: POP
// if birds then
66449: LD_VAR 0 1
66453: IFFALSE 66520
// for i = 1 to birds do
66455: LD_ADDR_VAR 0 11
66459: PUSH
66460: DOUBLE
66461: LD_INT 1
66463: DEC
66464: ST_TO_ADDR
66465: LD_VAR 0 1
66469: PUSH
66470: FOR_TO
66471: IFFALSE 66518
// begin hc_class := 18 ;
66473: LD_ADDR_OWVAR 28
66477: PUSH
66478: LD_INT 18
66480: ST_TO_ADDR
// hc_gallery =  ;
66481: LD_ADDR_OWVAR 33
66485: PUSH
66486: LD_STRING 
66488: ST_TO_ADDR
// animal := CreateHuman ;
66489: LD_ADDR_VAR 0 12
66493: PUSH
66494: CALL_OW 44
66498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66499: LD_VAR 0 12
66503: PPUSH
66504: LD_VAR 0 8
66508: PPUSH
66509: LD_INT 0
66511: PPUSH
66512: CALL 68506 0 3
// end ;
66516: GO 66470
66518: POP
66519: POP
// if tigers then
66520: LD_VAR 0 2
66524: IFFALSE 66608
// for i = 1 to tigers do
66526: LD_ADDR_VAR 0 11
66530: PUSH
66531: DOUBLE
66532: LD_INT 1
66534: DEC
66535: ST_TO_ADDR
66536: LD_VAR 0 2
66540: PUSH
66541: FOR_TO
66542: IFFALSE 66606
// begin hc_class = class_tiger ;
66544: LD_ADDR_OWVAR 28
66548: PUSH
66549: LD_INT 14
66551: ST_TO_ADDR
// hc_gallery =  ;
66552: LD_ADDR_OWVAR 33
66556: PUSH
66557: LD_STRING 
66559: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66560: LD_ADDR_OWVAR 35
66564: PUSH
66565: LD_INT 7
66567: NEG
66568: PPUSH
66569: LD_INT 7
66571: PPUSH
66572: CALL_OW 12
66576: ST_TO_ADDR
// animal := CreateHuman ;
66577: LD_ADDR_VAR 0 12
66581: PUSH
66582: CALL_OW 44
66586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66587: LD_VAR 0 12
66591: PPUSH
66592: LD_VAR 0 8
66596: PPUSH
66597: LD_INT 0
66599: PPUSH
66600: CALL 68506 0 3
// end ;
66604: GO 66541
66606: POP
66607: POP
// if apemans then
66608: LD_VAR 0 3
66612: IFFALSE 66735
// for i = 1 to apemans do
66614: LD_ADDR_VAR 0 11
66618: PUSH
66619: DOUBLE
66620: LD_INT 1
66622: DEC
66623: ST_TO_ADDR
66624: LD_VAR 0 3
66628: PUSH
66629: FOR_TO
66630: IFFALSE 66733
// begin hc_class = class_apeman ;
66632: LD_ADDR_OWVAR 28
66636: PUSH
66637: LD_INT 12
66639: ST_TO_ADDR
// hc_gallery =  ;
66640: LD_ADDR_OWVAR 33
66644: PUSH
66645: LD_STRING 
66647: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66648: LD_ADDR_OWVAR 35
66652: PUSH
66653: LD_INT 2
66655: NEG
66656: PPUSH
66657: LD_INT 2
66659: PPUSH
66660: CALL_OW 12
66664: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66665: LD_ADDR_OWVAR 31
66669: PUSH
66670: LD_INT 1
66672: PPUSH
66673: LD_INT 3
66675: PPUSH
66676: CALL_OW 12
66680: PUSH
66681: LD_INT 1
66683: PPUSH
66684: LD_INT 3
66686: PPUSH
66687: CALL_OW 12
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: ST_TO_ADDR
// animal := CreateHuman ;
66704: LD_ADDR_VAR 0 12
66708: PUSH
66709: CALL_OW 44
66713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66714: LD_VAR 0 12
66718: PPUSH
66719: LD_VAR 0 8
66723: PPUSH
66724: LD_INT 0
66726: PPUSH
66727: CALL 68506 0 3
// end ;
66731: GO 66629
66733: POP
66734: POP
// if enchidnas then
66735: LD_VAR 0 4
66739: IFFALSE 66806
// for i = 1 to enchidnas do
66741: LD_ADDR_VAR 0 11
66745: PUSH
66746: DOUBLE
66747: LD_INT 1
66749: DEC
66750: ST_TO_ADDR
66751: LD_VAR 0 4
66755: PUSH
66756: FOR_TO
66757: IFFALSE 66804
// begin hc_class = 13 ;
66759: LD_ADDR_OWVAR 28
66763: PUSH
66764: LD_INT 13
66766: ST_TO_ADDR
// hc_gallery =  ;
66767: LD_ADDR_OWVAR 33
66771: PUSH
66772: LD_STRING 
66774: ST_TO_ADDR
// animal := CreateHuman ;
66775: LD_ADDR_VAR 0 12
66779: PUSH
66780: CALL_OW 44
66784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66785: LD_VAR 0 12
66789: PPUSH
66790: LD_VAR 0 8
66794: PPUSH
66795: LD_INT 0
66797: PPUSH
66798: CALL 68506 0 3
// end ;
66802: GO 66756
66804: POP
66805: POP
// if fishes then
66806: LD_VAR 0 7
66810: IFFALSE 66877
// for i = 1 to fishes do
66812: LD_ADDR_VAR 0 11
66816: PUSH
66817: DOUBLE
66818: LD_INT 1
66820: DEC
66821: ST_TO_ADDR
66822: LD_VAR 0 7
66826: PUSH
66827: FOR_TO
66828: IFFALSE 66875
// begin hc_class = 20 ;
66830: LD_ADDR_OWVAR 28
66834: PUSH
66835: LD_INT 20
66837: ST_TO_ADDR
// hc_gallery =  ;
66838: LD_ADDR_OWVAR 33
66842: PUSH
66843: LD_STRING 
66845: ST_TO_ADDR
// animal := CreateHuman ;
66846: LD_ADDR_VAR 0 12
66850: PUSH
66851: CALL_OW 44
66855: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66856: LD_VAR 0 12
66860: PPUSH
66861: LD_VAR 0 9
66865: PPUSH
66866: LD_INT 0
66868: PPUSH
66869: CALL 68506 0 3
// end ;
66873: GO 66827
66875: POP
66876: POP
// end ;
66877: LD_VAR 0 10
66881: RET
// export function WantHeal ( sci , unit ) ; begin
66882: LD_INT 0
66884: PPUSH
// if GetTaskList ( sci ) > 0 then
66885: LD_VAR 0 1
66889: PPUSH
66890: CALL_OW 437
66894: PUSH
66895: LD_INT 0
66897: GREATER
66898: IFFALSE 66968
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66900: LD_VAR 0 1
66904: PPUSH
66905: CALL_OW 437
66909: PUSH
66910: LD_INT 1
66912: ARRAY
66913: PUSH
66914: LD_INT 1
66916: ARRAY
66917: PUSH
66918: LD_STRING l
66920: EQUAL
66921: PUSH
66922: LD_VAR 0 1
66926: PPUSH
66927: CALL_OW 437
66931: PUSH
66932: LD_INT 1
66934: ARRAY
66935: PUSH
66936: LD_INT 4
66938: ARRAY
66939: PUSH
66940: LD_VAR 0 2
66944: EQUAL
66945: AND
66946: IFFALSE 66958
// result := true else
66948: LD_ADDR_VAR 0 3
66952: PUSH
66953: LD_INT 1
66955: ST_TO_ADDR
66956: GO 66966
// result := false ;
66958: LD_ADDR_VAR 0 3
66962: PUSH
66963: LD_INT 0
66965: ST_TO_ADDR
// end else
66966: GO 66976
// result := false ;
66968: LD_ADDR_VAR 0 3
66972: PUSH
66973: LD_INT 0
66975: ST_TO_ADDR
// end ;
66976: LD_VAR 0 3
66980: RET
// export function HealTarget ( sci ) ; begin
66981: LD_INT 0
66983: PPUSH
// if not sci then
66984: LD_VAR 0 1
66988: NOT
66989: IFFALSE 66993
// exit ;
66991: GO 67058
// result := 0 ;
66993: LD_ADDR_VAR 0 2
66997: PUSH
66998: LD_INT 0
67000: ST_TO_ADDR
// if GetTaskList ( sci ) then
67001: LD_VAR 0 1
67005: PPUSH
67006: CALL_OW 437
67010: IFFALSE 67058
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67012: LD_VAR 0 1
67016: PPUSH
67017: CALL_OW 437
67021: PUSH
67022: LD_INT 1
67024: ARRAY
67025: PUSH
67026: LD_INT 1
67028: ARRAY
67029: PUSH
67030: LD_STRING l
67032: EQUAL
67033: IFFALSE 67058
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67035: LD_ADDR_VAR 0 2
67039: PUSH
67040: LD_VAR 0 1
67044: PPUSH
67045: CALL_OW 437
67049: PUSH
67050: LD_INT 1
67052: ARRAY
67053: PUSH
67054: LD_INT 4
67056: ARRAY
67057: ST_TO_ADDR
// end ;
67058: LD_VAR 0 2
67062: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67063: LD_INT 0
67065: PPUSH
67066: PPUSH
67067: PPUSH
67068: PPUSH
// if not base_units then
67069: LD_VAR 0 1
67073: NOT
67074: IFFALSE 67078
// exit ;
67076: GO 67165
// result := false ;
67078: LD_ADDR_VAR 0 2
67082: PUSH
67083: LD_INT 0
67085: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67086: LD_ADDR_VAR 0 5
67090: PUSH
67091: LD_VAR 0 1
67095: PPUSH
67096: LD_INT 21
67098: PUSH
67099: LD_INT 3
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PPUSH
67106: CALL_OW 72
67110: ST_TO_ADDR
// if not tmp then
67111: LD_VAR 0 5
67115: NOT
67116: IFFALSE 67120
// exit ;
67118: GO 67165
// for i in tmp do
67120: LD_ADDR_VAR 0 3
67124: PUSH
67125: LD_VAR 0 5
67129: PUSH
67130: FOR_IN
67131: IFFALSE 67163
// begin result := EnemyInRange ( i , 22 ) ;
67133: LD_ADDR_VAR 0 2
67137: PUSH
67138: LD_VAR 0 3
67142: PPUSH
67143: LD_INT 22
67145: PPUSH
67146: CALL 64743 0 2
67150: ST_TO_ADDR
// if result then
67151: LD_VAR 0 2
67155: IFFALSE 67161
// exit ;
67157: POP
67158: POP
67159: GO 67165
// end ;
67161: GO 67130
67163: POP
67164: POP
// end ;
67165: LD_VAR 0 2
67169: RET
// export function FilterByTag ( units , tag ) ; begin
67170: LD_INT 0
67172: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67173: LD_ADDR_VAR 0 3
67177: PUSH
67178: LD_VAR 0 1
67182: PPUSH
67183: LD_INT 120
67185: PUSH
67186: LD_VAR 0 2
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PPUSH
67195: CALL_OW 72
67199: ST_TO_ADDR
// end ;
67200: LD_VAR 0 3
67204: RET
// export function IsDriver ( un ) ; begin
67205: LD_INT 0
67207: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67208: LD_ADDR_VAR 0 2
67212: PUSH
67213: LD_VAR 0 1
67217: PUSH
67218: LD_INT 55
67220: PUSH
67221: EMPTY
67222: LIST
67223: PPUSH
67224: CALL_OW 69
67228: IN
67229: ST_TO_ADDR
// end ;
67230: LD_VAR 0 2
67234: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67235: LD_INT 0
67237: PPUSH
67238: PPUSH
// list := [ ] ;
67239: LD_ADDR_VAR 0 5
67243: PUSH
67244: EMPTY
67245: ST_TO_ADDR
// case d of 0 :
67246: LD_VAR 0 3
67250: PUSH
67251: LD_INT 0
67253: DOUBLE
67254: EQUAL
67255: IFTRUE 67259
67257: GO 67392
67259: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67260: LD_ADDR_VAR 0 5
67264: PUSH
67265: LD_VAR 0 1
67269: PUSH
67270: LD_INT 4
67272: MINUS
67273: PUSH
67274: LD_VAR 0 2
67278: PUSH
67279: LD_INT 4
67281: MINUS
67282: PUSH
67283: LD_INT 2
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: LIST
67290: PUSH
67291: LD_VAR 0 1
67295: PUSH
67296: LD_INT 3
67298: MINUS
67299: PUSH
67300: LD_VAR 0 2
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: LIST
67312: PUSH
67313: LD_VAR 0 1
67317: PUSH
67318: LD_INT 4
67320: PLUS
67321: PUSH
67322: LD_VAR 0 2
67326: PUSH
67327: LD_INT 4
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: LIST
67334: PUSH
67335: LD_VAR 0 1
67339: PUSH
67340: LD_INT 3
67342: PLUS
67343: PUSH
67344: LD_VAR 0 2
67348: PUSH
67349: LD_INT 3
67351: PLUS
67352: PUSH
67353: LD_INT 5
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: LIST
67360: PUSH
67361: LD_VAR 0 1
67365: PUSH
67366: LD_VAR 0 2
67370: PUSH
67371: LD_INT 4
67373: PLUS
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: LIST
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: ST_TO_ADDR
// end ; 1 :
67390: GO 68090
67392: LD_INT 1
67394: DOUBLE
67395: EQUAL
67396: IFTRUE 67400
67398: GO 67533
67400: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67401: LD_ADDR_VAR 0 5
67405: PUSH
67406: LD_VAR 0 1
67410: PUSH
67411: LD_VAR 0 2
67415: PUSH
67416: LD_INT 4
67418: MINUS
67419: PUSH
67420: LD_INT 3
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: LIST
67427: PUSH
67428: LD_VAR 0 1
67432: PUSH
67433: LD_INT 3
67435: MINUS
67436: PUSH
67437: LD_VAR 0 2
67441: PUSH
67442: LD_INT 3
67444: MINUS
67445: PUSH
67446: LD_INT 2
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: LIST
67453: PUSH
67454: LD_VAR 0 1
67458: PUSH
67459: LD_INT 4
67461: MINUS
67462: PUSH
67463: LD_VAR 0 2
67467: PUSH
67468: LD_INT 1
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: LIST
67475: PUSH
67476: LD_VAR 0 1
67480: PUSH
67481: LD_VAR 0 2
67485: PUSH
67486: LD_INT 3
67488: PLUS
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: LIST
67497: PUSH
67498: LD_VAR 0 1
67502: PUSH
67503: LD_INT 4
67505: PLUS
67506: PUSH
67507: LD_VAR 0 2
67511: PUSH
67512: LD_INT 4
67514: PLUS
67515: PUSH
67516: LD_INT 5
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: LIST
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: ST_TO_ADDR
// end ; 2 :
67531: GO 68090
67533: LD_INT 2
67535: DOUBLE
67536: EQUAL
67537: IFTRUE 67541
67539: GO 67670
67541: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67542: LD_ADDR_VAR 0 5
67546: PUSH
67547: LD_VAR 0 1
67551: PUSH
67552: LD_VAR 0 2
67556: PUSH
67557: LD_INT 3
67559: MINUS
67560: PUSH
67561: LD_INT 3
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: LIST
67568: PUSH
67569: LD_VAR 0 1
67573: PUSH
67574: LD_INT 4
67576: PLUS
67577: PUSH
67578: LD_VAR 0 2
67582: PUSH
67583: LD_INT 4
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: LIST
67590: PUSH
67591: LD_VAR 0 1
67595: PUSH
67596: LD_VAR 0 2
67600: PUSH
67601: LD_INT 4
67603: PLUS
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: LIST
67612: PUSH
67613: LD_VAR 0 1
67617: PUSH
67618: LD_INT 3
67620: MINUS
67621: PUSH
67622: LD_VAR 0 2
67626: PUSH
67627: LD_INT 1
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: LIST
67634: PUSH
67635: LD_VAR 0 1
67639: PUSH
67640: LD_INT 4
67642: MINUS
67643: PUSH
67644: LD_VAR 0 2
67648: PUSH
67649: LD_INT 4
67651: MINUS
67652: PUSH
67653: LD_INT 2
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: LIST
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: ST_TO_ADDR
// end ; 3 :
67668: GO 68090
67670: LD_INT 3
67672: DOUBLE
67673: EQUAL
67674: IFTRUE 67678
67676: GO 67811
67678: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67679: LD_ADDR_VAR 0 5
67683: PUSH
67684: LD_VAR 0 1
67688: PUSH
67689: LD_INT 3
67691: PLUS
67692: PUSH
67693: LD_VAR 0 2
67697: PUSH
67698: LD_INT 4
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: LIST
67705: PUSH
67706: LD_VAR 0 1
67710: PUSH
67711: LD_INT 4
67713: PLUS
67714: PUSH
67715: LD_VAR 0 2
67719: PUSH
67720: LD_INT 4
67722: PLUS
67723: PUSH
67724: LD_INT 5
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: LIST
67731: PUSH
67732: LD_VAR 0 1
67736: PUSH
67737: LD_INT 4
67739: MINUS
67740: PUSH
67741: LD_VAR 0 2
67745: PUSH
67746: LD_INT 1
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: LIST
67753: PUSH
67754: LD_VAR 0 1
67758: PUSH
67759: LD_VAR 0 2
67763: PUSH
67764: LD_INT 4
67766: MINUS
67767: PUSH
67768: LD_INT 3
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: LIST
67775: PUSH
67776: LD_VAR 0 1
67780: PUSH
67781: LD_INT 3
67783: MINUS
67784: PUSH
67785: LD_VAR 0 2
67789: PUSH
67790: LD_INT 3
67792: MINUS
67793: PUSH
67794: LD_INT 2
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: LIST
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: ST_TO_ADDR
// end ; 4 :
67809: GO 68090
67811: LD_INT 4
67813: DOUBLE
67814: EQUAL
67815: IFTRUE 67819
67817: GO 67952
67819: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67820: LD_ADDR_VAR 0 5
67824: PUSH
67825: LD_VAR 0 1
67829: PUSH
67830: LD_VAR 0 2
67834: PUSH
67835: LD_INT 4
67837: PLUS
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: LIST
67846: PUSH
67847: LD_VAR 0 1
67851: PUSH
67852: LD_INT 3
67854: PLUS
67855: PUSH
67856: LD_VAR 0 2
67860: PUSH
67861: LD_INT 3
67863: PLUS
67864: PUSH
67865: LD_INT 5
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: LIST
67872: PUSH
67873: LD_VAR 0 1
67877: PUSH
67878: LD_INT 4
67880: PLUS
67881: PUSH
67882: LD_VAR 0 2
67886: PUSH
67887: LD_INT 4
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: LIST
67894: PUSH
67895: LD_VAR 0 1
67899: PUSH
67900: LD_VAR 0 2
67904: PUSH
67905: LD_INT 3
67907: MINUS
67908: PUSH
67909: LD_INT 3
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: LIST
67916: PUSH
67917: LD_VAR 0 1
67921: PUSH
67922: LD_INT 4
67924: MINUS
67925: PUSH
67926: LD_VAR 0 2
67930: PUSH
67931: LD_INT 4
67933: MINUS
67934: PUSH
67935: LD_INT 2
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: LIST
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: ST_TO_ADDR
// end ; 5 :
67950: GO 68090
67952: LD_INT 5
67954: DOUBLE
67955: EQUAL
67956: IFTRUE 67960
67958: GO 68089
67960: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67961: LD_ADDR_VAR 0 5
67965: PUSH
67966: LD_VAR 0 1
67970: PUSH
67971: LD_INT 4
67973: MINUS
67974: PUSH
67975: LD_VAR 0 2
67979: PUSH
67980: LD_INT 1
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: LIST
67987: PUSH
67988: LD_VAR 0 1
67992: PUSH
67993: LD_VAR 0 2
67997: PUSH
67998: LD_INT 4
68000: MINUS
68001: PUSH
68002: LD_INT 3
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: LIST
68009: PUSH
68010: LD_VAR 0 1
68014: PUSH
68015: LD_INT 4
68017: PLUS
68018: PUSH
68019: LD_VAR 0 2
68023: PUSH
68024: LD_INT 4
68026: PLUS
68027: PUSH
68028: LD_INT 5
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: LIST
68035: PUSH
68036: LD_VAR 0 1
68040: PUSH
68041: LD_INT 3
68043: PLUS
68044: PUSH
68045: LD_VAR 0 2
68049: PUSH
68050: LD_INT 4
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: LIST
68057: PUSH
68058: LD_VAR 0 1
68062: PUSH
68063: LD_VAR 0 2
68067: PUSH
68068: LD_INT 3
68070: PLUS
68071: PUSH
68072: LD_INT 0
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: ST_TO_ADDR
// end ; end ;
68087: GO 68090
68089: POP
// result := list ;
68090: LD_ADDR_VAR 0 4
68094: PUSH
68095: LD_VAR 0 5
68099: ST_TO_ADDR
// end ;
68100: LD_VAR 0 4
68104: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68105: LD_INT 0
68107: PPUSH
68108: PPUSH
68109: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68110: LD_VAR 0 1
68114: NOT
68115: PUSH
68116: LD_VAR 0 2
68120: PUSH
68121: LD_INT 1
68123: PUSH
68124: LD_INT 2
68126: PUSH
68127: LD_INT 3
68129: PUSH
68130: LD_INT 4
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: IN
68139: NOT
68140: OR
68141: IFFALSE 68145
// exit ;
68143: GO 68228
// tmp := [ ] ;
68145: LD_ADDR_VAR 0 5
68149: PUSH
68150: EMPTY
68151: ST_TO_ADDR
// for i in units do
68152: LD_ADDR_VAR 0 4
68156: PUSH
68157: LD_VAR 0 1
68161: PUSH
68162: FOR_IN
68163: IFFALSE 68197
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68165: LD_ADDR_VAR 0 5
68169: PUSH
68170: LD_VAR 0 5
68174: PPUSH
68175: LD_VAR 0 4
68179: PPUSH
68180: LD_VAR 0 2
68184: PPUSH
68185: CALL_OW 259
68189: PPUSH
68190: CALL 69601 0 2
68194: ST_TO_ADDR
68195: GO 68162
68197: POP
68198: POP
// if not tmp then
68199: LD_VAR 0 5
68203: NOT
68204: IFFALSE 68208
// exit ;
68206: GO 68228
// result := SortListByListDesc ( units , tmp ) ;
68208: LD_ADDR_VAR 0 3
68212: PUSH
68213: LD_VAR 0 1
68217: PPUSH
68218: LD_VAR 0 5
68222: PPUSH
68223: CALL_OW 77
68227: ST_TO_ADDR
// end ;
68228: LD_VAR 0 3
68232: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68233: LD_INT 0
68235: PPUSH
68236: PPUSH
68237: PPUSH
// result := false ;
68238: LD_ADDR_VAR 0 3
68242: PUSH
68243: LD_INT 0
68245: ST_TO_ADDR
// if not building then
68246: LD_VAR 0 2
68250: NOT
68251: IFFALSE 68255
// exit ;
68253: GO 68393
// x := GetX ( building ) ;
68255: LD_ADDR_VAR 0 4
68259: PUSH
68260: LD_VAR 0 2
68264: PPUSH
68265: CALL_OW 250
68269: ST_TO_ADDR
// y := GetY ( building ) ;
68270: LD_ADDR_VAR 0 5
68274: PUSH
68275: LD_VAR 0 2
68279: PPUSH
68280: CALL_OW 251
68284: ST_TO_ADDR
// if not x or not y then
68285: LD_VAR 0 4
68289: NOT
68290: PUSH
68291: LD_VAR 0 5
68295: NOT
68296: OR
68297: IFFALSE 68301
// exit ;
68299: GO 68393
// if GetTaskList ( unit ) then
68301: LD_VAR 0 1
68305: PPUSH
68306: CALL_OW 437
68310: IFFALSE 68393
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68312: LD_STRING e
68314: PUSH
68315: LD_VAR 0 1
68319: PPUSH
68320: CALL_OW 437
68324: PUSH
68325: LD_INT 1
68327: ARRAY
68328: PUSH
68329: LD_INT 1
68331: ARRAY
68332: EQUAL
68333: PUSH
68334: LD_VAR 0 4
68338: PUSH
68339: LD_VAR 0 1
68343: PPUSH
68344: CALL_OW 437
68348: PUSH
68349: LD_INT 1
68351: ARRAY
68352: PUSH
68353: LD_INT 2
68355: ARRAY
68356: EQUAL
68357: AND
68358: PUSH
68359: LD_VAR 0 5
68363: PUSH
68364: LD_VAR 0 1
68368: PPUSH
68369: CALL_OW 437
68373: PUSH
68374: LD_INT 1
68376: ARRAY
68377: PUSH
68378: LD_INT 3
68380: ARRAY
68381: EQUAL
68382: AND
68383: IFFALSE 68393
// result := true end ;
68385: LD_ADDR_VAR 0 3
68389: PUSH
68390: LD_INT 1
68392: ST_TO_ADDR
// end ;
68393: LD_VAR 0 3
68397: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68398: LD_INT 0
68400: PPUSH
// result := false ;
68401: LD_ADDR_VAR 0 4
68405: PUSH
68406: LD_INT 0
68408: ST_TO_ADDR
// if GetTaskList ( unit ) then
68409: LD_VAR 0 1
68413: PPUSH
68414: CALL_OW 437
68418: IFFALSE 68501
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68420: LD_STRING M
68422: PUSH
68423: LD_VAR 0 1
68427: PPUSH
68428: CALL_OW 437
68432: PUSH
68433: LD_INT 1
68435: ARRAY
68436: PUSH
68437: LD_INT 1
68439: ARRAY
68440: EQUAL
68441: PUSH
68442: LD_VAR 0 2
68446: PUSH
68447: LD_VAR 0 1
68451: PPUSH
68452: CALL_OW 437
68456: PUSH
68457: LD_INT 1
68459: ARRAY
68460: PUSH
68461: LD_INT 2
68463: ARRAY
68464: EQUAL
68465: AND
68466: PUSH
68467: LD_VAR 0 3
68471: PUSH
68472: LD_VAR 0 1
68476: PPUSH
68477: CALL_OW 437
68481: PUSH
68482: LD_INT 1
68484: ARRAY
68485: PUSH
68486: LD_INT 3
68488: ARRAY
68489: EQUAL
68490: AND
68491: IFFALSE 68501
// result := true ;
68493: LD_ADDR_VAR 0 4
68497: PUSH
68498: LD_INT 1
68500: ST_TO_ADDR
// end ; end ;
68501: LD_VAR 0 4
68505: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68506: LD_INT 0
68508: PPUSH
68509: PPUSH
68510: PPUSH
68511: PPUSH
// if not unit or not area then
68512: LD_VAR 0 1
68516: NOT
68517: PUSH
68518: LD_VAR 0 2
68522: NOT
68523: OR
68524: IFFALSE 68528
// exit ;
68526: GO 68704
// tmp := AreaToList ( area , i ) ;
68528: LD_ADDR_VAR 0 6
68532: PUSH
68533: LD_VAR 0 2
68537: PPUSH
68538: LD_VAR 0 5
68542: PPUSH
68543: CALL_OW 517
68547: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68548: LD_ADDR_VAR 0 5
68552: PUSH
68553: DOUBLE
68554: LD_INT 1
68556: DEC
68557: ST_TO_ADDR
68558: LD_VAR 0 6
68562: PUSH
68563: LD_INT 1
68565: ARRAY
68566: PUSH
68567: FOR_TO
68568: IFFALSE 68702
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68570: LD_ADDR_VAR 0 7
68574: PUSH
68575: LD_VAR 0 6
68579: PUSH
68580: LD_INT 1
68582: ARRAY
68583: PUSH
68584: LD_VAR 0 5
68588: ARRAY
68589: PUSH
68590: LD_VAR 0 6
68594: PUSH
68595: LD_INT 2
68597: ARRAY
68598: PUSH
68599: LD_VAR 0 5
68603: ARRAY
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68609: LD_INT 92
68611: PUSH
68612: LD_VAR 0 7
68616: PUSH
68617: LD_INT 1
68619: ARRAY
68620: PUSH
68621: LD_VAR 0 7
68625: PUSH
68626: LD_INT 2
68628: ARRAY
68629: PUSH
68630: LD_INT 2
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: PPUSH
68639: CALL_OW 69
68643: PUSH
68644: LD_INT 0
68646: EQUAL
68647: IFFALSE 68700
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68649: LD_VAR 0 1
68653: PPUSH
68654: LD_VAR 0 7
68658: PUSH
68659: LD_INT 1
68661: ARRAY
68662: PPUSH
68663: LD_VAR 0 7
68667: PUSH
68668: LD_INT 2
68670: ARRAY
68671: PPUSH
68672: LD_VAR 0 3
68676: PPUSH
68677: CALL_OW 48
// result := IsPlaced ( unit ) ;
68681: LD_ADDR_VAR 0 4
68685: PUSH
68686: LD_VAR 0 1
68690: PPUSH
68691: CALL_OW 305
68695: ST_TO_ADDR
// exit ;
68696: POP
68697: POP
68698: GO 68704
// end ; end ;
68700: GO 68567
68702: POP
68703: POP
// end ;
68704: LD_VAR 0 4
68708: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68709: LD_INT 0
68711: PPUSH
68712: PPUSH
68713: PPUSH
// if not side or side > 8 then
68714: LD_VAR 0 1
68718: NOT
68719: PUSH
68720: LD_VAR 0 1
68724: PUSH
68725: LD_INT 8
68727: GREATER
68728: OR
68729: IFFALSE 68733
// exit ;
68731: GO 68920
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68733: LD_ADDR_VAR 0 4
68737: PUSH
68738: LD_INT 22
68740: PUSH
68741: LD_VAR 0 1
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 21
68752: PUSH
68753: LD_INT 3
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PPUSH
68764: CALL_OW 69
68768: ST_TO_ADDR
// if not tmp then
68769: LD_VAR 0 4
68773: NOT
68774: IFFALSE 68778
// exit ;
68776: GO 68920
// enable_addtolog := true ;
68778: LD_ADDR_OWVAR 81
68782: PUSH
68783: LD_INT 1
68785: ST_TO_ADDR
// AddToLog ( [ ) ;
68786: LD_STRING [
68788: PPUSH
68789: CALL_OW 561
// for i in tmp do
68793: LD_ADDR_VAR 0 3
68797: PUSH
68798: LD_VAR 0 4
68802: PUSH
68803: FOR_IN
68804: IFFALSE 68911
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68806: LD_STRING [
68808: PUSH
68809: LD_VAR 0 3
68813: PPUSH
68814: CALL_OW 266
68818: STR
68819: PUSH
68820: LD_STRING , 
68822: STR
68823: PUSH
68824: LD_VAR 0 3
68828: PPUSH
68829: CALL_OW 250
68833: STR
68834: PUSH
68835: LD_STRING , 
68837: STR
68838: PUSH
68839: LD_VAR 0 3
68843: PPUSH
68844: CALL_OW 251
68848: STR
68849: PUSH
68850: LD_STRING , 
68852: STR
68853: PUSH
68854: LD_VAR 0 3
68858: PPUSH
68859: CALL_OW 254
68863: STR
68864: PUSH
68865: LD_STRING , 
68867: STR
68868: PUSH
68869: LD_VAR 0 3
68873: PPUSH
68874: LD_INT 1
68876: PPUSH
68877: CALL_OW 268
68881: STR
68882: PUSH
68883: LD_STRING , 
68885: STR
68886: PUSH
68887: LD_VAR 0 3
68891: PPUSH
68892: LD_INT 2
68894: PPUSH
68895: CALL_OW 268
68899: STR
68900: PUSH
68901: LD_STRING ],
68903: STR
68904: PPUSH
68905: CALL_OW 561
// end ;
68909: GO 68803
68911: POP
68912: POP
// AddToLog ( ]; ) ;
68913: LD_STRING ];
68915: PPUSH
68916: CALL_OW 561
// end ;
68920: LD_VAR 0 2
68924: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68925: LD_INT 0
68927: PPUSH
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
// if not area or not rate or not max then
68932: LD_VAR 0 1
68936: NOT
68937: PUSH
68938: LD_VAR 0 2
68942: NOT
68943: OR
68944: PUSH
68945: LD_VAR 0 4
68949: NOT
68950: OR
68951: IFFALSE 68955
// exit ;
68953: GO 69144
// while 1 do
68955: LD_INT 1
68957: IFFALSE 69144
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68959: LD_ADDR_VAR 0 9
68963: PUSH
68964: LD_VAR 0 1
68968: PPUSH
68969: LD_INT 1
68971: PPUSH
68972: CALL_OW 287
68976: PUSH
68977: LD_INT 10
68979: MUL
68980: ST_TO_ADDR
// r := rate / 10 ;
68981: LD_ADDR_VAR 0 7
68985: PUSH
68986: LD_VAR 0 2
68990: PUSH
68991: LD_INT 10
68993: DIVREAL
68994: ST_TO_ADDR
// time := 1 1$00 ;
68995: LD_ADDR_VAR 0 8
68999: PUSH
69000: LD_INT 2100
69002: ST_TO_ADDR
// if amount < min then
69003: LD_VAR 0 9
69007: PUSH
69008: LD_VAR 0 3
69012: LESS
69013: IFFALSE 69031
// r := r * 2 else
69015: LD_ADDR_VAR 0 7
69019: PUSH
69020: LD_VAR 0 7
69024: PUSH
69025: LD_INT 2
69027: MUL
69028: ST_TO_ADDR
69029: GO 69057
// if amount > max then
69031: LD_VAR 0 9
69035: PUSH
69036: LD_VAR 0 4
69040: GREATER
69041: IFFALSE 69057
// r := r / 2 ;
69043: LD_ADDR_VAR 0 7
69047: PUSH
69048: LD_VAR 0 7
69052: PUSH
69053: LD_INT 2
69055: DIVREAL
69056: ST_TO_ADDR
// time := time / r ;
69057: LD_ADDR_VAR 0 8
69061: PUSH
69062: LD_VAR 0 8
69066: PUSH
69067: LD_VAR 0 7
69071: DIVREAL
69072: ST_TO_ADDR
// if time < 0 then
69073: LD_VAR 0 8
69077: PUSH
69078: LD_INT 0
69080: LESS
69081: IFFALSE 69098
// time := time * - 1 ;
69083: LD_ADDR_VAR 0 8
69087: PUSH
69088: LD_VAR 0 8
69092: PUSH
69093: LD_INT 1
69095: NEG
69096: MUL
69097: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69098: LD_VAR 0 8
69102: PUSH
69103: LD_INT 35
69105: PPUSH
69106: LD_INT 875
69108: PPUSH
69109: CALL_OW 12
69113: PLUS
69114: PPUSH
69115: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69119: LD_INT 1
69121: PPUSH
69122: LD_INT 5
69124: PPUSH
69125: CALL_OW 12
69129: PPUSH
69130: LD_VAR 0 1
69134: PPUSH
69135: LD_INT 1
69137: PPUSH
69138: CALL_OW 55
// end ;
69142: GO 68955
// end ;
69144: LD_VAR 0 5
69148: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69149: LD_INT 0
69151: PPUSH
69152: PPUSH
69153: PPUSH
69154: PPUSH
69155: PPUSH
69156: PPUSH
69157: PPUSH
69158: PPUSH
// if not turrets or not factories then
69159: LD_VAR 0 1
69163: NOT
69164: PUSH
69165: LD_VAR 0 2
69169: NOT
69170: OR
69171: IFFALSE 69175
// exit ;
69173: GO 69482
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69175: LD_ADDR_VAR 0 10
69179: PUSH
69180: LD_INT 5
69182: PUSH
69183: LD_INT 6
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: LD_INT 4
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 3
69202: PUSH
69203: LD_INT 5
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 24
69217: PUSH
69218: LD_INT 25
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 23
69227: PUSH
69228: LD_INT 27
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 42
69241: PUSH
69242: LD_INT 43
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 44
69251: PUSH
69252: LD_INT 46
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 45
69261: PUSH
69262: LD_INT 47
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: LIST
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: LIST
69278: ST_TO_ADDR
// result := [ ] ;
69279: LD_ADDR_VAR 0 3
69283: PUSH
69284: EMPTY
69285: ST_TO_ADDR
// for i in turrets do
69286: LD_ADDR_VAR 0 4
69290: PUSH
69291: LD_VAR 0 1
69295: PUSH
69296: FOR_IN
69297: IFFALSE 69480
// begin nat := GetNation ( i ) ;
69299: LD_ADDR_VAR 0 7
69303: PUSH
69304: LD_VAR 0 4
69308: PPUSH
69309: CALL_OW 248
69313: ST_TO_ADDR
// weapon := 0 ;
69314: LD_ADDR_VAR 0 8
69318: PUSH
69319: LD_INT 0
69321: ST_TO_ADDR
// if not nat then
69322: LD_VAR 0 7
69326: NOT
69327: IFFALSE 69331
// continue ;
69329: GO 69296
// for j in list [ nat ] do
69331: LD_ADDR_VAR 0 5
69335: PUSH
69336: LD_VAR 0 10
69340: PUSH
69341: LD_VAR 0 7
69345: ARRAY
69346: PUSH
69347: FOR_IN
69348: IFFALSE 69389
// if GetBWeapon ( i ) = j [ 1 ] then
69350: LD_VAR 0 4
69354: PPUSH
69355: CALL_OW 269
69359: PUSH
69360: LD_VAR 0 5
69364: PUSH
69365: LD_INT 1
69367: ARRAY
69368: EQUAL
69369: IFFALSE 69387
// begin weapon := j [ 2 ] ;
69371: LD_ADDR_VAR 0 8
69375: PUSH
69376: LD_VAR 0 5
69380: PUSH
69381: LD_INT 2
69383: ARRAY
69384: ST_TO_ADDR
// break ;
69385: GO 69389
// end ;
69387: GO 69347
69389: POP
69390: POP
// if not weapon then
69391: LD_VAR 0 8
69395: NOT
69396: IFFALSE 69400
// continue ;
69398: GO 69296
// for k in factories do
69400: LD_ADDR_VAR 0 6
69404: PUSH
69405: LD_VAR 0 2
69409: PUSH
69410: FOR_IN
69411: IFFALSE 69476
// begin weapons := AvailableWeaponList ( k ) ;
69413: LD_ADDR_VAR 0 9
69417: PUSH
69418: LD_VAR 0 6
69422: PPUSH
69423: CALL_OW 478
69427: ST_TO_ADDR
// if not weapons then
69428: LD_VAR 0 9
69432: NOT
69433: IFFALSE 69437
// continue ;
69435: GO 69410
// if weapon in weapons then
69437: LD_VAR 0 8
69441: PUSH
69442: LD_VAR 0 9
69446: IN
69447: IFFALSE 69474
// begin result := [ i , weapon ] ;
69449: LD_ADDR_VAR 0 3
69453: PUSH
69454: LD_VAR 0 4
69458: PUSH
69459: LD_VAR 0 8
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: ST_TO_ADDR
// exit ;
69468: POP
69469: POP
69470: POP
69471: POP
69472: GO 69482
// end ; end ;
69474: GO 69410
69476: POP
69477: POP
// end ;
69478: GO 69296
69480: POP
69481: POP
// end ;
69482: LD_VAR 0 3
69486: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69487: LD_INT 0
69489: PPUSH
// if not side or side > 8 then
69490: LD_VAR 0 3
69494: NOT
69495: PUSH
69496: LD_VAR 0 3
69500: PUSH
69501: LD_INT 8
69503: GREATER
69504: OR
69505: IFFALSE 69509
// exit ;
69507: GO 69568
// if not range then
69509: LD_VAR 0 4
69513: NOT
69514: IFFALSE 69525
// range := - 12 ;
69516: LD_ADDR_VAR 0 4
69520: PUSH
69521: LD_INT 12
69523: NEG
69524: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69525: LD_VAR 0 1
69529: PPUSH
69530: LD_VAR 0 2
69534: PPUSH
69535: LD_VAR 0 3
69539: PPUSH
69540: LD_VAR 0 4
69544: PPUSH
69545: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69549: LD_VAR 0 1
69553: PPUSH
69554: LD_VAR 0 2
69558: PPUSH
69559: LD_VAR 0 3
69563: PPUSH
69564: CALL_OW 331
// end ;
69568: LD_VAR 0 5
69572: RET
// export function Video ( mode ) ; begin
69573: LD_INT 0
69575: PPUSH
// ingame_video = mode ;
69576: LD_ADDR_OWVAR 52
69580: PUSH
69581: LD_VAR 0 1
69585: ST_TO_ADDR
// interface_hidden = mode ;
69586: LD_ADDR_OWVAR 54
69590: PUSH
69591: LD_VAR 0 1
69595: ST_TO_ADDR
// end ;
69596: LD_VAR 0 2
69600: RET
// export function Join ( array , element ) ; begin
69601: LD_INT 0
69603: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69604: LD_ADDR_VAR 0 3
69608: PUSH
69609: LD_VAR 0 1
69613: PPUSH
69614: LD_VAR 0 1
69618: PUSH
69619: LD_INT 1
69621: PLUS
69622: PPUSH
69623: LD_VAR 0 2
69627: PPUSH
69628: CALL_OW 1
69632: ST_TO_ADDR
// end ;
69633: LD_VAR 0 3
69637: RET
// export function JoinUnion ( array , element ) ; begin
69638: LD_INT 0
69640: PPUSH
// result := array union element ;
69641: LD_ADDR_VAR 0 3
69645: PUSH
69646: LD_VAR 0 1
69650: PUSH
69651: LD_VAR 0 2
69655: UNION
69656: ST_TO_ADDR
// end ;
69657: LD_VAR 0 3
69661: RET
// export function GetBehemoths ( side ) ; begin
69662: LD_INT 0
69664: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69665: LD_ADDR_VAR 0 2
69669: PUSH
69670: LD_INT 22
69672: PUSH
69673: LD_VAR 0 1
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 31
69684: PUSH
69685: LD_INT 25
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PPUSH
69696: CALL_OW 69
69700: ST_TO_ADDR
// end ;
69701: LD_VAR 0 2
69705: RET
// export function Shuffle ( array ) ; var i , index ; begin
69706: LD_INT 0
69708: PPUSH
69709: PPUSH
69710: PPUSH
// result := [ ] ;
69711: LD_ADDR_VAR 0 2
69715: PUSH
69716: EMPTY
69717: ST_TO_ADDR
// if not array then
69718: LD_VAR 0 1
69722: NOT
69723: IFFALSE 69727
// exit ;
69725: GO 69826
// Randomize ;
69727: CALL_OW 10
// for i = array downto 1 do
69731: LD_ADDR_VAR 0 3
69735: PUSH
69736: DOUBLE
69737: LD_VAR 0 1
69741: INC
69742: ST_TO_ADDR
69743: LD_INT 1
69745: PUSH
69746: FOR_DOWNTO
69747: IFFALSE 69824
// begin index := rand ( 1 , array ) ;
69749: LD_ADDR_VAR 0 4
69753: PUSH
69754: LD_INT 1
69756: PPUSH
69757: LD_VAR 0 1
69761: PPUSH
69762: CALL_OW 12
69766: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69767: LD_ADDR_VAR 0 2
69771: PUSH
69772: LD_VAR 0 2
69776: PPUSH
69777: LD_VAR 0 2
69781: PUSH
69782: LD_INT 1
69784: PLUS
69785: PPUSH
69786: LD_VAR 0 1
69790: PUSH
69791: LD_VAR 0 4
69795: ARRAY
69796: PPUSH
69797: CALL_OW 2
69801: ST_TO_ADDR
// array := Delete ( array , index ) ;
69802: LD_ADDR_VAR 0 1
69806: PUSH
69807: LD_VAR 0 1
69811: PPUSH
69812: LD_VAR 0 4
69816: PPUSH
69817: CALL_OW 3
69821: ST_TO_ADDR
// end ;
69822: GO 69746
69824: POP
69825: POP
// end ;
69826: LD_VAR 0 2
69830: RET
// export function GetBaseMaterials ( base ) ; begin
69831: LD_INT 0
69833: PPUSH
// result := [ 0 , 0 , 0 ] ;
69834: LD_ADDR_VAR 0 2
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: LD_INT 0
69844: PUSH
69845: LD_INT 0
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: LIST
69852: ST_TO_ADDR
// if not base then
69853: LD_VAR 0 1
69857: NOT
69858: IFFALSE 69862
// exit ;
69860: GO 69911
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69862: LD_ADDR_VAR 0 2
69866: PUSH
69867: LD_VAR 0 1
69871: PPUSH
69872: LD_INT 1
69874: PPUSH
69875: CALL_OW 275
69879: PUSH
69880: LD_VAR 0 1
69884: PPUSH
69885: LD_INT 2
69887: PPUSH
69888: CALL_OW 275
69892: PUSH
69893: LD_VAR 0 1
69897: PPUSH
69898: LD_INT 3
69900: PPUSH
69901: CALL_OW 275
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: LIST
69910: ST_TO_ADDR
// end ;
69911: LD_VAR 0 2
69915: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69916: LD_INT 0
69918: PPUSH
69919: PPUSH
// result := array ;
69920: LD_ADDR_VAR 0 3
69924: PUSH
69925: LD_VAR 0 1
69929: ST_TO_ADDR
// if size >= result then
69930: LD_VAR 0 2
69934: PUSH
69935: LD_VAR 0 3
69939: GREATEREQUAL
69940: IFFALSE 69944
// exit ;
69942: GO 69994
// if size then
69944: LD_VAR 0 2
69948: IFFALSE 69994
// for i := array downto size do
69950: LD_ADDR_VAR 0 4
69954: PUSH
69955: DOUBLE
69956: LD_VAR 0 1
69960: INC
69961: ST_TO_ADDR
69962: LD_VAR 0 2
69966: PUSH
69967: FOR_DOWNTO
69968: IFFALSE 69992
// result := Delete ( result , result ) ;
69970: LD_ADDR_VAR 0 3
69974: PUSH
69975: LD_VAR 0 3
69979: PPUSH
69980: LD_VAR 0 3
69984: PPUSH
69985: CALL_OW 3
69989: ST_TO_ADDR
69990: GO 69967
69992: POP
69993: POP
// end ;
69994: LD_VAR 0 3
69998: RET
// export function ComExit ( unit ) ; var tmp ; begin
69999: LD_INT 0
70001: PPUSH
70002: PPUSH
// if not IsInUnit ( unit ) then
70003: LD_VAR 0 1
70007: PPUSH
70008: CALL_OW 310
70012: NOT
70013: IFFALSE 70017
// exit ;
70015: GO 70077
// tmp := IsInUnit ( unit ) ;
70017: LD_ADDR_VAR 0 3
70021: PUSH
70022: LD_VAR 0 1
70026: PPUSH
70027: CALL_OW 310
70031: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70032: LD_VAR 0 3
70036: PPUSH
70037: CALL_OW 247
70041: PUSH
70042: LD_INT 2
70044: EQUAL
70045: IFFALSE 70058
// ComExitVehicle ( unit ) else
70047: LD_VAR 0 1
70051: PPUSH
70052: CALL_OW 121
70056: GO 70067
// ComExitBuilding ( unit ) ;
70058: LD_VAR 0 1
70062: PPUSH
70063: CALL_OW 122
// result := tmp ;
70067: LD_ADDR_VAR 0 2
70071: PUSH
70072: LD_VAR 0 3
70076: ST_TO_ADDR
// end ;
70077: LD_VAR 0 2
70081: RET
// export function ComExitAll ( units ) ; var i ; begin
70082: LD_INT 0
70084: PPUSH
70085: PPUSH
// if not units then
70086: LD_VAR 0 1
70090: NOT
70091: IFFALSE 70095
// exit ;
70093: GO 70121
// for i in units do
70095: LD_ADDR_VAR 0 3
70099: PUSH
70100: LD_VAR 0 1
70104: PUSH
70105: FOR_IN
70106: IFFALSE 70119
// ComExit ( i ) ;
70108: LD_VAR 0 3
70112: PPUSH
70113: CALL 69999 0 1
70117: GO 70105
70119: POP
70120: POP
// end ;
70121: LD_VAR 0 2
70125: RET
// export function ResetHc ; begin
70126: LD_INT 0
70128: PPUSH
// InitHc ;
70129: CALL_OW 19
// hc_importance := 0 ;
70133: LD_ADDR_OWVAR 32
70137: PUSH
70138: LD_INT 0
70140: ST_TO_ADDR
// end ;
70141: LD_VAR 0 1
70145: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70146: LD_INT 0
70148: PPUSH
70149: PPUSH
70150: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70151: LD_ADDR_VAR 0 6
70155: PUSH
70156: LD_VAR 0 1
70160: PUSH
70161: LD_VAR 0 3
70165: PLUS
70166: PUSH
70167: LD_INT 2
70169: DIV
70170: ST_TO_ADDR
// if _x < 0 then
70171: LD_VAR 0 6
70175: PUSH
70176: LD_INT 0
70178: LESS
70179: IFFALSE 70196
// _x := _x * - 1 ;
70181: LD_ADDR_VAR 0 6
70185: PUSH
70186: LD_VAR 0 6
70190: PUSH
70191: LD_INT 1
70193: NEG
70194: MUL
70195: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70196: LD_ADDR_VAR 0 7
70200: PUSH
70201: LD_VAR 0 2
70205: PUSH
70206: LD_VAR 0 4
70210: PLUS
70211: PUSH
70212: LD_INT 2
70214: DIV
70215: ST_TO_ADDR
// if _y < 0 then
70216: LD_VAR 0 7
70220: PUSH
70221: LD_INT 0
70223: LESS
70224: IFFALSE 70241
// _y := _y * - 1 ;
70226: LD_ADDR_VAR 0 7
70230: PUSH
70231: LD_VAR 0 7
70235: PUSH
70236: LD_INT 1
70238: NEG
70239: MUL
70240: ST_TO_ADDR
// result := [ _x , _y ] ;
70241: LD_ADDR_VAR 0 5
70245: PUSH
70246: LD_VAR 0 6
70250: PUSH
70251: LD_VAR 0 7
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: ST_TO_ADDR
// end ;
70260: LD_VAR 0 5
70264: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70265: LD_INT 0
70267: PPUSH
70268: PPUSH
70269: PPUSH
70270: PPUSH
// task := GetTaskList ( unit ) ;
70271: LD_ADDR_VAR 0 7
70275: PUSH
70276: LD_VAR 0 1
70280: PPUSH
70281: CALL_OW 437
70285: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70286: LD_VAR 0 7
70290: NOT
70291: PUSH
70292: LD_VAR 0 1
70296: PPUSH
70297: LD_VAR 0 2
70301: PPUSH
70302: CALL_OW 308
70306: NOT
70307: AND
70308: IFFALSE 70312
// exit ;
70310: GO 70430
// if IsInArea ( unit , area ) then
70312: LD_VAR 0 1
70316: PPUSH
70317: LD_VAR 0 2
70321: PPUSH
70322: CALL_OW 308
70326: IFFALSE 70344
// begin ComMoveToArea ( unit , goAway ) ;
70328: LD_VAR 0 1
70332: PPUSH
70333: LD_VAR 0 3
70337: PPUSH
70338: CALL_OW 113
// exit ;
70342: GO 70430
// end ; if task [ 1 ] [ 1 ] <> M then
70344: LD_VAR 0 7
70348: PUSH
70349: LD_INT 1
70351: ARRAY
70352: PUSH
70353: LD_INT 1
70355: ARRAY
70356: PUSH
70357: LD_STRING M
70359: NONEQUAL
70360: IFFALSE 70364
// exit ;
70362: GO 70430
// x := task [ 1 ] [ 2 ] ;
70364: LD_ADDR_VAR 0 5
70368: PUSH
70369: LD_VAR 0 7
70373: PUSH
70374: LD_INT 1
70376: ARRAY
70377: PUSH
70378: LD_INT 2
70380: ARRAY
70381: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70382: LD_ADDR_VAR 0 6
70386: PUSH
70387: LD_VAR 0 7
70391: PUSH
70392: LD_INT 1
70394: ARRAY
70395: PUSH
70396: LD_INT 3
70398: ARRAY
70399: ST_TO_ADDR
// if InArea ( x , y , area ) then
70400: LD_VAR 0 5
70404: PPUSH
70405: LD_VAR 0 6
70409: PPUSH
70410: LD_VAR 0 2
70414: PPUSH
70415: CALL_OW 309
70419: IFFALSE 70430
// ComStop ( unit ) ;
70421: LD_VAR 0 1
70425: PPUSH
70426: CALL_OW 141
// end ;
70430: LD_VAR 0 4
70434: RET
// export function Abs ( value ) ; begin
70435: LD_INT 0
70437: PPUSH
// result := value ;
70438: LD_ADDR_VAR 0 2
70442: PUSH
70443: LD_VAR 0 1
70447: ST_TO_ADDR
// if value < 0 then
70448: LD_VAR 0 1
70452: PUSH
70453: LD_INT 0
70455: LESS
70456: IFFALSE 70473
// result := value * - 1 ;
70458: LD_ADDR_VAR 0 2
70462: PUSH
70463: LD_VAR 0 1
70467: PUSH
70468: LD_INT 1
70470: NEG
70471: MUL
70472: ST_TO_ADDR
// end ;
70473: LD_VAR 0 2
70477: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70478: LD_INT 0
70480: PPUSH
70481: PPUSH
70482: PPUSH
70483: PPUSH
70484: PPUSH
70485: PPUSH
70486: PPUSH
70487: PPUSH
// if not unit or not building then
70488: LD_VAR 0 1
70492: NOT
70493: PUSH
70494: LD_VAR 0 2
70498: NOT
70499: OR
70500: IFFALSE 70504
// exit ;
70502: GO 70730
// x := GetX ( building ) ;
70504: LD_ADDR_VAR 0 4
70508: PUSH
70509: LD_VAR 0 2
70513: PPUSH
70514: CALL_OW 250
70518: ST_TO_ADDR
// y := GetY ( building ) ;
70519: LD_ADDR_VAR 0 6
70523: PUSH
70524: LD_VAR 0 2
70528: PPUSH
70529: CALL_OW 251
70533: ST_TO_ADDR
// d := GetDir ( building ) ;
70534: LD_ADDR_VAR 0 8
70538: PUSH
70539: LD_VAR 0 2
70543: PPUSH
70544: CALL_OW 254
70548: ST_TO_ADDR
// r := 4 ;
70549: LD_ADDR_VAR 0 9
70553: PUSH
70554: LD_INT 4
70556: ST_TO_ADDR
// for i := 1 to 5 do
70557: LD_ADDR_VAR 0 10
70561: PUSH
70562: DOUBLE
70563: LD_INT 1
70565: DEC
70566: ST_TO_ADDR
70567: LD_INT 5
70569: PUSH
70570: FOR_TO
70571: IFFALSE 70728
// begin _x := ShiftX ( x , d , r + i ) ;
70573: LD_ADDR_VAR 0 5
70577: PUSH
70578: LD_VAR 0 4
70582: PPUSH
70583: LD_VAR 0 8
70587: PPUSH
70588: LD_VAR 0 9
70592: PUSH
70593: LD_VAR 0 10
70597: PLUS
70598: PPUSH
70599: CALL_OW 272
70603: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70604: LD_ADDR_VAR 0 7
70608: PUSH
70609: LD_VAR 0 6
70613: PPUSH
70614: LD_VAR 0 8
70618: PPUSH
70619: LD_VAR 0 9
70623: PUSH
70624: LD_VAR 0 10
70628: PLUS
70629: PPUSH
70630: CALL_OW 273
70634: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70635: LD_VAR 0 5
70639: PPUSH
70640: LD_VAR 0 7
70644: PPUSH
70645: CALL_OW 488
70649: PUSH
70650: LD_VAR 0 5
70654: PPUSH
70655: LD_VAR 0 7
70659: PPUSH
70660: CALL_OW 428
70664: PPUSH
70665: CALL_OW 247
70669: PUSH
70670: LD_INT 3
70672: PUSH
70673: LD_INT 2
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: IN
70680: NOT
70681: AND
70682: IFFALSE 70726
// begin ComMoveXY ( unit , _x , _y ) ;
70684: LD_VAR 0 1
70688: PPUSH
70689: LD_VAR 0 5
70693: PPUSH
70694: LD_VAR 0 7
70698: PPUSH
70699: CALL_OW 111
// result := [ _x , _y ] ;
70703: LD_ADDR_VAR 0 3
70707: PUSH
70708: LD_VAR 0 5
70712: PUSH
70713: LD_VAR 0 7
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: ST_TO_ADDR
// exit ;
70722: POP
70723: POP
70724: GO 70730
// end ; end ;
70726: GO 70570
70728: POP
70729: POP
// end ;
70730: LD_VAR 0 3
70734: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70735: LD_INT 0
70737: PPUSH
70738: PPUSH
70739: PPUSH
// result := 0 ;
70740: LD_ADDR_VAR 0 3
70744: PUSH
70745: LD_INT 0
70747: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70748: LD_VAR 0 1
70752: PUSH
70753: LD_INT 0
70755: LESS
70756: PUSH
70757: LD_VAR 0 1
70761: PUSH
70762: LD_INT 8
70764: GREATER
70765: OR
70766: PUSH
70767: LD_VAR 0 2
70771: PUSH
70772: LD_INT 0
70774: LESS
70775: OR
70776: PUSH
70777: LD_VAR 0 2
70781: PUSH
70782: LD_INT 8
70784: GREATER
70785: OR
70786: IFFALSE 70790
// exit ;
70788: GO 70865
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70790: LD_ADDR_VAR 0 4
70794: PUSH
70795: LD_INT 22
70797: PUSH
70798: LD_VAR 0 2
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PPUSH
70807: CALL_OW 69
70811: PUSH
70812: FOR_IN
70813: IFFALSE 70863
// begin un := UnitShoot ( i ) ;
70815: LD_ADDR_VAR 0 5
70819: PUSH
70820: LD_VAR 0 4
70824: PPUSH
70825: CALL_OW 504
70829: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70830: LD_VAR 0 5
70834: PPUSH
70835: CALL_OW 255
70839: PUSH
70840: LD_VAR 0 1
70844: EQUAL
70845: IFFALSE 70861
// begin result := un ;
70847: LD_ADDR_VAR 0 3
70851: PUSH
70852: LD_VAR 0 5
70856: ST_TO_ADDR
// exit ;
70857: POP
70858: POP
70859: GO 70865
// end ; end ;
70861: GO 70812
70863: POP
70864: POP
// end ;
70865: LD_VAR 0 3
70869: RET
// export function GetCargoBay ( units ) ; begin
70870: LD_INT 0
70872: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70873: LD_ADDR_VAR 0 2
70877: PUSH
70878: LD_VAR 0 1
70882: PPUSH
70883: LD_INT 2
70885: PUSH
70886: LD_INT 34
70888: PUSH
70889: LD_INT 12
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 34
70898: PUSH
70899: LD_INT 51
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 34
70908: PUSH
70909: LD_INT 32
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 34
70918: PUSH
70919: LD_INT 89
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: PPUSH
70933: CALL_OW 72
70937: ST_TO_ADDR
// end ;
70938: LD_VAR 0 2
70942: RET
// export function Negate ( value ) ; begin
70943: LD_INT 0
70945: PPUSH
// result := not value ;
70946: LD_ADDR_VAR 0 2
70950: PUSH
70951: LD_VAR 0 1
70955: NOT
70956: ST_TO_ADDR
// end ;
70957: LD_VAR 0 2
70961: RET
// export function Inc ( value ) ; begin
70962: LD_INT 0
70964: PPUSH
// result := value + 1 ;
70965: LD_ADDR_VAR 0 2
70969: PUSH
70970: LD_VAR 0 1
70974: PUSH
70975: LD_INT 1
70977: PLUS
70978: ST_TO_ADDR
// end ;
70979: LD_VAR 0 2
70983: RET
// export function Dec ( value ) ; begin
70984: LD_INT 0
70986: PPUSH
// result := value - 1 ;
70987: LD_ADDR_VAR 0 2
70991: PUSH
70992: LD_VAR 0 1
70996: PUSH
70997: LD_INT 1
70999: MINUS
71000: ST_TO_ADDR
// end ;
71001: LD_VAR 0 2
71005: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71006: LD_INT 0
71008: PPUSH
71009: PPUSH
71010: PPUSH
71011: PPUSH
71012: PPUSH
71013: PPUSH
71014: PPUSH
71015: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71016: LD_VAR 0 1
71020: PPUSH
71021: LD_VAR 0 2
71025: PPUSH
71026: CALL_OW 488
71030: NOT
71031: PUSH
71032: LD_VAR 0 3
71036: PPUSH
71037: LD_VAR 0 4
71041: PPUSH
71042: CALL_OW 488
71046: NOT
71047: OR
71048: IFFALSE 71061
// begin result := - 1 ;
71050: LD_ADDR_VAR 0 5
71054: PUSH
71055: LD_INT 1
71057: NEG
71058: ST_TO_ADDR
// exit ;
71059: GO 71296
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71061: LD_ADDR_VAR 0 12
71065: PUSH
71066: LD_VAR 0 1
71070: PPUSH
71071: LD_VAR 0 2
71075: PPUSH
71076: LD_VAR 0 3
71080: PPUSH
71081: LD_VAR 0 4
71085: PPUSH
71086: CALL 70146 0 4
71090: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71091: LD_ADDR_VAR 0 11
71095: PUSH
71096: LD_VAR 0 1
71100: PPUSH
71101: LD_VAR 0 2
71105: PPUSH
71106: LD_VAR 0 12
71110: PUSH
71111: LD_INT 1
71113: ARRAY
71114: PPUSH
71115: LD_VAR 0 12
71119: PUSH
71120: LD_INT 2
71122: ARRAY
71123: PPUSH
71124: CALL_OW 298
71128: ST_TO_ADDR
// distance := 9999 ;
71129: LD_ADDR_VAR 0 10
71133: PUSH
71134: LD_INT 9999
71136: ST_TO_ADDR
// for i := 0 to 5 do
71137: LD_ADDR_VAR 0 6
71141: PUSH
71142: DOUBLE
71143: LD_INT 0
71145: DEC
71146: ST_TO_ADDR
71147: LD_INT 5
71149: PUSH
71150: FOR_TO
71151: IFFALSE 71294
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71153: LD_ADDR_VAR 0 7
71157: PUSH
71158: LD_VAR 0 1
71162: PPUSH
71163: LD_VAR 0 6
71167: PPUSH
71168: LD_VAR 0 11
71172: PPUSH
71173: CALL_OW 272
71177: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71178: LD_ADDR_VAR 0 8
71182: PUSH
71183: LD_VAR 0 2
71187: PPUSH
71188: LD_VAR 0 6
71192: PPUSH
71193: LD_VAR 0 11
71197: PPUSH
71198: CALL_OW 273
71202: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71203: LD_VAR 0 7
71207: PPUSH
71208: LD_VAR 0 8
71212: PPUSH
71213: CALL_OW 488
71217: NOT
71218: IFFALSE 71222
// continue ;
71220: GO 71150
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71222: LD_ADDR_VAR 0 9
71226: PUSH
71227: LD_VAR 0 12
71231: PUSH
71232: LD_INT 1
71234: ARRAY
71235: PPUSH
71236: LD_VAR 0 12
71240: PUSH
71241: LD_INT 2
71243: ARRAY
71244: PPUSH
71245: LD_VAR 0 7
71249: PPUSH
71250: LD_VAR 0 8
71254: PPUSH
71255: CALL_OW 298
71259: ST_TO_ADDR
// if tmp < distance then
71260: LD_VAR 0 9
71264: PUSH
71265: LD_VAR 0 10
71269: LESS
71270: IFFALSE 71292
// begin result := i ;
71272: LD_ADDR_VAR 0 5
71276: PUSH
71277: LD_VAR 0 6
71281: ST_TO_ADDR
// distance := tmp ;
71282: LD_ADDR_VAR 0 10
71286: PUSH
71287: LD_VAR 0 9
71291: ST_TO_ADDR
// end ; end ;
71292: GO 71150
71294: POP
71295: POP
// end ;
71296: LD_VAR 0 5
71300: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71301: LD_INT 0
71303: PPUSH
71304: PPUSH
// if not driver or not IsInUnit ( driver ) then
71305: LD_VAR 0 1
71309: NOT
71310: PUSH
71311: LD_VAR 0 1
71315: PPUSH
71316: CALL_OW 310
71320: NOT
71321: OR
71322: IFFALSE 71326
// exit ;
71324: GO 71416
// vehicle := IsInUnit ( driver ) ;
71326: LD_ADDR_VAR 0 3
71330: PUSH
71331: LD_VAR 0 1
71335: PPUSH
71336: CALL_OW 310
71340: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71341: LD_VAR 0 1
71345: PPUSH
71346: LD_STRING \
71348: PUSH
71349: LD_INT 0
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: LD_INT 0
71357: PUSH
71358: LD_INT 0
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: PUSH
71376: LD_STRING E
71378: PUSH
71379: LD_INT 0
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: LD_VAR 0 3
71389: PUSH
71390: LD_INT 0
71392: PUSH
71393: LD_INT 0
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PPUSH
71412: CALL_OW 446
// end ;
71416: LD_VAR 0 2
71420: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71421: LD_INT 0
71423: PPUSH
71424: PPUSH
// if not driver or not IsInUnit ( driver ) then
71425: LD_VAR 0 1
71429: NOT
71430: PUSH
71431: LD_VAR 0 1
71435: PPUSH
71436: CALL_OW 310
71440: NOT
71441: OR
71442: IFFALSE 71446
// exit ;
71444: GO 71536
// vehicle := IsInUnit ( driver ) ;
71446: LD_ADDR_VAR 0 3
71450: PUSH
71451: LD_VAR 0 1
71455: PPUSH
71456: CALL_OW 310
71460: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71461: LD_VAR 0 1
71465: PPUSH
71466: LD_STRING \
71468: PUSH
71469: LD_INT 0
71471: PUSH
71472: LD_INT 0
71474: PUSH
71475: LD_INT 0
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: LD_INT 0
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: PUSH
71496: LD_STRING E
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: LD_VAR 0 3
71509: PUSH
71510: LD_INT 0
71512: PUSH
71513: LD_INT 0
71515: PUSH
71516: LD_INT 0
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PPUSH
71532: CALL_OW 447
// end ;
71536: LD_VAR 0 2
71540: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71541: LD_INT 0
71543: PPUSH
71544: PPUSH
71545: PPUSH
// tmp := [ ] ;
71546: LD_ADDR_VAR 0 5
71550: PUSH
71551: EMPTY
71552: ST_TO_ADDR
// for i in units do
71553: LD_ADDR_VAR 0 4
71557: PUSH
71558: LD_VAR 0 1
71562: PUSH
71563: FOR_IN
71564: IFFALSE 71602
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71566: LD_ADDR_VAR 0 5
71570: PUSH
71571: LD_VAR 0 5
71575: PPUSH
71576: LD_VAR 0 5
71580: PUSH
71581: LD_INT 1
71583: PLUS
71584: PPUSH
71585: LD_VAR 0 4
71589: PPUSH
71590: CALL_OW 256
71594: PPUSH
71595: CALL_OW 2
71599: ST_TO_ADDR
71600: GO 71563
71602: POP
71603: POP
// if not tmp then
71604: LD_VAR 0 5
71608: NOT
71609: IFFALSE 71613
// exit ;
71611: GO 71661
// if asc then
71613: LD_VAR 0 2
71617: IFFALSE 71641
// result := SortListByListAsc ( units , tmp ) else
71619: LD_ADDR_VAR 0 3
71623: PUSH
71624: LD_VAR 0 1
71628: PPUSH
71629: LD_VAR 0 5
71633: PPUSH
71634: CALL_OW 76
71638: ST_TO_ADDR
71639: GO 71661
// result := SortListByListDesc ( units , tmp ) ;
71641: LD_ADDR_VAR 0 3
71645: PUSH
71646: LD_VAR 0 1
71650: PPUSH
71651: LD_VAR 0 5
71655: PPUSH
71656: CALL_OW 77
71660: ST_TO_ADDR
// end ;
71661: LD_VAR 0 3
71665: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71666: LD_INT 0
71668: PPUSH
71669: PPUSH
// task := GetTaskList ( mech ) ;
71670: LD_ADDR_VAR 0 4
71674: PUSH
71675: LD_VAR 0 1
71679: PPUSH
71680: CALL_OW 437
71684: ST_TO_ADDR
// if not task then
71685: LD_VAR 0 4
71689: NOT
71690: IFFALSE 71694
// exit ;
71692: GO 71736
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71694: LD_ADDR_VAR 0 3
71698: PUSH
71699: LD_VAR 0 4
71703: PUSH
71704: LD_INT 1
71706: ARRAY
71707: PUSH
71708: LD_INT 1
71710: ARRAY
71711: PUSH
71712: LD_STRING r
71714: EQUAL
71715: PUSH
71716: LD_VAR 0 4
71720: PUSH
71721: LD_INT 1
71723: ARRAY
71724: PUSH
71725: LD_INT 4
71727: ARRAY
71728: PUSH
71729: LD_VAR 0 2
71733: EQUAL
71734: AND
71735: ST_TO_ADDR
// end ;
71736: LD_VAR 0 3
71740: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71741: LD_INT 0
71743: PPUSH
// SetDir ( unit , d ) ;
71744: LD_VAR 0 1
71748: PPUSH
71749: LD_VAR 0 4
71753: PPUSH
71754: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71758: LD_VAR 0 1
71762: PPUSH
71763: LD_VAR 0 2
71767: PPUSH
71768: LD_VAR 0 3
71772: PPUSH
71773: LD_VAR 0 5
71777: PPUSH
71778: CALL_OW 48
// end ;
71782: LD_VAR 0 6
71786: RET
// export function ToNaturalNumber ( number ) ; begin
71787: LD_INT 0
71789: PPUSH
// result := number div 1 ;
71790: LD_ADDR_VAR 0 2
71794: PUSH
71795: LD_VAR 0 1
71799: PUSH
71800: LD_INT 1
71802: DIV
71803: ST_TO_ADDR
// if number < 0 then
71804: LD_VAR 0 1
71808: PUSH
71809: LD_INT 0
71811: LESS
71812: IFFALSE 71822
// result := 0 ;
71814: LD_ADDR_VAR 0 2
71818: PUSH
71819: LD_INT 0
71821: ST_TO_ADDR
// end ;
71822: LD_VAR 0 2
71826: RET
// export function SortByClass ( units , class ) ; var un ; begin
71827: LD_INT 0
71829: PPUSH
71830: PPUSH
// if not units or not class then
71831: LD_VAR 0 1
71835: NOT
71836: PUSH
71837: LD_VAR 0 2
71841: NOT
71842: OR
71843: IFFALSE 71847
// exit ;
71845: GO 71942
// result := [ ] ;
71847: LD_ADDR_VAR 0 3
71851: PUSH
71852: EMPTY
71853: ST_TO_ADDR
// for un in units do
71854: LD_ADDR_VAR 0 4
71858: PUSH
71859: LD_VAR 0 1
71863: PUSH
71864: FOR_IN
71865: IFFALSE 71940
// if GetClass ( un ) = class then
71867: LD_VAR 0 4
71871: PPUSH
71872: CALL_OW 257
71876: PUSH
71877: LD_VAR 0 2
71881: EQUAL
71882: IFFALSE 71909
// result := Insert ( result , 1 , un ) else
71884: LD_ADDR_VAR 0 3
71888: PUSH
71889: LD_VAR 0 3
71893: PPUSH
71894: LD_INT 1
71896: PPUSH
71897: LD_VAR 0 4
71901: PPUSH
71902: CALL_OW 2
71906: ST_TO_ADDR
71907: GO 71938
// result := Replace ( result , result + 1 , un ) ;
71909: LD_ADDR_VAR 0 3
71913: PUSH
71914: LD_VAR 0 3
71918: PPUSH
71919: LD_VAR 0 3
71923: PUSH
71924: LD_INT 1
71926: PLUS
71927: PPUSH
71928: LD_VAR 0 4
71932: PPUSH
71933: CALL_OW 1
71937: ST_TO_ADDR
71938: GO 71864
71940: POP
71941: POP
// end ;
71942: LD_VAR 0 3
71946: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71947: LD_INT 0
71949: PPUSH
71950: PPUSH
71951: PPUSH
71952: PPUSH
71953: PPUSH
71954: PPUSH
71955: PPUSH
// result := [ ] ;
71956: LD_ADDR_VAR 0 4
71960: PUSH
71961: EMPTY
71962: ST_TO_ADDR
// if x - r < 0 then
71963: LD_VAR 0 1
71967: PUSH
71968: LD_VAR 0 3
71972: MINUS
71973: PUSH
71974: LD_INT 0
71976: LESS
71977: IFFALSE 71989
// min_x := 0 else
71979: LD_ADDR_VAR 0 8
71983: PUSH
71984: LD_INT 0
71986: ST_TO_ADDR
71987: GO 72005
// min_x := x - r ;
71989: LD_ADDR_VAR 0 8
71993: PUSH
71994: LD_VAR 0 1
71998: PUSH
71999: LD_VAR 0 3
72003: MINUS
72004: ST_TO_ADDR
// if y - r < 0 then
72005: LD_VAR 0 2
72009: PUSH
72010: LD_VAR 0 3
72014: MINUS
72015: PUSH
72016: LD_INT 0
72018: LESS
72019: IFFALSE 72031
// min_y := 0 else
72021: LD_ADDR_VAR 0 7
72025: PUSH
72026: LD_INT 0
72028: ST_TO_ADDR
72029: GO 72047
// min_y := y - r ;
72031: LD_ADDR_VAR 0 7
72035: PUSH
72036: LD_VAR 0 2
72040: PUSH
72041: LD_VAR 0 3
72045: MINUS
72046: ST_TO_ADDR
// max_x := x + r ;
72047: LD_ADDR_VAR 0 9
72051: PUSH
72052: LD_VAR 0 1
72056: PUSH
72057: LD_VAR 0 3
72061: PLUS
72062: ST_TO_ADDR
// max_y := y + r ;
72063: LD_ADDR_VAR 0 10
72067: PUSH
72068: LD_VAR 0 2
72072: PUSH
72073: LD_VAR 0 3
72077: PLUS
72078: ST_TO_ADDR
// for _x = min_x to max_x do
72079: LD_ADDR_VAR 0 5
72083: PUSH
72084: DOUBLE
72085: LD_VAR 0 8
72089: DEC
72090: ST_TO_ADDR
72091: LD_VAR 0 9
72095: PUSH
72096: FOR_TO
72097: IFFALSE 72198
// for _y = min_y to max_y do
72099: LD_ADDR_VAR 0 6
72103: PUSH
72104: DOUBLE
72105: LD_VAR 0 7
72109: DEC
72110: ST_TO_ADDR
72111: LD_VAR 0 10
72115: PUSH
72116: FOR_TO
72117: IFFALSE 72194
// begin if not ValidHex ( _x , _y ) then
72119: LD_VAR 0 5
72123: PPUSH
72124: LD_VAR 0 6
72128: PPUSH
72129: CALL_OW 488
72133: NOT
72134: IFFALSE 72138
// continue ;
72136: GO 72116
// if GetResourceTypeXY ( _x , _y ) then
72138: LD_VAR 0 5
72142: PPUSH
72143: LD_VAR 0 6
72147: PPUSH
72148: CALL_OW 283
72152: IFFALSE 72192
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72154: LD_ADDR_VAR 0 4
72158: PUSH
72159: LD_VAR 0 4
72163: PPUSH
72164: LD_VAR 0 4
72168: PUSH
72169: LD_INT 1
72171: PLUS
72172: PPUSH
72173: LD_VAR 0 5
72177: PUSH
72178: LD_VAR 0 6
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PPUSH
72187: CALL_OW 1
72191: ST_TO_ADDR
// end ;
72192: GO 72116
72194: POP
72195: POP
72196: GO 72096
72198: POP
72199: POP
// end ;
72200: LD_VAR 0 4
72204: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72205: LD_INT 0
72207: PPUSH
72208: PPUSH
72209: PPUSH
72210: PPUSH
72211: PPUSH
72212: PPUSH
72213: PPUSH
72214: PPUSH
// if not units then
72215: LD_VAR 0 1
72219: NOT
72220: IFFALSE 72224
// exit ;
72222: GO 72752
// result := UnitFilter ( units , [ f_ok ] ) ;
72224: LD_ADDR_VAR 0 3
72228: PUSH
72229: LD_VAR 0 1
72233: PPUSH
72234: LD_INT 50
72236: PUSH
72237: EMPTY
72238: LIST
72239: PPUSH
72240: CALL_OW 72
72244: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72245: LD_ADDR_VAR 0 8
72249: PUSH
72250: LD_VAR 0 1
72254: PUSH
72255: LD_INT 1
72257: ARRAY
72258: PPUSH
72259: CALL_OW 255
72263: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72264: LD_ADDR_VAR 0 10
72268: PUSH
72269: LD_INT 29
72271: PUSH
72272: LD_INT 91
72274: PUSH
72275: LD_INT 49
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: LIST
72282: ST_TO_ADDR
// if not result then
72283: LD_VAR 0 3
72287: NOT
72288: IFFALSE 72292
// exit ;
72290: GO 72752
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72292: LD_ADDR_VAR 0 5
72296: PUSH
72297: LD_INT 81
72299: PUSH
72300: LD_VAR 0 8
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PPUSH
72309: CALL_OW 69
72313: ST_TO_ADDR
// for i in result do
72314: LD_ADDR_VAR 0 4
72318: PUSH
72319: LD_VAR 0 3
72323: PUSH
72324: FOR_IN
72325: IFFALSE 72750
// begin tag := GetTag ( i ) + 1 ;
72327: LD_ADDR_VAR 0 9
72331: PUSH
72332: LD_VAR 0 4
72336: PPUSH
72337: CALL_OW 110
72341: PUSH
72342: LD_INT 1
72344: PLUS
72345: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72346: LD_ADDR_VAR 0 7
72350: PUSH
72351: LD_VAR 0 4
72355: PPUSH
72356: CALL_OW 250
72360: PPUSH
72361: LD_VAR 0 4
72365: PPUSH
72366: CALL_OW 251
72370: PPUSH
72371: LD_INT 4
72373: PPUSH
72374: CALL 71947 0 3
72378: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72379: LD_VAR 0 4
72383: PPUSH
72384: CALL_OW 247
72388: PUSH
72389: LD_INT 2
72391: EQUAL
72392: PUSH
72393: LD_VAR 0 7
72397: PUSH
72398: LD_INT 2
72400: GREATER
72401: AND
72402: PUSH
72403: LD_VAR 0 4
72407: PPUSH
72408: CALL_OW 264
72412: PUSH
72413: LD_VAR 0 10
72417: IN
72418: NOT
72419: AND
72420: IFFALSE 72459
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72422: LD_VAR 0 4
72426: PPUSH
72427: LD_VAR 0 7
72431: PUSH
72432: LD_INT 1
72434: ARRAY
72435: PUSH
72436: LD_INT 1
72438: ARRAY
72439: PPUSH
72440: LD_VAR 0 7
72444: PUSH
72445: LD_INT 1
72447: ARRAY
72448: PUSH
72449: LD_INT 2
72451: ARRAY
72452: PPUSH
72453: CALL_OW 116
72457: GO 72748
// if path > tag then
72459: LD_VAR 0 2
72463: PUSH
72464: LD_VAR 0 9
72468: GREATER
72469: IFFALSE 72677
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72471: LD_ADDR_VAR 0 6
72475: PUSH
72476: LD_VAR 0 5
72480: PPUSH
72481: LD_INT 91
72483: PUSH
72484: LD_VAR 0 4
72488: PUSH
72489: LD_INT 8
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: LIST
72496: PPUSH
72497: CALL_OW 72
72501: ST_TO_ADDR
// if nearEnemy then
72502: LD_VAR 0 6
72506: IFFALSE 72575
// begin if GetWeapon ( i ) = ru_time_lapser then
72508: LD_VAR 0 4
72512: PPUSH
72513: CALL_OW 264
72517: PUSH
72518: LD_INT 49
72520: EQUAL
72521: IFFALSE 72549
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72523: LD_VAR 0 4
72527: PPUSH
72528: LD_VAR 0 6
72532: PPUSH
72533: LD_VAR 0 4
72537: PPUSH
72538: CALL_OW 74
72542: PPUSH
72543: CALL_OW 112
72547: GO 72573
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72549: LD_VAR 0 4
72553: PPUSH
72554: LD_VAR 0 6
72558: PPUSH
72559: LD_VAR 0 4
72563: PPUSH
72564: CALL_OW 74
72568: PPUSH
72569: CALL 73823 0 2
// end else
72573: GO 72675
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72575: LD_VAR 0 4
72579: PPUSH
72580: LD_VAR 0 2
72584: PUSH
72585: LD_VAR 0 9
72589: ARRAY
72590: PUSH
72591: LD_INT 1
72593: ARRAY
72594: PPUSH
72595: LD_VAR 0 2
72599: PUSH
72600: LD_VAR 0 9
72604: ARRAY
72605: PUSH
72606: LD_INT 2
72608: ARRAY
72609: PPUSH
72610: CALL_OW 297
72614: PUSH
72615: LD_INT 6
72617: GREATER
72618: IFFALSE 72661
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72620: LD_VAR 0 4
72624: PPUSH
72625: LD_VAR 0 2
72629: PUSH
72630: LD_VAR 0 9
72634: ARRAY
72635: PUSH
72636: LD_INT 1
72638: ARRAY
72639: PPUSH
72640: LD_VAR 0 2
72644: PUSH
72645: LD_VAR 0 9
72649: ARRAY
72650: PUSH
72651: LD_INT 2
72653: ARRAY
72654: PPUSH
72655: CALL_OW 114
72659: GO 72675
// SetTag ( i , tag ) ;
72661: LD_VAR 0 4
72665: PPUSH
72666: LD_VAR 0 9
72670: PPUSH
72671: CALL_OW 109
// end else
72675: GO 72748
// if enemy then
72677: LD_VAR 0 5
72681: IFFALSE 72748
// begin if GetWeapon ( i ) = ru_time_lapser then
72683: LD_VAR 0 4
72687: PPUSH
72688: CALL_OW 264
72692: PUSH
72693: LD_INT 49
72695: EQUAL
72696: IFFALSE 72724
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72698: LD_VAR 0 4
72702: PPUSH
72703: LD_VAR 0 5
72707: PPUSH
72708: LD_VAR 0 4
72712: PPUSH
72713: CALL_OW 74
72717: PPUSH
72718: CALL_OW 112
72722: GO 72748
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72724: LD_VAR 0 4
72728: PPUSH
72729: LD_VAR 0 5
72733: PPUSH
72734: LD_VAR 0 4
72738: PPUSH
72739: CALL_OW 74
72743: PPUSH
72744: CALL 73823 0 2
// end ; end ;
72748: GO 72324
72750: POP
72751: POP
// end ;
72752: LD_VAR 0 3
72756: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72757: LD_INT 0
72759: PPUSH
72760: PPUSH
72761: PPUSH
// if not unit or IsInUnit ( unit ) then
72762: LD_VAR 0 1
72766: NOT
72767: PUSH
72768: LD_VAR 0 1
72772: PPUSH
72773: CALL_OW 310
72777: OR
72778: IFFALSE 72782
// exit ;
72780: GO 72873
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72782: LD_ADDR_VAR 0 4
72786: PUSH
72787: LD_VAR 0 1
72791: PPUSH
72792: CALL_OW 250
72796: PPUSH
72797: LD_VAR 0 2
72801: PPUSH
72802: LD_INT 1
72804: PPUSH
72805: CALL_OW 272
72809: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72810: LD_ADDR_VAR 0 5
72814: PUSH
72815: LD_VAR 0 1
72819: PPUSH
72820: CALL_OW 251
72824: PPUSH
72825: LD_VAR 0 2
72829: PPUSH
72830: LD_INT 1
72832: PPUSH
72833: CALL_OW 273
72837: ST_TO_ADDR
// if ValidHex ( x , y ) then
72838: LD_VAR 0 4
72842: PPUSH
72843: LD_VAR 0 5
72847: PPUSH
72848: CALL_OW 488
72852: IFFALSE 72873
// ComTurnXY ( unit , x , y ) ;
72854: LD_VAR 0 1
72858: PPUSH
72859: LD_VAR 0 4
72863: PPUSH
72864: LD_VAR 0 5
72868: PPUSH
72869: CALL_OW 118
// end ;
72873: LD_VAR 0 3
72877: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72878: LD_INT 0
72880: PPUSH
72881: PPUSH
// result := false ;
72882: LD_ADDR_VAR 0 3
72886: PUSH
72887: LD_INT 0
72889: ST_TO_ADDR
// if not units then
72890: LD_VAR 0 2
72894: NOT
72895: IFFALSE 72899
// exit ;
72897: GO 72944
// for i in units do
72899: LD_ADDR_VAR 0 4
72903: PUSH
72904: LD_VAR 0 2
72908: PUSH
72909: FOR_IN
72910: IFFALSE 72942
// if See ( side , i ) then
72912: LD_VAR 0 1
72916: PPUSH
72917: LD_VAR 0 4
72921: PPUSH
72922: CALL_OW 292
72926: IFFALSE 72940
// begin result := true ;
72928: LD_ADDR_VAR 0 3
72932: PUSH
72933: LD_INT 1
72935: ST_TO_ADDR
// exit ;
72936: POP
72937: POP
72938: GO 72944
// end ;
72940: GO 72909
72942: POP
72943: POP
// end ;
72944: LD_VAR 0 3
72948: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72949: LD_INT 0
72951: PPUSH
72952: PPUSH
72953: PPUSH
72954: PPUSH
// if not unit or not points then
72955: LD_VAR 0 1
72959: NOT
72960: PUSH
72961: LD_VAR 0 2
72965: NOT
72966: OR
72967: IFFALSE 72971
// exit ;
72969: GO 73061
// dist := 99999 ;
72971: LD_ADDR_VAR 0 5
72975: PUSH
72976: LD_INT 99999
72978: ST_TO_ADDR
// for i in points do
72979: LD_ADDR_VAR 0 4
72983: PUSH
72984: LD_VAR 0 2
72988: PUSH
72989: FOR_IN
72990: IFFALSE 73059
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72992: LD_ADDR_VAR 0 6
72996: PUSH
72997: LD_VAR 0 1
73001: PPUSH
73002: LD_VAR 0 4
73006: PUSH
73007: LD_INT 1
73009: ARRAY
73010: PPUSH
73011: LD_VAR 0 4
73015: PUSH
73016: LD_INT 2
73018: ARRAY
73019: PPUSH
73020: CALL_OW 297
73024: ST_TO_ADDR
// if tmpDist < dist then
73025: LD_VAR 0 6
73029: PUSH
73030: LD_VAR 0 5
73034: LESS
73035: IFFALSE 73057
// begin result := i ;
73037: LD_ADDR_VAR 0 3
73041: PUSH
73042: LD_VAR 0 4
73046: ST_TO_ADDR
// dist := tmpDist ;
73047: LD_ADDR_VAR 0 5
73051: PUSH
73052: LD_VAR 0 6
73056: ST_TO_ADDR
// end ; end ;
73057: GO 72989
73059: POP
73060: POP
// end ;
73061: LD_VAR 0 3
73065: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73066: LD_INT 0
73068: PPUSH
// uc_side := side ;
73069: LD_ADDR_OWVAR 20
73073: PUSH
73074: LD_VAR 0 1
73078: ST_TO_ADDR
// uc_nation := 3 ;
73079: LD_ADDR_OWVAR 21
73083: PUSH
73084: LD_INT 3
73086: ST_TO_ADDR
// vc_chassis := 25 ;
73087: LD_ADDR_OWVAR 37
73091: PUSH
73092: LD_INT 25
73094: ST_TO_ADDR
// vc_engine := engine_siberite ;
73095: LD_ADDR_OWVAR 39
73099: PUSH
73100: LD_INT 3
73102: ST_TO_ADDR
// vc_control := control_computer ;
73103: LD_ADDR_OWVAR 38
73107: PUSH
73108: LD_INT 3
73110: ST_TO_ADDR
// vc_weapon := 59 ;
73111: LD_ADDR_OWVAR 40
73115: PUSH
73116: LD_INT 59
73118: ST_TO_ADDR
// result := CreateVehicle ;
73119: LD_ADDR_VAR 0 5
73123: PUSH
73124: CALL_OW 45
73128: ST_TO_ADDR
// SetDir ( result , d ) ;
73129: LD_VAR 0 5
73133: PPUSH
73134: LD_VAR 0 4
73138: PPUSH
73139: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73143: LD_VAR 0 5
73147: PPUSH
73148: LD_VAR 0 2
73152: PPUSH
73153: LD_VAR 0 3
73157: PPUSH
73158: LD_INT 0
73160: PPUSH
73161: CALL_OW 48
// end ;
73165: LD_VAR 0 5
73169: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73170: LD_INT 0
73172: PPUSH
73173: PPUSH
73174: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73175: LD_ADDR_VAR 0 2
73179: PUSH
73180: LD_INT 0
73182: PUSH
73183: LD_INT 0
73185: PUSH
73186: LD_INT 0
73188: PUSH
73189: LD_INT 0
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73198: LD_VAR 0 1
73202: NOT
73203: PUSH
73204: LD_VAR 0 1
73208: PPUSH
73209: CALL_OW 264
73213: PUSH
73214: LD_INT 12
73216: PUSH
73217: LD_INT 51
73219: PUSH
73220: LD_INT 32
73222: PUSH
73223: LD_INT 89
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: IN
73232: NOT
73233: OR
73234: IFFALSE 73238
// exit ;
73236: GO 73336
// for i := 1 to 3 do
73238: LD_ADDR_VAR 0 3
73242: PUSH
73243: DOUBLE
73244: LD_INT 1
73246: DEC
73247: ST_TO_ADDR
73248: LD_INT 3
73250: PUSH
73251: FOR_TO
73252: IFFALSE 73334
// begin tmp := GetCargo ( cargo , i ) ;
73254: LD_ADDR_VAR 0 4
73258: PUSH
73259: LD_VAR 0 1
73263: PPUSH
73264: LD_VAR 0 3
73268: PPUSH
73269: CALL_OW 289
73273: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73274: LD_ADDR_VAR 0 2
73278: PUSH
73279: LD_VAR 0 2
73283: PPUSH
73284: LD_VAR 0 3
73288: PPUSH
73289: LD_VAR 0 4
73293: PPUSH
73294: CALL_OW 1
73298: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73299: LD_ADDR_VAR 0 2
73303: PUSH
73304: LD_VAR 0 2
73308: PPUSH
73309: LD_INT 4
73311: PPUSH
73312: LD_VAR 0 2
73316: PUSH
73317: LD_INT 4
73319: ARRAY
73320: PUSH
73321: LD_VAR 0 4
73325: PLUS
73326: PPUSH
73327: CALL_OW 1
73331: ST_TO_ADDR
// end ;
73332: GO 73251
73334: POP
73335: POP
// end ;
73336: LD_VAR 0 2
73340: RET
// export function Length ( array ) ; begin
73341: LD_INT 0
73343: PPUSH
// result := array + 0 ;
73344: LD_ADDR_VAR 0 2
73348: PUSH
73349: LD_VAR 0 1
73353: PUSH
73354: LD_INT 0
73356: PLUS
73357: ST_TO_ADDR
// end ;
73358: LD_VAR 0 2
73362: RET
// export function PrepareArray ( array ) ; begin
73363: LD_INT 0
73365: PPUSH
// result := array diff 0 ;
73366: LD_ADDR_VAR 0 2
73370: PUSH
73371: LD_VAR 0 1
73375: PUSH
73376: LD_INT 0
73378: DIFF
73379: ST_TO_ADDR
// if not result [ 1 ] then
73380: LD_VAR 0 2
73384: PUSH
73385: LD_INT 1
73387: ARRAY
73388: NOT
73389: IFFALSE 73409
// result := Delete ( result , 1 ) ;
73391: LD_ADDR_VAR 0 2
73395: PUSH
73396: LD_VAR 0 2
73400: PPUSH
73401: LD_INT 1
73403: PPUSH
73404: CALL_OW 3
73408: ST_TO_ADDR
// end ;
73409: LD_VAR 0 2
73413: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73414: LD_INT 0
73416: PPUSH
73417: PPUSH
73418: PPUSH
73419: PPUSH
// sibRocketRange := 25 ;
73420: LD_ADDR_VAR 0 6
73424: PUSH
73425: LD_INT 25
73427: ST_TO_ADDR
// result := false ;
73428: LD_ADDR_VAR 0 4
73432: PUSH
73433: LD_INT 0
73435: ST_TO_ADDR
// for i := 0 to 5 do
73436: LD_ADDR_VAR 0 5
73440: PUSH
73441: DOUBLE
73442: LD_INT 0
73444: DEC
73445: ST_TO_ADDR
73446: LD_INT 5
73448: PUSH
73449: FOR_TO
73450: IFFALSE 73517
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73452: LD_VAR 0 1
73456: PPUSH
73457: LD_VAR 0 5
73461: PPUSH
73462: LD_VAR 0 6
73466: PPUSH
73467: CALL_OW 272
73471: PPUSH
73472: LD_VAR 0 2
73476: PPUSH
73477: LD_VAR 0 5
73481: PPUSH
73482: LD_VAR 0 6
73486: PPUSH
73487: CALL_OW 273
73491: PPUSH
73492: LD_VAR 0 3
73496: PPUSH
73497: CALL_OW 309
73501: IFFALSE 73515
// begin result := true ;
73503: LD_ADDR_VAR 0 4
73507: PUSH
73508: LD_INT 1
73510: ST_TO_ADDR
// exit ;
73511: POP
73512: POP
73513: GO 73519
// end ;
73515: GO 73449
73517: POP
73518: POP
// end ;
73519: LD_VAR 0 4
73523: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73524: LD_INT 0
73526: PPUSH
73527: PPUSH
73528: PPUSH
// if btype = b_depot then
73529: LD_VAR 0 2
73533: PUSH
73534: LD_INT 0
73536: EQUAL
73537: IFFALSE 73549
// begin result := true ;
73539: LD_ADDR_VAR 0 3
73543: PUSH
73544: LD_INT 1
73546: ST_TO_ADDR
// exit ;
73547: GO 73665
// end ; pom := GetBase ( depot ) ;
73549: LD_ADDR_VAR 0 4
73553: PUSH
73554: LD_VAR 0 1
73558: PPUSH
73559: CALL_OW 274
73563: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73564: LD_ADDR_VAR 0 5
73568: PUSH
73569: LD_VAR 0 2
73573: PPUSH
73574: LD_VAR 0 1
73578: PPUSH
73579: CALL_OW 248
73583: PPUSH
73584: CALL_OW 450
73588: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73589: LD_ADDR_VAR 0 3
73593: PUSH
73594: LD_VAR 0 4
73598: PPUSH
73599: LD_INT 1
73601: PPUSH
73602: CALL_OW 275
73606: PUSH
73607: LD_VAR 0 5
73611: PUSH
73612: LD_INT 1
73614: ARRAY
73615: GREATEREQUAL
73616: PUSH
73617: LD_VAR 0 4
73621: PPUSH
73622: LD_INT 2
73624: PPUSH
73625: CALL_OW 275
73629: PUSH
73630: LD_VAR 0 5
73634: PUSH
73635: LD_INT 2
73637: ARRAY
73638: GREATEREQUAL
73639: AND
73640: PUSH
73641: LD_VAR 0 4
73645: PPUSH
73646: LD_INT 3
73648: PPUSH
73649: CALL_OW 275
73653: PUSH
73654: LD_VAR 0 5
73658: PUSH
73659: LD_INT 3
73661: ARRAY
73662: GREATEREQUAL
73663: AND
73664: ST_TO_ADDR
// end ;
73665: LD_VAR 0 3
73669: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73670: LD_INT 0
73672: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73673: LD_VAR 0 1
73677: PPUSH
73678: LD_VAR 0 2
73682: PPUSH
73683: LD_INT 0
73685: PPUSH
73686: LD_INT 0
73688: PPUSH
73689: LD_INT 1
73691: PPUSH
73692: LD_INT 0
73694: PPUSH
73695: CALL_OW 587
// end ;
73699: LD_VAR 0 3
73703: RET
// export function CenterOnNow ( unit ) ; begin
73704: LD_INT 0
73706: PPUSH
// result := IsInUnit ( unit ) ;
73707: LD_ADDR_VAR 0 2
73711: PUSH
73712: LD_VAR 0 1
73716: PPUSH
73717: CALL_OW 310
73721: ST_TO_ADDR
// if not result then
73722: LD_VAR 0 2
73726: NOT
73727: IFFALSE 73739
// result := unit ;
73729: LD_ADDR_VAR 0 2
73733: PUSH
73734: LD_VAR 0 1
73738: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73739: LD_VAR 0 1
73743: PPUSH
73744: CALL_OW 87
// end ;
73748: LD_VAR 0 2
73752: RET
// export function ComMoveHex ( unit , hex ) ; begin
73753: LD_INT 0
73755: PPUSH
// if not hex then
73756: LD_VAR 0 2
73760: NOT
73761: IFFALSE 73765
// exit ;
73763: GO 73818
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73765: LD_VAR 0 2
73769: PUSH
73770: LD_INT 1
73772: ARRAY
73773: PPUSH
73774: LD_VAR 0 2
73778: PUSH
73779: LD_INT 2
73781: ARRAY
73782: PPUSH
73783: CALL_OW 428
73787: IFFALSE 73791
// exit ;
73789: GO 73818
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73791: LD_VAR 0 1
73795: PPUSH
73796: LD_VAR 0 2
73800: PUSH
73801: LD_INT 1
73803: ARRAY
73804: PPUSH
73805: LD_VAR 0 2
73809: PUSH
73810: LD_INT 2
73812: ARRAY
73813: PPUSH
73814: CALL_OW 111
// end ;
73818: LD_VAR 0 3
73822: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73823: LD_INT 0
73825: PPUSH
73826: PPUSH
73827: PPUSH
// if not unit or not enemy then
73828: LD_VAR 0 1
73832: NOT
73833: PUSH
73834: LD_VAR 0 2
73838: NOT
73839: OR
73840: IFFALSE 73844
// exit ;
73842: GO 73968
// x := GetX ( enemy ) ;
73844: LD_ADDR_VAR 0 4
73848: PUSH
73849: LD_VAR 0 2
73853: PPUSH
73854: CALL_OW 250
73858: ST_TO_ADDR
// y := GetY ( enemy ) ;
73859: LD_ADDR_VAR 0 5
73863: PUSH
73864: LD_VAR 0 2
73868: PPUSH
73869: CALL_OW 251
73873: ST_TO_ADDR
// if ValidHex ( x , y ) then
73874: LD_VAR 0 4
73878: PPUSH
73879: LD_VAR 0 5
73883: PPUSH
73884: CALL_OW 488
73888: IFFALSE 73968
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73890: LD_VAR 0 2
73894: PPUSH
73895: CALL_OW 247
73899: PUSH
73900: LD_INT 3
73902: PUSH
73903: LD_INT 2
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: IN
73910: PUSH
73911: LD_VAR 0 1
73915: PPUSH
73916: CALL_OW 255
73920: PPUSH
73921: LD_VAR 0 2
73925: PPUSH
73926: CALL_OW 292
73930: OR
73931: IFFALSE 73949
// ComAttackUnit ( unit , enemy ) else
73933: LD_VAR 0 1
73937: PPUSH
73938: LD_VAR 0 2
73942: PPUSH
73943: CALL_OW 115
73947: GO 73968
// ComAgressiveMove ( unit , x , y ) ;
73949: LD_VAR 0 1
73953: PPUSH
73954: LD_VAR 0 4
73958: PPUSH
73959: LD_VAR 0 5
73963: PPUSH
73964: CALL_OW 114
// end ;
73968: LD_VAR 0 3
73972: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73973: LD_INT 0
73975: PPUSH
73976: PPUSH
73977: PPUSH
// list := AreaToList ( area , 0 ) ;
73978: LD_ADDR_VAR 0 5
73982: PUSH
73983: LD_VAR 0 1
73987: PPUSH
73988: LD_INT 0
73990: PPUSH
73991: CALL_OW 517
73995: ST_TO_ADDR
// if not list then
73996: LD_VAR 0 5
74000: NOT
74001: IFFALSE 74005
// exit ;
74003: GO 74135
// if all then
74005: LD_VAR 0 2
74009: IFFALSE 74097
// begin for i := 1 to list [ 1 ] do
74011: LD_ADDR_VAR 0 4
74015: PUSH
74016: DOUBLE
74017: LD_INT 1
74019: DEC
74020: ST_TO_ADDR
74021: LD_VAR 0 5
74025: PUSH
74026: LD_INT 1
74028: ARRAY
74029: PUSH
74030: FOR_TO
74031: IFFALSE 74093
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74033: LD_ADDR_VAR 0 3
74037: PUSH
74038: LD_VAR 0 3
74042: PPUSH
74043: LD_VAR 0 3
74047: PUSH
74048: LD_INT 1
74050: PLUS
74051: PPUSH
74052: LD_VAR 0 5
74056: PUSH
74057: LD_INT 1
74059: ARRAY
74060: PUSH
74061: LD_VAR 0 4
74065: ARRAY
74066: PUSH
74067: LD_VAR 0 5
74071: PUSH
74072: LD_INT 2
74074: ARRAY
74075: PUSH
74076: LD_VAR 0 4
74080: ARRAY
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: PPUSH
74086: CALL_OW 1
74090: ST_TO_ADDR
74091: GO 74030
74093: POP
74094: POP
// exit ;
74095: GO 74135
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74097: LD_ADDR_VAR 0 3
74101: PUSH
74102: LD_VAR 0 5
74106: PUSH
74107: LD_INT 1
74109: ARRAY
74110: PUSH
74111: LD_INT 1
74113: ARRAY
74114: PUSH
74115: LD_VAR 0 5
74119: PUSH
74120: LD_INT 2
74122: ARRAY
74123: PUSH
74124: LD_INT 1
74126: ARRAY
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: PUSH
74132: EMPTY
74133: LIST
74134: ST_TO_ADDR
// end ;
74135: LD_VAR 0 3
74139: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74140: LD_INT 0
74142: PPUSH
74143: PPUSH
// list := AreaToList ( area , 0 ) ;
74144: LD_ADDR_VAR 0 4
74148: PUSH
74149: LD_VAR 0 1
74153: PPUSH
74154: LD_INT 0
74156: PPUSH
74157: CALL_OW 517
74161: ST_TO_ADDR
// if not list then
74162: LD_VAR 0 4
74166: NOT
74167: IFFALSE 74171
// exit ;
74169: GO 74212
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74171: LD_ADDR_VAR 0 3
74175: PUSH
74176: LD_VAR 0 4
74180: PUSH
74181: LD_INT 1
74183: ARRAY
74184: PUSH
74185: LD_INT 1
74187: ARRAY
74188: PUSH
74189: LD_VAR 0 4
74193: PUSH
74194: LD_INT 2
74196: ARRAY
74197: PUSH
74198: LD_INT 1
74200: ARRAY
74201: PUSH
74202: LD_VAR 0 2
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: LIST
74211: ST_TO_ADDR
// end ;
74212: LD_VAR 0 3
74216: RET
// export function First ( array ) ; begin
74217: LD_INT 0
74219: PPUSH
// if not array then
74220: LD_VAR 0 1
74224: NOT
74225: IFFALSE 74229
// exit ;
74227: GO 74243
// result := array [ 1 ] ;
74229: LD_ADDR_VAR 0 2
74233: PUSH
74234: LD_VAR 0 1
74238: PUSH
74239: LD_INT 1
74241: ARRAY
74242: ST_TO_ADDR
// end ;
74243: LD_VAR 0 2
74247: RET
// export function Last ( array ) ; begin
74248: LD_INT 0
74250: PPUSH
// if not array then
74251: LD_VAR 0 1
74255: NOT
74256: IFFALSE 74260
// exit ;
74258: GO 74276
// result := array [ array ] ;
74260: LD_ADDR_VAR 0 2
74264: PUSH
74265: LD_VAR 0 1
74269: PUSH
74270: LD_VAR 0 1
74274: ARRAY
74275: ST_TO_ADDR
// end ;
74276: LD_VAR 0 2
74280: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74281: LD_INT 0
74283: PPUSH
74284: PPUSH
// result := [ ] ;
74285: LD_ADDR_VAR 0 5
74289: PUSH
74290: EMPTY
74291: ST_TO_ADDR
// if not array then
74292: LD_VAR 0 1
74296: NOT
74297: IFFALSE 74301
// exit ;
74299: GO 74413
// for i := 1 to array do
74301: LD_ADDR_VAR 0 6
74305: PUSH
74306: DOUBLE
74307: LD_INT 1
74309: DEC
74310: ST_TO_ADDR
74311: LD_VAR 0 1
74315: PUSH
74316: FOR_TO
74317: IFFALSE 74411
// if array [ i ] [ index ] = value then
74319: LD_VAR 0 1
74323: PUSH
74324: LD_VAR 0 6
74328: ARRAY
74329: PUSH
74330: LD_VAR 0 2
74334: ARRAY
74335: PUSH
74336: LD_VAR 0 3
74340: EQUAL
74341: IFFALSE 74409
// begin if indexColumn then
74343: LD_VAR 0 4
74347: IFFALSE 74383
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74349: LD_ADDR_VAR 0 5
74353: PUSH
74354: LD_VAR 0 5
74358: PPUSH
74359: LD_VAR 0 1
74363: PUSH
74364: LD_VAR 0 6
74368: ARRAY
74369: PUSH
74370: LD_VAR 0 4
74374: ARRAY
74375: PPUSH
74376: CALL 69601 0 2
74380: ST_TO_ADDR
74381: GO 74409
// result := Join ( result , array [ i ] ) ;
74383: LD_ADDR_VAR 0 5
74387: PUSH
74388: LD_VAR 0 5
74392: PPUSH
74393: LD_VAR 0 1
74397: PUSH
74398: LD_VAR 0 6
74402: ARRAY
74403: PPUSH
74404: CALL 69601 0 2
74408: ST_TO_ADDR
// end ;
74409: GO 74316
74411: POP
74412: POP
// end ;
74413: LD_VAR 0 5
74417: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74418: LD_INT 0
74420: PPUSH
// if not vehicles or not parkingPoint then
74421: LD_VAR 0 1
74425: NOT
74426: PUSH
74427: LD_VAR 0 2
74431: NOT
74432: OR
74433: IFFALSE 74437
// exit ;
74435: GO 74535
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74437: LD_ADDR_VAR 0 1
74441: PUSH
74442: LD_VAR 0 1
74446: PPUSH
74447: LD_INT 50
74449: PUSH
74450: EMPTY
74451: LIST
74452: PUSH
74453: LD_INT 3
74455: PUSH
74456: LD_INT 92
74458: PUSH
74459: LD_VAR 0 2
74463: PUSH
74464: LD_INT 1
74466: ARRAY
74467: PUSH
74468: LD_VAR 0 2
74472: PUSH
74473: LD_INT 2
74475: ARRAY
74476: PUSH
74477: LD_INT 8
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PPUSH
74494: CALL_OW 72
74498: ST_TO_ADDR
// if not vehicles then
74499: LD_VAR 0 1
74503: NOT
74504: IFFALSE 74508
// exit ;
74506: GO 74535
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74508: LD_VAR 0 1
74512: PPUSH
74513: LD_VAR 0 2
74517: PUSH
74518: LD_INT 1
74520: ARRAY
74521: PPUSH
74522: LD_VAR 0 2
74526: PUSH
74527: LD_INT 2
74529: ARRAY
74530: PPUSH
74531: CALL_OW 111
// end ;
74535: LD_VAR 0 3
74539: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74540: LD_INT 0
74542: PPUSH
74543: PPUSH
74544: PPUSH
// if not side or not area then
74545: LD_VAR 0 1
74549: NOT
74550: PUSH
74551: LD_VAR 0 2
74555: NOT
74556: OR
74557: IFFALSE 74561
// exit ;
74559: GO 74680
// tmp := AreaToList ( area , 0 ) ;
74561: LD_ADDR_VAR 0 5
74565: PUSH
74566: LD_VAR 0 2
74570: PPUSH
74571: LD_INT 0
74573: PPUSH
74574: CALL_OW 517
74578: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74579: LD_ADDR_VAR 0 4
74583: PUSH
74584: DOUBLE
74585: LD_INT 1
74587: DEC
74588: ST_TO_ADDR
74589: LD_VAR 0 5
74593: PUSH
74594: LD_INT 1
74596: ARRAY
74597: PUSH
74598: FOR_TO
74599: IFFALSE 74678
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74601: LD_VAR 0 5
74605: PUSH
74606: LD_INT 1
74608: ARRAY
74609: PUSH
74610: LD_VAR 0 4
74614: ARRAY
74615: PPUSH
74616: LD_VAR 0 5
74620: PUSH
74621: LD_INT 2
74623: ARRAY
74624: PUSH
74625: LD_VAR 0 4
74629: ARRAY
74630: PPUSH
74631: CALL_OW 351
74635: IFFALSE 74676
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74637: LD_VAR 0 5
74641: PUSH
74642: LD_INT 1
74644: ARRAY
74645: PUSH
74646: LD_VAR 0 4
74650: ARRAY
74651: PPUSH
74652: LD_VAR 0 5
74656: PUSH
74657: LD_INT 2
74659: ARRAY
74660: PUSH
74661: LD_VAR 0 4
74665: ARRAY
74666: PPUSH
74667: LD_VAR 0 1
74671: PPUSH
74672: CALL_OW 244
// end ;
74676: GO 74598
74678: POP
74679: POP
// end ; end_of_file
74680: LD_VAR 0 3
74684: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74685: LD_VAR 0 1
74689: PPUSH
74690: LD_VAR 0 2
74694: PPUSH
74695: LD_VAR 0 3
74699: PPUSH
74700: LD_VAR 0 4
74704: PPUSH
74705: LD_VAR 0 5
74709: PPUSH
74710: LD_VAR 0 6
74714: PPUSH
74715: CALL 10647 0 6
// end ;
74719: PPOPN 6
74721: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74722: LD_INT 0
74724: PPUSH
// begin if not units then
74725: LD_VAR 0 1
74729: NOT
74730: IFFALSE 74734
// exit ;
74732: GO 74734
// end ;
74734: PPOPN 7
74736: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74737: CALL 10534 0 0
// end ;
74741: PPOPN 1
74743: END
