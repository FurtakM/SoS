// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 237 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 649 0 1
// PrepareRussian ;
  19: CALL 2252 0 0
// PrepareArabian ;
  23: CALL 1242 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5952 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape , activeInvincible ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// activeInvincible := true ;
 224: LD_ADDR_EXP 17
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export tEscape ; function InitTag ; begin
 237: LD_INT 0
 239: PPUSH
// tEscape := 10 ;
 240: LD_ADDR_EXP 18
 244: PUSH
 245: LD_INT 10
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 1
 252: RET
// every 0 0$1 trigger debug do var i ;
 253: LD_EXP 1
 257: IFFALSE 341
 259: GO 261
 261: DISABLE
 262: LD_INT 0
 264: PPUSH
// begin enable ;
 265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 266: LD_ADDR_VAR 0 1
 270: PUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: LD_INT 21
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 339
// if GetLives ( i ) < 1000 then
 310: LD_VAR 0 1
 314: PPUSH
 315: CALL_OW 256
 319: PUSH
 320: LD_INT 1000
 322: LESS
 323: IFFALSE 337
// SetLives ( i , 1000 ) ;
 325: LD_VAR 0 1
 329: PPUSH
 330: LD_INT 1000
 332: PPUSH
 333: CALL_OW 234
 337: GO 307
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function CreateNature ( forest ) ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 653: LD_VAR 0 1
 657: PPUSH
 658: LD_INT 3
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: PPUSH
 682: CALL 512 0 2
// for i := 1 to 2 do
 686: LD_ADDR_VAR 0 3
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 2
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := 21 ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 21
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 1
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 2 do
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 2
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := 18 ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 18
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// for i := 1 to 2 do
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: DOUBLE
 798: LD_INT 1
 800: DEC
 801: ST_TO_ADDR
 802: LD_INT 2
 804: PUSH
 805: FOR_TO
 806: IFFALSE 843
// begin hc_class := 13 ;
 808: LD_ADDR_OWVAR 28
 812: PUSH
 813: LD_INT 13
 815: ST_TO_ADDR
// hc_gallery :=  ;
 816: LD_ADDR_OWVAR 33
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 824: CALL_OW 44
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: LD_INT 0
 836: PPUSH
 837: CALL_OW 49
// end ;
 841: GO 805
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 2
 849: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
 854: PPUSH
// if not observer or not unit then
 855: LD_VAR 0 1
 859: NOT
 860: PUSH
 861: LD_VAR 0 2
 865: NOT
 866: OR
 867: IFFALSE 871
// exit ;
 869: GO 919
// if not See ( GetSide ( observer ) , unit ) then
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: PPUSH
 881: LD_VAR 0 2
 885: PPUSH
 886: CALL_OW 292
 890: NOT
 891: IFFALSE 895
// exit ;
 893: GO 919
// result := GetDistUnits ( observer , unit ) < 12 ;
 895: LD_ADDR_VAR 0 3
 899: PUSH
 900: LD_VAR 0 1
 904: PPUSH
 905: LD_VAR 0 2
 909: PPUSH
 910: CALL_OW 296
 914: PUSH
 915: LD_INT 12
 917: LESS
 918: ST_TO_ADDR
// end ;
 919: LD_VAR 0 3
 923: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 924: LD_INT 0
 926: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 927: LD_VAR 0 2
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PPUSH
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 2
 943: ARRAY
 944: PPUSH
 945: CALL_OW 488
 949: PUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 2
 963: PUSH
 964: LD_INT 2
 966: ARRAY
 967: PPUSH
 968: CALL_OW 428
 972: PUSH
 973: LD_INT 0
 975: EQUAL
 976: AND
 977: IFFALSE 1011
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 979: LD_VAR 0 1
 983: PPUSH
 984: LD_VAR 0 2
 988: PUSH
 989: LD_INT 1
 991: ARRAY
 992: PPUSH
 993: LD_VAR 0 2
 997: PUSH
 998: LD_INT 2
1000: ARRAY
1001: PPUSH
1002: LD_VAR 0 3
1006: PPUSH
1007: CALL_OW 48
// end ;
1011: LD_VAR 0 4
1015: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1016: LD_INT 0
1018: PPUSH
1019: PPUSH
1020: PPUSH
1021: PPUSH
1022: PPUSH
// if not unit then
1023: LD_VAR 0 1
1027: NOT
1028: IFFALSE 1032
// exit ;
1030: GO 1237
// side := GetSide ( unit ) ;
1032: LD_ADDR_VAR 0 4
1036: PUSH
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 255
1046: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1047: LD_ADDR_VAR 0 5
1051: PUSH
1052: LD_INT 22
1054: PUSH
1055: LD_VAR 0 4
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 30
1066: PUSH
1067: LD_VAR 0 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: ST_TO_ADDR
// if not tmp then
1085: LD_VAR 0 5
1089: NOT
1090: IFFALSE 1094
// exit ;
1092: GO 1237
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1094: LD_ADDR_VAR 0 5
1098: PUSH
1099: LD_VAR 0 1
1103: PPUSH
1104: LD_VAR 0 5
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL 36497 0 4
1119: ST_TO_ADDR
// places := 1 ;
1120: LD_ADDR_VAR 0 7
1124: PUSH
1125: LD_INT 1
1127: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1128: LD_VAR 0 2
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 4
1141: PUSH
1142: LD_INT 5
1144: PUSH
1145: LD_INT 2
1147: PUSH
1148: LD_INT 3
1150: PUSH
1151: LD_INT 6
1153: PUSH
1154: LD_INT 7
1156: PUSH
1157: LD_INT 8
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: IN
1171: IFFALSE 1181
// places := 6 ;
1173: LD_ADDR_VAR 0 7
1177: PUSH
1178: LD_INT 6
1180: ST_TO_ADDR
// for i in tmp do
1181: LD_ADDR_VAR 0 6
1185: PUSH
1186: LD_VAR 0 5
1190: PUSH
1191: FOR_IN
1192: IFFALSE 1235
// begin if UnitsInside ( i ) - places <= 0 then
1194: LD_VAR 0 6
1198: PPUSH
1199: CALL_OW 313
1203: PUSH
1204: LD_VAR 0 7
1208: MINUS
1209: PUSH
1210: LD_INT 0
1212: LESSEQUAL
1213: IFFALSE 1219
// continue else
1215: GO 1191
1217: GO 1233
// begin result := i ;
1219: LD_ADDR_VAR 0 3
1223: PUSH
1224: LD_VAR 0 6
1228: ST_TO_ADDR
// exit ;
1229: POP
1230: POP
1231: GO 1237
// end ; end ;
1233: GO 1191
1235: POP
1236: POP
// end ; end_of_file
1237: LD_VAR 0 3
1241: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1242: LD_INT 0
1244: PPUSH
1245: PPUSH
// uc_side := 2 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// uc_nation := 2 ;
1254: LD_ADDR_OWVAR 21
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1262: LD_ADDR_EXP 19
1266: PUSH
1267: LD_STRING Heike
1269: PPUSH
1270: LD_EXP 1
1274: NOT
1275: PPUSH
1276: LD_EXP 2
1280: PPUSH
1281: CALL 31100 0 3
1285: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1286: LD_ADDR_EXP 22
1290: PUSH
1291: LD_STRING Ibrahim
1293: PPUSH
1294: LD_EXP 1
1298: NOT
1299: PPUSH
1300: LD_EXP 2
1304: PPUSH
1305: CALL 31100 0 3
1309: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1310: LD_ADDR_EXP 20
1314: PUSH
1315: LD_STRING Givi
1317: PPUSH
1318: LD_EXP 1
1322: NOT
1323: PPUSH
1324: LD_EXP 2
1328: PPUSH
1329: CALL 31100 0 3
1333: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1334: LD_ADDR_EXP 23
1338: PUSH
1339: LD_STRING Kamil
1341: PPUSH
1342: LD_EXP 1
1346: NOT
1347: PPUSH
1348: LD_EXP 2
1352: PPUSH
1353: CALL 31100 0 3
1357: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1358: LD_ADDR_EXP 24
1362: PUSH
1363: LD_STRING Kaia
1365: PPUSH
1366: LD_EXP 1
1370: NOT
1371: PPUSH
1372: LD_EXP 2
1376: PPUSH
1377: CALL 31100 0 3
1381: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1382: LD_ADDR_EXP 25
1386: PUSH
1387: LD_STRING Sophia
1389: PPUSH
1390: LD_EXP 1
1394: NOT
1395: PPUSH
1396: LD_EXP 2
1400: PPUSH
1401: CALL 31100 0 3
1405: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1406: LD_ADDR_EXP 26
1410: PUSH
1411: LD_STRING Markov
1413: PPUSH
1414: LD_EXP 1
1418: NOT
1419: PPUSH
1420: LD_EXP 2
1424: PPUSH
1425: CALL 31100 0 3
1429: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1430: LD_ADDR_EXP 29
1434: PUSH
1435: LD_STRING Aviradze
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 2
1448: PPUSH
1449: CALL 31100 0 3
1453: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1454: LD_ADDR_EXP 28
1458: PUSH
1459: LD_STRING Kurt
1461: PPUSH
1462: LD_EXP 1
1466: NOT
1467: PPUSH
1468: LD_EXP 2
1472: PPUSH
1473: CALL 31100 0 3
1477: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1478: LD_ADDR_EXP 21
1482: PUSH
1483: LD_STRING Mike
1485: PPUSH
1486: LD_EXP 1
1490: NOT
1491: PPUSH
1492: LD_EXP 2
1496: PPUSH
1497: CALL 31100 0 3
1501: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1502: LD_ADDR_EXP 30
1506: PUSH
1507: LD_STRING 04_1_others
1509: PPUSH
1510: CALL_OW 31
1514: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1515: LD_ADDR_EXP 32
1519: PUSH
1520: LD_STRING 04_1_apes
1522: PPUSH
1523: CALL_OW 31
1527: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1528: LD_ADDR_EXP 31
1532: PUSH
1533: LD_STRING 04_1_Vehicles
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// if debug then
1543: LD_EXP 1
1547: IFFALSE 1766
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1549: LD_ADDR_EXP 31
1553: PUSH
1554: LD_INT 13
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: LD_INT 27
1565: PUSH
1566: LD_INT 2
1568: PUSH
1569: LD_INT 1000
1571: PUSH
1572: LD_INT 0
1574: PUSH
1575: LD_INT 0
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 3
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 13
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: LD_INT 1
1603: PUSH
1604: LD_INT 25
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 1000
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 0
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 3
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 13
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 2
1650: PUSH
1651: LD_INT 1000
1653: PUSH
1654: LD_INT 0
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 1
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 13
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: LD_INT 1
1685: PUSH
1686: LD_INT 27
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 1000
1694: PUSH
1695: LD_INT 0
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 1
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: LD_INT 32
1729: PUSH
1730: LD_INT 2
1732: PUSH
1733: LD_INT 1000
1735: PUSH
1736: LD_INT 40
1738: PUSH
1739: LD_INT 40
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// uc_side := 5 ;
1766: LD_ADDR_OWVAR 20
1770: PUSH
1771: LD_INT 5
1773: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1774: LD_ADDR_EXP 27
1778: PUSH
1779: LD_STRING Abdul
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: LD_STRING 
1787: PPUSH
1788: CALL 31100 0 3
1792: ST_TO_ADDR
// end ;
1793: LD_VAR 0 1
1797: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1798: LD_STRING 04_1_KaganCaptured
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 30
1808: PUSH
1809: LD_INT 22
1811: PUSH
1812: LD_INT 5
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PPUSH
1819: CALL_OW 69
1823: NOT
1824: AND
1825: PUSH
1826: LD_INT 124
1828: PPUSH
1829: LD_INT 26
1831: PPUSH
1832: CALL_OW 428
1836: PUSH
1837: LD_INT 0
1839: EQUAL
1840: PUSH
1841: LD_INT 124
1843: PPUSH
1844: LD_INT 26
1846: PPUSH
1847: CALL_OW 428
1851: PPUSH
1852: CALL_OW 255
1856: PUSH
1857: LD_INT 2
1859: EQUAL
1860: XOR
1861: AND
1862: IFFALSE 2249
1864: GO 1866
1866: DISABLE
1867: LD_INT 0
1869: PPUSH
1870: PPUSH
// begin enable ;
1871: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1872: LD_EXP 34
1876: NOT
1877: PUSH
1878: LD_EXP 34
1882: PUSH
1883: LD_INT 4
1885: GREATER
1886: OR
1887: IFFALSE 1897
// cargoCounter := 1 ;
1889: LD_ADDR_EXP 34
1893: PUSH
1894: LD_INT 1
1896: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1897: LD_ADDR_VAR 0 2
1901: PUSH
1902: LD_INT 142
1904: PUSH
1905: LD_INT 15
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 129
1914: PUSH
1915: LD_INT 11
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: LD_INT 138
1924: PUSH
1925: LD_INT 9
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 133
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: ST_TO_ADDR
// uc_side := 5 ;
1948: LD_ADDR_OWVAR 20
1952: PUSH
1953: LD_INT 5
1955: ST_TO_ADDR
// uc_nation := 2 ;
1956: LD_ADDR_OWVAR 21
1960: PUSH
1961: LD_INT 2
1963: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1964: LD_INT 5
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: LD_INT 13
1972: PPUSH
1973: LD_INT 2
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 32
1981: PPUSH
1982: LD_INT 70
1984: PPUSH
1985: CALL 344 0 7
// veh := CreateVehicle ;
1989: LD_ADDR_VAR 0 1
1993: PUSH
1994: CALL_OW 45
1998: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1999: LD_VAR 0 1
2003: PPUSH
2004: LD_INT 3
2006: PPUSH
2007: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_INT 8
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: CALL_OW 49
// if not cargoDriver then
2026: LD_EXP 33
2030: NOT
2031: IFFALSE 2056
// begin PrepareHuman ( false , 1 , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: LD_INT 3
2041: PPUSH
2042: CALL_OW 380
// cargoDriver := CreateHuman ;
2046: LD_ADDR_EXP 33
2050: PUSH
2051: CALL_OW 44
2055: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2056: LD_EXP 33
2060: PPUSH
2061: LD_VAR 0 1
2065: PPUSH
2066: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2070: LD_VAR 0 1
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: LD_INT 100
2080: PPUSH
2081: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2085: LD_VAR 0 1
2089: PPUSH
2090: LD_VAR 0 2
2094: PUSH
2095: LD_EXP 34
2099: ARRAY
2100: PUSH
2101: LD_INT 1
2103: ARRAY
2104: PPUSH
2105: LD_VAR 0 2
2109: PUSH
2110: LD_EXP 34
2114: ARRAY
2115: PUSH
2116: LD_INT 2
2118: ARRAY
2119: PPUSH
2120: CALL_OW 111
// AddComUnload ( veh ) ;
2124: LD_VAR 0 1
2128: PPUSH
2129: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2133: LD_VAR 0 1
2137: PPUSH
2138: LD_INT 133
2140: PPUSH
2141: LD_INT 2
2143: PPUSH
2144: CALL_OW 171
// wait ( 0 0$5 ) ;
2148: LD_INT 175
2150: PPUSH
2151: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// if not HasTask ( veh ) then
2162: LD_VAR 0 1
2166: PPUSH
2167: CALL_OW 314
2171: NOT
2172: IFFALSE 2189
// ComMoveXY ( veh , 133 , 2 ) ;
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 133
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2189: LD_VAR 0 1
2193: PPUSH
2194: LD_INT 133
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: CALL_OW 307
2204: PUSH
2205: LD_VAR 0 1
2209: PPUSH
2210: LD_INT 8
2212: PPUSH
2213: CALL_OW 308
2217: OR
2218: IFFALSE 2155
// RemoveUnit ( cargoDriver ) ;
2220: LD_EXP 33
2224: PPUSH
2225: CALL_OW 64
// RemoveUnit ( veh ) ;
2229: LD_VAR 0 1
2233: PPUSH
2234: CALL_OW 64
// if tick >= 20 20$00 then
2238: LD_OWVAR 1
2242: PUSH
2243: LD_INT 42000
2245: GREATEREQUAL
2246: IFFALSE 2249
// disable ;
2248: DISABLE
// end ; end_of_file
2249: PPOPN 2
2251: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2252: LD_INT 0
2254: PPUSH
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
2262: PPUSH
// uc_side := 3 ;
2263: LD_ADDR_OWVAR 20
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// uc_nation := 3 ;
2271: LD_ADDR_OWVAR 21
2275: PUSH
2276: LD_INT 3
2278: ST_TO_ADDR
// ruForce := [ ] ;
2279: LD_ADDR_EXP 38
2283: PUSH
2284: EMPTY
2285: ST_TO_ADDR
// ruMech := [ ] ;
2286: LD_ADDR_EXP 40
2290: PUSH
2291: EMPTY
2292: ST_TO_ADDR
// ruEng := [ ] ;
2293: LD_ADDR_EXP 39
2297: PUSH
2298: EMPTY
2299: ST_TO_ADDR
// ruSci := [ ] ;
2300: LD_ADDR_EXP 41
2304: PUSH
2305: EMPTY
2306: ST_TO_ADDR
// ruMobile := [ ] ;
2307: LD_ADDR_EXP 42
2311: PUSH
2312: EMPTY
2313: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2314: LD_ADDR_EXP 35
2318: PUSH
2319: LD_STRING Burlak
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: LD_STRING 
2327: PPUSH
2328: CALL 31100 0 3
2332: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2333: LD_ADDR_EXP 36
2337: PUSH
2338: LD_STRING Gaydar
2340: PPUSH
2341: LD_INT 0
2343: PPUSH
2344: LD_STRING 
2346: PPUSH
2347: CALL 31100 0 3
2351: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2352: LD_ADDR_EXP 37
2356: PUSH
2357: LD_STRING Kuzmov
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: LD_STRING 
2365: PPUSH
2366: CALL 31100 0 3
2370: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2371: LD_EXP 37
2375: PPUSH
2376: LD_INT 200
2378: PPUSH
2379: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2383: LD_INT 200
2385: PPUSH
2386: LD_STRING chuikov
2388: PPUSH
2389: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2393: LD_INT 200
2395: PPUSH
2396: CALL_OW 274
2400: PPUSH
2401: LD_INT 1
2403: PPUSH
2404: LD_INT 800
2406: PUSH
2407: LD_INT 1000
2409: PUSH
2410: LD_INT 1250
2412: PUSH
2413: LD_INT 1300
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: PUSH
2422: LD_OWVAR 67
2426: ARRAY
2427: PPUSH
2428: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2432: LD_INT 200
2434: PPUSH
2435: CALL_OW 274
2439: PPUSH
2440: LD_INT 2
2442: PPUSH
2443: LD_INT 160
2445: PPUSH
2446: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2450: LD_INT 225
2452: PPUSH
2453: CALL_OW 274
2457: PPUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 200
2463: PPUSH
2464: CALL_OW 277
// oil := 150 ;
2468: LD_ADDR_VAR 0 9
2472: PUSH
2473: LD_INT 150
2475: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2476: LD_EXP 5
2480: PUSH
2481: LD_INT 94500
2483: PUSH
2484: LD_INT 84000
2486: PUSH
2487: LD_INT 73500
2489: PUSH
2490: LD_INT 67200
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: PUSH
2499: LD_OWVAR 67
2503: ARRAY
2504: GREATEREQUAL
2505: IFFALSE 2660
// begin oil := 450 ;
2507: LD_ADDR_VAR 0 9
2511: PUSH
2512: LD_INT 450
2514: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2515: LD_ADDR_VAR 0 7
2519: PUSH
2520: LD_INT 123
2522: PUSH
2523: LD_INT 17
2525: PUSH
2526: LD_INT 3
2528: PUSH
2529: LD_INT 31
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: PUSH
2538: LD_INT 152
2540: PUSH
2541: LD_INT 38
2543: PUSH
2544: LD_INT 3
2546: PUSH
2547: LD_INT 31
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 81
2558: PUSH
2559: LD_INT 6
2561: PUSH
2562: LD_INT 4
2564: PUSH
2565: LD_INT 31
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 113
2576: PUSH
2577: LD_INT 67
2579: PUSH
2580: LD_INT 4
2582: PUSH
2583: LD_INT 32
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: ST_TO_ADDR
// for i in tmp do
2598: LD_ADDR_VAR 0 4
2602: PUSH
2603: LD_VAR 0 7
2607: PUSH
2608: FOR_IN
2609: IFFALSE 2658
// begin bc_type := i [ 4 ] ;
2611: LD_ADDR_OWVAR 42
2615: PUSH
2616: LD_VAR 0 4
2620: PUSH
2621: LD_INT 4
2623: ARRAY
2624: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2625: LD_VAR 0 4
2629: PUSH
2630: LD_INT 1
2632: ARRAY
2633: PPUSH
2634: LD_VAR 0 4
2638: PUSH
2639: LD_INT 2
2641: ARRAY
2642: PPUSH
2643: LD_VAR 0 4
2647: PUSH
2648: LD_INT 3
2650: ARRAY
2651: PPUSH
2652: CALL_OW 47
// end ;
2656: GO 2608
2658: POP
2659: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2660: LD_INT 225
2662: PPUSH
2663: CALL_OW 274
2667: PPUSH
2668: LD_INT 2
2670: PPUSH
2671: LD_VAR 0 9
2675: PPUSH
2676: CALL_OW 277
// if Difficulty > 1 then
2680: LD_OWVAR 67
2684: PUSH
2685: LD_INT 1
2687: GREATER
2688: IFFALSE 2783
// begin bc_type := b_bunker ;
2690: LD_ADDR_OWVAR 42
2694: PUSH
2695: LD_INT 32
2697: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2698: LD_ADDR_VAR 0 7
2702: PUSH
2703: LD_INT 121
2705: PUSH
2706: LD_INT 85
2708: PUSH
2709: LD_INT 5
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 93
2719: PUSH
2720: LD_INT 72
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: ST_TO_ADDR
// for i in tmp do
2735: LD_ADDR_VAR 0 4
2739: PUSH
2740: LD_VAR 0 7
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2781
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2748: LD_VAR 0 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_VAR 0 4
2770: PUSH
2771: LD_INT 3
2773: ARRAY
2774: PPUSH
2775: CALL_OW 47
2779: GO 2745
2781: POP
2782: POP
// end ; base := GetBase ( ruMainBase ) ;
2783: LD_ADDR_VAR 0 2
2787: PUSH
2788: LD_INT 200
2790: PPUSH
2791: CALL_OW 274
2795: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2796: LD_ADDR_VAR 0 3
2800: PUSH
2801: LD_VAR 0 2
2805: PPUSH
2806: CALL_OW 417
2810: ST_TO_ADDR
// for b in blist do
2811: LD_ADDR_VAR 0 5
2815: PUSH
2816: LD_VAR 0 3
2820: PUSH
2821: FOR_IN
2822: IFFALSE 3273
// begin if b [ 1 ] = b_factory then
2824: LD_VAR 0 5
2828: PUSH
2829: LD_INT 1
2831: ARRAY
2832: PUSH
2833: LD_INT 3
2835: EQUAL
2836: IFFALSE 2987
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2838: LD_ADDR_VAR 0 8
2842: PUSH
2843: LD_VAR 0 5
2847: PUSH
2848: LD_INT 2
2850: ARRAY
2851: PPUSH
2852: LD_VAR 0 5
2856: PUSH
2857: LD_INT 3
2859: ARRAY
2860: PPUSH
2861: CALL_OW 428
2865: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2866: LD_ADDR_VAR 0 4
2870: PUSH
2871: DOUBLE
2872: LD_INT 1
2874: DEC
2875: ST_TO_ADDR
2876: LD_INT 2
2878: PUSH
2879: LD_INT 2
2881: PUSH
2882: LD_OWVAR 67
2886: PLUS
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_EXP 10
2896: PUSH
2897: LD_INT 3
2899: GREATER
2900: PUSH
2901: LD_INT 1
2903: PLUS
2904: ARRAY
2905: PUSH
2906: FOR_TO
2907: IFFALSE 2983
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2909: LD_INT 0
2911: PPUSH
2912: LD_INT 3
2914: PPUSH
2915: LD_INT 1
2917: PUSH
2918: LD_OWVAR 67
2922: PLUS
2923: PPUSH
2924: CALL_OW 380
// un := CreateHuman ;
2928: LD_ADDR_VAR 0 6
2932: PUSH
2933: CALL_OW 44
2937: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2938: LD_ADDR_EXP 40
2942: PUSH
2943: LD_EXP 40
2947: PPUSH
2948: LD_EXP 40
2952: PUSH
2953: LD_INT 1
2955: PLUS
2956: PPUSH
2957: LD_VAR 0 6
2961: PPUSH
2962: CALL_OW 1
2966: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2967: LD_VAR 0 6
2971: PPUSH
2972: LD_VAR 0 8
2976: PPUSH
2977: CALL_OW 52
// end ;
2981: GO 2906
2983: POP
2984: POP
// end else
2985: GO 3271
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2987: LD_VAR 0 5
2991: PUSH
2992: LD_INT 1
2994: ARRAY
2995: PUSH
2996: LD_INT 6
2998: PUSH
2999: LD_INT 7
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: LD_INT 10
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: IN
3014: IFFALSE 3124
// begin for i := 1 to 2 do
3016: LD_ADDR_VAR 0 4
3020: PUSH
3021: DOUBLE
3022: LD_INT 1
3024: DEC
3025: ST_TO_ADDR
3026: LD_INT 2
3028: PUSH
3029: FOR_TO
3030: IFFALSE 3120
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3032: LD_INT 0
3034: PPUSH
3035: LD_INT 4
3037: PPUSH
3038: LD_OWVAR 67
3042: PPUSH
3043: CALL_OW 380
// un := CreateHuman ;
3047: LD_ADDR_VAR 0 6
3051: PUSH
3052: CALL_OW 44
3056: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3057: LD_ADDR_EXP 41
3061: PUSH
3062: LD_EXP 41
3066: PPUSH
3067: LD_EXP 41
3071: PUSH
3072: LD_INT 1
3074: PLUS
3075: PPUSH
3076: LD_VAR 0 6
3080: PPUSH
3081: CALL_OW 1
3085: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3086: LD_VAR 0 6
3090: PPUSH
3091: LD_VAR 0 5
3095: PUSH
3096: LD_INT 2
3098: ARRAY
3099: PPUSH
3100: LD_VAR 0 5
3104: PUSH
3105: LD_INT 3
3107: ARRAY
3108: PPUSH
3109: CALL_OW 428
3113: PPUSH
3114: CALL_OW 52
// end ;
3118: GO 3029
3120: POP
3121: POP
// end else
3122: GO 3271
// if b [ 1 ] = b_warehouse then
3124: LD_VAR 0 5
3128: PUSH
3129: LD_INT 1
3131: ARRAY
3132: PUSH
3133: LD_INT 1
3135: EQUAL
3136: IFFALSE 3271
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3138: LD_ADDR_VAR 0 4
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_INT 1
3150: PUSH
3151: LD_INT 1
3153: PUSH
3154: LD_OWVAR 67
3158: PLUS
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: LD_EXP 10
3168: PUSH
3169: LD_INT 3
3171: GREATER
3172: PUSH
3173: LD_INT 1
3175: PLUS
3176: ARRAY
3177: PUSH
3178: FOR_TO
3179: IFFALSE 3269
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3181: LD_INT 0
3183: PPUSH
3184: LD_INT 2
3186: PPUSH
3187: LD_OWVAR 67
3191: PPUSH
3192: CALL_OW 380
// un := CreateHuman ;
3196: LD_ADDR_VAR 0 6
3200: PUSH
3201: CALL_OW 44
3205: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3206: LD_ADDR_EXP 39
3210: PUSH
3211: LD_EXP 39
3215: PPUSH
3216: LD_EXP 39
3220: PUSH
3221: LD_INT 1
3223: PLUS
3224: PPUSH
3225: LD_VAR 0 6
3229: PPUSH
3230: CALL_OW 1
3234: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3235: LD_VAR 0 6
3239: PPUSH
3240: LD_VAR 0 5
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: LD_VAR 0 5
3253: PUSH
3254: LD_INT 3
3256: ARRAY
3257: PPUSH
3258: CALL_OW 428
3262: PPUSH
3263: CALL_OW 52
// end ;
3267: GO 3178
3269: POP
3270: POP
// end ; end ;
3271: GO 2821
3273: POP
3274: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3275: LD_ADDR_VAR 0 3
3279: PUSH
3280: LD_INT 22
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 21
3292: PUSH
3293: LD_INT 3
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: ST_TO_ADDR
// for b in blist do
3309: LD_ADDR_VAR 0 5
3313: PUSH
3314: LD_VAR 0 3
3318: PUSH
3319: FOR_IN
3320: IFFALSE 3342
// SetBLevel ( b , 3 + Difficulty ) ;
3322: LD_VAR 0 5
3326: PPUSH
3327: LD_INT 3
3329: PUSH
3330: LD_OWVAR 67
3334: PLUS
3335: PPUSH
3336: CALL_OW 241
3340: GO 3319
3342: POP
3343: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3344: LD_ADDR_VAR 0 3
3348: PUSH
3349: LD_INT 22
3351: PUSH
3352: LD_INT 3
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 30
3361: PUSH
3362: LD_INT 32
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 69
3377: ST_TO_ADDR
// for b in blist do
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_VAR 0 3
3387: PUSH
3388: FOR_IN
3389: IFFALSE 3498
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3391: LD_INT 0
3393: PPUSH
3394: LD_INT 1
3396: PPUSH
3397: LD_INT 1
3399: PUSH
3400: LD_OWVAR 67
3404: PLUS
3405: PPUSH
3406: CALL_OW 380
// un := CreateHuman ;
3410: LD_ADDR_VAR 0 6
3414: PUSH
3415: CALL_OW 44
3419: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3420: LD_ADDR_EXP 38
3424: PUSH
3425: LD_EXP 38
3429: PPUSH
3430: LD_EXP 38
3434: PUSH
3435: LD_INT 1
3437: PLUS
3438: PPUSH
3439: LD_VAR 0 6
3443: PPUSH
3444: CALL_OW 1
3448: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3449: LD_VAR 0 6
3453: PPUSH
3454: LD_VAR 0 5
3458: PPUSH
3459: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3463: LD_VAR 0 5
3467: PPUSH
3468: LD_INT 44
3470: PUSH
3471: LD_INT 43
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: LD_VAR 0 5
3482: PUSH
3483: LD_INT 2
3485: MOD
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ARRAY
3491: PPUSH
3492: CALL_OW 431
// end ;
3496: GO 3388
3498: POP
3499: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3500: LD_ADDR_VAR 0 3
3504: PUSH
3505: LD_INT 22
3507: PUSH
3508: LD_INT 3
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 30
3517: PUSH
3518: LD_INT 31
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PPUSH
3529: CALL_OW 69
3533: ST_TO_ADDR
// for b in blist do
3534: LD_ADDR_VAR 0 5
3538: PUSH
3539: LD_VAR 0 3
3543: PUSH
3544: FOR_IN
3545: IFFALSE 3644
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3547: LD_INT 0
3549: PPUSH
3550: LD_INT 1
3552: PPUSH
3553: LD_INT 1
3555: PUSH
3556: LD_OWVAR 67
3560: PLUS
3561: PPUSH
3562: CALL_OW 380
// un := CreateHuman ;
3566: LD_ADDR_VAR 0 6
3570: PUSH
3571: CALL_OW 44
3575: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3576: LD_ADDR_EXP 38
3580: PUSH
3581: LD_EXP 38
3585: PPUSH
3586: LD_EXP 38
3590: PUSH
3591: LD_INT 1
3593: PLUS
3594: PPUSH
3595: LD_VAR 0 6
3599: PPUSH
3600: CALL_OW 1
3604: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3605: LD_VAR 0 6
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: CALL_OW 254
3619: PUSH
3620: LD_INT 3
3622: PLUS
3623: PPUSH
3624: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3628: LD_VAR 0 6
3632: PPUSH
3633: LD_VAR 0 5
3637: PPUSH
3638: CALL_OW 52
// end ;
3642: GO 3544
3644: POP
3645: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3646: LD_ADDR_VAR 0 3
3650: PUSH
3651: LD_INT 22
3653: PUSH
3654: LD_INT 3
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 2
3663: PUSH
3664: LD_INT 30
3666: PUSH
3667: LD_INT 4
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 30
3676: PUSH
3677: LD_INT 5
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PPUSH
3693: CALL_OW 69
3697: ST_TO_ADDR
// for b in blist do
3698: LD_ADDR_VAR 0 5
3702: PUSH
3703: LD_VAR 0 3
3707: PUSH
3708: FOR_IN
3709: IFFALSE 3805
// begin for i := 1 to 2 do
3711: LD_ADDR_VAR 0 4
3715: PUSH
3716: DOUBLE
3717: LD_INT 1
3719: DEC
3720: ST_TO_ADDR
3721: LD_INT 2
3723: PUSH
3724: FOR_TO
3725: IFFALSE 3801
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3727: LD_INT 0
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 1
3735: PUSH
3736: LD_OWVAR 67
3740: PLUS
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 6
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3756: LD_ADDR_EXP 38
3760: PUSH
3761: LD_EXP 38
3765: PPUSH
3766: LD_EXP 38
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 6
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3785: LD_VAR 0 6
3789: PPUSH
3790: LD_VAR 0 5
3794: PPUSH
3795: CALL_OW 52
// end ;
3799: GO 3724
3801: POP
3802: POP
// end ;
3803: GO 3708
3805: POP
3806: POP
// if ibrahimOnRuSide then
3807: LD_EXP 3
3811: IFFALSE 3909
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3813: LD_ADDR_EXP 22
3817: PUSH
3818: LD_STRING IbrahimRu
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: LD_STRING 
3826: PPUSH
3827: CALL 31100 0 3
3831: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3832: LD_EXP 22
3836: PPUSH
3837: LD_INT 121
3839: PPUSH
3840: LD_INT 78
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL_OW 48
// ComHold ( Ibrahim ) ;
3850: LD_EXP 22
3854: PPUSH
3855: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3859: LD_INT 1
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: CALL_OW 380
// ruSol := CreateHuman ;
3872: LD_ADDR_EXP 43
3876: PUSH
3877: CALL_OW 44
3881: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3882: LD_EXP 43
3886: PPUSH
3887: LD_INT 121
3889: PPUSH
3890: LD_INT 75
3892: PPUSH
3893: LD_INT 0
3895: PPUSH
3896: CALL_OW 48
// ComHold ( ruSol ) ;
3900: LD_EXP 43
3904: PPUSH
3905: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3909: LD_ADDR_VAR 0 4
3913: PUSH
3914: DOUBLE
3915: LD_INT 1
3917: DEC
3918: ST_TO_ADDR
3919: LD_INT 2
3921: PUSH
3922: LD_INT 2
3924: PUSH
3925: LD_OWVAR 67
3929: PLUS
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PUSH
3935: LD_EXP 10
3939: PUSH
3940: LD_INT 3
3942: GREATER
3943: PUSH
3944: LD_INT 1
3946: PLUS
3947: ARRAY
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4019
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3952: LD_VAR 0 8
3956: PPUSH
3957: LD_INT 21
3959: PUSH
3960: LD_INT 23
3962: PUSH
3963: LD_INT 24
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: PUSH
3971: LD_VAR 0 4
3975: PUSH
3976: LD_INT 3
3978: MOD
3979: PUSH
3980: LD_INT 1
3982: PLUS
3983: ARRAY
3984: PPUSH
3985: LD_INT 1
3987: PPUSH
3988: LD_INT 1
3990: PPUSH
3991: LD_INT 43
3993: PUSH
3994: LD_INT 44
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: LD_INT 1
4003: PPUSH
4004: LD_INT 2
4006: PPUSH
4007: CALL_OW 12
4011: ARRAY
4012: PPUSH
4013: CALL_OW 185
4017: GO 3949
4019: POP
4020: POP
// end ;
4021: LD_VAR 0 1
4025: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4026: LD_EXP 42
4030: PUSH
4031: LD_EXP 4
4035: NOT
4036: AND
4037: IFFALSE 4525
4039: GO 4041
4041: DISABLE
4042: LD_INT 0
4044: PPUSH
4045: PPUSH
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
// begin enable ;
4050: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4051: LD_ADDR_VAR 0 2
4055: PUSH
4056: LD_EXP 42
4060: PPUSH
4061: LD_INT 21
4063: PUSH
4064: LD_INT 2
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 72
4075: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4076: LD_ADDR_VAR 0 4
4080: PUSH
4081: LD_INT 81
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: LD_INT 2
4093: PUSH
4094: LD_INT 95
4096: PUSH
4097: LD_INT 4
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 95
4106: PUSH
4107: LD_INT 5
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 95
4116: PUSH
4117: LD_INT 6
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 95
4126: PUSH
4127: LD_INT 7
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PPUSH
4145: CALL_OW 69
4149: ST_TO_ADDR
// for i in filter do
4150: LD_ADDR_VAR 0 1
4154: PUSH
4155: LD_VAR 0 2
4159: PUSH
4160: FOR_IN
4161: IFFALSE 4523
// begin tmp := IsDrivenBy ( i ) ;
4163: LD_ADDR_VAR 0 3
4167: PUSH
4168: LD_VAR 0 1
4172: PPUSH
4173: CALL_OW 311
4177: ST_TO_ADDR
// tag := GetTag ( i ) ;
4178: LD_ADDR_VAR 0 6
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 110
4192: ST_TO_ADDR
// if not tmp then
4193: LD_VAR 0 3
4197: NOT
4198: IFFALSE 4202
// continue ;
4200: GO 4160
// if GetFuel ( i ) > 90 and tag = 2 then
4202: LD_VAR 0 1
4206: PPUSH
4207: CALL_OW 261
4211: PUSH
4212: LD_INT 90
4214: GREATER
4215: PUSH
4216: LD_VAR 0 6
4220: PUSH
4221: LD_INT 2
4223: EQUAL
4224: AND
4225: IFFALSE 4241
// SetTag ( i , 0 ) else
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 109
4239: GO 4284
// if GetTag ( i ) = 2 then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 110
4250: PUSH
4251: LD_INT 2
4253: EQUAL
4254: IFFALSE 4284
// begin x := rand ( 1 , 2 ) ;
4256: LD_ADDR_VAR 0 5
4260: PUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 2
4266: PPUSH
4267: CALL_OW 12
4271: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4272: LD_VAR 0 1
4276: PPUSH
4277: LD_INT 200
4279: PPUSH
4280: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 256
4293: PUSH
4294: LD_INT 650
4296: GREATEREQUAL
4297: PUSH
4298: LD_VAR 0 6
4302: NOT
4303: AND
4304: IFFALSE 4330
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4306: LD_VAR 0 1
4310: PPUSH
4311: LD_VAR 0 4
4315: PPUSH
4316: LD_VAR 0 1
4320: PPUSH
4321: CALL_OW 74
4325: PPUSH
4326: CALL_OW 115
// if GetLives ( i ) < 650 and not tag then
4330: LD_VAR 0 1
4334: PPUSH
4335: CALL_OW 256
4339: PUSH
4340: LD_INT 650
4342: LESS
4343: PUSH
4344: LD_VAR 0 6
4348: NOT
4349: AND
4350: IFFALSE 4379
// begin SetTag ( i , 1 ) ;
4352: LD_VAR 0 1
4356: PPUSH
4357: LD_INT 1
4359: PPUSH
4360: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4364: LD_VAR 0 1
4368: PPUSH
4369: LD_INT 112
4371: PPUSH
4372: LD_INT 119
4374: PPUSH
4375: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 110
4388: PUSH
4389: LD_INT 1
4391: EQUAL
4392: PUSH
4393: LD_VAR 0 1
4397: PPUSH
4398: LD_INT 112
4400: PPUSH
4401: LD_INT 119
4403: PPUSH
4404: CALL_OW 297
4408: PUSH
4409: LD_INT 9
4411: LESS
4412: AND
4413: PUSH
4414: LD_VAR 0 3
4418: AND
4419: IFFALSE 4521
// begin ComExitVehicle ( tmp ) ;
4421: LD_VAR 0 3
4425: PPUSH
4426: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4430: LD_VAR 0 3
4434: PPUSH
4435: LD_VAR 0 1
4439: PPUSH
4440: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4444: LD_INT 35
4446: PPUSH
4447: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4451: LD_VAR 0 1
4455: PPUSH
4456: CALL_OW 256
4460: PUSH
4461: LD_INT 1000
4463: EQUAL
4464: IFFALSE 4444
// ComEnterUnit ( tmp , i ) ;
4466: LD_VAR 0 3
4470: PPUSH
4471: LD_VAR 0 1
4475: PPUSH
4476: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4480: LD_VAR 0 1
4484: PPUSH
4485: CALL_OW 261
4489: PUSH
4490: LD_INT 50
4492: LESSEQUAL
4493: IFFALSE 4509
// SetTag ( i , 2 ) else
4495: LD_VAR 0 1
4499: PPUSH
4500: LD_INT 2
4502: PPUSH
4503: CALL_OW 109
4507: GO 4521
// SetTag ( i , 0 ) ;
4509: LD_VAR 0 1
4513: PPUSH
4514: LD_INT 0
4516: PPUSH
4517: CALL_OW 109
// end ; end ;
4521: GO 4160
4523: POP
4524: POP
// end ;
4525: PPOPN 6
4527: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4528: LD_EXP 4
4532: NOT
4533: PUSH
4534: LD_EXP 39
4538: AND
4539: IFFALSE 4800
4541: GO 4543
4543: DISABLE
4544: LD_INT 0
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
// begin enable ;
4550: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4551: LD_ADDR_VAR 0 2
4555: PUSH
4556: LD_INT 3
4558: PPUSH
4559: LD_INT 22
4561: PUSH
4562: LD_INT 3
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 21
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 3
4581: PUSH
4582: LD_INT 24
4584: PUSH
4585: LD_INT 1000
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: PPUSH
4601: CALL_OW 70
4605: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4606: LD_ADDR_VAR 0 3
4610: PUSH
4611: LD_EXP 39
4615: PPUSH
4616: LD_INT 50
4618: PUSH
4619: EMPTY
4620: LIST
4621: PPUSH
4622: CALL_OW 72
4626: ST_TO_ADDR
// if filter and tmp then
4627: LD_VAR 0 2
4631: PUSH
4632: LD_VAR 0 3
4636: AND
4637: IFFALSE 4729
// begin for i in tmp do
4639: LD_ADDR_VAR 0 1
4643: PUSH
4644: LD_VAR 0 3
4648: PUSH
4649: FOR_IN
4650: IFFALSE 4725
// begin if GetTag ( i ) = tEscape then
4652: LD_VAR 0 1
4656: PPUSH
4657: CALL_OW 110
4661: PUSH
4662: LD_EXP 18
4666: EQUAL
4667: IFFALSE 4671
// continue ;
4669: GO 4649
// if IsInUnit ( i ) then
4671: LD_VAR 0 1
4675: PPUSH
4676: CALL_OW 310
4680: IFFALSE 4693
// ComExitBuilding ( i ) else
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 122
4691: GO 4723
// if not HasTask ( i ) then
4693: LD_VAR 0 1
4697: PPUSH
4698: CALL_OW 314
4702: NOT
4703: IFFALSE 4723
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4705: LD_VAR 0 1
4709: PPUSH
4710: LD_VAR 0 2
4714: PUSH
4715: LD_INT 1
4717: ARRAY
4718: PPUSH
4719: CALL_OW 130
// end ;
4723: GO 4649
4725: POP
4726: POP
// end else
4727: GO 4800
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4729: LD_VAR 0 3
4733: PPUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 54
4739: PUSH
4740: EMPTY
4741: LIST
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PPUSH
4747: CALL_OW 72
4751: IFFALSE 4800
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4753: LD_ADDR_VAR 0 1
4757: PUSH
4758: LD_VAR 0 3
4762: PPUSH
4763: LD_INT 3
4765: PUSH
4766: LD_INT 54
4768: PUSH
4769: EMPTY
4770: LIST
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 72
4780: PUSH
4781: FOR_IN
4782: IFFALSE 4798
// ComEnterUnit ( i , ruMainBase ) ;
4784: LD_VAR 0 1
4788: PPUSH
4789: LD_INT 200
4791: PPUSH
4792: CALL_OW 120
4796: GO 4781
4798: POP
4799: POP
// end ; end ;
4800: PPOPN 4
4802: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4803: LD_EXP 4
4807: NOT
4808: PUSH
4809: LD_EXP 41
4813: AND
4814: IFFALSE 5093
4816: GO 4818
4818: DISABLE
4819: LD_INT 0
4821: PPUSH
4822: PPUSH
4823: PPUSH
4824: PPUSH
// begin enable ;
4825: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4826: LD_ADDR_VAR 0 2
4830: PUSH
4831: LD_INT 3
4833: PPUSH
4834: LD_INT 22
4836: PUSH
4837: LD_INT 3
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 1
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: LD_INT 24
4859: PUSH
4860: LD_INT 1000
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 70
4880: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4881: LD_ADDR_VAR 0 3
4885: PUSH
4886: LD_EXP 41
4890: PPUSH
4891: LD_INT 50
4893: PUSH
4894: EMPTY
4895: LIST
4896: PPUSH
4897: CALL_OW 72
4901: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4902: LD_ADDR_VAR 0 4
4906: PUSH
4907: LD_INT 118
4909: PPUSH
4910: LD_INT 121
4912: PPUSH
4913: CALL_OW 428
4917: ST_TO_ADDR
// if filter and tmp then
4918: LD_VAR 0 2
4922: PUSH
4923: LD_VAR 0 3
4927: AND
4928: IFFALSE 5020
// begin for i in tmp do
4930: LD_ADDR_VAR 0 1
4934: PUSH
4935: LD_VAR 0 3
4939: PUSH
4940: FOR_IN
4941: IFFALSE 5016
// begin if GetTag ( i ) = tEscape then
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 110
4952: PUSH
4953: LD_EXP 18
4957: EQUAL
4958: IFFALSE 4962
// continue ;
4960: GO 4940
// if IsInUnit ( i ) then
4962: LD_VAR 0 1
4966: PPUSH
4967: CALL_OW 310
4971: IFFALSE 4984
// ComExitBuilding ( i ) else
4973: LD_VAR 0 1
4977: PPUSH
4978: CALL_OW 122
4982: GO 5014
// if not HasTask ( i ) then
4984: LD_VAR 0 1
4988: PPUSH
4989: CALL_OW 314
4993: NOT
4994: IFFALSE 5014
// ComHeal ( i , filter [ 1 ] ) ;
4996: LD_VAR 0 1
5000: PPUSH
5001: LD_VAR 0 2
5005: PUSH
5006: LD_INT 1
5008: ARRAY
5009: PPUSH
5010: CALL_OW 128
// end ;
5014: GO 4940
5016: POP
5017: POP
// end else
5018: GO 5093
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5020: LD_VAR 0 3
5024: PPUSH
5025: LD_INT 3
5027: PUSH
5028: LD_INT 54
5030: PUSH
5031: EMPTY
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PPUSH
5038: CALL_OW 72
5042: IFFALSE 5093
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5044: LD_ADDR_VAR 0 1
5048: PUSH
5049: LD_VAR 0 3
5053: PPUSH
5054: LD_INT 3
5056: PUSH
5057: LD_INT 54
5059: PUSH
5060: EMPTY
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 72
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5091
// ComEnterUnit ( i , lab ) ;
5075: LD_VAR 0 1
5079: PPUSH
5080: LD_VAR 0 4
5084: PPUSH
5085: CALL_OW 120
5089: GO 5072
5091: POP
5092: POP
// end ; end ; end_of_file
5093: PPOPN 4
5095: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5096: LD_VAR 0 1
5100: PPUSH
5101: CALL 26372 0 1
// if un = Heike then
5105: LD_VAR 0 1
5109: PUSH
5110: LD_EXP 19
5114: EQUAL
5115: IFFALSE 5124
// YouLost ( Heike ) ;
5117: LD_STRING Heike
5119: PPUSH
5120: CALL_OW 104
// if un in ruEng then
5124: LD_VAR 0 1
5128: PUSH
5129: LD_EXP 39
5133: IN
5134: IFFALSE 5152
// ruEng := ruEng diff un ;
5136: LD_ADDR_EXP 39
5140: PUSH
5141: LD_EXP 39
5145: PUSH
5146: LD_VAR 0 1
5150: DIFF
5151: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5152: LD_VAR 0 1
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 2
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 23
5179: PUSH
5180: LD_INT 2
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: PPUSH
5192: CALL_OW 69
5196: IN
5197: IFFALSE 5213
// loseCounter := loseCounter + 1 ;
5199: LD_ADDR_EXP 6
5203: PUSH
5204: LD_EXP 6
5208: PUSH
5209: LD_INT 1
5211: PLUS
5212: ST_TO_ADDR
// end ;
5213: PPOPN 1
5215: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5216: LD_INT 0
5218: PPUSH
5219: PPUSH
// begin if un in ruMobile then
5220: LD_VAR 0 2
5224: PUSH
5225: LD_EXP 42
5229: IN
5230: IFFALSE 5389
// begin ruMobile := ruMobile diff un ;
5232: LD_ADDR_EXP 42
5236: PUSH
5237: LD_EXP 42
5241: PUSH
5242: LD_VAR 0 2
5246: DIFF
5247: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5248: LD_ADDR_VAR 0 5
5252: PUSH
5253: LD_VAR 0 2
5257: PPUSH
5258: CALL_OW 264
5262: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 110
5270: PPUSH
5271: LD_INT 126
5273: PPUSH
5274: CALL_OW 428
5278: ST_TO_ADDR
// if not driver or not fac then
5279: LD_VAR 0 1
5283: NOT
5284: PUSH
5285: LD_VAR 0 6
5289: NOT
5290: OR
5291: IFFALSE 5295
// exit ;
5293: GO 5389
// AddComMoveXY ( driver , 111 , 121 ) ;
5295: LD_VAR 0 1
5299: PPUSH
5300: LD_INT 111
5302: PPUSH
5303: LD_INT 121
5305: PPUSH
5306: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5310: LD_VAR 0 1
5314: PPUSH
5315: LD_VAR 0 6
5319: PPUSH
5320: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5324: LD_INT 35
5326: PPUSH
5327: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: CALL_OW 301
5340: PUSH
5341: LD_VAR 0 1
5345: PPUSH
5346: CALL_OW 310
5350: OR
5351: IFFALSE 5324
// if IsDead ( driver ) then
5353: LD_VAR 0 1
5357: PPUSH
5358: CALL_OW 301
5362: IFFALSE 5366
// exit ;
5364: GO 5389
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5366: LD_VAR 0 6
5370: PPUSH
5371: LD_INT 21
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: LD_INT 1
5379: PPUSH
5380: LD_VAR 0 5
5384: PPUSH
5385: CALL_OW 185
// end ; end ;
5389: PPOPN 6
5391: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5392: LD_VAR 0 1
5396: PPUSH
5397: LD_VAR 0 2
5401: PPUSH
5402: CALL 26492 0 2
// if GetSide ( fac ) = 3 then
5406: LD_VAR 0 2
5410: PPUSH
5411: CALL_OW 255
5415: PUSH
5416: LD_INT 3
5418: EQUAL
5419: IFFALSE 5465
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5421: LD_ADDR_EXP 42
5425: PUSH
5426: LD_EXP 42
5430: PPUSH
5431: LD_EXP 42
5435: PUSH
5436: LD_INT 1
5438: PLUS
5439: PPUSH
5440: LD_VAR 0 1
5444: PPUSH
5445: CALL_OW 1
5449: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5450: LD_VAR 0 1
5454: PPUSH
5455: LD_INT 110
5457: PPUSH
5458: LD_INT 117
5460: PPUSH
5461: CALL_OW 171
// end ; end ;
5465: PPOPN 2
5467: END
// on LeaveBuilding ( b , un ) do var barracks ;
5468: LD_INT 0
5470: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 130
5478: PPUSH
5479: LD_INT 17
5481: PPUSH
5482: CALL_OW 428
5486: PUSH
5487: LD_INT 138
5489: PPUSH
5490: LD_INT 22
5492: PPUSH
5493: CALL_OW 428
5497: PUSH
5498: LD_INT 123
5500: PPUSH
5501: LD_INT 17
5503: PPUSH
5504: CALL_OW 428
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: LIST
5513: IN
5514: IFFALSE 5538
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5516: LD_VAR 0 2
5520: PPUSH
5521: LD_INT 135
5523: PPUSH
5524: LD_INT 31
5526: PPUSH
5527: CALL_OW 428
5531: PPUSH
5532: CALL_OW 180
// exit ;
5536: GO 5812
// end ; if b = HexInfo ( 135 , 31 ) then
5538: LD_VAR 0 1
5542: PUSH
5543: LD_INT 135
5545: PPUSH
5546: LD_INT 31
5548: PPUSH
5549: CALL_OW 428
5553: EQUAL
5554: IFFALSE 5626
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5556: LD_VAR 0 2
5560: PPUSH
5561: LD_INT 106
5563: PPUSH
5564: LD_INT 51
5566: PPUSH
5567: CALL_OW 428
5571: PPUSH
5572: CALL_OW 180
// if not explodeFirstDepot then
5576: LD_EXP 12
5580: NOT
5581: IFFALSE 5624
// begin explodeFirstDepot := true ;
5583: LD_ADDR_EXP 12
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5591: LD_INT 525
5593: PPUSH
5594: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5598: LD_INT 127
5600: PPUSH
5601: LD_INT 27
5603: PPUSH
5604: LD_INT 1
5606: PPUSH
5607: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5611: LD_INT 125
5613: PPUSH
5614: LD_INT 29
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 453
// end ; exit ;
5624: GO 5812
// end ; if b = HexInfo ( 106 , 51 ) then
5626: LD_VAR 0 1
5630: PUSH
5631: LD_INT 106
5633: PPUSH
5634: LD_INT 51
5636: PPUSH
5637: CALL_OW 428
5641: EQUAL
5642: IFFALSE 5742
// begin AddComMoveXY ( un , 106 , 93 ) ;
5644: LD_VAR 0 2
5648: PPUSH
5649: LD_INT 106
5651: PPUSH
5652: LD_INT 93
5654: PPUSH
5655: CALL_OW 171
// if not explodeSecondDepot then
5659: LD_EXP 13
5663: NOT
5664: IFFALSE 5740
// begin explodeSecondDepot := true ;
5666: LD_ADDR_EXP 13
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5674: LD_INT 420
5676: PPUSH
5677: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5681: LD_INT 111
5683: PPUSH
5684: LD_INT 75
5686: PPUSH
5687: LD_INT 1
5689: PPUSH
5690: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5694: LD_INT 111
5696: PPUSH
5697: LD_INT 75
5699: PPUSH
5700: LD_INT 1
5702: PPUSH
5703: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5707: LD_INT 108
5709: PPUSH
5710: LD_INT 69
5712: PPUSH
5713: LD_INT 1
5715: PPUSH
5716: CALL_OW 453
// wait ( 0 0$2 ) ;
5720: LD_INT 70
5722: PPUSH
5723: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5727: LD_INT 94
5729: PPUSH
5730: LD_INT 65
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: CALL_OW 453
// end ; exit ;
5740: GO 5812
// end ; if GetBType ( b ) = b_bunker then
5742: LD_VAR 0 1
5746: PPUSH
5747: CALL_OW 266
5751: PUSH
5752: LD_INT 32
5754: EQUAL
5755: IFFALSE 5812
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5757: LD_ADDR_VAR 0 3
5761: PUSH
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_INT 5
5769: PPUSH
5770: CALL 1016 0 2
5774: ST_TO_ADDR
// if barracks then
5775: LD_VAR 0 3
5779: IFFALSE 5797
// AddComEnterUnit ( un , barracks ) else
5781: LD_VAR 0 2
5785: PPUSH
5786: LD_VAR 0 3
5790: PPUSH
5791: CALL_OW 180
5795: GO 5812
// AddComMoveXY ( un , 116 , 110 ) ;
5797: LD_VAR 0 2
5801: PPUSH
5802: LD_INT 116
5804: PPUSH
5805: LD_INT 110
5807: PPUSH
5808: CALL_OW 171
// end ; end ;
5812: PPOPN 3
5814: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5815: LD_VAR 0 1
5819: PUSH
5820: LD_EXP 24
5824: EQUAL
5825: PUSH
5826: LD_VAR 0 2
5830: PUSH
5831: LD_INT 3
5833: PUSH
5834: LD_INT 6
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: IN
5841: AND
5842: IFFALSE 5873
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5844: LD_ADDR_EXP 8
5848: PUSH
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL_OW 250
5858: PUSH
5859: LD_VAR 0 1
5863: PPUSH
5864: CALL_OW 251
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: ST_TO_ADDR
// end ;
5873: PPOPN 3
5875: END
// every 0 0$1 trigger activeInvincible do var i ;
5876: LD_EXP 17
5880: IFFALSE 5949
5882: GO 5884
5884: DISABLE
5885: LD_INT 0
5887: PPUSH
// begin enable ;
5888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 22
5896: PUSH
5897: LD_INT 2
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 3
5906: PUSH
5907: LD_INT 24
5909: PUSH
5910: LD_INT 1000
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PPUSH
5925: CALL_OW 69
5929: PUSH
5930: FOR_IN
5931: IFFALSE 5947
// SetLives ( i , 1000 ) ;
5933: LD_VAR 0 1
5937: PPUSH
5938: LD_INT 1000
5940: PPUSH
5941: CALL_OW 234
5945: GO 5930
5947: POP
5948: POP
// end ; end_of_file
5949: PPOPN 1
5951: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5952: LD_INT 0
5954: PPUSH
5955: PPUSH
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
// Video ( true ) ;
5961: LD_INT 1
5963: PPUSH
5964: CALL 68774 0 1
// ChangeSideFog ( 5 , 2 ) ;
5968: LD_INT 5
5970: PPUSH
5971: LD_INT 2
5973: PPUSH
5974: CALL_OW 343
// music_nat := 4 ;
5978: LD_ADDR_OWVAR 71
5982: PUSH
5983: LD_INT 4
5985: ST_TO_ADDR
// music_class := music_combat ;
5986: LD_ADDR_OWVAR 72
5990: PUSH
5991: LD_INT 1
5993: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5994: LD_INT 133
5996: PPUSH
5997: LD_INT 2
5999: PPUSH
6000: LD_INT 2
6002: PPUSH
6003: LD_INT 10
6005: PPUSH
6006: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
6010: LD_INT 133
6012: PPUSH
6013: LD_INT 2
6015: PPUSH
6016: CALL_OW 86
// wait ( 0 0$1 ) ;
6020: LD_INT 35
6022: PPUSH
6023: CALL_OW 67
// uc_side := 6 ;
6027: LD_ADDR_OWVAR 20
6031: PUSH
6032: LD_INT 6
6034: ST_TO_ADDR
// uc_nation := 3 ;
6035: LD_ADDR_OWVAR 21
6039: PUSH
6040: LD_INT 3
6042: ST_TO_ADDR
// rutmp := [ ] ;
6043: LD_ADDR_VAR 0 7
6047: PUSH
6048: EMPTY
6049: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
6050: LD_INT 6
6052: PPUSH
6053: LD_INT 3
6055: PPUSH
6056: LD_INT 21
6058: PPUSH
6059: LD_INT 1
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: LD_INT 44
6067: PPUSH
6068: LD_INT 66
6070: PPUSH
6071: CALL 344 0 7
// veh := CreateVehicle ;
6075: LD_ADDR_VAR 0 5
6079: PUSH
6080: CALL_OW 45
6084: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6085: LD_VAR 0 5
6089: PPUSH
6090: LD_INT 3
6092: PPUSH
6093: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6097: LD_VAR 0 5
6101: PPUSH
6102: LD_INT 8
6104: PPUSH
6105: LD_INT 0
6107: PPUSH
6108: CALL_OW 49
// SetLives ( veh , 500 ) ;
6112: LD_VAR 0 5
6116: PPUSH
6117: LD_INT 500
6119: PPUSH
6120: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6124: LD_INT 0
6126: PPUSH
6127: LD_INT 3
6129: PPUSH
6130: LD_INT 3
6132: PPUSH
6133: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6137: CALL_OW 44
6141: PPUSH
6142: LD_VAR 0 5
6146: PPUSH
6147: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6151: LD_VAR 0 5
6155: PPUSH
6156: LD_INT 133
6158: PPUSH
6159: LD_INT 11
6161: PPUSH
6162: CALL_OW 111
// rutmp := [ veh ] ;
6166: LD_ADDR_VAR 0 7
6170: PUSH
6171: LD_VAR 0 5
6175: PUSH
6176: EMPTY
6177: LIST
6178: ST_TO_ADDR
// for i := 1 to 4 do
6179: LD_ADDR_VAR 0 2
6183: PUSH
6184: DOUBLE
6185: LD_INT 1
6187: DEC
6188: ST_TO_ADDR
6189: LD_INT 4
6191: PUSH
6192: FOR_TO
6193: IFFALSE 6300
// begin PrepareHuman ( false , i , 2 ) ;
6195: LD_INT 0
6197: PPUSH
6198: LD_VAR 0 2
6202: PPUSH
6203: LD_INT 2
6205: PPUSH
6206: CALL_OW 380
// un := CreateHuman ;
6210: LD_ADDR_VAR 0 4
6214: PUSH
6215: CALL_OW 44
6219: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6220: LD_VAR 0 4
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6232: LD_VAR 0 4
6236: PPUSH
6237: LD_INT 8
6239: PPUSH
6240: LD_INT 0
6242: PPUSH
6243: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6247: LD_ADDR_VAR 0 7
6251: PUSH
6252: LD_VAR 0 7
6256: PPUSH
6257: LD_VAR 0 7
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: PPUSH
6266: LD_VAR 0 4
6270: PPUSH
6271: CALL_OW 1
6275: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6276: LD_VAR 0 4
6280: PPUSH
6281: LD_INT 133
6283: PPUSH
6284: LD_INT 11
6286: PPUSH
6287: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6291: LD_INT 18
6293: PPUSH
6294: CALL_OW 67
// end ;
6298: GO 6192
6300: POP
6301: POP
// for i in rutmp do
6302: LD_ADDR_VAR 0 2
6306: PUSH
6307: LD_VAR 0 7
6311: PUSH
6312: FOR_IN
6313: IFFALSE 6362
// begin AddComMoveXY ( i , 99 , 65 ) ;
6315: LD_VAR 0 2
6319: PPUSH
6320: LD_INT 99
6322: PPUSH
6323: LD_INT 65
6325: PPUSH
6326: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6330: LD_VAR 0 2
6334: PPUSH
6335: LD_INT 76
6337: PPUSH
6338: LD_INT 108
6340: PPUSH
6341: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6345: LD_VAR 0 2
6349: PPUSH
6350: LD_INT 92
6352: PPUSH
6353: LD_INT 176
6355: PPUSH
6356: CALL_OW 171
// end ;
6360: GO 6312
6362: POP
6363: POP
// wait ( 0 0$10 ) ;
6364: LD_INT 350
6366: PPUSH
6367: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6371: LD_ADDR_VAR 0 6
6375: PUSH
6376: LD_EXP 19
6380: PUSH
6381: LD_EXP 20
6385: PUSH
6386: LD_EXP 21
6390: PUSH
6391: LD_EXP 22
6395: PUSH
6396: LD_EXP 23
6400: PUSH
6401: LD_EXP 24
6405: PUSH
6406: LD_EXP 25
6410: PUSH
6411: LD_EXP 26
6415: PUSH
6416: LD_EXP 28
6420: PUSH
6421: LD_EXP 29
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_EXP 30
6442: UNION
6443: ST_TO_ADDR
// tmp := tmp diff 0 ;
6444: LD_ADDR_VAR 0 6
6448: PUSH
6449: LD_VAR 0 6
6453: PUSH
6454: LD_INT 0
6456: DIFF
6457: ST_TO_ADDR
// for i in heikeVehicles do
6458: LD_ADDR_VAR 0 2
6462: PUSH
6463: LD_EXP 31
6467: PUSH
6468: FOR_IN
6469: IFFALSE 6888
// begin if not tmp then
6471: LD_VAR 0 6
6475: NOT
6476: IFFALSE 6480
// continue ;
6478: GO 6468
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6480: LD_INT 2
6482: PPUSH
6483: LD_VAR 0 2
6487: PUSH
6488: LD_INT 5
6490: ARRAY
6491: PPUSH
6492: LD_VAR 0 2
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: LD_VAR 0 2
6505: PUSH
6506: LD_INT 2
6508: ARRAY
6509: PPUSH
6510: LD_VAR 0 2
6514: PUSH
6515: LD_INT 3
6517: ARRAY
6518: PPUSH
6519: LD_VAR 0 2
6523: PUSH
6524: LD_INT 4
6526: ARRAY
6527: PPUSH
6528: LD_INT 34
6530: PPUSH
6531: CALL 344 0 7
// veh := CreateVehicle ;
6535: LD_ADDR_VAR 0 5
6539: PUSH
6540: CALL_OW 45
6544: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6545: LD_VAR 0 2
6549: PUSH
6550: LD_INT 4
6552: ARRAY
6553: PUSH
6554: LD_INT 51
6556: PUSH
6557: LD_INT 32
6559: PUSH
6560: LD_INT 12
6562: PUSH
6563: LD_INT 89
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: IN
6572: IFFALSE 6652
// begin if i [ 7 ] [ 1 ] then
6574: LD_VAR 0 2
6578: PUSH
6579: LD_INT 7
6581: ARRAY
6582: PUSH
6583: LD_INT 1
6585: ARRAY
6586: IFFALSE 6613
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6588: LD_VAR 0 5
6592: PPUSH
6593: LD_INT 1
6595: PPUSH
6596: LD_VAR 0 2
6600: PUSH
6601: LD_INT 7
6603: ARRAY
6604: PUSH
6605: LD_INT 1
6607: ARRAY
6608: PPUSH
6609: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 7
6620: ARRAY
6621: PUSH
6622: LD_INT 2
6624: ARRAY
6625: IFFALSE 6652
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6627: LD_VAR 0 5
6631: PPUSH
6632: LD_INT 2
6634: PPUSH
6635: LD_VAR 0 2
6639: PUSH
6640: LD_INT 7
6642: ARRAY
6643: PUSH
6644: LD_INT 2
6646: ARRAY
6647: PPUSH
6648: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6652: LD_VAR 0 5
6656: PPUSH
6657: LD_INT 3
6659: PPUSH
6660: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6664: LD_VAR 0 5
6668: PPUSH
6669: LD_INT 8
6671: PPUSH
6672: LD_INT 0
6674: PPUSH
6675: CALL_OW 49
// for j := 1 to tmp do
6679: LD_ADDR_VAR 0 3
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_VAR 0 6
6693: PUSH
6694: FOR_TO
6695: IFFALSE 6768
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6697: LD_VAR 0 2
6701: PUSH
6702: LD_INT 8
6704: ARRAY
6705: PUSH
6706: LD_VAR 0 6
6710: PUSH
6711: LD_VAR 0 3
6715: ARRAY
6716: PPUSH
6717: CALL_OW 257
6721: EQUAL
6722: IFFALSE 6766
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6724: LD_VAR 0 6
6728: PUSH
6729: LD_VAR 0 3
6733: ARRAY
6734: PPUSH
6735: LD_VAR 0 5
6739: PPUSH
6740: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6744: LD_ADDR_VAR 0 6
6748: PUSH
6749: LD_VAR 0 6
6753: PPUSH
6754: LD_VAR 0 3
6758: PPUSH
6759: CALL_OW 3
6763: ST_TO_ADDR
// break ;
6764: GO 6768
// end ; end ;
6766: GO 6694
6768: POP
6769: POP
// if IsEmpty ( veh ) then
6770: LD_VAR 0 5
6774: PPUSH
6775: CALL 33224 0 1
6779: IFFALSE 6817
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6781: LD_VAR 0 6
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PPUSH
6790: LD_VAR 0 5
6794: PPUSH
6795: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6799: LD_ADDR_VAR 0 6
6803: PUSH
6804: LD_VAR 0 6
6808: PPUSH
6809: LD_INT 1
6811: PPUSH
6812: CALL_OW 3
6816: ST_TO_ADDR
// end ; if GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 264
6826: PUSH
6827: LD_INT 51
6829: PUSH
6830: LD_INT 32
6832: PUSH
6833: LD_INT 12
6835: PUSH
6836: LD_INT 89
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: IN
6845: IFFALSE 6864
// ComMoveXY ( veh , 130 , 8 ) else
6847: LD_VAR 0 5
6851: PPUSH
6852: LD_INT 130
6854: PPUSH
6855: LD_INT 8
6857: PPUSH
6858: CALL_OW 111
6862: GO 6879
// ComMoveXY ( veh , 134 , 15 ) ;
6864: LD_VAR 0 5
6868: PPUSH
6869: LD_INT 134
6871: PPUSH
6872: LD_INT 15
6874: PPUSH
6875: CALL_OW 111
// wait ( 0 0$3 ) ;
6879: LD_INT 105
6881: PPUSH
6882: CALL_OW 67
// end ;
6886: GO 6468
6888: POP
6889: POP
// if tmp then
6890: LD_VAR 0 6
6894: IFFALSE 6950
// for i in tmp do
6896: LD_ADDR_VAR 0 2
6900: PUSH
6901: LD_VAR 0 6
6905: PUSH
6906: FOR_IN
6907: IFFALSE 6948
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6909: LD_VAR 0 2
6913: PPUSH
6914: LD_INT 10
6916: PPUSH
6917: LD_INT 0
6919: PPUSH
6920: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6924: LD_VAR 0 2
6928: PPUSH
6929: LD_INT 146
6931: PPUSH
6932: LD_INT 7
6934: PPUSH
6935: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6939: LD_INT 18
6941: PPUSH
6942: CALL_OW 67
// end ;
6946: GO 6906
6948: POP
6949: POP
// if heikeApes then
6950: LD_EXP 32
6954: IFFALSE 7010
// for i in heikeApes do
6956: LD_ADDR_VAR 0 2
6960: PUSH
6961: LD_EXP 32
6965: PUSH
6966: FOR_IN
6967: IFFALSE 7008
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_INT 10
6976: PPUSH
6977: LD_INT 0
6979: PPUSH
6980: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6984: LD_VAR 0 2
6988: PPUSH
6989: LD_INT 146
6991: PPUSH
6992: LD_INT 7
6994: PPUSH
6995: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6999: LD_INT 18
7001: PPUSH
7002: CALL_OW 67
// end ;
7006: GO 6966
7008: POP
7009: POP
// DialogueOn ;
7010: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
7014: LD_EXP 19
7018: PPUSH
7019: LD_STRING DH-outpost-a-1
7021: PPUSH
7022: CALL_OW 88
// DialogueOff ;
7026: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
7030: LD_INT 133
7032: PPUSH
7033: LD_INT 2
7035: PPUSH
7036: LD_INT 2
7038: PPUSH
7039: CALL_OW 331
// activeInvincible := false ;
7043: LD_ADDR_EXP 17
7047: PUSH
7048: LD_INT 0
7050: ST_TO_ADDR
// Video ( false ) ;
7051: LD_INT 0
7053: PPUSH
7054: CALL 68774 0 1
// music_nat := 0 ;
7058: LD_ADDR_OWVAR 71
7062: PUSH
7063: LD_INT 0
7065: ST_TO_ADDR
// music_class := 0 ;
7066: LD_ADDR_OWVAR 72
7070: PUSH
7071: LD_INT 0
7073: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
7074: LD_STRING Outposts
7076: PPUSH
7077: CALL_OW 337
// SaveForQuickRestart ;
7081: CALL_OW 22
// end ;
7085: LD_VAR 0 1
7089: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
7090: LD_INT 22
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 91
7102: PUSH
7103: LD_EXP 22
7107: PUSH
7108: LD_INT 20
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL_OW 69
7124: PUSH
7125: LD_EXP 3
7129: AND
7130: PUSH
7131: LD_EXP 22
7135: PPUSH
7136: CALL_OW 302
7140: AND
7141: IFFALSE 7388
7143: GO 7145
7145: DISABLE
7146: LD_INT 0
7148: PPUSH
7149: PPUSH
7150: PPUSH
7151: PPUSH
// begin IbrahimBetrayal ;
7152: CALL 7391 0 0
// repeat wait ( 0 0$1 ) ;
7156: LD_INT 35
7158: PPUSH
7159: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7163: LD_EXP 22
7167: PPUSH
7168: CALL_OW 301
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 2
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 91
7185: PUSH
7186: LD_EXP 22
7190: PUSH
7191: LD_INT 6
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: PUSH
7208: LD_EXP 22
7212: PPUSH
7213: CALL_OW 302
7217: AND
7218: OR
7219: IFFALSE 7156
// if IsDead ( Ibrahim ) then
7221: LD_EXP 22
7225: PPUSH
7226: CALL_OW 301
7230: IFFALSE 7234
// exit ;
7232: GO 7388
// x := GetX ( Ibrahim ) ;
7234: LD_ADDR_VAR 0 1
7238: PUSH
7239: LD_EXP 22
7243: PPUSH
7244: CALL_OW 250
7248: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7249: LD_ADDR_VAR 0 2
7253: PUSH
7254: LD_EXP 22
7258: PPUSH
7259: CALL_OW 251
7263: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_EXP 22
7273: PPUSH
7274: CALL_OW 254
7278: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7279: LD_ADDR_VAR 0 4
7283: PUSH
7284: LD_EXP 22
7288: PPUSH
7289: CALL_OW 256
7293: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7294: LD_EXP 22
7298: PPUSH
7299: CALL_OW 64
// uc_side := 2 ;
7303: LD_ADDR_OWVAR 20
7307: PUSH
7308: LD_INT 2
7310: ST_TO_ADDR
// uc_nation := 2 ;
7311: LD_ADDR_OWVAR 21
7315: PUSH
7316: LD_INT 2
7318: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7319: LD_ADDR_EXP 22
7323: PUSH
7324: LD_STRING Ibrahim
7326: PPUSH
7327: LD_INT 0
7329: PPUSH
7330: LD_STRING 
7332: PPUSH
7333: CALL 31100 0 3
7337: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7338: LD_EXP 22
7342: PPUSH
7343: LD_VAR 0 3
7347: PPUSH
7348: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7352: LD_EXP 22
7356: PPUSH
7357: LD_VAR 0 1
7361: PPUSH
7362: LD_VAR 0 2
7366: PPUSH
7367: LD_INT 0
7369: PPUSH
7370: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7374: LD_EXP 22
7378: PPUSH
7379: LD_VAR 0 4
7383: PPUSH
7384: CALL_OW 234
// end ;
7388: PPOPN 4
7390: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7391: LD_INT 0
7393: PPUSH
7394: PPUSH
7395: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7396: LD_INT 122
7398: PPUSH
7399: LD_INT 77
7401: PPUSH
7402: LD_INT 2
7404: PPUSH
7405: LD_INT 6
7407: NEG
7408: PPUSH
7409: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7413: LD_EXP 22
7417: PPUSH
7418: LD_INT 123
7420: PPUSH
7421: LD_INT 79
7423: PPUSH
7424: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7428: LD_EXP 22
7432: PPUSH
7433: LD_INT 125
7435: PPUSH
7436: LD_INT 82
7438: PPUSH
7439: CALL_OW 178
// wait ( 0 0$2 ) ;
7443: LD_INT 70
7445: PPUSH
7446: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7450: LD_EXP 43
7454: PPUSH
7455: LD_EXP 22
7459: PPUSH
7460: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7464: LD_EXP 43
7468: PPUSH
7469: LD_STRING DRum-outpost-b-3
7471: PPUSH
7472: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: LD_INT 125
7483: PPUSH
7484: LD_INT 76
7486: PPUSH
7487: CALL_OW 428
7491: PUSH
7492: LD_INT 125
7494: PPUSH
7495: LD_INT 79
7497: PPUSH
7498: CALL_OW 428
7502: PUSH
7503: LD_INT 125
7505: PPUSH
7506: LD_INT 82
7508: PPUSH
7509: CALL_OW 428
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: ST_TO_ADDR
// for i in tmp do
7519: LD_ADDR_VAR 0 2
7523: PUSH
7524: LD_VAR 0 3
7528: PUSH
7529: FOR_IN
7530: IFFALSE 7546
// SetLives ( i , 200 ) ;
7532: LD_VAR 0 2
7536: PPUSH
7537: LD_INT 200
7539: PPUSH
7540: CALL_OW 234
7544: GO 7529
7546: POP
7547: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7548: LD_EXP 22
7552: PPUSH
7553: LD_STRING DI-outpost-b-4
7555: PPUSH
7556: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7560: LD_EXP 22
7564: PPUSH
7565: LD_INT 5
7567: PPUSH
7568: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7572: LD_EXP 22
7576: PUSH
7577: LD_EXP 43
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7590: LD_INT 122
7592: PPUSH
7593: LD_INT 77
7595: PPUSH
7596: LD_INT 2
7598: PPUSH
7599: CALL_OW 331
// if Givi then
7603: LD_EXP 20
7607: IFFALSE 7623
// Say ( Givi , DG-1-outpost-b-5 ) else
7609: LD_EXP 20
7613: PPUSH
7614: LD_STRING DG-1-outpost-b-5
7616: PPUSH
7617: CALL_OW 88
7621: GO 7688
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7623: LD_EXP 30
7627: PPUSH
7628: LD_INT 26
7630: PUSH
7631: LD_INT 2
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 72
7642: PUSH
7643: LD_INT 1
7645: ARRAY
7646: PPUSH
7647: LD_STRING DArf-outpost-b-a-5
7649: PPUSH
7650: CALL_OW 88
7654: NOT
7655: IFFALSE 7688
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7657: LD_EXP 30
7661: PPUSH
7662: LD_INT 26
7664: PUSH
7665: LD_INT 1
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PPUSH
7672: CALL_OW 72
7676: PUSH
7677: LD_INT 1
7679: ARRAY
7680: PPUSH
7681: LD_STRING DArm-outpost-b-a-5
7683: PPUSH
7684: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7688: LD_INT 35
7690: PPUSH
7691: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7695: LD_EXP 22
7699: PPUSH
7700: CALL_OW 301
7704: PUSH
7705: LD_EXP 19
7709: PPUSH
7710: LD_EXP 22
7714: PPUSH
7715: CALL_OW 296
7719: PUSH
7720: LD_INT 6
7722: LESS
7723: PUSH
7724: LD_EXP 22
7728: PPUSH
7729: CALL_OW 302
7733: AND
7734: OR
7735: IFFALSE 7688
// if IsDead ( Ibrahim ) then
7737: LD_EXP 22
7741: PPUSH
7742: CALL_OW 301
7746: IFFALSE 7762
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7748: LD_EXP 19
7752: PPUSH
7753: LD_STRING DH-ibrahimdead-1
7755: PPUSH
7756: CALL_OW 88
// exit ;
7760: GO 7803
// end ; CenterNowOnUnits ( Ibrahim ) ;
7762: LD_EXP 22
7766: PPUSH
7767: CALL_OW 87
// DialogueOn ;
7771: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7775: LD_EXP 22
7779: PPUSH
7780: LD_STRING DI-ibrahimlives-1
7782: PPUSH
7783: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7787: LD_EXP 19
7791: PPUSH
7792: LD_STRING DH-Ibrahimlives-2
7794: PPUSH
7795: CALL_OW 88
// DialogueOff ;
7799: CALL_OW 7
// end ;
7803: LD_VAR 0 1
7807: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7808: LD_INT 11
7810: PPUSH
7811: LD_INT 22
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 70
7825: PUSH
7826: LD_OWVAR 1
7830: PUSH
7831: LD_INT 18900
7833: PUSH
7834: LD_INT 16800
7836: PUSH
7837: LD_INT 16800
7839: PUSH
7840: LD_INT 15750
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: PUSH
7849: LD_OWVAR 67
7853: ARRAY
7854: GREATEREQUAL
7855: OR
7856: IFFALSE 8364
7858: GO 7860
7860: DISABLE
// begin outerAreaAchived := true ;
7861: LD_ADDR_EXP 15
7865: PUSH
7866: LD_INT 1
7868: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7869: LD_INT 700
7871: PPUSH
7872: CALL_OW 67
// DialogueOn ;
7876: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7880: LD_EXP 27
7884: PPUSH
7885: LD_STRING DShar-radio-1
7887: PPUSH
7888: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7892: LD_EXP 27
7896: PPUSH
7897: LD_STRING DShar-radio-2
7899: PPUSH
7900: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7904: LD_EXP 19
7908: PPUSH
7909: LD_STRING DH-radio-2
7911: PPUSH
7912: CALL_OW 88
// DialogueOff ;
7916: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7920: LD_STRING Gaidar
7922: PPUSH
7923: CALL_OW 337
// if Difficulty < 3 then
7927: LD_OWVAR 67
7931: PUSH
7932: LD_INT 3
7934: LESS
7935: IFFALSE 8001
// begin DialogueOn ;
7937: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7941: LD_INT 11
7943: PPUSH
7944: LD_INT 14
7946: PPUSH
7947: LD_INT 2
7949: PPUSH
7950: LD_INT 6
7952: NEG
7953: PPUSH
7954: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7958: LD_INT 11
7960: PPUSH
7961: LD_INT 14
7963: PPUSH
7964: LD_INT 2
7966: PPUSH
7967: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7971: LD_INT 11
7973: PPUSH
7974: LD_INT 14
7976: PPUSH
7977: CALL_OW 84
// dwait ( 0 0$1 ) ;
7981: LD_INT 35
7983: PPUSH
7984: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7988: LD_EXP 19
7992: PPUSH
7993: CALL_OW 87
// DialogueOff ;
7997: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
8001: LD_INT 1050
8003: PUSH
8004: LD_INT 350
8006: PPUSH
8007: LD_INT 525
8009: PPUSH
8010: CALL_OW 12
8014: PUSH
8015: LD_OWVAR 67
8019: MUL
8020: PLUS
8021: PPUSH
8022: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8026: LD_INT 35
8028: PPUSH
8029: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
8033: LD_INT 2
8035: PPUSH
8036: LD_INT 1
8038: PPUSH
8039: CALL_OW 428
8043: PUSH
8044: LD_INT 0
8046: EQUAL
8047: IFFALSE 8026
// SetDir ( Gaidar , 2 ) ;
8049: LD_EXP 36
8053: PPUSH
8054: LD_INT 2
8056: PPUSH
8057: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
8061: LD_EXP 36
8065: PPUSH
8066: LD_INT 2
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 0
8074: PPUSH
8075: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
8079: LD_EXP 36
8083: PPUSH
8084: LD_INT 19
8086: PPUSH
8087: LD_INT 24
8089: PPUSH
8090: CALL_OW 111
// if Difficulty < 3 then
8094: LD_OWVAR 67
8098: PUSH
8099: LD_INT 3
8101: LESS
8102: IFFALSE 8141
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8104: LD_INT 11
8106: PPUSH
8107: LD_INT 14
8109: PPUSH
8110: LD_INT 2
8112: PPUSH
8113: LD_INT 6
8115: NEG
8116: PPUSH
8117: CALL_OW 330
// wait ( 0 0$2 ) ;
8121: LD_INT 70
8123: PPUSH
8124: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
8128: LD_INT 11
8130: PPUSH
8131: LD_INT 14
8133: PPUSH
8134: LD_INT 2
8136: PPUSH
8137: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
8141: LD_EXP 36
8145: PPUSH
8146: LD_INT 210
8148: PPUSH
8149: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8153: LD_EXP 36
8157: PPUSH
8158: LD_INT 38
8160: PPUSH
8161: LD_INT 47
8163: PPUSH
8164: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8168: LD_EXP 36
8172: PPUSH
8173: LD_INT 32
8175: PPUSH
8176: LD_INT 59
8178: PPUSH
8179: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8183: LD_EXP 36
8187: PPUSH
8188: LD_INT 350
8190: PPUSH
8191: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8195: LD_EXP 36
8199: PPUSH
8200: LD_INT 62
8202: PPUSH
8203: LD_INT 116
8205: PPUSH
8206: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8210: LD_EXP 36
8214: PPUSH
8215: LD_INT 92
8217: PPUSH
8218: LD_INT 177
8220: PPUSH
8221: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8225: LD_INT 35
8227: PPUSH
8228: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8232: LD_EXP 36
8236: PPUSH
8237: CALL_OW 301
8241: PUSH
8242: LD_EXP 36
8246: PPUSH
8247: LD_INT 92
8249: PPUSH
8250: LD_INT 177
8252: PPUSH
8253: CALL_OW 307
8257: OR
8258: IFFALSE 8225
// if IsAt ( Gaidar , 92 , 177 ) then
8260: LD_EXP 36
8264: PPUSH
8265: LD_INT 92
8267: PPUSH
8268: LD_INT 177
8270: PPUSH
8271: CALL_OW 307
8275: IFFALSE 8342
// begin DialogueOn ;
8277: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8281: LD_INT 92
8283: PPUSH
8284: LD_INT 177
8286: PPUSH
8287: LD_INT 2
8289: PPUSH
8290: LD_INT 3
8292: NEG
8293: PPUSH
8294: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8298: LD_EXP 36
8302: PPUSH
8303: CALL_OW 87
// dwait ( 0 0$2 ) ;
8307: LD_INT 70
8309: PPUSH
8310: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8314: LD_INT 92
8316: PPUSH
8317: LD_INT 177
8319: PPUSH
8320: LD_INT 2
8322: PPUSH
8323: CALL_OW 331
// DialogueOff ;
8327: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8331: LD_EXP 36
8335: PPUSH
8336: CALL_OW 64
// exit ;
8340: GO 8364
// end ; gaidarKilled := true ;
8342: LD_ADDR_EXP 14
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8350: LD_STRING GaidarKilled
8352: PPUSH
8353: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8357: LD_STRING ACH_COMMISAR
8359: PPUSH
8360: CALL_OW 543
// end ;
8364: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8365: LD_INT 2
8367: PPUSH
8368: LD_EXP 36
8372: PPUSH
8373: CALL_OW 292
8377: IFFALSE 8394
8379: GO 8381
8381: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8382: LD_EXP 36
8386: PPUSH
8387: LD_STRING DT-objective-1
8389: PPUSH
8390: CALL_OW 88
8394: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8395: LD_INT 22
8397: PUSH
8398: LD_INT 2
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 2
8407: PUSH
8408: LD_INT 95
8410: PUSH
8411: LD_INT 5
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 95
8420: PUSH
8421: LD_INT 6
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 95
8430: PUSH
8431: LD_INT 7
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 69
8452: IFFALSE 8489
8454: GO 8456
8456: DISABLE
// begin DialogueOn ;
8457: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8461: LD_EXP 19
8465: PPUSH
8466: LD_STRING DH-outpost-last-1
8468: PPUSH
8469: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8473: LD_EXP 35
8477: PPUSH
8478: LD_STRING DB-outpost-last-2
8480: PPUSH
8481: CALL_OW 94
// DialogueOff ;
8485: CALL_OW 7
// end ;
8489: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8490: LD_INT 200
8492: PPUSH
8493: CALL_OW 256
8497: PUSH
8498: LD_INT 999
8500: LESS
8501: PUSH
8502: LD_INT 200
8504: PPUSH
8505: CALL_OW 255
8509: PUSH
8510: LD_INT 2
8512: EQUAL
8513: OR
8514: IFFALSE 8687
8516: GO 8518
8518: DISABLE
8519: LD_INT 0
8521: PPUSH
8522: PPUSH
// begin if not earlyEscape then
8523: LD_EXP 16
8527: NOT
8528: IFFALSE 8554
// begin SayRadio ( Burlak , DB-end-1 ) ;
8530: LD_EXP 35
8534: PPUSH
8535: LD_STRING DB-end-1
8537: PPUSH
8538: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8542: LD_EXP 19
8546: PPUSH
8547: LD_STRING DH-end-2
8549: PPUSH
8550: CALL_OW 88
// end ; if tick <= 15 15$00 then
8554: LD_OWVAR 1
8558: PUSH
8559: LD_INT 31500
8561: LESSEQUAL
8562: IFFALSE 8571
// SetAchievement ( ACH_FIST ) ;
8564: LD_STRING ACH_FIST
8566: PPUSH
8567: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8571: LD_ADDR_VAR 0 2
8575: PUSH
8576: LD_INT 22
8578: PUSH
8579: LD_INT 3
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 3
8588: PUSH
8589: LD_INT 21
8591: PUSH
8592: LD_INT 3
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 69
8611: ST_TO_ADDR
// if not tmp then
8612: LD_VAR 0 2
8616: NOT
8617: IFFALSE 8621
// exit ;
8619: GO 8687
// for i in tmp do
8621: LD_ADDR_VAR 0 1
8625: PUSH
8626: LD_VAR 0 2
8630: PUSH
8631: FOR_IN
8632: IFFALSE 8685
// begin SetTag ( i , tEscape ) ;
8634: LD_VAR 0 1
8638: PPUSH
8639: LD_EXP 18
8643: PPUSH
8644: CALL_OW 109
// if IsInUnit ( i ) then
8648: LD_VAR 0 1
8652: PPUSH
8653: CALL_OW 310
8657: IFFALSE 8668
// ComExitBuilding ( i ) ;
8659: LD_VAR 0 1
8663: PPUSH
8664: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8668: LD_VAR 0 1
8672: PPUSH
8673: LD_INT 92
8675: PPUSH
8676: LD_INT 177
8678: PPUSH
8679: CALL_OW 171
// end ;
8683: GO 8631
8685: POP
8686: POP
// end ;
8687: PPOPN 2
8689: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8690: LD_INT 4
8692: PPUSH
8693: LD_INT 22
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PPUSH
8703: CALL_OW 70
8707: PUSH
8708: LD_EXP 15
8712: NOT
8713: AND
8714: PUSH
8715: LD_EXP 28
8719: PPUSH
8720: CALL_OW 302
8724: AND
8725: IFFALSE 8965
8727: GO 8729
8729: DISABLE
// begin DialogueOn ;
8730: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8734: LD_INT 111
8736: PPUSH
8737: LD_INT 54
8739: PPUSH
8740: LD_INT 2
8742: PPUSH
8743: LD_INT 16
8745: NEG
8746: PPUSH
8747: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8751: LD_INT 111
8753: PPUSH
8754: LD_INT 53
8756: PPUSH
8757: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8761: LD_INT 10
8763: PPUSH
8764: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8768: LD_EXP 28
8772: PPUSH
8773: LD_STRING DKs-Hannibal-1
8775: PPUSH
8776: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8780: LD_EXP 28
8784: PPUSH
8785: LD_STRING DKs-Hannibal-2
8787: PPUSH
8788: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8792: LD_EXP 28
8796: PPUSH
8797: LD_STRING DKs-Hannibal-3
8799: PPUSH
8800: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8804: LD_EXP 28
8808: PPUSH
8809: LD_STRING DKs-Hannibal-4
8811: PPUSH
8812: CALL_OW 88
// dwait ( 0 0$1 ) ;
8816: LD_INT 35
8818: PPUSH
8819: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8823: LD_INT 111
8825: PPUSH
8826: LD_INT 54
8828: PPUSH
8829: LD_INT 2
8831: PPUSH
8832: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8836: LD_INT 173
8838: PPUSH
8839: LD_INT 76
8841: PPUSH
8842: LD_INT 2
8844: PPUSH
8845: LD_INT 12
8847: NEG
8848: PPUSH
8849: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8853: LD_INT 173
8855: PPUSH
8856: LD_INT 76
8858: PPUSH
8859: LD_INT 2
8861: PPUSH
8862: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8866: LD_INT 173
8868: PPUSH
8869: LD_INT 76
8871: PPUSH
8872: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8876: LD_EXP 28
8880: PPUSH
8881: LD_STRING DKs-Hannibal-5
8883: PPUSH
8884: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8888: LD_EXP 23
8892: PUSH
8893: LD_INT 22
8895: PUSH
8896: LD_INT 2
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: LD_INT 34
8905: PUSH
8906: LD_INT 26
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PPUSH
8917: CALL_OW 69
8921: NOT
8922: AND
8923: IFFALSE 8961
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8925: LD_EXP 23
8929: PPUSH
8930: LD_STRING DKam-Hannibal-a-6
8932: PPUSH
8933: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8937: LD_EXP 23
8941: PPUSH
8942: LD_STRING DKam-Hannibal-a-7
8944: PPUSH
8945: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8949: LD_EXP 20
8953: PPUSH
8954: LD_STRING DG-Hannibal-a-8
8956: PPUSH
8957: CALL_OW 88
// end ; DialogueOff ;
8961: CALL_OW 7
// end ;
8965: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8966: LD_INT 225
8968: PPUSH
8969: CALL_OW 302
8973: PUSH
8974: LD_INT 200
8976: PPUSH
8977: CALL_OW 302
8981: AND
8982: PUSH
8983: LD_INT 12
8985: PPUSH
8986: LD_INT 21
8988: PUSH
8989: LD_INT 3
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PPUSH
8996: CALL_OW 70
9000: PUSH
9001: LD_INT 2
9003: GREATER
9004: AND
9005: PUSH
9006: LD_INT 13
9008: PPUSH
9009: LD_INT 22
9011: PUSH
9012: LD_INT 2
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PPUSH
9019: CALL_OW 70
9023: PUSH
9024: LD_INT 3
9026: GREATER
9027: AND
9028: IFFALSE 9041
9030: GO 9032
9032: DISABLE
// hannibalPath := true ;
9033: LD_ADDR_EXP 9
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
9041: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
9042: LD_EXP 9
9046: PUSH
9047: LD_INT 6
9049: PPUSH
9050: LD_INT 22
9052: PUSH
9053: LD_INT 2
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PPUSH
9060: CALL_OW 70
9064: AND
9065: IFFALSE 9410
9067: GO 9069
9069: DISABLE
9070: LD_INT 0
9072: PPUSH
9073: PPUSH
9074: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
9075: LD_ADDR_VAR 0 2
9079: PUSH
9080: LD_INT 6
9082: PPUSH
9083: LD_INT 22
9085: PUSH
9086: LD_INT 2
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 70
9097: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
9098: LD_ADDR_VAR 0 3
9102: PUSH
9103: LD_VAR 0 2
9107: PPUSH
9108: LD_INT 34
9110: PUSH
9111: LD_INT 26
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: PPUSH
9118: CALL_OW 72
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: ST_TO_ADDR
// DialogueOn ;
9127: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
9131: LD_EXP 19
9135: PPUSH
9136: LD_STRING DH-Cleverattack-1
9138: PPUSH
9139: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
9143: LD_EXP 19
9147: PPUSH
9148: LD_STRING DH-Cleverattack-2
9150: PPUSH
9151: CALL_OW 88
// if hasFlameThrower then
9155: LD_VAR 0 3
9159: IFFALSE 9187
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9161: LD_EXP 35
9165: PPUSH
9166: LD_STRING DB-Cleverattack-3
9168: PPUSH
9169: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9173: LD_EXP 19
9177: PPUSH
9178: LD_STRING DH-Cleverattack-4
9180: PPUSH
9181: CALL_OW 88
// end else
9185: GO 9211
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9187: LD_EXP 35
9191: PPUSH
9192: LD_STRING DB-Cleverattack-a-3
9194: PPUSH
9195: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9199: LD_EXP 19
9203: PPUSH
9204: LD_STRING DH-Cleverattack-a-4
9206: PPUSH
9207: CALL_OW 88
// end ; DialogueOff ;
9211: CALL_OW 7
// if not hasFlameThrower then
9215: LD_VAR 0 3
9219: NOT
9220: IFFALSE 9224
// exit ;
9222: GO 9410
// earlyEscape := true ;
9224: LD_ADDR_EXP 16
9228: PUSH
9229: LD_INT 1
9231: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9232: LD_INT 140
9234: PPUSH
9235: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9239: LD_ADDR_VAR 0 2
9243: PUSH
9244: LD_INT 22
9246: PUSH
9247: LD_INT 3
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 2
9256: PUSH
9257: LD_INT 25
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 25
9269: PUSH
9270: LD_INT 2
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 25
9279: PUSH
9280: LD_INT 4
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PPUSH
9297: CALL_OW 69
9301: PUSH
9302: LD_EXP 22
9306: PUSH
9307: LD_EXP 37
9311: PUSH
9312: LD_EXP 36
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: DIFF
9322: ST_TO_ADDR
// for i in tmp do
9323: LD_ADDR_VAR 0 1
9327: PUSH
9328: LD_VAR 0 2
9332: PUSH
9333: FOR_IN
9334: IFFALSE 9408
// begin if Prob ( 40 + 10 * Difficulty ) then
9336: LD_INT 40
9338: PUSH
9339: LD_INT 10
9341: PUSH
9342: LD_OWVAR 67
9346: MUL
9347: PLUS
9348: PPUSH
9349: CALL_OW 13
9353: IFFALSE 9357
// continue ;
9355: GO 9333
// SetTag ( i , tEscape ) ;
9357: LD_VAR 0 1
9361: PPUSH
9362: LD_EXP 18
9366: PPUSH
9367: CALL_OW 109
// if IsInUnit ( i ) then
9371: LD_VAR 0 1
9375: PPUSH
9376: CALL_OW 310
9380: IFFALSE 9391
// ComExitBuilding ( i ) ;
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9391: LD_VAR 0 1
9395: PPUSH
9396: LD_INT 92
9398: PPUSH
9399: LD_INT 177
9401: PPUSH
9402: CALL_OW 171
// end ;
9406: GO 9333
9408: POP
9409: POP
// end ;
9410: PPOPN 3
9412: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9413: LD_INT 9
9415: PPUSH
9416: LD_INT 2
9418: PUSH
9419: LD_INT 22
9421: PUSH
9422: LD_INT 3
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 22
9431: PUSH
9432: LD_INT 6
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: PPUSH
9444: CALL_OW 70
9448: IFFALSE 9546
9450: GO 9452
9452: DISABLE
9453: LD_INT 0
9455: PPUSH
// begin enable ;
9456: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9457: LD_ADDR_VAR 0 1
9461: PUSH
9462: LD_INT 9
9464: PPUSH
9465: LD_INT 2
9467: PUSH
9468: LD_INT 22
9470: PUSH
9471: LD_INT 3
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 22
9480: PUSH
9481: LD_INT 6
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 70
9497: PUSH
9498: FOR_IN
9499: IFFALSE 9544
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9501: LD_VAR 0 1
9505: PPUSH
9506: CALL_OW 110
9510: PUSH
9511: LD_EXP 18
9515: EQUAL
9516: PUSH
9517: LD_VAR 0 1
9521: PPUSH
9522: CALL_OW 255
9526: PUSH
9527: LD_INT 6
9529: EQUAL
9530: OR
9531: IFFALSE 9542
// RemoveUnit ( i ) ;
9533: LD_VAR 0 1
9537: PPUSH
9538: CALL_OW 64
9542: GO 9498
9544: POP
9545: POP
// end ;
9546: PPOPN 1
9548: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9549: LD_EXP 24
9553: PUSH
9554: LD_EXP 24
9558: PPUSH
9559: CALL_OW 256
9563: PUSH
9564: LD_INT 3
9566: LESS
9567: AND
9568: IFFALSE 9614
9570: GO 9572
9572: DISABLE
// begin DialogueOn ;
9573: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9577: LD_EXP 24
9581: PPUSH
9582: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9586: LD_EXP 24
9590: PPUSH
9591: LD_STRING DK-Kkilled-1
9593: PPUSH
9594: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9598: LD_EXP 19
9602: PPUSH
9603: LD_STRING DH-Kkilled-2
9605: PPUSH
9606: CALL_OW 88
// DialogueOff ;
9610: CALL_OW 7
// end ;
9614: END
// every 0 0$1 trigger kaiaKilledByRussian do
9615: LD_EXP 8
9619: IFFALSE 9636
9621: GO 9623
9623: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9624: LD_EXP 19
9628: PPUSH
9629: LD_STRING DH-Kkilled-3
9631: PPUSH
9632: CALL_OW 88
9636: END
// every 0 0$1 trigger tick >= 24 24$00 do
9637: LD_OWVAR 1
9641: PUSH
9642: LD_INT 50400
9644: GREATEREQUAL
9645: IFFALSE 9682
9647: GO 9649
9649: DISABLE
// begin DialogueOn ;
9650: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9654: LD_EXP 27
9658: PPUSH
9659: LD_STRING DShar-slow-1
9661: PPUSH
9662: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9666: LD_EXP 27
9670: PPUSH
9671: LD_STRING DShar-slow-2
9673: PPUSH
9674: CALL_OW 94
// DialogueOff ;
9678: CALL_OW 7
// end ;
9682: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9683: LD_OWVAR 1
9687: PUSH
9688: LD_INT 84000
9690: PUSH
9691: LD_INT 75600
9693: PUSH
9694: LD_INT 67200
9696: PUSH
9697: LD_INT 63000
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: LD_OWVAR 67
9710: ARRAY
9711: GREATEREQUAL
9712: IFFALSE 9756
9714: GO 9716
9716: DISABLE
// begin DialogueOn ;
9717: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9721: LD_EXP 27
9725: PPUSH
9726: LD_STRING DShar-fail-1
9728: PPUSH
9729: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9733: LD_EXP 27
9737: PPUSH
9738: LD_STRING DShar-fail-2
9740: PPUSH
9741: CALL_OW 94
// DialogueOff ;
9745: CALL_OW 7
// YouLost ( Time ) ;
9749: LD_STRING Time
9751: PPUSH
9752: CALL_OW 104
// end ;
9756: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9757: LD_INT 22
9759: PUSH
9760: LD_INT 3
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 2
9769: PUSH
9770: LD_INT 30
9772: PUSH
9773: LD_INT 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 30
9782: PUSH
9783: LD_INT 0
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 69
9803: PUSH
9804: LD_INT 0
9806: EQUAL
9807: IFFALSE 10404
9809: GO 9811
9811: DISABLE
9812: LD_INT 0
9814: PPUSH
// begin if ( tick + gameTime ) <= 55 55$00 then
9815: LD_OWVAR 1
9819: PUSH
9820: LD_EXP 5
9824: PLUS
9825: PUSH
9826: LD_INT 115500
9828: LESSEQUAL
9829: IFFALSE 9838
// SetAchievement ( ACH_HSPEED_4 ) ;
9831: LD_STRING ACH_HSPEED_4
9833: PPUSH
9834: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9838: LD_OWVAR 1
9842: PUSH
9843: LD_EXP 5
9847: PLUS
9848: PUSH
9849: LD_INT 178500
9851: PUSH
9852: LD_INT 157500
9854: PUSH
9855: LD_INT 136500
9857: PUSH
9858: LD_INT 126000
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: PUSH
9867: LD_OWVAR 67
9871: ARRAY
9872: LESSEQUAL
9873: IFFALSE 9887
// AddMedal ( med1 , 1 ) else
9875: LD_STRING med1
9877: PPUSH
9878: LD_INT 1
9880: PPUSH
9881: CALL_OW 101
9885: GO 9898
// AddMedal ( med1 , - 1 ) ;
9887: LD_STRING med1
9889: PPUSH
9890: LD_INT 1
9892: NEG
9893: PPUSH
9894: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9898: LD_EXP 7
9902: PUSH
9903: LD_INT 3
9905: GREATEREQUAL
9906: PUSH
9907: LD_EXP 11
9911: MUL
9912: PUSH
9913: LD_EXP 9
9917: MUL
9918: PUSH
9919: LD_EXP 6
9923: PUSH
9924: LD_INT 6
9926: PUSH
9927: LD_INT 5
9929: PUSH
9930: LD_INT 4
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: PUSH
9942: LD_OWVAR 67
9946: ARRAY
9947: LESS
9948: MUL
9949: IFFALSE 9963
// AddMedal ( med2 , 1 ) else
9951: LD_STRING med2
9953: PPUSH
9954: LD_INT 1
9956: PPUSH
9957: CALL_OW 101
9961: GO 10037
// if flamethrowers < 3 then
9963: LD_EXP 7
9967: PUSH
9968: LD_INT 3
9970: LESS
9971: IFFALSE 9986
// AddMedal ( med2 , - 1 ) else
9973: LD_STRING med2
9975: PPUSH
9976: LD_INT 1
9978: NEG
9979: PPUSH
9980: CALL_OW 101
9984: GO 10037
// if not baseHill then
9986: LD_EXP 11
9990: NOT
9991: IFFALSE 10006
// AddMedal ( med2 , - 2 ) else
9993: LD_STRING med2
9995: PPUSH
9996: LD_INT 2
9998: NEG
9999: PPUSH
10000: CALL_OW 101
10004: GO 10037
// if not hannibalPath then
10006: LD_EXP 9
10010: NOT
10011: IFFALSE 10026
// AddMedal ( med2 , - 3 ) else
10013: LD_STRING med2
10015: PPUSH
10016: LD_INT 3
10018: NEG
10019: PPUSH
10020: CALL_OW 101
10024: GO 10037
// AddMedal ( med3 , - 2 ) ;
10026: LD_STRING med3
10028: PPUSH
10029: LD_INT 2
10031: NEG
10032: PPUSH
10033: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
10037: LD_EXP 14
10041: PPUSH
10042: LD_STRING 04_2_GaidarKilled
10044: PPUSH
10045: CALL_OW 39
// if gaidarKilled then
10049: LD_EXP 14
10053: IFFALSE 10067
// AddMedal ( med3 , 1 ) else
10055: LD_STRING med3
10057: PPUSH
10058: LD_INT 1
10060: PPUSH
10061: CALL_OW 101
10065: GO 10078
// AddMedal ( med3 , - 1 ) ;
10067: LD_STRING med3
10069: PPUSH
10070: LD_INT 1
10072: NEG
10073: PPUSH
10074: CALL_OW 101
// GiveMedals ( MAIN ) ;
10078: LD_STRING MAIN
10080: PPUSH
10081: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
10085: LD_INT 22
10087: PUSH
10088: LD_INT 2
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 3
10097: PUSH
10098: LD_INT 23
10100: PUSH
10101: LD_INT 0
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: PPUSH
10121: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
10125: LD_EXP 19
10129: PPUSH
10130: LD_STRING 04_2_Heike
10132: PPUSH
10133: CALL_OW 38
// if Aviradze then
10137: LD_EXP 29
10141: IFFALSE 10155
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
10143: LD_EXP 29
10147: PPUSH
10148: LD_STRING 04_2_Aviradze
10150: PPUSH
10151: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10155: LD_EXP 22
10159: PUSH
10160: LD_EXP 22
10164: PPUSH
10165: CALL_OW 255
10169: PUSH
10170: LD_INT 2
10172: EQUAL
10173: AND
10174: IFFALSE 10204
// begin if ibrahimOnRuSide then
10176: LD_EXP 3
10180: IFFALSE 10192
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10182: LD_INT 1
10184: PPUSH
10185: LD_STRING 04_2_IbrahimJoined
10187: PPUSH
10188: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10192: LD_EXP 22
10196: PPUSH
10197: LD_STRING 04_2_Ibrahim
10199: PPUSH
10200: CALL_OW 38
// end ; if Kamil then
10204: LD_EXP 23
10208: IFFALSE 10222
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10210: LD_EXP 23
10214: PPUSH
10215: LD_STRING 04_2_Kamil
10217: PPUSH
10218: CALL_OW 38
// if Sophia then
10222: LD_EXP 25
10226: IFFALSE 10240
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10228: LD_EXP 25
10232: PPUSH
10233: LD_STRING 04_2_Sophia
10235: PPUSH
10236: CALL_OW 38
// if Kaia then
10240: LD_EXP 24
10244: IFFALSE 10258
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10246: LD_EXP 24
10250: PPUSH
10251: LD_STRING 04_2_Kaia
10253: PPUSH
10254: CALL_OW 38
// if Givi then
10258: LD_EXP 20
10262: IFFALSE 10276
// SaveCharacters ( Givi , 04_2_Givi ) ;
10264: LD_EXP 20
10268: PPUSH
10269: LD_STRING 04_2_Givi
10271: PPUSH
10272: CALL_OW 38
// if Mike then
10276: LD_EXP 21
10280: IFFALSE 10294
// SaveCharacters ( Mike , 04_2_Mike ) ;
10282: LD_EXP 21
10286: PPUSH
10287: LD_STRING 04_2_Mike
10289: PPUSH
10290: CALL_OW 38
// if Markov then
10294: LD_EXP 26
10298: IFFALSE 10312
// SaveCharacters ( Markov , 04_2_Markov ) ;
10300: LD_EXP 26
10304: PPUSH
10305: LD_STRING 04_2_Markov
10307: PPUSH
10308: CALL_OW 38
// if Kurt then
10312: LD_EXP 28
10316: IFFALSE 10330
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10318: LD_EXP 28
10322: PPUSH
10323: LD_STRING 04_2_Kurt
10325: PPUSH
10326: CALL_OW 38
// if heikeSecondSquad then
10330: LD_EXP 30
10334: IFFALSE 10348
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10336: LD_EXP 30
10340: PPUSH
10341: LD_STRING 04_2_others
10343: PPUSH
10344: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10348: LD_ADDR_VAR 0 1
10352: PUSH
10353: LD_INT 22
10355: PUSH
10356: LD_INT 2
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 23
10365: PUSH
10366: LD_INT 0
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PPUSH
10377: CALL_OW 69
10381: ST_TO_ADDR
// if tmp then
10382: LD_VAR 0 1
10386: IFFALSE 10400
// SaveCharacters ( tmp , 04_2_apes ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_STRING 04_2_apes
10395: PPUSH
10396: CALL_OW 38
// YouWin ;
10400: CALL_OW 103
// end ; end_of_file
10404: PPOPN 1
10406: END
// export globalGameSaveCounter ; every 0 0$1 do
10407: GO 10409
10409: DISABLE
// begin enable ;
10410: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10411: LD_STRING updateTimer(
10413: PUSH
10414: LD_OWVAR 1
10418: STR
10419: PUSH
10420: LD_STRING );
10422: STR
10423: PPUSH
10424: CALL_OW 559
// end ;
10428: END
// every 0 0$1 do
10429: GO 10431
10431: DISABLE
// begin globalGameSaveCounter := 0 ;
10432: LD_ADDR_EXP 44
10436: PUSH
10437: LD_INT 0
10439: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10440: LD_STRING setGameSaveCounter(0)
10442: PPUSH
10443: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10447: LD_STRING initStreamRollete();
10449: PPUSH
10450: CALL_OW 559
// InitStreamMode ;
10454: CALL 11780 0 0
// DefineStreamItems ( false ) ;
10458: LD_INT 0
10460: PPUSH
10461: CALL 12244 0 1
// end ;
10465: END
// export function SOS_MapStart ( ) ; begin
10466: LD_INT 0
10468: PPUSH
// if streamModeActive then
10469: LD_EXP 45
10473: IFFALSE 10482
// DefineStreamItems ( true ) ;
10475: LD_INT 1
10477: PPUSH
10478: CALL 12244 0 1
// UpdateLuaVariables ( ) ;
10482: CALL 10499 0 0
// UpdateFactoryWaypoints ( ) ;
10486: CALL 25113 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10490: CALL 25370 0 0
// end ;
10494: LD_VAR 0 1
10498: RET
// function UpdateLuaVariables ( ) ; begin
10499: LD_INT 0
10501: PPUSH
// if globalGameSaveCounter then
10502: LD_EXP 44
10506: IFFALSE 10540
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10508: LD_ADDR_EXP 44
10512: PUSH
10513: LD_EXP 44
10517: PPUSH
10518: CALL 70163 0 1
10522: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10523: LD_STRING setGameSaveCounter(
10525: PUSH
10526: LD_EXP 44
10530: STR
10531: PUSH
10532: LD_STRING )
10534: STR
10535: PPUSH
10536: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10540: LD_STRING setGameDifficulty(
10542: PUSH
10543: LD_OWVAR 67
10547: STR
10548: PUSH
10549: LD_STRING )
10551: STR
10552: PPUSH
10553: CALL_OW 559
// end ;
10557: LD_VAR 0 1
10561: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10562: LD_INT 0
10564: PPUSH
// if p2 = stream_mode then
10565: LD_VAR 0 2
10569: PUSH
10570: LD_INT 100
10572: EQUAL
10573: IFFALSE 11576
// begin if not StreamModeActive then
10575: LD_EXP 45
10579: NOT
10580: IFFALSE 10590
// StreamModeActive := true ;
10582: LD_ADDR_EXP 45
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// if p3 = 0 then
10590: LD_VAR 0 3
10594: PUSH
10595: LD_INT 0
10597: EQUAL
10598: IFFALSE 10604
// InitStreamMode ;
10600: CALL 11780 0 0
// if p3 = 1 then
10604: LD_VAR 0 3
10608: PUSH
10609: LD_INT 1
10611: EQUAL
10612: IFFALSE 10622
// sRocket := true ;
10614: LD_ADDR_EXP 50
10618: PUSH
10619: LD_INT 1
10621: ST_TO_ADDR
// if p3 = 2 then
10622: LD_VAR 0 3
10626: PUSH
10627: LD_INT 2
10629: EQUAL
10630: IFFALSE 10640
// sSpeed := true ;
10632: LD_ADDR_EXP 49
10636: PUSH
10637: LD_INT 1
10639: ST_TO_ADDR
// if p3 = 3 then
10640: LD_VAR 0 3
10644: PUSH
10645: LD_INT 3
10647: EQUAL
10648: IFFALSE 10658
// sEngine := true ;
10650: LD_ADDR_EXP 51
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// if p3 = 4 then
10658: LD_VAR 0 3
10662: PUSH
10663: LD_INT 4
10665: EQUAL
10666: IFFALSE 10676
// sSpec := true ;
10668: LD_ADDR_EXP 48
10672: PUSH
10673: LD_INT 1
10675: ST_TO_ADDR
// if p3 = 5 then
10676: LD_VAR 0 3
10680: PUSH
10681: LD_INT 5
10683: EQUAL
10684: IFFALSE 10694
// sLevel := true ;
10686: LD_ADDR_EXP 52
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// if p3 = 6 then
10694: LD_VAR 0 3
10698: PUSH
10699: LD_INT 6
10701: EQUAL
10702: IFFALSE 10712
// sArmoury := true ;
10704: LD_ADDR_EXP 53
10708: PUSH
10709: LD_INT 1
10711: ST_TO_ADDR
// if p3 = 7 then
10712: LD_VAR 0 3
10716: PUSH
10717: LD_INT 7
10719: EQUAL
10720: IFFALSE 10730
// sRadar := true ;
10722: LD_ADDR_EXP 54
10726: PUSH
10727: LD_INT 1
10729: ST_TO_ADDR
// if p3 = 8 then
10730: LD_VAR 0 3
10734: PUSH
10735: LD_INT 8
10737: EQUAL
10738: IFFALSE 10748
// sBunker := true ;
10740: LD_ADDR_EXP 55
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// if p3 = 9 then
10748: LD_VAR 0 3
10752: PUSH
10753: LD_INT 9
10755: EQUAL
10756: IFFALSE 10766
// sHack := true ;
10758: LD_ADDR_EXP 56
10762: PUSH
10763: LD_INT 1
10765: ST_TO_ADDR
// if p3 = 10 then
10766: LD_VAR 0 3
10770: PUSH
10771: LD_INT 10
10773: EQUAL
10774: IFFALSE 10784
// sFire := true ;
10776: LD_ADDR_EXP 57
10780: PUSH
10781: LD_INT 1
10783: ST_TO_ADDR
// if p3 = 11 then
10784: LD_VAR 0 3
10788: PUSH
10789: LD_INT 11
10791: EQUAL
10792: IFFALSE 10802
// sRefresh := true ;
10794: LD_ADDR_EXP 58
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// if p3 = 12 then
10802: LD_VAR 0 3
10806: PUSH
10807: LD_INT 12
10809: EQUAL
10810: IFFALSE 10820
// sExp := true ;
10812: LD_ADDR_EXP 59
10816: PUSH
10817: LD_INT 1
10819: ST_TO_ADDR
// if p3 = 13 then
10820: LD_VAR 0 3
10824: PUSH
10825: LD_INT 13
10827: EQUAL
10828: IFFALSE 10838
// sDepot := true ;
10830: LD_ADDR_EXP 60
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// if p3 = 14 then
10838: LD_VAR 0 3
10842: PUSH
10843: LD_INT 14
10845: EQUAL
10846: IFFALSE 10856
// sFlag := true ;
10848: LD_ADDR_EXP 61
10852: PUSH
10853: LD_INT 1
10855: ST_TO_ADDR
// if p3 = 15 then
10856: LD_VAR 0 3
10860: PUSH
10861: LD_INT 15
10863: EQUAL
10864: IFFALSE 10874
// sKamikadze := true ;
10866: LD_ADDR_EXP 69
10870: PUSH
10871: LD_INT 1
10873: ST_TO_ADDR
// if p3 = 16 then
10874: LD_VAR 0 3
10878: PUSH
10879: LD_INT 16
10881: EQUAL
10882: IFFALSE 10892
// sTroll := true ;
10884: LD_ADDR_EXP 70
10888: PUSH
10889: LD_INT 1
10891: ST_TO_ADDR
// if p3 = 17 then
10892: LD_VAR 0 3
10896: PUSH
10897: LD_INT 17
10899: EQUAL
10900: IFFALSE 10910
// sSlow := true ;
10902: LD_ADDR_EXP 71
10906: PUSH
10907: LD_INT 1
10909: ST_TO_ADDR
// if p3 = 18 then
10910: LD_VAR 0 3
10914: PUSH
10915: LD_INT 18
10917: EQUAL
10918: IFFALSE 10928
// sLack := true ;
10920: LD_ADDR_EXP 72
10924: PUSH
10925: LD_INT 1
10927: ST_TO_ADDR
// if p3 = 19 then
10928: LD_VAR 0 3
10932: PUSH
10933: LD_INT 19
10935: EQUAL
10936: IFFALSE 10946
// sTank := true ;
10938: LD_ADDR_EXP 74
10942: PUSH
10943: LD_INT 1
10945: ST_TO_ADDR
// if p3 = 20 then
10946: LD_VAR 0 3
10950: PUSH
10951: LD_INT 20
10953: EQUAL
10954: IFFALSE 10964
// sRemote := true ;
10956: LD_ADDR_EXP 75
10960: PUSH
10961: LD_INT 1
10963: ST_TO_ADDR
// if p3 = 21 then
10964: LD_VAR 0 3
10968: PUSH
10969: LD_INT 21
10971: EQUAL
10972: IFFALSE 10982
// sPowell := true ;
10974: LD_ADDR_EXP 76
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// if p3 = 22 then
10982: LD_VAR 0 3
10986: PUSH
10987: LD_INT 22
10989: EQUAL
10990: IFFALSE 11000
// sTeleport := true ;
10992: LD_ADDR_EXP 79
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// if p3 = 23 then
11000: LD_VAR 0 3
11004: PUSH
11005: LD_INT 23
11007: EQUAL
11008: IFFALSE 11018
// sOilTower := true ;
11010: LD_ADDR_EXP 81
11014: PUSH
11015: LD_INT 1
11017: ST_TO_ADDR
// if p3 = 24 then
11018: LD_VAR 0 3
11022: PUSH
11023: LD_INT 24
11025: EQUAL
11026: IFFALSE 11036
// sShovel := true ;
11028: LD_ADDR_EXP 82
11032: PUSH
11033: LD_INT 1
11035: ST_TO_ADDR
// if p3 = 25 then
11036: LD_VAR 0 3
11040: PUSH
11041: LD_INT 25
11043: EQUAL
11044: IFFALSE 11054
// sSheik := true ;
11046: LD_ADDR_EXP 83
11050: PUSH
11051: LD_INT 1
11053: ST_TO_ADDR
// if p3 = 26 then
11054: LD_VAR 0 3
11058: PUSH
11059: LD_INT 26
11061: EQUAL
11062: IFFALSE 11072
// sEarthquake := true ;
11064: LD_ADDR_EXP 85
11068: PUSH
11069: LD_INT 1
11071: ST_TO_ADDR
// if p3 = 27 then
11072: LD_VAR 0 3
11076: PUSH
11077: LD_INT 27
11079: EQUAL
11080: IFFALSE 11090
// sAI := true ;
11082: LD_ADDR_EXP 86
11086: PUSH
11087: LD_INT 1
11089: ST_TO_ADDR
// if p3 = 28 then
11090: LD_VAR 0 3
11094: PUSH
11095: LD_INT 28
11097: EQUAL
11098: IFFALSE 11108
// sCargo := true ;
11100: LD_ADDR_EXP 89
11104: PUSH
11105: LD_INT 1
11107: ST_TO_ADDR
// if p3 = 29 then
11108: LD_VAR 0 3
11112: PUSH
11113: LD_INT 29
11115: EQUAL
11116: IFFALSE 11126
// sDLaser := true ;
11118: LD_ADDR_EXP 90
11122: PUSH
11123: LD_INT 1
11125: ST_TO_ADDR
// if p3 = 30 then
11126: LD_VAR 0 3
11130: PUSH
11131: LD_INT 30
11133: EQUAL
11134: IFFALSE 11144
// sExchange := true ;
11136: LD_ADDR_EXP 91
11140: PUSH
11141: LD_INT 1
11143: ST_TO_ADDR
// if p3 = 31 then
11144: LD_VAR 0 3
11148: PUSH
11149: LD_INT 31
11151: EQUAL
11152: IFFALSE 11162
// sFac := true ;
11154: LD_ADDR_EXP 92
11158: PUSH
11159: LD_INT 1
11161: ST_TO_ADDR
// if p3 = 32 then
11162: LD_VAR 0 3
11166: PUSH
11167: LD_INT 32
11169: EQUAL
11170: IFFALSE 11180
// sPower := true ;
11172: LD_ADDR_EXP 93
11176: PUSH
11177: LD_INT 1
11179: ST_TO_ADDR
// if p3 = 33 then
11180: LD_VAR 0 3
11184: PUSH
11185: LD_INT 33
11187: EQUAL
11188: IFFALSE 11198
// sRandom := true ;
11190: LD_ADDR_EXP 94
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// if p3 = 34 then
11198: LD_VAR 0 3
11202: PUSH
11203: LD_INT 34
11205: EQUAL
11206: IFFALSE 11216
// sShield := true ;
11208: LD_ADDR_EXP 95
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// if p3 = 35 then
11216: LD_VAR 0 3
11220: PUSH
11221: LD_INT 35
11223: EQUAL
11224: IFFALSE 11234
// sTime := true ;
11226: LD_ADDR_EXP 96
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// if p3 = 36 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_INT 36
11241: EQUAL
11242: IFFALSE 11252
// sTools := true ;
11244: LD_ADDR_EXP 97
11248: PUSH
11249: LD_INT 1
11251: ST_TO_ADDR
// if p3 = 101 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 101
11259: EQUAL
11260: IFFALSE 11270
// sSold := true ;
11262: LD_ADDR_EXP 62
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// if p3 = 102 then
11270: LD_VAR 0 3
11274: PUSH
11275: LD_INT 102
11277: EQUAL
11278: IFFALSE 11288
// sDiff := true ;
11280: LD_ADDR_EXP 63
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// if p3 = 103 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 103
11295: EQUAL
11296: IFFALSE 11306
// sFog := true ;
11298: LD_ADDR_EXP 66
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 104 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 104
11313: EQUAL
11314: IFFALSE 11324
// sReset := true ;
11316: LD_ADDR_EXP 67
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 105 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 105
11331: EQUAL
11332: IFFALSE 11342
// sSun := true ;
11334: LD_ADDR_EXP 68
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 106 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 106
11349: EQUAL
11350: IFFALSE 11360
// sTiger := true ;
11352: LD_ADDR_EXP 64
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 107 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 107
11367: EQUAL
11368: IFFALSE 11378
// sBomb := true ;
11370: LD_ADDR_EXP 65
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 108 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 108
11385: EQUAL
11386: IFFALSE 11396
// sWound := true ;
11388: LD_ADDR_EXP 73
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 109 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 109
11403: EQUAL
11404: IFFALSE 11414
// sBetray := true ;
11406: LD_ADDR_EXP 77
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 110 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 110
11421: EQUAL
11422: IFFALSE 11432
// sContamin := true ;
11424: LD_ADDR_EXP 78
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 111 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 111
11439: EQUAL
11440: IFFALSE 11450
// sOil := true ;
11442: LD_ADDR_EXP 80
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 112 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 112
11457: EQUAL
11458: IFFALSE 11468
// sStu := true ;
11460: LD_ADDR_EXP 84
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 113 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 113
11475: EQUAL
11476: IFFALSE 11486
// sBazooka := true ;
11478: LD_ADDR_EXP 87
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// if p3 = 114 then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_INT 114
11493: EQUAL
11494: IFFALSE 11504
// sMortar := true ;
11496: LD_ADDR_EXP 88
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// if p3 = 115 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 115
11511: EQUAL
11512: IFFALSE 11522
// sRanger := true ;
11514: LD_ADDR_EXP 98
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// if p3 = 116 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 116
11529: EQUAL
11530: IFFALSE 11540
// sComputer := true ;
11532: LD_ADDR_EXP 99
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// if p3 = 117 then
11540: LD_VAR 0 3
11544: PUSH
11545: LD_INT 117
11547: EQUAL
11548: IFFALSE 11558
// s30 := true ;
11550: LD_ADDR_EXP 100
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// if p3 = 118 then
11558: LD_VAR 0 3
11562: PUSH
11563: LD_INT 118
11565: EQUAL
11566: IFFALSE 11576
// s60 := true ;
11568: LD_ADDR_EXP 101
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// end ; if p2 = hack_mode then
11576: LD_VAR 0 2
11580: PUSH
11581: LD_INT 101
11583: EQUAL
11584: IFFALSE 11712
// begin case p3 of 1 :
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 1
11593: DOUBLE
11594: EQUAL
11595: IFTRUE 11599
11597: GO 11606
11599: POP
// hHackUnlimitedResources ; 2 :
11600: CALL 23859 0 0
11604: GO 11712
11606: LD_INT 2
11608: DOUBLE
11609: EQUAL
11610: IFTRUE 11614
11612: GO 11621
11614: POP
// hHackSetLevel10 ; 3 :
11615: CALL 23992 0 0
11619: GO 11712
11621: LD_INT 3
11623: DOUBLE
11624: EQUAL
11625: IFTRUE 11629
11627: GO 11636
11629: POP
// hHackSetLevel10YourUnits ; 4 :
11630: CALL 24077 0 0
11634: GO 11712
11636: LD_INT 4
11638: DOUBLE
11639: EQUAL
11640: IFTRUE 11644
11642: GO 11651
11644: POP
// hHackInvincible ; 5 :
11645: CALL 24525 0 0
11649: GO 11712
11651: LD_INT 5
11653: DOUBLE
11654: EQUAL
11655: IFTRUE 11659
11657: GO 11666
11659: POP
// hHackInvisible ; 6 :
11660: CALL 24636 0 0
11664: GO 11712
11666: LD_INT 6
11668: DOUBLE
11669: EQUAL
11670: IFTRUE 11674
11672: GO 11681
11674: POP
// hHackChangeYourSide ; 7 :
11675: CALL 24693 0 0
11679: GO 11712
11681: LD_INT 7
11683: DOUBLE
11684: EQUAL
11685: IFTRUE 11689
11687: GO 11696
11689: POP
// hHackChangeUnitSide ; 8 :
11690: CALL 24735 0 0
11694: GO 11712
11696: LD_INT 8
11698: DOUBLE
11699: EQUAL
11700: IFTRUE 11704
11702: GO 11711
11704: POP
// hHackFog ; end ;
11705: CALL 24836 0 0
11709: GO 11712
11711: POP
// end ; if p2 = game_save_mode then
11712: LD_VAR 0 2
11716: PUSH
11717: LD_INT 102
11719: EQUAL
11720: IFFALSE 11775
// begin if p3 = 1 then
11722: LD_VAR 0 3
11726: PUSH
11727: LD_INT 1
11729: EQUAL
11730: IFFALSE 11742
// globalGameSaveCounter := p4 ;
11732: LD_ADDR_EXP 44
11736: PUSH
11737: LD_VAR 0 4
11741: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11742: LD_VAR 0 3
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: PUSH
11751: LD_EXP 44
11755: AND
11756: IFFALSE 11775
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11758: LD_STRING setGameSaveCounter(
11760: PUSH
11761: LD_EXP 44
11765: STR
11766: PUSH
11767: LD_STRING )
11769: STR
11770: PPUSH
11771: CALL_OW 559
// end ; end ;
11775: LD_VAR 0 7
11779: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11780: LD_INT 0
11782: PPUSH
// streamModeActive := false ;
11783: LD_ADDR_EXP 45
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// normalCounter := 36 ;
11791: LD_ADDR_EXP 46
11795: PUSH
11796: LD_INT 36
11798: ST_TO_ADDR
// hardcoreCounter := 18 ;
11799: LD_ADDR_EXP 47
11803: PUSH
11804: LD_INT 18
11806: ST_TO_ADDR
// sRocket := false ;
11807: LD_ADDR_EXP 50
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// sSpeed := false ;
11815: LD_ADDR_EXP 49
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// sEngine := false ;
11823: LD_ADDR_EXP 51
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// sSpec := false ;
11831: LD_ADDR_EXP 48
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// sLevel := false ;
11839: LD_ADDR_EXP 52
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// sArmoury := false ;
11847: LD_ADDR_EXP 53
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// sRadar := false ;
11855: LD_ADDR_EXP 54
11859: PUSH
11860: LD_INT 0
11862: ST_TO_ADDR
// sBunker := false ;
11863: LD_ADDR_EXP 55
11867: PUSH
11868: LD_INT 0
11870: ST_TO_ADDR
// sHack := false ;
11871: LD_ADDR_EXP 56
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// sFire := false ;
11879: LD_ADDR_EXP 57
11883: PUSH
11884: LD_INT 0
11886: ST_TO_ADDR
// sRefresh := false ;
11887: LD_ADDR_EXP 58
11891: PUSH
11892: LD_INT 0
11894: ST_TO_ADDR
// sExp := false ;
11895: LD_ADDR_EXP 59
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// sDepot := false ;
11903: LD_ADDR_EXP 60
11907: PUSH
11908: LD_INT 0
11910: ST_TO_ADDR
// sFlag := false ;
11911: LD_ADDR_EXP 61
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// sKamikadze := false ;
11919: LD_ADDR_EXP 69
11923: PUSH
11924: LD_INT 0
11926: ST_TO_ADDR
// sTroll := false ;
11927: LD_ADDR_EXP 70
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// sSlow := false ;
11935: LD_ADDR_EXP 71
11939: PUSH
11940: LD_INT 0
11942: ST_TO_ADDR
// sLack := false ;
11943: LD_ADDR_EXP 72
11947: PUSH
11948: LD_INT 0
11950: ST_TO_ADDR
// sTank := false ;
11951: LD_ADDR_EXP 74
11955: PUSH
11956: LD_INT 0
11958: ST_TO_ADDR
// sRemote := false ;
11959: LD_ADDR_EXP 75
11963: PUSH
11964: LD_INT 0
11966: ST_TO_ADDR
// sPowell := false ;
11967: LD_ADDR_EXP 76
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// sTeleport := false ;
11975: LD_ADDR_EXP 79
11979: PUSH
11980: LD_INT 0
11982: ST_TO_ADDR
// sOilTower := false ;
11983: LD_ADDR_EXP 81
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// sShovel := false ;
11991: LD_ADDR_EXP 82
11995: PUSH
11996: LD_INT 0
11998: ST_TO_ADDR
// sSheik := false ;
11999: LD_ADDR_EXP 83
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// sEarthquake := false ;
12007: LD_ADDR_EXP 85
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// sAI := false ;
12015: LD_ADDR_EXP 86
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// sCargo := false ;
12023: LD_ADDR_EXP 89
12027: PUSH
12028: LD_INT 0
12030: ST_TO_ADDR
// sDLaser := false ;
12031: LD_ADDR_EXP 90
12035: PUSH
12036: LD_INT 0
12038: ST_TO_ADDR
// sExchange := false ;
12039: LD_ADDR_EXP 91
12043: PUSH
12044: LD_INT 0
12046: ST_TO_ADDR
// sFac := false ;
12047: LD_ADDR_EXP 92
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// sPower := false ;
12055: LD_ADDR_EXP 93
12059: PUSH
12060: LD_INT 0
12062: ST_TO_ADDR
// sRandom := false ;
12063: LD_ADDR_EXP 94
12067: PUSH
12068: LD_INT 0
12070: ST_TO_ADDR
// sShield := false ;
12071: LD_ADDR_EXP 95
12075: PUSH
12076: LD_INT 0
12078: ST_TO_ADDR
// sTime := false ;
12079: LD_ADDR_EXP 96
12083: PUSH
12084: LD_INT 0
12086: ST_TO_ADDR
// sTools := false ;
12087: LD_ADDR_EXP 97
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// sSold := false ;
12095: LD_ADDR_EXP 62
12099: PUSH
12100: LD_INT 0
12102: ST_TO_ADDR
// sDiff := false ;
12103: LD_ADDR_EXP 63
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// sFog := false ;
12111: LD_ADDR_EXP 66
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// sReset := false ;
12119: LD_ADDR_EXP 67
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// sSun := false ;
12127: LD_ADDR_EXP 68
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// sTiger := false ;
12135: LD_ADDR_EXP 64
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// sBomb := false ;
12143: LD_ADDR_EXP 65
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// sWound := false ;
12151: LD_ADDR_EXP 73
12155: PUSH
12156: LD_INT 0
12158: ST_TO_ADDR
// sBetray := false ;
12159: LD_ADDR_EXP 77
12163: PUSH
12164: LD_INT 0
12166: ST_TO_ADDR
// sContamin := false ;
12167: LD_ADDR_EXP 78
12171: PUSH
12172: LD_INT 0
12174: ST_TO_ADDR
// sOil := false ;
12175: LD_ADDR_EXP 80
12179: PUSH
12180: LD_INT 0
12182: ST_TO_ADDR
// sStu := false ;
12183: LD_ADDR_EXP 84
12187: PUSH
12188: LD_INT 0
12190: ST_TO_ADDR
// sBazooka := false ;
12191: LD_ADDR_EXP 87
12195: PUSH
12196: LD_INT 0
12198: ST_TO_ADDR
// sMortar := false ;
12199: LD_ADDR_EXP 88
12203: PUSH
12204: LD_INT 0
12206: ST_TO_ADDR
// sRanger := false ;
12207: LD_ADDR_EXP 98
12211: PUSH
12212: LD_INT 0
12214: ST_TO_ADDR
// sComputer := false ;
12215: LD_ADDR_EXP 99
12219: PUSH
12220: LD_INT 0
12222: ST_TO_ADDR
// s30 := false ;
12223: LD_ADDR_EXP 100
12227: PUSH
12228: LD_INT 0
12230: ST_TO_ADDR
// s60 := false ;
12231: LD_ADDR_EXP 101
12235: PUSH
12236: LD_INT 0
12238: ST_TO_ADDR
// end ;
12239: LD_VAR 0 1
12243: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12244: LD_INT 0
12246: PPUSH
12247: PPUSH
12248: PPUSH
12249: PPUSH
12250: PPUSH
12251: PPUSH
12252: PPUSH
// result := [ ] ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: EMPTY
12259: ST_TO_ADDR
// if campaign_id = 1 then
12260: LD_OWVAR 69
12264: PUSH
12265: LD_INT 1
12267: EQUAL
12268: IFFALSE 15434
// begin case mission_number of 1 :
12270: LD_OWVAR 70
12274: PUSH
12275: LD_INT 1
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12359
12283: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: LD_INT 2
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: LD_INT 11
12297: PUSH
12298: LD_INT 12
12300: PUSH
12301: LD_INT 15
12303: PUSH
12304: LD_INT 16
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: LD_INT 23
12312: PUSH
12313: LD_INT 26
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 101
12329: PUSH
12330: LD_INT 102
12332: PUSH
12333: LD_INT 106
12335: PUSH
12336: LD_INT 116
12338: PUSH
12339: LD_INT 117
12341: PUSH
12342: LD_INT 118
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: ST_TO_ADDR
12357: GO 15432
12359: LD_INT 2
12361: DOUBLE
12362: EQUAL
12363: IFTRUE 12367
12365: GO 12451
12367: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12368: LD_ADDR_VAR 0 2
12372: PUSH
12373: LD_INT 2
12375: PUSH
12376: LD_INT 4
12378: PUSH
12379: LD_INT 11
12381: PUSH
12382: LD_INT 12
12384: PUSH
12385: LD_INT 15
12387: PUSH
12388: LD_INT 16
12390: PUSH
12391: LD_INT 22
12393: PUSH
12394: LD_INT 23
12396: PUSH
12397: LD_INT 26
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 101
12413: PUSH
12414: LD_INT 102
12416: PUSH
12417: LD_INT 105
12419: PUSH
12420: LD_INT 106
12422: PUSH
12423: LD_INT 108
12425: PUSH
12426: LD_INT 116
12428: PUSH
12429: LD_INT 117
12431: PUSH
12432: LD_INT 118
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: ST_TO_ADDR
12449: GO 15432
12451: LD_INT 3
12453: DOUBLE
12454: EQUAL
12455: IFTRUE 12459
12457: GO 12547
12459: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12460: LD_ADDR_VAR 0 2
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: LD_INT 4
12470: PUSH
12471: LD_INT 5
12473: PUSH
12474: LD_INT 11
12476: PUSH
12477: LD_INT 12
12479: PUSH
12480: LD_INT 15
12482: PUSH
12483: LD_INT 16
12485: PUSH
12486: LD_INT 22
12488: PUSH
12489: LD_INT 26
12491: PUSH
12492: LD_INT 36
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 101
12509: PUSH
12510: LD_INT 102
12512: PUSH
12513: LD_INT 105
12515: PUSH
12516: LD_INT 106
12518: PUSH
12519: LD_INT 108
12521: PUSH
12522: LD_INT 116
12524: PUSH
12525: LD_INT 117
12527: PUSH
12528: LD_INT 118
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: ST_TO_ADDR
12545: GO 15432
12547: LD_INT 4
12549: DOUBLE
12550: EQUAL
12551: IFTRUE 12555
12553: GO 12651
12555: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12556: LD_ADDR_VAR 0 2
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: LD_INT 4
12566: PUSH
12567: LD_INT 5
12569: PUSH
12570: LD_INT 8
12572: PUSH
12573: LD_INT 11
12575: PUSH
12576: LD_INT 12
12578: PUSH
12579: LD_INT 15
12581: PUSH
12582: LD_INT 16
12584: PUSH
12585: LD_INT 22
12587: PUSH
12588: LD_INT 23
12590: PUSH
12591: LD_INT 26
12593: PUSH
12594: LD_INT 36
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 101
12613: PUSH
12614: LD_INT 102
12616: PUSH
12617: LD_INT 105
12619: PUSH
12620: LD_INT 106
12622: PUSH
12623: LD_INT 108
12625: PUSH
12626: LD_INT 116
12628: PUSH
12629: LD_INT 117
12631: PUSH
12632: LD_INT 118
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: ST_TO_ADDR
12649: GO 15432
12651: LD_INT 5
12653: DOUBLE
12654: EQUAL
12655: IFTRUE 12659
12657: GO 12771
12659: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12660: LD_ADDR_VAR 0 2
12664: PUSH
12665: LD_INT 2
12667: PUSH
12668: LD_INT 4
12670: PUSH
12671: LD_INT 5
12673: PUSH
12674: LD_INT 6
12676: PUSH
12677: LD_INT 8
12679: PUSH
12680: LD_INT 11
12682: PUSH
12683: LD_INT 12
12685: PUSH
12686: LD_INT 15
12688: PUSH
12689: LD_INT 16
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_INT 23
12697: PUSH
12698: LD_INT 25
12700: PUSH
12701: LD_INT 26
12703: PUSH
12704: LD_INT 36
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 101
12725: PUSH
12726: LD_INT 102
12728: PUSH
12729: LD_INT 105
12731: PUSH
12732: LD_INT 106
12734: PUSH
12735: LD_INT 108
12737: PUSH
12738: LD_INT 109
12740: PUSH
12741: LD_INT 112
12743: PUSH
12744: LD_INT 116
12746: PUSH
12747: LD_INT 117
12749: PUSH
12750: LD_INT 118
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: ST_TO_ADDR
12769: GO 15432
12771: LD_INT 6
12773: DOUBLE
12774: EQUAL
12775: IFTRUE 12779
12777: GO 12911
12779: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12780: LD_ADDR_VAR 0 2
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 4
12790: PUSH
12791: LD_INT 5
12793: PUSH
12794: LD_INT 6
12796: PUSH
12797: LD_INT 8
12799: PUSH
12800: LD_INT 11
12802: PUSH
12803: LD_INT 12
12805: PUSH
12806: LD_INT 15
12808: PUSH
12809: LD_INT 16
12811: PUSH
12812: LD_INT 20
12814: PUSH
12815: LD_INT 21
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 23
12823: PUSH
12824: LD_INT 25
12826: PUSH
12827: LD_INT 26
12829: PUSH
12830: LD_INT 30
12832: PUSH
12833: LD_INT 31
12835: PUSH
12836: LD_INT 32
12838: PUSH
12839: LD_INT 36
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 101
12865: PUSH
12866: LD_INT 102
12868: PUSH
12869: LD_INT 105
12871: PUSH
12872: LD_INT 106
12874: PUSH
12875: LD_INT 108
12877: PUSH
12878: LD_INT 109
12880: PUSH
12881: LD_INT 112
12883: PUSH
12884: LD_INT 116
12886: PUSH
12887: LD_INT 117
12889: PUSH
12890: LD_INT 118
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: ST_TO_ADDR
12909: GO 15432
12911: LD_INT 7
12913: DOUBLE
12914: EQUAL
12915: IFTRUE 12919
12917: GO 13031
12919: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12920: LD_ADDR_VAR 0 2
12924: PUSH
12925: LD_INT 2
12927: PUSH
12928: LD_INT 4
12930: PUSH
12931: LD_INT 5
12933: PUSH
12934: LD_INT 7
12936: PUSH
12937: LD_INT 11
12939: PUSH
12940: LD_INT 12
12942: PUSH
12943: LD_INT 15
12945: PUSH
12946: LD_INT 16
12948: PUSH
12949: LD_INT 20
12951: PUSH
12952: LD_INT 21
12954: PUSH
12955: LD_INT 22
12957: PUSH
12958: LD_INT 23
12960: PUSH
12961: LD_INT 25
12963: PUSH
12964: LD_INT 26
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 101
12985: PUSH
12986: LD_INT 102
12988: PUSH
12989: LD_INT 103
12991: PUSH
12992: LD_INT 105
12994: PUSH
12995: LD_INT 106
12997: PUSH
12998: LD_INT 108
13000: PUSH
13001: LD_INT 112
13003: PUSH
13004: LD_INT 116
13006: PUSH
13007: LD_INT 117
13009: PUSH
13010: LD_INT 118
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: ST_TO_ADDR
13029: GO 15432
13031: LD_INT 8
13033: DOUBLE
13034: EQUAL
13035: IFTRUE 13039
13037: GO 13179
13039: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13040: LD_ADDR_VAR 0 2
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 4
13050: PUSH
13051: LD_INT 5
13053: PUSH
13054: LD_INT 6
13056: PUSH
13057: LD_INT 7
13059: PUSH
13060: LD_INT 8
13062: PUSH
13063: LD_INT 11
13065: PUSH
13066: LD_INT 12
13068: PUSH
13069: LD_INT 15
13071: PUSH
13072: LD_INT 16
13074: PUSH
13075: LD_INT 20
13077: PUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 22
13083: PUSH
13084: LD_INT 23
13086: PUSH
13087: LD_INT 25
13089: PUSH
13090: LD_INT 26
13092: PUSH
13093: LD_INT 30
13095: PUSH
13096: LD_INT 31
13098: PUSH
13099: LD_INT 32
13101: PUSH
13102: LD_INT 36
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 101
13129: PUSH
13130: LD_INT 102
13132: PUSH
13133: LD_INT 103
13135: PUSH
13136: LD_INT 105
13138: PUSH
13139: LD_INT 106
13141: PUSH
13142: LD_INT 108
13144: PUSH
13145: LD_INT 109
13147: PUSH
13148: LD_INT 112
13150: PUSH
13151: LD_INT 116
13153: PUSH
13154: LD_INT 117
13156: PUSH
13157: LD_INT 118
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: ST_TO_ADDR
13177: GO 15432
13179: LD_INT 9
13181: DOUBLE
13182: EQUAL
13183: IFTRUE 13187
13185: GO 13335
13187: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13188: LD_ADDR_VAR 0 2
13192: PUSH
13193: LD_INT 2
13195: PUSH
13196: LD_INT 4
13198: PUSH
13199: LD_INT 5
13201: PUSH
13202: LD_INT 6
13204: PUSH
13205: LD_INT 7
13207: PUSH
13208: LD_INT 8
13210: PUSH
13211: LD_INT 11
13213: PUSH
13214: LD_INT 12
13216: PUSH
13217: LD_INT 15
13219: PUSH
13220: LD_INT 16
13222: PUSH
13223: LD_INT 20
13225: PUSH
13226: LD_INT 21
13228: PUSH
13229: LD_INT 22
13231: PUSH
13232: LD_INT 23
13234: PUSH
13235: LD_INT 25
13237: PUSH
13238: LD_INT 26
13240: PUSH
13241: LD_INT 28
13243: PUSH
13244: LD_INT 30
13246: PUSH
13247: LD_INT 31
13249: PUSH
13250: LD_INT 32
13252: PUSH
13253: LD_INT 36
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 101
13281: PUSH
13282: LD_INT 102
13284: PUSH
13285: LD_INT 103
13287: PUSH
13288: LD_INT 105
13290: PUSH
13291: LD_INT 106
13293: PUSH
13294: LD_INT 108
13296: PUSH
13297: LD_INT 109
13299: PUSH
13300: LD_INT 112
13302: PUSH
13303: LD_INT 114
13305: PUSH
13306: LD_INT 116
13308: PUSH
13309: LD_INT 117
13311: PUSH
13312: LD_INT 118
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: ST_TO_ADDR
13333: GO 15432
13335: LD_INT 10
13337: DOUBLE
13338: EQUAL
13339: IFTRUE 13343
13341: GO 13539
13343: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13344: LD_ADDR_VAR 0 2
13348: PUSH
13349: LD_INT 2
13351: PUSH
13352: LD_INT 4
13354: PUSH
13355: LD_INT 5
13357: PUSH
13358: LD_INT 6
13360: PUSH
13361: LD_INT 7
13363: PUSH
13364: LD_INT 8
13366: PUSH
13367: LD_INT 9
13369: PUSH
13370: LD_INT 10
13372: PUSH
13373: LD_INT 11
13375: PUSH
13376: LD_INT 12
13378: PUSH
13379: LD_INT 13
13381: PUSH
13382: LD_INT 14
13384: PUSH
13385: LD_INT 15
13387: PUSH
13388: LD_INT 16
13390: PUSH
13391: LD_INT 17
13393: PUSH
13394: LD_INT 18
13396: PUSH
13397: LD_INT 19
13399: PUSH
13400: LD_INT 20
13402: PUSH
13403: LD_INT 21
13405: PUSH
13406: LD_INT 22
13408: PUSH
13409: LD_INT 23
13411: PUSH
13412: LD_INT 24
13414: PUSH
13415: LD_INT 25
13417: PUSH
13418: LD_INT 26
13420: PUSH
13421: LD_INT 28
13423: PUSH
13424: LD_INT 30
13426: PUSH
13427: LD_INT 31
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 36
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 101
13469: PUSH
13470: LD_INT 102
13472: PUSH
13473: LD_INT 103
13475: PUSH
13476: LD_INT 104
13478: PUSH
13479: LD_INT 105
13481: PUSH
13482: LD_INT 106
13484: PUSH
13485: LD_INT 107
13487: PUSH
13488: LD_INT 108
13490: PUSH
13491: LD_INT 109
13493: PUSH
13494: LD_INT 110
13496: PUSH
13497: LD_INT 111
13499: PUSH
13500: LD_INT 112
13502: PUSH
13503: LD_INT 114
13505: PUSH
13506: LD_INT 116
13508: PUSH
13509: LD_INT 117
13511: PUSH
13512: LD_INT 118
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: ST_TO_ADDR
13537: GO 15432
13539: LD_INT 11
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13751
13547: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: LD_INT 3
13558: PUSH
13559: LD_INT 4
13561: PUSH
13562: LD_INT 5
13564: PUSH
13565: LD_INT 6
13567: PUSH
13568: LD_INT 7
13570: PUSH
13571: LD_INT 8
13573: PUSH
13574: LD_INT 9
13576: PUSH
13577: LD_INT 10
13579: PUSH
13580: LD_INT 11
13582: PUSH
13583: LD_INT 12
13585: PUSH
13586: LD_INT 13
13588: PUSH
13589: LD_INT 14
13591: PUSH
13592: LD_INT 15
13594: PUSH
13595: LD_INT 16
13597: PUSH
13598: LD_INT 17
13600: PUSH
13601: LD_INT 18
13603: PUSH
13604: LD_INT 19
13606: PUSH
13607: LD_INT 20
13609: PUSH
13610: LD_INT 21
13612: PUSH
13613: LD_INT 22
13615: PUSH
13616: LD_INT 23
13618: PUSH
13619: LD_INT 24
13621: PUSH
13622: LD_INT 25
13624: PUSH
13625: LD_INT 26
13627: PUSH
13628: LD_INT 28
13630: PUSH
13631: LD_INT 30
13633: PUSH
13634: LD_INT 31
13636: PUSH
13637: LD_INT 32
13639: PUSH
13640: LD_INT 34
13642: PUSH
13643: LD_INT 36
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 101
13681: PUSH
13682: LD_INT 102
13684: PUSH
13685: LD_INT 103
13687: PUSH
13688: LD_INT 104
13690: PUSH
13691: LD_INT 105
13693: PUSH
13694: LD_INT 106
13696: PUSH
13697: LD_INT 107
13699: PUSH
13700: LD_INT 108
13702: PUSH
13703: LD_INT 109
13705: PUSH
13706: LD_INT 110
13708: PUSH
13709: LD_INT 111
13711: PUSH
13712: LD_INT 112
13714: PUSH
13715: LD_INT 114
13717: PUSH
13718: LD_INT 116
13720: PUSH
13721: LD_INT 117
13723: PUSH
13724: LD_INT 118
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: ST_TO_ADDR
13749: GO 15432
13751: LD_INT 12
13753: DOUBLE
13754: EQUAL
13755: IFTRUE 13759
13757: GO 13979
13759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13760: LD_ADDR_VAR 0 2
13764: PUSH
13765: LD_INT 1
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: LD_INT 3
13773: PUSH
13774: LD_INT 4
13776: PUSH
13777: LD_INT 5
13779: PUSH
13780: LD_INT 6
13782: PUSH
13783: LD_INT 7
13785: PUSH
13786: LD_INT 8
13788: PUSH
13789: LD_INT 9
13791: PUSH
13792: LD_INT 10
13794: PUSH
13795: LD_INT 11
13797: PUSH
13798: LD_INT 12
13800: PUSH
13801: LD_INT 13
13803: PUSH
13804: LD_INT 14
13806: PUSH
13807: LD_INT 15
13809: PUSH
13810: LD_INT 16
13812: PUSH
13813: LD_INT 17
13815: PUSH
13816: LD_INT 18
13818: PUSH
13819: LD_INT 19
13821: PUSH
13822: LD_INT 20
13824: PUSH
13825: LD_INT 21
13827: PUSH
13828: LD_INT 22
13830: PUSH
13831: LD_INT 23
13833: PUSH
13834: LD_INT 24
13836: PUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 26
13842: PUSH
13843: LD_INT 27
13845: PUSH
13846: LD_INT 28
13848: PUSH
13849: LD_INT 30
13851: PUSH
13852: LD_INT 31
13854: PUSH
13855: LD_INT 32
13857: PUSH
13858: LD_INT 33
13860: PUSH
13861: LD_INT 34
13863: PUSH
13864: LD_INT 36
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 101
13905: PUSH
13906: LD_INT 102
13908: PUSH
13909: LD_INT 103
13911: PUSH
13912: LD_INT 104
13914: PUSH
13915: LD_INT 105
13917: PUSH
13918: LD_INT 106
13920: PUSH
13921: LD_INT 107
13923: PUSH
13924: LD_INT 108
13926: PUSH
13927: LD_INT 109
13929: PUSH
13930: LD_INT 110
13932: PUSH
13933: LD_INT 111
13935: PUSH
13936: LD_INT 112
13938: PUSH
13939: LD_INT 113
13941: PUSH
13942: LD_INT 114
13944: PUSH
13945: LD_INT 116
13947: PUSH
13948: LD_INT 117
13950: PUSH
13951: LD_INT 118
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: ST_TO_ADDR
13977: GO 15432
13979: LD_INT 13
13981: DOUBLE
13982: EQUAL
13983: IFTRUE 13987
13985: GO 14195
13987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13988: LD_ADDR_VAR 0 2
13992: PUSH
13993: LD_INT 1
13995: PUSH
13996: LD_INT 2
13998: PUSH
13999: LD_INT 3
14001: PUSH
14002: LD_INT 4
14004: PUSH
14005: LD_INT 5
14007: PUSH
14008: LD_INT 8
14010: PUSH
14011: LD_INT 9
14013: PUSH
14014: LD_INT 10
14016: PUSH
14017: LD_INT 11
14019: PUSH
14020: LD_INT 12
14022: PUSH
14023: LD_INT 14
14025: PUSH
14026: LD_INT 15
14028: PUSH
14029: LD_INT 16
14031: PUSH
14032: LD_INT 17
14034: PUSH
14035: LD_INT 18
14037: PUSH
14038: LD_INT 19
14040: PUSH
14041: LD_INT 20
14043: PUSH
14044: LD_INT 21
14046: PUSH
14047: LD_INT 22
14049: PUSH
14050: LD_INT 23
14052: PUSH
14053: LD_INT 24
14055: PUSH
14056: LD_INT 25
14058: PUSH
14059: LD_INT 26
14061: PUSH
14062: LD_INT 27
14064: PUSH
14065: LD_INT 28
14067: PUSH
14068: LD_INT 30
14070: PUSH
14071: LD_INT 31
14073: PUSH
14074: LD_INT 32
14076: PUSH
14077: LD_INT 33
14079: PUSH
14080: LD_INT 34
14082: PUSH
14083: LD_INT 36
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 101
14121: PUSH
14122: LD_INT 102
14124: PUSH
14125: LD_INT 103
14127: PUSH
14128: LD_INT 104
14130: PUSH
14131: LD_INT 105
14133: PUSH
14134: LD_INT 106
14136: PUSH
14137: LD_INT 107
14139: PUSH
14140: LD_INT 108
14142: PUSH
14143: LD_INT 109
14145: PUSH
14146: LD_INT 110
14148: PUSH
14149: LD_INT 111
14151: PUSH
14152: LD_INT 112
14154: PUSH
14155: LD_INT 113
14157: PUSH
14158: LD_INT 114
14160: PUSH
14161: LD_INT 116
14163: PUSH
14164: LD_INT 117
14166: PUSH
14167: LD_INT 118
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: ST_TO_ADDR
14193: GO 15432
14195: LD_INT 14
14197: DOUBLE
14198: EQUAL
14199: IFTRUE 14203
14201: GO 14427
14203: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14204: LD_ADDR_VAR 0 2
14208: PUSH
14209: LD_INT 1
14211: PUSH
14212: LD_INT 2
14214: PUSH
14215: LD_INT 3
14217: PUSH
14218: LD_INT 4
14220: PUSH
14221: LD_INT 5
14223: PUSH
14224: LD_INT 6
14226: PUSH
14227: LD_INT 7
14229: PUSH
14230: LD_INT 8
14232: PUSH
14233: LD_INT 9
14235: PUSH
14236: LD_INT 10
14238: PUSH
14239: LD_INT 11
14241: PUSH
14242: LD_INT 12
14244: PUSH
14245: LD_INT 13
14247: PUSH
14248: LD_INT 14
14250: PUSH
14251: LD_INT 15
14253: PUSH
14254: LD_INT 16
14256: PUSH
14257: LD_INT 17
14259: PUSH
14260: LD_INT 18
14262: PUSH
14263: LD_INT 19
14265: PUSH
14266: LD_INT 20
14268: PUSH
14269: LD_INT 21
14271: PUSH
14272: LD_INT 22
14274: PUSH
14275: LD_INT 23
14277: PUSH
14278: LD_INT 24
14280: PUSH
14281: LD_INT 25
14283: PUSH
14284: LD_INT 26
14286: PUSH
14287: LD_INT 27
14289: PUSH
14290: LD_INT 28
14292: PUSH
14293: LD_INT 29
14295: PUSH
14296: LD_INT 30
14298: PUSH
14299: LD_INT 31
14301: PUSH
14302: LD_INT 32
14304: PUSH
14305: LD_INT 33
14307: PUSH
14308: LD_INT 34
14310: PUSH
14311: LD_INT 36
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 101
14353: PUSH
14354: LD_INT 102
14356: PUSH
14357: LD_INT 103
14359: PUSH
14360: LD_INT 104
14362: PUSH
14363: LD_INT 105
14365: PUSH
14366: LD_INT 106
14368: PUSH
14369: LD_INT 107
14371: PUSH
14372: LD_INT 108
14374: PUSH
14375: LD_INT 109
14377: PUSH
14378: LD_INT 110
14380: PUSH
14381: LD_INT 111
14383: PUSH
14384: LD_INT 112
14386: PUSH
14387: LD_INT 113
14389: PUSH
14390: LD_INT 114
14392: PUSH
14393: LD_INT 116
14395: PUSH
14396: LD_INT 117
14398: PUSH
14399: LD_INT 118
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: ST_TO_ADDR
14425: GO 15432
14427: LD_INT 15
14429: DOUBLE
14430: EQUAL
14431: IFTRUE 14435
14433: GO 14659
14435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14436: LD_ADDR_VAR 0 2
14440: PUSH
14441: LD_INT 1
14443: PUSH
14444: LD_INT 2
14446: PUSH
14447: LD_INT 3
14449: PUSH
14450: LD_INT 4
14452: PUSH
14453: LD_INT 5
14455: PUSH
14456: LD_INT 6
14458: PUSH
14459: LD_INT 7
14461: PUSH
14462: LD_INT 8
14464: PUSH
14465: LD_INT 9
14467: PUSH
14468: LD_INT 10
14470: PUSH
14471: LD_INT 11
14473: PUSH
14474: LD_INT 12
14476: PUSH
14477: LD_INT 13
14479: PUSH
14480: LD_INT 14
14482: PUSH
14483: LD_INT 15
14485: PUSH
14486: LD_INT 16
14488: PUSH
14489: LD_INT 17
14491: PUSH
14492: LD_INT 18
14494: PUSH
14495: LD_INT 19
14497: PUSH
14498: LD_INT 20
14500: PUSH
14501: LD_INT 21
14503: PUSH
14504: LD_INT 22
14506: PUSH
14507: LD_INT 23
14509: PUSH
14510: LD_INT 24
14512: PUSH
14513: LD_INT 25
14515: PUSH
14516: LD_INT 26
14518: PUSH
14519: LD_INT 27
14521: PUSH
14522: LD_INT 28
14524: PUSH
14525: LD_INT 29
14527: PUSH
14528: LD_INT 30
14530: PUSH
14531: LD_INT 31
14533: PUSH
14534: LD_INT 32
14536: PUSH
14537: LD_INT 33
14539: PUSH
14540: LD_INT 34
14542: PUSH
14543: LD_INT 36
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 101
14585: PUSH
14586: LD_INT 102
14588: PUSH
14589: LD_INT 103
14591: PUSH
14592: LD_INT 104
14594: PUSH
14595: LD_INT 105
14597: PUSH
14598: LD_INT 106
14600: PUSH
14601: LD_INT 107
14603: PUSH
14604: LD_INT 108
14606: PUSH
14607: LD_INT 109
14609: PUSH
14610: LD_INT 110
14612: PUSH
14613: LD_INT 111
14615: PUSH
14616: LD_INT 112
14618: PUSH
14619: LD_INT 113
14621: PUSH
14622: LD_INT 114
14624: PUSH
14625: LD_INT 116
14627: PUSH
14628: LD_INT 117
14630: PUSH
14631: LD_INT 118
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: ST_TO_ADDR
14657: GO 15432
14659: LD_INT 16
14661: DOUBLE
14662: EQUAL
14663: IFTRUE 14667
14665: GO 14803
14667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14668: LD_ADDR_VAR 0 2
14672: PUSH
14673: LD_INT 2
14675: PUSH
14676: LD_INT 4
14678: PUSH
14679: LD_INT 5
14681: PUSH
14682: LD_INT 7
14684: PUSH
14685: LD_INT 11
14687: PUSH
14688: LD_INT 12
14690: PUSH
14691: LD_INT 15
14693: PUSH
14694: LD_INT 16
14696: PUSH
14697: LD_INT 20
14699: PUSH
14700: LD_INT 21
14702: PUSH
14703: LD_INT 22
14705: PUSH
14706: LD_INT 23
14708: PUSH
14709: LD_INT 25
14711: PUSH
14712: LD_INT 26
14714: PUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 31
14720: PUSH
14721: LD_INT 32
14723: PUSH
14724: LD_INT 33
14726: PUSH
14727: LD_INT 34
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 101
14753: PUSH
14754: LD_INT 102
14756: PUSH
14757: LD_INT 103
14759: PUSH
14760: LD_INT 106
14762: PUSH
14763: LD_INT 108
14765: PUSH
14766: LD_INT 112
14768: PUSH
14769: LD_INT 113
14771: PUSH
14772: LD_INT 114
14774: PUSH
14775: LD_INT 116
14777: PUSH
14778: LD_INT 117
14780: PUSH
14781: LD_INT 118
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: ST_TO_ADDR
14801: GO 15432
14803: LD_INT 17
14805: DOUBLE
14806: EQUAL
14807: IFTRUE 14811
14809: GO 15035
14811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14812: LD_ADDR_VAR 0 2
14816: PUSH
14817: LD_INT 1
14819: PUSH
14820: LD_INT 2
14822: PUSH
14823: LD_INT 3
14825: PUSH
14826: LD_INT 4
14828: PUSH
14829: LD_INT 5
14831: PUSH
14832: LD_INT 6
14834: PUSH
14835: LD_INT 7
14837: PUSH
14838: LD_INT 8
14840: PUSH
14841: LD_INT 9
14843: PUSH
14844: LD_INT 10
14846: PUSH
14847: LD_INT 11
14849: PUSH
14850: LD_INT 12
14852: PUSH
14853: LD_INT 13
14855: PUSH
14856: LD_INT 14
14858: PUSH
14859: LD_INT 15
14861: PUSH
14862: LD_INT 16
14864: PUSH
14865: LD_INT 17
14867: PUSH
14868: LD_INT 18
14870: PUSH
14871: LD_INT 19
14873: PUSH
14874: LD_INT 20
14876: PUSH
14877: LD_INT 21
14879: PUSH
14880: LD_INT 22
14882: PUSH
14883: LD_INT 23
14885: PUSH
14886: LD_INT 24
14888: PUSH
14889: LD_INT 25
14891: PUSH
14892: LD_INT 26
14894: PUSH
14895: LD_INT 27
14897: PUSH
14898: LD_INT 28
14900: PUSH
14901: LD_INT 29
14903: PUSH
14904: LD_INT 30
14906: PUSH
14907: LD_INT 31
14909: PUSH
14910: LD_INT 32
14912: PUSH
14913: LD_INT 33
14915: PUSH
14916: LD_INT 34
14918: PUSH
14919: LD_INT 36
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 101
14961: PUSH
14962: LD_INT 102
14964: PUSH
14965: LD_INT 103
14967: PUSH
14968: LD_INT 104
14970: PUSH
14971: LD_INT 105
14973: PUSH
14974: LD_INT 106
14976: PUSH
14977: LD_INT 107
14979: PUSH
14980: LD_INT 108
14982: PUSH
14983: LD_INT 109
14985: PUSH
14986: LD_INT 110
14988: PUSH
14989: LD_INT 111
14991: PUSH
14992: LD_INT 112
14994: PUSH
14995: LD_INT 113
14997: PUSH
14998: LD_INT 114
15000: PUSH
15001: LD_INT 116
15003: PUSH
15004: LD_INT 117
15006: PUSH
15007: LD_INT 118
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: ST_TO_ADDR
15033: GO 15432
15035: LD_INT 18
15037: DOUBLE
15038: EQUAL
15039: IFTRUE 15043
15041: GO 15191
15043: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15044: LD_ADDR_VAR 0 2
15048: PUSH
15049: LD_INT 2
15051: PUSH
15052: LD_INT 4
15054: PUSH
15055: LD_INT 5
15057: PUSH
15058: LD_INT 7
15060: PUSH
15061: LD_INT 11
15063: PUSH
15064: LD_INT 12
15066: PUSH
15067: LD_INT 15
15069: PUSH
15070: LD_INT 16
15072: PUSH
15073: LD_INT 20
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 22
15081: PUSH
15082: LD_INT 23
15084: PUSH
15085: LD_INT 25
15087: PUSH
15088: LD_INT 26
15090: PUSH
15091: LD_INT 30
15093: PUSH
15094: LD_INT 31
15096: PUSH
15097: LD_INT 32
15099: PUSH
15100: LD_INT 33
15102: PUSH
15103: LD_INT 34
15105: PUSH
15106: LD_INT 35
15108: PUSH
15109: LD_INT 36
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: PUSH
15135: LD_INT 101
15137: PUSH
15138: LD_INT 102
15140: PUSH
15141: LD_INT 103
15143: PUSH
15144: LD_INT 106
15146: PUSH
15147: LD_INT 108
15149: PUSH
15150: LD_INT 112
15152: PUSH
15153: LD_INT 113
15155: PUSH
15156: LD_INT 114
15158: PUSH
15159: LD_INT 115
15161: PUSH
15162: LD_INT 116
15164: PUSH
15165: LD_INT 117
15167: PUSH
15168: LD_INT 118
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: ST_TO_ADDR
15189: GO 15432
15191: LD_INT 19
15193: DOUBLE
15194: EQUAL
15195: IFTRUE 15199
15197: GO 15431
15199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15200: LD_ADDR_VAR 0 2
15204: PUSH
15205: LD_INT 1
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: LD_INT 3
15213: PUSH
15214: LD_INT 4
15216: PUSH
15217: LD_INT 5
15219: PUSH
15220: LD_INT 6
15222: PUSH
15223: LD_INT 7
15225: PUSH
15226: LD_INT 8
15228: PUSH
15229: LD_INT 9
15231: PUSH
15232: LD_INT 10
15234: PUSH
15235: LD_INT 11
15237: PUSH
15238: LD_INT 12
15240: PUSH
15241: LD_INT 13
15243: PUSH
15244: LD_INT 14
15246: PUSH
15247: LD_INT 15
15249: PUSH
15250: LD_INT 16
15252: PUSH
15253: LD_INT 17
15255: PUSH
15256: LD_INT 18
15258: PUSH
15259: LD_INT 19
15261: PUSH
15262: LD_INT 20
15264: PUSH
15265: LD_INT 21
15267: PUSH
15268: LD_INT 22
15270: PUSH
15271: LD_INT 23
15273: PUSH
15274: LD_INT 24
15276: PUSH
15277: LD_INT 25
15279: PUSH
15280: LD_INT 26
15282: PUSH
15283: LD_INT 27
15285: PUSH
15286: LD_INT 28
15288: PUSH
15289: LD_INT 29
15291: PUSH
15292: LD_INT 30
15294: PUSH
15295: LD_INT 31
15297: PUSH
15298: LD_INT 32
15300: PUSH
15301: LD_INT 33
15303: PUSH
15304: LD_INT 34
15306: PUSH
15307: LD_INT 35
15309: PUSH
15310: LD_INT 36
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 101
15353: PUSH
15354: LD_INT 102
15356: PUSH
15357: LD_INT 103
15359: PUSH
15360: LD_INT 104
15362: PUSH
15363: LD_INT 105
15365: PUSH
15366: LD_INT 106
15368: PUSH
15369: LD_INT 107
15371: PUSH
15372: LD_INT 108
15374: PUSH
15375: LD_INT 109
15377: PUSH
15378: LD_INT 110
15380: PUSH
15381: LD_INT 111
15383: PUSH
15384: LD_INT 112
15386: PUSH
15387: LD_INT 113
15389: PUSH
15390: LD_INT 114
15392: PUSH
15393: LD_INT 115
15395: PUSH
15396: LD_INT 116
15398: PUSH
15399: LD_INT 117
15401: PUSH
15402: LD_INT 118
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: ST_TO_ADDR
15429: GO 15432
15431: POP
// end else
15432: GO 15663
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15434: LD_ADDR_VAR 0 2
15438: PUSH
15439: LD_INT 1
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: LD_INT 3
15447: PUSH
15448: LD_INT 4
15450: PUSH
15451: LD_INT 5
15453: PUSH
15454: LD_INT 6
15456: PUSH
15457: LD_INT 7
15459: PUSH
15460: LD_INT 8
15462: PUSH
15463: LD_INT 9
15465: PUSH
15466: LD_INT 10
15468: PUSH
15469: LD_INT 11
15471: PUSH
15472: LD_INT 12
15474: PUSH
15475: LD_INT 13
15477: PUSH
15478: LD_INT 14
15480: PUSH
15481: LD_INT 15
15483: PUSH
15484: LD_INT 16
15486: PUSH
15487: LD_INT 17
15489: PUSH
15490: LD_INT 18
15492: PUSH
15493: LD_INT 19
15495: PUSH
15496: LD_INT 20
15498: PUSH
15499: LD_INT 21
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 23
15507: PUSH
15508: LD_INT 24
15510: PUSH
15511: LD_INT 25
15513: PUSH
15514: LD_INT 26
15516: PUSH
15517: LD_INT 27
15519: PUSH
15520: LD_INT 28
15522: PUSH
15523: LD_INT 29
15525: PUSH
15526: LD_INT 30
15528: PUSH
15529: LD_INT 31
15531: PUSH
15532: LD_INT 32
15534: PUSH
15535: LD_INT 33
15537: PUSH
15538: LD_INT 34
15540: PUSH
15541: LD_INT 35
15543: PUSH
15544: LD_INT 36
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: PUSH
15585: LD_INT 101
15587: PUSH
15588: LD_INT 102
15590: PUSH
15591: LD_INT 103
15593: PUSH
15594: LD_INT 104
15596: PUSH
15597: LD_INT 105
15599: PUSH
15600: LD_INT 106
15602: PUSH
15603: LD_INT 107
15605: PUSH
15606: LD_INT 108
15608: PUSH
15609: LD_INT 109
15611: PUSH
15612: LD_INT 110
15614: PUSH
15615: LD_INT 111
15617: PUSH
15618: LD_INT 112
15620: PUSH
15621: LD_INT 113
15623: PUSH
15624: LD_INT 114
15626: PUSH
15627: LD_INT 115
15629: PUSH
15630: LD_INT 116
15632: PUSH
15633: LD_INT 117
15635: PUSH
15636: LD_INT 118
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: ST_TO_ADDR
// if result then
15663: LD_VAR 0 2
15667: IFFALSE 16453
// begin normal :=  ;
15669: LD_ADDR_VAR 0 5
15673: PUSH
15674: LD_STRING 
15676: ST_TO_ADDR
// hardcore :=  ;
15677: LD_ADDR_VAR 0 6
15681: PUSH
15682: LD_STRING 
15684: ST_TO_ADDR
// active :=  ;
15685: LD_ADDR_VAR 0 7
15689: PUSH
15690: LD_STRING 
15692: ST_TO_ADDR
// for i = 1 to normalCounter do
15693: LD_ADDR_VAR 0 8
15697: PUSH
15698: DOUBLE
15699: LD_INT 1
15701: DEC
15702: ST_TO_ADDR
15703: LD_EXP 46
15707: PUSH
15708: FOR_TO
15709: IFFALSE 15810
// begin tmp := 0 ;
15711: LD_ADDR_VAR 0 3
15715: PUSH
15716: LD_STRING 0
15718: ST_TO_ADDR
// if result [ 1 ] then
15719: LD_VAR 0 2
15723: PUSH
15724: LD_INT 1
15726: ARRAY
15727: IFFALSE 15792
// if result [ 1 ] [ 1 ] = i then
15729: LD_VAR 0 2
15733: PUSH
15734: LD_INT 1
15736: ARRAY
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: PUSH
15742: LD_VAR 0 8
15746: EQUAL
15747: IFFALSE 15792
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15749: LD_ADDR_VAR 0 2
15753: PUSH
15754: LD_VAR 0 2
15758: PPUSH
15759: LD_INT 1
15761: PPUSH
15762: LD_VAR 0 2
15766: PUSH
15767: LD_INT 1
15769: ARRAY
15770: PPUSH
15771: LD_INT 1
15773: PPUSH
15774: CALL_OW 3
15778: PPUSH
15779: CALL_OW 1
15783: ST_TO_ADDR
// tmp := 1 ;
15784: LD_ADDR_VAR 0 3
15788: PUSH
15789: LD_STRING 1
15791: ST_TO_ADDR
// end ; normal := normal & tmp ;
15792: LD_ADDR_VAR 0 5
15796: PUSH
15797: LD_VAR 0 5
15801: PUSH
15802: LD_VAR 0 3
15806: STR
15807: ST_TO_ADDR
// end ;
15808: GO 15708
15810: POP
15811: POP
// for i = 1 to hardcoreCounter do
15812: LD_ADDR_VAR 0 8
15816: PUSH
15817: DOUBLE
15818: LD_INT 1
15820: DEC
15821: ST_TO_ADDR
15822: LD_EXP 47
15826: PUSH
15827: FOR_TO
15828: IFFALSE 15933
// begin tmp := 0 ;
15830: LD_ADDR_VAR 0 3
15834: PUSH
15835: LD_STRING 0
15837: ST_TO_ADDR
// if result [ 2 ] then
15838: LD_VAR 0 2
15842: PUSH
15843: LD_INT 2
15845: ARRAY
15846: IFFALSE 15915
// if result [ 2 ] [ 1 ] = 100 + i then
15848: LD_VAR 0 2
15852: PUSH
15853: LD_INT 2
15855: ARRAY
15856: PUSH
15857: LD_INT 1
15859: ARRAY
15860: PUSH
15861: LD_INT 100
15863: PUSH
15864: LD_VAR 0 8
15868: PLUS
15869: EQUAL
15870: IFFALSE 15915
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15872: LD_ADDR_VAR 0 2
15876: PUSH
15877: LD_VAR 0 2
15881: PPUSH
15882: LD_INT 2
15884: PPUSH
15885: LD_VAR 0 2
15889: PUSH
15890: LD_INT 2
15892: ARRAY
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 3
15901: PPUSH
15902: CALL_OW 1
15906: ST_TO_ADDR
// tmp := 1 ;
15907: LD_ADDR_VAR 0 3
15911: PUSH
15912: LD_STRING 1
15914: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15915: LD_ADDR_VAR 0 6
15919: PUSH
15920: LD_VAR 0 6
15924: PUSH
15925: LD_VAR 0 3
15929: STR
15930: ST_TO_ADDR
// end ;
15931: GO 15827
15933: POP
15934: POP
// if isGameLoad then
15935: LD_VAR 0 1
15939: IFFALSE 16414
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15941: LD_ADDR_VAR 0 4
15945: PUSH
15946: LD_EXP 50
15950: PUSH
15951: LD_EXP 49
15955: PUSH
15956: LD_EXP 51
15960: PUSH
15961: LD_EXP 48
15965: PUSH
15966: LD_EXP 52
15970: PUSH
15971: LD_EXP 53
15975: PUSH
15976: LD_EXP 54
15980: PUSH
15981: LD_EXP 55
15985: PUSH
15986: LD_EXP 56
15990: PUSH
15991: LD_EXP 57
15995: PUSH
15996: LD_EXP 58
16000: PUSH
16001: LD_EXP 59
16005: PUSH
16006: LD_EXP 60
16010: PUSH
16011: LD_EXP 61
16015: PUSH
16016: LD_EXP 69
16020: PUSH
16021: LD_EXP 70
16025: PUSH
16026: LD_EXP 71
16030: PUSH
16031: LD_EXP 72
16035: PUSH
16036: LD_EXP 74
16040: PUSH
16041: LD_EXP 75
16045: PUSH
16046: LD_EXP 76
16050: PUSH
16051: LD_EXP 79
16055: PUSH
16056: LD_EXP 81
16060: PUSH
16061: LD_EXP 82
16065: PUSH
16066: LD_EXP 83
16070: PUSH
16071: LD_EXP 85
16075: PUSH
16076: LD_EXP 86
16080: PUSH
16081: LD_EXP 89
16085: PUSH
16086: LD_EXP 90
16090: PUSH
16091: LD_EXP 91
16095: PUSH
16096: LD_EXP 92
16100: PUSH
16101: LD_EXP 93
16105: PUSH
16106: LD_EXP 94
16110: PUSH
16111: LD_EXP 95
16115: PUSH
16116: LD_EXP 96
16120: PUSH
16121: LD_EXP 97
16125: PUSH
16126: LD_EXP 62
16130: PUSH
16131: LD_EXP 63
16135: PUSH
16136: LD_EXP 66
16140: PUSH
16141: LD_EXP 67
16145: PUSH
16146: LD_EXP 68
16150: PUSH
16151: LD_EXP 64
16155: PUSH
16156: LD_EXP 65
16160: PUSH
16161: LD_EXP 73
16165: PUSH
16166: LD_EXP 77
16170: PUSH
16171: LD_EXP 78
16175: PUSH
16176: LD_EXP 80
16180: PUSH
16181: LD_EXP 84
16185: PUSH
16186: LD_EXP 87
16190: PUSH
16191: LD_EXP 88
16195: PUSH
16196: LD_EXP 98
16200: PUSH
16201: LD_EXP 99
16205: PUSH
16206: LD_EXP 100
16210: PUSH
16211: LD_EXP 101
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: ST_TO_ADDR
// tmp :=  ;
16272: LD_ADDR_VAR 0 3
16276: PUSH
16277: LD_STRING 
16279: ST_TO_ADDR
// for i = 1 to normalCounter do
16280: LD_ADDR_VAR 0 8
16284: PUSH
16285: DOUBLE
16286: LD_INT 1
16288: DEC
16289: ST_TO_ADDR
16290: LD_EXP 46
16294: PUSH
16295: FOR_TO
16296: IFFALSE 16332
// begin if flags [ i ] then
16298: LD_VAR 0 4
16302: PUSH
16303: LD_VAR 0 8
16307: ARRAY
16308: IFFALSE 16330
// tmp := tmp & i & ; ;
16310: LD_ADDR_VAR 0 3
16314: PUSH
16315: LD_VAR 0 3
16319: PUSH
16320: LD_VAR 0 8
16324: STR
16325: PUSH
16326: LD_STRING ;
16328: STR
16329: ST_TO_ADDR
// end ;
16330: GO 16295
16332: POP
16333: POP
// for i = 1 to hardcoreCounter do
16334: LD_ADDR_VAR 0 8
16338: PUSH
16339: DOUBLE
16340: LD_INT 1
16342: DEC
16343: ST_TO_ADDR
16344: LD_EXP 47
16348: PUSH
16349: FOR_TO
16350: IFFALSE 16396
// begin if flags [ normalCounter + i ] then
16352: LD_VAR 0 4
16356: PUSH
16357: LD_EXP 46
16361: PUSH
16362: LD_VAR 0 8
16366: PLUS
16367: ARRAY
16368: IFFALSE 16394
// tmp := tmp & ( 100 + i ) & ; ;
16370: LD_ADDR_VAR 0 3
16374: PUSH
16375: LD_VAR 0 3
16379: PUSH
16380: LD_INT 100
16382: PUSH
16383: LD_VAR 0 8
16387: PLUS
16388: STR
16389: PUSH
16390: LD_STRING ;
16392: STR
16393: ST_TO_ADDR
// end ;
16394: GO 16349
16396: POP
16397: POP
// if tmp then
16398: LD_VAR 0 3
16402: IFFALSE 16414
// active := tmp ;
16404: LD_ADDR_VAR 0 7
16408: PUSH
16409: LD_VAR 0 3
16413: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16414: LD_STRING getStreamItemsFromMission("
16416: PUSH
16417: LD_VAR 0 5
16421: STR
16422: PUSH
16423: LD_STRING ","
16425: STR
16426: PUSH
16427: LD_VAR 0 6
16431: STR
16432: PUSH
16433: LD_STRING ","
16435: STR
16436: PUSH
16437: LD_VAR 0 7
16441: STR
16442: PUSH
16443: LD_STRING ")
16445: STR
16446: PPUSH
16447: CALL_OW 559
// end else
16451: GO 16460
// ToLua ( getStreamItemsFromMission("","","") ) ;
16453: LD_STRING getStreamItemsFromMission("","","")
16455: PPUSH
16456: CALL_OW 559
// end ;
16460: LD_VAR 0 2
16464: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16465: LD_EXP 45
16469: PUSH
16470: LD_EXP 50
16474: AND
16475: IFFALSE 16599
16477: GO 16479
16479: DISABLE
16480: LD_INT 0
16482: PPUSH
16483: PPUSH
// begin enable ;
16484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16485: LD_ADDR_VAR 0 2
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_OWVAR 2
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 2
16504: PUSH
16505: LD_INT 34
16507: PUSH
16508: LD_INT 7
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 34
16517: PUSH
16518: LD_INT 45
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 34
16527: PUSH
16528: LD_INT 28
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 34
16537: PUSH
16538: LD_INT 47
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: ST_TO_ADDR
// if not tmp then
16561: LD_VAR 0 2
16565: NOT
16566: IFFALSE 16570
// exit ;
16568: GO 16599
// for i in tmp do
16570: LD_ADDR_VAR 0 1
16574: PUSH
16575: LD_VAR 0 2
16579: PUSH
16580: FOR_IN
16581: IFFALSE 16597
// begin SetLives ( i , 0 ) ;
16583: LD_VAR 0 1
16587: PPUSH
16588: LD_INT 0
16590: PPUSH
16591: CALL_OW 234
// end ;
16595: GO 16580
16597: POP
16598: POP
// end ;
16599: PPOPN 2
16601: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16602: LD_EXP 45
16606: PUSH
16607: LD_EXP 51
16611: AND
16612: IFFALSE 16696
16614: GO 16616
16616: DISABLE
16617: LD_INT 0
16619: PPUSH
16620: PPUSH
// begin enable ;
16621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16622: LD_ADDR_VAR 0 2
16626: PUSH
16627: LD_INT 22
16629: PUSH
16630: LD_OWVAR 2
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 32
16641: PUSH
16642: LD_INT 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PPUSH
16653: CALL_OW 69
16657: ST_TO_ADDR
// if not tmp then
16658: LD_VAR 0 2
16662: NOT
16663: IFFALSE 16667
// exit ;
16665: GO 16696
// for i in tmp do
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: LD_VAR 0 2
16676: PUSH
16677: FOR_IN
16678: IFFALSE 16694
// begin SetLives ( i , 0 ) ;
16680: LD_VAR 0 1
16684: PPUSH
16685: LD_INT 0
16687: PPUSH
16688: CALL_OW 234
// end ;
16692: GO 16677
16694: POP
16695: POP
// end ;
16696: PPOPN 2
16698: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16699: LD_EXP 45
16703: PUSH
16704: LD_EXP 48
16708: AND
16709: IFFALSE 16802
16711: GO 16713
16713: DISABLE
16714: LD_INT 0
16716: PPUSH
// begin enable ;
16717: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16718: LD_ADDR_VAR 0 1
16722: PUSH
16723: LD_INT 22
16725: PUSH
16726: LD_OWVAR 2
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 2
16737: PUSH
16738: LD_INT 25
16740: PUSH
16741: LD_INT 5
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 25
16760: PUSH
16761: LD_INT 8
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PPUSH
16778: CALL_OW 69
16782: PUSH
16783: FOR_IN
16784: IFFALSE 16800
// begin SetClass ( i , 1 ) ;
16786: LD_VAR 0 1
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 336
// end ;
16798: GO 16783
16800: POP
16801: POP
// end ;
16802: PPOPN 1
16804: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16805: LD_EXP 45
16809: PUSH
16810: LD_EXP 49
16814: AND
16815: PUSH
16816: LD_OWVAR 65
16820: PUSH
16821: LD_INT 7
16823: LESS
16824: AND
16825: IFFALSE 16839
16827: GO 16829
16829: DISABLE
// begin enable ;
16830: ENABLE
// game_speed := 7 ;
16831: LD_ADDR_OWVAR 65
16835: PUSH
16836: LD_INT 7
16838: ST_TO_ADDR
// end ;
16839: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16840: LD_EXP 45
16844: PUSH
16845: LD_EXP 52
16849: AND
16850: IFFALSE 17052
16852: GO 16854
16854: DISABLE
16855: LD_INT 0
16857: PPUSH
16858: PPUSH
16859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16860: LD_ADDR_VAR 0 3
16864: PUSH
16865: LD_INT 81
16867: PUSH
16868: LD_OWVAR 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 21
16879: PUSH
16880: LD_INT 1
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 69
16895: ST_TO_ADDR
// if not tmp then
16896: LD_VAR 0 3
16900: NOT
16901: IFFALSE 16905
// exit ;
16903: GO 17052
// if tmp > 5 then
16905: LD_VAR 0 3
16909: PUSH
16910: LD_INT 5
16912: GREATER
16913: IFFALSE 16925
// k := 5 else
16915: LD_ADDR_VAR 0 2
16919: PUSH
16920: LD_INT 5
16922: ST_TO_ADDR
16923: GO 16935
// k := tmp ;
16925: LD_ADDR_VAR 0 2
16929: PUSH
16930: LD_VAR 0 3
16934: ST_TO_ADDR
// for i := 1 to k do
16935: LD_ADDR_VAR 0 1
16939: PUSH
16940: DOUBLE
16941: LD_INT 1
16943: DEC
16944: ST_TO_ADDR
16945: LD_VAR 0 2
16949: PUSH
16950: FOR_TO
16951: IFFALSE 17050
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16953: LD_VAR 0 3
16957: PUSH
16958: LD_VAR 0 1
16962: ARRAY
16963: PPUSH
16964: LD_VAR 0 1
16968: PUSH
16969: LD_INT 4
16971: MOD
16972: PUSH
16973: LD_INT 1
16975: PLUS
16976: PPUSH
16977: CALL_OW 259
16981: PUSH
16982: LD_INT 10
16984: LESS
16985: IFFALSE 17048
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16987: LD_VAR 0 3
16991: PUSH
16992: LD_VAR 0 1
16996: ARRAY
16997: PPUSH
16998: LD_VAR 0 1
17002: PUSH
17003: LD_INT 4
17005: MOD
17006: PUSH
17007: LD_INT 1
17009: PLUS
17010: PPUSH
17011: LD_VAR 0 3
17015: PUSH
17016: LD_VAR 0 1
17020: ARRAY
17021: PPUSH
17022: LD_VAR 0 1
17026: PUSH
17027: LD_INT 4
17029: MOD
17030: PUSH
17031: LD_INT 1
17033: PLUS
17034: PPUSH
17035: CALL_OW 259
17039: PUSH
17040: LD_INT 1
17042: PLUS
17043: PPUSH
17044: CALL_OW 237
17048: GO 16950
17050: POP
17051: POP
// end ;
17052: PPOPN 3
17054: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17055: LD_EXP 45
17059: PUSH
17060: LD_EXP 53
17064: AND
17065: IFFALSE 17085
17067: GO 17069
17069: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17070: LD_INT 4
17072: PPUSH
17073: LD_OWVAR 2
17077: PPUSH
17078: LD_INT 0
17080: PPUSH
17081: CALL_OW 324
17085: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17086: LD_EXP 45
17090: PUSH
17091: LD_EXP 82
17095: AND
17096: IFFALSE 17116
17098: GO 17100
17100: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17101: LD_INT 19
17103: PPUSH
17104: LD_OWVAR 2
17108: PPUSH
17109: LD_INT 0
17111: PPUSH
17112: CALL_OW 324
17116: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17117: LD_EXP 45
17121: PUSH
17122: LD_EXP 54
17126: AND
17127: IFFALSE 17229
17129: GO 17131
17131: DISABLE
17132: LD_INT 0
17134: PPUSH
17135: PPUSH
// begin enable ;
17136: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17137: LD_ADDR_VAR 0 2
17141: PUSH
17142: LD_INT 22
17144: PUSH
17145: LD_OWVAR 2
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 2
17156: PUSH
17157: LD_INT 34
17159: PUSH
17160: LD_INT 11
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 34
17169: PUSH
17170: LD_INT 30
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PPUSH
17186: CALL_OW 69
17190: ST_TO_ADDR
// if not tmp then
17191: LD_VAR 0 2
17195: NOT
17196: IFFALSE 17200
// exit ;
17198: GO 17229
// for i in tmp do
17200: LD_ADDR_VAR 0 1
17204: PUSH
17205: LD_VAR 0 2
17209: PUSH
17210: FOR_IN
17211: IFFALSE 17227
// begin SetLives ( i , 0 ) ;
17213: LD_VAR 0 1
17217: PPUSH
17218: LD_INT 0
17220: PPUSH
17221: CALL_OW 234
// end ;
17225: GO 17210
17227: POP
17228: POP
// end ;
17229: PPOPN 2
17231: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17232: LD_EXP 45
17236: PUSH
17237: LD_EXP 55
17241: AND
17242: IFFALSE 17262
17244: GO 17246
17246: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17247: LD_INT 32
17249: PPUSH
17250: LD_OWVAR 2
17254: PPUSH
17255: LD_INT 0
17257: PPUSH
17258: CALL_OW 324
17262: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17263: LD_EXP 45
17267: PUSH
17268: LD_EXP 56
17272: AND
17273: IFFALSE 17454
17275: GO 17277
17277: DISABLE
17278: LD_INT 0
17280: PPUSH
17281: PPUSH
17282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17283: LD_ADDR_VAR 0 2
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_OWVAR 2
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 33
17302: PUSH
17303: LD_INT 3
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PPUSH
17314: CALL_OW 69
17318: ST_TO_ADDR
// if not tmp then
17319: LD_VAR 0 2
17323: NOT
17324: IFFALSE 17328
// exit ;
17326: GO 17454
// side := 0 ;
17328: LD_ADDR_VAR 0 3
17332: PUSH
17333: LD_INT 0
17335: ST_TO_ADDR
// for i := 1 to 8 do
17336: LD_ADDR_VAR 0 1
17340: PUSH
17341: DOUBLE
17342: LD_INT 1
17344: DEC
17345: ST_TO_ADDR
17346: LD_INT 8
17348: PUSH
17349: FOR_TO
17350: IFFALSE 17398
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17352: LD_OWVAR 2
17356: PUSH
17357: LD_VAR 0 1
17361: NONEQUAL
17362: PUSH
17363: LD_OWVAR 2
17367: PPUSH
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 81
17377: PUSH
17378: LD_INT 2
17380: EQUAL
17381: AND
17382: IFFALSE 17396
// begin side := i ;
17384: LD_ADDR_VAR 0 3
17388: PUSH
17389: LD_VAR 0 1
17393: ST_TO_ADDR
// break ;
17394: GO 17398
// end ;
17396: GO 17349
17398: POP
17399: POP
// if not side then
17400: LD_VAR 0 3
17404: NOT
17405: IFFALSE 17409
// exit ;
17407: GO 17454
// for i := 1 to tmp do
17409: LD_ADDR_VAR 0 1
17413: PUSH
17414: DOUBLE
17415: LD_INT 1
17417: DEC
17418: ST_TO_ADDR
17419: LD_VAR 0 2
17423: PUSH
17424: FOR_TO
17425: IFFALSE 17452
// if Prob ( 60 ) then
17427: LD_INT 60
17429: PPUSH
17430: CALL_OW 13
17434: IFFALSE 17450
// SetSide ( i , side ) ;
17436: LD_VAR 0 1
17440: PPUSH
17441: LD_VAR 0 3
17445: PPUSH
17446: CALL_OW 235
17450: GO 17424
17452: POP
17453: POP
// end ;
17454: PPOPN 3
17456: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17457: LD_EXP 45
17461: PUSH
17462: LD_EXP 58
17466: AND
17467: IFFALSE 17586
17469: GO 17471
17471: DISABLE
17472: LD_INT 0
17474: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17475: LD_ADDR_VAR 0 1
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: LD_OWVAR 2
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 21
17494: PUSH
17495: LD_INT 1
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 3
17504: PUSH
17505: LD_INT 23
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: PUSH
17529: FOR_IN
17530: IFFALSE 17584
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17532: LD_VAR 0 1
17536: PPUSH
17537: CALL_OW 257
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: LD_INT 4
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: IN
17560: IFFALSE 17582
// SetClass ( un , rand ( 1 , 4 ) ) ;
17562: LD_VAR 0 1
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_INT 4
17572: PPUSH
17573: CALL_OW 12
17577: PPUSH
17578: CALL_OW 336
17582: GO 17529
17584: POP
17585: POP
// end ;
17586: PPOPN 1
17588: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17589: LD_EXP 45
17593: PUSH
17594: LD_EXP 57
17598: AND
17599: IFFALSE 17678
17601: GO 17603
17603: DISABLE
17604: LD_INT 0
17606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17607: LD_ADDR_VAR 0 1
17611: PUSH
17612: LD_INT 22
17614: PUSH
17615: LD_OWVAR 2
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 21
17626: PUSH
17627: LD_INT 3
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 69
17642: ST_TO_ADDR
// if not tmp then
17643: LD_VAR 0 1
17647: NOT
17648: IFFALSE 17652
// exit ;
17650: GO 17678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17652: LD_VAR 0 1
17656: PUSH
17657: LD_INT 1
17659: PPUSH
17660: LD_VAR 0 1
17664: PPUSH
17665: CALL_OW 12
17669: ARRAY
17670: PPUSH
17671: LD_INT 100
17673: PPUSH
17674: CALL_OW 234
// end ;
17678: PPOPN 1
17680: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17681: LD_EXP 45
17685: PUSH
17686: LD_EXP 59
17690: AND
17691: IFFALSE 17789
17693: GO 17695
17695: DISABLE
17696: LD_INT 0
17698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17699: LD_ADDR_VAR 0 1
17703: PUSH
17704: LD_INT 22
17706: PUSH
17707: LD_OWVAR 2
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 21
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PPUSH
17730: CALL_OW 69
17734: ST_TO_ADDR
// if not tmp then
17735: LD_VAR 0 1
17739: NOT
17740: IFFALSE 17744
// exit ;
17742: GO 17789
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17744: LD_VAR 0 1
17748: PUSH
17749: LD_INT 1
17751: PPUSH
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 12
17761: ARRAY
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: LD_INT 4
17768: PPUSH
17769: CALL_OW 12
17773: PPUSH
17774: LD_INT 3000
17776: PPUSH
17777: LD_INT 9000
17779: PPUSH
17780: CALL_OW 12
17784: PPUSH
17785: CALL_OW 492
// end ;
17789: PPOPN 1
17791: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17792: LD_EXP 45
17796: PUSH
17797: LD_EXP 60
17801: AND
17802: IFFALSE 17822
17804: GO 17806
17806: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17807: LD_INT 1
17809: PPUSH
17810: LD_OWVAR 2
17814: PPUSH
17815: LD_INT 0
17817: PPUSH
17818: CALL_OW 324
17822: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17823: LD_EXP 45
17827: PUSH
17828: LD_EXP 61
17832: AND
17833: IFFALSE 17916
17835: GO 17837
17837: DISABLE
17838: LD_INT 0
17840: PPUSH
17841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17842: LD_ADDR_VAR 0 2
17846: PUSH
17847: LD_INT 22
17849: PUSH
17850: LD_OWVAR 2
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 21
17861: PUSH
17862: LD_INT 3
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PPUSH
17873: CALL_OW 69
17877: ST_TO_ADDR
// if not tmp then
17878: LD_VAR 0 2
17882: NOT
17883: IFFALSE 17887
// exit ;
17885: GO 17916
// for i in tmp do
17887: LD_ADDR_VAR 0 1
17891: PUSH
17892: LD_VAR 0 2
17896: PUSH
17897: FOR_IN
17898: IFFALSE 17914
// SetBLevel ( i , 10 ) ;
17900: LD_VAR 0 1
17904: PPUSH
17905: LD_INT 10
17907: PPUSH
17908: CALL_OW 241
17912: GO 17897
17914: POP
17915: POP
// end ;
17916: PPOPN 2
17918: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17919: LD_EXP 45
17923: PUSH
17924: LD_EXP 62
17928: AND
17929: IFFALSE 18040
17931: GO 17933
17933: DISABLE
17934: LD_INT 0
17936: PPUSH
17937: PPUSH
17938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17939: LD_ADDR_VAR 0 3
17943: PUSH
17944: LD_INT 22
17946: PUSH
17947: LD_OWVAR 2
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 25
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PPUSH
17970: CALL_OW 69
17974: ST_TO_ADDR
// if not tmp then
17975: LD_VAR 0 3
17979: NOT
17980: IFFALSE 17984
// exit ;
17982: GO 18040
// un := tmp [ rand ( 1 , tmp ) ] ;
17984: LD_ADDR_VAR 0 2
17988: PUSH
17989: LD_VAR 0 3
17993: PUSH
17994: LD_INT 1
17996: PPUSH
17997: LD_VAR 0 3
18001: PPUSH
18002: CALL_OW 12
18006: ARRAY
18007: ST_TO_ADDR
// if Crawls ( un ) then
18008: LD_VAR 0 2
18012: PPUSH
18013: CALL_OW 318
18017: IFFALSE 18028
// ComWalk ( un ) ;
18019: LD_VAR 0 2
18023: PPUSH
18024: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18028: LD_VAR 0 2
18032: PPUSH
18033: LD_INT 5
18035: PPUSH
18036: CALL_OW 336
// end ;
18040: PPOPN 3
18042: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18043: LD_EXP 45
18047: PUSH
18048: LD_EXP 63
18052: AND
18053: PUSH
18054: LD_OWVAR 67
18058: PUSH
18059: LD_INT 4
18061: LESS
18062: AND
18063: IFFALSE 18082
18065: GO 18067
18067: DISABLE
// begin Difficulty := Difficulty + 1 ;
18068: LD_ADDR_OWVAR 67
18072: PUSH
18073: LD_OWVAR 67
18077: PUSH
18078: LD_INT 1
18080: PLUS
18081: ST_TO_ADDR
// end ;
18082: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18083: LD_EXP 45
18087: PUSH
18088: LD_EXP 64
18092: AND
18093: IFFALSE 18196
18095: GO 18097
18097: DISABLE
18098: LD_INT 0
18100: PPUSH
// begin for i := 1 to 5 do
18101: LD_ADDR_VAR 0 1
18105: PUSH
18106: DOUBLE
18107: LD_INT 1
18109: DEC
18110: ST_TO_ADDR
18111: LD_INT 5
18113: PUSH
18114: FOR_TO
18115: IFFALSE 18194
// begin uc_nation := nation_nature ;
18117: LD_ADDR_OWVAR 21
18121: PUSH
18122: LD_INT 0
18124: ST_TO_ADDR
// uc_side := 0 ;
18125: LD_ADDR_OWVAR 20
18129: PUSH
18130: LD_INT 0
18132: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18133: LD_ADDR_OWVAR 29
18137: PUSH
18138: LD_INT 12
18140: PUSH
18141: LD_INT 12
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: ST_TO_ADDR
// hc_agressivity := 20 ;
18148: LD_ADDR_OWVAR 35
18152: PUSH
18153: LD_INT 20
18155: ST_TO_ADDR
// hc_class := class_tiger ;
18156: LD_ADDR_OWVAR 28
18160: PUSH
18161: LD_INT 14
18163: ST_TO_ADDR
// hc_gallery :=  ;
18164: LD_ADDR_OWVAR 33
18168: PUSH
18169: LD_STRING 
18171: ST_TO_ADDR
// hc_name :=  ;
18172: LD_ADDR_OWVAR 26
18176: PUSH
18177: LD_STRING 
18179: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18180: CALL_OW 44
18184: PPUSH
18185: LD_INT 0
18187: PPUSH
18188: CALL_OW 51
// end ;
18192: GO 18114
18194: POP
18195: POP
// end ;
18196: PPOPN 1
18198: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18199: LD_EXP 45
18203: PUSH
18204: LD_EXP 65
18208: AND
18209: IFFALSE 18218
18211: GO 18213
18213: DISABLE
// StreamSibBomb ;
18214: CALL 18219 0 0
18218: END
// export function StreamSibBomb ; var i , x , y ; begin
18219: LD_INT 0
18221: PPUSH
18222: PPUSH
18223: PPUSH
18224: PPUSH
// result := false ;
18225: LD_ADDR_VAR 0 1
18229: PUSH
18230: LD_INT 0
18232: ST_TO_ADDR
// for i := 1 to 16 do
18233: LD_ADDR_VAR 0 2
18237: PUSH
18238: DOUBLE
18239: LD_INT 1
18241: DEC
18242: ST_TO_ADDR
18243: LD_INT 16
18245: PUSH
18246: FOR_TO
18247: IFFALSE 18446
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18249: LD_ADDR_VAR 0 3
18253: PUSH
18254: LD_INT 10
18256: PUSH
18257: LD_INT 20
18259: PUSH
18260: LD_INT 30
18262: PUSH
18263: LD_INT 40
18265: PUSH
18266: LD_INT 50
18268: PUSH
18269: LD_INT 60
18271: PUSH
18272: LD_INT 70
18274: PUSH
18275: LD_INT 80
18277: PUSH
18278: LD_INT 90
18280: PUSH
18281: LD_INT 100
18283: PUSH
18284: LD_INT 110
18286: PUSH
18287: LD_INT 120
18289: PUSH
18290: LD_INT 130
18292: PUSH
18293: LD_INT 140
18295: PUSH
18296: LD_INT 150
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 1
18318: PPUSH
18319: LD_INT 15
18321: PPUSH
18322: CALL_OW 12
18326: ARRAY
18327: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18328: LD_ADDR_VAR 0 4
18332: PUSH
18333: LD_INT 10
18335: PUSH
18336: LD_INT 20
18338: PUSH
18339: LD_INT 30
18341: PUSH
18342: LD_INT 40
18344: PUSH
18345: LD_INT 50
18347: PUSH
18348: LD_INT 60
18350: PUSH
18351: LD_INT 70
18353: PUSH
18354: LD_INT 80
18356: PUSH
18357: LD_INT 90
18359: PUSH
18360: LD_INT 100
18362: PUSH
18363: LD_INT 110
18365: PUSH
18366: LD_INT 120
18368: PUSH
18369: LD_INT 130
18371: PUSH
18372: LD_INT 140
18374: PUSH
18375: LD_INT 150
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 1
18397: PPUSH
18398: LD_INT 15
18400: PPUSH
18401: CALL_OW 12
18405: ARRAY
18406: ST_TO_ADDR
// if ValidHex ( x , y ) then
18407: LD_VAR 0 3
18411: PPUSH
18412: LD_VAR 0 4
18416: PPUSH
18417: CALL_OW 488
18421: IFFALSE 18444
// begin result := [ x , y ] ;
18423: LD_ADDR_VAR 0 1
18427: PUSH
18428: LD_VAR 0 3
18432: PUSH
18433: LD_VAR 0 4
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: ST_TO_ADDR
// break ;
18442: GO 18446
// end ; end ;
18444: GO 18246
18446: POP
18447: POP
// if result then
18448: LD_VAR 0 1
18452: IFFALSE 18512
// begin ToLua ( playSibBomb() ) ;
18454: LD_STRING playSibBomb()
18456: PPUSH
18457: CALL_OW 559
// wait ( 0 0$14 ) ;
18461: LD_INT 490
18463: PPUSH
18464: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18468: LD_VAR 0 1
18472: PUSH
18473: LD_INT 1
18475: ARRAY
18476: PPUSH
18477: LD_VAR 0 1
18481: PUSH
18482: LD_INT 2
18484: ARRAY
18485: PPUSH
18486: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18490: LD_VAR 0 1
18494: PUSH
18495: LD_INT 1
18497: ARRAY
18498: PPUSH
18499: LD_VAR 0 1
18503: PUSH
18504: LD_INT 2
18506: ARRAY
18507: PPUSH
18508: CALL_OW 429
// end ; end ;
18512: LD_VAR 0 1
18516: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18517: LD_EXP 45
18521: PUSH
18522: LD_EXP 67
18526: AND
18527: IFFALSE 18539
18529: GO 18531
18531: DISABLE
// YouLost (  ) ;
18532: LD_STRING 
18534: PPUSH
18535: CALL_OW 104
18539: END
// every 0 0$1 trigger StreamModeActive and sFog do
18540: LD_EXP 45
18544: PUSH
18545: LD_EXP 66
18549: AND
18550: IFFALSE 18564
18552: GO 18554
18554: DISABLE
// FogOff ( your_side ) ;
18555: LD_OWVAR 2
18559: PPUSH
18560: CALL_OW 344
18564: END
// every 0 0$1 trigger StreamModeActive and sSun do
18565: LD_EXP 45
18569: PUSH
18570: LD_EXP 68
18574: AND
18575: IFFALSE 18603
18577: GO 18579
18579: DISABLE
// begin solar_recharge_percent := 0 ;
18580: LD_ADDR_OWVAR 79
18584: PUSH
18585: LD_INT 0
18587: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18588: LD_INT 10500
18590: PPUSH
18591: CALL_OW 67
// solar_recharge_percent := 100 ;
18595: LD_ADDR_OWVAR 79
18599: PUSH
18600: LD_INT 100
18602: ST_TO_ADDR
// end ;
18603: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18604: LD_EXP 45
18608: PUSH
18609: LD_EXP 69
18613: AND
18614: IFFALSE 18853
18616: GO 18618
18618: DISABLE
18619: LD_INT 0
18621: PPUSH
18622: PPUSH
18623: PPUSH
// begin tmp := [ ] ;
18624: LD_ADDR_VAR 0 3
18628: PUSH
18629: EMPTY
18630: ST_TO_ADDR
// for i := 1 to 6 do
18631: LD_ADDR_VAR 0 1
18635: PUSH
18636: DOUBLE
18637: LD_INT 1
18639: DEC
18640: ST_TO_ADDR
18641: LD_INT 6
18643: PUSH
18644: FOR_TO
18645: IFFALSE 18750
// begin uc_nation := nation_nature ;
18647: LD_ADDR_OWVAR 21
18651: PUSH
18652: LD_INT 0
18654: ST_TO_ADDR
// uc_side := 0 ;
18655: LD_ADDR_OWVAR 20
18659: PUSH
18660: LD_INT 0
18662: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18663: LD_ADDR_OWVAR 29
18667: PUSH
18668: LD_INT 12
18670: PUSH
18671: LD_INT 12
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: ST_TO_ADDR
// hc_agressivity := 20 ;
18678: LD_ADDR_OWVAR 35
18682: PUSH
18683: LD_INT 20
18685: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18686: LD_ADDR_OWVAR 28
18690: PUSH
18691: LD_INT 17
18693: ST_TO_ADDR
// hc_gallery :=  ;
18694: LD_ADDR_OWVAR 33
18698: PUSH
18699: LD_STRING 
18701: ST_TO_ADDR
// hc_name :=  ;
18702: LD_ADDR_OWVAR 26
18706: PUSH
18707: LD_STRING 
18709: ST_TO_ADDR
// un := CreateHuman ;
18710: LD_ADDR_VAR 0 2
18714: PUSH
18715: CALL_OW 44
18719: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18720: LD_VAR 0 2
18724: PPUSH
18725: LD_INT 1
18727: PPUSH
18728: CALL_OW 51
// tmp := tmp ^ un ;
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: LD_VAR 0 3
18741: PUSH
18742: LD_VAR 0 2
18746: ADD
18747: ST_TO_ADDR
// end ;
18748: GO 18644
18750: POP
18751: POP
// repeat wait ( 0 0$1 ) ;
18752: LD_INT 35
18754: PPUSH
18755: CALL_OW 67
// for un in tmp do
18759: LD_ADDR_VAR 0 2
18763: PUSH
18764: LD_VAR 0 3
18768: PUSH
18769: FOR_IN
18770: IFFALSE 18844
// begin if IsDead ( un ) then
18772: LD_VAR 0 2
18776: PPUSH
18777: CALL_OW 301
18781: IFFALSE 18801
// begin tmp := tmp diff un ;
18783: LD_ADDR_VAR 0 3
18787: PUSH
18788: LD_VAR 0 3
18792: PUSH
18793: LD_VAR 0 2
18797: DIFF
18798: ST_TO_ADDR
// continue ;
18799: GO 18769
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18801: LD_VAR 0 2
18805: PPUSH
18806: LD_INT 3
18808: PUSH
18809: LD_INT 22
18811: PUSH
18812: LD_INT 0
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PPUSH
18823: CALL_OW 69
18827: PPUSH
18828: LD_VAR 0 2
18832: PPUSH
18833: CALL_OW 74
18837: PPUSH
18838: CALL_OW 115
// end ;
18842: GO 18769
18844: POP
18845: POP
// until not tmp ;
18846: LD_VAR 0 3
18850: NOT
18851: IFFALSE 18752
// end ;
18853: PPOPN 3
18855: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18856: LD_EXP 45
18860: PUSH
18861: LD_EXP 70
18865: AND
18866: IFFALSE 18920
18868: GO 18870
18870: DISABLE
// begin ToLua ( displayTroll(); ) ;
18871: LD_STRING displayTroll();
18873: PPUSH
18874: CALL_OW 559
// wait ( 3 3$00 ) ;
18878: LD_INT 6300
18880: PPUSH
18881: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18885: LD_STRING hideTroll();
18887: PPUSH
18888: CALL_OW 559
// wait ( 1 1$00 ) ;
18892: LD_INT 2100
18894: PPUSH
18895: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18899: LD_STRING displayTroll();
18901: PPUSH
18902: CALL_OW 559
// wait ( 1 1$00 ) ;
18906: LD_INT 2100
18908: PPUSH
18909: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18913: LD_STRING hideTroll();
18915: PPUSH
18916: CALL_OW 559
// end ;
18920: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18921: LD_EXP 45
18925: PUSH
18926: LD_EXP 71
18930: AND
18931: IFFALSE 18994
18933: GO 18935
18935: DISABLE
18936: LD_INT 0
18938: PPUSH
// begin p := 0 ;
18939: LD_ADDR_VAR 0 1
18943: PUSH
18944: LD_INT 0
18946: ST_TO_ADDR
// repeat game_speed := 1 ;
18947: LD_ADDR_OWVAR 65
18951: PUSH
18952: LD_INT 1
18954: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18955: LD_INT 35
18957: PPUSH
18958: CALL_OW 67
// p := p + 1 ;
18962: LD_ADDR_VAR 0 1
18966: PUSH
18967: LD_VAR 0 1
18971: PUSH
18972: LD_INT 1
18974: PLUS
18975: ST_TO_ADDR
// until p >= 60 ;
18976: LD_VAR 0 1
18980: PUSH
18981: LD_INT 60
18983: GREATEREQUAL
18984: IFFALSE 18947
// game_speed := 4 ;
18986: LD_ADDR_OWVAR 65
18990: PUSH
18991: LD_INT 4
18993: ST_TO_ADDR
// end ;
18994: PPOPN 1
18996: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18997: LD_EXP 45
19001: PUSH
19002: LD_EXP 72
19006: AND
19007: IFFALSE 19153
19009: GO 19011
19011: DISABLE
19012: LD_INT 0
19014: PPUSH
19015: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19016: LD_ADDR_VAR 0 1
19020: PUSH
19021: LD_INT 22
19023: PUSH
19024: LD_OWVAR 2
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: LD_INT 30
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 30
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: ST_TO_ADDR
// if not depot then
19070: LD_VAR 0 1
19074: NOT
19075: IFFALSE 19079
// exit ;
19077: GO 19153
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19079: LD_ADDR_VAR 0 2
19083: PUSH
19084: LD_VAR 0 1
19088: PUSH
19089: LD_INT 1
19091: PPUSH
19092: LD_VAR 0 1
19096: PPUSH
19097: CALL_OW 12
19101: ARRAY
19102: PPUSH
19103: CALL_OW 274
19107: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19108: LD_VAR 0 2
19112: PPUSH
19113: LD_INT 1
19115: PPUSH
19116: LD_INT 0
19118: PPUSH
19119: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19123: LD_VAR 0 2
19127: PPUSH
19128: LD_INT 2
19130: PPUSH
19131: LD_INT 0
19133: PPUSH
19134: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19138: LD_VAR 0 2
19142: PPUSH
19143: LD_INT 3
19145: PPUSH
19146: LD_INT 0
19148: PPUSH
19149: CALL_OW 277
// end ;
19153: PPOPN 2
19155: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19156: LD_EXP 45
19160: PUSH
19161: LD_EXP 73
19165: AND
19166: IFFALSE 19263
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_INT 22
19181: PUSH
19182: LD_OWVAR 2
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 21
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 3
19203: PUSH
19204: LD_INT 23
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: PPUSH
19223: CALL_OW 69
19227: ST_TO_ADDR
// if not tmp then
19228: LD_VAR 0 1
19232: NOT
19233: IFFALSE 19237
// exit ;
19235: GO 19263
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19237: LD_VAR 0 1
19241: PUSH
19242: LD_INT 1
19244: PPUSH
19245: LD_VAR 0 1
19249: PPUSH
19250: CALL_OW 12
19254: ARRAY
19255: PPUSH
19256: LD_INT 200
19258: PPUSH
19259: CALL_OW 234
// end ;
19263: PPOPN 1
19265: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19266: LD_EXP 45
19270: PUSH
19271: LD_EXP 74
19275: AND
19276: IFFALSE 19355
19278: GO 19280
19280: DISABLE
19281: LD_INT 0
19283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19284: LD_ADDR_VAR 0 1
19288: PUSH
19289: LD_INT 22
19291: PUSH
19292: LD_OWVAR 2
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 21
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 69
19319: ST_TO_ADDR
// if not tmp then
19320: LD_VAR 0 1
19324: NOT
19325: IFFALSE 19329
// exit ;
19327: GO 19355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19329: LD_VAR 0 1
19333: PUSH
19334: LD_INT 1
19336: PPUSH
19337: LD_VAR 0 1
19341: PPUSH
19342: CALL_OW 12
19346: ARRAY
19347: PPUSH
19348: LD_INT 60
19350: PPUSH
19351: CALL_OW 234
// end ;
19355: PPOPN 1
19357: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19358: LD_EXP 45
19362: PUSH
19363: LD_EXP 75
19367: AND
19368: IFFALSE 19467
19370: GO 19372
19372: DISABLE
19373: LD_INT 0
19375: PPUSH
19376: PPUSH
// begin enable ;
19377: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19378: LD_ADDR_VAR 0 1
19382: PUSH
19383: LD_INT 22
19385: PUSH
19386: LD_OWVAR 2
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 61
19397: PUSH
19398: EMPTY
19399: LIST
19400: PUSH
19401: LD_INT 33
19403: PUSH
19404: LD_INT 2
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: LIST
19415: PPUSH
19416: CALL_OW 69
19420: ST_TO_ADDR
// if not tmp then
19421: LD_VAR 0 1
19425: NOT
19426: IFFALSE 19430
// exit ;
19428: GO 19467
// for i in tmp do
19430: LD_ADDR_VAR 0 2
19434: PUSH
19435: LD_VAR 0 1
19439: PUSH
19440: FOR_IN
19441: IFFALSE 19465
// if IsControledBy ( i ) then
19443: LD_VAR 0 2
19447: PPUSH
19448: CALL_OW 312
19452: IFFALSE 19463
// ComUnlink ( i ) ;
19454: LD_VAR 0 2
19458: PPUSH
19459: CALL_OW 136
19463: GO 19440
19465: POP
19466: POP
// end ;
19467: PPOPN 2
19469: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19470: LD_EXP 45
19474: PUSH
19475: LD_EXP 76
19479: AND
19480: IFFALSE 19620
19482: GO 19484
19484: DISABLE
19485: LD_INT 0
19487: PPUSH
19488: PPUSH
// begin ToLua ( displayPowell(); ) ;
19489: LD_STRING displayPowell();
19491: PPUSH
19492: CALL_OW 559
// uc_side := 0 ;
19496: LD_ADDR_OWVAR 20
19500: PUSH
19501: LD_INT 0
19503: ST_TO_ADDR
// uc_nation := 2 ;
19504: LD_ADDR_OWVAR 21
19508: PUSH
19509: LD_INT 2
19511: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19512: LD_ADDR_OWVAR 37
19516: PUSH
19517: LD_INT 14
19519: ST_TO_ADDR
// vc_engine := engine_siberite ;
19520: LD_ADDR_OWVAR 39
19524: PUSH
19525: LD_INT 3
19527: ST_TO_ADDR
// vc_control := control_apeman ;
19528: LD_ADDR_OWVAR 38
19532: PUSH
19533: LD_INT 5
19535: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19536: LD_ADDR_OWVAR 40
19540: PUSH
19541: LD_INT 29
19543: ST_TO_ADDR
// un := CreateVehicle ;
19544: LD_ADDR_VAR 0 2
19548: PUSH
19549: CALL_OW 45
19553: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19554: LD_VAR 0 2
19558: PPUSH
19559: LD_INT 1
19561: PPUSH
19562: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19566: LD_INT 35
19568: PPUSH
19569: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19573: LD_VAR 0 2
19577: PPUSH
19578: LD_INT 22
19580: PUSH
19581: LD_OWVAR 2
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PPUSH
19590: CALL_OW 69
19594: PPUSH
19595: LD_VAR 0 2
19599: PPUSH
19600: CALL_OW 74
19604: PPUSH
19605: CALL_OW 115
// until IsDead ( un ) ;
19609: LD_VAR 0 2
19613: PPUSH
19614: CALL_OW 301
19618: IFFALSE 19566
// end ;
19620: PPOPN 2
19622: END
// every 0 0$1 trigger StreamModeActive and sStu do
19623: LD_EXP 45
19627: PUSH
19628: LD_EXP 84
19632: AND
19633: IFFALSE 19649
19635: GO 19637
19637: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19638: LD_STRING displayStucuk();
19640: PPUSH
19641: CALL_OW 559
// ResetFog ;
19645: CALL_OW 335
// end ;
19649: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19650: LD_EXP 45
19654: PUSH
19655: LD_EXP 77
19659: AND
19660: IFFALSE 19801
19662: GO 19664
19664: DISABLE
19665: LD_INT 0
19667: PPUSH
19668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19669: LD_ADDR_VAR 0 2
19673: PUSH
19674: LD_INT 22
19676: PUSH
19677: LD_OWVAR 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 21
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PPUSH
19700: CALL_OW 69
19704: ST_TO_ADDR
// if not tmp then
19705: LD_VAR 0 2
19709: NOT
19710: IFFALSE 19714
// exit ;
19712: GO 19801
// un := tmp [ rand ( 1 , tmp ) ] ;
19714: LD_ADDR_VAR 0 1
19718: PUSH
19719: LD_VAR 0 2
19723: PUSH
19724: LD_INT 1
19726: PPUSH
19727: LD_VAR 0 2
19731: PPUSH
19732: CALL_OW 12
19736: ARRAY
19737: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19738: LD_VAR 0 1
19742: PPUSH
19743: LD_INT 0
19745: PPUSH
19746: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19750: LD_VAR 0 1
19754: PPUSH
19755: LD_OWVAR 3
19759: PUSH
19760: LD_VAR 0 1
19764: DIFF
19765: PPUSH
19766: LD_VAR 0 1
19770: PPUSH
19771: CALL_OW 74
19775: PPUSH
19776: CALL_OW 115
// wait ( 0 0$20 ) ;
19780: LD_INT 700
19782: PPUSH
19783: CALL_OW 67
// SetSide ( un , your_side ) ;
19787: LD_VAR 0 1
19791: PPUSH
19792: LD_OWVAR 2
19796: PPUSH
19797: CALL_OW 235
// end ;
19801: PPOPN 2
19803: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19804: LD_EXP 45
19808: PUSH
19809: LD_EXP 78
19813: AND
19814: IFFALSE 19920
19816: GO 19818
19818: DISABLE
19819: LD_INT 0
19821: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19822: LD_ADDR_VAR 0 1
19826: PUSH
19827: LD_INT 22
19829: PUSH
19830: LD_OWVAR 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: LD_INT 30
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 30
19854: PUSH
19855: LD_INT 1
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PPUSH
19871: CALL_OW 69
19875: ST_TO_ADDR
// if not depot then
19876: LD_VAR 0 1
19880: NOT
19881: IFFALSE 19885
// exit ;
19883: GO 19920
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19885: LD_VAR 0 1
19889: PUSH
19890: LD_INT 1
19892: ARRAY
19893: PPUSH
19894: CALL_OW 250
19898: PPUSH
19899: LD_VAR 0 1
19903: PUSH
19904: LD_INT 1
19906: ARRAY
19907: PPUSH
19908: CALL_OW 251
19912: PPUSH
19913: LD_INT 70
19915: PPUSH
19916: CALL_OW 495
// end ;
19920: PPOPN 1
19922: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19923: LD_EXP 45
19927: PUSH
19928: LD_EXP 79
19932: AND
19933: IFFALSE 20144
19935: GO 19937
19937: DISABLE
19938: LD_INT 0
19940: PPUSH
19941: PPUSH
19942: PPUSH
19943: PPUSH
19944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19945: LD_ADDR_VAR 0 5
19949: PUSH
19950: LD_INT 22
19952: PUSH
19953: LD_OWVAR 2
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 21
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PPUSH
19976: CALL_OW 69
19980: ST_TO_ADDR
// if not tmp then
19981: LD_VAR 0 5
19985: NOT
19986: IFFALSE 19990
// exit ;
19988: GO 20144
// for i in tmp do
19990: LD_ADDR_VAR 0 1
19994: PUSH
19995: LD_VAR 0 5
19999: PUSH
20000: FOR_IN
20001: IFFALSE 20142
// begin d := rand ( 0 , 5 ) ;
20003: LD_ADDR_VAR 0 4
20007: PUSH
20008: LD_INT 0
20010: PPUSH
20011: LD_INT 5
20013: PPUSH
20014: CALL_OW 12
20018: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20019: LD_ADDR_VAR 0 2
20023: PUSH
20024: LD_VAR 0 1
20028: PPUSH
20029: CALL_OW 250
20033: PPUSH
20034: LD_VAR 0 4
20038: PPUSH
20039: LD_INT 3
20041: PPUSH
20042: LD_INT 12
20044: PPUSH
20045: CALL_OW 12
20049: PPUSH
20050: CALL_OW 272
20054: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: LD_VAR 0 1
20064: PPUSH
20065: CALL_OW 251
20069: PPUSH
20070: LD_VAR 0 4
20074: PPUSH
20075: LD_INT 3
20077: PPUSH
20078: LD_INT 12
20080: PPUSH
20081: CALL_OW 12
20085: PPUSH
20086: CALL_OW 273
20090: ST_TO_ADDR
// if ValidHex ( x , y ) then
20091: LD_VAR 0 2
20095: PPUSH
20096: LD_VAR 0 3
20100: PPUSH
20101: CALL_OW 488
20105: IFFALSE 20140
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20107: LD_VAR 0 1
20111: PPUSH
20112: LD_VAR 0 2
20116: PPUSH
20117: LD_VAR 0 3
20121: PPUSH
20122: LD_INT 3
20124: PPUSH
20125: LD_INT 6
20127: PPUSH
20128: CALL_OW 12
20132: PPUSH
20133: LD_INT 1
20135: PPUSH
20136: CALL_OW 483
// end ;
20140: GO 20000
20142: POP
20143: POP
// end ;
20144: PPOPN 5
20146: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20147: LD_EXP 45
20151: PUSH
20152: LD_EXP 80
20156: AND
20157: IFFALSE 20251
20159: GO 20161
20161: DISABLE
20162: LD_INT 0
20164: PPUSH
20165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20166: LD_ADDR_VAR 0 2
20170: PUSH
20171: LD_INT 22
20173: PUSH
20174: LD_OWVAR 2
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 32
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 21
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: PPUSH
20208: CALL_OW 69
20212: ST_TO_ADDR
// if not tmp then
20213: LD_VAR 0 2
20217: NOT
20218: IFFALSE 20222
// exit ;
20220: GO 20251
// for i in tmp do
20222: LD_ADDR_VAR 0 1
20226: PUSH
20227: LD_VAR 0 2
20231: PUSH
20232: FOR_IN
20233: IFFALSE 20249
// SetFuel ( i , 0 ) ;
20235: LD_VAR 0 1
20239: PPUSH
20240: LD_INT 0
20242: PPUSH
20243: CALL_OW 240
20247: GO 20232
20249: POP
20250: POP
// end ;
20251: PPOPN 2
20253: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20254: LD_EXP 45
20258: PUSH
20259: LD_EXP 81
20263: AND
20264: IFFALSE 20330
20266: GO 20268
20268: DISABLE
20269: LD_INT 0
20271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20272: LD_ADDR_VAR 0 1
20276: PUSH
20277: LD_INT 22
20279: PUSH
20280: LD_OWVAR 2
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 30
20291: PUSH
20292: LD_INT 29
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL_OW 69
20307: ST_TO_ADDR
// if not tmp then
20308: LD_VAR 0 1
20312: NOT
20313: IFFALSE 20317
// exit ;
20315: GO 20330
// DestroyUnit ( tmp [ 1 ] ) ;
20317: LD_VAR 0 1
20321: PUSH
20322: LD_INT 1
20324: ARRAY
20325: PPUSH
20326: CALL_OW 65
// end ;
20330: PPOPN 1
20332: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20333: LD_EXP 45
20337: PUSH
20338: LD_EXP 83
20342: AND
20343: IFFALSE 20472
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
// begin uc_side := 0 ;
20351: LD_ADDR_OWVAR 20
20355: PUSH
20356: LD_INT 0
20358: ST_TO_ADDR
// uc_nation := nation_arabian ;
20359: LD_ADDR_OWVAR 21
20363: PUSH
20364: LD_INT 2
20366: ST_TO_ADDR
// hc_gallery :=  ;
20367: LD_ADDR_OWVAR 33
20371: PUSH
20372: LD_STRING 
20374: ST_TO_ADDR
// hc_name :=  ;
20375: LD_ADDR_OWVAR 26
20379: PUSH
20380: LD_STRING 
20382: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20383: LD_INT 1
20385: PPUSH
20386: LD_INT 11
20388: PPUSH
20389: LD_INT 10
20391: PPUSH
20392: CALL_OW 380
// un := CreateHuman ;
20396: LD_ADDR_VAR 0 1
20400: PUSH
20401: CALL_OW 44
20405: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20406: LD_VAR 0 1
20410: PPUSH
20411: LD_INT 1
20413: PPUSH
20414: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20418: LD_INT 35
20420: PPUSH
20421: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20425: LD_VAR 0 1
20429: PPUSH
20430: LD_INT 22
20432: PUSH
20433: LD_OWVAR 2
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PPUSH
20442: CALL_OW 69
20446: PPUSH
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL_OW 74
20456: PPUSH
20457: CALL_OW 115
// until IsDead ( un ) ;
20461: LD_VAR 0 1
20465: PPUSH
20466: CALL_OW 301
20470: IFFALSE 20418
// end ;
20472: PPOPN 1
20474: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20475: LD_EXP 45
20479: PUSH
20480: LD_EXP 85
20484: AND
20485: IFFALSE 20497
20487: GO 20489
20489: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20490: LD_STRING earthquake(getX(game), 0, 32)
20492: PPUSH
20493: CALL_OW 559
20497: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20498: LD_EXP 45
20502: PUSH
20503: LD_EXP 86
20507: AND
20508: IFFALSE 20599
20510: GO 20512
20512: DISABLE
20513: LD_INT 0
20515: PPUSH
// begin enable ;
20516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20517: LD_ADDR_VAR 0 1
20521: PUSH
20522: LD_INT 22
20524: PUSH
20525: LD_OWVAR 2
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 21
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 33
20546: PUSH
20547: LD_INT 3
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: PPUSH
20559: CALL_OW 69
20563: ST_TO_ADDR
// if not tmp then
20564: LD_VAR 0 1
20568: NOT
20569: IFFALSE 20573
// exit ;
20571: GO 20599
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20573: LD_VAR 0 1
20577: PUSH
20578: LD_INT 1
20580: PPUSH
20581: LD_VAR 0 1
20585: PPUSH
20586: CALL_OW 12
20590: ARRAY
20591: PPUSH
20592: LD_INT 1
20594: PPUSH
20595: CALL_OW 234
// end ;
20599: PPOPN 1
20601: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20602: LD_EXP 45
20606: PUSH
20607: LD_EXP 87
20611: AND
20612: IFFALSE 20753
20614: GO 20616
20616: DISABLE
20617: LD_INT 0
20619: PPUSH
20620: PPUSH
20621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20622: LD_ADDR_VAR 0 3
20626: PUSH
20627: LD_INT 22
20629: PUSH
20630: LD_OWVAR 2
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 25
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PPUSH
20653: CALL_OW 69
20657: ST_TO_ADDR
// if not tmp then
20658: LD_VAR 0 3
20662: NOT
20663: IFFALSE 20667
// exit ;
20665: GO 20753
// un := tmp [ rand ( 1 , tmp ) ] ;
20667: LD_ADDR_VAR 0 2
20671: PUSH
20672: LD_VAR 0 3
20676: PUSH
20677: LD_INT 1
20679: PPUSH
20680: LD_VAR 0 3
20684: PPUSH
20685: CALL_OW 12
20689: ARRAY
20690: ST_TO_ADDR
// if Crawls ( un ) then
20691: LD_VAR 0 2
20695: PPUSH
20696: CALL_OW 318
20700: IFFALSE 20711
// ComWalk ( un ) ;
20702: LD_VAR 0 2
20706: PPUSH
20707: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20711: LD_VAR 0 2
20715: PPUSH
20716: LD_INT 9
20718: PPUSH
20719: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20723: LD_INT 28
20725: PPUSH
20726: LD_OWVAR 2
20730: PPUSH
20731: LD_INT 2
20733: PPUSH
20734: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20738: LD_INT 29
20740: PPUSH
20741: LD_OWVAR 2
20745: PPUSH
20746: LD_INT 2
20748: PPUSH
20749: CALL_OW 322
// end ;
20753: PPOPN 3
20755: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20756: LD_EXP 45
20760: PUSH
20761: LD_EXP 88
20765: AND
20766: IFFALSE 20877
20768: GO 20770
20770: DISABLE
20771: LD_INT 0
20773: PPUSH
20774: PPUSH
20775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_OWVAR 2
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 25
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PPUSH
20807: CALL_OW 69
20811: ST_TO_ADDR
// if not tmp then
20812: LD_VAR 0 3
20816: NOT
20817: IFFALSE 20821
// exit ;
20819: GO 20877
// un := tmp [ rand ( 1 , tmp ) ] ;
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_VAR 0 3
20830: PUSH
20831: LD_INT 1
20833: PPUSH
20834: LD_VAR 0 3
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// if Crawls ( un ) then
20845: LD_VAR 0 2
20849: PPUSH
20850: CALL_OW 318
20854: IFFALSE 20865
// ComWalk ( un ) ;
20856: LD_VAR 0 2
20860: PPUSH
20861: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20865: LD_VAR 0 2
20869: PPUSH
20870: LD_INT 8
20872: PPUSH
20873: CALL_OW 336
// end ;
20877: PPOPN 3
20879: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20880: LD_EXP 45
20884: PUSH
20885: LD_EXP 89
20889: AND
20890: IFFALSE 21034
20892: GO 20894
20894: DISABLE
20895: LD_INT 0
20897: PPUSH
20898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20899: LD_ADDR_VAR 0 2
20903: PUSH
20904: LD_INT 22
20906: PUSH
20907: LD_OWVAR 2
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 21
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: LD_INT 34
20931: PUSH
20932: LD_INT 12
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 34
20941: PUSH
20942: LD_INT 51
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 34
20951: PUSH
20952: LD_INT 32
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: PPUSH
20970: CALL_OW 69
20974: ST_TO_ADDR
// if not tmp then
20975: LD_VAR 0 2
20979: NOT
20980: IFFALSE 20984
// exit ;
20982: GO 21034
// for i in tmp do
20984: LD_ADDR_VAR 0 1
20988: PUSH
20989: LD_VAR 0 2
20993: PUSH
20994: FOR_IN
20995: IFFALSE 21032
// if GetCargo ( i , mat_artifact ) = 0 then
20997: LD_VAR 0 1
21001: PPUSH
21002: LD_INT 4
21004: PPUSH
21005: CALL_OW 289
21009: PUSH
21010: LD_INT 0
21012: EQUAL
21013: IFFALSE 21030
// SetCargo ( i , mat_siberit , 100 ) ;
21015: LD_VAR 0 1
21019: PPUSH
21020: LD_INT 3
21022: PPUSH
21023: LD_INT 100
21025: PPUSH
21026: CALL_OW 290
21030: GO 20994
21032: POP
21033: POP
// end ;
21034: PPOPN 2
21036: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21037: LD_EXP 45
21041: PUSH
21042: LD_EXP 90
21046: AND
21047: IFFALSE 21230
21049: GO 21051
21051: DISABLE
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21056: LD_ADDR_VAR 0 2
21060: PUSH
21061: LD_INT 22
21063: PUSH
21064: LD_OWVAR 2
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PPUSH
21073: CALL_OW 69
21077: ST_TO_ADDR
// if not tmp then
21078: LD_VAR 0 2
21082: NOT
21083: IFFALSE 21087
// exit ;
21085: GO 21230
// for i := 1 to 2 do
21087: LD_ADDR_VAR 0 1
21091: PUSH
21092: DOUBLE
21093: LD_INT 1
21095: DEC
21096: ST_TO_ADDR
21097: LD_INT 2
21099: PUSH
21100: FOR_TO
21101: IFFALSE 21228
// begin uc_side := your_side ;
21103: LD_ADDR_OWVAR 20
21107: PUSH
21108: LD_OWVAR 2
21112: ST_TO_ADDR
// uc_nation := nation_american ;
21113: LD_ADDR_OWVAR 21
21117: PUSH
21118: LD_INT 1
21120: ST_TO_ADDR
// vc_chassis := us_morphling ;
21121: LD_ADDR_OWVAR 37
21125: PUSH
21126: LD_INT 5
21128: ST_TO_ADDR
// vc_engine := engine_siberite ;
21129: LD_ADDR_OWVAR 39
21133: PUSH
21134: LD_INT 3
21136: ST_TO_ADDR
// vc_control := control_computer ;
21137: LD_ADDR_OWVAR 38
21141: PUSH
21142: LD_INT 3
21144: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21145: LD_ADDR_OWVAR 40
21149: PUSH
21150: LD_INT 10
21152: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21153: LD_VAR 0 2
21157: PUSH
21158: LD_INT 1
21160: ARRAY
21161: PPUSH
21162: CALL_OW 310
21166: NOT
21167: IFFALSE 21214
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21169: CALL_OW 45
21173: PPUSH
21174: LD_VAR 0 2
21178: PUSH
21179: LD_INT 1
21181: ARRAY
21182: PPUSH
21183: CALL_OW 250
21187: PPUSH
21188: LD_VAR 0 2
21192: PUSH
21193: LD_INT 1
21195: ARRAY
21196: PPUSH
21197: CALL_OW 251
21201: PPUSH
21202: LD_INT 12
21204: PPUSH
21205: LD_INT 1
21207: PPUSH
21208: CALL_OW 50
21212: GO 21226
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21214: CALL_OW 45
21218: PPUSH
21219: LD_INT 1
21221: PPUSH
21222: CALL_OW 51
// end ;
21226: GO 21100
21228: POP
21229: POP
// end ;
21230: PPOPN 2
21232: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21233: LD_EXP 45
21237: PUSH
21238: LD_EXP 91
21242: AND
21243: IFFALSE 21465
21245: GO 21247
21247: DISABLE
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
21252: PPUSH
21253: PPUSH
21254: PPUSH
21255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21256: LD_ADDR_VAR 0 6
21260: PUSH
21261: LD_INT 22
21263: PUSH
21264: LD_OWVAR 2
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 21
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 3
21285: PUSH
21286: LD_INT 23
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: PPUSH
21305: CALL_OW 69
21309: ST_TO_ADDR
// if not tmp then
21310: LD_VAR 0 6
21314: NOT
21315: IFFALSE 21319
// exit ;
21317: GO 21465
// s1 := rand ( 1 , 4 ) ;
21319: LD_ADDR_VAR 0 2
21323: PUSH
21324: LD_INT 1
21326: PPUSH
21327: LD_INT 4
21329: PPUSH
21330: CALL_OW 12
21334: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21335: LD_ADDR_VAR 0 4
21339: PUSH
21340: LD_VAR 0 6
21344: PUSH
21345: LD_INT 1
21347: ARRAY
21348: PPUSH
21349: LD_VAR 0 2
21353: PPUSH
21354: CALL_OW 259
21358: ST_TO_ADDR
// if s1 = 1 then
21359: LD_VAR 0 2
21363: PUSH
21364: LD_INT 1
21366: EQUAL
21367: IFFALSE 21387
// s2 := rand ( 2 , 4 ) else
21369: LD_ADDR_VAR 0 3
21373: PUSH
21374: LD_INT 2
21376: PPUSH
21377: LD_INT 4
21379: PPUSH
21380: CALL_OW 12
21384: ST_TO_ADDR
21385: GO 21395
// s2 := 1 ;
21387: LD_ADDR_VAR 0 3
21391: PUSH
21392: LD_INT 1
21394: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21395: LD_ADDR_VAR 0 5
21399: PUSH
21400: LD_VAR 0 6
21404: PUSH
21405: LD_INT 1
21407: ARRAY
21408: PPUSH
21409: LD_VAR 0 3
21413: PPUSH
21414: CALL_OW 259
21418: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21419: LD_VAR 0 6
21423: PUSH
21424: LD_INT 1
21426: ARRAY
21427: PPUSH
21428: LD_VAR 0 2
21432: PPUSH
21433: LD_VAR 0 5
21437: PPUSH
21438: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21442: LD_VAR 0 6
21446: PUSH
21447: LD_INT 1
21449: ARRAY
21450: PPUSH
21451: LD_VAR 0 3
21455: PPUSH
21456: LD_VAR 0 4
21460: PPUSH
21461: CALL_OW 237
// end ;
21465: PPOPN 6
21467: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21468: LD_EXP 45
21472: PUSH
21473: LD_EXP 92
21477: AND
21478: IFFALSE 21557
21480: GO 21482
21482: DISABLE
21483: LD_INT 0
21485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21486: LD_ADDR_VAR 0 1
21490: PUSH
21491: LD_INT 22
21493: PUSH
21494: LD_OWVAR 2
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 30
21505: PUSH
21506: LD_INT 3
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PPUSH
21517: CALL_OW 69
21521: ST_TO_ADDR
// if not tmp then
21522: LD_VAR 0 1
21526: NOT
21527: IFFALSE 21531
// exit ;
21529: GO 21557
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21531: LD_VAR 0 1
21535: PUSH
21536: LD_INT 1
21538: PPUSH
21539: LD_VAR 0 1
21543: PPUSH
21544: CALL_OW 12
21548: ARRAY
21549: PPUSH
21550: LD_INT 1
21552: PPUSH
21553: CALL_OW 234
// end ;
21557: PPOPN 1
21559: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21560: LD_EXP 45
21564: PUSH
21565: LD_EXP 93
21569: AND
21570: IFFALSE 21682
21572: GO 21574
21574: DISABLE
21575: LD_INT 0
21577: PPUSH
21578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: LD_INT 22
21586: PUSH
21587: LD_OWVAR 2
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 30
21601: PUSH
21602: LD_INT 27
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 30
21611: PUSH
21612: LD_INT 26
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 30
21621: PUSH
21622: LD_INT 28
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PPUSH
21639: CALL_OW 69
21643: ST_TO_ADDR
// if not tmp then
21644: LD_VAR 0 2
21648: NOT
21649: IFFALSE 21653
// exit ;
21651: GO 21682
// for i in tmp do
21653: LD_ADDR_VAR 0 1
21657: PUSH
21658: LD_VAR 0 2
21662: PUSH
21663: FOR_IN
21664: IFFALSE 21680
// SetLives ( i , 1 ) ;
21666: LD_VAR 0 1
21670: PPUSH
21671: LD_INT 1
21673: PPUSH
21674: CALL_OW 234
21678: GO 21663
21680: POP
21681: POP
// end ;
21682: PPOPN 2
21684: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21685: LD_EXP 45
21689: PUSH
21690: LD_EXP 94
21694: AND
21695: IFFALSE 21982
21697: GO 21699
21699: DISABLE
21700: LD_INT 0
21702: PPUSH
21703: PPUSH
21704: PPUSH
// begin i := rand ( 1 , 7 ) ;
21705: LD_ADDR_VAR 0 1
21709: PUSH
21710: LD_INT 1
21712: PPUSH
21713: LD_INT 7
21715: PPUSH
21716: CALL_OW 12
21720: ST_TO_ADDR
// case i of 1 :
21721: LD_VAR 0 1
21725: PUSH
21726: LD_INT 1
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21744
21734: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21735: LD_STRING earthquake(getX(game), 0, 32)
21737: PPUSH
21738: CALL_OW 559
21742: GO 21982
21744: LD_INT 2
21746: DOUBLE
21747: EQUAL
21748: IFTRUE 21752
21750: GO 21766
21752: POP
// begin ToLua ( displayStucuk(); ) ;
21753: LD_STRING displayStucuk();
21755: PPUSH
21756: CALL_OW 559
// ResetFog ;
21760: CALL_OW 335
// end ; 3 :
21764: GO 21982
21766: LD_INT 3
21768: DOUBLE
21769: EQUAL
21770: IFTRUE 21774
21772: GO 21878
21774: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21775: LD_ADDR_VAR 0 2
21779: PUSH
21780: LD_INT 22
21782: PUSH
21783: LD_OWVAR 2
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 25
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PPUSH
21806: CALL_OW 69
21810: ST_TO_ADDR
// if not tmp then
21811: LD_VAR 0 2
21815: NOT
21816: IFFALSE 21820
// exit ;
21818: GO 21982
// un := tmp [ rand ( 1 , tmp ) ] ;
21820: LD_ADDR_VAR 0 3
21824: PUSH
21825: LD_VAR 0 2
21829: PUSH
21830: LD_INT 1
21832: PPUSH
21833: LD_VAR 0 2
21837: PPUSH
21838: CALL_OW 12
21842: ARRAY
21843: ST_TO_ADDR
// if Crawls ( un ) then
21844: LD_VAR 0 3
21848: PPUSH
21849: CALL_OW 318
21853: IFFALSE 21864
// ComWalk ( un ) ;
21855: LD_VAR 0 3
21859: PPUSH
21860: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21864: LD_VAR 0 3
21868: PPUSH
21869: LD_INT 8
21871: PPUSH
21872: CALL_OW 336
// end ; 4 :
21876: GO 21982
21878: LD_INT 4
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 21960
21886: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21887: LD_ADDR_VAR 0 2
21891: PUSH
21892: LD_INT 22
21894: PUSH
21895: LD_OWVAR 2
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 30
21906: PUSH
21907: LD_INT 29
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PPUSH
21918: CALL_OW 69
21922: ST_TO_ADDR
// if not tmp then
21923: LD_VAR 0 2
21927: NOT
21928: IFFALSE 21932
// exit ;
21930: GO 21982
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21932: LD_VAR 0 2
21936: PUSH
21937: LD_INT 1
21939: ARRAY
21940: PPUSH
21941: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21945: LD_VAR 0 2
21949: PUSH
21950: LD_INT 1
21952: ARRAY
21953: PPUSH
21954: CALL_OW 65
// end ; 5 .. 7 :
21958: GO 21982
21960: LD_INT 5
21962: DOUBLE
21963: GREATEREQUAL
21964: IFFALSE 21972
21966: LD_INT 7
21968: DOUBLE
21969: LESSEQUAL
21970: IFTRUE 21974
21972: GO 21981
21974: POP
// StreamSibBomb ; end ;
21975: CALL 18219 0 0
21979: GO 21982
21981: POP
// end ;
21982: PPOPN 3
21984: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21985: LD_EXP 45
21989: PUSH
21990: LD_EXP 95
21994: AND
21995: IFFALSE 22151
21997: GO 21999
21999: DISABLE
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
22004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_INT 81
22012: PUSH
22013: LD_OWVAR 2
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: LD_INT 21
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 21
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PPUSH
22054: CALL_OW 69
22058: ST_TO_ADDR
// if not tmp then
22059: LD_VAR 0 2
22063: NOT
22064: IFFALSE 22068
// exit ;
22066: GO 22151
// p := 0 ;
22068: LD_ADDR_VAR 0 3
22072: PUSH
22073: LD_INT 0
22075: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22076: LD_INT 35
22078: PPUSH
22079: CALL_OW 67
// p := p + 1 ;
22083: LD_ADDR_VAR 0 3
22087: PUSH
22088: LD_VAR 0 3
22092: PUSH
22093: LD_INT 1
22095: PLUS
22096: ST_TO_ADDR
// for i in tmp do
22097: LD_ADDR_VAR 0 1
22101: PUSH
22102: LD_VAR 0 2
22106: PUSH
22107: FOR_IN
22108: IFFALSE 22139
// if GetLives ( i ) < 1000 then
22110: LD_VAR 0 1
22114: PPUSH
22115: CALL_OW 256
22119: PUSH
22120: LD_INT 1000
22122: LESS
22123: IFFALSE 22137
// SetLives ( i , 1000 ) ;
22125: LD_VAR 0 1
22129: PPUSH
22130: LD_INT 1000
22132: PPUSH
22133: CALL_OW 234
22137: GO 22107
22139: POP
22140: POP
// until p > 20 ;
22141: LD_VAR 0 3
22145: PUSH
22146: LD_INT 20
22148: GREATER
22149: IFFALSE 22076
// end ;
22151: PPOPN 3
22153: END
// every 0 0$1 trigger StreamModeActive and sTime do
22154: LD_EXP 45
22158: PUSH
22159: LD_EXP 96
22163: AND
22164: IFFALSE 22199
22166: GO 22168
22168: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22169: LD_INT 28
22171: PPUSH
22172: LD_OWVAR 2
22176: PPUSH
22177: LD_INT 2
22179: PPUSH
22180: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22184: LD_INT 30
22186: PPUSH
22187: LD_OWVAR 2
22191: PPUSH
22192: LD_INT 2
22194: PPUSH
22195: CALL_OW 322
// end ;
22199: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22200: LD_EXP 45
22204: PUSH
22205: LD_EXP 97
22209: AND
22210: IFFALSE 22331
22212: GO 22214
22214: DISABLE
22215: LD_INT 0
22217: PPUSH
22218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22219: LD_ADDR_VAR 0 2
22223: PUSH
22224: LD_INT 22
22226: PUSH
22227: LD_OWVAR 2
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 21
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 3
22248: PUSH
22249: LD_INT 23
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: PPUSH
22268: CALL_OW 69
22272: ST_TO_ADDR
// if not tmp then
22273: LD_VAR 0 2
22277: NOT
22278: IFFALSE 22282
// exit ;
22280: GO 22331
// for i in tmp do
22282: LD_ADDR_VAR 0 1
22286: PUSH
22287: LD_VAR 0 2
22291: PUSH
22292: FOR_IN
22293: IFFALSE 22329
// begin if Crawls ( i ) then
22295: LD_VAR 0 1
22299: PPUSH
22300: CALL_OW 318
22304: IFFALSE 22315
// ComWalk ( i ) ;
22306: LD_VAR 0 1
22310: PPUSH
22311: CALL_OW 138
// SetClass ( i , 2 ) ;
22315: LD_VAR 0 1
22319: PPUSH
22320: LD_INT 2
22322: PPUSH
22323: CALL_OW 336
// end ;
22327: GO 22292
22329: POP
22330: POP
// end ;
22331: PPOPN 2
22333: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22334: LD_EXP 45
22338: PUSH
22339: LD_EXP 98
22343: AND
22344: IFFALSE 22632
22346: GO 22348
22348: DISABLE
22349: LD_INT 0
22351: PPUSH
22352: PPUSH
22353: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22354: LD_OWVAR 2
22358: PPUSH
22359: LD_INT 9
22361: PPUSH
22362: LD_INT 1
22364: PPUSH
22365: LD_INT 1
22367: PPUSH
22368: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22372: LD_INT 9
22374: PPUSH
22375: LD_OWVAR 2
22379: PPUSH
22380: CALL_OW 343
// uc_side := 9 ;
22384: LD_ADDR_OWVAR 20
22388: PUSH
22389: LD_INT 9
22391: ST_TO_ADDR
// uc_nation := 2 ;
22392: LD_ADDR_OWVAR 21
22396: PUSH
22397: LD_INT 2
22399: ST_TO_ADDR
// hc_name := Dark Warrior ;
22400: LD_ADDR_OWVAR 26
22404: PUSH
22405: LD_STRING Dark Warrior
22407: ST_TO_ADDR
// hc_gallery :=  ;
22408: LD_ADDR_OWVAR 33
22412: PUSH
22413: LD_STRING 
22415: ST_TO_ADDR
// hc_noskilllimit := true ;
22416: LD_ADDR_OWVAR 76
22420: PUSH
22421: LD_INT 1
22423: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22424: LD_ADDR_OWVAR 31
22428: PUSH
22429: LD_INT 30
22431: PUSH
22432: LD_INT 30
22434: PUSH
22435: LD_INT 30
22437: PUSH
22438: LD_INT 30
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: ST_TO_ADDR
// un := CreateHuman ;
22447: LD_ADDR_VAR 0 3
22451: PUSH
22452: CALL_OW 44
22456: ST_TO_ADDR
// hc_noskilllimit := false ;
22457: LD_ADDR_OWVAR 76
22461: PUSH
22462: LD_INT 0
22464: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22465: LD_VAR 0 3
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: CALL_OW 51
// ToLua ( playRanger() ) ;
22477: LD_STRING playRanger()
22479: PPUSH
22480: CALL_OW 559
// p := 0 ;
22484: LD_ADDR_VAR 0 2
22488: PUSH
22489: LD_INT 0
22491: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22492: LD_INT 35
22494: PPUSH
22495: CALL_OW 67
// p := p + 1 ;
22499: LD_ADDR_VAR 0 2
22503: PUSH
22504: LD_VAR 0 2
22508: PUSH
22509: LD_INT 1
22511: PLUS
22512: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22513: LD_VAR 0 3
22517: PPUSH
22518: CALL_OW 256
22522: PUSH
22523: LD_INT 1000
22525: LESS
22526: IFFALSE 22540
// SetLives ( un , 1000 ) ;
22528: LD_VAR 0 3
22532: PPUSH
22533: LD_INT 1000
22535: PPUSH
22536: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22540: LD_VAR 0 3
22544: PPUSH
22545: LD_INT 81
22547: PUSH
22548: LD_OWVAR 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 91
22559: PUSH
22560: LD_VAR 0 3
22564: PUSH
22565: LD_INT 30
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: LIST
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PPUSH
22577: CALL_OW 69
22581: PPUSH
22582: LD_VAR 0 3
22586: PPUSH
22587: CALL_OW 74
22591: PPUSH
22592: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22596: LD_VAR 0 2
22600: PUSH
22601: LD_INT 80
22603: GREATER
22604: PUSH
22605: LD_VAR 0 3
22609: PPUSH
22610: CALL_OW 301
22614: OR
22615: IFFALSE 22492
// if un then
22617: LD_VAR 0 3
22621: IFFALSE 22632
// RemoveUnit ( un ) ;
22623: LD_VAR 0 3
22627: PPUSH
22628: CALL_OW 64
// end ;
22632: PPOPN 3
22634: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22635: LD_EXP 99
22639: IFFALSE 22755
22641: GO 22643
22643: DISABLE
22644: LD_INT 0
22646: PPUSH
22647: PPUSH
22648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22649: LD_ADDR_VAR 0 2
22653: PUSH
22654: LD_INT 81
22656: PUSH
22657: LD_OWVAR 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 21
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PPUSH
22680: CALL_OW 69
22684: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22685: LD_STRING playComputer()
22687: PPUSH
22688: CALL_OW 559
// if not tmp then
22692: LD_VAR 0 2
22696: NOT
22697: IFFALSE 22701
// exit ;
22699: GO 22755
// for i in tmp do
22701: LD_ADDR_VAR 0 1
22705: PUSH
22706: LD_VAR 0 2
22710: PUSH
22711: FOR_IN
22712: IFFALSE 22753
// for j := 1 to 4 do
22714: LD_ADDR_VAR 0 3
22718: PUSH
22719: DOUBLE
22720: LD_INT 1
22722: DEC
22723: ST_TO_ADDR
22724: LD_INT 4
22726: PUSH
22727: FOR_TO
22728: IFFALSE 22749
// SetSkill ( i , j , 10 ) ;
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_VAR 0 3
22739: PPUSH
22740: LD_INT 10
22742: PPUSH
22743: CALL_OW 237
22747: GO 22727
22749: POP
22750: POP
22751: GO 22711
22753: POP
22754: POP
// end ;
22755: PPOPN 3
22757: END
// every 0 0$1 trigger s30 do var i , tmp ;
22758: LD_EXP 100
22762: IFFALSE 22831
22764: GO 22766
22766: DISABLE
22767: LD_INT 0
22769: PPUSH
22770: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22771: LD_ADDR_VAR 0 2
22775: PUSH
22776: LD_INT 22
22778: PUSH
22779: LD_OWVAR 2
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PPUSH
22788: CALL_OW 69
22792: ST_TO_ADDR
// if not tmp then
22793: LD_VAR 0 2
22797: NOT
22798: IFFALSE 22802
// exit ;
22800: GO 22831
// for i in tmp do
22802: LD_ADDR_VAR 0 1
22806: PUSH
22807: LD_VAR 0 2
22811: PUSH
22812: FOR_IN
22813: IFFALSE 22829
// SetLives ( i , 300 ) ;
22815: LD_VAR 0 1
22819: PPUSH
22820: LD_INT 300
22822: PPUSH
22823: CALL_OW 234
22827: GO 22812
22829: POP
22830: POP
// end ;
22831: PPOPN 2
22833: END
// every 0 0$1 trigger s60 do var i , tmp ;
22834: LD_EXP 101
22838: IFFALSE 22907
22840: GO 22842
22842: DISABLE
22843: LD_INT 0
22845: PPUSH
22846: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22847: LD_ADDR_VAR 0 2
22851: PUSH
22852: LD_INT 22
22854: PUSH
22855: LD_OWVAR 2
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL_OW 69
22868: ST_TO_ADDR
// if not tmp then
22869: LD_VAR 0 2
22873: NOT
22874: IFFALSE 22878
// exit ;
22876: GO 22907
// for i in tmp do
22878: LD_ADDR_VAR 0 1
22882: PUSH
22883: LD_VAR 0 2
22887: PUSH
22888: FOR_IN
22889: IFFALSE 22905
// SetLives ( i , 600 ) ;
22891: LD_VAR 0 1
22895: PPUSH
22896: LD_INT 600
22898: PPUSH
22899: CALL_OW 234
22903: GO 22888
22905: POP
22906: POP
// end ;
22907: PPOPN 2
22909: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22910: LD_INT 0
22912: PPUSH
// case cmd of 301 :
22913: LD_VAR 0 1
22917: PUSH
22918: LD_INT 301
22920: DOUBLE
22921: EQUAL
22922: IFTRUE 22926
22924: GO 22958
22926: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22927: LD_VAR 0 6
22931: PPUSH
22932: LD_VAR 0 7
22936: PPUSH
22937: LD_VAR 0 8
22941: PPUSH
22942: LD_VAR 0 4
22946: PPUSH
22947: LD_VAR 0 5
22951: PPUSH
22952: CALL 24167 0 5
22956: GO 23079
22958: LD_INT 302
22960: DOUBLE
22961: EQUAL
22962: IFTRUE 22966
22964: GO 23003
22966: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22967: LD_VAR 0 6
22971: PPUSH
22972: LD_VAR 0 7
22976: PPUSH
22977: LD_VAR 0 8
22981: PPUSH
22982: LD_VAR 0 9
22986: PPUSH
22987: LD_VAR 0 4
22991: PPUSH
22992: LD_VAR 0 5
22996: PPUSH
22997: CALL 24258 0 6
23001: GO 23079
23003: LD_INT 303
23005: DOUBLE
23006: EQUAL
23007: IFTRUE 23011
23009: GO 23048
23011: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23012: LD_VAR 0 6
23016: PPUSH
23017: LD_VAR 0 7
23021: PPUSH
23022: LD_VAR 0 8
23026: PPUSH
23027: LD_VAR 0 9
23031: PPUSH
23032: LD_VAR 0 4
23036: PPUSH
23037: LD_VAR 0 5
23041: PPUSH
23042: CALL 23084 0 6
23046: GO 23079
23048: LD_INT 304
23050: DOUBLE
23051: EQUAL
23052: IFTRUE 23056
23054: GO 23078
23056: POP
// hHackTeleport ( unit , x , y ) ; end ;
23057: LD_VAR 0 2
23061: PPUSH
23062: LD_VAR 0 4
23066: PPUSH
23067: LD_VAR 0 5
23071: PPUSH
23072: CALL 24851 0 3
23076: GO 23079
23078: POP
// end ;
23079: LD_VAR 0 12
23083: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23084: LD_INT 0
23086: PPUSH
23087: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23088: LD_VAR 0 1
23092: PUSH
23093: LD_INT 1
23095: LESS
23096: PUSH
23097: LD_VAR 0 1
23101: PUSH
23102: LD_INT 3
23104: GREATER
23105: OR
23106: PUSH
23107: LD_VAR 0 5
23111: PPUSH
23112: LD_VAR 0 6
23116: PPUSH
23117: CALL_OW 428
23121: OR
23122: IFFALSE 23126
// exit ;
23124: GO 23854
// uc_side := your_side ;
23126: LD_ADDR_OWVAR 20
23130: PUSH
23131: LD_OWVAR 2
23135: ST_TO_ADDR
// uc_nation := nation ;
23136: LD_ADDR_OWVAR 21
23140: PUSH
23141: LD_VAR 0 1
23145: ST_TO_ADDR
// bc_level = 1 ;
23146: LD_ADDR_OWVAR 43
23150: PUSH
23151: LD_INT 1
23153: ST_TO_ADDR
// case btype of 1 :
23154: LD_VAR 0 2
23158: PUSH
23159: LD_INT 1
23161: DOUBLE
23162: EQUAL
23163: IFTRUE 23167
23165: GO 23178
23167: POP
// bc_type := b_depot ; 2 :
23168: LD_ADDR_OWVAR 42
23172: PUSH
23173: LD_INT 0
23175: ST_TO_ADDR
23176: GO 23798
23178: LD_INT 2
23180: DOUBLE
23181: EQUAL
23182: IFTRUE 23186
23184: GO 23197
23186: POP
// bc_type := b_warehouse ; 3 :
23187: LD_ADDR_OWVAR 42
23191: PUSH
23192: LD_INT 1
23194: ST_TO_ADDR
23195: GO 23798
23197: LD_INT 3
23199: DOUBLE
23200: EQUAL
23201: IFTRUE 23205
23203: GO 23216
23205: POP
// bc_type := b_lab ; 4 .. 9 :
23206: LD_ADDR_OWVAR 42
23210: PUSH
23211: LD_INT 6
23213: ST_TO_ADDR
23214: GO 23798
23216: LD_INT 4
23218: DOUBLE
23219: GREATEREQUAL
23220: IFFALSE 23228
23222: LD_INT 9
23224: DOUBLE
23225: LESSEQUAL
23226: IFTRUE 23230
23228: GO 23290
23230: POP
// begin bc_type := b_lab_half ;
23231: LD_ADDR_OWVAR 42
23235: PUSH
23236: LD_INT 7
23238: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23239: LD_ADDR_OWVAR 44
23243: PUSH
23244: LD_INT 10
23246: PUSH
23247: LD_INT 11
23249: PUSH
23250: LD_INT 12
23252: PUSH
23253: LD_INT 15
23255: PUSH
23256: LD_INT 14
23258: PUSH
23259: LD_INT 13
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: PUSH
23270: LD_VAR 0 2
23274: PUSH
23275: LD_INT 3
23277: MINUS
23278: ARRAY
23279: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23280: LD_ADDR_OWVAR 45
23284: PUSH
23285: LD_INT 9
23287: ST_TO_ADDR
// end ; 10 .. 13 :
23288: GO 23798
23290: LD_INT 10
23292: DOUBLE
23293: GREATEREQUAL
23294: IFFALSE 23302
23296: LD_INT 13
23298: DOUBLE
23299: LESSEQUAL
23300: IFTRUE 23304
23302: GO 23381
23304: POP
// begin bc_type := b_lab_full ;
23305: LD_ADDR_OWVAR 42
23309: PUSH
23310: LD_INT 8
23312: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23313: LD_ADDR_OWVAR 44
23317: PUSH
23318: LD_INT 10
23320: PUSH
23321: LD_INT 12
23323: PUSH
23324: LD_INT 14
23326: PUSH
23327: LD_INT 13
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: PUSH
23336: LD_VAR 0 2
23340: PUSH
23341: LD_INT 9
23343: MINUS
23344: ARRAY
23345: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23346: LD_ADDR_OWVAR 45
23350: PUSH
23351: LD_INT 11
23353: PUSH
23354: LD_INT 15
23356: PUSH
23357: LD_INT 12
23359: PUSH
23360: LD_INT 15
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: PUSH
23369: LD_VAR 0 2
23373: PUSH
23374: LD_INT 9
23376: MINUS
23377: ARRAY
23378: ST_TO_ADDR
// end ; 14 :
23379: GO 23798
23381: LD_INT 14
23383: DOUBLE
23384: EQUAL
23385: IFTRUE 23389
23387: GO 23400
23389: POP
// bc_type := b_workshop ; 15 :
23390: LD_ADDR_OWVAR 42
23394: PUSH
23395: LD_INT 2
23397: ST_TO_ADDR
23398: GO 23798
23400: LD_INT 15
23402: DOUBLE
23403: EQUAL
23404: IFTRUE 23408
23406: GO 23419
23408: POP
// bc_type := b_factory ; 16 :
23409: LD_ADDR_OWVAR 42
23413: PUSH
23414: LD_INT 3
23416: ST_TO_ADDR
23417: GO 23798
23419: LD_INT 16
23421: DOUBLE
23422: EQUAL
23423: IFTRUE 23427
23425: GO 23438
23427: POP
// bc_type := b_ext_gun ; 17 :
23428: LD_ADDR_OWVAR 42
23432: PUSH
23433: LD_INT 17
23435: ST_TO_ADDR
23436: GO 23798
23438: LD_INT 17
23440: DOUBLE
23441: EQUAL
23442: IFTRUE 23446
23444: GO 23474
23446: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23447: LD_ADDR_OWVAR 42
23451: PUSH
23452: LD_INT 19
23454: PUSH
23455: LD_INT 23
23457: PUSH
23458: LD_INT 19
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: LIST
23465: PUSH
23466: LD_VAR 0 1
23470: ARRAY
23471: ST_TO_ADDR
23472: GO 23798
23474: LD_INT 18
23476: DOUBLE
23477: EQUAL
23478: IFTRUE 23482
23480: GO 23493
23482: POP
// bc_type := b_ext_radar ; 19 :
23483: LD_ADDR_OWVAR 42
23487: PUSH
23488: LD_INT 20
23490: ST_TO_ADDR
23491: GO 23798
23493: LD_INT 19
23495: DOUBLE
23496: EQUAL
23497: IFTRUE 23501
23499: GO 23512
23501: POP
// bc_type := b_ext_radio ; 20 :
23502: LD_ADDR_OWVAR 42
23506: PUSH
23507: LD_INT 22
23509: ST_TO_ADDR
23510: GO 23798
23512: LD_INT 20
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23531
23520: POP
// bc_type := b_ext_siberium ; 21 :
23521: LD_ADDR_OWVAR 42
23525: PUSH
23526: LD_INT 21
23528: ST_TO_ADDR
23529: GO 23798
23531: LD_INT 21
23533: DOUBLE
23534: EQUAL
23535: IFTRUE 23539
23537: GO 23550
23539: POP
// bc_type := b_ext_computer ; 22 :
23540: LD_ADDR_OWVAR 42
23544: PUSH
23545: LD_INT 24
23547: ST_TO_ADDR
23548: GO 23798
23550: LD_INT 22
23552: DOUBLE
23553: EQUAL
23554: IFTRUE 23558
23556: GO 23569
23558: POP
// bc_type := b_ext_track ; 23 :
23559: LD_ADDR_OWVAR 42
23563: PUSH
23564: LD_INT 16
23566: ST_TO_ADDR
23567: GO 23798
23569: LD_INT 23
23571: DOUBLE
23572: EQUAL
23573: IFTRUE 23577
23575: GO 23588
23577: POP
// bc_type := b_ext_laser ; 24 :
23578: LD_ADDR_OWVAR 42
23582: PUSH
23583: LD_INT 25
23585: ST_TO_ADDR
23586: GO 23798
23588: LD_INT 24
23590: DOUBLE
23591: EQUAL
23592: IFTRUE 23596
23594: GO 23607
23596: POP
// bc_type := b_control_tower ; 25 :
23597: LD_ADDR_OWVAR 42
23601: PUSH
23602: LD_INT 36
23604: ST_TO_ADDR
23605: GO 23798
23607: LD_INT 25
23609: DOUBLE
23610: EQUAL
23611: IFTRUE 23615
23613: GO 23626
23615: POP
// bc_type := b_breastwork ; 26 :
23616: LD_ADDR_OWVAR 42
23620: PUSH
23621: LD_INT 31
23623: ST_TO_ADDR
23624: GO 23798
23626: LD_INT 26
23628: DOUBLE
23629: EQUAL
23630: IFTRUE 23634
23632: GO 23645
23634: POP
// bc_type := b_bunker ; 27 :
23635: LD_ADDR_OWVAR 42
23639: PUSH
23640: LD_INT 32
23642: ST_TO_ADDR
23643: GO 23798
23645: LD_INT 27
23647: DOUBLE
23648: EQUAL
23649: IFTRUE 23653
23651: GO 23664
23653: POP
// bc_type := b_turret ; 28 :
23654: LD_ADDR_OWVAR 42
23658: PUSH
23659: LD_INT 33
23661: ST_TO_ADDR
23662: GO 23798
23664: LD_INT 28
23666: DOUBLE
23667: EQUAL
23668: IFTRUE 23672
23670: GO 23683
23672: POP
// bc_type := b_armoury ; 29 :
23673: LD_ADDR_OWVAR 42
23677: PUSH
23678: LD_INT 4
23680: ST_TO_ADDR
23681: GO 23798
23683: LD_INT 29
23685: DOUBLE
23686: EQUAL
23687: IFTRUE 23691
23689: GO 23702
23691: POP
// bc_type := b_barracks ; 30 :
23692: LD_ADDR_OWVAR 42
23696: PUSH
23697: LD_INT 5
23699: ST_TO_ADDR
23700: GO 23798
23702: LD_INT 30
23704: DOUBLE
23705: EQUAL
23706: IFTRUE 23710
23708: GO 23721
23710: POP
// bc_type := b_solar_power ; 31 :
23711: LD_ADDR_OWVAR 42
23715: PUSH
23716: LD_INT 27
23718: ST_TO_ADDR
23719: GO 23798
23721: LD_INT 31
23723: DOUBLE
23724: EQUAL
23725: IFTRUE 23729
23727: GO 23740
23729: POP
// bc_type := b_oil_power ; 32 :
23730: LD_ADDR_OWVAR 42
23734: PUSH
23735: LD_INT 26
23737: ST_TO_ADDR
23738: GO 23798
23740: LD_INT 32
23742: DOUBLE
23743: EQUAL
23744: IFTRUE 23748
23746: GO 23759
23748: POP
// bc_type := b_siberite_power ; 33 :
23749: LD_ADDR_OWVAR 42
23753: PUSH
23754: LD_INT 28
23756: ST_TO_ADDR
23757: GO 23798
23759: LD_INT 33
23761: DOUBLE
23762: EQUAL
23763: IFTRUE 23767
23765: GO 23778
23767: POP
// bc_type := b_oil_mine ; 34 :
23768: LD_ADDR_OWVAR 42
23772: PUSH
23773: LD_INT 29
23775: ST_TO_ADDR
23776: GO 23798
23778: LD_INT 34
23780: DOUBLE
23781: EQUAL
23782: IFTRUE 23786
23784: GO 23797
23786: POP
// bc_type := b_siberite_mine ; end ;
23787: LD_ADDR_OWVAR 42
23791: PUSH
23792: LD_INT 30
23794: ST_TO_ADDR
23795: GO 23798
23797: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23798: LD_ADDR_VAR 0 8
23802: PUSH
23803: LD_VAR 0 5
23807: PPUSH
23808: LD_VAR 0 6
23812: PPUSH
23813: LD_VAR 0 3
23817: PPUSH
23818: CALL_OW 47
23822: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23823: LD_OWVAR 42
23827: PUSH
23828: LD_INT 32
23830: PUSH
23831: LD_INT 33
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: IN
23838: IFFALSE 23854
// PlaceWeaponTurret ( b , weapon ) ;
23840: LD_VAR 0 8
23844: PPUSH
23845: LD_VAR 0 4
23849: PPUSH
23850: CALL_OW 431
// end ;
23854: LD_VAR 0 7
23858: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23859: LD_INT 0
23861: PPUSH
23862: PPUSH
23863: PPUSH
23864: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23865: LD_ADDR_VAR 0 4
23869: PUSH
23870: LD_INT 22
23872: PUSH
23873: LD_OWVAR 2
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 2
23884: PUSH
23885: LD_INT 30
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 30
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PPUSH
23914: CALL_OW 69
23918: ST_TO_ADDR
// if not tmp then
23919: LD_VAR 0 4
23923: NOT
23924: IFFALSE 23928
// exit ;
23926: GO 23987
// for i in tmp do
23928: LD_ADDR_VAR 0 2
23932: PUSH
23933: LD_VAR 0 4
23937: PUSH
23938: FOR_IN
23939: IFFALSE 23985
// for j = 1 to 3 do
23941: LD_ADDR_VAR 0 3
23945: PUSH
23946: DOUBLE
23947: LD_INT 1
23949: DEC
23950: ST_TO_ADDR
23951: LD_INT 3
23953: PUSH
23954: FOR_TO
23955: IFFALSE 23981
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23957: LD_VAR 0 2
23961: PPUSH
23962: CALL_OW 274
23966: PPUSH
23967: LD_VAR 0 3
23971: PPUSH
23972: LD_INT 99999
23974: PPUSH
23975: CALL_OW 277
23979: GO 23954
23981: POP
23982: POP
23983: GO 23938
23985: POP
23986: POP
// end ;
23987: LD_VAR 0 1
23991: RET
// export function hHackSetLevel10 ; var i , j ; begin
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
23996: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23997: LD_ADDR_VAR 0 2
24001: PUSH
24002: LD_INT 21
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PPUSH
24012: CALL_OW 69
24016: PUSH
24017: FOR_IN
24018: IFFALSE 24070
// if IsSelected ( i ) then
24020: LD_VAR 0 2
24024: PPUSH
24025: CALL_OW 306
24029: IFFALSE 24068
// begin for j := 1 to 4 do
24031: LD_ADDR_VAR 0 3
24035: PUSH
24036: DOUBLE
24037: LD_INT 1
24039: DEC
24040: ST_TO_ADDR
24041: LD_INT 4
24043: PUSH
24044: FOR_TO
24045: IFFALSE 24066
// SetSkill ( i , j , 10 ) ;
24047: LD_VAR 0 2
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_INT 10
24059: PPUSH
24060: CALL_OW 237
24064: GO 24044
24066: POP
24067: POP
// end ;
24068: GO 24017
24070: POP
24071: POP
// end ;
24072: LD_VAR 0 1
24076: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
24081: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24082: LD_ADDR_VAR 0 2
24086: PUSH
24087: LD_INT 22
24089: PUSH
24090: LD_OWVAR 2
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 21
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PPUSH
24113: CALL_OW 69
24117: PUSH
24118: FOR_IN
24119: IFFALSE 24160
// begin for j := 1 to 4 do
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: DOUBLE
24127: LD_INT 1
24129: DEC
24130: ST_TO_ADDR
24131: LD_INT 4
24133: PUSH
24134: FOR_TO
24135: IFFALSE 24156
// SetSkill ( i , j , 10 ) ;
24137: LD_VAR 0 2
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: LD_INT 10
24149: PPUSH
24150: CALL_OW 237
24154: GO 24134
24156: POP
24157: POP
// end ;
24158: GO 24118
24160: POP
24161: POP
// end ;
24162: LD_VAR 0 1
24166: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24167: LD_INT 0
24169: PPUSH
// uc_side := your_side ;
24170: LD_ADDR_OWVAR 20
24174: PUSH
24175: LD_OWVAR 2
24179: ST_TO_ADDR
// uc_nation := nation ;
24180: LD_ADDR_OWVAR 21
24184: PUSH
24185: LD_VAR 0 1
24189: ST_TO_ADDR
// InitHc ;
24190: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24194: LD_INT 0
24196: PPUSH
24197: LD_VAR 0 2
24201: PPUSH
24202: LD_VAR 0 3
24206: PPUSH
24207: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24211: LD_VAR 0 4
24215: PPUSH
24216: LD_VAR 0 5
24220: PPUSH
24221: CALL_OW 428
24225: PUSH
24226: LD_INT 0
24228: EQUAL
24229: IFFALSE 24253
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24231: CALL_OW 44
24235: PPUSH
24236: LD_VAR 0 4
24240: PPUSH
24241: LD_VAR 0 5
24245: PPUSH
24246: LD_INT 1
24248: PPUSH
24249: CALL_OW 48
// end ;
24253: LD_VAR 0 6
24257: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24258: LD_INT 0
24260: PPUSH
24261: PPUSH
// uc_side := your_side ;
24262: LD_ADDR_OWVAR 20
24266: PUSH
24267: LD_OWVAR 2
24271: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24272: LD_VAR 0 1
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 3
24285: PUSH
24286: LD_INT 4
24288: PUSH
24289: LD_INT 5
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: IN
24299: IFFALSE 24311
// uc_nation := nation_american else
24301: LD_ADDR_OWVAR 21
24305: PUSH
24306: LD_INT 1
24308: ST_TO_ADDR
24309: GO 24354
// if chassis in [ 11 , 12 , 13 , 14 ] then
24311: LD_VAR 0 1
24315: PUSH
24316: LD_INT 11
24318: PUSH
24319: LD_INT 12
24321: PUSH
24322: LD_INT 13
24324: PUSH
24325: LD_INT 14
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: IN
24334: IFFALSE 24346
// uc_nation := nation_arabian else
24336: LD_ADDR_OWVAR 21
24340: PUSH
24341: LD_INT 2
24343: ST_TO_ADDR
24344: GO 24354
// uc_nation := nation_russian ;
24346: LD_ADDR_OWVAR 21
24350: PUSH
24351: LD_INT 3
24353: ST_TO_ADDR
// vc_chassis := chassis ;
24354: LD_ADDR_OWVAR 37
24358: PUSH
24359: LD_VAR 0 1
24363: ST_TO_ADDR
// vc_engine := engine ;
24364: LD_ADDR_OWVAR 39
24368: PUSH
24369: LD_VAR 0 2
24373: ST_TO_ADDR
// vc_control := control ;
24374: LD_ADDR_OWVAR 38
24378: PUSH
24379: LD_VAR 0 3
24383: ST_TO_ADDR
// vc_weapon := weapon ;
24384: LD_ADDR_OWVAR 40
24388: PUSH
24389: LD_VAR 0 4
24393: ST_TO_ADDR
// un := CreateVehicle ;
24394: LD_ADDR_VAR 0 8
24398: PUSH
24399: CALL_OW 45
24403: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24404: LD_VAR 0 8
24408: PPUSH
24409: LD_INT 0
24411: PPUSH
24412: LD_INT 5
24414: PPUSH
24415: CALL_OW 12
24419: PPUSH
24420: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24424: LD_VAR 0 8
24428: PPUSH
24429: LD_VAR 0 5
24433: PPUSH
24434: LD_VAR 0 6
24438: PPUSH
24439: LD_INT 1
24441: PPUSH
24442: CALL_OW 48
// end ;
24446: LD_VAR 0 7
24450: RET
// export hInvincible ; every 1 do
24451: GO 24453
24453: DISABLE
// hInvincible := [ ] ;
24454: LD_ADDR_EXP 102
24458: PUSH
24459: EMPTY
24460: ST_TO_ADDR
24461: END
// every 10 do var i ;
24462: GO 24464
24464: DISABLE
24465: LD_INT 0
24467: PPUSH
// begin enable ;
24468: ENABLE
// if not hInvincible then
24469: LD_EXP 102
24473: NOT
24474: IFFALSE 24478
// exit ;
24476: GO 24522
// for i in hInvincible do
24478: LD_ADDR_VAR 0 1
24482: PUSH
24483: LD_EXP 102
24487: PUSH
24488: FOR_IN
24489: IFFALSE 24520
// if GetLives ( i ) < 1000 then
24491: LD_VAR 0 1
24495: PPUSH
24496: CALL_OW 256
24500: PUSH
24501: LD_INT 1000
24503: LESS
24504: IFFALSE 24518
// SetLives ( i , 1000 ) ;
24506: LD_VAR 0 1
24510: PPUSH
24511: LD_INT 1000
24513: PPUSH
24514: CALL_OW 234
24518: GO 24488
24520: POP
24521: POP
// end ;
24522: PPOPN 1
24524: END
// export function hHackInvincible ; var i ; begin
24525: LD_INT 0
24527: PPUSH
24528: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24529: LD_ADDR_VAR 0 2
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 21
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 21
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: LIST
24561: PPUSH
24562: CALL_OW 69
24566: PUSH
24567: FOR_IN
24568: IFFALSE 24629
// if IsSelected ( i ) then
24570: LD_VAR 0 2
24574: PPUSH
24575: CALL_OW 306
24579: IFFALSE 24627
// begin if i in hInvincible then
24581: LD_VAR 0 2
24585: PUSH
24586: LD_EXP 102
24590: IN
24591: IFFALSE 24611
// hInvincible := hInvincible diff i else
24593: LD_ADDR_EXP 102
24597: PUSH
24598: LD_EXP 102
24602: PUSH
24603: LD_VAR 0 2
24607: DIFF
24608: ST_TO_ADDR
24609: GO 24627
// hInvincible := hInvincible union i ;
24611: LD_ADDR_EXP 102
24615: PUSH
24616: LD_EXP 102
24620: PUSH
24621: LD_VAR 0 2
24625: UNION
24626: ST_TO_ADDR
// end ;
24627: GO 24567
24629: POP
24630: POP
// end ;
24631: LD_VAR 0 1
24635: RET
// export function hHackInvisible ; var i , j ; begin
24636: LD_INT 0
24638: PPUSH
24639: PPUSH
24640: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24641: LD_ADDR_VAR 0 2
24645: PUSH
24646: LD_INT 21
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PPUSH
24656: CALL_OW 69
24660: PUSH
24661: FOR_IN
24662: IFFALSE 24686
// if IsSelected ( i ) then
24664: LD_VAR 0 2
24668: PPUSH
24669: CALL_OW 306
24673: IFFALSE 24684
// ComForceInvisible ( i ) ;
24675: LD_VAR 0 2
24679: PPUSH
24680: CALL_OW 496
24684: GO 24661
24686: POP
24687: POP
// end ;
24688: LD_VAR 0 1
24692: RET
// export function hHackChangeYourSide ; begin
24693: LD_INT 0
24695: PPUSH
// if your_side = 8 then
24696: LD_OWVAR 2
24700: PUSH
24701: LD_INT 8
24703: EQUAL
24704: IFFALSE 24716
// your_side := 0 else
24706: LD_ADDR_OWVAR 2
24710: PUSH
24711: LD_INT 0
24713: ST_TO_ADDR
24714: GO 24730
// your_side := your_side + 1 ;
24716: LD_ADDR_OWVAR 2
24720: PUSH
24721: LD_OWVAR 2
24725: PUSH
24726: LD_INT 1
24728: PLUS
24729: ST_TO_ADDR
// end ;
24730: LD_VAR 0 1
24734: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24735: LD_INT 0
24737: PPUSH
24738: PPUSH
24739: PPUSH
// for i in all_units do
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_OWVAR 3
24749: PUSH
24750: FOR_IN
24751: IFFALSE 24829
// if IsSelected ( i ) then
24753: LD_VAR 0 2
24757: PPUSH
24758: CALL_OW 306
24762: IFFALSE 24827
// begin j := GetSide ( i ) ;
24764: LD_ADDR_VAR 0 3
24768: PUSH
24769: LD_VAR 0 2
24773: PPUSH
24774: CALL_OW 255
24778: ST_TO_ADDR
// if j = 8 then
24779: LD_VAR 0 3
24783: PUSH
24784: LD_INT 8
24786: EQUAL
24787: IFFALSE 24799
// j := 0 else
24789: LD_ADDR_VAR 0 3
24793: PUSH
24794: LD_INT 0
24796: ST_TO_ADDR
24797: GO 24813
// j := j + 1 ;
24799: LD_ADDR_VAR 0 3
24803: PUSH
24804: LD_VAR 0 3
24808: PUSH
24809: LD_INT 1
24811: PLUS
24812: ST_TO_ADDR
// SetSide ( i , j ) ;
24813: LD_VAR 0 2
24817: PPUSH
24818: LD_VAR 0 3
24822: PPUSH
24823: CALL_OW 235
// end ;
24827: GO 24750
24829: POP
24830: POP
// end ;
24831: LD_VAR 0 1
24835: RET
// export function hHackFog ; begin
24836: LD_INT 0
24838: PPUSH
// FogOff ( true ) ;
24839: LD_INT 1
24841: PPUSH
24842: CALL_OW 344
// end ;
24846: LD_VAR 0 1
24850: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24851: LD_INT 0
24853: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24854: LD_VAR 0 1
24858: PPUSH
24859: LD_VAR 0 2
24863: PPUSH
24864: LD_VAR 0 3
24868: PPUSH
24869: LD_INT 1
24871: PPUSH
24872: LD_INT 1
24874: PPUSH
24875: CALL_OW 483
// CenterOnXY ( x , y ) ;
24879: LD_VAR 0 2
24883: PPUSH
24884: LD_VAR 0 3
24888: PPUSH
24889: CALL_OW 84
// end ;
24893: LD_VAR 0 4
24897: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24898: LD_INT 0
24900: PPUSH
24901: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24902: LD_VAR 0 1
24906: NOT
24907: PUSH
24908: LD_VAR 0 2
24912: PPUSH
24913: LD_VAR 0 3
24917: PPUSH
24918: CALL_OW 488
24922: NOT
24923: OR
24924: PUSH
24925: LD_VAR 0 1
24929: PPUSH
24930: CALL_OW 266
24934: PUSH
24935: LD_INT 3
24937: NONEQUAL
24938: PUSH
24939: LD_VAR 0 1
24943: PPUSH
24944: CALL_OW 247
24948: PUSH
24949: LD_INT 1
24951: EQUAL
24952: NOT
24953: AND
24954: OR
24955: IFFALSE 24959
// exit ;
24957: GO 25108
// if GetType ( factory ) = unit_human then
24959: LD_VAR 0 1
24963: PPUSH
24964: CALL_OW 247
24968: PUSH
24969: LD_INT 1
24971: EQUAL
24972: IFFALSE 24989
// factory := IsInUnit ( factory ) ;
24974: LD_ADDR_VAR 0 1
24978: PUSH
24979: LD_VAR 0 1
24983: PPUSH
24984: CALL_OW 310
24988: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24989: LD_VAR 0 1
24993: PPUSH
24994: CALL_OW 266
24998: PUSH
24999: LD_INT 3
25001: NONEQUAL
25002: IFFALSE 25006
// exit ;
25004: GO 25108
// if HexInfo ( x , y ) = factory then
25006: LD_VAR 0 2
25010: PPUSH
25011: LD_VAR 0 3
25015: PPUSH
25016: CALL_OW 428
25020: PUSH
25021: LD_VAR 0 1
25025: EQUAL
25026: IFFALSE 25053
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25028: LD_ADDR_EXP 103
25032: PUSH
25033: LD_EXP 103
25037: PPUSH
25038: LD_VAR 0 1
25042: PPUSH
25043: LD_INT 0
25045: PPUSH
25046: CALL_OW 1
25050: ST_TO_ADDR
25051: GO 25104
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25053: LD_ADDR_EXP 103
25057: PUSH
25058: LD_EXP 103
25062: PPUSH
25063: LD_VAR 0 1
25067: PPUSH
25068: LD_VAR 0 1
25072: PPUSH
25073: CALL_OW 255
25077: PUSH
25078: LD_VAR 0 1
25082: PUSH
25083: LD_VAR 0 2
25087: PUSH
25088: LD_VAR 0 3
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: PPUSH
25099: CALL_OW 1
25103: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25104: CALL 25113 0 0
// end ;
25108: LD_VAR 0 4
25112: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25113: LD_INT 0
25115: PPUSH
25116: PPUSH
25117: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25118: LD_STRING resetFactoryWaypoint();
25120: PPUSH
25121: CALL_OW 559
// if factoryWaypoints then
25125: LD_EXP 103
25129: IFFALSE 25255
// begin list := PrepareArray ( factoryWaypoints ) ;
25131: LD_ADDR_VAR 0 3
25135: PUSH
25136: LD_EXP 103
25140: PPUSH
25141: CALL 72560 0 1
25145: ST_TO_ADDR
// for i := 1 to list do
25146: LD_ADDR_VAR 0 2
25150: PUSH
25151: DOUBLE
25152: LD_INT 1
25154: DEC
25155: ST_TO_ADDR
25156: LD_VAR 0 3
25160: PUSH
25161: FOR_TO
25162: IFFALSE 25253
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25164: LD_STRING setFactoryWaypointXY(
25166: PUSH
25167: LD_VAR 0 3
25171: PUSH
25172: LD_VAR 0 2
25176: ARRAY
25177: PUSH
25178: LD_INT 1
25180: ARRAY
25181: STR
25182: PUSH
25183: LD_STRING ,
25185: STR
25186: PUSH
25187: LD_VAR 0 3
25191: PUSH
25192: LD_VAR 0 2
25196: ARRAY
25197: PUSH
25198: LD_INT 2
25200: ARRAY
25201: STR
25202: PUSH
25203: LD_STRING ,
25205: STR
25206: PUSH
25207: LD_VAR 0 3
25211: PUSH
25212: LD_VAR 0 2
25216: ARRAY
25217: PUSH
25218: LD_INT 3
25220: ARRAY
25221: STR
25222: PUSH
25223: LD_STRING ,
25225: STR
25226: PUSH
25227: LD_VAR 0 3
25231: PUSH
25232: LD_VAR 0 2
25236: ARRAY
25237: PUSH
25238: LD_INT 4
25240: ARRAY
25241: STR
25242: PUSH
25243: LD_STRING )
25245: STR
25246: PPUSH
25247: CALL_OW 559
25251: GO 25161
25253: POP
25254: POP
// end ; end ;
25255: LD_VAR 0 1
25259: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25260: LD_INT 0
25262: PPUSH
// if HexInfo ( x , y ) = warehouse then
25263: LD_VAR 0 2
25267: PPUSH
25268: LD_VAR 0 3
25272: PPUSH
25273: CALL_OW 428
25277: PUSH
25278: LD_VAR 0 1
25282: EQUAL
25283: IFFALSE 25310
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25285: LD_ADDR_EXP 104
25289: PUSH
25290: LD_EXP 104
25294: PPUSH
25295: LD_VAR 0 1
25299: PPUSH
25300: LD_INT 0
25302: PPUSH
25303: CALL_OW 1
25307: ST_TO_ADDR
25308: GO 25361
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25310: LD_ADDR_EXP 104
25314: PUSH
25315: LD_EXP 104
25319: PPUSH
25320: LD_VAR 0 1
25324: PPUSH
25325: LD_VAR 0 1
25329: PPUSH
25330: CALL_OW 255
25334: PUSH
25335: LD_VAR 0 1
25339: PUSH
25340: LD_VAR 0 2
25344: PUSH
25345: LD_VAR 0 3
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: PPUSH
25356: CALL_OW 1
25360: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25361: CALL 25370 0 0
// end ;
25365: LD_VAR 0 4
25369: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25370: LD_INT 0
25372: PPUSH
25373: PPUSH
25374: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25375: LD_STRING resetWarehouseGatheringPoints();
25377: PPUSH
25378: CALL_OW 559
// if warehouseGatheringPoints then
25382: LD_EXP 104
25386: IFFALSE 25512
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25388: LD_ADDR_VAR 0 3
25392: PUSH
25393: LD_EXP 104
25397: PPUSH
25398: CALL 72560 0 1
25402: ST_TO_ADDR
// for i := 1 to list do
25403: LD_ADDR_VAR 0 2
25407: PUSH
25408: DOUBLE
25409: LD_INT 1
25411: DEC
25412: ST_TO_ADDR
25413: LD_VAR 0 3
25417: PUSH
25418: FOR_TO
25419: IFFALSE 25510
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25421: LD_STRING setWarehouseGatheringPointXY(
25423: PUSH
25424: LD_VAR 0 3
25428: PUSH
25429: LD_VAR 0 2
25433: ARRAY
25434: PUSH
25435: LD_INT 1
25437: ARRAY
25438: STR
25439: PUSH
25440: LD_STRING ,
25442: STR
25443: PUSH
25444: LD_VAR 0 3
25448: PUSH
25449: LD_VAR 0 2
25453: ARRAY
25454: PUSH
25455: LD_INT 2
25457: ARRAY
25458: STR
25459: PUSH
25460: LD_STRING ,
25462: STR
25463: PUSH
25464: LD_VAR 0 3
25468: PUSH
25469: LD_VAR 0 2
25473: ARRAY
25474: PUSH
25475: LD_INT 3
25477: ARRAY
25478: STR
25479: PUSH
25480: LD_STRING ,
25482: STR
25483: PUSH
25484: LD_VAR 0 3
25488: PUSH
25489: LD_VAR 0 2
25493: ARRAY
25494: PUSH
25495: LD_INT 4
25497: ARRAY
25498: STR
25499: PUSH
25500: LD_STRING )
25502: STR
25503: PPUSH
25504: CALL_OW 559
25508: GO 25418
25510: POP
25511: POP
// end ; end ;
25512: LD_VAR 0 1
25516: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25517: LD_EXP 104
25521: IFFALSE 26206
25523: GO 25525
25525: DISABLE
25526: LD_INT 0
25528: PPUSH
25529: PPUSH
25530: PPUSH
25531: PPUSH
25532: PPUSH
25533: PPUSH
25534: PPUSH
25535: PPUSH
25536: PPUSH
// begin enable ;
25537: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25538: LD_ADDR_VAR 0 3
25542: PUSH
25543: LD_EXP 104
25547: PPUSH
25548: CALL 72560 0 1
25552: ST_TO_ADDR
// if not list then
25553: LD_VAR 0 3
25557: NOT
25558: IFFALSE 25562
// exit ;
25560: GO 26206
// for i := 1 to list do
25562: LD_ADDR_VAR 0 1
25566: PUSH
25567: DOUBLE
25568: LD_INT 1
25570: DEC
25571: ST_TO_ADDR
25572: LD_VAR 0 3
25576: PUSH
25577: FOR_TO
25578: IFFALSE 26204
// begin depot := list [ i ] [ 2 ] ;
25580: LD_ADDR_VAR 0 8
25584: PUSH
25585: LD_VAR 0 3
25589: PUSH
25590: LD_VAR 0 1
25594: ARRAY
25595: PUSH
25596: LD_INT 2
25598: ARRAY
25599: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25600: LD_ADDR_VAR 0 5
25604: PUSH
25605: LD_VAR 0 3
25609: PUSH
25610: LD_VAR 0 1
25614: ARRAY
25615: PUSH
25616: LD_INT 1
25618: ARRAY
25619: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25620: LD_VAR 0 8
25624: PPUSH
25625: CALL_OW 301
25629: PUSH
25630: LD_VAR 0 5
25634: PUSH
25635: LD_VAR 0 8
25639: PPUSH
25640: CALL_OW 255
25644: NONEQUAL
25645: OR
25646: IFFALSE 25675
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25648: LD_ADDR_EXP 104
25652: PUSH
25653: LD_EXP 104
25657: PPUSH
25658: LD_VAR 0 8
25662: PPUSH
25663: LD_INT 0
25665: PPUSH
25666: CALL_OW 1
25670: ST_TO_ADDR
// exit ;
25671: POP
25672: POP
25673: GO 26206
// end ; x := list [ i ] [ 3 ] ;
25675: LD_ADDR_VAR 0 6
25679: PUSH
25680: LD_VAR 0 3
25684: PUSH
25685: LD_VAR 0 1
25689: ARRAY
25690: PUSH
25691: LD_INT 3
25693: ARRAY
25694: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25695: LD_ADDR_VAR 0 7
25699: PUSH
25700: LD_VAR 0 3
25704: PUSH
25705: LD_VAR 0 1
25709: ARRAY
25710: PUSH
25711: LD_INT 4
25713: ARRAY
25714: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25715: LD_ADDR_VAR 0 9
25719: PUSH
25720: LD_VAR 0 6
25724: PPUSH
25725: LD_VAR 0 7
25729: PPUSH
25730: LD_INT 16
25732: PPUSH
25733: CALL 71148 0 3
25737: ST_TO_ADDR
// if not cratesNearbyPoint then
25738: LD_VAR 0 9
25742: NOT
25743: IFFALSE 25749
// exit ;
25745: POP
25746: POP
25747: GO 26206
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25749: LD_ADDR_VAR 0 4
25753: PUSH
25754: LD_INT 22
25756: PUSH
25757: LD_VAR 0 5
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: LD_INT 60
25771: PUSH
25772: EMPTY
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 91
25781: PUSH
25782: LD_VAR 0 8
25786: PUSH
25787: LD_INT 6
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 2
25797: PUSH
25798: LD_INT 25
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 25
25810: PUSH
25811: LD_INT 16
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: PPUSH
25829: CALL_OW 69
25833: PUSH
25834: LD_VAR 0 8
25838: PPUSH
25839: CALL_OW 313
25843: PPUSH
25844: LD_INT 3
25846: PUSH
25847: LD_INT 60
25849: PUSH
25850: EMPTY
25851: LIST
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 2
25859: PUSH
25860: LD_INT 25
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 25
25872: PUSH
25873: LD_INT 16
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: LIST
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PPUSH
25889: CALL_OW 72
25893: UNION
25894: ST_TO_ADDR
// if tmp then
25895: LD_VAR 0 4
25899: IFFALSE 25979
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25901: LD_ADDR_VAR 0 4
25905: PUSH
25906: LD_VAR 0 4
25910: PPUSH
25911: LD_INT 3
25913: PPUSH
25914: CALL 69117 0 2
25918: ST_TO_ADDR
// for j in tmp do
25919: LD_ADDR_VAR 0 2
25923: PUSH
25924: LD_VAR 0 4
25928: PUSH
25929: FOR_IN
25930: IFFALSE 25973
// begin if IsInUnit ( j ) then
25932: LD_VAR 0 2
25936: PPUSH
25937: CALL_OW 310
25941: IFFALSE 25952
// ComExit ( j ) ;
25943: LD_VAR 0 2
25947: PPUSH
25948: CALL 69200 0 1
// AddComCollect ( j , x , y ) ;
25952: LD_VAR 0 2
25956: PPUSH
25957: LD_VAR 0 6
25961: PPUSH
25962: LD_VAR 0 7
25966: PPUSH
25967: CALL_OW 177
// end ;
25971: GO 25929
25973: POP
25974: POP
// exit ;
25975: POP
25976: POP
25977: GO 26206
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25979: LD_ADDR_VAR 0 4
25983: PUSH
25984: LD_INT 22
25986: PUSH
25987: LD_VAR 0 5
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 91
25998: PUSH
25999: LD_VAR 0 8
26003: PUSH
26004: LD_INT 8
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: LD_INT 34
26017: PUSH
26018: LD_INT 12
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 34
26027: PUSH
26028: LD_INT 51
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 34
26037: PUSH
26038: LD_INT 32
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 34
26047: PUSH
26048: LD_INT 89
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: PPUSH
26067: CALL_OW 69
26071: ST_TO_ADDR
// if tmp then
26072: LD_VAR 0 4
26076: IFFALSE 26202
// begin for j in tmp do
26078: LD_ADDR_VAR 0 2
26082: PUSH
26083: LD_VAR 0 4
26087: PUSH
26088: FOR_IN
26089: IFFALSE 26200
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26091: LD_VAR 0 2
26095: PPUSH
26096: CALL_OW 262
26100: PUSH
26101: LD_INT 3
26103: EQUAL
26104: PUSH
26105: LD_VAR 0 2
26109: PPUSH
26110: CALL_OW 261
26114: PUSH
26115: LD_INT 20
26117: GREATER
26118: OR
26119: PUSH
26120: LD_VAR 0 2
26124: PPUSH
26125: CALL_OW 314
26129: NOT
26130: AND
26131: PUSH
26132: LD_VAR 0 2
26136: PPUSH
26137: CALL_OW 263
26141: PUSH
26142: LD_INT 1
26144: NONEQUAL
26145: PUSH
26146: LD_VAR 0 2
26150: PPUSH
26151: CALL_OW 311
26155: OR
26156: AND
26157: IFFALSE 26198
// begin ComCollect ( j , x , y ) ;
26159: LD_VAR 0 2
26163: PPUSH
26164: LD_VAR 0 6
26168: PPUSH
26169: LD_VAR 0 7
26173: PPUSH
26174: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26178: LD_VAR 0 2
26182: PPUSH
26183: LD_VAR 0 8
26187: PPUSH
26188: CALL_OW 172
// exit ;
26192: POP
26193: POP
26194: POP
26195: POP
26196: GO 26206
// end ;
26198: GO 26088
26200: POP
26201: POP
// end ; end ;
26202: GO 25577
26204: POP
26205: POP
// end ; end_of_file
26206: PPOPN 9
26208: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26209: LD_VAR 0 1
26213: PUSH
26214: LD_INT 200
26216: DOUBLE
26217: GREATEREQUAL
26218: IFFALSE 26226
26220: LD_INT 299
26222: DOUBLE
26223: LESSEQUAL
26224: IFTRUE 26228
26226: GO 26260
26228: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26229: LD_VAR 0 1
26233: PPUSH
26234: LD_VAR 0 2
26238: PPUSH
26239: LD_VAR 0 3
26243: PPUSH
26244: LD_VAR 0 4
26248: PPUSH
26249: LD_VAR 0 5
26253: PPUSH
26254: CALL 26748 0 5
26258: GO 26337
26260: LD_INT 300
26262: DOUBLE
26263: GREATEREQUAL
26264: IFFALSE 26272
26266: LD_INT 399
26268: DOUBLE
26269: LESSEQUAL
26270: IFTRUE 26274
26272: GO 26336
26274: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26275: LD_VAR 0 1
26279: PPUSH
26280: LD_VAR 0 2
26284: PPUSH
26285: LD_VAR 0 3
26289: PPUSH
26290: LD_VAR 0 4
26294: PPUSH
26295: LD_VAR 0 5
26299: PPUSH
26300: LD_VAR 0 6
26304: PPUSH
26305: LD_VAR 0 7
26309: PPUSH
26310: LD_VAR 0 8
26314: PPUSH
26315: LD_VAR 0 9
26319: PPUSH
26320: LD_VAR 0 10
26324: PPUSH
26325: LD_VAR 0 11
26329: PPUSH
26330: CALL 22910 0 11
26334: GO 26337
26336: POP
// end ;
26337: PPOPN 11
26339: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26340: LD_VAR 0 1
26344: PPUSH
26345: LD_VAR 0 2
26349: PPUSH
26350: LD_VAR 0 3
26354: PPUSH
26355: LD_VAR 0 4
26359: PPUSH
26360: LD_VAR 0 5
26364: PPUSH
26365: CALL 26484 0 5
// end ; end_of_file
26369: PPOPN 5
26371: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26378: LD_VAR 0 1
26382: PPUSH
26383: CALL_OW 264
26387: PUSH
26388: LD_INT 91
26390: EQUAL
26391: IFFALSE 26463
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26393: LD_INT 68
26395: PPUSH
26396: LD_VAR 0 1
26400: PPUSH
26401: CALL_OW 255
26405: PPUSH
26406: CALL_OW 321
26410: PUSH
26411: LD_INT 2
26413: EQUAL
26414: IFFALSE 26426
// eff := 70 else
26416: LD_ADDR_VAR 0 4
26420: PUSH
26421: LD_INT 70
26423: ST_TO_ADDR
26424: GO 26434
// eff := 30 ;
26426: LD_ADDR_VAR 0 4
26430: PUSH
26431: LD_INT 30
26433: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26434: LD_VAR 0 1
26438: PPUSH
26439: CALL_OW 250
26443: PPUSH
26444: LD_VAR 0 1
26448: PPUSH
26449: CALL_OW 251
26453: PPUSH
26454: LD_VAR 0 4
26458: PPUSH
26459: CALL_OW 495
// end ; end ;
26463: LD_VAR 0 2
26467: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26468: LD_INT 0
26470: PPUSH
// end ;
26471: LD_VAR 0 4
26475: RET
// export function SOS_Command ( cmd ) ; begin
26476: LD_INT 0
26478: PPUSH
// end ;
26479: LD_VAR 0 2
26483: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26484: LD_INT 0
26486: PPUSH
// end ;
26487: LD_VAR 0 6
26491: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26492: LD_INT 0
26494: PPUSH
26495: PPUSH
// if not vehicle or not factory then
26496: LD_VAR 0 1
26500: NOT
26501: PUSH
26502: LD_VAR 0 2
26506: NOT
26507: OR
26508: IFFALSE 26512
// exit ;
26510: GO 26743
// if factoryWaypoints >= factory then
26512: LD_EXP 103
26516: PUSH
26517: LD_VAR 0 2
26521: GREATEREQUAL
26522: IFFALSE 26743
// if factoryWaypoints [ factory ] then
26524: LD_EXP 103
26528: PUSH
26529: LD_VAR 0 2
26533: ARRAY
26534: IFFALSE 26743
// begin if GetControl ( vehicle ) = control_manual then
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 263
26545: PUSH
26546: LD_INT 1
26548: EQUAL
26549: IFFALSE 26630
// begin driver := IsDrivenBy ( vehicle ) ;
26551: LD_ADDR_VAR 0 4
26555: PUSH
26556: LD_VAR 0 1
26560: PPUSH
26561: CALL_OW 311
26565: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26566: LD_VAR 0 4
26570: PPUSH
26571: LD_EXP 103
26575: PUSH
26576: LD_VAR 0 2
26580: ARRAY
26581: PUSH
26582: LD_INT 3
26584: ARRAY
26585: PPUSH
26586: LD_EXP 103
26590: PUSH
26591: LD_VAR 0 2
26595: ARRAY
26596: PUSH
26597: LD_INT 4
26599: ARRAY
26600: PPUSH
26601: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26605: LD_VAR 0 4
26609: PPUSH
26610: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26614: LD_VAR 0 4
26618: PPUSH
26619: LD_VAR 0 2
26623: PPUSH
26624: CALL_OW 180
// end else
26628: GO 26743
// if GetControl ( vehicle ) = control_remote then
26630: LD_VAR 0 1
26634: PPUSH
26635: CALL_OW 263
26639: PUSH
26640: LD_INT 2
26642: EQUAL
26643: IFFALSE 26704
// begin wait ( 0 0$2 ) ;
26645: LD_INT 70
26647: PPUSH
26648: CALL_OW 67
// if Connect ( vehicle ) then
26652: LD_VAR 0 1
26656: PPUSH
26657: CALL 39408 0 1
26661: IFFALSE 26702
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26663: LD_VAR 0 1
26667: PPUSH
26668: LD_EXP 103
26672: PUSH
26673: LD_VAR 0 2
26677: ARRAY
26678: PUSH
26679: LD_INT 3
26681: ARRAY
26682: PPUSH
26683: LD_EXP 103
26687: PUSH
26688: LD_VAR 0 2
26692: ARRAY
26693: PUSH
26694: LD_INT 4
26696: ARRAY
26697: PPUSH
26698: CALL_OW 171
// end else
26702: GO 26743
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26704: LD_VAR 0 1
26708: PPUSH
26709: LD_EXP 103
26713: PUSH
26714: LD_VAR 0 2
26718: ARRAY
26719: PUSH
26720: LD_INT 3
26722: ARRAY
26723: PPUSH
26724: LD_EXP 103
26728: PUSH
26729: LD_VAR 0 2
26733: ARRAY
26734: PUSH
26735: LD_INT 4
26737: ARRAY
26738: PPUSH
26739: CALL_OW 171
// end ; end ;
26743: LD_VAR 0 3
26747: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26748: LD_INT 0
26750: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26751: LD_VAR 0 1
26755: PUSH
26756: LD_INT 250
26758: EQUAL
26759: PUSH
26760: LD_VAR 0 2
26764: PPUSH
26765: CALL_OW 264
26769: PUSH
26770: LD_INT 81
26772: EQUAL
26773: AND
26774: IFFALSE 26795
// MinerPlaceMine ( unit , x , y ) ;
26776: LD_VAR 0 2
26780: PPUSH
26781: LD_VAR 0 4
26785: PPUSH
26786: LD_VAR 0 5
26790: PPUSH
26791: CALL 29619 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26795: LD_VAR 0 1
26799: PUSH
26800: LD_INT 251
26802: EQUAL
26803: PUSH
26804: LD_VAR 0 2
26808: PPUSH
26809: CALL_OW 264
26813: PUSH
26814: LD_INT 81
26816: EQUAL
26817: AND
26818: IFFALSE 26839
// MinerDetonateMine ( unit , x , y ) ;
26820: LD_VAR 0 2
26824: PPUSH
26825: LD_VAR 0 4
26829: PPUSH
26830: LD_VAR 0 5
26834: PPUSH
26835: CALL 29894 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26839: LD_VAR 0 1
26843: PUSH
26844: LD_INT 252
26846: EQUAL
26847: PUSH
26848: LD_VAR 0 2
26852: PPUSH
26853: CALL_OW 264
26857: PUSH
26858: LD_INT 81
26860: EQUAL
26861: AND
26862: IFFALSE 26883
// MinerCreateMinefield ( unit , x , y ) ;
26864: LD_VAR 0 2
26868: PPUSH
26869: LD_VAR 0 4
26873: PPUSH
26874: LD_VAR 0 5
26878: PPUSH
26879: CALL 30311 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26883: LD_VAR 0 1
26887: PUSH
26888: LD_INT 253
26890: EQUAL
26891: PUSH
26892: LD_VAR 0 2
26896: PPUSH
26897: CALL_OW 257
26901: PUSH
26902: LD_INT 5
26904: EQUAL
26905: AND
26906: IFFALSE 26927
// ComBinocular ( unit , x , y ) ;
26908: LD_VAR 0 2
26912: PPUSH
26913: LD_VAR 0 4
26917: PPUSH
26918: LD_VAR 0 5
26922: PPUSH
26923: CALL 30680 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26927: LD_VAR 0 1
26931: PUSH
26932: LD_INT 254
26934: EQUAL
26935: PUSH
26936: LD_VAR 0 2
26940: PPUSH
26941: CALL_OW 264
26945: PUSH
26946: LD_INT 99
26948: EQUAL
26949: AND
26950: PUSH
26951: LD_VAR 0 3
26955: PPUSH
26956: CALL_OW 263
26960: PUSH
26961: LD_INT 3
26963: EQUAL
26964: AND
26965: IFFALSE 26981
// HackDestroyVehicle ( unit , selectedUnit ) ;
26967: LD_VAR 0 2
26971: PPUSH
26972: LD_VAR 0 3
26976: PPUSH
26977: CALL 28983 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26981: LD_VAR 0 1
26985: PUSH
26986: LD_INT 255
26988: EQUAL
26989: PUSH
26990: LD_VAR 0 2
26994: PPUSH
26995: CALL_OW 264
26999: PUSH
27000: LD_INT 14
27002: PUSH
27003: LD_INT 53
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: IN
27010: AND
27011: PUSH
27012: LD_VAR 0 4
27016: PPUSH
27017: LD_VAR 0 5
27021: PPUSH
27022: CALL_OW 488
27026: AND
27027: IFFALSE 27051
// CutTreeXYR ( unit , x , y , 12 ) ;
27029: LD_VAR 0 2
27033: PPUSH
27034: LD_VAR 0 4
27038: PPUSH
27039: LD_VAR 0 5
27043: PPUSH
27044: LD_INT 12
27046: PPUSH
27047: CALL 27146 0 4
// if cmd = 256 then
27051: LD_VAR 0 1
27055: PUSH
27056: LD_INT 256
27058: EQUAL
27059: IFFALSE 27080
// SetFactoryWaypoint ( unit , x , y ) ;
27061: LD_VAR 0 2
27065: PPUSH
27066: LD_VAR 0 4
27070: PPUSH
27071: LD_VAR 0 5
27075: PPUSH
27076: CALL 24898 0 3
// if cmd = 257 then
27080: LD_VAR 0 1
27084: PUSH
27085: LD_INT 257
27087: EQUAL
27088: IFFALSE 27109
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27090: LD_VAR 0 2
27094: PPUSH
27095: LD_VAR 0 4
27099: PPUSH
27100: LD_VAR 0 5
27104: PPUSH
27105: CALL 25260 0 3
// if cmd = 258 then
27109: LD_VAR 0 1
27113: PUSH
27114: LD_INT 258
27116: EQUAL
27117: IFFALSE 27141
// BurnTreeXYR ( unit , x , y , 8 ) ;
27119: LD_VAR 0 2
27123: PPUSH
27124: LD_VAR 0 4
27128: PPUSH
27129: LD_VAR 0 5
27133: PPUSH
27134: LD_INT 8
27136: PPUSH
27137: CALL 27540 0 4
// end ;
27141: LD_VAR 0 6
27145: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27146: LD_INT 0
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
27152: PPUSH
27153: PPUSH
27154: PPUSH
27155: PPUSH
27156: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27157: LD_VAR 0 1
27161: PPUSH
27162: CALL_OW 302
27166: NOT
27167: PUSH
27168: LD_VAR 0 2
27172: PPUSH
27173: LD_VAR 0 3
27177: PPUSH
27178: CALL_OW 488
27182: NOT
27183: OR
27184: PUSH
27185: LD_VAR 0 4
27189: NOT
27190: OR
27191: IFFALSE 27195
// exit ;
27193: GO 27535
// list := [ ] ;
27195: LD_ADDR_VAR 0 13
27199: PUSH
27200: EMPTY
27201: ST_TO_ADDR
// if x - r < 0 then
27202: LD_VAR 0 2
27206: PUSH
27207: LD_VAR 0 4
27211: MINUS
27212: PUSH
27213: LD_INT 0
27215: LESS
27216: IFFALSE 27228
// min_x := 0 else
27218: LD_ADDR_VAR 0 7
27222: PUSH
27223: LD_INT 0
27225: ST_TO_ADDR
27226: GO 27244
// min_x := x - r ;
27228: LD_ADDR_VAR 0 7
27232: PUSH
27233: LD_VAR 0 2
27237: PUSH
27238: LD_VAR 0 4
27242: MINUS
27243: ST_TO_ADDR
// if y - r < 0 then
27244: LD_VAR 0 3
27248: PUSH
27249: LD_VAR 0 4
27253: MINUS
27254: PUSH
27255: LD_INT 0
27257: LESS
27258: IFFALSE 27270
// min_y := 0 else
27260: LD_ADDR_VAR 0 8
27264: PUSH
27265: LD_INT 0
27267: ST_TO_ADDR
27268: GO 27286
// min_y := y - r ;
27270: LD_ADDR_VAR 0 8
27274: PUSH
27275: LD_VAR 0 3
27279: PUSH
27280: LD_VAR 0 4
27284: MINUS
27285: ST_TO_ADDR
// max_x := x + r ;
27286: LD_ADDR_VAR 0 9
27290: PUSH
27291: LD_VAR 0 2
27295: PUSH
27296: LD_VAR 0 4
27300: PLUS
27301: ST_TO_ADDR
// max_y := y + r ;
27302: LD_ADDR_VAR 0 10
27306: PUSH
27307: LD_VAR 0 3
27311: PUSH
27312: LD_VAR 0 4
27316: PLUS
27317: ST_TO_ADDR
// for _x = min_x to max_x do
27318: LD_ADDR_VAR 0 11
27322: PUSH
27323: DOUBLE
27324: LD_VAR 0 7
27328: DEC
27329: ST_TO_ADDR
27330: LD_VAR 0 9
27334: PUSH
27335: FOR_TO
27336: IFFALSE 27453
// for _y = min_y to max_y do
27338: LD_ADDR_VAR 0 12
27342: PUSH
27343: DOUBLE
27344: LD_VAR 0 8
27348: DEC
27349: ST_TO_ADDR
27350: LD_VAR 0 10
27354: PUSH
27355: FOR_TO
27356: IFFALSE 27449
// begin if not ValidHex ( _x , _y ) then
27358: LD_VAR 0 11
27362: PPUSH
27363: LD_VAR 0 12
27367: PPUSH
27368: CALL_OW 488
27372: NOT
27373: IFFALSE 27377
// continue ;
27375: GO 27355
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27377: LD_VAR 0 11
27381: PPUSH
27382: LD_VAR 0 12
27386: PPUSH
27387: CALL_OW 351
27391: PUSH
27392: LD_VAR 0 11
27396: PPUSH
27397: LD_VAR 0 12
27401: PPUSH
27402: CALL_OW 554
27406: AND
27407: IFFALSE 27447
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27409: LD_ADDR_VAR 0 13
27413: PUSH
27414: LD_VAR 0 13
27418: PPUSH
27419: LD_VAR 0 13
27423: PUSH
27424: LD_INT 1
27426: PLUS
27427: PPUSH
27428: LD_VAR 0 11
27432: PUSH
27433: LD_VAR 0 12
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PPUSH
27442: CALL_OW 2
27446: ST_TO_ADDR
// end ;
27447: GO 27355
27449: POP
27450: POP
27451: GO 27335
27453: POP
27454: POP
// if not list then
27455: LD_VAR 0 13
27459: NOT
27460: IFFALSE 27464
// exit ;
27462: GO 27535
// for i in list do
27464: LD_ADDR_VAR 0 6
27468: PUSH
27469: LD_VAR 0 13
27473: PUSH
27474: FOR_IN
27475: IFFALSE 27533
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27477: LD_VAR 0 1
27481: PPUSH
27482: LD_STRING M
27484: PUSH
27485: LD_VAR 0 6
27489: PUSH
27490: LD_INT 1
27492: ARRAY
27493: PUSH
27494: LD_VAR 0 6
27498: PUSH
27499: LD_INT 2
27501: ARRAY
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: PUSH
27524: EMPTY
27525: LIST
27526: PPUSH
27527: CALL_OW 447
27531: GO 27474
27533: POP
27534: POP
// end ;
27535: LD_VAR 0 5
27539: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27540: LD_INT 0
27542: PPUSH
27543: PPUSH
27544: PPUSH
27545: PPUSH
27546: PPUSH
27547: PPUSH
27548: PPUSH
27549: PPUSH
27550: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27551: LD_VAR 0 1
27555: PPUSH
27556: CALL_OW 302
27560: NOT
27561: PUSH
27562: LD_VAR 0 2
27566: PPUSH
27567: LD_VAR 0 3
27571: PPUSH
27572: CALL_OW 488
27576: NOT
27577: OR
27578: PUSH
27579: LD_VAR 0 4
27583: NOT
27584: OR
27585: IFFALSE 27589
// exit ;
27587: GO 27937
// list := [ ] ;
27589: LD_ADDR_VAR 0 13
27593: PUSH
27594: EMPTY
27595: ST_TO_ADDR
// if x - r < 0 then
27596: LD_VAR 0 2
27600: PUSH
27601: LD_VAR 0 4
27605: MINUS
27606: PUSH
27607: LD_INT 0
27609: LESS
27610: IFFALSE 27622
// min_x := 0 else
27612: LD_ADDR_VAR 0 7
27616: PUSH
27617: LD_INT 0
27619: ST_TO_ADDR
27620: GO 27638
// min_x := x - r ;
27622: LD_ADDR_VAR 0 7
27626: PUSH
27627: LD_VAR 0 2
27631: PUSH
27632: LD_VAR 0 4
27636: MINUS
27637: ST_TO_ADDR
// if y - r < 0 then
27638: LD_VAR 0 3
27642: PUSH
27643: LD_VAR 0 4
27647: MINUS
27648: PUSH
27649: LD_INT 0
27651: LESS
27652: IFFALSE 27664
// min_y := 0 else
27654: LD_ADDR_VAR 0 8
27658: PUSH
27659: LD_INT 0
27661: ST_TO_ADDR
27662: GO 27680
// min_y := y - r ;
27664: LD_ADDR_VAR 0 8
27668: PUSH
27669: LD_VAR 0 3
27673: PUSH
27674: LD_VAR 0 4
27678: MINUS
27679: ST_TO_ADDR
// max_x := x + r ;
27680: LD_ADDR_VAR 0 9
27684: PUSH
27685: LD_VAR 0 2
27689: PUSH
27690: LD_VAR 0 4
27694: PLUS
27695: ST_TO_ADDR
// max_y := y + r ;
27696: LD_ADDR_VAR 0 10
27700: PUSH
27701: LD_VAR 0 3
27705: PUSH
27706: LD_VAR 0 4
27710: PLUS
27711: ST_TO_ADDR
// for _x = min_x to max_x do
27712: LD_ADDR_VAR 0 11
27716: PUSH
27717: DOUBLE
27718: LD_VAR 0 7
27722: DEC
27723: ST_TO_ADDR
27724: LD_VAR 0 9
27728: PUSH
27729: FOR_TO
27730: IFFALSE 27847
// for _y = min_y to max_y do
27732: LD_ADDR_VAR 0 12
27736: PUSH
27737: DOUBLE
27738: LD_VAR 0 8
27742: DEC
27743: ST_TO_ADDR
27744: LD_VAR 0 10
27748: PUSH
27749: FOR_TO
27750: IFFALSE 27843
// begin if not ValidHex ( _x , _y ) then
27752: LD_VAR 0 11
27756: PPUSH
27757: LD_VAR 0 12
27761: PPUSH
27762: CALL_OW 488
27766: NOT
27767: IFFALSE 27771
// continue ;
27769: GO 27749
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27771: LD_VAR 0 11
27775: PPUSH
27776: LD_VAR 0 12
27780: PPUSH
27781: CALL_OW 351
27785: PUSH
27786: LD_VAR 0 11
27790: PPUSH
27791: LD_VAR 0 12
27795: PPUSH
27796: CALL_OW 554
27800: AND
27801: IFFALSE 27841
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27803: LD_ADDR_VAR 0 13
27807: PUSH
27808: LD_VAR 0 13
27812: PPUSH
27813: LD_VAR 0 13
27817: PUSH
27818: LD_INT 1
27820: PLUS
27821: PPUSH
27822: LD_VAR 0 11
27826: PUSH
27827: LD_VAR 0 12
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PPUSH
27836: CALL_OW 2
27840: ST_TO_ADDR
// end ;
27841: GO 27749
27843: POP
27844: POP
27845: GO 27729
27847: POP
27848: POP
// if not list then
27849: LD_VAR 0 13
27853: NOT
27854: IFFALSE 27858
// exit ;
27856: GO 27937
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27858: LD_ADDR_VAR 0 13
27862: PUSH
27863: LD_VAR 0 1
27867: PPUSH
27868: LD_VAR 0 13
27872: PPUSH
27873: LD_INT 1
27875: PPUSH
27876: LD_INT 1
27878: PPUSH
27879: CALL 36550 0 4
27883: ST_TO_ADDR
// ComStop ( flame ) ;
27884: LD_VAR 0 1
27888: PPUSH
27889: CALL_OW 141
// for i in list do
27893: LD_ADDR_VAR 0 6
27897: PUSH
27898: LD_VAR 0 13
27902: PUSH
27903: FOR_IN
27904: IFFALSE 27935
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27906: LD_VAR 0 1
27910: PPUSH
27911: LD_VAR 0 6
27915: PUSH
27916: LD_INT 1
27918: ARRAY
27919: PPUSH
27920: LD_VAR 0 6
27924: PUSH
27925: LD_INT 2
27927: ARRAY
27928: PPUSH
27929: CALL_OW 176
27933: GO 27903
27935: POP
27936: POP
// end ;
27937: LD_VAR 0 5
27941: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27942: LD_EXP 106
27946: NOT
27947: IFFALSE 27997
27949: GO 27951
27951: DISABLE
// begin initHack := true ;
27952: LD_ADDR_EXP 106
27956: PUSH
27957: LD_INT 1
27959: ST_TO_ADDR
// hackTanks := [ ] ;
27960: LD_ADDR_EXP 107
27964: PUSH
27965: EMPTY
27966: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27967: LD_ADDR_EXP 108
27971: PUSH
27972: EMPTY
27973: ST_TO_ADDR
// hackLimit := 3 ;
27974: LD_ADDR_EXP 109
27978: PUSH
27979: LD_INT 3
27981: ST_TO_ADDR
// hackDist := 12 ;
27982: LD_ADDR_EXP 110
27986: PUSH
27987: LD_INT 12
27989: ST_TO_ADDR
// hackCounter := [ ] ;
27990: LD_ADDR_EXP 111
27994: PUSH
27995: EMPTY
27996: ST_TO_ADDR
// end ;
27997: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27998: LD_EXP 106
28002: PUSH
28003: LD_INT 34
28005: PUSH
28006: LD_INT 99
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PPUSH
28013: CALL_OW 69
28017: AND
28018: IFFALSE 28271
28020: GO 28022
28022: DISABLE
28023: LD_INT 0
28025: PPUSH
28026: PPUSH
// begin enable ;
28027: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28028: LD_ADDR_VAR 0 1
28032: PUSH
28033: LD_INT 34
28035: PUSH
28036: LD_INT 99
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PPUSH
28043: CALL_OW 69
28047: PUSH
28048: FOR_IN
28049: IFFALSE 28269
// begin if not i in hackTanks then
28051: LD_VAR 0 1
28055: PUSH
28056: LD_EXP 107
28060: IN
28061: NOT
28062: IFFALSE 28145
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28064: LD_ADDR_EXP 107
28068: PUSH
28069: LD_EXP 107
28073: PPUSH
28074: LD_EXP 107
28078: PUSH
28079: LD_INT 1
28081: PLUS
28082: PPUSH
28083: LD_VAR 0 1
28087: PPUSH
28088: CALL_OW 1
28092: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28093: LD_ADDR_EXP 108
28097: PUSH
28098: LD_EXP 108
28102: PPUSH
28103: LD_EXP 108
28107: PUSH
28108: LD_INT 1
28110: PLUS
28111: PPUSH
28112: EMPTY
28113: PPUSH
28114: CALL_OW 1
28118: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28119: LD_ADDR_EXP 111
28123: PUSH
28124: LD_EXP 111
28128: PPUSH
28129: LD_EXP 111
28133: PUSH
28134: LD_INT 1
28136: PLUS
28137: PPUSH
28138: EMPTY
28139: PPUSH
28140: CALL_OW 1
28144: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28145: LD_VAR 0 1
28149: PPUSH
28150: CALL_OW 302
28154: NOT
28155: IFFALSE 28168
// begin HackUnlinkAll ( i ) ;
28157: LD_VAR 0 1
28161: PPUSH
28162: CALL 28274 0 1
// continue ;
28166: GO 28048
// end ; HackCheckCapturedStatus ( i ) ;
28168: LD_VAR 0 1
28172: PPUSH
28173: CALL 28717 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28177: LD_ADDR_VAR 0 2
28181: PUSH
28182: LD_INT 81
28184: PUSH
28185: LD_VAR 0 1
28189: PPUSH
28190: CALL_OW 255
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 33
28201: PUSH
28202: LD_INT 3
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 91
28211: PUSH
28212: LD_VAR 0 1
28216: PUSH
28217: LD_EXP 110
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 50
28229: PUSH
28230: EMPTY
28231: LIST
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: PPUSH
28239: CALL_OW 69
28243: ST_TO_ADDR
// if not tmp then
28244: LD_VAR 0 2
28248: NOT
28249: IFFALSE 28253
// continue ;
28251: GO 28048
// HackLink ( i , tmp ) ;
28253: LD_VAR 0 1
28257: PPUSH
28258: LD_VAR 0 2
28262: PPUSH
28263: CALL 28410 0 2
// end ;
28267: GO 28048
28269: POP
28270: POP
// end ;
28271: PPOPN 2
28273: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28274: LD_INT 0
28276: PPUSH
28277: PPUSH
28278: PPUSH
// if not hack in hackTanks then
28279: LD_VAR 0 1
28283: PUSH
28284: LD_EXP 107
28288: IN
28289: NOT
28290: IFFALSE 28294
// exit ;
28292: GO 28405
// index := GetElementIndex ( hackTanks , hack ) ;
28294: LD_ADDR_VAR 0 4
28298: PUSH
28299: LD_EXP 107
28303: PPUSH
28304: LD_VAR 0 1
28308: PPUSH
28309: CALL 35847 0 2
28313: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28314: LD_EXP 108
28318: PUSH
28319: LD_VAR 0 4
28323: ARRAY
28324: IFFALSE 28405
// begin for i in hackTanksCaptured [ index ] do
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_EXP 108
28335: PUSH
28336: LD_VAR 0 4
28340: ARRAY
28341: PUSH
28342: FOR_IN
28343: IFFALSE 28369
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28345: LD_VAR 0 3
28349: PUSH
28350: LD_INT 1
28352: ARRAY
28353: PPUSH
28354: LD_VAR 0 3
28358: PUSH
28359: LD_INT 2
28361: ARRAY
28362: PPUSH
28363: CALL_OW 235
28367: GO 28342
28369: POP
28370: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28371: LD_ADDR_EXP 108
28375: PUSH
28376: LD_EXP 108
28380: PPUSH
28381: LD_VAR 0 4
28385: PPUSH
28386: EMPTY
28387: PPUSH
28388: CALL_OW 1
28392: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28393: LD_VAR 0 1
28397: PPUSH
28398: LD_INT 0
28400: PPUSH
28401: CALL_OW 505
// end ; end ;
28405: LD_VAR 0 2
28409: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28410: LD_INT 0
28412: PPUSH
28413: PPUSH
28414: PPUSH
// if not hack in hackTanks or not vehicles then
28415: LD_VAR 0 1
28419: PUSH
28420: LD_EXP 107
28424: IN
28425: NOT
28426: PUSH
28427: LD_VAR 0 2
28431: NOT
28432: OR
28433: IFFALSE 28437
// exit ;
28435: GO 28712
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28437: LD_ADDR_VAR 0 2
28441: PUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: LD_VAR 0 2
28451: PPUSH
28452: LD_INT 1
28454: PPUSH
28455: LD_INT 1
28457: PPUSH
28458: CALL 36497 0 4
28462: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28463: LD_ADDR_VAR 0 5
28467: PUSH
28468: LD_EXP 107
28472: PPUSH
28473: LD_VAR 0 1
28477: PPUSH
28478: CALL 35847 0 2
28482: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28483: LD_EXP 108
28487: PUSH
28488: LD_VAR 0 5
28492: ARRAY
28493: PUSH
28494: LD_EXP 109
28498: LESS
28499: IFFALSE 28688
// begin for i := 1 to vehicles do
28501: LD_ADDR_VAR 0 4
28505: PUSH
28506: DOUBLE
28507: LD_INT 1
28509: DEC
28510: ST_TO_ADDR
28511: LD_VAR 0 2
28515: PUSH
28516: FOR_TO
28517: IFFALSE 28686
// begin if hackTanksCaptured [ index ] = hackLimit then
28519: LD_EXP 108
28523: PUSH
28524: LD_VAR 0 5
28528: ARRAY
28529: PUSH
28530: LD_EXP 109
28534: EQUAL
28535: IFFALSE 28539
// break ;
28537: GO 28686
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28539: LD_ADDR_EXP 111
28543: PUSH
28544: LD_EXP 111
28548: PPUSH
28549: LD_VAR 0 5
28553: PPUSH
28554: LD_EXP 111
28558: PUSH
28559: LD_VAR 0 5
28563: ARRAY
28564: PUSH
28565: LD_INT 1
28567: PLUS
28568: PPUSH
28569: CALL_OW 1
28573: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28574: LD_ADDR_EXP 108
28578: PUSH
28579: LD_EXP 108
28583: PPUSH
28584: LD_VAR 0 5
28588: PUSH
28589: LD_EXP 108
28593: PUSH
28594: LD_VAR 0 5
28598: ARRAY
28599: PUSH
28600: LD_INT 1
28602: PLUS
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PPUSH
28608: LD_VAR 0 2
28612: PUSH
28613: LD_VAR 0 4
28617: ARRAY
28618: PUSH
28619: LD_VAR 0 2
28623: PUSH
28624: LD_VAR 0 4
28628: ARRAY
28629: PPUSH
28630: CALL_OW 255
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PPUSH
28639: CALL 36062 0 3
28643: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28644: LD_VAR 0 2
28648: PUSH
28649: LD_VAR 0 4
28653: ARRAY
28654: PPUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 255
28664: PPUSH
28665: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28669: LD_VAR 0 2
28673: PUSH
28674: LD_VAR 0 4
28678: ARRAY
28679: PPUSH
28680: CALL_OW 141
// end ;
28684: GO 28516
28686: POP
28687: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28688: LD_VAR 0 1
28692: PPUSH
28693: LD_EXP 108
28697: PUSH
28698: LD_VAR 0 5
28702: ARRAY
28703: PUSH
28704: LD_INT 0
28706: PLUS
28707: PPUSH
28708: CALL_OW 505
// end ;
28712: LD_VAR 0 3
28716: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28717: LD_INT 0
28719: PPUSH
28720: PPUSH
28721: PPUSH
28722: PPUSH
// if not hack in hackTanks then
28723: LD_VAR 0 1
28727: PUSH
28728: LD_EXP 107
28732: IN
28733: NOT
28734: IFFALSE 28738
// exit ;
28736: GO 28978
// index := GetElementIndex ( hackTanks , hack ) ;
28738: LD_ADDR_VAR 0 4
28742: PUSH
28743: LD_EXP 107
28747: PPUSH
28748: LD_VAR 0 1
28752: PPUSH
28753: CALL 35847 0 2
28757: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28758: LD_ADDR_VAR 0 3
28762: PUSH
28763: DOUBLE
28764: LD_EXP 108
28768: PUSH
28769: LD_VAR 0 4
28773: ARRAY
28774: INC
28775: ST_TO_ADDR
28776: LD_INT 1
28778: PUSH
28779: FOR_DOWNTO
28780: IFFALSE 28952
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28782: LD_ADDR_VAR 0 5
28786: PUSH
28787: LD_EXP 108
28791: PUSH
28792: LD_VAR 0 4
28796: ARRAY
28797: PUSH
28798: LD_VAR 0 3
28802: ARRAY
28803: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28804: LD_VAR 0 5
28808: PUSH
28809: LD_INT 1
28811: ARRAY
28812: PPUSH
28813: CALL_OW 302
28817: NOT
28818: PUSH
28819: LD_VAR 0 5
28823: PUSH
28824: LD_INT 1
28826: ARRAY
28827: PPUSH
28828: CALL_OW 255
28832: PUSH
28833: LD_VAR 0 1
28837: PPUSH
28838: CALL_OW 255
28842: NONEQUAL
28843: OR
28844: IFFALSE 28950
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28846: LD_VAR 0 5
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: PPUSH
28855: CALL_OW 305
28859: PUSH
28860: LD_VAR 0 5
28864: PUSH
28865: LD_INT 1
28867: ARRAY
28868: PPUSH
28869: CALL_OW 255
28873: PUSH
28874: LD_VAR 0 1
28878: PPUSH
28879: CALL_OW 255
28883: EQUAL
28884: AND
28885: IFFALSE 28909
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28887: LD_VAR 0 5
28891: PUSH
28892: LD_INT 1
28894: ARRAY
28895: PPUSH
28896: LD_VAR 0 5
28900: PUSH
28901: LD_INT 2
28903: ARRAY
28904: PPUSH
28905: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28909: LD_ADDR_EXP 108
28913: PUSH
28914: LD_EXP 108
28918: PPUSH
28919: LD_VAR 0 4
28923: PPUSH
28924: LD_EXP 108
28928: PUSH
28929: LD_VAR 0 4
28933: ARRAY
28934: PPUSH
28935: LD_VAR 0 3
28939: PPUSH
28940: CALL_OW 3
28944: PPUSH
28945: CALL_OW 1
28949: ST_TO_ADDR
// end ; end ;
28950: GO 28779
28952: POP
28953: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28954: LD_VAR 0 1
28958: PPUSH
28959: LD_EXP 108
28963: PUSH
28964: LD_VAR 0 4
28968: ARRAY
28969: PUSH
28970: LD_INT 0
28972: PLUS
28973: PPUSH
28974: CALL_OW 505
// end ;
28978: LD_VAR 0 2
28982: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28983: LD_INT 0
28985: PPUSH
28986: PPUSH
28987: PPUSH
28988: PPUSH
// if not hack in hackTanks then
28989: LD_VAR 0 1
28993: PUSH
28994: LD_EXP 107
28998: IN
28999: NOT
29000: IFFALSE 29004
// exit ;
29002: GO 29089
// index := GetElementIndex ( hackTanks , hack ) ;
29004: LD_ADDR_VAR 0 5
29008: PUSH
29009: LD_EXP 107
29013: PPUSH
29014: LD_VAR 0 1
29018: PPUSH
29019: CALL 35847 0 2
29023: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29024: LD_ADDR_VAR 0 4
29028: PUSH
29029: DOUBLE
29030: LD_INT 1
29032: DEC
29033: ST_TO_ADDR
29034: LD_EXP 108
29038: PUSH
29039: LD_VAR 0 5
29043: ARRAY
29044: PUSH
29045: FOR_TO
29046: IFFALSE 29087
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29048: LD_EXP 108
29052: PUSH
29053: LD_VAR 0 5
29057: ARRAY
29058: PUSH
29059: LD_VAR 0 4
29063: ARRAY
29064: PUSH
29065: LD_INT 1
29067: ARRAY
29068: PUSH
29069: LD_VAR 0 2
29073: EQUAL
29074: IFFALSE 29085
// KillUnit ( vehicle ) ;
29076: LD_VAR 0 2
29080: PPUSH
29081: CALL_OW 66
29085: GO 29045
29087: POP
29088: POP
// end ;
29089: LD_VAR 0 3
29093: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29094: LD_EXP 112
29098: NOT
29099: IFFALSE 29134
29101: GO 29103
29103: DISABLE
// begin initMiner := true ;
29104: LD_ADDR_EXP 112
29108: PUSH
29109: LD_INT 1
29111: ST_TO_ADDR
// minersList := [ ] ;
29112: LD_ADDR_EXP 113
29116: PUSH
29117: EMPTY
29118: ST_TO_ADDR
// minerMinesList := [ ] ;
29119: LD_ADDR_EXP 114
29123: PUSH
29124: EMPTY
29125: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29126: LD_ADDR_EXP 115
29130: PUSH
29131: LD_INT 5
29133: ST_TO_ADDR
// end ;
29134: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29135: LD_EXP 112
29139: PUSH
29140: LD_INT 34
29142: PUSH
29143: LD_INT 81
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PPUSH
29150: CALL_OW 69
29154: AND
29155: IFFALSE 29616
29157: GO 29159
29159: DISABLE
29160: LD_INT 0
29162: PPUSH
29163: PPUSH
29164: PPUSH
29165: PPUSH
// begin enable ;
29166: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29167: LD_ADDR_VAR 0 1
29171: PUSH
29172: LD_INT 34
29174: PUSH
29175: LD_INT 81
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PPUSH
29182: CALL_OW 69
29186: PUSH
29187: FOR_IN
29188: IFFALSE 29260
// begin if not i in minersList then
29190: LD_VAR 0 1
29194: PUSH
29195: LD_EXP 113
29199: IN
29200: NOT
29201: IFFALSE 29258
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29203: LD_ADDR_EXP 113
29207: PUSH
29208: LD_EXP 113
29212: PPUSH
29213: LD_EXP 113
29217: PUSH
29218: LD_INT 1
29220: PLUS
29221: PPUSH
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL_OW 1
29231: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29232: LD_ADDR_EXP 114
29236: PUSH
29237: LD_EXP 114
29241: PPUSH
29242: LD_EXP 114
29246: PUSH
29247: LD_INT 1
29249: PLUS
29250: PPUSH
29251: EMPTY
29252: PPUSH
29253: CALL_OW 1
29257: ST_TO_ADDR
// end end ;
29258: GO 29187
29260: POP
29261: POP
// for i := minerMinesList downto 1 do
29262: LD_ADDR_VAR 0 1
29266: PUSH
29267: DOUBLE
29268: LD_EXP 114
29272: INC
29273: ST_TO_ADDR
29274: LD_INT 1
29276: PUSH
29277: FOR_DOWNTO
29278: IFFALSE 29614
// begin if IsLive ( minersList [ i ] ) then
29280: LD_EXP 113
29284: PUSH
29285: LD_VAR 0 1
29289: ARRAY
29290: PPUSH
29291: CALL_OW 300
29295: IFFALSE 29323
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29297: LD_EXP 113
29301: PUSH
29302: LD_VAR 0 1
29306: ARRAY
29307: PPUSH
29308: LD_EXP 114
29312: PUSH
29313: LD_VAR 0 1
29317: ARRAY
29318: PPUSH
29319: CALL_OW 505
// if not minerMinesList [ i ] then
29323: LD_EXP 114
29327: PUSH
29328: LD_VAR 0 1
29332: ARRAY
29333: NOT
29334: IFFALSE 29338
// continue ;
29336: GO 29277
// for j := minerMinesList [ i ] downto 1 do
29338: LD_ADDR_VAR 0 2
29342: PUSH
29343: DOUBLE
29344: LD_EXP 114
29348: PUSH
29349: LD_VAR 0 1
29353: ARRAY
29354: INC
29355: ST_TO_ADDR
29356: LD_INT 1
29358: PUSH
29359: FOR_DOWNTO
29360: IFFALSE 29610
// begin side := GetSide ( minersList [ i ] ) ;
29362: LD_ADDR_VAR 0 3
29366: PUSH
29367: LD_EXP 113
29371: PUSH
29372: LD_VAR 0 1
29376: ARRAY
29377: PPUSH
29378: CALL_OW 255
29382: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29383: LD_ADDR_VAR 0 4
29387: PUSH
29388: LD_EXP 114
29392: PUSH
29393: LD_VAR 0 1
29397: ARRAY
29398: PUSH
29399: LD_VAR 0 2
29403: ARRAY
29404: PUSH
29405: LD_INT 1
29407: ARRAY
29408: PPUSH
29409: LD_EXP 114
29413: PUSH
29414: LD_VAR 0 1
29418: ARRAY
29419: PUSH
29420: LD_VAR 0 2
29424: ARRAY
29425: PUSH
29426: LD_INT 2
29428: ARRAY
29429: PPUSH
29430: CALL_OW 428
29434: ST_TO_ADDR
// if not tmp then
29435: LD_VAR 0 4
29439: NOT
29440: IFFALSE 29444
// continue ;
29442: GO 29359
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29444: LD_VAR 0 4
29448: PUSH
29449: LD_INT 81
29451: PUSH
29452: LD_VAR 0 3
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PPUSH
29461: CALL_OW 69
29465: IN
29466: PUSH
29467: LD_EXP 114
29471: PUSH
29472: LD_VAR 0 1
29476: ARRAY
29477: PUSH
29478: LD_VAR 0 2
29482: ARRAY
29483: PUSH
29484: LD_INT 1
29486: ARRAY
29487: PPUSH
29488: LD_EXP 114
29492: PUSH
29493: LD_VAR 0 1
29497: ARRAY
29498: PUSH
29499: LD_VAR 0 2
29503: ARRAY
29504: PUSH
29505: LD_INT 2
29507: ARRAY
29508: PPUSH
29509: CALL_OW 458
29513: AND
29514: IFFALSE 29608
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29516: LD_EXP 114
29520: PUSH
29521: LD_VAR 0 1
29525: ARRAY
29526: PUSH
29527: LD_VAR 0 2
29531: ARRAY
29532: PUSH
29533: LD_INT 1
29535: ARRAY
29536: PPUSH
29537: LD_EXP 114
29541: PUSH
29542: LD_VAR 0 1
29546: ARRAY
29547: PUSH
29548: LD_VAR 0 2
29552: ARRAY
29553: PUSH
29554: LD_INT 2
29556: ARRAY
29557: PPUSH
29558: LD_VAR 0 3
29562: PPUSH
29563: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29567: LD_ADDR_EXP 114
29571: PUSH
29572: LD_EXP 114
29576: PPUSH
29577: LD_VAR 0 1
29581: PPUSH
29582: LD_EXP 114
29586: PUSH
29587: LD_VAR 0 1
29591: ARRAY
29592: PPUSH
29593: LD_VAR 0 2
29597: PPUSH
29598: CALL_OW 3
29602: PPUSH
29603: CALL_OW 1
29607: ST_TO_ADDR
// end ; end ;
29608: GO 29359
29610: POP
29611: POP
// end ;
29612: GO 29277
29614: POP
29615: POP
// end ;
29616: PPOPN 4
29618: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29619: LD_INT 0
29621: PPUSH
29622: PPUSH
// result := false ;
29623: LD_ADDR_VAR 0 4
29627: PUSH
29628: LD_INT 0
29630: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29631: LD_VAR 0 1
29635: PPUSH
29636: CALL_OW 264
29640: PUSH
29641: LD_INT 81
29643: EQUAL
29644: NOT
29645: IFFALSE 29649
// exit ;
29647: GO 29889
// index := GetElementIndex ( minersList , unit ) ;
29649: LD_ADDR_VAR 0 5
29653: PUSH
29654: LD_EXP 113
29658: PPUSH
29659: LD_VAR 0 1
29663: PPUSH
29664: CALL 35847 0 2
29668: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29669: LD_EXP 114
29673: PUSH
29674: LD_VAR 0 5
29678: ARRAY
29679: PUSH
29680: LD_EXP 115
29684: GREATEREQUAL
29685: IFFALSE 29689
// exit ;
29687: GO 29889
// ComMoveXY ( unit , x , y ) ;
29689: LD_VAR 0 1
29693: PPUSH
29694: LD_VAR 0 2
29698: PPUSH
29699: LD_VAR 0 3
29703: PPUSH
29704: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29708: LD_INT 35
29710: PPUSH
29711: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29715: LD_VAR 0 1
29719: PPUSH
29720: LD_VAR 0 2
29724: PPUSH
29725: LD_VAR 0 3
29729: PPUSH
29730: CALL 67599 0 3
29734: NOT
29735: PUSH
29736: LD_VAR 0 1
29740: PPUSH
29741: CALL_OW 314
29745: AND
29746: IFFALSE 29750
// exit ;
29748: GO 29889
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29750: LD_VAR 0 2
29754: PPUSH
29755: LD_VAR 0 3
29759: PPUSH
29760: CALL_OW 428
29764: PUSH
29765: LD_VAR 0 1
29769: EQUAL
29770: PUSH
29771: LD_VAR 0 1
29775: PPUSH
29776: CALL_OW 314
29780: NOT
29781: AND
29782: IFFALSE 29708
// PlaySoundXY ( x , y , PlantMine ) ;
29784: LD_VAR 0 2
29788: PPUSH
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_STRING PlantMine
29796: PPUSH
29797: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29801: LD_VAR 0 2
29805: PPUSH
29806: LD_VAR 0 3
29810: PPUSH
29811: LD_VAR 0 1
29815: PPUSH
29816: CALL_OW 255
29820: PPUSH
29821: LD_INT 0
29823: PPUSH
29824: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29828: LD_ADDR_EXP 114
29832: PUSH
29833: LD_EXP 114
29837: PPUSH
29838: LD_VAR 0 5
29842: PUSH
29843: LD_EXP 114
29847: PUSH
29848: LD_VAR 0 5
29852: ARRAY
29853: PUSH
29854: LD_INT 1
29856: PLUS
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PPUSH
29862: LD_VAR 0 2
29866: PUSH
29867: LD_VAR 0 3
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PPUSH
29876: CALL 36062 0 3
29880: ST_TO_ADDR
// result := true ;
29881: LD_ADDR_VAR 0 4
29885: PUSH
29886: LD_INT 1
29888: ST_TO_ADDR
// end ;
29889: LD_VAR 0 4
29893: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29894: LD_INT 0
29896: PPUSH
29897: PPUSH
29898: PPUSH
// if not unit in minersList then
29899: LD_VAR 0 1
29903: PUSH
29904: LD_EXP 113
29908: IN
29909: NOT
29910: IFFALSE 29914
// exit ;
29912: GO 30306
// index := GetElementIndex ( minersList , unit ) ;
29914: LD_ADDR_VAR 0 6
29918: PUSH
29919: LD_EXP 113
29923: PPUSH
29924: LD_VAR 0 1
29928: PPUSH
29929: CALL 35847 0 2
29933: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29934: LD_ADDR_VAR 0 5
29938: PUSH
29939: DOUBLE
29940: LD_EXP 114
29944: PUSH
29945: LD_VAR 0 6
29949: ARRAY
29950: INC
29951: ST_TO_ADDR
29952: LD_INT 1
29954: PUSH
29955: FOR_DOWNTO
29956: IFFALSE 30117
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29958: LD_EXP 114
29962: PUSH
29963: LD_VAR 0 6
29967: ARRAY
29968: PUSH
29969: LD_VAR 0 5
29973: ARRAY
29974: PUSH
29975: LD_INT 1
29977: ARRAY
29978: PUSH
29979: LD_VAR 0 2
29983: EQUAL
29984: PUSH
29985: LD_EXP 114
29989: PUSH
29990: LD_VAR 0 6
29994: ARRAY
29995: PUSH
29996: LD_VAR 0 5
30000: ARRAY
30001: PUSH
30002: LD_INT 2
30004: ARRAY
30005: PUSH
30006: LD_VAR 0 3
30010: EQUAL
30011: AND
30012: IFFALSE 30115
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30014: LD_EXP 114
30018: PUSH
30019: LD_VAR 0 6
30023: ARRAY
30024: PUSH
30025: LD_VAR 0 5
30029: ARRAY
30030: PUSH
30031: LD_INT 1
30033: ARRAY
30034: PPUSH
30035: LD_EXP 114
30039: PUSH
30040: LD_VAR 0 6
30044: ARRAY
30045: PUSH
30046: LD_VAR 0 5
30050: ARRAY
30051: PUSH
30052: LD_INT 2
30054: ARRAY
30055: PPUSH
30056: LD_VAR 0 1
30060: PPUSH
30061: CALL_OW 255
30065: PPUSH
30066: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30070: LD_ADDR_EXP 114
30074: PUSH
30075: LD_EXP 114
30079: PPUSH
30080: LD_VAR 0 6
30084: PPUSH
30085: LD_EXP 114
30089: PUSH
30090: LD_VAR 0 6
30094: ARRAY
30095: PPUSH
30096: LD_VAR 0 5
30100: PPUSH
30101: CALL_OW 3
30105: PPUSH
30106: CALL_OW 1
30110: ST_TO_ADDR
// exit ;
30111: POP
30112: POP
30113: GO 30306
// end ; end ;
30115: GO 29955
30117: POP
30118: POP
// for i := minerMinesList [ index ] downto 1 do
30119: LD_ADDR_VAR 0 5
30123: PUSH
30124: DOUBLE
30125: LD_EXP 114
30129: PUSH
30130: LD_VAR 0 6
30134: ARRAY
30135: INC
30136: ST_TO_ADDR
30137: LD_INT 1
30139: PUSH
30140: FOR_DOWNTO
30141: IFFALSE 30304
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30143: LD_EXP 114
30147: PUSH
30148: LD_VAR 0 6
30152: ARRAY
30153: PUSH
30154: LD_VAR 0 5
30158: ARRAY
30159: PUSH
30160: LD_INT 1
30162: ARRAY
30163: PPUSH
30164: LD_EXP 114
30168: PUSH
30169: LD_VAR 0 6
30173: ARRAY
30174: PUSH
30175: LD_VAR 0 5
30179: ARRAY
30180: PUSH
30181: LD_INT 2
30183: ARRAY
30184: PPUSH
30185: LD_VAR 0 2
30189: PPUSH
30190: LD_VAR 0 3
30194: PPUSH
30195: CALL_OW 298
30199: PUSH
30200: LD_INT 6
30202: LESS
30203: IFFALSE 30302
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30205: LD_EXP 114
30209: PUSH
30210: LD_VAR 0 6
30214: ARRAY
30215: PUSH
30216: LD_VAR 0 5
30220: ARRAY
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: LD_EXP 114
30230: PUSH
30231: LD_VAR 0 6
30235: ARRAY
30236: PUSH
30237: LD_VAR 0 5
30241: ARRAY
30242: PUSH
30243: LD_INT 2
30245: ARRAY
30246: PPUSH
30247: LD_VAR 0 1
30251: PPUSH
30252: CALL_OW 255
30256: PPUSH
30257: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30261: LD_ADDR_EXP 114
30265: PUSH
30266: LD_EXP 114
30270: PPUSH
30271: LD_VAR 0 6
30275: PPUSH
30276: LD_EXP 114
30280: PUSH
30281: LD_VAR 0 6
30285: ARRAY
30286: PPUSH
30287: LD_VAR 0 5
30291: PPUSH
30292: CALL_OW 3
30296: PPUSH
30297: CALL_OW 1
30301: ST_TO_ADDR
// end ; end ;
30302: GO 30140
30304: POP
30305: POP
// end ;
30306: LD_VAR 0 4
30310: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30311: LD_INT 0
30313: PPUSH
30314: PPUSH
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
30321: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30322: LD_VAR 0 1
30326: PPUSH
30327: CALL_OW 264
30331: PUSH
30332: LD_INT 81
30334: EQUAL
30335: NOT
30336: PUSH
30337: LD_VAR 0 1
30341: PUSH
30342: LD_EXP 113
30346: IN
30347: NOT
30348: OR
30349: IFFALSE 30353
// exit ;
30351: GO 30675
// index := GetElementIndex ( minersList , unit ) ;
30353: LD_ADDR_VAR 0 6
30357: PUSH
30358: LD_EXP 113
30362: PPUSH
30363: LD_VAR 0 1
30367: PPUSH
30368: CALL 35847 0 2
30372: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30373: LD_ADDR_VAR 0 8
30377: PUSH
30378: LD_EXP 115
30382: PUSH
30383: LD_EXP 114
30387: PUSH
30388: LD_VAR 0 6
30392: ARRAY
30393: MINUS
30394: ST_TO_ADDR
// if not minesFreeAmount then
30395: LD_VAR 0 8
30399: NOT
30400: IFFALSE 30404
// exit ;
30402: GO 30675
// tmp := [ ] ;
30404: LD_ADDR_VAR 0 7
30408: PUSH
30409: EMPTY
30410: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30411: LD_ADDR_VAR 0 5
30415: PUSH
30416: DOUBLE
30417: LD_INT 1
30419: DEC
30420: ST_TO_ADDR
30421: LD_VAR 0 8
30425: PUSH
30426: FOR_TO
30427: IFFALSE 30622
// begin _d := rand ( 0 , 5 ) ;
30429: LD_ADDR_VAR 0 11
30433: PUSH
30434: LD_INT 0
30436: PPUSH
30437: LD_INT 5
30439: PPUSH
30440: CALL_OW 12
30444: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30445: LD_ADDR_VAR 0 12
30449: PUSH
30450: LD_INT 2
30452: PPUSH
30453: LD_INT 6
30455: PPUSH
30456: CALL_OW 12
30460: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30461: LD_ADDR_VAR 0 9
30465: PUSH
30466: LD_VAR 0 2
30470: PPUSH
30471: LD_VAR 0 11
30475: PPUSH
30476: LD_VAR 0 12
30480: PPUSH
30481: CALL_OW 272
30485: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30486: LD_ADDR_VAR 0 10
30490: PUSH
30491: LD_VAR 0 3
30495: PPUSH
30496: LD_VAR 0 11
30500: PPUSH
30501: LD_VAR 0 12
30505: PPUSH
30506: CALL_OW 273
30510: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30511: LD_VAR 0 9
30515: PPUSH
30516: LD_VAR 0 10
30520: PPUSH
30521: CALL_OW 488
30525: PUSH
30526: LD_VAR 0 9
30530: PUSH
30531: LD_VAR 0 10
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_VAR 0 7
30544: IN
30545: NOT
30546: AND
30547: PUSH
30548: LD_VAR 0 9
30552: PPUSH
30553: LD_VAR 0 10
30557: PPUSH
30558: CALL_OW 458
30562: NOT
30563: AND
30564: IFFALSE 30606
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30566: LD_ADDR_VAR 0 7
30570: PUSH
30571: LD_VAR 0 7
30575: PPUSH
30576: LD_VAR 0 7
30580: PUSH
30581: LD_INT 1
30583: PLUS
30584: PPUSH
30585: LD_VAR 0 9
30589: PUSH
30590: LD_VAR 0 10
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PPUSH
30599: CALL_OW 1
30603: ST_TO_ADDR
30604: GO 30620
// i := i - 1 ;
30606: LD_ADDR_VAR 0 5
30610: PUSH
30611: LD_VAR 0 5
30615: PUSH
30616: LD_INT 1
30618: MINUS
30619: ST_TO_ADDR
// end ;
30620: GO 30426
30622: POP
30623: POP
// for i in tmp do
30624: LD_ADDR_VAR 0 5
30628: PUSH
30629: LD_VAR 0 7
30633: PUSH
30634: FOR_IN
30635: IFFALSE 30673
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30637: LD_VAR 0 1
30641: PPUSH
30642: LD_VAR 0 5
30646: PUSH
30647: LD_INT 1
30649: ARRAY
30650: PPUSH
30651: LD_VAR 0 5
30655: PUSH
30656: LD_INT 2
30658: ARRAY
30659: PPUSH
30660: CALL 29619 0 3
30664: NOT
30665: IFFALSE 30671
// exit ;
30667: POP
30668: POP
30669: GO 30675
30671: GO 30634
30673: POP
30674: POP
// end ;
30675: LD_VAR 0 4
30679: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30680: LD_INT 0
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
// if not GetClass ( unit ) = class_sniper then
30689: LD_VAR 0 1
30693: PPUSH
30694: CALL_OW 257
30698: PUSH
30699: LD_INT 5
30701: EQUAL
30702: NOT
30703: IFFALSE 30707
// exit ;
30705: GO 31095
// dist := 8 ;
30707: LD_ADDR_VAR 0 5
30711: PUSH
30712: LD_INT 8
30714: ST_TO_ADDR
// viewRange := 12 ;
30715: LD_ADDR_VAR 0 7
30719: PUSH
30720: LD_INT 12
30722: ST_TO_ADDR
// side := GetSide ( unit ) ;
30723: LD_ADDR_VAR 0 6
30727: PUSH
30728: LD_VAR 0 1
30732: PPUSH
30733: CALL_OW 255
30737: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30738: LD_INT 61
30740: PPUSH
30741: LD_VAR 0 6
30745: PPUSH
30746: CALL_OW 321
30750: PUSH
30751: LD_INT 2
30753: EQUAL
30754: IFFALSE 30764
// viewRange := 16 ;
30756: LD_ADDR_VAR 0 7
30760: PUSH
30761: LD_INT 16
30763: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30764: LD_VAR 0 1
30768: PPUSH
30769: LD_VAR 0 2
30773: PPUSH
30774: LD_VAR 0 3
30778: PPUSH
30779: CALL_OW 297
30783: PUSH
30784: LD_VAR 0 5
30788: GREATER
30789: IFFALSE 30868
// begin ComMoveXY ( unit , x , y ) ;
30791: LD_VAR 0 1
30795: PPUSH
30796: LD_VAR 0 2
30800: PPUSH
30801: LD_VAR 0 3
30805: PPUSH
30806: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30810: LD_INT 35
30812: PPUSH
30813: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30817: LD_VAR 0 1
30821: PPUSH
30822: LD_VAR 0 2
30826: PPUSH
30827: LD_VAR 0 3
30831: PPUSH
30832: CALL 67599 0 3
30836: NOT
30837: IFFALSE 30841
// exit ;
30839: GO 31095
// until GetDistUnitXY ( unit , x , y ) < dist ;
30841: LD_VAR 0 1
30845: PPUSH
30846: LD_VAR 0 2
30850: PPUSH
30851: LD_VAR 0 3
30855: PPUSH
30856: CALL_OW 297
30860: PUSH
30861: LD_VAR 0 5
30865: LESS
30866: IFFALSE 30810
// end ; ComTurnXY ( unit , x , y ) ;
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_VAR 0 2
30877: PPUSH
30878: LD_VAR 0 3
30882: PPUSH
30883: CALL_OW 118
// wait ( 5 ) ;
30887: LD_INT 5
30889: PPUSH
30890: CALL_OW 67
// _d := GetDir ( unit ) ;
30894: LD_ADDR_VAR 0 10
30898: PUSH
30899: LD_VAR 0 1
30903: PPUSH
30904: CALL_OW 254
30908: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30909: LD_ADDR_VAR 0 8
30913: PUSH
30914: LD_VAR 0 1
30918: PPUSH
30919: CALL_OW 250
30923: PPUSH
30924: LD_VAR 0 10
30928: PPUSH
30929: LD_VAR 0 5
30933: PPUSH
30934: CALL_OW 272
30938: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30939: LD_ADDR_VAR 0 9
30943: PUSH
30944: LD_VAR 0 1
30948: PPUSH
30949: CALL_OW 251
30953: PPUSH
30954: LD_VAR 0 10
30958: PPUSH
30959: LD_VAR 0 5
30963: PPUSH
30964: CALL_OW 273
30968: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30969: LD_VAR 0 8
30973: PPUSH
30974: LD_VAR 0 9
30978: PPUSH
30979: CALL_OW 488
30983: NOT
30984: IFFALSE 30988
// exit ;
30986: GO 31095
// ComAnimCustom ( unit , 1 ) ;
30988: LD_VAR 0 1
30992: PPUSH
30993: LD_INT 1
30995: PPUSH
30996: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31000: LD_VAR 0 8
31004: PPUSH
31005: LD_VAR 0 9
31009: PPUSH
31010: LD_VAR 0 6
31014: PPUSH
31015: LD_VAR 0 7
31019: PPUSH
31020: CALL_OW 330
// repeat wait ( 1 ) ;
31024: LD_INT 1
31026: PPUSH
31027: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31031: LD_VAR 0 1
31035: PPUSH
31036: CALL_OW 316
31040: PUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: CALL_OW 314
31050: OR
31051: PUSH
31052: LD_VAR 0 1
31056: PPUSH
31057: CALL_OW 302
31061: NOT
31062: OR
31063: PUSH
31064: LD_VAR 0 1
31068: PPUSH
31069: CALL_OW 301
31073: OR
31074: IFFALSE 31024
// RemoveSeeing ( _x , _y , side ) ;
31076: LD_VAR 0 8
31080: PPUSH
31081: LD_VAR 0 9
31085: PPUSH
31086: LD_VAR 0 6
31090: PPUSH
31091: CALL_OW 331
// end ; end_of_file
31095: LD_VAR 0 4
31099: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31100: LD_INT 0
31102: PPUSH
31103: PPUSH
// if exist_mode then
31104: LD_VAR 0 2
31108: IFFALSE 31133
// unit := CreateCharacter ( prefix & ident ) else
31110: LD_ADDR_VAR 0 5
31114: PUSH
31115: LD_VAR 0 3
31119: PUSH
31120: LD_VAR 0 1
31124: STR
31125: PPUSH
31126: CALL_OW 34
31130: ST_TO_ADDR
31131: GO 31148
// unit := NewCharacter ( ident ) ;
31133: LD_ADDR_VAR 0 5
31137: PUSH
31138: LD_VAR 0 1
31142: PPUSH
31143: CALL_OW 25
31147: ST_TO_ADDR
// result := unit ;
31148: LD_ADDR_VAR 0 4
31152: PUSH
31153: LD_VAR 0 5
31157: ST_TO_ADDR
// end ;
31158: LD_VAR 0 4
31162: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31163: LD_INT 0
31165: PPUSH
31166: PPUSH
// if not side or not nation then
31167: LD_VAR 0 1
31171: NOT
31172: PUSH
31173: LD_VAR 0 2
31177: NOT
31178: OR
31179: IFFALSE 31183
// exit ;
31181: GO 31951
// case nation of nation_american :
31183: LD_VAR 0 2
31187: PUSH
31188: LD_INT 1
31190: DOUBLE
31191: EQUAL
31192: IFTRUE 31196
31194: GO 31410
31196: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31197: LD_ADDR_VAR 0 4
31201: PUSH
31202: LD_INT 35
31204: PUSH
31205: LD_INT 45
31207: PUSH
31208: LD_INT 46
31210: PUSH
31211: LD_INT 47
31213: PUSH
31214: LD_INT 82
31216: PUSH
31217: LD_INT 83
31219: PUSH
31220: LD_INT 84
31222: PUSH
31223: LD_INT 85
31225: PUSH
31226: LD_INT 86
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: LD_INT 6
31237: PUSH
31238: LD_INT 15
31240: PUSH
31241: LD_INT 16
31243: PUSH
31244: LD_INT 7
31246: PUSH
31247: LD_INT 12
31249: PUSH
31250: LD_INT 13
31252: PUSH
31253: LD_INT 10
31255: PUSH
31256: LD_INT 14
31258: PUSH
31259: LD_INT 20
31261: PUSH
31262: LD_INT 21
31264: PUSH
31265: LD_INT 22
31267: PUSH
31268: LD_INT 25
31270: PUSH
31271: LD_INT 32
31273: PUSH
31274: LD_INT 27
31276: PUSH
31277: LD_INT 36
31279: PUSH
31280: LD_INT 69
31282: PUSH
31283: LD_INT 39
31285: PUSH
31286: LD_INT 34
31288: PUSH
31289: LD_INT 40
31291: PUSH
31292: LD_INT 48
31294: PUSH
31295: LD_INT 49
31297: PUSH
31298: LD_INT 50
31300: PUSH
31301: LD_INT 51
31303: PUSH
31304: LD_INT 52
31306: PUSH
31307: LD_INT 53
31309: PUSH
31310: LD_INT 54
31312: PUSH
31313: LD_INT 55
31315: PUSH
31316: LD_INT 56
31318: PUSH
31319: LD_INT 57
31321: PUSH
31322: LD_INT 58
31324: PUSH
31325: LD_INT 59
31327: PUSH
31328: LD_INT 60
31330: PUSH
31331: LD_INT 61
31333: PUSH
31334: LD_INT 62
31336: PUSH
31337: LD_INT 80
31339: PUSH
31340: LD_INT 82
31342: PUSH
31343: LD_INT 83
31345: PUSH
31346: LD_INT 84
31348: PUSH
31349: LD_INT 85
31351: PUSH
31352: LD_INT 86
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: ST_TO_ADDR
31408: GO 31875
31410: LD_INT 2
31412: DOUBLE
31413: EQUAL
31414: IFTRUE 31418
31416: GO 31644
31418: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31419: LD_ADDR_VAR 0 4
31423: PUSH
31424: LD_INT 35
31426: PUSH
31427: LD_INT 45
31429: PUSH
31430: LD_INT 46
31432: PUSH
31433: LD_INT 47
31435: PUSH
31436: LD_INT 82
31438: PUSH
31439: LD_INT 83
31441: PUSH
31442: LD_INT 84
31444: PUSH
31445: LD_INT 85
31447: PUSH
31448: LD_INT 87
31450: PUSH
31451: LD_INT 70
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: LD_INT 11
31459: PUSH
31460: LD_INT 3
31462: PUSH
31463: LD_INT 4
31465: PUSH
31466: LD_INT 5
31468: PUSH
31469: LD_INT 6
31471: PUSH
31472: LD_INT 15
31474: PUSH
31475: LD_INT 18
31477: PUSH
31478: LD_INT 7
31480: PUSH
31481: LD_INT 17
31483: PUSH
31484: LD_INT 8
31486: PUSH
31487: LD_INT 20
31489: PUSH
31490: LD_INT 21
31492: PUSH
31493: LD_INT 22
31495: PUSH
31496: LD_INT 72
31498: PUSH
31499: LD_INT 26
31501: PUSH
31502: LD_INT 69
31504: PUSH
31505: LD_INT 39
31507: PUSH
31508: LD_INT 40
31510: PUSH
31511: LD_INT 41
31513: PUSH
31514: LD_INT 42
31516: PUSH
31517: LD_INT 43
31519: PUSH
31520: LD_INT 48
31522: PUSH
31523: LD_INT 49
31525: PUSH
31526: LD_INT 50
31528: PUSH
31529: LD_INT 51
31531: PUSH
31532: LD_INT 52
31534: PUSH
31535: LD_INT 53
31537: PUSH
31538: LD_INT 54
31540: PUSH
31541: LD_INT 55
31543: PUSH
31544: LD_INT 56
31546: PUSH
31547: LD_INT 60
31549: PUSH
31550: LD_INT 61
31552: PUSH
31553: LD_INT 62
31555: PUSH
31556: LD_INT 66
31558: PUSH
31559: LD_INT 67
31561: PUSH
31562: LD_INT 68
31564: PUSH
31565: LD_INT 81
31567: PUSH
31568: LD_INT 82
31570: PUSH
31571: LD_INT 83
31573: PUSH
31574: LD_INT 84
31576: PUSH
31577: LD_INT 85
31579: PUSH
31580: LD_INT 87
31582: PUSH
31583: LD_INT 88
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: ST_TO_ADDR
31642: GO 31875
31644: LD_INT 3
31646: DOUBLE
31647: EQUAL
31648: IFTRUE 31652
31650: GO 31874
31652: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31653: LD_ADDR_VAR 0 4
31657: PUSH
31658: LD_INT 46
31660: PUSH
31661: LD_INT 47
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 82
31672: PUSH
31673: LD_INT 83
31675: PUSH
31676: LD_INT 84
31678: PUSH
31679: LD_INT 85
31681: PUSH
31682: LD_INT 86
31684: PUSH
31685: LD_INT 11
31687: PUSH
31688: LD_INT 9
31690: PUSH
31691: LD_INT 20
31693: PUSH
31694: LD_INT 19
31696: PUSH
31697: LD_INT 21
31699: PUSH
31700: LD_INT 24
31702: PUSH
31703: LD_INT 22
31705: PUSH
31706: LD_INT 25
31708: PUSH
31709: LD_INT 28
31711: PUSH
31712: LD_INT 29
31714: PUSH
31715: LD_INT 30
31717: PUSH
31718: LD_INT 31
31720: PUSH
31721: LD_INT 37
31723: PUSH
31724: LD_INT 38
31726: PUSH
31727: LD_INT 32
31729: PUSH
31730: LD_INT 27
31732: PUSH
31733: LD_INT 33
31735: PUSH
31736: LD_INT 69
31738: PUSH
31739: LD_INT 39
31741: PUSH
31742: LD_INT 34
31744: PUSH
31745: LD_INT 40
31747: PUSH
31748: LD_INT 71
31750: PUSH
31751: LD_INT 23
31753: PUSH
31754: LD_INT 44
31756: PUSH
31757: LD_INT 48
31759: PUSH
31760: LD_INT 49
31762: PUSH
31763: LD_INT 50
31765: PUSH
31766: LD_INT 51
31768: PUSH
31769: LD_INT 52
31771: PUSH
31772: LD_INT 53
31774: PUSH
31775: LD_INT 54
31777: PUSH
31778: LD_INT 55
31780: PUSH
31781: LD_INT 56
31783: PUSH
31784: LD_INT 57
31786: PUSH
31787: LD_INT 58
31789: PUSH
31790: LD_INT 59
31792: PUSH
31793: LD_INT 63
31795: PUSH
31796: LD_INT 64
31798: PUSH
31799: LD_INT 65
31801: PUSH
31802: LD_INT 82
31804: PUSH
31805: LD_INT 83
31807: PUSH
31808: LD_INT 84
31810: PUSH
31811: LD_INT 85
31813: PUSH
31814: LD_INT 86
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
31872: GO 31875
31874: POP
// if state > - 1 and state < 3 then
31875: LD_VAR 0 3
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: GREATER
31884: PUSH
31885: LD_VAR 0 3
31889: PUSH
31890: LD_INT 3
31892: LESS
31893: AND
31894: IFFALSE 31951
// for i in result do
31896: LD_ADDR_VAR 0 5
31900: PUSH
31901: LD_VAR 0 4
31905: PUSH
31906: FOR_IN
31907: IFFALSE 31949
// if GetTech ( i , side ) <> state then
31909: LD_VAR 0 5
31913: PPUSH
31914: LD_VAR 0 1
31918: PPUSH
31919: CALL_OW 321
31923: PUSH
31924: LD_VAR 0 3
31928: NONEQUAL
31929: IFFALSE 31947
// result := result diff i ;
31931: LD_ADDR_VAR 0 4
31935: PUSH
31936: LD_VAR 0 4
31940: PUSH
31941: LD_VAR 0 5
31945: DIFF
31946: ST_TO_ADDR
31947: GO 31906
31949: POP
31950: POP
// end ;
31951: LD_VAR 0 4
31955: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31956: LD_INT 0
31958: PPUSH
31959: PPUSH
31960: PPUSH
// result := true ;
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_INT 1
31968: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: LD_VAR 0 2
31978: PPUSH
31979: CALL_OW 480
31983: ST_TO_ADDR
// if not tmp then
31984: LD_VAR 0 5
31988: NOT
31989: IFFALSE 31993
// exit ;
31991: GO 32042
// for i in tmp do
31993: LD_ADDR_VAR 0 4
31997: PUSH
31998: LD_VAR 0 5
32002: PUSH
32003: FOR_IN
32004: IFFALSE 32040
// if GetTech ( i , side ) <> state_researched then
32006: LD_VAR 0 4
32010: PPUSH
32011: LD_VAR 0 1
32015: PPUSH
32016: CALL_OW 321
32020: PUSH
32021: LD_INT 2
32023: NONEQUAL
32024: IFFALSE 32038
// begin result := false ;
32026: LD_ADDR_VAR 0 3
32030: PUSH
32031: LD_INT 0
32033: ST_TO_ADDR
// exit ;
32034: POP
32035: POP
32036: GO 32042
// end ;
32038: GO 32003
32040: POP
32041: POP
// end ;
32042: LD_VAR 0 3
32046: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32047: LD_INT 0
32049: PPUSH
32050: PPUSH
32051: PPUSH
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
32056: PPUSH
32057: PPUSH
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32062: LD_VAR 0 1
32066: NOT
32067: PUSH
32068: LD_VAR 0 1
32072: PPUSH
32073: CALL_OW 257
32077: PUSH
32078: LD_INT 9
32080: NONEQUAL
32081: OR
32082: IFFALSE 32086
// exit ;
32084: GO 32659
// side := GetSide ( unit ) ;
32086: LD_ADDR_VAR 0 9
32090: PUSH
32091: LD_VAR 0 1
32095: PPUSH
32096: CALL_OW 255
32100: ST_TO_ADDR
// tech_space := tech_spacanom ;
32101: LD_ADDR_VAR 0 12
32105: PUSH
32106: LD_INT 29
32108: ST_TO_ADDR
// tech_time := tech_taurad ;
32109: LD_ADDR_VAR 0 13
32113: PUSH
32114: LD_INT 28
32116: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32117: LD_ADDR_VAR 0 11
32121: PUSH
32122: LD_VAR 0 1
32126: PPUSH
32127: CALL_OW 310
32131: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32132: LD_VAR 0 11
32136: PPUSH
32137: CALL_OW 247
32141: PUSH
32142: LD_INT 2
32144: EQUAL
32145: IFFALSE 32149
// exit ;
32147: GO 32659
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32149: LD_ADDR_VAR 0 8
32153: PUSH
32154: LD_INT 81
32156: PUSH
32157: LD_VAR 0 9
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: LD_INT 21
32171: PUSH
32172: LD_INT 3
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PPUSH
32187: CALL_OW 69
32191: ST_TO_ADDR
// if not tmp then
32192: LD_VAR 0 8
32196: NOT
32197: IFFALSE 32201
// exit ;
32199: GO 32659
// if in_unit then
32201: LD_VAR 0 11
32205: IFFALSE 32229
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32207: LD_ADDR_VAR 0 10
32211: PUSH
32212: LD_VAR 0 8
32216: PPUSH
32217: LD_VAR 0 11
32221: PPUSH
32222: CALL_OW 74
32226: ST_TO_ADDR
32227: GO 32249
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32229: LD_ADDR_VAR 0 10
32233: PUSH
32234: LD_VAR 0 8
32238: PPUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 74
32248: ST_TO_ADDR
// if not enemy then
32249: LD_VAR 0 10
32253: NOT
32254: IFFALSE 32258
// exit ;
32256: GO 32659
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32258: LD_VAR 0 11
32262: PUSH
32263: LD_VAR 0 11
32267: PPUSH
32268: LD_VAR 0 10
32272: PPUSH
32273: CALL_OW 296
32277: PUSH
32278: LD_INT 13
32280: GREATER
32281: AND
32282: PUSH
32283: LD_VAR 0 1
32287: PPUSH
32288: LD_VAR 0 10
32292: PPUSH
32293: CALL_OW 296
32297: PUSH
32298: LD_INT 12
32300: GREATER
32301: OR
32302: IFFALSE 32306
// exit ;
32304: GO 32659
// missile := [ 1 ] ;
32306: LD_ADDR_VAR 0 14
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: EMPTY
32315: LIST
32316: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32317: LD_VAR 0 9
32321: PPUSH
32322: LD_VAR 0 12
32326: PPUSH
32327: CALL_OW 325
32331: IFFALSE 32360
// missile := Replace ( missile , missile + 1 , 2 ) ;
32333: LD_ADDR_VAR 0 14
32337: PUSH
32338: LD_VAR 0 14
32342: PPUSH
32343: LD_VAR 0 14
32347: PUSH
32348: LD_INT 1
32350: PLUS
32351: PPUSH
32352: LD_INT 2
32354: PPUSH
32355: CALL_OW 1
32359: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32360: LD_VAR 0 9
32364: PPUSH
32365: LD_VAR 0 13
32369: PPUSH
32370: CALL_OW 325
32374: PUSH
32375: LD_VAR 0 10
32379: PPUSH
32380: CALL_OW 255
32384: PPUSH
32385: LD_VAR 0 13
32389: PPUSH
32390: CALL_OW 325
32394: NOT
32395: AND
32396: IFFALSE 32425
// missile := Replace ( missile , missile + 1 , 3 ) ;
32398: LD_ADDR_VAR 0 14
32402: PUSH
32403: LD_VAR 0 14
32407: PPUSH
32408: LD_VAR 0 14
32412: PUSH
32413: LD_INT 1
32415: PLUS
32416: PPUSH
32417: LD_INT 3
32419: PPUSH
32420: CALL_OW 1
32424: ST_TO_ADDR
// if missile < 2 then
32425: LD_VAR 0 14
32429: PUSH
32430: LD_INT 2
32432: LESS
32433: IFFALSE 32437
// exit ;
32435: GO 32659
// x := GetX ( enemy ) ;
32437: LD_ADDR_VAR 0 4
32441: PUSH
32442: LD_VAR 0 10
32446: PPUSH
32447: CALL_OW 250
32451: ST_TO_ADDR
// y := GetY ( enemy ) ;
32452: LD_ADDR_VAR 0 5
32456: PUSH
32457: LD_VAR 0 10
32461: PPUSH
32462: CALL_OW 251
32466: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32467: LD_ADDR_VAR 0 6
32471: PUSH
32472: LD_VAR 0 4
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PPUSH
32481: LD_INT 1
32483: PPUSH
32484: CALL_OW 12
32488: PLUS
32489: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32490: LD_ADDR_VAR 0 7
32494: PUSH
32495: LD_VAR 0 5
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PPUSH
32504: LD_INT 1
32506: PPUSH
32507: CALL_OW 12
32511: PLUS
32512: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32513: LD_VAR 0 6
32517: PPUSH
32518: LD_VAR 0 7
32522: PPUSH
32523: CALL_OW 488
32527: NOT
32528: IFFALSE 32550
// begin _x := x ;
32530: LD_ADDR_VAR 0 6
32534: PUSH
32535: LD_VAR 0 4
32539: ST_TO_ADDR
// _y := y ;
32540: LD_ADDR_VAR 0 7
32544: PUSH
32545: LD_VAR 0 5
32549: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32550: LD_ADDR_VAR 0 3
32554: PUSH
32555: LD_INT 1
32557: PPUSH
32558: LD_VAR 0 14
32562: PPUSH
32563: CALL_OW 12
32567: ST_TO_ADDR
// case i of 1 :
32568: LD_VAR 0 3
32572: PUSH
32573: LD_INT 1
32575: DOUBLE
32576: EQUAL
32577: IFTRUE 32581
32579: GO 32598
32581: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32582: LD_VAR 0 1
32586: PPUSH
32587: LD_VAR 0 10
32591: PPUSH
32592: CALL_OW 115
32596: GO 32659
32598: LD_INT 2
32600: DOUBLE
32601: EQUAL
32602: IFTRUE 32606
32604: GO 32628
32606: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32607: LD_VAR 0 1
32611: PPUSH
32612: LD_VAR 0 6
32616: PPUSH
32617: LD_VAR 0 7
32621: PPUSH
32622: CALL_OW 153
32626: GO 32659
32628: LD_INT 3
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32658
32636: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32637: LD_VAR 0 1
32641: PPUSH
32642: LD_VAR 0 6
32646: PPUSH
32647: LD_VAR 0 7
32651: PPUSH
32652: CALL_OW 154
32656: GO 32659
32658: POP
// end ;
32659: LD_VAR 0 2
32663: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32664: LD_INT 0
32666: PPUSH
32667: PPUSH
32668: PPUSH
32669: PPUSH
32670: PPUSH
32671: PPUSH
// if not unit or not building then
32672: LD_VAR 0 1
32676: NOT
32677: PUSH
32678: LD_VAR 0 2
32682: NOT
32683: OR
32684: IFFALSE 32688
// exit ;
32686: GO 32846
// x := GetX ( building ) ;
32688: LD_ADDR_VAR 0 5
32692: PUSH
32693: LD_VAR 0 2
32697: PPUSH
32698: CALL_OW 250
32702: ST_TO_ADDR
// y := GetY ( building ) ;
32703: LD_ADDR_VAR 0 6
32707: PUSH
32708: LD_VAR 0 2
32712: PPUSH
32713: CALL_OW 251
32717: ST_TO_ADDR
// for i = 0 to 5 do
32718: LD_ADDR_VAR 0 4
32722: PUSH
32723: DOUBLE
32724: LD_INT 0
32726: DEC
32727: ST_TO_ADDR
32728: LD_INT 5
32730: PUSH
32731: FOR_TO
32732: IFFALSE 32844
// begin _x := ShiftX ( x , i , 3 ) ;
32734: LD_ADDR_VAR 0 7
32738: PUSH
32739: LD_VAR 0 5
32743: PPUSH
32744: LD_VAR 0 4
32748: PPUSH
32749: LD_INT 3
32751: PPUSH
32752: CALL_OW 272
32756: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32757: LD_ADDR_VAR 0 8
32761: PUSH
32762: LD_VAR 0 6
32766: PPUSH
32767: LD_VAR 0 4
32771: PPUSH
32772: LD_INT 3
32774: PPUSH
32775: CALL_OW 273
32779: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32780: LD_VAR 0 7
32784: PPUSH
32785: LD_VAR 0 8
32789: PPUSH
32790: CALL_OW 488
32794: NOT
32795: IFFALSE 32799
// continue ;
32797: GO 32731
// if HexInfo ( _x , _y ) = 0 then
32799: LD_VAR 0 7
32803: PPUSH
32804: LD_VAR 0 8
32808: PPUSH
32809: CALL_OW 428
32813: PUSH
32814: LD_INT 0
32816: EQUAL
32817: IFFALSE 32842
// begin ComMoveXY ( unit , _x , _y ) ;
32819: LD_VAR 0 1
32823: PPUSH
32824: LD_VAR 0 7
32828: PPUSH
32829: LD_VAR 0 8
32833: PPUSH
32834: CALL_OW 111
// exit ;
32838: POP
32839: POP
32840: GO 32846
// end ; end ;
32842: GO 32731
32844: POP
32845: POP
// end ;
32846: LD_VAR 0 3
32850: RET
// export function ScanBase ( side , base_area ) ; begin
32851: LD_INT 0
32853: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32854: LD_ADDR_VAR 0 3
32858: PUSH
32859: LD_VAR 0 2
32863: PPUSH
32864: LD_INT 81
32866: PUSH
32867: LD_VAR 0 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PPUSH
32876: CALL_OW 70
32880: ST_TO_ADDR
// end ;
32881: LD_VAR 0 3
32885: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32886: LD_INT 0
32888: PPUSH
32889: PPUSH
32890: PPUSH
32891: PPUSH
// result := false ;
32892: LD_ADDR_VAR 0 2
32896: PUSH
32897: LD_INT 0
32899: ST_TO_ADDR
// side := GetSide ( unit ) ;
32900: LD_ADDR_VAR 0 3
32904: PUSH
32905: LD_VAR 0 1
32909: PPUSH
32910: CALL_OW 255
32914: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32915: LD_ADDR_VAR 0 4
32919: PUSH
32920: LD_VAR 0 1
32924: PPUSH
32925: CALL_OW 248
32929: ST_TO_ADDR
// case nat of 1 :
32930: LD_VAR 0 4
32934: PUSH
32935: LD_INT 1
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32954
32943: POP
// tech := tech_lassight ; 2 :
32944: LD_ADDR_VAR 0 5
32948: PUSH
32949: LD_INT 12
32951: ST_TO_ADDR
32952: GO 32993
32954: LD_INT 2
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32973
32962: POP
// tech := tech_mortar ; 3 :
32963: LD_ADDR_VAR 0 5
32967: PUSH
32968: LD_INT 41
32970: ST_TO_ADDR
32971: GO 32993
32973: LD_INT 3
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 32992
32981: POP
// tech := tech_bazooka ; end ;
32982: LD_ADDR_VAR 0 5
32986: PUSH
32987: LD_INT 44
32989: ST_TO_ADDR
32990: GO 32993
32992: POP
// if Researched ( side , tech ) then
32993: LD_VAR 0 3
32997: PPUSH
32998: LD_VAR 0 5
33002: PPUSH
33003: CALL_OW 325
33007: IFFALSE 33034
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33009: LD_ADDR_VAR 0 2
33013: PUSH
33014: LD_INT 5
33016: PUSH
33017: LD_INT 8
33019: PUSH
33020: LD_INT 9
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: LIST
33027: PUSH
33028: LD_VAR 0 4
33032: ARRAY
33033: ST_TO_ADDR
// end ;
33034: LD_VAR 0 2
33038: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33039: LD_INT 0
33041: PPUSH
33042: PPUSH
33043: PPUSH
// if not mines then
33044: LD_VAR 0 2
33048: NOT
33049: IFFALSE 33053
// exit ;
33051: GO 33197
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33053: LD_ADDR_VAR 0 5
33057: PUSH
33058: LD_INT 81
33060: PUSH
33061: LD_VAR 0 1
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 3
33072: PUSH
33073: LD_INT 21
33075: PUSH
33076: LD_INT 3
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PPUSH
33091: CALL_OW 69
33095: ST_TO_ADDR
// for i in mines do
33096: LD_ADDR_VAR 0 4
33100: PUSH
33101: LD_VAR 0 2
33105: PUSH
33106: FOR_IN
33107: IFFALSE 33195
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33109: LD_VAR 0 4
33113: PUSH
33114: LD_INT 1
33116: ARRAY
33117: PPUSH
33118: LD_VAR 0 4
33122: PUSH
33123: LD_INT 2
33125: ARRAY
33126: PPUSH
33127: CALL_OW 458
33131: NOT
33132: IFFALSE 33136
// continue ;
33134: GO 33106
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33136: LD_VAR 0 4
33140: PUSH
33141: LD_INT 1
33143: ARRAY
33144: PPUSH
33145: LD_VAR 0 4
33149: PUSH
33150: LD_INT 2
33152: ARRAY
33153: PPUSH
33154: CALL_OW 428
33158: PUSH
33159: LD_VAR 0 5
33163: IN
33164: IFFALSE 33193
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33166: LD_VAR 0 4
33170: PUSH
33171: LD_INT 1
33173: ARRAY
33174: PPUSH
33175: LD_VAR 0 4
33179: PUSH
33180: LD_INT 2
33182: ARRAY
33183: PPUSH
33184: LD_VAR 0 1
33188: PPUSH
33189: CALL_OW 456
// end ;
33193: GO 33106
33195: POP
33196: POP
// end ;
33197: LD_VAR 0 3
33201: RET
// export function Count ( array ) ; begin
33202: LD_INT 0
33204: PPUSH
// result := array + 0 ;
33205: LD_ADDR_VAR 0 2
33209: PUSH
33210: LD_VAR 0 1
33214: PUSH
33215: LD_INT 0
33217: PLUS
33218: ST_TO_ADDR
// end ;
33219: LD_VAR 0 2
33223: RET
// export function IsEmpty ( building ) ; begin
33224: LD_INT 0
33226: PPUSH
// if not building then
33227: LD_VAR 0 1
33231: NOT
33232: IFFALSE 33236
// exit ;
33234: GO 33279
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33236: LD_ADDR_VAR 0 2
33240: PUSH
33241: LD_VAR 0 1
33245: PUSH
33246: LD_INT 22
33248: PUSH
33249: LD_VAR 0 1
33253: PPUSH
33254: CALL_OW 255
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 58
33265: PUSH
33266: EMPTY
33267: LIST
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PPUSH
33273: CALL_OW 69
33277: IN
33278: ST_TO_ADDR
// end ;
33279: LD_VAR 0 2
33283: RET
// export function IsNotFull ( building ) ; var places ; begin
33284: LD_INT 0
33286: PPUSH
33287: PPUSH
// if not building then
33288: LD_VAR 0 1
33292: NOT
33293: IFFALSE 33297
// exit ;
33295: GO 33325
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33297: LD_ADDR_VAR 0 2
33301: PUSH
33302: LD_VAR 0 1
33306: PPUSH
33307: LD_INT 3
33309: PUSH
33310: LD_INT 62
33312: PUSH
33313: EMPTY
33314: LIST
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PPUSH
33320: CALL_OW 72
33324: ST_TO_ADDR
// end ;
33325: LD_VAR 0 2
33329: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33330: LD_INT 0
33332: PPUSH
33333: PPUSH
33334: PPUSH
33335: PPUSH
// tmp := [ ] ;
33336: LD_ADDR_VAR 0 3
33340: PUSH
33341: EMPTY
33342: ST_TO_ADDR
// list := [ ] ;
33343: LD_ADDR_VAR 0 5
33347: PUSH
33348: EMPTY
33349: ST_TO_ADDR
// for i = 16 to 25 do
33350: LD_ADDR_VAR 0 4
33354: PUSH
33355: DOUBLE
33356: LD_INT 16
33358: DEC
33359: ST_TO_ADDR
33360: LD_INT 25
33362: PUSH
33363: FOR_TO
33364: IFFALSE 33437
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33366: LD_ADDR_VAR 0 3
33370: PUSH
33371: LD_VAR 0 3
33375: PUSH
33376: LD_INT 22
33378: PUSH
33379: LD_VAR 0 1
33383: PPUSH
33384: CALL_OW 255
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 91
33395: PUSH
33396: LD_VAR 0 1
33400: PUSH
33401: LD_INT 6
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 30
33411: PUSH
33412: LD_VAR 0 4
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: PUSH
33426: EMPTY
33427: LIST
33428: PPUSH
33429: CALL_OW 69
33433: ADD
33434: ST_TO_ADDR
33435: GO 33363
33437: POP
33438: POP
// for i = 1 to tmp do
33439: LD_ADDR_VAR 0 4
33443: PUSH
33444: DOUBLE
33445: LD_INT 1
33447: DEC
33448: ST_TO_ADDR
33449: LD_VAR 0 3
33453: PUSH
33454: FOR_TO
33455: IFFALSE 33543
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33457: LD_ADDR_VAR 0 5
33461: PUSH
33462: LD_VAR 0 5
33466: PUSH
33467: LD_VAR 0 3
33471: PUSH
33472: LD_VAR 0 4
33476: ARRAY
33477: PPUSH
33478: CALL_OW 266
33482: PUSH
33483: LD_VAR 0 3
33487: PUSH
33488: LD_VAR 0 4
33492: ARRAY
33493: PPUSH
33494: CALL_OW 250
33498: PUSH
33499: LD_VAR 0 3
33503: PUSH
33504: LD_VAR 0 4
33508: ARRAY
33509: PPUSH
33510: CALL_OW 251
33514: PUSH
33515: LD_VAR 0 3
33519: PUSH
33520: LD_VAR 0 4
33524: ARRAY
33525: PPUSH
33526: CALL_OW 254
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: ADD
33540: ST_TO_ADDR
33541: GO 33454
33543: POP
33544: POP
// result := list ;
33545: LD_ADDR_VAR 0 2
33549: PUSH
33550: LD_VAR 0 5
33554: ST_TO_ADDR
// end ;
33555: LD_VAR 0 2
33559: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33560: LD_INT 0
33562: PPUSH
33563: PPUSH
33564: PPUSH
33565: PPUSH
33566: PPUSH
33567: PPUSH
33568: PPUSH
// if not factory then
33569: LD_VAR 0 1
33573: NOT
33574: IFFALSE 33578
// exit ;
33576: GO 34171
// if control = control_apeman then
33578: LD_VAR 0 4
33582: PUSH
33583: LD_INT 5
33585: EQUAL
33586: IFFALSE 33695
// begin tmp := UnitsInside ( factory ) ;
33588: LD_ADDR_VAR 0 8
33592: PUSH
33593: LD_VAR 0 1
33597: PPUSH
33598: CALL_OW 313
33602: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33603: LD_VAR 0 8
33607: PPUSH
33608: LD_INT 25
33610: PUSH
33611: LD_INT 12
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PPUSH
33618: CALL_OW 72
33622: NOT
33623: IFFALSE 33633
// control := control_manual ;
33625: LD_ADDR_VAR 0 4
33629: PUSH
33630: LD_INT 1
33632: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33633: LD_ADDR_VAR 0 8
33637: PUSH
33638: LD_VAR 0 1
33642: PPUSH
33643: CALL 33330 0 1
33647: ST_TO_ADDR
// if tmp then
33648: LD_VAR 0 8
33652: IFFALSE 33695
// begin for i in tmp do
33654: LD_ADDR_VAR 0 7
33658: PUSH
33659: LD_VAR 0 8
33663: PUSH
33664: FOR_IN
33665: IFFALSE 33693
// if i [ 1 ] = b_ext_radio then
33667: LD_VAR 0 7
33671: PUSH
33672: LD_INT 1
33674: ARRAY
33675: PUSH
33676: LD_INT 22
33678: EQUAL
33679: IFFALSE 33691
// begin control := control_remote ;
33681: LD_ADDR_VAR 0 4
33685: PUSH
33686: LD_INT 2
33688: ST_TO_ADDR
// break ;
33689: GO 33693
// end ;
33691: GO 33664
33693: POP
33694: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33695: LD_VAR 0 1
33699: PPUSH
33700: LD_VAR 0 2
33704: PPUSH
33705: LD_VAR 0 3
33709: PPUSH
33710: LD_VAR 0 4
33714: PPUSH
33715: LD_VAR 0 5
33719: PPUSH
33720: CALL_OW 448
33724: IFFALSE 33759
// begin result := [ chassis , engine , control , weapon ] ;
33726: LD_ADDR_VAR 0 6
33730: PUSH
33731: LD_VAR 0 2
33735: PUSH
33736: LD_VAR 0 3
33740: PUSH
33741: LD_VAR 0 4
33745: PUSH
33746: LD_VAR 0 5
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: ST_TO_ADDR
// exit ;
33757: GO 34171
// end ; _chassis := AvailableChassisList ( factory ) ;
33759: LD_ADDR_VAR 0 9
33763: PUSH
33764: LD_VAR 0 1
33768: PPUSH
33769: CALL_OW 475
33773: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33774: LD_ADDR_VAR 0 11
33778: PUSH
33779: LD_VAR 0 1
33783: PPUSH
33784: CALL_OW 476
33788: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33789: LD_ADDR_VAR 0 12
33793: PUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 477
33803: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33804: LD_ADDR_VAR 0 10
33808: PUSH
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 478
33818: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33819: LD_VAR 0 9
33823: NOT
33824: PUSH
33825: LD_VAR 0 11
33829: NOT
33830: OR
33831: PUSH
33832: LD_VAR 0 12
33836: NOT
33837: OR
33838: PUSH
33839: LD_VAR 0 10
33843: NOT
33844: OR
33845: IFFALSE 33880
// begin result := [ chassis , engine , control , weapon ] ;
33847: LD_ADDR_VAR 0 6
33851: PUSH
33852: LD_VAR 0 2
33856: PUSH
33857: LD_VAR 0 3
33861: PUSH
33862: LD_VAR 0 4
33866: PUSH
33867: LD_VAR 0 5
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: ST_TO_ADDR
// exit ;
33878: GO 34171
// end ; if not chassis in _chassis then
33880: LD_VAR 0 2
33884: PUSH
33885: LD_VAR 0 9
33889: IN
33890: NOT
33891: IFFALSE 33917
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33893: LD_ADDR_VAR 0 2
33897: PUSH
33898: LD_VAR 0 9
33902: PUSH
33903: LD_INT 1
33905: PPUSH
33906: LD_VAR 0 9
33910: PPUSH
33911: CALL_OW 12
33915: ARRAY
33916: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33917: LD_VAR 0 2
33921: PPUSH
33922: LD_VAR 0 3
33926: PPUSH
33927: CALL 34176 0 2
33931: NOT
33932: IFFALSE 33991
// repeat engine := _engine [ 1 ] ;
33934: LD_ADDR_VAR 0 3
33938: PUSH
33939: LD_VAR 0 11
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33948: LD_ADDR_VAR 0 11
33952: PUSH
33953: LD_VAR 0 11
33957: PPUSH
33958: LD_INT 1
33960: PPUSH
33961: CALL_OW 3
33965: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33966: LD_VAR 0 2
33970: PPUSH
33971: LD_VAR 0 3
33975: PPUSH
33976: CALL 34176 0 2
33980: PUSH
33981: LD_VAR 0 11
33985: PUSH
33986: EMPTY
33987: EQUAL
33988: OR
33989: IFFALSE 33934
// if not control in _control then
33991: LD_VAR 0 4
33995: PUSH
33996: LD_VAR 0 12
34000: IN
34001: NOT
34002: IFFALSE 34028
// control := _control [ rand ( 1 , _control ) ] ;
34004: LD_ADDR_VAR 0 4
34008: PUSH
34009: LD_VAR 0 12
34013: PUSH
34014: LD_INT 1
34016: PPUSH
34017: LD_VAR 0 12
34021: PPUSH
34022: CALL_OW 12
34026: ARRAY
34027: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34028: LD_VAR 0 2
34032: PPUSH
34033: LD_VAR 0 5
34037: PPUSH
34038: CALL 34396 0 2
34042: NOT
34043: IFFALSE 34102
// repeat weapon := _weapon [ 1 ] ;
34045: LD_ADDR_VAR 0 5
34049: PUSH
34050: LD_VAR 0 10
34054: PUSH
34055: LD_INT 1
34057: ARRAY
34058: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34059: LD_ADDR_VAR 0 10
34063: PUSH
34064: LD_VAR 0 10
34068: PPUSH
34069: LD_INT 1
34071: PPUSH
34072: CALL_OW 3
34076: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34077: LD_VAR 0 2
34081: PPUSH
34082: LD_VAR 0 5
34086: PPUSH
34087: CALL 34396 0 2
34091: PUSH
34092: LD_VAR 0 10
34096: PUSH
34097: EMPTY
34098: EQUAL
34099: OR
34100: IFFALSE 34045
// result := [ ] ;
34102: LD_ADDR_VAR 0 6
34106: PUSH
34107: EMPTY
34108: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34109: LD_VAR 0 1
34113: PPUSH
34114: LD_VAR 0 2
34118: PPUSH
34119: LD_VAR 0 3
34123: PPUSH
34124: LD_VAR 0 4
34128: PPUSH
34129: LD_VAR 0 5
34133: PPUSH
34134: CALL_OW 448
34138: IFFALSE 34171
// result := [ chassis , engine , control , weapon ] ;
34140: LD_ADDR_VAR 0 6
34144: PUSH
34145: LD_VAR 0 2
34149: PUSH
34150: LD_VAR 0 3
34154: PUSH
34155: LD_VAR 0 4
34159: PUSH
34160: LD_VAR 0 5
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: ST_TO_ADDR
// end ;
34171: LD_VAR 0 6
34175: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34176: LD_INT 0
34178: PPUSH
// if not chassis or not engine then
34179: LD_VAR 0 1
34183: NOT
34184: PUSH
34185: LD_VAR 0 2
34189: NOT
34190: OR
34191: IFFALSE 34195
// exit ;
34193: GO 34391
// case engine of engine_solar :
34195: LD_VAR 0 2
34199: PUSH
34200: LD_INT 2
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34246
34208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_INT 11
34216: PUSH
34217: LD_INT 12
34219: PUSH
34220: LD_INT 13
34222: PUSH
34223: LD_INT 14
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: LD_INT 2
34231: PUSH
34232: LD_INT 3
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: ST_TO_ADDR
34244: GO 34375
34246: LD_INT 1
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34254
34252: GO 34316
34254: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34255: LD_ADDR_VAR 0 3
34259: PUSH
34260: LD_INT 11
34262: PUSH
34263: LD_INT 12
34265: PUSH
34266: LD_INT 13
34268: PUSH
34269: LD_INT 14
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: LD_INT 3
34280: PUSH
34281: LD_INT 4
34283: PUSH
34284: LD_INT 5
34286: PUSH
34287: LD_INT 21
34289: PUSH
34290: LD_INT 23
34292: PUSH
34293: LD_INT 22
34295: PUSH
34296: LD_INT 24
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: ST_TO_ADDR
34314: GO 34375
34316: LD_INT 3
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34324
34322: GO 34374
34324: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34325: LD_ADDR_VAR 0 3
34329: PUSH
34330: LD_INT 13
34332: PUSH
34333: LD_INT 14
34335: PUSH
34336: LD_INT 2
34338: PUSH
34339: LD_INT 3
34341: PUSH
34342: LD_INT 4
34344: PUSH
34345: LD_INT 5
34347: PUSH
34348: LD_INT 21
34350: PUSH
34351: LD_INT 22
34353: PUSH
34354: LD_INT 23
34356: PUSH
34357: LD_INT 24
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: ST_TO_ADDR
34372: GO 34375
34374: POP
// result := ( chassis in result ) ;
34375: LD_ADDR_VAR 0 3
34379: PUSH
34380: LD_VAR 0 1
34384: PUSH
34385: LD_VAR 0 3
34389: IN
34390: ST_TO_ADDR
// end ;
34391: LD_VAR 0 3
34395: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34396: LD_INT 0
34398: PPUSH
// if not chassis or not weapon then
34399: LD_VAR 0 1
34403: NOT
34404: PUSH
34405: LD_VAR 0 2
34409: NOT
34410: OR
34411: IFFALSE 34415
// exit ;
34413: GO 35475
// case weapon of us_machine_gun :
34415: LD_VAR 0 2
34419: PUSH
34420: LD_INT 2
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34428
34426: GO 34458
34428: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34429: LD_ADDR_VAR 0 3
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: LD_INT 4
34445: PUSH
34446: LD_INT 5
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
34456: GO 35459
34458: LD_INT 3
34460: DOUBLE
34461: EQUAL
34462: IFTRUE 34466
34464: GO 34496
34466: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34467: LD_ADDR_VAR 0 3
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: LD_INT 2
34477: PUSH
34478: LD_INT 3
34480: PUSH
34481: LD_INT 4
34483: PUSH
34484: LD_INT 5
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: ST_TO_ADDR
34494: GO 35459
34496: LD_INT 11
34498: DOUBLE
34499: EQUAL
34500: IFTRUE 34504
34502: GO 34534
34504: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34505: LD_ADDR_VAR 0 3
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: LD_INT 2
34515: PUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 4
34521: PUSH
34522: LD_INT 5
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: ST_TO_ADDR
34532: GO 35459
34534: LD_INT 4
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34542
34540: GO 34568
34542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: LD_INT 3
34553: PUSH
34554: LD_INT 4
34556: PUSH
34557: LD_INT 5
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: ST_TO_ADDR
34566: GO 35459
34568: LD_INT 5
34570: DOUBLE
34571: EQUAL
34572: IFTRUE 34576
34574: GO 34602
34576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34577: LD_ADDR_VAR 0 3
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: LD_INT 4
34590: PUSH
34591: LD_INT 5
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: ST_TO_ADDR
34600: GO 35459
34602: LD_INT 9
34604: DOUBLE
34605: EQUAL
34606: IFTRUE 34610
34608: GO 34636
34610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34611: LD_ADDR_VAR 0 3
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: LD_INT 3
34621: PUSH
34622: LD_INT 4
34624: PUSH
34625: LD_INT 5
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
34634: GO 35459
34636: LD_INT 7
34638: DOUBLE
34639: EQUAL
34640: IFTRUE 34644
34642: GO 34670
34644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: LD_INT 4
34658: PUSH
34659: LD_INT 5
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
34668: GO 35459
34670: LD_INT 12
34672: DOUBLE
34673: EQUAL
34674: IFTRUE 34678
34676: GO 34704
34678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34679: LD_ADDR_VAR 0 3
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: LD_INT 4
34692: PUSH
34693: LD_INT 5
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: ST_TO_ADDR
34702: GO 35459
34704: LD_INT 13
34706: DOUBLE
34707: EQUAL
34708: IFTRUE 34712
34710: GO 34738
34712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34713: LD_ADDR_VAR 0 3
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: LD_INT 3
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: LD_INT 5
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: ST_TO_ADDR
34736: GO 35459
34738: LD_INT 14
34740: DOUBLE
34741: EQUAL
34742: IFTRUE 34746
34744: GO 34764
34746: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34747: LD_ADDR_VAR 0 3
34751: PUSH
34752: LD_INT 4
34754: PUSH
34755: LD_INT 5
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: ST_TO_ADDR
34762: GO 35459
34764: LD_INT 6
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34790
34772: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: LD_INT 4
34780: PUSH
34781: LD_INT 5
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: ST_TO_ADDR
34788: GO 35459
34790: LD_INT 10
34792: DOUBLE
34793: EQUAL
34794: IFTRUE 34798
34796: GO 34816
34798: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34799: LD_ADDR_VAR 0 3
34803: PUSH
34804: LD_INT 4
34806: PUSH
34807: LD_INT 5
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 35459
34816: LD_INT 22
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 34850
34824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 11
34832: PUSH
34833: LD_INT 12
34835: PUSH
34836: LD_INT 13
34838: PUSH
34839: LD_INT 14
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
34848: GO 35459
34850: LD_INT 23
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34884
34858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: LD_INT 11
34866: PUSH
34867: LD_INT 12
34869: PUSH
34870: LD_INT 13
34872: PUSH
34873: LD_INT 14
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
34882: GO 35459
34884: LD_INT 24
34886: DOUBLE
34887: EQUAL
34888: IFTRUE 34892
34890: GO 34918
34892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34893: LD_ADDR_VAR 0 3
34897: PUSH
34898: LD_INT 11
34900: PUSH
34901: LD_INT 12
34903: PUSH
34904: LD_INT 13
34906: PUSH
34907: LD_INT 14
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
34916: GO 35459
34918: LD_INT 30
34920: DOUBLE
34921: EQUAL
34922: IFTRUE 34926
34924: GO 34952
34926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34927: LD_ADDR_VAR 0 3
34931: PUSH
34932: LD_INT 11
34934: PUSH
34935: LD_INT 12
34937: PUSH
34938: LD_INT 13
34940: PUSH
34941: LD_INT 14
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: ST_TO_ADDR
34950: GO 35459
34952: LD_INT 25
34954: DOUBLE
34955: EQUAL
34956: IFTRUE 34960
34958: GO 34978
34960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34961: LD_ADDR_VAR 0 3
34965: PUSH
34966: LD_INT 13
34968: PUSH
34969: LD_INT 14
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: ST_TO_ADDR
34976: GO 35459
34978: LD_INT 27
34980: DOUBLE
34981: EQUAL
34982: IFTRUE 34986
34984: GO 35004
34986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_INT 13
34994: PUSH
34995: LD_INT 14
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: ST_TO_ADDR
35002: GO 35459
35004: LD_INT 92
35006: DOUBLE
35007: EQUAL
35008: IFTRUE 35012
35010: GO 35038
35012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35013: LD_ADDR_VAR 0 3
35017: PUSH
35018: LD_INT 11
35020: PUSH
35021: LD_INT 12
35023: PUSH
35024: LD_INT 13
35026: PUSH
35027: LD_INT 14
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
35036: GO 35459
35038: LD_INT 28
35040: DOUBLE
35041: EQUAL
35042: IFTRUE 35046
35044: GO 35064
35046: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35047: LD_ADDR_VAR 0 3
35051: PUSH
35052: LD_INT 13
35054: PUSH
35055: LD_INT 14
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: ST_TO_ADDR
35062: GO 35459
35064: LD_INT 29
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35072
35070: GO 35090
35072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35073: LD_ADDR_VAR 0 3
35077: PUSH
35078: LD_INT 13
35080: PUSH
35081: LD_INT 14
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: ST_TO_ADDR
35088: GO 35459
35090: LD_INT 31
35092: DOUBLE
35093: EQUAL
35094: IFTRUE 35098
35096: GO 35116
35098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35099: LD_ADDR_VAR 0 3
35103: PUSH
35104: LD_INT 13
35106: PUSH
35107: LD_INT 14
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: ST_TO_ADDR
35114: GO 35459
35116: LD_INT 26
35118: DOUBLE
35119: EQUAL
35120: IFTRUE 35124
35122: GO 35142
35124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35125: LD_ADDR_VAR 0 3
35129: PUSH
35130: LD_INT 13
35132: PUSH
35133: LD_INT 14
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: ST_TO_ADDR
35140: GO 35459
35142: LD_INT 42
35144: DOUBLE
35145: EQUAL
35146: IFTRUE 35150
35148: GO 35176
35150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35151: LD_ADDR_VAR 0 3
35155: PUSH
35156: LD_INT 21
35158: PUSH
35159: LD_INT 22
35161: PUSH
35162: LD_INT 23
35164: PUSH
35165: LD_INT 24
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: ST_TO_ADDR
35174: GO 35459
35176: LD_INT 43
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35184
35182: GO 35210
35184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35185: LD_ADDR_VAR 0 3
35189: PUSH
35190: LD_INT 21
35192: PUSH
35193: LD_INT 22
35195: PUSH
35196: LD_INT 23
35198: PUSH
35199: LD_INT 24
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
35208: GO 35459
35210: LD_INT 44
35212: DOUBLE
35213: EQUAL
35214: IFTRUE 35218
35216: GO 35244
35218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35219: LD_ADDR_VAR 0 3
35223: PUSH
35224: LD_INT 21
35226: PUSH
35227: LD_INT 22
35229: PUSH
35230: LD_INT 23
35232: PUSH
35233: LD_INT 24
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
35242: GO 35459
35244: LD_INT 45
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35252
35250: GO 35278
35252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35253: LD_ADDR_VAR 0 3
35257: PUSH
35258: LD_INT 21
35260: PUSH
35261: LD_INT 22
35263: PUSH
35264: LD_INT 23
35266: PUSH
35267: LD_INT 24
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: ST_TO_ADDR
35276: GO 35459
35278: LD_INT 49
35280: DOUBLE
35281: EQUAL
35282: IFTRUE 35286
35284: GO 35312
35286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35287: LD_ADDR_VAR 0 3
35291: PUSH
35292: LD_INT 21
35294: PUSH
35295: LD_INT 22
35297: PUSH
35298: LD_INT 23
35300: PUSH
35301: LD_INT 24
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: ST_TO_ADDR
35310: GO 35459
35312: LD_INT 51
35314: DOUBLE
35315: EQUAL
35316: IFTRUE 35320
35318: GO 35346
35320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35321: LD_ADDR_VAR 0 3
35325: PUSH
35326: LD_INT 21
35328: PUSH
35329: LD_INT 22
35331: PUSH
35332: LD_INT 23
35334: PUSH
35335: LD_INT 24
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
35344: GO 35459
35346: LD_INT 52
35348: DOUBLE
35349: EQUAL
35350: IFTRUE 35354
35352: GO 35380
35354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35355: LD_ADDR_VAR 0 3
35359: PUSH
35360: LD_INT 21
35362: PUSH
35363: LD_INT 22
35365: PUSH
35366: LD_INT 23
35368: PUSH
35369: LD_INT 24
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
35378: GO 35459
35380: LD_INT 53
35382: DOUBLE
35383: EQUAL
35384: IFTRUE 35388
35386: GO 35406
35388: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35389: LD_ADDR_VAR 0 3
35393: PUSH
35394: LD_INT 23
35396: PUSH
35397: LD_INT 24
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: ST_TO_ADDR
35404: GO 35459
35406: LD_INT 46
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35432
35414: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35415: LD_ADDR_VAR 0 3
35419: PUSH
35420: LD_INT 23
35422: PUSH
35423: LD_INT 24
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: ST_TO_ADDR
35430: GO 35459
35432: LD_INT 47
35434: DOUBLE
35435: EQUAL
35436: IFTRUE 35440
35438: GO 35458
35440: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35441: LD_ADDR_VAR 0 3
35445: PUSH
35446: LD_INT 23
35448: PUSH
35449: LD_INT 24
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: ST_TO_ADDR
35456: GO 35459
35458: POP
// result := ( chassis in result ) ;
35459: LD_ADDR_VAR 0 3
35463: PUSH
35464: LD_VAR 0 1
35468: PUSH
35469: LD_VAR 0 3
35473: IN
35474: ST_TO_ADDR
// end ;
35475: LD_VAR 0 3
35479: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35480: LD_INT 0
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
// result := array ;
35489: LD_ADDR_VAR 0 5
35493: PUSH
35494: LD_VAR 0 1
35498: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35499: LD_VAR 0 1
35503: NOT
35504: PUSH
35505: LD_VAR 0 2
35509: NOT
35510: OR
35511: PUSH
35512: LD_VAR 0 3
35516: NOT
35517: OR
35518: PUSH
35519: LD_VAR 0 2
35523: PUSH
35524: LD_VAR 0 1
35528: GREATER
35529: OR
35530: PUSH
35531: LD_VAR 0 3
35535: PUSH
35536: LD_VAR 0 1
35540: GREATER
35541: OR
35542: IFFALSE 35546
// exit ;
35544: GO 35842
// if direction then
35546: LD_VAR 0 4
35550: IFFALSE 35614
// begin d := 1 ;
35552: LD_ADDR_VAR 0 9
35556: PUSH
35557: LD_INT 1
35559: ST_TO_ADDR
// if i_from > i_to then
35560: LD_VAR 0 2
35564: PUSH
35565: LD_VAR 0 3
35569: GREATER
35570: IFFALSE 35596
// length := ( array - i_from ) + i_to else
35572: LD_ADDR_VAR 0 11
35576: PUSH
35577: LD_VAR 0 1
35581: PUSH
35582: LD_VAR 0 2
35586: MINUS
35587: PUSH
35588: LD_VAR 0 3
35592: PLUS
35593: ST_TO_ADDR
35594: GO 35612
// length := i_to - i_from ;
35596: LD_ADDR_VAR 0 11
35600: PUSH
35601: LD_VAR 0 3
35605: PUSH
35606: LD_VAR 0 2
35610: MINUS
35611: ST_TO_ADDR
// end else
35612: GO 35675
// begin d := - 1 ;
35614: LD_ADDR_VAR 0 9
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: ST_TO_ADDR
// if i_from > i_to then
35623: LD_VAR 0 2
35627: PUSH
35628: LD_VAR 0 3
35632: GREATER
35633: IFFALSE 35653
// length := i_from - i_to else
35635: LD_ADDR_VAR 0 11
35639: PUSH
35640: LD_VAR 0 2
35644: PUSH
35645: LD_VAR 0 3
35649: MINUS
35650: ST_TO_ADDR
35651: GO 35675
// length := ( array - i_to ) + i_from ;
35653: LD_ADDR_VAR 0 11
35657: PUSH
35658: LD_VAR 0 1
35662: PUSH
35663: LD_VAR 0 3
35667: MINUS
35668: PUSH
35669: LD_VAR 0 2
35673: PLUS
35674: ST_TO_ADDR
// end ; if not length then
35675: LD_VAR 0 11
35679: NOT
35680: IFFALSE 35684
// exit ;
35682: GO 35842
// tmp := array ;
35684: LD_ADDR_VAR 0 10
35688: PUSH
35689: LD_VAR 0 1
35693: ST_TO_ADDR
// for i = 1 to length do
35694: LD_ADDR_VAR 0 6
35698: PUSH
35699: DOUBLE
35700: LD_INT 1
35702: DEC
35703: ST_TO_ADDR
35704: LD_VAR 0 11
35708: PUSH
35709: FOR_TO
35710: IFFALSE 35830
// begin for j = 1 to array do
35712: LD_ADDR_VAR 0 7
35716: PUSH
35717: DOUBLE
35718: LD_INT 1
35720: DEC
35721: ST_TO_ADDR
35722: LD_VAR 0 1
35726: PUSH
35727: FOR_TO
35728: IFFALSE 35816
// begin k := j + d ;
35730: LD_ADDR_VAR 0 8
35734: PUSH
35735: LD_VAR 0 7
35739: PUSH
35740: LD_VAR 0 9
35744: PLUS
35745: ST_TO_ADDR
// if k > array then
35746: LD_VAR 0 8
35750: PUSH
35751: LD_VAR 0 1
35755: GREATER
35756: IFFALSE 35766
// k := 1 ;
35758: LD_ADDR_VAR 0 8
35762: PUSH
35763: LD_INT 1
35765: ST_TO_ADDR
// if not k then
35766: LD_VAR 0 8
35770: NOT
35771: IFFALSE 35783
// k := array ;
35773: LD_ADDR_VAR 0 8
35777: PUSH
35778: LD_VAR 0 1
35782: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35783: LD_ADDR_VAR 0 10
35787: PUSH
35788: LD_VAR 0 10
35792: PPUSH
35793: LD_VAR 0 8
35797: PPUSH
35798: LD_VAR 0 1
35802: PUSH
35803: LD_VAR 0 7
35807: ARRAY
35808: PPUSH
35809: CALL_OW 1
35813: ST_TO_ADDR
// end ;
35814: GO 35727
35816: POP
35817: POP
// array := tmp ;
35818: LD_ADDR_VAR 0 1
35822: PUSH
35823: LD_VAR 0 10
35827: ST_TO_ADDR
// end ;
35828: GO 35709
35830: POP
35831: POP
// result := array ;
35832: LD_ADDR_VAR 0 5
35836: PUSH
35837: LD_VAR 0 1
35841: ST_TO_ADDR
// end ;
35842: LD_VAR 0 5
35846: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35847: LD_INT 0
35849: PPUSH
35850: PPUSH
// result := 0 ;
35851: LD_ADDR_VAR 0 3
35855: PUSH
35856: LD_INT 0
35858: ST_TO_ADDR
// if not array or not value in array then
35859: LD_VAR 0 1
35863: NOT
35864: PUSH
35865: LD_VAR 0 2
35869: PUSH
35870: LD_VAR 0 1
35874: IN
35875: NOT
35876: OR
35877: IFFALSE 35881
// exit ;
35879: GO 35935
// for i = 1 to array do
35881: LD_ADDR_VAR 0 4
35885: PUSH
35886: DOUBLE
35887: LD_INT 1
35889: DEC
35890: ST_TO_ADDR
35891: LD_VAR 0 1
35895: PUSH
35896: FOR_TO
35897: IFFALSE 35933
// if value = array [ i ] then
35899: LD_VAR 0 2
35903: PUSH
35904: LD_VAR 0 1
35908: PUSH
35909: LD_VAR 0 4
35913: ARRAY
35914: EQUAL
35915: IFFALSE 35931
// begin result := i ;
35917: LD_ADDR_VAR 0 3
35921: PUSH
35922: LD_VAR 0 4
35926: ST_TO_ADDR
// exit ;
35927: POP
35928: POP
35929: GO 35935
// end ;
35931: GO 35896
35933: POP
35934: POP
// end ;
35935: LD_VAR 0 3
35939: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35940: LD_INT 0
35942: PPUSH
// vc_chassis := chassis ;
35943: LD_ADDR_OWVAR 37
35947: PUSH
35948: LD_VAR 0 1
35952: ST_TO_ADDR
// vc_engine := engine ;
35953: LD_ADDR_OWVAR 39
35957: PUSH
35958: LD_VAR 0 2
35962: ST_TO_ADDR
// vc_control := control ;
35963: LD_ADDR_OWVAR 38
35967: PUSH
35968: LD_VAR 0 3
35972: ST_TO_ADDR
// vc_weapon := weapon ;
35973: LD_ADDR_OWVAR 40
35977: PUSH
35978: LD_VAR 0 4
35982: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35983: LD_ADDR_OWVAR 41
35987: PUSH
35988: LD_VAR 0 5
35992: ST_TO_ADDR
// end ;
35993: LD_VAR 0 6
35997: RET
// export function WantPlant ( unit ) ; var task ; begin
35998: LD_INT 0
36000: PPUSH
36001: PPUSH
// result := false ;
36002: LD_ADDR_VAR 0 2
36006: PUSH
36007: LD_INT 0
36009: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36010: LD_ADDR_VAR 0 3
36014: PUSH
36015: LD_VAR 0 1
36019: PPUSH
36020: CALL_OW 437
36024: ST_TO_ADDR
// if task then
36025: LD_VAR 0 3
36029: IFFALSE 36057
// if task [ 1 ] [ 1 ] = p then
36031: LD_VAR 0 3
36035: PUSH
36036: LD_INT 1
36038: ARRAY
36039: PUSH
36040: LD_INT 1
36042: ARRAY
36043: PUSH
36044: LD_STRING p
36046: EQUAL
36047: IFFALSE 36057
// result := true ;
36049: LD_ADDR_VAR 0 2
36053: PUSH
36054: LD_INT 1
36056: ST_TO_ADDR
// end ;
36057: LD_VAR 0 2
36061: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36062: LD_INT 0
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
// if pos < 1 then
36068: LD_VAR 0 2
36072: PUSH
36073: LD_INT 1
36075: LESS
36076: IFFALSE 36080
// exit ;
36078: GO 36383
// if pos = 1 then
36080: LD_VAR 0 2
36084: PUSH
36085: LD_INT 1
36087: EQUAL
36088: IFFALSE 36121
// result := Replace ( arr , pos [ 1 ] , value ) else
36090: LD_ADDR_VAR 0 4
36094: PUSH
36095: LD_VAR 0 1
36099: PPUSH
36100: LD_VAR 0 2
36104: PUSH
36105: LD_INT 1
36107: ARRAY
36108: PPUSH
36109: LD_VAR 0 3
36113: PPUSH
36114: CALL_OW 1
36118: ST_TO_ADDR
36119: GO 36383
// begin tmp := arr ;
36121: LD_ADDR_VAR 0 6
36125: PUSH
36126: LD_VAR 0 1
36130: ST_TO_ADDR
// s_arr := [ tmp ] ;
36131: LD_ADDR_VAR 0 7
36135: PUSH
36136: LD_VAR 0 6
36140: PUSH
36141: EMPTY
36142: LIST
36143: ST_TO_ADDR
// for i = 1 to pos - 1 do
36144: LD_ADDR_VAR 0 5
36148: PUSH
36149: DOUBLE
36150: LD_INT 1
36152: DEC
36153: ST_TO_ADDR
36154: LD_VAR 0 2
36158: PUSH
36159: LD_INT 1
36161: MINUS
36162: PUSH
36163: FOR_TO
36164: IFFALSE 36209
// begin tmp := tmp [ pos [ i ] ] ;
36166: LD_ADDR_VAR 0 6
36170: PUSH
36171: LD_VAR 0 6
36175: PUSH
36176: LD_VAR 0 2
36180: PUSH
36181: LD_VAR 0 5
36185: ARRAY
36186: ARRAY
36187: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36188: LD_ADDR_VAR 0 7
36192: PUSH
36193: LD_VAR 0 7
36197: PUSH
36198: LD_VAR 0 6
36202: PUSH
36203: EMPTY
36204: LIST
36205: ADD
36206: ST_TO_ADDR
// end ;
36207: GO 36163
36209: POP
36210: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36211: LD_ADDR_VAR 0 6
36215: PUSH
36216: LD_VAR 0 6
36220: PPUSH
36221: LD_VAR 0 2
36225: PUSH
36226: LD_VAR 0 2
36230: ARRAY
36231: PPUSH
36232: LD_VAR 0 3
36236: PPUSH
36237: CALL_OW 1
36241: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36242: LD_ADDR_VAR 0 7
36246: PUSH
36247: LD_VAR 0 7
36251: PPUSH
36252: LD_VAR 0 7
36256: PPUSH
36257: LD_VAR 0 6
36261: PPUSH
36262: CALL_OW 1
36266: ST_TO_ADDR
// for i = s_arr downto 2 do
36267: LD_ADDR_VAR 0 5
36271: PUSH
36272: DOUBLE
36273: LD_VAR 0 7
36277: INC
36278: ST_TO_ADDR
36279: LD_INT 2
36281: PUSH
36282: FOR_DOWNTO
36283: IFFALSE 36367
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36285: LD_ADDR_VAR 0 6
36289: PUSH
36290: LD_VAR 0 7
36294: PUSH
36295: LD_VAR 0 5
36299: PUSH
36300: LD_INT 1
36302: MINUS
36303: ARRAY
36304: PPUSH
36305: LD_VAR 0 2
36309: PUSH
36310: LD_VAR 0 5
36314: PUSH
36315: LD_INT 1
36317: MINUS
36318: ARRAY
36319: PPUSH
36320: LD_VAR 0 7
36324: PUSH
36325: LD_VAR 0 5
36329: ARRAY
36330: PPUSH
36331: CALL_OW 1
36335: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36336: LD_ADDR_VAR 0 7
36340: PUSH
36341: LD_VAR 0 7
36345: PPUSH
36346: LD_VAR 0 5
36350: PUSH
36351: LD_INT 1
36353: MINUS
36354: PPUSH
36355: LD_VAR 0 6
36359: PPUSH
36360: CALL_OW 1
36364: ST_TO_ADDR
// end ;
36365: GO 36282
36367: POP
36368: POP
// result := s_arr [ 1 ] ;
36369: LD_ADDR_VAR 0 4
36373: PUSH
36374: LD_VAR 0 7
36378: PUSH
36379: LD_INT 1
36381: ARRAY
36382: ST_TO_ADDR
// end ; end ;
36383: LD_VAR 0 4
36387: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36388: LD_INT 0
36390: PPUSH
36391: PPUSH
// if not list then
36392: LD_VAR 0 1
36396: NOT
36397: IFFALSE 36401
// exit ;
36399: GO 36492
// i := list [ pos1 ] ;
36401: LD_ADDR_VAR 0 5
36405: PUSH
36406: LD_VAR 0 1
36410: PUSH
36411: LD_VAR 0 2
36415: ARRAY
36416: ST_TO_ADDR
// if not i then
36417: LD_VAR 0 5
36421: NOT
36422: IFFALSE 36426
// exit ;
36424: GO 36492
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36426: LD_ADDR_VAR 0 1
36430: PUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: LD_VAR 0 2
36440: PPUSH
36441: LD_VAR 0 1
36445: PUSH
36446: LD_VAR 0 3
36450: ARRAY
36451: PPUSH
36452: CALL_OW 1
36456: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36457: LD_ADDR_VAR 0 1
36461: PUSH
36462: LD_VAR 0 1
36466: PPUSH
36467: LD_VAR 0 3
36471: PPUSH
36472: LD_VAR 0 5
36476: PPUSH
36477: CALL_OW 1
36481: ST_TO_ADDR
// result := list ;
36482: LD_ADDR_VAR 0 4
36486: PUSH
36487: LD_VAR 0 1
36491: ST_TO_ADDR
// end ;
36492: LD_VAR 0 4
36496: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36497: LD_INT 0
36499: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36500: LD_ADDR_VAR 0 5
36504: PUSH
36505: LD_VAR 0 1
36509: PPUSH
36510: CALL_OW 250
36514: PPUSH
36515: LD_VAR 0 1
36519: PPUSH
36520: CALL_OW 251
36524: PPUSH
36525: LD_VAR 0 2
36529: PPUSH
36530: LD_VAR 0 3
36534: PPUSH
36535: LD_VAR 0 4
36539: PPUSH
36540: CALL 36918 0 5
36544: ST_TO_ADDR
// end ;
36545: LD_VAR 0 5
36549: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36550: LD_INT 0
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
// if not list or not unit then
36556: LD_VAR 0 2
36560: NOT
36561: PUSH
36562: LD_VAR 0 1
36566: NOT
36567: OR
36568: IFFALSE 36572
// exit ;
36570: GO 36913
// result := [ ] ;
36572: LD_ADDR_VAR 0 5
36576: PUSH
36577: EMPTY
36578: ST_TO_ADDR
// for i in list do
36579: LD_ADDR_VAR 0 6
36583: PUSH
36584: LD_VAR 0 2
36588: PUSH
36589: FOR_IN
36590: IFFALSE 36808
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36592: LD_ADDR_VAR 0 8
36596: PUSH
36597: LD_VAR 0 1
36601: PPUSH
36602: LD_VAR 0 6
36606: PUSH
36607: LD_INT 1
36609: ARRAY
36610: PPUSH
36611: LD_VAR 0 6
36615: PUSH
36616: LD_INT 2
36618: ARRAY
36619: PPUSH
36620: CALL_OW 297
36624: ST_TO_ADDR
// if not Count ( result ) then
36625: LD_VAR 0 5
36629: PPUSH
36630: CALL 33202 0 1
36634: NOT
36635: IFFALSE 36668
// begin result := Join ( result , [ i , tmp ] ) ;
36637: LD_ADDR_VAR 0 5
36641: PUSH
36642: LD_VAR 0 5
36646: PPUSH
36647: LD_VAR 0 6
36651: PUSH
36652: LD_VAR 0 8
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PPUSH
36661: CALL 68802 0 2
36665: ST_TO_ADDR
// continue ;
36666: GO 36589
// end ; if result [ result ] [ 2 ] <= tmp then
36668: LD_VAR 0 5
36672: PUSH
36673: LD_VAR 0 5
36677: ARRAY
36678: PUSH
36679: LD_INT 2
36681: ARRAY
36682: PUSH
36683: LD_VAR 0 8
36687: LESSEQUAL
36688: IFFALSE 36721
// result := Join ( result , [ i , tmp ] ) else
36690: LD_ADDR_VAR 0 5
36694: PUSH
36695: LD_VAR 0 5
36699: PPUSH
36700: LD_VAR 0 6
36704: PUSH
36705: LD_VAR 0 8
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PPUSH
36714: CALL 68802 0 2
36718: ST_TO_ADDR
36719: GO 36806
// begin for j := 1 to Count ( result ) do
36721: LD_ADDR_VAR 0 7
36725: PUSH
36726: DOUBLE
36727: LD_INT 1
36729: DEC
36730: ST_TO_ADDR
36731: LD_VAR 0 5
36735: PPUSH
36736: CALL 33202 0 1
36740: PUSH
36741: FOR_TO
36742: IFFALSE 36804
// begin if tmp < result [ j ] [ 2 ] then
36744: LD_VAR 0 8
36748: PUSH
36749: LD_VAR 0 5
36753: PUSH
36754: LD_VAR 0 7
36758: ARRAY
36759: PUSH
36760: LD_INT 2
36762: ARRAY
36763: LESS
36764: IFFALSE 36802
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36766: LD_ADDR_VAR 0 5
36770: PUSH
36771: LD_VAR 0 5
36775: PPUSH
36776: LD_VAR 0 7
36780: PPUSH
36781: LD_VAR 0 6
36785: PUSH
36786: LD_VAR 0 8
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PPUSH
36795: CALL_OW 2
36799: ST_TO_ADDR
// break ;
36800: GO 36804
// end ; end ;
36802: GO 36741
36804: POP
36805: POP
// end ; end ;
36806: GO 36589
36808: POP
36809: POP
// if result and not asc then
36810: LD_VAR 0 5
36814: PUSH
36815: LD_VAR 0 3
36819: NOT
36820: AND
36821: IFFALSE 36838
// result := ReverseArray ( result ) ;
36823: LD_ADDR_VAR 0 5
36827: PUSH
36828: LD_VAR 0 5
36832: PPUSH
36833: CALL 64078 0 1
36837: ST_TO_ADDR
// tmp := [ ] ;
36838: LD_ADDR_VAR 0 8
36842: PUSH
36843: EMPTY
36844: ST_TO_ADDR
// if mode then
36845: LD_VAR 0 4
36849: IFFALSE 36913
// begin for i := 1 to result do
36851: LD_ADDR_VAR 0 6
36855: PUSH
36856: DOUBLE
36857: LD_INT 1
36859: DEC
36860: ST_TO_ADDR
36861: LD_VAR 0 5
36865: PUSH
36866: FOR_TO
36867: IFFALSE 36901
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36869: LD_ADDR_VAR 0 8
36873: PUSH
36874: LD_VAR 0 8
36878: PPUSH
36879: LD_VAR 0 5
36883: PUSH
36884: LD_VAR 0 6
36888: ARRAY
36889: PUSH
36890: LD_INT 1
36892: ARRAY
36893: PPUSH
36894: CALL 68802 0 2
36898: ST_TO_ADDR
36899: GO 36866
36901: POP
36902: POP
// result := tmp ;
36903: LD_ADDR_VAR 0 5
36907: PUSH
36908: LD_VAR 0 8
36912: ST_TO_ADDR
// end ; end ;
36913: LD_VAR 0 5
36917: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36918: LD_INT 0
36920: PPUSH
36921: PPUSH
36922: PPUSH
36923: PPUSH
// if not list then
36924: LD_VAR 0 3
36928: NOT
36929: IFFALSE 36933
// exit ;
36931: GO 37321
// result := [ ] ;
36933: LD_ADDR_VAR 0 6
36937: PUSH
36938: EMPTY
36939: ST_TO_ADDR
// for i in list do
36940: LD_ADDR_VAR 0 7
36944: PUSH
36945: LD_VAR 0 3
36949: PUSH
36950: FOR_IN
36951: IFFALSE 37153
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36953: LD_ADDR_VAR 0 9
36957: PUSH
36958: LD_VAR 0 7
36962: PPUSH
36963: LD_VAR 0 1
36967: PPUSH
36968: LD_VAR 0 2
36972: PPUSH
36973: CALL_OW 297
36977: ST_TO_ADDR
// if not result then
36978: LD_VAR 0 6
36982: NOT
36983: IFFALSE 37009
// result := [ [ i , tmp ] ] else
36985: LD_ADDR_VAR 0 6
36989: PUSH
36990: LD_VAR 0 7
36994: PUSH
36995: LD_VAR 0 9
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: EMPTY
37005: LIST
37006: ST_TO_ADDR
37007: GO 37151
// begin if result [ result ] [ 2 ] < tmp then
37009: LD_VAR 0 6
37013: PUSH
37014: LD_VAR 0 6
37018: ARRAY
37019: PUSH
37020: LD_INT 2
37022: ARRAY
37023: PUSH
37024: LD_VAR 0 9
37028: LESS
37029: IFFALSE 37071
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37031: LD_ADDR_VAR 0 6
37035: PUSH
37036: LD_VAR 0 6
37040: PPUSH
37041: LD_VAR 0 6
37045: PUSH
37046: LD_INT 1
37048: PLUS
37049: PPUSH
37050: LD_VAR 0 7
37054: PUSH
37055: LD_VAR 0 9
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PPUSH
37064: CALL_OW 2
37068: ST_TO_ADDR
37069: GO 37151
// for j = 1 to result do
37071: LD_ADDR_VAR 0 8
37075: PUSH
37076: DOUBLE
37077: LD_INT 1
37079: DEC
37080: ST_TO_ADDR
37081: LD_VAR 0 6
37085: PUSH
37086: FOR_TO
37087: IFFALSE 37149
// begin if tmp < result [ j ] [ 2 ] then
37089: LD_VAR 0 9
37093: PUSH
37094: LD_VAR 0 6
37098: PUSH
37099: LD_VAR 0 8
37103: ARRAY
37104: PUSH
37105: LD_INT 2
37107: ARRAY
37108: LESS
37109: IFFALSE 37147
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37111: LD_ADDR_VAR 0 6
37115: PUSH
37116: LD_VAR 0 6
37120: PPUSH
37121: LD_VAR 0 8
37125: PPUSH
37126: LD_VAR 0 7
37130: PUSH
37131: LD_VAR 0 9
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PPUSH
37140: CALL_OW 2
37144: ST_TO_ADDR
// break ;
37145: GO 37149
// end ; end ;
37147: GO 37086
37149: POP
37150: POP
// end ; end ;
37151: GO 36950
37153: POP
37154: POP
// if result and not asc then
37155: LD_VAR 0 6
37159: PUSH
37160: LD_VAR 0 4
37164: NOT
37165: AND
37166: IFFALSE 37241
// begin tmp := result ;
37168: LD_ADDR_VAR 0 9
37172: PUSH
37173: LD_VAR 0 6
37177: ST_TO_ADDR
// for i = tmp downto 1 do
37178: LD_ADDR_VAR 0 7
37182: PUSH
37183: DOUBLE
37184: LD_VAR 0 9
37188: INC
37189: ST_TO_ADDR
37190: LD_INT 1
37192: PUSH
37193: FOR_DOWNTO
37194: IFFALSE 37239
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37196: LD_ADDR_VAR 0 6
37200: PUSH
37201: LD_VAR 0 6
37205: PPUSH
37206: LD_VAR 0 9
37210: PUSH
37211: LD_VAR 0 7
37215: MINUS
37216: PUSH
37217: LD_INT 1
37219: PLUS
37220: PPUSH
37221: LD_VAR 0 9
37225: PUSH
37226: LD_VAR 0 7
37230: ARRAY
37231: PPUSH
37232: CALL_OW 1
37236: ST_TO_ADDR
37237: GO 37193
37239: POP
37240: POP
// end ; tmp := [ ] ;
37241: LD_ADDR_VAR 0 9
37245: PUSH
37246: EMPTY
37247: ST_TO_ADDR
// if mode then
37248: LD_VAR 0 5
37252: IFFALSE 37321
// begin for i = 1 to result do
37254: LD_ADDR_VAR 0 7
37258: PUSH
37259: DOUBLE
37260: LD_INT 1
37262: DEC
37263: ST_TO_ADDR
37264: LD_VAR 0 6
37268: PUSH
37269: FOR_TO
37270: IFFALSE 37309
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37272: LD_ADDR_VAR 0 9
37276: PUSH
37277: LD_VAR 0 9
37281: PPUSH
37282: LD_VAR 0 7
37286: PPUSH
37287: LD_VAR 0 6
37291: PUSH
37292: LD_VAR 0 7
37296: ARRAY
37297: PUSH
37298: LD_INT 1
37300: ARRAY
37301: PPUSH
37302: CALL_OW 1
37306: ST_TO_ADDR
37307: GO 37269
37309: POP
37310: POP
// result := tmp ;
37311: LD_ADDR_VAR 0 6
37315: PUSH
37316: LD_VAR 0 9
37320: ST_TO_ADDR
// end ; end ;
37321: LD_VAR 0 6
37325: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37326: LD_INT 0
37328: PPUSH
37329: PPUSH
37330: PPUSH
37331: PPUSH
37332: PPUSH
37333: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37334: LD_ADDR_VAR 0 5
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: ST_TO_ADDR
// if not x or not y then
37356: LD_VAR 0 2
37360: NOT
37361: PUSH
37362: LD_VAR 0 3
37366: NOT
37367: OR
37368: IFFALSE 37372
// exit ;
37370: GO 39022
// if not range then
37372: LD_VAR 0 4
37376: NOT
37377: IFFALSE 37387
// range := 10 ;
37379: LD_ADDR_VAR 0 4
37383: PUSH
37384: LD_INT 10
37386: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37387: LD_ADDR_VAR 0 8
37391: PUSH
37392: LD_INT 81
37394: PUSH
37395: LD_VAR 0 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 92
37406: PUSH
37407: LD_VAR 0 2
37411: PUSH
37412: LD_VAR 0 3
37416: PUSH
37417: LD_VAR 0 4
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 3
37430: PUSH
37431: LD_INT 21
37433: PUSH
37434: LD_INT 3
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: PPUSH
37450: CALL_OW 69
37454: ST_TO_ADDR
// if not tmp then
37455: LD_VAR 0 8
37459: NOT
37460: IFFALSE 37464
// exit ;
37462: GO 39022
// for i in tmp do
37464: LD_ADDR_VAR 0 6
37468: PUSH
37469: LD_VAR 0 8
37473: PUSH
37474: FOR_IN
37475: IFFALSE 38997
// begin points := [ 0 , 0 , 0 ] ;
37477: LD_ADDR_VAR 0 9
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: LIST
37495: ST_TO_ADDR
// bpoints := 1 ;
37496: LD_ADDR_VAR 0 10
37500: PUSH
37501: LD_INT 1
37503: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37504: LD_VAR 0 6
37508: PPUSH
37509: CALL_OW 247
37513: PUSH
37514: LD_INT 1
37516: DOUBLE
37517: EQUAL
37518: IFTRUE 37522
37520: GO 38100
37522: POP
// begin if GetClass ( i ) = 1 then
37523: LD_VAR 0 6
37527: PPUSH
37528: CALL_OW 257
37532: PUSH
37533: LD_INT 1
37535: EQUAL
37536: IFFALSE 37557
// points := [ 10 , 5 , 3 ] ;
37538: LD_ADDR_VAR 0 9
37542: PUSH
37543: LD_INT 10
37545: PUSH
37546: LD_INT 5
37548: PUSH
37549: LD_INT 3
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37557: LD_VAR 0 6
37561: PPUSH
37562: CALL_OW 257
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 4
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: LIST
37580: IN
37581: IFFALSE 37602
// points := [ 3 , 2 , 1 ] ;
37583: LD_ADDR_VAR 0 9
37587: PUSH
37588: LD_INT 3
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: LIST
37601: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37602: LD_VAR 0 6
37606: PPUSH
37607: CALL_OW 257
37611: PUSH
37612: LD_INT 5
37614: EQUAL
37615: IFFALSE 37636
// points := [ 130 , 5 , 2 ] ;
37617: LD_ADDR_VAR 0 9
37621: PUSH
37622: LD_INT 130
37624: PUSH
37625: LD_INT 5
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37636: LD_VAR 0 6
37640: PPUSH
37641: CALL_OW 257
37645: PUSH
37646: LD_INT 8
37648: EQUAL
37649: IFFALSE 37670
// points := [ 35 , 35 , 30 ] ;
37651: LD_ADDR_VAR 0 9
37655: PUSH
37656: LD_INT 35
37658: PUSH
37659: LD_INT 35
37661: PUSH
37662: LD_INT 30
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37670: LD_VAR 0 6
37674: PPUSH
37675: CALL_OW 257
37679: PUSH
37680: LD_INT 9
37682: EQUAL
37683: IFFALSE 37704
// points := [ 20 , 55 , 40 ] ;
37685: LD_ADDR_VAR 0 9
37689: PUSH
37690: LD_INT 20
37692: PUSH
37693: LD_INT 55
37695: PUSH
37696: LD_INT 40
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: LIST
37703: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37704: LD_VAR 0 6
37708: PPUSH
37709: CALL_OW 257
37713: PUSH
37714: LD_INT 12
37716: PUSH
37717: LD_INT 16
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: IN
37724: IFFALSE 37745
// points := [ 5 , 3 , 2 ] ;
37726: LD_ADDR_VAR 0 9
37730: PUSH
37731: LD_INT 5
37733: PUSH
37734: LD_INT 3
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37745: LD_VAR 0 6
37749: PPUSH
37750: CALL_OW 257
37754: PUSH
37755: LD_INT 17
37757: EQUAL
37758: IFFALSE 37779
// points := [ 100 , 50 , 75 ] ;
37760: LD_ADDR_VAR 0 9
37764: PUSH
37765: LD_INT 100
37767: PUSH
37768: LD_INT 50
37770: PUSH
37771: LD_INT 75
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37779: LD_VAR 0 6
37783: PPUSH
37784: CALL_OW 257
37788: PUSH
37789: LD_INT 15
37791: EQUAL
37792: IFFALSE 37813
// points := [ 10 , 5 , 3 ] ;
37794: LD_ADDR_VAR 0 9
37798: PUSH
37799: LD_INT 10
37801: PUSH
37802: LD_INT 5
37804: PUSH
37805: LD_INT 3
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37813: LD_VAR 0 6
37817: PPUSH
37818: CALL_OW 257
37822: PUSH
37823: LD_INT 14
37825: EQUAL
37826: IFFALSE 37847
// points := [ 10 , 0 , 0 ] ;
37828: LD_ADDR_VAR 0 9
37832: PUSH
37833: LD_INT 10
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37847: LD_VAR 0 6
37851: PPUSH
37852: CALL_OW 257
37856: PUSH
37857: LD_INT 11
37859: EQUAL
37860: IFFALSE 37881
// points := [ 30 , 10 , 5 ] ;
37862: LD_ADDR_VAR 0 9
37866: PUSH
37867: LD_INT 30
37869: PUSH
37870: LD_INT 10
37872: PUSH
37873: LD_INT 5
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37881: LD_VAR 0 1
37885: PPUSH
37886: LD_INT 5
37888: PPUSH
37889: CALL_OW 321
37893: PUSH
37894: LD_INT 2
37896: EQUAL
37897: IFFALSE 37914
// bpoints := bpoints * 1.8 ;
37899: LD_ADDR_VAR 0 10
37903: PUSH
37904: LD_VAR 0 10
37908: PUSH
37909: LD_REAL  1.80000000000000E+0000
37912: MUL
37913: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37914: LD_VAR 0 6
37918: PPUSH
37919: CALL_OW 257
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: LD_INT 3
37932: PUSH
37933: LD_INT 4
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: IN
37942: PUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: LD_INT 51
37950: PPUSH
37951: CALL_OW 321
37955: PUSH
37956: LD_INT 2
37958: EQUAL
37959: AND
37960: IFFALSE 37977
// bpoints := bpoints * 1.2 ;
37962: LD_ADDR_VAR 0 10
37966: PUSH
37967: LD_VAR 0 10
37971: PUSH
37972: LD_REAL  1.20000000000000E+0000
37975: MUL
37976: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37977: LD_VAR 0 6
37981: PPUSH
37982: CALL_OW 257
37986: PUSH
37987: LD_INT 5
37989: PUSH
37990: LD_INT 7
37992: PUSH
37993: LD_INT 9
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: IN
38001: PUSH
38002: LD_VAR 0 1
38006: PPUSH
38007: LD_INT 52
38009: PPUSH
38010: CALL_OW 321
38014: PUSH
38015: LD_INT 2
38017: EQUAL
38018: AND
38019: IFFALSE 38036
// bpoints := bpoints * 1.5 ;
38021: LD_ADDR_VAR 0 10
38025: PUSH
38026: LD_VAR 0 10
38030: PUSH
38031: LD_REAL  1.50000000000000E+0000
38034: MUL
38035: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38036: LD_VAR 0 1
38040: PPUSH
38041: LD_INT 66
38043: PPUSH
38044: CALL_OW 321
38048: PUSH
38049: LD_INT 2
38051: EQUAL
38052: IFFALSE 38069
// bpoints := bpoints * 1.1 ;
38054: LD_ADDR_VAR 0 10
38058: PUSH
38059: LD_VAR 0 10
38063: PUSH
38064: LD_REAL  1.10000000000000E+0000
38067: MUL
38068: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38069: LD_ADDR_VAR 0 10
38073: PUSH
38074: LD_VAR 0 10
38078: PUSH
38079: LD_VAR 0 6
38083: PPUSH
38084: LD_INT 1
38086: PPUSH
38087: CALL_OW 259
38091: PUSH
38092: LD_REAL  1.15000000000000E+0000
38095: MUL
38096: MUL
38097: ST_TO_ADDR
// end ; unit_vehicle :
38098: GO 38926
38100: LD_INT 2
38102: DOUBLE
38103: EQUAL
38104: IFTRUE 38108
38106: GO 38914
38108: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38109: LD_VAR 0 6
38113: PPUSH
38114: CALL_OW 264
38118: PUSH
38119: LD_INT 2
38121: PUSH
38122: LD_INT 42
38124: PUSH
38125: LD_INT 24
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: LIST
38132: IN
38133: IFFALSE 38154
// points := [ 25 , 5 , 3 ] ;
38135: LD_ADDR_VAR 0 9
38139: PUSH
38140: LD_INT 25
38142: PUSH
38143: LD_INT 5
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38154: LD_VAR 0 6
38158: PPUSH
38159: CALL_OW 264
38163: PUSH
38164: LD_INT 4
38166: PUSH
38167: LD_INT 43
38169: PUSH
38170: LD_INT 25
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: IN
38178: IFFALSE 38199
// points := [ 40 , 15 , 5 ] ;
38180: LD_ADDR_VAR 0 9
38184: PUSH
38185: LD_INT 40
38187: PUSH
38188: LD_INT 15
38190: PUSH
38191: LD_INT 5
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38199: LD_VAR 0 6
38203: PPUSH
38204: CALL_OW 264
38208: PUSH
38209: LD_INT 3
38211: PUSH
38212: LD_INT 23
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: IN
38219: IFFALSE 38240
// points := [ 7 , 25 , 8 ] ;
38221: LD_ADDR_VAR 0 9
38225: PUSH
38226: LD_INT 7
38228: PUSH
38229: LD_INT 25
38231: PUSH
38232: LD_INT 8
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38240: LD_VAR 0 6
38244: PPUSH
38245: CALL_OW 264
38249: PUSH
38250: LD_INT 5
38252: PUSH
38253: LD_INT 27
38255: PUSH
38256: LD_INT 44
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: IN
38264: IFFALSE 38285
// points := [ 14 , 50 , 16 ] ;
38266: LD_ADDR_VAR 0 9
38270: PUSH
38271: LD_INT 14
38273: PUSH
38274: LD_INT 50
38276: PUSH
38277: LD_INT 16
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38285: LD_VAR 0 6
38289: PPUSH
38290: CALL_OW 264
38294: PUSH
38295: LD_INT 6
38297: PUSH
38298: LD_INT 46
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: IN
38305: IFFALSE 38326
// points := [ 32 , 120 , 70 ] ;
38307: LD_ADDR_VAR 0 9
38311: PUSH
38312: LD_INT 32
38314: PUSH
38315: LD_INT 120
38317: PUSH
38318: LD_INT 70
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38326: LD_VAR 0 6
38330: PPUSH
38331: CALL_OW 264
38335: PUSH
38336: LD_INT 7
38338: PUSH
38339: LD_INT 28
38341: PUSH
38342: LD_INT 45
38344: PUSH
38345: LD_INT 92
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: IN
38354: IFFALSE 38375
// points := [ 35 , 20 , 45 ] ;
38356: LD_ADDR_VAR 0 9
38360: PUSH
38361: LD_INT 35
38363: PUSH
38364: LD_INT 20
38366: PUSH
38367: LD_INT 45
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38375: LD_VAR 0 6
38379: PPUSH
38380: CALL_OW 264
38384: PUSH
38385: LD_INT 47
38387: PUSH
38388: EMPTY
38389: LIST
38390: IN
38391: IFFALSE 38412
// points := [ 67 , 45 , 75 ] ;
38393: LD_ADDR_VAR 0 9
38397: PUSH
38398: LD_INT 67
38400: PUSH
38401: LD_INT 45
38403: PUSH
38404: LD_INT 75
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: LIST
38411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38412: LD_VAR 0 6
38416: PPUSH
38417: CALL_OW 264
38421: PUSH
38422: LD_INT 26
38424: PUSH
38425: EMPTY
38426: LIST
38427: IN
38428: IFFALSE 38449
// points := [ 120 , 30 , 80 ] ;
38430: LD_ADDR_VAR 0 9
38434: PUSH
38435: LD_INT 120
38437: PUSH
38438: LD_INT 30
38440: PUSH
38441: LD_INT 80
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38449: LD_VAR 0 6
38453: PPUSH
38454: CALL_OW 264
38458: PUSH
38459: LD_INT 22
38461: PUSH
38462: EMPTY
38463: LIST
38464: IN
38465: IFFALSE 38486
// points := [ 40 , 1 , 1 ] ;
38467: LD_ADDR_VAR 0 9
38471: PUSH
38472: LD_INT 40
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38486: LD_VAR 0 6
38490: PPUSH
38491: CALL_OW 264
38495: PUSH
38496: LD_INT 29
38498: PUSH
38499: EMPTY
38500: LIST
38501: IN
38502: IFFALSE 38523
// points := [ 70 , 200 , 400 ] ;
38504: LD_ADDR_VAR 0 9
38508: PUSH
38509: LD_INT 70
38511: PUSH
38512: LD_INT 200
38514: PUSH
38515: LD_INT 400
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38523: LD_VAR 0 6
38527: PPUSH
38528: CALL_OW 264
38532: PUSH
38533: LD_INT 14
38535: PUSH
38536: LD_INT 53
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: IN
38543: IFFALSE 38564
// points := [ 40 , 10 , 20 ] ;
38545: LD_ADDR_VAR 0 9
38549: PUSH
38550: LD_INT 40
38552: PUSH
38553: LD_INT 10
38555: PUSH
38556: LD_INT 20
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38564: LD_VAR 0 6
38568: PPUSH
38569: CALL_OW 264
38573: PUSH
38574: LD_INT 9
38576: PUSH
38577: EMPTY
38578: LIST
38579: IN
38580: IFFALSE 38601
// points := [ 5 , 70 , 20 ] ;
38582: LD_ADDR_VAR 0 9
38586: PUSH
38587: LD_INT 5
38589: PUSH
38590: LD_INT 70
38592: PUSH
38593: LD_INT 20
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38601: LD_VAR 0 6
38605: PPUSH
38606: CALL_OW 264
38610: PUSH
38611: LD_INT 10
38613: PUSH
38614: EMPTY
38615: LIST
38616: IN
38617: IFFALSE 38638
// points := [ 35 , 110 , 70 ] ;
38619: LD_ADDR_VAR 0 9
38623: PUSH
38624: LD_INT 35
38626: PUSH
38627: LD_INT 110
38629: PUSH
38630: LD_INT 70
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38638: LD_VAR 0 6
38642: PPUSH
38643: CALL_OW 265
38647: PUSH
38648: LD_INT 25
38650: EQUAL
38651: IFFALSE 38672
// points := [ 80 , 65 , 100 ] ;
38653: LD_ADDR_VAR 0 9
38657: PUSH
38658: LD_INT 80
38660: PUSH
38661: LD_INT 65
38663: PUSH
38664: LD_INT 100
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38672: LD_VAR 0 6
38676: PPUSH
38677: CALL_OW 263
38681: PUSH
38682: LD_INT 1
38684: EQUAL
38685: IFFALSE 38720
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38687: LD_ADDR_VAR 0 10
38691: PUSH
38692: LD_VAR 0 10
38696: PUSH
38697: LD_VAR 0 6
38701: PPUSH
38702: CALL_OW 311
38706: PPUSH
38707: LD_INT 3
38709: PPUSH
38710: CALL_OW 259
38714: PUSH
38715: LD_INT 4
38717: MUL
38718: MUL
38719: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38720: LD_VAR 0 6
38724: PPUSH
38725: CALL_OW 263
38729: PUSH
38730: LD_INT 2
38732: EQUAL
38733: IFFALSE 38784
// begin j := IsControledBy ( i ) ;
38735: LD_ADDR_VAR 0 7
38739: PUSH
38740: LD_VAR 0 6
38744: PPUSH
38745: CALL_OW 312
38749: ST_TO_ADDR
// if j then
38750: LD_VAR 0 7
38754: IFFALSE 38784
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38756: LD_ADDR_VAR 0 10
38760: PUSH
38761: LD_VAR 0 10
38765: PUSH
38766: LD_VAR 0 7
38770: PPUSH
38771: LD_INT 3
38773: PPUSH
38774: CALL_OW 259
38778: PUSH
38779: LD_INT 3
38781: MUL
38782: MUL
38783: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38784: LD_VAR 0 6
38788: PPUSH
38789: CALL_OW 264
38793: PUSH
38794: LD_INT 5
38796: PUSH
38797: LD_INT 6
38799: PUSH
38800: LD_INT 46
38802: PUSH
38803: LD_INT 44
38805: PUSH
38806: LD_INT 47
38808: PUSH
38809: LD_INT 45
38811: PUSH
38812: LD_INT 28
38814: PUSH
38815: LD_INT 7
38817: PUSH
38818: LD_INT 27
38820: PUSH
38821: LD_INT 29
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: IN
38836: PUSH
38837: LD_VAR 0 1
38841: PPUSH
38842: LD_INT 52
38844: PPUSH
38845: CALL_OW 321
38849: PUSH
38850: LD_INT 2
38852: EQUAL
38853: AND
38854: IFFALSE 38871
// bpoints := bpoints * 1.2 ;
38856: LD_ADDR_VAR 0 10
38860: PUSH
38861: LD_VAR 0 10
38865: PUSH
38866: LD_REAL  1.20000000000000E+0000
38869: MUL
38870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38871: LD_VAR 0 6
38875: PPUSH
38876: CALL_OW 264
38880: PUSH
38881: LD_INT 6
38883: PUSH
38884: LD_INT 46
38886: PUSH
38887: LD_INT 47
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: LIST
38894: IN
38895: IFFALSE 38912
// bpoints := bpoints * 1.2 ;
38897: LD_ADDR_VAR 0 10
38901: PUSH
38902: LD_VAR 0 10
38906: PUSH
38907: LD_REAL  1.20000000000000E+0000
38910: MUL
38911: ST_TO_ADDR
// end ; unit_building :
38912: GO 38926
38914: LD_INT 3
38916: DOUBLE
38917: EQUAL
38918: IFTRUE 38922
38920: GO 38925
38922: POP
// ; end ;
38923: GO 38926
38925: POP
// for j = 1 to 3 do
38926: LD_ADDR_VAR 0 7
38930: PUSH
38931: DOUBLE
38932: LD_INT 1
38934: DEC
38935: ST_TO_ADDR
38936: LD_INT 3
38938: PUSH
38939: FOR_TO
38940: IFFALSE 38993
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38942: LD_ADDR_VAR 0 5
38946: PUSH
38947: LD_VAR 0 5
38951: PPUSH
38952: LD_VAR 0 7
38956: PPUSH
38957: LD_VAR 0 5
38961: PUSH
38962: LD_VAR 0 7
38966: ARRAY
38967: PUSH
38968: LD_VAR 0 9
38972: PUSH
38973: LD_VAR 0 7
38977: ARRAY
38978: PUSH
38979: LD_VAR 0 10
38983: MUL
38984: PLUS
38985: PPUSH
38986: CALL_OW 1
38990: ST_TO_ADDR
38991: GO 38939
38993: POP
38994: POP
// end ;
38995: GO 37474
38997: POP
38998: POP
// result := Replace ( result , 4 , tmp ) ;
38999: LD_ADDR_VAR 0 5
39003: PUSH
39004: LD_VAR 0 5
39008: PPUSH
39009: LD_INT 4
39011: PPUSH
39012: LD_VAR 0 8
39016: PPUSH
39017: CALL_OW 1
39021: ST_TO_ADDR
// end ;
39022: LD_VAR 0 5
39026: RET
// export function DangerAtRange ( unit , range ) ; begin
39027: LD_INT 0
39029: PPUSH
// if not unit then
39030: LD_VAR 0 1
39034: NOT
39035: IFFALSE 39039
// exit ;
39037: GO 39084
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39039: LD_ADDR_VAR 0 3
39043: PUSH
39044: LD_VAR 0 1
39048: PPUSH
39049: CALL_OW 255
39053: PPUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 250
39063: PPUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 251
39073: PPUSH
39074: LD_VAR 0 2
39078: PPUSH
39079: CALL 37326 0 4
39083: ST_TO_ADDR
// end ;
39084: LD_VAR 0 3
39088: RET
// export function DangerInArea ( side , area ) ; begin
39089: LD_INT 0
39091: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39092: LD_ADDR_VAR 0 3
39096: PUSH
39097: LD_VAR 0 2
39101: PPUSH
39102: LD_INT 81
39104: PUSH
39105: LD_VAR 0 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PPUSH
39114: CALL_OW 70
39118: ST_TO_ADDR
// end ;
39119: LD_VAR 0 3
39123: RET
// export function IsExtension ( b ) ; begin
39124: LD_INT 0
39126: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39127: LD_ADDR_VAR 0 2
39131: PUSH
39132: LD_VAR 0 1
39136: PUSH
39137: LD_INT 23
39139: PUSH
39140: LD_INT 20
39142: PUSH
39143: LD_INT 22
39145: PUSH
39146: LD_INT 17
39148: PUSH
39149: LD_INT 24
39151: PUSH
39152: LD_INT 21
39154: PUSH
39155: LD_INT 19
39157: PUSH
39158: LD_INT 16
39160: PUSH
39161: LD_INT 25
39163: PUSH
39164: LD_INT 18
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: IN
39179: ST_TO_ADDR
// end ;
39180: LD_VAR 0 2
39184: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39185: LD_INT 0
39187: PPUSH
39188: PPUSH
39189: PPUSH
// result := [ ] ;
39190: LD_ADDR_VAR 0 4
39194: PUSH
39195: EMPTY
39196: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: LD_VAR 0 2
39206: PPUSH
39207: LD_INT 21
39209: PUSH
39210: LD_INT 3
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PPUSH
39217: CALL_OW 70
39221: ST_TO_ADDR
// if not tmp then
39222: LD_VAR 0 5
39226: NOT
39227: IFFALSE 39231
// exit ;
39229: GO 39295
// if checkLink then
39231: LD_VAR 0 3
39235: IFFALSE 39285
// begin for i in tmp do
39237: LD_ADDR_VAR 0 6
39241: PUSH
39242: LD_VAR 0 5
39246: PUSH
39247: FOR_IN
39248: IFFALSE 39283
// if GetBase ( i ) <> base then
39250: LD_VAR 0 6
39254: PPUSH
39255: CALL_OW 274
39259: PUSH
39260: LD_VAR 0 1
39264: NONEQUAL
39265: IFFALSE 39281
// ComLinkToBase ( base , i ) ;
39267: LD_VAR 0 1
39271: PPUSH
39272: LD_VAR 0 6
39276: PPUSH
39277: CALL_OW 169
39281: GO 39247
39283: POP
39284: POP
// end ; result := tmp ;
39285: LD_ADDR_VAR 0 4
39289: PUSH
39290: LD_VAR 0 5
39294: ST_TO_ADDR
// end ;
39295: LD_VAR 0 4
39299: RET
// export function ComComplete ( units , b ) ; var i ; begin
39300: LD_INT 0
39302: PPUSH
39303: PPUSH
// if not units then
39304: LD_VAR 0 1
39308: NOT
39309: IFFALSE 39313
// exit ;
39311: GO 39403
// for i in units do
39313: LD_ADDR_VAR 0 4
39317: PUSH
39318: LD_VAR 0 1
39322: PUSH
39323: FOR_IN
39324: IFFALSE 39401
// if BuildingStatus ( b ) = bs_build then
39326: LD_VAR 0 2
39330: PPUSH
39331: CALL_OW 461
39335: PUSH
39336: LD_INT 1
39338: EQUAL
39339: IFFALSE 39399
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39341: LD_VAR 0 4
39345: PPUSH
39346: LD_STRING h
39348: PUSH
39349: LD_VAR 0 2
39353: PPUSH
39354: CALL_OW 250
39358: PUSH
39359: LD_VAR 0 2
39363: PPUSH
39364: CALL_OW 251
39368: PUSH
39369: LD_VAR 0 2
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: PUSH
39392: EMPTY
39393: LIST
39394: PPUSH
39395: CALL_OW 446
39399: GO 39323
39401: POP
39402: POP
// end ;
39403: LD_VAR 0 3
39407: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39408: LD_INT 0
39410: PPUSH
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
39415: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39416: LD_VAR 0 1
39420: NOT
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 263
39431: PUSH
39432: LD_INT 2
39434: NONEQUAL
39435: OR
39436: IFFALSE 39440
// exit ;
39438: GO 39756
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39440: LD_ADDR_VAR 0 6
39444: PUSH
39445: LD_INT 22
39447: PUSH
39448: LD_VAR 0 1
39452: PPUSH
39453: CALL_OW 255
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 30
39467: PUSH
39468: LD_INT 36
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 34
39477: PUSH
39478: LD_INT 31
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PPUSH
39494: CALL_OW 69
39498: ST_TO_ADDR
// if not tmp then
39499: LD_VAR 0 6
39503: NOT
39504: IFFALSE 39508
// exit ;
39506: GO 39756
// result := [ ] ;
39508: LD_ADDR_VAR 0 2
39512: PUSH
39513: EMPTY
39514: ST_TO_ADDR
// for i in tmp do
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_VAR 0 6
39524: PUSH
39525: FOR_IN
39526: IFFALSE 39597
// begin t := UnitsInside ( i ) ;
39528: LD_ADDR_VAR 0 4
39532: PUSH
39533: LD_VAR 0 3
39537: PPUSH
39538: CALL_OW 313
39542: ST_TO_ADDR
// if t then
39543: LD_VAR 0 4
39547: IFFALSE 39595
// for j in t do
39549: LD_ADDR_VAR 0 7
39553: PUSH
39554: LD_VAR 0 4
39558: PUSH
39559: FOR_IN
39560: IFFALSE 39593
// result := Replace ( result , result + 1 , j ) ;
39562: LD_ADDR_VAR 0 2
39566: PUSH
39567: LD_VAR 0 2
39571: PPUSH
39572: LD_VAR 0 2
39576: PUSH
39577: LD_INT 1
39579: PLUS
39580: PPUSH
39581: LD_VAR 0 7
39585: PPUSH
39586: CALL_OW 1
39590: ST_TO_ADDR
39591: GO 39559
39593: POP
39594: POP
// end ;
39595: GO 39525
39597: POP
39598: POP
// if not result then
39599: LD_VAR 0 2
39603: NOT
39604: IFFALSE 39608
// exit ;
39606: GO 39756
// mech := result [ 1 ] ;
39608: LD_ADDR_VAR 0 5
39612: PUSH
39613: LD_VAR 0 2
39617: PUSH
39618: LD_INT 1
39620: ARRAY
39621: ST_TO_ADDR
// if result > 1 then
39622: LD_VAR 0 2
39626: PUSH
39627: LD_INT 1
39629: GREATER
39630: IFFALSE 39742
// begin for i = 2 to result do
39632: LD_ADDR_VAR 0 3
39636: PUSH
39637: DOUBLE
39638: LD_INT 2
39640: DEC
39641: ST_TO_ADDR
39642: LD_VAR 0 2
39646: PUSH
39647: FOR_TO
39648: IFFALSE 39740
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39650: LD_ADDR_VAR 0 4
39654: PUSH
39655: LD_VAR 0 2
39659: PUSH
39660: LD_VAR 0 3
39664: ARRAY
39665: PPUSH
39666: LD_INT 3
39668: PPUSH
39669: CALL_OW 259
39673: PUSH
39674: LD_VAR 0 2
39678: PUSH
39679: LD_VAR 0 3
39683: ARRAY
39684: PPUSH
39685: CALL_OW 432
39689: MINUS
39690: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39691: LD_VAR 0 4
39695: PUSH
39696: LD_VAR 0 5
39700: PPUSH
39701: LD_INT 3
39703: PPUSH
39704: CALL_OW 259
39708: PUSH
39709: LD_VAR 0 5
39713: PPUSH
39714: CALL_OW 432
39718: MINUS
39719: GREATEREQUAL
39720: IFFALSE 39738
// mech := result [ i ] ;
39722: LD_ADDR_VAR 0 5
39726: PUSH
39727: LD_VAR 0 2
39731: PUSH
39732: LD_VAR 0 3
39736: ARRAY
39737: ST_TO_ADDR
// end ;
39738: GO 39647
39740: POP
39741: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39742: LD_VAR 0 1
39746: PPUSH
39747: LD_VAR 0 5
39751: PPUSH
39752: CALL_OW 135
// end ;
39756: LD_VAR 0 2
39760: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39761: LD_INT 0
39763: PPUSH
39764: PPUSH
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
39769: PPUSH
39770: PPUSH
39771: PPUSH
39772: PPUSH
39773: PPUSH
39774: PPUSH
39775: PPUSH
// result := [ ] ;
39776: LD_ADDR_VAR 0 7
39780: PUSH
39781: EMPTY
39782: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39783: LD_VAR 0 1
39787: PPUSH
39788: CALL_OW 266
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: IN
39803: NOT
39804: IFFALSE 39808
// exit ;
39806: GO 41442
// if name then
39808: LD_VAR 0 3
39812: IFFALSE 39828
// SetBName ( base_dep , name ) ;
39814: LD_VAR 0 1
39818: PPUSH
39819: LD_VAR 0 3
39823: PPUSH
39824: CALL_OW 500
// base := GetBase ( base_dep ) ;
39828: LD_ADDR_VAR 0 15
39832: PUSH
39833: LD_VAR 0 1
39837: PPUSH
39838: CALL_OW 274
39842: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39843: LD_ADDR_VAR 0 16
39847: PUSH
39848: LD_VAR 0 1
39852: PPUSH
39853: CALL_OW 255
39857: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39858: LD_ADDR_VAR 0 17
39862: PUSH
39863: LD_VAR 0 1
39867: PPUSH
39868: CALL_OW 248
39872: ST_TO_ADDR
// if sources then
39873: LD_VAR 0 5
39877: IFFALSE 39924
// for i = 1 to 3 do
39879: LD_ADDR_VAR 0 8
39883: PUSH
39884: DOUBLE
39885: LD_INT 1
39887: DEC
39888: ST_TO_ADDR
39889: LD_INT 3
39891: PUSH
39892: FOR_TO
39893: IFFALSE 39922
// AddResourceType ( base , i , sources [ i ] ) ;
39895: LD_VAR 0 15
39899: PPUSH
39900: LD_VAR 0 8
39904: PPUSH
39905: LD_VAR 0 5
39909: PUSH
39910: LD_VAR 0 8
39914: ARRAY
39915: PPUSH
39916: CALL_OW 276
39920: GO 39892
39922: POP
39923: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39924: LD_ADDR_VAR 0 18
39928: PUSH
39929: LD_VAR 0 15
39933: PPUSH
39934: LD_VAR 0 2
39938: PPUSH
39939: LD_INT 1
39941: PPUSH
39942: CALL 39185 0 3
39946: ST_TO_ADDR
// InitHc ;
39947: CALL_OW 19
// InitUc ;
39951: CALL_OW 18
// uc_side := side ;
39955: LD_ADDR_OWVAR 20
39959: PUSH
39960: LD_VAR 0 16
39964: ST_TO_ADDR
// uc_nation := nation ;
39965: LD_ADDR_OWVAR 21
39969: PUSH
39970: LD_VAR 0 17
39974: ST_TO_ADDR
// if buildings then
39975: LD_VAR 0 18
39979: IFFALSE 41301
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39981: LD_ADDR_VAR 0 19
39985: PUSH
39986: LD_VAR 0 18
39990: PPUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 30
39996: PUSH
39997: LD_INT 29
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 30
40006: PUSH
40007: LD_INT 30
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: LIST
40018: PPUSH
40019: CALL_OW 72
40023: ST_TO_ADDR
// if tmp then
40024: LD_VAR 0 19
40028: IFFALSE 40076
// for i in tmp do
40030: LD_ADDR_VAR 0 8
40034: PUSH
40035: LD_VAR 0 19
40039: PUSH
40040: FOR_IN
40041: IFFALSE 40074
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40043: LD_VAR 0 8
40047: PPUSH
40048: CALL_OW 250
40052: PPUSH
40053: LD_VAR 0 8
40057: PPUSH
40058: CALL_OW 251
40062: PPUSH
40063: LD_VAR 0 16
40067: PPUSH
40068: CALL_OW 441
40072: GO 40040
40074: POP
40075: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40076: LD_VAR 0 18
40080: PPUSH
40081: LD_INT 2
40083: PUSH
40084: LD_INT 30
40086: PUSH
40087: LD_INT 32
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 30
40096: PUSH
40097: LD_INT 33
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: PPUSH
40109: CALL_OW 72
40113: IFFALSE 40201
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40115: LD_ADDR_VAR 0 8
40119: PUSH
40120: LD_VAR 0 18
40124: PPUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 30
40130: PUSH
40131: LD_INT 32
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 30
40140: PUSH
40141: LD_INT 33
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: PPUSH
40153: CALL_OW 72
40157: PUSH
40158: FOR_IN
40159: IFFALSE 40199
// begin if not GetBWeapon ( i ) then
40161: LD_VAR 0 8
40165: PPUSH
40166: CALL_OW 269
40170: NOT
40171: IFFALSE 40197
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40173: LD_VAR 0 8
40177: PPUSH
40178: LD_VAR 0 8
40182: PPUSH
40183: LD_VAR 0 2
40187: PPUSH
40188: CALL 41447 0 2
40192: PPUSH
40193: CALL_OW 431
// end ;
40197: GO 40158
40199: POP
40200: POP
// end ; for i = 1 to personel do
40201: LD_ADDR_VAR 0 8
40205: PUSH
40206: DOUBLE
40207: LD_INT 1
40209: DEC
40210: ST_TO_ADDR
40211: LD_VAR 0 6
40215: PUSH
40216: FOR_TO
40217: IFFALSE 41281
// begin if i > 4 then
40219: LD_VAR 0 8
40223: PUSH
40224: LD_INT 4
40226: GREATER
40227: IFFALSE 40231
// break ;
40229: GO 41281
// case i of 1 :
40231: LD_VAR 0 8
40235: PUSH
40236: LD_INT 1
40238: DOUBLE
40239: EQUAL
40240: IFTRUE 40244
40242: GO 40324
40244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40245: LD_ADDR_VAR 0 12
40249: PUSH
40250: LD_VAR 0 18
40254: PPUSH
40255: LD_INT 22
40257: PUSH
40258: LD_VAR 0 16
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 58
40269: PUSH
40270: EMPTY
40271: LIST
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 30
40278: PUSH
40279: LD_INT 32
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 30
40288: PUSH
40289: LD_INT 4
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 30
40298: PUSH
40299: LD_INT 5
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: LIST
40316: PPUSH
40317: CALL_OW 72
40321: ST_TO_ADDR
40322: GO 40546
40324: LD_INT 2
40326: DOUBLE
40327: EQUAL
40328: IFTRUE 40332
40330: GO 40394
40332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40333: LD_ADDR_VAR 0 12
40337: PUSH
40338: LD_VAR 0 18
40342: PPUSH
40343: LD_INT 22
40345: PUSH
40346: LD_VAR 0 16
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 30
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 30
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PPUSH
40387: CALL_OW 72
40391: ST_TO_ADDR
40392: GO 40546
40394: LD_INT 3
40396: DOUBLE
40397: EQUAL
40398: IFTRUE 40402
40400: GO 40464
40402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40403: LD_ADDR_VAR 0 12
40407: PUSH
40408: LD_VAR 0 18
40412: PPUSH
40413: LD_INT 22
40415: PUSH
40416: LD_VAR 0 16
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: LD_INT 30
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 30
40440: PUSH
40441: LD_INT 3
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: LIST
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PPUSH
40457: CALL_OW 72
40461: ST_TO_ADDR
40462: GO 40546
40464: LD_INT 4
40466: DOUBLE
40467: EQUAL
40468: IFTRUE 40472
40470: GO 40545
40472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40473: LD_ADDR_VAR 0 12
40477: PUSH
40478: LD_VAR 0 18
40482: PPUSH
40483: LD_INT 22
40485: PUSH
40486: LD_VAR 0 16
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 30
40500: PUSH
40501: LD_INT 6
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 30
40510: PUSH
40511: LD_INT 7
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 30
40520: PUSH
40521: LD_INT 8
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PPUSH
40538: CALL_OW 72
40542: ST_TO_ADDR
40543: GO 40546
40545: POP
// if i = 1 then
40546: LD_VAR 0 8
40550: PUSH
40551: LD_INT 1
40553: EQUAL
40554: IFFALSE 40665
// begin tmp := [ ] ;
40556: LD_ADDR_VAR 0 19
40560: PUSH
40561: EMPTY
40562: ST_TO_ADDR
// for j in f do
40563: LD_ADDR_VAR 0 9
40567: PUSH
40568: LD_VAR 0 12
40572: PUSH
40573: FOR_IN
40574: IFFALSE 40647
// if GetBType ( j ) = b_bunker then
40576: LD_VAR 0 9
40580: PPUSH
40581: CALL_OW 266
40585: PUSH
40586: LD_INT 32
40588: EQUAL
40589: IFFALSE 40616
// tmp := Insert ( tmp , 1 , j ) else
40591: LD_ADDR_VAR 0 19
40595: PUSH
40596: LD_VAR 0 19
40600: PPUSH
40601: LD_INT 1
40603: PPUSH
40604: LD_VAR 0 9
40608: PPUSH
40609: CALL_OW 2
40613: ST_TO_ADDR
40614: GO 40645
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40616: LD_ADDR_VAR 0 19
40620: PUSH
40621: LD_VAR 0 19
40625: PPUSH
40626: LD_VAR 0 19
40630: PUSH
40631: LD_INT 1
40633: PLUS
40634: PPUSH
40635: LD_VAR 0 9
40639: PPUSH
40640: CALL_OW 2
40644: ST_TO_ADDR
40645: GO 40573
40647: POP
40648: POP
// if tmp then
40649: LD_VAR 0 19
40653: IFFALSE 40665
// f := tmp ;
40655: LD_ADDR_VAR 0 12
40659: PUSH
40660: LD_VAR 0 19
40664: ST_TO_ADDR
// end ; x := personel [ i ] ;
40665: LD_ADDR_VAR 0 13
40669: PUSH
40670: LD_VAR 0 6
40674: PUSH
40675: LD_VAR 0 8
40679: ARRAY
40680: ST_TO_ADDR
// if x = - 1 then
40681: LD_VAR 0 13
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: EQUAL
40690: IFFALSE 40899
// begin for j in f do
40692: LD_ADDR_VAR 0 9
40696: PUSH
40697: LD_VAR 0 12
40701: PUSH
40702: FOR_IN
40703: IFFALSE 40895
// repeat InitHc ;
40705: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40709: LD_VAR 0 9
40713: PPUSH
40714: CALL_OW 266
40718: PUSH
40719: LD_INT 5
40721: EQUAL
40722: IFFALSE 40792
// begin if UnitsInside ( j ) < 3 then
40724: LD_VAR 0 9
40728: PPUSH
40729: CALL_OW 313
40733: PUSH
40734: LD_INT 3
40736: LESS
40737: IFFALSE 40773
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40739: LD_INT 0
40741: PPUSH
40742: LD_INT 5
40744: PUSH
40745: LD_INT 8
40747: PUSH
40748: LD_INT 9
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: PUSH
40756: LD_VAR 0 17
40760: ARRAY
40761: PPUSH
40762: LD_VAR 0 4
40766: PPUSH
40767: CALL_OW 380
40771: GO 40790
// PrepareHuman ( false , i , skill ) ;
40773: LD_INT 0
40775: PPUSH
40776: LD_VAR 0 8
40780: PPUSH
40781: LD_VAR 0 4
40785: PPUSH
40786: CALL_OW 380
// end else
40790: GO 40809
// PrepareHuman ( false , i , skill ) ;
40792: LD_INT 0
40794: PPUSH
40795: LD_VAR 0 8
40799: PPUSH
40800: LD_VAR 0 4
40804: PPUSH
40805: CALL_OW 380
// un := CreateHuman ;
40809: LD_ADDR_VAR 0 14
40813: PUSH
40814: CALL_OW 44
40818: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40819: LD_ADDR_VAR 0 7
40823: PUSH
40824: LD_VAR 0 7
40828: PPUSH
40829: LD_INT 1
40831: PPUSH
40832: LD_VAR 0 14
40836: PPUSH
40837: CALL_OW 2
40841: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40842: LD_VAR 0 14
40846: PPUSH
40847: LD_VAR 0 9
40851: PPUSH
40852: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40856: LD_VAR 0 9
40860: PPUSH
40861: CALL_OW 313
40865: PUSH
40866: LD_INT 6
40868: EQUAL
40869: PUSH
40870: LD_VAR 0 9
40874: PPUSH
40875: CALL_OW 266
40879: PUSH
40880: LD_INT 32
40882: PUSH
40883: LD_INT 31
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: IN
40890: OR
40891: IFFALSE 40705
40893: GO 40702
40895: POP
40896: POP
// end else
40897: GO 41279
// for j = 1 to x do
40899: LD_ADDR_VAR 0 9
40903: PUSH
40904: DOUBLE
40905: LD_INT 1
40907: DEC
40908: ST_TO_ADDR
40909: LD_VAR 0 13
40913: PUSH
40914: FOR_TO
40915: IFFALSE 41277
// begin InitHc ;
40917: CALL_OW 19
// if not f then
40921: LD_VAR 0 12
40925: NOT
40926: IFFALSE 41015
// begin PrepareHuman ( false , i , skill ) ;
40928: LD_INT 0
40930: PPUSH
40931: LD_VAR 0 8
40935: PPUSH
40936: LD_VAR 0 4
40940: PPUSH
40941: CALL_OW 380
// un := CreateHuman ;
40945: LD_ADDR_VAR 0 14
40949: PUSH
40950: CALL_OW 44
40954: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40955: LD_ADDR_VAR 0 7
40959: PUSH
40960: LD_VAR 0 7
40964: PPUSH
40965: LD_INT 1
40967: PPUSH
40968: LD_VAR 0 14
40972: PPUSH
40973: CALL_OW 2
40977: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40978: LD_VAR 0 14
40982: PPUSH
40983: LD_VAR 0 1
40987: PPUSH
40988: CALL_OW 250
40992: PPUSH
40993: LD_VAR 0 1
40997: PPUSH
40998: CALL_OW 251
41002: PPUSH
41003: LD_INT 10
41005: PPUSH
41006: LD_INT 0
41008: PPUSH
41009: CALL_OW 50
// continue ;
41013: GO 40914
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41015: LD_VAR 0 12
41019: PUSH
41020: LD_INT 1
41022: ARRAY
41023: PPUSH
41024: CALL_OW 313
41028: PUSH
41029: LD_VAR 0 12
41033: PUSH
41034: LD_INT 1
41036: ARRAY
41037: PPUSH
41038: CALL_OW 266
41042: PUSH
41043: LD_INT 32
41045: PUSH
41046: LD_INT 31
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: IN
41053: AND
41054: PUSH
41055: LD_VAR 0 12
41059: PUSH
41060: LD_INT 1
41062: ARRAY
41063: PPUSH
41064: CALL_OW 313
41068: PUSH
41069: LD_INT 6
41071: EQUAL
41072: OR
41073: IFFALSE 41093
// f := Delete ( f , 1 ) ;
41075: LD_ADDR_VAR 0 12
41079: PUSH
41080: LD_VAR 0 12
41084: PPUSH
41085: LD_INT 1
41087: PPUSH
41088: CALL_OW 3
41092: ST_TO_ADDR
// if not f then
41093: LD_VAR 0 12
41097: NOT
41098: IFFALSE 41116
// begin x := x + 2 ;
41100: LD_ADDR_VAR 0 13
41104: PUSH
41105: LD_VAR 0 13
41109: PUSH
41110: LD_INT 2
41112: PLUS
41113: ST_TO_ADDR
// continue ;
41114: GO 40914
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41116: LD_VAR 0 12
41120: PUSH
41121: LD_INT 1
41123: ARRAY
41124: PPUSH
41125: CALL_OW 266
41129: PUSH
41130: LD_INT 5
41132: EQUAL
41133: IFFALSE 41207
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41135: LD_VAR 0 12
41139: PUSH
41140: LD_INT 1
41142: ARRAY
41143: PPUSH
41144: CALL_OW 313
41148: PUSH
41149: LD_INT 3
41151: LESS
41152: IFFALSE 41188
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41154: LD_INT 0
41156: PPUSH
41157: LD_INT 5
41159: PUSH
41160: LD_INT 8
41162: PUSH
41163: LD_INT 9
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: PUSH
41171: LD_VAR 0 17
41175: ARRAY
41176: PPUSH
41177: LD_VAR 0 4
41181: PPUSH
41182: CALL_OW 380
41186: GO 41205
// PrepareHuman ( false , i , skill ) ;
41188: LD_INT 0
41190: PPUSH
41191: LD_VAR 0 8
41195: PPUSH
41196: LD_VAR 0 4
41200: PPUSH
41201: CALL_OW 380
// end else
41205: GO 41224
// PrepareHuman ( false , i , skill ) ;
41207: LD_INT 0
41209: PPUSH
41210: LD_VAR 0 8
41214: PPUSH
41215: LD_VAR 0 4
41219: PPUSH
41220: CALL_OW 380
// un := CreateHuman ;
41224: LD_ADDR_VAR 0 14
41228: PUSH
41229: CALL_OW 44
41233: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41234: LD_ADDR_VAR 0 7
41238: PUSH
41239: LD_VAR 0 7
41243: PPUSH
41244: LD_INT 1
41246: PPUSH
41247: LD_VAR 0 14
41251: PPUSH
41252: CALL_OW 2
41256: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41257: LD_VAR 0 14
41261: PPUSH
41262: LD_VAR 0 12
41266: PUSH
41267: LD_INT 1
41269: ARRAY
41270: PPUSH
41271: CALL_OW 52
// end ;
41275: GO 40914
41277: POP
41278: POP
// end ;
41279: GO 40216
41281: POP
41282: POP
// result := result ^ buildings ;
41283: LD_ADDR_VAR 0 7
41287: PUSH
41288: LD_VAR 0 7
41292: PUSH
41293: LD_VAR 0 18
41297: ADD
41298: ST_TO_ADDR
// end else
41299: GO 41442
// begin for i = 1 to personel do
41301: LD_ADDR_VAR 0 8
41305: PUSH
41306: DOUBLE
41307: LD_INT 1
41309: DEC
41310: ST_TO_ADDR
41311: LD_VAR 0 6
41315: PUSH
41316: FOR_TO
41317: IFFALSE 41440
// begin if i > 4 then
41319: LD_VAR 0 8
41323: PUSH
41324: LD_INT 4
41326: GREATER
41327: IFFALSE 41331
// break ;
41329: GO 41440
// x := personel [ i ] ;
41331: LD_ADDR_VAR 0 13
41335: PUSH
41336: LD_VAR 0 6
41340: PUSH
41341: LD_VAR 0 8
41345: ARRAY
41346: ST_TO_ADDR
// if x = - 1 then
41347: LD_VAR 0 13
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: EQUAL
41356: IFFALSE 41360
// continue ;
41358: GO 41316
// PrepareHuman ( false , i , skill ) ;
41360: LD_INT 0
41362: PPUSH
41363: LD_VAR 0 8
41367: PPUSH
41368: LD_VAR 0 4
41372: PPUSH
41373: CALL_OW 380
// un := CreateHuman ;
41377: LD_ADDR_VAR 0 14
41381: PUSH
41382: CALL_OW 44
41386: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41387: LD_VAR 0 14
41391: PPUSH
41392: LD_VAR 0 1
41396: PPUSH
41397: CALL_OW 250
41401: PPUSH
41402: LD_VAR 0 1
41406: PPUSH
41407: CALL_OW 251
41411: PPUSH
41412: LD_INT 10
41414: PPUSH
41415: LD_INT 0
41417: PPUSH
41418: CALL_OW 50
// result := result ^ un ;
41422: LD_ADDR_VAR 0 7
41426: PUSH
41427: LD_VAR 0 7
41431: PUSH
41432: LD_VAR 0 14
41436: ADD
41437: ST_TO_ADDR
// end ;
41438: GO 41316
41440: POP
41441: POP
// end ; end ;
41442: LD_VAR 0 7
41446: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41447: LD_INT 0
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
// result := false ;
41465: LD_ADDR_VAR 0 3
41469: PUSH
41470: LD_INT 0
41472: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41473: LD_VAR 0 1
41477: NOT
41478: PUSH
41479: LD_VAR 0 1
41483: PPUSH
41484: CALL_OW 266
41488: PUSH
41489: LD_INT 32
41491: PUSH
41492: LD_INT 33
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: IN
41499: NOT
41500: OR
41501: IFFALSE 41505
// exit ;
41503: GO 42614
// nat := GetNation ( tower ) ;
41505: LD_ADDR_VAR 0 12
41509: PUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: CALL_OW 248
41519: ST_TO_ADDR
// side := GetSide ( tower ) ;
41520: LD_ADDR_VAR 0 16
41524: PUSH
41525: LD_VAR 0 1
41529: PPUSH
41530: CALL_OW 255
41534: ST_TO_ADDR
// x := GetX ( tower ) ;
41535: LD_ADDR_VAR 0 10
41539: PUSH
41540: LD_VAR 0 1
41544: PPUSH
41545: CALL_OW 250
41549: ST_TO_ADDR
// y := GetY ( tower ) ;
41550: LD_ADDR_VAR 0 11
41554: PUSH
41555: LD_VAR 0 1
41559: PPUSH
41560: CALL_OW 251
41564: ST_TO_ADDR
// if not x or not y then
41565: LD_VAR 0 10
41569: NOT
41570: PUSH
41571: LD_VAR 0 11
41575: NOT
41576: OR
41577: IFFALSE 41581
// exit ;
41579: GO 42614
// weapon := 0 ;
41581: LD_ADDR_VAR 0 18
41585: PUSH
41586: LD_INT 0
41588: ST_TO_ADDR
// fac_list := [ ] ;
41589: LD_ADDR_VAR 0 17
41593: PUSH
41594: EMPTY
41595: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41596: LD_ADDR_VAR 0 6
41600: PUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 274
41610: PPUSH
41611: LD_VAR 0 2
41615: PPUSH
41616: LD_INT 0
41618: PPUSH
41619: CALL 39185 0 3
41623: PPUSH
41624: LD_INT 30
41626: PUSH
41627: LD_INT 3
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PPUSH
41634: CALL_OW 72
41638: ST_TO_ADDR
// if not factories then
41639: LD_VAR 0 6
41643: NOT
41644: IFFALSE 41648
// exit ;
41646: GO 42614
// for i in factories do
41648: LD_ADDR_VAR 0 8
41652: PUSH
41653: LD_VAR 0 6
41657: PUSH
41658: FOR_IN
41659: IFFALSE 41684
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41661: LD_ADDR_VAR 0 17
41665: PUSH
41666: LD_VAR 0 17
41670: PUSH
41671: LD_VAR 0 8
41675: PPUSH
41676: CALL_OW 478
41680: UNION
41681: ST_TO_ADDR
41682: GO 41658
41684: POP
41685: POP
// if not fac_list then
41686: LD_VAR 0 17
41690: NOT
41691: IFFALSE 41695
// exit ;
41693: GO 42614
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41695: LD_ADDR_VAR 0 5
41699: PUSH
41700: LD_INT 4
41702: PUSH
41703: LD_INT 5
41705: PUSH
41706: LD_INT 9
41708: PUSH
41709: LD_INT 10
41711: PUSH
41712: LD_INT 6
41714: PUSH
41715: LD_INT 7
41717: PUSH
41718: LD_INT 11
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 27
41732: PUSH
41733: LD_INT 28
41735: PUSH
41736: LD_INT 26
41738: PUSH
41739: LD_INT 30
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 43
41750: PUSH
41751: LD_INT 44
41753: PUSH
41754: LD_INT 46
41756: PUSH
41757: LD_INT 45
41759: PUSH
41760: LD_INT 47
41762: PUSH
41763: LD_INT 49
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: PUSH
41779: LD_VAR 0 12
41783: ARRAY
41784: ST_TO_ADDR
// list := list isect fac_list ;
41785: LD_ADDR_VAR 0 5
41789: PUSH
41790: LD_VAR 0 5
41794: PUSH
41795: LD_VAR 0 17
41799: ISECT
41800: ST_TO_ADDR
// if not list then
41801: LD_VAR 0 5
41805: NOT
41806: IFFALSE 41810
// exit ;
41808: GO 42614
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41810: LD_VAR 0 12
41814: PUSH
41815: LD_INT 3
41817: EQUAL
41818: PUSH
41819: LD_INT 49
41821: PUSH
41822: LD_VAR 0 5
41826: IN
41827: AND
41828: PUSH
41829: LD_INT 31
41831: PPUSH
41832: LD_VAR 0 16
41836: PPUSH
41837: CALL_OW 321
41841: PUSH
41842: LD_INT 2
41844: EQUAL
41845: AND
41846: IFFALSE 41906
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41848: LD_INT 22
41850: PUSH
41851: LD_VAR 0 16
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 35
41862: PUSH
41863: LD_INT 49
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 91
41872: PUSH
41873: LD_VAR 0 1
41877: PUSH
41878: LD_INT 10
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: LIST
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: PPUSH
41891: CALL_OW 69
41895: NOT
41896: IFFALSE 41906
// weapon := ru_time_lapser ;
41898: LD_ADDR_VAR 0 18
41902: PUSH
41903: LD_INT 49
41905: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41906: LD_VAR 0 12
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: IN
41921: PUSH
41922: LD_INT 11
41924: PUSH
41925: LD_VAR 0 5
41929: IN
41930: PUSH
41931: LD_INT 30
41933: PUSH
41934: LD_VAR 0 5
41938: IN
41939: OR
41940: AND
41941: PUSH
41942: LD_INT 6
41944: PPUSH
41945: LD_VAR 0 16
41949: PPUSH
41950: CALL_OW 321
41954: PUSH
41955: LD_INT 2
41957: EQUAL
41958: AND
41959: IFFALSE 42124
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41961: LD_INT 22
41963: PUSH
41964: LD_VAR 0 16
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: LD_INT 35
41978: PUSH
41979: LD_INT 11
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 35
41988: PUSH
41989: LD_INT 30
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 91
42003: PUSH
42004: LD_VAR 0 1
42008: PUSH
42009: LD_INT 18
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: PPUSH
42022: CALL_OW 69
42026: NOT
42027: PUSH
42028: LD_INT 22
42030: PUSH
42031: LD_VAR 0 16
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 30
42045: PUSH
42046: LD_INT 32
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 30
42055: PUSH
42056: LD_INT 33
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 91
42070: PUSH
42071: LD_VAR 0 1
42075: PUSH
42076: LD_INT 12
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: PUSH
42089: EMPTY
42090: LIST
42091: PPUSH
42092: CALL_OW 69
42096: PUSH
42097: LD_INT 2
42099: GREATER
42100: AND
42101: IFFALSE 42124
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42103: LD_ADDR_VAR 0 18
42107: PUSH
42108: LD_INT 11
42110: PUSH
42111: LD_INT 30
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_VAR 0 12
42122: ARRAY
42123: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42124: LD_VAR 0 18
42128: NOT
42129: PUSH
42130: LD_INT 40
42132: PPUSH
42133: LD_VAR 0 16
42137: PPUSH
42138: CALL_OW 321
42142: PUSH
42143: LD_INT 2
42145: EQUAL
42146: AND
42147: PUSH
42148: LD_INT 7
42150: PUSH
42151: LD_VAR 0 5
42155: IN
42156: PUSH
42157: LD_INT 28
42159: PUSH
42160: LD_VAR 0 5
42164: IN
42165: OR
42166: PUSH
42167: LD_INT 45
42169: PUSH
42170: LD_VAR 0 5
42174: IN
42175: OR
42176: AND
42177: IFFALSE 42431
// begin hex := GetHexInfo ( x , y ) ;
42179: LD_ADDR_VAR 0 4
42183: PUSH
42184: LD_VAR 0 10
42188: PPUSH
42189: LD_VAR 0 11
42193: PPUSH
42194: CALL_OW 546
42198: ST_TO_ADDR
// if hex [ 1 ] then
42199: LD_VAR 0 4
42203: PUSH
42204: LD_INT 1
42206: ARRAY
42207: IFFALSE 42211
// exit ;
42209: GO 42614
// height := hex [ 2 ] ;
42211: LD_ADDR_VAR 0 15
42215: PUSH
42216: LD_VAR 0 4
42220: PUSH
42221: LD_INT 2
42223: ARRAY
42224: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42225: LD_ADDR_VAR 0 14
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: LD_INT 5
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: ST_TO_ADDR
// for i in tmp do
42248: LD_ADDR_VAR 0 8
42252: PUSH
42253: LD_VAR 0 14
42257: PUSH
42258: FOR_IN
42259: IFFALSE 42429
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42261: LD_ADDR_VAR 0 9
42265: PUSH
42266: LD_VAR 0 10
42270: PPUSH
42271: LD_VAR 0 8
42275: PPUSH
42276: LD_INT 5
42278: PPUSH
42279: CALL_OW 272
42283: PUSH
42284: LD_VAR 0 11
42288: PPUSH
42289: LD_VAR 0 8
42293: PPUSH
42294: LD_INT 5
42296: PPUSH
42297: CALL_OW 273
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42306: LD_VAR 0 9
42310: PUSH
42311: LD_INT 1
42313: ARRAY
42314: PPUSH
42315: LD_VAR 0 9
42319: PUSH
42320: LD_INT 2
42322: ARRAY
42323: PPUSH
42324: CALL_OW 488
42328: IFFALSE 42427
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42330: LD_ADDR_VAR 0 4
42334: PUSH
42335: LD_VAR 0 9
42339: PUSH
42340: LD_INT 1
42342: ARRAY
42343: PPUSH
42344: LD_VAR 0 9
42348: PUSH
42349: LD_INT 2
42351: ARRAY
42352: PPUSH
42353: CALL_OW 546
42357: ST_TO_ADDR
// if hex [ 1 ] then
42358: LD_VAR 0 4
42362: PUSH
42363: LD_INT 1
42365: ARRAY
42366: IFFALSE 42370
// continue ;
42368: GO 42258
// h := hex [ 2 ] ;
42370: LD_ADDR_VAR 0 13
42374: PUSH
42375: LD_VAR 0 4
42379: PUSH
42380: LD_INT 2
42382: ARRAY
42383: ST_TO_ADDR
// if h + 7 < height then
42384: LD_VAR 0 13
42388: PUSH
42389: LD_INT 7
42391: PLUS
42392: PUSH
42393: LD_VAR 0 15
42397: LESS
42398: IFFALSE 42427
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42400: LD_ADDR_VAR 0 18
42404: PUSH
42405: LD_INT 7
42407: PUSH
42408: LD_INT 28
42410: PUSH
42411: LD_INT 45
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: PUSH
42419: LD_VAR 0 12
42423: ARRAY
42424: ST_TO_ADDR
// break ;
42425: GO 42429
// end ; end ; end ;
42427: GO 42258
42429: POP
42430: POP
// end ; if not weapon then
42431: LD_VAR 0 18
42435: NOT
42436: IFFALSE 42496
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42438: LD_ADDR_VAR 0 5
42442: PUSH
42443: LD_VAR 0 5
42447: PUSH
42448: LD_INT 11
42450: PUSH
42451: LD_INT 30
42453: PUSH
42454: LD_INT 49
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: DIFF
42462: ST_TO_ADDR
// if not list then
42463: LD_VAR 0 5
42467: NOT
42468: IFFALSE 42472
// exit ;
42470: GO 42614
// weapon := list [ rand ( 1 , list ) ] ;
42472: LD_ADDR_VAR 0 18
42476: PUSH
42477: LD_VAR 0 5
42481: PUSH
42482: LD_INT 1
42484: PPUSH
42485: LD_VAR 0 5
42489: PPUSH
42490: CALL_OW 12
42494: ARRAY
42495: ST_TO_ADDR
// end ; if weapon then
42496: LD_VAR 0 18
42500: IFFALSE 42614
// begin tmp := CostOfWeapon ( weapon ) ;
42502: LD_ADDR_VAR 0 14
42506: PUSH
42507: LD_VAR 0 18
42511: PPUSH
42512: CALL_OW 451
42516: ST_TO_ADDR
// j := GetBase ( tower ) ;
42517: LD_ADDR_VAR 0 9
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: CALL_OW 274
42531: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42532: LD_VAR 0 9
42536: PPUSH
42537: LD_INT 1
42539: PPUSH
42540: CALL_OW 275
42544: PUSH
42545: LD_VAR 0 14
42549: PUSH
42550: LD_INT 1
42552: ARRAY
42553: GREATEREQUAL
42554: PUSH
42555: LD_VAR 0 9
42559: PPUSH
42560: LD_INT 2
42562: PPUSH
42563: CALL_OW 275
42567: PUSH
42568: LD_VAR 0 14
42572: PUSH
42573: LD_INT 2
42575: ARRAY
42576: GREATEREQUAL
42577: AND
42578: PUSH
42579: LD_VAR 0 9
42583: PPUSH
42584: LD_INT 3
42586: PPUSH
42587: CALL_OW 275
42591: PUSH
42592: LD_VAR 0 14
42596: PUSH
42597: LD_INT 3
42599: ARRAY
42600: GREATEREQUAL
42601: AND
42602: IFFALSE 42614
// result := weapon ;
42604: LD_ADDR_VAR 0 3
42608: PUSH
42609: LD_VAR 0 18
42613: ST_TO_ADDR
// end ; end ;
42614: LD_VAR 0 3
42618: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42619: LD_INT 0
42621: PPUSH
42622: PPUSH
// result := true ;
42623: LD_ADDR_VAR 0 3
42627: PUSH
42628: LD_INT 1
42630: ST_TO_ADDR
// if array1 = array2 then
42631: LD_VAR 0 1
42635: PUSH
42636: LD_VAR 0 2
42640: EQUAL
42641: IFFALSE 42701
// begin for i = 1 to array1 do
42643: LD_ADDR_VAR 0 4
42647: PUSH
42648: DOUBLE
42649: LD_INT 1
42651: DEC
42652: ST_TO_ADDR
42653: LD_VAR 0 1
42657: PUSH
42658: FOR_TO
42659: IFFALSE 42697
// if array1 [ i ] <> array2 [ i ] then
42661: LD_VAR 0 1
42665: PUSH
42666: LD_VAR 0 4
42670: ARRAY
42671: PUSH
42672: LD_VAR 0 2
42676: PUSH
42677: LD_VAR 0 4
42681: ARRAY
42682: NONEQUAL
42683: IFFALSE 42695
// begin result := false ;
42685: LD_ADDR_VAR 0 3
42689: PUSH
42690: LD_INT 0
42692: ST_TO_ADDR
// break ;
42693: GO 42697
// end ;
42695: GO 42658
42697: POP
42698: POP
// end else
42699: GO 42709
// result := false ;
42701: LD_ADDR_VAR 0 3
42705: PUSH
42706: LD_INT 0
42708: ST_TO_ADDR
// end ;
42709: LD_VAR 0 3
42713: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42714: LD_INT 0
42716: PPUSH
42717: PPUSH
// if not array1 or not array2 then
42718: LD_VAR 0 1
42722: NOT
42723: PUSH
42724: LD_VAR 0 2
42728: NOT
42729: OR
42730: IFFALSE 42734
// exit ;
42732: GO 42798
// result := true ;
42734: LD_ADDR_VAR 0 3
42738: PUSH
42739: LD_INT 1
42741: ST_TO_ADDR
// for i = 1 to array1 do
42742: LD_ADDR_VAR 0 4
42746: PUSH
42747: DOUBLE
42748: LD_INT 1
42750: DEC
42751: ST_TO_ADDR
42752: LD_VAR 0 1
42756: PUSH
42757: FOR_TO
42758: IFFALSE 42796
// if array1 [ i ] <> array2 [ i ] then
42760: LD_VAR 0 1
42764: PUSH
42765: LD_VAR 0 4
42769: ARRAY
42770: PUSH
42771: LD_VAR 0 2
42775: PUSH
42776: LD_VAR 0 4
42780: ARRAY
42781: NONEQUAL
42782: IFFALSE 42794
// begin result := false ;
42784: LD_ADDR_VAR 0 3
42788: PUSH
42789: LD_INT 0
42791: ST_TO_ADDR
// break ;
42792: GO 42796
// end ;
42794: GO 42757
42796: POP
42797: POP
// end ;
42798: LD_VAR 0 3
42802: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42803: LD_INT 0
42805: PPUSH
42806: PPUSH
42807: PPUSH
// pom := GetBase ( fac ) ;
42808: LD_ADDR_VAR 0 5
42812: PUSH
42813: LD_VAR 0 1
42817: PPUSH
42818: CALL_OW 274
42822: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42823: LD_ADDR_VAR 0 4
42827: PUSH
42828: LD_VAR 0 2
42832: PUSH
42833: LD_INT 1
42835: ARRAY
42836: PPUSH
42837: LD_VAR 0 2
42841: PUSH
42842: LD_INT 2
42844: ARRAY
42845: PPUSH
42846: LD_VAR 0 2
42850: PUSH
42851: LD_INT 3
42853: ARRAY
42854: PPUSH
42855: LD_VAR 0 2
42859: PUSH
42860: LD_INT 4
42862: ARRAY
42863: PPUSH
42864: CALL_OW 449
42868: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42869: LD_ADDR_VAR 0 3
42873: PUSH
42874: LD_VAR 0 5
42878: PPUSH
42879: LD_INT 1
42881: PPUSH
42882: CALL_OW 275
42886: PUSH
42887: LD_VAR 0 4
42891: PUSH
42892: LD_INT 1
42894: ARRAY
42895: GREATEREQUAL
42896: PUSH
42897: LD_VAR 0 5
42901: PPUSH
42902: LD_INT 2
42904: PPUSH
42905: CALL_OW 275
42909: PUSH
42910: LD_VAR 0 4
42914: PUSH
42915: LD_INT 2
42917: ARRAY
42918: GREATEREQUAL
42919: AND
42920: PUSH
42921: LD_VAR 0 5
42925: PPUSH
42926: LD_INT 3
42928: PPUSH
42929: CALL_OW 275
42933: PUSH
42934: LD_VAR 0 4
42938: PUSH
42939: LD_INT 3
42941: ARRAY
42942: GREATEREQUAL
42943: AND
42944: ST_TO_ADDR
// end ;
42945: LD_VAR 0 3
42949: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42950: LD_INT 0
42952: PPUSH
42953: PPUSH
42954: PPUSH
42955: PPUSH
// pom := GetBase ( building ) ;
42956: LD_ADDR_VAR 0 3
42960: PUSH
42961: LD_VAR 0 1
42965: PPUSH
42966: CALL_OW 274
42970: ST_TO_ADDR
// if not pom then
42971: LD_VAR 0 3
42975: NOT
42976: IFFALSE 42980
// exit ;
42978: GO 43150
// btype := GetBType ( building ) ;
42980: LD_ADDR_VAR 0 5
42984: PUSH
42985: LD_VAR 0 1
42989: PPUSH
42990: CALL_OW 266
42994: ST_TO_ADDR
// if btype = b_armoury then
42995: LD_VAR 0 5
42999: PUSH
43000: LD_INT 4
43002: EQUAL
43003: IFFALSE 43013
// btype := b_barracks ;
43005: LD_ADDR_VAR 0 5
43009: PUSH
43010: LD_INT 5
43012: ST_TO_ADDR
// if btype = b_depot then
43013: LD_VAR 0 5
43017: PUSH
43018: LD_INT 0
43020: EQUAL
43021: IFFALSE 43031
// btype := b_warehouse ;
43023: LD_ADDR_VAR 0 5
43027: PUSH
43028: LD_INT 1
43030: ST_TO_ADDR
// if btype = b_workshop then
43031: LD_VAR 0 5
43035: PUSH
43036: LD_INT 2
43038: EQUAL
43039: IFFALSE 43049
// btype := b_factory ;
43041: LD_ADDR_VAR 0 5
43045: PUSH
43046: LD_INT 3
43048: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43049: LD_ADDR_VAR 0 4
43053: PUSH
43054: LD_VAR 0 5
43058: PPUSH
43059: LD_VAR 0 1
43063: PPUSH
43064: CALL_OW 248
43068: PPUSH
43069: CALL_OW 450
43073: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43074: LD_ADDR_VAR 0 2
43078: PUSH
43079: LD_VAR 0 3
43083: PPUSH
43084: LD_INT 1
43086: PPUSH
43087: CALL_OW 275
43091: PUSH
43092: LD_VAR 0 4
43096: PUSH
43097: LD_INT 1
43099: ARRAY
43100: GREATEREQUAL
43101: PUSH
43102: LD_VAR 0 3
43106: PPUSH
43107: LD_INT 2
43109: PPUSH
43110: CALL_OW 275
43114: PUSH
43115: LD_VAR 0 4
43119: PUSH
43120: LD_INT 2
43122: ARRAY
43123: GREATEREQUAL
43124: AND
43125: PUSH
43126: LD_VAR 0 3
43130: PPUSH
43131: LD_INT 3
43133: PPUSH
43134: CALL_OW 275
43138: PUSH
43139: LD_VAR 0 4
43143: PUSH
43144: LD_INT 3
43146: ARRAY
43147: GREATEREQUAL
43148: AND
43149: ST_TO_ADDR
// end ;
43150: LD_VAR 0 2
43154: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43155: LD_INT 0
43157: PPUSH
43158: PPUSH
43159: PPUSH
// pom := GetBase ( building ) ;
43160: LD_ADDR_VAR 0 4
43164: PUSH
43165: LD_VAR 0 1
43169: PPUSH
43170: CALL_OW 274
43174: ST_TO_ADDR
// if not pom then
43175: LD_VAR 0 4
43179: NOT
43180: IFFALSE 43184
// exit ;
43182: GO 43285
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43184: LD_ADDR_VAR 0 5
43188: PUSH
43189: LD_VAR 0 2
43193: PPUSH
43194: LD_VAR 0 1
43198: PPUSH
43199: CALL_OW 248
43203: PPUSH
43204: CALL_OW 450
43208: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43209: LD_ADDR_VAR 0 3
43213: PUSH
43214: LD_VAR 0 4
43218: PPUSH
43219: LD_INT 1
43221: PPUSH
43222: CALL_OW 275
43226: PUSH
43227: LD_VAR 0 5
43231: PUSH
43232: LD_INT 1
43234: ARRAY
43235: GREATEREQUAL
43236: PUSH
43237: LD_VAR 0 4
43241: PPUSH
43242: LD_INT 2
43244: PPUSH
43245: CALL_OW 275
43249: PUSH
43250: LD_VAR 0 5
43254: PUSH
43255: LD_INT 2
43257: ARRAY
43258: GREATEREQUAL
43259: AND
43260: PUSH
43261: LD_VAR 0 4
43265: PPUSH
43266: LD_INT 3
43268: PPUSH
43269: CALL_OW 275
43273: PUSH
43274: LD_VAR 0 5
43278: PUSH
43279: LD_INT 3
43281: ARRAY
43282: GREATEREQUAL
43283: AND
43284: ST_TO_ADDR
// end ;
43285: LD_VAR 0 3
43289: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43290: LD_INT 0
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
// result := false ;
43303: LD_ADDR_VAR 0 8
43307: PUSH
43308: LD_INT 0
43310: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43311: LD_VAR 0 5
43315: NOT
43316: PUSH
43317: LD_VAR 0 1
43321: NOT
43322: OR
43323: PUSH
43324: LD_VAR 0 2
43328: NOT
43329: OR
43330: PUSH
43331: LD_VAR 0 3
43335: NOT
43336: OR
43337: IFFALSE 43341
// exit ;
43339: GO 44155
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43341: LD_ADDR_VAR 0 14
43345: PUSH
43346: LD_VAR 0 1
43350: PPUSH
43351: LD_VAR 0 2
43355: PPUSH
43356: LD_VAR 0 3
43360: PPUSH
43361: LD_VAR 0 4
43365: PPUSH
43366: LD_VAR 0 5
43370: PUSH
43371: LD_INT 1
43373: ARRAY
43374: PPUSH
43375: CALL_OW 248
43379: PPUSH
43380: LD_INT 0
43382: PPUSH
43383: CALL 45408 0 6
43387: ST_TO_ADDR
// if not hexes then
43388: LD_VAR 0 14
43392: NOT
43393: IFFALSE 43397
// exit ;
43395: GO 44155
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43397: LD_ADDR_VAR 0 17
43401: PUSH
43402: LD_VAR 0 5
43406: PPUSH
43407: LD_INT 22
43409: PUSH
43410: LD_VAR 0 13
43414: PPUSH
43415: CALL_OW 255
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: LD_INT 30
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 30
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PPUSH
43456: CALL_OW 72
43460: ST_TO_ADDR
// for i = 1 to hexes do
43461: LD_ADDR_VAR 0 9
43465: PUSH
43466: DOUBLE
43467: LD_INT 1
43469: DEC
43470: ST_TO_ADDR
43471: LD_VAR 0 14
43475: PUSH
43476: FOR_TO
43477: IFFALSE 44153
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43479: LD_ADDR_VAR 0 13
43483: PUSH
43484: LD_VAR 0 14
43488: PUSH
43489: LD_VAR 0 9
43493: ARRAY
43494: PUSH
43495: LD_INT 1
43497: ARRAY
43498: PPUSH
43499: LD_VAR 0 14
43503: PUSH
43504: LD_VAR 0 9
43508: ARRAY
43509: PUSH
43510: LD_INT 2
43512: ARRAY
43513: PPUSH
43514: CALL_OW 428
43518: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43519: LD_VAR 0 14
43523: PUSH
43524: LD_VAR 0 9
43528: ARRAY
43529: PUSH
43530: LD_INT 1
43532: ARRAY
43533: PPUSH
43534: LD_VAR 0 14
43538: PUSH
43539: LD_VAR 0 9
43543: ARRAY
43544: PUSH
43545: LD_INT 2
43547: ARRAY
43548: PPUSH
43549: CALL_OW 351
43553: PUSH
43554: LD_VAR 0 14
43558: PUSH
43559: LD_VAR 0 9
43563: ARRAY
43564: PUSH
43565: LD_INT 1
43567: ARRAY
43568: PPUSH
43569: LD_VAR 0 14
43573: PUSH
43574: LD_VAR 0 9
43578: ARRAY
43579: PUSH
43580: LD_INT 2
43582: ARRAY
43583: PPUSH
43584: CALL_OW 488
43588: NOT
43589: OR
43590: PUSH
43591: LD_VAR 0 13
43595: PPUSH
43596: CALL_OW 247
43600: PUSH
43601: LD_INT 3
43603: EQUAL
43604: OR
43605: IFFALSE 43611
// exit ;
43607: POP
43608: POP
43609: GO 44155
// if not tmp then
43611: LD_VAR 0 13
43615: NOT
43616: IFFALSE 43620
// continue ;
43618: GO 43476
// result := true ;
43620: LD_ADDR_VAR 0 8
43624: PUSH
43625: LD_INT 1
43627: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43628: LD_VAR 0 6
43632: PUSH
43633: LD_VAR 0 13
43637: PPUSH
43638: CALL_OW 247
43642: PUSH
43643: LD_INT 2
43645: EQUAL
43646: AND
43647: PUSH
43648: LD_VAR 0 13
43652: PPUSH
43653: CALL_OW 263
43657: PUSH
43658: LD_INT 1
43660: EQUAL
43661: AND
43662: IFFALSE 43826
// begin if IsDrivenBy ( tmp ) then
43664: LD_VAR 0 13
43668: PPUSH
43669: CALL_OW 311
43673: IFFALSE 43677
// continue ;
43675: GO 43476
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43677: LD_VAR 0 6
43681: PPUSH
43682: LD_INT 3
43684: PUSH
43685: LD_INT 60
43687: PUSH
43688: EMPTY
43689: LIST
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 3
43697: PUSH
43698: LD_INT 55
43700: PUSH
43701: EMPTY
43702: LIST
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PPUSH
43712: CALL_OW 72
43716: IFFALSE 43824
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43718: LD_ADDR_VAR 0 18
43722: PUSH
43723: LD_VAR 0 6
43727: PPUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 60
43733: PUSH
43734: EMPTY
43735: LIST
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: LD_INT 55
43746: PUSH
43747: EMPTY
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PPUSH
43758: CALL_OW 72
43762: PUSH
43763: LD_INT 1
43765: ARRAY
43766: ST_TO_ADDR
// if IsInUnit ( driver ) then
43767: LD_VAR 0 18
43771: PPUSH
43772: CALL_OW 310
43776: IFFALSE 43787
// ComExit ( driver ) ;
43778: LD_VAR 0 18
43782: PPUSH
43783: CALL 69200 0 1
// AddComEnterUnit ( driver , tmp ) ;
43787: LD_VAR 0 18
43791: PPUSH
43792: LD_VAR 0 13
43796: PPUSH
43797: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43801: LD_VAR 0 18
43805: PPUSH
43806: LD_VAR 0 7
43810: PPUSH
43811: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43815: LD_VAR 0 18
43819: PPUSH
43820: CALL_OW 181
// end ; continue ;
43824: GO 43476
// end ; if not cleaners or not tmp in cleaners then
43826: LD_VAR 0 6
43830: NOT
43831: PUSH
43832: LD_VAR 0 13
43836: PUSH
43837: LD_VAR 0 6
43841: IN
43842: NOT
43843: OR
43844: IFFALSE 44151
// begin if dep then
43846: LD_VAR 0 17
43850: IFFALSE 43986
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43852: LD_ADDR_VAR 0 16
43856: PUSH
43857: LD_VAR 0 17
43861: PUSH
43862: LD_INT 1
43864: ARRAY
43865: PPUSH
43866: CALL_OW 250
43870: PPUSH
43871: LD_VAR 0 17
43875: PUSH
43876: LD_INT 1
43878: ARRAY
43879: PPUSH
43880: CALL_OW 254
43884: PPUSH
43885: LD_INT 5
43887: PPUSH
43888: CALL_OW 272
43892: PUSH
43893: LD_VAR 0 17
43897: PUSH
43898: LD_INT 1
43900: ARRAY
43901: PPUSH
43902: CALL_OW 251
43906: PPUSH
43907: LD_VAR 0 17
43911: PUSH
43912: LD_INT 1
43914: ARRAY
43915: PPUSH
43916: CALL_OW 254
43920: PPUSH
43921: LD_INT 5
43923: PPUSH
43924: CALL_OW 273
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43933: LD_VAR 0 16
43937: PUSH
43938: LD_INT 1
43940: ARRAY
43941: PPUSH
43942: LD_VAR 0 16
43946: PUSH
43947: LD_INT 2
43949: ARRAY
43950: PPUSH
43951: CALL_OW 488
43955: IFFALSE 43986
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43957: LD_VAR 0 13
43961: PPUSH
43962: LD_VAR 0 16
43966: PUSH
43967: LD_INT 1
43969: ARRAY
43970: PPUSH
43971: LD_VAR 0 16
43975: PUSH
43976: LD_INT 2
43978: ARRAY
43979: PPUSH
43980: CALL_OW 111
// continue ;
43984: GO 43476
// end ; end ; r := GetDir ( tmp ) ;
43986: LD_ADDR_VAR 0 15
43990: PUSH
43991: LD_VAR 0 13
43995: PPUSH
43996: CALL_OW 254
44000: ST_TO_ADDR
// if r = 5 then
44001: LD_VAR 0 15
44005: PUSH
44006: LD_INT 5
44008: EQUAL
44009: IFFALSE 44019
// r := 0 ;
44011: LD_ADDR_VAR 0 15
44015: PUSH
44016: LD_INT 0
44018: ST_TO_ADDR
// for j = r to 5 do
44019: LD_ADDR_VAR 0 10
44023: PUSH
44024: DOUBLE
44025: LD_VAR 0 15
44029: DEC
44030: ST_TO_ADDR
44031: LD_INT 5
44033: PUSH
44034: FOR_TO
44035: IFFALSE 44149
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44037: LD_ADDR_VAR 0 11
44041: PUSH
44042: LD_VAR 0 13
44046: PPUSH
44047: CALL_OW 250
44051: PPUSH
44052: LD_VAR 0 10
44056: PPUSH
44057: LD_INT 2
44059: PPUSH
44060: CALL_OW 272
44064: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44065: LD_ADDR_VAR 0 12
44069: PUSH
44070: LD_VAR 0 13
44074: PPUSH
44075: CALL_OW 251
44079: PPUSH
44080: LD_VAR 0 10
44084: PPUSH
44085: LD_INT 2
44087: PPUSH
44088: CALL_OW 273
44092: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44093: LD_VAR 0 11
44097: PPUSH
44098: LD_VAR 0 12
44102: PPUSH
44103: CALL_OW 488
44107: PUSH
44108: LD_VAR 0 11
44112: PPUSH
44113: LD_VAR 0 12
44117: PPUSH
44118: CALL_OW 428
44122: NOT
44123: AND
44124: IFFALSE 44147
// begin ComMoveXY ( tmp , _x , _y ) ;
44126: LD_VAR 0 13
44130: PPUSH
44131: LD_VAR 0 11
44135: PPUSH
44136: LD_VAR 0 12
44140: PPUSH
44141: CALL_OW 111
// break ;
44145: GO 44149
// end ; end ;
44147: GO 44034
44149: POP
44150: POP
// end ; end ;
44151: GO 43476
44153: POP
44154: POP
// end ;
44155: LD_VAR 0 8
44159: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44160: LD_INT 0
44162: PPUSH
// result := true ;
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_INT 1
44170: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44171: LD_VAR 0 2
44175: PUSH
44176: LD_INT 24
44178: DOUBLE
44179: EQUAL
44180: IFTRUE 44190
44182: LD_INT 33
44184: DOUBLE
44185: EQUAL
44186: IFTRUE 44190
44188: GO 44215
44190: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44191: LD_ADDR_VAR 0 3
44195: PUSH
44196: LD_INT 32
44198: PPUSH
44199: LD_VAR 0 1
44203: PPUSH
44204: CALL_OW 321
44208: PUSH
44209: LD_INT 2
44211: EQUAL
44212: ST_TO_ADDR
44213: GO 44531
44215: LD_INT 20
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44223
44221: GO 44248
44223: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_INT 6
44231: PPUSH
44232: LD_VAR 0 1
44236: PPUSH
44237: CALL_OW 321
44241: PUSH
44242: LD_INT 2
44244: EQUAL
44245: ST_TO_ADDR
44246: GO 44531
44248: LD_INT 22
44250: DOUBLE
44251: EQUAL
44252: IFTRUE 44262
44254: LD_INT 36
44256: DOUBLE
44257: EQUAL
44258: IFTRUE 44262
44260: GO 44287
44262: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44263: LD_ADDR_VAR 0 3
44267: PUSH
44268: LD_INT 15
44270: PPUSH
44271: LD_VAR 0 1
44275: PPUSH
44276: CALL_OW 321
44280: PUSH
44281: LD_INT 2
44283: EQUAL
44284: ST_TO_ADDR
44285: GO 44531
44287: LD_INT 30
44289: DOUBLE
44290: EQUAL
44291: IFTRUE 44295
44293: GO 44320
44295: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44296: LD_ADDR_VAR 0 3
44300: PUSH
44301: LD_INT 20
44303: PPUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL_OW 321
44313: PUSH
44314: LD_INT 2
44316: EQUAL
44317: ST_TO_ADDR
44318: GO 44531
44320: LD_INT 28
44322: DOUBLE
44323: EQUAL
44324: IFTRUE 44334
44326: LD_INT 21
44328: DOUBLE
44329: EQUAL
44330: IFTRUE 44334
44332: GO 44359
44334: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44335: LD_ADDR_VAR 0 3
44339: PUSH
44340: LD_INT 21
44342: PPUSH
44343: LD_VAR 0 1
44347: PPUSH
44348: CALL_OW 321
44352: PUSH
44353: LD_INT 2
44355: EQUAL
44356: ST_TO_ADDR
44357: GO 44531
44359: LD_INT 16
44361: DOUBLE
44362: EQUAL
44363: IFTRUE 44367
44365: GO 44392
44367: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44368: LD_ADDR_VAR 0 3
44372: PUSH
44373: LD_INT 84
44375: PPUSH
44376: LD_VAR 0 1
44380: PPUSH
44381: CALL_OW 321
44385: PUSH
44386: LD_INT 2
44388: EQUAL
44389: ST_TO_ADDR
44390: GO 44531
44392: LD_INT 19
44394: DOUBLE
44395: EQUAL
44396: IFTRUE 44406
44398: LD_INT 23
44400: DOUBLE
44401: EQUAL
44402: IFTRUE 44406
44404: GO 44431
44406: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44407: LD_ADDR_VAR 0 3
44411: PUSH
44412: LD_INT 83
44414: PPUSH
44415: LD_VAR 0 1
44419: PPUSH
44420: CALL_OW 321
44424: PUSH
44425: LD_INT 2
44427: EQUAL
44428: ST_TO_ADDR
44429: GO 44531
44431: LD_INT 17
44433: DOUBLE
44434: EQUAL
44435: IFTRUE 44439
44437: GO 44464
44439: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44440: LD_ADDR_VAR 0 3
44444: PUSH
44445: LD_INT 39
44447: PPUSH
44448: LD_VAR 0 1
44452: PPUSH
44453: CALL_OW 321
44457: PUSH
44458: LD_INT 2
44460: EQUAL
44461: ST_TO_ADDR
44462: GO 44531
44464: LD_INT 18
44466: DOUBLE
44467: EQUAL
44468: IFTRUE 44472
44470: GO 44497
44472: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44473: LD_ADDR_VAR 0 3
44477: PUSH
44478: LD_INT 40
44480: PPUSH
44481: LD_VAR 0 1
44485: PPUSH
44486: CALL_OW 321
44490: PUSH
44491: LD_INT 2
44493: EQUAL
44494: ST_TO_ADDR
44495: GO 44531
44497: LD_INT 27
44499: DOUBLE
44500: EQUAL
44501: IFTRUE 44505
44503: GO 44530
44505: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44506: LD_ADDR_VAR 0 3
44510: PUSH
44511: LD_INT 35
44513: PPUSH
44514: LD_VAR 0 1
44518: PPUSH
44519: CALL_OW 321
44523: PUSH
44524: LD_INT 2
44526: EQUAL
44527: ST_TO_ADDR
44528: GO 44531
44530: POP
// end ;
44531: LD_VAR 0 3
44535: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44536: LD_INT 0
44538: PPUSH
44539: PPUSH
44540: PPUSH
44541: PPUSH
44542: PPUSH
44543: PPUSH
44544: PPUSH
44545: PPUSH
44546: PPUSH
44547: PPUSH
44548: PPUSH
// result := false ;
44549: LD_ADDR_VAR 0 6
44553: PUSH
44554: LD_INT 0
44556: ST_TO_ADDR
// if btype = b_depot then
44557: LD_VAR 0 2
44561: PUSH
44562: LD_INT 0
44564: EQUAL
44565: IFFALSE 44577
// begin result := true ;
44567: LD_ADDR_VAR 0 6
44571: PUSH
44572: LD_INT 1
44574: ST_TO_ADDR
// exit ;
44575: GO 45403
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44577: LD_VAR 0 1
44581: NOT
44582: PUSH
44583: LD_VAR 0 1
44587: PPUSH
44588: CALL_OW 266
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: IN
44603: NOT
44604: OR
44605: PUSH
44606: LD_VAR 0 2
44610: NOT
44611: OR
44612: PUSH
44613: LD_VAR 0 5
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: LD_INT 3
44629: PUSH
44630: LD_INT 4
44632: PUSH
44633: LD_INT 5
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: IN
44644: NOT
44645: OR
44646: PUSH
44647: LD_VAR 0 3
44651: PPUSH
44652: LD_VAR 0 4
44656: PPUSH
44657: CALL_OW 488
44661: NOT
44662: OR
44663: IFFALSE 44667
// exit ;
44665: GO 45403
// side := GetSide ( depot ) ;
44667: LD_ADDR_VAR 0 9
44671: PUSH
44672: LD_VAR 0 1
44676: PPUSH
44677: CALL_OW 255
44681: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44682: LD_VAR 0 9
44686: PPUSH
44687: LD_VAR 0 2
44691: PPUSH
44692: CALL 44160 0 2
44696: NOT
44697: IFFALSE 44701
// exit ;
44699: GO 45403
// pom := GetBase ( depot ) ;
44701: LD_ADDR_VAR 0 10
44705: PUSH
44706: LD_VAR 0 1
44710: PPUSH
44711: CALL_OW 274
44715: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44716: LD_ADDR_VAR 0 11
44720: PUSH
44721: LD_VAR 0 2
44725: PPUSH
44726: LD_VAR 0 1
44730: PPUSH
44731: CALL_OW 248
44735: PPUSH
44736: CALL_OW 450
44740: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44741: LD_VAR 0 10
44745: PPUSH
44746: LD_INT 1
44748: PPUSH
44749: CALL_OW 275
44753: PUSH
44754: LD_VAR 0 11
44758: PUSH
44759: LD_INT 1
44761: ARRAY
44762: GREATEREQUAL
44763: PUSH
44764: LD_VAR 0 10
44768: PPUSH
44769: LD_INT 2
44771: PPUSH
44772: CALL_OW 275
44776: PUSH
44777: LD_VAR 0 11
44781: PUSH
44782: LD_INT 2
44784: ARRAY
44785: GREATEREQUAL
44786: AND
44787: PUSH
44788: LD_VAR 0 10
44792: PPUSH
44793: LD_INT 3
44795: PPUSH
44796: CALL_OW 275
44800: PUSH
44801: LD_VAR 0 11
44805: PUSH
44806: LD_INT 3
44808: ARRAY
44809: GREATEREQUAL
44810: AND
44811: NOT
44812: IFFALSE 44816
// exit ;
44814: GO 45403
// if GetBType ( depot ) = b_depot then
44816: LD_VAR 0 1
44820: PPUSH
44821: CALL_OW 266
44825: PUSH
44826: LD_INT 0
44828: EQUAL
44829: IFFALSE 44841
// dist := 28 else
44831: LD_ADDR_VAR 0 14
44835: PUSH
44836: LD_INT 28
44838: ST_TO_ADDR
44839: GO 44849
// dist := 36 ;
44841: LD_ADDR_VAR 0 14
44845: PUSH
44846: LD_INT 36
44848: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44849: LD_VAR 0 1
44853: PPUSH
44854: LD_VAR 0 3
44858: PPUSH
44859: LD_VAR 0 4
44863: PPUSH
44864: CALL_OW 297
44868: PUSH
44869: LD_VAR 0 14
44873: GREATER
44874: IFFALSE 44878
// exit ;
44876: GO 45403
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44878: LD_ADDR_VAR 0 12
44882: PUSH
44883: LD_VAR 0 2
44887: PPUSH
44888: LD_VAR 0 3
44892: PPUSH
44893: LD_VAR 0 4
44897: PPUSH
44898: LD_VAR 0 5
44902: PPUSH
44903: LD_VAR 0 1
44907: PPUSH
44908: CALL_OW 248
44912: PPUSH
44913: LD_INT 0
44915: PPUSH
44916: CALL 45408 0 6
44920: ST_TO_ADDR
// if not hexes then
44921: LD_VAR 0 12
44925: NOT
44926: IFFALSE 44930
// exit ;
44928: GO 45403
// hex := GetHexInfo ( x , y ) ;
44930: LD_ADDR_VAR 0 15
44934: PUSH
44935: LD_VAR 0 3
44939: PPUSH
44940: LD_VAR 0 4
44944: PPUSH
44945: CALL_OW 546
44949: ST_TO_ADDR
// if hex [ 1 ] then
44950: LD_VAR 0 15
44954: PUSH
44955: LD_INT 1
44957: ARRAY
44958: IFFALSE 44962
// exit ;
44960: GO 45403
// height := hex [ 2 ] ;
44962: LD_ADDR_VAR 0 13
44966: PUSH
44967: LD_VAR 0 15
44971: PUSH
44972: LD_INT 2
44974: ARRAY
44975: ST_TO_ADDR
// for i = 1 to hexes do
44976: LD_ADDR_VAR 0 7
44980: PUSH
44981: DOUBLE
44982: LD_INT 1
44984: DEC
44985: ST_TO_ADDR
44986: LD_VAR 0 12
44990: PUSH
44991: FOR_TO
44992: IFFALSE 45322
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44994: LD_VAR 0 12
44998: PUSH
44999: LD_VAR 0 7
45003: ARRAY
45004: PUSH
45005: LD_INT 1
45007: ARRAY
45008: PPUSH
45009: LD_VAR 0 12
45013: PUSH
45014: LD_VAR 0 7
45018: ARRAY
45019: PUSH
45020: LD_INT 2
45022: ARRAY
45023: PPUSH
45024: CALL_OW 488
45028: NOT
45029: PUSH
45030: LD_VAR 0 12
45034: PUSH
45035: LD_VAR 0 7
45039: ARRAY
45040: PUSH
45041: LD_INT 1
45043: ARRAY
45044: PPUSH
45045: LD_VAR 0 12
45049: PUSH
45050: LD_VAR 0 7
45054: ARRAY
45055: PUSH
45056: LD_INT 2
45058: ARRAY
45059: PPUSH
45060: CALL_OW 428
45064: PUSH
45065: LD_INT 0
45067: GREATER
45068: OR
45069: PUSH
45070: LD_VAR 0 12
45074: PUSH
45075: LD_VAR 0 7
45079: ARRAY
45080: PUSH
45081: LD_INT 1
45083: ARRAY
45084: PPUSH
45085: LD_VAR 0 12
45089: PUSH
45090: LD_VAR 0 7
45094: ARRAY
45095: PUSH
45096: LD_INT 2
45098: ARRAY
45099: PPUSH
45100: CALL_OW 351
45104: OR
45105: IFFALSE 45111
// exit ;
45107: POP
45108: POP
45109: GO 45403
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45111: LD_ADDR_VAR 0 8
45115: PUSH
45116: LD_VAR 0 12
45120: PUSH
45121: LD_VAR 0 7
45125: ARRAY
45126: PUSH
45127: LD_INT 1
45129: ARRAY
45130: PPUSH
45131: LD_VAR 0 12
45135: PUSH
45136: LD_VAR 0 7
45140: ARRAY
45141: PUSH
45142: LD_INT 2
45144: ARRAY
45145: PPUSH
45146: CALL_OW 546
45150: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45151: LD_VAR 0 8
45155: PUSH
45156: LD_INT 1
45158: ARRAY
45159: PUSH
45160: LD_VAR 0 8
45164: PUSH
45165: LD_INT 2
45167: ARRAY
45168: PUSH
45169: LD_VAR 0 13
45173: PUSH
45174: LD_INT 2
45176: PLUS
45177: GREATER
45178: OR
45179: PUSH
45180: LD_VAR 0 8
45184: PUSH
45185: LD_INT 2
45187: ARRAY
45188: PUSH
45189: LD_VAR 0 13
45193: PUSH
45194: LD_INT 2
45196: MINUS
45197: LESS
45198: OR
45199: PUSH
45200: LD_VAR 0 8
45204: PUSH
45205: LD_INT 3
45207: ARRAY
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 8
45214: PUSH
45215: LD_INT 9
45217: PUSH
45218: LD_INT 10
45220: PUSH
45221: LD_INT 11
45223: PUSH
45224: LD_INT 12
45226: PUSH
45227: LD_INT 13
45229: PUSH
45230: LD_INT 16
45232: PUSH
45233: LD_INT 17
45235: PUSH
45236: LD_INT 18
45238: PUSH
45239: LD_INT 19
45241: PUSH
45242: LD_INT 20
45244: PUSH
45245: LD_INT 21
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: IN
45263: NOT
45264: OR
45265: PUSH
45266: LD_VAR 0 8
45270: PUSH
45271: LD_INT 5
45273: ARRAY
45274: NOT
45275: OR
45276: PUSH
45277: LD_VAR 0 8
45281: PUSH
45282: LD_INT 6
45284: ARRAY
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: LD_INT 7
45294: PUSH
45295: LD_INT 9
45297: PUSH
45298: LD_INT 10
45300: PUSH
45301: LD_INT 11
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: IN
45312: NOT
45313: OR
45314: IFFALSE 45320
// exit ;
45316: POP
45317: POP
45318: GO 45403
// end ;
45320: GO 44991
45322: POP
45323: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45324: LD_VAR 0 9
45328: PPUSH
45329: LD_VAR 0 3
45333: PPUSH
45334: LD_VAR 0 4
45338: PPUSH
45339: LD_INT 20
45341: PPUSH
45342: CALL 37326 0 4
45346: PUSH
45347: LD_INT 4
45349: ARRAY
45350: IFFALSE 45354
// exit ;
45352: GO 45403
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45354: LD_VAR 0 2
45358: PUSH
45359: LD_INT 29
45361: PUSH
45362: LD_INT 30
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: IN
45369: PUSH
45370: LD_VAR 0 3
45374: PPUSH
45375: LD_VAR 0 4
45379: PPUSH
45380: LD_VAR 0 9
45384: PPUSH
45385: CALL_OW 440
45389: NOT
45390: AND
45391: IFFALSE 45395
// exit ;
45393: GO 45403
// result := true ;
45395: LD_ADDR_VAR 0 6
45399: PUSH
45400: LD_INT 1
45402: ST_TO_ADDR
// end ;
45403: LD_VAR 0 6
45407: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45408: LD_INT 0
45410: PPUSH
45411: PPUSH
45412: PPUSH
45413: PPUSH
45414: PPUSH
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
45426: PPUSH
45427: PPUSH
45428: PPUSH
45429: PPUSH
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
45434: PPUSH
45435: PPUSH
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
45447: PPUSH
45448: PPUSH
45449: PPUSH
45450: PPUSH
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
45455: PPUSH
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
// result = [ ] ;
45468: LD_ADDR_VAR 0 7
45472: PUSH
45473: EMPTY
45474: ST_TO_ADDR
// temp_list = [ ] ;
45475: LD_ADDR_VAR 0 9
45479: PUSH
45480: EMPTY
45481: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45482: LD_VAR 0 4
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 3
45498: PUSH
45499: LD_INT 4
45501: PUSH
45502: LD_INT 5
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: IN
45513: NOT
45514: PUSH
45515: LD_VAR 0 1
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: IN
45530: PUSH
45531: LD_VAR 0 5
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: IN
45550: NOT
45551: AND
45552: OR
45553: IFFALSE 45557
// exit ;
45555: GO 63948
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45557: LD_VAR 0 1
45561: PUSH
45562: LD_INT 6
45564: PUSH
45565: LD_INT 7
45567: PUSH
45568: LD_INT 8
45570: PUSH
45571: LD_INT 13
45573: PUSH
45574: LD_INT 12
45576: PUSH
45577: LD_INT 15
45579: PUSH
45580: LD_INT 11
45582: PUSH
45583: LD_INT 14
45585: PUSH
45586: LD_INT 10
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: IN
45600: IFFALSE 45610
// btype = b_lab ;
45602: LD_ADDR_VAR 0 1
45606: PUSH
45607: LD_INT 6
45609: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45610: LD_VAR 0 6
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: IN
45629: NOT
45630: PUSH
45631: LD_VAR 0 1
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: LD_INT 6
45650: PUSH
45651: LD_INT 36
45653: PUSH
45654: LD_INT 4
45656: PUSH
45657: LD_INT 5
45659: PUSH
45660: LD_INT 31
45662: PUSH
45663: LD_INT 32
45665: PUSH
45666: LD_INT 33
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: IN
45682: NOT
45683: PUSH
45684: LD_VAR 0 6
45688: PUSH
45689: LD_INT 1
45691: EQUAL
45692: AND
45693: OR
45694: PUSH
45695: LD_VAR 0 1
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: LD_INT 3
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: IN
45710: NOT
45711: PUSH
45712: LD_VAR 0 6
45716: PUSH
45717: LD_INT 2
45719: EQUAL
45720: AND
45721: OR
45722: IFFALSE 45732
// mode = 0 ;
45724: LD_ADDR_VAR 0 6
45728: PUSH
45729: LD_INT 0
45731: ST_TO_ADDR
// case mode of 0 :
45732: LD_VAR 0 6
45736: PUSH
45737: LD_INT 0
45739: DOUBLE
45740: EQUAL
45741: IFTRUE 45745
45743: GO 57198
45745: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45746: LD_ADDR_VAR 0 11
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45939: LD_ADDR_VAR 0 12
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 3
46096: NEG
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46135: LD_ADDR_VAR 0 13
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: LD_INT 3
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 3
46294: NEG
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 3
46306: NEG
46307: PUSH
46308: LD_INT 3
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46334: LD_ADDR_VAR 0 14
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 3
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 3
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46530: LD_ADDR_VAR 0 15
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46723: LD_ADDR_VAR 0 16
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 2
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46916: LD_ADDR_VAR 0 17
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: NEG
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47146: LD_ADDR_VAR 0 18
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47376: LD_ADDR_VAR 0 19
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47606: LD_ADDR_VAR 0 20
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47836: LD_ADDR_VAR 0 21
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48066: LD_ADDR_VAR 0 22
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48296: LD_ADDR_VAR 0 23
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: LD_INT 3
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 3
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48576: LD_ADDR_VAR 0 24
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 3
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48852: LD_ADDR_VAR 0 25
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 3
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49126: LD_ADDR_VAR 0 26
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 3
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49402: LD_ADDR_VAR 0 27
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 3
49635: NEG
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: LD_INT 2
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49682: LD_ADDR_VAR 0 28
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: LD_INT 3
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 3
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49964: LD_ADDR_VAR 0 29
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50243: LD_ADDR_VAR 0 30
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50521: LD_ADDR_VAR 0 31
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 3
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50799: LD_ADDR_VAR 0 32
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51077: LD_ADDR_VAR 0 33
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51356: LD_ADDR_VAR 0 34
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: LD_INT 3
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 3
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 3
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 3
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51636: LD_ADDR_VAR 0 35
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51748: LD_ADDR_VAR 0 36
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51860: LD_ADDR_VAR 0 37
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51972: LD_ADDR_VAR 0 38
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52084: LD_ADDR_VAR 0 39
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52196: LD_ADDR_VAR 0 40
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52308: LD_ADDR_VAR 0 41
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: LD_INT 3
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 3
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52658: LD_ADDR_VAR 0 42
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 3
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: LD_INT 3
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 3
52955: NEG
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 3
52967: NEG
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53008: LD_ADDR_VAR 0 43
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 3
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 3
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 3
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 3
53304: NEG
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53356: LD_ADDR_VAR 0 44
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 3
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 3
53653: NEG
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53706: LD_ADDR_VAR 0 45
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: LD_INT 3
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 3
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 3
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 3
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54056: LD_ADDR_VAR 0 46
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 3
54352: NEG
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 3
54363: NEG
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54404: LD_ADDR_VAR 0 47
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54555: LD_ADDR_VAR 0 48
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54702: LD_ADDR_VAR 0 49
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54846: LD_ADDR_VAR 0 50
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54990: LD_ADDR_VAR 0 51
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55137: LD_ADDR_VAR 0 52
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55288: LD_ADDR_VAR 0 53
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55518: LD_ADDR_VAR 0 54
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55748: LD_ADDR_VAR 0 55
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55978: LD_ADDR_VAR 0 56
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56208: LD_ADDR_VAR 0 57
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56438: LD_ADDR_VAR 0 58
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56668: LD_ADDR_VAR 0 59
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56756: LD_ADDR_VAR 0 60
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56844: LD_ADDR_VAR 0 61
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56932: LD_ADDR_VAR 0 62
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57020: LD_ADDR_VAR 0 63
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57108: LD_ADDR_VAR 0 64
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: ST_TO_ADDR
// end ; 1 :
57196: GO 63093
57198: LD_INT 1
57200: DOUBLE
57201: EQUAL
57202: IFTRUE 57206
57204: GO 59829
57206: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57207: LD_ADDR_VAR 0 11
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 3
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: LIST
57250: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57251: LD_ADDR_VAR 0 12
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57292: LD_ADDR_VAR 0 13
57296: PUSH
57297: LD_INT 3
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57332: LD_ADDR_VAR 0 14
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57373: LD_ADDR_VAR 0 15
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57417: LD_ADDR_VAR 0 16
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: LD_INT 3
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: LD_INT 3
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: LIST
57462: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57463: LD_ADDR_VAR 0 17
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57507: LD_ADDR_VAR 0 18
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: LIST
57547: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57548: LD_ADDR_VAR 0 19
57552: PUSH
57553: LD_INT 3
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 3
57565: PUSH
57566: LD_INT 3
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57588: LD_ADDR_VAR 0 20
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 3
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57629: LD_ADDR_VAR 0 21
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 3
57658: NEG
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: LIST
57672: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57673: LD_ADDR_VAR 0 22
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57719: LD_ADDR_VAR 0 23
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: LD_INT 4
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 3
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57763: LD_ADDR_VAR 0 24
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 4
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: LIST
57803: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57804: LD_ADDR_VAR 0 25
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 4
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: LIST
57843: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57844: LD_ADDR_VAR 0 26
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 4
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57885: LD_ADDR_VAR 0 27
57889: PUSH
57890: LD_INT 3
57892: NEG
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 3
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 4
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: LIST
57928: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57929: LD_ADDR_VAR 0 28
57933: PUSH
57934: LD_INT 3
57936: NEG
57937: PUSH
57938: LD_INT 3
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: LD_INT 4
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 4
57960: NEG
57961: PUSH
57962: LD_INT 3
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57975: LD_ADDR_VAR 0 29
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 4
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: LD_INT 4
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 5
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 5
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 4
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: LD_INT 6
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 6
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 5
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58130: LD_ADDR_VAR 0 30
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 4
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 5
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 5
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 5
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 6
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 6
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58273: LD_ADDR_VAR 0 31
58277: PUSH
58278: LD_INT 3
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 3
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: LD_INT 3
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 4
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: PUSH
58321: LD_INT 4
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 3
58330: PUSH
58331: LD_INT 4
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 5
58340: PUSH
58341: LD_INT 4
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 5
58350: PUSH
58351: LD_INT 5
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: LD_INT 5
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 6
58370: PUSH
58371: LD_INT 5
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 6
58380: PUSH
58381: LD_INT 6
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 5
58390: PUSH
58391: LD_INT 6
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58412: LD_ADDR_VAR 0 32
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 4
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 4
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: LD_INT 5
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 5
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 4
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 6
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 6
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 5
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58555: LD_ADDR_VAR 0 33
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: NEG
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 4
58607: NEG
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 4
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 5
58641: NEG
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 5
58652: NEG
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 5
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 6
58675: NEG
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 6
58686: NEG
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58710: LD_ADDR_VAR 0 34
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: NEG
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: LD_INT 4
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 4
58765: NEG
58766: PUSH
58767: LD_INT 3
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 4
58777: NEG
58778: PUSH
58779: LD_INT 4
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 4
58789: NEG
58790: PUSH
58791: LD_INT 5
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 5
58801: NEG
58802: PUSH
58803: LD_INT 4
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 5
58813: NEG
58814: PUSH
58815: LD_INT 5
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 5
58825: NEG
58826: PUSH
58827: LD_INT 6
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 6
58837: NEG
58838: PUSH
58839: LD_INT 5
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 6
58849: NEG
58850: PUSH
58851: LD_INT 6
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58873: LD_ADDR_VAR 0 41
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58917: LD_ADDR_VAR 0 42
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 3
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58958: LD_ADDR_VAR 0 43
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: LD_INT 3
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: LIST
58997: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58998: LD_ADDR_VAR 0 44
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59039: LD_ADDR_VAR 0 45
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: LIST
59082: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59083: LD_ADDR_VAR 0 46
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59129: LD_ADDR_VAR 0 47
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: LD_INT 3
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59162: LD_ADDR_VAR 0 48
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59193: LD_ADDR_VAR 0 49
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59222: LD_ADDR_VAR 0 50
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: LD_INT 3
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59251: LD_ADDR_VAR 0 51
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59282: LD_ADDR_VAR 0 52
59286: PUSH
59287: LD_INT 3
59289: NEG
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 3
59301: NEG
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59315: LD_ADDR_VAR 0 53
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 3
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: LIST
59358: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59359: LD_ADDR_VAR 0 54
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 3
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 3
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: LIST
59399: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59400: LD_ADDR_VAR 0 55
59404: PUSH
59405: LD_INT 3
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 3
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59440: LD_ADDR_VAR 0 56
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 3
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59481: LD_ADDR_VAR 0 57
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59525: LD_ADDR_VAR 0 58
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 3
59544: NEG
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59571: LD_ADDR_VAR 0 59
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 2
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: LIST
59614: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59615: LD_ADDR_VAR 0 60
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 2
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59656: LD_ADDR_VAR 0 61
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59696: LD_ADDR_VAR 0 62
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59737: LD_ADDR_VAR 0 63
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: LIST
59780: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59781: LD_ADDR_VAR 0 64
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: ST_TO_ADDR
// end ; 2 :
59827: GO 63093
59829: LD_INT 2
59831: DOUBLE
59832: EQUAL
59833: IFTRUE 59837
59835: GO 63092
59837: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59838: LD_ADDR_VAR 0 29
59842: PUSH
59843: LD_INT 4
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 4
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 5
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 5
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 4
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 3
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 5
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 4
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 4
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 3
59978: PUSH
59979: LD_INT 4
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 4
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: LD_INT 4
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 4
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 5
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: LD_INT 5
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 4
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: LD_INT 3
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 2
60100: PUSH
60101: LD_INT 5
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 4
60177: NEG
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 4
60188: NEG
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 4
60200: NEG
60201: PUSH
60202: LD_INT 2
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 4
60223: NEG
60224: PUSH
60225: LD_INT 4
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 4
60235: NEG
60236: PUSH
60237: LD_INT 5
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: LD_INT 4
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: LD_INT 3
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 4
60271: NEG
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 5
60283: NEG
60284: PUSH
60285: LD_INT 4
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 5
60295: NEG
60296: PUSH
60297: LD_INT 5
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 5
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 5
60319: NEG
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60376: LD_ADDR_VAR 0 30
60380: PUSH
60381: LD_INT 4
60383: PUSH
60384: LD_INT 4
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 4
60393: PUSH
60394: LD_INT 3
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 5
60403: PUSH
60404: LD_INT 4
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 5
60413: PUSH
60414: LD_INT 5
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 4
60423: PUSH
60424: LD_INT 5
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: PUSH
60434: LD_INT 4
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 5
60453: PUSH
60454: LD_INT 3
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 3
60463: PUSH
60464: LD_INT 5
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: LD_INT 3
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: LD_INT 3
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 4
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 4
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: LD_INT 4
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 4
60566: NEG
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: NEG
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 3
60589: NEG
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 3
60600: NEG
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 4
60611: NEG
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 5
60622: NEG
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 5
60633: NEG
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 5
60645: NEG
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 3
60657: NEG
60658: PUSH
60659: LD_INT 2
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: LD_INT 4
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: LD_INT 3
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 3
60716: NEG
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 4
60728: NEG
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: LD_INT 4
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: LD_INT 4
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 4
60764: NEG
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 4
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: LD_INT 5
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: LD_INT 4
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: LD_INT 3
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 4
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 5
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 3
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: LD_INT 5
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60923: LD_ADDR_VAR 0 31
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: LD_INT 4
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: LD_INT 5
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: LD_INT 5
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: LD_INT 4
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 3
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: PUSH
61003: LD_INT 5
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 3
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 3
61023: NEG
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: NEG
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 3
61068: NEG
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 4
61079: NEG
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 4
61090: NEG
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 4
61102: NEG
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 2
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 4
61125: NEG
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: NEG
61138: PUSH
61139: LD_INT 5
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 3
61149: NEG
61150: PUSH
61151: LD_INT 4
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 3
61161: NEG
61162: PUSH
61163: LD_INT 3
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 4
61173: NEG
61174: PUSH
61175: LD_INT 3
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 5
61185: NEG
61186: PUSH
61187: LD_INT 4
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 5
61197: NEG
61198: PUSH
61199: LD_INT 5
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: LD_INT 5
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 5
61221: NEG
61222: PUSH
61223: LD_INT 3
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 4
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: LD_INT 3
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: LD_INT 4
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: LD_INT 2
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: LD_INT 4
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 4
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 4
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 5
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 5
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 4
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 3
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 5
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61473: LD_ADDR_VAR 0 32
61477: PUSH
61478: LD_INT 4
61480: NEG
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 4
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 3
61503: NEG
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 4
61525: NEG
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 5
61536: NEG
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 5
61547: NEG
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 5
61559: NEG
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 3
61571: NEG
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 3
61582: NEG
61583: PUSH
61584: LD_INT 3
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 3
61594: NEG
61595: PUSH
61596: LD_INT 4
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 3
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 4
61642: NEG
61643: PUSH
61644: LD_INT 3
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 4
61654: NEG
61655: PUSH
61656: LD_INT 4
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: LD_INT 4
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 4
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 5
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 4
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 3
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 3
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: NEG
61746: PUSH
61747: LD_INT 4
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: LD_INT 5
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: LD_INT 3
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: LD_INT 5
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 3
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 4
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 4
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 2
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: LD_INT 2
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 4
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 4
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 4
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 5
61905: PUSH
61906: LD_INT 4
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 5
61915: PUSH
61916: LD_INT 5
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: LD_INT 5
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 4
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 5
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: LD_INT 5
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62020: LD_ADDR_VAR 0 33
62024: PUSH
62025: LD_INT 4
62027: NEG
62028: PUSH
62029: LD_INT 4
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 4
62039: NEG
62040: PUSH
62041: LD_INT 5
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 3
62051: NEG
62052: PUSH
62053: LD_INT 4
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 3
62063: NEG
62064: PUSH
62065: LD_INT 3
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 4
62075: NEG
62076: PUSH
62077: LD_INT 3
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 5
62087: NEG
62088: PUSH
62089: LD_INT 4
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 5
62099: NEG
62100: PUSH
62101: LD_INT 5
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 3
62111: NEG
62112: PUSH
62113: LD_INT 5
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 5
62123: NEG
62124: PUSH
62125: LD_INT 3
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 3
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 4
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 2
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 4
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: LD_INT 4
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 4
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 4
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 5
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 5
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 4
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 3
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 5
62320: PUSH
62321: LD_INT 2
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: LD_INT 3
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 3
62340: PUSH
62341: LD_INT 2
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 4
62350: PUSH
62351: LD_INT 3
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 4
62360: PUSH
62361: LD_INT 4
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 3
62370: PUSH
62371: LD_INT 4
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: LD_INT 3
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 4
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: PUSH
62411: LD_INT 4
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 4
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 3
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 4
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 5
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 5
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: LD_INT 3
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 2
62492: PUSH
62493: LD_INT 5
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: LD_INT 3
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62558: LD_ADDR_VAR 0 34
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 4
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: LD_INT 5
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 4
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: LD_INT 3
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 3
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: LD_INT 4
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: LD_INT 5
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: PUSH
62645: LD_INT 3
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 2
62655: NEG
62656: PUSH
62657: LD_INT 5
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 3
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 4
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 4
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 4
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 4
62760: PUSH
62761: LD_INT 4
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 4
62770: PUSH
62771: LD_INT 3
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 5
62780: PUSH
62781: LD_INT 4
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 5
62790: PUSH
62791: LD_INT 5
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 4
62800: PUSH
62801: LD_INT 5
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: LD_INT 4
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 5
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 3
62840: PUSH
62841: LD_INT 5
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_INT 3
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: LD_INT 3
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: LD_INT 4
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 4
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: LD_INT 3
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: LD_INT 2
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 2
62922: PUSH
62923: LD_INT 4
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: LD_INT 2
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 4
62943: NEG
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 4
62954: NEG
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 3
62966: NEG
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 3
62977: NEG
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 4
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 5
62999: NEG
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 5
63010: NEG
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 5
63022: NEG
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: LD_INT 2
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: ST_TO_ADDR
// end ; end ;
63090: GO 63093
63092: POP
// case btype of b_depot , b_warehouse :
63093: LD_VAR 0 1
63097: PUSH
63098: LD_INT 0
63100: DOUBLE
63101: EQUAL
63102: IFTRUE 63112
63104: LD_INT 1
63106: DOUBLE
63107: EQUAL
63108: IFTRUE 63112
63110: GO 63313
63112: POP
// case nation of nation_american :
63113: LD_VAR 0 5
63117: PUSH
63118: LD_INT 1
63120: DOUBLE
63121: EQUAL
63122: IFTRUE 63126
63124: GO 63182
63126: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63127: LD_ADDR_VAR 0 9
63131: PUSH
63132: LD_VAR 0 11
63136: PUSH
63137: LD_VAR 0 12
63141: PUSH
63142: LD_VAR 0 13
63146: PUSH
63147: LD_VAR 0 14
63151: PUSH
63152: LD_VAR 0 15
63156: PUSH
63157: LD_VAR 0 16
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: PUSH
63170: LD_VAR 0 4
63174: PUSH
63175: LD_INT 1
63177: PLUS
63178: ARRAY
63179: ST_TO_ADDR
63180: GO 63311
63182: LD_INT 2
63184: DOUBLE
63185: EQUAL
63186: IFTRUE 63190
63188: GO 63246
63190: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63191: LD_ADDR_VAR 0 9
63195: PUSH
63196: LD_VAR 0 17
63200: PUSH
63201: LD_VAR 0 18
63205: PUSH
63206: LD_VAR 0 19
63210: PUSH
63211: LD_VAR 0 20
63215: PUSH
63216: LD_VAR 0 21
63220: PUSH
63221: LD_VAR 0 22
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: PUSH
63234: LD_VAR 0 4
63238: PUSH
63239: LD_INT 1
63241: PLUS
63242: ARRAY
63243: ST_TO_ADDR
63244: GO 63311
63246: LD_INT 3
63248: DOUBLE
63249: EQUAL
63250: IFTRUE 63254
63252: GO 63310
63254: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63255: LD_ADDR_VAR 0 9
63259: PUSH
63260: LD_VAR 0 23
63264: PUSH
63265: LD_VAR 0 24
63269: PUSH
63270: LD_VAR 0 25
63274: PUSH
63275: LD_VAR 0 26
63279: PUSH
63280: LD_VAR 0 27
63284: PUSH
63285: LD_VAR 0 28
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: PUSH
63298: LD_VAR 0 4
63302: PUSH
63303: LD_INT 1
63305: PLUS
63306: ARRAY
63307: ST_TO_ADDR
63308: GO 63311
63310: POP
63311: GO 63866
63313: LD_INT 2
63315: DOUBLE
63316: EQUAL
63317: IFTRUE 63327
63319: LD_INT 3
63321: DOUBLE
63322: EQUAL
63323: IFTRUE 63327
63325: GO 63383
63327: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63328: LD_ADDR_VAR 0 9
63332: PUSH
63333: LD_VAR 0 29
63337: PUSH
63338: LD_VAR 0 30
63342: PUSH
63343: LD_VAR 0 31
63347: PUSH
63348: LD_VAR 0 32
63352: PUSH
63353: LD_VAR 0 33
63357: PUSH
63358: LD_VAR 0 34
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: PUSH
63371: LD_VAR 0 4
63375: PUSH
63376: LD_INT 1
63378: PLUS
63379: ARRAY
63380: ST_TO_ADDR
63381: GO 63866
63383: LD_INT 16
63385: DOUBLE
63386: EQUAL
63387: IFTRUE 63445
63389: LD_INT 17
63391: DOUBLE
63392: EQUAL
63393: IFTRUE 63445
63395: LD_INT 18
63397: DOUBLE
63398: EQUAL
63399: IFTRUE 63445
63401: LD_INT 19
63403: DOUBLE
63404: EQUAL
63405: IFTRUE 63445
63407: LD_INT 22
63409: DOUBLE
63410: EQUAL
63411: IFTRUE 63445
63413: LD_INT 20
63415: DOUBLE
63416: EQUAL
63417: IFTRUE 63445
63419: LD_INT 21
63421: DOUBLE
63422: EQUAL
63423: IFTRUE 63445
63425: LD_INT 23
63427: DOUBLE
63428: EQUAL
63429: IFTRUE 63445
63431: LD_INT 24
63433: DOUBLE
63434: EQUAL
63435: IFTRUE 63445
63437: LD_INT 25
63439: DOUBLE
63440: EQUAL
63441: IFTRUE 63445
63443: GO 63501
63445: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63446: LD_ADDR_VAR 0 9
63450: PUSH
63451: LD_VAR 0 35
63455: PUSH
63456: LD_VAR 0 36
63460: PUSH
63461: LD_VAR 0 37
63465: PUSH
63466: LD_VAR 0 38
63470: PUSH
63471: LD_VAR 0 39
63475: PUSH
63476: LD_VAR 0 40
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: PUSH
63489: LD_VAR 0 4
63493: PUSH
63494: LD_INT 1
63496: PLUS
63497: ARRAY
63498: ST_TO_ADDR
63499: GO 63866
63501: LD_INT 6
63503: DOUBLE
63504: EQUAL
63505: IFTRUE 63557
63507: LD_INT 7
63509: DOUBLE
63510: EQUAL
63511: IFTRUE 63557
63513: LD_INT 8
63515: DOUBLE
63516: EQUAL
63517: IFTRUE 63557
63519: LD_INT 13
63521: DOUBLE
63522: EQUAL
63523: IFTRUE 63557
63525: LD_INT 12
63527: DOUBLE
63528: EQUAL
63529: IFTRUE 63557
63531: LD_INT 15
63533: DOUBLE
63534: EQUAL
63535: IFTRUE 63557
63537: LD_INT 11
63539: DOUBLE
63540: EQUAL
63541: IFTRUE 63557
63543: LD_INT 14
63545: DOUBLE
63546: EQUAL
63547: IFTRUE 63557
63549: LD_INT 10
63551: DOUBLE
63552: EQUAL
63553: IFTRUE 63557
63555: GO 63613
63557: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63558: LD_ADDR_VAR 0 9
63562: PUSH
63563: LD_VAR 0 41
63567: PUSH
63568: LD_VAR 0 42
63572: PUSH
63573: LD_VAR 0 43
63577: PUSH
63578: LD_VAR 0 44
63582: PUSH
63583: LD_VAR 0 45
63587: PUSH
63588: LD_VAR 0 46
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: PUSH
63601: LD_VAR 0 4
63605: PUSH
63606: LD_INT 1
63608: PLUS
63609: ARRAY
63610: ST_TO_ADDR
63611: GO 63866
63613: LD_INT 36
63615: DOUBLE
63616: EQUAL
63617: IFTRUE 63621
63619: GO 63677
63621: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63622: LD_ADDR_VAR 0 9
63626: PUSH
63627: LD_VAR 0 47
63631: PUSH
63632: LD_VAR 0 48
63636: PUSH
63637: LD_VAR 0 49
63641: PUSH
63642: LD_VAR 0 50
63646: PUSH
63647: LD_VAR 0 51
63651: PUSH
63652: LD_VAR 0 52
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: PUSH
63665: LD_VAR 0 4
63669: PUSH
63670: LD_INT 1
63672: PLUS
63673: ARRAY
63674: ST_TO_ADDR
63675: GO 63866
63677: LD_INT 4
63679: DOUBLE
63680: EQUAL
63681: IFTRUE 63703
63683: LD_INT 5
63685: DOUBLE
63686: EQUAL
63687: IFTRUE 63703
63689: LD_INT 34
63691: DOUBLE
63692: EQUAL
63693: IFTRUE 63703
63695: LD_INT 37
63697: DOUBLE
63698: EQUAL
63699: IFTRUE 63703
63701: GO 63759
63703: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63704: LD_ADDR_VAR 0 9
63708: PUSH
63709: LD_VAR 0 53
63713: PUSH
63714: LD_VAR 0 54
63718: PUSH
63719: LD_VAR 0 55
63723: PUSH
63724: LD_VAR 0 56
63728: PUSH
63729: LD_VAR 0 57
63733: PUSH
63734: LD_VAR 0 58
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: PUSH
63747: LD_VAR 0 4
63751: PUSH
63752: LD_INT 1
63754: PLUS
63755: ARRAY
63756: ST_TO_ADDR
63757: GO 63866
63759: LD_INT 31
63761: DOUBLE
63762: EQUAL
63763: IFTRUE 63809
63765: LD_INT 32
63767: DOUBLE
63768: EQUAL
63769: IFTRUE 63809
63771: LD_INT 33
63773: DOUBLE
63774: EQUAL
63775: IFTRUE 63809
63777: LD_INT 27
63779: DOUBLE
63780: EQUAL
63781: IFTRUE 63809
63783: LD_INT 26
63785: DOUBLE
63786: EQUAL
63787: IFTRUE 63809
63789: LD_INT 28
63791: DOUBLE
63792: EQUAL
63793: IFTRUE 63809
63795: LD_INT 29
63797: DOUBLE
63798: EQUAL
63799: IFTRUE 63809
63801: LD_INT 30
63803: DOUBLE
63804: EQUAL
63805: IFTRUE 63809
63807: GO 63865
63809: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63810: LD_ADDR_VAR 0 9
63814: PUSH
63815: LD_VAR 0 59
63819: PUSH
63820: LD_VAR 0 60
63824: PUSH
63825: LD_VAR 0 61
63829: PUSH
63830: LD_VAR 0 62
63834: PUSH
63835: LD_VAR 0 63
63839: PUSH
63840: LD_VAR 0 64
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: PUSH
63853: LD_VAR 0 4
63857: PUSH
63858: LD_INT 1
63860: PLUS
63861: ARRAY
63862: ST_TO_ADDR
63863: GO 63866
63865: POP
// temp_list2 = [ ] ;
63866: LD_ADDR_VAR 0 10
63870: PUSH
63871: EMPTY
63872: ST_TO_ADDR
// for i in temp_list do
63873: LD_ADDR_VAR 0 8
63877: PUSH
63878: LD_VAR 0 9
63882: PUSH
63883: FOR_IN
63884: IFFALSE 63936
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63886: LD_ADDR_VAR 0 10
63890: PUSH
63891: LD_VAR 0 10
63895: PUSH
63896: LD_VAR 0 8
63900: PUSH
63901: LD_INT 1
63903: ARRAY
63904: PUSH
63905: LD_VAR 0 2
63909: PLUS
63910: PUSH
63911: LD_VAR 0 8
63915: PUSH
63916: LD_INT 2
63918: ARRAY
63919: PUSH
63920: LD_VAR 0 3
63924: PLUS
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: EMPTY
63931: LIST
63932: ADD
63933: ST_TO_ADDR
63934: GO 63883
63936: POP
63937: POP
// result = temp_list2 ;
63938: LD_ADDR_VAR 0 7
63942: PUSH
63943: LD_VAR 0 10
63947: ST_TO_ADDR
// end ;
63948: LD_VAR 0 7
63952: RET
// export function EnemyInRange ( unit , dist ) ; begin
63953: LD_INT 0
63955: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63956: LD_ADDR_VAR 0 3
63960: PUSH
63961: LD_VAR 0 1
63965: PPUSH
63966: CALL_OW 255
63970: PPUSH
63971: LD_VAR 0 1
63975: PPUSH
63976: CALL_OW 250
63980: PPUSH
63981: LD_VAR 0 1
63985: PPUSH
63986: CALL_OW 251
63990: PPUSH
63991: LD_VAR 0 2
63995: PPUSH
63996: CALL 37326 0 4
64000: PUSH
64001: LD_INT 4
64003: ARRAY
64004: ST_TO_ADDR
// end ;
64005: LD_VAR 0 3
64009: RET
// export function PlayerSeeMe ( unit ) ; begin
64010: LD_INT 0
64012: PPUSH
// result := See ( your_side , unit ) ;
64013: LD_ADDR_VAR 0 2
64017: PUSH
64018: LD_OWVAR 2
64022: PPUSH
64023: LD_VAR 0 1
64027: PPUSH
64028: CALL_OW 292
64032: ST_TO_ADDR
// end ;
64033: LD_VAR 0 2
64037: RET
// export function ReverseDir ( unit ) ; begin
64038: LD_INT 0
64040: PPUSH
// if not unit then
64041: LD_VAR 0 1
64045: NOT
64046: IFFALSE 64050
// exit ;
64048: GO 64073
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64050: LD_ADDR_VAR 0 2
64054: PUSH
64055: LD_VAR 0 1
64059: PPUSH
64060: CALL_OW 254
64064: PUSH
64065: LD_INT 3
64067: PLUS
64068: PUSH
64069: LD_INT 6
64071: MOD
64072: ST_TO_ADDR
// end ;
64073: LD_VAR 0 2
64077: RET
// export function ReverseArray ( array ) ; var i ; begin
64078: LD_INT 0
64080: PPUSH
64081: PPUSH
// if not array then
64082: LD_VAR 0 1
64086: NOT
64087: IFFALSE 64091
// exit ;
64089: GO 64146
// result := [ ] ;
64091: LD_ADDR_VAR 0 2
64095: PUSH
64096: EMPTY
64097: ST_TO_ADDR
// for i := array downto 1 do
64098: LD_ADDR_VAR 0 3
64102: PUSH
64103: DOUBLE
64104: LD_VAR 0 1
64108: INC
64109: ST_TO_ADDR
64110: LD_INT 1
64112: PUSH
64113: FOR_DOWNTO
64114: IFFALSE 64144
// result := Join ( result , array [ i ] ) ;
64116: LD_ADDR_VAR 0 2
64120: PUSH
64121: LD_VAR 0 2
64125: PPUSH
64126: LD_VAR 0 1
64130: PUSH
64131: LD_VAR 0 3
64135: ARRAY
64136: PPUSH
64137: CALL 68802 0 2
64141: ST_TO_ADDR
64142: GO 64113
64144: POP
64145: POP
// end ;
64146: LD_VAR 0 2
64150: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64151: LD_INT 0
64153: PPUSH
64154: PPUSH
64155: PPUSH
64156: PPUSH
64157: PPUSH
64158: PPUSH
// if not unit or not hexes then
64159: LD_VAR 0 1
64163: NOT
64164: PUSH
64165: LD_VAR 0 2
64169: NOT
64170: OR
64171: IFFALSE 64175
// exit ;
64173: GO 64298
// dist := 9999 ;
64175: LD_ADDR_VAR 0 5
64179: PUSH
64180: LD_INT 9999
64182: ST_TO_ADDR
// for i = 1 to hexes do
64183: LD_ADDR_VAR 0 4
64187: PUSH
64188: DOUBLE
64189: LD_INT 1
64191: DEC
64192: ST_TO_ADDR
64193: LD_VAR 0 2
64197: PUSH
64198: FOR_TO
64199: IFFALSE 64286
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64201: LD_ADDR_VAR 0 6
64205: PUSH
64206: LD_VAR 0 1
64210: PPUSH
64211: LD_VAR 0 2
64215: PUSH
64216: LD_VAR 0 4
64220: ARRAY
64221: PUSH
64222: LD_INT 1
64224: ARRAY
64225: PPUSH
64226: LD_VAR 0 2
64230: PUSH
64231: LD_VAR 0 4
64235: ARRAY
64236: PUSH
64237: LD_INT 2
64239: ARRAY
64240: PPUSH
64241: CALL_OW 297
64245: ST_TO_ADDR
// if tdist < dist then
64246: LD_VAR 0 6
64250: PUSH
64251: LD_VAR 0 5
64255: LESS
64256: IFFALSE 64284
// begin hex := hexes [ i ] ;
64258: LD_ADDR_VAR 0 8
64262: PUSH
64263: LD_VAR 0 2
64267: PUSH
64268: LD_VAR 0 4
64272: ARRAY
64273: ST_TO_ADDR
// dist := tdist ;
64274: LD_ADDR_VAR 0 5
64278: PUSH
64279: LD_VAR 0 6
64283: ST_TO_ADDR
// end ; end ;
64284: GO 64198
64286: POP
64287: POP
// result := hex ;
64288: LD_ADDR_VAR 0 3
64292: PUSH
64293: LD_VAR 0 8
64297: ST_TO_ADDR
// end ;
64298: LD_VAR 0 3
64302: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64303: LD_INT 0
64305: PPUSH
64306: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64307: LD_VAR 0 1
64311: NOT
64312: PUSH
64313: LD_VAR 0 1
64317: PUSH
64318: LD_INT 21
64320: PUSH
64321: LD_INT 2
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 23
64330: PUSH
64331: LD_INT 2
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PPUSH
64342: CALL_OW 69
64346: IN
64347: NOT
64348: OR
64349: IFFALSE 64353
// exit ;
64351: GO 64400
// for i = 1 to 3 do
64353: LD_ADDR_VAR 0 3
64357: PUSH
64358: DOUBLE
64359: LD_INT 1
64361: DEC
64362: ST_TO_ADDR
64363: LD_INT 3
64365: PUSH
64366: FOR_TO
64367: IFFALSE 64398
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64369: LD_VAR 0 1
64373: PPUSH
64374: CALL_OW 250
64378: PPUSH
64379: LD_VAR 0 1
64383: PPUSH
64384: CALL_OW 251
64388: PPUSH
64389: LD_INT 1
64391: PPUSH
64392: CALL_OW 453
64396: GO 64366
64398: POP
64399: POP
// end ;
64400: LD_VAR 0 2
64404: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64405: LD_INT 0
64407: PPUSH
64408: PPUSH
64409: PPUSH
64410: PPUSH
64411: PPUSH
64412: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64413: LD_VAR 0 1
64417: NOT
64418: PUSH
64419: LD_VAR 0 2
64423: NOT
64424: OR
64425: PUSH
64426: LD_VAR 0 1
64430: PPUSH
64431: CALL_OW 314
64435: OR
64436: IFFALSE 64440
// exit ;
64438: GO 64907
// if GetLives ( i ) < 250 then
64440: LD_VAR 0 4
64444: PPUSH
64445: CALL_OW 256
64449: PUSH
64450: LD_INT 250
64452: LESS
64453: IFFALSE 64466
// begin ComAutodestruct ( i ) ;
64455: LD_VAR 0 4
64459: PPUSH
64460: CALL 64303 0 1
// exit ;
64464: GO 64907
// end ; x := GetX ( enemy_unit ) ;
64466: LD_ADDR_VAR 0 7
64470: PUSH
64471: LD_VAR 0 2
64475: PPUSH
64476: CALL_OW 250
64480: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64481: LD_ADDR_VAR 0 8
64485: PUSH
64486: LD_VAR 0 2
64490: PPUSH
64491: CALL_OW 251
64495: ST_TO_ADDR
// if not x or not y then
64496: LD_VAR 0 7
64500: NOT
64501: PUSH
64502: LD_VAR 0 8
64506: NOT
64507: OR
64508: IFFALSE 64512
// exit ;
64510: GO 64907
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64512: LD_ADDR_VAR 0 6
64516: PUSH
64517: LD_VAR 0 7
64521: PPUSH
64522: LD_INT 0
64524: PPUSH
64525: LD_INT 4
64527: PPUSH
64528: CALL_OW 272
64532: PUSH
64533: LD_VAR 0 8
64537: PPUSH
64538: LD_INT 0
64540: PPUSH
64541: LD_INT 4
64543: PPUSH
64544: CALL_OW 273
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_VAR 0 7
64557: PPUSH
64558: LD_INT 1
64560: PPUSH
64561: LD_INT 4
64563: PPUSH
64564: CALL_OW 272
64568: PUSH
64569: LD_VAR 0 8
64573: PPUSH
64574: LD_INT 1
64576: PPUSH
64577: LD_INT 4
64579: PPUSH
64580: CALL_OW 273
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_VAR 0 7
64593: PPUSH
64594: LD_INT 2
64596: PPUSH
64597: LD_INT 4
64599: PPUSH
64600: CALL_OW 272
64604: PUSH
64605: LD_VAR 0 8
64609: PPUSH
64610: LD_INT 2
64612: PPUSH
64613: LD_INT 4
64615: PPUSH
64616: CALL_OW 273
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_VAR 0 7
64629: PPUSH
64630: LD_INT 3
64632: PPUSH
64633: LD_INT 4
64635: PPUSH
64636: CALL_OW 272
64640: PUSH
64641: LD_VAR 0 8
64645: PPUSH
64646: LD_INT 3
64648: PPUSH
64649: LD_INT 4
64651: PPUSH
64652: CALL_OW 273
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_VAR 0 7
64665: PPUSH
64666: LD_INT 4
64668: PPUSH
64669: LD_INT 4
64671: PPUSH
64672: CALL_OW 272
64676: PUSH
64677: LD_VAR 0 8
64681: PPUSH
64682: LD_INT 4
64684: PPUSH
64685: LD_INT 4
64687: PPUSH
64688: CALL_OW 273
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_VAR 0 7
64701: PPUSH
64702: LD_INT 5
64704: PPUSH
64705: LD_INT 4
64707: PPUSH
64708: CALL_OW 272
64712: PUSH
64713: LD_VAR 0 8
64717: PPUSH
64718: LD_INT 5
64720: PPUSH
64721: LD_INT 4
64723: PPUSH
64724: CALL_OW 273
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: ST_TO_ADDR
// for i = tmp downto 1 do
64741: LD_ADDR_VAR 0 4
64745: PUSH
64746: DOUBLE
64747: LD_VAR 0 6
64751: INC
64752: ST_TO_ADDR
64753: LD_INT 1
64755: PUSH
64756: FOR_DOWNTO
64757: IFFALSE 64858
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64759: LD_VAR 0 6
64763: PUSH
64764: LD_VAR 0 4
64768: ARRAY
64769: PUSH
64770: LD_INT 1
64772: ARRAY
64773: PPUSH
64774: LD_VAR 0 6
64778: PUSH
64779: LD_VAR 0 4
64783: ARRAY
64784: PUSH
64785: LD_INT 2
64787: ARRAY
64788: PPUSH
64789: CALL_OW 488
64793: NOT
64794: PUSH
64795: LD_VAR 0 6
64799: PUSH
64800: LD_VAR 0 4
64804: ARRAY
64805: PUSH
64806: LD_INT 1
64808: ARRAY
64809: PPUSH
64810: LD_VAR 0 6
64814: PUSH
64815: LD_VAR 0 4
64819: ARRAY
64820: PUSH
64821: LD_INT 2
64823: ARRAY
64824: PPUSH
64825: CALL_OW 428
64829: PUSH
64830: LD_INT 0
64832: NONEQUAL
64833: OR
64834: IFFALSE 64856
// tmp := Delete ( tmp , i ) ;
64836: LD_ADDR_VAR 0 6
64840: PUSH
64841: LD_VAR 0 6
64845: PPUSH
64846: LD_VAR 0 4
64850: PPUSH
64851: CALL_OW 3
64855: ST_TO_ADDR
64856: GO 64756
64858: POP
64859: POP
// j := GetClosestHex ( unit , tmp ) ;
64860: LD_ADDR_VAR 0 5
64864: PUSH
64865: LD_VAR 0 1
64869: PPUSH
64870: LD_VAR 0 6
64874: PPUSH
64875: CALL 64151 0 2
64879: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64880: LD_VAR 0 1
64884: PPUSH
64885: LD_VAR 0 5
64889: PUSH
64890: LD_INT 1
64892: ARRAY
64893: PPUSH
64894: LD_VAR 0 5
64898: PUSH
64899: LD_INT 2
64901: ARRAY
64902: PPUSH
64903: CALL_OW 111
// end ;
64907: LD_VAR 0 3
64911: RET
// export function PrepareApemanSoldier ( ) ; begin
64912: LD_INT 0
64914: PPUSH
// uc_nation := 0 ;
64915: LD_ADDR_OWVAR 21
64919: PUSH
64920: LD_INT 0
64922: ST_TO_ADDR
// hc_sex := sex_male ;
64923: LD_ADDR_OWVAR 27
64927: PUSH
64928: LD_INT 1
64930: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64931: LD_ADDR_OWVAR 28
64935: PUSH
64936: LD_INT 15
64938: ST_TO_ADDR
// hc_gallery :=  ;
64939: LD_ADDR_OWVAR 33
64943: PUSH
64944: LD_STRING 
64946: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64947: LD_ADDR_OWVAR 31
64951: PUSH
64952: LD_INT 0
64954: PPUSH
64955: LD_INT 3
64957: PPUSH
64958: CALL_OW 12
64962: PUSH
64963: LD_INT 0
64965: PPUSH
64966: LD_INT 3
64968: PPUSH
64969: CALL_OW 12
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: ST_TO_ADDR
// end ;
64986: LD_VAR 0 1
64990: RET
// export function PrepareApemanEngineer ( ) ; begin
64991: LD_INT 0
64993: PPUSH
// uc_nation := 0 ;
64994: LD_ADDR_OWVAR 21
64998: PUSH
64999: LD_INT 0
65001: ST_TO_ADDR
// hc_sex := sex_male ;
65002: LD_ADDR_OWVAR 27
65006: PUSH
65007: LD_INT 1
65009: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65010: LD_ADDR_OWVAR 28
65014: PUSH
65015: LD_INT 16
65017: ST_TO_ADDR
// hc_gallery :=  ;
65018: LD_ADDR_OWVAR 33
65022: PUSH
65023: LD_STRING 
65025: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65026: LD_ADDR_OWVAR 31
65030: PUSH
65031: LD_INT 0
65033: PPUSH
65034: LD_INT 3
65036: PPUSH
65037: CALL_OW 12
65041: PUSH
65042: LD_INT 0
65044: PPUSH
65045: LD_INT 3
65047: PPUSH
65048: CALL_OW 12
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: ST_TO_ADDR
// end ;
65065: LD_VAR 0 1
65069: RET
// export function PrepareApeman ( agressivity ) ; begin
65070: LD_INT 0
65072: PPUSH
// uc_side := 0 ;
65073: LD_ADDR_OWVAR 20
65077: PUSH
65078: LD_INT 0
65080: ST_TO_ADDR
// uc_nation := 0 ;
65081: LD_ADDR_OWVAR 21
65085: PUSH
65086: LD_INT 0
65088: ST_TO_ADDR
// hc_sex := sex_male ;
65089: LD_ADDR_OWVAR 27
65093: PUSH
65094: LD_INT 1
65096: ST_TO_ADDR
// hc_class := class_apeman ;
65097: LD_ADDR_OWVAR 28
65101: PUSH
65102: LD_INT 12
65104: ST_TO_ADDR
// hc_gallery :=  ;
65105: LD_ADDR_OWVAR 33
65109: PUSH
65110: LD_STRING 
65112: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65113: LD_ADDR_OWVAR 35
65117: PUSH
65118: LD_VAR 0 1
65122: NEG
65123: PPUSH
65124: LD_VAR 0 1
65128: PPUSH
65129: CALL_OW 12
65133: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65134: LD_ADDR_OWVAR 31
65138: PUSH
65139: LD_INT 0
65141: PPUSH
65142: LD_INT 3
65144: PPUSH
65145: CALL_OW 12
65149: PUSH
65150: LD_INT 0
65152: PPUSH
65153: LD_INT 3
65155: PPUSH
65156: CALL_OW 12
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 0
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: ST_TO_ADDR
// end ;
65173: LD_VAR 0 2
65177: RET
// export function PrepareTiger ( agressivity ) ; begin
65178: LD_INT 0
65180: PPUSH
// uc_side := 0 ;
65181: LD_ADDR_OWVAR 20
65185: PUSH
65186: LD_INT 0
65188: ST_TO_ADDR
// uc_nation := 0 ;
65189: LD_ADDR_OWVAR 21
65193: PUSH
65194: LD_INT 0
65196: ST_TO_ADDR
// hc_class := class_tiger ;
65197: LD_ADDR_OWVAR 28
65201: PUSH
65202: LD_INT 14
65204: ST_TO_ADDR
// hc_gallery :=  ;
65205: LD_ADDR_OWVAR 33
65209: PUSH
65210: LD_STRING 
65212: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65213: LD_ADDR_OWVAR 35
65217: PUSH
65218: LD_VAR 0 1
65222: NEG
65223: PPUSH
65224: LD_VAR 0 1
65228: PPUSH
65229: CALL_OW 12
65233: ST_TO_ADDR
// end ;
65234: LD_VAR 0 2
65238: RET
// export function PrepareEnchidna ( ) ; begin
65239: LD_INT 0
65241: PPUSH
// uc_side := 0 ;
65242: LD_ADDR_OWVAR 20
65246: PUSH
65247: LD_INT 0
65249: ST_TO_ADDR
// uc_nation := 0 ;
65250: LD_ADDR_OWVAR 21
65254: PUSH
65255: LD_INT 0
65257: ST_TO_ADDR
// hc_class := class_baggie ;
65258: LD_ADDR_OWVAR 28
65262: PUSH
65263: LD_INT 13
65265: ST_TO_ADDR
// hc_gallery :=  ;
65266: LD_ADDR_OWVAR 33
65270: PUSH
65271: LD_STRING 
65273: ST_TO_ADDR
// end ;
65274: LD_VAR 0 1
65278: RET
// export function PrepareFrog ( ) ; begin
65279: LD_INT 0
65281: PPUSH
// uc_side := 0 ;
65282: LD_ADDR_OWVAR 20
65286: PUSH
65287: LD_INT 0
65289: ST_TO_ADDR
// uc_nation := 0 ;
65290: LD_ADDR_OWVAR 21
65294: PUSH
65295: LD_INT 0
65297: ST_TO_ADDR
// hc_class := class_frog ;
65298: LD_ADDR_OWVAR 28
65302: PUSH
65303: LD_INT 19
65305: ST_TO_ADDR
// hc_gallery :=  ;
65306: LD_ADDR_OWVAR 33
65310: PUSH
65311: LD_STRING 
65313: ST_TO_ADDR
// end ;
65314: LD_VAR 0 1
65318: RET
// export function PrepareFish ( ) ; begin
65319: LD_INT 0
65321: PPUSH
// uc_side := 0 ;
65322: LD_ADDR_OWVAR 20
65326: PUSH
65327: LD_INT 0
65329: ST_TO_ADDR
// uc_nation := 0 ;
65330: LD_ADDR_OWVAR 21
65334: PUSH
65335: LD_INT 0
65337: ST_TO_ADDR
// hc_class := class_fish ;
65338: LD_ADDR_OWVAR 28
65342: PUSH
65343: LD_INT 20
65345: ST_TO_ADDR
// hc_gallery :=  ;
65346: LD_ADDR_OWVAR 33
65350: PUSH
65351: LD_STRING 
65353: ST_TO_ADDR
// end ;
65354: LD_VAR 0 1
65358: RET
// export function PrepareBird ( ) ; begin
65359: LD_INT 0
65361: PPUSH
// uc_side := 0 ;
65362: LD_ADDR_OWVAR 20
65366: PUSH
65367: LD_INT 0
65369: ST_TO_ADDR
// uc_nation := 0 ;
65370: LD_ADDR_OWVAR 21
65374: PUSH
65375: LD_INT 0
65377: ST_TO_ADDR
// hc_class := class_phororhacos ;
65378: LD_ADDR_OWVAR 28
65382: PUSH
65383: LD_INT 18
65385: ST_TO_ADDR
// hc_gallery :=  ;
65386: LD_ADDR_OWVAR 33
65390: PUSH
65391: LD_STRING 
65393: ST_TO_ADDR
// end ;
65394: LD_VAR 0 1
65398: RET
// export function PrepareHorse ( ) ; begin
65399: LD_INT 0
65401: PPUSH
// uc_side := 0 ;
65402: LD_ADDR_OWVAR 20
65406: PUSH
65407: LD_INT 0
65409: ST_TO_ADDR
// uc_nation := 0 ;
65410: LD_ADDR_OWVAR 21
65414: PUSH
65415: LD_INT 0
65417: ST_TO_ADDR
// hc_class := class_horse ;
65418: LD_ADDR_OWVAR 28
65422: PUSH
65423: LD_INT 21
65425: ST_TO_ADDR
// hc_gallery :=  ;
65426: LD_ADDR_OWVAR 33
65430: PUSH
65431: LD_STRING 
65433: ST_TO_ADDR
// end ;
65434: LD_VAR 0 1
65438: RET
// export function PrepareMastodont ( ) ; begin
65439: LD_INT 0
65441: PPUSH
// uc_side := 0 ;
65442: LD_ADDR_OWVAR 20
65446: PUSH
65447: LD_INT 0
65449: ST_TO_ADDR
// uc_nation := 0 ;
65450: LD_ADDR_OWVAR 21
65454: PUSH
65455: LD_INT 0
65457: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65458: LD_ADDR_OWVAR 37
65462: PUSH
65463: LD_INT 31
65465: ST_TO_ADDR
// vc_control := control_rider ;
65466: LD_ADDR_OWVAR 38
65470: PUSH
65471: LD_INT 4
65473: ST_TO_ADDR
// end ;
65474: LD_VAR 0 1
65478: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65479: LD_INT 0
65481: PPUSH
65482: PPUSH
65483: PPUSH
// uc_side = 0 ;
65484: LD_ADDR_OWVAR 20
65488: PUSH
65489: LD_INT 0
65491: ST_TO_ADDR
// uc_nation = 0 ;
65492: LD_ADDR_OWVAR 21
65496: PUSH
65497: LD_INT 0
65499: ST_TO_ADDR
// InitHc_All ( ) ;
65500: CALL_OW 584
// InitVc ;
65504: CALL_OW 20
// if mastodonts then
65508: LD_VAR 0 6
65512: IFFALSE 65579
// for i = 1 to mastodonts do
65514: LD_ADDR_VAR 0 11
65518: PUSH
65519: DOUBLE
65520: LD_INT 1
65522: DEC
65523: ST_TO_ADDR
65524: LD_VAR 0 6
65528: PUSH
65529: FOR_TO
65530: IFFALSE 65577
// begin vc_chassis := 31 ;
65532: LD_ADDR_OWVAR 37
65536: PUSH
65537: LD_INT 31
65539: ST_TO_ADDR
// vc_control := control_rider ;
65540: LD_ADDR_OWVAR 38
65544: PUSH
65545: LD_INT 4
65547: ST_TO_ADDR
// animal := CreateVehicle ;
65548: LD_ADDR_VAR 0 12
65552: PUSH
65553: CALL_OW 45
65557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65558: LD_VAR 0 12
65562: PPUSH
65563: LD_VAR 0 8
65567: PPUSH
65568: LD_INT 0
65570: PPUSH
65571: CALL 67707 0 3
// end ;
65575: GO 65529
65577: POP
65578: POP
// if horses then
65579: LD_VAR 0 5
65583: IFFALSE 65650
// for i = 1 to horses do
65585: LD_ADDR_VAR 0 11
65589: PUSH
65590: DOUBLE
65591: LD_INT 1
65593: DEC
65594: ST_TO_ADDR
65595: LD_VAR 0 5
65599: PUSH
65600: FOR_TO
65601: IFFALSE 65648
// begin hc_class := 21 ;
65603: LD_ADDR_OWVAR 28
65607: PUSH
65608: LD_INT 21
65610: ST_TO_ADDR
// hc_gallery :=  ;
65611: LD_ADDR_OWVAR 33
65615: PUSH
65616: LD_STRING 
65618: ST_TO_ADDR
// animal := CreateHuman ;
65619: LD_ADDR_VAR 0 12
65623: PUSH
65624: CALL_OW 44
65628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65629: LD_VAR 0 12
65633: PPUSH
65634: LD_VAR 0 8
65638: PPUSH
65639: LD_INT 0
65641: PPUSH
65642: CALL 67707 0 3
// end ;
65646: GO 65600
65648: POP
65649: POP
// if birds then
65650: LD_VAR 0 1
65654: IFFALSE 65721
// for i = 1 to birds do
65656: LD_ADDR_VAR 0 11
65660: PUSH
65661: DOUBLE
65662: LD_INT 1
65664: DEC
65665: ST_TO_ADDR
65666: LD_VAR 0 1
65670: PUSH
65671: FOR_TO
65672: IFFALSE 65719
// begin hc_class := 18 ;
65674: LD_ADDR_OWVAR 28
65678: PUSH
65679: LD_INT 18
65681: ST_TO_ADDR
// hc_gallery =  ;
65682: LD_ADDR_OWVAR 33
65686: PUSH
65687: LD_STRING 
65689: ST_TO_ADDR
// animal := CreateHuman ;
65690: LD_ADDR_VAR 0 12
65694: PUSH
65695: CALL_OW 44
65699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65700: LD_VAR 0 12
65704: PPUSH
65705: LD_VAR 0 8
65709: PPUSH
65710: LD_INT 0
65712: PPUSH
65713: CALL 67707 0 3
// end ;
65717: GO 65671
65719: POP
65720: POP
// if tigers then
65721: LD_VAR 0 2
65725: IFFALSE 65809
// for i = 1 to tigers do
65727: LD_ADDR_VAR 0 11
65731: PUSH
65732: DOUBLE
65733: LD_INT 1
65735: DEC
65736: ST_TO_ADDR
65737: LD_VAR 0 2
65741: PUSH
65742: FOR_TO
65743: IFFALSE 65807
// begin hc_class = class_tiger ;
65745: LD_ADDR_OWVAR 28
65749: PUSH
65750: LD_INT 14
65752: ST_TO_ADDR
// hc_gallery =  ;
65753: LD_ADDR_OWVAR 33
65757: PUSH
65758: LD_STRING 
65760: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65761: LD_ADDR_OWVAR 35
65765: PUSH
65766: LD_INT 7
65768: NEG
65769: PPUSH
65770: LD_INT 7
65772: PPUSH
65773: CALL_OW 12
65777: ST_TO_ADDR
// animal := CreateHuman ;
65778: LD_ADDR_VAR 0 12
65782: PUSH
65783: CALL_OW 44
65787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65788: LD_VAR 0 12
65792: PPUSH
65793: LD_VAR 0 8
65797: PPUSH
65798: LD_INT 0
65800: PPUSH
65801: CALL 67707 0 3
// end ;
65805: GO 65742
65807: POP
65808: POP
// if apemans then
65809: LD_VAR 0 3
65813: IFFALSE 65936
// for i = 1 to apemans do
65815: LD_ADDR_VAR 0 11
65819: PUSH
65820: DOUBLE
65821: LD_INT 1
65823: DEC
65824: ST_TO_ADDR
65825: LD_VAR 0 3
65829: PUSH
65830: FOR_TO
65831: IFFALSE 65934
// begin hc_class = class_apeman ;
65833: LD_ADDR_OWVAR 28
65837: PUSH
65838: LD_INT 12
65840: ST_TO_ADDR
// hc_gallery =  ;
65841: LD_ADDR_OWVAR 33
65845: PUSH
65846: LD_STRING 
65848: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65849: LD_ADDR_OWVAR 35
65853: PUSH
65854: LD_INT 2
65856: NEG
65857: PPUSH
65858: LD_INT 2
65860: PPUSH
65861: CALL_OW 12
65865: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65866: LD_ADDR_OWVAR 31
65870: PUSH
65871: LD_INT 1
65873: PPUSH
65874: LD_INT 3
65876: PPUSH
65877: CALL_OW 12
65881: PUSH
65882: LD_INT 1
65884: PPUSH
65885: LD_INT 3
65887: PPUSH
65888: CALL_OW 12
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: ST_TO_ADDR
// animal := CreateHuman ;
65905: LD_ADDR_VAR 0 12
65909: PUSH
65910: CALL_OW 44
65914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65915: LD_VAR 0 12
65919: PPUSH
65920: LD_VAR 0 8
65924: PPUSH
65925: LD_INT 0
65927: PPUSH
65928: CALL 67707 0 3
// end ;
65932: GO 65830
65934: POP
65935: POP
// if enchidnas then
65936: LD_VAR 0 4
65940: IFFALSE 66007
// for i = 1 to enchidnas do
65942: LD_ADDR_VAR 0 11
65946: PUSH
65947: DOUBLE
65948: LD_INT 1
65950: DEC
65951: ST_TO_ADDR
65952: LD_VAR 0 4
65956: PUSH
65957: FOR_TO
65958: IFFALSE 66005
// begin hc_class = 13 ;
65960: LD_ADDR_OWVAR 28
65964: PUSH
65965: LD_INT 13
65967: ST_TO_ADDR
// hc_gallery =  ;
65968: LD_ADDR_OWVAR 33
65972: PUSH
65973: LD_STRING 
65975: ST_TO_ADDR
// animal := CreateHuman ;
65976: LD_ADDR_VAR 0 12
65980: PUSH
65981: CALL_OW 44
65985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65986: LD_VAR 0 12
65990: PPUSH
65991: LD_VAR 0 8
65995: PPUSH
65996: LD_INT 0
65998: PPUSH
65999: CALL 67707 0 3
// end ;
66003: GO 65957
66005: POP
66006: POP
// if fishes then
66007: LD_VAR 0 7
66011: IFFALSE 66078
// for i = 1 to fishes do
66013: LD_ADDR_VAR 0 11
66017: PUSH
66018: DOUBLE
66019: LD_INT 1
66021: DEC
66022: ST_TO_ADDR
66023: LD_VAR 0 7
66027: PUSH
66028: FOR_TO
66029: IFFALSE 66076
// begin hc_class = 20 ;
66031: LD_ADDR_OWVAR 28
66035: PUSH
66036: LD_INT 20
66038: ST_TO_ADDR
// hc_gallery =  ;
66039: LD_ADDR_OWVAR 33
66043: PUSH
66044: LD_STRING 
66046: ST_TO_ADDR
// animal := CreateHuman ;
66047: LD_ADDR_VAR 0 12
66051: PUSH
66052: CALL_OW 44
66056: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66057: LD_VAR 0 12
66061: PPUSH
66062: LD_VAR 0 9
66066: PPUSH
66067: LD_INT 0
66069: PPUSH
66070: CALL 67707 0 3
// end ;
66074: GO 66028
66076: POP
66077: POP
// end ;
66078: LD_VAR 0 10
66082: RET
// export function WantHeal ( sci , unit ) ; begin
66083: LD_INT 0
66085: PPUSH
// if GetTaskList ( sci ) > 0 then
66086: LD_VAR 0 1
66090: PPUSH
66091: CALL_OW 437
66095: PUSH
66096: LD_INT 0
66098: GREATER
66099: IFFALSE 66169
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66101: LD_VAR 0 1
66105: PPUSH
66106: CALL_OW 437
66110: PUSH
66111: LD_INT 1
66113: ARRAY
66114: PUSH
66115: LD_INT 1
66117: ARRAY
66118: PUSH
66119: LD_STRING l
66121: EQUAL
66122: PUSH
66123: LD_VAR 0 1
66127: PPUSH
66128: CALL_OW 437
66132: PUSH
66133: LD_INT 1
66135: ARRAY
66136: PUSH
66137: LD_INT 4
66139: ARRAY
66140: PUSH
66141: LD_VAR 0 2
66145: EQUAL
66146: AND
66147: IFFALSE 66159
// result := true else
66149: LD_ADDR_VAR 0 3
66153: PUSH
66154: LD_INT 1
66156: ST_TO_ADDR
66157: GO 66167
// result := false ;
66159: LD_ADDR_VAR 0 3
66163: PUSH
66164: LD_INT 0
66166: ST_TO_ADDR
// end else
66167: GO 66177
// result := false ;
66169: LD_ADDR_VAR 0 3
66173: PUSH
66174: LD_INT 0
66176: ST_TO_ADDR
// end ;
66177: LD_VAR 0 3
66181: RET
// export function HealTarget ( sci ) ; begin
66182: LD_INT 0
66184: PPUSH
// if not sci then
66185: LD_VAR 0 1
66189: NOT
66190: IFFALSE 66194
// exit ;
66192: GO 66259
// result := 0 ;
66194: LD_ADDR_VAR 0 2
66198: PUSH
66199: LD_INT 0
66201: ST_TO_ADDR
// if GetTaskList ( sci ) then
66202: LD_VAR 0 1
66206: PPUSH
66207: CALL_OW 437
66211: IFFALSE 66259
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66213: LD_VAR 0 1
66217: PPUSH
66218: CALL_OW 437
66222: PUSH
66223: LD_INT 1
66225: ARRAY
66226: PUSH
66227: LD_INT 1
66229: ARRAY
66230: PUSH
66231: LD_STRING l
66233: EQUAL
66234: IFFALSE 66259
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66236: LD_ADDR_VAR 0 2
66240: PUSH
66241: LD_VAR 0 1
66245: PPUSH
66246: CALL_OW 437
66250: PUSH
66251: LD_INT 1
66253: ARRAY
66254: PUSH
66255: LD_INT 4
66257: ARRAY
66258: ST_TO_ADDR
// end ;
66259: LD_VAR 0 2
66263: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66264: LD_INT 0
66266: PPUSH
66267: PPUSH
66268: PPUSH
66269: PPUSH
// if not base_units then
66270: LD_VAR 0 1
66274: NOT
66275: IFFALSE 66279
// exit ;
66277: GO 66366
// result := false ;
66279: LD_ADDR_VAR 0 2
66283: PUSH
66284: LD_INT 0
66286: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66287: LD_ADDR_VAR 0 5
66291: PUSH
66292: LD_VAR 0 1
66296: PPUSH
66297: LD_INT 21
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PPUSH
66307: CALL_OW 72
66311: ST_TO_ADDR
// if not tmp then
66312: LD_VAR 0 5
66316: NOT
66317: IFFALSE 66321
// exit ;
66319: GO 66366
// for i in tmp do
66321: LD_ADDR_VAR 0 3
66325: PUSH
66326: LD_VAR 0 5
66330: PUSH
66331: FOR_IN
66332: IFFALSE 66364
// begin result := EnemyInRange ( i , 22 ) ;
66334: LD_ADDR_VAR 0 2
66338: PUSH
66339: LD_VAR 0 3
66343: PPUSH
66344: LD_INT 22
66346: PPUSH
66347: CALL 63953 0 2
66351: ST_TO_ADDR
// if result then
66352: LD_VAR 0 2
66356: IFFALSE 66362
// exit ;
66358: POP
66359: POP
66360: GO 66366
// end ;
66362: GO 66331
66364: POP
66365: POP
// end ;
66366: LD_VAR 0 2
66370: RET
// export function FilterByTag ( units , tag ) ; begin
66371: LD_INT 0
66373: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66374: LD_ADDR_VAR 0 3
66378: PUSH
66379: LD_VAR 0 1
66383: PPUSH
66384: LD_INT 120
66386: PUSH
66387: LD_VAR 0 2
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PPUSH
66396: CALL_OW 72
66400: ST_TO_ADDR
// end ;
66401: LD_VAR 0 3
66405: RET
// export function IsDriver ( un ) ; begin
66406: LD_INT 0
66408: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66409: LD_ADDR_VAR 0 2
66413: PUSH
66414: LD_VAR 0 1
66418: PUSH
66419: LD_INT 55
66421: PUSH
66422: EMPTY
66423: LIST
66424: PPUSH
66425: CALL_OW 69
66429: IN
66430: ST_TO_ADDR
// end ;
66431: LD_VAR 0 2
66435: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66436: LD_INT 0
66438: PPUSH
66439: PPUSH
// list := [ ] ;
66440: LD_ADDR_VAR 0 5
66444: PUSH
66445: EMPTY
66446: ST_TO_ADDR
// case d of 0 :
66447: LD_VAR 0 3
66451: PUSH
66452: LD_INT 0
66454: DOUBLE
66455: EQUAL
66456: IFTRUE 66460
66458: GO 66593
66460: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66461: LD_ADDR_VAR 0 5
66465: PUSH
66466: LD_VAR 0 1
66470: PUSH
66471: LD_INT 4
66473: MINUS
66474: PUSH
66475: LD_VAR 0 2
66479: PUSH
66480: LD_INT 4
66482: MINUS
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: LIST
66491: PUSH
66492: LD_VAR 0 1
66496: PUSH
66497: LD_INT 3
66499: MINUS
66500: PUSH
66501: LD_VAR 0 2
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: LIST
66513: PUSH
66514: LD_VAR 0 1
66518: PUSH
66519: LD_INT 4
66521: PLUS
66522: PUSH
66523: LD_VAR 0 2
66527: PUSH
66528: LD_INT 4
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: LIST
66535: PUSH
66536: LD_VAR 0 1
66540: PUSH
66541: LD_INT 3
66543: PLUS
66544: PUSH
66545: LD_VAR 0 2
66549: PUSH
66550: LD_INT 3
66552: PLUS
66553: PUSH
66554: LD_INT 5
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: PUSH
66562: LD_VAR 0 1
66566: PUSH
66567: LD_VAR 0 2
66571: PUSH
66572: LD_INT 4
66574: PLUS
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: ST_TO_ADDR
// end ; 1 :
66591: GO 67291
66593: LD_INT 1
66595: DOUBLE
66596: EQUAL
66597: IFTRUE 66601
66599: GO 66734
66601: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66602: LD_ADDR_VAR 0 5
66606: PUSH
66607: LD_VAR 0 1
66611: PUSH
66612: LD_VAR 0 2
66616: PUSH
66617: LD_INT 4
66619: MINUS
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: LIST
66628: PUSH
66629: LD_VAR 0 1
66633: PUSH
66634: LD_INT 3
66636: MINUS
66637: PUSH
66638: LD_VAR 0 2
66642: PUSH
66643: LD_INT 3
66645: MINUS
66646: PUSH
66647: LD_INT 2
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: PUSH
66655: LD_VAR 0 1
66659: PUSH
66660: LD_INT 4
66662: MINUS
66663: PUSH
66664: LD_VAR 0 2
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: PUSH
66677: LD_VAR 0 1
66681: PUSH
66682: LD_VAR 0 2
66686: PUSH
66687: LD_INT 3
66689: PLUS
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: LIST
66698: PUSH
66699: LD_VAR 0 1
66703: PUSH
66704: LD_INT 4
66706: PLUS
66707: PUSH
66708: LD_VAR 0 2
66712: PUSH
66713: LD_INT 4
66715: PLUS
66716: PUSH
66717: LD_INT 5
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: LIST
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: ST_TO_ADDR
// end ; 2 :
66732: GO 67291
66734: LD_INT 2
66736: DOUBLE
66737: EQUAL
66738: IFTRUE 66742
66740: GO 66871
66742: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66743: LD_ADDR_VAR 0 5
66747: PUSH
66748: LD_VAR 0 1
66752: PUSH
66753: LD_VAR 0 2
66757: PUSH
66758: LD_INT 3
66760: MINUS
66761: PUSH
66762: LD_INT 3
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: PUSH
66770: LD_VAR 0 1
66774: PUSH
66775: LD_INT 4
66777: PLUS
66778: PUSH
66779: LD_VAR 0 2
66783: PUSH
66784: LD_INT 4
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: PUSH
66792: LD_VAR 0 1
66796: PUSH
66797: LD_VAR 0 2
66801: PUSH
66802: LD_INT 4
66804: PLUS
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: PUSH
66814: LD_VAR 0 1
66818: PUSH
66819: LD_INT 3
66821: MINUS
66822: PUSH
66823: LD_VAR 0 2
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: LIST
66835: PUSH
66836: LD_VAR 0 1
66840: PUSH
66841: LD_INT 4
66843: MINUS
66844: PUSH
66845: LD_VAR 0 2
66849: PUSH
66850: LD_INT 4
66852: MINUS
66853: PUSH
66854: LD_INT 2
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: ST_TO_ADDR
// end ; 3 :
66869: GO 67291
66871: LD_INT 3
66873: DOUBLE
66874: EQUAL
66875: IFTRUE 66879
66877: GO 67012
66879: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66880: LD_ADDR_VAR 0 5
66884: PUSH
66885: LD_VAR 0 1
66889: PUSH
66890: LD_INT 3
66892: PLUS
66893: PUSH
66894: LD_VAR 0 2
66898: PUSH
66899: LD_INT 4
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: LIST
66906: PUSH
66907: LD_VAR 0 1
66911: PUSH
66912: LD_INT 4
66914: PLUS
66915: PUSH
66916: LD_VAR 0 2
66920: PUSH
66921: LD_INT 4
66923: PLUS
66924: PUSH
66925: LD_INT 5
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: LIST
66932: PUSH
66933: LD_VAR 0 1
66937: PUSH
66938: LD_INT 4
66940: MINUS
66941: PUSH
66942: LD_VAR 0 2
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: LIST
66954: PUSH
66955: LD_VAR 0 1
66959: PUSH
66960: LD_VAR 0 2
66964: PUSH
66965: LD_INT 4
66967: MINUS
66968: PUSH
66969: LD_INT 3
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: PUSH
66977: LD_VAR 0 1
66981: PUSH
66982: LD_INT 3
66984: MINUS
66985: PUSH
66986: LD_VAR 0 2
66990: PUSH
66991: LD_INT 3
66993: MINUS
66994: PUSH
66995: LD_INT 2
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: LIST
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// end ; 4 :
67010: GO 67291
67012: LD_INT 4
67014: DOUBLE
67015: EQUAL
67016: IFTRUE 67020
67018: GO 67153
67020: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67021: LD_ADDR_VAR 0 5
67025: PUSH
67026: LD_VAR 0 1
67030: PUSH
67031: LD_VAR 0 2
67035: PUSH
67036: LD_INT 4
67038: PLUS
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: PUSH
67048: LD_VAR 0 1
67052: PUSH
67053: LD_INT 3
67055: PLUS
67056: PUSH
67057: LD_VAR 0 2
67061: PUSH
67062: LD_INT 3
67064: PLUS
67065: PUSH
67066: LD_INT 5
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: PUSH
67074: LD_VAR 0 1
67078: PUSH
67079: LD_INT 4
67081: PLUS
67082: PUSH
67083: LD_VAR 0 2
67087: PUSH
67088: LD_INT 4
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: LIST
67095: PUSH
67096: LD_VAR 0 1
67100: PUSH
67101: LD_VAR 0 2
67105: PUSH
67106: LD_INT 3
67108: MINUS
67109: PUSH
67110: LD_INT 3
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: LIST
67117: PUSH
67118: LD_VAR 0 1
67122: PUSH
67123: LD_INT 4
67125: MINUS
67126: PUSH
67127: LD_VAR 0 2
67131: PUSH
67132: LD_INT 4
67134: MINUS
67135: PUSH
67136: LD_INT 2
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: ST_TO_ADDR
// end ; 5 :
67151: GO 67291
67153: LD_INT 5
67155: DOUBLE
67156: EQUAL
67157: IFTRUE 67161
67159: GO 67290
67161: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67162: LD_ADDR_VAR 0 5
67166: PUSH
67167: LD_VAR 0 1
67171: PUSH
67172: LD_INT 4
67174: MINUS
67175: PUSH
67176: LD_VAR 0 2
67180: PUSH
67181: LD_INT 1
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: LIST
67188: PUSH
67189: LD_VAR 0 1
67193: PUSH
67194: LD_VAR 0 2
67198: PUSH
67199: LD_INT 4
67201: MINUS
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: LIST
67210: PUSH
67211: LD_VAR 0 1
67215: PUSH
67216: LD_INT 4
67218: PLUS
67219: PUSH
67220: LD_VAR 0 2
67224: PUSH
67225: LD_INT 4
67227: PLUS
67228: PUSH
67229: LD_INT 5
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: LIST
67236: PUSH
67237: LD_VAR 0 1
67241: PUSH
67242: LD_INT 3
67244: PLUS
67245: PUSH
67246: LD_VAR 0 2
67250: PUSH
67251: LD_INT 4
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: LIST
67258: PUSH
67259: LD_VAR 0 1
67263: PUSH
67264: LD_VAR 0 2
67268: PUSH
67269: LD_INT 3
67271: PLUS
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: ST_TO_ADDR
// end ; end ;
67288: GO 67291
67290: POP
// result := list ;
67291: LD_ADDR_VAR 0 4
67295: PUSH
67296: LD_VAR 0 5
67300: ST_TO_ADDR
// end ;
67301: LD_VAR 0 4
67305: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67306: LD_INT 0
67308: PPUSH
67309: PPUSH
67310: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67311: LD_VAR 0 1
67315: NOT
67316: PUSH
67317: LD_VAR 0 2
67321: PUSH
67322: LD_INT 1
67324: PUSH
67325: LD_INT 2
67327: PUSH
67328: LD_INT 3
67330: PUSH
67331: LD_INT 4
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: IN
67340: NOT
67341: OR
67342: IFFALSE 67346
// exit ;
67344: GO 67429
// tmp := [ ] ;
67346: LD_ADDR_VAR 0 5
67350: PUSH
67351: EMPTY
67352: ST_TO_ADDR
// for i in units do
67353: LD_ADDR_VAR 0 4
67357: PUSH
67358: LD_VAR 0 1
67362: PUSH
67363: FOR_IN
67364: IFFALSE 67398
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67366: LD_ADDR_VAR 0 5
67370: PUSH
67371: LD_VAR 0 5
67375: PPUSH
67376: LD_VAR 0 4
67380: PPUSH
67381: LD_VAR 0 2
67385: PPUSH
67386: CALL_OW 259
67390: PPUSH
67391: CALL 68802 0 2
67395: ST_TO_ADDR
67396: GO 67363
67398: POP
67399: POP
// if not tmp then
67400: LD_VAR 0 5
67404: NOT
67405: IFFALSE 67409
// exit ;
67407: GO 67429
// result := SortListByListDesc ( units , tmp ) ;
67409: LD_ADDR_VAR 0 3
67413: PUSH
67414: LD_VAR 0 1
67418: PPUSH
67419: LD_VAR 0 5
67423: PPUSH
67424: CALL_OW 77
67428: ST_TO_ADDR
// end ;
67429: LD_VAR 0 3
67433: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67434: LD_INT 0
67436: PPUSH
67437: PPUSH
67438: PPUSH
// result := false ;
67439: LD_ADDR_VAR 0 3
67443: PUSH
67444: LD_INT 0
67446: ST_TO_ADDR
// if not building then
67447: LD_VAR 0 2
67451: NOT
67452: IFFALSE 67456
// exit ;
67454: GO 67594
// x := GetX ( building ) ;
67456: LD_ADDR_VAR 0 4
67460: PUSH
67461: LD_VAR 0 2
67465: PPUSH
67466: CALL_OW 250
67470: ST_TO_ADDR
// y := GetY ( building ) ;
67471: LD_ADDR_VAR 0 5
67475: PUSH
67476: LD_VAR 0 2
67480: PPUSH
67481: CALL_OW 251
67485: ST_TO_ADDR
// if not x or not y then
67486: LD_VAR 0 4
67490: NOT
67491: PUSH
67492: LD_VAR 0 5
67496: NOT
67497: OR
67498: IFFALSE 67502
// exit ;
67500: GO 67594
// if GetTaskList ( unit ) then
67502: LD_VAR 0 1
67506: PPUSH
67507: CALL_OW 437
67511: IFFALSE 67594
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67513: LD_STRING e
67515: PUSH
67516: LD_VAR 0 1
67520: PPUSH
67521: CALL_OW 437
67525: PUSH
67526: LD_INT 1
67528: ARRAY
67529: PUSH
67530: LD_INT 1
67532: ARRAY
67533: EQUAL
67534: PUSH
67535: LD_VAR 0 4
67539: PUSH
67540: LD_VAR 0 1
67544: PPUSH
67545: CALL_OW 437
67549: PUSH
67550: LD_INT 1
67552: ARRAY
67553: PUSH
67554: LD_INT 2
67556: ARRAY
67557: EQUAL
67558: AND
67559: PUSH
67560: LD_VAR 0 5
67564: PUSH
67565: LD_VAR 0 1
67569: PPUSH
67570: CALL_OW 437
67574: PUSH
67575: LD_INT 1
67577: ARRAY
67578: PUSH
67579: LD_INT 3
67581: ARRAY
67582: EQUAL
67583: AND
67584: IFFALSE 67594
// result := true end ;
67586: LD_ADDR_VAR 0 3
67590: PUSH
67591: LD_INT 1
67593: ST_TO_ADDR
// end ;
67594: LD_VAR 0 3
67598: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67599: LD_INT 0
67601: PPUSH
// result := false ;
67602: LD_ADDR_VAR 0 4
67606: PUSH
67607: LD_INT 0
67609: ST_TO_ADDR
// if GetTaskList ( unit ) then
67610: LD_VAR 0 1
67614: PPUSH
67615: CALL_OW 437
67619: IFFALSE 67702
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67621: LD_STRING M
67623: PUSH
67624: LD_VAR 0 1
67628: PPUSH
67629: CALL_OW 437
67633: PUSH
67634: LD_INT 1
67636: ARRAY
67637: PUSH
67638: LD_INT 1
67640: ARRAY
67641: EQUAL
67642: PUSH
67643: LD_VAR 0 2
67647: PUSH
67648: LD_VAR 0 1
67652: PPUSH
67653: CALL_OW 437
67657: PUSH
67658: LD_INT 1
67660: ARRAY
67661: PUSH
67662: LD_INT 2
67664: ARRAY
67665: EQUAL
67666: AND
67667: PUSH
67668: LD_VAR 0 3
67672: PUSH
67673: LD_VAR 0 1
67677: PPUSH
67678: CALL_OW 437
67682: PUSH
67683: LD_INT 1
67685: ARRAY
67686: PUSH
67687: LD_INT 3
67689: ARRAY
67690: EQUAL
67691: AND
67692: IFFALSE 67702
// result := true ;
67694: LD_ADDR_VAR 0 4
67698: PUSH
67699: LD_INT 1
67701: ST_TO_ADDR
// end ; end ;
67702: LD_VAR 0 4
67706: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67707: LD_INT 0
67709: PPUSH
67710: PPUSH
67711: PPUSH
67712: PPUSH
// if not unit or not area then
67713: LD_VAR 0 1
67717: NOT
67718: PUSH
67719: LD_VAR 0 2
67723: NOT
67724: OR
67725: IFFALSE 67729
// exit ;
67727: GO 67905
// tmp := AreaToList ( area , i ) ;
67729: LD_ADDR_VAR 0 6
67733: PUSH
67734: LD_VAR 0 2
67738: PPUSH
67739: LD_VAR 0 5
67743: PPUSH
67744: CALL_OW 517
67748: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67749: LD_ADDR_VAR 0 5
67753: PUSH
67754: DOUBLE
67755: LD_INT 1
67757: DEC
67758: ST_TO_ADDR
67759: LD_VAR 0 6
67763: PUSH
67764: LD_INT 1
67766: ARRAY
67767: PUSH
67768: FOR_TO
67769: IFFALSE 67903
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67771: LD_ADDR_VAR 0 7
67775: PUSH
67776: LD_VAR 0 6
67780: PUSH
67781: LD_INT 1
67783: ARRAY
67784: PUSH
67785: LD_VAR 0 5
67789: ARRAY
67790: PUSH
67791: LD_VAR 0 6
67795: PUSH
67796: LD_INT 2
67798: ARRAY
67799: PUSH
67800: LD_VAR 0 5
67804: ARRAY
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67810: LD_INT 92
67812: PUSH
67813: LD_VAR 0 7
67817: PUSH
67818: LD_INT 1
67820: ARRAY
67821: PUSH
67822: LD_VAR 0 7
67826: PUSH
67827: LD_INT 2
67829: ARRAY
67830: PUSH
67831: LD_INT 2
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: PPUSH
67840: CALL_OW 69
67844: PUSH
67845: LD_INT 0
67847: EQUAL
67848: IFFALSE 67901
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67850: LD_VAR 0 1
67854: PPUSH
67855: LD_VAR 0 7
67859: PUSH
67860: LD_INT 1
67862: ARRAY
67863: PPUSH
67864: LD_VAR 0 7
67868: PUSH
67869: LD_INT 2
67871: ARRAY
67872: PPUSH
67873: LD_VAR 0 3
67877: PPUSH
67878: CALL_OW 48
// result := IsPlaced ( unit ) ;
67882: LD_ADDR_VAR 0 4
67886: PUSH
67887: LD_VAR 0 1
67891: PPUSH
67892: CALL_OW 305
67896: ST_TO_ADDR
// exit ;
67897: POP
67898: POP
67899: GO 67905
// end ; end ;
67901: GO 67768
67903: POP
67904: POP
// end ;
67905: LD_VAR 0 4
67909: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67910: LD_INT 0
67912: PPUSH
67913: PPUSH
67914: PPUSH
// if not side or side > 8 then
67915: LD_VAR 0 1
67919: NOT
67920: PUSH
67921: LD_VAR 0 1
67925: PUSH
67926: LD_INT 8
67928: GREATER
67929: OR
67930: IFFALSE 67934
// exit ;
67932: GO 68121
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67934: LD_ADDR_VAR 0 4
67938: PUSH
67939: LD_INT 22
67941: PUSH
67942: LD_VAR 0 1
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 21
67953: PUSH
67954: LD_INT 3
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PPUSH
67965: CALL_OW 69
67969: ST_TO_ADDR
// if not tmp then
67970: LD_VAR 0 4
67974: NOT
67975: IFFALSE 67979
// exit ;
67977: GO 68121
// enable_addtolog := true ;
67979: LD_ADDR_OWVAR 81
67983: PUSH
67984: LD_INT 1
67986: ST_TO_ADDR
// AddToLog ( [ ) ;
67987: LD_STRING [
67989: PPUSH
67990: CALL_OW 561
// for i in tmp do
67994: LD_ADDR_VAR 0 3
67998: PUSH
67999: LD_VAR 0 4
68003: PUSH
68004: FOR_IN
68005: IFFALSE 68112
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68007: LD_STRING [
68009: PUSH
68010: LD_VAR 0 3
68014: PPUSH
68015: CALL_OW 266
68019: STR
68020: PUSH
68021: LD_STRING , 
68023: STR
68024: PUSH
68025: LD_VAR 0 3
68029: PPUSH
68030: CALL_OW 250
68034: STR
68035: PUSH
68036: LD_STRING , 
68038: STR
68039: PUSH
68040: LD_VAR 0 3
68044: PPUSH
68045: CALL_OW 251
68049: STR
68050: PUSH
68051: LD_STRING , 
68053: STR
68054: PUSH
68055: LD_VAR 0 3
68059: PPUSH
68060: CALL_OW 254
68064: STR
68065: PUSH
68066: LD_STRING , 
68068: STR
68069: PUSH
68070: LD_VAR 0 3
68074: PPUSH
68075: LD_INT 1
68077: PPUSH
68078: CALL_OW 268
68082: STR
68083: PUSH
68084: LD_STRING , 
68086: STR
68087: PUSH
68088: LD_VAR 0 3
68092: PPUSH
68093: LD_INT 2
68095: PPUSH
68096: CALL_OW 268
68100: STR
68101: PUSH
68102: LD_STRING ],
68104: STR
68105: PPUSH
68106: CALL_OW 561
// end ;
68110: GO 68004
68112: POP
68113: POP
// AddToLog ( ]; ) ;
68114: LD_STRING ];
68116: PPUSH
68117: CALL_OW 561
// end ;
68121: LD_VAR 0 2
68125: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68126: LD_INT 0
68128: PPUSH
68129: PPUSH
68130: PPUSH
68131: PPUSH
68132: PPUSH
// if not area or not rate or not max then
68133: LD_VAR 0 1
68137: NOT
68138: PUSH
68139: LD_VAR 0 2
68143: NOT
68144: OR
68145: PUSH
68146: LD_VAR 0 4
68150: NOT
68151: OR
68152: IFFALSE 68156
// exit ;
68154: GO 68345
// while 1 do
68156: LD_INT 1
68158: IFFALSE 68345
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68160: LD_ADDR_VAR 0 9
68164: PUSH
68165: LD_VAR 0 1
68169: PPUSH
68170: LD_INT 1
68172: PPUSH
68173: CALL_OW 287
68177: PUSH
68178: LD_INT 10
68180: MUL
68181: ST_TO_ADDR
// r := rate / 10 ;
68182: LD_ADDR_VAR 0 7
68186: PUSH
68187: LD_VAR 0 2
68191: PUSH
68192: LD_INT 10
68194: DIVREAL
68195: ST_TO_ADDR
// time := 1 1$00 ;
68196: LD_ADDR_VAR 0 8
68200: PUSH
68201: LD_INT 2100
68203: ST_TO_ADDR
// if amount < min then
68204: LD_VAR 0 9
68208: PUSH
68209: LD_VAR 0 3
68213: LESS
68214: IFFALSE 68232
// r := r * 2 else
68216: LD_ADDR_VAR 0 7
68220: PUSH
68221: LD_VAR 0 7
68225: PUSH
68226: LD_INT 2
68228: MUL
68229: ST_TO_ADDR
68230: GO 68258
// if amount > max then
68232: LD_VAR 0 9
68236: PUSH
68237: LD_VAR 0 4
68241: GREATER
68242: IFFALSE 68258
// r := r / 2 ;
68244: LD_ADDR_VAR 0 7
68248: PUSH
68249: LD_VAR 0 7
68253: PUSH
68254: LD_INT 2
68256: DIVREAL
68257: ST_TO_ADDR
// time := time / r ;
68258: LD_ADDR_VAR 0 8
68262: PUSH
68263: LD_VAR 0 8
68267: PUSH
68268: LD_VAR 0 7
68272: DIVREAL
68273: ST_TO_ADDR
// if time < 0 then
68274: LD_VAR 0 8
68278: PUSH
68279: LD_INT 0
68281: LESS
68282: IFFALSE 68299
// time := time * - 1 ;
68284: LD_ADDR_VAR 0 8
68288: PUSH
68289: LD_VAR 0 8
68293: PUSH
68294: LD_INT 1
68296: NEG
68297: MUL
68298: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68299: LD_VAR 0 8
68303: PUSH
68304: LD_INT 35
68306: PPUSH
68307: LD_INT 875
68309: PPUSH
68310: CALL_OW 12
68314: PLUS
68315: PPUSH
68316: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68320: LD_INT 1
68322: PPUSH
68323: LD_INT 5
68325: PPUSH
68326: CALL_OW 12
68330: PPUSH
68331: LD_VAR 0 1
68335: PPUSH
68336: LD_INT 1
68338: PPUSH
68339: CALL_OW 55
// end ;
68343: GO 68156
// end ;
68345: LD_VAR 0 5
68349: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68350: LD_INT 0
68352: PPUSH
68353: PPUSH
68354: PPUSH
68355: PPUSH
68356: PPUSH
68357: PPUSH
68358: PPUSH
68359: PPUSH
// if not turrets or not factories then
68360: LD_VAR 0 1
68364: NOT
68365: PUSH
68366: LD_VAR 0 2
68370: NOT
68371: OR
68372: IFFALSE 68376
// exit ;
68374: GO 68683
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68376: LD_ADDR_VAR 0 10
68380: PUSH
68381: LD_INT 5
68383: PUSH
68384: LD_INT 6
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 2
68393: PUSH
68394: LD_INT 4
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 3
68403: PUSH
68404: LD_INT 5
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 24
68418: PUSH
68419: LD_INT 25
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 23
68428: PUSH
68429: LD_INT 27
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 42
68442: PUSH
68443: LD_INT 43
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 44
68452: PUSH
68453: LD_INT 46
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 45
68462: PUSH
68463: LD_INT 47
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: LIST
68479: ST_TO_ADDR
// result := [ ] ;
68480: LD_ADDR_VAR 0 3
68484: PUSH
68485: EMPTY
68486: ST_TO_ADDR
// for i in turrets do
68487: LD_ADDR_VAR 0 4
68491: PUSH
68492: LD_VAR 0 1
68496: PUSH
68497: FOR_IN
68498: IFFALSE 68681
// begin nat := GetNation ( i ) ;
68500: LD_ADDR_VAR 0 7
68504: PUSH
68505: LD_VAR 0 4
68509: PPUSH
68510: CALL_OW 248
68514: ST_TO_ADDR
// weapon := 0 ;
68515: LD_ADDR_VAR 0 8
68519: PUSH
68520: LD_INT 0
68522: ST_TO_ADDR
// if not nat then
68523: LD_VAR 0 7
68527: NOT
68528: IFFALSE 68532
// continue ;
68530: GO 68497
// for j in list [ nat ] do
68532: LD_ADDR_VAR 0 5
68536: PUSH
68537: LD_VAR 0 10
68541: PUSH
68542: LD_VAR 0 7
68546: ARRAY
68547: PUSH
68548: FOR_IN
68549: IFFALSE 68590
// if GetBWeapon ( i ) = j [ 1 ] then
68551: LD_VAR 0 4
68555: PPUSH
68556: CALL_OW 269
68560: PUSH
68561: LD_VAR 0 5
68565: PUSH
68566: LD_INT 1
68568: ARRAY
68569: EQUAL
68570: IFFALSE 68588
// begin weapon := j [ 2 ] ;
68572: LD_ADDR_VAR 0 8
68576: PUSH
68577: LD_VAR 0 5
68581: PUSH
68582: LD_INT 2
68584: ARRAY
68585: ST_TO_ADDR
// break ;
68586: GO 68590
// end ;
68588: GO 68548
68590: POP
68591: POP
// if not weapon then
68592: LD_VAR 0 8
68596: NOT
68597: IFFALSE 68601
// continue ;
68599: GO 68497
// for k in factories do
68601: LD_ADDR_VAR 0 6
68605: PUSH
68606: LD_VAR 0 2
68610: PUSH
68611: FOR_IN
68612: IFFALSE 68677
// begin weapons := AvailableWeaponList ( k ) ;
68614: LD_ADDR_VAR 0 9
68618: PUSH
68619: LD_VAR 0 6
68623: PPUSH
68624: CALL_OW 478
68628: ST_TO_ADDR
// if not weapons then
68629: LD_VAR 0 9
68633: NOT
68634: IFFALSE 68638
// continue ;
68636: GO 68611
// if weapon in weapons then
68638: LD_VAR 0 8
68642: PUSH
68643: LD_VAR 0 9
68647: IN
68648: IFFALSE 68675
// begin result := [ i , weapon ] ;
68650: LD_ADDR_VAR 0 3
68654: PUSH
68655: LD_VAR 0 4
68659: PUSH
68660: LD_VAR 0 8
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: ST_TO_ADDR
// exit ;
68669: POP
68670: POP
68671: POP
68672: POP
68673: GO 68683
// end ; end ;
68675: GO 68611
68677: POP
68678: POP
// end ;
68679: GO 68497
68681: POP
68682: POP
// end ;
68683: LD_VAR 0 3
68687: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68688: LD_INT 0
68690: PPUSH
// if not side or side > 8 then
68691: LD_VAR 0 3
68695: NOT
68696: PUSH
68697: LD_VAR 0 3
68701: PUSH
68702: LD_INT 8
68704: GREATER
68705: OR
68706: IFFALSE 68710
// exit ;
68708: GO 68769
// if not range then
68710: LD_VAR 0 4
68714: NOT
68715: IFFALSE 68726
// range := - 12 ;
68717: LD_ADDR_VAR 0 4
68721: PUSH
68722: LD_INT 12
68724: NEG
68725: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68726: LD_VAR 0 1
68730: PPUSH
68731: LD_VAR 0 2
68735: PPUSH
68736: LD_VAR 0 3
68740: PPUSH
68741: LD_VAR 0 4
68745: PPUSH
68746: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68750: LD_VAR 0 1
68754: PPUSH
68755: LD_VAR 0 2
68759: PPUSH
68760: LD_VAR 0 3
68764: PPUSH
68765: CALL_OW 331
// end ;
68769: LD_VAR 0 5
68773: RET
// export function Video ( mode ) ; begin
68774: LD_INT 0
68776: PPUSH
// ingame_video = mode ;
68777: LD_ADDR_OWVAR 52
68781: PUSH
68782: LD_VAR 0 1
68786: ST_TO_ADDR
// interface_hidden = mode ;
68787: LD_ADDR_OWVAR 54
68791: PUSH
68792: LD_VAR 0 1
68796: ST_TO_ADDR
// end ;
68797: LD_VAR 0 2
68801: RET
// export function Join ( array , element ) ; begin
68802: LD_INT 0
68804: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68805: LD_ADDR_VAR 0 3
68809: PUSH
68810: LD_VAR 0 1
68814: PPUSH
68815: LD_VAR 0 1
68819: PUSH
68820: LD_INT 1
68822: PLUS
68823: PPUSH
68824: LD_VAR 0 2
68828: PPUSH
68829: CALL_OW 1
68833: ST_TO_ADDR
// end ;
68834: LD_VAR 0 3
68838: RET
// export function JoinUnion ( array , element ) ; begin
68839: LD_INT 0
68841: PPUSH
// result := array union element ;
68842: LD_ADDR_VAR 0 3
68846: PUSH
68847: LD_VAR 0 1
68851: PUSH
68852: LD_VAR 0 2
68856: UNION
68857: ST_TO_ADDR
// end ;
68858: LD_VAR 0 3
68862: RET
// export function GetBehemoths ( side ) ; begin
68863: LD_INT 0
68865: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68866: LD_ADDR_VAR 0 2
68870: PUSH
68871: LD_INT 22
68873: PUSH
68874: LD_VAR 0 1
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 31
68885: PUSH
68886: LD_INT 25
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PPUSH
68897: CALL_OW 69
68901: ST_TO_ADDR
// end ;
68902: LD_VAR 0 2
68906: RET
// export function Shuffle ( array ) ; var i , index ; begin
68907: LD_INT 0
68909: PPUSH
68910: PPUSH
68911: PPUSH
// result := [ ] ;
68912: LD_ADDR_VAR 0 2
68916: PUSH
68917: EMPTY
68918: ST_TO_ADDR
// if not array then
68919: LD_VAR 0 1
68923: NOT
68924: IFFALSE 68928
// exit ;
68926: GO 69027
// Randomize ;
68928: CALL_OW 10
// for i = array downto 1 do
68932: LD_ADDR_VAR 0 3
68936: PUSH
68937: DOUBLE
68938: LD_VAR 0 1
68942: INC
68943: ST_TO_ADDR
68944: LD_INT 1
68946: PUSH
68947: FOR_DOWNTO
68948: IFFALSE 69025
// begin index := rand ( 1 , array ) ;
68950: LD_ADDR_VAR 0 4
68954: PUSH
68955: LD_INT 1
68957: PPUSH
68958: LD_VAR 0 1
68962: PPUSH
68963: CALL_OW 12
68967: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68968: LD_ADDR_VAR 0 2
68972: PUSH
68973: LD_VAR 0 2
68977: PPUSH
68978: LD_VAR 0 2
68982: PUSH
68983: LD_INT 1
68985: PLUS
68986: PPUSH
68987: LD_VAR 0 1
68991: PUSH
68992: LD_VAR 0 4
68996: ARRAY
68997: PPUSH
68998: CALL_OW 2
69002: ST_TO_ADDR
// array := Delete ( array , index ) ;
69003: LD_ADDR_VAR 0 1
69007: PUSH
69008: LD_VAR 0 1
69012: PPUSH
69013: LD_VAR 0 4
69017: PPUSH
69018: CALL_OW 3
69022: ST_TO_ADDR
// end ;
69023: GO 68947
69025: POP
69026: POP
// end ;
69027: LD_VAR 0 2
69031: RET
// export function GetBaseMaterials ( base ) ; begin
69032: LD_INT 0
69034: PPUSH
// result := [ 0 , 0 , 0 ] ;
69035: LD_ADDR_VAR 0 2
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: LD_INT 0
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: LIST
69053: ST_TO_ADDR
// if not base then
69054: LD_VAR 0 1
69058: NOT
69059: IFFALSE 69063
// exit ;
69061: GO 69112
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69063: LD_ADDR_VAR 0 2
69067: PUSH
69068: LD_VAR 0 1
69072: PPUSH
69073: LD_INT 1
69075: PPUSH
69076: CALL_OW 275
69080: PUSH
69081: LD_VAR 0 1
69085: PPUSH
69086: LD_INT 2
69088: PPUSH
69089: CALL_OW 275
69093: PUSH
69094: LD_VAR 0 1
69098: PPUSH
69099: LD_INT 3
69101: PPUSH
69102: CALL_OW 275
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: LIST
69111: ST_TO_ADDR
// end ;
69112: LD_VAR 0 2
69116: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69117: LD_INT 0
69119: PPUSH
69120: PPUSH
// result := array ;
69121: LD_ADDR_VAR 0 3
69125: PUSH
69126: LD_VAR 0 1
69130: ST_TO_ADDR
// if size >= result then
69131: LD_VAR 0 2
69135: PUSH
69136: LD_VAR 0 3
69140: GREATEREQUAL
69141: IFFALSE 69145
// exit ;
69143: GO 69195
// if size then
69145: LD_VAR 0 2
69149: IFFALSE 69195
// for i := array downto size do
69151: LD_ADDR_VAR 0 4
69155: PUSH
69156: DOUBLE
69157: LD_VAR 0 1
69161: INC
69162: ST_TO_ADDR
69163: LD_VAR 0 2
69167: PUSH
69168: FOR_DOWNTO
69169: IFFALSE 69193
// result := Delete ( result , result ) ;
69171: LD_ADDR_VAR 0 3
69175: PUSH
69176: LD_VAR 0 3
69180: PPUSH
69181: LD_VAR 0 3
69185: PPUSH
69186: CALL_OW 3
69190: ST_TO_ADDR
69191: GO 69168
69193: POP
69194: POP
// end ;
69195: LD_VAR 0 3
69199: RET
// export function ComExit ( unit ) ; var tmp ; begin
69200: LD_INT 0
69202: PPUSH
69203: PPUSH
// if not IsInUnit ( unit ) then
69204: LD_VAR 0 1
69208: PPUSH
69209: CALL_OW 310
69213: NOT
69214: IFFALSE 69218
// exit ;
69216: GO 69278
// tmp := IsInUnit ( unit ) ;
69218: LD_ADDR_VAR 0 3
69222: PUSH
69223: LD_VAR 0 1
69227: PPUSH
69228: CALL_OW 310
69232: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69233: LD_VAR 0 3
69237: PPUSH
69238: CALL_OW 247
69242: PUSH
69243: LD_INT 2
69245: EQUAL
69246: IFFALSE 69259
// ComExitVehicle ( unit ) else
69248: LD_VAR 0 1
69252: PPUSH
69253: CALL_OW 121
69257: GO 69268
// ComExitBuilding ( unit ) ;
69259: LD_VAR 0 1
69263: PPUSH
69264: CALL_OW 122
// result := tmp ;
69268: LD_ADDR_VAR 0 2
69272: PUSH
69273: LD_VAR 0 3
69277: ST_TO_ADDR
// end ;
69278: LD_VAR 0 2
69282: RET
// export function ComExitAll ( units ) ; var i ; begin
69283: LD_INT 0
69285: PPUSH
69286: PPUSH
// if not units then
69287: LD_VAR 0 1
69291: NOT
69292: IFFALSE 69296
// exit ;
69294: GO 69322
// for i in units do
69296: LD_ADDR_VAR 0 3
69300: PUSH
69301: LD_VAR 0 1
69305: PUSH
69306: FOR_IN
69307: IFFALSE 69320
// ComExit ( i ) ;
69309: LD_VAR 0 3
69313: PPUSH
69314: CALL 69200 0 1
69318: GO 69306
69320: POP
69321: POP
// end ;
69322: LD_VAR 0 2
69326: RET
// export function ResetHc ; begin
69327: LD_INT 0
69329: PPUSH
// InitHc ;
69330: CALL_OW 19
// hc_importance := 0 ;
69334: LD_ADDR_OWVAR 32
69338: PUSH
69339: LD_INT 0
69341: ST_TO_ADDR
// end ;
69342: LD_VAR 0 1
69346: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69347: LD_INT 0
69349: PPUSH
69350: PPUSH
69351: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69352: LD_ADDR_VAR 0 6
69356: PUSH
69357: LD_VAR 0 1
69361: PUSH
69362: LD_VAR 0 3
69366: PLUS
69367: PUSH
69368: LD_INT 2
69370: DIV
69371: ST_TO_ADDR
// if _x < 0 then
69372: LD_VAR 0 6
69376: PUSH
69377: LD_INT 0
69379: LESS
69380: IFFALSE 69397
// _x := _x * - 1 ;
69382: LD_ADDR_VAR 0 6
69386: PUSH
69387: LD_VAR 0 6
69391: PUSH
69392: LD_INT 1
69394: NEG
69395: MUL
69396: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69397: LD_ADDR_VAR 0 7
69401: PUSH
69402: LD_VAR 0 2
69406: PUSH
69407: LD_VAR 0 4
69411: PLUS
69412: PUSH
69413: LD_INT 2
69415: DIV
69416: ST_TO_ADDR
// if _y < 0 then
69417: LD_VAR 0 7
69421: PUSH
69422: LD_INT 0
69424: LESS
69425: IFFALSE 69442
// _y := _y * - 1 ;
69427: LD_ADDR_VAR 0 7
69431: PUSH
69432: LD_VAR 0 7
69436: PUSH
69437: LD_INT 1
69439: NEG
69440: MUL
69441: ST_TO_ADDR
// result := [ _x , _y ] ;
69442: LD_ADDR_VAR 0 5
69446: PUSH
69447: LD_VAR 0 6
69451: PUSH
69452: LD_VAR 0 7
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: ST_TO_ADDR
// end ;
69461: LD_VAR 0 5
69465: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69466: LD_INT 0
69468: PPUSH
69469: PPUSH
69470: PPUSH
69471: PPUSH
// task := GetTaskList ( unit ) ;
69472: LD_ADDR_VAR 0 7
69476: PUSH
69477: LD_VAR 0 1
69481: PPUSH
69482: CALL_OW 437
69486: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69487: LD_VAR 0 7
69491: NOT
69492: PUSH
69493: LD_VAR 0 1
69497: PPUSH
69498: LD_VAR 0 2
69502: PPUSH
69503: CALL_OW 308
69507: NOT
69508: AND
69509: IFFALSE 69513
// exit ;
69511: GO 69631
// if IsInArea ( unit , area ) then
69513: LD_VAR 0 1
69517: PPUSH
69518: LD_VAR 0 2
69522: PPUSH
69523: CALL_OW 308
69527: IFFALSE 69545
// begin ComMoveToArea ( unit , goAway ) ;
69529: LD_VAR 0 1
69533: PPUSH
69534: LD_VAR 0 3
69538: PPUSH
69539: CALL_OW 113
// exit ;
69543: GO 69631
// end ; if task [ 1 ] [ 1 ] <> M then
69545: LD_VAR 0 7
69549: PUSH
69550: LD_INT 1
69552: ARRAY
69553: PUSH
69554: LD_INT 1
69556: ARRAY
69557: PUSH
69558: LD_STRING M
69560: NONEQUAL
69561: IFFALSE 69565
// exit ;
69563: GO 69631
// x := task [ 1 ] [ 2 ] ;
69565: LD_ADDR_VAR 0 5
69569: PUSH
69570: LD_VAR 0 7
69574: PUSH
69575: LD_INT 1
69577: ARRAY
69578: PUSH
69579: LD_INT 2
69581: ARRAY
69582: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69583: LD_ADDR_VAR 0 6
69587: PUSH
69588: LD_VAR 0 7
69592: PUSH
69593: LD_INT 1
69595: ARRAY
69596: PUSH
69597: LD_INT 3
69599: ARRAY
69600: ST_TO_ADDR
// if InArea ( x , y , area ) then
69601: LD_VAR 0 5
69605: PPUSH
69606: LD_VAR 0 6
69610: PPUSH
69611: LD_VAR 0 2
69615: PPUSH
69616: CALL_OW 309
69620: IFFALSE 69631
// ComStop ( unit ) ;
69622: LD_VAR 0 1
69626: PPUSH
69627: CALL_OW 141
// end ;
69631: LD_VAR 0 4
69635: RET
// export function Abs ( value ) ; begin
69636: LD_INT 0
69638: PPUSH
// result := value ;
69639: LD_ADDR_VAR 0 2
69643: PUSH
69644: LD_VAR 0 1
69648: ST_TO_ADDR
// if value < 0 then
69649: LD_VAR 0 1
69653: PUSH
69654: LD_INT 0
69656: LESS
69657: IFFALSE 69674
// result := value * - 1 ;
69659: LD_ADDR_VAR 0 2
69663: PUSH
69664: LD_VAR 0 1
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: MUL
69673: ST_TO_ADDR
// end ;
69674: LD_VAR 0 2
69678: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69679: LD_INT 0
69681: PPUSH
69682: PPUSH
69683: PPUSH
69684: PPUSH
69685: PPUSH
69686: PPUSH
69687: PPUSH
69688: PPUSH
// if not unit or not building then
69689: LD_VAR 0 1
69693: NOT
69694: PUSH
69695: LD_VAR 0 2
69699: NOT
69700: OR
69701: IFFALSE 69705
// exit ;
69703: GO 69931
// x := GetX ( building ) ;
69705: LD_ADDR_VAR 0 4
69709: PUSH
69710: LD_VAR 0 2
69714: PPUSH
69715: CALL_OW 250
69719: ST_TO_ADDR
// y := GetY ( building ) ;
69720: LD_ADDR_VAR 0 6
69724: PUSH
69725: LD_VAR 0 2
69729: PPUSH
69730: CALL_OW 251
69734: ST_TO_ADDR
// d := GetDir ( building ) ;
69735: LD_ADDR_VAR 0 8
69739: PUSH
69740: LD_VAR 0 2
69744: PPUSH
69745: CALL_OW 254
69749: ST_TO_ADDR
// r := 4 ;
69750: LD_ADDR_VAR 0 9
69754: PUSH
69755: LD_INT 4
69757: ST_TO_ADDR
// for i := 1 to 5 do
69758: LD_ADDR_VAR 0 10
69762: PUSH
69763: DOUBLE
69764: LD_INT 1
69766: DEC
69767: ST_TO_ADDR
69768: LD_INT 5
69770: PUSH
69771: FOR_TO
69772: IFFALSE 69929
// begin _x := ShiftX ( x , d , r + i ) ;
69774: LD_ADDR_VAR 0 5
69778: PUSH
69779: LD_VAR 0 4
69783: PPUSH
69784: LD_VAR 0 8
69788: PPUSH
69789: LD_VAR 0 9
69793: PUSH
69794: LD_VAR 0 10
69798: PLUS
69799: PPUSH
69800: CALL_OW 272
69804: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69805: LD_ADDR_VAR 0 7
69809: PUSH
69810: LD_VAR 0 6
69814: PPUSH
69815: LD_VAR 0 8
69819: PPUSH
69820: LD_VAR 0 9
69824: PUSH
69825: LD_VAR 0 10
69829: PLUS
69830: PPUSH
69831: CALL_OW 273
69835: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69836: LD_VAR 0 5
69840: PPUSH
69841: LD_VAR 0 7
69845: PPUSH
69846: CALL_OW 488
69850: PUSH
69851: LD_VAR 0 5
69855: PPUSH
69856: LD_VAR 0 7
69860: PPUSH
69861: CALL_OW 428
69865: PPUSH
69866: CALL_OW 247
69870: PUSH
69871: LD_INT 3
69873: PUSH
69874: LD_INT 2
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: IN
69881: NOT
69882: AND
69883: IFFALSE 69927
// begin ComMoveXY ( unit , _x , _y ) ;
69885: LD_VAR 0 1
69889: PPUSH
69890: LD_VAR 0 5
69894: PPUSH
69895: LD_VAR 0 7
69899: PPUSH
69900: CALL_OW 111
// result := [ _x , _y ] ;
69904: LD_ADDR_VAR 0 3
69908: PUSH
69909: LD_VAR 0 5
69913: PUSH
69914: LD_VAR 0 7
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: ST_TO_ADDR
// exit ;
69923: POP
69924: POP
69925: GO 69931
// end ; end ;
69927: GO 69771
69929: POP
69930: POP
// end ;
69931: LD_VAR 0 3
69935: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69936: LD_INT 0
69938: PPUSH
69939: PPUSH
69940: PPUSH
// result := 0 ;
69941: LD_ADDR_VAR 0 3
69945: PUSH
69946: LD_INT 0
69948: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69949: LD_VAR 0 1
69953: PUSH
69954: LD_INT 0
69956: LESS
69957: PUSH
69958: LD_VAR 0 1
69962: PUSH
69963: LD_INT 8
69965: GREATER
69966: OR
69967: PUSH
69968: LD_VAR 0 2
69972: PUSH
69973: LD_INT 0
69975: LESS
69976: OR
69977: PUSH
69978: LD_VAR 0 2
69982: PUSH
69983: LD_INT 8
69985: GREATER
69986: OR
69987: IFFALSE 69991
// exit ;
69989: GO 70066
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69991: LD_ADDR_VAR 0 4
69995: PUSH
69996: LD_INT 22
69998: PUSH
69999: LD_VAR 0 2
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PPUSH
70008: CALL_OW 69
70012: PUSH
70013: FOR_IN
70014: IFFALSE 70064
// begin un := UnitShoot ( i ) ;
70016: LD_ADDR_VAR 0 5
70020: PUSH
70021: LD_VAR 0 4
70025: PPUSH
70026: CALL_OW 504
70030: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70031: LD_VAR 0 5
70035: PPUSH
70036: CALL_OW 255
70040: PUSH
70041: LD_VAR 0 1
70045: EQUAL
70046: IFFALSE 70062
// begin result := un ;
70048: LD_ADDR_VAR 0 3
70052: PUSH
70053: LD_VAR 0 5
70057: ST_TO_ADDR
// exit ;
70058: POP
70059: POP
70060: GO 70066
// end ; end ;
70062: GO 70013
70064: POP
70065: POP
// end ;
70066: LD_VAR 0 3
70070: RET
// export function GetCargoBay ( units ) ; begin
70071: LD_INT 0
70073: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70074: LD_ADDR_VAR 0 2
70078: PUSH
70079: LD_VAR 0 1
70083: PPUSH
70084: LD_INT 2
70086: PUSH
70087: LD_INT 34
70089: PUSH
70090: LD_INT 12
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 34
70099: PUSH
70100: LD_INT 51
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 34
70109: PUSH
70110: LD_INT 32
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 34
70119: PUSH
70120: LD_INT 89
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: PPUSH
70134: CALL_OW 72
70138: ST_TO_ADDR
// end ;
70139: LD_VAR 0 2
70143: RET
// export function Negate ( value ) ; begin
70144: LD_INT 0
70146: PPUSH
// result := not value ;
70147: LD_ADDR_VAR 0 2
70151: PUSH
70152: LD_VAR 0 1
70156: NOT
70157: ST_TO_ADDR
// end ;
70158: LD_VAR 0 2
70162: RET
// export function Inc ( value ) ; begin
70163: LD_INT 0
70165: PPUSH
// result := value + 1 ;
70166: LD_ADDR_VAR 0 2
70170: PUSH
70171: LD_VAR 0 1
70175: PUSH
70176: LD_INT 1
70178: PLUS
70179: ST_TO_ADDR
// end ;
70180: LD_VAR 0 2
70184: RET
// export function Dec ( value ) ; begin
70185: LD_INT 0
70187: PPUSH
// result := value - 1 ;
70188: LD_ADDR_VAR 0 2
70192: PUSH
70193: LD_VAR 0 1
70197: PUSH
70198: LD_INT 1
70200: MINUS
70201: ST_TO_ADDR
// end ;
70202: LD_VAR 0 2
70206: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70207: LD_INT 0
70209: PPUSH
70210: PPUSH
70211: PPUSH
70212: PPUSH
70213: PPUSH
70214: PPUSH
70215: PPUSH
70216: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70217: LD_VAR 0 1
70221: PPUSH
70222: LD_VAR 0 2
70226: PPUSH
70227: CALL_OW 488
70231: NOT
70232: PUSH
70233: LD_VAR 0 3
70237: PPUSH
70238: LD_VAR 0 4
70242: PPUSH
70243: CALL_OW 488
70247: NOT
70248: OR
70249: IFFALSE 70262
// begin result := - 1 ;
70251: LD_ADDR_VAR 0 5
70255: PUSH
70256: LD_INT 1
70258: NEG
70259: ST_TO_ADDR
// exit ;
70260: GO 70497
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70262: LD_ADDR_VAR 0 12
70266: PUSH
70267: LD_VAR 0 1
70271: PPUSH
70272: LD_VAR 0 2
70276: PPUSH
70277: LD_VAR 0 3
70281: PPUSH
70282: LD_VAR 0 4
70286: PPUSH
70287: CALL 69347 0 4
70291: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70292: LD_ADDR_VAR 0 11
70296: PUSH
70297: LD_VAR 0 1
70301: PPUSH
70302: LD_VAR 0 2
70306: PPUSH
70307: LD_VAR 0 12
70311: PUSH
70312: LD_INT 1
70314: ARRAY
70315: PPUSH
70316: LD_VAR 0 12
70320: PUSH
70321: LD_INT 2
70323: ARRAY
70324: PPUSH
70325: CALL_OW 298
70329: ST_TO_ADDR
// distance := 9999 ;
70330: LD_ADDR_VAR 0 10
70334: PUSH
70335: LD_INT 9999
70337: ST_TO_ADDR
// for i := 0 to 5 do
70338: LD_ADDR_VAR 0 6
70342: PUSH
70343: DOUBLE
70344: LD_INT 0
70346: DEC
70347: ST_TO_ADDR
70348: LD_INT 5
70350: PUSH
70351: FOR_TO
70352: IFFALSE 70495
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70354: LD_ADDR_VAR 0 7
70358: PUSH
70359: LD_VAR 0 1
70363: PPUSH
70364: LD_VAR 0 6
70368: PPUSH
70369: LD_VAR 0 11
70373: PPUSH
70374: CALL_OW 272
70378: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70379: LD_ADDR_VAR 0 8
70383: PUSH
70384: LD_VAR 0 2
70388: PPUSH
70389: LD_VAR 0 6
70393: PPUSH
70394: LD_VAR 0 11
70398: PPUSH
70399: CALL_OW 273
70403: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70404: LD_VAR 0 7
70408: PPUSH
70409: LD_VAR 0 8
70413: PPUSH
70414: CALL_OW 488
70418: NOT
70419: IFFALSE 70423
// continue ;
70421: GO 70351
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70423: LD_ADDR_VAR 0 9
70427: PUSH
70428: LD_VAR 0 12
70432: PUSH
70433: LD_INT 1
70435: ARRAY
70436: PPUSH
70437: LD_VAR 0 12
70441: PUSH
70442: LD_INT 2
70444: ARRAY
70445: PPUSH
70446: LD_VAR 0 7
70450: PPUSH
70451: LD_VAR 0 8
70455: PPUSH
70456: CALL_OW 298
70460: ST_TO_ADDR
// if tmp < distance then
70461: LD_VAR 0 9
70465: PUSH
70466: LD_VAR 0 10
70470: LESS
70471: IFFALSE 70493
// begin result := i ;
70473: LD_ADDR_VAR 0 5
70477: PUSH
70478: LD_VAR 0 6
70482: ST_TO_ADDR
// distance := tmp ;
70483: LD_ADDR_VAR 0 10
70487: PUSH
70488: LD_VAR 0 9
70492: ST_TO_ADDR
// end ; end ;
70493: GO 70351
70495: POP
70496: POP
// end ;
70497: LD_VAR 0 5
70501: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70502: LD_INT 0
70504: PPUSH
70505: PPUSH
// if not driver or not IsInUnit ( driver ) then
70506: LD_VAR 0 1
70510: NOT
70511: PUSH
70512: LD_VAR 0 1
70516: PPUSH
70517: CALL_OW 310
70521: NOT
70522: OR
70523: IFFALSE 70527
// exit ;
70525: GO 70617
// vehicle := IsInUnit ( driver ) ;
70527: LD_ADDR_VAR 0 3
70531: PUSH
70532: LD_VAR 0 1
70536: PPUSH
70537: CALL_OW 310
70541: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70542: LD_VAR 0 1
70546: PPUSH
70547: LD_STRING \
70549: PUSH
70550: LD_INT 0
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: LD_INT 0
70558: PUSH
70559: LD_INT 0
70561: PUSH
70562: LD_INT 0
70564: PUSH
70565: LD_INT 0
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: PUSH
70577: LD_STRING E
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: LD_VAR 0 3
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: LD_INT 0
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PPUSH
70613: CALL_OW 446
// end ;
70617: LD_VAR 0 2
70621: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70622: LD_INT 0
70624: PPUSH
70625: PPUSH
// if not driver or not IsInUnit ( driver ) then
70626: LD_VAR 0 1
70630: NOT
70631: PUSH
70632: LD_VAR 0 1
70636: PPUSH
70637: CALL_OW 310
70641: NOT
70642: OR
70643: IFFALSE 70647
// exit ;
70645: GO 70737
// vehicle := IsInUnit ( driver ) ;
70647: LD_ADDR_VAR 0 3
70651: PUSH
70652: LD_VAR 0 1
70656: PPUSH
70657: CALL_OW 310
70661: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70662: LD_VAR 0 1
70666: PPUSH
70667: LD_STRING \
70669: PUSH
70670: LD_INT 0
70672: PUSH
70673: LD_INT 0
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: LD_INT 0
70681: PUSH
70682: LD_INT 0
70684: PUSH
70685: LD_INT 0
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: PUSH
70697: LD_STRING E
70699: PUSH
70700: LD_INT 0
70702: PUSH
70703: LD_INT 0
70705: PUSH
70706: LD_VAR 0 3
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PPUSH
70733: CALL_OW 447
// end ;
70737: LD_VAR 0 2
70741: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70742: LD_INT 0
70744: PPUSH
70745: PPUSH
70746: PPUSH
// tmp := [ ] ;
70747: LD_ADDR_VAR 0 5
70751: PUSH
70752: EMPTY
70753: ST_TO_ADDR
// for i in units do
70754: LD_ADDR_VAR 0 4
70758: PUSH
70759: LD_VAR 0 1
70763: PUSH
70764: FOR_IN
70765: IFFALSE 70803
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70767: LD_ADDR_VAR 0 5
70771: PUSH
70772: LD_VAR 0 5
70776: PPUSH
70777: LD_VAR 0 5
70781: PUSH
70782: LD_INT 1
70784: PLUS
70785: PPUSH
70786: LD_VAR 0 4
70790: PPUSH
70791: CALL_OW 256
70795: PPUSH
70796: CALL_OW 2
70800: ST_TO_ADDR
70801: GO 70764
70803: POP
70804: POP
// if not tmp then
70805: LD_VAR 0 5
70809: NOT
70810: IFFALSE 70814
// exit ;
70812: GO 70862
// if asc then
70814: LD_VAR 0 2
70818: IFFALSE 70842
// result := SortListByListAsc ( units , tmp ) else
70820: LD_ADDR_VAR 0 3
70824: PUSH
70825: LD_VAR 0 1
70829: PPUSH
70830: LD_VAR 0 5
70834: PPUSH
70835: CALL_OW 76
70839: ST_TO_ADDR
70840: GO 70862
// result := SortListByListDesc ( units , tmp ) ;
70842: LD_ADDR_VAR 0 3
70846: PUSH
70847: LD_VAR 0 1
70851: PPUSH
70852: LD_VAR 0 5
70856: PPUSH
70857: CALL_OW 77
70861: ST_TO_ADDR
// end ;
70862: LD_VAR 0 3
70866: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70867: LD_INT 0
70869: PPUSH
70870: PPUSH
// task := GetTaskList ( mech ) ;
70871: LD_ADDR_VAR 0 4
70875: PUSH
70876: LD_VAR 0 1
70880: PPUSH
70881: CALL_OW 437
70885: ST_TO_ADDR
// if not task then
70886: LD_VAR 0 4
70890: NOT
70891: IFFALSE 70895
// exit ;
70893: GO 70937
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70895: LD_ADDR_VAR 0 3
70899: PUSH
70900: LD_VAR 0 4
70904: PUSH
70905: LD_INT 1
70907: ARRAY
70908: PUSH
70909: LD_INT 1
70911: ARRAY
70912: PUSH
70913: LD_STRING r
70915: EQUAL
70916: PUSH
70917: LD_VAR 0 4
70921: PUSH
70922: LD_INT 1
70924: ARRAY
70925: PUSH
70926: LD_INT 4
70928: ARRAY
70929: PUSH
70930: LD_VAR 0 2
70934: EQUAL
70935: AND
70936: ST_TO_ADDR
// end ;
70937: LD_VAR 0 3
70941: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70942: LD_INT 0
70944: PPUSH
// SetDir ( unit , d ) ;
70945: LD_VAR 0 1
70949: PPUSH
70950: LD_VAR 0 4
70954: PPUSH
70955: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70959: LD_VAR 0 1
70963: PPUSH
70964: LD_VAR 0 2
70968: PPUSH
70969: LD_VAR 0 3
70973: PPUSH
70974: LD_VAR 0 5
70978: PPUSH
70979: CALL_OW 48
// end ;
70983: LD_VAR 0 6
70987: RET
// export function ToNaturalNumber ( number ) ; begin
70988: LD_INT 0
70990: PPUSH
// result := number div 1 ;
70991: LD_ADDR_VAR 0 2
70995: PUSH
70996: LD_VAR 0 1
71000: PUSH
71001: LD_INT 1
71003: DIV
71004: ST_TO_ADDR
// if number < 0 then
71005: LD_VAR 0 1
71009: PUSH
71010: LD_INT 0
71012: LESS
71013: IFFALSE 71023
// result := 0 ;
71015: LD_ADDR_VAR 0 2
71019: PUSH
71020: LD_INT 0
71022: ST_TO_ADDR
// end ;
71023: LD_VAR 0 2
71027: RET
// export function SortByClass ( units , class ) ; var un ; begin
71028: LD_INT 0
71030: PPUSH
71031: PPUSH
// if not units or not class then
71032: LD_VAR 0 1
71036: NOT
71037: PUSH
71038: LD_VAR 0 2
71042: NOT
71043: OR
71044: IFFALSE 71048
// exit ;
71046: GO 71143
// result := [ ] ;
71048: LD_ADDR_VAR 0 3
71052: PUSH
71053: EMPTY
71054: ST_TO_ADDR
// for un in units do
71055: LD_ADDR_VAR 0 4
71059: PUSH
71060: LD_VAR 0 1
71064: PUSH
71065: FOR_IN
71066: IFFALSE 71141
// if GetClass ( un ) = class then
71068: LD_VAR 0 4
71072: PPUSH
71073: CALL_OW 257
71077: PUSH
71078: LD_VAR 0 2
71082: EQUAL
71083: IFFALSE 71110
// result := Insert ( result , 1 , un ) else
71085: LD_ADDR_VAR 0 3
71089: PUSH
71090: LD_VAR 0 3
71094: PPUSH
71095: LD_INT 1
71097: PPUSH
71098: LD_VAR 0 4
71102: PPUSH
71103: CALL_OW 2
71107: ST_TO_ADDR
71108: GO 71139
// result := Replace ( result , result + 1 , un ) ;
71110: LD_ADDR_VAR 0 3
71114: PUSH
71115: LD_VAR 0 3
71119: PPUSH
71120: LD_VAR 0 3
71124: PUSH
71125: LD_INT 1
71127: PLUS
71128: PPUSH
71129: LD_VAR 0 4
71133: PPUSH
71134: CALL_OW 1
71138: ST_TO_ADDR
71139: GO 71065
71141: POP
71142: POP
// end ;
71143: LD_VAR 0 3
71147: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71148: LD_INT 0
71150: PPUSH
71151: PPUSH
71152: PPUSH
71153: PPUSH
71154: PPUSH
71155: PPUSH
71156: PPUSH
// result := [ ] ;
71157: LD_ADDR_VAR 0 4
71161: PUSH
71162: EMPTY
71163: ST_TO_ADDR
// if x - r < 0 then
71164: LD_VAR 0 1
71168: PUSH
71169: LD_VAR 0 3
71173: MINUS
71174: PUSH
71175: LD_INT 0
71177: LESS
71178: IFFALSE 71190
// min_x := 0 else
71180: LD_ADDR_VAR 0 8
71184: PUSH
71185: LD_INT 0
71187: ST_TO_ADDR
71188: GO 71206
// min_x := x - r ;
71190: LD_ADDR_VAR 0 8
71194: PUSH
71195: LD_VAR 0 1
71199: PUSH
71200: LD_VAR 0 3
71204: MINUS
71205: ST_TO_ADDR
// if y - r < 0 then
71206: LD_VAR 0 2
71210: PUSH
71211: LD_VAR 0 3
71215: MINUS
71216: PUSH
71217: LD_INT 0
71219: LESS
71220: IFFALSE 71232
// min_y := 0 else
71222: LD_ADDR_VAR 0 7
71226: PUSH
71227: LD_INT 0
71229: ST_TO_ADDR
71230: GO 71248
// min_y := y - r ;
71232: LD_ADDR_VAR 0 7
71236: PUSH
71237: LD_VAR 0 2
71241: PUSH
71242: LD_VAR 0 3
71246: MINUS
71247: ST_TO_ADDR
// max_x := x + r ;
71248: LD_ADDR_VAR 0 9
71252: PUSH
71253: LD_VAR 0 1
71257: PUSH
71258: LD_VAR 0 3
71262: PLUS
71263: ST_TO_ADDR
// max_y := y + r ;
71264: LD_ADDR_VAR 0 10
71268: PUSH
71269: LD_VAR 0 2
71273: PUSH
71274: LD_VAR 0 3
71278: PLUS
71279: ST_TO_ADDR
// for _x = min_x to max_x do
71280: LD_ADDR_VAR 0 5
71284: PUSH
71285: DOUBLE
71286: LD_VAR 0 8
71290: DEC
71291: ST_TO_ADDR
71292: LD_VAR 0 9
71296: PUSH
71297: FOR_TO
71298: IFFALSE 71399
// for _y = min_y to max_y do
71300: LD_ADDR_VAR 0 6
71304: PUSH
71305: DOUBLE
71306: LD_VAR 0 7
71310: DEC
71311: ST_TO_ADDR
71312: LD_VAR 0 10
71316: PUSH
71317: FOR_TO
71318: IFFALSE 71395
// begin if not ValidHex ( _x , _y ) then
71320: LD_VAR 0 5
71324: PPUSH
71325: LD_VAR 0 6
71329: PPUSH
71330: CALL_OW 488
71334: NOT
71335: IFFALSE 71339
// continue ;
71337: GO 71317
// if GetResourceTypeXY ( _x , _y ) then
71339: LD_VAR 0 5
71343: PPUSH
71344: LD_VAR 0 6
71348: PPUSH
71349: CALL_OW 283
71353: IFFALSE 71393
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71355: LD_ADDR_VAR 0 4
71359: PUSH
71360: LD_VAR 0 4
71364: PPUSH
71365: LD_VAR 0 4
71369: PUSH
71370: LD_INT 1
71372: PLUS
71373: PPUSH
71374: LD_VAR 0 5
71378: PUSH
71379: LD_VAR 0 6
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PPUSH
71388: CALL_OW 1
71392: ST_TO_ADDR
// end ;
71393: GO 71317
71395: POP
71396: POP
71397: GO 71297
71399: POP
71400: POP
// end ;
71401: LD_VAR 0 4
71405: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71406: LD_INT 0
71408: PPUSH
71409: PPUSH
71410: PPUSH
71411: PPUSH
71412: PPUSH
71413: PPUSH
71414: PPUSH
71415: PPUSH
// if not units then
71416: LD_VAR 0 1
71420: NOT
71421: IFFALSE 71425
// exit ;
71423: GO 71949
// result := UnitFilter ( units , [ f_ok ] ) ;
71425: LD_ADDR_VAR 0 3
71429: PUSH
71430: LD_VAR 0 1
71434: PPUSH
71435: LD_INT 50
71437: PUSH
71438: EMPTY
71439: LIST
71440: PPUSH
71441: CALL_OW 72
71445: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71446: LD_ADDR_VAR 0 8
71450: PUSH
71451: LD_VAR 0 1
71455: PUSH
71456: LD_INT 1
71458: ARRAY
71459: PPUSH
71460: CALL_OW 255
71464: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71465: LD_ADDR_VAR 0 10
71469: PUSH
71470: LD_INT 29
71472: PUSH
71473: LD_INT 91
71475: PUSH
71476: LD_INT 49
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: LIST
71483: ST_TO_ADDR
// if not result then
71484: LD_VAR 0 3
71488: NOT
71489: IFFALSE 71493
// exit ;
71491: GO 71949
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71493: LD_ADDR_VAR 0 5
71497: PUSH
71498: LD_INT 81
71500: PUSH
71501: LD_VAR 0 8
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PPUSH
71510: CALL_OW 69
71514: ST_TO_ADDR
// for i in result do
71515: LD_ADDR_VAR 0 4
71519: PUSH
71520: LD_VAR 0 3
71524: PUSH
71525: FOR_IN
71526: IFFALSE 71947
// begin tag := GetTag ( i ) + 1 ;
71528: LD_ADDR_VAR 0 9
71532: PUSH
71533: LD_VAR 0 4
71537: PPUSH
71538: CALL_OW 110
71542: PUSH
71543: LD_INT 1
71545: PLUS
71546: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71547: LD_ADDR_VAR 0 7
71551: PUSH
71552: LD_VAR 0 4
71556: PPUSH
71557: CALL_OW 250
71561: PPUSH
71562: LD_VAR 0 4
71566: PPUSH
71567: CALL_OW 251
71571: PPUSH
71572: LD_INT 6
71574: PPUSH
71575: CALL 71148 0 3
71579: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71580: LD_VAR 0 4
71584: PPUSH
71585: CALL_OW 247
71589: PUSH
71590: LD_INT 2
71592: EQUAL
71593: PUSH
71594: LD_VAR 0 7
71598: AND
71599: PUSH
71600: LD_VAR 0 4
71604: PPUSH
71605: CALL_OW 264
71609: PUSH
71610: LD_VAR 0 10
71614: IN
71615: NOT
71616: AND
71617: IFFALSE 71656
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71619: LD_VAR 0 4
71623: PPUSH
71624: LD_VAR 0 7
71628: PUSH
71629: LD_INT 1
71631: ARRAY
71632: PUSH
71633: LD_INT 1
71635: ARRAY
71636: PPUSH
71637: LD_VAR 0 7
71641: PUSH
71642: LD_INT 1
71644: ARRAY
71645: PUSH
71646: LD_INT 2
71648: ARRAY
71649: PPUSH
71650: CALL_OW 116
71654: GO 71945
// if path > tag then
71656: LD_VAR 0 2
71660: PUSH
71661: LD_VAR 0 9
71665: GREATER
71666: IFFALSE 71874
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71668: LD_ADDR_VAR 0 6
71672: PUSH
71673: LD_VAR 0 5
71677: PPUSH
71678: LD_INT 91
71680: PUSH
71681: LD_VAR 0 4
71685: PUSH
71686: LD_INT 8
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: LIST
71693: PPUSH
71694: CALL_OW 72
71698: ST_TO_ADDR
// if nearEnemy then
71699: LD_VAR 0 6
71703: IFFALSE 71772
// begin if GetWeapon ( i ) = ru_time_lapser then
71705: LD_VAR 0 4
71709: PPUSH
71710: CALL_OW 264
71714: PUSH
71715: LD_INT 49
71717: EQUAL
71718: IFFALSE 71746
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71720: LD_VAR 0 4
71724: PPUSH
71725: LD_VAR 0 6
71729: PPUSH
71730: LD_VAR 0 4
71734: PPUSH
71735: CALL_OW 74
71739: PPUSH
71740: CALL_OW 112
71744: GO 71770
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71746: LD_VAR 0 4
71750: PPUSH
71751: LD_VAR 0 6
71755: PPUSH
71756: LD_VAR 0 4
71760: PPUSH
71761: CALL_OW 74
71765: PPUSH
71766: CALL 72874 0 2
// end else
71770: GO 71872
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71772: LD_VAR 0 4
71776: PPUSH
71777: LD_VAR 0 2
71781: PUSH
71782: LD_VAR 0 9
71786: ARRAY
71787: PUSH
71788: LD_INT 1
71790: ARRAY
71791: PPUSH
71792: LD_VAR 0 2
71796: PUSH
71797: LD_VAR 0 9
71801: ARRAY
71802: PUSH
71803: LD_INT 2
71805: ARRAY
71806: PPUSH
71807: CALL_OW 297
71811: PUSH
71812: LD_INT 6
71814: GREATER
71815: IFFALSE 71858
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71817: LD_VAR 0 4
71821: PPUSH
71822: LD_VAR 0 2
71826: PUSH
71827: LD_VAR 0 9
71831: ARRAY
71832: PUSH
71833: LD_INT 1
71835: ARRAY
71836: PPUSH
71837: LD_VAR 0 2
71841: PUSH
71842: LD_VAR 0 9
71846: ARRAY
71847: PUSH
71848: LD_INT 2
71850: ARRAY
71851: PPUSH
71852: CALL_OW 114
71856: GO 71872
// SetTag ( i , tag ) ;
71858: LD_VAR 0 4
71862: PPUSH
71863: LD_VAR 0 9
71867: PPUSH
71868: CALL_OW 109
// end else
71872: GO 71945
// if enemy then
71874: LD_VAR 0 5
71878: IFFALSE 71945
// begin if GetWeapon ( i ) = ru_time_lapser then
71880: LD_VAR 0 4
71884: PPUSH
71885: CALL_OW 264
71889: PUSH
71890: LD_INT 49
71892: EQUAL
71893: IFFALSE 71921
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71895: LD_VAR 0 4
71899: PPUSH
71900: LD_VAR 0 5
71904: PPUSH
71905: LD_VAR 0 4
71909: PPUSH
71910: CALL_OW 74
71914: PPUSH
71915: CALL_OW 112
71919: GO 71945
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71921: LD_VAR 0 4
71925: PPUSH
71926: LD_VAR 0 5
71930: PPUSH
71931: LD_VAR 0 4
71935: PPUSH
71936: CALL_OW 74
71940: PPUSH
71941: CALL 72874 0 2
// end ; end ;
71945: GO 71525
71947: POP
71948: POP
// end ;
71949: LD_VAR 0 3
71953: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71954: LD_INT 0
71956: PPUSH
71957: PPUSH
71958: PPUSH
// if not unit or IsInUnit ( unit ) then
71959: LD_VAR 0 1
71963: NOT
71964: PUSH
71965: LD_VAR 0 1
71969: PPUSH
71970: CALL_OW 310
71974: OR
71975: IFFALSE 71979
// exit ;
71977: GO 72070
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71979: LD_ADDR_VAR 0 4
71983: PUSH
71984: LD_VAR 0 1
71988: PPUSH
71989: CALL_OW 250
71993: PPUSH
71994: LD_VAR 0 2
71998: PPUSH
71999: LD_INT 1
72001: PPUSH
72002: CALL_OW 272
72006: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72007: LD_ADDR_VAR 0 5
72011: PUSH
72012: LD_VAR 0 1
72016: PPUSH
72017: CALL_OW 251
72021: PPUSH
72022: LD_VAR 0 2
72026: PPUSH
72027: LD_INT 1
72029: PPUSH
72030: CALL_OW 273
72034: ST_TO_ADDR
// if ValidHex ( x , y ) then
72035: LD_VAR 0 4
72039: PPUSH
72040: LD_VAR 0 5
72044: PPUSH
72045: CALL_OW 488
72049: IFFALSE 72070
// ComTurnXY ( unit , x , y ) ;
72051: LD_VAR 0 1
72055: PPUSH
72056: LD_VAR 0 4
72060: PPUSH
72061: LD_VAR 0 5
72065: PPUSH
72066: CALL_OW 118
// end ;
72070: LD_VAR 0 3
72074: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72075: LD_INT 0
72077: PPUSH
72078: PPUSH
// result := false ;
72079: LD_ADDR_VAR 0 3
72083: PUSH
72084: LD_INT 0
72086: ST_TO_ADDR
// if not units then
72087: LD_VAR 0 2
72091: NOT
72092: IFFALSE 72096
// exit ;
72094: GO 72141
// for i in units do
72096: LD_ADDR_VAR 0 4
72100: PUSH
72101: LD_VAR 0 2
72105: PUSH
72106: FOR_IN
72107: IFFALSE 72139
// if See ( side , i ) then
72109: LD_VAR 0 1
72113: PPUSH
72114: LD_VAR 0 4
72118: PPUSH
72119: CALL_OW 292
72123: IFFALSE 72137
// begin result := true ;
72125: LD_ADDR_VAR 0 3
72129: PUSH
72130: LD_INT 1
72132: ST_TO_ADDR
// exit ;
72133: POP
72134: POP
72135: GO 72141
// end ;
72137: GO 72106
72139: POP
72140: POP
// end ;
72141: LD_VAR 0 3
72145: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72146: LD_INT 0
72148: PPUSH
72149: PPUSH
72150: PPUSH
72151: PPUSH
// if not unit or not points then
72152: LD_VAR 0 1
72156: NOT
72157: PUSH
72158: LD_VAR 0 2
72162: NOT
72163: OR
72164: IFFALSE 72168
// exit ;
72166: GO 72258
// dist := 99999 ;
72168: LD_ADDR_VAR 0 5
72172: PUSH
72173: LD_INT 99999
72175: ST_TO_ADDR
// for i in points do
72176: LD_ADDR_VAR 0 4
72180: PUSH
72181: LD_VAR 0 2
72185: PUSH
72186: FOR_IN
72187: IFFALSE 72256
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72189: LD_ADDR_VAR 0 6
72193: PUSH
72194: LD_VAR 0 1
72198: PPUSH
72199: LD_VAR 0 4
72203: PUSH
72204: LD_INT 1
72206: ARRAY
72207: PPUSH
72208: LD_VAR 0 4
72212: PUSH
72213: LD_INT 2
72215: ARRAY
72216: PPUSH
72217: CALL_OW 297
72221: ST_TO_ADDR
// if tmpDist < dist then
72222: LD_VAR 0 6
72226: PUSH
72227: LD_VAR 0 5
72231: LESS
72232: IFFALSE 72254
// begin result := i ;
72234: LD_ADDR_VAR 0 3
72238: PUSH
72239: LD_VAR 0 4
72243: ST_TO_ADDR
// dist := tmpDist ;
72244: LD_ADDR_VAR 0 5
72248: PUSH
72249: LD_VAR 0 6
72253: ST_TO_ADDR
// end ; end ;
72254: GO 72186
72256: POP
72257: POP
// end ;
72258: LD_VAR 0 3
72262: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72263: LD_INT 0
72265: PPUSH
// uc_side := side ;
72266: LD_ADDR_OWVAR 20
72270: PUSH
72271: LD_VAR 0 1
72275: ST_TO_ADDR
// uc_nation := 3 ;
72276: LD_ADDR_OWVAR 21
72280: PUSH
72281: LD_INT 3
72283: ST_TO_ADDR
// vc_chassis := 25 ;
72284: LD_ADDR_OWVAR 37
72288: PUSH
72289: LD_INT 25
72291: ST_TO_ADDR
// vc_engine := engine_siberite ;
72292: LD_ADDR_OWVAR 39
72296: PUSH
72297: LD_INT 3
72299: ST_TO_ADDR
// vc_control := control_computer ;
72300: LD_ADDR_OWVAR 38
72304: PUSH
72305: LD_INT 3
72307: ST_TO_ADDR
// vc_weapon := 59 ;
72308: LD_ADDR_OWVAR 40
72312: PUSH
72313: LD_INT 59
72315: ST_TO_ADDR
// result := CreateVehicle ;
72316: LD_ADDR_VAR 0 5
72320: PUSH
72321: CALL_OW 45
72325: ST_TO_ADDR
// SetDir ( result , d ) ;
72326: LD_VAR 0 5
72330: PPUSH
72331: LD_VAR 0 4
72335: PPUSH
72336: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72340: LD_VAR 0 5
72344: PPUSH
72345: LD_VAR 0 2
72349: PPUSH
72350: LD_VAR 0 3
72354: PPUSH
72355: LD_INT 0
72357: PPUSH
72358: CALL_OW 48
// end ;
72362: LD_VAR 0 5
72366: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72367: LD_INT 0
72369: PPUSH
72370: PPUSH
72371: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72372: LD_ADDR_VAR 0 2
72376: PUSH
72377: LD_INT 0
72379: PUSH
72380: LD_INT 0
72382: PUSH
72383: LD_INT 0
72385: PUSH
72386: LD_INT 0
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72395: LD_VAR 0 1
72399: NOT
72400: PUSH
72401: LD_VAR 0 1
72405: PPUSH
72406: CALL_OW 264
72410: PUSH
72411: LD_INT 12
72413: PUSH
72414: LD_INT 51
72416: PUSH
72417: LD_INT 32
72419: PUSH
72420: LD_INT 89
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: IN
72429: NOT
72430: OR
72431: IFFALSE 72435
// exit ;
72433: GO 72533
// for i := 1 to 3 do
72435: LD_ADDR_VAR 0 3
72439: PUSH
72440: DOUBLE
72441: LD_INT 1
72443: DEC
72444: ST_TO_ADDR
72445: LD_INT 3
72447: PUSH
72448: FOR_TO
72449: IFFALSE 72531
// begin tmp := GetCargo ( cargo , i ) ;
72451: LD_ADDR_VAR 0 4
72455: PUSH
72456: LD_VAR 0 1
72460: PPUSH
72461: LD_VAR 0 3
72465: PPUSH
72466: CALL_OW 289
72470: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72471: LD_ADDR_VAR 0 2
72475: PUSH
72476: LD_VAR 0 2
72480: PPUSH
72481: LD_VAR 0 3
72485: PPUSH
72486: LD_VAR 0 4
72490: PPUSH
72491: CALL_OW 1
72495: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72496: LD_ADDR_VAR 0 2
72500: PUSH
72501: LD_VAR 0 2
72505: PPUSH
72506: LD_INT 4
72508: PPUSH
72509: LD_VAR 0 2
72513: PUSH
72514: LD_INT 4
72516: ARRAY
72517: PUSH
72518: LD_VAR 0 4
72522: PLUS
72523: PPUSH
72524: CALL_OW 1
72528: ST_TO_ADDR
// end ;
72529: GO 72448
72531: POP
72532: POP
// end ;
72533: LD_VAR 0 2
72537: RET
// export function Length ( array ) ; begin
72538: LD_INT 0
72540: PPUSH
// result := array + 0 ;
72541: LD_ADDR_VAR 0 2
72545: PUSH
72546: LD_VAR 0 1
72550: PUSH
72551: LD_INT 0
72553: PLUS
72554: ST_TO_ADDR
// end ;
72555: LD_VAR 0 2
72559: RET
// export function PrepareArray ( array ) ; begin
72560: LD_INT 0
72562: PPUSH
// result := array diff 0 ;
72563: LD_ADDR_VAR 0 2
72567: PUSH
72568: LD_VAR 0 1
72572: PUSH
72573: LD_INT 0
72575: DIFF
72576: ST_TO_ADDR
// if not result [ 1 ] then
72577: LD_VAR 0 2
72581: PUSH
72582: LD_INT 1
72584: ARRAY
72585: NOT
72586: IFFALSE 72606
// result := Delete ( result , 1 ) ;
72588: LD_ADDR_VAR 0 2
72592: PUSH
72593: LD_VAR 0 2
72597: PPUSH
72598: LD_INT 1
72600: PPUSH
72601: CALL_OW 3
72605: ST_TO_ADDR
// end ;
72606: LD_VAR 0 2
72610: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72611: LD_INT 0
72613: PPUSH
72614: PPUSH
72615: PPUSH
72616: PPUSH
// sibRocketRange := 25 ;
72617: LD_ADDR_VAR 0 6
72621: PUSH
72622: LD_INT 25
72624: ST_TO_ADDR
// result := false ;
72625: LD_ADDR_VAR 0 4
72629: PUSH
72630: LD_INT 0
72632: ST_TO_ADDR
// for i := 0 to 5 do
72633: LD_ADDR_VAR 0 5
72637: PUSH
72638: DOUBLE
72639: LD_INT 0
72641: DEC
72642: ST_TO_ADDR
72643: LD_INT 5
72645: PUSH
72646: FOR_TO
72647: IFFALSE 72714
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72649: LD_VAR 0 1
72653: PPUSH
72654: LD_VAR 0 5
72658: PPUSH
72659: LD_VAR 0 6
72663: PPUSH
72664: CALL_OW 272
72668: PPUSH
72669: LD_VAR 0 2
72673: PPUSH
72674: LD_VAR 0 5
72678: PPUSH
72679: LD_VAR 0 6
72683: PPUSH
72684: CALL_OW 273
72688: PPUSH
72689: LD_VAR 0 3
72693: PPUSH
72694: CALL_OW 309
72698: IFFALSE 72712
// begin result := true ;
72700: LD_ADDR_VAR 0 4
72704: PUSH
72705: LD_INT 1
72707: ST_TO_ADDR
// exit ;
72708: POP
72709: POP
72710: GO 72716
// end ;
72712: GO 72646
72714: POP
72715: POP
// end ;
72716: LD_VAR 0 4
72720: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72721: LD_INT 0
72723: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72724: LD_VAR 0 1
72728: PPUSH
72729: LD_VAR 0 2
72733: PPUSH
72734: LD_INT 0
72736: PPUSH
72737: LD_INT 0
72739: PPUSH
72740: LD_INT 1
72742: PPUSH
72743: LD_INT 0
72745: PPUSH
72746: CALL_OW 587
// end ;
72750: LD_VAR 0 3
72754: RET
// export function CenterOnNow ( unit ) ; begin
72755: LD_INT 0
72757: PPUSH
// result := IsInUnit ( unit ) ;
72758: LD_ADDR_VAR 0 2
72762: PUSH
72763: LD_VAR 0 1
72767: PPUSH
72768: CALL_OW 310
72772: ST_TO_ADDR
// if not result then
72773: LD_VAR 0 2
72777: NOT
72778: IFFALSE 72790
// result := unit ;
72780: LD_ADDR_VAR 0 2
72784: PUSH
72785: LD_VAR 0 1
72789: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72790: LD_VAR 0 1
72794: PPUSH
72795: CALL_OW 87
// end ;
72799: LD_VAR 0 2
72803: RET
// export function ComMoveHex ( unit , hex ) ; begin
72804: LD_INT 0
72806: PPUSH
// if not hex then
72807: LD_VAR 0 2
72811: NOT
72812: IFFALSE 72816
// exit ;
72814: GO 72869
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72816: LD_VAR 0 2
72820: PUSH
72821: LD_INT 1
72823: ARRAY
72824: PPUSH
72825: LD_VAR 0 2
72829: PUSH
72830: LD_INT 2
72832: ARRAY
72833: PPUSH
72834: CALL_OW 428
72838: IFFALSE 72842
// exit ;
72840: GO 72869
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72842: LD_VAR 0 1
72846: PPUSH
72847: LD_VAR 0 2
72851: PUSH
72852: LD_INT 1
72854: ARRAY
72855: PPUSH
72856: LD_VAR 0 2
72860: PUSH
72861: LD_INT 2
72863: ARRAY
72864: PPUSH
72865: CALL_OW 111
// end ;
72869: LD_VAR 0 3
72873: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72874: LD_INT 0
72876: PPUSH
72877: PPUSH
72878: PPUSH
// if not unit or not enemy then
72879: LD_VAR 0 1
72883: NOT
72884: PUSH
72885: LD_VAR 0 2
72889: NOT
72890: OR
72891: IFFALSE 72895
// exit ;
72893: GO 73019
// x := GetX ( enemy ) ;
72895: LD_ADDR_VAR 0 4
72899: PUSH
72900: LD_VAR 0 2
72904: PPUSH
72905: CALL_OW 250
72909: ST_TO_ADDR
// y := GetY ( enemy ) ;
72910: LD_ADDR_VAR 0 5
72914: PUSH
72915: LD_VAR 0 2
72919: PPUSH
72920: CALL_OW 251
72924: ST_TO_ADDR
// if ValidHex ( x , y ) then
72925: LD_VAR 0 4
72929: PPUSH
72930: LD_VAR 0 5
72934: PPUSH
72935: CALL_OW 488
72939: IFFALSE 73019
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72941: LD_VAR 0 2
72945: PPUSH
72946: CALL_OW 247
72950: PUSH
72951: LD_INT 3
72953: PUSH
72954: LD_INT 2
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: IN
72961: PUSH
72962: LD_VAR 0 1
72966: PPUSH
72967: CALL_OW 255
72971: PPUSH
72972: LD_VAR 0 2
72976: PPUSH
72977: CALL_OW 292
72981: AND
72982: IFFALSE 73000
// ComAttackUnit ( unit , enemy ) else
72984: LD_VAR 0 1
72988: PPUSH
72989: LD_VAR 0 2
72993: PPUSH
72994: CALL_OW 115
72998: GO 73019
// ComAgressiveMove ( unit , x , y ) ;
73000: LD_VAR 0 1
73004: PPUSH
73005: LD_VAR 0 4
73009: PPUSH
73010: LD_VAR 0 5
73014: PPUSH
73015: CALL_OW 114
// end ; end_of_file
73019: LD_VAR 0 3
73023: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73024: LD_VAR 0 1
73028: PPUSH
73029: LD_VAR 0 2
73033: PPUSH
73034: LD_VAR 0 3
73038: PPUSH
73039: LD_VAR 0 4
73043: PPUSH
73044: LD_VAR 0 5
73048: PPUSH
73049: LD_VAR 0 6
73053: PPUSH
73054: CALL 10562 0 6
// end ;
73058: PPOPN 6
73060: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73061: LD_INT 0
73063: PPUSH
// begin if not units then
73064: LD_VAR 0 1
73068: NOT
73069: IFFALSE 73073
// exit ;
73071: GO 73073
// end ;
73073: PPOPN 7
73075: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73076: CALL 10466 0 0
// end ;
73080: PPOPN 1
73082: END
