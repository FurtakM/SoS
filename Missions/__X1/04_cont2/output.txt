// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 237 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 649 0 1
// PrepareRussian ;
  19: CALL 2266 0 0
// PrepareArabian ;
  23: CALL 1246 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6072 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape , activeInvincible ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// activeInvincible := true ;
 224: LD_ADDR_EXP 17
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export tEscape ; function InitTag ; begin
 237: LD_INT 0
 239: PPUSH
// tEscape := 10 ;
 240: LD_ADDR_EXP 18
 244: PUSH
 245: LD_INT 10
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 1
 252: RET
// every 0 0$1 trigger debug do var i ;
 253: LD_EXP 1
 257: IFFALSE 341
 259: GO 261
 261: DISABLE
 262: LD_INT 0
 264: PPUSH
// begin enable ;
 265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 266: LD_ADDR_VAR 0 1
 270: PUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: LD_INT 21
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 339
// if GetLives ( i ) < 1000 then
 310: LD_VAR 0 1
 314: PPUSH
 315: CALL_OW 256
 319: PUSH
 320: LD_INT 1000
 322: LESS
 323: IFFALSE 337
// SetLives ( i , 1000 ) ;
 325: LD_VAR 0 1
 329: PPUSH
 330: LD_INT 1000
 332: PPUSH
 333: CALL_OW 234
 337: GO 307
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function CreateNature ( forest ) ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 653: LD_VAR 0 1
 657: PPUSH
 658: LD_INT 3
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: PPUSH
 682: CALL 512 0 2
// for i := 1 to 2 do
 686: LD_ADDR_VAR 0 3
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 2
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := 21 ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 21
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 1
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 2 do
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 2
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := 18 ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 18
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// for i := 1 to 2 do
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: DOUBLE
 798: LD_INT 1
 800: DEC
 801: ST_TO_ADDR
 802: LD_INT 2
 804: PUSH
 805: FOR_TO
 806: IFFALSE 843
// begin hc_class := 13 ;
 808: LD_ADDR_OWVAR 28
 812: PUSH
 813: LD_INT 13
 815: ST_TO_ADDR
// hc_gallery :=  ;
 816: LD_ADDR_OWVAR 33
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 824: CALL_OW 44
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: LD_INT 0
 836: PPUSH
 837: CALL_OW 49
// end ;
 841: GO 805
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 2
 849: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
 854: PPUSH
// if not observer or not unit then
 855: LD_VAR 0 1
 859: NOT
 860: IFTRUE 869
 862: PUSH
 863: LD_VAR 0 2
 867: NOT
 868: OR
 869: IFFALSE 873
// exit ;
 871: GO 921
// if not See ( GetSide ( observer ) , unit ) then
 873: LD_VAR 0 1
 877: PPUSH
 878: CALL_OW 255
 882: PPUSH
 883: LD_VAR 0 2
 887: PPUSH
 888: CALL_OW 292
 892: NOT
 893: IFFALSE 897
// exit ;
 895: GO 921
// result := GetDistUnits ( observer , unit ) < 12 ;
 897: LD_ADDR_VAR 0 3
 901: PUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_VAR 0 2
 911: PPUSH
 912: CALL_OW 296
 916: PUSH
 917: LD_INT 12
 919: LESS
 920: ST_TO_ADDR
// end ;
 921: LD_VAR 0 3
 925: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 926: LD_INT 0
 928: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 929: LD_VAR 0 2
 933: PUSH
 934: LD_INT 1
 936: ARRAY
 937: PPUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 2
 945: ARRAY
 946: PPUSH
 947: CALL_OW 488
 951: IFFALSE 981
 953: PUSH
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: ARRAY
 971: PPUSH
 972: CALL_OW 428
 976: PUSH
 977: LD_INT 0
 979: EQUAL
 980: AND
 981: IFFALSE 1015
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 983: LD_VAR 0 1
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PPUSH
1006: LD_VAR 0 3
1010: PPUSH
1011: CALL_OW 48
// end ;
1015: LD_VAR 0 4
1019: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1020: LD_INT 0
1022: PPUSH
1023: PPUSH
1024: PPUSH
1025: PPUSH
1026: PPUSH
// if not unit then
1027: LD_VAR 0 1
1031: NOT
1032: IFFALSE 1036
// exit ;
1034: GO 1241
// side := GetSide ( unit ) ;
1036: LD_ADDR_VAR 0 4
1040: PUSH
1041: LD_VAR 0 1
1045: PPUSH
1046: CALL_OW 255
1050: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1051: LD_ADDR_VAR 0 5
1055: PUSH
1056: LD_INT 22
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 30
1070: PUSH
1071: LD_VAR 0 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PPUSH
1084: CALL_OW 69
1088: ST_TO_ADDR
// if not tmp then
1089: LD_VAR 0 5
1093: NOT
1094: IFFALSE 1098
// exit ;
1096: GO 1241
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: LD_VAR 0 1
1107: PPUSH
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_INT 1
1115: PPUSH
1116: LD_INT 1
1118: PPUSH
1119: CALL 39026 0 4
1123: ST_TO_ADDR
// places := 1 ;
1124: LD_ADDR_VAR 0 7
1128: PUSH
1129: LD_INT 1
1131: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 4
1145: PUSH
1146: LD_INT 5
1148: PUSH
1149: LD_INT 2
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 6
1157: PUSH
1158: LD_INT 7
1160: PUSH
1161: LD_INT 8
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: IN
1175: IFFALSE 1185
// places := 6 ;
1177: LD_ADDR_VAR 0 7
1181: PUSH
1182: LD_INT 6
1184: ST_TO_ADDR
// for i in tmp do
1185: LD_ADDR_VAR 0 6
1189: PUSH
1190: LD_VAR 0 5
1194: PUSH
1195: FOR_IN
1196: IFFALSE 1239
// begin if UnitsInside ( i ) - places <= 0 then
1198: LD_VAR 0 6
1202: PPUSH
1203: CALL_OW 313
1207: PUSH
1208: LD_VAR 0 7
1212: MINUS
1213: PUSH
1214: LD_INT 0
1216: LESSEQUAL
1217: IFFALSE 1223
// continue else
1219: GO 1195
1221: GO 1237
// begin result := i ;
1223: LD_ADDR_VAR 0 3
1227: PUSH
1228: LD_VAR 0 6
1232: ST_TO_ADDR
// exit ;
1233: POP
1234: POP
1235: GO 1241
// end ; end ;
1237: GO 1195
1239: POP
1240: POP
// end ; end_of_file
1241: LD_VAR 0 3
1245: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
// uc_side := 2 ;
1250: LD_ADDR_OWVAR 20
1254: PUSH
1255: LD_INT 2
1257: ST_TO_ADDR
// uc_nation := 2 ;
1258: LD_ADDR_OWVAR 21
1262: PUSH
1263: LD_INT 2
1265: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1266: LD_ADDR_EXP 19
1270: PUSH
1271: LD_STRING Heike
1273: PPUSH
1274: LD_EXP 1
1278: NOT
1279: PPUSH
1280: LD_EXP 2
1284: PPUSH
1285: CALL 33449 0 3
1289: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1290: LD_ADDR_EXP 22
1294: PUSH
1295: LD_STRING Ibrahim
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_EXP 2
1308: PPUSH
1309: CALL 33449 0 3
1313: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1314: LD_ADDR_EXP 20
1318: PUSH
1319: LD_STRING Givi
1321: PPUSH
1322: LD_EXP 1
1326: NOT
1327: PPUSH
1328: LD_EXP 2
1332: PPUSH
1333: CALL 33449 0 3
1337: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1338: LD_ADDR_EXP 23
1342: PUSH
1343: LD_STRING Kamil
1345: PPUSH
1346: LD_EXP 1
1350: NOT
1351: PPUSH
1352: LD_EXP 2
1356: PPUSH
1357: CALL 33449 0 3
1361: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1362: LD_ADDR_EXP 24
1366: PUSH
1367: LD_STRING Kaia
1369: PPUSH
1370: LD_EXP 1
1374: NOT
1375: PPUSH
1376: LD_EXP 2
1380: PPUSH
1381: CALL 33449 0 3
1385: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1386: LD_ADDR_EXP 25
1390: PUSH
1391: LD_STRING Sophia
1393: PPUSH
1394: LD_EXP 1
1398: NOT
1399: PPUSH
1400: LD_EXP 2
1404: PPUSH
1405: CALL 33449 0 3
1409: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1410: LD_ADDR_EXP 26
1414: PUSH
1415: LD_STRING Markov
1417: PPUSH
1418: LD_EXP 1
1422: NOT
1423: PPUSH
1424: LD_EXP 2
1428: PPUSH
1429: CALL 33449 0 3
1433: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1434: LD_ADDR_EXP 29
1438: PUSH
1439: LD_STRING Aviradze
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 2
1452: PPUSH
1453: CALL 33449 0 3
1457: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1458: LD_ADDR_EXP 28
1462: PUSH
1463: LD_STRING Kurt
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 2
1476: PPUSH
1477: CALL 33449 0 3
1481: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1482: LD_ADDR_EXP 21
1486: PUSH
1487: LD_STRING Mike
1489: PPUSH
1490: LD_EXP 1
1494: NOT
1495: PPUSH
1496: LD_EXP 2
1500: PPUSH
1501: CALL 33449 0 3
1505: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1506: LD_ADDR_EXP 30
1510: PUSH
1511: LD_STRING 04_1_others
1513: PPUSH
1514: CALL_OW 31
1518: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1519: LD_ADDR_EXP 32
1523: PUSH
1524: LD_STRING 04_1_apes
1526: PPUSH
1527: CALL_OW 31
1531: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1532: LD_ADDR_EXP 31
1536: PUSH
1537: LD_STRING 04_1_Vehicles
1539: PPUSH
1540: EMPTY
1541: PPUSH
1542: CALL_OW 30
1546: ST_TO_ADDR
// if debug then
1547: LD_EXP 1
1551: IFFALSE 1770
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_big_cargo_bay , 3 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1553: LD_ADDR_EXP 31
1557: PUSH
1558: LD_INT 13
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: LD_INT 27
1569: PUSH
1570: LD_INT 2
1572: PUSH
1573: LD_INT 1000
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: LD_INT 0
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 13
1601: PUSH
1602: LD_INT 1
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: LD_INT 25
1610: PUSH
1611: LD_INT 2
1613: PUSH
1614: LD_INT 1000
1616: PUSH
1617: LD_INT 0
1619: PUSH
1620: LD_INT 0
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 3
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 13
1642: PUSH
1643: LD_INT 1
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: LD_INT 27
1651: PUSH
1652: LD_INT 2
1654: PUSH
1655: LD_INT 1000
1657: PUSH
1658: LD_INT 0
1660: PUSH
1661: LD_INT 0
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 13
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: LD_INT 27
1692: PUSH
1693: LD_INT 2
1695: PUSH
1696: LD_INT 1000
1698: PUSH
1699: LD_INT 0
1701: PUSH
1702: LD_INT 0
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 23
1724: PUSH
1725: LD_INT 1
1727: PUSH
1728: LD_INT 1
1730: PUSH
1731: LD_INT 89
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: LD_INT 1000
1739: PUSH
1740: LD_INT 40
1742: PUSH
1743: LD_INT 40
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: ST_TO_ADDR
// uc_side := 5 ;
1770: LD_ADDR_OWVAR 20
1774: PUSH
1775: LD_INT 5
1777: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1778: LD_ADDR_EXP 27
1782: PUSH
1783: LD_STRING Abdul
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: LD_STRING 
1791: PPUSH
1792: CALL 33449 0 3
1796: ST_TO_ADDR
// end ;
1797: LD_VAR 0 1
1801: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , debug ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1802: LD_STRING 04_1_KaganCaptured
1804: PPUSH
1805: LD_EXP 1
1809: PPUSH
1810: CALL_OW 30
1814: IFFALSE 1833
1816: PUSH
1817: LD_INT 22
1819: PUSH
1820: LD_INT 5
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PPUSH
1827: CALL_OW 69
1831: NOT
1832: AND
1833: IFFALSE 1872
1835: PUSH
1836: LD_INT 124
1838: PPUSH
1839: LD_INT 26
1841: PPUSH
1842: CALL_OW 428
1846: PUSH
1847: LD_INT 0
1849: EQUAL
1850: PUSH
1851: LD_INT 124
1853: PPUSH
1854: LD_INT 26
1856: PPUSH
1857: CALL_OW 428
1861: PPUSH
1862: CALL_OW 255
1866: PUSH
1867: LD_INT 2
1869: EQUAL
1870: XOR
1871: AND
1872: IFFALSE 2263
1874: GO 1876
1876: DISABLE
1877: LD_INT 0
1879: PPUSH
1880: PPUSH
// begin enable ;
1881: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1882: LD_EXP 34
1886: NOT
1887: IFTRUE 1899
1889: PUSH
1890: LD_EXP 34
1894: PUSH
1895: LD_INT 4
1897: GREATER
1898: OR
1899: IFFALSE 1909
// cargoCounter := 1 ;
1901: LD_ADDR_EXP 34
1905: PUSH
1906: LD_INT 1
1908: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: LD_INT 142
1916: PUSH
1917: LD_INT 15
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 129
1926: PUSH
1927: LD_INT 11
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 138
1936: PUSH
1937: LD_INT 9
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 133
1946: PUSH
1947: LD_INT 10
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// uc_side := 5 ;
1960: LD_ADDR_OWVAR 20
1964: PUSH
1965: LD_INT 5
1967: ST_TO_ADDR
// uc_nation := 2 ;
1968: LD_ADDR_OWVAR 21
1972: PUSH
1973: LD_INT 2
1975: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1976: LD_INT 5
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: LD_INT 13
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: LD_INT 32
1993: PPUSH
1994: LD_INT 70
1996: PPUSH
1997: CALL 344 0 7
// veh := CreateVehicle ;
2001: LD_ADDR_VAR 0 1
2005: PUSH
2006: CALL_OW 45
2010: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_INT 3
2018: PPUSH
2019: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2023: LD_VAR 0 1
2027: PPUSH
2028: LD_INT 8
2030: PPUSH
2031: LD_INT 0
2033: PPUSH
2034: CALL_OW 49
// if not cargoDriver then
2038: LD_EXP 33
2042: NOT
2043: IFFALSE 2068
// begin PrepareHuman ( false , 1 , 3 ) ;
2045: LD_INT 0
2047: PPUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 3
2053: PPUSH
2054: CALL_OW 380
// cargoDriver := CreateHuman ;
2058: LD_ADDR_EXP 33
2062: PUSH
2063: CALL_OW 44
2067: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2068: LD_EXP 33
2072: PPUSH
2073: LD_VAR 0 1
2077: PPUSH
2078: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2082: LD_VAR 0 1
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: LD_INT 100
2092: PPUSH
2093: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2097: LD_VAR 0 1
2101: PPUSH
2102: LD_VAR 0 2
2106: PUSH
2107: LD_EXP 34
2111: ARRAY
2112: PUSH
2113: LD_INT 1
2115: ARRAY
2116: PPUSH
2117: LD_VAR 0 2
2121: PUSH
2122: LD_EXP 34
2126: ARRAY
2127: PUSH
2128: LD_INT 2
2130: ARRAY
2131: PPUSH
2132: CALL_OW 111
// AddComUnload ( veh ) ;
2136: LD_VAR 0 1
2140: PPUSH
2141: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2145: LD_VAR 0 1
2149: PPUSH
2150: LD_INT 133
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL_OW 171
// wait ( 0 0$5 ) ;
2160: LD_INT 175
2162: PPUSH
2163: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2167: LD_INT 35
2169: PPUSH
2170: CALL_OW 67
// if not HasTask ( veh ) then
2174: LD_VAR 0 1
2178: PPUSH
2179: CALL_OW 314
2183: NOT
2184: IFFALSE 2201
// ComMoveXY ( veh , 133 , 2 ) ;
2186: LD_VAR 0 1
2190: PPUSH
2191: LD_INT 133
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2201: LD_VAR 0 1
2205: PPUSH
2206: LD_INT 133
2208: PPUSH
2209: LD_INT 2
2211: PPUSH
2212: CALL_OW 307
2216: IFTRUE 2232
2218: PUSH
2219: LD_VAR 0 1
2223: PPUSH
2224: LD_INT 8
2226: PPUSH
2227: CALL_OW 308
2231: OR
2232: IFFALSE 2167
// RemoveUnit ( cargoDriver ) ;
2234: LD_EXP 33
2238: PPUSH
2239: CALL_OW 64
// RemoveUnit ( veh ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: CALL_OW 64
// if tick >= 20 20$00 then
2252: LD_OWVAR 1
2256: PUSH
2257: LD_INT 42000
2259: GREATEREQUAL
2260: IFFALSE 2263
// disable ;
2262: DISABLE
// end ; end_of_file
2263: PPOPN 2
2265: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
2273: PPUSH
2274: PPUSH
2275: PPUSH
2276: PPUSH
// uc_side := 3 ;
2277: LD_ADDR_OWVAR 20
2281: PUSH
2282: LD_INT 3
2284: ST_TO_ADDR
// uc_nation := 3 ;
2285: LD_ADDR_OWVAR 21
2289: PUSH
2290: LD_INT 3
2292: ST_TO_ADDR
// ruForce := [ ] ;
2293: LD_ADDR_EXP 38
2297: PUSH
2298: EMPTY
2299: ST_TO_ADDR
// ruMech := [ ] ;
2300: LD_ADDR_EXP 40
2304: PUSH
2305: EMPTY
2306: ST_TO_ADDR
// ruEng := [ ] ;
2307: LD_ADDR_EXP 39
2311: PUSH
2312: EMPTY
2313: ST_TO_ADDR
// ruSci := [ ] ;
2314: LD_ADDR_EXP 41
2318: PUSH
2319: EMPTY
2320: ST_TO_ADDR
// ruMobile := [ ] ;
2321: LD_ADDR_EXP 42
2325: PUSH
2326: EMPTY
2327: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2328: LD_ADDR_EXP 35
2332: PUSH
2333: LD_STRING Burlak
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: LD_STRING 
2341: PPUSH
2342: CALL 33449 0 3
2346: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2347: LD_ADDR_EXP 36
2351: PUSH
2352: LD_STRING Gaydar
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: LD_STRING 
2360: PPUSH
2361: CALL 33449 0 3
2365: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2366: LD_ADDR_EXP 37
2370: PUSH
2371: LD_STRING Kuzmov
2373: PPUSH
2374: LD_INT 0
2376: PPUSH
2377: LD_STRING 
2379: PPUSH
2380: CALL 33449 0 3
2384: ST_TO_ADDR
// SetSkill ( Kuzmov , skill_combat , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
2385: LD_EXP 37
2389: PPUSH
2390: LD_INT 1
2392: PPUSH
2393: LD_INT 3
2395: PUSH
2396: LD_INT 4
2398: PUSH
2399: LD_INT 5
2401: PUSH
2402: LD_INT 6
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_OWVAR 67
2415: ARRAY
2416: PPUSH
2417: CALL_OW 237
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2421: LD_EXP 37
2425: PPUSH
2426: LD_INT 200
2428: PPUSH
2429: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2433: LD_INT 200
2435: PPUSH
2436: LD_STRING chuikov
2438: PPUSH
2439: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2443: LD_INT 200
2445: PPUSH
2446: CALL_OW 274
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 800
2456: PUSH
2457: LD_INT 1000
2459: PUSH
2460: LD_INT 1250
2462: PUSH
2463: LD_INT 1300
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PUSH
2472: LD_OWVAR 67
2476: ARRAY
2477: PPUSH
2478: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2482: LD_INT 200
2484: PPUSH
2485: CALL_OW 274
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 160
2495: PPUSH
2496: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2500: LD_INT 225
2502: PPUSH
2503: CALL_OW 274
2507: PPUSH
2508: LD_INT 1
2510: PPUSH
2511: LD_INT 200
2513: PPUSH
2514: CALL_OW 277
// oil := 150 ;
2518: LD_ADDR_VAR 0 9
2522: PUSH
2523: LD_INT 150
2525: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2526: LD_EXP 5
2530: PUSH
2531: LD_INT 94500
2533: PUSH
2534: LD_INT 84000
2536: PUSH
2537: LD_INT 73500
2539: PUSH
2540: LD_INT 67200
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PUSH
2549: LD_OWVAR 67
2553: ARRAY
2554: GREATEREQUAL
2555: IFFALSE 2710
// begin oil := 450 ;
2557: LD_ADDR_VAR 0 9
2561: PUSH
2562: LD_INT 450
2564: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2565: LD_ADDR_VAR 0 7
2569: PUSH
2570: LD_INT 123
2572: PUSH
2573: LD_INT 17
2575: PUSH
2576: LD_INT 3
2578: PUSH
2579: LD_INT 31
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 152
2590: PUSH
2591: LD_INT 38
2593: PUSH
2594: LD_INT 3
2596: PUSH
2597: LD_INT 31
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 81
2608: PUSH
2609: LD_INT 6
2611: PUSH
2612: LD_INT 4
2614: PUSH
2615: LD_INT 31
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 113
2626: PUSH
2627: LD_INT 67
2629: PUSH
2630: LD_INT 4
2632: PUSH
2633: LD_INT 32
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// for i in tmp do
2648: LD_ADDR_VAR 0 4
2652: PUSH
2653: LD_VAR 0 7
2657: PUSH
2658: FOR_IN
2659: IFFALSE 2708
// begin bc_type := i [ 4 ] ;
2661: LD_ADDR_OWVAR 42
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 4
2673: ARRAY
2674: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2675: LD_VAR 0 4
2679: PUSH
2680: LD_INT 1
2682: ARRAY
2683: PPUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_INT 2
2691: ARRAY
2692: PPUSH
2693: LD_VAR 0 4
2697: PUSH
2698: LD_INT 3
2700: ARRAY
2701: PPUSH
2702: CALL_OW 47
// end ;
2706: GO 2658
2708: POP
2709: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2710: LD_INT 225
2712: PPUSH
2713: CALL_OW 274
2717: PPUSH
2718: LD_INT 2
2720: PPUSH
2721: LD_VAR 0 9
2725: PPUSH
2726: CALL_OW 277
// if Difficulty > 1 then
2730: LD_OWVAR 67
2734: PUSH
2735: LD_INT 1
2737: GREATER
2738: IFFALSE 2833
// begin bc_type := b_bunker ;
2740: LD_ADDR_OWVAR 42
2744: PUSH
2745: LD_INT 32
2747: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2748: LD_ADDR_VAR 0 7
2752: PUSH
2753: LD_INT 121
2755: PUSH
2756: LD_INT 85
2758: PUSH
2759: LD_INT 5
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 93
2769: PUSH
2770: LD_INT 72
2772: PUSH
2773: LD_INT 1
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// for i in tmp do
2785: LD_ADDR_VAR 0 4
2789: PUSH
2790: LD_VAR 0 7
2794: PUSH
2795: FOR_IN
2796: IFFALSE 2831
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 1
2805: ARRAY
2806: PPUSH
2807: LD_VAR 0 4
2811: PUSH
2812: LD_INT 2
2814: ARRAY
2815: PPUSH
2816: LD_VAR 0 4
2820: PUSH
2821: LD_INT 3
2823: ARRAY
2824: PPUSH
2825: CALL_OW 47
2829: GO 2795
2831: POP
2832: POP
// end ; base := GetBase ( ruMainBase ) ;
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: LD_INT 200
2840: PPUSH
2841: CALL_OW 274
2845: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2846: LD_ADDR_VAR 0 3
2850: PUSH
2851: LD_VAR 0 2
2855: PPUSH
2856: CALL_OW 417
2860: ST_TO_ADDR
// for b in blist do
2861: LD_ADDR_VAR 0 5
2865: PUSH
2866: LD_VAR 0 3
2870: PUSH
2871: FOR_IN
2872: IFFALSE 3323
// begin if b [ 1 ] = b_factory then
2874: LD_VAR 0 5
2878: PUSH
2879: LD_INT 1
2881: ARRAY
2882: PUSH
2883: LD_INT 3
2885: EQUAL
2886: IFFALSE 3037
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2888: LD_ADDR_VAR 0 8
2892: PUSH
2893: LD_VAR 0 5
2897: PUSH
2898: LD_INT 2
2900: ARRAY
2901: PPUSH
2902: LD_VAR 0 5
2906: PUSH
2907: LD_INT 3
2909: ARRAY
2910: PPUSH
2911: CALL_OW 428
2915: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2916: LD_ADDR_VAR 0 4
2920: PUSH
2921: DOUBLE
2922: LD_INT 1
2924: DEC
2925: ST_TO_ADDR
2926: LD_INT 2
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: LD_OWVAR 67
2936: PLUS
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: LD_EXP 10
2946: PUSH
2947: LD_INT 3
2949: GREATER
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: ARRAY
2955: PUSH
2956: FOR_TO
2957: IFFALSE 3033
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 3
2964: PPUSH
2965: LD_INT 1
2967: PUSH
2968: LD_OWVAR 67
2972: PLUS
2973: PPUSH
2974: CALL_OW 380
// un := CreateHuman ;
2978: LD_ADDR_VAR 0 6
2982: PUSH
2983: CALL_OW 44
2987: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2988: LD_ADDR_EXP 40
2992: PUSH
2993: LD_EXP 40
2997: PPUSH
2998: LD_EXP 40
3002: PUSH
3003: LD_INT 1
3005: PLUS
3006: PPUSH
3007: LD_VAR 0 6
3011: PPUSH
3012: CALL_OW 1
3016: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
3017: LD_VAR 0 6
3021: PPUSH
3022: LD_VAR 0 8
3026: PPUSH
3027: CALL_OW 52
// end ;
3031: GO 2956
3033: POP
3034: POP
// end else
3035: GO 3321
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
3037: LD_VAR 0 5
3041: PUSH
3042: LD_INT 1
3044: ARRAY
3045: PUSH
3046: LD_INT 6
3048: PUSH
3049: LD_INT 7
3051: PUSH
3052: LD_INT 8
3054: PUSH
3055: LD_INT 10
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: IN
3064: IFFALSE 3174
// begin for i := 1 to 2 do
3066: LD_ADDR_VAR 0 4
3070: PUSH
3071: DOUBLE
3072: LD_INT 1
3074: DEC
3075: ST_TO_ADDR
3076: LD_INT 2
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3170
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3082: LD_INT 0
3084: PPUSH
3085: LD_INT 4
3087: PPUSH
3088: LD_OWVAR 67
3092: PPUSH
3093: CALL_OW 380
// un := CreateHuman ;
3097: LD_ADDR_VAR 0 6
3101: PUSH
3102: CALL_OW 44
3106: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3107: LD_ADDR_EXP 41
3111: PUSH
3112: LD_EXP 41
3116: PPUSH
3117: LD_EXP 41
3121: PUSH
3122: LD_INT 1
3124: PLUS
3125: PPUSH
3126: LD_VAR 0 6
3130: PPUSH
3131: CALL_OW 1
3135: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3136: LD_VAR 0 6
3140: PPUSH
3141: LD_VAR 0 5
3145: PUSH
3146: LD_INT 2
3148: ARRAY
3149: PPUSH
3150: LD_VAR 0 5
3154: PUSH
3155: LD_INT 3
3157: ARRAY
3158: PPUSH
3159: CALL_OW 428
3163: PPUSH
3164: CALL_OW 52
// end ;
3168: GO 3079
3170: POP
3171: POP
// end else
3172: GO 3321
// if b [ 1 ] = b_warehouse then
3174: LD_VAR 0 5
3178: PUSH
3179: LD_INT 1
3181: ARRAY
3182: PUSH
3183: LD_INT 1
3185: EQUAL
3186: IFFALSE 3321
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: DOUBLE
3194: LD_INT 1
3196: DEC
3197: ST_TO_ADDR
3198: LD_INT 1
3200: PUSH
3201: LD_INT 1
3203: PUSH
3204: LD_OWVAR 67
3208: PLUS
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_EXP 10
3218: PUSH
3219: LD_INT 3
3221: GREATER
3222: PUSH
3223: LD_INT 1
3225: PLUS
3226: ARRAY
3227: PUSH
3228: FOR_TO
3229: IFFALSE 3319
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3231: LD_INT 0
3233: PPUSH
3234: LD_INT 2
3236: PPUSH
3237: LD_OWVAR 67
3241: PPUSH
3242: CALL_OW 380
// un := CreateHuman ;
3246: LD_ADDR_VAR 0 6
3250: PUSH
3251: CALL_OW 44
3255: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3256: LD_ADDR_EXP 39
3260: PUSH
3261: LD_EXP 39
3265: PPUSH
3266: LD_EXP 39
3270: PUSH
3271: LD_INT 1
3273: PLUS
3274: PPUSH
3275: LD_VAR 0 6
3279: PPUSH
3280: CALL_OW 1
3284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3285: LD_VAR 0 6
3289: PPUSH
3290: LD_VAR 0 5
3294: PUSH
3295: LD_INT 2
3297: ARRAY
3298: PPUSH
3299: LD_VAR 0 5
3303: PUSH
3304: LD_INT 3
3306: ARRAY
3307: PPUSH
3308: CALL_OW 428
3312: PPUSH
3313: CALL_OW 52
// end ;
3317: GO 3228
3319: POP
3320: POP
// end ; end ;
3321: GO 2871
3323: POP
3324: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3325: LD_ADDR_VAR 0 3
3329: PUSH
3330: LD_INT 22
3332: PUSH
3333: LD_INT 3
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: PUSH
3340: LD_INT 21
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PPUSH
3354: CALL_OW 69
3358: ST_TO_ADDR
// for b in blist do
3359: LD_ADDR_VAR 0 5
3363: PUSH
3364: LD_VAR 0 3
3368: PUSH
3369: FOR_IN
3370: IFFALSE 3392
// SetBLevel ( b , 3 + Difficulty ) ;
3372: LD_VAR 0 5
3376: PPUSH
3377: LD_INT 3
3379: PUSH
3380: LD_OWVAR 67
3384: PLUS
3385: PPUSH
3386: CALL_OW 241
3390: GO 3369
3392: POP
3393: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3394: LD_ADDR_VAR 0 3
3398: PUSH
3399: LD_INT 22
3401: PUSH
3402: LD_INT 3
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: LD_INT 30
3411: PUSH
3412: LD_INT 32
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PPUSH
3423: CALL_OW 69
3427: ST_TO_ADDR
// for b in blist do
3428: LD_ADDR_VAR 0 5
3432: PUSH
3433: LD_VAR 0 3
3437: PUSH
3438: FOR_IN
3439: IFFALSE 3548
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3441: LD_INT 0
3443: PPUSH
3444: LD_INT 1
3446: PPUSH
3447: LD_INT 1
3449: PUSH
3450: LD_OWVAR 67
3454: PLUS
3455: PPUSH
3456: CALL_OW 380
// un := CreateHuman ;
3460: LD_ADDR_VAR 0 6
3464: PUSH
3465: CALL_OW 44
3469: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3470: LD_ADDR_EXP 38
3474: PUSH
3475: LD_EXP 38
3479: PPUSH
3480: LD_EXP 38
3484: PUSH
3485: LD_INT 1
3487: PLUS
3488: PPUSH
3489: LD_VAR 0 6
3493: PPUSH
3494: CALL_OW 1
3498: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3499: LD_VAR 0 6
3503: PPUSH
3504: LD_VAR 0 5
3508: PPUSH
3509: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3513: LD_VAR 0 5
3517: PPUSH
3518: LD_INT 44
3520: PUSH
3521: LD_INT 43
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PUSH
3528: LD_VAR 0 5
3532: PUSH
3533: LD_INT 2
3535: MOD
3536: PUSH
3537: LD_INT 1
3539: PLUS
3540: ARRAY
3541: PPUSH
3542: CALL_OW 431
// end ;
3546: GO 3438
3548: POP
3549: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3550: LD_ADDR_VAR 0 3
3554: PUSH
3555: LD_INT 22
3557: PUSH
3558: LD_INT 3
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 30
3567: PUSH
3568: LD_INT 31
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PPUSH
3579: CALL_OW 69
3583: ST_TO_ADDR
// for b in blist do
3584: LD_ADDR_VAR 0 5
3588: PUSH
3589: LD_VAR 0 3
3593: PUSH
3594: FOR_IN
3595: IFFALSE 3694
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3597: LD_INT 0
3599: PPUSH
3600: LD_INT 1
3602: PPUSH
3603: LD_INT 1
3605: PUSH
3606: LD_OWVAR 67
3610: PLUS
3611: PPUSH
3612: CALL_OW 380
// un := CreateHuman ;
3616: LD_ADDR_VAR 0 6
3620: PUSH
3621: CALL_OW 44
3625: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3626: LD_ADDR_EXP 38
3630: PUSH
3631: LD_EXP 38
3635: PPUSH
3636: LD_EXP 38
3640: PUSH
3641: LD_INT 1
3643: PLUS
3644: PPUSH
3645: LD_VAR 0 6
3649: PPUSH
3650: CALL_OW 1
3654: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3655: LD_VAR 0 6
3659: PPUSH
3660: LD_VAR 0 5
3664: PPUSH
3665: CALL_OW 254
3669: PUSH
3670: LD_INT 3
3672: PLUS
3673: PPUSH
3674: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3678: LD_VAR 0 6
3682: PPUSH
3683: LD_VAR 0 5
3687: PPUSH
3688: CALL_OW 52
// end ;
3692: GO 3594
3694: POP
3695: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_INT 22
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: LD_INT 2
3713: PUSH
3714: LD_INT 30
3716: PUSH
3717: LD_INT 4
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 30
3726: PUSH
3727: LD_INT 5
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: ST_TO_ADDR
// for b in blist do
3748: LD_ADDR_VAR 0 5
3752: PUSH
3753: LD_VAR 0 3
3757: PUSH
3758: FOR_IN
3759: IFFALSE 3855
// begin for i := 1 to 2 do
3761: LD_ADDR_VAR 0 4
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 2
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3851
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3777: LD_INT 0
3779: PPUSH
3780: LD_INT 1
3782: PPUSH
3783: LD_INT 1
3785: PUSH
3786: LD_OWVAR 67
3790: PLUS
3791: PPUSH
3792: CALL_OW 380
// un := CreateHuman ;
3796: LD_ADDR_VAR 0 6
3800: PUSH
3801: CALL_OW 44
3805: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3806: LD_ADDR_EXP 38
3810: PUSH
3811: LD_EXP 38
3815: PPUSH
3816: LD_EXP 38
3820: PUSH
3821: LD_INT 1
3823: PLUS
3824: PPUSH
3825: LD_VAR 0 6
3829: PPUSH
3830: CALL_OW 1
3834: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3835: LD_VAR 0 6
3839: PPUSH
3840: LD_VAR 0 5
3844: PPUSH
3845: CALL_OW 52
// end ;
3849: GO 3774
3851: POP
3852: POP
// end ;
3853: GO 3758
3855: POP
3856: POP
// if ibrahimOnRuSide then
3857: LD_EXP 3
3861: IFFALSE 3959
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3863: LD_ADDR_EXP 22
3867: PUSH
3868: LD_STRING IbrahimRu
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: LD_STRING 
3876: PPUSH
3877: CALL 33449 0 3
3881: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3882: LD_EXP 22
3886: PPUSH
3887: LD_INT 121
3889: PPUSH
3890: LD_INT 78
3892: PPUSH
3893: LD_INT 0
3895: PPUSH
3896: CALL_OW 48
// ComHold ( Ibrahim ) ;
3900: LD_EXP 22
3904: PPUSH
3905: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3909: LD_INT 1
3911: PPUSH
3912: LD_INT 1
3914: PPUSH
3915: LD_INT 2
3917: PPUSH
3918: CALL_OW 380
// ruSol := CreateHuman ;
3922: LD_ADDR_EXP 43
3926: PUSH
3927: CALL_OW 44
3931: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3932: LD_EXP 43
3936: PPUSH
3937: LD_INT 121
3939: PPUSH
3940: LD_INT 75
3942: PPUSH
3943: LD_INT 0
3945: PPUSH
3946: CALL_OW 48
// ComHold ( ruSol ) ;
3950: LD_EXP 43
3954: PPUSH
3955: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3959: LD_ADDR_VAR 0 4
3963: PUSH
3964: DOUBLE
3965: LD_INT 1
3967: DEC
3968: ST_TO_ADDR
3969: LD_INT 2
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: LD_OWVAR 67
3979: PLUS
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_EXP 10
3989: PUSH
3990: LD_INT 3
3992: GREATER
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: ARRAY
3998: PUSH
3999: FOR_TO
4000: IFFALSE 4069
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
4002: LD_VAR 0 8
4006: PPUSH
4007: LD_INT 21
4009: PUSH
4010: LD_INT 23
4012: PUSH
4013: LD_INT 24
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: LIST
4020: PUSH
4021: LD_VAR 0 4
4025: PUSH
4026: LD_INT 3
4028: MOD
4029: PUSH
4030: LD_INT 1
4032: PLUS
4033: ARRAY
4034: PPUSH
4035: LD_INT 1
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_INT 43
4043: PUSH
4044: LD_INT 44
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 1
4053: PPUSH
4054: LD_INT 2
4056: PPUSH
4057: CALL_OW 12
4061: ARRAY
4062: PPUSH
4063: CALL_OW 185
4067: GO 3999
4069: POP
4070: POP
// end ;
4071: LD_VAR 0 1
4075: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4076: LD_EXP 42
4080: IFFALSE 4089
4082: PUSH
4083: LD_EXP 4
4087: NOT
4088: AND
4089: IFFALSE 4631
4091: GO 4093
4093: DISABLE
4094: LD_INT 0
4096: PPUSH
4097: PPUSH
4098: PPUSH
4099: PPUSH
4100: PPUSH
4101: PPUSH
// begin enable ;
4102: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4103: LD_ADDR_VAR 0 2
4107: PUSH
4108: LD_EXP 42
4112: PPUSH
4113: LD_INT 21
4115: PUSH
4116: LD_INT 2
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PPUSH
4123: CALL_OW 72
4127: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4128: LD_ADDR_VAR 0 4
4132: PUSH
4133: LD_INT 81
4135: PUSH
4136: LD_INT 3
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: LD_INT 2
4145: PUSH
4146: LD_INT 95
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 95
4158: PUSH
4159: LD_INT 5
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 95
4168: PUSH
4169: LD_INT 6
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 95
4178: PUSH
4179: LD_INT 7
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PPUSH
4197: CALL_OW 69
4201: ST_TO_ADDR
// for i in filter do
4202: LD_ADDR_VAR 0 1
4206: PUSH
4207: LD_VAR 0 2
4211: PUSH
4212: FOR_IN
4213: IFFALSE 4629
// begin tmp := IsDrivenBy ( i ) ;
4215: LD_ADDR_VAR 0 3
4219: PUSH
4220: LD_VAR 0 1
4224: PPUSH
4225: CALL_OW 311
4229: ST_TO_ADDR
// tag := GetTag ( i ) ;
4230: LD_ADDR_VAR 0 6
4234: PUSH
4235: LD_VAR 0 1
4239: PPUSH
4240: CALL_OW 110
4244: ST_TO_ADDR
// if not tmp then
4245: LD_VAR 0 3
4249: NOT
4250: IFFALSE 4254
// continue ;
4252: GO 4212
// if GetFuel ( i ) > 90 and tag = 2 then
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 261
4263: PUSH
4264: LD_INT 90
4266: GREATER
4267: IFFALSE 4279
4269: PUSH
4270: LD_VAR 0 6
4274: PUSH
4275: LD_INT 2
4277: EQUAL
4278: AND
4279: IFFALSE 4295
// SetTag ( i , 0 ) else
4281: LD_VAR 0 1
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 109
4293: GO 4338
// if GetTag ( i ) = 2 then
4295: LD_VAR 0 1
4299: PPUSH
4300: CALL_OW 110
4304: PUSH
4305: LD_INT 2
4307: EQUAL
4308: IFFALSE 4338
// begin x := rand ( 1 , 2 ) ;
4310: LD_ADDR_VAR 0 5
4314: PUSH
4315: LD_INT 1
4317: PPUSH
4318: LD_INT 2
4320: PPUSH
4321: CALL_OW 12
4325: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4326: LD_VAR 0 1
4330: PPUSH
4331: LD_INT 200
4333: PPUSH
4334: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4338: LD_VAR 0 1
4342: PPUSH
4343: CALL_OW 256
4347: PUSH
4348: LD_INT 650
4350: GREATEREQUAL
4351: IFFALSE 4360
4353: PUSH
4354: LD_VAR 0 6
4358: NOT
4359: AND
4360: IFFALSE 4430
// if enemy then
4362: LD_VAR 0 4
4366: IFFALSE 4394
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_VAR 0 4
4377: PPUSH
4378: LD_VAR 0 1
4382: PPUSH
4383: CALL_OW 74
4387: PPUSH
4388: CALL_OW 115
4392: GO 4430
// if GetDistUnitXY ( i , 112 , 119 ) > 6 then
4394: LD_VAR 0 1
4398: PPUSH
4399: LD_INT 112
4401: PPUSH
4402: LD_INT 119
4404: PPUSH
4405: CALL_OW 297
4409: PUSH
4410: LD_INT 6
4412: GREATER
4413: IFFALSE 4430
// ComMoveXY ( i , 112 , 119 ) ;
4415: LD_VAR 0 1
4419: PPUSH
4420: LD_INT 112
4422: PPUSH
4423: LD_INT 119
4425: PPUSH
4426: CALL_OW 111
// if GetLives ( i ) < 650 and not tag then
4430: LD_VAR 0 1
4434: PPUSH
4435: CALL_OW 256
4439: PUSH
4440: LD_INT 650
4442: LESS
4443: IFFALSE 4452
4445: PUSH
4446: LD_VAR 0 6
4450: NOT
4451: AND
4452: IFFALSE 4481
// begin SetTag ( i , 1 ) ;
4454: LD_VAR 0 1
4458: PPUSH
4459: LD_INT 1
4461: PPUSH
4462: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4466: LD_VAR 0 1
4470: PPUSH
4471: LD_INT 112
4473: PPUSH
4474: LD_INT 119
4476: PPUSH
4477: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 110
4490: PUSH
4491: LD_INT 1
4493: EQUAL
4494: IFFALSE 4517
4496: PUSH
4497: LD_VAR 0 1
4501: PPUSH
4502: LD_INT 112
4504: PPUSH
4505: LD_INT 119
4507: PPUSH
4508: CALL_OW 297
4512: PUSH
4513: LD_INT 9
4515: LESS
4516: AND
4517: IFFALSE 4525
4519: PUSH
4520: LD_VAR 0 3
4524: AND
4525: IFFALSE 4627
// begin ComExitVehicle ( tmp ) ;
4527: LD_VAR 0 3
4531: PPUSH
4532: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4536: LD_VAR 0 3
4540: PPUSH
4541: LD_VAR 0 1
4545: PPUSH
4546: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4550: LD_INT 35
4552: PPUSH
4553: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4557: LD_VAR 0 1
4561: PPUSH
4562: CALL_OW 256
4566: PUSH
4567: LD_INT 1000
4569: EQUAL
4570: IFFALSE 4550
// ComEnterUnit ( tmp , i ) ;
4572: LD_VAR 0 3
4576: PPUSH
4577: LD_VAR 0 1
4581: PPUSH
4582: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4586: LD_VAR 0 1
4590: PPUSH
4591: CALL_OW 261
4595: PUSH
4596: LD_INT 50
4598: LESSEQUAL
4599: IFFALSE 4615
// SetTag ( i , 2 ) else
4601: LD_VAR 0 1
4605: PPUSH
4606: LD_INT 2
4608: PPUSH
4609: CALL_OW 109
4613: GO 4627
// SetTag ( i , 0 ) ;
4615: LD_VAR 0 1
4619: PPUSH
4620: LD_INT 0
4622: PPUSH
4623: CALL_OW 109
// end ; end ;
4627: GO 4212
4629: POP
4630: POP
// end ;
4631: PPOPN 6
4633: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4634: LD_EXP 4
4638: NOT
4639: IFFALSE 4647
4641: PUSH
4642: LD_EXP 39
4646: AND
4647: IFFALSE 4910
4649: GO 4651
4651: DISABLE
4652: LD_INT 0
4654: PPUSH
4655: PPUSH
4656: PPUSH
4657: PPUSH
// begin enable ;
4658: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: LD_INT 3
4666: PPUSH
4667: LD_INT 22
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 21
4679: PUSH
4680: LD_INT 3
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: LD_INT 3
4689: PUSH
4690: LD_INT 24
4692: PUSH
4693: LD_INT 1000
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: PPUSH
4709: CALL_OW 70
4713: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4714: LD_ADDR_VAR 0 3
4718: PUSH
4719: LD_EXP 39
4723: PPUSH
4724: LD_INT 50
4726: PUSH
4727: EMPTY
4728: LIST
4729: PPUSH
4730: CALL_OW 72
4734: ST_TO_ADDR
// if filter and tmp then
4735: LD_VAR 0 2
4739: IFFALSE 4747
4741: PUSH
4742: LD_VAR 0 3
4746: AND
4747: IFFALSE 4839
// begin for i in tmp do
4749: LD_ADDR_VAR 0 1
4753: PUSH
4754: LD_VAR 0 3
4758: PUSH
4759: FOR_IN
4760: IFFALSE 4835
// begin if GetTag ( i ) = tEscape then
4762: LD_VAR 0 1
4766: PPUSH
4767: CALL_OW 110
4771: PUSH
4772: LD_EXP 18
4776: EQUAL
4777: IFFALSE 4781
// continue ;
4779: GO 4759
// if IsInUnit ( i ) then
4781: LD_VAR 0 1
4785: PPUSH
4786: CALL_OW 310
4790: IFFALSE 4803
// ComExitBuilding ( i ) else
4792: LD_VAR 0 1
4796: PPUSH
4797: CALL_OW 122
4801: GO 4833
// if not HasTask ( i ) then
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 314
4812: NOT
4813: IFFALSE 4833
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4815: LD_VAR 0 1
4819: PPUSH
4820: LD_VAR 0 2
4824: PUSH
4825: LD_INT 1
4827: ARRAY
4828: PPUSH
4829: CALL_OW 130
// end ;
4833: GO 4759
4835: POP
4836: POP
// end else
4837: GO 4910
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4839: LD_VAR 0 3
4843: PPUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: EMPTY
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 72
4861: IFFALSE 4910
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4863: LD_ADDR_VAR 0 1
4867: PUSH
4868: LD_VAR 0 3
4872: PPUSH
4873: LD_INT 3
4875: PUSH
4876: LD_INT 54
4878: PUSH
4879: EMPTY
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PPUSH
4886: CALL_OW 72
4890: PUSH
4891: FOR_IN
4892: IFFALSE 4908
// ComEnterUnit ( i , ruMainBase ) ;
4894: LD_VAR 0 1
4898: PPUSH
4899: LD_INT 200
4901: PPUSH
4902: CALL_OW 120
4906: GO 4891
4908: POP
4909: POP
// end ; end ;
4910: PPOPN 4
4912: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4913: LD_EXP 4
4917: NOT
4918: IFFALSE 4926
4920: PUSH
4921: LD_EXP 41
4925: AND
4926: IFFALSE 5207
4928: GO 4930
4930: DISABLE
4931: LD_INT 0
4933: PPUSH
4934: PPUSH
4935: PPUSH
4936: PPUSH
// begin enable ;
4937: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: LD_INT 3
4945: PPUSH
4946: LD_INT 22
4948: PUSH
4949: LD_INT 3
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 3
4968: PUSH
4969: LD_INT 24
4971: PUSH
4972: LD_INT 1000
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 70
4992: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4993: LD_ADDR_VAR 0 3
4997: PUSH
4998: LD_EXP 41
5002: PPUSH
5003: LD_INT 50
5005: PUSH
5006: EMPTY
5007: LIST
5008: PPUSH
5009: CALL_OW 72
5013: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
5014: LD_ADDR_VAR 0 4
5018: PUSH
5019: LD_INT 118
5021: PPUSH
5022: LD_INT 121
5024: PPUSH
5025: CALL_OW 428
5029: ST_TO_ADDR
// if filter and tmp then
5030: LD_VAR 0 2
5034: IFFALSE 5042
5036: PUSH
5037: LD_VAR 0 3
5041: AND
5042: IFFALSE 5134
// begin for i in tmp do
5044: LD_ADDR_VAR 0 1
5048: PUSH
5049: LD_VAR 0 3
5053: PUSH
5054: FOR_IN
5055: IFFALSE 5130
// begin if GetTag ( i ) = tEscape then
5057: LD_VAR 0 1
5061: PPUSH
5062: CALL_OW 110
5066: PUSH
5067: LD_EXP 18
5071: EQUAL
5072: IFFALSE 5076
// continue ;
5074: GO 5054
// if IsInUnit ( i ) then
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 310
5085: IFFALSE 5098
// ComExitBuilding ( i ) else
5087: LD_VAR 0 1
5091: PPUSH
5092: CALL_OW 122
5096: GO 5128
// if not HasTask ( i ) then
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL_OW 314
5107: NOT
5108: IFFALSE 5128
// ComHeal ( i , filter [ 1 ] ) ;
5110: LD_VAR 0 1
5114: PPUSH
5115: LD_VAR 0 2
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: CALL_OW 128
// end ;
5128: GO 5054
5130: POP
5131: POP
// end else
5132: GO 5207
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5134: LD_VAR 0 3
5138: PPUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 54
5144: PUSH
5145: EMPTY
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 72
5156: IFFALSE 5207
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5158: LD_ADDR_VAR 0 1
5162: PUSH
5163: LD_VAR 0 3
5167: PPUSH
5168: LD_INT 3
5170: PUSH
5171: LD_INT 54
5173: PUSH
5174: EMPTY
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 72
5185: PUSH
5186: FOR_IN
5187: IFFALSE 5205
// ComEnterUnit ( i , lab ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_VAR 0 4
5198: PPUSH
5199: CALL_OW 120
5203: GO 5186
5205: POP
5206: POP
// end ; end ; end_of_file
5207: PPOPN 4
5209: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5210: LD_VAR 0 1
5214: PPUSH
5215: CALL 26975 0 1
// if un = Heike then
5219: LD_VAR 0 1
5223: PUSH
5224: LD_EXP 19
5228: EQUAL
5229: IFFALSE 5238
// YouLost ( Heike ) ;
5231: LD_STRING Heike
5233: PPUSH
5234: CALL_OW 104
// if un in ruEng then
5238: LD_VAR 0 1
5242: PUSH
5243: LD_EXP 39
5247: IN
5248: IFFALSE 5266
// ruEng := ruEng diff un ;
5250: LD_ADDR_EXP 39
5254: PUSH
5255: LD_EXP 39
5259: PUSH
5260: LD_VAR 0 1
5264: DIFF
5265: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5266: LD_VAR 0 1
5270: PUSH
5271: LD_INT 22
5273: PUSH
5274: LD_INT 2
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 21
5283: PUSH
5284: LD_INT 1
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: LD_INT 23
5293: PUSH
5294: LD_INT 2
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: PPUSH
5306: CALL_OW 69
5310: IN
5311: IFFALSE 5327
// loseCounter := loseCounter + 1 ;
5313: LD_ADDR_EXP 6
5317: PUSH
5318: LD_EXP 6
5322: PUSH
5323: LD_INT 1
5325: PLUS
5326: ST_TO_ADDR
// end ;
5327: PPOPN 1
5329: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5330: LD_INT 0
5332: PPUSH
5333: PPUSH
// begin if un in ruMobile then
5334: LD_VAR 0 2
5338: PUSH
5339: LD_EXP 42
5343: IN
5344: IFFALSE 5507
// begin ruMobile := ruMobile diff un ;
5346: LD_ADDR_EXP 42
5350: PUSH
5351: LD_EXP 42
5355: PUSH
5356: LD_VAR 0 2
5360: DIFF
5361: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5362: LD_ADDR_VAR 0 5
5366: PUSH
5367: LD_VAR 0 2
5371: PPUSH
5372: CALL_OW 264
5376: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5377: LD_ADDR_VAR 0 6
5381: PUSH
5382: LD_INT 110
5384: PPUSH
5385: LD_INT 126
5387: PPUSH
5388: CALL_OW 428
5392: ST_TO_ADDR
// if not driver or not fac then
5393: LD_VAR 0 1
5397: NOT
5398: IFTRUE 5407
5400: PUSH
5401: LD_VAR 0 6
5405: NOT
5406: OR
5407: IFFALSE 5411
// exit ;
5409: GO 5507
// AddComMoveXY ( driver , 111 , 121 ) ;
5411: LD_VAR 0 1
5415: PPUSH
5416: LD_INT 111
5418: PPUSH
5419: LD_INT 121
5421: PPUSH
5422: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5426: LD_VAR 0 1
5430: PPUSH
5431: LD_VAR 0 6
5435: PPUSH
5436: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5440: LD_INT 35
5442: PPUSH
5443: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: CALL_OW 301
5456: IFTRUE 5469
5458: PUSH
5459: LD_VAR 0 1
5463: PPUSH
5464: CALL_OW 310
5468: OR
5469: IFFALSE 5440
// if IsDead ( driver ) then
5471: LD_VAR 0 1
5475: PPUSH
5476: CALL_OW 301
5480: IFFALSE 5484
// exit ;
5482: GO 5507
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5484: LD_VAR 0 6
5488: PPUSH
5489: LD_INT 21
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: LD_INT 1
5497: PPUSH
5498: LD_VAR 0 5
5502: PPUSH
5503: CALL_OW 185
// end ; end ;
5507: PPOPN 6
5509: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5510: LD_VAR 0 1
5514: PPUSH
5515: LD_VAR 0 2
5519: PPUSH
5520: CALL 27033 0 2
// if GetSide ( fac ) = 3 then
5524: LD_VAR 0 2
5528: PPUSH
5529: CALL_OW 255
5533: PUSH
5534: LD_INT 3
5536: EQUAL
5537: IFFALSE 5583
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5539: LD_ADDR_EXP 42
5543: PUSH
5544: LD_EXP 42
5548: PPUSH
5549: LD_EXP 42
5553: PUSH
5554: LD_INT 1
5556: PLUS
5557: PPUSH
5558: LD_VAR 0 1
5562: PPUSH
5563: CALL_OW 1
5567: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5568: LD_VAR 0 1
5572: PPUSH
5573: LD_INT 110
5575: PPUSH
5576: LD_INT 117
5578: PPUSH
5579: CALL_OW 171
// end ; end ;
5583: PPOPN 2
5585: END
// on LeaveBuilding ( b , un ) do var barracks ;
5586: LD_INT 0
5588: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5589: LD_VAR 0 1
5593: PUSH
5594: LD_INT 130
5596: PPUSH
5597: LD_INT 17
5599: PPUSH
5600: CALL_OW 428
5604: PUSH
5605: LD_INT 138
5607: PPUSH
5608: LD_INT 22
5610: PPUSH
5611: CALL_OW 428
5615: PUSH
5616: LD_INT 123
5618: PPUSH
5619: LD_INT 17
5621: PPUSH
5622: CALL_OW 428
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: IN
5632: IFFALSE 5656
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5634: LD_VAR 0 2
5638: PPUSH
5639: LD_INT 135
5641: PPUSH
5642: LD_INT 31
5644: PPUSH
5645: CALL_OW 428
5649: PPUSH
5650: CALL_OW 180
// exit ;
5654: GO 5930
// end ; if b = HexInfo ( 135 , 31 ) then
5656: LD_VAR 0 1
5660: PUSH
5661: LD_INT 135
5663: PPUSH
5664: LD_INT 31
5666: PPUSH
5667: CALL_OW 428
5671: EQUAL
5672: IFFALSE 5744
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5674: LD_VAR 0 2
5678: PPUSH
5679: LD_INT 106
5681: PPUSH
5682: LD_INT 51
5684: PPUSH
5685: CALL_OW 428
5689: PPUSH
5690: CALL_OW 180
// if not explodeFirstDepot then
5694: LD_EXP 12
5698: NOT
5699: IFFALSE 5742
// begin explodeFirstDepot := true ;
5701: LD_ADDR_EXP 12
5705: PUSH
5706: LD_INT 1
5708: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5709: LD_INT 525
5711: PPUSH
5712: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5716: LD_INT 127
5718: PPUSH
5719: LD_INT 27
5721: PPUSH
5722: LD_INT 1
5724: PPUSH
5725: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5729: LD_INT 125
5731: PPUSH
5732: LD_INT 29
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 453
// end ; exit ;
5742: GO 5930
// end ; if b = HexInfo ( 106 , 51 ) then
5744: LD_VAR 0 1
5748: PUSH
5749: LD_INT 106
5751: PPUSH
5752: LD_INT 51
5754: PPUSH
5755: CALL_OW 428
5759: EQUAL
5760: IFFALSE 5860
// begin AddComMoveXY ( un , 106 , 93 ) ;
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_INT 106
5769: PPUSH
5770: LD_INT 93
5772: PPUSH
5773: CALL_OW 171
// if not explodeSecondDepot then
5777: LD_EXP 13
5781: NOT
5782: IFFALSE 5858
// begin explodeSecondDepot := true ;
5784: LD_ADDR_EXP 13
5788: PUSH
5789: LD_INT 1
5791: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5792: LD_INT 420
5794: PPUSH
5795: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5799: LD_INT 111
5801: PPUSH
5802: LD_INT 75
5804: PPUSH
5805: LD_INT 1
5807: PPUSH
5808: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5812: LD_INT 111
5814: PPUSH
5815: LD_INT 75
5817: PPUSH
5818: LD_INT 1
5820: PPUSH
5821: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5825: LD_INT 108
5827: PPUSH
5828: LD_INT 69
5830: PPUSH
5831: LD_INT 1
5833: PPUSH
5834: CALL_OW 453
// wait ( 0 0$2 ) ;
5838: LD_INT 70
5840: PPUSH
5841: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5845: LD_INT 94
5847: PPUSH
5848: LD_INT 65
5850: PPUSH
5851: LD_INT 1
5853: PPUSH
5854: CALL_OW 453
// end ; exit ;
5858: GO 5930
// end ; if GetBType ( b ) = b_bunker then
5860: LD_VAR 0 1
5864: PPUSH
5865: CALL_OW 266
5869: PUSH
5870: LD_INT 32
5872: EQUAL
5873: IFFALSE 5930
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: LD_VAR 0 2
5884: PPUSH
5885: LD_INT 5
5887: PPUSH
5888: CALL 1020 0 2
5892: ST_TO_ADDR
// if barracks then
5893: LD_VAR 0 3
5897: IFFALSE 5915
// AddComEnterUnit ( un , barracks ) else
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_VAR 0 3
5908: PPUSH
5909: CALL_OW 180
5913: GO 5930
// AddComMoveXY ( un , 116 , 110 ) ;
5915: LD_VAR 0 2
5919: PPUSH
5920: LD_INT 116
5922: PPUSH
5923: LD_INT 110
5925: PPUSH
5926: CALL_OW 171
// end ; end ;
5930: PPOPN 3
5932: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5933: LD_VAR 0 1
5937: PUSH
5938: LD_EXP 24
5942: EQUAL
5943: IFFALSE 5962
5945: PUSH
5946: LD_VAR 0 2
5950: PUSH
5951: LD_INT 3
5953: PUSH
5954: LD_INT 6
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: IN
5961: AND
5962: IFFALSE 5993
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5964: LD_ADDR_EXP 8
5968: PUSH
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 250
5978: PUSH
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 251
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: ST_TO_ADDR
// end ;
5993: PPOPN 3
5995: END
// every 0 0$1 trigger activeInvincible do var i ;
5996: LD_EXP 17
6000: IFFALSE 6069
6002: GO 6004
6004: DISABLE
6005: LD_INT 0
6007: PPUSH
// begin enable ;
6008: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
6009: LD_ADDR_VAR 0 1
6013: PUSH
6014: LD_INT 22
6016: PUSH
6017: LD_INT 2
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 3
6026: PUSH
6027: LD_INT 24
6029: PUSH
6030: LD_INT 1000
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PPUSH
6045: CALL_OW 69
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6067
// SetLives ( i , 1000 ) ;
6053: LD_VAR 0 1
6057: PPUSH
6058: LD_INT 1000
6060: PPUSH
6061: CALL_OW 234
6065: GO 6050
6067: POP
6068: POP
// end ; end_of_file
6069: PPOPN 1
6071: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
6072: LD_INT 0
6074: PPUSH
6075: PPUSH
6076: PPUSH
6077: PPUSH
6078: PPUSH
6079: PPUSH
6080: PPUSH
// Video ( true ) ;
6081: LD_INT 1
6083: PPUSH
6084: CALL 71621 0 1
// ChangeSideFog ( 5 , 2 ) ;
6088: LD_INT 5
6090: PPUSH
6091: LD_INT 2
6093: PPUSH
6094: CALL_OW 343
// music_nat := 4 ;
6098: LD_ADDR_OWVAR 71
6102: PUSH
6103: LD_INT 4
6105: ST_TO_ADDR
// music_class := music_combat ;
6106: LD_ADDR_OWVAR 72
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
6114: LD_INT 133
6116: PPUSH
6117: LD_INT 2
6119: PPUSH
6120: LD_INT 2
6122: PPUSH
6123: LD_INT 10
6125: PPUSH
6126: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
6130: LD_INT 133
6132: PPUSH
6133: LD_INT 2
6135: PPUSH
6136: CALL_OW 86
// wait ( 0 0$1 ) ;
6140: LD_INT 35
6142: PPUSH
6143: CALL_OW 67
// uc_side := 6 ;
6147: LD_ADDR_OWVAR 20
6151: PUSH
6152: LD_INT 6
6154: ST_TO_ADDR
// uc_nation := 3 ;
6155: LD_ADDR_OWVAR 21
6159: PUSH
6160: LD_INT 3
6162: ST_TO_ADDR
// rutmp := [ ] ;
6163: LD_ADDR_VAR 0 7
6167: PUSH
6168: EMPTY
6169: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
6170: LD_INT 6
6172: PPUSH
6173: LD_INT 3
6175: PPUSH
6176: LD_INT 21
6178: PPUSH
6179: LD_INT 1
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: LD_INT 44
6187: PPUSH
6188: LD_INT 66
6190: PPUSH
6191: CALL 344 0 7
// veh := CreateVehicle ;
6195: LD_ADDR_VAR 0 5
6199: PUSH
6200: CALL_OW 45
6204: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6205: LD_VAR 0 5
6209: PPUSH
6210: LD_INT 3
6212: PPUSH
6213: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6217: LD_VAR 0 5
6221: PPUSH
6222: LD_INT 8
6224: PPUSH
6225: LD_INT 0
6227: PPUSH
6228: CALL_OW 49
// SetLives ( veh , 500 ) ;
6232: LD_VAR 0 5
6236: PPUSH
6237: LD_INT 500
6239: PPUSH
6240: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6244: LD_INT 0
6246: PPUSH
6247: LD_INT 3
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6257: CALL_OW 44
6261: PPUSH
6262: LD_VAR 0 5
6266: PPUSH
6267: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6271: LD_VAR 0 5
6275: PPUSH
6276: LD_INT 133
6278: PPUSH
6279: LD_INT 11
6281: PPUSH
6282: CALL_OW 111
// rutmp := [ veh ] ;
6286: LD_ADDR_VAR 0 7
6290: PUSH
6291: LD_VAR 0 5
6295: PUSH
6296: EMPTY
6297: LIST
6298: ST_TO_ADDR
// for i := 1 to 4 do
6299: LD_ADDR_VAR 0 2
6303: PUSH
6304: DOUBLE
6305: LD_INT 1
6307: DEC
6308: ST_TO_ADDR
6309: LD_INT 4
6311: PUSH
6312: FOR_TO
6313: IFFALSE 6420
// begin PrepareHuman ( false , i , 2 ) ;
6315: LD_INT 0
6317: PPUSH
6318: LD_VAR 0 2
6322: PPUSH
6323: LD_INT 2
6325: PPUSH
6326: CALL_OW 380
// un := CreateHuman ;
6330: LD_ADDR_VAR 0 4
6334: PUSH
6335: CALL_OW 44
6339: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6340: LD_VAR 0 4
6344: PPUSH
6345: LD_INT 3
6347: PPUSH
6348: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6352: LD_VAR 0 4
6356: PPUSH
6357: LD_INT 8
6359: PPUSH
6360: LD_INT 0
6362: PPUSH
6363: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6367: LD_ADDR_VAR 0 7
6371: PUSH
6372: LD_VAR 0 7
6376: PPUSH
6377: LD_VAR 0 7
6381: PUSH
6382: LD_INT 1
6384: PLUS
6385: PPUSH
6386: LD_VAR 0 4
6390: PPUSH
6391: CALL_OW 1
6395: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6396: LD_VAR 0 4
6400: PPUSH
6401: LD_INT 133
6403: PPUSH
6404: LD_INT 11
6406: PPUSH
6407: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6411: LD_INT 18
6413: PPUSH
6414: CALL_OW 67
// end ;
6418: GO 6312
6420: POP
6421: POP
// for i in rutmp do
6422: LD_ADDR_VAR 0 2
6426: PUSH
6427: LD_VAR 0 7
6431: PUSH
6432: FOR_IN
6433: IFFALSE 6482
// begin AddComMoveXY ( i , 99 , 65 ) ;
6435: LD_VAR 0 2
6439: PPUSH
6440: LD_INT 99
6442: PPUSH
6443: LD_INT 65
6445: PPUSH
6446: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6450: LD_VAR 0 2
6454: PPUSH
6455: LD_INT 76
6457: PPUSH
6458: LD_INT 108
6460: PPUSH
6461: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6465: LD_VAR 0 2
6469: PPUSH
6470: LD_INT 92
6472: PPUSH
6473: LD_INT 176
6475: PPUSH
6476: CALL_OW 171
// end ;
6480: GO 6432
6482: POP
6483: POP
// wait ( 0 0$10 ) ;
6484: LD_INT 350
6486: PPUSH
6487: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6491: LD_ADDR_VAR 0 6
6495: PUSH
6496: LD_EXP 19
6500: PUSH
6501: LD_EXP 20
6505: PUSH
6506: LD_EXP 21
6510: PUSH
6511: LD_EXP 22
6515: PUSH
6516: LD_EXP 23
6520: PUSH
6521: LD_EXP 24
6525: PUSH
6526: LD_EXP 25
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 28
6540: PUSH
6541: LD_EXP 29
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: PUSH
6558: LD_EXP 30
6562: UNION
6563: ST_TO_ADDR
// tmp := tmp diff 0 ;
6564: LD_ADDR_VAR 0 6
6568: PUSH
6569: LD_VAR 0 6
6573: PUSH
6574: LD_INT 0
6576: DIFF
6577: ST_TO_ADDR
// for i in heikeVehicles do
6578: LD_ADDR_VAR 0 2
6582: PUSH
6583: LD_EXP 31
6587: PUSH
6588: FOR_IN
6589: IFFALSE 7008
// begin if not tmp then
6591: LD_VAR 0 6
6595: NOT
6596: IFFALSE 6600
// continue ;
6598: GO 6588
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6600: LD_INT 2
6602: PPUSH
6603: LD_VAR 0 2
6607: PUSH
6608: LD_INT 5
6610: ARRAY
6611: PPUSH
6612: LD_VAR 0 2
6616: PUSH
6617: LD_INT 1
6619: ARRAY
6620: PPUSH
6621: LD_VAR 0 2
6625: PUSH
6626: LD_INT 2
6628: ARRAY
6629: PPUSH
6630: LD_VAR 0 2
6634: PUSH
6635: LD_INT 3
6637: ARRAY
6638: PPUSH
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 4
6646: ARRAY
6647: PPUSH
6648: LD_INT 34
6650: PPUSH
6651: CALL 344 0 7
// veh := CreateVehicle ;
6655: LD_ADDR_VAR 0 5
6659: PUSH
6660: CALL_OW 45
6664: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 4
6672: ARRAY
6673: PUSH
6674: LD_INT 51
6676: PUSH
6677: LD_INT 32
6679: PUSH
6680: LD_INT 12
6682: PUSH
6683: LD_INT 89
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: IN
6692: IFFALSE 6772
// begin if i [ 7 ] [ 1 ] then
6694: LD_VAR 0 2
6698: PUSH
6699: LD_INT 7
6701: ARRAY
6702: PUSH
6703: LD_INT 1
6705: ARRAY
6706: IFFALSE 6733
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6708: LD_VAR 0 5
6712: PPUSH
6713: LD_INT 1
6715: PPUSH
6716: LD_VAR 0 2
6720: PUSH
6721: LD_INT 7
6723: ARRAY
6724: PUSH
6725: LD_INT 1
6727: ARRAY
6728: PPUSH
6729: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6733: LD_VAR 0 2
6737: PUSH
6738: LD_INT 7
6740: ARRAY
6741: PUSH
6742: LD_INT 2
6744: ARRAY
6745: IFFALSE 6772
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6747: LD_VAR 0 5
6751: PPUSH
6752: LD_INT 2
6754: PPUSH
6755: LD_VAR 0 2
6759: PUSH
6760: LD_INT 7
6762: ARRAY
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6772: LD_VAR 0 5
6776: PPUSH
6777: LD_INT 3
6779: PPUSH
6780: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6784: LD_VAR 0 5
6788: PPUSH
6789: LD_INT 8
6791: PPUSH
6792: LD_INT 0
6794: PPUSH
6795: CALL_OW 49
// for j := 1 to tmp do
6799: LD_ADDR_VAR 0 3
6803: PUSH
6804: DOUBLE
6805: LD_INT 1
6807: DEC
6808: ST_TO_ADDR
6809: LD_VAR 0 6
6813: PUSH
6814: FOR_TO
6815: IFFALSE 6888
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6817: LD_VAR 0 2
6821: PUSH
6822: LD_INT 8
6824: ARRAY
6825: PUSH
6826: LD_VAR 0 6
6830: PUSH
6831: LD_VAR 0 3
6835: ARRAY
6836: PPUSH
6837: CALL_OW 257
6841: EQUAL
6842: IFFALSE 6886
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6844: LD_VAR 0 6
6848: PUSH
6849: LD_VAR 0 3
6853: ARRAY
6854: PPUSH
6855: LD_VAR 0 5
6859: PPUSH
6860: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6864: LD_ADDR_VAR 0 6
6868: PUSH
6869: LD_VAR 0 6
6873: PPUSH
6874: LD_VAR 0 3
6878: PPUSH
6879: CALL_OW 3
6883: ST_TO_ADDR
// break ;
6884: GO 6888
// end ; end ;
6886: GO 6814
6888: POP
6889: POP
// if IsEmpty ( veh ) then
6890: LD_VAR 0 5
6894: PPUSH
6895: CALL 35695 0 1
6899: IFFALSE 6937
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6901: LD_VAR 0 6
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 5
6914: PPUSH
6915: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6919: LD_ADDR_VAR 0 6
6923: PUSH
6924: LD_VAR 0 6
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 3
6936: ST_TO_ADDR
// end ; if GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6937: LD_VAR 0 5
6941: PPUSH
6942: CALL_OW 264
6946: PUSH
6947: LD_INT 51
6949: PUSH
6950: LD_INT 32
6952: PUSH
6953: LD_INT 12
6955: PUSH
6956: LD_INT 89
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: IN
6965: IFFALSE 6984
// ComMoveXY ( veh , 130 , 8 ) else
6967: LD_VAR 0 5
6971: PPUSH
6972: LD_INT 130
6974: PPUSH
6975: LD_INT 8
6977: PPUSH
6978: CALL_OW 111
6982: GO 6999
// ComMoveXY ( veh , 134 , 15 ) ;
6984: LD_VAR 0 5
6988: PPUSH
6989: LD_INT 134
6991: PPUSH
6992: LD_INT 15
6994: PPUSH
6995: CALL_OW 111
// wait ( 0 0$3 ) ;
6999: LD_INT 105
7001: PPUSH
7002: CALL_OW 67
// end ;
7006: GO 6588
7008: POP
7009: POP
// if tmp then
7010: LD_VAR 0 6
7014: IFFALSE 7070
// for i in tmp do
7016: LD_ADDR_VAR 0 2
7020: PUSH
7021: LD_VAR 0 6
7025: PUSH
7026: FOR_IN
7027: IFFALSE 7068
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_INT 10
7036: PPUSH
7037: LD_INT 0
7039: PPUSH
7040: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_INT 146
7051: PPUSH
7052: LD_INT 7
7054: PPUSH
7055: CALL_OW 114
// wait ( 0 0$0.5 ) ;
7059: LD_INT 18
7061: PPUSH
7062: CALL_OW 67
// end ;
7066: GO 7026
7068: POP
7069: POP
// if heikeApes then
7070: LD_EXP 32
7074: IFFALSE 7130
// for i in heikeApes do
7076: LD_ADDR_VAR 0 2
7080: PUSH
7081: LD_EXP 32
7085: PUSH
7086: FOR_IN
7087: IFFALSE 7128
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
7089: LD_VAR 0 2
7093: PPUSH
7094: LD_INT 10
7096: PPUSH
7097: LD_INT 0
7099: PPUSH
7100: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
7104: LD_VAR 0 2
7108: PPUSH
7109: LD_INT 146
7111: PPUSH
7112: LD_INT 7
7114: PPUSH
7115: CALL_OW 114
// wait ( 0 0$0.5 ) ;
7119: LD_INT 18
7121: PPUSH
7122: CALL_OW 67
// end ;
7126: GO 7086
7128: POP
7129: POP
// DialogueOn ;
7130: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
7134: LD_EXP 19
7138: PPUSH
7139: LD_STRING DH-outpost-a-1
7141: PPUSH
7142: CALL_OW 88
// DialogueOff ;
7146: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
7150: LD_INT 133
7152: PPUSH
7153: LD_INT 2
7155: PPUSH
7156: LD_INT 2
7158: PPUSH
7159: CALL_OW 331
// activeInvincible := false ;
7163: LD_ADDR_EXP 17
7167: PUSH
7168: LD_INT 0
7170: ST_TO_ADDR
// Video ( false ) ;
7171: LD_INT 0
7173: PPUSH
7174: CALL 71621 0 1
// music_nat := 0 ;
7178: LD_ADDR_OWVAR 71
7182: PUSH
7183: LD_INT 0
7185: ST_TO_ADDR
// music_class := 0 ;
7186: LD_ADDR_OWVAR 72
7190: PUSH
7191: LD_INT 0
7193: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
7194: LD_STRING Outposts
7196: PPUSH
7197: CALL_OW 337
// SaveForQuickRestart ;
7201: CALL_OW 22
// end ;
7205: LD_VAR 0 1
7209: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
7210: LD_INT 22
7212: PUSH
7213: LD_INT 2
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 91
7222: PUSH
7223: LD_EXP 22
7227: PUSH
7228: LD_INT 20
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: IFFALSE 7252
7246: PUSH
7247: LD_EXP 3
7251: AND
7252: IFFALSE 7265
7254: PUSH
7255: LD_EXP 22
7259: PPUSH
7260: CALL_OW 302
7264: AND
7265: IFFALSE 7516
7267: GO 7269
7269: DISABLE
7270: LD_INT 0
7272: PPUSH
7273: PPUSH
7274: PPUSH
7275: PPUSH
// begin IbrahimBetrayal ;
7276: CALL 7519 0 0
// repeat wait ( 0 0$1 ) ;
7280: LD_INT 35
7282: PPUSH
7283: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7287: LD_EXP 22
7291: PPUSH
7292: CALL_OW 301
7296: IFTRUE 7347
7298: PUSH
7299: LD_INT 22
7301: PUSH
7302: LD_INT 2
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 91
7311: PUSH
7312: LD_EXP 22
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PPUSH
7329: CALL_OW 69
7333: IFFALSE 7346
7335: PUSH
7336: LD_EXP 22
7340: PPUSH
7341: CALL_OW 302
7345: AND
7346: OR
7347: IFFALSE 7280
// if IsDead ( Ibrahim ) then
7349: LD_EXP 22
7353: PPUSH
7354: CALL_OW 301
7358: IFFALSE 7362
// exit ;
7360: GO 7516
// x := GetX ( Ibrahim ) ;
7362: LD_ADDR_VAR 0 1
7366: PUSH
7367: LD_EXP 22
7371: PPUSH
7372: CALL_OW 250
7376: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7377: LD_ADDR_VAR 0 2
7381: PUSH
7382: LD_EXP 22
7386: PPUSH
7387: CALL_OW 251
7391: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: LD_EXP 22
7401: PPUSH
7402: CALL_OW 254
7406: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7407: LD_ADDR_VAR 0 4
7411: PUSH
7412: LD_EXP 22
7416: PPUSH
7417: CALL_OW 256
7421: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7422: LD_EXP 22
7426: PPUSH
7427: CALL_OW 64
// uc_side := 2 ;
7431: LD_ADDR_OWVAR 20
7435: PUSH
7436: LD_INT 2
7438: ST_TO_ADDR
// uc_nation := 2 ;
7439: LD_ADDR_OWVAR 21
7443: PUSH
7444: LD_INT 2
7446: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7447: LD_ADDR_EXP 22
7451: PUSH
7452: LD_STRING Ibrahim
7454: PPUSH
7455: LD_INT 0
7457: PPUSH
7458: LD_STRING 
7460: PPUSH
7461: CALL 33449 0 3
7465: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7466: LD_EXP 22
7470: PPUSH
7471: LD_VAR 0 3
7475: PPUSH
7476: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7480: LD_EXP 22
7484: PPUSH
7485: LD_VAR 0 1
7489: PPUSH
7490: LD_VAR 0 2
7494: PPUSH
7495: LD_INT 0
7497: PPUSH
7498: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7502: LD_EXP 22
7506: PPUSH
7507: LD_VAR 0 4
7511: PPUSH
7512: CALL_OW 234
// end ;
7516: PPOPN 4
7518: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7519: LD_INT 0
7521: PPUSH
7522: PPUSH
7523: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7524: LD_INT 122
7526: PPUSH
7527: LD_INT 77
7529: PPUSH
7530: LD_INT 2
7532: PPUSH
7533: LD_INT 6
7535: NEG
7536: PPUSH
7537: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7541: LD_EXP 22
7545: PPUSH
7546: LD_INT 123
7548: PPUSH
7549: LD_INT 79
7551: PPUSH
7552: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7556: LD_EXP 22
7560: PPUSH
7561: LD_INT 125
7563: PPUSH
7564: LD_INT 82
7566: PPUSH
7567: CALL_OW 178
// wait ( 0 0$2 ) ;
7571: LD_INT 70
7573: PPUSH
7574: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7578: LD_EXP 43
7582: PPUSH
7583: LD_EXP 22
7587: PPUSH
7588: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7592: LD_EXP 43
7596: PPUSH
7597: LD_STRING DRum-outpost-b-3
7599: PPUSH
7600: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7604: LD_ADDR_VAR 0 3
7608: PUSH
7609: LD_INT 125
7611: PPUSH
7612: LD_INT 76
7614: PPUSH
7615: CALL_OW 428
7619: PUSH
7620: LD_INT 125
7622: PPUSH
7623: LD_INT 79
7625: PPUSH
7626: CALL_OW 428
7630: PUSH
7631: LD_INT 125
7633: PPUSH
7634: LD_INT 82
7636: PPUSH
7637: CALL_OW 428
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// for i in tmp do
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_VAR 0 3
7656: PUSH
7657: FOR_IN
7658: IFFALSE 7674
// SetLives ( i , 200 ) ;
7660: LD_VAR 0 2
7664: PPUSH
7665: LD_INT 200
7667: PPUSH
7668: CALL_OW 234
7672: GO 7657
7674: POP
7675: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7676: LD_EXP 22
7680: PPUSH
7681: LD_STRING DI-outpost-b-4
7683: PPUSH
7684: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7688: LD_EXP 22
7692: PPUSH
7693: LD_INT 5
7695: PPUSH
7696: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7700: LD_EXP 22
7704: PUSH
7705: LD_EXP 43
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7718: LD_INT 122
7720: PPUSH
7721: LD_INT 77
7723: PPUSH
7724: LD_INT 2
7726: PPUSH
7727: CALL_OW 331
// if Givi then
7731: LD_EXP 20
7735: IFFALSE 7751
// Say ( Givi , DG-1-outpost-b-5 ) else
7737: LD_EXP 20
7741: PPUSH
7742: LD_STRING DG-1-outpost-b-5
7744: PPUSH
7745: CALL_OW 88
7749: GO 7816
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7751: LD_EXP 30
7755: PPUSH
7756: LD_INT 26
7758: PUSH
7759: LD_INT 2
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 72
7770: PUSH
7771: LD_INT 1
7773: ARRAY
7774: PPUSH
7775: LD_STRING DArf-outpost-b-a-5
7777: PPUSH
7778: CALL_OW 88
7782: NOT
7783: IFFALSE 7816
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7785: LD_EXP 30
7789: PPUSH
7790: LD_INT 26
7792: PUSH
7793: LD_INT 1
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 72
7804: PUSH
7805: LD_INT 1
7807: ARRAY
7808: PPUSH
7809: LD_STRING DArm-outpost-b-a-5
7811: PPUSH
7812: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7816: LD_INT 35
7818: PPUSH
7819: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7823: LD_EXP 22
7827: PPUSH
7828: CALL_OW 301
7832: IFTRUE 7867
7834: PUSH
7835: LD_EXP 19
7839: PPUSH
7840: LD_EXP 22
7844: PPUSH
7845: CALL_OW 296
7849: PUSH
7850: LD_INT 6
7852: LESS
7853: IFFALSE 7866
7855: PUSH
7856: LD_EXP 22
7860: PPUSH
7861: CALL_OW 302
7865: AND
7866: OR
7867: IFFALSE 7816
// if IsDead ( Ibrahim ) then
7869: LD_EXP 22
7873: PPUSH
7874: CALL_OW 301
7878: IFFALSE 7894
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7880: LD_EXP 19
7884: PPUSH
7885: LD_STRING DH-ibrahimdead-1
7887: PPUSH
7888: CALL_OW 88
// exit ;
7892: GO 7935
// end ; CenterNowOnUnits ( Ibrahim ) ;
7894: LD_EXP 22
7898: PPUSH
7899: CALL_OW 87
// DialogueOn ;
7903: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7907: LD_EXP 22
7911: PPUSH
7912: LD_STRING DI-ibrahimlives-1
7914: PPUSH
7915: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7919: LD_EXP 19
7923: PPUSH
7924: LD_STRING DH-Ibrahimlives-2
7926: PPUSH
7927: CALL_OW 88
// DialogueOff ;
7931: CALL_OW 7
// end ;
7935: LD_VAR 0 1
7939: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7940: LD_INT 11
7942: PPUSH
7943: LD_INT 22
7945: PUSH
7946: LD_INT 2
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 70
7957: IFTRUE 7990
7959: PUSH
7960: LD_OWVAR 1
7964: PUSH
7965: LD_INT 18900
7967: PUSH
7968: LD_INT 16800
7970: PUSH
7971: LD_INT 16800
7973: PUSH
7974: LD_INT 15750
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: PUSH
7983: LD_OWVAR 67
7987: ARRAY
7988: GREATEREQUAL
7989: OR
7990: IFFALSE 8500
7992: GO 7994
7994: DISABLE
// begin outerAreaAchived := true ;
7995: LD_ADDR_EXP 15
7999: PUSH
8000: LD_INT 1
8002: ST_TO_ADDR
// wait ( 0 0$20 ) ;
8003: LD_INT 700
8005: PPUSH
8006: CALL_OW 67
// DialogueOn ;
8010: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
8014: LD_EXP 27
8018: PPUSH
8019: LD_STRING DShar-radio-1
8021: PPUSH
8022: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
8026: LD_EXP 27
8030: PPUSH
8031: LD_STRING DShar-radio-2
8033: PPUSH
8034: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
8038: LD_EXP 19
8042: PPUSH
8043: LD_STRING DH-radio-2
8045: PPUSH
8046: CALL_OW 88
// DialogueOff ;
8050: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
8054: LD_STRING Gaidar
8056: PPUSH
8057: CALL_OW 337
// if Difficulty < 3 then
8061: LD_OWVAR 67
8065: PUSH
8066: LD_INT 3
8068: LESS
8069: IFFALSE 8135
// begin DialogueOn ;
8071: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8075: LD_INT 11
8077: PPUSH
8078: LD_INT 14
8080: PPUSH
8081: LD_INT 2
8083: PPUSH
8084: LD_INT 6
8086: NEG
8087: PPUSH
8088: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
8092: LD_INT 11
8094: PPUSH
8095: LD_INT 14
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
8105: LD_INT 11
8107: PPUSH
8108: LD_INT 14
8110: PPUSH
8111: CALL_OW 84
// dwait ( 0 0$1 ) ;
8115: LD_INT 35
8117: PPUSH
8118: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8122: LD_EXP 19
8126: PPUSH
8127: CALL_OW 87
// DialogueOff ;
8131: CALL_OW 7
// end ; wait ( 1 1$20 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
8135: LD_INT 2800
8137: PUSH
8138: LD_INT 350
8140: PPUSH
8141: LD_INT 525
8143: PPUSH
8144: CALL_OW 12
8148: PUSH
8149: LD_OWVAR 67
8153: MUL
8154: PLUS
8155: PPUSH
8156: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8160: LD_INT 35
8162: PPUSH
8163: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
8167: LD_INT 2
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: CALL_OW 428
8177: PUSH
8178: LD_INT 0
8180: EQUAL
8181: IFFALSE 8160
// SetDir ( Gaidar , 2 ) ;
8183: LD_EXP 36
8187: PPUSH
8188: LD_INT 2
8190: PPUSH
8191: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
8195: LD_EXP 36
8199: PPUSH
8200: LD_INT 2
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: LD_INT 0
8208: PPUSH
8209: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
8213: LD_EXP 36
8217: PPUSH
8218: LD_INT 19
8220: PPUSH
8221: LD_INT 24
8223: PPUSH
8224: CALL_OW 111
// if Difficulty < 3 then
8228: LD_OWVAR 67
8232: PUSH
8233: LD_INT 3
8235: LESS
8236: IFFALSE 8275
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8238: LD_INT 11
8240: PPUSH
8241: LD_INT 14
8243: PPUSH
8244: LD_INT 2
8246: PPUSH
8247: LD_INT 6
8249: NEG
8250: PPUSH
8251: CALL_OW 330
// wait ( 0 0$2 ) ;
8255: LD_INT 70
8257: PPUSH
8258: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
8262: LD_INT 11
8264: PPUSH
8265: LD_INT 14
8267: PPUSH
8268: LD_INT 2
8270: PPUSH
8271: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
8275: LD_EXP 36
8279: PPUSH
8280: LD_INT 210
8282: PPUSH
8283: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8287: LD_EXP 36
8291: PPUSH
8292: LD_INT 38
8294: PPUSH
8295: LD_INT 47
8297: PPUSH
8298: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8302: LD_EXP 36
8306: PPUSH
8307: LD_INT 32
8309: PPUSH
8310: LD_INT 59
8312: PPUSH
8313: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8317: LD_EXP 36
8321: PPUSH
8322: LD_INT 350
8324: PPUSH
8325: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8329: LD_EXP 36
8333: PPUSH
8334: LD_INT 62
8336: PPUSH
8337: LD_INT 116
8339: PPUSH
8340: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8344: LD_EXP 36
8348: PPUSH
8349: LD_INT 92
8351: PPUSH
8352: LD_INT 177
8354: PPUSH
8355: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8359: LD_INT 35
8361: PPUSH
8362: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8366: LD_EXP 36
8370: PPUSH
8371: CALL_OW 301
8375: IFTRUE 8394
8377: PUSH
8378: LD_EXP 36
8382: PPUSH
8383: LD_INT 92
8385: PPUSH
8386: LD_INT 177
8388: PPUSH
8389: CALL_OW 307
8393: OR
8394: IFFALSE 8359
// if IsAt ( Gaidar , 92 , 177 ) then
8396: LD_EXP 36
8400: PPUSH
8401: LD_INT 92
8403: PPUSH
8404: LD_INT 177
8406: PPUSH
8407: CALL_OW 307
8411: IFFALSE 8478
// begin DialogueOn ;
8413: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8417: LD_INT 92
8419: PPUSH
8420: LD_INT 177
8422: PPUSH
8423: LD_INT 2
8425: PPUSH
8426: LD_INT 3
8428: NEG
8429: PPUSH
8430: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8434: LD_EXP 36
8438: PPUSH
8439: CALL_OW 87
// dwait ( 0 0$2 ) ;
8443: LD_INT 70
8445: PPUSH
8446: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8450: LD_INT 92
8452: PPUSH
8453: LD_INT 177
8455: PPUSH
8456: LD_INT 2
8458: PPUSH
8459: CALL_OW 331
// DialogueOff ;
8463: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8467: LD_EXP 36
8471: PPUSH
8472: CALL_OW 64
// exit ;
8476: GO 8500
// end ; gaidarKilled := true ;
8478: LD_ADDR_EXP 14
8482: PUSH
8483: LD_INT 1
8485: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8486: LD_STRING GaidarKilled
8488: PPUSH
8489: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8493: LD_STRING ACH_COMMISAR
8495: PPUSH
8496: CALL_OW 543
// end ;
8500: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8501: LD_INT 2
8503: PPUSH
8504: LD_EXP 36
8508: PPUSH
8509: CALL_OW 292
8513: IFFALSE 8530
8515: GO 8517
8517: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8518: LD_EXP 36
8522: PPUSH
8523: LD_STRING DT-objective-1
8525: PPUSH
8526: CALL_OW 88
8530: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8531: LD_INT 22
8533: PUSH
8534: LD_INT 2
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 2
8543: PUSH
8544: LD_INT 95
8546: PUSH
8547: LD_INT 5
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: LD_INT 95
8556: PUSH
8557: LD_INT 6
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PUSH
8564: LD_INT 95
8566: PUSH
8567: LD_INT 7
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PPUSH
8584: CALL_OW 69
8588: IFFALSE 8625
8590: GO 8592
8592: DISABLE
// begin DialogueOn ;
8593: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8597: LD_EXP 19
8601: PPUSH
8602: LD_STRING DH-outpost-last-1
8604: PPUSH
8605: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8609: LD_EXP 35
8613: PPUSH
8614: LD_STRING DB-outpost-last-2
8616: PPUSH
8617: CALL_OW 94
// DialogueOff ;
8621: CALL_OW 7
// end ;
8625: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8626: LD_INT 200
8628: PPUSH
8629: CALL_OW 256
8633: PUSH
8634: LD_INT 999
8636: LESS
8637: IFTRUE 8652
8639: PUSH
8640: LD_INT 200
8642: PPUSH
8643: CALL_OW 255
8647: PUSH
8648: LD_INT 2
8650: EQUAL
8651: OR
8652: IFFALSE 8825
8654: GO 8656
8656: DISABLE
8657: LD_INT 0
8659: PPUSH
8660: PPUSH
// begin if not earlyEscape then
8661: LD_EXP 16
8665: NOT
8666: IFFALSE 8692
// begin SayRadio ( Burlak , DB-end-1 ) ;
8668: LD_EXP 35
8672: PPUSH
8673: LD_STRING DB-end-1
8675: PPUSH
8676: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8680: LD_EXP 19
8684: PPUSH
8685: LD_STRING DH-end-2
8687: PPUSH
8688: CALL_OW 88
// end ; if tick <= 15 15$00 then
8692: LD_OWVAR 1
8696: PUSH
8697: LD_INT 31500
8699: LESSEQUAL
8700: IFFALSE 8709
// SetAchievement ( ACH_FIST ) ;
8702: LD_STRING ACH_FIST
8704: PPUSH
8705: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8709: LD_ADDR_VAR 0 2
8713: PUSH
8714: LD_INT 22
8716: PUSH
8717: LD_INT 3
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 3
8726: PUSH
8727: LD_INT 21
8729: PUSH
8730: LD_INT 3
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 69
8749: ST_TO_ADDR
// if not tmp then
8750: LD_VAR 0 2
8754: NOT
8755: IFFALSE 8759
// exit ;
8757: GO 8825
// for i in tmp do
8759: LD_ADDR_VAR 0 1
8763: PUSH
8764: LD_VAR 0 2
8768: PUSH
8769: FOR_IN
8770: IFFALSE 8823
// begin SetTag ( i , tEscape ) ;
8772: LD_VAR 0 1
8776: PPUSH
8777: LD_EXP 18
8781: PPUSH
8782: CALL_OW 109
// if IsInUnit ( i ) then
8786: LD_VAR 0 1
8790: PPUSH
8791: CALL_OW 310
8795: IFFALSE 8806
// ComExitBuilding ( i ) ;
8797: LD_VAR 0 1
8801: PPUSH
8802: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8806: LD_VAR 0 1
8810: PPUSH
8811: LD_INT 92
8813: PPUSH
8814: LD_INT 177
8816: PPUSH
8817: CALL_OW 171
// end ;
8821: GO 8769
8823: POP
8824: POP
// end ;
8825: PPOPN 2
8827: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8828: LD_INT 4
8830: PPUSH
8831: LD_INT 22
8833: PUSH
8834: LD_INT 2
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PPUSH
8841: CALL_OW 70
8845: IFFALSE 8854
8847: PUSH
8848: LD_EXP 15
8852: NOT
8853: AND
8854: IFFALSE 8867
8856: PUSH
8857: LD_EXP 28
8861: PPUSH
8862: CALL_OW 302
8866: AND
8867: IFFALSE 9109
8869: GO 8871
8871: DISABLE
// begin DialogueOn ;
8872: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8876: LD_INT 111
8878: PPUSH
8879: LD_INT 54
8881: PPUSH
8882: LD_INT 2
8884: PPUSH
8885: LD_INT 16
8887: NEG
8888: PPUSH
8889: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8893: LD_INT 111
8895: PPUSH
8896: LD_INT 53
8898: PPUSH
8899: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8903: LD_INT 10
8905: PPUSH
8906: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8910: LD_EXP 28
8914: PPUSH
8915: LD_STRING DKs-Hannibal-1
8917: PPUSH
8918: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8922: LD_EXP 28
8926: PPUSH
8927: LD_STRING DKs-Hannibal-2
8929: PPUSH
8930: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8934: LD_EXP 28
8938: PPUSH
8939: LD_STRING DKs-Hannibal-3
8941: PPUSH
8942: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8946: LD_EXP 28
8950: PPUSH
8951: LD_STRING DKs-Hannibal-4
8953: PPUSH
8954: CALL_OW 88
// dwait ( 0 0$1 ) ;
8958: LD_INT 35
8960: PPUSH
8961: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8965: LD_INT 111
8967: PPUSH
8968: LD_INT 54
8970: PPUSH
8971: LD_INT 2
8973: PPUSH
8974: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8978: LD_INT 173
8980: PPUSH
8981: LD_INT 76
8983: PPUSH
8984: LD_INT 2
8986: PPUSH
8987: LD_INT 12
8989: NEG
8990: PPUSH
8991: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8995: LD_INT 173
8997: PPUSH
8998: LD_INT 76
9000: PPUSH
9001: LD_INT 2
9003: PPUSH
9004: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
9008: LD_INT 173
9010: PPUSH
9011: LD_INT 76
9013: PPUSH
9014: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
9018: LD_EXP 28
9022: PPUSH
9023: LD_STRING DKs-Hannibal-5
9025: PPUSH
9026: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
9030: LD_EXP 23
9034: IFFALSE 9067
9036: PUSH
9037: LD_INT 22
9039: PUSH
9040: LD_INT 2
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PUSH
9047: LD_INT 34
9049: PUSH
9050: LD_INT 26
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PPUSH
9061: CALL_OW 69
9065: NOT
9066: AND
9067: IFFALSE 9105
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
9069: LD_EXP 23
9073: PPUSH
9074: LD_STRING DKam-Hannibal-a-6
9076: PPUSH
9077: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
9081: LD_EXP 23
9085: PPUSH
9086: LD_STRING DKam-Hannibal-a-7
9088: PPUSH
9089: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
9093: LD_EXP 20
9097: PPUSH
9098: LD_STRING DG-Hannibal-a-8
9100: PPUSH
9101: CALL_OW 88
// end ; DialogueOff ;
9105: CALL_OW 7
// end ;
9109: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
9110: LD_INT 225
9112: PPUSH
9113: CALL_OW 302
9117: IFFALSE 9128
9119: PUSH
9120: LD_INT 200
9122: PPUSH
9123: CALL_OW 302
9127: AND
9128: IFFALSE 9153
9130: PUSH
9131: LD_INT 12
9133: PPUSH
9134: LD_INT 21
9136: PUSH
9137: LD_INT 3
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PPUSH
9144: CALL_OW 70
9148: PUSH
9149: LD_INT 2
9151: GREATER
9152: AND
9153: IFFALSE 9178
9155: PUSH
9156: LD_INT 13
9158: PPUSH
9159: LD_INT 22
9161: PUSH
9162: LD_INT 2
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PPUSH
9169: CALL_OW 70
9173: PUSH
9174: LD_INT 3
9176: GREATER
9177: AND
9178: IFFALSE 9191
9180: GO 9182
9182: DISABLE
// hannibalPath := true ;
9183: LD_ADDR_EXP 9
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
9191: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
9192: LD_EXP 9
9196: IFFALSE 9217
9198: PUSH
9199: LD_INT 6
9201: PPUSH
9202: LD_INT 22
9204: PUSH
9205: LD_INT 2
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PPUSH
9212: CALL_OW 70
9216: AND
9217: IFFALSE 9562
9219: GO 9221
9221: DISABLE
9222: LD_INT 0
9224: PPUSH
9225: PPUSH
9226: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
9227: LD_ADDR_VAR 0 2
9231: PUSH
9232: LD_INT 6
9234: PPUSH
9235: LD_INT 22
9237: PUSH
9238: LD_INT 2
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PPUSH
9245: CALL_OW 70
9249: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
9250: LD_ADDR_VAR 0 3
9254: PUSH
9255: LD_VAR 0 2
9259: PPUSH
9260: LD_INT 34
9262: PUSH
9263: LD_INT 26
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PPUSH
9270: CALL_OW 72
9274: PUSH
9275: LD_INT 0
9277: GREATER
9278: ST_TO_ADDR
// DialogueOn ;
9279: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
9283: LD_EXP 19
9287: PPUSH
9288: LD_STRING DH-Cleverattack-1
9290: PPUSH
9291: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
9295: LD_EXP 19
9299: PPUSH
9300: LD_STRING DH-Cleverattack-2
9302: PPUSH
9303: CALL_OW 88
// if hasFlameThrower then
9307: LD_VAR 0 3
9311: IFFALSE 9339
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9313: LD_EXP 35
9317: PPUSH
9318: LD_STRING DB-Cleverattack-3
9320: PPUSH
9321: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9325: LD_EXP 19
9329: PPUSH
9330: LD_STRING DH-Cleverattack-4
9332: PPUSH
9333: CALL_OW 88
// end else
9337: GO 9363
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9339: LD_EXP 35
9343: PPUSH
9344: LD_STRING DB-Cleverattack-a-3
9346: PPUSH
9347: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9351: LD_EXP 19
9355: PPUSH
9356: LD_STRING DH-Cleverattack-a-4
9358: PPUSH
9359: CALL_OW 88
// end ; DialogueOff ;
9363: CALL_OW 7
// if not hasFlameThrower then
9367: LD_VAR 0 3
9371: NOT
9372: IFFALSE 9376
// exit ;
9374: GO 9562
// earlyEscape := true ;
9376: LD_ADDR_EXP 16
9380: PUSH
9381: LD_INT 1
9383: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9384: LD_INT 140
9386: PPUSH
9387: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9391: LD_ADDR_VAR 0 2
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 2
9408: PUSH
9409: LD_INT 25
9411: PUSH
9412: LD_INT 1
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: LD_INT 25
9421: PUSH
9422: LD_INT 2
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 25
9431: PUSH
9432: LD_INT 4
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 69
9453: PUSH
9454: LD_EXP 22
9458: PUSH
9459: LD_EXP 37
9463: PUSH
9464: LD_EXP 36
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: DIFF
9474: ST_TO_ADDR
// for i in tmp do
9475: LD_ADDR_VAR 0 1
9479: PUSH
9480: LD_VAR 0 2
9484: PUSH
9485: FOR_IN
9486: IFFALSE 9560
// begin if Prob ( 40 + 10 * Difficulty ) then
9488: LD_INT 40
9490: PUSH
9491: LD_INT 10
9493: PUSH
9494: LD_OWVAR 67
9498: MUL
9499: PLUS
9500: PPUSH
9501: CALL_OW 13
9505: IFFALSE 9509
// continue ;
9507: GO 9485
// SetTag ( i , tEscape ) ;
9509: LD_VAR 0 1
9513: PPUSH
9514: LD_EXP 18
9518: PPUSH
9519: CALL_OW 109
// if IsInUnit ( i ) then
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 310
9532: IFFALSE 9543
// ComExitBuilding ( i ) ;
9534: LD_VAR 0 1
9538: PPUSH
9539: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9543: LD_VAR 0 1
9547: PPUSH
9548: LD_INT 92
9550: PPUSH
9551: LD_INT 177
9553: PPUSH
9554: CALL_OW 171
// end ;
9558: GO 9485
9560: POP
9561: POP
// end ;
9562: PPOPN 3
9564: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9565: LD_INT 9
9567: PPUSH
9568: LD_INT 2
9570: PUSH
9571: LD_INT 22
9573: PUSH
9574: LD_INT 3
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: LD_INT 22
9583: PUSH
9584: LD_INT 6
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: PPUSH
9596: CALL_OW 70
9600: IFFALSE 9700
9602: GO 9604
9604: DISABLE
9605: LD_INT 0
9607: PPUSH
// begin enable ;
9608: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9609: LD_ADDR_VAR 0 1
9613: PUSH
9614: LD_INT 9
9616: PPUSH
9617: LD_INT 2
9619: PUSH
9620: LD_INT 22
9622: PUSH
9623: LD_INT 3
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 22
9632: PUSH
9633: LD_INT 6
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PPUSH
9645: CALL_OW 70
9649: PUSH
9650: FOR_IN
9651: IFFALSE 9698
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9653: LD_VAR 0 1
9657: PPUSH
9658: CALL_OW 110
9662: PUSH
9663: LD_EXP 18
9667: EQUAL
9668: IFTRUE 9685
9670: PUSH
9671: LD_VAR 0 1
9675: PPUSH
9676: CALL_OW 255
9680: PUSH
9681: LD_INT 6
9683: EQUAL
9684: OR
9685: IFFALSE 9696
// RemoveUnit ( i ) ;
9687: LD_VAR 0 1
9691: PPUSH
9692: CALL_OW 64
9696: GO 9650
9698: POP
9699: POP
// end ;
9700: PPOPN 1
9702: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9703: LD_EXP 24
9707: IFFALSE 9724
9709: PUSH
9710: LD_EXP 24
9714: PPUSH
9715: CALL_OW 256
9719: PUSH
9720: LD_INT 3
9722: LESS
9723: AND
9724: IFFALSE 9770
9726: GO 9728
9728: DISABLE
// begin DialogueOn ;
9729: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9733: LD_EXP 24
9737: PPUSH
9738: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9742: LD_EXP 24
9746: PPUSH
9747: LD_STRING DK-Kkilled-1
9749: PPUSH
9750: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9754: LD_EXP 19
9758: PPUSH
9759: LD_STRING DH-Kkilled-2
9761: PPUSH
9762: CALL_OW 88
// DialogueOff ;
9766: CALL_OW 7
// end ;
9770: END
// every 0 0$1 trigger kaiaKilledByRussian do
9771: LD_EXP 8
9775: IFFALSE 9792
9777: GO 9779
9779: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9780: LD_EXP 19
9784: PPUSH
9785: LD_STRING DH-Kkilled-3
9787: PPUSH
9788: CALL_OW 88
9792: END
// every 0 0$1 trigger tick >= 24 24$00 do
9793: LD_OWVAR 1
9797: PUSH
9798: LD_INT 50400
9800: GREATEREQUAL
9801: IFFALSE 9838
9803: GO 9805
9805: DISABLE
// begin DialogueOn ;
9806: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9810: LD_EXP 27
9814: PPUSH
9815: LD_STRING DShar-slow-1
9817: PPUSH
9818: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9822: LD_EXP 27
9826: PPUSH
9827: LD_STRING DShar-slow-2
9829: PPUSH
9830: CALL_OW 94
// DialogueOff ;
9834: CALL_OW 7
// end ;
9838: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9839: LD_OWVAR 1
9843: PUSH
9844: LD_INT 84000
9846: PUSH
9847: LD_INT 75600
9849: PUSH
9850: LD_INT 67200
9852: PUSH
9853: LD_INT 63000
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: PUSH
9862: LD_OWVAR 67
9866: ARRAY
9867: GREATEREQUAL
9868: IFFALSE 9912
9870: GO 9872
9872: DISABLE
// begin DialogueOn ;
9873: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9877: LD_EXP 27
9881: PPUSH
9882: LD_STRING DShar-fail-1
9884: PPUSH
9885: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9889: LD_EXP 27
9893: PPUSH
9894: LD_STRING DShar-fail-2
9896: PPUSH
9897: CALL_OW 94
// DialogueOff ;
9901: CALL_OW 7
// YouLost ( Time ) ;
9905: LD_STRING Time
9907: PPUSH
9908: CALL_OW 104
// end ;
9912: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp , m1 , m2 , m3 ;
9913: LD_INT 22
9915: PUSH
9916: LD_INT 3
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 2
9925: PUSH
9926: LD_INT 30
9928: PUSH
9929: LD_INT 1
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 30
9938: PUSH
9939: LD_INT 0
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 69
9959: PUSH
9960: LD_INT 0
9962: EQUAL
9963: IFFALSE 10723
9965: GO 9967
9967: DISABLE
9968: LD_INT 0
9970: PPUSH
9971: PPUSH
9972: PPUSH
9973: PPUSH
// begin m1 := false ;
9974: LD_ADDR_VAR 0 2
9978: PUSH
9979: LD_INT 0
9981: ST_TO_ADDR
// m2 := false ;
9982: LD_ADDR_VAR 0 3
9986: PUSH
9987: LD_INT 0
9989: ST_TO_ADDR
// m3 := false ;
9990: LD_ADDR_VAR 0 4
9994: PUSH
9995: LD_INT 0
9997: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 5 then
9998: LD_INT 22
10000: PUSH
10001: LD_INT 2
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: LD_INT 23
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 21
10020: PUSH
10021: LD_INT 1
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 50
10030: PUSH
10031: EMPTY
10032: LIST
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 69
10044: PPUSH
10045: CALL 35673 0 1
10049: PUSH
10050: LD_INT 5
10052: LESS
10053: IFFALSE 10064
// begin YouLost ( Troops ) ;
10055: LD_STRING Troops
10057: PPUSH
10058: CALL_OW 104
// exit ;
10062: GO 10723
// end ; if ( tick + gameTime ) <= 55 55$00 then
10064: LD_OWVAR 1
10068: PUSH
10069: LD_EXP 5
10073: PLUS
10074: PUSH
10075: LD_INT 115500
10077: LESSEQUAL
10078: IFFALSE 10087
// SetAchievement ( ACH_HSPEED_4 ) ;
10080: LD_STRING ACH_HSPEED_4
10082: PPUSH
10083: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
10087: LD_OWVAR 1
10091: PUSH
10092: LD_EXP 5
10096: PLUS
10097: PUSH
10098: LD_INT 178500
10100: PUSH
10101: LD_INT 157500
10103: PUSH
10104: LD_INT 136500
10106: PUSH
10107: LD_INT 126000
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: LD_OWVAR 67
10120: ARRAY
10121: LESSEQUAL
10122: IFFALSE 10144
// begin m1 := true ;
10124: LD_ADDR_VAR 0 2
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
10132: LD_STRING med1
10134: PPUSH
10135: LD_INT 1
10137: PPUSH
10138: CALL_OW 101
// end else
10142: GO 10155
// AddMedal ( med1 , - 1 ) ;
10144: LD_STRING med1
10146: PPUSH
10147: LD_INT 1
10149: NEG
10150: PPUSH
10151: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
10155: LD_EXP 7
10159: PUSH
10160: LD_INT 3
10162: GREATEREQUAL
10163: PUSH
10164: LD_EXP 11
10168: MUL
10169: PUSH
10170: LD_EXP 9
10174: MUL
10175: PUSH
10176: LD_EXP 6
10180: PUSH
10181: LD_INT 6
10183: PUSH
10184: LD_INT 5
10186: PUSH
10187: LD_INT 4
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: PUSH
10199: LD_OWVAR 67
10203: ARRAY
10204: LESS
10205: MUL
10206: IFFALSE 10228
// begin m2 := true ;
10208: LD_ADDR_VAR 0 3
10212: PUSH
10213: LD_INT 1
10215: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
10216: LD_STRING med2
10218: PPUSH
10219: LD_INT 1
10221: PPUSH
10222: CALL_OW 101
// end else
10226: GO 10302
// if flamethrowers < 3 then
10228: LD_EXP 7
10232: PUSH
10233: LD_INT 3
10235: LESS
10236: IFFALSE 10251
// AddMedal ( med2 , - 1 ) else
10238: LD_STRING med2
10240: PPUSH
10241: LD_INT 1
10243: NEG
10244: PPUSH
10245: CALL_OW 101
10249: GO 10302
// if not baseHill then
10251: LD_EXP 11
10255: NOT
10256: IFFALSE 10271
// AddMedal ( med2 , - 2 ) else
10258: LD_STRING med2
10260: PPUSH
10261: LD_INT 2
10263: NEG
10264: PPUSH
10265: CALL_OW 101
10269: GO 10302
// if not hannibalPath then
10271: LD_EXP 9
10275: NOT
10276: IFFALSE 10291
// AddMedal ( med2 , - 3 ) else
10278: LD_STRING med2
10280: PPUSH
10281: LD_INT 3
10283: NEG
10284: PPUSH
10285: CALL_OW 101
10289: GO 10302
// AddMedal ( med3 , - 2 ) ;
10291: LD_STRING med3
10293: PPUSH
10294: LD_INT 2
10296: NEG
10297: PPUSH
10298: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
10302: LD_EXP 14
10306: PPUSH
10307: LD_STRING 04_2_GaidarKilled
10309: PPUSH
10310: CALL_OW 39
// if gaidarKilled then
10314: LD_EXP 14
10318: IFFALSE 10340
// begin m3 := true ;
10320: LD_ADDR_VAR 0 4
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
10328: LD_STRING med3
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 101
// end else
10338: GO 10351
// AddMedal ( med3 , - 1 ) ;
10340: LD_STRING med3
10342: PPUSH
10343: LD_INT 1
10345: NEG
10346: PPUSH
10347: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
10351: LD_VAR 0 2
10355: IFFALSE 10363
10357: PUSH
10358: LD_VAR 0 3
10362: AND
10363: IFFALSE 10371
10365: PUSH
10366: LD_VAR 0 4
10370: AND
10371: IFFALSE 10383
10373: PUSH
10374: LD_OWVAR 67
10378: PUSH
10379: LD_INT 3
10381: GREATEREQUAL
10382: AND
10383: IFFALSE 10395
// SetAchievementEX ( ACH_ARES , 4 ) ;
10385: LD_STRING ACH_ARES
10387: PPUSH
10388: LD_INT 4
10390: PPUSH
10391: CALL_OW 564
// GiveMedals ( MAIN ) ;
10395: LD_STRING MAIN
10397: PPUSH
10398: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
10402: LD_INT 22
10404: PUSH
10405: LD_INT 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 3
10414: PUSH
10415: LD_INT 23
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PPUSH
10433: CALL_OW 69
10437: PPUSH
10438: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
10442: LD_EXP 19
10446: PPUSH
10447: LD_STRING 04_2_Heike
10449: PPUSH
10450: CALL_OW 38
// if Aviradze then
10454: LD_EXP 29
10458: IFFALSE 10472
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
10460: LD_EXP 29
10464: PPUSH
10465: LD_STRING 04_2_Aviradze
10467: PPUSH
10468: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10472: LD_EXP 22
10476: IFFALSE 10493
10478: PUSH
10479: LD_EXP 22
10483: PPUSH
10484: CALL_OW 255
10488: PUSH
10489: LD_INT 2
10491: EQUAL
10492: AND
10493: IFFALSE 10523
// begin if ibrahimOnRuSide then
10495: LD_EXP 3
10499: IFFALSE 10511
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10501: LD_INT 1
10503: PPUSH
10504: LD_STRING 04_2_IbrahimJoined
10506: PPUSH
10507: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10511: LD_EXP 22
10515: PPUSH
10516: LD_STRING 04_2_Ibrahim
10518: PPUSH
10519: CALL_OW 38
// end ; if Kamil then
10523: LD_EXP 23
10527: IFFALSE 10541
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10529: LD_EXP 23
10533: PPUSH
10534: LD_STRING 04_2_Kamil
10536: PPUSH
10537: CALL_OW 38
// if Sophia then
10541: LD_EXP 25
10545: IFFALSE 10559
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10547: LD_EXP 25
10551: PPUSH
10552: LD_STRING 04_2_Sophia
10554: PPUSH
10555: CALL_OW 38
// if Kaia then
10559: LD_EXP 24
10563: IFFALSE 10577
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10565: LD_EXP 24
10569: PPUSH
10570: LD_STRING 04_2_Kaia
10572: PPUSH
10573: CALL_OW 38
// if Givi then
10577: LD_EXP 20
10581: IFFALSE 10595
// SaveCharacters ( Givi , 04_2_Givi ) ;
10583: LD_EXP 20
10587: PPUSH
10588: LD_STRING 04_2_Givi
10590: PPUSH
10591: CALL_OW 38
// if Mike then
10595: LD_EXP 21
10599: IFFALSE 10613
// SaveCharacters ( Mike , 04_2_Mike ) ;
10601: LD_EXP 21
10605: PPUSH
10606: LD_STRING 04_2_Mike
10608: PPUSH
10609: CALL_OW 38
// if Markov then
10613: LD_EXP 26
10617: IFFALSE 10631
// SaveCharacters ( Markov , 04_2_Markov ) ;
10619: LD_EXP 26
10623: PPUSH
10624: LD_STRING 04_2_Markov
10626: PPUSH
10627: CALL_OW 38
// if Kurt then
10631: LD_EXP 28
10635: IFFALSE 10649
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10637: LD_EXP 28
10641: PPUSH
10642: LD_STRING 04_2_Kurt
10644: PPUSH
10645: CALL_OW 38
// if heikeSecondSquad then
10649: LD_EXP 30
10653: IFFALSE 10667
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10655: LD_EXP 30
10659: PPUSH
10660: LD_STRING 04_2_others
10662: PPUSH
10663: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10667: LD_ADDR_VAR 0 1
10671: PUSH
10672: LD_INT 22
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 23
10684: PUSH
10685: LD_INT 0
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// if tmp then
10701: LD_VAR 0 1
10705: IFFALSE 10719
// SaveCharacters ( tmp , 04_2_apes ) ;
10707: LD_VAR 0 1
10711: PPUSH
10712: LD_STRING 04_2_apes
10714: PPUSH
10715: CALL_OW 38
// YouWin ;
10719: CALL_OW 103
// end ; end_of_file
10723: PPOPN 4
10725: END
// export globalGameSaveCounter ; every 0 0$1 do
10726: GO 10728
10728: DISABLE
// begin enable ;
10729: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10730: LD_STRING updateTimer(
10732: PUSH
10733: LD_OWVAR 1
10737: STR
10738: PUSH
10739: LD_STRING );
10741: STR
10742: PPUSH
10743: CALL_OW 559
// end ;
10747: END
// every 0 0$1 do
10748: GO 10750
10750: DISABLE
// begin globalGameSaveCounter := 0 ;
10751: LD_ADDR_EXP 44
10755: PUSH
10756: LD_INT 0
10758: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10759: LD_STRING setGameSaveCounter(0)
10761: PPUSH
10762: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10766: LD_STRING initStreamRollete();
10768: PPUSH
10769: CALL_OW 559
// InitStreamMode ;
10773: CALL 12125 0 0
// DefineStreamItems ( false ) ;
10777: LD_INT 0
10779: PPUSH
10780: CALL 12589 0 1
// end ;
10784: END
// export function SOS_MapStart ( ) ; begin
10785: LD_INT 0
10787: PPUSH
// if streamModeActive then
10788: LD_EXP 45
10792: IFFALSE 10801
// DefineStreamItems ( true ) ;
10794: LD_INT 1
10796: PPUSH
10797: CALL 12589 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
10801: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
10803: PPUSH
10804: CALL_OW 559
// UpdateLuaVariables ( ) ;
10808: CALL 10825 0 0
// UpdateFactoryWaypoints ( ) ;
10812: CALL 25711 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10816: CALL 25963 0 0
// end ;
10820: LD_VAR 0 1
10824: RET
// function UpdateLuaVariables ( ) ; begin
10825: LD_INT 0
10827: PPUSH
// if globalGameSaveCounter then
10828: LD_EXP 44
10832: IFFALSE 10866
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10834: LD_ADDR_EXP 44
10838: PUSH
10839: LD_EXP 44
10843: PPUSH
10844: CALL 73022 0 1
10848: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10849: LD_STRING setGameSaveCounter(
10851: PUSH
10852: LD_EXP 44
10856: STR
10857: PUSH
10858: LD_STRING )
10860: STR
10861: PPUSH
10862: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10866: LD_STRING setGameDifficulty(
10868: PUSH
10869: LD_OWVAR 67
10873: STR
10874: PUSH
10875: LD_STRING )
10877: STR
10878: PPUSH
10879: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10883: LD_STRING displayDifficulty(
10885: PUSH
10886: LD_OWVAR 67
10890: STR
10891: PUSH
10892: LD_STRING )
10894: STR
10895: PPUSH
10896: CALL_OW 559
// end ;
10900: LD_VAR 0 1
10904: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10905: LD_INT 0
10907: PPUSH
// if p2 = stream_mode then
10908: LD_VAR 0 2
10912: PUSH
10913: LD_INT 100
10915: EQUAL
10916: IFFALSE 11919
// begin if not StreamModeActive then
10918: LD_EXP 45
10922: NOT
10923: IFFALSE 10933
// StreamModeActive := true ;
10925: LD_ADDR_EXP 45
10929: PUSH
10930: LD_INT 1
10932: ST_TO_ADDR
// if p3 = 0 then
10933: LD_VAR 0 3
10937: PUSH
10938: LD_INT 0
10940: EQUAL
10941: IFFALSE 10947
// InitStreamMode ;
10943: CALL 12125 0 0
// if p3 = 1 then
10947: LD_VAR 0 3
10951: PUSH
10952: LD_INT 1
10954: EQUAL
10955: IFFALSE 10965
// sRocket := true ;
10957: LD_ADDR_EXP 50
10961: PUSH
10962: LD_INT 1
10964: ST_TO_ADDR
// if p3 = 2 then
10965: LD_VAR 0 3
10969: PUSH
10970: LD_INT 2
10972: EQUAL
10973: IFFALSE 10983
// sSpeed := true ;
10975: LD_ADDR_EXP 49
10979: PUSH
10980: LD_INT 1
10982: ST_TO_ADDR
// if p3 = 3 then
10983: LD_VAR 0 3
10987: PUSH
10988: LD_INT 3
10990: EQUAL
10991: IFFALSE 11001
// sEngine := true ;
10993: LD_ADDR_EXP 51
10997: PUSH
10998: LD_INT 1
11000: ST_TO_ADDR
// if p3 = 4 then
11001: LD_VAR 0 3
11005: PUSH
11006: LD_INT 4
11008: EQUAL
11009: IFFALSE 11019
// sSpec := true ;
11011: LD_ADDR_EXP 48
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// if p3 = 5 then
11019: LD_VAR 0 3
11023: PUSH
11024: LD_INT 5
11026: EQUAL
11027: IFFALSE 11037
// sLevel := true ;
11029: LD_ADDR_EXP 52
11033: PUSH
11034: LD_INT 1
11036: ST_TO_ADDR
// if p3 = 6 then
11037: LD_VAR 0 3
11041: PUSH
11042: LD_INT 6
11044: EQUAL
11045: IFFALSE 11055
// sArmoury := true ;
11047: LD_ADDR_EXP 53
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// if p3 = 7 then
11055: LD_VAR 0 3
11059: PUSH
11060: LD_INT 7
11062: EQUAL
11063: IFFALSE 11073
// sRadar := true ;
11065: LD_ADDR_EXP 54
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// if p3 = 8 then
11073: LD_VAR 0 3
11077: PUSH
11078: LD_INT 8
11080: EQUAL
11081: IFFALSE 11091
// sBunker := true ;
11083: LD_ADDR_EXP 55
11087: PUSH
11088: LD_INT 1
11090: ST_TO_ADDR
// if p3 = 9 then
11091: LD_VAR 0 3
11095: PUSH
11096: LD_INT 9
11098: EQUAL
11099: IFFALSE 11109
// sHack := true ;
11101: LD_ADDR_EXP 56
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// if p3 = 10 then
11109: LD_VAR 0 3
11113: PUSH
11114: LD_INT 10
11116: EQUAL
11117: IFFALSE 11127
// sFire := true ;
11119: LD_ADDR_EXP 57
11123: PUSH
11124: LD_INT 1
11126: ST_TO_ADDR
// if p3 = 11 then
11127: LD_VAR 0 3
11131: PUSH
11132: LD_INT 11
11134: EQUAL
11135: IFFALSE 11145
// sRefresh := true ;
11137: LD_ADDR_EXP 58
11141: PUSH
11142: LD_INT 1
11144: ST_TO_ADDR
// if p3 = 12 then
11145: LD_VAR 0 3
11149: PUSH
11150: LD_INT 12
11152: EQUAL
11153: IFFALSE 11163
// sExp := true ;
11155: LD_ADDR_EXP 59
11159: PUSH
11160: LD_INT 1
11162: ST_TO_ADDR
// if p3 = 13 then
11163: LD_VAR 0 3
11167: PUSH
11168: LD_INT 13
11170: EQUAL
11171: IFFALSE 11181
// sDepot := true ;
11173: LD_ADDR_EXP 60
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// if p3 = 14 then
11181: LD_VAR 0 3
11185: PUSH
11186: LD_INT 14
11188: EQUAL
11189: IFFALSE 11199
// sFlag := true ;
11191: LD_ADDR_EXP 61
11195: PUSH
11196: LD_INT 1
11198: ST_TO_ADDR
// if p3 = 15 then
11199: LD_VAR 0 3
11203: PUSH
11204: LD_INT 15
11206: EQUAL
11207: IFFALSE 11217
// sKamikadze := true ;
11209: LD_ADDR_EXP 69
11213: PUSH
11214: LD_INT 1
11216: ST_TO_ADDR
// if p3 = 16 then
11217: LD_VAR 0 3
11221: PUSH
11222: LD_INT 16
11224: EQUAL
11225: IFFALSE 11235
// sTroll := true ;
11227: LD_ADDR_EXP 70
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// if p3 = 17 then
11235: LD_VAR 0 3
11239: PUSH
11240: LD_INT 17
11242: EQUAL
11243: IFFALSE 11253
// sSlow := true ;
11245: LD_ADDR_EXP 71
11249: PUSH
11250: LD_INT 1
11252: ST_TO_ADDR
// if p3 = 18 then
11253: LD_VAR 0 3
11257: PUSH
11258: LD_INT 18
11260: EQUAL
11261: IFFALSE 11271
// sLack := true ;
11263: LD_ADDR_EXP 72
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
// if p3 = 19 then
11271: LD_VAR 0 3
11275: PUSH
11276: LD_INT 19
11278: EQUAL
11279: IFFALSE 11289
// sTank := true ;
11281: LD_ADDR_EXP 74
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
// if p3 = 20 then
11289: LD_VAR 0 3
11293: PUSH
11294: LD_INT 20
11296: EQUAL
11297: IFFALSE 11307
// sRemote := true ;
11299: LD_ADDR_EXP 75
11303: PUSH
11304: LD_INT 1
11306: ST_TO_ADDR
// if p3 = 21 then
11307: LD_VAR 0 3
11311: PUSH
11312: LD_INT 21
11314: EQUAL
11315: IFFALSE 11325
// sPowell := true ;
11317: LD_ADDR_EXP 76
11321: PUSH
11322: LD_INT 1
11324: ST_TO_ADDR
// if p3 = 22 then
11325: LD_VAR 0 3
11329: PUSH
11330: LD_INT 22
11332: EQUAL
11333: IFFALSE 11343
// sTeleport := true ;
11335: LD_ADDR_EXP 79
11339: PUSH
11340: LD_INT 1
11342: ST_TO_ADDR
// if p3 = 23 then
11343: LD_VAR 0 3
11347: PUSH
11348: LD_INT 23
11350: EQUAL
11351: IFFALSE 11361
// sOilTower := true ;
11353: LD_ADDR_EXP 81
11357: PUSH
11358: LD_INT 1
11360: ST_TO_ADDR
// if p3 = 24 then
11361: LD_VAR 0 3
11365: PUSH
11366: LD_INT 24
11368: EQUAL
11369: IFFALSE 11379
// sShovel := true ;
11371: LD_ADDR_EXP 82
11375: PUSH
11376: LD_INT 1
11378: ST_TO_ADDR
// if p3 = 25 then
11379: LD_VAR 0 3
11383: PUSH
11384: LD_INT 25
11386: EQUAL
11387: IFFALSE 11397
// sSheik := true ;
11389: LD_ADDR_EXP 83
11393: PUSH
11394: LD_INT 1
11396: ST_TO_ADDR
// if p3 = 26 then
11397: LD_VAR 0 3
11401: PUSH
11402: LD_INT 26
11404: EQUAL
11405: IFFALSE 11415
// sEarthquake := true ;
11407: LD_ADDR_EXP 85
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// if p3 = 27 then
11415: LD_VAR 0 3
11419: PUSH
11420: LD_INT 27
11422: EQUAL
11423: IFFALSE 11433
// sAI := true ;
11425: LD_ADDR_EXP 86
11429: PUSH
11430: LD_INT 1
11432: ST_TO_ADDR
// if p3 = 28 then
11433: LD_VAR 0 3
11437: PUSH
11438: LD_INT 28
11440: EQUAL
11441: IFFALSE 11451
// sCargo := true ;
11443: LD_ADDR_EXP 89
11447: PUSH
11448: LD_INT 1
11450: ST_TO_ADDR
// if p3 = 29 then
11451: LD_VAR 0 3
11455: PUSH
11456: LD_INT 29
11458: EQUAL
11459: IFFALSE 11469
// sDLaser := true ;
11461: LD_ADDR_EXP 90
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// if p3 = 30 then
11469: LD_VAR 0 3
11473: PUSH
11474: LD_INT 30
11476: EQUAL
11477: IFFALSE 11487
// sExchange := true ;
11479: LD_ADDR_EXP 91
11483: PUSH
11484: LD_INT 1
11486: ST_TO_ADDR
// if p3 = 31 then
11487: LD_VAR 0 3
11491: PUSH
11492: LD_INT 31
11494: EQUAL
11495: IFFALSE 11505
// sFac := true ;
11497: LD_ADDR_EXP 92
11501: PUSH
11502: LD_INT 1
11504: ST_TO_ADDR
// if p3 = 32 then
11505: LD_VAR 0 3
11509: PUSH
11510: LD_INT 32
11512: EQUAL
11513: IFFALSE 11523
// sPower := true ;
11515: LD_ADDR_EXP 93
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// if p3 = 33 then
11523: LD_VAR 0 3
11527: PUSH
11528: LD_INT 33
11530: EQUAL
11531: IFFALSE 11541
// sRandom := true ;
11533: LD_ADDR_EXP 94
11537: PUSH
11538: LD_INT 1
11540: ST_TO_ADDR
// if p3 = 34 then
11541: LD_VAR 0 3
11545: PUSH
11546: LD_INT 34
11548: EQUAL
11549: IFFALSE 11559
// sShield := true ;
11551: LD_ADDR_EXP 95
11555: PUSH
11556: LD_INT 1
11558: ST_TO_ADDR
// if p3 = 35 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 35
11566: EQUAL
11567: IFFALSE 11577
// sTime := true ;
11569: LD_ADDR_EXP 96
11573: PUSH
11574: LD_INT 1
11576: ST_TO_ADDR
// if p3 = 36 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 36
11584: EQUAL
11585: IFFALSE 11595
// sTools := true ;
11587: LD_ADDR_EXP 97
11591: PUSH
11592: LD_INT 1
11594: ST_TO_ADDR
// if p3 = 101 then
11595: LD_VAR 0 3
11599: PUSH
11600: LD_INT 101
11602: EQUAL
11603: IFFALSE 11613
// sSold := true ;
11605: LD_ADDR_EXP 62
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if p3 = 102 then
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 102
11620: EQUAL
11621: IFFALSE 11631
// sDiff := true ;
11623: LD_ADDR_EXP 63
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// if p3 = 103 then
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 103
11638: EQUAL
11639: IFFALSE 11649
// sFog := true ;
11641: LD_ADDR_EXP 66
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// if p3 = 104 then
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 104
11656: EQUAL
11657: IFFALSE 11667
// sReset := true ;
11659: LD_ADDR_EXP 67
11663: PUSH
11664: LD_INT 1
11666: ST_TO_ADDR
// if p3 = 105 then
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 105
11674: EQUAL
11675: IFFALSE 11685
// sSun := true ;
11677: LD_ADDR_EXP 68
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// if p3 = 106 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_INT 106
11692: EQUAL
11693: IFFALSE 11703
// sTiger := true ;
11695: LD_ADDR_EXP 64
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// if p3 = 107 then
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 107
11710: EQUAL
11711: IFFALSE 11721
// sBomb := true ;
11713: LD_ADDR_EXP 65
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// if p3 = 108 then
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 108
11728: EQUAL
11729: IFFALSE 11739
// sWound := true ;
11731: LD_ADDR_EXP 73
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// if p3 = 109 then
11739: LD_VAR 0 3
11743: PUSH
11744: LD_INT 109
11746: EQUAL
11747: IFFALSE 11757
// sBetray := true ;
11749: LD_ADDR_EXP 77
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// if p3 = 110 then
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 110
11764: EQUAL
11765: IFFALSE 11775
// sContamin := true ;
11767: LD_ADDR_EXP 78
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 111 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 111
11782: EQUAL
11783: IFFALSE 11793
// sOil := true ;
11785: LD_ADDR_EXP 80
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// if p3 = 112 then
11793: LD_VAR 0 3
11797: PUSH
11798: LD_INT 112
11800: EQUAL
11801: IFFALSE 11811
// sStu := true ;
11803: LD_ADDR_EXP 84
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// if p3 = 113 then
11811: LD_VAR 0 3
11815: PUSH
11816: LD_INT 113
11818: EQUAL
11819: IFFALSE 11829
// sBazooka := true ;
11821: LD_ADDR_EXP 87
11825: PUSH
11826: LD_INT 1
11828: ST_TO_ADDR
// if p3 = 114 then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_INT 114
11836: EQUAL
11837: IFFALSE 11847
// sMortar := true ;
11839: LD_ADDR_EXP 88
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// if p3 = 115 then
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 115
11854: EQUAL
11855: IFFALSE 11865
// sRanger := true ;
11857: LD_ADDR_EXP 98
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// if p3 = 116 then
11865: LD_VAR 0 3
11869: PUSH
11870: LD_INT 116
11872: EQUAL
11873: IFFALSE 11883
// sComputer := true ;
11875: LD_ADDR_EXP 99
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if p3 = 117 then
11883: LD_VAR 0 3
11887: PUSH
11888: LD_INT 117
11890: EQUAL
11891: IFFALSE 11901
// s30 := true ;
11893: LD_ADDR_EXP 100
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// if p3 = 118 then
11901: LD_VAR 0 3
11905: PUSH
11906: LD_INT 118
11908: EQUAL
11909: IFFALSE 11919
// s60 := true ;
11911: LD_ADDR_EXP 101
11915: PUSH
11916: LD_INT 1
11918: ST_TO_ADDR
// end ; if p2 = hack_mode then
11919: LD_VAR 0 2
11923: PUSH
11924: LD_INT 101
11926: EQUAL
11927: IFFALSE 12055
// begin case p3 of 1 :
11929: LD_VAR 0 3
11933: PUSH
11934: LD_INT 1
11936: DOUBLE
11937: EQUAL
11938: IFTRUE 11942
11940: GO 11949
11942: POP
// hHackUnlimitedResources ; 2 :
11943: CALL 24318 0 0
11947: GO 12055
11949: LD_INT 2
11951: DOUBLE
11952: EQUAL
11953: IFTRUE 11957
11955: GO 11964
11957: POP
// hHackSetLevel10 ; 3 :
11958: CALL 24451 0 0
11962: GO 12055
11964: LD_INT 3
11966: DOUBLE
11967: EQUAL
11968: IFTRUE 11972
11970: GO 11979
11972: POP
// hHackSetLevel10YourUnits ; 4 :
11973: CALL 24536 0 0
11977: GO 12055
11979: LD_INT 4
11981: DOUBLE
11982: EQUAL
11983: IFTRUE 11987
11985: GO 11994
11987: POP
// hHackInvincible ; 5 :
11988: CALL 24984 0 0
11992: GO 12055
11994: LD_INT 5
11996: DOUBLE
11997: EQUAL
11998: IFTRUE 12002
12000: GO 12009
12002: POP
// hHackInvisible ; 6 :
12003: CALL 25095 0 0
12007: GO 12055
12009: LD_INT 6
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12024
12017: POP
// hHackChangeYourSide ; 7 :
12018: CALL 25152 0 0
12022: GO 12055
12024: LD_INT 7
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12039
12032: POP
// hHackChangeUnitSide ; 8 :
12033: CALL 25194 0 0
12037: GO 12055
12039: LD_INT 8
12041: DOUBLE
12042: EQUAL
12043: IFTRUE 12047
12045: GO 12054
12047: POP
// hHackFog ; end ;
12048: CALL 25295 0 0
12052: GO 12055
12054: POP
// end ; if p2 = game_save_mode then
12055: LD_VAR 0 2
12059: PUSH
12060: LD_INT 102
12062: EQUAL
12063: IFFALSE 12120
// begin if p3 = 1 then
12065: LD_VAR 0 3
12069: PUSH
12070: LD_INT 1
12072: EQUAL
12073: IFFALSE 12085
// globalGameSaveCounter := p4 ;
12075: LD_ADDR_EXP 44
12079: PUSH
12080: LD_VAR 0 4
12084: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 2
12092: EQUAL
12093: IFFALSE 12101
12095: PUSH
12096: LD_EXP 44
12100: AND
12101: IFFALSE 12120
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12103: LD_STRING setGameSaveCounter(
12105: PUSH
12106: LD_EXP 44
12110: STR
12111: PUSH
12112: LD_STRING )
12114: STR
12115: PPUSH
12116: CALL_OW 559
// end ; end ;
12120: LD_VAR 0 7
12124: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12125: LD_INT 0
12127: PPUSH
// streamModeActive := false ;
12128: LD_ADDR_EXP 45
12132: PUSH
12133: LD_INT 0
12135: ST_TO_ADDR
// normalCounter := 36 ;
12136: LD_ADDR_EXP 46
12140: PUSH
12141: LD_INT 36
12143: ST_TO_ADDR
// hardcoreCounter := 18 ;
12144: LD_ADDR_EXP 47
12148: PUSH
12149: LD_INT 18
12151: ST_TO_ADDR
// sRocket := false ;
12152: LD_ADDR_EXP 50
12156: PUSH
12157: LD_INT 0
12159: ST_TO_ADDR
// sSpeed := false ;
12160: LD_ADDR_EXP 49
12164: PUSH
12165: LD_INT 0
12167: ST_TO_ADDR
// sEngine := false ;
12168: LD_ADDR_EXP 51
12172: PUSH
12173: LD_INT 0
12175: ST_TO_ADDR
// sSpec := false ;
12176: LD_ADDR_EXP 48
12180: PUSH
12181: LD_INT 0
12183: ST_TO_ADDR
// sLevel := false ;
12184: LD_ADDR_EXP 52
12188: PUSH
12189: LD_INT 0
12191: ST_TO_ADDR
// sArmoury := false ;
12192: LD_ADDR_EXP 53
12196: PUSH
12197: LD_INT 0
12199: ST_TO_ADDR
// sRadar := false ;
12200: LD_ADDR_EXP 54
12204: PUSH
12205: LD_INT 0
12207: ST_TO_ADDR
// sBunker := false ;
12208: LD_ADDR_EXP 55
12212: PUSH
12213: LD_INT 0
12215: ST_TO_ADDR
// sHack := false ;
12216: LD_ADDR_EXP 56
12220: PUSH
12221: LD_INT 0
12223: ST_TO_ADDR
// sFire := false ;
12224: LD_ADDR_EXP 57
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// sRefresh := false ;
12232: LD_ADDR_EXP 58
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// sExp := false ;
12240: LD_ADDR_EXP 59
12244: PUSH
12245: LD_INT 0
12247: ST_TO_ADDR
// sDepot := false ;
12248: LD_ADDR_EXP 60
12252: PUSH
12253: LD_INT 0
12255: ST_TO_ADDR
// sFlag := false ;
12256: LD_ADDR_EXP 61
12260: PUSH
12261: LD_INT 0
12263: ST_TO_ADDR
// sKamikadze := false ;
12264: LD_ADDR_EXP 69
12268: PUSH
12269: LD_INT 0
12271: ST_TO_ADDR
// sTroll := false ;
12272: LD_ADDR_EXP 70
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// sSlow := false ;
12280: LD_ADDR_EXP 71
12284: PUSH
12285: LD_INT 0
12287: ST_TO_ADDR
// sLack := false ;
12288: LD_ADDR_EXP 72
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// sTank := false ;
12296: LD_ADDR_EXP 74
12300: PUSH
12301: LD_INT 0
12303: ST_TO_ADDR
// sRemote := false ;
12304: LD_ADDR_EXP 75
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// sPowell := false ;
12312: LD_ADDR_EXP 76
12316: PUSH
12317: LD_INT 0
12319: ST_TO_ADDR
// sTeleport := false ;
12320: LD_ADDR_EXP 79
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// sOilTower := false ;
12328: LD_ADDR_EXP 81
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// sShovel := false ;
12336: LD_ADDR_EXP 82
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// sSheik := false ;
12344: LD_ADDR_EXP 83
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// sEarthquake := false ;
12352: LD_ADDR_EXP 85
12356: PUSH
12357: LD_INT 0
12359: ST_TO_ADDR
// sAI := false ;
12360: LD_ADDR_EXP 86
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// sCargo := false ;
12368: LD_ADDR_EXP 89
12372: PUSH
12373: LD_INT 0
12375: ST_TO_ADDR
// sDLaser := false ;
12376: LD_ADDR_EXP 90
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// sExchange := false ;
12384: LD_ADDR_EXP 91
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// sFac := false ;
12392: LD_ADDR_EXP 92
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// sPower := false ;
12400: LD_ADDR_EXP 93
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// sRandom := false ;
12408: LD_ADDR_EXP 94
12412: PUSH
12413: LD_INT 0
12415: ST_TO_ADDR
// sShield := false ;
12416: LD_ADDR_EXP 95
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// sTime := false ;
12424: LD_ADDR_EXP 96
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// sTools := false ;
12432: LD_ADDR_EXP 97
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// sSold := false ;
12440: LD_ADDR_EXP 62
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// sDiff := false ;
12448: LD_ADDR_EXP 63
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// sFog := false ;
12456: LD_ADDR_EXP 66
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// sReset := false ;
12464: LD_ADDR_EXP 67
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// sSun := false ;
12472: LD_ADDR_EXP 68
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// sTiger := false ;
12480: LD_ADDR_EXP 64
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// sBomb := false ;
12488: LD_ADDR_EXP 65
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// sWound := false ;
12496: LD_ADDR_EXP 73
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// sBetray := false ;
12504: LD_ADDR_EXP 77
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// sContamin := false ;
12512: LD_ADDR_EXP 78
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// sOil := false ;
12520: LD_ADDR_EXP 80
12524: PUSH
12525: LD_INT 0
12527: ST_TO_ADDR
// sStu := false ;
12528: LD_ADDR_EXP 84
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// sBazooka := false ;
12536: LD_ADDR_EXP 87
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sMortar := false ;
12544: LD_ADDR_EXP 88
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// sRanger := false ;
12552: LD_ADDR_EXP 98
12556: PUSH
12557: LD_INT 0
12559: ST_TO_ADDR
// sComputer := false ;
12560: LD_ADDR_EXP 99
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// s30 := false ;
12568: LD_ADDR_EXP 100
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// s60 := false ;
12576: LD_ADDR_EXP 101
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// end ;
12584: LD_VAR 0 1
12588: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12589: LD_INT 0
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
12597: PPUSH
// result := [ ] ;
12598: LD_ADDR_VAR 0 2
12602: PUSH
12603: EMPTY
12604: ST_TO_ADDR
// if campaign_id = 1 then
12605: LD_OWVAR 69
12609: PUSH
12610: LD_INT 1
12612: EQUAL
12613: IFFALSE 15779
// begin case mission_number of 1 :
12615: LD_OWVAR 70
12619: PUSH
12620: LD_INT 1
12622: DOUBLE
12623: EQUAL
12624: IFTRUE 12628
12626: GO 12704
12628: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12629: LD_ADDR_VAR 0 2
12633: PUSH
12634: LD_INT 2
12636: PUSH
12637: LD_INT 4
12639: PUSH
12640: LD_INT 11
12642: PUSH
12643: LD_INT 12
12645: PUSH
12646: LD_INT 15
12648: PUSH
12649: LD_INT 16
12651: PUSH
12652: LD_INT 22
12654: PUSH
12655: LD_INT 23
12657: PUSH
12658: LD_INT 26
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 101
12674: PUSH
12675: LD_INT 102
12677: PUSH
12678: LD_INT 106
12680: PUSH
12681: LD_INT 116
12683: PUSH
12684: LD_INT 117
12686: PUSH
12687: LD_INT 118
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: ST_TO_ADDR
12702: GO 15777
12704: LD_INT 2
12706: DOUBLE
12707: EQUAL
12708: IFTRUE 12712
12710: GO 12796
12712: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12713: LD_ADDR_VAR 0 2
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: LD_INT 4
12723: PUSH
12724: LD_INT 11
12726: PUSH
12727: LD_INT 12
12729: PUSH
12730: LD_INT 15
12732: PUSH
12733: LD_INT 16
12735: PUSH
12736: LD_INT 22
12738: PUSH
12739: LD_INT 23
12741: PUSH
12742: LD_INT 26
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 101
12758: PUSH
12759: LD_INT 102
12761: PUSH
12762: LD_INT 105
12764: PUSH
12765: LD_INT 106
12767: PUSH
12768: LD_INT 108
12770: PUSH
12771: LD_INT 116
12773: PUSH
12774: LD_INT 117
12776: PUSH
12777: LD_INT 118
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: ST_TO_ADDR
12794: GO 15777
12796: LD_INT 3
12798: DOUBLE
12799: EQUAL
12800: IFTRUE 12804
12802: GO 12892
12804: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12805: LD_ADDR_VAR 0 2
12809: PUSH
12810: LD_INT 2
12812: PUSH
12813: LD_INT 4
12815: PUSH
12816: LD_INT 5
12818: PUSH
12819: LD_INT 11
12821: PUSH
12822: LD_INT 12
12824: PUSH
12825: LD_INT 15
12827: PUSH
12828: LD_INT 16
12830: PUSH
12831: LD_INT 22
12833: PUSH
12834: LD_INT 26
12836: PUSH
12837: LD_INT 36
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 101
12854: PUSH
12855: LD_INT 102
12857: PUSH
12858: LD_INT 105
12860: PUSH
12861: LD_INT 106
12863: PUSH
12864: LD_INT 108
12866: PUSH
12867: LD_INT 116
12869: PUSH
12870: LD_INT 117
12872: PUSH
12873: LD_INT 118
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: ST_TO_ADDR
12890: GO 15777
12892: LD_INT 4
12894: DOUBLE
12895: EQUAL
12896: IFTRUE 12900
12898: GO 12996
12900: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12901: LD_ADDR_VAR 0 2
12905: PUSH
12906: LD_INT 2
12908: PUSH
12909: LD_INT 4
12911: PUSH
12912: LD_INT 5
12914: PUSH
12915: LD_INT 8
12917: PUSH
12918: LD_INT 11
12920: PUSH
12921: LD_INT 12
12923: PUSH
12924: LD_INT 15
12926: PUSH
12927: LD_INT 16
12929: PUSH
12930: LD_INT 22
12932: PUSH
12933: LD_INT 23
12935: PUSH
12936: LD_INT 26
12938: PUSH
12939: LD_INT 36
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 101
12958: PUSH
12959: LD_INT 102
12961: PUSH
12962: LD_INT 105
12964: PUSH
12965: LD_INT 106
12967: PUSH
12968: LD_INT 108
12970: PUSH
12971: LD_INT 116
12973: PUSH
12974: LD_INT 117
12976: PUSH
12977: LD_INT 118
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: ST_TO_ADDR
12994: GO 15777
12996: LD_INT 5
12998: DOUBLE
12999: EQUAL
13000: IFTRUE 13004
13002: GO 13116
13004: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13005: LD_ADDR_VAR 0 2
13009: PUSH
13010: LD_INT 2
13012: PUSH
13013: LD_INT 4
13015: PUSH
13016: LD_INT 5
13018: PUSH
13019: LD_INT 6
13021: PUSH
13022: LD_INT 8
13024: PUSH
13025: LD_INT 11
13027: PUSH
13028: LD_INT 12
13030: PUSH
13031: LD_INT 15
13033: PUSH
13034: LD_INT 16
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 23
13042: PUSH
13043: LD_INT 25
13045: PUSH
13046: LD_INT 26
13048: PUSH
13049: LD_INT 36
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 101
13070: PUSH
13071: LD_INT 102
13073: PUSH
13074: LD_INT 105
13076: PUSH
13077: LD_INT 106
13079: PUSH
13080: LD_INT 108
13082: PUSH
13083: LD_INT 109
13085: PUSH
13086: LD_INT 112
13088: PUSH
13089: LD_INT 116
13091: PUSH
13092: LD_INT 117
13094: PUSH
13095: LD_INT 118
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: ST_TO_ADDR
13114: GO 15777
13116: LD_INT 6
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 13256
13124: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 4
13135: PUSH
13136: LD_INT 5
13138: PUSH
13139: LD_INT 6
13141: PUSH
13142: LD_INT 8
13144: PUSH
13145: LD_INT 11
13147: PUSH
13148: LD_INT 12
13150: PUSH
13151: LD_INT 15
13153: PUSH
13154: LD_INT 16
13156: PUSH
13157: LD_INT 20
13159: PUSH
13160: LD_INT 21
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_INT 23
13168: PUSH
13169: LD_INT 25
13171: PUSH
13172: LD_INT 26
13174: PUSH
13175: LD_INT 30
13177: PUSH
13178: LD_INT 31
13180: PUSH
13181: LD_INT 32
13183: PUSH
13184: LD_INT 36
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 101
13210: PUSH
13211: LD_INT 102
13213: PUSH
13214: LD_INT 105
13216: PUSH
13217: LD_INT 106
13219: PUSH
13220: LD_INT 108
13222: PUSH
13223: LD_INT 109
13225: PUSH
13226: LD_INT 112
13228: PUSH
13229: LD_INT 116
13231: PUSH
13232: LD_INT 117
13234: PUSH
13235: LD_INT 118
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: ST_TO_ADDR
13254: GO 15777
13256: LD_INT 7
13258: DOUBLE
13259: EQUAL
13260: IFTRUE 13264
13262: GO 13376
13264: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13265: LD_ADDR_VAR 0 2
13269: PUSH
13270: LD_INT 2
13272: PUSH
13273: LD_INT 4
13275: PUSH
13276: LD_INT 5
13278: PUSH
13279: LD_INT 7
13281: PUSH
13282: LD_INT 11
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: LD_INT 15
13290: PUSH
13291: LD_INT 16
13293: PUSH
13294: LD_INT 20
13296: PUSH
13297: LD_INT 21
13299: PUSH
13300: LD_INT 22
13302: PUSH
13303: LD_INT 23
13305: PUSH
13306: LD_INT 25
13308: PUSH
13309: LD_INT 26
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 101
13330: PUSH
13331: LD_INT 102
13333: PUSH
13334: LD_INT 103
13336: PUSH
13337: LD_INT 105
13339: PUSH
13340: LD_INT 106
13342: PUSH
13343: LD_INT 108
13345: PUSH
13346: LD_INT 112
13348: PUSH
13349: LD_INT 116
13351: PUSH
13352: LD_INT 117
13354: PUSH
13355: LD_INT 118
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: ST_TO_ADDR
13374: GO 15777
13376: LD_INT 8
13378: DOUBLE
13379: EQUAL
13380: IFTRUE 13384
13382: GO 13524
13384: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13385: LD_ADDR_VAR 0 2
13389: PUSH
13390: LD_INT 2
13392: PUSH
13393: LD_INT 4
13395: PUSH
13396: LD_INT 5
13398: PUSH
13399: LD_INT 6
13401: PUSH
13402: LD_INT 7
13404: PUSH
13405: LD_INT 8
13407: PUSH
13408: LD_INT 11
13410: PUSH
13411: LD_INT 12
13413: PUSH
13414: LD_INT 15
13416: PUSH
13417: LD_INT 16
13419: PUSH
13420: LD_INT 20
13422: PUSH
13423: LD_INT 21
13425: PUSH
13426: LD_INT 22
13428: PUSH
13429: LD_INT 23
13431: PUSH
13432: LD_INT 25
13434: PUSH
13435: LD_INT 26
13437: PUSH
13438: LD_INT 30
13440: PUSH
13441: LD_INT 31
13443: PUSH
13444: LD_INT 32
13446: PUSH
13447: LD_INT 36
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: PUSH
13472: LD_INT 101
13474: PUSH
13475: LD_INT 102
13477: PUSH
13478: LD_INT 103
13480: PUSH
13481: LD_INT 105
13483: PUSH
13484: LD_INT 106
13486: PUSH
13487: LD_INT 108
13489: PUSH
13490: LD_INT 109
13492: PUSH
13493: LD_INT 112
13495: PUSH
13496: LD_INT 116
13498: PUSH
13499: LD_INT 117
13501: PUSH
13502: LD_INT 118
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: ST_TO_ADDR
13522: GO 15777
13524: LD_INT 9
13526: DOUBLE
13527: EQUAL
13528: IFTRUE 13532
13530: GO 13680
13532: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13533: LD_ADDR_VAR 0 2
13537: PUSH
13538: LD_INT 2
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: LD_INT 5
13546: PUSH
13547: LD_INT 6
13549: PUSH
13550: LD_INT 7
13552: PUSH
13553: LD_INT 8
13555: PUSH
13556: LD_INT 11
13558: PUSH
13559: LD_INT 12
13561: PUSH
13562: LD_INT 15
13564: PUSH
13565: LD_INT 16
13567: PUSH
13568: LD_INT 20
13570: PUSH
13571: LD_INT 21
13573: PUSH
13574: LD_INT 22
13576: PUSH
13577: LD_INT 23
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 26
13585: PUSH
13586: LD_INT 28
13588: PUSH
13589: LD_INT 30
13591: PUSH
13592: LD_INT 31
13594: PUSH
13595: LD_INT 32
13597: PUSH
13598: LD_INT 36
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 101
13626: PUSH
13627: LD_INT 102
13629: PUSH
13630: LD_INT 103
13632: PUSH
13633: LD_INT 105
13635: PUSH
13636: LD_INT 106
13638: PUSH
13639: LD_INT 108
13641: PUSH
13642: LD_INT 109
13644: PUSH
13645: LD_INT 112
13647: PUSH
13648: LD_INT 114
13650: PUSH
13651: LD_INT 116
13653: PUSH
13654: LD_INT 117
13656: PUSH
13657: LD_INT 118
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: ST_TO_ADDR
13678: GO 15777
13680: LD_INT 10
13682: DOUBLE
13683: EQUAL
13684: IFTRUE 13688
13686: GO 13884
13688: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_INT 2
13696: PUSH
13697: LD_INT 4
13699: PUSH
13700: LD_INT 5
13702: PUSH
13703: LD_INT 6
13705: PUSH
13706: LD_INT 7
13708: PUSH
13709: LD_INT 8
13711: PUSH
13712: LD_INT 9
13714: PUSH
13715: LD_INT 10
13717: PUSH
13718: LD_INT 11
13720: PUSH
13721: LD_INT 12
13723: PUSH
13724: LD_INT 13
13726: PUSH
13727: LD_INT 14
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 17
13738: PUSH
13739: LD_INT 18
13741: PUSH
13742: LD_INT 19
13744: PUSH
13745: LD_INT 20
13747: PUSH
13748: LD_INT 21
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_INT 23
13756: PUSH
13757: LD_INT 24
13759: PUSH
13760: LD_INT 25
13762: PUSH
13763: LD_INT 26
13765: PUSH
13766: LD_INT 28
13768: PUSH
13769: LD_INT 30
13771: PUSH
13772: LD_INT 31
13774: PUSH
13775: LD_INT 32
13777: PUSH
13778: LD_INT 36
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 101
13814: PUSH
13815: LD_INT 102
13817: PUSH
13818: LD_INT 103
13820: PUSH
13821: LD_INT 104
13823: PUSH
13824: LD_INT 105
13826: PUSH
13827: LD_INT 106
13829: PUSH
13830: LD_INT 107
13832: PUSH
13833: LD_INT 108
13835: PUSH
13836: LD_INT 109
13838: PUSH
13839: LD_INT 110
13841: PUSH
13842: LD_INT 111
13844: PUSH
13845: LD_INT 112
13847: PUSH
13848: LD_INT 114
13850: PUSH
13851: LD_INT 116
13853: PUSH
13854: LD_INT 117
13856: PUSH
13857: LD_INT 118
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: ST_TO_ADDR
13882: GO 15777
13884: LD_INT 11
13886: DOUBLE
13887: EQUAL
13888: IFTRUE 13892
13890: GO 14096
13892: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13893: LD_ADDR_VAR 0 2
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: LD_INT 3
13903: PUSH
13904: LD_INT 4
13906: PUSH
13907: LD_INT 5
13909: PUSH
13910: LD_INT 6
13912: PUSH
13913: LD_INT 7
13915: PUSH
13916: LD_INT 8
13918: PUSH
13919: LD_INT 9
13921: PUSH
13922: LD_INT 10
13924: PUSH
13925: LD_INT 11
13927: PUSH
13928: LD_INT 12
13930: PUSH
13931: LD_INT 13
13933: PUSH
13934: LD_INT 14
13936: PUSH
13937: LD_INT 15
13939: PUSH
13940: LD_INT 16
13942: PUSH
13943: LD_INT 17
13945: PUSH
13946: LD_INT 18
13948: PUSH
13949: LD_INT 19
13951: PUSH
13952: LD_INT 20
13954: PUSH
13955: LD_INT 21
13957: PUSH
13958: LD_INT 22
13960: PUSH
13961: LD_INT 23
13963: PUSH
13964: LD_INT 24
13966: PUSH
13967: LD_INT 25
13969: PUSH
13970: LD_INT 26
13972: PUSH
13973: LD_INT 28
13975: PUSH
13976: LD_INT 30
13978: PUSH
13979: LD_INT 31
13981: PUSH
13982: LD_INT 32
13984: PUSH
13985: LD_INT 34
13987: PUSH
13988: LD_INT 36
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: PUSH
14024: LD_INT 101
14026: PUSH
14027: LD_INT 102
14029: PUSH
14030: LD_INT 103
14032: PUSH
14033: LD_INT 104
14035: PUSH
14036: LD_INT 105
14038: PUSH
14039: LD_INT 106
14041: PUSH
14042: LD_INT 107
14044: PUSH
14045: LD_INT 108
14047: PUSH
14048: LD_INT 109
14050: PUSH
14051: LD_INT 110
14053: PUSH
14054: LD_INT 111
14056: PUSH
14057: LD_INT 112
14059: PUSH
14060: LD_INT 114
14062: PUSH
14063: LD_INT 116
14065: PUSH
14066: LD_INT 117
14068: PUSH
14069: LD_INT 118
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: ST_TO_ADDR
14094: GO 15777
14096: LD_INT 12
14098: DOUBLE
14099: EQUAL
14100: IFTRUE 14104
14102: GO 14324
14104: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14105: LD_ADDR_VAR 0 2
14109: PUSH
14110: LD_INT 1
14112: PUSH
14113: LD_INT 2
14115: PUSH
14116: LD_INT 3
14118: PUSH
14119: LD_INT 4
14121: PUSH
14122: LD_INT 5
14124: PUSH
14125: LD_INT 6
14127: PUSH
14128: LD_INT 7
14130: PUSH
14131: LD_INT 8
14133: PUSH
14134: LD_INT 9
14136: PUSH
14137: LD_INT 10
14139: PUSH
14140: LD_INT 11
14142: PUSH
14143: LD_INT 12
14145: PUSH
14146: LD_INT 13
14148: PUSH
14149: LD_INT 14
14151: PUSH
14152: LD_INT 15
14154: PUSH
14155: LD_INT 16
14157: PUSH
14158: LD_INT 17
14160: PUSH
14161: LD_INT 18
14163: PUSH
14164: LD_INT 19
14166: PUSH
14167: LD_INT 20
14169: PUSH
14170: LD_INT 21
14172: PUSH
14173: LD_INT 22
14175: PUSH
14176: LD_INT 23
14178: PUSH
14179: LD_INT 24
14181: PUSH
14182: LD_INT 25
14184: PUSH
14185: LD_INT 26
14187: PUSH
14188: LD_INT 27
14190: PUSH
14191: LD_INT 28
14193: PUSH
14194: LD_INT 30
14196: PUSH
14197: LD_INT 31
14199: PUSH
14200: LD_INT 32
14202: PUSH
14203: LD_INT 33
14205: PUSH
14206: LD_INT 34
14208: PUSH
14209: LD_INT 36
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 101
14250: PUSH
14251: LD_INT 102
14253: PUSH
14254: LD_INT 103
14256: PUSH
14257: LD_INT 104
14259: PUSH
14260: LD_INT 105
14262: PUSH
14263: LD_INT 106
14265: PUSH
14266: LD_INT 107
14268: PUSH
14269: LD_INT 108
14271: PUSH
14272: LD_INT 109
14274: PUSH
14275: LD_INT 110
14277: PUSH
14278: LD_INT 111
14280: PUSH
14281: LD_INT 112
14283: PUSH
14284: LD_INT 113
14286: PUSH
14287: LD_INT 114
14289: PUSH
14290: LD_INT 116
14292: PUSH
14293: LD_INT 117
14295: PUSH
14296: LD_INT 118
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: ST_TO_ADDR
14322: GO 15777
14324: LD_INT 13
14326: DOUBLE
14327: EQUAL
14328: IFTRUE 14332
14330: GO 14540
14332: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14333: LD_ADDR_VAR 0 2
14337: PUSH
14338: LD_INT 1
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: LD_INT 3
14346: PUSH
14347: LD_INT 4
14349: PUSH
14350: LD_INT 5
14352: PUSH
14353: LD_INT 8
14355: PUSH
14356: LD_INT 9
14358: PUSH
14359: LD_INT 10
14361: PUSH
14362: LD_INT 11
14364: PUSH
14365: LD_INT 12
14367: PUSH
14368: LD_INT 14
14370: PUSH
14371: LD_INT 15
14373: PUSH
14374: LD_INT 16
14376: PUSH
14377: LD_INT 17
14379: PUSH
14380: LD_INT 18
14382: PUSH
14383: LD_INT 19
14385: PUSH
14386: LD_INT 20
14388: PUSH
14389: LD_INT 21
14391: PUSH
14392: LD_INT 22
14394: PUSH
14395: LD_INT 23
14397: PUSH
14398: LD_INT 24
14400: PUSH
14401: LD_INT 25
14403: PUSH
14404: LD_INT 26
14406: PUSH
14407: LD_INT 27
14409: PUSH
14410: LD_INT 28
14412: PUSH
14413: LD_INT 30
14415: PUSH
14416: LD_INT 31
14418: PUSH
14419: LD_INT 32
14421: PUSH
14422: LD_INT 33
14424: PUSH
14425: LD_INT 34
14427: PUSH
14428: LD_INT 36
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 101
14466: PUSH
14467: LD_INT 102
14469: PUSH
14470: LD_INT 103
14472: PUSH
14473: LD_INT 104
14475: PUSH
14476: LD_INT 105
14478: PUSH
14479: LD_INT 106
14481: PUSH
14482: LD_INT 107
14484: PUSH
14485: LD_INT 108
14487: PUSH
14488: LD_INT 109
14490: PUSH
14491: LD_INT 110
14493: PUSH
14494: LD_INT 111
14496: PUSH
14497: LD_INT 112
14499: PUSH
14500: LD_INT 113
14502: PUSH
14503: LD_INT 114
14505: PUSH
14506: LD_INT 116
14508: PUSH
14509: LD_INT 117
14511: PUSH
14512: LD_INT 118
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: ST_TO_ADDR
14538: GO 15777
14540: LD_INT 14
14542: DOUBLE
14543: EQUAL
14544: IFTRUE 14548
14546: GO 14772
14548: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14549: LD_ADDR_VAR 0 2
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: LD_INT 2
14559: PUSH
14560: LD_INT 3
14562: PUSH
14563: LD_INT 4
14565: PUSH
14566: LD_INT 5
14568: PUSH
14569: LD_INT 6
14571: PUSH
14572: LD_INT 7
14574: PUSH
14575: LD_INT 8
14577: PUSH
14578: LD_INT 9
14580: PUSH
14581: LD_INT 10
14583: PUSH
14584: LD_INT 11
14586: PUSH
14587: LD_INT 12
14589: PUSH
14590: LD_INT 13
14592: PUSH
14593: LD_INT 14
14595: PUSH
14596: LD_INT 15
14598: PUSH
14599: LD_INT 16
14601: PUSH
14602: LD_INT 17
14604: PUSH
14605: LD_INT 18
14607: PUSH
14608: LD_INT 19
14610: PUSH
14611: LD_INT 20
14613: PUSH
14614: LD_INT 21
14616: PUSH
14617: LD_INT 22
14619: PUSH
14620: LD_INT 23
14622: PUSH
14623: LD_INT 24
14625: PUSH
14626: LD_INT 25
14628: PUSH
14629: LD_INT 26
14631: PUSH
14632: LD_INT 27
14634: PUSH
14635: LD_INT 28
14637: PUSH
14638: LD_INT 29
14640: PUSH
14641: LD_INT 30
14643: PUSH
14644: LD_INT 31
14646: PUSH
14647: LD_INT 32
14649: PUSH
14650: LD_INT 33
14652: PUSH
14653: LD_INT 34
14655: PUSH
14656: LD_INT 36
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 101
14698: PUSH
14699: LD_INT 102
14701: PUSH
14702: LD_INT 103
14704: PUSH
14705: LD_INT 104
14707: PUSH
14708: LD_INT 105
14710: PUSH
14711: LD_INT 106
14713: PUSH
14714: LD_INT 107
14716: PUSH
14717: LD_INT 108
14719: PUSH
14720: LD_INT 109
14722: PUSH
14723: LD_INT 110
14725: PUSH
14726: LD_INT 111
14728: PUSH
14729: LD_INT 112
14731: PUSH
14732: LD_INT 113
14734: PUSH
14735: LD_INT 114
14737: PUSH
14738: LD_INT 116
14740: PUSH
14741: LD_INT 117
14743: PUSH
14744: LD_INT 118
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: ST_TO_ADDR
14770: GO 15777
14772: LD_INT 15
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 15004
14780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14781: LD_ADDR_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 3
14794: PUSH
14795: LD_INT 4
14797: PUSH
14798: LD_INT 5
14800: PUSH
14801: LD_INT 6
14803: PUSH
14804: LD_INT 7
14806: PUSH
14807: LD_INT 8
14809: PUSH
14810: LD_INT 9
14812: PUSH
14813: LD_INT 10
14815: PUSH
14816: LD_INT 11
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: LD_INT 13
14824: PUSH
14825: LD_INT 14
14827: PUSH
14828: LD_INT 15
14830: PUSH
14831: LD_INT 16
14833: PUSH
14834: LD_INT 17
14836: PUSH
14837: LD_INT 18
14839: PUSH
14840: LD_INT 19
14842: PUSH
14843: LD_INT 20
14845: PUSH
14846: LD_INT 21
14848: PUSH
14849: LD_INT 22
14851: PUSH
14852: LD_INT 23
14854: PUSH
14855: LD_INT 24
14857: PUSH
14858: LD_INT 25
14860: PUSH
14861: LD_INT 26
14863: PUSH
14864: LD_INT 27
14866: PUSH
14867: LD_INT 28
14869: PUSH
14870: LD_INT 29
14872: PUSH
14873: LD_INT 30
14875: PUSH
14876: LD_INT 31
14878: PUSH
14879: LD_INT 32
14881: PUSH
14882: LD_INT 33
14884: PUSH
14885: LD_INT 34
14887: PUSH
14888: LD_INT 36
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 101
14930: PUSH
14931: LD_INT 102
14933: PUSH
14934: LD_INT 103
14936: PUSH
14937: LD_INT 104
14939: PUSH
14940: LD_INT 105
14942: PUSH
14943: LD_INT 106
14945: PUSH
14946: LD_INT 107
14948: PUSH
14949: LD_INT 108
14951: PUSH
14952: LD_INT 109
14954: PUSH
14955: LD_INT 110
14957: PUSH
14958: LD_INT 111
14960: PUSH
14961: LD_INT 112
14963: PUSH
14964: LD_INT 113
14966: PUSH
14967: LD_INT 114
14969: PUSH
14970: LD_INT 116
14972: PUSH
14973: LD_INT 117
14975: PUSH
14976: LD_INT 118
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: ST_TO_ADDR
15002: GO 15777
15004: LD_INT 16
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15148
15012: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_INT 2
15020: PUSH
15021: LD_INT 4
15023: PUSH
15024: LD_INT 5
15026: PUSH
15027: LD_INT 7
15029: PUSH
15030: LD_INT 11
15032: PUSH
15033: LD_INT 12
15035: PUSH
15036: LD_INT 15
15038: PUSH
15039: LD_INT 16
15041: PUSH
15042: LD_INT 20
15044: PUSH
15045: LD_INT 21
15047: PUSH
15048: LD_INT 22
15050: PUSH
15051: LD_INT 23
15053: PUSH
15054: LD_INT 25
15056: PUSH
15057: LD_INT 26
15059: PUSH
15060: LD_INT 30
15062: PUSH
15063: LD_INT 31
15065: PUSH
15066: LD_INT 32
15068: PUSH
15069: LD_INT 33
15071: PUSH
15072: LD_INT 34
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 101
15098: PUSH
15099: LD_INT 102
15101: PUSH
15102: LD_INT 103
15104: PUSH
15105: LD_INT 106
15107: PUSH
15108: LD_INT 108
15110: PUSH
15111: LD_INT 112
15113: PUSH
15114: LD_INT 113
15116: PUSH
15117: LD_INT 114
15119: PUSH
15120: LD_INT 116
15122: PUSH
15123: LD_INT 117
15125: PUSH
15126: LD_INT 118
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: ST_TO_ADDR
15146: GO 15777
15148: LD_INT 17
15150: DOUBLE
15151: EQUAL
15152: IFTRUE 15156
15154: GO 15380
15156: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15157: LD_ADDR_VAR 0 2
15161: PUSH
15162: LD_INT 1
15164: PUSH
15165: LD_INT 2
15167: PUSH
15168: LD_INT 3
15170: PUSH
15171: LD_INT 4
15173: PUSH
15174: LD_INT 5
15176: PUSH
15177: LD_INT 6
15179: PUSH
15180: LD_INT 7
15182: PUSH
15183: LD_INT 8
15185: PUSH
15186: LD_INT 9
15188: PUSH
15189: LD_INT 10
15191: PUSH
15192: LD_INT 11
15194: PUSH
15195: LD_INT 12
15197: PUSH
15198: LD_INT 13
15200: PUSH
15201: LD_INT 14
15203: PUSH
15204: LD_INT 15
15206: PUSH
15207: LD_INT 16
15209: PUSH
15210: LD_INT 17
15212: PUSH
15213: LD_INT 18
15215: PUSH
15216: LD_INT 19
15218: PUSH
15219: LD_INT 20
15221: PUSH
15222: LD_INT 21
15224: PUSH
15225: LD_INT 22
15227: PUSH
15228: LD_INT 23
15230: PUSH
15231: LD_INT 24
15233: PUSH
15234: LD_INT 25
15236: PUSH
15237: LD_INT 26
15239: PUSH
15240: LD_INT 27
15242: PUSH
15243: LD_INT 28
15245: PUSH
15246: LD_INT 29
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 31
15254: PUSH
15255: LD_INT 32
15257: PUSH
15258: LD_INT 33
15260: PUSH
15261: LD_INT 34
15263: PUSH
15264: LD_INT 36
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 101
15306: PUSH
15307: LD_INT 102
15309: PUSH
15310: LD_INT 103
15312: PUSH
15313: LD_INT 104
15315: PUSH
15316: LD_INT 105
15318: PUSH
15319: LD_INT 106
15321: PUSH
15322: LD_INT 107
15324: PUSH
15325: LD_INT 108
15327: PUSH
15328: LD_INT 109
15330: PUSH
15331: LD_INT 110
15333: PUSH
15334: LD_INT 111
15336: PUSH
15337: LD_INT 112
15339: PUSH
15340: LD_INT 113
15342: PUSH
15343: LD_INT 114
15345: PUSH
15346: LD_INT 116
15348: PUSH
15349: LD_INT 117
15351: PUSH
15352: LD_INT 118
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: ST_TO_ADDR
15378: GO 15777
15380: LD_INT 18
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15536
15388: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_INT 2
15396: PUSH
15397: LD_INT 4
15399: PUSH
15400: LD_INT 5
15402: PUSH
15403: LD_INT 7
15405: PUSH
15406: LD_INT 11
15408: PUSH
15409: LD_INT 12
15411: PUSH
15412: LD_INT 15
15414: PUSH
15415: LD_INT 16
15417: PUSH
15418: LD_INT 20
15420: PUSH
15421: LD_INT 21
15423: PUSH
15424: LD_INT 22
15426: PUSH
15427: LD_INT 23
15429: PUSH
15430: LD_INT 25
15432: PUSH
15433: LD_INT 26
15435: PUSH
15436: LD_INT 30
15438: PUSH
15439: LD_INT 31
15441: PUSH
15442: LD_INT 32
15444: PUSH
15445: LD_INT 33
15447: PUSH
15448: LD_INT 34
15450: PUSH
15451: LD_INT 35
15453: PUSH
15454: LD_INT 36
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 101
15482: PUSH
15483: LD_INT 102
15485: PUSH
15486: LD_INT 103
15488: PUSH
15489: LD_INT 106
15491: PUSH
15492: LD_INT 108
15494: PUSH
15495: LD_INT 112
15497: PUSH
15498: LD_INT 113
15500: PUSH
15501: LD_INT 114
15503: PUSH
15504: LD_INT 115
15506: PUSH
15507: LD_INT 116
15509: PUSH
15510: LD_INT 117
15512: PUSH
15513: LD_INT 118
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: ST_TO_ADDR
15534: GO 15777
15536: LD_INT 19
15538: DOUBLE
15539: EQUAL
15540: IFTRUE 15544
15542: GO 15776
15544: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15545: LD_ADDR_VAR 0 2
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: LD_INT 2
15555: PUSH
15556: LD_INT 3
15558: PUSH
15559: LD_INT 4
15561: PUSH
15562: LD_INT 5
15564: PUSH
15565: LD_INT 6
15567: PUSH
15568: LD_INT 7
15570: PUSH
15571: LD_INT 8
15573: PUSH
15574: LD_INT 9
15576: PUSH
15577: LD_INT 10
15579: PUSH
15580: LD_INT 11
15582: PUSH
15583: LD_INT 12
15585: PUSH
15586: LD_INT 13
15588: PUSH
15589: LD_INT 14
15591: PUSH
15592: LD_INT 15
15594: PUSH
15595: LD_INT 16
15597: PUSH
15598: LD_INT 17
15600: PUSH
15601: LD_INT 18
15603: PUSH
15604: LD_INT 19
15606: PUSH
15607: LD_INT 20
15609: PUSH
15610: LD_INT 21
15612: PUSH
15613: LD_INT 22
15615: PUSH
15616: LD_INT 23
15618: PUSH
15619: LD_INT 24
15621: PUSH
15622: LD_INT 25
15624: PUSH
15625: LD_INT 26
15627: PUSH
15628: LD_INT 27
15630: PUSH
15631: LD_INT 28
15633: PUSH
15634: LD_INT 29
15636: PUSH
15637: LD_INT 30
15639: PUSH
15640: LD_INT 31
15642: PUSH
15643: LD_INT 32
15645: PUSH
15646: LD_INT 33
15648: PUSH
15649: LD_INT 34
15651: PUSH
15652: LD_INT 35
15654: PUSH
15655: LD_INT 36
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 101
15698: PUSH
15699: LD_INT 102
15701: PUSH
15702: LD_INT 103
15704: PUSH
15705: LD_INT 104
15707: PUSH
15708: LD_INT 105
15710: PUSH
15711: LD_INT 106
15713: PUSH
15714: LD_INT 107
15716: PUSH
15717: LD_INT 108
15719: PUSH
15720: LD_INT 109
15722: PUSH
15723: LD_INT 110
15725: PUSH
15726: LD_INT 111
15728: PUSH
15729: LD_INT 112
15731: PUSH
15732: LD_INT 113
15734: PUSH
15735: LD_INT 114
15737: PUSH
15738: LD_INT 115
15740: PUSH
15741: LD_INT 116
15743: PUSH
15744: LD_INT 117
15746: PUSH
15747: LD_INT 118
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: ST_TO_ADDR
15774: GO 15777
15776: POP
// end else
15777: GO 16008
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15779: LD_ADDR_VAR 0 2
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: LD_INT 2
15789: PUSH
15790: LD_INT 3
15792: PUSH
15793: LD_INT 4
15795: PUSH
15796: LD_INT 5
15798: PUSH
15799: LD_INT 6
15801: PUSH
15802: LD_INT 7
15804: PUSH
15805: LD_INT 8
15807: PUSH
15808: LD_INT 9
15810: PUSH
15811: LD_INT 10
15813: PUSH
15814: LD_INT 11
15816: PUSH
15817: LD_INT 12
15819: PUSH
15820: LD_INT 13
15822: PUSH
15823: LD_INT 14
15825: PUSH
15826: LD_INT 15
15828: PUSH
15829: LD_INT 16
15831: PUSH
15832: LD_INT 17
15834: PUSH
15835: LD_INT 18
15837: PUSH
15838: LD_INT 19
15840: PUSH
15841: LD_INT 20
15843: PUSH
15844: LD_INT 21
15846: PUSH
15847: LD_INT 22
15849: PUSH
15850: LD_INT 23
15852: PUSH
15853: LD_INT 24
15855: PUSH
15856: LD_INT 25
15858: PUSH
15859: LD_INT 26
15861: PUSH
15862: LD_INT 27
15864: PUSH
15865: LD_INT 28
15867: PUSH
15868: LD_INT 29
15870: PUSH
15871: LD_INT 30
15873: PUSH
15874: LD_INT 31
15876: PUSH
15877: LD_INT 32
15879: PUSH
15880: LD_INT 33
15882: PUSH
15883: LD_INT 34
15885: PUSH
15886: LD_INT 35
15888: PUSH
15889: LD_INT 36
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 101
15932: PUSH
15933: LD_INT 102
15935: PUSH
15936: LD_INT 103
15938: PUSH
15939: LD_INT 104
15941: PUSH
15942: LD_INT 105
15944: PUSH
15945: LD_INT 106
15947: PUSH
15948: LD_INT 107
15950: PUSH
15951: LD_INT 108
15953: PUSH
15954: LD_INT 109
15956: PUSH
15957: LD_INT 110
15959: PUSH
15960: LD_INT 111
15962: PUSH
15963: LD_INT 112
15965: PUSH
15966: LD_INT 113
15968: PUSH
15969: LD_INT 114
15971: PUSH
15972: LD_INT 115
15974: PUSH
15975: LD_INT 116
15977: PUSH
15978: LD_INT 117
15980: PUSH
15981: LD_INT 118
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: ST_TO_ADDR
// if result then
16008: LD_VAR 0 2
16012: IFFALSE 16798
// begin normal :=  ;
16014: LD_ADDR_VAR 0 5
16018: PUSH
16019: LD_STRING 
16021: ST_TO_ADDR
// hardcore :=  ;
16022: LD_ADDR_VAR 0 6
16026: PUSH
16027: LD_STRING 
16029: ST_TO_ADDR
// active :=  ;
16030: LD_ADDR_VAR 0 7
16034: PUSH
16035: LD_STRING 
16037: ST_TO_ADDR
// for i = 1 to normalCounter do
16038: LD_ADDR_VAR 0 8
16042: PUSH
16043: DOUBLE
16044: LD_INT 1
16046: DEC
16047: ST_TO_ADDR
16048: LD_EXP 46
16052: PUSH
16053: FOR_TO
16054: IFFALSE 16155
// begin tmp := 0 ;
16056: LD_ADDR_VAR 0 3
16060: PUSH
16061: LD_STRING 0
16063: ST_TO_ADDR
// if result [ 1 ] then
16064: LD_VAR 0 2
16068: PUSH
16069: LD_INT 1
16071: ARRAY
16072: IFFALSE 16137
// if result [ 1 ] [ 1 ] = i then
16074: LD_VAR 0 2
16078: PUSH
16079: LD_INT 1
16081: ARRAY
16082: PUSH
16083: LD_INT 1
16085: ARRAY
16086: PUSH
16087: LD_VAR 0 8
16091: EQUAL
16092: IFFALSE 16137
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16094: LD_ADDR_VAR 0 2
16098: PUSH
16099: LD_VAR 0 2
16103: PPUSH
16104: LD_INT 1
16106: PPUSH
16107: LD_VAR 0 2
16111: PUSH
16112: LD_INT 1
16114: ARRAY
16115: PPUSH
16116: LD_INT 1
16118: PPUSH
16119: CALL_OW 3
16123: PPUSH
16124: CALL_OW 1
16128: ST_TO_ADDR
// tmp := 1 ;
16129: LD_ADDR_VAR 0 3
16133: PUSH
16134: LD_STRING 1
16136: ST_TO_ADDR
// end ; normal := normal & tmp ;
16137: LD_ADDR_VAR 0 5
16141: PUSH
16142: LD_VAR 0 5
16146: PUSH
16147: LD_VAR 0 3
16151: STR
16152: ST_TO_ADDR
// end ;
16153: GO 16053
16155: POP
16156: POP
// for i = 1 to hardcoreCounter do
16157: LD_ADDR_VAR 0 8
16161: PUSH
16162: DOUBLE
16163: LD_INT 1
16165: DEC
16166: ST_TO_ADDR
16167: LD_EXP 47
16171: PUSH
16172: FOR_TO
16173: IFFALSE 16278
// begin tmp := 0 ;
16175: LD_ADDR_VAR 0 3
16179: PUSH
16180: LD_STRING 0
16182: ST_TO_ADDR
// if result [ 2 ] then
16183: LD_VAR 0 2
16187: PUSH
16188: LD_INT 2
16190: ARRAY
16191: IFFALSE 16260
// if result [ 2 ] [ 1 ] = 100 + i then
16193: LD_VAR 0 2
16197: PUSH
16198: LD_INT 2
16200: ARRAY
16201: PUSH
16202: LD_INT 1
16204: ARRAY
16205: PUSH
16206: LD_INT 100
16208: PUSH
16209: LD_VAR 0 8
16213: PLUS
16214: EQUAL
16215: IFFALSE 16260
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16217: LD_ADDR_VAR 0 2
16221: PUSH
16222: LD_VAR 0 2
16226: PPUSH
16227: LD_INT 2
16229: PPUSH
16230: LD_VAR 0 2
16234: PUSH
16235: LD_INT 2
16237: ARRAY
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 3
16246: PPUSH
16247: CALL_OW 1
16251: ST_TO_ADDR
// tmp := 1 ;
16252: LD_ADDR_VAR 0 3
16256: PUSH
16257: LD_STRING 1
16259: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16260: LD_ADDR_VAR 0 6
16264: PUSH
16265: LD_VAR 0 6
16269: PUSH
16270: LD_VAR 0 3
16274: STR
16275: ST_TO_ADDR
// end ;
16276: GO 16172
16278: POP
16279: POP
// if isGameLoad then
16280: LD_VAR 0 1
16284: IFFALSE 16759
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16286: LD_ADDR_VAR 0 4
16290: PUSH
16291: LD_EXP 50
16295: PUSH
16296: LD_EXP 49
16300: PUSH
16301: LD_EXP 51
16305: PUSH
16306: LD_EXP 48
16310: PUSH
16311: LD_EXP 52
16315: PUSH
16316: LD_EXP 53
16320: PUSH
16321: LD_EXP 54
16325: PUSH
16326: LD_EXP 55
16330: PUSH
16331: LD_EXP 56
16335: PUSH
16336: LD_EXP 57
16340: PUSH
16341: LD_EXP 58
16345: PUSH
16346: LD_EXP 59
16350: PUSH
16351: LD_EXP 60
16355: PUSH
16356: LD_EXP 61
16360: PUSH
16361: LD_EXP 69
16365: PUSH
16366: LD_EXP 70
16370: PUSH
16371: LD_EXP 71
16375: PUSH
16376: LD_EXP 72
16380: PUSH
16381: LD_EXP 74
16385: PUSH
16386: LD_EXP 75
16390: PUSH
16391: LD_EXP 76
16395: PUSH
16396: LD_EXP 79
16400: PUSH
16401: LD_EXP 81
16405: PUSH
16406: LD_EXP 82
16410: PUSH
16411: LD_EXP 83
16415: PUSH
16416: LD_EXP 85
16420: PUSH
16421: LD_EXP 86
16425: PUSH
16426: LD_EXP 89
16430: PUSH
16431: LD_EXP 90
16435: PUSH
16436: LD_EXP 91
16440: PUSH
16441: LD_EXP 92
16445: PUSH
16446: LD_EXP 93
16450: PUSH
16451: LD_EXP 94
16455: PUSH
16456: LD_EXP 95
16460: PUSH
16461: LD_EXP 96
16465: PUSH
16466: LD_EXP 97
16470: PUSH
16471: LD_EXP 62
16475: PUSH
16476: LD_EXP 63
16480: PUSH
16481: LD_EXP 66
16485: PUSH
16486: LD_EXP 67
16490: PUSH
16491: LD_EXP 68
16495: PUSH
16496: LD_EXP 64
16500: PUSH
16501: LD_EXP 65
16505: PUSH
16506: LD_EXP 73
16510: PUSH
16511: LD_EXP 77
16515: PUSH
16516: LD_EXP 78
16520: PUSH
16521: LD_EXP 80
16525: PUSH
16526: LD_EXP 84
16530: PUSH
16531: LD_EXP 87
16535: PUSH
16536: LD_EXP 88
16540: PUSH
16541: LD_EXP 98
16545: PUSH
16546: LD_EXP 99
16550: PUSH
16551: LD_EXP 100
16555: PUSH
16556: LD_EXP 101
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: ST_TO_ADDR
// tmp :=  ;
16617: LD_ADDR_VAR 0 3
16621: PUSH
16622: LD_STRING 
16624: ST_TO_ADDR
// for i = 1 to normalCounter do
16625: LD_ADDR_VAR 0 8
16629: PUSH
16630: DOUBLE
16631: LD_INT 1
16633: DEC
16634: ST_TO_ADDR
16635: LD_EXP 46
16639: PUSH
16640: FOR_TO
16641: IFFALSE 16677
// begin if flags [ i ] then
16643: LD_VAR 0 4
16647: PUSH
16648: LD_VAR 0 8
16652: ARRAY
16653: IFFALSE 16675
// tmp := tmp & i & ; ;
16655: LD_ADDR_VAR 0 3
16659: PUSH
16660: LD_VAR 0 3
16664: PUSH
16665: LD_VAR 0 8
16669: STR
16670: PUSH
16671: LD_STRING ;
16673: STR
16674: ST_TO_ADDR
// end ;
16675: GO 16640
16677: POP
16678: POP
// for i = 1 to hardcoreCounter do
16679: LD_ADDR_VAR 0 8
16683: PUSH
16684: DOUBLE
16685: LD_INT 1
16687: DEC
16688: ST_TO_ADDR
16689: LD_EXP 47
16693: PUSH
16694: FOR_TO
16695: IFFALSE 16741
// begin if flags [ normalCounter + i ] then
16697: LD_VAR 0 4
16701: PUSH
16702: LD_EXP 46
16706: PUSH
16707: LD_VAR 0 8
16711: PLUS
16712: ARRAY
16713: IFFALSE 16739
// tmp := tmp & ( 100 + i ) & ; ;
16715: LD_ADDR_VAR 0 3
16719: PUSH
16720: LD_VAR 0 3
16724: PUSH
16725: LD_INT 100
16727: PUSH
16728: LD_VAR 0 8
16732: PLUS
16733: STR
16734: PUSH
16735: LD_STRING ;
16737: STR
16738: ST_TO_ADDR
// end ;
16739: GO 16694
16741: POP
16742: POP
// if tmp then
16743: LD_VAR 0 3
16747: IFFALSE 16759
// active := tmp ;
16749: LD_ADDR_VAR 0 7
16753: PUSH
16754: LD_VAR 0 3
16758: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16759: LD_STRING getStreamItemsFromMission("
16761: PUSH
16762: LD_VAR 0 5
16766: STR
16767: PUSH
16768: LD_STRING ","
16770: STR
16771: PUSH
16772: LD_VAR 0 6
16776: STR
16777: PUSH
16778: LD_STRING ","
16780: STR
16781: PUSH
16782: LD_VAR 0 7
16786: STR
16787: PUSH
16788: LD_STRING ")
16790: STR
16791: PPUSH
16792: CALL_OW 559
// end else
16796: GO 16805
// ToLua ( getStreamItemsFromMission("","","") ) ;
16798: LD_STRING getStreamItemsFromMission("","","")
16800: PPUSH
16801: CALL_OW 559
// end ;
16805: LD_VAR 0 2
16809: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16810: LD_EXP 45
16814: IFFALSE 16822
16816: PUSH
16817: LD_EXP 50
16821: AND
16822: IFFALSE 16946
16824: GO 16826
16826: DISABLE
16827: LD_INT 0
16829: PPUSH
16830: PPUSH
// begin enable ;
16831: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16832: LD_ADDR_VAR 0 2
16836: PUSH
16837: LD_INT 22
16839: PUSH
16840: LD_OWVAR 2
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: LD_INT 34
16854: PUSH
16855: LD_INT 7
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 34
16864: PUSH
16865: LD_INT 45
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 34
16874: PUSH
16875: LD_INT 28
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 34
16884: PUSH
16885: LD_INT 47
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PPUSH
16903: CALL_OW 69
16907: ST_TO_ADDR
// if not tmp then
16908: LD_VAR 0 2
16912: NOT
16913: IFFALSE 16917
// exit ;
16915: GO 16946
// for i in tmp do
16917: LD_ADDR_VAR 0 1
16921: PUSH
16922: LD_VAR 0 2
16926: PUSH
16927: FOR_IN
16928: IFFALSE 16944
// begin SetLives ( i , 0 ) ;
16930: LD_VAR 0 1
16934: PPUSH
16935: LD_INT 0
16937: PPUSH
16938: CALL_OW 234
// end ;
16942: GO 16927
16944: POP
16945: POP
// end ;
16946: PPOPN 2
16948: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16949: LD_EXP 45
16953: IFFALSE 16961
16955: PUSH
16956: LD_EXP 51
16960: AND
16961: IFFALSE 17045
16963: GO 16965
16965: DISABLE
16966: LD_INT 0
16968: PPUSH
16969: PPUSH
// begin enable ;
16970: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16971: LD_ADDR_VAR 0 2
16975: PUSH
16976: LD_INT 22
16978: PUSH
16979: LD_OWVAR 2
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 32
16990: PUSH
16991: LD_INT 3
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PPUSH
17002: CALL_OW 69
17006: ST_TO_ADDR
// if not tmp then
17007: LD_VAR 0 2
17011: NOT
17012: IFFALSE 17016
// exit ;
17014: GO 17045
// for i in tmp do
17016: LD_ADDR_VAR 0 1
17020: PUSH
17021: LD_VAR 0 2
17025: PUSH
17026: FOR_IN
17027: IFFALSE 17043
// begin SetLives ( i , 0 ) ;
17029: LD_VAR 0 1
17033: PPUSH
17034: LD_INT 0
17036: PPUSH
17037: CALL_OW 234
// end ;
17041: GO 17026
17043: POP
17044: POP
// end ;
17045: PPOPN 2
17047: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17048: LD_EXP 45
17052: IFFALSE 17060
17054: PUSH
17055: LD_EXP 48
17059: AND
17060: IFFALSE 17153
17062: GO 17064
17064: DISABLE
17065: LD_INT 0
17067: PPUSH
// begin enable ;
17068: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: LD_INT 22
17076: PUSH
17077: LD_OWVAR 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 2
17088: PUSH
17089: LD_INT 25
17091: PUSH
17092: LD_INT 5
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 25
17101: PUSH
17102: LD_INT 9
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 25
17111: PUSH
17112: LD_INT 8
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: PUSH
17134: FOR_IN
17135: IFFALSE 17151
// begin SetClass ( i , 1 ) ;
17137: LD_VAR 0 1
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 336
// end ;
17149: GO 17134
17151: POP
17152: POP
// end ;
17153: PPOPN 1
17155: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17156: LD_EXP 45
17160: IFFALSE 17168
17162: PUSH
17163: LD_EXP 49
17167: AND
17168: IFFALSE 17180
17170: PUSH
17171: LD_OWVAR 65
17175: PUSH
17176: LD_INT 7
17178: LESS
17179: AND
17180: IFFALSE 17194
17182: GO 17184
17184: DISABLE
// begin enable ;
17185: ENABLE
// game_speed := 7 ;
17186: LD_ADDR_OWVAR 65
17190: PUSH
17191: LD_INT 7
17193: ST_TO_ADDR
// end ;
17194: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17195: LD_EXP 45
17199: IFFALSE 17207
17201: PUSH
17202: LD_EXP 52
17206: AND
17207: IFFALSE 17409
17209: GO 17211
17211: DISABLE
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
17216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: LD_INT 81
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: ST_TO_ADDR
// if not tmp then
17253: LD_VAR 0 3
17257: NOT
17258: IFFALSE 17262
// exit ;
17260: GO 17409
// if tmp > 5 then
17262: LD_VAR 0 3
17266: PUSH
17267: LD_INT 5
17269: GREATER
17270: IFFALSE 17282
// k := 5 else
17272: LD_ADDR_VAR 0 2
17276: PUSH
17277: LD_INT 5
17279: ST_TO_ADDR
17280: GO 17292
// k := tmp ;
17282: LD_ADDR_VAR 0 2
17286: PUSH
17287: LD_VAR 0 3
17291: ST_TO_ADDR
// for i := 1 to k do
17292: LD_ADDR_VAR 0 1
17296: PUSH
17297: DOUBLE
17298: LD_INT 1
17300: DEC
17301: ST_TO_ADDR
17302: LD_VAR 0 2
17306: PUSH
17307: FOR_TO
17308: IFFALSE 17407
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17310: LD_VAR 0 3
17314: PUSH
17315: LD_VAR 0 1
17319: ARRAY
17320: PPUSH
17321: LD_VAR 0 1
17325: PUSH
17326: LD_INT 4
17328: MOD
17329: PUSH
17330: LD_INT 1
17332: PLUS
17333: PPUSH
17334: CALL_OW 259
17338: PUSH
17339: LD_INT 10
17341: LESS
17342: IFFALSE 17405
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17344: LD_VAR 0 3
17348: PUSH
17349: LD_VAR 0 1
17353: ARRAY
17354: PPUSH
17355: LD_VAR 0 1
17359: PUSH
17360: LD_INT 4
17362: MOD
17363: PUSH
17364: LD_INT 1
17366: PLUS
17367: PPUSH
17368: LD_VAR 0 3
17372: PUSH
17373: LD_VAR 0 1
17377: ARRAY
17378: PPUSH
17379: LD_VAR 0 1
17383: PUSH
17384: LD_INT 4
17386: MOD
17387: PUSH
17388: LD_INT 1
17390: PLUS
17391: PPUSH
17392: CALL_OW 259
17396: PUSH
17397: LD_INT 1
17399: PLUS
17400: PPUSH
17401: CALL_OW 237
17405: GO 17307
17407: POP
17408: POP
// end ;
17409: PPOPN 3
17411: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17412: LD_EXP 45
17416: IFFALSE 17424
17418: PUSH
17419: LD_EXP 53
17423: AND
17424: IFFALSE 17444
17426: GO 17428
17428: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17429: LD_INT 4
17431: PPUSH
17432: LD_OWVAR 2
17436: PPUSH
17437: LD_INT 0
17439: PPUSH
17440: CALL_OW 324
17444: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17445: LD_EXP 45
17449: IFFALSE 17457
17451: PUSH
17452: LD_EXP 82
17456: AND
17457: IFFALSE 17477
17459: GO 17461
17461: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17462: LD_INT 19
17464: PPUSH
17465: LD_OWVAR 2
17469: PPUSH
17470: LD_INT 0
17472: PPUSH
17473: CALL_OW 324
17477: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17478: LD_EXP 45
17482: IFFALSE 17490
17484: PUSH
17485: LD_EXP 54
17489: AND
17490: IFFALSE 17592
17492: GO 17494
17494: DISABLE
17495: LD_INT 0
17497: PPUSH
17498: PPUSH
// begin enable ;
17499: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17500: LD_ADDR_VAR 0 2
17504: PUSH
17505: LD_INT 22
17507: PUSH
17508: LD_OWVAR 2
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: LD_INT 34
17522: PUSH
17523: LD_INT 11
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 34
17532: PUSH
17533: LD_INT 30
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PPUSH
17549: CALL_OW 69
17553: ST_TO_ADDR
// if not tmp then
17554: LD_VAR 0 2
17558: NOT
17559: IFFALSE 17563
// exit ;
17561: GO 17592
// for i in tmp do
17563: LD_ADDR_VAR 0 1
17567: PUSH
17568: LD_VAR 0 2
17572: PUSH
17573: FOR_IN
17574: IFFALSE 17590
// begin SetLives ( i , 0 ) ;
17576: LD_VAR 0 1
17580: PPUSH
17581: LD_INT 0
17583: PPUSH
17584: CALL_OW 234
// end ;
17588: GO 17573
17590: POP
17591: POP
// end ;
17592: PPOPN 2
17594: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17595: LD_EXP 45
17599: IFFALSE 17607
17601: PUSH
17602: LD_EXP 55
17606: AND
17607: IFFALSE 17627
17609: GO 17611
17611: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17612: LD_INT 32
17614: PPUSH
17615: LD_OWVAR 2
17619: PPUSH
17620: LD_INT 0
17622: PPUSH
17623: CALL_OW 324
17627: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17628: LD_EXP 45
17632: IFFALSE 17640
17634: PUSH
17635: LD_EXP 56
17639: AND
17640: IFFALSE 17823
17642: GO 17644
17644: DISABLE
17645: LD_INT 0
17647: PPUSH
17648: PPUSH
17649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17650: LD_ADDR_VAR 0 2
17654: PUSH
17655: LD_INT 22
17657: PUSH
17658: LD_OWVAR 2
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 33
17669: PUSH
17670: LD_INT 3
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PPUSH
17681: CALL_OW 69
17685: ST_TO_ADDR
// if not tmp then
17686: LD_VAR 0 2
17690: NOT
17691: IFFALSE 17695
// exit ;
17693: GO 17823
// side := 0 ;
17695: LD_ADDR_VAR 0 3
17699: PUSH
17700: LD_INT 0
17702: ST_TO_ADDR
// for i := 1 to 8 do
17703: LD_ADDR_VAR 0 1
17707: PUSH
17708: DOUBLE
17709: LD_INT 1
17711: DEC
17712: ST_TO_ADDR
17713: LD_INT 8
17715: PUSH
17716: FOR_TO
17717: IFFALSE 17767
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17719: LD_OWVAR 2
17723: PUSH
17724: LD_VAR 0 1
17728: NONEQUAL
17729: IFFALSE 17751
17731: PUSH
17732: LD_OWVAR 2
17736: PPUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 81
17746: PUSH
17747: LD_INT 2
17749: EQUAL
17750: AND
17751: IFFALSE 17765
// begin side := i ;
17753: LD_ADDR_VAR 0 3
17757: PUSH
17758: LD_VAR 0 1
17762: ST_TO_ADDR
// break ;
17763: GO 17767
// end ;
17765: GO 17716
17767: POP
17768: POP
// if not side then
17769: LD_VAR 0 3
17773: NOT
17774: IFFALSE 17778
// exit ;
17776: GO 17823
// for i := 1 to tmp do
17778: LD_ADDR_VAR 0 1
17782: PUSH
17783: DOUBLE
17784: LD_INT 1
17786: DEC
17787: ST_TO_ADDR
17788: LD_VAR 0 2
17792: PUSH
17793: FOR_TO
17794: IFFALSE 17821
// if Prob ( 60 ) then
17796: LD_INT 60
17798: PPUSH
17799: CALL_OW 13
17803: IFFALSE 17819
// SetSide ( i , side ) ;
17805: LD_VAR 0 1
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: CALL_OW 235
17819: GO 17793
17821: POP
17822: POP
// end ;
17823: PPOPN 3
17825: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17826: LD_EXP 45
17830: IFFALSE 17838
17832: PUSH
17833: LD_EXP 58
17837: AND
17838: IFFALSE 17957
17840: GO 17842
17842: DISABLE
17843: LD_INT 0
17845: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17846: LD_ADDR_VAR 0 1
17850: PUSH
17851: LD_INT 22
17853: PUSH
17854: LD_OWVAR 2
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 21
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 3
17875: PUSH
17876: LD_INT 23
17878: PUSH
17879: LD_INT 0
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: PPUSH
17895: CALL_OW 69
17899: PUSH
17900: FOR_IN
17901: IFFALSE 17955
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17903: LD_VAR 0 1
17907: PPUSH
17908: CALL_OW 257
17912: PUSH
17913: LD_INT 1
17915: PUSH
17916: LD_INT 2
17918: PUSH
17919: LD_INT 3
17921: PUSH
17922: LD_INT 4
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: IN
17931: IFFALSE 17953
// SetClass ( un , rand ( 1 , 4 ) ) ;
17933: LD_VAR 0 1
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: LD_INT 4
17943: PPUSH
17944: CALL_OW 12
17948: PPUSH
17949: CALL_OW 336
17953: GO 17900
17955: POP
17956: POP
// end ;
17957: PPOPN 1
17959: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17960: LD_EXP 45
17964: IFFALSE 17972
17966: PUSH
17967: LD_EXP 57
17971: AND
17972: IFFALSE 18051
17974: GO 17976
17976: DISABLE
17977: LD_INT 0
17979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17980: LD_ADDR_VAR 0 1
17984: PUSH
17985: LD_INT 22
17987: PUSH
17988: LD_OWVAR 2
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 21
17999: PUSH
18000: LD_INT 3
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PPUSH
18011: CALL_OW 69
18015: ST_TO_ADDR
// if not tmp then
18016: LD_VAR 0 1
18020: NOT
18021: IFFALSE 18025
// exit ;
18023: GO 18051
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18025: LD_VAR 0 1
18029: PUSH
18030: LD_INT 1
18032: PPUSH
18033: LD_VAR 0 1
18037: PPUSH
18038: CALL_OW 12
18042: ARRAY
18043: PPUSH
18044: LD_INT 100
18046: PPUSH
18047: CALL_OW 234
// end ;
18051: PPOPN 1
18053: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18054: LD_EXP 45
18058: IFFALSE 18066
18060: PUSH
18061: LD_EXP 59
18065: AND
18066: IFFALSE 18164
18068: GO 18070
18070: DISABLE
18071: LD_INT 0
18073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18074: LD_ADDR_VAR 0 1
18078: PUSH
18079: LD_INT 22
18081: PUSH
18082: LD_OWVAR 2
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 21
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 69
18109: ST_TO_ADDR
// if not tmp then
18110: LD_VAR 0 1
18114: NOT
18115: IFFALSE 18119
// exit ;
18117: GO 18164
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18119: LD_VAR 0 1
18123: PUSH
18124: LD_INT 1
18126: PPUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 12
18136: ARRAY
18137: PPUSH
18138: LD_INT 1
18140: PPUSH
18141: LD_INT 4
18143: PPUSH
18144: CALL_OW 12
18148: PPUSH
18149: LD_INT 3000
18151: PPUSH
18152: LD_INT 9000
18154: PPUSH
18155: CALL_OW 12
18159: PPUSH
18160: CALL_OW 492
// end ;
18164: PPOPN 1
18166: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18167: LD_EXP 45
18171: IFFALSE 18179
18173: PUSH
18174: LD_EXP 60
18178: AND
18179: IFFALSE 18199
18181: GO 18183
18183: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18184: LD_INT 1
18186: PPUSH
18187: LD_OWVAR 2
18191: PPUSH
18192: LD_INT 0
18194: PPUSH
18195: CALL_OW 324
18199: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18200: LD_EXP 45
18204: IFFALSE 18212
18206: PUSH
18207: LD_EXP 61
18211: AND
18212: IFFALSE 18295
18214: GO 18216
18216: DISABLE
18217: LD_INT 0
18219: PPUSH
18220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18221: LD_ADDR_VAR 0 2
18225: PUSH
18226: LD_INT 22
18228: PUSH
18229: LD_OWVAR 2
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 21
18240: PUSH
18241: LD_INT 3
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PPUSH
18252: CALL_OW 69
18256: ST_TO_ADDR
// if not tmp then
18257: LD_VAR 0 2
18261: NOT
18262: IFFALSE 18266
// exit ;
18264: GO 18295
// for i in tmp do
18266: LD_ADDR_VAR 0 1
18270: PUSH
18271: LD_VAR 0 2
18275: PUSH
18276: FOR_IN
18277: IFFALSE 18293
// SetBLevel ( i , 10 ) ;
18279: LD_VAR 0 1
18283: PPUSH
18284: LD_INT 10
18286: PPUSH
18287: CALL_OW 241
18291: GO 18276
18293: POP
18294: POP
// end ;
18295: PPOPN 2
18297: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18298: LD_EXP 45
18302: IFFALSE 18310
18304: PUSH
18305: LD_EXP 62
18309: AND
18310: IFFALSE 18421
18312: GO 18314
18314: DISABLE
18315: LD_INT 0
18317: PPUSH
18318: PPUSH
18319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18320: LD_ADDR_VAR 0 3
18324: PUSH
18325: LD_INT 22
18327: PUSH
18328: LD_OWVAR 2
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 25
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PPUSH
18351: CALL_OW 69
18355: ST_TO_ADDR
// if not tmp then
18356: LD_VAR 0 3
18360: NOT
18361: IFFALSE 18365
// exit ;
18363: GO 18421
// un := tmp [ rand ( 1 , tmp ) ] ;
18365: LD_ADDR_VAR 0 2
18369: PUSH
18370: LD_VAR 0 3
18374: PUSH
18375: LD_INT 1
18377: PPUSH
18378: LD_VAR 0 3
18382: PPUSH
18383: CALL_OW 12
18387: ARRAY
18388: ST_TO_ADDR
// if Crawls ( un ) then
18389: LD_VAR 0 2
18393: PPUSH
18394: CALL_OW 318
18398: IFFALSE 18409
// ComWalk ( un ) ;
18400: LD_VAR 0 2
18404: PPUSH
18405: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18409: LD_VAR 0 2
18413: PPUSH
18414: LD_INT 5
18416: PPUSH
18417: CALL_OW 336
// end ;
18421: PPOPN 3
18423: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18424: LD_EXP 45
18428: IFFALSE 18436
18430: PUSH
18431: LD_EXP 63
18435: AND
18436: IFFALSE 18448
18438: PUSH
18439: LD_OWVAR 67
18443: PUSH
18444: LD_INT 4
18446: LESS
18447: AND
18448: IFFALSE 18467
18450: GO 18452
18452: DISABLE
// begin Difficulty := Difficulty + 1 ;
18453: LD_ADDR_OWVAR 67
18457: PUSH
18458: LD_OWVAR 67
18462: PUSH
18463: LD_INT 1
18465: PLUS
18466: ST_TO_ADDR
// end ;
18467: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18468: LD_EXP 45
18472: IFFALSE 18480
18474: PUSH
18475: LD_EXP 64
18479: AND
18480: IFFALSE 18583
18482: GO 18484
18484: DISABLE
18485: LD_INT 0
18487: PPUSH
// begin for i := 1 to 5 do
18488: LD_ADDR_VAR 0 1
18492: PUSH
18493: DOUBLE
18494: LD_INT 1
18496: DEC
18497: ST_TO_ADDR
18498: LD_INT 5
18500: PUSH
18501: FOR_TO
18502: IFFALSE 18581
// begin uc_nation := nation_nature ;
18504: LD_ADDR_OWVAR 21
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// uc_side := 0 ;
18512: LD_ADDR_OWVAR 20
18516: PUSH
18517: LD_INT 0
18519: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18520: LD_ADDR_OWVAR 29
18524: PUSH
18525: LD_INT 12
18527: PUSH
18528: LD_INT 12
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: ST_TO_ADDR
// hc_agressivity := 20 ;
18535: LD_ADDR_OWVAR 35
18539: PUSH
18540: LD_INT 20
18542: ST_TO_ADDR
// hc_class := class_tiger ;
18543: LD_ADDR_OWVAR 28
18547: PUSH
18548: LD_INT 14
18550: ST_TO_ADDR
// hc_gallery :=  ;
18551: LD_ADDR_OWVAR 33
18555: PUSH
18556: LD_STRING 
18558: ST_TO_ADDR
// hc_name :=  ;
18559: LD_ADDR_OWVAR 26
18563: PUSH
18564: LD_STRING 
18566: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18567: CALL_OW 44
18571: PPUSH
18572: LD_INT 0
18574: PPUSH
18575: CALL_OW 51
// end ;
18579: GO 18501
18581: POP
18582: POP
// end ;
18583: PPOPN 1
18585: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18586: LD_EXP 45
18590: IFFALSE 18598
18592: PUSH
18593: LD_EXP 65
18597: AND
18598: IFFALSE 18607
18600: GO 18602
18602: DISABLE
// StreamSibBomb ;
18603: CALL 18608 0 0
18607: END
// export function StreamSibBomb ; var i , x , y ; begin
18608: LD_INT 0
18610: PPUSH
18611: PPUSH
18612: PPUSH
18613: PPUSH
// result := false ;
18614: LD_ADDR_VAR 0 1
18618: PUSH
18619: LD_INT 0
18621: ST_TO_ADDR
// for i := 1 to 16 do
18622: LD_ADDR_VAR 0 2
18626: PUSH
18627: DOUBLE
18628: LD_INT 1
18630: DEC
18631: ST_TO_ADDR
18632: LD_INT 16
18634: PUSH
18635: FOR_TO
18636: IFFALSE 18835
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18638: LD_ADDR_VAR 0 3
18642: PUSH
18643: LD_INT 10
18645: PUSH
18646: LD_INT 20
18648: PUSH
18649: LD_INT 30
18651: PUSH
18652: LD_INT 40
18654: PUSH
18655: LD_INT 50
18657: PUSH
18658: LD_INT 60
18660: PUSH
18661: LD_INT 70
18663: PUSH
18664: LD_INT 80
18666: PUSH
18667: LD_INT 90
18669: PUSH
18670: LD_INT 100
18672: PUSH
18673: LD_INT 110
18675: PUSH
18676: LD_INT 120
18678: PUSH
18679: LD_INT 130
18681: PUSH
18682: LD_INT 140
18684: PUSH
18685: LD_INT 150
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: PPUSH
18708: LD_INT 15
18710: PPUSH
18711: CALL_OW 12
18715: ARRAY
18716: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18717: LD_ADDR_VAR 0 4
18721: PUSH
18722: LD_INT 10
18724: PUSH
18725: LD_INT 20
18727: PUSH
18728: LD_INT 30
18730: PUSH
18731: LD_INT 40
18733: PUSH
18734: LD_INT 50
18736: PUSH
18737: LD_INT 60
18739: PUSH
18740: LD_INT 70
18742: PUSH
18743: LD_INT 80
18745: PUSH
18746: LD_INT 90
18748: PUSH
18749: LD_INT 100
18751: PUSH
18752: LD_INT 110
18754: PUSH
18755: LD_INT 120
18757: PUSH
18758: LD_INT 130
18760: PUSH
18761: LD_INT 140
18763: PUSH
18764: LD_INT 150
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: PPUSH
18787: LD_INT 15
18789: PPUSH
18790: CALL_OW 12
18794: ARRAY
18795: ST_TO_ADDR
// if ValidHex ( x , y ) then
18796: LD_VAR 0 3
18800: PPUSH
18801: LD_VAR 0 4
18805: PPUSH
18806: CALL_OW 488
18810: IFFALSE 18833
// begin result := [ x , y ] ;
18812: LD_ADDR_VAR 0 1
18816: PUSH
18817: LD_VAR 0 3
18821: PUSH
18822: LD_VAR 0 4
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: ST_TO_ADDR
// break ;
18831: GO 18835
// end ; end ;
18833: GO 18635
18835: POP
18836: POP
// if result then
18837: LD_VAR 0 1
18841: IFFALSE 18901
// begin ToLua ( playSibBomb() ) ;
18843: LD_STRING playSibBomb()
18845: PPUSH
18846: CALL_OW 559
// wait ( 0 0$14 ) ;
18850: LD_INT 490
18852: PPUSH
18853: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18857: LD_VAR 0 1
18861: PUSH
18862: LD_INT 1
18864: ARRAY
18865: PPUSH
18866: LD_VAR 0 1
18870: PUSH
18871: LD_INT 2
18873: ARRAY
18874: PPUSH
18875: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18879: LD_VAR 0 1
18883: PUSH
18884: LD_INT 1
18886: ARRAY
18887: PPUSH
18888: LD_VAR 0 1
18892: PUSH
18893: LD_INT 2
18895: ARRAY
18896: PPUSH
18897: CALL_OW 429
// end ; end ;
18901: LD_VAR 0 1
18905: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18906: LD_EXP 45
18910: IFFALSE 18918
18912: PUSH
18913: LD_EXP 67
18917: AND
18918: IFFALSE 18930
18920: GO 18922
18922: DISABLE
// YouLost (  ) ;
18923: LD_STRING 
18925: PPUSH
18926: CALL_OW 104
18930: END
// every 0 0$1 trigger StreamModeActive and sFog do
18931: LD_EXP 45
18935: IFFALSE 18943
18937: PUSH
18938: LD_EXP 66
18942: AND
18943: IFFALSE 18957
18945: GO 18947
18947: DISABLE
// FogOff ( your_side ) ;
18948: LD_OWVAR 2
18952: PPUSH
18953: CALL_OW 344
18957: END
// every 0 0$1 trigger StreamModeActive and sSun do
18958: LD_EXP 45
18962: IFFALSE 18970
18964: PUSH
18965: LD_EXP 68
18969: AND
18970: IFFALSE 18998
18972: GO 18974
18974: DISABLE
// begin solar_recharge_percent := 0 ;
18975: LD_ADDR_OWVAR 79
18979: PUSH
18980: LD_INT 0
18982: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18983: LD_INT 10500
18985: PPUSH
18986: CALL_OW 67
// solar_recharge_percent := 100 ;
18990: LD_ADDR_OWVAR 79
18994: PUSH
18995: LD_INT 100
18997: ST_TO_ADDR
// end ;
18998: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18999: LD_EXP 45
19003: IFFALSE 19011
19005: PUSH
19006: LD_EXP 69
19010: AND
19011: IFFALSE 19250
19013: GO 19015
19015: DISABLE
19016: LD_INT 0
19018: PPUSH
19019: PPUSH
19020: PPUSH
// begin tmp := [ ] ;
19021: LD_ADDR_VAR 0 3
19025: PUSH
19026: EMPTY
19027: ST_TO_ADDR
// for i := 1 to 6 do
19028: LD_ADDR_VAR 0 1
19032: PUSH
19033: DOUBLE
19034: LD_INT 1
19036: DEC
19037: ST_TO_ADDR
19038: LD_INT 6
19040: PUSH
19041: FOR_TO
19042: IFFALSE 19147
// begin uc_nation := nation_nature ;
19044: LD_ADDR_OWVAR 21
19048: PUSH
19049: LD_INT 0
19051: ST_TO_ADDR
// uc_side := 0 ;
19052: LD_ADDR_OWVAR 20
19056: PUSH
19057: LD_INT 0
19059: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19060: LD_ADDR_OWVAR 29
19064: PUSH
19065: LD_INT 12
19067: PUSH
19068: LD_INT 12
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: ST_TO_ADDR
// hc_agressivity := 20 ;
19075: LD_ADDR_OWVAR 35
19079: PUSH
19080: LD_INT 20
19082: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19083: LD_ADDR_OWVAR 28
19087: PUSH
19088: LD_INT 17
19090: ST_TO_ADDR
// hc_gallery :=  ;
19091: LD_ADDR_OWVAR 33
19095: PUSH
19096: LD_STRING 
19098: ST_TO_ADDR
// hc_name :=  ;
19099: LD_ADDR_OWVAR 26
19103: PUSH
19104: LD_STRING 
19106: ST_TO_ADDR
// un := CreateHuman ;
19107: LD_ADDR_VAR 0 2
19111: PUSH
19112: CALL_OW 44
19116: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19117: LD_VAR 0 2
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 51
// tmp := tmp ^ un ;
19129: LD_ADDR_VAR 0 3
19133: PUSH
19134: LD_VAR 0 3
19138: PUSH
19139: LD_VAR 0 2
19143: ADD
19144: ST_TO_ADDR
// end ;
19145: GO 19041
19147: POP
19148: POP
// repeat wait ( 0 0$1 ) ;
19149: LD_INT 35
19151: PPUSH
19152: CALL_OW 67
// for un in tmp do
19156: LD_ADDR_VAR 0 2
19160: PUSH
19161: LD_VAR 0 3
19165: PUSH
19166: FOR_IN
19167: IFFALSE 19241
// begin if IsDead ( un ) then
19169: LD_VAR 0 2
19173: PPUSH
19174: CALL_OW 301
19178: IFFALSE 19198
// begin tmp := tmp diff un ;
19180: LD_ADDR_VAR 0 3
19184: PUSH
19185: LD_VAR 0 3
19189: PUSH
19190: LD_VAR 0 2
19194: DIFF
19195: ST_TO_ADDR
// continue ;
19196: GO 19166
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19198: LD_VAR 0 2
19202: PPUSH
19203: LD_INT 3
19205: PUSH
19206: LD_INT 22
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 69
19224: PPUSH
19225: LD_VAR 0 2
19229: PPUSH
19230: CALL_OW 74
19234: PPUSH
19235: CALL_OW 115
// end ;
19239: GO 19166
19241: POP
19242: POP
// until not tmp ;
19243: LD_VAR 0 3
19247: NOT
19248: IFFALSE 19149
// end ;
19250: PPOPN 3
19252: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19253: LD_EXP 45
19257: IFFALSE 19265
19259: PUSH
19260: LD_EXP 70
19264: AND
19265: IFFALSE 19319
19267: GO 19269
19269: DISABLE
// begin ToLua ( displayTroll(); ) ;
19270: LD_STRING displayTroll();
19272: PPUSH
19273: CALL_OW 559
// wait ( 3 3$00 ) ;
19277: LD_INT 6300
19279: PPUSH
19280: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19284: LD_STRING hideTroll();
19286: PPUSH
19287: CALL_OW 559
// wait ( 1 1$00 ) ;
19291: LD_INT 2100
19293: PPUSH
19294: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19298: LD_STRING displayTroll();
19300: PPUSH
19301: CALL_OW 559
// wait ( 1 1$00 ) ;
19305: LD_INT 2100
19307: PPUSH
19308: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19312: LD_STRING hideTroll();
19314: PPUSH
19315: CALL_OW 559
// end ;
19319: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19320: LD_EXP 45
19324: IFFALSE 19332
19326: PUSH
19327: LD_EXP 71
19331: AND
19332: IFFALSE 19395
19334: GO 19336
19336: DISABLE
19337: LD_INT 0
19339: PPUSH
// begin p := 0 ;
19340: LD_ADDR_VAR 0 1
19344: PUSH
19345: LD_INT 0
19347: ST_TO_ADDR
// repeat game_speed := 1 ;
19348: LD_ADDR_OWVAR 65
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19356: LD_INT 35
19358: PPUSH
19359: CALL_OW 67
// p := p + 1 ;
19363: LD_ADDR_VAR 0 1
19367: PUSH
19368: LD_VAR 0 1
19372: PUSH
19373: LD_INT 1
19375: PLUS
19376: ST_TO_ADDR
// until p >= 60 ;
19377: LD_VAR 0 1
19381: PUSH
19382: LD_INT 60
19384: GREATEREQUAL
19385: IFFALSE 19348
// game_speed := 4 ;
19387: LD_ADDR_OWVAR 65
19391: PUSH
19392: LD_INT 4
19394: ST_TO_ADDR
// end ;
19395: PPOPN 1
19397: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19398: LD_EXP 45
19402: IFFALSE 19410
19404: PUSH
19405: LD_EXP 72
19409: AND
19410: IFFALSE 19556
19412: GO 19414
19414: DISABLE
19415: LD_INT 0
19417: PPUSH
19418: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19419: LD_ADDR_VAR 0 1
19423: PUSH
19424: LD_INT 22
19426: PUSH
19427: LD_OWVAR 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: LD_INT 30
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 30
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: LIST
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PPUSH
19468: CALL_OW 69
19472: ST_TO_ADDR
// if not depot then
19473: LD_VAR 0 1
19477: NOT
19478: IFFALSE 19482
// exit ;
19480: GO 19556
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19482: LD_ADDR_VAR 0 2
19486: PUSH
19487: LD_VAR 0 1
19491: PUSH
19492: LD_INT 1
19494: PPUSH
19495: LD_VAR 0 1
19499: PPUSH
19500: CALL_OW 12
19504: ARRAY
19505: PPUSH
19506: CALL_OW 274
19510: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19511: LD_VAR 0 2
19515: PPUSH
19516: LD_INT 1
19518: PPUSH
19519: LD_INT 0
19521: PPUSH
19522: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19526: LD_VAR 0 2
19530: PPUSH
19531: LD_INT 2
19533: PPUSH
19534: LD_INT 0
19536: PPUSH
19537: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19541: LD_VAR 0 2
19545: PPUSH
19546: LD_INT 3
19548: PPUSH
19549: LD_INT 0
19551: PPUSH
19552: CALL_OW 277
// end ;
19556: PPOPN 2
19558: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19559: LD_EXP 45
19563: IFFALSE 19571
19565: PUSH
19566: LD_EXP 73
19570: AND
19571: IFFALSE 19668
19573: GO 19575
19575: DISABLE
19576: LD_INT 0
19578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 22
19586: PUSH
19587: LD_OWVAR 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 21
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 3
19608: PUSH
19609: LD_INT 23
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: LIST
19627: PPUSH
19628: CALL_OW 69
19632: ST_TO_ADDR
// if not tmp then
19633: LD_VAR 0 1
19637: NOT
19638: IFFALSE 19642
// exit ;
19640: GO 19668
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19642: LD_VAR 0 1
19646: PUSH
19647: LD_INT 1
19649: PPUSH
19650: LD_VAR 0 1
19654: PPUSH
19655: CALL_OW 12
19659: ARRAY
19660: PPUSH
19661: LD_INT 200
19663: PPUSH
19664: CALL_OW 234
// end ;
19668: PPOPN 1
19670: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19671: LD_EXP 45
19675: IFFALSE 19683
19677: PUSH
19678: LD_EXP 74
19682: AND
19683: IFFALSE 19762
19685: GO 19687
19687: DISABLE
19688: LD_INT 0
19690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19691: LD_ADDR_VAR 0 1
19695: PUSH
19696: LD_INT 22
19698: PUSH
19699: LD_OWVAR 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 21
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PPUSH
19722: CALL_OW 69
19726: ST_TO_ADDR
// if not tmp then
19727: LD_VAR 0 1
19731: NOT
19732: IFFALSE 19736
// exit ;
19734: GO 19762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19736: LD_VAR 0 1
19740: PUSH
19741: LD_INT 1
19743: PPUSH
19744: LD_VAR 0 1
19748: PPUSH
19749: CALL_OW 12
19753: ARRAY
19754: PPUSH
19755: LD_INT 60
19757: PPUSH
19758: CALL_OW 234
// end ;
19762: PPOPN 1
19764: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19765: LD_EXP 45
19769: IFFALSE 19777
19771: PUSH
19772: LD_EXP 75
19776: AND
19777: IFFALSE 19876
19779: GO 19781
19781: DISABLE
19782: LD_INT 0
19784: PPUSH
19785: PPUSH
// begin enable ;
19786: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19787: LD_ADDR_VAR 0 1
19791: PUSH
19792: LD_INT 22
19794: PUSH
19795: LD_OWVAR 2
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 61
19806: PUSH
19807: EMPTY
19808: LIST
19809: PUSH
19810: LD_INT 33
19812: PUSH
19813: LD_INT 2
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: ST_TO_ADDR
// if not tmp then
19830: LD_VAR 0 1
19834: NOT
19835: IFFALSE 19839
// exit ;
19837: GO 19876
// for i in tmp do
19839: LD_ADDR_VAR 0 2
19843: PUSH
19844: LD_VAR 0 1
19848: PUSH
19849: FOR_IN
19850: IFFALSE 19874
// if IsControledBy ( i ) then
19852: LD_VAR 0 2
19856: PPUSH
19857: CALL_OW 312
19861: IFFALSE 19872
// ComUnlink ( i ) ;
19863: LD_VAR 0 2
19867: PPUSH
19868: CALL_OW 136
19872: GO 19849
19874: POP
19875: POP
// end ;
19876: PPOPN 2
19878: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19879: LD_EXP 45
19883: IFFALSE 19891
19885: PUSH
19886: LD_EXP 76
19890: AND
19891: IFFALSE 20031
19893: GO 19895
19895: DISABLE
19896: LD_INT 0
19898: PPUSH
19899: PPUSH
// begin ToLua ( displayPowell(); ) ;
19900: LD_STRING displayPowell();
19902: PPUSH
19903: CALL_OW 559
// uc_side := 0 ;
19907: LD_ADDR_OWVAR 20
19911: PUSH
19912: LD_INT 0
19914: ST_TO_ADDR
// uc_nation := 2 ;
19915: LD_ADDR_OWVAR 21
19919: PUSH
19920: LD_INT 2
19922: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19923: LD_ADDR_OWVAR 37
19927: PUSH
19928: LD_INT 14
19930: ST_TO_ADDR
// vc_engine := engine_siberite ;
19931: LD_ADDR_OWVAR 39
19935: PUSH
19936: LD_INT 3
19938: ST_TO_ADDR
// vc_control := control_apeman ;
19939: LD_ADDR_OWVAR 38
19943: PUSH
19944: LD_INT 5
19946: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19947: LD_ADDR_OWVAR 40
19951: PUSH
19952: LD_INT 29
19954: ST_TO_ADDR
// un := CreateVehicle ;
19955: LD_ADDR_VAR 0 2
19959: PUSH
19960: CALL_OW 45
19964: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19965: LD_VAR 0 2
19969: PPUSH
19970: LD_INT 1
19972: PPUSH
19973: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19977: LD_INT 35
19979: PPUSH
19980: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19984: LD_VAR 0 2
19988: PPUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PPUSH
20001: CALL_OW 69
20005: PPUSH
20006: LD_VAR 0 2
20010: PPUSH
20011: CALL_OW 74
20015: PPUSH
20016: CALL_OW 115
// until IsDead ( un ) ;
20020: LD_VAR 0 2
20024: PPUSH
20025: CALL_OW 301
20029: IFFALSE 19977
// end ;
20031: PPOPN 2
20033: END
// every 0 0$1 trigger StreamModeActive and sStu do
20034: LD_EXP 45
20038: IFFALSE 20046
20040: PUSH
20041: LD_EXP 84
20045: AND
20046: IFFALSE 20062
20048: GO 20050
20050: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20051: LD_STRING displayStucuk();
20053: PPUSH
20054: CALL_OW 559
// ResetFog ;
20058: CALL_OW 335
// end ;
20062: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20063: LD_EXP 45
20067: IFFALSE 20075
20069: PUSH
20070: LD_EXP 77
20074: AND
20075: IFFALSE 20216
20077: GO 20079
20079: DISABLE
20080: LD_INT 0
20082: PPUSH
20083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20084: LD_ADDR_VAR 0 2
20088: PUSH
20089: LD_INT 22
20091: PUSH
20092: LD_OWVAR 2
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 21
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PPUSH
20115: CALL_OW 69
20119: ST_TO_ADDR
// if not tmp then
20120: LD_VAR 0 2
20124: NOT
20125: IFFALSE 20129
// exit ;
20127: GO 20216
// un := tmp [ rand ( 1 , tmp ) ] ;
20129: LD_ADDR_VAR 0 1
20133: PUSH
20134: LD_VAR 0 2
20138: PUSH
20139: LD_INT 1
20141: PPUSH
20142: LD_VAR 0 2
20146: PPUSH
20147: CALL_OW 12
20151: ARRAY
20152: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20153: LD_VAR 0 1
20157: PPUSH
20158: LD_INT 0
20160: PPUSH
20161: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20165: LD_VAR 0 1
20169: PPUSH
20170: LD_OWVAR 3
20174: PUSH
20175: LD_VAR 0 1
20179: DIFF
20180: PPUSH
20181: LD_VAR 0 1
20185: PPUSH
20186: CALL_OW 74
20190: PPUSH
20191: CALL_OW 115
// wait ( 0 0$20 ) ;
20195: LD_INT 700
20197: PPUSH
20198: CALL_OW 67
// SetSide ( un , your_side ) ;
20202: LD_VAR 0 1
20206: PPUSH
20207: LD_OWVAR 2
20211: PPUSH
20212: CALL_OW 235
// end ;
20216: PPOPN 2
20218: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20219: LD_EXP 45
20223: IFFALSE 20231
20225: PUSH
20226: LD_EXP 78
20230: AND
20231: IFFALSE 20337
20233: GO 20235
20235: DISABLE
20236: LD_INT 0
20238: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20239: LD_ADDR_VAR 0 1
20243: PUSH
20244: LD_INT 22
20246: PUSH
20247: LD_OWVAR 2
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: LD_INT 30
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 30
20271: PUSH
20272: LD_INT 1
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PPUSH
20288: CALL_OW 69
20292: ST_TO_ADDR
// if not depot then
20293: LD_VAR 0 1
20297: NOT
20298: IFFALSE 20302
// exit ;
20300: GO 20337
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20302: LD_VAR 0 1
20306: PUSH
20307: LD_INT 1
20309: ARRAY
20310: PPUSH
20311: CALL_OW 250
20315: PPUSH
20316: LD_VAR 0 1
20320: PUSH
20321: LD_INT 1
20323: ARRAY
20324: PPUSH
20325: CALL_OW 251
20329: PPUSH
20330: LD_INT 70
20332: PPUSH
20333: CALL_OW 495
// end ;
20337: PPOPN 1
20339: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20340: LD_EXP 45
20344: IFFALSE 20352
20346: PUSH
20347: LD_EXP 79
20351: AND
20352: IFFALSE 20563
20354: GO 20356
20356: DISABLE
20357: LD_INT 0
20359: PPUSH
20360: PPUSH
20361: PPUSH
20362: PPUSH
20363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20364: LD_ADDR_VAR 0 5
20368: PUSH
20369: LD_INT 22
20371: PUSH
20372: LD_OWVAR 2
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 21
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PPUSH
20395: CALL_OW 69
20399: ST_TO_ADDR
// if not tmp then
20400: LD_VAR 0 5
20404: NOT
20405: IFFALSE 20409
// exit ;
20407: GO 20563
// for i in tmp do
20409: LD_ADDR_VAR 0 1
20413: PUSH
20414: LD_VAR 0 5
20418: PUSH
20419: FOR_IN
20420: IFFALSE 20561
// begin d := rand ( 0 , 5 ) ;
20422: LD_ADDR_VAR 0 4
20426: PUSH
20427: LD_INT 0
20429: PPUSH
20430: LD_INT 5
20432: PPUSH
20433: CALL_OW 12
20437: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20438: LD_ADDR_VAR 0 2
20442: PUSH
20443: LD_VAR 0 1
20447: PPUSH
20448: CALL_OW 250
20452: PPUSH
20453: LD_VAR 0 4
20457: PPUSH
20458: LD_INT 3
20460: PPUSH
20461: LD_INT 12
20463: PPUSH
20464: CALL_OW 12
20468: PPUSH
20469: CALL_OW 272
20473: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20474: LD_ADDR_VAR 0 3
20478: PUSH
20479: LD_VAR 0 1
20483: PPUSH
20484: CALL_OW 251
20488: PPUSH
20489: LD_VAR 0 4
20493: PPUSH
20494: LD_INT 3
20496: PPUSH
20497: LD_INT 12
20499: PPUSH
20500: CALL_OW 12
20504: PPUSH
20505: CALL_OW 273
20509: ST_TO_ADDR
// if ValidHex ( x , y ) then
20510: LD_VAR 0 2
20514: PPUSH
20515: LD_VAR 0 3
20519: PPUSH
20520: CALL_OW 488
20524: IFFALSE 20559
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20526: LD_VAR 0 1
20530: PPUSH
20531: LD_VAR 0 2
20535: PPUSH
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 3
20543: PPUSH
20544: LD_INT 6
20546: PPUSH
20547: CALL_OW 12
20551: PPUSH
20552: LD_INT 1
20554: PPUSH
20555: CALL_OW 483
// end ;
20559: GO 20419
20561: POP
20562: POP
// end ;
20563: PPOPN 5
20565: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20566: LD_EXP 45
20570: IFFALSE 20578
20572: PUSH
20573: LD_EXP 80
20577: AND
20578: IFFALSE 20672
20580: GO 20582
20582: DISABLE
20583: LD_INT 0
20585: PPUSH
20586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20587: LD_ADDR_VAR 0 2
20591: PUSH
20592: LD_INT 22
20594: PUSH
20595: LD_OWVAR 2
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 32
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 21
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: PPUSH
20629: CALL_OW 69
20633: ST_TO_ADDR
// if not tmp then
20634: LD_VAR 0 2
20638: NOT
20639: IFFALSE 20643
// exit ;
20641: GO 20672
// for i in tmp do
20643: LD_ADDR_VAR 0 1
20647: PUSH
20648: LD_VAR 0 2
20652: PUSH
20653: FOR_IN
20654: IFFALSE 20670
// SetFuel ( i , 0 ) ;
20656: LD_VAR 0 1
20660: PPUSH
20661: LD_INT 0
20663: PPUSH
20664: CALL_OW 240
20668: GO 20653
20670: POP
20671: POP
// end ;
20672: PPOPN 2
20674: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20675: LD_EXP 45
20679: IFFALSE 20687
20681: PUSH
20682: LD_EXP 81
20686: AND
20687: IFFALSE 20753
20689: GO 20691
20691: DISABLE
20692: LD_INT 0
20694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20695: LD_ADDR_VAR 0 1
20699: PUSH
20700: LD_INT 22
20702: PUSH
20703: LD_OWVAR 2
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 30
20714: PUSH
20715: LD_INT 29
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PPUSH
20726: CALL_OW 69
20730: ST_TO_ADDR
// if not tmp then
20731: LD_VAR 0 1
20735: NOT
20736: IFFALSE 20740
// exit ;
20738: GO 20753
// DestroyUnit ( tmp [ 1 ] ) ;
20740: LD_VAR 0 1
20744: PUSH
20745: LD_INT 1
20747: ARRAY
20748: PPUSH
20749: CALL_OW 65
// end ;
20753: PPOPN 1
20755: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20756: LD_EXP 45
20760: IFFALSE 20768
20762: PUSH
20763: LD_EXP 83
20767: AND
20768: IFFALSE 20897
20770: GO 20772
20772: DISABLE
20773: LD_INT 0
20775: PPUSH
// begin uc_side := 0 ;
20776: LD_ADDR_OWVAR 20
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// uc_nation := nation_arabian ;
20784: LD_ADDR_OWVAR 21
20788: PUSH
20789: LD_INT 2
20791: ST_TO_ADDR
// hc_gallery :=  ;
20792: LD_ADDR_OWVAR 33
20796: PUSH
20797: LD_STRING 
20799: ST_TO_ADDR
// hc_name :=  ;
20800: LD_ADDR_OWVAR 26
20804: PUSH
20805: LD_STRING 
20807: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20808: LD_INT 1
20810: PPUSH
20811: LD_INT 11
20813: PPUSH
20814: LD_INT 10
20816: PPUSH
20817: CALL_OW 380
// un := CreateHuman ;
20821: LD_ADDR_VAR 0 1
20825: PUSH
20826: CALL_OW 44
20830: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20831: LD_VAR 0 1
20835: PPUSH
20836: LD_INT 1
20838: PPUSH
20839: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20843: LD_INT 35
20845: PPUSH
20846: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20850: LD_VAR 0 1
20854: PPUSH
20855: LD_INT 22
20857: PUSH
20858: LD_OWVAR 2
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PPUSH
20867: CALL_OW 69
20871: PPUSH
20872: LD_VAR 0 1
20876: PPUSH
20877: CALL_OW 74
20881: PPUSH
20882: CALL_OW 115
// until IsDead ( un ) ;
20886: LD_VAR 0 1
20890: PPUSH
20891: CALL_OW 301
20895: IFFALSE 20843
// end ;
20897: PPOPN 1
20899: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20900: LD_EXP 45
20904: IFFALSE 20912
20906: PUSH
20907: LD_EXP 85
20911: AND
20912: IFFALSE 20924
20914: GO 20916
20916: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20917: LD_STRING earthquake(getX(game), 0, 32)
20919: PPUSH
20920: CALL_OW 559
20924: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20925: LD_EXP 45
20929: IFFALSE 20937
20931: PUSH
20932: LD_EXP 86
20936: AND
20937: IFFALSE 21028
20939: GO 20941
20941: DISABLE
20942: LD_INT 0
20944: PPUSH
// begin enable ;
20945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20946: LD_ADDR_VAR 0 1
20950: PUSH
20951: LD_INT 22
20953: PUSH
20954: LD_OWVAR 2
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 21
20965: PUSH
20966: LD_INT 2
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 33
20975: PUSH
20976: LD_INT 3
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: ST_TO_ADDR
// if not tmp then
20993: LD_VAR 0 1
20997: NOT
20998: IFFALSE 21002
// exit ;
21000: GO 21028
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21002: LD_VAR 0 1
21006: PUSH
21007: LD_INT 1
21009: PPUSH
21010: LD_VAR 0 1
21014: PPUSH
21015: CALL_OW 12
21019: ARRAY
21020: PPUSH
21021: LD_INT 1
21023: PPUSH
21024: CALL_OW 234
// end ;
21028: PPOPN 1
21030: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21031: LD_EXP 45
21035: IFFALSE 21043
21037: PUSH
21038: LD_EXP 87
21042: AND
21043: IFFALSE 21184
21045: GO 21047
21047: DISABLE
21048: LD_INT 0
21050: PPUSH
21051: PPUSH
21052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21053: LD_ADDR_VAR 0 3
21057: PUSH
21058: LD_INT 22
21060: PUSH
21061: LD_OWVAR 2
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 25
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PPUSH
21084: CALL_OW 69
21088: ST_TO_ADDR
// if not tmp then
21089: LD_VAR 0 3
21093: NOT
21094: IFFALSE 21098
// exit ;
21096: GO 21184
// un := tmp [ rand ( 1 , tmp ) ] ;
21098: LD_ADDR_VAR 0 2
21102: PUSH
21103: LD_VAR 0 3
21107: PUSH
21108: LD_INT 1
21110: PPUSH
21111: LD_VAR 0 3
21115: PPUSH
21116: CALL_OW 12
21120: ARRAY
21121: ST_TO_ADDR
// if Crawls ( un ) then
21122: LD_VAR 0 2
21126: PPUSH
21127: CALL_OW 318
21131: IFFALSE 21142
// ComWalk ( un ) ;
21133: LD_VAR 0 2
21137: PPUSH
21138: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21142: LD_VAR 0 2
21146: PPUSH
21147: LD_INT 9
21149: PPUSH
21150: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21154: LD_INT 28
21156: PPUSH
21157: LD_OWVAR 2
21161: PPUSH
21162: LD_INT 2
21164: PPUSH
21165: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21169: LD_INT 29
21171: PPUSH
21172: LD_OWVAR 2
21176: PPUSH
21177: LD_INT 2
21179: PPUSH
21180: CALL_OW 322
// end ;
21184: PPOPN 3
21186: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21187: LD_EXP 45
21191: IFFALSE 21199
21193: PUSH
21194: LD_EXP 88
21198: AND
21199: IFFALSE 21310
21201: GO 21203
21203: DISABLE
21204: LD_INT 0
21206: PPUSH
21207: PPUSH
21208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21209: LD_ADDR_VAR 0 3
21213: PUSH
21214: LD_INT 22
21216: PUSH
21217: LD_OWVAR 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 25
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 69
21244: ST_TO_ADDR
// if not tmp then
21245: LD_VAR 0 3
21249: NOT
21250: IFFALSE 21254
// exit ;
21252: GO 21310
// un := tmp [ rand ( 1 , tmp ) ] ;
21254: LD_ADDR_VAR 0 2
21258: PUSH
21259: LD_VAR 0 3
21263: PUSH
21264: LD_INT 1
21266: PPUSH
21267: LD_VAR 0 3
21271: PPUSH
21272: CALL_OW 12
21276: ARRAY
21277: ST_TO_ADDR
// if Crawls ( un ) then
21278: LD_VAR 0 2
21282: PPUSH
21283: CALL_OW 318
21287: IFFALSE 21298
// ComWalk ( un ) ;
21289: LD_VAR 0 2
21293: PPUSH
21294: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21298: LD_VAR 0 2
21302: PPUSH
21303: LD_INT 8
21305: PPUSH
21306: CALL_OW 336
// end ;
21310: PPOPN 3
21312: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21313: LD_EXP 45
21317: IFFALSE 21325
21319: PUSH
21320: LD_EXP 89
21324: AND
21325: IFFALSE 21469
21327: GO 21329
21329: DISABLE
21330: LD_INT 0
21332: PPUSH
21333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21334: LD_ADDR_VAR 0 2
21338: PUSH
21339: LD_INT 22
21341: PUSH
21342: LD_OWVAR 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 21
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 34
21366: PUSH
21367: LD_INT 12
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 34
21376: PUSH
21377: LD_INT 51
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 34
21386: PUSH
21387: LD_INT 32
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: LIST
21404: PPUSH
21405: CALL_OW 69
21409: ST_TO_ADDR
// if not tmp then
21410: LD_VAR 0 2
21414: NOT
21415: IFFALSE 21419
// exit ;
21417: GO 21469
// for i in tmp do
21419: LD_ADDR_VAR 0 1
21423: PUSH
21424: LD_VAR 0 2
21428: PUSH
21429: FOR_IN
21430: IFFALSE 21467
// if GetCargo ( i , mat_artifact ) = 0 then
21432: LD_VAR 0 1
21436: PPUSH
21437: LD_INT 4
21439: PPUSH
21440: CALL_OW 289
21444: PUSH
21445: LD_INT 0
21447: EQUAL
21448: IFFALSE 21465
// SetCargo ( i , mat_siberit , 100 ) ;
21450: LD_VAR 0 1
21454: PPUSH
21455: LD_INT 3
21457: PPUSH
21458: LD_INT 100
21460: PPUSH
21461: CALL_OW 290
21465: GO 21429
21467: POP
21468: POP
// end ;
21469: PPOPN 2
21471: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21472: LD_EXP 45
21476: IFFALSE 21484
21478: PUSH
21479: LD_EXP 90
21483: AND
21484: IFFALSE 21667
21486: GO 21488
21488: DISABLE
21489: LD_INT 0
21491: PPUSH
21492: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_INT 22
21500: PUSH
21501: LD_OWVAR 2
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PPUSH
21510: CALL_OW 69
21514: ST_TO_ADDR
// if not tmp then
21515: LD_VAR 0 2
21519: NOT
21520: IFFALSE 21524
// exit ;
21522: GO 21667
// for i := 1 to 2 do
21524: LD_ADDR_VAR 0 1
21528: PUSH
21529: DOUBLE
21530: LD_INT 1
21532: DEC
21533: ST_TO_ADDR
21534: LD_INT 2
21536: PUSH
21537: FOR_TO
21538: IFFALSE 21665
// begin uc_side := your_side ;
21540: LD_ADDR_OWVAR 20
21544: PUSH
21545: LD_OWVAR 2
21549: ST_TO_ADDR
// uc_nation := nation_american ;
21550: LD_ADDR_OWVAR 21
21554: PUSH
21555: LD_INT 1
21557: ST_TO_ADDR
// vc_chassis := us_morphling ;
21558: LD_ADDR_OWVAR 37
21562: PUSH
21563: LD_INT 5
21565: ST_TO_ADDR
// vc_engine := engine_siberite ;
21566: LD_ADDR_OWVAR 39
21570: PUSH
21571: LD_INT 3
21573: ST_TO_ADDR
// vc_control := control_computer ;
21574: LD_ADDR_OWVAR 38
21578: PUSH
21579: LD_INT 3
21581: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21582: LD_ADDR_OWVAR 40
21586: PUSH
21587: LD_INT 10
21589: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21590: LD_VAR 0 2
21594: PUSH
21595: LD_INT 1
21597: ARRAY
21598: PPUSH
21599: CALL_OW 310
21603: NOT
21604: IFFALSE 21651
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21606: CALL_OW 45
21610: PPUSH
21611: LD_VAR 0 2
21615: PUSH
21616: LD_INT 1
21618: ARRAY
21619: PPUSH
21620: CALL_OW 250
21624: PPUSH
21625: LD_VAR 0 2
21629: PUSH
21630: LD_INT 1
21632: ARRAY
21633: PPUSH
21634: CALL_OW 251
21638: PPUSH
21639: LD_INT 12
21641: PPUSH
21642: LD_INT 1
21644: PPUSH
21645: CALL_OW 50
21649: GO 21663
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21651: CALL_OW 45
21655: PPUSH
21656: LD_INT 1
21658: PPUSH
21659: CALL_OW 51
// end ;
21663: GO 21537
21665: POP
21666: POP
// end ;
21667: PPOPN 2
21669: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21670: LD_EXP 45
21674: IFFALSE 21682
21676: PUSH
21677: LD_EXP 91
21681: AND
21682: IFFALSE 21904
21684: GO 21686
21686: DISABLE
21687: LD_INT 0
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21695: LD_ADDR_VAR 0 6
21699: PUSH
21700: LD_INT 22
21702: PUSH
21703: LD_OWVAR 2
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 21
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 3
21724: PUSH
21725: LD_INT 23
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: PPUSH
21744: CALL_OW 69
21748: ST_TO_ADDR
// if not tmp then
21749: LD_VAR 0 6
21753: NOT
21754: IFFALSE 21758
// exit ;
21756: GO 21904
// s1 := rand ( 1 , 4 ) ;
21758: LD_ADDR_VAR 0 2
21762: PUSH
21763: LD_INT 1
21765: PPUSH
21766: LD_INT 4
21768: PPUSH
21769: CALL_OW 12
21773: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21774: LD_ADDR_VAR 0 4
21778: PUSH
21779: LD_VAR 0 6
21783: PUSH
21784: LD_INT 1
21786: ARRAY
21787: PPUSH
21788: LD_VAR 0 2
21792: PPUSH
21793: CALL_OW 259
21797: ST_TO_ADDR
// if s1 = 1 then
21798: LD_VAR 0 2
21802: PUSH
21803: LD_INT 1
21805: EQUAL
21806: IFFALSE 21826
// s2 := rand ( 2 , 4 ) else
21808: LD_ADDR_VAR 0 3
21812: PUSH
21813: LD_INT 2
21815: PPUSH
21816: LD_INT 4
21818: PPUSH
21819: CALL_OW 12
21823: ST_TO_ADDR
21824: GO 21834
// s2 := 1 ;
21826: LD_ADDR_VAR 0 3
21830: PUSH
21831: LD_INT 1
21833: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21834: LD_ADDR_VAR 0 5
21838: PUSH
21839: LD_VAR 0 6
21843: PUSH
21844: LD_INT 1
21846: ARRAY
21847: PPUSH
21848: LD_VAR 0 3
21852: PPUSH
21853: CALL_OW 259
21857: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21858: LD_VAR 0 6
21862: PUSH
21863: LD_INT 1
21865: ARRAY
21866: PPUSH
21867: LD_VAR 0 2
21871: PPUSH
21872: LD_VAR 0 5
21876: PPUSH
21877: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21881: LD_VAR 0 6
21885: PUSH
21886: LD_INT 1
21888: ARRAY
21889: PPUSH
21890: LD_VAR 0 3
21894: PPUSH
21895: LD_VAR 0 4
21899: PPUSH
21900: CALL_OW 237
// end ;
21904: PPOPN 6
21906: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21907: LD_EXP 45
21911: IFFALSE 21919
21913: PUSH
21914: LD_EXP 92
21918: AND
21919: IFFALSE 21998
21921: GO 21923
21923: DISABLE
21924: LD_INT 0
21926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21927: LD_ADDR_VAR 0 1
21931: PUSH
21932: LD_INT 22
21934: PUSH
21935: LD_OWVAR 2
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 30
21946: PUSH
21947: LD_INT 3
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PPUSH
21958: CALL_OW 69
21962: ST_TO_ADDR
// if not tmp then
21963: LD_VAR 0 1
21967: NOT
21968: IFFALSE 21972
// exit ;
21970: GO 21998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21972: LD_VAR 0 1
21976: PUSH
21977: LD_INT 1
21979: PPUSH
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 12
21989: ARRAY
21990: PPUSH
21991: LD_INT 1
21993: PPUSH
21994: CALL_OW 234
// end ;
21998: PPOPN 1
22000: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22001: LD_EXP 45
22005: IFFALSE 22013
22007: PUSH
22008: LD_EXP 93
22012: AND
22013: IFFALSE 22125
22015: GO 22017
22017: DISABLE
22018: LD_INT 0
22020: PPUSH
22021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22022: LD_ADDR_VAR 0 2
22026: PUSH
22027: LD_INT 22
22029: PUSH
22030: LD_OWVAR 2
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 30
22044: PUSH
22045: LD_INT 27
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 30
22054: PUSH
22055: LD_INT 26
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 30
22064: PUSH
22065: LD_INT 28
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PPUSH
22082: CALL_OW 69
22086: ST_TO_ADDR
// if not tmp then
22087: LD_VAR 0 2
22091: NOT
22092: IFFALSE 22096
// exit ;
22094: GO 22125
// for i in tmp do
22096: LD_ADDR_VAR 0 1
22100: PUSH
22101: LD_VAR 0 2
22105: PUSH
22106: FOR_IN
22107: IFFALSE 22123
// SetLives ( i , 1 ) ;
22109: LD_VAR 0 1
22113: PPUSH
22114: LD_INT 1
22116: PPUSH
22117: CALL_OW 234
22121: GO 22106
22123: POP
22124: POP
// end ;
22125: PPOPN 2
22127: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22128: LD_EXP 45
22132: IFFALSE 22140
22134: PUSH
22135: LD_EXP 94
22139: AND
22140: IFFALSE 22427
22142: GO 22144
22144: DISABLE
22145: LD_INT 0
22147: PPUSH
22148: PPUSH
22149: PPUSH
// begin i := rand ( 1 , 7 ) ;
22150: LD_ADDR_VAR 0 1
22154: PUSH
22155: LD_INT 1
22157: PPUSH
22158: LD_INT 7
22160: PPUSH
22161: CALL_OW 12
22165: ST_TO_ADDR
// case i of 1 :
22166: LD_VAR 0 1
22170: PUSH
22171: LD_INT 1
22173: DOUBLE
22174: EQUAL
22175: IFTRUE 22179
22177: GO 22189
22179: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22180: LD_STRING earthquake(getX(game), 0, 32)
22182: PPUSH
22183: CALL_OW 559
22187: GO 22427
22189: LD_INT 2
22191: DOUBLE
22192: EQUAL
22193: IFTRUE 22197
22195: GO 22211
22197: POP
// begin ToLua ( displayStucuk(); ) ;
22198: LD_STRING displayStucuk();
22200: PPUSH
22201: CALL_OW 559
// ResetFog ;
22205: CALL_OW 335
// end ; 3 :
22209: GO 22427
22211: LD_INT 3
22213: DOUBLE
22214: EQUAL
22215: IFTRUE 22219
22217: GO 22323
22219: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22220: LD_ADDR_VAR 0 2
22224: PUSH
22225: LD_INT 22
22227: PUSH
22228: LD_OWVAR 2
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 25
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PPUSH
22251: CALL_OW 69
22255: ST_TO_ADDR
// if not tmp then
22256: LD_VAR 0 2
22260: NOT
22261: IFFALSE 22265
// exit ;
22263: GO 22427
// un := tmp [ rand ( 1 , tmp ) ] ;
22265: LD_ADDR_VAR 0 3
22269: PUSH
22270: LD_VAR 0 2
22274: PUSH
22275: LD_INT 1
22277: PPUSH
22278: LD_VAR 0 2
22282: PPUSH
22283: CALL_OW 12
22287: ARRAY
22288: ST_TO_ADDR
// if Crawls ( un ) then
22289: LD_VAR 0 3
22293: PPUSH
22294: CALL_OW 318
22298: IFFALSE 22309
// ComWalk ( un ) ;
22300: LD_VAR 0 3
22304: PPUSH
22305: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22309: LD_VAR 0 3
22313: PPUSH
22314: LD_INT 8
22316: PPUSH
22317: CALL_OW 336
// end ; 4 :
22321: GO 22427
22323: LD_INT 4
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22405
22331: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_INT 22
22339: PUSH
22340: LD_OWVAR 2
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 30
22351: PUSH
22352: LD_INT 29
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PPUSH
22363: CALL_OW 69
22367: ST_TO_ADDR
// if not tmp then
22368: LD_VAR 0 2
22372: NOT
22373: IFFALSE 22377
// exit ;
22375: GO 22427
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22377: LD_VAR 0 2
22381: PUSH
22382: LD_INT 1
22384: ARRAY
22385: PPUSH
22386: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22390: LD_VAR 0 2
22394: PUSH
22395: LD_INT 1
22397: ARRAY
22398: PPUSH
22399: CALL_OW 65
// end ; 5 .. 7 :
22403: GO 22427
22405: LD_INT 5
22407: DOUBLE
22408: GREATEREQUAL
22409: IFFALSE 22417
22411: LD_INT 7
22413: DOUBLE
22414: LESSEQUAL
22415: IFTRUE 22419
22417: GO 22426
22419: POP
// StreamSibBomb ; end ;
22420: CALL 18608 0 0
22424: GO 22427
22426: POP
// end ;
22427: PPOPN 3
22429: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22430: LD_EXP 45
22434: IFFALSE 22442
22436: PUSH
22437: LD_EXP 95
22441: AND
22442: IFFALSE 22598
22444: GO 22446
22446: DISABLE
22447: LD_INT 0
22449: PPUSH
22450: PPUSH
22451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22452: LD_ADDR_VAR 0 2
22456: PUSH
22457: LD_INT 81
22459: PUSH
22460: LD_OWVAR 2
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 21
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 21
22484: PUSH
22485: LD_INT 2
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PPUSH
22501: CALL_OW 69
22505: ST_TO_ADDR
// if not tmp then
22506: LD_VAR 0 2
22510: NOT
22511: IFFALSE 22515
// exit ;
22513: GO 22598
// p := 0 ;
22515: LD_ADDR_VAR 0 3
22519: PUSH
22520: LD_INT 0
22522: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22523: LD_INT 35
22525: PPUSH
22526: CALL_OW 67
// p := p + 1 ;
22530: LD_ADDR_VAR 0 3
22534: PUSH
22535: LD_VAR 0 3
22539: PUSH
22540: LD_INT 1
22542: PLUS
22543: ST_TO_ADDR
// for i in tmp do
22544: LD_ADDR_VAR 0 1
22548: PUSH
22549: LD_VAR 0 2
22553: PUSH
22554: FOR_IN
22555: IFFALSE 22586
// if GetLives ( i ) < 1000 then
22557: LD_VAR 0 1
22561: PPUSH
22562: CALL_OW 256
22566: PUSH
22567: LD_INT 1000
22569: LESS
22570: IFFALSE 22584
// SetLives ( i , 1000 ) ;
22572: LD_VAR 0 1
22576: PPUSH
22577: LD_INT 1000
22579: PPUSH
22580: CALL_OW 234
22584: GO 22554
22586: POP
22587: POP
// until p > 20 ;
22588: LD_VAR 0 3
22592: PUSH
22593: LD_INT 20
22595: GREATER
22596: IFFALSE 22523
// end ;
22598: PPOPN 3
22600: END
// every 0 0$1 trigger StreamModeActive and sTime do
22601: LD_EXP 45
22605: IFFALSE 22613
22607: PUSH
22608: LD_EXP 96
22612: AND
22613: IFFALSE 22648
22615: GO 22617
22617: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22618: LD_INT 28
22620: PPUSH
22621: LD_OWVAR 2
22625: PPUSH
22626: LD_INT 2
22628: PPUSH
22629: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22633: LD_INT 30
22635: PPUSH
22636: LD_OWVAR 2
22640: PPUSH
22641: LD_INT 2
22643: PPUSH
22644: CALL_OW 322
// end ;
22648: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22649: LD_EXP 45
22653: IFFALSE 22661
22655: PUSH
22656: LD_EXP 97
22660: AND
22661: IFFALSE 22782
22663: GO 22665
22665: DISABLE
22666: LD_INT 0
22668: PPUSH
22669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22670: LD_ADDR_VAR 0 2
22674: PUSH
22675: LD_INT 22
22677: PUSH
22678: LD_OWVAR 2
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 21
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 3
22699: PUSH
22700: LD_INT 23
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL_OW 69
22723: ST_TO_ADDR
// if not tmp then
22724: LD_VAR 0 2
22728: NOT
22729: IFFALSE 22733
// exit ;
22731: GO 22782
// for i in tmp do
22733: LD_ADDR_VAR 0 1
22737: PUSH
22738: LD_VAR 0 2
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22780
// begin if Crawls ( i ) then
22746: LD_VAR 0 1
22750: PPUSH
22751: CALL_OW 318
22755: IFFALSE 22766
// ComWalk ( i ) ;
22757: LD_VAR 0 1
22761: PPUSH
22762: CALL_OW 138
// SetClass ( i , 2 ) ;
22766: LD_VAR 0 1
22770: PPUSH
22771: LD_INT 2
22773: PPUSH
22774: CALL_OW 336
// end ;
22778: GO 22743
22780: POP
22781: POP
// end ;
22782: PPOPN 2
22784: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22785: LD_EXP 45
22789: IFFALSE 22797
22791: PUSH
22792: LD_EXP 98
22796: AND
22797: IFFALSE 23087
22799: GO 22801
22801: DISABLE
22802: LD_INT 0
22804: PPUSH
22805: PPUSH
22806: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22807: LD_OWVAR 2
22811: PPUSH
22812: LD_INT 9
22814: PPUSH
22815: LD_INT 1
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22825: LD_INT 9
22827: PPUSH
22828: LD_OWVAR 2
22832: PPUSH
22833: CALL_OW 343
// uc_side := 9 ;
22837: LD_ADDR_OWVAR 20
22841: PUSH
22842: LD_INT 9
22844: ST_TO_ADDR
// uc_nation := 2 ;
22845: LD_ADDR_OWVAR 21
22849: PUSH
22850: LD_INT 2
22852: ST_TO_ADDR
// hc_name := Dark Warrior ;
22853: LD_ADDR_OWVAR 26
22857: PUSH
22858: LD_STRING Dark Warrior
22860: ST_TO_ADDR
// hc_gallery :=  ;
22861: LD_ADDR_OWVAR 33
22865: PUSH
22866: LD_STRING 
22868: ST_TO_ADDR
// hc_noskilllimit := true ;
22869: LD_ADDR_OWVAR 76
22873: PUSH
22874: LD_INT 1
22876: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22877: LD_ADDR_OWVAR 31
22881: PUSH
22882: LD_INT 30
22884: PUSH
22885: LD_INT 30
22887: PUSH
22888: LD_INT 30
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: ST_TO_ADDR
// un := CreateHuman ;
22900: LD_ADDR_VAR 0 3
22904: PUSH
22905: CALL_OW 44
22909: ST_TO_ADDR
// hc_noskilllimit := false ;
22910: LD_ADDR_OWVAR 76
22914: PUSH
22915: LD_INT 0
22917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22918: LD_VAR 0 3
22922: PPUSH
22923: LD_INT 1
22925: PPUSH
22926: CALL_OW 51
// ToLua ( playRanger() ) ;
22930: LD_STRING playRanger()
22932: PPUSH
22933: CALL_OW 559
// p := 0 ;
22937: LD_ADDR_VAR 0 2
22941: PUSH
22942: LD_INT 0
22944: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22945: LD_INT 35
22947: PPUSH
22948: CALL_OW 67
// p := p + 1 ;
22952: LD_ADDR_VAR 0 2
22956: PUSH
22957: LD_VAR 0 2
22961: PUSH
22962: LD_INT 1
22964: PLUS
22965: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22966: LD_VAR 0 3
22970: PPUSH
22971: CALL_OW 256
22975: PUSH
22976: LD_INT 1000
22978: LESS
22979: IFFALSE 22993
// SetLives ( un , 1000 ) ;
22981: LD_VAR 0 3
22985: PPUSH
22986: LD_INT 1000
22988: PPUSH
22989: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22993: LD_VAR 0 3
22997: PPUSH
22998: LD_INT 81
23000: PUSH
23001: LD_OWVAR 2
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 91
23012: PUSH
23013: LD_VAR 0 3
23017: PUSH
23018: LD_INT 30
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PPUSH
23030: CALL_OW 69
23034: PPUSH
23035: LD_VAR 0 3
23039: PPUSH
23040: CALL_OW 74
23044: PPUSH
23045: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23049: LD_VAR 0 2
23053: PUSH
23054: LD_INT 80
23056: GREATER
23057: IFTRUE 23070
23059: PUSH
23060: LD_VAR 0 3
23064: PPUSH
23065: CALL_OW 301
23069: OR
23070: IFFALSE 22945
// if un then
23072: LD_VAR 0 3
23076: IFFALSE 23087
// RemoveUnit ( un ) ;
23078: LD_VAR 0 3
23082: PPUSH
23083: CALL_OW 64
// end ;
23087: PPOPN 3
23089: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23090: LD_EXP 99
23094: IFFALSE 23210
23096: GO 23098
23098: DISABLE
23099: LD_INT 0
23101: PPUSH
23102: PPUSH
23103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23104: LD_ADDR_VAR 0 2
23108: PUSH
23109: LD_INT 81
23111: PUSH
23112: LD_OWVAR 2
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 21
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PPUSH
23135: CALL_OW 69
23139: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23140: LD_STRING playComputer()
23142: PPUSH
23143: CALL_OW 559
// if not tmp then
23147: LD_VAR 0 2
23151: NOT
23152: IFFALSE 23156
// exit ;
23154: GO 23210
// for i in tmp do
23156: LD_ADDR_VAR 0 1
23160: PUSH
23161: LD_VAR 0 2
23165: PUSH
23166: FOR_IN
23167: IFFALSE 23208
// for j := 1 to 4 do
23169: LD_ADDR_VAR 0 3
23173: PUSH
23174: DOUBLE
23175: LD_INT 1
23177: DEC
23178: ST_TO_ADDR
23179: LD_INT 4
23181: PUSH
23182: FOR_TO
23183: IFFALSE 23204
// SetSkill ( i , j , 10 ) ;
23185: LD_VAR 0 1
23189: PPUSH
23190: LD_VAR 0 3
23194: PPUSH
23195: LD_INT 10
23197: PPUSH
23198: CALL_OW 237
23202: GO 23182
23204: POP
23205: POP
23206: GO 23166
23208: POP
23209: POP
// end ;
23210: PPOPN 3
23212: END
// every 0 0$1 trigger s30 do var i , tmp ;
23213: LD_EXP 100
23217: IFFALSE 23286
23219: GO 23221
23221: DISABLE
23222: LD_INT 0
23224: PPUSH
23225: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23226: LD_ADDR_VAR 0 2
23230: PUSH
23231: LD_INT 22
23233: PUSH
23234: LD_OWVAR 2
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PPUSH
23243: CALL_OW 69
23247: ST_TO_ADDR
// if not tmp then
23248: LD_VAR 0 2
23252: NOT
23253: IFFALSE 23257
// exit ;
23255: GO 23286
// for i in tmp do
23257: LD_ADDR_VAR 0 1
23261: PUSH
23262: LD_VAR 0 2
23266: PUSH
23267: FOR_IN
23268: IFFALSE 23284
// SetLives ( i , 300 ) ;
23270: LD_VAR 0 1
23274: PPUSH
23275: LD_INT 300
23277: PPUSH
23278: CALL_OW 234
23282: GO 23267
23284: POP
23285: POP
// end ;
23286: PPOPN 2
23288: END
// every 0 0$1 trigger s60 do var i , tmp ;
23289: LD_EXP 101
23293: IFFALSE 23362
23295: GO 23297
23297: DISABLE
23298: LD_INT 0
23300: PPUSH
23301: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23302: LD_ADDR_VAR 0 2
23306: PUSH
23307: LD_INT 22
23309: PUSH
23310: LD_OWVAR 2
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PPUSH
23319: CALL_OW 69
23323: ST_TO_ADDR
// if not tmp then
23324: LD_VAR 0 2
23328: NOT
23329: IFFALSE 23333
// exit ;
23331: GO 23362
// for i in tmp do
23333: LD_ADDR_VAR 0 1
23337: PUSH
23338: LD_VAR 0 2
23342: PUSH
23343: FOR_IN
23344: IFFALSE 23360
// SetLives ( i , 600 ) ;
23346: LD_VAR 0 1
23350: PPUSH
23351: LD_INT 600
23353: PPUSH
23354: CALL_OW 234
23358: GO 23343
23360: POP
23361: POP
// end ;
23362: PPOPN 2
23364: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23365: LD_INT 0
23367: PPUSH
// case cmd of 301 :
23368: LD_VAR 0 1
23372: PUSH
23373: LD_INT 301
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23381
23379: GO 23413
23381: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23382: LD_VAR 0 6
23386: PPUSH
23387: LD_VAR 0 7
23391: PPUSH
23392: LD_VAR 0 8
23396: PPUSH
23397: LD_VAR 0 4
23401: PPUSH
23402: LD_VAR 0 5
23406: PPUSH
23407: CALL 24626 0 5
23411: GO 23534
23413: LD_INT 302
23415: DOUBLE
23416: EQUAL
23417: IFTRUE 23421
23419: GO 23458
23421: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23422: LD_VAR 0 6
23426: PPUSH
23427: LD_VAR 0 7
23431: PPUSH
23432: LD_VAR 0 8
23436: PPUSH
23437: LD_VAR 0 9
23441: PPUSH
23442: LD_VAR 0 4
23446: PPUSH
23447: LD_VAR 0 5
23451: PPUSH
23452: CALL 24717 0 6
23456: GO 23534
23458: LD_INT 303
23460: DOUBLE
23461: EQUAL
23462: IFTRUE 23466
23464: GO 23503
23466: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23467: LD_VAR 0 6
23471: PPUSH
23472: LD_VAR 0 7
23476: PPUSH
23477: LD_VAR 0 8
23481: PPUSH
23482: LD_VAR 0 9
23486: PPUSH
23487: LD_VAR 0 4
23491: PPUSH
23492: LD_VAR 0 5
23496: PPUSH
23497: CALL 23539 0 6
23501: GO 23534
23503: LD_INT 304
23505: DOUBLE
23506: EQUAL
23507: IFTRUE 23511
23509: GO 23533
23511: POP
// hHackTeleport ( unit , x , y ) ; end ;
23512: LD_VAR 0 2
23516: PPUSH
23517: LD_VAR 0 4
23521: PPUSH
23522: LD_VAR 0 5
23526: PPUSH
23527: CALL 25310 0 3
23531: GO 23534
23533: POP
// end ;
23534: LD_VAR 0 12
23538: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23539: LD_INT 0
23541: PPUSH
23542: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23543: LD_VAR 0 1
23547: PUSH
23548: LD_INT 1
23550: LESS
23551: IFTRUE 23563
23553: PUSH
23554: LD_VAR 0 1
23558: PUSH
23559: LD_INT 3
23561: GREATER
23562: OR
23563: IFTRUE 23581
23565: PUSH
23566: LD_VAR 0 5
23570: PPUSH
23571: LD_VAR 0 6
23575: PPUSH
23576: CALL_OW 428
23580: OR
23581: IFFALSE 23585
// exit ;
23583: GO 24313
// uc_side := your_side ;
23585: LD_ADDR_OWVAR 20
23589: PUSH
23590: LD_OWVAR 2
23594: ST_TO_ADDR
// uc_nation := nation ;
23595: LD_ADDR_OWVAR 21
23599: PUSH
23600: LD_VAR 0 1
23604: ST_TO_ADDR
// bc_level = 1 ;
23605: LD_ADDR_OWVAR 43
23609: PUSH
23610: LD_INT 1
23612: ST_TO_ADDR
// case btype of 1 :
23613: LD_VAR 0 2
23617: PUSH
23618: LD_INT 1
23620: DOUBLE
23621: EQUAL
23622: IFTRUE 23626
23624: GO 23637
23626: POP
// bc_type := b_depot ; 2 :
23627: LD_ADDR_OWVAR 42
23631: PUSH
23632: LD_INT 0
23634: ST_TO_ADDR
23635: GO 24257
23637: LD_INT 2
23639: DOUBLE
23640: EQUAL
23641: IFTRUE 23645
23643: GO 23656
23645: POP
// bc_type := b_warehouse ; 3 :
23646: LD_ADDR_OWVAR 42
23650: PUSH
23651: LD_INT 1
23653: ST_TO_ADDR
23654: GO 24257
23656: LD_INT 3
23658: DOUBLE
23659: EQUAL
23660: IFTRUE 23664
23662: GO 23675
23664: POP
// bc_type := b_lab ; 4 .. 9 :
23665: LD_ADDR_OWVAR 42
23669: PUSH
23670: LD_INT 6
23672: ST_TO_ADDR
23673: GO 24257
23675: LD_INT 4
23677: DOUBLE
23678: GREATEREQUAL
23679: IFFALSE 23687
23681: LD_INT 9
23683: DOUBLE
23684: LESSEQUAL
23685: IFTRUE 23689
23687: GO 23749
23689: POP
// begin bc_type := b_lab_half ;
23690: LD_ADDR_OWVAR 42
23694: PUSH
23695: LD_INT 7
23697: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23698: LD_ADDR_OWVAR 44
23702: PUSH
23703: LD_INT 10
23705: PUSH
23706: LD_INT 11
23708: PUSH
23709: LD_INT 12
23711: PUSH
23712: LD_INT 15
23714: PUSH
23715: LD_INT 14
23717: PUSH
23718: LD_INT 13
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: LD_VAR 0 2
23733: PUSH
23734: LD_INT 3
23736: MINUS
23737: ARRAY
23738: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23739: LD_ADDR_OWVAR 45
23743: PUSH
23744: LD_INT 9
23746: ST_TO_ADDR
// end ; 10 .. 13 :
23747: GO 24257
23749: LD_INT 10
23751: DOUBLE
23752: GREATEREQUAL
23753: IFFALSE 23761
23755: LD_INT 13
23757: DOUBLE
23758: LESSEQUAL
23759: IFTRUE 23763
23761: GO 23840
23763: POP
// begin bc_type := b_lab_full ;
23764: LD_ADDR_OWVAR 42
23768: PUSH
23769: LD_INT 8
23771: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23772: LD_ADDR_OWVAR 44
23776: PUSH
23777: LD_INT 10
23779: PUSH
23780: LD_INT 12
23782: PUSH
23783: LD_INT 14
23785: PUSH
23786: LD_INT 13
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: PUSH
23795: LD_VAR 0 2
23799: PUSH
23800: LD_INT 9
23802: MINUS
23803: ARRAY
23804: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23805: LD_ADDR_OWVAR 45
23809: PUSH
23810: LD_INT 11
23812: PUSH
23813: LD_INT 15
23815: PUSH
23816: LD_INT 12
23818: PUSH
23819: LD_INT 15
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: PUSH
23828: LD_VAR 0 2
23832: PUSH
23833: LD_INT 9
23835: MINUS
23836: ARRAY
23837: ST_TO_ADDR
// end ; 14 :
23838: GO 24257
23840: LD_INT 14
23842: DOUBLE
23843: EQUAL
23844: IFTRUE 23848
23846: GO 23859
23848: POP
// bc_type := b_workshop ; 15 :
23849: LD_ADDR_OWVAR 42
23853: PUSH
23854: LD_INT 2
23856: ST_TO_ADDR
23857: GO 24257
23859: LD_INT 15
23861: DOUBLE
23862: EQUAL
23863: IFTRUE 23867
23865: GO 23878
23867: POP
// bc_type := b_factory ; 16 :
23868: LD_ADDR_OWVAR 42
23872: PUSH
23873: LD_INT 3
23875: ST_TO_ADDR
23876: GO 24257
23878: LD_INT 16
23880: DOUBLE
23881: EQUAL
23882: IFTRUE 23886
23884: GO 23897
23886: POP
// bc_type := b_ext_gun ; 17 :
23887: LD_ADDR_OWVAR 42
23891: PUSH
23892: LD_INT 17
23894: ST_TO_ADDR
23895: GO 24257
23897: LD_INT 17
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23933
23905: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23906: LD_ADDR_OWVAR 42
23910: PUSH
23911: LD_INT 19
23913: PUSH
23914: LD_INT 23
23916: PUSH
23917: LD_INT 19
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_VAR 0 1
23929: ARRAY
23930: ST_TO_ADDR
23931: GO 24257
23933: LD_INT 18
23935: DOUBLE
23936: EQUAL
23937: IFTRUE 23941
23939: GO 23952
23941: POP
// bc_type := b_ext_radar ; 19 :
23942: LD_ADDR_OWVAR 42
23946: PUSH
23947: LD_INT 20
23949: ST_TO_ADDR
23950: GO 24257
23952: LD_INT 19
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 23971
23960: POP
// bc_type := b_ext_radio ; 20 :
23961: LD_ADDR_OWVAR 42
23965: PUSH
23966: LD_INT 22
23968: ST_TO_ADDR
23969: GO 24257
23971: LD_INT 20
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 23990
23979: POP
// bc_type := b_ext_siberium ; 21 :
23980: LD_ADDR_OWVAR 42
23984: PUSH
23985: LD_INT 21
23987: ST_TO_ADDR
23988: GO 24257
23990: LD_INT 21
23992: DOUBLE
23993: EQUAL
23994: IFTRUE 23998
23996: GO 24009
23998: POP
// bc_type := b_ext_computer ; 22 :
23999: LD_ADDR_OWVAR 42
24003: PUSH
24004: LD_INT 24
24006: ST_TO_ADDR
24007: GO 24257
24009: LD_INT 22
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24028
24017: POP
// bc_type := b_ext_track ; 23 :
24018: LD_ADDR_OWVAR 42
24022: PUSH
24023: LD_INT 16
24025: ST_TO_ADDR
24026: GO 24257
24028: LD_INT 23
24030: DOUBLE
24031: EQUAL
24032: IFTRUE 24036
24034: GO 24047
24036: POP
// bc_type := b_ext_laser ; 24 :
24037: LD_ADDR_OWVAR 42
24041: PUSH
24042: LD_INT 25
24044: ST_TO_ADDR
24045: GO 24257
24047: LD_INT 24
24049: DOUBLE
24050: EQUAL
24051: IFTRUE 24055
24053: GO 24066
24055: POP
// bc_type := b_control_tower ; 25 :
24056: LD_ADDR_OWVAR 42
24060: PUSH
24061: LD_INT 36
24063: ST_TO_ADDR
24064: GO 24257
24066: LD_INT 25
24068: DOUBLE
24069: EQUAL
24070: IFTRUE 24074
24072: GO 24085
24074: POP
// bc_type := b_breastwork ; 26 :
24075: LD_ADDR_OWVAR 42
24079: PUSH
24080: LD_INT 31
24082: ST_TO_ADDR
24083: GO 24257
24085: LD_INT 26
24087: DOUBLE
24088: EQUAL
24089: IFTRUE 24093
24091: GO 24104
24093: POP
// bc_type := b_bunker ; 27 :
24094: LD_ADDR_OWVAR 42
24098: PUSH
24099: LD_INT 32
24101: ST_TO_ADDR
24102: GO 24257
24104: LD_INT 27
24106: DOUBLE
24107: EQUAL
24108: IFTRUE 24112
24110: GO 24123
24112: POP
// bc_type := b_turret ; 28 :
24113: LD_ADDR_OWVAR 42
24117: PUSH
24118: LD_INT 33
24120: ST_TO_ADDR
24121: GO 24257
24123: LD_INT 28
24125: DOUBLE
24126: EQUAL
24127: IFTRUE 24131
24129: GO 24142
24131: POP
// bc_type := b_armoury ; 29 :
24132: LD_ADDR_OWVAR 42
24136: PUSH
24137: LD_INT 4
24139: ST_TO_ADDR
24140: GO 24257
24142: LD_INT 29
24144: DOUBLE
24145: EQUAL
24146: IFTRUE 24150
24148: GO 24161
24150: POP
// bc_type := b_barracks ; 30 :
24151: LD_ADDR_OWVAR 42
24155: PUSH
24156: LD_INT 5
24158: ST_TO_ADDR
24159: GO 24257
24161: LD_INT 30
24163: DOUBLE
24164: EQUAL
24165: IFTRUE 24169
24167: GO 24180
24169: POP
// bc_type := b_solar_power ; 31 :
24170: LD_ADDR_OWVAR 42
24174: PUSH
24175: LD_INT 27
24177: ST_TO_ADDR
24178: GO 24257
24180: LD_INT 31
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24199
24188: POP
// bc_type := b_oil_power ; 32 :
24189: LD_ADDR_OWVAR 42
24193: PUSH
24194: LD_INT 26
24196: ST_TO_ADDR
24197: GO 24257
24199: LD_INT 32
24201: DOUBLE
24202: EQUAL
24203: IFTRUE 24207
24205: GO 24218
24207: POP
// bc_type := b_siberite_power ; 33 :
24208: LD_ADDR_OWVAR 42
24212: PUSH
24213: LD_INT 28
24215: ST_TO_ADDR
24216: GO 24257
24218: LD_INT 33
24220: DOUBLE
24221: EQUAL
24222: IFTRUE 24226
24224: GO 24237
24226: POP
// bc_type := b_oil_mine ; 34 :
24227: LD_ADDR_OWVAR 42
24231: PUSH
24232: LD_INT 29
24234: ST_TO_ADDR
24235: GO 24257
24237: LD_INT 34
24239: DOUBLE
24240: EQUAL
24241: IFTRUE 24245
24243: GO 24256
24245: POP
// bc_type := b_siberite_mine ; end ;
24246: LD_ADDR_OWVAR 42
24250: PUSH
24251: LD_INT 30
24253: ST_TO_ADDR
24254: GO 24257
24256: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24257: LD_ADDR_VAR 0 8
24261: PUSH
24262: LD_VAR 0 5
24266: PPUSH
24267: LD_VAR 0 6
24271: PPUSH
24272: LD_VAR 0 3
24276: PPUSH
24277: CALL_OW 47
24281: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24282: LD_OWVAR 42
24286: PUSH
24287: LD_INT 32
24289: PUSH
24290: LD_INT 33
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: IN
24297: IFFALSE 24313
// PlaceWeaponTurret ( b , weapon ) ;
24299: LD_VAR 0 8
24303: PPUSH
24304: LD_VAR 0 4
24308: PPUSH
24309: CALL_OW 431
// end ;
24313: LD_VAR 0 7
24317: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
24322: PPUSH
24323: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24324: LD_ADDR_VAR 0 4
24328: PUSH
24329: LD_INT 22
24331: PUSH
24332: LD_OWVAR 2
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 2
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 0
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 30
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PPUSH
24373: CALL_OW 69
24377: ST_TO_ADDR
// if not tmp then
24378: LD_VAR 0 4
24382: NOT
24383: IFFALSE 24387
// exit ;
24385: GO 24446
// for i in tmp do
24387: LD_ADDR_VAR 0 2
24391: PUSH
24392: LD_VAR 0 4
24396: PUSH
24397: FOR_IN
24398: IFFALSE 24444
// for j = 1 to 3 do
24400: LD_ADDR_VAR 0 3
24404: PUSH
24405: DOUBLE
24406: LD_INT 1
24408: DEC
24409: ST_TO_ADDR
24410: LD_INT 3
24412: PUSH
24413: FOR_TO
24414: IFFALSE 24440
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24416: LD_VAR 0 2
24420: PPUSH
24421: CALL_OW 274
24425: PPUSH
24426: LD_VAR 0 3
24430: PPUSH
24431: LD_INT 99999
24433: PPUSH
24434: CALL_OW 277
24438: GO 24413
24440: POP
24441: POP
24442: GO 24397
24444: POP
24445: POP
// end ;
24446: LD_VAR 0 1
24450: RET
// export function hHackSetLevel10 ; var i , j ; begin
24451: LD_INT 0
24453: PPUSH
24454: PPUSH
24455: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24456: LD_ADDR_VAR 0 2
24460: PUSH
24461: LD_INT 21
24463: PUSH
24464: LD_INT 1
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PPUSH
24471: CALL_OW 69
24475: PUSH
24476: FOR_IN
24477: IFFALSE 24529
// if IsSelected ( i ) then
24479: LD_VAR 0 2
24483: PPUSH
24484: CALL_OW 306
24488: IFFALSE 24527
// begin for j := 1 to 4 do
24490: LD_ADDR_VAR 0 3
24494: PUSH
24495: DOUBLE
24496: LD_INT 1
24498: DEC
24499: ST_TO_ADDR
24500: LD_INT 4
24502: PUSH
24503: FOR_TO
24504: IFFALSE 24525
// SetSkill ( i , j , 10 ) ;
24506: LD_VAR 0 2
24510: PPUSH
24511: LD_VAR 0 3
24515: PPUSH
24516: LD_INT 10
24518: PPUSH
24519: CALL_OW 237
24523: GO 24503
24525: POP
24526: POP
// end ;
24527: GO 24476
24529: POP
24530: POP
// end ;
24531: LD_VAR 0 1
24535: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24536: LD_INT 0
24538: PPUSH
24539: PPUSH
24540: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24541: LD_ADDR_VAR 0 2
24545: PUSH
24546: LD_INT 22
24548: PUSH
24549: LD_OWVAR 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 21
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PPUSH
24572: CALL_OW 69
24576: PUSH
24577: FOR_IN
24578: IFFALSE 24619
// begin for j := 1 to 4 do
24580: LD_ADDR_VAR 0 3
24584: PUSH
24585: DOUBLE
24586: LD_INT 1
24588: DEC
24589: ST_TO_ADDR
24590: LD_INT 4
24592: PUSH
24593: FOR_TO
24594: IFFALSE 24615
// SetSkill ( i , j , 10 ) ;
24596: LD_VAR 0 2
24600: PPUSH
24601: LD_VAR 0 3
24605: PPUSH
24606: LD_INT 10
24608: PPUSH
24609: CALL_OW 237
24613: GO 24593
24615: POP
24616: POP
// end ;
24617: GO 24577
24619: POP
24620: POP
// end ;
24621: LD_VAR 0 1
24625: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24626: LD_INT 0
24628: PPUSH
// uc_side := your_side ;
24629: LD_ADDR_OWVAR 20
24633: PUSH
24634: LD_OWVAR 2
24638: ST_TO_ADDR
// uc_nation := nation ;
24639: LD_ADDR_OWVAR 21
24643: PUSH
24644: LD_VAR 0 1
24648: ST_TO_ADDR
// InitHc ;
24649: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24653: LD_INT 0
24655: PPUSH
24656: LD_VAR 0 2
24660: PPUSH
24661: LD_VAR 0 3
24665: PPUSH
24666: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24670: LD_VAR 0 4
24674: PPUSH
24675: LD_VAR 0 5
24679: PPUSH
24680: CALL_OW 428
24684: PUSH
24685: LD_INT 0
24687: EQUAL
24688: IFFALSE 24712
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24690: CALL_OW 44
24694: PPUSH
24695: LD_VAR 0 4
24699: PPUSH
24700: LD_VAR 0 5
24704: PPUSH
24705: LD_INT 1
24707: PPUSH
24708: CALL_OW 48
// end ;
24712: LD_VAR 0 6
24716: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24717: LD_INT 0
24719: PPUSH
24720: PPUSH
// uc_side := your_side ;
24721: LD_ADDR_OWVAR 20
24725: PUSH
24726: LD_OWVAR 2
24730: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24731: LD_VAR 0 1
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: LD_INT 3
24744: PUSH
24745: LD_INT 4
24747: PUSH
24748: LD_INT 5
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: IN
24758: IFFALSE 24770
// uc_nation := nation_american else
24760: LD_ADDR_OWVAR 21
24764: PUSH
24765: LD_INT 1
24767: ST_TO_ADDR
24768: GO 24813
// if chassis in [ 11 , 12 , 13 , 14 ] then
24770: LD_VAR 0 1
24774: PUSH
24775: LD_INT 11
24777: PUSH
24778: LD_INT 12
24780: PUSH
24781: LD_INT 13
24783: PUSH
24784: LD_INT 14
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: IN
24793: IFFALSE 24805
// uc_nation := nation_arabian else
24795: LD_ADDR_OWVAR 21
24799: PUSH
24800: LD_INT 2
24802: ST_TO_ADDR
24803: GO 24813
// uc_nation := nation_russian ;
24805: LD_ADDR_OWVAR 21
24809: PUSH
24810: LD_INT 3
24812: ST_TO_ADDR
// vc_chassis := chassis ;
24813: LD_ADDR_OWVAR 37
24817: PUSH
24818: LD_VAR 0 1
24822: ST_TO_ADDR
// vc_engine := engine ;
24823: LD_ADDR_OWVAR 39
24827: PUSH
24828: LD_VAR 0 2
24832: ST_TO_ADDR
// vc_control := control ;
24833: LD_ADDR_OWVAR 38
24837: PUSH
24838: LD_VAR 0 3
24842: ST_TO_ADDR
// vc_weapon := weapon ;
24843: LD_ADDR_OWVAR 40
24847: PUSH
24848: LD_VAR 0 4
24852: ST_TO_ADDR
// un := CreateVehicle ;
24853: LD_ADDR_VAR 0 8
24857: PUSH
24858: CALL_OW 45
24862: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24863: LD_VAR 0 8
24867: PPUSH
24868: LD_INT 0
24870: PPUSH
24871: LD_INT 5
24873: PPUSH
24874: CALL_OW 12
24878: PPUSH
24879: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24883: LD_VAR 0 8
24887: PPUSH
24888: LD_VAR 0 5
24892: PPUSH
24893: LD_VAR 0 6
24897: PPUSH
24898: LD_INT 1
24900: PPUSH
24901: CALL_OW 48
// end ;
24905: LD_VAR 0 7
24909: RET
// export hInvincible ; every 1 do
24910: GO 24912
24912: DISABLE
// hInvincible := [ ] ;
24913: LD_ADDR_EXP 102
24917: PUSH
24918: EMPTY
24919: ST_TO_ADDR
24920: END
// every 10 do var i ;
24921: GO 24923
24923: DISABLE
24924: LD_INT 0
24926: PPUSH
// begin enable ;
24927: ENABLE
// if not hInvincible then
24928: LD_EXP 102
24932: NOT
24933: IFFALSE 24937
// exit ;
24935: GO 24981
// for i in hInvincible do
24937: LD_ADDR_VAR 0 1
24941: PUSH
24942: LD_EXP 102
24946: PUSH
24947: FOR_IN
24948: IFFALSE 24979
// if GetLives ( i ) < 1000 then
24950: LD_VAR 0 1
24954: PPUSH
24955: CALL_OW 256
24959: PUSH
24960: LD_INT 1000
24962: LESS
24963: IFFALSE 24977
// SetLives ( i , 1000 ) ;
24965: LD_VAR 0 1
24969: PPUSH
24970: LD_INT 1000
24972: PPUSH
24973: CALL_OW 234
24977: GO 24947
24979: POP
24980: POP
// end ;
24981: PPOPN 1
24983: END
// export function hHackInvincible ; var i ; begin
24984: LD_INT 0
24986: PPUSH
24987: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24988: LD_ADDR_VAR 0 2
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: LD_INT 21
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 21
25008: PUSH
25009: LD_INT 2
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: PPUSH
25021: CALL_OW 69
25025: PUSH
25026: FOR_IN
25027: IFFALSE 25088
// if IsSelected ( i ) then
25029: LD_VAR 0 2
25033: PPUSH
25034: CALL_OW 306
25038: IFFALSE 25086
// begin if i in hInvincible then
25040: LD_VAR 0 2
25044: PUSH
25045: LD_EXP 102
25049: IN
25050: IFFALSE 25070
// hInvincible := hInvincible diff i else
25052: LD_ADDR_EXP 102
25056: PUSH
25057: LD_EXP 102
25061: PUSH
25062: LD_VAR 0 2
25066: DIFF
25067: ST_TO_ADDR
25068: GO 25086
// hInvincible := hInvincible union i ;
25070: LD_ADDR_EXP 102
25074: PUSH
25075: LD_EXP 102
25079: PUSH
25080: LD_VAR 0 2
25084: UNION
25085: ST_TO_ADDR
// end ;
25086: GO 25026
25088: POP
25089: POP
// end ;
25090: LD_VAR 0 1
25094: RET
// export function hHackInvisible ; var i , j ; begin
25095: LD_INT 0
25097: PPUSH
25098: PPUSH
25099: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25100: LD_ADDR_VAR 0 2
25104: PUSH
25105: LD_INT 21
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PPUSH
25115: CALL_OW 69
25119: PUSH
25120: FOR_IN
25121: IFFALSE 25145
// if IsSelected ( i ) then
25123: LD_VAR 0 2
25127: PPUSH
25128: CALL_OW 306
25132: IFFALSE 25143
// ComForceInvisible ( i ) ;
25134: LD_VAR 0 2
25138: PPUSH
25139: CALL_OW 496
25143: GO 25120
25145: POP
25146: POP
// end ;
25147: LD_VAR 0 1
25151: RET
// export function hHackChangeYourSide ; begin
25152: LD_INT 0
25154: PPUSH
// if your_side = 8 then
25155: LD_OWVAR 2
25159: PUSH
25160: LD_INT 8
25162: EQUAL
25163: IFFALSE 25175
// your_side := 0 else
25165: LD_ADDR_OWVAR 2
25169: PUSH
25170: LD_INT 0
25172: ST_TO_ADDR
25173: GO 25189
// your_side := your_side + 1 ;
25175: LD_ADDR_OWVAR 2
25179: PUSH
25180: LD_OWVAR 2
25184: PUSH
25185: LD_INT 1
25187: PLUS
25188: ST_TO_ADDR
// end ;
25189: LD_VAR 0 1
25193: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25194: LD_INT 0
25196: PPUSH
25197: PPUSH
25198: PPUSH
// for i in all_units do
25199: LD_ADDR_VAR 0 2
25203: PUSH
25204: LD_OWVAR 3
25208: PUSH
25209: FOR_IN
25210: IFFALSE 25288
// if IsSelected ( i ) then
25212: LD_VAR 0 2
25216: PPUSH
25217: CALL_OW 306
25221: IFFALSE 25286
// begin j := GetSide ( i ) ;
25223: LD_ADDR_VAR 0 3
25227: PUSH
25228: LD_VAR 0 2
25232: PPUSH
25233: CALL_OW 255
25237: ST_TO_ADDR
// if j = 8 then
25238: LD_VAR 0 3
25242: PUSH
25243: LD_INT 8
25245: EQUAL
25246: IFFALSE 25258
// j := 0 else
25248: LD_ADDR_VAR 0 3
25252: PUSH
25253: LD_INT 0
25255: ST_TO_ADDR
25256: GO 25272
// j := j + 1 ;
25258: LD_ADDR_VAR 0 3
25262: PUSH
25263: LD_VAR 0 3
25267: PUSH
25268: LD_INT 1
25270: PLUS
25271: ST_TO_ADDR
// SetSide ( i , j ) ;
25272: LD_VAR 0 2
25276: PPUSH
25277: LD_VAR 0 3
25281: PPUSH
25282: CALL_OW 235
// end ;
25286: GO 25209
25288: POP
25289: POP
// end ;
25290: LD_VAR 0 1
25294: RET
// export function hHackFog ; begin
25295: LD_INT 0
25297: PPUSH
// FogOff ( true ) ;
25298: LD_INT 1
25300: PPUSH
25301: CALL_OW 344
// end ;
25305: LD_VAR 0 1
25309: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25310: LD_INT 0
25312: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25313: LD_VAR 0 1
25317: PPUSH
25318: LD_VAR 0 2
25322: PPUSH
25323: LD_VAR 0 3
25327: PPUSH
25328: LD_INT 1
25330: PPUSH
25331: LD_INT 1
25333: PPUSH
25334: CALL_OW 483
// CenterOnXY ( x , y ) ;
25338: LD_VAR 0 2
25342: PPUSH
25343: LD_VAR 0 3
25347: PPUSH
25348: CALL_OW 84
// end ;
25352: LD_VAR 0 4
25356: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25357: LD_INT 0
25359: PPUSH
25360: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25361: LD_VAR 0 1
25365: NOT
25366: IFTRUE 25385
25368: PUSH
25369: LD_VAR 0 2
25373: PPUSH
25374: LD_VAR 0 3
25378: PPUSH
25379: CALL_OW 488
25383: NOT
25384: OR
25385: IFTRUE 25420
25387: PUSH
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 266
25397: PUSH
25398: LD_INT 3
25400: NONEQUAL
25401: IFFALSE 25419
25403: PUSH
25404: LD_VAR 0 1
25408: PPUSH
25409: CALL_OW 247
25413: PUSH
25414: LD_INT 1
25416: EQUAL
25417: NOT
25418: AND
25419: OR
25420: IFFALSE 25424
// exit ;
25422: GO 25706
// if GetType ( factory ) = unit_human then
25424: LD_VAR 0 1
25428: PPUSH
25429: CALL_OW 247
25433: PUSH
25434: LD_INT 1
25436: EQUAL
25437: IFFALSE 25454
// factory := IsInUnit ( factory ) ;
25439: LD_ADDR_VAR 0 1
25443: PUSH
25444: LD_VAR 0 1
25448: PPUSH
25449: CALL_OW 310
25453: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25454: LD_VAR 0 1
25458: PPUSH
25459: CALL_OW 266
25463: PUSH
25464: LD_INT 3
25466: NONEQUAL
25467: IFFALSE 25471
// exit ;
25469: GO 25706
// for i := 1 to Count ( factoryWaypoints ) do
25471: LD_ADDR_VAR 0 5
25475: PUSH
25476: DOUBLE
25477: LD_INT 1
25479: DEC
25480: ST_TO_ADDR
25481: LD_EXP 103
25485: PPUSH
25486: CALL 35673 0 1
25490: PUSH
25491: FOR_TO
25492: IFFALSE 25654
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25494: LD_VAR 0 2
25498: PPUSH
25499: LD_VAR 0 3
25503: PPUSH
25504: CALL_OW 428
25508: PUSH
25509: LD_EXP 103
25513: PUSH
25514: LD_VAR 0 5
25518: ARRAY
25519: PUSH
25520: LD_INT 2
25522: ARRAY
25523: EQUAL
25524: IFFALSE 25556
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25526: LD_ADDR_EXP 103
25530: PUSH
25531: LD_EXP 103
25535: PPUSH
25536: LD_VAR 0 5
25540: PPUSH
25541: CALL_OW 3
25545: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25546: CALL 25711 0 0
// exit ;
25550: POP
25551: POP
25552: GO 25706
// end else
25554: GO 25652
// if factory = factoryWaypoints [ i ] [ 2 ] then
25556: LD_VAR 0 1
25560: PUSH
25561: LD_EXP 103
25565: PUSH
25566: LD_VAR 0 5
25570: ARRAY
25571: PUSH
25572: LD_INT 2
25574: ARRAY
25575: EQUAL
25576: IFFALSE 25652
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25578: LD_ADDR_EXP 103
25582: PUSH
25583: LD_EXP 103
25587: PPUSH
25588: LD_VAR 0 5
25592: PPUSH
25593: CALL_OW 3
25597: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25598: LD_ADDR_EXP 103
25602: PUSH
25603: LD_EXP 103
25607: PPUSH
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 255
25617: PUSH
25618: LD_VAR 0 1
25622: PUSH
25623: LD_VAR 0 2
25627: PUSH
25628: LD_VAR 0 3
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: PPUSH
25639: CALL 71649 0 2
25643: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25644: CALL 25711 0 0
// exit ;
25648: POP
25649: POP
25650: GO 25706
// end ; end ;
25652: GO 25491
25654: POP
25655: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25656: LD_ADDR_EXP 103
25660: PUSH
25661: LD_EXP 103
25665: PPUSH
25666: LD_VAR 0 1
25670: PPUSH
25671: CALL_OW 255
25675: PUSH
25676: LD_VAR 0 1
25680: PUSH
25681: LD_VAR 0 2
25685: PUSH
25686: LD_VAR 0 3
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: PPUSH
25697: CALL 71649 0 2
25701: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25702: CALL 25711 0 0
// end ;
25706: LD_VAR 0 4
25710: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25711: LD_INT 0
25713: PPUSH
25714: PPUSH
25715: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25716: LD_STRING resetFactoryWaypoint();
25718: PPUSH
25719: CALL_OW 559
// if factoryWaypoints then
25723: LD_EXP 103
25727: IFFALSE 25848
// begin list := factoryWaypoints ;
25729: LD_ADDR_VAR 0 3
25733: PUSH
25734: LD_EXP 103
25738: ST_TO_ADDR
// for i := 1 to list do
25739: LD_ADDR_VAR 0 2
25743: PUSH
25744: DOUBLE
25745: LD_INT 1
25747: DEC
25748: ST_TO_ADDR
25749: LD_VAR 0 3
25753: PUSH
25754: FOR_TO
25755: IFFALSE 25846
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25757: LD_STRING setFactoryWaypointXY(
25759: PUSH
25760: LD_VAR 0 3
25764: PUSH
25765: LD_VAR 0 2
25769: ARRAY
25770: PUSH
25771: LD_INT 1
25773: ARRAY
25774: STR
25775: PUSH
25776: LD_STRING ,
25778: STR
25779: PUSH
25780: LD_VAR 0 3
25784: PUSH
25785: LD_VAR 0 2
25789: ARRAY
25790: PUSH
25791: LD_INT 2
25793: ARRAY
25794: STR
25795: PUSH
25796: LD_STRING ,
25798: STR
25799: PUSH
25800: LD_VAR 0 3
25804: PUSH
25805: LD_VAR 0 2
25809: ARRAY
25810: PUSH
25811: LD_INT 3
25813: ARRAY
25814: STR
25815: PUSH
25816: LD_STRING ,
25818: STR
25819: PUSH
25820: LD_VAR 0 3
25824: PUSH
25825: LD_VAR 0 2
25829: ARRAY
25830: PUSH
25831: LD_INT 4
25833: ARRAY
25834: STR
25835: PUSH
25836: LD_STRING )
25838: STR
25839: PPUSH
25840: CALL_OW 559
25844: GO 25754
25846: POP
25847: POP
// end ; end ;
25848: LD_VAR 0 1
25852: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25853: LD_INT 0
25855: PPUSH
// if HexInfo ( x , y ) = warehouse then
25856: LD_VAR 0 2
25860: PPUSH
25861: LD_VAR 0 3
25865: PPUSH
25866: CALL_OW 428
25870: PUSH
25871: LD_VAR 0 1
25875: EQUAL
25876: IFFALSE 25903
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25878: LD_ADDR_EXP 105
25882: PUSH
25883: LD_EXP 105
25887: PPUSH
25888: LD_VAR 0 1
25892: PPUSH
25893: LD_INT 0
25895: PPUSH
25896: CALL_OW 1
25900: ST_TO_ADDR
25901: GO 25954
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25903: LD_ADDR_EXP 105
25907: PUSH
25908: LD_EXP 105
25912: PPUSH
25913: LD_VAR 0 1
25917: PPUSH
25918: LD_VAR 0 1
25922: PPUSH
25923: CALL_OW 255
25927: PUSH
25928: LD_VAR 0 1
25932: PUSH
25933: LD_VAR 0 2
25937: PUSH
25938: LD_VAR 0 3
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 1
25953: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25954: CALL 25963 0 0
// end ;
25958: LD_VAR 0 4
25962: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25963: LD_INT 0
25965: PPUSH
25966: PPUSH
25967: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25968: LD_STRING resetWarehouseGatheringPoints();
25970: PPUSH
25971: CALL_OW 559
// if warehouseGatheringPoints then
25975: LD_EXP 105
25979: IFFALSE 26105
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25981: LD_ADDR_VAR 0 3
25985: PUSH
25986: LD_EXP 105
25990: PPUSH
25991: CALL 75583 0 1
25995: ST_TO_ADDR
// for i := 1 to list do
25996: LD_ADDR_VAR 0 2
26000: PUSH
26001: DOUBLE
26002: LD_INT 1
26004: DEC
26005: ST_TO_ADDR
26006: LD_VAR 0 3
26010: PUSH
26011: FOR_TO
26012: IFFALSE 26103
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26014: LD_STRING setWarehouseGatheringPointXY(
26016: PUSH
26017: LD_VAR 0 3
26021: PUSH
26022: LD_VAR 0 2
26026: ARRAY
26027: PUSH
26028: LD_INT 1
26030: ARRAY
26031: STR
26032: PUSH
26033: LD_STRING ,
26035: STR
26036: PUSH
26037: LD_VAR 0 3
26041: PUSH
26042: LD_VAR 0 2
26046: ARRAY
26047: PUSH
26048: LD_INT 2
26050: ARRAY
26051: STR
26052: PUSH
26053: LD_STRING ,
26055: STR
26056: PUSH
26057: LD_VAR 0 3
26061: PUSH
26062: LD_VAR 0 2
26066: ARRAY
26067: PUSH
26068: LD_INT 3
26070: ARRAY
26071: STR
26072: PUSH
26073: LD_STRING ,
26075: STR
26076: PUSH
26077: LD_VAR 0 3
26081: PUSH
26082: LD_VAR 0 2
26086: ARRAY
26087: PUSH
26088: LD_INT 4
26090: ARRAY
26091: STR
26092: PUSH
26093: LD_STRING )
26095: STR
26096: PPUSH
26097: CALL_OW 559
26101: GO 26011
26103: POP
26104: POP
// end ; end ;
26105: LD_VAR 0 1
26109: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26110: LD_EXP 105
26114: IFFALSE 26809
26116: GO 26118
26118: DISABLE
26119: LD_INT 0
26121: PPUSH
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
// begin enable ;
26130: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26131: LD_ADDR_VAR 0 3
26135: PUSH
26136: LD_EXP 105
26140: PPUSH
26141: CALL 75583 0 1
26145: ST_TO_ADDR
// if not list then
26146: LD_VAR 0 3
26150: NOT
26151: IFFALSE 26155
// exit ;
26153: GO 26809
// for i := 1 to list do
26155: LD_ADDR_VAR 0 1
26159: PUSH
26160: DOUBLE
26161: LD_INT 1
26163: DEC
26164: ST_TO_ADDR
26165: LD_VAR 0 3
26169: PUSH
26170: FOR_TO
26171: IFFALSE 26807
// begin depot := list [ i ] [ 2 ] ;
26173: LD_ADDR_VAR 0 8
26177: PUSH
26178: LD_VAR 0 3
26182: PUSH
26183: LD_VAR 0 1
26187: ARRAY
26188: PUSH
26189: LD_INT 2
26191: ARRAY
26192: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26193: LD_ADDR_VAR 0 5
26197: PUSH
26198: LD_VAR 0 3
26202: PUSH
26203: LD_VAR 0 1
26207: ARRAY
26208: PUSH
26209: LD_INT 1
26211: ARRAY
26212: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26213: LD_VAR 0 8
26217: PPUSH
26218: CALL_OW 301
26222: IFTRUE 26241
26224: PUSH
26225: LD_VAR 0 5
26229: PUSH
26230: LD_VAR 0 8
26234: PPUSH
26235: CALL_OW 255
26239: NONEQUAL
26240: OR
26241: IFFALSE 26270
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26243: LD_ADDR_EXP 105
26247: PUSH
26248: LD_EXP 105
26252: PPUSH
26253: LD_VAR 0 8
26257: PPUSH
26258: LD_INT 0
26260: PPUSH
26261: CALL_OW 1
26265: ST_TO_ADDR
// exit ;
26266: POP
26267: POP
26268: GO 26809
// end ; x := list [ i ] [ 3 ] ;
26270: LD_ADDR_VAR 0 6
26274: PUSH
26275: LD_VAR 0 3
26279: PUSH
26280: LD_VAR 0 1
26284: ARRAY
26285: PUSH
26286: LD_INT 3
26288: ARRAY
26289: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26290: LD_ADDR_VAR 0 7
26294: PUSH
26295: LD_VAR 0 3
26299: PUSH
26300: LD_VAR 0 1
26304: ARRAY
26305: PUSH
26306: LD_INT 4
26308: ARRAY
26309: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26310: LD_ADDR_VAR 0 9
26314: PUSH
26315: LD_VAR 0 6
26319: PPUSH
26320: LD_VAR 0 7
26324: PPUSH
26325: LD_INT 16
26327: PPUSH
26328: CALL 74157 0 3
26332: ST_TO_ADDR
// if not cratesNearbyPoint then
26333: LD_VAR 0 9
26337: NOT
26338: IFFALSE 26344
// exit ;
26340: POP
26341: POP
26342: GO 26809
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26344: LD_ADDR_VAR 0 4
26348: PUSH
26349: LD_INT 22
26351: PUSH
26352: LD_VAR 0 5
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: LD_INT 60
26366: PUSH
26367: EMPTY
26368: LIST
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 91
26376: PUSH
26377: LD_VAR 0 8
26381: PUSH
26382: LD_INT 6
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: PUSH
26393: LD_INT 25
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 25
26405: PUSH
26406: LD_INT 16
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: LIST
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: PPUSH
26424: CALL_OW 69
26428: PUSH
26429: LD_VAR 0 8
26433: PPUSH
26434: CALL_OW 313
26438: PPUSH
26439: LD_INT 3
26441: PUSH
26442: LD_INT 60
26444: PUSH
26445: EMPTY
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: LD_INT 25
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 25
26467: PUSH
26468: LD_INT 16
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PPUSH
26484: CALL_OW 72
26488: UNION
26489: ST_TO_ADDR
// if tmp then
26490: LD_VAR 0 4
26494: IFFALSE 26574
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26496: LD_ADDR_VAR 0 4
26500: PUSH
26501: LD_VAR 0 4
26505: PPUSH
26506: LD_INT 3
26508: PPUSH
26509: CALL 71964 0 2
26513: ST_TO_ADDR
// for j in tmp do
26514: LD_ADDR_VAR 0 2
26518: PUSH
26519: LD_VAR 0 4
26523: PUSH
26524: FOR_IN
26525: IFFALSE 26568
// begin if IsInUnit ( j ) then
26527: LD_VAR 0 2
26531: PPUSH
26532: CALL_OW 310
26536: IFFALSE 26547
// ComExit ( j ) ;
26538: LD_VAR 0 2
26542: PPUSH
26543: CALL 72047 0 1
// AddComCollect ( j , x , y ) ;
26547: LD_VAR 0 2
26551: PPUSH
26552: LD_VAR 0 6
26556: PPUSH
26557: LD_VAR 0 7
26561: PPUSH
26562: CALL_OW 177
// end ;
26566: GO 26524
26568: POP
26569: POP
// exit ;
26570: POP
26571: POP
26572: GO 26809
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26574: LD_ADDR_VAR 0 4
26578: PUSH
26579: LD_INT 22
26581: PUSH
26582: LD_VAR 0 5
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 91
26593: PUSH
26594: LD_VAR 0 8
26598: PUSH
26599: LD_INT 8
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: LD_INT 34
26612: PUSH
26613: LD_INT 12
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 34
26622: PUSH
26623: LD_INT 51
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 34
26632: PUSH
26633: LD_INT 32
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 34
26642: PUSH
26643: LD_INT 89
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: LIST
26661: PPUSH
26662: CALL_OW 69
26666: ST_TO_ADDR
// if tmp then
26667: LD_VAR 0 4
26671: IFFALSE 26805
// begin for j in tmp do
26673: LD_ADDR_VAR 0 2
26677: PUSH
26678: LD_VAR 0 4
26682: PUSH
26683: FOR_IN
26684: IFFALSE 26803
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26686: LD_VAR 0 2
26690: PPUSH
26691: CALL_OW 262
26695: PUSH
26696: LD_INT 3
26698: EQUAL
26699: IFTRUE 26716
26701: PUSH
26702: LD_VAR 0 2
26706: PPUSH
26707: CALL_OW 261
26711: PUSH
26712: LD_INT 20
26714: GREATER
26715: OR
26716: IFFALSE 26730
26718: PUSH
26719: LD_VAR 0 2
26723: PPUSH
26724: CALL_OW 314
26728: NOT
26729: AND
26730: IFFALSE 26760
26732: PUSH
26733: LD_VAR 0 2
26737: PPUSH
26738: CALL_OW 263
26742: PUSH
26743: LD_INT 1
26745: NONEQUAL
26746: IFTRUE 26759
26748: PUSH
26749: LD_VAR 0 2
26753: PPUSH
26754: CALL_OW 311
26758: OR
26759: AND
26760: IFFALSE 26801
// begin ComCollect ( j , x , y ) ;
26762: LD_VAR 0 2
26766: PPUSH
26767: LD_VAR 0 6
26771: PPUSH
26772: LD_VAR 0 7
26776: PPUSH
26777: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26781: LD_VAR 0 2
26785: PPUSH
26786: LD_VAR 0 8
26790: PPUSH
26791: CALL_OW 172
// exit ;
26795: POP
26796: POP
26797: POP
26798: POP
26799: GO 26809
// end ;
26801: GO 26683
26803: POP
26804: POP
// end ; end ;
26805: GO 26170
26807: POP
26808: POP
// end ; end_of_file
26809: PPOPN 9
26811: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26812: LD_VAR 0 1
26816: PUSH
26817: LD_INT 200
26819: DOUBLE
26820: GREATEREQUAL
26821: IFFALSE 26829
26823: LD_INT 299
26825: DOUBLE
26826: LESSEQUAL
26827: IFTRUE 26831
26829: GO 26863
26831: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26832: LD_VAR 0 1
26836: PPUSH
26837: LD_VAR 0 2
26841: PPUSH
26842: LD_VAR 0 3
26846: PPUSH
26847: LD_VAR 0 4
26851: PPUSH
26852: LD_VAR 0 5
26856: PPUSH
26857: CALL 27725 0 5
26861: GO 26940
26863: LD_INT 300
26865: DOUBLE
26866: GREATEREQUAL
26867: IFFALSE 26875
26869: LD_INT 399
26871: DOUBLE
26872: LESSEQUAL
26873: IFTRUE 26877
26875: GO 26939
26877: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26878: LD_VAR 0 1
26882: PPUSH
26883: LD_VAR 0 2
26887: PPUSH
26888: LD_VAR 0 3
26892: PPUSH
26893: LD_VAR 0 4
26897: PPUSH
26898: LD_VAR 0 5
26902: PPUSH
26903: LD_VAR 0 6
26907: PPUSH
26908: LD_VAR 0 7
26912: PPUSH
26913: LD_VAR 0 8
26917: PPUSH
26918: LD_VAR 0 9
26922: PPUSH
26923: LD_VAR 0 10
26927: PPUSH
26928: LD_VAR 0 11
26932: PPUSH
26933: CALL 23365 0 11
26937: GO 26940
26939: POP
// end ;
26940: PPOPN 11
26942: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26943: LD_VAR 0 1
26947: PPUSH
26948: LD_VAR 0 2
26952: PPUSH
26953: LD_VAR 0 3
26957: PPUSH
26958: LD_VAR 0 4
26962: PPUSH
26963: LD_VAR 0 5
26967: PPUSH
26968: CALL 27025 0 5
// end ; end_of_file
26972: PPOPN 5
26974: END
// export function SOS_UnitDestroyed ( un ) ; begin
26975: LD_INT 0
26977: PPUSH
// ComRadiation ( un ) ;
26978: LD_VAR 0 1
26982: PPUSH
26983: CALL 28145 0 1
// end ;
26987: LD_VAR 0 2
26991: RET
// export function SOS_UnitKamikazed ( un ) ; begin
26992: LD_INT 0
26994: PPUSH
// ComRadiation ( un ) ;
26995: LD_VAR 0 1
26999: PPUSH
27000: CALL 28145 0 1
// end ;
27004: LD_VAR 0 2
27008: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27009: LD_INT 0
27011: PPUSH
// end ;
27012: LD_VAR 0 4
27016: RET
// export function SOS_Command ( cmd ) ; begin
27017: LD_INT 0
27019: PPUSH
// end ;
27020: LD_VAR 0 2
27024: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27025: LD_INT 0
27027: PPUSH
// end ;
27028: LD_VAR 0 6
27032: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
27033: LD_INT 0
27035: PPUSH
27036: PPUSH
27037: PPUSH
27038: PPUSH
27039: PPUSH
// if not vehicle or not factory then
27040: LD_VAR 0 1
27044: NOT
27045: IFTRUE 27054
27047: PUSH
27048: LD_VAR 0 2
27052: NOT
27053: OR
27054: IFFALSE 27058
// exit ;
27056: GO 27720
// weapon := GetWeapon ( vehicle ) ;
27058: LD_ADDR_VAR 0 7
27062: PUSH
27063: LD_VAR 0 1
27067: PPUSH
27068: CALL_OW 264
27072: ST_TO_ADDR
// if weapon = ar_miner then
27073: LD_VAR 0 7
27077: PUSH
27078: LD_INT 81
27080: EQUAL
27081: IFFALSE 27138
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
27083: LD_ADDR_EXP 114
27087: PUSH
27088: LD_EXP 114
27092: PPUSH
27093: LD_EXP 114
27097: PUSH
27098: LD_INT 1
27100: PLUS
27101: PPUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 1
27111: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27112: LD_ADDR_EXP 115
27116: PUSH
27117: LD_EXP 115
27121: PPUSH
27122: LD_EXP 115
27126: PUSH
27127: LD_INT 1
27129: PLUS
27130: PPUSH
27131: EMPTY
27132: PPUSH
27133: CALL_OW 1
27137: ST_TO_ADDR
// end ; if not factoryWaypoints then
27138: LD_EXP 103
27142: NOT
27143: IFFALSE 27147
// exit ;
27145: GO 27720
// for i := 1 to Count ( factoryWaypoints ) do
27147: LD_ADDR_VAR 0 4
27151: PUSH
27152: DOUBLE
27153: LD_INT 1
27155: DEC
27156: ST_TO_ADDR
27157: LD_EXP 103
27161: PPUSH
27162: CALL 35673 0 1
27166: PUSH
27167: FOR_TO
27168: IFFALSE 27718
// if factoryWaypoints [ i ] [ 2 ] = factory then
27170: LD_EXP 103
27174: PUSH
27175: LD_VAR 0 4
27179: ARRAY
27180: PUSH
27181: LD_INT 2
27183: ARRAY
27184: PUSH
27185: LD_VAR 0 2
27189: EQUAL
27190: IFFALSE 27716
// begin if GetControl ( vehicle ) = control_manual then
27192: LD_VAR 0 1
27196: PPUSH
27197: CALL_OW 263
27201: PUSH
27202: LD_INT 1
27204: EQUAL
27205: IFFALSE 27569
// begin driver := IsDrivenBy ( vehicle ) ;
27207: LD_ADDR_VAR 0 5
27211: PUSH
27212: LD_VAR 0 1
27216: PPUSH
27217: CALL_OW 311
27221: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27222: LD_VAR 0 5
27226: PUSH
27227: LD_EXP 104
27231: IN
27232: IFTRUE 27246
27234: PUSH
27235: LD_VAR 0 1
27239: PUSH
27240: LD_EXP 104
27244: IN
27245: OR
27246: IFFALSE 27252
// exit ;
27248: POP
27249: POP
27250: GO 27720
// if not HasTask ( driver ) then
27252: LD_VAR 0 5
27256: PPUSH
27257: CALL_OW 314
27261: NOT
27262: IFFALSE 27567
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27264: LD_ADDR_EXP 104
27268: PUSH
27269: LD_EXP 104
27273: PPUSH
27274: LD_VAR 0 5
27278: PPUSH
27279: CALL 71649 0 2
27283: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27284: LD_ADDR_EXP 104
27288: PUSH
27289: LD_EXP 104
27293: PPUSH
27294: LD_VAR 0 1
27298: PPUSH
27299: CALL 71649 0 2
27303: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27304: LD_ADDR_VAR 0 6
27308: PUSH
27309: LD_EXP 103
27313: PUSH
27314: LD_VAR 0 4
27318: ARRAY
27319: PUSH
27320: LD_INT 3
27322: ARRAY
27323: PPUSH
27324: LD_EXP 103
27328: PUSH
27329: LD_VAR 0 4
27333: ARRAY
27334: PUSH
27335: LD_INT 4
27337: ARRAY
27338: PPUSH
27339: CALL_OW 428
27343: ST_TO_ADDR
// if hex then
27344: LD_VAR 0 6
27348: IFFALSE 27366
// ComMoveUnit ( driver , hex ) else
27350: LD_VAR 0 5
27354: PPUSH
27355: LD_VAR 0 6
27359: PPUSH
27360: CALL_OW 112
27364: GO 27450
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27366: LD_VAR 0 1
27370: PPUSH
27371: LD_EXP 103
27375: PUSH
27376: LD_VAR 0 4
27380: ARRAY
27381: PUSH
27382: LD_INT 3
27384: ARRAY
27385: PPUSH
27386: LD_EXP 103
27390: PUSH
27391: LD_VAR 0 4
27395: ARRAY
27396: PUSH
27397: LD_INT 4
27399: ARRAY
27400: PPUSH
27401: CALL_OW 297
27405: PUSH
27406: LD_INT 0
27408: GREATER
27409: IFFALSE 27450
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27411: LD_VAR 0 5
27415: PPUSH
27416: LD_EXP 103
27420: PUSH
27421: LD_VAR 0 4
27425: ARRAY
27426: PUSH
27427: LD_INT 3
27429: ARRAY
27430: PPUSH
27431: LD_EXP 103
27435: PUSH
27436: LD_VAR 0 4
27440: ARRAY
27441: PUSH
27442: LD_INT 4
27444: ARRAY
27445: PPUSH
27446: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27450: LD_VAR 0 5
27454: PPUSH
27455: CALL_OW 181
// if Multiplayer then
27459: LD_OWVAR 4
27463: IFFALSE 27512
// begin repeat wait ( 10 ) ;
27465: LD_INT 10
27467: PPUSH
27468: CALL_OW 67
// until not IsInUnit ( driver ) ;
27472: LD_VAR 0 5
27476: PPUSH
27477: CALL_OW 310
27481: NOT
27482: IFFALSE 27465
// if not HasTask ( driver ) then
27484: LD_VAR 0 5
27488: PPUSH
27489: CALL_OW 314
27493: NOT
27494: IFFALSE 27510
// ComEnterUnit ( driver , factory ) ;
27496: LD_VAR 0 5
27500: PPUSH
27501: LD_VAR 0 2
27505: PPUSH
27506: CALL_OW 120
// end else
27510: GO 27526
// AddComEnterUnit ( driver , factory ) ;
27512: LD_VAR 0 5
27516: PPUSH
27517: LD_VAR 0 2
27521: PPUSH
27522: CALL_OW 180
// wait ( 0 0$1 ) ;
27526: LD_INT 35
27528: PPUSH
27529: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27533: LD_ADDR_EXP 104
27537: PUSH
27538: LD_EXP 104
27542: PUSH
27543: LD_VAR 0 5
27547: DIFF
27548: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27549: LD_ADDR_EXP 104
27553: PUSH
27554: LD_EXP 104
27558: PUSH
27559: LD_VAR 0 1
27563: DIFF
27564: ST_TO_ADDR
// break ;
27565: GO 27718
// end ; end else
27567: GO 27716
// if GetControl ( vehicle ) = control_remote then
27569: LD_VAR 0 1
27573: PPUSH
27574: CALL_OW 263
27578: PUSH
27579: LD_INT 2
27581: EQUAL
27582: IFFALSE 27668
// begin wait ( 0 0$2 ) ;
27584: LD_INT 70
27586: PPUSH
27587: CALL_OW 67
// repeat wait ( 10 ) ;
27591: LD_INT 10
27593: PPUSH
27594: CALL_OW 67
// Connect ( vehicle ) ;
27598: LD_VAR 0 1
27602: PPUSH
27603: CALL 41951 0 1
// until IsControledBy ( vehicle ) ;
27607: LD_VAR 0 1
27611: PPUSH
27612: CALL_OW 312
27616: IFFALSE 27591
// wait ( 10 ) ;
27618: LD_INT 10
27620: PPUSH
27621: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27625: LD_VAR 0 1
27629: PPUSH
27630: LD_EXP 103
27634: PUSH
27635: LD_VAR 0 4
27639: ARRAY
27640: PUSH
27641: LD_INT 3
27643: ARRAY
27644: PPUSH
27645: LD_EXP 103
27649: PUSH
27650: LD_VAR 0 4
27654: ARRAY
27655: PUSH
27656: LD_INT 4
27658: ARRAY
27659: PPUSH
27660: CALL_OW 111
// break ;
27664: GO 27718
// end else
27666: GO 27716
// begin wait ( 0 0$3 ) ;
27668: LD_INT 105
27670: PPUSH
27671: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27675: LD_VAR 0 1
27679: PPUSH
27680: LD_EXP 103
27684: PUSH
27685: LD_VAR 0 4
27689: ARRAY
27690: PUSH
27691: LD_INT 3
27693: ARRAY
27694: PPUSH
27695: LD_EXP 103
27699: PUSH
27700: LD_VAR 0 4
27704: ARRAY
27705: PUSH
27706: LD_INT 4
27708: ARRAY
27709: PPUSH
27710: CALL_OW 111
// break ;
27714: GO 27718
// end ; end ;
27716: GO 27167
27718: POP
27719: POP
// end ;
27720: LD_VAR 0 3
27724: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27725: LD_INT 0
27727: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27728: LD_VAR 0 1
27732: PUSH
27733: LD_INT 250
27735: EQUAL
27736: IFFALSE 27753
27738: PUSH
27739: LD_VAR 0 2
27743: PPUSH
27744: CALL_OW 264
27748: PUSH
27749: LD_INT 81
27751: EQUAL
27752: AND
27753: IFFALSE 27774
// MinerPlaceMine ( unit , x , y ) ;
27755: LD_VAR 0 2
27759: PPUSH
27760: LD_VAR 0 4
27764: PPUSH
27765: LD_VAR 0 5
27769: PPUSH
27770: CALL 31120 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27774: LD_VAR 0 1
27778: PUSH
27779: LD_INT 251
27781: EQUAL
27782: IFFALSE 27799
27784: PUSH
27785: LD_VAR 0 2
27789: PPUSH
27790: CALL_OW 264
27794: PUSH
27795: LD_INT 81
27797: EQUAL
27798: AND
27799: IFFALSE 27820
// MinerDetonateMine ( unit , x , y ) ;
27801: LD_VAR 0 2
27805: PPUSH
27806: LD_VAR 0 4
27810: PPUSH
27811: LD_VAR 0 5
27815: PPUSH
27816: CALL 31527 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27820: LD_VAR 0 1
27824: PUSH
27825: LD_INT 252
27827: EQUAL
27828: IFFALSE 27845
27830: PUSH
27831: LD_VAR 0 2
27835: PPUSH
27836: CALL_OW 264
27840: PUSH
27841: LD_INT 81
27843: EQUAL
27844: AND
27845: IFFALSE 27866
// MinerCreateMinefield ( unit , x , y ) ;
27847: LD_VAR 0 2
27851: PPUSH
27852: LD_VAR 0 4
27856: PPUSH
27857: LD_VAR 0 5
27861: PPUSH
27862: CALL 31759 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27866: LD_VAR 0 1
27870: PUSH
27871: LD_INT 253
27873: EQUAL
27874: IFFALSE 27891
27876: PUSH
27877: LD_VAR 0 2
27881: PPUSH
27882: CALL_OW 257
27886: PUSH
27887: LD_INT 5
27889: EQUAL
27890: AND
27891: IFFALSE 27912
// ComBinocular ( unit , x , y ) ;
27893: LD_VAR 0 2
27897: PPUSH
27898: LD_VAR 0 4
27902: PPUSH
27903: LD_VAR 0 5
27907: PPUSH
27908: CALL 32134 0 3
// if selectedUnit then
27912: LD_VAR 0 3
27916: IFFALSE 27976
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27918: LD_VAR 0 1
27922: PUSH
27923: LD_INT 254
27925: EQUAL
27926: IFFALSE 27943
27928: PUSH
27929: LD_VAR 0 2
27933: PPUSH
27934: CALL_OW 264
27938: PUSH
27939: LD_INT 99
27941: EQUAL
27942: AND
27943: IFFALSE 27960
27945: PUSH
27946: LD_VAR 0 3
27950: PPUSH
27951: CALL_OW 263
27955: PUSH
27956: LD_INT 3
27958: EQUAL
27959: AND
27960: IFFALSE 27976
// HackDestroyVehicle ( unit , selectedUnit ) ;
27962: LD_VAR 0 2
27966: PPUSH
27967: LD_VAR 0 3
27971: PPUSH
27972: CALL 30310 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27976: LD_VAR 0 1
27980: PUSH
27981: LD_INT 255
27983: EQUAL
27984: IFFALSE 28008
27986: PUSH
27987: LD_VAR 0 2
27991: PPUSH
27992: CALL_OW 264
27996: PUSH
27997: LD_INT 14
27999: PUSH
28000: LD_INT 53
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: IN
28007: AND
28008: IFFALSE 28026
28010: PUSH
28011: LD_VAR 0 4
28015: PPUSH
28016: LD_VAR 0 5
28020: PPUSH
28021: CALL_OW 488
28025: AND
28026: IFFALSE 28050
// CutTreeXYR ( unit , x , y , 12 ) ;
28028: LD_VAR 0 2
28032: PPUSH
28033: LD_VAR 0 4
28037: PPUSH
28038: LD_VAR 0 5
28042: PPUSH
28043: LD_INT 12
28045: PPUSH
28046: CALL 28241 0 4
// if cmd = 256 then
28050: LD_VAR 0 1
28054: PUSH
28055: LD_INT 256
28057: EQUAL
28058: IFFALSE 28079
// SetFactoryWaypoint ( unit , x , y ) ;
28060: LD_VAR 0 2
28064: PPUSH
28065: LD_VAR 0 4
28069: PPUSH
28070: LD_VAR 0 5
28074: PPUSH
28075: CALL 25357 0 3
// if cmd = 257 then
28079: LD_VAR 0 1
28083: PUSH
28084: LD_INT 257
28086: EQUAL
28087: IFFALSE 28108
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28089: LD_VAR 0 2
28093: PPUSH
28094: LD_VAR 0 4
28098: PPUSH
28099: LD_VAR 0 5
28103: PPUSH
28104: CALL 25853 0 3
// if cmd = 258 then
28108: LD_VAR 0 1
28112: PUSH
28113: LD_INT 258
28115: EQUAL
28116: IFFALSE 28140
// BurnTreeXYR ( unit , x , y , 8 ) ;
28118: LD_VAR 0 2
28122: PPUSH
28123: LD_VAR 0 4
28127: PPUSH
28128: LD_VAR 0 5
28132: PPUSH
28133: LD_INT 8
28135: PPUSH
28136: CALL 28663 0 4
// end ;
28140: LD_VAR 0 6
28144: RET
// export function ComRadiation ( un ) ; var eff ; begin
28145: LD_INT 0
28147: PPUSH
28148: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28149: LD_VAR 0 1
28153: PPUSH
28154: CALL_OW 264
28158: PUSH
28159: LD_INT 91
28161: NONEQUAL
28162: IFFALSE 28166
// exit ;
28164: GO 28236
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28166: LD_INT 68
28168: PPUSH
28169: LD_VAR 0 1
28173: PPUSH
28174: CALL_OW 255
28178: PPUSH
28179: CALL_OW 321
28183: PUSH
28184: LD_INT 2
28186: EQUAL
28187: IFFALSE 28199
// eff := 50 else
28189: LD_ADDR_VAR 0 3
28193: PUSH
28194: LD_INT 50
28196: ST_TO_ADDR
28197: GO 28207
// eff := 25 ;
28199: LD_ADDR_VAR 0 3
28203: PUSH
28204: LD_INT 25
28206: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28207: LD_VAR 0 1
28211: PPUSH
28212: CALL_OW 250
28216: PPUSH
28217: LD_VAR 0 1
28221: PPUSH
28222: CALL_OW 251
28226: PPUSH
28227: LD_VAR 0 3
28231: PPUSH
28232: CALL_OW 495
// end ;
28236: LD_VAR 0 2
28240: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28241: LD_INT 0
28243: PPUSH
28244: PPUSH
28245: PPUSH
28246: PPUSH
28247: PPUSH
28248: PPUSH
28249: PPUSH
28250: PPUSH
28251: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28252: LD_VAR 0 1
28256: PPUSH
28257: CALL_OW 302
28261: NOT
28262: IFTRUE 28281
28264: PUSH
28265: LD_VAR 0 2
28269: PPUSH
28270: LD_VAR 0 3
28274: PPUSH
28275: CALL_OW 488
28279: NOT
28280: OR
28281: IFTRUE 28290
28283: PUSH
28284: LD_VAR 0 4
28288: NOT
28289: OR
28290: IFFALSE 28294
// exit ;
28292: GO 28658
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
28294: LD_VAR 0 1
28298: PPUSH
28299: CALL_OW 437
28303: PPUSH
28304: CALL 35673 0 1
28308: PUSH
28309: LD_INT 10
28311: GREATER
28312: IFFALSE 28316
// exit ;
28314: GO 28658
// list := [ ] ;
28316: LD_ADDR_VAR 0 13
28320: PUSH
28321: EMPTY
28322: ST_TO_ADDR
// if x - r < 0 then
28323: LD_VAR 0 2
28327: PUSH
28328: LD_VAR 0 4
28332: MINUS
28333: PUSH
28334: LD_INT 0
28336: LESS
28337: IFFALSE 28349
// min_x := 0 else
28339: LD_ADDR_VAR 0 7
28343: PUSH
28344: LD_INT 0
28346: ST_TO_ADDR
28347: GO 28365
// min_x := x - r ;
28349: LD_ADDR_VAR 0 7
28353: PUSH
28354: LD_VAR 0 2
28358: PUSH
28359: LD_VAR 0 4
28363: MINUS
28364: ST_TO_ADDR
// if y - r < 0 then
28365: LD_VAR 0 3
28369: PUSH
28370: LD_VAR 0 4
28374: MINUS
28375: PUSH
28376: LD_INT 0
28378: LESS
28379: IFFALSE 28391
// min_y := 0 else
28381: LD_ADDR_VAR 0 8
28385: PUSH
28386: LD_INT 0
28388: ST_TO_ADDR
28389: GO 28407
// min_y := y - r ;
28391: LD_ADDR_VAR 0 8
28395: PUSH
28396: LD_VAR 0 3
28400: PUSH
28401: LD_VAR 0 4
28405: MINUS
28406: ST_TO_ADDR
// max_x := x + r ;
28407: LD_ADDR_VAR 0 9
28411: PUSH
28412: LD_VAR 0 2
28416: PUSH
28417: LD_VAR 0 4
28421: PLUS
28422: ST_TO_ADDR
// max_y := y + r ;
28423: LD_ADDR_VAR 0 10
28427: PUSH
28428: LD_VAR 0 3
28432: PUSH
28433: LD_VAR 0 4
28437: PLUS
28438: ST_TO_ADDR
// for _x = min_x to max_x do
28439: LD_ADDR_VAR 0 11
28443: PUSH
28444: DOUBLE
28445: LD_VAR 0 7
28449: DEC
28450: ST_TO_ADDR
28451: LD_VAR 0 9
28455: PUSH
28456: FOR_TO
28457: IFFALSE 28576
// for _y = min_y to max_y do
28459: LD_ADDR_VAR 0 12
28463: PUSH
28464: DOUBLE
28465: LD_VAR 0 8
28469: DEC
28470: ST_TO_ADDR
28471: LD_VAR 0 10
28475: PUSH
28476: FOR_TO
28477: IFFALSE 28572
// begin if not ValidHex ( _x , _y ) then
28479: LD_VAR 0 11
28483: PPUSH
28484: LD_VAR 0 12
28488: PPUSH
28489: CALL_OW 488
28493: NOT
28494: IFFALSE 28498
// continue ;
28496: GO 28476
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28498: LD_VAR 0 11
28502: PPUSH
28503: LD_VAR 0 12
28507: PPUSH
28508: CALL_OW 351
28512: IFFALSE 28530
28514: PUSH
28515: LD_VAR 0 11
28519: PPUSH
28520: LD_VAR 0 12
28524: PPUSH
28525: CALL_OW 554
28529: AND
28530: IFFALSE 28570
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28532: LD_ADDR_VAR 0 13
28536: PUSH
28537: LD_VAR 0 13
28541: PPUSH
28542: LD_VAR 0 13
28546: PUSH
28547: LD_INT 1
28549: PLUS
28550: PPUSH
28551: LD_VAR 0 11
28555: PUSH
28556: LD_VAR 0 12
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PPUSH
28565: CALL_OW 2
28569: ST_TO_ADDR
// end ;
28570: GO 28476
28572: POP
28573: POP
28574: GO 28456
28576: POP
28577: POP
// if not list then
28578: LD_VAR 0 13
28582: NOT
28583: IFFALSE 28587
// exit ;
28585: GO 28658
// for i in list do
28587: LD_ADDR_VAR 0 6
28591: PUSH
28592: LD_VAR 0 13
28596: PUSH
28597: FOR_IN
28598: IFFALSE 28656
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28600: LD_VAR 0 1
28604: PPUSH
28605: LD_STRING M
28607: PUSH
28608: LD_VAR 0 6
28612: PUSH
28613: LD_INT 1
28615: ARRAY
28616: PUSH
28617: LD_VAR 0 6
28621: PUSH
28622: LD_INT 2
28624: ARRAY
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: PPUSH
28650: CALL_OW 447
28654: GO 28597
28656: POP
28657: POP
// end ;
28658: LD_VAR 0 5
28662: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28663: LD_INT 0
28665: PPUSH
28666: PPUSH
28667: PPUSH
28668: PPUSH
28669: PPUSH
28670: PPUSH
28671: PPUSH
28672: PPUSH
28673: PPUSH
28674: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28675: LD_VAR 0 1
28679: PPUSH
28680: CALL_OW 302
28684: NOT
28685: IFTRUE 28704
28687: PUSH
28688: LD_VAR 0 2
28692: PPUSH
28693: LD_VAR 0 3
28697: PPUSH
28698: CALL_OW 488
28702: NOT
28703: OR
28704: IFTRUE 28713
28706: PUSH
28707: LD_VAR 0 4
28711: NOT
28712: OR
28713: IFFALSE 28717
// exit ;
28715: GO 29256
// if Count ( GetTaskList ( flame ) ) > 10 then
28717: LD_VAR 0 1
28721: PPUSH
28722: CALL_OW 437
28726: PPUSH
28727: CALL 35673 0 1
28731: PUSH
28732: LD_INT 10
28734: GREATER
28735: IFFALSE 28739
// exit ;
28737: GO 29256
// list := [ ] ;
28739: LD_ADDR_VAR 0 13
28743: PUSH
28744: EMPTY
28745: ST_TO_ADDR
// if x - r < 0 then
28746: LD_VAR 0 2
28750: PUSH
28751: LD_VAR 0 4
28755: MINUS
28756: PUSH
28757: LD_INT 0
28759: LESS
28760: IFFALSE 28772
// min_x := 0 else
28762: LD_ADDR_VAR 0 7
28766: PUSH
28767: LD_INT 0
28769: ST_TO_ADDR
28770: GO 28788
// min_x := x - r ;
28772: LD_ADDR_VAR 0 7
28776: PUSH
28777: LD_VAR 0 2
28781: PUSH
28782: LD_VAR 0 4
28786: MINUS
28787: ST_TO_ADDR
// if y - r < 0 then
28788: LD_VAR 0 3
28792: PUSH
28793: LD_VAR 0 4
28797: MINUS
28798: PUSH
28799: LD_INT 0
28801: LESS
28802: IFFALSE 28814
// min_y := 0 else
28804: LD_ADDR_VAR 0 8
28808: PUSH
28809: LD_INT 0
28811: ST_TO_ADDR
28812: GO 28830
// min_y := y - r ;
28814: LD_ADDR_VAR 0 8
28818: PUSH
28819: LD_VAR 0 3
28823: PUSH
28824: LD_VAR 0 4
28828: MINUS
28829: ST_TO_ADDR
// max_x := x + r ;
28830: LD_ADDR_VAR 0 9
28834: PUSH
28835: LD_VAR 0 2
28839: PUSH
28840: LD_VAR 0 4
28844: PLUS
28845: ST_TO_ADDR
// max_y := y + r ;
28846: LD_ADDR_VAR 0 10
28850: PUSH
28851: LD_VAR 0 3
28855: PUSH
28856: LD_VAR 0 4
28860: PLUS
28861: ST_TO_ADDR
// for _x = min_x to max_x do
28862: LD_ADDR_VAR 0 11
28866: PUSH
28867: DOUBLE
28868: LD_VAR 0 7
28872: DEC
28873: ST_TO_ADDR
28874: LD_VAR 0 9
28878: PUSH
28879: FOR_TO
28880: IFFALSE 28999
// for _y = min_y to max_y do
28882: LD_ADDR_VAR 0 12
28886: PUSH
28887: DOUBLE
28888: LD_VAR 0 8
28892: DEC
28893: ST_TO_ADDR
28894: LD_VAR 0 10
28898: PUSH
28899: FOR_TO
28900: IFFALSE 28995
// begin if not ValidHex ( _x , _y ) then
28902: LD_VAR 0 11
28906: PPUSH
28907: LD_VAR 0 12
28911: PPUSH
28912: CALL_OW 488
28916: NOT
28917: IFFALSE 28921
// continue ;
28919: GO 28899
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28921: LD_VAR 0 11
28925: PPUSH
28926: LD_VAR 0 12
28930: PPUSH
28931: CALL_OW 351
28935: IFFALSE 28953
28937: PUSH
28938: LD_VAR 0 11
28942: PPUSH
28943: LD_VAR 0 12
28947: PPUSH
28948: CALL_OW 554
28952: AND
28953: IFFALSE 28993
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28955: LD_ADDR_VAR 0 13
28959: PUSH
28960: LD_VAR 0 13
28964: PPUSH
28965: LD_VAR 0 13
28969: PUSH
28970: LD_INT 1
28972: PLUS
28973: PPUSH
28974: LD_VAR 0 11
28978: PUSH
28979: LD_VAR 0 12
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PPUSH
28988: CALL_OW 2
28992: ST_TO_ADDR
// end ;
28993: GO 28899
28995: POP
28996: POP
28997: GO 28879
28999: POP
29000: POP
// if not list then
29001: LD_VAR 0 13
29005: NOT
29006: IFFALSE 29010
// exit ;
29008: GO 29256
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29010: LD_ADDR_VAR 0 13
29014: PUSH
29015: LD_VAR 0 1
29019: PPUSH
29020: LD_VAR 0 13
29024: PPUSH
29025: LD_INT 1
29027: PPUSH
29028: LD_INT 1
29030: PPUSH
29031: CALL 39079 0 4
29035: ST_TO_ADDR
// ComStop ( flame ) ;
29036: LD_VAR 0 1
29040: PPUSH
29041: CALL_OW 141
// for i in list do
29045: LD_ADDR_VAR 0 6
29049: PUSH
29050: LD_VAR 0 13
29054: PUSH
29055: FOR_IN
29056: IFFALSE 29087
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29058: LD_VAR 0 1
29062: PPUSH
29063: LD_VAR 0 6
29067: PUSH
29068: LD_INT 1
29070: ARRAY
29071: PPUSH
29072: LD_VAR 0 6
29076: PUSH
29077: LD_INT 2
29079: ARRAY
29080: PPUSH
29081: CALL_OW 176
29085: GO 29055
29087: POP
29088: POP
// repeat wait ( 0 0$1 ) ;
29089: LD_INT 35
29091: PPUSH
29092: CALL_OW 67
// task := GetTaskList ( flame ) ;
29096: LD_ADDR_VAR 0 14
29100: PUSH
29101: LD_VAR 0 1
29105: PPUSH
29106: CALL_OW 437
29110: ST_TO_ADDR
// if not task then
29111: LD_VAR 0 14
29115: NOT
29116: IFFALSE 29120
// exit ;
29118: GO 29256
// if task [ 1 ] [ 1 ] <> | then
29120: LD_VAR 0 14
29124: PUSH
29125: LD_INT 1
29127: ARRAY
29128: PUSH
29129: LD_INT 1
29131: ARRAY
29132: PUSH
29133: LD_STRING |
29135: NONEQUAL
29136: IFFALSE 29140
// exit ;
29138: GO 29256
// _x := task [ 1 ] [ 2 ] ;
29140: LD_ADDR_VAR 0 11
29144: PUSH
29145: LD_VAR 0 14
29149: PUSH
29150: LD_INT 1
29152: ARRAY
29153: PUSH
29154: LD_INT 2
29156: ARRAY
29157: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29158: LD_ADDR_VAR 0 12
29162: PUSH
29163: LD_VAR 0 14
29167: PUSH
29168: LD_INT 1
29170: ARRAY
29171: PUSH
29172: LD_INT 3
29174: ARRAY
29175: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29176: LD_VAR 0 11
29180: PPUSH
29181: LD_VAR 0 12
29185: PPUSH
29186: CALL_OW 351
29190: NOT
29191: IFTRUE 29210
29193: PUSH
29194: LD_VAR 0 11
29198: PPUSH
29199: LD_VAR 0 12
29203: PPUSH
29204: CALL_OW 554
29208: NOT
29209: OR
29210: IFFALSE 29244
// begin task := Delete ( task , 1 ) ;
29212: LD_ADDR_VAR 0 14
29216: PUSH
29217: LD_VAR 0 14
29221: PPUSH
29222: LD_INT 1
29224: PPUSH
29225: CALL_OW 3
29229: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29230: LD_VAR 0 1
29234: PPUSH
29235: LD_VAR 0 14
29239: PPUSH
29240: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29244: LD_VAR 0 1
29248: PPUSH
29249: CALL_OW 314
29253: NOT
29254: IFFALSE 29089
// end ;
29256: LD_VAR 0 5
29260: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29261: LD_EXP 107
29265: NOT
29266: IFFALSE 29316
29268: GO 29270
29270: DISABLE
// begin initHack := true ;
29271: LD_ADDR_EXP 107
29275: PUSH
29276: LD_INT 1
29278: ST_TO_ADDR
// hackTanks := [ ] ;
29279: LD_ADDR_EXP 108
29283: PUSH
29284: EMPTY
29285: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29286: LD_ADDR_EXP 109
29290: PUSH
29291: EMPTY
29292: ST_TO_ADDR
// hackLimit := 3 ;
29293: LD_ADDR_EXP 110
29297: PUSH
29298: LD_INT 3
29300: ST_TO_ADDR
// hackDist := 12 ;
29301: LD_ADDR_EXP 111
29305: PUSH
29306: LD_INT 12
29308: ST_TO_ADDR
// hackCounter := [ ] ;
29309: LD_ADDR_EXP 112
29313: PUSH
29314: EMPTY
29315: ST_TO_ADDR
// end ;
29316: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29317: LD_EXP 107
29321: IFFALSE 29339
29323: PUSH
29324: LD_INT 34
29326: PUSH
29327: LD_INT 99
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PPUSH
29334: CALL_OW 69
29338: AND
29339: IFFALSE 29592
29341: GO 29343
29343: DISABLE
29344: LD_INT 0
29346: PPUSH
29347: PPUSH
// begin enable ;
29348: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29349: LD_ADDR_VAR 0 1
29353: PUSH
29354: LD_INT 34
29356: PUSH
29357: LD_INT 99
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PPUSH
29364: CALL_OW 69
29368: PUSH
29369: FOR_IN
29370: IFFALSE 29590
// begin if not i in hackTanks then
29372: LD_VAR 0 1
29376: PUSH
29377: LD_EXP 108
29381: IN
29382: NOT
29383: IFFALSE 29466
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29385: LD_ADDR_EXP 108
29389: PUSH
29390: LD_EXP 108
29394: PPUSH
29395: LD_EXP 108
29399: PUSH
29400: LD_INT 1
29402: PLUS
29403: PPUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 1
29413: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29414: LD_ADDR_EXP 109
29418: PUSH
29419: LD_EXP 109
29423: PPUSH
29424: LD_EXP 109
29428: PUSH
29429: LD_INT 1
29431: PLUS
29432: PPUSH
29433: EMPTY
29434: PPUSH
29435: CALL_OW 1
29439: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29440: LD_ADDR_EXP 112
29444: PUSH
29445: LD_EXP 112
29449: PPUSH
29450: LD_EXP 112
29454: PUSH
29455: LD_INT 1
29457: PLUS
29458: PPUSH
29459: EMPTY
29460: PPUSH
29461: CALL_OW 1
29465: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29466: LD_VAR 0 1
29470: PPUSH
29471: CALL_OW 302
29475: NOT
29476: IFFALSE 29489
// begin HackUnlinkAll ( i ) ;
29478: LD_VAR 0 1
29482: PPUSH
29483: CALL 29595 0 1
// continue ;
29487: GO 29369
// end ; HackCheckCapturedStatus ( i ) ;
29489: LD_VAR 0 1
29493: PPUSH
29494: CALL 30040 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29498: LD_ADDR_VAR 0 2
29502: PUSH
29503: LD_INT 81
29505: PUSH
29506: LD_VAR 0 1
29510: PPUSH
29511: CALL_OW 255
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 33
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 91
29532: PUSH
29533: LD_VAR 0 1
29537: PUSH
29538: LD_EXP 111
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 50
29550: PUSH
29551: EMPTY
29552: LIST
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: PPUSH
29560: CALL_OW 69
29564: ST_TO_ADDR
// if not tmp then
29565: LD_VAR 0 2
29569: NOT
29570: IFFALSE 29574
// continue ;
29572: GO 29369
// HackLink ( i , tmp ) ;
29574: LD_VAR 0 1
29578: PPUSH
29579: LD_VAR 0 2
29583: PPUSH
29584: CALL 29731 0 2
// end ;
29588: GO 29369
29590: POP
29591: POP
// end ;
29592: PPOPN 2
29594: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29595: LD_INT 0
29597: PPUSH
29598: PPUSH
29599: PPUSH
// if not hack in hackTanks then
29600: LD_VAR 0 1
29604: PUSH
29605: LD_EXP 108
29609: IN
29610: NOT
29611: IFFALSE 29615
// exit ;
29613: GO 29726
// index := GetElementIndex ( hackTanks , hack ) ;
29615: LD_ADDR_VAR 0 4
29619: PUSH
29620: LD_EXP 108
29624: PPUSH
29625: LD_VAR 0 1
29629: PPUSH
29630: CALL 38374 0 2
29634: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29635: LD_EXP 109
29639: PUSH
29640: LD_VAR 0 4
29644: ARRAY
29645: IFFALSE 29726
// begin for i in hackTanksCaptured [ index ] do
29647: LD_ADDR_VAR 0 3
29651: PUSH
29652: LD_EXP 109
29656: PUSH
29657: LD_VAR 0 4
29661: ARRAY
29662: PUSH
29663: FOR_IN
29664: IFFALSE 29690
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29666: LD_VAR 0 3
29670: PUSH
29671: LD_INT 1
29673: ARRAY
29674: PPUSH
29675: LD_VAR 0 3
29679: PUSH
29680: LD_INT 2
29682: ARRAY
29683: PPUSH
29684: CALL_OW 235
29688: GO 29663
29690: POP
29691: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29692: LD_ADDR_EXP 109
29696: PUSH
29697: LD_EXP 109
29701: PPUSH
29702: LD_VAR 0 4
29706: PPUSH
29707: EMPTY
29708: PPUSH
29709: CALL_OW 1
29713: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_INT 0
29721: PPUSH
29722: CALL_OW 505
// end ; end ;
29726: LD_VAR 0 2
29730: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29731: LD_INT 0
29733: PPUSH
29734: PPUSH
29735: PPUSH
// if not hack in hackTanks or not vehicles then
29736: LD_VAR 0 1
29740: PUSH
29741: LD_EXP 108
29745: IN
29746: NOT
29747: IFTRUE 29756
29749: PUSH
29750: LD_VAR 0 2
29754: NOT
29755: OR
29756: IFFALSE 29760
// exit ;
29758: GO 30035
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29760: LD_ADDR_VAR 0 2
29764: PUSH
29765: LD_VAR 0 1
29769: PPUSH
29770: LD_VAR 0 2
29774: PPUSH
29775: LD_INT 1
29777: PPUSH
29778: LD_INT 1
29780: PPUSH
29781: CALL 39026 0 4
29785: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29786: LD_ADDR_VAR 0 5
29790: PUSH
29791: LD_EXP 108
29795: PPUSH
29796: LD_VAR 0 1
29800: PPUSH
29801: CALL 38374 0 2
29805: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29806: LD_EXP 109
29810: PUSH
29811: LD_VAR 0 5
29815: ARRAY
29816: PUSH
29817: LD_EXP 110
29821: LESS
29822: IFFALSE 30011
// begin for i := 1 to vehicles do
29824: LD_ADDR_VAR 0 4
29828: PUSH
29829: DOUBLE
29830: LD_INT 1
29832: DEC
29833: ST_TO_ADDR
29834: LD_VAR 0 2
29838: PUSH
29839: FOR_TO
29840: IFFALSE 30009
// begin if hackTanksCaptured [ index ] = hackLimit then
29842: LD_EXP 109
29846: PUSH
29847: LD_VAR 0 5
29851: ARRAY
29852: PUSH
29853: LD_EXP 110
29857: EQUAL
29858: IFFALSE 29862
// break ;
29860: GO 30009
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29862: LD_ADDR_EXP 112
29866: PUSH
29867: LD_EXP 112
29871: PPUSH
29872: LD_VAR 0 5
29876: PPUSH
29877: LD_EXP 112
29881: PUSH
29882: LD_VAR 0 5
29886: ARRAY
29887: PUSH
29888: LD_INT 1
29890: PLUS
29891: PPUSH
29892: CALL_OW 1
29896: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29897: LD_ADDR_EXP 109
29901: PUSH
29902: LD_EXP 109
29906: PPUSH
29907: LD_VAR 0 5
29911: PUSH
29912: LD_EXP 109
29916: PUSH
29917: LD_VAR 0 5
29921: ARRAY
29922: PUSH
29923: LD_INT 1
29925: PLUS
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PPUSH
29931: LD_VAR 0 2
29935: PUSH
29936: LD_VAR 0 4
29940: ARRAY
29941: PUSH
29942: LD_VAR 0 2
29946: PUSH
29947: LD_VAR 0 4
29951: ARRAY
29952: PPUSH
29953: CALL_OW 255
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PPUSH
29962: CALL 38591 0 3
29966: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29967: LD_VAR 0 2
29971: PUSH
29972: LD_VAR 0 4
29976: ARRAY
29977: PPUSH
29978: LD_VAR 0 1
29982: PPUSH
29983: CALL_OW 255
29987: PPUSH
29988: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29992: LD_VAR 0 2
29996: PUSH
29997: LD_VAR 0 4
30001: ARRAY
30002: PPUSH
30003: CALL_OW 141
// end ;
30007: GO 29839
30009: POP
30010: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30011: LD_VAR 0 1
30015: PPUSH
30016: LD_EXP 109
30020: PUSH
30021: LD_VAR 0 5
30025: ARRAY
30026: PUSH
30027: LD_INT 0
30029: PLUS
30030: PPUSH
30031: CALL_OW 505
// end ;
30035: LD_VAR 0 3
30039: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30040: LD_INT 0
30042: PPUSH
30043: PPUSH
30044: PPUSH
30045: PPUSH
// if not hack in hackTanks then
30046: LD_VAR 0 1
30050: PUSH
30051: LD_EXP 108
30055: IN
30056: NOT
30057: IFFALSE 30061
// exit ;
30059: GO 30305
// index := GetElementIndex ( hackTanks , hack ) ;
30061: LD_ADDR_VAR 0 4
30065: PUSH
30066: LD_EXP 108
30070: PPUSH
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL 38374 0 2
30080: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30081: LD_ADDR_VAR 0 3
30085: PUSH
30086: DOUBLE
30087: LD_EXP 109
30091: PUSH
30092: LD_VAR 0 4
30096: ARRAY
30097: INC
30098: ST_TO_ADDR
30099: LD_INT 1
30101: PUSH
30102: FOR_DOWNTO
30103: IFFALSE 30279
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30105: LD_ADDR_VAR 0 5
30109: PUSH
30110: LD_EXP 109
30114: PUSH
30115: LD_VAR 0 4
30119: ARRAY
30120: PUSH
30121: LD_VAR 0 3
30125: ARRAY
30126: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30127: LD_VAR 0 5
30131: PUSH
30132: LD_INT 1
30134: ARRAY
30135: PPUSH
30136: CALL_OW 302
30140: NOT
30141: IFTRUE 30169
30143: PUSH
30144: LD_VAR 0 5
30148: PUSH
30149: LD_INT 1
30151: ARRAY
30152: PPUSH
30153: CALL_OW 255
30157: PUSH
30158: LD_VAR 0 1
30162: PPUSH
30163: CALL_OW 255
30167: NONEQUAL
30168: OR
30169: IFFALSE 30277
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30171: LD_VAR 0 5
30175: PUSH
30176: LD_INT 1
30178: ARRAY
30179: PPUSH
30180: CALL_OW 305
30184: IFFALSE 30212
30186: PUSH
30187: LD_VAR 0 5
30191: PUSH
30192: LD_INT 1
30194: ARRAY
30195: PPUSH
30196: CALL_OW 255
30200: PUSH
30201: LD_VAR 0 1
30205: PPUSH
30206: CALL_OW 255
30210: EQUAL
30211: AND
30212: IFFALSE 30236
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30214: LD_VAR 0 5
30218: PUSH
30219: LD_INT 1
30221: ARRAY
30222: PPUSH
30223: LD_VAR 0 5
30227: PUSH
30228: LD_INT 2
30230: ARRAY
30231: PPUSH
30232: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30236: LD_ADDR_EXP 109
30240: PUSH
30241: LD_EXP 109
30245: PPUSH
30246: LD_VAR 0 4
30250: PPUSH
30251: LD_EXP 109
30255: PUSH
30256: LD_VAR 0 4
30260: ARRAY
30261: PPUSH
30262: LD_VAR 0 3
30266: PPUSH
30267: CALL_OW 3
30271: PPUSH
30272: CALL_OW 1
30276: ST_TO_ADDR
// end ; end ;
30277: GO 30102
30279: POP
30280: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30281: LD_VAR 0 1
30285: PPUSH
30286: LD_EXP 109
30290: PUSH
30291: LD_VAR 0 4
30295: ARRAY
30296: PUSH
30297: LD_INT 0
30299: PLUS
30300: PPUSH
30301: CALL_OW 505
// end ;
30305: LD_VAR 0 2
30309: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30310: LD_INT 0
30312: PPUSH
30313: PPUSH
30314: PPUSH
30315: PPUSH
// if not hack in hackTanks then
30316: LD_VAR 0 1
30320: PUSH
30321: LD_EXP 108
30325: IN
30326: NOT
30327: IFFALSE 30331
// exit ;
30329: GO 30416
// index := GetElementIndex ( hackTanks , hack ) ;
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_EXP 108
30340: PPUSH
30341: LD_VAR 0 1
30345: PPUSH
30346: CALL 38374 0 2
30350: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30351: LD_ADDR_VAR 0 4
30355: PUSH
30356: DOUBLE
30357: LD_INT 1
30359: DEC
30360: ST_TO_ADDR
30361: LD_EXP 109
30365: PUSH
30366: LD_VAR 0 5
30370: ARRAY
30371: PUSH
30372: FOR_TO
30373: IFFALSE 30414
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30375: LD_EXP 109
30379: PUSH
30380: LD_VAR 0 5
30384: ARRAY
30385: PUSH
30386: LD_VAR 0 4
30390: ARRAY
30391: PUSH
30392: LD_INT 1
30394: ARRAY
30395: PUSH
30396: LD_VAR 0 2
30400: EQUAL
30401: IFFALSE 30412
// KillUnit ( vehicle ) ;
30403: LD_VAR 0 2
30407: PPUSH
30408: CALL_OW 66
30412: GO 30372
30414: POP
30415: POP
// end ;
30416: LD_VAR 0 3
30420: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
30421: LD_EXP 113
30425: NOT
30426: IFFALSE 30559
30428: GO 30430
30430: DISABLE
30431: LD_INT 0
30433: PPUSH
// begin initMiner := true ;
30434: LD_ADDR_EXP 113
30438: PUSH
30439: LD_INT 1
30441: ST_TO_ADDR
// minersList := [ ] ;
30442: LD_ADDR_EXP 114
30446: PUSH
30447: EMPTY
30448: ST_TO_ADDR
// minerMinesList := [ ] ;
30449: LD_ADDR_EXP 115
30453: PUSH
30454: EMPTY
30455: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
30456: LD_ADDR_EXP 116
30460: PUSH
30461: LD_INT 10
30463: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30464: LD_ADDR_VAR 0 1
30468: PUSH
30469: LD_INT 34
30471: PUSH
30472: LD_INT 81
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PPUSH
30479: CALL_OW 69
30483: PUSH
30484: FOR_IN
30485: IFFALSE 30557
// begin if not i in minersList then
30487: LD_VAR 0 1
30491: PUSH
30492: LD_EXP 114
30496: IN
30497: NOT
30498: IFFALSE 30555
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30500: LD_ADDR_EXP 114
30504: PUSH
30505: LD_EXP 114
30509: PPUSH
30510: LD_EXP 114
30514: PUSH
30515: LD_INT 1
30517: PLUS
30518: PPUSH
30519: LD_VAR 0 1
30523: PPUSH
30524: CALL_OW 1
30528: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30529: LD_ADDR_EXP 115
30533: PUSH
30534: LD_EXP 115
30538: PPUSH
30539: LD_EXP 115
30543: PUSH
30544: LD_INT 1
30546: PLUS
30547: PPUSH
30548: EMPTY
30549: PPUSH
30550: CALL_OW 1
30554: ST_TO_ADDR
// end end ;
30555: GO 30484
30557: POP
30558: POP
// end ;
30559: PPOPN 1
30561: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
30562: LD_EXP 113
30566: IFFALSE 30597
30568: PUSH
30569: LD_EXP 115
30573: PPUSH
30574: CALL 35673 0 1
30578: IFTRUE 30596
30580: PUSH
30581: LD_INT 34
30583: PUSH
30584: LD_INT 81
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PPUSH
30591: CALL_OW 69
30595: OR
30596: AND
30597: IFFALSE 31117
30599: GO 30601
30601: DISABLE
30602: LD_INT 0
30604: PPUSH
30605: PPUSH
30606: PPUSH
30607: PPUSH
// begin enable ;
30608: ENABLE
// for i := minerMinesList downto 1 do
30609: LD_ADDR_VAR 0 1
30613: PUSH
30614: DOUBLE
30615: LD_EXP 115
30619: INC
30620: ST_TO_ADDR
30621: LD_INT 1
30623: PUSH
30624: FOR_DOWNTO
30625: IFFALSE 31115
// begin side := GetSide ( minersList [ i ] ) ;
30627: LD_ADDR_VAR 0 3
30631: PUSH
30632: LD_EXP 114
30636: PUSH
30637: LD_VAR 0 1
30641: ARRAY
30642: PPUSH
30643: CALL_OW 255
30647: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
30648: LD_EXP 114
30652: PUSH
30653: LD_VAR 0 1
30657: ARRAY
30658: PPUSH
30659: CALL_OW 300
30663: IFFALSE 30684
30665: PUSH
30666: LD_VAR 0 3
30670: PUSH
30671: LD_OWVAR 2
30675: PUSH
30676: LD_INT 9
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: IN
30683: AND
30684: IFFALSE 30717
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
30686: LD_EXP 114
30690: PUSH
30691: LD_VAR 0 1
30695: ARRAY
30696: PPUSH
30697: LD_EXP 115
30701: PUSH
30702: LD_VAR 0 1
30706: ARRAY
30707: PPUSH
30708: CALL 35673 0 1
30712: PPUSH
30713: CALL_OW 505
// if not minerMinesList [ i ] then
30717: LD_EXP 115
30721: PUSH
30722: LD_VAR 0 1
30726: ARRAY
30727: NOT
30728: IFFALSE 30732
// continue ;
30730: GO 30624
// for j := minerMinesList [ i ] downto 1 do
30732: LD_ADDR_VAR 0 2
30736: PUSH
30737: DOUBLE
30738: LD_EXP 115
30742: PUSH
30743: LD_VAR 0 1
30747: ARRAY
30748: INC
30749: ST_TO_ADDR
30750: LD_INT 1
30752: PUSH
30753: FOR_DOWNTO
30754: IFFALSE 31111
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
30756: LD_EXP 114
30760: PUSH
30761: LD_VAR 0 1
30765: ARRAY
30766: PPUSH
30767: CALL_OW 301
30771: IFTRUE 30791
30773: PUSH
30774: LD_EXP 114
30778: PUSH
30779: LD_VAR 0 1
30783: ARRAY
30784: PPUSH
30785: CALL_OW 305
30789: NOT
30790: OR
30791: IFFALSE 30882
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30793: LD_EXP 115
30797: PUSH
30798: LD_VAR 0 1
30802: ARRAY
30803: PUSH
30804: LD_VAR 0 2
30808: ARRAY
30809: PUSH
30810: LD_INT 1
30812: ARRAY
30813: PPUSH
30814: LD_EXP 115
30818: PUSH
30819: LD_VAR 0 1
30823: ARRAY
30824: PUSH
30825: LD_VAR 0 2
30829: ARRAY
30830: PUSH
30831: LD_INT 2
30833: ARRAY
30834: PPUSH
30835: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30839: LD_ADDR_EXP 115
30843: PUSH
30844: LD_EXP 115
30848: PPUSH
30849: LD_VAR 0 1
30853: PPUSH
30854: LD_EXP 115
30858: PUSH
30859: LD_VAR 0 1
30863: ARRAY
30864: PPUSH
30865: LD_VAR 0 2
30869: PPUSH
30870: CALL_OW 3
30874: PPUSH
30875: CALL_OW 1
30879: ST_TO_ADDR
// continue ;
30880: GO 30753
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30882: LD_ADDR_VAR 0 4
30886: PUSH
30887: LD_EXP 115
30891: PUSH
30892: LD_VAR 0 1
30896: ARRAY
30897: PUSH
30898: LD_VAR 0 2
30902: ARRAY
30903: PUSH
30904: LD_INT 1
30906: ARRAY
30907: PPUSH
30908: LD_EXP 115
30912: PUSH
30913: LD_VAR 0 1
30917: ARRAY
30918: PUSH
30919: LD_VAR 0 2
30923: ARRAY
30924: PUSH
30925: LD_INT 2
30927: ARRAY
30928: PPUSH
30929: CALL_OW 428
30933: ST_TO_ADDR
// if not tmp then
30934: LD_VAR 0 4
30938: NOT
30939: IFFALSE 30943
// continue ;
30941: GO 30753
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30943: LD_VAR 0 4
30947: PUSH
30948: LD_INT 81
30950: PUSH
30951: LD_VAR 0 3
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PPUSH
30960: CALL_OW 69
30964: IN
30965: IFFALSE 31015
30967: PUSH
30968: LD_EXP 115
30972: PUSH
30973: LD_VAR 0 1
30977: ARRAY
30978: PUSH
30979: LD_VAR 0 2
30983: ARRAY
30984: PUSH
30985: LD_INT 1
30987: ARRAY
30988: PPUSH
30989: LD_EXP 115
30993: PUSH
30994: LD_VAR 0 1
30998: ARRAY
30999: PUSH
31000: LD_VAR 0 2
31004: ARRAY
31005: PUSH
31006: LD_INT 2
31008: ARRAY
31009: PPUSH
31010: CALL_OW 458
31014: AND
31015: IFFALSE 31109
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31017: LD_EXP 115
31021: PUSH
31022: LD_VAR 0 1
31026: ARRAY
31027: PUSH
31028: LD_VAR 0 2
31032: ARRAY
31033: PUSH
31034: LD_INT 1
31036: ARRAY
31037: PPUSH
31038: LD_EXP 115
31042: PUSH
31043: LD_VAR 0 1
31047: ARRAY
31048: PUSH
31049: LD_VAR 0 2
31053: ARRAY
31054: PUSH
31055: LD_INT 2
31057: ARRAY
31058: PPUSH
31059: LD_VAR 0 3
31063: PPUSH
31064: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31068: LD_ADDR_EXP 115
31072: PUSH
31073: LD_EXP 115
31077: PPUSH
31078: LD_VAR 0 1
31082: PPUSH
31083: LD_EXP 115
31087: PUSH
31088: LD_VAR 0 1
31092: ARRAY
31093: PPUSH
31094: LD_VAR 0 2
31098: PPUSH
31099: CALL_OW 3
31103: PPUSH
31104: CALL_OW 1
31108: ST_TO_ADDR
// end ; end ;
31109: GO 30753
31111: POP
31112: POP
// end ;
31113: GO 30624
31115: POP
31116: POP
// end ;
31117: PPOPN 4
31119: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
31124: PPUSH
31125: PPUSH
// result := false ;
31126: LD_ADDR_VAR 0 4
31130: PUSH
31131: LD_INT 0
31133: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31134: LD_VAR 0 1
31138: PPUSH
31139: CALL_OW 264
31143: PUSH
31144: LD_INT 81
31146: EQUAL
31147: NOT
31148: IFFALSE 31152
// exit ;
31150: GO 31522
// side := GetSide ( unit ) ;
31152: LD_ADDR_VAR 0 6
31156: PUSH
31157: LD_VAR 0 1
31161: PPUSH
31162: CALL_OW 255
31166: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
31167: LD_ADDR_VAR 0 5
31171: PUSH
31172: LD_EXP 114
31176: PPUSH
31177: LD_VAR 0 1
31181: PPUSH
31182: CALL 38374 0 2
31186: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31187: LD_EXP 115
31191: PUSH
31192: LD_VAR 0 5
31196: ARRAY
31197: PUSH
31198: LD_EXP 116
31202: GREATEREQUAL
31203: IFFALSE 31207
// exit ;
31205: GO 31522
// ComMoveXY ( unit , x , y ) ;
31207: LD_VAR 0 1
31211: PPUSH
31212: LD_VAR 0 2
31216: PPUSH
31217: LD_VAR 0 3
31221: PPUSH
31222: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31226: LD_INT 35
31228: PPUSH
31229: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31233: LD_VAR 0 1
31237: PPUSH
31238: LD_VAR 0 2
31242: PPUSH
31243: LD_VAR 0 3
31247: PPUSH
31248: CALL 70430 0 3
31252: NOT
31253: IFFALSE 31266
31255: PUSH
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 314
31265: AND
31266: IFFALSE 31270
// exit ;
31268: GO 31522
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31270: LD_VAR 0 2
31274: PPUSH
31275: LD_VAR 0 3
31279: PPUSH
31280: CALL_OW 428
31284: PUSH
31285: LD_VAR 0 1
31289: EQUAL
31290: IFFALSE 31304
31292: PUSH
31293: LD_VAR 0 1
31297: PPUSH
31298: CALL_OW 314
31302: NOT
31303: AND
31304: IFFALSE 31226
// if MineAtPos ( x , y ) then
31306: LD_VAR 0 2
31310: PPUSH
31311: LD_VAR 0 3
31315: PPUSH
31316: CALL_OW 458
31320: IFFALSE 31324
// exit ;
31322: GO 31522
// if your_side = side then
31324: LD_OWVAR 2
31328: PUSH
31329: LD_VAR 0 6
31333: EQUAL
31334: IFFALSE 31353
// PlaySoundXY ( x , y , PlantMine ) ;
31336: LD_VAR 0 2
31340: PPUSH
31341: LD_VAR 0 3
31345: PPUSH
31346: LD_STRING PlantMine
31348: PPUSH
31349: CALL_OW 366
// repeat wait ( 1 ) ;
31353: LD_INT 1
31355: PPUSH
31356: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
31360: LD_VAR 0 2
31364: PPUSH
31365: LD_VAR 0 3
31369: PPUSH
31370: LD_VAR 0 6
31374: PPUSH
31375: LD_INT 0
31377: PPUSH
31378: CALL_OW 454
31382: IFFALSE 31353
// if MineAtPos ( x , y ) then
31384: LD_VAR 0 2
31388: PPUSH
31389: LD_VAR 0 3
31393: PPUSH
31394: CALL_OW 458
31398: IFFALSE 31514
// begin for i in minerMinesList [ index ] do
31400: LD_ADDR_VAR 0 7
31404: PUSH
31405: LD_EXP 115
31409: PUSH
31410: LD_VAR 0 5
31414: ARRAY
31415: PUSH
31416: FOR_IN
31417: IFFALSE 31459
// if i [ 1 ] = x and i [ 2 ] = y then
31419: LD_VAR 0 7
31423: PUSH
31424: LD_INT 1
31426: ARRAY
31427: PUSH
31428: LD_VAR 0 2
31432: EQUAL
31433: IFFALSE 31451
31435: PUSH
31436: LD_VAR 0 7
31440: PUSH
31441: LD_INT 2
31443: ARRAY
31444: PUSH
31445: LD_VAR 0 3
31449: EQUAL
31450: AND
31451: IFFALSE 31457
// exit ;
31453: POP
31454: POP
31455: GO 31522
31457: GO 31416
31459: POP
31460: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31461: LD_ADDR_EXP 115
31465: PUSH
31466: LD_EXP 115
31470: PPUSH
31471: LD_VAR 0 5
31475: PUSH
31476: LD_EXP 115
31480: PUSH
31481: LD_VAR 0 5
31485: ARRAY
31486: PUSH
31487: LD_INT 1
31489: PLUS
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PPUSH
31495: LD_VAR 0 2
31499: PUSH
31500: LD_VAR 0 3
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PPUSH
31509: CALL 38591 0 3
31513: ST_TO_ADDR
// end ; result := true ;
31514: LD_ADDR_VAR 0 4
31518: PUSH
31519: LD_INT 1
31521: ST_TO_ADDR
// end ;
31522: LD_VAR 0 4
31526: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31527: LD_INT 0
31529: PPUSH
31530: PPUSH
31531: PPUSH
// if not unit in minersList then
31532: LD_VAR 0 1
31536: PUSH
31537: LD_EXP 114
31541: IN
31542: NOT
31543: IFFALSE 31547
// exit ;
31545: GO 31754
// index := GetElementIndex ( minersList , unit ) ;
31547: LD_ADDR_VAR 0 6
31551: PUSH
31552: LD_EXP 114
31556: PPUSH
31557: LD_VAR 0 1
31561: PPUSH
31562: CALL 38374 0 2
31566: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31567: LD_ADDR_VAR 0 5
31571: PUSH
31572: DOUBLE
31573: LD_EXP 115
31577: PUSH
31578: LD_VAR 0 6
31582: ARRAY
31583: INC
31584: ST_TO_ADDR
31585: LD_INT 1
31587: PUSH
31588: FOR_DOWNTO
31589: IFFALSE 31752
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31591: LD_EXP 115
31595: PUSH
31596: LD_VAR 0 6
31600: ARRAY
31601: PUSH
31602: LD_VAR 0 5
31606: ARRAY
31607: PUSH
31608: LD_INT 1
31610: ARRAY
31611: PPUSH
31612: LD_EXP 115
31616: PUSH
31617: LD_VAR 0 6
31621: ARRAY
31622: PUSH
31623: LD_VAR 0 5
31627: ARRAY
31628: PUSH
31629: LD_INT 2
31631: ARRAY
31632: PPUSH
31633: LD_VAR 0 2
31637: PPUSH
31638: LD_VAR 0 3
31642: PPUSH
31643: CALL_OW 298
31647: PUSH
31648: LD_INT 6
31650: LESS
31651: IFFALSE 31750
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31653: LD_EXP 115
31657: PUSH
31658: LD_VAR 0 6
31662: ARRAY
31663: PUSH
31664: LD_VAR 0 5
31668: ARRAY
31669: PUSH
31670: LD_INT 1
31672: ARRAY
31673: PPUSH
31674: LD_EXP 115
31678: PUSH
31679: LD_VAR 0 6
31683: ARRAY
31684: PUSH
31685: LD_VAR 0 5
31689: ARRAY
31690: PUSH
31691: LD_INT 2
31693: ARRAY
31694: PPUSH
31695: LD_VAR 0 1
31699: PPUSH
31700: CALL_OW 255
31704: PPUSH
31705: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31709: LD_ADDR_EXP 115
31713: PUSH
31714: LD_EXP 115
31718: PPUSH
31719: LD_VAR 0 6
31723: PPUSH
31724: LD_EXP 115
31728: PUSH
31729: LD_VAR 0 6
31733: ARRAY
31734: PPUSH
31735: LD_VAR 0 5
31739: PPUSH
31740: CALL_OW 3
31744: PPUSH
31745: CALL_OW 1
31749: ST_TO_ADDR
// end ; end ;
31750: GO 31588
31752: POP
31753: POP
// end ;
31754: LD_VAR 0 4
31758: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31759: LD_INT 0
31761: PPUSH
31762: PPUSH
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
31768: PPUSH
31769: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31770: LD_VAR 0 1
31774: PPUSH
31775: CALL_OW 264
31779: PUSH
31780: LD_INT 81
31782: EQUAL
31783: NOT
31784: IFTRUE 31799
31786: PUSH
31787: LD_VAR 0 1
31791: PUSH
31792: LD_EXP 114
31796: IN
31797: NOT
31798: OR
31799: IFFALSE 31803
// exit ;
31801: GO 32129
// index := GetElementIndex ( minersList , unit ) ;
31803: LD_ADDR_VAR 0 6
31807: PUSH
31808: LD_EXP 114
31812: PPUSH
31813: LD_VAR 0 1
31817: PPUSH
31818: CALL 38374 0 2
31822: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31823: LD_ADDR_VAR 0 8
31827: PUSH
31828: LD_EXP 116
31832: PUSH
31833: LD_EXP 115
31837: PUSH
31838: LD_VAR 0 6
31842: ARRAY
31843: MINUS
31844: ST_TO_ADDR
// if not minesFreeAmount then
31845: LD_VAR 0 8
31849: NOT
31850: IFFALSE 31854
// exit ;
31852: GO 32129
// tmp := [ ] ;
31854: LD_ADDR_VAR 0 7
31858: PUSH
31859: EMPTY
31860: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31861: LD_ADDR_VAR 0 5
31865: PUSH
31866: DOUBLE
31867: LD_INT 1
31869: DEC
31870: ST_TO_ADDR
31871: LD_VAR 0 8
31875: PUSH
31876: FOR_TO
31877: IFFALSE 32076
// begin _d := rand ( 0 , 5 ) ;
31879: LD_ADDR_VAR 0 11
31883: PUSH
31884: LD_INT 0
31886: PPUSH
31887: LD_INT 5
31889: PPUSH
31890: CALL_OW 12
31894: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31895: LD_ADDR_VAR 0 12
31899: PUSH
31900: LD_INT 2
31902: PPUSH
31903: LD_INT 6
31905: PPUSH
31906: CALL_OW 12
31910: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31911: LD_ADDR_VAR 0 9
31915: PUSH
31916: LD_VAR 0 2
31920: PPUSH
31921: LD_VAR 0 11
31925: PPUSH
31926: LD_VAR 0 12
31930: PPUSH
31931: CALL_OW 272
31935: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31936: LD_ADDR_VAR 0 10
31940: PUSH
31941: LD_VAR 0 3
31945: PPUSH
31946: LD_VAR 0 11
31950: PPUSH
31951: LD_VAR 0 12
31955: PPUSH
31956: CALL_OW 273
31960: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31961: LD_VAR 0 9
31965: PPUSH
31966: LD_VAR 0 10
31970: PPUSH
31971: CALL_OW 488
31975: IFFALSE 31999
31977: PUSH
31978: LD_VAR 0 9
31982: PUSH
31983: LD_VAR 0 10
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_VAR 0 7
31996: IN
31997: NOT
31998: AND
31999: IFFALSE 32018
32001: PUSH
32002: LD_VAR 0 9
32006: PPUSH
32007: LD_VAR 0 10
32011: PPUSH
32012: CALL_OW 458
32016: NOT
32017: AND
32018: IFFALSE 32060
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32020: LD_ADDR_VAR 0 7
32024: PUSH
32025: LD_VAR 0 7
32029: PPUSH
32030: LD_VAR 0 7
32034: PUSH
32035: LD_INT 1
32037: PLUS
32038: PPUSH
32039: LD_VAR 0 9
32043: PUSH
32044: LD_VAR 0 10
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PPUSH
32053: CALL_OW 1
32057: ST_TO_ADDR
32058: GO 32074
// i := i - 1 ;
32060: LD_ADDR_VAR 0 5
32064: PUSH
32065: LD_VAR 0 5
32069: PUSH
32070: LD_INT 1
32072: MINUS
32073: ST_TO_ADDR
// end ;
32074: GO 31876
32076: POP
32077: POP
// for i in tmp do
32078: LD_ADDR_VAR 0 5
32082: PUSH
32083: LD_VAR 0 7
32087: PUSH
32088: FOR_IN
32089: IFFALSE 32127
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32091: LD_VAR 0 1
32095: PPUSH
32096: LD_VAR 0 5
32100: PUSH
32101: LD_INT 1
32103: ARRAY
32104: PPUSH
32105: LD_VAR 0 5
32109: PUSH
32110: LD_INT 2
32112: ARRAY
32113: PPUSH
32114: CALL 31120 0 3
32118: NOT
32119: IFFALSE 32125
// exit ;
32121: POP
32122: POP
32123: GO 32129
32125: GO 32088
32127: POP
32128: POP
// end ;
32129: LD_VAR 0 4
32133: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32134: LD_INT 0
32136: PPUSH
32137: PPUSH
32138: PPUSH
32139: PPUSH
32140: PPUSH
32141: PPUSH
32142: PPUSH
32143: PPUSH
32144: PPUSH
// if GetClass ( unit ) <> class_sniper then
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 257
32154: PUSH
32155: LD_INT 5
32157: NONEQUAL
32158: IFFALSE 32162
// exit ;
32160: GO 32632
// dist := 8 ;
32162: LD_ADDR_VAR 0 5
32166: PUSH
32167: LD_INT 8
32169: ST_TO_ADDR
// viewRange := 12 ;
32170: LD_ADDR_VAR 0 8
32174: PUSH
32175: LD_INT 12
32177: ST_TO_ADDR
// side := GetSide ( unit ) ;
32178: LD_ADDR_VAR 0 6
32182: PUSH
32183: LD_VAR 0 1
32187: PPUSH
32188: CALL_OW 255
32192: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32193: LD_INT 61
32195: PPUSH
32196: LD_VAR 0 6
32200: PPUSH
32201: CALL_OW 321
32205: PUSH
32206: LD_INT 2
32208: EQUAL
32209: IFFALSE 32219
// viewRange := 16 ;
32211: LD_ADDR_VAR 0 8
32215: PUSH
32216: LD_INT 16
32218: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32219: LD_VAR 0 1
32223: PPUSH
32224: LD_VAR 0 2
32228: PPUSH
32229: LD_VAR 0 3
32233: PPUSH
32234: CALL_OW 297
32238: PUSH
32239: LD_VAR 0 5
32243: GREATER
32244: IFFALSE 32323
// begin ComMoveXY ( unit , x , y ) ;
32246: LD_VAR 0 1
32250: PPUSH
32251: LD_VAR 0 2
32255: PPUSH
32256: LD_VAR 0 3
32260: PPUSH
32261: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32265: LD_INT 35
32267: PPUSH
32268: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32272: LD_VAR 0 1
32276: PPUSH
32277: LD_VAR 0 2
32281: PPUSH
32282: LD_VAR 0 3
32286: PPUSH
32287: CALL 70430 0 3
32291: NOT
32292: IFFALSE 32296
// exit ;
32294: GO 32632
// until GetDistUnitXY ( unit , x , y ) < dist ;
32296: LD_VAR 0 1
32300: PPUSH
32301: LD_VAR 0 2
32305: PPUSH
32306: LD_VAR 0 3
32310: PPUSH
32311: CALL_OW 297
32315: PUSH
32316: LD_VAR 0 5
32320: LESS
32321: IFFALSE 32265
// end ; ComTurnXY ( unit , x , y ) ;
32323: LD_VAR 0 1
32327: PPUSH
32328: LD_VAR 0 2
32332: PPUSH
32333: LD_VAR 0 3
32337: PPUSH
32338: CALL_OW 118
// repeat if Multiplayer then
32342: LD_OWVAR 4
32346: IFFALSE 32357
// wait ( 35 ) else
32348: LD_INT 35
32350: PPUSH
32351: CALL_OW 67
32355: GO 32364
// wait ( 5 ) ;
32357: LD_INT 5
32359: PPUSH
32360: CALL_OW 67
// _d := GetDir ( unit ) ;
32364: LD_ADDR_VAR 0 11
32368: PUSH
32369: LD_VAR 0 1
32373: PPUSH
32374: CALL_OW 254
32378: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32379: LD_ADDR_VAR 0 7
32383: PUSH
32384: LD_VAR 0 1
32388: PPUSH
32389: CALL_OW 250
32393: PPUSH
32394: LD_VAR 0 1
32398: PPUSH
32399: CALL_OW 251
32403: PPUSH
32404: LD_VAR 0 2
32408: PPUSH
32409: LD_VAR 0 3
32413: PPUSH
32414: CALL 73066 0 4
32418: ST_TO_ADDR
// until dir = _d ;
32419: LD_VAR 0 7
32423: PUSH
32424: LD_VAR 0 11
32428: EQUAL
32429: IFFALSE 32342
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32431: LD_ADDR_VAR 0 9
32435: PUSH
32436: LD_VAR 0 1
32440: PPUSH
32441: CALL_OW 250
32445: PPUSH
32446: LD_VAR 0 7
32450: PPUSH
32451: LD_VAR 0 5
32455: PPUSH
32456: CALL_OW 272
32460: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32461: LD_ADDR_VAR 0 10
32465: PUSH
32466: LD_VAR 0 1
32470: PPUSH
32471: CALL_OW 251
32475: PPUSH
32476: LD_VAR 0 7
32480: PPUSH
32481: LD_VAR 0 5
32485: PPUSH
32486: CALL_OW 273
32490: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32491: LD_VAR 0 9
32495: PPUSH
32496: LD_VAR 0 10
32500: PPUSH
32501: CALL_OW 488
32505: NOT
32506: IFFALSE 32510
// exit ;
32508: GO 32632
// ComAnimCustom ( unit , 1 ) ;
32510: LD_VAR 0 1
32514: PPUSH
32515: LD_INT 1
32517: PPUSH
32518: CALL_OW 592
// p := 0 ;
32522: LD_ADDR_VAR 0 12
32526: PUSH
32527: LD_INT 0
32529: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32530: LD_VAR 0 9
32534: PPUSH
32535: LD_VAR 0 10
32539: PPUSH
32540: LD_VAR 0 6
32544: PPUSH
32545: LD_VAR 0 8
32549: PPUSH
32550: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32554: LD_INT 35
32556: PPUSH
32557: CALL_OW 67
// p := Inc ( p ) ;
32561: LD_ADDR_VAR 0 12
32565: PUSH
32566: LD_VAR 0 12
32570: PPUSH
32571: CALL 73022 0 1
32575: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32576: LD_VAR 0 12
32580: PUSH
32581: LD_INT 3
32583: EQUAL
32584: IFTRUE 32598
32586: PUSH
32587: LD_VAR 0 1
32591: PPUSH
32592: CALL_OW 302
32596: NOT
32597: OR
32598: IFTRUE 32611
32600: PUSH
32601: LD_VAR 0 1
32605: PPUSH
32606: CALL_OW 301
32610: OR
32611: IFFALSE 32554
// RemoveSeeing ( _x , _y , side ) ;
32613: LD_VAR 0 9
32617: PPUSH
32618: LD_VAR 0 10
32622: PPUSH
32623: LD_VAR 0 6
32627: PPUSH
32628: CALL_OW 331
// end ;
32632: LD_VAR 0 4
32636: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
32637: LD_INT 0
32639: PPUSH
32640: PPUSH
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
32645: PPUSH
32646: PPUSH
32647: PPUSH
32648: PPUSH
32649: PPUSH
// if not unit then
32650: LD_VAR 0 1
32654: NOT
32655: IFFALSE 32659
// exit ;
32657: GO 32930
// side := GetSide ( unit ) ;
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_VAR 0 1
32668: PPUSH
32669: CALL_OW 255
32673: ST_TO_ADDR
// x := GetX ( unit ) ;
32674: LD_ADDR_VAR 0 5
32678: PUSH
32679: LD_VAR 0 1
32683: PPUSH
32684: CALL_OW 250
32688: ST_TO_ADDR
// y := GetY ( unit ) ;
32689: LD_ADDR_VAR 0 6
32693: PUSH
32694: LD_VAR 0 1
32698: PPUSH
32699: CALL_OW 251
32703: ST_TO_ADDR
// r := 8 ;
32704: LD_ADDR_VAR 0 4
32708: PUSH
32709: LD_INT 8
32711: ST_TO_ADDR
// if x - r < 0 then
32712: LD_VAR 0 5
32716: PUSH
32717: LD_VAR 0 4
32721: MINUS
32722: PUSH
32723: LD_INT 0
32725: LESS
32726: IFFALSE 32738
// min_x := 0 else
32728: LD_ADDR_VAR 0 7
32732: PUSH
32733: LD_INT 0
32735: ST_TO_ADDR
32736: GO 32754
// min_x := x - r ;
32738: LD_ADDR_VAR 0 7
32742: PUSH
32743: LD_VAR 0 5
32747: PUSH
32748: LD_VAR 0 4
32752: MINUS
32753: ST_TO_ADDR
// if y - r < 0 then
32754: LD_VAR 0 6
32758: PUSH
32759: LD_VAR 0 4
32763: MINUS
32764: PUSH
32765: LD_INT 0
32767: LESS
32768: IFFALSE 32780
// min_y := 0 else
32770: LD_ADDR_VAR 0 8
32774: PUSH
32775: LD_INT 0
32777: ST_TO_ADDR
32778: GO 32796
// min_y := y - r ;
32780: LD_ADDR_VAR 0 8
32784: PUSH
32785: LD_VAR 0 6
32789: PUSH
32790: LD_VAR 0 4
32794: MINUS
32795: ST_TO_ADDR
// max_x := x + r ;
32796: LD_ADDR_VAR 0 9
32800: PUSH
32801: LD_VAR 0 5
32805: PUSH
32806: LD_VAR 0 4
32810: PLUS
32811: ST_TO_ADDR
// max_y := y + r ;
32812: LD_ADDR_VAR 0 10
32816: PUSH
32817: LD_VAR 0 6
32821: PUSH
32822: LD_VAR 0 4
32826: PLUS
32827: ST_TO_ADDR
// for _x = min_x to max_x do
32828: LD_ADDR_VAR 0 11
32832: PUSH
32833: DOUBLE
32834: LD_VAR 0 7
32838: DEC
32839: ST_TO_ADDR
32840: LD_VAR 0 9
32844: PUSH
32845: FOR_TO
32846: IFFALSE 32928
// for _y = min_y to max_y do
32848: LD_ADDR_VAR 0 12
32852: PUSH
32853: DOUBLE
32854: LD_VAR 0 8
32858: DEC
32859: ST_TO_ADDR
32860: LD_VAR 0 10
32864: PUSH
32865: FOR_TO
32866: IFFALSE 32924
// begin if not ValidHex ( _x , _y ) then
32868: LD_VAR 0 11
32872: PPUSH
32873: LD_VAR 0 12
32877: PPUSH
32878: CALL_OW 488
32882: NOT
32883: IFFALSE 32887
// continue ;
32885: GO 32865
// if MineAtPos ( _x , _y ) then
32887: LD_VAR 0 11
32891: PPUSH
32892: LD_VAR 0 12
32896: PPUSH
32897: CALL_OW 458
32901: IFFALSE 32922
// ViewMineAtPos ( _x , _y , side ) ;
32903: LD_VAR 0 11
32907: PPUSH
32908: LD_VAR 0 12
32912: PPUSH
32913: LD_VAR 0 3
32917: PPUSH
32918: CALL_OW 457
// end ;
32922: GO 32865
32924: POP
32925: POP
32926: GO 32845
32928: POP
32929: POP
// end ;
32930: LD_VAR 0 2
32934: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
32935: LD_INT 0
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
// if not units then
32944: LD_VAR 0 1
32948: NOT
32949: IFFALSE 32953
// exit ;
32951: GO 33417
// scaners := [ ] ;
32953: LD_ADDR_VAR 0 6
32957: PUSH
32958: EMPTY
32959: ST_TO_ADDR
// for i in units do
32960: LD_ADDR_VAR 0 3
32964: PUSH
32965: LD_VAR 0 1
32969: PUSH
32970: FOR_IN
32971: IFFALSE 33128
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
32973: LD_VAR 0 3
32977: PPUSH
32978: CALL_OW 264
32982: PUSH
32983: LD_INT 11
32985: NONEQUAL
32986: IFTRUE 33000
32988: PUSH
32989: LD_VAR 0 3
32993: PPUSH
32994: CALL_OW 302
32998: NOT
32999: OR
33000: IFTRUE 33017
33002: PUSH
33003: LD_VAR 0 3
33007: PPUSH
33008: CALL_OW 110
33012: PUSH
33013: LD_INT 502
33015: EQUAL
33016: OR
33017: IFFALSE 33021
// continue ;
33019: GO 32970
// ComStop ( i ) ;
33021: LD_VAR 0 3
33025: PPUSH
33026: CALL_OW 141
// x := GetX ( i ) ;
33030: LD_ADDR_VAR 0 4
33034: PUSH
33035: LD_VAR 0 3
33039: PPUSH
33040: CALL_OW 250
33044: ST_TO_ADDR
// y := GetY ( i ) ;
33045: LD_ADDR_VAR 0 5
33049: PUSH
33050: LD_VAR 0 3
33054: PPUSH
33055: CALL_OW 251
33059: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33060: LD_VAR 0 3
33064: PPUSH
33065: CALL_OW 255
33069: PUSH
33070: LD_OWVAR 2
33074: EQUAL
33075: IFFALSE 33094
// PlaySoundXY ( x , y , mineDetector ) ;
33077: LD_VAR 0 4
33081: PPUSH
33082: LD_VAR 0 5
33086: PPUSH
33087: LD_STRING mineDetector
33089: PPUSH
33090: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33094: LD_ADDR_VAR 0 6
33098: PUSH
33099: LD_VAR 0 6
33103: PPUSH
33104: LD_VAR 0 3
33108: PPUSH
33109: CALL 71649 0 2
33113: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33114: LD_VAR 0 3
33118: PPUSH
33119: LD_INT 502
33121: PPUSH
33122: CALL_OW 109
// end ;
33126: GO 32970
33128: POP
33129: POP
// if not scaners then
33130: LD_VAR 0 6
33134: NOT
33135: IFFALSE 33139
// exit ;
33137: GO 33417
// wait ( 3 ) ;
33139: LD_INT 3
33141: PPUSH
33142: CALL_OW 67
// timer := 6 ;
33146: LD_ADDR_VAR 0 7
33150: PUSH
33151: LD_INT 6
33153: ST_TO_ADDR
// repeat for i in scaners do
33154: LD_ADDR_VAR 0 3
33158: PUSH
33159: LD_VAR 0 6
33163: PUSH
33164: FOR_IN
33165: IFFALSE 33315
// begin side := GetSide ( i ) ;
33167: LD_ADDR_VAR 0 8
33171: PUSH
33172: LD_VAR 0 3
33176: PPUSH
33177: CALL_OW 255
33181: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33182: LD_VAR 0 3
33186: PPUSH
33187: CALL_OW 302
33191: NOT
33192: IFTRUE 33205
33194: PUSH
33195: LD_VAR 0 3
33199: PPUSH
33200: CALL_OW 314
33204: OR
33205: IFTRUE 33236
33207: PUSH
33208: LD_VAR 0 3
33212: PPUSH
33213: CALL_OW 263
33217: PUSH
33218: LD_INT 1
33220: EQUAL
33221: IFFALSE 33235
33223: PUSH
33224: LD_VAR 0 3
33228: PPUSH
33229: CALL_OW 311
33233: NOT
33234: AND
33235: OR
33236: IFFALSE 33280
// begin SetUnitDisplayNumber ( i , 0 ) ;
33238: LD_VAR 0 3
33242: PPUSH
33243: LD_INT 0
33245: PPUSH
33246: CALL_OW 505
// SetTag ( i , 0 ) ;
33250: LD_VAR 0 3
33254: PPUSH
33255: LD_INT 0
33257: PPUSH
33258: CALL_OW 109
// scaners := scaners diff i ;
33262: LD_ADDR_VAR 0 6
33266: PUSH
33267: LD_VAR 0 6
33271: PUSH
33272: LD_VAR 0 3
33276: DIFF
33277: ST_TO_ADDR
// continue ;
33278: GO 33164
// end ; if side in [ your_side , 9 ] then
33280: LD_VAR 0 8
33284: PUSH
33285: LD_OWVAR 2
33289: PUSH
33290: LD_INT 9
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: IN
33297: IFFALSE 33313
// SetUnitDisplayNumber ( i , timer ) ;
33299: LD_VAR 0 3
33303: PPUSH
33304: LD_VAR 0 7
33308: PPUSH
33309: CALL_OW 505
// end ;
33313: GO 33164
33315: POP
33316: POP
// if not scaners then
33317: LD_VAR 0 6
33321: NOT
33322: IFFALSE 33326
// exit ;
33324: GO 33417
// timer := Dec ( timer ) ;
33326: LD_ADDR_VAR 0 7
33330: PUSH
33331: LD_VAR 0 7
33335: PPUSH
33336: CALL 73044 0 1
33340: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33341: LD_INT 35
33343: PPUSH
33344: CALL_OW 67
// until timer = 0 ;
33348: LD_VAR 0 7
33352: PUSH
33353: LD_INT 0
33355: EQUAL
33356: IFFALSE 33154
// if not scaners then
33358: LD_VAR 0 6
33362: NOT
33363: IFFALSE 33367
// exit ;
33365: GO 33417
// for i in scaners do
33367: LD_ADDR_VAR 0 3
33371: PUSH
33372: LD_VAR 0 6
33376: PUSH
33377: FOR_IN
33378: IFFALSE 33415
// begin SetUnitDisplayNumber ( i , 0 ) ;
33380: LD_VAR 0 3
33384: PPUSH
33385: LD_INT 0
33387: PPUSH
33388: CALL_OW 505
// SetTag ( i , 0 ) ;
33392: LD_VAR 0 3
33396: PPUSH
33397: LD_INT 0
33399: PPUSH
33400: CALL_OW 109
// RevealDetectorMine ( i ) ;
33404: LD_VAR 0 3
33408: PPUSH
33409: CALL 32637 0 1
// end ;
33413: GO 33377
33415: POP
33416: POP
// end ;
33417: LD_VAR 0 2
33421: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33422: LD_INT 0
33424: PPUSH
// if p1 = mine_detector_mode then
33425: LD_VAR 0 2
33429: PUSH
33430: LD_INT 103
33432: EQUAL
33433: IFFALSE 33444
// DetectMine ( units ) ;
33435: LD_VAR 0 1
33439: PPUSH
33440: CALL 32935 0 1
// end ; end_of_file
33444: LD_VAR 0 7
33448: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33449: LD_INT 0
33451: PPUSH
33452: PPUSH
// if exist_mode then
33453: LD_VAR 0 2
33457: IFFALSE 33503
// begin unit := CreateCharacter ( prefix & ident ) ;
33459: LD_ADDR_VAR 0 5
33463: PUSH
33464: LD_VAR 0 3
33468: PUSH
33469: LD_VAR 0 1
33473: STR
33474: PPUSH
33475: CALL_OW 34
33479: ST_TO_ADDR
// if unit then
33480: LD_VAR 0 5
33484: IFFALSE 33501
// DeleteCharacters ( prefix & ident ) ;
33486: LD_VAR 0 3
33490: PUSH
33491: LD_VAR 0 1
33495: STR
33496: PPUSH
33497: CALL_OW 40
// end else
33501: GO 33518
// unit := NewCharacter ( ident ) ;
33503: LD_ADDR_VAR 0 5
33507: PUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: CALL_OW 25
33517: ST_TO_ADDR
// result := unit ;
33518: LD_ADDR_VAR 0 4
33522: PUSH
33523: LD_VAR 0 5
33527: ST_TO_ADDR
// end ;
33528: LD_VAR 0 4
33532: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33533: LD_INT 0
33535: PPUSH
33536: PPUSH
// if exist_mode then
33537: LD_VAR 0 2
33541: IFFALSE 33566
// unit := CreateCharacter ( prefix & ident ) else
33543: LD_ADDR_VAR 0 5
33547: PUSH
33548: LD_VAR 0 3
33552: PUSH
33553: LD_VAR 0 1
33557: STR
33558: PPUSH
33559: CALL_OW 34
33563: ST_TO_ADDR
33564: GO 33581
// unit := NewCharacter ( ident ) ;
33566: LD_ADDR_VAR 0 5
33570: PUSH
33571: LD_VAR 0 1
33575: PPUSH
33576: CALL_OW 25
33580: ST_TO_ADDR
// result := unit ;
33581: LD_ADDR_VAR 0 4
33585: PUSH
33586: LD_VAR 0 5
33590: ST_TO_ADDR
// end ;
33591: LD_VAR 0 4
33595: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33596: LD_INT 0
33598: PPUSH
33599: PPUSH
// if not side or not nation then
33600: LD_VAR 0 1
33604: NOT
33605: IFTRUE 33614
33607: PUSH
33608: LD_VAR 0 2
33612: NOT
33613: OR
33614: IFFALSE 33618
// exit ;
33616: GO 34412
// case nation of nation_american :
33618: LD_VAR 0 2
33622: PUSH
33623: LD_INT 1
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33631
33629: GO 33853
33631: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33632: LD_ADDR_VAR 0 4
33636: PUSH
33637: LD_INT 35
33639: PUSH
33640: LD_INT 45
33642: PUSH
33643: LD_INT 46
33645: PUSH
33646: LD_INT 47
33648: PUSH
33649: LD_INT 82
33651: PUSH
33652: LD_INT 83
33654: PUSH
33655: LD_INT 84
33657: PUSH
33658: LD_INT 85
33660: PUSH
33661: LD_INT 86
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: LD_INT 6
33672: PUSH
33673: LD_INT 15
33675: PUSH
33676: LD_INT 16
33678: PUSH
33679: LD_INT 7
33681: PUSH
33682: LD_INT 12
33684: PUSH
33685: LD_INT 13
33687: PUSH
33688: LD_INT 10
33690: PUSH
33691: LD_INT 14
33693: PUSH
33694: LD_INT 20
33696: PUSH
33697: LD_INT 21
33699: PUSH
33700: LD_INT 22
33702: PUSH
33703: LD_INT 25
33705: PUSH
33706: LD_INT 32
33708: PUSH
33709: LD_INT 27
33711: PUSH
33712: LD_INT 36
33714: PUSH
33715: LD_INT 69
33717: PUSH
33718: LD_INT 39
33720: PUSH
33721: LD_INT 34
33723: PUSH
33724: LD_INT 40
33726: PUSH
33727: LD_INT 48
33729: PUSH
33730: LD_INT 49
33732: PUSH
33733: LD_INT 50
33735: PUSH
33736: LD_INT 51
33738: PUSH
33739: LD_INT 52
33741: PUSH
33742: LD_INT 53
33744: PUSH
33745: LD_INT 54
33747: PUSH
33748: LD_INT 55
33750: PUSH
33751: LD_INT 56
33753: PUSH
33754: LD_INT 57
33756: PUSH
33757: LD_INT 58
33759: PUSH
33760: LD_INT 59
33762: PUSH
33763: LD_INT 60
33765: PUSH
33766: LD_INT 61
33768: PUSH
33769: LD_INT 62
33771: PUSH
33772: LD_INT 80
33774: PUSH
33775: LD_INT 82
33777: PUSH
33778: LD_INT 83
33780: PUSH
33781: LD_INT 84
33783: PUSH
33784: LD_INT 85
33786: PUSH
33787: LD_INT 86
33789: PUSH
33790: LD_INT 90
33792: PUSH
33793: LD_INT 93
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: ST_TO_ADDR
33851: GO 34334
33853: LD_INT 2
33855: DOUBLE
33856: EQUAL
33857: IFTRUE 33861
33859: GO 34095
33861: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33862: LD_ADDR_VAR 0 4
33866: PUSH
33867: LD_INT 35
33869: PUSH
33870: LD_INT 45
33872: PUSH
33873: LD_INT 46
33875: PUSH
33876: LD_INT 47
33878: PUSH
33879: LD_INT 82
33881: PUSH
33882: LD_INT 83
33884: PUSH
33885: LD_INT 84
33887: PUSH
33888: LD_INT 85
33890: PUSH
33891: LD_INT 87
33893: PUSH
33894: LD_INT 70
33896: PUSH
33897: LD_INT 1
33899: PUSH
33900: LD_INT 11
33902: PUSH
33903: LD_INT 3
33905: PUSH
33906: LD_INT 4
33908: PUSH
33909: LD_INT 5
33911: PUSH
33912: LD_INT 6
33914: PUSH
33915: LD_INT 15
33917: PUSH
33918: LD_INT 18
33920: PUSH
33921: LD_INT 7
33923: PUSH
33924: LD_INT 17
33926: PUSH
33927: LD_INT 8
33929: PUSH
33930: LD_INT 20
33932: PUSH
33933: LD_INT 21
33935: PUSH
33936: LD_INT 22
33938: PUSH
33939: LD_INT 72
33941: PUSH
33942: LD_INT 26
33944: PUSH
33945: LD_INT 69
33947: PUSH
33948: LD_INT 39
33950: PUSH
33951: LD_INT 40
33953: PUSH
33954: LD_INT 41
33956: PUSH
33957: LD_INT 42
33959: PUSH
33960: LD_INT 43
33962: PUSH
33963: LD_INT 48
33965: PUSH
33966: LD_INT 49
33968: PUSH
33969: LD_INT 50
33971: PUSH
33972: LD_INT 51
33974: PUSH
33975: LD_INT 52
33977: PUSH
33978: LD_INT 53
33980: PUSH
33981: LD_INT 54
33983: PUSH
33984: LD_INT 55
33986: PUSH
33987: LD_INT 56
33989: PUSH
33990: LD_INT 60
33992: PUSH
33993: LD_INT 61
33995: PUSH
33996: LD_INT 62
33998: PUSH
33999: LD_INT 66
34001: PUSH
34002: LD_INT 67
34004: PUSH
34005: LD_INT 68
34007: PUSH
34008: LD_INT 81
34010: PUSH
34011: LD_INT 82
34013: PUSH
34014: LD_INT 83
34016: PUSH
34017: LD_INT 84
34019: PUSH
34020: LD_INT 85
34022: PUSH
34023: LD_INT 87
34025: PUSH
34026: LD_INT 88
34028: PUSH
34029: LD_INT 92
34031: PUSH
34032: LD_INT 94
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: ST_TO_ADDR
34093: GO 34334
34095: LD_INT 3
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34333
34103: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34104: LD_ADDR_VAR 0 4
34108: PUSH
34109: LD_INT 46
34111: PUSH
34112: LD_INT 47
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: LD_INT 2
34120: PUSH
34121: LD_INT 82
34123: PUSH
34124: LD_INT 83
34126: PUSH
34127: LD_INT 84
34129: PUSH
34130: LD_INT 85
34132: PUSH
34133: LD_INT 86
34135: PUSH
34136: LD_INT 11
34138: PUSH
34139: LD_INT 9
34141: PUSH
34142: LD_INT 20
34144: PUSH
34145: LD_INT 19
34147: PUSH
34148: LD_INT 21
34150: PUSH
34151: LD_INT 24
34153: PUSH
34154: LD_INT 22
34156: PUSH
34157: LD_INT 25
34159: PUSH
34160: LD_INT 28
34162: PUSH
34163: LD_INT 29
34165: PUSH
34166: LD_INT 30
34168: PUSH
34169: LD_INT 31
34171: PUSH
34172: LD_INT 37
34174: PUSH
34175: LD_INT 38
34177: PUSH
34178: LD_INT 32
34180: PUSH
34181: LD_INT 27
34183: PUSH
34184: LD_INT 33
34186: PUSH
34187: LD_INT 69
34189: PUSH
34190: LD_INT 39
34192: PUSH
34193: LD_INT 34
34195: PUSH
34196: LD_INT 40
34198: PUSH
34199: LD_INT 71
34201: PUSH
34202: LD_INT 23
34204: PUSH
34205: LD_INT 44
34207: PUSH
34208: LD_INT 48
34210: PUSH
34211: LD_INT 49
34213: PUSH
34214: LD_INT 50
34216: PUSH
34217: LD_INT 51
34219: PUSH
34220: LD_INT 52
34222: PUSH
34223: LD_INT 53
34225: PUSH
34226: LD_INT 54
34228: PUSH
34229: LD_INT 55
34231: PUSH
34232: LD_INT 56
34234: PUSH
34235: LD_INT 57
34237: PUSH
34238: LD_INT 58
34240: PUSH
34241: LD_INT 59
34243: PUSH
34244: LD_INT 63
34246: PUSH
34247: LD_INT 64
34249: PUSH
34250: LD_INT 65
34252: PUSH
34253: LD_INT 82
34255: PUSH
34256: LD_INT 83
34258: PUSH
34259: LD_INT 84
34261: PUSH
34262: LD_INT 85
34264: PUSH
34265: LD_INT 86
34267: PUSH
34268: LD_INT 89
34270: PUSH
34271: LD_INT 91
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: ST_TO_ADDR
34331: GO 34334
34333: POP
// if state > - 1 and state < 3 then
34334: LD_VAR 0 3
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: GREATER
34343: IFFALSE 34355
34345: PUSH
34346: LD_VAR 0 3
34350: PUSH
34351: LD_INT 3
34353: LESS
34354: AND
34355: IFFALSE 34412
// for i in result do
34357: LD_ADDR_VAR 0 5
34361: PUSH
34362: LD_VAR 0 4
34366: PUSH
34367: FOR_IN
34368: IFFALSE 34410
// if GetTech ( i , side ) <> state then
34370: LD_VAR 0 5
34374: PPUSH
34375: LD_VAR 0 1
34379: PPUSH
34380: CALL_OW 321
34384: PUSH
34385: LD_VAR 0 3
34389: NONEQUAL
34390: IFFALSE 34408
// result := result diff i ;
34392: LD_ADDR_VAR 0 4
34396: PUSH
34397: LD_VAR 0 4
34401: PUSH
34402: LD_VAR 0 5
34406: DIFF
34407: ST_TO_ADDR
34408: GO 34367
34410: POP
34411: POP
// end ;
34412: LD_VAR 0 4
34416: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34417: LD_INT 0
34419: PPUSH
34420: PPUSH
34421: PPUSH
// result := true ;
34422: LD_ADDR_VAR 0 3
34426: PUSH
34427: LD_INT 1
34429: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34430: LD_ADDR_VAR 0 5
34434: PUSH
34435: LD_VAR 0 2
34439: PPUSH
34440: CALL_OW 480
34444: ST_TO_ADDR
// if not tmp then
34445: LD_VAR 0 5
34449: NOT
34450: IFFALSE 34454
// exit ;
34452: GO 34503
// for i in tmp do
34454: LD_ADDR_VAR 0 4
34458: PUSH
34459: LD_VAR 0 5
34463: PUSH
34464: FOR_IN
34465: IFFALSE 34501
// if GetTech ( i , side ) <> state_researched then
34467: LD_VAR 0 4
34471: PPUSH
34472: LD_VAR 0 1
34476: PPUSH
34477: CALL_OW 321
34481: PUSH
34482: LD_INT 2
34484: NONEQUAL
34485: IFFALSE 34499
// begin result := false ;
34487: LD_ADDR_VAR 0 3
34491: PUSH
34492: LD_INT 0
34494: ST_TO_ADDR
// exit ;
34495: POP
34496: POP
34497: GO 34503
// end ;
34499: GO 34464
34501: POP
34502: POP
// end ;
34503: LD_VAR 0 3
34507: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34508: LD_INT 0
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34523: LD_VAR 0 1
34527: NOT
34528: IFTRUE 34545
34530: PUSH
34531: LD_VAR 0 1
34535: PPUSH
34536: CALL_OW 257
34540: PUSH
34541: LD_INT 9
34543: NONEQUAL
34544: OR
34545: IFFALSE 34549
// exit ;
34547: GO 35128
// side := GetSide ( unit ) ;
34549: LD_ADDR_VAR 0 9
34553: PUSH
34554: LD_VAR 0 1
34558: PPUSH
34559: CALL_OW 255
34563: ST_TO_ADDR
// tech_space := tech_spacanom ;
34564: LD_ADDR_VAR 0 12
34568: PUSH
34569: LD_INT 29
34571: ST_TO_ADDR
// tech_time := tech_taurad ;
34572: LD_ADDR_VAR 0 13
34576: PUSH
34577: LD_INT 28
34579: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34580: LD_ADDR_VAR 0 11
34584: PUSH
34585: LD_VAR 0 1
34589: PPUSH
34590: CALL_OW 310
34594: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34595: LD_VAR 0 11
34599: PPUSH
34600: CALL_OW 247
34604: PUSH
34605: LD_INT 2
34607: EQUAL
34608: IFFALSE 34612
// exit ;
34610: GO 35128
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34612: LD_ADDR_VAR 0 8
34616: PUSH
34617: LD_INT 81
34619: PUSH
34620: LD_VAR 0 9
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 3
34631: PUSH
34632: LD_INT 21
34634: PUSH
34635: LD_INT 3
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PPUSH
34650: CALL_OW 69
34654: ST_TO_ADDR
// if not tmp then
34655: LD_VAR 0 8
34659: NOT
34660: IFFALSE 34664
// exit ;
34662: GO 35128
// if in_unit then
34664: LD_VAR 0 11
34668: IFFALSE 34692
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34670: LD_ADDR_VAR 0 10
34674: PUSH
34675: LD_VAR 0 8
34679: PPUSH
34680: LD_VAR 0 11
34684: PPUSH
34685: CALL_OW 74
34689: ST_TO_ADDR
34690: GO 34712
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34692: LD_ADDR_VAR 0 10
34696: PUSH
34697: LD_VAR 0 8
34701: PPUSH
34702: LD_VAR 0 1
34706: PPUSH
34707: CALL_OW 74
34711: ST_TO_ADDR
// if not enemy then
34712: LD_VAR 0 10
34716: NOT
34717: IFFALSE 34721
// exit ;
34719: GO 35128
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34721: LD_VAR 0 11
34725: IFFALSE 34747
34727: PUSH
34728: LD_VAR 0 11
34732: PPUSH
34733: LD_VAR 0 10
34737: PPUSH
34738: CALL_OW 296
34742: PUSH
34743: LD_INT 13
34745: GREATER
34746: AND
34747: IFTRUE 34769
34749: PUSH
34750: LD_VAR 0 1
34754: PPUSH
34755: LD_VAR 0 10
34759: PPUSH
34760: CALL_OW 296
34764: PUSH
34765: LD_INT 12
34767: GREATER
34768: OR
34769: IFFALSE 34773
// exit ;
34771: GO 35128
// missile := [ 1 ] ;
34773: LD_ADDR_VAR 0 14
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34784: LD_VAR 0 9
34788: PPUSH
34789: LD_VAR 0 12
34793: PPUSH
34794: CALL_OW 325
34798: IFFALSE 34827
// missile := Replace ( missile , missile + 1 , 2 ) ;
34800: LD_ADDR_VAR 0 14
34804: PUSH
34805: LD_VAR 0 14
34809: PPUSH
34810: LD_VAR 0 14
34814: PUSH
34815: LD_INT 1
34817: PLUS
34818: PPUSH
34819: LD_INT 2
34821: PPUSH
34822: CALL_OW 1
34826: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34827: LD_VAR 0 9
34831: PPUSH
34832: LD_VAR 0 13
34836: PPUSH
34837: CALL_OW 325
34841: IFFALSE 34865
34843: PUSH
34844: LD_VAR 0 10
34848: PPUSH
34849: CALL_OW 255
34853: PPUSH
34854: LD_VAR 0 13
34858: PPUSH
34859: CALL_OW 325
34863: NOT
34864: AND
34865: IFFALSE 34894
// missile := Replace ( missile , missile + 1 , 3 ) ;
34867: LD_ADDR_VAR 0 14
34871: PUSH
34872: LD_VAR 0 14
34876: PPUSH
34877: LD_VAR 0 14
34881: PUSH
34882: LD_INT 1
34884: PLUS
34885: PPUSH
34886: LD_INT 3
34888: PPUSH
34889: CALL_OW 1
34893: ST_TO_ADDR
// if missile < 2 then
34894: LD_VAR 0 14
34898: PUSH
34899: LD_INT 2
34901: LESS
34902: IFFALSE 34906
// exit ;
34904: GO 35128
// x := GetX ( enemy ) ;
34906: LD_ADDR_VAR 0 4
34910: PUSH
34911: LD_VAR 0 10
34915: PPUSH
34916: CALL_OW 250
34920: ST_TO_ADDR
// y := GetY ( enemy ) ;
34921: LD_ADDR_VAR 0 5
34925: PUSH
34926: LD_VAR 0 10
34930: PPUSH
34931: CALL_OW 251
34935: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34936: LD_ADDR_VAR 0 6
34940: PUSH
34941: LD_VAR 0 4
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PPUSH
34950: LD_INT 1
34952: PPUSH
34953: CALL_OW 12
34957: PLUS
34958: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34959: LD_ADDR_VAR 0 7
34963: PUSH
34964: LD_VAR 0 5
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PPUSH
34973: LD_INT 1
34975: PPUSH
34976: CALL_OW 12
34980: PLUS
34981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34982: LD_VAR 0 6
34986: PPUSH
34987: LD_VAR 0 7
34991: PPUSH
34992: CALL_OW 488
34996: NOT
34997: IFFALSE 35019
// begin _x := x ;
34999: LD_ADDR_VAR 0 6
35003: PUSH
35004: LD_VAR 0 4
35008: ST_TO_ADDR
// _y := y ;
35009: LD_ADDR_VAR 0 7
35013: PUSH
35014: LD_VAR 0 5
35018: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35019: LD_ADDR_VAR 0 3
35023: PUSH
35024: LD_INT 1
35026: PPUSH
35027: LD_VAR 0 14
35031: PPUSH
35032: CALL_OW 12
35036: ST_TO_ADDR
// case i of 1 :
35037: LD_VAR 0 3
35041: PUSH
35042: LD_INT 1
35044: DOUBLE
35045: EQUAL
35046: IFTRUE 35050
35048: GO 35067
35050: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35051: LD_VAR 0 1
35055: PPUSH
35056: LD_VAR 0 10
35060: PPUSH
35061: CALL_OW 115
35065: GO 35128
35067: LD_INT 2
35069: DOUBLE
35070: EQUAL
35071: IFTRUE 35075
35073: GO 35097
35075: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35076: LD_VAR 0 1
35080: PPUSH
35081: LD_VAR 0 6
35085: PPUSH
35086: LD_VAR 0 7
35090: PPUSH
35091: CALL_OW 153
35095: GO 35128
35097: LD_INT 3
35099: DOUBLE
35100: EQUAL
35101: IFTRUE 35105
35103: GO 35127
35105: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35106: LD_VAR 0 1
35110: PPUSH
35111: LD_VAR 0 6
35115: PPUSH
35116: LD_VAR 0 7
35120: PPUSH
35121: CALL_OW 154
35125: GO 35128
35127: POP
// end ;
35128: LD_VAR 0 2
35132: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35133: LD_INT 0
35135: PPUSH
35136: PPUSH
35137: PPUSH
35138: PPUSH
35139: PPUSH
35140: PPUSH
// if not unit or not building then
35141: LD_VAR 0 1
35145: NOT
35146: IFTRUE 35155
35148: PUSH
35149: LD_VAR 0 2
35153: NOT
35154: OR
35155: IFFALSE 35159
// exit ;
35157: GO 35317
// x := GetX ( building ) ;
35159: LD_ADDR_VAR 0 5
35163: PUSH
35164: LD_VAR 0 2
35168: PPUSH
35169: CALL_OW 250
35173: ST_TO_ADDR
// y := GetY ( building ) ;
35174: LD_ADDR_VAR 0 6
35178: PUSH
35179: LD_VAR 0 2
35183: PPUSH
35184: CALL_OW 251
35188: ST_TO_ADDR
// for i := 0 to 5 do
35189: LD_ADDR_VAR 0 4
35193: PUSH
35194: DOUBLE
35195: LD_INT 0
35197: DEC
35198: ST_TO_ADDR
35199: LD_INT 5
35201: PUSH
35202: FOR_TO
35203: IFFALSE 35315
// begin _x := ShiftX ( x , i , 3 ) ;
35205: LD_ADDR_VAR 0 7
35209: PUSH
35210: LD_VAR 0 5
35214: PPUSH
35215: LD_VAR 0 4
35219: PPUSH
35220: LD_INT 3
35222: PPUSH
35223: CALL_OW 272
35227: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35228: LD_ADDR_VAR 0 8
35232: PUSH
35233: LD_VAR 0 6
35237: PPUSH
35238: LD_VAR 0 4
35242: PPUSH
35243: LD_INT 3
35245: PPUSH
35246: CALL_OW 273
35250: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35251: LD_VAR 0 7
35255: PPUSH
35256: LD_VAR 0 8
35260: PPUSH
35261: CALL_OW 488
35265: NOT
35266: IFFALSE 35270
// continue ;
35268: GO 35202
// if HexInfo ( _x , _y ) = 0 then
35270: LD_VAR 0 7
35274: PPUSH
35275: LD_VAR 0 8
35279: PPUSH
35280: CALL_OW 428
35284: PUSH
35285: LD_INT 0
35287: EQUAL
35288: IFFALSE 35313
// begin ComMoveXY ( unit , _x , _y ) ;
35290: LD_VAR 0 1
35294: PPUSH
35295: LD_VAR 0 7
35299: PPUSH
35300: LD_VAR 0 8
35304: PPUSH
35305: CALL_OW 111
// exit ;
35309: POP
35310: POP
35311: GO 35317
// end ; end ;
35313: GO 35202
35315: POP
35316: POP
// end ;
35317: LD_VAR 0 3
35321: RET
// export function ScanBase ( side , base_area ) ; begin
35322: LD_INT 0
35324: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35325: LD_ADDR_VAR 0 3
35329: PUSH
35330: LD_VAR 0 2
35334: PPUSH
35335: LD_INT 81
35337: PUSH
35338: LD_VAR 0 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PPUSH
35347: CALL_OW 70
35351: ST_TO_ADDR
// end ;
35352: LD_VAR 0 3
35356: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35357: LD_INT 0
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
// result := false ;
35363: LD_ADDR_VAR 0 2
35367: PUSH
35368: LD_INT 0
35370: ST_TO_ADDR
// side := GetSide ( unit ) ;
35371: LD_ADDR_VAR 0 3
35375: PUSH
35376: LD_VAR 0 1
35380: PPUSH
35381: CALL_OW 255
35385: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35386: LD_ADDR_VAR 0 4
35390: PUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 248
35400: ST_TO_ADDR
// case nat of 1 :
35401: LD_VAR 0 4
35405: PUSH
35406: LD_INT 1
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35425
35414: POP
// tech := tech_lassight ; 2 :
35415: LD_ADDR_VAR 0 5
35419: PUSH
35420: LD_INT 12
35422: ST_TO_ADDR
35423: GO 35464
35425: LD_INT 2
35427: DOUBLE
35428: EQUAL
35429: IFTRUE 35433
35431: GO 35444
35433: POP
// tech := tech_mortar ; 3 :
35434: LD_ADDR_VAR 0 5
35438: PUSH
35439: LD_INT 41
35441: ST_TO_ADDR
35442: GO 35464
35444: LD_INT 3
35446: DOUBLE
35447: EQUAL
35448: IFTRUE 35452
35450: GO 35463
35452: POP
// tech := tech_bazooka ; end ;
35453: LD_ADDR_VAR 0 5
35457: PUSH
35458: LD_INT 44
35460: ST_TO_ADDR
35461: GO 35464
35463: POP
// if Researched ( side , tech ) then
35464: LD_VAR 0 3
35468: PPUSH
35469: LD_VAR 0 5
35473: PPUSH
35474: CALL_OW 325
35478: IFFALSE 35505
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35480: LD_ADDR_VAR 0 2
35484: PUSH
35485: LD_INT 5
35487: PUSH
35488: LD_INT 8
35490: PUSH
35491: LD_INT 9
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: PUSH
35499: LD_VAR 0 4
35503: ARRAY
35504: ST_TO_ADDR
// end ;
35505: LD_VAR 0 2
35509: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35510: LD_INT 0
35512: PPUSH
35513: PPUSH
35514: PPUSH
// if not mines then
35515: LD_VAR 0 2
35519: NOT
35520: IFFALSE 35524
// exit ;
35522: GO 35668
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35524: LD_ADDR_VAR 0 5
35528: PUSH
35529: LD_INT 81
35531: PUSH
35532: LD_VAR 0 1
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 3
35543: PUSH
35544: LD_INT 21
35546: PUSH
35547: LD_INT 3
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PPUSH
35562: CALL_OW 69
35566: ST_TO_ADDR
// for i in mines do
35567: LD_ADDR_VAR 0 4
35571: PUSH
35572: LD_VAR 0 2
35576: PUSH
35577: FOR_IN
35578: IFFALSE 35666
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35580: LD_VAR 0 4
35584: PUSH
35585: LD_INT 1
35587: ARRAY
35588: PPUSH
35589: LD_VAR 0 4
35593: PUSH
35594: LD_INT 2
35596: ARRAY
35597: PPUSH
35598: CALL_OW 458
35602: NOT
35603: IFFALSE 35607
// continue ;
35605: GO 35577
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35607: LD_VAR 0 4
35611: PUSH
35612: LD_INT 1
35614: ARRAY
35615: PPUSH
35616: LD_VAR 0 4
35620: PUSH
35621: LD_INT 2
35623: ARRAY
35624: PPUSH
35625: CALL_OW 428
35629: PUSH
35630: LD_VAR 0 5
35634: IN
35635: IFFALSE 35664
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35637: LD_VAR 0 4
35641: PUSH
35642: LD_INT 1
35644: ARRAY
35645: PPUSH
35646: LD_VAR 0 4
35650: PUSH
35651: LD_INT 2
35653: ARRAY
35654: PPUSH
35655: LD_VAR 0 1
35659: PPUSH
35660: CALL_OW 456
// end ;
35664: GO 35577
35666: POP
35667: POP
// end ;
35668: LD_VAR 0 3
35672: RET
// export function Count ( array ) ; begin
35673: LD_INT 0
35675: PPUSH
// result := array + 0 ;
35676: LD_ADDR_VAR 0 2
35680: PUSH
35681: LD_VAR 0 1
35685: PUSH
35686: LD_INT 0
35688: PLUS
35689: ST_TO_ADDR
// end ;
35690: LD_VAR 0 2
35694: RET
// export function IsEmpty ( building ) ; begin
35695: LD_INT 0
35697: PPUSH
// if not building then
35698: LD_VAR 0 1
35702: NOT
35703: IFFALSE 35707
// exit ;
35705: GO 35750
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35707: LD_ADDR_VAR 0 2
35711: PUSH
35712: LD_VAR 0 1
35716: PUSH
35717: LD_INT 22
35719: PUSH
35720: LD_VAR 0 1
35724: PPUSH
35725: CALL_OW 255
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 58
35736: PUSH
35737: EMPTY
35738: LIST
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PPUSH
35744: CALL_OW 69
35748: IN
35749: ST_TO_ADDR
// end ;
35750: LD_VAR 0 2
35754: RET
// export function IsNotFull ( building ) ; var places ; begin
35755: LD_INT 0
35757: PPUSH
35758: PPUSH
// if not building then
35759: LD_VAR 0 1
35763: NOT
35764: IFFALSE 35768
// exit ;
35766: GO 35796
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35768: LD_ADDR_VAR 0 2
35772: PUSH
35773: LD_VAR 0 1
35777: PPUSH
35778: LD_INT 3
35780: PUSH
35781: LD_INT 62
35783: PUSH
35784: EMPTY
35785: LIST
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PPUSH
35791: CALL_OW 72
35795: ST_TO_ADDR
// end ;
35796: LD_VAR 0 2
35800: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35801: LD_INT 0
35803: PPUSH
35804: PPUSH
35805: PPUSH
35806: PPUSH
// tmp := [ ] ;
35807: LD_ADDR_VAR 0 3
35811: PUSH
35812: EMPTY
35813: ST_TO_ADDR
// list := [ ] ;
35814: LD_ADDR_VAR 0 5
35818: PUSH
35819: EMPTY
35820: ST_TO_ADDR
// for i = 16 to 25 do
35821: LD_ADDR_VAR 0 4
35825: PUSH
35826: DOUBLE
35827: LD_INT 16
35829: DEC
35830: ST_TO_ADDR
35831: LD_INT 25
35833: PUSH
35834: FOR_TO
35835: IFFALSE 35908
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35837: LD_ADDR_VAR 0 3
35841: PUSH
35842: LD_VAR 0 3
35846: PUSH
35847: LD_INT 22
35849: PUSH
35850: LD_VAR 0 1
35854: PPUSH
35855: CALL_OW 255
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 91
35866: PUSH
35867: LD_VAR 0 1
35871: PUSH
35872: LD_INT 6
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 30
35882: PUSH
35883: LD_VAR 0 4
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: PPUSH
35900: CALL_OW 69
35904: ADD
35905: ST_TO_ADDR
35906: GO 35834
35908: POP
35909: POP
// for i = 1 to tmp do
35910: LD_ADDR_VAR 0 4
35914: PUSH
35915: DOUBLE
35916: LD_INT 1
35918: DEC
35919: ST_TO_ADDR
35920: LD_VAR 0 3
35924: PUSH
35925: FOR_TO
35926: IFFALSE 36014
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35928: LD_ADDR_VAR 0 5
35932: PUSH
35933: LD_VAR 0 5
35937: PUSH
35938: LD_VAR 0 3
35942: PUSH
35943: LD_VAR 0 4
35947: ARRAY
35948: PPUSH
35949: CALL_OW 266
35953: PUSH
35954: LD_VAR 0 3
35958: PUSH
35959: LD_VAR 0 4
35963: ARRAY
35964: PPUSH
35965: CALL_OW 250
35969: PUSH
35970: LD_VAR 0 3
35974: PUSH
35975: LD_VAR 0 4
35979: ARRAY
35980: PPUSH
35981: CALL_OW 251
35985: PUSH
35986: LD_VAR 0 3
35990: PUSH
35991: LD_VAR 0 4
35995: ARRAY
35996: PPUSH
35997: CALL_OW 254
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: PUSH
36008: EMPTY
36009: LIST
36010: ADD
36011: ST_TO_ADDR
36012: GO 35925
36014: POP
36015: POP
// result := list ;
36016: LD_ADDR_VAR 0 2
36020: PUSH
36021: LD_VAR 0 5
36025: ST_TO_ADDR
// end ;
36026: LD_VAR 0 2
36030: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36031: LD_INT 0
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
// if not factory then
36040: LD_VAR 0 1
36044: NOT
36045: IFFALSE 36049
// exit ;
36047: GO 36652
// if control = control_apeman then
36049: LD_VAR 0 4
36053: PUSH
36054: LD_INT 5
36056: EQUAL
36057: IFFALSE 36166
// begin tmp := UnitsInside ( factory ) ;
36059: LD_ADDR_VAR 0 8
36063: PUSH
36064: LD_VAR 0 1
36068: PPUSH
36069: CALL_OW 313
36073: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36074: LD_VAR 0 8
36078: PPUSH
36079: LD_INT 25
36081: PUSH
36082: LD_INT 12
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PPUSH
36089: CALL_OW 72
36093: NOT
36094: IFFALSE 36104
// control := control_manual ;
36096: LD_ADDR_VAR 0 4
36100: PUSH
36101: LD_INT 1
36103: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36104: LD_ADDR_VAR 0 8
36108: PUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL 35801 0 1
36118: ST_TO_ADDR
// if tmp then
36119: LD_VAR 0 8
36123: IFFALSE 36166
// begin for i in tmp do
36125: LD_ADDR_VAR 0 7
36129: PUSH
36130: LD_VAR 0 8
36134: PUSH
36135: FOR_IN
36136: IFFALSE 36164
// if i [ 1 ] = b_ext_radio then
36138: LD_VAR 0 7
36142: PUSH
36143: LD_INT 1
36145: ARRAY
36146: PUSH
36147: LD_INT 22
36149: EQUAL
36150: IFFALSE 36162
// begin control := control_remote ;
36152: LD_ADDR_VAR 0 4
36156: PUSH
36157: LD_INT 2
36159: ST_TO_ADDR
// break ;
36160: GO 36164
// end ;
36162: GO 36135
36164: POP
36165: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36166: LD_VAR 0 1
36170: PPUSH
36171: LD_VAR 0 2
36175: PPUSH
36176: LD_VAR 0 3
36180: PPUSH
36181: LD_VAR 0 4
36185: PPUSH
36186: LD_VAR 0 5
36190: PPUSH
36191: CALL_OW 448
36195: IFFALSE 36230
// begin result := [ chassis , engine , control , weapon ] ;
36197: LD_ADDR_VAR 0 6
36201: PUSH
36202: LD_VAR 0 2
36206: PUSH
36207: LD_VAR 0 3
36211: PUSH
36212: LD_VAR 0 4
36216: PUSH
36217: LD_VAR 0 5
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: ST_TO_ADDR
// exit ;
36228: GO 36652
// end ; _chassis := AvailableChassisList ( factory ) ;
36230: LD_ADDR_VAR 0 9
36234: PUSH
36235: LD_VAR 0 1
36239: PPUSH
36240: CALL_OW 475
36244: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36245: LD_ADDR_VAR 0 11
36249: PUSH
36250: LD_VAR 0 1
36254: PPUSH
36255: CALL_OW 476
36259: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36260: LD_ADDR_VAR 0 12
36264: PUSH
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL_OW 477
36274: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36275: LD_ADDR_VAR 0 10
36279: PUSH
36280: LD_VAR 0 1
36284: PPUSH
36285: CALL_OW 478
36289: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36290: LD_VAR 0 9
36294: NOT
36295: IFTRUE 36304
36297: PUSH
36298: LD_VAR 0 11
36302: NOT
36303: OR
36304: IFTRUE 36313
36306: PUSH
36307: LD_VAR 0 12
36311: NOT
36312: OR
36313: IFTRUE 36322
36315: PUSH
36316: LD_VAR 0 10
36320: NOT
36321: OR
36322: IFFALSE 36357
// begin result := [ chassis , engine , control , weapon ] ;
36324: LD_ADDR_VAR 0 6
36328: PUSH
36329: LD_VAR 0 2
36333: PUSH
36334: LD_VAR 0 3
36338: PUSH
36339: LD_VAR 0 4
36343: PUSH
36344: LD_VAR 0 5
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: ST_TO_ADDR
// exit ;
36355: GO 36652
// end ; if not chassis in _chassis then
36357: LD_VAR 0 2
36361: PUSH
36362: LD_VAR 0 9
36366: IN
36367: NOT
36368: IFFALSE 36394
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36370: LD_ADDR_VAR 0 2
36374: PUSH
36375: LD_VAR 0 9
36379: PUSH
36380: LD_INT 1
36382: PPUSH
36383: LD_VAR 0 9
36387: PPUSH
36388: CALL_OW 12
36392: ARRAY
36393: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36394: LD_VAR 0 2
36398: PPUSH
36399: LD_VAR 0 3
36403: PPUSH
36404: CALL 36657 0 2
36408: NOT
36409: IFFALSE 36470
// repeat engine := _engine [ 1 ] ;
36411: LD_ADDR_VAR 0 3
36415: PUSH
36416: LD_VAR 0 11
36420: PUSH
36421: LD_INT 1
36423: ARRAY
36424: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36425: LD_ADDR_VAR 0 11
36429: PUSH
36430: LD_VAR 0 11
36434: PPUSH
36435: LD_INT 1
36437: PPUSH
36438: CALL_OW 3
36442: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36443: LD_VAR 0 2
36447: PPUSH
36448: LD_VAR 0 3
36452: PPUSH
36453: CALL 36657 0 2
36457: IFTRUE 36468
36459: PUSH
36460: LD_VAR 0 11
36464: PUSH
36465: EMPTY
36466: EQUAL
36467: OR
36468: IFFALSE 36411
// if not control in _control then
36470: LD_VAR 0 4
36474: PUSH
36475: LD_VAR 0 12
36479: IN
36480: NOT
36481: IFFALSE 36507
// control := _control [ rand ( 1 , _control ) ] ;
36483: LD_ADDR_VAR 0 4
36487: PUSH
36488: LD_VAR 0 12
36492: PUSH
36493: LD_INT 1
36495: PPUSH
36496: LD_VAR 0 12
36500: PPUSH
36501: CALL_OW 12
36505: ARRAY
36506: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36507: LD_VAR 0 2
36511: PPUSH
36512: LD_VAR 0 5
36516: PPUSH
36517: CALL 36879 0 2
36521: NOT
36522: IFFALSE 36583
// repeat weapon := _weapon [ 1 ] ;
36524: LD_ADDR_VAR 0 5
36528: PUSH
36529: LD_VAR 0 10
36533: PUSH
36534: LD_INT 1
36536: ARRAY
36537: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36538: LD_ADDR_VAR 0 10
36542: PUSH
36543: LD_VAR 0 10
36547: PPUSH
36548: LD_INT 1
36550: PPUSH
36551: CALL_OW 3
36555: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36556: LD_VAR 0 2
36560: PPUSH
36561: LD_VAR 0 5
36565: PPUSH
36566: CALL 36879 0 2
36570: IFTRUE 36581
36572: PUSH
36573: LD_VAR 0 10
36577: PUSH
36578: EMPTY
36579: EQUAL
36580: OR
36581: IFFALSE 36524
// result := [ ] ;
36583: LD_ADDR_VAR 0 6
36587: PUSH
36588: EMPTY
36589: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36590: LD_VAR 0 1
36594: PPUSH
36595: LD_VAR 0 2
36599: PPUSH
36600: LD_VAR 0 3
36604: PPUSH
36605: LD_VAR 0 4
36609: PPUSH
36610: LD_VAR 0 5
36614: PPUSH
36615: CALL_OW 448
36619: IFFALSE 36652
// result := [ chassis , engine , control , weapon ] ;
36621: LD_ADDR_VAR 0 6
36625: PUSH
36626: LD_VAR 0 2
36630: PUSH
36631: LD_VAR 0 3
36635: PUSH
36636: LD_VAR 0 4
36640: PUSH
36641: LD_VAR 0 5
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: ST_TO_ADDR
// end ;
36652: LD_VAR 0 6
36656: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36657: LD_INT 0
36659: PPUSH
// if not chassis or not engine then
36660: LD_VAR 0 1
36664: NOT
36665: IFTRUE 36674
36667: PUSH
36668: LD_VAR 0 2
36672: NOT
36673: OR
36674: IFFALSE 36678
// exit ;
36676: GO 36874
// case engine of engine_solar :
36678: LD_VAR 0 2
36682: PUSH
36683: LD_INT 2
36685: DOUBLE
36686: EQUAL
36687: IFTRUE 36691
36689: GO 36729
36691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36692: LD_ADDR_VAR 0 3
36696: PUSH
36697: LD_INT 11
36699: PUSH
36700: LD_INT 12
36702: PUSH
36703: LD_INT 13
36705: PUSH
36706: LD_INT 14
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: LD_INT 3
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: ST_TO_ADDR
36727: GO 36858
36729: LD_INT 1
36731: DOUBLE
36732: EQUAL
36733: IFTRUE 36737
36735: GO 36799
36737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36738: LD_ADDR_VAR 0 3
36742: PUSH
36743: LD_INT 11
36745: PUSH
36746: LD_INT 12
36748: PUSH
36749: LD_INT 13
36751: PUSH
36752: LD_INT 14
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: LD_INT 3
36763: PUSH
36764: LD_INT 4
36766: PUSH
36767: LD_INT 5
36769: PUSH
36770: LD_INT 21
36772: PUSH
36773: LD_INT 23
36775: PUSH
36776: LD_INT 22
36778: PUSH
36779: LD_INT 24
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: ST_TO_ADDR
36797: GO 36858
36799: LD_INT 3
36801: DOUBLE
36802: EQUAL
36803: IFTRUE 36807
36805: GO 36857
36807: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36808: LD_ADDR_VAR 0 3
36812: PUSH
36813: LD_INT 13
36815: PUSH
36816: LD_INT 14
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: LD_INT 3
36824: PUSH
36825: LD_INT 4
36827: PUSH
36828: LD_INT 5
36830: PUSH
36831: LD_INT 21
36833: PUSH
36834: LD_INT 22
36836: PUSH
36837: LD_INT 23
36839: PUSH
36840: LD_INT 24
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: ST_TO_ADDR
36855: GO 36858
36857: POP
// result := ( chassis in result ) ;
36858: LD_ADDR_VAR 0 3
36862: PUSH
36863: LD_VAR 0 1
36867: PUSH
36868: LD_VAR 0 3
36872: IN
36873: ST_TO_ADDR
// end ;
36874: LD_VAR 0 3
36878: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36879: LD_INT 0
36881: PPUSH
// if not chassis or not weapon then
36882: LD_VAR 0 1
36886: NOT
36887: IFTRUE 36896
36889: PUSH
36890: LD_VAR 0 2
36894: NOT
36895: OR
36896: IFFALSE 36900
// exit ;
36898: GO 37994
// case weapon of us_machine_gun :
36900: LD_VAR 0 2
36904: PUSH
36905: LD_INT 2
36907: DOUBLE
36908: EQUAL
36909: IFTRUE 36913
36911: GO 36943
36913: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36914: LD_ADDR_VAR 0 3
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: LD_INT 2
36924: PUSH
36925: LD_INT 3
36927: PUSH
36928: LD_INT 4
36930: PUSH
36931: LD_INT 5
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: ST_TO_ADDR
36941: GO 37978
36943: LD_INT 3
36945: DOUBLE
36946: EQUAL
36947: IFTRUE 36951
36949: GO 36981
36951: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36952: LD_ADDR_VAR 0 3
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 3
36965: PUSH
36966: LD_INT 4
36968: PUSH
36969: LD_INT 5
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: ST_TO_ADDR
36979: GO 37978
36981: LD_INT 11
36983: DOUBLE
36984: EQUAL
36985: IFTRUE 36989
36987: GO 37019
36989: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36990: LD_ADDR_VAR 0 3
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: LD_INT 4
37006: PUSH
37007: LD_INT 5
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: ST_TO_ADDR
37017: GO 37978
37019: LD_INT 4
37021: DOUBLE
37022: EQUAL
37023: IFTRUE 37027
37025: GO 37053
37027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37028: LD_ADDR_VAR 0 3
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 4
37041: PUSH
37042: LD_INT 5
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: ST_TO_ADDR
37051: GO 37978
37053: LD_INT 5
37055: DOUBLE
37056: EQUAL
37057: IFTRUE 37061
37059: GO 37087
37061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37062: LD_ADDR_VAR 0 3
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: LD_INT 3
37072: PUSH
37073: LD_INT 4
37075: PUSH
37076: LD_INT 5
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
37085: GO 37978
37087: LD_INT 9
37089: DOUBLE
37090: EQUAL
37091: IFTRUE 37095
37093: GO 37121
37095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37096: LD_ADDR_VAR 0 3
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: LD_INT 3
37106: PUSH
37107: LD_INT 4
37109: PUSH
37110: LD_INT 5
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: ST_TO_ADDR
37119: GO 37978
37121: LD_INT 7
37123: DOUBLE
37124: EQUAL
37125: IFTRUE 37129
37127: GO 37155
37129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37130: LD_ADDR_VAR 0 3
37134: PUSH
37135: LD_INT 2
37137: PUSH
37138: LD_INT 3
37140: PUSH
37141: LD_INT 4
37143: PUSH
37144: LD_INT 5
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: ST_TO_ADDR
37153: GO 37978
37155: LD_INT 12
37157: DOUBLE
37158: EQUAL
37159: IFTRUE 37163
37161: GO 37189
37163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37164: LD_ADDR_VAR 0 3
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: LD_INT 3
37174: PUSH
37175: LD_INT 4
37177: PUSH
37178: LD_INT 5
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
37187: GO 37978
37189: LD_INT 13
37191: DOUBLE
37192: EQUAL
37193: IFTRUE 37197
37195: GO 37223
37197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37198: LD_ADDR_VAR 0 3
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: LD_INT 4
37211: PUSH
37212: LD_INT 5
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: ST_TO_ADDR
37221: GO 37978
37223: LD_INT 14
37225: DOUBLE
37226: EQUAL
37227: IFTRUE 37231
37229: GO 37249
37231: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37232: LD_ADDR_VAR 0 3
37236: PUSH
37237: LD_INT 4
37239: PUSH
37240: LD_INT 5
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: ST_TO_ADDR
37247: GO 37978
37249: LD_INT 6
37251: DOUBLE
37252: EQUAL
37253: IFTRUE 37257
37255: GO 37275
37257: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37258: LD_ADDR_VAR 0 3
37262: PUSH
37263: LD_INT 4
37265: PUSH
37266: LD_INT 5
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: ST_TO_ADDR
37273: GO 37978
37275: LD_INT 10
37277: DOUBLE
37278: EQUAL
37279: IFTRUE 37283
37281: GO 37301
37283: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37284: LD_ADDR_VAR 0 3
37288: PUSH
37289: LD_INT 4
37291: PUSH
37292: LD_INT 5
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: ST_TO_ADDR
37299: GO 37978
37301: LD_INT 22
37303: DOUBLE
37304: EQUAL
37305: IFTRUE 37309
37307: GO 37335
37309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37310: LD_ADDR_VAR 0 3
37314: PUSH
37315: LD_INT 11
37317: PUSH
37318: LD_INT 12
37320: PUSH
37321: LD_INT 13
37323: PUSH
37324: LD_INT 14
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: ST_TO_ADDR
37333: GO 37978
37335: LD_INT 23
37337: DOUBLE
37338: EQUAL
37339: IFTRUE 37343
37341: GO 37369
37343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37344: LD_ADDR_VAR 0 3
37348: PUSH
37349: LD_INT 11
37351: PUSH
37352: LD_INT 12
37354: PUSH
37355: LD_INT 13
37357: PUSH
37358: LD_INT 14
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
37367: GO 37978
37369: LD_INT 24
37371: DOUBLE
37372: EQUAL
37373: IFTRUE 37377
37375: GO 37403
37377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37378: LD_ADDR_VAR 0 3
37382: PUSH
37383: LD_INT 11
37385: PUSH
37386: LD_INT 12
37388: PUSH
37389: LD_INT 13
37391: PUSH
37392: LD_INT 14
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
37401: GO 37978
37403: LD_INT 30
37405: DOUBLE
37406: EQUAL
37407: IFTRUE 37411
37409: GO 37437
37411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37412: LD_ADDR_VAR 0 3
37416: PUSH
37417: LD_INT 11
37419: PUSH
37420: LD_INT 12
37422: PUSH
37423: LD_INT 13
37425: PUSH
37426: LD_INT 14
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
37435: GO 37978
37437: LD_INT 25
37439: DOUBLE
37440: EQUAL
37441: IFTRUE 37445
37443: GO 37463
37445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37446: LD_ADDR_VAR 0 3
37450: PUSH
37451: LD_INT 13
37453: PUSH
37454: LD_INT 14
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: ST_TO_ADDR
37461: GO 37978
37463: LD_INT 27
37465: DOUBLE
37466: EQUAL
37467: IFTRUE 37471
37469: GO 37489
37471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37472: LD_ADDR_VAR 0 3
37476: PUSH
37477: LD_INT 13
37479: PUSH
37480: LD_INT 14
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: ST_TO_ADDR
37487: GO 37978
37489: LD_INT 92
37491: DOUBLE
37492: EQUAL
37493: IFTRUE 37497
37495: GO 37523
37497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37498: LD_ADDR_VAR 0 3
37502: PUSH
37503: LD_INT 11
37505: PUSH
37506: LD_INT 12
37508: PUSH
37509: LD_INT 13
37511: PUSH
37512: LD_INT 14
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: ST_TO_ADDR
37521: GO 37978
37523: LD_INT 28
37525: DOUBLE
37526: EQUAL
37527: IFTRUE 37531
37529: GO 37549
37531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37532: LD_ADDR_VAR 0 3
37536: PUSH
37537: LD_INT 13
37539: PUSH
37540: LD_INT 14
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: ST_TO_ADDR
37547: GO 37978
37549: LD_INT 29
37551: DOUBLE
37552: EQUAL
37553: IFTRUE 37557
37555: GO 37575
37557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37558: LD_ADDR_VAR 0 3
37562: PUSH
37563: LD_INT 13
37565: PUSH
37566: LD_INT 14
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: ST_TO_ADDR
37573: GO 37978
37575: LD_INT 31
37577: DOUBLE
37578: EQUAL
37579: IFTRUE 37583
37581: GO 37601
37583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37584: LD_ADDR_VAR 0 3
37588: PUSH
37589: LD_INT 13
37591: PUSH
37592: LD_INT 14
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: ST_TO_ADDR
37599: GO 37978
37601: LD_INT 26
37603: DOUBLE
37604: EQUAL
37605: IFTRUE 37609
37607: GO 37627
37609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37610: LD_ADDR_VAR 0 3
37614: PUSH
37615: LD_INT 13
37617: PUSH
37618: LD_INT 14
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: ST_TO_ADDR
37625: GO 37978
37627: LD_INT 42
37629: DOUBLE
37630: EQUAL
37631: IFTRUE 37635
37633: GO 37661
37635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37636: LD_ADDR_VAR 0 3
37640: PUSH
37641: LD_INT 21
37643: PUSH
37644: LD_INT 22
37646: PUSH
37647: LD_INT 23
37649: PUSH
37650: LD_INT 24
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: ST_TO_ADDR
37659: GO 37978
37661: LD_INT 43
37663: DOUBLE
37664: EQUAL
37665: IFTRUE 37669
37667: GO 37695
37669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37670: LD_ADDR_VAR 0 3
37674: PUSH
37675: LD_INT 21
37677: PUSH
37678: LD_INT 22
37680: PUSH
37681: LD_INT 23
37683: PUSH
37684: LD_INT 24
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: ST_TO_ADDR
37693: GO 37978
37695: LD_INT 44
37697: DOUBLE
37698: EQUAL
37699: IFTRUE 37703
37701: GO 37729
37703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37704: LD_ADDR_VAR 0 3
37708: PUSH
37709: LD_INT 21
37711: PUSH
37712: LD_INT 22
37714: PUSH
37715: LD_INT 23
37717: PUSH
37718: LD_INT 24
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: ST_TO_ADDR
37727: GO 37978
37729: LD_INT 45
37731: DOUBLE
37732: EQUAL
37733: IFTRUE 37737
37735: GO 37763
37737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37738: LD_ADDR_VAR 0 3
37742: PUSH
37743: LD_INT 21
37745: PUSH
37746: LD_INT 22
37748: PUSH
37749: LD_INT 23
37751: PUSH
37752: LD_INT 24
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: ST_TO_ADDR
37761: GO 37978
37763: LD_INT 49
37765: DOUBLE
37766: EQUAL
37767: IFTRUE 37771
37769: GO 37797
37771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37772: LD_ADDR_VAR 0 3
37776: PUSH
37777: LD_INT 21
37779: PUSH
37780: LD_INT 22
37782: PUSH
37783: LD_INT 23
37785: PUSH
37786: LD_INT 24
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: ST_TO_ADDR
37795: GO 37978
37797: LD_INT 51
37799: DOUBLE
37800: EQUAL
37801: IFTRUE 37805
37803: GO 37831
37805: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37806: LD_ADDR_VAR 0 3
37810: PUSH
37811: LD_INT 21
37813: PUSH
37814: LD_INT 22
37816: PUSH
37817: LD_INT 23
37819: PUSH
37820: LD_INT 24
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: ST_TO_ADDR
37829: GO 37978
37831: LD_INT 52
37833: DOUBLE
37834: EQUAL
37835: IFTRUE 37839
37837: GO 37865
37839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37840: LD_ADDR_VAR 0 3
37844: PUSH
37845: LD_INT 21
37847: PUSH
37848: LD_INT 22
37850: PUSH
37851: LD_INT 23
37853: PUSH
37854: LD_INT 24
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
37863: GO 37978
37865: LD_INT 53
37867: DOUBLE
37868: EQUAL
37869: IFTRUE 37873
37871: GO 37891
37873: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37874: LD_ADDR_VAR 0 3
37878: PUSH
37879: LD_INT 23
37881: PUSH
37882: LD_INT 24
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: ST_TO_ADDR
37889: GO 37978
37891: LD_INT 46
37893: DOUBLE
37894: EQUAL
37895: IFTRUE 37899
37897: GO 37917
37899: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37900: LD_ADDR_VAR 0 3
37904: PUSH
37905: LD_INT 23
37907: PUSH
37908: LD_INT 24
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: ST_TO_ADDR
37915: GO 37978
37917: LD_INT 47
37919: DOUBLE
37920: EQUAL
37921: IFTRUE 37925
37923: GO 37943
37925: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
37926: LD_ADDR_VAR 0 3
37930: PUSH
37931: LD_INT 23
37933: PUSH
37934: LD_INT 24
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: ST_TO_ADDR
37941: GO 37978
37943: LD_INT 98
37945: DOUBLE
37946: EQUAL
37947: IFTRUE 37951
37949: GO 37977
37951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37952: LD_ADDR_VAR 0 3
37956: PUSH
37957: LD_INT 21
37959: PUSH
37960: LD_INT 22
37962: PUSH
37963: LD_INT 23
37965: PUSH
37966: LD_INT 24
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: ST_TO_ADDR
37975: GO 37978
37977: POP
// result := ( chassis in result ) ;
37978: LD_ADDR_VAR 0 3
37982: PUSH
37983: LD_VAR 0 1
37987: PUSH
37988: LD_VAR 0 3
37992: IN
37993: ST_TO_ADDR
// end ;
37994: LD_VAR 0 3
37998: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37999: LD_INT 0
38001: PPUSH
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
// result := array ;
38008: LD_ADDR_VAR 0 5
38012: PUSH
38013: LD_VAR 0 1
38017: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38018: LD_VAR 0 1
38022: NOT
38023: IFTRUE 38032
38025: PUSH
38026: LD_VAR 0 2
38030: NOT
38031: OR
38032: IFTRUE 38041
38034: PUSH
38035: LD_VAR 0 3
38039: NOT
38040: OR
38041: IFTRUE 38055
38043: PUSH
38044: LD_VAR 0 2
38048: PUSH
38049: LD_VAR 0 1
38053: GREATER
38054: OR
38055: IFTRUE 38069
38057: PUSH
38058: LD_VAR 0 3
38062: PUSH
38063: LD_VAR 0 1
38067: GREATER
38068: OR
38069: IFFALSE 38073
// exit ;
38071: GO 38369
// if direction then
38073: LD_VAR 0 4
38077: IFFALSE 38141
// begin d := 1 ;
38079: LD_ADDR_VAR 0 9
38083: PUSH
38084: LD_INT 1
38086: ST_TO_ADDR
// if i_from > i_to then
38087: LD_VAR 0 2
38091: PUSH
38092: LD_VAR 0 3
38096: GREATER
38097: IFFALSE 38123
// length := ( array - i_from ) + i_to else
38099: LD_ADDR_VAR 0 11
38103: PUSH
38104: LD_VAR 0 1
38108: PUSH
38109: LD_VAR 0 2
38113: MINUS
38114: PUSH
38115: LD_VAR 0 3
38119: PLUS
38120: ST_TO_ADDR
38121: GO 38139
// length := i_to - i_from ;
38123: LD_ADDR_VAR 0 11
38127: PUSH
38128: LD_VAR 0 3
38132: PUSH
38133: LD_VAR 0 2
38137: MINUS
38138: ST_TO_ADDR
// end else
38139: GO 38202
// begin d := - 1 ;
38141: LD_ADDR_VAR 0 9
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: ST_TO_ADDR
// if i_from > i_to then
38150: LD_VAR 0 2
38154: PUSH
38155: LD_VAR 0 3
38159: GREATER
38160: IFFALSE 38180
// length := i_from - i_to else
38162: LD_ADDR_VAR 0 11
38166: PUSH
38167: LD_VAR 0 2
38171: PUSH
38172: LD_VAR 0 3
38176: MINUS
38177: ST_TO_ADDR
38178: GO 38202
// length := ( array - i_to ) + i_from ;
38180: LD_ADDR_VAR 0 11
38184: PUSH
38185: LD_VAR 0 1
38189: PUSH
38190: LD_VAR 0 3
38194: MINUS
38195: PUSH
38196: LD_VAR 0 2
38200: PLUS
38201: ST_TO_ADDR
// end ; if not length then
38202: LD_VAR 0 11
38206: NOT
38207: IFFALSE 38211
// exit ;
38209: GO 38369
// tmp := array ;
38211: LD_ADDR_VAR 0 10
38215: PUSH
38216: LD_VAR 0 1
38220: ST_TO_ADDR
// for i = 1 to length do
38221: LD_ADDR_VAR 0 6
38225: PUSH
38226: DOUBLE
38227: LD_INT 1
38229: DEC
38230: ST_TO_ADDR
38231: LD_VAR 0 11
38235: PUSH
38236: FOR_TO
38237: IFFALSE 38357
// begin for j = 1 to array do
38239: LD_ADDR_VAR 0 7
38243: PUSH
38244: DOUBLE
38245: LD_INT 1
38247: DEC
38248: ST_TO_ADDR
38249: LD_VAR 0 1
38253: PUSH
38254: FOR_TO
38255: IFFALSE 38343
// begin k := j + d ;
38257: LD_ADDR_VAR 0 8
38261: PUSH
38262: LD_VAR 0 7
38266: PUSH
38267: LD_VAR 0 9
38271: PLUS
38272: ST_TO_ADDR
// if k > array then
38273: LD_VAR 0 8
38277: PUSH
38278: LD_VAR 0 1
38282: GREATER
38283: IFFALSE 38293
// k := 1 ;
38285: LD_ADDR_VAR 0 8
38289: PUSH
38290: LD_INT 1
38292: ST_TO_ADDR
// if not k then
38293: LD_VAR 0 8
38297: NOT
38298: IFFALSE 38310
// k := array ;
38300: LD_ADDR_VAR 0 8
38304: PUSH
38305: LD_VAR 0 1
38309: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38310: LD_ADDR_VAR 0 10
38314: PUSH
38315: LD_VAR 0 10
38319: PPUSH
38320: LD_VAR 0 8
38324: PPUSH
38325: LD_VAR 0 1
38329: PUSH
38330: LD_VAR 0 7
38334: ARRAY
38335: PPUSH
38336: CALL_OW 1
38340: ST_TO_ADDR
// end ;
38341: GO 38254
38343: POP
38344: POP
// array := tmp ;
38345: LD_ADDR_VAR 0 1
38349: PUSH
38350: LD_VAR 0 10
38354: ST_TO_ADDR
// end ;
38355: GO 38236
38357: POP
38358: POP
// result := array ;
38359: LD_ADDR_VAR 0 5
38363: PUSH
38364: LD_VAR 0 1
38368: ST_TO_ADDR
// end ;
38369: LD_VAR 0 5
38373: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38374: LD_INT 0
38376: PPUSH
38377: PPUSH
// result := 0 ;
38378: LD_ADDR_VAR 0 3
38382: PUSH
38383: LD_INT 0
38385: ST_TO_ADDR
// if not array or not value in array then
38386: LD_VAR 0 1
38390: NOT
38391: IFTRUE 38406
38393: PUSH
38394: LD_VAR 0 2
38398: PUSH
38399: LD_VAR 0 1
38403: IN
38404: NOT
38405: OR
38406: IFFALSE 38410
// exit ;
38408: GO 38464
// for i = 1 to array do
38410: LD_ADDR_VAR 0 4
38414: PUSH
38415: DOUBLE
38416: LD_INT 1
38418: DEC
38419: ST_TO_ADDR
38420: LD_VAR 0 1
38424: PUSH
38425: FOR_TO
38426: IFFALSE 38462
// if value = array [ i ] then
38428: LD_VAR 0 2
38432: PUSH
38433: LD_VAR 0 1
38437: PUSH
38438: LD_VAR 0 4
38442: ARRAY
38443: EQUAL
38444: IFFALSE 38460
// begin result := i ;
38446: LD_ADDR_VAR 0 3
38450: PUSH
38451: LD_VAR 0 4
38455: ST_TO_ADDR
// exit ;
38456: POP
38457: POP
38458: GO 38464
// end ;
38460: GO 38425
38462: POP
38463: POP
// end ;
38464: LD_VAR 0 3
38468: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38469: LD_INT 0
38471: PPUSH
// vc_chassis := chassis ;
38472: LD_ADDR_OWVAR 37
38476: PUSH
38477: LD_VAR 0 1
38481: ST_TO_ADDR
// vc_engine := engine ;
38482: LD_ADDR_OWVAR 39
38486: PUSH
38487: LD_VAR 0 2
38491: ST_TO_ADDR
// vc_control := control ;
38492: LD_ADDR_OWVAR 38
38496: PUSH
38497: LD_VAR 0 3
38501: ST_TO_ADDR
// vc_weapon := weapon ;
38502: LD_ADDR_OWVAR 40
38506: PUSH
38507: LD_VAR 0 4
38511: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38512: LD_ADDR_OWVAR 41
38516: PUSH
38517: LD_VAR 0 5
38521: ST_TO_ADDR
// end ;
38522: LD_VAR 0 6
38526: RET
// export function WantPlant ( unit ) ; var task ; begin
38527: LD_INT 0
38529: PPUSH
38530: PPUSH
// result := false ;
38531: LD_ADDR_VAR 0 2
38535: PUSH
38536: LD_INT 0
38538: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38539: LD_ADDR_VAR 0 3
38543: PUSH
38544: LD_VAR 0 1
38548: PPUSH
38549: CALL_OW 437
38553: ST_TO_ADDR
// if task then
38554: LD_VAR 0 3
38558: IFFALSE 38586
// if task [ 1 ] [ 1 ] = p then
38560: LD_VAR 0 3
38564: PUSH
38565: LD_INT 1
38567: ARRAY
38568: PUSH
38569: LD_INT 1
38571: ARRAY
38572: PUSH
38573: LD_STRING p
38575: EQUAL
38576: IFFALSE 38586
// result := true ;
38578: LD_ADDR_VAR 0 2
38582: PUSH
38583: LD_INT 1
38585: ST_TO_ADDR
// end ;
38586: LD_VAR 0 2
38590: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38591: LD_INT 0
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
// if pos < 1 then
38597: LD_VAR 0 2
38601: PUSH
38602: LD_INT 1
38604: LESS
38605: IFFALSE 38609
// exit ;
38607: GO 38912
// if pos = 1 then
38609: LD_VAR 0 2
38613: PUSH
38614: LD_INT 1
38616: EQUAL
38617: IFFALSE 38650
// result := Replace ( arr , pos [ 1 ] , value ) else
38619: LD_ADDR_VAR 0 4
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: LD_VAR 0 2
38633: PUSH
38634: LD_INT 1
38636: ARRAY
38637: PPUSH
38638: LD_VAR 0 3
38642: PPUSH
38643: CALL_OW 1
38647: ST_TO_ADDR
38648: GO 38912
// begin tmp := arr ;
38650: LD_ADDR_VAR 0 6
38654: PUSH
38655: LD_VAR 0 1
38659: ST_TO_ADDR
// s_arr := [ tmp ] ;
38660: LD_ADDR_VAR 0 7
38664: PUSH
38665: LD_VAR 0 6
38669: PUSH
38670: EMPTY
38671: LIST
38672: ST_TO_ADDR
// for i = 1 to pos - 1 do
38673: LD_ADDR_VAR 0 5
38677: PUSH
38678: DOUBLE
38679: LD_INT 1
38681: DEC
38682: ST_TO_ADDR
38683: LD_VAR 0 2
38687: PUSH
38688: LD_INT 1
38690: MINUS
38691: PUSH
38692: FOR_TO
38693: IFFALSE 38738
// begin tmp := tmp [ pos [ i ] ] ;
38695: LD_ADDR_VAR 0 6
38699: PUSH
38700: LD_VAR 0 6
38704: PUSH
38705: LD_VAR 0 2
38709: PUSH
38710: LD_VAR 0 5
38714: ARRAY
38715: ARRAY
38716: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38717: LD_ADDR_VAR 0 7
38721: PUSH
38722: LD_VAR 0 7
38726: PUSH
38727: LD_VAR 0 6
38731: PUSH
38732: EMPTY
38733: LIST
38734: ADD
38735: ST_TO_ADDR
// end ;
38736: GO 38692
38738: POP
38739: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38740: LD_ADDR_VAR 0 6
38744: PUSH
38745: LD_VAR 0 6
38749: PPUSH
38750: LD_VAR 0 2
38754: PUSH
38755: LD_VAR 0 2
38759: ARRAY
38760: PPUSH
38761: LD_VAR 0 3
38765: PPUSH
38766: CALL_OW 1
38770: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38771: LD_ADDR_VAR 0 7
38775: PUSH
38776: LD_VAR 0 7
38780: PPUSH
38781: LD_VAR 0 7
38785: PPUSH
38786: LD_VAR 0 6
38790: PPUSH
38791: CALL_OW 1
38795: ST_TO_ADDR
// for i = s_arr downto 2 do
38796: LD_ADDR_VAR 0 5
38800: PUSH
38801: DOUBLE
38802: LD_VAR 0 7
38806: INC
38807: ST_TO_ADDR
38808: LD_INT 2
38810: PUSH
38811: FOR_DOWNTO
38812: IFFALSE 38896
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38814: LD_ADDR_VAR 0 6
38818: PUSH
38819: LD_VAR 0 7
38823: PUSH
38824: LD_VAR 0 5
38828: PUSH
38829: LD_INT 1
38831: MINUS
38832: ARRAY
38833: PPUSH
38834: LD_VAR 0 2
38838: PUSH
38839: LD_VAR 0 5
38843: PUSH
38844: LD_INT 1
38846: MINUS
38847: ARRAY
38848: PPUSH
38849: LD_VAR 0 7
38853: PUSH
38854: LD_VAR 0 5
38858: ARRAY
38859: PPUSH
38860: CALL_OW 1
38864: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38865: LD_ADDR_VAR 0 7
38869: PUSH
38870: LD_VAR 0 7
38874: PPUSH
38875: LD_VAR 0 5
38879: PUSH
38880: LD_INT 1
38882: MINUS
38883: PPUSH
38884: LD_VAR 0 6
38888: PPUSH
38889: CALL_OW 1
38893: ST_TO_ADDR
// end ;
38894: GO 38811
38896: POP
38897: POP
// result := s_arr [ 1 ] ;
38898: LD_ADDR_VAR 0 4
38902: PUSH
38903: LD_VAR 0 7
38907: PUSH
38908: LD_INT 1
38910: ARRAY
38911: ST_TO_ADDR
// end ; end ;
38912: LD_VAR 0 4
38916: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38917: LD_INT 0
38919: PPUSH
38920: PPUSH
// if not list then
38921: LD_VAR 0 1
38925: NOT
38926: IFFALSE 38930
// exit ;
38928: GO 39021
// i := list [ pos1 ] ;
38930: LD_ADDR_VAR 0 5
38934: PUSH
38935: LD_VAR 0 1
38939: PUSH
38940: LD_VAR 0 2
38944: ARRAY
38945: ST_TO_ADDR
// if not i then
38946: LD_VAR 0 5
38950: NOT
38951: IFFALSE 38955
// exit ;
38953: GO 39021
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38955: LD_ADDR_VAR 0 1
38959: PUSH
38960: LD_VAR 0 1
38964: PPUSH
38965: LD_VAR 0 2
38969: PPUSH
38970: LD_VAR 0 1
38974: PUSH
38975: LD_VAR 0 3
38979: ARRAY
38980: PPUSH
38981: CALL_OW 1
38985: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38986: LD_ADDR_VAR 0 1
38990: PUSH
38991: LD_VAR 0 1
38995: PPUSH
38996: LD_VAR 0 3
39000: PPUSH
39001: LD_VAR 0 5
39005: PPUSH
39006: CALL_OW 1
39010: ST_TO_ADDR
// result := list ;
39011: LD_ADDR_VAR 0 4
39015: PUSH
39016: LD_VAR 0 1
39020: ST_TO_ADDR
// end ;
39021: LD_VAR 0 4
39025: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39026: LD_INT 0
39028: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39029: LD_ADDR_VAR 0 5
39033: PUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: CALL_OW 250
39043: PPUSH
39044: LD_VAR 0 1
39048: PPUSH
39049: CALL_OW 251
39053: PPUSH
39054: LD_VAR 0 2
39058: PPUSH
39059: LD_VAR 0 3
39063: PPUSH
39064: LD_VAR 0 4
39068: PPUSH
39069: CALL 39451 0 5
39073: ST_TO_ADDR
// end ;
39074: LD_VAR 0 5
39078: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39079: LD_INT 0
39081: PPUSH
39082: PPUSH
39083: PPUSH
39084: PPUSH
// if not list or not unit then
39085: LD_VAR 0 2
39089: NOT
39090: IFTRUE 39099
39092: PUSH
39093: LD_VAR 0 1
39097: NOT
39098: OR
39099: IFFALSE 39103
// exit ;
39101: GO 39446
// result := [ ] ;
39103: LD_ADDR_VAR 0 5
39107: PUSH
39108: EMPTY
39109: ST_TO_ADDR
// for i in list do
39110: LD_ADDR_VAR 0 6
39114: PUSH
39115: LD_VAR 0 2
39119: PUSH
39120: FOR_IN
39121: IFFALSE 39339
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39123: LD_ADDR_VAR 0 8
39127: PUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: LD_VAR 0 6
39137: PUSH
39138: LD_INT 1
39140: ARRAY
39141: PPUSH
39142: LD_VAR 0 6
39146: PUSH
39147: LD_INT 2
39149: ARRAY
39150: PPUSH
39151: CALL_OW 297
39155: ST_TO_ADDR
// if not Count ( result ) then
39156: LD_VAR 0 5
39160: PPUSH
39161: CALL 35673 0 1
39165: NOT
39166: IFFALSE 39199
// begin result := Join ( result , [ i , tmp ] ) ;
39168: LD_ADDR_VAR 0 5
39172: PUSH
39173: LD_VAR 0 5
39177: PPUSH
39178: LD_VAR 0 6
39182: PUSH
39183: LD_VAR 0 8
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PPUSH
39192: CALL 71649 0 2
39196: ST_TO_ADDR
// continue ;
39197: GO 39120
// end ; if result [ result ] [ 2 ] <= tmp then
39199: LD_VAR 0 5
39203: PUSH
39204: LD_VAR 0 5
39208: ARRAY
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: PUSH
39214: LD_VAR 0 8
39218: LESSEQUAL
39219: IFFALSE 39252
// result := Join ( result , [ i , tmp ] ) else
39221: LD_ADDR_VAR 0 5
39225: PUSH
39226: LD_VAR 0 5
39230: PPUSH
39231: LD_VAR 0 6
39235: PUSH
39236: LD_VAR 0 8
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PPUSH
39245: CALL 71649 0 2
39249: ST_TO_ADDR
39250: GO 39337
// begin for j := 1 to Count ( result ) do
39252: LD_ADDR_VAR 0 7
39256: PUSH
39257: DOUBLE
39258: LD_INT 1
39260: DEC
39261: ST_TO_ADDR
39262: LD_VAR 0 5
39266: PPUSH
39267: CALL 35673 0 1
39271: PUSH
39272: FOR_TO
39273: IFFALSE 39335
// begin if tmp < result [ j ] [ 2 ] then
39275: LD_VAR 0 8
39279: PUSH
39280: LD_VAR 0 5
39284: PUSH
39285: LD_VAR 0 7
39289: ARRAY
39290: PUSH
39291: LD_INT 2
39293: ARRAY
39294: LESS
39295: IFFALSE 39333
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39297: LD_ADDR_VAR 0 5
39301: PUSH
39302: LD_VAR 0 5
39306: PPUSH
39307: LD_VAR 0 7
39311: PPUSH
39312: LD_VAR 0 6
39316: PUSH
39317: LD_VAR 0 8
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PPUSH
39326: CALL_OW 2
39330: ST_TO_ADDR
// break ;
39331: GO 39335
// end ; end ;
39333: GO 39272
39335: POP
39336: POP
// end ; end ;
39337: GO 39120
39339: POP
39340: POP
// if result and not asc then
39341: LD_VAR 0 5
39345: IFFALSE 39354
39347: PUSH
39348: LD_VAR 0 3
39352: NOT
39353: AND
39354: IFFALSE 39371
// result := ReverseArray ( result ) ;
39356: LD_ADDR_VAR 0 5
39360: PUSH
39361: LD_VAR 0 5
39365: PPUSH
39366: CALL 66729 0 1
39370: ST_TO_ADDR
// tmp := [ ] ;
39371: LD_ADDR_VAR 0 8
39375: PUSH
39376: EMPTY
39377: ST_TO_ADDR
// if mode then
39378: LD_VAR 0 4
39382: IFFALSE 39446
// begin for i := 1 to result do
39384: LD_ADDR_VAR 0 6
39388: PUSH
39389: DOUBLE
39390: LD_INT 1
39392: DEC
39393: ST_TO_ADDR
39394: LD_VAR 0 5
39398: PUSH
39399: FOR_TO
39400: IFFALSE 39434
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39402: LD_ADDR_VAR 0 8
39406: PUSH
39407: LD_VAR 0 8
39411: PPUSH
39412: LD_VAR 0 5
39416: PUSH
39417: LD_VAR 0 6
39421: ARRAY
39422: PUSH
39423: LD_INT 1
39425: ARRAY
39426: PPUSH
39427: CALL 71649 0 2
39431: ST_TO_ADDR
39432: GO 39399
39434: POP
39435: POP
// result := tmp ;
39436: LD_ADDR_VAR 0 5
39440: PUSH
39441: LD_VAR 0 8
39445: ST_TO_ADDR
// end ; end ;
39446: LD_VAR 0 5
39450: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39451: LD_INT 0
39453: PPUSH
39454: PPUSH
39455: PPUSH
39456: PPUSH
// if not list then
39457: LD_VAR 0 3
39461: NOT
39462: IFFALSE 39466
// exit ;
39464: GO 39856
// result := [ ] ;
39466: LD_ADDR_VAR 0 6
39470: PUSH
39471: EMPTY
39472: ST_TO_ADDR
// for i in list do
39473: LD_ADDR_VAR 0 7
39477: PUSH
39478: LD_VAR 0 3
39482: PUSH
39483: FOR_IN
39484: IFFALSE 39686
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39486: LD_ADDR_VAR 0 9
39490: PUSH
39491: LD_VAR 0 7
39495: PPUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: LD_VAR 0 2
39505: PPUSH
39506: CALL_OW 297
39510: ST_TO_ADDR
// if not result then
39511: LD_VAR 0 6
39515: NOT
39516: IFFALSE 39542
// result := [ [ i , tmp ] ] else
39518: LD_ADDR_VAR 0 6
39522: PUSH
39523: LD_VAR 0 7
39527: PUSH
39528: LD_VAR 0 9
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: ST_TO_ADDR
39540: GO 39684
// begin if result [ result ] [ 2 ] <= tmp then
39542: LD_VAR 0 6
39546: PUSH
39547: LD_VAR 0 6
39551: ARRAY
39552: PUSH
39553: LD_INT 2
39555: ARRAY
39556: PUSH
39557: LD_VAR 0 9
39561: LESSEQUAL
39562: IFFALSE 39604
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39564: LD_ADDR_VAR 0 6
39568: PUSH
39569: LD_VAR 0 6
39573: PPUSH
39574: LD_VAR 0 6
39578: PUSH
39579: LD_INT 1
39581: PLUS
39582: PPUSH
39583: LD_VAR 0 7
39587: PUSH
39588: LD_VAR 0 9
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PPUSH
39597: CALL_OW 2
39601: ST_TO_ADDR
39602: GO 39684
// for j := 1 to result do
39604: LD_ADDR_VAR 0 8
39608: PUSH
39609: DOUBLE
39610: LD_INT 1
39612: DEC
39613: ST_TO_ADDR
39614: LD_VAR 0 6
39618: PUSH
39619: FOR_TO
39620: IFFALSE 39682
// begin if tmp < result [ j ] [ 2 ] then
39622: LD_VAR 0 9
39626: PUSH
39627: LD_VAR 0 6
39631: PUSH
39632: LD_VAR 0 8
39636: ARRAY
39637: PUSH
39638: LD_INT 2
39640: ARRAY
39641: LESS
39642: IFFALSE 39680
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39644: LD_ADDR_VAR 0 6
39648: PUSH
39649: LD_VAR 0 6
39653: PPUSH
39654: LD_VAR 0 8
39658: PPUSH
39659: LD_VAR 0 7
39663: PUSH
39664: LD_VAR 0 9
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PPUSH
39673: CALL_OW 2
39677: ST_TO_ADDR
// break ;
39678: GO 39682
// end ; end ;
39680: GO 39619
39682: POP
39683: POP
// end ; end ;
39684: GO 39483
39686: POP
39687: POP
// if result and not asc then
39688: LD_VAR 0 6
39692: IFFALSE 39701
39694: PUSH
39695: LD_VAR 0 4
39699: NOT
39700: AND
39701: IFFALSE 39776
// begin tmp := result ;
39703: LD_ADDR_VAR 0 9
39707: PUSH
39708: LD_VAR 0 6
39712: ST_TO_ADDR
// for i = tmp downto 1 do
39713: LD_ADDR_VAR 0 7
39717: PUSH
39718: DOUBLE
39719: LD_VAR 0 9
39723: INC
39724: ST_TO_ADDR
39725: LD_INT 1
39727: PUSH
39728: FOR_DOWNTO
39729: IFFALSE 39774
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39731: LD_ADDR_VAR 0 6
39735: PUSH
39736: LD_VAR 0 6
39740: PPUSH
39741: LD_VAR 0 9
39745: PUSH
39746: LD_VAR 0 7
39750: MINUS
39751: PUSH
39752: LD_INT 1
39754: PLUS
39755: PPUSH
39756: LD_VAR 0 9
39760: PUSH
39761: LD_VAR 0 7
39765: ARRAY
39766: PPUSH
39767: CALL_OW 1
39771: ST_TO_ADDR
39772: GO 39728
39774: POP
39775: POP
// end ; tmp := [ ] ;
39776: LD_ADDR_VAR 0 9
39780: PUSH
39781: EMPTY
39782: ST_TO_ADDR
// if mode then
39783: LD_VAR 0 5
39787: IFFALSE 39856
// begin for i = 1 to result do
39789: LD_ADDR_VAR 0 7
39793: PUSH
39794: DOUBLE
39795: LD_INT 1
39797: DEC
39798: ST_TO_ADDR
39799: LD_VAR 0 6
39803: PUSH
39804: FOR_TO
39805: IFFALSE 39844
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39807: LD_ADDR_VAR 0 9
39811: PUSH
39812: LD_VAR 0 9
39816: PPUSH
39817: LD_VAR 0 7
39821: PPUSH
39822: LD_VAR 0 6
39826: PUSH
39827: LD_VAR 0 7
39831: ARRAY
39832: PUSH
39833: LD_INT 1
39835: ARRAY
39836: PPUSH
39837: CALL_OW 1
39841: ST_TO_ADDR
39842: GO 39804
39844: POP
39845: POP
// result := tmp ;
39846: LD_ADDR_VAR 0 6
39850: PUSH
39851: LD_VAR 0 9
39855: ST_TO_ADDR
// end ; end ;
39856: LD_VAR 0 6
39860: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39861: LD_INT 0
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39869: LD_ADDR_VAR 0 5
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: ST_TO_ADDR
// if not x or not y then
39891: LD_VAR 0 2
39895: NOT
39896: IFTRUE 39905
39898: PUSH
39899: LD_VAR 0 3
39903: NOT
39904: OR
39905: IFFALSE 39909
// exit ;
39907: GO 41565
// if not range then
39909: LD_VAR 0 4
39913: NOT
39914: IFFALSE 39924
// range := 10 ;
39916: LD_ADDR_VAR 0 4
39920: PUSH
39921: LD_INT 10
39923: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39924: LD_ADDR_VAR 0 8
39928: PUSH
39929: LD_INT 81
39931: PUSH
39932: LD_VAR 0 1
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 92
39943: PUSH
39944: LD_VAR 0 2
39948: PUSH
39949: LD_VAR 0 3
39953: PUSH
39954: LD_VAR 0 4
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: LD_INT 21
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: LIST
39986: PPUSH
39987: CALL_OW 69
39991: ST_TO_ADDR
// if not tmp then
39992: LD_VAR 0 8
39996: NOT
39997: IFFALSE 40001
// exit ;
39999: GO 41565
// for i in tmp do
40001: LD_ADDR_VAR 0 6
40005: PUSH
40006: LD_VAR 0 8
40010: PUSH
40011: FOR_IN
40012: IFFALSE 41540
// begin points := [ 0 , 0 , 0 ] ;
40014: LD_ADDR_VAR 0 9
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: ST_TO_ADDR
// bpoints := 1 ;
40033: LD_ADDR_VAR 0 10
40037: PUSH
40038: LD_INT 1
40040: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40041: LD_VAR 0 6
40045: PPUSH
40046: CALL_OW 247
40050: PUSH
40051: LD_INT 1
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40059
40057: GO 40641
40059: POP
// begin if GetClass ( i ) = 1 then
40060: LD_VAR 0 6
40064: PPUSH
40065: CALL_OW 257
40069: PUSH
40070: LD_INT 1
40072: EQUAL
40073: IFFALSE 40094
// points := [ 10 , 5 , 3 ] ;
40075: LD_ADDR_VAR 0 9
40079: PUSH
40080: LD_INT 10
40082: PUSH
40083: LD_INT 5
40085: PUSH
40086: LD_INT 3
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40094: LD_VAR 0 6
40098: PPUSH
40099: CALL_OW 257
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: LD_INT 4
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: LIST
40117: IN
40118: IFFALSE 40139
// points := [ 3 , 2 , 1 ] ;
40120: LD_ADDR_VAR 0 9
40124: PUSH
40125: LD_INT 3
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40139: LD_VAR 0 6
40143: PPUSH
40144: CALL_OW 257
40148: PUSH
40149: LD_INT 5
40151: EQUAL
40152: IFFALSE 40173
// points := [ 130 , 5 , 2 ] ;
40154: LD_ADDR_VAR 0 9
40158: PUSH
40159: LD_INT 130
40161: PUSH
40162: LD_INT 5
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: LIST
40172: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40173: LD_VAR 0 6
40177: PPUSH
40178: CALL_OW 257
40182: PUSH
40183: LD_INT 8
40185: EQUAL
40186: IFFALSE 40207
// points := [ 35 , 35 , 30 ] ;
40188: LD_ADDR_VAR 0 9
40192: PUSH
40193: LD_INT 35
40195: PUSH
40196: LD_INT 35
40198: PUSH
40199: LD_INT 30
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40207: LD_VAR 0 6
40211: PPUSH
40212: CALL_OW 257
40216: PUSH
40217: LD_INT 9
40219: EQUAL
40220: IFFALSE 40241
// points := [ 20 , 55 , 40 ] ;
40222: LD_ADDR_VAR 0 9
40226: PUSH
40227: LD_INT 20
40229: PUSH
40230: LD_INT 55
40232: PUSH
40233: LD_INT 40
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40241: LD_VAR 0 6
40245: PPUSH
40246: CALL_OW 257
40250: PUSH
40251: LD_INT 12
40253: PUSH
40254: LD_INT 16
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: IN
40261: IFFALSE 40282
// points := [ 5 , 3 , 2 ] ;
40263: LD_ADDR_VAR 0 9
40267: PUSH
40268: LD_INT 5
40270: PUSH
40271: LD_INT 3
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40282: LD_VAR 0 6
40286: PPUSH
40287: CALL_OW 257
40291: PUSH
40292: LD_INT 17
40294: EQUAL
40295: IFFALSE 40316
// points := [ 100 , 50 , 75 ] ;
40297: LD_ADDR_VAR 0 9
40301: PUSH
40302: LD_INT 100
40304: PUSH
40305: LD_INT 50
40307: PUSH
40308: LD_INT 75
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: LIST
40315: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40316: LD_VAR 0 6
40320: PPUSH
40321: CALL_OW 257
40325: PUSH
40326: LD_INT 15
40328: EQUAL
40329: IFFALSE 40350
// points := [ 10 , 5 , 3 ] ;
40331: LD_ADDR_VAR 0 9
40335: PUSH
40336: LD_INT 10
40338: PUSH
40339: LD_INT 5
40341: PUSH
40342: LD_INT 3
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40350: LD_VAR 0 6
40354: PPUSH
40355: CALL_OW 257
40359: PUSH
40360: LD_INT 14
40362: EQUAL
40363: IFFALSE 40384
// points := [ 10 , 0 , 0 ] ;
40365: LD_ADDR_VAR 0 9
40369: PUSH
40370: LD_INT 10
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40384: LD_VAR 0 6
40388: PPUSH
40389: CALL_OW 257
40393: PUSH
40394: LD_INT 11
40396: EQUAL
40397: IFFALSE 40418
// points := [ 30 , 10 , 5 ] ;
40399: LD_ADDR_VAR 0 9
40403: PUSH
40404: LD_INT 30
40406: PUSH
40407: LD_INT 10
40409: PUSH
40410: LD_INT 5
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40418: LD_VAR 0 1
40422: PPUSH
40423: LD_INT 5
40425: PPUSH
40426: CALL_OW 321
40430: PUSH
40431: LD_INT 2
40433: EQUAL
40434: IFFALSE 40451
// bpoints := bpoints * 1.8 ;
40436: LD_ADDR_VAR 0 10
40440: PUSH
40441: LD_VAR 0 10
40445: PUSH
40446: LD_REAL  1.80000000000000E+0000
40449: MUL
40450: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40451: LD_VAR 0 6
40455: PPUSH
40456: CALL_OW 257
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 2
40466: PUSH
40467: LD_INT 3
40469: PUSH
40470: LD_INT 4
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: IN
40479: IFFALSE 40499
40481: PUSH
40482: LD_VAR 0 1
40486: PPUSH
40487: LD_INT 51
40489: PPUSH
40490: CALL_OW 321
40494: PUSH
40495: LD_INT 2
40497: EQUAL
40498: AND
40499: IFFALSE 40516
// bpoints := bpoints * 1.2 ;
40501: LD_ADDR_VAR 0 10
40505: PUSH
40506: LD_VAR 0 10
40510: PUSH
40511: LD_REAL  1.20000000000000E+0000
40514: MUL
40515: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40516: LD_VAR 0 6
40520: PPUSH
40521: CALL_OW 257
40525: PUSH
40526: LD_INT 5
40528: PUSH
40529: LD_INT 7
40531: PUSH
40532: LD_INT 9
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: IN
40540: IFFALSE 40560
40542: PUSH
40543: LD_VAR 0 1
40547: PPUSH
40548: LD_INT 52
40550: PPUSH
40551: CALL_OW 321
40555: PUSH
40556: LD_INT 2
40558: EQUAL
40559: AND
40560: IFFALSE 40577
// bpoints := bpoints * 1.5 ;
40562: LD_ADDR_VAR 0 10
40566: PUSH
40567: LD_VAR 0 10
40571: PUSH
40572: LD_REAL  1.50000000000000E+0000
40575: MUL
40576: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40577: LD_VAR 0 1
40581: PPUSH
40582: LD_INT 66
40584: PPUSH
40585: CALL_OW 321
40589: PUSH
40590: LD_INT 2
40592: EQUAL
40593: IFFALSE 40610
// bpoints := bpoints * 1.1 ;
40595: LD_ADDR_VAR 0 10
40599: PUSH
40600: LD_VAR 0 10
40604: PUSH
40605: LD_REAL  1.10000000000000E+0000
40608: MUL
40609: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40610: LD_ADDR_VAR 0 10
40614: PUSH
40615: LD_VAR 0 10
40619: PUSH
40620: LD_VAR 0 6
40624: PPUSH
40625: LD_INT 1
40627: PPUSH
40628: CALL_OW 259
40632: PUSH
40633: LD_REAL  1.15000000000000E+0000
40636: MUL
40637: MUL
40638: ST_TO_ADDR
// end ; unit_vehicle :
40639: GO 41469
40641: LD_INT 2
40643: DOUBLE
40644: EQUAL
40645: IFTRUE 40649
40647: GO 41457
40649: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40650: LD_VAR 0 6
40654: PPUSH
40655: CALL_OW 264
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: LD_INT 42
40665: PUSH
40666: LD_INT 24
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: LIST
40673: IN
40674: IFFALSE 40695
// points := [ 25 , 5 , 3 ] ;
40676: LD_ADDR_VAR 0 9
40680: PUSH
40681: LD_INT 25
40683: PUSH
40684: LD_INT 5
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: LIST
40694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40695: LD_VAR 0 6
40699: PPUSH
40700: CALL_OW 264
40704: PUSH
40705: LD_INT 4
40707: PUSH
40708: LD_INT 43
40710: PUSH
40711: LD_INT 25
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: IN
40719: IFFALSE 40740
// points := [ 40 , 15 , 5 ] ;
40721: LD_ADDR_VAR 0 9
40725: PUSH
40726: LD_INT 40
40728: PUSH
40729: LD_INT 15
40731: PUSH
40732: LD_INT 5
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: LIST
40739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40740: LD_VAR 0 6
40744: PPUSH
40745: CALL_OW 264
40749: PUSH
40750: LD_INT 3
40752: PUSH
40753: LD_INT 23
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: IN
40760: IFFALSE 40781
// points := [ 7 , 25 , 8 ] ;
40762: LD_ADDR_VAR 0 9
40766: PUSH
40767: LD_INT 7
40769: PUSH
40770: LD_INT 25
40772: PUSH
40773: LD_INT 8
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: LIST
40780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40781: LD_VAR 0 6
40785: PPUSH
40786: CALL_OW 264
40790: PUSH
40791: LD_INT 5
40793: PUSH
40794: LD_INT 27
40796: PUSH
40797: LD_INT 44
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: LIST
40804: IN
40805: IFFALSE 40826
// points := [ 14 , 50 , 16 ] ;
40807: LD_ADDR_VAR 0 9
40811: PUSH
40812: LD_INT 14
40814: PUSH
40815: LD_INT 50
40817: PUSH
40818: LD_INT 16
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40826: LD_VAR 0 6
40830: PPUSH
40831: CALL_OW 264
40835: PUSH
40836: LD_INT 6
40838: PUSH
40839: LD_INT 46
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: IN
40846: IFFALSE 40867
// points := [ 32 , 120 , 70 ] ;
40848: LD_ADDR_VAR 0 9
40852: PUSH
40853: LD_INT 32
40855: PUSH
40856: LD_INT 120
40858: PUSH
40859: LD_INT 70
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40867: LD_VAR 0 6
40871: PPUSH
40872: CALL_OW 264
40876: PUSH
40877: LD_INT 7
40879: PUSH
40880: LD_INT 28
40882: PUSH
40883: LD_INT 45
40885: PUSH
40886: LD_INT 92
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: IN
40895: IFFALSE 40916
// points := [ 35 , 20 , 45 ] ;
40897: LD_ADDR_VAR 0 9
40901: PUSH
40902: LD_INT 35
40904: PUSH
40905: LD_INT 20
40907: PUSH
40908: LD_INT 45
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40916: LD_VAR 0 6
40920: PPUSH
40921: CALL_OW 264
40925: PUSH
40926: LD_INT 47
40928: PUSH
40929: EMPTY
40930: LIST
40931: IN
40932: IFFALSE 40953
// points := [ 67 , 45 , 75 ] ;
40934: LD_ADDR_VAR 0 9
40938: PUSH
40939: LD_INT 67
40941: PUSH
40942: LD_INT 45
40944: PUSH
40945: LD_INT 75
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40953: LD_VAR 0 6
40957: PPUSH
40958: CALL_OW 264
40962: PUSH
40963: LD_INT 26
40965: PUSH
40966: EMPTY
40967: LIST
40968: IN
40969: IFFALSE 40990
// points := [ 120 , 30 , 80 ] ;
40971: LD_ADDR_VAR 0 9
40975: PUSH
40976: LD_INT 120
40978: PUSH
40979: LD_INT 30
40981: PUSH
40982: LD_INT 80
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40990: LD_VAR 0 6
40994: PPUSH
40995: CALL_OW 264
40999: PUSH
41000: LD_INT 22
41002: PUSH
41003: EMPTY
41004: LIST
41005: IN
41006: IFFALSE 41027
// points := [ 40 , 1 , 1 ] ;
41008: LD_ADDR_VAR 0 9
41012: PUSH
41013: LD_INT 40
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41027: LD_VAR 0 6
41031: PPUSH
41032: CALL_OW 264
41036: PUSH
41037: LD_INT 29
41039: PUSH
41040: EMPTY
41041: LIST
41042: IN
41043: IFFALSE 41064
// points := [ 70 , 200 , 400 ] ;
41045: LD_ADDR_VAR 0 9
41049: PUSH
41050: LD_INT 70
41052: PUSH
41053: LD_INT 200
41055: PUSH
41056: LD_INT 400
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41064: LD_VAR 0 6
41068: PPUSH
41069: CALL_OW 264
41073: PUSH
41074: LD_INT 14
41076: PUSH
41077: LD_INT 53
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: IN
41084: IFFALSE 41105
// points := [ 40 , 10 , 20 ] ;
41086: LD_ADDR_VAR 0 9
41090: PUSH
41091: LD_INT 40
41093: PUSH
41094: LD_INT 10
41096: PUSH
41097: LD_INT 20
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41105: LD_VAR 0 6
41109: PPUSH
41110: CALL_OW 264
41114: PUSH
41115: LD_INT 9
41117: PUSH
41118: EMPTY
41119: LIST
41120: IN
41121: IFFALSE 41142
// points := [ 5 , 70 , 20 ] ;
41123: LD_ADDR_VAR 0 9
41127: PUSH
41128: LD_INT 5
41130: PUSH
41131: LD_INT 70
41133: PUSH
41134: LD_INT 20
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41142: LD_VAR 0 6
41146: PPUSH
41147: CALL_OW 264
41151: PUSH
41152: LD_INT 10
41154: PUSH
41155: EMPTY
41156: LIST
41157: IN
41158: IFFALSE 41179
// points := [ 35 , 110 , 70 ] ;
41160: LD_ADDR_VAR 0 9
41164: PUSH
41165: LD_INT 35
41167: PUSH
41168: LD_INT 110
41170: PUSH
41171: LD_INT 70
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41179: LD_VAR 0 6
41183: PPUSH
41184: CALL_OW 265
41188: PUSH
41189: LD_INT 25
41191: EQUAL
41192: IFFALSE 41213
// points := [ 80 , 65 , 100 ] ;
41194: LD_ADDR_VAR 0 9
41198: PUSH
41199: LD_INT 80
41201: PUSH
41202: LD_INT 65
41204: PUSH
41205: LD_INT 100
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: LIST
41212: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41213: LD_VAR 0 6
41217: PPUSH
41218: CALL_OW 263
41222: PUSH
41223: LD_INT 1
41225: EQUAL
41226: IFFALSE 41261
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41228: LD_ADDR_VAR 0 10
41232: PUSH
41233: LD_VAR 0 10
41237: PUSH
41238: LD_VAR 0 6
41242: PPUSH
41243: CALL_OW 311
41247: PPUSH
41248: LD_INT 3
41250: PPUSH
41251: CALL_OW 259
41255: PUSH
41256: LD_INT 4
41258: MUL
41259: MUL
41260: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41261: LD_VAR 0 6
41265: PPUSH
41266: CALL_OW 263
41270: PUSH
41271: LD_INT 2
41273: EQUAL
41274: IFFALSE 41325
// begin j := IsControledBy ( i ) ;
41276: LD_ADDR_VAR 0 7
41280: PUSH
41281: LD_VAR 0 6
41285: PPUSH
41286: CALL_OW 312
41290: ST_TO_ADDR
// if j then
41291: LD_VAR 0 7
41295: IFFALSE 41325
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41297: LD_ADDR_VAR 0 10
41301: PUSH
41302: LD_VAR 0 10
41306: PUSH
41307: LD_VAR 0 7
41311: PPUSH
41312: LD_INT 3
41314: PPUSH
41315: CALL_OW 259
41319: PUSH
41320: LD_INT 3
41322: MUL
41323: MUL
41324: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41325: LD_VAR 0 6
41329: PPUSH
41330: CALL_OW 264
41334: PUSH
41335: LD_INT 5
41337: PUSH
41338: LD_INT 6
41340: PUSH
41341: LD_INT 46
41343: PUSH
41344: LD_INT 44
41346: PUSH
41347: LD_INT 47
41349: PUSH
41350: LD_INT 45
41352: PUSH
41353: LD_INT 28
41355: PUSH
41356: LD_INT 7
41358: PUSH
41359: LD_INT 27
41361: PUSH
41362: LD_INT 29
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: IN
41377: IFFALSE 41397
41379: PUSH
41380: LD_VAR 0 1
41384: PPUSH
41385: LD_INT 52
41387: PPUSH
41388: CALL_OW 321
41392: PUSH
41393: LD_INT 2
41395: EQUAL
41396: AND
41397: IFFALSE 41414
// bpoints := bpoints * 1.2 ;
41399: LD_ADDR_VAR 0 10
41403: PUSH
41404: LD_VAR 0 10
41408: PUSH
41409: LD_REAL  1.20000000000000E+0000
41412: MUL
41413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41414: LD_VAR 0 6
41418: PPUSH
41419: CALL_OW 264
41423: PUSH
41424: LD_INT 6
41426: PUSH
41427: LD_INT 46
41429: PUSH
41430: LD_INT 47
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: IN
41438: IFFALSE 41455
// bpoints := bpoints * 1.2 ;
41440: LD_ADDR_VAR 0 10
41444: PUSH
41445: LD_VAR 0 10
41449: PUSH
41450: LD_REAL  1.20000000000000E+0000
41453: MUL
41454: ST_TO_ADDR
// end ; unit_building :
41455: GO 41469
41457: LD_INT 3
41459: DOUBLE
41460: EQUAL
41461: IFTRUE 41465
41463: GO 41468
41465: POP
// ; end ;
41466: GO 41469
41468: POP
// for j = 1 to 3 do
41469: LD_ADDR_VAR 0 7
41473: PUSH
41474: DOUBLE
41475: LD_INT 1
41477: DEC
41478: ST_TO_ADDR
41479: LD_INT 3
41481: PUSH
41482: FOR_TO
41483: IFFALSE 41536
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41485: LD_ADDR_VAR 0 5
41489: PUSH
41490: LD_VAR 0 5
41494: PPUSH
41495: LD_VAR 0 7
41499: PPUSH
41500: LD_VAR 0 5
41504: PUSH
41505: LD_VAR 0 7
41509: ARRAY
41510: PUSH
41511: LD_VAR 0 9
41515: PUSH
41516: LD_VAR 0 7
41520: ARRAY
41521: PUSH
41522: LD_VAR 0 10
41526: MUL
41527: PLUS
41528: PPUSH
41529: CALL_OW 1
41533: ST_TO_ADDR
41534: GO 41482
41536: POP
41537: POP
// end ;
41538: GO 40011
41540: POP
41541: POP
// result := Replace ( result , 4 , tmp ) ;
41542: LD_ADDR_VAR 0 5
41546: PUSH
41547: LD_VAR 0 5
41551: PPUSH
41552: LD_INT 4
41554: PPUSH
41555: LD_VAR 0 8
41559: PPUSH
41560: CALL_OW 1
41564: ST_TO_ADDR
// end ;
41565: LD_VAR 0 5
41569: RET
// export function DangerAtRange ( unit , range ) ; begin
41570: LD_INT 0
41572: PPUSH
// if not unit then
41573: LD_VAR 0 1
41577: NOT
41578: IFFALSE 41582
// exit ;
41580: GO 41627
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41582: LD_ADDR_VAR 0 3
41586: PUSH
41587: LD_VAR 0 1
41591: PPUSH
41592: CALL_OW 255
41596: PPUSH
41597: LD_VAR 0 1
41601: PPUSH
41602: CALL_OW 250
41606: PPUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: CALL_OW 251
41616: PPUSH
41617: LD_VAR 0 2
41621: PPUSH
41622: CALL 39861 0 4
41626: ST_TO_ADDR
// end ;
41627: LD_VAR 0 3
41631: RET
// export function DangerInArea ( side , area ) ; begin
41632: LD_INT 0
41634: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_VAR 0 2
41644: PPUSH
41645: LD_INT 81
41647: PUSH
41648: LD_VAR 0 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PPUSH
41657: CALL_OW 70
41661: ST_TO_ADDR
// end ;
41662: LD_VAR 0 3
41666: RET
// export function IsExtension ( b ) ; begin
41667: LD_INT 0
41669: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41670: LD_ADDR_VAR 0 2
41674: PUSH
41675: LD_VAR 0 1
41679: PUSH
41680: LD_INT 23
41682: PUSH
41683: LD_INT 20
41685: PUSH
41686: LD_INT 22
41688: PUSH
41689: LD_INT 17
41691: PUSH
41692: LD_INT 24
41694: PUSH
41695: LD_INT 21
41697: PUSH
41698: LD_INT 19
41700: PUSH
41701: LD_INT 16
41703: PUSH
41704: LD_INT 25
41706: PUSH
41707: LD_INT 18
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: IN
41722: ST_TO_ADDR
// end ;
41723: LD_VAR 0 2
41727: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41728: LD_INT 0
41730: PPUSH
41731: PPUSH
41732: PPUSH
// result := [ ] ;
41733: LD_ADDR_VAR 0 4
41737: PUSH
41738: EMPTY
41739: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41740: LD_ADDR_VAR 0 5
41744: PUSH
41745: LD_VAR 0 2
41749: PPUSH
41750: LD_INT 21
41752: PUSH
41753: LD_INT 3
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PPUSH
41760: CALL_OW 70
41764: ST_TO_ADDR
// if not tmp then
41765: LD_VAR 0 5
41769: NOT
41770: IFFALSE 41774
// exit ;
41772: GO 41838
// if checkLink then
41774: LD_VAR 0 3
41778: IFFALSE 41828
// begin for i in tmp do
41780: LD_ADDR_VAR 0 6
41784: PUSH
41785: LD_VAR 0 5
41789: PUSH
41790: FOR_IN
41791: IFFALSE 41826
// if GetBase ( i ) <> base then
41793: LD_VAR 0 6
41797: PPUSH
41798: CALL_OW 274
41802: PUSH
41803: LD_VAR 0 1
41807: NONEQUAL
41808: IFFALSE 41824
// ComLinkToBase ( base , i ) ;
41810: LD_VAR 0 1
41814: PPUSH
41815: LD_VAR 0 6
41819: PPUSH
41820: CALL_OW 169
41824: GO 41790
41826: POP
41827: POP
// end ; result := tmp ;
41828: LD_ADDR_VAR 0 4
41832: PUSH
41833: LD_VAR 0 5
41837: ST_TO_ADDR
// end ;
41838: LD_VAR 0 4
41842: RET
// export function ComComplete ( units , b ) ; var i ; begin
41843: LD_INT 0
41845: PPUSH
41846: PPUSH
// if not units then
41847: LD_VAR 0 1
41851: NOT
41852: IFFALSE 41856
// exit ;
41854: GO 41946
// for i in units do
41856: LD_ADDR_VAR 0 4
41860: PUSH
41861: LD_VAR 0 1
41865: PUSH
41866: FOR_IN
41867: IFFALSE 41944
// if BuildingStatus ( b ) = bs_build then
41869: LD_VAR 0 2
41873: PPUSH
41874: CALL_OW 461
41878: PUSH
41879: LD_INT 1
41881: EQUAL
41882: IFFALSE 41942
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41884: LD_VAR 0 4
41888: PPUSH
41889: LD_STRING h
41891: PUSH
41892: LD_VAR 0 2
41896: PPUSH
41897: CALL_OW 250
41901: PUSH
41902: LD_VAR 0 2
41906: PPUSH
41907: CALL_OW 251
41911: PUSH
41912: LD_VAR 0 2
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: PUSH
41935: EMPTY
41936: LIST
41937: PPUSH
41938: CALL_OW 446
41942: GO 41866
41944: POP
41945: POP
// end ;
41946: LD_VAR 0 3
41950: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41951: LD_INT 0
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41959: LD_VAR 0 1
41963: NOT
41964: IFTRUE 41981
41966: PUSH
41967: LD_VAR 0 1
41971: PPUSH
41972: CALL_OW 263
41976: PUSH
41977: LD_INT 2
41979: NONEQUAL
41980: OR
41981: IFFALSE 41985
// exit ;
41983: GO 42301
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41985: LD_ADDR_VAR 0 6
41989: PUSH
41990: LD_INT 22
41992: PUSH
41993: LD_VAR 0 1
41997: PPUSH
41998: CALL_OW 255
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 30
42012: PUSH
42013: LD_INT 36
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 34
42022: PUSH
42023: LD_INT 31
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PPUSH
42039: CALL_OW 69
42043: ST_TO_ADDR
// if not tmp then
42044: LD_VAR 0 6
42048: NOT
42049: IFFALSE 42053
// exit ;
42051: GO 42301
// result := [ ] ;
42053: LD_ADDR_VAR 0 2
42057: PUSH
42058: EMPTY
42059: ST_TO_ADDR
// for i in tmp do
42060: LD_ADDR_VAR 0 3
42064: PUSH
42065: LD_VAR 0 6
42069: PUSH
42070: FOR_IN
42071: IFFALSE 42142
// begin t := UnitsInside ( i ) ;
42073: LD_ADDR_VAR 0 4
42077: PUSH
42078: LD_VAR 0 3
42082: PPUSH
42083: CALL_OW 313
42087: ST_TO_ADDR
// if t then
42088: LD_VAR 0 4
42092: IFFALSE 42140
// for j in t do
42094: LD_ADDR_VAR 0 7
42098: PUSH
42099: LD_VAR 0 4
42103: PUSH
42104: FOR_IN
42105: IFFALSE 42138
// result := Replace ( result , result + 1 , j ) ;
42107: LD_ADDR_VAR 0 2
42111: PUSH
42112: LD_VAR 0 2
42116: PPUSH
42117: LD_VAR 0 2
42121: PUSH
42122: LD_INT 1
42124: PLUS
42125: PPUSH
42126: LD_VAR 0 7
42130: PPUSH
42131: CALL_OW 1
42135: ST_TO_ADDR
42136: GO 42104
42138: POP
42139: POP
// end ;
42140: GO 42070
42142: POP
42143: POP
// if not result then
42144: LD_VAR 0 2
42148: NOT
42149: IFFALSE 42153
// exit ;
42151: GO 42301
// mech := result [ 1 ] ;
42153: LD_ADDR_VAR 0 5
42157: PUSH
42158: LD_VAR 0 2
42162: PUSH
42163: LD_INT 1
42165: ARRAY
42166: ST_TO_ADDR
// if result > 1 then
42167: LD_VAR 0 2
42171: PUSH
42172: LD_INT 1
42174: GREATER
42175: IFFALSE 42287
// begin for i = 2 to result do
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: DOUBLE
42183: LD_INT 2
42185: DEC
42186: ST_TO_ADDR
42187: LD_VAR 0 2
42191: PUSH
42192: FOR_TO
42193: IFFALSE 42285
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42195: LD_ADDR_VAR 0 4
42199: PUSH
42200: LD_VAR 0 2
42204: PUSH
42205: LD_VAR 0 3
42209: ARRAY
42210: PPUSH
42211: LD_INT 3
42213: PPUSH
42214: CALL_OW 259
42218: PUSH
42219: LD_VAR 0 2
42223: PUSH
42224: LD_VAR 0 3
42228: ARRAY
42229: PPUSH
42230: CALL_OW 432
42234: MINUS
42235: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42236: LD_VAR 0 4
42240: PUSH
42241: LD_VAR 0 5
42245: PPUSH
42246: LD_INT 3
42248: PPUSH
42249: CALL_OW 259
42253: PUSH
42254: LD_VAR 0 5
42258: PPUSH
42259: CALL_OW 432
42263: MINUS
42264: GREATEREQUAL
42265: IFFALSE 42283
// mech := result [ i ] ;
42267: LD_ADDR_VAR 0 5
42271: PUSH
42272: LD_VAR 0 2
42276: PUSH
42277: LD_VAR 0 3
42281: ARRAY
42282: ST_TO_ADDR
// end ;
42283: GO 42192
42285: POP
42286: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42287: LD_VAR 0 1
42291: PPUSH
42292: LD_VAR 0 5
42296: PPUSH
42297: CALL_OW 135
// end ;
42301: LD_VAR 0 2
42305: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42306: LD_INT 0
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
42318: PPUSH
42319: PPUSH
42320: PPUSH
// result := [ ] ;
42321: LD_ADDR_VAR 0 7
42325: PUSH
42326: EMPTY
42327: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42328: LD_VAR 0 1
42332: PPUSH
42333: CALL_OW 266
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: IN
42348: NOT
42349: IFFALSE 42353
// exit ;
42351: GO 43993
// if name then
42353: LD_VAR 0 3
42357: IFFALSE 42373
// SetBName ( base_dep , name ) ;
42359: LD_VAR 0 1
42363: PPUSH
42364: LD_VAR 0 3
42368: PPUSH
42369: CALL_OW 500
// base := GetBase ( base_dep ) ;
42373: LD_ADDR_VAR 0 15
42377: PUSH
42378: LD_VAR 0 1
42382: PPUSH
42383: CALL_OW 274
42387: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42388: LD_ADDR_VAR 0 16
42392: PUSH
42393: LD_VAR 0 1
42397: PPUSH
42398: CALL_OW 255
42402: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42403: LD_ADDR_VAR 0 17
42407: PUSH
42408: LD_VAR 0 1
42412: PPUSH
42413: CALL_OW 248
42417: ST_TO_ADDR
// if sources then
42418: LD_VAR 0 5
42422: IFFALSE 42469
// for i = 1 to 3 do
42424: LD_ADDR_VAR 0 8
42428: PUSH
42429: DOUBLE
42430: LD_INT 1
42432: DEC
42433: ST_TO_ADDR
42434: LD_INT 3
42436: PUSH
42437: FOR_TO
42438: IFFALSE 42467
// AddResourceType ( base , i , sources [ i ] ) ;
42440: LD_VAR 0 15
42444: PPUSH
42445: LD_VAR 0 8
42449: PPUSH
42450: LD_VAR 0 5
42454: PUSH
42455: LD_VAR 0 8
42459: ARRAY
42460: PPUSH
42461: CALL_OW 276
42465: GO 42437
42467: POP
42468: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42469: LD_ADDR_VAR 0 18
42473: PUSH
42474: LD_VAR 0 15
42478: PPUSH
42479: LD_VAR 0 2
42483: PPUSH
42484: LD_INT 1
42486: PPUSH
42487: CALL 41728 0 3
42491: ST_TO_ADDR
// InitHc ;
42492: CALL_OW 19
// InitUc ;
42496: CALL_OW 18
// uc_side := side ;
42500: LD_ADDR_OWVAR 20
42504: PUSH
42505: LD_VAR 0 16
42509: ST_TO_ADDR
// uc_nation := nation ;
42510: LD_ADDR_OWVAR 21
42514: PUSH
42515: LD_VAR 0 17
42519: ST_TO_ADDR
// if buildings then
42520: LD_VAR 0 18
42524: IFFALSE 43852
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42526: LD_ADDR_VAR 0 19
42530: PUSH
42531: LD_VAR 0 18
42535: PPUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 30
42541: PUSH
42542: LD_INT 29
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 30
42551: PUSH
42552: LD_INT 30
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: PPUSH
42564: CALL_OW 72
42568: ST_TO_ADDR
// if tmp then
42569: LD_VAR 0 19
42573: IFFALSE 42621
// for i in tmp do
42575: LD_ADDR_VAR 0 8
42579: PUSH
42580: LD_VAR 0 19
42584: PUSH
42585: FOR_IN
42586: IFFALSE 42619
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42588: LD_VAR 0 8
42592: PPUSH
42593: CALL_OW 250
42597: PPUSH
42598: LD_VAR 0 8
42602: PPUSH
42603: CALL_OW 251
42607: PPUSH
42608: LD_VAR 0 16
42612: PPUSH
42613: CALL_OW 441
42617: GO 42585
42619: POP
42620: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42621: LD_VAR 0 18
42625: PPUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 30
42631: PUSH
42632: LD_INT 32
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 30
42641: PUSH
42642: LD_INT 33
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: PPUSH
42654: CALL_OW 72
42658: IFFALSE 42746
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42660: LD_ADDR_VAR 0 8
42664: PUSH
42665: LD_VAR 0 18
42669: PPUSH
42670: LD_INT 2
42672: PUSH
42673: LD_INT 30
42675: PUSH
42676: LD_INT 32
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 30
42685: PUSH
42686: LD_INT 33
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: PPUSH
42698: CALL_OW 72
42702: PUSH
42703: FOR_IN
42704: IFFALSE 42744
// begin if not GetBWeapon ( i ) then
42706: LD_VAR 0 8
42710: PPUSH
42711: CALL_OW 269
42715: NOT
42716: IFFALSE 42742
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42718: LD_VAR 0 8
42722: PPUSH
42723: LD_VAR 0 8
42727: PPUSH
42728: LD_VAR 0 2
42732: PPUSH
42733: CALL 43998 0 2
42737: PPUSH
42738: CALL_OW 431
// end ;
42742: GO 42703
42744: POP
42745: POP
// end ; for i = 1 to personel do
42746: LD_ADDR_VAR 0 8
42750: PUSH
42751: DOUBLE
42752: LD_INT 1
42754: DEC
42755: ST_TO_ADDR
42756: LD_VAR 0 6
42760: PUSH
42761: FOR_TO
42762: IFFALSE 43832
// begin if i > 4 then
42764: LD_VAR 0 8
42768: PUSH
42769: LD_INT 4
42771: GREATER
42772: IFFALSE 42776
// break ;
42774: GO 43832
// case i of 1 :
42776: LD_VAR 0 8
42780: PUSH
42781: LD_INT 1
42783: DOUBLE
42784: EQUAL
42785: IFTRUE 42789
42787: GO 42869
42789: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42790: LD_ADDR_VAR 0 12
42794: PUSH
42795: LD_VAR 0 18
42799: PPUSH
42800: LD_INT 22
42802: PUSH
42803: LD_VAR 0 16
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 58
42814: PUSH
42815: EMPTY
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 30
42823: PUSH
42824: LD_INT 32
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 30
42833: PUSH
42834: LD_INT 4
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 30
42843: PUSH
42844: LD_INT 5
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: PPUSH
42862: CALL_OW 72
42866: ST_TO_ADDR
42867: GO 43091
42869: LD_INT 2
42871: DOUBLE
42872: EQUAL
42873: IFTRUE 42877
42875: GO 42939
42877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42878: LD_ADDR_VAR 0 12
42882: PUSH
42883: LD_VAR 0 18
42887: PPUSH
42888: LD_INT 22
42890: PUSH
42891: LD_VAR 0 16
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 30
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 30
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PPUSH
42932: CALL_OW 72
42936: ST_TO_ADDR
42937: GO 43091
42939: LD_INT 3
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42947
42945: GO 43009
42947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42948: LD_ADDR_VAR 0 12
42952: PUSH
42953: LD_VAR 0 18
42957: PPUSH
42958: LD_INT 22
42960: PUSH
42961: LD_VAR 0 16
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: LD_INT 30
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 30
42985: PUSH
42986: LD_INT 3
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PPUSH
43002: CALL_OW 72
43006: ST_TO_ADDR
43007: GO 43091
43009: LD_INT 4
43011: DOUBLE
43012: EQUAL
43013: IFTRUE 43017
43015: GO 43090
43017: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43018: LD_ADDR_VAR 0 12
43022: PUSH
43023: LD_VAR 0 18
43027: PPUSH
43028: LD_INT 22
43030: PUSH
43031: LD_VAR 0 16
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 30
43045: PUSH
43046: LD_INT 6
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 30
43055: PUSH
43056: LD_INT 7
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 30
43065: PUSH
43066: LD_INT 8
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PPUSH
43083: CALL_OW 72
43087: ST_TO_ADDR
43088: GO 43091
43090: POP
// if i = 1 then
43091: LD_VAR 0 8
43095: PUSH
43096: LD_INT 1
43098: EQUAL
43099: IFFALSE 43210
// begin tmp := [ ] ;
43101: LD_ADDR_VAR 0 19
43105: PUSH
43106: EMPTY
43107: ST_TO_ADDR
// for j in f do
43108: LD_ADDR_VAR 0 9
43112: PUSH
43113: LD_VAR 0 12
43117: PUSH
43118: FOR_IN
43119: IFFALSE 43192
// if GetBType ( j ) = b_bunker then
43121: LD_VAR 0 9
43125: PPUSH
43126: CALL_OW 266
43130: PUSH
43131: LD_INT 32
43133: EQUAL
43134: IFFALSE 43161
// tmp := Insert ( tmp , 1 , j ) else
43136: LD_ADDR_VAR 0 19
43140: PUSH
43141: LD_VAR 0 19
43145: PPUSH
43146: LD_INT 1
43148: PPUSH
43149: LD_VAR 0 9
43153: PPUSH
43154: CALL_OW 2
43158: ST_TO_ADDR
43159: GO 43190
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43161: LD_ADDR_VAR 0 19
43165: PUSH
43166: LD_VAR 0 19
43170: PPUSH
43171: LD_VAR 0 19
43175: PUSH
43176: LD_INT 1
43178: PLUS
43179: PPUSH
43180: LD_VAR 0 9
43184: PPUSH
43185: CALL_OW 2
43189: ST_TO_ADDR
43190: GO 43118
43192: POP
43193: POP
// if tmp then
43194: LD_VAR 0 19
43198: IFFALSE 43210
// f := tmp ;
43200: LD_ADDR_VAR 0 12
43204: PUSH
43205: LD_VAR 0 19
43209: ST_TO_ADDR
// end ; x := personel [ i ] ;
43210: LD_ADDR_VAR 0 13
43214: PUSH
43215: LD_VAR 0 6
43219: PUSH
43220: LD_VAR 0 8
43224: ARRAY
43225: ST_TO_ADDR
// if x = - 1 then
43226: LD_VAR 0 13
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: EQUAL
43235: IFFALSE 43446
// begin for j in f do
43237: LD_ADDR_VAR 0 9
43241: PUSH
43242: LD_VAR 0 12
43246: PUSH
43247: FOR_IN
43248: IFFALSE 43442
// repeat InitHc ;
43250: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43254: LD_VAR 0 9
43258: PPUSH
43259: CALL_OW 266
43263: PUSH
43264: LD_INT 5
43266: EQUAL
43267: IFFALSE 43337
// begin if UnitsInside ( j ) < 3 then
43269: LD_VAR 0 9
43273: PPUSH
43274: CALL_OW 313
43278: PUSH
43279: LD_INT 3
43281: LESS
43282: IFFALSE 43318
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43284: LD_INT 0
43286: PPUSH
43287: LD_INT 5
43289: PUSH
43290: LD_INT 8
43292: PUSH
43293: LD_INT 9
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: LIST
43300: PUSH
43301: LD_VAR 0 17
43305: ARRAY
43306: PPUSH
43307: LD_VAR 0 4
43311: PPUSH
43312: CALL_OW 380
43316: GO 43335
// PrepareHuman ( false , i , skill ) ;
43318: LD_INT 0
43320: PPUSH
43321: LD_VAR 0 8
43325: PPUSH
43326: LD_VAR 0 4
43330: PPUSH
43331: CALL_OW 380
// end else
43335: GO 43354
// PrepareHuman ( false , i , skill ) ;
43337: LD_INT 0
43339: PPUSH
43340: LD_VAR 0 8
43344: PPUSH
43345: LD_VAR 0 4
43349: PPUSH
43350: CALL_OW 380
// un := CreateHuman ;
43354: LD_ADDR_VAR 0 14
43358: PUSH
43359: CALL_OW 44
43363: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43364: LD_ADDR_VAR 0 7
43368: PUSH
43369: LD_VAR 0 7
43373: PPUSH
43374: LD_INT 1
43376: PPUSH
43377: LD_VAR 0 14
43381: PPUSH
43382: CALL_OW 2
43386: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43387: LD_VAR 0 14
43391: PPUSH
43392: LD_VAR 0 9
43396: PPUSH
43397: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43401: LD_VAR 0 9
43405: PPUSH
43406: CALL_OW 313
43410: PUSH
43411: LD_INT 6
43413: EQUAL
43414: IFTRUE 43438
43416: PUSH
43417: LD_VAR 0 9
43421: PPUSH
43422: CALL_OW 266
43426: PUSH
43427: LD_INT 32
43429: PUSH
43430: LD_INT 31
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: IN
43437: OR
43438: IFFALSE 43250
43440: GO 43247
43442: POP
43443: POP
// end else
43444: GO 43830
// for j = 1 to x do
43446: LD_ADDR_VAR 0 9
43450: PUSH
43451: DOUBLE
43452: LD_INT 1
43454: DEC
43455: ST_TO_ADDR
43456: LD_VAR 0 13
43460: PUSH
43461: FOR_TO
43462: IFFALSE 43828
// begin InitHc ;
43464: CALL_OW 19
// if not f then
43468: LD_VAR 0 12
43472: NOT
43473: IFFALSE 43562
// begin PrepareHuman ( false , i , skill ) ;
43475: LD_INT 0
43477: PPUSH
43478: LD_VAR 0 8
43482: PPUSH
43483: LD_VAR 0 4
43487: PPUSH
43488: CALL_OW 380
// un := CreateHuman ;
43492: LD_ADDR_VAR 0 14
43496: PUSH
43497: CALL_OW 44
43501: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43502: LD_ADDR_VAR 0 7
43506: PUSH
43507: LD_VAR 0 7
43511: PPUSH
43512: LD_INT 1
43514: PPUSH
43515: LD_VAR 0 14
43519: PPUSH
43520: CALL_OW 2
43524: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43525: LD_VAR 0 14
43529: PPUSH
43530: LD_VAR 0 1
43534: PPUSH
43535: CALL_OW 250
43539: PPUSH
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 251
43549: PPUSH
43550: LD_INT 10
43552: PPUSH
43553: LD_INT 0
43555: PPUSH
43556: CALL_OW 50
// continue ;
43560: GO 43461
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43562: LD_VAR 0 12
43566: PUSH
43567: LD_INT 1
43569: ARRAY
43570: PPUSH
43571: CALL_OW 313
43575: IFFALSE 43603
43577: PUSH
43578: LD_VAR 0 12
43582: PUSH
43583: LD_INT 1
43585: ARRAY
43586: PPUSH
43587: CALL_OW 266
43591: PUSH
43592: LD_INT 32
43594: PUSH
43595: LD_INT 31
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: IN
43602: AND
43603: IFTRUE 43624
43605: PUSH
43606: LD_VAR 0 12
43610: PUSH
43611: LD_INT 1
43613: ARRAY
43614: PPUSH
43615: CALL_OW 313
43619: PUSH
43620: LD_INT 6
43622: EQUAL
43623: OR
43624: IFFALSE 43644
// f := Delete ( f , 1 ) ;
43626: LD_ADDR_VAR 0 12
43630: PUSH
43631: LD_VAR 0 12
43635: PPUSH
43636: LD_INT 1
43638: PPUSH
43639: CALL_OW 3
43643: ST_TO_ADDR
// if not f then
43644: LD_VAR 0 12
43648: NOT
43649: IFFALSE 43667
// begin x := x + 2 ;
43651: LD_ADDR_VAR 0 13
43655: PUSH
43656: LD_VAR 0 13
43660: PUSH
43661: LD_INT 2
43663: PLUS
43664: ST_TO_ADDR
// continue ;
43665: GO 43461
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43667: LD_VAR 0 12
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: PPUSH
43676: CALL_OW 266
43680: PUSH
43681: LD_INT 5
43683: EQUAL
43684: IFFALSE 43758
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43686: LD_VAR 0 12
43690: PUSH
43691: LD_INT 1
43693: ARRAY
43694: PPUSH
43695: CALL_OW 313
43699: PUSH
43700: LD_INT 3
43702: LESS
43703: IFFALSE 43739
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43705: LD_INT 0
43707: PPUSH
43708: LD_INT 5
43710: PUSH
43711: LD_INT 8
43713: PUSH
43714: LD_INT 9
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: LIST
43721: PUSH
43722: LD_VAR 0 17
43726: ARRAY
43727: PPUSH
43728: LD_VAR 0 4
43732: PPUSH
43733: CALL_OW 380
43737: GO 43756
// PrepareHuman ( false , i , skill ) ;
43739: LD_INT 0
43741: PPUSH
43742: LD_VAR 0 8
43746: PPUSH
43747: LD_VAR 0 4
43751: PPUSH
43752: CALL_OW 380
// end else
43756: GO 43775
// PrepareHuman ( false , i , skill ) ;
43758: LD_INT 0
43760: PPUSH
43761: LD_VAR 0 8
43765: PPUSH
43766: LD_VAR 0 4
43770: PPUSH
43771: CALL_OW 380
// un := CreateHuman ;
43775: LD_ADDR_VAR 0 14
43779: PUSH
43780: CALL_OW 44
43784: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43785: LD_ADDR_VAR 0 7
43789: PUSH
43790: LD_VAR 0 7
43794: PPUSH
43795: LD_INT 1
43797: PPUSH
43798: LD_VAR 0 14
43802: PPUSH
43803: CALL_OW 2
43807: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43808: LD_VAR 0 14
43812: PPUSH
43813: LD_VAR 0 12
43817: PUSH
43818: LD_INT 1
43820: ARRAY
43821: PPUSH
43822: CALL_OW 52
// end ;
43826: GO 43461
43828: POP
43829: POP
// end ;
43830: GO 42761
43832: POP
43833: POP
// result := result ^ buildings ;
43834: LD_ADDR_VAR 0 7
43838: PUSH
43839: LD_VAR 0 7
43843: PUSH
43844: LD_VAR 0 18
43848: ADD
43849: ST_TO_ADDR
// end else
43850: GO 43993
// begin for i = 1 to personel do
43852: LD_ADDR_VAR 0 8
43856: PUSH
43857: DOUBLE
43858: LD_INT 1
43860: DEC
43861: ST_TO_ADDR
43862: LD_VAR 0 6
43866: PUSH
43867: FOR_TO
43868: IFFALSE 43991
// begin if i > 4 then
43870: LD_VAR 0 8
43874: PUSH
43875: LD_INT 4
43877: GREATER
43878: IFFALSE 43882
// break ;
43880: GO 43991
// x := personel [ i ] ;
43882: LD_ADDR_VAR 0 13
43886: PUSH
43887: LD_VAR 0 6
43891: PUSH
43892: LD_VAR 0 8
43896: ARRAY
43897: ST_TO_ADDR
// if x = - 1 then
43898: LD_VAR 0 13
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: EQUAL
43907: IFFALSE 43911
// continue ;
43909: GO 43867
// PrepareHuman ( false , i , skill ) ;
43911: LD_INT 0
43913: PPUSH
43914: LD_VAR 0 8
43918: PPUSH
43919: LD_VAR 0 4
43923: PPUSH
43924: CALL_OW 380
// un := CreateHuman ;
43928: LD_ADDR_VAR 0 14
43932: PUSH
43933: CALL_OW 44
43937: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43938: LD_VAR 0 14
43942: PPUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: CALL_OW 250
43952: PPUSH
43953: LD_VAR 0 1
43957: PPUSH
43958: CALL_OW 251
43962: PPUSH
43963: LD_INT 10
43965: PPUSH
43966: LD_INT 0
43968: PPUSH
43969: CALL_OW 50
// result := result ^ un ;
43973: LD_ADDR_VAR 0 7
43977: PUSH
43978: LD_VAR 0 7
43982: PUSH
43983: LD_VAR 0 14
43987: ADD
43988: ST_TO_ADDR
// end ;
43989: GO 43867
43991: POP
43992: POP
// end ; end ;
43993: LD_VAR 0 7
43997: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43998: LD_INT 0
44000: PPUSH
44001: PPUSH
44002: PPUSH
44003: PPUSH
44004: PPUSH
44005: PPUSH
44006: PPUSH
44007: PPUSH
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
// result := false ;
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: LD_INT 0
44023: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44024: LD_VAR 0 1
44028: NOT
44029: IFTRUE 44054
44031: PUSH
44032: LD_VAR 0 1
44036: PPUSH
44037: CALL_OW 266
44041: PUSH
44042: LD_INT 32
44044: PUSH
44045: LD_INT 33
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: IN
44052: NOT
44053: OR
44054: IFFALSE 44058
// exit ;
44056: GO 45193
// nat := GetNation ( tower ) ;
44058: LD_ADDR_VAR 0 12
44062: PUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: CALL_OW 248
44072: ST_TO_ADDR
// side := GetSide ( tower ) ;
44073: LD_ADDR_VAR 0 16
44077: PUSH
44078: LD_VAR 0 1
44082: PPUSH
44083: CALL_OW 255
44087: ST_TO_ADDR
// x := GetX ( tower ) ;
44088: LD_ADDR_VAR 0 10
44092: PUSH
44093: LD_VAR 0 1
44097: PPUSH
44098: CALL_OW 250
44102: ST_TO_ADDR
// y := GetY ( tower ) ;
44103: LD_ADDR_VAR 0 11
44107: PUSH
44108: LD_VAR 0 1
44112: PPUSH
44113: CALL_OW 251
44117: ST_TO_ADDR
// if not x or not y then
44118: LD_VAR 0 10
44122: NOT
44123: IFTRUE 44132
44125: PUSH
44126: LD_VAR 0 11
44130: NOT
44131: OR
44132: IFFALSE 44136
// exit ;
44134: GO 45193
// weapon := 0 ;
44136: LD_ADDR_VAR 0 18
44140: PUSH
44141: LD_INT 0
44143: ST_TO_ADDR
// fac_list := [ ] ;
44144: LD_ADDR_VAR 0 17
44148: PUSH
44149: EMPTY
44150: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44151: LD_ADDR_VAR 0 6
44155: PUSH
44156: LD_VAR 0 1
44160: PPUSH
44161: CALL_OW 274
44165: PPUSH
44166: LD_VAR 0 2
44170: PPUSH
44171: LD_INT 0
44173: PPUSH
44174: CALL 41728 0 3
44178: PPUSH
44179: LD_INT 30
44181: PUSH
44182: LD_INT 3
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PPUSH
44189: CALL_OW 72
44193: ST_TO_ADDR
// if not factories then
44194: LD_VAR 0 6
44198: NOT
44199: IFFALSE 44203
// exit ;
44201: GO 45193
// for i in factories do
44203: LD_ADDR_VAR 0 8
44207: PUSH
44208: LD_VAR 0 6
44212: PUSH
44213: FOR_IN
44214: IFFALSE 44239
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44216: LD_ADDR_VAR 0 17
44220: PUSH
44221: LD_VAR 0 17
44225: PUSH
44226: LD_VAR 0 8
44230: PPUSH
44231: CALL_OW 478
44235: UNION
44236: ST_TO_ADDR
44237: GO 44213
44239: POP
44240: POP
// if not fac_list then
44241: LD_VAR 0 17
44245: NOT
44246: IFFALSE 44250
// exit ;
44248: GO 45193
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44250: LD_ADDR_VAR 0 5
44254: PUSH
44255: LD_INT 4
44257: PUSH
44258: LD_INT 5
44260: PUSH
44261: LD_INT 9
44263: PUSH
44264: LD_INT 10
44266: PUSH
44267: LD_INT 6
44269: PUSH
44270: LD_INT 7
44272: PUSH
44273: LD_INT 11
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 27
44287: PUSH
44288: LD_INT 28
44290: PUSH
44291: LD_INT 26
44293: PUSH
44294: LD_INT 30
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 43
44305: PUSH
44306: LD_INT 44
44308: PUSH
44309: LD_INT 46
44311: PUSH
44312: LD_INT 45
44314: PUSH
44315: LD_INT 47
44317: PUSH
44318: LD_INT 49
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: LIST
44333: PUSH
44334: LD_VAR 0 12
44338: ARRAY
44339: ST_TO_ADDR
// list := list isect fac_list ;
44340: LD_ADDR_VAR 0 5
44344: PUSH
44345: LD_VAR 0 5
44349: PUSH
44350: LD_VAR 0 17
44354: ISECT
44355: ST_TO_ADDR
// if not list then
44356: LD_VAR 0 5
44360: NOT
44361: IFFALSE 44365
// exit ;
44363: GO 45193
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44365: LD_VAR 0 12
44369: PUSH
44370: LD_INT 3
44372: EQUAL
44373: IFFALSE 44385
44375: PUSH
44376: LD_INT 49
44378: PUSH
44379: LD_VAR 0 5
44383: IN
44384: AND
44385: IFFALSE 44405
44387: PUSH
44388: LD_INT 31
44390: PPUSH
44391: LD_VAR 0 16
44395: PPUSH
44396: CALL_OW 321
44400: PUSH
44401: LD_INT 2
44403: EQUAL
44404: AND
44405: IFFALSE 44465
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44407: LD_INT 22
44409: PUSH
44410: LD_VAR 0 16
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 35
44421: PUSH
44422: LD_INT 49
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 91
44431: PUSH
44432: LD_VAR 0 1
44436: PUSH
44437: LD_INT 10
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: LIST
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: LIST
44449: PPUSH
44450: CALL_OW 69
44454: NOT
44455: IFFALSE 44465
// weapon := ru_time_lapser ;
44457: LD_ADDR_VAR 0 18
44461: PUSH
44462: LD_INT 49
44464: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44465: LD_VAR 0 12
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: IN
44480: IFFALSE 44504
44482: PUSH
44483: LD_INT 11
44485: PUSH
44486: LD_VAR 0 5
44490: IN
44491: IFTRUE 44503
44493: PUSH
44494: LD_INT 30
44496: PUSH
44497: LD_VAR 0 5
44501: IN
44502: OR
44503: AND
44504: IFFALSE 44524
44506: PUSH
44507: LD_INT 6
44509: PPUSH
44510: LD_VAR 0 16
44514: PPUSH
44515: CALL_OW 321
44519: PUSH
44520: LD_INT 2
44522: EQUAL
44523: AND
44524: IFFALSE 44691
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44526: LD_INT 22
44528: PUSH
44529: LD_VAR 0 16
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 35
44543: PUSH
44544: LD_INT 11
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 35
44553: PUSH
44554: LD_INT 30
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 91
44568: PUSH
44569: LD_VAR 0 1
44573: PUSH
44574: LD_INT 18
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: LIST
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: PPUSH
44587: CALL_OW 69
44591: NOT
44592: IFFALSE 44668
44594: PUSH
44595: LD_INT 22
44597: PUSH
44598: LD_VAR 0 16
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: LD_INT 30
44612: PUSH
44613: LD_INT 32
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 30
44622: PUSH
44623: LD_INT 33
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 91
44637: PUSH
44638: LD_VAR 0 1
44642: PUSH
44643: LD_INT 12
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: PUSH
44656: EMPTY
44657: LIST
44658: PPUSH
44659: CALL_OW 69
44663: PUSH
44664: LD_INT 2
44666: GREATER
44667: AND
44668: IFFALSE 44691
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44670: LD_ADDR_VAR 0 18
44674: PUSH
44675: LD_INT 11
44677: PUSH
44678: LD_INT 30
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_VAR 0 12
44689: ARRAY
44690: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44691: LD_VAR 0 18
44695: NOT
44696: IFFALSE 44716
44698: PUSH
44699: LD_INT 40
44701: PPUSH
44702: LD_VAR 0 16
44706: PPUSH
44707: CALL_OW 321
44711: PUSH
44712: LD_INT 2
44714: EQUAL
44715: AND
44716: IFFALSE 44752
44718: PUSH
44719: LD_INT 7
44721: PUSH
44722: LD_VAR 0 5
44726: IN
44727: IFTRUE 44739
44729: PUSH
44730: LD_INT 28
44732: PUSH
44733: LD_VAR 0 5
44737: IN
44738: OR
44739: IFTRUE 44751
44741: PUSH
44742: LD_INT 45
44744: PUSH
44745: LD_VAR 0 5
44749: IN
44750: OR
44751: AND
44752: IFFALSE 45006
// begin hex := GetHexInfo ( x , y ) ;
44754: LD_ADDR_VAR 0 4
44758: PUSH
44759: LD_VAR 0 10
44763: PPUSH
44764: LD_VAR 0 11
44768: PPUSH
44769: CALL_OW 546
44773: ST_TO_ADDR
// if hex [ 1 ] then
44774: LD_VAR 0 4
44778: PUSH
44779: LD_INT 1
44781: ARRAY
44782: IFFALSE 44786
// exit ;
44784: GO 45193
// height := hex [ 2 ] ;
44786: LD_ADDR_VAR 0 15
44790: PUSH
44791: LD_VAR 0 4
44795: PUSH
44796: LD_INT 2
44798: ARRAY
44799: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44800: LD_ADDR_VAR 0 14
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: LD_INT 5
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// for i in tmp do
44823: LD_ADDR_VAR 0 8
44827: PUSH
44828: LD_VAR 0 14
44832: PUSH
44833: FOR_IN
44834: IFFALSE 45004
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44836: LD_ADDR_VAR 0 9
44840: PUSH
44841: LD_VAR 0 10
44845: PPUSH
44846: LD_VAR 0 8
44850: PPUSH
44851: LD_INT 5
44853: PPUSH
44854: CALL_OW 272
44858: PUSH
44859: LD_VAR 0 11
44863: PPUSH
44864: LD_VAR 0 8
44868: PPUSH
44869: LD_INT 5
44871: PPUSH
44872: CALL_OW 273
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44881: LD_VAR 0 9
44885: PUSH
44886: LD_INT 1
44888: ARRAY
44889: PPUSH
44890: LD_VAR 0 9
44894: PUSH
44895: LD_INT 2
44897: ARRAY
44898: PPUSH
44899: CALL_OW 488
44903: IFFALSE 45002
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44905: LD_ADDR_VAR 0 4
44909: PUSH
44910: LD_VAR 0 9
44914: PUSH
44915: LD_INT 1
44917: ARRAY
44918: PPUSH
44919: LD_VAR 0 9
44923: PUSH
44924: LD_INT 2
44926: ARRAY
44927: PPUSH
44928: CALL_OW 546
44932: ST_TO_ADDR
// if hex [ 1 ] then
44933: LD_VAR 0 4
44937: PUSH
44938: LD_INT 1
44940: ARRAY
44941: IFFALSE 44945
// continue ;
44943: GO 44833
// h := hex [ 2 ] ;
44945: LD_ADDR_VAR 0 13
44949: PUSH
44950: LD_VAR 0 4
44954: PUSH
44955: LD_INT 2
44957: ARRAY
44958: ST_TO_ADDR
// if h + 7 < height then
44959: LD_VAR 0 13
44963: PUSH
44964: LD_INT 7
44966: PLUS
44967: PUSH
44968: LD_VAR 0 15
44972: LESS
44973: IFFALSE 45002
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44975: LD_ADDR_VAR 0 18
44979: PUSH
44980: LD_INT 7
44982: PUSH
44983: LD_INT 28
44985: PUSH
44986: LD_INT 45
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: PUSH
44994: LD_VAR 0 12
44998: ARRAY
44999: ST_TO_ADDR
// break ;
45000: GO 45004
// end ; end ; end ;
45002: GO 44833
45004: POP
45005: POP
// end ; if not weapon then
45006: LD_VAR 0 18
45010: NOT
45011: IFFALSE 45071
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45013: LD_ADDR_VAR 0 5
45017: PUSH
45018: LD_VAR 0 5
45022: PUSH
45023: LD_INT 11
45025: PUSH
45026: LD_INT 30
45028: PUSH
45029: LD_INT 49
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: DIFF
45037: ST_TO_ADDR
// if not list then
45038: LD_VAR 0 5
45042: NOT
45043: IFFALSE 45047
// exit ;
45045: GO 45193
// weapon := list [ rand ( 1 , list ) ] ;
45047: LD_ADDR_VAR 0 18
45051: PUSH
45052: LD_VAR 0 5
45056: PUSH
45057: LD_INT 1
45059: PPUSH
45060: LD_VAR 0 5
45064: PPUSH
45065: CALL_OW 12
45069: ARRAY
45070: ST_TO_ADDR
// end ; if weapon then
45071: LD_VAR 0 18
45075: IFFALSE 45193
// begin tmp := CostOfWeapon ( weapon ) ;
45077: LD_ADDR_VAR 0 14
45081: PUSH
45082: LD_VAR 0 18
45086: PPUSH
45087: CALL_OW 451
45091: ST_TO_ADDR
// j := GetBase ( tower ) ;
45092: LD_ADDR_VAR 0 9
45096: PUSH
45097: LD_VAR 0 1
45101: PPUSH
45102: CALL_OW 274
45106: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45107: LD_VAR 0 9
45111: PPUSH
45112: LD_INT 1
45114: PPUSH
45115: CALL_OW 275
45119: PUSH
45120: LD_VAR 0 14
45124: PUSH
45125: LD_INT 1
45127: ARRAY
45128: GREATEREQUAL
45129: IFFALSE 45155
45131: PUSH
45132: LD_VAR 0 9
45136: PPUSH
45137: LD_INT 2
45139: PPUSH
45140: CALL_OW 275
45144: PUSH
45145: LD_VAR 0 14
45149: PUSH
45150: LD_INT 2
45152: ARRAY
45153: GREATEREQUAL
45154: AND
45155: IFFALSE 45181
45157: PUSH
45158: LD_VAR 0 9
45162: PPUSH
45163: LD_INT 3
45165: PPUSH
45166: CALL_OW 275
45170: PUSH
45171: LD_VAR 0 14
45175: PUSH
45176: LD_INT 3
45178: ARRAY
45179: GREATEREQUAL
45180: AND
45181: IFFALSE 45193
// result := weapon ;
45183: LD_ADDR_VAR 0 3
45187: PUSH
45188: LD_VAR 0 18
45192: ST_TO_ADDR
// end ; end ;
45193: LD_VAR 0 3
45197: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45198: LD_INT 0
45200: PPUSH
45201: PPUSH
// result := true ;
45202: LD_ADDR_VAR 0 3
45206: PUSH
45207: LD_INT 1
45209: ST_TO_ADDR
// if array1 = array2 then
45210: LD_VAR 0 1
45214: PUSH
45215: LD_VAR 0 2
45219: EQUAL
45220: IFFALSE 45280
// begin for i = 1 to array1 do
45222: LD_ADDR_VAR 0 4
45226: PUSH
45227: DOUBLE
45228: LD_INT 1
45230: DEC
45231: ST_TO_ADDR
45232: LD_VAR 0 1
45236: PUSH
45237: FOR_TO
45238: IFFALSE 45276
// if array1 [ i ] <> array2 [ i ] then
45240: LD_VAR 0 1
45244: PUSH
45245: LD_VAR 0 4
45249: ARRAY
45250: PUSH
45251: LD_VAR 0 2
45255: PUSH
45256: LD_VAR 0 4
45260: ARRAY
45261: NONEQUAL
45262: IFFALSE 45274
// begin result := false ;
45264: LD_ADDR_VAR 0 3
45268: PUSH
45269: LD_INT 0
45271: ST_TO_ADDR
// break ;
45272: GO 45276
// end ;
45274: GO 45237
45276: POP
45277: POP
// end else
45278: GO 45288
// result := false ;
45280: LD_ADDR_VAR 0 3
45284: PUSH
45285: LD_INT 0
45287: ST_TO_ADDR
// end ;
45288: LD_VAR 0 3
45292: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45293: LD_INT 0
45295: PPUSH
45296: PPUSH
// if not array1 or not array2 then
45297: LD_VAR 0 1
45301: NOT
45302: IFTRUE 45311
45304: PUSH
45305: LD_VAR 0 2
45309: NOT
45310: OR
45311: IFFALSE 45315
// exit ;
45313: GO 45379
// result := true ;
45315: LD_ADDR_VAR 0 3
45319: PUSH
45320: LD_INT 1
45322: ST_TO_ADDR
// for i = 1 to array1 do
45323: LD_ADDR_VAR 0 4
45327: PUSH
45328: DOUBLE
45329: LD_INT 1
45331: DEC
45332: ST_TO_ADDR
45333: LD_VAR 0 1
45337: PUSH
45338: FOR_TO
45339: IFFALSE 45377
// if array1 [ i ] <> array2 [ i ] then
45341: LD_VAR 0 1
45345: PUSH
45346: LD_VAR 0 4
45350: ARRAY
45351: PUSH
45352: LD_VAR 0 2
45356: PUSH
45357: LD_VAR 0 4
45361: ARRAY
45362: NONEQUAL
45363: IFFALSE 45375
// begin result := false ;
45365: LD_ADDR_VAR 0 3
45369: PUSH
45370: LD_INT 0
45372: ST_TO_ADDR
// break ;
45373: GO 45377
// end ;
45375: GO 45338
45377: POP
45378: POP
// end ;
45379: LD_VAR 0 3
45383: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45384: LD_INT 0
45386: PPUSH
45387: PPUSH
45388: PPUSH
// pom := GetBase ( fac ) ;
45389: LD_ADDR_VAR 0 5
45393: PUSH
45394: LD_VAR 0 1
45398: PPUSH
45399: CALL_OW 274
45403: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45404: LD_ADDR_VAR 0 4
45408: PUSH
45409: LD_VAR 0 2
45413: PUSH
45414: LD_INT 1
45416: ARRAY
45417: PPUSH
45418: LD_VAR 0 2
45422: PUSH
45423: LD_INT 2
45425: ARRAY
45426: PPUSH
45427: LD_VAR 0 2
45431: PUSH
45432: LD_INT 3
45434: ARRAY
45435: PPUSH
45436: LD_VAR 0 2
45440: PUSH
45441: LD_INT 4
45443: ARRAY
45444: PPUSH
45445: CALL_OW 449
45449: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45450: LD_ADDR_VAR 0 3
45454: PUSH
45455: LD_VAR 0 5
45459: PPUSH
45460: LD_INT 1
45462: PPUSH
45463: CALL_OW 275
45467: PUSH
45468: LD_VAR 0 4
45472: PUSH
45473: LD_INT 1
45475: ARRAY
45476: GREATEREQUAL
45477: IFFALSE 45503
45479: PUSH
45480: LD_VAR 0 5
45484: PPUSH
45485: LD_INT 2
45487: PPUSH
45488: CALL_OW 275
45492: PUSH
45493: LD_VAR 0 4
45497: PUSH
45498: LD_INT 2
45500: ARRAY
45501: GREATEREQUAL
45502: AND
45503: IFFALSE 45529
45505: PUSH
45506: LD_VAR 0 5
45510: PPUSH
45511: LD_INT 3
45513: PPUSH
45514: CALL_OW 275
45518: PUSH
45519: LD_VAR 0 4
45523: PUSH
45524: LD_INT 3
45526: ARRAY
45527: GREATEREQUAL
45528: AND
45529: ST_TO_ADDR
// end ;
45530: LD_VAR 0 3
45534: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45535: LD_INT 0
45537: PPUSH
45538: PPUSH
45539: PPUSH
45540: PPUSH
// pom := GetBase ( building ) ;
45541: LD_ADDR_VAR 0 3
45545: PUSH
45546: LD_VAR 0 1
45550: PPUSH
45551: CALL_OW 274
45555: ST_TO_ADDR
// if not pom then
45556: LD_VAR 0 3
45560: NOT
45561: IFFALSE 45565
// exit ;
45563: GO 45739
// btype := GetBType ( building ) ;
45565: LD_ADDR_VAR 0 5
45569: PUSH
45570: LD_VAR 0 1
45574: PPUSH
45575: CALL_OW 266
45579: ST_TO_ADDR
// if btype = b_armoury then
45580: LD_VAR 0 5
45584: PUSH
45585: LD_INT 4
45587: EQUAL
45588: IFFALSE 45598
// btype := b_barracks ;
45590: LD_ADDR_VAR 0 5
45594: PUSH
45595: LD_INT 5
45597: ST_TO_ADDR
// if btype = b_depot then
45598: LD_VAR 0 5
45602: PUSH
45603: LD_INT 0
45605: EQUAL
45606: IFFALSE 45616
// btype := b_warehouse ;
45608: LD_ADDR_VAR 0 5
45612: PUSH
45613: LD_INT 1
45615: ST_TO_ADDR
// if btype = b_workshop then
45616: LD_VAR 0 5
45620: PUSH
45621: LD_INT 2
45623: EQUAL
45624: IFFALSE 45634
// btype := b_factory ;
45626: LD_ADDR_VAR 0 5
45630: PUSH
45631: LD_INT 3
45633: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45634: LD_ADDR_VAR 0 4
45638: PUSH
45639: LD_VAR 0 5
45643: PPUSH
45644: LD_VAR 0 1
45648: PPUSH
45649: CALL_OW 248
45653: PPUSH
45654: CALL_OW 450
45658: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45659: LD_ADDR_VAR 0 2
45663: PUSH
45664: LD_VAR 0 3
45668: PPUSH
45669: LD_INT 1
45671: PPUSH
45672: CALL_OW 275
45676: PUSH
45677: LD_VAR 0 4
45681: PUSH
45682: LD_INT 1
45684: ARRAY
45685: GREATEREQUAL
45686: IFFALSE 45712
45688: PUSH
45689: LD_VAR 0 3
45693: PPUSH
45694: LD_INT 2
45696: PPUSH
45697: CALL_OW 275
45701: PUSH
45702: LD_VAR 0 4
45706: PUSH
45707: LD_INT 2
45709: ARRAY
45710: GREATEREQUAL
45711: AND
45712: IFFALSE 45738
45714: PUSH
45715: LD_VAR 0 3
45719: PPUSH
45720: LD_INT 3
45722: PPUSH
45723: CALL_OW 275
45727: PUSH
45728: LD_VAR 0 4
45732: PUSH
45733: LD_INT 3
45735: ARRAY
45736: GREATEREQUAL
45737: AND
45738: ST_TO_ADDR
// end ;
45739: LD_VAR 0 2
45743: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45744: LD_INT 0
45746: PPUSH
45747: PPUSH
45748: PPUSH
// pom := GetBase ( building ) ;
45749: LD_ADDR_VAR 0 4
45753: PUSH
45754: LD_VAR 0 1
45758: PPUSH
45759: CALL_OW 274
45763: ST_TO_ADDR
// if not pom then
45764: LD_VAR 0 4
45768: NOT
45769: IFFALSE 45773
// exit ;
45771: GO 45878
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45773: LD_ADDR_VAR 0 5
45777: PUSH
45778: LD_VAR 0 2
45782: PPUSH
45783: LD_VAR 0 1
45787: PPUSH
45788: CALL_OW 248
45792: PPUSH
45793: CALL_OW 450
45797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45798: LD_ADDR_VAR 0 3
45802: PUSH
45803: LD_VAR 0 4
45807: PPUSH
45808: LD_INT 1
45810: PPUSH
45811: CALL_OW 275
45815: PUSH
45816: LD_VAR 0 5
45820: PUSH
45821: LD_INT 1
45823: ARRAY
45824: GREATEREQUAL
45825: IFFALSE 45851
45827: PUSH
45828: LD_VAR 0 4
45832: PPUSH
45833: LD_INT 2
45835: PPUSH
45836: CALL_OW 275
45840: PUSH
45841: LD_VAR 0 5
45845: PUSH
45846: LD_INT 2
45848: ARRAY
45849: GREATEREQUAL
45850: AND
45851: IFFALSE 45877
45853: PUSH
45854: LD_VAR 0 4
45858: PPUSH
45859: LD_INT 3
45861: PPUSH
45862: CALL_OW 275
45866: PUSH
45867: LD_VAR 0 5
45871: PUSH
45872: LD_INT 3
45874: ARRAY
45875: GREATEREQUAL
45876: AND
45877: ST_TO_ADDR
// end ;
45878: LD_VAR 0 3
45882: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45883: LD_INT 0
45885: PPUSH
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
45892: PPUSH
45893: PPUSH
45894: PPUSH
45895: PPUSH
// result := false ;
45896: LD_ADDR_VAR 0 8
45900: PUSH
45901: LD_INT 0
45903: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45904: LD_VAR 0 5
45908: NOT
45909: IFTRUE 45918
45911: PUSH
45912: LD_VAR 0 1
45916: NOT
45917: OR
45918: IFTRUE 45927
45920: PUSH
45921: LD_VAR 0 2
45925: NOT
45926: OR
45927: IFTRUE 45936
45929: PUSH
45930: LD_VAR 0 3
45934: NOT
45935: OR
45936: IFFALSE 45940
// exit ;
45938: GO 46766
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45940: LD_ADDR_VAR 0 14
45944: PUSH
45945: LD_VAR 0 1
45949: PPUSH
45950: LD_VAR 0 2
45954: PPUSH
45955: LD_VAR 0 3
45959: PPUSH
45960: LD_VAR 0 4
45964: PPUSH
45965: LD_VAR 0 5
45969: PUSH
45970: LD_INT 1
45972: ARRAY
45973: PPUSH
45974: CALL_OW 248
45978: PPUSH
45979: LD_INT 0
45981: PPUSH
45982: CALL 48047 0 6
45986: ST_TO_ADDR
// if not hexes then
45987: LD_VAR 0 14
45991: NOT
45992: IFFALSE 45996
// exit ;
45994: GO 46766
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45996: LD_ADDR_VAR 0 17
46000: PUSH
46001: LD_VAR 0 5
46005: PPUSH
46006: LD_INT 22
46008: PUSH
46009: LD_VAR 0 13
46013: PPUSH
46014: CALL_OW 255
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: LD_INT 30
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 30
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PPUSH
46055: CALL_OW 72
46059: ST_TO_ADDR
// for i = 1 to hexes do
46060: LD_ADDR_VAR 0 9
46064: PUSH
46065: DOUBLE
46066: LD_INT 1
46068: DEC
46069: ST_TO_ADDR
46070: LD_VAR 0 14
46074: PUSH
46075: FOR_TO
46076: IFFALSE 46764
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46078: LD_ADDR_VAR 0 13
46082: PUSH
46083: LD_VAR 0 14
46087: PUSH
46088: LD_VAR 0 9
46092: ARRAY
46093: PUSH
46094: LD_INT 1
46096: ARRAY
46097: PPUSH
46098: LD_VAR 0 14
46102: PUSH
46103: LD_VAR 0 9
46107: ARRAY
46108: PUSH
46109: LD_INT 2
46111: ARRAY
46112: PPUSH
46113: CALL_OW 428
46117: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46118: LD_VAR 0 14
46122: PUSH
46123: LD_VAR 0 9
46127: ARRAY
46128: PUSH
46129: LD_INT 1
46131: ARRAY
46132: PPUSH
46133: LD_VAR 0 14
46137: PUSH
46138: LD_VAR 0 9
46142: ARRAY
46143: PUSH
46144: LD_INT 2
46146: ARRAY
46147: PPUSH
46148: CALL_OW 351
46152: IFTRUE 46191
46154: PUSH
46155: LD_VAR 0 14
46159: PUSH
46160: LD_VAR 0 9
46164: ARRAY
46165: PUSH
46166: LD_INT 1
46168: ARRAY
46169: PPUSH
46170: LD_VAR 0 14
46174: PUSH
46175: LD_VAR 0 9
46179: ARRAY
46180: PUSH
46181: LD_INT 2
46183: ARRAY
46184: PPUSH
46185: CALL_OW 488
46189: NOT
46190: OR
46191: IFTRUE 46208
46193: PUSH
46194: LD_VAR 0 13
46198: PPUSH
46199: CALL_OW 247
46203: PUSH
46204: LD_INT 3
46206: EQUAL
46207: OR
46208: IFFALSE 46214
// exit ;
46210: POP
46211: POP
46212: GO 46766
// if not tmp then
46214: LD_VAR 0 13
46218: NOT
46219: IFFALSE 46223
// continue ;
46221: GO 46075
// result := true ;
46223: LD_ADDR_VAR 0 8
46227: PUSH
46228: LD_INT 1
46230: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46231: LD_VAR 0 6
46235: IFFALSE 46252
46237: PUSH
46238: LD_VAR 0 13
46242: PPUSH
46243: CALL_OW 247
46247: PUSH
46248: LD_INT 2
46250: EQUAL
46251: AND
46252: IFFALSE 46269
46254: PUSH
46255: LD_VAR 0 13
46259: PPUSH
46260: CALL_OW 263
46264: PUSH
46265: LD_INT 1
46267: EQUAL
46268: AND
46269: IFFALSE 46433
// begin if IsDrivenBy ( tmp ) then
46271: LD_VAR 0 13
46275: PPUSH
46276: CALL_OW 311
46280: IFFALSE 46284
// continue ;
46282: GO 46075
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46284: LD_VAR 0 6
46288: PPUSH
46289: LD_INT 3
46291: PUSH
46292: LD_INT 60
46294: PUSH
46295: EMPTY
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 3
46304: PUSH
46305: LD_INT 55
46307: PUSH
46308: EMPTY
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PPUSH
46319: CALL_OW 72
46323: IFFALSE 46431
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46325: LD_ADDR_VAR 0 18
46329: PUSH
46330: LD_VAR 0 6
46334: PPUSH
46335: LD_INT 3
46337: PUSH
46338: LD_INT 60
46340: PUSH
46341: EMPTY
46342: LIST
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 55
46353: PUSH
46354: EMPTY
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PPUSH
46365: CALL_OW 72
46369: PUSH
46370: LD_INT 1
46372: ARRAY
46373: ST_TO_ADDR
// if IsInUnit ( driver ) then
46374: LD_VAR 0 18
46378: PPUSH
46379: CALL_OW 310
46383: IFFALSE 46394
// ComExit ( driver ) ;
46385: LD_VAR 0 18
46389: PPUSH
46390: CALL 72047 0 1
// AddComEnterUnit ( driver , tmp ) ;
46394: LD_VAR 0 18
46398: PPUSH
46399: LD_VAR 0 13
46403: PPUSH
46404: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46408: LD_VAR 0 18
46412: PPUSH
46413: LD_VAR 0 7
46417: PPUSH
46418: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46422: LD_VAR 0 18
46426: PPUSH
46427: CALL_OW 181
// end ; continue ;
46431: GO 46075
// end ; if not cleaners or not tmp in cleaners then
46433: LD_VAR 0 6
46437: NOT
46438: IFTRUE 46453
46440: PUSH
46441: LD_VAR 0 13
46445: PUSH
46446: LD_VAR 0 6
46450: IN
46451: NOT
46452: OR
46453: IFFALSE 46762
// begin if dep then
46455: LD_VAR 0 17
46459: IFFALSE 46595
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46461: LD_ADDR_VAR 0 16
46465: PUSH
46466: LD_VAR 0 17
46470: PUSH
46471: LD_INT 1
46473: ARRAY
46474: PPUSH
46475: CALL_OW 250
46479: PPUSH
46480: LD_VAR 0 17
46484: PUSH
46485: LD_INT 1
46487: ARRAY
46488: PPUSH
46489: CALL_OW 254
46493: PPUSH
46494: LD_INT 5
46496: PPUSH
46497: CALL_OW 272
46501: PUSH
46502: LD_VAR 0 17
46506: PUSH
46507: LD_INT 1
46509: ARRAY
46510: PPUSH
46511: CALL_OW 251
46515: PPUSH
46516: LD_VAR 0 17
46520: PUSH
46521: LD_INT 1
46523: ARRAY
46524: PPUSH
46525: CALL_OW 254
46529: PPUSH
46530: LD_INT 5
46532: PPUSH
46533: CALL_OW 273
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46542: LD_VAR 0 16
46546: PUSH
46547: LD_INT 1
46549: ARRAY
46550: PPUSH
46551: LD_VAR 0 16
46555: PUSH
46556: LD_INT 2
46558: ARRAY
46559: PPUSH
46560: CALL_OW 488
46564: IFFALSE 46595
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46566: LD_VAR 0 13
46570: PPUSH
46571: LD_VAR 0 16
46575: PUSH
46576: LD_INT 1
46578: ARRAY
46579: PPUSH
46580: LD_VAR 0 16
46584: PUSH
46585: LD_INT 2
46587: ARRAY
46588: PPUSH
46589: CALL_OW 111
// continue ;
46593: GO 46075
// end ; end ; r := GetDir ( tmp ) ;
46595: LD_ADDR_VAR 0 15
46599: PUSH
46600: LD_VAR 0 13
46604: PPUSH
46605: CALL_OW 254
46609: ST_TO_ADDR
// if r = 5 then
46610: LD_VAR 0 15
46614: PUSH
46615: LD_INT 5
46617: EQUAL
46618: IFFALSE 46628
// r := 0 ;
46620: LD_ADDR_VAR 0 15
46624: PUSH
46625: LD_INT 0
46627: ST_TO_ADDR
// for j = r to 5 do
46628: LD_ADDR_VAR 0 10
46632: PUSH
46633: DOUBLE
46634: LD_VAR 0 15
46638: DEC
46639: ST_TO_ADDR
46640: LD_INT 5
46642: PUSH
46643: FOR_TO
46644: IFFALSE 46760
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46646: LD_ADDR_VAR 0 11
46650: PUSH
46651: LD_VAR 0 13
46655: PPUSH
46656: CALL_OW 250
46660: PPUSH
46661: LD_VAR 0 10
46665: PPUSH
46666: LD_INT 2
46668: PPUSH
46669: CALL_OW 272
46673: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46674: LD_ADDR_VAR 0 12
46678: PUSH
46679: LD_VAR 0 13
46683: PPUSH
46684: CALL_OW 251
46688: PPUSH
46689: LD_VAR 0 10
46693: PPUSH
46694: LD_INT 2
46696: PPUSH
46697: CALL_OW 273
46701: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46702: LD_VAR 0 11
46706: PPUSH
46707: LD_VAR 0 12
46711: PPUSH
46712: CALL_OW 488
46716: IFFALSE 46735
46718: PUSH
46719: LD_VAR 0 11
46723: PPUSH
46724: LD_VAR 0 12
46728: PPUSH
46729: CALL_OW 428
46733: NOT
46734: AND
46735: IFFALSE 46758
// begin ComMoveXY ( tmp , _x , _y ) ;
46737: LD_VAR 0 13
46741: PPUSH
46742: LD_VAR 0 11
46746: PPUSH
46747: LD_VAR 0 12
46751: PPUSH
46752: CALL_OW 111
// break ;
46756: GO 46760
// end ; end ;
46758: GO 46643
46760: POP
46761: POP
// end ; end ;
46762: GO 46075
46764: POP
46765: POP
// end ;
46766: LD_VAR 0 8
46770: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46771: LD_INT 0
46773: PPUSH
// result := true ;
46774: LD_ADDR_VAR 0 3
46778: PUSH
46779: LD_INT 1
46781: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46782: LD_VAR 0 2
46786: PUSH
46787: LD_INT 24
46789: DOUBLE
46790: EQUAL
46791: IFTRUE 46801
46793: LD_INT 33
46795: DOUBLE
46796: EQUAL
46797: IFTRUE 46801
46799: GO 46826
46801: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46802: LD_ADDR_VAR 0 3
46806: PUSH
46807: LD_INT 32
46809: PPUSH
46810: LD_VAR 0 1
46814: PPUSH
46815: CALL_OW 321
46819: PUSH
46820: LD_INT 2
46822: EQUAL
46823: ST_TO_ADDR
46824: GO 47142
46826: LD_INT 20
46828: DOUBLE
46829: EQUAL
46830: IFTRUE 46834
46832: GO 46859
46834: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46835: LD_ADDR_VAR 0 3
46839: PUSH
46840: LD_INT 6
46842: PPUSH
46843: LD_VAR 0 1
46847: PPUSH
46848: CALL_OW 321
46852: PUSH
46853: LD_INT 2
46855: EQUAL
46856: ST_TO_ADDR
46857: GO 47142
46859: LD_INT 22
46861: DOUBLE
46862: EQUAL
46863: IFTRUE 46873
46865: LD_INT 36
46867: DOUBLE
46868: EQUAL
46869: IFTRUE 46873
46871: GO 46898
46873: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46874: LD_ADDR_VAR 0 3
46878: PUSH
46879: LD_INT 15
46881: PPUSH
46882: LD_VAR 0 1
46886: PPUSH
46887: CALL_OW 321
46891: PUSH
46892: LD_INT 2
46894: EQUAL
46895: ST_TO_ADDR
46896: GO 47142
46898: LD_INT 30
46900: DOUBLE
46901: EQUAL
46902: IFTRUE 46906
46904: GO 46931
46906: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46907: LD_ADDR_VAR 0 3
46911: PUSH
46912: LD_INT 20
46914: PPUSH
46915: LD_VAR 0 1
46919: PPUSH
46920: CALL_OW 321
46924: PUSH
46925: LD_INT 2
46927: EQUAL
46928: ST_TO_ADDR
46929: GO 47142
46931: LD_INT 28
46933: DOUBLE
46934: EQUAL
46935: IFTRUE 46945
46937: LD_INT 21
46939: DOUBLE
46940: EQUAL
46941: IFTRUE 46945
46943: GO 46970
46945: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46946: LD_ADDR_VAR 0 3
46950: PUSH
46951: LD_INT 21
46953: PPUSH
46954: LD_VAR 0 1
46958: PPUSH
46959: CALL_OW 321
46963: PUSH
46964: LD_INT 2
46966: EQUAL
46967: ST_TO_ADDR
46968: GO 47142
46970: LD_INT 16
46972: DOUBLE
46973: EQUAL
46974: IFTRUE 46978
46976: GO 47003
46978: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46979: LD_ADDR_VAR 0 3
46983: PUSH
46984: LD_INT 84
46986: PPUSH
46987: LD_VAR 0 1
46991: PPUSH
46992: CALL_OW 321
46996: PUSH
46997: LD_INT 2
46999: EQUAL
47000: ST_TO_ADDR
47001: GO 47142
47003: LD_INT 19
47005: DOUBLE
47006: EQUAL
47007: IFTRUE 47017
47009: LD_INT 23
47011: DOUBLE
47012: EQUAL
47013: IFTRUE 47017
47015: GO 47042
47017: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47018: LD_ADDR_VAR 0 3
47022: PUSH
47023: LD_INT 83
47025: PPUSH
47026: LD_VAR 0 1
47030: PPUSH
47031: CALL_OW 321
47035: PUSH
47036: LD_INT 2
47038: EQUAL
47039: ST_TO_ADDR
47040: GO 47142
47042: LD_INT 17
47044: DOUBLE
47045: EQUAL
47046: IFTRUE 47050
47048: GO 47075
47050: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47051: LD_ADDR_VAR 0 3
47055: PUSH
47056: LD_INT 39
47058: PPUSH
47059: LD_VAR 0 1
47063: PPUSH
47064: CALL_OW 321
47068: PUSH
47069: LD_INT 2
47071: EQUAL
47072: ST_TO_ADDR
47073: GO 47142
47075: LD_INT 18
47077: DOUBLE
47078: EQUAL
47079: IFTRUE 47083
47081: GO 47108
47083: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47084: LD_ADDR_VAR 0 3
47088: PUSH
47089: LD_INT 40
47091: PPUSH
47092: LD_VAR 0 1
47096: PPUSH
47097: CALL_OW 321
47101: PUSH
47102: LD_INT 2
47104: EQUAL
47105: ST_TO_ADDR
47106: GO 47142
47108: LD_INT 27
47110: DOUBLE
47111: EQUAL
47112: IFTRUE 47116
47114: GO 47141
47116: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47117: LD_ADDR_VAR 0 3
47121: PUSH
47122: LD_INT 35
47124: PPUSH
47125: LD_VAR 0 1
47129: PPUSH
47130: CALL_OW 321
47134: PUSH
47135: LD_INT 2
47137: EQUAL
47138: ST_TO_ADDR
47139: GO 47142
47141: POP
// end ;
47142: LD_VAR 0 3
47146: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47147: LD_INT 0
47149: PPUSH
47150: PPUSH
47151: PPUSH
47152: PPUSH
47153: PPUSH
47154: PPUSH
47155: PPUSH
47156: PPUSH
47157: PPUSH
47158: PPUSH
47159: PPUSH
// result := false ;
47160: LD_ADDR_VAR 0 6
47164: PUSH
47165: LD_INT 0
47167: ST_TO_ADDR
// if btype = b_depot then
47168: LD_VAR 0 2
47172: PUSH
47173: LD_INT 0
47175: EQUAL
47176: IFFALSE 47188
// begin result := true ;
47178: LD_ADDR_VAR 0 6
47182: PUSH
47183: LD_INT 1
47185: ST_TO_ADDR
// exit ;
47186: GO 48042
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47188: LD_VAR 0 1
47192: NOT
47193: IFTRUE 47218
47195: PUSH
47196: LD_VAR 0 1
47200: PPUSH
47201: CALL_OW 266
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: IN
47216: NOT
47217: OR
47218: IFTRUE 47227
47220: PUSH
47221: LD_VAR 0 2
47225: NOT
47226: OR
47227: IFTRUE 47263
47229: PUSH
47230: LD_VAR 0 5
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 3
47246: PUSH
47247: LD_INT 4
47249: PUSH
47250: LD_INT 5
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: IN
47261: NOT
47262: OR
47263: IFTRUE 47282
47265: PUSH
47266: LD_VAR 0 3
47270: PPUSH
47271: LD_VAR 0 4
47275: PPUSH
47276: CALL_OW 488
47280: NOT
47281: OR
47282: IFFALSE 47286
// exit ;
47284: GO 48042
// side := GetSide ( depot ) ;
47286: LD_ADDR_VAR 0 9
47290: PUSH
47291: LD_VAR 0 1
47295: PPUSH
47296: CALL_OW 255
47300: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47301: LD_VAR 0 9
47305: PPUSH
47306: LD_VAR 0 2
47310: PPUSH
47311: CALL 46771 0 2
47315: NOT
47316: IFFALSE 47320
// exit ;
47318: GO 48042
// pom := GetBase ( depot ) ;
47320: LD_ADDR_VAR 0 10
47324: PUSH
47325: LD_VAR 0 1
47329: PPUSH
47330: CALL_OW 274
47334: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47335: LD_ADDR_VAR 0 11
47339: PUSH
47340: LD_VAR 0 2
47344: PPUSH
47345: LD_VAR 0 1
47349: PPUSH
47350: CALL_OW 248
47354: PPUSH
47355: CALL_OW 450
47359: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47360: LD_VAR 0 10
47364: PPUSH
47365: LD_INT 1
47367: PPUSH
47368: CALL_OW 275
47372: PUSH
47373: LD_VAR 0 11
47377: PUSH
47378: LD_INT 1
47380: ARRAY
47381: GREATEREQUAL
47382: IFFALSE 47408
47384: PUSH
47385: LD_VAR 0 10
47389: PPUSH
47390: LD_INT 2
47392: PPUSH
47393: CALL_OW 275
47397: PUSH
47398: LD_VAR 0 11
47402: PUSH
47403: LD_INT 2
47405: ARRAY
47406: GREATEREQUAL
47407: AND
47408: IFFALSE 47434
47410: PUSH
47411: LD_VAR 0 10
47415: PPUSH
47416: LD_INT 3
47418: PPUSH
47419: CALL_OW 275
47423: PUSH
47424: LD_VAR 0 11
47428: PUSH
47429: LD_INT 3
47431: ARRAY
47432: GREATEREQUAL
47433: AND
47434: NOT
47435: IFFALSE 47439
// exit ;
47437: GO 48042
// if GetBType ( depot ) = b_depot then
47439: LD_VAR 0 1
47443: PPUSH
47444: CALL_OW 266
47448: PUSH
47449: LD_INT 0
47451: EQUAL
47452: IFFALSE 47464
// dist := 28 else
47454: LD_ADDR_VAR 0 14
47458: PUSH
47459: LD_INT 28
47461: ST_TO_ADDR
47462: GO 47472
// dist := 36 ;
47464: LD_ADDR_VAR 0 14
47468: PUSH
47469: LD_INT 36
47471: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47472: LD_VAR 0 1
47476: PPUSH
47477: LD_VAR 0 3
47481: PPUSH
47482: LD_VAR 0 4
47486: PPUSH
47487: CALL_OW 297
47491: PUSH
47492: LD_VAR 0 14
47496: GREATER
47497: IFFALSE 47501
// exit ;
47499: GO 48042
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47501: LD_ADDR_VAR 0 12
47505: PUSH
47506: LD_VAR 0 2
47510: PPUSH
47511: LD_VAR 0 3
47515: PPUSH
47516: LD_VAR 0 4
47520: PPUSH
47521: LD_VAR 0 5
47525: PPUSH
47526: LD_VAR 0 1
47530: PPUSH
47531: CALL_OW 248
47535: PPUSH
47536: LD_INT 0
47538: PPUSH
47539: CALL 48047 0 6
47543: ST_TO_ADDR
// if not hexes then
47544: LD_VAR 0 12
47548: NOT
47549: IFFALSE 47553
// exit ;
47551: GO 48042
// hex := GetHexInfo ( x , y ) ;
47553: LD_ADDR_VAR 0 15
47557: PUSH
47558: LD_VAR 0 3
47562: PPUSH
47563: LD_VAR 0 4
47567: PPUSH
47568: CALL_OW 546
47572: ST_TO_ADDR
// if hex [ 1 ] then
47573: LD_VAR 0 15
47577: PUSH
47578: LD_INT 1
47580: ARRAY
47581: IFFALSE 47585
// exit ;
47583: GO 48042
// height := hex [ 2 ] ;
47585: LD_ADDR_VAR 0 13
47589: PUSH
47590: LD_VAR 0 15
47594: PUSH
47595: LD_INT 2
47597: ARRAY
47598: ST_TO_ADDR
// for i = 1 to hexes do
47599: LD_ADDR_VAR 0 7
47603: PUSH
47604: DOUBLE
47605: LD_INT 1
47607: DEC
47608: ST_TO_ADDR
47609: LD_VAR 0 12
47613: PUSH
47614: FOR_TO
47615: IFFALSE 47959
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47617: LD_VAR 0 12
47621: PUSH
47622: LD_VAR 0 7
47626: ARRAY
47627: PUSH
47628: LD_INT 1
47630: ARRAY
47631: PPUSH
47632: LD_VAR 0 12
47636: PUSH
47637: LD_VAR 0 7
47641: ARRAY
47642: PUSH
47643: LD_INT 2
47645: ARRAY
47646: PPUSH
47647: CALL_OW 488
47651: NOT
47652: IFTRUE 47694
47654: PUSH
47655: LD_VAR 0 12
47659: PUSH
47660: LD_VAR 0 7
47664: ARRAY
47665: PUSH
47666: LD_INT 1
47668: ARRAY
47669: PPUSH
47670: LD_VAR 0 12
47674: PUSH
47675: LD_VAR 0 7
47679: ARRAY
47680: PUSH
47681: LD_INT 2
47683: ARRAY
47684: PPUSH
47685: CALL_OW 428
47689: PUSH
47690: LD_INT 0
47692: GREATER
47693: OR
47694: IFTRUE 47732
47696: PUSH
47697: LD_VAR 0 12
47701: PUSH
47702: LD_VAR 0 7
47706: ARRAY
47707: PUSH
47708: LD_INT 1
47710: ARRAY
47711: PPUSH
47712: LD_VAR 0 12
47716: PUSH
47717: LD_VAR 0 7
47721: ARRAY
47722: PUSH
47723: LD_INT 2
47725: ARRAY
47726: PPUSH
47727: CALL_OW 351
47731: OR
47732: IFFALSE 47738
// exit ;
47734: POP
47735: POP
47736: GO 48042
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47738: LD_ADDR_VAR 0 8
47742: PUSH
47743: LD_VAR 0 12
47747: PUSH
47748: LD_VAR 0 7
47752: ARRAY
47753: PUSH
47754: LD_INT 1
47756: ARRAY
47757: PPUSH
47758: LD_VAR 0 12
47762: PUSH
47763: LD_VAR 0 7
47767: ARRAY
47768: PUSH
47769: LD_INT 2
47771: ARRAY
47772: PPUSH
47773: CALL_OW 546
47777: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47778: LD_VAR 0 8
47782: PUSH
47783: LD_INT 1
47785: ARRAY
47786: IFTRUE 47808
47788: PUSH
47789: LD_VAR 0 8
47793: PUSH
47794: LD_INT 2
47796: ARRAY
47797: PUSH
47798: LD_VAR 0 13
47802: PUSH
47803: LD_INT 2
47805: PLUS
47806: GREATER
47807: OR
47808: IFTRUE 47830
47810: PUSH
47811: LD_VAR 0 8
47815: PUSH
47816: LD_INT 2
47818: ARRAY
47819: PUSH
47820: LD_VAR 0 13
47824: PUSH
47825: LD_INT 2
47827: MINUS
47828: LESS
47829: OR
47830: IFTRUE 47898
47832: PUSH
47833: LD_VAR 0 8
47837: PUSH
47838: LD_INT 3
47840: ARRAY
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: LD_INT 8
47847: PUSH
47848: LD_INT 9
47850: PUSH
47851: LD_INT 10
47853: PUSH
47854: LD_INT 11
47856: PUSH
47857: LD_INT 12
47859: PUSH
47860: LD_INT 13
47862: PUSH
47863: LD_INT 16
47865: PUSH
47866: LD_INT 17
47868: PUSH
47869: LD_INT 18
47871: PUSH
47872: LD_INT 19
47874: PUSH
47875: LD_INT 20
47877: PUSH
47878: LD_INT 21
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: IN
47896: NOT
47897: OR
47898: IFTRUE 47911
47900: PUSH
47901: LD_VAR 0 8
47905: PUSH
47906: LD_INT 5
47908: ARRAY
47909: NOT
47910: OR
47911: IFTRUE 47951
47913: PUSH
47914: LD_VAR 0 8
47918: PUSH
47919: LD_INT 6
47921: ARRAY
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 7
47931: PUSH
47932: LD_INT 9
47934: PUSH
47935: LD_INT 10
47937: PUSH
47938: LD_INT 11
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: IN
47949: NOT
47950: OR
47951: IFFALSE 47957
// exit ;
47953: POP
47954: POP
47955: GO 48042
// end ;
47957: GO 47614
47959: POP
47960: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47961: LD_VAR 0 9
47965: PPUSH
47966: LD_VAR 0 3
47970: PPUSH
47971: LD_VAR 0 4
47975: PPUSH
47976: LD_INT 20
47978: PPUSH
47979: CALL 39861 0 4
47983: PUSH
47984: LD_INT 4
47986: ARRAY
47987: IFFALSE 47991
// exit ;
47989: GO 48042
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47991: LD_VAR 0 2
47995: PUSH
47996: LD_INT 29
47998: PUSH
47999: LD_INT 30
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: IN
48006: IFFALSE 48030
48008: PUSH
48009: LD_VAR 0 3
48013: PPUSH
48014: LD_VAR 0 4
48018: PPUSH
48019: LD_VAR 0 9
48023: PPUSH
48024: CALL_OW 440
48028: NOT
48029: AND
48030: IFFALSE 48034
// exit ;
48032: GO 48042
// result := true ;
48034: LD_ADDR_VAR 0 6
48038: PUSH
48039: LD_INT 1
48041: ST_TO_ADDR
// end ;
48042: LD_VAR 0 6
48046: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48047: LD_INT 0
48049: PPUSH
48050: PPUSH
48051: PPUSH
48052: PPUSH
48053: PPUSH
48054: PPUSH
48055: PPUSH
48056: PPUSH
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
48071: PPUSH
48072: PPUSH
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
48077: PPUSH
48078: PPUSH
48079: PPUSH
48080: PPUSH
48081: PPUSH
48082: PPUSH
48083: PPUSH
48084: PPUSH
48085: PPUSH
48086: PPUSH
48087: PPUSH
48088: PPUSH
48089: PPUSH
48090: PPUSH
48091: PPUSH
48092: PPUSH
48093: PPUSH
48094: PPUSH
48095: PPUSH
48096: PPUSH
48097: PPUSH
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
48106: PPUSH
// result = [ ] ;
48107: LD_ADDR_VAR 0 7
48111: PUSH
48112: EMPTY
48113: ST_TO_ADDR
// temp_list = [ ] ;
48114: LD_ADDR_VAR 0 9
48118: PUSH
48119: EMPTY
48120: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48121: LD_VAR 0 4
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 4
48140: PUSH
48141: LD_INT 5
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: IN
48152: NOT
48153: IFTRUE 48196
48155: PUSH
48156: LD_VAR 0 1
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: IN
48171: IFFALSE 48195
48173: PUSH
48174: LD_VAR 0 5
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 3
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: LIST
48192: IN
48193: NOT
48194: AND
48195: OR
48196: IFFALSE 48200
// exit ;
48198: GO 66599
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48200: LD_VAR 0 1
48204: PUSH
48205: LD_INT 6
48207: PUSH
48208: LD_INT 7
48210: PUSH
48211: LD_INT 8
48213: PUSH
48214: LD_INT 13
48216: PUSH
48217: LD_INT 12
48219: PUSH
48220: LD_INT 15
48222: PUSH
48223: LD_INT 11
48225: PUSH
48226: LD_INT 14
48228: PUSH
48229: LD_INT 10
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: IN
48243: IFFALSE 48253
// btype = b_lab ;
48245: LD_ADDR_VAR 0 1
48249: PUSH
48250: LD_INT 6
48252: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48253: LD_VAR 0 6
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: LIST
48271: IN
48272: NOT
48273: IFTRUE 48341
48275: PUSH
48276: LD_VAR 0 1
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 3
48292: PUSH
48293: LD_INT 6
48295: PUSH
48296: LD_INT 36
48298: PUSH
48299: LD_INT 4
48301: PUSH
48302: LD_INT 5
48304: PUSH
48305: LD_INT 31
48307: PUSH
48308: LD_INT 32
48310: PUSH
48311: LD_INT 33
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: IN
48327: NOT
48328: IFFALSE 48340
48330: PUSH
48331: LD_VAR 0 6
48335: PUSH
48336: LD_INT 1
48338: EQUAL
48339: AND
48340: OR
48341: IFTRUE 48373
48343: PUSH
48344: LD_VAR 0 1
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 3
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: IN
48359: NOT
48360: IFFALSE 48372
48362: PUSH
48363: LD_VAR 0 6
48367: PUSH
48368: LD_INT 2
48370: EQUAL
48371: AND
48372: OR
48373: IFFALSE 48383
// mode = 0 ;
48375: LD_ADDR_VAR 0 6
48379: PUSH
48380: LD_INT 0
48382: ST_TO_ADDR
// case mode of 0 :
48383: LD_VAR 0 6
48387: PUSH
48388: LD_INT 0
48390: DOUBLE
48391: EQUAL
48392: IFTRUE 48396
48394: GO 59849
48396: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48397: LD_ADDR_VAR 0 11
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 3
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 3
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48590: LD_ADDR_VAR 0 12
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 3
48747: NEG
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 3
48758: NEG
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48786: LD_ADDR_VAR 0 13
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 3
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: NEG
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 3
48957: NEG
48958: PUSH
48959: LD_INT 3
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48985: LD_ADDR_VAR 0 14
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49181: LD_ADDR_VAR 0 15
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49374: LD_ADDR_VAR 0 16
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 3
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49567: LD_ADDR_VAR 0 17
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49797: LD_ADDR_VAR 0 18
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50027: LD_ADDR_VAR 0 19
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50257: LD_ADDR_VAR 0 20
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50487: LD_ADDR_VAR 0 21
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50717: LD_ADDR_VAR 0 22
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50947: LD_ADDR_VAR 0 23
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: LD_INT 3
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51227: LD_ADDR_VAR 0 24
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51503: LD_ADDR_VAR 0 25
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 3
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51777: LD_ADDR_VAR 0 26
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 3
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: LD_INT 3
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52053: LD_ADDR_VAR 0 27
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: NEG
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52333: LD_ADDR_VAR 0 28
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 3
52580: NEG
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52615: LD_ADDR_VAR 0 29
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: LD_INT 3
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 3
52859: NEG
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52894: LD_ADDR_VAR 0 30
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 3
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 3
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 3
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53172: LD_ADDR_VAR 0 31
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 3
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53450: LD_ADDR_VAR 0 32
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53728: LD_ADDR_VAR 0 33
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: LD_INT 3
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54007: LD_ADDR_VAR 0 34
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: NEG
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: LD_INT 3
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54287: LD_ADDR_VAR 0 35
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54399: LD_ADDR_VAR 0 36
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54511: LD_ADDR_VAR 0 37
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54623: LD_ADDR_VAR 0 38
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54735: LD_ADDR_VAR 0 39
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54847: LD_ADDR_VAR 0 40
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54959: LD_ADDR_VAR 0 41
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 3
55202: PUSH
55203: LD_INT 3
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 3
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 3
55233: NEG
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 3
55256: NEG
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 3
55268: NEG
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55309: LD_ADDR_VAR 0 42
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 3
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 3
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 3
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 3
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 3
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 3
55618: NEG
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55659: LD_ADDR_VAR 0 43
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 3
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 3
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56007: LD_ADDR_VAR 0 44
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: LD_INT 3
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 3
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 3
56250: PUSH
56251: LD_INT 3
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: LD_INT 3
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 3
56281: NEG
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: NEG
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 3
56316: NEG
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56357: LD_ADDR_VAR 0 45
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: LD_INT 3
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 3
56666: NEG
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56707: LD_ADDR_VAR 0 46
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: NEG
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 3
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57055: LD_ADDR_VAR 0 47
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57206: LD_ADDR_VAR 0 48
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57353: LD_ADDR_VAR 0 49
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57497: LD_ADDR_VAR 0 50
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57641: LD_ADDR_VAR 0 51
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57788: LD_ADDR_VAR 0 52
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57939: LD_ADDR_VAR 0 53
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58169: LD_ADDR_VAR 0 54
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: LD_INT 2
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 2
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58399: LD_ADDR_VAR 0 55
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: LD_INT 2
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58629: LD_ADDR_VAR 0 56
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58859: LD_ADDR_VAR 0 57
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59089: LD_ADDR_VAR 0 58
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59319: LD_ADDR_VAR 0 59
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59407: LD_ADDR_VAR 0 60
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59495: LD_ADDR_VAR 0 61
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59583: LD_ADDR_VAR 0 62
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59671: LD_ADDR_VAR 0 63
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59759: LD_ADDR_VAR 0 64
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: ST_TO_ADDR
// end ; 1 :
59847: GO 65744
59849: LD_INT 1
59851: DOUBLE
59852: EQUAL
59853: IFTRUE 59857
59855: GO 62480
59857: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59858: LD_ADDR_VAR 0 11
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: LD_INT 3
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59902: LD_ADDR_VAR 0 12
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: LIST
59942: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59943: LD_ADDR_VAR 0 13
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: PUSH
59961: LD_INT 3
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: LIST
59982: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59983: LD_ADDR_VAR 0 14
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 3
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60024: LD_ADDR_VAR 0 15
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: LIST
60067: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60068: LD_ADDR_VAR 0 16
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 3
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60114: LD_ADDR_VAR 0 17
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: LIST
60157: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60158: LD_ADDR_VAR 0 18
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 3
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60199: LD_ADDR_VAR 0 19
60203: PUSH
60204: LD_INT 3
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60239: LD_ADDR_VAR 0 20
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: LD_INT 3
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60280: LD_ADDR_VAR 0 21
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: LIST
60323: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60324: LD_ADDR_VAR 0 22
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 3
60343: NEG
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: LIST
60369: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60370: LD_ADDR_VAR 0 23
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 3
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 4
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: LD_INT 3
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60414: LD_ADDR_VAR 0 24
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60455: LD_ADDR_VAR 0 25
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: LD_INT 3
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: LIST
60494: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60495: LD_ADDR_VAR 0 26
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 3
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: LD_INT 4
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: LIST
60535: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60536: LD_ADDR_VAR 0 27
60540: PUSH
60541: LD_INT 3
60543: NEG
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 3
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 4
60565: NEG
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: LIST
60579: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60580: LD_ADDR_VAR 0 28
60584: PUSH
60585: LD_INT 3
60587: NEG
60588: PUSH
60589: LD_INT 3
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: NEG
60600: PUSH
60601: LD_INT 4
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 4
60611: NEG
60612: PUSH
60613: LD_INT 3
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: LIST
60625: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60626: LD_ADDR_VAR 0 29
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 3
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 4
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 4
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: LD_INT 5
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 5
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: LD_INT 4
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 6
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 6
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 5
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60781: LD_ADDR_VAR 0 30
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 4
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 4
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 4
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 5
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 5
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 5
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 6
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 6
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60924: LD_ADDR_VAR 0 31
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: LD_INT 3
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: PUSH
60952: LD_INT 3
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 4
60961: PUSH
60962: LD_INT 3
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: LD_INT 4
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: PUSH
60982: LD_INT 4
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 5
60991: PUSH
60992: LD_INT 4
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 5
61001: PUSH
61002: LD_INT 5
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 4
61011: PUSH
61012: LD_INT 5
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 6
61021: PUSH
61022: LD_INT 5
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 6
61031: PUSH
61032: LD_INT 6
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 5
61041: PUSH
61042: LD_INT 6
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61063: LD_ADDR_VAR 0 32
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: LD_INT 4
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 4
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 3
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: LD_INT 5
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 5
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 6
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 6
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 5
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61206: LD_ADDR_VAR 0 33
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 3
61235: NEG
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 3
61247: NEG
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 4
61258: NEG
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 4
61269: NEG
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 4
61281: NEG
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 5
61292: NEG
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 5
61303: NEG
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 5
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 6
61326: NEG
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 6
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61361: LD_ADDR_VAR 0 34
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: LD_INT 3
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: LD_INT 4
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 4
61416: NEG
61417: PUSH
61418: LD_INT 3
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 4
61428: NEG
61429: PUSH
61430: LD_INT 4
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 4
61440: NEG
61441: PUSH
61442: LD_INT 5
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 5
61452: NEG
61453: PUSH
61454: LD_INT 4
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 5
61464: NEG
61465: PUSH
61466: LD_INT 5
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 5
61476: NEG
61477: PUSH
61478: LD_INT 6
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 6
61488: NEG
61489: PUSH
61490: LD_INT 5
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 6
61500: NEG
61501: PUSH
61502: LD_INT 6
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61524: LD_ADDR_VAR 0 41
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: LD_INT 2
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: LIST
61567: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61568: LD_ADDR_VAR 0 42
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61609: LD_ADDR_VAR 0 43
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 3
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61649: LD_ADDR_VAR 0 44
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: LD_INT 3
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61690: LD_ADDR_VAR 0 45
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 3
61719: NEG
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: LIST
61733: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61734: LD_ADDR_VAR 0 46
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: LD_INT 2
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 2
61753: NEG
61754: PUSH
61755: LD_INT 3
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: LD_INT 2
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: LIST
61779: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61780: LD_ADDR_VAR 0 47
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61813: LD_ADDR_VAR 0 48
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61844: LD_ADDR_VAR 0 49
61848: PUSH
61849: LD_INT 3
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 3
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61873: LD_ADDR_VAR 0 50
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61902: LD_ADDR_VAR 0 51
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 2
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61933: LD_ADDR_VAR 0 52
61937: PUSH
61938: LD_INT 3
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 3
61952: NEG
61953: PUSH
61954: LD_INT 2
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61966: LD_ADDR_VAR 0 53
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 3
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: LD_INT 2
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: LIST
62009: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62010: LD_ADDR_VAR 0 54
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62051: LD_ADDR_VAR 0 55
62055: PUSH
62056: LD_INT 3
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 3
62068: PUSH
62069: LD_INT 3
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: LIST
62090: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62091: LD_ADDR_VAR 0 56
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: LD_INT 3
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: LIST
62131: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62132: LD_ADDR_VAR 0 57
62136: PUSH
62137: LD_INT 2
62139: NEG
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: NEG
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 3
62161: NEG
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62176: LD_ADDR_VAR 0 58
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: LD_INT 3
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 3
62195: NEG
62196: PUSH
62197: LD_INT 2
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 3
62207: NEG
62208: PUSH
62209: LD_INT 3
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: LIST
62221: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62222: LD_ADDR_VAR 0 59
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: LD_INT 2
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: LIST
62265: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62266: LD_ADDR_VAR 0 60
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62307: LD_ADDR_VAR 0 61
62311: PUSH
62312: LD_INT 2
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: LIST
62346: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62347: LD_ADDR_VAR 0 62
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: LIST
62387: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62388: LD_ADDR_VAR 0 63
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 2
62406: NEG
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: NEG
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62432: LD_ADDR_VAR 0 64
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: LD_INT 2
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 2
62451: NEG
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: LIST
62477: ST_TO_ADDR
// end ; 2 :
62478: GO 65744
62480: LD_INT 2
62482: DOUBLE
62483: EQUAL
62484: IFTRUE 62488
62486: GO 65743
62488: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62489: LD_ADDR_VAR 0 29
62493: PUSH
62494: LD_INT 4
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 4
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 5
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 5
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 4
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 3
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 3
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 5
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 3
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 4
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 4
62619: PUSH
62620: LD_INT 4
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: LD_INT 4
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: LD_INT 3
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 2
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 4
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: LD_INT 4
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 4
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 3
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 4
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: LD_INT 5
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 5
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 4
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: LD_INT 5
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 2
62761: NEG
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: NEG
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 4
62828: NEG
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 4
62839: NEG
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 4
62851: NEG
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 2
62863: NEG
62864: PUSH
62865: LD_INT 2
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 4
62874: NEG
62875: PUSH
62876: LD_INT 4
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 4
62886: NEG
62887: PUSH
62888: LD_INT 5
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 3
62898: NEG
62899: PUSH
62900: LD_INT 4
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 3
62910: NEG
62911: PUSH
62912: LD_INT 3
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 4
62922: NEG
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 5
62934: NEG
62935: PUSH
62936: LD_INT 4
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 5
62946: NEG
62947: PUSH
62948: LD_INT 5
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 3
62958: NEG
62959: PUSH
62960: LD_INT 5
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 5
62970: NEG
62971: PUSH
62972: LD_INT 3
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63027: LD_ADDR_VAR 0 30
63031: PUSH
63032: LD_INT 4
63034: PUSH
63035: LD_INT 4
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 4
63044: PUSH
63045: LD_INT 3
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 5
63054: PUSH
63055: LD_INT 4
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 5
63064: PUSH
63065: LD_INT 5
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 4
63074: PUSH
63075: LD_INT 5
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: LD_INT 4
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 5
63104: PUSH
63105: LD_INT 3
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: LD_INT 5
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: LD_INT 3
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: LD_INT 2
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: LD_INT 4
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: LD_INT 4
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: LD_INT 3
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 1
63185: NEG
63186: PUSH
63187: LD_INT 2
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: LD_INT 4
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 2
63206: NEG
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 4
63217: NEG
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 4
63228: NEG
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 3
63240: NEG
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 3
63251: NEG
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 4
63262: NEG
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 5
63273: NEG
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 5
63284: NEG
63285: PUSH
63286: LD_INT 1
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 5
63296: NEG
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 3
63308: NEG
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 3
63319: NEG
63320: PUSH
63321: LD_INT 3
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 3
63331: NEG
63332: PUSH
63333: LD_INT 4
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: LD_INT 3
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 2
63355: NEG
63356: PUSH
63357: LD_INT 2
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 3
63367: NEG
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 4
63379: NEG
63380: PUSH
63381: LD_INT 3
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 4
63391: NEG
63392: PUSH
63393: LD_INT 4
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 2
63403: NEG
63404: PUSH
63405: LD_INT 4
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 4
63415: NEG
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 4
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 5
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: LD_INT 4
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: LD_INT 3
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: LD_INT 3
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: LD_INT 4
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: LD_INT 5
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: LD_INT 3
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: LD_INT 5
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63574: LD_ADDR_VAR 0 31
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: LD_INT 4
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 3
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: LD_INT 4
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: LD_INT 5
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 5
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 4
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: LD_INT 5
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 2
63663: NEG
63664: PUSH
63665: LD_INT 3
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 3
63674: NEG
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: NEG
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 3
63719: NEG
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 4
63730: NEG
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 4
63741: NEG
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 4
63753: NEG
63754: PUSH
63755: LD_INT 2
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 2
63765: NEG
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 4
63776: NEG
63777: PUSH
63778: LD_INT 4
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 4
63788: NEG
63789: PUSH
63790: LD_INT 5
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: NEG
63801: PUSH
63802: LD_INT 4
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: LD_INT 3
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 4
63824: NEG
63825: PUSH
63826: LD_INT 3
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 5
63836: NEG
63837: PUSH
63838: LD_INT 4
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 5
63848: NEG
63849: PUSH
63850: LD_INT 5
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 3
63860: NEG
63861: PUSH
63862: LD_INT 5
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 5
63872: NEG
63873: PUSH
63874: LD_INT 3
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 3
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 4
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 3
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: LD_INT 2
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 2
63931: NEG
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: LD_INT 4
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 2
63963: PUSH
63964: LD_INT 2
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: LD_INT 4
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 4
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 4
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 5
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 5
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 4
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 3
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 3
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 5
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64124: LD_ADDR_VAR 0 32
64128: PUSH
64129: LD_INT 4
64131: NEG
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 4
64142: NEG
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 3
64154: NEG
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 3
64165: NEG
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 4
64176: NEG
64177: PUSH
64178: LD_INT 1
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 5
64187: NEG
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 5
64198: NEG
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 5
64210: NEG
64211: PUSH
64212: LD_INT 2
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 3
64222: NEG
64223: PUSH
64224: LD_INT 2
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 3
64233: NEG
64234: PUSH
64235: LD_INT 3
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 3
64245: NEG
64246: PUSH
64247: LD_INT 4
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 2
64257: NEG
64258: PUSH
64259: LD_INT 3
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: NEG
64270: PUSH
64271: LD_INT 2
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: NEG
64282: PUSH
64283: LD_INT 2
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 4
64293: NEG
64294: PUSH
64295: LD_INT 3
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 4
64305: NEG
64306: PUSH
64307: LD_INT 4
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 2
64317: NEG
64318: PUSH
64319: LD_INT 4
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 4
64329: NEG
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 4
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 5
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 4
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: LD_INT 3
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 3
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: LD_INT 4
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 5
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 2
64420: PUSH
64421: LD_INT 3
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 2
64431: NEG
64432: PUSH
64433: LD_INT 5
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 3
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 3
64453: PUSH
64454: LD_INT 1
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 4
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 4
64474: PUSH
64475: LD_INT 1
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 3
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: LD_INT 2
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 4
64526: PUSH
64527: LD_INT 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 4
64536: PUSH
64537: LD_INT 4
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 4
64546: PUSH
64547: LD_INT 3
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 5
64556: PUSH
64557: LD_INT 4
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 5
64566: PUSH
64567: LD_INT 5
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 4
64576: PUSH
64577: LD_INT 5
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: LD_INT 4
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: LD_INT 3
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 5
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 3
64616: PUSH
64617: LD_INT 5
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64671: LD_ADDR_VAR 0 33
64675: PUSH
64676: LD_INT 4
64678: NEG
64679: PUSH
64680: LD_INT 4
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 4
64690: NEG
64691: PUSH
64692: LD_INT 5
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 3
64702: NEG
64703: PUSH
64704: LD_INT 4
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 3
64714: NEG
64715: PUSH
64716: LD_INT 3
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 4
64726: NEG
64727: PUSH
64728: LD_INT 3
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 5
64738: NEG
64739: PUSH
64740: LD_INT 4
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 5
64750: NEG
64751: PUSH
64752: LD_INT 5
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 3
64762: NEG
64763: PUSH
64764: LD_INT 5
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 5
64774: NEG
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: LD_INT 3
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: LD_INT 4
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: LD_INT 3
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: LD_INT 2
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: LD_INT 3
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: LD_INT 4
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: LD_INT 2
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: NEG
64877: PUSH
64878: LD_INT 4
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 4
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 4
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 5
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 5
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 4
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 3
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 3
64960: PUSH
64961: LD_INT 2
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 5
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 3
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 4
65001: PUSH
65002: LD_INT 3
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 4
65011: PUSH
65012: LD_INT 4
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 3
65021: PUSH
65022: LD_INT 4
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: PUSH
65032: LD_INT 3
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 4
65051: PUSH
65052: LD_INT 2
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 2
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 4
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: LD_INT 4
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: LD_INT 5
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: LD_INT 5
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: LD_INT 4
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 1
65132: NEG
65133: PUSH
65134: LD_INT 3
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 2
65143: PUSH
65144: LD_INT 5
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: LD_INT 3
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65209: LD_ADDR_VAR 0 34
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: LD_INT 4
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 5
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: PUSH
65239: LD_INT 4
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 3
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: LD_INT 3
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: NEG
65272: PUSH
65273: LD_INT 4
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: LD_INT 5
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 2
65295: PUSH
65296: LD_INT 3
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: LD_INT 5
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 3
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 3
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 4
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 4
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: LD_INT 2
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 4
65401: PUSH
65402: LD_INT 2
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 4
65411: PUSH
65412: LD_INT 4
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 4
65421: PUSH
65422: LD_INT 3
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 5
65431: PUSH
65432: LD_INT 4
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 5
65441: PUSH
65442: LD_INT 5
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 4
65451: PUSH
65452: LD_INT 5
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: LD_INT 4
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 3
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 5
65481: PUSH
65482: LD_INT 3
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: LD_INT 5
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: LD_INT 3
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 2
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: LD_INT 4
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: LD_INT 4
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: LD_INT 3
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: NEG
65563: PUSH
65564: LD_INT 2
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: LD_INT 4
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 2
65583: NEG
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 4
65594: NEG
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 4
65605: NEG
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 3
65617: NEG
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 3
65628: NEG
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 4
65639: NEG
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 5
65650: NEG
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 5
65661: NEG
65662: PUSH
65663: LD_INT 1
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 5
65673: NEG
65674: PUSH
65675: LD_INT 2
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 3
65685: NEG
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: ST_TO_ADDR
// end ; end ;
65741: GO 65744
65743: POP
// case btype of b_depot , b_warehouse :
65744: LD_VAR 0 1
65748: PUSH
65749: LD_INT 0
65751: DOUBLE
65752: EQUAL
65753: IFTRUE 65763
65755: LD_INT 1
65757: DOUBLE
65758: EQUAL
65759: IFTRUE 65763
65761: GO 65964
65763: POP
// case nation of nation_american :
65764: LD_VAR 0 5
65768: PUSH
65769: LD_INT 1
65771: DOUBLE
65772: EQUAL
65773: IFTRUE 65777
65775: GO 65833
65777: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65778: LD_ADDR_VAR 0 9
65782: PUSH
65783: LD_VAR 0 11
65787: PUSH
65788: LD_VAR 0 12
65792: PUSH
65793: LD_VAR 0 13
65797: PUSH
65798: LD_VAR 0 14
65802: PUSH
65803: LD_VAR 0 15
65807: PUSH
65808: LD_VAR 0 16
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: PUSH
65821: LD_VAR 0 4
65825: PUSH
65826: LD_INT 1
65828: PLUS
65829: ARRAY
65830: ST_TO_ADDR
65831: GO 65962
65833: LD_INT 2
65835: DOUBLE
65836: EQUAL
65837: IFTRUE 65841
65839: GO 65897
65841: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65842: LD_ADDR_VAR 0 9
65846: PUSH
65847: LD_VAR 0 17
65851: PUSH
65852: LD_VAR 0 18
65856: PUSH
65857: LD_VAR 0 19
65861: PUSH
65862: LD_VAR 0 20
65866: PUSH
65867: LD_VAR 0 21
65871: PUSH
65872: LD_VAR 0 22
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: PUSH
65885: LD_VAR 0 4
65889: PUSH
65890: LD_INT 1
65892: PLUS
65893: ARRAY
65894: ST_TO_ADDR
65895: GO 65962
65897: LD_INT 3
65899: DOUBLE
65900: EQUAL
65901: IFTRUE 65905
65903: GO 65961
65905: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65906: LD_ADDR_VAR 0 9
65910: PUSH
65911: LD_VAR 0 23
65915: PUSH
65916: LD_VAR 0 24
65920: PUSH
65921: LD_VAR 0 25
65925: PUSH
65926: LD_VAR 0 26
65930: PUSH
65931: LD_VAR 0 27
65935: PUSH
65936: LD_VAR 0 28
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: PUSH
65949: LD_VAR 0 4
65953: PUSH
65954: LD_INT 1
65956: PLUS
65957: ARRAY
65958: ST_TO_ADDR
65959: GO 65962
65961: POP
65962: GO 66517
65964: LD_INT 2
65966: DOUBLE
65967: EQUAL
65968: IFTRUE 65978
65970: LD_INT 3
65972: DOUBLE
65973: EQUAL
65974: IFTRUE 65978
65976: GO 66034
65978: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65979: LD_ADDR_VAR 0 9
65983: PUSH
65984: LD_VAR 0 29
65988: PUSH
65989: LD_VAR 0 30
65993: PUSH
65994: LD_VAR 0 31
65998: PUSH
65999: LD_VAR 0 32
66003: PUSH
66004: LD_VAR 0 33
66008: PUSH
66009: LD_VAR 0 34
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: PUSH
66022: LD_VAR 0 4
66026: PUSH
66027: LD_INT 1
66029: PLUS
66030: ARRAY
66031: ST_TO_ADDR
66032: GO 66517
66034: LD_INT 16
66036: DOUBLE
66037: EQUAL
66038: IFTRUE 66096
66040: LD_INT 17
66042: DOUBLE
66043: EQUAL
66044: IFTRUE 66096
66046: LD_INT 18
66048: DOUBLE
66049: EQUAL
66050: IFTRUE 66096
66052: LD_INT 19
66054: DOUBLE
66055: EQUAL
66056: IFTRUE 66096
66058: LD_INT 22
66060: DOUBLE
66061: EQUAL
66062: IFTRUE 66096
66064: LD_INT 20
66066: DOUBLE
66067: EQUAL
66068: IFTRUE 66096
66070: LD_INT 21
66072: DOUBLE
66073: EQUAL
66074: IFTRUE 66096
66076: LD_INT 23
66078: DOUBLE
66079: EQUAL
66080: IFTRUE 66096
66082: LD_INT 24
66084: DOUBLE
66085: EQUAL
66086: IFTRUE 66096
66088: LD_INT 25
66090: DOUBLE
66091: EQUAL
66092: IFTRUE 66096
66094: GO 66152
66096: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66097: LD_ADDR_VAR 0 9
66101: PUSH
66102: LD_VAR 0 35
66106: PUSH
66107: LD_VAR 0 36
66111: PUSH
66112: LD_VAR 0 37
66116: PUSH
66117: LD_VAR 0 38
66121: PUSH
66122: LD_VAR 0 39
66126: PUSH
66127: LD_VAR 0 40
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: PUSH
66140: LD_VAR 0 4
66144: PUSH
66145: LD_INT 1
66147: PLUS
66148: ARRAY
66149: ST_TO_ADDR
66150: GO 66517
66152: LD_INT 6
66154: DOUBLE
66155: EQUAL
66156: IFTRUE 66208
66158: LD_INT 7
66160: DOUBLE
66161: EQUAL
66162: IFTRUE 66208
66164: LD_INT 8
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66208
66170: LD_INT 13
66172: DOUBLE
66173: EQUAL
66174: IFTRUE 66208
66176: LD_INT 12
66178: DOUBLE
66179: EQUAL
66180: IFTRUE 66208
66182: LD_INT 15
66184: DOUBLE
66185: EQUAL
66186: IFTRUE 66208
66188: LD_INT 11
66190: DOUBLE
66191: EQUAL
66192: IFTRUE 66208
66194: LD_INT 14
66196: DOUBLE
66197: EQUAL
66198: IFTRUE 66208
66200: LD_INT 10
66202: DOUBLE
66203: EQUAL
66204: IFTRUE 66208
66206: GO 66264
66208: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66209: LD_ADDR_VAR 0 9
66213: PUSH
66214: LD_VAR 0 41
66218: PUSH
66219: LD_VAR 0 42
66223: PUSH
66224: LD_VAR 0 43
66228: PUSH
66229: LD_VAR 0 44
66233: PUSH
66234: LD_VAR 0 45
66238: PUSH
66239: LD_VAR 0 46
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: PUSH
66252: LD_VAR 0 4
66256: PUSH
66257: LD_INT 1
66259: PLUS
66260: ARRAY
66261: ST_TO_ADDR
66262: GO 66517
66264: LD_INT 36
66266: DOUBLE
66267: EQUAL
66268: IFTRUE 66272
66270: GO 66328
66272: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66273: LD_ADDR_VAR 0 9
66277: PUSH
66278: LD_VAR 0 47
66282: PUSH
66283: LD_VAR 0 48
66287: PUSH
66288: LD_VAR 0 49
66292: PUSH
66293: LD_VAR 0 50
66297: PUSH
66298: LD_VAR 0 51
66302: PUSH
66303: LD_VAR 0 52
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: PUSH
66316: LD_VAR 0 4
66320: PUSH
66321: LD_INT 1
66323: PLUS
66324: ARRAY
66325: ST_TO_ADDR
66326: GO 66517
66328: LD_INT 4
66330: DOUBLE
66331: EQUAL
66332: IFTRUE 66354
66334: LD_INT 5
66336: DOUBLE
66337: EQUAL
66338: IFTRUE 66354
66340: LD_INT 34
66342: DOUBLE
66343: EQUAL
66344: IFTRUE 66354
66346: LD_INT 37
66348: DOUBLE
66349: EQUAL
66350: IFTRUE 66354
66352: GO 66410
66354: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66355: LD_ADDR_VAR 0 9
66359: PUSH
66360: LD_VAR 0 53
66364: PUSH
66365: LD_VAR 0 54
66369: PUSH
66370: LD_VAR 0 55
66374: PUSH
66375: LD_VAR 0 56
66379: PUSH
66380: LD_VAR 0 57
66384: PUSH
66385: LD_VAR 0 58
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: PUSH
66398: LD_VAR 0 4
66402: PUSH
66403: LD_INT 1
66405: PLUS
66406: ARRAY
66407: ST_TO_ADDR
66408: GO 66517
66410: LD_INT 31
66412: DOUBLE
66413: EQUAL
66414: IFTRUE 66460
66416: LD_INT 32
66418: DOUBLE
66419: EQUAL
66420: IFTRUE 66460
66422: LD_INT 33
66424: DOUBLE
66425: EQUAL
66426: IFTRUE 66460
66428: LD_INT 27
66430: DOUBLE
66431: EQUAL
66432: IFTRUE 66460
66434: LD_INT 26
66436: DOUBLE
66437: EQUAL
66438: IFTRUE 66460
66440: LD_INT 28
66442: DOUBLE
66443: EQUAL
66444: IFTRUE 66460
66446: LD_INT 29
66448: DOUBLE
66449: EQUAL
66450: IFTRUE 66460
66452: LD_INT 30
66454: DOUBLE
66455: EQUAL
66456: IFTRUE 66460
66458: GO 66516
66460: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66461: LD_ADDR_VAR 0 9
66465: PUSH
66466: LD_VAR 0 59
66470: PUSH
66471: LD_VAR 0 60
66475: PUSH
66476: LD_VAR 0 61
66480: PUSH
66481: LD_VAR 0 62
66485: PUSH
66486: LD_VAR 0 63
66490: PUSH
66491: LD_VAR 0 64
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: PUSH
66504: LD_VAR 0 4
66508: PUSH
66509: LD_INT 1
66511: PLUS
66512: ARRAY
66513: ST_TO_ADDR
66514: GO 66517
66516: POP
// temp_list2 = [ ] ;
66517: LD_ADDR_VAR 0 10
66521: PUSH
66522: EMPTY
66523: ST_TO_ADDR
// for i in temp_list do
66524: LD_ADDR_VAR 0 8
66528: PUSH
66529: LD_VAR 0 9
66533: PUSH
66534: FOR_IN
66535: IFFALSE 66587
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66537: LD_ADDR_VAR 0 10
66541: PUSH
66542: LD_VAR 0 10
66546: PUSH
66547: LD_VAR 0 8
66551: PUSH
66552: LD_INT 1
66554: ARRAY
66555: PUSH
66556: LD_VAR 0 2
66560: PLUS
66561: PUSH
66562: LD_VAR 0 8
66566: PUSH
66567: LD_INT 2
66569: ARRAY
66570: PUSH
66571: LD_VAR 0 3
66575: PLUS
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: ADD
66584: ST_TO_ADDR
66585: GO 66534
66587: POP
66588: POP
// result = temp_list2 ;
66589: LD_ADDR_VAR 0 7
66593: PUSH
66594: LD_VAR 0 10
66598: ST_TO_ADDR
// end ;
66599: LD_VAR 0 7
66603: RET
// export function EnemyInRange ( unit , dist ) ; begin
66604: LD_INT 0
66606: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66607: LD_ADDR_VAR 0 3
66611: PUSH
66612: LD_VAR 0 1
66616: PPUSH
66617: CALL_OW 255
66621: PPUSH
66622: LD_VAR 0 1
66626: PPUSH
66627: CALL_OW 250
66631: PPUSH
66632: LD_VAR 0 1
66636: PPUSH
66637: CALL_OW 251
66641: PPUSH
66642: LD_VAR 0 2
66646: PPUSH
66647: CALL 39861 0 4
66651: PUSH
66652: LD_INT 4
66654: ARRAY
66655: ST_TO_ADDR
// end ;
66656: LD_VAR 0 3
66660: RET
// export function PlayerSeeMe ( unit ) ; begin
66661: LD_INT 0
66663: PPUSH
// result := See ( your_side , unit ) ;
66664: LD_ADDR_VAR 0 2
66668: PUSH
66669: LD_OWVAR 2
66673: PPUSH
66674: LD_VAR 0 1
66678: PPUSH
66679: CALL_OW 292
66683: ST_TO_ADDR
// end ;
66684: LD_VAR 0 2
66688: RET
// export function ReverseDir ( unit ) ; begin
66689: LD_INT 0
66691: PPUSH
// if not unit then
66692: LD_VAR 0 1
66696: NOT
66697: IFFALSE 66701
// exit ;
66699: GO 66724
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66701: LD_ADDR_VAR 0 2
66705: PUSH
66706: LD_VAR 0 1
66710: PPUSH
66711: CALL_OW 254
66715: PUSH
66716: LD_INT 3
66718: PLUS
66719: PUSH
66720: LD_INT 6
66722: MOD
66723: ST_TO_ADDR
// end ;
66724: LD_VAR 0 2
66728: RET
// export function ReverseArray ( array ) ; var i ; begin
66729: LD_INT 0
66731: PPUSH
66732: PPUSH
// if not array then
66733: LD_VAR 0 1
66737: NOT
66738: IFFALSE 66742
// exit ;
66740: GO 66797
// result := [ ] ;
66742: LD_ADDR_VAR 0 2
66746: PUSH
66747: EMPTY
66748: ST_TO_ADDR
// for i := array downto 1 do
66749: LD_ADDR_VAR 0 3
66753: PUSH
66754: DOUBLE
66755: LD_VAR 0 1
66759: INC
66760: ST_TO_ADDR
66761: LD_INT 1
66763: PUSH
66764: FOR_DOWNTO
66765: IFFALSE 66795
// result := Join ( result , array [ i ] ) ;
66767: LD_ADDR_VAR 0 2
66771: PUSH
66772: LD_VAR 0 2
66776: PPUSH
66777: LD_VAR 0 1
66781: PUSH
66782: LD_VAR 0 3
66786: ARRAY
66787: PPUSH
66788: CALL 71649 0 2
66792: ST_TO_ADDR
66793: GO 66764
66795: POP
66796: POP
// end ;
66797: LD_VAR 0 2
66801: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66802: LD_INT 0
66804: PPUSH
66805: PPUSH
66806: PPUSH
66807: PPUSH
66808: PPUSH
66809: PPUSH
// if not unit or not hexes then
66810: LD_VAR 0 1
66814: NOT
66815: IFTRUE 66824
66817: PUSH
66818: LD_VAR 0 2
66822: NOT
66823: OR
66824: IFFALSE 66828
// exit ;
66826: GO 66951
// dist := 9999 ;
66828: LD_ADDR_VAR 0 5
66832: PUSH
66833: LD_INT 9999
66835: ST_TO_ADDR
// for i = 1 to hexes do
66836: LD_ADDR_VAR 0 4
66840: PUSH
66841: DOUBLE
66842: LD_INT 1
66844: DEC
66845: ST_TO_ADDR
66846: LD_VAR 0 2
66850: PUSH
66851: FOR_TO
66852: IFFALSE 66939
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66854: LD_ADDR_VAR 0 6
66858: PUSH
66859: LD_VAR 0 1
66863: PPUSH
66864: LD_VAR 0 2
66868: PUSH
66869: LD_VAR 0 4
66873: ARRAY
66874: PUSH
66875: LD_INT 1
66877: ARRAY
66878: PPUSH
66879: LD_VAR 0 2
66883: PUSH
66884: LD_VAR 0 4
66888: ARRAY
66889: PUSH
66890: LD_INT 2
66892: ARRAY
66893: PPUSH
66894: CALL_OW 297
66898: ST_TO_ADDR
// if tdist < dist then
66899: LD_VAR 0 6
66903: PUSH
66904: LD_VAR 0 5
66908: LESS
66909: IFFALSE 66937
// begin hex := hexes [ i ] ;
66911: LD_ADDR_VAR 0 8
66915: PUSH
66916: LD_VAR 0 2
66920: PUSH
66921: LD_VAR 0 4
66925: ARRAY
66926: ST_TO_ADDR
// dist := tdist ;
66927: LD_ADDR_VAR 0 5
66931: PUSH
66932: LD_VAR 0 6
66936: ST_TO_ADDR
// end ; end ;
66937: GO 66851
66939: POP
66940: POP
// result := hex ;
66941: LD_ADDR_VAR 0 3
66945: PUSH
66946: LD_VAR 0 8
66950: ST_TO_ADDR
// end ;
66951: LD_VAR 0 3
66955: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66956: LD_INT 0
66958: PPUSH
66959: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66960: LD_VAR 0 1
66964: NOT
66965: IFTRUE 67004
66967: PUSH
66968: LD_VAR 0 1
66972: PUSH
66973: LD_INT 21
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 23
66985: PUSH
66986: LD_INT 2
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PPUSH
66997: CALL_OW 69
67001: IN
67002: NOT
67003: OR
67004: IFFALSE 67008
// exit ;
67006: GO 67055
// for i = 1 to 3 do
67008: LD_ADDR_VAR 0 3
67012: PUSH
67013: DOUBLE
67014: LD_INT 1
67016: DEC
67017: ST_TO_ADDR
67018: LD_INT 3
67020: PUSH
67021: FOR_TO
67022: IFFALSE 67053
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67024: LD_VAR 0 1
67028: PPUSH
67029: CALL_OW 250
67033: PPUSH
67034: LD_VAR 0 1
67038: PPUSH
67039: CALL_OW 251
67043: PPUSH
67044: LD_INT 1
67046: PPUSH
67047: CALL_OW 453
67051: GO 67021
67053: POP
67054: POP
// end ;
67055: LD_VAR 0 2
67059: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67060: LD_INT 0
67062: PPUSH
67063: PPUSH
67064: PPUSH
67065: PPUSH
67066: PPUSH
67067: PPUSH
// if not unit or not enemy_unit then
67068: LD_VAR 0 1
67072: NOT
67073: IFTRUE 67082
67075: PUSH
67076: LD_VAR 0 2
67080: NOT
67081: OR
67082: IFFALSE 67086
// exit ;
67084: GO 67567
// if GetLives ( i ) < 250 then
67086: LD_VAR 0 4
67090: PPUSH
67091: CALL_OW 256
67095: PUSH
67096: LD_INT 250
67098: LESS
67099: IFFALSE 67112
// begin ComAutodestruct ( i ) ;
67101: LD_VAR 0 4
67105: PPUSH
67106: CALL 66956 0 1
// exit ;
67110: GO 67567
// end ; x := GetX ( enemy_unit ) ;
67112: LD_ADDR_VAR 0 7
67116: PUSH
67117: LD_VAR 0 2
67121: PPUSH
67122: CALL_OW 250
67126: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67127: LD_ADDR_VAR 0 8
67131: PUSH
67132: LD_VAR 0 2
67136: PPUSH
67137: CALL_OW 251
67141: ST_TO_ADDR
// if not x or not y then
67142: LD_VAR 0 7
67146: NOT
67147: IFTRUE 67156
67149: PUSH
67150: LD_VAR 0 8
67154: NOT
67155: OR
67156: IFFALSE 67160
// exit ;
67158: GO 67567
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67160: LD_ADDR_VAR 0 6
67164: PUSH
67165: LD_VAR 0 7
67169: PPUSH
67170: LD_INT 0
67172: PPUSH
67173: LD_INT 4
67175: PPUSH
67176: CALL_OW 272
67180: PUSH
67181: LD_VAR 0 8
67185: PPUSH
67186: LD_INT 0
67188: PPUSH
67189: LD_INT 4
67191: PPUSH
67192: CALL_OW 273
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_VAR 0 7
67205: PPUSH
67206: LD_INT 1
67208: PPUSH
67209: LD_INT 4
67211: PPUSH
67212: CALL_OW 272
67216: PUSH
67217: LD_VAR 0 8
67221: PPUSH
67222: LD_INT 1
67224: PPUSH
67225: LD_INT 4
67227: PPUSH
67228: CALL_OW 273
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_VAR 0 7
67241: PPUSH
67242: LD_INT 2
67244: PPUSH
67245: LD_INT 4
67247: PPUSH
67248: CALL_OW 272
67252: PUSH
67253: LD_VAR 0 8
67257: PPUSH
67258: LD_INT 2
67260: PPUSH
67261: LD_INT 4
67263: PPUSH
67264: CALL_OW 273
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_VAR 0 7
67277: PPUSH
67278: LD_INT 3
67280: PPUSH
67281: LD_INT 4
67283: PPUSH
67284: CALL_OW 272
67288: PUSH
67289: LD_VAR 0 8
67293: PPUSH
67294: LD_INT 3
67296: PPUSH
67297: LD_INT 4
67299: PPUSH
67300: CALL_OW 273
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_VAR 0 7
67313: PPUSH
67314: LD_INT 4
67316: PPUSH
67317: LD_INT 4
67319: PPUSH
67320: CALL_OW 272
67324: PUSH
67325: LD_VAR 0 8
67329: PPUSH
67330: LD_INT 4
67332: PPUSH
67333: LD_INT 4
67335: PPUSH
67336: CALL_OW 273
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_VAR 0 7
67349: PPUSH
67350: LD_INT 5
67352: PPUSH
67353: LD_INT 4
67355: PPUSH
67356: CALL_OW 272
67360: PUSH
67361: LD_VAR 0 8
67365: PPUSH
67366: LD_INT 5
67368: PPUSH
67369: LD_INT 4
67371: PPUSH
67372: CALL_OW 273
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: ST_TO_ADDR
// for i = tmp downto 1 do
67389: LD_ADDR_VAR 0 4
67393: PUSH
67394: DOUBLE
67395: LD_VAR 0 6
67399: INC
67400: ST_TO_ADDR
67401: LD_INT 1
67403: PUSH
67404: FOR_DOWNTO
67405: IFFALSE 67508
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67407: LD_VAR 0 6
67411: PUSH
67412: LD_VAR 0 4
67416: ARRAY
67417: PUSH
67418: LD_INT 1
67420: ARRAY
67421: PPUSH
67422: LD_VAR 0 6
67426: PUSH
67427: LD_VAR 0 4
67431: ARRAY
67432: PUSH
67433: LD_INT 2
67435: ARRAY
67436: PPUSH
67437: CALL_OW 488
67441: NOT
67442: IFTRUE 67484
67444: PUSH
67445: LD_VAR 0 6
67449: PUSH
67450: LD_VAR 0 4
67454: ARRAY
67455: PUSH
67456: LD_INT 1
67458: ARRAY
67459: PPUSH
67460: LD_VAR 0 6
67464: PUSH
67465: LD_VAR 0 4
67469: ARRAY
67470: PUSH
67471: LD_INT 2
67473: ARRAY
67474: PPUSH
67475: CALL_OW 428
67479: PUSH
67480: LD_INT 0
67482: NONEQUAL
67483: OR
67484: IFFALSE 67506
// tmp := Delete ( tmp , i ) ;
67486: LD_ADDR_VAR 0 6
67490: PUSH
67491: LD_VAR 0 6
67495: PPUSH
67496: LD_VAR 0 4
67500: PPUSH
67501: CALL_OW 3
67505: ST_TO_ADDR
67506: GO 67404
67508: POP
67509: POP
// j := GetClosestHex ( unit , tmp ) ;
67510: LD_ADDR_VAR 0 5
67514: PUSH
67515: LD_VAR 0 1
67519: PPUSH
67520: LD_VAR 0 6
67524: PPUSH
67525: CALL 66802 0 2
67529: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67530: LD_VAR 0 1
67534: PPUSH
67535: LD_VAR 0 5
67539: PUSH
67540: LD_INT 1
67542: ARRAY
67543: PPUSH
67544: LD_VAR 0 5
67548: PUSH
67549: LD_INT 2
67551: ARRAY
67552: PPUSH
67553: CALL_OW 111
// result := j ;
67557: LD_ADDR_VAR 0 3
67561: PUSH
67562: LD_VAR 0 5
67566: ST_TO_ADDR
// end ;
67567: LD_VAR 0 3
67571: RET
// export function PrepareApemanSoldier ( ) ; begin
67572: LD_INT 0
67574: PPUSH
// uc_nation := 0 ;
67575: LD_ADDR_OWVAR 21
67579: PUSH
67580: LD_INT 0
67582: ST_TO_ADDR
// hc_sex := sex_male ;
67583: LD_ADDR_OWVAR 27
67587: PUSH
67588: LD_INT 1
67590: ST_TO_ADDR
// hc_name :=  ;
67591: LD_ADDR_OWVAR 26
67595: PUSH
67596: LD_STRING 
67598: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67599: LD_ADDR_OWVAR 28
67603: PUSH
67604: LD_INT 15
67606: ST_TO_ADDR
// hc_gallery :=  ;
67607: LD_ADDR_OWVAR 33
67611: PUSH
67612: LD_STRING 
67614: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67615: LD_ADDR_OWVAR 31
67619: PUSH
67620: LD_INT 0
67622: PPUSH
67623: LD_INT 3
67625: PPUSH
67626: CALL_OW 12
67630: PUSH
67631: LD_INT 0
67633: PPUSH
67634: LD_INT 3
67636: PPUSH
67637: CALL_OW 12
67641: PUSH
67642: LD_INT 0
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67654: LD_ADDR_OWVAR 29
67658: PUSH
67659: LD_INT 10
67661: PUSH
67662: LD_INT 12
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: ST_TO_ADDR
// end ;
67669: LD_VAR 0 1
67673: RET
// export function PrepareApemanEngineer ( ) ; begin
67674: LD_INT 0
67676: PPUSH
// uc_nation := 0 ;
67677: LD_ADDR_OWVAR 21
67681: PUSH
67682: LD_INT 0
67684: ST_TO_ADDR
// hc_sex := sex_male ;
67685: LD_ADDR_OWVAR 27
67689: PUSH
67690: LD_INT 1
67692: ST_TO_ADDR
// hc_name :=  ;
67693: LD_ADDR_OWVAR 26
67697: PUSH
67698: LD_STRING 
67700: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67701: LD_ADDR_OWVAR 28
67705: PUSH
67706: LD_INT 16
67708: ST_TO_ADDR
// hc_gallery :=  ;
67709: LD_ADDR_OWVAR 33
67713: PUSH
67714: LD_STRING 
67716: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67717: LD_ADDR_OWVAR 31
67721: PUSH
67722: LD_INT 0
67724: PPUSH
67725: LD_INT 3
67727: PPUSH
67728: CALL_OW 12
67732: PUSH
67733: LD_INT 0
67735: PPUSH
67736: LD_INT 3
67738: PPUSH
67739: CALL_OW 12
67743: PUSH
67744: LD_INT 0
67746: PUSH
67747: LD_INT 0
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67756: LD_ADDR_OWVAR 29
67760: PUSH
67761: LD_INT 10
67763: PUSH
67764: LD_INT 12
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: ST_TO_ADDR
// end ;
67771: LD_VAR 0 1
67775: RET
// export function PrepareApeman ( agressivity ) ; begin
67776: LD_INT 0
67778: PPUSH
// uc_side := 0 ;
67779: LD_ADDR_OWVAR 20
67783: PUSH
67784: LD_INT 0
67786: ST_TO_ADDR
// uc_nation := 0 ;
67787: LD_ADDR_OWVAR 21
67791: PUSH
67792: LD_INT 0
67794: ST_TO_ADDR
// hc_sex := sex_male ;
67795: LD_ADDR_OWVAR 27
67799: PUSH
67800: LD_INT 1
67802: ST_TO_ADDR
// hc_class := class_apeman ;
67803: LD_ADDR_OWVAR 28
67807: PUSH
67808: LD_INT 12
67810: ST_TO_ADDR
// hc_gallery :=  ;
67811: LD_ADDR_OWVAR 33
67815: PUSH
67816: LD_STRING 
67818: ST_TO_ADDR
// hc_name :=  ;
67819: LD_ADDR_OWVAR 26
67823: PUSH
67824: LD_STRING 
67826: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67827: LD_ADDR_OWVAR 29
67831: PUSH
67832: LD_INT 10
67834: PUSH
67835: LD_INT 12
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: ST_TO_ADDR
// if agressivity = 0 then
67842: LD_VAR 0 1
67846: PUSH
67847: LD_INT 0
67849: EQUAL
67850: IFFALSE 67862
// hc_agressivity := 0 else
67852: LD_ADDR_OWVAR 35
67856: PUSH
67857: LD_INT 0
67859: ST_TO_ADDR
67860: GO 67883
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67862: LD_ADDR_OWVAR 35
67866: PUSH
67867: LD_VAR 0 1
67871: NEG
67872: PPUSH
67873: LD_VAR 0 1
67877: PPUSH
67878: CALL_OW 12
67882: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67883: LD_ADDR_OWVAR 31
67887: PUSH
67888: LD_INT 0
67890: PPUSH
67891: LD_INT 3
67893: PPUSH
67894: CALL_OW 12
67898: PUSH
67899: LD_INT 0
67901: PPUSH
67902: LD_INT 3
67904: PPUSH
67905: CALL_OW 12
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: LD_INT 0
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: ST_TO_ADDR
// end ;
67922: LD_VAR 0 2
67926: RET
// export function PrepareTiger ( agressivity ) ; begin
67927: LD_INT 0
67929: PPUSH
// uc_side := 0 ;
67930: LD_ADDR_OWVAR 20
67934: PUSH
67935: LD_INT 0
67937: ST_TO_ADDR
// uc_nation := 0 ;
67938: LD_ADDR_OWVAR 21
67942: PUSH
67943: LD_INT 0
67945: ST_TO_ADDR
// InitHc ;
67946: CALL_OW 19
// hc_class := class_tiger ;
67950: LD_ADDR_OWVAR 28
67954: PUSH
67955: LD_INT 14
67957: ST_TO_ADDR
// hc_gallery :=  ;
67958: LD_ADDR_OWVAR 33
67962: PUSH
67963: LD_STRING 
67965: ST_TO_ADDR
// hc_name :=  ;
67966: LD_ADDR_OWVAR 26
67970: PUSH
67971: LD_STRING 
67973: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67974: LD_ADDR_OWVAR 35
67978: PUSH
67979: LD_VAR 0 1
67983: NEG
67984: PPUSH
67985: LD_VAR 0 1
67989: PPUSH
67990: CALL_OW 12
67994: ST_TO_ADDR
// end ;
67995: LD_VAR 0 2
67999: RET
// export function PrepareEnchidna ( ) ; begin
68000: LD_INT 0
68002: PPUSH
// uc_side := 0 ;
68003: LD_ADDR_OWVAR 20
68007: PUSH
68008: LD_INT 0
68010: ST_TO_ADDR
// uc_nation := 0 ;
68011: LD_ADDR_OWVAR 21
68015: PUSH
68016: LD_INT 0
68018: ST_TO_ADDR
// InitHc ;
68019: CALL_OW 19
// hc_class := class_baggie ;
68023: LD_ADDR_OWVAR 28
68027: PUSH
68028: LD_INT 13
68030: ST_TO_ADDR
// hc_gallery :=  ;
68031: LD_ADDR_OWVAR 33
68035: PUSH
68036: LD_STRING 
68038: ST_TO_ADDR
// hc_name :=  ;
68039: LD_ADDR_OWVAR 26
68043: PUSH
68044: LD_STRING 
68046: ST_TO_ADDR
// end ;
68047: LD_VAR 0 1
68051: RET
// export function PrepareFrog ( ) ; begin
68052: LD_INT 0
68054: PPUSH
// uc_side := 0 ;
68055: LD_ADDR_OWVAR 20
68059: PUSH
68060: LD_INT 0
68062: ST_TO_ADDR
// uc_nation := 0 ;
68063: LD_ADDR_OWVAR 21
68067: PUSH
68068: LD_INT 0
68070: ST_TO_ADDR
// InitHc ;
68071: CALL_OW 19
// hc_class := class_frog ;
68075: LD_ADDR_OWVAR 28
68079: PUSH
68080: LD_INT 19
68082: ST_TO_ADDR
// hc_gallery :=  ;
68083: LD_ADDR_OWVAR 33
68087: PUSH
68088: LD_STRING 
68090: ST_TO_ADDR
// hc_name :=  ;
68091: LD_ADDR_OWVAR 26
68095: PUSH
68096: LD_STRING 
68098: ST_TO_ADDR
// end ;
68099: LD_VAR 0 1
68103: RET
// export function PrepareFish ( ) ; begin
68104: LD_INT 0
68106: PPUSH
// uc_side := 0 ;
68107: LD_ADDR_OWVAR 20
68111: PUSH
68112: LD_INT 0
68114: ST_TO_ADDR
// uc_nation := 0 ;
68115: LD_ADDR_OWVAR 21
68119: PUSH
68120: LD_INT 0
68122: ST_TO_ADDR
// InitHc ;
68123: CALL_OW 19
// hc_class := class_fish ;
68127: LD_ADDR_OWVAR 28
68131: PUSH
68132: LD_INT 20
68134: ST_TO_ADDR
// hc_gallery :=  ;
68135: LD_ADDR_OWVAR 33
68139: PUSH
68140: LD_STRING 
68142: ST_TO_ADDR
// hc_name :=  ;
68143: LD_ADDR_OWVAR 26
68147: PUSH
68148: LD_STRING 
68150: ST_TO_ADDR
// end ;
68151: LD_VAR 0 1
68155: RET
// export function PrepareBird ( ) ; begin
68156: LD_INT 0
68158: PPUSH
// uc_side := 0 ;
68159: LD_ADDR_OWVAR 20
68163: PUSH
68164: LD_INT 0
68166: ST_TO_ADDR
// uc_nation := 0 ;
68167: LD_ADDR_OWVAR 21
68171: PUSH
68172: LD_INT 0
68174: ST_TO_ADDR
// InitHc ;
68175: CALL_OW 19
// hc_class := class_phororhacos ;
68179: LD_ADDR_OWVAR 28
68183: PUSH
68184: LD_INT 18
68186: ST_TO_ADDR
// hc_gallery :=  ;
68187: LD_ADDR_OWVAR 33
68191: PUSH
68192: LD_STRING 
68194: ST_TO_ADDR
// hc_name :=  ;
68195: LD_ADDR_OWVAR 26
68199: PUSH
68200: LD_STRING 
68202: ST_TO_ADDR
// end ;
68203: LD_VAR 0 1
68207: RET
// export function PrepareHorse ( ) ; begin
68208: LD_INT 0
68210: PPUSH
// uc_side := 0 ;
68211: LD_ADDR_OWVAR 20
68215: PUSH
68216: LD_INT 0
68218: ST_TO_ADDR
// uc_nation := 0 ;
68219: LD_ADDR_OWVAR 21
68223: PUSH
68224: LD_INT 0
68226: ST_TO_ADDR
// InitHc ;
68227: CALL_OW 19
// hc_class := class_horse ;
68231: LD_ADDR_OWVAR 28
68235: PUSH
68236: LD_INT 21
68238: ST_TO_ADDR
// hc_gallery :=  ;
68239: LD_ADDR_OWVAR 33
68243: PUSH
68244: LD_STRING 
68246: ST_TO_ADDR
// hc_name :=  ;
68247: LD_ADDR_OWVAR 26
68251: PUSH
68252: LD_STRING 
68254: ST_TO_ADDR
// end ;
68255: LD_VAR 0 1
68259: RET
// export function PrepareMastodont ( ) ; begin
68260: LD_INT 0
68262: PPUSH
// uc_side := 0 ;
68263: LD_ADDR_OWVAR 20
68267: PUSH
68268: LD_INT 0
68270: ST_TO_ADDR
// uc_nation := 0 ;
68271: LD_ADDR_OWVAR 21
68275: PUSH
68276: LD_INT 0
68278: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68279: LD_ADDR_OWVAR 37
68283: PUSH
68284: LD_INT 31
68286: ST_TO_ADDR
// vc_control := control_rider ;
68287: LD_ADDR_OWVAR 38
68291: PUSH
68292: LD_INT 4
68294: ST_TO_ADDR
// end ;
68295: LD_VAR 0 1
68299: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68300: LD_INT 0
68302: PPUSH
68303: PPUSH
68304: PPUSH
// uc_side = 0 ;
68305: LD_ADDR_OWVAR 20
68309: PUSH
68310: LD_INT 0
68312: ST_TO_ADDR
// uc_nation = 0 ;
68313: LD_ADDR_OWVAR 21
68317: PUSH
68318: LD_INT 0
68320: ST_TO_ADDR
// InitHc_All ( ) ;
68321: CALL_OW 584
// InitVc ;
68325: CALL_OW 20
// if mastodonts then
68329: LD_VAR 0 6
68333: IFFALSE 68400
// for i = 1 to mastodonts do
68335: LD_ADDR_VAR 0 11
68339: PUSH
68340: DOUBLE
68341: LD_INT 1
68343: DEC
68344: ST_TO_ADDR
68345: LD_VAR 0 6
68349: PUSH
68350: FOR_TO
68351: IFFALSE 68398
// begin vc_chassis := 31 ;
68353: LD_ADDR_OWVAR 37
68357: PUSH
68358: LD_INT 31
68360: ST_TO_ADDR
// vc_control := control_rider ;
68361: LD_ADDR_OWVAR 38
68365: PUSH
68366: LD_INT 4
68368: ST_TO_ADDR
// animal := CreateVehicle ;
68369: LD_ADDR_VAR 0 12
68373: PUSH
68374: CALL_OW 45
68378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68379: LD_VAR 0 12
68383: PPUSH
68384: LD_VAR 0 8
68388: PPUSH
68389: LD_INT 0
68391: PPUSH
68392: CALL 70542 0 3
// end ;
68396: GO 68350
68398: POP
68399: POP
// if horses then
68400: LD_VAR 0 5
68404: IFFALSE 68471
// for i = 1 to horses do
68406: LD_ADDR_VAR 0 11
68410: PUSH
68411: DOUBLE
68412: LD_INT 1
68414: DEC
68415: ST_TO_ADDR
68416: LD_VAR 0 5
68420: PUSH
68421: FOR_TO
68422: IFFALSE 68469
// begin hc_class := 21 ;
68424: LD_ADDR_OWVAR 28
68428: PUSH
68429: LD_INT 21
68431: ST_TO_ADDR
// hc_gallery :=  ;
68432: LD_ADDR_OWVAR 33
68436: PUSH
68437: LD_STRING 
68439: ST_TO_ADDR
// animal := CreateHuman ;
68440: LD_ADDR_VAR 0 12
68444: PUSH
68445: CALL_OW 44
68449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68450: LD_VAR 0 12
68454: PPUSH
68455: LD_VAR 0 8
68459: PPUSH
68460: LD_INT 0
68462: PPUSH
68463: CALL 70542 0 3
// end ;
68467: GO 68421
68469: POP
68470: POP
// if birds then
68471: LD_VAR 0 1
68475: IFFALSE 68542
// for i = 1 to birds do
68477: LD_ADDR_VAR 0 11
68481: PUSH
68482: DOUBLE
68483: LD_INT 1
68485: DEC
68486: ST_TO_ADDR
68487: LD_VAR 0 1
68491: PUSH
68492: FOR_TO
68493: IFFALSE 68540
// begin hc_class := 18 ;
68495: LD_ADDR_OWVAR 28
68499: PUSH
68500: LD_INT 18
68502: ST_TO_ADDR
// hc_gallery =  ;
68503: LD_ADDR_OWVAR 33
68507: PUSH
68508: LD_STRING 
68510: ST_TO_ADDR
// animal := CreateHuman ;
68511: LD_ADDR_VAR 0 12
68515: PUSH
68516: CALL_OW 44
68520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68521: LD_VAR 0 12
68525: PPUSH
68526: LD_VAR 0 8
68530: PPUSH
68531: LD_INT 0
68533: PPUSH
68534: CALL 70542 0 3
// end ;
68538: GO 68492
68540: POP
68541: POP
// if tigers then
68542: LD_VAR 0 2
68546: IFFALSE 68630
// for i = 1 to tigers do
68548: LD_ADDR_VAR 0 11
68552: PUSH
68553: DOUBLE
68554: LD_INT 1
68556: DEC
68557: ST_TO_ADDR
68558: LD_VAR 0 2
68562: PUSH
68563: FOR_TO
68564: IFFALSE 68628
// begin hc_class = class_tiger ;
68566: LD_ADDR_OWVAR 28
68570: PUSH
68571: LD_INT 14
68573: ST_TO_ADDR
// hc_gallery =  ;
68574: LD_ADDR_OWVAR 33
68578: PUSH
68579: LD_STRING 
68581: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68582: LD_ADDR_OWVAR 35
68586: PUSH
68587: LD_INT 7
68589: NEG
68590: PPUSH
68591: LD_INT 7
68593: PPUSH
68594: CALL_OW 12
68598: ST_TO_ADDR
// animal := CreateHuman ;
68599: LD_ADDR_VAR 0 12
68603: PUSH
68604: CALL_OW 44
68608: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68609: LD_VAR 0 12
68613: PPUSH
68614: LD_VAR 0 8
68618: PPUSH
68619: LD_INT 0
68621: PPUSH
68622: CALL 70542 0 3
// end ;
68626: GO 68563
68628: POP
68629: POP
// if apemans then
68630: LD_VAR 0 3
68634: IFFALSE 68757
// for i = 1 to apemans do
68636: LD_ADDR_VAR 0 11
68640: PUSH
68641: DOUBLE
68642: LD_INT 1
68644: DEC
68645: ST_TO_ADDR
68646: LD_VAR 0 3
68650: PUSH
68651: FOR_TO
68652: IFFALSE 68755
// begin hc_class = class_apeman ;
68654: LD_ADDR_OWVAR 28
68658: PUSH
68659: LD_INT 12
68661: ST_TO_ADDR
// hc_gallery =  ;
68662: LD_ADDR_OWVAR 33
68666: PUSH
68667: LD_STRING 
68669: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68670: LD_ADDR_OWVAR 35
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PPUSH
68679: LD_INT 2
68681: PPUSH
68682: CALL_OW 12
68686: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68687: LD_ADDR_OWVAR 31
68691: PUSH
68692: LD_INT 1
68694: PPUSH
68695: LD_INT 3
68697: PPUSH
68698: CALL_OW 12
68702: PUSH
68703: LD_INT 1
68705: PPUSH
68706: LD_INT 3
68708: PPUSH
68709: CALL_OW 12
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: ST_TO_ADDR
// animal := CreateHuman ;
68726: LD_ADDR_VAR 0 12
68730: PUSH
68731: CALL_OW 44
68735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68736: LD_VAR 0 12
68740: PPUSH
68741: LD_VAR 0 8
68745: PPUSH
68746: LD_INT 0
68748: PPUSH
68749: CALL 70542 0 3
// end ;
68753: GO 68651
68755: POP
68756: POP
// if enchidnas then
68757: LD_VAR 0 4
68761: IFFALSE 68828
// for i = 1 to enchidnas do
68763: LD_ADDR_VAR 0 11
68767: PUSH
68768: DOUBLE
68769: LD_INT 1
68771: DEC
68772: ST_TO_ADDR
68773: LD_VAR 0 4
68777: PUSH
68778: FOR_TO
68779: IFFALSE 68826
// begin hc_class = 13 ;
68781: LD_ADDR_OWVAR 28
68785: PUSH
68786: LD_INT 13
68788: ST_TO_ADDR
// hc_gallery =  ;
68789: LD_ADDR_OWVAR 33
68793: PUSH
68794: LD_STRING 
68796: ST_TO_ADDR
// animal := CreateHuman ;
68797: LD_ADDR_VAR 0 12
68801: PUSH
68802: CALL_OW 44
68806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68807: LD_VAR 0 12
68811: PPUSH
68812: LD_VAR 0 8
68816: PPUSH
68817: LD_INT 0
68819: PPUSH
68820: CALL 70542 0 3
// end ;
68824: GO 68778
68826: POP
68827: POP
// if fishes then
68828: LD_VAR 0 7
68832: IFFALSE 68899
// for i = 1 to fishes do
68834: LD_ADDR_VAR 0 11
68838: PUSH
68839: DOUBLE
68840: LD_INT 1
68842: DEC
68843: ST_TO_ADDR
68844: LD_VAR 0 7
68848: PUSH
68849: FOR_TO
68850: IFFALSE 68897
// begin hc_class = 20 ;
68852: LD_ADDR_OWVAR 28
68856: PUSH
68857: LD_INT 20
68859: ST_TO_ADDR
// hc_gallery =  ;
68860: LD_ADDR_OWVAR 33
68864: PUSH
68865: LD_STRING 
68867: ST_TO_ADDR
// animal := CreateHuman ;
68868: LD_ADDR_VAR 0 12
68872: PUSH
68873: CALL_OW 44
68877: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68878: LD_VAR 0 12
68882: PPUSH
68883: LD_VAR 0 9
68887: PPUSH
68888: LD_INT 0
68890: PPUSH
68891: CALL 70542 0 3
// end ;
68895: GO 68849
68897: POP
68898: POP
// end ;
68899: LD_VAR 0 10
68903: RET
// export function WantHeal ( sci , unit ) ; begin
68904: LD_INT 0
68906: PPUSH
// if GetTaskList ( sci ) > 0 then
68907: LD_VAR 0 1
68911: PPUSH
68912: CALL_OW 437
68916: PUSH
68917: LD_INT 0
68919: GREATER
68920: IFFALSE 68992
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68922: LD_VAR 0 1
68926: PPUSH
68927: CALL_OW 437
68931: PUSH
68932: LD_INT 1
68934: ARRAY
68935: PUSH
68936: LD_INT 1
68938: ARRAY
68939: PUSH
68940: LD_STRING l
68942: EQUAL
68943: IFFALSE 68970
68945: PUSH
68946: LD_VAR 0 1
68950: PPUSH
68951: CALL_OW 437
68955: PUSH
68956: LD_INT 1
68958: ARRAY
68959: PUSH
68960: LD_INT 4
68962: ARRAY
68963: PUSH
68964: LD_VAR 0 2
68968: EQUAL
68969: AND
68970: IFFALSE 68982
// result := true else
68972: LD_ADDR_VAR 0 3
68976: PUSH
68977: LD_INT 1
68979: ST_TO_ADDR
68980: GO 68990
// result := false ;
68982: LD_ADDR_VAR 0 3
68986: PUSH
68987: LD_INT 0
68989: ST_TO_ADDR
// end else
68990: GO 69000
// result := false ;
68992: LD_ADDR_VAR 0 3
68996: PUSH
68997: LD_INT 0
68999: ST_TO_ADDR
// end ;
69000: LD_VAR 0 3
69004: RET
// export function HealTarget ( sci ) ; begin
69005: LD_INT 0
69007: PPUSH
// if not sci then
69008: LD_VAR 0 1
69012: NOT
69013: IFFALSE 69017
// exit ;
69015: GO 69082
// result := 0 ;
69017: LD_ADDR_VAR 0 2
69021: PUSH
69022: LD_INT 0
69024: ST_TO_ADDR
// if GetTaskList ( sci ) then
69025: LD_VAR 0 1
69029: PPUSH
69030: CALL_OW 437
69034: IFFALSE 69082
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69036: LD_VAR 0 1
69040: PPUSH
69041: CALL_OW 437
69045: PUSH
69046: LD_INT 1
69048: ARRAY
69049: PUSH
69050: LD_INT 1
69052: ARRAY
69053: PUSH
69054: LD_STRING l
69056: EQUAL
69057: IFFALSE 69082
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69059: LD_ADDR_VAR 0 2
69063: PUSH
69064: LD_VAR 0 1
69068: PPUSH
69069: CALL_OW 437
69073: PUSH
69074: LD_INT 1
69076: ARRAY
69077: PUSH
69078: LD_INT 4
69080: ARRAY
69081: ST_TO_ADDR
// end ;
69082: LD_VAR 0 2
69086: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69087: LD_INT 0
69089: PPUSH
69090: PPUSH
69091: PPUSH
69092: PPUSH
// if not base_units then
69093: LD_VAR 0 1
69097: NOT
69098: IFFALSE 69102
// exit ;
69100: GO 69189
// result := false ;
69102: LD_ADDR_VAR 0 2
69106: PUSH
69107: LD_INT 0
69109: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69110: LD_ADDR_VAR 0 5
69114: PUSH
69115: LD_VAR 0 1
69119: PPUSH
69120: LD_INT 21
69122: PUSH
69123: LD_INT 3
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PPUSH
69130: CALL_OW 72
69134: ST_TO_ADDR
// if not tmp then
69135: LD_VAR 0 5
69139: NOT
69140: IFFALSE 69144
// exit ;
69142: GO 69189
// for i in tmp do
69144: LD_ADDR_VAR 0 3
69148: PUSH
69149: LD_VAR 0 5
69153: PUSH
69154: FOR_IN
69155: IFFALSE 69187
// begin result := EnemyInRange ( i , 22 ) ;
69157: LD_ADDR_VAR 0 2
69161: PUSH
69162: LD_VAR 0 3
69166: PPUSH
69167: LD_INT 22
69169: PPUSH
69170: CALL 66604 0 2
69174: ST_TO_ADDR
// if result then
69175: LD_VAR 0 2
69179: IFFALSE 69185
// exit ;
69181: POP
69182: POP
69183: GO 69189
// end ;
69185: GO 69154
69187: POP
69188: POP
// end ;
69189: LD_VAR 0 2
69193: RET
// export function FilterByTag ( units , tag ) ; begin
69194: LD_INT 0
69196: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69197: LD_ADDR_VAR 0 3
69201: PUSH
69202: LD_VAR 0 1
69206: PPUSH
69207: LD_INT 120
69209: PUSH
69210: LD_VAR 0 2
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PPUSH
69219: CALL_OW 72
69223: ST_TO_ADDR
// end ;
69224: LD_VAR 0 3
69228: RET
// export function IsDriver ( un ) ; begin
69229: LD_INT 0
69231: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69232: LD_ADDR_VAR 0 2
69236: PUSH
69237: LD_VAR 0 1
69241: PUSH
69242: LD_INT 55
69244: PUSH
69245: EMPTY
69246: LIST
69247: PPUSH
69248: CALL_OW 69
69252: IN
69253: ST_TO_ADDR
// end ;
69254: LD_VAR 0 2
69258: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69259: LD_INT 0
69261: PPUSH
69262: PPUSH
// list := [ ] ;
69263: LD_ADDR_VAR 0 5
69267: PUSH
69268: EMPTY
69269: ST_TO_ADDR
// case d of 0 :
69270: LD_VAR 0 3
69274: PUSH
69275: LD_INT 0
69277: DOUBLE
69278: EQUAL
69279: IFTRUE 69283
69281: GO 69416
69283: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69284: LD_ADDR_VAR 0 5
69288: PUSH
69289: LD_VAR 0 1
69293: PUSH
69294: LD_INT 4
69296: MINUS
69297: PUSH
69298: LD_VAR 0 2
69302: PUSH
69303: LD_INT 4
69305: MINUS
69306: PUSH
69307: LD_INT 2
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: LIST
69314: PUSH
69315: LD_VAR 0 1
69319: PUSH
69320: LD_INT 3
69322: MINUS
69323: PUSH
69324: LD_VAR 0 2
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: LIST
69336: PUSH
69337: LD_VAR 0 1
69341: PUSH
69342: LD_INT 4
69344: PLUS
69345: PUSH
69346: LD_VAR 0 2
69350: PUSH
69351: LD_INT 4
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: LIST
69358: PUSH
69359: LD_VAR 0 1
69363: PUSH
69364: LD_INT 3
69366: PLUS
69367: PUSH
69368: LD_VAR 0 2
69372: PUSH
69373: LD_INT 3
69375: PLUS
69376: PUSH
69377: LD_INT 5
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: LIST
69384: PUSH
69385: LD_VAR 0 1
69389: PUSH
69390: LD_VAR 0 2
69394: PUSH
69395: LD_INT 4
69397: PLUS
69398: PUSH
69399: LD_INT 0
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: LIST
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: ST_TO_ADDR
// end ; 1 :
69414: GO 70114
69416: LD_INT 1
69418: DOUBLE
69419: EQUAL
69420: IFTRUE 69424
69422: GO 69557
69424: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69425: LD_ADDR_VAR 0 5
69429: PUSH
69430: LD_VAR 0 1
69434: PUSH
69435: LD_VAR 0 2
69439: PUSH
69440: LD_INT 4
69442: MINUS
69443: PUSH
69444: LD_INT 3
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: LIST
69451: PUSH
69452: LD_VAR 0 1
69456: PUSH
69457: LD_INT 3
69459: MINUS
69460: PUSH
69461: LD_VAR 0 2
69465: PUSH
69466: LD_INT 3
69468: MINUS
69469: PUSH
69470: LD_INT 2
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: LIST
69477: PUSH
69478: LD_VAR 0 1
69482: PUSH
69483: LD_INT 4
69485: MINUS
69486: PUSH
69487: LD_VAR 0 2
69491: PUSH
69492: LD_INT 1
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: LIST
69499: PUSH
69500: LD_VAR 0 1
69504: PUSH
69505: LD_VAR 0 2
69509: PUSH
69510: LD_INT 3
69512: PLUS
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: LIST
69521: PUSH
69522: LD_VAR 0 1
69526: PUSH
69527: LD_INT 4
69529: PLUS
69530: PUSH
69531: LD_VAR 0 2
69535: PUSH
69536: LD_INT 4
69538: PLUS
69539: PUSH
69540: LD_INT 5
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: LIST
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: ST_TO_ADDR
// end ; 2 :
69555: GO 70114
69557: LD_INT 2
69559: DOUBLE
69560: EQUAL
69561: IFTRUE 69565
69563: GO 69694
69565: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69566: LD_ADDR_VAR 0 5
69570: PUSH
69571: LD_VAR 0 1
69575: PUSH
69576: LD_VAR 0 2
69580: PUSH
69581: LD_INT 3
69583: MINUS
69584: PUSH
69585: LD_INT 3
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: LIST
69592: PUSH
69593: LD_VAR 0 1
69597: PUSH
69598: LD_INT 4
69600: PLUS
69601: PUSH
69602: LD_VAR 0 2
69606: PUSH
69607: LD_INT 4
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: LIST
69614: PUSH
69615: LD_VAR 0 1
69619: PUSH
69620: LD_VAR 0 2
69624: PUSH
69625: LD_INT 4
69627: PLUS
69628: PUSH
69629: LD_INT 0
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: LIST
69636: PUSH
69637: LD_VAR 0 1
69641: PUSH
69642: LD_INT 3
69644: MINUS
69645: PUSH
69646: LD_VAR 0 2
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: LIST
69658: PUSH
69659: LD_VAR 0 1
69663: PUSH
69664: LD_INT 4
69666: MINUS
69667: PUSH
69668: LD_VAR 0 2
69672: PUSH
69673: LD_INT 4
69675: MINUS
69676: PUSH
69677: LD_INT 2
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: LIST
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: ST_TO_ADDR
// end ; 3 :
69692: GO 70114
69694: LD_INT 3
69696: DOUBLE
69697: EQUAL
69698: IFTRUE 69702
69700: GO 69835
69702: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69703: LD_ADDR_VAR 0 5
69707: PUSH
69708: LD_VAR 0 1
69712: PUSH
69713: LD_INT 3
69715: PLUS
69716: PUSH
69717: LD_VAR 0 2
69721: PUSH
69722: LD_INT 4
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: LIST
69729: PUSH
69730: LD_VAR 0 1
69734: PUSH
69735: LD_INT 4
69737: PLUS
69738: PUSH
69739: LD_VAR 0 2
69743: PUSH
69744: LD_INT 4
69746: PLUS
69747: PUSH
69748: LD_INT 5
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: PUSH
69756: LD_VAR 0 1
69760: PUSH
69761: LD_INT 4
69763: MINUS
69764: PUSH
69765: LD_VAR 0 2
69769: PUSH
69770: LD_INT 1
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: LIST
69777: PUSH
69778: LD_VAR 0 1
69782: PUSH
69783: LD_VAR 0 2
69787: PUSH
69788: LD_INT 4
69790: MINUS
69791: PUSH
69792: LD_INT 3
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: LIST
69799: PUSH
69800: LD_VAR 0 1
69804: PUSH
69805: LD_INT 3
69807: MINUS
69808: PUSH
69809: LD_VAR 0 2
69813: PUSH
69814: LD_INT 3
69816: MINUS
69817: PUSH
69818: LD_INT 2
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: LIST
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: ST_TO_ADDR
// end ; 4 :
69833: GO 70114
69835: LD_INT 4
69837: DOUBLE
69838: EQUAL
69839: IFTRUE 69843
69841: GO 69976
69843: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69844: LD_ADDR_VAR 0 5
69848: PUSH
69849: LD_VAR 0 1
69853: PUSH
69854: LD_VAR 0 2
69858: PUSH
69859: LD_INT 4
69861: PLUS
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: LIST
69870: PUSH
69871: LD_VAR 0 1
69875: PUSH
69876: LD_INT 3
69878: PLUS
69879: PUSH
69880: LD_VAR 0 2
69884: PUSH
69885: LD_INT 3
69887: PLUS
69888: PUSH
69889: LD_INT 5
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: LIST
69896: PUSH
69897: LD_VAR 0 1
69901: PUSH
69902: LD_INT 4
69904: PLUS
69905: PUSH
69906: LD_VAR 0 2
69910: PUSH
69911: LD_INT 4
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: LIST
69918: PUSH
69919: LD_VAR 0 1
69923: PUSH
69924: LD_VAR 0 2
69928: PUSH
69929: LD_INT 3
69931: MINUS
69932: PUSH
69933: LD_INT 3
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: LIST
69940: PUSH
69941: LD_VAR 0 1
69945: PUSH
69946: LD_INT 4
69948: MINUS
69949: PUSH
69950: LD_VAR 0 2
69954: PUSH
69955: LD_INT 4
69957: MINUS
69958: PUSH
69959: LD_INT 2
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: LIST
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: ST_TO_ADDR
// end ; 5 :
69974: GO 70114
69976: LD_INT 5
69978: DOUBLE
69979: EQUAL
69980: IFTRUE 69984
69982: GO 70113
69984: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69985: LD_ADDR_VAR 0 5
69989: PUSH
69990: LD_VAR 0 1
69994: PUSH
69995: LD_INT 4
69997: MINUS
69998: PUSH
69999: LD_VAR 0 2
70003: PUSH
70004: LD_INT 1
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: LIST
70011: PUSH
70012: LD_VAR 0 1
70016: PUSH
70017: LD_VAR 0 2
70021: PUSH
70022: LD_INT 4
70024: MINUS
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: LIST
70033: PUSH
70034: LD_VAR 0 1
70038: PUSH
70039: LD_INT 4
70041: PLUS
70042: PUSH
70043: LD_VAR 0 2
70047: PUSH
70048: LD_INT 4
70050: PLUS
70051: PUSH
70052: LD_INT 5
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: LIST
70059: PUSH
70060: LD_VAR 0 1
70064: PUSH
70065: LD_INT 3
70067: PLUS
70068: PUSH
70069: LD_VAR 0 2
70073: PUSH
70074: LD_INT 4
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: LIST
70081: PUSH
70082: LD_VAR 0 1
70086: PUSH
70087: LD_VAR 0 2
70091: PUSH
70092: LD_INT 3
70094: PLUS
70095: PUSH
70096: LD_INT 0
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: LIST
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: ST_TO_ADDR
// end ; end ;
70111: GO 70114
70113: POP
// result := list ;
70114: LD_ADDR_VAR 0 4
70118: PUSH
70119: LD_VAR 0 5
70123: ST_TO_ADDR
// end ;
70124: LD_VAR 0 4
70128: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70129: LD_INT 0
70131: PPUSH
70132: PPUSH
70133: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70134: LD_VAR 0 1
70138: NOT
70139: IFTRUE 70167
70141: PUSH
70142: LD_VAR 0 2
70146: PUSH
70147: LD_INT 1
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: LD_INT 3
70155: PUSH
70156: LD_INT 4
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: IN
70165: NOT
70166: OR
70167: IFFALSE 70171
// exit ;
70169: GO 70254
// tmp := [ ] ;
70171: LD_ADDR_VAR 0 5
70175: PUSH
70176: EMPTY
70177: ST_TO_ADDR
// for i in units do
70178: LD_ADDR_VAR 0 4
70182: PUSH
70183: LD_VAR 0 1
70187: PUSH
70188: FOR_IN
70189: IFFALSE 70223
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70191: LD_ADDR_VAR 0 5
70195: PUSH
70196: LD_VAR 0 5
70200: PPUSH
70201: LD_VAR 0 4
70205: PPUSH
70206: LD_VAR 0 2
70210: PPUSH
70211: CALL_OW 259
70215: PPUSH
70216: CALL 71649 0 2
70220: ST_TO_ADDR
70221: GO 70188
70223: POP
70224: POP
// if not tmp then
70225: LD_VAR 0 5
70229: NOT
70230: IFFALSE 70234
// exit ;
70232: GO 70254
// result := SortListByListDesc ( units , tmp ) ;
70234: LD_ADDR_VAR 0 3
70238: PUSH
70239: LD_VAR 0 1
70243: PPUSH
70244: LD_VAR 0 5
70248: PPUSH
70249: CALL_OW 77
70253: ST_TO_ADDR
// end ;
70254: LD_VAR 0 3
70258: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70259: LD_INT 0
70261: PPUSH
70262: PPUSH
70263: PPUSH
// result := false ;
70264: LD_ADDR_VAR 0 3
70268: PUSH
70269: LD_INT 0
70271: ST_TO_ADDR
// if not building then
70272: LD_VAR 0 2
70276: NOT
70277: IFFALSE 70281
// exit ;
70279: GO 70425
// x := GetX ( building ) ;
70281: LD_ADDR_VAR 0 4
70285: PUSH
70286: LD_VAR 0 2
70290: PPUSH
70291: CALL_OW 250
70295: ST_TO_ADDR
// y := GetY ( building ) ;
70296: LD_ADDR_VAR 0 5
70300: PUSH
70301: LD_VAR 0 2
70305: PPUSH
70306: CALL_OW 251
70310: ST_TO_ADDR
// if not x or not y then
70311: LD_VAR 0 4
70315: NOT
70316: IFTRUE 70325
70318: PUSH
70319: LD_VAR 0 5
70323: NOT
70324: OR
70325: IFFALSE 70329
// exit ;
70327: GO 70425
// if GetTaskList ( unit ) then
70329: LD_VAR 0 1
70333: PPUSH
70334: CALL_OW 437
70338: IFFALSE 70425
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70340: LD_STRING e
70342: PUSH
70343: LD_VAR 0 1
70347: PPUSH
70348: CALL_OW 437
70352: PUSH
70353: LD_INT 1
70355: ARRAY
70356: PUSH
70357: LD_INT 1
70359: ARRAY
70360: EQUAL
70361: IFFALSE 70388
70363: PUSH
70364: LD_VAR 0 4
70368: PUSH
70369: LD_VAR 0 1
70373: PPUSH
70374: CALL_OW 437
70378: PUSH
70379: LD_INT 1
70381: ARRAY
70382: PUSH
70383: LD_INT 2
70385: ARRAY
70386: EQUAL
70387: AND
70388: IFFALSE 70415
70390: PUSH
70391: LD_VAR 0 5
70395: PUSH
70396: LD_VAR 0 1
70400: PPUSH
70401: CALL_OW 437
70405: PUSH
70406: LD_INT 1
70408: ARRAY
70409: PUSH
70410: LD_INT 3
70412: ARRAY
70413: EQUAL
70414: AND
70415: IFFALSE 70425
// result := true end ;
70417: LD_ADDR_VAR 0 3
70421: PUSH
70422: LD_INT 1
70424: ST_TO_ADDR
// end ;
70425: LD_VAR 0 3
70429: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70430: LD_INT 0
70432: PPUSH
// result := false ;
70433: LD_ADDR_VAR 0 4
70437: PUSH
70438: LD_INT 0
70440: ST_TO_ADDR
// if GetTaskList ( unit ) then
70441: LD_VAR 0 1
70445: PPUSH
70446: CALL_OW 437
70450: IFFALSE 70537
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70452: LD_STRING M
70454: PUSH
70455: LD_VAR 0 1
70459: PPUSH
70460: CALL_OW 437
70464: PUSH
70465: LD_INT 1
70467: ARRAY
70468: PUSH
70469: LD_INT 1
70471: ARRAY
70472: EQUAL
70473: IFFALSE 70500
70475: PUSH
70476: LD_VAR 0 2
70480: PUSH
70481: LD_VAR 0 1
70485: PPUSH
70486: CALL_OW 437
70490: PUSH
70491: LD_INT 1
70493: ARRAY
70494: PUSH
70495: LD_INT 2
70497: ARRAY
70498: EQUAL
70499: AND
70500: IFFALSE 70527
70502: PUSH
70503: LD_VAR 0 3
70507: PUSH
70508: LD_VAR 0 1
70512: PPUSH
70513: CALL_OW 437
70517: PUSH
70518: LD_INT 1
70520: ARRAY
70521: PUSH
70522: LD_INT 3
70524: ARRAY
70525: EQUAL
70526: AND
70527: IFFALSE 70537
// result := true ;
70529: LD_ADDR_VAR 0 4
70533: PUSH
70534: LD_INT 1
70536: ST_TO_ADDR
// end ; end ;
70537: LD_VAR 0 4
70541: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70542: LD_INT 0
70544: PPUSH
70545: PPUSH
70546: PPUSH
70547: PPUSH
// if not unit or not area then
70548: LD_VAR 0 1
70552: NOT
70553: IFTRUE 70562
70555: PUSH
70556: LD_VAR 0 2
70560: NOT
70561: OR
70562: IFFALSE 70566
// exit ;
70564: GO 70742
// tmp := AreaToList ( area , i ) ;
70566: LD_ADDR_VAR 0 6
70570: PUSH
70571: LD_VAR 0 2
70575: PPUSH
70576: LD_VAR 0 5
70580: PPUSH
70581: CALL_OW 517
70585: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70586: LD_ADDR_VAR 0 5
70590: PUSH
70591: DOUBLE
70592: LD_INT 1
70594: DEC
70595: ST_TO_ADDR
70596: LD_VAR 0 6
70600: PUSH
70601: LD_INT 1
70603: ARRAY
70604: PUSH
70605: FOR_TO
70606: IFFALSE 70740
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70608: LD_ADDR_VAR 0 7
70612: PUSH
70613: LD_VAR 0 6
70617: PUSH
70618: LD_INT 1
70620: ARRAY
70621: PUSH
70622: LD_VAR 0 5
70626: ARRAY
70627: PUSH
70628: LD_VAR 0 6
70632: PUSH
70633: LD_INT 2
70635: ARRAY
70636: PUSH
70637: LD_VAR 0 5
70641: ARRAY
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70647: LD_INT 92
70649: PUSH
70650: LD_VAR 0 7
70654: PUSH
70655: LD_INT 1
70657: ARRAY
70658: PUSH
70659: LD_VAR 0 7
70663: PUSH
70664: LD_INT 2
70666: ARRAY
70667: PUSH
70668: LD_INT 2
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: PPUSH
70677: CALL_OW 69
70681: PUSH
70682: LD_INT 0
70684: EQUAL
70685: IFFALSE 70738
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70687: LD_VAR 0 1
70691: PPUSH
70692: LD_VAR 0 7
70696: PUSH
70697: LD_INT 1
70699: ARRAY
70700: PPUSH
70701: LD_VAR 0 7
70705: PUSH
70706: LD_INT 2
70708: ARRAY
70709: PPUSH
70710: LD_VAR 0 3
70714: PPUSH
70715: CALL_OW 48
// result := IsPlaced ( unit ) ;
70719: LD_ADDR_VAR 0 4
70723: PUSH
70724: LD_VAR 0 1
70728: PPUSH
70729: CALL_OW 305
70733: ST_TO_ADDR
// exit ;
70734: POP
70735: POP
70736: GO 70742
// end ; end ;
70738: GO 70605
70740: POP
70741: POP
// end ;
70742: LD_VAR 0 4
70746: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70747: LD_INT 0
70749: PPUSH
70750: PPUSH
70751: PPUSH
// if not side or side > 8 then
70752: LD_VAR 0 1
70756: NOT
70757: IFTRUE 70769
70759: PUSH
70760: LD_VAR 0 1
70764: PUSH
70765: LD_INT 8
70767: GREATER
70768: OR
70769: IFFALSE 70773
// exit ;
70771: GO 70960
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70773: LD_ADDR_VAR 0 4
70777: PUSH
70778: LD_INT 22
70780: PUSH
70781: LD_VAR 0 1
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 21
70792: PUSH
70793: LD_INT 3
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PPUSH
70804: CALL_OW 69
70808: ST_TO_ADDR
// if not tmp then
70809: LD_VAR 0 4
70813: NOT
70814: IFFALSE 70818
// exit ;
70816: GO 70960
// enable_addtolog := true ;
70818: LD_ADDR_OWVAR 81
70822: PUSH
70823: LD_INT 1
70825: ST_TO_ADDR
// AddToLog ( [ ) ;
70826: LD_STRING [
70828: PPUSH
70829: CALL_OW 561
// for i in tmp do
70833: LD_ADDR_VAR 0 3
70837: PUSH
70838: LD_VAR 0 4
70842: PUSH
70843: FOR_IN
70844: IFFALSE 70951
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70846: LD_STRING [
70848: PUSH
70849: LD_VAR 0 3
70853: PPUSH
70854: CALL_OW 266
70858: STR
70859: PUSH
70860: LD_STRING , 
70862: STR
70863: PUSH
70864: LD_VAR 0 3
70868: PPUSH
70869: CALL_OW 250
70873: STR
70874: PUSH
70875: LD_STRING , 
70877: STR
70878: PUSH
70879: LD_VAR 0 3
70883: PPUSH
70884: CALL_OW 251
70888: STR
70889: PUSH
70890: LD_STRING , 
70892: STR
70893: PUSH
70894: LD_VAR 0 3
70898: PPUSH
70899: CALL_OW 254
70903: STR
70904: PUSH
70905: LD_STRING , 
70907: STR
70908: PUSH
70909: LD_VAR 0 3
70913: PPUSH
70914: LD_INT 1
70916: PPUSH
70917: CALL_OW 268
70921: STR
70922: PUSH
70923: LD_STRING , 
70925: STR
70926: PUSH
70927: LD_VAR 0 3
70931: PPUSH
70932: LD_INT 2
70934: PPUSH
70935: CALL_OW 268
70939: STR
70940: PUSH
70941: LD_STRING ],
70943: STR
70944: PPUSH
70945: CALL_OW 561
// end ;
70949: GO 70843
70951: POP
70952: POP
// AddToLog ( ]; ) ;
70953: LD_STRING ];
70955: PPUSH
70956: CALL_OW 561
// end ;
70960: LD_VAR 0 2
70964: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70965: LD_INT 0
70967: PPUSH
70968: PPUSH
70969: PPUSH
70970: PPUSH
70971: PPUSH
// if not area or not rate or not max then
70972: LD_VAR 0 1
70976: NOT
70977: IFTRUE 70986
70979: PUSH
70980: LD_VAR 0 2
70984: NOT
70985: OR
70986: IFTRUE 70995
70988: PUSH
70989: LD_VAR 0 4
70993: NOT
70994: OR
70995: IFFALSE 70999
// exit ;
70997: GO 71188
// while 1 do
70999: LD_INT 1
71001: IFFALSE 71188
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71003: LD_ADDR_VAR 0 9
71007: PUSH
71008: LD_VAR 0 1
71012: PPUSH
71013: LD_INT 1
71015: PPUSH
71016: CALL_OW 287
71020: PUSH
71021: LD_INT 10
71023: MUL
71024: ST_TO_ADDR
// r := rate / 10 ;
71025: LD_ADDR_VAR 0 7
71029: PUSH
71030: LD_VAR 0 2
71034: PUSH
71035: LD_INT 10
71037: DIVREAL
71038: ST_TO_ADDR
// time := 1 1$00 ;
71039: LD_ADDR_VAR 0 8
71043: PUSH
71044: LD_INT 2100
71046: ST_TO_ADDR
// if amount < min then
71047: LD_VAR 0 9
71051: PUSH
71052: LD_VAR 0 3
71056: LESS
71057: IFFALSE 71075
// r := r * 2 else
71059: LD_ADDR_VAR 0 7
71063: PUSH
71064: LD_VAR 0 7
71068: PUSH
71069: LD_INT 2
71071: MUL
71072: ST_TO_ADDR
71073: GO 71101
// if amount > max then
71075: LD_VAR 0 9
71079: PUSH
71080: LD_VAR 0 4
71084: GREATER
71085: IFFALSE 71101
// r := r / 2 ;
71087: LD_ADDR_VAR 0 7
71091: PUSH
71092: LD_VAR 0 7
71096: PUSH
71097: LD_INT 2
71099: DIVREAL
71100: ST_TO_ADDR
// time := time / r ;
71101: LD_ADDR_VAR 0 8
71105: PUSH
71106: LD_VAR 0 8
71110: PUSH
71111: LD_VAR 0 7
71115: DIVREAL
71116: ST_TO_ADDR
// if time < 0 then
71117: LD_VAR 0 8
71121: PUSH
71122: LD_INT 0
71124: LESS
71125: IFFALSE 71142
// time := time * - 1 ;
71127: LD_ADDR_VAR 0 8
71131: PUSH
71132: LD_VAR 0 8
71136: PUSH
71137: LD_INT 1
71139: NEG
71140: MUL
71141: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71142: LD_VAR 0 8
71146: PUSH
71147: LD_INT 35
71149: PPUSH
71150: LD_INT 875
71152: PPUSH
71153: CALL_OW 12
71157: PLUS
71158: PPUSH
71159: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71163: LD_INT 1
71165: PPUSH
71166: LD_INT 5
71168: PPUSH
71169: CALL_OW 12
71173: PPUSH
71174: LD_VAR 0 1
71178: PPUSH
71179: LD_INT 1
71181: PPUSH
71182: CALL_OW 55
// end ;
71186: GO 70999
// end ;
71188: LD_VAR 0 5
71192: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71193: LD_INT 0
71195: PPUSH
71196: PPUSH
71197: PPUSH
71198: PPUSH
71199: PPUSH
71200: PPUSH
71201: PPUSH
71202: PPUSH
// if not turrets or not factories then
71203: LD_VAR 0 1
71207: NOT
71208: IFTRUE 71217
71210: PUSH
71211: LD_VAR 0 2
71215: NOT
71216: OR
71217: IFFALSE 71221
// exit ;
71219: GO 71528
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71221: LD_ADDR_VAR 0 10
71225: PUSH
71226: LD_INT 5
71228: PUSH
71229: LD_INT 6
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: LD_INT 4
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 3
71248: PUSH
71249: LD_INT 5
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 24
71263: PUSH
71264: LD_INT 25
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 23
71273: PUSH
71274: LD_INT 27
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 42
71287: PUSH
71288: LD_INT 43
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 44
71297: PUSH
71298: LD_INT 46
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 45
71307: PUSH
71308: LD_INT 47
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: LIST
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: LIST
71324: ST_TO_ADDR
// result := [ ] ;
71325: LD_ADDR_VAR 0 3
71329: PUSH
71330: EMPTY
71331: ST_TO_ADDR
// for i in turrets do
71332: LD_ADDR_VAR 0 4
71336: PUSH
71337: LD_VAR 0 1
71341: PUSH
71342: FOR_IN
71343: IFFALSE 71526
// begin nat := GetNation ( i ) ;
71345: LD_ADDR_VAR 0 7
71349: PUSH
71350: LD_VAR 0 4
71354: PPUSH
71355: CALL_OW 248
71359: ST_TO_ADDR
// weapon := 0 ;
71360: LD_ADDR_VAR 0 8
71364: PUSH
71365: LD_INT 0
71367: ST_TO_ADDR
// if not nat then
71368: LD_VAR 0 7
71372: NOT
71373: IFFALSE 71377
// continue ;
71375: GO 71342
// for j in list [ nat ] do
71377: LD_ADDR_VAR 0 5
71381: PUSH
71382: LD_VAR 0 10
71386: PUSH
71387: LD_VAR 0 7
71391: ARRAY
71392: PUSH
71393: FOR_IN
71394: IFFALSE 71435
// if GetBWeapon ( i ) = j [ 1 ] then
71396: LD_VAR 0 4
71400: PPUSH
71401: CALL_OW 269
71405: PUSH
71406: LD_VAR 0 5
71410: PUSH
71411: LD_INT 1
71413: ARRAY
71414: EQUAL
71415: IFFALSE 71433
// begin weapon := j [ 2 ] ;
71417: LD_ADDR_VAR 0 8
71421: PUSH
71422: LD_VAR 0 5
71426: PUSH
71427: LD_INT 2
71429: ARRAY
71430: ST_TO_ADDR
// break ;
71431: GO 71435
// end ;
71433: GO 71393
71435: POP
71436: POP
// if not weapon then
71437: LD_VAR 0 8
71441: NOT
71442: IFFALSE 71446
// continue ;
71444: GO 71342
// for k in factories do
71446: LD_ADDR_VAR 0 6
71450: PUSH
71451: LD_VAR 0 2
71455: PUSH
71456: FOR_IN
71457: IFFALSE 71522
// begin weapons := AvailableWeaponList ( k ) ;
71459: LD_ADDR_VAR 0 9
71463: PUSH
71464: LD_VAR 0 6
71468: PPUSH
71469: CALL_OW 478
71473: ST_TO_ADDR
// if not weapons then
71474: LD_VAR 0 9
71478: NOT
71479: IFFALSE 71483
// continue ;
71481: GO 71456
// if weapon in weapons then
71483: LD_VAR 0 8
71487: PUSH
71488: LD_VAR 0 9
71492: IN
71493: IFFALSE 71520
// begin result := [ i , weapon ] ;
71495: LD_ADDR_VAR 0 3
71499: PUSH
71500: LD_VAR 0 4
71504: PUSH
71505: LD_VAR 0 8
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: ST_TO_ADDR
// exit ;
71514: POP
71515: POP
71516: POP
71517: POP
71518: GO 71528
// end ; end ;
71520: GO 71456
71522: POP
71523: POP
// end ;
71524: GO 71342
71526: POP
71527: POP
// end ;
71528: LD_VAR 0 3
71532: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71533: LD_INT 0
71535: PPUSH
// if not side or side > 8 then
71536: LD_VAR 0 3
71540: NOT
71541: IFTRUE 71553
71543: PUSH
71544: LD_VAR 0 3
71548: PUSH
71549: LD_INT 8
71551: GREATER
71552: OR
71553: IFFALSE 71557
// exit ;
71555: GO 71616
// if not range then
71557: LD_VAR 0 4
71561: NOT
71562: IFFALSE 71573
// range := - 12 ;
71564: LD_ADDR_VAR 0 4
71568: PUSH
71569: LD_INT 12
71571: NEG
71572: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71573: LD_VAR 0 1
71577: PPUSH
71578: LD_VAR 0 2
71582: PPUSH
71583: LD_VAR 0 3
71587: PPUSH
71588: LD_VAR 0 4
71592: PPUSH
71593: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71597: LD_VAR 0 1
71601: PPUSH
71602: LD_VAR 0 2
71606: PPUSH
71607: LD_VAR 0 3
71611: PPUSH
71612: CALL_OW 331
// end ;
71616: LD_VAR 0 5
71620: RET
// export function Video ( mode ) ; begin
71621: LD_INT 0
71623: PPUSH
// ingame_video = mode ;
71624: LD_ADDR_OWVAR 52
71628: PUSH
71629: LD_VAR 0 1
71633: ST_TO_ADDR
// interface_hidden = mode ;
71634: LD_ADDR_OWVAR 54
71638: PUSH
71639: LD_VAR 0 1
71643: ST_TO_ADDR
// end ;
71644: LD_VAR 0 2
71648: RET
// export function Join ( array , element ) ; begin
71649: LD_INT 0
71651: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71652: LD_ADDR_VAR 0 3
71656: PUSH
71657: LD_VAR 0 1
71661: PPUSH
71662: LD_VAR 0 1
71666: PUSH
71667: LD_INT 1
71669: PLUS
71670: PPUSH
71671: LD_VAR 0 2
71675: PPUSH
71676: CALL_OW 1
71680: ST_TO_ADDR
// end ;
71681: LD_VAR 0 3
71685: RET
// export function JoinUnion ( array , element ) ; begin
71686: LD_INT 0
71688: PPUSH
// result := array union element ;
71689: LD_ADDR_VAR 0 3
71693: PUSH
71694: LD_VAR 0 1
71698: PUSH
71699: LD_VAR 0 2
71703: UNION
71704: ST_TO_ADDR
// end ;
71705: LD_VAR 0 3
71709: RET
// export function GetBehemoths ( side ) ; begin
71710: LD_INT 0
71712: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71713: LD_ADDR_VAR 0 2
71717: PUSH
71718: LD_INT 22
71720: PUSH
71721: LD_VAR 0 1
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 31
71732: PUSH
71733: LD_INT 25
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PPUSH
71744: CALL_OW 69
71748: ST_TO_ADDR
// end ;
71749: LD_VAR 0 2
71753: RET
// export function Shuffle ( array ) ; var i , index ; begin
71754: LD_INT 0
71756: PPUSH
71757: PPUSH
71758: PPUSH
// result := [ ] ;
71759: LD_ADDR_VAR 0 2
71763: PUSH
71764: EMPTY
71765: ST_TO_ADDR
// if not array then
71766: LD_VAR 0 1
71770: NOT
71771: IFFALSE 71775
// exit ;
71773: GO 71874
// Randomize ;
71775: CALL_OW 10
// for i = array downto 1 do
71779: LD_ADDR_VAR 0 3
71783: PUSH
71784: DOUBLE
71785: LD_VAR 0 1
71789: INC
71790: ST_TO_ADDR
71791: LD_INT 1
71793: PUSH
71794: FOR_DOWNTO
71795: IFFALSE 71872
// begin index := rand ( 1 , array ) ;
71797: LD_ADDR_VAR 0 4
71801: PUSH
71802: LD_INT 1
71804: PPUSH
71805: LD_VAR 0 1
71809: PPUSH
71810: CALL_OW 12
71814: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71815: LD_ADDR_VAR 0 2
71819: PUSH
71820: LD_VAR 0 2
71824: PPUSH
71825: LD_VAR 0 2
71829: PUSH
71830: LD_INT 1
71832: PLUS
71833: PPUSH
71834: LD_VAR 0 1
71838: PUSH
71839: LD_VAR 0 4
71843: ARRAY
71844: PPUSH
71845: CALL_OW 2
71849: ST_TO_ADDR
// array := Delete ( array , index ) ;
71850: LD_ADDR_VAR 0 1
71854: PUSH
71855: LD_VAR 0 1
71859: PPUSH
71860: LD_VAR 0 4
71864: PPUSH
71865: CALL_OW 3
71869: ST_TO_ADDR
// end ;
71870: GO 71794
71872: POP
71873: POP
// end ;
71874: LD_VAR 0 2
71878: RET
// export function GetBaseMaterials ( base ) ; begin
71879: LD_INT 0
71881: PPUSH
// result := [ 0 , 0 , 0 ] ;
71882: LD_ADDR_VAR 0 2
71886: PUSH
71887: LD_INT 0
71889: PUSH
71890: LD_INT 0
71892: PUSH
71893: LD_INT 0
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: LIST
71900: ST_TO_ADDR
// if not base then
71901: LD_VAR 0 1
71905: NOT
71906: IFFALSE 71910
// exit ;
71908: GO 71959
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71910: LD_ADDR_VAR 0 2
71914: PUSH
71915: LD_VAR 0 1
71919: PPUSH
71920: LD_INT 1
71922: PPUSH
71923: CALL_OW 275
71927: PUSH
71928: LD_VAR 0 1
71932: PPUSH
71933: LD_INT 2
71935: PPUSH
71936: CALL_OW 275
71940: PUSH
71941: LD_VAR 0 1
71945: PPUSH
71946: LD_INT 3
71948: PPUSH
71949: CALL_OW 275
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: LIST
71958: ST_TO_ADDR
// end ;
71959: LD_VAR 0 2
71963: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71964: LD_INT 0
71966: PPUSH
71967: PPUSH
// result := array ;
71968: LD_ADDR_VAR 0 3
71972: PUSH
71973: LD_VAR 0 1
71977: ST_TO_ADDR
// if size >= result then
71978: LD_VAR 0 2
71982: PUSH
71983: LD_VAR 0 3
71987: GREATEREQUAL
71988: IFFALSE 71992
// exit ;
71990: GO 72042
// if size then
71992: LD_VAR 0 2
71996: IFFALSE 72042
// for i := array downto size do
71998: LD_ADDR_VAR 0 4
72002: PUSH
72003: DOUBLE
72004: LD_VAR 0 1
72008: INC
72009: ST_TO_ADDR
72010: LD_VAR 0 2
72014: PUSH
72015: FOR_DOWNTO
72016: IFFALSE 72040
// result := Delete ( result , result ) ;
72018: LD_ADDR_VAR 0 3
72022: PUSH
72023: LD_VAR 0 3
72027: PPUSH
72028: LD_VAR 0 3
72032: PPUSH
72033: CALL_OW 3
72037: ST_TO_ADDR
72038: GO 72015
72040: POP
72041: POP
// end ;
72042: LD_VAR 0 3
72046: RET
// export function ComExit ( unit ) ; var tmp ; begin
72047: LD_INT 0
72049: PPUSH
72050: PPUSH
// if not IsInUnit ( unit ) then
72051: LD_VAR 0 1
72055: PPUSH
72056: CALL_OW 310
72060: NOT
72061: IFFALSE 72065
// exit ;
72063: GO 72125
// tmp := IsInUnit ( unit ) ;
72065: LD_ADDR_VAR 0 3
72069: PUSH
72070: LD_VAR 0 1
72074: PPUSH
72075: CALL_OW 310
72079: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72080: LD_VAR 0 3
72084: PPUSH
72085: CALL_OW 247
72089: PUSH
72090: LD_INT 2
72092: EQUAL
72093: IFFALSE 72106
// ComExitVehicle ( unit ) else
72095: LD_VAR 0 1
72099: PPUSH
72100: CALL_OW 121
72104: GO 72115
// ComExitBuilding ( unit ) ;
72106: LD_VAR 0 1
72110: PPUSH
72111: CALL_OW 122
// result := tmp ;
72115: LD_ADDR_VAR 0 2
72119: PUSH
72120: LD_VAR 0 3
72124: ST_TO_ADDR
// end ;
72125: LD_VAR 0 2
72129: RET
// export function ComExitAll ( units ) ; var i ; begin
72130: LD_INT 0
72132: PPUSH
72133: PPUSH
// if not units then
72134: LD_VAR 0 1
72138: NOT
72139: IFFALSE 72143
// exit ;
72141: GO 72169
// for i in units do
72143: LD_ADDR_VAR 0 3
72147: PUSH
72148: LD_VAR 0 1
72152: PUSH
72153: FOR_IN
72154: IFFALSE 72167
// ComExit ( i ) ;
72156: LD_VAR 0 3
72160: PPUSH
72161: CALL 72047 0 1
72165: GO 72153
72167: POP
72168: POP
// end ;
72169: LD_VAR 0 2
72173: RET
// export function ResetHc ; begin
72174: LD_INT 0
72176: PPUSH
// InitHc ;
72177: CALL_OW 19
// hc_importance := 0 ;
72181: LD_ADDR_OWVAR 32
72185: PUSH
72186: LD_INT 0
72188: ST_TO_ADDR
// end ;
72189: LD_VAR 0 1
72193: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72194: LD_INT 0
72196: PPUSH
72197: PPUSH
72198: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72199: LD_ADDR_VAR 0 6
72203: PUSH
72204: LD_VAR 0 1
72208: PUSH
72209: LD_VAR 0 3
72213: PLUS
72214: PUSH
72215: LD_INT 2
72217: DIV
72218: ST_TO_ADDR
// if _x < 0 then
72219: LD_VAR 0 6
72223: PUSH
72224: LD_INT 0
72226: LESS
72227: IFFALSE 72244
// _x := _x * - 1 ;
72229: LD_ADDR_VAR 0 6
72233: PUSH
72234: LD_VAR 0 6
72238: PUSH
72239: LD_INT 1
72241: NEG
72242: MUL
72243: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72244: LD_ADDR_VAR 0 7
72248: PUSH
72249: LD_VAR 0 2
72253: PUSH
72254: LD_VAR 0 4
72258: PLUS
72259: PUSH
72260: LD_INT 2
72262: DIV
72263: ST_TO_ADDR
// if _y < 0 then
72264: LD_VAR 0 7
72268: PUSH
72269: LD_INT 0
72271: LESS
72272: IFFALSE 72289
// _y := _y * - 1 ;
72274: LD_ADDR_VAR 0 7
72278: PUSH
72279: LD_VAR 0 7
72283: PUSH
72284: LD_INT 1
72286: NEG
72287: MUL
72288: ST_TO_ADDR
// result := [ _x , _y ] ;
72289: LD_ADDR_VAR 0 5
72293: PUSH
72294: LD_VAR 0 6
72298: PUSH
72299: LD_VAR 0 7
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: ST_TO_ADDR
// end ;
72308: LD_VAR 0 5
72312: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72313: LD_INT 0
72315: PPUSH
72316: PPUSH
72317: PPUSH
72318: PPUSH
// task := GetTaskList ( unit ) ;
72319: LD_ADDR_VAR 0 7
72323: PUSH
72324: LD_VAR 0 1
72328: PPUSH
72329: CALL_OW 437
72333: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72334: LD_VAR 0 7
72338: NOT
72339: IFFALSE 72358
72341: PUSH
72342: LD_VAR 0 1
72346: PPUSH
72347: LD_VAR 0 2
72351: PPUSH
72352: CALL_OW 308
72356: NOT
72357: AND
72358: IFFALSE 72362
// exit ;
72360: GO 72480
// if IsInArea ( unit , area ) then
72362: LD_VAR 0 1
72366: PPUSH
72367: LD_VAR 0 2
72371: PPUSH
72372: CALL_OW 308
72376: IFFALSE 72394
// begin ComMoveToArea ( unit , goAway ) ;
72378: LD_VAR 0 1
72382: PPUSH
72383: LD_VAR 0 3
72387: PPUSH
72388: CALL_OW 113
// exit ;
72392: GO 72480
// end ; if task [ 1 ] [ 1 ] <> M then
72394: LD_VAR 0 7
72398: PUSH
72399: LD_INT 1
72401: ARRAY
72402: PUSH
72403: LD_INT 1
72405: ARRAY
72406: PUSH
72407: LD_STRING M
72409: NONEQUAL
72410: IFFALSE 72414
// exit ;
72412: GO 72480
// x := task [ 1 ] [ 2 ] ;
72414: LD_ADDR_VAR 0 5
72418: PUSH
72419: LD_VAR 0 7
72423: PUSH
72424: LD_INT 1
72426: ARRAY
72427: PUSH
72428: LD_INT 2
72430: ARRAY
72431: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72432: LD_ADDR_VAR 0 6
72436: PUSH
72437: LD_VAR 0 7
72441: PUSH
72442: LD_INT 1
72444: ARRAY
72445: PUSH
72446: LD_INT 3
72448: ARRAY
72449: ST_TO_ADDR
// if InArea ( x , y , area ) then
72450: LD_VAR 0 5
72454: PPUSH
72455: LD_VAR 0 6
72459: PPUSH
72460: LD_VAR 0 2
72464: PPUSH
72465: CALL_OW 309
72469: IFFALSE 72480
// ComStop ( unit ) ;
72471: LD_VAR 0 1
72475: PPUSH
72476: CALL_OW 141
// end ;
72480: LD_VAR 0 4
72484: RET
// export function Abs ( value ) ; begin
72485: LD_INT 0
72487: PPUSH
// result := value ;
72488: LD_ADDR_VAR 0 2
72492: PUSH
72493: LD_VAR 0 1
72497: ST_TO_ADDR
// if value < 0 then
72498: LD_VAR 0 1
72502: PUSH
72503: LD_INT 0
72505: LESS
72506: IFFALSE 72523
// result := value * - 1 ;
72508: LD_ADDR_VAR 0 2
72512: PUSH
72513: LD_VAR 0 1
72517: PUSH
72518: LD_INT 1
72520: NEG
72521: MUL
72522: ST_TO_ADDR
// end ;
72523: LD_VAR 0 2
72527: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72528: LD_INT 0
72530: PPUSH
72531: PPUSH
72532: PPUSH
72533: PPUSH
72534: PPUSH
72535: PPUSH
72536: PPUSH
72537: PPUSH
// if not unit or not building then
72538: LD_VAR 0 1
72542: NOT
72543: IFTRUE 72552
72545: PUSH
72546: LD_VAR 0 2
72550: NOT
72551: OR
72552: IFFALSE 72556
// exit ;
72554: GO 72784
// x := GetX ( building ) ;
72556: LD_ADDR_VAR 0 4
72560: PUSH
72561: LD_VAR 0 2
72565: PPUSH
72566: CALL_OW 250
72570: ST_TO_ADDR
// y := GetY ( building ) ;
72571: LD_ADDR_VAR 0 6
72575: PUSH
72576: LD_VAR 0 2
72580: PPUSH
72581: CALL_OW 251
72585: ST_TO_ADDR
// d := GetDir ( building ) ;
72586: LD_ADDR_VAR 0 8
72590: PUSH
72591: LD_VAR 0 2
72595: PPUSH
72596: CALL_OW 254
72600: ST_TO_ADDR
// r := 4 ;
72601: LD_ADDR_VAR 0 9
72605: PUSH
72606: LD_INT 4
72608: ST_TO_ADDR
// for i := 1 to 5 do
72609: LD_ADDR_VAR 0 10
72613: PUSH
72614: DOUBLE
72615: LD_INT 1
72617: DEC
72618: ST_TO_ADDR
72619: LD_INT 5
72621: PUSH
72622: FOR_TO
72623: IFFALSE 72782
// begin _x := ShiftX ( x , d , r + i ) ;
72625: LD_ADDR_VAR 0 5
72629: PUSH
72630: LD_VAR 0 4
72634: PPUSH
72635: LD_VAR 0 8
72639: PPUSH
72640: LD_VAR 0 9
72644: PUSH
72645: LD_VAR 0 10
72649: PLUS
72650: PPUSH
72651: CALL_OW 272
72655: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72656: LD_ADDR_VAR 0 7
72660: PUSH
72661: LD_VAR 0 6
72665: PPUSH
72666: LD_VAR 0 8
72670: PPUSH
72671: LD_VAR 0 9
72675: PUSH
72676: LD_VAR 0 10
72680: PLUS
72681: PPUSH
72682: CALL_OW 273
72686: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72687: LD_VAR 0 5
72691: PPUSH
72692: LD_VAR 0 7
72696: PPUSH
72697: CALL_OW 488
72701: IFFALSE 72736
72703: PUSH
72704: LD_VAR 0 5
72708: PPUSH
72709: LD_VAR 0 7
72713: PPUSH
72714: CALL_OW 428
72718: PPUSH
72719: CALL_OW 247
72723: PUSH
72724: LD_INT 3
72726: PUSH
72727: LD_INT 2
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: IN
72734: NOT
72735: AND
72736: IFFALSE 72780
// begin ComMoveXY ( unit , _x , _y ) ;
72738: LD_VAR 0 1
72742: PPUSH
72743: LD_VAR 0 5
72747: PPUSH
72748: LD_VAR 0 7
72752: PPUSH
72753: CALL_OW 111
// result := [ _x , _y ] ;
72757: LD_ADDR_VAR 0 3
72761: PUSH
72762: LD_VAR 0 5
72766: PUSH
72767: LD_VAR 0 7
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: ST_TO_ADDR
// exit ;
72776: POP
72777: POP
72778: GO 72784
// end ; end ;
72780: GO 72622
72782: POP
72783: POP
// end ;
72784: LD_VAR 0 3
72788: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72789: LD_INT 0
72791: PPUSH
72792: PPUSH
72793: PPUSH
// result := 0 ;
72794: LD_ADDR_VAR 0 3
72798: PUSH
72799: LD_INT 0
72801: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72802: LD_VAR 0 1
72806: PUSH
72807: LD_INT 0
72809: LESS
72810: IFTRUE 72822
72812: PUSH
72813: LD_VAR 0 1
72817: PUSH
72818: LD_INT 8
72820: GREATER
72821: OR
72822: IFTRUE 72834
72824: PUSH
72825: LD_VAR 0 2
72829: PUSH
72830: LD_INT 0
72832: LESS
72833: OR
72834: IFTRUE 72846
72836: PUSH
72837: LD_VAR 0 2
72841: PUSH
72842: LD_INT 8
72844: GREATER
72845: OR
72846: IFFALSE 72850
// exit ;
72848: GO 72925
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72850: LD_ADDR_VAR 0 4
72854: PUSH
72855: LD_INT 22
72857: PUSH
72858: LD_VAR 0 2
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PPUSH
72867: CALL_OW 69
72871: PUSH
72872: FOR_IN
72873: IFFALSE 72923
// begin un := UnitShoot ( i ) ;
72875: LD_ADDR_VAR 0 5
72879: PUSH
72880: LD_VAR 0 4
72884: PPUSH
72885: CALL_OW 504
72889: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72890: LD_VAR 0 5
72894: PPUSH
72895: CALL_OW 255
72899: PUSH
72900: LD_VAR 0 1
72904: EQUAL
72905: IFFALSE 72921
// begin result := un ;
72907: LD_ADDR_VAR 0 3
72911: PUSH
72912: LD_VAR 0 5
72916: ST_TO_ADDR
// exit ;
72917: POP
72918: POP
72919: GO 72925
// end ; end ;
72921: GO 72872
72923: POP
72924: POP
// end ;
72925: LD_VAR 0 3
72929: RET
// export function GetCargoBay ( units ) ; begin
72930: LD_INT 0
72932: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72933: LD_ADDR_VAR 0 2
72937: PUSH
72938: LD_VAR 0 1
72942: PPUSH
72943: LD_INT 2
72945: PUSH
72946: LD_INT 34
72948: PUSH
72949: LD_INT 12
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 34
72958: PUSH
72959: LD_INT 51
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 34
72968: PUSH
72969: LD_INT 32
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 34
72978: PUSH
72979: LD_INT 89
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: PPUSH
72993: CALL_OW 72
72997: ST_TO_ADDR
// end ;
72998: LD_VAR 0 2
73002: RET
// export function Negate ( value ) ; begin
73003: LD_INT 0
73005: PPUSH
// result := not value ;
73006: LD_ADDR_VAR 0 2
73010: PUSH
73011: LD_VAR 0 1
73015: NOT
73016: ST_TO_ADDR
// end ;
73017: LD_VAR 0 2
73021: RET
// export function Inc ( value ) ; begin
73022: LD_INT 0
73024: PPUSH
// result := value + 1 ;
73025: LD_ADDR_VAR 0 2
73029: PUSH
73030: LD_VAR 0 1
73034: PUSH
73035: LD_INT 1
73037: PLUS
73038: ST_TO_ADDR
// end ;
73039: LD_VAR 0 2
73043: RET
// export function Dec ( value ) ; begin
73044: LD_INT 0
73046: PPUSH
// result := value - 1 ;
73047: LD_ADDR_VAR 0 2
73051: PUSH
73052: LD_VAR 0 1
73056: PUSH
73057: LD_INT 1
73059: MINUS
73060: ST_TO_ADDR
// end ;
73061: LD_VAR 0 2
73065: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73066: LD_INT 0
73068: PPUSH
73069: PPUSH
73070: PPUSH
73071: PPUSH
73072: PPUSH
73073: PPUSH
73074: PPUSH
73075: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73076: LD_VAR 0 1
73080: PPUSH
73081: LD_VAR 0 2
73085: PPUSH
73086: CALL_OW 488
73090: NOT
73091: IFTRUE 73110
73093: PUSH
73094: LD_VAR 0 3
73098: PPUSH
73099: LD_VAR 0 4
73103: PPUSH
73104: CALL_OW 488
73108: NOT
73109: OR
73110: IFFALSE 73123
// begin result := - 1 ;
73112: LD_ADDR_VAR 0 5
73116: PUSH
73117: LD_INT 1
73119: NEG
73120: ST_TO_ADDR
// exit ;
73121: GO 73358
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73123: LD_ADDR_VAR 0 12
73127: PUSH
73128: LD_VAR 0 1
73132: PPUSH
73133: LD_VAR 0 2
73137: PPUSH
73138: LD_VAR 0 3
73142: PPUSH
73143: LD_VAR 0 4
73147: PPUSH
73148: CALL 72194 0 4
73152: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73153: LD_ADDR_VAR 0 11
73157: PUSH
73158: LD_VAR 0 1
73162: PPUSH
73163: LD_VAR 0 2
73167: PPUSH
73168: LD_VAR 0 12
73172: PUSH
73173: LD_INT 1
73175: ARRAY
73176: PPUSH
73177: LD_VAR 0 12
73181: PUSH
73182: LD_INT 2
73184: ARRAY
73185: PPUSH
73186: CALL_OW 298
73190: ST_TO_ADDR
// distance := 9999 ;
73191: LD_ADDR_VAR 0 10
73195: PUSH
73196: LD_INT 9999
73198: ST_TO_ADDR
// for i := 0 to 5 do
73199: LD_ADDR_VAR 0 6
73203: PUSH
73204: DOUBLE
73205: LD_INT 0
73207: DEC
73208: ST_TO_ADDR
73209: LD_INT 5
73211: PUSH
73212: FOR_TO
73213: IFFALSE 73356
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73215: LD_ADDR_VAR 0 7
73219: PUSH
73220: LD_VAR 0 1
73224: PPUSH
73225: LD_VAR 0 6
73229: PPUSH
73230: LD_VAR 0 11
73234: PPUSH
73235: CALL_OW 272
73239: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73240: LD_ADDR_VAR 0 8
73244: PUSH
73245: LD_VAR 0 2
73249: PPUSH
73250: LD_VAR 0 6
73254: PPUSH
73255: LD_VAR 0 11
73259: PPUSH
73260: CALL_OW 273
73264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73265: LD_VAR 0 7
73269: PPUSH
73270: LD_VAR 0 8
73274: PPUSH
73275: CALL_OW 488
73279: NOT
73280: IFFALSE 73284
// continue ;
73282: GO 73212
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73284: LD_ADDR_VAR 0 9
73288: PUSH
73289: LD_VAR 0 12
73293: PUSH
73294: LD_INT 1
73296: ARRAY
73297: PPUSH
73298: LD_VAR 0 12
73302: PUSH
73303: LD_INT 2
73305: ARRAY
73306: PPUSH
73307: LD_VAR 0 7
73311: PPUSH
73312: LD_VAR 0 8
73316: PPUSH
73317: CALL_OW 298
73321: ST_TO_ADDR
// if tmp < distance then
73322: LD_VAR 0 9
73326: PUSH
73327: LD_VAR 0 10
73331: LESS
73332: IFFALSE 73354
// begin result := i ;
73334: LD_ADDR_VAR 0 5
73338: PUSH
73339: LD_VAR 0 6
73343: ST_TO_ADDR
// distance := tmp ;
73344: LD_ADDR_VAR 0 10
73348: PUSH
73349: LD_VAR 0 9
73353: ST_TO_ADDR
// end ; end ;
73354: GO 73212
73356: POP
73357: POP
// end ;
73358: LD_VAR 0 5
73362: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73363: LD_INT 0
73365: PPUSH
73366: PPUSH
// if not driver or not IsInUnit ( driver ) then
73367: LD_VAR 0 1
73371: NOT
73372: IFTRUE 73386
73374: PUSH
73375: LD_VAR 0 1
73379: PPUSH
73380: CALL_OW 310
73384: NOT
73385: OR
73386: IFFALSE 73390
// exit ;
73388: GO 73480
// vehicle := IsInUnit ( driver ) ;
73390: LD_ADDR_VAR 0 3
73394: PUSH
73395: LD_VAR 0 1
73399: PPUSH
73400: CALL_OW 310
73404: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73405: LD_VAR 0 1
73409: PPUSH
73410: LD_STRING \
73412: PUSH
73413: LD_INT 0
73415: PUSH
73416: LD_INT 0
73418: PUSH
73419: LD_INT 0
73421: PUSH
73422: LD_INT 0
73424: PUSH
73425: LD_INT 0
73427: PUSH
73428: LD_INT 0
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: PUSH
73440: LD_STRING E
73442: PUSH
73443: LD_INT 0
73445: PUSH
73446: LD_INT 0
73448: PUSH
73449: LD_VAR 0 3
73453: PUSH
73454: LD_INT 0
73456: PUSH
73457: LD_INT 0
73459: PUSH
73460: LD_INT 0
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PPUSH
73476: CALL_OW 446
// end ;
73480: LD_VAR 0 2
73484: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73485: LD_INT 0
73487: PPUSH
73488: PPUSH
// if not driver or not IsInUnit ( driver ) then
73489: LD_VAR 0 1
73493: NOT
73494: IFTRUE 73508
73496: PUSH
73497: LD_VAR 0 1
73501: PPUSH
73502: CALL_OW 310
73506: NOT
73507: OR
73508: IFFALSE 73512
// exit ;
73510: GO 73602
// vehicle := IsInUnit ( driver ) ;
73512: LD_ADDR_VAR 0 3
73516: PUSH
73517: LD_VAR 0 1
73521: PPUSH
73522: CALL_OW 310
73526: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73527: LD_VAR 0 1
73531: PPUSH
73532: LD_STRING \
73534: PUSH
73535: LD_INT 0
73537: PUSH
73538: LD_INT 0
73540: PUSH
73541: LD_INT 0
73543: PUSH
73544: LD_INT 0
73546: PUSH
73547: LD_INT 0
73549: PUSH
73550: LD_INT 0
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: PUSH
73562: LD_STRING E
73564: PUSH
73565: LD_INT 0
73567: PUSH
73568: LD_INT 0
73570: PUSH
73571: LD_VAR 0 3
73575: PUSH
73576: LD_INT 0
73578: PUSH
73579: LD_INT 0
73581: PUSH
73582: LD_INT 0
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PPUSH
73598: CALL_OW 447
// end ;
73602: LD_VAR 0 2
73606: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73607: LD_INT 0
73609: PPUSH
73610: PPUSH
73611: PPUSH
// tmp := [ ] ;
73612: LD_ADDR_VAR 0 5
73616: PUSH
73617: EMPTY
73618: ST_TO_ADDR
// for i in units do
73619: LD_ADDR_VAR 0 4
73623: PUSH
73624: LD_VAR 0 1
73628: PUSH
73629: FOR_IN
73630: IFFALSE 73668
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73632: LD_ADDR_VAR 0 5
73636: PUSH
73637: LD_VAR 0 5
73641: PPUSH
73642: LD_VAR 0 5
73646: PUSH
73647: LD_INT 1
73649: PLUS
73650: PPUSH
73651: LD_VAR 0 4
73655: PPUSH
73656: CALL_OW 256
73660: PPUSH
73661: CALL_OW 2
73665: ST_TO_ADDR
73666: GO 73629
73668: POP
73669: POP
// if not tmp then
73670: LD_VAR 0 5
73674: NOT
73675: IFFALSE 73679
// exit ;
73677: GO 73727
// if asc then
73679: LD_VAR 0 2
73683: IFFALSE 73707
// result := SortListByListAsc ( units , tmp ) else
73685: LD_ADDR_VAR 0 3
73689: PUSH
73690: LD_VAR 0 1
73694: PPUSH
73695: LD_VAR 0 5
73699: PPUSH
73700: CALL_OW 76
73704: ST_TO_ADDR
73705: GO 73727
// result := SortListByListDesc ( units , tmp ) ;
73707: LD_ADDR_VAR 0 3
73711: PUSH
73712: LD_VAR 0 1
73716: PPUSH
73717: LD_VAR 0 5
73721: PPUSH
73722: CALL_OW 77
73726: ST_TO_ADDR
// end ;
73727: LD_VAR 0 3
73731: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73732: LD_INT 0
73734: PPUSH
73735: PPUSH
// task := GetTaskList ( mech ) ;
73736: LD_ADDR_VAR 0 4
73740: PUSH
73741: LD_VAR 0 1
73745: PPUSH
73746: CALL_OW 437
73750: ST_TO_ADDR
// if not task then
73751: LD_VAR 0 4
73755: NOT
73756: IFFALSE 73760
// exit ;
73758: GO 73804
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73760: LD_ADDR_VAR 0 3
73764: PUSH
73765: LD_VAR 0 4
73769: PUSH
73770: LD_INT 1
73772: ARRAY
73773: PUSH
73774: LD_INT 1
73776: ARRAY
73777: PUSH
73778: LD_STRING r
73780: EQUAL
73781: IFFALSE 73803
73783: PUSH
73784: LD_VAR 0 4
73788: PUSH
73789: LD_INT 1
73791: ARRAY
73792: PUSH
73793: LD_INT 4
73795: ARRAY
73796: PUSH
73797: LD_VAR 0 2
73801: EQUAL
73802: AND
73803: ST_TO_ADDR
// end ;
73804: LD_VAR 0 3
73808: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73809: LD_INT 0
73811: PPUSH
// SetDir ( unit , d ) ;
73812: LD_VAR 0 1
73816: PPUSH
73817: LD_VAR 0 4
73821: PPUSH
73822: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73826: LD_ADDR_VAR 0 6
73830: PUSH
73831: LD_VAR 0 1
73835: PPUSH
73836: LD_VAR 0 2
73840: PPUSH
73841: LD_VAR 0 3
73845: PPUSH
73846: LD_VAR 0 5
73850: PPUSH
73851: CALL_OW 48
73855: ST_TO_ADDR
// end ;
73856: LD_VAR 0 6
73860: RET
// export function ToNaturalNumber ( number ) ; begin
73861: LD_INT 0
73863: PPUSH
// result := number div 1 ;
73864: LD_ADDR_VAR 0 2
73868: PUSH
73869: LD_VAR 0 1
73873: PUSH
73874: LD_INT 1
73876: DIV
73877: ST_TO_ADDR
// if number < 0 then
73878: LD_VAR 0 1
73882: PUSH
73883: LD_INT 0
73885: LESS
73886: IFFALSE 73896
// result := 0 ;
73888: LD_ADDR_VAR 0 2
73892: PUSH
73893: LD_INT 0
73895: ST_TO_ADDR
// end ;
73896: LD_VAR 0 2
73900: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73901: LD_INT 0
73903: PPUSH
73904: PPUSH
73905: PPUSH
// if not buildings then
73906: LD_VAR 0 1
73910: NOT
73911: IFFALSE 73915
// exit ;
73913: GO 74030
// tmp := [ ] ;
73915: LD_ADDR_VAR 0 5
73919: PUSH
73920: EMPTY
73921: ST_TO_ADDR
// for b in buildings do
73922: LD_ADDR_VAR 0 4
73926: PUSH
73927: LD_VAR 0 1
73931: PUSH
73932: FOR_IN
73933: IFFALSE 73971
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73935: LD_ADDR_VAR 0 5
73939: PUSH
73940: LD_VAR 0 5
73944: PPUSH
73945: LD_VAR 0 5
73949: PUSH
73950: LD_INT 1
73952: PLUS
73953: PPUSH
73954: LD_VAR 0 4
73958: PPUSH
73959: CALL_OW 266
73963: PPUSH
73964: CALL_OW 1
73968: ST_TO_ADDR
73969: GO 73932
73971: POP
73972: POP
// if not tmp then
73973: LD_VAR 0 5
73977: NOT
73978: IFFALSE 73982
// exit ;
73980: GO 74030
// if asc then
73982: LD_VAR 0 2
73986: IFFALSE 74010
// result := SortListByListAsc ( buildings , tmp ) else
73988: LD_ADDR_VAR 0 3
73992: PUSH
73993: LD_VAR 0 1
73997: PPUSH
73998: LD_VAR 0 5
74002: PPUSH
74003: CALL_OW 76
74007: ST_TO_ADDR
74008: GO 74030
// result := SortListByListDesc ( buildings , tmp ) ;
74010: LD_ADDR_VAR 0 3
74014: PUSH
74015: LD_VAR 0 1
74019: PPUSH
74020: LD_VAR 0 5
74024: PPUSH
74025: CALL_OW 77
74029: ST_TO_ADDR
// end ;
74030: LD_VAR 0 3
74034: RET
// export function SortByClass ( units , class ) ; var un ; begin
74035: LD_INT 0
74037: PPUSH
74038: PPUSH
// if not units or not class then
74039: LD_VAR 0 1
74043: NOT
74044: IFTRUE 74053
74046: PUSH
74047: LD_VAR 0 2
74051: NOT
74052: OR
74053: IFFALSE 74057
// exit ;
74055: GO 74152
// result := [ ] ;
74057: LD_ADDR_VAR 0 3
74061: PUSH
74062: EMPTY
74063: ST_TO_ADDR
// for un in units do
74064: LD_ADDR_VAR 0 4
74068: PUSH
74069: LD_VAR 0 1
74073: PUSH
74074: FOR_IN
74075: IFFALSE 74150
// if GetClass ( un ) = class then
74077: LD_VAR 0 4
74081: PPUSH
74082: CALL_OW 257
74086: PUSH
74087: LD_VAR 0 2
74091: EQUAL
74092: IFFALSE 74119
// result := Insert ( result , 1 , un ) else
74094: LD_ADDR_VAR 0 3
74098: PUSH
74099: LD_VAR 0 3
74103: PPUSH
74104: LD_INT 1
74106: PPUSH
74107: LD_VAR 0 4
74111: PPUSH
74112: CALL_OW 2
74116: ST_TO_ADDR
74117: GO 74148
// result := Replace ( result , result + 1 , un ) ;
74119: LD_ADDR_VAR 0 3
74123: PUSH
74124: LD_VAR 0 3
74128: PPUSH
74129: LD_VAR 0 3
74133: PUSH
74134: LD_INT 1
74136: PLUS
74137: PPUSH
74138: LD_VAR 0 4
74142: PPUSH
74143: CALL_OW 1
74147: ST_TO_ADDR
74148: GO 74074
74150: POP
74151: POP
// end ;
74152: LD_VAR 0 3
74156: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74157: LD_INT 0
74159: PPUSH
74160: PPUSH
74161: PPUSH
74162: PPUSH
74163: PPUSH
74164: PPUSH
74165: PPUSH
// result := [ ] ;
74166: LD_ADDR_VAR 0 4
74170: PUSH
74171: EMPTY
74172: ST_TO_ADDR
// if x - r < 0 then
74173: LD_VAR 0 1
74177: PUSH
74178: LD_VAR 0 3
74182: MINUS
74183: PUSH
74184: LD_INT 0
74186: LESS
74187: IFFALSE 74199
// min_x := 0 else
74189: LD_ADDR_VAR 0 8
74193: PUSH
74194: LD_INT 0
74196: ST_TO_ADDR
74197: GO 74215
// min_x := x - r ;
74199: LD_ADDR_VAR 0 8
74203: PUSH
74204: LD_VAR 0 1
74208: PUSH
74209: LD_VAR 0 3
74213: MINUS
74214: ST_TO_ADDR
// if y - r < 0 then
74215: LD_VAR 0 2
74219: PUSH
74220: LD_VAR 0 3
74224: MINUS
74225: PUSH
74226: LD_INT 0
74228: LESS
74229: IFFALSE 74241
// min_y := 0 else
74231: LD_ADDR_VAR 0 7
74235: PUSH
74236: LD_INT 0
74238: ST_TO_ADDR
74239: GO 74257
// min_y := y - r ;
74241: LD_ADDR_VAR 0 7
74245: PUSH
74246: LD_VAR 0 2
74250: PUSH
74251: LD_VAR 0 3
74255: MINUS
74256: ST_TO_ADDR
// max_x := x + r ;
74257: LD_ADDR_VAR 0 9
74261: PUSH
74262: LD_VAR 0 1
74266: PUSH
74267: LD_VAR 0 3
74271: PLUS
74272: ST_TO_ADDR
// max_y := y + r ;
74273: LD_ADDR_VAR 0 10
74277: PUSH
74278: LD_VAR 0 2
74282: PUSH
74283: LD_VAR 0 3
74287: PLUS
74288: ST_TO_ADDR
// for _x = min_x to max_x do
74289: LD_ADDR_VAR 0 5
74293: PUSH
74294: DOUBLE
74295: LD_VAR 0 8
74299: DEC
74300: ST_TO_ADDR
74301: LD_VAR 0 9
74305: PUSH
74306: FOR_TO
74307: IFFALSE 74408
// for _y = min_y to max_y do
74309: LD_ADDR_VAR 0 6
74313: PUSH
74314: DOUBLE
74315: LD_VAR 0 7
74319: DEC
74320: ST_TO_ADDR
74321: LD_VAR 0 10
74325: PUSH
74326: FOR_TO
74327: IFFALSE 74404
// begin if not ValidHex ( _x , _y ) then
74329: LD_VAR 0 5
74333: PPUSH
74334: LD_VAR 0 6
74338: PPUSH
74339: CALL_OW 488
74343: NOT
74344: IFFALSE 74348
// continue ;
74346: GO 74326
// if GetResourceTypeXY ( _x , _y ) then
74348: LD_VAR 0 5
74352: PPUSH
74353: LD_VAR 0 6
74357: PPUSH
74358: CALL_OW 283
74362: IFFALSE 74402
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74364: LD_ADDR_VAR 0 4
74368: PUSH
74369: LD_VAR 0 4
74373: PPUSH
74374: LD_VAR 0 4
74378: PUSH
74379: LD_INT 1
74381: PLUS
74382: PPUSH
74383: LD_VAR 0 5
74387: PUSH
74388: LD_VAR 0 6
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PPUSH
74397: CALL_OW 1
74401: ST_TO_ADDR
// end ;
74402: GO 74326
74404: POP
74405: POP
74406: GO 74306
74408: POP
74409: POP
// end ;
74410: LD_VAR 0 4
74414: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74415: LD_INT 0
74417: PPUSH
74418: PPUSH
74419: PPUSH
74420: PPUSH
74421: PPUSH
74422: PPUSH
74423: PPUSH
74424: PPUSH
// if not units then
74425: LD_VAR 0 1
74429: NOT
74430: IFFALSE 74434
// exit ;
74432: GO 74966
// result := UnitFilter ( units , [ f_ok ] ) ;
74434: LD_ADDR_VAR 0 3
74438: PUSH
74439: LD_VAR 0 1
74443: PPUSH
74444: LD_INT 50
74446: PUSH
74447: EMPTY
74448: LIST
74449: PPUSH
74450: CALL_OW 72
74454: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74455: LD_ADDR_VAR 0 8
74459: PUSH
74460: LD_VAR 0 1
74464: PUSH
74465: LD_INT 1
74467: ARRAY
74468: PPUSH
74469: CALL_OW 255
74473: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74474: LD_ADDR_VAR 0 10
74478: PUSH
74479: LD_INT 29
74481: PUSH
74482: LD_INT 91
74484: PUSH
74485: LD_INT 49
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: LIST
74492: ST_TO_ADDR
// if not result then
74493: LD_VAR 0 3
74497: NOT
74498: IFFALSE 74502
// exit ;
74500: GO 74966
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74502: LD_ADDR_VAR 0 5
74506: PUSH
74507: LD_INT 81
74509: PUSH
74510: LD_VAR 0 8
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: PPUSH
74519: CALL_OW 69
74523: ST_TO_ADDR
// for i in result do
74524: LD_ADDR_VAR 0 4
74528: PUSH
74529: LD_VAR 0 3
74533: PUSH
74534: FOR_IN
74535: IFFALSE 74964
// begin tag := GetTag ( i ) + 1 ;
74537: LD_ADDR_VAR 0 9
74541: PUSH
74542: LD_VAR 0 4
74546: PPUSH
74547: CALL_OW 110
74551: PUSH
74552: LD_INT 1
74554: PLUS
74555: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74556: LD_ADDR_VAR 0 7
74560: PUSH
74561: LD_VAR 0 4
74565: PPUSH
74566: CALL_OW 250
74570: PPUSH
74571: LD_VAR 0 4
74575: PPUSH
74576: CALL_OW 251
74580: PPUSH
74581: LD_INT 4
74583: PPUSH
74584: CALL 74157 0 3
74588: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74589: LD_VAR 0 4
74593: PPUSH
74594: CALL_OW 247
74598: PUSH
74599: LD_INT 2
74601: EQUAL
74602: IFFALSE 74614
74604: PUSH
74605: LD_VAR 0 7
74609: PUSH
74610: LD_INT 2
74612: GREATER
74613: AND
74614: IFFALSE 74634
74616: PUSH
74617: LD_VAR 0 4
74621: PPUSH
74622: CALL_OW 264
74626: PUSH
74627: LD_VAR 0 10
74631: IN
74632: NOT
74633: AND
74634: IFFALSE 74673
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74636: LD_VAR 0 4
74640: PPUSH
74641: LD_VAR 0 7
74645: PUSH
74646: LD_INT 1
74648: ARRAY
74649: PUSH
74650: LD_INT 1
74652: ARRAY
74653: PPUSH
74654: LD_VAR 0 7
74658: PUSH
74659: LD_INT 1
74661: ARRAY
74662: PUSH
74663: LD_INT 2
74665: ARRAY
74666: PPUSH
74667: CALL_OW 116
74671: GO 74962
// if path > tag then
74673: LD_VAR 0 2
74677: PUSH
74678: LD_VAR 0 9
74682: GREATER
74683: IFFALSE 74891
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74685: LD_ADDR_VAR 0 6
74689: PUSH
74690: LD_VAR 0 5
74694: PPUSH
74695: LD_INT 91
74697: PUSH
74698: LD_VAR 0 4
74702: PUSH
74703: LD_INT 8
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: LIST
74710: PPUSH
74711: CALL_OW 72
74715: ST_TO_ADDR
// if nearEnemy then
74716: LD_VAR 0 6
74720: IFFALSE 74789
// begin if GetWeapon ( i ) = ru_time_lapser then
74722: LD_VAR 0 4
74726: PPUSH
74727: CALL_OW 264
74731: PUSH
74732: LD_INT 49
74734: EQUAL
74735: IFFALSE 74763
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74737: LD_VAR 0 4
74741: PPUSH
74742: LD_VAR 0 6
74746: PPUSH
74747: LD_VAR 0 4
74751: PPUSH
74752: CALL_OW 74
74756: PPUSH
74757: CALL_OW 112
74761: GO 74787
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74763: LD_VAR 0 4
74767: PPUSH
74768: LD_VAR 0 6
74772: PPUSH
74773: LD_VAR 0 4
74777: PPUSH
74778: CALL_OW 74
74782: PPUSH
74783: CALL 76047 0 2
// end else
74787: GO 74889
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74789: LD_VAR 0 4
74793: PPUSH
74794: LD_VAR 0 2
74798: PUSH
74799: LD_VAR 0 9
74803: ARRAY
74804: PUSH
74805: LD_INT 1
74807: ARRAY
74808: PPUSH
74809: LD_VAR 0 2
74813: PUSH
74814: LD_VAR 0 9
74818: ARRAY
74819: PUSH
74820: LD_INT 2
74822: ARRAY
74823: PPUSH
74824: CALL_OW 297
74828: PUSH
74829: LD_INT 6
74831: GREATER
74832: IFFALSE 74875
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74834: LD_VAR 0 4
74838: PPUSH
74839: LD_VAR 0 2
74843: PUSH
74844: LD_VAR 0 9
74848: ARRAY
74849: PUSH
74850: LD_INT 1
74852: ARRAY
74853: PPUSH
74854: LD_VAR 0 2
74858: PUSH
74859: LD_VAR 0 9
74863: ARRAY
74864: PUSH
74865: LD_INT 2
74867: ARRAY
74868: PPUSH
74869: CALL_OW 114
74873: GO 74889
// SetTag ( i , tag ) ;
74875: LD_VAR 0 4
74879: PPUSH
74880: LD_VAR 0 9
74884: PPUSH
74885: CALL_OW 109
// end else
74889: GO 74962
// if enemy then
74891: LD_VAR 0 5
74895: IFFALSE 74962
// begin if GetWeapon ( i ) = ru_time_lapser then
74897: LD_VAR 0 4
74901: PPUSH
74902: CALL_OW 264
74906: PUSH
74907: LD_INT 49
74909: EQUAL
74910: IFFALSE 74938
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74912: LD_VAR 0 4
74916: PPUSH
74917: LD_VAR 0 5
74921: PPUSH
74922: LD_VAR 0 4
74926: PPUSH
74927: CALL_OW 74
74931: PPUSH
74932: CALL_OW 112
74936: GO 74962
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74938: LD_VAR 0 4
74942: PPUSH
74943: LD_VAR 0 5
74947: PPUSH
74948: LD_VAR 0 4
74952: PPUSH
74953: CALL_OW 74
74957: PPUSH
74958: CALL 76047 0 2
// end ; end ;
74962: GO 74534
74964: POP
74965: POP
// end ;
74966: LD_VAR 0 3
74970: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74971: LD_INT 0
74973: PPUSH
74974: PPUSH
74975: PPUSH
// if not unit or IsInUnit ( unit ) then
74976: LD_VAR 0 1
74980: NOT
74981: IFTRUE 74994
74983: PUSH
74984: LD_VAR 0 1
74988: PPUSH
74989: CALL_OW 310
74993: OR
74994: IFFALSE 74998
// exit ;
74996: GO 75089
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74998: LD_ADDR_VAR 0 4
75002: PUSH
75003: LD_VAR 0 1
75007: PPUSH
75008: CALL_OW 250
75012: PPUSH
75013: LD_VAR 0 2
75017: PPUSH
75018: LD_INT 1
75020: PPUSH
75021: CALL_OW 272
75025: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75026: LD_ADDR_VAR 0 5
75030: PUSH
75031: LD_VAR 0 1
75035: PPUSH
75036: CALL_OW 251
75040: PPUSH
75041: LD_VAR 0 2
75045: PPUSH
75046: LD_INT 1
75048: PPUSH
75049: CALL_OW 273
75053: ST_TO_ADDR
// if ValidHex ( x , y ) then
75054: LD_VAR 0 4
75058: PPUSH
75059: LD_VAR 0 5
75063: PPUSH
75064: CALL_OW 488
75068: IFFALSE 75089
// ComTurnXY ( unit , x , y ) ;
75070: LD_VAR 0 1
75074: PPUSH
75075: LD_VAR 0 4
75079: PPUSH
75080: LD_VAR 0 5
75084: PPUSH
75085: CALL_OW 118
// end ;
75089: LD_VAR 0 3
75093: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75094: LD_INT 0
75096: PPUSH
75097: PPUSH
// result := false ;
75098: LD_ADDR_VAR 0 3
75102: PUSH
75103: LD_INT 0
75105: ST_TO_ADDR
// if not units then
75106: LD_VAR 0 2
75110: NOT
75111: IFFALSE 75115
// exit ;
75113: GO 75160
// for i in units do
75115: LD_ADDR_VAR 0 4
75119: PUSH
75120: LD_VAR 0 2
75124: PUSH
75125: FOR_IN
75126: IFFALSE 75158
// if See ( side , i ) then
75128: LD_VAR 0 1
75132: PPUSH
75133: LD_VAR 0 4
75137: PPUSH
75138: CALL_OW 292
75142: IFFALSE 75156
// begin result := true ;
75144: LD_ADDR_VAR 0 3
75148: PUSH
75149: LD_INT 1
75151: ST_TO_ADDR
// exit ;
75152: POP
75153: POP
75154: GO 75160
// end ;
75156: GO 75125
75158: POP
75159: POP
// end ;
75160: LD_VAR 0 3
75164: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75165: LD_INT 0
75167: PPUSH
75168: PPUSH
75169: PPUSH
75170: PPUSH
// if not unit or not points then
75171: LD_VAR 0 1
75175: NOT
75176: IFTRUE 75185
75178: PUSH
75179: LD_VAR 0 2
75183: NOT
75184: OR
75185: IFFALSE 75189
// exit ;
75187: GO 75279
// dist := 99999 ;
75189: LD_ADDR_VAR 0 5
75193: PUSH
75194: LD_INT 99999
75196: ST_TO_ADDR
// for i in points do
75197: LD_ADDR_VAR 0 4
75201: PUSH
75202: LD_VAR 0 2
75206: PUSH
75207: FOR_IN
75208: IFFALSE 75277
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75210: LD_ADDR_VAR 0 6
75214: PUSH
75215: LD_VAR 0 1
75219: PPUSH
75220: LD_VAR 0 4
75224: PUSH
75225: LD_INT 1
75227: ARRAY
75228: PPUSH
75229: LD_VAR 0 4
75233: PUSH
75234: LD_INT 2
75236: ARRAY
75237: PPUSH
75238: CALL_OW 297
75242: ST_TO_ADDR
// if tmpDist < dist then
75243: LD_VAR 0 6
75247: PUSH
75248: LD_VAR 0 5
75252: LESS
75253: IFFALSE 75275
// begin result := i ;
75255: LD_ADDR_VAR 0 3
75259: PUSH
75260: LD_VAR 0 4
75264: ST_TO_ADDR
// dist := tmpDist ;
75265: LD_ADDR_VAR 0 5
75269: PUSH
75270: LD_VAR 0 6
75274: ST_TO_ADDR
// end ; end ;
75275: GO 75207
75277: POP
75278: POP
// end ;
75279: LD_VAR 0 3
75283: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75284: LD_INT 0
75286: PPUSH
// uc_side := side ;
75287: LD_ADDR_OWVAR 20
75291: PUSH
75292: LD_VAR 0 1
75296: ST_TO_ADDR
// uc_nation := 3 ;
75297: LD_ADDR_OWVAR 21
75301: PUSH
75302: LD_INT 3
75304: ST_TO_ADDR
// vc_chassis := 25 ;
75305: LD_ADDR_OWVAR 37
75309: PUSH
75310: LD_INT 25
75312: ST_TO_ADDR
// vc_engine := engine_siberite ;
75313: LD_ADDR_OWVAR 39
75317: PUSH
75318: LD_INT 3
75320: ST_TO_ADDR
// vc_control := control_computer ;
75321: LD_ADDR_OWVAR 38
75325: PUSH
75326: LD_INT 3
75328: ST_TO_ADDR
// vc_weapon := 59 ;
75329: LD_ADDR_OWVAR 40
75333: PUSH
75334: LD_INT 59
75336: ST_TO_ADDR
// result := CreateVehicle ;
75337: LD_ADDR_VAR 0 5
75341: PUSH
75342: CALL_OW 45
75346: ST_TO_ADDR
// SetDir ( result , d ) ;
75347: LD_VAR 0 5
75351: PPUSH
75352: LD_VAR 0 4
75356: PPUSH
75357: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75361: LD_VAR 0 5
75365: PPUSH
75366: LD_VAR 0 2
75370: PPUSH
75371: LD_VAR 0 3
75375: PPUSH
75376: LD_INT 0
75378: PPUSH
75379: CALL_OW 48
// end ;
75383: LD_VAR 0 5
75387: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75388: LD_INT 0
75390: PPUSH
75391: PPUSH
75392: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75393: LD_ADDR_VAR 0 2
75397: PUSH
75398: LD_INT 0
75400: PUSH
75401: LD_INT 0
75403: PUSH
75404: LD_INT 0
75406: PUSH
75407: LD_INT 0
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75416: LD_VAR 0 1
75420: NOT
75421: IFTRUE 75454
75423: PUSH
75424: LD_VAR 0 1
75428: PPUSH
75429: CALL_OW 264
75433: PUSH
75434: LD_INT 12
75436: PUSH
75437: LD_INT 51
75439: PUSH
75440: LD_INT 32
75442: PUSH
75443: LD_INT 89
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: IN
75452: NOT
75453: OR
75454: IFFALSE 75458
// exit ;
75456: GO 75556
// for i := 1 to 3 do
75458: LD_ADDR_VAR 0 3
75462: PUSH
75463: DOUBLE
75464: LD_INT 1
75466: DEC
75467: ST_TO_ADDR
75468: LD_INT 3
75470: PUSH
75471: FOR_TO
75472: IFFALSE 75554
// begin tmp := GetCargo ( cargo , i ) ;
75474: LD_ADDR_VAR 0 4
75478: PUSH
75479: LD_VAR 0 1
75483: PPUSH
75484: LD_VAR 0 3
75488: PPUSH
75489: CALL_OW 289
75493: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75494: LD_ADDR_VAR 0 2
75498: PUSH
75499: LD_VAR 0 2
75503: PPUSH
75504: LD_VAR 0 3
75508: PPUSH
75509: LD_VAR 0 4
75513: PPUSH
75514: CALL_OW 1
75518: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75519: LD_ADDR_VAR 0 2
75523: PUSH
75524: LD_VAR 0 2
75528: PPUSH
75529: LD_INT 4
75531: PPUSH
75532: LD_VAR 0 2
75536: PUSH
75537: LD_INT 4
75539: ARRAY
75540: PUSH
75541: LD_VAR 0 4
75545: PLUS
75546: PPUSH
75547: CALL_OW 1
75551: ST_TO_ADDR
// end ;
75552: GO 75471
75554: POP
75555: POP
// end ;
75556: LD_VAR 0 2
75560: RET
// export function Length ( array ) ; begin
75561: LD_INT 0
75563: PPUSH
// result := array + 0 ;
75564: LD_ADDR_VAR 0 2
75568: PUSH
75569: LD_VAR 0 1
75573: PUSH
75574: LD_INT 0
75576: PLUS
75577: ST_TO_ADDR
// end ;
75578: LD_VAR 0 2
75582: RET
// export function PrepareArray ( array ) ; begin
75583: LD_INT 0
75585: PPUSH
// result := array diff 0 ;
75586: LD_ADDR_VAR 0 2
75590: PUSH
75591: LD_VAR 0 1
75595: PUSH
75596: LD_INT 0
75598: DIFF
75599: ST_TO_ADDR
// if not result [ 1 ] then
75600: LD_VAR 0 2
75604: PUSH
75605: LD_INT 1
75607: ARRAY
75608: NOT
75609: IFFALSE 75629
// result := Delete ( result , 1 ) ;
75611: LD_ADDR_VAR 0 2
75615: PUSH
75616: LD_VAR 0 2
75620: PPUSH
75621: LD_INT 1
75623: PPUSH
75624: CALL_OW 3
75628: ST_TO_ADDR
// end ;
75629: LD_VAR 0 2
75633: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75634: LD_INT 0
75636: PPUSH
75637: PPUSH
75638: PPUSH
75639: PPUSH
// sibRocketRange := 25 ;
75640: LD_ADDR_VAR 0 6
75644: PUSH
75645: LD_INT 25
75647: ST_TO_ADDR
// result := false ;
75648: LD_ADDR_VAR 0 4
75652: PUSH
75653: LD_INT 0
75655: ST_TO_ADDR
// for i := 0 to 5 do
75656: LD_ADDR_VAR 0 5
75660: PUSH
75661: DOUBLE
75662: LD_INT 0
75664: DEC
75665: ST_TO_ADDR
75666: LD_INT 5
75668: PUSH
75669: FOR_TO
75670: IFFALSE 75737
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75672: LD_VAR 0 1
75676: PPUSH
75677: LD_VAR 0 5
75681: PPUSH
75682: LD_VAR 0 6
75686: PPUSH
75687: CALL_OW 272
75691: PPUSH
75692: LD_VAR 0 2
75696: PPUSH
75697: LD_VAR 0 5
75701: PPUSH
75702: LD_VAR 0 6
75706: PPUSH
75707: CALL_OW 273
75711: PPUSH
75712: LD_VAR 0 3
75716: PPUSH
75717: CALL_OW 309
75721: IFFALSE 75735
// begin result := true ;
75723: LD_ADDR_VAR 0 4
75727: PUSH
75728: LD_INT 1
75730: ST_TO_ADDR
// exit ;
75731: POP
75732: POP
75733: GO 75739
// end ;
75735: GO 75669
75737: POP
75738: POP
// end ;
75739: LD_VAR 0 4
75743: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75744: LD_INT 0
75746: PPUSH
75747: PPUSH
75748: PPUSH
// if btype = b_depot then
75749: LD_VAR 0 2
75753: PUSH
75754: LD_INT 0
75756: EQUAL
75757: IFFALSE 75769
// begin result := true ;
75759: LD_ADDR_VAR 0 3
75763: PUSH
75764: LD_INT 1
75766: ST_TO_ADDR
// exit ;
75767: GO 75889
// end ; pom := GetBase ( depot ) ;
75769: LD_ADDR_VAR 0 4
75773: PUSH
75774: LD_VAR 0 1
75778: PPUSH
75779: CALL_OW 274
75783: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75784: LD_ADDR_VAR 0 5
75788: PUSH
75789: LD_VAR 0 2
75793: PPUSH
75794: LD_VAR 0 1
75798: PPUSH
75799: CALL_OW 248
75803: PPUSH
75804: CALL_OW 450
75808: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75809: LD_ADDR_VAR 0 3
75813: PUSH
75814: LD_VAR 0 4
75818: PPUSH
75819: LD_INT 1
75821: PPUSH
75822: CALL_OW 275
75826: PUSH
75827: LD_VAR 0 5
75831: PUSH
75832: LD_INT 1
75834: ARRAY
75835: GREATEREQUAL
75836: IFFALSE 75862
75838: PUSH
75839: LD_VAR 0 4
75843: PPUSH
75844: LD_INT 2
75846: PPUSH
75847: CALL_OW 275
75851: PUSH
75852: LD_VAR 0 5
75856: PUSH
75857: LD_INT 2
75859: ARRAY
75860: GREATEREQUAL
75861: AND
75862: IFFALSE 75888
75864: PUSH
75865: LD_VAR 0 4
75869: PPUSH
75870: LD_INT 3
75872: PPUSH
75873: CALL_OW 275
75877: PUSH
75878: LD_VAR 0 5
75882: PUSH
75883: LD_INT 3
75885: ARRAY
75886: GREATEREQUAL
75887: AND
75888: ST_TO_ADDR
// end ;
75889: LD_VAR 0 3
75893: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75894: LD_INT 0
75896: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75897: LD_VAR 0 1
75901: PPUSH
75902: LD_VAR 0 2
75906: PPUSH
75907: LD_INT 0
75909: PPUSH
75910: LD_INT 0
75912: PPUSH
75913: LD_INT 1
75915: PPUSH
75916: LD_INT 0
75918: PPUSH
75919: CALL_OW 587
// end ;
75923: LD_VAR 0 3
75927: RET
// export function CenterOnNow ( unit ) ; begin
75928: LD_INT 0
75930: PPUSH
// result := IsInUnit ( unit ) ;
75931: LD_ADDR_VAR 0 2
75935: PUSH
75936: LD_VAR 0 1
75940: PPUSH
75941: CALL_OW 310
75945: ST_TO_ADDR
// if not result then
75946: LD_VAR 0 2
75950: NOT
75951: IFFALSE 75963
// result := unit ;
75953: LD_ADDR_VAR 0 2
75957: PUSH
75958: LD_VAR 0 1
75962: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75963: LD_VAR 0 1
75967: PPUSH
75968: CALL_OW 87
// end ;
75972: LD_VAR 0 2
75976: RET
// export function ComMoveHex ( unit , hex ) ; begin
75977: LD_INT 0
75979: PPUSH
// if not hex then
75980: LD_VAR 0 2
75984: NOT
75985: IFFALSE 75989
// exit ;
75987: GO 76042
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75989: LD_VAR 0 2
75993: PUSH
75994: LD_INT 1
75996: ARRAY
75997: PPUSH
75998: LD_VAR 0 2
76002: PUSH
76003: LD_INT 2
76005: ARRAY
76006: PPUSH
76007: CALL_OW 428
76011: IFFALSE 76015
// exit ;
76013: GO 76042
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76015: LD_VAR 0 1
76019: PPUSH
76020: LD_VAR 0 2
76024: PUSH
76025: LD_INT 1
76027: ARRAY
76028: PPUSH
76029: LD_VAR 0 2
76033: PUSH
76034: LD_INT 2
76036: ARRAY
76037: PPUSH
76038: CALL_OW 111
// end ;
76042: LD_VAR 0 3
76046: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76047: LD_INT 0
76049: PPUSH
76050: PPUSH
76051: PPUSH
// if not unit or not enemy then
76052: LD_VAR 0 1
76056: NOT
76057: IFTRUE 76066
76059: PUSH
76060: LD_VAR 0 2
76064: NOT
76065: OR
76066: IFFALSE 76070
// exit ;
76068: GO 76196
// x := GetX ( enemy ) ;
76070: LD_ADDR_VAR 0 4
76074: PUSH
76075: LD_VAR 0 2
76079: PPUSH
76080: CALL_OW 250
76084: ST_TO_ADDR
// y := GetY ( enemy ) ;
76085: LD_ADDR_VAR 0 5
76089: PUSH
76090: LD_VAR 0 2
76094: PPUSH
76095: CALL_OW 251
76099: ST_TO_ADDR
// if ValidHex ( x , y ) then
76100: LD_VAR 0 4
76104: PPUSH
76105: LD_VAR 0 5
76109: PPUSH
76110: CALL_OW 488
76114: IFFALSE 76196
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76116: LD_VAR 0 2
76120: PPUSH
76121: CALL_OW 247
76125: PUSH
76126: LD_INT 3
76128: PUSH
76129: LD_INT 2
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: IN
76136: IFTRUE 76159
76138: PUSH
76139: LD_VAR 0 1
76143: PPUSH
76144: CALL_OW 255
76148: PPUSH
76149: LD_VAR 0 2
76153: PPUSH
76154: CALL_OW 292
76158: OR
76159: IFFALSE 76177
// ComAttackUnit ( unit , enemy ) else
76161: LD_VAR 0 1
76165: PPUSH
76166: LD_VAR 0 2
76170: PPUSH
76171: CALL_OW 115
76175: GO 76196
// ComAgressiveMove ( unit , x , y ) ;
76177: LD_VAR 0 1
76181: PPUSH
76182: LD_VAR 0 4
76186: PPUSH
76187: LD_VAR 0 5
76191: PPUSH
76192: CALL_OW 114
// end ;
76196: LD_VAR 0 3
76200: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76201: LD_INT 0
76203: PPUSH
76204: PPUSH
76205: PPUSH
// list := AreaToList ( area , 0 ) ;
76206: LD_ADDR_VAR 0 5
76210: PUSH
76211: LD_VAR 0 1
76215: PPUSH
76216: LD_INT 0
76218: PPUSH
76219: CALL_OW 517
76223: ST_TO_ADDR
// if not list then
76224: LD_VAR 0 5
76228: NOT
76229: IFFALSE 76233
// exit ;
76231: GO 76363
// if all then
76233: LD_VAR 0 2
76237: IFFALSE 76325
// begin for i := 1 to list [ 1 ] do
76239: LD_ADDR_VAR 0 4
76243: PUSH
76244: DOUBLE
76245: LD_INT 1
76247: DEC
76248: ST_TO_ADDR
76249: LD_VAR 0 5
76253: PUSH
76254: LD_INT 1
76256: ARRAY
76257: PUSH
76258: FOR_TO
76259: IFFALSE 76321
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76261: LD_ADDR_VAR 0 3
76265: PUSH
76266: LD_VAR 0 3
76270: PPUSH
76271: LD_VAR 0 3
76275: PUSH
76276: LD_INT 1
76278: PLUS
76279: PPUSH
76280: LD_VAR 0 5
76284: PUSH
76285: LD_INT 1
76287: ARRAY
76288: PUSH
76289: LD_VAR 0 4
76293: ARRAY
76294: PUSH
76295: LD_VAR 0 5
76299: PUSH
76300: LD_INT 2
76302: ARRAY
76303: PUSH
76304: LD_VAR 0 4
76308: ARRAY
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PPUSH
76314: CALL_OW 1
76318: ST_TO_ADDR
76319: GO 76258
76321: POP
76322: POP
// exit ;
76323: GO 76363
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76325: LD_ADDR_VAR 0 3
76329: PUSH
76330: LD_VAR 0 5
76334: PUSH
76335: LD_INT 1
76337: ARRAY
76338: PUSH
76339: LD_INT 1
76341: ARRAY
76342: PUSH
76343: LD_VAR 0 5
76347: PUSH
76348: LD_INT 2
76350: ARRAY
76351: PUSH
76352: LD_INT 1
76354: ARRAY
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PUSH
76360: EMPTY
76361: LIST
76362: ST_TO_ADDR
// end ;
76363: LD_VAR 0 3
76367: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76368: LD_INT 0
76370: PPUSH
76371: PPUSH
// list := AreaToList ( area , 0 ) ;
76372: LD_ADDR_VAR 0 4
76376: PUSH
76377: LD_VAR 0 1
76381: PPUSH
76382: LD_INT 0
76384: PPUSH
76385: CALL_OW 517
76389: ST_TO_ADDR
// if not list then
76390: LD_VAR 0 4
76394: NOT
76395: IFFALSE 76399
// exit ;
76397: GO 76440
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76399: LD_ADDR_VAR 0 3
76403: PUSH
76404: LD_VAR 0 4
76408: PUSH
76409: LD_INT 1
76411: ARRAY
76412: PUSH
76413: LD_INT 1
76415: ARRAY
76416: PUSH
76417: LD_VAR 0 4
76421: PUSH
76422: LD_INT 2
76424: ARRAY
76425: PUSH
76426: LD_INT 1
76428: ARRAY
76429: PUSH
76430: LD_VAR 0 2
76434: PUSH
76435: EMPTY
76436: LIST
76437: LIST
76438: LIST
76439: ST_TO_ADDR
// end ;
76440: LD_VAR 0 3
76444: RET
// export function First ( array ) ; begin
76445: LD_INT 0
76447: PPUSH
// if not array then
76448: LD_VAR 0 1
76452: NOT
76453: IFFALSE 76457
// exit ;
76455: GO 76471
// result := array [ 1 ] ;
76457: LD_ADDR_VAR 0 2
76461: PUSH
76462: LD_VAR 0 1
76466: PUSH
76467: LD_INT 1
76469: ARRAY
76470: ST_TO_ADDR
// end ;
76471: LD_VAR 0 2
76475: RET
// export function Last ( array ) ; begin
76476: LD_INT 0
76478: PPUSH
// if not array then
76479: LD_VAR 0 1
76483: NOT
76484: IFFALSE 76488
// exit ;
76486: GO 76504
// result := array [ array ] ;
76488: LD_ADDR_VAR 0 2
76492: PUSH
76493: LD_VAR 0 1
76497: PUSH
76498: LD_VAR 0 1
76502: ARRAY
76503: ST_TO_ADDR
// end ;
76504: LD_VAR 0 2
76508: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76509: LD_INT 0
76511: PPUSH
76512: PPUSH
// result := [ ] ;
76513: LD_ADDR_VAR 0 5
76517: PUSH
76518: EMPTY
76519: ST_TO_ADDR
// if not array then
76520: LD_VAR 0 1
76524: NOT
76525: IFFALSE 76529
// exit ;
76527: GO 76641
// for i := 1 to array do
76529: LD_ADDR_VAR 0 6
76533: PUSH
76534: DOUBLE
76535: LD_INT 1
76537: DEC
76538: ST_TO_ADDR
76539: LD_VAR 0 1
76543: PUSH
76544: FOR_TO
76545: IFFALSE 76639
// if array [ i ] [ index ] = value then
76547: LD_VAR 0 1
76551: PUSH
76552: LD_VAR 0 6
76556: ARRAY
76557: PUSH
76558: LD_VAR 0 2
76562: ARRAY
76563: PUSH
76564: LD_VAR 0 3
76568: EQUAL
76569: IFFALSE 76637
// begin if indexColumn then
76571: LD_VAR 0 4
76575: IFFALSE 76611
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76577: LD_ADDR_VAR 0 5
76581: PUSH
76582: LD_VAR 0 5
76586: PPUSH
76587: LD_VAR 0 1
76591: PUSH
76592: LD_VAR 0 6
76596: ARRAY
76597: PUSH
76598: LD_VAR 0 4
76602: ARRAY
76603: PPUSH
76604: CALL 71649 0 2
76608: ST_TO_ADDR
76609: GO 76637
// result := Join ( result , array [ i ] ) ;
76611: LD_ADDR_VAR 0 5
76615: PUSH
76616: LD_VAR 0 5
76620: PPUSH
76621: LD_VAR 0 1
76625: PUSH
76626: LD_VAR 0 6
76630: ARRAY
76631: PPUSH
76632: CALL 71649 0 2
76636: ST_TO_ADDR
// end ;
76637: GO 76544
76639: POP
76640: POP
// end ;
76641: LD_VAR 0 5
76645: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76646: LD_INT 0
76648: PPUSH
// if not vehicles or not parkingPoint then
76649: LD_VAR 0 1
76653: NOT
76654: IFTRUE 76663
76656: PUSH
76657: LD_VAR 0 2
76661: NOT
76662: OR
76663: IFFALSE 76667
// exit ;
76665: GO 76765
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76667: LD_ADDR_VAR 0 1
76671: PUSH
76672: LD_VAR 0 1
76676: PPUSH
76677: LD_INT 50
76679: PUSH
76680: EMPTY
76681: LIST
76682: PUSH
76683: LD_INT 3
76685: PUSH
76686: LD_INT 92
76688: PUSH
76689: LD_VAR 0 2
76693: PUSH
76694: LD_INT 1
76696: ARRAY
76697: PUSH
76698: LD_VAR 0 2
76702: PUSH
76703: LD_INT 2
76705: ARRAY
76706: PUSH
76707: LD_INT 8
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: LIST
76714: LIST
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: PPUSH
76724: CALL_OW 72
76728: ST_TO_ADDR
// if not vehicles then
76729: LD_VAR 0 1
76733: NOT
76734: IFFALSE 76738
// exit ;
76736: GO 76765
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76738: LD_VAR 0 1
76742: PPUSH
76743: LD_VAR 0 2
76747: PUSH
76748: LD_INT 1
76750: ARRAY
76751: PPUSH
76752: LD_VAR 0 2
76756: PUSH
76757: LD_INT 2
76759: ARRAY
76760: PPUSH
76761: CALL_OW 111
// end ;
76765: LD_VAR 0 3
76769: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76770: LD_INT 0
76772: PPUSH
76773: PPUSH
76774: PPUSH
// if not side or not area then
76775: LD_VAR 0 1
76779: NOT
76780: IFTRUE 76789
76782: PUSH
76783: LD_VAR 0 2
76787: NOT
76788: OR
76789: IFFALSE 76793
// exit ;
76791: GO 76912
// tmp := AreaToList ( area , 0 ) ;
76793: LD_ADDR_VAR 0 5
76797: PUSH
76798: LD_VAR 0 2
76802: PPUSH
76803: LD_INT 0
76805: PPUSH
76806: CALL_OW 517
76810: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76811: LD_ADDR_VAR 0 4
76815: PUSH
76816: DOUBLE
76817: LD_INT 1
76819: DEC
76820: ST_TO_ADDR
76821: LD_VAR 0 5
76825: PUSH
76826: LD_INT 1
76828: ARRAY
76829: PUSH
76830: FOR_TO
76831: IFFALSE 76910
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76833: LD_VAR 0 5
76837: PUSH
76838: LD_INT 1
76840: ARRAY
76841: PUSH
76842: LD_VAR 0 4
76846: ARRAY
76847: PPUSH
76848: LD_VAR 0 5
76852: PUSH
76853: LD_INT 2
76855: ARRAY
76856: PUSH
76857: LD_VAR 0 4
76861: ARRAY
76862: PPUSH
76863: CALL_OW 351
76867: IFFALSE 76908
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76869: LD_VAR 0 5
76873: PUSH
76874: LD_INT 1
76876: ARRAY
76877: PUSH
76878: LD_VAR 0 4
76882: ARRAY
76883: PPUSH
76884: LD_VAR 0 5
76888: PUSH
76889: LD_INT 2
76891: ARRAY
76892: PUSH
76893: LD_VAR 0 4
76897: ARRAY
76898: PPUSH
76899: LD_VAR 0 1
76903: PPUSH
76904: CALL_OW 244
// end ;
76908: GO 76830
76910: POP
76911: POP
// end ;
76912: LD_VAR 0 3
76916: RET
// export function UniqueArray ( array ) ; var i ; begin
76917: LD_INT 0
76919: PPUSH
76920: PPUSH
// result := [ ] ;
76921: LD_ADDR_VAR 0 2
76925: PUSH
76926: EMPTY
76927: ST_TO_ADDR
// if not array then
76928: LD_VAR 0 1
76932: NOT
76933: IFFALSE 76937
// exit ;
76935: GO 76998
// for i := 1 to array do
76937: LD_ADDR_VAR 0 3
76941: PUSH
76942: DOUBLE
76943: LD_INT 1
76945: DEC
76946: ST_TO_ADDR
76947: LD_VAR 0 1
76951: PUSH
76952: FOR_TO
76953: IFFALSE 76996
// if not array [ i ] in result then
76955: LD_VAR 0 1
76959: PUSH
76960: LD_VAR 0 3
76964: ARRAY
76965: PUSH
76966: LD_VAR 0 2
76970: IN
76971: NOT
76972: IFFALSE 76994
// result := Join ( result , i ) ;
76974: LD_ADDR_VAR 0 2
76978: PUSH
76979: LD_VAR 0 2
76983: PPUSH
76984: LD_VAR 0 3
76988: PPUSH
76989: CALL 71649 0 2
76993: ST_TO_ADDR
76994: GO 76952
76996: POP
76997: POP
// end ; end_of_file
76998: LD_VAR 0 2
77002: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77003: LD_VAR 0 1
77007: PPUSH
77008: LD_VAR 0 2
77012: PPUSH
77013: LD_VAR 0 3
77017: PPUSH
77018: LD_VAR 0 4
77022: PPUSH
77023: LD_VAR 0 5
77027: PPUSH
77028: LD_VAR 0 6
77032: PPUSH
77033: CALL 10905 0 6
// end ;
77037: PPOPN 6
77039: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77040: LD_INT 0
77042: PPUSH
// begin if not units then
77043: LD_VAR 0 1
77047: NOT
77048: IFFALSE 77052
// exit ;
77050: GO 77086
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77052: LD_VAR 0 1
77056: PPUSH
77057: LD_VAR 0 2
77061: PPUSH
77062: LD_VAR 0 3
77066: PPUSH
77067: LD_VAR 0 4
77071: PPUSH
77072: LD_VAR 0 5
77076: PPUSH
77077: LD_VAR 0 6
77081: PPUSH
77082: CALL 33422 0 6
// end ;
77086: PPOPN 7
77088: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77089: CALL 10785 0 0
// end ;
77093: PPOPN 1
77095: END
