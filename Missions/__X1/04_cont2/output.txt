// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 237 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 649 0 1
// PrepareRussian ;
  19: CALL 2266 0 0
// PrepareArabian ;
  23: CALL 1246 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6036 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape , activeInvincible ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// activeInvincible := true ;
 224: LD_ADDR_EXP 17
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export tEscape ; function InitTag ; begin
 237: LD_INT 0
 239: PPUSH
// tEscape := 10 ;
 240: LD_ADDR_EXP 18
 244: PUSH
 245: LD_INT 10
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 1
 252: RET
// every 0 0$1 trigger debug do var i ;
 253: LD_EXP 1
 257: IFFALSE 341
 259: GO 261
 261: DISABLE
 262: LD_INT 0
 264: PPUSH
// begin enable ;
 265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 266: LD_ADDR_VAR 0 1
 270: PUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: LD_INT 21
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 339
// if GetLives ( i ) < 1000 then
 310: LD_VAR 0 1
 314: PPUSH
 315: CALL_OW 256
 319: PUSH
 320: LD_INT 1000
 322: LESS
 323: IFFALSE 337
// SetLives ( i , 1000 ) ;
 325: LD_VAR 0 1
 329: PPUSH
 330: LD_INT 1000
 332: PPUSH
 333: CALL_OW 234
 337: GO 307
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function CreateNature ( forest ) ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 653: LD_VAR 0 1
 657: PPUSH
 658: LD_INT 3
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: PPUSH
 682: CALL 512 0 2
// for i := 1 to 2 do
 686: LD_ADDR_VAR 0 3
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 2
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := 21 ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 21
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 1
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 2 do
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 2
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := 18 ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 18
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// for i := 1 to 2 do
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: DOUBLE
 798: LD_INT 1
 800: DEC
 801: ST_TO_ADDR
 802: LD_INT 2
 804: PUSH
 805: FOR_TO
 806: IFFALSE 843
// begin hc_class := 13 ;
 808: LD_ADDR_OWVAR 28
 812: PUSH
 813: LD_INT 13
 815: ST_TO_ADDR
// hc_gallery :=  ;
 816: LD_ADDR_OWVAR 33
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 824: CALL_OW 44
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: LD_INT 0
 836: PPUSH
 837: CALL_OW 49
// end ;
 841: GO 805
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 2
 849: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
 854: PPUSH
// if not observer or not unit then
 855: LD_VAR 0 1
 859: NOT
 860: IFTRUE 869
 862: PUSH
 863: LD_VAR 0 2
 867: NOT
 868: OR
 869: IFFALSE 873
// exit ;
 871: GO 921
// if not See ( GetSide ( observer ) , unit ) then
 873: LD_VAR 0 1
 877: PPUSH
 878: CALL_OW 255
 882: PPUSH
 883: LD_VAR 0 2
 887: PPUSH
 888: CALL_OW 292
 892: NOT
 893: IFFALSE 897
// exit ;
 895: GO 921
// result := GetDistUnits ( observer , unit ) < 12 ;
 897: LD_ADDR_VAR 0 3
 901: PUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_VAR 0 2
 911: PPUSH
 912: CALL_OW 296
 916: PUSH
 917: LD_INT 12
 919: LESS
 920: ST_TO_ADDR
// end ;
 921: LD_VAR 0 3
 925: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 926: LD_INT 0
 928: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 929: LD_VAR 0 2
 933: PUSH
 934: LD_INT 1
 936: ARRAY
 937: PPUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 2
 945: ARRAY
 946: PPUSH
 947: CALL_OW 488
 951: IFFALSE 981
 953: PUSH
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: ARRAY
 971: PPUSH
 972: CALL_OW 428
 976: PUSH
 977: LD_INT 0
 979: EQUAL
 980: AND
 981: IFFALSE 1015
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 983: LD_VAR 0 1
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PPUSH
1006: LD_VAR 0 3
1010: PPUSH
1011: CALL_OW 48
// end ;
1015: LD_VAR 0 4
1019: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1020: LD_INT 0
1022: PPUSH
1023: PPUSH
1024: PPUSH
1025: PPUSH
1026: PPUSH
// if not unit then
1027: LD_VAR 0 1
1031: NOT
1032: IFFALSE 1036
// exit ;
1034: GO 1241
// side := GetSide ( unit ) ;
1036: LD_ADDR_VAR 0 4
1040: PUSH
1041: LD_VAR 0 1
1045: PPUSH
1046: CALL_OW 255
1050: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1051: LD_ADDR_VAR 0 5
1055: PUSH
1056: LD_INT 22
1058: PUSH
1059: LD_VAR 0 4
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 30
1070: PUSH
1071: LD_VAR 0 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PPUSH
1084: CALL_OW 69
1088: ST_TO_ADDR
// if not tmp then
1089: LD_VAR 0 5
1093: NOT
1094: IFFALSE 1098
// exit ;
1096: GO 1241
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: LD_VAR 0 1
1107: PPUSH
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_INT 1
1115: PPUSH
1116: LD_INT 1
1118: PPUSH
1119: CALL 38990 0 4
1123: ST_TO_ADDR
// places := 1 ;
1124: LD_ADDR_VAR 0 7
1128: PUSH
1129: LD_INT 1
1131: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 4
1145: PUSH
1146: LD_INT 5
1148: PUSH
1149: LD_INT 2
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 6
1157: PUSH
1158: LD_INT 7
1160: PUSH
1161: LD_INT 8
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: IN
1175: IFFALSE 1185
// places := 6 ;
1177: LD_ADDR_VAR 0 7
1181: PUSH
1182: LD_INT 6
1184: ST_TO_ADDR
// for i in tmp do
1185: LD_ADDR_VAR 0 6
1189: PUSH
1190: LD_VAR 0 5
1194: PUSH
1195: FOR_IN
1196: IFFALSE 1239
// begin if UnitsInside ( i ) - places <= 0 then
1198: LD_VAR 0 6
1202: PPUSH
1203: CALL_OW 313
1207: PUSH
1208: LD_VAR 0 7
1212: MINUS
1213: PUSH
1214: LD_INT 0
1216: LESSEQUAL
1217: IFFALSE 1223
// continue else
1219: GO 1195
1221: GO 1237
// begin result := i ;
1223: LD_ADDR_VAR 0 3
1227: PUSH
1228: LD_VAR 0 6
1232: ST_TO_ADDR
// exit ;
1233: POP
1234: POP
1235: GO 1241
// end ; end ;
1237: GO 1195
1239: POP
1240: POP
// end ; end_of_file
1241: LD_VAR 0 3
1245: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
// uc_side := 2 ;
1250: LD_ADDR_OWVAR 20
1254: PUSH
1255: LD_INT 2
1257: ST_TO_ADDR
// uc_nation := 2 ;
1258: LD_ADDR_OWVAR 21
1262: PUSH
1263: LD_INT 2
1265: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1266: LD_ADDR_EXP 19
1270: PUSH
1271: LD_STRING Heike
1273: PPUSH
1274: LD_EXP 1
1278: NOT
1279: PPUSH
1280: LD_EXP 2
1284: PPUSH
1285: CALL 33413 0 3
1289: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1290: LD_ADDR_EXP 22
1294: PUSH
1295: LD_STRING Ibrahim
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_EXP 2
1308: PPUSH
1309: CALL 33413 0 3
1313: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1314: LD_ADDR_EXP 20
1318: PUSH
1319: LD_STRING Givi
1321: PPUSH
1322: LD_EXP 1
1326: NOT
1327: PPUSH
1328: LD_EXP 2
1332: PPUSH
1333: CALL 33413 0 3
1337: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1338: LD_ADDR_EXP 23
1342: PUSH
1343: LD_STRING Kamil
1345: PPUSH
1346: LD_EXP 1
1350: NOT
1351: PPUSH
1352: LD_EXP 2
1356: PPUSH
1357: CALL 33413 0 3
1361: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1362: LD_ADDR_EXP 24
1366: PUSH
1367: LD_STRING Kaia
1369: PPUSH
1370: LD_EXP 1
1374: NOT
1375: PPUSH
1376: LD_EXP 2
1380: PPUSH
1381: CALL 33413 0 3
1385: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1386: LD_ADDR_EXP 25
1390: PUSH
1391: LD_STRING Sophia
1393: PPUSH
1394: LD_EXP 1
1398: NOT
1399: PPUSH
1400: LD_EXP 2
1404: PPUSH
1405: CALL 33413 0 3
1409: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1410: LD_ADDR_EXP 26
1414: PUSH
1415: LD_STRING Markov
1417: PPUSH
1418: LD_EXP 1
1422: NOT
1423: PPUSH
1424: LD_EXP 2
1428: PPUSH
1429: CALL 33413 0 3
1433: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1434: LD_ADDR_EXP 29
1438: PUSH
1439: LD_STRING Aviradze
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 2
1452: PPUSH
1453: CALL 33413 0 3
1457: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1458: LD_ADDR_EXP 28
1462: PUSH
1463: LD_STRING Kurt
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 2
1476: PPUSH
1477: CALL 33413 0 3
1481: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1482: LD_ADDR_EXP 21
1486: PUSH
1487: LD_STRING Mike
1489: PPUSH
1490: LD_EXP 1
1494: NOT
1495: PPUSH
1496: LD_EXP 2
1500: PPUSH
1501: CALL 33413 0 3
1505: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1506: LD_ADDR_EXP 30
1510: PUSH
1511: LD_STRING 04_1_others
1513: PPUSH
1514: CALL_OW 31
1518: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1519: LD_ADDR_EXP 32
1523: PUSH
1524: LD_STRING 04_1_apes
1526: PPUSH
1527: CALL_OW 31
1531: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1532: LD_ADDR_EXP 31
1536: PUSH
1537: LD_STRING 04_1_Vehicles
1539: PPUSH
1540: EMPTY
1541: PPUSH
1542: CALL_OW 30
1546: ST_TO_ADDR
// if debug then
1547: LD_EXP 1
1551: IFFALSE 1770
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_big_cargo_bay , 3 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1553: LD_ADDR_EXP 31
1557: PUSH
1558: LD_INT 13
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: LD_INT 27
1569: PUSH
1570: LD_INT 2
1572: PUSH
1573: LD_INT 1000
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: LD_INT 0
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 13
1601: PUSH
1602: LD_INT 1
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: LD_INT 25
1610: PUSH
1611: LD_INT 2
1613: PUSH
1614: LD_INT 1000
1616: PUSH
1617: LD_INT 0
1619: PUSH
1620: LD_INT 0
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 3
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 13
1642: PUSH
1643: LD_INT 1
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: LD_INT 27
1651: PUSH
1652: LD_INT 2
1654: PUSH
1655: LD_INT 1000
1657: PUSH
1658: LD_INT 0
1660: PUSH
1661: LD_INT 0
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 13
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: LD_INT 27
1692: PUSH
1693: LD_INT 2
1695: PUSH
1696: LD_INT 1000
1698: PUSH
1699: LD_INT 0
1701: PUSH
1702: LD_INT 0
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 23
1724: PUSH
1725: LD_INT 1
1727: PUSH
1728: LD_INT 1
1730: PUSH
1731: LD_INT 89
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: LD_INT 1000
1739: PUSH
1740: LD_INT 40
1742: PUSH
1743: LD_INT 40
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: ST_TO_ADDR
// uc_side := 5 ;
1770: LD_ADDR_OWVAR 20
1774: PUSH
1775: LD_INT 5
1777: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1778: LD_ADDR_EXP 27
1782: PUSH
1783: LD_STRING Abdul
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: LD_STRING 
1791: PPUSH
1792: CALL 33413 0 3
1796: ST_TO_ADDR
// end ;
1797: LD_VAR 0 1
1801: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , debug ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1802: LD_STRING 04_1_KaganCaptured
1804: PPUSH
1805: LD_EXP 1
1809: PPUSH
1810: CALL_OW 30
1814: IFFALSE 1833
1816: PUSH
1817: LD_INT 22
1819: PUSH
1820: LD_INT 5
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PPUSH
1827: CALL_OW 69
1831: NOT
1832: AND
1833: IFFALSE 1872
1835: PUSH
1836: LD_INT 124
1838: PPUSH
1839: LD_INT 26
1841: PPUSH
1842: CALL_OW 428
1846: PUSH
1847: LD_INT 0
1849: EQUAL
1850: PUSH
1851: LD_INT 124
1853: PPUSH
1854: LD_INT 26
1856: PPUSH
1857: CALL_OW 428
1861: PPUSH
1862: CALL_OW 255
1866: PUSH
1867: LD_INT 2
1869: EQUAL
1870: XOR
1871: AND
1872: IFFALSE 2263
1874: GO 1876
1876: DISABLE
1877: LD_INT 0
1879: PPUSH
1880: PPUSH
// begin enable ;
1881: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1882: LD_EXP 34
1886: NOT
1887: IFTRUE 1899
1889: PUSH
1890: LD_EXP 34
1894: PUSH
1895: LD_INT 4
1897: GREATER
1898: OR
1899: IFFALSE 1909
// cargoCounter := 1 ;
1901: LD_ADDR_EXP 34
1905: PUSH
1906: LD_INT 1
1908: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: LD_INT 142
1916: PUSH
1917: LD_INT 15
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 129
1926: PUSH
1927: LD_INT 11
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 138
1936: PUSH
1937: LD_INT 9
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 133
1946: PUSH
1947: LD_INT 10
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// uc_side := 5 ;
1960: LD_ADDR_OWVAR 20
1964: PUSH
1965: LD_INT 5
1967: ST_TO_ADDR
// uc_nation := 2 ;
1968: LD_ADDR_OWVAR 21
1972: PUSH
1973: LD_INT 2
1975: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1976: LD_INT 5
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: LD_INT 13
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: LD_INT 32
1993: PPUSH
1994: LD_INT 70
1996: PPUSH
1997: CALL 344 0 7
// veh := CreateVehicle ;
2001: LD_ADDR_VAR 0 1
2005: PUSH
2006: CALL_OW 45
2010: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_INT 3
2018: PPUSH
2019: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2023: LD_VAR 0 1
2027: PPUSH
2028: LD_INT 8
2030: PPUSH
2031: LD_INT 0
2033: PPUSH
2034: CALL_OW 49
// if not cargoDriver then
2038: LD_EXP 33
2042: NOT
2043: IFFALSE 2068
// begin PrepareHuman ( false , 1 , 3 ) ;
2045: LD_INT 0
2047: PPUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 3
2053: PPUSH
2054: CALL_OW 380
// cargoDriver := CreateHuman ;
2058: LD_ADDR_EXP 33
2062: PUSH
2063: CALL_OW 44
2067: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2068: LD_EXP 33
2072: PPUSH
2073: LD_VAR 0 1
2077: PPUSH
2078: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2082: LD_VAR 0 1
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: LD_INT 100
2092: PPUSH
2093: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2097: LD_VAR 0 1
2101: PPUSH
2102: LD_VAR 0 2
2106: PUSH
2107: LD_EXP 34
2111: ARRAY
2112: PUSH
2113: LD_INT 1
2115: ARRAY
2116: PPUSH
2117: LD_VAR 0 2
2121: PUSH
2122: LD_EXP 34
2126: ARRAY
2127: PUSH
2128: LD_INT 2
2130: ARRAY
2131: PPUSH
2132: CALL_OW 111
// AddComUnload ( veh ) ;
2136: LD_VAR 0 1
2140: PPUSH
2141: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2145: LD_VAR 0 1
2149: PPUSH
2150: LD_INT 133
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL_OW 171
// wait ( 0 0$5 ) ;
2160: LD_INT 175
2162: PPUSH
2163: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2167: LD_INT 35
2169: PPUSH
2170: CALL_OW 67
// if not HasTask ( veh ) then
2174: LD_VAR 0 1
2178: PPUSH
2179: CALL_OW 314
2183: NOT
2184: IFFALSE 2201
// ComMoveXY ( veh , 133 , 2 ) ;
2186: LD_VAR 0 1
2190: PPUSH
2191: LD_INT 133
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2201: LD_VAR 0 1
2205: PPUSH
2206: LD_INT 133
2208: PPUSH
2209: LD_INT 2
2211: PPUSH
2212: CALL_OW 307
2216: IFTRUE 2232
2218: PUSH
2219: LD_VAR 0 1
2223: PPUSH
2224: LD_INT 8
2226: PPUSH
2227: CALL_OW 308
2231: OR
2232: IFFALSE 2167
// RemoveUnit ( cargoDriver ) ;
2234: LD_EXP 33
2238: PPUSH
2239: CALL_OW 64
// RemoveUnit ( veh ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: CALL_OW 64
// if tick >= 20 20$00 then
2252: LD_OWVAR 1
2256: PUSH
2257: LD_INT 42000
2259: GREATEREQUAL
2260: IFFALSE 2263
// disable ;
2262: DISABLE
// end ; end_of_file
2263: PPOPN 2
2265: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
2273: PPUSH
2274: PPUSH
2275: PPUSH
2276: PPUSH
// uc_side := 3 ;
2277: LD_ADDR_OWVAR 20
2281: PUSH
2282: LD_INT 3
2284: ST_TO_ADDR
// uc_nation := 3 ;
2285: LD_ADDR_OWVAR 21
2289: PUSH
2290: LD_INT 3
2292: ST_TO_ADDR
// ruForce := [ ] ;
2293: LD_ADDR_EXP 38
2297: PUSH
2298: EMPTY
2299: ST_TO_ADDR
// ruMech := [ ] ;
2300: LD_ADDR_EXP 40
2304: PUSH
2305: EMPTY
2306: ST_TO_ADDR
// ruEng := [ ] ;
2307: LD_ADDR_EXP 39
2311: PUSH
2312: EMPTY
2313: ST_TO_ADDR
// ruSci := [ ] ;
2314: LD_ADDR_EXP 41
2318: PUSH
2319: EMPTY
2320: ST_TO_ADDR
// ruMobile := [ ] ;
2321: LD_ADDR_EXP 42
2325: PUSH
2326: EMPTY
2327: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2328: LD_ADDR_EXP 35
2332: PUSH
2333: LD_STRING Burlak
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: LD_STRING 
2341: PPUSH
2342: CALL 33413 0 3
2346: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2347: LD_ADDR_EXP 36
2351: PUSH
2352: LD_STRING Gaydar
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: LD_STRING 
2360: PPUSH
2361: CALL 33413 0 3
2365: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2366: LD_ADDR_EXP 37
2370: PUSH
2371: LD_STRING Kuzmov
2373: PPUSH
2374: LD_INT 0
2376: PPUSH
2377: LD_STRING 
2379: PPUSH
2380: CALL 33413 0 3
2384: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2385: LD_EXP 37
2389: PPUSH
2390: LD_INT 200
2392: PPUSH
2393: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2397: LD_INT 200
2399: PPUSH
2400: LD_STRING chuikov
2402: PPUSH
2403: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2407: LD_INT 200
2409: PPUSH
2410: CALL_OW 274
2414: PPUSH
2415: LD_INT 1
2417: PPUSH
2418: LD_INT 800
2420: PUSH
2421: LD_INT 1000
2423: PUSH
2424: LD_INT 1250
2426: PUSH
2427: LD_INT 1300
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: PUSH
2436: LD_OWVAR 67
2440: ARRAY
2441: PPUSH
2442: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2446: LD_INT 200
2448: PPUSH
2449: CALL_OW 274
2453: PPUSH
2454: LD_INT 2
2456: PPUSH
2457: LD_INT 160
2459: PPUSH
2460: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2464: LD_INT 225
2466: PPUSH
2467: CALL_OW 274
2471: PPUSH
2472: LD_INT 1
2474: PPUSH
2475: LD_INT 200
2477: PPUSH
2478: CALL_OW 277
// oil := 150 ;
2482: LD_ADDR_VAR 0 9
2486: PUSH
2487: LD_INT 150
2489: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2490: LD_EXP 5
2494: PUSH
2495: LD_INT 94500
2497: PUSH
2498: LD_INT 84000
2500: PUSH
2501: LD_INT 73500
2503: PUSH
2504: LD_INT 67200
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: PUSH
2513: LD_OWVAR 67
2517: ARRAY
2518: GREATEREQUAL
2519: IFFALSE 2674
// begin oil := 450 ;
2521: LD_ADDR_VAR 0 9
2525: PUSH
2526: LD_INT 450
2528: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2529: LD_ADDR_VAR 0 7
2533: PUSH
2534: LD_INT 123
2536: PUSH
2537: LD_INT 17
2539: PUSH
2540: LD_INT 3
2542: PUSH
2543: LD_INT 31
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 152
2554: PUSH
2555: LD_INT 38
2557: PUSH
2558: LD_INT 3
2560: PUSH
2561: LD_INT 31
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PUSH
2570: LD_INT 81
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 4
2578: PUSH
2579: LD_INT 31
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 113
2590: PUSH
2591: LD_INT 67
2593: PUSH
2594: LD_INT 4
2596: PUSH
2597: LD_INT 32
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: ST_TO_ADDR
// for i in tmp do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: LD_VAR 0 7
2621: PUSH
2622: FOR_IN
2623: IFFALSE 2672
// begin bc_type := i [ 4 ] ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 4
2637: ARRAY
2638: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2639: LD_VAR 0 4
2643: PUSH
2644: LD_INT 1
2646: ARRAY
2647: PPUSH
2648: LD_VAR 0 4
2652: PUSH
2653: LD_INT 2
2655: ARRAY
2656: PPUSH
2657: LD_VAR 0 4
2661: PUSH
2662: LD_INT 3
2664: ARRAY
2665: PPUSH
2666: CALL_OW 47
// end ;
2670: GO 2622
2672: POP
2673: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2674: LD_INT 225
2676: PPUSH
2677: CALL_OW 274
2681: PPUSH
2682: LD_INT 2
2684: PPUSH
2685: LD_VAR 0 9
2689: PPUSH
2690: CALL_OW 277
// if Difficulty > 1 then
2694: LD_OWVAR 67
2698: PUSH
2699: LD_INT 1
2701: GREATER
2702: IFFALSE 2797
// begin bc_type := b_bunker ;
2704: LD_ADDR_OWVAR 42
2708: PUSH
2709: LD_INT 32
2711: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2712: LD_ADDR_VAR 0 7
2716: PUSH
2717: LD_INT 121
2719: PUSH
2720: LD_INT 85
2722: PUSH
2723: LD_INT 5
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 93
2733: PUSH
2734: LD_INT 72
2736: PUSH
2737: LD_INT 1
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: ST_TO_ADDR
// for i in tmp do
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: LD_VAR 0 7
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2795
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2762: LD_VAR 0 4
2766: PUSH
2767: LD_INT 1
2769: ARRAY
2770: PPUSH
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: PPUSH
2780: LD_VAR 0 4
2784: PUSH
2785: LD_INT 3
2787: ARRAY
2788: PPUSH
2789: CALL_OW 47
2793: GO 2759
2795: POP
2796: POP
// end ; base := GetBase ( ruMainBase ) ;
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: LD_INT 200
2804: PPUSH
2805: CALL_OW 274
2809: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2810: LD_ADDR_VAR 0 3
2814: PUSH
2815: LD_VAR 0 2
2819: PPUSH
2820: CALL_OW 417
2824: ST_TO_ADDR
// for b in blist do
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 3
2834: PUSH
2835: FOR_IN
2836: IFFALSE 3287
// begin if b [ 1 ] = b_factory then
2838: LD_VAR 0 5
2842: PUSH
2843: LD_INT 1
2845: ARRAY
2846: PUSH
2847: LD_INT 3
2849: EQUAL
2850: IFFALSE 3001
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2852: LD_ADDR_VAR 0 8
2856: PUSH
2857: LD_VAR 0 5
2861: PUSH
2862: LD_INT 2
2864: ARRAY
2865: PPUSH
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 3
2873: ARRAY
2874: PPUSH
2875: CALL_OW 428
2879: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 2
2892: PUSH
2893: LD_INT 2
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 2997
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 3
2928: PPUSH
2929: LD_INT 1
2931: PUSH
2932: LD_OWVAR 67
2936: PLUS
2937: PPUSH
2938: CALL_OW 380
// un := CreateHuman ;
2942: LD_ADDR_VAR 0 6
2946: PUSH
2947: CALL_OW 44
2951: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2952: LD_ADDR_EXP 40
2956: PUSH
2957: LD_EXP 40
2961: PPUSH
2962: LD_EXP 40
2966: PUSH
2967: LD_INT 1
2969: PLUS
2970: PPUSH
2971: LD_VAR 0 6
2975: PPUSH
2976: CALL_OW 1
2980: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2981: LD_VAR 0 6
2985: PPUSH
2986: LD_VAR 0 8
2990: PPUSH
2991: CALL_OW 52
// end ;
2995: GO 2920
2997: POP
2998: POP
// end else
2999: GO 3285
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
3001: LD_VAR 0 5
3005: PUSH
3006: LD_INT 1
3008: ARRAY
3009: PUSH
3010: LD_INT 6
3012: PUSH
3013: LD_INT 7
3015: PUSH
3016: LD_INT 8
3018: PUSH
3019: LD_INT 10
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: IN
3028: IFFALSE 3138
// begin for i := 1 to 2 do
3030: LD_ADDR_VAR 0 4
3034: PUSH
3035: DOUBLE
3036: LD_INT 1
3038: DEC
3039: ST_TO_ADDR
3040: LD_INT 2
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3134
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3046: LD_INT 0
3048: PPUSH
3049: LD_INT 4
3051: PPUSH
3052: LD_OWVAR 67
3056: PPUSH
3057: CALL_OW 380
// un := CreateHuman ;
3061: LD_ADDR_VAR 0 6
3065: PUSH
3066: CALL_OW 44
3070: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3071: LD_ADDR_EXP 41
3075: PUSH
3076: LD_EXP 41
3080: PPUSH
3081: LD_EXP 41
3085: PUSH
3086: LD_INT 1
3088: PLUS
3089: PPUSH
3090: LD_VAR 0 6
3094: PPUSH
3095: CALL_OW 1
3099: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3100: LD_VAR 0 6
3104: PPUSH
3105: LD_VAR 0 5
3109: PUSH
3110: LD_INT 2
3112: ARRAY
3113: PPUSH
3114: LD_VAR 0 5
3118: PUSH
3119: LD_INT 3
3121: ARRAY
3122: PPUSH
3123: CALL_OW 428
3127: PPUSH
3128: CALL_OW 52
// end ;
3132: GO 3043
3134: POP
3135: POP
// end else
3136: GO 3285
// if b [ 1 ] = b_warehouse then
3138: LD_VAR 0 5
3142: PUSH
3143: LD_INT 1
3145: ARRAY
3146: PUSH
3147: LD_INT 1
3149: EQUAL
3150: IFFALSE 3285
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3152: LD_ADDR_VAR 0 4
3156: PUSH
3157: DOUBLE
3158: LD_INT 1
3160: DEC
3161: ST_TO_ADDR
3162: LD_INT 1
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: LD_OWVAR 67
3172: PLUS
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: LD_EXP 10
3182: PUSH
3183: LD_INT 3
3185: GREATER
3186: PUSH
3187: LD_INT 1
3189: PLUS
3190: ARRAY
3191: PUSH
3192: FOR_TO
3193: IFFALSE 3283
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3195: LD_INT 0
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_OWVAR 67
3205: PPUSH
3206: CALL_OW 380
// un := CreateHuman ;
3210: LD_ADDR_VAR 0 6
3214: PUSH
3215: CALL_OW 44
3219: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3220: LD_ADDR_EXP 39
3224: PUSH
3225: LD_EXP 39
3229: PPUSH
3230: LD_EXP 39
3234: PUSH
3235: LD_INT 1
3237: PLUS
3238: PPUSH
3239: LD_VAR 0 6
3243: PPUSH
3244: CALL_OW 1
3248: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3249: LD_VAR 0 6
3253: PPUSH
3254: LD_VAR 0 5
3258: PUSH
3259: LD_INT 2
3261: ARRAY
3262: PPUSH
3263: LD_VAR 0 5
3267: PUSH
3268: LD_INT 3
3270: ARRAY
3271: PPUSH
3272: CALL_OW 428
3276: PPUSH
3277: CALL_OW 52
// end ;
3281: GO 3192
3283: POP
3284: POP
// end ; end ;
3285: GO 2835
3287: POP
3288: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 22
3296: PUSH
3297: LD_INT 3
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 21
3306: PUSH
3307: LD_INT 3
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: ST_TO_ADDR
// for b in blist do
3323: LD_ADDR_VAR 0 5
3327: PUSH
3328: LD_VAR 0 3
3332: PUSH
3333: FOR_IN
3334: IFFALSE 3356
// SetBLevel ( b , 3 + Difficulty ) ;
3336: LD_VAR 0 5
3340: PPUSH
3341: LD_INT 3
3343: PUSH
3344: LD_OWVAR 67
3348: PLUS
3349: PPUSH
3350: CALL_OW 241
3354: GO 3333
3356: POP
3357: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: LD_INT 22
3365: PUSH
3366: LD_INT 3
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_INT 30
3375: PUSH
3376: LD_INT 32
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PPUSH
3387: CALL_OW 69
3391: ST_TO_ADDR
// for b in blist do
3392: LD_ADDR_VAR 0 5
3396: PUSH
3397: LD_VAR 0 3
3401: PUSH
3402: FOR_IN
3403: IFFALSE 3512
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 1
3410: PPUSH
3411: LD_INT 1
3413: PUSH
3414: LD_OWVAR 67
3418: PLUS
3419: PPUSH
3420: CALL_OW 380
// un := CreateHuman ;
3424: LD_ADDR_VAR 0 6
3428: PUSH
3429: CALL_OW 44
3433: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3434: LD_ADDR_EXP 38
3438: PUSH
3439: LD_EXP 38
3443: PPUSH
3444: LD_EXP 38
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: PPUSH
3453: LD_VAR 0 6
3457: PPUSH
3458: CALL_OW 1
3462: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3463: LD_VAR 0 6
3467: PPUSH
3468: LD_VAR 0 5
3472: PPUSH
3473: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3477: LD_VAR 0 5
3481: PPUSH
3482: LD_INT 44
3484: PUSH
3485: LD_INT 43
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_VAR 0 5
3496: PUSH
3497: LD_INT 2
3499: MOD
3500: PUSH
3501: LD_INT 1
3503: PLUS
3504: ARRAY
3505: PPUSH
3506: CALL_OW 431
// end ;
3510: GO 3402
3512: POP
3513: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3514: LD_ADDR_VAR 0 3
3518: PUSH
3519: LD_INT 22
3521: PUSH
3522: LD_INT 3
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 30
3531: PUSH
3532: LD_INT 31
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PPUSH
3543: CALL_OW 69
3547: ST_TO_ADDR
// for b in blist do
3548: LD_ADDR_VAR 0 5
3552: PUSH
3553: LD_VAR 0 3
3557: PUSH
3558: FOR_IN
3559: IFFALSE 3658
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 1
3569: PUSH
3570: LD_OWVAR 67
3574: PLUS
3575: PPUSH
3576: CALL_OW 380
// un := CreateHuman ;
3580: LD_ADDR_VAR 0 6
3584: PUSH
3585: CALL_OW 44
3589: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3590: LD_ADDR_EXP 38
3594: PUSH
3595: LD_EXP 38
3599: PPUSH
3600: LD_EXP 38
3604: PUSH
3605: LD_INT 1
3607: PLUS
3608: PPUSH
3609: LD_VAR 0 6
3613: PPUSH
3614: CALL_OW 1
3618: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3619: LD_VAR 0 6
3623: PPUSH
3624: LD_VAR 0 5
3628: PPUSH
3629: CALL_OW 254
3633: PUSH
3634: LD_INT 3
3636: PLUS
3637: PPUSH
3638: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3642: LD_VAR 0 6
3646: PPUSH
3647: LD_VAR 0 5
3651: PPUSH
3652: CALL_OW 52
// end ;
3656: GO 3558
3658: POP
3659: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: LD_INT 22
3667: PUSH
3668: LD_INT 3
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 4
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: LD_INT 30
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: LIST
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PPUSH
3707: CALL_OW 69
3711: ST_TO_ADDR
// for b in blist do
3712: LD_ADDR_VAR 0 5
3716: PUSH
3717: LD_VAR 0 3
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3819
// begin for i := 1 to 2 do
3725: LD_ADDR_VAR 0 4
3729: PUSH
3730: DOUBLE
3731: LD_INT 1
3733: DEC
3734: ST_TO_ADDR
3735: LD_INT 2
3737: PUSH
3738: FOR_TO
3739: IFFALSE 3815
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3741: LD_INT 0
3743: PPUSH
3744: LD_INT 1
3746: PPUSH
3747: LD_INT 1
3749: PUSH
3750: LD_OWVAR 67
3754: PLUS
3755: PPUSH
3756: CALL_OW 380
// un := CreateHuman ;
3760: LD_ADDR_VAR 0 6
3764: PUSH
3765: CALL_OW 44
3769: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3770: LD_ADDR_EXP 38
3774: PUSH
3775: LD_EXP 38
3779: PPUSH
3780: LD_EXP 38
3784: PUSH
3785: LD_INT 1
3787: PLUS
3788: PPUSH
3789: LD_VAR 0 6
3793: PPUSH
3794: CALL_OW 1
3798: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3799: LD_VAR 0 6
3803: PPUSH
3804: LD_VAR 0 5
3808: PPUSH
3809: CALL_OW 52
// end ;
3813: GO 3738
3815: POP
3816: POP
// end ;
3817: GO 3722
3819: POP
3820: POP
// if ibrahimOnRuSide then
3821: LD_EXP 3
3825: IFFALSE 3923
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3827: LD_ADDR_EXP 22
3831: PUSH
3832: LD_STRING IbrahimRu
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: LD_STRING 
3840: PPUSH
3841: CALL 33413 0 3
3845: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3846: LD_EXP 22
3850: PPUSH
3851: LD_INT 121
3853: PPUSH
3854: LD_INT 78
3856: PPUSH
3857: LD_INT 0
3859: PPUSH
3860: CALL_OW 48
// ComHold ( Ibrahim ) ;
3864: LD_EXP 22
3868: PPUSH
3869: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3873: LD_INT 1
3875: PPUSH
3876: LD_INT 1
3878: PPUSH
3879: LD_INT 2
3881: PPUSH
3882: CALL_OW 380
// ruSol := CreateHuman ;
3886: LD_ADDR_EXP 43
3890: PUSH
3891: CALL_OW 44
3895: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3896: LD_EXP 43
3900: PPUSH
3901: LD_INT 121
3903: PPUSH
3904: LD_INT 75
3906: PPUSH
3907: LD_INT 0
3909: PPUSH
3910: CALL_OW 48
// ComHold ( ruSol ) ;
3914: LD_EXP 43
3918: PPUSH
3919: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3923: LD_ADDR_VAR 0 4
3927: PUSH
3928: DOUBLE
3929: LD_INT 1
3931: DEC
3932: ST_TO_ADDR
3933: LD_INT 2
3935: PUSH
3936: LD_INT 2
3938: PUSH
3939: LD_OWVAR 67
3943: PLUS
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PUSH
3949: LD_EXP 10
3953: PUSH
3954: LD_INT 3
3956: GREATER
3957: PUSH
3958: LD_INT 1
3960: PLUS
3961: ARRAY
3962: PUSH
3963: FOR_TO
3964: IFFALSE 4033
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3966: LD_VAR 0 8
3970: PPUSH
3971: LD_INT 21
3973: PUSH
3974: LD_INT 23
3976: PUSH
3977: LD_INT 24
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: LD_VAR 0 4
3989: PUSH
3990: LD_INT 3
3992: MOD
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: ARRAY
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 43
4007: PUSH
4008: LD_INT 44
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PUSH
4015: LD_INT 1
4017: PPUSH
4018: LD_INT 2
4020: PPUSH
4021: CALL_OW 12
4025: ARRAY
4026: PPUSH
4027: CALL_OW 185
4031: GO 3963
4033: POP
4034: POP
// end ;
4035: LD_VAR 0 1
4039: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4040: LD_EXP 42
4044: IFFALSE 4053
4046: PUSH
4047: LD_EXP 4
4051: NOT
4052: AND
4053: IFFALSE 4595
4055: GO 4057
4057: DISABLE
4058: LD_INT 0
4060: PPUSH
4061: PPUSH
4062: PPUSH
4063: PPUSH
4064: PPUSH
4065: PPUSH
// begin enable ;
4066: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4067: LD_ADDR_VAR 0 2
4071: PUSH
4072: LD_EXP 42
4076: PPUSH
4077: LD_INT 21
4079: PUSH
4080: LD_INT 2
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 72
4091: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_INT 81
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 2
4109: PUSH
4110: LD_INT 95
4112: PUSH
4113: LD_INT 4
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 95
4122: PUSH
4123: LD_INT 5
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 95
4132: PUSH
4133: LD_INT 6
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 95
4142: PUSH
4143: LD_INT 7
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PPUSH
4161: CALL_OW 69
4165: ST_TO_ADDR
// for i in filter do
4166: LD_ADDR_VAR 0 1
4170: PUSH
4171: LD_VAR 0 2
4175: PUSH
4176: FOR_IN
4177: IFFALSE 4593
// begin tmp := IsDrivenBy ( i ) ;
4179: LD_ADDR_VAR 0 3
4183: PUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 311
4193: ST_TO_ADDR
// tag := GetTag ( i ) ;
4194: LD_ADDR_VAR 0 6
4198: PUSH
4199: LD_VAR 0 1
4203: PPUSH
4204: CALL_OW 110
4208: ST_TO_ADDR
// if not tmp then
4209: LD_VAR 0 3
4213: NOT
4214: IFFALSE 4218
// continue ;
4216: GO 4176
// if GetFuel ( i ) > 90 and tag = 2 then
4218: LD_VAR 0 1
4222: PPUSH
4223: CALL_OW 261
4227: PUSH
4228: LD_INT 90
4230: GREATER
4231: IFFALSE 4243
4233: PUSH
4234: LD_VAR 0 6
4238: PUSH
4239: LD_INT 2
4241: EQUAL
4242: AND
4243: IFFALSE 4259
// SetTag ( i , 0 ) else
4245: LD_VAR 0 1
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL_OW 109
4257: GO 4302
// if GetTag ( i ) = 2 then
4259: LD_VAR 0 1
4263: PPUSH
4264: CALL_OW 110
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: IFFALSE 4302
// begin x := rand ( 1 , 2 ) ;
4274: LD_ADDR_VAR 0 5
4278: PUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_INT 2
4284: PPUSH
4285: CALL_OW 12
4289: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4290: LD_VAR 0 1
4294: PPUSH
4295: LD_INT 200
4297: PPUSH
4298: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4302: LD_VAR 0 1
4306: PPUSH
4307: CALL_OW 256
4311: PUSH
4312: LD_INT 650
4314: GREATEREQUAL
4315: IFFALSE 4324
4317: PUSH
4318: LD_VAR 0 6
4322: NOT
4323: AND
4324: IFFALSE 4394
// if enemy then
4326: LD_VAR 0 4
4330: IFFALSE 4358
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
4332: LD_VAR 0 1
4336: PPUSH
4337: LD_VAR 0 4
4341: PPUSH
4342: LD_VAR 0 1
4346: PPUSH
4347: CALL_OW 74
4351: PPUSH
4352: CALL_OW 115
4356: GO 4394
// if GetDistUnitXY ( i , 112 , 119 ) > 6 then
4358: LD_VAR 0 1
4362: PPUSH
4363: LD_INT 112
4365: PPUSH
4366: LD_INT 119
4368: PPUSH
4369: CALL_OW 297
4373: PUSH
4374: LD_INT 6
4376: GREATER
4377: IFFALSE 4394
// ComMoveXY ( i , 112 , 119 ) ;
4379: LD_VAR 0 1
4383: PPUSH
4384: LD_INT 112
4386: PPUSH
4387: LD_INT 119
4389: PPUSH
4390: CALL_OW 111
// if GetLives ( i ) < 650 and not tag then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 256
4403: PUSH
4404: LD_INT 650
4406: LESS
4407: IFFALSE 4416
4409: PUSH
4410: LD_VAR 0 6
4414: NOT
4415: AND
4416: IFFALSE 4445
// begin SetTag ( i , 1 ) ;
4418: LD_VAR 0 1
4422: PPUSH
4423: LD_INT 1
4425: PPUSH
4426: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4430: LD_VAR 0 1
4434: PPUSH
4435: LD_INT 112
4437: PPUSH
4438: LD_INT 119
4440: PPUSH
4441: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4445: LD_VAR 0 1
4449: PPUSH
4450: CALL_OW 110
4454: PUSH
4455: LD_INT 1
4457: EQUAL
4458: IFFALSE 4481
4460: PUSH
4461: LD_VAR 0 1
4465: PPUSH
4466: LD_INT 112
4468: PPUSH
4469: LD_INT 119
4471: PPUSH
4472: CALL_OW 297
4476: PUSH
4477: LD_INT 9
4479: LESS
4480: AND
4481: IFFALSE 4489
4483: PUSH
4484: LD_VAR 0 3
4488: AND
4489: IFFALSE 4591
// begin ComExitVehicle ( tmp ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4500: LD_VAR 0 3
4504: PPUSH
4505: LD_VAR 0 1
4509: PPUSH
4510: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4514: LD_INT 35
4516: PPUSH
4517: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4521: LD_VAR 0 1
4525: PPUSH
4526: CALL_OW 256
4530: PUSH
4531: LD_INT 1000
4533: EQUAL
4534: IFFALSE 4514
// ComEnterUnit ( tmp , i ) ;
4536: LD_VAR 0 3
4540: PPUSH
4541: LD_VAR 0 1
4545: PPUSH
4546: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4550: LD_VAR 0 1
4554: PPUSH
4555: CALL_OW 261
4559: PUSH
4560: LD_INT 50
4562: LESSEQUAL
4563: IFFALSE 4579
// SetTag ( i , 2 ) else
4565: LD_VAR 0 1
4569: PPUSH
4570: LD_INT 2
4572: PPUSH
4573: CALL_OW 109
4577: GO 4591
// SetTag ( i , 0 ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: LD_INT 0
4586: PPUSH
4587: CALL_OW 109
// end ; end ;
4591: GO 4176
4593: POP
4594: POP
// end ;
4595: PPOPN 6
4597: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4598: LD_EXP 4
4602: NOT
4603: IFFALSE 4611
4605: PUSH
4606: LD_EXP 39
4610: AND
4611: IFFALSE 4874
4613: GO 4615
4615: DISABLE
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
// begin enable ;
4622: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: LD_INT 3
4630: PPUSH
4631: LD_INT 22
4633: PUSH
4634: LD_INT 3
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 21
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 3
4653: PUSH
4654: LD_INT 24
4656: PUSH
4657: LD_INT 1000
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: PPUSH
4673: CALL_OW 70
4677: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4678: LD_ADDR_VAR 0 3
4682: PUSH
4683: LD_EXP 39
4687: PPUSH
4688: LD_INT 50
4690: PUSH
4691: EMPTY
4692: LIST
4693: PPUSH
4694: CALL_OW 72
4698: ST_TO_ADDR
// if filter and tmp then
4699: LD_VAR 0 2
4703: IFFALSE 4711
4705: PUSH
4706: LD_VAR 0 3
4710: AND
4711: IFFALSE 4803
// begin for i in tmp do
4713: LD_ADDR_VAR 0 1
4717: PUSH
4718: LD_VAR 0 3
4722: PUSH
4723: FOR_IN
4724: IFFALSE 4799
// begin if GetTag ( i ) = tEscape then
4726: LD_VAR 0 1
4730: PPUSH
4731: CALL_OW 110
4735: PUSH
4736: LD_EXP 18
4740: EQUAL
4741: IFFALSE 4745
// continue ;
4743: GO 4723
// if IsInUnit ( i ) then
4745: LD_VAR 0 1
4749: PPUSH
4750: CALL_OW 310
4754: IFFALSE 4767
// ComExitBuilding ( i ) else
4756: LD_VAR 0 1
4760: PPUSH
4761: CALL_OW 122
4765: GO 4797
// if not HasTask ( i ) then
4767: LD_VAR 0 1
4771: PPUSH
4772: CALL_OW 314
4776: NOT
4777: IFFALSE 4797
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4779: LD_VAR 0 1
4783: PPUSH
4784: LD_VAR 0 2
4788: PUSH
4789: LD_INT 1
4791: ARRAY
4792: PPUSH
4793: CALL_OW 130
// end ;
4797: GO 4723
4799: POP
4800: POP
// end else
4801: GO 4874
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 3
4810: PUSH
4811: LD_INT 54
4813: PUSH
4814: EMPTY
4815: LIST
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 72
4825: IFFALSE 4874
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4827: LD_ADDR_VAR 0 1
4831: PUSH
4832: LD_VAR 0 3
4836: PPUSH
4837: LD_INT 3
4839: PUSH
4840: LD_INT 54
4842: PUSH
4843: EMPTY
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PPUSH
4850: CALL_OW 72
4854: PUSH
4855: FOR_IN
4856: IFFALSE 4872
// ComEnterUnit ( i , ruMainBase ) ;
4858: LD_VAR 0 1
4862: PPUSH
4863: LD_INT 200
4865: PPUSH
4866: CALL_OW 120
4870: GO 4855
4872: POP
4873: POP
// end ; end ;
4874: PPOPN 4
4876: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4877: LD_EXP 4
4881: NOT
4882: IFFALSE 4890
4884: PUSH
4885: LD_EXP 41
4889: AND
4890: IFFALSE 5171
4892: GO 4894
4894: DISABLE
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
4899: PPUSH
4900: PPUSH
// begin enable ;
4901: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4902: LD_ADDR_VAR 0 2
4906: PUSH
4907: LD_INT 3
4909: PPUSH
4910: LD_INT 22
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 21
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 3
4932: PUSH
4933: LD_INT 24
4935: PUSH
4936: LD_INT 1000
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: PPUSH
4952: CALL_OW 70
4956: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_EXP 41
4966: PPUSH
4967: LD_INT 50
4969: PUSH
4970: EMPTY
4971: LIST
4972: PPUSH
4973: CALL_OW 72
4977: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4978: LD_ADDR_VAR 0 4
4982: PUSH
4983: LD_INT 118
4985: PPUSH
4986: LD_INT 121
4988: PPUSH
4989: CALL_OW 428
4993: ST_TO_ADDR
// if filter and tmp then
4994: LD_VAR 0 2
4998: IFFALSE 5006
5000: PUSH
5001: LD_VAR 0 3
5005: AND
5006: IFFALSE 5098
// begin for i in tmp do
5008: LD_ADDR_VAR 0 1
5012: PUSH
5013: LD_VAR 0 3
5017: PUSH
5018: FOR_IN
5019: IFFALSE 5094
// begin if GetTag ( i ) = tEscape then
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 110
5030: PUSH
5031: LD_EXP 18
5035: EQUAL
5036: IFFALSE 5040
// continue ;
5038: GO 5018
// if IsInUnit ( i ) then
5040: LD_VAR 0 1
5044: PPUSH
5045: CALL_OW 310
5049: IFFALSE 5062
// ComExitBuilding ( i ) else
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 122
5060: GO 5092
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5092
// ComHeal ( i , filter [ 1 ] ) ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_VAR 0 2
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: CALL_OW 128
// end ;
5092: GO 5018
5094: POP
5095: POP
// end else
5096: GO 5171
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5098: LD_VAR 0 3
5102: PPUSH
5103: LD_INT 3
5105: PUSH
5106: LD_INT 54
5108: PUSH
5109: EMPTY
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PPUSH
5116: CALL_OW 72
5120: IFFALSE 5171
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5122: LD_ADDR_VAR 0 1
5126: PUSH
5127: LD_VAR 0 3
5131: PPUSH
5132: LD_INT 3
5134: PUSH
5135: LD_INT 54
5137: PUSH
5138: EMPTY
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PPUSH
5145: CALL_OW 72
5149: PUSH
5150: FOR_IN
5151: IFFALSE 5169
// ComEnterUnit ( i , lab ) ;
5153: LD_VAR 0 1
5157: PPUSH
5158: LD_VAR 0 4
5162: PPUSH
5163: CALL_OW 120
5167: GO 5150
5169: POP
5170: POP
// end ; end ; end_of_file
5171: PPOPN 4
5173: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: CALL 26939 0 1
// if un = Heike then
5183: LD_VAR 0 1
5187: PUSH
5188: LD_EXP 19
5192: EQUAL
5193: IFFALSE 5202
// YouLost ( Heike ) ;
5195: LD_STRING Heike
5197: PPUSH
5198: CALL_OW 104
// if un in ruEng then
5202: LD_VAR 0 1
5206: PUSH
5207: LD_EXP 39
5211: IN
5212: IFFALSE 5230
// ruEng := ruEng diff un ;
5214: LD_ADDR_EXP 39
5218: PUSH
5219: LD_EXP 39
5223: PUSH
5224: LD_VAR 0 1
5228: DIFF
5229: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5230: LD_VAR 0 1
5234: PUSH
5235: LD_INT 22
5237: PUSH
5238: LD_INT 2
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 21
5247: PUSH
5248: LD_INT 1
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 23
5257: PUSH
5258: LD_INT 2
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: LIST
5269: PPUSH
5270: CALL_OW 69
5274: IN
5275: IFFALSE 5291
// loseCounter := loseCounter + 1 ;
5277: LD_ADDR_EXP 6
5281: PUSH
5282: LD_EXP 6
5286: PUSH
5287: LD_INT 1
5289: PLUS
5290: ST_TO_ADDR
// end ;
5291: PPOPN 1
5293: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5294: LD_INT 0
5296: PPUSH
5297: PPUSH
// begin if un in ruMobile then
5298: LD_VAR 0 2
5302: PUSH
5303: LD_EXP 42
5307: IN
5308: IFFALSE 5471
// begin ruMobile := ruMobile diff un ;
5310: LD_ADDR_EXP 42
5314: PUSH
5315: LD_EXP 42
5319: PUSH
5320: LD_VAR 0 2
5324: DIFF
5325: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5326: LD_ADDR_VAR 0 5
5330: PUSH
5331: LD_VAR 0 2
5335: PPUSH
5336: CALL_OW 264
5340: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5341: LD_ADDR_VAR 0 6
5345: PUSH
5346: LD_INT 110
5348: PPUSH
5349: LD_INT 126
5351: PPUSH
5352: CALL_OW 428
5356: ST_TO_ADDR
// if not driver or not fac then
5357: LD_VAR 0 1
5361: NOT
5362: IFTRUE 5371
5364: PUSH
5365: LD_VAR 0 6
5369: NOT
5370: OR
5371: IFFALSE 5375
// exit ;
5373: GO 5471
// AddComMoveXY ( driver , 111 , 121 ) ;
5375: LD_VAR 0 1
5379: PPUSH
5380: LD_INT 111
5382: PPUSH
5383: LD_INT 121
5385: PPUSH
5386: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5390: LD_VAR 0 1
5394: PPUSH
5395: LD_VAR 0 6
5399: PPUSH
5400: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5404: LD_INT 35
5406: PPUSH
5407: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5411: LD_VAR 0 1
5415: PPUSH
5416: CALL_OW 301
5420: IFTRUE 5433
5422: PUSH
5423: LD_VAR 0 1
5427: PPUSH
5428: CALL_OW 310
5432: OR
5433: IFFALSE 5404
// if IsDead ( driver ) then
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 301
5444: IFFALSE 5448
// exit ;
5446: GO 5471
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5448: LD_VAR 0 6
5452: PPUSH
5453: LD_INT 21
5455: PPUSH
5456: LD_INT 1
5458: PPUSH
5459: LD_INT 1
5461: PPUSH
5462: LD_VAR 0 5
5466: PPUSH
5467: CALL_OW 185
// end ; end ;
5471: PPOPN 6
5473: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5474: LD_VAR 0 1
5478: PPUSH
5479: LD_VAR 0 2
5483: PPUSH
5484: CALL 26997 0 2
// if GetSide ( fac ) = 3 then
5488: LD_VAR 0 2
5492: PPUSH
5493: CALL_OW 255
5497: PUSH
5498: LD_INT 3
5500: EQUAL
5501: IFFALSE 5547
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5503: LD_ADDR_EXP 42
5507: PUSH
5508: LD_EXP 42
5512: PPUSH
5513: LD_EXP 42
5517: PUSH
5518: LD_INT 1
5520: PLUS
5521: PPUSH
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 1
5531: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5532: LD_VAR 0 1
5536: PPUSH
5537: LD_INT 110
5539: PPUSH
5540: LD_INT 117
5542: PPUSH
5543: CALL_OW 171
// end ; end ;
5547: PPOPN 2
5549: END
// on LeaveBuilding ( b , un ) do var barracks ;
5550: LD_INT 0
5552: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 130
5560: PPUSH
5561: LD_INT 17
5563: PPUSH
5564: CALL_OW 428
5568: PUSH
5569: LD_INT 138
5571: PPUSH
5572: LD_INT 22
5574: PPUSH
5575: CALL_OW 428
5579: PUSH
5580: LD_INT 123
5582: PPUSH
5583: LD_INT 17
5585: PPUSH
5586: CALL_OW 428
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: LIST
5595: IN
5596: IFFALSE 5620
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5598: LD_VAR 0 2
5602: PPUSH
5603: LD_INT 135
5605: PPUSH
5606: LD_INT 31
5608: PPUSH
5609: CALL_OW 428
5613: PPUSH
5614: CALL_OW 180
// exit ;
5618: GO 5894
// end ; if b = HexInfo ( 135 , 31 ) then
5620: LD_VAR 0 1
5624: PUSH
5625: LD_INT 135
5627: PPUSH
5628: LD_INT 31
5630: PPUSH
5631: CALL_OW 428
5635: EQUAL
5636: IFFALSE 5708
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5638: LD_VAR 0 2
5642: PPUSH
5643: LD_INT 106
5645: PPUSH
5646: LD_INT 51
5648: PPUSH
5649: CALL_OW 428
5653: PPUSH
5654: CALL_OW 180
// if not explodeFirstDepot then
5658: LD_EXP 12
5662: NOT
5663: IFFALSE 5706
// begin explodeFirstDepot := true ;
5665: LD_ADDR_EXP 12
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5673: LD_INT 525
5675: PPUSH
5676: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5680: LD_INT 127
5682: PPUSH
5683: LD_INT 27
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5693: LD_INT 125
5695: PPUSH
5696: LD_INT 29
5698: PPUSH
5699: LD_INT 1
5701: PPUSH
5702: CALL_OW 453
// end ; exit ;
5706: GO 5894
// end ; if b = HexInfo ( 106 , 51 ) then
5708: LD_VAR 0 1
5712: PUSH
5713: LD_INT 106
5715: PPUSH
5716: LD_INT 51
5718: PPUSH
5719: CALL_OW 428
5723: EQUAL
5724: IFFALSE 5824
// begin AddComMoveXY ( un , 106 , 93 ) ;
5726: LD_VAR 0 2
5730: PPUSH
5731: LD_INT 106
5733: PPUSH
5734: LD_INT 93
5736: PPUSH
5737: CALL_OW 171
// if not explodeSecondDepot then
5741: LD_EXP 13
5745: NOT
5746: IFFALSE 5822
// begin explodeSecondDepot := true ;
5748: LD_ADDR_EXP 13
5752: PUSH
5753: LD_INT 1
5755: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5756: LD_INT 420
5758: PPUSH
5759: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5763: LD_INT 111
5765: PPUSH
5766: LD_INT 75
5768: PPUSH
5769: LD_INT 1
5771: PPUSH
5772: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5776: LD_INT 111
5778: PPUSH
5779: LD_INT 75
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5789: LD_INT 108
5791: PPUSH
5792: LD_INT 69
5794: PPUSH
5795: LD_INT 1
5797: PPUSH
5798: CALL_OW 453
// wait ( 0 0$2 ) ;
5802: LD_INT 70
5804: PPUSH
5805: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5809: LD_INT 94
5811: PPUSH
5812: LD_INT 65
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 453
// end ; exit ;
5822: GO 5894
// end ; if GetBType ( b ) = b_bunker then
5824: LD_VAR 0 1
5828: PPUSH
5829: CALL_OW 266
5833: PUSH
5834: LD_INT 32
5836: EQUAL
5837: IFFALSE 5894
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5839: LD_ADDR_VAR 0 3
5843: PUSH
5844: LD_VAR 0 2
5848: PPUSH
5849: LD_INT 5
5851: PPUSH
5852: CALL 1020 0 2
5856: ST_TO_ADDR
// if barracks then
5857: LD_VAR 0 3
5861: IFFALSE 5879
// AddComEnterUnit ( un , barracks ) else
5863: LD_VAR 0 2
5867: PPUSH
5868: LD_VAR 0 3
5872: PPUSH
5873: CALL_OW 180
5877: GO 5894
// AddComMoveXY ( un , 116 , 110 ) ;
5879: LD_VAR 0 2
5883: PPUSH
5884: LD_INT 116
5886: PPUSH
5887: LD_INT 110
5889: PPUSH
5890: CALL_OW 171
// end ; end ;
5894: PPOPN 3
5896: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5897: LD_VAR 0 1
5901: PUSH
5902: LD_EXP 24
5906: EQUAL
5907: IFFALSE 5926
5909: PUSH
5910: LD_VAR 0 2
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: LD_INT 6
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: IN
5925: AND
5926: IFFALSE 5957
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5928: LD_ADDR_EXP 8
5932: PUSH
5933: LD_VAR 0 1
5937: PPUSH
5938: CALL_OW 250
5942: PUSH
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 251
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: ST_TO_ADDR
// end ;
5957: PPOPN 3
5959: END
// every 0 0$1 trigger activeInvincible do var i ;
5960: LD_EXP 17
5964: IFFALSE 6033
5966: GO 5968
5968: DISABLE
5969: LD_INT 0
5971: PPUSH
// begin enable ;
5972: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
5973: LD_ADDR_VAR 0 1
5977: PUSH
5978: LD_INT 22
5980: PUSH
5981: LD_INT 2
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 3
5990: PUSH
5991: LD_INT 24
5993: PUSH
5994: LD_INT 1000
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PPUSH
6009: CALL_OW 69
6013: PUSH
6014: FOR_IN
6015: IFFALSE 6031
// SetLives ( i , 1000 ) ;
6017: LD_VAR 0 1
6021: PPUSH
6022: LD_INT 1000
6024: PPUSH
6025: CALL_OW 234
6029: GO 6014
6031: POP
6032: POP
// end ; end_of_file
6033: PPOPN 1
6035: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
6036: LD_INT 0
6038: PPUSH
6039: PPUSH
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
// Video ( true ) ;
6045: LD_INT 1
6047: PPUSH
6048: CALL 71585 0 1
// ChangeSideFog ( 5 , 2 ) ;
6052: LD_INT 5
6054: PPUSH
6055: LD_INT 2
6057: PPUSH
6058: CALL_OW 343
// music_nat := 4 ;
6062: LD_ADDR_OWVAR 71
6066: PUSH
6067: LD_INT 4
6069: ST_TO_ADDR
// music_class := music_combat ;
6070: LD_ADDR_OWVAR 72
6074: PUSH
6075: LD_INT 1
6077: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
6078: LD_INT 133
6080: PPUSH
6081: LD_INT 2
6083: PPUSH
6084: LD_INT 2
6086: PPUSH
6087: LD_INT 10
6089: PPUSH
6090: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
6094: LD_INT 133
6096: PPUSH
6097: LD_INT 2
6099: PPUSH
6100: CALL_OW 86
// wait ( 0 0$1 ) ;
6104: LD_INT 35
6106: PPUSH
6107: CALL_OW 67
// uc_side := 6 ;
6111: LD_ADDR_OWVAR 20
6115: PUSH
6116: LD_INT 6
6118: ST_TO_ADDR
// uc_nation := 3 ;
6119: LD_ADDR_OWVAR 21
6123: PUSH
6124: LD_INT 3
6126: ST_TO_ADDR
// rutmp := [ ] ;
6127: LD_ADDR_VAR 0 7
6131: PUSH
6132: EMPTY
6133: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
6134: LD_INT 6
6136: PPUSH
6137: LD_INT 3
6139: PPUSH
6140: LD_INT 21
6142: PPUSH
6143: LD_INT 1
6145: PPUSH
6146: LD_INT 1
6148: PPUSH
6149: LD_INT 44
6151: PPUSH
6152: LD_INT 66
6154: PPUSH
6155: CALL 344 0 7
// veh := CreateVehicle ;
6159: LD_ADDR_VAR 0 5
6163: PUSH
6164: CALL_OW 45
6168: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6169: LD_VAR 0 5
6173: PPUSH
6174: LD_INT 3
6176: PPUSH
6177: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6181: LD_VAR 0 5
6185: PPUSH
6186: LD_INT 8
6188: PPUSH
6189: LD_INT 0
6191: PPUSH
6192: CALL_OW 49
// SetLives ( veh , 500 ) ;
6196: LD_VAR 0 5
6200: PPUSH
6201: LD_INT 500
6203: PPUSH
6204: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6208: LD_INT 0
6210: PPUSH
6211: LD_INT 3
6213: PPUSH
6214: LD_INT 3
6216: PPUSH
6217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6221: CALL_OW 44
6225: PPUSH
6226: LD_VAR 0 5
6230: PPUSH
6231: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6235: LD_VAR 0 5
6239: PPUSH
6240: LD_INT 133
6242: PPUSH
6243: LD_INT 11
6245: PPUSH
6246: CALL_OW 111
// rutmp := [ veh ] ;
6250: LD_ADDR_VAR 0 7
6254: PUSH
6255: LD_VAR 0 5
6259: PUSH
6260: EMPTY
6261: LIST
6262: ST_TO_ADDR
// for i := 1 to 4 do
6263: LD_ADDR_VAR 0 2
6267: PUSH
6268: DOUBLE
6269: LD_INT 1
6271: DEC
6272: ST_TO_ADDR
6273: LD_INT 4
6275: PUSH
6276: FOR_TO
6277: IFFALSE 6384
// begin PrepareHuman ( false , i , 2 ) ;
6279: LD_INT 0
6281: PPUSH
6282: LD_VAR 0 2
6286: PPUSH
6287: LD_INT 2
6289: PPUSH
6290: CALL_OW 380
// un := CreateHuman ;
6294: LD_ADDR_VAR 0 4
6298: PUSH
6299: CALL_OW 44
6303: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6304: LD_VAR 0 4
6308: PPUSH
6309: LD_INT 3
6311: PPUSH
6312: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6316: LD_VAR 0 4
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6331: LD_ADDR_VAR 0 7
6335: PUSH
6336: LD_VAR 0 7
6340: PPUSH
6341: LD_VAR 0 7
6345: PUSH
6346: LD_INT 1
6348: PLUS
6349: PPUSH
6350: LD_VAR 0 4
6354: PPUSH
6355: CALL_OW 1
6359: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6360: LD_VAR 0 4
6364: PPUSH
6365: LD_INT 133
6367: PPUSH
6368: LD_INT 11
6370: PPUSH
6371: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6375: LD_INT 18
6377: PPUSH
6378: CALL_OW 67
// end ;
6382: GO 6276
6384: POP
6385: POP
// for i in rutmp do
6386: LD_ADDR_VAR 0 2
6390: PUSH
6391: LD_VAR 0 7
6395: PUSH
6396: FOR_IN
6397: IFFALSE 6446
// begin AddComMoveXY ( i , 99 , 65 ) ;
6399: LD_VAR 0 2
6403: PPUSH
6404: LD_INT 99
6406: PPUSH
6407: LD_INT 65
6409: PPUSH
6410: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6414: LD_VAR 0 2
6418: PPUSH
6419: LD_INT 76
6421: PPUSH
6422: LD_INT 108
6424: PPUSH
6425: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6429: LD_VAR 0 2
6433: PPUSH
6434: LD_INT 92
6436: PPUSH
6437: LD_INT 176
6439: PPUSH
6440: CALL_OW 171
// end ;
6444: GO 6396
6446: POP
6447: POP
// wait ( 0 0$10 ) ;
6448: LD_INT 350
6450: PPUSH
6451: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6455: LD_ADDR_VAR 0 6
6459: PUSH
6460: LD_EXP 19
6464: PUSH
6465: LD_EXP 20
6469: PUSH
6470: LD_EXP 21
6474: PUSH
6475: LD_EXP 22
6479: PUSH
6480: LD_EXP 23
6484: PUSH
6485: LD_EXP 24
6489: PUSH
6490: LD_EXP 25
6494: PUSH
6495: LD_EXP 26
6499: PUSH
6500: LD_EXP 28
6504: PUSH
6505: LD_EXP 29
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: PUSH
6522: LD_EXP 30
6526: UNION
6527: ST_TO_ADDR
// tmp := tmp diff 0 ;
6528: LD_ADDR_VAR 0 6
6532: PUSH
6533: LD_VAR 0 6
6537: PUSH
6538: LD_INT 0
6540: DIFF
6541: ST_TO_ADDR
// for i in heikeVehicles do
6542: LD_ADDR_VAR 0 2
6546: PUSH
6547: LD_EXP 31
6551: PUSH
6552: FOR_IN
6553: IFFALSE 6972
// begin if not tmp then
6555: LD_VAR 0 6
6559: NOT
6560: IFFALSE 6564
// continue ;
6562: GO 6552
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6564: LD_INT 2
6566: PPUSH
6567: LD_VAR 0 2
6571: PUSH
6572: LD_INT 5
6574: ARRAY
6575: PPUSH
6576: LD_VAR 0 2
6580: PUSH
6581: LD_INT 1
6583: ARRAY
6584: PPUSH
6585: LD_VAR 0 2
6589: PUSH
6590: LD_INT 2
6592: ARRAY
6593: PPUSH
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 3
6601: ARRAY
6602: PPUSH
6603: LD_VAR 0 2
6607: PUSH
6608: LD_INT 4
6610: ARRAY
6611: PPUSH
6612: LD_INT 34
6614: PPUSH
6615: CALL 344 0 7
// veh := CreateVehicle ;
6619: LD_ADDR_VAR 0 5
6623: PUSH
6624: CALL_OW 45
6628: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6629: LD_VAR 0 2
6633: PUSH
6634: LD_INT 4
6636: ARRAY
6637: PUSH
6638: LD_INT 51
6640: PUSH
6641: LD_INT 32
6643: PUSH
6644: LD_INT 12
6646: PUSH
6647: LD_INT 89
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: IN
6656: IFFALSE 6736
// begin if i [ 7 ] [ 1 ] then
6658: LD_VAR 0 2
6662: PUSH
6663: LD_INT 7
6665: ARRAY
6666: PUSH
6667: LD_INT 1
6669: ARRAY
6670: IFFALSE 6697
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6672: LD_VAR 0 5
6676: PPUSH
6677: LD_INT 1
6679: PPUSH
6680: LD_VAR 0 2
6684: PUSH
6685: LD_INT 7
6687: ARRAY
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6697: LD_VAR 0 2
6701: PUSH
6702: LD_INT 7
6704: ARRAY
6705: PUSH
6706: LD_INT 2
6708: ARRAY
6709: IFFALSE 6736
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6711: LD_VAR 0 5
6715: PPUSH
6716: LD_INT 2
6718: PPUSH
6719: LD_VAR 0 2
6723: PUSH
6724: LD_INT 7
6726: ARRAY
6727: PUSH
6728: LD_INT 2
6730: ARRAY
6731: PPUSH
6732: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6736: LD_VAR 0 5
6740: PPUSH
6741: LD_INT 3
6743: PPUSH
6744: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6748: LD_VAR 0 5
6752: PPUSH
6753: LD_INT 8
6755: PPUSH
6756: LD_INT 0
6758: PPUSH
6759: CALL_OW 49
// for j := 1 to tmp do
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: DOUBLE
6769: LD_INT 1
6771: DEC
6772: ST_TO_ADDR
6773: LD_VAR 0 6
6777: PUSH
6778: FOR_TO
6779: IFFALSE 6852
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6781: LD_VAR 0 2
6785: PUSH
6786: LD_INT 8
6788: ARRAY
6789: PUSH
6790: LD_VAR 0 6
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 257
6805: EQUAL
6806: IFFALSE 6850
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6808: LD_VAR 0 6
6812: PUSH
6813: LD_VAR 0 3
6817: ARRAY
6818: PPUSH
6819: LD_VAR 0 5
6823: PPUSH
6824: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6828: LD_ADDR_VAR 0 6
6832: PUSH
6833: LD_VAR 0 6
6837: PPUSH
6838: LD_VAR 0 3
6842: PPUSH
6843: CALL_OW 3
6847: ST_TO_ADDR
// break ;
6848: GO 6852
// end ; end ;
6850: GO 6778
6852: POP
6853: POP
// if IsEmpty ( veh ) then
6854: LD_VAR 0 5
6858: PPUSH
6859: CALL 35659 0 1
6863: IFFALSE 6901
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6865: LD_VAR 0 6
6869: PUSH
6870: LD_INT 1
6872: ARRAY
6873: PPUSH
6874: LD_VAR 0 5
6878: PPUSH
6879: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6883: LD_ADDR_VAR 0 6
6887: PUSH
6888: LD_VAR 0 6
6892: PPUSH
6893: LD_INT 1
6895: PPUSH
6896: CALL_OW 3
6900: ST_TO_ADDR
// end ; if GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6901: LD_VAR 0 5
6905: PPUSH
6906: CALL_OW 264
6910: PUSH
6911: LD_INT 51
6913: PUSH
6914: LD_INT 32
6916: PUSH
6917: LD_INT 12
6919: PUSH
6920: LD_INT 89
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: IN
6929: IFFALSE 6948
// ComMoveXY ( veh , 130 , 8 ) else
6931: LD_VAR 0 5
6935: PPUSH
6936: LD_INT 130
6938: PPUSH
6939: LD_INT 8
6941: PPUSH
6942: CALL_OW 111
6946: GO 6963
// ComMoveXY ( veh , 134 , 15 ) ;
6948: LD_VAR 0 5
6952: PPUSH
6953: LD_INT 134
6955: PPUSH
6956: LD_INT 15
6958: PPUSH
6959: CALL_OW 111
// wait ( 0 0$3 ) ;
6963: LD_INT 105
6965: PPUSH
6966: CALL_OW 67
// end ;
6970: GO 6552
6972: POP
6973: POP
// if tmp then
6974: LD_VAR 0 6
6978: IFFALSE 7034
// for i in tmp do
6980: LD_ADDR_VAR 0 2
6984: PUSH
6985: LD_VAR 0 6
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7032
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6993: LD_VAR 0 2
6997: PPUSH
6998: LD_INT 10
7000: PPUSH
7001: LD_INT 0
7003: PPUSH
7004: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
7008: LD_VAR 0 2
7012: PPUSH
7013: LD_INT 146
7015: PPUSH
7016: LD_INT 7
7018: PPUSH
7019: CALL_OW 114
// wait ( 0 0$0.5 ) ;
7023: LD_INT 18
7025: PPUSH
7026: CALL_OW 67
// end ;
7030: GO 6990
7032: POP
7033: POP
// if heikeApes then
7034: LD_EXP 32
7038: IFFALSE 7094
// for i in heikeApes do
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_EXP 32
7049: PUSH
7050: FOR_IN
7051: IFFALSE 7092
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
7053: LD_VAR 0 2
7057: PPUSH
7058: LD_INT 10
7060: PPUSH
7061: LD_INT 0
7063: PPUSH
7064: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
7068: LD_VAR 0 2
7072: PPUSH
7073: LD_INT 146
7075: PPUSH
7076: LD_INT 7
7078: PPUSH
7079: CALL_OW 114
// wait ( 0 0$0.5 ) ;
7083: LD_INT 18
7085: PPUSH
7086: CALL_OW 67
// end ;
7090: GO 7050
7092: POP
7093: POP
// DialogueOn ;
7094: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
7098: LD_EXP 19
7102: PPUSH
7103: LD_STRING DH-outpost-a-1
7105: PPUSH
7106: CALL_OW 88
// DialogueOff ;
7110: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
7114: LD_INT 133
7116: PPUSH
7117: LD_INT 2
7119: PPUSH
7120: LD_INT 2
7122: PPUSH
7123: CALL_OW 331
// activeInvincible := false ;
7127: LD_ADDR_EXP 17
7131: PUSH
7132: LD_INT 0
7134: ST_TO_ADDR
// Video ( false ) ;
7135: LD_INT 0
7137: PPUSH
7138: CALL 71585 0 1
// music_nat := 0 ;
7142: LD_ADDR_OWVAR 71
7146: PUSH
7147: LD_INT 0
7149: ST_TO_ADDR
// music_class := 0 ;
7150: LD_ADDR_OWVAR 72
7154: PUSH
7155: LD_INT 0
7157: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
7158: LD_STRING Outposts
7160: PPUSH
7161: CALL_OW 337
// SaveForQuickRestart ;
7165: CALL_OW 22
// end ;
7169: LD_VAR 0 1
7173: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
7174: LD_INT 22
7176: PUSH
7177: LD_INT 2
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 91
7186: PUSH
7187: LD_EXP 22
7191: PUSH
7192: LD_INT 20
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 69
7208: IFFALSE 7216
7210: PUSH
7211: LD_EXP 3
7215: AND
7216: IFFALSE 7229
7218: PUSH
7219: LD_EXP 22
7223: PPUSH
7224: CALL_OW 302
7228: AND
7229: IFFALSE 7480
7231: GO 7233
7233: DISABLE
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
7239: PPUSH
// begin IbrahimBetrayal ;
7240: CALL 7483 0 0
// repeat wait ( 0 0$1 ) ;
7244: LD_INT 35
7246: PPUSH
7247: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7251: LD_EXP 22
7255: PPUSH
7256: CALL_OW 301
7260: IFTRUE 7311
7262: PUSH
7263: LD_INT 22
7265: PUSH
7266: LD_INT 2
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 91
7275: PUSH
7276: LD_EXP 22
7280: PUSH
7281: LD_INT 6
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PPUSH
7293: CALL_OW 69
7297: IFFALSE 7310
7299: PUSH
7300: LD_EXP 22
7304: PPUSH
7305: CALL_OW 302
7309: AND
7310: OR
7311: IFFALSE 7244
// if IsDead ( Ibrahim ) then
7313: LD_EXP 22
7317: PPUSH
7318: CALL_OW 301
7322: IFFALSE 7326
// exit ;
7324: GO 7480
// x := GetX ( Ibrahim ) ;
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: LD_EXP 22
7335: PPUSH
7336: CALL_OW 250
7340: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_EXP 22
7350: PPUSH
7351: CALL_OW 251
7355: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: LD_EXP 22
7365: PPUSH
7366: CALL_OW 254
7370: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7371: LD_ADDR_VAR 0 4
7375: PUSH
7376: LD_EXP 22
7380: PPUSH
7381: CALL_OW 256
7385: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7386: LD_EXP 22
7390: PPUSH
7391: CALL_OW 64
// uc_side := 2 ;
7395: LD_ADDR_OWVAR 20
7399: PUSH
7400: LD_INT 2
7402: ST_TO_ADDR
// uc_nation := 2 ;
7403: LD_ADDR_OWVAR 21
7407: PUSH
7408: LD_INT 2
7410: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7411: LD_ADDR_EXP 22
7415: PUSH
7416: LD_STRING Ibrahim
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: LD_STRING 
7424: PPUSH
7425: CALL 33413 0 3
7429: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7430: LD_EXP 22
7434: PPUSH
7435: LD_VAR 0 3
7439: PPUSH
7440: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7444: LD_EXP 22
7448: PPUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: LD_VAR 0 2
7458: PPUSH
7459: LD_INT 0
7461: PPUSH
7462: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7466: LD_EXP 22
7470: PPUSH
7471: LD_VAR 0 4
7475: PPUSH
7476: CALL_OW 234
// end ;
7480: PPOPN 4
7482: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7483: LD_INT 0
7485: PPUSH
7486: PPUSH
7487: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7488: LD_INT 122
7490: PPUSH
7491: LD_INT 77
7493: PPUSH
7494: LD_INT 2
7496: PPUSH
7497: LD_INT 6
7499: NEG
7500: PPUSH
7501: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7505: LD_EXP 22
7509: PPUSH
7510: LD_INT 123
7512: PPUSH
7513: LD_INT 79
7515: PPUSH
7516: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7520: LD_EXP 22
7524: PPUSH
7525: LD_INT 125
7527: PPUSH
7528: LD_INT 82
7530: PPUSH
7531: CALL_OW 178
// wait ( 0 0$2 ) ;
7535: LD_INT 70
7537: PPUSH
7538: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7542: LD_EXP 43
7546: PPUSH
7547: LD_EXP 22
7551: PPUSH
7552: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7556: LD_EXP 43
7560: PPUSH
7561: LD_STRING DRum-outpost-b-3
7563: PPUSH
7564: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7568: LD_ADDR_VAR 0 3
7572: PUSH
7573: LD_INT 125
7575: PPUSH
7576: LD_INT 76
7578: PPUSH
7579: CALL_OW 428
7583: PUSH
7584: LD_INT 125
7586: PPUSH
7587: LD_INT 79
7589: PPUSH
7590: CALL_OW 428
7594: PUSH
7595: LD_INT 125
7597: PPUSH
7598: LD_INT 82
7600: PPUSH
7601: CALL_OW 428
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: ST_TO_ADDR
// for i in tmp do
7611: LD_ADDR_VAR 0 2
7615: PUSH
7616: LD_VAR 0 3
7620: PUSH
7621: FOR_IN
7622: IFFALSE 7638
// SetLives ( i , 200 ) ;
7624: LD_VAR 0 2
7628: PPUSH
7629: LD_INT 200
7631: PPUSH
7632: CALL_OW 234
7636: GO 7621
7638: POP
7639: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7640: LD_EXP 22
7644: PPUSH
7645: LD_STRING DI-outpost-b-4
7647: PPUSH
7648: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7652: LD_EXP 22
7656: PPUSH
7657: LD_INT 5
7659: PPUSH
7660: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7664: LD_EXP 22
7668: PUSH
7669: LD_EXP 43
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7682: LD_INT 122
7684: PPUSH
7685: LD_INT 77
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 331
// if Givi then
7695: LD_EXP 20
7699: IFFALSE 7715
// Say ( Givi , DG-1-outpost-b-5 ) else
7701: LD_EXP 20
7705: PPUSH
7706: LD_STRING DG-1-outpost-b-5
7708: PPUSH
7709: CALL_OW 88
7713: GO 7780
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7715: LD_EXP 30
7719: PPUSH
7720: LD_INT 26
7722: PUSH
7723: LD_INT 2
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PPUSH
7730: CALL_OW 72
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: PPUSH
7739: LD_STRING DArf-outpost-b-a-5
7741: PPUSH
7742: CALL_OW 88
7746: NOT
7747: IFFALSE 7780
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7749: LD_EXP 30
7753: PPUSH
7754: LD_INT 26
7756: PUSH
7757: LD_INT 1
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL_OW 72
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PPUSH
7773: LD_STRING DArm-outpost-b-a-5
7775: PPUSH
7776: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7780: LD_INT 35
7782: PPUSH
7783: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7787: LD_EXP 22
7791: PPUSH
7792: CALL_OW 301
7796: IFTRUE 7831
7798: PUSH
7799: LD_EXP 19
7803: PPUSH
7804: LD_EXP 22
7808: PPUSH
7809: CALL_OW 296
7813: PUSH
7814: LD_INT 6
7816: LESS
7817: IFFALSE 7830
7819: PUSH
7820: LD_EXP 22
7824: PPUSH
7825: CALL_OW 302
7829: AND
7830: OR
7831: IFFALSE 7780
// if IsDead ( Ibrahim ) then
7833: LD_EXP 22
7837: PPUSH
7838: CALL_OW 301
7842: IFFALSE 7858
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7844: LD_EXP 19
7848: PPUSH
7849: LD_STRING DH-ibrahimdead-1
7851: PPUSH
7852: CALL_OW 88
// exit ;
7856: GO 7899
// end ; CenterNowOnUnits ( Ibrahim ) ;
7858: LD_EXP 22
7862: PPUSH
7863: CALL_OW 87
// DialogueOn ;
7867: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7871: LD_EXP 22
7875: PPUSH
7876: LD_STRING DI-ibrahimlives-1
7878: PPUSH
7879: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7883: LD_EXP 19
7887: PPUSH
7888: LD_STRING DH-Ibrahimlives-2
7890: PPUSH
7891: CALL_OW 88
// DialogueOff ;
7895: CALL_OW 7
// end ;
7899: LD_VAR 0 1
7903: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7904: LD_INT 11
7906: PPUSH
7907: LD_INT 22
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PPUSH
7917: CALL_OW 70
7921: IFTRUE 7954
7923: PUSH
7924: LD_OWVAR 1
7928: PUSH
7929: LD_INT 18900
7931: PUSH
7932: LD_INT 16800
7934: PUSH
7935: LD_INT 16800
7937: PUSH
7938: LD_INT 15750
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: PUSH
7947: LD_OWVAR 67
7951: ARRAY
7952: GREATEREQUAL
7953: OR
7954: IFFALSE 8464
7956: GO 7958
7958: DISABLE
// begin outerAreaAchived := true ;
7959: LD_ADDR_EXP 15
7963: PUSH
7964: LD_INT 1
7966: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7967: LD_INT 700
7969: PPUSH
7970: CALL_OW 67
// DialogueOn ;
7974: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7978: LD_EXP 27
7982: PPUSH
7983: LD_STRING DShar-radio-1
7985: PPUSH
7986: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7990: LD_EXP 27
7994: PPUSH
7995: LD_STRING DShar-radio-2
7997: PPUSH
7998: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
8002: LD_EXP 19
8006: PPUSH
8007: LD_STRING DH-radio-2
8009: PPUSH
8010: CALL_OW 88
// DialogueOff ;
8014: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
8018: LD_STRING Gaidar
8020: PPUSH
8021: CALL_OW 337
// if Difficulty < 3 then
8025: LD_OWVAR 67
8029: PUSH
8030: LD_INT 3
8032: LESS
8033: IFFALSE 8099
// begin DialogueOn ;
8035: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8039: LD_INT 11
8041: PPUSH
8042: LD_INT 14
8044: PPUSH
8045: LD_INT 2
8047: PPUSH
8048: LD_INT 6
8050: NEG
8051: PPUSH
8052: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
8056: LD_INT 11
8058: PPUSH
8059: LD_INT 14
8061: PPUSH
8062: LD_INT 2
8064: PPUSH
8065: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
8069: LD_INT 11
8071: PPUSH
8072: LD_INT 14
8074: PPUSH
8075: CALL_OW 84
// dwait ( 0 0$1 ) ;
8079: LD_INT 35
8081: PPUSH
8082: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8086: LD_EXP 19
8090: PPUSH
8091: CALL_OW 87
// DialogueOff ;
8095: CALL_OW 7
// end ; wait ( 1 1$20 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
8099: LD_INT 2800
8101: PUSH
8102: LD_INT 350
8104: PPUSH
8105: LD_INT 525
8107: PPUSH
8108: CALL_OW 12
8112: PUSH
8113: LD_OWVAR 67
8117: MUL
8118: PLUS
8119: PPUSH
8120: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8124: LD_INT 35
8126: PPUSH
8127: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
8131: LD_INT 2
8133: PPUSH
8134: LD_INT 1
8136: PPUSH
8137: CALL_OW 428
8141: PUSH
8142: LD_INT 0
8144: EQUAL
8145: IFFALSE 8124
// SetDir ( Gaidar , 2 ) ;
8147: LD_EXP 36
8151: PPUSH
8152: LD_INT 2
8154: PPUSH
8155: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
8159: LD_EXP 36
8163: PPUSH
8164: LD_INT 2
8166: PPUSH
8167: LD_INT 1
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
8177: LD_EXP 36
8181: PPUSH
8182: LD_INT 19
8184: PPUSH
8185: LD_INT 24
8187: PPUSH
8188: CALL_OW 111
// if Difficulty < 3 then
8192: LD_OWVAR 67
8196: PUSH
8197: LD_INT 3
8199: LESS
8200: IFFALSE 8239
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8202: LD_INT 11
8204: PPUSH
8205: LD_INT 14
8207: PPUSH
8208: LD_INT 2
8210: PPUSH
8211: LD_INT 6
8213: NEG
8214: PPUSH
8215: CALL_OW 330
// wait ( 0 0$2 ) ;
8219: LD_INT 70
8221: PPUSH
8222: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
8226: LD_INT 11
8228: PPUSH
8229: LD_INT 14
8231: PPUSH
8232: LD_INT 2
8234: PPUSH
8235: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
8239: LD_EXP 36
8243: PPUSH
8244: LD_INT 210
8246: PPUSH
8247: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8251: LD_EXP 36
8255: PPUSH
8256: LD_INT 38
8258: PPUSH
8259: LD_INT 47
8261: PPUSH
8262: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8266: LD_EXP 36
8270: PPUSH
8271: LD_INT 32
8273: PPUSH
8274: LD_INT 59
8276: PPUSH
8277: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8281: LD_EXP 36
8285: PPUSH
8286: LD_INT 350
8288: PPUSH
8289: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8293: LD_EXP 36
8297: PPUSH
8298: LD_INT 62
8300: PPUSH
8301: LD_INT 116
8303: PPUSH
8304: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8308: LD_EXP 36
8312: PPUSH
8313: LD_INT 92
8315: PPUSH
8316: LD_INT 177
8318: PPUSH
8319: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8323: LD_INT 35
8325: PPUSH
8326: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8330: LD_EXP 36
8334: PPUSH
8335: CALL_OW 301
8339: IFTRUE 8358
8341: PUSH
8342: LD_EXP 36
8346: PPUSH
8347: LD_INT 92
8349: PPUSH
8350: LD_INT 177
8352: PPUSH
8353: CALL_OW 307
8357: OR
8358: IFFALSE 8323
// if IsAt ( Gaidar , 92 , 177 ) then
8360: LD_EXP 36
8364: PPUSH
8365: LD_INT 92
8367: PPUSH
8368: LD_INT 177
8370: PPUSH
8371: CALL_OW 307
8375: IFFALSE 8442
// begin DialogueOn ;
8377: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8381: LD_INT 92
8383: PPUSH
8384: LD_INT 177
8386: PPUSH
8387: LD_INT 2
8389: PPUSH
8390: LD_INT 3
8392: NEG
8393: PPUSH
8394: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8398: LD_EXP 36
8402: PPUSH
8403: CALL_OW 87
// dwait ( 0 0$2 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8414: LD_INT 92
8416: PPUSH
8417: LD_INT 177
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: CALL_OW 331
// DialogueOff ;
8427: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8431: LD_EXP 36
8435: PPUSH
8436: CALL_OW 64
// exit ;
8440: GO 8464
// end ; gaidarKilled := true ;
8442: LD_ADDR_EXP 14
8446: PUSH
8447: LD_INT 1
8449: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8450: LD_STRING GaidarKilled
8452: PPUSH
8453: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8457: LD_STRING ACH_COMMISAR
8459: PPUSH
8460: CALL_OW 543
// end ;
8464: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8465: LD_INT 2
8467: PPUSH
8468: LD_EXP 36
8472: PPUSH
8473: CALL_OW 292
8477: IFFALSE 8494
8479: GO 8481
8481: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8482: LD_EXP 36
8486: PPUSH
8487: LD_STRING DT-objective-1
8489: PPUSH
8490: CALL_OW 88
8494: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8495: LD_INT 22
8497: PUSH
8498: LD_INT 2
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: LD_INT 2
8507: PUSH
8508: LD_INT 95
8510: PUSH
8511: LD_INT 5
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 95
8520: PUSH
8521: LD_INT 6
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 95
8530: PUSH
8531: LD_INT 7
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PPUSH
8548: CALL_OW 69
8552: IFFALSE 8589
8554: GO 8556
8556: DISABLE
// begin DialogueOn ;
8557: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8561: LD_EXP 19
8565: PPUSH
8566: LD_STRING DH-outpost-last-1
8568: PPUSH
8569: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8573: LD_EXP 35
8577: PPUSH
8578: LD_STRING DB-outpost-last-2
8580: PPUSH
8581: CALL_OW 94
// DialogueOff ;
8585: CALL_OW 7
// end ;
8589: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8590: LD_INT 200
8592: PPUSH
8593: CALL_OW 256
8597: PUSH
8598: LD_INT 999
8600: LESS
8601: IFTRUE 8616
8603: PUSH
8604: LD_INT 200
8606: PPUSH
8607: CALL_OW 255
8611: PUSH
8612: LD_INT 2
8614: EQUAL
8615: OR
8616: IFFALSE 8789
8618: GO 8620
8620: DISABLE
8621: LD_INT 0
8623: PPUSH
8624: PPUSH
// begin if not earlyEscape then
8625: LD_EXP 16
8629: NOT
8630: IFFALSE 8656
// begin SayRadio ( Burlak , DB-end-1 ) ;
8632: LD_EXP 35
8636: PPUSH
8637: LD_STRING DB-end-1
8639: PPUSH
8640: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8644: LD_EXP 19
8648: PPUSH
8649: LD_STRING DH-end-2
8651: PPUSH
8652: CALL_OW 88
// end ; if tick <= 15 15$00 then
8656: LD_OWVAR 1
8660: PUSH
8661: LD_INT 31500
8663: LESSEQUAL
8664: IFFALSE 8673
// SetAchievement ( ACH_FIST ) ;
8666: LD_STRING ACH_FIST
8668: PPUSH
8669: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8673: LD_ADDR_VAR 0 2
8677: PUSH
8678: LD_INT 22
8680: PUSH
8681: LD_INT 3
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 3
8690: PUSH
8691: LD_INT 21
8693: PUSH
8694: LD_INT 3
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 69
8713: ST_TO_ADDR
// if not tmp then
8714: LD_VAR 0 2
8718: NOT
8719: IFFALSE 8723
// exit ;
8721: GO 8789
// for i in tmp do
8723: LD_ADDR_VAR 0 1
8727: PUSH
8728: LD_VAR 0 2
8732: PUSH
8733: FOR_IN
8734: IFFALSE 8787
// begin SetTag ( i , tEscape ) ;
8736: LD_VAR 0 1
8740: PPUSH
8741: LD_EXP 18
8745: PPUSH
8746: CALL_OW 109
// if IsInUnit ( i ) then
8750: LD_VAR 0 1
8754: PPUSH
8755: CALL_OW 310
8759: IFFALSE 8770
// ComExitBuilding ( i ) ;
8761: LD_VAR 0 1
8765: PPUSH
8766: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_INT 92
8777: PPUSH
8778: LD_INT 177
8780: PPUSH
8781: CALL_OW 171
// end ;
8785: GO 8733
8787: POP
8788: POP
// end ;
8789: PPOPN 2
8791: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8792: LD_INT 4
8794: PPUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 70
8809: IFFALSE 8818
8811: PUSH
8812: LD_EXP 15
8816: NOT
8817: AND
8818: IFFALSE 8831
8820: PUSH
8821: LD_EXP 28
8825: PPUSH
8826: CALL_OW 302
8830: AND
8831: IFFALSE 9073
8833: GO 8835
8835: DISABLE
// begin DialogueOn ;
8836: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8840: LD_INT 111
8842: PPUSH
8843: LD_INT 54
8845: PPUSH
8846: LD_INT 2
8848: PPUSH
8849: LD_INT 16
8851: NEG
8852: PPUSH
8853: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8857: LD_INT 111
8859: PPUSH
8860: LD_INT 53
8862: PPUSH
8863: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8867: LD_INT 10
8869: PPUSH
8870: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8874: LD_EXP 28
8878: PPUSH
8879: LD_STRING DKs-Hannibal-1
8881: PPUSH
8882: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8886: LD_EXP 28
8890: PPUSH
8891: LD_STRING DKs-Hannibal-2
8893: PPUSH
8894: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8898: LD_EXP 28
8902: PPUSH
8903: LD_STRING DKs-Hannibal-3
8905: PPUSH
8906: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8910: LD_EXP 28
8914: PPUSH
8915: LD_STRING DKs-Hannibal-4
8917: PPUSH
8918: CALL_OW 88
// dwait ( 0 0$1 ) ;
8922: LD_INT 35
8924: PPUSH
8925: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8929: LD_INT 111
8931: PPUSH
8932: LD_INT 54
8934: PPUSH
8935: LD_INT 2
8937: PPUSH
8938: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8942: LD_INT 173
8944: PPUSH
8945: LD_INT 76
8947: PPUSH
8948: LD_INT 2
8950: PPUSH
8951: LD_INT 12
8953: NEG
8954: PPUSH
8955: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8959: LD_INT 173
8961: PPUSH
8962: LD_INT 76
8964: PPUSH
8965: LD_INT 2
8967: PPUSH
8968: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8972: LD_INT 173
8974: PPUSH
8975: LD_INT 76
8977: PPUSH
8978: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8982: LD_EXP 28
8986: PPUSH
8987: LD_STRING DKs-Hannibal-5
8989: PPUSH
8990: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8994: LD_EXP 23
8998: IFFALSE 9031
9000: PUSH
9001: LD_INT 22
9003: PUSH
9004: LD_INT 2
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 34
9013: PUSH
9014: LD_INT 26
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 69
9029: NOT
9030: AND
9031: IFFALSE 9069
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
9033: LD_EXP 23
9037: PPUSH
9038: LD_STRING DKam-Hannibal-a-6
9040: PPUSH
9041: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
9045: LD_EXP 23
9049: PPUSH
9050: LD_STRING DKam-Hannibal-a-7
9052: PPUSH
9053: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
9057: LD_EXP 20
9061: PPUSH
9062: LD_STRING DG-Hannibal-a-8
9064: PPUSH
9065: CALL_OW 88
// end ; DialogueOff ;
9069: CALL_OW 7
// end ;
9073: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
9074: LD_INT 225
9076: PPUSH
9077: CALL_OW 302
9081: IFFALSE 9092
9083: PUSH
9084: LD_INT 200
9086: PPUSH
9087: CALL_OW 302
9091: AND
9092: IFFALSE 9117
9094: PUSH
9095: LD_INT 12
9097: PPUSH
9098: LD_INT 21
9100: PUSH
9101: LD_INT 3
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 70
9112: PUSH
9113: LD_INT 2
9115: GREATER
9116: AND
9117: IFFALSE 9142
9119: PUSH
9120: LD_INT 13
9122: PPUSH
9123: LD_INT 22
9125: PUSH
9126: LD_INT 2
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PPUSH
9133: CALL_OW 70
9137: PUSH
9138: LD_INT 3
9140: GREATER
9141: AND
9142: IFFALSE 9155
9144: GO 9146
9146: DISABLE
// hannibalPath := true ;
9147: LD_ADDR_EXP 9
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
9155: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
9156: LD_EXP 9
9160: IFFALSE 9181
9162: PUSH
9163: LD_INT 6
9165: PPUSH
9166: LD_INT 22
9168: PUSH
9169: LD_INT 2
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL_OW 70
9180: AND
9181: IFFALSE 9526
9183: GO 9185
9185: DISABLE
9186: LD_INT 0
9188: PPUSH
9189: PPUSH
9190: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
9191: LD_ADDR_VAR 0 2
9195: PUSH
9196: LD_INT 6
9198: PPUSH
9199: LD_INT 22
9201: PUSH
9202: LD_INT 2
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PPUSH
9209: CALL_OW 70
9213: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
9214: LD_ADDR_VAR 0 3
9218: PUSH
9219: LD_VAR 0 2
9223: PPUSH
9224: LD_INT 34
9226: PUSH
9227: LD_INT 26
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 72
9238: PUSH
9239: LD_INT 0
9241: GREATER
9242: ST_TO_ADDR
// DialogueOn ;
9243: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
9247: LD_EXP 19
9251: PPUSH
9252: LD_STRING DH-Cleverattack-1
9254: PPUSH
9255: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
9259: LD_EXP 19
9263: PPUSH
9264: LD_STRING DH-Cleverattack-2
9266: PPUSH
9267: CALL_OW 88
// if hasFlameThrower then
9271: LD_VAR 0 3
9275: IFFALSE 9303
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9277: LD_EXP 35
9281: PPUSH
9282: LD_STRING DB-Cleverattack-3
9284: PPUSH
9285: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9289: LD_EXP 19
9293: PPUSH
9294: LD_STRING DH-Cleverattack-4
9296: PPUSH
9297: CALL_OW 88
// end else
9301: GO 9327
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9303: LD_EXP 35
9307: PPUSH
9308: LD_STRING DB-Cleverattack-a-3
9310: PPUSH
9311: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9315: LD_EXP 19
9319: PPUSH
9320: LD_STRING DH-Cleverattack-a-4
9322: PPUSH
9323: CALL_OW 88
// end ; DialogueOff ;
9327: CALL_OW 7
// if not hasFlameThrower then
9331: LD_VAR 0 3
9335: NOT
9336: IFFALSE 9340
// exit ;
9338: GO 9526
// earlyEscape := true ;
9340: LD_ADDR_EXP 16
9344: PUSH
9345: LD_INT 1
9347: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9348: LD_INT 140
9350: PPUSH
9351: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_INT 3
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 2
9372: PUSH
9373: LD_INT 25
9375: PUSH
9376: LD_INT 1
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PUSH
9383: LD_INT 25
9385: PUSH
9386: LD_INT 2
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PUSH
9393: LD_INT 25
9395: PUSH
9396: LD_INT 4
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 69
9417: PUSH
9418: LD_EXP 22
9422: PUSH
9423: LD_EXP 37
9427: PUSH
9428: LD_EXP 36
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: DIFF
9438: ST_TO_ADDR
// for i in tmp do
9439: LD_ADDR_VAR 0 1
9443: PUSH
9444: LD_VAR 0 2
9448: PUSH
9449: FOR_IN
9450: IFFALSE 9524
// begin if Prob ( 40 + 10 * Difficulty ) then
9452: LD_INT 40
9454: PUSH
9455: LD_INT 10
9457: PUSH
9458: LD_OWVAR 67
9462: MUL
9463: PLUS
9464: PPUSH
9465: CALL_OW 13
9469: IFFALSE 9473
// continue ;
9471: GO 9449
// SetTag ( i , tEscape ) ;
9473: LD_VAR 0 1
9477: PPUSH
9478: LD_EXP 18
9482: PPUSH
9483: CALL_OW 109
// if IsInUnit ( i ) then
9487: LD_VAR 0 1
9491: PPUSH
9492: CALL_OW 310
9496: IFFALSE 9507
// ComExitBuilding ( i ) ;
9498: LD_VAR 0 1
9502: PPUSH
9503: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9507: LD_VAR 0 1
9511: PPUSH
9512: LD_INT 92
9514: PPUSH
9515: LD_INT 177
9517: PPUSH
9518: CALL_OW 171
// end ;
9522: GO 9449
9524: POP
9525: POP
// end ;
9526: PPOPN 3
9528: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9529: LD_INT 9
9531: PPUSH
9532: LD_INT 2
9534: PUSH
9535: LD_INT 22
9537: PUSH
9538: LD_INT 3
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 22
9547: PUSH
9548: LD_INT 6
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 70
9564: IFFALSE 9664
9566: GO 9568
9568: DISABLE
9569: LD_INT 0
9571: PPUSH
// begin enable ;
9572: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9573: LD_ADDR_VAR 0 1
9577: PUSH
9578: LD_INT 9
9580: PPUSH
9581: LD_INT 2
9583: PUSH
9584: LD_INT 22
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 22
9596: PUSH
9597: LD_INT 6
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: PPUSH
9609: CALL_OW 70
9613: PUSH
9614: FOR_IN
9615: IFFALSE 9662
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL_OW 110
9626: PUSH
9627: LD_EXP 18
9631: EQUAL
9632: IFTRUE 9649
9634: PUSH
9635: LD_VAR 0 1
9639: PPUSH
9640: CALL_OW 255
9644: PUSH
9645: LD_INT 6
9647: EQUAL
9648: OR
9649: IFFALSE 9660
// RemoveUnit ( i ) ;
9651: LD_VAR 0 1
9655: PPUSH
9656: CALL_OW 64
9660: GO 9614
9662: POP
9663: POP
// end ;
9664: PPOPN 1
9666: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9667: LD_EXP 24
9671: IFFALSE 9688
9673: PUSH
9674: LD_EXP 24
9678: PPUSH
9679: CALL_OW 256
9683: PUSH
9684: LD_INT 3
9686: LESS
9687: AND
9688: IFFALSE 9734
9690: GO 9692
9692: DISABLE
// begin DialogueOn ;
9693: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9697: LD_EXP 24
9701: PPUSH
9702: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9706: LD_EXP 24
9710: PPUSH
9711: LD_STRING DK-Kkilled-1
9713: PPUSH
9714: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9718: LD_EXP 19
9722: PPUSH
9723: LD_STRING DH-Kkilled-2
9725: PPUSH
9726: CALL_OW 88
// DialogueOff ;
9730: CALL_OW 7
// end ;
9734: END
// every 0 0$1 trigger kaiaKilledByRussian do
9735: LD_EXP 8
9739: IFFALSE 9756
9741: GO 9743
9743: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9744: LD_EXP 19
9748: PPUSH
9749: LD_STRING DH-Kkilled-3
9751: PPUSH
9752: CALL_OW 88
9756: END
// every 0 0$1 trigger tick >= 24 24$00 do
9757: LD_OWVAR 1
9761: PUSH
9762: LD_INT 50400
9764: GREATEREQUAL
9765: IFFALSE 9802
9767: GO 9769
9769: DISABLE
// begin DialogueOn ;
9770: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9774: LD_EXP 27
9778: PPUSH
9779: LD_STRING DShar-slow-1
9781: PPUSH
9782: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9786: LD_EXP 27
9790: PPUSH
9791: LD_STRING DShar-slow-2
9793: PPUSH
9794: CALL_OW 94
// DialogueOff ;
9798: CALL_OW 7
// end ;
9802: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9803: LD_OWVAR 1
9807: PUSH
9808: LD_INT 84000
9810: PUSH
9811: LD_INT 75600
9813: PUSH
9814: LD_INT 67200
9816: PUSH
9817: LD_INT 63000
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: PUSH
9826: LD_OWVAR 67
9830: ARRAY
9831: GREATEREQUAL
9832: IFFALSE 9876
9834: GO 9836
9836: DISABLE
// begin DialogueOn ;
9837: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9841: LD_EXP 27
9845: PPUSH
9846: LD_STRING DShar-fail-1
9848: PPUSH
9849: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9853: LD_EXP 27
9857: PPUSH
9858: LD_STRING DShar-fail-2
9860: PPUSH
9861: CALL_OW 94
// DialogueOff ;
9865: CALL_OW 7
// YouLost ( Time ) ;
9869: LD_STRING Time
9871: PPUSH
9872: CALL_OW 104
// end ;
9876: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp , m1 , m2 , m3 ;
9877: LD_INT 22
9879: PUSH
9880: LD_INT 3
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 2
9889: PUSH
9890: LD_INT 30
9892: PUSH
9893: LD_INT 1
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 30
9902: PUSH
9903: LD_INT 0
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 69
9923: PUSH
9924: LD_INT 0
9926: EQUAL
9927: IFFALSE 10687
9929: GO 9931
9931: DISABLE
9932: LD_INT 0
9934: PPUSH
9935: PPUSH
9936: PPUSH
9937: PPUSH
// begin m1 := false ;
9938: LD_ADDR_VAR 0 2
9942: PUSH
9943: LD_INT 0
9945: ST_TO_ADDR
// m2 := false ;
9946: LD_ADDR_VAR 0 3
9950: PUSH
9951: LD_INT 0
9953: ST_TO_ADDR
// m3 := false ;
9954: LD_ADDR_VAR 0 4
9958: PUSH
9959: LD_INT 0
9961: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 5 then
9962: LD_INT 22
9964: PUSH
9965: LD_INT 2
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 23
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 21
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 50
9994: PUSH
9995: EMPTY
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: PPUSH
10004: CALL_OW 69
10008: PPUSH
10009: CALL 35637 0 1
10013: PUSH
10014: LD_INT 5
10016: LESS
10017: IFFALSE 10028
// begin YouLost ( Troops ) ;
10019: LD_STRING Troops
10021: PPUSH
10022: CALL_OW 104
// exit ;
10026: GO 10687
// end ; if ( tick + gameTime ) <= 55 55$00 then
10028: LD_OWVAR 1
10032: PUSH
10033: LD_EXP 5
10037: PLUS
10038: PUSH
10039: LD_INT 115500
10041: LESSEQUAL
10042: IFFALSE 10051
// SetAchievement ( ACH_HSPEED_4 ) ;
10044: LD_STRING ACH_HSPEED_4
10046: PPUSH
10047: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
10051: LD_OWVAR 1
10055: PUSH
10056: LD_EXP 5
10060: PLUS
10061: PUSH
10062: LD_INT 178500
10064: PUSH
10065: LD_INT 157500
10067: PUSH
10068: LD_INT 136500
10070: PUSH
10071: LD_INT 126000
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: PUSH
10080: LD_OWVAR 67
10084: ARRAY
10085: LESSEQUAL
10086: IFFALSE 10108
// begin m1 := true ;
10088: LD_ADDR_VAR 0 2
10092: PUSH
10093: LD_INT 1
10095: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
10096: LD_STRING med1
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: CALL_OW 101
// end else
10106: GO 10119
// AddMedal ( med1 , - 1 ) ;
10108: LD_STRING med1
10110: PPUSH
10111: LD_INT 1
10113: NEG
10114: PPUSH
10115: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
10119: LD_EXP 7
10123: PUSH
10124: LD_INT 3
10126: GREATEREQUAL
10127: PUSH
10128: LD_EXP 11
10132: MUL
10133: PUSH
10134: LD_EXP 9
10138: MUL
10139: PUSH
10140: LD_EXP 6
10144: PUSH
10145: LD_INT 6
10147: PUSH
10148: LD_INT 5
10150: PUSH
10151: LD_INT 4
10153: PUSH
10154: LD_INT 3
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: LD_OWVAR 67
10167: ARRAY
10168: LESS
10169: MUL
10170: IFFALSE 10192
// begin m2 := true ;
10172: LD_ADDR_VAR 0 3
10176: PUSH
10177: LD_INT 1
10179: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
10180: LD_STRING med2
10182: PPUSH
10183: LD_INT 1
10185: PPUSH
10186: CALL_OW 101
// end else
10190: GO 10266
// if flamethrowers < 3 then
10192: LD_EXP 7
10196: PUSH
10197: LD_INT 3
10199: LESS
10200: IFFALSE 10215
// AddMedal ( med2 , - 1 ) else
10202: LD_STRING med2
10204: PPUSH
10205: LD_INT 1
10207: NEG
10208: PPUSH
10209: CALL_OW 101
10213: GO 10266
// if not baseHill then
10215: LD_EXP 11
10219: NOT
10220: IFFALSE 10235
// AddMedal ( med2 , - 2 ) else
10222: LD_STRING med2
10224: PPUSH
10225: LD_INT 2
10227: NEG
10228: PPUSH
10229: CALL_OW 101
10233: GO 10266
// if not hannibalPath then
10235: LD_EXP 9
10239: NOT
10240: IFFALSE 10255
// AddMedal ( med2 , - 3 ) else
10242: LD_STRING med2
10244: PPUSH
10245: LD_INT 3
10247: NEG
10248: PPUSH
10249: CALL_OW 101
10253: GO 10266
// AddMedal ( med3 , - 2 ) ;
10255: LD_STRING med3
10257: PPUSH
10258: LD_INT 2
10260: NEG
10261: PPUSH
10262: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
10266: LD_EXP 14
10270: PPUSH
10271: LD_STRING 04_2_GaidarKilled
10273: PPUSH
10274: CALL_OW 39
// if gaidarKilled then
10278: LD_EXP 14
10282: IFFALSE 10304
// begin m3 := true ;
10284: LD_ADDR_VAR 0 4
10288: PUSH
10289: LD_INT 1
10291: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
10292: LD_STRING med3
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 101
// end else
10302: GO 10315
// AddMedal ( med3 , - 1 ) ;
10304: LD_STRING med3
10306: PPUSH
10307: LD_INT 1
10309: NEG
10310: PPUSH
10311: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
10315: LD_VAR 0 2
10319: IFFALSE 10327
10321: PUSH
10322: LD_VAR 0 3
10326: AND
10327: IFFALSE 10335
10329: PUSH
10330: LD_VAR 0 4
10334: AND
10335: IFFALSE 10347
10337: PUSH
10338: LD_OWVAR 67
10342: PUSH
10343: LD_INT 3
10345: GREATEREQUAL
10346: AND
10347: IFFALSE 10359
// SetAchievementEX ( ACH_ARES , 4 ) ;
10349: LD_STRING ACH_ARES
10351: PPUSH
10352: LD_INT 4
10354: PPUSH
10355: CALL_OW 564
// GiveMedals ( MAIN ) ;
10359: LD_STRING MAIN
10361: PPUSH
10362: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
10366: LD_INT 22
10368: PUSH
10369: LD_INT 2
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: LD_INT 23
10381: PUSH
10382: LD_INT 0
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: PPUSH
10402: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
10406: LD_EXP 19
10410: PPUSH
10411: LD_STRING 04_2_Heike
10413: PPUSH
10414: CALL_OW 38
// if Aviradze then
10418: LD_EXP 29
10422: IFFALSE 10436
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
10424: LD_EXP 29
10428: PPUSH
10429: LD_STRING 04_2_Aviradze
10431: PPUSH
10432: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10436: LD_EXP 22
10440: IFFALSE 10457
10442: PUSH
10443: LD_EXP 22
10447: PPUSH
10448: CALL_OW 255
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10487
// begin if ibrahimOnRuSide then
10459: LD_EXP 3
10463: IFFALSE 10475
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10465: LD_INT 1
10467: PPUSH
10468: LD_STRING 04_2_IbrahimJoined
10470: PPUSH
10471: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10475: LD_EXP 22
10479: PPUSH
10480: LD_STRING 04_2_Ibrahim
10482: PPUSH
10483: CALL_OW 38
// end ; if Kamil then
10487: LD_EXP 23
10491: IFFALSE 10505
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10493: LD_EXP 23
10497: PPUSH
10498: LD_STRING 04_2_Kamil
10500: PPUSH
10501: CALL_OW 38
// if Sophia then
10505: LD_EXP 25
10509: IFFALSE 10523
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10511: LD_EXP 25
10515: PPUSH
10516: LD_STRING 04_2_Sophia
10518: PPUSH
10519: CALL_OW 38
// if Kaia then
10523: LD_EXP 24
10527: IFFALSE 10541
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10529: LD_EXP 24
10533: PPUSH
10534: LD_STRING 04_2_Kaia
10536: PPUSH
10537: CALL_OW 38
// if Givi then
10541: LD_EXP 20
10545: IFFALSE 10559
// SaveCharacters ( Givi , 04_2_Givi ) ;
10547: LD_EXP 20
10551: PPUSH
10552: LD_STRING 04_2_Givi
10554: PPUSH
10555: CALL_OW 38
// if Mike then
10559: LD_EXP 21
10563: IFFALSE 10577
// SaveCharacters ( Mike , 04_2_Mike ) ;
10565: LD_EXP 21
10569: PPUSH
10570: LD_STRING 04_2_Mike
10572: PPUSH
10573: CALL_OW 38
// if Markov then
10577: LD_EXP 26
10581: IFFALSE 10595
// SaveCharacters ( Markov , 04_2_Markov ) ;
10583: LD_EXP 26
10587: PPUSH
10588: LD_STRING 04_2_Markov
10590: PPUSH
10591: CALL_OW 38
// if Kurt then
10595: LD_EXP 28
10599: IFFALSE 10613
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10601: LD_EXP 28
10605: PPUSH
10606: LD_STRING 04_2_Kurt
10608: PPUSH
10609: CALL_OW 38
// if heikeSecondSquad then
10613: LD_EXP 30
10617: IFFALSE 10631
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10619: LD_EXP 30
10623: PPUSH
10624: LD_STRING 04_2_others
10626: PPUSH
10627: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10631: LD_ADDR_VAR 0 1
10635: PUSH
10636: LD_INT 22
10638: PUSH
10639: LD_INT 2
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 23
10648: PUSH
10649: LD_INT 0
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: ST_TO_ADDR
// if tmp then
10665: LD_VAR 0 1
10669: IFFALSE 10683
// SaveCharacters ( tmp , 04_2_apes ) ;
10671: LD_VAR 0 1
10675: PPUSH
10676: LD_STRING 04_2_apes
10678: PPUSH
10679: CALL_OW 38
// YouWin ;
10683: CALL_OW 103
// end ; end_of_file
10687: PPOPN 4
10689: END
// export globalGameSaveCounter ; every 0 0$1 do
10690: GO 10692
10692: DISABLE
// begin enable ;
10693: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10694: LD_STRING updateTimer(
10696: PUSH
10697: LD_OWVAR 1
10701: STR
10702: PUSH
10703: LD_STRING );
10705: STR
10706: PPUSH
10707: CALL_OW 559
// end ;
10711: END
// every 0 0$1 do
10712: GO 10714
10714: DISABLE
// begin globalGameSaveCounter := 0 ;
10715: LD_ADDR_EXP 44
10719: PUSH
10720: LD_INT 0
10722: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10723: LD_STRING setGameSaveCounter(0)
10725: PPUSH
10726: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10730: LD_STRING initStreamRollete();
10732: PPUSH
10733: CALL_OW 559
// InitStreamMode ;
10737: CALL 12089 0 0
// DefineStreamItems ( false ) ;
10741: LD_INT 0
10743: PPUSH
10744: CALL 12553 0 1
// end ;
10748: END
// export function SOS_MapStart ( ) ; begin
10749: LD_INT 0
10751: PPUSH
// if streamModeActive then
10752: LD_EXP 45
10756: IFFALSE 10765
// DefineStreamItems ( true ) ;
10758: LD_INT 1
10760: PPUSH
10761: CALL 12553 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
10765: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
10767: PPUSH
10768: CALL_OW 559
// UpdateLuaVariables ( ) ;
10772: CALL 10789 0 0
// UpdateFactoryWaypoints ( ) ;
10776: CALL 25675 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10780: CALL 25927 0 0
// end ;
10784: LD_VAR 0 1
10788: RET
// function UpdateLuaVariables ( ) ; begin
10789: LD_INT 0
10791: PPUSH
// if globalGameSaveCounter then
10792: LD_EXP 44
10796: IFFALSE 10830
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10798: LD_ADDR_EXP 44
10802: PUSH
10803: LD_EXP 44
10807: PPUSH
10808: CALL 72986 0 1
10812: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10813: LD_STRING setGameSaveCounter(
10815: PUSH
10816: LD_EXP 44
10820: STR
10821: PUSH
10822: LD_STRING )
10824: STR
10825: PPUSH
10826: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10830: LD_STRING setGameDifficulty(
10832: PUSH
10833: LD_OWVAR 67
10837: STR
10838: PUSH
10839: LD_STRING )
10841: STR
10842: PPUSH
10843: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10847: LD_STRING displayDifficulty(
10849: PUSH
10850: LD_OWVAR 67
10854: STR
10855: PUSH
10856: LD_STRING )
10858: STR
10859: PPUSH
10860: CALL_OW 559
// end ;
10864: LD_VAR 0 1
10868: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10869: LD_INT 0
10871: PPUSH
// if p2 = stream_mode then
10872: LD_VAR 0 2
10876: PUSH
10877: LD_INT 100
10879: EQUAL
10880: IFFALSE 11883
// begin if not StreamModeActive then
10882: LD_EXP 45
10886: NOT
10887: IFFALSE 10897
// StreamModeActive := true ;
10889: LD_ADDR_EXP 45
10893: PUSH
10894: LD_INT 1
10896: ST_TO_ADDR
// if p3 = 0 then
10897: LD_VAR 0 3
10901: PUSH
10902: LD_INT 0
10904: EQUAL
10905: IFFALSE 10911
// InitStreamMode ;
10907: CALL 12089 0 0
// if p3 = 1 then
10911: LD_VAR 0 3
10915: PUSH
10916: LD_INT 1
10918: EQUAL
10919: IFFALSE 10929
// sRocket := true ;
10921: LD_ADDR_EXP 50
10925: PUSH
10926: LD_INT 1
10928: ST_TO_ADDR
// if p3 = 2 then
10929: LD_VAR 0 3
10933: PUSH
10934: LD_INT 2
10936: EQUAL
10937: IFFALSE 10947
// sSpeed := true ;
10939: LD_ADDR_EXP 49
10943: PUSH
10944: LD_INT 1
10946: ST_TO_ADDR
// if p3 = 3 then
10947: LD_VAR 0 3
10951: PUSH
10952: LD_INT 3
10954: EQUAL
10955: IFFALSE 10965
// sEngine := true ;
10957: LD_ADDR_EXP 51
10961: PUSH
10962: LD_INT 1
10964: ST_TO_ADDR
// if p3 = 4 then
10965: LD_VAR 0 3
10969: PUSH
10970: LD_INT 4
10972: EQUAL
10973: IFFALSE 10983
// sSpec := true ;
10975: LD_ADDR_EXP 48
10979: PUSH
10980: LD_INT 1
10982: ST_TO_ADDR
// if p3 = 5 then
10983: LD_VAR 0 3
10987: PUSH
10988: LD_INT 5
10990: EQUAL
10991: IFFALSE 11001
// sLevel := true ;
10993: LD_ADDR_EXP 52
10997: PUSH
10998: LD_INT 1
11000: ST_TO_ADDR
// if p3 = 6 then
11001: LD_VAR 0 3
11005: PUSH
11006: LD_INT 6
11008: EQUAL
11009: IFFALSE 11019
// sArmoury := true ;
11011: LD_ADDR_EXP 53
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// if p3 = 7 then
11019: LD_VAR 0 3
11023: PUSH
11024: LD_INT 7
11026: EQUAL
11027: IFFALSE 11037
// sRadar := true ;
11029: LD_ADDR_EXP 54
11033: PUSH
11034: LD_INT 1
11036: ST_TO_ADDR
// if p3 = 8 then
11037: LD_VAR 0 3
11041: PUSH
11042: LD_INT 8
11044: EQUAL
11045: IFFALSE 11055
// sBunker := true ;
11047: LD_ADDR_EXP 55
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// if p3 = 9 then
11055: LD_VAR 0 3
11059: PUSH
11060: LD_INT 9
11062: EQUAL
11063: IFFALSE 11073
// sHack := true ;
11065: LD_ADDR_EXP 56
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// if p3 = 10 then
11073: LD_VAR 0 3
11077: PUSH
11078: LD_INT 10
11080: EQUAL
11081: IFFALSE 11091
// sFire := true ;
11083: LD_ADDR_EXP 57
11087: PUSH
11088: LD_INT 1
11090: ST_TO_ADDR
// if p3 = 11 then
11091: LD_VAR 0 3
11095: PUSH
11096: LD_INT 11
11098: EQUAL
11099: IFFALSE 11109
// sRefresh := true ;
11101: LD_ADDR_EXP 58
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// if p3 = 12 then
11109: LD_VAR 0 3
11113: PUSH
11114: LD_INT 12
11116: EQUAL
11117: IFFALSE 11127
// sExp := true ;
11119: LD_ADDR_EXP 59
11123: PUSH
11124: LD_INT 1
11126: ST_TO_ADDR
// if p3 = 13 then
11127: LD_VAR 0 3
11131: PUSH
11132: LD_INT 13
11134: EQUAL
11135: IFFALSE 11145
// sDepot := true ;
11137: LD_ADDR_EXP 60
11141: PUSH
11142: LD_INT 1
11144: ST_TO_ADDR
// if p3 = 14 then
11145: LD_VAR 0 3
11149: PUSH
11150: LD_INT 14
11152: EQUAL
11153: IFFALSE 11163
// sFlag := true ;
11155: LD_ADDR_EXP 61
11159: PUSH
11160: LD_INT 1
11162: ST_TO_ADDR
// if p3 = 15 then
11163: LD_VAR 0 3
11167: PUSH
11168: LD_INT 15
11170: EQUAL
11171: IFFALSE 11181
// sKamikadze := true ;
11173: LD_ADDR_EXP 69
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// if p3 = 16 then
11181: LD_VAR 0 3
11185: PUSH
11186: LD_INT 16
11188: EQUAL
11189: IFFALSE 11199
// sTroll := true ;
11191: LD_ADDR_EXP 70
11195: PUSH
11196: LD_INT 1
11198: ST_TO_ADDR
// if p3 = 17 then
11199: LD_VAR 0 3
11203: PUSH
11204: LD_INT 17
11206: EQUAL
11207: IFFALSE 11217
// sSlow := true ;
11209: LD_ADDR_EXP 71
11213: PUSH
11214: LD_INT 1
11216: ST_TO_ADDR
// if p3 = 18 then
11217: LD_VAR 0 3
11221: PUSH
11222: LD_INT 18
11224: EQUAL
11225: IFFALSE 11235
// sLack := true ;
11227: LD_ADDR_EXP 72
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// if p3 = 19 then
11235: LD_VAR 0 3
11239: PUSH
11240: LD_INT 19
11242: EQUAL
11243: IFFALSE 11253
// sTank := true ;
11245: LD_ADDR_EXP 74
11249: PUSH
11250: LD_INT 1
11252: ST_TO_ADDR
// if p3 = 20 then
11253: LD_VAR 0 3
11257: PUSH
11258: LD_INT 20
11260: EQUAL
11261: IFFALSE 11271
// sRemote := true ;
11263: LD_ADDR_EXP 75
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
// if p3 = 21 then
11271: LD_VAR 0 3
11275: PUSH
11276: LD_INT 21
11278: EQUAL
11279: IFFALSE 11289
// sPowell := true ;
11281: LD_ADDR_EXP 76
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
// if p3 = 22 then
11289: LD_VAR 0 3
11293: PUSH
11294: LD_INT 22
11296: EQUAL
11297: IFFALSE 11307
// sTeleport := true ;
11299: LD_ADDR_EXP 79
11303: PUSH
11304: LD_INT 1
11306: ST_TO_ADDR
// if p3 = 23 then
11307: LD_VAR 0 3
11311: PUSH
11312: LD_INT 23
11314: EQUAL
11315: IFFALSE 11325
// sOilTower := true ;
11317: LD_ADDR_EXP 81
11321: PUSH
11322: LD_INT 1
11324: ST_TO_ADDR
// if p3 = 24 then
11325: LD_VAR 0 3
11329: PUSH
11330: LD_INT 24
11332: EQUAL
11333: IFFALSE 11343
// sShovel := true ;
11335: LD_ADDR_EXP 82
11339: PUSH
11340: LD_INT 1
11342: ST_TO_ADDR
// if p3 = 25 then
11343: LD_VAR 0 3
11347: PUSH
11348: LD_INT 25
11350: EQUAL
11351: IFFALSE 11361
// sSheik := true ;
11353: LD_ADDR_EXP 83
11357: PUSH
11358: LD_INT 1
11360: ST_TO_ADDR
// if p3 = 26 then
11361: LD_VAR 0 3
11365: PUSH
11366: LD_INT 26
11368: EQUAL
11369: IFFALSE 11379
// sEarthquake := true ;
11371: LD_ADDR_EXP 85
11375: PUSH
11376: LD_INT 1
11378: ST_TO_ADDR
// if p3 = 27 then
11379: LD_VAR 0 3
11383: PUSH
11384: LD_INT 27
11386: EQUAL
11387: IFFALSE 11397
// sAI := true ;
11389: LD_ADDR_EXP 86
11393: PUSH
11394: LD_INT 1
11396: ST_TO_ADDR
// if p3 = 28 then
11397: LD_VAR 0 3
11401: PUSH
11402: LD_INT 28
11404: EQUAL
11405: IFFALSE 11415
// sCargo := true ;
11407: LD_ADDR_EXP 89
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// if p3 = 29 then
11415: LD_VAR 0 3
11419: PUSH
11420: LD_INT 29
11422: EQUAL
11423: IFFALSE 11433
// sDLaser := true ;
11425: LD_ADDR_EXP 90
11429: PUSH
11430: LD_INT 1
11432: ST_TO_ADDR
// if p3 = 30 then
11433: LD_VAR 0 3
11437: PUSH
11438: LD_INT 30
11440: EQUAL
11441: IFFALSE 11451
// sExchange := true ;
11443: LD_ADDR_EXP 91
11447: PUSH
11448: LD_INT 1
11450: ST_TO_ADDR
// if p3 = 31 then
11451: LD_VAR 0 3
11455: PUSH
11456: LD_INT 31
11458: EQUAL
11459: IFFALSE 11469
// sFac := true ;
11461: LD_ADDR_EXP 92
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// if p3 = 32 then
11469: LD_VAR 0 3
11473: PUSH
11474: LD_INT 32
11476: EQUAL
11477: IFFALSE 11487
// sPower := true ;
11479: LD_ADDR_EXP 93
11483: PUSH
11484: LD_INT 1
11486: ST_TO_ADDR
// if p3 = 33 then
11487: LD_VAR 0 3
11491: PUSH
11492: LD_INT 33
11494: EQUAL
11495: IFFALSE 11505
// sRandom := true ;
11497: LD_ADDR_EXP 94
11501: PUSH
11502: LD_INT 1
11504: ST_TO_ADDR
// if p3 = 34 then
11505: LD_VAR 0 3
11509: PUSH
11510: LD_INT 34
11512: EQUAL
11513: IFFALSE 11523
// sShield := true ;
11515: LD_ADDR_EXP 95
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// if p3 = 35 then
11523: LD_VAR 0 3
11527: PUSH
11528: LD_INT 35
11530: EQUAL
11531: IFFALSE 11541
// sTime := true ;
11533: LD_ADDR_EXP 96
11537: PUSH
11538: LD_INT 1
11540: ST_TO_ADDR
// if p3 = 36 then
11541: LD_VAR 0 3
11545: PUSH
11546: LD_INT 36
11548: EQUAL
11549: IFFALSE 11559
// sTools := true ;
11551: LD_ADDR_EXP 97
11555: PUSH
11556: LD_INT 1
11558: ST_TO_ADDR
// if p3 = 101 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 101
11566: EQUAL
11567: IFFALSE 11577
// sSold := true ;
11569: LD_ADDR_EXP 62
11573: PUSH
11574: LD_INT 1
11576: ST_TO_ADDR
// if p3 = 102 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 102
11584: EQUAL
11585: IFFALSE 11595
// sDiff := true ;
11587: LD_ADDR_EXP 63
11591: PUSH
11592: LD_INT 1
11594: ST_TO_ADDR
// if p3 = 103 then
11595: LD_VAR 0 3
11599: PUSH
11600: LD_INT 103
11602: EQUAL
11603: IFFALSE 11613
// sFog := true ;
11605: LD_ADDR_EXP 66
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if p3 = 104 then
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 104
11620: EQUAL
11621: IFFALSE 11631
// sReset := true ;
11623: LD_ADDR_EXP 67
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// if p3 = 105 then
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 105
11638: EQUAL
11639: IFFALSE 11649
// sSun := true ;
11641: LD_ADDR_EXP 68
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// if p3 = 106 then
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 106
11656: EQUAL
11657: IFFALSE 11667
// sTiger := true ;
11659: LD_ADDR_EXP 64
11663: PUSH
11664: LD_INT 1
11666: ST_TO_ADDR
// if p3 = 107 then
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 107
11674: EQUAL
11675: IFFALSE 11685
// sBomb := true ;
11677: LD_ADDR_EXP 65
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// if p3 = 108 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_INT 108
11692: EQUAL
11693: IFFALSE 11703
// sWound := true ;
11695: LD_ADDR_EXP 73
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// if p3 = 109 then
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 109
11710: EQUAL
11711: IFFALSE 11721
// sBetray := true ;
11713: LD_ADDR_EXP 77
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// if p3 = 110 then
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 110
11728: EQUAL
11729: IFFALSE 11739
// sContamin := true ;
11731: LD_ADDR_EXP 78
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// if p3 = 111 then
11739: LD_VAR 0 3
11743: PUSH
11744: LD_INT 111
11746: EQUAL
11747: IFFALSE 11757
// sOil := true ;
11749: LD_ADDR_EXP 80
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// if p3 = 112 then
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 112
11764: EQUAL
11765: IFFALSE 11775
// sStu := true ;
11767: LD_ADDR_EXP 84
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 113 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 113
11782: EQUAL
11783: IFFALSE 11793
// sBazooka := true ;
11785: LD_ADDR_EXP 87
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// if p3 = 114 then
11793: LD_VAR 0 3
11797: PUSH
11798: LD_INT 114
11800: EQUAL
11801: IFFALSE 11811
// sMortar := true ;
11803: LD_ADDR_EXP 88
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// if p3 = 115 then
11811: LD_VAR 0 3
11815: PUSH
11816: LD_INT 115
11818: EQUAL
11819: IFFALSE 11829
// sRanger := true ;
11821: LD_ADDR_EXP 98
11825: PUSH
11826: LD_INT 1
11828: ST_TO_ADDR
// if p3 = 116 then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_INT 116
11836: EQUAL
11837: IFFALSE 11847
// sComputer := true ;
11839: LD_ADDR_EXP 99
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// if p3 = 117 then
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 117
11854: EQUAL
11855: IFFALSE 11865
// s30 := true ;
11857: LD_ADDR_EXP 100
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// if p3 = 118 then
11865: LD_VAR 0 3
11869: PUSH
11870: LD_INT 118
11872: EQUAL
11873: IFFALSE 11883
// s60 := true ;
11875: LD_ADDR_EXP 101
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// end ; if p2 = hack_mode then
11883: LD_VAR 0 2
11887: PUSH
11888: LD_INT 101
11890: EQUAL
11891: IFFALSE 12019
// begin case p3 of 1 :
11893: LD_VAR 0 3
11897: PUSH
11898: LD_INT 1
11900: DOUBLE
11901: EQUAL
11902: IFTRUE 11906
11904: GO 11913
11906: POP
// hHackUnlimitedResources ; 2 :
11907: CALL 24282 0 0
11911: GO 12019
11913: LD_INT 2
11915: DOUBLE
11916: EQUAL
11917: IFTRUE 11921
11919: GO 11928
11921: POP
// hHackSetLevel10 ; 3 :
11922: CALL 24415 0 0
11926: GO 12019
11928: LD_INT 3
11930: DOUBLE
11931: EQUAL
11932: IFTRUE 11936
11934: GO 11943
11936: POP
// hHackSetLevel10YourUnits ; 4 :
11937: CALL 24500 0 0
11941: GO 12019
11943: LD_INT 4
11945: DOUBLE
11946: EQUAL
11947: IFTRUE 11951
11949: GO 11958
11951: POP
// hHackInvincible ; 5 :
11952: CALL 24948 0 0
11956: GO 12019
11958: LD_INT 5
11960: DOUBLE
11961: EQUAL
11962: IFTRUE 11966
11964: GO 11973
11966: POP
// hHackInvisible ; 6 :
11967: CALL 25059 0 0
11971: GO 12019
11973: LD_INT 6
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11981
11979: GO 11988
11981: POP
// hHackChangeYourSide ; 7 :
11982: CALL 25116 0 0
11986: GO 12019
11988: LD_INT 7
11990: DOUBLE
11991: EQUAL
11992: IFTRUE 11996
11994: GO 12003
11996: POP
// hHackChangeUnitSide ; 8 :
11997: CALL 25158 0 0
12001: GO 12019
12003: LD_INT 8
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12018
12011: POP
// hHackFog ; end ;
12012: CALL 25259 0 0
12016: GO 12019
12018: POP
// end ; if p2 = game_save_mode then
12019: LD_VAR 0 2
12023: PUSH
12024: LD_INT 102
12026: EQUAL
12027: IFFALSE 12084
// begin if p3 = 1 then
12029: LD_VAR 0 3
12033: PUSH
12034: LD_INT 1
12036: EQUAL
12037: IFFALSE 12049
// globalGameSaveCounter := p4 ;
12039: LD_ADDR_EXP 44
12043: PUSH
12044: LD_VAR 0 4
12048: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 2
12056: EQUAL
12057: IFFALSE 12065
12059: PUSH
12060: LD_EXP 44
12064: AND
12065: IFFALSE 12084
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12067: LD_STRING setGameSaveCounter(
12069: PUSH
12070: LD_EXP 44
12074: STR
12075: PUSH
12076: LD_STRING )
12078: STR
12079: PPUSH
12080: CALL_OW 559
// end ; end ;
12084: LD_VAR 0 7
12088: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12089: LD_INT 0
12091: PPUSH
// streamModeActive := false ;
12092: LD_ADDR_EXP 45
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
// normalCounter := 36 ;
12100: LD_ADDR_EXP 46
12104: PUSH
12105: LD_INT 36
12107: ST_TO_ADDR
// hardcoreCounter := 18 ;
12108: LD_ADDR_EXP 47
12112: PUSH
12113: LD_INT 18
12115: ST_TO_ADDR
// sRocket := false ;
12116: LD_ADDR_EXP 50
12120: PUSH
12121: LD_INT 0
12123: ST_TO_ADDR
// sSpeed := false ;
12124: LD_ADDR_EXP 49
12128: PUSH
12129: LD_INT 0
12131: ST_TO_ADDR
// sEngine := false ;
12132: LD_ADDR_EXP 51
12136: PUSH
12137: LD_INT 0
12139: ST_TO_ADDR
// sSpec := false ;
12140: LD_ADDR_EXP 48
12144: PUSH
12145: LD_INT 0
12147: ST_TO_ADDR
// sLevel := false ;
12148: LD_ADDR_EXP 52
12152: PUSH
12153: LD_INT 0
12155: ST_TO_ADDR
// sArmoury := false ;
12156: LD_ADDR_EXP 53
12160: PUSH
12161: LD_INT 0
12163: ST_TO_ADDR
// sRadar := false ;
12164: LD_ADDR_EXP 54
12168: PUSH
12169: LD_INT 0
12171: ST_TO_ADDR
// sBunker := false ;
12172: LD_ADDR_EXP 55
12176: PUSH
12177: LD_INT 0
12179: ST_TO_ADDR
// sHack := false ;
12180: LD_ADDR_EXP 56
12184: PUSH
12185: LD_INT 0
12187: ST_TO_ADDR
// sFire := false ;
12188: LD_ADDR_EXP 57
12192: PUSH
12193: LD_INT 0
12195: ST_TO_ADDR
// sRefresh := false ;
12196: LD_ADDR_EXP 58
12200: PUSH
12201: LD_INT 0
12203: ST_TO_ADDR
// sExp := false ;
12204: LD_ADDR_EXP 59
12208: PUSH
12209: LD_INT 0
12211: ST_TO_ADDR
// sDepot := false ;
12212: LD_ADDR_EXP 60
12216: PUSH
12217: LD_INT 0
12219: ST_TO_ADDR
// sFlag := false ;
12220: LD_ADDR_EXP 61
12224: PUSH
12225: LD_INT 0
12227: ST_TO_ADDR
// sKamikadze := false ;
12228: LD_ADDR_EXP 69
12232: PUSH
12233: LD_INT 0
12235: ST_TO_ADDR
// sTroll := false ;
12236: LD_ADDR_EXP 70
12240: PUSH
12241: LD_INT 0
12243: ST_TO_ADDR
// sSlow := false ;
12244: LD_ADDR_EXP 71
12248: PUSH
12249: LD_INT 0
12251: ST_TO_ADDR
// sLack := false ;
12252: LD_ADDR_EXP 72
12256: PUSH
12257: LD_INT 0
12259: ST_TO_ADDR
// sTank := false ;
12260: LD_ADDR_EXP 74
12264: PUSH
12265: LD_INT 0
12267: ST_TO_ADDR
// sRemote := false ;
12268: LD_ADDR_EXP 75
12272: PUSH
12273: LD_INT 0
12275: ST_TO_ADDR
// sPowell := false ;
12276: LD_ADDR_EXP 76
12280: PUSH
12281: LD_INT 0
12283: ST_TO_ADDR
// sTeleport := false ;
12284: LD_ADDR_EXP 79
12288: PUSH
12289: LD_INT 0
12291: ST_TO_ADDR
// sOilTower := false ;
12292: LD_ADDR_EXP 81
12296: PUSH
12297: LD_INT 0
12299: ST_TO_ADDR
// sShovel := false ;
12300: LD_ADDR_EXP 82
12304: PUSH
12305: LD_INT 0
12307: ST_TO_ADDR
// sSheik := false ;
12308: LD_ADDR_EXP 83
12312: PUSH
12313: LD_INT 0
12315: ST_TO_ADDR
// sEarthquake := false ;
12316: LD_ADDR_EXP 85
12320: PUSH
12321: LD_INT 0
12323: ST_TO_ADDR
// sAI := false ;
12324: LD_ADDR_EXP 86
12328: PUSH
12329: LD_INT 0
12331: ST_TO_ADDR
// sCargo := false ;
12332: LD_ADDR_EXP 89
12336: PUSH
12337: LD_INT 0
12339: ST_TO_ADDR
// sDLaser := false ;
12340: LD_ADDR_EXP 90
12344: PUSH
12345: LD_INT 0
12347: ST_TO_ADDR
// sExchange := false ;
12348: LD_ADDR_EXP 91
12352: PUSH
12353: LD_INT 0
12355: ST_TO_ADDR
// sFac := false ;
12356: LD_ADDR_EXP 92
12360: PUSH
12361: LD_INT 0
12363: ST_TO_ADDR
// sPower := false ;
12364: LD_ADDR_EXP 93
12368: PUSH
12369: LD_INT 0
12371: ST_TO_ADDR
// sRandom := false ;
12372: LD_ADDR_EXP 94
12376: PUSH
12377: LD_INT 0
12379: ST_TO_ADDR
// sShield := false ;
12380: LD_ADDR_EXP 95
12384: PUSH
12385: LD_INT 0
12387: ST_TO_ADDR
// sTime := false ;
12388: LD_ADDR_EXP 96
12392: PUSH
12393: LD_INT 0
12395: ST_TO_ADDR
// sTools := false ;
12396: LD_ADDR_EXP 97
12400: PUSH
12401: LD_INT 0
12403: ST_TO_ADDR
// sSold := false ;
12404: LD_ADDR_EXP 62
12408: PUSH
12409: LD_INT 0
12411: ST_TO_ADDR
// sDiff := false ;
12412: LD_ADDR_EXP 63
12416: PUSH
12417: LD_INT 0
12419: ST_TO_ADDR
// sFog := false ;
12420: LD_ADDR_EXP 66
12424: PUSH
12425: LD_INT 0
12427: ST_TO_ADDR
// sReset := false ;
12428: LD_ADDR_EXP 67
12432: PUSH
12433: LD_INT 0
12435: ST_TO_ADDR
// sSun := false ;
12436: LD_ADDR_EXP 68
12440: PUSH
12441: LD_INT 0
12443: ST_TO_ADDR
// sTiger := false ;
12444: LD_ADDR_EXP 64
12448: PUSH
12449: LD_INT 0
12451: ST_TO_ADDR
// sBomb := false ;
12452: LD_ADDR_EXP 65
12456: PUSH
12457: LD_INT 0
12459: ST_TO_ADDR
// sWound := false ;
12460: LD_ADDR_EXP 73
12464: PUSH
12465: LD_INT 0
12467: ST_TO_ADDR
// sBetray := false ;
12468: LD_ADDR_EXP 77
12472: PUSH
12473: LD_INT 0
12475: ST_TO_ADDR
// sContamin := false ;
12476: LD_ADDR_EXP 78
12480: PUSH
12481: LD_INT 0
12483: ST_TO_ADDR
// sOil := false ;
12484: LD_ADDR_EXP 80
12488: PUSH
12489: LD_INT 0
12491: ST_TO_ADDR
// sStu := false ;
12492: LD_ADDR_EXP 84
12496: PUSH
12497: LD_INT 0
12499: ST_TO_ADDR
// sBazooka := false ;
12500: LD_ADDR_EXP 87
12504: PUSH
12505: LD_INT 0
12507: ST_TO_ADDR
// sMortar := false ;
12508: LD_ADDR_EXP 88
12512: PUSH
12513: LD_INT 0
12515: ST_TO_ADDR
// sRanger := false ;
12516: LD_ADDR_EXP 98
12520: PUSH
12521: LD_INT 0
12523: ST_TO_ADDR
// sComputer := false ;
12524: LD_ADDR_EXP 99
12528: PUSH
12529: LD_INT 0
12531: ST_TO_ADDR
// s30 := false ;
12532: LD_ADDR_EXP 100
12536: PUSH
12537: LD_INT 0
12539: ST_TO_ADDR
// s60 := false ;
12540: LD_ADDR_EXP 101
12544: PUSH
12545: LD_INT 0
12547: ST_TO_ADDR
// end ;
12548: LD_VAR 0 1
12552: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12553: LD_INT 0
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
12559: PPUSH
12560: PPUSH
12561: PPUSH
// result := [ ] ;
12562: LD_ADDR_VAR 0 2
12566: PUSH
12567: EMPTY
12568: ST_TO_ADDR
// if campaign_id = 1 then
12569: LD_OWVAR 69
12573: PUSH
12574: LD_INT 1
12576: EQUAL
12577: IFFALSE 15743
// begin case mission_number of 1 :
12579: LD_OWVAR 70
12583: PUSH
12584: LD_INT 1
12586: DOUBLE
12587: EQUAL
12588: IFTRUE 12592
12590: GO 12668
12592: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12593: LD_ADDR_VAR 0 2
12597: PUSH
12598: LD_INT 2
12600: PUSH
12601: LD_INT 4
12603: PUSH
12604: LD_INT 11
12606: PUSH
12607: LD_INT 12
12609: PUSH
12610: LD_INT 15
12612: PUSH
12613: LD_INT 16
12615: PUSH
12616: LD_INT 22
12618: PUSH
12619: LD_INT 23
12621: PUSH
12622: LD_INT 26
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 101
12638: PUSH
12639: LD_INT 102
12641: PUSH
12642: LD_INT 106
12644: PUSH
12645: LD_INT 116
12647: PUSH
12648: LD_INT 117
12650: PUSH
12651: LD_INT 118
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: ST_TO_ADDR
12666: GO 15741
12668: LD_INT 2
12670: DOUBLE
12671: EQUAL
12672: IFTRUE 12676
12674: GO 12760
12676: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12677: LD_ADDR_VAR 0 2
12681: PUSH
12682: LD_INT 2
12684: PUSH
12685: LD_INT 4
12687: PUSH
12688: LD_INT 11
12690: PUSH
12691: LD_INT 12
12693: PUSH
12694: LD_INT 15
12696: PUSH
12697: LD_INT 16
12699: PUSH
12700: LD_INT 22
12702: PUSH
12703: LD_INT 23
12705: PUSH
12706: LD_INT 26
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 101
12722: PUSH
12723: LD_INT 102
12725: PUSH
12726: LD_INT 105
12728: PUSH
12729: LD_INT 106
12731: PUSH
12732: LD_INT 108
12734: PUSH
12735: LD_INT 116
12737: PUSH
12738: LD_INT 117
12740: PUSH
12741: LD_INT 118
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: ST_TO_ADDR
12758: GO 15741
12760: LD_INT 3
12762: DOUBLE
12763: EQUAL
12764: IFTRUE 12768
12766: GO 12856
12768: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12769: LD_ADDR_VAR 0 2
12773: PUSH
12774: LD_INT 2
12776: PUSH
12777: LD_INT 4
12779: PUSH
12780: LD_INT 5
12782: PUSH
12783: LD_INT 11
12785: PUSH
12786: LD_INT 12
12788: PUSH
12789: LD_INT 15
12791: PUSH
12792: LD_INT 16
12794: PUSH
12795: LD_INT 22
12797: PUSH
12798: LD_INT 26
12800: PUSH
12801: LD_INT 36
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 101
12818: PUSH
12819: LD_INT 102
12821: PUSH
12822: LD_INT 105
12824: PUSH
12825: LD_INT 106
12827: PUSH
12828: LD_INT 108
12830: PUSH
12831: LD_INT 116
12833: PUSH
12834: LD_INT 117
12836: PUSH
12837: LD_INT 118
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: ST_TO_ADDR
12854: GO 15741
12856: LD_INT 4
12858: DOUBLE
12859: EQUAL
12860: IFTRUE 12864
12862: GO 12960
12864: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12865: LD_ADDR_VAR 0 2
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: LD_INT 4
12875: PUSH
12876: LD_INT 5
12878: PUSH
12879: LD_INT 8
12881: PUSH
12882: LD_INT 11
12884: PUSH
12885: LD_INT 12
12887: PUSH
12888: LD_INT 15
12890: PUSH
12891: LD_INT 16
12893: PUSH
12894: LD_INT 22
12896: PUSH
12897: LD_INT 23
12899: PUSH
12900: LD_INT 26
12902: PUSH
12903: LD_INT 36
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 101
12922: PUSH
12923: LD_INT 102
12925: PUSH
12926: LD_INT 105
12928: PUSH
12929: LD_INT 106
12931: PUSH
12932: LD_INT 108
12934: PUSH
12935: LD_INT 116
12937: PUSH
12938: LD_INT 117
12940: PUSH
12941: LD_INT 118
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: ST_TO_ADDR
12958: GO 15741
12960: LD_INT 5
12962: DOUBLE
12963: EQUAL
12964: IFTRUE 12968
12966: GO 13080
12968: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12969: LD_ADDR_VAR 0 2
12973: PUSH
12974: LD_INT 2
12976: PUSH
12977: LD_INT 4
12979: PUSH
12980: LD_INT 5
12982: PUSH
12983: LD_INT 6
12985: PUSH
12986: LD_INT 8
12988: PUSH
12989: LD_INT 11
12991: PUSH
12992: LD_INT 12
12994: PUSH
12995: LD_INT 15
12997: PUSH
12998: LD_INT 16
13000: PUSH
13001: LD_INT 22
13003: PUSH
13004: LD_INT 23
13006: PUSH
13007: LD_INT 25
13009: PUSH
13010: LD_INT 26
13012: PUSH
13013: LD_INT 36
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 101
13034: PUSH
13035: LD_INT 102
13037: PUSH
13038: LD_INT 105
13040: PUSH
13041: LD_INT 106
13043: PUSH
13044: LD_INT 108
13046: PUSH
13047: LD_INT 109
13049: PUSH
13050: LD_INT 112
13052: PUSH
13053: LD_INT 116
13055: PUSH
13056: LD_INT 117
13058: PUSH
13059: LD_INT 118
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: ST_TO_ADDR
13078: GO 15741
13080: LD_INT 6
13082: DOUBLE
13083: EQUAL
13084: IFTRUE 13088
13086: GO 13220
13088: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13089: LD_ADDR_VAR 0 2
13093: PUSH
13094: LD_INT 2
13096: PUSH
13097: LD_INT 4
13099: PUSH
13100: LD_INT 5
13102: PUSH
13103: LD_INT 6
13105: PUSH
13106: LD_INT 8
13108: PUSH
13109: LD_INT 11
13111: PUSH
13112: LD_INT 12
13114: PUSH
13115: LD_INT 15
13117: PUSH
13118: LD_INT 16
13120: PUSH
13121: LD_INT 20
13123: PUSH
13124: LD_INT 21
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 23
13132: PUSH
13133: LD_INT 25
13135: PUSH
13136: LD_INT 26
13138: PUSH
13139: LD_INT 30
13141: PUSH
13142: LD_INT 31
13144: PUSH
13145: LD_INT 32
13147: PUSH
13148: LD_INT 36
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 101
13174: PUSH
13175: LD_INT 102
13177: PUSH
13178: LD_INT 105
13180: PUSH
13181: LD_INT 106
13183: PUSH
13184: LD_INT 108
13186: PUSH
13187: LD_INT 109
13189: PUSH
13190: LD_INT 112
13192: PUSH
13193: LD_INT 116
13195: PUSH
13196: LD_INT 117
13198: PUSH
13199: LD_INT 118
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: ST_TO_ADDR
13218: GO 15741
13220: LD_INT 7
13222: DOUBLE
13223: EQUAL
13224: IFTRUE 13228
13226: GO 13340
13228: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13229: LD_ADDR_VAR 0 2
13233: PUSH
13234: LD_INT 2
13236: PUSH
13237: LD_INT 4
13239: PUSH
13240: LD_INT 5
13242: PUSH
13243: LD_INT 7
13245: PUSH
13246: LD_INT 11
13248: PUSH
13249: LD_INT 12
13251: PUSH
13252: LD_INT 15
13254: PUSH
13255: LD_INT 16
13257: PUSH
13258: LD_INT 20
13260: PUSH
13261: LD_INT 21
13263: PUSH
13264: LD_INT 22
13266: PUSH
13267: LD_INT 23
13269: PUSH
13270: LD_INT 25
13272: PUSH
13273: LD_INT 26
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 101
13294: PUSH
13295: LD_INT 102
13297: PUSH
13298: LD_INT 103
13300: PUSH
13301: LD_INT 105
13303: PUSH
13304: LD_INT 106
13306: PUSH
13307: LD_INT 108
13309: PUSH
13310: LD_INT 112
13312: PUSH
13313: LD_INT 116
13315: PUSH
13316: LD_INT 117
13318: PUSH
13319: LD_INT 118
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 15741
13340: LD_INT 8
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13488
13348: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13349: LD_ADDR_VAR 0 2
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 4
13359: PUSH
13360: LD_INT 5
13362: PUSH
13363: LD_INT 6
13365: PUSH
13366: LD_INT 7
13368: PUSH
13369: LD_INT 8
13371: PUSH
13372: LD_INT 11
13374: PUSH
13375: LD_INT 12
13377: PUSH
13378: LD_INT 15
13380: PUSH
13381: LD_INT 16
13383: PUSH
13384: LD_INT 20
13386: PUSH
13387: LD_INT 21
13389: PUSH
13390: LD_INT 22
13392: PUSH
13393: LD_INT 23
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 26
13401: PUSH
13402: LD_INT 30
13404: PUSH
13405: LD_INT 31
13407: PUSH
13408: LD_INT 32
13410: PUSH
13411: LD_INT 36
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PUSH
13436: LD_INT 101
13438: PUSH
13439: LD_INT 102
13441: PUSH
13442: LD_INT 103
13444: PUSH
13445: LD_INT 105
13447: PUSH
13448: LD_INT 106
13450: PUSH
13451: LD_INT 108
13453: PUSH
13454: LD_INT 109
13456: PUSH
13457: LD_INT 112
13459: PUSH
13460: LD_INT 116
13462: PUSH
13463: LD_INT 117
13465: PUSH
13466: LD_INT 118
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: ST_TO_ADDR
13486: GO 15741
13488: LD_INT 9
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13644
13496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13497: LD_ADDR_VAR 0 2
13501: PUSH
13502: LD_INT 2
13504: PUSH
13505: LD_INT 4
13507: PUSH
13508: LD_INT 5
13510: PUSH
13511: LD_INT 6
13513: PUSH
13514: LD_INT 7
13516: PUSH
13517: LD_INT 8
13519: PUSH
13520: LD_INT 11
13522: PUSH
13523: LD_INT 12
13525: PUSH
13526: LD_INT 15
13528: PUSH
13529: LD_INT 16
13531: PUSH
13532: LD_INT 20
13534: PUSH
13535: LD_INT 21
13537: PUSH
13538: LD_INT 22
13540: PUSH
13541: LD_INT 23
13543: PUSH
13544: LD_INT 25
13546: PUSH
13547: LD_INT 26
13549: PUSH
13550: LD_INT 28
13552: PUSH
13553: LD_INT 30
13555: PUSH
13556: LD_INT 31
13558: PUSH
13559: LD_INT 32
13561: PUSH
13562: LD_INT 36
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 101
13590: PUSH
13591: LD_INT 102
13593: PUSH
13594: LD_INT 103
13596: PUSH
13597: LD_INT 105
13599: PUSH
13600: LD_INT 106
13602: PUSH
13603: LD_INT 108
13605: PUSH
13606: LD_INT 109
13608: PUSH
13609: LD_INT 112
13611: PUSH
13612: LD_INT 114
13614: PUSH
13615: LD_INT 116
13617: PUSH
13618: LD_INT 117
13620: PUSH
13621: LD_INT 118
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: ST_TO_ADDR
13642: GO 15741
13644: LD_INT 10
13646: DOUBLE
13647: EQUAL
13648: IFTRUE 13652
13650: GO 13848
13652: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13653: LD_ADDR_VAR 0 2
13657: PUSH
13658: LD_INT 2
13660: PUSH
13661: LD_INT 4
13663: PUSH
13664: LD_INT 5
13666: PUSH
13667: LD_INT 6
13669: PUSH
13670: LD_INT 7
13672: PUSH
13673: LD_INT 8
13675: PUSH
13676: LD_INT 9
13678: PUSH
13679: LD_INT 10
13681: PUSH
13682: LD_INT 11
13684: PUSH
13685: LD_INT 12
13687: PUSH
13688: LD_INT 13
13690: PUSH
13691: LD_INT 14
13693: PUSH
13694: LD_INT 15
13696: PUSH
13697: LD_INT 16
13699: PUSH
13700: LD_INT 17
13702: PUSH
13703: LD_INT 18
13705: PUSH
13706: LD_INT 19
13708: PUSH
13709: LD_INT 20
13711: PUSH
13712: LD_INT 21
13714: PUSH
13715: LD_INT 22
13717: PUSH
13718: LD_INT 23
13720: PUSH
13721: LD_INT 24
13723: PUSH
13724: LD_INT 25
13726: PUSH
13727: LD_INT 26
13729: PUSH
13730: LD_INT 28
13732: PUSH
13733: LD_INT 30
13735: PUSH
13736: LD_INT 31
13738: PUSH
13739: LD_INT 32
13741: PUSH
13742: LD_INT 36
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 101
13778: PUSH
13779: LD_INT 102
13781: PUSH
13782: LD_INT 103
13784: PUSH
13785: LD_INT 104
13787: PUSH
13788: LD_INT 105
13790: PUSH
13791: LD_INT 106
13793: PUSH
13794: LD_INT 107
13796: PUSH
13797: LD_INT 108
13799: PUSH
13800: LD_INT 109
13802: PUSH
13803: LD_INT 110
13805: PUSH
13806: LD_INT 111
13808: PUSH
13809: LD_INT 112
13811: PUSH
13812: LD_INT 114
13814: PUSH
13815: LD_INT 116
13817: PUSH
13818: LD_INT 117
13820: PUSH
13821: LD_INT 118
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: ST_TO_ADDR
13846: GO 15741
13848: LD_INT 11
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13856
13854: GO 14060
13856: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13857: LD_ADDR_VAR 0 2
13861: PUSH
13862: LD_INT 2
13864: PUSH
13865: LD_INT 3
13867: PUSH
13868: LD_INT 4
13870: PUSH
13871: LD_INT 5
13873: PUSH
13874: LD_INT 6
13876: PUSH
13877: LD_INT 7
13879: PUSH
13880: LD_INT 8
13882: PUSH
13883: LD_INT 9
13885: PUSH
13886: LD_INT 10
13888: PUSH
13889: LD_INT 11
13891: PUSH
13892: LD_INT 12
13894: PUSH
13895: LD_INT 13
13897: PUSH
13898: LD_INT 14
13900: PUSH
13901: LD_INT 15
13903: PUSH
13904: LD_INT 16
13906: PUSH
13907: LD_INT 17
13909: PUSH
13910: LD_INT 18
13912: PUSH
13913: LD_INT 19
13915: PUSH
13916: LD_INT 20
13918: PUSH
13919: LD_INT 21
13921: PUSH
13922: LD_INT 22
13924: PUSH
13925: LD_INT 23
13927: PUSH
13928: LD_INT 24
13930: PUSH
13931: LD_INT 25
13933: PUSH
13934: LD_INT 26
13936: PUSH
13937: LD_INT 28
13939: PUSH
13940: LD_INT 30
13942: PUSH
13943: LD_INT 31
13945: PUSH
13946: LD_INT 32
13948: PUSH
13949: LD_INT 34
13951: PUSH
13952: LD_INT 36
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 101
13990: PUSH
13991: LD_INT 102
13993: PUSH
13994: LD_INT 103
13996: PUSH
13997: LD_INT 104
13999: PUSH
14000: LD_INT 105
14002: PUSH
14003: LD_INT 106
14005: PUSH
14006: LD_INT 107
14008: PUSH
14009: LD_INT 108
14011: PUSH
14012: LD_INT 109
14014: PUSH
14015: LD_INT 110
14017: PUSH
14018: LD_INT 111
14020: PUSH
14021: LD_INT 112
14023: PUSH
14024: LD_INT 114
14026: PUSH
14027: LD_INT 116
14029: PUSH
14030: LD_INT 117
14032: PUSH
14033: LD_INT 118
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: ST_TO_ADDR
14058: GO 15741
14060: LD_INT 12
14062: DOUBLE
14063: EQUAL
14064: IFTRUE 14068
14066: GO 14288
14068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14069: LD_ADDR_VAR 0 2
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: LD_INT 2
14079: PUSH
14080: LD_INT 3
14082: PUSH
14083: LD_INT 4
14085: PUSH
14086: LD_INT 5
14088: PUSH
14089: LD_INT 6
14091: PUSH
14092: LD_INT 7
14094: PUSH
14095: LD_INT 8
14097: PUSH
14098: LD_INT 9
14100: PUSH
14101: LD_INT 10
14103: PUSH
14104: LD_INT 11
14106: PUSH
14107: LD_INT 12
14109: PUSH
14110: LD_INT 13
14112: PUSH
14113: LD_INT 14
14115: PUSH
14116: LD_INT 15
14118: PUSH
14119: LD_INT 16
14121: PUSH
14122: LD_INT 17
14124: PUSH
14125: LD_INT 18
14127: PUSH
14128: LD_INT 19
14130: PUSH
14131: LD_INT 20
14133: PUSH
14134: LD_INT 21
14136: PUSH
14137: LD_INT 22
14139: PUSH
14140: LD_INT 23
14142: PUSH
14143: LD_INT 24
14145: PUSH
14146: LD_INT 25
14148: PUSH
14149: LD_INT 26
14151: PUSH
14152: LD_INT 27
14154: PUSH
14155: LD_INT 28
14157: PUSH
14158: LD_INT 30
14160: PUSH
14161: LD_INT 31
14163: PUSH
14164: LD_INT 32
14166: PUSH
14167: LD_INT 33
14169: PUSH
14170: LD_INT 34
14172: PUSH
14173: LD_INT 36
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 101
14214: PUSH
14215: LD_INT 102
14217: PUSH
14218: LD_INT 103
14220: PUSH
14221: LD_INT 104
14223: PUSH
14224: LD_INT 105
14226: PUSH
14227: LD_INT 106
14229: PUSH
14230: LD_INT 107
14232: PUSH
14233: LD_INT 108
14235: PUSH
14236: LD_INT 109
14238: PUSH
14239: LD_INT 110
14241: PUSH
14242: LD_INT 111
14244: PUSH
14245: LD_INT 112
14247: PUSH
14248: LD_INT 113
14250: PUSH
14251: LD_INT 114
14253: PUSH
14254: LD_INT 116
14256: PUSH
14257: LD_INT 117
14259: PUSH
14260: LD_INT 118
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: ST_TO_ADDR
14286: GO 15741
14288: LD_INT 13
14290: DOUBLE
14291: EQUAL
14292: IFTRUE 14296
14294: GO 14504
14296: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14297: LD_ADDR_VAR 0 2
14301: PUSH
14302: LD_INT 1
14304: PUSH
14305: LD_INT 2
14307: PUSH
14308: LD_INT 3
14310: PUSH
14311: LD_INT 4
14313: PUSH
14314: LD_INT 5
14316: PUSH
14317: LD_INT 8
14319: PUSH
14320: LD_INT 9
14322: PUSH
14323: LD_INT 10
14325: PUSH
14326: LD_INT 11
14328: PUSH
14329: LD_INT 12
14331: PUSH
14332: LD_INT 14
14334: PUSH
14335: LD_INT 15
14337: PUSH
14338: LD_INT 16
14340: PUSH
14341: LD_INT 17
14343: PUSH
14344: LD_INT 18
14346: PUSH
14347: LD_INT 19
14349: PUSH
14350: LD_INT 20
14352: PUSH
14353: LD_INT 21
14355: PUSH
14356: LD_INT 22
14358: PUSH
14359: LD_INT 23
14361: PUSH
14362: LD_INT 24
14364: PUSH
14365: LD_INT 25
14367: PUSH
14368: LD_INT 26
14370: PUSH
14371: LD_INT 27
14373: PUSH
14374: LD_INT 28
14376: PUSH
14377: LD_INT 30
14379: PUSH
14380: LD_INT 31
14382: PUSH
14383: LD_INT 32
14385: PUSH
14386: LD_INT 33
14388: PUSH
14389: LD_INT 34
14391: PUSH
14392: LD_INT 36
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 101
14430: PUSH
14431: LD_INT 102
14433: PUSH
14434: LD_INT 103
14436: PUSH
14437: LD_INT 104
14439: PUSH
14440: LD_INT 105
14442: PUSH
14443: LD_INT 106
14445: PUSH
14446: LD_INT 107
14448: PUSH
14449: LD_INT 108
14451: PUSH
14452: LD_INT 109
14454: PUSH
14455: LD_INT 110
14457: PUSH
14458: LD_INT 111
14460: PUSH
14461: LD_INT 112
14463: PUSH
14464: LD_INT 113
14466: PUSH
14467: LD_INT 114
14469: PUSH
14470: LD_INT 116
14472: PUSH
14473: LD_INT 117
14475: PUSH
14476: LD_INT 118
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: ST_TO_ADDR
14502: GO 15741
14504: LD_INT 14
14506: DOUBLE
14507: EQUAL
14508: IFTRUE 14512
14510: GO 14736
14512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14513: LD_ADDR_VAR 0 2
14517: PUSH
14518: LD_INT 1
14520: PUSH
14521: LD_INT 2
14523: PUSH
14524: LD_INT 3
14526: PUSH
14527: LD_INT 4
14529: PUSH
14530: LD_INT 5
14532: PUSH
14533: LD_INT 6
14535: PUSH
14536: LD_INT 7
14538: PUSH
14539: LD_INT 8
14541: PUSH
14542: LD_INT 9
14544: PUSH
14545: LD_INT 10
14547: PUSH
14548: LD_INT 11
14550: PUSH
14551: LD_INT 12
14553: PUSH
14554: LD_INT 13
14556: PUSH
14557: LD_INT 14
14559: PUSH
14560: LD_INT 15
14562: PUSH
14563: LD_INT 16
14565: PUSH
14566: LD_INT 17
14568: PUSH
14569: LD_INT 18
14571: PUSH
14572: LD_INT 19
14574: PUSH
14575: LD_INT 20
14577: PUSH
14578: LD_INT 21
14580: PUSH
14581: LD_INT 22
14583: PUSH
14584: LD_INT 23
14586: PUSH
14587: LD_INT 24
14589: PUSH
14590: LD_INT 25
14592: PUSH
14593: LD_INT 26
14595: PUSH
14596: LD_INT 27
14598: PUSH
14599: LD_INT 28
14601: PUSH
14602: LD_INT 29
14604: PUSH
14605: LD_INT 30
14607: PUSH
14608: LD_INT 31
14610: PUSH
14611: LD_INT 32
14613: PUSH
14614: LD_INT 33
14616: PUSH
14617: LD_INT 34
14619: PUSH
14620: LD_INT 36
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 101
14662: PUSH
14663: LD_INT 102
14665: PUSH
14666: LD_INT 103
14668: PUSH
14669: LD_INT 104
14671: PUSH
14672: LD_INT 105
14674: PUSH
14675: LD_INT 106
14677: PUSH
14678: LD_INT 107
14680: PUSH
14681: LD_INT 108
14683: PUSH
14684: LD_INT 109
14686: PUSH
14687: LD_INT 110
14689: PUSH
14690: LD_INT 111
14692: PUSH
14693: LD_INT 112
14695: PUSH
14696: LD_INT 113
14698: PUSH
14699: LD_INT 114
14701: PUSH
14702: LD_INT 116
14704: PUSH
14705: LD_INT 117
14707: PUSH
14708: LD_INT 118
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: ST_TO_ADDR
14734: GO 15741
14736: LD_INT 15
14738: DOUBLE
14739: EQUAL
14740: IFTRUE 14744
14742: GO 14968
14744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14745: LD_ADDR_VAR 0 2
14749: PUSH
14750: LD_INT 1
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: LD_INT 3
14758: PUSH
14759: LD_INT 4
14761: PUSH
14762: LD_INT 5
14764: PUSH
14765: LD_INT 6
14767: PUSH
14768: LD_INT 7
14770: PUSH
14771: LD_INT 8
14773: PUSH
14774: LD_INT 9
14776: PUSH
14777: LD_INT 10
14779: PUSH
14780: LD_INT 11
14782: PUSH
14783: LD_INT 12
14785: PUSH
14786: LD_INT 13
14788: PUSH
14789: LD_INT 14
14791: PUSH
14792: LD_INT 15
14794: PUSH
14795: LD_INT 16
14797: PUSH
14798: LD_INT 17
14800: PUSH
14801: LD_INT 18
14803: PUSH
14804: LD_INT 19
14806: PUSH
14807: LD_INT 20
14809: PUSH
14810: LD_INT 21
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_INT 23
14818: PUSH
14819: LD_INT 24
14821: PUSH
14822: LD_INT 25
14824: PUSH
14825: LD_INT 26
14827: PUSH
14828: LD_INT 27
14830: PUSH
14831: LD_INT 28
14833: PUSH
14834: LD_INT 29
14836: PUSH
14837: LD_INT 30
14839: PUSH
14840: LD_INT 31
14842: PUSH
14843: LD_INT 32
14845: PUSH
14846: LD_INT 33
14848: PUSH
14849: LD_INT 34
14851: PUSH
14852: LD_INT 36
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 101
14894: PUSH
14895: LD_INT 102
14897: PUSH
14898: LD_INT 103
14900: PUSH
14901: LD_INT 104
14903: PUSH
14904: LD_INT 105
14906: PUSH
14907: LD_INT 106
14909: PUSH
14910: LD_INT 107
14912: PUSH
14913: LD_INT 108
14915: PUSH
14916: LD_INT 109
14918: PUSH
14919: LD_INT 110
14921: PUSH
14922: LD_INT 111
14924: PUSH
14925: LD_INT 112
14927: PUSH
14928: LD_INT 113
14930: PUSH
14931: LD_INT 114
14933: PUSH
14934: LD_INT 116
14936: PUSH
14937: LD_INT 117
14939: PUSH
14940: LD_INT 118
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: ST_TO_ADDR
14966: GO 15741
14968: LD_INT 16
14970: DOUBLE
14971: EQUAL
14972: IFTRUE 14976
14974: GO 15112
14976: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14977: LD_ADDR_VAR 0 2
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: LD_INT 4
14987: PUSH
14988: LD_INT 5
14990: PUSH
14991: LD_INT 7
14993: PUSH
14994: LD_INT 11
14996: PUSH
14997: LD_INT 12
14999: PUSH
15000: LD_INT 15
15002: PUSH
15003: LD_INT 16
15005: PUSH
15006: LD_INT 20
15008: PUSH
15009: LD_INT 21
15011: PUSH
15012: LD_INT 22
15014: PUSH
15015: LD_INT 23
15017: PUSH
15018: LD_INT 25
15020: PUSH
15021: LD_INT 26
15023: PUSH
15024: LD_INT 30
15026: PUSH
15027: LD_INT 31
15029: PUSH
15030: LD_INT 32
15032: PUSH
15033: LD_INT 33
15035: PUSH
15036: LD_INT 34
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 101
15062: PUSH
15063: LD_INT 102
15065: PUSH
15066: LD_INT 103
15068: PUSH
15069: LD_INT 106
15071: PUSH
15072: LD_INT 108
15074: PUSH
15075: LD_INT 112
15077: PUSH
15078: LD_INT 113
15080: PUSH
15081: LD_INT 114
15083: PUSH
15084: LD_INT 116
15086: PUSH
15087: LD_INT 117
15089: PUSH
15090: LD_INT 118
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: ST_TO_ADDR
15110: GO 15741
15112: LD_INT 17
15114: DOUBLE
15115: EQUAL
15116: IFTRUE 15120
15118: GO 15344
15120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15121: LD_ADDR_VAR 0 2
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: LD_INT 2
15131: PUSH
15132: LD_INT 3
15134: PUSH
15135: LD_INT 4
15137: PUSH
15138: LD_INT 5
15140: PUSH
15141: LD_INT 6
15143: PUSH
15144: LD_INT 7
15146: PUSH
15147: LD_INT 8
15149: PUSH
15150: LD_INT 9
15152: PUSH
15153: LD_INT 10
15155: PUSH
15156: LD_INT 11
15158: PUSH
15159: LD_INT 12
15161: PUSH
15162: LD_INT 13
15164: PUSH
15165: LD_INT 14
15167: PUSH
15168: LD_INT 15
15170: PUSH
15171: LD_INT 16
15173: PUSH
15174: LD_INT 17
15176: PUSH
15177: LD_INT 18
15179: PUSH
15180: LD_INT 19
15182: PUSH
15183: LD_INT 20
15185: PUSH
15186: LD_INT 21
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: LD_INT 23
15194: PUSH
15195: LD_INT 24
15197: PUSH
15198: LD_INT 25
15200: PUSH
15201: LD_INT 26
15203: PUSH
15204: LD_INT 27
15206: PUSH
15207: LD_INT 28
15209: PUSH
15210: LD_INT 29
15212: PUSH
15213: LD_INT 30
15215: PUSH
15216: LD_INT 31
15218: PUSH
15219: LD_INT 32
15221: PUSH
15222: LD_INT 33
15224: PUSH
15225: LD_INT 34
15227: PUSH
15228: LD_INT 36
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: PUSH
15268: LD_INT 101
15270: PUSH
15271: LD_INT 102
15273: PUSH
15274: LD_INT 103
15276: PUSH
15277: LD_INT 104
15279: PUSH
15280: LD_INT 105
15282: PUSH
15283: LD_INT 106
15285: PUSH
15286: LD_INT 107
15288: PUSH
15289: LD_INT 108
15291: PUSH
15292: LD_INT 109
15294: PUSH
15295: LD_INT 110
15297: PUSH
15298: LD_INT 111
15300: PUSH
15301: LD_INT 112
15303: PUSH
15304: LD_INT 113
15306: PUSH
15307: LD_INT 114
15309: PUSH
15310: LD_INT 116
15312: PUSH
15313: LD_INT 117
15315: PUSH
15316: LD_INT 118
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: ST_TO_ADDR
15342: GO 15741
15344: LD_INT 18
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15500
15352: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15353: LD_ADDR_VAR 0 2
15357: PUSH
15358: LD_INT 2
15360: PUSH
15361: LD_INT 4
15363: PUSH
15364: LD_INT 5
15366: PUSH
15367: LD_INT 7
15369: PUSH
15370: LD_INT 11
15372: PUSH
15373: LD_INT 12
15375: PUSH
15376: LD_INT 15
15378: PUSH
15379: LD_INT 16
15381: PUSH
15382: LD_INT 20
15384: PUSH
15385: LD_INT 21
15387: PUSH
15388: LD_INT 22
15390: PUSH
15391: LD_INT 23
15393: PUSH
15394: LD_INT 25
15396: PUSH
15397: LD_INT 26
15399: PUSH
15400: LD_INT 30
15402: PUSH
15403: LD_INT 31
15405: PUSH
15406: LD_INT 32
15408: PUSH
15409: LD_INT 33
15411: PUSH
15412: LD_INT 34
15414: PUSH
15415: LD_INT 35
15417: PUSH
15418: LD_INT 36
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 101
15446: PUSH
15447: LD_INT 102
15449: PUSH
15450: LD_INT 103
15452: PUSH
15453: LD_INT 106
15455: PUSH
15456: LD_INT 108
15458: PUSH
15459: LD_INT 112
15461: PUSH
15462: LD_INT 113
15464: PUSH
15465: LD_INT 114
15467: PUSH
15468: LD_INT 115
15470: PUSH
15471: LD_INT 116
15473: PUSH
15474: LD_INT 117
15476: PUSH
15477: LD_INT 118
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: ST_TO_ADDR
15498: GO 15741
15500: LD_INT 19
15502: DOUBLE
15503: EQUAL
15504: IFTRUE 15508
15506: GO 15740
15508: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_INT 1
15516: PUSH
15517: LD_INT 2
15519: PUSH
15520: LD_INT 3
15522: PUSH
15523: LD_INT 4
15525: PUSH
15526: LD_INT 5
15528: PUSH
15529: LD_INT 6
15531: PUSH
15532: LD_INT 7
15534: PUSH
15535: LD_INT 8
15537: PUSH
15538: LD_INT 9
15540: PUSH
15541: LD_INT 10
15543: PUSH
15544: LD_INT 11
15546: PUSH
15547: LD_INT 12
15549: PUSH
15550: LD_INT 13
15552: PUSH
15553: LD_INT 14
15555: PUSH
15556: LD_INT 15
15558: PUSH
15559: LD_INT 16
15561: PUSH
15562: LD_INT 17
15564: PUSH
15565: LD_INT 18
15567: PUSH
15568: LD_INT 19
15570: PUSH
15571: LD_INT 20
15573: PUSH
15574: LD_INT 21
15576: PUSH
15577: LD_INT 22
15579: PUSH
15580: LD_INT 23
15582: PUSH
15583: LD_INT 24
15585: PUSH
15586: LD_INT 25
15588: PUSH
15589: LD_INT 26
15591: PUSH
15592: LD_INT 27
15594: PUSH
15595: LD_INT 28
15597: PUSH
15598: LD_INT 29
15600: PUSH
15601: LD_INT 30
15603: PUSH
15604: LD_INT 31
15606: PUSH
15607: LD_INT 32
15609: PUSH
15610: LD_INT 33
15612: PUSH
15613: LD_INT 34
15615: PUSH
15616: LD_INT 35
15618: PUSH
15619: LD_INT 36
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 101
15662: PUSH
15663: LD_INT 102
15665: PUSH
15666: LD_INT 103
15668: PUSH
15669: LD_INT 104
15671: PUSH
15672: LD_INT 105
15674: PUSH
15675: LD_INT 106
15677: PUSH
15678: LD_INT 107
15680: PUSH
15681: LD_INT 108
15683: PUSH
15684: LD_INT 109
15686: PUSH
15687: LD_INT 110
15689: PUSH
15690: LD_INT 111
15692: PUSH
15693: LD_INT 112
15695: PUSH
15696: LD_INT 113
15698: PUSH
15699: LD_INT 114
15701: PUSH
15702: LD_INT 115
15704: PUSH
15705: LD_INT 116
15707: PUSH
15708: LD_INT 117
15710: PUSH
15711: LD_INT 118
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: ST_TO_ADDR
15738: GO 15741
15740: POP
// end else
15741: GO 15972
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15743: LD_ADDR_VAR 0 2
15747: PUSH
15748: LD_INT 1
15750: PUSH
15751: LD_INT 2
15753: PUSH
15754: LD_INT 3
15756: PUSH
15757: LD_INT 4
15759: PUSH
15760: LD_INT 5
15762: PUSH
15763: LD_INT 6
15765: PUSH
15766: LD_INT 7
15768: PUSH
15769: LD_INT 8
15771: PUSH
15772: LD_INT 9
15774: PUSH
15775: LD_INT 10
15777: PUSH
15778: LD_INT 11
15780: PUSH
15781: LD_INT 12
15783: PUSH
15784: LD_INT 13
15786: PUSH
15787: LD_INT 14
15789: PUSH
15790: LD_INT 15
15792: PUSH
15793: LD_INT 16
15795: PUSH
15796: LD_INT 17
15798: PUSH
15799: LD_INT 18
15801: PUSH
15802: LD_INT 19
15804: PUSH
15805: LD_INT 20
15807: PUSH
15808: LD_INT 21
15810: PUSH
15811: LD_INT 22
15813: PUSH
15814: LD_INT 23
15816: PUSH
15817: LD_INT 24
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 26
15825: PUSH
15826: LD_INT 27
15828: PUSH
15829: LD_INT 28
15831: PUSH
15832: LD_INT 29
15834: PUSH
15835: LD_INT 30
15837: PUSH
15838: LD_INT 31
15840: PUSH
15841: LD_INT 32
15843: PUSH
15844: LD_INT 33
15846: PUSH
15847: LD_INT 34
15849: PUSH
15850: LD_INT 35
15852: PUSH
15853: LD_INT 36
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 101
15896: PUSH
15897: LD_INT 102
15899: PUSH
15900: LD_INT 103
15902: PUSH
15903: LD_INT 104
15905: PUSH
15906: LD_INT 105
15908: PUSH
15909: LD_INT 106
15911: PUSH
15912: LD_INT 107
15914: PUSH
15915: LD_INT 108
15917: PUSH
15918: LD_INT 109
15920: PUSH
15921: LD_INT 110
15923: PUSH
15924: LD_INT 111
15926: PUSH
15927: LD_INT 112
15929: PUSH
15930: LD_INT 113
15932: PUSH
15933: LD_INT 114
15935: PUSH
15936: LD_INT 115
15938: PUSH
15939: LD_INT 116
15941: PUSH
15942: LD_INT 117
15944: PUSH
15945: LD_INT 118
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: ST_TO_ADDR
// if result then
15972: LD_VAR 0 2
15976: IFFALSE 16762
// begin normal :=  ;
15978: LD_ADDR_VAR 0 5
15982: PUSH
15983: LD_STRING 
15985: ST_TO_ADDR
// hardcore :=  ;
15986: LD_ADDR_VAR 0 6
15990: PUSH
15991: LD_STRING 
15993: ST_TO_ADDR
// active :=  ;
15994: LD_ADDR_VAR 0 7
15998: PUSH
15999: LD_STRING 
16001: ST_TO_ADDR
// for i = 1 to normalCounter do
16002: LD_ADDR_VAR 0 8
16006: PUSH
16007: DOUBLE
16008: LD_INT 1
16010: DEC
16011: ST_TO_ADDR
16012: LD_EXP 46
16016: PUSH
16017: FOR_TO
16018: IFFALSE 16119
// begin tmp := 0 ;
16020: LD_ADDR_VAR 0 3
16024: PUSH
16025: LD_STRING 0
16027: ST_TO_ADDR
// if result [ 1 ] then
16028: LD_VAR 0 2
16032: PUSH
16033: LD_INT 1
16035: ARRAY
16036: IFFALSE 16101
// if result [ 1 ] [ 1 ] = i then
16038: LD_VAR 0 2
16042: PUSH
16043: LD_INT 1
16045: ARRAY
16046: PUSH
16047: LD_INT 1
16049: ARRAY
16050: PUSH
16051: LD_VAR 0 8
16055: EQUAL
16056: IFFALSE 16101
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16058: LD_ADDR_VAR 0 2
16062: PUSH
16063: LD_VAR 0 2
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: LD_VAR 0 2
16075: PUSH
16076: LD_INT 1
16078: ARRAY
16079: PPUSH
16080: LD_INT 1
16082: PPUSH
16083: CALL_OW 3
16087: PPUSH
16088: CALL_OW 1
16092: ST_TO_ADDR
// tmp := 1 ;
16093: LD_ADDR_VAR 0 3
16097: PUSH
16098: LD_STRING 1
16100: ST_TO_ADDR
// end ; normal := normal & tmp ;
16101: LD_ADDR_VAR 0 5
16105: PUSH
16106: LD_VAR 0 5
16110: PUSH
16111: LD_VAR 0 3
16115: STR
16116: ST_TO_ADDR
// end ;
16117: GO 16017
16119: POP
16120: POP
// for i = 1 to hardcoreCounter do
16121: LD_ADDR_VAR 0 8
16125: PUSH
16126: DOUBLE
16127: LD_INT 1
16129: DEC
16130: ST_TO_ADDR
16131: LD_EXP 47
16135: PUSH
16136: FOR_TO
16137: IFFALSE 16242
// begin tmp := 0 ;
16139: LD_ADDR_VAR 0 3
16143: PUSH
16144: LD_STRING 0
16146: ST_TO_ADDR
// if result [ 2 ] then
16147: LD_VAR 0 2
16151: PUSH
16152: LD_INT 2
16154: ARRAY
16155: IFFALSE 16224
// if result [ 2 ] [ 1 ] = 100 + i then
16157: LD_VAR 0 2
16161: PUSH
16162: LD_INT 2
16164: ARRAY
16165: PUSH
16166: LD_INT 1
16168: ARRAY
16169: PUSH
16170: LD_INT 100
16172: PUSH
16173: LD_VAR 0 8
16177: PLUS
16178: EQUAL
16179: IFFALSE 16224
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16181: LD_ADDR_VAR 0 2
16185: PUSH
16186: LD_VAR 0 2
16190: PPUSH
16191: LD_INT 2
16193: PPUSH
16194: LD_VAR 0 2
16198: PUSH
16199: LD_INT 2
16201: ARRAY
16202: PPUSH
16203: LD_INT 1
16205: PPUSH
16206: CALL_OW 3
16210: PPUSH
16211: CALL_OW 1
16215: ST_TO_ADDR
// tmp := 1 ;
16216: LD_ADDR_VAR 0 3
16220: PUSH
16221: LD_STRING 1
16223: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16224: LD_ADDR_VAR 0 6
16228: PUSH
16229: LD_VAR 0 6
16233: PUSH
16234: LD_VAR 0 3
16238: STR
16239: ST_TO_ADDR
// end ;
16240: GO 16136
16242: POP
16243: POP
// if isGameLoad then
16244: LD_VAR 0 1
16248: IFFALSE 16723
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16250: LD_ADDR_VAR 0 4
16254: PUSH
16255: LD_EXP 50
16259: PUSH
16260: LD_EXP 49
16264: PUSH
16265: LD_EXP 51
16269: PUSH
16270: LD_EXP 48
16274: PUSH
16275: LD_EXP 52
16279: PUSH
16280: LD_EXP 53
16284: PUSH
16285: LD_EXP 54
16289: PUSH
16290: LD_EXP 55
16294: PUSH
16295: LD_EXP 56
16299: PUSH
16300: LD_EXP 57
16304: PUSH
16305: LD_EXP 58
16309: PUSH
16310: LD_EXP 59
16314: PUSH
16315: LD_EXP 60
16319: PUSH
16320: LD_EXP 61
16324: PUSH
16325: LD_EXP 69
16329: PUSH
16330: LD_EXP 70
16334: PUSH
16335: LD_EXP 71
16339: PUSH
16340: LD_EXP 72
16344: PUSH
16345: LD_EXP 74
16349: PUSH
16350: LD_EXP 75
16354: PUSH
16355: LD_EXP 76
16359: PUSH
16360: LD_EXP 79
16364: PUSH
16365: LD_EXP 81
16369: PUSH
16370: LD_EXP 82
16374: PUSH
16375: LD_EXP 83
16379: PUSH
16380: LD_EXP 85
16384: PUSH
16385: LD_EXP 86
16389: PUSH
16390: LD_EXP 89
16394: PUSH
16395: LD_EXP 90
16399: PUSH
16400: LD_EXP 91
16404: PUSH
16405: LD_EXP 92
16409: PUSH
16410: LD_EXP 93
16414: PUSH
16415: LD_EXP 94
16419: PUSH
16420: LD_EXP 95
16424: PUSH
16425: LD_EXP 96
16429: PUSH
16430: LD_EXP 97
16434: PUSH
16435: LD_EXP 62
16439: PUSH
16440: LD_EXP 63
16444: PUSH
16445: LD_EXP 66
16449: PUSH
16450: LD_EXP 67
16454: PUSH
16455: LD_EXP 68
16459: PUSH
16460: LD_EXP 64
16464: PUSH
16465: LD_EXP 65
16469: PUSH
16470: LD_EXP 73
16474: PUSH
16475: LD_EXP 77
16479: PUSH
16480: LD_EXP 78
16484: PUSH
16485: LD_EXP 80
16489: PUSH
16490: LD_EXP 84
16494: PUSH
16495: LD_EXP 87
16499: PUSH
16500: LD_EXP 88
16504: PUSH
16505: LD_EXP 98
16509: PUSH
16510: LD_EXP 99
16514: PUSH
16515: LD_EXP 100
16519: PUSH
16520: LD_EXP 101
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: ST_TO_ADDR
// tmp :=  ;
16581: LD_ADDR_VAR 0 3
16585: PUSH
16586: LD_STRING 
16588: ST_TO_ADDR
// for i = 1 to normalCounter do
16589: LD_ADDR_VAR 0 8
16593: PUSH
16594: DOUBLE
16595: LD_INT 1
16597: DEC
16598: ST_TO_ADDR
16599: LD_EXP 46
16603: PUSH
16604: FOR_TO
16605: IFFALSE 16641
// begin if flags [ i ] then
16607: LD_VAR 0 4
16611: PUSH
16612: LD_VAR 0 8
16616: ARRAY
16617: IFFALSE 16639
// tmp := tmp & i & ; ;
16619: LD_ADDR_VAR 0 3
16623: PUSH
16624: LD_VAR 0 3
16628: PUSH
16629: LD_VAR 0 8
16633: STR
16634: PUSH
16635: LD_STRING ;
16637: STR
16638: ST_TO_ADDR
// end ;
16639: GO 16604
16641: POP
16642: POP
// for i = 1 to hardcoreCounter do
16643: LD_ADDR_VAR 0 8
16647: PUSH
16648: DOUBLE
16649: LD_INT 1
16651: DEC
16652: ST_TO_ADDR
16653: LD_EXP 47
16657: PUSH
16658: FOR_TO
16659: IFFALSE 16705
// begin if flags [ normalCounter + i ] then
16661: LD_VAR 0 4
16665: PUSH
16666: LD_EXP 46
16670: PUSH
16671: LD_VAR 0 8
16675: PLUS
16676: ARRAY
16677: IFFALSE 16703
// tmp := tmp & ( 100 + i ) & ; ;
16679: LD_ADDR_VAR 0 3
16683: PUSH
16684: LD_VAR 0 3
16688: PUSH
16689: LD_INT 100
16691: PUSH
16692: LD_VAR 0 8
16696: PLUS
16697: STR
16698: PUSH
16699: LD_STRING ;
16701: STR
16702: ST_TO_ADDR
// end ;
16703: GO 16658
16705: POP
16706: POP
// if tmp then
16707: LD_VAR 0 3
16711: IFFALSE 16723
// active := tmp ;
16713: LD_ADDR_VAR 0 7
16717: PUSH
16718: LD_VAR 0 3
16722: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16723: LD_STRING getStreamItemsFromMission("
16725: PUSH
16726: LD_VAR 0 5
16730: STR
16731: PUSH
16732: LD_STRING ","
16734: STR
16735: PUSH
16736: LD_VAR 0 6
16740: STR
16741: PUSH
16742: LD_STRING ","
16744: STR
16745: PUSH
16746: LD_VAR 0 7
16750: STR
16751: PUSH
16752: LD_STRING ")
16754: STR
16755: PPUSH
16756: CALL_OW 559
// end else
16760: GO 16769
// ToLua ( getStreamItemsFromMission("","","") ) ;
16762: LD_STRING getStreamItemsFromMission("","","")
16764: PPUSH
16765: CALL_OW 559
// end ;
16769: LD_VAR 0 2
16773: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16774: LD_EXP 45
16778: IFFALSE 16786
16780: PUSH
16781: LD_EXP 50
16785: AND
16786: IFFALSE 16910
16788: GO 16790
16790: DISABLE
16791: LD_INT 0
16793: PPUSH
16794: PPUSH
// begin enable ;
16795: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16796: LD_ADDR_VAR 0 2
16800: PUSH
16801: LD_INT 22
16803: PUSH
16804: LD_OWVAR 2
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 2
16815: PUSH
16816: LD_INT 34
16818: PUSH
16819: LD_INT 7
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 34
16828: PUSH
16829: LD_INT 45
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 34
16838: PUSH
16839: LD_INT 28
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 34
16848: PUSH
16849: LD_INT 47
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PPUSH
16867: CALL_OW 69
16871: ST_TO_ADDR
// if not tmp then
16872: LD_VAR 0 2
16876: NOT
16877: IFFALSE 16881
// exit ;
16879: GO 16910
// for i in tmp do
16881: LD_ADDR_VAR 0 1
16885: PUSH
16886: LD_VAR 0 2
16890: PUSH
16891: FOR_IN
16892: IFFALSE 16908
// begin SetLives ( i , 0 ) ;
16894: LD_VAR 0 1
16898: PPUSH
16899: LD_INT 0
16901: PPUSH
16902: CALL_OW 234
// end ;
16906: GO 16891
16908: POP
16909: POP
// end ;
16910: PPOPN 2
16912: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16913: LD_EXP 45
16917: IFFALSE 16925
16919: PUSH
16920: LD_EXP 51
16924: AND
16925: IFFALSE 17009
16927: GO 16929
16929: DISABLE
16930: LD_INT 0
16932: PPUSH
16933: PPUSH
// begin enable ;
16934: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16935: LD_ADDR_VAR 0 2
16939: PUSH
16940: LD_INT 22
16942: PUSH
16943: LD_OWVAR 2
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 32
16954: PUSH
16955: LD_INT 3
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 69
16970: ST_TO_ADDR
// if not tmp then
16971: LD_VAR 0 2
16975: NOT
16976: IFFALSE 16980
// exit ;
16978: GO 17009
// for i in tmp do
16980: LD_ADDR_VAR 0 1
16984: PUSH
16985: LD_VAR 0 2
16989: PUSH
16990: FOR_IN
16991: IFFALSE 17007
// begin SetLives ( i , 0 ) ;
16993: LD_VAR 0 1
16997: PPUSH
16998: LD_INT 0
17000: PPUSH
17001: CALL_OW 234
// end ;
17005: GO 16990
17007: POP
17008: POP
// end ;
17009: PPOPN 2
17011: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17012: LD_EXP 45
17016: IFFALSE 17024
17018: PUSH
17019: LD_EXP 48
17023: AND
17024: IFFALSE 17117
17026: GO 17028
17028: DISABLE
17029: LD_INT 0
17031: PPUSH
// begin enable ;
17032: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17033: LD_ADDR_VAR 0 1
17037: PUSH
17038: LD_INT 22
17040: PUSH
17041: LD_OWVAR 2
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 2
17052: PUSH
17053: LD_INT 25
17055: PUSH
17056: LD_INT 5
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 25
17065: PUSH
17066: LD_INT 9
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 25
17075: PUSH
17076: LD_INT 8
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL_OW 69
17097: PUSH
17098: FOR_IN
17099: IFFALSE 17115
// begin SetClass ( i , 1 ) ;
17101: LD_VAR 0 1
17105: PPUSH
17106: LD_INT 1
17108: PPUSH
17109: CALL_OW 336
// end ;
17113: GO 17098
17115: POP
17116: POP
// end ;
17117: PPOPN 1
17119: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17120: LD_EXP 45
17124: IFFALSE 17132
17126: PUSH
17127: LD_EXP 49
17131: AND
17132: IFFALSE 17144
17134: PUSH
17135: LD_OWVAR 65
17139: PUSH
17140: LD_INT 7
17142: LESS
17143: AND
17144: IFFALSE 17158
17146: GO 17148
17148: DISABLE
// begin enable ;
17149: ENABLE
// game_speed := 7 ;
17150: LD_ADDR_OWVAR 65
17154: PUSH
17155: LD_INT 7
17157: ST_TO_ADDR
// end ;
17158: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17159: LD_EXP 45
17163: IFFALSE 17171
17165: PUSH
17166: LD_EXP 52
17170: AND
17171: IFFALSE 17373
17173: GO 17175
17175: DISABLE
17176: LD_INT 0
17178: PPUSH
17179: PPUSH
17180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17181: LD_ADDR_VAR 0 3
17185: PUSH
17186: LD_INT 81
17188: PUSH
17189: LD_OWVAR 2
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 21
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PPUSH
17212: CALL_OW 69
17216: ST_TO_ADDR
// if not tmp then
17217: LD_VAR 0 3
17221: NOT
17222: IFFALSE 17226
// exit ;
17224: GO 17373
// if tmp > 5 then
17226: LD_VAR 0 3
17230: PUSH
17231: LD_INT 5
17233: GREATER
17234: IFFALSE 17246
// k := 5 else
17236: LD_ADDR_VAR 0 2
17240: PUSH
17241: LD_INT 5
17243: ST_TO_ADDR
17244: GO 17256
// k := tmp ;
17246: LD_ADDR_VAR 0 2
17250: PUSH
17251: LD_VAR 0 3
17255: ST_TO_ADDR
// for i := 1 to k do
17256: LD_ADDR_VAR 0 1
17260: PUSH
17261: DOUBLE
17262: LD_INT 1
17264: DEC
17265: ST_TO_ADDR
17266: LD_VAR 0 2
17270: PUSH
17271: FOR_TO
17272: IFFALSE 17371
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17274: LD_VAR 0 3
17278: PUSH
17279: LD_VAR 0 1
17283: ARRAY
17284: PPUSH
17285: LD_VAR 0 1
17289: PUSH
17290: LD_INT 4
17292: MOD
17293: PUSH
17294: LD_INT 1
17296: PLUS
17297: PPUSH
17298: CALL_OW 259
17302: PUSH
17303: LD_INT 10
17305: LESS
17306: IFFALSE 17369
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17308: LD_VAR 0 3
17312: PUSH
17313: LD_VAR 0 1
17317: ARRAY
17318: PPUSH
17319: LD_VAR 0 1
17323: PUSH
17324: LD_INT 4
17326: MOD
17327: PUSH
17328: LD_INT 1
17330: PLUS
17331: PPUSH
17332: LD_VAR 0 3
17336: PUSH
17337: LD_VAR 0 1
17341: ARRAY
17342: PPUSH
17343: LD_VAR 0 1
17347: PUSH
17348: LD_INT 4
17350: MOD
17351: PUSH
17352: LD_INT 1
17354: PLUS
17355: PPUSH
17356: CALL_OW 259
17360: PUSH
17361: LD_INT 1
17363: PLUS
17364: PPUSH
17365: CALL_OW 237
17369: GO 17271
17371: POP
17372: POP
// end ;
17373: PPOPN 3
17375: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17376: LD_EXP 45
17380: IFFALSE 17388
17382: PUSH
17383: LD_EXP 53
17387: AND
17388: IFFALSE 17408
17390: GO 17392
17392: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17393: LD_INT 4
17395: PPUSH
17396: LD_OWVAR 2
17400: PPUSH
17401: LD_INT 0
17403: PPUSH
17404: CALL_OW 324
17408: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17409: LD_EXP 45
17413: IFFALSE 17421
17415: PUSH
17416: LD_EXP 82
17420: AND
17421: IFFALSE 17441
17423: GO 17425
17425: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17426: LD_INT 19
17428: PPUSH
17429: LD_OWVAR 2
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: CALL_OW 324
17441: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17442: LD_EXP 45
17446: IFFALSE 17454
17448: PUSH
17449: LD_EXP 54
17453: AND
17454: IFFALSE 17556
17456: GO 17458
17458: DISABLE
17459: LD_INT 0
17461: PPUSH
17462: PPUSH
// begin enable ;
17463: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17464: LD_ADDR_VAR 0 2
17468: PUSH
17469: LD_INT 22
17471: PUSH
17472: LD_OWVAR 2
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 2
17483: PUSH
17484: LD_INT 34
17486: PUSH
17487: LD_INT 11
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 34
17496: PUSH
17497: LD_INT 30
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 69
17517: ST_TO_ADDR
// if not tmp then
17518: LD_VAR 0 2
17522: NOT
17523: IFFALSE 17527
// exit ;
17525: GO 17556
// for i in tmp do
17527: LD_ADDR_VAR 0 1
17531: PUSH
17532: LD_VAR 0 2
17536: PUSH
17537: FOR_IN
17538: IFFALSE 17554
// begin SetLives ( i , 0 ) ;
17540: LD_VAR 0 1
17544: PPUSH
17545: LD_INT 0
17547: PPUSH
17548: CALL_OW 234
// end ;
17552: GO 17537
17554: POP
17555: POP
// end ;
17556: PPOPN 2
17558: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17559: LD_EXP 45
17563: IFFALSE 17571
17565: PUSH
17566: LD_EXP 55
17570: AND
17571: IFFALSE 17591
17573: GO 17575
17575: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17576: LD_INT 32
17578: PPUSH
17579: LD_OWVAR 2
17583: PPUSH
17584: LD_INT 0
17586: PPUSH
17587: CALL_OW 324
17591: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17592: LD_EXP 45
17596: IFFALSE 17604
17598: PUSH
17599: LD_EXP 56
17603: AND
17604: IFFALSE 17787
17606: GO 17608
17608: DISABLE
17609: LD_INT 0
17611: PPUSH
17612: PPUSH
17613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17614: LD_ADDR_VAR 0 2
17618: PUSH
17619: LD_INT 22
17621: PUSH
17622: LD_OWVAR 2
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 33
17633: PUSH
17634: LD_INT 3
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PPUSH
17645: CALL_OW 69
17649: ST_TO_ADDR
// if not tmp then
17650: LD_VAR 0 2
17654: NOT
17655: IFFALSE 17659
// exit ;
17657: GO 17787
// side := 0 ;
17659: LD_ADDR_VAR 0 3
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// for i := 1 to 8 do
17667: LD_ADDR_VAR 0 1
17671: PUSH
17672: DOUBLE
17673: LD_INT 1
17675: DEC
17676: ST_TO_ADDR
17677: LD_INT 8
17679: PUSH
17680: FOR_TO
17681: IFFALSE 17731
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17683: LD_OWVAR 2
17687: PUSH
17688: LD_VAR 0 1
17692: NONEQUAL
17693: IFFALSE 17715
17695: PUSH
17696: LD_OWVAR 2
17700: PPUSH
17701: LD_VAR 0 1
17705: PPUSH
17706: CALL_OW 81
17710: PUSH
17711: LD_INT 2
17713: EQUAL
17714: AND
17715: IFFALSE 17729
// begin side := i ;
17717: LD_ADDR_VAR 0 3
17721: PUSH
17722: LD_VAR 0 1
17726: ST_TO_ADDR
// break ;
17727: GO 17731
// end ;
17729: GO 17680
17731: POP
17732: POP
// if not side then
17733: LD_VAR 0 3
17737: NOT
17738: IFFALSE 17742
// exit ;
17740: GO 17787
// for i := 1 to tmp do
17742: LD_ADDR_VAR 0 1
17746: PUSH
17747: DOUBLE
17748: LD_INT 1
17750: DEC
17751: ST_TO_ADDR
17752: LD_VAR 0 2
17756: PUSH
17757: FOR_TO
17758: IFFALSE 17785
// if Prob ( 60 ) then
17760: LD_INT 60
17762: PPUSH
17763: CALL_OW 13
17767: IFFALSE 17783
// SetSide ( i , side ) ;
17769: LD_VAR 0 1
17773: PPUSH
17774: LD_VAR 0 3
17778: PPUSH
17779: CALL_OW 235
17783: GO 17757
17785: POP
17786: POP
// end ;
17787: PPOPN 3
17789: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17790: LD_EXP 45
17794: IFFALSE 17802
17796: PUSH
17797: LD_EXP 58
17801: AND
17802: IFFALSE 17921
17804: GO 17806
17806: DISABLE
17807: LD_INT 0
17809: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17810: LD_ADDR_VAR 0 1
17814: PUSH
17815: LD_INT 22
17817: PUSH
17818: LD_OWVAR 2
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 21
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 3
17839: PUSH
17840: LD_INT 23
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: LIST
17858: PPUSH
17859: CALL_OW 69
17863: PUSH
17864: FOR_IN
17865: IFFALSE 17919
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17867: LD_VAR 0 1
17871: PPUSH
17872: CALL_OW 257
17876: PUSH
17877: LD_INT 1
17879: PUSH
17880: LD_INT 2
17882: PUSH
17883: LD_INT 3
17885: PUSH
17886: LD_INT 4
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: IN
17895: IFFALSE 17917
// SetClass ( un , rand ( 1 , 4 ) ) ;
17897: LD_VAR 0 1
17901: PPUSH
17902: LD_INT 1
17904: PPUSH
17905: LD_INT 4
17907: PPUSH
17908: CALL_OW 12
17912: PPUSH
17913: CALL_OW 336
17917: GO 17864
17919: POP
17920: POP
// end ;
17921: PPOPN 1
17923: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17924: LD_EXP 45
17928: IFFALSE 17936
17930: PUSH
17931: LD_EXP 57
17935: AND
17936: IFFALSE 18015
17938: GO 17940
17940: DISABLE
17941: LD_INT 0
17943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17944: LD_ADDR_VAR 0 1
17948: PUSH
17949: LD_INT 22
17951: PUSH
17952: LD_OWVAR 2
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 21
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PPUSH
17975: CALL_OW 69
17979: ST_TO_ADDR
// if not tmp then
17980: LD_VAR 0 1
17984: NOT
17985: IFFALSE 17989
// exit ;
17987: GO 18015
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17989: LD_VAR 0 1
17993: PUSH
17994: LD_INT 1
17996: PPUSH
17997: LD_VAR 0 1
18001: PPUSH
18002: CALL_OW 12
18006: ARRAY
18007: PPUSH
18008: LD_INT 100
18010: PPUSH
18011: CALL_OW 234
// end ;
18015: PPOPN 1
18017: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18018: LD_EXP 45
18022: IFFALSE 18030
18024: PUSH
18025: LD_EXP 59
18029: AND
18030: IFFALSE 18128
18032: GO 18034
18034: DISABLE
18035: LD_INT 0
18037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18038: LD_ADDR_VAR 0 1
18042: PUSH
18043: LD_INT 22
18045: PUSH
18046: LD_OWVAR 2
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 21
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PPUSH
18069: CALL_OW 69
18073: ST_TO_ADDR
// if not tmp then
18074: LD_VAR 0 1
18078: NOT
18079: IFFALSE 18083
// exit ;
18081: GO 18128
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18083: LD_VAR 0 1
18087: PUSH
18088: LD_INT 1
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 12
18100: ARRAY
18101: PPUSH
18102: LD_INT 1
18104: PPUSH
18105: LD_INT 4
18107: PPUSH
18108: CALL_OW 12
18112: PPUSH
18113: LD_INT 3000
18115: PPUSH
18116: LD_INT 9000
18118: PPUSH
18119: CALL_OW 12
18123: PPUSH
18124: CALL_OW 492
// end ;
18128: PPOPN 1
18130: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18131: LD_EXP 45
18135: IFFALSE 18143
18137: PUSH
18138: LD_EXP 60
18142: AND
18143: IFFALSE 18163
18145: GO 18147
18147: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18148: LD_INT 1
18150: PPUSH
18151: LD_OWVAR 2
18155: PPUSH
18156: LD_INT 0
18158: PPUSH
18159: CALL_OW 324
18163: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18164: LD_EXP 45
18168: IFFALSE 18176
18170: PUSH
18171: LD_EXP 61
18175: AND
18176: IFFALSE 18259
18178: GO 18180
18180: DISABLE
18181: LD_INT 0
18183: PPUSH
18184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18185: LD_ADDR_VAR 0 2
18189: PUSH
18190: LD_INT 22
18192: PUSH
18193: LD_OWVAR 2
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 21
18204: PUSH
18205: LD_INT 3
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: ST_TO_ADDR
// if not tmp then
18221: LD_VAR 0 2
18225: NOT
18226: IFFALSE 18230
// exit ;
18228: GO 18259
// for i in tmp do
18230: LD_ADDR_VAR 0 1
18234: PUSH
18235: LD_VAR 0 2
18239: PUSH
18240: FOR_IN
18241: IFFALSE 18257
// SetBLevel ( i , 10 ) ;
18243: LD_VAR 0 1
18247: PPUSH
18248: LD_INT 10
18250: PPUSH
18251: CALL_OW 241
18255: GO 18240
18257: POP
18258: POP
// end ;
18259: PPOPN 2
18261: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18262: LD_EXP 45
18266: IFFALSE 18274
18268: PUSH
18269: LD_EXP 62
18273: AND
18274: IFFALSE 18385
18276: GO 18278
18278: DISABLE
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
18283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18284: LD_ADDR_VAR 0 3
18288: PUSH
18289: LD_INT 22
18291: PUSH
18292: LD_OWVAR 2
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 25
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PPUSH
18315: CALL_OW 69
18319: ST_TO_ADDR
// if not tmp then
18320: LD_VAR 0 3
18324: NOT
18325: IFFALSE 18329
// exit ;
18327: GO 18385
// un := tmp [ rand ( 1 , tmp ) ] ;
18329: LD_ADDR_VAR 0 2
18333: PUSH
18334: LD_VAR 0 3
18338: PUSH
18339: LD_INT 1
18341: PPUSH
18342: LD_VAR 0 3
18346: PPUSH
18347: CALL_OW 12
18351: ARRAY
18352: ST_TO_ADDR
// if Crawls ( un ) then
18353: LD_VAR 0 2
18357: PPUSH
18358: CALL_OW 318
18362: IFFALSE 18373
// ComWalk ( un ) ;
18364: LD_VAR 0 2
18368: PPUSH
18369: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18373: LD_VAR 0 2
18377: PPUSH
18378: LD_INT 5
18380: PPUSH
18381: CALL_OW 336
// end ;
18385: PPOPN 3
18387: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18388: LD_EXP 45
18392: IFFALSE 18400
18394: PUSH
18395: LD_EXP 63
18399: AND
18400: IFFALSE 18412
18402: PUSH
18403: LD_OWVAR 67
18407: PUSH
18408: LD_INT 4
18410: LESS
18411: AND
18412: IFFALSE 18431
18414: GO 18416
18416: DISABLE
// begin Difficulty := Difficulty + 1 ;
18417: LD_ADDR_OWVAR 67
18421: PUSH
18422: LD_OWVAR 67
18426: PUSH
18427: LD_INT 1
18429: PLUS
18430: ST_TO_ADDR
// end ;
18431: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18432: LD_EXP 45
18436: IFFALSE 18444
18438: PUSH
18439: LD_EXP 64
18443: AND
18444: IFFALSE 18547
18446: GO 18448
18448: DISABLE
18449: LD_INT 0
18451: PPUSH
// begin for i := 1 to 5 do
18452: LD_ADDR_VAR 0 1
18456: PUSH
18457: DOUBLE
18458: LD_INT 1
18460: DEC
18461: ST_TO_ADDR
18462: LD_INT 5
18464: PUSH
18465: FOR_TO
18466: IFFALSE 18545
// begin uc_nation := nation_nature ;
18468: LD_ADDR_OWVAR 21
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// uc_side := 0 ;
18476: LD_ADDR_OWVAR 20
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18484: LD_ADDR_OWVAR 29
18488: PUSH
18489: LD_INT 12
18491: PUSH
18492: LD_INT 12
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: ST_TO_ADDR
// hc_agressivity := 20 ;
18499: LD_ADDR_OWVAR 35
18503: PUSH
18504: LD_INT 20
18506: ST_TO_ADDR
// hc_class := class_tiger ;
18507: LD_ADDR_OWVAR 28
18511: PUSH
18512: LD_INT 14
18514: ST_TO_ADDR
// hc_gallery :=  ;
18515: LD_ADDR_OWVAR 33
18519: PUSH
18520: LD_STRING 
18522: ST_TO_ADDR
// hc_name :=  ;
18523: LD_ADDR_OWVAR 26
18527: PUSH
18528: LD_STRING 
18530: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18531: CALL_OW 44
18535: PPUSH
18536: LD_INT 0
18538: PPUSH
18539: CALL_OW 51
// end ;
18543: GO 18465
18545: POP
18546: POP
// end ;
18547: PPOPN 1
18549: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18550: LD_EXP 45
18554: IFFALSE 18562
18556: PUSH
18557: LD_EXP 65
18561: AND
18562: IFFALSE 18571
18564: GO 18566
18566: DISABLE
// StreamSibBomb ;
18567: CALL 18572 0 0
18571: END
// export function StreamSibBomb ; var i , x , y ; begin
18572: LD_INT 0
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
// result := false ;
18578: LD_ADDR_VAR 0 1
18582: PUSH
18583: LD_INT 0
18585: ST_TO_ADDR
// for i := 1 to 16 do
18586: LD_ADDR_VAR 0 2
18590: PUSH
18591: DOUBLE
18592: LD_INT 1
18594: DEC
18595: ST_TO_ADDR
18596: LD_INT 16
18598: PUSH
18599: FOR_TO
18600: IFFALSE 18799
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18602: LD_ADDR_VAR 0 3
18606: PUSH
18607: LD_INT 10
18609: PUSH
18610: LD_INT 20
18612: PUSH
18613: LD_INT 30
18615: PUSH
18616: LD_INT 40
18618: PUSH
18619: LD_INT 50
18621: PUSH
18622: LD_INT 60
18624: PUSH
18625: LD_INT 70
18627: PUSH
18628: LD_INT 80
18630: PUSH
18631: LD_INT 90
18633: PUSH
18634: LD_INT 100
18636: PUSH
18637: LD_INT 110
18639: PUSH
18640: LD_INT 120
18642: PUSH
18643: LD_INT 130
18645: PUSH
18646: LD_INT 140
18648: PUSH
18649: LD_INT 150
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 1
18671: PPUSH
18672: LD_INT 15
18674: PPUSH
18675: CALL_OW 12
18679: ARRAY
18680: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18681: LD_ADDR_VAR 0 4
18685: PUSH
18686: LD_INT 10
18688: PUSH
18689: LD_INT 20
18691: PUSH
18692: LD_INT 30
18694: PUSH
18695: LD_INT 40
18697: PUSH
18698: LD_INT 50
18700: PUSH
18701: LD_INT 60
18703: PUSH
18704: LD_INT 70
18706: PUSH
18707: LD_INT 80
18709: PUSH
18710: LD_INT 90
18712: PUSH
18713: LD_INT 100
18715: PUSH
18716: LD_INT 110
18718: PUSH
18719: LD_INT 120
18721: PUSH
18722: LD_INT 130
18724: PUSH
18725: LD_INT 140
18727: PUSH
18728: LD_INT 150
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 1
18750: PPUSH
18751: LD_INT 15
18753: PPUSH
18754: CALL_OW 12
18758: ARRAY
18759: ST_TO_ADDR
// if ValidHex ( x , y ) then
18760: LD_VAR 0 3
18764: PPUSH
18765: LD_VAR 0 4
18769: PPUSH
18770: CALL_OW 488
18774: IFFALSE 18797
// begin result := [ x , y ] ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_VAR 0 3
18785: PUSH
18786: LD_VAR 0 4
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: ST_TO_ADDR
// break ;
18795: GO 18799
// end ; end ;
18797: GO 18599
18799: POP
18800: POP
// if result then
18801: LD_VAR 0 1
18805: IFFALSE 18865
// begin ToLua ( playSibBomb() ) ;
18807: LD_STRING playSibBomb()
18809: PPUSH
18810: CALL_OW 559
// wait ( 0 0$14 ) ;
18814: LD_INT 490
18816: PPUSH
18817: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18821: LD_VAR 0 1
18825: PUSH
18826: LD_INT 1
18828: ARRAY
18829: PPUSH
18830: LD_VAR 0 1
18834: PUSH
18835: LD_INT 2
18837: ARRAY
18838: PPUSH
18839: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18843: LD_VAR 0 1
18847: PUSH
18848: LD_INT 1
18850: ARRAY
18851: PPUSH
18852: LD_VAR 0 1
18856: PUSH
18857: LD_INT 2
18859: ARRAY
18860: PPUSH
18861: CALL_OW 429
// end ; end ;
18865: LD_VAR 0 1
18869: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18870: LD_EXP 45
18874: IFFALSE 18882
18876: PUSH
18877: LD_EXP 67
18881: AND
18882: IFFALSE 18894
18884: GO 18886
18886: DISABLE
// YouLost (  ) ;
18887: LD_STRING 
18889: PPUSH
18890: CALL_OW 104
18894: END
// every 0 0$1 trigger StreamModeActive and sFog do
18895: LD_EXP 45
18899: IFFALSE 18907
18901: PUSH
18902: LD_EXP 66
18906: AND
18907: IFFALSE 18921
18909: GO 18911
18911: DISABLE
// FogOff ( your_side ) ;
18912: LD_OWVAR 2
18916: PPUSH
18917: CALL_OW 344
18921: END
// every 0 0$1 trigger StreamModeActive and sSun do
18922: LD_EXP 45
18926: IFFALSE 18934
18928: PUSH
18929: LD_EXP 68
18933: AND
18934: IFFALSE 18962
18936: GO 18938
18938: DISABLE
// begin solar_recharge_percent := 0 ;
18939: LD_ADDR_OWVAR 79
18943: PUSH
18944: LD_INT 0
18946: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18947: LD_INT 10500
18949: PPUSH
18950: CALL_OW 67
// solar_recharge_percent := 100 ;
18954: LD_ADDR_OWVAR 79
18958: PUSH
18959: LD_INT 100
18961: ST_TO_ADDR
// end ;
18962: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18963: LD_EXP 45
18967: IFFALSE 18975
18969: PUSH
18970: LD_EXP 69
18974: AND
18975: IFFALSE 19214
18977: GO 18979
18979: DISABLE
18980: LD_INT 0
18982: PPUSH
18983: PPUSH
18984: PPUSH
// begin tmp := [ ] ;
18985: LD_ADDR_VAR 0 3
18989: PUSH
18990: EMPTY
18991: ST_TO_ADDR
// for i := 1 to 6 do
18992: LD_ADDR_VAR 0 1
18996: PUSH
18997: DOUBLE
18998: LD_INT 1
19000: DEC
19001: ST_TO_ADDR
19002: LD_INT 6
19004: PUSH
19005: FOR_TO
19006: IFFALSE 19111
// begin uc_nation := nation_nature ;
19008: LD_ADDR_OWVAR 21
19012: PUSH
19013: LD_INT 0
19015: ST_TO_ADDR
// uc_side := 0 ;
19016: LD_ADDR_OWVAR 20
19020: PUSH
19021: LD_INT 0
19023: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19024: LD_ADDR_OWVAR 29
19028: PUSH
19029: LD_INT 12
19031: PUSH
19032: LD_INT 12
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: ST_TO_ADDR
// hc_agressivity := 20 ;
19039: LD_ADDR_OWVAR 35
19043: PUSH
19044: LD_INT 20
19046: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19047: LD_ADDR_OWVAR 28
19051: PUSH
19052: LD_INT 17
19054: ST_TO_ADDR
// hc_gallery :=  ;
19055: LD_ADDR_OWVAR 33
19059: PUSH
19060: LD_STRING 
19062: ST_TO_ADDR
// hc_name :=  ;
19063: LD_ADDR_OWVAR 26
19067: PUSH
19068: LD_STRING 
19070: ST_TO_ADDR
// un := CreateHuman ;
19071: LD_ADDR_VAR 0 2
19075: PUSH
19076: CALL_OW 44
19080: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19081: LD_VAR 0 2
19085: PPUSH
19086: LD_INT 1
19088: PPUSH
19089: CALL_OW 51
// tmp := tmp ^ un ;
19093: LD_ADDR_VAR 0 3
19097: PUSH
19098: LD_VAR 0 3
19102: PUSH
19103: LD_VAR 0 2
19107: ADD
19108: ST_TO_ADDR
// end ;
19109: GO 19005
19111: POP
19112: POP
// repeat wait ( 0 0$1 ) ;
19113: LD_INT 35
19115: PPUSH
19116: CALL_OW 67
// for un in tmp do
19120: LD_ADDR_VAR 0 2
19124: PUSH
19125: LD_VAR 0 3
19129: PUSH
19130: FOR_IN
19131: IFFALSE 19205
// begin if IsDead ( un ) then
19133: LD_VAR 0 2
19137: PPUSH
19138: CALL_OW 301
19142: IFFALSE 19162
// begin tmp := tmp diff un ;
19144: LD_ADDR_VAR 0 3
19148: PUSH
19149: LD_VAR 0 3
19153: PUSH
19154: LD_VAR 0 2
19158: DIFF
19159: ST_TO_ADDR
// continue ;
19160: GO 19130
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19162: LD_VAR 0 2
19166: PPUSH
19167: LD_INT 3
19169: PUSH
19170: LD_INT 22
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PPUSH
19184: CALL_OW 69
19188: PPUSH
19189: LD_VAR 0 2
19193: PPUSH
19194: CALL_OW 74
19198: PPUSH
19199: CALL_OW 115
// end ;
19203: GO 19130
19205: POP
19206: POP
// until not tmp ;
19207: LD_VAR 0 3
19211: NOT
19212: IFFALSE 19113
// end ;
19214: PPOPN 3
19216: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19217: LD_EXP 45
19221: IFFALSE 19229
19223: PUSH
19224: LD_EXP 70
19228: AND
19229: IFFALSE 19283
19231: GO 19233
19233: DISABLE
// begin ToLua ( displayTroll(); ) ;
19234: LD_STRING displayTroll();
19236: PPUSH
19237: CALL_OW 559
// wait ( 3 3$00 ) ;
19241: LD_INT 6300
19243: PPUSH
19244: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19248: LD_STRING hideTroll();
19250: PPUSH
19251: CALL_OW 559
// wait ( 1 1$00 ) ;
19255: LD_INT 2100
19257: PPUSH
19258: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19262: LD_STRING displayTroll();
19264: PPUSH
19265: CALL_OW 559
// wait ( 1 1$00 ) ;
19269: LD_INT 2100
19271: PPUSH
19272: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19276: LD_STRING hideTroll();
19278: PPUSH
19279: CALL_OW 559
// end ;
19283: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19284: LD_EXP 45
19288: IFFALSE 19296
19290: PUSH
19291: LD_EXP 71
19295: AND
19296: IFFALSE 19359
19298: GO 19300
19300: DISABLE
19301: LD_INT 0
19303: PPUSH
// begin p := 0 ;
19304: LD_ADDR_VAR 0 1
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// repeat game_speed := 1 ;
19312: LD_ADDR_OWVAR 65
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19320: LD_INT 35
19322: PPUSH
19323: CALL_OW 67
// p := p + 1 ;
19327: LD_ADDR_VAR 0 1
19331: PUSH
19332: LD_VAR 0 1
19336: PUSH
19337: LD_INT 1
19339: PLUS
19340: ST_TO_ADDR
// until p >= 60 ;
19341: LD_VAR 0 1
19345: PUSH
19346: LD_INT 60
19348: GREATEREQUAL
19349: IFFALSE 19312
// game_speed := 4 ;
19351: LD_ADDR_OWVAR 65
19355: PUSH
19356: LD_INT 4
19358: ST_TO_ADDR
// end ;
19359: PPOPN 1
19361: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19362: LD_EXP 45
19366: IFFALSE 19374
19368: PUSH
19369: LD_EXP 72
19373: AND
19374: IFFALSE 19520
19376: GO 19378
19378: DISABLE
19379: LD_INT 0
19381: PPUSH
19382: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19383: LD_ADDR_VAR 0 1
19387: PUSH
19388: LD_INT 22
19390: PUSH
19391: LD_OWVAR 2
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: LD_INT 30
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 30
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PPUSH
19432: CALL_OW 69
19436: ST_TO_ADDR
// if not depot then
19437: LD_VAR 0 1
19441: NOT
19442: IFFALSE 19446
// exit ;
19444: GO 19520
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19446: LD_ADDR_VAR 0 2
19450: PUSH
19451: LD_VAR 0 1
19455: PUSH
19456: LD_INT 1
19458: PPUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 12
19468: ARRAY
19469: PPUSH
19470: CALL_OW 274
19474: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19475: LD_VAR 0 2
19479: PPUSH
19480: LD_INT 1
19482: PPUSH
19483: LD_INT 0
19485: PPUSH
19486: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19490: LD_VAR 0 2
19494: PPUSH
19495: LD_INT 2
19497: PPUSH
19498: LD_INT 0
19500: PPUSH
19501: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19505: LD_VAR 0 2
19509: PPUSH
19510: LD_INT 3
19512: PPUSH
19513: LD_INT 0
19515: PPUSH
19516: CALL_OW 277
// end ;
19520: PPOPN 2
19522: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19523: LD_EXP 45
19527: IFFALSE 19535
19529: PUSH
19530: LD_EXP 73
19534: AND
19535: IFFALSE 19632
19537: GO 19539
19539: DISABLE
19540: LD_INT 0
19542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19543: LD_ADDR_VAR 0 1
19547: PUSH
19548: LD_INT 22
19550: PUSH
19551: LD_OWVAR 2
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 21
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 3
19572: PUSH
19573: LD_INT 23
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: LIST
19591: PPUSH
19592: CALL_OW 69
19596: ST_TO_ADDR
// if not tmp then
19597: LD_VAR 0 1
19601: NOT
19602: IFFALSE 19606
// exit ;
19604: GO 19632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19606: LD_VAR 0 1
19610: PUSH
19611: LD_INT 1
19613: PPUSH
19614: LD_VAR 0 1
19618: PPUSH
19619: CALL_OW 12
19623: ARRAY
19624: PPUSH
19625: LD_INT 200
19627: PPUSH
19628: CALL_OW 234
// end ;
19632: PPOPN 1
19634: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19635: LD_EXP 45
19639: IFFALSE 19647
19641: PUSH
19642: LD_EXP 74
19646: AND
19647: IFFALSE 19726
19649: GO 19651
19651: DISABLE
19652: LD_INT 0
19654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19655: LD_ADDR_VAR 0 1
19659: PUSH
19660: LD_INT 22
19662: PUSH
19663: LD_OWVAR 2
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 21
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 69
19690: ST_TO_ADDR
// if not tmp then
19691: LD_VAR 0 1
19695: NOT
19696: IFFALSE 19700
// exit ;
19698: GO 19726
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19700: LD_VAR 0 1
19704: PUSH
19705: LD_INT 1
19707: PPUSH
19708: LD_VAR 0 1
19712: PPUSH
19713: CALL_OW 12
19717: ARRAY
19718: PPUSH
19719: LD_INT 60
19721: PPUSH
19722: CALL_OW 234
// end ;
19726: PPOPN 1
19728: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19729: LD_EXP 45
19733: IFFALSE 19741
19735: PUSH
19736: LD_EXP 75
19740: AND
19741: IFFALSE 19840
19743: GO 19745
19745: DISABLE
19746: LD_INT 0
19748: PPUSH
19749: PPUSH
// begin enable ;
19750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19751: LD_ADDR_VAR 0 1
19755: PUSH
19756: LD_INT 22
19758: PUSH
19759: LD_OWVAR 2
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 61
19770: PUSH
19771: EMPTY
19772: LIST
19773: PUSH
19774: LD_INT 33
19776: PUSH
19777: LD_INT 2
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: PPUSH
19789: CALL_OW 69
19793: ST_TO_ADDR
// if not tmp then
19794: LD_VAR 0 1
19798: NOT
19799: IFFALSE 19803
// exit ;
19801: GO 19840
// for i in tmp do
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_VAR 0 1
19812: PUSH
19813: FOR_IN
19814: IFFALSE 19838
// if IsControledBy ( i ) then
19816: LD_VAR 0 2
19820: PPUSH
19821: CALL_OW 312
19825: IFFALSE 19836
// ComUnlink ( i ) ;
19827: LD_VAR 0 2
19831: PPUSH
19832: CALL_OW 136
19836: GO 19813
19838: POP
19839: POP
// end ;
19840: PPOPN 2
19842: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19843: LD_EXP 45
19847: IFFALSE 19855
19849: PUSH
19850: LD_EXP 76
19854: AND
19855: IFFALSE 19995
19857: GO 19859
19859: DISABLE
19860: LD_INT 0
19862: PPUSH
19863: PPUSH
// begin ToLua ( displayPowell(); ) ;
19864: LD_STRING displayPowell();
19866: PPUSH
19867: CALL_OW 559
// uc_side := 0 ;
19871: LD_ADDR_OWVAR 20
19875: PUSH
19876: LD_INT 0
19878: ST_TO_ADDR
// uc_nation := 2 ;
19879: LD_ADDR_OWVAR 21
19883: PUSH
19884: LD_INT 2
19886: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19887: LD_ADDR_OWVAR 37
19891: PUSH
19892: LD_INT 14
19894: ST_TO_ADDR
// vc_engine := engine_siberite ;
19895: LD_ADDR_OWVAR 39
19899: PUSH
19900: LD_INT 3
19902: ST_TO_ADDR
// vc_control := control_apeman ;
19903: LD_ADDR_OWVAR 38
19907: PUSH
19908: LD_INT 5
19910: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19911: LD_ADDR_OWVAR 40
19915: PUSH
19916: LD_INT 29
19918: ST_TO_ADDR
// un := CreateVehicle ;
19919: LD_ADDR_VAR 0 2
19923: PUSH
19924: CALL_OW 45
19928: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19929: LD_VAR 0 2
19933: PPUSH
19934: LD_INT 1
19936: PPUSH
19937: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19941: LD_INT 35
19943: PPUSH
19944: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19948: LD_VAR 0 2
19952: PPUSH
19953: LD_INT 22
19955: PUSH
19956: LD_OWVAR 2
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PPUSH
19965: CALL_OW 69
19969: PPUSH
19970: LD_VAR 0 2
19974: PPUSH
19975: CALL_OW 74
19979: PPUSH
19980: CALL_OW 115
// until IsDead ( un ) ;
19984: LD_VAR 0 2
19988: PPUSH
19989: CALL_OW 301
19993: IFFALSE 19941
// end ;
19995: PPOPN 2
19997: END
// every 0 0$1 trigger StreamModeActive and sStu do
19998: LD_EXP 45
20002: IFFALSE 20010
20004: PUSH
20005: LD_EXP 84
20009: AND
20010: IFFALSE 20026
20012: GO 20014
20014: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20015: LD_STRING displayStucuk();
20017: PPUSH
20018: CALL_OW 559
// ResetFog ;
20022: CALL_OW 335
// end ;
20026: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20027: LD_EXP 45
20031: IFFALSE 20039
20033: PUSH
20034: LD_EXP 77
20038: AND
20039: IFFALSE 20180
20041: GO 20043
20043: DISABLE
20044: LD_INT 0
20046: PPUSH
20047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20048: LD_ADDR_VAR 0 2
20052: PUSH
20053: LD_INT 22
20055: PUSH
20056: LD_OWVAR 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 21
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PPUSH
20079: CALL_OW 69
20083: ST_TO_ADDR
// if not tmp then
20084: LD_VAR 0 2
20088: NOT
20089: IFFALSE 20093
// exit ;
20091: GO 20180
// un := tmp [ rand ( 1 , tmp ) ] ;
20093: LD_ADDR_VAR 0 1
20097: PUSH
20098: LD_VAR 0 2
20102: PUSH
20103: LD_INT 1
20105: PPUSH
20106: LD_VAR 0 2
20110: PPUSH
20111: CALL_OW 12
20115: ARRAY
20116: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20117: LD_VAR 0 1
20121: PPUSH
20122: LD_INT 0
20124: PPUSH
20125: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20129: LD_VAR 0 1
20133: PPUSH
20134: LD_OWVAR 3
20138: PUSH
20139: LD_VAR 0 1
20143: DIFF
20144: PPUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 74
20154: PPUSH
20155: CALL_OW 115
// wait ( 0 0$20 ) ;
20159: LD_INT 700
20161: PPUSH
20162: CALL_OW 67
// SetSide ( un , your_side ) ;
20166: LD_VAR 0 1
20170: PPUSH
20171: LD_OWVAR 2
20175: PPUSH
20176: CALL_OW 235
// end ;
20180: PPOPN 2
20182: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20183: LD_EXP 45
20187: IFFALSE 20195
20189: PUSH
20190: LD_EXP 78
20194: AND
20195: IFFALSE 20301
20197: GO 20199
20199: DISABLE
20200: LD_INT 0
20202: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20203: LD_ADDR_VAR 0 1
20207: PUSH
20208: LD_INT 22
20210: PUSH
20211: LD_OWVAR 2
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: LD_INT 30
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 30
20235: PUSH
20236: LD_INT 1
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 69
20256: ST_TO_ADDR
// if not depot then
20257: LD_VAR 0 1
20261: NOT
20262: IFFALSE 20266
// exit ;
20264: GO 20301
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20266: LD_VAR 0 1
20270: PUSH
20271: LD_INT 1
20273: ARRAY
20274: PPUSH
20275: CALL_OW 250
20279: PPUSH
20280: LD_VAR 0 1
20284: PUSH
20285: LD_INT 1
20287: ARRAY
20288: PPUSH
20289: CALL_OW 251
20293: PPUSH
20294: LD_INT 70
20296: PPUSH
20297: CALL_OW 495
// end ;
20301: PPOPN 1
20303: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20304: LD_EXP 45
20308: IFFALSE 20316
20310: PUSH
20311: LD_EXP 79
20315: AND
20316: IFFALSE 20527
20318: GO 20320
20320: DISABLE
20321: LD_INT 0
20323: PPUSH
20324: PPUSH
20325: PPUSH
20326: PPUSH
20327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20328: LD_ADDR_VAR 0 5
20332: PUSH
20333: LD_INT 22
20335: PUSH
20336: LD_OWVAR 2
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 21
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PPUSH
20359: CALL_OW 69
20363: ST_TO_ADDR
// if not tmp then
20364: LD_VAR 0 5
20368: NOT
20369: IFFALSE 20373
// exit ;
20371: GO 20527
// for i in tmp do
20373: LD_ADDR_VAR 0 1
20377: PUSH
20378: LD_VAR 0 5
20382: PUSH
20383: FOR_IN
20384: IFFALSE 20525
// begin d := rand ( 0 , 5 ) ;
20386: LD_ADDR_VAR 0 4
20390: PUSH
20391: LD_INT 0
20393: PPUSH
20394: LD_INT 5
20396: PPUSH
20397: CALL_OW 12
20401: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20402: LD_ADDR_VAR 0 2
20406: PUSH
20407: LD_VAR 0 1
20411: PPUSH
20412: CALL_OW 250
20416: PPUSH
20417: LD_VAR 0 4
20421: PPUSH
20422: LD_INT 3
20424: PPUSH
20425: LD_INT 12
20427: PPUSH
20428: CALL_OW 12
20432: PPUSH
20433: CALL_OW 272
20437: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20438: LD_ADDR_VAR 0 3
20442: PUSH
20443: LD_VAR 0 1
20447: PPUSH
20448: CALL_OW 251
20452: PPUSH
20453: LD_VAR 0 4
20457: PPUSH
20458: LD_INT 3
20460: PPUSH
20461: LD_INT 12
20463: PPUSH
20464: CALL_OW 12
20468: PPUSH
20469: CALL_OW 273
20473: ST_TO_ADDR
// if ValidHex ( x , y ) then
20474: LD_VAR 0 2
20478: PPUSH
20479: LD_VAR 0 3
20483: PPUSH
20484: CALL_OW 488
20488: IFFALSE 20523
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20490: LD_VAR 0 1
20494: PPUSH
20495: LD_VAR 0 2
20499: PPUSH
20500: LD_VAR 0 3
20504: PPUSH
20505: LD_INT 3
20507: PPUSH
20508: LD_INT 6
20510: PPUSH
20511: CALL_OW 12
20515: PPUSH
20516: LD_INT 1
20518: PPUSH
20519: CALL_OW 483
// end ;
20523: GO 20383
20525: POP
20526: POP
// end ;
20527: PPOPN 5
20529: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20530: LD_EXP 45
20534: IFFALSE 20542
20536: PUSH
20537: LD_EXP 80
20541: AND
20542: IFFALSE 20636
20544: GO 20546
20546: DISABLE
20547: LD_INT 0
20549: PPUSH
20550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20551: LD_ADDR_VAR 0 2
20555: PUSH
20556: LD_INT 22
20558: PUSH
20559: LD_OWVAR 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 32
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 21
20580: PUSH
20581: LD_INT 2
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: LIST
20592: PPUSH
20593: CALL_OW 69
20597: ST_TO_ADDR
// if not tmp then
20598: LD_VAR 0 2
20602: NOT
20603: IFFALSE 20607
// exit ;
20605: GO 20636
// for i in tmp do
20607: LD_ADDR_VAR 0 1
20611: PUSH
20612: LD_VAR 0 2
20616: PUSH
20617: FOR_IN
20618: IFFALSE 20634
// SetFuel ( i , 0 ) ;
20620: LD_VAR 0 1
20624: PPUSH
20625: LD_INT 0
20627: PPUSH
20628: CALL_OW 240
20632: GO 20617
20634: POP
20635: POP
// end ;
20636: PPOPN 2
20638: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20639: LD_EXP 45
20643: IFFALSE 20651
20645: PUSH
20646: LD_EXP 81
20650: AND
20651: IFFALSE 20717
20653: GO 20655
20655: DISABLE
20656: LD_INT 0
20658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20659: LD_ADDR_VAR 0 1
20663: PUSH
20664: LD_INT 22
20666: PUSH
20667: LD_OWVAR 2
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 30
20678: PUSH
20679: LD_INT 29
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PPUSH
20690: CALL_OW 69
20694: ST_TO_ADDR
// if not tmp then
20695: LD_VAR 0 1
20699: NOT
20700: IFFALSE 20704
// exit ;
20702: GO 20717
// DestroyUnit ( tmp [ 1 ] ) ;
20704: LD_VAR 0 1
20708: PUSH
20709: LD_INT 1
20711: ARRAY
20712: PPUSH
20713: CALL_OW 65
// end ;
20717: PPOPN 1
20719: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20720: LD_EXP 45
20724: IFFALSE 20732
20726: PUSH
20727: LD_EXP 83
20731: AND
20732: IFFALSE 20861
20734: GO 20736
20736: DISABLE
20737: LD_INT 0
20739: PPUSH
// begin uc_side := 0 ;
20740: LD_ADDR_OWVAR 20
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// uc_nation := nation_arabian ;
20748: LD_ADDR_OWVAR 21
20752: PUSH
20753: LD_INT 2
20755: ST_TO_ADDR
// hc_gallery :=  ;
20756: LD_ADDR_OWVAR 33
20760: PUSH
20761: LD_STRING 
20763: ST_TO_ADDR
// hc_name :=  ;
20764: LD_ADDR_OWVAR 26
20768: PUSH
20769: LD_STRING 
20771: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 11
20777: PPUSH
20778: LD_INT 10
20780: PPUSH
20781: CALL_OW 380
// un := CreateHuman ;
20785: LD_ADDR_VAR 0 1
20789: PUSH
20790: CALL_OW 44
20794: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20795: LD_VAR 0 1
20799: PPUSH
20800: LD_INT 1
20802: PPUSH
20803: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20807: LD_INT 35
20809: PPUSH
20810: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20814: LD_VAR 0 1
20818: PPUSH
20819: LD_INT 22
20821: PUSH
20822: LD_OWVAR 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PPUSH
20831: CALL_OW 69
20835: PPUSH
20836: LD_VAR 0 1
20840: PPUSH
20841: CALL_OW 74
20845: PPUSH
20846: CALL_OW 115
// until IsDead ( un ) ;
20850: LD_VAR 0 1
20854: PPUSH
20855: CALL_OW 301
20859: IFFALSE 20807
// end ;
20861: PPOPN 1
20863: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20864: LD_EXP 45
20868: IFFALSE 20876
20870: PUSH
20871: LD_EXP 85
20875: AND
20876: IFFALSE 20888
20878: GO 20880
20880: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20881: LD_STRING earthquake(getX(game), 0, 32)
20883: PPUSH
20884: CALL_OW 559
20888: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20889: LD_EXP 45
20893: IFFALSE 20901
20895: PUSH
20896: LD_EXP 86
20900: AND
20901: IFFALSE 20992
20903: GO 20905
20905: DISABLE
20906: LD_INT 0
20908: PPUSH
// begin enable ;
20909: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20910: LD_ADDR_VAR 0 1
20914: PUSH
20915: LD_INT 22
20917: PUSH
20918: LD_OWVAR 2
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 21
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 33
20939: PUSH
20940: LD_INT 3
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: PPUSH
20952: CALL_OW 69
20956: ST_TO_ADDR
// if not tmp then
20957: LD_VAR 0 1
20961: NOT
20962: IFFALSE 20966
// exit ;
20964: GO 20992
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20966: LD_VAR 0 1
20970: PUSH
20971: LD_INT 1
20973: PPUSH
20974: LD_VAR 0 1
20978: PPUSH
20979: CALL_OW 12
20983: ARRAY
20984: PPUSH
20985: LD_INT 1
20987: PPUSH
20988: CALL_OW 234
// end ;
20992: PPOPN 1
20994: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20995: LD_EXP 45
20999: IFFALSE 21007
21001: PUSH
21002: LD_EXP 87
21006: AND
21007: IFFALSE 21148
21009: GO 21011
21011: DISABLE
21012: LD_INT 0
21014: PPUSH
21015: PPUSH
21016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: LD_INT 22
21024: PUSH
21025: LD_OWVAR 2
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 25
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PPUSH
21048: CALL_OW 69
21052: ST_TO_ADDR
// if not tmp then
21053: LD_VAR 0 3
21057: NOT
21058: IFFALSE 21062
// exit ;
21060: GO 21148
// un := tmp [ rand ( 1 , tmp ) ] ;
21062: LD_ADDR_VAR 0 2
21066: PUSH
21067: LD_VAR 0 3
21071: PUSH
21072: LD_INT 1
21074: PPUSH
21075: LD_VAR 0 3
21079: PPUSH
21080: CALL_OW 12
21084: ARRAY
21085: ST_TO_ADDR
// if Crawls ( un ) then
21086: LD_VAR 0 2
21090: PPUSH
21091: CALL_OW 318
21095: IFFALSE 21106
// ComWalk ( un ) ;
21097: LD_VAR 0 2
21101: PPUSH
21102: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21106: LD_VAR 0 2
21110: PPUSH
21111: LD_INT 9
21113: PPUSH
21114: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21118: LD_INT 28
21120: PPUSH
21121: LD_OWVAR 2
21125: PPUSH
21126: LD_INT 2
21128: PPUSH
21129: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21133: LD_INT 29
21135: PPUSH
21136: LD_OWVAR 2
21140: PPUSH
21141: LD_INT 2
21143: PPUSH
21144: CALL_OW 322
// end ;
21148: PPOPN 3
21150: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21151: LD_EXP 45
21155: IFFALSE 21163
21157: PUSH
21158: LD_EXP 88
21162: AND
21163: IFFALSE 21274
21165: GO 21167
21167: DISABLE
21168: LD_INT 0
21170: PPUSH
21171: PPUSH
21172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21173: LD_ADDR_VAR 0 3
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_OWVAR 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 25
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 69
21208: ST_TO_ADDR
// if not tmp then
21209: LD_VAR 0 3
21213: NOT
21214: IFFALSE 21218
// exit ;
21216: GO 21274
// un := tmp [ rand ( 1 , tmp ) ] ;
21218: LD_ADDR_VAR 0 2
21222: PUSH
21223: LD_VAR 0 3
21227: PUSH
21228: LD_INT 1
21230: PPUSH
21231: LD_VAR 0 3
21235: PPUSH
21236: CALL_OW 12
21240: ARRAY
21241: ST_TO_ADDR
// if Crawls ( un ) then
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 318
21251: IFFALSE 21262
// ComWalk ( un ) ;
21253: LD_VAR 0 2
21257: PPUSH
21258: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21262: LD_VAR 0 2
21266: PPUSH
21267: LD_INT 8
21269: PPUSH
21270: CALL_OW 336
// end ;
21274: PPOPN 3
21276: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21277: LD_EXP 45
21281: IFFALSE 21289
21283: PUSH
21284: LD_EXP 89
21288: AND
21289: IFFALSE 21433
21291: GO 21293
21293: DISABLE
21294: LD_INT 0
21296: PPUSH
21297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21298: LD_ADDR_VAR 0 2
21302: PUSH
21303: LD_INT 22
21305: PUSH
21306: LD_OWVAR 2
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 21
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 34
21330: PUSH
21331: LD_INT 12
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 34
21340: PUSH
21341: LD_INT 51
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 34
21350: PUSH
21351: LD_INT 32
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: PPUSH
21369: CALL_OW 69
21373: ST_TO_ADDR
// if not tmp then
21374: LD_VAR 0 2
21378: NOT
21379: IFFALSE 21383
// exit ;
21381: GO 21433
// for i in tmp do
21383: LD_ADDR_VAR 0 1
21387: PUSH
21388: LD_VAR 0 2
21392: PUSH
21393: FOR_IN
21394: IFFALSE 21431
// if GetCargo ( i , mat_artifact ) = 0 then
21396: LD_VAR 0 1
21400: PPUSH
21401: LD_INT 4
21403: PPUSH
21404: CALL_OW 289
21408: PUSH
21409: LD_INT 0
21411: EQUAL
21412: IFFALSE 21429
// SetCargo ( i , mat_siberit , 100 ) ;
21414: LD_VAR 0 1
21418: PPUSH
21419: LD_INT 3
21421: PPUSH
21422: LD_INT 100
21424: PPUSH
21425: CALL_OW 290
21429: GO 21393
21431: POP
21432: POP
// end ;
21433: PPOPN 2
21435: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21436: LD_EXP 45
21440: IFFALSE 21448
21442: PUSH
21443: LD_EXP 90
21447: AND
21448: IFFALSE 21631
21450: GO 21452
21452: DISABLE
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_OWVAR 2
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PPUSH
21474: CALL_OW 69
21478: ST_TO_ADDR
// if not tmp then
21479: LD_VAR 0 2
21483: NOT
21484: IFFALSE 21488
// exit ;
21486: GO 21631
// for i := 1 to 2 do
21488: LD_ADDR_VAR 0 1
21492: PUSH
21493: DOUBLE
21494: LD_INT 1
21496: DEC
21497: ST_TO_ADDR
21498: LD_INT 2
21500: PUSH
21501: FOR_TO
21502: IFFALSE 21629
// begin uc_side := your_side ;
21504: LD_ADDR_OWVAR 20
21508: PUSH
21509: LD_OWVAR 2
21513: ST_TO_ADDR
// uc_nation := nation_american ;
21514: LD_ADDR_OWVAR 21
21518: PUSH
21519: LD_INT 1
21521: ST_TO_ADDR
// vc_chassis := us_morphling ;
21522: LD_ADDR_OWVAR 37
21526: PUSH
21527: LD_INT 5
21529: ST_TO_ADDR
// vc_engine := engine_siberite ;
21530: LD_ADDR_OWVAR 39
21534: PUSH
21535: LD_INT 3
21537: ST_TO_ADDR
// vc_control := control_computer ;
21538: LD_ADDR_OWVAR 38
21542: PUSH
21543: LD_INT 3
21545: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21546: LD_ADDR_OWVAR 40
21550: PUSH
21551: LD_INT 10
21553: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21554: LD_VAR 0 2
21558: PUSH
21559: LD_INT 1
21561: ARRAY
21562: PPUSH
21563: CALL_OW 310
21567: NOT
21568: IFFALSE 21615
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21570: CALL_OW 45
21574: PPUSH
21575: LD_VAR 0 2
21579: PUSH
21580: LD_INT 1
21582: ARRAY
21583: PPUSH
21584: CALL_OW 250
21588: PPUSH
21589: LD_VAR 0 2
21593: PUSH
21594: LD_INT 1
21596: ARRAY
21597: PPUSH
21598: CALL_OW 251
21602: PPUSH
21603: LD_INT 12
21605: PPUSH
21606: LD_INT 1
21608: PPUSH
21609: CALL_OW 50
21613: GO 21627
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21615: CALL_OW 45
21619: PPUSH
21620: LD_INT 1
21622: PPUSH
21623: CALL_OW 51
// end ;
21627: GO 21501
21629: POP
21630: POP
// end ;
21631: PPOPN 2
21633: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21634: LD_EXP 45
21638: IFFALSE 21646
21640: PUSH
21641: LD_EXP 91
21645: AND
21646: IFFALSE 21868
21648: GO 21650
21650: DISABLE
21651: LD_INT 0
21653: PPUSH
21654: PPUSH
21655: PPUSH
21656: PPUSH
21657: PPUSH
21658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21659: LD_ADDR_VAR 0 6
21663: PUSH
21664: LD_INT 22
21666: PUSH
21667: LD_OWVAR 2
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 3
21688: PUSH
21689: LD_INT 23
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: PPUSH
21708: CALL_OW 69
21712: ST_TO_ADDR
// if not tmp then
21713: LD_VAR 0 6
21717: NOT
21718: IFFALSE 21722
// exit ;
21720: GO 21868
// s1 := rand ( 1 , 4 ) ;
21722: LD_ADDR_VAR 0 2
21726: PUSH
21727: LD_INT 1
21729: PPUSH
21730: LD_INT 4
21732: PPUSH
21733: CALL_OW 12
21737: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21738: LD_ADDR_VAR 0 4
21742: PUSH
21743: LD_VAR 0 6
21747: PUSH
21748: LD_INT 1
21750: ARRAY
21751: PPUSH
21752: LD_VAR 0 2
21756: PPUSH
21757: CALL_OW 259
21761: ST_TO_ADDR
// if s1 = 1 then
21762: LD_VAR 0 2
21766: PUSH
21767: LD_INT 1
21769: EQUAL
21770: IFFALSE 21790
// s2 := rand ( 2 , 4 ) else
21772: LD_ADDR_VAR 0 3
21776: PUSH
21777: LD_INT 2
21779: PPUSH
21780: LD_INT 4
21782: PPUSH
21783: CALL_OW 12
21787: ST_TO_ADDR
21788: GO 21798
// s2 := 1 ;
21790: LD_ADDR_VAR 0 3
21794: PUSH
21795: LD_INT 1
21797: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21798: LD_ADDR_VAR 0 5
21802: PUSH
21803: LD_VAR 0 6
21807: PUSH
21808: LD_INT 1
21810: ARRAY
21811: PPUSH
21812: LD_VAR 0 3
21816: PPUSH
21817: CALL_OW 259
21821: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21822: LD_VAR 0 6
21826: PUSH
21827: LD_INT 1
21829: ARRAY
21830: PPUSH
21831: LD_VAR 0 2
21835: PPUSH
21836: LD_VAR 0 5
21840: PPUSH
21841: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21845: LD_VAR 0 6
21849: PUSH
21850: LD_INT 1
21852: ARRAY
21853: PPUSH
21854: LD_VAR 0 3
21858: PPUSH
21859: LD_VAR 0 4
21863: PPUSH
21864: CALL_OW 237
// end ;
21868: PPOPN 6
21870: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21871: LD_EXP 45
21875: IFFALSE 21883
21877: PUSH
21878: LD_EXP 92
21882: AND
21883: IFFALSE 21962
21885: GO 21887
21887: DISABLE
21888: LD_INT 0
21890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21891: LD_ADDR_VAR 0 1
21895: PUSH
21896: LD_INT 22
21898: PUSH
21899: LD_OWVAR 2
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 30
21910: PUSH
21911: LD_INT 3
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PPUSH
21922: CALL_OW 69
21926: ST_TO_ADDR
// if not tmp then
21927: LD_VAR 0 1
21931: NOT
21932: IFFALSE 21936
// exit ;
21934: GO 21962
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21936: LD_VAR 0 1
21940: PUSH
21941: LD_INT 1
21943: PPUSH
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 12
21953: ARRAY
21954: PPUSH
21955: LD_INT 1
21957: PPUSH
21958: CALL_OW 234
// end ;
21962: PPOPN 1
21964: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21965: LD_EXP 45
21969: IFFALSE 21977
21971: PUSH
21972: LD_EXP 93
21976: AND
21977: IFFALSE 22089
21979: GO 21981
21981: DISABLE
21982: LD_INT 0
21984: PPUSH
21985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21986: LD_ADDR_VAR 0 2
21990: PUSH
21991: LD_INT 22
21993: PUSH
21994: LD_OWVAR 2
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: LD_INT 30
22008: PUSH
22009: LD_INT 27
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 30
22018: PUSH
22019: LD_INT 26
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 30
22028: PUSH
22029: LD_INT 28
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PPUSH
22046: CALL_OW 69
22050: ST_TO_ADDR
// if not tmp then
22051: LD_VAR 0 2
22055: NOT
22056: IFFALSE 22060
// exit ;
22058: GO 22089
// for i in tmp do
22060: LD_ADDR_VAR 0 1
22064: PUSH
22065: LD_VAR 0 2
22069: PUSH
22070: FOR_IN
22071: IFFALSE 22087
// SetLives ( i , 1 ) ;
22073: LD_VAR 0 1
22077: PPUSH
22078: LD_INT 1
22080: PPUSH
22081: CALL_OW 234
22085: GO 22070
22087: POP
22088: POP
// end ;
22089: PPOPN 2
22091: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22092: LD_EXP 45
22096: IFFALSE 22104
22098: PUSH
22099: LD_EXP 94
22103: AND
22104: IFFALSE 22391
22106: GO 22108
22108: DISABLE
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
22113: PPUSH
// begin i := rand ( 1 , 7 ) ;
22114: LD_ADDR_VAR 0 1
22118: PUSH
22119: LD_INT 1
22121: PPUSH
22122: LD_INT 7
22124: PPUSH
22125: CALL_OW 12
22129: ST_TO_ADDR
// case i of 1 :
22130: LD_VAR 0 1
22134: PUSH
22135: LD_INT 1
22137: DOUBLE
22138: EQUAL
22139: IFTRUE 22143
22141: GO 22153
22143: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22144: LD_STRING earthquake(getX(game), 0, 32)
22146: PPUSH
22147: CALL_OW 559
22151: GO 22391
22153: LD_INT 2
22155: DOUBLE
22156: EQUAL
22157: IFTRUE 22161
22159: GO 22175
22161: POP
// begin ToLua ( displayStucuk(); ) ;
22162: LD_STRING displayStucuk();
22164: PPUSH
22165: CALL_OW 559
// ResetFog ;
22169: CALL_OW 335
// end ; 3 :
22173: GO 22391
22175: LD_INT 3
22177: DOUBLE
22178: EQUAL
22179: IFTRUE 22183
22181: GO 22287
22183: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22184: LD_ADDR_VAR 0 2
22188: PUSH
22189: LD_INT 22
22191: PUSH
22192: LD_OWVAR 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 25
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PPUSH
22215: CALL_OW 69
22219: ST_TO_ADDR
// if not tmp then
22220: LD_VAR 0 2
22224: NOT
22225: IFFALSE 22229
// exit ;
22227: GO 22391
// un := tmp [ rand ( 1 , tmp ) ] ;
22229: LD_ADDR_VAR 0 3
22233: PUSH
22234: LD_VAR 0 2
22238: PUSH
22239: LD_INT 1
22241: PPUSH
22242: LD_VAR 0 2
22246: PPUSH
22247: CALL_OW 12
22251: ARRAY
22252: ST_TO_ADDR
// if Crawls ( un ) then
22253: LD_VAR 0 3
22257: PPUSH
22258: CALL_OW 318
22262: IFFALSE 22273
// ComWalk ( un ) ;
22264: LD_VAR 0 3
22268: PPUSH
22269: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22273: LD_VAR 0 3
22277: PPUSH
22278: LD_INT 8
22280: PPUSH
22281: CALL_OW 336
// end ; 4 :
22285: GO 22391
22287: LD_INT 4
22289: DOUBLE
22290: EQUAL
22291: IFTRUE 22295
22293: GO 22369
22295: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22296: LD_ADDR_VAR 0 2
22300: PUSH
22301: LD_INT 22
22303: PUSH
22304: LD_OWVAR 2
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 30
22315: PUSH
22316: LD_INT 29
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PPUSH
22327: CALL_OW 69
22331: ST_TO_ADDR
// if not tmp then
22332: LD_VAR 0 2
22336: NOT
22337: IFFALSE 22341
// exit ;
22339: GO 22391
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22341: LD_VAR 0 2
22345: PUSH
22346: LD_INT 1
22348: ARRAY
22349: PPUSH
22350: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22354: LD_VAR 0 2
22358: PUSH
22359: LD_INT 1
22361: ARRAY
22362: PPUSH
22363: CALL_OW 65
// end ; 5 .. 7 :
22367: GO 22391
22369: LD_INT 5
22371: DOUBLE
22372: GREATEREQUAL
22373: IFFALSE 22381
22375: LD_INT 7
22377: DOUBLE
22378: LESSEQUAL
22379: IFTRUE 22383
22381: GO 22390
22383: POP
// StreamSibBomb ; end ;
22384: CALL 18572 0 0
22388: GO 22391
22390: POP
// end ;
22391: PPOPN 3
22393: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22394: LD_EXP 45
22398: IFFALSE 22406
22400: PUSH
22401: LD_EXP 95
22405: AND
22406: IFFALSE 22562
22408: GO 22410
22410: DISABLE
22411: LD_INT 0
22413: PPUSH
22414: PPUSH
22415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22416: LD_ADDR_VAR 0 2
22420: PUSH
22421: LD_INT 81
22423: PUSH
22424: LD_OWVAR 2
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 21
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 21
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PPUSH
22465: CALL_OW 69
22469: ST_TO_ADDR
// if not tmp then
22470: LD_VAR 0 2
22474: NOT
22475: IFFALSE 22479
// exit ;
22477: GO 22562
// p := 0 ;
22479: LD_ADDR_VAR 0 3
22483: PUSH
22484: LD_INT 0
22486: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22487: LD_INT 35
22489: PPUSH
22490: CALL_OW 67
// p := p + 1 ;
22494: LD_ADDR_VAR 0 3
22498: PUSH
22499: LD_VAR 0 3
22503: PUSH
22504: LD_INT 1
22506: PLUS
22507: ST_TO_ADDR
// for i in tmp do
22508: LD_ADDR_VAR 0 1
22512: PUSH
22513: LD_VAR 0 2
22517: PUSH
22518: FOR_IN
22519: IFFALSE 22550
// if GetLives ( i ) < 1000 then
22521: LD_VAR 0 1
22525: PPUSH
22526: CALL_OW 256
22530: PUSH
22531: LD_INT 1000
22533: LESS
22534: IFFALSE 22548
// SetLives ( i , 1000 ) ;
22536: LD_VAR 0 1
22540: PPUSH
22541: LD_INT 1000
22543: PPUSH
22544: CALL_OW 234
22548: GO 22518
22550: POP
22551: POP
// until p > 20 ;
22552: LD_VAR 0 3
22556: PUSH
22557: LD_INT 20
22559: GREATER
22560: IFFALSE 22487
// end ;
22562: PPOPN 3
22564: END
// every 0 0$1 trigger StreamModeActive and sTime do
22565: LD_EXP 45
22569: IFFALSE 22577
22571: PUSH
22572: LD_EXP 96
22576: AND
22577: IFFALSE 22612
22579: GO 22581
22581: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22582: LD_INT 28
22584: PPUSH
22585: LD_OWVAR 2
22589: PPUSH
22590: LD_INT 2
22592: PPUSH
22593: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22597: LD_INT 30
22599: PPUSH
22600: LD_OWVAR 2
22604: PPUSH
22605: LD_INT 2
22607: PPUSH
22608: CALL_OW 322
// end ;
22612: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22613: LD_EXP 45
22617: IFFALSE 22625
22619: PUSH
22620: LD_EXP 97
22624: AND
22625: IFFALSE 22746
22627: GO 22629
22629: DISABLE
22630: LD_INT 0
22632: PPUSH
22633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22634: LD_ADDR_VAR 0 2
22638: PUSH
22639: LD_INT 22
22641: PUSH
22642: LD_OWVAR 2
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 21
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 3
22663: PUSH
22664: LD_INT 23
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: PPUSH
22683: CALL_OW 69
22687: ST_TO_ADDR
// if not tmp then
22688: LD_VAR 0 2
22692: NOT
22693: IFFALSE 22697
// exit ;
22695: GO 22746
// for i in tmp do
22697: LD_ADDR_VAR 0 1
22701: PUSH
22702: LD_VAR 0 2
22706: PUSH
22707: FOR_IN
22708: IFFALSE 22744
// begin if Crawls ( i ) then
22710: LD_VAR 0 1
22714: PPUSH
22715: CALL_OW 318
22719: IFFALSE 22730
// ComWalk ( i ) ;
22721: LD_VAR 0 1
22725: PPUSH
22726: CALL_OW 138
// SetClass ( i , 2 ) ;
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_INT 2
22737: PPUSH
22738: CALL_OW 336
// end ;
22742: GO 22707
22744: POP
22745: POP
// end ;
22746: PPOPN 2
22748: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22749: LD_EXP 45
22753: IFFALSE 22761
22755: PUSH
22756: LD_EXP 98
22760: AND
22761: IFFALSE 23051
22763: GO 22765
22765: DISABLE
22766: LD_INT 0
22768: PPUSH
22769: PPUSH
22770: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22771: LD_OWVAR 2
22775: PPUSH
22776: LD_INT 9
22778: PPUSH
22779: LD_INT 1
22781: PPUSH
22782: LD_INT 1
22784: PPUSH
22785: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22789: LD_INT 9
22791: PPUSH
22792: LD_OWVAR 2
22796: PPUSH
22797: CALL_OW 343
// uc_side := 9 ;
22801: LD_ADDR_OWVAR 20
22805: PUSH
22806: LD_INT 9
22808: ST_TO_ADDR
// uc_nation := 2 ;
22809: LD_ADDR_OWVAR 21
22813: PUSH
22814: LD_INT 2
22816: ST_TO_ADDR
// hc_name := Dark Warrior ;
22817: LD_ADDR_OWVAR 26
22821: PUSH
22822: LD_STRING Dark Warrior
22824: ST_TO_ADDR
// hc_gallery :=  ;
22825: LD_ADDR_OWVAR 33
22829: PUSH
22830: LD_STRING 
22832: ST_TO_ADDR
// hc_noskilllimit := true ;
22833: LD_ADDR_OWVAR 76
22837: PUSH
22838: LD_INT 1
22840: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22841: LD_ADDR_OWVAR 31
22845: PUSH
22846: LD_INT 30
22848: PUSH
22849: LD_INT 30
22851: PUSH
22852: LD_INT 30
22854: PUSH
22855: LD_INT 30
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: ST_TO_ADDR
// un := CreateHuman ;
22864: LD_ADDR_VAR 0 3
22868: PUSH
22869: CALL_OW 44
22873: ST_TO_ADDR
// hc_noskilllimit := false ;
22874: LD_ADDR_OWVAR 76
22878: PUSH
22879: LD_INT 0
22881: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22882: LD_VAR 0 3
22886: PPUSH
22887: LD_INT 1
22889: PPUSH
22890: CALL_OW 51
// ToLua ( playRanger() ) ;
22894: LD_STRING playRanger()
22896: PPUSH
22897: CALL_OW 559
// p := 0 ;
22901: LD_ADDR_VAR 0 2
22905: PUSH
22906: LD_INT 0
22908: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22909: LD_INT 35
22911: PPUSH
22912: CALL_OW 67
// p := p + 1 ;
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_VAR 0 2
22925: PUSH
22926: LD_INT 1
22928: PLUS
22929: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22930: LD_VAR 0 3
22934: PPUSH
22935: CALL_OW 256
22939: PUSH
22940: LD_INT 1000
22942: LESS
22943: IFFALSE 22957
// SetLives ( un , 1000 ) ;
22945: LD_VAR 0 3
22949: PPUSH
22950: LD_INT 1000
22952: PPUSH
22953: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22957: LD_VAR 0 3
22961: PPUSH
22962: LD_INT 81
22964: PUSH
22965: LD_OWVAR 2
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 91
22976: PUSH
22977: LD_VAR 0 3
22981: PUSH
22982: LD_INT 30
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PPUSH
22994: CALL_OW 69
22998: PPUSH
22999: LD_VAR 0 3
23003: PPUSH
23004: CALL_OW 74
23008: PPUSH
23009: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23013: LD_VAR 0 2
23017: PUSH
23018: LD_INT 80
23020: GREATER
23021: IFTRUE 23034
23023: PUSH
23024: LD_VAR 0 3
23028: PPUSH
23029: CALL_OW 301
23033: OR
23034: IFFALSE 22909
// if un then
23036: LD_VAR 0 3
23040: IFFALSE 23051
// RemoveUnit ( un ) ;
23042: LD_VAR 0 3
23046: PPUSH
23047: CALL_OW 64
// end ;
23051: PPOPN 3
23053: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23054: LD_EXP 99
23058: IFFALSE 23174
23060: GO 23062
23062: DISABLE
23063: LD_INT 0
23065: PPUSH
23066: PPUSH
23067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23068: LD_ADDR_VAR 0 2
23072: PUSH
23073: LD_INT 81
23075: PUSH
23076: LD_OWVAR 2
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 21
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PPUSH
23099: CALL_OW 69
23103: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23104: LD_STRING playComputer()
23106: PPUSH
23107: CALL_OW 559
// if not tmp then
23111: LD_VAR 0 2
23115: NOT
23116: IFFALSE 23120
// exit ;
23118: GO 23174
// for i in tmp do
23120: LD_ADDR_VAR 0 1
23124: PUSH
23125: LD_VAR 0 2
23129: PUSH
23130: FOR_IN
23131: IFFALSE 23172
// for j := 1 to 4 do
23133: LD_ADDR_VAR 0 3
23137: PUSH
23138: DOUBLE
23139: LD_INT 1
23141: DEC
23142: ST_TO_ADDR
23143: LD_INT 4
23145: PUSH
23146: FOR_TO
23147: IFFALSE 23168
// SetSkill ( i , j , 10 ) ;
23149: LD_VAR 0 1
23153: PPUSH
23154: LD_VAR 0 3
23158: PPUSH
23159: LD_INT 10
23161: PPUSH
23162: CALL_OW 237
23166: GO 23146
23168: POP
23169: POP
23170: GO 23130
23172: POP
23173: POP
// end ;
23174: PPOPN 3
23176: END
// every 0 0$1 trigger s30 do var i , tmp ;
23177: LD_EXP 100
23181: IFFALSE 23250
23183: GO 23185
23185: DISABLE
23186: LD_INT 0
23188: PPUSH
23189: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23190: LD_ADDR_VAR 0 2
23194: PUSH
23195: LD_INT 22
23197: PUSH
23198: LD_OWVAR 2
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PPUSH
23207: CALL_OW 69
23211: ST_TO_ADDR
// if not tmp then
23212: LD_VAR 0 2
23216: NOT
23217: IFFALSE 23221
// exit ;
23219: GO 23250
// for i in tmp do
23221: LD_ADDR_VAR 0 1
23225: PUSH
23226: LD_VAR 0 2
23230: PUSH
23231: FOR_IN
23232: IFFALSE 23248
// SetLives ( i , 300 ) ;
23234: LD_VAR 0 1
23238: PPUSH
23239: LD_INT 300
23241: PPUSH
23242: CALL_OW 234
23246: GO 23231
23248: POP
23249: POP
// end ;
23250: PPOPN 2
23252: END
// every 0 0$1 trigger s60 do var i , tmp ;
23253: LD_EXP 101
23257: IFFALSE 23326
23259: GO 23261
23261: DISABLE
23262: LD_INT 0
23264: PPUSH
23265: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23266: LD_ADDR_VAR 0 2
23270: PUSH
23271: LD_INT 22
23273: PUSH
23274: LD_OWVAR 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PPUSH
23283: CALL_OW 69
23287: ST_TO_ADDR
// if not tmp then
23288: LD_VAR 0 2
23292: NOT
23293: IFFALSE 23297
// exit ;
23295: GO 23326
// for i in tmp do
23297: LD_ADDR_VAR 0 1
23301: PUSH
23302: LD_VAR 0 2
23306: PUSH
23307: FOR_IN
23308: IFFALSE 23324
// SetLives ( i , 600 ) ;
23310: LD_VAR 0 1
23314: PPUSH
23315: LD_INT 600
23317: PPUSH
23318: CALL_OW 234
23322: GO 23307
23324: POP
23325: POP
// end ;
23326: PPOPN 2
23328: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23329: LD_INT 0
23331: PPUSH
// case cmd of 301 :
23332: LD_VAR 0 1
23336: PUSH
23337: LD_INT 301
23339: DOUBLE
23340: EQUAL
23341: IFTRUE 23345
23343: GO 23377
23345: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_VAR 0 7
23355: PPUSH
23356: LD_VAR 0 8
23360: PPUSH
23361: LD_VAR 0 4
23365: PPUSH
23366: LD_VAR 0 5
23370: PPUSH
23371: CALL 24590 0 5
23375: GO 23498
23377: LD_INT 302
23379: DOUBLE
23380: EQUAL
23381: IFTRUE 23385
23383: GO 23422
23385: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23386: LD_VAR 0 6
23390: PPUSH
23391: LD_VAR 0 7
23395: PPUSH
23396: LD_VAR 0 8
23400: PPUSH
23401: LD_VAR 0 9
23405: PPUSH
23406: LD_VAR 0 4
23410: PPUSH
23411: LD_VAR 0 5
23415: PPUSH
23416: CALL 24681 0 6
23420: GO 23498
23422: LD_INT 303
23424: DOUBLE
23425: EQUAL
23426: IFTRUE 23430
23428: GO 23467
23430: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23431: LD_VAR 0 6
23435: PPUSH
23436: LD_VAR 0 7
23440: PPUSH
23441: LD_VAR 0 8
23445: PPUSH
23446: LD_VAR 0 9
23450: PPUSH
23451: LD_VAR 0 4
23455: PPUSH
23456: LD_VAR 0 5
23460: PPUSH
23461: CALL 23503 0 6
23465: GO 23498
23467: LD_INT 304
23469: DOUBLE
23470: EQUAL
23471: IFTRUE 23475
23473: GO 23497
23475: POP
// hHackTeleport ( unit , x , y ) ; end ;
23476: LD_VAR 0 2
23480: PPUSH
23481: LD_VAR 0 4
23485: PPUSH
23486: LD_VAR 0 5
23490: PPUSH
23491: CALL 25274 0 3
23495: GO 23498
23497: POP
// end ;
23498: LD_VAR 0 12
23502: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23503: LD_INT 0
23505: PPUSH
23506: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23507: LD_VAR 0 1
23511: PUSH
23512: LD_INT 1
23514: LESS
23515: IFTRUE 23527
23517: PUSH
23518: LD_VAR 0 1
23522: PUSH
23523: LD_INT 3
23525: GREATER
23526: OR
23527: IFTRUE 23545
23529: PUSH
23530: LD_VAR 0 5
23534: PPUSH
23535: LD_VAR 0 6
23539: PPUSH
23540: CALL_OW 428
23544: OR
23545: IFFALSE 23549
// exit ;
23547: GO 24277
// uc_side := your_side ;
23549: LD_ADDR_OWVAR 20
23553: PUSH
23554: LD_OWVAR 2
23558: ST_TO_ADDR
// uc_nation := nation ;
23559: LD_ADDR_OWVAR 21
23563: PUSH
23564: LD_VAR 0 1
23568: ST_TO_ADDR
// bc_level = 1 ;
23569: LD_ADDR_OWVAR 43
23573: PUSH
23574: LD_INT 1
23576: ST_TO_ADDR
// case btype of 1 :
23577: LD_VAR 0 2
23581: PUSH
23582: LD_INT 1
23584: DOUBLE
23585: EQUAL
23586: IFTRUE 23590
23588: GO 23601
23590: POP
// bc_type := b_depot ; 2 :
23591: LD_ADDR_OWVAR 42
23595: PUSH
23596: LD_INT 0
23598: ST_TO_ADDR
23599: GO 24221
23601: LD_INT 2
23603: DOUBLE
23604: EQUAL
23605: IFTRUE 23609
23607: GO 23620
23609: POP
// bc_type := b_warehouse ; 3 :
23610: LD_ADDR_OWVAR 42
23614: PUSH
23615: LD_INT 1
23617: ST_TO_ADDR
23618: GO 24221
23620: LD_INT 3
23622: DOUBLE
23623: EQUAL
23624: IFTRUE 23628
23626: GO 23639
23628: POP
// bc_type := b_lab ; 4 .. 9 :
23629: LD_ADDR_OWVAR 42
23633: PUSH
23634: LD_INT 6
23636: ST_TO_ADDR
23637: GO 24221
23639: LD_INT 4
23641: DOUBLE
23642: GREATEREQUAL
23643: IFFALSE 23651
23645: LD_INT 9
23647: DOUBLE
23648: LESSEQUAL
23649: IFTRUE 23653
23651: GO 23713
23653: POP
// begin bc_type := b_lab_half ;
23654: LD_ADDR_OWVAR 42
23658: PUSH
23659: LD_INT 7
23661: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23662: LD_ADDR_OWVAR 44
23666: PUSH
23667: LD_INT 10
23669: PUSH
23670: LD_INT 11
23672: PUSH
23673: LD_INT 12
23675: PUSH
23676: LD_INT 15
23678: PUSH
23679: LD_INT 14
23681: PUSH
23682: LD_INT 13
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: PUSH
23693: LD_VAR 0 2
23697: PUSH
23698: LD_INT 3
23700: MINUS
23701: ARRAY
23702: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23703: LD_ADDR_OWVAR 45
23707: PUSH
23708: LD_INT 9
23710: ST_TO_ADDR
// end ; 10 .. 13 :
23711: GO 24221
23713: LD_INT 10
23715: DOUBLE
23716: GREATEREQUAL
23717: IFFALSE 23725
23719: LD_INT 13
23721: DOUBLE
23722: LESSEQUAL
23723: IFTRUE 23727
23725: GO 23804
23727: POP
// begin bc_type := b_lab_full ;
23728: LD_ADDR_OWVAR 42
23732: PUSH
23733: LD_INT 8
23735: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23736: LD_ADDR_OWVAR 44
23740: PUSH
23741: LD_INT 10
23743: PUSH
23744: LD_INT 12
23746: PUSH
23747: LD_INT 14
23749: PUSH
23750: LD_INT 13
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: PUSH
23759: LD_VAR 0 2
23763: PUSH
23764: LD_INT 9
23766: MINUS
23767: ARRAY
23768: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23769: LD_ADDR_OWVAR 45
23773: PUSH
23774: LD_INT 11
23776: PUSH
23777: LD_INT 15
23779: PUSH
23780: LD_INT 12
23782: PUSH
23783: LD_INT 15
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: PUSH
23792: LD_VAR 0 2
23796: PUSH
23797: LD_INT 9
23799: MINUS
23800: ARRAY
23801: ST_TO_ADDR
// end ; 14 :
23802: GO 24221
23804: LD_INT 14
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 23823
23812: POP
// bc_type := b_workshop ; 15 :
23813: LD_ADDR_OWVAR 42
23817: PUSH
23818: LD_INT 2
23820: ST_TO_ADDR
23821: GO 24221
23823: LD_INT 15
23825: DOUBLE
23826: EQUAL
23827: IFTRUE 23831
23829: GO 23842
23831: POP
// bc_type := b_factory ; 16 :
23832: LD_ADDR_OWVAR 42
23836: PUSH
23837: LD_INT 3
23839: ST_TO_ADDR
23840: GO 24221
23842: LD_INT 16
23844: DOUBLE
23845: EQUAL
23846: IFTRUE 23850
23848: GO 23861
23850: POP
// bc_type := b_ext_gun ; 17 :
23851: LD_ADDR_OWVAR 42
23855: PUSH
23856: LD_INT 17
23858: ST_TO_ADDR
23859: GO 24221
23861: LD_INT 17
23863: DOUBLE
23864: EQUAL
23865: IFTRUE 23869
23867: GO 23897
23869: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23870: LD_ADDR_OWVAR 42
23874: PUSH
23875: LD_INT 19
23877: PUSH
23878: LD_INT 23
23880: PUSH
23881: LD_INT 19
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: LD_VAR 0 1
23893: ARRAY
23894: ST_TO_ADDR
23895: GO 24221
23897: LD_INT 18
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23916
23905: POP
// bc_type := b_ext_radar ; 19 :
23906: LD_ADDR_OWVAR 42
23910: PUSH
23911: LD_INT 20
23913: ST_TO_ADDR
23914: GO 24221
23916: LD_INT 19
23918: DOUBLE
23919: EQUAL
23920: IFTRUE 23924
23922: GO 23935
23924: POP
// bc_type := b_ext_radio ; 20 :
23925: LD_ADDR_OWVAR 42
23929: PUSH
23930: LD_INT 22
23932: ST_TO_ADDR
23933: GO 24221
23935: LD_INT 20
23937: DOUBLE
23938: EQUAL
23939: IFTRUE 23943
23941: GO 23954
23943: POP
// bc_type := b_ext_siberium ; 21 :
23944: LD_ADDR_OWVAR 42
23948: PUSH
23949: LD_INT 21
23951: ST_TO_ADDR
23952: GO 24221
23954: LD_INT 21
23956: DOUBLE
23957: EQUAL
23958: IFTRUE 23962
23960: GO 23973
23962: POP
// bc_type := b_ext_computer ; 22 :
23963: LD_ADDR_OWVAR 42
23967: PUSH
23968: LD_INT 24
23970: ST_TO_ADDR
23971: GO 24221
23973: LD_INT 22
23975: DOUBLE
23976: EQUAL
23977: IFTRUE 23981
23979: GO 23992
23981: POP
// bc_type := b_ext_track ; 23 :
23982: LD_ADDR_OWVAR 42
23986: PUSH
23987: LD_INT 16
23989: ST_TO_ADDR
23990: GO 24221
23992: LD_INT 23
23994: DOUBLE
23995: EQUAL
23996: IFTRUE 24000
23998: GO 24011
24000: POP
// bc_type := b_ext_laser ; 24 :
24001: LD_ADDR_OWVAR 42
24005: PUSH
24006: LD_INT 25
24008: ST_TO_ADDR
24009: GO 24221
24011: LD_INT 24
24013: DOUBLE
24014: EQUAL
24015: IFTRUE 24019
24017: GO 24030
24019: POP
// bc_type := b_control_tower ; 25 :
24020: LD_ADDR_OWVAR 42
24024: PUSH
24025: LD_INT 36
24027: ST_TO_ADDR
24028: GO 24221
24030: LD_INT 25
24032: DOUBLE
24033: EQUAL
24034: IFTRUE 24038
24036: GO 24049
24038: POP
// bc_type := b_breastwork ; 26 :
24039: LD_ADDR_OWVAR 42
24043: PUSH
24044: LD_INT 31
24046: ST_TO_ADDR
24047: GO 24221
24049: LD_INT 26
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24057
24055: GO 24068
24057: POP
// bc_type := b_bunker ; 27 :
24058: LD_ADDR_OWVAR 42
24062: PUSH
24063: LD_INT 32
24065: ST_TO_ADDR
24066: GO 24221
24068: LD_INT 27
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24087
24076: POP
// bc_type := b_turret ; 28 :
24077: LD_ADDR_OWVAR 42
24081: PUSH
24082: LD_INT 33
24084: ST_TO_ADDR
24085: GO 24221
24087: LD_INT 28
24089: DOUBLE
24090: EQUAL
24091: IFTRUE 24095
24093: GO 24106
24095: POP
// bc_type := b_armoury ; 29 :
24096: LD_ADDR_OWVAR 42
24100: PUSH
24101: LD_INT 4
24103: ST_TO_ADDR
24104: GO 24221
24106: LD_INT 29
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24125
24114: POP
// bc_type := b_barracks ; 30 :
24115: LD_ADDR_OWVAR 42
24119: PUSH
24120: LD_INT 5
24122: ST_TO_ADDR
24123: GO 24221
24125: LD_INT 30
24127: DOUBLE
24128: EQUAL
24129: IFTRUE 24133
24131: GO 24144
24133: POP
// bc_type := b_solar_power ; 31 :
24134: LD_ADDR_OWVAR 42
24138: PUSH
24139: LD_INT 27
24141: ST_TO_ADDR
24142: GO 24221
24144: LD_INT 31
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24163
24152: POP
// bc_type := b_oil_power ; 32 :
24153: LD_ADDR_OWVAR 42
24157: PUSH
24158: LD_INT 26
24160: ST_TO_ADDR
24161: GO 24221
24163: LD_INT 32
24165: DOUBLE
24166: EQUAL
24167: IFTRUE 24171
24169: GO 24182
24171: POP
// bc_type := b_siberite_power ; 33 :
24172: LD_ADDR_OWVAR 42
24176: PUSH
24177: LD_INT 28
24179: ST_TO_ADDR
24180: GO 24221
24182: LD_INT 33
24184: DOUBLE
24185: EQUAL
24186: IFTRUE 24190
24188: GO 24201
24190: POP
// bc_type := b_oil_mine ; 34 :
24191: LD_ADDR_OWVAR 42
24195: PUSH
24196: LD_INT 29
24198: ST_TO_ADDR
24199: GO 24221
24201: LD_INT 34
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24220
24209: POP
// bc_type := b_siberite_mine ; end ;
24210: LD_ADDR_OWVAR 42
24214: PUSH
24215: LD_INT 30
24217: ST_TO_ADDR
24218: GO 24221
24220: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24221: LD_ADDR_VAR 0 8
24225: PUSH
24226: LD_VAR 0 5
24230: PPUSH
24231: LD_VAR 0 6
24235: PPUSH
24236: LD_VAR 0 3
24240: PPUSH
24241: CALL_OW 47
24245: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24246: LD_OWVAR 42
24250: PUSH
24251: LD_INT 32
24253: PUSH
24254: LD_INT 33
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: IN
24261: IFFALSE 24277
// PlaceWeaponTurret ( b , weapon ) ;
24263: LD_VAR 0 8
24267: PPUSH
24268: LD_VAR 0 4
24272: PPUSH
24273: CALL_OW 431
// end ;
24277: LD_VAR 0 7
24281: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24282: LD_INT 0
24284: PPUSH
24285: PPUSH
24286: PPUSH
24287: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24288: LD_ADDR_VAR 0 4
24292: PUSH
24293: LD_INT 22
24295: PUSH
24296: LD_OWVAR 2
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 2
24307: PUSH
24308: LD_INT 30
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 30
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PPUSH
24337: CALL_OW 69
24341: ST_TO_ADDR
// if not tmp then
24342: LD_VAR 0 4
24346: NOT
24347: IFFALSE 24351
// exit ;
24349: GO 24410
// for i in tmp do
24351: LD_ADDR_VAR 0 2
24355: PUSH
24356: LD_VAR 0 4
24360: PUSH
24361: FOR_IN
24362: IFFALSE 24408
// for j = 1 to 3 do
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: DOUBLE
24370: LD_INT 1
24372: DEC
24373: ST_TO_ADDR
24374: LD_INT 3
24376: PUSH
24377: FOR_TO
24378: IFFALSE 24404
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24380: LD_VAR 0 2
24384: PPUSH
24385: CALL_OW 274
24389: PPUSH
24390: LD_VAR 0 3
24394: PPUSH
24395: LD_INT 99999
24397: PPUSH
24398: CALL_OW 277
24402: GO 24377
24404: POP
24405: POP
24406: GO 24361
24408: POP
24409: POP
// end ;
24410: LD_VAR 0 1
24414: RET
// export function hHackSetLevel10 ; var i , j ; begin
24415: LD_INT 0
24417: PPUSH
24418: PPUSH
24419: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24420: LD_ADDR_VAR 0 2
24424: PUSH
24425: LD_INT 21
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PPUSH
24435: CALL_OW 69
24439: PUSH
24440: FOR_IN
24441: IFFALSE 24493
// if IsSelected ( i ) then
24443: LD_VAR 0 2
24447: PPUSH
24448: CALL_OW 306
24452: IFFALSE 24491
// begin for j := 1 to 4 do
24454: LD_ADDR_VAR 0 3
24458: PUSH
24459: DOUBLE
24460: LD_INT 1
24462: DEC
24463: ST_TO_ADDR
24464: LD_INT 4
24466: PUSH
24467: FOR_TO
24468: IFFALSE 24489
// SetSkill ( i , j , 10 ) ;
24470: LD_VAR 0 2
24474: PPUSH
24475: LD_VAR 0 3
24479: PPUSH
24480: LD_INT 10
24482: PPUSH
24483: CALL_OW 237
24487: GO 24467
24489: POP
24490: POP
// end ;
24491: GO 24440
24493: POP
24494: POP
// end ;
24495: LD_VAR 0 1
24499: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24500: LD_INT 0
24502: PPUSH
24503: PPUSH
24504: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24505: LD_ADDR_VAR 0 2
24509: PUSH
24510: LD_INT 22
24512: PUSH
24513: LD_OWVAR 2
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 21
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PPUSH
24536: CALL_OW 69
24540: PUSH
24541: FOR_IN
24542: IFFALSE 24583
// begin for j := 1 to 4 do
24544: LD_ADDR_VAR 0 3
24548: PUSH
24549: DOUBLE
24550: LD_INT 1
24552: DEC
24553: ST_TO_ADDR
24554: LD_INT 4
24556: PUSH
24557: FOR_TO
24558: IFFALSE 24579
// SetSkill ( i , j , 10 ) ;
24560: LD_VAR 0 2
24564: PPUSH
24565: LD_VAR 0 3
24569: PPUSH
24570: LD_INT 10
24572: PPUSH
24573: CALL_OW 237
24577: GO 24557
24579: POP
24580: POP
// end ;
24581: GO 24541
24583: POP
24584: POP
// end ;
24585: LD_VAR 0 1
24589: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24590: LD_INT 0
24592: PPUSH
// uc_side := your_side ;
24593: LD_ADDR_OWVAR 20
24597: PUSH
24598: LD_OWVAR 2
24602: ST_TO_ADDR
// uc_nation := nation ;
24603: LD_ADDR_OWVAR 21
24607: PUSH
24608: LD_VAR 0 1
24612: ST_TO_ADDR
// InitHc ;
24613: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24617: LD_INT 0
24619: PPUSH
24620: LD_VAR 0 2
24624: PPUSH
24625: LD_VAR 0 3
24629: PPUSH
24630: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24634: LD_VAR 0 4
24638: PPUSH
24639: LD_VAR 0 5
24643: PPUSH
24644: CALL_OW 428
24648: PUSH
24649: LD_INT 0
24651: EQUAL
24652: IFFALSE 24676
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24654: CALL_OW 44
24658: PPUSH
24659: LD_VAR 0 4
24663: PPUSH
24664: LD_VAR 0 5
24668: PPUSH
24669: LD_INT 1
24671: PPUSH
24672: CALL_OW 48
// end ;
24676: LD_VAR 0 6
24680: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24681: LD_INT 0
24683: PPUSH
24684: PPUSH
// uc_side := your_side ;
24685: LD_ADDR_OWVAR 20
24689: PUSH
24690: LD_OWVAR 2
24694: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24695: LD_VAR 0 1
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 2
24705: PUSH
24706: LD_INT 3
24708: PUSH
24709: LD_INT 4
24711: PUSH
24712: LD_INT 5
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: IN
24722: IFFALSE 24734
// uc_nation := nation_american else
24724: LD_ADDR_OWVAR 21
24728: PUSH
24729: LD_INT 1
24731: ST_TO_ADDR
24732: GO 24777
// if chassis in [ 11 , 12 , 13 , 14 ] then
24734: LD_VAR 0 1
24738: PUSH
24739: LD_INT 11
24741: PUSH
24742: LD_INT 12
24744: PUSH
24745: LD_INT 13
24747: PUSH
24748: LD_INT 14
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: IN
24757: IFFALSE 24769
// uc_nation := nation_arabian else
24759: LD_ADDR_OWVAR 21
24763: PUSH
24764: LD_INT 2
24766: ST_TO_ADDR
24767: GO 24777
// uc_nation := nation_russian ;
24769: LD_ADDR_OWVAR 21
24773: PUSH
24774: LD_INT 3
24776: ST_TO_ADDR
// vc_chassis := chassis ;
24777: LD_ADDR_OWVAR 37
24781: PUSH
24782: LD_VAR 0 1
24786: ST_TO_ADDR
// vc_engine := engine ;
24787: LD_ADDR_OWVAR 39
24791: PUSH
24792: LD_VAR 0 2
24796: ST_TO_ADDR
// vc_control := control ;
24797: LD_ADDR_OWVAR 38
24801: PUSH
24802: LD_VAR 0 3
24806: ST_TO_ADDR
// vc_weapon := weapon ;
24807: LD_ADDR_OWVAR 40
24811: PUSH
24812: LD_VAR 0 4
24816: ST_TO_ADDR
// un := CreateVehicle ;
24817: LD_ADDR_VAR 0 8
24821: PUSH
24822: CALL_OW 45
24826: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24827: LD_VAR 0 8
24831: PPUSH
24832: LD_INT 0
24834: PPUSH
24835: LD_INT 5
24837: PPUSH
24838: CALL_OW 12
24842: PPUSH
24843: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24847: LD_VAR 0 8
24851: PPUSH
24852: LD_VAR 0 5
24856: PPUSH
24857: LD_VAR 0 6
24861: PPUSH
24862: LD_INT 1
24864: PPUSH
24865: CALL_OW 48
// end ;
24869: LD_VAR 0 7
24873: RET
// export hInvincible ; every 1 do
24874: GO 24876
24876: DISABLE
// hInvincible := [ ] ;
24877: LD_ADDR_EXP 102
24881: PUSH
24882: EMPTY
24883: ST_TO_ADDR
24884: END
// every 10 do var i ;
24885: GO 24887
24887: DISABLE
24888: LD_INT 0
24890: PPUSH
// begin enable ;
24891: ENABLE
// if not hInvincible then
24892: LD_EXP 102
24896: NOT
24897: IFFALSE 24901
// exit ;
24899: GO 24945
// for i in hInvincible do
24901: LD_ADDR_VAR 0 1
24905: PUSH
24906: LD_EXP 102
24910: PUSH
24911: FOR_IN
24912: IFFALSE 24943
// if GetLives ( i ) < 1000 then
24914: LD_VAR 0 1
24918: PPUSH
24919: CALL_OW 256
24923: PUSH
24924: LD_INT 1000
24926: LESS
24927: IFFALSE 24941
// SetLives ( i , 1000 ) ;
24929: LD_VAR 0 1
24933: PPUSH
24934: LD_INT 1000
24936: PPUSH
24937: CALL_OW 234
24941: GO 24911
24943: POP
24944: POP
// end ;
24945: PPOPN 1
24947: END
// export function hHackInvincible ; var i ; begin
24948: LD_INT 0
24950: PPUSH
24951: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24952: LD_ADDR_VAR 0 2
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: LD_INT 21
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 21
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: LIST
24984: PPUSH
24985: CALL_OW 69
24989: PUSH
24990: FOR_IN
24991: IFFALSE 25052
// if IsSelected ( i ) then
24993: LD_VAR 0 2
24997: PPUSH
24998: CALL_OW 306
25002: IFFALSE 25050
// begin if i in hInvincible then
25004: LD_VAR 0 2
25008: PUSH
25009: LD_EXP 102
25013: IN
25014: IFFALSE 25034
// hInvincible := hInvincible diff i else
25016: LD_ADDR_EXP 102
25020: PUSH
25021: LD_EXP 102
25025: PUSH
25026: LD_VAR 0 2
25030: DIFF
25031: ST_TO_ADDR
25032: GO 25050
// hInvincible := hInvincible union i ;
25034: LD_ADDR_EXP 102
25038: PUSH
25039: LD_EXP 102
25043: PUSH
25044: LD_VAR 0 2
25048: UNION
25049: ST_TO_ADDR
// end ;
25050: GO 24990
25052: POP
25053: POP
// end ;
25054: LD_VAR 0 1
25058: RET
// export function hHackInvisible ; var i , j ; begin
25059: LD_INT 0
25061: PPUSH
25062: PPUSH
25063: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25064: LD_ADDR_VAR 0 2
25068: PUSH
25069: LD_INT 21
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PPUSH
25079: CALL_OW 69
25083: PUSH
25084: FOR_IN
25085: IFFALSE 25109
// if IsSelected ( i ) then
25087: LD_VAR 0 2
25091: PPUSH
25092: CALL_OW 306
25096: IFFALSE 25107
// ComForceInvisible ( i ) ;
25098: LD_VAR 0 2
25102: PPUSH
25103: CALL_OW 496
25107: GO 25084
25109: POP
25110: POP
// end ;
25111: LD_VAR 0 1
25115: RET
// export function hHackChangeYourSide ; begin
25116: LD_INT 0
25118: PPUSH
// if your_side = 8 then
25119: LD_OWVAR 2
25123: PUSH
25124: LD_INT 8
25126: EQUAL
25127: IFFALSE 25139
// your_side := 0 else
25129: LD_ADDR_OWVAR 2
25133: PUSH
25134: LD_INT 0
25136: ST_TO_ADDR
25137: GO 25153
// your_side := your_side + 1 ;
25139: LD_ADDR_OWVAR 2
25143: PUSH
25144: LD_OWVAR 2
25148: PUSH
25149: LD_INT 1
25151: PLUS
25152: ST_TO_ADDR
// end ;
25153: LD_VAR 0 1
25157: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25158: LD_INT 0
25160: PPUSH
25161: PPUSH
25162: PPUSH
// for i in all_units do
25163: LD_ADDR_VAR 0 2
25167: PUSH
25168: LD_OWVAR 3
25172: PUSH
25173: FOR_IN
25174: IFFALSE 25252
// if IsSelected ( i ) then
25176: LD_VAR 0 2
25180: PPUSH
25181: CALL_OW 306
25185: IFFALSE 25250
// begin j := GetSide ( i ) ;
25187: LD_ADDR_VAR 0 3
25191: PUSH
25192: LD_VAR 0 2
25196: PPUSH
25197: CALL_OW 255
25201: ST_TO_ADDR
// if j = 8 then
25202: LD_VAR 0 3
25206: PUSH
25207: LD_INT 8
25209: EQUAL
25210: IFFALSE 25222
// j := 0 else
25212: LD_ADDR_VAR 0 3
25216: PUSH
25217: LD_INT 0
25219: ST_TO_ADDR
25220: GO 25236
// j := j + 1 ;
25222: LD_ADDR_VAR 0 3
25226: PUSH
25227: LD_VAR 0 3
25231: PUSH
25232: LD_INT 1
25234: PLUS
25235: ST_TO_ADDR
// SetSide ( i , j ) ;
25236: LD_VAR 0 2
25240: PPUSH
25241: LD_VAR 0 3
25245: PPUSH
25246: CALL_OW 235
// end ;
25250: GO 25173
25252: POP
25253: POP
// end ;
25254: LD_VAR 0 1
25258: RET
// export function hHackFog ; begin
25259: LD_INT 0
25261: PPUSH
// FogOff ( true ) ;
25262: LD_INT 1
25264: PPUSH
25265: CALL_OW 344
// end ;
25269: LD_VAR 0 1
25273: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25274: LD_INT 0
25276: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25277: LD_VAR 0 1
25281: PPUSH
25282: LD_VAR 0 2
25286: PPUSH
25287: LD_VAR 0 3
25291: PPUSH
25292: LD_INT 1
25294: PPUSH
25295: LD_INT 1
25297: PPUSH
25298: CALL_OW 483
// CenterOnXY ( x , y ) ;
25302: LD_VAR 0 2
25306: PPUSH
25307: LD_VAR 0 3
25311: PPUSH
25312: CALL_OW 84
// end ;
25316: LD_VAR 0 4
25320: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25321: LD_INT 0
25323: PPUSH
25324: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25325: LD_VAR 0 1
25329: NOT
25330: IFTRUE 25349
25332: PUSH
25333: LD_VAR 0 2
25337: PPUSH
25338: LD_VAR 0 3
25342: PPUSH
25343: CALL_OW 488
25347: NOT
25348: OR
25349: IFTRUE 25384
25351: PUSH
25352: LD_VAR 0 1
25356: PPUSH
25357: CALL_OW 266
25361: PUSH
25362: LD_INT 3
25364: NONEQUAL
25365: IFFALSE 25383
25367: PUSH
25368: LD_VAR 0 1
25372: PPUSH
25373: CALL_OW 247
25377: PUSH
25378: LD_INT 1
25380: EQUAL
25381: NOT
25382: AND
25383: OR
25384: IFFALSE 25388
// exit ;
25386: GO 25670
// if GetType ( factory ) = unit_human then
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 247
25397: PUSH
25398: LD_INT 1
25400: EQUAL
25401: IFFALSE 25418
// factory := IsInUnit ( factory ) ;
25403: LD_ADDR_VAR 0 1
25407: PUSH
25408: LD_VAR 0 1
25412: PPUSH
25413: CALL_OW 310
25417: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25418: LD_VAR 0 1
25422: PPUSH
25423: CALL_OW 266
25427: PUSH
25428: LD_INT 3
25430: NONEQUAL
25431: IFFALSE 25435
// exit ;
25433: GO 25670
// for i := 1 to Count ( factoryWaypoints ) do
25435: LD_ADDR_VAR 0 5
25439: PUSH
25440: DOUBLE
25441: LD_INT 1
25443: DEC
25444: ST_TO_ADDR
25445: LD_EXP 103
25449: PPUSH
25450: CALL 35637 0 1
25454: PUSH
25455: FOR_TO
25456: IFFALSE 25618
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
25458: LD_VAR 0 2
25462: PPUSH
25463: LD_VAR 0 3
25467: PPUSH
25468: CALL_OW 428
25472: PUSH
25473: LD_EXP 103
25477: PUSH
25478: LD_VAR 0 5
25482: ARRAY
25483: PUSH
25484: LD_INT 2
25486: ARRAY
25487: EQUAL
25488: IFFALSE 25520
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25490: LD_ADDR_EXP 103
25494: PUSH
25495: LD_EXP 103
25499: PPUSH
25500: LD_VAR 0 5
25504: PPUSH
25505: CALL_OW 3
25509: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25510: CALL 25675 0 0
// exit ;
25514: POP
25515: POP
25516: GO 25670
// end else
25518: GO 25616
// if factory = factoryWaypoints [ i ] [ 2 ] then
25520: LD_VAR 0 1
25524: PUSH
25525: LD_EXP 103
25529: PUSH
25530: LD_VAR 0 5
25534: ARRAY
25535: PUSH
25536: LD_INT 2
25538: ARRAY
25539: EQUAL
25540: IFFALSE 25616
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
25542: LD_ADDR_EXP 103
25546: PUSH
25547: LD_EXP 103
25551: PPUSH
25552: LD_VAR 0 5
25556: PPUSH
25557: CALL_OW 3
25561: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25562: LD_ADDR_EXP 103
25566: PUSH
25567: LD_EXP 103
25571: PPUSH
25572: LD_VAR 0 1
25576: PPUSH
25577: CALL_OW 255
25581: PUSH
25582: LD_VAR 0 1
25586: PUSH
25587: LD_VAR 0 2
25591: PUSH
25592: LD_VAR 0 3
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: PPUSH
25603: CALL 71613 0 2
25607: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25608: CALL 25675 0 0
// exit ;
25612: POP
25613: POP
25614: GO 25670
// end ; end ;
25616: GO 25455
25618: POP
25619: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
25620: LD_ADDR_EXP 103
25624: PUSH
25625: LD_EXP 103
25629: PPUSH
25630: LD_VAR 0 1
25634: PPUSH
25635: CALL_OW 255
25639: PUSH
25640: LD_VAR 0 1
25644: PUSH
25645: LD_VAR 0 2
25649: PUSH
25650: LD_VAR 0 3
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: PPUSH
25661: CALL 71613 0 2
25665: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25666: CALL 25675 0 0
// end ;
25670: LD_VAR 0 4
25674: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25675: LD_INT 0
25677: PPUSH
25678: PPUSH
25679: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25680: LD_STRING resetFactoryWaypoint();
25682: PPUSH
25683: CALL_OW 559
// if factoryWaypoints then
25687: LD_EXP 103
25691: IFFALSE 25812
// begin list := factoryWaypoints ;
25693: LD_ADDR_VAR 0 3
25697: PUSH
25698: LD_EXP 103
25702: ST_TO_ADDR
// for i := 1 to list do
25703: LD_ADDR_VAR 0 2
25707: PUSH
25708: DOUBLE
25709: LD_INT 1
25711: DEC
25712: ST_TO_ADDR
25713: LD_VAR 0 3
25717: PUSH
25718: FOR_TO
25719: IFFALSE 25810
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25721: LD_STRING setFactoryWaypointXY(
25723: PUSH
25724: LD_VAR 0 3
25728: PUSH
25729: LD_VAR 0 2
25733: ARRAY
25734: PUSH
25735: LD_INT 1
25737: ARRAY
25738: STR
25739: PUSH
25740: LD_STRING ,
25742: STR
25743: PUSH
25744: LD_VAR 0 3
25748: PUSH
25749: LD_VAR 0 2
25753: ARRAY
25754: PUSH
25755: LD_INT 2
25757: ARRAY
25758: STR
25759: PUSH
25760: LD_STRING ,
25762: STR
25763: PUSH
25764: LD_VAR 0 3
25768: PUSH
25769: LD_VAR 0 2
25773: ARRAY
25774: PUSH
25775: LD_INT 3
25777: ARRAY
25778: STR
25779: PUSH
25780: LD_STRING ,
25782: STR
25783: PUSH
25784: LD_VAR 0 3
25788: PUSH
25789: LD_VAR 0 2
25793: ARRAY
25794: PUSH
25795: LD_INT 4
25797: ARRAY
25798: STR
25799: PUSH
25800: LD_STRING )
25802: STR
25803: PPUSH
25804: CALL_OW 559
25808: GO 25718
25810: POP
25811: POP
// end ; end ;
25812: LD_VAR 0 1
25816: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25817: LD_INT 0
25819: PPUSH
// if HexInfo ( x , y ) = warehouse then
25820: LD_VAR 0 2
25824: PPUSH
25825: LD_VAR 0 3
25829: PPUSH
25830: CALL_OW 428
25834: PUSH
25835: LD_VAR 0 1
25839: EQUAL
25840: IFFALSE 25867
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25842: LD_ADDR_EXP 105
25846: PUSH
25847: LD_EXP 105
25851: PPUSH
25852: LD_VAR 0 1
25856: PPUSH
25857: LD_INT 0
25859: PPUSH
25860: CALL_OW 1
25864: ST_TO_ADDR
25865: GO 25918
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25867: LD_ADDR_EXP 105
25871: PUSH
25872: LD_EXP 105
25876: PPUSH
25877: LD_VAR 0 1
25881: PPUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: CALL_OW 255
25891: PUSH
25892: LD_VAR 0 1
25896: PUSH
25897: LD_VAR 0 2
25901: PUSH
25902: LD_VAR 0 3
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: PPUSH
25913: CALL_OW 1
25917: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25918: CALL 25927 0 0
// end ;
25922: LD_VAR 0 4
25926: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25927: LD_INT 0
25929: PPUSH
25930: PPUSH
25931: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25932: LD_STRING resetWarehouseGatheringPoints();
25934: PPUSH
25935: CALL_OW 559
// if warehouseGatheringPoints then
25939: LD_EXP 105
25943: IFFALSE 26069
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25945: LD_ADDR_VAR 0 3
25949: PUSH
25950: LD_EXP 105
25954: PPUSH
25955: CALL 75547 0 1
25959: ST_TO_ADDR
// for i := 1 to list do
25960: LD_ADDR_VAR 0 2
25964: PUSH
25965: DOUBLE
25966: LD_INT 1
25968: DEC
25969: ST_TO_ADDR
25970: LD_VAR 0 3
25974: PUSH
25975: FOR_TO
25976: IFFALSE 26067
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25978: LD_STRING setWarehouseGatheringPointXY(
25980: PUSH
25981: LD_VAR 0 3
25985: PUSH
25986: LD_VAR 0 2
25990: ARRAY
25991: PUSH
25992: LD_INT 1
25994: ARRAY
25995: STR
25996: PUSH
25997: LD_STRING ,
25999: STR
26000: PUSH
26001: LD_VAR 0 3
26005: PUSH
26006: LD_VAR 0 2
26010: ARRAY
26011: PUSH
26012: LD_INT 2
26014: ARRAY
26015: STR
26016: PUSH
26017: LD_STRING ,
26019: STR
26020: PUSH
26021: LD_VAR 0 3
26025: PUSH
26026: LD_VAR 0 2
26030: ARRAY
26031: PUSH
26032: LD_INT 3
26034: ARRAY
26035: STR
26036: PUSH
26037: LD_STRING ,
26039: STR
26040: PUSH
26041: LD_VAR 0 3
26045: PUSH
26046: LD_VAR 0 2
26050: ARRAY
26051: PUSH
26052: LD_INT 4
26054: ARRAY
26055: STR
26056: PUSH
26057: LD_STRING )
26059: STR
26060: PPUSH
26061: CALL_OW 559
26065: GO 25975
26067: POP
26068: POP
// end ; end ;
26069: LD_VAR 0 1
26073: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26074: LD_EXP 105
26078: IFFALSE 26773
26080: GO 26082
26082: DISABLE
26083: LD_INT 0
26085: PPUSH
26086: PPUSH
26087: PPUSH
26088: PPUSH
26089: PPUSH
26090: PPUSH
26091: PPUSH
26092: PPUSH
26093: PPUSH
// begin enable ;
26094: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: LD_EXP 105
26104: PPUSH
26105: CALL 75547 0 1
26109: ST_TO_ADDR
// if not list then
26110: LD_VAR 0 3
26114: NOT
26115: IFFALSE 26119
// exit ;
26117: GO 26773
// for i := 1 to list do
26119: LD_ADDR_VAR 0 1
26123: PUSH
26124: DOUBLE
26125: LD_INT 1
26127: DEC
26128: ST_TO_ADDR
26129: LD_VAR 0 3
26133: PUSH
26134: FOR_TO
26135: IFFALSE 26771
// begin depot := list [ i ] [ 2 ] ;
26137: LD_ADDR_VAR 0 8
26141: PUSH
26142: LD_VAR 0 3
26146: PUSH
26147: LD_VAR 0 1
26151: ARRAY
26152: PUSH
26153: LD_INT 2
26155: ARRAY
26156: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26157: LD_ADDR_VAR 0 5
26161: PUSH
26162: LD_VAR 0 3
26166: PUSH
26167: LD_VAR 0 1
26171: ARRAY
26172: PUSH
26173: LD_INT 1
26175: ARRAY
26176: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26177: LD_VAR 0 8
26181: PPUSH
26182: CALL_OW 301
26186: IFTRUE 26205
26188: PUSH
26189: LD_VAR 0 5
26193: PUSH
26194: LD_VAR 0 8
26198: PPUSH
26199: CALL_OW 255
26203: NONEQUAL
26204: OR
26205: IFFALSE 26234
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26207: LD_ADDR_EXP 105
26211: PUSH
26212: LD_EXP 105
26216: PPUSH
26217: LD_VAR 0 8
26221: PPUSH
26222: LD_INT 0
26224: PPUSH
26225: CALL_OW 1
26229: ST_TO_ADDR
// exit ;
26230: POP
26231: POP
26232: GO 26773
// end ; x := list [ i ] [ 3 ] ;
26234: LD_ADDR_VAR 0 6
26238: PUSH
26239: LD_VAR 0 3
26243: PUSH
26244: LD_VAR 0 1
26248: ARRAY
26249: PUSH
26250: LD_INT 3
26252: ARRAY
26253: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26254: LD_ADDR_VAR 0 7
26258: PUSH
26259: LD_VAR 0 3
26263: PUSH
26264: LD_VAR 0 1
26268: ARRAY
26269: PUSH
26270: LD_INT 4
26272: ARRAY
26273: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26274: LD_ADDR_VAR 0 9
26278: PUSH
26279: LD_VAR 0 6
26283: PPUSH
26284: LD_VAR 0 7
26288: PPUSH
26289: LD_INT 16
26291: PPUSH
26292: CALL 74121 0 3
26296: ST_TO_ADDR
// if not cratesNearbyPoint then
26297: LD_VAR 0 9
26301: NOT
26302: IFFALSE 26308
// exit ;
26304: POP
26305: POP
26306: GO 26773
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26308: LD_ADDR_VAR 0 4
26312: PUSH
26313: LD_INT 22
26315: PUSH
26316: LD_VAR 0 5
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 3
26327: PUSH
26328: LD_INT 60
26330: PUSH
26331: EMPTY
26332: LIST
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 91
26340: PUSH
26341: LD_VAR 0 8
26345: PUSH
26346: LD_INT 6
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 2
26356: PUSH
26357: LD_INT 25
26359: PUSH
26360: LD_INT 2
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 25
26369: PUSH
26370: LD_INT 16
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: PPUSH
26388: CALL_OW 69
26392: PUSH
26393: LD_VAR 0 8
26397: PPUSH
26398: CALL_OW 313
26402: PPUSH
26403: LD_INT 3
26405: PUSH
26406: LD_INT 60
26408: PUSH
26409: EMPTY
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 2
26418: PUSH
26419: LD_INT 25
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 25
26431: PUSH
26432: LD_INT 16
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: LIST
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PPUSH
26448: CALL_OW 72
26452: UNION
26453: ST_TO_ADDR
// if tmp then
26454: LD_VAR 0 4
26458: IFFALSE 26538
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26460: LD_ADDR_VAR 0 4
26464: PUSH
26465: LD_VAR 0 4
26469: PPUSH
26470: LD_INT 3
26472: PPUSH
26473: CALL 71928 0 2
26477: ST_TO_ADDR
// for j in tmp do
26478: LD_ADDR_VAR 0 2
26482: PUSH
26483: LD_VAR 0 4
26487: PUSH
26488: FOR_IN
26489: IFFALSE 26532
// begin if IsInUnit ( j ) then
26491: LD_VAR 0 2
26495: PPUSH
26496: CALL_OW 310
26500: IFFALSE 26511
// ComExit ( j ) ;
26502: LD_VAR 0 2
26506: PPUSH
26507: CALL 72011 0 1
// AddComCollect ( j , x , y ) ;
26511: LD_VAR 0 2
26515: PPUSH
26516: LD_VAR 0 6
26520: PPUSH
26521: LD_VAR 0 7
26525: PPUSH
26526: CALL_OW 177
// end ;
26530: GO 26488
26532: POP
26533: POP
// exit ;
26534: POP
26535: POP
26536: GO 26773
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26538: LD_ADDR_VAR 0 4
26542: PUSH
26543: LD_INT 22
26545: PUSH
26546: LD_VAR 0 5
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 91
26557: PUSH
26558: LD_VAR 0 8
26562: PUSH
26563: LD_INT 8
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: PUSH
26574: LD_INT 34
26576: PUSH
26577: LD_INT 12
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 34
26586: PUSH
26587: LD_INT 51
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 34
26596: PUSH
26597: LD_INT 32
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 34
26606: PUSH
26607: LD_INT 89
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 69
26630: ST_TO_ADDR
// if tmp then
26631: LD_VAR 0 4
26635: IFFALSE 26769
// begin for j in tmp do
26637: LD_ADDR_VAR 0 2
26641: PUSH
26642: LD_VAR 0 4
26646: PUSH
26647: FOR_IN
26648: IFFALSE 26767
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26650: LD_VAR 0 2
26654: PPUSH
26655: CALL_OW 262
26659: PUSH
26660: LD_INT 3
26662: EQUAL
26663: IFTRUE 26680
26665: PUSH
26666: LD_VAR 0 2
26670: PPUSH
26671: CALL_OW 261
26675: PUSH
26676: LD_INT 20
26678: GREATER
26679: OR
26680: IFFALSE 26694
26682: PUSH
26683: LD_VAR 0 2
26687: PPUSH
26688: CALL_OW 314
26692: NOT
26693: AND
26694: IFFALSE 26724
26696: PUSH
26697: LD_VAR 0 2
26701: PPUSH
26702: CALL_OW 263
26706: PUSH
26707: LD_INT 1
26709: NONEQUAL
26710: IFTRUE 26723
26712: PUSH
26713: LD_VAR 0 2
26717: PPUSH
26718: CALL_OW 311
26722: OR
26723: AND
26724: IFFALSE 26765
// begin ComCollect ( j , x , y ) ;
26726: LD_VAR 0 2
26730: PPUSH
26731: LD_VAR 0 6
26735: PPUSH
26736: LD_VAR 0 7
26740: PPUSH
26741: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26745: LD_VAR 0 2
26749: PPUSH
26750: LD_VAR 0 8
26754: PPUSH
26755: CALL_OW 172
// exit ;
26759: POP
26760: POP
26761: POP
26762: POP
26763: GO 26773
// end ;
26765: GO 26647
26767: POP
26768: POP
// end ; end ;
26769: GO 26134
26771: POP
26772: POP
// end ; end_of_file
26773: PPOPN 9
26775: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26776: LD_VAR 0 1
26780: PUSH
26781: LD_INT 200
26783: DOUBLE
26784: GREATEREQUAL
26785: IFFALSE 26793
26787: LD_INT 299
26789: DOUBLE
26790: LESSEQUAL
26791: IFTRUE 26795
26793: GO 26827
26795: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26796: LD_VAR 0 1
26800: PPUSH
26801: LD_VAR 0 2
26805: PPUSH
26806: LD_VAR 0 3
26810: PPUSH
26811: LD_VAR 0 4
26815: PPUSH
26816: LD_VAR 0 5
26820: PPUSH
26821: CALL 27689 0 5
26825: GO 26904
26827: LD_INT 300
26829: DOUBLE
26830: GREATEREQUAL
26831: IFFALSE 26839
26833: LD_INT 399
26835: DOUBLE
26836: LESSEQUAL
26837: IFTRUE 26841
26839: GO 26903
26841: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26842: LD_VAR 0 1
26846: PPUSH
26847: LD_VAR 0 2
26851: PPUSH
26852: LD_VAR 0 3
26856: PPUSH
26857: LD_VAR 0 4
26861: PPUSH
26862: LD_VAR 0 5
26866: PPUSH
26867: LD_VAR 0 6
26871: PPUSH
26872: LD_VAR 0 7
26876: PPUSH
26877: LD_VAR 0 8
26881: PPUSH
26882: LD_VAR 0 9
26886: PPUSH
26887: LD_VAR 0 10
26891: PPUSH
26892: LD_VAR 0 11
26896: PPUSH
26897: CALL 23329 0 11
26901: GO 26904
26903: POP
// end ;
26904: PPOPN 11
26906: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26907: LD_VAR 0 1
26911: PPUSH
26912: LD_VAR 0 2
26916: PPUSH
26917: LD_VAR 0 3
26921: PPUSH
26922: LD_VAR 0 4
26926: PPUSH
26927: LD_VAR 0 5
26931: PPUSH
26932: CALL 26989 0 5
// end ; end_of_file
26936: PPOPN 5
26938: END
// export function SOS_UnitDestroyed ( un ) ; begin
26939: LD_INT 0
26941: PPUSH
// ComRadiation ( un ) ;
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL 28109 0 1
// end ;
26951: LD_VAR 0 2
26955: RET
// export function SOS_UnitKamikazed ( un ) ; begin
26956: LD_INT 0
26958: PPUSH
// ComRadiation ( un ) ;
26959: LD_VAR 0 1
26963: PPUSH
26964: CALL 28109 0 1
// end ;
26968: LD_VAR 0 2
26972: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26973: LD_INT 0
26975: PPUSH
// end ;
26976: LD_VAR 0 4
26980: RET
// export function SOS_Command ( cmd ) ; begin
26981: LD_INT 0
26983: PPUSH
// end ;
26984: LD_VAR 0 2
26988: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26989: LD_INT 0
26991: PPUSH
// end ;
26992: LD_VAR 0 6
26996: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
26997: LD_INT 0
26999: PPUSH
27000: PPUSH
27001: PPUSH
27002: PPUSH
27003: PPUSH
// if not vehicle or not factory then
27004: LD_VAR 0 1
27008: NOT
27009: IFTRUE 27018
27011: PUSH
27012: LD_VAR 0 2
27016: NOT
27017: OR
27018: IFFALSE 27022
// exit ;
27020: GO 27684
// weapon := GetWeapon ( vehicle ) ;
27022: LD_ADDR_VAR 0 7
27026: PUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 264
27036: ST_TO_ADDR
// if weapon = ar_miner then
27037: LD_VAR 0 7
27041: PUSH
27042: LD_INT 81
27044: EQUAL
27045: IFFALSE 27102
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
27047: LD_ADDR_EXP 114
27051: PUSH
27052: LD_EXP 114
27056: PPUSH
27057: LD_EXP 114
27061: PUSH
27062: LD_INT 1
27064: PLUS
27065: PPUSH
27066: LD_VAR 0 1
27070: PPUSH
27071: CALL_OW 1
27075: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27076: LD_ADDR_EXP 115
27080: PUSH
27081: LD_EXP 115
27085: PPUSH
27086: LD_EXP 115
27090: PUSH
27091: LD_INT 1
27093: PLUS
27094: PPUSH
27095: EMPTY
27096: PPUSH
27097: CALL_OW 1
27101: ST_TO_ADDR
// end ; if not factoryWaypoints then
27102: LD_EXP 103
27106: NOT
27107: IFFALSE 27111
// exit ;
27109: GO 27684
// for i := 1 to Count ( factoryWaypoints ) do
27111: LD_ADDR_VAR 0 4
27115: PUSH
27116: DOUBLE
27117: LD_INT 1
27119: DEC
27120: ST_TO_ADDR
27121: LD_EXP 103
27125: PPUSH
27126: CALL 35637 0 1
27130: PUSH
27131: FOR_TO
27132: IFFALSE 27682
// if factoryWaypoints [ i ] [ 2 ] = factory then
27134: LD_EXP 103
27138: PUSH
27139: LD_VAR 0 4
27143: ARRAY
27144: PUSH
27145: LD_INT 2
27147: ARRAY
27148: PUSH
27149: LD_VAR 0 2
27153: EQUAL
27154: IFFALSE 27680
// begin if GetControl ( vehicle ) = control_manual then
27156: LD_VAR 0 1
27160: PPUSH
27161: CALL_OW 263
27165: PUSH
27166: LD_INT 1
27168: EQUAL
27169: IFFALSE 27533
// begin driver := IsDrivenBy ( vehicle ) ;
27171: LD_ADDR_VAR 0 5
27175: PUSH
27176: LD_VAR 0 1
27180: PPUSH
27181: CALL_OW 311
27185: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27186: LD_VAR 0 5
27190: PUSH
27191: LD_EXP 104
27195: IN
27196: IFTRUE 27210
27198: PUSH
27199: LD_VAR 0 1
27203: PUSH
27204: LD_EXP 104
27208: IN
27209: OR
27210: IFFALSE 27216
// exit ;
27212: POP
27213: POP
27214: GO 27684
// if not HasTask ( driver ) then
27216: LD_VAR 0 5
27220: PPUSH
27221: CALL_OW 314
27225: NOT
27226: IFFALSE 27531
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27228: LD_ADDR_EXP 104
27232: PUSH
27233: LD_EXP 104
27237: PPUSH
27238: LD_VAR 0 5
27242: PPUSH
27243: CALL 71613 0 2
27247: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27248: LD_ADDR_EXP 104
27252: PUSH
27253: LD_EXP 104
27257: PPUSH
27258: LD_VAR 0 1
27262: PPUSH
27263: CALL 71613 0 2
27267: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27268: LD_ADDR_VAR 0 6
27272: PUSH
27273: LD_EXP 103
27277: PUSH
27278: LD_VAR 0 4
27282: ARRAY
27283: PUSH
27284: LD_INT 3
27286: ARRAY
27287: PPUSH
27288: LD_EXP 103
27292: PUSH
27293: LD_VAR 0 4
27297: ARRAY
27298: PUSH
27299: LD_INT 4
27301: ARRAY
27302: PPUSH
27303: CALL_OW 428
27307: ST_TO_ADDR
// if hex then
27308: LD_VAR 0 6
27312: IFFALSE 27330
// ComMoveUnit ( driver , hex ) else
27314: LD_VAR 0 5
27318: PPUSH
27319: LD_VAR 0 6
27323: PPUSH
27324: CALL_OW 112
27328: GO 27414
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27330: LD_VAR 0 1
27334: PPUSH
27335: LD_EXP 103
27339: PUSH
27340: LD_VAR 0 4
27344: ARRAY
27345: PUSH
27346: LD_INT 3
27348: ARRAY
27349: PPUSH
27350: LD_EXP 103
27354: PUSH
27355: LD_VAR 0 4
27359: ARRAY
27360: PUSH
27361: LD_INT 4
27363: ARRAY
27364: PPUSH
27365: CALL_OW 297
27369: PUSH
27370: LD_INT 0
27372: GREATER
27373: IFFALSE 27414
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27375: LD_VAR 0 5
27379: PPUSH
27380: LD_EXP 103
27384: PUSH
27385: LD_VAR 0 4
27389: ARRAY
27390: PUSH
27391: LD_INT 3
27393: ARRAY
27394: PPUSH
27395: LD_EXP 103
27399: PUSH
27400: LD_VAR 0 4
27404: ARRAY
27405: PUSH
27406: LD_INT 4
27408: ARRAY
27409: PPUSH
27410: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27414: LD_VAR 0 5
27418: PPUSH
27419: CALL_OW 181
// if Multiplayer then
27423: LD_OWVAR 4
27427: IFFALSE 27476
// begin repeat wait ( 10 ) ;
27429: LD_INT 10
27431: PPUSH
27432: CALL_OW 67
// until not IsInUnit ( driver ) ;
27436: LD_VAR 0 5
27440: PPUSH
27441: CALL_OW 310
27445: NOT
27446: IFFALSE 27429
// if not HasTask ( driver ) then
27448: LD_VAR 0 5
27452: PPUSH
27453: CALL_OW 314
27457: NOT
27458: IFFALSE 27474
// ComEnterUnit ( driver , factory ) ;
27460: LD_VAR 0 5
27464: PPUSH
27465: LD_VAR 0 2
27469: PPUSH
27470: CALL_OW 120
// end else
27474: GO 27490
// AddComEnterUnit ( driver , factory ) ;
27476: LD_VAR 0 5
27480: PPUSH
27481: LD_VAR 0 2
27485: PPUSH
27486: CALL_OW 180
// wait ( 0 0$1 ) ;
27490: LD_INT 35
27492: PPUSH
27493: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27497: LD_ADDR_EXP 104
27501: PUSH
27502: LD_EXP 104
27506: PUSH
27507: LD_VAR 0 5
27511: DIFF
27512: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27513: LD_ADDR_EXP 104
27517: PUSH
27518: LD_EXP 104
27522: PUSH
27523: LD_VAR 0 1
27527: DIFF
27528: ST_TO_ADDR
// break ;
27529: GO 27682
// end ; end else
27531: GO 27680
// if GetControl ( vehicle ) = control_remote then
27533: LD_VAR 0 1
27537: PPUSH
27538: CALL_OW 263
27542: PUSH
27543: LD_INT 2
27545: EQUAL
27546: IFFALSE 27632
// begin wait ( 0 0$2 ) ;
27548: LD_INT 70
27550: PPUSH
27551: CALL_OW 67
// repeat wait ( 10 ) ;
27555: LD_INT 10
27557: PPUSH
27558: CALL_OW 67
// Connect ( vehicle ) ;
27562: LD_VAR 0 1
27566: PPUSH
27567: CALL 41915 0 1
// until IsControledBy ( vehicle ) ;
27571: LD_VAR 0 1
27575: PPUSH
27576: CALL_OW 312
27580: IFFALSE 27555
// wait ( 10 ) ;
27582: LD_INT 10
27584: PPUSH
27585: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27589: LD_VAR 0 1
27593: PPUSH
27594: LD_EXP 103
27598: PUSH
27599: LD_VAR 0 4
27603: ARRAY
27604: PUSH
27605: LD_INT 3
27607: ARRAY
27608: PPUSH
27609: LD_EXP 103
27613: PUSH
27614: LD_VAR 0 4
27618: ARRAY
27619: PUSH
27620: LD_INT 4
27622: ARRAY
27623: PPUSH
27624: CALL_OW 111
// break ;
27628: GO 27682
// end else
27630: GO 27680
// begin wait ( 0 0$3 ) ;
27632: LD_INT 105
27634: PPUSH
27635: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27639: LD_VAR 0 1
27643: PPUSH
27644: LD_EXP 103
27648: PUSH
27649: LD_VAR 0 4
27653: ARRAY
27654: PUSH
27655: LD_INT 3
27657: ARRAY
27658: PPUSH
27659: LD_EXP 103
27663: PUSH
27664: LD_VAR 0 4
27668: ARRAY
27669: PUSH
27670: LD_INT 4
27672: ARRAY
27673: PPUSH
27674: CALL_OW 111
// break ;
27678: GO 27682
// end ; end ;
27680: GO 27131
27682: POP
27683: POP
// end ;
27684: LD_VAR 0 3
27688: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27689: LD_INT 0
27691: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27692: LD_VAR 0 1
27696: PUSH
27697: LD_INT 250
27699: EQUAL
27700: IFFALSE 27717
27702: PUSH
27703: LD_VAR 0 2
27707: PPUSH
27708: CALL_OW 264
27712: PUSH
27713: LD_INT 81
27715: EQUAL
27716: AND
27717: IFFALSE 27738
// MinerPlaceMine ( unit , x , y ) ;
27719: LD_VAR 0 2
27723: PPUSH
27724: LD_VAR 0 4
27728: PPUSH
27729: LD_VAR 0 5
27733: PPUSH
27734: CALL 31084 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27738: LD_VAR 0 1
27742: PUSH
27743: LD_INT 251
27745: EQUAL
27746: IFFALSE 27763
27748: PUSH
27749: LD_VAR 0 2
27753: PPUSH
27754: CALL_OW 264
27758: PUSH
27759: LD_INT 81
27761: EQUAL
27762: AND
27763: IFFALSE 27784
// MinerDetonateMine ( unit , x , y ) ;
27765: LD_VAR 0 2
27769: PPUSH
27770: LD_VAR 0 4
27774: PPUSH
27775: LD_VAR 0 5
27779: PPUSH
27780: CALL 31491 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27784: LD_VAR 0 1
27788: PUSH
27789: LD_INT 252
27791: EQUAL
27792: IFFALSE 27809
27794: PUSH
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 264
27804: PUSH
27805: LD_INT 81
27807: EQUAL
27808: AND
27809: IFFALSE 27830
// MinerCreateMinefield ( unit , x , y ) ;
27811: LD_VAR 0 2
27815: PPUSH
27816: LD_VAR 0 4
27820: PPUSH
27821: LD_VAR 0 5
27825: PPUSH
27826: CALL 31723 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27830: LD_VAR 0 1
27834: PUSH
27835: LD_INT 253
27837: EQUAL
27838: IFFALSE 27855
27840: PUSH
27841: LD_VAR 0 2
27845: PPUSH
27846: CALL_OW 257
27850: PUSH
27851: LD_INT 5
27853: EQUAL
27854: AND
27855: IFFALSE 27876
// ComBinocular ( unit , x , y ) ;
27857: LD_VAR 0 2
27861: PPUSH
27862: LD_VAR 0 4
27866: PPUSH
27867: LD_VAR 0 5
27871: PPUSH
27872: CALL 32098 0 3
// if selectedUnit then
27876: LD_VAR 0 3
27880: IFFALSE 27940
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27882: LD_VAR 0 1
27886: PUSH
27887: LD_INT 254
27889: EQUAL
27890: IFFALSE 27907
27892: PUSH
27893: LD_VAR 0 2
27897: PPUSH
27898: CALL_OW 264
27902: PUSH
27903: LD_INT 99
27905: EQUAL
27906: AND
27907: IFFALSE 27924
27909: PUSH
27910: LD_VAR 0 3
27914: PPUSH
27915: CALL_OW 263
27919: PUSH
27920: LD_INT 3
27922: EQUAL
27923: AND
27924: IFFALSE 27940
// HackDestroyVehicle ( unit , selectedUnit ) ;
27926: LD_VAR 0 2
27930: PPUSH
27931: LD_VAR 0 3
27935: PPUSH
27936: CALL 30274 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27940: LD_VAR 0 1
27944: PUSH
27945: LD_INT 255
27947: EQUAL
27948: IFFALSE 27972
27950: PUSH
27951: LD_VAR 0 2
27955: PPUSH
27956: CALL_OW 264
27960: PUSH
27961: LD_INT 14
27963: PUSH
27964: LD_INT 53
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: IN
27971: AND
27972: IFFALSE 27990
27974: PUSH
27975: LD_VAR 0 4
27979: PPUSH
27980: LD_VAR 0 5
27984: PPUSH
27985: CALL_OW 488
27989: AND
27990: IFFALSE 28014
// CutTreeXYR ( unit , x , y , 12 ) ;
27992: LD_VAR 0 2
27996: PPUSH
27997: LD_VAR 0 4
28001: PPUSH
28002: LD_VAR 0 5
28006: PPUSH
28007: LD_INT 12
28009: PPUSH
28010: CALL 28205 0 4
// if cmd = 256 then
28014: LD_VAR 0 1
28018: PUSH
28019: LD_INT 256
28021: EQUAL
28022: IFFALSE 28043
// SetFactoryWaypoint ( unit , x , y ) ;
28024: LD_VAR 0 2
28028: PPUSH
28029: LD_VAR 0 4
28033: PPUSH
28034: LD_VAR 0 5
28038: PPUSH
28039: CALL 25321 0 3
// if cmd = 257 then
28043: LD_VAR 0 1
28047: PUSH
28048: LD_INT 257
28050: EQUAL
28051: IFFALSE 28072
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28053: LD_VAR 0 2
28057: PPUSH
28058: LD_VAR 0 4
28062: PPUSH
28063: LD_VAR 0 5
28067: PPUSH
28068: CALL 25817 0 3
// if cmd = 258 then
28072: LD_VAR 0 1
28076: PUSH
28077: LD_INT 258
28079: EQUAL
28080: IFFALSE 28104
// BurnTreeXYR ( unit , x , y , 8 ) ;
28082: LD_VAR 0 2
28086: PPUSH
28087: LD_VAR 0 4
28091: PPUSH
28092: LD_VAR 0 5
28096: PPUSH
28097: LD_INT 8
28099: PPUSH
28100: CALL 28627 0 4
// end ;
28104: LD_VAR 0 6
28108: RET
// export function ComRadiation ( un ) ; var eff ; begin
28109: LD_INT 0
28111: PPUSH
28112: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28113: LD_VAR 0 1
28117: PPUSH
28118: CALL_OW 264
28122: PUSH
28123: LD_INT 91
28125: NONEQUAL
28126: IFFALSE 28130
// exit ;
28128: GO 28200
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28130: LD_INT 68
28132: PPUSH
28133: LD_VAR 0 1
28137: PPUSH
28138: CALL_OW 255
28142: PPUSH
28143: CALL_OW 321
28147: PUSH
28148: LD_INT 2
28150: EQUAL
28151: IFFALSE 28163
// eff := 50 else
28153: LD_ADDR_VAR 0 3
28157: PUSH
28158: LD_INT 50
28160: ST_TO_ADDR
28161: GO 28171
// eff := 25 ;
28163: LD_ADDR_VAR 0 3
28167: PUSH
28168: LD_INT 25
28170: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28171: LD_VAR 0 1
28175: PPUSH
28176: CALL_OW 250
28180: PPUSH
28181: LD_VAR 0 1
28185: PPUSH
28186: CALL_OW 251
28190: PPUSH
28191: LD_VAR 0 3
28195: PPUSH
28196: CALL_OW 495
// end ;
28200: LD_VAR 0 2
28204: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28205: LD_INT 0
28207: PPUSH
28208: PPUSH
28209: PPUSH
28210: PPUSH
28211: PPUSH
28212: PPUSH
28213: PPUSH
28214: PPUSH
28215: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28216: LD_VAR 0 1
28220: PPUSH
28221: CALL_OW 302
28225: NOT
28226: IFTRUE 28245
28228: PUSH
28229: LD_VAR 0 2
28233: PPUSH
28234: LD_VAR 0 3
28238: PPUSH
28239: CALL_OW 488
28243: NOT
28244: OR
28245: IFTRUE 28254
28247: PUSH
28248: LD_VAR 0 4
28252: NOT
28253: OR
28254: IFFALSE 28258
// exit ;
28256: GO 28622
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
28258: LD_VAR 0 1
28262: PPUSH
28263: CALL_OW 437
28267: PPUSH
28268: CALL 35637 0 1
28272: PUSH
28273: LD_INT 10
28275: GREATER
28276: IFFALSE 28280
// exit ;
28278: GO 28622
// list := [ ] ;
28280: LD_ADDR_VAR 0 13
28284: PUSH
28285: EMPTY
28286: ST_TO_ADDR
// if x - r < 0 then
28287: LD_VAR 0 2
28291: PUSH
28292: LD_VAR 0 4
28296: MINUS
28297: PUSH
28298: LD_INT 0
28300: LESS
28301: IFFALSE 28313
// min_x := 0 else
28303: LD_ADDR_VAR 0 7
28307: PUSH
28308: LD_INT 0
28310: ST_TO_ADDR
28311: GO 28329
// min_x := x - r ;
28313: LD_ADDR_VAR 0 7
28317: PUSH
28318: LD_VAR 0 2
28322: PUSH
28323: LD_VAR 0 4
28327: MINUS
28328: ST_TO_ADDR
// if y - r < 0 then
28329: LD_VAR 0 3
28333: PUSH
28334: LD_VAR 0 4
28338: MINUS
28339: PUSH
28340: LD_INT 0
28342: LESS
28343: IFFALSE 28355
// min_y := 0 else
28345: LD_ADDR_VAR 0 8
28349: PUSH
28350: LD_INT 0
28352: ST_TO_ADDR
28353: GO 28371
// min_y := y - r ;
28355: LD_ADDR_VAR 0 8
28359: PUSH
28360: LD_VAR 0 3
28364: PUSH
28365: LD_VAR 0 4
28369: MINUS
28370: ST_TO_ADDR
// max_x := x + r ;
28371: LD_ADDR_VAR 0 9
28375: PUSH
28376: LD_VAR 0 2
28380: PUSH
28381: LD_VAR 0 4
28385: PLUS
28386: ST_TO_ADDR
// max_y := y + r ;
28387: LD_ADDR_VAR 0 10
28391: PUSH
28392: LD_VAR 0 3
28396: PUSH
28397: LD_VAR 0 4
28401: PLUS
28402: ST_TO_ADDR
// for _x = min_x to max_x do
28403: LD_ADDR_VAR 0 11
28407: PUSH
28408: DOUBLE
28409: LD_VAR 0 7
28413: DEC
28414: ST_TO_ADDR
28415: LD_VAR 0 9
28419: PUSH
28420: FOR_TO
28421: IFFALSE 28540
// for _y = min_y to max_y do
28423: LD_ADDR_VAR 0 12
28427: PUSH
28428: DOUBLE
28429: LD_VAR 0 8
28433: DEC
28434: ST_TO_ADDR
28435: LD_VAR 0 10
28439: PUSH
28440: FOR_TO
28441: IFFALSE 28536
// begin if not ValidHex ( _x , _y ) then
28443: LD_VAR 0 11
28447: PPUSH
28448: LD_VAR 0 12
28452: PPUSH
28453: CALL_OW 488
28457: NOT
28458: IFFALSE 28462
// continue ;
28460: GO 28440
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28462: LD_VAR 0 11
28466: PPUSH
28467: LD_VAR 0 12
28471: PPUSH
28472: CALL_OW 351
28476: IFFALSE 28494
28478: PUSH
28479: LD_VAR 0 11
28483: PPUSH
28484: LD_VAR 0 12
28488: PPUSH
28489: CALL_OW 554
28493: AND
28494: IFFALSE 28534
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28496: LD_ADDR_VAR 0 13
28500: PUSH
28501: LD_VAR 0 13
28505: PPUSH
28506: LD_VAR 0 13
28510: PUSH
28511: LD_INT 1
28513: PLUS
28514: PPUSH
28515: LD_VAR 0 11
28519: PUSH
28520: LD_VAR 0 12
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PPUSH
28529: CALL_OW 2
28533: ST_TO_ADDR
// end ;
28534: GO 28440
28536: POP
28537: POP
28538: GO 28420
28540: POP
28541: POP
// if not list then
28542: LD_VAR 0 13
28546: NOT
28547: IFFALSE 28551
// exit ;
28549: GO 28622
// for i in list do
28551: LD_ADDR_VAR 0 6
28555: PUSH
28556: LD_VAR 0 13
28560: PUSH
28561: FOR_IN
28562: IFFALSE 28620
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28564: LD_VAR 0 1
28568: PPUSH
28569: LD_STRING M
28571: PUSH
28572: LD_VAR 0 6
28576: PUSH
28577: LD_INT 1
28579: ARRAY
28580: PUSH
28581: LD_VAR 0 6
28585: PUSH
28586: LD_INT 2
28588: ARRAY
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: LD_INT 0
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: PUSH
28611: EMPTY
28612: LIST
28613: PPUSH
28614: CALL_OW 447
28618: GO 28561
28620: POP
28621: POP
// end ;
28622: LD_VAR 0 5
28626: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28627: LD_INT 0
28629: PPUSH
28630: PPUSH
28631: PPUSH
28632: PPUSH
28633: PPUSH
28634: PPUSH
28635: PPUSH
28636: PPUSH
28637: PPUSH
28638: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28639: LD_VAR 0 1
28643: PPUSH
28644: CALL_OW 302
28648: NOT
28649: IFTRUE 28668
28651: PUSH
28652: LD_VAR 0 2
28656: PPUSH
28657: LD_VAR 0 3
28661: PPUSH
28662: CALL_OW 488
28666: NOT
28667: OR
28668: IFTRUE 28677
28670: PUSH
28671: LD_VAR 0 4
28675: NOT
28676: OR
28677: IFFALSE 28681
// exit ;
28679: GO 29220
// if Count ( GetTaskList ( flame ) ) > 10 then
28681: LD_VAR 0 1
28685: PPUSH
28686: CALL_OW 437
28690: PPUSH
28691: CALL 35637 0 1
28695: PUSH
28696: LD_INT 10
28698: GREATER
28699: IFFALSE 28703
// exit ;
28701: GO 29220
// list := [ ] ;
28703: LD_ADDR_VAR 0 13
28707: PUSH
28708: EMPTY
28709: ST_TO_ADDR
// if x - r < 0 then
28710: LD_VAR 0 2
28714: PUSH
28715: LD_VAR 0 4
28719: MINUS
28720: PUSH
28721: LD_INT 0
28723: LESS
28724: IFFALSE 28736
// min_x := 0 else
28726: LD_ADDR_VAR 0 7
28730: PUSH
28731: LD_INT 0
28733: ST_TO_ADDR
28734: GO 28752
// min_x := x - r ;
28736: LD_ADDR_VAR 0 7
28740: PUSH
28741: LD_VAR 0 2
28745: PUSH
28746: LD_VAR 0 4
28750: MINUS
28751: ST_TO_ADDR
// if y - r < 0 then
28752: LD_VAR 0 3
28756: PUSH
28757: LD_VAR 0 4
28761: MINUS
28762: PUSH
28763: LD_INT 0
28765: LESS
28766: IFFALSE 28778
// min_y := 0 else
28768: LD_ADDR_VAR 0 8
28772: PUSH
28773: LD_INT 0
28775: ST_TO_ADDR
28776: GO 28794
// min_y := y - r ;
28778: LD_ADDR_VAR 0 8
28782: PUSH
28783: LD_VAR 0 3
28787: PUSH
28788: LD_VAR 0 4
28792: MINUS
28793: ST_TO_ADDR
// max_x := x + r ;
28794: LD_ADDR_VAR 0 9
28798: PUSH
28799: LD_VAR 0 2
28803: PUSH
28804: LD_VAR 0 4
28808: PLUS
28809: ST_TO_ADDR
// max_y := y + r ;
28810: LD_ADDR_VAR 0 10
28814: PUSH
28815: LD_VAR 0 3
28819: PUSH
28820: LD_VAR 0 4
28824: PLUS
28825: ST_TO_ADDR
// for _x = min_x to max_x do
28826: LD_ADDR_VAR 0 11
28830: PUSH
28831: DOUBLE
28832: LD_VAR 0 7
28836: DEC
28837: ST_TO_ADDR
28838: LD_VAR 0 9
28842: PUSH
28843: FOR_TO
28844: IFFALSE 28963
// for _y = min_y to max_y do
28846: LD_ADDR_VAR 0 12
28850: PUSH
28851: DOUBLE
28852: LD_VAR 0 8
28856: DEC
28857: ST_TO_ADDR
28858: LD_VAR 0 10
28862: PUSH
28863: FOR_TO
28864: IFFALSE 28959
// begin if not ValidHex ( _x , _y ) then
28866: LD_VAR 0 11
28870: PPUSH
28871: LD_VAR 0 12
28875: PPUSH
28876: CALL_OW 488
28880: NOT
28881: IFFALSE 28885
// continue ;
28883: GO 28863
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28885: LD_VAR 0 11
28889: PPUSH
28890: LD_VAR 0 12
28894: PPUSH
28895: CALL_OW 351
28899: IFFALSE 28917
28901: PUSH
28902: LD_VAR 0 11
28906: PPUSH
28907: LD_VAR 0 12
28911: PPUSH
28912: CALL_OW 554
28916: AND
28917: IFFALSE 28957
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28919: LD_ADDR_VAR 0 13
28923: PUSH
28924: LD_VAR 0 13
28928: PPUSH
28929: LD_VAR 0 13
28933: PUSH
28934: LD_INT 1
28936: PLUS
28937: PPUSH
28938: LD_VAR 0 11
28942: PUSH
28943: LD_VAR 0 12
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PPUSH
28952: CALL_OW 2
28956: ST_TO_ADDR
// end ;
28957: GO 28863
28959: POP
28960: POP
28961: GO 28843
28963: POP
28964: POP
// if not list then
28965: LD_VAR 0 13
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29220
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28974: LD_ADDR_VAR 0 13
28978: PUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: LD_VAR 0 13
28988: PPUSH
28989: LD_INT 1
28991: PPUSH
28992: LD_INT 1
28994: PPUSH
28995: CALL 39043 0 4
28999: ST_TO_ADDR
// ComStop ( flame ) ;
29000: LD_VAR 0 1
29004: PPUSH
29005: CALL_OW 141
// for i in list do
29009: LD_ADDR_VAR 0 6
29013: PUSH
29014: LD_VAR 0 13
29018: PUSH
29019: FOR_IN
29020: IFFALSE 29051
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29022: LD_VAR 0 1
29026: PPUSH
29027: LD_VAR 0 6
29031: PUSH
29032: LD_INT 1
29034: ARRAY
29035: PPUSH
29036: LD_VAR 0 6
29040: PUSH
29041: LD_INT 2
29043: ARRAY
29044: PPUSH
29045: CALL_OW 176
29049: GO 29019
29051: POP
29052: POP
// repeat wait ( 0 0$1 ) ;
29053: LD_INT 35
29055: PPUSH
29056: CALL_OW 67
// task := GetTaskList ( flame ) ;
29060: LD_ADDR_VAR 0 14
29064: PUSH
29065: LD_VAR 0 1
29069: PPUSH
29070: CALL_OW 437
29074: ST_TO_ADDR
// if not task then
29075: LD_VAR 0 14
29079: NOT
29080: IFFALSE 29084
// exit ;
29082: GO 29220
// if task [ 1 ] [ 1 ] <> | then
29084: LD_VAR 0 14
29088: PUSH
29089: LD_INT 1
29091: ARRAY
29092: PUSH
29093: LD_INT 1
29095: ARRAY
29096: PUSH
29097: LD_STRING |
29099: NONEQUAL
29100: IFFALSE 29104
// exit ;
29102: GO 29220
// _x := task [ 1 ] [ 2 ] ;
29104: LD_ADDR_VAR 0 11
29108: PUSH
29109: LD_VAR 0 14
29113: PUSH
29114: LD_INT 1
29116: ARRAY
29117: PUSH
29118: LD_INT 2
29120: ARRAY
29121: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29122: LD_ADDR_VAR 0 12
29126: PUSH
29127: LD_VAR 0 14
29131: PUSH
29132: LD_INT 1
29134: ARRAY
29135: PUSH
29136: LD_INT 3
29138: ARRAY
29139: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29140: LD_VAR 0 11
29144: PPUSH
29145: LD_VAR 0 12
29149: PPUSH
29150: CALL_OW 351
29154: NOT
29155: IFTRUE 29174
29157: PUSH
29158: LD_VAR 0 11
29162: PPUSH
29163: LD_VAR 0 12
29167: PPUSH
29168: CALL_OW 554
29172: NOT
29173: OR
29174: IFFALSE 29208
// begin task := Delete ( task , 1 ) ;
29176: LD_ADDR_VAR 0 14
29180: PUSH
29181: LD_VAR 0 14
29185: PPUSH
29186: LD_INT 1
29188: PPUSH
29189: CALL_OW 3
29193: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29194: LD_VAR 0 1
29198: PPUSH
29199: LD_VAR 0 14
29203: PPUSH
29204: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 314
29217: NOT
29218: IFFALSE 29053
// end ;
29220: LD_VAR 0 5
29224: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29225: LD_EXP 107
29229: NOT
29230: IFFALSE 29280
29232: GO 29234
29234: DISABLE
// begin initHack := true ;
29235: LD_ADDR_EXP 107
29239: PUSH
29240: LD_INT 1
29242: ST_TO_ADDR
// hackTanks := [ ] ;
29243: LD_ADDR_EXP 108
29247: PUSH
29248: EMPTY
29249: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29250: LD_ADDR_EXP 109
29254: PUSH
29255: EMPTY
29256: ST_TO_ADDR
// hackLimit := 3 ;
29257: LD_ADDR_EXP 110
29261: PUSH
29262: LD_INT 3
29264: ST_TO_ADDR
// hackDist := 12 ;
29265: LD_ADDR_EXP 111
29269: PUSH
29270: LD_INT 12
29272: ST_TO_ADDR
// hackCounter := [ ] ;
29273: LD_ADDR_EXP 112
29277: PUSH
29278: EMPTY
29279: ST_TO_ADDR
// end ;
29280: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29281: LD_EXP 107
29285: IFFALSE 29303
29287: PUSH
29288: LD_INT 34
29290: PUSH
29291: LD_INT 99
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PPUSH
29298: CALL_OW 69
29302: AND
29303: IFFALSE 29556
29305: GO 29307
29307: DISABLE
29308: LD_INT 0
29310: PPUSH
29311: PPUSH
// begin enable ;
29312: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29313: LD_ADDR_VAR 0 1
29317: PUSH
29318: LD_INT 34
29320: PUSH
29321: LD_INT 99
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PPUSH
29328: CALL_OW 69
29332: PUSH
29333: FOR_IN
29334: IFFALSE 29554
// begin if not i in hackTanks then
29336: LD_VAR 0 1
29340: PUSH
29341: LD_EXP 108
29345: IN
29346: NOT
29347: IFFALSE 29430
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29349: LD_ADDR_EXP 108
29353: PUSH
29354: LD_EXP 108
29358: PPUSH
29359: LD_EXP 108
29363: PUSH
29364: LD_INT 1
29366: PLUS
29367: PPUSH
29368: LD_VAR 0 1
29372: PPUSH
29373: CALL_OW 1
29377: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29378: LD_ADDR_EXP 109
29382: PUSH
29383: LD_EXP 109
29387: PPUSH
29388: LD_EXP 109
29392: PUSH
29393: LD_INT 1
29395: PLUS
29396: PPUSH
29397: EMPTY
29398: PPUSH
29399: CALL_OW 1
29403: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29404: LD_ADDR_EXP 112
29408: PUSH
29409: LD_EXP 112
29413: PPUSH
29414: LD_EXP 112
29418: PUSH
29419: LD_INT 1
29421: PLUS
29422: PPUSH
29423: EMPTY
29424: PPUSH
29425: CALL_OW 1
29429: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 302
29439: NOT
29440: IFFALSE 29453
// begin HackUnlinkAll ( i ) ;
29442: LD_VAR 0 1
29446: PPUSH
29447: CALL 29559 0 1
// continue ;
29451: GO 29333
// end ; HackCheckCapturedStatus ( i ) ;
29453: LD_VAR 0 1
29457: PPUSH
29458: CALL 30004 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29462: LD_ADDR_VAR 0 2
29466: PUSH
29467: LD_INT 81
29469: PUSH
29470: LD_VAR 0 1
29474: PPUSH
29475: CALL_OW 255
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 33
29486: PUSH
29487: LD_INT 3
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 91
29496: PUSH
29497: LD_VAR 0 1
29501: PUSH
29502: LD_EXP 111
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 50
29514: PUSH
29515: EMPTY
29516: LIST
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: PPUSH
29524: CALL_OW 69
29528: ST_TO_ADDR
// if not tmp then
29529: LD_VAR 0 2
29533: NOT
29534: IFFALSE 29538
// continue ;
29536: GO 29333
// HackLink ( i , tmp ) ;
29538: LD_VAR 0 1
29542: PPUSH
29543: LD_VAR 0 2
29547: PPUSH
29548: CALL 29695 0 2
// end ;
29552: GO 29333
29554: POP
29555: POP
// end ;
29556: PPOPN 2
29558: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29559: LD_INT 0
29561: PPUSH
29562: PPUSH
29563: PPUSH
// if not hack in hackTanks then
29564: LD_VAR 0 1
29568: PUSH
29569: LD_EXP 108
29573: IN
29574: NOT
29575: IFFALSE 29579
// exit ;
29577: GO 29690
// index := GetElementIndex ( hackTanks , hack ) ;
29579: LD_ADDR_VAR 0 4
29583: PUSH
29584: LD_EXP 108
29588: PPUSH
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL 38338 0 2
29598: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29599: LD_EXP 109
29603: PUSH
29604: LD_VAR 0 4
29608: ARRAY
29609: IFFALSE 29690
// begin for i in hackTanksCaptured [ index ] do
29611: LD_ADDR_VAR 0 3
29615: PUSH
29616: LD_EXP 109
29620: PUSH
29621: LD_VAR 0 4
29625: ARRAY
29626: PUSH
29627: FOR_IN
29628: IFFALSE 29654
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29630: LD_VAR 0 3
29634: PUSH
29635: LD_INT 1
29637: ARRAY
29638: PPUSH
29639: LD_VAR 0 3
29643: PUSH
29644: LD_INT 2
29646: ARRAY
29647: PPUSH
29648: CALL_OW 235
29652: GO 29627
29654: POP
29655: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29656: LD_ADDR_EXP 109
29660: PUSH
29661: LD_EXP 109
29665: PPUSH
29666: LD_VAR 0 4
29670: PPUSH
29671: EMPTY
29672: PPUSH
29673: CALL_OW 1
29677: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29678: LD_VAR 0 1
29682: PPUSH
29683: LD_INT 0
29685: PPUSH
29686: CALL_OW 505
// end ; end ;
29690: LD_VAR 0 2
29694: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29695: LD_INT 0
29697: PPUSH
29698: PPUSH
29699: PPUSH
// if not hack in hackTanks or not vehicles then
29700: LD_VAR 0 1
29704: PUSH
29705: LD_EXP 108
29709: IN
29710: NOT
29711: IFTRUE 29720
29713: PUSH
29714: LD_VAR 0 2
29718: NOT
29719: OR
29720: IFFALSE 29724
// exit ;
29722: GO 29999
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29724: LD_ADDR_VAR 0 2
29728: PUSH
29729: LD_VAR 0 1
29733: PPUSH
29734: LD_VAR 0 2
29738: PPUSH
29739: LD_INT 1
29741: PPUSH
29742: LD_INT 1
29744: PPUSH
29745: CALL 38990 0 4
29749: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29750: LD_ADDR_VAR 0 5
29754: PUSH
29755: LD_EXP 108
29759: PPUSH
29760: LD_VAR 0 1
29764: PPUSH
29765: CALL 38338 0 2
29769: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29770: LD_EXP 109
29774: PUSH
29775: LD_VAR 0 5
29779: ARRAY
29780: PUSH
29781: LD_EXP 110
29785: LESS
29786: IFFALSE 29975
// begin for i := 1 to vehicles do
29788: LD_ADDR_VAR 0 4
29792: PUSH
29793: DOUBLE
29794: LD_INT 1
29796: DEC
29797: ST_TO_ADDR
29798: LD_VAR 0 2
29802: PUSH
29803: FOR_TO
29804: IFFALSE 29973
// begin if hackTanksCaptured [ index ] = hackLimit then
29806: LD_EXP 109
29810: PUSH
29811: LD_VAR 0 5
29815: ARRAY
29816: PUSH
29817: LD_EXP 110
29821: EQUAL
29822: IFFALSE 29826
// break ;
29824: GO 29973
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29826: LD_ADDR_EXP 112
29830: PUSH
29831: LD_EXP 112
29835: PPUSH
29836: LD_VAR 0 5
29840: PPUSH
29841: LD_EXP 112
29845: PUSH
29846: LD_VAR 0 5
29850: ARRAY
29851: PUSH
29852: LD_INT 1
29854: PLUS
29855: PPUSH
29856: CALL_OW 1
29860: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29861: LD_ADDR_EXP 109
29865: PUSH
29866: LD_EXP 109
29870: PPUSH
29871: LD_VAR 0 5
29875: PUSH
29876: LD_EXP 109
29880: PUSH
29881: LD_VAR 0 5
29885: ARRAY
29886: PUSH
29887: LD_INT 1
29889: PLUS
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PPUSH
29895: LD_VAR 0 2
29899: PUSH
29900: LD_VAR 0 4
29904: ARRAY
29905: PUSH
29906: LD_VAR 0 2
29910: PUSH
29911: LD_VAR 0 4
29915: ARRAY
29916: PPUSH
29917: CALL_OW 255
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PPUSH
29926: CALL 38555 0 3
29930: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29931: LD_VAR 0 2
29935: PUSH
29936: LD_VAR 0 4
29940: ARRAY
29941: PPUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL_OW 255
29951: PPUSH
29952: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29956: LD_VAR 0 2
29960: PUSH
29961: LD_VAR 0 4
29965: ARRAY
29966: PPUSH
29967: CALL_OW 141
// end ;
29971: GO 29803
29973: POP
29974: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29975: LD_VAR 0 1
29979: PPUSH
29980: LD_EXP 109
29984: PUSH
29985: LD_VAR 0 5
29989: ARRAY
29990: PUSH
29991: LD_INT 0
29993: PLUS
29994: PPUSH
29995: CALL_OW 505
// end ;
29999: LD_VAR 0 3
30003: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30004: LD_INT 0
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
// if not hack in hackTanks then
30010: LD_VAR 0 1
30014: PUSH
30015: LD_EXP 108
30019: IN
30020: NOT
30021: IFFALSE 30025
// exit ;
30023: GO 30269
// index := GetElementIndex ( hackTanks , hack ) ;
30025: LD_ADDR_VAR 0 4
30029: PUSH
30030: LD_EXP 108
30034: PPUSH
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL 38338 0 2
30044: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30045: LD_ADDR_VAR 0 3
30049: PUSH
30050: DOUBLE
30051: LD_EXP 109
30055: PUSH
30056: LD_VAR 0 4
30060: ARRAY
30061: INC
30062: ST_TO_ADDR
30063: LD_INT 1
30065: PUSH
30066: FOR_DOWNTO
30067: IFFALSE 30243
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30069: LD_ADDR_VAR 0 5
30073: PUSH
30074: LD_EXP 109
30078: PUSH
30079: LD_VAR 0 4
30083: ARRAY
30084: PUSH
30085: LD_VAR 0 3
30089: ARRAY
30090: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30091: LD_VAR 0 5
30095: PUSH
30096: LD_INT 1
30098: ARRAY
30099: PPUSH
30100: CALL_OW 302
30104: NOT
30105: IFTRUE 30133
30107: PUSH
30108: LD_VAR 0 5
30112: PUSH
30113: LD_INT 1
30115: ARRAY
30116: PPUSH
30117: CALL_OW 255
30121: PUSH
30122: LD_VAR 0 1
30126: PPUSH
30127: CALL_OW 255
30131: NONEQUAL
30132: OR
30133: IFFALSE 30241
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30135: LD_VAR 0 5
30139: PUSH
30140: LD_INT 1
30142: ARRAY
30143: PPUSH
30144: CALL_OW 305
30148: IFFALSE 30176
30150: PUSH
30151: LD_VAR 0 5
30155: PUSH
30156: LD_INT 1
30158: ARRAY
30159: PPUSH
30160: CALL_OW 255
30164: PUSH
30165: LD_VAR 0 1
30169: PPUSH
30170: CALL_OW 255
30174: EQUAL
30175: AND
30176: IFFALSE 30200
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30178: LD_VAR 0 5
30182: PUSH
30183: LD_INT 1
30185: ARRAY
30186: PPUSH
30187: LD_VAR 0 5
30191: PUSH
30192: LD_INT 2
30194: ARRAY
30195: PPUSH
30196: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30200: LD_ADDR_EXP 109
30204: PUSH
30205: LD_EXP 109
30209: PPUSH
30210: LD_VAR 0 4
30214: PPUSH
30215: LD_EXP 109
30219: PUSH
30220: LD_VAR 0 4
30224: ARRAY
30225: PPUSH
30226: LD_VAR 0 3
30230: PPUSH
30231: CALL_OW 3
30235: PPUSH
30236: CALL_OW 1
30240: ST_TO_ADDR
// end ; end ;
30241: GO 30066
30243: POP
30244: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30245: LD_VAR 0 1
30249: PPUSH
30250: LD_EXP 109
30254: PUSH
30255: LD_VAR 0 4
30259: ARRAY
30260: PUSH
30261: LD_INT 0
30263: PLUS
30264: PPUSH
30265: CALL_OW 505
// end ;
30269: LD_VAR 0 2
30273: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30274: LD_INT 0
30276: PPUSH
30277: PPUSH
30278: PPUSH
30279: PPUSH
// if not hack in hackTanks then
30280: LD_VAR 0 1
30284: PUSH
30285: LD_EXP 108
30289: IN
30290: NOT
30291: IFFALSE 30295
// exit ;
30293: GO 30380
// index := GetElementIndex ( hackTanks , hack ) ;
30295: LD_ADDR_VAR 0 5
30299: PUSH
30300: LD_EXP 108
30304: PPUSH
30305: LD_VAR 0 1
30309: PPUSH
30310: CALL 38338 0 2
30314: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30315: LD_ADDR_VAR 0 4
30319: PUSH
30320: DOUBLE
30321: LD_INT 1
30323: DEC
30324: ST_TO_ADDR
30325: LD_EXP 109
30329: PUSH
30330: LD_VAR 0 5
30334: ARRAY
30335: PUSH
30336: FOR_TO
30337: IFFALSE 30378
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30339: LD_EXP 109
30343: PUSH
30344: LD_VAR 0 5
30348: ARRAY
30349: PUSH
30350: LD_VAR 0 4
30354: ARRAY
30355: PUSH
30356: LD_INT 1
30358: ARRAY
30359: PUSH
30360: LD_VAR 0 2
30364: EQUAL
30365: IFFALSE 30376
// KillUnit ( vehicle ) ;
30367: LD_VAR 0 2
30371: PPUSH
30372: CALL_OW 66
30376: GO 30336
30378: POP
30379: POP
// end ;
30380: LD_VAR 0 3
30384: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
30385: LD_EXP 113
30389: NOT
30390: IFFALSE 30523
30392: GO 30394
30394: DISABLE
30395: LD_INT 0
30397: PPUSH
// begin initMiner := true ;
30398: LD_ADDR_EXP 113
30402: PUSH
30403: LD_INT 1
30405: ST_TO_ADDR
// minersList := [ ] ;
30406: LD_ADDR_EXP 114
30410: PUSH
30411: EMPTY
30412: ST_TO_ADDR
// minerMinesList := [ ] ;
30413: LD_ADDR_EXP 115
30417: PUSH
30418: EMPTY
30419: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
30420: LD_ADDR_EXP 116
30424: PUSH
30425: LD_INT 10
30427: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30428: LD_ADDR_VAR 0 1
30432: PUSH
30433: LD_INT 34
30435: PUSH
30436: LD_INT 81
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 69
30447: PUSH
30448: FOR_IN
30449: IFFALSE 30521
// begin if not i in minersList then
30451: LD_VAR 0 1
30455: PUSH
30456: LD_EXP 114
30460: IN
30461: NOT
30462: IFFALSE 30519
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30464: LD_ADDR_EXP 114
30468: PUSH
30469: LD_EXP 114
30473: PPUSH
30474: LD_EXP 114
30478: PUSH
30479: LD_INT 1
30481: PLUS
30482: PPUSH
30483: LD_VAR 0 1
30487: PPUSH
30488: CALL_OW 1
30492: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30493: LD_ADDR_EXP 115
30497: PUSH
30498: LD_EXP 115
30502: PPUSH
30503: LD_EXP 115
30507: PUSH
30508: LD_INT 1
30510: PLUS
30511: PPUSH
30512: EMPTY
30513: PPUSH
30514: CALL_OW 1
30518: ST_TO_ADDR
// end end ;
30519: GO 30448
30521: POP
30522: POP
// end ;
30523: PPOPN 1
30525: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
30526: LD_EXP 113
30530: IFFALSE 30561
30532: PUSH
30533: LD_EXP 115
30537: PPUSH
30538: CALL 35637 0 1
30542: IFTRUE 30560
30544: PUSH
30545: LD_INT 34
30547: PUSH
30548: LD_INT 81
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PPUSH
30555: CALL_OW 69
30559: OR
30560: AND
30561: IFFALSE 31081
30563: GO 30565
30565: DISABLE
30566: LD_INT 0
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
// begin enable ;
30572: ENABLE
// for i := minerMinesList downto 1 do
30573: LD_ADDR_VAR 0 1
30577: PUSH
30578: DOUBLE
30579: LD_EXP 115
30583: INC
30584: ST_TO_ADDR
30585: LD_INT 1
30587: PUSH
30588: FOR_DOWNTO
30589: IFFALSE 31079
// begin side := GetSide ( minersList [ i ] ) ;
30591: LD_ADDR_VAR 0 3
30595: PUSH
30596: LD_EXP 114
30600: PUSH
30601: LD_VAR 0 1
30605: ARRAY
30606: PPUSH
30607: CALL_OW 255
30611: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
30612: LD_EXP 114
30616: PUSH
30617: LD_VAR 0 1
30621: ARRAY
30622: PPUSH
30623: CALL_OW 300
30627: IFFALSE 30648
30629: PUSH
30630: LD_VAR 0 3
30634: PUSH
30635: LD_OWVAR 2
30639: PUSH
30640: LD_INT 9
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: IN
30647: AND
30648: IFFALSE 30681
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
30650: LD_EXP 114
30654: PUSH
30655: LD_VAR 0 1
30659: ARRAY
30660: PPUSH
30661: LD_EXP 115
30665: PUSH
30666: LD_VAR 0 1
30670: ARRAY
30671: PPUSH
30672: CALL 35637 0 1
30676: PPUSH
30677: CALL_OW 505
// if not minerMinesList [ i ] then
30681: LD_EXP 115
30685: PUSH
30686: LD_VAR 0 1
30690: ARRAY
30691: NOT
30692: IFFALSE 30696
// continue ;
30694: GO 30588
// for j := minerMinesList [ i ] downto 1 do
30696: LD_ADDR_VAR 0 2
30700: PUSH
30701: DOUBLE
30702: LD_EXP 115
30706: PUSH
30707: LD_VAR 0 1
30711: ARRAY
30712: INC
30713: ST_TO_ADDR
30714: LD_INT 1
30716: PUSH
30717: FOR_DOWNTO
30718: IFFALSE 31075
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
30720: LD_EXP 114
30724: PUSH
30725: LD_VAR 0 1
30729: ARRAY
30730: PPUSH
30731: CALL_OW 301
30735: IFTRUE 30755
30737: PUSH
30738: LD_EXP 114
30742: PUSH
30743: LD_VAR 0 1
30747: ARRAY
30748: PPUSH
30749: CALL_OW 305
30753: NOT
30754: OR
30755: IFFALSE 30846
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30757: LD_EXP 115
30761: PUSH
30762: LD_VAR 0 1
30766: ARRAY
30767: PUSH
30768: LD_VAR 0 2
30772: ARRAY
30773: PUSH
30774: LD_INT 1
30776: ARRAY
30777: PPUSH
30778: LD_EXP 115
30782: PUSH
30783: LD_VAR 0 1
30787: ARRAY
30788: PUSH
30789: LD_VAR 0 2
30793: ARRAY
30794: PUSH
30795: LD_INT 2
30797: ARRAY
30798: PPUSH
30799: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30803: LD_ADDR_EXP 115
30807: PUSH
30808: LD_EXP 115
30812: PPUSH
30813: LD_VAR 0 1
30817: PPUSH
30818: LD_EXP 115
30822: PUSH
30823: LD_VAR 0 1
30827: ARRAY
30828: PPUSH
30829: LD_VAR 0 2
30833: PPUSH
30834: CALL_OW 3
30838: PPUSH
30839: CALL_OW 1
30843: ST_TO_ADDR
// continue ;
30844: GO 30717
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30846: LD_ADDR_VAR 0 4
30850: PUSH
30851: LD_EXP 115
30855: PUSH
30856: LD_VAR 0 1
30860: ARRAY
30861: PUSH
30862: LD_VAR 0 2
30866: ARRAY
30867: PUSH
30868: LD_INT 1
30870: ARRAY
30871: PPUSH
30872: LD_EXP 115
30876: PUSH
30877: LD_VAR 0 1
30881: ARRAY
30882: PUSH
30883: LD_VAR 0 2
30887: ARRAY
30888: PUSH
30889: LD_INT 2
30891: ARRAY
30892: PPUSH
30893: CALL_OW 428
30897: ST_TO_ADDR
// if not tmp then
30898: LD_VAR 0 4
30902: NOT
30903: IFFALSE 30907
// continue ;
30905: GO 30717
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30907: LD_VAR 0 4
30911: PUSH
30912: LD_INT 81
30914: PUSH
30915: LD_VAR 0 3
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PPUSH
30924: CALL_OW 69
30928: IN
30929: IFFALSE 30979
30931: PUSH
30932: LD_EXP 115
30936: PUSH
30937: LD_VAR 0 1
30941: ARRAY
30942: PUSH
30943: LD_VAR 0 2
30947: ARRAY
30948: PUSH
30949: LD_INT 1
30951: ARRAY
30952: PPUSH
30953: LD_EXP 115
30957: PUSH
30958: LD_VAR 0 1
30962: ARRAY
30963: PUSH
30964: LD_VAR 0 2
30968: ARRAY
30969: PUSH
30970: LD_INT 2
30972: ARRAY
30973: PPUSH
30974: CALL_OW 458
30978: AND
30979: IFFALSE 31073
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30981: LD_EXP 115
30985: PUSH
30986: LD_VAR 0 1
30990: ARRAY
30991: PUSH
30992: LD_VAR 0 2
30996: ARRAY
30997: PUSH
30998: LD_INT 1
31000: ARRAY
31001: PPUSH
31002: LD_EXP 115
31006: PUSH
31007: LD_VAR 0 1
31011: ARRAY
31012: PUSH
31013: LD_VAR 0 2
31017: ARRAY
31018: PUSH
31019: LD_INT 2
31021: ARRAY
31022: PPUSH
31023: LD_VAR 0 3
31027: PPUSH
31028: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31032: LD_ADDR_EXP 115
31036: PUSH
31037: LD_EXP 115
31041: PPUSH
31042: LD_VAR 0 1
31046: PPUSH
31047: LD_EXP 115
31051: PUSH
31052: LD_VAR 0 1
31056: ARRAY
31057: PPUSH
31058: LD_VAR 0 2
31062: PPUSH
31063: CALL_OW 3
31067: PPUSH
31068: CALL_OW 1
31072: ST_TO_ADDR
// end ; end ;
31073: GO 30717
31075: POP
31076: POP
// end ;
31077: GO 30588
31079: POP
31080: POP
// end ;
31081: PPOPN 4
31083: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
31084: LD_INT 0
31086: PPUSH
31087: PPUSH
31088: PPUSH
31089: PPUSH
// result := false ;
31090: LD_ADDR_VAR 0 4
31094: PUSH
31095: LD_INT 0
31097: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31098: LD_VAR 0 1
31102: PPUSH
31103: CALL_OW 264
31107: PUSH
31108: LD_INT 81
31110: EQUAL
31111: NOT
31112: IFFALSE 31116
// exit ;
31114: GO 31486
// side := GetSide ( unit ) ;
31116: LD_ADDR_VAR 0 6
31120: PUSH
31121: LD_VAR 0 1
31125: PPUSH
31126: CALL_OW 255
31130: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
31131: LD_ADDR_VAR 0 5
31135: PUSH
31136: LD_EXP 114
31140: PPUSH
31141: LD_VAR 0 1
31145: PPUSH
31146: CALL 38338 0 2
31150: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31151: LD_EXP 115
31155: PUSH
31156: LD_VAR 0 5
31160: ARRAY
31161: PUSH
31162: LD_EXP 116
31166: GREATEREQUAL
31167: IFFALSE 31171
// exit ;
31169: GO 31486
// ComMoveXY ( unit , x , y ) ;
31171: LD_VAR 0 1
31175: PPUSH
31176: LD_VAR 0 2
31180: PPUSH
31181: LD_VAR 0 3
31185: PPUSH
31186: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31190: LD_INT 35
31192: PPUSH
31193: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31197: LD_VAR 0 1
31201: PPUSH
31202: LD_VAR 0 2
31206: PPUSH
31207: LD_VAR 0 3
31211: PPUSH
31212: CALL 70394 0 3
31216: NOT
31217: IFFALSE 31230
31219: PUSH
31220: LD_VAR 0 1
31224: PPUSH
31225: CALL_OW 314
31229: AND
31230: IFFALSE 31234
// exit ;
31232: GO 31486
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31234: LD_VAR 0 2
31238: PPUSH
31239: LD_VAR 0 3
31243: PPUSH
31244: CALL_OW 428
31248: PUSH
31249: LD_VAR 0 1
31253: EQUAL
31254: IFFALSE 31268
31256: PUSH
31257: LD_VAR 0 1
31261: PPUSH
31262: CALL_OW 314
31266: NOT
31267: AND
31268: IFFALSE 31190
// if MineAtPos ( x , y ) then
31270: LD_VAR 0 2
31274: PPUSH
31275: LD_VAR 0 3
31279: PPUSH
31280: CALL_OW 458
31284: IFFALSE 31288
// exit ;
31286: GO 31486
// if your_side = side then
31288: LD_OWVAR 2
31292: PUSH
31293: LD_VAR 0 6
31297: EQUAL
31298: IFFALSE 31317
// PlaySoundXY ( x , y , PlantMine ) ;
31300: LD_VAR 0 2
31304: PPUSH
31305: LD_VAR 0 3
31309: PPUSH
31310: LD_STRING PlantMine
31312: PPUSH
31313: CALL_OW 366
// repeat wait ( 1 ) ;
31317: LD_INT 1
31319: PPUSH
31320: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
31324: LD_VAR 0 2
31328: PPUSH
31329: LD_VAR 0 3
31333: PPUSH
31334: LD_VAR 0 6
31338: PPUSH
31339: LD_INT 0
31341: PPUSH
31342: CALL_OW 454
31346: IFFALSE 31317
// if MineAtPos ( x , y ) then
31348: LD_VAR 0 2
31352: PPUSH
31353: LD_VAR 0 3
31357: PPUSH
31358: CALL_OW 458
31362: IFFALSE 31478
// begin for i in minerMinesList [ index ] do
31364: LD_ADDR_VAR 0 7
31368: PUSH
31369: LD_EXP 115
31373: PUSH
31374: LD_VAR 0 5
31378: ARRAY
31379: PUSH
31380: FOR_IN
31381: IFFALSE 31423
// if i [ 1 ] = x and i [ 2 ] = y then
31383: LD_VAR 0 7
31387: PUSH
31388: LD_INT 1
31390: ARRAY
31391: PUSH
31392: LD_VAR 0 2
31396: EQUAL
31397: IFFALSE 31415
31399: PUSH
31400: LD_VAR 0 7
31404: PUSH
31405: LD_INT 2
31407: ARRAY
31408: PUSH
31409: LD_VAR 0 3
31413: EQUAL
31414: AND
31415: IFFALSE 31421
// exit ;
31417: POP
31418: POP
31419: GO 31486
31421: GO 31380
31423: POP
31424: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31425: LD_ADDR_EXP 115
31429: PUSH
31430: LD_EXP 115
31434: PPUSH
31435: LD_VAR 0 5
31439: PUSH
31440: LD_EXP 115
31444: PUSH
31445: LD_VAR 0 5
31449: ARRAY
31450: PUSH
31451: LD_INT 1
31453: PLUS
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PPUSH
31459: LD_VAR 0 2
31463: PUSH
31464: LD_VAR 0 3
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PPUSH
31473: CALL 38555 0 3
31477: ST_TO_ADDR
// end ; result := true ;
31478: LD_ADDR_VAR 0 4
31482: PUSH
31483: LD_INT 1
31485: ST_TO_ADDR
// end ;
31486: LD_VAR 0 4
31490: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31491: LD_INT 0
31493: PPUSH
31494: PPUSH
31495: PPUSH
// if not unit in minersList then
31496: LD_VAR 0 1
31500: PUSH
31501: LD_EXP 114
31505: IN
31506: NOT
31507: IFFALSE 31511
// exit ;
31509: GO 31718
// index := GetElementIndex ( minersList , unit ) ;
31511: LD_ADDR_VAR 0 6
31515: PUSH
31516: LD_EXP 114
31520: PPUSH
31521: LD_VAR 0 1
31525: PPUSH
31526: CALL 38338 0 2
31530: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31531: LD_ADDR_VAR 0 5
31535: PUSH
31536: DOUBLE
31537: LD_EXP 115
31541: PUSH
31542: LD_VAR 0 6
31546: ARRAY
31547: INC
31548: ST_TO_ADDR
31549: LD_INT 1
31551: PUSH
31552: FOR_DOWNTO
31553: IFFALSE 31716
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31555: LD_EXP 115
31559: PUSH
31560: LD_VAR 0 6
31564: ARRAY
31565: PUSH
31566: LD_VAR 0 5
31570: ARRAY
31571: PUSH
31572: LD_INT 1
31574: ARRAY
31575: PPUSH
31576: LD_EXP 115
31580: PUSH
31581: LD_VAR 0 6
31585: ARRAY
31586: PUSH
31587: LD_VAR 0 5
31591: ARRAY
31592: PUSH
31593: LD_INT 2
31595: ARRAY
31596: PPUSH
31597: LD_VAR 0 2
31601: PPUSH
31602: LD_VAR 0 3
31606: PPUSH
31607: CALL_OW 298
31611: PUSH
31612: LD_INT 6
31614: LESS
31615: IFFALSE 31714
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31617: LD_EXP 115
31621: PUSH
31622: LD_VAR 0 6
31626: ARRAY
31627: PUSH
31628: LD_VAR 0 5
31632: ARRAY
31633: PUSH
31634: LD_INT 1
31636: ARRAY
31637: PPUSH
31638: LD_EXP 115
31642: PUSH
31643: LD_VAR 0 6
31647: ARRAY
31648: PUSH
31649: LD_VAR 0 5
31653: ARRAY
31654: PUSH
31655: LD_INT 2
31657: ARRAY
31658: PPUSH
31659: LD_VAR 0 1
31663: PPUSH
31664: CALL_OW 255
31668: PPUSH
31669: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31673: LD_ADDR_EXP 115
31677: PUSH
31678: LD_EXP 115
31682: PPUSH
31683: LD_VAR 0 6
31687: PPUSH
31688: LD_EXP 115
31692: PUSH
31693: LD_VAR 0 6
31697: ARRAY
31698: PPUSH
31699: LD_VAR 0 5
31703: PPUSH
31704: CALL_OW 3
31708: PPUSH
31709: CALL_OW 1
31713: ST_TO_ADDR
// end ; end ;
31714: GO 31552
31716: POP
31717: POP
// end ;
31718: LD_VAR 0 4
31722: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31723: LD_INT 0
31725: PPUSH
31726: PPUSH
31727: PPUSH
31728: PPUSH
31729: PPUSH
31730: PPUSH
31731: PPUSH
31732: PPUSH
31733: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31734: LD_VAR 0 1
31738: PPUSH
31739: CALL_OW 264
31743: PUSH
31744: LD_INT 81
31746: EQUAL
31747: NOT
31748: IFTRUE 31763
31750: PUSH
31751: LD_VAR 0 1
31755: PUSH
31756: LD_EXP 114
31760: IN
31761: NOT
31762: OR
31763: IFFALSE 31767
// exit ;
31765: GO 32093
// index := GetElementIndex ( minersList , unit ) ;
31767: LD_ADDR_VAR 0 6
31771: PUSH
31772: LD_EXP 114
31776: PPUSH
31777: LD_VAR 0 1
31781: PPUSH
31782: CALL 38338 0 2
31786: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31787: LD_ADDR_VAR 0 8
31791: PUSH
31792: LD_EXP 116
31796: PUSH
31797: LD_EXP 115
31801: PUSH
31802: LD_VAR 0 6
31806: ARRAY
31807: MINUS
31808: ST_TO_ADDR
// if not minesFreeAmount then
31809: LD_VAR 0 8
31813: NOT
31814: IFFALSE 31818
// exit ;
31816: GO 32093
// tmp := [ ] ;
31818: LD_ADDR_VAR 0 7
31822: PUSH
31823: EMPTY
31824: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31825: LD_ADDR_VAR 0 5
31829: PUSH
31830: DOUBLE
31831: LD_INT 1
31833: DEC
31834: ST_TO_ADDR
31835: LD_VAR 0 8
31839: PUSH
31840: FOR_TO
31841: IFFALSE 32040
// begin _d := rand ( 0 , 5 ) ;
31843: LD_ADDR_VAR 0 11
31847: PUSH
31848: LD_INT 0
31850: PPUSH
31851: LD_INT 5
31853: PPUSH
31854: CALL_OW 12
31858: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31859: LD_ADDR_VAR 0 12
31863: PUSH
31864: LD_INT 2
31866: PPUSH
31867: LD_INT 6
31869: PPUSH
31870: CALL_OW 12
31874: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31875: LD_ADDR_VAR 0 9
31879: PUSH
31880: LD_VAR 0 2
31884: PPUSH
31885: LD_VAR 0 11
31889: PPUSH
31890: LD_VAR 0 12
31894: PPUSH
31895: CALL_OW 272
31899: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31900: LD_ADDR_VAR 0 10
31904: PUSH
31905: LD_VAR 0 3
31909: PPUSH
31910: LD_VAR 0 11
31914: PPUSH
31915: LD_VAR 0 12
31919: PPUSH
31920: CALL_OW 273
31924: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31925: LD_VAR 0 9
31929: PPUSH
31930: LD_VAR 0 10
31934: PPUSH
31935: CALL_OW 488
31939: IFFALSE 31963
31941: PUSH
31942: LD_VAR 0 9
31946: PUSH
31947: LD_VAR 0 10
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_VAR 0 7
31960: IN
31961: NOT
31962: AND
31963: IFFALSE 31982
31965: PUSH
31966: LD_VAR 0 9
31970: PPUSH
31971: LD_VAR 0 10
31975: PPUSH
31976: CALL_OW 458
31980: NOT
31981: AND
31982: IFFALSE 32024
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31984: LD_ADDR_VAR 0 7
31988: PUSH
31989: LD_VAR 0 7
31993: PPUSH
31994: LD_VAR 0 7
31998: PUSH
31999: LD_INT 1
32001: PLUS
32002: PPUSH
32003: LD_VAR 0 9
32007: PUSH
32008: LD_VAR 0 10
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PPUSH
32017: CALL_OW 1
32021: ST_TO_ADDR
32022: GO 32038
// i := i - 1 ;
32024: LD_ADDR_VAR 0 5
32028: PUSH
32029: LD_VAR 0 5
32033: PUSH
32034: LD_INT 1
32036: MINUS
32037: ST_TO_ADDR
// end ;
32038: GO 31840
32040: POP
32041: POP
// for i in tmp do
32042: LD_ADDR_VAR 0 5
32046: PUSH
32047: LD_VAR 0 7
32051: PUSH
32052: FOR_IN
32053: IFFALSE 32091
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32055: LD_VAR 0 1
32059: PPUSH
32060: LD_VAR 0 5
32064: PUSH
32065: LD_INT 1
32067: ARRAY
32068: PPUSH
32069: LD_VAR 0 5
32073: PUSH
32074: LD_INT 2
32076: ARRAY
32077: PPUSH
32078: CALL 31084 0 3
32082: NOT
32083: IFFALSE 32089
// exit ;
32085: POP
32086: POP
32087: GO 32093
32089: GO 32052
32091: POP
32092: POP
// end ;
32093: LD_VAR 0 4
32097: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32098: LD_INT 0
32100: PPUSH
32101: PPUSH
32102: PPUSH
32103: PPUSH
32104: PPUSH
32105: PPUSH
32106: PPUSH
32107: PPUSH
32108: PPUSH
// if GetClass ( unit ) <> class_sniper then
32109: LD_VAR 0 1
32113: PPUSH
32114: CALL_OW 257
32118: PUSH
32119: LD_INT 5
32121: NONEQUAL
32122: IFFALSE 32126
// exit ;
32124: GO 32596
// dist := 8 ;
32126: LD_ADDR_VAR 0 5
32130: PUSH
32131: LD_INT 8
32133: ST_TO_ADDR
// viewRange := 12 ;
32134: LD_ADDR_VAR 0 8
32138: PUSH
32139: LD_INT 12
32141: ST_TO_ADDR
// side := GetSide ( unit ) ;
32142: LD_ADDR_VAR 0 6
32146: PUSH
32147: LD_VAR 0 1
32151: PPUSH
32152: CALL_OW 255
32156: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32157: LD_INT 61
32159: PPUSH
32160: LD_VAR 0 6
32164: PPUSH
32165: CALL_OW 321
32169: PUSH
32170: LD_INT 2
32172: EQUAL
32173: IFFALSE 32183
// viewRange := 16 ;
32175: LD_ADDR_VAR 0 8
32179: PUSH
32180: LD_INT 16
32182: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32183: LD_VAR 0 1
32187: PPUSH
32188: LD_VAR 0 2
32192: PPUSH
32193: LD_VAR 0 3
32197: PPUSH
32198: CALL_OW 297
32202: PUSH
32203: LD_VAR 0 5
32207: GREATER
32208: IFFALSE 32287
// begin ComMoveXY ( unit , x , y ) ;
32210: LD_VAR 0 1
32214: PPUSH
32215: LD_VAR 0 2
32219: PPUSH
32220: LD_VAR 0 3
32224: PPUSH
32225: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32229: LD_INT 35
32231: PPUSH
32232: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32236: LD_VAR 0 1
32240: PPUSH
32241: LD_VAR 0 2
32245: PPUSH
32246: LD_VAR 0 3
32250: PPUSH
32251: CALL 70394 0 3
32255: NOT
32256: IFFALSE 32260
// exit ;
32258: GO 32596
// until GetDistUnitXY ( unit , x , y ) < dist ;
32260: LD_VAR 0 1
32264: PPUSH
32265: LD_VAR 0 2
32269: PPUSH
32270: LD_VAR 0 3
32274: PPUSH
32275: CALL_OW 297
32279: PUSH
32280: LD_VAR 0 5
32284: LESS
32285: IFFALSE 32229
// end ; ComTurnXY ( unit , x , y ) ;
32287: LD_VAR 0 1
32291: PPUSH
32292: LD_VAR 0 2
32296: PPUSH
32297: LD_VAR 0 3
32301: PPUSH
32302: CALL_OW 118
// repeat if Multiplayer then
32306: LD_OWVAR 4
32310: IFFALSE 32321
// wait ( 35 ) else
32312: LD_INT 35
32314: PPUSH
32315: CALL_OW 67
32319: GO 32328
// wait ( 5 ) ;
32321: LD_INT 5
32323: PPUSH
32324: CALL_OW 67
// _d := GetDir ( unit ) ;
32328: LD_ADDR_VAR 0 11
32332: PUSH
32333: LD_VAR 0 1
32337: PPUSH
32338: CALL_OW 254
32342: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32343: LD_ADDR_VAR 0 7
32347: PUSH
32348: LD_VAR 0 1
32352: PPUSH
32353: CALL_OW 250
32357: PPUSH
32358: LD_VAR 0 1
32362: PPUSH
32363: CALL_OW 251
32367: PPUSH
32368: LD_VAR 0 2
32372: PPUSH
32373: LD_VAR 0 3
32377: PPUSH
32378: CALL 73030 0 4
32382: ST_TO_ADDR
// until dir = _d ;
32383: LD_VAR 0 7
32387: PUSH
32388: LD_VAR 0 11
32392: EQUAL
32393: IFFALSE 32306
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32395: LD_ADDR_VAR 0 9
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: CALL_OW 250
32409: PPUSH
32410: LD_VAR 0 7
32414: PPUSH
32415: LD_VAR 0 5
32419: PPUSH
32420: CALL_OW 272
32424: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32425: LD_ADDR_VAR 0 10
32429: PUSH
32430: LD_VAR 0 1
32434: PPUSH
32435: CALL_OW 251
32439: PPUSH
32440: LD_VAR 0 7
32444: PPUSH
32445: LD_VAR 0 5
32449: PPUSH
32450: CALL_OW 273
32454: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32455: LD_VAR 0 9
32459: PPUSH
32460: LD_VAR 0 10
32464: PPUSH
32465: CALL_OW 488
32469: NOT
32470: IFFALSE 32474
// exit ;
32472: GO 32596
// ComAnimCustom ( unit , 1 ) ;
32474: LD_VAR 0 1
32478: PPUSH
32479: LD_INT 1
32481: PPUSH
32482: CALL_OW 592
// p := 0 ;
32486: LD_ADDR_VAR 0 12
32490: PUSH
32491: LD_INT 0
32493: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32494: LD_VAR 0 9
32498: PPUSH
32499: LD_VAR 0 10
32503: PPUSH
32504: LD_VAR 0 6
32508: PPUSH
32509: LD_VAR 0 8
32513: PPUSH
32514: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32518: LD_INT 35
32520: PPUSH
32521: CALL_OW 67
// p := Inc ( p ) ;
32525: LD_ADDR_VAR 0 12
32529: PUSH
32530: LD_VAR 0 12
32534: PPUSH
32535: CALL 72986 0 1
32539: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32540: LD_VAR 0 12
32544: PUSH
32545: LD_INT 3
32547: EQUAL
32548: IFTRUE 32562
32550: PUSH
32551: LD_VAR 0 1
32555: PPUSH
32556: CALL_OW 302
32560: NOT
32561: OR
32562: IFTRUE 32575
32564: PUSH
32565: LD_VAR 0 1
32569: PPUSH
32570: CALL_OW 301
32574: OR
32575: IFFALSE 32518
// RemoveSeeing ( _x , _y , side ) ;
32577: LD_VAR 0 9
32581: PPUSH
32582: LD_VAR 0 10
32586: PPUSH
32587: LD_VAR 0 6
32591: PPUSH
32592: CALL_OW 331
// end ;
32596: LD_VAR 0 4
32600: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
32601: LD_INT 0
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
32612: PPUSH
32613: PPUSH
// if not unit then
32614: LD_VAR 0 1
32618: NOT
32619: IFFALSE 32623
// exit ;
32621: GO 32894
// side := GetSide ( unit ) ;
32623: LD_ADDR_VAR 0 3
32627: PUSH
32628: LD_VAR 0 1
32632: PPUSH
32633: CALL_OW 255
32637: ST_TO_ADDR
// x := GetX ( unit ) ;
32638: LD_ADDR_VAR 0 5
32642: PUSH
32643: LD_VAR 0 1
32647: PPUSH
32648: CALL_OW 250
32652: ST_TO_ADDR
// y := GetY ( unit ) ;
32653: LD_ADDR_VAR 0 6
32657: PUSH
32658: LD_VAR 0 1
32662: PPUSH
32663: CALL_OW 251
32667: ST_TO_ADDR
// r := 8 ;
32668: LD_ADDR_VAR 0 4
32672: PUSH
32673: LD_INT 8
32675: ST_TO_ADDR
// if x - r < 0 then
32676: LD_VAR 0 5
32680: PUSH
32681: LD_VAR 0 4
32685: MINUS
32686: PUSH
32687: LD_INT 0
32689: LESS
32690: IFFALSE 32702
// min_x := 0 else
32692: LD_ADDR_VAR 0 7
32696: PUSH
32697: LD_INT 0
32699: ST_TO_ADDR
32700: GO 32718
// min_x := x - r ;
32702: LD_ADDR_VAR 0 7
32706: PUSH
32707: LD_VAR 0 5
32711: PUSH
32712: LD_VAR 0 4
32716: MINUS
32717: ST_TO_ADDR
// if y - r < 0 then
32718: LD_VAR 0 6
32722: PUSH
32723: LD_VAR 0 4
32727: MINUS
32728: PUSH
32729: LD_INT 0
32731: LESS
32732: IFFALSE 32744
// min_y := 0 else
32734: LD_ADDR_VAR 0 8
32738: PUSH
32739: LD_INT 0
32741: ST_TO_ADDR
32742: GO 32760
// min_y := y - r ;
32744: LD_ADDR_VAR 0 8
32748: PUSH
32749: LD_VAR 0 6
32753: PUSH
32754: LD_VAR 0 4
32758: MINUS
32759: ST_TO_ADDR
// max_x := x + r ;
32760: LD_ADDR_VAR 0 9
32764: PUSH
32765: LD_VAR 0 5
32769: PUSH
32770: LD_VAR 0 4
32774: PLUS
32775: ST_TO_ADDR
// max_y := y + r ;
32776: LD_ADDR_VAR 0 10
32780: PUSH
32781: LD_VAR 0 6
32785: PUSH
32786: LD_VAR 0 4
32790: PLUS
32791: ST_TO_ADDR
// for _x = min_x to max_x do
32792: LD_ADDR_VAR 0 11
32796: PUSH
32797: DOUBLE
32798: LD_VAR 0 7
32802: DEC
32803: ST_TO_ADDR
32804: LD_VAR 0 9
32808: PUSH
32809: FOR_TO
32810: IFFALSE 32892
// for _y = min_y to max_y do
32812: LD_ADDR_VAR 0 12
32816: PUSH
32817: DOUBLE
32818: LD_VAR 0 8
32822: DEC
32823: ST_TO_ADDR
32824: LD_VAR 0 10
32828: PUSH
32829: FOR_TO
32830: IFFALSE 32888
// begin if not ValidHex ( _x , _y ) then
32832: LD_VAR 0 11
32836: PPUSH
32837: LD_VAR 0 12
32841: PPUSH
32842: CALL_OW 488
32846: NOT
32847: IFFALSE 32851
// continue ;
32849: GO 32829
// if MineAtPos ( _x , _y ) then
32851: LD_VAR 0 11
32855: PPUSH
32856: LD_VAR 0 12
32860: PPUSH
32861: CALL_OW 458
32865: IFFALSE 32886
// ViewMineAtPos ( _x , _y , side ) ;
32867: LD_VAR 0 11
32871: PPUSH
32872: LD_VAR 0 12
32876: PPUSH
32877: LD_VAR 0 3
32881: PPUSH
32882: CALL_OW 457
// end ;
32886: GO 32829
32888: POP
32889: POP
32890: GO 32809
32892: POP
32893: POP
// end ;
32894: LD_VAR 0 2
32898: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
32899: LD_INT 0
32901: PPUSH
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
32906: PPUSH
32907: PPUSH
// if not units then
32908: LD_VAR 0 1
32912: NOT
32913: IFFALSE 32917
// exit ;
32915: GO 33381
// scaners := [ ] ;
32917: LD_ADDR_VAR 0 6
32921: PUSH
32922: EMPTY
32923: ST_TO_ADDR
// for i in units do
32924: LD_ADDR_VAR 0 3
32928: PUSH
32929: LD_VAR 0 1
32933: PUSH
32934: FOR_IN
32935: IFFALSE 33092
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
32937: LD_VAR 0 3
32941: PPUSH
32942: CALL_OW 264
32946: PUSH
32947: LD_INT 11
32949: NONEQUAL
32950: IFTRUE 32964
32952: PUSH
32953: LD_VAR 0 3
32957: PPUSH
32958: CALL_OW 302
32962: NOT
32963: OR
32964: IFTRUE 32981
32966: PUSH
32967: LD_VAR 0 3
32971: PPUSH
32972: CALL_OW 110
32976: PUSH
32977: LD_INT 502
32979: EQUAL
32980: OR
32981: IFFALSE 32985
// continue ;
32983: GO 32934
// ComStop ( i ) ;
32985: LD_VAR 0 3
32989: PPUSH
32990: CALL_OW 141
// x := GetX ( i ) ;
32994: LD_ADDR_VAR 0 4
32998: PUSH
32999: LD_VAR 0 3
33003: PPUSH
33004: CALL_OW 250
33008: ST_TO_ADDR
// y := GetY ( i ) ;
33009: LD_ADDR_VAR 0 5
33013: PUSH
33014: LD_VAR 0 3
33018: PPUSH
33019: CALL_OW 251
33023: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33024: LD_VAR 0 3
33028: PPUSH
33029: CALL_OW 255
33033: PUSH
33034: LD_OWVAR 2
33038: EQUAL
33039: IFFALSE 33058
// PlaySoundXY ( x , y , mineDetector ) ;
33041: LD_VAR 0 4
33045: PPUSH
33046: LD_VAR 0 5
33050: PPUSH
33051: LD_STRING mineDetector
33053: PPUSH
33054: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33058: LD_ADDR_VAR 0 6
33062: PUSH
33063: LD_VAR 0 6
33067: PPUSH
33068: LD_VAR 0 3
33072: PPUSH
33073: CALL 71613 0 2
33077: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33078: LD_VAR 0 3
33082: PPUSH
33083: LD_INT 502
33085: PPUSH
33086: CALL_OW 109
// end ;
33090: GO 32934
33092: POP
33093: POP
// if not scaners then
33094: LD_VAR 0 6
33098: NOT
33099: IFFALSE 33103
// exit ;
33101: GO 33381
// wait ( 3 ) ;
33103: LD_INT 3
33105: PPUSH
33106: CALL_OW 67
// timer := 6 ;
33110: LD_ADDR_VAR 0 7
33114: PUSH
33115: LD_INT 6
33117: ST_TO_ADDR
// repeat for i in scaners do
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: LD_VAR 0 6
33127: PUSH
33128: FOR_IN
33129: IFFALSE 33279
// begin side := GetSide ( i ) ;
33131: LD_ADDR_VAR 0 8
33135: PUSH
33136: LD_VAR 0 3
33140: PPUSH
33141: CALL_OW 255
33145: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33146: LD_VAR 0 3
33150: PPUSH
33151: CALL_OW 302
33155: NOT
33156: IFTRUE 33169
33158: PUSH
33159: LD_VAR 0 3
33163: PPUSH
33164: CALL_OW 314
33168: OR
33169: IFTRUE 33200
33171: PUSH
33172: LD_VAR 0 3
33176: PPUSH
33177: CALL_OW 263
33181: PUSH
33182: LD_INT 1
33184: EQUAL
33185: IFFALSE 33199
33187: PUSH
33188: LD_VAR 0 3
33192: PPUSH
33193: CALL_OW 311
33197: NOT
33198: AND
33199: OR
33200: IFFALSE 33244
// begin SetUnitDisplayNumber ( i , 0 ) ;
33202: LD_VAR 0 3
33206: PPUSH
33207: LD_INT 0
33209: PPUSH
33210: CALL_OW 505
// SetTag ( i , 0 ) ;
33214: LD_VAR 0 3
33218: PPUSH
33219: LD_INT 0
33221: PPUSH
33222: CALL_OW 109
// scaners := scaners diff i ;
33226: LD_ADDR_VAR 0 6
33230: PUSH
33231: LD_VAR 0 6
33235: PUSH
33236: LD_VAR 0 3
33240: DIFF
33241: ST_TO_ADDR
// continue ;
33242: GO 33128
// end ; if side in [ your_side , 9 ] then
33244: LD_VAR 0 8
33248: PUSH
33249: LD_OWVAR 2
33253: PUSH
33254: LD_INT 9
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: IN
33261: IFFALSE 33277
// SetUnitDisplayNumber ( i , timer ) ;
33263: LD_VAR 0 3
33267: PPUSH
33268: LD_VAR 0 7
33272: PPUSH
33273: CALL_OW 505
// end ;
33277: GO 33128
33279: POP
33280: POP
// if not scaners then
33281: LD_VAR 0 6
33285: NOT
33286: IFFALSE 33290
// exit ;
33288: GO 33381
// timer := Dec ( timer ) ;
33290: LD_ADDR_VAR 0 7
33294: PUSH
33295: LD_VAR 0 7
33299: PPUSH
33300: CALL 73008 0 1
33304: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33305: LD_INT 35
33307: PPUSH
33308: CALL_OW 67
// until timer = 0 ;
33312: LD_VAR 0 7
33316: PUSH
33317: LD_INT 0
33319: EQUAL
33320: IFFALSE 33118
// if not scaners then
33322: LD_VAR 0 6
33326: NOT
33327: IFFALSE 33331
// exit ;
33329: GO 33381
// for i in scaners do
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: LD_VAR 0 6
33340: PUSH
33341: FOR_IN
33342: IFFALSE 33379
// begin SetUnitDisplayNumber ( i , 0 ) ;
33344: LD_VAR 0 3
33348: PPUSH
33349: LD_INT 0
33351: PPUSH
33352: CALL_OW 505
// SetTag ( i , 0 ) ;
33356: LD_VAR 0 3
33360: PPUSH
33361: LD_INT 0
33363: PPUSH
33364: CALL_OW 109
// RevealDetectorMine ( i ) ;
33368: LD_VAR 0 3
33372: PPUSH
33373: CALL 32601 0 1
// end ;
33377: GO 33341
33379: POP
33380: POP
// end ;
33381: LD_VAR 0 2
33385: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33386: LD_INT 0
33388: PPUSH
// if p1 = mine_detector_mode then
33389: LD_VAR 0 2
33393: PUSH
33394: LD_INT 103
33396: EQUAL
33397: IFFALSE 33408
// DetectMine ( units ) ;
33399: LD_VAR 0 1
33403: PPUSH
33404: CALL 32899 0 1
// end ; end_of_file
33408: LD_VAR 0 7
33412: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33413: LD_INT 0
33415: PPUSH
33416: PPUSH
// if exist_mode then
33417: LD_VAR 0 2
33421: IFFALSE 33467
// begin unit := CreateCharacter ( prefix & ident ) ;
33423: LD_ADDR_VAR 0 5
33427: PUSH
33428: LD_VAR 0 3
33432: PUSH
33433: LD_VAR 0 1
33437: STR
33438: PPUSH
33439: CALL_OW 34
33443: ST_TO_ADDR
// if unit then
33444: LD_VAR 0 5
33448: IFFALSE 33465
// DeleteCharacters ( prefix & ident ) ;
33450: LD_VAR 0 3
33454: PUSH
33455: LD_VAR 0 1
33459: STR
33460: PPUSH
33461: CALL_OW 40
// end else
33465: GO 33482
// unit := NewCharacter ( ident ) ;
33467: LD_ADDR_VAR 0 5
33471: PUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: CALL_OW 25
33481: ST_TO_ADDR
// result := unit ;
33482: LD_ADDR_VAR 0 4
33486: PUSH
33487: LD_VAR 0 5
33491: ST_TO_ADDR
// end ;
33492: LD_VAR 0 4
33496: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33497: LD_INT 0
33499: PPUSH
33500: PPUSH
// if exist_mode then
33501: LD_VAR 0 2
33505: IFFALSE 33530
// unit := CreateCharacter ( prefix & ident ) else
33507: LD_ADDR_VAR 0 5
33511: PUSH
33512: LD_VAR 0 3
33516: PUSH
33517: LD_VAR 0 1
33521: STR
33522: PPUSH
33523: CALL_OW 34
33527: ST_TO_ADDR
33528: GO 33545
// unit := NewCharacter ( ident ) ;
33530: LD_ADDR_VAR 0 5
33534: PUSH
33535: LD_VAR 0 1
33539: PPUSH
33540: CALL_OW 25
33544: ST_TO_ADDR
// result := unit ;
33545: LD_ADDR_VAR 0 4
33549: PUSH
33550: LD_VAR 0 5
33554: ST_TO_ADDR
// end ;
33555: LD_VAR 0 4
33559: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33560: LD_INT 0
33562: PPUSH
33563: PPUSH
// if not side or not nation then
33564: LD_VAR 0 1
33568: NOT
33569: IFTRUE 33578
33571: PUSH
33572: LD_VAR 0 2
33576: NOT
33577: OR
33578: IFFALSE 33582
// exit ;
33580: GO 34376
// case nation of nation_american :
33582: LD_VAR 0 2
33586: PUSH
33587: LD_INT 1
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33595
33593: GO 33817
33595: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33596: LD_ADDR_VAR 0 4
33600: PUSH
33601: LD_INT 35
33603: PUSH
33604: LD_INT 45
33606: PUSH
33607: LD_INT 46
33609: PUSH
33610: LD_INT 47
33612: PUSH
33613: LD_INT 82
33615: PUSH
33616: LD_INT 83
33618: PUSH
33619: LD_INT 84
33621: PUSH
33622: LD_INT 85
33624: PUSH
33625: LD_INT 86
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: LD_INT 6
33636: PUSH
33637: LD_INT 15
33639: PUSH
33640: LD_INT 16
33642: PUSH
33643: LD_INT 7
33645: PUSH
33646: LD_INT 12
33648: PUSH
33649: LD_INT 13
33651: PUSH
33652: LD_INT 10
33654: PUSH
33655: LD_INT 14
33657: PUSH
33658: LD_INT 20
33660: PUSH
33661: LD_INT 21
33663: PUSH
33664: LD_INT 22
33666: PUSH
33667: LD_INT 25
33669: PUSH
33670: LD_INT 32
33672: PUSH
33673: LD_INT 27
33675: PUSH
33676: LD_INT 36
33678: PUSH
33679: LD_INT 69
33681: PUSH
33682: LD_INT 39
33684: PUSH
33685: LD_INT 34
33687: PUSH
33688: LD_INT 40
33690: PUSH
33691: LD_INT 48
33693: PUSH
33694: LD_INT 49
33696: PUSH
33697: LD_INT 50
33699: PUSH
33700: LD_INT 51
33702: PUSH
33703: LD_INT 52
33705: PUSH
33706: LD_INT 53
33708: PUSH
33709: LD_INT 54
33711: PUSH
33712: LD_INT 55
33714: PUSH
33715: LD_INT 56
33717: PUSH
33718: LD_INT 57
33720: PUSH
33721: LD_INT 58
33723: PUSH
33724: LD_INT 59
33726: PUSH
33727: LD_INT 60
33729: PUSH
33730: LD_INT 61
33732: PUSH
33733: LD_INT 62
33735: PUSH
33736: LD_INT 80
33738: PUSH
33739: LD_INT 82
33741: PUSH
33742: LD_INT 83
33744: PUSH
33745: LD_INT 84
33747: PUSH
33748: LD_INT 85
33750: PUSH
33751: LD_INT 86
33753: PUSH
33754: LD_INT 90
33756: PUSH
33757: LD_INT 93
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
33815: GO 34298
33817: LD_INT 2
33819: DOUBLE
33820: EQUAL
33821: IFTRUE 33825
33823: GO 34059
33825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33826: LD_ADDR_VAR 0 4
33830: PUSH
33831: LD_INT 35
33833: PUSH
33834: LD_INT 45
33836: PUSH
33837: LD_INT 46
33839: PUSH
33840: LD_INT 47
33842: PUSH
33843: LD_INT 82
33845: PUSH
33846: LD_INT 83
33848: PUSH
33849: LD_INT 84
33851: PUSH
33852: LD_INT 85
33854: PUSH
33855: LD_INT 87
33857: PUSH
33858: LD_INT 70
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 11
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 4
33872: PUSH
33873: LD_INT 5
33875: PUSH
33876: LD_INT 6
33878: PUSH
33879: LD_INT 15
33881: PUSH
33882: LD_INT 18
33884: PUSH
33885: LD_INT 7
33887: PUSH
33888: LD_INT 17
33890: PUSH
33891: LD_INT 8
33893: PUSH
33894: LD_INT 20
33896: PUSH
33897: LD_INT 21
33899: PUSH
33900: LD_INT 22
33902: PUSH
33903: LD_INT 72
33905: PUSH
33906: LD_INT 26
33908: PUSH
33909: LD_INT 69
33911: PUSH
33912: LD_INT 39
33914: PUSH
33915: LD_INT 40
33917: PUSH
33918: LD_INT 41
33920: PUSH
33921: LD_INT 42
33923: PUSH
33924: LD_INT 43
33926: PUSH
33927: LD_INT 48
33929: PUSH
33930: LD_INT 49
33932: PUSH
33933: LD_INT 50
33935: PUSH
33936: LD_INT 51
33938: PUSH
33939: LD_INT 52
33941: PUSH
33942: LD_INT 53
33944: PUSH
33945: LD_INT 54
33947: PUSH
33948: LD_INT 55
33950: PUSH
33951: LD_INT 56
33953: PUSH
33954: LD_INT 60
33956: PUSH
33957: LD_INT 61
33959: PUSH
33960: LD_INT 62
33962: PUSH
33963: LD_INT 66
33965: PUSH
33966: LD_INT 67
33968: PUSH
33969: LD_INT 68
33971: PUSH
33972: LD_INT 81
33974: PUSH
33975: LD_INT 82
33977: PUSH
33978: LD_INT 83
33980: PUSH
33981: LD_INT 84
33983: PUSH
33984: LD_INT 85
33986: PUSH
33987: LD_INT 87
33989: PUSH
33990: LD_INT 88
33992: PUSH
33993: LD_INT 92
33995: PUSH
33996: LD_INT 94
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: ST_TO_ADDR
34057: GO 34298
34059: LD_INT 3
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34067
34065: GO 34297
34067: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34068: LD_ADDR_VAR 0 4
34072: PUSH
34073: LD_INT 46
34075: PUSH
34076: LD_INT 47
34078: PUSH
34079: LD_INT 1
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: LD_INT 82
34087: PUSH
34088: LD_INT 83
34090: PUSH
34091: LD_INT 84
34093: PUSH
34094: LD_INT 85
34096: PUSH
34097: LD_INT 86
34099: PUSH
34100: LD_INT 11
34102: PUSH
34103: LD_INT 9
34105: PUSH
34106: LD_INT 20
34108: PUSH
34109: LD_INT 19
34111: PUSH
34112: LD_INT 21
34114: PUSH
34115: LD_INT 24
34117: PUSH
34118: LD_INT 22
34120: PUSH
34121: LD_INT 25
34123: PUSH
34124: LD_INT 28
34126: PUSH
34127: LD_INT 29
34129: PUSH
34130: LD_INT 30
34132: PUSH
34133: LD_INT 31
34135: PUSH
34136: LD_INT 37
34138: PUSH
34139: LD_INT 38
34141: PUSH
34142: LD_INT 32
34144: PUSH
34145: LD_INT 27
34147: PUSH
34148: LD_INT 33
34150: PUSH
34151: LD_INT 69
34153: PUSH
34154: LD_INT 39
34156: PUSH
34157: LD_INT 34
34159: PUSH
34160: LD_INT 40
34162: PUSH
34163: LD_INT 71
34165: PUSH
34166: LD_INT 23
34168: PUSH
34169: LD_INT 44
34171: PUSH
34172: LD_INT 48
34174: PUSH
34175: LD_INT 49
34177: PUSH
34178: LD_INT 50
34180: PUSH
34181: LD_INT 51
34183: PUSH
34184: LD_INT 52
34186: PUSH
34187: LD_INT 53
34189: PUSH
34190: LD_INT 54
34192: PUSH
34193: LD_INT 55
34195: PUSH
34196: LD_INT 56
34198: PUSH
34199: LD_INT 57
34201: PUSH
34202: LD_INT 58
34204: PUSH
34205: LD_INT 59
34207: PUSH
34208: LD_INT 63
34210: PUSH
34211: LD_INT 64
34213: PUSH
34214: LD_INT 65
34216: PUSH
34217: LD_INT 82
34219: PUSH
34220: LD_INT 83
34222: PUSH
34223: LD_INT 84
34225: PUSH
34226: LD_INT 85
34228: PUSH
34229: LD_INT 86
34231: PUSH
34232: LD_INT 89
34234: PUSH
34235: LD_INT 91
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
34295: GO 34298
34297: POP
// if state > - 1 and state < 3 then
34298: LD_VAR 0 3
34302: PUSH
34303: LD_INT 1
34305: NEG
34306: GREATER
34307: IFFALSE 34319
34309: PUSH
34310: LD_VAR 0 3
34314: PUSH
34315: LD_INT 3
34317: LESS
34318: AND
34319: IFFALSE 34376
// for i in result do
34321: LD_ADDR_VAR 0 5
34325: PUSH
34326: LD_VAR 0 4
34330: PUSH
34331: FOR_IN
34332: IFFALSE 34374
// if GetTech ( i , side ) <> state then
34334: LD_VAR 0 5
34338: PPUSH
34339: LD_VAR 0 1
34343: PPUSH
34344: CALL_OW 321
34348: PUSH
34349: LD_VAR 0 3
34353: NONEQUAL
34354: IFFALSE 34372
// result := result diff i ;
34356: LD_ADDR_VAR 0 4
34360: PUSH
34361: LD_VAR 0 4
34365: PUSH
34366: LD_VAR 0 5
34370: DIFF
34371: ST_TO_ADDR
34372: GO 34331
34374: POP
34375: POP
// end ;
34376: LD_VAR 0 4
34380: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34381: LD_INT 0
34383: PPUSH
34384: PPUSH
34385: PPUSH
// result := true ;
34386: LD_ADDR_VAR 0 3
34390: PUSH
34391: LD_INT 1
34393: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34394: LD_ADDR_VAR 0 5
34398: PUSH
34399: LD_VAR 0 2
34403: PPUSH
34404: CALL_OW 480
34408: ST_TO_ADDR
// if not tmp then
34409: LD_VAR 0 5
34413: NOT
34414: IFFALSE 34418
// exit ;
34416: GO 34467
// for i in tmp do
34418: LD_ADDR_VAR 0 4
34422: PUSH
34423: LD_VAR 0 5
34427: PUSH
34428: FOR_IN
34429: IFFALSE 34465
// if GetTech ( i , side ) <> state_researched then
34431: LD_VAR 0 4
34435: PPUSH
34436: LD_VAR 0 1
34440: PPUSH
34441: CALL_OW 321
34445: PUSH
34446: LD_INT 2
34448: NONEQUAL
34449: IFFALSE 34463
// begin result := false ;
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: LD_INT 0
34458: ST_TO_ADDR
// exit ;
34459: POP
34460: POP
34461: GO 34467
// end ;
34463: GO 34428
34465: POP
34466: POP
// end ;
34467: LD_VAR 0 3
34471: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34472: LD_INT 0
34474: PPUSH
34475: PPUSH
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
34484: PPUSH
34485: PPUSH
34486: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34487: LD_VAR 0 1
34491: NOT
34492: IFTRUE 34509
34494: PUSH
34495: LD_VAR 0 1
34499: PPUSH
34500: CALL_OW 257
34504: PUSH
34505: LD_INT 9
34507: NONEQUAL
34508: OR
34509: IFFALSE 34513
// exit ;
34511: GO 35092
// side := GetSide ( unit ) ;
34513: LD_ADDR_VAR 0 9
34517: PUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 255
34527: ST_TO_ADDR
// tech_space := tech_spacanom ;
34528: LD_ADDR_VAR 0 12
34532: PUSH
34533: LD_INT 29
34535: ST_TO_ADDR
// tech_time := tech_taurad ;
34536: LD_ADDR_VAR 0 13
34540: PUSH
34541: LD_INT 28
34543: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34544: LD_ADDR_VAR 0 11
34548: PUSH
34549: LD_VAR 0 1
34553: PPUSH
34554: CALL_OW 310
34558: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34559: LD_VAR 0 11
34563: PPUSH
34564: CALL_OW 247
34568: PUSH
34569: LD_INT 2
34571: EQUAL
34572: IFFALSE 34576
// exit ;
34574: GO 35092
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34576: LD_ADDR_VAR 0 8
34580: PUSH
34581: LD_INT 81
34583: PUSH
34584: LD_VAR 0 9
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 3
34595: PUSH
34596: LD_INT 21
34598: PUSH
34599: LD_INT 3
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PPUSH
34614: CALL_OW 69
34618: ST_TO_ADDR
// if not tmp then
34619: LD_VAR 0 8
34623: NOT
34624: IFFALSE 34628
// exit ;
34626: GO 35092
// if in_unit then
34628: LD_VAR 0 11
34632: IFFALSE 34656
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34634: LD_ADDR_VAR 0 10
34638: PUSH
34639: LD_VAR 0 8
34643: PPUSH
34644: LD_VAR 0 11
34648: PPUSH
34649: CALL_OW 74
34653: ST_TO_ADDR
34654: GO 34676
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34656: LD_ADDR_VAR 0 10
34660: PUSH
34661: LD_VAR 0 8
34665: PPUSH
34666: LD_VAR 0 1
34670: PPUSH
34671: CALL_OW 74
34675: ST_TO_ADDR
// if not enemy then
34676: LD_VAR 0 10
34680: NOT
34681: IFFALSE 34685
// exit ;
34683: GO 35092
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34685: LD_VAR 0 11
34689: IFFALSE 34711
34691: PUSH
34692: LD_VAR 0 11
34696: PPUSH
34697: LD_VAR 0 10
34701: PPUSH
34702: CALL_OW 296
34706: PUSH
34707: LD_INT 13
34709: GREATER
34710: AND
34711: IFTRUE 34733
34713: PUSH
34714: LD_VAR 0 1
34718: PPUSH
34719: LD_VAR 0 10
34723: PPUSH
34724: CALL_OW 296
34728: PUSH
34729: LD_INT 12
34731: GREATER
34732: OR
34733: IFFALSE 34737
// exit ;
34735: GO 35092
// missile := [ 1 ] ;
34737: LD_ADDR_VAR 0 14
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34748: LD_VAR 0 9
34752: PPUSH
34753: LD_VAR 0 12
34757: PPUSH
34758: CALL_OW 325
34762: IFFALSE 34791
// missile := Replace ( missile , missile + 1 , 2 ) ;
34764: LD_ADDR_VAR 0 14
34768: PUSH
34769: LD_VAR 0 14
34773: PPUSH
34774: LD_VAR 0 14
34778: PUSH
34779: LD_INT 1
34781: PLUS
34782: PPUSH
34783: LD_INT 2
34785: PPUSH
34786: CALL_OW 1
34790: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34791: LD_VAR 0 9
34795: PPUSH
34796: LD_VAR 0 13
34800: PPUSH
34801: CALL_OW 325
34805: IFFALSE 34829
34807: PUSH
34808: LD_VAR 0 10
34812: PPUSH
34813: CALL_OW 255
34817: PPUSH
34818: LD_VAR 0 13
34822: PPUSH
34823: CALL_OW 325
34827: NOT
34828: AND
34829: IFFALSE 34858
// missile := Replace ( missile , missile + 1 , 3 ) ;
34831: LD_ADDR_VAR 0 14
34835: PUSH
34836: LD_VAR 0 14
34840: PPUSH
34841: LD_VAR 0 14
34845: PUSH
34846: LD_INT 1
34848: PLUS
34849: PPUSH
34850: LD_INT 3
34852: PPUSH
34853: CALL_OW 1
34857: ST_TO_ADDR
// if missile < 2 then
34858: LD_VAR 0 14
34862: PUSH
34863: LD_INT 2
34865: LESS
34866: IFFALSE 34870
// exit ;
34868: GO 35092
// x := GetX ( enemy ) ;
34870: LD_ADDR_VAR 0 4
34874: PUSH
34875: LD_VAR 0 10
34879: PPUSH
34880: CALL_OW 250
34884: ST_TO_ADDR
// y := GetY ( enemy ) ;
34885: LD_ADDR_VAR 0 5
34889: PUSH
34890: LD_VAR 0 10
34894: PPUSH
34895: CALL_OW 251
34899: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34900: LD_ADDR_VAR 0 6
34904: PUSH
34905: LD_VAR 0 4
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PPUSH
34914: LD_INT 1
34916: PPUSH
34917: CALL_OW 12
34921: PLUS
34922: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34923: LD_ADDR_VAR 0 7
34927: PUSH
34928: LD_VAR 0 5
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PPUSH
34937: LD_INT 1
34939: PPUSH
34940: CALL_OW 12
34944: PLUS
34945: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34946: LD_VAR 0 6
34950: PPUSH
34951: LD_VAR 0 7
34955: PPUSH
34956: CALL_OW 488
34960: NOT
34961: IFFALSE 34983
// begin _x := x ;
34963: LD_ADDR_VAR 0 6
34967: PUSH
34968: LD_VAR 0 4
34972: ST_TO_ADDR
// _y := y ;
34973: LD_ADDR_VAR 0 7
34977: PUSH
34978: LD_VAR 0 5
34982: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34983: LD_ADDR_VAR 0 3
34987: PUSH
34988: LD_INT 1
34990: PPUSH
34991: LD_VAR 0 14
34995: PPUSH
34996: CALL_OW 12
35000: ST_TO_ADDR
// case i of 1 :
35001: LD_VAR 0 3
35005: PUSH
35006: LD_INT 1
35008: DOUBLE
35009: EQUAL
35010: IFTRUE 35014
35012: GO 35031
35014: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35015: LD_VAR 0 1
35019: PPUSH
35020: LD_VAR 0 10
35024: PPUSH
35025: CALL_OW 115
35029: GO 35092
35031: LD_INT 2
35033: DOUBLE
35034: EQUAL
35035: IFTRUE 35039
35037: GO 35061
35039: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35040: LD_VAR 0 1
35044: PPUSH
35045: LD_VAR 0 6
35049: PPUSH
35050: LD_VAR 0 7
35054: PPUSH
35055: CALL_OW 153
35059: GO 35092
35061: LD_INT 3
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35069
35067: GO 35091
35069: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35070: LD_VAR 0 1
35074: PPUSH
35075: LD_VAR 0 6
35079: PPUSH
35080: LD_VAR 0 7
35084: PPUSH
35085: CALL_OW 154
35089: GO 35092
35091: POP
// end ;
35092: LD_VAR 0 2
35096: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35097: LD_INT 0
35099: PPUSH
35100: PPUSH
35101: PPUSH
35102: PPUSH
35103: PPUSH
35104: PPUSH
// if not unit or not building then
35105: LD_VAR 0 1
35109: NOT
35110: IFTRUE 35119
35112: PUSH
35113: LD_VAR 0 2
35117: NOT
35118: OR
35119: IFFALSE 35123
// exit ;
35121: GO 35281
// x := GetX ( building ) ;
35123: LD_ADDR_VAR 0 5
35127: PUSH
35128: LD_VAR 0 2
35132: PPUSH
35133: CALL_OW 250
35137: ST_TO_ADDR
// y := GetY ( building ) ;
35138: LD_ADDR_VAR 0 6
35142: PUSH
35143: LD_VAR 0 2
35147: PPUSH
35148: CALL_OW 251
35152: ST_TO_ADDR
// for i := 0 to 5 do
35153: LD_ADDR_VAR 0 4
35157: PUSH
35158: DOUBLE
35159: LD_INT 0
35161: DEC
35162: ST_TO_ADDR
35163: LD_INT 5
35165: PUSH
35166: FOR_TO
35167: IFFALSE 35279
// begin _x := ShiftX ( x , i , 3 ) ;
35169: LD_ADDR_VAR 0 7
35173: PUSH
35174: LD_VAR 0 5
35178: PPUSH
35179: LD_VAR 0 4
35183: PPUSH
35184: LD_INT 3
35186: PPUSH
35187: CALL_OW 272
35191: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35192: LD_ADDR_VAR 0 8
35196: PUSH
35197: LD_VAR 0 6
35201: PPUSH
35202: LD_VAR 0 4
35206: PPUSH
35207: LD_INT 3
35209: PPUSH
35210: CALL_OW 273
35214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35215: LD_VAR 0 7
35219: PPUSH
35220: LD_VAR 0 8
35224: PPUSH
35225: CALL_OW 488
35229: NOT
35230: IFFALSE 35234
// continue ;
35232: GO 35166
// if HexInfo ( _x , _y ) = 0 then
35234: LD_VAR 0 7
35238: PPUSH
35239: LD_VAR 0 8
35243: PPUSH
35244: CALL_OW 428
35248: PUSH
35249: LD_INT 0
35251: EQUAL
35252: IFFALSE 35277
// begin ComMoveXY ( unit , _x , _y ) ;
35254: LD_VAR 0 1
35258: PPUSH
35259: LD_VAR 0 7
35263: PPUSH
35264: LD_VAR 0 8
35268: PPUSH
35269: CALL_OW 111
// exit ;
35273: POP
35274: POP
35275: GO 35281
// end ; end ;
35277: GO 35166
35279: POP
35280: POP
// end ;
35281: LD_VAR 0 3
35285: RET
// export function ScanBase ( side , base_area ) ; begin
35286: LD_INT 0
35288: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_VAR 0 2
35298: PPUSH
35299: LD_INT 81
35301: PUSH
35302: LD_VAR 0 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PPUSH
35311: CALL_OW 70
35315: ST_TO_ADDR
// end ;
35316: LD_VAR 0 3
35320: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35321: LD_INT 0
35323: PPUSH
35324: PPUSH
35325: PPUSH
35326: PPUSH
// result := false ;
35327: LD_ADDR_VAR 0 2
35331: PUSH
35332: LD_INT 0
35334: ST_TO_ADDR
// side := GetSide ( unit ) ;
35335: LD_ADDR_VAR 0 3
35339: PUSH
35340: LD_VAR 0 1
35344: PPUSH
35345: CALL_OW 255
35349: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35350: LD_ADDR_VAR 0 4
35354: PUSH
35355: LD_VAR 0 1
35359: PPUSH
35360: CALL_OW 248
35364: ST_TO_ADDR
// case nat of 1 :
35365: LD_VAR 0 4
35369: PUSH
35370: LD_INT 1
35372: DOUBLE
35373: EQUAL
35374: IFTRUE 35378
35376: GO 35389
35378: POP
// tech := tech_lassight ; 2 :
35379: LD_ADDR_VAR 0 5
35383: PUSH
35384: LD_INT 12
35386: ST_TO_ADDR
35387: GO 35428
35389: LD_INT 2
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35408
35397: POP
// tech := tech_mortar ; 3 :
35398: LD_ADDR_VAR 0 5
35402: PUSH
35403: LD_INT 41
35405: ST_TO_ADDR
35406: GO 35428
35408: LD_INT 3
35410: DOUBLE
35411: EQUAL
35412: IFTRUE 35416
35414: GO 35427
35416: POP
// tech := tech_bazooka ; end ;
35417: LD_ADDR_VAR 0 5
35421: PUSH
35422: LD_INT 44
35424: ST_TO_ADDR
35425: GO 35428
35427: POP
// if Researched ( side , tech ) then
35428: LD_VAR 0 3
35432: PPUSH
35433: LD_VAR 0 5
35437: PPUSH
35438: CALL_OW 325
35442: IFFALSE 35469
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35444: LD_ADDR_VAR 0 2
35448: PUSH
35449: LD_INT 5
35451: PUSH
35452: LD_INT 8
35454: PUSH
35455: LD_INT 9
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: PUSH
35463: LD_VAR 0 4
35467: ARRAY
35468: ST_TO_ADDR
// end ;
35469: LD_VAR 0 2
35473: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35474: LD_INT 0
35476: PPUSH
35477: PPUSH
35478: PPUSH
// if not mines then
35479: LD_VAR 0 2
35483: NOT
35484: IFFALSE 35488
// exit ;
35486: GO 35632
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35488: LD_ADDR_VAR 0 5
35492: PUSH
35493: LD_INT 81
35495: PUSH
35496: LD_VAR 0 1
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 3
35507: PUSH
35508: LD_INT 21
35510: PUSH
35511: LD_INT 3
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PPUSH
35526: CALL_OW 69
35530: ST_TO_ADDR
// for i in mines do
35531: LD_ADDR_VAR 0 4
35535: PUSH
35536: LD_VAR 0 2
35540: PUSH
35541: FOR_IN
35542: IFFALSE 35630
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35544: LD_VAR 0 4
35548: PUSH
35549: LD_INT 1
35551: ARRAY
35552: PPUSH
35553: LD_VAR 0 4
35557: PUSH
35558: LD_INT 2
35560: ARRAY
35561: PPUSH
35562: CALL_OW 458
35566: NOT
35567: IFFALSE 35571
// continue ;
35569: GO 35541
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35571: LD_VAR 0 4
35575: PUSH
35576: LD_INT 1
35578: ARRAY
35579: PPUSH
35580: LD_VAR 0 4
35584: PUSH
35585: LD_INT 2
35587: ARRAY
35588: PPUSH
35589: CALL_OW 428
35593: PUSH
35594: LD_VAR 0 5
35598: IN
35599: IFFALSE 35628
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35601: LD_VAR 0 4
35605: PUSH
35606: LD_INT 1
35608: ARRAY
35609: PPUSH
35610: LD_VAR 0 4
35614: PUSH
35615: LD_INT 2
35617: ARRAY
35618: PPUSH
35619: LD_VAR 0 1
35623: PPUSH
35624: CALL_OW 456
// end ;
35628: GO 35541
35630: POP
35631: POP
// end ;
35632: LD_VAR 0 3
35636: RET
// export function Count ( array ) ; begin
35637: LD_INT 0
35639: PPUSH
// result := array + 0 ;
35640: LD_ADDR_VAR 0 2
35644: PUSH
35645: LD_VAR 0 1
35649: PUSH
35650: LD_INT 0
35652: PLUS
35653: ST_TO_ADDR
// end ;
35654: LD_VAR 0 2
35658: RET
// export function IsEmpty ( building ) ; begin
35659: LD_INT 0
35661: PPUSH
// if not building then
35662: LD_VAR 0 1
35666: NOT
35667: IFFALSE 35671
// exit ;
35669: GO 35714
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35671: LD_ADDR_VAR 0 2
35675: PUSH
35676: LD_VAR 0 1
35680: PUSH
35681: LD_INT 22
35683: PUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: CALL_OW 255
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 58
35700: PUSH
35701: EMPTY
35702: LIST
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PPUSH
35708: CALL_OW 69
35712: IN
35713: ST_TO_ADDR
// end ;
35714: LD_VAR 0 2
35718: RET
// export function IsNotFull ( building ) ; var places ; begin
35719: LD_INT 0
35721: PPUSH
35722: PPUSH
// if not building then
35723: LD_VAR 0 1
35727: NOT
35728: IFFALSE 35732
// exit ;
35730: GO 35760
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35732: LD_ADDR_VAR 0 2
35736: PUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: LD_INT 3
35744: PUSH
35745: LD_INT 62
35747: PUSH
35748: EMPTY
35749: LIST
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PPUSH
35755: CALL_OW 72
35759: ST_TO_ADDR
// end ;
35760: LD_VAR 0 2
35764: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35765: LD_INT 0
35767: PPUSH
35768: PPUSH
35769: PPUSH
35770: PPUSH
// tmp := [ ] ;
35771: LD_ADDR_VAR 0 3
35775: PUSH
35776: EMPTY
35777: ST_TO_ADDR
// list := [ ] ;
35778: LD_ADDR_VAR 0 5
35782: PUSH
35783: EMPTY
35784: ST_TO_ADDR
// for i = 16 to 25 do
35785: LD_ADDR_VAR 0 4
35789: PUSH
35790: DOUBLE
35791: LD_INT 16
35793: DEC
35794: ST_TO_ADDR
35795: LD_INT 25
35797: PUSH
35798: FOR_TO
35799: IFFALSE 35872
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35801: LD_ADDR_VAR 0 3
35805: PUSH
35806: LD_VAR 0 3
35810: PUSH
35811: LD_INT 22
35813: PUSH
35814: LD_VAR 0 1
35818: PPUSH
35819: CALL_OW 255
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 91
35830: PUSH
35831: LD_VAR 0 1
35835: PUSH
35836: LD_INT 6
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 30
35846: PUSH
35847: LD_VAR 0 4
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: PPUSH
35864: CALL_OW 69
35868: ADD
35869: ST_TO_ADDR
35870: GO 35798
35872: POP
35873: POP
// for i = 1 to tmp do
35874: LD_ADDR_VAR 0 4
35878: PUSH
35879: DOUBLE
35880: LD_INT 1
35882: DEC
35883: ST_TO_ADDR
35884: LD_VAR 0 3
35888: PUSH
35889: FOR_TO
35890: IFFALSE 35978
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35892: LD_ADDR_VAR 0 5
35896: PUSH
35897: LD_VAR 0 5
35901: PUSH
35902: LD_VAR 0 3
35906: PUSH
35907: LD_VAR 0 4
35911: ARRAY
35912: PPUSH
35913: CALL_OW 266
35917: PUSH
35918: LD_VAR 0 3
35922: PUSH
35923: LD_VAR 0 4
35927: ARRAY
35928: PPUSH
35929: CALL_OW 250
35933: PUSH
35934: LD_VAR 0 3
35938: PUSH
35939: LD_VAR 0 4
35943: ARRAY
35944: PPUSH
35945: CALL_OW 251
35949: PUSH
35950: LD_VAR 0 3
35954: PUSH
35955: LD_VAR 0 4
35959: ARRAY
35960: PPUSH
35961: CALL_OW 254
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: PUSH
35972: EMPTY
35973: LIST
35974: ADD
35975: ST_TO_ADDR
35976: GO 35889
35978: POP
35979: POP
// result := list ;
35980: LD_ADDR_VAR 0 2
35984: PUSH
35985: LD_VAR 0 5
35989: ST_TO_ADDR
// end ;
35990: LD_VAR 0 2
35994: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35995: LD_INT 0
35997: PPUSH
35998: PPUSH
35999: PPUSH
36000: PPUSH
36001: PPUSH
36002: PPUSH
36003: PPUSH
// if not factory then
36004: LD_VAR 0 1
36008: NOT
36009: IFFALSE 36013
// exit ;
36011: GO 36616
// if control = control_apeman then
36013: LD_VAR 0 4
36017: PUSH
36018: LD_INT 5
36020: EQUAL
36021: IFFALSE 36130
// begin tmp := UnitsInside ( factory ) ;
36023: LD_ADDR_VAR 0 8
36027: PUSH
36028: LD_VAR 0 1
36032: PPUSH
36033: CALL_OW 313
36037: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36038: LD_VAR 0 8
36042: PPUSH
36043: LD_INT 25
36045: PUSH
36046: LD_INT 12
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PPUSH
36053: CALL_OW 72
36057: NOT
36058: IFFALSE 36068
// control := control_manual ;
36060: LD_ADDR_VAR 0 4
36064: PUSH
36065: LD_INT 1
36067: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36068: LD_ADDR_VAR 0 8
36072: PUSH
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL 35765 0 1
36082: ST_TO_ADDR
// if tmp then
36083: LD_VAR 0 8
36087: IFFALSE 36130
// begin for i in tmp do
36089: LD_ADDR_VAR 0 7
36093: PUSH
36094: LD_VAR 0 8
36098: PUSH
36099: FOR_IN
36100: IFFALSE 36128
// if i [ 1 ] = b_ext_radio then
36102: LD_VAR 0 7
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: PUSH
36111: LD_INT 22
36113: EQUAL
36114: IFFALSE 36126
// begin control := control_remote ;
36116: LD_ADDR_VAR 0 4
36120: PUSH
36121: LD_INT 2
36123: ST_TO_ADDR
// break ;
36124: GO 36128
// end ;
36126: GO 36099
36128: POP
36129: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36130: LD_VAR 0 1
36134: PPUSH
36135: LD_VAR 0 2
36139: PPUSH
36140: LD_VAR 0 3
36144: PPUSH
36145: LD_VAR 0 4
36149: PPUSH
36150: LD_VAR 0 5
36154: PPUSH
36155: CALL_OW 448
36159: IFFALSE 36194
// begin result := [ chassis , engine , control , weapon ] ;
36161: LD_ADDR_VAR 0 6
36165: PUSH
36166: LD_VAR 0 2
36170: PUSH
36171: LD_VAR 0 3
36175: PUSH
36176: LD_VAR 0 4
36180: PUSH
36181: LD_VAR 0 5
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: ST_TO_ADDR
// exit ;
36192: GO 36616
// end ; _chassis := AvailableChassisList ( factory ) ;
36194: LD_ADDR_VAR 0 9
36198: PUSH
36199: LD_VAR 0 1
36203: PPUSH
36204: CALL_OW 475
36208: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36209: LD_ADDR_VAR 0 11
36213: PUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: CALL_OW 476
36223: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36224: LD_ADDR_VAR 0 12
36228: PUSH
36229: LD_VAR 0 1
36233: PPUSH
36234: CALL_OW 477
36238: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36239: LD_ADDR_VAR 0 10
36243: PUSH
36244: LD_VAR 0 1
36248: PPUSH
36249: CALL_OW 478
36253: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36254: LD_VAR 0 9
36258: NOT
36259: IFTRUE 36268
36261: PUSH
36262: LD_VAR 0 11
36266: NOT
36267: OR
36268: IFTRUE 36277
36270: PUSH
36271: LD_VAR 0 12
36275: NOT
36276: OR
36277: IFTRUE 36286
36279: PUSH
36280: LD_VAR 0 10
36284: NOT
36285: OR
36286: IFFALSE 36321
// begin result := [ chassis , engine , control , weapon ] ;
36288: LD_ADDR_VAR 0 6
36292: PUSH
36293: LD_VAR 0 2
36297: PUSH
36298: LD_VAR 0 3
36302: PUSH
36303: LD_VAR 0 4
36307: PUSH
36308: LD_VAR 0 5
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: ST_TO_ADDR
// exit ;
36319: GO 36616
// end ; if not chassis in _chassis then
36321: LD_VAR 0 2
36325: PUSH
36326: LD_VAR 0 9
36330: IN
36331: NOT
36332: IFFALSE 36358
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36334: LD_ADDR_VAR 0 2
36338: PUSH
36339: LD_VAR 0 9
36343: PUSH
36344: LD_INT 1
36346: PPUSH
36347: LD_VAR 0 9
36351: PPUSH
36352: CALL_OW 12
36356: ARRAY
36357: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36358: LD_VAR 0 2
36362: PPUSH
36363: LD_VAR 0 3
36367: PPUSH
36368: CALL 36621 0 2
36372: NOT
36373: IFFALSE 36434
// repeat engine := _engine [ 1 ] ;
36375: LD_ADDR_VAR 0 3
36379: PUSH
36380: LD_VAR 0 11
36384: PUSH
36385: LD_INT 1
36387: ARRAY
36388: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36389: LD_ADDR_VAR 0 11
36393: PUSH
36394: LD_VAR 0 11
36398: PPUSH
36399: LD_INT 1
36401: PPUSH
36402: CALL_OW 3
36406: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36407: LD_VAR 0 2
36411: PPUSH
36412: LD_VAR 0 3
36416: PPUSH
36417: CALL 36621 0 2
36421: IFTRUE 36432
36423: PUSH
36424: LD_VAR 0 11
36428: PUSH
36429: EMPTY
36430: EQUAL
36431: OR
36432: IFFALSE 36375
// if not control in _control then
36434: LD_VAR 0 4
36438: PUSH
36439: LD_VAR 0 12
36443: IN
36444: NOT
36445: IFFALSE 36471
// control := _control [ rand ( 1 , _control ) ] ;
36447: LD_ADDR_VAR 0 4
36451: PUSH
36452: LD_VAR 0 12
36456: PUSH
36457: LD_INT 1
36459: PPUSH
36460: LD_VAR 0 12
36464: PPUSH
36465: CALL_OW 12
36469: ARRAY
36470: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36471: LD_VAR 0 2
36475: PPUSH
36476: LD_VAR 0 5
36480: PPUSH
36481: CALL 36843 0 2
36485: NOT
36486: IFFALSE 36547
// repeat weapon := _weapon [ 1 ] ;
36488: LD_ADDR_VAR 0 5
36492: PUSH
36493: LD_VAR 0 10
36497: PUSH
36498: LD_INT 1
36500: ARRAY
36501: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36502: LD_ADDR_VAR 0 10
36506: PUSH
36507: LD_VAR 0 10
36511: PPUSH
36512: LD_INT 1
36514: PPUSH
36515: CALL_OW 3
36519: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36520: LD_VAR 0 2
36524: PPUSH
36525: LD_VAR 0 5
36529: PPUSH
36530: CALL 36843 0 2
36534: IFTRUE 36545
36536: PUSH
36537: LD_VAR 0 10
36541: PUSH
36542: EMPTY
36543: EQUAL
36544: OR
36545: IFFALSE 36488
// result := [ ] ;
36547: LD_ADDR_VAR 0 6
36551: PUSH
36552: EMPTY
36553: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36554: LD_VAR 0 1
36558: PPUSH
36559: LD_VAR 0 2
36563: PPUSH
36564: LD_VAR 0 3
36568: PPUSH
36569: LD_VAR 0 4
36573: PPUSH
36574: LD_VAR 0 5
36578: PPUSH
36579: CALL_OW 448
36583: IFFALSE 36616
// result := [ chassis , engine , control , weapon ] ;
36585: LD_ADDR_VAR 0 6
36589: PUSH
36590: LD_VAR 0 2
36594: PUSH
36595: LD_VAR 0 3
36599: PUSH
36600: LD_VAR 0 4
36604: PUSH
36605: LD_VAR 0 5
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
// end ;
36616: LD_VAR 0 6
36620: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36621: LD_INT 0
36623: PPUSH
// if not chassis or not engine then
36624: LD_VAR 0 1
36628: NOT
36629: IFTRUE 36638
36631: PUSH
36632: LD_VAR 0 2
36636: NOT
36637: OR
36638: IFFALSE 36642
// exit ;
36640: GO 36838
// case engine of engine_solar :
36642: LD_VAR 0 2
36646: PUSH
36647: LD_INT 2
36649: DOUBLE
36650: EQUAL
36651: IFTRUE 36655
36653: GO 36693
36655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36656: LD_ADDR_VAR 0 3
36660: PUSH
36661: LD_INT 11
36663: PUSH
36664: LD_INT 12
36666: PUSH
36667: LD_INT 13
36669: PUSH
36670: LD_INT 14
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: LD_INT 3
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: ST_TO_ADDR
36691: GO 36822
36693: LD_INT 1
36695: DOUBLE
36696: EQUAL
36697: IFTRUE 36701
36699: GO 36763
36701: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36702: LD_ADDR_VAR 0 3
36706: PUSH
36707: LD_INT 11
36709: PUSH
36710: LD_INT 12
36712: PUSH
36713: LD_INT 13
36715: PUSH
36716: LD_INT 14
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: LD_INT 3
36727: PUSH
36728: LD_INT 4
36730: PUSH
36731: LD_INT 5
36733: PUSH
36734: LD_INT 21
36736: PUSH
36737: LD_INT 23
36739: PUSH
36740: LD_INT 22
36742: PUSH
36743: LD_INT 24
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
36761: GO 36822
36763: LD_INT 3
36765: DOUBLE
36766: EQUAL
36767: IFTRUE 36771
36769: GO 36821
36771: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36772: LD_ADDR_VAR 0 3
36776: PUSH
36777: LD_INT 13
36779: PUSH
36780: LD_INT 14
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: LD_INT 3
36788: PUSH
36789: LD_INT 4
36791: PUSH
36792: LD_INT 5
36794: PUSH
36795: LD_INT 21
36797: PUSH
36798: LD_INT 22
36800: PUSH
36801: LD_INT 23
36803: PUSH
36804: LD_INT 24
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: ST_TO_ADDR
36819: GO 36822
36821: POP
// result := ( chassis in result ) ;
36822: LD_ADDR_VAR 0 3
36826: PUSH
36827: LD_VAR 0 1
36831: PUSH
36832: LD_VAR 0 3
36836: IN
36837: ST_TO_ADDR
// end ;
36838: LD_VAR 0 3
36842: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36843: LD_INT 0
36845: PPUSH
// if not chassis or not weapon then
36846: LD_VAR 0 1
36850: NOT
36851: IFTRUE 36860
36853: PUSH
36854: LD_VAR 0 2
36858: NOT
36859: OR
36860: IFFALSE 36864
// exit ;
36862: GO 37958
// case weapon of us_machine_gun :
36864: LD_VAR 0 2
36868: PUSH
36869: LD_INT 2
36871: DOUBLE
36872: EQUAL
36873: IFTRUE 36877
36875: GO 36907
36877: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36878: LD_ADDR_VAR 0 3
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: LD_INT 3
36891: PUSH
36892: LD_INT 4
36894: PUSH
36895: LD_INT 5
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
36905: GO 37942
36907: LD_INT 3
36909: DOUBLE
36910: EQUAL
36911: IFTRUE 36915
36913: GO 36945
36915: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36916: LD_ADDR_VAR 0 3
36920: PUSH
36921: LD_INT 1
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: LD_INT 3
36929: PUSH
36930: LD_INT 4
36932: PUSH
36933: LD_INT 5
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: ST_TO_ADDR
36943: GO 37942
36945: LD_INT 11
36947: DOUBLE
36948: EQUAL
36949: IFTRUE 36953
36951: GO 36983
36953: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36954: LD_ADDR_VAR 0 3
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: LD_INT 4
36970: PUSH
36971: LD_INT 5
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
36981: GO 37942
36983: LD_INT 4
36985: DOUBLE
36986: EQUAL
36987: IFTRUE 36991
36989: GO 37017
36991: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: LD_INT 3
37002: PUSH
37003: LD_INT 4
37005: PUSH
37006: LD_INT 5
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: ST_TO_ADDR
37015: GO 37942
37017: LD_INT 5
37019: DOUBLE
37020: EQUAL
37021: IFTRUE 37025
37023: GO 37051
37025: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37026: LD_ADDR_VAR 0 3
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 3
37036: PUSH
37037: LD_INT 4
37039: PUSH
37040: LD_INT 5
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: ST_TO_ADDR
37049: GO 37942
37051: LD_INT 9
37053: DOUBLE
37054: EQUAL
37055: IFTRUE 37059
37057: GO 37085
37059: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37060: LD_ADDR_VAR 0 3
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: LD_INT 4
37073: PUSH
37074: LD_INT 5
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
37083: GO 37942
37085: LD_INT 7
37087: DOUBLE
37088: EQUAL
37089: IFTRUE 37093
37091: GO 37119
37093: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37094: LD_ADDR_VAR 0 3
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: LD_INT 3
37104: PUSH
37105: LD_INT 4
37107: PUSH
37108: LD_INT 5
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: ST_TO_ADDR
37117: GO 37942
37119: LD_INT 12
37121: DOUBLE
37122: EQUAL
37123: IFTRUE 37127
37125: GO 37153
37127: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37128: LD_ADDR_VAR 0 3
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: LD_INT 3
37138: PUSH
37139: LD_INT 4
37141: PUSH
37142: LD_INT 5
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
37151: GO 37942
37153: LD_INT 13
37155: DOUBLE
37156: EQUAL
37157: IFTRUE 37161
37159: GO 37187
37161: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37162: LD_ADDR_VAR 0 3
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: LD_INT 3
37172: PUSH
37173: LD_INT 4
37175: PUSH
37176: LD_INT 5
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: ST_TO_ADDR
37185: GO 37942
37187: LD_INT 14
37189: DOUBLE
37190: EQUAL
37191: IFTRUE 37195
37193: GO 37213
37195: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37196: LD_ADDR_VAR 0 3
37200: PUSH
37201: LD_INT 4
37203: PUSH
37204: LD_INT 5
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: ST_TO_ADDR
37211: GO 37942
37213: LD_INT 6
37215: DOUBLE
37216: EQUAL
37217: IFTRUE 37221
37219: GO 37239
37221: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37222: LD_ADDR_VAR 0 3
37226: PUSH
37227: LD_INT 4
37229: PUSH
37230: LD_INT 5
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: ST_TO_ADDR
37237: GO 37942
37239: LD_INT 10
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 37265
37247: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37248: LD_ADDR_VAR 0 3
37252: PUSH
37253: LD_INT 4
37255: PUSH
37256: LD_INT 5
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: ST_TO_ADDR
37263: GO 37942
37265: LD_INT 22
37267: DOUBLE
37268: EQUAL
37269: IFTRUE 37273
37271: GO 37299
37273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37274: LD_ADDR_VAR 0 3
37278: PUSH
37279: LD_INT 11
37281: PUSH
37282: LD_INT 12
37284: PUSH
37285: LD_INT 13
37287: PUSH
37288: LD_INT 14
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: ST_TO_ADDR
37297: GO 37942
37299: LD_INT 23
37301: DOUBLE
37302: EQUAL
37303: IFTRUE 37307
37305: GO 37333
37307: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37308: LD_ADDR_VAR 0 3
37312: PUSH
37313: LD_INT 11
37315: PUSH
37316: LD_INT 12
37318: PUSH
37319: LD_INT 13
37321: PUSH
37322: LD_INT 14
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: ST_TO_ADDR
37331: GO 37942
37333: LD_INT 24
37335: DOUBLE
37336: EQUAL
37337: IFTRUE 37341
37339: GO 37367
37341: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37342: LD_ADDR_VAR 0 3
37346: PUSH
37347: LD_INT 11
37349: PUSH
37350: LD_INT 12
37352: PUSH
37353: LD_INT 13
37355: PUSH
37356: LD_INT 14
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: ST_TO_ADDR
37365: GO 37942
37367: LD_INT 30
37369: DOUBLE
37370: EQUAL
37371: IFTRUE 37375
37373: GO 37401
37375: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37376: LD_ADDR_VAR 0 3
37380: PUSH
37381: LD_INT 11
37383: PUSH
37384: LD_INT 12
37386: PUSH
37387: LD_INT 13
37389: PUSH
37390: LD_INT 14
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: ST_TO_ADDR
37399: GO 37942
37401: LD_INT 25
37403: DOUBLE
37404: EQUAL
37405: IFTRUE 37409
37407: GO 37427
37409: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37410: LD_ADDR_VAR 0 3
37414: PUSH
37415: LD_INT 13
37417: PUSH
37418: LD_INT 14
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: ST_TO_ADDR
37425: GO 37942
37427: LD_INT 27
37429: DOUBLE
37430: EQUAL
37431: IFTRUE 37435
37433: GO 37453
37435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37436: LD_ADDR_VAR 0 3
37440: PUSH
37441: LD_INT 13
37443: PUSH
37444: LD_INT 14
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: ST_TO_ADDR
37451: GO 37942
37453: LD_INT 92
37455: DOUBLE
37456: EQUAL
37457: IFTRUE 37461
37459: GO 37487
37461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37462: LD_ADDR_VAR 0 3
37466: PUSH
37467: LD_INT 11
37469: PUSH
37470: LD_INT 12
37472: PUSH
37473: LD_INT 13
37475: PUSH
37476: LD_INT 14
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: ST_TO_ADDR
37485: GO 37942
37487: LD_INT 28
37489: DOUBLE
37490: EQUAL
37491: IFTRUE 37495
37493: GO 37513
37495: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37496: LD_ADDR_VAR 0 3
37500: PUSH
37501: LD_INT 13
37503: PUSH
37504: LD_INT 14
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: ST_TO_ADDR
37511: GO 37942
37513: LD_INT 29
37515: DOUBLE
37516: EQUAL
37517: IFTRUE 37521
37519: GO 37539
37521: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37522: LD_ADDR_VAR 0 3
37526: PUSH
37527: LD_INT 13
37529: PUSH
37530: LD_INT 14
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: ST_TO_ADDR
37537: GO 37942
37539: LD_INT 31
37541: DOUBLE
37542: EQUAL
37543: IFTRUE 37547
37545: GO 37565
37547: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37548: LD_ADDR_VAR 0 3
37552: PUSH
37553: LD_INT 13
37555: PUSH
37556: LD_INT 14
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: ST_TO_ADDR
37563: GO 37942
37565: LD_INT 26
37567: DOUBLE
37568: EQUAL
37569: IFTRUE 37573
37571: GO 37591
37573: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37574: LD_ADDR_VAR 0 3
37578: PUSH
37579: LD_INT 13
37581: PUSH
37582: LD_INT 14
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: ST_TO_ADDR
37589: GO 37942
37591: LD_INT 42
37593: DOUBLE
37594: EQUAL
37595: IFTRUE 37599
37597: GO 37625
37599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37600: LD_ADDR_VAR 0 3
37604: PUSH
37605: LD_INT 21
37607: PUSH
37608: LD_INT 22
37610: PUSH
37611: LD_INT 23
37613: PUSH
37614: LD_INT 24
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: ST_TO_ADDR
37623: GO 37942
37625: LD_INT 43
37627: DOUBLE
37628: EQUAL
37629: IFTRUE 37633
37631: GO 37659
37633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37634: LD_ADDR_VAR 0 3
37638: PUSH
37639: LD_INT 21
37641: PUSH
37642: LD_INT 22
37644: PUSH
37645: LD_INT 23
37647: PUSH
37648: LD_INT 24
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: ST_TO_ADDR
37657: GO 37942
37659: LD_INT 44
37661: DOUBLE
37662: EQUAL
37663: IFTRUE 37667
37665: GO 37693
37667: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37668: LD_ADDR_VAR 0 3
37672: PUSH
37673: LD_INT 21
37675: PUSH
37676: LD_INT 22
37678: PUSH
37679: LD_INT 23
37681: PUSH
37682: LD_INT 24
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: ST_TO_ADDR
37691: GO 37942
37693: LD_INT 45
37695: DOUBLE
37696: EQUAL
37697: IFTRUE 37701
37699: GO 37727
37701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37702: LD_ADDR_VAR 0 3
37706: PUSH
37707: LD_INT 21
37709: PUSH
37710: LD_INT 22
37712: PUSH
37713: LD_INT 23
37715: PUSH
37716: LD_INT 24
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: ST_TO_ADDR
37725: GO 37942
37727: LD_INT 49
37729: DOUBLE
37730: EQUAL
37731: IFTRUE 37735
37733: GO 37761
37735: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37736: LD_ADDR_VAR 0 3
37740: PUSH
37741: LD_INT 21
37743: PUSH
37744: LD_INT 22
37746: PUSH
37747: LD_INT 23
37749: PUSH
37750: LD_INT 24
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
37759: GO 37942
37761: LD_INT 51
37763: DOUBLE
37764: EQUAL
37765: IFTRUE 37769
37767: GO 37795
37769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37770: LD_ADDR_VAR 0 3
37774: PUSH
37775: LD_INT 21
37777: PUSH
37778: LD_INT 22
37780: PUSH
37781: LD_INT 23
37783: PUSH
37784: LD_INT 24
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: ST_TO_ADDR
37793: GO 37942
37795: LD_INT 52
37797: DOUBLE
37798: EQUAL
37799: IFTRUE 37803
37801: GO 37829
37803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37804: LD_ADDR_VAR 0 3
37808: PUSH
37809: LD_INT 21
37811: PUSH
37812: LD_INT 22
37814: PUSH
37815: LD_INT 23
37817: PUSH
37818: LD_INT 24
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: ST_TO_ADDR
37827: GO 37942
37829: LD_INT 53
37831: DOUBLE
37832: EQUAL
37833: IFTRUE 37837
37835: GO 37855
37837: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37838: LD_ADDR_VAR 0 3
37842: PUSH
37843: LD_INT 23
37845: PUSH
37846: LD_INT 24
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: ST_TO_ADDR
37853: GO 37942
37855: LD_INT 46
37857: DOUBLE
37858: EQUAL
37859: IFTRUE 37863
37861: GO 37881
37863: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37864: LD_ADDR_VAR 0 3
37868: PUSH
37869: LD_INT 23
37871: PUSH
37872: LD_INT 24
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: ST_TO_ADDR
37879: GO 37942
37881: LD_INT 47
37883: DOUBLE
37884: EQUAL
37885: IFTRUE 37889
37887: GO 37907
37889: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
37890: LD_ADDR_VAR 0 3
37894: PUSH
37895: LD_INT 23
37897: PUSH
37898: LD_INT 24
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: ST_TO_ADDR
37905: GO 37942
37907: LD_INT 98
37909: DOUBLE
37910: EQUAL
37911: IFTRUE 37915
37913: GO 37941
37915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37916: LD_ADDR_VAR 0 3
37920: PUSH
37921: LD_INT 21
37923: PUSH
37924: LD_INT 22
37926: PUSH
37927: LD_INT 23
37929: PUSH
37930: LD_INT 24
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
37939: GO 37942
37941: POP
// result := ( chassis in result ) ;
37942: LD_ADDR_VAR 0 3
37946: PUSH
37947: LD_VAR 0 1
37951: PUSH
37952: LD_VAR 0 3
37956: IN
37957: ST_TO_ADDR
// end ;
37958: LD_VAR 0 3
37962: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37963: LD_INT 0
37965: PPUSH
37966: PPUSH
37967: PPUSH
37968: PPUSH
37969: PPUSH
37970: PPUSH
37971: PPUSH
// result := array ;
37972: LD_ADDR_VAR 0 5
37976: PUSH
37977: LD_VAR 0 1
37981: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37982: LD_VAR 0 1
37986: NOT
37987: IFTRUE 37996
37989: PUSH
37990: LD_VAR 0 2
37994: NOT
37995: OR
37996: IFTRUE 38005
37998: PUSH
37999: LD_VAR 0 3
38003: NOT
38004: OR
38005: IFTRUE 38019
38007: PUSH
38008: LD_VAR 0 2
38012: PUSH
38013: LD_VAR 0 1
38017: GREATER
38018: OR
38019: IFTRUE 38033
38021: PUSH
38022: LD_VAR 0 3
38026: PUSH
38027: LD_VAR 0 1
38031: GREATER
38032: OR
38033: IFFALSE 38037
// exit ;
38035: GO 38333
// if direction then
38037: LD_VAR 0 4
38041: IFFALSE 38105
// begin d := 1 ;
38043: LD_ADDR_VAR 0 9
38047: PUSH
38048: LD_INT 1
38050: ST_TO_ADDR
// if i_from > i_to then
38051: LD_VAR 0 2
38055: PUSH
38056: LD_VAR 0 3
38060: GREATER
38061: IFFALSE 38087
// length := ( array - i_from ) + i_to else
38063: LD_ADDR_VAR 0 11
38067: PUSH
38068: LD_VAR 0 1
38072: PUSH
38073: LD_VAR 0 2
38077: MINUS
38078: PUSH
38079: LD_VAR 0 3
38083: PLUS
38084: ST_TO_ADDR
38085: GO 38103
// length := i_to - i_from ;
38087: LD_ADDR_VAR 0 11
38091: PUSH
38092: LD_VAR 0 3
38096: PUSH
38097: LD_VAR 0 2
38101: MINUS
38102: ST_TO_ADDR
// end else
38103: GO 38166
// begin d := - 1 ;
38105: LD_ADDR_VAR 0 9
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: ST_TO_ADDR
// if i_from > i_to then
38114: LD_VAR 0 2
38118: PUSH
38119: LD_VAR 0 3
38123: GREATER
38124: IFFALSE 38144
// length := i_from - i_to else
38126: LD_ADDR_VAR 0 11
38130: PUSH
38131: LD_VAR 0 2
38135: PUSH
38136: LD_VAR 0 3
38140: MINUS
38141: ST_TO_ADDR
38142: GO 38166
// length := ( array - i_to ) + i_from ;
38144: LD_ADDR_VAR 0 11
38148: PUSH
38149: LD_VAR 0 1
38153: PUSH
38154: LD_VAR 0 3
38158: MINUS
38159: PUSH
38160: LD_VAR 0 2
38164: PLUS
38165: ST_TO_ADDR
// end ; if not length then
38166: LD_VAR 0 11
38170: NOT
38171: IFFALSE 38175
// exit ;
38173: GO 38333
// tmp := array ;
38175: LD_ADDR_VAR 0 10
38179: PUSH
38180: LD_VAR 0 1
38184: ST_TO_ADDR
// for i = 1 to length do
38185: LD_ADDR_VAR 0 6
38189: PUSH
38190: DOUBLE
38191: LD_INT 1
38193: DEC
38194: ST_TO_ADDR
38195: LD_VAR 0 11
38199: PUSH
38200: FOR_TO
38201: IFFALSE 38321
// begin for j = 1 to array do
38203: LD_ADDR_VAR 0 7
38207: PUSH
38208: DOUBLE
38209: LD_INT 1
38211: DEC
38212: ST_TO_ADDR
38213: LD_VAR 0 1
38217: PUSH
38218: FOR_TO
38219: IFFALSE 38307
// begin k := j + d ;
38221: LD_ADDR_VAR 0 8
38225: PUSH
38226: LD_VAR 0 7
38230: PUSH
38231: LD_VAR 0 9
38235: PLUS
38236: ST_TO_ADDR
// if k > array then
38237: LD_VAR 0 8
38241: PUSH
38242: LD_VAR 0 1
38246: GREATER
38247: IFFALSE 38257
// k := 1 ;
38249: LD_ADDR_VAR 0 8
38253: PUSH
38254: LD_INT 1
38256: ST_TO_ADDR
// if not k then
38257: LD_VAR 0 8
38261: NOT
38262: IFFALSE 38274
// k := array ;
38264: LD_ADDR_VAR 0 8
38268: PUSH
38269: LD_VAR 0 1
38273: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38274: LD_ADDR_VAR 0 10
38278: PUSH
38279: LD_VAR 0 10
38283: PPUSH
38284: LD_VAR 0 8
38288: PPUSH
38289: LD_VAR 0 1
38293: PUSH
38294: LD_VAR 0 7
38298: ARRAY
38299: PPUSH
38300: CALL_OW 1
38304: ST_TO_ADDR
// end ;
38305: GO 38218
38307: POP
38308: POP
// array := tmp ;
38309: LD_ADDR_VAR 0 1
38313: PUSH
38314: LD_VAR 0 10
38318: ST_TO_ADDR
// end ;
38319: GO 38200
38321: POP
38322: POP
// result := array ;
38323: LD_ADDR_VAR 0 5
38327: PUSH
38328: LD_VAR 0 1
38332: ST_TO_ADDR
// end ;
38333: LD_VAR 0 5
38337: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38338: LD_INT 0
38340: PPUSH
38341: PPUSH
// result := 0 ;
38342: LD_ADDR_VAR 0 3
38346: PUSH
38347: LD_INT 0
38349: ST_TO_ADDR
// if not array or not value in array then
38350: LD_VAR 0 1
38354: NOT
38355: IFTRUE 38370
38357: PUSH
38358: LD_VAR 0 2
38362: PUSH
38363: LD_VAR 0 1
38367: IN
38368: NOT
38369: OR
38370: IFFALSE 38374
// exit ;
38372: GO 38428
// for i = 1 to array do
38374: LD_ADDR_VAR 0 4
38378: PUSH
38379: DOUBLE
38380: LD_INT 1
38382: DEC
38383: ST_TO_ADDR
38384: LD_VAR 0 1
38388: PUSH
38389: FOR_TO
38390: IFFALSE 38426
// if value = array [ i ] then
38392: LD_VAR 0 2
38396: PUSH
38397: LD_VAR 0 1
38401: PUSH
38402: LD_VAR 0 4
38406: ARRAY
38407: EQUAL
38408: IFFALSE 38424
// begin result := i ;
38410: LD_ADDR_VAR 0 3
38414: PUSH
38415: LD_VAR 0 4
38419: ST_TO_ADDR
// exit ;
38420: POP
38421: POP
38422: GO 38428
// end ;
38424: GO 38389
38426: POP
38427: POP
// end ;
38428: LD_VAR 0 3
38432: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38433: LD_INT 0
38435: PPUSH
// vc_chassis := chassis ;
38436: LD_ADDR_OWVAR 37
38440: PUSH
38441: LD_VAR 0 1
38445: ST_TO_ADDR
// vc_engine := engine ;
38446: LD_ADDR_OWVAR 39
38450: PUSH
38451: LD_VAR 0 2
38455: ST_TO_ADDR
// vc_control := control ;
38456: LD_ADDR_OWVAR 38
38460: PUSH
38461: LD_VAR 0 3
38465: ST_TO_ADDR
// vc_weapon := weapon ;
38466: LD_ADDR_OWVAR 40
38470: PUSH
38471: LD_VAR 0 4
38475: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38476: LD_ADDR_OWVAR 41
38480: PUSH
38481: LD_VAR 0 5
38485: ST_TO_ADDR
// end ;
38486: LD_VAR 0 6
38490: RET
// export function WantPlant ( unit ) ; var task ; begin
38491: LD_INT 0
38493: PPUSH
38494: PPUSH
// result := false ;
38495: LD_ADDR_VAR 0 2
38499: PUSH
38500: LD_INT 0
38502: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38503: LD_ADDR_VAR 0 3
38507: PUSH
38508: LD_VAR 0 1
38512: PPUSH
38513: CALL_OW 437
38517: ST_TO_ADDR
// if task then
38518: LD_VAR 0 3
38522: IFFALSE 38550
// if task [ 1 ] [ 1 ] = p then
38524: LD_VAR 0 3
38528: PUSH
38529: LD_INT 1
38531: ARRAY
38532: PUSH
38533: LD_INT 1
38535: ARRAY
38536: PUSH
38537: LD_STRING p
38539: EQUAL
38540: IFFALSE 38550
// result := true ;
38542: LD_ADDR_VAR 0 2
38546: PUSH
38547: LD_INT 1
38549: ST_TO_ADDR
// end ;
38550: LD_VAR 0 2
38554: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38555: LD_INT 0
38557: PPUSH
38558: PPUSH
38559: PPUSH
38560: PPUSH
// if pos < 1 then
38561: LD_VAR 0 2
38565: PUSH
38566: LD_INT 1
38568: LESS
38569: IFFALSE 38573
// exit ;
38571: GO 38876
// if pos = 1 then
38573: LD_VAR 0 2
38577: PUSH
38578: LD_INT 1
38580: EQUAL
38581: IFFALSE 38614
// result := Replace ( arr , pos [ 1 ] , value ) else
38583: LD_ADDR_VAR 0 4
38587: PUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: LD_VAR 0 2
38597: PUSH
38598: LD_INT 1
38600: ARRAY
38601: PPUSH
38602: LD_VAR 0 3
38606: PPUSH
38607: CALL_OW 1
38611: ST_TO_ADDR
38612: GO 38876
// begin tmp := arr ;
38614: LD_ADDR_VAR 0 6
38618: PUSH
38619: LD_VAR 0 1
38623: ST_TO_ADDR
// s_arr := [ tmp ] ;
38624: LD_ADDR_VAR 0 7
38628: PUSH
38629: LD_VAR 0 6
38633: PUSH
38634: EMPTY
38635: LIST
38636: ST_TO_ADDR
// for i = 1 to pos - 1 do
38637: LD_ADDR_VAR 0 5
38641: PUSH
38642: DOUBLE
38643: LD_INT 1
38645: DEC
38646: ST_TO_ADDR
38647: LD_VAR 0 2
38651: PUSH
38652: LD_INT 1
38654: MINUS
38655: PUSH
38656: FOR_TO
38657: IFFALSE 38702
// begin tmp := tmp [ pos [ i ] ] ;
38659: LD_ADDR_VAR 0 6
38663: PUSH
38664: LD_VAR 0 6
38668: PUSH
38669: LD_VAR 0 2
38673: PUSH
38674: LD_VAR 0 5
38678: ARRAY
38679: ARRAY
38680: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38681: LD_ADDR_VAR 0 7
38685: PUSH
38686: LD_VAR 0 7
38690: PUSH
38691: LD_VAR 0 6
38695: PUSH
38696: EMPTY
38697: LIST
38698: ADD
38699: ST_TO_ADDR
// end ;
38700: GO 38656
38702: POP
38703: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38704: LD_ADDR_VAR 0 6
38708: PUSH
38709: LD_VAR 0 6
38713: PPUSH
38714: LD_VAR 0 2
38718: PUSH
38719: LD_VAR 0 2
38723: ARRAY
38724: PPUSH
38725: LD_VAR 0 3
38729: PPUSH
38730: CALL_OW 1
38734: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38735: LD_ADDR_VAR 0 7
38739: PUSH
38740: LD_VAR 0 7
38744: PPUSH
38745: LD_VAR 0 7
38749: PPUSH
38750: LD_VAR 0 6
38754: PPUSH
38755: CALL_OW 1
38759: ST_TO_ADDR
// for i = s_arr downto 2 do
38760: LD_ADDR_VAR 0 5
38764: PUSH
38765: DOUBLE
38766: LD_VAR 0 7
38770: INC
38771: ST_TO_ADDR
38772: LD_INT 2
38774: PUSH
38775: FOR_DOWNTO
38776: IFFALSE 38860
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38778: LD_ADDR_VAR 0 6
38782: PUSH
38783: LD_VAR 0 7
38787: PUSH
38788: LD_VAR 0 5
38792: PUSH
38793: LD_INT 1
38795: MINUS
38796: ARRAY
38797: PPUSH
38798: LD_VAR 0 2
38802: PUSH
38803: LD_VAR 0 5
38807: PUSH
38808: LD_INT 1
38810: MINUS
38811: ARRAY
38812: PPUSH
38813: LD_VAR 0 7
38817: PUSH
38818: LD_VAR 0 5
38822: ARRAY
38823: PPUSH
38824: CALL_OW 1
38828: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38829: LD_ADDR_VAR 0 7
38833: PUSH
38834: LD_VAR 0 7
38838: PPUSH
38839: LD_VAR 0 5
38843: PUSH
38844: LD_INT 1
38846: MINUS
38847: PPUSH
38848: LD_VAR 0 6
38852: PPUSH
38853: CALL_OW 1
38857: ST_TO_ADDR
// end ;
38858: GO 38775
38860: POP
38861: POP
// result := s_arr [ 1 ] ;
38862: LD_ADDR_VAR 0 4
38866: PUSH
38867: LD_VAR 0 7
38871: PUSH
38872: LD_INT 1
38874: ARRAY
38875: ST_TO_ADDR
// end ; end ;
38876: LD_VAR 0 4
38880: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38881: LD_INT 0
38883: PPUSH
38884: PPUSH
// if not list then
38885: LD_VAR 0 1
38889: NOT
38890: IFFALSE 38894
// exit ;
38892: GO 38985
// i := list [ pos1 ] ;
38894: LD_ADDR_VAR 0 5
38898: PUSH
38899: LD_VAR 0 1
38903: PUSH
38904: LD_VAR 0 2
38908: ARRAY
38909: ST_TO_ADDR
// if not i then
38910: LD_VAR 0 5
38914: NOT
38915: IFFALSE 38919
// exit ;
38917: GO 38985
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38919: LD_ADDR_VAR 0 1
38923: PUSH
38924: LD_VAR 0 1
38928: PPUSH
38929: LD_VAR 0 2
38933: PPUSH
38934: LD_VAR 0 1
38938: PUSH
38939: LD_VAR 0 3
38943: ARRAY
38944: PPUSH
38945: CALL_OW 1
38949: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38950: LD_ADDR_VAR 0 1
38954: PUSH
38955: LD_VAR 0 1
38959: PPUSH
38960: LD_VAR 0 3
38964: PPUSH
38965: LD_VAR 0 5
38969: PPUSH
38970: CALL_OW 1
38974: ST_TO_ADDR
// result := list ;
38975: LD_ADDR_VAR 0 4
38979: PUSH
38980: LD_VAR 0 1
38984: ST_TO_ADDR
// end ;
38985: LD_VAR 0 4
38989: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38990: LD_INT 0
38992: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38993: LD_ADDR_VAR 0 5
38997: PUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 250
39007: PPUSH
39008: LD_VAR 0 1
39012: PPUSH
39013: CALL_OW 251
39017: PPUSH
39018: LD_VAR 0 2
39022: PPUSH
39023: LD_VAR 0 3
39027: PPUSH
39028: LD_VAR 0 4
39032: PPUSH
39033: CALL 39415 0 5
39037: ST_TO_ADDR
// end ;
39038: LD_VAR 0 5
39042: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39043: LD_INT 0
39045: PPUSH
39046: PPUSH
39047: PPUSH
39048: PPUSH
// if not list or not unit then
39049: LD_VAR 0 2
39053: NOT
39054: IFTRUE 39063
39056: PUSH
39057: LD_VAR 0 1
39061: NOT
39062: OR
39063: IFFALSE 39067
// exit ;
39065: GO 39410
// result := [ ] ;
39067: LD_ADDR_VAR 0 5
39071: PUSH
39072: EMPTY
39073: ST_TO_ADDR
// for i in list do
39074: LD_ADDR_VAR 0 6
39078: PUSH
39079: LD_VAR 0 2
39083: PUSH
39084: FOR_IN
39085: IFFALSE 39303
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39087: LD_ADDR_VAR 0 8
39091: PUSH
39092: LD_VAR 0 1
39096: PPUSH
39097: LD_VAR 0 6
39101: PUSH
39102: LD_INT 1
39104: ARRAY
39105: PPUSH
39106: LD_VAR 0 6
39110: PUSH
39111: LD_INT 2
39113: ARRAY
39114: PPUSH
39115: CALL_OW 297
39119: ST_TO_ADDR
// if not Count ( result ) then
39120: LD_VAR 0 5
39124: PPUSH
39125: CALL 35637 0 1
39129: NOT
39130: IFFALSE 39163
// begin result := Join ( result , [ i , tmp ] ) ;
39132: LD_ADDR_VAR 0 5
39136: PUSH
39137: LD_VAR 0 5
39141: PPUSH
39142: LD_VAR 0 6
39146: PUSH
39147: LD_VAR 0 8
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PPUSH
39156: CALL 71613 0 2
39160: ST_TO_ADDR
// continue ;
39161: GO 39084
// end ; if result [ result ] [ 2 ] <= tmp then
39163: LD_VAR 0 5
39167: PUSH
39168: LD_VAR 0 5
39172: ARRAY
39173: PUSH
39174: LD_INT 2
39176: ARRAY
39177: PUSH
39178: LD_VAR 0 8
39182: LESSEQUAL
39183: IFFALSE 39216
// result := Join ( result , [ i , tmp ] ) else
39185: LD_ADDR_VAR 0 5
39189: PUSH
39190: LD_VAR 0 5
39194: PPUSH
39195: LD_VAR 0 6
39199: PUSH
39200: LD_VAR 0 8
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PPUSH
39209: CALL 71613 0 2
39213: ST_TO_ADDR
39214: GO 39301
// begin for j := 1 to Count ( result ) do
39216: LD_ADDR_VAR 0 7
39220: PUSH
39221: DOUBLE
39222: LD_INT 1
39224: DEC
39225: ST_TO_ADDR
39226: LD_VAR 0 5
39230: PPUSH
39231: CALL 35637 0 1
39235: PUSH
39236: FOR_TO
39237: IFFALSE 39299
// begin if tmp < result [ j ] [ 2 ] then
39239: LD_VAR 0 8
39243: PUSH
39244: LD_VAR 0 5
39248: PUSH
39249: LD_VAR 0 7
39253: ARRAY
39254: PUSH
39255: LD_INT 2
39257: ARRAY
39258: LESS
39259: IFFALSE 39297
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39261: LD_ADDR_VAR 0 5
39265: PUSH
39266: LD_VAR 0 5
39270: PPUSH
39271: LD_VAR 0 7
39275: PPUSH
39276: LD_VAR 0 6
39280: PUSH
39281: LD_VAR 0 8
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PPUSH
39290: CALL_OW 2
39294: ST_TO_ADDR
// break ;
39295: GO 39299
// end ; end ;
39297: GO 39236
39299: POP
39300: POP
// end ; end ;
39301: GO 39084
39303: POP
39304: POP
// if result and not asc then
39305: LD_VAR 0 5
39309: IFFALSE 39318
39311: PUSH
39312: LD_VAR 0 3
39316: NOT
39317: AND
39318: IFFALSE 39335
// result := ReverseArray ( result ) ;
39320: LD_ADDR_VAR 0 5
39324: PUSH
39325: LD_VAR 0 5
39329: PPUSH
39330: CALL 66693 0 1
39334: ST_TO_ADDR
// tmp := [ ] ;
39335: LD_ADDR_VAR 0 8
39339: PUSH
39340: EMPTY
39341: ST_TO_ADDR
// if mode then
39342: LD_VAR 0 4
39346: IFFALSE 39410
// begin for i := 1 to result do
39348: LD_ADDR_VAR 0 6
39352: PUSH
39353: DOUBLE
39354: LD_INT 1
39356: DEC
39357: ST_TO_ADDR
39358: LD_VAR 0 5
39362: PUSH
39363: FOR_TO
39364: IFFALSE 39398
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39366: LD_ADDR_VAR 0 8
39370: PUSH
39371: LD_VAR 0 8
39375: PPUSH
39376: LD_VAR 0 5
39380: PUSH
39381: LD_VAR 0 6
39385: ARRAY
39386: PUSH
39387: LD_INT 1
39389: ARRAY
39390: PPUSH
39391: CALL 71613 0 2
39395: ST_TO_ADDR
39396: GO 39363
39398: POP
39399: POP
// result := tmp ;
39400: LD_ADDR_VAR 0 5
39404: PUSH
39405: LD_VAR 0 8
39409: ST_TO_ADDR
// end ; end ;
39410: LD_VAR 0 5
39414: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39415: LD_INT 0
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
// if not list then
39421: LD_VAR 0 3
39425: NOT
39426: IFFALSE 39430
// exit ;
39428: GO 39820
// result := [ ] ;
39430: LD_ADDR_VAR 0 6
39434: PUSH
39435: EMPTY
39436: ST_TO_ADDR
// for i in list do
39437: LD_ADDR_VAR 0 7
39441: PUSH
39442: LD_VAR 0 3
39446: PUSH
39447: FOR_IN
39448: IFFALSE 39650
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39450: LD_ADDR_VAR 0 9
39454: PUSH
39455: LD_VAR 0 7
39459: PPUSH
39460: LD_VAR 0 1
39464: PPUSH
39465: LD_VAR 0 2
39469: PPUSH
39470: CALL_OW 297
39474: ST_TO_ADDR
// if not result then
39475: LD_VAR 0 6
39479: NOT
39480: IFFALSE 39506
// result := [ [ i , tmp ] ] else
39482: LD_ADDR_VAR 0 6
39486: PUSH
39487: LD_VAR 0 7
39491: PUSH
39492: LD_VAR 0 9
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: EMPTY
39502: LIST
39503: ST_TO_ADDR
39504: GO 39648
// begin if result [ result ] [ 2 ] <= tmp then
39506: LD_VAR 0 6
39510: PUSH
39511: LD_VAR 0 6
39515: ARRAY
39516: PUSH
39517: LD_INT 2
39519: ARRAY
39520: PUSH
39521: LD_VAR 0 9
39525: LESSEQUAL
39526: IFFALSE 39568
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39528: LD_ADDR_VAR 0 6
39532: PUSH
39533: LD_VAR 0 6
39537: PPUSH
39538: LD_VAR 0 6
39542: PUSH
39543: LD_INT 1
39545: PLUS
39546: PPUSH
39547: LD_VAR 0 7
39551: PUSH
39552: LD_VAR 0 9
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PPUSH
39561: CALL_OW 2
39565: ST_TO_ADDR
39566: GO 39648
// for j := 1 to result do
39568: LD_ADDR_VAR 0 8
39572: PUSH
39573: DOUBLE
39574: LD_INT 1
39576: DEC
39577: ST_TO_ADDR
39578: LD_VAR 0 6
39582: PUSH
39583: FOR_TO
39584: IFFALSE 39646
// begin if tmp < result [ j ] [ 2 ] then
39586: LD_VAR 0 9
39590: PUSH
39591: LD_VAR 0 6
39595: PUSH
39596: LD_VAR 0 8
39600: ARRAY
39601: PUSH
39602: LD_INT 2
39604: ARRAY
39605: LESS
39606: IFFALSE 39644
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39608: LD_ADDR_VAR 0 6
39612: PUSH
39613: LD_VAR 0 6
39617: PPUSH
39618: LD_VAR 0 8
39622: PPUSH
39623: LD_VAR 0 7
39627: PUSH
39628: LD_VAR 0 9
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PPUSH
39637: CALL_OW 2
39641: ST_TO_ADDR
// break ;
39642: GO 39646
// end ; end ;
39644: GO 39583
39646: POP
39647: POP
// end ; end ;
39648: GO 39447
39650: POP
39651: POP
// if result and not asc then
39652: LD_VAR 0 6
39656: IFFALSE 39665
39658: PUSH
39659: LD_VAR 0 4
39663: NOT
39664: AND
39665: IFFALSE 39740
// begin tmp := result ;
39667: LD_ADDR_VAR 0 9
39671: PUSH
39672: LD_VAR 0 6
39676: ST_TO_ADDR
// for i = tmp downto 1 do
39677: LD_ADDR_VAR 0 7
39681: PUSH
39682: DOUBLE
39683: LD_VAR 0 9
39687: INC
39688: ST_TO_ADDR
39689: LD_INT 1
39691: PUSH
39692: FOR_DOWNTO
39693: IFFALSE 39738
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39695: LD_ADDR_VAR 0 6
39699: PUSH
39700: LD_VAR 0 6
39704: PPUSH
39705: LD_VAR 0 9
39709: PUSH
39710: LD_VAR 0 7
39714: MINUS
39715: PUSH
39716: LD_INT 1
39718: PLUS
39719: PPUSH
39720: LD_VAR 0 9
39724: PUSH
39725: LD_VAR 0 7
39729: ARRAY
39730: PPUSH
39731: CALL_OW 1
39735: ST_TO_ADDR
39736: GO 39692
39738: POP
39739: POP
// end ; tmp := [ ] ;
39740: LD_ADDR_VAR 0 9
39744: PUSH
39745: EMPTY
39746: ST_TO_ADDR
// if mode then
39747: LD_VAR 0 5
39751: IFFALSE 39820
// begin for i = 1 to result do
39753: LD_ADDR_VAR 0 7
39757: PUSH
39758: DOUBLE
39759: LD_INT 1
39761: DEC
39762: ST_TO_ADDR
39763: LD_VAR 0 6
39767: PUSH
39768: FOR_TO
39769: IFFALSE 39808
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39771: LD_ADDR_VAR 0 9
39775: PUSH
39776: LD_VAR 0 9
39780: PPUSH
39781: LD_VAR 0 7
39785: PPUSH
39786: LD_VAR 0 6
39790: PUSH
39791: LD_VAR 0 7
39795: ARRAY
39796: PUSH
39797: LD_INT 1
39799: ARRAY
39800: PPUSH
39801: CALL_OW 1
39805: ST_TO_ADDR
39806: GO 39768
39808: POP
39809: POP
// result := tmp ;
39810: LD_ADDR_VAR 0 6
39814: PUSH
39815: LD_VAR 0 9
39819: ST_TO_ADDR
// end ; end ;
39820: LD_VAR 0 6
39824: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39825: LD_INT 0
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39833: LD_ADDR_VAR 0 5
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: EMPTY
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: ST_TO_ADDR
// if not x or not y then
39855: LD_VAR 0 2
39859: NOT
39860: IFTRUE 39869
39862: PUSH
39863: LD_VAR 0 3
39867: NOT
39868: OR
39869: IFFALSE 39873
// exit ;
39871: GO 41529
// if not range then
39873: LD_VAR 0 4
39877: NOT
39878: IFFALSE 39888
// range := 10 ;
39880: LD_ADDR_VAR 0 4
39884: PUSH
39885: LD_INT 10
39887: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39888: LD_ADDR_VAR 0 8
39892: PUSH
39893: LD_INT 81
39895: PUSH
39896: LD_VAR 0 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 92
39907: PUSH
39908: LD_VAR 0 2
39912: PUSH
39913: LD_VAR 0 3
39917: PUSH
39918: LD_VAR 0 4
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: LD_INT 21
39934: PUSH
39935: LD_INT 3
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: PPUSH
39951: CALL_OW 69
39955: ST_TO_ADDR
// if not tmp then
39956: LD_VAR 0 8
39960: NOT
39961: IFFALSE 39965
// exit ;
39963: GO 41529
// for i in tmp do
39965: LD_ADDR_VAR 0 6
39969: PUSH
39970: LD_VAR 0 8
39974: PUSH
39975: FOR_IN
39976: IFFALSE 41504
// begin points := [ 0 , 0 , 0 ] ;
39978: LD_ADDR_VAR 0 9
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: ST_TO_ADDR
// bpoints := 1 ;
39997: LD_ADDR_VAR 0 10
40001: PUSH
40002: LD_INT 1
40004: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40005: LD_VAR 0 6
40009: PPUSH
40010: CALL_OW 247
40014: PUSH
40015: LD_INT 1
40017: DOUBLE
40018: EQUAL
40019: IFTRUE 40023
40021: GO 40605
40023: POP
// begin if GetClass ( i ) = 1 then
40024: LD_VAR 0 6
40028: PPUSH
40029: CALL_OW 257
40033: PUSH
40034: LD_INT 1
40036: EQUAL
40037: IFFALSE 40058
// points := [ 10 , 5 , 3 ] ;
40039: LD_ADDR_VAR 0 9
40043: PUSH
40044: LD_INT 10
40046: PUSH
40047: LD_INT 5
40049: PUSH
40050: LD_INT 3
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40058: LD_VAR 0 6
40062: PPUSH
40063: CALL_OW 257
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: LD_INT 4
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: IN
40082: IFFALSE 40103
// points := [ 3 , 2 , 1 ] ;
40084: LD_ADDR_VAR 0 9
40088: PUSH
40089: LD_INT 3
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40103: LD_VAR 0 6
40107: PPUSH
40108: CALL_OW 257
40112: PUSH
40113: LD_INT 5
40115: EQUAL
40116: IFFALSE 40137
// points := [ 130 , 5 , 2 ] ;
40118: LD_ADDR_VAR 0 9
40122: PUSH
40123: LD_INT 130
40125: PUSH
40126: LD_INT 5
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40137: LD_VAR 0 6
40141: PPUSH
40142: CALL_OW 257
40146: PUSH
40147: LD_INT 8
40149: EQUAL
40150: IFFALSE 40171
// points := [ 35 , 35 , 30 ] ;
40152: LD_ADDR_VAR 0 9
40156: PUSH
40157: LD_INT 35
40159: PUSH
40160: LD_INT 35
40162: PUSH
40163: LD_INT 30
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40171: LD_VAR 0 6
40175: PPUSH
40176: CALL_OW 257
40180: PUSH
40181: LD_INT 9
40183: EQUAL
40184: IFFALSE 40205
// points := [ 20 , 55 , 40 ] ;
40186: LD_ADDR_VAR 0 9
40190: PUSH
40191: LD_INT 20
40193: PUSH
40194: LD_INT 55
40196: PUSH
40197: LD_INT 40
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40205: LD_VAR 0 6
40209: PPUSH
40210: CALL_OW 257
40214: PUSH
40215: LD_INT 12
40217: PUSH
40218: LD_INT 16
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: IN
40225: IFFALSE 40246
// points := [ 5 , 3 , 2 ] ;
40227: LD_ADDR_VAR 0 9
40231: PUSH
40232: LD_INT 5
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: LIST
40245: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40246: LD_VAR 0 6
40250: PPUSH
40251: CALL_OW 257
40255: PUSH
40256: LD_INT 17
40258: EQUAL
40259: IFFALSE 40280
// points := [ 100 , 50 , 75 ] ;
40261: LD_ADDR_VAR 0 9
40265: PUSH
40266: LD_INT 100
40268: PUSH
40269: LD_INT 50
40271: PUSH
40272: LD_INT 75
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40280: LD_VAR 0 6
40284: PPUSH
40285: CALL_OW 257
40289: PUSH
40290: LD_INT 15
40292: EQUAL
40293: IFFALSE 40314
// points := [ 10 , 5 , 3 ] ;
40295: LD_ADDR_VAR 0 9
40299: PUSH
40300: LD_INT 10
40302: PUSH
40303: LD_INT 5
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: LIST
40313: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40314: LD_VAR 0 6
40318: PPUSH
40319: CALL_OW 257
40323: PUSH
40324: LD_INT 14
40326: EQUAL
40327: IFFALSE 40348
// points := [ 10 , 0 , 0 ] ;
40329: LD_ADDR_VAR 0 9
40333: PUSH
40334: LD_INT 10
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40348: LD_VAR 0 6
40352: PPUSH
40353: CALL_OW 257
40357: PUSH
40358: LD_INT 11
40360: EQUAL
40361: IFFALSE 40382
// points := [ 30 , 10 , 5 ] ;
40363: LD_ADDR_VAR 0 9
40367: PUSH
40368: LD_INT 30
40370: PUSH
40371: LD_INT 10
40373: PUSH
40374: LD_INT 5
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40382: LD_VAR 0 1
40386: PPUSH
40387: LD_INT 5
40389: PPUSH
40390: CALL_OW 321
40394: PUSH
40395: LD_INT 2
40397: EQUAL
40398: IFFALSE 40415
// bpoints := bpoints * 1.8 ;
40400: LD_ADDR_VAR 0 10
40404: PUSH
40405: LD_VAR 0 10
40409: PUSH
40410: LD_REAL  1.80000000000000E+0000
40413: MUL
40414: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40415: LD_VAR 0 6
40419: PPUSH
40420: CALL_OW 257
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: LD_INT 3
40433: PUSH
40434: LD_INT 4
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: IN
40443: IFFALSE 40463
40445: PUSH
40446: LD_VAR 0 1
40450: PPUSH
40451: LD_INT 51
40453: PPUSH
40454: CALL_OW 321
40458: PUSH
40459: LD_INT 2
40461: EQUAL
40462: AND
40463: IFFALSE 40480
// bpoints := bpoints * 1.2 ;
40465: LD_ADDR_VAR 0 10
40469: PUSH
40470: LD_VAR 0 10
40474: PUSH
40475: LD_REAL  1.20000000000000E+0000
40478: MUL
40479: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40480: LD_VAR 0 6
40484: PPUSH
40485: CALL_OW 257
40489: PUSH
40490: LD_INT 5
40492: PUSH
40493: LD_INT 7
40495: PUSH
40496: LD_INT 9
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: LIST
40503: IN
40504: IFFALSE 40524
40506: PUSH
40507: LD_VAR 0 1
40511: PPUSH
40512: LD_INT 52
40514: PPUSH
40515: CALL_OW 321
40519: PUSH
40520: LD_INT 2
40522: EQUAL
40523: AND
40524: IFFALSE 40541
// bpoints := bpoints * 1.5 ;
40526: LD_ADDR_VAR 0 10
40530: PUSH
40531: LD_VAR 0 10
40535: PUSH
40536: LD_REAL  1.50000000000000E+0000
40539: MUL
40540: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40541: LD_VAR 0 1
40545: PPUSH
40546: LD_INT 66
40548: PPUSH
40549: CALL_OW 321
40553: PUSH
40554: LD_INT 2
40556: EQUAL
40557: IFFALSE 40574
// bpoints := bpoints * 1.1 ;
40559: LD_ADDR_VAR 0 10
40563: PUSH
40564: LD_VAR 0 10
40568: PUSH
40569: LD_REAL  1.10000000000000E+0000
40572: MUL
40573: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40574: LD_ADDR_VAR 0 10
40578: PUSH
40579: LD_VAR 0 10
40583: PUSH
40584: LD_VAR 0 6
40588: PPUSH
40589: LD_INT 1
40591: PPUSH
40592: CALL_OW 259
40596: PUSH
40597: LD_REAL  1.15000000000000E+0000
40600: MUL
40601: MUL
40602: ST_TO_ADDR
// end ; unit_vehicle :
40603: GO 41433
40605: LD_INT 2
40607: DOUBLE
40608: EQUAL
40609: IFTRUE 40613
40611: GO 41421
40613: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40614: LD_VAR 0 6
40618: PPUSH
40619: CALL_OW 264
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: LD_INT 42
40629: PUSH
40630: LD_INT 24
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: IN
40638: IFFALSE 40659
// points := [ 25 , 5 , 3 ] ;
40640: LD_ADDR_VAR 0 9
40644: PUSH
40645: LD_INT 25
40647: PUSH
40648: LD_INT 5
40650: PUSH
40651: LD_INT 3
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40659: LD_VAR 0 6
40663: PPUSH
40664: CALL_OW 264
40668: PUSH
40669: LD_INT 4
40671: PUSH
40672: LD_INT 43
40674: PUSH
40675: LD_INT 25
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: IN
40683: IFFALSE 40704
// points := [ 40 , 15 , 5 ] ;
40685: LD_ADDR_VAR 0 9
40689: PUSH
40690: LD_INT 40
40692: PUSH
40693: LD_INT 15
40695: PUSH
40696: LD_INT 5
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40704: LD_VAR 0 6
40708: PPUSH
40709: CALL_OW 264
40713: PUSH
40714: LD_INT 3
40716: PUSH
40717: LD_INT 23
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: IN
40724: IFFALSE 40745
// points := [ 7 , 25 , 8 ] ;
40726: LD_ADDR_VAR 0 9
40730: PUSH
40731: LD_INT 7
40733: PUSH
40734: LD_INT 25
40736: PUSH
40737: LD_INT 8
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40745: LD_VAR 0 6
40749: PPUSH
40750: CALL_OW 264
40754: PUSH
40755: LD_INT 5
40757: PUSH
40758: LD_INT 27
40760: PUSH
40761: LD_INT 44
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: LIST
40768: IN
40769: IFFALSE 40790
// points := [ 14 , 50 , 16 ] ;
40771: LD_ADDR_VAR 0 9
40775: PUSH
40776: LD_INT 14
40778: PUSH
40779: LD_INT 50
40781: PUSH
40782: LD_INT 16
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: LIST
40789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40790: LD_VAR 0 6
40794: PPUSH
40795: CALL_OW 264
40799: PUSH
40800: LD_INT 6
40802: PUSH
40803: LD_INT 46
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: IN
40810: IFFALSE 40831
// points := [ 32 , 120 , 70 ] ;
40812: LD_ADDR_VAR 0 9
40816: PUSH
40817: LD_INT 32
40819: PUSH
40820: LD_INT 120
40822: PUSH
40823: LD_INT 70
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40831: LD_VAR 0 6
40835: PPUSH
40836: CALL_OW 264
40840: PUSH
40841: LD_INT 7
40843: PUSH
40844: LD_INT 28
40846: PUSH
40847: LD_INT 45
40849: PUSH
40850: LD_INT 92
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: IN
40859: IFFALSE 40880
// points := [ 35 , 20 , 45 ] ;
40861: LD_ADDR_VAR 0 9
40865: PUSH
40866: LD_INT 35
40868: PUSH
40869: LD_INT 20
40871: PUSH
40872: LD_INT 45
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40880: LD_VAR 0 6
40884: PPUSH
40885: CALL_OW 264
40889: PUSH
40890: LD_INT 47
40892: PUSH
40893: EMPTY
40894: LIST
40895: IN
40896: IFFALSE 40917
// points := [ 67 , 45 , 75 ] ;
40898: LD_ADDR_VAR 0 9
40902: PUSH
40903: LD_INT 67
40905: PUSH
40906: LD_INT 45
40908: PUSH
40909: LD_INT 75
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40917: LD_VAR 0 6
40921: PPUSH
40922: CALL_OW 264
40926: PUSH
40927: LD_INT 26
40929: PUSH
40930: EMPTY
40931: LIST
40932: IN
40933: IFFALSE 40954
// points := [ 120 , 30 , 80 ] ;
40935: LD_ADDR_VAR 0 9
40939: PUSH
40940: LD_INT 120
40942: PUSH
40943: LD_INT 30
40945: PUSH
40946: LD_INT 80
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: LIST
40953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40954: LD_VAR 0 6
40958: PPUSH
40959: CALL_OW 264
40963: PUSH
40964: LD_INT 22
40966: PUSH
40967: EMPTY
40968: LIST
40969: IN
40970: IFFALSE 40991
// points := [ 40 , 1 , 1 ] ;
40972: LD_ADDR_VAR 0 9
40976: PUSH
40977: LD_INT 40
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: LIST
40990: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40991: LD_VAR 0 6
40995: PPUSH
40996: CALL_OW 264
41000: PUSH
41001: LD_INT 29
41003: PUSH
41004: EMPTY
41005: LIST
41006: IN
41007: IFFALSE 41028
// points := [ 70 , 200 , 400 ] ;
41009: LD_ADDR_VAR 0 9
41013: PUSH
41014: LD_INT 70
41016: PUSH
41017: LD_INT 200
41019: PUSH
41020: LD_INT 400
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41028: LD_VAR 0 6
41032: PPUSH
41033: CALL_OW 264
41037: PUSH
41038: LD_INT 14
41040: PUSH
41041: LD_INT 53
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: IN
41048: IFFALSE 41069
// points := [ 40 , 10 , 20 ] ;
41050: LD_ADDR_VAR 0 9
41054: PUSH
41055: LD_INT 40
41057: PUSH
41058: LD_INT 10
41060: PUSH
41061: LD_INT 20
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: LIST
41068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41069: LD_VAR 0 6
41073: PPUSH
41074: CALL_OW 264
41078: PUSH
41079: LD_INT 9
41081: PUSH
41082: EMPTY
41083: LIST
41084: IN
41085: IFFALSE 41106
// points := [ 5 , 70 , 20 ] ;
41087: LD_ADDR_VAR 0 9
41091: PUSH
41092: LD_INT 5
41094: PUSH
41095: LD_INT 70
41097: PUSH
41098: LD_INT 20
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: LIST
41105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41106: LD_VAR 0 6
41110: PPUSH
41111: CALL_OW 264
41115: PUSH
41116: LD_INT 10
41118: PUSH
41119: EMPTY
41120: LIST
41121: IN
41122: IFFALSE 41143
// points := [ 35 , 110 , 70 ] ;
41124: LD_ADDR_VAR 0 9
41128: PUSH
41129: LD_INT 35
41131: PUSH
41132: LD_INT 110
41134: PUSH
41135: LD_INT 70
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: LIST
41142: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41143: LD_VAR 0 6
41147: PPUSH
41148: CALL_OW 265
41152: PUSH
41153: LD_INT 25
41155: EQUAL
41156: IFFALSE 41177
// points := [ 80 , 65 , 100 ] ;
41158: LD_ADDR_VAR 0 9
41162: PUSH
41163: LD_INT 80
41165: PUSH
41166: LD_INT 65
41168: PUSH
41169: LD_INT 100
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41177: LD_VAR 0 6
41181: PPUSH
41182: CALL_OW 263
41186: PUSH
41187: LD_INT 1
41189: EQUAL
41190: IFFALSE 41225
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41192: LD_ADDR_VAR 0 10
41196: PUSH
41197: LD_VAR 0 10
41201: PUSH
41202: LD_VAR 0 6
41206: PPUSH
41207: CALL_OW 311
41211: PPUSH
41212: LD_INT 3
41214: PPUSH
41215: CALL_OW 259
41219: PUSH
41220: LD_INT 4
41222: MUL
41223: MUL
41224: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41225: LD_VAR 0 6
41229: PPUSH
41230: CALL_OW 263
41234: PUSH
41235: LD_INT 2
41237: EQUAL
41238: IFFALSE 41289
// begin j := IsControledBy ( i ) ;
41240: LD_ADDR_VAR 0 7
41244: PUSH
41245: LD_VAR 0 6
41249: PPUSH
41250: CALL_OW 312
41254: ST_TO_ADDR
// if j then
41255: LD_VAR 0 7
41259: IFFALSE 41289
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41261: LD_ADDR_VAR 0 10
41265: PUSH
41266: LD_VAR 0 10
41270: PUSH
41271: LD_VAR 0 7
41275: PPUSH
41276: LD_INT 3
41278: PPUSH
41279: CALL_OW 259
41283: PUSH
41284: LD_INT 3
41286: MUL
41287: MUL
41288: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41289: LD_VAR 0 6
41293: PPUSH
41294: CALL_OW 264
41298: PUSH
41299: LD_INT 5
41301: PUSH
41302: LD_INT 6
41304: PUSH
41305: LD_INT 46
41307: PUSH
41308: LD_INT 44
41310: PUSH
41311: LD_INT 47
41313: PUSH
41314: LD_INT 45
41316: PUSH
41317: LD_INT 28
41319: PUSH
41320: LD_INT 7
41322: PUSH
41323: LD_INT 27
41325: PUSH
41326: LD_INT 29
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: IN
41341: IFFALSE 41361
41343: PUSH
41344: LD_VAR 0 1
41348: PPUSH
41349: LD_INT 52
41351: PPUSH
41352: CALL_OW 321
41356: PUSH
41357: LD_INT 2
41359: EQUAL
41360: AND
41361: IFFALSE 41378
// bpoints := bpoints * 1.2 ;
41363: LD_ADDR_VAR 0 10
41367: PUSH
41368: LD_VAR 0 10
41372: PUSH
41373: LD_REAL  1.20000000000000E+0000
41376: MUL
41377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41378: LD_VAR 0 6
41382: PPUSH
41383: CALL_OW 264
41387: PUSH
41388: LD_INT 6
41390: PUSH
41391: LD_INT 46
41393: PUSH
41394: LD_INT 47
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: IN
41402: IFFALSE 41419
// bpoints := bpoints * 1.2 ;
41404: LD_ADDR_VAR 0 10
41408: PUSH
41409: LD_VAR 0 10
41413: PUSH
41414: LD_REAL  1.20000000000000E+0000
41417: MUL
41418: ST_TO_ADDR
// end ; unit_building :
41419: GO 41433
41421: LD_INT 3
41423: DOUBLE
41424: EQUAL
41425: IFTRUE 41429
41427: GO 41432
41429: POP
// ; end ;
41430: GO 41433
41432: POP
// for j = 1 to 3 do
41433: LD_ADDR_VAR 0 7
41437: PUSH
41438: DOUBLE
41439: LD_INT 1
41441: DEC
41442: ST_TO_ADDR
41443: LD_INT 3
41445: PUSH
41446: FOR_TO
41447: IFFALSE 41500
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41449: LD_ADDR_VAR 0 5
41453: PUSH
41454: LD_VAR 0 5
41458: PPUSH
41459: LD_VAR 0 7
41463: PPUSH
41464: LD_VAR 0 5
41468: PUSH
41469: LD_VAR 0 7
41473: ARRAY
41474: PUSH
41475: LD_VAR 0 9
41479: PUSH
41480: LD_VAR 0 7
41484: ARRAY
41485: PUSH
41486: LD_VAR 0 10
41490: MUL
41491: PLUS
41492: PPUSH
41493: CALL_OW 1
41497: ST_TO_ADDR
41498: GO 41446
41500: POP
41501: POP
// end ;
41502: GO 39975
41504: POP
41505: POP
// result := Replace ( result , 4 , tmp ) ;
41506: LD_ADDR_VAR 0 5
41510: PUSH
41511: LD_VAR 0 5
41515: PPUSH
41516: LD_INT 4
41518: PPUSH
41519: LD_VAR 0 8
41523: PPUSH
41524: CALL_OW 1
41528: ST_TO_ADDR
// end ;
41529: LD_VAR 0 5
41533: RET
// export function DangerAtRange ( unit , range ) ; begin
41534: LD_INT 0
41536: PPUSH
// if not unit then
41537: LD_VAR 0 1
41541: NOT
41542: IFFALSE 41546
// exit ;
41544: GO 41591
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41546: LD_ADDR_VAR 0 3
41550: PUSH
41551: LD_VAR 0 1
41555: PPUSH
41556: CALL_OW 255
41560: PPUSH
41561: LD_VAR 0 1
41565: PPUSH
41566: CALL_OW 250
41570: PPUSH
41571: LD_VAR 0 1
41575: PPUSH
41576: CALL_OW 251
41580: PPUSH
41581: LD_VAR 0 2
41585: PPUSH
41586: CALL 39825 0 4
41590: ST_TO_ADDR
// end ;
41591: LD_VAR 0 3
41595: RET
// export function DangerInArea ( side , area ) ; begin
41596: LD_INT 0
41598: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41599: LD_ADDR_VAR 0 3
41603: PUSH
41604: LD_VAR 0 2
41608: PPUSH
41609: LD_INT 81
41611: PUSH
41612: LD_VAR 0 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PPUSH
41621: CALL_OW 70
41625: ST_TO_ADDR
// end ;
41626: LD_VAR 0 3
41630: RET
// export function IsExtension ( b ) ; begin
41631: LD_INT 0
41633: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41634: LD_ADDR_VAR 0 2
41638: PUSH
41639: LD_VAR 0 1
41643: PUSH
41644: LD_INT 23
41646: PUSH
41647: LD_INT 20
41649: PUSH
41650: LD_INT 22
41652: PUSH
41653: LD_INT 17
41655: PUSH
41656: LD_INT 24
41658: PUSH
41659: LD_INT 21
41661: PUSH
41662: LD_INT 19
41664: PUSH
41665: LD_INT 16
41667: PUSH
41668: LD_INT 25
41670: PUSH
41671: LD_INT 18
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: IN
41686: ST_TO_ADDR
// end ;
41687: LD_VAR 0 2
41691: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41692: LD_INT 0
41694: PPUSH
41695: PPUSH
41696: PPUSH
// result := [ ] ;
41697: LD_ADDR_VAR 0 4
41701: PUSH
41702: EMPTY
41703: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41704: LD_ADDR_VAR 0 5
41708: PUSH
41709: LD_VAR 0 2
41713: PPUSH
41714: LD_INT 21
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PPUSH
41724: CALL_OW 70
41728: ST_TO_ADDR
// if not tmp then
41729: LD_VAR 0 5
41733: NOT
41734: IFFALSE 41738
// exit ;
41736: GO 41802
// if checkLink then
41738: LD_VAR 0 3
41742: IFFALSE 41792
// begin for i in tmp do
41744: LD_ADDR_VAR 0 6
41748: PUSH
41749: LD_VAR 0 5
41753: PUSH
41754: FOR_IN
41755: IFFALSE 41790
// if GetBase ( i ) <> base then
41757: LD_VAR 0 6
41761: PPUSH
41762: CALL_OW 274
41766: PUSH
41767: LD_VAR 0 1
41771: NONEQUAL
41772: IFFALSE 41788
// ComLinkToBase ( base , i ) ;
41774: LD_VAR 0 1
41778: PPUSH
41779: LD_VAR 0 6
41783: PPUSH
41784: CALL_OW 169
41788: GO 41754
41790: POP
41791: POP
// end ; result := tmp ;
41792: LD_ADDR_VAR 0 4
41796: PUSH
41797: LD_VAR 0 5
41801: ST_TO_ADDR
// end ;
41802: LD_VAR 0 4
41806: RET
// export function ComComplete ( units , b ) ; var i ; begin
41807: LD_INT 0
41809: PPUSH
41810: PPUSH
// if not units then
41811: LD_VAR 0 1
41815: NOT
41816: IFFALSE 41820
// exit ;
41818: GO 41910
// for i in units do
41820: LD_ADDR_VAR 0 4
41824: PUSH
41825: LD_VAR 0 1
41829: PUSH
41830: FOR_IN
41831: IFFALSE 41908
// if BuildingStatus ( b ) = bs_build then
41833: LD_VAR 0 2
41837: PPUSH
41838: CALL_OW 461
41842: PUSH
41843: LD_INT 1
41845: EQUAL
41846: IFFALSE 41906
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41848: LD_VAR 0 4
41852: PPUSH
41853: LD_STRING h
41855: PUSH
41856: LD_VAR 0 2
41860: PPUSH
41861: CALL_OW 250
41865: PUSH
41866: LD_VAR 0 2
41870: PPUSH
41871: CALL_OW 251
41875: PUSH
41876: LD_VAR 0 2
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: PUSH
41899: EMPTY
41900: LIST
41901: PPUSH
41902: CALL_OW 446
41906: GO 41830
41908: POP
41909: POP
// end ;
41910: LD_VAR 0 3
41914: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41915: LD_INT 0
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41923: LD_VAR 0 1
41927: NOT
41928: IFTRUE 41945
41930: PUSH
41931: LD_VAR 0 1
41935: PPUSH
41936: CALL_OW 263
41940: PUSH
41941: LD_INT 2
41943: NONEQUAL
41944: OR
41945: IFFALSE 41949
// exit ;
41947: GO 42265
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41949: LD_ADDR_VAR 0 6
41953: PUSH
41954: LD_INT 22
41956: PUSH
41957: LD_VAR 0 1
41961: PPUSH
41962: CALL_OW 255
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 30
41976: PUSH
41977: LD_INT 36
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 34
41986: PUSH
41987: LD_INT 31
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PPUSH
42003: CALL_OW 69
42007: ST_TO_ADDR
// if not tmp then
42008: LD_VAR 0 6
42012: NOT
42013: IFFALSE 42017
// exit ;
42015: GO 42265
// result := [ ] ;
42017: LD_ADDR_VAR 0 2
42021: PUSH
42022: EMPTY
42023: ST_TO_ADDR
// for i in tmp do
42024: LD_ADDR_VAR 0 3
42028: PUSH
42029: LD_VAR 0 6
42033: PUSH
42034: FOR_IN
42035: IFFALSE 42106
// begin t := UnitsInside ( i ) ;
42037: LD_ADDR_VAR 0 4
42041: PUSH
42042: LD_VAR 0 3
42046: PPUSH
42047: CALL_OW 313
42051: ST_TO_ADDR
// if t then
42052: LD_VAR 0 4
42056: IFFALSE 42104
// for j in t do
42058: LD_ADDR_VAR 0 7
42062: PUSH
42063: LD_VAR 0 4
42067: PUSH
42068: FOR_IN
42069: IFFALSE 42102
// result := Replace ( result , result + 1 , j ) ;
42071: LD_ADDR_VAR 0 2
42075: PUSH
42076: LD_VAR 0 2
42080: PPUSH
42081: LD_VAR 0 2
42085: PUSH
42086: LD_INT 1
42088: PLUS
42089: PPUSH
42090: LD_VAR 0 7
42094: PPUSH
42095: CALL_OW 1
42099: ST_TO_ADDR
42100: GO 42068
42102: POP
42103: POP
// end ;
42104: GO 42034
42106: POP
42107: POP
// if not result then
42108: LD_VAR 0 2
42112: NOT
42113: IFFALSE 42117
// exit ;
42115: GO 42265
// mech := result [ 1 ] ;
42117: LD_ADDR_VAR 0 5
42121: PUSH
42122: LD_VAR 0 2
42126: PUSH
42127: LD_INT 1
42129: ARRAY
42130: ST_TO_ADDR
// if result > 1 then
42131: LD_VAR 0 2
42135: PUSH
42136: LD_INT 1
42138: GREATER
42139: IFFALSE 42251
// begin for i = 2 to result do
42141: LD_ADDR_VAR 0 3
42145: PUSH
42146: DOUBLE
42147: LD_INT 2
42149: DEC
42150: ST_TO_ADDR
42151: LD_VAR 0 2
42155: PUSH
42156: FOR_TO
42157: IFFALSE 42249
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42159: LD_ADDR_VAR 0 4
42163: PUSH
42164: LD_VAR 0 2
42168: PUSH
42169: LD_VAR 0 3
42173: ARRAY
42174: PPUSH
42175: LD_INT 3
42177: PPUSH
42178: CALL_OW 259
42182: PUSH
42183: LD_VAR 0 2
42187: PUSH
42188: LD_VAR 0 3
42192: ARRAY
42193: PPUSH
42194: CALL_OW 432
42198: MINUS
42199: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42200: LD_VAR 0 4
42204: PUSH
42205: LD_VAR 0 5
42209: PPUSH
42210: LD_INT 3
42212: PPUSH
42213: CALL_OW 259
42217: PUSH
42218: LD_VAR 0 5
42222: PPUSH
42223: CALL_OW 432
42227: MINUS
42228: GREATEREQUAL
42229: IFFALSE 42247
// mech := result [ i ] ;
42231: LD_ADDR_VAR 0 5
42235: PUSH
42236: LD_VAR 0 2
42240: PUSH
42241: LD_VAR 0 3
42245: ARRAY
42246: ST_TO_ADDR
// end ;
42247: GO 42156
42249: POP
42250: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42251: LD_VAR 0 1
42255: PPUSH
42256: LD_VAR 0 5
42260: PPUSH
42261: CALL_OW 135
// end ;
42265: LD_VAR 0 2
42269: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42270: LD_INT 0
42272: PPUSH
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
42280: PPUSH
42281: PPUSH
42282: PPUSH
42283: PPUSH
42284: PPUSH
// result := [ ] ;
42285: LD_ADDR_VAR 0 7
42289: PUSH
42290: EMPTY
42291: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42292: LD_VAR 0 1
42296: PPUSH
42297: CALL_OW 266
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: IN
42312: NOT
42313: IFFALSE 42317
// exit ;
42315: GO 43957
// if name then
42317: LD_VAR 0 3
42321: IFFALSE 42337
// SetBName ( base_dep , name ) ;
42323: LD_VAR 0 1
42327: PPUSH
42328: LD_VAR 0 3
42332: PPUSH
42333: CALL_OW 500
// base := GetBase ( base_dep ) ;
42337: LD_ADDR_VAR 0 15
42341: PUSH
42342: LD_VAR 0 1
42346: PPUSH
42347: CALL_OW 274
42351: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42352: LD_ADDR_VAR 0 16
42356: PUSH
42357: LD_VAR 0 1
42361: PPUSH
42362: CALL_OW 255
42366: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42367: LD_ADDR_VAR 0 17
42371: PUSH
42372: LD_VAR 0 1
42376: PPUSH
42377: CALL_OW 248
42381: ST_TO_ADDR
// if sources then
42382: LD_VAR 0 5
42386: IFFALSE 42433
// for i = 1 to 3 do
42388: LD_ADDR_VAR 0 8
42392: PUSH
42393: DOUBLE
42394: LD_INT 1
42396: DEC
42397: ST_TO_ADDR
42398: LD_INT 3
42400: PUSH
42401: FOR_TO
42402: IFFALSE 42431
// AddResourceType ( base , i , sources [ i ] ) ;
42404: LD_VAR 0 15
42408: PPUSH
42409: LD_VAR 0 8
42413: PPUSH
42414: LD_VAR 0 5
42418: PUSH
42419: LD_VAR 0 8
42423: ARRAY
42424: PPUSH
42425: CALL_OW 276
42429: GO 42401
42431: POP
42432: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42433: LD_ADDR_VAR 0 18
42437: PUSH
42438: LD_VAR 0 15
42442: PPUSH
42443: LD_VAR 0 2
42447: PPUSH
42448: LD_INT 1
42450: PPUSH
42451: CALL 41692 0 3
42455: ST_TO_ADDR
// InitHc ;
42456: CALL_OW 19
// InitUc ;
42460: CALL_OW 18
// uc_side := side ;
42464: LD_ADDR_OWVAR 20
42468: PUSH
42469: LD_VAR 0 16
42473: ST_TO_ADDR
// uc_nation := nation ;
42474: LD_ADDR_OWVAR 21
42478: PUSH
42479: LD_VAR 0 17
42483: ST_TO_ADDR
// if buildings then
42484: LD_VAR 0 18
42488: IFFALSE 43816
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42490: LD_ADDR_VAR 0 19
42494: PUSH
42495: LD_VAR 0 18
42499: PPUSH
42500: LD_INT 2
42502: PUSH
42503: LD_INT 30
42505: PUSH
42506: LD_INT 29
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 30
42515: PUSH
42516: LD_INT 30
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: PPUSH
42528: CALL_OW 72
42532: ST_TO_ADDR
// if tmp then
42533: LD_VAR 0 19
42537: IFFALSE 42585
// for i in tmp do
42539: LD_ADDR_VAR 0 8
42543: PUSH
42544: LD_VAR 0 19
42548: PUSH
42549: FOR_IN
42550: IFFALSE 42583
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42552: LD_VAR 0 8
42556: PPUSH
42557: CALL_OW 250
42561: PPUSH
42562: LD_VAR 0 8
42566: PPUSH
42567: CALL_OW 251
42571: PPUSH
42572: LD_VAR 0 16
42576: PPUSH
42577: CALL_OW 441
42581: GO 42549
42583: POP
42584: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42585: LD_VAR 0 18
42589: PPUSH
42590: LD_INT 2
42592: PUSH
42593: LD_INT 30
42595: PUSH
42596: LD_INT 32
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 30
42605: PUSH
42606: LD_INT 33
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: PPUSH
42618: CALL_OW 72
42622: IFFALSE 42710
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42624: LD_ADDR_VAR 0 8
42628: PUSH
42629: LD_VAR 0 18
42633: PPUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 30
42639: PUSH
42640: LD_INT 32
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 30
42649: PUSH
42650: LD_INT 33
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: PPUSH
42662: CALL_OW 72
42666: PUSH
42667: FOR_IN
42668: IFFALSE 42708
// begin if not GetBWeapon ( i ) then
42670: LD_VAR 0 8
42674: PPUSH
42675: CALL_OW 269
42679: NOT
42680: IFFALSE 42706
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42682: LD_VAR 0 8
42686: PPUSH
42687: LD_VAR 0 8
42691: PPUSH
42692: LD_VAR 0 2
42696: PPUSH
42697: CALL 43962 0 2
42701: PPUSH
42702: CALL_OW 431
// end ;
42706: GO 42667
42708: POP
42709: POP
// end ; for i = 1 to personel do
42710: LD_ADDR_VAR 0 8
42714: PUSH
42715: DOUBLE
42716: LD_INT 1
42718: DEC
42719: ST_TO_ADDR
42720: LD_VAR 0 6
42724: PUSH
42725: FOR_TO
42726: IFFALSE 43796
// begin if i > 4 then
42728: LD_VAR 0 8
42732: PUSH
42733: LD_INT 4
42735: GREATER
42736: IFFALSE 42740
// break ;
42738: GO 43796
// case i of 1 :
42740: LD_VAR 0 8
42744: PUSH
42745: LD_INT 1
42747: DOUBLE
42748: EQUAL
42749: IFTRUE 42753
42751: GO 42833
42753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42754: LD_ADDR_VAR 0 12
42758: PUSH
42759: LD_VAR 0 18
42763: PPUSH
42764: LD_INT 22
42766: PUSH
42767: LD_VAR 0 16
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 58
42778: PUSH
42779: EMPTY
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 30
42787: PUSH
42788: LD_INT 32
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 30
42797: PUSH
42798: LD_INT 4
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 30
42807: PUSH
42808: LD_INT 5
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: PPUSH
42826: CALL_OW 72
42830: ST_TO_ADDR
42831: GO 43055
42833: LD_INT 2
42835: DOUBLE
42836: EQUAL
42837: IFTRUE 42841
42839: GO 42903
42841: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42842: LD_ADDR_VAR 0 12
42846: PUSH
42847: LD_VAR 0 18
42851: PPUSH
42852: LD_INT 22
42854: PUSH
42855: LD_VAR 0 16
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: LD_INT 30
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 30
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: LIST
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PPUSH
42896: CALL_OW 72
42900: ST_TO_ADDR
42901: GO 43055
42903: LD_INT 3
42905: DOUBLE
42906: EQUAL
42907: IFTRUE 42911
42909: GO 42973
42911: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42912: LD_ADDR_VAR 0 12
42916: PUSH
42917: LD_VAR 0 18
42921: PPUSH
42922: LD_INT 22
42924: PUSH
42925: LD_VAR 0 16
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: LD_INT 30
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 30
42949: PUSH
42950: LD_INT 3
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PPUSH
42966: CALL_OW 72
42970: ST_TO_ADDR
42971: GO 43055
42973: LD_INT 4
42975: DOUBLE
42976: EQUAL
42977: IFTRUE 42981
42979: GO 43054
42981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42982: LD_ADDR_VAR 0 12
42986: PUSH
42987: LD_VAR 0 18
42991: PPUSH
42992: LD_INT 22
42994: PUSH
42995: LD_VAR 0 16
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 30
43009: PUSH
43010: LD_INT 6
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 30
43019: PUSH
43020: LD_INT 7
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 30
43029: PUSH
43030: LD_INT 8
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PPUSH
43047: CALL_OW 72
43051: ST_TO_ADDR
43052: GO 43055
43054: POP
// if i = 1 then
43055: LD_VAR 0 8
43059: PUSH
43060: LD_INT 1
43062: EQUAL
43063: IFFALSE 43174
// begin tmp := [ ] ;
43065: LD_ADDR_VAR 0 19
43069: PUSH
43070: EMPTY
43071: ST_TO_ADDR
// for j in f do
43072: LD_ADDR_VAR 0 9
43076: PUSH
43077: LD_VAR 0 12
43081: PUSH
43082: FOR_IN
43083: IFFALSE 43156
// if GetBType ( j ) = b_bunker then
43085: LD_VAR 0 9
43089: PPUSH
43090: CALL_OW 266
43094: PUSH
43095: LD_INT 32
43097: EQUAL
43098: IFFALSE 43125
// tmp := Insert ( tmp , 1 , j ) else
43100: LD_ADDR_VAR 0 19
43104: PUSH
43105: LD_VAR 0 19
43109: PPUSH
43110: LD_INT 1
43112: PPUSH
43113: LD_VAR 0 9
43117: PPUSH
43118: CALL_OW 2
43122: ST_TO_ADDR
43123: GO 43154
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43125: LD_ADDR_VAR 0 19
43129: PUSH
43130: LD_VAR 0 19
43134: PPUSH
43135: LD_VAR 0 19
43139: PUSH
43140: LD_INT 1
43142: PLUS
43143: PPUSH
43144: LD_VAR 0 9
43148: PPUSH
43149: CALL_OW 2
43153: ST_TO_ADDR
43154: GO 43082
43156: POP
43157: POP
// if tmp then
43158: LD_VAR 0 19
43162: IFFALSE 43174
// f := tmp ;
43164: LD_ADDR_VAR 0 12
43168: PUSH
43169: LD_VAR 0 19
43173: ST_TO_ADDR
// end ; x := personel [ i ] ;
43174: LD_ADDR_VAR 0 13
43178: PUSH
43179: LD_VAR 0 6
43183: PUSH
43184: LD_VAR 0 8
43188: ARRAY
43189: ST_TO_ADDR
// if x = - 1 then
43190: LD_VAR 0 13
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: EQUAL
43199: IFFALSE 43410
// begin for j in f do
43201: LD_ADDR_VAR 0 9
43205: PUSH
43206: LD_VAR 0 12
43210: PUSH
43211: FOR_IN
43212: IFFALSE 43406
// repeat InitHc ;
43214: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43218: LD_VAR 0 9
43222: PPUSH
43223: CALL_OW 266
43227: PUSH
43228: LD_INT 5
43230: EQUAL
43231: IFFALSE 43301
// begin if UnitsInside ( j ) < 3 then
43233: LD_VAR 0 9
43237: PPUSH
43238: CALL_OW 313
43242: PUSH
43243: LD_INT 3
43245: LESS
43246: IFFALSE 43282
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43248: LD_INT 0
43250: PPUSH
43251: LD_INT 5
43253: PUSH
43254: LD_INT 8
43256: PUSH
43257: LD_INT 9
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: PUSH
43265: LD_VAR 0 17
43269: ARRAY
43270: PPUSH
43271: LD_VAR 0 4
43275: PPUSH
43276: CALL_OW 380
43280: GO 43299
// PrepareHuman ( false , i , skill ) ;
43282: LD_INT 0
43284: PPUSH
43285: LD_VAR 0 8
43289: PPUSH
43290: LD_VAR 0 4
43294: PPUSH
43295: CALL_OW 380
// end else
43299: GO 43318
// PrepareHuman ( false , i , skill ) ;
43301: LD_INT 0
43303: PPUSH
43304: LD_VAR 0 8
43308: PPUSH
43309: LD_VAR 0 4
43313: PPUSH
43314: CALL_OW 380
// un := CreateHuman ;
43318: LD_ADDR_VAR 0 14
43322: PUSH
43323: CALL_OW 44
43327: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43328: LD_ADDR_VAR 0 7
43332: PUSH
43333: LD_VAR 0 7
43337: PPUSH
43338: LD_INT 1
43340: PPUSH
43341: LD_VAR 0 14
43345: PPUSH
43346: CALL_OW 2
43350: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43351: LD_VAR 0 14
43355: PPUSH
43356: LD_VAR 0 9
43360: PPUSH
43361: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43365: LD_VAR 0 9
43369: PPUSH
43370: CALL_OW 313
43374: PUSH
43375: LD_INT 6
43377: EQUAL
43378: IFTRUE 43402
43380: PUSH
43381: LD_VAR 0 9
43385: PPUSH
43386: CALL_OW 266
43390: PUSH
43391: LD_INT 32
43393: PUSH
43394: LD_INT 31
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: IN
43401: OR
43402: IFFALSE 43214
43404: GO 43211
43406: POP
43407: POP
// end else
43408: GO 43794
// for j = 1 to x do
43410: LD_ADDR_VAR 0 9
43414: PUSH
43415: DOUBLE
43416: LD_INT 1
43418: DEC
43419: ST_TO_ADDR
43420: LD_VAR 0 13
43424: PUSH
43425: FOR_TO
43426: IFFALSE 43792
// begin InitHc ;
43428: CALL_OW 19
// if not f then
43432: LD_VAR 0 12
43436: NOT
43437: IFFALSE 43526
// begin PrepareHuman ( false , i , skill ) ;
43439: LD_INT 0
43441: PPUSH
43442: LD_VAR 0 8
43446: PPUSH
43447: LD_VAR 0 4
43451: PPUSH
43452: CALL_OW 380
// un := CreateHuman ;
43456: LD_ADDR_VAR 0 14
43460: PUSH
43461: CALL_OW 44
43465: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43466: LD_ADDR_VAR 0 7
43470: PUSH
43471: LD_VAR 0 7
43475: PPUSH
43476: LD_INT 1
43478: PPUSH
43479: LD_VAR 0 14
43483: PPUSH
43484: CALL_OW 2
43488: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43489: LD_VAR 0 14
43493: PPUSH
43494: LD_VAR 0 1
43498: PPUSH
43499: CALL_OW 250
43503: PPUSH
43504: LD_VAR 0 1
43508: PPUSH
43509: CALL_OW 251
43513: PPUSH
43514: LD_INT 10
43516: PPUSH
43517: LD_INT 0
43519: PPUSH
43520: CALL_OW 50
// continue ;
43524: GO 43425
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43526: LD_VAR 0 12
43530: PUSH
43531: LD_INT 1
43533: ARRAY
43534: PPUSH
43535: CALL_OW 313
43539: IFFALSE 43567
43541: PUSH
43542: LD_VAR 0 12
43546: PUSH
43547: LD_INT 1
43549: ARRAY
43550: PPUSH
43551: CALL_OW 266
43555: PUSH
43556: LD_INT 32
43558: PUSH
43559: LD_INT 31
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: IN
43566: AND
43567: IFTRUE 43588
43569: PUSH
43570: LD_VAR 0 12
43574: PUSH
43575: LD_INT 1
43577: ARRAY
43578: PPUSH
43579: CALL_OW 313
43583: PUSH
43584: LD_INT 6
43586: EQUAL
43587: OR
43588: IFFALSE 43608
// f := Delete ( f , 1 ) ;
43590: LD_ADDR_VAR 0 12
43594: PUSH
43595: LD_VAR 0 12
43599: PPUSH
43600: LD_INT 1
43602: PPUSH
43603: CALL_OW 3
43607: ST_TO_ADDR
// if not f then
43608: LD_VAR 0 12
43612: NOT
43613: IFFALSE 43631
// begin x := x + 2 ;
43615: LD_ADDR_VAR 0 13
43619: PUSH
43620: LD_VAR 0 13
43624: PUSH
43625: LD_INT 2
43627: PLUS
43628: ST_TO_ADDR
// continue ;
43629: GO 43425
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43631: LD_VAR 0 12
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PPUSH
43640: CALL_OW 266
43644: PUSH
43645: LD_INT 5
43647: EQUAL
43648: IFFALSE 43722
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43650: LD_VAR 0 12
43654: PUSH
43655: LD_INT 1
43657: ARRAY
43658: PPUSH
43659: CALL_OW 313
43663: PUSH
43664: LD_INT 3
43666: LESS
43667: IFFALSE 43703
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43669: LD_INT 0
43671: PPUSH
43672: LD_INT 5
43674: PUSH
43675: LD_INT 8
43677: PUSH
43678: LD_INT 9
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: LIST
43685: PUSH
43686: LD_VAR 0 17
43690: ARRAY
43691: PPUSH
43692: LD_VAR 0 4
43696: PPUSH
43697: CALL_OW 380
43701: GO 43720
// PrepareHuman ( false , i , skill ) ;
43703: LD_INT 0
43705: PPUSH
43706: LD_VAR 0 8
43710: PPUSH
43711: LD_VAR 0 4
43715: PPUSH
43716: CALL_OW 380
// end else
43720: GO 43739
// PrepareHuman ( false , i , skill ) ;
43722: LD_INT 0
43724: PPUSH
43725: LD_VAR 0 8
43729: PPUSH
43730: LD_VAR 0 4
43734: PPUSH
43735: CALL_OW 380
// un := CreateHuman ;
43739: LD_ADDR_VAR 0 14
43743: PUSH
43744: CALL_OW 44
43748: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43749: LD_ADDR_VAR 0 7
43753: PUSH
43754: LD_VAR 0 7
43758: PPUSH
43759: LD_INT 1
43761: PPUSH
43762: LD_VAR 0 14
43766: PPUSH
43767: CALL_OW 2
43771: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43772: LD_VAR 0 14
43776: PPUSH
43777: LD_VAR 0 12
43781: PUSH
43782: LD_INT 1
43784: ARRAY
43785: PPUSH
43786: CALL_OW 52
// end ;
43790: GO 43425
43792: POP
43793: POP
// end ;
43794: GO 42725
43796: POP
43797: POP
// result := result ^ buildings ;
43798: LD_ADDR_VAR 0 7
43802: PUSH
43803: LD_VAR 0 7
43807: PUSH
43808: LD_VAR 0 18
43812: ADD
43813: ST_TO_ADDR
// end else
43814: GO 43957
// begin for i = 1 to personel do
43816: LD_ADDR_VAR 0 8
43820: PUSH
43821: DOUBLE
43822: LD_INT 1
43824: DEC
43825: ST_TO_ADDR
43826: LD_VAR 0 6
43830: PUSH
43831: FOR_TO
43832: IFFALSE 43955
// begin if i > 4 then
43834: LD_VAR 0 8
43838: PUSH
43839: LD_INT 4
43841: GREATER
43842: IFFALSE 43846
// break ;
43844: GO 43955
// x := personel [ i ] ;
43846: LD_ADDR_VAR 0 13
43850: PUSH
43851: LD_VAR 0 6
43855: PUSH
43856: LD_VAR 0 8
43860: ARRAY
43861: ST_TO_ADDR
// if x = - 1 then
43862: LD_VAR 0 13
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: EQUAL
43871: IFFALSE 43875
// continue ;
43873: GO 43831
// PrepareHuman ( false , i , skill ) ;
43875: LD_INT 0
43877: PPUSH
43878: LD_VAR 0 8
43882: PPUSH
43883: LD_VAR 0 4
43887: PPUSH
43888: CALL_OW 380
// un := CreateHuman ;
43892: LD_ADDR_VAR 0 14
43896: PUSH
43897: CALL_OW 44
43901: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43902: LD_VAR 0 14
43906: PPUSH
43907: LD_VAR 0 1
43911: PPUSH
43912: CALL_OW 250
43916: PPUSH
43917: LD_VAR 0 1
43921: PPUSH
43922: CALL_OW 251
43926: PPUSH
43927: LD_INT 10
43929: PPUSH
43930: LD_INT 0
43932: PPUSH
43933: CALL_OW 50
// result := result ^ un ;
43937: LD_ADDR_VAR 0 7
43941: PUSH
43942: LD_VAR 0 7
43946: PUSH
43947: LD_VAR 0 14
43951: ADD
43952: ST_TO_ADDR
// end ;
43953: GO 43831
43955: POP
43956: POP
// end ; end ;
43957: LD_VAR 0 7
43961: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43962: LD_INT 0
43964: PPUSH
43965: PPUSH
43966: PPUSH
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
// result := false ;
43980: LD_ADDR_VAR 0 3
43984: PUSH
43985: LD_INT 0
43987: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43988: LD_VAR 0 1
43992: NOT
43993: IFTRUE 44018
43995: PUSH
43996: LD_VAR 0 1
44000: PPUSH
44001: CALL_OW 266
44005: PUSH
44006: LD_INT 32
44008: PUSH
44009: LD_INT 33
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: IN
44016: NOT
44017: OR
44018: IFFALSE 44022
// exit ;
44020: GO 45157
// nat := GetNation ( tower ) ;
44022: LD_ADDR_VAR 0 12
44026: PUSH
44027: LD_VAR 0 1
44031: PPUSH
44032: CALL_OW 248
44036: ST_TO_ADDR
// side := GetSide ( tower ) ;
44037: LD_ADDR_VAR 0 16
44041: PUSH
44042: LD_VAR 0 1
44046: PPUSH
44047: CALL_OW 255
44051: ST_TO_ADDR
// x := GetX ( tower ) ;
44052: LD_ADDR_VAR 0 10
44056: PUSH
44057: LD_VAR 0 1
44061: PPUSH
44062: CALL_OW 250
44066: ST_TO_ADDR
// y := GetY ( tower ) ;
44067: LD_ADDR_VAR 0 11
44071: PUSH
44072: LD_VAR 0 1
44076: PPUSH
44077: CALL_OW 251
44081: ST_TO_ADDR
// if not x or not y then
44082: LD_VAR 0 10
44086: NOT
44087: IFTRUE 44096
44089: PUSH
44090: LD_VAR 0 11
44094: NOT
44095: OR
44096: IFFALSE 44100
// exit ;
44098: GO 45157
// weapon := 0 ;
44100: LD_ADDR_VAR 0 18
44104: PUSH
44105: LD_INT 0
44107: ST_TO_ADDR
// fac_list := [ ] ;
44108: LD_ADDR_VAR 0 17
44112: PUSH
44113: EMPTY
44114: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44115: LD_ADDR_VAR 0 6
44119: PUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: CALL_OW 274
44129: PPUSH
44130: LD_VAR 0 2
44134: PPUSH
44135: LD_INT 0
44137: PPUSH
44138: CALL 41692 0 3
44142: PPUSH
44143: LD_INT 30
44145: PUSH
44146: LD_INT 3
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PPUSH
44153: CALL_OW 72
44157: ST_TO_ADDR
// if not factories then
44158: LD_VAR 0 6
44162: NOT
44163: IFFALSE 44167
// exit ;
44165: GO 45157
// for i in factories do
44167: LD_ADDR_VAR 0 8
44171: PUSH
44172: LD_VAR 0 6
44176: PUSH
44177: FOR_IN
44178: IFFALSE 44203
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44180: LD_ADDR_VAR 0 17
44184: PUSH
44185: LD_VAR 0 17
44189: PUSH
44190: LD_VAR 0 8
44194: PPUSH
44195: CALL_OW 478
44199: UNION
44200: ST_TO_ADDR
44201: GO 44177
44203: POP
44204: POP
// if not fac_list then
44205: LD_VAR 0 17
44209: NOT
44210: IFFALSE 44214
// exit ;
44212: GO 45157
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44214: LD_ADDR_VAR 0 5
44218: PUSH
44219: LD_INT 4
44221: PUSH
44222: LD_INT 5
44224: PUSH
44225: LD_INT 9
44227: PUSH
44228: LD_INT 10
44230: PUSH
44231: LD_INT 6
44233: PUSH
44234: LD_INT 7
44236: PUSH
44237: LD_INT 11
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 27
44251: PUSH
44252: LD_INT 28
44254: PUSH
44255: LD_INT 26
44257: PUSH
44258: LD_INT 30
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 43
44269: PUSH
44270: LD_INT 44
44272: PUSH
44273: LD_INT 46
44275: PUSH
44276: LD_INT 45
44278: PUSH
44279: LD_INT 47
44281: PUSH
44282: LD_INT 49
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: LIST
44297: PUSH
44298: LD_VAR 0 12
44302: ARRAY
44303: ST_TO_ADDR
// list := list isect fac_list ;
44304: LD_ADDR_VAR 0 5
44308: PUSH
44309: LD_VAR 0 5
44313: PUSH
44314: LD_VAR 0 17
44318: ISECT
44319: ST_TO_ADDR
// if not list then
44320: LD_VAR 0 5
44324: NOT
44325: IFFALSE 44329
// exit ;
44327: GO 45157
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44329: LD_VAR 0 12
44333: PUSH
44334: LD_INT 3
44336: EQUAL
44337: IFFALSE 44349
44339: PUSH
44340: LD_INT 49
44342: PUSH
44343: LD_VAR 0 5
44347: IN
44348: AND
44349: IFFALSE 44369
44351: PUSH
44352: LD_INT 31
44354: PPUSH
44355: LD_VAR 0 16
44359: PPUSH
44360: CALL_OW 321
44364: PUSH
44365: LD_INT 2
44367: EQUAL
44368: AND
44369: IFFALSE 44429
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44371: LD_INT 22
44373: PUSH
44374: LD_VAR 0 16
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 35
44385: PUSH
44386: LD_INT 49
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 91
44395: PUSH
44396: LD_VAR 0 1
44400: PUSH
44401: LD_INT 10
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: PPUSH
44414: CALL_OW 69
44418: NOT
44419: IFFALSE 44429
// weapon := ru_time_lapser ;
44421: LD_ADDR_VAR 0 18
44425: PUSH
44426: LD_INT 49
44428: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44429: LD_VAR 0 12
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: IN
44444: IFFALSE 44468
44446: PUSH
44447: LD_INT 11
44449: PUSH
44450: LD_VAR 0 5
44454: IN
44455: IFTRUE 44467
44457: PUSH
44458: LD_INT 30
44460: PUSH
44461: LD_VAR 0 5
44465: IN
44466: OR
44467: AND
44468: IFFALSE 44488
44470: PUSH
44471: LD_INT 6
44473: PPUSH
44474: LD_VAR 0 16
44478: PPUSH
44479: CALL_OW 321
44483: PUSH
44484: LD_INT 2
44486: EQUAL
44487: AND
44488: IFFALSE 44655
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44490: LD_INT 22
44492: PUSH
44493: LD_VAR 0 16
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: LD_INT 35
44507: PUSH
44508: LD_INT 11
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 35
44517: PUSH
44518: LD_INT 30
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 91
44532: PUSH
44533: LD_VAR 0 1
44537: PUSH
44538: LD_INT 18
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: PPUSH
44551: CALL_OW 69
44555: NOT
44556: IFFALSE 44632
44558: PUSH
44559: LD_INT 22
44561: PUSH
44562: LD_VAR 0 16
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 30
44576: PUSH
44577: LD_INT 32
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 30
44586: PUSH
44587: LD_INT 33
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 91
44601: PUSH
44602: LD_VAR 0 1
44606: PUSH
44607: LD_INT 12
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: PUSH
44620: EMPTY
44621: LIST
44622: PPUSH
44623: CALL_OW 69
44627: PUSH
44628: LD_INT 2
44630: GREATER
44631: AND
44632: IFFALSE 44655
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44634: LD_ADDR_VAR 0 18
44638: PUSH
44639: LD_INT 11
44641: PUSH
44642: LD_INT 30
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_VAR 0 12
44653: ARRAY
44654: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44655: LD_VAR 0 18
44659: NOT
44660: IFFALSE 44680
44662: PUSH
44663: LD_INT 40
44665: PPUSH
44666: LD_VAR 0 16
44670: PPUSH
44671: CALL_OW 321
44675: PUSH
44676: LD_INT 2
44678: EQUAL
44679: AND
44680: IFFALSE 44716
44682: PUSH
44683: LD_INT 7
44685: PUSH
44686: LD_VAR 0 5
44690: IN
44691: IFTRUE 44703
44693: PUSH
44694: LD_INT 28
44696: PUSH
44697: LD_VAR 0 5
44701: IN
44702: OR
44703: IFTRUE 44715
44705: PUSH
44706: LD_INT 45
44708: PUSH
44709: LD_VAR 0 5
44713: IN
44714: OR
44715: AND
44716: IFFALSE 44970
// begin hex := GetHexInfo ( x , y ) ;
44718: LD_ADDR_VAR 0 4
44722: PUSH
44723: LD_VAR 0 10
44727: PPUSH
44728: LD_VAR 0 11
44732: PPUSH
44733: CALL_OW 546
44737: ST_TO_ADDR
// if hex [ 1 ] then
44738: LD_VAR 0 4
44742: PUSH
44743: LD_INT 1
44745: ARRAY
44746: IFFALSE 44750
// exit ;
44748: GO 45157
// height := hex [ 2 ] ;
44750: LD_ADDR_VAR 0 15
44754: PUSH
44755: LD_VAR 0 4
44759: PUSH
44760: LD_INT 2
44762: ARRAY
44763: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44764: LD_ADDR_VAR 0 14
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 2
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: LD_INT 5
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: ST_TO_ADDR
// for i in tmp do
44787: LD_ADDR_VAR 0 8
44791: PUSH
44792: LD_VAR 0 14
44796: PUSH
44797: FOR_IN
44798: IFFALSE 44968
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44800: LD_ADDR_VAR 0 9
44804: PUSH
44805: LD_VAR 0 10
44809: PPUSH
44810: LD_VAR 0 8
44814: PPUSH
44815: LD_INT 5
44817: PPUSH
44818: CALL_OW 272
44822: PUSH
44823: LD_VAR 0 11
44827: PPUSH
44828: LD_VAR 0 8
44832: PPUSH
44833: LD_INT 5
44835: PPUSH
44836: CALL_OW 273
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44845: LD_VAR 0 9
44849: PUSH
44850: LD_INT 1
44852: ARRAY
44853: PPUSH
44854: LD_VAR 0 9
44858: PUSH
44859: LD_INT 2
44861: ARRAY
44862: PPUSH
44863: CALL_OW 488
44867: IFFALSE 44966
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44869: LD_ADDR_VAR 0 4
44873: PUSH
44874: LD_VAR 0 9
44878: PUSH
44879: LD_INT 1
44881: ARRAY
44882: PPUSH
44883: LD_VAR 0 9
44887: PUSH
44888: LD_INT 2
44890: ARRAY
44891: PPUSH
44892: CALL_OW 546
44896: ST_TO_ADDR
// if hex [ 1 ] then
44897: LD_VAR 0 4
44901: PUSH
44902: LD_INT 1
44904: ARRAY
44905: IFFALSE 44909
// continue ;
44907: GO 44797
// h := hex [ 2 ] ;
44909: LD_ADDR_VAR 0 13
44913: PUSH
44914: LD_VAR 0 4
44918: PUSH
44919: LD_INT 2
44921: ARRAY
44922: ST_TO_ADDR
// if h + 7 < height then
44923: LD_VAR 0 13
44927: PUSH
44928: LD_INT 7
44930: PLUS
44931: PUSH
44932: LD_VAR 0 15
44936: LESS
44937: IFFALSE 44966
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44939: LD_ADDR_VAR 0 18
44943: PUSH
44944: LD_INT 7
44946: PUSH
44947: LD_INT 28
44949: PUSH
44950: LD_INT 45
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: PUSH
44958: LD_VAR 0 12
44962: ARRAY
44963: ST_TO_ADDR
// break ;
44964: GO 44968
// end ; end ; end ;
44966: GO 44797
44968: POP
44969: POP
// end ; if not weapon then
44970: LD_VAR 0 18
44974: NOT
44975: IFFALSE 45035
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44977: LD_ADDR_VAR 0 5
44981: PUSH
44982: LD_VAR 0 5
44986: PUSH
44987: LD_INT 11
44989: PUSH
44990: LD_INT 30
44992: PUSH
44993: LD_INT 49
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: DIFF
45001: ST_TO_ADDR
// if not list then
45002: LD_VAR 0 5
45006: NOT
45007: IFFALSE 45011
// exit ;
45009: GO 45157
// weapon := list [ rand ( 1 , list ) ] ;
45011: LD_ADDR_VAR 0 18
45015: PUSH
45016: LD_VAR 0 5
45020: PUSH
45021: LD_INT 1
45023: PPUSH
45024: LD_VAR 0 5
45028: PPUSH
45029: CALL_OW 12
45033: ARRAY
45034: ST_TO_ADDR
// end ; if weapon then
45035: LD_VAR 0 18
45039: IFFALSE 45157
// begin tmp := CostOfWeapon ( weapon ) ;
45041: LD_ADDR_VAR 0 14
45045: PUSH
45046: LD_VAR 0 18
45050: PPUSH
45051: CALL_OW 451
45055: ST_TO_ADDR
// j := GetBase ( tower ) ;
45056: LD_ADDR_VAR 0 9
45060: PUSH
45061: LD_VAR 0 1
45065: PPUSH
45066: CALL_OW 274
45070: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45071: LD_VAR 0 9
45075: PPUSH
45076: LD_INT 1
45078: PPUSH
45079: CALL_OW 275
45083: PUSH
45084: LD_VAR 0 14
45088: PUSH
45089: LD_INT 1
45091: ARRAY
45092: GREATEREQUAL
45093: IFFALSE 45119
45095: PUSH
45096: LD_VAR 0 9
45100: PPUSH
45101: LD_INT 2
45103: PPUSH
45104: CALL_OW 275
45108: PUSH
45109: LD_VAR 0 14
45113: PUSH
45114: LD_INT 2
45116: ARRAY
45117: GREATEREQUAL
45118: AND
45119: IFFALSE 45145
45121: PUSH
45122: LD_VAR 0 9
45126: PPUSH
45127: LD_INT 3
45129: PPUSH
45130: CALL_OW 275
45134: PUSH
45135: LD_VAR 0 14
45139: PUSH
45140: LD_INT 3
45142: ARRAY
45143: GREATEREQUAL
45144: AND
45145: IFFALSE 45157
// result := weapon ;
45147: LD_ADDR_VAR 0 3
45151: PUSH
45152: LD_VAR 0 18
45156: ST_TO_ADDR
// end ; end ;
45157: LD_VAR 0 3
45161: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45162: LD_INT 0
45164: PPUSH
45165: PPUSH
// result := true ;
45166: LD_ADDR_VAR 0 3
45170: PUSH
45171: LD_INT 1
45173: ST_TO_ADDR
// if array1 = array2 then
45174: LD_VAR 0 1
45178: PUSH
45179: LD_VAR 0 2
45183: EQUAL
45184: IFFALSE 45244
// begin for i = 1 to array1 do
45186: LD_ADDR_VAR 0 4
45190: PUSH
45191: DOUBLE
45192: LD_INT 1
45194: DEC
45195: ST_TO_ADDR
45196: LD_VAR 0 1
45200: PUSH
45201: FOR_TO
45202: IFFALSE 45240
// if array1 [ i ] <> array2 [ i ] then
45204: LD_VAR 0 1
45208: PUSH
45209: LD_VAR 0 4
45213: ARRAY
45214: PUSH
45215: LD_VAR 0 2
45219: PUSH
45220: LD_VAR 0 4
45224: ARRAY
45225: NONEQUAL
45226: IFFALSE 45238
// begin result := false ;
45228: LD_ADDR_VAR 0 3
45232: PUSH
45233: LD_INT 0
45235: ST_TO_ADDR
// break ;
45236: GO 45240
// end ;
45238: GO 45201
45240: POP
45241: POP
// end else
45242: GO 45252
// result := false ;
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_INT 0
45251: ST_TO_ADDR
// end ;
45252: LD_VAR 0 3
45256: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45257: LD_INT 0
45259: PPUSH
45260: PPUSH
// if not array1 or not array2 then
45261: LD_VAR 0 1
45265: NOT
45266: IFTRUE 45275
45268: PUSH
45269: LD_VAR 0 2
45273: NOT
45274: OR
45275: IFFALSE 45279
// exit ;
45277: GO 45343
// result := true ;
45279: LD_ADDR_VAR 0 3
45283: PUSH
45284: LD_INT 1
45286: ST_TO_ADDR
// for i = 1 to array1 do
45287: LD_ADDR_VAR 0 4
45291: PUSH
45292: DOUBLE
45293: LD_INT 1
45295: DEC
45296: ST_TO_ADDR
45297: LD_VAR 0 1
45301: PUSH
45302: FOR_TO
45303: IFFALSE 45341
// if array1 [ i ] <> array2 [ i ] then
45305: LD_VAR 0 1
45309: PUSH
45310: LD_VAR 0 4
45314: ARRAY
45315: PUSH
45316: LD_VAR 0 2
45320: PUSH
45321: LD_VAR 0 4
45325: ARRAY
45326: NONEQUAL
45327: IFFALSE 45339
// begin result := false ;
45329: LD_ADDR_VAR 0 3
45333: PUSH
45334: LD_INT 0
45336: ST_TO_ADDR
// break ;
45337: GO 45341
// end ;
45339: GO 45302
45341: POP
45342: POP
// end ;
45343: LD_VAR 0 3
45347: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45348: LD_INT 0
45350: PPUSH
45351: PPUSH
45352: PPUSH
// pom := GetBase ( fac ) ;
45353: LD_ADDR_VAR 0 5
45357: PUSH
45358: LD_VAR 0 1
45362: PPUSH
45363: CALL_OW 274
45367: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45368: LD_ADDR_VAR 0 4
45372: PUSH
45373: LD_VAR 0 2
45377: PUSH
45378: LD_INT 1
45380: ARRAY
45381: PPUSH
45382: LD_VAR 0 2
45386: PUSH
45387: LD_INT 2
45389: ARRAY
45390: PPUSH
45391: LD_VAR 0 2
45395: PUSH
45396: LD_INT 3
45398: ARRAY
45399: PPUSH
45400: LD_VAR 0 2
45404: PUSH
45405: LD_INT 4
45407: ARRAY
45408: PPUSH
45409: CALL_OW 449
45413: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45414: LD_ADDR_VAR 0 3
45418: PUSH
45419: LD_VAR 0 5
45423: PPUSH
45424: LD_INT 1
45426: PPUSH
45427: CALL_OW 275
45431: PUSH
45432: LD_VAR 0 4
45436: PUSH
45437: LD_INT 1
45439: ARRAY
45440: GREATEREQUAL
45441: IFFALSE 45467
45443: PUSH
45444: LD_VAR 0 5
45448: PPUSH
45449: LD_INT 2
45451: PPUSH
45452: CALL_OW 275
45456: PUSH
45457: LD_VAR 0 4
45461: PUSH
45462: LD_INT 2
45464: ARRAY
45465: GREATEREQUAL
45466: AND
45467: IFFALSE 45493
45469: PUSH
45470: LD_VAR 0 5
45474: PPUSH
45475: LD_INT 3
45477: PPUSH
45478: CALL_OW 275
45482: PUSH
45483: LD_VAR 0 4
45487: PUSH
45488: LD_INT 3
45490: ARRAY
45491: GREATEREQUAL
45492: AND
45493: ST_TO_ADDR
// end ;
45494: LD_VAR 0 3
45498: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45499: LD_INT 0
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
// pom := GetBase ( building ) ;
45505: LD_ADDR_VAR 0 3
45509: PUSH
45510: LD_VAR 0 1
45514: PPUSH
45515: CALL_OW 274
45519: ST_TO_ADDR
// if not pom then
45520: LD_VAR 0 3
45524: NOT
45525: IFFALSE 45529
// exit ;
45527: GO 45703
// btype := GetBType ( building ) ;
45529: LD_ADDR_VAR 0 5
45533: PUSH
45534: LD_VAR 0 1
45538: PPUSH
45539: CALL_OW 266
45543: ST_TO_ADDR
// if btype = b_armoury then
45544: LD_VAR 0 5
45548: PUSH
45549: LD_INT 4
45551: EQUAL
45552: IFFALSE 45562
// btype := b_barracks ;
45554: LD_ADDR_VAR 0 5
45558: PUSH
45559: LD_INT 5
45561: ST_TO_ADDR
// if btype = b_depot then
45562: LD_VAR 0 5
45566: PUSH
45567: LD_INT 0
45569: EQUAL
45570: IFFALSE 45580
// btype := b_warehouse ;
45572: LD_ADDR_VAR 0 5
45576: PUSH
45577: LD_INT 1
45579: ST_TO_ADDR
// if btype = b_workshop then
45580: LD_VAR 0 5
45584: PUSH
45585: LD_INT 2
45587: EQUAL
45588: IFFALSE 45598
// btype := b_factory ;
45590: LD_ADDR_VAR 0 5
45594: PUSH
45595: LD_INT 3
45597: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45598: LD_ADDR_VAR 0 4
45602: PUSH
45603: LD_VAR 0 5
45607: PPUSH
45608: LD_VAR 0 1
45612: PPUSH
45613: CALL_OW 248
45617: PPUSH
45618: CALL_OW 450
45622: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45623: LD_ADDR_VAR 0 2
45627: PUSH
45628: LD_VAR 0 3
45632: PPUSH
45633: LD_INT 1
45635: PPUSH
45636: CALL_OW 275
45640: PUSH
45641: LD_VAR 0 4
45645: PUSH
45646: LD_INT 1
45648: ARRAY
45649: GREATEREQUAL
45650: IFFALSE 45676
45652: PUSH
45653: LD_VAR 0 3
45657: PPUSH
45658: LD_INT 2
45660: PPUSH
45661: CALL_OW 275
45665: PUSH
45666: LD_VAR 0 4
45670: PUSH
45671: LD_INT 2
45673: ARRAY
45674: GREATEREQUAL
45675: AND
45676: IFFALSE 45702
45678: PUSH
45679: LD_VAR 0 3
45683: PPUSH
45684: LD_INT 3
45686: PPUSH
45687: CALL_OW 275
45691: PUSH
45692: LD_VAR 0 4
45696: PUSH
45697: LD_INT 3
45699: ARRAY
45700: GREATEREQUAL
45701: AND
45702: ST_TO_ADDR
// end ;
45703: LD_VAR 0 2
45707: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45708: LD_INT 0
45710: PPUSH
45711: PPUSH
45712: PPUSH
// pom := GetBase ( building ) ;
45713: LD_ADDR_VAR 0 4
45717: PUSH
45718: LD_VAR 0 1
45722: PPUSH
45723: CALL_OW 274
45727: ST_TO_ADDR
// if not pom then
45728: LD_VAR 0 4
45732: NOT
45733: IFFALSE 45737
// exit ;
45735: GO 45842
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45737: LD_ADDR_VAR 0 5
45741: PUSH
45742: LD_VAR 0 2
45746: PPUSH
45747: LD_VAR 0 1
45751: PPUSH
45752: CALL_OW 248
45756: PPUSH
45757: CALL_OW 450
45761: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45762: LD_ADDR_VAR 0 3
45766: PUSH
45767: LD_VAR 0 4
45771: PPUSH
45772: LD_INT 1
45774: PPUSH
45775: CALL_OW 275
45779: PUSH
45780: LD_VAR 0 5
45784: PUSH
45785: LD_INT 1
45787: ARRAY
45788: GREATEREQUAL
45789: IFFALSE 45815
45791: PUSH
45792: LD_VAR 0 4
45796: PPUSH
45797: LD_INT 2
45799: PPUSH
45800: CALL_OW 275
45804: PUSH
45805: LD_VAR 0 5
45809: PUSH
45810: LD_INT 2
45812: ARRAY
45813: GREATEREQUAL
45814: AND
45815: IFFALSE 45841
45817: PUSH
45818: LD_VAR 0 4
45822: PPUSH
45823: LD_INT 3
45825: PPUSH
45826: CALL_OW 275
45830: PUSH
45831: LD_VAR 0 5
45835: PUSH
45836: LD_INT 3
45838: ARRAY
45839: GREATEREQUAL
45840: AND
45841: ST_TO_ADDR
// end ;
45842: LD_VAR 0 3
45846: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45847: LD_INT 0
45849: PPUSH
45850: PPUSH
45851: PPUSH
45852: PPUSH
45853: PPUSH
45854: PPUSH
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
// result := false ;
45860: LD_ADDR_VAR 0 8
45864: PUSH
45865: LD_INT 0
45867: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45868: LD_VAR 0 5
45872: NOT
45873: IFTRUE 45882
45875: PUSH
45876: LD_VAR 0 1
45880: NOT
45881: OR
45882: IFTRUE 45891
45884: PUSH
45885: LD_VAR 0 2
45889: NOT
45890: OR
45891: IFTRUE 45900
45893: PUSH
45894: LD_VAR 0 3
45898: NOT
45899: OR
45900: IFFALSE 45904
// exit ;
45902: GO 46730
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45904: LD_ADDR_VAR 0 14
45908: PUSH
45909: LD_VAR 0 1
45913: PPUSH
45914: LD_VAR 0 2
45918: PPUSH
45919: LD_VAR 0 3
45923: PPUSH
45924: LD_VAR 0 4
45928: PPUSH
45929: LD_VAR 0 5
45933: PUSH
45934: LD_INT 1
45936: ARRAY
45937: PPUSH
45938: CALL_OW 248
45942: PPUSH
45943: LD_INT 0
45945: PPUSH
45946: CALL 48011 0 6
45950: ST_TO_ADDR
// if not hexes then
45951: LD_VAR 0 14
45955: NOT
45956: IFFALSE 45960
// exit ;
45958: GO 46730
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45960: LD_ADDR_VAR 0 17
45964: PUSH
45965: LD_VAR 0 5
45969: PPUSH
45970: LD_INT 22
45972: PUSH
45973: LD_VAR 0 13
45977: PPUSH
45978: CALL_OW 255
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 30
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 30
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PPUSH
46019: CALL_OW 72
46023: ST_TO_ADDR
// for i = 1 to hexes do
46024: LD_ADDR_VAR 0 9
46028: PUSH
46029: DOUBLE
46030: LD_INT 1
46032: DEC
46033: ST_TO_ADDR
46034: LD_VAR 0 14
46038: PUSH
46039: FOR_TO
46040: IFFALSE 46728
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46042: LD_ADDR_VAR 0 13
46046: PUSH
46047: LD_VAR 0 14
46051: PUSH
46052: LD_VAR 0 9
46056: ARRAY
46057: PUSH
46058: LD_INT 1
46060: ARRAY
46061: PPUSH
46062: LD_VAR 0 14
46066: PUSH
46067: LD_VAR 0 9
46071: ARRAY
46072: PUSH
46073: LD_INT 2
46075: ARRAY
46076: PPUSH
46077: CALL_OW 428
46081: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46082: LD_VAR 0 14
46086: PUSH
46087: LD_VAR 0 9
46091: ARRAY
46092: PUSH
46093: LD_INT 1
46095: ARRAY
46096: PPUSH
46097: LD_VAR 0 14
46101: PUSH
46102: LD_VAR 0 9
46106: ARRAY
46107: PUSH
46108: LD_INT 2
46110: ARRAY
46111: PPUSH
46112: CALL_OW 351
46116: IFTRUE 46155
46118: PUSH
46119: LD_VAR 0 14
46123: PUSH
46124: LD_VAR 0 9
46128: ARRAY
46129: PUSH
46130: LD_INT 1
46132: ARRAY
46133: PPUSH
46134: LD_VAR 0 14
46138: PUSH
46139: LD_VAR 0 9
46143: ARRAY
46144: PUSH
46145: LD_INT 2
46147: ARRAY
46148: PPUSH
46149: CALL_OW 488
46153: NOT
46154: OR
46155: IFTRUE 46172
46157: PUSH
46158: LD_VAR 0 13
46162: PPUSH
46163: CALL_OW 247
46167: PUSH
46168: LD_INT 3
46170: EQUAL
46171: OR
46172: IFFALSE 46178
// exit ;
46174: POP
46175: POP
46176: GO 46730
// if not tmp then
46178: LD_VAR 0 13
46182: NOT
46183: IFFALSE 46187
// continue ;
46185: GO 46039
// result := true ;
46187: LD_ADDR_VAR 0 8
46191: PUSH
46192: LD_INT 1
46194: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46195: LD_VAR 0 6
46199: IFFALSE 46216
46201: PUSH
46202: LD_VAR 0 13
46206: PPUSH
46207: CALL_OW 247
46211: PUSH
46212: LD_INT 2
46214: EQUAL
46215: AND
46216: IFFALSE 46233
46218: PUSH
46219: LD_VAR 0 13
46223: PPUSH
46224: CALL_OW 263
46228: PUSH
46229: LD_INT 1
46231: EQUAL
46232: AND
46233: IFFALSE 46397
// begin if IsDrivenBy ( tmp ) then
46235: LD_VAR 0 13
46239: PPUSH
46240: CALL_OW 311
46244: IFFALSE 46248
// continue ;
46246: GO 46039
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46248: LD_VAR 0 6
46252: PPUSH
46253: LD_INT 3
46255: PUSH
46256: LD_INT 60
46258: PUSH
46259: EMPTY
46260: LIST
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: LD_INT 55
46271: PUSH
46272: EMPTY
46273: LIST
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PPUSH
46283: CALL_OW 72
46287: IFFALSE 46395
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46289: LD_ADDR_VAR 0 18
46293: PUSH
46294: LD_VAR 0 6
46298: PPUSH
46299: LD_INT 3
46301: PUSH
46302: LD_INT 60
46304: PUSH
46305: EMPTY
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: LD_INT 55
46317: PUSH
46318: EMPTY
46319: LIST
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PPUSH
46329: CALL_OW 72
46333: PUSH
46334: LD_INT 1
46336: ARRAY
46337: ST_TO_ADDR
// if IsInUnit ( driver ) then
46338: LD_VAR 0 18
46342: PPUSH
46343: CALL_OW 310
46347: IFFALSE 46358
// ComExit ( driver ) ;
46349: LD_VAR 0 18
46353: PPUSH
46354: CALL 72011 0 1
// AddComEnterUnit ( driver , tmp ) ;
46358: LD_VAR 0 18
46362: PPUSH
46363: LD_VAR 0 13
46367: PPUSH
46368: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46372: LD_VAR 0 18
46376: PPUSH
46377: LD_VAR 0 7
46381: PPUSH
46382: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46386: LD_VAR 0 18
46390: PPUSH
46391: CALL_OW 181
// end ; continue ;
46395: GO 46039
// end ; if not cleaners or not tmp in cleaners then
46397: LD_VAR 0 6
46401: NOT
46402: IFTRUE 46417
46404: PUSH
46405: LD_VAR 0 13
46409: PUSH
46410: LD_VAR 0 6
46414: IN
46415: NOT
46416: OR
46417: IFFALSE 46726
// begin if dep then
46419: LD_VAR 0 17
46423: IFFALSE 46559
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46425: LD_ADDR_VAR 0 16
46429: PUSH
46430: LD_VAR 0 17
46434: PUSH
46435: LD_INT 1
46437: ARRAY
46438: PPUSH
46439: CALL_OW 250
46443: PPUSH
46444: LD_VAR 0 17
46448: PUSH
46449: LD_INT 1
46451: ARRAY
46452: PPUSH
46453: CALL_OW 254
46457: PPUSH
46458: LD_INT 5
46460: PPUSH
46461: CALL_OW 272
46465: PUSH
46466: LD_VAR 0 17
46470: PUSH
46471: LD_INT 1
46473: ARRAY
46474: PPUSH
46475: CALL_OW 251
46479: PPUSH
46480: LD_VAR 0 17
46484: PUSH
46485: LD_INT 1
46487: ARRAY
46488: PPUSH
46489: CALL_OW 254
46493: PPUSH
46494: LD_INT 5
46496: PPUSH
46497: CALL_OW 273
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46506: LD_VAR 0 16
46510: PUSH
46511: LD_INT 1
46513: ARRAY
46514: PPUSH
46515: LD_VAR 0 16
46519: PUSH
46520: LD_INT 2
46522: ARRAY
46523: PPUSH
46524: CALL_OW 488
46528: IFFALSE 46559
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46530: LD_VAR 0 13
46534: PPUSH
46535: LD_VAR 0 16
46539: PUSH
46540: LD_INT 1
46542: ARRAY
46543: PPUSH
46544: LD_VAR 0 16
46548: PUSH
46549: LD_INT 2
46551: ARRAY
46552: PPUSH
46553: CALL_OW 111
// continue ;
46557: GO 46039
// end ; end ; r := GetDir ( tmp ) ;
46559: LD_ADDR_VAR 0 15
46563: PUSH
46564: LD_VAR 0 13
46568: PPUSH
46569: CALL_OW 254
46573: ST_TO_ADDR
// if r = 5 then
46574: LD_VAR 0 15
46578: PUSH
46579: LD_INT 5
46581: EQUAL
46582: IFFALSE 46592
// r := 0 ;
46584: LD_ADDR_VAR 0 15
46588: PUSH
46589: LD_INT 0
46591: ST_TO_ADDR
// for j = r to 5 do
46592: LD_ADDR_VAR 0 10
46596: PUSH
46597: DOUBLE
46598: LD_VAR 0 15
46602: DEC
46603: ST_TO_ADDR
46604: LD_INT 5
46606: PUSH
46607: FOR_TO
46608: IFFALSE 46724
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46610: LD_ADDR_VAR 0 11
46614: PUSH
46615: LD_VAR 0 13
46619: PPUSH
46620: CALL_OW 250
46624: PPUSH
46625: LD_VAR 0 10
46629: PPUSH
46630: LD_INT 2
46632: PPUSH
46633: CALL_OW 272
46637: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46638: LD_ADDR_VAR 0 12
46642: PUSH
46643: LD_VAR 0 13
46647: PPUSH
46648: CALL_OW 251
46652: PPUSH
46653: LD_VAR 0 10
46657: PPUSH
46658: LD_INT 2
46660: PPUSH
46661: CALL_OW 273
46665: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46666: LD_VAR 0 11
46670: PPUSH
46671: LD_VAR 0 12
46675: PPUSH
46676: CALL_OW 488
46680: IFFALSE 46699
46682: PUSH
46683: LD_VAR 0 11
46687: PPUSH
46688: LD_VAR 0 12
46692: PPUSH
46693: CALL_OW 428
46697: NOT
46698: AND
46699: IFFALSE 46722
// begin ComMoveXY ( tmp , _x , _y ) ;
46701: LD_VAR 0 13
46705: PPUSH
46706: LD_VAR 0 11
46710: PPUSH
46711: LD_VAR 0 12
46715: PPUSH
46716: CALL_OW 111
// break ;
46720: GO 46724
// end ; end ;
46722: GO 46607
46724: POP
46725: POP
// end ; end ;
46726: GO 46039
46728: POP
46729: POP
// end ;
46730: LD_VAR 0 8
46734: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46735: LD_INT 0
46737: PPUSH
// result := true ;
46738: LD_ADDR_VAR 0 3
46742: PUSH
46743: LD_INT 1
46745: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46746: LD_VAR 0 2
46750: PUSH
46751: LD_INT 24
46753: DOUBLE
46754: EQUAL
46755: IFTRUE 46765
46757: LD_INT 33
46759: DOUBLE
46760: EQUAL
46761: IFTRUE 46765
46763: GO 46790
46765: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46766: LD_ADDR_VAR 0 3
46770: PUSH
46771: LD_INT 32
46773: PPUSH
46774: LD_VAR 0 1
46778: PPUSH
46779: CALL_OW 321
46783: PUSH
46784: LD_INT 2
46786: EQUAL
46787: ST_TO_ADDR
46788: GO 47106
46790: LD_INT 20
46792: DOUBLE
46793: EQUAL
46794: IFTRUE 46798
46796: GO 46823
46798: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46799: LD_ADDR_VAR 0 3
46803: PUSH
46804: LD_INT 6
46806: PPUSH
46807: LD_VAR 0 1
46811: PPUSH
46812: CALL_OW 321
46816: PUSH
46817: LD_INT 2
46819: EQUAL
46820: ST_TO_ADDR
46821: GO 47106
46823: LD_INT 22
46825: DOUBLE
46826: EQUAL
46827: IFTRUE 46837
46829: LD_INT 36
46831: DOUBLE
46832: EQUAL
46833: IFTRUE 46837
46835: GO 46862
46837: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46838: LD_ADDR_VAR 0 3
46842: PUSH
46843: LD_INT 15
46845: PPUSH
46846: LD_VAR 0 1
46850: PPUSH
46851: CALL_OW 321
46855: PUSH
46856: LD_INT 2
46858: EQUAL
46859: ST_TO_ADDR
46860: GO 47106
46862: LD_INT 30
46864: DOUBLE
46865: EQUAL
46866: IFTRUE 46870
46868: GO 46895
46870: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46871: LD_ADDR_VAR 0 3
46875: PUSH
46876: LD_INT 20
46878: PPUSH
46879: LD_VAR 0 1
46883: PPUSH
46884: CALL_OW 321
46888: PUSH
46889: LD_INT 2
46891: EQUAL
46892: ST_TO_ADDR
46893: GO 47106
46895: LD_INT 28
46897: DOUBLE
46898: EQUAL
46899: IFTRUE 46909
46901: LD_INT 21
46903: DOUBLE
46904: EQUAL
46905: IFTRUE 46909
46907: GO 46934
46909: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46910: LD_ADDR_VAR 0 3
46914: PUSH
46915: LD_INT 21
46917: PPUSH
46918: LD_VAR 0 1
46922: PPUSH
46923: CALL_OW 321
46927: PUSH
46928: LD_INT 2
46930: EQUAL
46931: ST_TO_ADDR
46932: GO 47106
46934: LD_INT 16
46936: DOUBLE
46937: EQUAL
46938: IFTRUE 46942
46940: GO 46967
46942: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46943: LD_ADDR_VAR 0 3
46947: PUSH
46948: LD_INT 84
46950: PPUSH
46951: LD_VAR 0 1
46955: PPUSH
46956: CALL_OW 321
46960: PUSH
46961: LD_INT 2
46963: EQUAL
46964: ST_TO_ADDR
46965: GO 47106
46967: LD_INT 19
46969: DOUBLE
46970: EQUAL
46971: IFTRUE 46981
46973: LD_INT 23
46975: DOUBLE
46976: EQUAL
46977: IFTRUE 46981
46979: GO 47006
46981: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46982: LD_ADDR_VAR 0 3
46986: PUSH
46987: LD_INT 83
46989: PPUSH
46990: LD_VAR 0 1
46994: PPUSH
46995: CALL_OW 321
46999: PUSH
47000: LD_INT 2
47002: EQUAL
47003: ST_TO_ADDR
47004: GO 47106
47006: LD_INT 17
47008: DOUBLE
47009: EQUAL
47010: IFTRUE 47014
47012: GO 47039
47014: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47015: LD_ADDR_VAR 0 3
47019: PUSH
47020: LD_INT 39
47022: PPUSH
47023: LD_VAR 0 1
47027: PPUSH
47028: CALL_OW 321
47032: PUSH
47033: LD_INT 2
47035: EQUAL
47036: ST_TO_ADDR
47037: GO 47106
47039: LD_INT 18
47041: DOUBLE
47042: EQUAL
47043: IFTRUE 47047
47045: GO 47072
47047: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47048: LD_ADDR_VAR 0 3
47052: PUSH
47053: LD_INT 40
47055: PPUSH
47056: LD_VAR 0 1
47060: PPUSH
47061: CALL_OW 321
47065: PUSH
47066: LD_INT 2
47068: EQUAL
47069: ST_TO_ADDR
47070: GO 47106
47072: LD_INT 27
47074: DOUBLE
47075: EQUAL
47076: IFTRUE 47080
47078: GO 47105
47080: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47081: LD_ADDR_VAR 0 3
47085: PUSH
47086: LD_INT 35
47088: PPUSH
47089: LD_VAR 0 1
47093: PPUSH
47094: CALL_OW 321
47098: PUSH
47099: LD_INT 2
47101: EQUAL
47102: ST_TO_ADDR
47103: GO 47106
47105: POP
// end ;
47106: LD_VAR 0 3
47110: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47111: LD_INT 0
47113: PPUSH
47114: PPUSH
47115: PPUSH
47116: PPUSH
47117: PPUSH
47118: PPUSH
47119: PPUSH
47120: PPUSH
47121: PPUSH
47122: PPUSH
47123: PPUSH
// result := false ;
47124: LD_ADDR_VAR 0 6
47128: PUSH
47129: LD_INT 0
47131: ST_TO_ADDR
// if btype = b_depot then
47132: LD_VAR 0 2
47136: PUSH
47137: LD_INT 0
47139: EQUAL
47140: IFFALSE 47152
// begin result := true ;
47142: LD_ADDR_VAR 0 6
47146: PUSH
47147: LD_INT 1
47149: ST_TO_ADDR
// exit ;
47150: GO 48006
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47152: LD_VAR 0 1
47156: NOT
47157: IFTRUE 47182
47159: PUSH
47160: LD_VAR 0 1
47164: PPUSH
47165: CALL_OW 266
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: IN
47180: NOT
47181: OR
47182: IFTRUE 47191
47184: PUSH
47185: LD_VAR 0 2
47189: NOT
47190: OR
47191: IFTRUE 47227
47193: PUSH
47194: LD_VAR 0 5
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: LD_INT 4
47213: PUSH
47214: LD_INT 5
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: IN
47225: NOT
47226: OR
47227: IFTRUE 47246
47229: PUSH
47230: LD_VAR 0 3
47234: PPUSH
47235: LD_VAR 0 4
47239: PPUSH
47240: CALL_OW 488
47244: NOT
47245: OR
47246: IFFALSE 47250
// exit ;
47248: GO 48006
// side := GetSide ( depot ) ;
47250: LD_ADDR_VAR 0 9
47254: PUSH
47255: LD_VAR 0 1
47259: PPUSH
47260: CALL_OW 255
47264: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47265: LD_VAR 0 9
47269: PPUSH
47270: LD_VAR 0 2
47274: PPUSH
47275: CALL 46735 0 2
47279: NOT
47280: IFFALSE 47284
// exit ;
47282: GO 48006
// pom := GetBase ( depot ) ;
47284: LD_ADDR_VAR 0 10
47288: PUSH
47289: LD_VAR 0 1
47293: PPUSH
47294: CALL_OW 274
47298: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47299: LD_ADDR_VAR 0 11
47303: PUSH
47304: LD_VAR 0 2
47308: PPUSH
47309: LD_VAR 0 1
47313: PPUSH
47314: CALL_OW 248
47318: PPUSH
47319: CALL_OW 450
47323: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47324: LD_VAR 0 10
47328: PPUSH
47329: LD_INT 1
47331: PPUSH
47332: CALL_OW 275
47336: PUSH
47337: LD_VAR 0 11
47341: PUSH
47342: LD_INT 1
47344: ARRAY
47345: GREATEREQUAL
47346: IFFALSE 47372
47348: PUSH
47349: LD_VAR 0 10
47353: PPUSH
47354: LD_INT 2
47356: PPUSH
47357: CALL_OW 275
47361: PUSH
47362: LD_VAR 0 11
47366: PUSH
47367: LD_INT 2
47369: ARRAY
47370: GREATEREQUAL
47371: AND
47372: IFFALSE 47398
47374: PUSH
47375: LD_VAR 0 10
47379: PPUSH
47380: LD_INT 3
47382: PPUSH
47383: CALL_OW 275
47387: PUSH
47388: LD_VAR 0 11
47392: PUSH
47393: LD_INT 3
47395: ARRAY
47396: GREATEREQUAL
47397: AND
47398: NOT
47399: IFFALSE 47403
// exit ;
47401: GO 48006
// if GetBType ( depot ) = b_depot then
47403: LD_VAR 0 1
47407: PPUSH
47408: CALL_OW 266
47412: PUSH
47413: LD_INT 0
47415: EQUAL
47416: IFFALSE 47428
// dist := 28 else
47418: LD_ADDR_VAR 0 14
47422: PUSH
47423: LD_INT 28
47425: ST_TO_ADDR
47426: GO 47436
// dist := 36 ;
47428: LD_ADDR_VAR 0 14
47432: PUSH
47433: LD_INT 36
47435: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47436: LD_VAR 0 1
47440: PPUSH
47441: LD_VAR 0 3
47445: PPUSH
47446: LD_VAR 0 4
47450: PPUSH
47451: CALL_OW 297
47455: PUSH
47456: LD_VAR 0 14
47460: GREATER
47461: IFFALSE 47465
// exit ;
47463: GO 48006
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47465: LD_ADDR_VAR 0 12
47469: PUSH
47470: LD_VAR 0 2
47474: PPUSH
47475: LD_VAR 0 3
47479: PPUSH
47480: LD_VAR 0 4
47484: PPUSH
47485: LD_VAR 0 5
47489: PPUSH
47490: LD_VAR 0 1
47494: PPUSH
47495: CALL_OW 248
47499: PPUSH
47500: LD_INT 0
47502: PPUSH
47503: CALL 48011 0 6
47507: ST_TO_ADDR
// if not hexes then
47508: LD_VAR 0 12
47512: NOT
47513: IFFALSE 47517
// exit ;
47515: GO 48006
// hex := GetHexInfo ( x , y ) ;
47517: LD_ADDR_VAR 0 15
47521: PUSH
47522: LD_VAR 0 3
47526: PPUSH
47527: LD_VAR 0 4
47531: PPUSH
47532: CALL_OW 546
47536: ST_TO_ADDR
// if hex [ 1 ] then
47537: LD_VAR 0 15
47541: PUSH
47542: LD_INT 1
47544: ARRAY
47545: IFFALSE 47549
// exit ;
47547: GO 48006
// height := hex [ 2 ] ;
47549: LD_ADDR_VAR 0 13
47553: PUSH
47554: LD_VAR 0 15
47558: PUSH
47559: LD_INT 2
47561: ARRAY
47562: ST_TO_ADDR
// for i = 1 to hexes do
47563: LD_ADDR_VAR 0 7
47567: PUSH
47568: DOUBLE
47569: LD_INT 1
47571: DEC
47572: ST_TO_ADDR
47573: LD_VAR 0 12
47577: PUSH
47578: FOR_TO
47579: IFFALSE 47923
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47581: LD_VAR 0 12
47585: PUSH
47586: LD_VAR 0 7
47590: ARRAY
47591: PUSH
47592: LD_INT 1
47594: ARRAY
47595: PPUSH
47596: LD_VAR 0 12
47600: PUSH
47601: LD_VAR 0 7
47605: ARRAY
47606: PUSH
47607: LD_INT 2
47609: ARRAY
47610: PPUSH
47611: CALL_OW 488
47615: NOT
47616: IFTRUE 47658
47618: PUSH
47619: LD_VAR 0 12
47623: PUSH
47624: LD_VAR 0 7
47628: ARRAY
47629: PUSH
47630: LD_INT 1
47632: ARRAY
47633: PPUSH
47634: LD_VAR 0 12
47638: PUSH
47639: LD_VAR 0 7
47643: ARRAY
47644: PUSH
47645: LD_INT 2
47647: ARRAY
47648: PPUSH
47649: CALL_OW 428
47653: PUSH
47654: LD_INT 0
47656: GREATER
47657: OR
47658: IFTRUE 47696
47660: PUSH
47661: LD_VAR 0 12
47665: PUSH
47666: LD_VAR 0 7
47670: ARRAY
47671: PUSH
47672: LD_INT 1
47674: ARRAY
47675: PPUSH
47676: LD_VAR 0 12
47680: PUSH
47681: LD_VAR 0 7
47685: ARRAY
47686: PUSH
47687: LD_INT 2
47689: ARRAY
47690: PPUSH
47691: CALL_OW 351
47695: OR
47696: IFFALSE 47702
// exit ;
47698: POP
47699: POP
47700: GO 48006
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47702: LD_ADDR_VAR 0 8
47706: PUSH
47707: LD_VAR 0 12
47711: PUSH
47712: LD_VAR 0 7
47716: ARRAY
47717: PUSH
47718: LD_INT 1
47720: ARRAY
47721: PPUSH
47722: LD_VAR 0 12
47726: PUSH
47727: LD_VAR 0 7
47731: ARRAY
47732: PUSH
47733: LD_INT 2
47735: ARRAY
47736: PPUSH
47737: CALL_OW 546
47741: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47742: LD_VAR 0 8
47746: PUSH
47747: LD_INT 1
47749: ARRAY
47750: IFTRUE 47772
47752: PUSH
47753: LD_VAR 0 8
47757: PUSH
47758: LD_INT 2
47760: ARRAY
47761: PUSH
47762: LD_VAR 0 13
47766: PUSH
47767: LD_INT 2
47769: PLUS
47770: GREATER
47771: OR
47772: IFTRUE 47794
47774: PUSH
47775: LD_VAR 0 8
47779: PUSH
47780: LD_INT 2
47782: ARRAY
47783: PUSH
47784: LD_VAR 0 13
47788: PUSH
47789: LD_INT 2
47791: MINUS
47792: LESS
47793: OR
47794: IFTRUE 47862
47796: PUSH
47797: LD_VAR 0 8
47801: PUSH
47802: LD_INT 3
47804: ARRAY
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 8
47811: PUSH
47812: LD_INT 9
47814: PUSH
47815: LD_INT 10
47817: PUSH
47818: LD_INT 11
47820: PUSH
47821: LD_INT 12
47823: PUSH
47824: LD_INT 13
47826: PUSH
47827: LD_INT 16
47829: PUSH
47830: LD_INT 17
47832: PUSH
47833: LD_INT 18
47835: PUSH
47836: LD_INT 19
47838: PUSH
47839: LD_INT 20
47841: PUSH
47842: LD_INT 21
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: IN
47860: NOT
47861: OR
47862: IFTRUE 47875
47864: PUSH
47865: LD_VAR 0 8
47869: PUSH
47870: LD_INT 5
47872: ARRAY
47873: NOT
47874: OR
47875: IFTRUE 47915
47877: PUSH
47878: LD_VAR 0 8
47882: PUSH
47883: LD_INT 6
47885: ARRAY
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 7
47895: PUSH
47896: LD_INT 9
47898: PUSH
47899: LD_INT 10
47901: PUSH
47902: LD_INT 11
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: IN
47913: NOT
47914: OR
47915: IFFALSE 47921
// exit ;
47917: POP
47918: POP
47919: GO 48006
// end ;
47921: GO 47578
47923: POP
47924: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47925: LD_VAR 0 9
47929: PPUSH
47930: LD_VAR 0 3
47934: PPUSH
47935: LD_VAR 0 4
47939: PPUSH
47940: LD_INT 20
47942: PPUSH
47943: CALL 39825 0 4
47947: PUSH
47948: LD_INT 4
47950: ARRAY
47951: IFFALSE 47955
// exit ;
47953: GO 48006
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47955: LD_VAR 0 2
47959: PUSH
47960: LD_INT 29
47962: PUSH
47963: LD_INT 30
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: IN
47970: IFFALSE 47994
47972: PUSH
47973: LD_VAR 0 3
47977: PPUSH
47978: LD_VAR 0 4
47982: PPUSH
47983: LD_VAR 0 9
47987: PPUSH
47988: CALL_OW 440
47992: NOT
47993: AND
47994: IFFALSE 47998
// exit ;
47996: GO 48006
// result := true ;
47998: LD_ADDR_VAR 0 6
48002: PUSH
48003: LD_INT 1
48005: ST_TO_ADDR
// end ;
48006: LD_VAR 0 6
48010: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48011: LD_INT 0
48013: PPUSH
48014: PPUSH
48015: PPUSH
48016: PPUSH
48017: PPUSH
48018: PPUSH
48019: PPUSH
48020: PPUSH
48021: PPUSH
48022: PPUSH
48023: PPUSH
48024: PPUSH
48025: PPUSH
48026: PPUSH
48027: PPUSH
48028: PPUSH
48029: PPUSH
48030: PPUSH
48031: PPUSH
48032: PPUSH
48033: PPUSH
48034: PPUSH
48035: PPUSH
48036: PPUSH
48037: PPUSH
48038: PPUSH
48039: PPUSH
48040: PPUSH
48041: PPUSH
48042: PPUSH
48043: PPUSH
48044: PPUSH
48045: PPUSH
48046: PPUSH
48047: PPUSH
48048: PPUSH
48049: PPUSH
48050: PPUSH
48051: PPUSH
48052: PPUSH
48053: PPUSH
48054: PPUSH
48055: PPUSH
48056: PPUSH
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
// result = [ ] ;
48071: LD_ADDR_VAR 0 7
48075: PUSH
48076: EMPTY
48077: ST_TO_ADDR
// temp_list = [ ] ;
48078: LD_ADDR_VAR 0 9
48082: PUSH
48083: EMPTY
48084: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48085: LD_VAR 0 4
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 3
48101: PUSH
48102: LD_INT 4
48104: PUSH
48105: LD_INT 5
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: IN
48116: NOT
48117: IFTRUE 48160
48119: PUSH
48120: LD_VAR 0 1
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: IN
48135: IFFALSE 48159
48137: PUSH
48138: LD_VAR 0 5
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: IN
48157: NOT
48158: AND
48159: OR
48160: IFFALSE 48164
// exit ;
48162: GO 66563
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48164: LD_VAR 0 1
48168: PUSH
48169: LD_INT 6
48171: PUSH
48172: LD_INT 7
48174: PUSH
48175: LD_INT 8
48177: PUSH
48178: LD_INT 13
48180: PUSH
48181: LD_INT 12
48183: PUSH
48184: LD_INT 15
48186: PUSH
48187: LD_INT 11
48189: PUSH
48190: LD_INT 14
48192: PUSH
48193: LD_INT 10
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: IN
48207: IFFALSE 48217
// btype = b_lab ;
48209: LD_ADDR_VAR 0 1
48213: PUSH
48214: LD_INT 6
48216: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48217: LD_VAR 0 6
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: IN
48236: NOT
48237: IFTRUE 48305
48239: PUSH
48240: LD_VAR 0 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: LD_INT 6
48259: PUSH
48260: LD_INT 36
48262: PUSH
48263: LD_INT 4
48265: PUSH
48266: LD_INT 5
48268: PUSH
48269: LD_INT 31
48271: PUSH
48272: LD_INT 32
48274: PUSH
48275: LD_INT 33
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: IN
48291: NOT
48292: IFFALSE 48304
48294: PUSH
48295: LD_VAR 0 6
48299: PUSH
48300: LD_INT 1
48302: EQUAL
48303: AND
48304: OR
48305: IFTRUE 48337
48307: PUSH
48308: LD_VAR 0 1
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: LD_INT 3
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: IN
48323: NOT
48324: IFFALSE 48336
48326: PUSH
48327: LD_VAR 0 6
48331: PUSH
48332: LD_INT 2
48334: EQUAL
48335: AND
48336: OR
48337: IFFALSE 48347
// mode = 0 ;
48339: LD_ADDR_VAR 0 6
48343: PUSH
48344: LD_INT 0
48346: ST_TO_ADDR
// case mode of 0 :
48347: LD_VAR 0 6
48351: PUSH
48352: LD_INT 0
48354: DOUBLE
48355: EQUAL
48356: IFTRUE 48360
48358: GO 59813
48360: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48361: LD_ADDR_VAR 0 11
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 3
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48554: LD_ADDR_VAR 0 12
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48750: LD_ADDR_VAR 0 13
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 3
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: LD_INT 3
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48949: LD_ADDR_VAR 0 14
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 3
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 3
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49145: LD_ADDR_VAR 0 15
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49338: LD_ADDR_VAR 0 16
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 3
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: LD_INT 3
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49531: LD_ADDR_VAR 0 17
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49761: LD_ADDR_VAR 0 18
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49991: LD_ADDR_VAR 0 19
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50221: LD_ADDR_VAR 0 20
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50451: LD_ADDR_VAR 0 21
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50681: LD_ADDR_VAR 0 22
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50911: LD_ADDR_VAR 0 23
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51191: LD_ADDR_VAR 0 24
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51467: LD_ADDR_VAR 0 25
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 3
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51741: LD_ADDR_VAR 0 26
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52017: LD_ADDR_VAR 0 27
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 3
52262: NEG
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52297: LD_ADDR_VAR 0 28
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 3
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52579: LD_ADDR_VAR 0 29
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52858: LD_ADDR_VAR 0 30
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 3
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53136: LD_ADDR_VAR 0 31
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 2
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: LD_INT 3
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53414: LD_ADDR_VAR 0 32
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 3
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53692: LD_ADDR_VAR 0 33
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: LD_INT 3
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: NEG
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53971: LD_ADDR_VAR 0 34
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 3
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54251: LD_ADDR_VAR 0 35
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54363: LD_ADDR_VAR 0 36
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54475: LD_ADDR_VAR 0 37
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54587: LD_ADDR_VAR 0 38
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54699: LD_ADDR_VAR 0 39
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54811: LD_ADDR_VAR 0 40
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54923: LD_ADDR_VAR 0 41
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55273: LD_ADDR_VAR 0 42
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 3
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55623: LD_ADDR_VAR 0 43
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 3
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 3
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 3
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55971: LD_ADDR_VAR 0 44
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: LD_INT 3
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 3
56245: NEG
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 3
56280: NEG
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56321: LD_ADDR_VAR 0 45
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 3
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 3
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56671: LD_ADDR_VAR 0 46
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57019: LD_ADDR_VAR 0 47
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57170: LD_ADDR_VAR 0 48
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57317: LD_ADDR_VAR 0 49
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57461: LD_ADDR_VAR 0 50
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57605: LD_ADDR_VAR 0 51
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57752: LD_ADDR_VAR 0 52
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57903: LD_ADDR_VAR 0 53
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 2
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58133: LD_ADDR_VAR 0 54
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58363: LD_ADDR_VAR 0 55
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58593: LD_ADDR_VAR 0 56
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58823: LD_ADDR_VAR 0 57
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59053: LD_ADDR_VAR 0 58
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59283: LD_ADDR_VAR 0 59
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59371: LD_ADDR_VAR 0 60
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59459: LD_ADDR_VAR 0 61
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59547: LD_ADDR_VAR 0 62
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59635: LD_ADDR_VAR 0 63
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59723: LD_ADDR_VAR 0 64
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: ST_TO_ADDR
// end ; 1 :
59811: GO 65708
59813: LD_INT 1
59815: DOUBLE
59816: EQUAL
59817: IFTRUE 59821
59819: GO 62444
59821: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59822: LD_ADDR_VAR 0 11
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 3
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: LIST
59865: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59866: LD_ADDR_VAR 0 12
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59907: LD_ADDR_VAR 0 13
59911: PUSH
59912: LD_INT 3
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: LD_INT 3
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59947: LD_ADDR_VAR 0 14
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59988: LD_ADDR_VAR 0 15
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60032: LD_ADDR_VAR 0 16
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 3
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: NEG
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60078: LD_ADDR_VAR 0 17
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60122: LD_ADDR_VAR 0 18
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 3
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: LIST
60162: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60163: LD_ADDR_VAR 0 19
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: LD_INT 3
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60203: LD_ADDR_VAR 0 20
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: LIST
60243: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60244: LD_ADDR_VAR 0 21
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: NEG
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60288: LD_ADDR_VAR 0 22
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: LD_INT 3
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: LIST
60333: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60334: LD_ADDR_VAR 0 23
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 3
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: LD_INT 4
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60378: LD_ADDR_VAR 0 24
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 4
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60419: LD_ADDR_VAR 0 25
60423: PUSH
60424: LD_INT 3
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 4
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 4
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60459: LD_ADDR_VAR 0 26
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 4
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60500: LD_ADDR_VAR 0 27
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 3
60518: NEG
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 4
60529: NEG
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60544: LD_ADDR_VAR 0 28
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: LD_INT 4
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 4
60575: NEG
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: LIST
60589: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60590: LD_ADDR_VAR 0 29
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 3
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 3
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: LD_INT 4
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 4
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 3
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 5
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 5
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 4
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 6
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 6
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 5
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60745: LD_ADDR_VAR 0 30
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 3
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 4
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 4
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 4
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 5
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 5
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 5
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 6
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 6
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60888: LD_ADDR_VAR 0 31
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 3
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 4
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 4
60935: PUSH
60936: LD_INT 4
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: LD_INT 4
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 5
60955: PUSH
60956: LD_INT 4
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 5
60965: PUSH
60966: LD_INT 5
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 4
60975: PUSH
60976: LD_INT 5
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 6
60985: PUSH
60986: LD_INT 5
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 6
60995: PUSH
60996: LD_INT 6
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 5
61005: PUSH
61006: LD_INT 6
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61027: LD_ADDR_VAR 0 32
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 4
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 4
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 3
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: LD_INT 5
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: LD_INT 5
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: LD_INT 4
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: LD_INT 6
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 6
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 5
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61170: LD_ADDR_VAR 0 33
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 3
61188: NEG
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 3
61199: NEG
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 3
61211: NEG
61212: PUSH
61213: LD_INT 1
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 4
61222: NEG
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 4
61233: NEG
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 4
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 5
61256: NEG
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 5
61267: NEG
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 5
61279: NEG
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 6
61290: NEG
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 6
61301: NEG
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61325: LD_ADDR_VAR 0 34
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: NEG
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 3
61356: NEG
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 3
61368: NEG
61369: PUSH
61370: LD_INT 4
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 4
61380: NEG
61381: PUSH
61382: LD_INT 3
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: LD_INT 4
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 4
61404: NEG
61405: PUSH
61406: LD_INT 5
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 5
61416: NEG
61417: PUSH
61418: LD_INT 4
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 5
61428: NEG
61429: PUSH
61430: LD_INT 5
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 5
61440: NEG
61441: PUSH
61442: LD_INT 6
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 6
61452: NEG
61453: PUSH
61454: LD_INT 5
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 6
61464: NEG
61465: PUSH
61466: LD_INT 6
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61488: LD_ADDR_VAR 0 41
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: LD_INT 3
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: LIST
61531: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61532: LD_ADDR_VAR 0 42
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 3
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: LIST
61572: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61573: LD_ADDR_VAR 0 43
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: LIST
61612: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61613: LD_ADDR_VAR 0 44
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: LIST
61653: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61654: LD_ADDR_VAR 0 45
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 3
61683: NEG
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61698: LD_ADDR_VAR 0 46
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: LD_INT 3
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61744: LD_ADDR_VAR 0 47
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 3
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61777: LD_ADDR_VAR 0 48
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61808: LD_ADDR_VAR 0 49
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: LD_INT 2
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61837: LD_ADDR_VAR 0 50
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: LD_INT 3
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61866: LD_ADDR_VAR 0 51
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61897: LD_ADDR_VAR 0 52
61901: PUSH
61902: LD_INT 3
61904: NEG
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: NEG
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61930: LD_ADDR_VAR 0 53
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: LD_INT 3
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 3
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: LIST
61973: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61974: LD_ADDR_VAR 0 54
61978: PUSH
61979: LD_INT 2
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 3
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 3
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: LIST
62014: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62015: LD_ADDR_VAR 0 55
62019: PUSH
62020: LD_INT 3
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 3
62032: PUSH
62033: LD_INT 3
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: LD_INT 3
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: LIST
62054: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62055: LD_ADDR_VAR 0 56
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: LD_INT 3
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: LIST
62095: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62096: LD_ADDR_VAR 0 57
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 3
62125: NEG
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62140: LD_ADDR_VAR 0 58
62144: PUSH
62145: LD_INT 2
62147: NEG
62148: PUSH
62149: LD_INT 3
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 3
62171: NEG
62172: PUSH
62173: LD_INT 3
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62186: LD_ADDR_VAR 0 59
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 2
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62230: LD_ADDR_VAR 0 60
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 2
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62271: LD_ADDR_VAR 0 61
62275: PUSH
62276: LD_INT 2
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: LIST
62310: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62311: LD_ADDR_VAR 0 62
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 2
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62352: LD_ADDR_VAR 0 63
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: NEG
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: NEG
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62396: LD_ADDR_VAR 0 64
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: ST_TO_ADDR
// end ; 2 :
62442: GO 65708
62444: LD_INT 2
62446: DOUBLE
62447: EQUAL
62448: IFTRUE 62452
62450: GO 65707
62452: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62453: LD_ADDR_VAR 0 29
62457: PUSH
62458: LD_INT 4
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 4
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 5
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 5
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 3
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 5
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: LD_INT 3
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: LD_INT 2
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 4
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 4
62583: PUSH
62584: LD_INT 4
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: LD_INT 4
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: LD_INT 3
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: LD_INT 2
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 4
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: LD_INT 4
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 4
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 3
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: LD_INT 4
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: LD_INT 5
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 5
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: LD_INT 4
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 5
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 3
62736: NEG
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: NEG
62748: PUSH
62749: LD_INT 1
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 3
62781: NEG
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 4
62792: NEG
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 4
62803: NEG
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 4
62815: NEG
62816: PUSH
62817: LD_INT 2
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 4
62838: NEG
62839: PUSH
62840: LD_INT 4
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 4
62850: NEG
62851: PUSH
62852: LD_INT 5
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 3
62862: NEG
62863: PUSH
62864: LD_INT 4
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 3
62874: NEG
62875: PUSH
62876: LD_INT 3
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 4
62886: NEG
62887: PUSH
62888: LD_INT 3
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 5
62898: NEG
62899: PUSH
62900: LD_INT 4
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 5
62910: NEG
62911: PUSH
62912: LD_INT 5
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 3
62922: NEG
62923: PUSH
62924: LD_INT 5
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 5
62934: NEG
62935: PUSH
62936: LD_INT 3
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62991: LD_ADDR_VAR 0 30
62995: PUSH
62996: LD_INT 4
62998: PUSH
62999: LD_INT 4
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 4
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 5
63018: PUSH
63019: LD_INT 4
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 5
63028: PUSH
63029: LD_INT 5
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 4
63038: PUSH
63039: LD_INT 5
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: LD_INT 4
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 3
63058: PUSH
63059: LD_INT 3
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 5
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 3
63078: PUSH
63079: LD_INT 5
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: LD_INT 3
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 2
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: LD_INT 4
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 4
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 3
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 2
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: LD_INT 4
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: NEG
63171: PUSH
63172: LD_INT 2
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 4
63181: NEG
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 4
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: NEG
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 3
63215: NEG
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 4
63226: NEG
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 5
63237: NEG
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 5
63248: NEG
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 5
63260: NEG
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 3
63272: NEG
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: LD_INT 3
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 3
63295: NEG
63296: PUSH
63297: LD_INT 4
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: LD_INT 3
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 2
63319: NEG
63320: PUSH
63321: LD_INT 2
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 3
63331: NEG
63332: PUSH
63333: LD_INT 2
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 4
63343: NEG
63344: PUSH
63345: LD_INT 3
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 4
63355: NEG
63356: PUSH
63357: LD_INT 4
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 2
63367: NEG
63368: PUSH
63369: LD_INT 4
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 4
63379: NEG
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 4
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 5
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 4
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: LD_INT 3
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: LD_INT 3
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: LD_INT 4
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: LD_INT 5
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: LD_INT 3
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 2
63481: NEG
63482: PUSH
63483: LD_INT 5
63485: NEG
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63538: LD_ADDR_VAR 0 31
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 4
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 3
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 4
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: LD_INT 5
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: LD_INT 5
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: LD_INT 4
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: PUSH
63618: LD_INT 5
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 2
63627: NEG
63628: PUSH
63629: LD_INT 3
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 3
63638: NEG
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 3
63649: NEG
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 2
63672: NEG
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 3
63683: NEG
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 4
63694: NEG
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 4
63705: NEG
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 4
63717: NEG
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: LD_INT 2
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 4
63740: NEG
63741: PUSH
63742: LD_INT 4
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 4
63752: NEG
63753: PUSH
63754: LD_INT 5
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 3
63764: NEG
63765: PUSH
63766: LD_INT 4
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 3
63776: NEG
63777: PUSH
63778: LD_INT 3
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 4
63788: NEG
63789: PUSH
63790: LD_INT 3
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 5
63800: NEG
63801: PUSH
63802: LD_INT 4
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 5
63812: NEG
63813: PUSH
63814: LD_INT 5
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: LD_INT 5
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 5
63836: NEG
63837: PUSH
63838: LD_INT 3
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: LD_INT 3
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: LD_INT 4
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: LD_INT 3
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 2
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: LD_INT 3
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: LD_INT 4
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 2
63927: PUSH
63928: LD_INT 2
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 2
63938: NEG
63939: PUSH
63940: LD_INT 4
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 4
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 4
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 5
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 5
63981: PUSH
63982: LD_INT 1
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 4
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 3
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 3
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 3
64022: PUSH
64023: LD_INT 2
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 5
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64088: LD_ADDR_VAR 0 32
64092: PUSH
64093: LD_INT 4
64095: NEG
64096: PUSH
64097: LD_INT 0
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 4
64106: NEG
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 3
64118: NEG
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 3
64129: NEG
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 4
64140: NEG
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 5
64151: NEG
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 5
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 5
64174: NEG
64175: PUSH
64176: LD_INT 2
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 3
64186: NEG
64187: PUSH
64188: LD_INT 2
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 3
64209: NEG
64210: PUSH
64211: LD_INT 4
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: LD_INT 3
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 3
64245: NEG
64246: PUSH
64247: LD_INT 2
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 4
64257: NEG
64258: PUSH
64259: LD_INT 3
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 4
64269: NEG
64270: PUSH
64271: LD_INT 4
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: LD_INT 4
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 4
64293: NEG
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: LD_INT 4
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: LD_INT 5
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: LD_INT 4
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: LD_INT 3
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 3
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 4
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: LD_INT 5
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: PUSH
64385: LD_INT 3
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: LD_INT 5
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 3
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 3
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 4
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 4
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 3
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: LD_INT 1
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 2
64479: PUSH
64480: LD_INT 2
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 4
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 4
64500: PUSH
64501: LD_INT 4
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 4
64510: PUSH
64511: LD_INT 3
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 5
64520: PUSH
64521: LD_INT 4
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 5
64530: PUSH
64531: LD_INT 5
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 4
64540: PUSH
64541: LD_INT 5
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 3
64550: PUSH
64551: LD_INT 4
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: LD_INT 3
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 5
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 3
64580: PUSH
64581: LD_INT 5
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64635: LD_ADDR_VAR 0 33
64639: PUSH
64640: LD_INT 4
64642: NEG
64643: PUSH
64644: LD_INT 4
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 4
64654: NEG
64655: PUSH
64656: LD_INT 5
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: LD_INT 4
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 4
64690: NEG
64691: PUSH
64692: LD_INT 3
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 5
64702: NEG
64703: PUSH
64704: LD_INT 4
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 5
64714: NEG
64715: PUSH
64716: LD_INT 5
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: LD_INT 5
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 5
64738: NEG
64739: PUSH
64740: LD_INT 3
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: LD_INT 3
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 4
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: LD_INT 3
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: LD_INT 2
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 2
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: LD_INT 3
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: LD_INT 4
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: NEG
64841: PUSH
64842: LD_INT 4
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 4
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 4
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 5
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 5
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 4
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 3
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 3
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 3
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 5
64935: PUSH
64936: LD_INT 2
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 3
64945: PUSH
64946: LD_INT 3
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 3
64955: PUSH
64956: LD_INT 2
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 4
64965: PUSH
64966: LD_INT 3
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 4
64975: PUSH
64976: LD_INT 4
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 3
64985: PUSH
64986: LD_INT 4
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 2
64995: PUSH
64996: LD_INT 3
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 2
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 4
65015: PUSH
65016: LD_INT 2
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: LD_INT 4
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: LD_INT 4
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: LD_INT 3
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: LD_INT 4
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: LD_INT 5
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: LD_INT 5
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: LD_INT 4
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: LD_INT 5
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: LD_INT 3
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65173: LD_ADDR_VAR 0 34
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: LD_INT 4
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: LD_INT 5
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: PUSH
65203: LD_INT 4
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: LD_INT 3
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: LD_INT 4
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: LD_INT 5
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 2
65259: PUSH
65260: LD_INT 3
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: LD_INT 5
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 3
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 3
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 4
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 4
65313: PUSH
65314: LD_INT 1
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 3
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 2
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 2
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 4
65365: PUSH
65366: LD_INT 2
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 4
65375: PUSH
65376: LD_INT 4
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 4
65385: PUSH
65386: LD_INT 3
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 5
65395: PUSH
65396: LD_INT 4
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 5
65405: PUSH
65406: LD_INT 5
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 4
65415: PUSH
65416: LD_INT 5
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 3
65425: PUSH
65426: LD_INT 4
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: LD_INT 3
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 5
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 3
65455: PUSH
65456: LD_INT 5
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: LD_INT 3
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 2
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: LD_INT 3
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: LD_INT 4
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: LD_INT 4
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 2
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 2
65547: NEG
65548: PUSH
65549: LD_INT 2
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 4
65558: NEG
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 4
65569: NEG
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 3
65581: NEG
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 3
65592: NEG
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 4
65603: NEG
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 5
65614: NEG
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 5
65625: NEG
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 5
65637: NEG
65638: PUSH
65639: LD_INT 2
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 3
65649: NEG
65650: PUSH
65651: LD_INT 2
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: ST_TO_ADDR
// end ; end ;
65705: GO 65708
65707: POP
// case btype of b_depot , b_warehouse :
65708: LD_VAR 0 1
65712: PUSH
65713: LD_INT 0
65715: DOUBLE
65716: EQUAL
65717: IFTRUE 65727
65719: LD_INT 1
65721: DOUBLE
65722: EQUAL
65723: IFTRUE 65727
65725: GO 65928
65727: POP
// case nation of nation_american :
65728: LD_VAR 0 5
65732: PUSH
65733: LD_INT 1
65735: DOUBLE
65736: EQUAL
65737: IFTRUE 65741
65739: GO 65797
65741: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65742: LD_ADDR_VAR 0 9
65746: PUSH
65747: LD_VAR 0 11
65751: PUSH
65752: LD_VAR 0 12
65756: PUSH
65757: LD_VAR 0 13
65761: PUSH
65762: LD_VAR 0 14
65766: PUSH
65767: LD_VAR 0 15
65771: PUSH
65772: LD_VAR 0 16
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: PUSH
65785: LD_VAR 0 4
65789: PUSH
65790: LD_INT 1
65792: PLUS
65793: ARRAY
65794: ST_TO_ADDR
65795: GO 65926
65797: LD_INT 2
65799: DOUBLE
65800: EQUAL
65801: IFTRUE 65805
65803: GO 65861
65805: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65806: LD_ADDR_VAR 0 9
65810: PUSH
65811: LD_VAR 0 17
65815: PUSH
65816: LD_VAR 0 18
65820: PUSH
65821: LD_VAR 0 19
65825: PUSH
65826: LD_VAR 0 20
65830: PUSH
65831: LD_VAR 0 21
65835: PUSH
65836: LD_VAR 0 22
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: PUSH
65849: LD_VAR 0 4
65853: PUSH
65854: LD_INT 1
65856: PLUS
65857: ARRAY
65858: ST_TO_ADDR
65859: GO 65926
65861: LD_INT 3
65863: DOUBLE
65864: EQUAL
65865: IFTRUE 65869
65867: GO 65925
65869: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65870: LD_ADDR_VAR 0 9
65874: PUSH
65875: LD_VAR 0 23
65879: PUSH
65880: LD_VAR 0 24
65884: PUSH
65885: LD_VAR 0 25
65889: PUSH
65890: LD_VAR 0 26
65894: PUSH
65895: LD_VAR 0 27
65899: PUSH
65900: LD_VAR 0 28
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: PUSH
65913: LD_VAR 0 4
65917: PUSH
65918: LD_INT 1
65920: PLUS
65921: ARRAY
65922: ST_TO_ADDR
65923: GO 65926
65925: POP
65926: GO 66481
65928: LD_INT 2
65930: DOUBLE
65931: EQUAL
65932: IFTRUE 65942
65934: LD_INT 3
65936: DOUBLE
65937: EQUAL
65938: IFTRUE 65942
65940: GO 65998
65942: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65943: LD_ADDR_VAR 0 9
65947: PUSH
65948: LD_VAR 0 29
65952: PUSH
65953: LD_VAR 0 30
65957: PUSH
65958: LD_VAR 0 31
65962: PUSH
65963: LD_VAR 0 32
65967: PUSH
65968: LD_VAR 0 33
65972: PUSH
65973: LD_VAR 0 34
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: PUSH
65986: LD_VAR 0 4
65990: PUSH
65991: LD_INT 1
65993: PLUS
65994: ARRAY
65995: ST_TO_ADDR
65996: GO 66481
65998: LD_INT 16
66000: DOUBLE
66001: EQUAL
66002: IFTRUE 66060
66004: LD_INT 17
66006: DOUBLE
66007: EQUAL
66008: IFTRUE 66060
66010: LD_INT 18
66012: DOUBLE
66013: EQUAL
66014: IFTRUE 66060
66016: LD_INT 19
66018: DOUBLE
66019: EQUAL
66020: IFTRUE 66060
66022: LD_INT 22
66024: DOUBLE
66025: EQUAL
66026: IFTRUE 66060
66028: LD_INT 20
66030: DOUBLE
66031: EQUAL
66032: IFTRUE 66060
66034: LD_INT 21
66036: DOUBLE
66037: EQUAL
66038: IFTRUE 66060
66040: LD_INT 23
66042: DOUBLE
66043: EQUAL
66044: IFTRUE 66060
66046: LD_INT 24
66048: DOUBLE
66049: EQUAL
66050: IFTRUE 66060
66052: LD_INT 25
66054: DOUBLE
66055: EQUAL
66056: IFTRUE 66060
66058: GO 66116
66060: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66061: LD_ADDR_VAR 0 9
66065: PUSH
66066: LD_VAR 0 35
66070: PUSH
66071: LD_VAR 0 36
66075: PUSH
66076: LD_VAR 0 37
66080: PUSH
66081: LD_VAR 0 38
66085: PUSH
66086: LD_VAR 0 39
66090: PUSH
66091: LD_VAR 0 40
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: PUSH
66104: LD_VAR 0 4
66108: PUSH
66109: LD_INT 1
66111: PLUS
66112: ARRAY
66113: ST_TO_ADDR
66114: GO 66481
66116: LD_INT 6
66118: DOUBLE
66119: EQUAL
66120: IFTRUE 66172
66122: LD_INT 7
66124: DOUBLE
66125: EQUAL
66126: IFTRUE 66172
66128: LD_INT 8
66130: DOUBLE
66131: EQUAL
66132: IFTRUE 66172
66134: LD_INT 13
66136: DOUBLE
66137: EQUAL
66138: IFTRUE 66172
66140: LD_INT 12
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66172
66146: LD_INT 15
66148: DOUBLE
66149: EQUAL
66150: IFTRUE 66172
66152: LD_INT 11
66154: DOUBLE
66155: EQUAL
66156: IFTRUE 66172
66158: LD_INT 14
66160: DOUBLE
66161: EQUAL
66162: IFTRUE 66172
66164: LD_INT 10
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66172
66170: GO 66228
66172: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66173: LD_ADDR_VAR 0 9
66177: PUSH
66178: LD_VAR 0 41
66182: PUSH
66183: LD_VAR 0 42
66187: PUSH
66188: LD_VAR 0 43
66192: PUSH
66193: LD_VAR 0 44
66197: PUSH
66198: LD_VAR 0 45
66202: PUSH
66203: LD_VAR 0 46
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: PUSH
66216: LD_VAR 0 4
66220: PUSH
66221: LD_INT 1
66223: PLUS
66224: ARRAY
66225: ST_TO_ADDR
66226: GO 66481
66228: LD_INT 36
66230: DOUBLE
66231: EQUAL
66232: IFTRUE 66236
66234: GO 66292
66236: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66237: LD_ADDR_VAR 0 9
66241: PUSH
66242: LD_VAR 0 47
66246: PUSH
66247: LD_VAR 0 48
66251: PUSH
66252: LD_VAR 0 49
66256: PUSH
66257: LD_VAR 0 50
66261: PUSH
66262: LD_VAR 0 51
66266: PUSH
66267: LD_VAR 0 52
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: PUSH
66280: LD_VAR 0 4
66284: PUSH
66285: LD_INT 1
66287: PLUS
66288: ARRAY
66289: ST_TO_ADDR
66290: GO 66481
66292: LD_INT 4
66294: DOUBLE
66295: EQUAL
66296: IFTRUE 66318
66298: LD_INT 5
66300: DOUBLE
66301: EQUAL
66302: IFTRUE 66318
66304: LD_INT 34
66306: DOUBLE
66307: EQUAL
66308: IFTRUE 66318
66310: LD_INT 37
66312: DOUBLE
66313: EQUAL
66314: IFTRUE 66318
66316: GO 66374
66318: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66319: LD_ADDR_VAR 0 9
66323: PUSH
66324: LD_VAR 0 53
66328: PUSH
66329: LD_VAR 0 54
66333: PUSH
66334: LD_VAR 0 55
66338: PUSH
66339: LD_VAR 0 56
66343: PUSH
66344: LD_VAR 0 57
66348: PUSH
66349: LD_VAR 0 58
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: PUSH
66362: LD_VAR 0 4
66366: PUSH
66367: LD_INT 1
66369: PLUS
66370: ARRAY
66371: ST_TO_ADDR
66372: GO 66481
66374: LD_INT 31
66376: DOUBLE
66377: EQUAL
66378: IFTRUE 66424
66380: LD_INT 32
66382: DOUBLE
66383: EQUAL
66384: IFTRUE 66424
66386: LD_INT 33
66388: DOUBLE
66389: EQUAL
66390: IFTRUE 66424
66392: LD_INT 27
66394: DOUBLE
66395: EQUAL
66396: IFTRUE 66424
66398: LD_INT 26
66400: DOUBLE
66401: EQUAL
66402: IFTRUE 66424
66404: LD_INT 28
66406: DOUBLE
66407: EQUAL
66408: IFTRUE 66424
66410: LD_INT 29
66412: DOUBLE
66413: EQUAL
66414: IFTRUE 66424
66416: LD_INT 30
66418: DOUBLE
66419: EQUAL
66420: IFTRUE 66424
66422: GO 66480
66424: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66425: LD_ADDR_VAR 0 9
66429: PUSH
66430: LD_VAR 0 59
66434: PUSH
66435: LD_VAR 0 60
66439: PUSH
66440: LD_VAR 0 61
66444: PUSH
66445: LD_VAR 0 62
66449: PUSH
66450: LD_VAR 0 63
66454: PUSH
66455: LD_VAR 0 64
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: PUSH
66468: LD_VAR 0 4
66472: PUSH
66473: LD_INT 1
66475: PLUS
66476: ARRAY
66477: ST_TO_ADDR
66478: GO 66481
66480: POP
// temp_list2 = [ ] ;
66481: LD_ADDR_VAR 0 10
66485: PUSH
66486: EMPTY
66487: ST_TO_ADDR
// for i in temp_list do
66488: LD_ADDR_VAR 0 8
66492: PUSH
66493: LD_VAR 0 9
66497: PUSH
66498: FOR_IN
66499: IFFALSE 66551
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66501: LD_ADDR_VAR 0 10
66505: PUSH
66506: LD_VAR 0 10
66510: PUSH
66511: LD_VAR 0 8
66515: PUSH
66516: LD_INT 1
66518: ARRAY
66519: PUSH
66520: LD_VAR 0 2
66524: PLUS
66525: PUSH
66526: LD_VAR 0 8
66530: PUSH
66531: LD_INT 2
66533: ARRAY
66534: PUSH
66535: LD_VAR 0 3
66539: PLUS
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: ADD
66548: ST_TO_ADDR
66549: GO 66498
66551: POP
66552: POP
// result = temp_list2 ;
66553: LD_ADDR_VAR 0 7
66557: PUSH
66558: LD_VAR 0 10
66562: ST_TO_ADDR
// end ;
66563: LD_VAR 0 7
66567: RET
// export function EnemyInRange ( unit , dist ) ; begin
66568: LD_INT 0
66570: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66571: LD_ADDR_VAR 0 3
66575: PUSH
66576: LD_VAR 0 1
66580: PPUSH
66581: CALL_OW 255
66585: PPUSH
66586: LD_VAR 0 1
66590: PPUSH
66591: CALL_OW 250
66595: PPUSH
66596: LD_VAR 0 1
66600: PPUSH
66601: CALL_OW 251
66605: PPUSH
66606: LD_VAR 0 2
66610: PPUSH
66611: CALL 39825 0 4
66615: PUSH
66616: LD_INT 4
66618: ARRAY
66619: ST_TO_ADDR
// end ;
66620: LD_VAR 0 3
66624: RET
// export function PlayerSeeMe ( unit ) ; begin
66625: LD_INT 0
66627: PPUSH
// result := See ( your_side , unit ) ;
66628: LD_ADDR_VAR 0 2
66632: PUSH
66633: LD_OWVAR 2
66637: PPUSH
66638: LD_VAR 0 1
66642: PPUSH
66643: CALL_OW 292
66647: ST_TO_ADDR
// end ;
66648: LD_VAR 0 2
66652: RET
// export function ReverseDir ( unit ) ; begin
66653: LD_INT 0
66655: PPUSH
// if not unit then
66656: LD_VAR 0 1
66660: NOT
66661: IFFALSE 66665
// exit ;
66663: GO 66688
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66665: LD_ADDR_VAR 0 2
66669: PUSH
66670: LD_VAR 0 1
66674: PPUSH
66675: CALL_OW 254
66679: PUSH
66680: LD_INT 3
66682: PLUS
66683: PUSH
66684: LD_INT 6
66686: MOD
66687: ST_TO_ADDR
// end ;
66688: LD_VAR 0 2
66692: RET
// export function ReverseArray ( array ) ; var i ; begin
66693: LD_INT 0
66695: PPUSH
66696: PPUSH
// if not array then
66697: LD_VAR 0 1
66701: NOT
66702: IFFALSE 66706
// exit ;
66704: GO 66761
// result := [ ] ;
66706: LD_ADDR_VAR 0 2
66710: PUSH
66711: EMPTY
66712: ST_TO_ADDR
// for i := array downto 1 do
66713: LD_ADDR_VAR 0 3
66717: PUSH
66718: DOUBLE
66719: LD_VAR 0 1
66723: INC
66724: ST_TO_ADDR
66725: LD_INT 1
66727: PUSH
66728: FOR_DOWNTO
66729: IFFALSE 66759
// result := Join ( result , array [ i ] ) ;
66731: LD_ADDR_VAR 0 2
66735: PUSH
66736: LD_VAR 0 2
66740: PPUSH
66741: LD_VAR 0 1
66745: PUSH
66746: LD_VAR 0 3
66750: ARRAY
66751: PPUSH
66752: CALL 71613 0 2
66756: ST_TO_ADDR
66757: GO 66728
66759: POP
66760: POP
// end ;
66761: LD_VAR 0 2
66765: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66766: LD_INT 0
66768: PPUSH
66769: PPUSH
66770: PPUSH
66771: PPUSH
66772: PPUSH
66773: PPUSH
// if not unit or not hexes then
66774: LD_VAR 0 1
66778: NOT
66779: IFTRUE 66788
66781: PUSH
66782: LD_VAR 0 2
66786: NOT
66787: OR
66788: IFFALSE 66792
// exit ;
66790: GO 66915
// dist := 9999 ;
66792: LD_ADDR_VAR 0 5
66796: PUSH
66797: LD_INT 9999
66799: ST_TO_ADDR
// for i = 1 to hexes do
66800: LD_ADDR_VAR 0 4
66804: PUSH
66805: DOUBLE
66806: LD_INT 1
66808: DEC
66809: ST_TO_ADDR
66810: LD_VAR 0 2
66814: PUSH
66815: FOR_TO
66816: IFFALSE 66903
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66818: LD_ADDR_VAR 0 6
66822: PUSH
66823: LD_VAR 0 1
66827: PPUSH
66828: LD_VAR 0 2
66832: PUSH
66833: LD_VAR 0 4
66837: ARRAY
66838: PUSH
66839: LD_INT 1
66841: ARRAY
66842: PPUSH
66843: LD_VAR 0 2
66847: PUSH
66848: LD_VAR 0 4
66852: ARRAY
66853: PUSH
66854: LD_INT 2
66856: ARRAY
66857: PPUSH
66858: CALL_OW 297
66862: ST_TO_ADDR
// if tdist < dist then
66863: LD_VAR 0 6
66867: PUSH
66868: LD_VAR 0 5
66872: LESS
66873: IFFALSE 66901
// begin hex := hexes [ i ] ;
66875: LD_ADDR_VAR 0 8
66879: PUSH
66880: LD_VAR 0 2
66884: PUSH
66885: LD_VAR 0 4
66889: ARRAY
66890: ST_TO_ADDR
// dist := tdist ;
66891: LD_ADDR_VAR 0 5
66895: PUSH
66896: LD_VAR 0 6
66900: ST_TO_ADDR
// end ; end ;
66901: GO 66815
66903: POP
66904: POP
// result := hex ;
66905: LD_ADDR_VAR 0 3
66909: PUSH
66910: LD_VAR 0 8
66914: ST_TO_ADDR
// end ;
66915: LD_VAR 0 3
66919: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66920: LD_INT 0
66922: PPUSH
66923: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66924: LD_VAR 0 1
66928: NOT
66929: IFTRUE 66968
66931: PUSH
66932: LD_VAR 0 1
66936: PUSH
66937: LD_INT 21
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 23
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PPUSH
66961: CALL_OW 69
66965: IN
66966: NOT
66967: OR
66968: IFFALSE 66972
// exit ;
66970: GO 67019
// for i = 1 to 3 do
66972: LD_ADDR_VAR 0 3
66976: PUSH
66977: DOUBLE
66978: LD_INT 1
66980: DEC
66981: ST_TO_ADDR
66982: LD_INT 3
66984: PUSH
66985: FOR_TO
66986: IFFALSE 67017
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66988: LD_VAR 0 1
66992: PPUSH
66993: CALL_OW 250
66997: PPUSH
66998: LD_VAR 0 1
67002: PPUSH
67003: CALL_OW 251
67007: PPUSH
67008: LD_INT 1
67010: PPUSH
67011: CALL_OW 453
67015: GO 66985
67017: POP
67018: POP
// end ;
67019: LD_VAR 0 2
67023: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67024: LD_INT 0
67026: PPUSH
67027: PPUSH
67028: PPUSH
67029: PPUSH
67030: PPUSH
67031: PPUSH
// if not unit or not enemy_unit then
67032: LD_VAR 0 1
67036: NOT
67037: IFTRUE 67046
67039: PUSH
67040: LD_VAR 0 2
67044: NOT
67045: OR
67046: IFFALSE 67050
// exit ;
67048: GO 67531
// if GetLives ( i ) < 250 then
67050: LD_VAR 0 4
67054: PPUSH
67055: CALL_OW 256
67059: PUSH
67060: LD_INT 250
67062: LESS
67063: IFFALSE 67076
// begin ComAutodestruct ( i ) ;
67065: LD_VAR 0 4
67069: PPUSH
67070: CALL 66920 0 1
// exit ;
67074: GO 67531
// end ; x := GetX ( enemy_unit ) ;
67076: LD_ADDR_VAR 0 7
67080: PUSH
67081: LD_VAR 0 2
67085: PPUSH
67086: CALL_OW 250
67090: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67091: LD_ADDR_VAR 0 8
67095: PUSH
67096: LD_VAR 0 2
67100: PPUSH
67101: CALL_OW 251
67105: ST_TO_ADDR
// if not x or not y then
67106: LD_VAR 0 7
67110: NOT
67111: IFTRUE 67120
67113: PUSH
67114: LD_VAR 0 8
67118: NOT
67119: OR
67120: IFFALSE 67124
// exit ;
67122: GO 67531
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67124: LD_ADDR_VAR 0 6
67128: PUSH
67129: LD_VAR 0 7
67133: PPUSH
67134: LD_INT 0
67136: PPUSH
67137: LD_INT 4
67139: PPUSH
67140: CALL_OW 272
67144: PUSH
67145: LD_VAR 0 8
67149: PPUSH
67150: LD_INT 0
67152: PPUSH
67153: LD_INT 4
67155: PPUSH
67156: CALL_OW 273
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_VAR 0 7
67169: PPUSH
67170: LD_INT 1
67172: PPUSH
67173: LD_INT 4
67175: PPUSH
67176: CALL_OW 272
67180: PUSH
67181: LD_VAR 0 8
67185: PPUSH
67186: LD_INT 1
67188: PPUSH
67189: LD_INT 4
67191: PPUSH
67192: CALL_OW 273
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_VAR 0 7
67205: PPUSH
67206: LD_INT 2
67208: PPUSH
67209: LD_INT 4
67211: PPUSH
67212: CALL_OW 272
67216: PUSH
67217: LD_VAR 0 8
67221: PPUSH
67222: LD_INT 2
67224: PPUSH
67225: LD_INT 4
67227: PPUSH
67228: CALL_OW 273
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_VAR 0 7
67241: PPUSH
67242: LD_INT 3
67244: PPUSH
67245: LD_INT 4
67247: PPUSH
67248: CALL_OW 272
67252: PUSH
67253: LD_VAR 0 8
67257: PPUSH
67258: LD_INT 3
67260: PPUSH
67261: LD_INT 4
67263: PPUSH
67264: CALL_OW 273
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_VAR 0 7
67277: PPUSH
67278: LD_INT 4
67280: PPUSH
67281: LD_INT 4
67283: PPUSH
67284: CALL_OW 272
67288: PUSH
67289: LD_VAR 0 8
67293: PPUSH
67294: LD_INT 4
67296: PPUSH
67297: LD_INT 4
67299: PPUSH
67300: CALL_OW 273
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_VAR 0 7
67313: PPUSH
67314: LD_INT 5
67316: PPUSH
67317: LD_INT 4
67319: PPUSH
67320: CALL_OW 272
67324: PUSH
67325: LD_VAR 0 8
67329: PPUSH
67330: LD_INT 5
67332: PPUSH
67333: LD_INT 4
67335: PPUSH
67336: CALL_OW 273
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: ST_TO_ADDR
// for i = tmp downto 1 do
67353: LD_ADDR_VAR 0 4
67357: PUSH
67358: DOUBLE
67359: LD_VAR 0 6
67363: INC
67364: ST_TO_ADDR
67365: LD_INT 1
67367: PUSH
67368: FOR_DOWNTO
67369: IFFALSE 67472
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67371: LD_VAR 0 6
67375: PUSH
67376: LD_VAR 0 4
67380: ARRAY
67381: PUSH
67382: LD_INT 1
67384: ARRAY
67385: PPUSH
67386: LD_VAR 0 6
67390: PUSH
67391: LD_VAR 0 4
67395: ARRAY
67396: PUSH
67397: LD_INT 2
67399: ARRAY
67400: PPUSH
67401: CALL_OW 488
67405: NOT
67406: IFTRUE 67448
67408: PUSH
67409: LD_VAR 0 6
67413: PUSH
67414: LD_VAR 0 4
67418: ARRAY
67419: PUSH
67420: LD_INT 1
67422: ARRAY
67423: PPUSH
67424: LD_VAR 0 6
67428: PUSH
67429: LD_VAR 0 4
67433: ARRAY
67434: PUSH
67435: LD_INT 2
67437: ARRAY
67438: PPUSH
67439: CALL_OW 428
67443: PUSH
67444: LD_INT 0
67446: NONEQUAL
67447: OR
67448: IFFALSE 67470
// tmp := Delete ( tmp , i ) ;
67450: LD_ADDR_VAR 0 6
67454: PUSH
67455: LD_VAR 0 6
67459: PPUSH
67460: LD_VAR 0 4
67464: PPUSH
67465: CALL_OW 3
67469: ST_TO_ADDR
67470: GO 67368
67472: POP
67473: POP
// j := GetClosestHex ( unit , tmp ) ;
67474: LD_ADDR_VAR 0 5
67478: PUSH
67479: LD_VAR 0 1
67483: PPUSH
67484: LD_VAR 0 6
67488: PPUSH
67489: CALL 66766 0 2
67493: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67494: LD_VAR 0 1
67498: PPUSH
67499: LD_VAR 0 5
67503: PUSH
67504: LD_INT 1
67506: ARRAY
67507: PPUSH
67508: LD_VAR 0 5
67512: PUSH
67513: LD_INT 2
67515: ARRAY
67516: PPUSH
67517: CALL_OW 111
// result := j ;
67521: LD_ADDR_VAR 0 3
67525: PUSH
67526: LD_VAR 0 5
67530: ST_TO_ADDR
// end ;
67531: LD_VAR 0 3
67535: RET
// export function PrepareApemanSoldier ( ) ; begin
67536: LD_INT 0
67538: PPUSH
// uc_nation := 0 ;
67539: LD_ADDR_OWVAR 21
67543: PUSH
67544: LD_INT 0
67546: ST_TO_ADDR
// hc_sex := sex_male ;
67547: LD_ADDR_OWVAR 27
67551: PUSH
67552: LD_INT 1
67554: ST_TO_ADDR
// hc_name :=  ;
67555: LD_ADDR_OWVAR 26
67559: PUSH
67560: LD_STRING 
67562: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67563: LD_ADDR_OWVAR 28
67567: PUSH
67568: LD_INT 15
67570: ST_TO_ADDR
// hc_gallery :=  ;
67571: LD_ADDR_OWVAR 33
67575: PUSH
67576: LD_STRING 
67578: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67579: LD_ADDR_OWVAR 31
67583: PUSH
67584: LD_INT 0
67586: PPUSH
67587: LD_INT 3
67589: PPUSH
67590: CALL_OW 12
67594: PUSH
67595: LD_INT 0
67597: PPUSH
67598: LD_INT 3
67600: PPUSH
67601: CALL_OW 12
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67618: LD_ADDR_OWVAR 29
67622: PUSH
67623: LD_INT 10
67625: PUSH
67626: LD_INT 12
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: ST_TO_ADDR
// end ;
67633: LD_VAR 0 1
67637: RET
// export function PrepareApemanEngineer ( ) ; begin
67638: LD_INT 0
67640: PPUSH
// uc_nation := 0 ;
67641: LD_ADDR_OWVAR 21
67645: PUSH
67646: LD_INT 0
67648: ST_TO_ADDR
// hc_sex := sex_male ;
67649: LD_ADDR_OWVAR 27
67653: PUSH
67654: LD_INT 1
67656: ST_TO_ADDR
// hc_name :=  ;
67657: LD_ADDR_OWVAR 26
67661: PUSH
67662: LD_STRING 
67664: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67665: LD_ADDR_OWVAR 28
67669: PUSH
67670: LD_INT 16
67672: ST_TO_ADDR
// hc_gallery :=  ;
67673: LD_ADDR_OWVAR 33
67677: PUSH
67678: LD_STRING 
67680: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67681: LD_ADDR_OWVAR 31
67685: PUSH
67686: LD_INT 0
67688: PPUSH
67689: LD_INT 3
67691: PPUSH
67692: CALL_OW 12
67696: PUSH
67697: LD_INT 0
67699: PPUSH
67700: LD_INT 3
67702: PPUSH
67703: CALL_OW 12
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67720: LD_ADDR_OWVAR 29
67724: PUSH
67725: LD_INT 10
67727: PUSH
67728: LD_INT 12
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: ST_TO_ADDR
// end ;
67735: LD_VAR 0 1
67739: RET
// export function PrepareApeman ( agressivity ) ; begin
67740: LD_INT 0
67742: PPUSH
// uc_side := 0 ;
67743: LD_ADDR_OWVAR 20
67747: PUSH
67748: LD_INT 0
67750: ST_TO_ADDR
// uc_nation := 0 ;
67751: LD_ADDR_OWVAR 21
67755: PUSH
67756: LD_INT 0
67758: ST_TO_ADDR
// hc_sex := sex_male ;
67759: LD_ADDR_OWVAR 27
67763: PUSH
67764: LD_INT 1
67766: ST_TO_ADDR
// hc_class := class_apeman ;
67767: LD_ADDR_OWVAR 28
67771: PUSH
67772: LD_INT 12
67774: ST_TO_ADDR
// hc_gallery :=  ;
67775: LD_ADDR_OWVAR 33
67779: PUSH
67780: LD_STRING 
67782: ST_TO_ADDR
// hc_name :=  ;
67783: LD_ADDR_OWVAR 26
67787: PUSH
67788: LD_STRING 
67790: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
67791: LD_ADDR_OWVAR 29
67795: PUSH
67796: LD_INT 10
67798: PUSH
67799: LD_INT 12
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: ST_TO_ADDR
// if agressivity = 0 then
67806: LD_VAR 0 1
67810: PUSH
67811: LD_INT 0
67813: EQUAL
67814: IFFALSE 67826
// hc_agressivity := 0 else
67816: LD_ADDR_OWVAR 35
67820: PUSH
67821: LD_INT 0
67823: ST_TO_ADDR
67824: GO 67847
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67826: LD_ADDR_OWVAR 35
67830: PUSH
67831: LD_VAR 0 1
67835: NEG
67836: PPUSH
67837: LD_VAR 0 1
67841: PPUSH
67842: CALL_OW 12
67846: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67847: LD_ADDR_OWVAR 31
67851: PUSH
67852: LD_INT 0
67854: PPUSH
67855: LD_INT 3
67857: PPUSH
67858: CALL_OW 12
67862: PUSH
67863: LD_INT 0
67865: PPUSH
67866: LD_INT 3
67868: PPUSH
67869: CALL_OW 12
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: ST_TO_ADDR
// end ;
67886: LD_VAR 0 2
67890: RET
// export function PrepareTiger ( agressivity ) ; begin
67891: LD_INT 0
67893: PPUSH
// uc_side := 0 ;
67894: LD_ADDR_OWVAR 20
67898: PUSH
67899: LD_INT 0
67901: ST_TO_ADDR
// uc_nation := 0 ;
67902: LD_ADDR_OWVAR 21
67906: PUSH
67907: LD_INT 0
67909: ST_TO_ADDR
// InitHc ;
67910: CALL_OW 19
// hc_class := class_tiger ;
67914: LD_ADDR_OWVAR 28
67918: PUSH
67919: LD_INT 14
67921: ST_TO_ADDR
// hc_gallery :=  ;
67922: LD_ADDR_OWVAR 33
67926: PUSH
67927: LD_STRING 
67929: ST_TO_ADDR
// hc_name :=  ;
67930: LD_ADDR_OWVAR 26
67934: PUSH
67935: LD_STRING 
67937: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67938: LD_ADDR_OWVAR 35
67942: PUSH
67943: LD_VAR 0 1
67947: NEG
67948: PPUSH
67949: LD_VAR 0 1
67953: PPUSH
67954: CALL_OW 12
67958: ST_TO_ADDR
// end ;
67959: LD_VAR 0 2
67963: RET
// export function PrepareEnchidna ( ) ; begin
67964: LD_INT 0
67966: PPUSH
// uc_side := 0 ;
67967: LD_ADDR_OWVAR 20
67971: PUSH
67972: LD_INT 0
67974: ST_TO_ADDR
// uc_nation := 0 ;
67975: LD_ADDR_OWVAR 21
67979: PUSH
67980: LD_INT 0
67982: ST_TO_ADDR
// InitHc ;
67983: CALL_OW 19
// hc_class := class_baggie ;
67987: LD_ADDR_OWVAR 28
67991: PUSH
67992: LD_INT 13
67994: ST_TO_ADDR
// hc_gallery :=  ;
67995: LD_ADDR_OWVAR 33
67999: PUSH
68000: LD_STRING 
68002: ST_TO_ADDR
// hc_name :=  ;
68003: LD_ADDR_OWVAR 26
68007: PUSH
68008: LD_STRING 
68010: ST_TO_ADDR
// end ;
68011: LD_VAR 0 1
68015: RET
// export function PrepareFrog ( ) ; begin
68016: LD_INT 0
68018: PPUSH
// uc_side := 0 ;
68019: LD_ADDR_OWVAR 20
68023: PUSH
68024: LD_INT 0
68026: ST_TO_ADDR
// uc_nation := 0 ;
68027: LD_ADDR_OWVAR 21
68031: PUSH
68032: LD_INT 0
68034: ST_TO_ADDR
// InitHc ;
68035: CALL_OW 19
// hc_class := class_frog ;
68039: LD_ADDR_OWVAR 28
68043: PUSH
68044: LD_INT 19
68046: ST_TO_ADDR
// hc_gallery :=  ;
68047: LD_ADDR_OWVAR 33
68051: PUSH
68052: LD_STRING 
68054: ST_TO_ADDR
// hc_name :=  ;
68055: LD_ADDR_OWVAR 26
68059: PUSH
68060: LD_STRING 
68062: ST_TO_ADDR
// end ;
68063: LD_VAR 0 1
68067: RET
// export function PrepareFish ( ) ; begin
68068: LD_INT 0
68070: PPUSH
// uc_side := 0 ;
68071: LD_ADDR_OWVAR 20
68075: PUSH
68076: LD_INT 0
68078: ST_TO_ADDR
// uc_nation := 0 ;
68079: LD_ADDR_OWVAR 21
68083: PUSH
68084: LD_INT 0
68086: ST_TO_ADDR
// InitHc ;
68087: CALL_OW 19
// hc_class := class_fish ;
68091: LD_ADDR_OWVAR 28
68095: PUSH
68096: LD_INT 20
68098: ST_TO_ADDR
// hc_gallery :=  ;
68099: LD_ADDR_OWVAR 33
68103: PUSH
68104: LD_STRING 
68106: ST_TO_ADDR
// hc_name :=  ;
68107: LD_ADDR_OWVAR 26
68111: PUSH
68112: LD_STRING 
68114: ST_TO_ADDR
// end ;
68115: LD_VAR 0 1
68119: RET
// export function PrepareBird ( ) ; begin
68120: LD_INT 0
68122: PPUSH
// uc_side := 0 ;
68123: LD_ADDR_OWVAR 20
68127: PUSH
68128: LD_INT 0
68130: ST_TO_ADDR
// uc_nation := 0 ;
68131: LD_ADDR_OWVAR 21
68135: PUSH
68136: LD_INT 0
68138: ST_TO_ADDR
// InitHc ;
68139: CALL_OW 19
// hc_class := class_phororhacos ;
68143: LD_ADDR_OWVAR 28
68147: PUSH
68148: LD_INT 18
68150: ST_TO_ADDR
// hc_gallery :=  ;
68151: LD_ADDR_OWVAR 33
68155: PUSH
68156: LD_STRING 
68158: ST_TO_ADDR
// hc_name :=  ;
68159: LD_ADDR_OWVAR 26
68163: PUSH
68164: LD_STRING 
68166: ST_TO_ADDR
// end ;
68167: LD_VAR 0 1
68171: RET
// export function PrepareHorse ( ) ; begin
68172: LD_INT 0
68174: PPUSH
// uc_side := 0 ;
68175: LD_ADDR_OWVAR 20
68179: PUSH
68180: LD_INT 0
68182: ST_TO_ADDR
// uc_nation := 0 ;
68183: LD_ADDR_OWVAR 21
68187: PUSH
68188: LD_INT 0
68190: ST_TO_ADDR
// InitHc ;
68191: CALL_OW 19
// hc_class := class_horse ;
68195: LD_ADDR_OWVAR 28
68199: PUSH
68200: LD_INT 21
68202: ST_TO_ADDR
// hc_gallery :=  ;
68203: LD_ADDR_OWVAR 33
68207: PUSH
68208: LD_STRING 
68210: ST_TO_ADDR
// hc_name :=  ;
68211: LD_ADDR_OWVAR 26
68215: PUSH
68216: LD_STRING 
68218: ST_TO_ADDR
// end ;
68219: LD_VAR 0 1
68223: RET
// export function PrepareMastodont ( ) ; begin
68224: LD_INT 0
68226: PPUSH
// uc_side := 0 ;
68227: LD_ADDR_OWVAR 20
68231: PUSH
68232: LD_INT 0
68234: ST_TO_ADDR
// uc_nation := 0 ;
68235: LD_ADDR_OWVAR 21
68239: PUSH
68240: LD_INT 0
68242: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68243: LD_ADDR_OWVAR 37
68247: PUSH
68248: LD_INT 31
68250: ST_TO_ADDR
// vc_control := control_rider ;
68251: LD_ADDR_OWVAR 38
68255: PUSH
68256: LD_INT 4
68258: ST_TO_ADDR
// end ;
68259: LD_VAR 0 1
68263: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68264: LD_INT 0
68266: PPUSH
68267: PPUSH
68268: PPUSH
// uc_side = 0 ;
68269: LD_ADDR_OWVAR 20
68273: PUSH
68274: LD_INT 0
68276: ST_TO_ADDR
// uc_nation = 0 ;
68277: LD_ADDR_OWVAR 21
68281: PUSH
68282: LD_INT 0
68284: ST_TO_ADDR
// InitHc_All ( ) ;
68285: CALL_OW 584
// InitVc ;
68289: CALL_OW 20
// if mastodonts then
68293: LD_VAR 0 6
68297: IFFALSE 68364
// for i = 1 to mastodonts do
68299: LD_ADDR_VAR 0 11
68303: PUSH
68304: DOUBLE
68305: LD_INT 1
68307: DEC
68308: ST_TO_ADDR
68309: LD_VAR 0 6
68313: PUSH
68314: FOR_TO
68315: IFFALSE 68362
// begin vc_chassis := 31 ;
68317: LD_ADDR_OWVAR 37
68321: PUSH
68322: LD_INT 31
68324: ST_TO_ADDR
// vc_control := control_rider ;
68325: LD_ADDR_OWVAR 38
68329: PUSH
68330: LD_INT 4
68332: ST_TO_ADDR
// animal := CreateVehicle ;
68333: LD_ADDR_VAR 0 12
68337: PUSH
68338: CALL_OW 45
68342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68343: LD_VAR 0 12
68347: PPUSH
68348: LD_VAR 0 8
68352: PPUSH
68353: LD_INT 0
68355: PPUSH
68356: CALL 70506 0 3
// end ;
68360: GO 68314
68362: POP
68363: POP
// if horses then
68364: LD_VAR 0 5
68368: IFFALSE 68435
// for i = 1 to horses do
68370: LD_ADDR_VAR 0 11
68374: PUSH
68375: DOUBLE
68376: LD_INT 1
68378: DEC
68379: ST_TO_ADDR
68380: LD_VAR 0 5
68384: PUSH
68385: FOR_TO
68386: IFFALSE 68433
// begin hc_class := 21 ;
68388: LD_ADDR_OWVAR 28
68392: PUSH
68393: LD_INT 21
68395: ST_TO_ADDR
// hc_gallery :=  ;
68396: LD_ADDR_OWVAR 33
68400: PUSH
68401: LD_STRING 
68403: ST_TO_ADDR
// animal := CreateHuman ;
68404: LD_ADDR_VAR 0 12
68408: PUSH
68409: CALL_OW 44
68413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68414: LD_VAR 0 12
68418: PPUSH
68419: LD_VAR 0 8
68423: PPUSH
68424: LD_INT 0
68426: PPUSH
68427: CALL 70506 0 3
// end ;
68431: GO 68385
68433: POP
68434: POP
// if birds then
68435: LD_VAR 0 1
68439: IFFALSE 68506
// for i = 1 to birds do
68441: LD_ADDR_VAR 0 11
68445: PUSH
68446: DOUBLE
68447: LD_INT 1
68449: DEC
68450: ST_TO_ADDR
68451: LD_VAR 0 1
68455: PUSH
68456: FOR_TO
68457: IFFALSE 68504
// begin hc_class := 18 ;
68459: LD_ADDR_OWVAR 28
68463: PUSH
68464: LD_INT 18
68466: ST_TO_ADDR
// hc_gallery =  ;
68467: LD_ADDR_OWVAR 33
68471: PUSH
68472: LD_STRING 
68474: ST_TO_ADDR
// animal := CreateHuman ;
68475: LD_ADDR_VAR 0 12
68479: PUSH
68480: CALL_OW 44
68484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68485: LD_VAR 0 12
68489: PPUSH
68490: LD_VAR 0 8
68494: PPUSH
68495: LD_INT 0
68497: PPUSH
68498: CALL 70506 0 3
// end ;
68502: GO 68456
68504: POP
68505: POP
// if tigers then
68506: LD_VAR 0 2
68510: IFFALSE 68594
// for i = 1 to tigers do
68512: LD_ADDR_VAR 0 11
68516: PUSH
68517: DOUBLE
68518: LD_INT 1
68520: DEC
68521: ST_TO_ADDR
68522: LD_VAR 0 2
68526: PUSH
68527: FOR_TO
68528: IFFALSE 68592
// begin hc_class = class_tiger ;
68530: LD_ADDR_OWVAR 28
68534: PUSH
68535: LD_INT 14
68537: ST_TO_ADDR
// hc_gallery =  ;
68538: LD_ADDR_OWVAR 33
68542: PUSH
68543: LD_STRING 
68545: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68546: LD_ADDR_OWVAR 35
68550: PUSH
68551: LD_INT 7
68553: NEG
68554: PPUSH
68555: LD_INT 7
68557: PPUSH
68558: CALL_OW 12
68562: ST_TO_ADDR
// animal := CreateHuman ;
68563: LD_ADDR_VAR 0 12
68567: PUSH
68568: CALL_OW 44
68572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68573: LD_VAR 0 12
68577: PPUSH
68578: LD_VAR 0 8
68582: PPUSH
68583: LD_INT 0
68585: PPUSH
68586: CALL 70506 0 3
// end ;
68590: GO 68527
68592: POP
68593: POP
// if apemans then
68594: LD_VAR 0 3
68598: IFFALSE 68721
// for i = 1 to apemans do
68600: LD_ADDR_VAR 0 11
68604: PUSH
68605: DOUBLE
68606: LD_INT 1
68608: DEC
68609: ST_TO_ADDR
68610: LD_VAR 0 3
68614: PUSH
68615: FOR_TO
68616: IFFALSE 68719
// begin hc_class = class_apeman ;
68618: LD_ADDR_OWVAR 28
68622: PUSH
68623: LD_INT 12
68625: ST_TO_ADDR
// hc_gallery =  ;
68626: LD_ADDR_OWVAR 33
68630: PUSH
68631: LD_STRING 
68633: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68634: LD_ADDR_OWVAR 35
68638: PUSH
68639: LD_INT 2
68641: NEG
68642: PPUSH
68643: LD_INT 2
68645: PPUSH
68646: CALL_OW 12
68650: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68651: LD_ADDR_OWVAR 31
68655: PUSH
68656: LD_INT 1
68658: PPUSH
68659: LD_INT 3
68661: PPUSH
68662: CALL_OW 12
68666: PUSH
68667: LD_INT 1
68669: PPUSH
68670: LD_INT 3
68672: PPUSH
68673: CALL_OW 12
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: ST_TO_ADDR
// animal := CreateHuman ;
68690: LD_ADDR_VAR 0 12
68694: PUSH
68695: CALL_OW 44
68699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68700: LD_VAR 0 12
68704: PPUSH
68705: LD_VAR 0 8
68709: PPUSH
68710: LD_INT 0
68712: PPUSH
68713: CALL 70506 0 3
// end ;
68717: GO 68615
68719: POP
68720: POP
// if enchidnas then
68721: LD_VAR 0 4
68725: IFFALSE 68792
// for i = 1 to enchidnas do
68727: LD_ADDR_VAR 0 11
68731: PUSH
68732: DOUBLE
68733: LD_INT 1
68735: DEC
68736: ST_TO_ADDR
68737: LD_VAR 0 4
68741: PUSH
68742: FOR_TO
68743: IFFALSE 68790
// begin hc_class = 13 ;
68745: LD_ADDR_OWVAR 28
68749: PUSH
68750: LD_INT 13
68752: ST_TO_ADDR
// hc_gallery =  ;
68753: LD_ADDR_OWVAR 33
68757: PUSH
68758: LD_STRING 
68760: ST_TO_ADDR
// animal := CreateHuman ;
68761: LD_ADDR_VAR 0 12
68765: PUSH
68766: CALL_OW 44
68770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68771: LD_VAR 0 12
68775: PPUSH
68776: LD_VAR 0 8
68780: PPUSH
68781: LD_INT 0
68783: PPUSH
68784: CALL 70506 0 3
// end ;
68788: GO 68742
68790: POP
68791: POP
// if fishes then
68792: LD_VAR 0 7
68796: IFFALSE 68863
// for i = 1 to fishes do
68798: LD_ADDR_VAR 0 11
68802: PUSH
68803: DOUBLE
68804: LD_INT 1
68806: DEC
68807: ST_TO_ADDR
68808: LD_VAR 0 7
68812: PUSH
68813: FOR_TO
68814: IFFALSE 68861
// begin hc_class = 20 ;
68816: LD_ADDR_OWVAR 28
68820: PUSH
68821: LD_INT 20
68823: ST_TO_ADDR
// hc_gallery =  ;
68824: LD_ADDR_OWVAR 33
68828: PUSH
68829: LD_STRING 
68831: ST_TO_ADDR
// animal := CreateHuman ;
68832: LD_ADDR_VAR 0 12
68836: PUSH
68837: CALL_OW 44
68841: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68842: LD_VAR 0 12
68846: PPUSH
68847: LD_VAR 0 9
68851: PPUSH
68852: LD_INT 0
68854: PPUSH
68855: CALL 70506 0 3
// end ;
68859: GO 68813
68861: POP
68862: POP
// end ;
68863: LD_VAR 0 10
68867: RET
// export function WantHeal ( sci , unit ) ; begin
68868: LD_INT 0
68870: PPUSH
// if GetTaskList ( sci ) > 0 then
68871: LD_VAR 0 1
68875: PPUSH
68876: CALL_OW 437
68880: PUSH
68881: LD_INT 0
68883: GREATER
68884: IFFALSE 68956
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68886: LD_VAR 0 1
68890: PPUSH
68891: CALL_OW 437
68895: PUSH
68896: LD_INT 1
68898: ARRAY
68899: PUSH
68900: LD_INT 1
68902: ARRAY
68903: PUSH
68904: LD_STRING l
68906: EQUAL
68907: IFFALSE 68934
68909: PUSH
68910: LD_VAR 0 1
68914: PPUSH
68915: CALL_OW 437
68919: PUSH
68920: LD_INT 1
68922: ARRAY
68923: PUSH
68924: LD_INT 4
68926: ARRAY
68927: PUSH
68928: LD_VAR 0 2
68932: EQUAL
68933: AND
68934: IFFALSE 68946
// result := true else
68936: LD_ADDR_VAR 0 3
68940: PUSH
68941: LD_INT 1
68943: ST_TO_ADDR
68944: GO 68954
// result := false ;
68946: LD_ADDR_VAR 0 3
68950: PUSH
68951: LD_INT 0
68953: ST_TO_ADDR
// end else
68954: GO 68964
// result := false ;
68956: LD_ADDR_VAR 0 3
68960: PUSH
68961: LD_INT 0
68963: ST_TO_ADDR
// end ;
68964: LD_VAR 0 3
68968: RET
// export function HealTarget ( sci ) ; begin
68969: LD_INT 0
68971: PPUSH
// if not sci then
68972: LD_VAR 0 1
68976: NOT
68977: IFFALSE 68981
// exit ;
68979: GO 69046
// result := 0 ;
68981: LD_ADDR_VAR 0 2
68985: PUSH
68986: LD_INT 0
68988: ST_TO_ADDR
// if GetTaskList ( sci ) then
68989: LD_VAR 0 1
68993: PPUSH
68994: CALL_OW 437
68998: IFFALSE 69046
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69000: LD_VAR 0 1
69004: PPUSH
69005: CALL_OW 437
69009: PUSH
69010: LD_INT 1
69012: ARRAY
69013: PUSH
69014: LD_INT 1
69016: ARRAY
69017: PUSH
69018: LD_STRING l
69020: EQUAL
69021: IFFALSE 69046
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69023: LD_ADDR_VAR 0 2
69027: PUSH
69028: LD_VAR 0 1
69032: PPUSH
69033: CALL_OW 437
69037: PUSH
69038: LD_INT 1
69040: ARRAY
69041: PUSH
69042: LD_INT 4
69044: ARRAY
69045: ST_TO_ADDR
// end ;
69046: LD_VAR 0 2
69050: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69051: LD_INT 0
69053: PPUSH
69054: PPUSH
69055: PPUSH
69056: PPUSH
// if not base_units then
69057: LD_VAR 0 1
69061: NOT
69062: IFFALSE 69066
// exit ;
69064: GO 69153
// result := false ;
69066: LD_ADDR_VAR 0 2
69070: PUSH
69071: LD_INT 0
69073: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69074: LD_ADDR_VAR 0 5
69078: PUSH
69079: LD_VAR 0 1
69083: PPUSH
69084: LD_INT 21
69086: PUSH
69087: LD_INT 3
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PPUSH
69094: CALL_OW 72
69098: ST_TO_ADDR
// if not tmp then
69099: LD_VAR 0 5
69103: NOT
69104: IFFALSE 69108
// exit ;
69106: GO 69153
// for i in tmp do
69108: LD_ADDR_VAR 0 3
69112: PUSH
69113: LD_VAR 0 5
69117: PUSH
69118: FOR_IN
69119: IFFALSE 69151
// begin result := EnemyInRange ( i , 22 ) ;
69121: LD_ADDR_VAR 0 2
69125: PUSH
69126: LD_VAR 0 3
69130: PPUSH
69131: LD_INT 22
69133: PPUSH
69134: CALL 66568 0 2
69138: ST_TO_ADDR
// if result then
69139: LD_VAR 0 2
69143: IFFALSE 69149
// exit ;
69145: POP
69146: POP
69147: GO 69153
// end ;
69149: GO 69118
69151: POP
69152: POP
// end ;
69153: LD_VAR 0 2
69157: RET
// export function FilterByTag ( units , tag ) ; begin
69158: LD_INT 0
69160: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69161: LD_ADDR_VAR 0 3
69165: PUSH
69166: LD_VAR 0 1
69170: PPUSH
69171: LD_INT 120
69173: PUSH
69174: LD_VAR 0 2
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PPUSH
69183: CALL_OW 72
69187: ST_TO_ADDR
// end ;
69188: LD_VAR 0 3
69192: RET
// export function IsDriver ( un ) ; begin
69193: LD_INT 0
69195: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69196: LD_ADDR_VAR 0 2
69200: PUSH
69201: LD_VAR 0 1
69205: PUSH
69206: LD_INT 55
69208: PUSH
69209: EMPTY
69210: LIST
69211: PPUSH
69212: CALL_OW 69
69216: IN
69217: ST_TO_ADDR
// end ;
69218: LD_VAR 0 2
69222: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69223: LD_INT 0
69225: PPUSH
69226: PPUSH
// list := [ ] ;
69227: LD_ADDR_VAR 0 5
69231: PUSH
69232: EMPTY
69233: ST_TO_ADDR
// case d of 0 :
69234: LD_VAR 0 3
69238: PUSH
69239: LD_INT 0
69241: DOUBLE
69242: EQUAL
69243: IFTRUE 69247
69245: GO 69380
69247: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69248: LD_ADDR_VAR 0 5
69252: PUSH
69253: LD_VAR 0 1
69257: PUSH
69258: LD_INT 4
69260: MINUS
69261: PUSH
69262: LD_VAR 0 2
69266: PUSH
69267: LD_INT 4
69269: MINUS
69270: PUSH
69271: LD_INT 2
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: LIST
69278: PUSH
69279: LD_VAR 0 1
69283: PUSH
69284: LD_INT 3
69286: MINUS
69287: PUSH
69288: LD_VAR 0 2
69292: PUSH
69293: LD_INT 1
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: LIST
69300: PUSH
69301: LD_VAR 0 1
69305: PUSH
69306: LD_INT 4
69308: PLUS
69309: PUSH
69310: LD_VAR 0 2
69314: PUSH
69315: LD_INT 4
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: LIST
69322: PUSH
69323: LD_VAR 0 1
69327: PUSH
69328: LD_INT 3
69330: PLUS
69331: PUSH
69332: LD_VAR 0 2
69336: PUSH
69337: LD_INT 3
69339: PLUS
69340: PUSH
69341: LD_INT 5
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: LIST
69348: PUSH
69349: LD_VAR 0 1
69353: PUSH
69354: LD_VAR 0 2
69358: PUSH
69359: LD_INT 4
69361: PLUS
69362: PUSH
69363: LD_INT 0
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: LIST
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: ST_TO_ADDR
// end ; 1 :
69378: GO 70078
69380: LD_INT 1
69382: DOUBLE
69383: EQUAL
69384: IFTRUE 69388
69386: GO 69521
69388: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69389: LD_ADDR_VAR 0 5
69393: PUSH
69394: LD_VAR 0 1
69398: PUSH
69399: LD_VAR 0 2
69403: PUSH
69404: LD_INT 4
69406: MINUS
69407: PUSH
69408: LD_INT 3
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: PUSH
69416: LD_VAR 0 1
69420: PUSH
69421: LD_INT 3
69423: MINUS
69424: PUSH
69425: LD_VAR 0 2
69429: PUSH
69430: LD_INT 3
69432: MINUS
69433: PUSH
69434: LD_INT 2
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: LIST
69441: PUSH
69442: LD_VAR 0 1
69446: PUSH
69447: LD_INT 4
69449: MINUS
69450: PUSH
69451: LD_VAR 0 2
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: LIST
69463: PUSH
69464: LD_VAR 0 1
69468: PUSH
69469: LD_VAR 0 2
69473: PUSH
69474: LD_INT 3
69476: PLUS
69477: PUSH
69478: LD_INT 0
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: LIST
69485: PUSH
69486: LD_VAR 0 1
69490: PUSH
69491: LD_INT 4
69493: PLUS
69494: PUSH
69495: LD_VAR 0 2
69499: PUSH
69500: LD_INT 4
69502: PLUS
69503: PUSH
69504: LD_INT 5
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: LIST
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: ST_TO_ADDR
// end ; 2 :
69519: GO 70078
69521: LD_INT 2
69523: DOUBLE
69524: EQUAL
69525: IFTRUE 69529
69527: GO 69658
69529: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69530: LD_ADDR_VAR 0 5
69534: PUSH
69535: LD_VAR 0 1
69539: PUSH
69540: LD_VAR 0 2
69544: PUSH
69545: LD_INT 3
69547: MINUS
69548: PUSH
69549: LD_INT 3
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: LIST
69556: PUSH
69557: LD_VAR 0 1
69561: PUSH
69562: LD_INT 4
69564: PLUS
69565: PUSH
69566: LD_VAR 0 2
69570: PUSH
69571: LD_INT 4
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: LIST
69578: PUSH
69579: LD_VAR 0 1
69583: PUSH
69584: LD_VAR 0 2
69588: PUSH
69589: LD_INT 4
69591: PLUS
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: LIST
69600: PUSH
69601: LD_VAR 0 1
69605: PUSH
69606: LD_INT 3
69608: MINUS
69609: PUSH
69610: LD_VAR 0 2
69614: PUSH
69615: LD_INT 1
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: LIST
69622: PUSH
69623: LD_VAR 0 1
69627: PUSH
69628: LD_INT 4
69630: MINUS
69631: PUSH
69632: LD_VAR 0 2
69636: PUSH
69637: LD_INT 4
69639: MINUS
69640: PUSH
69641: LD_INT 2
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: LIST
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: ST_TO_ADDR
// end ; 3 :
69656: GO 70078
69658: LD_INT 3
69660: DOUBLE
69661: EQUAL
69662: IFTRUE 69666
69664: GO 69799
69666: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69667: LD_ADDR_VAR 0 5
69671: PUSH
69672: LD_VAR 0 1
69676: PUSH
69677: LD_INT 3
69679: PLUS
69680: PUSH
69681: LD_VAR 0 2
69685: PUSH
69686: LD_INT 4
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: PUSH
69694: LD_VAR 0 1
69698: PUSH
69699: LD_INT 4
69701: PLUS
69702: PUSH
69703: LD_VAR 0 2
69707: PUSH
69708: LD_INT 4
69710: PLUS
69711: PUSH
69712: LD_INT 5
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: LIST
69719: PUSH
69720: LD_VAR 0 1
69724: PUSH
69725: LD_INT 4
69727: MINUS
69728: PUSH
69729: LD_VAR 0 2
69733: PUSH
69734: LD_INT 1
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: PUSH
69742: LD_VAR 0 1
69746: PUSH
69747: LD_VAR 0 2
69751: PUSH
69752: LD_INT 4
69754: MINUS
69755: PUSH
69756: LD_INT 3
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: PUSH
69764: LD_VAR 0 1
69768: PUSH
69769: LD_INT 3
69771: MINUS
69772: PUSH
69773: LD_VAR 0 2
69777: PUSH
69778: LD_INT 3
69780: MINUS
69781: PUSH
69782: LD_INT 2
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: LIST
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: ST_TO_ADDR
// end ; 4 :
69797: GO 70078
69799: LD_INT 4
69801: DOUBLE
69802: EQUAL
69803: IFTRUE 69807
69805: GO 69940
69807: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69808: LD_ADDR_VAR 0 5
69812: PUSH
69813: LD_VAR 0 1
69817: PUSH
69818: LD_VAR 0 2
69822: PUSH
69823: LD_INT 4
69825: PLUS
69826: PUSH
69827: LD_INT 0
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: LIST
69834: PUSH
69835: LD_VAR 0 1
69839: PUSH
69840: LD_INT 3
69842: PLUS
69843: PUSH
69844: LD_VAR 0 2
69848: PUSH
69849: LD_INT 3
69851: PLUS
69852: PUSH
69853: LD_INT 5
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: LIST
69860: PUSH
69861: LD_VAR 0 1
69865: PUSH
69866: LD_INT 4
69868: PLUS
69869: PUSH
69870: LD_VAR 0 2
69874: PUSH
69875: LD_INT 4
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: LIST
69882: PUSH
69883: LD_VAR 0 1
69887: PUSH
69888: LD_VAR 0 2
69892: PUSH
69893: LD_INT 3
69895: MINUS
69896: PUSH
69897: LD_INT 3
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: LIST
69904: PUSH
69905: LD_VAR 0 1
69909: PUSH
69910: LD_INT 4
69912: MINUS
69913: PUSH
69914: LD_VAR 0 2
69918: PUSH
69919: LD_INT 4
69921: MINUS
69922: PUSH
69923: LD_INT 2
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: LIST
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: ST_TO_ADDR
// end ; 5 :
69938: GO 70078
69940: LD_INT 5
69942: DOUBLE
69943: EQUAL
69944: IFTRUE 69948
69946: GO 70077
69948: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69949: LD_ADDR_VAR 0 5
69953: PUSH
69954: LD_VAR 0 1
69958: PUSH
69959: LD_INT 4
69961: MINUS
69962: PUSH
69963: LD_VAR 0 2
69967: PUSH
69968: LD_INT 1
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: PUSH
69976: LD_VAR 0 1
69980: PUSH
69981: LD_VAR 0 2
69985: PUSH
69986: LD_INT 4
69988: MINUS
69989: PUSH
69990: LD_INT 3
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: LIST
69997: PUSH
69998: LD_VAR 0 1
70002: PUSH
70003: LD_INT 4
70005: PLUS
70006: PUSH
70007: LD_VAR 0 2
70011: PUSH
70012: LD_INT 4
70014: PLUS
70015: PUSH
70016: LD_INT 5
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: LIST
70023: PUSH
70024: LD_VAR 0 1
70028: PUSH
70029: LD_INT 3
70031: PLUS
70032: PUSH
70033: LD_VAR 0 2
70037: PUSH
70038: LD_INT 4
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: LIST
70045: PUSH
70046: LD_VAR 0 1
70050: PUSH
70051: LD_VAR 0 2
70055: PUSH
70056: LD_INT 3
70058: PLUS
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: LIST
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: ST_TO_ADDR
// end ; end ;
70075: GO 70078
70077: POP
// result := list ;
70078: LD_ADDR_VAR 0 4
70082: PUSH
70083: LD_VAR 0 5
70087: ST_TO_ADDR
// end ;
70088: LD_VAR 0 4
70092: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70093: LD_INT 0
70095: PPUSH
70096: PPUSH
70097: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70098: LD_VAR 0 1
70102: NOT
70103: IFTRUE 70131
70105: PUSH
70106: LD_VAR 0 2
70110: PUSH
70111: LD_INT 1
70113: PUSH
70114: LD_INT 2
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: LD_INT 4
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: IN
70129: NOT
70130: OR
70131: IFFALSE 70135
// exit ;
70133: GO 70218
// tmp := [ ] ;
70135: LD_ADDR_VAR 0 5
70139: PUSH
70140: EMPTY
70141: ST_TO_ADDR
// for i in units do
70142: LD_ADDR_VAR 0 4
70146: PUSH
70147: LD_VAR 0 1
70151: PUSH
70152: FOR_IN
70153: IFFALSE 70187
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70155: LD_ADDR_VAR 0 5
70159: PUSH
70160: LD_VAR 0 5
70164: PPUSH
70165: LD_VAR 0 4
70169: PPUSH
70170: LD_VAR 0 2
70174: PPUSH
70175: CALL_OW 259
70179: PPUSH
70180: CALL 71613 0 2
70184: ST_TO_ADDR
70185: GO 70152
70187: POP
70188: POP
// if not tmp then
70189: LD_VAR 0 5
70193: NOT
70194: IFFALSE 70198
// exit ;
70196: GO 70218
// result := SortListByListDesc ( units , tmp ) ;
70198: LD_ADDR_VAR 0 3
70202: PUSH
70203: LD_VAR 0 1
70207: PPUSH
70208: LD_VAR 0 5
70212: PPUSH
70213: CALL_OW 77
70217: ST_TO_ADDR
// end ;
70218: LD_VAR 0 3
70222: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70223: LD_INT 0
70225: PPUSH
70226: PPUSH
70227: PPUSH
// result := false ;
70228: LD_ADDR_VAR 0 3
70232: PUSH
70233: LD_INT 0
70235: ST_TO_ADDR
// if not building then
70236: LD_VAR 0 2
70240: NOT
70241: IFFALSE 70245
// exit ;
70243: GO 70389
// x := GetX ( building ) ;
70245: LD_ADDR_VAR 0 4
70249: PUSH
70250: LD_VAR 0 2
70254: PPUSH
70255: CALL_OW 250
70259: ST_TO_ADDR
// y := GetY ( building ) ;
70260: LD_ADDR_VAR 0 5
70264: PUSH
70265: LD_VAR 0 2
70269: PPUSH
70270: CALL_OW 251
70274: ST_TO_ADDR
// if not x or not y then
70275: LD_VAR 0 4
70279: NOT
70280: IFTRUE 70289
70282: PUSH
70283: LD_VAR 0 5
70287: NOT
70288: OR
70289: IFFALSE 70293
// exit ;
70291: GO 70389
// if GetTaskList ( unit ) then
70293: LD_VAR 0 1
70297: PPUSH
70298: CALL_OW 437
70302: IFFALSE 70389
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70304: LD_STRING e
70306: PUSH
70307: LD_VAR 0 1
70311: PPUSH
70312: CALL_OW 437
70316: PUSH
70317: LD_INT 1
70319: ARRAY
70320: PUSH
70321: LD_INT 1
70323: ARRAY
70324: EQUAL
70325: IFFALSE 70352
70327: PUSH
70328: LD_VAR 0 4
70332: PUSH
70333: LD_VAR 0 1
70337: PPUSH
70338: CALL_OW 437
70342: PUSH
70343: LD_INT 1
70345: ARRAY
70346: PUSH
70347: LD_INT 2
70349: ARRAY
70350: EQUAL
70351: AND
70352: IFFALSE 70379
70354: PUSH
70355: LD_VAR 0 5
70359: PUSH
70360: LD_VAR 0 1
70364: PPUSH
70365: CALL_OW 437
70369: PUSH
70370: LD_INT 1
70372: ARRAY
70373: PUSH
70374: LD_INT 3
70376: ARRAY
70377: EQUAL
70378: AND
70379: IFFALSE 70389
// result := true end ;
70381: LD_ADDR_VAR 0 3
70385: PUSH
70386: LD_INT 1
70388: ST_TO_ADDR
// end ;
70389: LD_VAR 0 3
70393: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70394: LD_INT 0
70396: PPUSH
// result := false ;
70397: LD_ADDR_VAR 0 4
70401: PUSH
70402: LD_INT 0
70404: ST_TO_ADDR
// if GetTaskList ( unit ) then
70405: LD_VAR 0 1
70409: PPUSH
70410: CALL_OW 437
70414: IFFALSE 70501
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70416: LD_STRING M
70418: PUSH
70419: LD_VAR 0 1
70423: PPUSH
70424: CALL_OW 437
70428: PUSH
70429: LD_INT 1
70431: ARRAY
70432: PUSH
70433: LD_INT 1
70435: ARRAY
70436: EQUAL
70437: IFFALSE 70464
70439: PUSH
70440: LD_VAR 0 2
70444: PUSH
70445: LD_VAR 0 1
70449: PPUSH
70450: CALL_OW 437
70454: PUSH
70455: LD_INT 1
70457: ARRAY
70458: PUSH
70459: LD_INT 2
70461: ARRAY
70462: EQUAL
70463: AND
70464: IFFALSE 70491
70466: PUSH
70467: LD_VAR 0 3
70471: PUSH
70472: LD_VAR 0 1
70476: PPUSH
70477: CALL_OW 437
70481: PUSH
70482: LD_INT 1
70484: ARRAY
70485: PUSH
70486: LD_INT 3
70488: ARRAY
70489: EQUAL
70490: AND
70491: IFFALSE 70501
// result := true ;
70493: LD_ADDR_VAR 0 4
70497: PUSH
70498: LD_INT 1
70500: ST_TO_ADDR
// end ; end ;
70501: LD_VAR 0 4
70505: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70506: LD_INT 0
70508: PPUSH
70509: PPUSH
70510: PPUSH
70511: PPUSH
// if not unit or not area then
70512: LD_VAR 0 1
70516: NOT
70517: IFTRUE 70526
70519: PUSH
70520: LD_VAR 0 2
70524: NOT
70525: OR
70526: IFFALSE 70530
// exit ;
70528: GO 70706
// tmp := AreaToList ( area , i ) ;
70530: LD_ADDR_VAR 0 6
70534: PUSH
70535: LD_VAR 0 2
70539: PPUSH
70540: LD_VAR 0 5
70544: PPUSH
70545: CALL_OW 517
70549: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70550: LD_ADDR_VAR 0 5
70554: PUSH
70555: DOUBLE
70556: LD_INT 1
70558: DEC
70559: ST_TO_ADDR
70560: LD_VAR 0 6
70564: PUSH
70565: LD_INT 1
70567: ARRAY
70568: PUSH
70569: FOR_TO
70570: IFFALSE 70704
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70572: LD_ADDR_VAR 0 7
70576: PUSH
70577: LD_VAR 0 6
70581: PUSH
70582: LD_INT 1
70584: ARRAY
70585: PUSH
70586: LD_VAR 0 5
70590: ARRAY
70591: PUSH
70592: LD_VAR 0 6
70596: PUSH
70597: LD_INT 2
70599: ARRAY
70600: PUSH
70601: LD_VAR 0 5
70605: ARRAY
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70611: LD_INT 92
70613: PUSH
70614: LD_VAR 0 7
70618: PUSH
70619: LD_INT 1
70621: ARRAY
70622: PUSH
70623: LD_VAR 0 7
70627: PUSH
70628: LD_INT 2
70630: ARRAY
70631: PUSH
70632: LD_INT 2
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: PPUSH
70641: CALL_OW 69
70645: PUSH
70646: LD_INT 0
70648: EQUAL
70649: IFFALSE 70702
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70651: LD_VAR 0 1
70655: PPUSH
70656: LD_VAR 0 7
70660: PUSH
70661: LD_INT 1
70663: ARRAY
70664: PPUSH
70665: LD_VAR 0 7
70669: PUSH
70670: LD_INT 2
70672: ARRAY
70673: PPUSH
70674: LD_VAR 0 3
70678: PPUSH
70679: CALL_OW 48
// result := IsPlaced ( unit ) ;
70683: LD_ADDR_VAR 0 4
70687: PUSH
70688: LD_VAR 0 1
70692: PPUSH
70693: CALL_OW 305
70697: ST_TO_ADDR
// exit ;
70698: POP
70699: POP
70700: GO 70706
// end ; end ;
70702: GO 70569
70704: POP
70705: POP
// end ;
70706: LD_VAR 0 4
70710: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70711: LD_INT 0
70713: PPUSH
70714: PPUSH
70715: PPUSH
// if not side or side > 8 then
70716: LD_VAR 0 1
70720: NOT
70721: IFTRUE 70733
70723: PUSH
70724: LD_VAR 0 1
70728: PUSH
70729: LD_INT 8
70731: GREATER
70732: OR
70733: IFFALSE 70737
// exit ;
70735: GO 70924
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70737: LD_ADDR_VAR 0 4
70741: PUSH
70742: LD_INT 22
70744: PUSH
70745: LD_VAR 0 1
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 21
70756: PUSH
70757: LD_INT 3
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PPUSH
70768: CALL_OW 69
70772: ST_TO_ADDR
// if not tmp then
70773: LD_VAR 0 4
70777: NOT
70778: IFFALSE 70782
// exit ;
70780: GO 70924
// enable_addtolog := true ;
70782: LD_ADDR_OWVAR 81
70786: PUSH
70787: LD_INT 1
70789: ST_TO_ADDR
// AddToLog ( [ ) ;
70790: LD_STRING [
70792: PPUSH
70793: CALL_OW 561
// for i in tmp do
70797: LD_ADDR_VAR 0 3
70801: PUSH
70802: LD_VAR 0 4
70806: PUSH
70807: FOR_IN
70808: IFFALSE 70915
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70810: LD_STRING [
70812: PUSH
70813: LD_VAR 0 3
70817: PPUSH
70818: CALL_OW 266
70822: STR
70823: PUSH
70824: LD_STRING , 
70826: STR
70827: PUSH
70828: LD_VAR 0 3
70832: PPUSH
70833: CALL_OW 250
70837: STR
70838: PUSH
70839: LD_STRING , 
70841: STR
70842: PUSH
70843: LD_VAR 0 3
70847: PPUSH
70848: CALL_OW 251
70852: STR
70853: PUSH
70854: LD_STRING , 
70856: STR
70857: PUSH
70858: LD_VAR 0 3
70862: PPUSH
70863: CALL_OW 254
70867: STR
70868: PUSH
70869: LD_STRING , 
70871: STR
70872: PUSH
70873: LD_VAR 0 3
70877: PPUSH
70878: LD_INT 1
70880: PPUSH
70881: CALL_OW 268
70885: STR
70886: PUSH
70887: LD_STRING , 
70889: STR
70890: PUSH
70891: LD_VAR 0 3
70895: PPUSH
70896: LD_INT 2
70898: PPUSH
70899: CALL_OW 268
70903: STR
70904: PUSH
70905: LD_STRING ],
70907: STR
70908: PPUSH
70909: CALL_OW 561
// end ;
70913: GO 70807
70915: POP
70916: POP
// AddToLog ( ]; ) ;
70917: LD_STRING ];
70919: PPUSH
70920: CALL_OW 561
// end ;
70924: LD_VAR 0 2
70928: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70929: LD_INT 0
70931: PPUSH
70932: PPUSH
70933: PPUSH
70934: PPUSH
70935: PPUSH
// if not area or not rate or not max then
70936: LD_VAR 0 1
70940: NOT
70941: IFTRUE 70950
70943: PUSH
70944: LD_VAR 0 2
70948: NOT
70949: OR
70950: IFTRUE 70959
70952: PUSH
70953: LD_VAR 0 4
70957: NOT
70958: OR
70959: IFFALSE 70963
// exit ;
70961: GO 71152
// while 1 do
70963: LD_INT 1
70965: IFFALSE 71152
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70967: LD_ADDR_VAR 0 9
70971: PUSH
70972: LD_VAR 0 1
70976: PPUSH
70977: LD_INT 1
70979: PPUSH
70980: CALL_OW 287
70984: PUSH
70985: LD_INT 10
70987: MUL
70988: ST_TO_ADDR
// r := rate / 10 ;
70989: LD_ADDR_VAR 0 7
70993: PUSH
70994: LD_VAR 0 2
70998: PUSH
70999: LD_INT 10
71001: DIVREAL
71002: ST_TO_ADDR
// time := 1 1$00 ;
71003: LD_ADDR_VAR 0 8
71007: PUSH
71008: LD_INT 2100
71010: ST_TO_ADDR
// if amount < min then
71011: LD_VAR 0 9
71015: PUSH
71016: LD_VAR 0 3
71020: LESS
71021: IFFALSE 71039
// r := r * 2 else
71023: LD_ADDR_VAR 0 7
71027: PUSH
71028: LD_VAR 0 7
71032: PUSH
71033: LD_INT 2
71035: MUL
71036: ST_TO_ADDR
71037: GO 71065
// if amount > max then
71039: LD_VAR 0 9
71043: PUSH
71044: LD_VAR 0 4
71048: GREATER
71049: IFFALSE 71065
// r := r / 2 ;
71051: LD_ADDR_VAR 0 7
71055: PUSH
71056: LD_VAR 0 7
71060: PUSH
71061: LD_INT 2
71063: DIVREAL
71064: ST_TO_ADDR
// time := time / r ;
71065: LD_ADDR_VAR 0 8
71069: PUSH
71070: LD_VAR 0 8
71074: PUSH
71075: LD_VAR 0 7
71079: DIVREAL
71080: ST_TO_ADDR
// if time < 0 then
71081: LD_VAR 0 8
71085: PUSH
71086: LD_INT 0
71088: LESS
71089: IFFALSE 71106
// time := time * - 1 ;
71091: LD_ADDR_VAR 0 8
71095: PUSH
71096: LD_VAR 0 8
71100: PUSH
71101: LD_INT 1
71103: NEG
71104: MUL
71105: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71106: LD_VAR 0 8
71110: PUSH
71111: LD_INT 35
71113: PPUSH
71114: LD_INT 875
71116: PPUSH
71117: CALL_OW 12
71121: PLUS
71122: PPUSH
71123: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71127: LD_INT 1
71129: PPUSH
71130: LD_INT 5
71132: PPUSH
71133: CALL_OW 12
71137: PPUSH
71138: LD_VAR 0 1
71142: PPUSH
71143: LD_INT 1
71145: PPUSH
71146: CALL_OW 55
// end ;
71150: GO 70963
// end ;
71152: LD_VAR 0 5
71156: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71157: LD_INT 0
71159: PPUSH
71160: PPUSH
71161: PPUSH
71162: PPUSH
71163: PPUSH
71164: PPUSH
71165: PPUSH
71166: PPUSH
// if not turrets or not factories then
71167: LD_VAR 0 1
71171: NOT
71172: IFTRUE 71181
71174: PUSH
71175: LD_VAR 0 2
71179: NOT
71180: OR
71181: IFFALSE 71185
// exit ;
71183: GO 71492
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71185: LD_ADDR_VAR 0 10
71189: PUSH
71190: LD_INT 5
71192: PUSH
71193: LD_INT 6
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 2
71202: PUSH
71203: LD_INT 4
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 3
71212: PUSH
71213: LD_INT 5
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 24
71227: PUSH
71228: LD_INT 25
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 23
71237: PUSH
71238: LD_INT 27
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 42
71251: PUSH
71252: LD_INT 43
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 44
71261: PUSH
71262: LD_INT 46
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 45
71271: PUSH
71272: LD_INT 47
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: LIST
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: LIST
71288: ST_TO_ADDR
// result := [ ] ;
71289: LD_ADDR_VAR 0 3
71293: PUSH
71294: EMPTY
71295: ST_TO_ADDR
// for i in turrets do
71296: LD_ADDR_VAR 0 4
71300: PUSH
71301: LD_VAR 0 1
71305: PUSH
71306: FOR_IN
71307: IFFALSE 71490
// begin nat := GetNation ( i ) ;
71309: LD_ADDR_VAR 0 7
71313: PUSH
71314: LD_VAR 0 4
71318: PPUSH
71319: CALL_OW 248
71323: ST_TO_ADDR
// weapon := 0 ;
71324: LD_ADDR_VAR 0 8
71328: PUSH
71329: LD_INT 0
71331: ST_TO_ADDR
// if not nat then
71332: LD_VAR 0 7
71336: NOT
71337: IFFALSE 71341
// continue ;
71339: GO 71306
// for j in list [ nat ] do
71341: LD_ADDR_VAR 0 5
71345: PUSH
71346: LD_VAR 0 10
71350: PUSH
71351: LD_VAR 0 7
71355: ARRAY
71356: PUSH
71357: FOR_IN
71358: IFFALSE 71399
// if GetBWeapon ( i ) = j [ 1 ] then
71360: LD_VAR 0 4
71364: PPUSH
71365: CALL_OW 269
71369: PUSH
71370: LD_VAR 0 5
71374: PUSH
71375: LD_INT 1
71377: ARRAY
71378: EQUAL
71379: IFFALSE 71397
// begin weapon := j [ 2 ] ;
71381: LD_ADDR_VAR 0 8
71385: PUSH
71386: LD_VAR 0 5
71390: PUSH
71391: LD_INT 2
71393: ARRAY
71394: ST_TO_ADDR
// break ;
71395: GO 71399
// end ;
71397: GO 71357
71399: POP
71400: POP
// if not weapon then
71401: LD_VAR 0 8
71405: NOT
71406: IFFALSE 71410
// continue ;
71408: GO 71306
// for k in factories do
71410: LD_ADDR_VAR 0 6
71414: PUSH
71415: LD_VAR 0 2
71419: PUSH
71420: FOR_IN
71421: IFFALSE 71486
// begin weapons := AvailableWeaponList ( k ) ;
71423: LD_ADDR_VAR 0 9
71427: PUSH
71428: LD_VAR 0 6
71432: PPUSH
71433: CALL_OW 478
71437: ST_TO_ADDR
// if not weapons then
71438: LD_VAR 0 9
71442: NOT
71443: IFFALSE 71447
// continue ;
71445: GO 71420
// if weapon in weapons then
71447: LD_VAR 0 8
71451: PUSH
71452: LD_VAR 0 9
71456: IN
71457: IFFALSE 71484
// begin result := [ i , weapon ] ;
71459: LD_ADDR_VAR 0 3
71463: PUSH
71464: LD_VAR 0 4
71468: PUSH
71469: LD_VAR 0 8
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: ST_TO_ADDR
// exit ;
71478: POP
71479: POP
71480: POP
71481: POP
71482: GO 71492
// end ; end ;
71484: GO 71420
71486: POP
71487: POP
// end ;
71488: GO 71306
71490: POP
71491: POP
// end ;
71492: LD_VAR 0 3
71496: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71497: LD_INT 0
71499: PPUSH
// if not side or side > 8 then
71500: LD_VAR 0 3
71504: NOT
71505: IFTRUE 71517
71507: PUSH
71508: LD_VAR 0 3
71512: PUSH
71513: LD_INT 8
71515: GREATER
71516: OR
71517: IFFALSE 71521
// exit ;
71519: GO 71580
// if not range then
71521: LD_VAR 0 4
71525: NOT
71526: IFFALSE 71537
// range := - 12 ;
71528: LD_ADDR_VAR 0 4
71532: PUSH
71533: LD_INT 12
71535: NEG
71536: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71537: LD_VAR 0 1
71541: PPUSH
71542: LD_VAR 0 2
71546: PPUSH
71547: LD_VAR 0 3
71551: PPUSH
71552: LD_VAR 0 4
71556: PPUSH
71557: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71561: LD_VAR 0 1
71565: PPUSH
71566: LD_VAR 0 2
71570: PPUSH
71571: LD_VAR 0 3
71575: PPUSH
71576: CALL_OW 331
// end ;
71580: LD_VAR 0 5
71584: RET
// export function Video ( mode ) ; begin
71585: LD_INT 0
71587: PPUSH
// ingame_video = mode ;
71588: LD_ADDR_OWVAR 52
71592: PUSH
71593: LD_VAR 0 1
71597: ST_TO_ADDR
// interface_hidden = mode ;
71598: LD_ADDR_OWVAR 54
71602: PUSH
71603: LD_VAR 0 1
71607: ST_TO_ADDR
// end ;
71608: LD_VAR 0 2
71612: RET
// export function Join ( array , element ) ; begin
71613: LD_INT 0
71615: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71616: LD_ADDR_VAR 0 3
71620: PUSH
71621: LD_VAR 0 1
71625: PPUSH
71626: LD_VAR 0 1
71630: PUSH
71631: LD_INT 1
71633: PLUS
71634: PPUSH
71635: LD_VAR 0 2
71639: PPUSH
71640: CALL_OW 1
71644: ST_TO_ADDR
// end ;
71645: LD_VAR 0 3
71649: RET
// export function JoinUnion ( array , element ) ; begin
71650: LD_INT 0
71652: PPUSH
// result := array union element ;
71653: LD_ADDR_VAR 0 3
71657: PUSH
71658: LD_VAR 0 1
71662: PUSH
71663: LD_VAR 0 2
71667: UNION
71668: ST_TO_ADDR
// end ;
71669: LD_VAR 0 3
71673: RET
// export function GetBehemoths ( side ) ; begin
71674: LD_INT 0
71676: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71677: LD_ADDR_VAR 0 2
71681: PUSH
71682: LD_INT 22
71684: PUSH
71685: LD_VAR 0 1
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 31
71696: PUSH
71697: LD_INT 25
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PPUSH
71708: CALL_OW 69
71712: ST_TO_ADDR
// end ;
71713: LD_VAR 0 2
71717: RET
// export function Shuffle ( array ) ; var i , index ; begin
71718: LD_INT 0
71720: PPUSH
71721: PPUSH
71722: PPUSH
// result := [ ] ;
71723: LD_ADDR_VAR 0 2
71727: PUSH
71728: EMPTY
71729: ST_TO_ADDR
// if not array then
71730: LD_VAR 0 1
71734: NOT
71735: IFFALSE 71739
// exit ;
71737: GO 71838
// Randomize ;
71739: CALL_OW 10
// for i = array downto 1 do
71743: LD_ADDR_VAR 0 3
71747: PUSH
71748: DOUBLE
71749: LD_VAR 0 1
71753: INC
71754: ST_TO_ADDR
71755: LD_INT 1
71757: PUSH
71758: FOR_DOWNTO
71759: IFFALSE 71836
// begin index := rand ( 1 , array ) ;
71761: LD_ADDR_VAR 0 4
71765: PUSH
71766: LD_INT 1
71768: PPUSH
71769: LD_VAR 0 1
71773: PPUSH
71774: CALL_OW 12
71778: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71779: LD_ADDR_VAR 0 2
71783: PUSH
71784: LD_VAR 0 2
71788: PPUSH
71789: LD_VAR 0 2
71793: PUSH
71794: LD_INT 1
71796: PLUS
71797: PPUSH
71798: LD_VAR 0 1
71802: PUSH
71803: LD_VAR 0 4
71807: ARRAY
71808: PPUSH
71809: CALL_OW 2
71813: ST_TO_ADDR
// array := Delete ( array , index ) ;
71814: LD_ADDR_VAR 0 1
71818: PUSH
71819: LD_VAR 0 1
71823: PPUSH
71824: LD_VAR 0 4
71828: PPUSH
71829: CALL_OW 3
71833: ST_TO_ADDR
// end ;
71834: GO 71758
71836: POP
71837: POP
// end ;
71838: LD_VAR 0 2
71842: RET
// export function GetBaseMaterials ( base ) ; begin
71843: LD_INT 0
71845: PPUSH
// result := [ 0 , 0 , 0 ] ;
71846: LD_ADDR_VAR 0 2
71850: PUSH
71851: LD_INT 0
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: LIST
71864: ST_TO_ADDR
// if not base then
71865: LD_VAR 0 1
71869: NOT
71870: IFFALSE 71874
// exit ;
71872: GO 71923
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71874: LD_ADDR_VAR 0 2
71878: PUSH
71879: LD_VAR 0 1
71883: PPUSH
71884: LD_INT 1
71886: PPUSH
71887: CALL_OW 275
71891: PUSH
71892: LD_VAR 0 1
71896: PPUSH
71897: LD_INT 2
71899: PPUSH
71900: CALL_OW 275
71904: PUSH
71905: LD_VAR 0 1
71909: PPUSH
71910: LD_INT 3
71912: PPUSH
71913: CALL_OW 275
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: ST_TO_ADDR
// end ;
71923: LD_VAR 0 2
71927: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71928: LD_INT 0
71930: PPUSH
71931: PPUSH
// result := array ;
71932: LD_ADDR_VAR 0 3
71936: PUSH
71937: LD_VAR 0 1
71941: ST_TO_ADDR
// if size >= result then
71942: LD_VAR 0 2
71946: PUSH
71947: LD_VAR 0 3
71951: GREATEREQUAL
71952: IFFALSE 71956
// exit ;
71954: GO 72006
// if size then
71956: LD_VAR 0 2
71960: IFFALSE 72006
// for i := array downto size do
71962: LD_ADDR_VAR 0 4
71966: PUSH
71967: DOUBLE
71968: LD_VAR 0 1
71972: INC
71973: ST_TO_ADDR
71974: LD_VAR 0 2
71978: PUSH
71979: FOR_DOWNTO
71980: IFFALSE 72004
// result := Delete ( result , result ) ;
71982: LD_ADDR_VAR 0 3
71986: PUSH
71987: LD_VAR 0 3
71991: PPUSH
71992: LD_VAR 0 3
71996: PPUSH
71997: CALL_OW 3
72001: ST_TO_ADDR
72002: GO 71979
72004: POP
72005: POP
// end ;
72006: LD_VAR 0 3
72010: RET
// export function ComExit ( unit ) ; var tmp ; begin
72011: LD_INT 0
72013: PPUSH
72014: PPUSH
// if not IsInUnit ( unit ) then
72015: LD_VAR 0 1
72019: PPUSH
72020: CALL_OW 310
72024: NOT
72025: IFFALSE 72029
// exit ;
72027: GO 72089
// tmp := IsInUnit ( unit ) ;
72029: LD_ADDR_VAR 0 3
72033: PUSH
72034: LD_VAR 0 1
72038: PPUSH
72039: CALL_OW 310
72043: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72044: LD_VAR 0 3
72048: PPUSH
72049: CALL_OW 247
72053: PUSH
72054: LD_INT 2
72056: EQUAL
72057: IFFALSE 72070
// ComExitVehicle ( unit ) else
72059: LD_VAR 0 1
72063: PPUSH
72064: CALL_OW 121
72068: GO 72079
// ComExitBuilding ( unit ) ;
72070: LD_VAR 0 1
72074: PPUSH
72075: CALL_OW 122
// result := tmp ;
72079: LD_ADDR_VAR 0 2
72083: PUSH
72084: LD_VAR 0 3
72088: ST_TO_ADDR
// end ;
72089: LD_VAR 0 2
72093: RET
// export function ComExitAll ( units ) ; var i ; begin
72094: LD_INT 0
72096: PPUSH
72097: PPUSH
// if not units then
72098: LD_VAR 0 1
72102: NOT
72103: IFFALSE 72107
// exit ;
72105: GO 72133
// for i in units do
72107: LD_ADDR_VAR 0 3
72111: PUSH
72112: LD_VAR 0 1
72116: PUSH
72117: FOR_IN
72118: IFFALSE 72131
// ComExit ( i ) ;
72120: LD_VAR 0 3
72124: PPUSH
72125: CALL 72011 0 1
72129: GO 72117
72131: POP
72132: POP
// end ;
72133: LD_VAR 0 2
72137: RET
// export function ResetHc ; begin
72138: LD_INT 0
72140: PPUSH
// InitHc ;
72141: CALL_OW 19
// hc_importance := 0 ;
72145: LD_ADDR_OWVAR 32
72149: PUSH
72150: LD_INT 0
72152: ST_TO_ADDR
// end ;
72153: LD_VAR 0 1
72157: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72158: LD_INT 0
72160: PPUSH
72161: PPUSH
72162: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72163: LD_ADDR_VAR 0 6
72167: PUSH
72168: LD_VAR 0 1
72172: PUSH
72173: LD_VAR 0 3
72177: PLUS
72178: PUSH
72179: LD_INT 2
72181: DIV
72182: ST_TO_ADDR
// if _x < 0 then
72183: LD_VAR 0 6
72187: PUSH
72188: LD_INT 0
72190: LESS
72191: IFFALSE 72208
// _x := _x * - 1 ;
72193: LD_ADDR_VAR 0 6
72197: PUSH
72198: LD_VAR 0 6
72202: PUSH
72203: LD_INT 1
72205: NEG
72206: MUL
72207: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72208: LD_ADDR_VAR 0 7
72212: PUSH
72213: LD_VAR 0 2
72217: PUSH
72218: LD_VAR 0 4
72222: PLUS
72223: PUSH
72224: LD_INT 2
72226: DIV
72227: ST_TO_ADDR
// if _y < 0 then
72228: LD_VAR 0 7
72232: PUSH
72233: LD_INT 0
72235: LESS
72236: IFFALSE 72253
// _y := _y * - 1 ;
72238: LD_ADDR_VAR 0 7
72242: PUSH
72243: LD_VAR 0 7
72247: PUSH
72248: LD_INT 1
72250: NEG
72251: MUL
72252: ST_TO_ADDR
// result := [ _x , _y ] ;
72253: LD_ADDR_VAR 0 5
72257: PUSH
72258: LD_VAR 0 6
72262: PUSH
72263: LD_VAR 0 7
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: ST_TO_ADDR
// end ;
72272: LD_VAR 0 5
72276: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72277: LD_INT 0
72279: PPUSH
72280: PPUSH
72281: PPUSH
72282: PPUSH
// task := GetTaskList ( unit ) ;
72283: LD_ADDR_VAR 0 7
72287: PUSH
72288: LD_VAR 0 1
72292: PPUSH
72293: CALL_OW 437
72297: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72298: LD_VAR 0 7
72302: NOT
72303: IFFALSE 72322
72305: PUSH
72306: LD_VAR 0 1
72310: PPUSH
72311: LD_VAR 0 2
72315: PPUSH
72316: CALL_OW 308
72320: NOT
72321: AND
72322: IFFALSE 72326
// exit ;
72324: GO 72444
// if IsInArea ( unit , area ) then
72326: LD_VAR 0 1
72330: PPUSH
72331: LD_VAR 0 2
72335: PPUSH
72336: CALL_OW 308
72340: IFFALSE 72358
// begin ComMoveToArea ( unit , goAway ) ;
72342: LD_VAR 0 1
72346: PPUSH
72347: LD_VAR 0 3
72351: PPUSH
72352: CALL_OW 113
// exit ;
72356: GO 72444
// end ; if task [ 1 ] [ 1 ] <> M then
72358: LD_VAR 0 7
72362: PUSH
72363: LD_INT 1
72365: ARRAY
72366: PUSH
72367: LD_INT 1
72369: ARRAY
72370: PUSH
72371: LD_STRING M
72373: NONEQUAL
72374: IFFALSE 72378
// exit ;
72376: GO 72444
// x := task [ 1 ] [ 2 ] ;
72378: LD_ADDR_VAR 0 5
72382: PUSH
72383: LD_VAR 0 7
72387: PUSH
72388: LD_INT 1
72390: ARRAY
72391: PUSH
72392: LD_INT 2
72394: ARRAY
72395: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72396: LD_ADDR_VAR 0 6
72400: PUSH
72401: LD_VAR 0 7
72405: PUSH
72406: LD_INT 1
72408: ARRAY
72409: PUSH
72410: LD_INT 3
72412: ARRAY
72413: ST_TO_ADDR
// if InArea ( x , y , area ) then
72414: LD_VAR 0 5
72418: PPUSH
72419: LD_VAR 0 6
72423: PPUSH
72424: LD_VAR 0 2
72428: PPUSH
72429: CALL_OW 309
72433: IFFALSE 72444
// ComStop ( unit ) ;
72435: LD_VAR 0 1
72439: PPUSH
72440: CALL_OW 141
// end ;
72444: LD_VAR 0 4
72448: RET
// export function Abs ( value ) ; begin
72449: LD_INT 0
72451: PPUSH
// result := value ;
72452: LD_ADDR_VAR 0 2
72456: PUSH
72457: LD_VAR 0 1
72461: ST_TO_ADDR
// if value < 0 then
72462: LD_VAR 0 1
72466: PUSH
72467: LD_INT 0
72469: LESS
72470: IFFALSE 72487
// result := value * - 1 ;
72472: LD_ADDR_VAR 0 2
72476: PUSH
72477: LD_VAR 0 1
72481: PUSH
72482: LD_INT 1
72484: NEG
72485: MUL
72486: ST_TO_ADDR
// end ;
72487: LD_VAR 0 2
72491: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72492: LD_INT 0
72494: PPUSH
72495: PPUSH
72496: PPUSH
72497: PPUSH
72498: PPUSH
72499: PPUSH
72500: PPUSH
72501: PPUSH
// if not unit or not building then
72502: LD_VAR 0 1
72506: NOT
72507: IFTRUE 72516
72509: PUSH
72510: LD_VAR 0 2
72514: NOT
72515: OR
72516: IFFALSE 72520
// exit ;
72518: GO 72748
// x := GetX ( building ) ;
72520: LD_ADDR_VAR 0 4
72524: PUSH
72525: LD_VAR 0 2
72529: PPUSH
72530: CALL_OW 250
72534: ST_TO_ADDR
// y := GetY ( building ) ;
72535: LD_ADDR_VAR 0 6
72539: PUSH
72540: LD_VAR 0 2
72544: PPUSH
72545: CALL_OW 251
72549: ST_TO_ADDR
// d := GetDir ( building ) ;
72550: LD_ADDR_VAR 0 8
72554: PUSH
72555: LD_VAR 0 2
72559: PPUSH
72560: CALL_OW 254
72564: ST_TO_ADDR
// r := 4 ;
72565: LD_ADDR_VAR 0 9
72569: PUSH
72570: LD_INT 4
72572: ST_TO_ADDR
// for i := 1 to 5 do
72573: LD_ADDR_VAR 0 10
72577: PUSH
72578: DOUBLE
72579: LD_INT 1
72581: DEC
72582: ST_TO_ADDR
72583: LD_INT 5
72585: PUSH
72586: FOR_TO
72587: IFFALSE 72746
// begin _x := ShiftX ( x , d , r + i ) ;
72589: LD_ADDR_VAR 0 5
72593: PUSH
72594: LD_VAR 0 4
72598: PPUSH
72599: LD_VAR 0 8
72603: PPUSH
72604: LD_VAR 0 9
72608: PUSH
72609: LD_VAR 0 10
72613: PLUS
72614: PPUSH
72615: CALL_OW 272
72619: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72620: LD_ADDR_VAR 0 7
72624: PUSH
72625: LD_VAR 0 6
72629: PPUSH
72630: LD_VAR 0 8
72634: PPUSH
72635: LD_VAR 0 9
72639: PUSH
72640: LD_VAR 0 10
72644: PLUS
72645: PPUSH
72646: CALL_OW 273
72650: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72651: LD_VAR 0 5
72655: PPUSH
72656: LD_VAR 0 7
72660: PPUSH
72661: CALL_OW 488
72665: IFFALSE 72700
72667: PUSH
72668: LD_VAR 0 5
72672: PPUSH
72673: LD_VAR 0 7
72677: PPUSH
72678: CALL_OW 428
72682: PPUSH
72683: CALL_OW 247
72687: PUSH
72688: LD_INT 3
72690: PUSH
72691: LD_INT 2
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: IN
72698: NOT
72699: AND
72700: IFFALSE 72744
// begin ComMoveXY ( unit , _x , _y ) ;
72702: LD_VAR 0 1
72706: PPUSH
72707: LD_VAR 0 5
72711: PPUSH
72712: LD_VAR 0 7
72716: PPUSH
72717: CALL_OW 111
// result := [ _x , _y ] ;
72721: LD_ADDR_VAR 0 3
72725: PUSH
72726: LD_VAR 0 5
72730: PUSH
72731: LD_VAR 0 7
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: ST_TO_ADDR
// exit ;
72740: POP
72741: POP
72742: GO 72748
// end ; end ;
72744: GO 72586
72746: POP
72747: POP
// end ;
72748: LD_VAR 0 3
72752: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72753: LD_INT 0
72755: PPUSH
72756: PPUSH
72757: PPUSH
// result := 0 ;
72758: LD_ADDR_VAR 0 3
72762: PUSH
72763: LD_INT 0
72765: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72766: LD_VAR 0 1
72770: PUSH
72771: LD_INT 0
72773: LESS
72774: IFTRUE 72786
72776: PUSH
72777: LD_VAR 0 1
72781: PUSH
72782: LD_INT 8
72784: GREATER
72785: OR
72786: IFTRUE 72798
72788: PUSH
72789: LD_VAR 0 2
72793: PUSH
72794: LD_INT 0
72796: LESS
72797: OR
72798: IFTRUE 72810
72800: PUSH
72801: LD_VAR 0 2
72805: PUSH
72806: LD_INT 8
72808: GREATER
72809: OR
72810: IFFALSE 72814
// exit ;
72812: GO 72889
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72814: LD_ADDR_VAR 0 4
72818: PUSH
72819: LD_INT 22
72821: PUSH
72822: LD_VAR 0 2
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PPUSH
72831: CALL_OW 69
72835: PUSH
72836: FOR_IN
72837: IFFALSE 72887
// begin un := UnitShoot ( i ) ;
72839: LD_ADDR_VAR 0 5
72843: PUSH
72844: LD_VAR 0 4
72848: PPUSH
72849: CALL_OW 504
72853: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72854: LD_VAR 0 5
72858: PPUSH
72859: CALL_OW 255
72863: PUSH
72864: LD_VAR 0 1
72868: EQUAL
72869: IFFALSE 72885
// begin result := un ;
72871: LD_ADDR_VAR 0 3
72875: PUSH
72876: LD_VAR 0 5
72880: ST_TO_ADDR
// exit ;
72881: POP
72882: POP
72883: GO 72889
// end ; end ;
72885: GO 72836
72887: POP
72888: POP
// end ;
72889: LD_VAR 0 3
72893: RET
// export function GetCargoBay ( units ) ; begin
72894: LD_INT 0
72896: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72897: LD_ADDR_VAR 0 2
72901: PUSH
72902: LD_VAR 0 1
72906: PPUSH
72907: LD_INT 2
72909: PUSH
72910: LD_INT 34
72912: PUSH
72913: LD_INT 12
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 34
72922: PUSH
72923: LD_INT 51
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 34
72932: PUSH
72933: LD_INT 32
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: LD_INT 34
72942: PUSH
72943: LD_INT 89
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: PPUSH
72957: CALL_OW 72
72961: ST_TO_ADDR
// end ;
72962: LD_VAR 0 2
72966: RET
// export function Negate ( value ) ; begin
72967: LD_INT 0
72969: PPUSH
// result := not value ;
72970: LD_ADDR_VAR 0 2
72974: PUSH
72975: LD_VAR 0 1
72979: NOT
72980: ST_TO_ADDR
// end ;
72981: LD_VAR 0 2
72985: RET
// export function Inc ( value ) ; begin
72986: LD_INT 0
72988: PPUSH
// result := value + 1 ;
72989: LD_ADDR_VAR 0 2
72993: PUSH
72994: LD_VAR 0 1
72998: PUSH
72999: LD_INT 1
73001: PLUS
73002: ST_TO_ADDR
// end ;
73003: LD_VAR 0 2
73007: RET
// export function Dec ( value ) ; begin
73008: LD_INT 0
73010: PPUSH
// result := value - 1 ;
73011: LD_ADDR_VAR 0 2
73015: PUSH
73016: LD_VAR 0 1
73020: PUSH
73021: LD_INT 1
73023: MINUS
73024: ST_TO_ADDR
// end ;
73025: LD_VAR 0 2
73029: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73030: LD_INT 0
73032: PPUSH
73033: PPUSH
73034: PPUSH
73035: PPUSH
73036: PPUSH
73037: PPUSH
73038: PPUSH
73039: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73040: LD_VAR 0 1
73044: PPUSH
73045: LD_VAR 0 2
73049: PPUSH
73050: CALL_OW 488
73054: NOT
73055: IFTRUE 73074
73057: PUSH
73058: LD_VAR 0 3
73062: PPUSH
73063: LD_VAR 0 4
73067: PPUSH
73068: CALL_OW 488
73072: NOT
73073: OR
73074: IFFALSE 73087
// begin result := - 1 ;
73076: LD_ADDR_VAR 0 5
73080: PUSH
73081: LD_INT 1
73083: NEG
73084: ST_TO_ADDR
// exit ;
73085: GO 73322
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73087: LD_ADDR_VAR 0 12
73091: PUSH
73092: LD_VAR 0 1
73096: PPUSH
73097: LD_VAR 0 2
73101: PPUSH
73102: LD_VAR 0 3
73106: PPUSH
73107: LD_VAR 0 4
73111: PPUSH
73112: CALL 72158 0 4
73116: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73117: LD_ADDR_VAR 0 11
73121: PUSH
73122: LD_VAR 0 1
73126: PPUSH
73127: LD_VAR 0 2
73131: PPUSH
73132: LD_VAR 0 12
73136: PUSH
73137: LD_INT 1
73139: ARRAY
73140: PPUSH
73141: LD_VAR 0 12
73145: PUSH
73146: LD_INT 2
73148: ARRAY
73149: PPUSH
73150: CALL_OW 298
73154: ST_TO_ADDR
// distance := 9999 ;
73155: LD_ADDR_VAR 0 10
73159: PUSH
73160: LD_INT 9999
73162: ST_TO_ADDR
// for i := 0 to 5 do
73163: LD_ADDR_VAR 0 6
73167: PUSH
73168: DOUBLE
73169: LD_INT 0
73171: DEC
73172: ST_TO_ADDR
73173: LD_INT 5
73175: PUSH
73176: FOR_TO
73177: IFFALSE 73320
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73179: LD_ADDR_VAR 0 7
73183: PUSH
73184: LD_VAR 0 1
73188: PPUSH
73189: LD_VAR 0 6
73193: PPUSH
73194: LD_VAR 0 11
73198: PPUSH
73199: CALL_OW 272
73203: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73204: LD_ADDR_VAR 0 8
73208: PUSH
73209: LD_VAR 0 2
73213: PPUSH
73214: LD_VAR 0 6
73218: PPUSH
73219: LD_VAR 0 11
73223: PPUSH
73224: CALL_OW 273
73228: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73229: LD_VAR 0 7
73233: PPUSH
73234: LD_VAR 0 8
73238: PPUSH
73239: CALL_OW 488
73243: NOT
73244: IFFALSE 73248
// continue ;
73246: GO 73176
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73248: LD_ADDR_VAR 0 9
73252: PUSH
73253: LD_VAR 0 12
73257: PUSH
73258: LD_INT 1
73260: ARRAY
73261: PPUSH
73262: LD_VAR 0 12
73266: PUSH
73267: LD_INT 2
73269: ARRAY
73270: PPUSH
73271: LD_VAR 0 7
73275: PPUSH
73276: LD_VAR 0 8
73280: PPUSH
73281: CALL_OW 298
73285: ST_TO_ADDR
// if tmp < distance then
73286: LD_VAR 0 9
73290: PUSH
73291: LD_VAR 0 10
73295: LESS
73296: IFFALSE 73318
// begin result := i ;
73298: LD_ADDR_VAR 0 5
73302: PUSH
73303: LD_VAR 0 6
73307: ST_TO_ADDR
// distance := tmp ;
73308: LD_ADDR_VAR 0 10
73312: PUSH
73313: LD_VAR 0 9
73317: ST_TO_ADDR
// end ; end ;
73318: GO 73176
73320: POP
73321: POP
// end ;
73322: LD_VAR 0 5
73326: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73327: LD_INT 0
73329: PPUSH
73330: PPUSH
// if not driver or not IsInUnit ( driver ) then
73331: LD_VAR 0 1
73335: NOT
73336: IFTRUE 73350
73338: PUSH
73339: LD_VAR 0 1
73343: PPUSH
73344: CALL_OW 310
73348: NOT
73349: OR
73350: IFFALSE 73354
// exit ;
73352: GO 73444
// vehicle := IsInUnit ( driver ) ;
73354: LD_ADDR_VAR 0 3
73358: PUSH
73359: LD_VAR 0 1
73363: PPUSH
73364: CALL_OW 310
73368: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73369: LD_VAR 0 1
73373: PPUSH
73374: LD_STRING \
73376: PUSH
73377: LD_INT 0
73379: PUSH
73380: LD_INT 0
73382: PUSH
73383: LD_INT 0
73385: PUSH
73386: LD_INT 0
73388: PUSH
73389: LD_INT 0
73391: PUSH
73392: LD_INT 0
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: LIST
73402: LIST
73403: PUSH
73404: LD_STRING E
73406: PUSH
73407: LD_INT 0
73409: PUSH
73410: LD_INT 0
73412: PUSH
73413: LD_VAR 0 3
73417: PUSH
73418: LD_INT 0
73420: PUSH
73421: LD_INT 0
73423: PUSH
73424: LD_INT 0
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PPUSH
73440: CALL_OW 446
// end ;
73444: LD_VAR 0 2
73448: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73449: LD_INT 0
73451: PPUSH
73452: PPUSH
// if not driver or not IsInUnit ( driver ) then
73453: LD_VAR 0 1
73457: NOT
73458: IFTRUE 73472
73460: PUSH
73461: LD_VAR 0 1
73465: PPUSH
73466: CALL_OW 310
73470: NOT
73471: OR
73472: IFFALSE 73476
// exit ;
73474: GO 73566
// vehicle := IsInUnit ( driver ) ;
73476: LD_ADDR_VAR 0 3
73480: PUSH
73481: LD_VAR 0 1
73485: PPUSH
73486: CALL_OW 310
73490: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73491: LD_VAR 0 1
73495: PPUSH
73496: LD_STRING \
73498: PUSH
73499: LD_INT 0
73501: PUSH
73502: LD_INT 0
73504: PUSH
73505: LD_INT 0
73507: PUSH
73508: LD_INT 0
73510: PUSH
73511: LD_INT 0
73513: PUSH
73514: LD_INT 0
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: PUSH
73526: LD_STRING E
73528: PUSH
73529: LD_INT 0
73531: PUSH
73532: LD_INT 0
73534: PUSH
73535: LD_VAR 0 3
73539: PUSH
73540: LD_INT 0
73542: PUSH
73543: LD_INT 0
73545: PUSH
73546: LD_INT 0
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PPUSH
73562: CALL_OW 447
// end ;
73566: LD_VAR 0 2
73570: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73571: LD_INT 0
73573: PPUSH
73574: PPUSH
73575: PPUSH
// tmp := [ ] ;
73576: LD_ADDR_VAR 0 5
73580: PUSH
73581: EMPTY
73582: ST_TO_ADDR
// for i in units do
73583: LD_ADDR_VAR 0 4
73587: PUSH
73588: LD_VAR 0 1
73592: PUSH
73593: FOR_IN
73594: IFFALSE 73632
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73596: LD_ADDR_VAR 0 5
73600: PUSH
73601: LD_VAR 0 5
73605: PPUSH
73606: LD_VAR 0 5
73610: PUSH
73611: LD_INT 1
73613: PLUS
73614: PPUSH
73615: LD_VAR 0 4
73619: PPUSH
73620: CALL_OW 256
73624: PPUSH
73625: CALL_OW 2
73629: ST_TO_ADDR
73630: GO 73593
73632: POP
73633: POP
// if not tmp then
73634: LD_VAR 0 5
73638: NOT
73639: IFFALSE 73643
// exit ;
73641: GO 73691
// if asc then
73643: LD_VAR 0 2
73647: IFFALSE 73671
// result := SortListByListAsc ( units , tmp ) else
73649: LD_ADDR_VAR 0 3
73653: PUSH
73654: LD_VAR 0 1
73658: PPUSH
73659: LD_VAR 0 5
73663: PPUSH
73664: CALL_OW 76
73668: ST_TO_ADDR
73669: GO 73691
// result := SortListByListDesc ( units , tmp ) ;
73671: LD_ADDR_VAR 0 3
73675: PUSH
73676: LD_VAR 0 1
73680: PPUSH
73681: LD_VAR 0 5
73685: PPUSH
73686: CALL_OW 77
73690: ST_TO_ADDR
// end ;
73691: LD_VAR 0 3
73695: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73696: LD_INT 0
73698: PPUSH
73699: PPUSH
// task := GetTaskList ( mech ) ;
73700: LD_ADDR_VAR 0 4
73704: PUSH
73705: LD_VAR 0 1
73709: PPUSH
73710: CALL_OW 437
73714: ST_TO_ADDR
// if not task then
73715: LD_VAR 0 4
73719: NOT
73720: IFFALSE 73724
// exit ;
73722: GO 73768
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73724: LD_ADDR_VAR 0 3
73728: PUSH
73729: LD_VAR 0 4
73733: PUSH
73734: LD_INT 1
73736: ARRAY
73737: PUSH
73738: LD_INT 1
73740: ARRAY
73741: PUSH
73742: LD_STRING r
73744: EQUAL
73745: IFFALSE 73767
73747: PUSH
73748: LD_VAR 0 4
73752: PUSH
73753: LD_INT 1
73755: ARRAY
73756: PUSH
73757: LD_INT 4
73759: ARRAY
73760: PUSH
73761: LD_VAR 0 2
73765: EQUAL
73766: AND
73767: ST_TO_ADDR
// end ;
73768: LD_VAR 0 3
73772: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73773: LD_INT 0
73775: PPUSH
// SetDir ( unit , d ) ;
73776: LD_VAR 0 1
73780: PPUSH
73781: LD_VAR 0 4
73785: PPUSH
73786: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73790: LD_ADDR_VAR 0 6
73794: PUSH
73795: LD_VAR 0 1
73799: PPUSH
73800: LD_VAR 0 2
73804: PPUSH
73805: LD_VAR 0 3
73809: PPUSH
73810: LD_VAR 0 5
73814: PPUSH
73815: CALL_OW 48
73819: ST_TO_ADDR
// end ;
73820: LD_VAR 0 6
73824: RET
// export function ToNaturalNumber ( number ) ; begin
73825: LD_INT 0
73827: PPUSH
// result := number div 1 ;
73828: LD_ADDR_VAR 0 2
73832: PUSH
73833: LD_VAR 0 1
73837: PUSH
73838: LD_INT 1
73840: DIV
73841: ST_TO_ADDR
// if number < 0 then
73842: LD_VAR 0 1
73846: PUSH
73847: LD_INT 0
73849: LESS
73850: IFFALSE 73860
// result := 0 ;
73852: LD_ADDR_VAR 0 2
73856: PUSH
73857: LD_INT 0
73859: ST_TO_ADDR
// end ;
73860: LD_VAR 0 2
73864: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73865: LD_INT 0
73867: PPUSH
73868: PPUSH
73869: PPUSH
// if not buildings then
73870: LD_VAR 0 1
73874: NOT
73875: IFFALSE 73879
// exit ;
73877: GO 73994
// tmp := [ ] ;
73879: LD_ADDR_VAR 0 5
73883: PUSH
73884: EMPTY
73885: ST_TO_ADDR
// for b in buildings do
73886: LD_ADDR_VAR 0 4
73890: PUSH
73891: LD_VAR 0 1
73895: PUSH
73896: FOR_IN
73897: IFFALSE 73935
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73899: LD_ADDR_VAR 0 5
73903: PUSH
73904: LD_VAR 0 5
73908: PPUSH
73909: LD_VAR 0 5
73913: PUSH
73914: LD_INT 1
73916: PLUS
73917: PPUSH
73918: LD_VAR 0 4
73922: PPUSH
73923: CALL_OW 266
73927: PPUSH
73928: CALL_OW 1
73932: ST_TO_ADDR
73933: GO 73896
73935: POP
73936: POP
// if not tmp then
73937: LD_VAR 0 5
73941: NOT
73942: IFFALSE 73946
// exit ;
73944: GO 73994
// if asc then
73946: LD_VAR 0 2
73950: IFFALSE 73974
// result := SortListByListAsc ( buildings , tmp ) else
73952: LD_ADDR_VAR 0 3
73956: PUSH
73957: LD_VAR 0 1
73961: PPUSH
73962: LD_VAR 0 5
73966: PPUSH
73967: CALL_OW 76
73971: ST_TO_ADDR
73972: GO 73994
// result := SortListByListDesc ( buildings , tmp ) ;
73974: LD_ADDR_VAR 0 3
73978: PUSH
73979: LD_VAR 0 1
73983: PPUSH
73984: LD_VAR 0 5
73988: PPUSH
73989: CALL_OW 77
73993: ST_TO_ADDR
// end ;
73994: LD_VAR 0 3
73998: RET
// export function SortByClass ( units , class ) ; var un ; begin
73999: LD_INT 0
74001: PPUSH
74002: PPUSH
// if not units or not class then
74003: LD_VAR 0 1
74007: NOT
74008: IFTRUE 74017
74010: PUSH
74011: LD_VAR 0 2
74015: NOT
74016: OR
74017: IFFALSE 74021
// exit ;
74019: GO 74116
// result := [ ] ;
74021: LD_ADDR_VAR 0 3
74025: PUSH
74026: EMPTY
74027: ST_TO_ADDR
// for un in units do
74028: LD_ADDR_VAR 0 4
74032: PUSH
74033: LD_VAR 0 1
74037: PUSH
74038: FOR_IN
74039: IFFALSE 74114
// if GetClass ( un ) = class then
74041: LD_VAR 0 4
74045: PPUSH
74046: CALL_OW 257
74050: PUSH
74051: LD_VAR 0 2
74055: EQUAL
74056: IFFALSE 74083
// result := Insert ( result , 1 , un ) else
74058: LD_ADDR_VAR 0 3
74062: PUSH
74063: LD_VAR 0 3
74067: PPUSH
74068: LD_INT 1
74070: PPUSH
74071: LD_VAR 0 4
74075: PPUSH
74076: CALL_OW 2
74080: ST_TO_ADDR
74081: GO 74112
// result := Replace ( result , result + 1 , un ) ;
74083: LD_ADDR_VAR 0 3
74087: PUSH
74088: LD_VAR 0 3
74092: PPUSH
74093: LD_VAR 0 3
74097: PUSH
74098: LD_INT 1
74100: PLUS
74101: PPUSH
74102: LD_VAR 0 4
74106: PPUSH
74107: CALL_OW 1
74111: ST_TO_ADDR
74112: GO 74038
74114: POP
74115: POP
// end ;
74116: LD_VAR 0 3
74120: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74121: LD_INT 0
74123: PPUSH
74124: PPUSH
74125: PPUSH
74126: PPUSH
74127: PPUSH
74128: PPUSH
74129: PPUSH
// result := [ ] ;
74130: LD_ADDR_VAR 0 4
74134: PUSH
74135: EMPTY
74136: ST_TO_ADDR
// if x - r < 0 then
74137: LD_VAR 0 1
74141: PUSH
74142: LD_VAR 0 3
74146: MINUS
74147: PUSH
74148: LD_INT 0
74150: LESS
74151: IFFALSE 74163
// min_x := 0 else
74153: LD_ADDR_VAR 0 8
74157: PUSH
74158: LD_INT 0
74160: ST_TO_ADDR
74161: GO 74179
// min_x := x - r ;
74163: LD_ADDR_VAR 0 8
74167: PUSH
74168: LD_VAR 0 1
74172: PUSH
74173: LD_VAR 0 3
74177: MINUS
74178: ST_TO_ADDR
// if y - r < 0 then
74179: LD_VAR 0 2
74183: PUSH
74184: LD_VAR 0 3
74188: MINUS
74189: PUSH
74190: LD_INT 0
74192: LESS
74193: IFFALSE 74205
// min_y := 0 else
74195: LD_ADDR_VAR 0 7
74199: PUSH
74200: LD_INT 0
74202: ST_TO_ADDR
74203: GO 74221
// min_y := y - r ;
74205: LD_ADDR_VAR 0 7
74209: PUSH
74210: LD_VAR 0 2
74214: PUSH
74215: LD_VAR 0 3
74219: MINUS
74220: ST_TO_ADDR
// max_x := x + r ;
74221: LD_ADDR_VAR 0 9
74225: PUSH
74226: LD_VAR 0 1
74230: PUSH
74231: LD_VAR 0 3
74235: PLUS
74236: ST_TO_ADDR
// max_y := y + r ;
74237: LD_ADDR_VAR 0 10
74241: PUSH
74242: LD_VAR 0 2
74246: PUSH
74247: LD_VAR 0 3
74251: PLUS
74252: ST_TO_ADDR
// for _x = min_x to max_x do
74253: LD_ADDR_VAR 0 5
74257: PUSH
74258: DOUBLE
74259: LD_VAR 0 8
74263: DEC
74264: ST_TO_ADDR
74265: LD_VAR 0 9
74269: PUSH
74270: FOR_TO
74271: IFFALSE 74372
// for _y = min_y to max_y do
74273: LD_ADDR_VAR 0 6
74277: PUSH
74278: DOUBLE
74279: LD_VAR 0 7
74283: DEC
74284: ST_TO_ADDR
74285: LD_VAR 0 10
74289: PUSH
74290: FOR_TO
74291: IFFALSE 74368
// begin if not ValidHex ( _x , _y ) then
74293: LD_VAR 0 5
74297: PPUSH
74298: LD_VAR 0 6
74302: PPUSH
74303: CALL_OW 488
74307: NOT
74308: IFFALSE 74312
// continue ;
74310: GO 74290
// if GetResourceTypeXY ( _x , _y ) then
74312: LD_VAR 0 5
74316: PPUSH
74317: LD_VAR 0 6
74321: PPUSH
74322: CALL_OW 283
74326: IFFALSE 74366
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74328: LD_ADDR_VAR 0 4
74332: PUSH
74333: LD_VAR 0 4
74337: PPUSH
74338: LD_VAR 0 4
74342: PUSH
74343: LD_INT 1
74345: PLUS
74346: PPUSH
74347: LD_VAR 0 5
74351: PUSH
74352: LD_VAR 0 6
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PPUSH
74361: CALL_OW 1
74365: ST_TO_ADDR
// end ;
74366: GO 74290
74368: POP
74369: POP
74370: GO 74270
74372: POP
74373: POP
// end ;
74374: LD_VAR 0 4
74378: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74379: LD_INT 0
74381: PPUSH
74382: PPUSH
74383: PPUSH
74384: PPUSH
74385: PPUSH
74386: PPUSH
74387: PPUSH
74388: PPUSH
// if not units then
74389: LD_VAR 0 1
74393: NOT
74394: IFFALSE 74398
// exit ;
74396: GO 74930
// result := UnitFilter ( units , [ f_ok ] ) ;
74398: LD_ADDR_VAR 0 3
74402: PUSH
74403: LD_VAR 0 1
74407: PPUSH
74408: LD_INT 50
74410: PUSH
74411: EMPTY
74412: LIST
74413: PPUSH
74414: CALL_OW 72
74418: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74419: LD_ADDR_VAR 0 8
74423: PUSH
74424: LD_VAR 0 1
74428: PUSH
74429: LD_INT 1
74431: ARRAY
74432: PPUSH
74433: CALL_OW 255
74437: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74438: LD_ADDR_VAR 0 10
74442: PUSH
74443: LD_INT 29
74445: PUSH
74446: LD_INT 91
74448: PUSH
74449: LD_INT 49
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: LIST
74456: ST_TO_ADDR
// if not result then
74457: LD_VAR 0 3
74461: NOT
74462: IFFALSE 74466
// exit ;
74464: GO 74930
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74466: LD_ADDR_VAR 0 5
74470: PUSH
74471: LD_INT 81
74473: PUSH
74474: LD_VAR 0 8
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PPUSH
74483: CALL_OW 69
74487: ST_TO_ADDR
// for i in result do
74488: LD_ADDR_VAR 0 4
74492: PUSH
74493: LD_VAR 0 3
74497: PUSH
74498: FOR_IN
74499: IFFALSE 74928
// begin tag := GetTag ( i ) + 1 ;
74501: LD_ADDR_VAR 0 9
74505: PUSH
74506: LD_VAR 0 4
74510: PPUSH
74511: CALL_OW 110
74515: PUSH
74516: LD_INT 1
74518: PLUS
74519: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74520: LD_ADDR_VAR 0 7
74524: PUSH
74525: LD_VAR 0 4
74529: PPUSH
74530: CALL_OW 250
74534: PPUSH
74535: LD_VAR 0 4
74539: PPUSH
74540: CALL_OW 251
74544: PPUSH
74545: LD_INT 4
74547: PPUSH
74548: CALL 74121 0 3
74552: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74553: LD_VAR 0 4
74557: PPUSH
74558: CALL_OW 247
74562: PUSH
74563: LD_INT 2
74565: EQUAL
74566: IFFALSE 74578
74568: PUSH
74569: LD_VAR 0 7
74573: PUSH
74574: LD_INT 2
74576: GREATER
74577: AND
74578: IFFALSE 74598
74580: PUSH
74581: LD_VAR 0 4
74585: PPUSH
74586: CALL_OW 264
74590: PUSH
74591: LD_VAR 0 10
74595: IN
74596: NOT
74597: AND
74598: IFFALSE 74637
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74600: LD_VAR 0 4
74604: PPUSH
74605: LD_VAR 0 7
74609: PUSH
74610: LD_INT 1
74612: ARRAY
74613: PUSH
74614: LD_INT 1
74616: ARRAY
74617: PPUSH
74618: LD_VAR 0 7
74622: PUSH
74623: LD_INT 1
74625: ARRAY
74626: PUSH
74627: LD_INT 2
74629: ARRAY
74630: PPUSH
74631: CALL_OW 116
74635: GO 74926
// if path > tag then
74637: LD_VAR 0 2
74641: PUSH
74642: LD_VAR 0 9
74646: GREATER
74647: IFFALSE 74855
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74649: LD_ADDR_VAR 0 6
74653: PUSH
74654: LD_VAR 0 5
74658: PPUSH
74659: LD_INT 91
74661: PUSH
74662: LD_VAR 0 4
74666: PUSH
74667: LD_INT 8
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: LIST
74674: PPUSH
74675: CALL_OW 72
74679: ST_TO_ADDR
// if nearEnemy then
74680: LD_VAR 0 6
74684: IFFALSE 74753
// begin if GetWeapon ( i ) = ru_time_lapser then
74686: LD_VAR 0 4
74690: PPUSH
74691: CALL_OW 264
74695: PUSH
74696: LD_INT 49
74698: EQUAL
74699: IFFALSE 74727
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74701: LD_VAR 0 4
74705: PPUSH
74706: LD_VAR 0 6
74710: PPUSH
74711: LD_VAR 0 4
74715: PPUSH
74716: CALL_OW 74
74720: PPUSH
74721: CALL_OW 112
74725: GO 74751
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74727: LD_VAR 0 4
74731: PPUSH
74732: LD_VAR 0 6
74736: PPUSH
74737: LD_VAR 0 4
74741: PPUSH
74742: CALL_OW 74
74746: PPUSH
74747: CALL 76011 0 2
// end else
74751: GO 74853
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74753: LD_VAR 0 4
74757: PPUSH
74758: LD_VAR 0 2
74762: PUSH
74763: LD_VAR 0 9
74767: ARRAY
74768: PUSH
74769: LD_INT 1
74771: ARRAY
74772: PPUSH
74773: LD_VAR 0 2
74777: PUSH
74778: LD_VAR 0 9
74782: ARRAY
74783: PUSH
74784: LD_INT 2
74786: ARRAY
74787: PPUSH
74788: CALL_OW 297
74792: PUSH
74793: LD_INT 6
74795: GREATER
74796: IFFALSE 74839
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74798: LD_VAR 0 4
74802: PPUSH
74803: LD_VAR 0 2
74807: PUSH
74808: LD_VAR 0 9
74812: ARRAY
74813: PUSH
74814: LD_INT 1
74816: ARRAY
74817: PPUSH
74818: LD_VAR 0 2
74822: PUSH
74823: LD_VAR 0 9
74827: ARRAY
74828: PUSH
74829: LD_INT 2
74831: ARRAY
74832: PPUSH
74833: CALL_OW 114
74837: GO 74853
// SetTag ( i , tag ) ;
74839: LD_VAR 0 4
74843: PPUSH
74844: LD_VAR 0 9
74848: PPUSH
74849: CALL_OW 109
// end else
74853: GO 74926
// if enemy then
74855: LD_VAR 0 5
74859: IFFALSE 74926
// begin if GetWeapon ( i ) = ru_time_lapser then
74861: LD_VAR 0 4
74865: PPUSH
74866: CALL_OW 264
74870: PUSH
74871: LD_INT 49
74873: EQUAL
74874: IFFALSE 74902
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74876: LD_VAR 0 4
74880: PPUSH
74881: LD_VAR 0 5
74885: PPUSH
74886: LD_VAR 0 4
74890: PPUSH
74891: CALL_OW 74
74895: PPUSH
74896: CALL_OW 112
74900: GO 74926
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74902: LD_VAR 0 4
74906: PPUSH
74907: LD_VAR 0 5
74911: PPUSH
74912: LD_VAR 0 4
74916: PPUSH
74917: CALL_OW 74
74921: PPUSH
74922: CALL 76011 0 2
// end ; end ;
74926: GO 74498
74928: POP
74929: POP
// end ;
74930: LD_VAR 0 3
74934: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74935: LD_INT 0
74937: PPUSH
74938: PPUSH
74939: PPUSH
// if not unit or IsInUnit ( unit ) then
74940: LD_VAR 0 1
74944: NOT
74945: IFTRUE 74958
74947: PUSH
74948: LD_VAR 0 1
74952: PPUSH
74953: CALL_OW 310
74957: OR
74958: IFFALSE 74962
// exit ;
74960: GO 75053
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74962: LD_ADDR_VAR 0 4
74966: PUSH
74967: LD_VAR 0 1
74971: PPUSH
74972: CALL_OW 250
74976: PPUSH
74977: LD_VAR 0 2
74981: PPUSH
74982: LD_INT 1
74984: PPUSH
74985: CALL_OW 272
74989: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74990: LD_ADDR_VAR 0 5
74994: PUSH
74995: LD_VAR 0 1
74999: PPUSH
75000: CALL_OW 251
75004: PPUSH
75005: LD_VAR 0 2
75009: PPUSH
75010: LD_INT 1
75012: PPUSH
75013: CALL_OW 273
75017: ST_TO_ADDR
// if ValidHex ( x , y ) then
75018: LD_VAR 0 4
75022: PPUSH
75023: LD_VAR 0 5
75027: PPUSH
75028: CALL_OW 488
75032: IFFALSE 75053
// ComTurnXY ( unit , x , y ) ;
75034: LD_VAR 0 1
75038: PPUSH
75039: LD_VAR 0 4
75043: PPUSH
75044: LD_VAR 0 5
75048: PPUSH
75049: CALL_OW 118
// end ;
75053: LD_VAR 0 3
75057: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75058: LD_INT 0
75060: PPUSH
75061: PPUSH
// result := false ;
75062: LD_ADDR_VAR 0 3
75066: PUSH
75067: LD_INT 0
75069: ST_TO_ADDR
// if not units then
75070: LD_VAR 0 2
75074: NOT
75075: IFFALSE 75079
// exit ;
75077: GO 75124
// for i in units do
75079: LD_ADDR_VAR 0 4
75083: PUSH
75084: LD_VAR 0 2
75088: PUSH
75089: FOR_IN
75090: IFFALSE 75122
// if See ( side , i ) then
75092: LD_VAR 0 1
75096: PPUSH
75097: LD_VAR 0 4
75101: PPUSH
75102: CALL_OW 292
75106: IFFALSE 75120
// begin result := true ;
75108: LD_ADDR_VAR 0 3
75112: PUSH
75113: LD_INT 1
75115: ST_TO_ADDR
// exit ;
75116: POP
75117: POP
75118: GO 75124
// end ;
75120: GO 75089
75122: POP
75123: POP
// end ;
75124: LD_VAR 0 3
75128: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75129: LD_INT 0
75131: PPUSH
75132: PPUSH
75133: PPUSH
75134: PPUSH
// if not unit or not points then
75135: LD_VAR 0 1
75139: NOT
75140: IFTRUE 75149
75142: PUSH
75143: LD_VAR 0 2
75147: NOT
75148: OR
75149: IFFALSE 75153
// exit ;
75151: GO 75243
// dist := 99999 ;
75153: LD_ADDR_VAR 0 5
75157: PUSH
75158: LD_INT 99999
75160: ST_TO_ADDR
// for i in points do
75161: LD_ADDR_VAR 0 4
75165: PUSH
75166: LD_VAR 0 2
75170: PUSH
75171: FOR_IN
75172: IFFALSE 75241
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75174: LD_ADDR_VAR 0 6
75178: PUSH
75179: LD_VAR 0 1
75183: PPUSH
75184: LD_VAR 0 4
75188: PUSH
75189: LD_INT 1
75191: ARRAY
75192: PPUSH
75193: LD_VAR 0 4
75197: PUSH
75198: LD_INT 2
75200: ARRAY
75201: PPUSH
75202: CALL_OW 297
75206: ST_TO_ADDR
// if tmpDist < dist then
75207: LD_VAR 0 6
75211: PUSH
75212: LD_VAR 0 5
75216: LESS
75217: IFFALSE 75239
// begin result := i ;
75219: LD_ADDR_VAR 0 3
75223: PUSH
75224: LD_VAR 0 4
75228: ST_TO_ADDR
// dist := tmpDist ;
75229: LD_ADDR_VAR 0 5
75233: PUSH
75234: LD_VAR 0 6
75238: ST_TO_ADDR
// end ; end ;
75239: GO 75171
75241: POP
75242: POP
// end ;
75243: LD_VAR 0 3
75247: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75248: LD_INT 0
75250: PPUSH
// uc_side := side ;
75251: LD_ADDR_OWVAR 20
75255: PUSH
75256: LD_VAR 0 1
75260: ST_TO_ADDR
// uc_nation := 3 ;
75261: LD_ADDR_OWVAR 21
75265: PUSH
75266: LD_INT 3
75268: ST_TO_ADDR
// vc_chassis := 25 ;
75269: LD_ADDR_OWVAR 37
75273: PUSH
75274: LD_INT 25
75276: ST_TO_ADDR
// vc_engine := engine_siberite ;
75277: LD_ADDR_OWVAR 39
75281: PUSH
75282: LD_INT 3
75284: ST_TO_ADDR
// vc_control := control_computer ;
75285: LD_ADDR_OWVAR 38
75289: PUSH
75290: LD_INT 3
75292: ST_TO_ADDR
// vc_weapon := 59 ;
75293: LD_ADDR_OWVAR 40
75297: PUSH
75298: LD_INT 59
75300: ST_TO_ADDR
// result := CreateVehicle ;
75301: LD_ADDR_VAR 0 5
75305: PUSH
75306: CALL_OW 45
75310: ST_TO_ADDR
// SetDir ( result , d ) ;
75311: LD_VAR 0 5
75315: PPUSH
75316: LD_VAR 0 4
75320: PPUSH
75321: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75325: LD_VAR 0 5
75329: PPUSH
75330: LD_VAR 0 2
75334: PPUSH
75335: LD_VAR 0 3
75339: PPUSH
75340: LD_INT 0
75342: PPUSH
75343: CALL_OW 48
// end ;
75347: LD_VAR 0 5
75351: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75352: LD_INT 0
75354: PPUSH
75355: PPUSH
75356: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75357: LD_ADDR_VAR 0 2
75361: PUSH
75362: LD_INT 0
75364: PUSH
75365: LD_INT 0
75367: PUSH
75368: LD_INT 0
75370: PUSH
75371: LD_INT 0
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75380: LD_VAR 0 1
75384: NOT
75385: IFTRUE 75418
75387: PUSH
75388: LD_VAR 0 1
75392: PPUSH
75393: CALL_OW 264
75397: PUSH
75398: LD_INT 12
75400: PUSH
75401: LD_INT 51
75403: PUSH
75404: LD_INT 32
75406: PUSH
75407: LD_INT 89
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: IN
75416: NOT
75417: OR
75418: IFFALSE 75422
// exit ;
75420: GO 75520
// for i := 1 to 3 do
75422: LD_ADDR_VAR 0 3
75426: PUSH
75427: DOUBLE
75428: LD_INT 1
75430: DEC
75431: ST_TO_ADDR
75432: LD_INT 3
75434: PUSH
75435: FOR_TO
75436: IFFALSE 75518
// begin tmp := GetCargo ( cargo , i ) ;
75438: LD_ADDR_VAR 0 4
75442: PUSH
75443: LD_VAR 0 1
75447: PPUSH
75448: LD_VAR 0 3
75452: PPUSH
75453: CALL_OW 289
75457: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75458: LD_ADDR_VAR 0 2
75462: PUSH
75463: LD_VAR 0 2
75467: PPUSH
75468: LD_VAR 0 3
75472: PPUSH
75473: LD_VAR 0 4
75477: PPUSH
75478: CALL_OW 1
75482: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75483: LD_ADDR_VAR 0 2
75487: PUSH
75488: LD_VAR 0 2
75492: PPUSH
75493: LD_INT 4
75495: PPUSH
75496: LD_VAR 0 2
75500: PUSH
75501: LD_INT 4
75503: ARRAY
75504: PUSH
75505: LD_VAR 0 4
75509: PLUS
75510: PPUSH
75511: CALL_OW 1
75515: ST_TO_ADDR
// end ;
75516: GO 75435
75518: POP
75519: POP
// end ;
75520: LD_VAR 0 2
75524: RET
// export function Length ( array ) ; begin
75525: LD_INT 0
75527: PPUSH
// result := array + 0 ;
75528: LD_ADDR_VAR 0 2
75532: PUSH
75533: LD_VAR 0 1
75537: PUSH
75538: LD_INT 0
75540: PLUS
75541: ST_TO_ADDR
// end ;
75542: LD_VAR 0 2
75546: RET
// export function PrepareArray ( array ) ; begin
75547: LD_INT 0
75549: PPUSH
// result := array diff 0 ;
75550: LD_ADDR_VAR 0 2
75554: PUSH
75555: LD_VAR 0 1
75559: PUSH
75560: LD_INT 0
75562: DIFF
75563: ST_TO_ADDR
// if not result [ 1 ] then
75564: LD_VAR 0 2
75568: PUSH
75569: LD_INT 1
75571: ARRAY
75572: NOT
75573: IFFALSE 75593
// result := Delete ( result , 1 ) ;
75575: LD_ADDR_VAR 0 2
75579: PUSH
75580: LD_VAR 0 2
75584: PPUSH
75585: LD_INT 1
75587: PPUSH
75588: CALL_OW 3
75592: ST_TO_ADDR
// end ;
75593: LD_VAR 0 2
75597: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75598: LD_INT 0
75600: PPUSH
75601: PPUSH
75602: PPUSH
75603: PPUSH
// sibRocketRange := 25 ;
75604: LD_ADDR_VAR 0 6
75608: PUSH
75609: LD_INT 25
75611: ST_TO_ADDR
// result := false ;
75612: LD_ADDR_VAR 0 4
75616: PUSH
75617: LD_INT 0
75619: ST_TO_ADDR
// for i := 0 to 5 do
75620: LD_ADDR_VAR 0 5
75624: PUSH
75625: DOUBLE
75626: LD_INT 0
75628: DEC
75629: ST_TO_ADDR
75630: LD_INT 5
75632: PUSH
75633: FOR_TO
75634: IFFALSE 75701
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75636: LD_VAR 0 1
75640: PPUSH
75641: LD_VAR 0 5
75645: PPUSH
75646: LD_VAR 0 6
75650: PPUSH
75651: CALL_OW 272
75655: PPUSH
75656: LD_VAR 0 2
75660: PPUSH
75661: LD_VAR 0 5
75665: PPUSH
75666: LD_VAR 0 6
75670: PPUSH
75671: CALL_OW 273
75675: PPUSH
75676: LD_VAR 0 3
75680: PPUSH
75681: CALL_OW 309
75685: IFFALSE 75699
// begin result := true ;
75687: LD_ADDR_VAR 0 4
75691: PUSH
75692: LD_INT 1
75694: ST_TO_ADDR
// exit ;
75695: POP
75696: POP
75697: GO 75703
// end ;
75699: GO 75633
75701: POP
75702: POP
// end ;
75703: LD_VAR 0 4
75707: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75708: LD_INT 0
75710: PPUSH
75711: PPUSH
75712: PPUSH
// if btype = b_depot then
75713: LD_VAR 0 2
75717: PUSH
75718: LD_INT 0
75720: EQUAL
75721: IFFALSE 75733
// begin result := true ;
75723: LD_ADDR_VAR 0 3
75727: PUSH
75728: LD_INT 1
75730: ST_TO_ADDR
// exit ;
75731: GO 75853
// end ; pom := GetBase ( depot ) ;
75733: LD_ADDR_VAR 0 4
75737: PUSH
75738: LD_VAR 0 1
75742: PPUSH
75743: CALL_OW 274
75747: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75748: LD_ADDR_VAR 0 5
75752: PUSH
75753: LD_VAR 0 2
75757: PPUSH
75758: LD_VAR 0 1
75762: PPUSH
75763: CALL_OW 248
75767: PPUSH
75768: CALL_OW 450
75772: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75773: LD_ADDR_VAR 0 3
75777: PUSH
75778: LD_VAR 0 4
75782: PPUSH
75783: LD_INT 1
75785: PPUSH
75786: CALL_OW 275
75790: PUSH
75791: LD_VAR 0 5
75795: PUSH
75796: LD_INT 1
75798: ARRAY
75799: GREATEREQUAL
75800: IFFALSE 75826
75802: PUSH
75803: LD_VAR 0 4
75807: PPUSH
75808: LD_INT 2
75810: PPUSH
75811: CALL_OW 275
75815: PUSH
75816: LD_VAR 0 5
75820: PUSH
75821: LD_INT 2
75823: ARRAY
75824: GREATEREQUAL
75825: AND
75826: IFFALSE 75852
75828: PUSH
75829: LD_VAR 0 4
75833: PPUSH
75834: LD_INT 3
75836: PPUSH
75837: CALL_OW 275
75841: PUSH
75842: LD_VAR 0 5
75846: PUSH
75847: LD_INT 3
75849: ARRAY
75850: GREATEREQUAL
75851: AND
75852: ST_TO_ADDR
// end ;
75853: LD_VAR 0 3
75857: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75858: LD_INT 0
75860: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75861: LD_VAR 0 1
75865: PPUSH
75866: LD_VAR 0 2
75870: PPUSH
75871: LD_INT 0
75873: PPUSH
75874: LD_INT 0
75876: PPUSH
75877: LD_INT 1
75879: PPUSH
75880: LD_INT 0
75882: PPUSH
75883: CALL_OW 587
// end ;
75887: LD_VAR 0 3
75891: RET
// export function CenterOnNow ( unit ) ; begin
75892: LD_INT 0
75894: PPUSH
// result := IsInUnit ( unit ) ;
75895: LD_ADDR_VAR 0 2
75899: PUSH
75900: LD_VAR 0 1
75904: PPUSH
75905: CALL_OW 310
75909: ST_TO_ADDR
// if not result then
75910: LD_VAR 0 2
75914: NOT
75915: IFFALSE 75927
// result := unit ;
75917: LD_ADDR_VAR 0 2
75921: PUSH
75922: LD_VAR 0 1
75926: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75927: LD_VAR 0 1
75931: PPUSH
75932: CALL_OW 87
// end ;
75936: LD_VAR 0 2
75940: RET
// export function ComMoveHex ( unit , hex ) ; begin
75941: LD_INT 0
75943: PPUSH
// if not hex then
75944: LD_VAR 0 2
75948: NOT
75949: IFFALSE 75953
// exit ;
75951: GO 76006
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75953: LD_VAR 0 2
75957: PUSH
75958: LD_INT 1
75960: ARRAY
75961: PPUSH
75962: LD_VAR 0 2
75966: PUSH
75967: LD_INT 2
75969: ARRAY
75970: PPUSH
75971: CALL_OW 428
75975: IFFALSE 75979
// exit ;
75977: GO 76006
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75979: LD_VAR 0 1
75983: PPUSH
75984: LD_VAR 0 2
75988: PUSH
75989: LD_INT 1
75991: ARRAY
75992: PPUSH
75993: LD_VAR 0 2
75997: PUSH
75998: LD_INT 2
76000: ARRAY
76001: PPUSH
76002: CALL_OW 111
// end ;
76006: LD_VAR 0 3
76010: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76011: LD_INT 0
76013: PPUSH
76014: PPUSH
76015: PPUSH
// if not unit or not enemy then
76016: LD_VAR 0 1
76020: NOT
76021: IFTRUE 76030
76023: PUSH
76024: LD_VAR 0 2
76028: NOT
76029: OR
76030: IFFALSE 76034
// exit ;
76032: GO 76160
// x := GetX ( enemy ) ;
76034: LD_ADDR_VAR 0 4
76038: PUSH
76039: LD_VAR 0 2
76043: PPUSH
76044: CALL_OW 250
76048: ST_TO_ADDR
// y := GetY ( enemy ) ;
76049: LD_ADDR_VAR 0 5
76053: PUSH
76054: LD_VAR 0 2
76058: PPUSH
76059: CALL_OW 251
76063: ST_TO_ADDR
// if ValidHex ( x , y ) then
76064: LD_VAR 0 4
76068: PPUSH
76069: LD_VAR 0 5
76073: PPUSH
76074: CALL_OW 488
76078: IFFALSE 76160
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76080: LD_VAR 0 2
76084: PPUSH
76085: CALL_OW 247
76089: PUSH
76090: LD_INT 3
76092: PUSH
76093: LD_INT 2
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: IN
76100: IFTRUE 76123
76102: PUSH
76103: LD_VAR 0 1
76107: PPUSH
76108: CALL_OW 255
76112: PPUSH
76113: LD_VAR 0 2
76117: PPUSH
76118: CALL_OW 292
76122: OR
76123: IFFALSE 76141
// ComAttackUnit ( unit , enemy ) else
76125: LD_VAR 0 1
76129: PPUSH
76130: LD_VAR 0 2
76134: PPUSH
76135: CALL_OW 115
76139: GO 76160
// ComAgressiveMove ( unit , x , y ) ;
76141: LD_VAR 0 1
76145: PPUSH
76146: LD_VAR 0 4
76150: PPUSH
76151: LD_VAR 0 5
76155: PPUSH
76156: CALL_OW 114
// end ;
76160: LD_VAR 0 3
76164: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76165: LD_INT 0
76167: PPUSH
76168: PPUSH
76169: PPUSH
// list := AreaToList ( area , 0 ) ;
76170: LD_ADDR_VAR 0 5
76174: PUSH
76175: LD_VAR 0 1
76179: PPUSH
76180: LD_INT 0
76182: PPUSH
76183: CALL_OW 517
76187: ST_TO_ADDR
// if not list then
76188: LD_VAR 0 5
76192: NOT
76193: IFFALSE 76197
// exit ;
76195: GO 76327
// if all then
76197: LD_VAR 0 2
76201: IFFALSE 76289
// begin for i := 1 to list [ 1 ] do
76203: LD_ADDR_VAR 0 4
76207: PUSH
76208: DOUBLE
76209: LD_INT 1
76211: DEC
76212: ST_TO_ADDR
76213: LD_VAR 0 5
76217: PUSH
76218: LD_INT 1
76220: ARRAY
76221: PUSH
76222: FOR_TO
76223: IFFALSE 76285
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76225: LD_ADDR_VAR 0 3
76229: PUSH
76230: LD_VAR 0 3
76234: PPUSH
76235: LD_VAR 0 3
76239: PUSH
76240: LD_INT 1
76242: PLUS
76243: PPUSH
76244: LD_VAR 0 5
76248: PUSH
76249: LD_INT 1
76251: ARRAY
76252: PUSH
76253: LD_VAR 0 4
76257: ARRAY
76258: PUSH
76259: LD_VAR 0 5
76263: PUSH
76264: LD_INT 2
76266: ARRAY
76267: PUSH
76268: LD_VAR 0 4
76272: ARRAY
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: PPUSH
76278: CALL_OW 1
76282: ST_TO_ADDR
76283: GO 76222
76285: POP
76286: POP
// exit ;
76287: GO 76327
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76289: LD_ADDR_VAR 0 3
76293: PUSH
76294: LD_VAR 0 5
76298: PUSH
76299: LD_INT 1
76301: ARRAY
76302: PUSH
76303: LD_INT 1
76305: ARRAY
76306: PUSH
76307: LD_VAR 0 5
76311: PUSH
76312: LD_INT 2
76314: ARRAY
76315: PUSH
76316: LD_INT 1
76318: ARRAY
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PUSH
76324: EMPTY
76325: LIST
76326: ST_TO_ADDR
// end ;
76327: LD_VAR 0 3
76331: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76332: LD_INT 0
76334: PPUSH
76335: PPUSH
// list := AreaToList ( area , 0 ) ;
76336: LD_ADDR_VAR 0 4
76340: PUSH
76341: LD_VAR 0 1
76345: PPUSH
76346: LD_INT 0
76348: PPUSH
76349: CALL_OW 517
76353: ST_TO_ADDR
// if not list then
76354: LD_VAR 0 4
76358: NOT
76359: IFFALSE 76363
// exit ;
76361: GO 76404
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76363: LD_ADDR_VAR 0 3
76367: PUSH
76368: LD_VAR 0 4
76372: PUSH
76373: LD_INT 1
76375: ARRAY
76376: PUSH
76377: LD_INT 1
76379: ARRAY
76380: PUSH
76381: LD_VAR 0 4
76385: PUSH
76386: LD_INT 2
76388: ARRAY
76389: PUSH
76390: LD_INT 1
76392: ARRAY
76393: PUSH
76394: LD_VAR 0 2
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: LIST
76403: ST_TO_ADDR
// end ;
76404: LD_VAR 0 3
76408: RET
// export function First ( array ) ; begin
76409: LD_INT 0
76411: PPUSH
// if not array then
76412: LD_VAR 0 1
76416: NOT
76417: IFFALSE 76421
// exit ;
76419: GO 76435
// result := array [ 1 ] ;
76421: LD_ADDR_VAR 0 2
76425: PUSH
76426: LD_VAR 0 1
76430: PUSH
76431: LD_INT 1
76433: ARRAY
76434: ST_TO_ADDR
// end ;
76435: LD_VAR 0 2
76439: RET
// export function Last ( array ) ; begin
76440: LD_INT 0
76442: PPUSH
// if not array then
76443: LD_VAR 0 1
76447: NOT
76448: IFFALSE 76452
// exit ;
76450: GO 76468
// result := array [ array ] ;
76452: LD_ADDR_VAR 0 2
76456: PUSH
76457: LD_VAR 0 1
76461: PUSH
76462: LD_VAR 0 1
76466: ARRAY
76467: ST_TO_ADDR
// end ;
76468: LD_VAR 0 2
76472: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76473: LD_INT 0
76475: PPUSH
76476: PPUSH
// result := [ ] ;
76477: LD_ADDR_VAR 0 5
76481: PUSH
76482: EMPTY
76483: ST_TO_ADDR
// if not array then
76484: LD_VAR 0 1
76488: NOT
76489: IFFALSE 76493
// exit ;
76491: GO 76605
// for i := 1 to array do
76493: LD_ADDR_VAR 0 6
76497: PUSH
76498: DOUBLE
76499: LD_INT 1
76501: DEC
76502: ST_TO_ADDR
76503: LD_VAR 0 1
76507: PUSH
76508: FOR_TO
76509: IFFALSE 76603
// if array [ i ] [ index ] = value then
76511: LD_VAR 0 1
76515: PUSH
76516: LD_VAR 0 6
76520: ARRAY
76521: PUSH
76522: LD_VAR 0 2
76526: ARRAY
76527: PUSH
76528: LD_VAR 0 3
76532: EQUAL
76533: IFFALSE 76601
// begin if indexColumn then
76535: LD_VAR 0 4
76539: IFFALSE 76575
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76541: LD_ADDR_VAR 0 5
76545: PUSH
76546: LD_VAR 0 5
76550: PPUSH
76551: LD_VAR 0 1
76555: PUSH
76556: LD_VAR 0 6
76560: ARRAY
76561: PUSH
76562: LD_VAR 0 4
76566: ARRAY
76567: PPUSH
76568: CALL 71613 0 2
76572: ST_TO_ADDR
76573: GO 76601
// result := Join ( result , array [ i ] ) ;
76575: LD_ADDR_VAR 0 5
76579: PUSH
76580: LD_VAR 0 5
76584: PPUSH
76585: LD_VAR 0 1
76589: PUSH
76590: LD_VAR 0 6
76594: ARRAY
76595: PPUSH
76596: CALL 71613 0 2
76600: ST_TO_ADDR
// end ;
76601: GO 76508
76603: POP
76604: POP
// end ;
76605: LD_VAR 0 5
76609: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76610: LD_INT 0
76612: PPUSH
// if not vehicles or not parkingPoint then
76613: LD_VAR 0 1
76617: NOT
76618: IFTRUE 76627
76620: PUSH
76621: LD_VAR 0 2
76625: NOT
76626: OR
76627: IFFALSE 76631
// exit ;
76629: GO 76729
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76631: LD_ADDR_VAR 0 1
76635: PUSH
76636: LD_VAR 0 1
76640: PPUSH
76641: LD_INT 50
76643: PUSH
76644: EMPTY
76645: LIST
76646: PUSH
76647: LD_INT 3
76649: PUSH
76650: LD_INT 92
76652: PUSH
76653: LD_VAR 0 2
76657: PUSH
76658: LD_INT 1
76660: ARRAY
76661: PUSH
76662: LD_VAR 0 2
76666: PUSH
76667: LD_INT 2
76669: ARRAY
76670: PUSH
76671: LD_INT 8
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: PPUSH
76688: CALL_OW 72
76692: ST_TO_ADDR
// if not vehicles then
76693: LD_VAR 0 1
76697: NOT
76698: IFFALSE 76702
// exit ;
76700: GO 76729
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76702: LD_VAR 0 1
76706: PPUSH
76707: LD_VAR 0 2
76711: PUSH
76712: LD_INT 1
76714: ARRAY
76715: PPUSH
76716: LD_VAR 0 2
76720: PUSH
76721: LD_INT 2
76723: ARRAY
76724: PPUSH
76725: CALL_OW 111
// end ;
76729: LD_VAR 0 3
76733: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76734: LD_INT 0
76736: PPUSH
76737: PPUSH
76738: PPUSH
// if not side or not area then
76739: LD_VAR 0 1
76743: NOT
76744: IFTRUE 76753
76746: PUSH
76747: LD_VAR 0 2
76751: NOT
76752: OR
76753: IFFALSE 76757
// exit ;
76755: GO 76876
// tmp := AreaToList ( area , 0 ) ;
76757: LD_ADDR_VAR 0 5
76761: PUSH
76762: LD_VAR 0 2
76766: PPUSH
76767: LD_INT 0
76769: PPUSH
76770: CALL_OW 517
76774: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76775: LD_ADDR_VAR 0 4
76779: PUSH
76780: DOUBLE
76781: LD_INT 1
76783: DEC
76784: ST_TO_ADDR
76785: LD_VAR 0 5
76789: PUSH
76790: LD_INT 1
76792: ARRAY
76793: PUSH
76794: FOR_TO
76795: IFFALSE 76874
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76797: LD_VAR 0 5
76801: PUSH
76802: LD_INT 1
76804: ARRAY
76805: PUSH
76806: LD_VAR 0 4
76810: ARRAY
76811: PPUSH
76812: LD_VAR 0 5
76816: PUSH
76817: LD_INT 2
76819: ARRAY
76820: PUSH
76821: LD_VAR 0 4
76825: ARRAY
76826: PPUSH
76827: CALL_OW 351
76831: IFFALSE 76872
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76833: LD_VAR 0 5
76837: PUSH
76838: LD_INT 1
76840: ARRAY
76841: PUSH
76842: LD_VAR 0 4
76846: ARRAY
76847: PPUSH
76848: LD_VAR 0 5
76852: PUSH
76853: LD_INT 2
76855: ARRAY
76856: PUSH
76857: LD_VAR 0 4
76861: ARRAY
76862: PPUSH
76863: LD_VAR 0 1
76867: PPUSH
76868: CALL_OW 244
// end ;
76872: GO 76794
76874: POP
76875: POP
// end ;
76876: LD_VAR 0 3
76880: RET
// export function UniqueArray ( array ) ; var i ; begin
76881: LD_INT 0
76883: PPUSH
76884: PPUSH
// result := [ ] ;
76885: LD_ADDR_VAR 0 2
76889: PUSH
76890: EMPTY
76891: ST_TO_ADDR
// if not array then
76892: LD_VAR 0 1
76896: NOT
76897: IFFALSE 76901
// exit ;
76899: GO 76962
// for i := 1 to array do
76901: LD_ADDR_VAR 0 3
76905: PUSH
76906: DOUBLE
76907: LD_INT 1
76909: DEC
76910: ST_TO_ADDR
76911: LD_VAR 0 1
76915: PUSH
76916: FOR_TO
76917: IFFALSE 76960
// if not array [ i ] in result then
76919: LD_VAR 0 1
76923: PUSH
76924: LD_VAR 0 3
76928: ARRAY
76929: PUSH
76930: LD_VAR 0 2
76934: IN
76935: NOT
76936: IFFALSE 76958
// result := Join ( result , i ) ;
76938: LD_ADDR_VAR 0 2
76942: PUSH
76943: LD_VAR 0 2
76947: PPUSH
76948: LD_VAR 0 3
76952: PPUSH
76953: CALL 71613 0 2
76957: ST_TO_ADDR
76958: GO 76916
76960: POP
76961: POP
// end ; end_of_file
76962: LD_VAR 0 2
76966: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76967: LD_VAR 0 1
76971: PPUSH
76972: LD_VAR 0 2
76976: PPUSH
76977: LD_VAR 0 3
76981: PPUSH
76982: LD_VAR 0 4
76986: PPUSH
76987: LD_VAR 0 5
76991: PPUSH
76992: LD_VAR 0 6
76996: PPUSH
76997: CALL 10869 0 6
// end ;
77001: PPOPN 6
77003: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77004: LD_INT 0
77006: PPUSH
// begin if not units then
77007: LD_VAR 0 1
77011: NOT
77012: IFFALSE 77016
// exit ;
77014: GO 77050
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77016: LD_VAR 0 1
77020: PPUSH
77021: LD_VAR 0 2
77025: PPUSH
77026: LD_VAR 0 3
77030: PPUSH
77031: LD_VAR 0 4
77035: PPUSH
77036: LD_VAR 0 5
77040: PPUSH
77041: LD_VAR 0 6
77045: PPUSH
77046: CALL 33386 0 6
// end ;
77050: PPOPN 7
77052: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77053: CALL 10749 0 0
// end ;
77057: PPOPN 1
77059: END
