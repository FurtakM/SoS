// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1990 0 0
// PrepareArabian ;
  23: CALL 1230 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5582 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PUSH
 664: LD_OWVAR 67
 668: ARRAY
 669: PPUSH
 670: CALL 504 0 2
// for i := 1 to 2 do
 674: LD_ADDR_VAR 0 3
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_INT 2
 686: PUSH
 687: FOR_TO
 688: IFFALSE 725
// begin hc_class := 21 ;
 690: LD_ADDR_OWVAR 28
 694: PUSH
 695: LD_INT 21
 697: ST_TO_ADDR
// hc_gallery :=  ;
 698: LD_ADDR_OWVAR 33
 702: PUSH
 703: LD_STRING 
 705: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 687
 725: POP
 726: POP
// for i := 1 to 2 do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_INT 2
 739: PUSH
 740: FOR_TO
 741: IFFALSE 778
// begin hc_class := 18 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 18
 750: ST_TO_ADDR
// hc_gallery :=  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 759: CALL_OW 44
 763: PPUSH
 764: LD_VAR 0 1
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 49
// end ;
 776: GO 740
 778: POP
 779: POP
// for i := 1 to 2 do
 780: LD_ADDR_VAR 0 3
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 2
 792: PUSH
 793: FOR_TO
 794: IFFALSE 831
// begin hc_class := 13 ;
 796: LD_ADDR_OWVAR 28
 800: PUSH
 801: LD_INT 13
 803: ST_TO_ADDR
// hc_gallery :=  ;
 804: LD_ADDR_OWVAR 33
 808: PUSH
 809: LD_STRING 
 811: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 812: CALL_OW 44
 816: PPUSH
 817: LD_VAR 0 1
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 793
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 2
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ;
 999: LD_VAR 0 4
1003: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
1010: PPUSH
// if not unit then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1225
// side := GetSide ( unit ) ;
1020: LD_ADDR_VAR 0 4
1024: PUSH
1025: LD_VAR 0 1
1029: PPUSH
1030: CALL_OW 255
1034: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1035: LD_ADDR_VAR 0 5
1039: PUSH
1040: LD_INT 22
1042: PUSH
1043: LD_VAR 0 4
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_VAR 0 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: ST_TO_ADDR
// if not tmp then
1073: LD_VAR 0 5
1077: NOT
1078: IFFALSE 1082
// exit ;
1080: GO 1225
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 5
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 32385 0 4
1107: ST_TO_ADDR
// places := 1 ;
1108: LD_ADDR_VAR 0 7
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1116: LD_VAR 0 2
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 4
1129: PUSH
1130: LD_INT 5
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: LD_INT 6
1141: PUSH
1142: LD_INT 7
1144: PUSH
1145: LD_INT 8
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: IN
1159: IFFALSE 1169
// places := 6 ;
1161: LD_ADDR_VAR 0 7
1165: PUSH
1166: LD_INT 6
1168: ST_TO_ADDR
// for i in tmp do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: LD_VAR 0 5
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1223
// begin if UnitsInside ( i ) - places <= 0 then
1182: LD_VAR 0 6
1186: PPUSH
1187: CALL_OW 313
1191: PUSH
1192: LD_VAR 0 7
1196: MINUS
1197: PUSH
1198: LD_INT 0
1200: LESSEQUAL
1201: IFFALSE 1207
// continue else
1203: GO 1179
1205: GO 1221
// begin result := i ;
1207: LD_ADDR_VAR 0 3
1211: PUSH
1212: LD_VAR 0 6
1216: ST_TO_ADDR
// exit ;
1217: POP
1218: POP
1219: GO 1225
// end ; end ;
1221: GO 1179
1223: POP
1224: POP
// end ; end_of_file
1225: LD_VAR 0 3
1229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1230: LD_INT 0
1232: PPUSH
1233: PPUSH
// uc_side := 2 ;
1234: LD_ADDR_OWVAR 20
1238: PUSH
1239: LD_INT 2
1241: ST_TO_ADDR
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1250: LD_ADDR_EXP 18
1254: PUSH
1255: LD_STRING Heike
1257: PPUSH
1258: LD_EXP 1
1262: NOT
1263: PPUSH
1264: LD_EXP 2
1268: PPUSH
1269: CALL 27004 0 3
1273: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1274: LD_ADDR_EXP 21
1278: PUSH
1279: LD_STRING Ibrahim
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 2
1292: PPUSH
1293: CALL 27004 0 3
1297: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1298: LD_ADDR_EXP 19
1302: PUSH
1303: LD_STRING Givi
1305: PPUSH
1306: LD_EXP 1
1310: NOT
1311: PPUSH
1312: LD_EXP 2
1316: PPUSH
1317: CALL 27004 0 3
1321: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1322: LD_ADDR_EXP 22
1326: PUSH
1327: LD_STRING Kamil
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 2
1340: PPUSH
1341: CALL 27004 0 3
1345: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1346: LD_ADDR_EXP 23
1350: PUSH
1351: LD_STRING Kaia
1353: PPUSH
1354: LD_EXP 1
1358: NOT
1359: PPUSH
1360: LD_EXP 2
1364: PPUSH
1365: CALL 27004 0 3
1369: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1370: LD_ADDR_EXP 24
1374: PUSH
1375: LD_STRING Sophia
1377: PPUSH
1378: LD_EXP 1
1382: NOT
1383: PPUSH
1384: LD_EXP 2
1388: PPUSH
1389: CALL 27004 0 3
1393: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1394: LD_ADDR_EXP 25
1398: PUSH
1399: LD_STRING Markov
1401: PPUSH
1402: LD_EXP 1
1406: NOT
1407: PPUSH
1408: LD_EXP 2
1412: PPUSH
1413: CALL 27004 0 3
1417: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1418: LD_ADDR_EXP 28
1422: PUSH
1423: LD_STRING Aviradze
1425: PPUSH
1426: LD_EXP 1
1430: NOT
1431: PPUSH
1432: LD_EXP 2
1436: PPUSH
1437: CALL 27004 0 3
1441: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1442: LD_ADDR_EXP 27
1446: PUSH
1447: LD_STRING Kurt
1449: PPUSH
1450: LD_EXP 1
1454: NOT
1455: PPUSH
1456: LD_EXP 2
1460: PPUSH
1461: CALL 27004 0 3
1465: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1466: LD_ADDR_EXP 20
1470: PUSH
1471: LD_STRING Mike
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 2
1484: PPUSH
1485: CALL 27004 0 3
1489: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1490: LD_ADDR_EXP 29
1494: PUSH
1495: LD_STRING 04_1_others
1497: PPUSH
1498: CALL_OW 31
1502: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1503: LD_ADDR_EXP 31
1507: PUSH
1508: LD_STRING 04_1_apes
1510: PPUSH
1511: CALL_OW 31
1515: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1516: LD_ADDR_EXP 30
1520: PUSH
1521: LD_STRING 04_1_Vehicles
1523: PPUSH
1524: EMPTY
1525: PPUSH
1526: CALL_OW 30
1530: ST_TO_ADDR
// uc_side := 5 ;
1531: LD_ADDR_OWVAR 20
1535: PUSH
1536: LD_INT 5
1538: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1539: LD_ADDR_EXP 26
1543: PUSH
1544: LD_STRING Abdul
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: LD_STRING 
1552: PPUSH
1553: CALL 27004 0 3
1557: ST_TO_ADDR
// end ;
1558: LD_VAR 0 1
1562: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1563: LD_STRING 04_1_KaganCaptured
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 30
1573: PUSH
1574: LD_INT 22
1576: PUSH
1577: LD_INT 5
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 69
1588: NOT
1589: AND
1590: PUSH
1591: LD_INT 124
1593: PPUSH
1594: LD_INT 26
1596: PPUSH
1597: CALL_OW 428
1601: PUSH
1602: LD_INT 0
1604: EQUAL
1605: PUSH
1606: LD_INT 124
1608: PPUSH
1609: LD_INT 26
1611: PPUSH
1612: CALL_OW 428
1616: PPUSH
1617: CALL_OW 255
1621: PUSH
1622: LD_INT 2
1624: EQUAL
1625: XOR
1626: AND
1627: IFFALSE 1987
1629: GO 1631
1631: DISABLE
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
// begin enable ;
1636: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1637: LD_EXP 33
1641: NOT
1642: PUSH
1643: LD_EXP 33
1647: PUSH
1648: LD_INT 4
1650: GREATER
1651: OR
1652: IFFALSE 1662
// cargoCounter := 1 ;
1654: LD_ADDR_EXP 33
1658: PUSH
1659: LD_INT 1
1661: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: LD_INT 142
1669: PUSH
1670: LD_INT 15
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 129
1679: PUSH
1680: LD_INT 11
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 138
1689: PUSH
1690: LD_INT 9
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 133
1699: PUSH
1700: LD_INT 10
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// uc_side := 5 ;
1713: LD_ADDR_OWVAR 20
1717: PUSH
1718: LD_INT 5
1720: ST_TO_ADDR
// uc_nation := 2 ;
1721: LD_ADDR_OWVAR 21
1725: PUSH
1726: LD_INT 2
1728: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 2
1734: PPUSH
1735: LD_INT 13
1737: PPUSH
1738: LD_INT 2
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 32
1746: PPUSH
1747: LD_INT 70
1749: PPUSH
1750: CALL 336 0 7
// veh := CreateVehicle ;
1754: LD_ADDR_VAR 0 1
1758: PUSH
1759: CALL_OW 45
1763: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1764: LD_VAR 0 1
1768: PPUSH
1769: LD_INT 3
1771: PPUSH
1772: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1776: LD_VAR 0 1
1780: PPUSH
1781: LD_INT 8
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 49
// if not cargoDriver then
1791: LD_EXP 32
1795: NOT
1796: IFFALSE 1821
// begin PrepareHuman ( false , 1 , 3 ) ;
1798: LD_INT 0
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: LD_INT 3
1806: PPUSH
1807: CALL_OW 380
// cargoDriver := CreateHuman ;
1811: LD_ADDR_EXP 32
1815: PUSH
1816: CALL_OW 44
1820: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1821: LD_EXP 32
1825: PPUSH
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1850: LD_VAR 0 1
1854: PPUSH
1855: LD_VAR 0 2
1859: PUSH
1860: LD_EXP 33
1864: ARRAY
1865: PUSH
1866: LD_INT 1
1868: ARRAY
1869: PPUSH
1870: LD_VAR 0 2
1874: PUSH
1875: LD_EXP 33
1879: ARRAY
1880: PUSH
1881: LD_INT 2
1883: ARRAY
1884: PPUSH
1885: CALL_OW 111
// AddComUnload ( veh ) ;
1889: LD_VAR 0 1
1893: PPUSH
1894: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1898: LD_VAR 0 1
1902: PPUSH
1903: LD_INT 133
1905: PPUSH
1906: LD_INT 2
1908: PPUSH
1909: CALL_OW 171
// wait ( 0 0$5 ) ;
1913: LD_INT 175
1915: PPUSH
1916: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1920: LD_INT 35
1922: PPUSH
1923: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1927: LD_VAR 0 1
1931: PPUSH
1932: LD_INT 133
1934: PPUSH
1935: LD_INT 2
1937: PPUSH
1938: CALL_OW 307
1942: PUSH
1943: LD_VAR 0 1
1947: PPUSH
1948: LD_INT 8
1950: PPUSH
1951: CALL_OW 308
1955: OR
1956: IFFALSE 1920
// RemoveUnit ( cargoDriver ) ;
1958: LD_EXP 32
1962: PPUSH
1963: CALL_OW 64
// RemoveUnit ( veh ) ;
1967: LD_VAR 0 1
1971: PPUSH
1972: CALL_OW 64
// if tick >= 20 20$00 then
1976: LD_OWVAR 1
1980: PUSH
1981: LD_INT 42000
1983: GREATEREQUAL
1984: IFFALSE 1987
// disable ;
1986: DISABLE
// end ; end_of_file
1987: PPOPN 2
1989: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1990: LD_INT 0
1992: PPUSH
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// uc_side := 3 ;
2001: LD_ADDR_OWVAR 20
2005: PUSH
2006: LD_INT 3
2008: ST_TO_ADDR
// uc_nation := 3 ;
2009: LD_ADDR_OWVAR 21
2013: PUSH
2014: LD_INT 3
2016: ST_TO_ADDR
// ruForce := [ ] ;
2017: LD_ADDR_EXP 37
2021: PUSH
2022: EMPTY
2023: ST_TO_ADDR
// ruMech := [ ] ;
2024: LD_ADDR_EXP 39
2028: PUSH
2029: EMPTY
2030: ST_TO_ADDR
// ruEng := [ ] ;
2031: LD_ADDR_EXP 38
2035: PUSH
2036: EMPTY
2037: ST_TO_ADDR
// ruSci := [ ] ;
2038: LD_ADDR_EXP 40
2042: PUSH
2043: EMPTY
2044: ST_TO_ADDR
// ruMobile := [ ] ;
2045: LD_ADDR_EXP 41
2049: PUSH
2050: EMPTY
2051: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2052: LD_ADDR_EXP 34
2056: PUSH
2057: LD_STRING Burlak
2059: PPUSH
2060: LD_INT 0
2062: PPUSH
2063: LD_STRING 
2065: PPUSH
2066: CALL 27004 0 3
2070: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2071: LD_ADDR_EXP 35
2075: PUSH
2076: LD_STRING Gaydar
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: LD_STRING 
2084: PPUSH
2085: CALL 27004 0 3
2089: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2090: LD_ADDR_EXP 36
2094: PUSH
2095: LD_STRING Kuzmov
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: LD_STRING 
2103: PPUSH
2104: CALL 27004 0 3
2108: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2109: LD_EXP 36
2113: PPUSH
2114: LD_INT 200
2116: PPUSH
2117: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2121: LD_INT 200
2123: PPUSH
2124: LD_STRING chuikov
2126: PPUSH
2127: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 ] [ Difficulty ] ) ;
2131: LD_INT 200
2133: PPUSH
2134: CALL_OW 274
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 800
2144: PUSH
2145: LD_INT 1000
2147: PUSH
2148: LD_INT 1250
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: PUSH
2156: LD_OWVAR 67
2160: ARRAY
2161: PPUSH
2162: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2166: LD_INT 200
2168: PPUSH
2169: CALL_OW 274
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: LD_INT 160
2179: PPUSH
2180: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2184: LD_INT 225
2186: PPUSH
2187: CALL_OW 274
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 200
2197: PPUSH
2198: CALL_OW 277
// oil := 150 ;
2202: LD_ADDR_VAR 0 9
2206: PUSH
2207: LD_INT 150
2209: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
2210: LD_EXP 5
2214: PUSH
2215: LD_INT 94500
2217: PUSH
2218: LD_INT 84000
2220: PUSH
2221: LD_INT 73500
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: PUSH
2229: LD_OWVAR 67
2233: ARRAY
2234: GREATEREQUAL
2235: IFFALSE 2390
// begin oil := 450 ;
2237: LD_ADDR_VAR 0 9
2241: PUSH
2242: LD_INT 450
2244: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2245: LD_ADDR_VAR 0 7
2249: PUSH
2250: LD_INT 123
2252: PUSH
2253: LD_INT 17
2255: PUSH
2256: LD_INT 3
2258: PUSH
2259: LD_INT 31
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 152
2270: PUSH
2271: LD_INT 38
2273: PUSH
2274: LD_INT 3
2276: PUSH
2277: LD_INT 31
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 81
2288: PUSH
2289: LD_INT 6
2291: PUSH
2292: LD_INT 4
2294: PUSH
2295: LD_INT 31
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 113
2306: PUSH
2307: LD_INT 67
2309: PUSH
2310: LD_INT 4
2312: PUSH
2313: LD_INT 32
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// for i in tmp do
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_VAR 0 7
2337: PUSH
2338: FOR_IN
2339: IFFALSE 2388
// begin bc_type := i [ 4 ] ;
2341: LD_ADDR_OWVAR 42
2345: PUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2355: LD_VAR 0 4
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 2
2371: ARRAY
2372: PPUSH
2373: LD_VAR 0 4
2377: PUSH
2378: LD_INT 3
2380: ARRAY
2381: PPUSH
2382: CALL_OW 47
// end ;
2386: GO 2338
2388: POP
2389: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2390: LD_INT 225
2392: PPUSH
2393: CALL_OW 274
2397: PPUSH
2398: LD_INT 2
2400: PPUSH
2401: LD_VAR 0 9
2405: PPUSH
2406: CALL_OW 277
// if Difficulty > 1 then
2410: LD_OWVAR 67
2414: PUSH
2415: LD_INT 1
2417: GREATER
2418: IFFALSE 2513
// begin bc_type := b_bunker ;
2420: LD_ADDR_OWVAR 42
2424: PUSH
2425: LD_INT 32
2427: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2428: LD_ADDR_VAR 0 7
2432: PUSH
2433: LD_INT 121
2435: PUSH
2436: LD_INT 85
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 93
2449: PUSH
2450: LD_INT 72
2452: PUSH
2453: LD_INT 1
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: ST_TO_ADDR
// for i in tmp do
2465: LD_ADDR_VAR 0 4
2469: PUSH
2470: LD_VAR 0 7
2474: PUSH
2475: FOR_IN
2476: IFFALSE 2511
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2478: LD_VAR 0 4
2482: PUSH
2483: LD_INT 1
2485: ARRAY
2486: PPUSH
2487: LD_VAR 0 4
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PPUSH
2496: LD_VAR 0 4
2500: PUSH
2501: LD_INT 3
2503: ARRAY
2504: PPUSH
2505: CALL_OW 47
2509: GO 2475
2511: POP
2512: POP
// end ; base := GetBase ( ruMainBase ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_INT 200
2520: PPUSH
2521: CALL_OW 274
2525: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 417
2540: ST_TO_ADDR
// for b in blist do
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_VAR 0 3
2550: PUSH
2551: FOR_IN
2552: IFFALSE 3003
// begin if b [ 1 ] = b_factory then
2554: LD_VAR 0 5
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_INT 3
2565: EQUAL
2566: IFFALSE 2717
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2568: LD_ADDR_VAR 0 8
2572: PUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: LD_VAR 0 5
2586: PUSH
2587: LD_INT 3
2589: ARRAY
2590: PPUSH
2591: CALL_OW 428
2595: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2596: LD_ADDR_VAR 0 4
2600: PUSH
2601: DOUBLE
2602: LD_INT 1
2604: DEC
2605: ST_TO_ADDR
2606: LD_INT 2
2608: PUSH
2609: LD_INT 2
2611: PUSH
2612: LD_OWVAR 67
2616: PLUS
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: LD_EXP 10
2626: PUSH
2627: LD_INT 3
2629: GREATER
2630: PUSH
2631: LD_INT 1
2633: PLUS
2634: ARRAY
2635: PUSH
2636: FOR_TO
2637: IFFALSE 2713
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2639: LD_INT 0
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 1
2647: PUSH
2648: LD_OWVAR 67
2652: PLUS
2653: PPUSH
2654: CALL_OW 380
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 6
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2668: LD_ADDR_EXP 39
2672: PUSH
2673: LD_EXP 39
2677: PPUSH
2678: LD_EXP 39
2682: PUSH
2683: LD_INT 1
2685: PLUS
2686: PPUSH
2687: LD_VAR 0 6
2691: PPUSH
2692: CALL_OW 1
2696: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2697: LD_VAR 0 6
2701: PPUSH
2702: LD_VAR 0 8
2706: PPUSH
2707: CALL_OW 52
// end ;
2711: GO 2636
2713: POP
2714: POP
// end else
2715: GO 3001
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2717: LD_VAR 0 5
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_INT 6
2728: PUSH
2729: LD_INT 7
2731: PUSH
2732: LD_INT 8
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: IN
2744: IFFALSE 2854
// begin for i := 1 to 2 do
2746: LD_ADDR_VAR 0 4
2750: PUSH
2751: DOUBLE
2752: LD_INT 1
2754: DEC
2755: ST_TO_ADDR
2756: LD_INT 2
2758: PUSH
2759: FOR_TO
2760: IFFALSE 2850
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2762: LD_INT 0
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_OWVAR 67
2772: PPUSH
2773: CALL_OW 380
// un := CreateHuman ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2787: LD_ADDR_EXP 40
2791: PUSH
2792: LD_EXP 40
2796: PPUSH
2797: LD_EXP 40
2801: PUSH
2802: LD_INT 1
2804: PLUS
2805: PPUSH
2806: LD_VAR 0 6
2810: PPUSH
2811: CALL_OW 1
2815: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2816: LD_VAR 0 6
2820: PPUSH
2821: LD_VAR 0 5
2825: PUSH
2826: LD_INT 2
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 5
2834: PUSH
2835: LD_INT 3
2837: ARRAY
2838: PPUSH
2839: CALL_OW 428
2843: PPUSH
2844: CALL_OW 52
// end ;
2848: GO 2759
2850: POP
2851: POP
// end else
2852: GO 3001
// if b [ 1 ] = b_warehouse then
2854: LD_VAR 0 5
2858: PUSH
2859: LD_INT 1
2861: ARRAY
2862: PUSH
2863: LD_INT 1
2865: EQUAL
2866: IFFALSE 3001
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 1
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_EXP 10
2898: PUSH
2899: LD_INT 3
2901: GREATER
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2999
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 2
2916: PPUSH
2917: LD_OWVAR 67
2921: PPUSH
2922: CALL_OW 380
// un := CreateHuman ;
2926: LD_ADDR_VAR 0 6
2930: PUSH
2931: CALL_OW 44
2935: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2936: LD_ADDR_EXP 38
2940: PUSH
2941: LD_EXP 38
2945: PPUSH
2946: LD_EXP 38
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: PPUSH
2955: LD_VAR 0 6
2959: PPUSH
2960: CALL_OW 1
2964: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2965: LD_VAR 0 6
2969: PPUSH
2970: LD_VAR 0 5
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 5
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: CALL_OW 428
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2908
2999: POP
3000: POP
// end ; end ;
3001: GO 2551
3003: POP
3004: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_INT 22
3012: PUSH
3013: LD_INT 3
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: LD_INT 21
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PPUSH
3034: CALL_OW 69
3038: ST_TO_ADDR
// for b in blist do
3039: LD_ADDR_VAR 0 5
3043: PUSH
3044: LD_VAR 0 3
3048: PUSH
3049: FOR_IN
3050: IFFALSE 3072
// SetBLevel ( b , 3 + Difficulty ) ;
3052: LD_VAR 0 5
3056: PPUSH
3057: LD_INT 3
3059: PUSH
3060: LD_OWVAR 67
3064: PLUS
3065: PPUSH
3066: CALL_OW 241
3070: GO 3049
3072: POP
3073: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3074: LD_ADDR_VAR 0 3
3078: PUSH
3079: LD_INT 22
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 30
3091: PUSH
3092: LD_INT 32
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// for b in blist do
3108: LD_ADDR_VAR 0 5
3112: PUSH
3113: LD_VAR 0 3
3117: PUSH
3118: FOR_IN
3119: IFFALSE 3228
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3121: LD_INT 0
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 1
3129: PUSH
3130: LD_OWVAR 67
3134: PLUS
3135: PPUSH
3136: CALL_OW 380
// un := CreateHuman ;
3140: LD_ADDR_VAR 0 6
3144: PUSH
3145: CALL_OW 44
3149: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3150: LD_ADDR_EXP 37
3154: PUSH
3155: LD_EXP 37
3159: PPUSH
3160: LD_EXP 37
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 6
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3179: LD_VAR 0 6
3183: PPUSH
3184: LD_VAR 0 5
3188: PPUSH
3189: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3193: LD_VAR 0 5
3197: PPUSH
3198: LD_INT 44
3200: PUSH
3201: LD_INT 43
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PUSH
3208: LD_VAR 0 5
3212: PUSH
3213: LD_INT 2
3215: MOD
3216: PUSH
3217: LD_INT 1
3219: PLUS
3220: ARRAY
3221: PPUSH
3222: CALL_OW 431
// end ;
3226: GO 3118
3228: POP
3229: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_INT 22
3237: PUSH
3238: LD_INT 3
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 30
3247: PUSH
3248: LD_INT 31
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// for b in blist do
3264: LD_ADDR_VAR 0 5
3268: PUSH
3269: LD_VAR 0 3
3273: PUSH
3274: FOR_IN
3275: IFFALSE 3374
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 1
3285: PUSH
3286: LD_OWVAR 67
3290: PLUS
3291: PPUSH
3292: CALL_OW 380
// un := CreateHuman ;
3296: LD_ADDR_VAR 0 6
3300: PUSH
3301: CALL_OW 44
3305: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3306: LD_ADDR_EXP 37
3310: PUSH
3311: LD_EXP 37
3315: PPUSH
3316: LD_EXP 37
3320: PUSH
3321: LD_INT 1
3323: PLUS
3324: PPUSH
3325: LD_VAR 0 6
3329: PPUSH
3330: CALL_OW 1
3334: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3335: LD_VAR 0 6
3339: PPUSH
3340: LD_VAR 0 5
3344: PPUSH
3345: CALL_OW 254
3349: PUSH
3350: LD_INT 3
3352: PLUS
3353: PPUSH
3354: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3358: LD_VAR 0 6
3362: PPUSH
3363: LD_VAR 0 5
3367: PPUSH
3368: CALL_OW 52
// end ;
3372: GO 3274
3374: POP
3375: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: LD_INT 22
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 30
3396: PUSH
3397: LD_INT 4
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 30
3406: PUSH
3407: LD_INT 5
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PPUSH
3423: CALL_OW 69
3427: ST_TO_ADDR
// for b in blist do
3428: LD_ADDR_VAR 0 5
3432: PUSH
3433: LD_VAR 0 3
3437: PUSH
3438: FOR_IN
3439: IFFALSE 3535
// begin for i := 1 to 2 do
3441: LD_ADDR_VAR 0 4
3445: PUSH
3446: DOUBLE
3447: LD_INT 1
3449: DEC
3450: ST_TO_ADDR
3451: LD_INT 2
3453: PUSH
3454: FOR_TO
3455: IFFALSE 3531
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 1
3465: PUSH
3466: LD_OWVAR 67
3470: PLUS
3471: PPUSH
3472: CALL_OW 380
// un := CreateHuman ;
3476: LD_ADDR_VAR 0 6
3480: PUSH
3481: CALL_OW 44
3485: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3486: LD_ADDR_EXP 37
3490: PUSH
3491: LD_EXP 37
3495: PPUSH
3496: LD_EXP 37
3500: PUSH
3501: LD_INT 1
3503: PLUS
3504: PPUSH
3505: LD_VAR 0 6
3509: PPUSH
3510: CALL_OW 1
3514: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3515: LD_VAR 0 6
3519: PPUSH
3520: LD_VAR 0 5
3524: PPUSH
3525: CALL_OW 52
// end ;
3529: GO 3454
3531: POP
3532: POP
// end ;
3533: GO 3438
3535: POP
3536: POP
// if ibrahimOnRuSide then
3537: LD_EXP 3
3541: IFFALSE 3639
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3543: LD_ADDR_EXP 21
3547: PUSH
3548: LD_STRING IbrahimRu
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: LD_STRING 
3556: PPUSH
3557: CALL 27004 0 3
3561: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3562: LD_EXP 21
3566: PPUSH
3567: LD_INT 121
3569: PPUSH
3570: LD_INT 78
3572: PPUSH
3573: LD_INT 0
3575: PPUSH
3576: CALL_OW 48
// ComHold ( Ibrahim ) ;
3580: LD_EXP 21
3584: PPUSH
3585: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3589: LD_INT 1
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 2
3597: PPUSH
3598: CALL_OW 380
// ruSol := CreateHuman ;
3602: LD_ADDR_EXP 42
3606: PUSH
3607: CALL_OW 44
3611: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3612: LD_EXP 42
3616: PPUSH
3617: LD_INT 121
3619: PPUSH
3620: LD_INT 75
3622: PPUSH
3623: LD_INT 0
3625: PPUSH
3626: CALL_OW 48
// ComHold ( ruSol ) ;
3630: LD_EXP 42
3634: PPUSH
3635: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3639: LD_ADDR_VAR 0 4
3643: PUSH
3644: DOUBLE
3645: LD_INT 1
3647: DEC
3648: ST_TO_ADDR
3649: LD_INT 2
3651: PUSH
3652: LD_INT 2
3654: PUSH
3655: LD_OWVAR 67
3659: PLUS
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_EXP 10
3669: PUSH
3670: LD_INT 3
3672: GREATER
3673: PUSH
3674: LD_INT 1
3676: PLUS
3677: ARRAY
3678: PUSH
3679: FOR_TO
3680: IFFALSE 3749
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3682: LD_VAR 0 8
3686: PPUSH
3687: LD_INT 21
3689: PUSH
3690: LD_INT 23
3692: PUSH
3693: LD_INT 24
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: LD_VAR 0 4
3705: PUSH
3706: LD_INT 3
3708: MOD
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: ARRAY
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 1
3720: PPUSH
3721: LD_INT 43
3723: PUSH
3724: LD_INT 44
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 2
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: PPUSH
3743: CALL_OW 185
3747: GO 3679
3749: POP
3750: POP
// end ;
3751: LD_VAR 0 1
3755: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3756: LD_EXP 41
3760: PUSH
3761: LD_EXP 4
3765: NOT
3766: AND
3767: IFFALSE 4254
3769: GO 3771
3771: DISABLE
3772: LD_INT 0
3774: PPUSH
3775: PPUSH
3776: PPUSH
3777: PPUSH
3778: PPUSH
// begin enable ;
3779: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: LD_EXP 41
3789: PPUSH
3790: LD_INT 21
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PPUSH
3800: CALL_OW 72
3804: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: LD_INT 81
3812: PUSH
3813: LD_INT 3
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: LD_INT 95
3825: PUSH
3826: LD_INT 4
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 95
3835: PUSH
3836: LD_INT 5
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 95
3845: PUSH
3846: LD_INT 6
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 95
3855: PUSH
3856: LD_INT 7
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PPUSH
3874: CALL_OW 69
3878: ST_TO_ADDR
// for i in filter do
3879: LD_ADDR_VAR 0 1
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: FOR_IN
3890: IFFALSE 4252
// begin tmp := IsDrivenBy ( i ) ;
3892: LD_ADDR_VAR 0 3
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: CALL_OW 311
3906: ST_TO_ADDR
// if not tmp then
3907: LD_VAR 0 3
3911: NOT
3912: IFFALSE 3916
// continue ;
3914: GO 3889
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3916: LD_VAR 0 1
3920: PPUSH
3921: CALL_OW 261
3925: PUSH
3926: LD_INT 90
3928: GREATER
3929: PUSH
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 110
3939: PUSH
3940: LD_INT 2
3942: EQUAL
3943: AND
3944: IFFALSE 3960
// SetTag ( i , 0 ) else
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 109
3958: GO 4003
// if GetTag ( i ) = 2 then
3960: LD_VAR 0 1
3964: PPUSH
3965: CALL_OW 110
3969: PUSH
3970: LD_INT 2
3972: EQUAL
3973: IFFALSE 4003
// begin x := rand ( 1 , 2 ) ;
3975: LD_ADDR_VAR 0 5
3979: PUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL_OW 12
3990: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
3991: LD_VAR 0 1
3995: PPUSH
3996: LD_INT 200
3998: PPUSH
3999: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 256
4012: PUSH
4013: LD_INT 600
4015: GREATEREQUAL
4016: PUSH
4017: LD_VAR 0 1
4021: PPUSH
4022: CALL_OW 110
4026: NOT
4027: AND
4028: IFFALSE 4054
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4030: LD_VAR 0 1
4034: PPUSH
4035: LD_VAR 0 4
4039: PPUSH
4040: LD_VAR 0 1
4044: PPUSH
4045: CALL_OW 74
4049: PPUSH
4050: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4054: LD_VAR 0 1
4058: PPUSH
4059: CALL_OW 256
4063: PUSH
4064: LD_INT 600
4066: LESS
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: CALL_OW 110
4077: NOT
4078: AND
4079: IFFALSE 4108
// begin SetTag ( i , 1 ) ;
4081: LD_VAR 0 1
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 112
4100: PPUSH
4101: LD_INT 119
4103: PPUSH
4104: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 110
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: PUSH
4122: LD_VAR 0 1
4126: PPUSH
4127: LD_INT 112
4129: PPUSH
4130: LD_INT 119
4132: PPUSH
4133: CALL_OW 297
4137: PUSH
4138: LD_INT 9
4140: LESS
4141: AND
4142: PUSH
4143: LD_VAR 0 3
4147: AND
4148: IFFALSE 4250
// begin ComExitVehicle ( tmp ) ;
4150: LD_VAR 0 3
4154: PPUSH
4155: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4159: LD_VAR 0 3
4163: PPUSH
4164: LD_VAR 0 1
4168: PPUSH
4169: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4173: LD_INT 35
4175: PPUSH
4176: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 256
4189: PUSH
4190: LD_INT 1000
4192: EQUAL
4193: IFFALSE 4173
// ComEnterUnit ( tmp , i ) ;
4195: LD_VAR 0 3
4199: PPUSH
4200: LD_VAR 0 1
4204: PPUSH
4205: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 261
4218: PUSH
4219: LD_INT 50
4221: LESSEQUAL
4222: IFFALSE 4238
// SetTag ( i , 2 ) else
4224: LD_VAR 0 1
4228: PPUSH
4229: LD_INT 2
4231: PPUSH
4232: CALL_OW 109
4236: GO 4250
// SetTag ( i , 0 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 0
4245: PPUSH
4246: CALL_OW 109
// end ; end ;
4250: GO 3889
4252: POP
4253: POP
// end ;
4254: PPOPN 5
4256: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4257: LD_EXP 4
4261: NOT
4262: PUSH
4263: LD_EXP 38
4267: AND
4268: IFFALSE 4529
4270: GO 4272
4272: DISABLE
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
// begin enable ;
4279: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 22
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 3
4310: PUSH
4311: LD_INT 24
4313: PUSH
4314: LD_INT 1000
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 70
4334: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: LD_EXP 38
4344: PPUSH
4345: LD_INT 50
4347: PUSH
4348: EMPTY
4349: LIST
4350: PPUSH
4351: CALL_OW 72
4355: ST_TO_ADDR
// if filter and tmp then
4356: LD_VAR 0 2
4360: PUSH
4361: LD_VAR 0 3
4365: AND
4366: IFFALSE 4458
// begin for i in tmp do
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_VAR 0 3
4377: PUSH
4378: FOR_IN
4379: IFFALSE 4454
// begin if GetTag ( i ) = tEscape then
4381: LD_VAR 0 1
4385: PPUSH
4386: CALL_OW 110
4390: PUSH
4391: LD_EXP 17
4395: EQUAL
4396: IFFALSE 4400
// continue ;
4398: GO 4378
// if IsInUnit ( i ) then
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 310
4409: IFFALSE 4422
// ComExitBuilding ( i ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 122
4420: GO 4452
// if not HasTask ( i ) then
4422: LD_VAR 0 1
4426: PPUSH
4427: CALL_OW 314
4431: NOT
4432: IFFALSE 4452
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_VAR 0 2
4443: PUSH
4444: LD_INT 1
4446: ARRAY
4447: PPUSH
4448: CALL_OW 130
// end ;
4452: GO 4378
4454: POP
4455: POP
// end else
4456: GO 4529
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4458: LD_VAR 0 3
4462: PPUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PPUSH
4476: CALL_OW 72
4480: IFFALSE 4529
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4482: LD_ADDR_VAR 0 1
4486: PUSH
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 3
4494: PUSH
4495: LD_INT 54
4497: PUSH
4498: EMPTY
4499: LIST
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PPUSH
4505: CALL_OW 72
4509: PUSH
4510: FOR_IN
4511: IFFALSE 4527
// ComEnterUnit ( i , ruMainBase ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 200
4520: PPUSH
4521: CALL_OW 120
4525: GO 4510
4527: POP
4528: POP
// end ; end ;
4529: PPOPN 4
4531: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4532: LD_EXP 4
4536: NOT
4537: PUSH
4538: LD_EXP 40
4542: AND
4543: IFFALSE 4822
4545: GO 4547
4547: DISABLE
4548: LD_INT 0
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
// begin enable ;
4554: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4555: LD_ADDR_VAR 0 2
4559: PUSH
4560: LD_INT 3
4562: PPUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 21
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 3
4585: PUSH
4586: LD_INT 24
4588: PUSH
4589: LD_INT 1000
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: PPUSH
4605: CALL_OW 70
4609: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: LD_EXP 40
4619: PPUSH
4620: LD_INT 50
4622: PUSH
4623: EMPTY
4624: LIST
4625: PPUSH
4626: CALL_OW 72
4630: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4631: LD_ADDR_VAR 0 4
4635: PUSH
4636: LD_INT 118
4638: PPUSH
4639: LD_INT 121
4641: PPUSH
4642: CALL_OW 428
4646: ST_TO_ADDR
// if filter and tmp then
4647: LD_VAR 0 2
4651: PUSH
4652: LD_VAR 0 3
4656: AND
4657: IFFALSE 4749
// begin for i in tmp do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 3
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4745
// begin if GetTag ( i ) = tEscape then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 110
4681: PUSH
4682: LD_EXP 17
4686: EQUAL
4687: IFFALSE 4691
// continue ;
4689: GO 4669
// if IsInUnit ( i ) then
4691: LD_VAR 0 1
4695: PPUSH
4696: CALL_OW 310
4700: IFFALSE 4713
// ComExitBuilding ( i ) else
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 122
4711: GO 4743
// if not HasTask ( i ) then
4713: LD_VAR 0 1
4717: PPUSH
4718: CALL_OW 314
4722: NOT
4723: IFFALSE 4743
// ComHeal ( i , filter [ 1 ] ) ;
4725: LD_VAR 0 1
4729: PPUSH
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 1
4737: ARRAY
4738: PPUSH
4739: CALL_OW 128
// end ;
4743: GO 4669
4745: POP
4746: POP
// end else
4747: GO 4822
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_INT 3
4756: PUSH
4757: LD_INT 54
4759: PUSH
4760: EMPTY
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: IFFALSE 4822
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4773: LD_ADDR_VAR 0 1
4777: PUSH
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 54
4788: PUSH
4789: EMPTY
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 72
4800: PUSH
4801: FOR_IN
4802: IFFALSE 4820
// ComEnterUnit ( i , lab ) ;
4804: LD_VAR 0 1
4808: PPUSH
4809: LD_VAR 0 4
4813: PPUSH
4814: CALL_OW 120
4818: GO 4801
4820: POP
4821: POP
// end ; end ; end_of_file
4822: PPOPN 4
4824: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4825: LD_VAR 0 1
4829: PUSH
4830: LD_EXP 18
4834: EQUAL
4835: IFFALSE 4844
// YouLost ( Heike ) ;
4837: LD_STRING Heike
4839: PPUSH
4840: CALL_OW 104
// if un in ruEng then
4844: LD_VAR 0 1
4848: PUSH
4849: LD_EXP 38
4853: IN
4854: IFFALSE 4872
// ruEng := ruEng diff un ;
4856: LD_ADDR_EXP 38
4860: PUSH
4861: LD_EXP 38
4865: PUSH
4866: LD_VAR 0 1
4870: DIFF
4871: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4872: LD_VAR 0 1
4876: PUSH
4877: LD_INT 22
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 21
4889: PUSH
4890: LD_INT 1
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 23
4899: PUSH
4900: LD_INT 2
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 69
4916: IN
4917: IFFALSE 4933
// loseCounter := loseCounter + 1 ;
4919: LD_ADDR_EXP 6
4923: PUSH
4924: LD_EXP 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: ST_TO_ADDR
// end ;
4933: PPOPN 1
4935: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4936: LD_INT 0
4938: PPUSH
4939: PPUSH
// begin if un in ruMobile then
4940: LD_VAR 0 2
4944: PUSH
4945: LD_EXP 41
4949: IN
4950: IFFALSE 5109
// begin ruMobile := ruMobile diff un ;
4952: LD_ADDR_EXP 41
4956: PUSH
4957: LD_EXP 41
4961: PUSH
4962: LD_VAR 0 2
4966: DIFF
4967: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4968: LD_ADDR_VAR 0 5
4972: PUSH
4973: LD_VAR 0 2
4977: PPUSH
4978: CALL_OW 264
4982: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4983: LD_ADDR_VAR 0 6
4987: PUSH
4988: LD_INT 110
4990: PPUSH
4991: LD_INT 126
4993: PPUSH
4994: CALL_OW 428
4998: ST_TO_ADDR
// if not driver or not fac then
4999: LD_VAR 0 1
5003: NOT
5004: PUSH
5005: LD_VAR 0 6
5009: NOT
5010: OR
5011: IFFALSE 5015
// exit ;
5013: GO 5109
// AddComMoveXY ( driver , 111 , 121 ) ;
5015: LD_VAR 0 1
5019: PPUSH
5020: LD_INT 111
5022: PPUSH
5023: LD_INT 121
5025: PPUSH
5026: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_VAR 0 6
5039: PPUSH
5040: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5044: LD_INT 35
5046: PPUSH
5047: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 301
5060: PUSH
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: OR
5071: IFFALSE 5044
// if IsDead ( driver ) then
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 301
5082: IFFALSE 5086
// exit ;
5084: GO 5109
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 21
5093: PPUSH
5094: LD_INT 1
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_VAR 0 5
5104: PPUSH
5105: CALL_OW 185
// end ; end ;
5109: PPOPN 6
5111: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5112: LD_VAR 0 2
5116: PPUSH
5117: CALL_OW 255
5121: PUSH
5122: LD_INT 3
5124: EQUAL
5125: IFFALSE 5171
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5127: LD_ADDR_EXP 41
5131: PUSH
5132: LD_EXP 41
5136: PPUSH
5137: LD_EXP 41
5141: PUSH
5142: LD_INT 1
5144: PLUS
5145: PPUSH
5146: LD_VAR 0 1
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 110
5163: PPUSH
5164: LD_INT 117
5166: PPUSH
5167: CALL_OW 171
// end ; end ;
5171: PPOPN 2
5173: END
// on LeaveBuilding ( b , un ) do var barracks ;
5174: LD_INT 0
5176: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 130
5184: PPUSH
5185: LD_INT 17
5187: PPUSH
5188: CALL_OW 428
5192: PUSH
5193: LD_INT 138
5195: PPUSH
5196: LD_INT 22
5198: PPUSH
5199: CALL_OW 428
5203: PUSH
5204: LD_INT 123
5206: PPUSH
5207: LD_INT 17
5209: PPUSH
5210: CALL_OW 428
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: IN
5220: IFFALSE 5244
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_INT 135
5229: PPUSH
5230: LD_INT 31
5232: PPUSH
5233: CALL_OW 428
5237: PPUSH
5238: CALL_OW 180
// exit ;
5242: GO 5518
// end ; if b = HexInfo ( 135 , 31 ) then
5244: LD_VAR 0 1
5248: PUSH
5249: LD_INT 135
5251: PPUSH
5252: LD_INT 31
5254: PPUSH
5255: CALL_OW 428
5259: EQUAL
5260: IFFALSE 5332
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5262: LD_VAR 0 2
5266: PPUSH
5267: LD_INT 106
5269: PPUSH
5270: LD_INT 51
5272: PPUSH
5273: CALL_OW 428
5277: PPUSH
5278: CALL_OW 180
// if not explodeFirstDepot then
5282: LD_EXP 12
5286: NOT
5287: IFFALSE 5330
// begin explodeFirstDepot := true ;
5289: LD_ADDR_EXP 12
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5297: LD_INT 525
5299: PPUSH
5300: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5304: LD_INT 127
5306: PPUSH
5307: LD_INT 27
5309: PPUSH
5310: LD_INT 1
5312: PPUSH
5313: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5317: LD_INT 125
5319: PPUSH
5320: LD_INT 29
5322: PPUSH
5323: LD_INT 1
5325: PPUSH
5326: CALL_OW 453
// end ; exit ;
5330: GO 5518
// end ; if b = HexInfo ( 106 , 51 ) then
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 106
5339: PPUSH
5340: LD_INT 51
5342: PPUSH
5343: CALL_OW 428
5347: EQUAL
5348: IFFALSE 5448
// begin AddComMoveXY ( un , 106 , 93 ) ;
5350: LD_VAR 0 2
5354: PPUSH
5355: LD_INT 106
5357: PPUSH
5358: LD_INT 93
5360: PPUSH
5361: CALL_OW 171
// if not explodeSecondDepot then
5365: LD_EXP 13
5369: NOT
5370: IFFALSE 5446
// begin explodeSecondDepot := true ;
5372: LD_ADDR_EXP 13
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5380: LD_INT 420
5382: PPUSH
5383: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5387: LD_INT 111
5389: PPUSH
5390: LD_INT 75
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5400: LD_INT 111
5402: PPUSH
5403: LD_INT 75
5405: PPUSH
5406: LD_INT 1
5408: PPUSH
5409: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5413: LD_INT 108
5415: PPUSH
5416: LD_INT 69
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: CALL_OW 453
// wait ( 0 0$2 ) ;
5426: LD_INT 70
5428: PPUSH
5429: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5433: LD_INT 94
5435: PPUSH
5436: LD_INT 65
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: CALL_OW 453
// end ; exit ;
5446: GO 5518
// end ; if GetBType ( b ) = b_bunker then
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 266
5457: PUSH
5458: LD_INT 32
5460: EQUAL
5461: IFFALSE 5518
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_VAR 0 2
5472: PPUSH
5473: LD_INT 5
5475: PPUSH
5476: CALL 1004 0 2
5480: ST_TO_ADDR
// if barracks then
5481: LD_VAR 0 3
5485: IFFALSE 5503
// AddComEnterUnit ( un , barracks ) else
5487: LD_VAR 0 2
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 180
5501: GO 5518
// AddComMoveXY ( un , 116 , 110 ) ;
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_INT 116
5510: PPUSH
5511: LD_INT 110
5513: PPUSH
5514: CALL_OW 171
// end ; end ;
5518: PPOPN 3
5520: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5521: LD_VAR 0 1
5525: PUSH
5526: LD_EXP 23
5530: EQUAL
5531: PUSH
5532: LD_VAR 0 2
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: LD_INT 6
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: IN
5547: AND
5548: IFFALSE 5579
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5550: LD_ADDR_EXP 8
5554: PUSH
5555: LD_VAR 0 1
5559: PPUSH
5560: CALL_OW 250
5564: PUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL_OW 251
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: ST_TO_ADDR
// end ; end_of_file
5579: PPOPN 3
5581: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5582: LD_INT 0
5584: PPUSH
5585: PPUSH
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
// InGameOn ;
5590: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5594: LD_INT 5
5596: PPUSH
5597: LD_INT 2
5599: PPUSH
5600: CALL_OW 343
// music_nat := 4 ;
5604: LD_ADDR_OWVAR 71
5608: PUSH
5609: LD_INT 4
5611: ST_TO_ADDR
// music_class := music_combat ;
5612: LD_ADDR_OWVAR 72
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5620: LD_INT 133
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: LD_INT 2
5628: PPUSH
5629: LD_INT 10
5631: PPUSH
5632: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5636: LD_INT 133
5638: PPUSH
5639: LD_INT 2
5641: PPUSH
5642: CALL_OW 86
// wait ( 0 0$1 ) ;
5646: LD_INT 35
5648: PPUSH
5649: CALL_OW 67
// uc_side := 6 ;
5653: LD_ADDR_OWVAR 20
5657: PUSH
5658: LD_INT 6
5660: ST_TO_ADDR
// uc_nation := 3 ;
5661: LD_ADDR_OWVAR 21
5665: PUSH
5666: LD_INT 3
5668: ST_TO_ADDR
// rutmp := [ ] ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: EMPTY
5675: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5676: LD_INT 6
5678: PPUSH
5679: LD_INT 3
5681: PPUSH
5682: LD_INT 21
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_INT 44
5693: PPUSH
5694: LD_INT 66
5696: PPUSH
5697: CALL 336 0 7
// veh := CreateVehicle ;
5701: LD_ADDR_VAR 0 4
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5711: LD_VAR 0 4
5715: PPUSH
5716: LD_INT 3
5718: PPUSH
5719: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5723: LD_VAR 0 4
5727: PPUSH
5728: LD_INT 8
5730: PPUSH
5731: LD_INT 0
5733: PPUSH
5734: CALL_OW 49
// SetLives ( veh , 500 ) ;
5738: LD_VAR 0 4
5742: PPUSH
5743: LD_INT 500
5745: PPUSH
5746: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 3
5755: PPUSH
5756: LD_INT 3
5758: PPUSH
5759: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5763: CALL_OW 44
5767: PPUSH
5768: LD_VAR 0 4
5772: PPUSH
5773: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5777: LD_VAR 0 4
5781: PPUSH
5782: LD_INT 133
5784: PPUSH
5785: LD_INT 11
5787: PPUSH
5788: CALL_OW 111
// rutmp := [ veh ] ;
5792: LD_ADDR_VAR 0 6
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: EMPTY
5803: LIST
5804: ST_TO_ADDR
// for i := 1 to 4 do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_INT 4
5817: PUSH
5818: FOR_TO
5819: IFFALSE 5926
// begin PrepareHuman ( false , i , 2 ) ;
5821: LD_INT 0
5823: PPUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: LD_INT 2
5831: PPUSH
5832: CALL_OW 380
// un := CreateHuman ;
5836: LD_ADDR_VAR 0 3
5840: PUSH
5841: CALL_OW 44
5845: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5846: LD_VAR 0 3
5850: PPUSH
5851: LD_INT 3
5853: PPUSH
5854: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 8
5865: PPUSH
5866: LD_INT 0
5868: PPUSH
5869: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 6
5882: PPUSH
5883: LD_VAR 0 6
5887: PUSH
5888: LD_INT 1
5890: PLUS
5891: PPUSH
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 1
5901: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_INT 133
5909: PPUSH
5910: LD_INT 11
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5917: LD_INT 18
5919: PPUSH
5920: CALL_OW 67
// end ;
5924: GO 5818
5926: POP
5927: POP
// for i in rutmp do
5928: LD_ADDR_VAR 0 2
5932: PUSH
5933: LD_VAR 0 6
5937: PUSH
5938: FOR_IN
5939: IFFALSE 5988
// begin AddComMoveXY ( i , 99 , 65 ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_INT 99
5948: PPUSH
5949: LD_INT 65
5951: PPUSH
5952: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_INT 76
5963: PPUSH
5964: LD_INT 108
5966: PPUSH
5967: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_INT 92
5978: PPUSH
5979: LD_INT 176
5981: PPUSH
5982: CALL_OW 171
// end ;
5986: GO 5938
5988: POP
5989: POP
// wait ( 0 0$10 ) ;
5990: LD_INT 350
5992: PPUSH
5993: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
5997: LD_ADDR_VAR 0 5
6001: PUSH
6002: LD_EXP 18
6006: PUSH
6007: LD_EXP 19
6011: PUSH
6012: LD_EXP 20
6016: PUSH
6017: LD_EXP 21
6021: PUSH
6022: LD_EXP 22
6026: PUSH
6027: LD_EXP 23
6031: PUSH
6032: LD_EXP 24
6036: PUSH
6037: LD_EXP 25
6041: PUSH
6042: LD_EXP 27
6046: PUSH
6047: LD_EXP 28
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: PUSH
6064: LD_EXP 29
6068: UNION
6069: ST_TO_ADDR
// tmp := tmp diff 0 ;
6070: LD_ADDR_VAR 0 5
6074: PUSH
6075: LD_VAR 0 5
6079: PUSH
6080: LD_INT 0
6082: DIFF
6083: ST_TO_ADDR
// for i in heikeVehicles do
6084: LD_ADDR_VAR 0 2
6088: PUSH
6089: LD_EXP 30
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6361
// begin if not tmp then
6097: LD_VAR 0 5
6101: NOT
6102: IFFALSE 6106
// continue ;
6104: GO 6094
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6106: LD_INT 2
6108: PPUSH
6109: LD_VAR 0 2
6113: PUSH
6114: LD_INT 5
6116: ARRAY
6117: PPUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 2
6131: PUSH
6132: LD_INT 2
6134: ARRAY
6135: PPUSH
6136: LD_VAR 0 2
6140: PUSH
6141: LD_INT 3
6143: ARRAY
6144: PPUSH
6145: LD_VAR 0 2
6149: PUSH
6150: LD_INT 4
6152: ARRAY
6153: PPUSH
6154: LD_INT 34
6156: PPUSH
6157: CALL 336 0 7
// veh := CreateVehicle ;
6161: LD_ADDR_VAR 0 4
6165: PUSH
6166: CALL_OW 45
6170: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 4
6178: ARRAY
6179: PUSH
6180: LD_INT 51
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: IN
6194: IFFALSE 6274
// begin if i [ 7 ] [ 1 ] then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 7
6203: ARRAY
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: IFFALSE 6235
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6210: LD_VAR 0 4
6214: PPUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 7
6225: ARRAY
6226: PUSH
6227: LD_INT 1
6229: ARRAY
6230: PPUSH
6231: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6235: LD_VAR 0 2
6239: PUSH
6240: LD_INT 7
6242: ARRAY
6243: PUSH
6244: LD_INT 2
6246: ARRAY
6247: IFFALSE 6274
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6249: LD_VAR 0 4
6253: PPUSH
6254: LD_INT 2
6256: PPUSH
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 7
6264: ARRAY
6265: PUSH
6266: LD_INT 2
6268: ARRAY
6269: PPUSH
6270: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6274: LD_VAR 0 4
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6286: LD_VAR 0 4
6290: PPUSH
6291: LD_INT 8
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6301: LD_VAR 0 5
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 4
6314: PPUSH
6315: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 5
6328: PPUSH
6329: LD_INT 1
6331: PPUSH
6332: CALL_OW 3
6336: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6337: LD_VAR 0 4
6341: PPUSH
6342: LD_INT 133
6344: PPUSH
6345: LD_INT 7
6347: PPUSH
6348: CALL_OW 114
// wait ( 0 0$1 ) ;
6352: LD_INT 35
6354: PPUSH
6355: CALL_OW 67
// end ;
6359: GO 6094
6361: POP
6362: POP
// if tmp then
6363: LD_VAR 0 5
6367: IFFALSE 6423
// for i in tmp do
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_VAR 0 5
6378: PUSH
6379: FOR_IN
6380: IFFALSE 6421
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_INT 10
6389: PPUSH
6390: LD_INT 0
6392: PPUSH
6393: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6397: LD_VAR 0 2
6401: PPUSH
6402: LD_INT 146
6404: PPUSH
6405: LD_INT 7
6407: PPUSH
6408: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6412: LD_INT 18
6414: PPUSH
6415: CALL_OW 67
// end ;
6419: GO 6379
6421: POP
6422: POP
// if heikeApes then
6423: LD_EXP 31
6427: IFFALSE 6483
// for i in heikeApes do
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: LD_EXP 31
6438: PUSH
6439: FOR_IN
6440: IFFALSE 6481
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6442: LD_VAR 0 2
6446: PPUSH
6447: LD_INT 10
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6457: LD_VAR 0 2
6461: PPUSH
6462: LD_INT 146
6464: PPUSH
6465: LD_INT 7
6467: PPUSH
6468: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6472: LD_INT 18
6474: PPUSH
6475: CALL_OW 67
// end ;
6479: GO 6439
6481: POP
6482: POP
// DialogueOn ;
6483: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6487: LD_EXP 18
6491: PPUSH
6492: LD_STRING DH-outpost-a-1
6494: PPUSH
6495: CALL_OW 88
// DialogueOff ;
6499: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6503: LD_INT 133
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: LD_INT 2
6511: PPUSH
6512: CALL_OW 331
// InGameOff ;
6516: CALL_OW 9
// music_nat := 0 ;
6520: LD_ADDR_OWVAR 71
6524: PUSH
6525: LD_INT 0
6527: ST_TO_ADDR
// music_class := 0 ;
6528: LD_ADDR_OWVAR 72
6532: PUSH
6533: LD_INT 0
6535: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6536: LD_STRING Outposts
6538: PPUSH
6539: CALL_OW 337
// SaveForQuickRestart ;
6543: CALL_OW 22
// end ;
6547: LD_VAR 0 1
6551: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6552: LD_INT 22
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 91
6564: PUSH
6565: LD_EXP 21
6569: PUSH
6570: LD_INT 20
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_EXP 3
6591: AND
6592: PUSH
6593: LD_EXP 21
6597: PPUSH
6598: CALL_OW 302
6602: AND
6603: IFFALSE 6850
6605: GO 6607
6607: DISABLE
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
// begin IbrahimBetrayal ;
6614: CALL 6853 0 0
// repeat wait ( 0 0$1 ) ;
6618: LD_INT 35
6620: PPUSH
6621: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6625: LD_EXP 21
6629: PPUSH
6630: CALL_OW 301
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 91
6647: PUSH
6648: LD_EXP 21
6652: PUSH
6653: LD_INT 6
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 69
6669: PUSH
6670: LD_EXP 21
6674: PPUSH
6675: CALL_OW 302
6679: AND
6680: OR
6681: IFFALSE 6618
// if IsDead ( Ibrahim ) then
6683: LD_EXP 21
6687: PPUSH
6688: CALL_OW 301
6692: IFFALSE 6696
// exit ;
6694: GO 6850
// x := GetX ( Ibrahim ) ;
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_EXP 21
6705: PPUSH
6706: CALL_OW 250
6710: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6711: LD_ADDR_VAR 0 2
6715: PUSH
6716: LD_EXP 21
6720: PPUSH
6721: CALL_OW 251
6725: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6726: LD_ADDR_VAR 0 3
6730: PUSH
6731: LD_EXP 21
6735: PPUSH
6736: CALL_OW 254
6740: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6741: LD_ADDR_VAR 0 4
6745: PUSH
6746: LD_EXP 21
6750: PPUSH
6751: CALL_OW 256
6755: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6756: LD_EXP 21
6760: PPUSH
6761: CALL_OW 64
// uc_side := 2 ;
6765: LD_ADDR_OWVAR 20
6769: PUSH
6770: LD_INT 2
6772: ST_TO_ADDR
// uc_nation := 2 ;
6773: LD_ADDR_OWVAR 21
6777: PUSH
6778: LD_INT 2
6780: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6781: LD_ADDR_EXP 21
6785: PUSH
6786: LD_STRING Ibrahim
6788: PPUSH
6789: LD_INT 0
6791: PPUSH
6792: LD_STRING 
6794: PPUSH
6795: CALL 27004 0 3
6799: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6800: LD_EXP 21
6804: PPUSH
6805: LD_VAR 0 3
6809: PPUSH
6810: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6814: LD_EXP 21
6818: PPUSH
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: LD_INT 0
6831: PPUSH
6832: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6836: LD_EXP 21
6840: PPUSH
6841: LD_VAR 0 4
6845: PPUSH
6846: CALL_OW 234
// end ;
6850: PPOPN 4
6852: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6853: LD_INT 0
6855: PPUSH
6856: PPUSH
6857: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6858: LD_INT 122
6860: PPUSH
6861: LD_INT 77
6863: PPUSH
6864: LD_INT 2
6866: PPUSH
6867: LD_INT 6
6869: NEG
6870: PPUSH
6871: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6875: LD_EXP 21
6879: PPUSH
6880: LD_INT 123
6882: PPUSH
6883: LD_INT 79
6885: PPUSH
6886: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6890: LD_EXP 21
6894: PPUSH
6895: LD_INT 125
6897: PPUSH
6898: LD_INT 82
6900: PPUSH
6901: CALL_OW 178
// wait ( 0 0$2 ) ;
6905: LD_INT 70
6907: PPUSH
6908: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6912: LD_EXP 42
6916: PPUSH
6917: LD_EXP 21
6921: PPUSH
6922: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6926: LD_EXP 42
6930: PPUSH
6931: LD_STRING DRum-outpost-b-3
6933: PPUSH
6934: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 125
6945: PPUSH
6946: LD_INT 76
6948: PPUSH
6949: CALL_OW 428
6953: PUSH
6954: LD_INT 125
6956: PPUSH
6957: LD_INT 79
6959: PPUSH
6960: CALL_OW 428
6964: PUSH
6965: LD_INT 125
6967: PPUSH
6968: LD_INT 82
6970: PPUSH
6971: CALL_OW 428
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// for i in tmp do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_VAR 0 3
6990: PUSH
6991: FOR_IN
6992: IFFALSE 7008
// SetLives ( i , 200 ) ;
6994: LD_VAR 0 2
6998: PPUSH
6999: LD_INT 200
7001: PPUSH
7002: CALL_OW 234
7006: GO 6991
7008: POP
7009: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7010: LD_EXP 21
7014: PPUSH
7015: LD_STRING DI-outpost-b-4
7017: PPUSH
7018: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7022: LD_EXP 21
7026: PPUSH
7027: LD_INT 5
7029: PPUSH
7030: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7034: LD_EXP 21
7038: PUSH
7039: LD_EXP 42
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PPUSH
7048: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7052: LD_INT 122
7054: PPUSH
7055: LD_INT 77
7057: PPUSH
7058: LD_INT 2
7060: PPUSH
7061: CALL_OW 331
// if Givi then
7065: LD_EXP 19
7069: IFFALSE 7085
// Say ( Givi , DG-1-outpost-b-5 ) else
7071: LD_EXP 19
7075: PPUSH
7076: LD_STRING DG-1-outpost-b-5
7078: PPUSH
7079: CALL_OW 88
7083: GO 7150
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7085: LD_EXP 29
7089: PPUSH
7090: LD_INT 26
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: LD_STRING DArf-outpost-b-a-5
7111: PPUSH
7112: CALL_OW 88
7116: NOT
7117: IFFALSE 7150
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7119: LD_EXP 29
7123: PPUSH
7124: LD_INT 26
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PPUSH
7134: CALL_OW 72
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PPUSH
7143: LD_STRING DArm-outpost-b-a-5
7145: PPUSH
7146: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7150: LD_INT 35
7152: PPUSH
7153: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7157: LD_EXP 21
7161: PPUSH
7162: CALL_OW 301
7166: PUSH
7167: LD_EXP 18
7171: PPUSH
7172: LD_EXP 21
7176: PPUSH
7177: CALL_OW 296
7181: PUSH
7182: LD_INT 6
7184: LESS
7185: PUSH
7186: LD_EXP 21
7190: PPUSH
7191: CALL_OW 302
7195: AND
7196: OR
7197: IFFALSE 7150
// if IsDead ( Ibrahim ) then
7199: LD_EXP 21
7203: PPUSH
7204: CALL_OW 301
7208: IFFALSE 7224
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7210: LD_EXP 18
7214: PPUSH
7215: LD_STRING DH-ibrahimdead-1
7217: PPUSH
7218: CALL_OW 88
// exit ;
7222: GO 7265
// end ; CenterNowOnUnits ( Ibrahim ) ;
7224: LD_EXP 21
7228: PPUSH
7229: CALL_OW 87
// DialogueOn ;
7233: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7237: LD_EXP 21
7241: PPUSH
7242: LD_STRING DI-ibrahimlives-1
7244: PPUSH
7245: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7249: LD_EXP 18
7253: PPUSH
7254: LD_STRING DH-Ibrahimlives-2
7256: PPUSH
7257: CALL_OW 88
// DialogueOff ;
7261: CALL_OW 7
// end ;
7265: LD_VAR 0 1
7269: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 ] [ Difficulty ] do
7270: LD_INT 11
7272: PPUSH
7273: LD_INT 22
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 70
7287: PUSH
7288: LD_OWVAR 1
7292: PUSH
7293: LD_INT 18900
7295: PUSH
7296: LD_INT 16800
7298: PUSH
7299: LD_INT 16800
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: LD_OWVAR 67
7311: ARRAY
7312: GREATEREQUAL
7313: OR
7314: IFFALSE 7721
7316: GO 7318
7318: DISABLE
// begin outerAreaAchived := true ;
7319: LD_ADDR_EXP 15
7323: PUSH
7324: LD_INT 1
7326: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7327: LD_INT 700
7329: PPUSH
7330: CALL_OW 67
// DialogueOn ;
7334: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7338: LD_EXP 26
7342: PPUSH
7343: LD_STRING DShar-radio-1
7345: PPUSH
7346: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7350: LD_EXP 26
7354: PPUSH
7355: LD_STRING DShar-radio-2
7357: PPUSH
7358: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7362: LD_EXP 18
7366: PPUSH
7367: LD_STRING DH-radio-2
7369: PPUSH
7370: CALL_OW 88
// DialogueOff ;
7374: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7378: LD_STRING Gaidar
7380: PPUSH
7381: CALL_OW 337
// if Difficulty < 3 then
7385: LD_OWVAR 67
7389: PUSH
7390: LD_INT 3
7392: LESS
7393: IFFALSE 7459
// begin DialogueOn ;
7395: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7399: LD_INT 11
7401: PPUSH
7402: LD_INT 14
7404: PPUSH
7405: LD_INT 2
7407: PPUSH
7408: LD_INT 6
7410: NEG
7411: PPUSH
7412: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7416: LD_INT 11
7418: PPUSH
7419: LD_INT 14
7421: PPUSH
7422: LD_INT 2
7424: PPUSH
7425: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7429: LD_INT 11
7431: PPUSH
7432: LD_INT 14
7434: PPUSH
7435: CALL_OW 84
// dwait ( 0 0$1 ) ;
7439: LD_INT 35
7441: PPUSH
7442: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7446: LD_EXP 18
7450: PPUSH
7451: CALL_OW 87
// DialogueOff ;
7455: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7459: LD_INT 1050
7461: PUSH
7462: LD_INT 350
7464: PPUSH
7465: LD_INT 525
7467: PPUSH
7468: CALL_OW 12
7472: PUSH
7473: LD_OWVAR 67
7477: MUL
7478: PLUS
7479: PPUSH
7480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7491: LD_INT 2
7493: PPUSH
7494: LD_INT 1
7496: PPUSH
7497: CALL_OW 428
7501: PUSH
7502: LD_INT 0
7504: EQUAL
7505: IFFALSE 7484
// SetDir ( Gaidar , 2 ) ;
7507: LD_EXP 35
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7519: LD_EXP 35
7523: PPUSH
7524: LD_INT 2
7526: PPUSH
7527: LD_INT 1
7529: PPUSH
7530: LD_INT 0
7532: PPUSH
7533: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7537: LD_EXP 35
7541: PPUSH
7542: LD_INT 19
7544: PPUSH
7545: LD_INT 24
7547: PPUSH
7548: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7552: LD_EXP 35
7556: PPUSH
7557: LD_INT 210
7559: PPUSH
7560: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7564: LD_EXP 35
7568: PPUSH
7569: LD_INT 38
7571: PPUSH
7572: LD_INT 47
7574: PPUSH
7575: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7579: LD_EXP 35
7583: PPUSH
7584: LD_INT 32
7586: PPUSH
7587: LD_INT 59
7589: PPUSH
7590: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7594: LD_EXP 35
7598: PPUSH
7599: LD_INT 350
7601: PPUSH
7602: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7606: LD_EXP 35
7610: PPUSH
7611: LD_INT 62
7613: PPUSH
7614: LD_INT 116
7616: PPUSH
7617: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7621: LD_EXP 35
7625: PPUSH
7626: LD_INT 92
7628: PPUSH
7629: LD_INT 177
7631: PPUSH
7632: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7636: LD_INT 35
7638: PPUSH
7639: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7643: LD_EXP 35
7647: PPUSH
7648: CALL_OW 301
7652: PUSH
7653: LD_EXP 35
7657: PPUSH
7658: LD_INT 92
7660: PPUSH
7661: LD_INT 177
7663: PPUSH
7664: CALL_OW 307
7668: OR
7669: IFFALSE 7636
// if IsAt ( Gaidar , 92 , 177 ) then
7671: LD_EXP 35
7675: PPUSH
7676: LD_INT 92
7678: PPUSH
7679: LD_INT 177
7681: PPUSH
7682: CALL_OW 307
7686: IFFALSE 7699
// begin RemoveUnit ( Gaidar ) ;
7688: LD_EXP 35
7692: PPUSH
7693: CALL_OW 64
// exit ;
7697: GO 7721
// end ; gaidarKilled := true ;
7699: LD_ADDR_EXP 14
7703: PUSH
7704: LD_INT 1
7706: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7707: LD_STRING GaidarKilled
7709: PPUSH
7710: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7714: LD_STRING ACH_COMMISAR
7716: PPUSH
7717: CALL_OW 543
// end ;
7721: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7722: LD_INT 2
7724: PPUSH
7725: LD_EXP 35
7729: PPUSH
7730: CALL_OW 292
7734: IFFALSE 7751
7736: GO 7738
7738: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7739: LD_EXP 35
7743: PPUSH
7744: LD_STRING DT-objective-1
7746: PPUSH
7747: CALL_OW 88
7751: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7752: LD_INT 22
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: LD_INT 95
7767: PUSH
7768: LD_INT 5
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 95
7777: PUSH
7778: LD_INT 6
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 95
7787: PUSH
7788: LD_INT 7
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PPUSH
7805: CALL_OW 69
7809: IFFALSE 7846
7811: GO 7813
7813: DISABLE
// begin DialogueOn ;
7814: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7818: LD_EXP 18
7822: PPUSH
7823: LD_STRING DH-outpost-last-1
7825: PPUSH
7826: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7830: LD_EXP 34
7834: PPUSH
7835: LD_STRING DB-outpost-last-2
7837: PPUSH
7838: CALL_OW 94
// DialogueOff ;
7842: CALL_OW 7
// end ;
7846: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7847: LD_INT 200
7849: PPUSH
7850: CALL_OW 256
7854: PUSH
7855: LD_INT 999
7857: LESS
7858: PUSH
7859: LD_INT 200
7861: PPUSH
7862: CALL_OW 255
7866: PUSH
7867: LD_INT 2
7869: EQUAL
7870: OR
7871: IFFALSE 8044
7873: GO 7875
7875: DISABLE
7876: LD_INT 0
7878: PPUSH
7879: PPUSH
// begin if not earlyEscape then
7880: LD_EXP 16
7884: NOT
7885: IFFALSE 7911
// begin SayRadio ( Burlak , DB-end-1 ) ;
7887: LD_EXP 34
7891: PPUSH
7892: LD_STRING DB-end-1
7894: PPUSH
7895: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7899: LD_EXP 18
7903: PPUSH
7904: LD_STRING DH-end-2
7906: PPUSH
7907: CALL_OW 88
// end ; if tick <= 15 15$00 then
7911: LD_OWVAR 1
7915: PUSH
7916: LD_INT 31500
7918: LESSEQUAL
7919: IFFALSE 7928
// SetAchievement ( ACH_FIST ) ;
7921: LD_STRING ACH_FIST
7923: PPUSH
7924: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_INT 22
7935: PUSH
7936: LD_INT 3
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 21
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 69
7968: ST_TO_ADDR
// if not tmp then
7969: LD_VAR 0 2
7973: NOT
7974: IFFALSE 7978
// exit ;
7976: GO 8044
// for i in tmp do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_VAR 0 2
7987: PUSH
7988: FOR_IN
7989: IFFALSE 8042
// begin SetTag ( i , tEscape ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: LD_EXP 17
8000: PPUSH
8001: CALL_OW 109
// if IsInUnit ( i ) then
8005: LD_VAR 0 1
8009: PPUSH
8010: CALL_OW 310
8014: IFFALSE 8025
// ComExitBuilding ( i ) ;
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8025: LD_VAR 0 1
8029: PPUSH
8030: LD_INT 92
8032: PPUSH
8033: LD_INT 177
8035: PPUSH
8036: CALL_OW 171
// end ;
8040: GO 7988
8042: POP
8043: POP
// end ;
8044: PPOPN 2
8046: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8047: LD_INT 4
8049: PPUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 2
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PPUSH
8060: CALL_OW 70
8064: PUSH
8065: LD_EXP 15
8069: NOT
8070: AND
8071: PUSH
8072: LD_EXP 27
8076: PPUSH
8077: CALL_OW 302
8081: AND
8082: IFFALSE 8322
8084: GO 8086
8086: DISABLE
// begin DialogueOn ;
8087: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8091: LD_INT 111
8093: PPUSH
8094: LD_INT 54
8096: PPUSH
8097: LD_INT 2
8099: PPUSH
8100: LD_INT 16
8102: NEG
8103: PPUSH
8104: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8108: LD_INT 111
8110: PPUSH
8111: LD_INT 53
8113: PPUSH
8114: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8118: LD_INT 10
8120: PPUSH
8121: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8125: LD_EXP 27
8129: PPUSH
8130: LD_STRING DKs-Hannibal-1
8132: PPUSH
8133: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8137: LD_EXP 27
8141: PPUSH
8142: LD_STRING DKs-Hannibal-2
8144: PPUSH
8145: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8149: LD_EXP 27
8153: PPUSH
8154: LD_STRING DKs-Hannibal-3
8156: PPUSH
8157: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8161: LD_EXP 27
8165: PPUSH
8166: LD_STRING DKs-Hannibal-4
8168: PPUSH
8169: CALL_OW 88
// dwait ( 0 0$1 ) ;
8173: LD_INT 35
8175: PPUSH
8176: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8180: LD_INT 111
8182: PPUSH
8183: LD_INT 54
8185: PPUSH
8186: LD_INT 2
8188: PPUSH
8189: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8193: LD_INT 173
8195: PPUSH
8196: LD_INT 76
8198: PPUSH
8199: LD_INT 2
8201: PPUSH
8202: LD_INT 12
8204: NEG
8205: PPUSH
8206: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8210: LD_INT 173
8212: PPUSH
8213: LD_INT 76
8215: PPUSH
8216: LD_INT 2
8218: PPUSH
8219: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8223: LD_INT 173
8225: PPUSH
8226: LD_INT 76
8228: PPUSH
8229: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8233: LD_EXP 27
8237: PPUSH
8238: LD_STRING DKs-Hannibal-5
8240: PPUSH
8241: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8245: LD_EXP 22
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_INT 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 34
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: NOT
8279: AND
8280: IFFALSE 8318
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8282: LD_EXP 22
8286: PPUSH
8287: LD_STRING DKam-Hannibal-a-6
8289: PPUSH
8290: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8294: LD_EXP 22
8298: PPUSH
8299: LD_STRING DKam-Hannibal-a-7
8301: PPUSH
8302: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8306: LD_EXP 19
8310: PPUSH
8311: LD_STRING DG-Hannibal-a-8
8313: PPUSH
8314: CALL_OW 88
// end ; DialogueOff ;
8318: CALL_OW 7
// end ;
8322: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8323: LD_INT 225
8325: PPUSH
8326: CALL_OW 302
8330: PUSH
8331: LD_INT 200
8333: PPUSH
8334: CALL_OW 302
8338: AND
8339: PUSH
8340: LD_INT 12
8342: PPUSH
8343: LD_INT 21
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL_OW 70
8357: PUSH
8358: LD_INT 2
8360: GREATER
8361: AND
8362: PUSH
8363: LD_INT 13
8365: PPUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 2
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 70
8380: PUSH
8381: LD_INT 3
8383: GREATER
8384: AND
8385: IFFALSE 8398
8387: GO 8389
8389: DISABLE
// hannibalPath := true ;
8390: LD_ADDR_EXP 9
8394: PUSH
8395: LD_INT 1
8397: ST_TO_ADDR
8398: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8399: LD_EXP 9
8403: PUSH
8404: LD_INT 6
8406: PPUSH
8407: LD_INT 22
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PPUSH
8417: CALL_OW 70
8421: AND
8422: IFFALSE 8767
8424: GO 8426
8426: DISABLE
8427: LD_INT 0
8429: PPUSH
8430: PPUSH
8431: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8432: LD_ADDR_VAR 0 2
8436: PUSH
8437: LD_INT 6
8439: PPUSH
8440: LD_INT 22
8442: PUSH
8443: LD_INT 2
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 70
8454: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8455: LD_ADDR_VAR 0 3
8459: PUSH
8460: LD_VAR 0 2
8464: PPUSH
8465: LD_INT 34
8467: PUSH
8468: LD_INT 26
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 72
8479: PUSH
8480: LD_INT 0
8482: GREATER
8483: ST_TO_ADDR
// DialogueOn ;
8484: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8488: LD_EXP 18
8492: PPUSH
8493: LD_STRING DH-Cleverattack-1
8495: PPUSH
8496: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8500: LD_EXP 18
8504: PPUSH
8505: LD_STRING DH-Cleverattack-2
8507: PPUSH
8508: CALL_OW 88
// if hasFlameThrower then
8512: LD_VAR 0 3
8516: IFFALSE 8544
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8518: LD_EXP 34
8522: PPUSH
8523: LD_STRING DB-Cleverattack-3
8525: PPUSH
8526: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8530: LD_EXP 18
8534: PPUSH
8535: LD_STRING DH-Cleverattack-4
8537: PPUSH
8538: CALL_OW 88
// end else
8542: GO 8568
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8544: LD_EXP 34
8548: PPUSH
8549: LD_STRING DB-Cleverattack-a-3
8551: PPUSH
8552: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8556: LD_EXP 18
8560: PPUSH
8561: LD_STRING DH-Cleverattack-a-4
8563: PPUSH
8564: CALL_OW 88
// end ; DialogueOff ;
8568: CALL_OW 7
// if not hasFlameThrower then
8572: LD_VAR 0 3
8576: NOT
8577: IFFALSE 8581
// exit ;
8579: GO 8767
// earlyEscape := true ;
8581: LD_ADDR_EXP 16
8585: PUSH
8586: LD_INT 1
8588: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8589: LD_INT 140
8591: PPUSH
8592: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8596: LD_ADDR_VAR 0 2
8600: PUSH
8601: LD_INT 22
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: LD_INT 2
8613: PUSH
8614: LD_INT 25
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 25
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 25
8636: PUSH
8637: LD_INT 4
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PPUSH
8654: CALL_OW 69
8658: PUSH
8659: LD_EXP 21
8663: PUSH
8664: LD_EXP 36
8668: PUSH
8669: LD_EXP 35
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: DIFF
8679: ST_TO_ADDR
// for i in tmp do
8680: LD_ADDR_VAR 0 1
8684: PUSH
8685: LD_VAR 0 2
8689: PUSH
8690: FOR_IN
8691: IFFALSE 8765
// begin if Prob ( 40 + 10 * Difficulty ) then
8693: LD_INT 40
8695: PUSH
8696: LD_INT 10
8698: PUSH
8699: LD_OWVAR 67
8703: MUL
8704: PLUS
8705: PPUSH
8706: CALL_OW 13
8710: IFFALSE 8714
// continue ;
8712: GO 8690
// SetTag ( i , tEscape ) ;
8714: LD_VAR 0 1
8718: PPUSH
8719: LD_EXP 17
8723: PPUSH
8724: CALL_OW 109
// if IsInUnit ( i ) then
8728: LD_VAR 0 1
8732: PPUSH
8733: CALL_OW 310
8737: IFFALSE 8748
// ComExitBuilding ( i ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8748: LD_VAR 0 1
8752: PPUSH
8753: LD_INT 92
8755: PPUSH
8756: LD_INT 177
8758: PPUSH
8759: CALL_OW 171
// end ;
8763: GO 8690
8765: POP
8766: POP
// end ;
8767: PPOPN 3
8769: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8770: LD_INT 9
8772: PPUSH
8773: LD_INT 2
8775: PUSH
8776: LD_INT 22
8778: PUSH
8779: LD_INT 3
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 22
8788: PUSH
8789: LD_INT 6
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PPUSH
8801: CALL_OW 70
8805: IFFALSE 8903
8807: GO 8809
8809: DISABLE
8810: LD_INT 0
8812: PPUSH
// begin enable ;
8813: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8814: LD_ADDR_VAR 0 1
8818: PUSH
8819: LD_INT 9
8821: PPUSH
8822: LD_INT 2
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 22
8837: PUSH
8838: LD_INT 6
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 70
8854: PUSH
8855: FOR_IN
8856: IFFALSE 8901
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 110
8867: PUSH
8868: LD_EXP 17
8872: EQUAL
8873: PUSH
8874: LD_VAR 0 1
8878: PPUSH
8879: CALL_OW 255
8883: PUSH
8884: LD_INT 6
8886: EQUAL
8887: OR
8888: IFFALSE 8899
// RemoveUnit ( i ) ;
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 64
8899: GO 8855
8901: POP
8902: POP
// end ;
8903: PPOPN 1
8905: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8906: LD_EXP 23
8910: PUSH
8911: LD_EXP 23
8915: PPUSH
8916: CALL_OW 256
8920: PUSH
8921: LD_INT 3
8923: LESS
8924: AND
8925: IFFALSE 8971
8927: GO 8929
8929: DISABLE
// begin DialogueOn ;
8930: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8934: LD_EXP 23
8938: PPUSH
8939: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
8943: LD_EXP 23
8947: PPUSH
8948: LD_STRING DK-Kkilled-1
8950: PPUSH
8951: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
8955: LD_EXP 18
8959: PPUSH
8960: LD_STRING DH-Kkilled-2
8962: PPUSH
8963: CALL_OW 88
// DialogueOff ;
8967: CALL_OW 7
// end ;
8971: END
// every 0 0$1 trigger kaiaKilledByRussian do
8972: LD_EXP 8
8976: IFFALSE 8993
8978: GO 8980
8980: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
8981: LD_EXP 18
8985: PPUSH
8986: LD_STRING DH-Kkilled-3
8988: PPUSH
8989: CALL_OW 88
8993: END
// every 0 0$1 trigger tick >= 24 24$00 do
8994: LD_OWVAR 1
8998: PUSH
8999: LD_INT 50400
9001: GREATEREQUAL
9002: IFFALSE 9039
9004: GO 9006
9006: DISABLE
// begin DialogueOn ;
9007: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9011: LD_EXP 26
9015: PPUSH
9016: LD_STRING DShar-slow-1
9018: PPUSH
9019: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9023: LD_EXP 26
9027: PPUSH
9028: LD_STRING DShar-slow-2
9030: PPUSH
9031: CALL_OW 94
// DialogueOff ;
9035: CALL_OW 7
// end ;
9039: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 ] [ Difficulty ] do
9040: LD_OWVAR 1
9044: PUSH
9045: LD_INT 84000
9047: PUSH
9048: LD_INT 75600
9050: PUSH
9051: LD_INT 67200
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: GREATEREQUAL
9065: IFFALSE 9109
9067: GO 9069
9069: DISABLE
// begin DialogueOn ;
9070: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9074: LD_EXP 26
9078: PPUSH
9079: LD_STRING DShar-fail-1
9081: PPUSH
9082: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9086: LD_EXP 26
9090: PPUSH
9091: LD_STRING DShar-fail-2
9093: PPUSH
9094: CALL_OW 94
// DialogueOff ;
9098: CALL_OW 7
// YouLost ( Time ) ;
9102: LD_STRING Time
9104: PPUSH
9105: CALL_OW 104
// end ;
9109: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9110: LD_INT 22
9112: PUSH
9113: LD_INT 3
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 1
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 30
9135: PUSH
9136: LD_INT 0
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 69
9156: PUSH
9157: LD_INT 0
9159: EQUAL
9160: IFFALSE 9651
9162: GO 9164
9164: DISABLE
9165: LD_INT 0
9167: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 ] [ Difficulty ] then
9168: LD_OWVAR 1
9172: PUSH
9173: LD_EXP 5
9177: PLUS
9178: PUSH
9179: LD_INT 157500
9181: PUSH
9182: LD_INT 147000
9184: PUSH
9185: LD_INT 136500
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: LD_OWVAR 67
9197: ARRAY
9198: LESSEQUAL
9199: IFFALSE 9213
// AddMedal ( med1 , 1 ) else
9201: LD_STRING med1
9203: PPUSH
9204: LD_INT 1
9206: PPUSH
9207: CALL_OW 101
9211: GO 9224
// AddMedal ( med1 , - 1 ) ;
9213: LD_STRING med1
9215: PPUSH
9216: LD_INT 1
9218: NEG
9219: PPUSH
9220: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 ] [ Difficulty ] ) then
9224: LD_EXP 7
9228: PUSH
9229: LD_INT 3
9231: GREATEREQUAL
9232: PUSH
9233: LD_EXP 11
9237: MUL
9238: PUSH
9239: LD_EXP 9
9243: MUL
9244: PUSH
9245: LD_EXP 6
9249: PUSH
9250: LD_INT 6
9252: PUSH
9253: LD_INT 5
9255: PUSH
9256: LD_INT 4
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: LD_OWVAR 67
9268: ARRAY
9269: LESS
9270: MUL
9271: IFFALSE 9285
// AddMedal ( med2 , 1 ) else
9273: LD_STRING med2
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL_OW 101
9283: GO 9296
// AddMedal ( med2 , - 1 ) ;
9285: LD_STRING med2
9287: PPUSH
9288: LD_INT 1
9290: NEG
9291: PPUSH
9292: CALL_OW 101
// if gaidarKilled then
9296: LD_EXP 14
9300: IFFALSE 9314
// AddMedal ( med3 , 1 ) else
9302: LD_STRING med3
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 101
9312: GO 9325
// AddMedal ( med3 , - 1 ) ;
9314: LD_STRING med3
9316: PPUSH
9317: LD_INT 1
9319: NEG
9320: PPUSH
9321: CALL_OW 101
// GiveMedals ( MAIN ) ;
9325: LD_STRING MAIN
9327: PPUSH
9328: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9332: LD_INT 22
9334: PUSH
9335: LD_INT 2
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 3
9344: PUSH
9345: LD_INT 23
9347: PUSH
9348: LD_INT 0
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: PPUSH
9368: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9372: LD_EXP 18
9376: PPUSH
9377: LD_STRING 04_2_Heike
9379: PPUSH
9380: CALL_OW 38
// if Aviradze then
9384: LD_EXP 28
9388: IFFALSE 9402
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9390: LD_EXP 28
9394: PPUSH
9395: LD_STRING 04_2_Aviradze
9397: PPUSH
9398: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9402: LD_EXP 21
9406: PUSH
9407: LD_EXP 21
9411: PPUSH
9412: CALL_OW 255
9416: PUSH
9417: LD_INT 2
9419: EQUAL
9420: AND
9421: IFFALSE 9451
// begin if ibrahimOnRuSide then
9423: LD_EXP 3
9427: IFFALSE 9439
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9429: LD_INT 1
9431: PPUSH
9432: LD_STRING 04_2_IbrahimJoined
9434: PPUSH
9435: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9439: LD_EXP 21
9443: PPUSH
9444: LD_STRING 04_2_Ibrahim
9446: PPUSH
9447: CALL_OW 38
// end ; if Kamil then
9451: LD_EXP 22
9455: IFFALSE 9469
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9457: LD_EXP 22
9461: PPUSH
9462: LD_STRING 04_2_Kamil
9464: PPUSH
9465: CALL_OW 38
// if Sophia then
9469: LD_EXP 24
9473: IFFALSE 9487
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9475: LD_EXP 24
9479: PPUSH
9480: LD_STRING 04_2_Sophia
9482: PPUSH
9483: CALL_OW 38
// if Kaia then
9487: LD_EXP 23
9491: IFFALSE 9505
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9493: LD_EXP 23
9497: PPUSH
9498: LD_STRING 04_2_Kaia
9500: PPUSH
9501: CALL_OW 38
// if Givi then
9505: LD_EXP 19
9509: IFFALSE 9523
// SaveCharacters ( Givi , 04_2_Givi ) ;
9511: LD_EXP 19
9515: PPUSH
9516: LD_STRING 04_2_Givi
9518: PPUSH
9519: CALL_OW 38
// if Mike then
9523: LD_EXP 20
9527: IFFALSE 9541
// SaveCharacters ( Mike , 04_2_Mike ) ;
9529: LD_EXP 20
9533: PPUSH
9534: LD_STRING 04_2_Mike
9536: PPUSH
9537: CALL_OW 38
// if Markov then
9541: LD_EXP 25
9545: IFFALSE 9559
// SaveCharacters ( Markov , 04_2_Markov ) ;
9547: LD_EXP 25
9551: PPUSH
9552: LD_STRING 04_2_Markov
9554: PPUSH
9555: CALL_OW 38
// if Kurt then
9559: LD_EXP 27
9563: IFFALSE 9577
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9565: LD_EXP 27
9569: PPUSH
9570: LD_STRING 04_2_Kurt
9572: PPUSH
9573: CALL_OW 38
// if heikeSecondSquad then
9577: LD_EXP 29
9581: IFFALSE 9595
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9583: LD_EXP 29
9587: PPUSH
9588: LD_STRING 04_2_others
9590: PPUSH
9591: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_INT 22
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 23
9612: PUSH
9613: LD_INT 0
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PPUSH
9624: CALL_OW 69
9628: ST_TO_ADDR
// if tmp then
9629: LD_VAR 0 1
9633: IFFALSE 9647
// SaveCharacters ( tmp , 04_2_apes ) ;
9635: LD_VAR 0 1
9639: PPUSH
9640: LD_STRING 04_2_apes
9642: PPUSH
9643: CALL_OW 38
// YouWin ;
9647: CALL_OW 103
// end ; end_of_file
9651: PPOPN 1
9653: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9654: LD_INT 0
9656: PPUSH
// if p2 = 100 then
9657: LD_VAR 0 2
9661: PUSH
9662: LD_INT 100
9664: EQUAL
9665: IFFALSE 10614
// begin if not StreamModeActive then
9667: LD_EXP 43
9671: NOT
9672: IFFALSE 9682
// StreamModeActive := true ;
9674: LD_ADDR_EXP 43
9678: PUSH
9679: LD_INT 1
9681: ST_TO_ADDR
// if p3 = 0 then
9682: LD_VAR 0 3
9686: PUSH
9687: LD_INT 0
9689: EQUAL
9690: IFFALSE 9696
// InitStreamMode ;
9692: CALL 10774 0 0
// if p3 = 1 then
9696: LD_VAR 0 3
9700: PUSH
9701: LD_INT 1
9703: EQUAL
9704: IFFALSE 9714
// sRocket := true ;
9706: LD_ADDR_EXP 48
9710: PUSH
9711: LD_INT 1
9713: ST_TO_ADDR
// if p3 = 2 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 2
9721: EQUAL
9722: IFFALSE 9732
// sSpeed := true ;
9724: LD_ADDR_EXP 47
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// if p3 = 3 then
9732: LD_VAR 0 3
9736: PUSH
9737: LD_INT 3
9739: EQUAL
9740: IFFALSE 9750
// sEngine := true ;
9742: LD_ADDR_EXP 49
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// if p3 = 4 then
9750: LD_VAR 0 3
9754: PUSH
9755: LD_INT 4
9757: EQUAL
9758: IFFALSE 9768
// sSpec := true ;
9760: LD_ADDR_EXP 46
9764: PUSH
9765: LD_INT 1
9767: ST_TO_ADDR
// if p3 = 5 then
9768: LD_VAR 0 3
9772: PUSH
9773: LD_INT 5
9775: EQUAL
9776: IFFALSE 9786
// sLevel := true ;
9778: LD_ADDR_EXP 50
9782: PUSH
9783: LD_INT 1
9785: ST_TO_ADDR
// if p3 = 6 then
9786: LD_VAR 0 3
9790: PUSH
9791: LD_INT 6
9793: EQUAL
9794: IFFALSE 9804
// sArmoury := true ;
9796: LD_ADDR_EXP 51
9800: PUSH
9801: LD_INT 1
9803: ST_TO_ADDR
// if p3 = 7 then
9804: LD_VAR 0 3
9808: PUSH
9809: LD_INT 7
9811: EQUAL
9812: IFFALSE 9822
// sRadar := true ;
9814: LD_ADDR_EXP 52
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// if p3 = 8 then
9822: LD_VAR 0 3
9826: PUSH
9827: LD_INT 8
9829: EQUAL
9830: IFFALSE 9840
// sBunker := true ;
9832: LD_ADDR_EXP 53
9836: PUSH
9837: LD_INT 1
9839: ST_TO_ADDR
// if p3 = 9 then
9840: LD_VAR 0 3
9844: PUSH
9845: LD_INT 9
9847: EQUAL
9848: IFFALSE 9858
// sHack := true ;
9850: LD_ADDR_EXP 54
9854: PUSH
9855: LD_INT 1
9857: ST_TO_ADDR
// if p3 = 10 then
9858: LD_VAR 0 3
9862: PUSH
9863: LD_INT 10
9865: EQUAL
9866: IFFALSE 9876
// sFire := true ;
9868: LD_ADDR_EXP 55
9872: PUSH
9873: LD_INT 1
9875: ST_TO_ADDR
// if p3 = 11 then
9876: LD_VAR 0 3
9880: PUSH
9881: LD_INT 11
9883: EQUAL
9884: IFFALSE 9894
// sRefresh := true ;
9886: LD_ADDR_EXP 56
9890: PUSH
9891: LD_INT 1
9893: ST_TO_ADDR
// if p3 = 12 then
9894: LD_VAR 0 3
9898: PUSH
9899: LD_INT 12
9901: EQUAL
9902: IFFALSE 9912
// sExp := true ;
9904: LD_ADDR_EXP 57
9908: PUSH
9909: LD_INT 1
9911: ST_TO_ADDR
// if p3 = 13 then
9912: LD_VAR 0 3
9916: PUSH
9917: LD_INT 13
9919: EQUAL
9920: IFFALSE 9930
// sDepot := true ;
9922: LD_ADDR_EXP 58
9926: PUSH
9927: LD_INT 1
9929: ST_TO_ADDR
// if p3 = 14 then
9930: LD_VAR 0 3
9934: PUSH
9935: LD_INT 14
9937: EQUAL
9938: IFFALSE 9948
// sFlag := true ;
9940: LD_ADDR_EXP 59
9944: PUSH
9945: LD_INT 1
9947: ST_TO_ADDR
// if p3 = 15 then
9948: LD_VAR 0 3
9952: PUSH
9953: LD_INT 15
9955: EQUAL
9956: IFFALSE 9966
// sKamikadze := true ;
9958: LD_ADDR_EXP 67
9962: PUSH
9963: LD_INT 1
9965: ST_TO_ADDR
// if p3 = 16 then
9966: LD_VAR 0 3
9970: PUSH
9971: LD_INT 16
9973: EQUAL
9974: IFFALSE 9984
// sTroll := true ;
9976: LD_ADDR_EXP 68
9980: PUSH
9981: LD_INT 1
9983: ST_TO_ADDR
// if p3 = 17 then
9984: LD_VAR 0 3
9988: PUSH
9989: LD_INT 17
9991: EQUAL
9992: IFFALSE 10002
// sSlow := true ;
9994: LD_ADDR_EXP 69
9998: PUSH
9999: LD_INT 1
10001: ST_TO_ADDR
// if p3 = 18 then
10002: LD_VAR 0 3
10006: PUSH
10007: LD_INT 18
10009: EQUAL
10010: IFFALSE 10020
// sLack := true ;
10012: LD_ADDR_EXP 70
10016: PUSH
10017: LD_INT 1
10019: ST_TO_ADDR
// if p3 = 19 then
10020: LD_VAR 0 3
10024: PUSH
10025: LD_INT 19
10027: EQUAL
10028: IFFALSE 10038
// sTank := true ;
10030: LD_ADDR_EXP 72
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
// if p3 = 20 then
10038: LD_VAR 0 3
10042: PUSH
10043: LD_INT 20
10045: EQUAL
10046: IFFALSE 10056
// sRemote := true ;
10048: LD_ADDR_EXP 73
10052: PUSH
10053: LD_INT 1
10055: ST_TO_ADDR
// if p3 = 21 then
10056: LD_VAR 0 3
10060: PUSH
10061: LD_INT 21
10063: EQUAL
10064: IFFALSE 10074
// sPowell := true ;
10066: LD_ADDR_EXP 74
10070: PUSH
10071: LD_INT 1
10073: ST_TO_ADDR
// if p3 = 22 then
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 22
10081: EQUAL
10082: IFFALSE 10092
// sTeleport := true ;
10084: LD_ADDR_EXP 77
10088: PUSH
10089: LD_INT 1
10091: ST_TO_ADDR
// if p3 = 23 then
10092: LD_VAR 0 3
10096: PUSH
10097: LD_INT 23
10099: EQUAL
10100: IFFALSE 10110
// sOilTower := true ;
10102: LD_ADDR_EXP 79
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// if p3 = 24 then
10110: LD_VAR 0 3
10114: PUSH
10115: LD_INT 24
10117: EQUAL
10118: IFFALSE 10128
// sShovel := true ;
10120: LD_ADDR_EXP 80
10124: PUSH
10125: LD_INT 1
10127: ST_TO_ADDR
// if p3 = 25 then
10128: LD_VAR 0 3
10132: PUSH
10133: LD_INT 25
10135: EQUAL
10136: IFFALSE 10146
// sSheik := true ;
10138: LD_ADDR_EXP 81
10142: PUSH
10143: LD_INT 1
10145: ST_TO_ADDR
// if p3 = 26 then
10146: LD_VAR 0 3
10150: PUSH
10151: LD_INT 26
10153: EQUAL
10154: IFFALSE 10164
// sEarthquake := true ;
10156: LD_ADDR_EXP 83
10160: PUSH
10161: LD_INT 1
10163: ST_TO_ADDR
// if p3 = 27 then
10164: LD_VAR 0 3
10168: PUSH
10169: LD_INT 27
10171: EQUAL
10172: IFFALSE 10182
// sAI := true ;
10174: LD_ADDR_EXP 84
10178: PUSH
10179: LD_INT 1
10181: ST_TO_ADDR
// if p3 = 28 then
10182: LD_VAR 0 3
10186: PUSH
10187: LD_INT 28
10189: EQUAL
10190: IFFALSE 10200
// sCargo := true ;
10192: LD_ADDR_EXP 87
10196: PUSH
10197: LD_INT 1
10199: ST_TO_ADDR
// if p3 = 29 then
10200: LD_VAR 0 3
10204: PUSH
10205: LD_INT 29
10207: EQUAL
10208: IFFALSE 10218
// sDLaser := true ;
10210: LD_ADDR_EXP 88
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// if p3 = 30 then
10218: LD_VAR 0 3
10222: PUSH
10223: LD_INT 30
10225: EQUAL
10226: IFFALSE 10236
// sExchange := true ;
10228: LD_ADDR_EXP 89
10232: PUSH
10233: LD_INT 1
10235: ST_TO_ADDR
// if p3 = 31 then
10236: LD_VAR 0 3
10240: PUSH
10241: LD_INT 31
10243: EQUAL
10244: IFFALSE 10254
// sFac := true ;
10246: LD_ADDR_EXP 90
10250: PUSH
10251: LD_INT 1
10253: ST_TO_ADDR
// if p3 = 32 then
10254: LD_VAR 0 3
10258: PUSH
10259: LD_INT 32
10261: EQUAL
10262: IFFALSE 10272
// sPower := true ;
10264: LD_ADDR_EXP 91
10268: PUSH
10269: LD_INT 1
10271: ST_TO_ADDR
// if p3 = 33 then
10272: LD_VAR 0 3
10276: PUSH
10277: LD_INT 33
10279: EQUAL
10280: IFFALSE 10290
// sRandom := true ;
10282: LD_ADDR_EXP 92
10286: PUSH
10287: LD_INT 1
10289: ST_TO_ADDR
// if p3 = 34 then
10290: LD_VAR 0 3
10294: PUSH
10295: LD_INT 34
10297: EQUAL
10298: IFFALSE 10308
// sShield := true ;
10300: LD_ADDR_EXP 93
10304: PUSH
10305: LD_INT 1
10307: ST_TO_ADDR
// if p3 = 35 then
10308: LD_VAR 0 3
10312: PUSH
10313: LD_INT 35
10315: EQUAL
10316: IFFALSE 10326
// sTime := true ;
10318: LD_ADDR_EXP 94
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// if p3 = 36 then
10326: LD_VAR 0 3
10330: PUSH
10331: LD_INT 36
10333: EQUAL
10334: IFFALSE 10344
// sTools := true ;
10336: LD_ADDR_EXP 95
10340: PUSH
10341: LD_INT 1
10343: ST_TO_ADDR
// if p3 = 101 then
10344: LD_VAR 0 3
10348: PUSH
10349: LD_INT 101
10351: EQUAL
10352: IFFALSE 10362
// sSold := true ;
10354: LD_ADDR_EXP 60
10358: PUSH
10359: LD_INT 1
10361: ST_TO_ADDR
// if p3 = 102 then
10362: LD_VAR 0 3
10366: PUSH
10367: LD_INT 102
10369: EQUAL
10370: IFFALSE 10380
// sDiff := true ;
10372: LD_ADDR_EXP 61
10376: PUSH
10377: LD_INT 1
10379: ST_TO_ADDR
// if p3 = 103 then
10380: LD_VAR 0 3
10384: PUSH
10385: LD_INT 103
10387: EQUAL
10388: IFFALSE 10398
// sFog := true ;
10390: LD_ADDR_EXP 64
10394: PUSH
10395: LD_INT 1
10397: ST_TO_ADDR
// if p3 = 104 then
10398: LD_VAR 0 3
10402: PUSH
10403: LD_INT 104
10405: EQUAL
10406: IFFALSE 10416
// sReset := true ;
10408: LD_ADDR_EXP 65
10412: PUSH
10413: LD_INT 1
10415: ST_TO_ADDR
// if p3 = 105 then
10416: LD_VAR 0 3
10420: PUSH
10421: LD_INT 105
10423: EQUAL
10424: IFFALSE 10434
// sSun := true ;
10426: LD_ADDR_EXP 66
10430: PUSH
10431: LD_INT 1
10433: ST_TO_ADDR
// if p3 = 106 then
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 106
10441: EQUAL
10442: IFFALSE 10452
// sTiger := true ;
10444: LD_ADDR_EXP 62
10448: PUSH
10449: LD_INT 1
10451: ST_TO_ADDR
// if p3 = 107 then
10452: LD_VAR 0 3
10456: PUSH
10457: LD_INT 107
10459: EQUAL
10460: IFFALSE 10470
// sBomb := true ;
10462: LD_ADDR_EXP 63
10466: PUSH
10467: LD_INT 1
10469: ST_TO_ADDR
// if p3 = 108 then
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 108
10477: EQUAL
10478: IFFALSE 10488
// sWound := true ;
10480: LD_ADDR_EXP 71
10484: PUSH
10485: LD_INT 1
10487: ST_TO_ADDR
// if p3 = 109 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_INT 109
10495: EQUAL
10496: IFFALSE 10506
// sBetray := true ;
10498: LD_ADDR_EXP 75
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// if p3 = 110 then
10506: LD_VAR 0 3
10510: PUSH
10511: LD_INT 110
10513: EQUAL
10514: IFFALSE 10524
// sContamin := true ;
10516: LD_ADDR_EXP 76
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// if p3 = 111 then
10524: LD_VAR 0 3
10528: PUSH
10529: LD_INT 111
10531: EQUAL
10532: IFFALSE 10542
// sOil := true ;
10534: LD_ADDR_EXP 78
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// if p3 = 112 then
10542: LD_VAR 0 3
10546: PUSH
10547: LD_INT 112
10549: EQUAL
10550: IFFALSE 10560
// sStu := true ;
10552: LD_ADDR_EXP 82
10556: PUSH
10557: LD_INT 1
10559: ST_TO_ADDR
// if p3 = 113 then
10560: LD_VAR 0 3
10564: PUSH
10565: LD_INT 113
10567: EQUAL
10568: IFFALSE 10578
// sBazooka := true ;
10570: LD_ADDR_EXP 85
10574: PUSH
10575: LD_INT 1
10577: ST_TO_ADDR
// if p3 = 114 then
10578: LD_VAR 0 3
10582: PUSH
10583: LD_INT 114
10585: EQUAL
10586: IFFALSE 10596
// sMortar := true ;
10588: LD_ADDR_EXP 86
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// if p3 = 115 then
10596: LD_VAR 0 3
10600: PUSH
10601: LD_INT 115
10603: EQUAL
10604: IFFALSE 10614
// sRanger := true ;
10606: LD_ADDR_EXP 96
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// end ; if p2 = 101 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 101
10621: EQUAL
10622: IFFALSE 10750
// begin case p3 of 1 :
10624: LD_VAR 0 3
10628: PUSH
10629: LD_INT 1
10631: DOUBLE
10632: EQUAL
10633: IFTRUE 10637
10635: GO 10644
10637: POP
// hHackUnlimitedResources ; 2 :
10638: CALL 21787 0 0
10642: GO 10750
10644: LD_INT 2
10646: DOUBLE
10647: EQUAL
10648: IFTRUE 10652
10650: GO 10659
10652: POP
// hHackSetLevel10 ; 3 :
10653: CALL 21920 0 0
10657: GO 10750
10659: LD_INT 3
10661: DOUBLE
10662: EQUAL
10663: IFTRUE 10667
10665: GO 10674
10667: POP
// hHackSetLevel10YourUnits ; 4 :
10668: CALL 22005 0 0
10672: GO 10750
10674: LD_INT 4
10676: DOUBLE
10677: EQUAL
10678: IFTRUE 10682
10680: GO 10689
10682: POP
// hHackInvincible ; 5 :
10683: CALL 22453 0 0
10687: GO 10750
10689: LD_INT 5
10691: DOUBLE
10692: EQUAL
10693: IFTRUE 10697
10695: GO 10704
10697: POP
// hHackInvisible ; 6 :
10698: CALL 22564 0 0
10702: GO 10750
10704: LD_INT 6
10706: DOUBLE
10707: EQUAL
10708: IFTRUE 10712
10710: GO 10719
10712: POP
// hHackChangeYourSide ; 7 :
10713: CALL 22621 0 0
10717: GO 10750
10719: LD_INT 7
10721: DOUBLE
10722: EQUAL
10723: IFTRUE 10727
10725: GO 10734
10727: POP
// hHackChangeUnitSide ; 8 :
10728: CALL 22663 0 0
10732: GO 10750
10734: LD_INT 8
10736: DOUBLE
10737: EQUAL
10738: IFTRUE 10742
10740: GO 10749
10742: POP
// hHackFog ; end ;
10743: CALL 22764 0 0
10747: GO 10750
10749: POP
// end ; end ;
10750: LD_VAR 0 7
10754: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10755: GO 10757
10757: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10758: LD_STRING initStreamRollete();
10760: PPUSH
10761: CALL_OW 559
// InitStreamMode ;
10765: CALL 10774 0 0
// DefineStreamItems ( ) ;
10769: CALL 11214 0 0
// end ;
10773: END
// function InitStreamMode ; begin
10774: LD_INT 0
10776: PPUSH
// streamModeActive := false ;
10777: LD_ADDR_EXP 43
10781: PUSH
10782: LD_INT 0
10784: ST_TO_ADDR
// normalCounter := 36 ;
10785: LD_ADDR_EXP 44
10789: PUSH
10790: LD_INT 36
10792: ST_TO_ADDR
// hardcoreCounter := 16 ;
10793: LD_ADDR_EXP 45
10797: PUSH
10798: LD_INT 16
10800: ST_TO_ADDR
// sRocket := false ;
10801: LD_ADDR_EXP 48
10805: PUSH
10806: LD_INT 0
10808: ST_TO_ADDR
// sSpeed := false ;
10809: LD_ADDR_EXP 47
10813: PUSH
10814: LD_INT 0
10816: ST_TO_ADDR
// sEngine := false ;
10817: LD_ADDR_EXP 49
10821: PUSH
10822: LD_INT 0
10824: ST_TO_ADDR
// sSpec := false ;
10825: LD_ADDR_EXP 46
10829: PUSH
10830: LD_INT 0
10832: ST_TO_ADDR
// sLevel := false ;
10833: LD_ADDR_EXP 50
10837: PUSH
10838: LD_INT 0
10840: ST_TO_ADDR
// sArmoury := false ;
10841: LD_ADDR_EXP 51
10845: PUSH
10846: LD_INT 0
10848: ST_TO_ADDR
// sRadar := false ;
10849: LD_ADDR_EXP 52
10853: PUSH
10854: LD_INT 0
10856: ST_TO_ADDR
// sBunker := false ;
10857: LD_ADDR_EXP 53
10861: PUSH
10862: LD_INT 0
10864: ST_TO_ADDR
// sHack := false ;
10865: LD_ADDR_EXP 54
10869: PUSH
10870: LD_INT 0
10872: ST_TO_ADDR
// sFire := false ;
10873: LD_ADDR_EXP 55
10877: PUSH
10878: LD_INT 0
10880: ST_TO_ADDR
// sRefresh := false ;
10881: LD_ADDR_EXP 56
10885: PUSH
10886: LD_INT 0
10888: ST_TO_ADDR
// sExp := false ;
10889: LD_ADDR_EXP 57
10893: PUSH
10894: LD_INT 0
10896: ST_TO_ADDR
// sDepot := false ;
10897: LD_ADDR_EXP 58
10901: PUSH
10902: LD_INT 0
10904: ST_TO_ADDR
// sFlag := false ;
10905: LD_ADDR_EXP 59
10909: PUSH
10910: LD_INT 0
10912: ST_TO_ADDR
// sKamikadze := false ;
10913: LD_ADDR_EXP 67
10917: PUSH
10918: LD_INT 0
10920: ST_TO_ADDR
// sTroll := false ;
10921: LD_ADDR_EXP 68
10925: PUSH
10926: LD_INT 0
10928: ST_TO_ADDR
// sSlow := false ;
10929: LD_ADDR_EXP 69
10933: PUSH
10934: LD_INT 0
10936: ST_TO_ADDR
// sLack := false ;
10937: LD_ADDR_EXP 70
10941: PUSH
10942: LD_INT 0
10944: ST_TO_ADDR
// sTank := false ;
10945: LD_ADDR_EXP 72
10949: PUSH
10950: LD_INT 0
10952: ST_TO_ADDR
// sRemote := false ;
10953: LD_ADDR_EXP 73
10957: PUSH
10958: LD_INT 0
10960: ST_TO_ADDR
// sPowell := false ;
10961: LD_ADDR_EXP 74
10965: PUSH
10966: LD_INT 0
10968: ST_TO_ADDR
// sTeleport := false ;
10969: LD_ADDR_EXP 77
10973: PUSH
10974: LD_INT 0
10976: ST_TO_ADDR
// sOilTower := false ;
10977: LD_ADDR_EXP 79
10981: PUSH
10982: LD_INT 0
10984: ST_TO_ADDR
// sShovel := false ;
10985: LD_ADDR_EXP 80
10989: PUSH
10990: LD_INT 0
10992: ST_TO_ADDR
// sSheik := false ;
10993: LD_ADDR_EXP 81
10997: PUSH
10998: LD_INT 0
11000: ST_TO_ADDR
// sEarthquake := false ;
11001: LD_ADDR_EXP 83
11005: PUSH
11006: LD_INT 0
11008: ST_TO_ADDR
// sAI := false ;
11009: LD_ADDR_EXP 84
11013: PUSH
11014: LD_INT 0
11016: ST_TO_ADDR
// sCargo := false ;
11017: LD_ADDR_EXP 87
11021: PUSH
11022: LD_INT 0
11024: ST_TO_ADDR
// sDLaser := false ;
11025: LD_ADDR_EXP 88
11029: PUSH
11030: LD_INT 0
11032: ST_TO_ADDR
// sExchange := false ;
11033: LD_ADDR_EXP 89
11037: PUSH
11038: LD_INT 0
11040: ST_TO_ADDR
// sFac := false ;
11041: LD_ADDR_EXP 90
11045: PUSH
11046: LD_INT 0
11048: ST_TO_ADDR
// sPower := false ;
11049: LD_ADDR_EXP 91
11053: PUSH
11054: LD_INT 0
11056: ST_TO_ADDR
// sRandom := false ;
11057: LD_ADDR_EXP 92
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// sShield := false ;
11065: LD_ADDR_EXP 93
11069: PUSH
11070: LD_INT 0
11072: ST_TO_ADDR
// sTime := false ;
11073: LD_ADDR_EXP 94
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// sTools := false ;
11081: LD_ADDR_EXP 95
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// sSold := false ;
11089: LD_ADDR_EXP 60
11093: PUSH
11094: LD_INT 0
11096: ST_TO_ADDR
// sDiff := false ;
11097: LD_ADDR_EXP 61
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// sFog := false ;
11105: LD_ADDR_EXP 64
11109: PUSH
11110: LD_INT 0
11112: ST_TO_ADDR
// sReset := false ;
11113: LD_ADDR_EXP 65
11117: PUSH
11118: LD_INT 0
11120: ST_TO_ADDR
// sSun := false ;
11121: LD_ADDR_EXP 66
11125: PUSH
11126: LD_INT 0
11128: ST_TO_ADDR
// sTiger := false ;
11129: LD_ADDR_EXP 62
11133: PUSH
11134: LD_INT 0
11136: ST_TO_ADDR
// sBomb := false ;
11137: LD_ADDR_EXP 63
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// sWound := false ;
11145: LD_ADDR_EXP 71
11149: PUSH
11150: LD_INT 0
11152: ST_TO_ADDR
// sBetray := false ;
11153: LD_ADDR_EXP 75
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// sContamin := false ;
11161: LD_ADDR_EXP 76
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// sOil := false ;
11169: LD_ADDR_EXP 78
11173: PUSH
11174: LD_INT 0
11176: ST_TO_ADDR
// sStu := false ;
11177: LD_ADDR_EXP 82
11181: PUSH
11182: LD_INT 0
11184: ST_TO_ADDR
// sBazooka := false ;
11185: LD_ADDR_EXP 85
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// sMortar := false ;
11193: LD_ADDR_EXP 86
11197: PUSH
11198: LD_INT 0
11200: ST_TO_ADDR
// sRanger := false ;
11201: LD_ADDR_EXP 96
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// end ;
11209: LD_VAR 0 1
11213: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11214: LD_INT 0
11216: PPUSH
11217: PPUSH
11218: PPUSH
11219: PPUSH
11220: PPUSH
// result := [ ] ;
11221: LD_ADDR_VAR 0 1
11225: PUSH
11226: EMPTY
11227: ST_TO_ADDR
// if campaign_id = 1 then
11228: LD_OWVAR 69
11232: PUSH
11233: LD_INT 1
11235: EQUAL
11236: IFFALSE 14174
// begin case mission_number of 1 :
11238: LD_OWVAR 70
11242: PUSH
11243: LD_INT 1
11245: DOUBLE
11246: EQUAL
11247: IFTRUE 11251
11249: GO 11315
11251: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11252: LD_ADDR_VAR 0 1
11256: PUSH
11257: LD_INT 2
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: LD_INT 11
11265: PUSH
11266: LD_INT 12
11268: PUSH
11269: LD_INT 15
11271: PUSH
11272: LD_INT 16
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_INT 23
11280: PUSH
11281: LD_INT 26
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 101
11297: PUSH
11298: LD_INT 102
11300: PUSH
11301: LD_INT 106
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: ST_TO_ADDR
11313: GO 14172
11315: LD_INT 2
11317: DOUBLE
11318: EQUAL
11319: IFTRUE 11323
11321: GO 11395
11323: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11324: LD_ADDR_VAR 0 1
11328: PUSH
11329: LD_INT 2
11331: PUSH
11332: LD_INT 4
11334: PUSH
11335: LD_INT 11
11337: PUSH
11338: LD_INT 12
11340: PUSH
11341: LD_INT 15
11343: PUSH
11344: LD_INT 16
11346: PUSH
11347: LD_INT 22
11349: PUSH
11350: LD_INT 23
11352: PUSH
11353: LD_INT 26
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 101
11369: PUSH
11370: LD_INT 102
11372: PUSH
11373: LD_INT 105
11375: PUSH
11376: LD_INT 106
11378: PUSH
11379: LD_INT 108
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: ST_TO_ADDR
11393: GO 14172
11395: LD_INT 3
11397: DOUBLE
11398: EQUAL
11399: IFTRUE 11403
11401: GO 11479
11403: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11404: LD_ADDR_VAR 0 1
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: LD_INT 4
11414: PUSH
11415: LD_INT 5
11417: PUSH
11418: LD_INT 11
11420: PUSH
11421: LD_INT 12
11423: PUSH
11424: LD_INT 15
11426: PUSH
11427: LD_INT 16
11429: PUSH
11430: LD_INT 22
11432: PUSH
11433: LD_INT 26
11435: PUSH
11436: LD_INT 36
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 101
11453: PUSH
11454: LD_INT 102
11456: PUSH
11457: LD_INT 105
11459: PUSH
11460: LD_INT 106
11462: PUSH
11463: LD_INT 108
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: ST_TO_ADDR
11477: GO 14172
11479: LD_INT 4
11481: DOUBLE
11482: EQUAL
11483: IFTRUE 11487
11485: GO 11571
11487: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11488: LD_ADDR_VAR 0 1
11492: PUSH
11493: LD_INT 2
11495: PUSH
11496: LD_INT 4
11498: PUSH
11499: LD_INT 5
11501: PUSH
11502: LD_INT 8
11504: PUSH
11505: LD_INT 11
11507: PUSH
11508: LD_INT 12
11510: PUSH
11511: LD_INT 15
11513: PUSH
11514: LD_INT 16
11516: PUSH
11517: LD_INT 22
11519: PUSH
11520: LD_INT 23
11522: PUSH
11523: LD_INT 26
11525: PUSH
11526: LD_INT 36
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 101
11545: PUSH
11546: LD_INT 102
11548: PUSH
11549: LD_INT 105
11551: PUSH
11552: LD_INT 106
11554: PUSH
11555: LD_INT 108
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: ST_TO_ADDR
11569: GO 14172
11571: LD_INT 5
11573: DOUBLE
11574: EQUAL
11575: IFTRUE 11579
11577: GO 11679
11579: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11580: LD_ADDR_VAR 0 1
11584: PUSH
11585: LD_INT 2
11587: PUSH
11588: LD_INT 4
11590: PUSH
11591: LD_INT 5
11593: PUSH
11594: LD_INT 6
11596: PUSH
11597: LD_INT 8
11599: PUSH
11600: LD_INT 11
11602: PUSH
11603: LD_INT 12
11605: PUSH
11606: LD_INT 15
11608: PUSH
11609: LD_INT 16
11611: PUSH
11612: LD_INT 22
11614: PUSH
11615: LD_INT 23
11617: PUSH
11618: LD_INT 25
11620: PUSH
11621: LD_INT 26
11623: PUSH
11624: LD_INT 36
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: PUSH
11643: LD_INT 101
11645: PUSH
11646: LD_INT 102
11648: PUSH
11649: LD_INT 105
11651: PUSH
11652: LD_INT 106
11654: PUSH
11655: LD_INT 108
11657: PUSH
11658: LD_INT 109
11660: PUSH
11661: LD_INT 112
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: ST_TO_ADDR
11677: GO 14172
11679: LD_INT 6
11681: DOUBLE
11682: EQUAL
11683: IFTRUE 11687
11685: GO 11807
11687: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11688: LD_ADDR_VAR 0 1
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: LD_INT 4
11698: PUSH
11699: LD_INT 5
11701: PUSH
11702: LD_INT 6
11704: PUSH
11705: LD_INT 8
11707: PUSH
11708: LD_INT 11
11710: PUSH
11711: LD_INT 12
11713: PUSH
11714: LD_INT 15
11716: PUSH
11717: LD_INT 16
11719: PUSH
11720: LD_INT 20
11722: PUSH
11723: LD_INT 21
11725: PUSH
11726: LD_INT 22
11728: PUSH
11729: LD_INT 23
11731: PUSH
11732: LD_INT 25
11734: PUSH
11735: LD_INT 26
11737: PUSH
11738: LD_INT 30
11740: PUSH
11741: LD_INT 31
11743: PUSH
11744: LD_INT 32
11746: PUSH
11747: LD_INT 36
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 101
11773: PUSH
11774: LD_INT 102
11776: PUSH
11777: LD_INT 105
11779: PUSH
11780: LD_INT 106
11782: PUSH
11783: LD_INT 108
11785: PUSH
11786: LD_INT 109
11788: PUSH
11789: LD_INT 112
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: ST_TO_ADDR
11805: GO 14172
11807: LD_INT 7
11809: DOUBLE
11810: EQUAL
11811: IFTRUE 11815
11813: GO 11915
11815: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11816: LD_ADDR_VAR 0 1
11820: PUSH
11821: LD_INT 2
11823: PUSH
11824: LD_INT 4
11826: PUSH
11827: LD_INT 5
11829: PUSH
11830: LD_INT 7
11832: PUSH
11833: LD_INT 11
11835: PUSH
11836: LD_INT 12
11838: PUSH
11839: LD_INT 15
11841: PUSH
11842: LD_INT 16
11844: PUSH
11845: LD_INT 20
11847: PUSH
11848: LD_INT 21
11850: PUSH
11851: LD_INT 22
11853: PUSH
11854: LD_INT 23
11856: PUSH
11857: LD_INT 25
11859: PUSH
11860: LD_INT 26
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 101
11881: PUSH
11882: LD_INT 102
11884: PUSH
11885: LD_INT 103
11887: PUSH
11888: LD_INT 105
11890: PUSH
11891: LD_INT 106
11893: PUSH
11894: LD_INT 108
11896: PUSH
11897: LD_INT 112
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: ST_TO_ADDR
11913: GO 14172
11915: LD_INT 8
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 12051
11923: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11924: LD_ADDR_VAR 0 1
11928: PUSH
11929: LD_INT 2
11931: PUSH
11932: LD_INT 4
11934: PUSH
11935: LD_INT 5
11937: PUSH
11938: LD_INT 6
11940: PUSH
11941: LD_INT 7
11943: PUSH
11944: LD_INT 8
11946: PUSH
11947: LD_INT 11
11949: PUSH
11950: LD_INT 12
11952: PUSH
11953: LD_INT 15
11955: PUSH
11956: LD_INT 16
11958: PUSH
11959: LD_INT 20
11961: PUSH
11962: LD_INT 21
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_INT 23
11970: PUSH
11971: LD_INT 25
11973: PUSH
11974: LD_INT 26
11976: PUSH
11977: LD_INT 30
11979: PUSH
11980: LD_INT 31
11982: PUSH
11983: LD_INT 32
11985: PUSH
11986: LD_INT 36
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 101
12013: PUSH
12014: LD_INT 102
12016: PUSH
12017: LD_INT 103
12019: PUSH
12020: LD_INT 105
12022: PUSH
12023: LD_INT 106
12025: PUSH
12026: LD_INT 108
12028: PUSH
12029: LD_INT 109
12031: PUSH
12032: LD_INT 112
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: ST_TO_ADDR
12049: GO 14172
12051: LD_INT 9
12053: DOUBLE
12054: EQUAL
12055: IFTRUE 12059
12057: GO 12195
12059: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12060: LD_ADDR_VAR 0 1
12064: PUSH
12065: LD_INT 2
12067: PUSH
12068: LD_INT 4
12070: PUSH
12071: LD_INT 5
12073: PUSH
12074: LD_INT 6
12076: PUSH
12077: LD_INT 7
12079: PUSH
12080: LD_INT 8
12082: PUSH
12083: LD_INT 11
12085: PUSH
12086: LD_INT 12
12088: PUSH
12089: LD_INT 15
12091: PUSH
12092: LD_INT 16
12094: PUSH
12095: LD_INT 20
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 22
12103: PUSH
12104: LD_INT 23
12106: PUSH
12107: LD_INT 25
12109: PUSH
12110: LD_INT 26
12112: PUSH
12113: LD_INT 28
12115: PUSH
12116: LD_INT 30
12118: PUSH
12119: LD_INT 31
12121: PUSH
12122: LD_INT 32
12124: PUSH
12125: LD_INT 36
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 101
12153: PUSH
12154: LD_INT 102
12156: PUSH
12157: LD_INT 103
12159: PUSH
12160: LD_INT 105
12162: PUSH
12163: LD_INT 106
12165: PUSH
12166: LD_INT 108
12168: PUSH
12169: LD_INT 109
12171: PUSH
12172: LD_INT 112
12174: PUSH
12175: LD_INT 114
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: ST_TO_ADDR
12193: GO 14172
12195: LD_INT 10
12197: DOUBLE
12198: EQUAL
12199: IFTRUE 12203
12201: GO 12387
12203: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: LD_INT 2
12211: PUSH
12212: LD_INT 4
12214: PUSH
12215: LD_INT 5
12217: PUSH
12218: LD_INT 6
12220: PUSH
12221: LD_INT 7
12223: PUSH
12224: LD_INT 8
12226: PUSH
12227: LD_INT 9
12229: PUSH
12230: LD_INT 10
12232: PUSH
12233: LD_INT 11
12235: PUSH
12236: LD_INT 12
12238: PUSH
12239: LD_INT 13
12241: PUSH
12242: LD_INT 14
12244: PUSH
12245: LD_INT 15
12247: PUSH
12248: LD_INT 16
12250: PUSH
12251: LD_INT 17
12253: PUSH
12254: LD_INT 18
12256: PUSH
12257: LD_INT 19
12259: PUSH
12260: LD_INT 20
12262: PUSH
12263: LD_INT 21
12265: PUSH
12266: LD_INT 22
12268: PUSH
12269: LD_INT 23
12271: PUSH
12272: LD_INT 24
12274: PUSH
12275: LD_INT 25
12277: PUSH
12278: LD_INT 26
12280: PUSH
12281: LD_INT 28
12283: PUSH
12284: LD_INT 30
12286: PUSH
12287: LD_INT 31
12289: PUSH
12290: LD_INT 32
12292: PUSH
12293: LD_INT 36
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 101
12329: PUSH
12330: LD_INT 102
12332: PUSH
12333: LD_INT 103
12335: PUSH
12336: LD_INT 104
12338: PUSH
12339: LD_INT 105
12341: PUSH
12342: LD_INT 106
12344: PUSH
12345: LD_INT 107
12347: PUSH
12348: LD_INT 108
12350: PUSH
12351: LD_INT 109
12353: PUSH
12354: LD_INT 110
12356: PUSH
12357: LD_INT 111
12359: PUSH
12360: LD_INT 112
12362: PUSH
12363: LD_INT 114
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: ST_TO_ADDR
12385: GO 14172
12387: LD_INT 11
12389: DOUBLE
12390: EQUAL
12391: IFTRUE 12395
12393: GO 12587
12395: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12396: LD_ADDR_VAR 0 1
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: LD_INT 3
12406: PUSH
12407: LD_INT 4
12409: PUSH
12410: LD_INT 5
12412: PUSH
12413: LD_INT 6
12415: PUSH
12416: LD_INT 7
12418: PUSH
12419: LD_INT 8
12421: PUSH
12422: LD_INT 9
12424: PUSH
12425: LD_INT 10
12427: PUSH
12428: LD_INT 11
12430: PUSH
12431: LD_INT 12
12433: PUSH
12434: LD_INT 13
12436: PUSH
12437: LD_INT 14
12439: PUSH
12440: LD_INT 15
12442: PUSH
12443: LD_INT 16
12445: PUSH
12446: LD_INT 17
12448: PUSH
12449: LD_INT 18
12451: PUSH
12452: LD_INT 19
12454: PUSH
12455: LD_INT 20
12457: PUSH
12458: LD_INT 21
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_INT 23
12466: PUSH
12467: LD_INT 24
12469: PUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 26
12475: PUSH
12476: LD_INT 28
12478: PUSH
12479: LD_INT 30
12481: PUSH
12482: LD_INT 31
12484: PUSH
12485: LD_INT 32
12487: PUSH
12488: LD_INT 34
12490: PUSH
12491: LD_INT 36
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 101
12529: PUSH
12530: LD_INT 102
12532: PUSH
12533: LD_INT 103
12535: PUSH
12536: LD_INT 104
12538: PUSH
12539: LD_INT 105
12541: PUSH
12542: LD_INT 106
12544: PUSH
12545: LD_INT 107
12547: PUSH
12548: LD_INT 108
12550: PUSH
12551: LD_INT 109
12553: PUSH
12554: LD_INT 110
12556: PUSH
12557: LD_INT 111
12559: PUSH
12560: LD_INT 112
12562: PUSH
12563: LD_INT 114
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: ST_TO_ADDR
12585: GO 14172
12587: LD_INT 12
12589: DOUBLE
12590: EQUAL
12591: IFTRUE 12595
12593: GO 12803
12595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12596: LD_ADDR_VAR 0 1
12600: PUSH
12601: LD_INT 1
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: LD_INT 3
12609: PUSH
12610: LD_INT 4
12612: PUSH
12613: LD_INT 5
12615: PUSH
12616: LD_INT 6
12618: PUSH
12619: LD_INT 7
12621: PUSH
12622: LD_INT 8
12624: PUSH
12625: LD_INT 9
12627: PUSH
12628: LD_INT 10
12630: PUSH
12631: LD_INT 11
12633: PUSH
12634: LD_INT 12
12636: PUSH
12637: LD_INT 13
12639: PUSH
12640: LD_INT 14
12642: PUSH
12643: LD_INT 15
12645: PUSH
12646: LD_INT 16
12648: PUSH
12649: LD_INT 17
12651: PUSH
12652: LD_INT 18
12654: PUSH
12655: LD_INT 19
12657: PUSH
12658: LD_INT 20
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 22
12666: PUSH
12667: LD_INT 23
12669: PUSH
12670: LD_INT 24
12672: PUSH
12673: LD_INT 25
12675: PUSH
12676: LD_INT 26
12678: PUSH
12679: LD_INT 27
12681: PUSH
12682: LD_INT 28
12684: PUSH
12685: LD_INT 30
12687: PUSH
12688: LD_INT 31
12690: PUSH
12691: LD_INT 32
12693: PUSH
12694: LD_INT 33
12696: PUSH
12697: LD_INT 34
12699: PUSH
12700: LD_INT 36
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 101
12741: PUSH
12742: LD_INT 102
12744: PUSH
12745: LD_INT 103
12747: PUSH
12748: LD_INT 104
12750: PUSH
12751: LD_INT 105
12753: PUSH
12754: LD_INT 106
12756: PUSH
12757: LD_INT 107
12759: PUSH
12760: LD_INT 108
12762: PUSH
12763: LD_INT 109
12765: PUSH
12766: LD_INT 110
12768: PUSH
12769: LD_INT 111
12771: PUSH
12772: LD_INT 112
12774: PUSH
12775: LD_INT 113
12777: PUSH
12778: LD_INT 114
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: ST_TO_ADDR
12801: GO 14172
12803: LD_INT 13
12805: DOUBLE
12806: EQUAL
12807: IFTRUE 12811
12809: GO 13007
12811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12812: LD_ADDR_VAR 0 1
12816: PUSH
12817: LD_INT 1
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: LD_INT 3
12825: PUSH
12826: LD_INT 4
12828: PUSH
12829: LD_INT 5
12831: PUSH
12832: LD_INT 8
12834: PUSH
12835: LD_INT 9
12837: PUSH
12838: LD_INT 10
12840: PUSH
12841: LD_INT 11
12843: PUSH
12844: LD_INT 12
12846: PUSH
12847: LD_INT 14
12849: PUSH
12850: LD_INT 15
12852: PUSH
12853: LD_INT 16
12855: PUSH
12856: LD_INT 17
12858: PUSH
12859: LD_INT 18
12861: PUSH
12862: LD_INT 19
12864: PUSH
12865: LD_INT 20
12867: PUSH
12868: LD_INT 21
12870: PUSH
12871: LD_INT 22
12873: PUSH
12874: LD_INT 23
12876: PUSH
12877: LD_INT 24
12879: PUSH
12880: LD_INT 25
12882: PUSH
12883: LD_INT 26
12885: PUSH
12886: LD_INT 27
12888: PUSH
12889: LD_INT 28
12891: PUSH
12892: LD_INT 30
12894: PUSH
12895: LD_INT 31
12897: PUSH
12898: LD_INT 32
12900: PUSH
12901: LD_INT 33
12903: PUSH
12904: LD_INT 34
12906: PUSH
12907: LD_INT 36
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 101
12945: PUSH
12946: LD_INT 102
12948: PUSH
12949: LD_INT 103
12951: PUSH
12952: LD_INT 104
12954: PUSH
12955: LD_INT 105
12957: PUSH
12958: LD_INT 106
12960: PUSH
12961: LD_INT 107
12963: PUSH
12964: LD_INT 108
12966: PUSH
12967: LD_INT 109
12969: PUSH
12970: LD_INT 110
12972: PUSH
12973: LD_INT 111
12975: PUSH
12976: LD_INT 112
12978: PUSH
12979: LD_INT 113
12981: PUSH
12982: LD_INT 114
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: ST_TO_ADDR
13005: GO 14172
13007: LD_INT 14
13009: DOUBLE
13010: EQUAL
13011: IFTRUE 13015
13013: GO 13227
13015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13016: LD_ADDR_VAR 0 1
13020: PUSH
13021: LD_INT 1
13023: PUSH
13024: LD_INT 2
13026: PUSH
13027: LD_INT 3
13029: PUSH
13030: LD_INT 4
13032: PUSH
13033: LD_INT 5
13035: PUSH
13036: LD_INT 6
13038: PUSH
13039: LD_INT 7
13041: PUSH
13042: LD_INT 8
13044: PUSH
13045: LD_INT 9
13047: PUSH
13048: LD_INT 10
13050: PUSH
13051: LD_INT 11
13053: PUSH
13054: LD_INT 12
13056: PUSH
13057: LD_INT 13
13059: PUSH
13060: LD_INT 14
13062: PUSH
13063: LD_INT 15
13065: PUSH
13066: LD_INT 16
13068: PUSH
13069: LD_INT 17
13071: PUSH
13072: LD_INT 18
13074: PUSH
13075: LD_INT 19
13077: PUSH
13078: LD_INT 20
13080: PUSH
13081: LD_INT 21
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_INT 23
13089: PUSH
13090: LD_INT 24
13092: PUSH
13093: LD_INT 25
13095: PUSH
13096: LD_INT 26
13098: PUSH
13099: LD_INT 27
13101: PUSH
13102: LD_INT 28
13104: PUSH
13105: LD_INT 29
13107: PUSH
13108: LD_INT 30
13110: PUSH
13111: LD_INT 31
13113: PUSH
13114: LD_INT 32
13116: PUSH
13117: LD_INT 33
13119: PUSH
13120: LD_INT 34
13122: PUSH
13123: LD_INT 36
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 101
13165: PUSH
13166: LD_INT 102
13168: PUSH
13169: LD_INT 103
13171: PUSH
13172: LD_INT 104
13174: PUSH
13175: LD_INT 105
13177: PUSH
13178: LD_INT 106
13180: PUSH
13181: LD_INT 107
13183: PUSH
13184: LD_INT 108
13186: PUSH
13187: LD_INT 109
13189: PUSH
13190: LD_INT 110
13192: PUSH
13193: LD_INT 111
13195: PUSH
13196: LD_INT 112
13198: PUSH
13199: LD_INT 113
13201: PUSH
13202: LD_INT 114
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: ST_TO_ADDR
13225: GO 14172
13227: LD_INT 15
13229: DOUBLE
13230: EQUAL
13231: IFTRUE 13235
13233: GO 13447
13235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13236: LD_ADDR_VAR 0 1
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: LD_INT 2
13246: PUSH
13247: LD_INT 3
13249: PUSH
13250: LD_INT 4
13252: PUSH
13253: LD_INT 5
13255: PUSH
13256: LD_INT 6
13258: PUSH
13259: LD_INT 7
13261: PUSH
13262: LD_INT 8
13264: PUSH
13265: LD_INT 9
13267: PUSH
13268: LD_INT 10
13270: PUSH
13271: LD_INT 11
13273: PUSH
13274: LD_INT 12
13276: PUSH
13277: LD_INT 13
13279: PUSH
13280: LD_INT 14
13282: PUSH
13283: LD_INT 15
13285: PUSH
13286: LD_INT 16
13288: PUSH
13289: LD_INT 17
13291: PUSH
13292: LD_INT 18
13294: PUSH
13295: LD_INT 19
13297: PUSH
13298: LD_INT 20
13300: PUSH
13301: LD_INT 21
13303: PUSH
13304: LD_INT 22
13306: PUSH
13307: LD_INT 23
13309: PUSH
13310: LD_INT 24
13312: PUSH
13313: LD_INT 25
13315: PUSH
13316: LD_INT 26
13318: PUSH
13319: LD_INT 27
13321: PUSH
13322: LD_INT 28
13324: PUSH
13325: LD_INT 29
13327: PUSH
13328: LD_INT 30
13330: PUSH
13331: LD_INT 31
13333: PUSH
13334: LD_INT 32
13336: PUSH
13337: LD_INT 33
13339: PUSH
13340: LD_INT 34
13342: PUSH
13343: LD_INT 36
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 101
13385: PUSH
13386: LD_INT 102
13388: PUSH
13389: LD_INT 103
13391: PUSH
13392: LD_INT 104
13394: PUSH
13395: LD_INT 105
13397: PUSH
13398: LD_INT 106
13400: PUSH
13401: LD_INT 107
13403: PUSH
13404: LD_INT 108
13406: PUSH
13407: LD_INT 109
13409: PUSH
13410: LD_INT 110
13412: PUSH
13413: LD_INT 111
13415: PUSH
13416: LD_INT 112
13418: PUSH
13419: LD_INT 113
13421: PUSH
13422: LD_INT 114
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: ST_TO_ADDR
13445: GO 14172
13447: LD_INT 16
13449: DOUBLE
13450: EQUAL
13451: IFTRUE 13455
13453: GO 13579
13455: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13456: LD_ADDR_VAR 0 1
13460: PUSH
13461: LD_INT 2
13463: PUSH
13464: LD_INT 4
13466: PUSH
13467: LD_INT 5
13469: PUSH
13470: LD_INT 7
13472: PUSH
13473: LD_INT 11
13475: PUSH
13476: LD_INT 12
13478: PUSH
13479: LD_INT 15
13481: PUSH
13482: LD_INT 16
13484: PUSH
13485: LD_INT 20
13487: PUSH
13488: LD_INT 21
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_INT 23
13496: PUSH
13497: LD_INT 25
13499: PUSH
13500: LD_INT 26
13502: PUSH
13503: LD_INT 30
13505: PUSH
13506: LD_INT 31
13508: PUSH
13509: LD_INT 32
13511: PUSH
13512: LD_INT 33
13514: PUSH
13515: LD_INT 34
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: PUSH
13539: LD_INT 101
13541: PUSH
13542: LD_INT 102
13544: PUSH
13545: LD_INT 103
13547: PUSH
13548: LD_INT 106
13550: PUSH
13551: LD_INT 108
13553: PUSH
13554: LD_INT 112
13556: PUSH
13557: LD_INT 113
13559: PUSH
13560: LD_INT 114
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: ST_TO_ADDR
13577: GO 14172
13579: LD_INT 17
13581: DOUBLE
13582: EQUAL
13583: IFTRUE 13587
13585: GO 13799
13587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13588: LD_ADDR_VAR 0 1
13592: PUSH
13593: LD_INT 1
13595: PUSH
13596: LD_INT 2
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: LD_INT 4
13604: PUSH
13605: LD_INT 5
13607: PUSH
13608: LD_INT 6
13610: PUSH
13611: LD_INT 7
13613: PUSH
13614: LD_INT 8
13616: PUSH
13617: LD_INT 9
13619: PUSH
13620: LD_INT 10
13622: PUSH
13623: LD_INT 11
13625: PUSH
13626: LD_INT 12
13628: PUSH
13629: LD_INT 13
13631: PUSH
13632: LD_INT 14
13634: PUSH
13635: LD_INT 15
13637: PUSH
13638: LD_INT 16
13640: PUSH
13641: LD_INT 17
13643: PUSH
13644: LD_INT 18
13646: PUSH
13647: LD_INT 19
13649: PUSH
13650: LD_INT 20
13652: PUSH
13653: LD_INT 21
13655: PUSH
13656: LD_INT 22
13658: PUSH
13659: LD_INT 23
13661: PUSH
13662: LD_INT 24
13664: PUSH
13665: LD_INT 25
13667: PUSH
13668: LD_INT 26
13670: PUSH
13671: LD_INT 27
13673: PUSH
13674: LD_INT 28
13676: PUSH
13677: LD_INT 29
13679: PUSH
13680: LD_INT 30
13682: PUSH
13683: LD_INT 31
13685: PUSH
13686: LD_INT 32
13688: PUSH
13689: LD_INT 33
13691: PUSH
13692: LD_INT 34
13694: PUSH
13695: LD_INT 36
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 101
13737: PUSH
13738: LD_INT 102
13740: PUSH
13741: LD_INT 103
13743: PUSH
13744: LD_INT 104
13746: PUSH
13747: LD_INT 105
13749: PUSH
13750: LD_INT 106
13752: PUSH
13753: LD_INT 107
13755: PUSH
13756: LD_INT 108
13758: PUSH
13759: LD_INT 109
13761: PUSH
13762: LD_INT 110
13764: PUSH
13765: LD_INT 111
13767: PUSH
13768: LD_INT 112
13770: PUSH
13771: LD_INT 113
13773: PUSH
13774: LD_INT 114
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: ST_TO_ADDR
13797: GO 14172
13799: LD_INT 18
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13943
13807: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13808: LD_ADDR_VAR 0 1
13812: PUSH
13813: LD_INT 2
13815: PUSH
13816: LD_INT 4
13818: PUSH
13819: LD_INT 5
13821: PUSH
13822: LD_INT 7
13824: PUSH
13825: LD_INT 11
13827: PUSH
13828: LD_INT 12
13830: PUSH
13831: LD_INT 15
13833: PUSH
13834: LD_INT 16
13836: PUSH
13837: LD_INT 20
13839: PUSH
13840: LD_INT 21
13842: PUSH
13843: LD_INT 22
13845: PUSH
13846: LD_INT 23
13848: PUSH
13849: LD_INT 25
13851: PUSH
13852: LD_INT 26
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: LD_INT 31
13860: PUSH
13861: LD_INT 32
13863: PUSH
13864: LD_INT 33
13866: PUSH
13867: LD_INT 34
13869: PUSH
13870: LD_INT 35
13872: PUSH
13873: LD_INT 36
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 101
13901: PUSH
13902: LD_INT 102
13904: PUSH
13905: LD_INT 103
13907: PUSH
13908: LD_INT 106
13910: PUSH
13911: LD_INT 108
13913: PUSH
13914: LD_INT 112
13916: PUSH
13917: LD_INT 113
13919: PUSH
13920: LD_INT 114
13922: PUSH
13923: LD_INT 115
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: ST_TO_ADDR
13941: GO 14172
13943: LD_INT 19
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 14171
13951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13952: LD_ADDR_VAR 0 1
13956: PUSH
13957: LD_INT 1
13959: PUSH
13960: LD_INT 2
13962: PUSH
13963: LD_INT 3
13965: PUSH
13966: LD_INT 4
13968: PUSH
13969: LD_INT 5
13971: PUSH
13972: LD_INT 6
13974: PUSH
13975: LD_INT 7
13977: PUSH
13978: LD_INT 8
13980: PUSH
13981: LD_INT 9
13983: PUSH
13984: LD_INT 10
13986: PUSH
13987: LD_INT 11
13989: PUSH
13990: LD_INT 12
13992: PUSH
13993: LD_INT 13
13995: PUSH
13996: LD_INT 14
13998: PUSH
13999: LD_INT 15
14001: PUSH
14002: LD_INT 16
14004: PUSH
14005: LD_INT 17
14007: PUSH
14008: LD_INT 18
14010: PUSH
14011: LD_INT 19
14013: PUSH
14014: LD_INT 20
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 22
14022: PUSH
14023: LD_INT 23
14025: PUSH
14026: LD_INT 24
14028: PUSH
14029: LD_INT 25
14031: PUSH
14032: LD_INT 26
14034: PUSH
14035: LD_INT 27
14037: PUSH
14038: LD_INT 28
14040: PUSH
14041: LD_INT 29
14043: PUSH
14044: LD_INT 30
14046: PUSH
14047: LD_INT 31
14049: PUSH
14050: LD_INT 32
14052: PUSH
14053: LD_INT 33
14055: PUSH
14056: LD_INT 34
14058: PUSH
14059: LD_INT 35
14061: PUSH
14062: LD_INT 36
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 101
14105: PUSH
14106: LD_INT 102
14108: PUSH
14109: LD_INT 103
14111: PUSH
14112: LD_INT 104
14114: PUSH
14115: LD_INT 105
14117: PUSH
14118: LD_INT 106
14120: PUSH
14121: LD_INT 107
14123: PUSH
14124: LD_INT 108
14126: PUSH
14127: LD_INT 109
14129: PUSH
14130: LD_INT 110
14132: PUSH
14133: LD_INT 111
14135: PUSH
14136: LD_INT 112
14138: PUSH
14139: LD_INT 113
14141: PUSH
14142: LD_INT 114
14144: PUSH
14145: LD_INT 115
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: ST_TO_ADDR
14169: GO 14172
14171: POP
// end else
14172: GO 14391
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14174: LD_ADDR_VAR 0 1
14178: PUSH
14179: LD_INT 1
14181: PUSH
14182: LD_INT 2
14184: PUSH
14185: LD_INT 3
14187: PUSH
14188: LD_INT 4
14190: PUSH
14191: LD_INT 5
14193: PUSH
14194: LD_INT 6
14196: PUSH
14197: LD_INT 7
14199: PUSH
14200: LD_INT 8
14202: PUSH
14203: LD_INT 9
14205: PUSH
14206: LD_INT 10
14208: PUSH
14209: LD_INT 11
14211: PUSH
14212: LD_INT 12
14214: PUSH
14215: LD_INT 13
14217: PUSH
14218: LD_INT 14
14220: PUSH
14221: LD_INT 15
14223: PUSH
14224: LD_INT 16
14226: PUSH
14227: LD_INT 17
14229: PUSH
14230: LD_INT 18
14232: PUSH
14233: LD_INT 19
14235: PUSH
14236: LD_INT 20
14238: PUSH
14239: LD_INT 21
14241: PUSH
14242: LD_INT 22
14244: PUSH
14245: LD_INT 23
14247: PUSH
14248: LD_INT 24
14250: PUSH
14251: LD_INT 25
14253: PUSH
14254: LD_INT 26
14256: PUSH
14257: LD_INT 27
14259: PUSH
14260: LD_INT 28
14262: PUSH
14263: LD_INT 29
14265: PUSH
14266: LD_INT 30
14268: PUSH
14269: LD_INT 31
14271: PUSH
14272: LD_INT 32
14274: PUSH
14275: LD_INT 33
14277: PUSH
14278: LD_INT 34
14280: PUSH
14281: LD_INT 35
14283: PUSH
14284: LD_INT 36
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 101
14327: PUSH
14328: LD_INT 102
14330: PUSH
14331: LD_INT 103
14333: PUSH
14334: LD_INT 104
14336: PUSH
14337: LD_INT 105
14339: PUSH
14340: LD_INT 106
14342: PUSH
14343: LD_INT 107
14345: PUSH
14346: LD_INT 108
14348: PUSH
14349: LD_INT 109
14351: PUSH
14352: LD_INT 110
14354: PUSH
14355: LD_INT 111
14357: PUSH
14358: LD_INT 112
14360: PUSH
14361: LD_INT 113
14363: PUSH
14364: LD_INT 114
14366: PUSH
14367: LD_INT 115
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: ST_TO_ADDR
// if result then
14391: LD_VAR 0 1
14395: IFFALSE 14684
// begin normal :=  ;
14397: LD_ADDR_VAR 0 3
14401: PUSH
14402: LD_STRING 
14404: ST_TO_ADDR
// hardcore :=  ;
14405: LD_ADDR_VAR 0 4
14409: PUSH
14410: LD_STRING 
14412: ST_TO_ADDR
// for i = 1 to normalCounter do
14413: LD_ADDR_VAR 0 5
14417: PUSH
14418: DOUBLE
14419: LD_INT 1
14421: DEC
14422: ST_TO_ADDR
14423: LD_EXP 44
14427: PUSH
14428: FOR_TO
14429: IFFALSE 14530
// begin tmp := 0 ;
14431: LD_ADDR_VAR 0 2
14435: PUSH
14436: LD_STRING 0
14438: ST_TO_ADDR
// if result [ 1 ] then
14439: LD_VAR 0 1
14443: PUSH
14444: LD_INT 1
14446: ARRAY
14447: IFFALSE 14512
// if result [ 1 ] [ 1 ] = i then
14449: LD_VAR 0 1
14453: PUSH
14454: LD_INT 1
14456: ARRAY
14457: PUSH
14458: LD_INT 1
14460: ARRAY
14461: PUSH
14462: LD_VAR 0 5
14466: EQUAL
14467: IFFALSE 14512
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14469: LD_ADDR_VAR 0 1
14473: PUSH
14474: LD_VAR 0 1
14478: PPUSH
14479: LD_INT 1
14481: PPUSH
14482: LD_VAR 0 1
14486: PUSH
14487: LD_INT 1
14489: ARRAY
14490: PPUSH
14491: LD_INT 1
14493: PPUSH
14494: CALL_OW 3
14498: PPUSH
14499: CALL_OW 1
14503: ST_TO_ADDR
// tmp := 1 ;
14504: LD_ADDR_VAR 0 2
14508: PUSH
14509: LD_STRING 1
14511: ST_TO_ADDR
// end ; normal := normal & tmp ;
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: LD_VAR 0 3
14521: PUSH
14522: LD_VAR 0 2
14526: STR
14527: ST_TO_ADDR
// end ;
14528: GO 14428
14530: POP
14531: POP
// for i = 1 to hardcoreCounter do
14532: LD_ADDR_VAR 0 5
14536: PUSH
14537: DOUBLE
14538: LD_INT 1
14540: DEC
14541: ST_TO_ADDR
14542: LD_EXP 45
14546: PUSH
14547: FOR_TO
14548: IFFALSE 14653
// begin tmp := 0 ;
14550: LD_ADDR_VAR 0 2
14554: PUSH
14555: LD_STRING 0
14557: ST_TO_ADDR
// if result [ 2 ] then
14558: LD_VAR 0 1
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: IFFALSE 14635
// if result [ 2 ] [ 1 ] = 100 + i then
14568: LD_VAR 0 1
14572: PUSH
14573: LD_INT 2
14575: ARRAY
14576: PUSH
14577: LD_INT 1
14579: ARRAY
14580: PUSH
14581: LD_INT 100
14583: PUSH
14584: LD_VAR 0 5
14588: PLUS
14589: EQUAL
14590: IFFALSE 14635
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14592: LD_ADDR_VAR 0 1
14596: PUSH
14597: LD_VAR 0 1
14601: PPUSH
14602: LD_INT 2
14604: PPUSH
14605: LD_VAR 0 1
14609: PUSH
14610: LD_INT 2
14612: ARRAY
14613: PPUSH
14614: LD_INT 1
14616: PPUSH
14617: CALL_OW 3
14621: PPUSH
14622: CALL_OW 1
14626: ST_TO_ADDR
// tmp := 1 ;
14627: LD_ADDR_VAR 0 2
14631: PUSH
14632: LD_STRING 1
14634: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14635: LD_ADDR_VAR 0 4
14639: PUSH
14640: LD_VAR 0 4
14644: PUSH
14645: LD_VAR 0 2
14649: STR
14650: ST_TO_ADDR
// end ;
14651: GO 14547
14653: POP
14654: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14655: LD_STRING getStreamItemsFromMission("
14657: PUSH
14658: LD_VAR 0 3
14662: STR
14663: PUSH
14664: LD_STRING ","
14666: STR
14667: PUSH
14668: LD_VAR 0 4
14672: STR
14673: PUSH
14674: LD_STRING ")
14676: STR
14677: PPUSH
14678: CALL_OW 559
// end else
14682: GO 14691
// ToLua ( getStreamItemsFromMission("","") ) ;
14684: LD_STRING getStreamItemsFromMission("","")
14686: PPUSH
14687: CALL_OW 559
// end ;
14691: LD_VAR 0 1
14695: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14696: LD_EXP 43
14700: PUSH
14701: LD_EXP 48
14705: AND
14706: IFFALSE 14830
14708: GO 14710
14710: DISABLE
14711: LD_INT 0
14713: PPUSH
14714: PPUSH
// begin enable ;
14715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14716: LD_ADDR_VAR 0 2
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_OWVAR 2
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: LD_INT 34
14738: PUSH
14739: LD_INT 7
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 34
14748: PUSH
14749: LD_INT 45
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 34
14758: PUSH
14759: LD_INT 28
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 34
14768: PUSH
14769: LD_INT 47
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PPUSH
14787: CALL_OW 69
14791: ST_TO_ADDR
// if not tmp then
14792: LD_VAR 0 2
14796: NOT
14797: IFFALSE 14801
// exit ;
14799: GO 14830
// for i in tmp do
14801: LD_ADDR_VAR 0 1
14805: PUSH
14806: LD_VAR 0 2
14810: PUSH
14811: FOR_IN
14812: IFFALSE 14828
// begin SetLives ( i , 0 ) ;
14814: LD_VAR 0 1
14818: PPUSH
14819: LD_INT 0
14821: PPUSH
14822: CALL_OW 234
// end ;
14826: GO 14811
14828: POP
14829: POP
// end ;
14830: PPOPN 2
14832: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14833: LD_EXP 43
14837: PUSH
14838: LD_EXP 49
14842: AND
14843: IFFALSE 14927
14845: GO 14847
14847: DISABLE
14848: LD_INT 0
14850: PPUSH
14851: PPUSH
// begin enable ;
14852: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14853: LD_ADDR_VAR 0 2
14857: PUSH
14858: LD_INT 22
14860: PUSH
14861: LD_OWVAR 2
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 32
14872: PUSH
14873: LD_INT 3
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: ST_TO_ADDR
// if not tmp then
14889: LD_VAR 0 2
14893: NOT
14894: IFFALSE 14898
// exit ;
14896: GO 14927
// for i in tmp do
14898: LD_ADDR_VAR 0 1
14902: PUSH
14903: LD_VAR 0 2
14907: PUSH
14908: FOR_IN
14909: IFFALSE 14925
// begin SetLives ( i , 0 ) ;
14911: LD_VAR 0 1
14915: PPUSH
14916: LD_INT 0
14918: PPUSH
14919: CALL_OW 234
// end ;
14923: GO 14908
14925: POP
14926: POP
// end ;
14927: PPOPN 2
14929: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14930: LD_EXP 43
14934: PUSH
14935: LD_EXP 46
14939: AND
14940: IFFALSE 15033
14942: GO 14944
14944: DISABLE
14945: LD_INT 0
14947: PPUSH
// begin enable ;
14948: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14949: LD_ADDR_VAR 0 1
14953: PUSH
14954: LD_INT 22
14956: PUSH
14957: LD_OWVAR 2
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 2
14968: PUSH
14969: LD_INT 25
14971: PUSH
14972: LD_INT 5
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 25
14981: PUSH
14982: LD_INT 9
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 25
14991: PUSH
14992: LD_INT 8
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: PUSH
15014: FOR_IN
15015: IFFALSE 15031
// begin SetClass ( i , 1 ) ;
15017: LD_VAR 0 1
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: CALL_OW 336
// end ;
15029: GO 15014
15031: POP
15032: POP
// end ;
15033: PPOPN 1
15035: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15036: LD_EXP 43
15040: PUSH
15041: LD_EXP 47
15045: AND
15046: PUSH
15047: LD_OWVAR 65
15051: PUSH
15052: LD_INT 7
15054: LESS
15055: AND
15056: IFFALSE 15070
15058: GO 15060
15060: DISABLE
// begin enable ;
15061: ENABLE
// game_speed := 7 ;
15062: LD_ADDR_OWVAR 65
15066: PUSH
15067: LD_INT 7
15069: ST_TO_ADDR
// end ;
15070: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15071: LD_EXP 43
15075: PUSH
15076: LD_EXP 50
15080: AND
15081: IFFALSE 15283
15083: GO 15085
15085: DISABLE
15086: LD_INT 0
15088: PPUSH
15089: PPUSH
15090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15091: LD_ADDR_VAR 0 3
15095: PUSH
15096: LD_INT 81
15098: PUSH
15099: LD_OWVAR 2
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 21
15110: PUSH
15111: LD_INT 1
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 69
15126: ST_TO_ADDR
// if not tmp then
15127: LD_VAR 0 3
15131: NOT
15132: IFFALSE 15136
// exit ;
15134: GO 15283
// if tmp > 5 then
15136: LD_VAR 0 3
15140: PUSH
15141: LD_INT 5
15143: GREATER
15144: IFFALSE 15156
// k := 5 else
15146: LD_ADDR_VAR 0 2
15150: PUSH
15151: LD_INT 5
15153: ST_TO_ADDR
15154: GO 15166
// k := tmp ;
15156: LD_ADDR_VAR 0 2
15160: PUSH
15161: LD_VAR 0 3
15165: ST_TO_ADDR
// for i := 1 to k do
15166: LD_ADDR_VAR 0 1
15170: PUSH
15171: DOUBLE
15172: LD_INT 1
15174: DEC
15175: ST_TO_ADDR
15176: LD_VAR 0 2
15180: PUSH
15181: FOR_TO
15182: IFFALSE 15281
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15184: LD_VAR 0 3
15188: PUSH
15189: LD_VAR 0 1
15193: ARRAY
15194: PPUSH
15195: LD_VAR 0 1
15199: PUSH
15200: LD_INT 4
15202: MOD
15203: PUSH
15204: LD_INT 1
15206: PLUS
15207: PPUSH
15208: CALL_OW 259
15212: PUSH
15213: LD_INT 10
15215: LESS
15216: IFFALSE 15279
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15218: LD_VAR 0 3
15222: PUSH
15223: LD_VAR 0 1
15227: ARRAY
15228: PPUSH
15229: LD_VAR 0 1
15233: PUSH
15234: LD_INT 4
15236: MOD
15237: PUSH
15238: LD_INT 1
15240: PLUS
15241: PPUSH
15242: LD_VAR 0 3
15246: PUSH
15247: LD_VAR 0 1
15251: ARRAY
15252: PPUSH
15253: LD_VAR 0 1
15257: PUSH
15258: LD_INT 4
15260: MOD
15261: PUSH
15262: LD_INT 1
15264: PLUS
15265: PPUSH
15266: CALL_OW 259
15270: PUSH
15271: LD_INT 1
15273: PLUS
15274: PPUSH
15275: CALL_OW 237
15279: GO 15181
15281: POP
15282: POP
// end ;
15283: PPOPN 3
15285: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15286: LD_EXP 43
15290: PUSH
15291: LD_EXP 51
15295: AND
15296: IFFALSE 15316
15298: GO 15300
15300: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15301: LD_INT 4
15303: PPUSH
15304: LD_OWVAR 2
15308: PPUSH
15309: LD_INT 0
15311: PPUSH
15312: CALL_OW 324
15316: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15317: LD_EXP 43
15321: PUSH
15322: LD_EXP 80
15326: AND
15327: IFFALSE 15347
15329: GO 15331
15331: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15332: LD_INT 19
15334: PPUSH
15335: LD_OWVAR 2
15339: PPUSH
15340: LD_INT 0
15342: PPUSH
15343: CALL_OW 324
15347: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15348: LD_EXP 43
15352: PUSH
15353: LD_EXP 52
15357: AND
15358: IFFALSE 15460
15360: GO 15362
15362: DISABLE
15363: LD_INT 0
15365: PPUSH
15366: PPUSH
// begin enable ;
15367: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: LD_INT 22
15375: PUSH
15376: LD_OWVAR 2
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 2
15387: PUSH
15388: LD_INT 34
15390: PUSH
15391: LD_INT 11
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 34
15400: PUSH
15401: LD_INT 30
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PPUSH
15417: CALL_OW 69
15421: ST_TO_ADDR
// if not tmp then
15422: LD_VAR 0 2
15426: NOT
15427: IFFALSE 15431
// exit ;
15429: GO 15460
// for i in tmp do
15431: LD_ADDR_VAR 0 1
15435: PUSH
15436: LD_VAR 0 2
15440: PUSH
15441: FOR_IN
15442: IFFALSE 15458
// begin SetLives ( i , 0 ) ;
15444: LD_VAR 0 1
15448: PPUSH
15449: LD_INT 0
15451: PPUSH
15452: CALL_OW 234
// end ;
15456: GO 15441
15458: POP
15459: POP
// end ;
15460: PPOPN 2
15462: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15463: LD_EXP 43
15467: PUSH
15468: LD_EXP 53
15472: AND
15473: IFFALSE 15493
15475: GO 15477
15477: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15478: LD_INT 32
15480: PPUSH
15481: LD_OWVAR 2
15485: PPUSH
15486: LD_INT 0
15488: PPUSH
15489: CALL_OW 324
15493: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15494: LD_EXP 43
15498: PUSH
15499: LD_EXP 54
15503: AND
15504: IFFALSE 15685
15506: GO 15508
15508: DISABLE
15509: LD_INT 0
15511: PPUSH
15512: PPUSH
15513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15514: LD_ADDR_VAR 0 2
15518: PUSH
15519: LD_INT 22
15521: PUSH
15522: LD_OWVAR 2
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 33
15533: PUSH
15534: LD_INT 3
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PPUSH
15545: CALL_OW 69
15549: ST_TO_ADDR
// if not tmp then
15550: LD_VAR 0 2
15554: NOT
15555: IFFALSE 15559
// exit ;
15557: GO 15685
// side := 0 ;
15559: LD_ADDR_VAR 0 3
15563: PUSH
15564: LD_INT 0
15566: ST_TO_ADDR
// for i := 1 to 8 do
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: DOUBLE
15573: LD_INT 1
15575: DEC
15576: ST_TO_ADDR
15577: LD_INT 8
15579: PUSH
15580: FOR_TO
15581: IFFALSE 15629
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15583: LD_OWVAR 2
15587: PUSH
15588: LD_VAR 0 1
15592: NONEQUAL
15593: PUSH
15594: LD_OWVAR 2
15598: PPUSH
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 81
15608: PUSH
15609: LD_INT 2
15611: EQUAL
15612: AND
15613: IFFALSE 15627
// begin side := i ;
15615: LD_ADDR_VAR 0 3
15619: PUSH
15620: LD_VAR 0 1
15624: ST_TO_ADDR
// break ;
15625: GO 15629
// end ;
15627: GO 15580
15629: POP
15630: POP
// if not side then
15631: LD_VAR 0 3
15635: NOT
15636: IFFALSE 15640
// exit ;
15638: GO 15685
// for i := 1 to tmp do
15640: LD_ADDR_VAR 0 1
15644: PUSH
15645: DOUBLE
15646: LD_INT 1
15648: DEC
15649: ST_TO_ADDR
15650: LD_VAR 0 2
15654: PUSH
15655: FOR_TO
15656: IFFALSE 15683
// if Prob ( 60 ) then
15658: LD_INT 60
15660: PPUSH
15661: CALL_OW 13
15665: IFFALSE 15681
// SetSide ( i , side ) ;
15667: LD_VAR 0 1
15671: PPUSH
15672: LD_VAR 0 3
15676: PPUSH
15677: CALL_OW 235
15681: GO 15655
15683: POP
15684: POP
// end ;
15685: PPOPN 3
15687: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15688: LD_EXP 43
15692: PUSH
15693: LD_EXP 56
15697: AND
15698: IFFALSE 15817
15700: GO 15702
15702: DISABLE
15703: LD_INT 0
15705: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15706: LD_ADDR_VAR 0 1
15710: PUSH
15711: LD_INT 22
15713: PUSH
15714: LD_OWVAR 2
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 21
15725: PUSH
15726: LD_INT 1
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 3
15735: PUSH
15736: LD_INT 23
15738: PUSH
15739: LD_INT 0
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: PPUSH
15755: CALL_OW 69
15759: PUSH
15760: FOR_IN
15761: IFFALSE 15815
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15763: LD_VAR 0 1
15767: PPUSH
15768: CALL_OW 257
15772: PUSH
15773: LD_INT 1
15775: PUSH
15776: LD_INT 2
15778: PUSH
15779: LD_INT 3
15781: PUSH
15782: LD_INT 4
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: IN
15791: IFFALSE 15813
// SetClass ( un , rand ( 1 , 4 ) ) ;
15793: LD_VAR 0 1
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: LD_INT 4
15803: PPUSH
15804: CALL_OW 12
15808: PPUSH
15809: CALL_OW 336
15813: GO 15760
15815: POP
15816: POP
// end ;
15817: PPOPN 1
15819: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15820: LD_EXP 43
15824: PUSH
15825: LD_EXP 55
15829: AND
15830: IFFALSE 15909
15832: GO 15834
15834: DISABLE
15835: LD_INT 0
15837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15838: LD_ADDR_VAR 0 1
15842: PUSH
15843: LD_INT 22
15845: PUSH
15846: LD_OWVAR 2
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 21
15857: PUSH
15858: LD_INT 3
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PPUSH
15869: CALL_OW 69
15873: ST_TO_ADDR
// if not tmp then
15874: LD_VAR 0 1
15878: NOT
15879: IFFALSE 15883
// exit ;
15881: GO 15909
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15883: LD_VAR 0 1
15887: PUSH
15888: LD_INT 1
15890: PPUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 12
15900: ARRAY
15901: PPUSH
15902: LD_INT 100
15904: PPUSH
15905: CALL_OW 234
// end ;
15909: PPOPN 1
15911: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15912: LD_EXP 43
15916: PUSH
15917: LD_EXP 57
15921: AND
15922: IFFALSE 16020
15924: GO 15926
15926: DISABLE
15927: LD_INT 0
15929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15930: LD_ADDR_VAR 0 1
15934: PUSH
15935: LD_INT 22
15937: PUSH
15938: LD_OWVAR 2
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 21
15949: PUSH
15950: LD_INT 1
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PPUSH
15961: CALL_OW 69
15965: ST_TO_ADDR
// if not tmp then
15966: LD_VAR 0 1
15970: NOT
15971: IFFALSE 15975
// exit ;
15973: GO 16020
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15975: LD_VAR 0 1
15979: PUSH
15980: LD_INT 1
15982: PPUSH
15983: LD_VAR 0 1
15987: PPUSH
15988: CALL_OW 12
15992: ARRAY
15993: PPUSH
15994: LD_INT 1
15996: PPUSH
15997: LD_INT 4
15999: PPUSH
16000: CALL_OW 12
16004: PPUSH
16005: LD_INT 3000
16007: PPUSH
16008: LD_INT 9000
16010: PPUSH
16011: CALL_OW 12
16015: PPUSH
16016: CALL_OW 492
// end ;
16020: PPOPN 1
16022: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16023: LD_EXP 43
16027: PUSH
16028: LD_EXP 58
16032: AND
16033: IFFALSE 16053
16035: GO 16037
16037: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16038: LD_INT 1
16040: PPUSH
16041: LD_OWVAR 2
16045: PPUSH
16046: LD_INT 0
16048: PPUSH
16049: CALL_OW 324
16053: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16054: LD_EXP 43
16058: PUSH
16059: LD_EXP 59
16063: AND
16064: IFFALSE 16147
16066: GO 16068
16068: DISABLE
16069: LD_INT 0
16071: PPUSH
16072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16073: LD_ADDR_VAR 0 2
16077: PUSH
16078: LD_INT 22
16080: PUSH
16081: LD_OWVAR 2
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 21
16092: PUSH
16093: LD_INT 3
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 69
16108: ST_TO_ADDR
// if not tmp then
16109: LD_VAR 0 2
16113: NOT
16114: IFFALSE 16118
// exit ;
16116: GO 16147
// for i in tmp do
16118: LD_ADDR_VAR 0 1
16122: PUSH
16123: LD_VAR 0 2
16127: PUSH
16128: FOR_IN
16129: IFFALSE 16145
// SetBLevel ( i , 10 ) ;
16131: LD_VAR 0 1
16135: PPUSH
16136: LD_INT 10
16138: PPUSH
16139: CALL_OW 241
16143: GO 16128
16145: POP
16146: POP
// end ;
16147: PPOPN 2
16149: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16150: LD_EXP 43
16154: PUSH
16155: LD_EXP 60
16159: AND
16160: IFFALSE 16271
16162: GO 16164
16164: DISABLE
16165: LD_INT 0
16167: PPUSH
16168: PPUSH
16169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16170: LD_ADDR_VAR 0 3
16174: PUSH
16175: LD_INT 22
16177: PUSH
16178: LD_OWVAR 2
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 25
16189: PUSH
16190: LD_INT 1
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PPUSH
16201: CALL_OW 69
16205: ST_TO_ADDR
// if not tmp then
16206: LD_VAR 0 3
16210: NOT
16211: IFFALSE 16215
// exit ;
16213: GO 16271
// un := tmp [ rand ( 1 , tmp ) ] ;
16215: LD_ADDR_VAR 0 2
16219: PUSH
16220: LD_VAR 0 3
16224: PUSH
16225: LD_INT 1
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: CALL_OW 12
16237: ARRAY
16238: ST_TO_ADDR
// if Crawls ( un ) then
16239: LD_VAR 0 2
16243: PPUSH
16244: CALL_OW 318
16248: IFFALSE 16259
// ComWalk ( un ) ;
16250: LD_VAR 0 2
16254: PPUSH
16255: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16259: LD_VAR 0 2
16263: PPUSH
16264: LD_INT 5
16266: PPUSH
16267: CALL_OW 336
// end ;
16271: PPOPN 3
16273: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16274: LD_EXP 43
16278: PUSH
16279: LD_EXP 61
16283: AND
16284: PUSH
16285: LD_OWVAR 67
16289: PUSH
16290: LD_INT 3
16292: LESS
16293: AND
16294: IFFALSE 16313
16296: GO 16298
16298: DISABLE
// Difficulty := Difficulty + 1 ;
16299: LD_ADDR_OWVAR 67
16303: PUSH
16304: LD_OWVAR 67
16308: PUSH
16309: LD_INT 1
16311: PLUS
16312: ST_TO_ADDR
16313: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16314: LD_EXP 43
16318: PUSH
16319: LD_EXP 62
16323: AND
16324: IFFALSE 16427
16326: GO 16328
16328: DISABLE
16329: LD_INT 0
16331: PPUSH
// begin for i := 1 to 5 do
16332: LD_ADDR_VAR 0 1
16336: PUSH
16337: DOUBLE
16338: LD_INT 1
16340: DEC
16341: ST_TO_ADDR
16342: LD_INT 5
16344: PUSH
16345: FOR_TO
16346: IFFALSE 16425
// begin uc_nation := nation_nature ;
16348: LD_ADDR_OWVAR 21
16352: PUSH
16353: LD_INT 0
16355: ST_TO_ADDR
// uc_side := 0 ;
16356: LD_ADDR_OWVAR 20
16360: PUSH
16361: LD_INT 0
16363: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16364: LD_ADDR_OWVAR 29
16368: PUSH
16369: LD_INT 12
16371: PUSH
16372: LD_INT 12
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: ST_TO_ADDR
// hc_agressivity := 20 ;
16379: LD_ADDR_OWVAR 35
16383: PUSH
16384: LD_INT 20
16386: ST_TO_ADDR
// hc_class := class_tiger ;
16387: LD_ADDR_OWVAR 28
16391: PUSH
16392: LD_INT 14
16394: ST_TO_ADDR
// hc_gallery :=  ;
16395: LD_ADDR_OWVAR 33
16399: PUSH
16400: LD_STRING 
16402: ST_TO_ADDR
// hc_name :=  ;
16403: LD_ADDR_OWVAR 26
16407: PUSH
16408: LD_STRING 
16410: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16411: CALL_OW 44
16415: PPUSH
16416: LD_INT 0
16418: PPUSH
16419: CALL_OW 51
// end ;
16423: GO 16345
16425: POP
16426: POP
// end ;
16427: PPOPN 1
16429: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16430: LD_EXP 43
16434: PUSH
16435: LD_EXP 63
16439: AND
16440: IFFALSE 16449
16442: GO 16444
16444: DISABLE
// StreamSibBomb ;
16445: CALL 16450 0 0
16449: END
// export function StreamSibBomb ; var i , x , y ; begin
16450: LD_INT 0
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
// result := false ;
16456: LD_ADDR_VAR 0 1
16460: PUSH
16461: LD_INT 0
16463: ST_TO_ADDR
// for i := 1 to 16 do
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: DOUBLE
16470: LD_INT 1
16472: DEC
16473: ST_TO_ADDR
16474: LD_INT 16
16476: PUSH
16477: FOR_TO
16478: IFFALSE 16677
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16480: LD_ADDR_VAR 0 3
16484: PUSH
16485: LD_INT 10
16487: PUSH
16488: LD_INT 20
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 40
16496: PUSH
16497: LD_INT 50
16499: PUSH
16500: LD_INT 60
16502: PUSH
16503: LD_INT 70
16505: PUSH
16506: LD_INT 80
16508: PUSH
16509: LD_INT 90
16511: PUSH
16512: LD_INT 100
16514: PUSH
16515: LD_INT 110
16517: PUSH
16518: LD_INT 120
16520: PUSH
16521: LD_INT 130
16523: PUSH
16524: LD_INT 140
16526: PUSH
16527: LD_INT 150
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 1
16549: PPUSH
16550: LD_INT 15
16552: PPUSH
16553: CALL_OW 12
16557: ARRAY
16558: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16559: LD_ADDR_VAR 0 4
16563: PUSH
16564: LD_INT 10
16566: PUSH
16567: LD_INT 20
16569: PUSH
16570: LD_INT 30
16572: PUSH
16573: LD_INT 40
16575: PUSH
16576: LD_INT 50
16578: PUSH
16579: LD_INT 60
16581: PUSH
16582: LD_INT 70
16584: PUSH
16585: LD_INT 80
16587: PUSH
16588: LD_INT 90
16590: PUSH
16591: LD_INT 100
16593: PUSH
16594: LD_INT 110
16596: PUSH
16597: LD_INT 120
16599: PUSH
16600: LD_INT 130
16602: PUSH
16603: LD_INT 140
16605: PUSH
16606: LD_INT 150
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 1
16628: PPUSH
16629: LD_INT 15
16631: PPUSH
16632: CALL_OW 12
16636: ARRAY
16637: ST_TO_ADDR
// if ValidHex ( x , y ) then
16638: LD_VAR 0 3
16642: PPUSH
16643: LD_VAR 0 4
16647: PPUSH
16648: CALL_OW 488
16652: IFFALSE 16675
// begin result := [ x , y ] ;
16654: LD_ADDR_VAR 0 1
16658: PUSH
16659: LD_VAR 0 3
16663: PUSH
16664: LD_VAR 0 4
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: ST_TO_ADDR
// break ;
16673: GO 16677
// end ; end ;
16675: GO 16477
16677: POP
16678: POP
// if result then
16679: LD_VAR 0 1
16683: IFFALSE 16743
// begin ToLua ( playSibBomb() ) ;
16685: LD_STRING playSibBomb()
16687: PPUSH
16688: CALL_OW 559
// wait ( 0 0$14 ) ;
16692: LD_INT 490
16694: PPUSH
16695: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16699: LD_VAR 0 1
16703: PUSH
16704: LD_INT 1
16706: ARRAY
16707: PPUSH
16708: LD_VAR 0 1
16712: PUSH
16713: LD_INT 2
16715: ARRAY
16716: PPUSH
16717: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16721: LD_VAR 0 1
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: PPUSH
16730: LD_VAR 0 1
16734: PUSH
16735: LD_INT 2
16737: ARRAY
16738: PPUSH
16739: CALL_OW 429
// end ; end ;
16743: LD_VAR 0 1
16747: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16748: LD_EXP 43
16752: PUSH
16753: LD_EXP 65
16757: AND
16758: IFFALSE 16770
16760: GO 16762
16762: DISABLE
// YouLost (  ) ;
16763: LD_STRING 
16765: PPUSH
16766: CALL_OW 104
16770: END
// every 0 0$1 trigger StreamModeActive and sFog do
16771: LD_EXP 43
16775: PUSH
16776: LD_EXP 64
16780: AND
16781: IFFALSE 16795
16783: GO 16785
16785: DISABLE
// FogOff ( your_side ) ;
16786: LD_OWVAR 2
16790: PPUSH
16791: CALL_OW 344
16795: END
// every 0 0$1 trigger StreamModeActive and sSun do
16796: LD_EXP 43
16800: PUSH
16801: LD_EXP 66
16805: AND
16806: IFFALSE 16834
16808: GO 16810
16810: DISABLE
// begin solar_recharge_percent := 0 ;
16811: LD_ADDR_OWVAR 79
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16819: LD_INT 10500
16821: PPUSH
16822: CALL_OW 67
// solar_recharge_percent := 100 ;
16826: LD_ADDR_OWVAR 79
16830: PUSH
16831: LD_INT 100
16833: ST_TO_ADDR
// end ;
16834: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16835: LD_EXP 43
16839: PUSH
16840: LD_EXP 67
16844: AND
16845: IFFALSE 17084
16847: GO 16849
16849: DISABLE
16850: LD_INT 0
16852: PPUSH
16853: PPUSH
16854: PPUSH
// begin tmp := [ ] ;
16855: LD_ADDR_VAR 0 3
16859: PUSH
16860: EMPTY
16861: ST_TO_ADDR
// for i := 1 to 6 do
16862: LD_ADDR_VAR 0 1
16866: PUSH
16867: DOUBLE
16868: LD_INT 1
16870: DEC
16871: ST_TO_ADDR
16872: LD_INT 6
16874: PUSH
16875: FOR_TO
16876: IFFALSE 16981
// begin uc_nation := nation_nature ;
16878: LD_ADDR_OWVAR 21
16882: PUSH
16883: LD_INT 0
16885: ST_TO_ADDR
// uc_side := 0 ;
16886: LD_ADDR_OWVAR 20
16890: PUSH
16891: LD_INT 0
16893: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16894: LD_ADDR_OWVAR 29
16898: PUSH
16899: LD_INT 12
16901: PUSH
16902: LD_INT 12
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: ST_TO_ADDR
// hc_agressivity := 20 ;
16909: LD_ADDR_OWVAR 35
16913: PUSH
16914: LD_INT 20
16916: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16917: LD_ADDR_OWVAR 28
16921: PUSH
16922: LD_INT 17
16924: ST_TO_ADDR
// hc_gallery :=  ;
16925: LD_ADDR_OWVAR 33
16929: PUSH
16930: LD_STRING 
16932: ST_TO_ADDR
// hc_name :=  ;
16933: LD_ADDR_OWVAR 26
16937: PUSH
16938: LD_STRING 
16940: ST_TO_ADDR
// un := CreateHuman ;
16941: LD_ADDR_VAR 0 2
16945: PUSH
16946: CALL_OW 44
16950: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16951: LD_VAR 0 2
16955: PPUSH
16956: LD_INT 1
16958: PPUSH
16959: CALL_OW 51
// tmp := tmp ^ un ;
16963: LD_ADDR_VAR 0 3
16967: PUSH
16968: LD_VAR 0 3
16972: PUSH
16973: LD_VAR 0 2
16977: ADD
16978: ST_TO_ADDR
// end ;
16979: GO 16875
16981: POP
16982: POP
// repeat wait ( 0 0$1 ) ;
16983: LD_INT 35
16985: PPUSH
16986: CALL_OW 67
// for un in tmp do
16990: LD_ADDR_VAR 0 2
16994: PUSH
16995: LD_VAR 0 3
16999: PUSH
17000: FOR_IN
17001: IFFALSE 17075
// begin if IsDead ( un ) then
17003: LD_VAR 0 2
17007: PPUSH
17008: CALL_OW 301
17012: IFFALSE 17032
// begin tmp := tmp diff un ;
17014: LD_ADDR_VAR 0 3
17018: PUSH
17019: LD_VAR 0 3
17023: PUSH
17024: LD_VAR 0 2
17028: DIFF
17029: ST_TO_ADDR
// continue ;
17030: GO 17000
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17032: LD_VAR 0 2
17036: PPUSH
17037: LD_INT 3
17039: PUSH
17040: LD_INT 22
17042: PUSH
17043: LD_INT 0
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PPUSH
17054: CALL_OW 69
17058: PPUSH
17059: LD_VAR 0 2
17063: PPUSH
17064: CALL_OW 74
17068: PPUSH
17069: CALL_OW 115
// end ;
17073: GO 17000
17075: POP
17076: POP
// until not tmp ;
17077: LD_VAR 0 3
17081: NOT
17082: IFFALSE 16983
// end ;
17084: PPOPN 3
17086: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17087: LD_EXP 43
17091: PUSH
17092: LD_EXP 68
17096: AND
17097: IFFALSE 17151
17099: GO 17101
17101: DISABLE
// begin ToLua ( displayTroll(); ) ;
17102: LD_STRING displayTroll();
17104: PPUSH
17105: CALL_OW 559
// wait ( 3 3$00 ) ;
17109: LD_INT 6300
17111: PPUSH
17112: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17116: LD_STRING hideTroll();
17118: PPUSH
17119: CALL_OW 559
// wait ( 1 1$00 ) ;
17123: LD_INT 2100
17125: PPUSH
17126: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17130: LD_STRING displayTroll();
17132: PPUSH
17133: CALL_OW 559
// wait ( 1 1$00 ) ;
17137: LD_INT 2100
17139: PPUSH
17140: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17144: LD_STRING hideTroll();
17146: PPUSH
17147: CALL_OW 559
// end ;
17151: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17152: LD_EXP 43
17156: PUSH
17157: LD_EXP 69
17161: AND
17162: IFFALSE 17225
17164: GO 17166
17166: DISABLE
17167: LD_INT 0
17169: PPUSH
// begin p := 0 ;
17170: LD_ADDR_VAR 0 1
17174: PUSH
17175: LD_INT 0
17177: ST_TO_ADDR
// repeat game_speed := 1 ;
17178: LD_ADDR_OWVAR 65
17182: PUSH
17183: LD_INT 1
17185: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17186: LD_INT 35
17188: PPUSH
17189: CALL_OW 67
// p := p + 1 ;
17193: LD_ADDR_VAR 0 1
17197: PUSH
17198: LD_VAR 0 1
17202: PUSH
17203: LD_INT 1
17205: PLUS
17206: ST_TO_ADDR
// until p >= 60 ;
17207: LD_VAR 0 1
17211: PUSH
17212: LD_INT 60
17214: GREATEREQUAL
17215: IFFALSE 17178
// game_speed := 4 ;
17217: LD_ADDR_OWVAR 65
17221: PUSH
17222: LD_INT 4
17224: ST_TO_ADDR
// end ;
17225: PPOPN 1
17227: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17228: LD_EXP 43
17232: PUSH
17233: LD_EXP 70
17237: AND
17238: IFFALSE 17384
17240: GO 17242
17242: DISABLE
17243: LD_INT 0
17245: PPUSH
17246: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17247: LD_ADDR_VAR 0 1
17251: PUSH
17252: LD_INT 22
17254: PUSH
17255: LD_OWVAR 2
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 2
17266: PUSH
17267: LD_INT 30
17269: PUSH
17270: LD_INT 0
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 30
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PPUSH
17296: CALL_OW 69
17300: ST_TO_ADDR
// if not depot then
17301: LD_VAR 0 1
17305: NOT
17306: IFFALSE 17310
// exit ;
17308: GO 17384
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17310: LD_ADDR_VAR 0 2
17314: PUSH
17315: LD_VAR 0 1
17319: PUSH
17320: LD_INT 1
17322: PPUSH
17323: LD_VAR 0 1
17327: PPUSH
17328: CALL_OW 12
17332: ARRAY
17333: PPUSH
17334: CALL_OW 274
17338: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17339: LD_VAR 0 2
17343: PPUSH
17344: LD_INT 1
17346: PPUSH
17347: LD_INT 0
17349: PPUSH
17350: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17354: LD_VAR 0 2
17358: PPUSH
17359: LD_INT 2
17361: PPUSH
17362: LD_INT 0
17364: PPUSH
17365: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_INT 3
17376: PPUSH
17377: LD_INT 0
17379: PPUSH
17380: CALL_OW 277
// end ;
17384: PPOPN 2
17386: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17387: LD_EXP 43
17391: PUSH
17392: LD_EXP 71
17396: AND
17397: IFFALSE 17494
17399: GO 17401
17401: DISABLE
17402: LD_INT 0
17404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: LD_INT 22
17412: PUSH
17413: LD_OWVAR 2
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 21
17424: PUSH
17425: LD_INT 1
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: LD_INT 23
17437: PUSH
17438: LD_INT 0
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: LIST
17453: PPUSH
17454: CALL_OW 69
17458: ST_TO_ADDR
// if not tmp then
17459: LD_VAR 0 1
17463: NOT
17464: IFFALSE 17468
// exit ;
17466: GO 17494
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17468: LD_VAR 0 1
17472: PUSH
17473: LD_INT 1
17475: PPUSH
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 12
17485: ARRAY
17486: PPUSH
17487: LD_INT 200
17489: PPUSH
17490: CALL_OW 234
// end ;
17494: PPOPN 1
17496: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17497: LD_EXP 43
17501: PUSH
17502: LD_EXP 72
17506: AND
17507: IFFALSE 17586
17509: GO 17511
17511: DISABLE
17512: LD_INT 0
17514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17515: LD_ADDR_VAR 0 1
17519: PUSH
17520: LD_INT 22
17522: PUSH
17523: LD_OWVAR 2
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 21
17534: PUSH
17535: LD_INT 2
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PPUSH
17546: CALL_OW 69
17550: ST_TO_ADDR
// if not tmp then
17551: LD_VAR 0 1
17555: NOT
17556: IFFALSE 17560
// exit ;
17558: GO 17586
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17560: LD_VAR 0 1
17564: PUSH
17565: LD_INT 1
17567: PPUSH
17568: LD_VAR 0 1
17572: PPUSH
17573: CALL_OW 12
17577: ARRAY
17578: PPUSH
17579: LD_INT 60
17581: PPUSH
17582: CALL_OW 234
// end ;
17586: PPOPN 1
17588: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17589: LD_EXP 43
17593: PUSH
17594: LD_EXP 73
17598: AND
17599: IFFALSE 17698
17601: GO 17603
17603: DISABLE
17604: LD_INT 0
17606: PPUSH
17607: PPUSH
// begin enable ;
17608: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17609: LD_ADDR_VAR 0 1
17613: PUSH
17614: LD_INT 22
17616: PUSH
17617: LD_OWVAR 2
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 61
17628: PUSH
17629: EMPTY
17630: LIST
17631: PUSH
17632: LD_INT 33
17634: PUSH
17635: LD_INT 2
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: PPUSH
17647: CALL_OW 69
17651: ST_TO_ADDR
// if not tmp then
17652: LD_VAR 0 1
17656: NOT
17657: IFFALSE 17661
// exit ;
17659: GO 17698
// for i in tmp do
17661: LD_ADDR_VAR 0 2
17665: PUSH
17666: LD_VAR 0 1
17670: PUSH
17671: FOR_IN
17672: IFFALSE 17696
// if IsControledBy ( i ) then
17674: LD_VAR 0 2
17678: PPUSH
17679: CALL_OW 312
17683: IFFALSE 17694
// ComUnlink ( i ) ;
17685: LD_VAR 0 2
17689: PPUSH
17690: CALL_OW 136
17694: GO 17671
17696: POP
17697: POP
// end ;
17698: PPOPN 2
17700: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17701: LD_EXP 43
17705: PUSH
17706: LD_EXP 74
17710: AND
17711: IFFALSE 17851
17713: GO 17715
17715: DISABLE
17716: LD_INT 0
17718: PPUSH
17719: PPUSH
// begin ToLua ( displayPowell(); ) ;
17720: LD_STRING displayPowell();
17722: PPUSH
17723: CALL_OW 559
// uc_side := 0 ;
17727: LD_ADDR_OWVAR 20
17731: PUSH
17732: LD_INT 0
17734: ST_TO_ADDR
// uc_nation := 2 ;
17735: LD_ADDR_OWVAR 21
17739: PUSH
17740: LD_INT 2
17742: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17743: LD_ADDR_OWVAR 37
17747: PUSH
17748: LD_INT 14
17750: ST_TO_ADDR
// vc_engine := engine_siberite ;
17751: LD_ADDR_OWVAR 39
17755: PUSH
17756: LD_INT 3
17758: ST_TO_ADDR
// vc_control := control_apeman ;
17759: LD_ADDR_OWVAR 38
17763: PUSH
17764: LD_INT 5
17766: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17767: LD_ADDR_OWVAR 40
17771: PUSH
17772: LD_INT 29
17774: ST_TO_ADDR
// un := CreateVehicle ;
17775: LD_ADDR_VAR 0 2
17779: PUSH
17780: CALL_OW 45
17784: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17785: LD_VAR 0 2
17789: PPUSH
17790: LD_INT 1
17792: PPUSH
17793: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17797: LD_INT 35
17799: PPUSH
17800: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17804: LD_VAR 0 2
17808: PPUSH
17809: LD_INT 22
17811: PUSH
17812: LD_OWVAR 2
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PPUSH
17821: CALL_OW 69
17825: PPUSH
17826: LD_VAR 0 2
17830: PPUSH
17831: CALL_OW 74
17835: PPUSH
17836: CALL_OW 115
// until IsDead ( un ) ;
17840: LD_VAR 0 2
17844: PPUSH
17845: CALL_OW 301
17849: IFFALSE 17797
// end ;
17851: PPOPN 2
17853: END
// every 0 0$1 trigger StreamModeActive and sStu do
17854: LD_EXP 43
17858: PUSH
17859: LD_EXP 82
17863: AND
17864: IFFALSE 17880
17866: GO 17868
17868: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17869: LD_STRING displayStucuk();
17871: PPUSH
17872: CALL_OW 559
// ResetFog ;
17876: CALL_OW 335
// end ;
17880: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17881: LD_EXP 43
17885: PUSH
17886: LD_EXP 75
17890: AND
17891: IFFALSE 18032
17893: GO 17895
17895: DISABLE
17896: LD_INT 0
17898: PPUSH
17899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17900: LD_ADDR_VAR 0 2
17904: PUSH
17905: LD_INT 22
17907: PUSH
17908: LD_OWVAR 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 21
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PPUSH
17931: CALL_OW 69
17935: ST_TO_ADDR
// if not tmp then
17936: LD_VAR 0 2
17940: NOT
17941: IFFALSE 17945
// exit ;
17943: GO 18032
// un := tmp [ rand ( 1 , tmp ) ] ;
17945: LD_ADDR_VAR 0 1
17949: PUSH
17950: LD_VAR 0 2
17954: PUSH
17955: LD_INT 1
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL_OW 12
17967: ARRAY
17968: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17969: LD_VAR 0 1
17973: PPUSH
17974: LD_INT 0
17976: PPUSH
17977: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17981: LD_VAR 0 1
17985: PPUSH
17986: LD_OWVAR 3
17990: PUSH
17991: LD_VAR 0 1
17995: DIFF
17996: PPUSH
17997: LD_VAR 0 1
18001: PPUSH
18002: CALL_OW 74
18006: PPUSH
18007: CALL_OW 115
// wait ( 0 0$20 ) ;
18011: LD_INT 700
18013: PPUSH
18014: CALL_OW 67
// SetSide ( un , your_side ) ;
18018: LD_VAR 0 1
18022: PPUSH
18023: LD_OWVAR 2
18027: PPUSH
18028: CALL_OW 235
// end ;
18032: PPOPN 2
18034: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18035: LD_EXP 43
18039: PUSH
18040: LD_EXP 76
18044: AND
18045: IFFALSE 18151
18047: GO 18049
18049: DISABLE
18050: LD_INT 0
18052: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18053: LD_ADDR_VAR 0 1
18057: PUSH
18058: LD_INT 22
18060: PUSH
18061: LD_OWVAR 2
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 2
18072: PUSH
18073: LD_INT 30
18075: PUSH
18076: LD_INT 0
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 30
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: ST_TO_ADDR
// if not depot then
18107: LD_VAR 0 1
18111: NOT
18112: IFFALSE 18116
// exit ;
18114: GO 18151
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18116: LD_VAR 0 1
18120: PUSH
18121: LD_INT 1
18123: ARRAY
18124: PPUSH
18125: CALL_OW 250
18129: PPUSH
18130: LD_VAR 0 1
18134: PUSH
18135: LD_INT 1
18137: ARRAY
18138: PPUSH
18139: CALL_OW 251
18143: PPUSH
18144: LD_INT 70
18146: PPUSH
18147: CALL_OW 495
// end ;
18151: PPOPN 1
18153: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18154: LD_EXP 43
18158: PUSH
18159: LD_EXP 77
18163: AND
18164: IFFALSE 18375
18166: GO 18168
18168: DISABLE
18169: LD_INT 0
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18176: LD_ADDR_VAR 0 5
18180: PUSH
18181: LD_INT 22
18183: PUSH
18184: LD_OWVAR 2
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 21
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PPUSH
18207: CALL_OW 69
18211: ST_TO_ADDR
// if not tmp then
18212: LD_VAR 0 5
18216: NOT
18217: IFFALSE 18221
// exit ;
18219: GO 18375
// for i in tmp do
18221: LD_ADDR_VAR 0 1
18225: PUSH
18226: LD_VAR 0 5
18230: PUSH
18231: FOR_IN
18232: IFFALSE 18373
// begin d := rand ( 0 , 5 ) ;
18234: LD_ADDR_VAR 0 4
18238: PUSH
18239: LD_INT 0
18241: PPUSH
18242: LD_INT 5
18244: PPUSH
18245: CALL_OW 12
18249: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18250: LD_ADDR_VAR 0 2
18254: PUSH
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL_OW 250
18264: PPUSH
18265: LD_VAR 0 4
18269: PPUSH
18270: LD_INT 3
18272: PPUSH
18273: LD_INT 12
18275: PPUSH
18276: CALL_OW 12
18280: PPUSH
18281: CALL_OW 272
18285: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18286: LD_ADDR_VAR 0 3
18290: PUSH
18291: LD_VAR 0 1
18295: PPUSH
18296: CALL_OW 251
18300: PPUSH
18301: LD_VAR 0 4
18305: PPUSH
18306: LD_INT 3
18308: PPUSH
18309: LD_INT 12
18311: PPUSH
18312: CALL_OW 12
18316: PPUSH
18317: CALL_OW 273
18321: ST_TO_ADDR
// if ValidHex ( x , y ) then
18322: LD_VAR 0 2
18326: PPUSH
18327: LD_VAR 0 3
18331: PPUSH
18332: CALL_OW 488
18336: IFFALSE 18371
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18338: LD_VAR 0 1
18342: PPUSH
18343: LD_VAR 0 2
18347: PPUSH
18348: LD_VAR 0 3
18352: PPUSH
18353: LD_INT 3
18355: PPUSH
18356: LD_INT 6
18358: PPUSH
18359: CALL_OW 12
18363: PPUSH
18364: LD_INT 1
18366: PPUSH
18367: CALL_OW 483
// end ;
18371: GO 18231
18373: POP
18374: POP
// end ;
18375: PPOPN 5
18377: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18378: LD_EXP 43
18382: PUSH
18383: LD_EXP 78
18387: AND
18388: IFFALSE 18482
18390: GO 18392
18392: DISABLE
18393: LD_INT 0
18395: PPUSH
18396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18397: LD_ADDR_VAR 0 2
18401: PUSH
18402: LD_INT 22
18404: PUSH
18405: LD_OWVAR 2
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 32
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: PPUSH
18439: CALL_OW 69
18443: ST_TO_ADDR
// if not tmp then
18444: LD_VAR 0 2
18448: NOT
18449: IFFALSE 18453
// exit ;
18451: GO 18482
// for i in tmp do
18453: LD_ADDR_VAR 0 1
18457: PUSH
18458: LD_VAR 0 2
18462: PUSH
18463: FOR_IN
18464: IFFALSE 18480
// SetFuel ( i , 0 ) ;
18466: LD_VAR 0 1
18470: PPUSH
18471: LD_INT 0
18473: PPUSH
18474: CALL_OW 240
18478: GO 18463
18480: POP
18481: POP
// end ;
18482: PPOPN 2
18484: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18485: LD_EXP 43
18489: PUSH
18490: LD_EXP 79
18494: AND
18495: IFFALSE 18561
18497: GO 18499
18499: DISABLE
18500: LD_INT 0
18502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_INT 22
18510: PUSH
18511: LD_OWVAR 2
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 30
18522: PUSH
18523: LD_INT 29
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: ST_TO_ADDR
// if not tmp then
18539: LD_VAR 0 1
18543: NOT
18544: IFFALSE 18548
// exit ;
18546: GO 18561
// DestroyUnit ( tmp [ 1 ] ) ;
18548: LD_VAR 0 1
18552: PUSH
18553: LD_INT 1
18555: ARRAY
18556: PPUSH
18557: CALL_OW 65
// end ;
18561: PPOPN 1
18563: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18564: LD_EXP 43
18568: PUSH
18569: LD_EXP 81
18573: AND
18574: IFFALSE 18703
18576: GO 18578
18578: DISABLE
18579: LD_INT 0
18581: PPUSH
// begin uc_side := 0 ;
18582: LD_ADDR_OWVAR 20
18586: PUSH
18587: LD_INT 0
18589: ST_TO_ADDR
// uc_nation := nation_arabian ;
18590: LD_ADDR_OWVAR 21
18594: PUSH
18595: LD_INT 2
18597: ST_TO_ADDR
// hc_gallery :=  ;
18598: LD_ADDR_OWVAR 33
18602: PUSH
18603: LD_STRING 
18605: ST_TO_ADDR
// hc_name :=  ;
18606: LD_ADDR_OWVAR 26
18610: PUSH
18611: LD_STRING 
18613: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18614: LD_INT 1
18616: PPUSH
18617: LD_INT 11
18619: PPUSH
18620: LD_INT 10
18622: PPUSH
18623: CALL_OW 380
// un := CreateHuman ;
18627: LD_ADDR_VAR 0 1
18631: PUSH
18632: CALL_OW 44
18636: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18637: LD_VAR 0 1
18641: PPUSH
18642: LD_INT 1
18644: PPUSH
18645: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18649: LD_INT 35
18651: PPUSH
18652: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18656: LD_VAR 0 1
18660: PPUSH
18661: LD_INT 22
18663: PUSH
18664: LD_OWVAR 2
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PPUSH
18673: CALL_OW 69
18677: PPUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 74
18687: PPUSH
18688: CALL_OW 115
// until IsDead ( un ) ;
18692: LD_VAR 0 1
18696: PPUSH
18697: CALL_OW 301
18701: IFFALSE 18649
// end ;
18703: PPOPN 1
18705: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18706: LD_EXP 43
18710: PUSH
18711: LD_EXP 83
18715: AND
18716: IFFALSE 18728
18718: GO 18720
18720: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18721: LD_STRING earthquake(getX(game), 0, 32)
18723: PPUSH
18724: CALL_OW 559
18728: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18729: LD_EXP 43
18733: PUSH
18734: LD_EXP 84
18738: AND
18739: IFFALSE 18830
18741: GO 18743
18743: DISABLE
18744: LD_INT 0
18746: PPUSH
// begin enable ;
18747: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18748: LD_ADDR_VAR 0 1
18752: PUSH
18753: LD_INT 22
18755: PUSH
18756: LD_OWVAR 2
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 21
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 33
18777: PUSH
18778: LD_INT 3
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: LIST
18789: PPUSH
18790: CALL_OW 69
18794: ST_TO_ADDR
// if not tmp then
18795: LD_VAR 0 1
18799: NOT
18800: IFFALSE 18804
// exit ;
18802: GO 18830
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18804: LD_VAR 0 1
18808: PUSH
18809: LD_INT 1
18811: PPUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: CALL_OW 12
18821: ARRAY
18822: PPUSH
18823: LD_INT 1
18825: PPUSH
18826: CALL_OW 234
// end ;
18830: PPOPN 1
18832: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18833: LD_EXP 43
18837: PUSH
18838: LD_EXP 85
18842: AND
18843: IFFALSE 18984
18845: GO 18847
18847: DISABLE
18848: LD_INT 0
18850: PPUSH
18851: PPUSH
18852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18853: LD_ADDR_VAR 0 3
18857: PUSH
18858: LD_INT 22
18860: PUSH
18861: LD_OWVAR 2
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 25
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PPUSH
18884: CALL_OW 69
18888: ST_TO_ADDR
// if not tmp then
18889: LD_VAR 0 3
18893: NOT
18894: IFFALSE 18898
// exit ;
18896: GO 18984
// un := tmp [ rand ( 1 , tmp ) ] ;
18898: LD_ADDR_VAR 0 2
18902: PUSH
18903: LD_VAR 0 3
18907: PUSH
18908: LD_INT 1
18910: PPUSH
18911: LD_VAR 0 3
18915: PPUSH
18916: CALL_OW 12
18920: ARRAY
18921: ST_TO_ADDR
// if Crawls ( un ) then
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL_OW 318
18931: IFFALSE 18942
// ComWalk ( un ) ;
18933: LD_VAR 0 2
18937: PPUSH
18938: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18942: LD_VAR 0 2
18946: PPUSH
18947: LD_INT 9
18949: PPUSH
18950: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18954: LD_INT 28
18956: PPUSH
18957: LD_OWVAR 2
18961: PPUSH
18962: LD_INT 2
18964: PPUSH
18965: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18969: LD_INT 29
18971: PPUSH
18972: LD_OWVAR 2
18976: PPUSH
18977: LD_INT 2
18979: PPUSH
18980: CALL_OW 322
// end ;
18984: PPOPN 3
18986: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18987: LD_EXP 43
18991: PUSH
18992: LD_EXP 86
18996: AND
18997: IFFALSE 19108
18999: GO 19001
19001: DISABLE
19002: LD_INT 0
19004: PPUSH
19005: PPUSH
19006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19007: LD_ADDR_VAR 0 3
19011: PUSH
19012: LD_INT 22
19014: PUSH
19015: LD_OWVAR 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 25
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 3
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19108
// un := tmp [ rand ( 1 , tmp ) ] ;
19052: LD_ADDR_VAR 0 2
19056: PUSH
19057: LD_VAR 0 3
19061: PUSH
19062: LD_INT 1
19064: PPUSH
19065: LD_VAR 0 3
19069: PPUSH
19070: CALL_OW 12
19074: ARRAY
19075: ST_TO_ADDR
// if Crawls ( un ) then
19076: LD_VAR 0 2
19080: PPUSH
19081: CALL_OW 318
19085: IFFALSE 19096
// ComWalk ( un ) ;
19087: LD_VAR 0 2
19091: PPUSH
19092: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19096: LD_VAR 0 2
19100: PPUSH
19101: LD_INT 8
19103: PPUSH
19104: CALL_OW 336
// end ;
19108: PPOPN 3
19110: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19111: LD_EXP 43
19115: PUSH
19116: LD_EXP 87
19120: AND
19121: IFFALSE 19265
19123: GO 19125
19125: DISABLE
19126: LD_INT 0
19128: PPUSH
19129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_INT 22
19137: PUSH
19138: LD_OWVAR 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 21
19149: PUSH
19150: LD_INT 2
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: LD_INT 34
19162: PUSH
19163: LD_INT 12
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 34
19172: PUSH
19173: LD_INT 51
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 34
19182: PUSH
19183: LD_INT 32
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: LIST
19200: PPUSH
19201: CALL_OW 69
19205: ST_TO_ADDR
// if not tmp then
19206: LD_VAR 0 2
19210: NOT
19211: IFFALSE 19215
// exit ;
19213: GO 19265
// for i in tmp do
19215: LD_ADDR_VAR 0 1
19219: PUSH
19220: LD_VAR 0 2
19224: PUSH
19225: FOR_IN
19226: IFFALSE 19263
// if GetCargo ( i , mat_artifact ) = 0 then
19228: LD_VAR 0 1
19232: PPUSH
19233: LD_INT 4
19235: PPUSH
19236: CALL_OW 289
19240: PUSH
19241: LD_INT 0
19243: EQUAL
19244: IFFALSE 19261
// SetCargo ( i , mat_siberit , 100 ) ;
19246: LD_VAR 0 1
19250: PPUSH
19251: LD_INT 3
19253: PPUSH
19254: LD_INT 100
19256: PPUSH
19257: CALL_OW 290
19261: GO 19225
19263: POP
19264: POP
// end ;
19265: PPOPN 2
19267: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19268: LD_EXP 43
19272: PUSH
19273: LD_EXP 88
19277: AND
19278: IFFALSE 19461
19280: GO 19282
19282: DISABLE
19283: LD_INT 0
19285: PPUSH
19286: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19287: LD_ADDR_VAR 0 2
19291: PUSH
19292: LD_INT 22
19294: PUSH
19295: LD_OWVAR 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: ST_TO_ADDR
// if not tmp then
19309: LD_VAR 0 2
19313: NOT
19314: IFFALSE 19318
// exit ;
19316: GO 19461
// for i := 1 to 2 do
19318: LD_ADDR_VAR 0 1
19322: PUSH
19323: DOUBLE
19324: LD_INT 1
19326: DEC
19327: ST_TO_ADDR
19328: LD_INT 2
19330: PUSH
19331: FOR_TO
19332: IFFALSE 19459
// begin uc_side := your_side ;
19334: LD_ADDR_OWVAR 20
19338: PUSH
19339: LD_OWVAR 2
19343: ST_TO_ADDR
// uc_nation := nation_american ;
19344: LD_ADDR_OWVAR 21
19348: PUSH
19349: LD_INT 1
19351: ST_TO_ADDR
// vc_chassis := us_morphling ;
19352: LD_ADDR_OWVAR 37
19356: PUSH
19357: LD_INT 5
19359: ST_TO_ADDR
// vc_engine := engine_siberite ;
19360: LD_ADDR_OWVAR 39
19364: PUSH
19365: LD_INT 3
19367: ST_TO_ADDR
// vc_control := control_computer ;
19368: LD_ADDR_OWVAR 38
19372: PUSH
19373: LD_INT 3
19375: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19376: LD_ADDR_OWVAR 40
19380: PUSH
19381: LD_INT 10
19383: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19384: LD_VAR 0 2
19388: PUSH
19389: LD_INT 1
19391: ARRAY
19392: PPUSH
19393: CALL_OW 310
19397: NOT
19398: IFFALSE 19445
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19400: CALL_OW 45
19404: PPUSH
19405: LD_VAR 0 2
19409: PUSH
19410: LD_INT 1
19412: ARRAY
19413: PPUSH
19414: CALL_OW 250
19418: PPUSH
19419: LD_VAR 0 2
19423: PUSH
19424: LD_INT 1
19426: ARRAY
19427: PPUSH
19428: CALL_OW 251
19432: PPUSH
19433: LD_INT 12
19435: PPUSH
19436: LD_INT 1
19438: PPUSH
19439: CALL_OW 50
19443: GO 19457
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19445: CALL_OW 45
19449: PPUSH
19450: LD_INT 1
19452: PPUSH
19453: CALL_OW 51
// end ;
19457: GO 19331
19459: POP
19460: POP
// end ;
19461: PPOPN 2
19463: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19464: LD_EXP 43
19468: PUSH
19469: LD_EXP 89
19473: AND
19474: IFFALSE 19696
19476: GO 19478
19478: DISABLE
19479: LD_INT 0
19481: PPUSH
19482: PPUSH
19483: PPUSH
19484: PPUSH
19485: PPUSH
19486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19487: LD_ADDR_VAR 0 6
19491: PUSH
19492: LD_INT 22
19494: PUSH
19495: LD_OWVAR 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 21
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 3
19516: PUSH
19517: LD_INT 23
19519: PUSH
19520: LD_INT 0
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 69
19540: ST_TO_ADDR
// if not tmp then
19541: LD_VAR 0 6
19545: NOT
19546: IFFALSE 19550
// exit ;
19548: GO 19696
// s1 := rand ( 1 , 4 ) ;
19550: LD_ADDR_VAR 0 2
19554: PUSH
19555: LD_INT 1
19557: PPUSH
19558: LD_INT 4
19560: PPUSH
19561: CALL_OW 12
19565: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19566: LD_ADDR_VAR 0 4
19570: PUSH
19571: LD_VAR 0 6
19575: PUSH
19576: LD_INT 1
19578: ARRAY
19579: PPUSH
19580: LD_VAR 0 2
19584: PPUSH
19585: CALL_OW 259
19589: ST_TO_ADDR
// if s1 = 1 then
19590: LD_VAR 0 2
19594: PUSH
19595: LD_INT 1
19597: EQUAL
19598: IFFALSE 19618
// s2 := rand ( 2 , 4 ) else
19600: LD_ADDR_VAR 0 3
19604: PUSH
19605: LD_INT 2
19607: PPUSH
19608: LD_INT 4
19610: PPUSH
19611: CALL_OW 12
19615: ST_TO_ADDR
19616: GO 19626
// s2 := 1 ;
19618: LD_ADDR_VAR 0 3
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19626: LD_ADDR_VAR 0 5
19630: PUSH
19631: LD_VAR 0 6
19635: PUSH
19636: LD_INT 1
19638: ARRAY
19639: PPUSH
19640: LD_VAR 0 3
19644: PPUSH
19645: CALL_OW 259
19649: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19650: LD_VAR 0 6
19654: PUSH
19655: LD_INT 1
19657: ARRAY
19658: PPUSH
19659: LD_VAR 0 2
19663: PPUSH
19664: LD_VAR 0 5
19668: PPUSH
19669: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19673: LD_VAR 0 6
19677: PUSH
19678: LD_INT 1
19680: ARRAY
19681: PPUSH
19682: LD_VAR 0 3
19686: PPUSH
19687: LD_VAR 0 4
19691: PPUSH
19692: CALL_OW 237
// end ;
19696: PPOPN 6
19698: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19699: LD_EXP 43
19703: PUSH
19704: LD_EXP 90
19708: AND
19709: IFFALSE 19788
19711: GO 19713
19713: DISABLE
19714: LD_INT 0
19716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19717: LD_ADDR_VAR 0 1
19721: PUSH
19722: LD_INT 22
19724: PUSH
19725: LD_OWVAR 2
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 30
19736: PUSH
19737: LD_INT 3
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PPUSH
19748: CALL_OW 69
19752: ST_TO_ADDR
// if not tmp then
19753: LD_VAR 0 1
19757: NOT
19758: IFFALSE 19762
// exit ;
19760: GO 19788
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19762: LD_VAR 0 1
19766: PUSH
19767: LD_INT 1
19769: PPUSH
19770: LD_VAR 0 1
19774: PPUSH
19775: CALL_OW 12
19779: ARRAY
19780: PPUSH
19781: LD_INT 1
19783: PPUSH
19784: CALL_OW 234
// end ;
19788: PPOPN 1
19790: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19791: LD_EXP 43
19795: PUSH
19796: LD_EXP 91
19800: AND
19801: IFFALSE 19913
19803: GO 19805
19805: DISABLE
19806: LD_INT 0
19808: PPUSH
19809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19810: LD_ADDR_VAR 0 2
19814: PUSH
19815: LD_INT 22
19817: PUSH
19818: LD_OWVAR 2
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 2
19829: PUSH
19830: LD_INT 30
19832: PUSH
19833: LD_INT 27
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 30
19842: PUSH
19843: LD_INT 26
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 30
19852: PUSH
19853: LD_INT 28
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PPUSH
19870: CALL_OW 69
19874: ST_TO_ADDR
// if not tmp then
19875: LD_VAR 0 2
19879: NOT
19880: IFFALSE 19884
// exit ;
19882: GO 19913
// for i in tmp do
19884: LD_ADDR_VAR 0 1
19888: PUSH
19889: LD_VAR 0 2
19893: PUSH
19894: FOR_IN
19895: IFFALSE 19911
// SetLives ( i , 1 ) ;
19897: LD_VAR 0 1
19901: PPUSH
19902: LD_INT 1
19904: PPUSH
19905: CALL_OW 234
19909: GO 19894
19911: POP
19912: POP
// end ;
19913: PPOPN 2
19915: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19916: LD_EXP 43
19920: PUSH
19921: LD_EXP 92
19925: AND
19926: IFFALSE 20200
19928: GO 19930
19930: DISABLE
19931: LD_INT 0
19933: PPUSH
19934: PPUSH
19935: PPUSH
// begin i := rand ( 1 , 7 ) ;
19936: LD_ADDR_VAR 0 1
19940: PUSH
19941: LD_INT 1
19943: PPUSH
19944: LD_INT 7
19946: PPUSH
19947: CALL_OW 12
19951: ST_TO_ADDR
// case i of 1 :
19952: LD_VAR 0 1
19956: PUSH
19957: LD_INT 1
19959: DOUBLE
19960: EQUAL
19961: IFTRUE 19965
19963: GO 19975
19965: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19966: LD_STRING earthquake(getX(game), 0, 32)
19968: PPUSH
19969: CALL_OW 559
19973: GO 20200
19975: LD_INT 2
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 19997
19983: POP
// begin ToLua ( displayStucuk(); ) ;
19984: LD_STRING displayStucuk();
19986: PPUSH
19987: CALL_OW 559
// ResetFog ;
19991: CALL_OW 335
// end ; 3 :
19995: GO 20200
19997: LD_INT 3
19999: DOUBLE
20000: EQUAL
20001: IFTRUE 20005
20003: GO 20109
20005: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20006: LD_ADDR_VAR 0 2
20010: PUSH
20011: LD_INT 22
20013: PUSH
20014: LD_OWVAR 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 25
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PPUSH
20037: CALL_OW 69
20041: ST_TO_ADDR
// if not tmp then
20042: LD_VAR 0 2
20046: NOT
20047: IFFALSE 20051
// exit ;
20049: GO 20200
// un := tmp [ rand ( 1 , tmp ) ] ;
20051: LD_ADDR_VAR 0 3
20055: PUSH
20056: LD_VAR 0 2
20060: PUSH
20061: LD_INT 1
20063: PPUSH
20064: LD_VAR 0 2
20068: PPUSH
20069: CALL_OW 12
20073: ARRAY
20074: ST_TO_ADDR
// if Crawls ( un ) then
20075: LD_VAR 0 3
20079: PPUSH
20080: CALL_OW 318
20084: IFFALSE 20095
// ComWalk ( un ) ;
20086: LD_VAR 0 3
20090: PPUSH
20091: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20095: LD_VAR 0 3
20099: PPUSH
20100: LD_INT 8
20102: PPUSH
20103: CALL_OW 336
// end ; 4 :
20107: GO 20200
20109: LD_INT 4
20111: DOUBLE
20112: EQUAL
20113: IFTRUE 20117
20115: GO 20178
20117: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: LD_INT 22
20125: PUSH
20126: LD_OWVAR 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 30
20137: PUSH
20138: LD_INT 29
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PPUSH
20149: CALL_OW 69
20153: ST_TO_ADDR
// if not tmp then
20154: LD_VAR 0 2
20158: NOT
20159: IFFALSE 20163
// exit ;
20161: GO 20200
// DestroyUnit ( tmp [ 1 ] ) ;
20163: LD_VAR 0 2
20167: PUSH
20168: LD_INT 1
20170: ARRAY
20171: PPUSH
20172: CALL_OW 65
// end ; 5 .. 7 :
20176: GO 20200
20178: LD_INT 5
20180: DOUBLE
20181: GREATEREQUAL
20182: IFFALSE 20190
20184: LD_INT 7
20186: DOUBLE
20187: LESSEQUAL
20188: IFTRUE 20192
20190: GO 20199
20192: POP
// StreamSibBomb ; end ;
20193: CALL 16450 0 0
20197: GO 20200
20199: POP
// end ;
20200: PPOPN 3
20202: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20203: LD_EXP 43
20207: PUSH
20208: LD_EXP 93
20212: AND
20213: IFFALSE 20369
20215: GO 20217
20217: DISABLE
20218: LD_INT 0
20220: PPUSH
20221: PPUSH
20222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20223: LD_ADDR_VAR 0 2
20227: PUSH
20228: LD_INT 81
20230: PUSH
20231: LD_OWVAR 2
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: LD_INT 21
20245: PUSH
20246: LD_INT 1
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 21
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PPUSH
20272: CALL_OW 69
20276: ST_TO_ADDR
// if not tmp then
20277: LD_VAR 0 2
20281: NOT
20282: IFFALSE 20286
// exit ;
20284: GO 20369
// p := 0 ;
20286: LD_ADDR_VAR 0 3
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20294: LD_INT 35
20296: PPUSH
20297: CALL_OW 67
// p := p + 1 ;
20301: LD_ADDR_VAR 0 3
20305: PUSH
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 1
20313: PLUS
20314: ST_TO_ADDR
// for i in tmp do
20315: LD_ADDR_VAR 0 1
20319: PUSH
20320: LD_VAR 0 2
20324: PUSH
20325: FOR_IN
20326: IFFALSE 20357
// if GetLives ( i ) < 1000 then
20328: LD_VAR 0 1
20332: PPUSH
20333: CALL_OW 256
20337: PUSH
20338: LD_INT 1000
20340: LESS
20341: IFFALSE 20355
// SetLives ( i , 1000 ) ;
20343: LD_VAR 0 1
20347: PPUSH
20348: LD_INT 1000
20350: PPUSH
20351: CALL_OW 234
20355: GO 20325
20357: POP
20358: POP
// until p > 20 ;
20359: LD_VAR 0 3
20363: PUSH
20364: LD_INT 20
20366: GREATER
20367: IFFALSE 20294
// end ;
20369: PPOPN 3
20371: END
// every 0 0$1 trigger StreamModeActive and sTime do
20372: LD_EXP 43
20376: PUSH
20377: LD_EXP 94
20381: AND
20382: IFFALSE 20417
20384: GO 20386
20386: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20387: LD_INT 28
20389: PPUSH
20390: LD_OWVAR 2
20394: PPUSH
20395: LD_INT 2
20397: PPUSH
20398: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20402: LD_INT 30
20404: PPUSH
20405: LD_OWVAR 2
20409: PPUSH
20410: LD_INT 2
20412: PPUSH
20413: CALL_OW 322
// end ;
20417: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20418: LD_EXP 43
20422: PUSH
20423: LD_EXP 95
20427: AND
20428: IFFALSE 20549
20430: GO 20432
20432: DISABLE
20433: LD_INT 0
20435: PPUSH
20436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20437: LD_ADDR_VAR 0 2
20441: PUSH
20442: LD_INT 22
20444: PUSH
20445: LD_OWVAR 2
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 21
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: LD_INT 23
20469: PUSH
20470: LD_INT 0
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: PPUSH
20486: CALL_OW 69
20490: ST_TO_ADDR
// if not tmp then
20491: LD_VAR 0 2
20495: NOT
20496: IFFALSE 20500
// exit ;
20498: GO 20549
// for i in tmp do
20500: LD_ADDR_VAR 0 1
20504: PUSH
20505: LD_VAR 0 2
20509: PUSH
20510: FOR_IN
20511: IFFALSE 20547
// begin if Crawls ( i ) then
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 318
20522: IFFALSE 20533
// ComWalk ( i ) ;
20524: LD_VAR 0 1
20528: PPUSH
20529: CALL_OW 138
// SetClass ( i , 2 ) ;
20533: LD_VAR 0 1
20537: PPUSH
20538: LD_INT 2
20540: PPUSH
20541: CALL_OW 336
// end ;
20545: GO 20510
20547: POP
20548: POP
// end ;
20549: PPOPN 2
20551: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20552: LD_EXP 43
20556: PUSH
20557: LD_EXP 96
20561: AND
20562: IFFALSE 20843
20564: GO 20566
20566: DISABLE
20567: LD_INT 0
20569: PPUSH
20570: PPUSH
20571: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20572: LD_OWVAR 2
20576: PPUSH
20577: LD_INT 9
20579: PPUSH
20580: LD_INT 1
20582: PPUSH
20583: LD_INT 1
20585: PPUSH
20586: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20590: LD_INT 9
20592: PPUSH
20593: LD_OWVAR 2
20597: PPUSH
20598: CALL_OW 343
// uc_side := 9 ;
20602: LD_ADDR_OWVAR 20
20606: PUSH
20607: LD_INT 9
20609: ST_TO_ADDR
// uc_nation := 2 ;
20610: LD_ADDR_OWVAR 21
20614: PUSH
20615: LD_INT 2
20617: ST_TO_ADDR
// hc_name := Dark Warrior ;
20618: LD_ADDR_OWVAR 26
20622: PUSH
20623: LD_STRING Dark Warrior
20625: ST_TO_ADDR
// hc_gallery :=  ;
20626: LD_ADDR_OWVAR 33
20630: PUSH
20631: LD_STRING 
20633: ST_TO_ADDR
// hc_noskilllimit := true ;
20634: LD_ADDR_OWVAR 76
20638: PUSH
20639: LD_INT 1
20641: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20642: LD_ADDR_OWVAR 31
20646: PUSH
20647: LD_INT 30
20649: PUSH
20650: LD_INT 30
20652: PUSH
20653: LD_INT 30
20655: PUSH
20656: LD_INT 30
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: ST_TO_ADDR
// un := CreateHuman ;
20665: LD_ADDR_VAR 0 3
20669: PUSH
20670: CALL_OW 44
20674: ST_TO_ADDR
// hc_noskilllimit := false ;
20675: LD_ADDR_OWVAR 76
20679: PUSH
20680: LD_INT 0
20682: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20683: LD_VAR 0 3
20687: PPUSH
20688: LD_INT 1
20690: PPUSH
20691: CALL_OW 51
// p := 0 ;
20695: LD_ADDR_VAR 0 2
20699: PUSH
20700: LD_INT 0
20702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20703: LD_INT 35
20705: PPUSH
20706: CALL_OW 67
// p := p + 1 ;
20710: LD_ADDR_VAR 0 2
20714: PUSH
20715: LD_VAR 0 2
20719: PUSH
20720: LD_INT 1
20722: PLUS
20723: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20724: LD_VAR 0 3
20728: PPUSH
20729: CALL_OW 256
20733: PUSH
20734: LD_INT 1000
20736: LESS
20737: IFFALSE 20751
// SetLives ( un , 1000 ) ;
20739: LD_VAR 0 3
20743: PPUSH
20744: LD_INT 1000
20746: PPUSH
20747: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20751: LD_VAR 0 3
20755: PPUSH
20756: LD_INT 81
20758: PUSH
20759: LD_OWVAR 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 91
20770: PUSH
20771: LD_VAR 0 3
20775: PUSH
20776: LD_INT 30
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PPUSH
20788: CALL_OW 69
20792: PPUSH
20793: LD_VAR 0 3
20797: PPUSH
20798: CALL_OW 74
20802: PPUSH
20803: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20807: LD_VAR 0 2
20811: PUSH
20812: LD_INT 60
20814: GREATER
20815: PUSH
20816: LD_VAR 0 3
20820: PPUSH
20821: CALL_OW 301
20825: OR
20826: IFFALSE 20703
// if un then
20828: LD_VAR 0 3
20832: IFFALSE 20843
// RemoveUnit ( un ) ;
20834: LD_VAR 0 3
20838: PPUSH
20839: CALL_OW 64
// end ;
20843: PPOPN 3
20845: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20846: LD_INT 0
20848: PPUSH
// case cmd of 301 :
20849: LD_VAR 0 1
20853: PUSH
20854: LD_INT 301
20856: DOUBLE
20857: EQUAL
20858: IFTRUE 20862
20860: GO 20894
20862: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20863: LD_VAR 0 6
20867: PPUSH
20868: LD_VAR 0 7
20872: PPUSH
20873: LD_VAR 0 8
20877: PPUSH
20878: LD_VAR 0 4
20882: PPUSH
20883: LD_VAR 0 5
20887: PPUSH
20888: CALL 22095 0 5
20892: GO 21015
20894: LD_INT 302
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20939
20902: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20903: LD_VAR 0 6
20907: PPUSH
20908: LD_VAR 0 7
20912: PPUSH
20913: LD_VAR 0 8
20917: PPUSH
20918: LD_VAR 0 9
20922: PPUSH
20923: LD_VAR 0 4
20927: PPUSH
20928: LD_VAR 0 5
20932: PPUSH
20933: CALL 22186 0 6
20937: GO 21015
20939: LD_INT 303
20941: DOUBLE
20942: EQUAL
20943: IFTRUE 20947
20945: GO 20984
20947: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20948: LD_VAR 0 6
20952: PPUSH
20953: LD_VAR 0 7
20957: PPUSH
20958: LD_VAR 0 8
20962: PPUSH
20963: LD_VAR 0 9
20967: PPUSH
20968: LD_VAR 0 4
20972: PPUSH
20973: LD_VAR 0 5
20977: PPUSH
20978: CALL 21020 0 6
20982: GO 21015
20984: LD_INT 304
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21014
20992: POP
// hHackTeleport ( unit , x , y ) ; end ;
20993: LD_VAR 0 2
20997: PPUSH
20998: LD_VAR 0 4
21002: PPUSH
21003: LD_VAR 0 5
21007: PPUSH
21008: CALL 22779 0 3
21012: GO 21015
21014: POP
// end ;
21015: LD_VAR 0 12
21019: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21020: LD_INT 0
21022: PPUSH
21023: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21024: LD_VAR 0 1
21028: PUSH
21029: LD_INT 1
21031: LESS
21032: PUSH
21033: LD_VAR 0 1
21037: PUSH
21038: LD_INT 3
21040: GREATER
21041: OR
21042: PUSH
21043: LD_VAR 0 5
21047: PPUSH
21048: LD_VAR 0 6
21052: PPUSH
21053: CALL_OW 428
21057: OR
21058: IFFALSE 21062
// exit ;
21060: GO 21782
// uc_side := your_side ;
21062: LD_ADDR_OWVAR 20
21066: PUSH
21067: LD_OWVAR 2
21071: ST_TO_ADDR
// uc_nation := nation ;
21072: LD_ADDR_OWVAR 21
21076: PUSH
21077: LD_VAR 0 1
21081: ST_TO_ADDR
// bc_level = 1 ;
21082: LD_ADDR_OWVAR 43
21086: PUSH
21087: LD_INT 1
21089: ST_TO_ADDR
// case btype of 1 :
21090: LD_VAR 0 2
21094: PUSH
21095: LD_INT 1
21097: DOUBLE
21098: EQUAL
21099: IFTRUE 21103
21101: GO 21114
21103: POP
// bc_type := b_depot ; 2 :
21104: LD_ADDR_OWVAR 42
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
21112: GO 21726
21114: LD_INT 2
21116: DOUBLE
21117: EQUAL
21118: IFTRUE 21122
21120: GO 21133
21122: POP
// bc_type := b_warehouse ; 3 :
21123: LD_ADDR_OWVAR 42
21127: PUSH
21128: LD_INT 1
21130: ST_TO_ADDR
21131: GO 21726
21133: LD_INT 3
21135: DOUBLE
21136: EQUAL
21137: IFTRUE 21141
21139: GO 21152
21141: POP
// bc_type := b_lab ; 4 .. 9 :
21142: LD_ADDR_OWVAR 42
21146: PUSH
21147: LD_INT 6
21149: ST_TO_ADDR
21150: GO 21726
21152: LD_INT 4
21154: DOUBLE
21155: GREATEREQUAL
21156: IFFALSE 21164
21158: LD_INT 9
21160: DOUBLE
21161: LESSEQUAL
21162: IFTRUE 21166
21164: GO 21218
21166: POP
// begin bc_type := b_lab_half ;
21167: LD_ADDR_OWVAR 42
21171: PUSH
21172: LD_INT 7
21174: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21175: LD_ADDR_OWVAR 44
21179: PUSH
21180: LD_INT 10
21182: PUSH
21183: LD_INT 11
21185: PUSH
21186: LD_INT 12
21188: PUSH
21189: LD_INT 15
21191: PUSH
21192: LD_INT 14
21194: PUSH
21195: LD_INT 13
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: LD_VAR 0 2
21210: PUSH
21211: LD_INT 3
21213: MINUS
21214: ARRAY
21215: ST_TO_ADDR
// end ; 10 .. 13 :
21216: GO 21726
21218: LD_INT 10
21220: DOUBLE
21221: GREATEREQUAL
21222: IFFALSE 21230
21224: LD_INT 13
21226: DOUBLE
21227: LESSEQUAL
21228: IFTRUE 21232
21230: GO 21309
21232: POP
// begin bc_type := b_lab_full ;
21233: LD_ADDR_OWVAR 42
21237: PUSH
21238: LD_INT 8
21240: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21241: LD_ADDR_OWVAR 44
21245: PUSH
21246: LD_INT 10
21248: PUSH
21249: LD_INT 12
21251: PUSH
21252: LD_INT 14
21254: PUSH
21255: LD_INT 13
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: PUSH
21264: LD_VAR 0 2
21268: PUSH
21269: LD_INT 9
21271: MINUS
21272: ARRAY
21273: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21274: LD_ADDR_OWVAR 45
21278: PUSH
21279: LD_INT 11
21281: PUSH
21282: LD_INT 15
21284: PUSH
21285: LD_INT 12
21287: PUSH
21288: LD_INT 15
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: PUSH
21297: LD_VAR 0 2
21301: PUSH
21302: LD_INT 9
21304: MINUS
21305: ARRAY
21306: ST_TO_ADDR
// end ; 14 :
21307: GO 21726
21309: LD_INT 14
21311: DOUBLE
21312: EQUAL
21313: IFTRUE 21317
21315: GO 21328
21317: POP
// bc_type := b_workshop ; 15 :
21318: LD_ADDR_OWVAR 42
21322: PUSH
21323: LD_INT 2
21325: ST_TO_ADDR
21326: GO 21726
21328: LD_INT 15
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 21347
21336: POP
// bc_type := b_factory ; 16 :
21337: LD_ADDR_OWVAR 42
21341: PUSH
21342: LD_INT 3
21344: ST_TO_ADDR
21345: GO 21726
21347: LD_INT 16
21349: DOUBLE
21350: EQUAL
21351: IFTRUE 21355
21353: GO 21366
21355: POP
// bc_type := b_ext_gun ; 17 :
21356: LD_ADDR_OWVAR 42
21360: PUSH
21361: LD_INT 17
21363: ST_TO_ADDR
21364: GO 21726
21366: LD_INT 17
21368: DOUBLE
21369: EQUAL
21370: IFTRUE 21374
21372: GO 21402
21374: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21375: LD_ADDR_OWVAR 42
21379: PUSH
21380: LD_INT 19
21382: PUSH
21383: LD_INT 23
21385: PUSH
21386: LD_INT 19
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: PUSH
21394: LD_VAR 0 1
21398: ARRAY
21399: ST_TO_ADDR
21400: GO 21726
21402: LD_INT 18
21404: DOUBLE
21405: EQUAL
21406: IFTRUE 21410
21408: GO 21421
21410: POP
// bc_type := b_ext_radar ; 19 :
21411: LD_ADDR_OWVAR 42
21415: PUSH
21416: LD_INT 20
21418: ST_TO_ADDR
21419: GO 21726
21421: LD_INT 19
21423: DOUBLE
21424: EQUAL
21425: IFTRUE 21429
21427: GO 21440
21429: POP
// bc_type := b_ext_radio ; 20 :
21430: LD_ADDR_OWVAR 42
21434: PUSH
21435: LD_INT 22
21437: ST_TO_ADDR
21438: GO 21726
21440: LD_INT 20
21442: DOUBLE
21443: EQUAL
21444: IFTRUE 21448
21446: GO 21459
21448: POP
// bc_type := b_ext_siberium ; 21 :
21449: LD_ADDR_OWVAR 42
21453: PUSH
21454: LD_INT 21
21456: ST_TO_ADDR
21457: GO 21726
21459: LD_INT 21
21461: DOUBLE
21462: EQUAL
21463: IFTRUE 21467
21465: GO 21478
21467: POP
// bc_type := b_ext_computer ; 22 :
21468: LD_ADDR_OWVAR 42
21472: PUSH
21473: LD_INT 24
21475: ST_TO_ADDR
21476: GO 21726
21478: LD_INT 22
21480: DOUBLE
21481: EQUAL
21482: IFTRUE 21486
21484: GO 21497
21486: POP
// bc_type := b_ext_track ; 23 :
21487: LD_ADDR_OWVAR 42
21491: PUSH
21492: LD_INT 16
21494: ST_TO_ADDR
21495: GO 21726
21497: LD_INT 23
21499: DOUBLE
21500: EQUAL
21501: IFTRUE 21505
21503: GO 21516
21505: POP
// bc_type := b_ext_laser ; 24 :
21506: LD_ADDR_OWVAR 42
21510: PUSH
21511: LD_INT 25
21513: ST_TO_ADDR
21514: GO 21726
21516: LD_INT 24
21518: DOUBLE
21519: EQUAL
21520: IFTRUE 21524
21522: GO 21535
21524: POP
// bc_type := b_control_tower ; 25 :
21525: LD_ADDR_OWVAR 42
21529: PUSH
21530: LD_INT 36
21532: ST_TO_ADDR
21533: GO 21726
21535: LD_INT 25
21537: DOUBLE
21538: EQUAL
21539: IFTRUE 21543
21541: GO 21554
21543: POP
// bc_type := b_breastwork ; 26 :
21544: LD_ADDR_OWVAR 42
21548: PUSH
21549: LD_INT 31
21551: ST_TO_ADDR
21552: GO 21726
21554: LD_INT 26
21556: DOUBLE
21557: EQUAL
21558: IFTRUE 21562
21560: GO 21573
21562: POP
// bc_type := b_bunker ; 27 :
21563: LD_ADDR_OWVAR 42
21567: PUSH
21568: LD_INT 32
21570: ST_TO_ADDR
21571: GO 21726
21573: LD_INT 27
21575: DOUBLE
21576: EQUAL
21577: IFTRUE 21581
21579: GO 21592
21581: POP
// bc_type := b_turret ; 28 :
21582: LD_ADDR_OWVAR 42
21586: PUSH
21587: LD_INT 33
21589: ST_TO_ADDR
21590: GO 21726
21592: LD_INT 28
21594: DOUBLE
21595: EQUAL
21596: IFTRUE 21600
21598: GO 21611
21600: POP
// bc_type := b_armoury ; 29 :
21601: LD_ADDR_OWVAR 42
21605: PUSH
21606: LD_INT 4
21608: ST_TO_ADDR
21609: GO 21726
21611: LD_INT 29
21613: DOUBLE
21614: EQUAL
21615: IFTRUE 21619
21617: GO 21630
21619: POP
// bc_type := b_barracks ; 30 :
21620: LD_ADDR_OWVAR 42
21624: PUSH
21625: LD_INT 5
21627: ST_TO_ADDR
21628: GO 21726
21630: LD_INT 30
21632: DOUBLE
21633: EQUAL
21634: IFTRUE 21638
21636: GO 21649
21638: POP
// bc_type := b_solar_power ; 31 :
21639: LD_ADDR_OWVAR 42
21643: PUSH
21644: LD_INT 27
21646: ST_TO_ADDR
21647: GO 21726
21649: LD_INT 31
21651: DOUBLE
21652: EQUAL
21653: IFTRUE 21657
21655: GO 21668
21657: POP
// bc_type := b_oil_power ; 32 :
21658: LD_ADDR_OWVAR 42
21662: PUSH
21663: LD_INT 26
21665: ST_TO_ADDR
21666: GO 21726
21668: LD_INT 32
21670: DOUBLE
21671: EQUAL
21672: IFTRUE 21676
21674: GO 21687
21676: POP
// bc_type := b_siberite_power ; 33 :
21677: LD_ADDR_OWVAR 42
21681: PUSH
21682: LD_INT 28
21684: ST_TO_ADDR
21685: GO 21726
21687: LD_INT 33
21689: DOUBLE
21690: EQUAL
21691: IFTRUE 21695
21693: GO 21706
21695: POP
// bc_type := b_oil_mine ; 34 :
21696: LD_ADDR_OWVAR 42
21700: PUSH
21701: LD_INT 29
21703: ST_TO_ADDR
21704: GO 21726
21706: LD_INT 34
21708: DOUBLE
21709: EQUAL
21710: IFTRUE 21714
21712: GO 21725
21714: POP
// bc_type := b_siberite_mine ; end ;
21715: LD_ADDR_OWVAR 42
21719: PUSH
21720: LD_INT 30
21722: ST_TO_ADDR
21723: GO 21726
21725: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21726: LD_ADDR_VAR 0 8
21730: PUSH
21731: LD_VAR 0 5
21735: PPUSH
21736: LD_VAR 0 6
21740: PPUSH
21741: LD_VAR 0 3
21745: PPUSH
21746: CALL_OW 47
21750: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21751: LD_OWVAR 42
21755: PUSH
21756: LD_INT 32
21758: PUSH
21759: LD_INT 33
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: IN
21766: IFFALSE 21782
// PlaceWeaponTurret ( b , weapon ) ;
21768: LD_VAR 0 8
21772: PPUSH
21773: LD_VAR 0 4
21777: PPUSH
21778: CALL_OW 431
// end ;
21782: LD_VAR 0 7
21786: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21787: LD_INT 0
21789: PPUSH
21790: PPUSH
21791: PPUSH
21792: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21793: LD_ADDR_VAR 0 4
21797: PUSH
21798: LD_INT 22
21800: PUSH
21801: LD_OWVAR 2
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: LD_INT 30
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 30
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PPUSH
21842: CALL_OW 69
21846: ST_TO_ADDR
// if not tmp then
21847: LD_VAR 0 4
21851: NOT
21852: IFFALSE 21856
// exit ;
21854: GO 21915
// for i in tmp do
21856: LD_ADDR_VAR 0 2
21860: PUSH
21861: LD_VAR 0 4
21865: PUSH
21866: FOR_IN
21867: IFFALSE 21913
// for j = 1 to 3 do
21869: LD_ADDR_VAR 0 3
21873: PUSH
21874: DOUBLE
21875: LD_INT 1
21877: DEC
21878: ST_TO_ADDR
21879: LD_INT 3
21881: PUSH
21882: FOR_TO
21883: IFFALSE 21909
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21885: LD_VAR 0 2
21889: PPUSH
21890: CALL_OW 274
21894: PPUSH
21895: LD_VAR 0 3
21899: PPUSH
21900: LD_INT 99999
21902: PPUSH
21903: CALL_OW 277
21907: GO 21882
21909: POP
21910: POP
21911: GO 21866
21913: POP
21914: POP
// end ;
21915: LD_VAR 0 1
21919: RET
// export function hHackSetLevel10 ; var i , j ; begin
21920: LD_INT 0
21922: PPUSH
21923: PPUSH
21924: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21925: LD_ADDR_VAR 0 2
21929: PUSH
21930: LD_INT 21
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PPUSH
21940: CALL_OW 69
21944: PUSH
21945: FOR_IN
21946: IFFALSE 21998
// if IsSelected ( i ) then
21948: LD_VAR 0 2
21952: PPUSH
21953: CALL_OW 306
21957: IFFALSE 21996
// begin for j := 1 to 4 do
21959: LD_ADDR_VAR 0 3
21963: PUSH
21964: DOUBLE
21965: LD_INT 1
21967: DEC
21968: ST_TO_ADDR
21969: LD_INT 4
21971: PUSH
21972: FOR_TO
21973: IFFALSE 21994
// SetSkill ( i , j , 10 ) ;
21975: LD_VAR 0 2
21979: PPUSH
21980: LD_VAR 0 3
21984: PPUSH
21985: LD_INT 10
21987: PPUSH
21988: CALL_OW 237
21992: GO 21972
21994: POP
21995: POP
// end ;
21996: GO 21945
21998: POP
21999: POP
// end ;
22000: LD_VAR 0 1
22004: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22005: LD_INT 0
22007: PPUSH
22008: PPUSH
22009: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22010: LD_ADDR_VAR 0 2
22014: PUSH
22015: LD_INT 22
22017: PUSH
22018: LD_OWVAR 2
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 21
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: PUSH
22046: FOR_IN
22047: IFFALSE 22088
// begin for j := 1 to 4 do
22049: LD_ADDR_VAR 0 3
22053: PUSH
22054: DOUBLE
22055: LD_INT 1
22057: DEC
22058: ST_TO_ADDR
22059: LD_INT 4
22061: PUSH
22062: FOR_TO
22063: IFFALSE 22084
// SetSkill ( i , j , 10 ) ;
22065: LD_VAR 0 2
22069: PPUSH
22070: LD_VAR 0 3
22074: PPUSH
22075: LD_INT 10
22077: PPUSH
22078: CALL_OW 237
22082: GO 22062
22084: POP
22085: POP
// end ;
22086: GO 22046
22088: POP
22089: POP
// end ;
22090: LD_VAR 0 1
22094: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22095: LD_INT 0
22097: PPUSH
// uc_side := your_side ;
22098: LD_ADDR_OWVAR 20
22102: PUSH
22103: LD_OWVAR 2
22107: ST_TO_ADDR
// uc_nation := nation ;
22108: LD_ADDR_OWVAR 21
22112: PUSH
22113: LD_VAR 0 1
22117: ST_TO_ADDR
// InitHc ;
22118: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22122: LD_INT 0
22124: PPUSH
22125: LD_VAR 0 2
22129: PPUSH
22130: LD_VAR 0 3
22134: PPUSH
22135: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22139: LD_VAR 0 4
22143: PPUSH
22144: LD_VAR 0 5
22148: PPUSH
22149: CALL_OW 428
22153: PUSH
22154: LD_INT 0
22156: EQUAL
22157: IFFALSE 22181
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22159: CALL_OW 44
22163: PPUSH
22164: LD_VAR 0 4
22168: PPUSH
22169: LD_VAR 0 5
22173: PPUSH
22174: LD_INT 1
22176: PPUSH
22177: CALL_OW 48
// end ;
22181: LD_VAR 0 6
22185: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22186: LD_INT 0
22188: PPUSH
22189: PPUSH
// uc_side := your_side ;
22190: LD_ADDR_OWVAR 20
22194: PUSH
22195: LD_OWVAR 2
22199: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22200: LD_VAR 0 1
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: LD_INT 4
22216: PUSH
22217: LD_INT 5
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: IN
22227: IFFALSE 22239
// uc_nation := nation_american else
22229: LD_ADDR_OWVAR 21
22233: PUSH
22234: LD_INT 1
22236: ST_TO_ADDR
22237: GO 22282
// if chassis in [ 11 , 12 , 13 , 14 ] then
22239: LD_VAR 0 1
22243: PUSH
22244: LD_INT 11
22246: PUSH
22247: LD_INT 12
22249: PUSH
22250: LD_INT 13
22252: PUSH
22253: LD_INT 14
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: IN
22262: IFFALSE 22274
// uc_nation := nation_arabian else
22264: LD_ADDR_OWVAR 21
22268: PUSH
22269: LD_INT 2
22271: ST_TO_ADDR
22272: GO 22282
// uc_nation := nation_russian ;
22274: LD_ADDR_OWVAR 21
22278: PUSH
22279: LD_INT 3
22281: ST_TO_ADDR
// vc_chassis := chassis ;
22282: LD_ADDR_OWVAR 37
22286: PUSH
22287: LD_VAR 0 1
22291: ST_TO_ADDR
// vc_engine := engine ;
22292: LD_ADDR_OWVAR 39
22296: PUSH
22297: LD_VAR 0 2
22301: ST_TO_ADDR
// vc_control := control ;
22302: LD_ADDR_OWVAR 38
22306: PUSH
22307: LD_VAR 0 3
22311: ST_TO_ADDR
// vc_weapon := weapon ;
22312: LD_ADDR_OWVAR 40
22316: PUSH
22317: LD_VAR 0 4
22321: ST_TO_ADDR
// un := CreateVehicle ;
22322: LD_ADDR_VAR 0 8
22326: PUSH
22327: CALL_OW 45
22331: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22332: LD_VAR 0 8
22336: PPUSH
22337: LD_INT 0
22339: PPUSH
22340: LD_INT 5
22342: PPUSH
22343: CALL_OW 12
22347: PPUSH
22348: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22352: LD_VAR 0 8
22356: PPUSH
22357: LD_VAR 0 5
22361: PPUSH
22362: LD_VAR 0 6
22366: PPUSH
22367: LD_INT 1
22369: PPUSH
22370: CALL_OW 48
// end ;
22374: LD_VAR 0 7
22378: RET
// export hInvincible ; every 1 do
22379: GO 22381
22381: DISABLE
// hInvincible := [ ] ;
22382: LD_ADDR_EXP 97
22386: PUSH
22387: EMPTY
22388: ST_TO_ADDR
22389: END
// every 10 do var i ;
22390: GO 22392
22392: DISABLE
22393: LD_INT 0
22395: PPUSH
// begin enable ;
22396: ENABLE
// if not hInvincible then
22397: LD_EXP 97
22401: NOT
22402: IFFALSE 22406
// exit ;
22404: GO 22450
// for i in hInvincible do
22406: LD_ADDR_VAR 0 1
22410: PUSH
22411: LD_EXP 97
22415: PUSH
22416: FOR_IN
22417: IFFALSE 22448
// if GetLives ( i ) < 1000 then
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL_OW 256
22428: PUSH
22429: LD_INT 1000
22431: LESS
22432: IFFALSE 22446
// SetLives ( i , 1000 ) ;
22434: LD_VAR 0 1
22438: PPUSH
22439: LD_INT 1000
22441: PPUSH
22442: CALL_OW 234
22446: GO 22416
22448: POP
22449: POP
// end ;
22450: PPOPN 1
22452: END
// export function hHackInvincible ; var i ; begin
22453: LD_INT 0
22455: PPUSH
22456: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22457: LD_ADDR_VAR 0 2
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: LD_INT 21
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 21
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: PPUSH
22490: CALL_OW 69
22494: PUSH
22495: FOR_IN
22496: IFFALSE 22557
// if IsSelected ( i ) then
22498: LD_VAR 0 2
22502: PPUSH
22503: CALL_OW 306
22507: IFFALSE 22555
// begin if i in hInvincible then
22509: LD_VAR 0 2
22513: PUSH
22514: LD_EXP 97
22518: IN
22519: IFFALSE 22539
// hInvincible := hInvincible diff i else
22521: LD_ADDR_EXP 97
22525: PUSH
22526: LD_EXP 97
22530: PUSH
22531: LD_VAR 0 2
22535: DIFF
22536: ST_TO_ADDR
22537: GO 22555
// hInvincible := hInvincible union i ;
22539: LD_ADDR_EXP 97
22543: PUSH
22544: LD_EXP 97
22548: PUSH
22549: LD_VAR 0 2
22553: UNION
22554: ST_TO_ADDR
// end ;
22555: GO 22495
22557: POP
22558: POP
// end ;
22559: LD_VAR 0 1
22563: RET
// export function hHackInvisible ; var i , j ; begin
22564: LD_INT 0
22566: PPUSH
22567: PPUSH
22568: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22569: LD_ADDR_VAR 0 2
22573: PUSH
22574: LD_INT 21
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PPUSH
22584: CALL_OW 69
22588: PUSH
22589: FOR_IN
22590: IFFALSE 22614
// if IsSelected ( i ) then
22592: LD_VAR 0 2
22596: PPUSH
22597: CALL_OW 306
22601: IFFALSE 22612
// ComForceInvisible ( i ) ;
22603: LD_VAR 0 2
22607: PPUSH
22608: CALL_OW 496
22612: GO 22589
22614: POP
22615: POP
// end ;
22616: LD_VAR 0 1
22620: RET
// export function hHackChangeYourSide ; begin
22621: LD_INT 0
22623: PPUSH
// if your_side = 8 then
22624: LD_OWVAR 2
22628: PUSH
22629: LD_INT 8
22631: EQUAL
22632: IFFALSE 22644
// your_side := 0 else
22634: LD_ADDR_OWVAR 2
22638: PUSH
22639: LD_INT 0
22641: ST_TO_ADDR
22642: GO 22658
// your_side := your_side + 1 ;
22644: LD_ADDR_OWVAR 2
22648: PUSH
22649: LD_OWVAR 2
22653: PUSH
22654: LD_INT 1
22656: PLUS
22657: ST_TO_ADDR
// end ;
22658: LD_VAR 0 1
22662: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22663: LD_INT 0
22665: PPUSH
22666: PPUSH
22667: PPUSH
// for i in all_units do
22668: LD_ADDR_VAR 0 2
22672: PUSH
22673: LD_OWVAR 3
22677: PUSH
22678: FOR_IN
22679: IFFALSE 22757
// if IsSelected ( i ) then
22681: LD_VAR 0 2
22685: PPUSH
22686: CALL_OW 306
22690: IFFALSE 22755
// begin j := GetSide ( i ) ;
22692: LD_ADDR_VAR 0 3
22696: PUSH
22697: LD_VAR 0 2
22701: PPUSH
22702: CALL_OW 255
22706: ST_TO_ADDR
// if j = 8 then
22707: LD_VAR 0 3
22711: PUSH
22712: LD_INT 8
22714: EQUAL
22715: IFFALSE 22727
// j := 0 else
22717: LD_ADDR_VAR 0 3
22721: PUSH
22722: LD_INT 0
22724: ST_TO_ADDR
22725: GO 22741
// j := j + 1 ;
22727: LD_ADDR_VAR 0 3
22731: PUSH
22732: LD_VAR 0 3
22736: PUSH
22737: LD_INT 1
22739: PLUS
22740: ST_TO_ADDR
// SetSide ( i , j ) ;
22741: LD_VAR 0 2
22745: PPUSH
22746: LD_VAR 0 3
22750: PPUSH
22751: CALL_OW 235
// end ;
22755: GO 22678
22757: POP
22758: POP
// end ;
22759: LD_VAR 0 1
22763: RET
// export function hHackFog ; begin
22764: LD_INT 0
22766: PPUSH
// FogOff ( true ) ;
22767: LD_INT 1
22769: PPUSH
22770: CALL_OW 344
// end ;
22774: LD_VAR 0 1
22778: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22779: LD_INT 0
22781: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22782: LD_VAR 0 1
22786: PPUSH
22787: LD_VAR 0 2
22791: PPUSH
22792: LD_VAR 0 3
22796: PPUSH
22797: LD_INT 1
22799: PPUSH
22800: LD_INT 1
22802: PPUSH
22803: CALL_OW 483
// CenterOnXY ( x , y ) ;
22807: LD_VAR 0 2
22811: PPUSH
22812: LD_VAR 0 3
22816: PPUSH
22817: CALL_OW 84
// end ; end_of_file
22821: LD_VAR 0 4
22825: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22826: LD_VAR 0 1
22830: PUSH
22831: LD_INT 200
22833: DOUBLE
22834: GREATEREQUAL
22835: IFFALSE 22843
22837: LD_INT 299
22839: DOUBLE
22840: LESSEQUAL
22841: IFTRUE 22845
22843: GO 22877
22845: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22846: LD_VAR 0 1
22850: PPUSH
22851: LD_VAR 0 2
22855: PPUSH
22856: LD_VAR 0 3
22860: PPUSH
22861: LD_VAR 0 4
22865: PPUSH
22866: LD_VAR 0 5
22870: PPUSH
22871: CALL 23121 0 5
22875: GO 22954
22877: LD_INT 300
22879: DOUBLE
22880: GREATEREQUAL
22881: IFFALSE 22889
22883: LD_INT 399
22885: DOUBLE
22886: LESSEQUAL
22887: IFTRUE 22891
22889: GO 22953
22891: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22892: LD_VAR 0 1
22896: PPUSH
22897: LD_VAR 0 2
22901: PPUSH
22902: LD_VAR 0 3
22906: PPUSH
22907: LD_VAR 0 4
22911: PPUSH
22912: LD_VAR 0 5
22916: PPUSH
22917: LD_VAR 0 6
22921: PPUSH
22922: LD_VAR 0 7
22926: PPUSH
22927: LD_VAR 0 8
22931: PPUSH
22932: LD_VAR 0 9
22936: PPUSH
22937: LD_VAR 0 10
22941: PPUSH
22942: LD_VAR 0 11
22946: PPUSH
22947: CALL 20846 0 11
22951: GO 22954
22953: POP
// end ;
22954: PPOPN 11
22956: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22957: LD_VAR 0 1
22961: PPUSH
22962: LD_VAR 0 2
22966: PPUSH
22967: LD_VAR 0 3
22971: PPUSH
22972: LD_VAR 0 4
22976: PPUSH
22977: LD_VAR 0 5
22981: PPUSH
22982: CALL 23103 0 5
// end ; end_of_file
22986: PPOPN 5
22988: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22989: LD_INT 0
22991: PPUSH
22992: PPUSH
22993: PPUSH
22994: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 264
23004: PUSH
23005: LD_EXP 114
23009: EQUAL
23010: IFFALSE 23082
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23012: LD_INT 68
23014: PPUSH
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 255
23024: PPUSH
23025: CALL_OW 321
23029: PUSH
23030: LD_INT 2
23032: EQUAL
23033: IFFALSE 23045
// eff := 70 else
23035: LD_ADDR_VAR 0 4
23039: PUSH
23040: LD_INT 70
23042: ST_TO_ADDR
23043: GO 23053
// eff := 30 ;
23045: LD_ADDR_VAR 0 4
23049: PUSH
23050: LD_INT 30
23052: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23053: LD_VAR 0 1
23057: PPUSH
23058: CALL_OW 250
23062: PPUSH
23063: LD_VAR 0 1
23067: PPUSH
23068: CALL_OW 251
23072: PPUSH
23073: LD_VAR 0 4
23077: PPUSH
23078: CALL_OW 495
// end ; end ;
23082: LD_VAR 0 2
23086: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23087: LD_INT 0
23089: PPUSH
// end ;
23090: LD_VAR 0 4
23094: RET
// export function SOS_Command ( cmd ) ; begin
23095: LD_INT 0
23097: PPUSH
// end ;
23098: LD_VAR 0 2
23102: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23103: LD_INT 0
23105: PPUSH
// if cmd = 121 then
23106: LD_VAR 0 1
23110: PUSH
23111: LD_INT 121
23113: EQUAL
23114: IFFALSE 23116
// end ;
23116: LD_VAR 0 6
23120: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23121: LD_INT 0
23123: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23124: LD_VAR 0 1
23128: PUSH
23129: LD_INT 250
23131: EQUAL
23132: PUSH
23133: LD_VAR 0 2
23137: PPUSH
23138: CALL_OW 264
23142: PUSH
23143: LD_EXP 117
23147: EQUAL
23148: AND
23149: IFFALSE 23170
// MinerPlaceMine ( unit , x , y ) ;
23151: LD_VAR 0 2
23155: PPUSH
23156: LD_VAR 0 4
23160: PPUSH
23161: LD_VAR 0 5
23165: PPUSH
23166: CALL 25519 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23170: LD_VAR 0 1
23174: PUSH
23175: LD_INT 251
23177: EQUAL
23178: PUSH
23179: LD_VAR 0 2
23183: PPUSH
23184: CALL_OW 264
23188: PUSH
23189: LD_EXP 117
23193: EQUAL
23194: AND
23195: IFFALSE 23216
// MinerDetonateMine ( unit , x , y ) ;
23197: LD_VAR 0 2
23201: PPUSH
23202: LD_VAR 0 4
23206: PPUSH
23207: LD_VAR 0 5
23211: PPUSH
23212: CALL 25796 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23216: LD_VAR 0 1
23220: PUSH
23221: LD_INT 252
23223: EQUAL
23224: PUSH
23225: LD_VAR 0 2
23229: PPUSH
23230: CALL_OW 264
23234: PUSH
23235: LD_EXP 117
23239: EQUAL
23240: AND
23241: IFFALSE 23262
// MinerCreateMinefield ( unit , x , y ) ;
23243: LD_VAR 0 2
23247: PPUSH
23248: LD_VAR 0 4
23252: PPUSH
23253: LD_VAR 0 5
23257: PPUSH
23258: CALL 26213 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23262: LD_VAR 0 1
23266: PUSH
23267: LD_INT 253
23269: EQUAL
23270: PUSH
23271: LD_VAR 0 2
23275: PPUSH
23276: CALL_OW 257
23280: PUSH
23281: LD_INT 5
23283: EQUAL
23284: AND
23285: IFFALSE 23306
// ComBinocular ( unit , x , y ) ;
23287: LD_VAR 0 2
23291: PPUSH
23292: LD_VAR 0 4
23296: PPUSH
23297: LD_VAR 0 5
23301: PPUSH
23302: CALL 26584 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23306: LD_VAR 0 1
23310: PUSH
23311: LD_INT 254
23313: EQUAL
23314: PUSH
23315: LD_VAR 0 2
23319: PPUSH
23320: CALL_OW 264
23324: PUSH
23325: LD_EXP 112
23329: EQUAL
23330: AND
23331: PUSH
23332: LD_VAR 0 3
23336: PPUSH
23337: CALL_OW 263
23341: PUSH
23342: LD_INT 3
23344: EQUAL
23345: AND
23346: IFFALSE 23362
// HackDestroyVehicle ( unit , selectedUnit ) ;
23348: LD_VAR 0 2
23352: PPUSH
23353: LD_VAR 0 3
23357: PPUSH
23358: CALL 24879 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23362: LD_VAR 0 1
23366: PUSH
23367: LD_INT 255
23369: EQUAL
23370: PUSH
23371: LD_VAR 0 2
23375: PPUSH
23376: CALL_OW 264
23380: PUSH
23381: LD_INT 14
23383: PUSH
23384: LD_INT 53
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: IN
23391: AND
23392: PUSH
23393: LD_VAR 0 4
23397: PPUSH
23398: LD_VAR 0 5
23402: PPUSH
23403: CALL_OW 488
23407: AND
23408: IFFALSE 23432
// CutTreeXYR ( unit , x , y , 12 ) ;
23410: LD_VAR 0 2
23414: PPUSH
23415: LD_VAR 0 4
23419: PPUSH
23420: LD_VAR 0 5
23424: PPUSH
23425: LD_INT 12
23427: PPUSH
23428: CALL 23445 0 4
// end ;
23432: LD_VAR 0 6
23436: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23437: LD_INT 0
23439: PPUSH
// end ;
23440: LD_VAR 0 4
23444: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23445: LD_INT 0
23447: PPUSH
23448: PPUSH
23449: PPUSH
23450: PPUSH
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23456: LD_VAR 0 1
23460: NOT
23461: PUSH
23462: LD_VAR 0 2
23466: PPUSH
23467: LD_VAR 0 3
23471: PPUSH
23472: CALL_OW 488
23476: NOT
23477: OR
23478: PUSH
23479: LD_VAR 0 4
23483: NOT
23484: OR
23485: IFFALSE 23489
// exit ;
23487: GO 23829
// list := [ ] ;
23489: LD_ADDR_VAR 0 13
23493: PUSH
23494: EMPTY
23495: ST_TO_ADDR
// if x - r < 0 then
23496: LD_VAR 0 2
23500: PUSH
23501: LD_VAR 0 4
23505: MINUS
23506: PUSH
23507: LD_INT 0
23509: LESS
23510: IFFALSE 23522
// min_x := 0 else
23512: LD_ADDR_VAR 0 7
23516: PUSH
23517: LD_INT 0
23519: ST_TO_ADDR
23520: GO 23538
// min_x := x - r ;
23522: LD_ADDR_VAR 0 7
23526: PUSH
23527: LD_VAR 0 2
23531: PUSH
23532: LD_VAR 0 4
23536: MINUS
23537: ST_TO_ADDR
// if y - r < 0 then
23538: LD_VAR 0 3
23542: PUSH
23543: LD_VAR 0 4
23547: MINUS
23548: PUSH
23549: LD_INT 0
23551: LESS
23552: IFFALSE 23564
// min_y := 0 else
23554: LD_ADDR_VAR 0 8
23558: PUSH
23559: LD_INT 0
23561: ST_TO_ADDR
23562: GO 23580
// min_y := y - r ;
23564: LD_ADDR_VAR 0 8
23568: PUSH
23569: LD_VAR 0 3
23573: PUSH
23574: LD_VAR 0 4
23578: MINUS
23579: ST_TO_ADDR
// max_x := x + r ;
23580: LD_ADDR_VAR 0 9
23584: PUSH
23585: LD_VAR 0 2
23589: PUSH
23590: LD_VAR 0 4
23594: PLUS
23595: ST_TO_ADDR
// max_y := y + r ;
23596: LD_ADDR_VAR 0 10
23600: PUSH
23601: LD_VAR 0 3
23605: PUSH
23606: LD_VAR 0 4
23610: PLUS
23611: ST_TO_ADDR
// for _x = min_x to max_x do
23612: LD_ADDR_VAR 0 11
23616: PUSH
23617: DOUBLE
23618: LD_VAR 0 7
23622: DEC
23623: ST_TO_ADDR
23624: LD_VAR 0 9
23628: PUSH
23629: FOR_TO
23630: IFFALSE 23747
// for _y = min_y to max_y do
23632: LD_ADDR_VAR 0 12
23636: PUSH
23637: DOUBLE
23638: LD_VAR 0 8
23642: DEC
23643: ST_TO_ADDR
23644: LD_VAR 0 10
23648: PUSH
23649: FOR_TO
23650: IFFALSE 23743
// begin if not ValidHex ( _x , _y ) then
23652: LD_VAR 0 11
23656: PPUSH
23657: LD_VAR 0 12
23661: PPUSH
23662: CALL_OW 488
23666: NOT
23667: IFFALSE 23671
// continue ;
23669: GO 23649
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23671: LD_VAR 0 11
23675: PPUSH
23676: LD_VAR 0 12
23680: PPUSH
23681: CALL_OW 351
23685: PUSH
23686: LD_VAR 0 11
23690: PPUSH
23691: LD_VAR 0 12
23695: PPUSH
23696: CALL_OW 554
23700: AND
23701: IFFALSE 23741
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23703: LD_ADDR_VAR 0 13
23707: PUSH
23708: LD_VAR 0 13
23712: PPUSH
23713: LD_VAR 0 13
23717: PUSH
23718: LD_INT 1
23720: PLUS
23721: PPUSH
23722: LD_VAR 0 11
23726: PUSH
23727: LD_VAR 0 12
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PPUSH
23736: CALL_OW 2
23740: ST_TO_ADDR
// end ;
23741: GO 23649
23743: POP
23744: POP
23745: GO 23629
23747: POP
23748: POP
// if not list then
23749: LD_VAR 0 13
23753: NOT
23754: IFFALSE 23758
// exit ;
23756: GO 23829
// for i in list do
23758: LD_ADDR_VAR 0 6
23762: PUSH
23763: LD_VAR 0 13
23767: PUSH
23768: FOR_IN
23769: IFFALSE 23827
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23771: LD_VAR 0 1
23775: PPUSH
23776: LD_STRING M
23778: PUSH
23779: LD_VAR 0 6
23783: PUSH
23784: LD_INT 1
23786: ARRAY
23787: PUSH
23788: LD_VAR 0 6
23792: PUSH
23793: LD_INT 2
23795: ARRAY
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: PUSH
23818: EMPTY
23819: LIST
23820: PPUSH
23821: CALL_OW 447
23825: GO 23768
23827: POP
23828: POP
// end ;
23829: LD_VAR 0 5
23833: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23834: LD_EXP 100
23838: NOT
23839: IFFALSE 23889
23841: GO 23843
23843: DISABLE
// begin initHack := true ;
23844: LD_ADDR_EXP 100
23848: PUSH
23849: LD_INT 1
23851: ST_TO_ADDR
// hackTanks := [ ] ;
23852: LD_ADDR_EXP 101
23856: PUSH
23857: EMPTY
23858: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23859: LD_ADDR_EXP 102
23863: PUSH
23864: EMPTY
23865: ST_TO_ADDR
// hackLimit := 3 ;
23866: LD_ADDR_EXP 103
23870: PUSH
23871: LD_INT 3
23873: ST_TO_ADDR
// hackDist := 12 ;
23874: LD_ADDR_EXP 104
23878: PUSH
23879: LD_INT 12
23881: ST_TO_ADDR
// hackCounter := [ ] ;
23882: LD_ADDR_EXP 105
23886: PUSH
23887: EMPTY
23888: ST_TO_ADDR
// end ;
23889: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23890: LD_EXP 100
23894: PUSH
23895: LD_INT 34
23897: PUSH
23898: LD_EXP 112
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PPUSH
23907: CALL_OW 69
23911: AND
23912: IFFALSE 24167
23914: GO 23916
23916: DISABLE
23917: LD_INT 0
23919: PPUSH
23920: PPUSH
// begin enable ;
23921: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23922: LD_ADDR_VAR 0 1
23926: PUSH
23927: LD_INT 34
23929: PUSH
23930: LD_EXP 112
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PPUSH
23939: CALL_OW 69
23943: PUSH
23944: FOR_IN
23945: IFFALSE 24165
// begin if not i in hackTanks then
23947: LD_VAR 0 1
23951: PUSH
23952: LD_EXP 101
23956: IN
23957: NOT
23958: IFFALSE 24041
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23960: LD_ADDR_EXP 101
23964: PUSH
23965: LD_EXP 101
23969: PPUSH
23970: LD_EXP 101
23974: PUSH
23975: LD_INT 1
23977: PLUS
23978: PPUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL_OW 1
23988: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23989: LD_ADDR_EXP 102
23993: PUSH
23994: LD_EXP 102
23998: PPUSH
23999: LD_EXP 102
24003: PUSH
24004: LD_INT 1
24006: PLUS
24007: PPUSH
24008: EMPTY
24009: PPUSH
24010: CALL_OW 1
24014: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24015: LD_ADDR_EXP 105
24019: PUSH
24020: LD_EXP 105
24024: PPUSH
24025: LD_EXP 105
24029: PUSH
24030: LD_INT 1
24032: PLUS
24033: PPUSH
24034: EMPTY
24035: PPUSH
24036: CALL_OW 1
24040: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24041: LD_VAR 0 1
24045: PPUSH
24046: CALL_OW 302
24050: NOT
24051: IFFALSE 24064
// begin HackUnlinkAll ( i ) ;
24053: LD_VAR 0 1
24057: PPUSH
24058: CALL 24170 0 1
// continue ;
24062: GO 23944
// end ; HackCheckCapturedStatus ( i ) ;
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL 24613 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24073: LD_ADDR_VAR 0 2
24077: PUSH
24078: LD_INT 81
24080: PUSH
24081: LD_VAR 0 1
24085: PPUSH
24086: CALL_OW 255
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 33
24097: PUSH
24098: LD_INT 3
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 91
24107: PUSH
24108: LD_VAR 0 1
24112: PUSH
24113: LD_EXP 104
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 50
24125: PUSH
24126: EMPTY
24127: LIST
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: PPUSH
24135: CALL_OW 69
24139: ST_TO_ADDR
// if not tmp then
24140: LD_VAR 0 2
24144: NOT
24145: IFFALSE 24149
// continue ;
24147: GO 23944
// HackLink ( i , tmp ) ;
24149: LD_VAR 0 1
24153: PPUSH
24154: LD_VAR 0 2
24158: PPUSH
24159: CALL 24306 0 2
// end ;
24163: GO 23944
24165: POP
24166: POP
// end ;
24167: PPOPN 2
24169: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24170: LD_INT 0
24172: PPUSH
24173: PPUSH
24174: PPUSH
// if not hack in hackTanks then
24175: LD_VAR 0 1
24179: PUSH
24180: LD_EXP 101
24184: IN
24185: NOT
24186: IFFALSE 24190
// exit ;
24188: GO 24301
// index := GetElementIndex ( hackTanks , hack ) ;
24190: LD_ADDR_VAR 0 4
24194: PUSH
24195: LD_EXP 101
24199: PPUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL 31735 0 2
24209: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24210: LD_EXP 102
24214: PUSH
24215: LD_VAR 0 4
24219: ARRAY
24220: IFFALSE 24301
// begin for i in hackTanksCaptured [ index ] do
24222: LD_ADDR_VAR 0 3
24226: PUSH
24227: LD_EXP 102
24231: PUSH
24232: LD_VAR 0 4
24236: ARRAY
24237: PUSH
24238: FOR_IN
24239: IFFALSE 24265
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24241: LD_VAR 0 3
24245: PUSH
24246: LD_INT 1
24248: ARRAY
24249: PPUSH
24250: LD_VAR 0 3
24254: PUSH
24255: LD_INT 2
24257: ARRAY
24258: PPUSH
24259: CALL_OW 235
24263: GO 24238
24265: POP
24266: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24267: LD_ADDR_EXP 102
24271: PUSH
24272: LD_EXP 102
24276: PPUSH
24277: LD_VAR 0 4
24281: PPUSH
24282: EMPTY
24283: PPUSH
24284: CALL_OW 1
24288: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24289: LD_VAR 0 1
24293: PPUSH
24294: LD_INT 0
24296: PPUSH
24297: CALL_OW 505
// end ; end ;
24301: LD_VAR 0 2
24305: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24306: LD_INT 0
24308: PPUSH
24309: PPUSH
24310: PPUSH
// if not hack in hackTanks or not vehicles then
24311: LD_VAR 0 1
24315: PUSH
24316: LD_EXP 101
24320: IN
24321: NOT
24322: PUSH
24323: LD_VAR 0 2
24327: NOT
24328: OR
24329: IFFALSE 24333
// exit ;
24331: GO 24608
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24333: LD_ADDR_VAR 0 2
24337: PUSH
24338: LD_VAR 0 1
24342: PPUSH
24343: LD_VAR 0 2
24347: PPUSH
24348: LD_INT 1
24350: PPUSH
24351: LD_INT 1
24353: PPUSH
24354: CALL 32385 0 4
24358: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24359: LD_ADDR_VAR 0 5
24363: PUSH
24364: LD_EXP 101
24368: PPUSH
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL 31735 0 2
24378: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24379: LD_EXP 102
24383: PUSH
24384: LD_VAR 0 5
24388: ARRAY
24389: PUSH
24390: LD_EXP 103
24394: LESS
24395: IFFALSE 24584
// begin for i := 1 to vehicles do
24397: LD_ADDR_VAR 0 4
24401: PUSH
24402: DOUBLE
24403: LD_INT 1
24405: DEC
24406: ST_TO_ADDR
24407: LD_VAR 0 2
24411: PUSH
24412: FOR_TO
24413: IFFALSE 24582
// begin if hackTanksCaptured [ index ] = hackLimit then
24415: LD_EXP 102
24419: PUSH
24420: LD_VAR 0 5
24424: ARRAY
24425: PUSH
24426: LD_EXP 103
24430: EQUAL
24431: IFFALSE 24435
// break ;
24433: GO 24582
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24435: LD_ADDR_EXP 105
24439: PUSH
24440: LD_EXP 105
24444: PPUSH
24445: LD_VAR 0 5
24449: PPUSH
24450: LD_EXP 105
24454: PUSH
24455: LD_VAR 0 5
24459: ARRAY
24460: PUSH
24461: LD_INT 1
24463: PLUS
24464: PPUSH
24465: CALL_OW 1
24469: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24470: LD_ADDR_EXP 102
24474: PUSH
24475: LD_EXP 102
24479: PPUSH
24480: LD_VAR 0 5
24484: PUSH
24485: LD_EXP 102
24489: PUSH
24490: LD_VAR 0 5
24494: ARRAY
24495: PUSH
24496: LD_INT 1
24498: PLUS
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PPUSH
24504: LD_VAR 0 2
24508: PUSH
24509: LD_VAR 0 4
24513: ARRAY
24514: PUSH
24515: LD_VAR 0 2
24519: PUSH
24520: LD_VAR 0 4
24524: ARRAY
24525: PPUSH
24526: CALL_OW 255
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PPUSH
24535: CALL 31950 0 3
24539: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24540: LD_VAR 0 2
24544: PUSH
24545: LD_VAR 0 4
24549: ARRAY
24550: PPUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: CALL_OW 255
24560: PPUSH
24561: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24565: LD_VAR 0 2
24569: PUSH
24570: LD_VAR 0 4
24574: ARRAY
24575: PPUSH
24576: CALL_OW 141
// end ;
24580: GO 24412
24582: POP
24583: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24584: LD_VAR 0 1
24588: PPUSH
24589: LD_EXP 102
24593: PUSH
24594: LD_VAR 0 5
24598: ARRAY
24599: PUSH
24600: LD_INT 0
24602: PLUS
24603: PPUSH
24604: CALL_OW 505
// end ;
24608: LD_VAR 0 3
24612: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24613: LD_INT 0
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
// if not hack in hackTanks then
24619: LD_VAR 0 1
24623: PUSH
24624: LD_EXP 101
24628: IN
24629: NOT
24630: IFFALSE 24634
// exit ;
24632: GO 24874
// index := GetElementIndex ( hackTanks , hack ) ;
24634: LD_ADDR_VAR 0 4
24638: PUSH
24639: LD_EXP 101
24643: PPUSH
24644: LD_VAR 0 1
24648: PPUSH
24649: CALL 31735 0 2
24653: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: DOUBLE
24660: LD_EXP 102
24664: PUSH
24665: LD_VAR 0 4
24669: ARRAY
24670: INC
24671: ST_TO_ADDR
24672: LD_INT 1
24674: PUSH
24675: FOR_DOWNTO
24676: IFFALSE 24848
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24678: LD_ADDR_VAR 0 5
24682: PUSH
24683: LD_EXP 102
24687: PUSH
24688: LD_VAR 0 4
24692: ARRAY
24693: PUSH
24694: LD_VAR 0 3
24698: ARRAY
24699: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24700: LD_VAR 0 5
24704: PUSH
24705: LD_INT 1
24707: ARRAY
24708: PPUSH
24709: CALL_OW 302
24713: NOT
24714: PUSH
24715: LD_VAR 0 5
24719: PUSH
24720: LD_INT 1
24722: ARRAY
24723: PPUSH
24724: CALL_OW 255
24728: PUSH
24729: LD_VAR 0 1
24733: PPUSH
24734: CALL_OW 255
24738: NONEQUAL
24739: OR
24740: IFFALSE 24846
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24742: LD_VAR 0 5
24746: PUSH
24747: LD_INT 1
24749: ARRAY
24750: PPUSH
24751: CALL_OW 305
24755: PUSH
24756: LD_VAR 0 5
24760: PUSH
24761: LD_INT 1
24763: ARRAY
24764: PPUSH
24765: CALL_OW 255
24769: PUSH
24770: LD_VAR 0 1
24774: PPUSH
24775: CALL_OW 255
24779: EQUAL
24780: AND
24781: IFFALSE 24805
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24783: LD_VAR 0 5
24787: PUSH
24788: LD_INT 1
24790: ARRAY
24791: PPUSH
24792: LD_VAR 0 5
24796: PUSH
24797: LD_INT 2
24799: ARRAY
24800: PPUSH
24801: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24805: LD_ADDR_EXP 102
24809: PUSH
24810: LD_EXP 102
24814: PPUSH
24815: LD_VAR 0 4
24819: PPUSH
24820: LD_EXP 102
24824: PUSH
24825: LD_VAR 0 4
24829: ARRAY
24830: PPUSH
24831: LD_VAR 0 3
24835: PPUSH
24836: CALL_OW 3
24840: PPUSH
24841: CALL_OW 1
24845: ST_TO_ADDR
// end ; end ;
24846: GO 24675
24848: POP
24849: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24850: LD_VAR 0 1
24854: PPUSH
24855: LD_EXP 102
24859: PUSH
24860: LD_VAR 0 4
24864: ARRAY
24865: PUSH
24866: LD_INT 0
24868: PLUS
24869: PPUSH
24870: CALL_OW 505
// end ;
24874: LD_VAR 0 2
24878: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24879: LD_INT 0
24881: PPUSH
24882: PPUSH
24883: PPUSH
24884: PPUSH
// if not hack in hackTanks then
24885: LD_VAR 0 1
24889: PUSH
24890: LD_EXP 101
24894: IN
24895: NOT
24896: IFFALSE 24900
// exit ;
24898: GO 24985
// index := GetElementIndex ( hackTanks , hack ) ;
24900: LD_ADDR_VAR 0 5
24904: PUSH
24905: LD_EXP 101
24909: PPUSH
24910: LD_VAR 0 1
24914: PPUSH
24915: CALL 31735 0 2
24919: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24920: LD_ADDR_VAR 0 4
24924: PUSH
24925: DOUBLE
24926: LD_INT 1
24928: DEC
24929: ST_TO_ADDR
24930: LD_EXP 102
24934: PUSH
24935: LD_VAR 0 5
24939: ARRAY
24940: PUSH
24941: FOR_TO
24942: IFFALSE 24983
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24944: LD_EXP 102
24948: PUSH
24949: LD_VAR 0 5
24953: ARRAY
24954: PUSH
24955: LD_VAR 0 4
24959: ARRAY
24960: PUSH
24961: LD_INT 1
24963: ARRAY
24964: PUSH
24965: LD_VAR 0 2
24969: EQUAL
24970: IFFALSE 24981
// KillUnit ( vehicle ) ;
24972: LD_VAR 0 2
24976: PPUSH
24977: CALL_OW 66
24981: GO 24941
24983: POP
24984: POP
// end ;
24985: LD_VAR 0 3
24989: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24990: LD_EXP 106
24994: NOT
24995: IFFALSE 25030
24997: GO 24999
24999: DISABLE
// begin initMiner := true ;
25000: LD_ADDR_EXP 106
25004: PUSH
25005: LD_INT 1
25007: ST_TO_ADDR
// minersList := [ ] ;
25008: LD_ADDR_EXP 107
25012: PUSH
25013: EMPTY
25014: ST_TO_ADDR
// minerMinesList := [ ] ;
25015: LD_ADDR_EXP 108
25019: PUSH
25020: EMPTY
25021: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25022: LD_ADDR_EXP 109
25026: PUSH
25027: LD_INT 5
25029: ST_TO_ADDR
// end ;
25030: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25031: LD_EXP 106
25035: PUSH
25036: LD_INT 34
25038: PUSH
25039: LD_EXP 117
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PPUSH
25048: CALL_OW 69
25052: AND
25053: IFFALSE 25516
25055: GO 25057
25057: DISABLE
25058: LD_INT 0
25060: PPUSH
25061: PPUSH
25062: PPUSH
25063: PPUSH
// begin enable ;
25064: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25065: LD_ADDR_VAR 0 1
25069: PUSH
25070: LD_INT 34
25072: PUSH
25073: LD_EXP 117
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PPUSH
25082: CALL_OW 69
25086: PUSH
25087: FOR_IN
25088: IFFALSE 25160
// begin if not i in minersList then
25090: LD_VAR 0 1
25094: PUSH
25095: LD_EXP 107
25099: IN
25100: NOT
25101: IFFALSE 25158
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25103: LD_ADDR_EXP 107
25107: PUSH
25108: LD_EXP 107
25112: PPUSH
25113: LD_EXP 107
25117: PUSH
25118: LD_INT 1
25120: PLUS
25121: PPUSH
25122: LD_VAR 0 1
25126: PPUSH
25127: CALL_OW 1
25131: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25132: LD_ADDR_EXP 108
25136: PUSH
25137: LD_EXP 108
25141: PPUSH
25142: LD_EXP 108
25146: PUSH
25147: LD_INT 1
25149: PLUS
25150: PPUSH
25151: EMPTY
25152: PPUSH
25153: CALL_OW 1
25157: ST_TO_ADDR
// end end ;
25158: GO 25087
25160: POP
25161: POP
// for i := minerMinesList downto 1 do
25162: LD_ADDR_VAR 0 1
25166: PUSH
25167: DOUBLE
25168: LD_EXP 108
25172: INC
25173: ST_TO_ADDR
25174: LD_INT 1
25176: PUSH
25177: FOR_DOWNTO
25178: IFFALSE 25514
// begin if IsLive ( minersList [ i ] ) then
25180: LD_EXP 107
25184: PUSH
25185: LD_VAR 0 1
25189: ARRAY
25190: PPUSH
25191: CALL_OW 300
25195: IFFALSE 25223
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25197: LD_EXP 107
25201: PUSH
25202: LD_VAR 0 1
25206: ARRAY
25207: PPUSH
25208: LD_EXP 108
25212: PUSH
25213: LD_VAR 0 1
25217: ARRAY
25218: PPUSH
25219: CALL_OW 505
// if not minerMinesList [ i ] then
25223: LD_EXP 108
25227: PUSH
25228: LD_VAR 0 1
25232: ARRAY
25233: NOT
25234: IFFALSE 25238
// continue ;
25236: GO 25177
// for j := minerMinesList [ i ] downto 1 do
25238: LD_ADDR_VAR 0 2
25242: PUSH
25243: DOUBLE
25244: LD_EXP 108
25248: PUSH
25249: LD_VAR 0 1
25253: ARRAY
25254: INC
25255: ST_TO_ADDR
25256: LD_INT 1
25258: PUSH
25259: FOR_DOWNTO
25260: IFFALSE 25510
// begin side := GetSide ( minersList [ i ] ) ;
25262: LD_ADDR_VAR 0 3
25266: PUSH
25267: LD_EXP 107
25271: PUSH
25272: LD_VAR 0 1
25276: ARRAY
25277: PPUSH
25278: CALL_OW 255
25282: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25283: LD_ADDR_VAR 0 4
25287: PUSH
25288: LD_EXP 108
25292: PUSH
25293: LD_VAR 0 1
25297: ARRAY
25298: PUSH
25299: LD_VAR 0 2
25303: ARRAY
25304: PUSH
25305: LD_INT 1
25307: ARRAY
25308: PPUSH
25309: LD_EXP 108
25313: PUSH
25314: LD_VAR 0 1
25318: ARRAY
25319: PUSH
25320: LD_VAR 0 2
25324: ARRAY
25325: PUSH
25326: LD_INT 2
25328: ARRAY
25329: PPUSH
25330: CALL_OW 428
25334: ST_TO_ADDR
// if not tmp then
25335: LD_VAR 0 4
25339: NOT
25340: IFFALSE 25344
// continue ;
25342: GO 25259
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25344: LD_VAR 0 4
25348: PUSH
25349: LD_INT 81
25351: PUSH
25352: LD_VAR 0 3
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PPUSH
25361: CALL_OW 69
25365: IN
25366: PUSH
25367: LD_EXP 108
25371: PUSH
25372: LD_VAR 0 1
25376: ARRAY
25377: PUSH
25378: LD_VAR 0 2
25382: ARRAY
25383: PUSH
25384: LD_INT 1
25386: ARRAY
25387: PPUSH
25388: LD_EXP 108
25392: PUSH
25393: LD_VAR 0 1
25397: ARRAY
25398: PUSH
25399: LD_VAR 0 2
25403: ARRAY
25404: PUSH
25405: LD_INT 2
25407: ARRAY
25408: PPUSH
25409: CALL_OW 458
25413: AND
25414: IFFALSE 25508
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25416: LD_EXP 108
25420: PUSH
25421: LD_VAR 0 1
25425: ARRAY
25426: PUSH
25427: LD_VAR 0 2
25431: ARRAY
25432: PUSH
25433: LD_INT 1
25435: ARRAY
25436: PPUSH
25437: LD_EXP 108
25441: PUSH
25442: LD_VAR 0 1
25446: ARRAY
25447: PUSH
25448: LD_VAR 0 2
25452: ARRAY
25453: PUSH
25454: LD_INT 2
25456: ARRAY
25457: PPUSH
25458: LD_VAR 0 3
25462: PPUSH
25463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25467: LD_ADDR_EXP 108
25471: PUSH
25472: LD_EXP 108
25476: PPUSH
25477: LD_VAR 0 1
25481: PPUSH
25482: LD_EXP 108
25486: PUSH
25487: LD_VAR 0 1
25491: ARRAY
25492: PPUSH
25493: LD_VAR 0 2
25497: PPUSH
25498: CALL_OW 3
25502: PPUSH
25503: CALL_OW 1
25507: ST_TO_ADDR
// end ; end ;
25508: GO 25259
25510: POP
25511: POP
// end ;
25512: GO 25177
25514: POP
25515: POP
// end ;
25516: PPOPN 4
25518: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25519: LD_INT 0
25521: PPUSH
25522: PPUSH
// result := false ;
25523: LD_ADDR_VAR 0 4
25527: PUSH
25528: LD_INT 0
25530: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25531: LD_VAR 0 1
25535: PPUSH
25536: CALL_OW 264
25540: PUSH
25541: LD_EXP 117
25545: EQUAL
25546: NOT
25547: IFFALSE 25551
// exit ;
25549: GO 25791
// index := GetElementIndex ( minersList , unit ) ;
25551: LD_ADDR_VAR 0 5
25555: PUSH
25556: LD_EXP 107
25560: PPUSH
25561: LD_VAR 0 1
25565: PPUSH
25566: CALL 31735 0 2
25570: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25571: LD_EXP 108
25575: PUSH
25576: LD_VAR 0 5
25580: ARRAY
25581: PUSH
25582: LD_EXP 109
25586: GREATEREQUAL
25587: IFFALSE 25591
// exit ;
25589: GO 25791
// ComMoveXY ( unit , x , y ) ;
25591: LD_VAR 0 1
25595: PPUSH
25596: LD_VAR 0 2
25600: PPUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25610: LD_INT 35
25612: PPUSH
25613: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25617: LD_VAR 0 1
25621: PPUSH
25622: LD_VAR 0 2
25626: PPUSH
25627: LD_VAR 0 3
25631: PPUSH
25632: CALL 62132 0 3
25636: NOT
25637: PUSH
25638: LD_VAR 0 1
25642: PPUSH
25643: CALL_OW 314
25647: AND
25648: IFFALSE 25652
// exit ;
25650: GO 25791
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25652: LD_VAR 0 2
25656: PPUSH
25657: LD_VAR 0 3
25661: PPUSH
25662: CALL_OW 428
25666: PUSH
25667: LD_VAR 0 1
25671: EQUAL
25672: PUSH
25673: LD_VAR 0 1
25677: PPUSH
25678: CALL_OW 314
25682: NOT
25683: AND
25684: IFFALSE 25610
// PlaySoundXY ( x , y , PlantMine ) ;
25686: LD_VAR 0 2
25690: PPUSH
25691: LD_VAR 0 3
25695: PPUSH
25696: LD_STRING PlantMine
25698: PPUSH
25699: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: LD_VAR 0 1
25717: PPUSH
25718: CALL_OW 255
25722: PPUSH
25723: LD_INT 0
25725: PPUSH
25726: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25730: LD_ADDR_EXP 108
25734: PUSH
25735: LD_EXP 108
25739: PPUSH
25740: LD_VAR 0 5
25744: PUSH
25745: LD_EXP 108
25749: PUSH
25750: LD_VAR 0 5
25754: ARRAY
25755: PUSH
25756: LD_INT 1
25758: PLUS
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PPUSH
25764: LD_VAR 0 2
25768: PUSH
25769: LD_VAR 0 3
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PPUSH
25778: CALL 31950 0 3
25782: ST_TO_ADDR
// result := true ;
25783: LD_ADDR_VAR 0 4
25787: PUSH
25788: LD_INT 1
25790: ST_TO_ADDR
// end ;
25791: LD_VAR 0 4
25795: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25796: LD_INT 0
25798: PPUSH
25799: PPUSH
25800: PPUSH
// if not unit in minersList then
25801: LD_VAR 0 1
25805: PUSH
25806: LD_EXP 107
25810: IN
25811: NOT
25812: IFFALSE 25816
// exit ;
25814: GO 26208
// index := GetElementIndex ( minersList , unit ) ;
25816: LD_ADDR_VAR 0 6
25820: PUSH
25821: LD_EXP 107
25825: PPUSH
25826: LD_VAR 0 1
25830: PPUSH
25831: CALL 31735 0 2
25835: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25836: LD_ADDR_VAR 0 5
25840: PUSH
25841: DOUBLE
25842: LD_EXP 108
25846: PUSH
25847: LD_VAR 0 6
25851: ARRAY
25852: INC
25853: ST_TO_ADDR
25854: LD_INT 1
25856: PUSH
25857: FOR_DOWNTO
25858: IFFALSE 26019
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25860: LD_EXP 108
25864: PUSH
25865: LD_VAR 0 6
25869: ARRAY
25870: PUSH
25871: LD_VAR 0 5
25875: ARRAY
25876: PUSH
25877: LD_INT 1
25879: ARRAY
25880: PUSH
25881: LD_VAR 0 2
25885: EQUAL
25886: PUSH
25887: LD_EXP 108
25891: PUSH
25892: LD_VAR 0 6
25896: ARRAY
25897: PUSH
25898: LD_VAR 0 5
25902: ARRAY
25903: PUSH
25904: LD_INT 2
25906: ARRAY
25907: PUSH
25908: LD_VAR 0 3
25912: EQUAL
25913: AND
25914: IFFALSE 26017
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25916: LD_EXP 108
25920: PUSH
25921: LD_VAR 0 6
25925: ARRAY
25926: PUSH
25927: LD_VAR 0 5
25931: ARRAY
25932: PUSH
25933: LD_INT 1
25935: ARRAY
25936: PPUSH
25937: LD_EXP 108
25941: PUSH
25942: LD_VAR 0 6
25946: ARRAY
25947: PUSH
25948: LD_VAR 0 5
25952: ARRAY
25953: PUSH
25954: LD_INT 2
25956: ARRAY
25957: PPUSH
25958: LD_VAR 0 1
25962: PPUSH
25963: CALL_OW 255
25967: PPUSH
25968: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25972: LD_ADDR_EXP 108
25976: PUSH
25977: LD_EXP 108
25981: PPUSH
25982: LD_VAR 0 6
25986: PPUSH
25987: LD_EXP 108
25991: PUSH
25992: LD_VAR 0 6
25996: ARRAY
25997: PPUSH
25998: LD_VAR 0 5
26002: PPUSH
26003: CALL_OW 3
26007: PPUSH
26008: CALL_OW 1
26012: ST_TO_ADDR
// exit ;
26013: POP
26014: POP
26015: GO 26208
// end ; end ;
26017: GO 25857
26019: POP
26020: POP
// for i := minerMinesList [ index ] downto 1 do
26021: LD_ADDR_VAR 0 5
26025: PUSH
26026: DOUBLE
26027: LD_EXP 108
26031: PUSH
26032: LD_VAR 0 6
26036: ARRAY
26037: INC
26038: ST_TO_ADDR
26039: LD_INT 1
26041: PUSH
26042: FOR_DOWNTO
26043: IFFALSE 26206
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26045: LD_EXP 108
26049: PUSH
26050: LD_VAR 0 6
26054: ARRAY
26055: PUSH
26056: LD_VAR 0 5
26060: ARRAY
26061: PUSH
26062: LD_INT 1
26064: ARRAY
26065: PPUSH
26066: LD_EXP 108
26070: PUSH
26071: LD_VAR 0 6
26075: ARRAY
26076: PUSH
26077: LD_VAR 0 5
26081: ARRAY
26082: PUSH
26083: LD_INT 2
26085: ARRAY
26086: PPUSH
26087: LD_VAR 0 2
26091: PPUSH
26092: LD_VAR 0 3
26096: PPUSH
26097: CALL_OW 298
26101: PUSH
26102: LD_INT 6
26104: LESS
26105: IFFALSE 26204
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26107: LD_EXP 108
26111: PUSH
26112: LD_VAR 0 6
26116: ARRAY
26117: PUSH
26118: LD_VAR 0 5
26122: ARRAY
26123: PUSH
26124: LD_INT 1
26126: ARRAY
26127: PPUSH
26128: LD_EXP 108
26132: PUSH
26133: LD_VAR 0 6
26137: ARRAY
26138: PUSH
26139: LD_VAR 0 5
26143: ARRAY
26144: PUSH
26145: LD_INT 2
26147: ARRAY
26148: PPUSH
26149: LD_VAR 0 1
26153: PPUSH
26154: CALL_OW 255
26158: PPUSH
26159: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26163: LD_ADDR_EXP 108
26167: PUSH
26168: LD_EXP 108
26172: PPUSH
26173: LD_VAR 0 6
26177: PPUSH
26178: LD_EXP 108
26182: PUSH
26183: LD_VAR 0 6
26187: ARRAY
26188: PPUSH
26189: LD_VAR 0 5
26193: PPUSH
26194: CALL_OW 3
26198: PPUSH
26199: CALL_OW 1
26203: ST_TO_ADDR
// end ; end ;
26204: GO 26042
26206: POP
26207: POP
// end ;
26208: LD_VAR 0 4
26212: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26213: LD_INT 0
26215: PPUSH
26216: PPUSH
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26224: LD_VAR 0 1
26228: PPUSH
26229: CALL_OW 264
26233: PUSH
26234: LD_EXP 117
26238: EQUAL
26239: NOT
26240: PUSH
26241: LD_VAR 0 1
26245: PUSH
26246: LD_EXP 107
26250: IN
26251: NOT
26252: OR
26253: IFFALSE 26257
// exit ;
26255: GO 26579
// index := GetElementIndex ( minersList , unit ) ;
26257: LD_ADDR_VAR 0 6
26261: PUSH
26262: LD_EXP 107
26266: PPUSH
26267: LD_VAR 0 1
26271: PPUSH
26272: CALL 31735 0 2
26276: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26277: LD_ADDR_VAR 0 8
26281: PUSH
26282: LD_EXP 109
26286: PUSH
26287: LD_EXP 108
26291: PUSH
26292: LD_VAR 0 6
26296: ARRAY
26297: MINUS
26298: ST_TO_ADDR
// if not minesFreeAmount then
26299: LD_VAR 0 8
26303: NOT
26304: IFFALSE 26308
// exit ;
26306: GO 26579
// tmp := [ ] ;
26308: LD_ADDR_VAR 0 7
26312: PUSH
26313: EMPTY
26314: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26315: LD_ADDR_VAR 0 5
26319: PUSH
26320: DOUBLE
26321: LD_INT 1
26323: DEC
26324: ST_TO_ADDR
26325: LD_VAR 0 8
26329: PUSH
26330: FOR_TO
26331: IFFALSE 26526
// begin _d := rand ( 0 , 5 ) ;
26333: LD_ADDR_VAR 0 11
26337: PUSH
26338: LD_INT 0
26340: PPUSH
26341: LD_INT 5
26343: PPUSH
26344: CALL_OW 12
26348: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26349: LD_ADDR_VAR 0 12
26353: PUSH
26354: LD_INT 2
26356: PPUSH
26357: LD_INT 6
26359: PPUSH
26360: CALL_OW 12
26364: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26365: LD_ADDR_VAR 0 9
26369: PUSH
26370: LD_VAR 0 2
26374: PPUSH
26375: LD_VAR 0 11
26379: PPUSH
26380: LD_VAR 0 12
26384: PPUSH
26385: CALL_OW 272
26389: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26390: LD_ADDR_VAR 0 10
26394: PUSH
26395: LD_VAR 0 3
26399: PPUSH
26400: LD_VAR 0 11
26404: PPUSH
26405: LD_VAR 0 12
26409: PPUSH
26410: CALL_OW 273
26414: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26415: LD_VAR 0 9
26419: PPUSH
26420: LD_VAR 0 10
26424: PPUSH
26425: CALL_OW 488
26429: PUSH
26430: LD_VAR 0 9
26434: PUSH
26435: LD_VAR 0 10
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_VAR 0 7
26448: IN
26449: NOT
26450: AND
26451: PUSH
26452: LD_VAR 0 9
26456: PPUSH
26457: LD_VAR 0 10
26461: PPUSH
26462: CALL_OW 458
26466: NOT
26467: AND
26468: IFFALSE 26510
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26470: LD_ADDR_VAR 0 7
26474: PUSH
26475: LD_VAR 0 7
26479: PPUSH
26480: LD_VAR 0 7
26484: PUSH
26485: LD_INT 1
26487: PLUS
26488: PPUSH
26489: LD_VAR 0 9
26493: PUSH
26494: LD_VAR 0 10
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 1
26507: ST_TO_ADDR
26508: GO 26524
// i := i - 1 ;
26510: LD_ADDR_VAR 0 5
26514: PUSH
26515: LD_VAR 0 5
26519: PUSH
26520: LD_INT 1
26522: MINUS
26523: ST_TO_ADDR
// end ;
26524: GO 26330
26526: POP
26527: POP
// for i in tmp do
26528: LD_ADDR_VAR 0 5
26532: PUSH
26533: LD_VAR 0 7
26537: PUSH
26538: FOR_IN
26539: IFFALSE 26577
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26541: LD_VAR 0 1
26545: PPUSH
26546: LD_VAR 0 5
26550: PUSH
26551: LD_INT 1
26553: ARRAY
26554: PPUSH
26555: LD_VAR 0 5
26559: PUSH
26560: LD_INT 2
26562: ARRAY
26563: PPUSH
26564: CALL 25519 0 3
26568: NOT
26569: IFFALSE 26575
// exit ;
26571: POP
26572: POP
26573: GO 26579
26575: GO 26538
26577: POP
26578: POP
// end ;
26579: LD_VAR 0 4
26583: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26584: LD_INT 0
26586: PPUSH
26587: PPUSH
26588: PPUSH
26589: PPUSH
26590: PPUSH
26591: PPUSH
26592: PPUSH
// if not GetClass ( unit ) = class_sniper then
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL_OW 257
26602: PUSH
26603: LD_INT 5
26605: EQUAL
26606: NOT
26607: IFFALSE 26611
// exit ;
26609: GO 26999
// dist := 8 ;
26611: LD_ADDR_VAR 0 5
26615: PUSH
26616: LD_INT 8
26618: ST_TO_ADDR
// viewRange := 12 ;
26619: LD_ADDR_VAR 0 7
26623: PUSH
26624: LD_INT 12
26626: ST_TO_ADDR
// side := GetSide ( unit ) ;
26627: LD_ADDR_VAR 0 6
26631: PUSH
26632: LD_VAR 0 1
26636: PPUSH
26637: CALL_OW 255
26641: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26642: LD_INT 61
26644: PPUSH
26645: LD_VAR 0 6
26649: PPUSH
26650: CALL_OW 321
26654: PUSH
26655: LD_INT 2
26657: EQUAL
26658: IFFALSE 26668
// viewRange := 16 ;
26660: LD_ADDR_VAR 0 7
26664: PUSH
26665: LD_INT 16
26667: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26668: LD_VAR 0 1
26672: PPUSH
26673: LD_VAR 0 2
26677: PPUSH
26678: LD_VAR 0 3
26682: PPUSH
26683: CALL_OW 297
26687: PUSH
26688: LD_VAR 0 5
26692: GREATER
26693: IFFALSE 26772
// begin ComMoveXY ( unit , x , y ) ;
26695: LD_VAR 0 1
26699: PPUSH
26700: LD_VAR 0 2
26704: PPUSH
26705: LD_VAR 0 3
26709: PPUSH
26710: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26714: LD_INT 35
26716: PPUSH
26717: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26721: LD_VAR 0 1
26725: PPUSH
26726: LD_VAR 0 2
26730: PPUSH
26731: LD_VAR 0 3
26735: PPUSH
26736: CALL 62132 0 3
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 26999
// until GetDistUnitXY ( unit , x , y ) < dist ;
26745: LD_VAR 0 1
26749: PPUSH
26750: LD_VAR 0 2
26754: PPUSH
26755: LD_VAR 0 3
26759: PPUSH
26760: CALL_OW 297
26764: PUSH
26765: LD_VAR 0 5
26769: LESS
26770: IFFALSE 26714
// end ; ComTurnXY ( unit , x , y ) ;
26772: LD_VAR 0 1
26776: PPUSH
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_VAR 0 3
26786: PPUSH
26787: CALL_OW 118
// wait ( 5 ) ;
26791: LD_INT 5
26793: PPUSH
26794: CALL_OW 67
// _d := GetDir ( unit ) ;
26798: LD_ADDR_VAR 0 10
26802: PUSH
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL_OW 254
26812: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26813: LD_ADDR_VAR 0 8
26817: PUSH
26818: LD_VAR 0 1
26822: PPUSH
26823: CALL_OW 250
26827: PPUSH
26828: LD_VAR 0 10
26832: PPUSH
26833: LD_VAR 0 5
26837: PPUSH
26838: CALL_OW 272
26842: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26843: LD_ADDR_VAR 0 9
26847: PUSH
26848: LD_VAR 0 1
26852: PPUSH
26853: CALL_OW 251
26857: PPUSH
26858: LD_VAR 0 10
26862: PPUSH
26863: LD_VAR 0 5
26867: PPUSH
26868: CALL_OW 273
26872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26873: LD_VAR 0 8
26877: PPUSH
26878: LD_VAR 0 9
26882: PPUSH
26883: CALL_OW 488
26887: NOT
26888: IFFALSE 26892
// exit ;
26890: GO 26999
// ComAnimCustom ( unit , 1 ) ;
26892: LD_VAR 0 1
26896: PPUSH
26897: LD_INT 1
26899: PPUSH
26900: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26904: LD_VAR 0 8
26908: PPUSH
26909: LD_VAR 0 9
26913: PPUSH
26914: LD_VAR 0 6
26918: PPUSH
26919: LD_VAR 0 7
26923: PPUSH
26924: CALL_OW 330
// repeat wait ( 1 ) ;
26928: LD_INT 1
26930: PPUSH
26931: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26935: LD_VAR 0 1
26939: PPUSH
26940: CALL_OW 316
26944: PUSH
26945: LD_VAR 0 1
26949: PPUSH
26950: CALL_OW 314
26954: OR
26955: PUSH
26956: LD_VAR 0 1
26960: PPUSH
26961: CALL_OW 302
26965: NOT
26966: OR
26967: PUSH
26968: LD_VAR 0 1
26972: PPUSH
26973: CALL_OW 301
26977: OR
26978: IFFALSE 26928
// RemoveSeeing ( _x , _y , side ) ;
26980: LD_VAR 0 8
26984: PPUSH
26985: LD_VAR 0 9
26989: PPUSH
26990: LD_VAR 0 6
26994: PPUSH
26995: CALL_OW 331
// end ; end_of_file
26999: LD_VAR 0 4
27003: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27004: LD_INT 0
27006: PPUSH
27007: PPUSH
// if exist_mode then
27008: LD_VAR 0 2
27012: IFFALSE 27037
// unit := CreateCharacter ( prefix & ident ) else
27014: LD_ADDR_VAR 0 5
27018: PUSH
27019: LD_VAR 0 3
27023: PUSH
27024: LD_VAR 0 1
27028: STR
27029: PPUSH
27030: CALL_OW 34
27034: ST_TO_ADDR
27035: GO 27052
// unit := NewCharacter ( ident ) ;
27037: LD_ADDR_VAR 0 5
27041: PUSH
27042: LD_VAR 0 1
27046: PPUSH
27047: CALL_OW 25
27051: ST_TO_ADDR
// result := unit ;
27052: LD_ADDR_VAR 0 4
27056: PUSH
27057: LD_VAR 0 5
27061: ST_TO_ADDR
// end ;
27062: LD_VAR 0 4
27066: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27067: LD_INT 0
27069: PPUSH
27070: PPUSH
// if not side or not nation then
27071: LD_VAR 0 1
27075: NOT
27076: PUSH
27077: LD_VAR 0 2
27081: NOT
27082: OR
27083: IFFALSE 27087
// exit ;
27085: GO 27851
// case nation of nation_american :
27087: LD_VAR 0 2
27091: PUSH
27092: LD_INT 1
27094: DOUBLE
27095: EQUAL
27096: IFTRUE 27100
27098: GO 27314
27100: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27101: LD_ADDR_VAR 0 4
27105: PUSH
27106: LD_INT 35
27108: PUSH
27109: LD_INT 45
27111: PUSH
27112: LD_INT 46
27114: PUSH
27115: LD_INT 47
27117: PUSH
27118: LD_INT 82
27120: PUSH
27121: LD_INT 83
27123: PUSH
27124: LD_INT 84
27126: PUSH
27127: LD_INT 85
27129: PUSH
27130: LD_INT 86
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: LD_INT 6
27141: PUSH
27142: LD_INT 15
27144: PUSH
27145: LD_INT 16
27147: PUSH
27148: LD_INT 7
27150: PUSH
27151: LD_INT 12
27153: PUSH
27154: LD_INT 13
27156: PUSH
27157: LD_INT 10
27159: PUSH
27160: LD_INT 14
27162: PUSH
27163: LD_INT 20
27165: PUSH
27166: LD_INT 21
27168: PUSH
27169: LD_INT 22
27171: PUSH
27172: LD_INT 25
27174: PUSH
27175: LD_INT 32
27177: PUSH
27178: LD_INT 27
27180: PUSH
27181: LD_INT 36
27183: PUSH
27184: LD_INT 69
27186: PUSH
27187: LD_INT 39
27189: PUSH
27190: LD_INT 34
27192: PUSH
27193: LD_INT 40
27195: PUSH
27196: LD_INT 48
27198: PUSH
27199: LD_INT 49
27201: PUSH
27202: LD_INT 50
27204: PUSH
27205: LD_INT 51
27207: PUSH
27208: LD_INT 52
27210: PUSH
27211: LD_INT 53
27213: PUSH
27214: LD_INT 54
27216: PUSH
27217: LD_INT 55
27219: PUSH
27220: LD_INT 56
27222: PUSH
27223: LD_INT 57
27225: PUSH
27226: LD_INT 58
27228: PUSH
27229: LD_INT 59
27231: PUSH
27232: LD_INT 60
27234: PUSH
27235: LD_INT 61
27237: PUSH
27238: LD_INT 62
27240: PUSH
27241: LD_INT 80
27243: PUSH
27244: LD_INT 82
27246: PUSH
27247: LD_INT 83
27249: PUSH
27250: LD_INT 84
27252: PUSH
27253: LD_INT 85
27255: PUSH
27256: LD_INT 86
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: ST_TO_ADDR
27312: GO 27775
27314: LD_INT 2
27316: DOUBLE
27317: EQUAL
27318: IFTRUE 27322
27320: GO 27544
27322: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27323: LD_ADDR_VAR 0 4
27327: PUSH
27328: LD_INT 35
27330: PUSH
27331: LD_INT 45
27333: PUSH
27334: LD_INT 46
27336: PUSH
27337: LD_INT 47
27339: PUSH
27340: LD_INT 82
27342: PUSH
27343: LD_INT 83
27345: PUSH
27346: LD_INT 84
27348: PUSH
27349: LD_INT 85
27351: PUSH
27352: LD_INT 87
27354: PUSH
27355: LD_INT 70
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: LD_INT 11
27363: PUSH
27364: LD_INT 3
27366: PUSH
27367: LD_INT 4
27369: PUSH
27370: LD_INT 5
27372: PUSH
27373: LD_INT 6
27375: PUSH
27376: LD_INT 15
27378: PUSH
27379: LD_INT 18
27381: PUSH
27382: LD_INT 7
27384: PUSH
27385: LD_INT 17
27387: PUSH
27388: LD_INT 8
27390: PUSH
27391: LD_INT 20
27393: PUSH
27394: LD_INT 21
27396: PUSH
27397: LD_INT 22
27399: PUSH
27400: LD_INT 72
27402: PUSH
27403: LD_INT 26
27405: PUSH
27406: LD_INT 69
27408: PUSH
27409: LD_INT 39
27411: PUSH
27412: LD_INT 40
27414: PUSH
27415: LD_INT 41
27417: PUSH
27418: LD_INT 42
27420: PUSH
27421: LD_INT 43
27423: PUSH
27424: LD_INT 48
27426: PUSH
27427: LD_INT 49
27429: PUSH
27430: LD_INT 50
27432: PUSH
27433: LD_INT 51
27435: PUSH
27436: LD_INT 52
27438: PUSH
27439: LD_INT 53
27441: PUSH
27442: LD_INT 54
27444: PUSH
27445: LD_INT 55
27447: PUSH
27448: LD_INT 56
27450: PUSH
27451: LD_INT 60
27453: PUSH
27454: LD_INT 61
27456: PUSH
27457: LD_INT 62
27459: PUSH
27460: LD_INT 66
27462: PUSH
27463: LD_INT 67
27465: PUSH
27466: LD_INT 68
27468: PUSH
27469: LD_INT 81
27471: PUSH
27472: LD_INT 82
27474: PUSH
27475: LD_INT 83
27477: PUSH
27478: LD_INT 84
27480: PUSH
27481: LD_INT 85
27483: PUSH
27484: LD_INT 87
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
27542: GO 27775
27544: LD_INT 3
27546: DOUBLE
27547: EQUAL
27548: IFTRUE 27552
27550: GO 27774
27552: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27553: LD_ADDR_VAR 0 4
27557: PUSH
27558: LD_INT 46
27560: PUSH
27561: LD_INT 47
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: LD_INT 82
27572: PUSH
27573: LD_INT 83
27575: PUSH
27576: LD_INT 84
27578: PUSH
27579: LD_INT 85
27581: PUSH
27582: LD_INT 86
27584: PUSH
27585: LD_INT 11
27587: PUSH
27588: LD_INT 9
27590: PUSH
27591: LD_INT 20
27593: PUSH
27594: LD_INT 19
27596: PUSH
27597: LD_INT 21
27599: PUSH
27600: LD_INT 24
27602: PUSH
27603: LD_INT 22
27605: PUSH
27606: LD_INT 25
27608: PUSH
27609: LD_INT 28
27611: PUSH
27612: LD_INT 29
27614: PUSH
27615: LD_INT 30
27617: PUSH
27618: LD_INT 31
27620: PUSH
27621: LD_INT 37
27623: PUSH
27624: LD_INT 38
27626: PUSH
27627: LD_INT 32
27629: PUSH
27630: LD_INT 27
27632: PUSH
27633: LD_INT 33
27635: PUSH
27636: LD_INT 69
27638: PUSH
27639: LD_INT 39
27641: PUSH
27642: LD_INT 34
27644: PUSH
27645: LD_INT 40
27647: PUSH
27648: LD_INT 71
27650: PUSH
27651: LD_INT 23
27653: PUSH
27654: LD_INT 44
27656: PUSH
27657: LD_INT 48
27659: PUSH
27660: LD_INT 49
27662: PUSH
27663: LD_INT 50
27665: PUSH
27666: LD_INT 51
27668: PUSH
27669: LD_INT 52
27671: PUSH
27672: LD_INT 53
27674: PUSH
27675: LD_INT 54
27677: PUSH
27678: LD_INT 55
27680: PUSH
27681: LD_INT 56
27683: PUSH
27684: LD_INT 57
27686: PUSH
27687: LD_INT 58
27689: PUSH
27690: LD_INT 59
27692: PUSH
27693: LD_INT 63
27695: PUSH
27696: LD_INT 64
27698: PUSH
27699: LD_INT 65
27701: PUSH
27702: LD_INT 82
27704: PUSH
27705: LD_INT 83
27707: PUSH
27708: LD_INT 84
27710: PUSH
27711: LD_INT 85
27713: PUSH
27714: LD_INT 86
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
27772: GO 27775
27774: POP
// if state > - 1 and state < 3 then
27775: LD_VAR 0 3
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: GREATER
27784: PUSH
27785: LD_VAR 0 3
27789: PUSH
27790: LD_INT 3
27792: LESS
27793: AND
27794: IFFALSE 27851
// for i in result do
27796: LD_ADDR_VAR 0 5
27800: PUSH
27801: LD_VAR 0 4
27805: PUSH
27806: FOR_IN
27807: IFFALSE 27849
// if GetTech ( i , side ) <> state then
27809: LD_VAR 0 5
27813: PPUSH
27814: LD_VAR 0 1
27818: PPUSH
27819: CALL_OW 321
27823: PUSH
27824: LD_VAR 0 3
27828: NONEQUAL
27829: IFFALSE 27847
// result := result diff i ;
27831: LD_ADDR_VAR 0 4
27835: PUSH
27836: LD_VAR 0 4
27840: PUSH
27841: LD_VAR 0 5
27845: DIFF
27846: ST_TO_ADDR
27847: GO 27806
27849: POP
27850: POP
// end ;
27851: LD_VAR 0 4
27855: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27856: LD_INT 0
27858: PPUSH
27859: PPUSH
27860: PPUSH
// result := true ;
27861: LD_ADDR_VAR 0 3
27865: PUSH
27866: LD_INT 1
27868: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27869: LD_ADDR_VAR 0 5
27873: PUSH
27874: LD_VAR 0 2
27878: PPUSH
27879: CALL_OW 480
27883: ST_TO_ADDR
// if not tmp then
27884: LD_VAR 0 5
27888: NOT
27889: IFFALSE 27893
// exit ;
27891: GO 27942
// for i in tmp do
27893: LD_ADDR_VAR 0 4
27897: PUSH
27898: LD_VAR 0 5
27902: PUSH
27903: FOR_IN
27904: IFFALSE 27940
// if GetTech ( i , side ) <> state_researched then
27906: LD_VAR 0 4
27910: PPUSH
27911: LD_VAR 0 1
27915: PPUSH
27916: CALL_OW 321
27920: PUSH
27921: LD_INT 2
27923: NONEQUAL
27924: IFFALSE 27938
// begin result := false ;
27926: LD_ADDR_VAR 0 3
27930: PUSH
27931: LD_INT 0
27933: ST_TO_ADDR
// exit ;
27934: POP
27935: POP
27936: GO 27942
// end ;
27938: GO 27903
27940: POP
27941: POP
// end ;
27942: LD_VAR 0 3
27946: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27947: LD_INT 0
27949: PPUSH
27950: PPUSH
27951: PPUSH
27952: PPUSH
27953: PPUSH
27954: PPUSH
27955: PPUSH
27956: PPUSH
27957: PPUSH
27958: PPUSH
27959: PPUSH
27960: PPUSH
27961: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27962: LD_VAR 0 1
27966: NOT
27967: PUSH
27968: LD_VAR 0 1
27972: PPUSH
27973: CALL_OW 257
27977: PUSH
27978: LD_INT 9
27980: NONEQUAL
27981: OR
27982: IFFALSE 27986
// exit ;
27984: GO 28559
// side := GetSide ( unit ) ;
27986: LD_ADDR_VAR 0 9
27990: PUSH
27991: LD_VAR 0 1
27995: PPUSH
27996: CALL_OW 255
28000: ST_TO_ADDR
// tech_space := tech_spacanom ;
28001: LD_ADDR_VAR 0 12
28005: PUSH
28006: LD_INT 29
28008: ST_TO_ADDR
// tech_time := tech_taurad ;
28009: LD_ADDR_VAR 0 13
28013: PUSH
28014: LD_INT 28
28016: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28017: LD_ADDR_VAR 0 11
28021: PUSH
28022: LD_VAR 0 1
28026: PPUSH
28027: CALL_OW 310
28031: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28032: LD_VAR 0 11
28036: PPUSH
28037: CALL_OW 247
28041: PUSH
28042: LD_INT 2
28044: EQUAL
28045: IFFALSE 28049
// exit ;
28047: GO 28559
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28049: LD_ADDR_VAR 0 8
28053: PUSH
28054: LD_INT 81
28056: PUSH
28057: LD_VAR 0 9
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 3
28068: PUSH
28069: LD_INT 21
28071: PUSH
28072: LD_INT 3
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PPUSH
28087: CALL_OW 69
28091: ST_TO_ADDR
// if not tmp then
28092: LD_VAR 0 8
28096: NOT
28097: IFFALSE 28101
// exit ;
28099: GO 28559
// if in_unit then
28101: LD_VAR 0 11
28105: IFFALSE 28129
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28107: LD_ADDR_VAR 0 10
28111: PUSH
28112: LD_VAR 0 8
28116: PPUSH
28117: LD_VAR 0 11
28121: PPUSH
28122: CALL_OW 74
28126: ST_TO_ADDR
28127: GO 28149
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28129: LD_ADDR_VAR 0 10
28133: PUSH
28134: LD_VAR 0 8
28138: PPUSH
28139: LD_VAR 0 1
28143: PPUSH
28144: CALL_OW 74
28148: ST_TO_ADDR
// if not enemy then
28149: LD_VAR 0 10
28153: NOT
28154: IFFALSE 28158
// exit ;
28156: GO 28559
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28158: LD_VAR 0 11
28162: PUSH
28163: LD_VAR 0 11
28167: PPUSH
28168: LD_VAR 0 10
28172: PPUSH
28173: CALL_OW 296
28177: PUSH
28178: LD_INT 13
28180: GREATER
28181: AND
28182: PUSH
28183: LD_VAR 0 1
28187: PPUSH
28188: LD_VAR 0 10
28192: PPUSH
28193: CALL_OW 296
28197: PUSH
28198: LD_INT 12
28200: GREATER
28201: OR
28202: IFFALSE 28206
// exit ;
28204: GO 28559
// missile := [ 1 ] ;
28206: LD_ADDR_VAR 0 14
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: EMPTY
28215: LIST
28216: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28217: LD_VAR 0 9
28221: PPUSH
28222: LD_VAR 0 12
28226: PPUSH
28227: CALL_OW 325
28231: IFFALSE 28260
// missile := Insert ( missile , missile + 1 , 2 ) ;
28233: LD_ADDR_VAR 0 14
28237: PUSH
28238: LD_VAR 0 14
28242: PPUSH
28243: LD_VAR 0 14
28247: PUSH
28248: LD_INT 1
28250: PLUS
28251: PPUSH
28252: LD_INT 2
28254: PPUSH
28255: CALL_OW 2
28259: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28260: LD_VAR 0 9
28264: PPUSH
28265: LD_VAR 0 13
28269: PPUSH
28270: CALL_OW 325
28274: PUSH
28275: LD_VAR 0 10
28279: PPUSH
28280: CALL_OW 255
28284: PPUSH
28285: LD_VAR 0 13
28289: PPUSH
28290: CALL_OW 325
28294: NOT
28295: AND
28296: IFFALSE 28325
// missile := Insert ( missile , missile + 1 , 3 ) ;
28298: LD_ADDR_VAR 0 14
28302: PUSH
28303: LD_VAR 0 14
28307: PPUSH
28308: LD_VAR 0 14
28312: PUSH
28313: LD_INT 1
28315: PLUS
28316: PPUSH
28317: LD_INT 3
28319: PPUSH
28320: CALL_OW 2
28324: ST_TO_ADDR
// if missile < 2 then
28325: LD_VAR 0 14
28329: PUSH
28330: LD_INT 2
28332: LESS
28333: IFFALSE 28337
// exit ;
28335: GO 28559
// x := GetX ( enemy ) ;
28337: LD_ADDR_VAR 0 4
28341: PUSH
28342: LD_VAR 0 10
28346: PPUSH
28347: CALL_OW 250
28351: ST_TO_ADDR
// y := GetY ( enemy ) ;
28352: LD_ADDR_VAR 0 5
28356: PUSH
28357: LD_VAR 0 10
28361: PPUSH
28362: CALL_OW 251
28366: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28367: LD_ADDR_VAR 0 6
28371: PUSH
28372: LD_VAR 0 4
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PPUSH
28381: LD_INT 1
28383: PPUSH
28384: CALL_OW 12
28388: PLUS
28389: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28390: LD_ADDR_VAR 0 7
28394: PUSH
28395: LD_VAR 0 5
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PPUSH
28404: LD_INT 1
28406: PPUSH
28407: CALL_OW 12
28411: PLUS
28412: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28413: LD_VAR 0 6
28417: PPUSH
28418: LD_VAR 0 7
28422: PPUSH
28423: CALL_OW 488
28427: NOT
28428: IFFALSE 28450
// begin _x := x ;
28430: LD_ADDR_VAR 0 6
28434: PUSH
28435: LD_VAR 0 4
28439: ST_TO_ADDR
// _y := y ;
28440: LD_ADDR_VAR 0 7
28444: PUSH
28445: LD_VAR 0 5
28449: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28450: LD_ADDR_VAR 0 3
28454: PUSH
28455: LD_INT 1
28457: PPUSH
28458: LD_VAR 0 14
28462: PPUSH
28463: CALL_OW 12
28467: ST_TO_ADDR
// case i of 1 :
28468: LD_VAR 0 3
28472: PUSH
28473: LD_INT 1
28475: DOUBLE
28476: EQUAL
28477: IFTRUE 28481
28479: GO 28498
28481: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28482: LD_VAR 0 1
28486: PPUSH
28487: LD_VAR 0 10
28491: PPUSH
28492: CALL_OW 115
28496: GO 28559
28498: LD_INT 2
28500: DOUBLE
28501: EQUAL
28502: IFTRUE 28506
28504: GO 28528
28506: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28507: LD_VAR 0 1
28511: PPUSH
28512: LD_VAR 0 6
28516: PPUSH
28517: LD_VAR 0 7
28521: PPUSH
28522: CALL_OW 153
28526: GO 28559
28528: LD_INT 3
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28558
28536: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28537: LD_VAR 0 1
28541: PPUSH
28542: LD_VAR 0 6
28546: PPUSH
28547: LD_VAR 0 7
28551: PPUSH
28552: CALL_OW 154
28556: GO 28559
28558: POP
// end ;
28559: LD_VAR 0 2
28563: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28564: LD_INT 0
28566: PPUSH
28567: PPUSH
28568: PPUSH
28569: PPUSH
28570: PPUSH
28571: PPUSH
// if not unit or not building then
28572: LD_VAR 0 1
28576: NOT
28577: PUSH
28578: LD_VAR 0 2
28582: NOT
28583: OR
28584: IFFALSE 28588
// exit ;
28586: GO 28746
// x := GetX ( building ) ;
28588: LD_ADDR_VAR 0 5
28592: PUSH
28593: LD_VAR 0 2
28597: PPUSH
28598: CALL_OW 250
28602: ST_TO_ADDR
// y := GetY ( building ) ;
28603: LD_ADDR_VAR 0 6
28607: PUSH
28608: LD_VAR 0 2
28612: PPUSH
28613: CALL_OW 251
28617: ST_TO_ADDR
// for i = 0 to 5 do
28618: LD_ADDR_VAR 0 4
28622: PUSH
28623: DOUBLE
28624: LD_INT 0
28626: DEC
28627: ST_TO_ADDR
28628: LD_INT 5
28630: PUSH
28631: FOR_TO
28632: IFFALSE 28744
// begin _x := ShiftX ( x , i , 3 ) ;
28634: LD_ADDR_VAR 0 7
28638: PUSH
28639: LD_VAR 0 5
28643: PPUSH
28644: LD_VAR 0 4
28648: PPUSH
28649: LD_INT 3
28651: PPUSH
28652: CALL_OW 272
28656: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28657: LD_ADDR_VAR 0 8
28661: PUSH
28662: LD_VAR 0 6
28666: PPUSH
28667: LD_VAR 0 4
28671: PPUSH
28672: LD_INT 3
28674: PPUSH
28675: CALL_OW 273
28679: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28680: LD_VAR 0 7
28684: PPUSH
28685: LD_VAR 0 8
28689: PPUSH
28690: CALL_OW 488
28694: NOT
28695: IFFALSE 28699
// continue ;
28697: GO 28631
// if HexInfo ( _x , _y ) = 0 then
28699: LD_VAR 0 7
28703: PPUSH
28704: LD_VAR 0 8
28708: PPUSH
28709: CALL_OW 428
28713: PUSH
28714: LD_INT 0
28716: EQUAL
28717: IFFALSE 28742
// begin ComMoveXY ( unit , _x , _y ) ;
28719: LD_VAR 0 1
28723: PPUSH
28724: LD_VAR 0 7
28728: PPUSH
28729: LD_VAR 0 8
28733: PPUSH
28734: CALL_OW 111
// exit ;
28738: POP
28739: POP
28740: GO 28746
// end ; end ;
28742: GO 28631
28744: POP
28745: POP
// end ;
28746: LD_VAR 0 3
28750: RET
// export function ScanBase ( side , base_area ) ; begin
28751: LD_INT 0
28753: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28754: LD_ADDR_VAR 0 3
28758: PUSH
28759: LD_VAR 0 2
28763: PPUSH
28764: LD_INT 81
28766: PUSH
28767: LD_VAR 0 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PPUSH
28776: CALL_OW 70
28780: ST_TO_ADDR
// end ;
28781: LD_VAR 0 3
28785: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28786: LD_INT 0
28788: PPUSH
28789: PPUSH
28790: PPUSH
28791: PPUSH
// result := false ;
28792: LD_ADDR_VAR 0 2
28796: PUSH
28797: LD_INT 0
28799: ST_TO_ADDR
// side := GetSide ( unit ) ;
28800: LD_ADDR_VAR 0 3
28804: PUSH
28805: LD_VAR 0 1
28809: PPUSH
28810: CALL_OW 255
28814: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28815: LD_ADDR_VAR 0 4
28819: PUSH
28820: LD_VAR 0 1
28824: PPUSH
28825: CALL_OW 248
28829: ST_TO_ADDR
// case nat of 1 :
28830: LD_VAR 0 4
28834: PUSH
28835: LD_INT 1
28837: DOUBLE
28838: EQUAL
28839: IFTRUE 28843
28841: GO 28854
28843: POP
// tech := tech_lassight ; 2 :
28844: LD_ADDR_VAR 0 5
28848: PUSH
28849: LD_INT 12
28851: ST_TO_ADDR
28852: GO 28893
28854: LD_INT 2
28856: DOUBLE
28857: EQUAL
28858: IFTRUE 28862
28860: GO 28873
28862: POP
// tech := tech_mortar ; 3 :
28863: LD_ADDR_VAR 0 5
28867: PUSH
28868: LD_INT 41
28870: ST_TO_ADDR
28871: GO 28893
28873: LD_INT 3
28875: DOUBLE
28876: EQUAL
28877: IFTRUE 28881
28879: GO 28892
28881: POP
// tech := tech_bazooka ; end ;
28882: LD_ADDR_VAR 0 5
28886: PUSH
28887: LD_INT 44
28889: ST_TO_ADDR
28890: GO 28893
28892: POP
// if Researched ( side , tech ) then
28893: LD_VAR 0 3
28897: PPUSH
28898: LD_VAR 0 5
28902: PPUSH
28903: CALL_OW 325
28907: IFFALSE 28934
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28909: LD_ADDR_VAR 0 2
28913: PUSH
28914: LD_INT 5
28916: PUSH
28917: LD_INT 8
28919: PUSH
28920: LD_INT 9
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: LIST
28927: PUSH
28928: LD_VAR 0 4
28932: ARRAY
28933: ST_TO_ADDR
// end ;
28934: LD_VAR 0 2
28938: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28939: LD_INT 0
28941: PPUSH
28942: PPUSH
28943: PPUSH
// if not mines then
28944: LD_VAR 0 2
28948: NOT
28949: IFFALSE 28953
// exit ;
28951: GO 29097
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28953: LD_ADDR_VAR 0 5
28957: PUSH
28958: LD_INT 81
28960: PUSH
28961: LD_VAR 0 1
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 3
28972: PUSH
28973: LD_INT 21
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 69
28995: ST_TO_ADDR
// for i in mines do
28996: LD_ADDR_VAR 0 4
29000: PUSH
29001: LD_VAR 0 2
29005: PUSH
29006: FOR_IN
29007: IFFALSE 29095
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29009: LD_VAR 0 4
29013: PUSH
29014: LD_INT 1
29016: ARRAY
29017: PPUSH
29018: LD_VAR 0 4
29022: PUSH
29023: LD_INT 2
29025: ARRAY
29026: PPUSH
29027: CALL_OW 458
29031: NOT
29032: IFFALSE 29036
// continue ;
29034: GO 29006
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29036: LD_VAR 0 4
29040: PUSH
29041: LD_INT 1
29043: ARRAY
29044: PPUSH
29045: LD_VAR 0 4
29049: PUSH
29050: LD_INT 2
29052: ARRAY
29053: PPUSH
29054: CALL_OW 428
29058: PUSH
29059: LD_VAR 0 5
29063: IN
29064: IFFALSE 29093
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29066: LD_VAR 0 4
29070: PUSH
29071: LD_INT 1
29073: ARRAY
29074: PPUSH
29075: LD_VAR 0 4
29079: PUSH
29080: LD_INT 2
29082: ARRAY
29083: PPUSH
29084: LD_VAR 0 1
29088: PPUSH
29089: CALL_OW 456
// end ;
29093: GO 29006
29095: POP
29096: POP
// end ;
29097: LD_VAR 0 3
29101: RET
// export function Count ( array ) ; var i ; begin
29102: LD_INT 0
29104: PPUSH
29105: PPUSH
// result := 0 ;
29106: LD_ADDR_VAR 0 2
29110: PUSH
29111: LD_INT 0
29113: ST_TO_ADDR
// for i in array do
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_VAR 0 1
29123: PUSH
29124: FOR_IN
29125: IFFALSE 29149
// if i then
29127: LD_VAR 0 3
29131: IFFALSE 29147
// result := result + 1 ;
29133: LD_ADDR_VAR 0 2
29137: PUSH
29138: LD_VAR 0 2
29142: PUSH
29143: LD_INT 1
29145: PLUS
29146: ST_TO_ADDR
29147: GO 29124
29149: POP
29150: POP
// end ;
29151: LD_VAR 0 2
29155: RET
// export function IsEmpty ( building ) ; begin
29156: LD_INT 0
29158: PPUSH
// if not building then
29159: LD_VAR 0 1
29163: NOT
29164: IFFALSE 29168
// exit ;
29166: GO 29211
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29168: LD_ADDR_VAR 0 2
29172: PUSH
29173: LD_VAR 0 1
29177: PUSH
29178: LD_INT 22
29180: PUSH
29181: LD_VAR 0 1
29185: PPUSH
29186: CALL_OW 255
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 58
29197: PUSH
29198: EMPTY
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 69
29209: IN
29210: ST_TO_ADDR
// end ;
29211: LD_VAR 0 2
29215: RET
// export function IsNotFull ( building ) ; begin
29216: LD_INT 0
29218: PPUSH
// if not building then
29219: LD_VAR 0 1
29223: NOT
29224: IFFALSE 29228
// exit ;
29226: GO 29247
// result := UnitsInside ( building ) < 6 ;
29228: LD_ADDR_VAR 0 2
29232: PUSH
29233: LD_VAR 0 1
29237: PPUSH
29238: CALL_OW 313
29242: PUSH
29243: LD_INT 6
29245: LESS
29246: ST_TO_ADDR
// end ;
29247: LD_VAR 0 2
29251: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29252: LD_INT 0
29254: PPUSH
29255: PPUSH
29256: PPUSH
29257: PPUSH
// tmp := [ ] ;
29258: LD_ADDR_VAR 0 3
29262: PUSH
29263: EMPTY
29264: ST_TO_ADDR
// list := [ ] ;
29265: LD_ADDR_VAR 0 5
29269: PUSH
29270: EMPTY
29271: ST_TO_ADDR
// for i = 16 to 25 do
29272: LD_ADDR_VAR 0 4
29276: PUSH
29277: DOUBLE
29278: LD_INT 16
29280: DEC
29281: ST_TO_ADDR
29282: LD_INT 25
29284: PUSH
29285: FOR_TO
29286: IFFALSE 29359
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: LD_VAR 0 3
29297: PUSH
29298: LD_INT 22
29300: PUSH
29301: LD_VAR 0 1
29305: PPUSH
29306: CALL_OW 255
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 91
29317: PUSH
29318: LD_VAR 0 1
29322: PUSH
29323: LD_INT 6
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 30
29333: PUSH
29334: LD_VAR 0 4
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: PPUSH
29351: CALL_OW 69
29355: ADD
29356: ST_TO_ADDR
29357: GO 29285
29359: POP
29360: POP
// for i = 1 to tmp do
29361: LD_ADDR_VAR 0 4
29365: PUSH
29366: DOUBLE
29367: LD_INT 1
29369: DEC
29370: ST_TO_ADDR
29371: LD_VAR 0 3
29375: PUSH
29376: FOR_TO
29377: IFFALSE 29465
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29379: LD_ADDR_VAR 0 5
29383: PUSH
29384: LD_VAR 0 5
29388: PUSH
29389: LD_VAR 0 3
29393: PUSH
29394: LD_VAR 0 4
29398: ARRAY
29399: PPUSH
29400: CALL_OW 266
29404: PUSH
29405: LD_VAR 0 3
29409: PUSH
29410: LD_VAR 0 4
29414: ARRAY
29415: PPUSH
29416: CALL_OW 250
29420: PUSH
29421: LD_VAR 0 3
29425: PUSH
29426: LD_VAR 0 4
29430: ARRAY
29431: PPUSH
29432: CALL_OW 251
29436: PUSH
29437: LD_VAR 0 3
29441: PUSH
29442: LD_VAR 0 4
29446: ARRAY
29447: PPUSH
29448: CALL_OW 254
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: PUSH
29459: EMPTY
29460: LIST
29461: ADD
29462: ST_TO_ADDR
29463: GO 29376
29465: POP
29466: POP
// result := list ;
29467: LD_ADDR_VAR 0 2
29471: PUSH
29472: LD_VAR 0 5
29476: ST_TO_ADDR
// end ;
29477: LD_VAR 0 2
29481: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29482: LD_INT 0
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
29490: PPUSH
// if not factory then
29491: LD_VAR 0 1
29495: NOT
29496: IFFALSE 29500
// exit ;
29498: GO 30093
// if control = control_apeman then
29500: LD_VAR 0 4
29504: PUSH
29505: LD_INT 5
29507: EQUAL
29508: IFFALSE 29617
// begin tmp := UnitsInside ( factory ) ;
29510: LD_ADDR_VAR 0 8
29514: PUSH
29515: LD_VAR 0 1
29519: PPUSH
29520: CALL_OW 313
29524: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29525: LD_VAR 0 8
29529: PPUSH
29530: LD_INT 25
29532: PUSH
29533: LD_INT 12
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PPUSH
29540: CALL_OW 72
29544: NOT
29545: IFFALSE 29555
// control := control_manual ;
29547: LD_ADDR_VAR 0 4
29551: PUSH
29552: LD_INT 1
29554: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29555: LD_ADDR_VAR 0 8
29559: PUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL 29252 0 1
29569: ST_TO_ADDR
// if tmp then
29570: LD_VAR 0 8
29574: IFFALSE 29617
// begin for i in tmp do
29576: LD_ADDR_VAR 0 7
29580: PUSH
29581: LD_VAR 0 8
29585: PUSH
29586: FOR_IN
29587: IFFALSE 29615
// if i [ 1 ] = b_ext_radio then
29589: LD_VAR 0 7
29593: PUSH
29594: LD_INT 1
29596: ARRAY
29597: PUSH
29598: LD_INT 22
29600: EQUAL
29601: IFFALSE 29613
// begin control := control_remote ;
29603: LD_ADDR_VAR 0 4
29607: PUSH
29608: LD_INT 2
29610: ST_TO_ADDR
// break ;
29611: GO 29615
// end ;
29613: GO 29586
29615: POP
29616: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29617: LD_VAR 0 1
29621: PPUSH
29622: LD_VAR 0 2
29626: PPUSH
29627: LD_VAR 0 3
29631: PPUSH
29632: LD_VAR 0 4
29636: PPUSH
29637: LD_VAR 0 5
29641: PPUSH
29642: CALL_OW 448
29646: IFFALSE 29681
// begin result := [ chassis , engine , control , weapon ] ;
29648: LD_ADDR_VAR 0 6
29652: PUSH
29653: LD_VAR 0 2
29657: PUSH
29658: LD_VAR 0 3
29662: PUSH
29663: LD_VAR 0 4
29667: PUSH
29668: LD_VAR 0 5
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: ST_TO_ADDR
// exit ;
29679: GO 30093
// end ; _chassis := AvailableChassisList ( factory ) ;
29681: LD_ADDR_VAR 0 9
29685: PUSH
29686: LD_VAR 0 1
29690: PPUSH
29691: CALL_OW 475
29695: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29696: LD_ADDR_VAR 0 11
29700: PUSH
29701: LD_VAR 0 1
29705: PPUSH
29706: CALL_OW 476
29710: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29711: LD_ADDR_VAR 0 12
29715: PUSH
29716: LD_VAR 0 1
29720: PPUSH
29721: CALL_OW 477
29725: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29726: LD_ADDR_VAR 0 10
29730: PUSH
29731: LD_VAR 0 1
29735: PPUSH
29736: CALL_OW 478
29740: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29741: LD_VAR 0 9
29745: NOT
29746: PUSH
29747: LD_VAR 0 11
29751: NOT
29752: OR
29753: PUSH
29754: LD_VAR 0 12
29758: NOT
29759: OR
29760: PUSH
29761: LD_VAR 0 10
29765: NOT
29766: OR
29767: IFFALSE 29802
// begin result := [ chassis , engine , control , weapon ] ;
29769: LD_ADDR_VAR 0 6
29773: PUSH
29774: LD_VAR 0 2
29778: PUSH
29779: LD_VAR 0 3
29783: PUSH
29784: LD_VAR 0 4
29788: PUSH
29789: LD_VAR 0 5
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: ST_TO_ADDR
// exit ;
29800: GO 30093
// end ; if not chassis in _chassis then
29802: LD_VAR 0 2
29806: PUSH
29807: LD_VAR 0 9
29811: IN
29812: NOT
29813: IFFALSE 29839
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29815: LD_ADDR_VAR 0 2
29819: PUSH
29820: LD_VAR 0 9
29824: PUSH
29825: LD_INT 1
29827: PPUSH
29828: LD_VAR 0 9
29832: PPUSH
29833: CALL_OW 12
29837: ARRAY
29838: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29839: LD_VAR 0 2
29843: PPUSH
29844: LD_VAR 0 3
29848: PPUSH
29849: CALL 30098 0 2
29853: NOT
29854: IFFALSE 29913
// repeat engine := _engine [ 1 ] ;
29856: LD_ADDR_VAR 0 3
29860: PUSH
29861: LD_VAR 0 11
29865: PUSH
29866: LD_INT 1
29868: ARRAY
29869: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29870: LD_ADDR_VAR 0 11
29874: PUSH
29875: LD_VAR 0 11
29879: PPUSH
29880: LD_INT 1
29882: PPUSH
29883: CALL_OW 3
29887: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29888: LD_VAR 0 2
29892: PPUSH
29893: LD_VAR 0 3
29897: PPUSH
29898: CALL 30098 0 2
29902: PUSH
29903: LD_VAR 0 11
29907: PUSH
29908: EMPTY
29909: EQUAL
29910: OR
29911: IFFALSE 29856
// if not control in _control then
29913: LD_VAR 0 4
29917: PUSH
29918: LD_VAR 0 12
29922: IN
29923: NOT
29924: IFFALSE 29950
// control := _control [ rand ( 1 , _control ) ] ;
29926: LD_ADDR_VAR 0 4
29930: PUSH
29931: LD_VAR 0 12
29935: PUSH
29936: LD_INT 1
29938: PPUSH
29939: LD_VAR 0 12
29943: PPUSH
29944: CALL_OW 12
29948: ARRAY
29949: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29950: LD_VAR 0 2
29954: PPUSH
29955: LD_VAR 0 5
29959: PPUSH
29960: CALL 30318 0 2
29964: NOT
29965: IFFALSE 30024
// repeat weapon := _weapon [ 1 ] ;
29967: LD_ADDR_VAR 0 5
29971: PUSH
29972: LD_VAR 0 10
29976: PUSH
29977: LD_INT 1
29979: ARRAY
29980: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29981: LD_ADDR_VAR 0 10
29985: PUSH
29986: LD_VAR 0 10
29990: PPUSH
29991: LD_INT 1
29993: PPUSH
29994: CALL_OW 3
29998: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29999: LD_VAR 0 2
30003: PPUSH
30004: LD_VAR 0 5
30008: PPUSH
30009: CALL 30318 0 2
30013: PUSH
30014: LD_VAR 0 10
30018: PUSH
30019: EMPTY
30020: EQUAL
30021: OR
30022: IFFALSE 29967
// result := [ ] ;
30024: LD_ADDR_VAR 0 6
30028: PUSH
30029: EMPTY
30030: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30031: LD_VAR 0 1
30035: PPUSH
30036: LD_VAR 0 2
30040: PPUSH
30041: LD_VAR 0 3
30045: PPUSH
30046: LD_VAR 0 4
30050: PPUSH
30051: LD_VAR 0 5
30055: PPUSH
30056: CALL_OW 448
30060: IFFALSE 30093
// result := [ chassis , engine , control , weapon ] ;
30062: LD_ADDR_VAR 0 6
30066: PUSH
30067: LD_VAR 0 2
30071: PUSH
30072: LD_VAR 0 3
30076: PUSH
30077: LD_VAR 0 4
30081: PUSH
30082: LD_VAR 0 5
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: ST_TO_ADDR
// end ;
30093: LD_VAR 0 6
30097: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30098: LD_INT 0
30100: PPUSH
// if not chassis or not engine then
30101: LD_VAR 0 1
30105: NOT
30106: PUSH
30107: LD_VAR 0 2
30111: NOT
30112: OR
30113: IFFALSE 30117
// exit ;
30115: GO 30313
// case engine of engine_solar :
30117: LD_VAR 0 2
30121: PUSH
30122: LD_INT 2
30124: DOUBLE
30125: EQUAL
30126: IFTRUE 30130
30128: GO 30168
30130: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30131: LD_ADDR_VAR 0 3
30135: PUSH
30136: LD_INT 11
30138: PUSH
30139: LD_INT 12
30141: PUSH
30142: LD_INT 13
30144: PUSH
30145: LD_INT 14
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: LD_INT 3
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: ST_TO_ADDR
30166: GO 30297
30168: LD_INT 1
30170: DOUBLE
30171: EQUAL
30172: IFTRUE 30176
30174: GO 30238
30176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30177: LD_ADDR_VAR 0 3
30181: PUSH
30182: LD_INT 11
30184: PUSH
30185: LD_INT 12
30187: PUSH
30188: LD_INT 13
30190: PUSH
30191: LD_INT 14
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: LD_INT 3
30202: PUSH
30203: LD_INT 4
30205: PUSH
30206: LD_INT 5
30208: PUSH
30209: LD_INT 21
30211: PUSH
30212: LD_INT 23
30214: PUSH
30215: LD_INT 22
30217: PUSH
30218: LD_INT 24
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
30236: GO 30297
30238: LD_INT 3
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30296
30246: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_INT 13
30254: PUSH
30255: LD_INT 14
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 3
30263: PUSH
30264: LD_INT 4
30266: PUSH
30267: LD_INT 5
30269: PUSH
30270: LD_INT 21
30272: PUSH
30273: LD_INT 22
30275: PUSH
30276: LD_INT 23
30278: PUSH
30279: LD_INT 24
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: ST_TO_ADDR
30294: GO 30297
30296: POP
// result := ( chassis in result ) ;
30297: LD_ADDR_VAR 0 3
30301: PUSH
30302: LD_VAR 0 1
30306: PUSH
30307: LD_VAR 0 3
30311: IN
30312: ST_TO_ADDR
// end ;
30313: LD_VAR 0 3
30317: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30318: LD_INT 0
30320: PPUSH
// if not chassis or not weapon then
30321: LD_VAR 0 1
30325: NOT
30326: PUSH
30327: LD_VAR 0 2
30331: NOT
30332: OR
30333: IFFALSE 30337
// exit ;
30335: GO 31363
// case weapon of us_machine_gun :
30337: LD_VAR 0 2
30341: PUSH
30342: LD_INT 2
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30380
30350: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30351: LD_ADDR_VAR 0 3
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: LD_INT 3
30364: PUSH
30365: LD_INT 4
30367: PUSH
30368: LD_INT 5
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: ST_TO_ADDR
30378: GO 31347
30380: LD_INT 3
30382: DOUBLE
30383: EQUAL
30384: IFTRUE 30388
30386: GO 30418
30388: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30389: LD_ADDR_VAR 0 3
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: LD_INT 4
30405: PUSH
30406: LD_INT 5
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: ST_TO_ADDR
30416: GO 31347
30418: LD_INT 11
30420: DOUBLE
30421: EQUAL
30422: IFTRUE 30426
30424: GO 30456
30426: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30427: LD_ADDR_VAR 0 3
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: LD_INT 2
30437: PUSH
30438: LD_INT 3
30440: PUSH
30441: LD_INT 4
30443: PUSH
30444: LD_INT 5
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: ST_TO_ADDR
30454: GO 31347
30456: LD_INT 4
30458: DOUBLE
30459: EQUAL
30460: IFTRUE 30464
30462: GO 30490
30464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30465: LD_ADDR_VAR 0 3
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: LD_INT 4
30478: PUSH
30479: LD_INT 5
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: ST_TO_ADDR
30488: GO 31347
30490: LD_INT 5
30492: DOUBLE
30493: EQUAL
30494: IFTRUE 30498
30496: GO 30524
30498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30499: LD_ADDR_VAR 0 3
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: LD_INT 4
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
30522: GO 31347
30524: LD_INT 9
30526: DOUBLE
30527: EQUAL
30528: IFTRUE 30532
30530: GO 30558
30532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30533: LD_ADDR_VAR 0 3
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: LD_INT 5
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
30556: GO 31347
30558: LD_INT 7
30560: DOUBLE
30561: EQUAL
30562: IFTRUE 30566
30564: GO 30592
30566: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 4
30580: PUSH
30581: LD_INT 5
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: ST_TO_ADDR
30590: GO 31347
30592: LD_INT 12
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30626
30600: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30601: LD_ADDR_VAR 0 3
30605: PUSH
30606: LD_INT 2
30608: PUSH
30609: LD_INT 3
30611: PUSH
30612: LD_INT 4
30614: PUSH
30615: LD_INT 5
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: ST_TO_ADDR
30624: GO 31347
30626: LD_INT 13
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 30660
30634: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30635: LD_ADDR_VAR 0 3
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: LD_INT 3
30645: PUSH
30646: LD_INT 4
30648: PUSH
30649: LD_INT 5
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
30658: GO 31347
30660: LD_INT 14
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30686
30668: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30669: LD_ADDR_VAR 0 3
30673: PUSH
30674: LD_INT 4
30676: PUSH
30677: LD_INT 5
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: ST_TO_ADDR
30684: GO 31347
30686: LD_INT 6
30688: DOUBLE
30689: EQUAL
30690: IFTRUE 30694
30692: GO 30712
30694: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30695: LD_ADDR_VAR 0 3
30699: PUSH
30700: LD_INT 4
30702: PUSH
30703: LD_INT 5
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: ST_TO_ADDR
30710: GO 31347
30712: LD_INT 10
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30738
30720: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 4
30728: PUSH
30729: LD_INT 5
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: ST_TO_ADDR
30736: GO 31347
30738: LD_INT 22
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30772
30746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30747: LD_ADDR_VAR 0 3
30751: PUSH
30752: LD_INT 11
30754: PUSH
30755: LD_INT 12
30757: PUSH
30758: LD_INT 13
30760: PUSH
30761: LD_INT 14
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: ST_TO_ADDR
30770: GO 31347
30772: LD_INT 23
30774: DOUBLE
30775: EQUAL
30776: IFTRUE 30780
30778: GO 30806
30780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30781: LD_ADDR_VAR 0 3
30785: PUSH
30786: LD_INT 11
30788: PUSH
30789: LD_INT 12
30791: PUSH
30792: LD_INT 13
30794: PUSH
30795: LD_INT 14
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
30804: GO 31347
30806: LD_INT 24
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 30840
30814: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30815: LD_ADDR_VAR 0 3
30819: PUSH
30820: LD_INT 11
30822: PUSH
30823: LD_INT 12
30825: PUSH
30826: LD_INT 13
30828: PUSH
30829: LD_INT 14
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: ST_TO_ADDR
30838: GO 31347
30840: LD_INT 30
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30874
30848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30849: LD_ADDR_VAR 0 3
30853: PUSH
30854: LD_INT 11
30856: PUSH
30857: LD_INT 12
30859: PUSH
30860: LD_INT 13
30862: PUSH
30863: LD_INT 14
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: ST_TO_ADDR
30872: GO 31347
30874: LD_INT 25
30876: DOUBLE
30877: EQUAL
30878: IFTRUE 30882
30880: GO 30900
30882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30883: LD_ADDR_VAR 0 3
30887: PUSH
30888: LD_INT 13
30890: PUSH
30891: LD_INT 14
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: ST_TO_ADDR
30898: GO 31347
30900: LD_INT 27
30902: DOUBLE
30903: EQUAL
30904: IFTRUE 30908
30906: GO 30926
30908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30909: LD_ADDR_VAR 0 3
30913: PUSH
30914: LD_INT 13
30916: PUSH
30917: LD_INT 14
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: ST_TO_ADDR
30924: GO 31347
30926: LD_INT 28
30928: DOUBLE
30929: EQUAL
30930: IFTRUE 30934
30932: GO 30952
30934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30935: LD_ADDR_VAR 0 3
30939: PUSH
30940: LD_INT 13
30942: PUSH
30943: LD_INT 14
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: ST_TO_ADDR
30950: GO 31347
30952: LD_INT 29
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30978
30960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 13
30968: PUSH
30969: LD_INT 14
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: ST_TO_ADDR
30976: GO 31347
30978: LD_INT 31
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31004
30986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 13
30994: PUSH
30995: LD_INT 14
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: ST_TO_ADDR
31002: GO 31347
31004: LD_INT 26
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 31030
31012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31013: LD_ADDR_VAR 0 3
31017: PUSH
31018: LD_INT 13
31020: PUSH
31021: LD_INT 14
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: ST_TO_ADDR
31028: GO 31347
31030: LD_INT 42
31032: DOUBLE
31033: EQUAL
31034: IFTRUE 31038
31036: GO 31064
31038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31039: LD_ADDR_VAR 0 3
31043: PUSH
31044: LD_INT 21
31046: PUSH
31047: LD_INT 22
31049: PUSH
31050: LD_INT 23
31052: PUSH
31053: LD_INT 24
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: ST_TO_ADDR
31062: GO 31347
31064: LD_INT 43
31066: DOUBLE
31067: EQUAL
31068: IFTRUE 31072
31070: GO 31098
31072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31073: LD_ADDR_VAR 0 3
31077: PUSH
31078: LD_INT 21
31080: PUSH
31081: LD_INT 22
31083: PUSH
31084: LD_INT 23
31086: PUSH
31087: LD_INT 24
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: ST_TO_ADDR
31096: GO 31347
31098: LD_INT 44
31100: DOUBLE
31101: EQUAL
31102: IFTRUE 31106
31104: GO 31132
31106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31107: LD_ADDR_VAR 0 3
31111: PUSH
31112: LD_INT 21
31114: PUSH
31115: LD_INT 22
31117: PUSH
31118: LD_INT 23
31120: PUSH
31121: LD_INT 24
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: ST_TO_ADDR
31130: GO 31347
31132: LD_INT 45
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31166
31140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31141: LD_ADDR_VAR 0 3
31145: PUSH
31146: LD_INT 21
31148: PUSH
31149: LD_INT 22
31151: PUSH
31152: LD_INT 23
31154: PUSH
31155: LD_INT 24
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: ST_TO_ADDR
31164: GO 31347
31166: LD_INT 49
31168: DOUBLE
31169: EQUAL
31170: IFTRUE 31174
31172: GO 31200
31174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_INT 21
31182: PUSH
31183: LD_INT 22
31185: PUSH
31186: LD_INT 23
31188: PUSH
31189: LD_INT 24
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: ST_TO_ADDR
31198: GO 31347
31200: LD_INT 51
31202: DOUBLE
31203: EQUAL
31204: IFTRUE 31208
31206: GO 31234
31208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31209: LD_ADDR_VAR 0 3
31213: PUSH
31214: LD_INT 21
31216: PUSH
31217: LD_INT 22
31219: PUSH
31220: LD_INT 23
31222: PUSH
31223: LD_INT 24
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: ST_TO_ADDR
31232: GO 31347
31234: LD_INT 52
31236: DOUBLE
31237: EQUAL
31238: IFTRUE 31242
31240: GO 31268
31242: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31243: LD_ADDR_VAR 0 3
31247: PUSH
31248: LD_INT 21
31250: PUSH
31251: LD_INT 22
31253: PUSH
31254: LD_INT 23
31256: PUSH
31257: LD_INT 24
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
31266: GO 31347
31268: LD_INT 53
31270: DOUBLE
31271: EQUAL
31272: IFTRUE 31276
31274: GO 31294
31276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31277: LD_ADDR_VAR 0 3
31281: PUSH
31282: LD_INT 23
31284: PUSH
31285: LD_INT 24
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: ST_TO_ADDR
31292: GO 31347
31294: LD_INT 46
31296: DOUBLE
31297: EQUAL
31298: IFTRUE 31302
31300: GO 31320
31302: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31303: LD_ADDR_VAR 0 3
31307: PUSH
31308: LD_INT 23
31310: PUSH
31311: LD_INT 24
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: ST_TO_ADDR
31318: GO 31347
31320: LD_INT 47
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31346
31328: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_INT 23
31336: PUSH
31337: LD_INT 24
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: ST_TO_ADDR
31344: GO 31347
31346: POP
// result := ( chassis in result ) ;
31347: LD_ADDR_VAR 0 3
31351: PUSH
31352: LD_VAR 0 1
31356: PUSH
31357: LD_VAR 0 3
31361: IN
31362: ST_TO_ADDR
// end ;
31363: LD_VAR 0 3
31367: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31368: LD_INT 0
31370: PPUSH
31371: PPUSH
31372: PPUSH
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
// result := array ;
31377: LD_ADDR_VAR 0 5
31381: PUSH
31382: LD_VAR 0 1
31386: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31387: LD_VAR 0 1
31391: NOT
31392: PUSH
31393: LD_VAR 0 2
31397: NOT
31398: OR
31399: PUSH
31400: LD_VAR 0 3
31404: NOT
31405: OR
31406: PUSH
31407: LD_VAR 0 2
31411: PUSH
31412: LD_VAR 0 1
31416: GREATER
31417: OR
31418: PUSH
31419: LD_VAR 0 3
31423: PUSH
31424: LD_VAR 0 1
31428: GREATER
31429: OR
31430: IFFALSE 31434
// exit ;
31432: GO 31730
// if direction then
31434: LD_VAR 0 4
31438: IFFALSE 31502
// begin d := 1 ;
31440: LD_ADDR_VAR 0 9
31444: PUSH
31445: LD_INT 1
31447: ST_TO_ADDR
// if i_from > i_to then
31448: LD_VAR 0 2
31452: PUSH
31453: LD_VAR 0 3
31457: GREATER
31458: IFFALSE 31484
// length := ( array - i_from ) + i_to else
31460: LD_ADDR_VAR 0 11
31464: PUSH
31465: LD_VAR 0 1
31469: PUSH
31470: LD_VAR 0 2
31474: MINUS
31475: PUSH
31476: LD_VAR 0 3
31480: PLUS
31481: ST_TO_ADDR
31482: GO 31500
// length := i_to - i_from ;
31484: LD_ADDR_VAR 0 11
31488: PUSH
31489: LD_VAR 0 3
31493: PUSH
31494: LD_VAR 0 2
31498: MINUS
31499: ST_TO_ADDR
// end else
31500: GO 31563
// begin d := - 1 ;
31502: LD_ADDR_VAR 0 9
31506: PUSH
31507: LD_INT 1
31509: NEG
31510: ST_TO_ADDR
// if i_from > i_to then
31511: LD_VAR 0 2
31515: PUSH
31516: LD_VAR 0 3
31520: GREATER
31521: IFFALSE 31541
// length := i_from - i_to else
31523: LD_ADDR_VAR 0 11
31527: PUSH
31528: LD_VAR 0 2
31532: PUSH
31533: LD_VAR 0 3
31537: MINUS
31538: ST_TO_ADDR
31539: GO 31563
// length := ( array - i_to ) + i_from ;
31541: LD_ADDR_VAR 0 11
31545: PUSH
31546: LD_VAR 0 1
31550: PUSH
31551: LD_VAR 0 3
31555: MINUS
31556: PUSH
31557: LD_VAR 0 2
31561: PLUS
31562: ST_TO_ADDR
// end ; if not length then
31563: LD_VAR 0 11
31567: NOT
31568: IFFALSE 31572
// exit ;
31570: GO 31730
// tmp := array ;
31572: LD_ADDR_VAR 0 10
31576: PUSH
31577: LD_VAR 0 1
31581: ST_TO_ADDR
// for i = 1 to length do
31582: LD_ADDR_VAR 0 6
31586: PUSH
31587: DOUBLE
31588: LD_INT 1
31590: DEC
31591: ST_TO_ADDR
31592: LD_VAR 0 11
31596: PUSH
31597: FOR_TO
31598: IFFALSE 31718
// begin for j = 1 to array do
31600: LD_ADDR_VAR 0 7
31604: PUSH
31605: DOUBLE
31606: LD_INT 1
31608: DEC
31609: ST_TO_ADDR
31610: LD_VAR 0 1
31614: PUSH
31615: FOR_TO
31616: IFFALSE 31704
// begin k := j + d ;
31618: LD_ADDR_VAR 0 8
31622: PUSH
31623: LD_VAR 0 7
31627: PUSH
31628: LD_VAR 0 9
31632: PLUS
31633: ST_TO_ADDR
// if k > array then
31634: LD_VAR 0 8
31638: PUSH
31639: LD_VAR 0 1
31643: GREATER
31644: IFFALSE 31654
// k := 1 ;
31646: LD_ADDR_VAR 0 8
31650: PUSH
31651: LD_INT 1
31653: ST_TO_ADDR
// if not k then
31654: LD_VAR 0 8
31658: NOT
31659: IFFALSE 31671
// k := array ;
31661: LD_ADDR_VAR 0 8
31665: PUSH
31666: LD_VAR 0 1
31670: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31671: LD_ADDR_VAR 0 10
31675: PUSH
31676: LD_VAR 0 10
31680: PPUSH
31681: LD_VAR 0 8
31685: PPUSH
31686: LD_VAR 0 1
31690: PUSH
31691: LD_VAR 0 7
31695: ARRAY
31696: PPUSH
31697: CALL_OW 1
31701: ST_TO_ADDR
// end ;
31702: GO 31615
31704: POP
31705: POP
// array := tmp ;
31706: LD_ADDR_VAR 0 1
31710: PUSH
31711: LD_VAR 0 10
31715: ST_TO_ADDR
// end ;
31716: GO 31597
31718: POP
31719: POP
// result := array ;
31720: LD_ADDR_VAR 0 5
31724: PUSH
31725: LD_VAR 0 1
31729: ST_TO_ADDR
// end ;
31730: LD_VAR 0 5
31734: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31735: LD_INT 0
31737: PPUSH
31738: PPUSH
// result := 0 ;
31739: LD_ADDR_VAR 0 3
31743: PUSH
31744: LD_INT 0
31746: ST_TO_ADDR
// if not array or not value in array then
31747: LD_VAR 0 1
31751: NOT
31752: PUSH
31753: LD_VAR 0 2
31757: PUSH
31758: LD_VAR 0 1
31762: IN
31763: NOT
31764: OR
31765: IFFALSE 31769
// exit ;
31767: GO 31823
// for i = 1 to array do
31769: LD_ADDR_VAR 0 4
31773: PUSH
31774: DOUBLE
31775: LD_INT 1
31777: DEC
31778: ST_TO_ADDR
31779: LD_VAR 0 1
31783: PUSH
31784: FOR_TO
31785: IFFALSE 31821
// if value = array [ i ] then
31787: LD_VAR 0 2
31791: PUSH
31792: LD_VAR 0 1
31796: PUSH
31797: LD_VAR 0 4
31801: ARRAY
31802: EQUAL
31803: IFFALSE 31819
// begin result := i ;
31805: LD_ADDR_VAR 0 3
31809: PUSH
31810: LD_VAR 0 4
31814: ST_TO_ADDR
// exit ;
31815: POP
31816: POP
31817: GO 31823
// end ;
31819: GO 31784
31821: POP
31822: POP
// end ;
31823: LD_VAR 0 3
31827: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31828: LD_INT 0
31830: PPUSH
// vc_chassis := chassis ;
31831: LD_ADDR_OWVAR 37
31835: PUSH
31836: LD_VAR 0 1
31840: ST_TO_ADDR
// vc_engine := engine ;
31841: LD_ADDR_OWVAR 39
31845: PUSH
31846: LD_VAR 0 2
31850: ST_TO_ADDR
// vc_control := control ;
31851: LD_ADDR_OWVAR 38
31855: PUSH
31856: LD_VAR 0 3
31860: ST_TO_ADDR
// vc_weapon := weapon ;
31861: LD_ADDR_OWVAR 40
31865: PUSH
31866: LD_VAR 0 4
31870: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31871: LD_ADDR_OWVAR 41
31875: PUSH
31876: LD_VAR 0 5
31880: ST_TO_ADDR
// end ;
31881: LD_VAR 0 6
31885: RET
// export function WantPlant ( unit ) ; var task ; begin
31886: LD_INT 0
31888: PPUSH
31889: PPUSH
// result := false ;
31890: LD_ADDR_VAR 0 2
31894: PUSH
31895: LD_INT 0
31897: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31898: LD_ADDR_VAR 0 3
31902: PUSH
31903: LD_VAR 0 1
31907: PPUSH
31908: CALL_OW 437
31912: ST_TO_ADDR
// if task then
31913: LD_VAR 0 3
31917: IFFALSE 31945
// if task [ 1 ] [ 1 ] = p then
31919: LD_VAR 0 3
31923: PUSH
31924: LD_INT 1
31926: ARRAY
31927: PUSH
31928: LD_INT 1
31930: ARRAY
31931: PUSH
31932: LD_STRING p
31934: EQUAL
31935: IFFALSE 31945
// result := true ;
31937: LD_ADDR_VAR 0 2
31941: PUSH
31942: LD_INT 1
31944: ST_TO_ADDR
// end ;
31945: LD_VAR 0 2
31949: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31950: LD_INT 0
31952: PPUSH
31953: PPUSH
31954: PPUSH
31955: PPUSH
// if pos < 1 then
31956: LD_VAR 0 2
31960: PUSH
31961: LD_INT 1
31963: LESS
31964: IFFALSE 31968
// exit ;
31966: GO 32271
// if pos = 1 then
31968: LD_VAR 0 2
31972: PUSH
31973: LD_INT 1
31975: EQUAL
31976: IFFALSE 32009
// result := Replace ( arr , pos [ 1 ] , value ) else
31978: LD_ADDR_VAR 0 4
31982: PUSH
31983: LD_VAR 0 1
31987: PPUSH
31988: LD_VAR 0 2
31992: PUSH
31993: LD_INT 1
31995: ARRAY
31996: PPUSH
31997: LD_VAR 0 3
32001: PPUSH
32002: CALL_OW 1
32006: ST_TO_ADDR
32007: GO 32271
// begin tmp := arr ;
32009: LD_ADDR_VAR 0 6
32013: PUSH
32014: LD_VAR 0 1
32018: ST_TO_ADDR
// s_arr := [ tmp ] ;
32019: LD_ADDR_VAR 0 7
32023: PUSH
32024: LD_VAR 0 6
32028: PUSH
32029: EMPTY
32030: LIST
32031: ST_TO_ADDR
// for i = 1 to pos - 1 do
32032: LD_ADDR_VAR 0 5
32036: PUSH
32037: DOUBLE
32038: LD_INT 1
32040: DEC
32041: ST_TO_ADDR
32042: LD_VAR 0 2
32046: PUSH
32047: LD_INT 1
32049: MINUS
32050: PUSH
32051: FOR_TO
32052: IFFALSE 32097
// begin tmp := tmp [ pos [ i ] ] ;
32054: LD_ADDR_VAR 0 6
32058: PUSH
32059: LD_VAR 0 6
32063: PUSH
32064: LD_VAR 0 2
32068: PUSH
32069: LD_VAR 0 5
32073: ARRAY
32074: ARRAY
32075: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32076: LD_ADDR_VAR 0 7
32080: PUSH
32081: LD_VAR 0 7
32085: PUSH
32086: LD_VAR 0 6
32090: PUSH
32091: EMPTY
32092: LIST
32093: ADD
32094: ST_TO_ADDR
// end ;
32095: GO 32051
32097: POP
32098: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32099: LD_ADDR_VAR 0 6
32103: PUSH
32104: LD_VAR 0 6
32108: PPUSH
32109: LD_VAR 0 2
32113: PUSH
32114: LD_VAR 0 2
32118: ARRAY
32119: PPUSH
32120: LD_VAR 0 3
32124: PPUSH
32125: CALL_OW 1
32129: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32130: LD_ADDR_VAR 0 7
32134: PUSH
32135: LD_VAR 0 7
32139: PPUSH
32140: LD_VAR 0 7
32144: PPUSH
32145: LD_VAR 0 6
32149: PPUSH
32150: CALL_OW 1
32154: ST_TO_ADDR
// for i = s_arr downto 2 do
32155: LD_ADDR_VAR 0 5
32159: PUSH
32160: DOUBLE
32161: LD_VAR 0 7
32165: INC
32166: ST_TO_ADDR
32167: LD_INT 2
32169: PUSH
32170: FOR_DOWNTO
32171: IFFALSE 32255
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32173: LD_ADDR_VAR 0 6
32177: PUSH
32178: LD_VAR 0 7
32182: PUSH
32183: LD_VAR 0 5
32187: PUSH
32188: LD_INT 1
32190: MINUS
32191: ARRAY
32192: PPUSH
32193: LD_VAR 0 2
32197: PUSH
32198: LD_VAR 0 5
32202: PUSH
32203: LD_INT 1
32205: MINUS
32206: ARRAY
32207: PPUSH
32208: LD_VAR 0 7
32212: PUSH
32213: LD_VAR 0 5
32217: ARRAY
32218: PPUSH
32219: CALL_OW 1
32223: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32224: LD_ADDR_VAR 0 7
32228: PUSH
32229: LD_VAR 0 7
32233: PPUSH
32234: LD_VAR 0 5
32238: PUSH
32239: LD_INT 1
32241: MINUS
32242: PPUSH
32243: LD_VAR 0 6
32247: PPUSH
32248: CALL_OW 1
32252: ST_TO_ADDR
// end ;
32253: GO 32170
32255: POP
32256: POP
// result := s_arr [ 1 ] ;
32257: LD_ADDR_VAR 0 4
32261: PUSH
32262: LD_VAR 0 7
32266: PUSH
32267: LD_INT 1
32269: ARRAY
32270: ST_TO_ADDR
// end ; end ;
32271: LD_VAR 0 4
32275: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32276: LD_INT 0
32278: PPUSH
32279: PPUSH
// if not list then
32280: LD_VAR 0 1
32284: NOT
32285: IFFALSE 32289
// exit ;
32287: GO 32380
// i := list [ pos1 ] ;
32289: LD_ADDR_VAR 0 5
32293: PUSH
32294: LD_VAR 0 1
32298: PUSH
32299: LD_VAR 0 2
32303: ARRAY
32304: ST_TO_ADDR
// if not i then
32305: LD_VAR 0 5
32309: NOT
32310: IFFALSE 32314
// exit ;
32312: GO 32380
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32314: LD_ADDR_VAR 0 1
32318: PUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: LD_VAR 0 2
32328: PPUSH
32329: LD_VAR 0 1
32333: PUSH
32334: LD_VAR 0 3
32338: ARRAY
32339: PPUSH
32340: CALL_OW 1
32344: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32345: LD_ADDR_VAR 0 1
32349: PUSH
32350: LD_VAR 0 1
32354: PPUSH
32355: LD_VAR 0 3
32359: PPUSH
32360: LD_VAR 0 5
32364: PPUSH
32365: CALL_OW 1
32369: ST_TO_ADDR
// result := list ;
32370: LD_ADDR_VAR 0 4
32374: PUSH
32375: LD_VAR 0 1
32379: ST_TO_ADDR
// end ;
32380: LD_VAR 0 4
32384: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32385: LD_INT 0
32387: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32388: LD_ADDR_VAR 0 5
32392: PUSH
32393: LD_VAR 0 1
32397: PPUSH
32398: CALL_OW 250
32402: PPUSH
32403: LD_VAR 0 1
32407: PPUSH
32408: CALL_OW 251
32412: PPUSH
32413: LD_VAR 0 2
32417: PPUSH
32418: LD_VAR 0 3
32422: PPUSH
32423: LD_VAR 0 4
32427: PPUSH
32428: CALL 32438 0 5
32432: ST_TO_ADDR
// end ;
32433: LD_VAR 0 5
32437: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32438: LD_INT 0
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
// if not list then
32444: LD_VAR 0 3
32448: NOT
32449: IFFALSE 32453
// exit ;
32451: GO 32841
// result := [ ] ;
32453: LD_ADDR_VAR 0 6
32457: PUSH
32458: EMPTY
32459: ST_TO_ADDR
// for i in list do
32460: LD_ADDR_VAR 0 7
32464: PUSH
32465: LD_VAR 0 3
32469: PUSH
32470: FOR_IN
32471: IFFALSE 32673
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32473: LD_ADDR_VAR 0 9
32477: PUSH
32478: LD_VAR 0 7
32482: PPUSH
32483: LD_VAR 0 1
32487: PPUSH
32488: LD_VAR 0 2
32492: PPUSH
32493: CALL_OW 297
32497: ST_TO_ADDR
// if not result then
32498: LD_VAR 0 6
32502: NOT
32503: IFFALSE 32529
// result := [ [ i , tmp ] ] else
32505: LD_ADDR_VAR 0 6
32509: PUSH
32510: LD_VAR 0 7
32514: PUSH
32515: LD_VAR 0 9
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: EMPTY
32525: LIST
32526: ST_TO_ADDR
32527: GO 32671
// begin if result [ result ] [ 2 ] < tmp then
32529: LD_VAR 0 6
32533: PUSH
32534: LD_VAR 0 6
32538: ARRAY
32539: PUSH
32540: LD_INT 2
32542: ARRAY
32543: PUSH
32544: LD_VAR 0 9
32548: LESS
32549: IFFALSE 32591
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32551: LD_ADDR_VAR 0 6
32555: PUSH
32556: LD_VAR 0 6
32560: PPUSH
32561: LD_VAR 0 6
32565: PUSH
32566: LD_INT 1
32568: PLUS
32569: PPUSH
32570: LD_VAR 0 7
32574: PUSH
32575: LD_VAR 0 9
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PPUSH
32584: CALL_OW 2
32588: ST_TO_ADDR
32589: GO 32671
// for j = 1 to result do
32591: LD_ADDR_VAR 0 8
32595: PUSH
32596: DOUBLE
32597: LD_INT 1
32599: DEC
32600: ST_TO_ADDR
32601: LD_VAR 0 6
32605: PUSH
32606: FOR_TO
32607: IFFALSE 32669
// begin if tmp < result [ j ] [ 2 ] then
32609: LD_VAR 0 9
32613: PUSH
32614: LD_VAR 0 6
32618: PUSH
32619: LD_VAR 0 8
32623: ARRAY
32624: PUSH
32625: LD_INT 2
32627: ARRAY
32628: LESS
32629: IFFALSE 32667
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32631: LD_ADDR_VAR 0 6
32635: PUSH
32636: LD_VAR 0 6
32640: PPUSH
32641: LD_VAR 0 8
32645: PPUSH
32646: LD_VAR 0 7
32650: PUSH
32651: LD_VAR 0 9
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PPUSH
32660: CALL_OW 2
32664: ST_TO_ADDR
// break ;
32665: GO 32669
// end ; end ;
32667: GO 32606
32669: POP
32670: POP
// end ; end ;
32671: GO 32470
32673: POP
32674: POP
// if result and not asc then
32675: LD_VAR 0 6
32679: PUSH
32680: LD_VAR 0 4
32684: NOT
32685: AND
32686: IFFALSE 32761
// begin tmp := result ;
32688: LD_ADDR_VAR 0 9
32692: PUSH
32693: LD_VAR 0 6
32697: ST_TO_ADDR
// for i = tmp downto 1 do
32698: LD_ADDR_VAR 0 7
32702: PUSH
32703: DOUBLE
32704: LD_VAR 0 9
32708: INC
32709: ST_TO_ADDR
32710: LD_INT 1
32712: PUSH
32713: FOR_DOWNTO
32714: IFFALSE 32759
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32716: LD_ADDR_VAR 0 6
32720: PUSH
32721: LD_VAR 0 6
32725: PPUSH
32726: LD_VAR 0 9
32730: PUSH
32731: LD_VAR 0 7
32735: MINUS
32736: PUSH
32737: LD_INT 1
32739: PLUS
32740: PPUSH
32741: LD_VAR 0 9
32745: PUSH
32746: LD_VAR 0 7
32750: ARRAY
32751: PPUSH
32752: CALL_OW 1
32756: ST_TO_ADDR
32757: GO 32713
32759: POP
32760: POP
// end ; tmp := [ ] ;
32761: LD_ADDR_VAR 0 9
32765: PUSH
32766: EMPTY
32767: ST_TO_ADDR
// if mode then
32768: LD_VAR 0 5
32772: IFFALSE 32841
// begin for i = 1 to result do
32774: LD_ADDR_VAR 0 7
32778: PUSH
32779: DOUBLE
32780: LD_INT 1
32782: DEC
32783: ST_TO_ADDR
32784: LD_VAR 0 6
32788: PUSH
32789: FOR_TO
32790: IFFALSE 32829
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32792: LD_ADDR_VAR 0 9
32796: PUSH
32797: LD_VAR 0 9
32801: PPUSH
32802: LD_VAR 0 7
32806: PPUSH
32807: LD_VAR 0 6
32811: PUSH
32812: LD_VAR 0 7
32816: ARRAY
32817: PUSH
32818: LD_INT 1
32820: ARRAY
32821: PPUSH
32822: CALL_OW 1
32826: ST_TO_ADDR
32827: GO 32789
32829: POP
32830: POP
// result := tmp ;
32831: LD_ADDR_VAR 0 6
32835: PUSH
32836: LD_VAR 0 9
32840: ST_TO_ADDR
// end ; end ;
32841: LD_VAR 0 6
32845: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32846: LD_INT 0
32848: PPUSH
32849: PPUSH
32850: PPUSH
32851: PPUSH
32852: PPUSH
32853: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32854: LD_ADDR_VAR 0 5
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: EMPTY
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: ST_TO_ADDR
// if not x or not y then
32876: LD_VAR 0 2
32880: NOT
32881: PUSH
32882: LD_VAR 0 3
32886: NOT
32887: OR
32888: IFFALSE 32892
// exit ;
32890: GO 34538
// if not range then
32892: LD_VAR 0 4
32896: NOT
32897: IFFALSE 32907
// range := 10 ;
32899: LD_ADDR_VAR 0 4
32903: PUSH
32904: LD_INT 10
32906: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32907: LD_ADDR_VAR 0 8
32911: PUSH
32912: LD_INT 81
32914: PUSH
32915: LD_VAR 0 1
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 92
32926: PUSH
32927: LD_VAR 0 2
32931: PUSH
32932: LD_VAR 0 3
32936: PUSH
32937: LD_VAR 0 4
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 3
32950: PUSH
32951: LD_INT 21
32953: PUSH
32954: LD_INT 3
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: PPUSH
32970: CALL_OW 69
32974: ST_TO_ADDR
// if not tmp then
32975: LD_VAR 0 8
32979: NOT
32980: IFFALSE 32984
// exit ;
32982: GO 34538
// for i in tmp do
32984: LD_ADDR_VAR 0 6
32988: PUSH
32989: LD_VAR 0 8
32993: PUSH
32994: FOR_IN
32995: IFFALSE 34513
// begin points := [ 0 , 0 , 0 ] ;
32997: LD_ADDR_VAR 0 9
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
// bpoints := 1 ;
33016: LD_ADDR_VAR 0 10
33020: PUSH
33021: LD_INT 1
33023: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33024: LD_VAR 0 6
33028: PPUSH
33029: CALL_OW 247
33033: PUSH
33034: LD_INT 1
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33042
33040: GO 33620
33042: POP
// begin if GetClass ( i ) = 1 then
33043: LD_VAR 0 6
33047: PPUSH
33048: CALL_OW 257
33052: PUSH
33053: LD_INT 1
33055: EQUAL
33056: IFFALSE 33077
// points := [ 10 , 5 , 3 ] ;
33058: LD_ADDR_VAR 0 9
33062: PUSH
33063: LD_INT 10
33065: PUSH
33066: LD_INT 5
33068: PUSH
33069: LD_INT 3
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33077: LD_VAR 0 6
33081: PPUSH
33082: CALL_OW 257
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: LD_INT 3
33092: PUSH
33093: LD_INT 4
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: IN
33101: IFFALSE 33122
// points := [ 3 , 2 , 1 ] ;
33103: LD_ADDR_VAR 0 9
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33122: LD_VAR 0 6
33126: PPUSH
33127: CALL_OW 257
33131: PUSH
33132: LD_INT 5
33134: EQUAL
33135: IFFALSE 33156
// points := [ 130 , 5 , 2 ] ;
33137: LD_ADDR_VAR 0 9
33141: PUSH
33142: LD_INT 130
33144: PUSH
33145: LD_INT 5
33147: PUSH
33148: LD_INT 2
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: LIST
33155: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33156: LD_VAR 0 6
33160: PPUSH
33161: CALL_OW 257
33165: PUSH
33166: LD_INT 8
33168: EQUAL
33169: IFFALSE 33190
// points := [ 35 , 35 , 30 ] ;
33171: LD_ADDR_VAR 0 9
33175: PUSH
33176: LD_INT 35
33178: PUSH
33179: LD_INT 35
33181: PUSH
33182: LD_INT 30
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33190: LD_VAR 0 6
33194: PPUSH
33195: CALL_OW 257
33199: PUSH
33200: LD_INT 9
33202: EQUAL
33203: IFFALSE 33224
// points := [ 20 , 55 , 40 ] ;
33205: LD_ADDR_VAR 0 9
33209: PUSH
33210: LD_INT 20
33212: PUSH
33213: LD_INT 55
33215: PUSH
33216: LD_INT 40
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33224: LD_VAR 0 6
33228: PPUSH
33229: CALL_OW 257
33233: PUSH
33234: LD_INT 12
33236: PUSH
33237: LD_INT 16
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: IN
33244: IFFALSE 33265
// points := [ 5 , 3 , 2 ] ;
33246: LD_ADDR_VAR 0 9
33250: PUSH
33251: LD_INT 5
33253: PUSH
33254: LD_INT 3
33256: PUSH
33257: LD_INT 2
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33265: LD_VAR 0 6
33269: PPUSH
33270: CALL_OW 257
33274: PUSH
33275: LD_INT 17
33277: EQUAL
33278: IFFALSE 33299
// points := [ 100 , 50 , 75 ] ;
33280: LD_ADDR_VAR 0 9
33284: PUSH
33285: LD_INT 100
33287: PUSH
33288: LD_INT 50
33290: PUSH
33291: LD_INT 75
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: LIST
33298: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33299: LD_VAR 0 6
33303: PPUSH
33304: CALL_OW 257
33308: PUSH
33309: LD_INT 15
33311: EQUAL
33312: IFFALSE 33333
// points := [ 10 , 5 , 3 ] ;
33314: LD_ADDR_VAR 0 9
33318: PUSH
33319: LD_INT 10
33321: PUSH
33322: LD_INT 5
33324: PUSH
33325: LD_INT 3
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33333: LD_VAR 0 6
33337: PPUSH
33338: CALL_OW 257
33342: PUSH
33343: LD_INT 14
33345: EQUAL
33346: IFFALSE 33367
// points := [ 10 , 0 , 0 ] ;
33348: LD_ADDR_VAR 0 9
33352: PUSH
33353: LD_INT 10
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33367: LD_VAR 0 6
33371: PPUSH
33372: CALL_OW 257
33376: PUSH
33377: LD_INT 11
33379: EQUAL
33380: IFFALSE 33401
// points := [ 30 , 10 , 5 ] ;
33382: LD_ADDR_VAR 0 9
33386: PUSH
33387: LD_INT 30
33389: PUSH
33390: LD_INT 10
33392: PUSH
33393: LD_INT 5
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33401: LD_VAR 0 1
33405: PPUSH
33406: LD_INT 5
33408: PPUSH
33409: CALL_OW 321
33413: PUSH
33414: LD_INT 2
33416: EQUAL
33417: IFFALSE 33434
// bpoints := bpoints * 1.8 ;
33419: LD_ADDR_VAR 0 10
33423: PUSH
33424: LD_VAR 0 10
33428: PUSH
33429: LD_REAL  1.80000000000000E+0000
33432: MUL
33433: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33434: LD_VAR 0 6
33438: PPUSH
33439: CALL_OW 257
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: LD_INT 4
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: IN
33462: PUSH
33463: LD_VAR 0 1
33467: PPUSH
33468: LD_INT 51
33470: PPUSH
33471: CALL_OW 321
33475: PUSH
33476: LD_INT 2
33478: EQUAL
33479: AND
33480: IFFALSE 33497
// bpoints := bpoints * 1.2 ;
33482: LD_ADDR_VAR 0 10
33486: PUSH
33487: LD_VAR 0 10
33491: PUSH
33492: LD_REAL  1.20000000000000E+0000
33495: MUL
33496: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33497: LD_VAR 0 6
33501: PPUSH
33502: CALL_OW 257
33506: PUSH
33507: LD_INT 5
33509: PUSH
33510: LD_INT 7
33512: PUSH
33513: LD_INT 9
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: IN
33521: PUSH
33522: LD_VAR 0 1
33526: PPUSH
33527: LD_INT 52
33529: PPUSH
33530: CALL_OW 321
33534: PUSH
33535: LD_INT 2
33537: EQUAL
33538: AND
33539: IFFALSE 33556
// bpoints := bpoints * 1.5 ;
33541: LD_ADDR_VAR 0 10
33545: PUSH
33546: LD_VAR 0 10
33550: PUSH
33551: LD_REAL  1.50000000000000E+0000
33554: MUL
33555: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33556: LD_VAR 0 1
33560: PPUSH
33561: LD_INT 66
33563: PPUSH
33564: CALL_OW 321
33568: PUSH
33569: LD_INT 2
33571: EQUAL
33572: IFFALSE 33589
// bpoints := bpoints * 1.1 ;
33574: LD_ADDR_VAR 0 10
33578: PUSH
33579: LD_VAR 0 10
33583: PUSH
33584: LD_REAL  1.10000000000000E+0000
33587: MUL
33588: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33589: LD_ADDR_VAR 0 10
33593: PUSH
33594: LD_VAR 0 10
33598: PUSH
33599: LD_VAR 0 6
33603: PPUSH
33604: LD_INT 1
33606: PPUSH
33607: CALL_OW 259
33611: PUSH
33612: LD_REAL  1.15000000000000E+0000
33615: MUL
33616: MUL
33617: ST_TO_ADDR
// end ; unit_vehicle :
33618: GO 34442
33620: LD_INT 2
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33628
33626: GO 34430
33628: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33629: LD_VAR 0 6
33633: PPUSH
33634: CALL_OW 264
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: LD_INT 42
33644: PUSH
33645: LD_INT 24
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: IN
33653: IFFALSE 33674
// points := [ 25 , 5 , 3 ] ;
33655: LD_ADDR_VAR 0 9
33659: PUSH
33660: LD_INT 25
33662: PUSH
33663: LD_INT 5
33665: PUSH
33666: LD_INT 3
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: LIST
33673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33674: LD_VAR 0 6
33678: PPUSH
33679: CALL_OW 264
33683: PUSH
33684: LD_INT 4
33686: PUSH
33687: LD_INT 43
33689: PUSH
33690: LD_INT 25
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: IN
33698: IFFALSE 33719
// points := [ 40 , 15 , 5 ] ;
33700: LD_ADDR_VAR 0 9
33704: PUSH
33705: LD_INT 40
33707: PUSH
33708: LD_INT 15
33710: PUSH
33711: LD_INT 5
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: LIST
33718: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33719: LD_VAR 0 6
33723: PPUSH
33724: CALL_OW 264
33728: PUSH
33729: LD_INT 3
33731: PUSH
33732: LD_INT 23
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: IN
33739: IFFALSE 33760
// points := [ 7 , 25 , 8 ] ;
33741: LD_ADDR_VAR 0 9
33745: PUSH
33746: LD_INT 7
33748: PUSH
33749: LD_INT 25
33751: PUSH
33752: LD_INT 8
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33760: LD_VAR 0 6
33764: PPUSH
33765: CALL_OW 264
33769: PUSH
33770: LD_INT 5
33772: PUSH
33773: LD_INT 27
33775: PUSH
33776: LD_INT 44
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: IN
33784: IFFALSE 33805
// points := [ 14 , 50 , 16 ] ;
33786: LD_ADDR_VAR 0 9
33790: PUSH
33791: LD_INT 14
33793: PUSH
33794: LD_INT 50
33796: PUSH
33797: LD_INT 16
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: LIST
33804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33805: LD_VAR 0 6
33809: PPUSH
33810: CALL_OW 264
33814: PUSH
33815: LD_INT 6
33817: PUSH
33818: LD_INT 46
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: IN
33825: IFFALSE 33846
// points := [ 32 , 120 , 70 ] ;
33827: LD_ADDR_VAR 0 9
33831: PUSH
33832: LD_INT 32
33834: PUSH
33835: LD_INT 120
33837: PUSH
33838: LD_INT 70
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33846: LD_VAR 0 6
33850: PPUSH
33851: CALL_OW 264
33855: PUSH
33856: LD_INT 7
33858: PUSH
33859: LD_INT 28
33861: PUSH
33862: LD_INT 45
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: IN
33870: IFFALSE 33891
// points := [ 35 , 20 , 45 ] ;
33872: LD_ADDR_VAR 0 9
33876: PUSH
33877: LD_INT 35
33879: PUSH
33880: LD_INT 20
33882: PUSH
33883: LD_INT 45
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: LIST
33890: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33891: LD_VAR 0 6
33895: PPUSH
33896: CALL_OW 264
33900: PUSH
33901: LD_INT 47
33903: PUSH
33904: EMPTY
33905: LIST
33906: IN
33907: IFFALSE 33928
// points := [ 67 , 45 , 75 ] ;
33909: LD_ADDR_VAR 0 9
33913: PUSH
33914: LD_INT 67
33916: PUSH
33917: LD_INT 45
33919: PUSH
33920: LD_INT 75
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33928: LD_VAR 0 6
33932: PPUSH
33933: CALL_OW 264
33937: PUSH
33938: LD_INT 26
33940: PUSH
33941: EMPTY
33942: LIST
33943: IN
33944: IFFALSE 33965
// points := [ 120 , 30 , 80 ] ;
33946: LD_ADDR_VAR 0 9
33950: PUSH
33951: LD_INT 120
33953: PUSH
33954: LD_INT 30
33956: PUSH
33957: LD_INT 80
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33965: LD_VAR 0 6
33969: PPUSH
33970: CALL_OW 264
33974: PUSH
33975: LD_INT 22
33977: PUSH
33978: EMPTY
33979: LIST
33980: IN
33981: IFFALSE 34002
// points := [ 40 , 1 , 1 ] ;
33983: LD_ADDR_VAR 0 9
33987: PUSH
33988: LD_INT 40
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34002: LD_VAR 0 6
34006: PPUSH
34007: CALL_OW 264
34011: PUSH
34012: LD_INT 29
34014: PUSH
34015: EMPTY
34016: LIST
34017: IN
34018: IFFALSE 34039
// points := [ 70 , 200 , 400 ] ;
34020: LD_ADDR_VAR 0 9
34024: PUSH
34025: LD_INT 70
34027: PUSH
34028: LD_INT 200
34030: PUSH
34031: LD_INT 400
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34039: LD_VAR 0 6
34043: PPUSH
34044: CALL_OW 264
34048: PUSH
34049: LD_INT 14
34051: PUSH
34052: LD_INT 53
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: IN
34059: IFFALSE 34080
// points := [ 40 , 10 , 20 ] ;
34061: LD_ADDR_VAR 0 9
34065: PUSH
34066: LD_INT 40
34068: PUSH
34069: LD_INT 10
34071: PUSH
34072: LD_INT 20
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34080: LD_VAR 0 6
34084: PPUSH
34085: CALL_OW 264
34089: PUSH
34090: LD_INT 9
34092: PUSH
34093: EMPTY
34094: LIST
34095: IN
34096: IFFALSE 34117
// points := [ 5 , 70 , 20 ] ;
34098: LD_ADDR_VAR 0 9
34102: PUSH
34103: LD_INT 5
34105: PUSH
34106: LD_INT 70
34108: PUSH
34109: LD_INT 20
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: LIST
34116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34117: LD_VAR 0 6
34121: PPUSH
34122: CALL_OW 264
34126: PUSH
34127: LD_INT 10
34129: PUSH
34130: EMPTY
34131: LIST
34132: IN
34133: IFFALSE 34154
// points := [ 35 , 110 , 70 ] ;
34135: LD_ADDR_VAR 0 9
34139: PUSH
34140: LD_INT 35
34142: PUSH
34143: LD_INT 110
34145: PUSH
34146: LD_INT 70
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34154: LD_VAR 0 6
34158: PPUSH
34159: CALL_OW 265
34163: PUSH
34164: LD_INT 25
34166: EQUAL
34167: IFFALSE 34188
// points := [ 80 , 65 , 100 ] ;
34169: LD_ADDR_VAR 0 9
34173: PUSH
34174: LD_INT 80
34176: PUSH
34177: LD_INT 65
34179: PUSH
34180: LD_INT 100
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34188: LD_VAR 0 6
34192: PPUSH
34193: CALL_OW 263
34197: PUSH
34198: LD_INT 1
34200: EQUAL
34201: IFFALSE 34236
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34203: LD_ADDR_VAR 0 10
34207: PUSH
34208: LD_VAR 0 10
34212: PUSH
34213: LD_VAR 0 6
34217: PPUSH
34218: CALL_OW 311
34222: PPUSH
34223: LD_INT 3
34225: PPUSH
34226: CALL_OW 259
34230: PUSH
34231: LD_INT 4
34233: MUL
34234: MUL
34235: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34236: LD_VAR 0 6
34240: PPUSH
34241: CALL_OW 263
34245: PUSH
34246: LD_INT 2
34248: EQUAL
34249: IFFALSE 34300
// begin j := IsControledBy ( i ) ;
34251: LD_ADDR_VAR 0 7
34255: PUSH
34256: LD_VAR 0 6
34260: PPUSH
34261: CALL_OW 312
34265: ST_TO_ADDR
// if j then
34266: LD_VAR 0 7
34270: IFFALSE 34300
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34272: LD_ADDR_VAR 0 10
34276: PUSH
34277: LD_VAR 0 10
34281: PUSH
34282: LD_VAR 0 7
34286: PPUSH
34287: LD_INT 3
34289: PPUSH
34290: CALL_OW 259
34294: PUSH
34295: LD_INT 3
34297: MUL
34298: MUL
34299: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34300: LD_VAR 0 6
34304: PPUSH
34305: CALL_OW 264
34309: PUSH
34310: LD_INT 5
34312: PUSH
34313: LD_INT 6
34315: PUSH
34316: LD_INT 46
34318: PUSH
34319: LD_INT 44
34321: PUSH
34322: LD_INT 47
34324: PUSH
34325: LD_INT 45
34327: PUSH
34328: LD_INT 28
34330: PUSH
34331: LD_INT 7
34333: PUSH
34334: LD_INT 27
34336: PUSH
34337: LD_INT 29
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: IN
34352: PUSH
34353: LD_VAR 0 1
34357: PPUSH
34358: LD_INT 52
34360: PPUSH
34361: CALL_OW 321
34365: PUSH
34366: LD_INT 2
34368: EQUAL
34369: AND
34370: IFFALSE 34387
// bpoints := bpoints * 1.2 ;
34372: LD_ADDR_VAR 0 10
34376: PUSH
34377: LD_VAR 0 10
34381: PUSH
34382: LD_REAL  1.20000000000000E+0000
34385: MUL
34386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34387: LD_VAR 0 6
34391: PPUSH
34392: CALL_OW 264
34396: PUSH
34397: LD_INT 6
34399: PUSH
34400: LD_INT 46
34402: PUSH
34403: LD_INT 47
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: LIST
34410: IN
34411: IFFALSE 34428
// bpoints := bpoints * 1.2 ;
34413: LD_ADDR_VAR 0 10
34417: PUSH
34418: LD_VAR 0 10
34422: PUSH
34423: LD_REAL  1.20000000000000E+0000
34426: MUL
34427: ST_TO_ADDR
// end ; unit_building :
34428: GO 34442
34430: LD_INT 3
34432: DOUBLE
34433: EQUAL
34434: IFTRUE 34438
34436: GO 34441
34438: POP
// ; end ;
34439: GO 34442
34441: POP
// for j = 1 to 3 do
34442: LD_ADDR_VAR 0 7
34446: PUSH
34447: DOUBLE
34448: LD_INT 1
34450: DEC
34451: ST_TO_ADDR
34452: LD_INT 3
34454: PUSH
34455: FOR_TO
34456: IFFALSE 34509
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34458: LD_ADDR_VAR 0 5
34462: PUSH
34463: LD_VAR 0 5
34467: PPUSH
34468: LD_VAR 0 7
34472: PPUSH
34473: LD_VAR 0 5
34477: PUSH
34478: LD_VAR 0 7
34482: ARRAY
34483: PUSH
34484: LD_VAR 0 9
34488: PUSH
34489: LD_VAR 0 7
34493: ARRAY
34494: PUSH
34495: LD_VAR 0 10
34499: MUL
34500: PLUS
34501: PPUSH
34502: CALL_OW 1
34506: ST_TO_ADDR
34507: GO 34455
34509: POP
34510: POP
// end ;
34511: GO 32994
34513: POP
34514: POP
// result := Replace ( result , 4 , tmp ) ;
34515: LD_ADDR_VAR 0 5
34519: PUSH
34520: LD_VAR 0 5
34524: PPUSH
34525: LD_INT 4
34527: PPUSH
34528: LD_VAR 0 8
34532: PPUSH
34533: CALL_OW 1
34537: ST_TO_ADDR
// end ;
34538: LD_VAR 0 5
34542: RET
// export function DangerAtRange ( unit , range ) ; begin
34543: LD_INT 0
34545: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34546: LD_ADDR_VAR 0 3
34550: PUSH
34551: LD_VAR 0 1
34555: PPUSH
34556: CALL_OW 255
34560: PPUSH
34561: LD_VAR 0 1
34565: PPUSH
34566: CALL_OW 250
34570: PPUSH
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL_OW 251
34580: PPUSH
34581: LD_VAR 0 2
34585: PPUSH
34586: CALL 32846 0 4
34590: ST_TO_ADDR
// end ;
34591: LD_VAR 0 3
34595: RET
// export function DangerInArea ( side , area ) ; begin
34596: LD_INT 0
34598: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34599: LD_ADDR_VAR 0 3
34603: PUSH
34604: LD_VAR 0 2
34608: PPUSH
34609: LD_INT 81
34611: PUSH
34612: LD_VAR 0 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PPUSH
34621: CALL_OW 70
34625: ST_TO_ADDR
// end ;
34626: LD_VAR 0 3
34630: RET
// export function IsExtension ( b ) ; begin
34631: LD_INT 0
34633: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34634: LD_ADDR_VAR 0 2
34638: PUSH
34639: LD_VAR 0 1
34643: PUSH
34644: LD_INT 23
34646: PUSH
34647: LD_INT 20
34649: PUSH
34650: LD_INT 22
34652: PUSH
34653: LD_INT 17
34655: PUSH
34656: LD_INT 24
34658: PUSH
34659: LD_INT 21
34661: PUSH
34662: LD_INT 19
34664: PUSH
34665: LD_INT 16
34667: PUSH
34668: LD_INT 25
34670: PUSH
34671: LD_INT 18
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: IN
34686: ST_TO_ADDR
// end ;
34687: LD_VAR 0 2
34691: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34692: LD_INT 0
34694: PPUSH
34695: PPUSH
34696: PPUSH
// result := [ ] ;
34697: LD_ADDR_VAR 0 4
34701: PUSH
34702: EMPTY
34703: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34704: LD_ADDR_VAR 0 5
34708: PUSH
34709: LD_VAR 0 2
34713: PPUSH
34714: LD_INT 21
34716: PUSH
34717: LD_INT 3
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PPUSH
34724: CALL_OW 70
34728: ST_TO_ADDR
// if not tmp then
34729: LD_VAR 0 5
34733: NOT
34734: IFFALSE 34738
// exit ;
34736: GO 34802
// if checkLink then
34738: LD_VAR 0 3
34742: IFFALSE 34792
// begin for i in tmp do
34744: LD_ADDR_VAR 0 6
34748: PUSH
34749: LD_VAR 0 5
34753: PUSH
34754: FOR_IN
34755: IFFALSE 34790
// if GetBase ( i ) <> base then
34757: LD_VAR 0 6
34761: PPUSH
34762: CALL_OW 274
34766: PUSH
34767: LD_VAR 0 1
34771: NONEQUAL
34772: IFFALSE 34788
// ComLinkToBase ( base , i ) ;
34774: LD_VAR 0 1
34778: PPUSH
34779: LD_VAR 0 6
34783: PPUSH
34784: CALL_OW 169
34788: GO 34754
34790: POP
34791: POP
// end ; result := tmp ;
34792: LD_ADDR_VAR 0 4
34796: PUSH
34797: LD_VAR 0 5
34801: ST_TO_ADDR
// end ;
34802: LD_VAR 0 4
34806: RET
// export function ComComplete ( units , b ) ; var i ; begin
34807: LD_INT 0
34809: PPUSH
34810: PPUSH
// if not units then
34811: LD_VAR 0 1
34815: NOT
34816: IFFALSE 34820
// exit ;
34818: GO 34910
// for i in units do
34820: LD_ADDR_VAR 0 4
34824: PUSH
34825: LD_VAR 0 1
34829: PUSH
34830: FOR_IN
34831: IFFALSE 34908
// if BuildingStatus ( b ) = bs_build then
34833: LD_VAR 0 2
34837: PPUSH
34838: CALL_OW 461
34842: PUSH
34843: LD_INT 1
34845: EQUAL
34846: IFFALSE 34906
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34848: LD_VAR 0 4
34852: PPUSH
34853: LD_STRING h
34855: PUSH
34856: LD_VAR 0 2
34860: PPUSH
34861: CALL_OW 250
34865: PUSH
34866: LD_VAR 0 2
34870: PPUSH
34871: CALL_OW 251
34875: PUSH
34876: LD_VAR 0 2
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: PPUSH
34902: CALL_OW 446
34906: GO 34830
34908: POP
34909: POP
// end ;
34910: LD_VAR 0 3
34914: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34915: LD_INT 0
34917: PPUSH
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34923: LD_VAR 0 1
34927: NOT
34928: PUSH
34929: LD_VAR 0 1
34933: PPUSH
34934: CALL_OW 263
34938: PUSH
34939: LD_INT 2
34941: EQUAL
34942: NOT
34943: OR
34944: IFFALSE 34948
// exit ;
34946: GO 35264
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34948: LD_ADDR_VAR 0 6
34952: PUSH
34953: LD_INT 22
34955: PUSH
34956: LD_VAR 0 1
34960: PPUSH
34961: CALL_OW 255
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: LD_INT 30
34975: PUSH
34976: LD_INT 36
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 34
34985: PUSH
34986: LD_INT 31
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PPUSH
35002: CALL_OW 69
35006: ST_TO_ADDR
// if not tmp then
35007: LD_VAR 0 6
35011: NOT
35012: IFFALSE 35016
// exit ;
35014: GO 35264
// result := [ ] ;
35016: LD_ADDR_VAR 0 2
35020: PUSH
35021: EMPTY
35022: ST_TO_ADDR
// for i in tmp do
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_VAR 0 6
35032: PUSH
35033: FOR_IN
35034: IFFALSE 35105
// begin t := UnitsInside ( i ) ;
35036: LD_ADDR_VAR 0 4
35040: PUSH
35041: LD_VAR 0 3
35045: PPUSH
35046: CALL_OW 313
35050: ST_TO_ADDR
// if t then
35051: LD_VAR 0 4
35055: IFFALSE 35103
// for j in t do
35057: LD_ADDR_VAR 0 7
35061: PUSH
35062: LD_VAR 0 4
35066: PUSH
35067: FOR_IN
35068: IFFALSE 35101
// result := Insert ( result , result + 1 , j ) ;
35070: LD_ADDR_VAR 0 2
35074: PUSH
35075: LD_VAR 0 2
35079: PPUSH
35080: LD_VAR 0 2
35084: PUSH
35085: LD_INT 1
35087: PLUS
35088: PPUSH
35089: LD_VAR 0 7
35093: PPUSH
35094: CALL_OW 2
35098: ST_TO_ADDR
35099: GO 35067
35101: POP
35102: POP
// end ;
35103: GO 35033
35105: POP
35106: POP
// if not result then
35107: LD_VAR 0 2
35111: NOT
35112: IFFALSE 35116
// exit ;
35114: GO 35264
// mech := result [ 1 ] ;
35116: LD_ADDR_VAR 0 5
35120: PUSH
35121: LD_VAR 0 2
35125: PUSH
35126: LD_INT 1
35128: ARRAY
35129: ST_TO_ADDR
// if result > 1 then
35130: LD_VAR 0 2
35134: PUSH
35135: LD_INT 1
35137: GREATER
35138: IFFALSE 35250
// for i = 2 to result do
35140: LD_ADDR_VAR 0 3
35144: PUSH
35145: DOUBLE
35146: LD_INT 2
35148: DEC
35149: ST_TO_ADDR
35150: LD_VAR 0 2
35154: PUSH
35155: FOR_TO
35156: IFFALSE 35248
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35158: LD_ADDR_VAR 0 4
35162: PUSH
35163: LD_VAR 0 2
35167: PUSH
35168: LD_VAR 0 3
35172: ARRAY
35173: PPUSH
35174: LD_INT 3
35176: PPUSH
35177: CALL_OW 259
35181: PUSH
35182: LD_VAR 0 2
35186: PUSH
35187: LD_VAR 0 3
35191: ARRAY
35192: PPUSH
35193: CALL_OW 432
35197: MINUS
35198: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35199: LD_VAR 0 4
35203: PUSH
35204: LD_VAR 0 5
35208: PPUSH
35209: LD_INT 3
35211: PPUSH
35212: CALL_OW 259
35216: PUSH
35217: LD_VAR 0 5
35221: PPUSH
35222: CALL_OW 432
35226: MINUS
35227: GREATEREQUAL
35228: IFFALSE 35246
// mech := result [ i ] ;
35230: LD_ADDR_VAR 0 5
35234: PUSH
35235: LD_VAR 0 2
35239: PUSH
35240: LD_VAR 0 3
35244: ARRAY
35245: ST_TO_ADDR
// end ;
35246: GO 35155
35248: POP
35249: POP
// ComLinkTo ( vehicle , mech ) ;
35250: LD_VAR 0 1
35254: PPUSH
35255: LD_VAR 0 5
35259: PPUSH
35260: CALL_OW 135
// end ;
35264: LD_VAR 0 2
35268: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35269: LD_INT 0
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
35283: PPUSH
// result := [ ] ;
35284: LD_ADDR_VAR 0 7
35288: PUSH
35289: EMPTY
35290: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35291: LD_VAR 0 1
35295: PPUSH
35296: CALL_OW 266
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: IN
35311: NOT
35312: IFFALSE 35316
// exit ;
35314: GO 36950
// if name then
35316: LD_VAR 0 3
35320: IFFALSE 35336
// SetBName ( base_dep , name ) ;
35322: LD_VAR 0 1
35326: PPUSH
35327: LD_VAR 0 3
35331: PPUSH
35332: CALL_OW 500
// base := GetBase ( base_dep ) ;
35336: LD_ADDR_VAR 0 15
35340: PUSH
35341: LD_VAR 0 1
35345: PPUSH
35346: CALL_OW 274
35350: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35351: LD_ADDR_VAR 0 16
35355: PUSH
35356: LD_VAR 0 1
35360: PPUSH
35361: CALL_OW 255
35365: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35366: LD_ADDR_VAR 0 17
35370: PUSH
35371: LD_VAR 0 1
35375: PPUSH
35376: CALL_OW 248
35380: ST_TO_ADDR
// if sources then
35381: LD_VAR 0 5
35385: IFFALSE 35432
// for i = 1 to 3 do
35387: LD_ADDR_VAR 0 8
35391: PUSH
35392: DOUBLE
35393: LD_INT 1
35395: DEC
35396: ST_TO_ADDR
35397: LD_INT 3
35399: PUSH
35400: FOR_TO
35401: IFFALSE 35430
// AddResourceType ( base , i , sources [ i ] ) ;
35403: LD_VAR 0 15
35407: PPUSH
35408: LD_VAR 0 8
35412: PPUSH
35413: LD_VAR 0 5
35417: PUSH
35418: LD_VAR 0 8
35422: ARRAY
35423: PPUSH
35424: CALL_OW 276
35428: GO 35400
35430: POP
35431: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35432: LD_ADDR_VAR 0 18
35436: PUSH
35437: LD_VAR 0 15
35441: PPUSH
35442: LD_VAR 0 2
35446: PPUSH
35447: LD_INT 1
35449: PPUSH
35450: CALL 34692 0 3
35454: ST_TO_ADDR
// InitHc ;
35455: CALL_OW 19
// InitUc ;
35459: CALL_OW 18
// uc_side := side ;
35463: LD_ADDR_OWVAR 20
35467: PUSH
35468: LD_VAR 0 16
35472: ST_TO_ADDR
// uc_nation := nation ;
35473: LD_ADDR_OWVAR 21
35477: PUSH
35478: LD_VAR 0 17
35482: ST_TO_ADDR
// if buildings then
35483: LD_VAR 0 18
35487: IFFALSE 36809
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35489: LD_ADDR_VAR 0 19
35493: PUSH
35494: LD_VAR 0 18
35498: PPUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 30
35504: PUSH
35505: LD_INT 29
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 30
35514: PUSH
35515: LD_INT 30
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: PPUSH
35527: CALL_OW 72
35531: ST_TO_ADDR
// if tmp then
35532: LD_VAR 0 19
35536: IFFALSE 35584
// for i in tmp do
35538: LD_ADDR_VAR 0 8
35542: PUSH
35543: LD_VAR 0 19
35547: PUSH
35548: FOR_IN
35549: IFFALSE 35582
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35551: LD_VAR 0 8
35555: PPUSH
35556: CALL_OW 250
35560: PPUSH
35561: LD_VAR 0 8
35565: PPUSH
35566: CALL_OW 251
35570: PPUSH
35571: LD_VAR 0 16
35575: PPUSH
35576: CALL_OW 441
35580: GO 35548
35582: POP
35583: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35584: LD_VAR 0 18
35588: PPUSH
35589: LD_INT 2
35591: PUSH
35592: LD_INT 30
35594: PUSH
35595: LD_INT 32
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 30
35604: PUSH
35605: LD_INT 33
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: PPUSH
35617: CALL_OW 72
35621: IFFALSE 35709
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35623: LD_ADDR_VAR 0 8
35627: PUSH
35628: LD_VAR 0 18
35632: PPUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 30
35638: PUSH
35639: LD_INT 32
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 30
35648: PUSH
35649: LD_INT 33
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: PPUSH
35661: CALL_OW 72
35665: PUSH
35666: FOR_IN
35667: IFFALSE 35707
// begin if not GetBWeapon ( i ) then
35669: LD_VAR 0 8
35673: PPUSH
35674: CALL_OW 269
35678: NOT
35679: IFFALSE 35705
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35681: LD_VAR 0 8
35685: PPUSH
35686: LD_VAR 0 8
35690: PPUSH
35691: LD_VAR 0 2
35695: PPUSH
35696: CALL 36955 0 2
35700: PPUSH
35701: CALL_OW 431
// end ;
35705: GO 35666
35707: POP
35708: POP
// end ; for i = 1 to personel do
35709: LD_ADDR_VAR 0 8
35713: PUSH
35714: DOUBLE
35715: LD_INT 1
35717: DEC
35718: ST_TO_ADDR
35719: LD_VAR 0 6
35723: PUSH
35724: FOR_TO
35725: IFFALSE 36789
// begin if i > 4 then
35727: LD_VAR 0 8
35731: PUSH
35732: LD_INT 4
35734: GREATER
35735: IFFALSE 35739
// break ;
35737: GO 36789
// case i of 1 :
35739: LD_VAR 0 8
35743: PUSH
35744: LD_INT 1
35746: DOUBLE
35747: EQUAL
35748: IFTRUE 35752
35750: GO 35832
35752: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35753: LD_ADDR_VAR 0 12
35757: PUSH
35758: LD_VAR 0 18
35762: PPUSH
35763: LD_INT 22
35765: PUSH
35766: LD_VAR 0 16
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 58
35777: PUSH
35778: EMPTY
35779: LIST
35780: PUSH
35781: LD_INT 2
35783: PUSH
35784: LD_INT 30
35786: PUSH
35787: LD_INT 32
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 30
35796: PUSH
35797: LD_INT 4
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 30
35806: PUSH
35807: LD_INT 5
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: PPUSH
35825: CALL_OW 72
35829: ST_TO_ADDR
35830: GO 36054
35832: LD_INT 2
35834: DOUBLE
35835: EQUAL
35836: IFTRUE 35840
35838: GO 35902
35840: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35841: LD_ADDR_VAR 0 12
35845: PUSH
35846: LD_VAR 0 18
35850: PPUSH
35851: LD_INT 22
35853: PUSH
35854: LD_VAR 0 16
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: LD_INT 30
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 30
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PPUSH
35895: CALL_OW 72
35899: ST_TO_ADDR
35900: GO 36054
35902: LD_INT 3
35904: DOUBLE
35905: EQUAL
35906: IFTRUE 35910
35908: GO 35972
35910: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35911: LD_ADDR_VAR 0 12
35915: PUSH
35916: LD_VAR 0 18
35920: PPUSH
35921: LD_INT 22
35923: PUSH
35924: LD_VAR 0 16
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: LD_INT 30
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 30
35948: PUSH
35949: LD_INT 3
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PPUSH
35965: CALL_OW 72
35969: ST_TO_ADDR
35970: GO 36054
35972: LD_INT 4
35974: DOUBLE
35975: EQUAL
35976: IFTRUE 35980
35978: GO 36053
35980: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35981: LD_ADDR_VAR 0 12
35985: PUSH
35986: LD_VAR 0 18
35990: PPUSH
35991: LD_INT 22
35993: PUSH
35994: LD_VAR 0 16
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: LD_INT 30
36008: PUSH
36009: LD_INT 6
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 30
36018: PUSH
36019: LD_INT 7
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 30
36028: PUSH
36029: LD_INT 8
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PPUSH
36046: CALL_OW 72
36050: ST_TO_ADDR
36051: GO 36054
36053: POP
// if i = 1 then
36054: LD_VAR 0 8
36058: PUSH
36059: LD_INT 1
36061: EQUAL
36062: IFFALSE 36173
// begin tmp := [ ] ;
36064: LD_ADDR_VAR 0 19
36068: PUSH
36069: EMPTY
36070: ST_TO_ADDR
// for j in f do
36071: LD_ADDR_VAR 0 9
36075: PUSH
36076: LD_VAR 0 12
36080: PUSH
36081: FOR_IN
36082: IFFALSE 36155
// if GetBType ( j ) = b_bunker then
36084: LD_VAR 0 9
36088: PPUSH
36089: CALL_OW 266
36093: PUSH
36094: LD_INT 32
36096: EQUAL
36097: IFFALSE 36124
// tmp := Insert ( tmp , 1 , j ) else
36099: LD_ADDR_VAR 0 19
36103: PUSH
36104: LD_VAR 0 19
36108: PPUSH
36109: LD_INT 1
36111: PPUSH
36112: LD_VAR 0 9
36116: PPUSH
36117: CALL_OW 2
36121: ST_TO_ADDR
36122: GO 36153
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36124: LD_ADDR_VAR 0 19
36128: PUSH
36129: LD_VAR 0 19
36133: PPUSH
36134: LD_VAR 0 19
36138: PUSH
36139: LD_INT 1
36141: PLUS
36142: PPUSH
36143: LD_VAR 0 9
36147: PPUSH
36148: CALL_OW 2
36152: ST_TO_ADDR
36153: GO 36081
36155: POP
36156: POP
// if tmp then
36157: LD_VAR 0 19
36161: IFFALSE 36173
// f := tmp ;
36163: LD_ADDR_VAR 0 12
36167: PUSH
36168: LD_VAR 0 19
36172: ST_TO_ADDR
// end ; x := personel [ i ] ;
36173: LD_ADDR_VAR 0 13
36177: PUSH
36178: LD_VAR 0 6
36182: PUSH
36183: LD_VAR 0 8
36187: ARRAY
36188: ST_TO_ADDR
// if x = - 1 then
36189: LD_VAR 0 13
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: EQUAL
36198: IFFALSE 36407
// begin for j in f do
36200: LD_ADDR_VAR 0 9
36204: PUSH
36205: LD_VAR 0 12
36209: PUSH
36210: FOR_IN
36211: IFFALSE 36403
// repeat InitHc ;
36213: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36217: LD_VAR 0 9
36221: PPUSH
36222: CALL_OW 266
36226: PUSH
36227: LD_INT 5
36229: EQUAL
36230: IFFALSE 36300
// begin if UnitsInside ( j ) < 3 then
36232: LD_VAR 0 9
36236: PPUSH
36237: CALL_OW 313
36241: PUSH
36242: LD_INT 3
36244: LESS
36245: IFFALSE 36281
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36247: LD_INT 0
36249: PPUSH
36250: LD_INT 5
36252: PUSH
36253: LD_INT 8
36255: PUSH
36256: LD_INT 9
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: LIST
36263: PUSH
36264: LD_VAR 0 17
36268: ARRAY
36269: PPUSH
36270: LD_VAR 0 4
36274: PPUSH
36275: CALL_OW 380
36279: GO 36298
// PrepareHuman ( false , i , skill ) ;
36281: LD_INT 0
36283: PPUSH
36284: LD_VAR 0 8
36288: PPUSH
36289: LD_VAR 0 4
36293: PPUSH
36294: CALL_OW 380
// end else
36298: GO 36317
// PrepareHuman ( false , i , skill ) ;
36300: LD_INT 0
36302: PPUSH
36303: LD_VAR 0 8
36307: PPUSH
36308: LD_VAR 0 4
36312: PPUSH
36313: CALL_OW 380
// un := CreateHuman ;
36317: LD_ADDR_VAR 0 14
36321: PUSH
36322: CALL_OW 44
36326: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36327: LD_ADDR_VAR 0 7
36331: PUSH
36332: LD_VAR 0 7
36336: PPUSH
36337: LD_INT 1
36339: PPUSH
36340: LD_VAR 0 14
36344: PPUSH
36345: CALL_OW 2
36349: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36350: LD_VAR 0 14
36354: PPUSH
36355: LD_VAR 0 9
36359: PPUSH
36360: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36364: LD_VAR 0 9
36368: PPUSH
36369: CALL_OW 313
36373: PUSH
36374: LD_INT 6
36376: EQUAL
36377: PUSH
36378: LD_VAR 0 9
36382: PPUSH
36383: CALL_OW 266
36387: PUSH
36388: LD_INT 32
36390: PUSH
36391: LD_INT 31
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: IN
36398: OR
36399: IFFALSE 36213
36401: GO 36210
36403: POP
36404: POP
// end else
36405: GO 36787
// for j = 1 to x do
36407: LD_ADDR_VAR 0 9
36411: PUSH
36412: DOUBLE
36413: LD_INT 1
36415: DEC
36416: ST_TO_ADDR
36417: LD_VAR 0 13
36421: PUSH
36422: FOR_TO
36423: IFFALSE 36785
// begin InitHc ;
36425: CALL_OW 19
// if not f then
36429: LD_VAR 0 12
36433: NOT
36434: IFFALSE 36523
// begin PrepareHuman ( false , i , skill ) ;
36436: LD_INT 0
36438: PPUSH
36439: LD_VAR 0 8
36443: PPUSH
36444: LD_VAR 0 4
36448: PPUSH
36449: CALL_OW 380
// un := CreateHuman ;
36453: LD_ADDR_VAR 0 14
36457: PUSH
36458: CALL_OW 44
36462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36463: LD_ADDR_VAR 0 7
36467: PUSH
36468: LD_VAR 0 7
36472: PPUSH
36473: LD_INT 1
36475: PPUSH
36476: LD_VAR 0 14
36480: PPUSH
36481: CALL_OW 2
36485: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36486: LD_VAR 0 14
36490: PPUSH
36491: LD_VAR 0 1
36495: PPUSH
36496: CALL_OW 250
36500: PPUSH
36501: LD_VAR 0 1
36505: PPUSH
36506: CALL_OW 251
36510: PPUSH
36511: LD_INT 10
36513: PPUSH
36514: LD_INT 0
36516: PPUSH
36517: CALL_OW 50
// continue ;
36521: GO 36422
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36523: LD_VAR 0 12
36527: PUSH
36528: LD_INT 1
36530: ARRAY
36531: PPUSH
36532: CALL_OW 313
36536: PUSH
36537: LD_VAR 0 12
36541: PUSH
36542: LD_INT 1
36544: ARRAY
36545: PPUSH
36546: CALL_OW 266
36550: PUSH
36551: LD_INT 32
36553: PUSH
36554: LD_INT 31
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: IN
36561: AND
36562: PUSH
36563: LD_VAR 0 12
36567: PUSH
36568: LD_INT 1
36570: ARRAY
36571: PPUSH
36572: CALL_OW 313
36576: PUSH
36577: LD_INT 6
36579: EQUAL
36580: OR
36581: IFFALSE 36601
// f := Delete ( f , 1 ) ;
36583: LD_ADDR_VAR 0 12
36587: PUSH
36588: LD_VAR 0 12
36592: PPUSH
36593: LD_INT 1
36595: PPUSH
36596: CALL_OW 3
36600: ST_TO_ADDR
// if not f then
36601: LD_VAR 0 12
36605: NOT
36606: IFFALSE 36624
// begin x := x + 2 ;
36608: LD_ADDR_VAR 0 13
36612: PUSH
36613: LD_VAR 0 13
36617: PUSH
36618: LD_INT 2
36620: PLUS
36621: ST_TO_ADDR
// continue ;
36622: GO 36422
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36624: LD_VAR 0 12
36628: PUSH
36629: LD_INT 1
36631: ARRAY
36632: PPUSH
36633: CALL_OW 266
36637: PUSH
36638: LD_INT 5
36640: EQUAL
36641: IFFALSE 36715
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36643: LD_VAR 0 12
36647: PUSH
36648: LD_INT 1
36650: ARRAY
36651: PPUSH
36652: CALL_OW 313
36656: PUSH
36657: LD_INT 3
36659: LESS
36660: IFFALSE 36696
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36662: LD_INT 0
36664: PPUSH
36665: LD_INT 5
36667: PUSH
36668: LD_INT 8
36670: PUSH
36671: LD_INT 9
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: PUSH
36679: LD_VAR 0 17
36683: ARRAY
36684: PPUSH
36685: LD_VAR 0 4
36689: PPUSH
36690: CALL_OW 380
36694: GO 36713
// PrepareHuman ( false , i , skill ) ;
36696: LD_INT 0
36698: PPUSH
36699: LD_VAR 0 8
36703: PPUSH
36704: LD_VAR 0 4
36708: PPUSH
36709: CALL_OW 380
// end else
36713: GO 36732
// PrepareHuman ( false , i , skill ) ;
36715: LD_INT 0
36717: PPUSH
36718: LD_VAR 0 8
36722: PPUSH
36723: LD_VAR 0 4
36727: PPUSH
36728: CALL_OW 380
// un := CreateHuman ;
36732: LD_ADDR_VAR 0 14
36736: PUSH
36737: CALL_OW 44
36741: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36742: LD_ADDR_VAR 0 7
36746: PUSH
36747: LD_VAR 0 7
36751: PPUSH
36752: LD_INT 1
36754: PPUSH
36755: LD_VAR 0 14
36759: PPUSH
36760: CALL_OW 2
36764: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36765: LD_VAR 0 14
36769: PPUSH
36770: LD_VAR 0 12
36774: PUSH
36775: LD_INT 1
36777: ARRAY
36778: PPUSH
36779: CALL_OW 52
// end ;
36783: GO 36422
36785: POP
36786: POP
// end ;
36787: GO 35724
36789: POP
36790: POP
// result := result ^ buildings ;
36791: LD_ADDR_VAR 0 7
36795: PUSH
36796: LD_VAR 0 7
36800: PUSH
36801: LD_VAR 0 18
36805: ADD
36806: ST_TO_ADDR
// end else
36807: GO 36950
// begin for i = 1 to personel do
36809: LD_ADDR_VAR 0 8
36813: PUSH
36814: DOUBLE
36815: LD_INT 1
36817: DEC
36818: ST_TO_ADDR
36819: LD_VAR 0 6
36823: PUSH
36824: FOR_TO
36825: IFFALSE 36948
// begin if i > 4 then
36827: LD_VAR 0 8
36831: PUSH
36832: LD_INT 4
36834: GREATER
36835: IFFALSE 36839
// break ;
36837: GO 36948
// x := personel [ i ] ;
36839: LD_ADDR_VAR 0 13
36843: PUSH
36844: LD_VAR 0 6
36848: PUSH
36849: LD_VAR 0 8
36853: ARRAY
36854: ST_TO_ADDR
// if x = - 1 then
36855: LD_VAR 0 13
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: EQUAL
36864: IFFALSE 36868
// continue ;
36866: GO 36824
// PrepareHuman ( false , i , skill ) ;
36868: LD_INT 0
36870: PPUSH
36871: LD_VAR 0 8
36875: PPUSH
36876: LD_VAR 0 4
36880: PPUSH
36881: CALL_OW 380
// un := CreateHuman ;
36885: LD_ADDR_VAR 0 14
36889: PUSH
36890: CALL_OW 44
36894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36895: LD_VAR 0 14
36899: PPUSH
36900: LD_VAR 0 1
36904: PPUSH
36905: CALL_OW 250
36909: PPUSH
36910: LD_VAR 0 1
36914: PPUSH
36915: CALL_OW 251
36919: PPUSH
36920: LD_INT 10
36922: PPUSH
36923: LD_INT 0
36925: PPUSH
36926: CALL_OW 50
// result := result ^ un ;
36930: LD_ADDR_VAR 0 7
36934: PUSH
36935: LD_VAR 0 7
36939: PUSH
36940: LD_VAR 0 14
36944: ADD
36945: ST_TO_ADDR
// end ;
36946: GO 36824
36948: POP
36949: POP
// end ; end ;
36950: LD_VAR 0 7
36954: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36955: LD_INT 0
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
36971: PPUSH
36972: PPUSH
// result := false ;
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_INT 0
36980: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36981: LD_VAR 0 1
36985: NOT
36986: PUSH
36987: LD_VAR 0 1
36991: PPUSH
36992: CALL_OW 266
36996: PUSH
36997: LD_INT 32
36999: PUSH
37000: LD_INT 33
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: IN
37007: NOT
37008: OR
37009: IFFALSE 37013
// exit ;
37011: GO 38152
// nat := GetNation ( tower ) ;
37013: LD_ADDR_VAR 0 12
37017: PUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: CALL_OW 248
37027: ST_TO_ADDR
// side := GetSide ( tower ) ;
37028: LD_ADDR_VAR 0 16
37032: PUSH
37033: LD_VAR 0 1
37037: PPUSH
37038: CALL_OW 255
37042: ST_TO_ADDR
// x := GetX ( tower ) ;
37043: LD_ADDR_VAR 0 10
37047: PUSH
37048: LD_VAR 0 1
37052: PPUSH
37053: CALL_OW 250
37057: ST_TO_ADDR
// y := GetY ( tower ) ;
37058: LD_ADDR_VAR 0 11
37062: PUSH
37063: LD_VAR 0 1
37067: PPUSH
37068: CALL_OW 251
37072: ST_TO_ADDR
// if not x or not y then
37073: LD_VAR 0 10
37077: NOT
37078: PUSH
37079: LD_VAR 0 11
37083: NOT
37084: OR
37085: IFFALSE 37089
// exit ;
37087: GO 38152
// weapon := 0 ;
37089: LD_ADDR_VAR 0 18
37093: PUSH
37094: LD_INT 0
37096: ST_TO_ADDR
// fac_list := [ ] ;
37097: LD_ADDR_VAR 0 17
37101: PUSH
37102: EMPTY
37103: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37104: LD_ADDR_VAR 0 6
37108: PUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: CALL_OW 274
37118: PPUSH
37119: LD_VAR 0 2
37123: PPUSH
37124: LD_INT 0
37126: PPUSH
37127: CALL 34692 0 3
37131: PPUSH
37132: LD_INT 30
37134: PUSH
37135: LD_INT 3
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PPUSH
37142: CALL_OW 72
37146: ST_TO_ADDR
// if not factories then
37147: LD_VAR 0 6
37151: NOT
37152: IFFALSE 37156
// exit ;
37154: GO 38152
// for i in factories do
37156: LD_ADDR_VAR 0 8
37160: PUSH
37161: LD_VAR 0 6
37165: PUSH
37166: FOR_IN
37167: IFFALSE 37192
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37169: LD_ADDR_VAR 0 17
37173: PUSH
37174: LD_VAR 0 17
37178: PUSH
37179: LD_VAR 0 8
37183: PPUSH
37184: CALL_OW 478
37188: UNION
37189: ST_TO_ADDR
37190: GO 37166
37192: POP
37193: POP
// if not fac_list then
37194: LD_VAR 0 17
37198: NOT
37199: IFFALSE 37203
// exit ;
37201: GO 38152
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37203: LD_ADDR_VAR 0 5
37207: PUSH
37208: LD_INT 4
37210: PUSH
37211: LD_INT 5
37213: PUSH
37214: LD_INT 9
37216: PUSH
37217: LD_INT 10
37219: PUSH
37220: LD_INT 6
37222: PUSH
37223: LD_INT 7
37225: PUSH
37226: LD_INT 11
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 27
37240: PUSH
37241: LD_INT 28
37243: PUSH
37244: LD_INT 26
37246: PUSH
37247: LD_INT 30
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 43
37258: PUSH
37259: LD_INT 44
37261: PUSH
37262: LD_INT 46
37264: PUSH
37265: LD_INT 45
37267: PUSH
37268: LD_INT 47
37270: PUSH
37271: LD_INT 49
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: LIST
37286: PUSH
37287: LD_VAR 0 12
37291: ARRAY
37292: ST_TO_ADDR
// for i in list do
37293: LD_ADDR_VAR 0 8
37297: PUSH
37298: LD_VAR 0 5
37302: PUSH
37303: FOR_IN
37304: IFFALSE 37337
// if not i in fac_list then
37306: LD_VAR 0 8
37310: PUSH
37311: LD_VAR 0 17
37315: IN
37316: NOT
37317: IFFALSE 37335
// list := list diff i ;
37319: LD_ADDR_VAR 0 5
37323: PUSH
37324: LD_VAR 0 5
37328: PUSH
37329: LD_VAR 0 8
37333: DIFF
37334: ST_TO_ADDR
37335: GO 37303
37337: POP
37338: POP
// if not list then
37339: LD_VAR 0 5
37343: NOT
37344: IFFALSE 37348
// exit ;
37346: GO 38152
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37348: LD_VAR 0 12
37352: PUSH
37353: LD_INT 3
37355: EQUAL
37356: PUSH
37357: LD_INT 49
37359: PUSH
37360: LD_VAR 0 5
37364: IN
37365: AND
37366: PUSH
37367: LD_INT 31
37369: PPUSH
37370: LD_VAR 0 16
37374: PPUSH
37375: CALL_OW 321
37379: PUSH
37380: LD_INT 2
37382: EQUAL
37383: AND
37384: IFFALSE 37444
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37386: LD_INT 22
37388: PUSH
37389: LD_VAR 0 16
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 35
37400: PUSH
37401: LD_INT 49
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 91
37410: PUSH
37411: LD_VAR 0 1
37415: PUSH
37416: LD_INT 10
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: PPUSH
37429: CALL_OW 69
37433: NOT
37434: IFFALSE 37444
// weapon := ru_time_lapser ;
37436: LD_ADDR_VAR 0 18
37440: PUSH
37441: LD_INT 49
37443: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37444: LD_VAR 0 12
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: LD_INT 2
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: IN
37459: PUSH
37460: LD_INT 11
37462: PUSH
37463: LD_VAR 0 5
37467: IN
37468: PUSH
37469: LD_INT 30
37471: PUSH
37472: LD_VAR 0 5
37476: IN
37477: OR
37478: AND
37479: PUSH
37480: LD_INT 6
37482: PPUSH
37483: LD_VAR 0 16
37487: PPUSH
37488: CALL_OW 321
37492: PUSH
37493: LD_INT 2
37495: EQUAL
37496: AND
37497: IFFALSE 37662
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37499: LD_INT 22
37501: PUSH
37502: LD_VAR 0 16
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: LD_INT 35
37516: PUSH
37517: LD_INT 11
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 35
37526: PUSH
37527: LD_INT 30
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 91
37541: PUSH
37542: LD_VAR 0 1
37546: PUSH
37547: LD_INT 18
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: PPUSH
37560: CALL_OW 69
37564: NOT
37565: PUSH
37566: LD_INT 22
37568: PUSH
37569: LD_VAR 0 16
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: LD_INT 30
37583: PUSH
37584: LD_INT 32
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 30
37593: PUSH
37594: LD_INT 33
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 91
37608: PUSH
37609: LD_VAR 0 1
37613: PUSH
37614: LD_INT 12
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: LIST
37626: PUSH
37627: EMPTY
37628: LIST
37629: PPUSH
37630: CALL_OW 69
37634: PUSH
37635: LD_INT 2
37637: GREATER
37638: AND
37639: IFFALSE 37662
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37641: LD_ADDR_VAR 0 18
37645: PUSH
37646: LD_INT 11
37648: PUSH
37649: LD_INT 30
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_VAR 0 12
37660: ARRAY
37661: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37662: LD_VAR 0 18
37666: NOT
37667: PUSH
37668: LD_INT 40
37670: PPUSH
37671: LD_VAR 0 16
37675: PPUSH
37676: CALL_OW 321
37680: PUSH
37681: LD_INT 2
37683: EQUAL
37684: AND
37685: PUSH
37686: LD_INT 7
37688: PUSH
37689: LD_VAR 0 5
37693: IN
37694: PUSH
37695: LD_INT 28
37697: PUSH
37698: LD_VAR 0 5
37702: IN
37703: OR
37704: PUSH
37705: LD_INT 45
37707: PUSH
37708: LD_VAR 0 5
37712: IN
37713: OR
37714: AND
37715: IFFALSE 37969
// begin hex := GetHexInfo ( x , y ) ;
37717: LD_ADDR_VAR 0 4
37721: PUSH
37722: LD_VAR 0 10
37726: PPUSH
37727: LD_VAR 0 11
37731: PPUSH
37732: CALL_OW 546
37736: ST_TO_ADDR
// if hex [ 1 ] then
37737: LD_VAR 0 4
37741: PUSH
37742: LD_INT 1
37744: ARRAY
37745: IFFALSE 37749
// exit ;
37747: GO 38152
// height := hex [ 2 ] ;
37749: LD_ADDR_VAR 0 15
37753: PUSH
37754: LD_VAR 0 4
37758: PUSH
37759: LD_INT 2
37761: ARRAY
37762: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37763: LD_ADDR_VAR 0 14
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: LD_INT 2
37773: PUSH
37774: LD_INT 3
37776: PUSH
37777: LD_INT 5
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: ST_TO_ADDR
// for i in tmp do
37786: LD_ADDR_VAR 0 8
37790: PUSH
37791: LD_VAR 0 14
37795: PUSH
37796: FOR_IN
37797: IFFALSE 37967
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37799: LD_ADDR_VAR 0 9
37803: PUSH
37804: LD_VAR 0 10
37808: PPUSH
37809: LD_VAR 0 8
37813: PPUSH
37814: LD_INT 5
37816: PPUSH
37817: CALL_OW 272
37821: PUSH
37822: LD_VAR 0 11
37826: PPUSH
37827: LD_VAR 0 8
37831: PPUSH
37832: LD_INT 5
37834: PPUSH
37835: CALL_OW 273
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37844: LD_VAR 0 9
37848: PUSH
37849: LD_INT 1
37851: ARRAY
37852: PPUSH
37853: LD_VAR 0 9
37857: PUSH
37858: LD_INT 2
37860: ARRAY
37861: PPUSH
37862: CALL_OW 488
37866: IFFALSE 37965
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37868: LD_ADDR_VAR 0 4
37872: PUSH
37873: LD_VAR 0 9
37877: PUSH
37878: LD_INT 1
37880: ARRAY
37881: PPUSH
37882: LD_VAR 0 9
37886: PUSH
37887: LD_INT 2
37889: ARRAY
37890: PPUSH
37891: CALL_OW 546
37895: ST_TO_ADDR
// if hex [ 1 ] then
37896: LD_VAR 0 4
37900: PUSH
37901: LD_INT 1
37903: ARRAY
37904: IFFALSE 37908
// continue ;
37906: GO 37796
// h := hex [ 2 ] ;
37908: LD_ADDR_VAR 0 13
37912: PUSH
37913: LD_VAR 0 4
37917: PUSH
37918: LD_INT 2
37920: ARRAY
37921: ST_TO_ADDR
// if h + 7 < height then
37922: LD_VAR 0 13
37926: PUSH
37927: LD_INT 7
37929: PLUS
37930: PUSH
37931: LD_VAR 0 15
37935: LESS
37936: IFFALSE 37965
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37938: LD_ADDR_VAR 0 18
37942: PUSH
37943: LD_INT 7
37945: PUSH
37946: LD_INT 28
37948: PUSH
37949: LD_INT 45
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: PUSH
37957: LD_VAR 0 12
37961: ARRAY
37962: ST_TO_ADDR
// break ;
37963: GO 37967
// end ; end ; end ;
37965: GO 37796
37967: POP
37968: POP
// end ; if not weapon then
37969: LD_VAR 0 18
37973: NOT
37974: IFFALSE 38034
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37976: LD_ADDR_VAR 0 5
37980: PUSH
37981: LD_VAR 0 5
37985: PUSH
37986: LD_INT 11
37988: PUSH
37989: LD_INT 30
37991: PUSH
37992: LD_INT 49
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: LIST
37999: DIFF
38000: ST_TO_ADDR
// if not list then
38001: LD_VAR 0 5
38005: NOT
38006: IFFALSE 38010
// exit ;
38008: GO 38152
// weapon := list [ rand ( 1 , list ) ] ;
38010: LD_ADDR_VAR 0 18
38014: PUSH
38015: LD_VAR 0 5
38019: PUSH
38020: LD_INT 1
38022: PPUSH
38023: LD_VAR 0 5
38027: PPUSH
38028: CALL_OW 12
38032: ARRAY
38033: ST_TO_ADDR
// end ; if weapon then
38034: LD_VAR 0 18
38038: IFFALSE 38152
// begin tmp := CostOfWeapon ( weapon ) ;
38040: LD_ADDR_VAR 0 14
38044: PUSH
38045: LD_VAR 0 18
38049: PPUSH
38050: CALL_OW 451
38054: ST_TO_ADDR
// j := GetBase ( tower ) ;
38055: LD_ADDR_VAR 0 9
38059: PUSH
38060: LD_VAR 0 1
38064: PPUSH
38065: CALL_OW 274
38069: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38070: LD_VAR 0 9
38074: PPUSH
38075: LD_INT 1
38077: PPUSH
38078: CALL_OW 275
38082: PUSH
38083: LD_VAR 0 14
38087: PUSH
38088: LD_INT 1
38090: ARRAY
38091: GREATEREQUAL
38092: PUSH
38093: LD_VAR 0 9
38097: PPUSH
38098: LD_INT 2
38100: PPUSH
38101: CALL_OW 275
38105: PUSH
38106: LD_VAR 0 14
38110: PUSH
38111: LD_INT 2
38113: ARRAY
38114: GREATEREQUAL
38115: AND
38116: PUSH
38117: LD_VAR 0 9
38121: PPUSH
38122: LD_INT 3
38124: PPUSH
38125: CALL_OW 275
38129: PUSH
38130: LD_VAR 0 14
38134: PUSH
38135: LD_INT 3
38137: ARRAY
38138: GREATEREQUAL
38139: AND
38140: IFFALSE 38152
// result := weapon ;
38142: LD_ADDR_VAR 0 3
38146: PUSH
38147: LD_VAR 0 18
38151: ST_TO_ADDR
// end ; end ;
38152: LD_VAR 0 3
38156: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38157: LD_INT 0
38159: PPUSH
38160: PPUSH
// result := true ;
38161: LD_ADDR_VAR 0 3
38165: PUSH
38166: LD_INT 1
38168: ST_TO_ADDR
// if array1 = array2 then
38169: LD_VAR 0 1
38173: PUSH
38174: LD_VAR 0 2
38178: EQUAL
38179: IFFALSE 38239
// begin for i = 1 to array1 do
38181: LD_ADDR_VAR 0 4
38185: PUSH
38186: DOUBLE
38187: LD_INT 1
38189: DEC
38190: ST_TO_ADDR
38191: LD_VAR 0 1
38195: PUSH
38196: FOR_TO
38197: IFFALSE 38235
// if array1 [ i ] <> array2 [ i ] then
38199: LD_VAR 0 1
38203: PUSH
38204: LD_VAR 0 4
38208: ARRAY
38209: PUSH
38210: LD_VAR 0 2
38214: PUSH
38215: LD_VAR 0 4
38219: ARRAY
38220: NONEQUAL
38221: IFFALSE 38233
// begin result := false ;
38223: LD_ADDR_VAR 0 3
38227: PUSH
38228: LD_INT 0
38230: ST_TO_ADDR
// break ;
38231: GO 38235
// end ;
38233: GO 38196
38235: POP
38236: POP
// end else
38237: GO 38247
// result := false ;
38239: LD_ADDR_VAR 0 3
38243: PUSH
38244: LD_INT 0
38246: ST_TO_ADDR
// end ;
38247: LD_VAR 0 3
38251: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38252: LD_INT 0
38254: PPUSH
38255: PPUSH
// if not array1 or not array2 then
38256: LD_VAR 0 1
38260: NOT
38261: PUSH
38262: LD_VAR 0 2
38266: NOT
38267: OR
38268: IFFALSE 38272
// exit ;
38270: GO 38336
// result := true ;
38272: LD_ADDR_VAR 0 3
38276: PUSH
38277: LD_INT 1
38279: ST_TO_ADDR
// for i = 1 to array1 do
38280: LD_ADDR_VAR 0 4
38284: PUSH
38285: DOUBLE
38286: LD_INT 1
38288: DEC
38289: ST_TO_ADDR
38290: LD_VAR 0 1
38294: PUSH
38295: FOR_TO
38296: IFFALSE 38334
// if array1 [ i ] <> array2 [ i ] then
38298: LD_VAR 0 1
38302: PUSH
38303: LD_VAR 0 4
38307: ARRAY
38308: PUSH
38309: LD_VAR 0 2
38313: PUSH
38314: LD_VAR 0 4
38318: ARRAY
38319: NONEQUAL
38320: IFFALSE 38332
// begin result := false ;
38322: LD_ADDR_VAR 0 3
38326: PUSH
38327: LD_INT 0
38329: ST_TO_ADDR
// break ;
38330: GO 38334
// end ;
38332: GO 38295
38334: POP
38335: POP
// end ;
38336: LD_VAR 0 3
38340: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38341: LD_INT 0
38343: PPUSH
38344: PPUSH
38345: PPUSH
// pom := GetBase ( fac ) ;
38346: LD_ADDR_VAR 0 5
38350: PUSH
38351: LD_VAR 0 1
38355: PPUSH
38356: CALL_OW 274
38360: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38361: LD_ADDR_VAR 0 4
38365: PUSH
38366: LD_VAR 0 2
38370: PUSH
38371: LD_INT 1
38373: ARRAY
38374: PPUSH
38375: LD_VAR 0 2
38379: PUSH
38380: LD_INT 2
38382: ARRAY
38383: PPUSH
38384: LD_VAR 0 2
38388: PUSH
38389: LD_INT 3
38391: ARRAY
38392: PPUSH
38393: LD_VAR 0 2
38397: PUSH
38398: LD_INT 4
38400: ARRAY
38401: PPUSH
38402: CALL_OW 449
38406: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38407: LD_ADDR_VAR 0 3
38411: PUSH
38412: LD_VAR 0 5
38416: PPUSH
38417: LD_INT 1
38419: PPUSH
38420: CALL_OW 275
38424: PUSH
38425: LD_VAR 0 4
38429: PUSH
38430: LD_INT 1
38432: ARRAY
38433: GREATEREQUAL
38434: PUSH
38435: LD_VAR 0 5
38439: PPUSH
38440: LD_INT 2
38442: PPUSH
38443: CALL_OW 275
38447: PUSH
38448: LD_VAR 0 4
38452: PUSH
38453: LD_INT 2
38455: ARRAY
38456: GREATEREQUAL
38457: AND
38458: PUSH
38459: LD_VAR 0 5
38463: PPUSH
38464: LD_INT 3
38466: PPUSH
38467: CALL_OW 275
38471: PUSH
38472: LD_VAR 0 4
38476: PUSH
38477: LD_INT 3
38479: ARRAY
38480: GREATEREQUAL
38481: AND
38482: ST_TO_ADDR
// end ;
38483: LD_VAR 0 3
38487: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38488: LD_INT 0
38490: PPUSH
38491: PPUSH
38492: PPUSH
38493: PPUSH
// pom := GetBase ( building ) ;
38494: LD_ADDR_VAR 0 3
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: CALL_OW 274
38508: ST_TO_ADDR
// if not pom then
38509: LD_VAR 0 3
38513: NOT
38514: IFFALSE 38518
// exit ;
38516: GO 38688
// btype := GetBType ( building ) ;
38518: LD_ADDR_VAR 0 5
38522: PUSH
38523: LD_VAR 0 1
38527: PPUSH
38528: CALL_OW 266
38532: ST_TO_ADDR
// if btype = b_armoury then
38533: LD_VAR 0 5
38537: PUSH
38538: LD_INT 4
38540: EQUAL
38541: IFFALSE 38551
// btype := b_barracks ;
38543: LD_ADDR_VAR 0 5
38547: PUSH
38548: LD_INT 5
38550: ST_TO_ADDR
// if btype = b_depot then
38551: LD_VAR 0 5
38555: PUSH
38556: LD_INT 0
38558: EQUAL
38559: IFFALSE 38569
// btype := b_warehouse ;
38561: LD_ADDR_VAR 0 5
38565: PUSH
38566: LD_INT 1
38568: ST_TO_ADDR
// if btype = b_workshop then
38569: LD_VAR 0 5
38573: PUSH
38574: LD_INT 2
38576: EQUAL
38577: IFFALSE 38587
// btype := b_factory ;
38579: LD_ADDR_VAR 0 5
38583: PUSH
38584: LD_INT 3
38586: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38587: LD_ADDR_VAR 0 4
38591: PUSH
38592: LD_VAR 0 5
38596: PPUSH
38597: LD_VAR 0 1
38601: PPUSH
38602: CALL_OW 248
38606: PPUSH
38607: CALL_OW 450
38611: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38612: LD_ADDR_VAR 0 2
38616: PUSH
38617: LD_VAR 0 3
38621: PPUSH
38622: LD_INT 1
38624: PPUSH
38625: CALL_OW 275
38629: PUSH
38630: LD_VAR 0 4
38634: PUSH
38635: LD_INT 1
38637: ARRAY
38638: GREATEREQUAL
38639: PUSH
38640: LD_VAR 0 3
38644: PPUSH
38645: LD_INT 2
38647: PPUSH
38648: CALL_OW 275
38652: PUSH
38653: LD_VAR 0 4
38657: PUSH
38658: LD_INT 2
38660: ARRAY
38661: GREATEREQUAL
38662: AND
38663: PUSH
38664: LD_VAR 0 3
38668: PPUSH
38669: LD_INT 3
38671: PPUSH
38672: CALL_OW 275
38676: PUSH
38677: LD_VAR 0 4
38681: PUSH
38682: LD_INT 3
38684: ARRAY
38685: GREATEREQUAL
38686: AND
38687: ST_TO_ADDR
// end ;
38688: LD_VAR 0 2
38692: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38693: LD_INT 0
38695: PPUSH
38696: PPUSH
38697: PPUSH
// pom := GetBase ( building ) ;
38698: LD_ADDR_VAR 0 4
38702: PUSH
38703: LD_VAR 0 1
38707: PPUSH
38708: CALL_OW 274
38712: ST_TO_ADDR
// if not pom then
38713: LD_VAR 0 4
38717: NOT
38718: IFFALSE 38722
// exit ;
38720: GO 38823
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38722: LD_ADDR_VAR 0 5
38726: PUSH
38727: LD_VAR 0 2
38731: PPUSH
38732: LD_VAR 0 1
38736: PPUSH
38737: CALL_OW 248
38741: PPUSH
38742: CALL_OW 450
38746: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38747: LD_ADDR_VAR 0 3
38751: PUSH
38752: LD_VAR 0 4
38756: PPUSH
38757: LD_INT 1
38759: PPUSH
38760: CALL_OW 275
38764: PUSH
38765: LD_VAR 0 5
38769: PUSH
38770: LD_INT 1
38772: ARRAY
38773: GREATEREQUAL
38774: PUSH
38775: LD_VAR 0 4
38779: PPUSH
38780: LD_INT 2
38782: PPUSH
38783: CALL_OW 275
38787: PUSH
38788: LD_VAR 0 5
38792: PUSH
38793: LD_INT 2
38795: ARRAY
38796: GREATEREQUAL
38797: AND
38798: PUSH
38799: LD_VAR 0 4
38803: PPUSH
38804: LD_INT 3
38806: PPUSH
38807: CALL_OW 275
38811: PUSH
38812: LD_VAR 0 5
38816: PUSH
38817: LD_INT 3
38819: ARRAY
38820: GREATEREQUAL
38821: AND
38822: ST_TO_ADDR
// end ;
38823: LD_VAR 0 3
38827: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38828: LD_INT 0
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
38838: PPUSH
38839: PPUSH
38840: PPUSH
// result := false ;
38841: LD_ADDR_VAR 0 8
38845: PUSH
38846: LD_INT 0
38848: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38849: LD_VAR 0 5
38853: NOT
38854: PUSH
38855: LD_VAR 0 1
38859: NOT
38860: OR
38861: PUSH
38862: LD_VAR 0 2
38866: NOT
38867: OR
38868: PUSH
38869: LD_VAR 0 3
38873: NOT
38874: OR
38875: IFFALSE 38879
// exit ;
38877: GO 39693
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38879: LD_ADDR_VAR 0 14
38883: PUSH
38884: LD_VAR 0 1
38888: PPUSH
38889: LD_VAR 0 2
38893: PPUSH
38894: LD_VAR 0 3
38898: PPUSH
38899: LD_VAR 0 4
38903: PPUSH
38904: LD_VAR 0 5
38908: PUSH
38909: LD_INT 1
38911: ARRAY
38912: PPUSH
38913: CALL_OW 248
38917: PPUSH
38918: LD_INT 0
38920: PPUSH
38921: CALL 40530 0 6
38925: ST_TO_ADDR
// if not hexes then
38926: LD_VAR 0 14
38930: NOT
38931: IFFALSE 38935
// exit ;
38933: GO 39693
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38935: LD_ADDR_VAR 0 17
38939: PUSH
38940: LD_VAR 0 5
38944: PPUSH
38945: LD_INT 22
38947: PUSH
38948: LD_VAR 0 13
38952: PPUSH
38953: CALL_OW 255
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: LD_INT 30
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 30
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PPUSH
38994: CALL_OW 72
38998: ST_TO_ADDR
// for i = 1 to hexes do
38999: LD_ADDR_VAR 0 9
39003: PUSH
39004: DOUBLE
39005: LD_INT 1
39007: DEC
39008: ST_TO_ADDR
39009: LD_VAR 0 14
39013: PUSH
39014: FOR_TO
39015: IFFALSE 39691
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39017: LD_ADDR_VAR 0 13
39021: PUSH
39022: LD_VAR 0 14
39026: PUSH
39027: LD_VAR 0 9
39031: ARRAY
39032: PUSH
39033: LD_INT 1
39035: ARRAY
39036: PPUSH
39037: LD_VAR 0 14
39041: PUSH
39042: LD_VAR 0 9
39046: ARRAY
39047: PUSH
39048: LD_INT 2
39050: ARRAY
39051: PPUSH
39052: CALL_OW 428
39056: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39057: LD_VAR 0 14
39061: PUSH
39062: LD_VAR 0 9
39066: ARRAY
39067: PUSH
39068: LD_INT 1
39070: ARRAY
39071: PPUSH
39072: LD_VAR 0 14
39076: PUSH
39077: LD_VAR 0 9
39081: ARRAY
39082: PUSH
39083: LD_INT 2
39085: ARRAY
39086: PPUSH
39087: CALL_OW 351
39091: PUSH
39092: LD_VAR 0 14
39096: PUSH
39097: LD_VAR 0 9
39101: ARRAY
39102: PUSH
39103: LD_INT 1
39105: ARRAY
39106: PPUSH
39107: LD_VAR 0 14
39111: PUSH
39112: LD_VAR 0 9
39116: ARRAY
39117: PUSH
39118: LD_INT 2
39120: ARRAY
39121: PPUSH
39122: CALL_OW 488
39126: NOT
39127: OR
39128: PUSH
39129: LD_VAR 0 13
39133: PPUSH
39134: CALL_OW 247
39138: PUSH
39139: LD_INT 3
39141: EQUAL
39142: OR
39143: IFFALSE 39149
// exit ;
39145: POP
39146: POP
39147: GO 39693
// if not tmp then
39149: LD_VAR 0 13
39153: NOT
39154: IFFALSE 39158
// continue ;
39156: GO 39014
// result := true ;
39158: LD_ADDR_VAR 0 8
39162: PUSH
39163: LD_INT 1
39165: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39166: LD_VAR 0 6
39170: PUSH
39171: LD_VAR 0 13
39175: PPUSH
39176: CALL_OW 247
39180: PUSH
39181: LD_INT 2
39183: EQUAL
39184: AND
39185: PUSH
39186: LD_VAR 0 13
39190: PPUSH
39191: CALL_OW 263
39195: PUSH
39196: LD_INT 1
39198: EQUAL
39199: AND
39200: IFFALSE 39364
// begin if IsDrivenBy ( tmp ) then
39202: LD_VAR 0 13
39206: PPUSH
39207: CALL_OW 311
39211: IFFALSE 39215
// continue ;
39213: GO 39014
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39215: LD_VAR 0 6
39219: PPUSH
39220: LD_INT 3
39222: PUSH
39223: LD_INT 60
39225: PUSH
39226: EMPTY
39227: LIST
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 3
39235: PUSH
39236: LD_INT 55
39238: PUSH
39239: EMPTY
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PPUSH
39250: CALL_OW 72
39254: IFFALSE 39362
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39256: LD_ADDR_VAR 0 18
39260: PUSH
39261: LD_VAR 0 6
39265: PPUSH
39266: LD_INT 3
39268: PUSH
39269: LD_INT 60
39271: PUSH
39272: EMPTY
39273: LIST
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 3
39281: PUSH
39282: LD_INT 55
39284: PUSH
39285: EMPTY
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PPUSH
39296: CALL_OW 72
39300: PUSH
39301: LD_INT 1
39303: ARRAY
39304: ST_TO_ADDR
// if IsInUnit ( driver ) then
39305: LD_VAR 0 18
39309: PPUSH
39310: CALL_OW 310
39314: IFFALSE 39325
// ComExit ( driver ) ;
39316: LD_VAR 0 18
39320: PPUSH
39321: CALL 63714 0 1
// AddComEnterUnit ( driver , tmp ) ;
39325: LD_VAR 0 18
39329: PPUSH
39330: LD_VAR 0 13
39334: PPUSH
39335: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39339: LD_VAR 0 18
39343: PPUSH
39344: LD_VAR 0 7
39348: PPUSH
39349: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39353: LD_VAR 0 18
39357: PPUSH
39358: CALL_OW 181
// end ; continue ;
39362: GO 39014
// end ; if not cleaners or not tmp in cleaners then
39364: LD_VAR 0 6
39368: NOT
39369: PUSH
39370: LD_VAR 0 13
39374: PUSH
39375: LD_VAR 0 6
39379: IN
39380: NOT
39381: OR
39382: IFFALSE 39689
// begin if dep then
39384: LD_VAR 0 17
39388: IFFALSE 39524
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39390: LD_ADDR_VAR 0 16
39394: PUSH
39395: LD_VAR 0 17
39399: PUSH
39400: LD_INT 1
39402: ARRAY
39403: PPUSH
39404: CALL_OW 250
39408: PPUSH
39409: LD_VAR 0 17
39413: PUSH
39414: LD_INT 1
39416: ARRAY
39417: PPUSH
39418: CALL_OW 254
39422: PPUSH
39423: LD_INT 5
39425: PPUSH
39426: CALL_OW 272
39430: PUSH
39431: LD_VAR 0 17
39435: PUSH
39436: LD_INT 1
39438: ARRAY
39439: PPUSH
39440: CALL_OW 251
39444: PPUSH
39445: LD_VAR 0 17
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: PPUSH
39454: CALL_OW 254
39458: PPUSH
39459: LD_INT 5
39461: PPUSH
39462: CALL_OW 273
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39471: LD_VAR 0 16
39475: PUSH
39476: LD_INT 1
39478: ARRAY
39479: PPUSH
39480: LD_VAR 0 16
39484: PUSH
39485: LD_INT 2
39487: ARRAY
39488: PPUSH
39489: CALL_OW 488
39493: IFFALSE 39524
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39495: LD_VAR 0 13
39499: PPUSH
39500: LD_VAR 0 16
39504: PUSH
39505: LD_INT 1
39507: ARRAY
39508: PPUSH
39509: LD_VAR 0 16
39513: PUSH
39514: LD_INT 2
39516: ARRAY
39517: PPUSH
39518: CALL_OW 111
// continue ;
39522: GO 39014
// end ; end ; r := GetDir ( tmp ) ;
39524: LD_ADDR_VAR 0 15
39528: PUSH
39529: LD_VAR 0 13
39533: PPUSH
39534: CALL_OW 254
39538: ST_TO_ADDR
// if r = 5 then
39539: LD_VAR 0 15
39543: PUSH
39544: LD_INT 5
39546: EQUAL
39547: IFFALSE 39557
// r := 0 ;
39549: LD_ADDR_VAR 0 15
39553: PUSH
39554: LD_INT 0
39556: ST_TO_ADDR
// for j = r to 5 do
39557: LD_ADDR_VAR 0 10
39561: PUSH
39562: DOUBLE
39563: LD_VAR 0 15
39567: DEC
39568: ST_TO_ADDR
39569: LD_INT 5
39571: PUSH
39572: FOR_TO
39573: IFFALSE 39687
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39575: LD_ADDR_VAR 0 11
39579: PUSH
39580: LD_VAR 0 13
39584: PPUSH
39585: CALL_OW 250
39589: PPUSH
39590: LD_VAR 0 10
39594: PPUSH
39595: LD_INT 2
39597: PPUSH
39598: CALL_OW 272
39602: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39603: LD_ADDR_VAR 0 12
39607: PUSH
39608: LD_VAR 0 13
39612: PPUSH
39613: CALL_OW 251
39617: PPUSH
39618: LD_VAR 0 10
39622: PPUSH
39623: LD_INT 2
39625: PPUSH
39626: CALL_OW 273
39630: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39631: LD_VAR 0 11
39635: PPUSH
39636: LD_VAR 0 12
39640: PPUSH
39641: CALL_OW 488
39645: PUSH
39646: LD_VAR 0 11
39650: PPUSH
39651: LD_VAR 0 12
39655: PPUSH
39656: CALL_OW 428
39660: NOT
39661: AND
39662: IFFALSE 39685
// begin ComMoveXY ( tmp , _x , _y ) ;
39664: LD_VAR 0 13
39668: PPUSH
39669: LD_VAR 0 11
39673: PPUSH
39674: LD_VAR 0 12
39678: PPUSH
39679: CALL_OW 111
// break ;
39683: GO 39687
// end ; end ;
39685: GO 39572
39687: POP
39688: POP
// end ; end ;
39689: GO 39014
39691: POP
39692: POP
// end ;
39693: LD_VAR 0 8
39697: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39698: LD_INT 0
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
// result := false ;
39710: LD_ADDR_VAR 0 6
39714: PUSH
39715: LD_INT 0
39717: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39718: LD_VAR 0 1
39722: NOT
39723: PUSH
39724: LD_VAR 0 1
39728: PPUSH
39729: CALL_OW 266
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: IN
39744: NOT
39745: OR
39746: PUSH
39747: LD_VAR 0 2
39751: NOT
39752: OR
39753: PUSH
39754: LD_VAR 0 5
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: LD_INT 4
39773: PUSH
39774: LD_INT 5
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: IN
39785: NOT
39786: OR
39787: PUSH
39788: LD_VAR 0 3
39792: PPUSH
39793: LD_VAR 0 4
39797: PPUSH
39798: CALL_OW 488
39802: NOT
39803: OR
39804: IFFALSE 39808
// exit ;
39806: GO 40525
// pom := GetBase ( depot ) ;
39808: LD_ADDR_VAR 0 10
39812: PUSH
39813: LD_VAR 0 1
39817: PPUSH
39818: CALL_OW 274
39822: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39823: LD_ADDR_VAR 0 11
39827: PUSH
39828: LD_VAR 0 2
39832: PPUSH
39833: LD_VAR 0 1
39837: PPUSH
39838: CALL_OW 248
39842: PPUSH
39843: CALL_OW 450
39847: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39848: LD_VAR 0 10
39852: PPUSH
39853: LD_INT 1
39855: PPUSH
39856: CALL_OW 275
39860: PUSH
39861: LD_VAR 0 11
39865: PUSH
39866: LD_INT 1
39868: ARRAY
39869: GREATEREQUAL
39870: PUSH
39871: LD_VAR 0 10
39875: PPUSH
39876: LD_INT 2
39878: PPUSH
39879: CALL_OW 275
39883: PUSH
39884: LD_VAR 0 11
39888: PUSH
39889: LD_INT 2
39891: ARRAY
39892: GREATEREQUAL
39893: AND
39894: PUSH
39895: LD_VAR 0 10
39899: PPUSH
39900: LD_INT 3
39902: PPUSH
39903: CALL_OW 275
39907: PUSH
39908: LD_VAR 0 11
39912: PUSH
39913: LD_INT 3
39915: ARRAY
39916: GREATEREQUAL
39917: AND
39918: NOT
39919: IFFALSE 39923
// exit ;
39921: GO 40525
// if GetBType ( depot ) = b_depot then
39923: LD_VAR 0 1
39927: PPUSH
39928: CALL_OW 266
39932: PUSH
39933: LD_INT 0
39935: EQUAL
39936: IFFALSE 39948
// dist := 28 else
39938: LD_ADDR_VAR 0 14
39942: PUSH
39943: LD_INT 28
39945: ST_TO_ADDR
39946: GO 39956
// dist := 36 ;
39948: LD_ADDR_VAR 0 14
39952: PUSH
39953: LD_INT 36
39955: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39956: LD_VAR 0 1
39960: PPUSH
39961: LD_VAR 0 3
39965: PPUSH
39966: LD_VAR 0 4
39970: PPUSH
39971: CALL_OW 297
39975: PUSH
39976: LD_VAR 0 14
39980: GREATER
39981: IFFALSE 39985
// exit ;
39983: GO 40525
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39985: LD_ADDR_VAR 0 12
39989: PUSH
39990: LD_VAR 0 2
39994: PPUSH
39995: LD_VAR 0 3
39999: PPUSH
40000: LD_VAR 0 4
40004: PPUSH
40005: LD_VAR 0 5
40009: PPUSH
40010: LD_VAR 0 1
40014: PPUSH
40015: CALL_OW 248
40019: PPUSH
40020: LD_INT 0
40022: PPUSH
40023: CALL 40530 0 6
40027: ST_TO_ADDR
// if not hexes then
40028: LD_VAR 0 12
40032: NOT
40033: IFFALSE 40037
// exit ;
40035: GO 40525
// hex := GetHexInfo ( x , y ) ;
40037: LD_ADDR_VAR 0 15
40041: PUSH
40042: LD_VAR 0 3
40046: PPUSH
40047: LD_VAR 0 4
40051: PPUSH
40052: CALL_OW 546
40056: ST_TO_ADDR
// if hex [ 1 ] then
40057: LD_VAR 0 15
40061: PUSH
40062: LD_INT 1
40064: ARRAY
40065: IFFALSE 40069
// exit ;
40067: GO 40525
// height := hex [ 2 ] ;
40069: LD_ADDR_VAR 0 13
40073: PUSH
40074: LD_VAR 0 15
40078: PUSH
40079: LD_INT 2
40081: ARRAY
40082: ST_TO_ADDR
// for i = 1 to hexes do
40083: LD_ADDR_VAR 0 7
40087: PUSH
40088: DOUBLE
40089: LD_INT 1
40091: DEC
40092: ST_TO_ADDR
40093: LD_VAR 0 12
40097: PUSH
40098: FOR_TO
40099: IFFALSE 40429
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40101: LD_VAR 0 12
40105: PUSH
40106: LD_VAR 0 7
40110: ARRAY
40111: PUSH
40112: LD_INT 1
40114: ARRAY
40115: PPUSH
40116: LD_VAR 0 12
40120: PUSH
40121: LD_VAR 0 7
40125: ARRAY
40126: PUSH
40127: LD_INT 2
40129: ARRAY
40130: PPUSH
40131: CALL_OW 488
40135: NOT
40136: PUSH
40137: LD_VAR 0 12
40141: PUSH
40142: LD_VAR 0 7
40146: ARRAY
40147: PUSH
40148: LD_INT 1
40150: ARRAY
40151: PPUSH
40152: LD_VAR 0 12
40156: PUSH
40157: LD_VAR 0 7
40161: ARRAY
40162: PUSH
40163: LD_INT 2
40165: ARRAY
40166: PPUSH
40167: CALL_OW 428
40171: PUSH
40172: LD_INT 0
40174: GREATER
40175: OR
40176: PUSH
40177: LD_VAR 0 12
40181: PUSH
40182: LD_VAR 0 7
40186: ARRAY
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: PPUSH
40192: LD_VAR 0 12
40196: PUSH
40197: LD_VAR 0 7
40201: ARRAY
40202: PUSH
40203: LD_INT 2
40205: ARRAY
40206: PPUSH
40207: CALL_OW 351
40211: OR
40212: IFFALSE 40218
// exit ;
40214: POP
40215: POP
40216: GO 40525
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40218: LD_ADDR_VAR 0 8
40222: PUSH
40223: LD_VAR 0 12
40227: PUSH
40228: LD_VAR 0 7
40232: ARRAY
40233: PUSH
40234: LD_INT 1
40236: ARRAY
40237: PPUSH
40238: LD_VAR 0 12
40242: PUSH
40243: LD_VAR 0 7
40247: ARRAY
40248: PUSH
40249: LD_INT 2
40251: ARRAY
40252: PPUSH
40253: CALL_OW 546
40257: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40258: LD_VAR 0 8
40262: PUSH
40263: LD_INT 1
40265: ARRAY
40266: PUSH
40267: LD_VAR 0 8
40271: PUSH
40272: LD_INT 2
40274: ARRAY
40275: PUSH
40276: LD_VAR 0 13
40280: PUSH
40281: LD_INT 2
40283: PLUS
40284: GREATER
40285: OR
40286: PUSH
40287: LD_VAR 0 8
40291: PUSH
40292: LD_INT 2
40294: ARRAY
40295: PUSH
40296: LD_VAR 0 13
40300: PUSH
40301: LD_INT 2
40303: MINUS
40304: LESS
40305: OR
40306: PUSH
40307: LD_VAR 0 8
40311: PUSH
40312: LD_INT 3
40314: ARRAY
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 8
40321: PUSH
40322: LD_INT 9
40324: PUSH
40325: LD_INT 10
40327: PUSH
40328: LD_INT 11
40330: PUSH
40331: LD_INT 12
40333: PUSH
40334: LD_INT 13
40336: PUSH
40337: LD_INT 16
40339: PUSH
40340: LD_INT 17
40342: PUSH
40343: LD_INT 18
40345: PUSH
40346: LD_INT 19
40348: PUSH
40349: LD_INT 20
40351: PUSH
40352: LD_INT 21
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: IN
40370: NOT
40371: OR
40372: PUSH
40373: LD_VAR 0 8
40377: PUSH
40378: LD_INT 5
40380: ARRAY
40381: NOT
40382: OR
40383: PUSH
40384: LD_VAR 0 8
40388: PUSH
40389: LD_INT 6
40391: ARRAY
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: LD_INT 7
40401: PUSH
40402: LD_INT 9
40404: PUSH
40405: LD_INT 10
40407: PUSH
40408: LD_INT 11
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: IN
40419: NOT
40420: OR
40421: IFFALSE 40427
// exit ;
40423: POP
40424: POP
40425: GO 40525
// end ;
40427: GO 40098
40429: POP
40430: POP
// side := GetSide ( depot ) ;
40431: LD_ADDR_VAR 0 9
40435: PUSH
40436: LD_VAR 0 1
40440: PPUSH
40441: CALL_OW 255
40445: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40446: LD_VAR 0 9
40450: PPUSH
40451: LD_VAR 0 3
40455: PPUSH
40456: LD_VAR 0 4
40460: PPUSH
40461: LD_INT 20
40463: PPUSH
40464: CALL 32846 0 4
40468: PUSH
40469: LD_INT 4
40471: ARRAY
40472: IFFALSE 40476
// exit ;
40474: GO 40525
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40476: LD_VAR 0 2
40480: PUSH
40481: LD_INT 29
40483: PUSH
40484: LD_INT 30
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: IN
40491: PUSH
40492: LD_VAR 0 3
40496: PPUSH
40497: LD_VAR 0 4
40501: PPUSH
40502: LD_VAR 0 9
40506: PPUSH
40507: CALL_OW 440
40511: NOT
40512: AND
40513: IFFALSE 40517
// exit ;
40515: GO 40525
// result := true ;
40517: LD_ADDR_VAR 0 6
40521: PUSH
40522: LD_INT 1
40524: ST_TO_ADDR
// end ;
40525: LD_VAR 0 6
40529: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40530: LD_INT 0
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
// result = [ ] ;
40590: LD_ADDR_VAR 0 7
40594: PUSH
40595: EMPTY
40596: ST_TO_ADDR
// temp_list = [ ] ;
40597: LD_ADDR_VAR 0 9
40601: PUSH
40602: EMPTY
40603: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40604: LD_VAR 0 4
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: LD_INT 3
40620: PUSH
40621: LD_INT 4
40623: PUSH
40624: LD_INT 5
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: IN
40635: NOT
40636: PUSH
40637: LD_VAR 0 1
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: IN
40652: PUSH
40653: LD_VAR 0 5
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: IN
40672: NOT
40673: AND
40674: OR
40675: IFFALSE 40679
// exit ;
40677: GO 59070
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40679: LD_VAR 0 1
40683: PUSH
40684: LD_INT 6
40686: PUSH
40687: LD_INT 7
40689: PUSH
40690: LD_INT 8
40692: PUSH
40693: LD_INT 13
40695: PUSH
40696: LD_INT 12
40698: PUSH
40699: LD_INT 15
40701: PUSH
40702: LD_INT 11
40704: PUSH
40705: LD_INT 14
40707: PUSH
40708: LD_INT 10
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: IN
40722: IFFALSE 40732
// btype = b_lab ;
40724: LD_ADDR_VAR 0 1
40728: PUSH
40729: LD_INT 6
40731: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40732: LD_VAR 0 6
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: IN
40751: NOT
40752: PUSH
40753: LD_VAR 0 1
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: LD_INT 6
40772: PUSH
40773: LD_INT 36
40775: PUSH
40776: LD_INT 4
40778: PUSH
40779: LD_INT 5
40781: PUSH
40782: LD_INT 31
40784: PUSH
40785: LD_INT 32
40787: PUSH
40788: LD_INT 33
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: IN
40804: NOT
40805: PUSH
40806: LD_VAR 0 6
40810: PUSH
40811: LD_INT 1
40813: EQUAL
40814: AND
40815: OR
40816: PUSH
40817: LD_VAR 0 1
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: IN
40832: NOT
40833: PUSH
40834: LD_VAR 0 6
40838: PUSH
40839: LD_INT 2
40841: EQUAL
40842: AND
40843: OR
40844: IFFALSE 40854
// mode = 0 ;
40846: LD_ADDR_VAR 0 6
40850: PUSH
40851: LD_INT 0
40853: ST_TO_ADDR
// case mode of 0 :
40854: LD_VAR 0 6
40858: PUSH
40859: LD_INT 0
40861: DOUBLE
40862: EQUAL
40863: IFTRUE 40867
40865: GO 52320
40867: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40868: LD_ADDR_VAR 0 11
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 2
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 3
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 3
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41061: LD_ADDR_VAR 0 12
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 3
41218: NEG
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 3
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41257: LD_ADDR_VAR 0 13
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: LD_INT 2
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: LD_INT 3
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: NEG
41429: PUSH
41430: LD_INT 3
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41456: LD_ADDR_VAR 0 14
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41652: LD_ADDR_VAR 0 15
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 2
41786: NEG
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 3
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 3
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41845: LD_ADDR_VAR 0 16
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: LD_INT 2
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 3
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: LD_INT 3
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 3
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42038: LD_ADDR_VAR 0 17
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42268: LD_ADDR_VAR 0 18
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 2
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 2
42467: NEG
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42498: LD_ADDR_VAR 0 19
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: LD_INT 2
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 2
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: NEG
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42728: LD_ADDR_VAR 0 20
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 2
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: NEG
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42958: LD_ADDR_VAR 0 21
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 2
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: NEG
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 2
43157: NEG
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43188: LD_ADDR_VAR 0 22
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 2
43375: NEG
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: NEG
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43418: LD_ADDR_VAR 0 23
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: NEG
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: LD_INT 3
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 3
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43698: LD_ADDR_VAR 0 24
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: NEG
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 3
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 3
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43974: LD_ADDR_VAR 0 25
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 3
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 3
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 3
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44248: LD_ADDR_VAR 0 26
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 3
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44524: LD_ADDR_VAR 0 27
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 3
44757: NEG
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 3
44769: NEG
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44804: LD_ADDR_VAR 0 28
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 2
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 3
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 3
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 3
45051: NEG
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45086: LD_ADDR_VAR 0 29
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: LD_INT 3
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 3
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: NEG
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45365: LD_ADDR_VAR 0 30
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 2
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 3
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 3
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: LD_INT 3
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 3
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45643: LD_ADDR_VAR 0 31
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 3
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45921: LD_ADDR_VAR 0 32
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: NEG
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 3
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 3
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: LD_INT 3
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46199: LD_ADDR_VAR 0 33
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 3
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 3
46443: NEG
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46478: LD_ADDR_VAR 0 34
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 3
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46758: LD_ADDR_VAR 0 35
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46870: LD_ADDR_VAR 0 36
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46982: LD_ADDR_VAR 0 37
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47094: LD_ADDR_VAR 0 38
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47206: LD_ADDR_VAR 0 39
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47318: LD_ADDR_VAR 0 40
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47430: LD_ADDR_VAR 0 41
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: LD_INT 3
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 3
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: NEG
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: NEG
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 3
47739: NEG
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47780: LD_ADDR_VAR 0 42
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: LD_INT 3
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 3
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 3
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 3
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 3
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 3
48077: NEG
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48130: LD_ADDR_VAR 0 43
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 3
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 3
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48478: LD_ADDR_VAR 0 44
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: LD_INT 3
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 3
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: NEG
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: NEG
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: LD_INT 3
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48828: LD_ADDR_VAR 0 45
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 3
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 3
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: LD_INT 3
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 3
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 3
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49178: LD_ADDR_VAR 0 46
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 3
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 3
49474: NEG
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 3
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49526: LD_ADDR_VAR 0 47
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49677: LD_ADDR_VAR 0 48
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49824: LD_ADDR_VAR 0 49
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49968: LD_ADDR_VAR 0 50
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50112: LD_ADDR_VAR 0 51
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50259: LD_ADDR_VAR 0 52
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50410: LD_ADDR_VAR 0 53
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50640: LD_ADDR_VAR 0 54
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50870: LD_ADDR_VAR 0 55
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51100: LD_ADDR_VAR 0 56
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51330: LD_ADDR_VAR 0 57
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51560: LD_ADDR_VAR 0 58
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51790: LD_ADDR_VAR 0 59
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51878: LD_ADDR_VAR 0 60
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51966: LD_ADDR_VAR 0 61
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52054: LD_ADDR_VAR 0 62
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52142: LD_ADDR_VAR 0 63
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52230: LD_ADDR_VAR 0 64
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: ST_TO_ADDR
// end ; 1 :
52318: GO 58215
52320: LD_INT 1
52322: DOUBLE
52323: EQUAL
52324: IFTRUE 52328
52326: GO 54951
52328: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52329: LD_ADDR_VAR 0 11
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 3
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52373: LD_ADDR_VAR 0 12
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 3
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52414: LD_ADDR_VAR 0 13
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: LD_INT 3
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: LIST
52453: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52454: LD_ADDR_VAR 0 14
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 3
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52495: LD_ADDR_VAR 0 15
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 3
52513: NEG
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 3
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52539: LD_ADDR_VAR 0 16
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 3
52558: NEG
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: NEG
52571: PUSH
52572: LD_INT 3
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52585: LD_ADDR_VAR 0 17
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 3
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 3
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52629: LD_ADDR_VAR 0 18
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52670: LD_ADDR_VAR 0 19
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: LIST
52709: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52710: LD_ADDR_VAR 0 20
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52751: LD_ADDR_VAR 0 21
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 3
52769: NEG
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52795: LD_ADDR_VAR 0 22
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 3
52814: NEG
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52841: LD_ADDR_VAR 0 23
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 4
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 3
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52885: LD_ADDR_VAR 0 24
52889: PUSH
52890: LD_INT 3
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 4
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52926: LD_ADDR_VAR 0 25
52930: PUSH
52931: LD_INT 3
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 4
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: LD_INT 4
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52966: LD_ADDR_VAR 0 26
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 3
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 4
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53007: LD_ADDR_VAR 0 27
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 4
53036: NEG
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53051: LD_ADDR_VAR 0 28
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: LD_INT 4
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 4
53082: NEG
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: LIST
53096: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53097: LD_ADDR_VAR 0 29
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 4
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 4
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 3
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 5
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 5
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 4
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 6
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 6
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 5
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53252: LD_ADDR_VAR 0 30
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 4
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 4
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 4
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 5
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 5
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 5
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 6
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 6
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53395: LD_ADDR_VAR 0 31
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: LD_INT 3
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 4
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: LD_INT 4
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 5
53462: PUSH
53463: LD_INT 4
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 5
53472: PUSH
53473: LD_INT 5
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 4
53482: PUSH
53483: LD_INT 5
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 6
53492: PUSH
53493: LD_INT 5
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 6
53502: PUSH
53503: LD_INT 6
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 5
53512: PUSH
53513: LD_INT 6
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53534: LD_ADDR_VAR 0 32
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 3
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 4
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 4
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 5
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 5
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 4
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 6
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 6
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 5
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53677: LD_ADDR_VAR 0 33
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 4
53729: NEG
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 4
53740: NEG
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 4
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 5
53763: NEG
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 5
53774: NEG
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 5
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 6
53797: NEG
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 6
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53832: LD_ADDR_VAR 0 34
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 3
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: LD_INT 4
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 4
53887: NEG
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 4
53899: NEG
53900: PUSH
53901: LD_INT 4
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 4
53911: NEG
53912: PUSH
53913: LD_INT 5
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 5
53923: NEG
53924: PUSH
53925: LD_INT 4
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 5
53935: NEG
53936: PUSH
53937: LD_INT 5
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 5
53947: NEG
53948: PUSH
53949: LD_INT 6
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 6
53959: NEG
53960: PUSH
53961: LD_INT 5
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 6
53971: NEG
53972: PUSH
53973: LD_INT 6
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53995: LD_ADDR_VAR 0 41
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 3
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54039: LD_ADDR_VAR 0 42
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54080: LD_ADDR_VAR 0 43
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54120: LD_ADDR_VAR 0 44
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54161: LD_ADDR_VAR 0 45
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 3
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: LIST
54204: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54205: LD_ADDR_VAR 0 46
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: LIST
54250: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54251: LD_ADDR_VAR 0 47
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 3
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54284: LD_ADDR_VAR 0 48
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54315: LD_ADDR_VAR 0 49
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54344: LD_ADDR_VAR 0 50
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54373: LD_ADDR_VAR 0 51
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54404: LD_ADDR_VAR 0 52
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54437: LD_ADDR_VAR 0 53
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54481: LD_ADDR_VAR 0 54
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 3
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: LIST
54521: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54522: LD_ADDR_VAR 0 55
54526: PUSH
54527: LD_INT 3
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 3
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54562: LD_ADDR_VAR 0 56
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54603: LD_ADDR_VAR 0 57
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: NEG
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 3
54632: NEG
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54647: LD_ADDR_VAR 0 58
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 3
54666: NEG
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54693: LD_ADDR_VAR 0 59
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54737: LD_ADDR_VAR 0 60
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54778: LD_ADDR_VAR 0 61
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54818: LD_ADDR_VAR 0 62
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: LIST
54858: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54859: LD_ADDR_VAR 0 63
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54903: LD_ADDR_VAR 0 64
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: LIST
54948: ST_TO_ADDR
// end ; 2 :
54949: GO 58215
54951: LD_INT 2
54953: DOUBLE
54954: EQUAL
54955: IFTRUE 54959
54957: GO 58214
54959: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54960: LD_ADDR_VAR 0 29
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 4
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 5
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 4
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 5
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 3
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 3
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 4
55080: PUSH
55081: LD_INT 3
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 4
55090: PUSH
55091: LD_INT 4
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: PUSH
55101: LD_INT 4
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 4
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: LD_INT 4
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 4
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 4
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 5
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 5
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 3
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 5
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 3
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 4
55299: NEG
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 4
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 4
55322: NEG
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 4
55345: NEG
55346: PUSH
55347: LD_INT 4
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 4
55357: NEG
55358: PUSH
55359: LD_INT 5
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 3
55369: NEG
55370: PUSH
55371: LD_INT 4
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 3
55381: NEG
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 4
55393: NEG
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 5
55405: NEG
55406: PUSH
55407: LD_INT 4
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 5
55417: NEG
55418: PUSH
55419: LD_INT 5
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: LD_INT 5
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 5
55441: NEG
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55498: LD_ADDR_VAR 0 30
55502: PUSH
55503: LD_INT 4
55505: PUSH
55506: LD_INT 4
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 4
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 5
55525: PUSH
55526: LD_INT 4
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 5
55535: PUSH
55536: LD_INT 5
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 4
55545: PUSH
55546: LD_INT 5
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: LD_INT 4
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: LD_INT 3
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 5
55575: PUSH
55576: LD_INT 3
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: LD_INT 5
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 4
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 4
55688: NEG
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 4
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 4
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 5
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 5
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 5
55767: NEG
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 3
55790: NEG
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: NEG
55803: PUSH
55804: LD_INT 4
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 4
55850: NEG
55851: PUSH
55852: LD_INT 3
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 4
55862: NEG
55863: PUSH
55864: LD_INT 4
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: LD_INT 4
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 4
55886: NEG
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 4
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 5
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 4
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 4
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 5
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: LD_INT 5
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56045: LD_ADDR_VAR 0 31
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 4
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 5
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 5
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 4
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 5
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 4
56201: NEG
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 4
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 4
56224: NEG
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 4
56247: NEG
56248: PUSH
56249: LD_INT 4
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 4
56259: NEG
56260: PUSH
56261: LD_INT 5
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: LD_INT 4
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 3
56283: NEG
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: NEG
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 5
56307: NEG
56308: PUSH
56309: LD_INT 4
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 5
56319: NEG
56320: PUSH
56321: LD_INT 5
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: LD_INT 5
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 5
56343: NEG
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 3
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 4
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 4
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 4
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 4
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 4
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 5
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 5
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 4
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 5
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56595: LD_ADDR_VAR 0 32
56599: PUSH
56600: LD_INT 4
56602: NEG
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 4
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 4
56647: NEG
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 5
56658: NEG
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 5
56669: NEG
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 5
56681: NEG
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 3
56716: NEG
56717: PUSH
56718: LD_INT 4
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 3
56752: NEG
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 4
56764: NEG
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: NEG
56777: PUSH
56778: LD_INT 4
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: LD_INT 4
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 4
56800: NEG
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 4
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 5
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 4
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 4
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 5
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: LD_INT 5
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 4
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 4
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 4
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: LD_INT 4
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 4
57017: PUSH
57018: LD_INT 3
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 5
57027: PUSH
57028: LD_INT 4
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 5
57037: PUSH
57038: LD_INT 5
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 4
57047: PUSH
57048: LD_INT 5
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: LD_INT 4
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 5
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: LD_INT 5
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57142: LD_ADDR_VAR 0 33
57146: PUSH
57147: LD_INT 4
57149: NEG
57150: PUSH
57151: LD_INT 4
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 4
57161: NEG
57162: PUSH
57163: LD_INT 5
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: LD_INT 4
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 4
57197: NEG
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 5
57209: NEG
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 5
57221: NEG
57222: PUSH
57223: LD_INT 5
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: NEG
57234: PUSH
57235: LD_INT 5
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 5
57245: NEG
57246: PUSH
57247: LD_INT 3
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 4
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 3
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: LD_INT 2
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: LD_INT 4
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 4
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 5
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 5
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 5
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 4
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 4
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: LD_INT 4
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 4
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 4
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 4
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 3
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: LD_INT 4
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: LD_INT 5
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 5
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: LD_INT 4
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 5
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: LD_INT 3
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57680: LD_ADDR_VAR 0 34
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 4
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 5
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 4
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 4
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: LD_INT 5
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 3
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: LD_INT 5
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 4
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 4
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 3
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 4
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 4
57882: PUSH
57883: LD_INT 4
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 4
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 5
57902: PUSH
57903: LD_INT 4
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 5
57912: PUSH
57913: LD_INT 5
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 4
57922: PUSH
57923: LD_INT 5
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: LD_INT 4
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 5
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: PUSH
57963: LD_INT 5
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 3
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 4
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 4
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 4
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 4
58065: NEG
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 4
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 4
58110: NEG
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 5
58121: NEG
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 5
58132: NEG
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 5
58144: NEG
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: ST_TO_ADDR
// end ; end ;
58212: GO 58215
58214: POP
// case btype of b_depot , b_warehouse :
58215: LD_VAR 0 1
58219: PUSH
58220: LD_INT 0
58222: DOUBLE
58223: EQUAL
58224: IFTRUE 58234
58226: LD_INT 1
58228: DOUBLE
58229: EQUAL
58230: IFTRUE 58234
58232: GO 58435
58234: POP
// case nation of nation_american :
58235: LD_VAR 0 5
58239: PUSH
58240: LD_INT 1
58242: DOUBLE
58243: EQUAL
58244: IFTRUE 58248
58246: GO 58304
58248: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58249: LD_ADDR_VAR 0 9
58253: PUSH
58254: LD_VAR 0 11
58258: PUSH
58259: LD_VAR 0 12
58263: PUSH
58264: LD_VAR 0 13
58268: PUSH
58269: LD_VAR 0 14
58273: PUSH
58274: LD_VAR 0 15
58278: PUSH
58279: LD_VAR 0 16
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: PUSH
58292: LD_VAR 0 4
58296: PUSH
58297: LD_INT 1
58299: PLUS
58300: ARRAY
58301: ST_TO_ADDR
58302: GO 58433
58304: LD_INT 2
58306: DOUBLE
58307: EQUAL
58308: IFTRUE 58312
58310: GO 58368
58312: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58313: LD_ADDR_VAR 0 9
58317: PUSH
58318: LD_VAR 0 17
58322: PUSH
58323: LD_VAR 0 18
58327: PUSH
58328: LD_VAR 0 19
58332: PUSH
58333: LD_VAR 0 20
58337: PUSH
58338: LD_VAR 0 21
58342: PUSH
58343: LD_VAR 0 22
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: PUSH
58356: LD_VAR 0 4
58360: PUSH
58361: LD_INT 1
58363: PLUS
58364: ARRAY
58365: ST_TO_ADDR
58366: GO 58433
58368: LD_INT 3
58370: DOUBLE
58371: EQUAL
58372: IFTRUE 58376
58374: GO 58432
58376: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58377: LD_ADDR_VAR 0 9
58381: PUSH
58382: LD_VAR 0 23
58386: PUSH
58387: LD_VAR 0 24
58391: PUSH
58392: LD_VAR 0 25
58396: PUSH
58397: LD_VAR 0 26
58401: PUSH
58402: LD_VAR 0 27
58406: PUSH
58407: LD_VAR 0 28
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: PUSH
58420: LD_VAR 0 4
58424: PUSH
58425: LD_INT 1
58427: PLUS
58428: ARRAY
58429: ST_TO_ADDR
58430: GO 58433
58432: POP
58433: GO 58988
58435: LD_INT 2
58437: DOUBLE
58438: EQUAL
58439: IFTRUE 58449
58441: LD_INT 3
58443: DOUBLE
58444: EQUAL
58445: IFTRUE 58449
58447: GO 58505
58449: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58450: LD_ADDR_VAR 0 9
58454: PUSH
58455: LD_VAR 0 29
58459: PUSH
58460: LD_VAR 0 30
58464: PUSH
58465: LD_VAR 0 31
58469: PUSH
58470: LD_VAR 0 32
58474: PUSH
58475: LD_VAR 0 33
58479: PUSH
58480: LD_VAR 0 34
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: PUSH
58493: LD_VAR 0 4
58497: PUSH
58498: LD_INT 1
58500: PLUS
58501: ARRAY
58502: ST_TO_ADDR
58503: GO 58988
58505: LD_INT 16
58507: DOUBLE
58508: EQUAL
58509: IFTRUE 58567
58511: LD_INT 17
58513: DOUBLE
58514: EQUAL
58515: IFTRUE 58567
58517: LD_INT 18
58519: DOUBLE
58520: EQUAL
58521: IFTRUE 58567
58523: LD_INT 19
58525: DOUBLE
58526: EQUAL
58527: IFTRUE 58567
58529: LD_INT 22
58531: DOUBLE
58532: EQUAL
58533: IFTRUE 58567
58535: LD_INT 20
58537: DOUBLE
58538: EQUAL
58539: IFTRUE 58567
58541: LD_INT 21
58543: DOUBLE
58544: EQUAL
58545: IFTRUE 58567
58547: LD_INT 23
58549: DOUBLE
58550: EQUAL
58551: IFTRUE 58567
58553: LD_INT 24
58555: DOUBLE
58556: EQUAL
58557: IFTRUE 58567
58559: LD_INT 25
58561: DOUBLE
58562: EQUAL
58563: IFTRUE 58567
58565: GO 58623
58567: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58568: LD_ADDR_VAR 0 9
58572: PUSH
58573: LD_VAR 0 35
58577: PUSH
58578: LD_VAR 0 36
58582: PUSH
58583: LD_VAR 0 37
58587: PUSH
58588: LD_VAR 0 38
58592: PUSH
58593: LD_VAR 0 39
58597: PUSH
58598: LD_VAR 0 40
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: PUSH
58611: LD_VAR 0 4
58615: PUSH
58616: LD_INT 1
58618: PLUS
58619: ARRAY
58620: ST_TO_ADDR
58621: GO 58988
58623: LD_INT 6
58625: DOUBLE
58626: EQUAL
58627: IFTRUE 58679
58629: LD_INT 7
58631: DOUBLE
58632: EQUAL
58633: IFTRUE 58679
58635: LD_INT 8
58637: DOUBLE
58638: EQUAL
58639: IFTRUE 58679
58641: LD_INT 13
58643: DOUBLE
58644: EQUAL
58645: IFTRUE 58679
58647: LD_INT 12
58649: DOUBLE
58650: EQUAL
58651: IFTRUE 58679
58653: LD_INT 15
58655: DOUBLE
58656: EQUAL
58657: IFTRUE 58679
58659: LD_INT 11
58661: DOUBLE
58662: EQUAL
58663: IFTRUE 58679
58665: LD_INT 14
58667: DOUBLE
58668: EQUAL
58669: IFTRUE 58679
58671: LD_INT 10
58673: DOUBLE
58674: EQUAL
58675: IFTRUE 58679
58677: GO 58735
58679: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58680: LD_ADDR_VAR 0 9
58684: PUSH
58685: LD_VAR 0 41
58689: PUSH
58690: LD_VAR 0 42
58694: PUSH
58695: LD_VAR 0 43
58699: PUSH
58700: LD_VAR 0 44
58704: PUSH
58705: LD_VAR 0 45
58709: PUSH
58710: LD_VAR 0 46
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: PUSH
58723: LD_VAR 0 4
58727: PUSH
58728: LD_INT 1
58730: PLUS
58731: ARRAY
58732: ST_TO_ADDR
58733: GO 58988
58735: LD_INT 36
58737: DOUBLE
58738: EQUAL
58739: IFTRUE 58743
58741: GO 58799
58743: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58744: LD_ADDR_VAR 0 9
58748: PUSH
58749: LD_VAR 0 47
58753: PUSH
58754: LD_VAR 0 48
58758: PUSH
58759: LD_VAR 0 49
58763: PUSH
58764: LD_VAR 0 50
58768: PUSH
58769: LD_VAR 0 51
58773: PUSH
58774: LD_VAR 0 52
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: PUSH
58787: LD_VAR 0 4
58791: PUSH
58792: LD_INT 1
58794: PLUS
58795: ARRAY
58796: ST_TO_ADDR
58797: GO 58988
58799: LD_INT 4
58801: DOUBLE
58802: EQUAL
58803: IFTRUE 58825
58805: LD_INT 5
58807: DOUBLE
58808: EQUAL
58809: IFTRUE 58825
58811: LD_INT 34
58813: DOUBLE
58814: EQUAL
58815: IFTRUE 58825
58817: LD_INT 37
58819: DOUBLE
58820: EQUAL
58821: IFTRUE 58825
58823: GO 58881
58825: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58826: LD_ADDR_VAR 0 9
58830: PUSH
58831: LD_VAR 0 53
58835: PUSH
58836: LD_VAR 0 54
58840: PUSH
58841: LD_VAR 0 55
58845: PUSH
58846: LD_VAR 0 56
58850: PUSH
58851: LD_VAR 0 57
58855: PUSH
58856: LD_VAR 0 58
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: PUSH
58869: LD_VAR 0 4
58873: PUSH
58874: LD_INT 1
58876: PLUS
58877: ARRAY
58878: ST_TO_ADDR
58879: GO 58988
58881: LD_INT 31
58883: DOUBLE
58884: EQUAL
58885: IFTRUE 58931
58887: LD_INT 32
58889: DOUBLE
58890: EQUAL
58891: IFTRUE 58931
58893: LD_INT 33
58895: DOUBLE
58896: EQUAL
58897: IFTRUE 58931
58899: LD_INT 27
58901: DOUBLE
58902: EQUAL
58903: IFTRUE 58931
58905: LD_INT 26
58907: DOUBLE
58908: EQUAL
58909: IFTRUE 58931
58911: LD_INT 28
58913: DOUBLE
58914: EQUAL
58915: IFTRUE 58931
58917: LD_INT 29
58919: DOUBLE
58920: EQUAL
58921: IFTRUE 58931
58923: LD_INT 30
58925: DOUBLE
58926: EQUAL
58927: IFTRUE 58931
58929: GO 58987
58931: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58932: LD_ADDR_VAR 0 9
58936: PUSH
58937: LD_VAR 0 59
58941: PUSH
58942: LD_VAR 0 60
58946: PUSH
58947: LD_VAR 0 61
58951: PUSH
58952: LD_VAR 0 62
58956: PUSH
58957: LD_VAR 0 63
58961: PUSH
58962: LD_VAR 0 64
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: PUSH
58975: LD_VAR 0 4
58979: PUSH
58980: LD_INT 1
58982: PLUS
58983: ARRAY
58984: ST_TO_ADDR
58985: GO 58988
58987: POP
// temp_list2 = [ ] ;
58988: LD_ADDR_VAR 0 10
58992: PUSH
58993: EMPTY
58994: ST_TO_ADDR
// for i in temp_list do
58995: LD_ADDR_VAR 0 8
58999: PUSH
59000: LD_VAR 0 9
59004: PUSH
59005: FOR_IN
59006: IFFALSE 59058
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59008: LD_ADDR_VAR 0 10
59012: PUSH
59013: LD_VAR 0 10
59017: PUSH
59018: LD_VAR 0 8
59022: PUSH
59023: LD_INT 1
59025: ARRAY
59026: PUSH
59027: LD_VAR 0 2
59031: PLUS
59032: PUSH
59033: LD_VAR 0 8
59037: PUSH
59038: LD_INT 2
59040: ARRAY
59041: PUSH
59042: LD_VAR 0 3
59046: PLUS
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: ADD
59055: ST_TO_ADDR
59056: GO 59005
59058: POP
59059: POP
// result = temp_list2 ;
59060: LD_ADDR_VAR 0 7
59064: PUSH
59065: LD_VAR 0 10
59069: ST_TO_ADDR
// end ;
59070: LD_VAR 0 7
59074: RET
// export function EnemyInRange ( unit , dist ) ; begin
59075: LD_INT 0
59077: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59078: LD_ADDR_VAR 0 3
59082: PUSH
59083: LD_VAR 0 1
59087: PPUSH
59088: CALL_OW 255
59092: PPUSH
59093: LD_VAR 0 1
59097: PPUSH
59098: CALL_OW 250
59102: PPUSH
59103: LD_VAR 0 1
59107: PPUSH
59108: CALL_OW 251
59112: PPUSH
59113: LD_VAR 0 2
59117: PPUSH
59118: CALL 32846 0 4
59122: PUSH
59123: LD_INT 4
59125: ARRAY
59126: ST_TO_ADDR
// end ;
59127: LD_VAR 0 3
59131: RET
// export function PlayerSeeMe ( unit ) ; begin
59132: LD_INT 0
59134: PPUSH
// result := See ( your_side , unit ) ;
59135: LD_ADDR_VAR 0 2
59139: PUSH
59140: LD_OWVAR 2
59144: PPUSH
59145: LD_VAR 0 1
59149: PPUSH
59150: CALL_OW 292
59154: ST_TO_ADDR
// end ;
59155: LD_VAR 0 2
59159: RET
// export function ReverseDir ( unit ) ; begin
59160: LD_INT 0
59162: PPUSH
// if not unit then
59163: LD_VAR 0 1
59167: NOT
59168: IFFALSE 59172
// exit ;
59170: GO 59195
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59172: LD_ADDR_VAR 0 2
59176: PUSH
59177: LD_VAR 0 1
59181: PPUSH
59182: CALL_OW 254
59186: PUSH
59187: LD_INT 3
59189: PLUS
59190: PUSH
59191: LD_INT 6
59193: MOD
59194: ST_TO_ADDR
// end ;
59195: LD_VAR 0 2
59199: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59200: LD_INT 0
59202: PPUSH
59203: PPUSH
59204: PPUSH
59205: PPUSH
59206: PPUSH
// if not hexes then
59207: LD_VAR 0 2
59211: NOT
59212: IFFALSE 59216
// exit ;
59214: GO 59364
// dist := 9999 ;
59216: LD_ADDR_VAR 0 5
59220: PUSH
59221: LD_INT 9999
59223: ST_TO_ADDR
// for i = 1 to hexes do
59224: LD_ADDR_VAR 0 4
59228: PUSH
59229: DOUBLE
59230: LD_INT 1
59232: DEC
59233: ST_TO_ADDR
59234: LD_VAR 0 2
59238: PUSH
59239: FOR_TO
59240: IFFALSE 59352
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59242: LD_VAR 0 1
59246: PPUSH
59247: LD_VAR 0 2
59251: PUSH
59252: LD_VAR 0 4
59256: ARRAY
59257: PUSH
59258: LD_INT 1
59260: ARRAY
59261: PPUSH
59262: LD_VAR 0 2
59266: PUSH
59267: LD_VAR 0 4
59271: ARRAY
59272: PUSH
59273: LD_INT 2
59275: ARRAY
59276: PPUSH
59277: CALL_OW 297
59281: PUSH
59282: LD_VAR 0 5
59286: LESS
59287: IFFALSE 59350
// begin hex := hexes [ i ] ;
59289: LD_ADDR_VAR 0 7
59293: PUSH
59294: LD_VAR 0 2
59298: PUSH
59299: LD_VAR 0 4
59303: ARRAY
59304: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59305: LD_ADDR_VAR 0 5
59309: PUSH
59310: LD_VAR 0 1
59314: PPUSH
59315: LD_VAR 0 2
59319: PUSH
59320: LD_VAR 0 4
59324: ARRAY
59325: PUSH
59326: LD_INT 1
59328: ARRAY
59329: PPUSH
59330: LD_VAR 0 2
59334: PUSH
59335: LD_VAR 0 4
59339: ARRAY
59340: PUSH
59341: LD_INT 2
59343: ARRAY
59344: PPUSH
59345: CALL_OW 297
59349: ST_TO_ADDR
// end ; end ;
59350: GO 59239
59352: POP
59353: POP
// result := hex ;
59354: LD_ADDR_VAR 0 3
59358: PUSH
59359: LD_VAR 0 7
59363: ST_TO_ADDR
// end ;
59364: LD_VAR 0 3
59368: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59369: LD_INT 0
59371: PPUSH
59372: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59373: LD_VAR 0 1
59377: NOT
59378: PUSH
59379: LD_VAR 0 1
59383: PUSH
59384: LD_INT 21
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 23
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PPUSH
59408: CALL_OW 69
59412: IN
59413: NOT
59414: OR
59415: IFFALSE 59419
// exit ;
59417: GO 59466
// for i = 1 to 3 do
59419: LD_ADDR_VAR 0 3
59423: PUSH
59424: DOUBLE
59425: LD_INT 1
59427: DEC
59428: ST_TO_ADDR
59429: LD_INT 3
59431: PUSH
59432: FOR_TO
59433: IFFALSE 59464
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59435: LD_VAR 0 1
59439: PPUSH
59440: CALL_OW 250
59444: PPUSH
59445: LD_VAR 0 1
59449: PPUSH
59450: CALL_OW 251
59454: PPUSH
59455: LD_INT 1
59457: PPUSH
59458: CALL_OW 453
59462: GO 59432
59464: POP
59465: POP
// end ;
59466: LD_VAR 0 2
59470: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59471: LD_INT 0
59473: PPUSH
59474: PPUSH
59475: PPUSH
59476: PPUSH
59477: PPUSH
59478: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59479: LD_VAR 0 1
59483: NOT
59484: PUSH
59485: LD_VAR 0 2
59489: NOT
59490: OR
59491: PUSH
59492: LD_VAR 0 1
59496: PPUSH
59497: CALL_OW 314
59501: OR
59502: IFFALSE 59506
// exit ;
59504: GO 59947
// x := GetX ( enemy_unit ) ;
59506: LD_ADDR_VAR 0 7
59510: PUSH
59511: LD_VAR 0 2
59515: PPUSH
59516: CALL_OW 250
59520: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59521: LD_ADDR_VAR 0 8
59525: PUSH
59526: LD_VAR 0 2
59530: PPUSH
59531: CALL_OW 251
59535: ST_TO_ADDR
// if not x or not y then
59536: LD_VAR 0 7
59540: NOT
59541: PUSH
59542: LD_VAR 0 8
59546: NOT
59547: OR
59548: IFFALSE 59552
// exit ;
59550: GO 59947
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59552: LD_ADDR_VAR 0 6
59556: PUSH
59557: LD_VAR 0 7
59561: PPUSH
59562: LD_INT 0
59564: PPUSH
59565: LD_INT 4
59567: PPUSH
59568: CALL_OW 272
59572: PUSH
59573: LD_VAR 0 8
59577: PPUSH
59578: LD_INT 0
59580: PPUSH
59581: LD_INT 4
59583: PPUSH
59584: CALL_OW 273
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_VAR 0 7
59597: PPUSH
59598: LD_INT 1
59600: PPUSH
59601: LD_INT 4
59603: PPUSH
59604: CALL_OW 272
59608: PUSH
59609: LD_VAR 0 8
59613: PPUSH
59614: LD_INT 1
59616: PPUSH
59617: LD_INT 4
59619: PPUSH
59620: CALL_OW 273
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_VAR 0 7
59633: PPUSH
59634: LD_INT 2
59636: PPUSH
59637: LD_INT 4
59639: PPUSH
59640: CALL_OW 272
59644: PUSH
59645: LD_VAR 0 8
59649: PPUSH
59650: LD_INT 2
59652: PPUSH
59653: LD_INT 4
59655: PPUSH
59656: CALL_OW 273
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_VAR 0 7
59669: PPUSH
59670: LD_INT 3
59672: PPUSH
59673: LD_INT 4
59675: PPUSH
59676: CALL_OW 272
59680: PUSH
59681: LD_VAR 0 8
59685: PPUSH
59686: LD_INT 3
59688: PPUSH
59689: LD_INT 4
59691: PPUSH
59692: CALL_OW 273
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_VAR 0 7
59705: PPUSH
59706: LD_INT 4
59708: PPUSH
59709: LD_INT 4
59711: PPUSH
59712: CALL_OW 272
59716: PUSH
59717: LD_VAR 0 8
59721: PPUSH
59722: LD_INT 4
59724: PPUSH
59725: LD_INT 4
59727: PPUSH
59728: CALL_OW 273
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_VAR 0 7
59741: PPUSH
59742: LD_INT 5
59744: PPUSH
59745: LD_INT 4
59747: PPUSH
59748: CALL_OW 272
59752: PUSH
59753: LD_VAR 0 8
59757: PPUSH
59758: LD_INT 5
59760: PPUSH
59761: LD_INT 4
59763: PPUSH
59764: CALL_OW 273
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: ST_TO_ADDR
// for i = tmp downto 1 do
59781: LD_ADDR_VAR 0 4
59785: PUSH
59786: DOUBLE
59787: LD_VAR 0 6
59791: INC
59792: ST_TO_ADDR
59793: LD_INT 1
59795: PUSH
59796: FOR_DOWNTO
59797: IFFALSE 59898
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59799: LD_VAR 0 6
59803: PUSH
59804: LD_VAR 0 4
59808: ARRAY
59809: PUSH
59810: LD_INT 1
59812: ARRAY
59813: PPUSH
59814: LD_VAR 0 6
59818: PUSH
59819: LD_VAR 0 4
59823: ARRAY
59824: PUSH
59825: LD_INT 2
59827: ARRAY
59828: PPUSH
59829: CALL_OW 488
59833: NOT
59834: PUSH
59835: LD_VAR 0 6
59839: PUSH
59840: LD_VAR 0 4
59844: ARRAY
59845: PUSH
59846: LD_INT 1
59848: ARRAY
59849: PPUSH
59850: LD_VAR 0 6
59854: PUSH
59855: LD_VAR 0 4
59859: ARRAY
59860: PUSH
59861: LD_INT 2
59863: ARRAY
59864: PPUSH
59865: CALL_OW 428
59869: PUSH
59870: LD_INT 0
59872: NONEQUAL
59873: OR
59874: IFFALSE 59896
// tmp := Delete ( tmp , i ) ;
59876: LD_ADDR_VAR 0 6
59880: PUSH
59881: LD_VAR 0 6
59885: PPUSH
59886: LD_VAR 0 4
59890: PPUSH
59891: CALL_OW 3
59895: ST_TO_ADDR
59896: GO 59796
59898: POP
59899: POP
// j := GetClosestHex ( unit , tmp ) ;
59900: LD_ADDR_VAR 0 5
59904: PUSH
59905: LD_VAR 0 1
59909: PPUSH
59910: LD_VAR 0 6
59914: PPUSH
59915: CALL 59200 0 2
59919: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59920: LD_VAR 0 1
59924: PPUSH
59925: LD_VAR 0 5
59929: PUSH
59930: LD_INT 1
59932: ARRAY
59933: PPUSH
59934: LD_VAR 0 5
59938: PUSH
59939: LD_INT 2
59941: ARRAY
59942: PPUSH
59943: CALL_OW 111
// end ;
59947: LD_VAR 0 3
59951: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59952: LD_INT 0
59954: PPUSH
59955: PPUSH
59956: PPUSH
// uc_side = 0 ;
59957: LD_ADDR_OWVAR 20
59961: PUSH
59962: LD_INT 0
59964: ST_TO_ADDR
// uc_nation = 0 ;
59965: LD_ADDR_OWVAR 21
59969: PUSH
59970: LD_INT 0
59972: ST_TO_ADDR
// InitHc_All ( ) ;
59973: CALL_OW 584
// InitVc ;
59977: CALL_OW 20
// if mastodonts then
59981: LD_VAR 0 6
59985: IFFALSE 60052
// for i = 1 to mastodonts do
59987: LD_ADDR_VAR 0 11
59991: PUSH
59992: DOUBLE
59993: LD_INT 1
59995: DEC
59996: ST_TO_ADDR
59997: LD_VAR 0 6
60001: PUSH
60002: FOR_TO
60003: IFFALSE 60050
// begin vc_chassis := 31 ;
60005: LD_ADDR_OWVAR 37
60009: PUSH
60010: LD_INT 31
60012: ST_TO_ADDR
// vc_control := control_rider ;
60013: LD_ADDR_OWVAR 38
60017: PUSH
60018: LD_INT 4
60020: ST_TO_ADDR
// animal := CreateVehicle ;
60021: LD_ADDR_VAR 0 12
60025: PUSH
60026: CALL_OW 45
60030: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60031: LD_VAR 0 12
60035: PPUSH
60036: LD_VAR 0 8
60040: PPUSH
60041: LD_INT 0
60043: PPUSH
60044: CALL 62240 0 3
// end ;
60048: GO 60002
60050: POP
60051: POP
// if horses then
60052: LD_VAR 0 5
60056: IFFALSE 60123
// for i = 1 to horses do
60058: LD_ADDR_VAR 0 11
60062: PUSH
60063: DOUBLE
60064: LD_INT 1
60066: DEC
60067: ST_TO_ADDR
60068: LD_VAR 0 5
60072: PUSH
60073: FOR_TO
60074: IFFALSE 60121
// begin hc_class := 21 ;
60076: LD_ADDR_OWVAR 28
60080: PUSH
60081: LD_INT 21
60083: ST_TO_ADDR
// hc_gallery :=  ;
60084: LD_ADDR_OWVAR 33
60088: PUSH
60089: LD_STRING 
60091: ST_TO_ADDR
// animal := CreateHuman ;
60092: LD_ADDR_VAR 0 12
60096: PUSH
60097: CALL_OW 44
60101: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60102: LD_VAR 0 12
60106: PPUSH
60107: LD_VAR 0 8
60111: PPUSH
60112: LD_INT 0
60114: PPUSH
60115: CALL 62240 0 3
// end ;
60119: GO 60073
60121: POP
60122: POP
// if birds then
60123: LD_VAR 0 1
60127: IFFALSE 60194
// for i = 1 to birds do
60129: LD_ADDR_VAR 0 11
60133: PUSH
60134: DOUBLE
60135: LD_INT 1
60137: DEC
60138: ST_TO_ADDR
60139: LD_VAR 0 1
60143: PUSH
60144: FOR_TO
60145: IFFALSE 60192
// begin hc_class = 18 ;
60147: LD_ADDR_OWVAR 28
60151: PUSH
60152: LD_INT 18
60154: ST_TO_ADDR
// hc_gallery =  ;
60155: LD_ADDR_OWVAR 33
60159: PUSH
60160: LD_STRING 
60162: ST_TO_ADDR
// animal := CreateHuman ;
60163: LD_ADDR_VAR 0 12
60167: PUSH
60168: CALL_OW 44
60172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60173: LD_VAR 0 12
60177: PPUSH
60178: LD_VAR 0 8
60182: PPUSH
60183: LD_INT 0
60185: PPUSH
60186: CALL 62240 0 3
// end ;
60190: GO 60144
60192: POP
60193: POP
// if tigers then
60194: LD_VAR 0 2
60198: IFFALSE 60282
// for i = 1 to tigers do
60200: LD_ADDR_VAR 0 11
60204: PUSH
60205: DOUBLE
60206: LD_INT 1
60208: DEC
60209: ST_TO_ADDR
60210: LD_VAR 0 2
60214: PUSH
60215: FOR_TO
60216: IFFALSE 60280
// begin hc_class = class_tiger ;
60218: LD_ADDR_OWVAR 28
60222: PUSH
60223: LD_INT 14
60225: ST_TO_ADDR
// hc_gallery =  ;
60226: LD_ADDR_OWVAR 33
60230: PUSH
60231: LD_STRING 
60233: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60234: LD_ADDR_OWVAR 35
60238: PUSH
60239: LD_INT 7
60241: NEG
60242: PPUSH
60243: LD_INT 7
60245: PPUSH
60246: CALL_OW 12
60250: ST_TO_ADDR
// animal := CreateHuman ;
60251: LD_ADDR_VAR 0 12
60255: PUSH
60256: CALL_OW 44
60260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60261: LD_VAR 0 12
60265: PPUSH
60266: LD_VAR 0 8
60270: PPUSH
60271: LD_INT 0
60273: PPUSH
60274: CALL 62240 0 3
// end ;
60278: GO 60215
60280: POP
60281: POP
// if apemans then
60282: LD_VAR 0 3
60286: IFFALSE 60409
// for i = 1 to apemans do
60288: LD_ADDR_VAR 0 11
60292: PUSH
60293: DOUBLE
60294: LD_INT 1
60296: DEC
60297: ST_TO_ADDR
60298: LD_VAR 0 3
60302: PUSH
60303: FOR_TO
60304: IFFALSE 60407
// begin hc_class = class_apeman ;
60306: LD_ADDR_OWVAR 28
60310: PUSH
60311: LD_INT 12
60313: ST_TO_ADDR
// hc_gallery =  ;
60314: LD_ADDR_OWVAR 33
60318: PUSH
60319: LD_STRING 
60321: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60322: LD_ADDR_OWVAR 35
60326: PUSH
60327: LD_INT 5
60329: NEG
60330: PPUSH
60331: LD_INT 5
60333: PPUSH
60334: CALL_OW 12
60338: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60339: LD_ADDR_OWVAR 31
60343: PUSH
60344: LD_INT 1
60346: PPUSH
60347: LD_INT 3
60349: PPUSH
60350: CALL_OW 12
60354: PUSH
60355: LD_INT 1
60357: PPUSH
60358: LD_INT 3
60360: PPUSH
60361: CALL_OW 12
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: ST_TO_ADDR
// animal := CreateHuman ;
60378: LD_ADDR_VAR 0 12
60382: PUSH
60383: CALL_OW 44
60387: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60388: LD_VAR 0 12
60392: PPUSH
60393: LD_VAR 0 8
60397: PPUSH
60398: LD_INT 0
60400: PPUSH
60401: CALL 62240 0 3
// end ;
60405: GO 60303
60407: POP
60408: POP
// if enchidnas then
60409: LD_VAR 0 4
60413: IFFALSE 60480
// for i = 1 to enchidnas do
60415: LD_ADDR_VAR 0 11
60419: PUSH
60420: DOUBLE
60421: LD_INT 1
60423: DEC
60424: ST_TO_ADDR
60425: LD_VAR 0 4
60429: PUSH
60430: FOR_TO
60431: IFFALSE 60478
// begin hc_class = 13 ;
60433: LD_ADDR_OWVAR 28
60437: PUSH
60438: LD_INT 13
60440: ST_TO_ADDR
// hc_gallery =  ;
60441: LD_ADDR_OWVAR 33
60445: PUSH
60446: LD_STRING 
60448: ST_TO_ADDR
// animal := CreateHuman ;
60449: LD_ADDR_VAR 0 12
60453: PUSH
60454: CALL_OW 44
60458: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60459: LD_VAR 0 12
60463: PPUSH
60464: LD_VAR 0 8
60468: PPUSH
60469: LD_INT 0
60471: PPUSH
60472: CALL 62240 0 3
// end ;
60476: GO 60430
60478: POP
60479: POP
// if fishes then
60480: LD_VAR 0 7
60484: IFFALSE 60551
// for i = 1 to fishes do
60486: LD_ADDR_VAR 0 11
60490: PUSH
60491: DOUBLE
60492: LD_INT 1
60494: DEC
60495: ST_TO_ADDR
60496: LD_VAR 0 7
60500: PUSH
60501: FOR_TO
60502: IFFALSE 60549
// begin hc_class = 20 ;
60504: LD_ADDR_OWVAR 28
60508: PUSH
60509: LD_INT 20
60511: ST_TO_ADDR
// hc_gallery =  ;
60512: LD_ADDR_OWVAR 33
60516: PUSH
60517: LD_STRING 
60519: ST_TO_ADDR
// animal := CreateHuman ;
60520: LD_ADDR_VAR 0 12
60524: PUSH
60525: CALL_OW 44
60529: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60530: LD_VAR 0 12
60534: PPUSH
60535: LD_VAR 0 9
60539: PPUSH
60540: LD_INT 0
60542: PPUSH
60543: CALL 62240 0 3
// end ;
60547: GO 60501
60549: POP
60550: POP
// end ;
60551: LD_VAR 0 10
60555: RET
// export function WantHeal ( sci , unit ) ; begin
60556: LD_INT 0
60558: PPUSH
// if GetTaskList ( sci ) > 0 then
60559: LD_VAR 0 1
60563: PPUSH
60564: CALL_OW 437
60568: PUSH
60569: LD_INT 0
60571: GREATER
60572: IFFALSE 60642
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60574: LD_VAR 0 1
60578: PPUSH
60579: CALL_OW 437
60583: PUSH
60584: LD_INT 1
60586: ARRAY
60587: PUSH
60588: LD_INT 1
60590: ARRAY
60591: PUSH
60592: LD_STRING l
60594: EQUAL
60595: PUSH
60596: LD_VAR 0 1
60600: PPUSH
60601: CALL_OW 437
60605: PUSH
60606: LD_INT 1
60608: ARRAY
60609: PUSH
60610: LD_INT 4
60612: ARRAY
60613: PUSH
60614: LD_VAR 0 2
60618: EQUAL
60619: AND
60620: IFFALSE 60632
// result := true else
60622: LD_ADDR_VAR 0 3
60626: PUSH
60627: LD_INT 1
60629: ST_TO_ADDR
60630: GO 60640
// result := false ;
60632: LD_ADDR_VAR 0 3
60636: PUSH
60637: LD_INT 0
60639: ST_TO_ADDR
// end else
60640: GO 60650
// result := false ;
60642: LD_ADDR_VAR 0 3
60646: PUSH
60647: LD_INT 0
60649: ST_TO_ADDR
// end ;
60650: LD_VAR 0 3
60654: RET
// export function HealTarget ( sci ) ; begin
60655: LD_INT 0
60657: PPUSH
// if not sci then
60658: LD_VAR 0 1
60662: NOT
60663: IFFALSE 60667
// exit ;
60665: GO 60732
// result := 0 ;
60667: LD_ADDR_VAR 0 2
60671: PUSH
60672: LD_INT 0
60674: ST_TO_ADDR
// if GetTaskList ( sci ) then
60675: LD_VAR 0 1
60679: PPUSH
60680: CALL_OW 437
60684: IFFALSE 60732
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60686: LD_VAR 0 1
60690: PPUSH
60691: CALL_OW 437
60695: PUSH
60696: LD_INT 1
60698: ARRAY
60699: PUSH
60700: LD_INT 1
60702: ARRAY
60703: PUSH
60704: LD_STRING l
60706: EQUAL
60707: IFFALSE 60732
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60709: LD_ADDR_VAR 0 2
60713: PUSH
60714: LD_VAR 0 1
60718: PPUSH
60719: CALL_OW 437
60723: PUSH
60724: LD_INT 1
60726: ARRAY
60727: PUSH
60728: LD_INT 4
60730: ARRAY
60731: ST_TO_ADDR
// end ;
60732: LD_VAR 0 2
60736: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60737: LD_INT 0
60739: PPUSH
60740: PPUSH
60741: PPUSH
60742: PPUSH
// if not base_units then
60743: LD_VAR 0 1
60747: NOT
60748: IFFALSE 60752
// exit ;
60750: GO 60839
// result := false ;
60752: LD_ADDR_VAR 0 2
60756: PUSH
60757: LD_INT 0
60759: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60760: LD_ADDR_VAR 0 5
60764: PUSH
60765: LD_VAR 0 1
60769: PPUSH
60770: LD_INT 21
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PPUSH
60780: CALL_OW 72
60784: ST_TO_ADDR
// if not tmp then
60785: LD_VAR 0 5
60789: NOT
60790: IFFALSE 60794
// exit ;
60792: GO 60839
// for i in tmp do
60794: LD_ADDR_VAR 0 3
60798: PUSH
60799: LD_VAR 0 5
60803: PUSH
60804: FOR_IN
60805: IFFALSE 60837
// begin result := EnemyInRange ( i , 22 ) ;
60807: LD_ADDR_VAR 0 2
60811: PUSH
60812: LD_VAR 0 3
60816: PPUSH
60817: LD_INT 22
60819: PPUSH
60820: CALL 59075 0 2
60824: ST_TO_ADDR
// if result then
60825: LD_VAR 0 2
60829: IFFALSE 60835
// exit ;
60831: POP
60832: POP
60833: GO 60839
// end ;
60835: GO 60804
60837: POP
60838: POP
// end ;
60839: LD_VAR 0 2
60843: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60844: LD_INT 0
60846: PPUSH
60847: PPUSH
// if not units then
60848: LD_VAR 0 1
60852: NOT
60853: IFFALSE 60857
// exit ;
60855: GO 60927
// result := [ ] ;
60857: LD_ADDR_VAR 0 3
60861: PUSH
60862: EMPTY
60863: ST_TO_ADDR
// for i in units do
60864: LD_ADDR_VAR 0 4
60868: PUSH
60869: LD_VAR 0 1
60873: PUSH
60874: FOR_IN
60875: IFFALSE 60925
// if GetTag ( i ) = tag then
60877: LD_VAR 0 4
60881: PPUSH
60882: CALL_OW 110
60886: PUSH
60887: LD_VAR 0 2
60891: EQUAL
60892: IFFALSE 60923
// result := Insert ( result , result + 1 , i ) ;
60894: LD_ADDR_VAR 0 3
60898: PUSH
60899: LD_VAR 0 3
60903: PPUSH
60904: LD_VAR 0 3
60908: PUSH
60909: LD_INT 1
60911: PLUS
60912: PPUSH
60913: LD_VAR 0 4
60917: PPUSH
60918: CALL_OW 2
60922: ST_TO_ADDR
60923: GO 60874
60925: POP
60926: POP
// end ;
60927: LD_VAR 0 3
60931: RET
// export function IsDriver ( un ) ; begin
60932: LD_INT 0
60934: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60935: LD_ADDR_VAR 0 2
60939: PUSH
60940: LD_VAR 0 1
60944: PUSH
60945: LD_INT 55
60947: PUSH
60948: EMPTY
60949: LIST
60950: PPUSH
60951: CALL_OW 69
60955: IN
60956: ST_TO_ADDR
// end ;
60957: LD_VAR 0 2
60961: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60962: LD_INT 0
60964: PPUSH
60965: PPUSH
// list := [ ] ;
60966: LD_ADDR_VAR 0 5
60970: PUSH
60971: EMPTY
60972: ST_TO_ADDR
// case d of 0 :
60973: LD_VAR 0 3
60977: PUSH
60978: LD_INT 0
60980: DOUBLE
60981: EQUAL
60982: IFTRUE 60986
60984: GO 61119
60986: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60987: LD_ADDR_VAR 0 5
60991: PUSH
60992: LD_VAR 0 1
60996: PUSH
60997: LD_INT 4
60999: MINUS
61000: PUSH
61001: LD_VAR 0 2
61005: PUSH
61006: LD_INT 4
61008: MINUS
61009: PUSH
61010: LD_INT 2
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: PUSH
61018: LD_VAR 0 1
61022: PUSH
61023: LD_INT 3
61025: MINUS
61026: PUSH
61027: LD_VAR 0 2
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: PUSH
61040: LD_VAR 0 1
61044: PUSH
61045: LD_INT 4
61047: PLUS
61048: PUSH
61049: LD_VAR 0 2
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: PUSH
61062: LD_VAR 0 1
61066: PUSH
61067: LD_INT 3
61069: PLUS
61070: PUSH
61071: LD_VAR 0 2
61075: PUSH
61076: LD_INT 3
61078: PLUS
61079: PUSH
61080: LD_INT 5
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: PUSH
61088: LD_VAR 0 1
61092: PUSH
61093: LD_VAR 0 2
61097: PUSH
61098: LD_INT 4
61100: PLUS
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: ST_TO_ADDR
// end ; 1 :
61117: GO 61817
61119: LD_INT 1
61121: DOUBLE
61122: EQUAL
61123: IFTRUE 61127
61125: GO 61260
61127: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61128: LD_ADDR_VAR 0 5
61132: PUSH
61133: LD_VAR 0 1
61137: PUSH
61138: LD_VAR 0 2
61142: PUSH
61143: LD_INT 4
61145: MINUS
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: PUSH
61155: LD_VAR 0 1
61159: PUSH
61160: LD_INT 3
61162: MINUS
61163: PUSH
61164: LD_VAR 0 2
61168: PUSH
61169: LD_INT 3
61171: MINUS
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: LIST
61180: PUSH
61181: LD_VAR 0 1
61185: PUSH
61186: LD_INT 4
61188: MINUS
61189: PUSH
61190: LD_VAR 0 2
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: PUSH
61203: LD_VAR 0 1
61207: PUSH
61208: LD_VAR 0 2
61212: PUSH
61213: LD_INT 3
61215: PLUS
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: PUSH
61225: LD_VAR 0 1
61229: PUSH
61230: LD_INT 4
61232: PLUS
61233: PUSH
61234: LD_VAR 0 2
61238: PUSH
61239: LD_INT 4
61241: PLUS
61242: PUSH
61243: LD_INT 5
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: ST_TO_ADDR
// end ; 2 :
61258: GO 61817
61260: LD_INT 2
61262: DOUBLE
61263: EQUAL
61264: IFTRUE 61268
61266: GO 61397
61268: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61269: LD_ADDR_VAR 0 5
61273: PUSH
61274: LD_VAR 0 1
61278: PUSH
61279: LD_VAR 0 2
61283: PUSH
61284: LD_INT 3
61286: MINUS
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: LIST
61295: PUSH
61296: LD_VAR 0 1
61300: PUSH
61301: LD_INT 4
61303: PLUS
61304: PUSH
61305: LD_VAR 0 2
61309: PUSH
61310: LD_INT 4
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: LIST
61317: PUSH
61318: LD_VAR 0 1
61322: PUSH
61323: LD_VAR 0 2
61327: PUSH
61328: LD_INT 4
61330: PLUS
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: LIST
61339: PUSH
61340: LD_VAR 0 1
61344: PUSH
61345: LD_INT 3
61347: MINUS
61348: PUSH
61349: LD_VAR 0 2
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: LIST
61361: PUSH
61362: LD_VAR 0 1
61366: PUSH
61367: LD_INT 4
61369: MINUS
61370: PUSH
61371: LD_VAR 0 2
61375: PUSH
61376: LD_INT 4
61378: MINUS
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: LIST
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// end ; 3 :
61395: GO 61817
61397: LD_INT 3
61399: DOUBLE
61400: EQUAL
61401: IFTRUE 61405
61403: GO 61538
61405: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61406: LD_ADDR_VAR 0 5
61410: PUSH
61411: LD_VAR 0 1
61415: PUSH
61416: LD_INT 3
61418: PLUS
61419: PUSH
61420: LD_VAR 0 2
61424: PUSH
61425: LD_INT 4
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: PUSH
61433: LD_VAR 0 1
61437: PUSH
61438: LD_INT 4
61440: PLUS
61441: PUSH
61442: LD_VAR 0 2
61446: PUSH
61447: LD_INT 4
61449: PLUS
61450: PUSH
61451: LD_INT 5
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: LIST
61458: PUSH
61459: LD_VAR 0 1
61463: PUSH
61464: LD_INT 4
61466: MINUS
61467: PUSH
61468: LD_VAR 0 2
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: LIST
61480: PUSH
61481: LD_VAR 0 1
61485: PUSH
61486: LD_VAR 0 2
61490: PUSH
61491: LD_INT 4
61493: MINUS
61494: PUSH
61495: LD_INT 3
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: PUSH
61503: LD_VAR 0 1
61507: PUSH
61508: LD_INT 3
61510: MINUS
61511: PUSH
61512: LD_VAR 0 2
61516: PUSH
61517: LD_INT 3
61519: MINUS
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: ST_TO_ADDR
// end ; 4 :
61536: GO 61817
61538: LD_INT 4
61540: DOUBLE
61541: EQUAL
61542: IFTRUE 61546
61544: GO 61679
61546: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61547: LD_ADDR_VAR 0 5
61551: PUSH
61552: LD_VAR 0 1
61556: PUSH
61557: LD_VAR 0 2
61561: PUSH
61562: LD_INT 4
61564: PLUS
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: LIST
61573: PUSH
61574: LD_VAR 0 1
61578: PUSH
61579: LD_INT 3
61581: PLUS
61582: PUSH
61583: LD_VAR 0 2
61587: PUSH
61588: LD_INT 3
61590: PLUS
61591: PUSH
61592: LD_INT 5
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: LIST
61599: PUSH
61600: LD_VAR 0 1
61604: PUSH
61605: LD_INT 4
61607: PLUS
61608: PUSH
61609: LD_VAR 0 2
61613: PUSH
61614: LD_INT 4
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: LIST
61621: PUSH
61622: LD_VAR 0 1
61626: PUSH
61627: LD_VAR 0 2
61631: PUSH
61632: LD_INT 3
61634: MINUS
61635: PUSH
61636: LD_INT 3
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: PUSH
61644: LD_VAR 0 1
61648: PUSH
61649: LD_INT 4
61651: MINUS
61652: PUSH
61653: LD_VAR 0 2
61657: PUSH
61658: LD_INT 4
61660: MINUS
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: LIST
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// end ; 5 :
61677: GO 61817
61679: LD_INT 5
61681: DOUBLE
61682: EQUAL
61683: IFTRUE 61687
61685: GO 61816
61687: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61688: LD_ADDR_VAR 0 5
61692: PUSH
61693: LD_VAR 0 1
61697: PUSH
61698: LD_INT 4
61700: MINUS
61701: PUSH
61702: LD_VAR 0 2
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: LIST
61714: PUSH
61715: LD_VAR 0 1
61719: PUSH
61720: LD_VAR 0 2
61724: PUSH
61725: LD_INT 4
61727: MINUS
61728: PUSH
61729: LD_INT 3
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: PUSH
61737: LD_VAR 0 1
61741: PUSH
61742: LD_INT 4
61744: PLUS
61745: PUSH
61746: LD_VAR 0 2
61750: PUSH
61751: LD_INT 4
61753: PLUS
61754: PUSH
61755: LD_INT 5
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: LIST
61762: PUSH
61763: LD_VAR 0 1
61767: PUSH
61768: LD_INT 3
61770: PLUS
61771: PUSH
61772: LD_VAR 0 2
61776: PUSH
61777: LD_INT 4
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: PUSH
61785: LD_VAR 0 1
61789: PUSH
61790: LD_VAR 0 2
61794: PUSH
61795: LD_INT 3
61797: PLUS
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: LIST
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: ST_TO_ADDR
// end ; end ;
61814: GO 61817
61816: POP
// result := list ;
61817: LD_ADDR_VAR 0 4
61821: PUSH
61822: LD_VAR 0 5
61826: ST_TO_ADDR
// end ;
61827: LD_VAR 0 4
61831: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61832: LD_INT 0
61834: PPUSH
61835: PPUSH
61836: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61837: LD_VAR 0 1
61841: NOT
61842: PUSH
61843: LD_VAR 0 2
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 2
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: LD_INT 4
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: IN
61866: NOT
61867: OR
61868: IFFALSE 61872
// exit ;
61870: GO 61964
// tmp := [ ] ;
61872: LD_ADDR_VAR 0 5
61876: PUSH
61877: EMPTY
61878: ST_TO_ADDR
// for i in units do
61879: LD_ADDR_VAR 0 4
61883: PUSH
61884: LD_VAR 0 1
61888: PUSH
61889: FOR_IN
61890: IFFALSE 61933
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61892: LD_ADDR_VAR 0 5
61896: PUSH
61897: LD_VAR 0 5
61901: PPUSH
61902: LD_VAR 0 5
61906: PUSH
61907: LD_INT 1
61909: PLUS
61910: PPUSH
61911: LD_VAR 0 4
61915: PPUSH
61916: LD_VAR 0 2
61920: PPUSH
61921: CALL_OW 259
61925: PPUSH
61926: CALL_OW 2
61930: ST_TO_ADDR
61931: GO 61889
61933: POP
61934: POP
// if not tmp then
61935: LD_VAR 0 5
61939: NOT
61940: IFFALSE 61944
// exit ;
61942: GO 61964
// result := SortListByListDesc ( units , tmp ) ;
61944: LD_ADDR_VAR 0 3
61948: PUSH
61949: LD_VAR 0 1
61953: PPUSH
61954: LD_VAR 0 5
61958: PPUSH
61959: CALL_OW 77
61963: ST_TO_ADDR
// end ;
61964: LD_VAR 0 3
61968: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61969: LD_INT 0
61971: PPUSH
61972: PPUSH
61973: PPUSH
// result := false ;
61974: LD_ADDR_VAR 0 3
61978: PUSH
61979: LD_INT 0
61981: ST_TO_ADDR
// x := GetX ( building ) ;
61982: LD_ADDR_VAR 0 4
61986: PUSH
61987: LD_VAR 0 2
61991: PPUSH
61992: CALL_OW 250
61996: ST_TO_ADDR
// y := GetY ( building ) ;
61997: LD_ADDR_VAR 0 5
62001: PUSH
62002: LD_VAR 0 2
62006: PPUSH
62007: CALL_OW 251
62011: ST_TO_ADDR
// if not building or not x or not y then
62012: LD_VAR 0 2
62016: NOT
62017: PUSH
62018: LD_VAR 0 4
62022: NOT
62023: OR
62024: PUSH
62025: LD_VAR 0 5
62029: NOT
62030: OR
62031: IFFALSE 62035
// exit ;
62033: GO 62127
// if GetTaskList ( unit ) then
62035: LD_VAR 0 1
62039: PPUSH
62040: CALL_OW 437
62044: IFFALSE 62127
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62046: LD_STRING e
62048: PUSH
62049: LD_VAR 0 1
62053: PPUSH
62054: CALL_OW 437
62058: PUSH
62059: LD_INT 1
62061: ARRAY
62062: PUSH
62063: LD_INT 1
62065: ARRAY
62066: EQUAL
62067: PUSH
62068: LD_VAR 0 4
62072: PUSH
62073: LD_VAR 0 1
62077: PPUSH
62078: CALL_OW 437
62082: PUSH
62083: LD_INT 1
62085: ARRAY
62086: PUSH
62087: LD_INT 2
62089: ARRAY
62090: EQUAL
62091: AND
62092: PUSH
62093: LD_VAR 0 5
62097: PUSH
62098: LD_VAR 0 1
62102: PPUSH
62103: CALL_OW 437
62107: PUSH
62108: LD_INT 1
62110: ARRAY
62111: PUSH
62112: LD_INT 3
62114: ARRAY
62115: EQUAL
62116: AND
62117: IFFALSE 62127
// result := true end ;
62119: LD_ADDR_VAR 0 3
62123: PUSH
62124: LD_INT 1
62126: ST_TO_ADDR
// end ;
62127: LD_VAR 0 3
62131: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62132: LD_INT 0
62134: PPUSH
// result := false ;
62135: LD_ADDR_VAR 0 4
62139: PUSH
62140: LD_INT 0
62142: ST_TO_ADDR
// if GetTaskList ( unit ) then
62143: LD_VAR 0 1
62147: PPUSH
62148: CALL_OW 437
62152: IFFALSE 62235
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62154: LD_STRING M
62156: PUSH
62157: LD_VAR 0 1
62161: PPUSH
62162: CALL_OW 437
62166: PUSH
62167: LD_INT 1
62169: ARRAY
62170: PUSH
62171: LD_INT 1
62173: ARRAY
62174: EQUAL
62175: PUSH
62176: LD_VAR 0 2
62180: PUSH
62181: LD_VAR 0 1
62185: PPUSH
62186: CALL_OW 437
62190: PUSH
62191: LD_INT 1
62193: ARRAY
62194: PUSH
62195: LD_INT 2
62197: ARRAY
62198: EQUAL
62199: AND
62200: PUSH
62201: LD_VAR 0 3
62205: PUSH
62206: LD_VAR 0 1
62210: PPUSH
62211: CALL_OW 437
62215: PUSH
62216: LD_INT 1
62218: ARRAY
62219: PUSH
62220: LD_INT 3
62222: ARRAY
62223: EQUAL
62224: AND
62225: IFFALSE 62235
// result := true ;
62227: LD_ADDR_VAR 0 4
62231: PUSH
62232: LD_INT 1
62234: ST_TO_ADDR
// end ; end ;
62235: LD_VAR 0 4
62239: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62240: LD_INT 0
62242: PPUSH
62243: PPUSH
62244: PPUSH
62245: PPUSH
// if not unit or not area then
62246: LD_VAR 0 1
62250: NOT
62251: PUSH
62252: LD_VAR 0 2
62256: NOT
62257: OR
62258: IFFALSE 62262
// exit ;
62260: GO 62426
// tmp := AreaToList ( area , i ) ;
62262: LD_ADDR_VAR 0 6
62266: PUSH
62267: LD_VAR 0 2
62271: PPUSH
62272: LD_VAR 0 5
62276: PPUSH
62277: CALL_OW 517
62281: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62282: LD_ADDR_VAR 0 5
62286: PUSH
62287: DOUBLE
62288: LD_INT 1
62290: DEC
62291: ST_TO_ADDR
62292: LD_VAR 0 6
62296: PUSH
62297: LD_INT 1
62299: ARRAY
62300: PUSH
62301: FOR_TO
62302: IFFALSE 62424
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62304: LD_ADDR_VAR 0 7
62308: PUSH
62309: LD_VAR 0 6
62313: PUSH
62314: LD_INT 1
62316: ARRAY
62317: PUSH
62318: LD_VAR 0 5
62322: ARRAY
62323: PUSH
62324: LD_VAR 0 6
62328: PUSH
62329: LD_INT 2
62331: ARRAY
62332: PUSH
62333: LD_VAR 0 5
62337: ARRAY
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62343: LD_VAR 0 7
62347: PUSH
62348: LD_INT 1
62350: ARRAY
62351: PPUSH
62352: LD_VAR 0 7
62356: PUSH
62357: LD_INT 2
62359: ARRAY
62360: PPUSH
62361: CALL_OW 428
62365: PUSH
62366: LD_INT 0
62368: EQUAL
62369: IFFALSE 62422
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62371: LD_VAR 0 1
62375: PPUSH
62376: LD_VAR 0 7
62380: PUSH
62381: LD_INT 1
62383: ARRAY
62384: PPUSH
62385: LD_VAR 0 7
62389: PUSH
62390: LD_INT 2
62392: ARRAY
62393: PPUSH
62394: LD_VAR 0 3
62398: PPUSH
62399: CALL_OW 48
// result := IsPlaced ( unit ) ;
62403: LD_ADDR_VAR 0 4
62407: PUSH
62408: LD_VAR 0 1
62412: PPUSH
62413: CALL_OW 305
62417: ST_TO_ADDR
// exit ;
62418: POP
62419: POP
62420: GO 62426
// end ; end ;
62422: GO 62301
62424: POP
62425: POP
// end ;
62426: LD_VAR 0 4
62430: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62431: LD_INT 0
62433: PPUSH
62434: PPUSH
62435: PPUSH
// if not side or side > 8 then
62436: LD_VAR 0 1
62440: NOT
62441: PUSH
62442: LD_VAR 0 1
62446: PUSH
62447: LD_INT 8
62449: GREATER
62450: OR
62451: IFFALSE 62455
// exit ;
62453: GO 62642
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62455: LD_ADDR_VAR 0 4
62459: PUSH
62460: LD_INT 22
62462: PUSH
62463: LD_VAR 0 1
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 21
62474: PUSH
62475: LD_INT 3
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PPUSH
62486: CALL_OW 69
62490: ST_TO_ADDR
// if not tmp then
62491: LD_VAR 0 4
62495: NOT
62496: IFFALSE 62500
// exit ;
62498: GO 62642
// enable_addtolog := true ;
62500: LD_ADDR_OWVAR 81
62504: PUSH
62505: LD_INT 1
62507: ST_TO_ADDR
// AddToLog ( [ ) ;
62508: LD_STRING [
62510: PPUSH
62511: CALL_OW 561
// for i in tmp do
62515: LD_ADDR_VAR 0 3
62519: PUSH
62520: LD_VAR 0 4
62524: PUSH
62525: FOR_IN
62526: IFFALSE 62633
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62528: LD_STRING [
62530: PUSH
62531: LD_VAR 0 3
62535: PPUSH
62536: CALL_OW 266
62540: STR
62541: PUSH
62542: LD_STRING , 
62544: STR
62545: PUSH
62546: LD_VAR 0 3
62550: PPUSH
62551: CALL_OW 250
62555: STR
62556: PUSH
62557: LD_STRING , 
62559: STR
62560: PUSH
62561: LD_VAR 0 3
62565: PPUSH
62566: CALL_OW 251
62570: STR
62571: PUSH
62572: LD_STRING , 
62574: STR
62575: PUSH
62576: LD_VAR 0 3
62580: PPUSH
62581: CALL_OW 254
62585: STR
62586: PUSH
62587: LD_STRING , 
62589: STR
62590: PUSH
62591: LD_VAR 0 3
62595: PPUSH
62596: LD_INT 1
62598: PPUSH
62599: CALL_OW 268
62603: STR
62604: PUSH
62605: LD_STRING , 
62607: STR
62608: PUSH
62609: LD_VAR 0 3
62613: PPUSH
62614: LD_INT 2
62616: PPUSH
62617: CALL_OW 268
62621: STR
62622: PUSH
62623: LD_STRING ],
62625: STR
62626: PPUSH
62627: CALL_OW 561
// end ;
62631: GO 62525
62633: POP
62634: POP
// AddToLog ( ]; ) ;
62635: LD_STRING ];
62637: PPUSH
62638: CALL_OW 561
// end ;
62642: LD_VAR 0 2
62646: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62647: LD_INT 0
62649: PPUSH
62650: PPUSH
62651: PPUSH
62652: PPUSH
62653: PPUSH
// if not area or not rate or not max then
62654: LD_VAR 0 1
62658: NOT
62659: PUSH
62660: LD_VAR 0 2
62664: NOT
62665: OR
62666: PUSH
62667: LD_VAR 0 4
62671: NOT
62672: OR
62673: IFFALSE 62677
// exit ;
62675: GO 62869
// while 1 do
62677: LD_INT 1
62679: IFFALSE 62869
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62681: LD_ADDR_VAR 0 9
62685: PUSH
62686: LD_VAR 0 1
62690: PPUSH
62691: LD_INT 1
62693: PPUSH
62694: CALL_OW 287
62698: PUSH
62699: LD_INT 10
62701: MUL
62702: ST_TO_ADDR
// r := rate / 10 ;
62703: LD_ADDR_VAR 0 7
62707: PUSH
62708: LD_VAR 0 2
62712: PUSH
62713: LD_INT 10
62715: DIVREAL
62716: ST_TO_ADDR
// time := 1 1$00 ;
62717: LD_ADDR_VAR 0 8
62721: PUSH
62722: LD_INT 2100
62724: ST_TO_ADDR
// if amount < min then
62725: LD_VAR 0 9
62729: PUSH
62730: LD_VAR 0 3
62734: LESS
62735: IFFALSE 62753
// r := r * 2 else
62737: LD_ADDR_VAR 0 7
62741: PUSH
62742: LD_VAR 0 7
62746: PUSH
62747: LD_INT 2
62749: MUL
62750: ST_TO_ADDR
62751: GO 62779
// if amount > max then
62753: LD_VAR 0 9
62757: PUSH
62758: LD_VAR 0 4
62762: GREATER
62763: IFFALSE 62779
// r := r / 2 ;
62765: LD_ADDR_VAR 0 7
62769: PUSH
62770: LD_VAR 0 7
62774: PUSH
62775: LD_INT 2
62777: DIVREAL
62778: ST_TO_ADDR
// time := time / r ;
62779: LD_ADDR_VAR 0 8
62783: PUSH
62784: LD_VAR 0 8
62788: PUSH
62789: LD_VAR 0 7
62793: DIVREAL
62794: ST_TO_ADDR
// if time < 0 then
62795: LD_VAR 0 8
62799: PUSH
62800: LD_INT 0
62802: LESS
62803: IFFALSE 62820
// time := time * - 1 ;
62805: LD_ADDR_VAR 0 8
62809: PUSH
62810: LD_VAR 0 8
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: MUL
62819: ST_TO_ADDR
// wait ( time ) ;
62820: LD_VAR 0 8
62824: PPUSH
62825: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62829: LD_INT 35
62831: PPUSH
62832: LD_INT 875
62834: PPUSH
62835: CALL_OW 12
62839: PPUSH
62840: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62844: LD_INT 1
62846: PPUSH
62847: LD_INT 5
62849: PPUSH
62850: CALL_OW 12
62854: PPUSH
62855: LD_VAR 0 1
62859: PPUSH
62860: LD_INT 1
62862: PPUSH
62863: CALL_OW 55
// end ;
62867: GO 62677
// end ;
62869: LD_VAR 0 5
62873: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62874: LD_INT 0
62876: PPUSH
62877: PPUSH
62878: PPUSH
62879: PPUSH
62880: PPUSH
62881: PPUSH
62882: PPUSH
62883: PPUSH
// if not turrets or not factories then
62884: LD_VAR 0 1
62888: NOT
62889: PUSH
62890: LD_VAR 0 2
62894: NOT
62895: OR
62896: IFFALSE 62900
// exit ;
62898: GO 63207
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62900: LD_ADDR_VAR 0 10
62904: PUSH
62905: LD_INT 5
62907: PUSH
62908: LD_INT 6
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: LD_INT 4
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 3
62927: PUSH
62928: LD_INT 5
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 24
62942: PUSH
62943: LD_INT 25
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 23
62952: PUSH
62953: LD_INT 27
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 42
62966: PUSH
62967: LD_INT 43
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 44
62976: PUSH
62977: LD_INT 46
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 45
62986: PUSH
62987: LD_INT 47
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: LIST
63003: ST_TO_ADDR
// result := [ ] ;
63004: LD_ADDR_VAR 0 3
63008: PUSH
63009: EMPTY
63010: ST_TO_ADDR
// for i in turrets do
63011: LD_ADDR_VAR 0 4
63015: PUSH
63016: LD_VAR 0 1
63020: PUSH
63021: FOR_IN
63022: IFFALSE 63205
// begin nat := GetNation ( i ) ;
63024: LD_ADDR_VAR 0 7
63028: PUSH
63029: LD_VAR 0 4
63033: PPUSH
63034: CALL_OW 248
63038: ST_TO_ADDR
// weapon := 0 ;
63039: LD_ADDR_VAR 0 8
63043: PUSH
63044: LD_INT 0
63046: ST_TO_ADDR
// if not nat then
63047: LD_VAR 0 7
63051: NOT
63052: IFFALSE 63056
// continue ;
63054: GO 63021
// for j in list [ nat ] do
63056: LD_ADDR_VAR 0 5
63060: PUSH
63061: LD_VAR 0 10
63065: PUSH
63066: LD_VAR 0 7
63070: ARRAY
63071: PUSH
63072: FOR_IN
63073: IFFALSE 63114
// if GetBWeapon ( i ) = j [ 1 ] then
63075: LD_VAR 0 4
63079: PPUSH
63080: CALL_OW 269
63084: PUSH
63085: LD_VAR 0 5
63089: PUSH
63090: LD_INT 1
63092: ARRAY
63093: EQUAL
63094: IFFALSE 63112
// begin weapon := j [ 2 ] ;
63096: LD_ADDR_VAR 0 8
63100: PUSH
63101: LD_VAR 0 5
63105: PUSH
63106: LD_INT 2
63108: ARRAY
63109: ST_TO_ADDR
// break ;
63110: GO 63114
// end ;
63112: GO 63072
63114: POP
63115: POP
// if not weapon then
63116: LD_VAR 0 8
63120: NOT
63121: IFFALSE 63125
// continue ;
63123: GO 63021
// for k in factories do
63125: LD_ADDR_VAR 0 6
63129: PUSH
63130: LD_VAR 0 2
63134: PUSH
63135: FOR_IN
63136: IFFALSE 63201
// begin weapons := AvailableWeaponList ( k ) ;
63138: LD_ADDR_VAR 0 9
63142: PUSH
63143: LD_VAR 0 6
63147: PPUSH
63148: CALL_OW 478
63152: ST_TO_ADDR
// if not weapons then
63153: LD_VAR 0 9
63157: NOT
63158: IFFALSE 63162
// continue ;
63160: GO 63135
// if weapon in weapons then
63162: LD_VAR 0 8
63166: PUSH
63167: LD_VAR 0 9
63171: IN
63172: IFFALSE 63199
// begin result := [ i , weapon ] ;
63174: LD_ADDR_VAR 0 3
63178: PUSH
63179: LD_VAR 0 4
63183: PUSH
63184: LD_VAR 0 8
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: ST_TO_ADDR
// exit ;
63193: POP
63194: POP
63195: POP
63196: POP
63197: GO 63207
// end ; end ;
63199: GO 63135
63201: POP
63202: POP
// end ;
63203: GO 63021
63205: POP
63206: POP
// end ;
63207: LD_VAR 0 3
63211: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63212: LD_INT 0
63214: PPUSH
// if not side or side > 8 then
63215: LD_VAR 0 3
63219: NOT
63220: PUSH
63221: LD_VAR 0 3
63225: PUSH
63226: LD_INT 8
63228: GREATER
63229: OR
63230: IFFALSE 63234
// exit ;
63232: GO 63293
// if not range then
63234: LD_VAR 0 4
63238: NOT
63239: IFFALSE 63250
// range := - 12 ;
63241: LD_ADDR_VAR 0 4
63245: PUSH
63246: LD_INT 12
63248: NEG
63249: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63250: LD_VAR 0 1
63254: PPUSH
63255: LD_VAR 0 2
63259: PPUSH
63260: LD_VAR 0 3
63264: PPUSH
63265: LD_VAR 0 4
63269: PPUSH
63270: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63274: LD_VAR 0 1
63278: PPUSH
63279: LD_VAR 0 2
63283: PPUSH
63284: LD_VAR 0 3
63288: PPUSH
63289: CALL_OW 331
// end ;
63293: LD_VAR 0 5
63297: RET
// export function Video ( mode ) ; begin
63298: LD_INT 0
63300: PPUSH
// ingame_video = mode ;
63301: LD_ADDR_OWVAR 52
63305: PUSH
63306: LD_VAR 0 1
63310: ST_TO_ADDR
// interface_hidden = mode ;
63311: LD_ADDR_OWVAR 54
63315: PUSH
63316: LD_VAR 0 1
63320: ST_TO_ADDR
// end ;
63321: LD_VAR 0 2
63325: RET
// export function Join ( array , element ) ; begin
63326: LD_INT 0
63328: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63329: LD_ADDR_VAR 0 3
63333: PUSH
63334: LD_VAR 0 1
63338: PPUSH
63339: LD_VAR 0 1
63343: PUSH
63344: LD_INT 1
63346: PLUS
63347: PPUSH
63348: LD_VAR 0 2
63352: PPUSH
63353: CALL_OW 1
63357: ST_TO_ADDR
// end ;
63358: LD_VAR 0 3
63362: RET
// export function JoinUnion ( array , element ) ; begin
63363: LD_INT 0
63365: PPUSH
// result := array union element ;
63366: LD_ADDR_VAR 0 3
63370: PUSH
63371: LD_VAR 0 1
63375: PUSH
63376: LD_VAR 0 2
63380: UNION
63381: ST_TO_ADDR
// end ;
63382: LD_VAR 0 3
63386: RET
// export function GetBehemoths ( side ) ; begin
63387: LD_INT 0
63389: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63390: LD_ADDR_VAR 0 2
63394: PUSH
63395: LD_INT 22
63397: PUSH
63398: LD_VAR 0 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 31
63409: PUSH
63410: LD_INT 25
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PPUSH
63421: CALL_OW 69
63425: ST_TO_ADDR
// end ;
63426: LD_VAR 0 2
63430: RET
// export function Shuffle ( array ) ; var i , index ; begin
63431: LD_INT 0
63433: PPUSH
63434: PPUSH
63435: PPUSH
// result := [ ] ;
63436: LD_ADDR_VAR 0 2
63440: PUSH
63441: EMPTY
63442: ST_TO_ADDR
// if not array then
63443: LD_VAR 0 1
63447: NOT
63448: IFFALSE 63452
// exit ;
63450: GO 63551
// Randomize ;
63452: CALL_OW 10
// for i = array downto 1 do
63456: LD_ADDR_VAR 0 3
63460: PUSH
63461: DOUBLE
63462: LD_VAR 0 1
63466: INC
63467: ST_TO_ADDR
63468: LD_INT 1
63470: PUSH
63471: FOR_DOWNTO
63472: IFFALSE 63549
// begin index := rand ( 1 , array ) ;
63474: LD_ADDR_VAR 0 4
63478: PUSH
63479: LD_INT 1
63481: PPUSH
63482: LD_VAR 0 1
63486: PPUSH
63487: CALL_OW 12
63491: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63492: LD_ADDR_VAR 0 2
63496: PUSH
63497: LD_VAR 0 2
63501: PPUSH
63502: LD_VAR 0 2
63506: PUSH
63507: LD_INT 1
63509: PLUS
63510: PPUSH
63511: LD_VAR 0 1
63515: PUSH
63516: LD_VAR 0 4
63520: ARRAY
63521: PPUSH
63522: CALL_OW 2
63526: ST_TO_ADDR
// array := Delete ( array , index ) ;
63527: LD_ADDR_VAR 0 1
63531: PUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: LD_VAR 0 4
63541: PPUSH
63542: CALL_OW 3
63546: ST_TO_ADDR
// end ;
63547: GO 63471
63549: POP
63550: POP
// end ;
63551: LD_VAR 0 2
63555: RET
// export function GetBaseMaterials ( base ) ; begin
63556: LD_INT 0
63558: PPUSH
// result := [ 0 , 0 , 0 ] ;
63559: LD_ADDR_VAR 0 2
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: LIST
63577: ST_TO_ADDR
// if not base then
63578: LD_VAR 0 1
63582: NOT
63583: IFFALSE 63587
// exit ;
63585: GO 63636
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63587: LD_ADDR_VAR 0 2
63591: PUSH
63592: LD_VAR 0 1
63596: PPUSH
63597: LD_INT 1
63599: PPUSH
63600: CALL_OW 275
63604: PUSH
63605: LD_VAR 0 1
63609: PPUSH
63610: LD_INT 2
63612: PPUSH
63613: CALL_OW 275
63617: PUSH
63618: LD_VAR 0 1
63622: PPUSH
63623: LD_INT 3
63625: PPUSH
63626: CALL_OW 275
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: ST_TO_ADDR
// end ;
63636: LD_VAR 0 2
63640: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63641: LD_INT 0
63643: PPUSH
63644: PPUSH
// result := array ;
63645: LD_ADDR_VAR 0 3
63649: PUSH
63650: LD_VAR 0 1
63654: ST_TO_ADDR
// if size > 0 then
63655: LD_VAR 0 2
63659: PUSH
63660: LD_INT 0
63662: GREATER
63663: IFFALSE 63709
// for i := array downto size do
63665: LD_ADDR_VAR 0 4
63669: PUSH
63670: DOUBLE
63671: LD_VAR 0 1
63675: INC
63676: ST_TO_ADDR
63677: LD_VAR 0 2
63681: PUSH
63682: FOR_DOWNTO
63683: IFFALSE 63707
// result := Delete ( result , result ) ;
63685: LD_ADDR_VAR 0 3
63689: PUSH
63690: LD_VAR 0 3
63694: PPUSH
63695: LD_VAR 0 3
63699: PPUSH
63700: CALL_OW 3
63704: ST_TO_ADDR
63705: GO 63682
63707: POP
63708: POP
// end ;
63709: LD_VAR 0 3
63713: RET
// export function ComExit ( unit ) ; var tmp ; begin
63714: LD_INT 0
63716: PPUSH
63717: PPUSH
// if not IsInUnit ( unit ) then
63718: LD_VAR 0 1
63722: PPUSH
63723: CALL_OW 310
63727: NOT
63728: IFFALSE 63732
// exit ;
63730: GO 63792
// tmp := IsInUnit ( unit ) ;
63732: LD_ADDR_VAR 0 3
63736: PUSH
63737: LD_VAR 0 1
63741: PPUSH
63742: CALL_OW 310
63746: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63747: LD_VAR 0 3
63751: PPUSH
63752: CALL_OW 247
63756: PUSH
63757: LD_INT 2
63759: EQUAL
63760: IFFALSE 63773
// ComExitVehicle ( unit ) else
63762: LD_VAR 0 1
63766: PPUSH
63767: CALL_OW 121
63771: GO 63782
// ComExitBuilding ( unit ) ;
63773: LD_VAR 0 1
63777: PPUSH
63778: CALL_OW 122
// result := tmp ;
63782: LD_ADDR_VAR 0 2
63786: PUSH
63787: LD_VAR 0 3
63791: ST_TO_ADDR
// end ;
63792: LD_VAR 0 2
63796: RET
// export function ComExitAll ( units ) ; var i ; begin
63797: LD_INT 0
63799: PPUSH
63800: PPUSH
// if not units then
63801: LD_VAR 0 1
63805: NOT
63806: IFFALSE 63810
// exit ;
63808: GO 63836
// for i in units do
63810: LD_ADDR_VAR 0 3
63814: PUSH
63815: LD_VAR 0 1
63819: PUSH
63820: FOR_IN
63821: IFFALSE 63834
// ComExit ( i ) ;
63823: LD_VAR 0 3
63827: PPUSH
63828: CALL 63714 0 1
63832: GO 63820
63834: POP
63835: POP
// end ;
63836: LD_VAR 0 2
63840: RET
// export function ResetHc ; begin
63841: LD_INT 0
63843: PPUSH
// InitHc ;
63844: CALL_OW 19
// hc_importance := 0 ;
63848: LD_ADDR_OWVAR 32
63852: PUSH
63853: LD_INT 0
63855: ST_TO_ADDR
// end ;
63856: LD_VAR 0 1
63860: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63861: LD_INT 0
63863: PPUSH
63864: PPUSH
63865: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63866: LD_ADDR_VAR 0 6
63870: PUSH
63871: LD_VAR 0 1
63875: PUSH
63876: LD_VAR 0 3
63880: PLUS
63881: PUSH
63882: LD_INT 2
63884: DIV
63885: ST_TO_ADDR
// if _x < 0 then
63886: LD_VAR 0 6
63890: PUSH
63891: LD_INT 0
63893: LESS
63894: IFFALSE 63911
// _x := _x * - 1 ;
63896: LD_ADDR_VAR 0 6
63900: PUSH
63901: LD_VAR 0 6
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: MUL
63910: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63911: LD_ADDR_VAR 0 7
63915: PUSH
63916: LD_VAR 0 2
63920: PUSH
63921: LD_VAR 0 4
63925: PLUS
63926: PUSH
63927: LD_INT 2
63929: DIV
63930: ST_TO_ADDR
// if _y < 0 then
63931: LD_VAR 0 7
63935: PUSH
63936: LD_INT 0
63938: LESS
63939: IFFALSE 63956
// _y := _y * - 1 ;
63941: LD_ADDR_VAR 0 7
63945: PUSH
63946: LD_VAR 0 7
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: MUL
63955: ST_TO_ADDR
// result := [ _x , _y ] ;
63956: LD_ADDR_VAR 0 5
63960: PUSH
63961: LD_VAR 0 6
63965: PUSH
63966: LD_VAR 0 7
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: ST_TO_ADDR
// end ;
63975: LD_VAR 0 5
63979: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63980: LD_INT 0
63982: PPUSH
63983: PPUSH
63984: PPUSH
63985: PPUSH
// task := GetTaskList ( unit ) ;
63986: LD_ADDR_VAR 0 7
63990: PUSH
63991: LD_VAR 0 1
63995: PPUSH
63996: CALL_OW 437
64000: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64001: LD_VAR 0 7
64005: NOT
64006: PUSH
64007: LD_VAR 0 1
64011: PPUSH
64012: LD_VAR 0 2
64016: PPUSH
64017: CALL_OW 308
64021: NOT
64022: AND
64023: IFFALSE 64027
// exit ;
64025: GO 64145
// if IsInArea ( unit , area ) then
64027: LD_VAR 0 1
64031: PPUSH
64032: LD_VAR 0 2
64036: PPUSH
64037: CALL_OW 308
64041: IFFALSE 64059
// begin ComMoveToArea ( unit , goAway ) ;
64043: LD_VAR 0 1
64047: PPUSH
64048: LD_VAR 0 3
64052: PPUSH
64053: CALL_OW 113
// exit ;
64057: GO 64145
// end ; if task [ 1 ] [ 1 ] <> M then
64059: LD_VAR 0 7
64063: PUSH
64064: LD_INT 1
64066: ARRAY
64067: PUSH
64068: LD_INT 1
64070: ARRAY
64071: PUSH
64072: LD_STRING M
64074: NONEQUAL
64075: IFFALSE 64079
// exit ;
64077: GO 64145
// x := task [ 1 ] [ 2 ] ;
64079: LD_ADDR_VAR 0 5
64083: PUSH
64084: LD_VAR 0 7
64088: PUSH
64089: LD_INT 1
64091: ARRAY
64092: PUSH
64093: LD_INT 2
64095: ARRAY
64096: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64097: LD_ADDR_VAR 0 6
64101: PUSH
64102: LD_VAR 0 7
64106: PUSH
64107: LD_INT 1
64109: ARRAY
64110: PUSH
64111: LD_INT 3
64113: ARRAY
64114: ST_TO_ADDR
// if InArea ( x , y , area ) then
64115: LD_VAR 0 5
64119: PPUSH
64120: LD_VAR 0 6
64124: PPUSH
64125: LD_VAR 0 2
64129: PPUSH
64130: CALL_OW 309
64134: IFFALSE 64145
// ComStop ( unit ) ;
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL_OW 141
// end ;
64145: LD_VAR 0 4
64149: RET
// export function Abs ( value ) ; begin
64150: LD_INT 0
64152: PPUSH
// result := value ;
64153: LD_ADDR_VAR 0 2
64157: PUSH
64158: LD_VAR 0 1
64162: ST_TO_ADDR
// if value < 0 then
64163: LD_VAR 0 1
64167: PUSH
64168: LD_INT 0
64170: LESS
64171: IFFALSE 64188
// result := value * - 1 ;
64173: LD_ADDR_VAR 0 2
64177: PUSH
64178: LD_VAR 0 1
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: MUL
64187: ST_TO_ADDR
// end ;
64188: LD_VAR 0 2
64192: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64193: LD_INT 0
64195: PPUSH
64196: PPUSH
64197: PPUSH
64198: PPUSH
64199: PPUSH
64200: PPUSH
64201: PPUSH
64202: PPUSH
// if not unit or not building then
64203: LD_VAR 0 1
64207: NOT
64208: PUSH
64209: LD_VAR 0 2
64213: NOT
64214: OR
64215: IFFALSE 64219
// exit ;
64217: GO 64445
// x := GetX ( building ) ;
64219: LD_ADDR_VAR 0 4
64223: PUSH
64224: LD_VAR 0 2
64228: PPUSH
64229: CALL_OW 250
64233: ST_TO_ADDR
// y := GetY ( building ) ;
64234: LD_ADDR_VAR 0 6
64238: PUSH
64239: LD_VAR 0 2
64243: PPUSH
64244: CALL_OW 251
64248: ST_TO_ADDR
// d := GetDir ( building ) ;
64249: LD_ADDR_VAR 0 8
64253: PUSH
64254: LD_VAR 0 2
64258: PPUSH
64259: CALL_OW 254
64263: ST_TO_ADDR
// r := 4 ;
64264: LD_ADDR_VAR 0 9
64268: PUSH
64269: LD_INT 4
64271: ST_TO_ADDR
// for i := 1 to 5 do
64272: LD_ADDR_VAR 0 10
64276: PUSH
64277: DOUBLE
64278: LD_INT 1
64280: DEC
64281: ST_TO_ADDR
64282: LD_INT 5
64284: PUSH
64285: FOR_TO
64286: IFFALSE 64443
// begin _x := ShiftX ( x , d , r + i ) ;
64288: LD_ADDR_VAR 0 5
64292: PUSH
64293: LD_VAR 0 4
64297: PPUSH
64298: LD_VAR 0 8
64302: PPUSH
64303: LD_VAR 0 9
64307: PUSH
64308: LD_VAR 0 10
64312: PLUS
64313: PPUSH
64314: CALL_OW 272
64318: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64319: LD_ADDR_VAR 0 7
64323: PUSH
64324: LD_VAR 0 6
64328: PPUSH
64329: LD_VAR 0 8
64333: PPUSH
64334: LD_VAR 0 9
64338: PUSH
64339: LD_VAR 0 10
64343: PLUS
64344: PPUSH
64345: CALL_OW 273
64349: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64350: LD_VAR 0 5
64354: PPUSH
64355: LD_VAR 0 7
64359: PPUSH
64360: CALL_OW 488
64364: PUSH
64365: LD_VAR 0 5
64369: PPUSH
64370: LD_VAR 0 7
64374: PPUSH
64375: CALL_OW 428
64379: PPUSH
64380: CALL_OW 247
64384: PUSH
64385: LD_INT 3
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: IN
64395: NOT
64396: AND
64397: IFFALSE 64441
// begin ComMoveXY ( unit , _x , _y ) ;
64399: LD_VAR 0 1
64403: PPUSH
64404: LD_VAR 0 5
64408: PPUSH
64409: LD_VAR 0 7
64413: PPUSH
64414: CALL_OW 111
// result := [ _x , _y ] ;
64418: LD_ADDR_VAR 0 3
64422: PUSH
64423: LD_VAR 0 5
64427: PUSH
64428: LD_VAR 0 7
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: ST_TO_ADDR
// exit ;
64437: POP
64438: POP
64439: GO 64445
// end ; end ;
64441: GO 64285
64443: POP
64444: POP
// end ;
64445: LD_VAR 0 3
64449: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64450: LD_INT 0
64452: PPUSH
64453: PPUSH
64454: PPUSH
// result := 0 ;
64455: LD_ADDR_VAR 0 3
64459: PUSH
64460: LD_INT 0
64462: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64463: LD_VAR 0 1
64467: PUSH
64468: LD_INT 0
64470: LESS
64471: PUSH
64472: LD_VAR 0 1
64476: PUSH
64477: LD_INT 8
64479: GREATER
64480: OR
64481: PUSH
64482: LD_VAR 0 2
64486: PUSH
64487: LD_INT 0
64489: LESS
64490: OR
64491: PUSH
64492: LD_VAR 0 2
64496: PUSH
64497: LD_INT 8
64499: GREATER
64500: OR
64501: IFFALSE 64505
// exit ;
64503: GO 64580
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64505: LD_ADDR_VAR 0 4
64509: PUSH
64510: LD_INT 22
64512: PUSH
64513: LD_VAR 0 2
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PPUSH
64522: CALL_OW 69
64526: PUSH
64527: FOR_IN
64528: IFFALSE 64578
// begin un := UnitShoot ( i ) ;
64530: LD_ADDR_VAR 0 5
64534: PUSH
64535: LD_VAR 0 4
64539: PPUSH
64540: CALL_OW 504
64544: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64545: LD_VAR 0 5
64549: PPUSH
64550: CALL_OW 255
64554: PUSH
64555: LD_VAR 0 1
64559: EQUAL
64560: IFFALSE 64576
// begin result := un ;
64562: LD_ADDR_VAR 0 3
64566: PUSH
64567: LD_VAR 0 5
64571: ST_TO_ADDR
// exit ;
64572: POP
64573: POP
64574: GO 64580
// end ; end ;
64576: GO 64527
64578: POP
64579: POP
// end ;
64580: LD_VAR 0 3
64584: RET
// export function GetCargoBay ( units ) ; begin
64585: LD_INT 0
64587: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64588: LD_ADDR_VAR 0 2
64592: PUSH
64593: LD_VAR 0 1
64597: PPUSH
64598: LD_INT 2
64600: PUSH
64601: LD_INT 34
64603: PUSH
64604: LD_INT 12
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 34
64613: PUSH
64614: LD_INT 51
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 34
64623: PUSH
64624: LD_INT 32
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 34
64633: PUSH
64634: LD_EXP 111
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: PPUSH
64650: CALL_OW 72
64654: ST_TO_ADDR
// end ; end_of_file
64655: LD_VAR 0 2
64659: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
64660: LD_INT 0
64662: PPUSH
// ar_miner := 81 ;
64663: LD_ADDR_EXP 117
64667: PUSH
64668: LD_INT 81
64670: ST_TO_ADDR
// ar_crane := 88 ;
64671: LD_ADDR_EXP 116
64675: PUSH
64676: LD_INT 88
64678: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
64679: LD_ADDR_EXP 111
64683: PUSH
64684: LD_INT 89
64686: ST_TO_ADDR
// us_hack := 99 ;
64687: LD_ADDR_EXP 112
64691: PUSH
64692: LD_INT 99
64694: ST_TO_ADDR
// us_artillery := 97 ;
64695: LD_ADDR_EXP 113
64699: PUSH
64700: LD_INT 97
64702: ST_TO_ADDR
// ar_bio_bomb := 91 ;
64703: LD_ADDR_EXP 114
64707: PUSH
64708: LD_INT 91
64710: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
64711: LD_ADDR_EXP 115
64715: PUSH
64716: LD_INT 92
64718: ST_TO_ADDR
// ru_radar := 98 ;
64719: LD_ADDR_EXP 110
64723: PUSH
64724: LD_INT 98
64726: ST_TO_ADDR
// tech_Artillery := 80 ;
64727: LD_ADDR_EXP 118
64731: PUSH
64732: LD_INT 80
64734: ST_TO_ADDR
// tech_RadMat := 81 ;
64735: LD_ADDR_EXP 119
64739: PUSH
64740: LD_INT 81
64742: ST_TO_ADDR
// tech_BasicTools := 82 ;
64743: LD_ADDR_EXP 120
64747: PUSH
64748: LD_INT 82
64750: ST_TO_ADDR
// tech_Cargo := 83 ;
64751: LD_ADDR_EXP 121
64755: PUSH
64756: LD_INT 83
64758: ST_TO_ADDR
// tech_Track := 84 ;
64759: LD_ADDR_EXP 122
64763: PUSH
64764: LD_INT 84
64766: ST_TO_ADDR
// tech_Crane := 85 ;
64767: LD_ADDR_EXP 123
64771: PUSH
64772: LD_INT 85
64774: ST_TO_ADDR
// tech_Bulldozer := 86 ;
64775: LD_ADDR_EXP 124
64779: PUSH
64780: LD_INT 86
64782: ST_TO_ADDR
// tech_Hovercraft := 87 ;
64783: LD_ADDR_EXP 125
64787: PUSH
64788: LD_INT 87
64790: ST_TO_ADDR
// class_mastodont := 31 ;
64791: LD_ADDR_EXP 126
64795: PUSH
64796: LD_INT 31
64798: ST_TO_ADDR
// class_horse := 21 ;
64799: LD_ADDR_EXP 127
64803: PUSH
64804: LD_INT 21
64806: ST_TO_ADDR
// end ;
64807: LD_VAR 0 1
64811: RET
// every 1 do
64812: GO 64814
64814: DISABLE
// InitGlobalVariables ; end_of_file
64815: CALL 64660 0 0
64819: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64820: LD_VAR 0 1
64824: PPUSH
64825: LD_VAR 0 2
64829: PPUSH
64830: LD_VAR 0 3
64834: PPUSH
64835: LD_VAR 0 4
64839: PPUSH
64840: LD_VAR 0 5
64844: PPUSH
64845: LD_VAR 0 6
64849: PPUSH
64850: CALL 9654 0 6
// end ;
64854: PPOPN 6
64856: END
