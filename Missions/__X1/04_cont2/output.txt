// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1994 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5594 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 33122 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 27701 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 27701 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 27701 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 27701 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 27701 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 27701 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 27701 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 27701 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 27701 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 27701 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// uc_side := 5 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 5
1542: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1543: LD_ADDR_EXP 26
1547: PUSH
1548: LD_STRING Abdul
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: LD_STRING 
1556: PPUSH
1557: CALL 27701 0 3
1561: ST_TO_ADDR
// end ;
1562: LD_VAR 0 1
1566: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1567: LD_STRING 04_1_KaganCaptured
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 30
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PPUSH
1588: CALL_OW 69
1592: NOT
1593: AND
1594: PUSH
1595: LD_INT 124
1597: PPUSH
1598: LD_INT 26
1600: PPUSH
1601: CALL_OW 428
1605: PUSH
1606: LD_INT 0
1608: EQUAL
1609: PUSH
1610: LD_INT 124
1612: PPUSH
1613: LD_INT 26
1615: PPUSH
1616: CALL_OW 428
1620: PPUSH
1621: CALL_OW 255
1625: PUSH
1626: LD_INT 2
1628: EQUAL
1629: XOR
1630: AND
1631: IFFALSE 1991
1633: GO 1635
1635: DISABLE
1636: LD_INT 0
1638: PPUSH
1639: PPUSH
// begin enable ;
1640: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1641: LD_EXP 33
1645: NOT
1646: PUSH
1647: LD_EXP 33
1651: PUSH
1652: LD_INT 4
1654: GREATER
1655: OR
1656: IFFALSE 1666
// cargoCounter := 1 ;
1658: LD_ADDR_EXP 33
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_INT 142
1673: PUSH
1674: LD_INT 15
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 129
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 138
1693: PUSH
1694: LD_INT 9
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 133
1703: PUSH
1704: LD_INT 10
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: ST_TO_ADDR
// uc_side := 5 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 5
1724: ST_TO_ADDR
// uc_nation := 2 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 2
1732: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1733: LD_INT 5
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 32
1750: PPUSH
1751: LD_INT 70
1753: PPUSH
1754: CALL 336 0 7
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 1
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1768: LD_VAR 0 1
1772: PPUSH
1773: LD_INT 3
1775: PPUSH
1776: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1780: LD_VAR 0 1
1784: PPUSH
1785: LD_INT 8
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// if not cargoDriver then
1795: LD_EXP 32
1799: NOT
1800: IFFALSE 1825
// begin PrepareHuman ( false , 1 , 3 ) ;
1802: LD_INT 0
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: CALL_OW 380
// cargoDriver := CreateHuman ;
1815: LD_ADDR_EXP 32
1819: PUSH
1820: CALL_OW 44
1824: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1825: LD_EXP 32
1829: PPUSH
1830: LD_VAR 0 1
1834: PPUSH
1835: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1839: LD_VAR 0 1
1843: PPUSH
1844: LD_INT 2
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1854: LD_VAR 0 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 33
1868: ARRAY
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 33
1883: ARRAY
1884: PUSH
1885: LD_INT 2
1887: ARRAY
1888: PPUSH
1889: CALL_OW 111
// AddComUnload ( veh ) ;
1893: LD_VAR 0 1
1897: PPUSH
1898: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1902: LD_VAR 0 1
1906: PPUSH
1907: LD_INT 133
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 171
// wait ( 0 0$5 ) ;
1917: LD_INT 175
1919: PPUSH
1920: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1924: LD_INT 35
1926: PPUSH
1927: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1931: LD_VAR 0 1
1935: PPUSH
1936: LD_INT 133
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL_OW 307
1946: PUSH
1947: LD_VAR 0 1
1951: PPUSH
1952: LD_INT 8
1954: PPUSH
1955: CALL_OW 308
1959: OR
1960: IFFALSE 1924
// RemoveUnit ( cargoDriver ) ;
1962: LD_EXP 32
1966: PPUSH
1967: CALL_OW 64
// RemoveUnit ( veh ) ;
1971: LD_VAR 0 1
1975: PPUSH
1976: CALL_OW 64
// if tick >= 20 20$00 then
1980: LD_OWVAR 1
1984: PUSH
1985: LD_INT 42000
1987: GREATEREQUAL
1988: IFFALSE 1991
// disable ;
1990: DISABLE
// end ; end_of_file
1991: PPOPN 2
1993: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1994: LD_INT 0
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
2001: PPUSH
2002: PPUSH
2003: PPUSH
2004: PPUSH
// uc_side := 3 ;
2005: LD_ADDR_OWVAR 20
2009: PUSH
2010: LD_INT 3
2012: ST_TO_ADDR
// uc_nation := 3 ;
2013: LD_ADDR_OWVAR 21
2017: PUSH
2018: LD_INT 3
2020: ST_TO_ADDR
// ruForce := [ ] ;
2021: LD_ADDR_EXP 37
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// ruMech := [ ] ;
2028: LD_ADDR_EXP 39
2032: PUSH
2033: EMPTY
2034: ST_TO_ADDR
// ruEng := [ ] ;
2035: LD_ADDR_EXP 38
2039: PUSH
2040: EMPTY
2041: ST_TO_ADDR
// ruSci := [ ] ;
2042: LD_ADDR_EXP 40
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// ruMobile := [ ] ;
2049: LD_ADDR_EXP 41
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2056: LD_ADDR_EXP 34
2060: PUSH
2061: LD_STRING Burlak
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: LD_STRING 
2069: PPUSH
2070: CALL 27701 0 3
2074: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2075: LD_ADDR_EXP 35
2079: PUSH
2080: LD_STRING Gaydar
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: LD_STRING 
2088: PPUSH
2089: CALL 27701 0 3
2093: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2094: LD_ADDR_EXP 36
2098: PUSH
2099: LD_STRING Kuzmov
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_STRING 
2107: PPUSH
2108: CALL 27701 0 3
2112: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2113: LD_EXP 36
2117: PPUSH
2118: LD_INT 200
2120: PPUSH
2121: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2125: LD_INT 200
2127: PPUSH
2128: LD_STRING chuikov
2130: PPUSH
2131: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2135: LD_INT 200
2137: PPUSH
2138: CALL_OW 274
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 800
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 1250
2154: PUSH
2155: LD_INT 1300
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_OWVAR 67
2168: ARRAY
2169: PPUSH
2170: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2174: LD_INT 200
2176: PPUSH
2177: CALL_OW 274
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: LD_INT 160
2187: PPUSH
2188: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2192: LD_INT 225
2194: PPUSH
2195: CALL_OW 274
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 200
2205: PPUSH
2206: CALL_OW 277
// oil := 150 ;
2210: LD_ADDR_VAR 0 9
2214: PUSH
2215: LD_INT 150
2217: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2218: LD_EXP 5
2222: PUSH
2223: LD_INT 94500
2225: PUSH
2226: LD_INT 84000
2228: PUSH
2229: LD_INT 73500
2231: PUSH
2232: LD_INT 67200
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_OWVAR 67
2245: ARRAY
2246: GREATEREQUAL
2247: IFFALSE 2402
// begin oil := 450 ;
2249: LD_ADDR_VAR 0 9
2253: PUSH
2254: LD_INT 450
2256: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2257: LD_ADDR_VAR 0 7
2261: PUSH
2262: LD_INT 123
2264: PUSH
2265: LD_INT 17
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: LD_INT 31
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 152
2282: PUSH
2283: LD_INT 38
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 81
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: LD_INT 31
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 113
2318: PUSH
2319: LD_INT 67
2321: PUSH
2322: LD_INT 4
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// for i in tmp do
2340: LD_ADDR_VAR 0 4
2344: PUSH
2345: LD_VAR 0 7
2349: PUSH
2350: FOR_IN
2351: IFFALSE 2400
// begin bc_type := i [ 4 ] ;
2353: LD_ADDR_OWVAR 42
2357: PUSH
2358: LD_VAR 0 4
2362: PUSH
2363: LD_INT 4
2365: ARRAY
2366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 3
2392: ARRAY
2393: PPUSH
2394: CALL_OW 47
// end ;
2398: GO 2350
2400: POP
2401: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2402: LD_INT 225
2404: PPUSH
2405: CALL_OW 274
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: LD_VAR 0 9
2417: PPUSH
2418: CALL_OW 277
// if Difficulty > 1 then
2422: LD_OWVAR 67
2426: PUSH
2427: LD_INT 1
2429: GREATER
2430: IFFALSE 2525
// begin bc_type := b_bunker ;
2432: LD_ADDR_OWVAR 42
2436: PUSH
2437: LD_INT 32
2439: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2440: LD_ADDR_VAR 0 7
2444: PUSH
2445: LD_INT 121
2447: PUSH
2448: LD_INT 85
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 93
2461: PUSH
2462: LD_INT 72
2464: PUSH
2465: LD_INT 1
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: ST_TO_ADDR
// for i in tmp do
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 7
2486: PUSH
2487: FOR_IN
2488: IFFALSE 2523
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2490: LD_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 4
2503: PUSH
2504: LD_INT 2
2506: ARRAY
2507: PPUSH
2508: LD_VAR 0 4
2512: PUSH
2513: LD_INT 3
2515: ARRAY
2516: PPUSH
2517: CALL_OW 47
2521: GO 2487
2523: POP
2524: POP
// end ; base := GetBase ( ruMainBase ) ;
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: LD_INT 200
2532: PPUSH
2533: CALL_OW 274
2537: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL_OW 417
2552: ST_TO_ADDR
// for b in blist do
2553: LD_ADDR_VAR 0 5
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: FOR_IN
2564: IFFALSE 3015
// begin if b [ 1 ] = b_factory then
2566: LD_VAR 0 5
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PUSH
2575: LD_INT 3
2577: EQUAL
2578: IFFALSE 2729
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2580: LD_ADDR_VAR 0 8
2584: PUSH
2585: LD_VAR 0 5
2589: PUSH
2590: LD_INT 2
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 5
2598: PUSH
2599: LD_INT 3
2601: ARRAY
2602: PPUSH
2603: CALL_OW 428
2607: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 2
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_OWVAR 67
2628: PLUS
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_EXP 10
2638: PUSH
2639: LD_INT 3
2641: GREATER
2642: PUSH
2643: LD_INT 1
2645: PLUS
2646: ARRAY
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2725
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 1
2659: PUSH
2660: LD_OWVAR 67
2664: PLUS
2665: PPUSH
2666: CALL_OW 380
// un := CreateHuman ;
2670: LD_ADDR_VAR 0 6
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2680: LD_ADDR_EXP 39
2684: PUSH
2685: LD_EXP 39
2689: PPUSH
2690: LD_EXP 39
2694: PUSH
2695: LD_INT 1
2697: PLUS
2698: PPUSH
2699: LD_VAR 0 6
2703: PPUSH
2704: CALL_OW 1
2708: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2709: LD_VAR 0 6
2713: PPUSH
2714: LD_VAR 0 8
2718: PPUSH
2719: CALL_OW 52
// end ;
2723: GO 2648
2725: POP
2726: POP
// end else
2727: GO 3013
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2729: LD_VAR 0 5
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PUSH
2738: LD_INT 6
2740: PUSH
2741: LD_INT 7
2743: PUSH
2744: LD_INT 8
2746: PUSH
2747: LD_INT 10
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: IN
2756: IFFALSE 2866
// begin for i := 1 to 2 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 2
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2862
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 4
2779: PPUSH
2780: LD_OWVAR 67
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 6
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2799: LD_ADDR_EXP 40
2803: PUSH
2804: LD_EXP 40
2808: PPUSH
2809: LD_EXP 40
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: PPUSH
2818: LD_VAR 0 6
2822: PPUSH
2823: CALL_OW 1
2827: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 5
2846: PUSH
2847: LD_INT 3
2849: ARRAY
2850: PPUSH
2851: CALL_OW 428
2855: PPUSH
2856: CALL_OW 52
// end ;
2860: GO 2771
2862: POP
2863: POP
// end else
2864: GO 3013
// if b [ 1 ] = b_warehouse then
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: IFFALSE 3013
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 1
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 3011
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: LD_OWVAR 67
2933: PPUSH
2934: CALL_OW 380
// un := CreateHuman ;
2938: LD_ADDR_VAR 0 6
2942: PUSH
2943: CALL_OW 44
2947: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_EXP 38
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: PPUSH
2967: LD_VAR 0 6
2971: PPUSH
2972: CALL_OW 1
2976: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2977: LD_VAR 0 6
2981: PPUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: PPUSH
2991: LD_VAR 0 5
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 428
3004: PPUSH
3005: CALL_OW 52
// end ;
3009: GO 2920
3011: POP
3012: POP
// end ; end ;
3013: GO 2563
3015: POP
3016: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 3
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// for b in blist do
3051: LD_ADDR_VAR 0 5
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3084
// SetBLevel ( b , 3 + Difficulty ) ;
3064: LD_VAR 0 5
3068: PPUSH
3069: LD_INT 3
3071: PUSH
3072: LD_OWVAR 67
3076: PLUS
3077: PPUSH
3078: CALL_OW 241
3082: GO 3061
3084: POP
3085: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 30
3103: PUSH
3104: LD_INT 32
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 69
3119: ST_TO_ADDR
// for b in blist do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3240
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3133: LD_INT 0
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 1
3141: PUSH
3142: LD_OWVAR 67
3146: PLUS
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3162: LD_ADDR_EXP 37
3166: PUSH
3167: LD_EXP 37
3171: PPUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_INT 1
3179: PLUS
3180: PPUSH
3181: LD_VAR 0 6
3185: PPUSH
3186: CALL_OW 1
3190: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3191: LD_VAR 0 6
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3205: LD_VAR 0 5
3209: PPUSH
3210: LD_INT 44
3212: PUSH
3213: LD_INT 43
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_VAR 0 5
3224: PUSH
3225: LD_INT 2
3227: MOD
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: ARRAY
3233: PPUSH
3234: CALL_OW 431
// end ;
3238: GO 3130
3240: POP
3241: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 3
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: ST_TO_ADDR
// for b in blist do
3276: LD_ADDR_VAR 0 5
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3386
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PUSH
3298: LD_OWVAR 67
3302: PLUS
3303: PPUSH
3304: CALL_OW 380
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3318: LD_ADDR_EXP 37
3322: PUSH
3323: LD_EXP 37
3327: PPUSH
3328: LD_EXP 37
3332: PUSH
3333: LD_INT 1
3335: PLUS
3336: PPUSH
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3347: LD_VAR 0 6
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: CALL_OW 254
3361: PUSH
3362: LD_INT 3
3364: PLUS
3365: PPUSH
3366: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 52
// end ;
3384: GO 3286
3386: POP
3387: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 30
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 30
3418: PUSH
3419: LD_INT 5
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// for b in blist do
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_IN
3451: IFFALSE 3547
// begin for i := 1 to 2 do
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3543
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_OWVAR 67
3482: PLUS
3483: PPUSH
3484: CALL_OW 380
// un := CreateHuman ;
3488: LD_ADDR_VAR 0 6
3492: PUSH
3493: CALL_OW 44
3497: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3498: LD_ADDR_EXP 37
3502: PUSH
3503: LD_EXP 37
3507: PPUSH
3508: LD_EXP 37
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: PPUSH
3517: LD_VAR 0 6
3521: PPUSH
3522: CALL_OW 1
3526: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3527: LD_VAR 0 6
3531: PPUSH
3532: LD_VAR 0 5
3536: PPUSH
3537: CALL_OW 52
// end ;
3541: GO 3466
3543: POP
3544: POP
// end ;
3545: GO 3450
3547: POP
3548: POP
// if ibrahimOnRuSide then
3549: LD_EXP 3
3553: IFFALSE 3651
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3555: LD_ADDR_EXP 21
3559: PUSH
3560: LD_STRING IbrahimRu
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: LD_STRING 
3568: PPUSH
3569: CALL 27701 0 3
3573: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3574: LD_EXP 21
3578: PPUSH
3579: LD_INT 121
3581: PPUSH
3582: LD_INT 78
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL_OW 48
// ComHold ( Ibrahim ) ;
3592: LD_EXP 21
3596: PPUSH
3597: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 380
// ruSol := CreateHuman ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: CALL_OW 44
3623: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3624: LD_EXP 42
3628: PPUSH
3629: LD_INT 121
3631: PPUSH
3632: LD_INT 75
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 48
// ComHold ( ruSol ) ;
3642: LD_EXP 42
3646: PPUSH
3647: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 2
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: LD_OWVAR 67
3671: PLUS
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_EXP 10
3681: PUSH
3682: LD_INT 3
3684: GREATER
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: ARRAY
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3761
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3694: LD_VAR 0 8
3698: PPUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 23
3704: PUSH
3705: LD_INT 24
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_VAR 0 4
3717: PUSH
3718: LD_INT 3
3720: MOD
3721: PUSH
3722: LD_INT 1
3724: PLUS
3725: ARRAY
3726: PPUSH
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 43
3735: PUSH
3736: LD_INT 44
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: CALL_OW 12
3753: ARRAY
3754: PPUSH
3755: CALL_OW 185
3759: GO 3691
3761: POP
3762: POP
// end ;
3763: LD_VAR 0 1
3767: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3768: LD_EXP 41
3772: PUSH
3773: LD_EXP 4
3777: NOT
3778: AND
3779: IFFALSE 4266
3781: GO 3783
3783: DISABLE
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// begin enable ;
3791: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3792: LD_ADDR_VAR 0 2
3796: PUSH
3797: LD_EXP 41
3801: PPUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 72
3816: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 81
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 2
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 95
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 95
3857: PUSH
3858: LD_INT 6
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 95
3867: PUSH
3868: LD_INT 7
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PPUSH
3886: CALL_OW 69
3890: ST_TO_ADDR
// for i in filter do
3891: LD_ADDR_VAR 0 1
3895: PUSH
3896: LD_VAR 0 2
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4264
// begin tmp := IsDrivenBy ( i ) ;
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 311
3918: ST_TO_ADDR
// if not tmp then
3919: LD_VAR 0 3
3923: NOT
3924: IFFALSE 3928
// continue ;
3926: GO 3901
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 261
3937: PUSH
3938: LD_INT 90
3940: GREATER
3941: PUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 110
3951: PUSH
3952: LD_INT 2
3954: EQUAL
3955: AND
3956: IFFALSE 3972
// SetTag ( i , 0 ) else
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 109
3970: GO 4015
// if GetTag ( i ) = 2 then
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 110
3981: PUSH
3982: LD_INT 2
3984: EQUAL
3985: IFFALSE 4015
// begin x := rand ( 1 , 2 ) ;
3987: LD_ADDR_VAR 0 5
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 200
4010: PPUSH
4011: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4015: LD_VAR 0 1
4019: PPUSH
4020: CALL_OW 256
4024: PUSH
4025: LD_INT 600
4027: GREATEREQUAL
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 110
4038: NOT
4039: AND
4040: IFFALSE 4066
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 4
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4066: LD_VAR 0 1
4070: PPUSH
4071: CALL_OW 256
4075: PUSH
4076: LD_INT 600
4078: LESS
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 110
4089: NOT
4090: AND
4091: IFFALSE 4120
// begin SetTag ( i , 1 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4105: LD_VAR 0 1
4109: PPUSH
4110: LD_INT 112
4112: PPUSH
4113: LD_INT 119
4115: PPUSH
4116: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 110
4129: PUSH
4130: LD_INT 1
4132: EQUAL
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 112
4141: PPUSH
4142: LD_INT 119
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 9
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 3
4159: AND
4160: IFFALSE 4262
// begin ComExitVehicle ( tmp ) ;
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_VAR 0 1
4180: PPUSH
4181: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4185: LD_INT 35
4187: PPUSH
4188: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4192: LD_VAR 0 1
4196: PPUSH
4197: CALL_OW 256
4201: PUSH
4202: LD_INT 1000
4204: EQUAL
4205: IFFALSE 4185
// ComEnterUnit ( tmp , i ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4221: LD_VAR 0 1
4225: PPUSH
4226: CALL_OW 261
4230: PUSH
4231: LD_INT 50
4233: LESSEQUAL
4234: IFFALSE 4250
// SetTag ( i , 2 ) else
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 109
4248: GO 4262
// SetTag ( i , 0 ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 0
4257: PPUSH
4258: CALL_OW 109
// end ; end ;
4262: GO 3901
4264: POP
4265: POP
// end ;
4266: PPOPN 5
4268: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4269: LD_EXP 4
4273: NOT
4274: PUSH
4275: LD_EXP 38
4279: AND
4280: IFFALSE 4541
4282: GO 4284
4284: DISABLE
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// begin enable ;
4291: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4292: LD_ADDR_VAR 0 2
4296: PUSH
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 22
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 21
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: LD_INT 1000
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 70
4346: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_EXP 38
4356: PPUSH
4357: LD_INT 50
4359: PUSH
4360: EMPTY
4361: LIST
4362: PPUSH
4363: CALL_OW 72
4367: ST_TO_ADDR
// if filter and tmp then
4368: LD_VAR 0 2
4372: PUSH
4373: LD_VAR 0 3
4377: AND
4378: IFFALSE 4470
// begin for i in tmp do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4466
// begin if GetTag ( i ) = tEscape then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 110
4402: PUSH
4403: LD_EXP 17
4407: EQUAL
4408: IFFALSE 4412
// continue ;
4410: GO 4390
// if IsInUnit ( i ) then
4412: LD_VAR 0 1
4416: PPUSH
4417: CALL_OW 310
4421: IFFALSE 4434
// ComExitBuilding ( i ) else
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL_OW 122
4432: GO 4464
// if not HasTask ( i ) then
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 314
4443: NOT
4444: IFFALSE 4464
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 2
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: CALL_OW 130
// end ;
4464: GO 4390
4466: POP
4467: POP
// end else
4468: GO 4541
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 72
4492: IFFALSE 4541
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 54
4509: PUSH
4510: EMPTY
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 72
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// ComEnterUnit ( i , ruMainBase ) ;
4525: LD_VAR 0 1
4529: PPUSH
4530: LD_INT 200
4532: PPUSH
4533: CALL_OW 120
4537: GO 4522
4539: POP
4540: POP
// end ; end ;
4541: PPOPN 4
4543: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4544: LD_EXP 4
4548: NOT
4549: PUSH
4550: LD_EXP 40
4554: AND
4555: IFFALSE 4834
4557: GO 4559
4559: DISABLE
4560: LD_INT 0
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 21
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 24
4600: PUSH
4601: LD_INT 1000
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_EXP 40
4631: PPUSH
4632: LD_INT 50
4634: PUSH
4635: EMPTY
4636: LIST
4637: PPUSH
4638: CALL_OW 72
4642: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4643: LD_ADDR_VAR 0 4
4647: PUSH
4648: LD_INT 118
4650: PPUSH
4651: LD_INT 121
4653: PPUSH
4654: CALL_OW 428
4658: ST_TO_ADDR
// if filter and tmp then
4659: LD_VAR 0 2
4663: PUSH
4664: LD_VAR 0 3
4668: AND
4669: IFFALSE 4761
// begin for i in tmp do
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: LD_VAR 0 3
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4757
// begin if GetTag ( i ) = tEscape then
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 110
4693: PUSH
4694: LD_EXP 17
4698: EQUAL
4699: IFFALSE 4703
// continue ;
4701: GO 4681
// if IsInUnit ( i ) then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 310
4712: IFFALSE 4725
// ComExitBuilding ( i ) else
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 122
4723: GO 4755
// if not HasTask ( i ) then
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 314
4734: NOT
4735: IFFALSE 4755
// ComHeal ( i , filter [ 1 ] ) ;
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_VAR 0 2
4746: PUSH
4747: LD_INT 1
4749: ARRAY
4750: PPUSH
4751: CALL_OW 128
// end ;
4755: GO 4681
4757: POP
4758: POP
// end else
4759: GO 4834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4761: LD_VAR 0 3
4765: PPUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 54
4771: PUSH
4772: EMPTY
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 72
4783: IFFALSE 4834
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4785: LD_ADDR_VAR 0 1
4789: PUSH
4790: LD_VAR 0 3
4794: PPUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 54
4800: PUSH
4801: EMPTY
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PPUSH
4808: CALL_OW 72
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4832
// ComEnterUnit ( i , lab ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 4
4825: PPUSH
4826: CALL_OW 120
4830: GO 4813
4832: POP
4833: POP
// end ; end ; end_of_file
4834: PPOPN 4
4836: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4837: LD_VAR 0 1
4841: PUSH
4842: LD_EXP 18
4846: EQUAL
4847: IFFALSE 4856
// YouLost ( Heike ) ;
4849: LD_STRING Heike
4851: PPUSH
4852: CALL_OW 104
// if un in ruEng then
4856: LD_VAR 0 1
4860: PUSH
4861: LD_EXP 38
4865: IN
4866: IFFALSE 4884
// ruEng := ruEng diff un ;
4868: LD_ADDR_EXP 38
4872: PUSH
4873: LD_EXP 38
4877: PUSH
4878: LD_VAR 0 1
4882: DIFF
4883: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4884: LD_VAR 0 1
4888: PUSH
4889: LD_INT 22
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 21
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 23
4911: PUSH
4912: LD_INT 2
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 69
4928: IN
4929: IFFALSE 4945
// loseCounter := loseCounter + 1 ;
4931: LD_ADDR_EXP 6
4935: PUSH
4936: LD_EXP 6
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// end ;
4945: PPOPN 1
4947: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4948: LD_INT 0
4950: PPUSH
4951: PPUSH
// begin if un in ruMobile then
4952: LD_VAR 0 2
4956: PUSH
4957: LD_EXP 41
4961: IN
4962: IFFALSE 5121
// begin ruMobile := ruMobile diff un ;
4964: LD_ADDR_EXP 41
4968: PUSH
4969: LD_EXP 41
4973: PUSH
4974: LD_VAR 0 2
4978: DIFF
4979: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_VAR 0 2
4989: PPUSH
4990: CALL_OW 264
4994: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4995: LD_ADDR_VAR 0 6
4999: PUSH
5000: LD_INT 110
5002: PPUSH
5003: LD_INT 126
5005: PPUSH
5006: CALL_OW 428
5010: ST_TO_ADDR
// if not driver or not fac then
5011: LD_VAR 0 1
5015: NOT
5016: PUSH
5017: LD_VAR 0 6
5021: NOT
5022: OR
5023: IFFALSE 5027
// exit ;
5025: GO 5121
// AddComMoveXY ( driver , 111 , 121 ) ;
5027: LD_VAR 0 1
5031: PPUSH
5032: LD_INT 111
5034: PPUSH
5035: LD_INT 121
5037: PPUSH
5038: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5042: LD_VAR 0 1
5046: PPUSH
5047: LD_VAR 0 6
5051: PPUSH
5052: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5056: LD_INT 35
5058: PPUSH
5059: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5063: LD_VAR 0 1
5067: PPUSH
5068: CALL_OW 301
5072: PUSH
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 310
5082: OR
5083: IFFALSE 5056
// if IsDead ( driver ) then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 301
5094: IFFALSE 5098
// exit ;
5096: GO 5121
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5098: LD_VAR 0 6
5102: PPUSH
5103: LD_INT 21
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: LD_VAR 0 5
5116: PPUSH
5117: CALL_OW 185
// end ; end ;
5121: PPOPN 6
5123: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 255
5133: PUSH
5134: LD_INT 3
5136: EQUAL
5137: IFFALSE 5183
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5139: LD_ADDR_EXP 41
5143: PUSH
5144: LD_EXP 41
5148: PPUSH
5149: LD_EXP 41
5153: PUSH
5154: LD_INT 1
5156: PLUS
5157: PPUSH
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 1
5167: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_INT 110
5175: PPUSH
5176: LD_INT 117
5178: PPUSH
5179: CALL_OW 171
// end ; end ;
5183: PPOPN 2
5185: END
// on LeaveBuilding ( b , un ) do var barracks ;
5186: LD_INT 0
5188: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 130
5196: PPUSH
5197: LD_INT 17
5199: PPUSH
5200: CALL_OW 428
5204: PUSH
5205: LD_INT 138
5207: PPUSH
5208: LD_INT 22
5210: PPUSH
5211: CALL_OW 428
5215: PUSH
5216: LD_INT 123
5218: PPUSH
5219: LD_INT 17
5221: PPUSH
5222: CALL_OW 428
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: IN
5232: IFFALSE 5256
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5234: LD_VAR 0 2
5238: PPUSH
5239: LD_INT 135
5241: PPUSH
5242: LD_INT 31
5244: PPUSH
5245: CALL_OW 428
5249: PPUSH
5250: CALL_OW 180
// exit ;
5254: GO 5530
// end ; if b = HexInfo ( 135 , 31 ) then
5256: LD_VAR 0 1
5260: PUSH
5261: LD_INT 135
5263: PPUSH
5264: LD_INT 31
5266: PPUSH
5267: CALL_OW 428
5271: EQUAL
5272: IFFALSE 5344
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5274: LD_VAR 0 2
5278: PPUSH
5279: LD_INT 106
5281: PPUSH
5282: LD_INT 51
5284: PPUSH
5285: CALL_OW 428
5289: PPUSH
5290: CALL_OW 180
// if not explodeFirstDepot then
5294: LD_EXP 12
5298: NOT
5299: IFFALSE 5342
// begin explodeFirstDepot := true ;
5301: LD_ADDR_EXP 12
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5309: LD_INT 525
5311: PPUSH
5312: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5316: LD_INT 127
5318: PPUSH
5319: LD_INT 27
5321: PPUSH
5322: LD_INT 1
5324: PPUSH
5325: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5329: LD_INT 125
5331: PPUSH
5332: LD_INT 29
5334: PPUSH
5335: LD_INT 1
5337: PPUSH
5338: CALL_OW 453
// end ; exit ;
5342: GO 5530
// end ; if b = HexInfo ( 106 , 51 ) then
5344: LD_VAR 0 1
5348: PUSH
5349: LD_INT 106
5351: PPUSH
5352: LD_INT 51
5354: PPUSH
5355: CALL_OW 428
5359: EQUAL
5360: IFFALSE 5460
// begin AddComMoveXY ( un , 106 , 93 ) ;
5362: LD_VAR 0 2
5366: PPUSH
5367: LD_INT 106
5369: PPUSH
5370: LD_INT 93
5372: PPUSH
5373: CALL_OW 171
// if not explodeSecondDepot then
5377: LD_EXP 13
5381: NOT
5382: IFFALSE 5458
// begin explodeSecondDepot := true ;
5384: LD_ADDR_EXP 13
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5392: LD_INT 420
5394: PPUSH
5395: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5399: LD_INT 111
5401: PPUSH
5402: LD_INT 75
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5412: LD_INT 111
5414: PPUSH
5415: LD_INT 75
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5425: LD_INT 108
5427: PPUSH
5428: LD_INT 69
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 453
// wait ( 0 0$2 ) ;
5438: LD_INT 70
5440: PPUSH
5441: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5445: LD_INT 94
5447: PPUSH
5448: LD_INT 65
5450: PPUSH
5451: LD_INT 1
5453: PPUSH
5454: CALL_OW 453
// end ; exit ;
5458: GO 5530
// end ; if GetBType ( b ) = b_bunker then
5460: LD_VAR 0 1
5464: PPUSH
5465: CALL_OW 266
5469: PUSH
5470: LD_INT 32
5472: EQUAL
5473: IFFALSE 5530
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5475: LD_ADDR_VAR 0 3
5479: PUSH
5480: LD_VAR 0 2
5484: PPUSH
5485: LD_INT 5
5487: PPUSH
5488: CALL 1008 0 2
5492: ST_TO_ADDR
// if barracks then
5493: LD_VAR 0 3
5497: IFFALSE 5515
// AddComEnterUnit ( un , barracks ) else
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_VAR 0 3
5508: PPUSH
5509: CALL_OW 180
5513: GO 5530
// AddComMoveXY ( un , 116 , 110 ) ;
5515: LD_VAR 0 2
5519: PPUSH
5520: LD_INT 116
5522: PPUSH
5523: LD_INT 110
5525: PPUSH
5526: CALL_OW 171
// end ; end ;
5530: PPOPN 3
5532: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5533: LD_VAR 0 1
5537: PUSH
5538: LD_EXP 23
5542: EQUAL
5543: PUSH
5544: LD_VAR 0 2
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: IN
5559: AND
5560: IFFALSE 5591
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5562: LD_ADDR_EXP 8
5566: PUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 250
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 251
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: ST_TO_ADDR
// end ; end_of_file
5591: PPOPN 3
5593: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5594: LD_INT 0
5596: PPUSH
5597: PPUSH
5598: PPUSH
5599: PPUSH
5600: PPUSH
5601: PPUSH
// InGameOn ;
5602: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5606: LD_INT 5
5608: PPUSH
5609: LD_INT 2
5611: PPUSH
5612: CALL_OW 343
// music_nat := 4 ;
5616: LD_ADDR_OWVAR 71
5620: PUSH
5621: LD_INT 4
5623: ST_TO_ADDR
// music_class := music_combat ;
5624: LD_ADDR_OWVAR 72
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5632: LD_INT 133
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: LD_INT 2
5640: PPUSH
5641: LD_INT 10
5643: PPUSH
5644: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5648: LD_INT 133
5650: PPUSH
5651: LD_INT 2
5653: PPUSH
5654: CALL_OW 86
// wait ( 0 0$1 ) ;
5658: LD_INT 35
5660: PPUSH
5661: CALL_OW 67
// uc_side := 6 ;
5665: LD_ADDR_OWVAR 20
5669: PUSH
5670: LD_INT 6
5672: ST_TO_ADDR
// uc_nation := 3 ;
5673: LD_ADDR_OWVAR 21
5677: PUSH
5678: LD_INT 3
5680: ST_TO_ADDR
// rutmp := [ ] ;
5681: LD_ADDR_VAR 0 6
5685: PUSH
5686: EMPTY
5687: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5688: LD_INT 6
5690: PPUSH
5691: LD_INT 3
5693: PPUSH
5694: LD_INT 21
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: LD_INT 1
5702: PPUSH
5703: LD_INT 44
5705: PPUSH
5706: LD_INT 66
5708: PPUSH
5709: CALL 336 0 7
// veh := CreateVehicle ;
5713: LD_ADDR_VAR 0 4
5717: PUSH
5718: CALL_OW 45
5722: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5723: LD_VAR 0 4
5727: PPUSH
5728: LD_INT 3
5730: PPUSH
5731: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5735: LD_VAR 0 4
5739: PPUSH
5740: LD_INT 8
5742: PPUSH
5743: LD_INT 0
5745: PPUSH
5746: CALL_OW 49
// SetLives ( veh , 500 ) ;
5750: LD_VAR 0 4
5754: PPUSH
5755: LD_INT 500
5757: PPUSH
5758: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5762: LD_INT 0
5764: PPUSH
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5775: CALL_OW 44
5779: PPUSH
5780: LD_VAR 0 4
5784: PPUSH
5785: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5789: LD_VAR 0 4
5793: PPUSH
5794: LD_INT 133
5796: PPUSH
5797: LD_INT 11
5799: PPUSH
5800: CALL_OW 111
// rutmp := [ veh ] ;
5804: LD_ADDR_VAR 0 6
5808: PUSH
5809: LD_VAR 0 4
5813: PUSH
5814: EMPTY
5815: LIST
5816: ST_TO_ADDR
// for i := 1 to 4 do
5817: LD_ADDR_VAR 0 2
5821: PUSH
5822: DOUBLE
5823: LD_INT 1
5825: DEC
5826: ST_TO_ADDR
5827: LD_INT 4
5829: PUSH
5830: FOR_TO
5831: IFFALSE 5938
// begin PrepareHuman ( false , i , 2 ) ;
5833: LD_INT 0
5835: PPUSH
5836: LD_VAR 0 2
5840: PPUSH
5841: LD_INT 2
5843: PPUSH
5844: CALL_OW 380
// un := CreateHuman ;
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: CALL_OW 44
5857: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 3
5865: PPUSH
5866: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5870: LD_VAR 0 3
5874: PPUSH
5875: LD_INT 8
5877: PPUSH
5878: LD_INT 0
5880: PPUSH
5881: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5885: LD_ADDR_VAR 0 6
5889: PUSH
5890: LD_VAR 0 6
5894: PPUSH
5895: LD_VAR 0 6
5899: PUSH
5900: LD_INT 1
5902: PLUS
5903: PPUSH
5904: LD_VAR 0 3
5908: PPUSH
5909: CALL_OW 1
5913: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5914: LD_VAR 0 3
5918: PPUSH
5919: LD_INT 133
5921: PPUSH
5922: LD_INT 11
5924: PPUSH
5925: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5929: LD_INT 18
5931: PPUSH
5932: CALL_OW 67
// end ;
5936: GO 5830
5938: POP
5939: POP
// for i in rutmp do
5940: LD_ADDR_VAR 0 2
5944: PUSH
5945: LD_VAR 0 6
5949: PUSH
5950: FOR_IN
5951: IFFALSE 6000
// begin AddComMoveXY ( i , 99 , 65 ) ;
5953: LD_VAR 0 2
5957: PPUSH
5958: LD_INT 99
5960: PPUSH
5961: LD_INT 65
5963: PPUSH
5964: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5968: LD_VAR 0 2
5972: PPUSH
5973: LD_INT 76
5975: PPUSH
5976: LD_INT 108
5978: PPUSH
5979: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 92
5990: PPUSH
5991: LD_INT 176
5993: PPUSH
5994: CALL_OW 171
// end ;
5998: GO 5950
6000: POP
6001: POP
// wait ( 0 0$10 ) ;
6002: LD_INT 350
6004: PPUSH
6005: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6009: LD_ADDR_VAR 0 5
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_EXP 19
6023: PUSH
6024: LD_EXP 20
6028: PUSH
6029: LD_EXP 21
6033: PUSH
6034: LD_EXP 22
6038: PUSH
6039: LD_EXP 23
6043: PUSH
6044: LD_EXP 24
6048: PUSH
6049: LD_EXP 25
6053: PUSH
6054: LD_EXP 27
6058: PUSH
6059: LD_EXP 28
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: LD_EXP 29
6080: UNION
6081: ST_TO_ADDR
// tmp := tmp diff 0 ;
6082: LD_ADDR_VAR 0 5
6086: PUSH
6087: LD_VAR 0 5
6091: PUSH
6092: LD_INT 0
6094: DIFF
6095: ST_TO_ADDR
// for i in heikeVehicles do
6096: LD_ADDR_VAR 0 2
6100: PUSH
6101: LD_EXP 30
6105: PUSH
6106: FOR_IN
6107: IFFALSE 6373
// begin if not tmp then
6109: LD_VAR 0 5
6113: NOT
6114: IFFALSE 6118
// continue ;
6116: GO 6106
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6118: LD_INT 2
6120: PPUSH
6121: LD_VAR 0 2
6125: PUSH
6126: LD_INT 5
6128: ARRAY
6129: PPUSH
6130: LD_VAR 0 2
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_INT 2
6146: ARRAY
6147: PPUSH
6148: LD_VAR 0 2
6152: PUSH
6153: LD_INT 3
6155: ARRAY
6156: PPUSH
6157: LD_VAR 0 2
6161: PUSH
6162: LD_INT 4
6164: ARRAY
6165: PPUSH
6166: LD_INT 34
6168: PPUSH
6169: CALL 336 0 7
// veh := CreateVehicle ;
6173: LD_ADDR_VAR 0 4
6177: PUSH
6178: CALL_OW 45
6182: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6183: LD_VAR 0 2
6187: PUSH
6188: LD_INT 4
6190: ARRAY
6191: PUSH
6192: LD_INT 51
6194: PUSH
6195: LD_INT 32
6197: PUSH
6198: LD_INT 12
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: IN
6206: IFFALSE 6286
// begin if i [ 7 ] [ 1 ] then
6208: LD_VAR 0 2
6212: PUSH
6213: LD_INT 7
6215: ARRAY
6216: PUSH
6217: LD_INT 1
6219: ARRAY
6220: IFFALSE 6247
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6222: LD_VAR 0 4
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_VAR 0 2
6234: PUSH
6235: LD_INT 7
6237: ARRAY
6238: PUSH
6239: LD_INT 1
6241: ARRAY
6242: PPUSH
6243: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6247: LD_VAR 0 2
6251: PUSH
6252: LD_INT 7
6254: ARRAY
6255: PUSH
6256: LD_INT 2
6258: ARRAY
6259: IFFALSE 6286
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6261: LD_VAR 0 4
6265: PPUSH
6266: LD_INT 2
6268: PPUSH
6269: LD_VAR 0 2
6273: PUSH
6274: LD_INT 7
6276: ARRAY
6277: PUSH
6278: LD_INT 2
6280: ARRAY
6281: PPUSH
6282: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6286: LD_VAR 0 4
6290: PPUSH
6291: LD_INT 3
6293: PPUSH
6294: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6298: LD_VAR 0 4
6302: PPUSH
6303: LD_INT 8
6305: PPUSH
6306: LD_INT 0
6308: PPUSH
6309: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6313: LD_VAR 0 5
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_VAR 0 4
6326: PPUSH
6327: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6331: LD_ADDR_VAR 0 5
6335: PUSH
6336: LD_VAR 0 5
6340: PPUSH
6341: LD_INT 1
6343: PPUSH
6344: CALL_OW 3
6348: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6349: LD_VAR 0 4
6353: PPUSH
6354: LD_INT 133
6356: PPUSH
6357: LD_INT 7
6359: PPUSH
6360: CALL_OW 114
// wait ( 0 0$1 ) ;
6364: LD_INT 35
6366: PPUSH
6367: CALL_OW 67
// end ;
6371: GO 6106
6373: POP
6374: POP
// if tmp then
6375: LD_VAR 0 5
6379: IFFALSE 6435
// for i in tmp do
6381: LD_ADDR_VAR 0 2
6385: PUSH
6386: LD_VAR 0 5
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6433
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6394: LD_VAR 0 2
6398: PPUSH
6399: LD_INT 10
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6409: LD_VAR 0 2
6413: PPUSH
6414: LD_INT 146
6416: PPUSH
6417: LD_INT 7
6419: PPUSH
6420: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6424: LD_INT 18
6426: PPUSH
6427: CALL_OW 67
// end ;
6431: GO 6391
6433: POP
6434: POP
// if heikeApes then
6435: LD_EXP 31
6439: IFFALSE 6495
// for i in heikeApes do
6441: LD_ADDR_VAR 0 2
6445: PUSH
6446: LD_EXP 31
6450: PUSH
6451: FOR_IN
6452: IFFALSE 6493
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 10
6461: PPUSH
6462: LD_INT 0
6464: PPUSH
6465: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6469: LD_VAR 0 2
6473: PPUSH
6474: LD_INT 146
6476: PPUSH
6477: LD_INT 7
6479: PPUSH
6480: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6484: LD_INT 18
6486: PPUSH
6487: CALL_OW 67
// end ;
6491: GO 6451
6493: POP
6494: POP
// DialogueOn ;
6495: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6499: LD_EXP 18
6503: PPUSH
6504: LD_STRING DH-outpost-a-1
6506: PPUSH
6507: CALL_OW 88
// DialogueOff ;
6511: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6515: LD_INT 133
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: CALL_OW 331
// InGameOff ;
6528: CALL_OW 9
// music_nat := 0 ;
6532: LD_ADDR_OWVAR 71
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// music_class := 0 ;
6540: LD_ADDR_OWVAR 72
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6548: LD_STRING Outposts
6550: PPUSH
6551: CALL_OW 337
// SaveForQuickRestart ;
6555: CALL_OW 22
// end ;
6559: LD_VAR 0 1
6563: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6564: LD_INT 22
6566: PUSH
6567: LD_INT 2
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 91
6576: PUSH
6577: LD_EXP 21
6581: PUSH
6582: LD_INT 20
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 69
6598: PUSH
6599: LD_EXP 3
6603: AND
6604: PUSH
6605: LD_EXP 21
6609: PPUSH
6610: CALL_OW 302
6614: AND
6615: IFFALSE 6862
6617: GO 6619
6619: DISABLE
6620: LD_INT 0
6622: PPUSH
6623: PPUSH
6624: PPUSH
6625: PPUSH
// begin IbrahimBetrayal ;
6626: CALL 6865 0 0
// repeat wait ( 0 0$1 ) ;
6630: LD_INT 35
6632: PPUSH
6633: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6637: LD_EXP 21
6641: PPUSH
6642: CALL_OW 301
6646: PUSH
6647: LD_INT 22
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 91
6659: PUSH
6660: LD_EXP 21
6664: PUSH
6665: LD_INT 6
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: PUSH
6682: LD_EXP 21
6686: PPUSH
6687: CALL_OW 302
6691: AND
6692: OR
6693: IFFALSE 6630
// if IsDead ( Ibrahim ) then
6695: LD_EXP 21
6699: PPUSH
6700: CALL_OW 301
6704: IFFALSE 6708
// exit ;
6706: GO 6862
// x := GetX ( Ibrahim ) ;
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_EXP 21
6717: PPUSH
6718: CALL_OW 250
6722: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6723: LD_ADDR_VAR 0 2
6727: PUSH
6728: LD_EXP 21
6732: PPUSH
6733: CALL_OW 251
6737: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: LD_EXP 21
6747: PPUSH
6748: CALL_OW 254
6752: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6753: LD_ADDR_VAR 0 4
6757: PUSH
6758: LD_EXP 21
6762: PPUSH
6763: CALL_OW 256
6767: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6768: LD_EXP 21
6772: PPUSH
6773: CALL_OW 64
// uc_side := 2 ;
6777: LD_ADDR_OWVAR 20
6781: PUSH
6782: LD_INT 2
6784: ST_TO_ADDR
// uc_nation := 2 ;
6785: LD_ADDR_OWVAR 21
6789: PUSH
6790: LD_INT 2
6792: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6793: LD_ADDR_EXP 21
6797: PUSH
6798: LD_STRING Ibrahim
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: LD_STRING 
6806: PPUSH
6807: CALL 27701 0 3
6811: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6812: LD_EXP 21
6816: PPUSH
6817: LD_VAR 0 3
6821: PPUSH
6822: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6826: LD_EXP 21
6830: PPUSH
6831: LD_VAR 0 1
6835: PPUSH
6836: LD_VAR 0 2
6840: PPUSH
6841: LD_INT 0
6843: PPUSH
6844: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6848: LD_EXP 21
6852: PPUSH
6853: LD_VAR 0 4
6857: PPUSH
6858: CALL_OW 234
// end ;
6862: PPOPN 4
6864: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6865: LD_INT 0
6867: PPUSH
6868: PPUSH
6869: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6870: LD_INT 122
6872: PPUSH
6873: LD_INT 77
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 6
6881: NEG
6882: PPUSH
6883: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6887: LD_EXP 21
6891: PPUSH
6892: LD_INT 123
6894: PPUSH
6895: LD_INT 79
6897: PPUSH
6898: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6902: LD_EXP 21
6906: PPUSH
6907: LD_INT 125
6909: PPUSH
6910: LD_INT 82
6912: PPUSH
6913: CALL_OW 178
// wait ( 0 0$2 ) ;
6917: LD_INT 70
6919: PPUSH
6920: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6924: LD_EXP 42
6928: PPUSH
6929: LD_EXP 21
6933: PPUSH
6934: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6938: LD_EXP 42
6942: PPUSH
6943: LD_STRING DRum-outpost-b-3
6945: PPUSH
6946: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6950: LD_ADDR_VAR 0 3
6954: PUSH
6955: LD_INT 125
6957: PPUSH
6958: LD_INT 76
6960: PPUSH
6961: CALL_OW 428
6965: PUSH
6966: LD_INT 125
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: CALL_OW 428
6976: PUSH
6977: LD_INT 125
6979: PPUSH
6980: LD_INT 82
6982: PPUSH
6983: CALL_OW 428
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: LIST
6992: ST_TO_ADDR
// for i in tmp do
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: LD_VAR 0 3
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7020
// SetLives ( i , 200 ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_INT 200
7013: PPUSH
7014: CALL_OW 234
7018: GO 7003
7020: POP
7021: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7022: LD_EXP 21
7026: PPUSH
7027: LD_STRING DI-outpost-b-4
7029: PPUSH
7030: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7034: LD_EXP 21
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7046: LD_EXP 21
7050: PUSH
7051: LD_EXP 42
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7064: LD_INT 122
7066: PPUSH
7067: LD_INT 77
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: CALL_OW 331
// if Givi then
7077: LD_EXP 19
7081: IFFALSE 7097
// Say ( Givi , DG-1-outpost-b-5 ) else
7083: LD_EXP 19
7087: PPUSH
7088: LD_STRING DG-1-outpost-b-5
7090: PPUSH
7091: CALL_OW 88
7095: GO 7162
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7097: LD_EXP 29
7101: PPUSH
7102: LD_INT 26
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PPUSH
7112: CALL_OW 72
7116: PUSH
7117: LD_INT 1
7119: ARRAY
7120: PPUSH
7121: LD_STRING DArf-outpost-b-a-5
7123: PPUSH
7124: CALL_OW 88
7128: NOT
7129: IFFALSE 7162
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7131: LD_EXP 29
7135: PPUSH
7136: LD_INT 26
7138: PUSH
7139: LD_INT 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 72
7150: PUSH
7151: LD_INT 1
7153: ARRAY
7154: PPUSH
7155: LD_STRING DArm-outpost-b-a-5
7157: PPUSH
7158: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7169: LD_EXP 21
7173: PPUSH
7174: CALL_OW 301
7178: PUSH
7179: LD_EXP 18
7183: PPUSH
7184: LD_EXP 21
7188: PPUSH
7189: CALL_OW 296
7193: PUSH
7194: LD_INT 6
7196: LESS
7197: PUSH
7198: LD_EXP 21
7202: PPUSH
7203: CALL_OW 302
7207: AND
7208: OR
7209: IFFALSE 7162
// if IsDead ( Ibrahim ) then
7211: LD_EXP 21
7215: PPUSH
7216: CALL_OW 301
7220: IFFALSE 7236
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7222: LD_EXP 18
7226: PPUSH
7227: LD_STRING DH-ibrahimdead-1
7229: PPUSH
7230: CALL_OW 88
// exit ;
7234: GO 7277
// end ; CenterNowOnUnits ( Ibrahim ) ;
7236: LD_EXP 21
7240: PPUSH
7241: CALL_OW 87
// DialogueOn ;
7245: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7249: LD_EXP 21
7253: PPUSH
7254: LD_STRING DI-ibrahimlives-1
7256: PPUSH
7257: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7261: LD_EXP 18
7265: PPUSH
7266: LD_STRING DH-Ibrahimlives-2
7268: PPUSH
7269: CALL_OW 88
// DialogueOff ;
7273: CALL_OW 7
// end ;
7277: LD_VAR 0 1
7281: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7282: LD_INT 11
7284: PPUSH
7285: LD_INT 22
7287: PUSH
7288: LD_INT 2
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 70
7299: PUSH
7300: LD_OWVAR 1
7304: PUSH
7305: LD_INT 18900
7307: PUSH
7308: LD_INT 16800
7310: PUSH
7311: LD_INT 16800
7313: PUSH
7314: LD_INT 15750
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_OWVAR 67
7327: ARRAY
7328: GREATEREQUAL
7329: OR
7330: IFFALSE 7791
7332: GO 7334
7334: DISABLE
// begin outerAreaAchived := true ;
7335: LD_ADDR_EXP 15
7339: PUSH
7340: LD_INT 1
7342: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7343: LD_INT 700
7345: PPUSH
7346: CALL_OW 67
// DialogueOn ;
7350: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7354: LD_EXP 26
7358: PPUSH
7359: LD_STRING DShar-radio-1
7361: PPUSH
7362: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7366: LD_EXP 26
7370: PPUSH
7371: LD_STRING DShar-radio-2
7373: PPUSH
7374: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7378: LD_EXP 18
7382: PPUSH
7383: LD_STRING DH-radio-2
7385: PPUSH
7386: CALL_OW 88
// DialogueOff ;
7390: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7394: LD_STRING Gaidar
7396: PPUSH
7397: CALL_OW 337
// if Difficulty < 3 then
7401: LD_OWVAR 67
7405: PUSH
7406: LD_INT 3
7408: LESS
7409: IFFALSE 7475
// begin DialogueOn ;
7411: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7415: LD_INT 11
7417: PPUSH
7418: LD_INT 14
7420: PPUSH
7421: LD_INT 2
7423: PPUSH
7424: LD_INT 6
7426: NEG
7427: PPUSH
7428: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7432: LD_INT 11
7434: PPUSH
7435: LD_INT 14
7437: PPUSH
7438: LD_INT 2
7440: PPUSH
7441: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7445: LD_INT 11
7447: PPUSH
7448: LD_INT 14
7450: PPUSH
7451: CALL_OW 84
// dwait ( 0 0$1 ) ;
7455: LD_INT 35
7457: PPUSH
7458: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7462: LD_EXP 18
7466: PPUSH
7467: CALL_OW 87
// DialogueOff ;
7471: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7475: LD_INT 1050
7477: PUSH
7478: LD_INT 350
7480: PPUSH
7481: LD_INT 525
7483: PPUSH
7484: CALL_OW 12
7488: PUSH
7489: LD_OWVAR 67
7493: MUL
7494: PLUS
7495: PPUSH
7496: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7500: LD_INT 35
7502: PPUSH
7503: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7507: LD_INT 2
7509: PPUSH
7510: LD_INT 1
7512: PPUSH
7513: CALL_OW 428
7517: PUSH
7518: LD_INT 0
7520: EQUAL
7521: IFFALSE 7500
// SetDir ( Gaidar , 2 ) ;
7523: LD_EXP 35
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7535: LD_EXP 35
7539: PPUSH
7540: LD_INT 2
7542: PPUSH
7543: LD_INT 1
7545: PPUSH
7546: LD_INT 0
7548: PPUSH
7549: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7553: LD_EXP 35
7557: PPUSH
7558: LD_INT 19
7560: PPUSH
7561: LD_INT 24
7563: PPUSH
7564: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7568: LD_EXP 35
7572: PPUSH
7573: LD_INT 210
7575: PPUSH
7576: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7580: LD_EXP 35
7584: PPUSH
7585: LD_INT 38
7587: PPUSH
7588: LD_INT 47
7590: PPUSH
7591: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7595: LD_EXP 35
7599: PPUSH
7600: LD_INT 32
7602: PPUSH
7603: LD_INT 59
7605: PPUSH
7606: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7610: LD_EXP 35
7614: PPUSH
7615: LD_INT 350
7617: PPUSH
7618: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7622: LD_EXP 35
7626: PPUSH
7627: LD_INT 62
7629: PPUSH
7630: LD_INT 116
7632: PPUSH
7633: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7637: LD_EXP 35
7641: PPUSH
7642: LD_INT 92
7644: PPUSH
7645: LD_INT 177
7647: PPUSH
7648: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7652: LD_INT 35
7654: PPUSH
7655: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7659: LD_EXP 35
7663: PPUSH
7664: CALL_OW 301
7668: PUSH
7669: LD_EXP 35
7673: PPUSH
7674: LD_INT 92
7676: PPUSH
7677: LD_INT 177
7679: PPUSH
7680: CALL_OW 307
7684: OR
7685: IFFALSE 7652
// if IsAt ( Gaidar , 92 , 177 ) then
7687: LD_EXP 35
7691: PPUSH
7692: LD_INT 92
7694: PPUSH
7695: LD_INT 177
7697: PPUSH
7698: CALL_OW 307
7702: IFFALSE 7769
// begin DialogueOn ;
7704: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
7708: LD_INT 92
7710: PPUSH
7711: LD_INT 177
7713: PPUSH
7714: LD_INT 2
7716: PPUSH
7717: LD_INT 3
7719: NEG
7720: PPUSH
7721: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
7725: LD_EXP 35
7729: PPUSH
7730: CALL_OW 87
// dwait ( 0 0$2 ) ;
7734: LD_INT 70
7736: PPUSH
7737: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
7741: LD_INT 92
7743: PPUSH
7744: LD_INT 177
7746: PPUSH
7747: LD_INT 2
7749: PPUSH
7750: CALL_OW 331
// DialogueOff ;
7754: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
7758: LD_EXP 35
7762: PPUSH
7763: CALL_OW 64
// exit ;
7767: GO 7791
// end ; gaidarKilled := true ;
7769: LD_ADDR_EXP 14
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7777: LD_STRING GaidarKilled
7779: PPUSH
7780: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7784: LD_STRING ACH_COMMISAR
7786: PPUSH
7787: CALL_OW 543
// end ;
7791: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7792: LD_INT 2
7794: PPUSH
7795: LD_EXP 35
7799: PPUSH
7800: CALL_OW 292
7804: IFFALSE 7821
7806: GO 7808
7808: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7809: LD_EXP 35
7813: PPUSH
7814: LD_STRING DT-objective-1
7816: PPUSH
7817: CALL_OW 88
7821: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7822: LD_INT 22
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: LD_INT 95
7837: PUSH
7838: LD_INT 5
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 95
7847: PUSH
7848: LD_INT 6
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 95
7857: PUSH
7858: LD_INT 7
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: IFFALSE 7916
7881: GO 7883
7883: DISABLE
// begin DialogueOn ;
7884: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7888: LD_EXP 18
7892: PPUSH
7893: LD_STRING DH-outpost-last-1
7895: PPUSH
7896: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7900: LD_EXP 34
7904: PPUSH
7905: LD_STRING DB-outpost-last-2
7907: PPUSH
7908: CALL_OW 94
// DialogueOff ;
7912: CALL_OW 7
// end ;
7916: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7917: LD_INT 200
7919: PPUSH
7920: CALL_OW 256
7924: PUSH
7925: LD_INT 999
7927: LESS
7928: PUSH
7929: LD_INT 200
7931: PPUSH
7932: CALL_OW 255
7936: PUSH
7937: LD_INT 2
7939: EQUAL
7940: OR
7941: IFFALSE 8114
7943: GO 7945
7945: DISABLE
7946: LD_INT 0
7948: PPUSH
7949: PPUSH
// begin if not earlyEscape then
7950: LD_EXP 16
7954: NOT
7955: IFFALSE 7981
// begin SayRadio ( Burlak , DB-end-1 ) ;
7957: LD_EXP 34
7961: PPUSH
7962: LD_STRING DB-end-1
7964: PPUSH
7965: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7969: LD_EXP 18
7973: PPUSH
7974: LD_STRING DH-end-2
7976: PPUSH
7977: CALL_OW 88
// end ; if tick <= 15 15$00 then
7981: LD_OWVAR 1
7985: PUSH
7986: LD_INT 31500
7988: LESSEQUAL
7989: IFFALSE 7998
// SetAchievement ( ACH_FIST ) ;
7991: LD_STRING ACH_FIST
7993: PPUSH
7994: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 3
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 3
8015: PUSH
8016: LD_INT 21
8018: PUSH
8019: LD_INT 3
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: ST_TO_ADDR
// if not tmp then
8039: LD_VAR 0 2
8043: NOT
8044: IFFALSE 8048
// exit ;
8046: GO 8114
// for i in tmp do
8048: LD_ADDR_VAR 0 1
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8112
// begin SetTag ( i , tEscape ) ;
8061: LD_VAR 0 1
8065: PPUSH
8066: LD_EXP 17
8070: PPUSH
8071: CALL_OW 109
// if IsInUnit ( i ) then
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 310
8084: IFFALSE 8095
// ComExitBuilding ( i ) ;
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8095: LD_VAR 0 1
8099: PPUSH
8100: LD_INT 92
8102: PPUSH
8103: LD_INT 177
8105: PPUSH
8106: CALL_OW 171
// end ;
8110: GO 8058
8112: POP
8113: POP
// end ;
8114: PPOPN 2
8116: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8117: LD_INT 4
8119: PPUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PPUSH
8130: CALL_OW 70
8134: PUSH
8135: LD_EXP 15
8139: NOT
8140: AND
8141: PUSH
8142: LD_EXP 27
8146: PPUSH
8147: CALL_OW 302
8151: AND
8152: IFFALSE 8392
8154: GO 8156
8156: DISABLE
// begin DialogueOn ;
8157: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8161: LD_INT 111
8163: PPUSH
8164: LD_INT 54
8166: PPUSH
8167: LD_INT 2
8169: PPUSH
8170: LD_INT 16
8172: NEG
8173: PPUSH
8174: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8178: LD_INT 111
8180: PPUSH
8181: LD_INT 53
8183: PPUSH
8184: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8188: LD_INT 10
8190: PPUSH
8191: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8195: LD_EXP 27
8199: PPUSH
8200: LD_STRING DKs-Hannibal-1
8202: PPUSH
8203: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8207: LD_EXP 27
8211: PPUSH
8212: LD_STRING DKs-Hannibal-2
8214: PPUSH
8215: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8219: LD_EXP 27
8223: PPUSH
8224: LD_STRING DKs-Hannibal-3
8226: PPUSH
8227: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8231: LD_EXP 27
8235: PPUSH
8236: LD_STRING DKs-Hannibal-4
8238: PPUSH
8239: CALL_OW 88
// dwait ( 0 0$1 ) ;
8243: LD_INT 35
8245: PPUSH
8246: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8250: LD_INT 111
8252: PPUSH
8253: LD_INT 54
8255: PPUSH
8256: LD_INT 2
8258: PPUSH
8259: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8263: LD_INT 173
8265: PPUSH
8266: LD_INT 76
8268: PPUSH
8269: LD_INT 2
8271: PPUSH
8272: LD_INT 12
8274: NEG
8275: PPUSH
8276: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8280: LD_INT 173
8282: PPUSH
8283: LD_INT 76
8285: PPUSH
8286: LD_INT 2
8288: PPUSH
8289: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8293: LD_INT 173
8295: PPUSH
8296: LD_INT 76
8298: PPUSH
8299: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8303: LD_EXP 27
8307: PPUSH
8308: LD_STRING DKs-Hannibal-5
8310: PPUSH
8311: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8315: LD_EXP 22
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_INT 2
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 34
8332: PUSH
8333: LD_INT 26
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PPUSH
8344: CALL_OW 69
8348: NOT
8349: AND
8350: IFFALSE 8388
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8352: LD_EXP 22
8356: PPUSH
8357: LD_STRING DKam-Hannibal-a-6
8359: PPUSH
8360: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8364: LD_EXP 22
8368: PPUSH
8369: LD_STRING DKam-Hannibal-a-7
8371: PPUSH
8372: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8376: LD_EXP 19
8380: PPUSH
8381: LD_STRING DG-Hannibal-a-8
8383: PPUSH
8384: CALL_OW 88
// end ; DialogueOff ;
8388: CALL_OW 7
// end ;
8392: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8393: LD_INT 225
8395: PPUSH
8396: CALL_OW 302
8400: PUSH
8401: LD_INT 200
8403: PPUSH
8404: CALL_OW 302
8408: AND
8409: PUSH
8410: LD_INT 12
8412: PPUSH
8413: LD_INT 21
8415: PUSH
8416: LD_INT 3
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PPUSH
8423: CALL_OW 70
8427: PUSH
8428: LD_INT 2
8430: GREATER
8431: AND
8432: PUSH
8433: LD_INT 13
8435: PPUSH
8436: LD_INT 22
8438: PUSH
8439: LD_INT 2
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 70
8450: PUSH
8451: LD_INT 3
8453: GREATER
8454: AND
8455: IFFALSE 8468
8457: GO 8459
8459: DISABLE
// hannibalPath := true ;
8460: LD_ADDR_EXP 9
8464: PUSH
8465: LD_INT 1
8467: ST_TO_ADDR
8468: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8469: LD_EXP 9
8473: PUSH
8474: LD_INT 6
8476: PPUSH
8477: LD_INT 22
8479: PUSH
8480: LD_INT 2
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: AND
8492: IFFALSE 8837
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
8501: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8502: LD_ADDR_VAR 0 2
8506: PUSH
8507: LD_INT 6
8509: PPUSH
8510: LD_INT 22
8512: PUSH
8513: LD_INT 2
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 70
8524: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8525: LD_ADDR_VAR 0 3
8529: PUSH
8530: LD_VAR 0 2
8534: PPUSH
8535: LD_INT 34
8537: PUSH
8538: LD_INT 26
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 72
8549: PUSH
8550: LD_INT 0
8552: GREATER
8553: ST_TO_ADDR
// DialogueOn ;
8554: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8558: LD_EXP 18
8562: PPUSH
8563: LD_STRING DH-Cleverattack-1
8565: PPUSH
8566: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8570: LD_EXP 18
8574: PPUSH
8575: LD_STRING DH-Cleverattack-2
8577: PPUSH
8578: CALL_OW 88
// if hasFlameThrower then
8582: LD_VAR 0 3
8586: IFFALSE 8614
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8588: LD_EXP 34
8592: PPUSH
8593: LD_STRING DB-Cleverattack-3
8595: PPUSH
8596: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8600: LD_EXP 18
8604: PPUSH
8605: LD_STRING DH-Cleverattack-4
8607: PPUSH
8608: CALL_OW 88
// end else
8612: GO 8638
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8614: LD_EXP 34
8618: PPUSH
8619: LD_STRING DB-Cleverattack-a-3
8621: PPUSH
8622: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8626: LD_EXP 18
8630: PPUSH
8631: LD_STRING DH-Cleverattack-a-4
8633: PPUSH
8634: CALL_OW 88
// end ; DialogueOff ;
8638: CALL_OW 7
// if not hasFlameThrower then
8642: LD_VAR 0 3
8646: NOT
8647: IFFALSE 8651
// exit ;
8649: GO 8837
// earlyEscape := true ;
8651: LD_ADDR_EXP 16
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8659: LD_INT 140
8661: PPUSH
8662: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: LD_INT 22
8673: PUSH
8674: LD_INT 3
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: LD_INT 25
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 25
8696: PUSH
8697: LD_INT 2
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 25
8706: PUSH
8707: LD_INT 4
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 69
8728: PUSH
8729: LD_EXP 21
8733: PUSH
8734: LD_EXP 36
8738: PUSH
8739: LD_EXP 35
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: DIFF
8749: ST_TO_ADDR
// for i in tmp do
8750: LD_ADDR_VAR 0 1
8754: PUSH
8755: LD_VAR 0 2
8759: PUSH
8760: FOR_IN
8761: IFFALSE 8835
// begin if Prob ( 40 + 10 * Difficulty ) then
8763: LD_INT 40
8765: PUSH
8766: LD_INT 10
8768: PUSH
8769: LD_OWVAR 67
8773: MUL
8774: PLUS
8775: PPUSH
8776: CALL_OW 13
8780: IFFALSE 8784
// continue ;
8782: GO 8760
// SetTag ( i , tEscape ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_EXP 17
8793: PPUSH
8794: CALL_OW 109
// if IsInUnit ( i ) then
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 310
8807: IFFALSE 8818
// ComExitBuilding ( i ) ;
8809: LD_VAR 0 1
8813: PPUSH
8814: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8818: LD_VAR 0 1
8822: PPUSH
8823: LD_INT 92
8825: PPUSH
8826: LD_INT 177
8828: PPUSH
8829: CALL_OW 171
// end ;
8833: GO 8760
8835: POP
8836: POP
// end ;
8837: PPOPN 3
8839: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8840: LD_INT 9
8842: PPUSH
8843: LD_INT 2
8845: PUSH
8846: LD_INT 22
8848: PUSH
8849: LD_INT 3
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 22
8858: PUSH
8859: LD_INT 6
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: LIST
8870: PPUSH
8871: CALL_OW 70
8875: IFFALSE 8973
8877: GO 8879
8879: DISABLE
8880: LD_INT 0
8882: PPUSH
// begin enable ;
8883: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8884: LD_ADDR_VAR 0 1
8888: PUSH
8889: LD_INT 9
8891: PPUSH
8892: LD_INT 2
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 6
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 70
8924: PUSH
8925: FOR_IN
8926: IFFALSE 8971
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8928: LD_VAR 0 1
8932: PPUSH
8933: CALL_OW 110
8937: PUSH
8938: LD_EXP 17
8942: EQUAL
8943: PUSH
8944: LD_VAR 0 1
8948: PPUSH
8949: CALL_OW 255
8953: PUSH
8954: LD_INT 6
8956: EQUAL
8957: OR
8958: IFFALSE 8969
// RemoveUnit ( i ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: CALL_OW 64
8969: GO 8925
8971: POP
8972: POP
// end ;
8973: PPOPN 1
8975: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8976: LD_EXP 23
8980: PUSH
8981: LD_EXP 23
8985: PPUSH
8986: CALL_OW 256
8990: PUSH
8991: LD_INT 3
8993: LESS
8994: AND
8995: IFFALSE 9041
8997: GO 8999
8999: DISABLE
// begin DialogueOn ;
9000: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9004: LD_EXP 23
9008: PPUSH
9009: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9013: LD_EXP 23
9017: PPUSH
9018: LD_STRING DK-Kkilled-1
9020: PPUSH
9021: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9025: LD_EXP 18
9029: PPUSH
9030: LD_STRING DH-Kkilled-2
9032: PPUSH
9033: CALL_OW 88
// DialogueOff ;
9037: CALL_OW 7
// end ;
9041: END
// every 0 0$1 trigger kaiaKilledByRussian do
9042: LD_EXP 8
9046: IFFALSE 9063
9048: GO 9050
9050: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9051: LD_EXP 18
9055: PPUSH
9056: LD_STRING DH-Kkilled-3
9058: PPUSH
9059: CALL_OW 88
9063: END
// every 0 0$1 trigger tick >= 24 24$00 do
9064: LD_OWVAR 1
9068: PUSH
9069: LD_INT 50400
9071: GREATEREQUAL
9072: IFFALSE 9109
9074: GO 9076
9076: DISABLE
// begin DialogueOn ;
9077: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9081: LD_EXP 26
9085: PPUSH
9086: LD_STRING DShar-slow-1
9088: PPUSH
9089: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9093: LD_EXP 26
9097: PPUSH
9098: LD_STRING DShar-slow-2
9100: PPUSH
9101: CALL_OW 94
// DialogueOff ;
9105: CALL_OW 7
// end ;
9109: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9110: LD_OWVAR 1
9114: PUSH
9115: LD_INT 84000
9117: PUSH
9118: LD_INT 75600
9120: PUSH
9121: LD_INT 67200
9123: PUSH
9124: LD_INT 63000
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: PUSH
9133: LD_OWVAR 67
9137: ARRAY
9138: GREATEREQUAL
9139: IFFALSE 9183
9141: GO 9143
9143: DISABLE
// begin DialogueOn ;
9144: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9148: LD_EXP 26
9152: PPUSH
9153: LD_STRING DShar-fail-1
9155: PPUSH
9156: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9160: LD_EXP 26
9164: PPUSH
9165: LD_STRING DShar-fail-2
9167: PPUSH
9168: CALL_OW 94
// DialogueOff ;
9172: CALL_OW 7
// YouLost ( Time ) ;
9176: LD_STRING Time
9178: PPUSH
9179: CALL_OW 104
// end ;
9183: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9184: LD_INT 22
9186: PUSH
9187: LD_INT 3
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 30
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 30
9209: PUSH
9210: LD_INT 0
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 69
9230: PUSH
9231: LD_INT 0
9233: EQUAL
9234: IFFALSE 9745
9236: GO 9238
9238: DISABLE
9239: LD_INT 0
9241: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9242: LD_OWVAR 1
9246: PUSH
9247: LD_EXP 5
9251: PLUS
9252: PUSH
9253: LD_INT 157500
9255: PUSH
9256: LD_INT 147000
9258: PUSH
9259: LD_INT 136500
9261: PUSH
9262: LD_INT 126000
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: PUSH
9271: LD_OWVAR 67
9275: ARRAY
9276: LESSEQUAL
9277: IFFALSE 9291
// AddMedal ( med1 , 1 ) else
9279: LD_STRING med1
9281: PPUSH
9282: LD_INT 1
9284: PPUSH
9285: CALL_OW 101
9289: GO 9302
// AddMedal ( med1 , - 1 ) ;
9291: LD_STRING med1
9293: PPUSH
9294: LD_INT 1
9296: NEG
9297: PPUSH
9298: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9302: LD_EXP 7
9306: PUSH
9307: LD_INT 3
9309: GREATEREQUAL
9310: PUSH
9311: LD_EXP 11
9315: MUL
9316: PUSH
9317: LD_EXP 9
9321: MUL
9322: PUSH
9323: LD_EXP 6
9327: PUSH
9328: LD_INT 6
9330: PUSH
9331: LD_INT 5
9333: PUSH
9334: LD_INT 4
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: LD_OWVAR 67
9350: ARRAY
9351: LESS
9352: MUL
9353: IFFALSE 9367
// AddMedal ( med2 , 1 ) else
9355: LD_STRING med2
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 101
9365: GO 9378
// AddMedal ( med2 , - 1 ) ;
9367: LD_STRING med2
9369: PPUSH
9370: LD_INT 1
9372: NEG
9373: PPUSH
9374: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9378: LD_EXP 14
9382: PPUSH
9383: LD_STRING 04_2_GaidarKilled
9385: PPUSH
9386: CALL_OW 39
// if gaidarKilled then
9390: LD_EXP 14
9394: IFFALSE 9408
// AddMedal ( med3 , 1 ) else
9396: LD_STRING med3
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 101
9406: GO 9419
// AddMedal ( med3 , - 1 ) ;
9408: LD_STRING med3
9410: PPUSH
9411: LD_INT 1
9413: NEG
9414: PPUSH
9415: CALL_OW 101
// GiveMedals ( MAIN ) ;
9419: LD_STRING MAIN
9421: PPUSH
9422: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9426: LD_INT 22
9428: PUSH
9429: LD_INT 2
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 3
9438: PUSH
9439: LD_INT 23
9441: PUSH
9442: LD_INT 0
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 69
9461: PPUSH
9462: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9466: LD_EXP 18
9470: PPUSH
9471: LD_STRING 04_2_Heike
9473: PPUSH
9474: CALL_OW 38
// if Aviradze then
9478: LD_EXP 28
9482: IFFALSE 9496
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9484: LD_EXP 28
9488: PPUSH
9489: LD_STRING 04_2_Aviradze
9491: PPUSH
9492: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9496: LD_EXP 21
9500: PUSH
9501: LD_EXP 21
9505: PPUSH
9506: CALL_OW 255
9510: PUSH
9511: LD_INT 2
9513: EQUAL
9514: AND
9515: IFFALSE 9545
// begin if ibrahimOnRuSide then
9517: LD_EXP 3
9521: IFFALSE 9533
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_STRING 04_2_IbrahimJoined
9528: PPUSH
9529: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9533: LD_EXP 21
9537: PPUSH
9538: LD_STRING 04_2_Ibrahim
9540: PPUSH
9541: CALL_OW 38
// end ; if Kamil then
9545: LD_EXP 22
9549: IFFALSE 9563
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9551: LD_EXP 22
9555: PPUSH
9556: LD_STRING 04_2_Kamil
9558: PPUSH
9559: CALL_OW 38
// if Sophia then
9563: LD_EXP 24
9567: IFFALSE 9581
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9569: LD_EXP 24
9573: PPUSH
9574: LD_STRING 04_2_Sophia
9576: PPUSH
9577: CALL_OW 38
// if Kaia then
9581: LD_EXP 23
9585: IFFALSE 9599
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9587: LD_EXP 23
9591: PPUSH
9592: LD_STRING 04_2_Kaia
9594: PPUSH
9595: CALL_OW 38
// if Givi then
9599: LD_EXP 19
9603: IFFALSE 9617
// SaveCharacters ( Givi , 04_2_Givi ) ;
9605: LD_EXP 19
9609: PPUSH
9610: LD_STRING 04_2_Givi
9612: PPUSH
9613: CALL_OW 38
// if Mike then
9617: LD_EXP 20
9621: IFFALSE 9635
// SaveCharacters ( Mike , 04_2_Mike ) ;
9623: LD_EXP 20
9627: PPUSH
9628: LD_STRING 04_2_Mike
9630: PPUSH
9631: CALL_OW 38
// if Markov then
9635: LD_EXP 25
9639: IFFALSE 9653
// SaveCharacters ( Markov , 04_2_Markov ) ;
9641: LD_EXP 25
9645: PPUSH
9646: LD_STRING 04_2_Markov
9648: PPUSH
9649: CALL_OW 38
// if Kurt then
9653: LD_EXP 27
9657: IFFALSE 9671
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9659: LD_EXP 27
9663: PPUSH
9664: LD_STRING 04_2_Kurt
9666: PPUSH
9667: CALL_OW 38
// if heikeSecondSquad then
9671: LD_EXP 29
9675: IFFALSE 9689
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9677: LD_EXP 29
9681: PPUSH
9682: LD_STRING 04_2_others
9684: PPUSH
9685: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9689: LD_ADDR_VAR 0 1
9693: PUSH
9694: LD_INT 22
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 23
9706: PUSH
9707: LD_INT 0
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: ST_TO_ADDR
// if tmp then
9723: LD_VAR 0 1
9727: IFFALSE 9741
// SaveCharacters ( tmp , 04_2_apes ) ;
9729: LD_VAR 0 1
9733: PPUSH
9734: LD_STRING 04_2_apes
9736: PPUSH
9737: CALL_OW 38
// YouWin ;
9741: CALL_OW 103
// end ; end_of_file
9745: PPOPN 1
9747: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9748: LD_INT 0
9750: PPUSH
// if p2 = 100 then
9751: LD_VAR 0 2
9755: PUSH
9756: LD_INT 100
9758: EQUAL
9759: IFFALSE 10762
// begin if not StreamModeActive then
9761: LD_EXP 43
9765: NOT
9766: IFFALSE 9776
// StreamModeActive := true ;
9768: LD_ADDR_EXP 43
9772: PUSH
9773: LD_INT 1
9775: ST_TO_ADDR
// if p3 = 0 then
9776: LD_VAR 0 3
9780: PUSH
9781: LD_INT 0
9783: EQUAL
9784: IFFALSE 9790
// InitStreamMode ;
9786: CALL 10922 0 0
// if p3 = 1 then
9790: LD_VAR 0 3
9794: PUSH
9795: LD_INT 1
9797: EQUAL
9798: IFFALSE 9808
// sRocket := true ;
9800: LD_ADDR_EXP 48
9804: PUSH
9805: LD_INT 1
9807: ST_TO_ADDR
// if p3 = 2 then
9808: LD_VAR 0 3
9812: PUSH
9813: LD_INT 2
9815: EQUAL
9816: IFFALSE 9826
// sSpeed := true ;
9818: LD_ADDR_EXP 47
9822: PUSH
9823: LD_INT 1
9825: ST_TO_ADDR
// if p3 = 3 then
9826: LD_VAR 0 3
9830: PUSH
9831: LD_INT 3
9833: EQUAL
9834: IFFALSE 9844
// sEngine := true ;
9836: LD_ADDR_EXP 49
9840: PUSH
9841: LD_INT 1
9843: ST_TO_ADDR
// if p3 = 4 then
9844: LD_VAR 0 3
9848: PUSH
9849: LD_INT 4
9851: EQUAL
9852: IFFALSE 9862
// sSpec := true ;
9854: LD_ADDR_EXP 46
9858: PUSH
9859: LD_INT 1
9861: ST_TO_ADDR
// if p3 = 5 then
9862: LD_VAR 0 3
9866: PUSH
9867: LD_INT 5
9869: EQUAL
9870: IFFALSE 9880
// sLevel := true ;
9872: LD_ADDR_EXP 50
9876: PUSH
9877: LD_INT 1
9879: ST_TO_ADDR
// if p3 = 6 then
9880: LD_VAR 0 3
9884: PUSH
9885: LD_INT 6
9887: EQUAL
9888: IFFALSE 9898
// sArmoury := true ;
9890: LD_ADDR_EXP 51
9894: PUSH
9895: LD_INT 1
9897: ST_TO_ADDR
// if p3 = 7 then
9898: LD_VAR 0 3
9902: PUSH
9903: LD_INT 7
9905: EQUAL
9906: IFFALSE 9916
// sRadar := true ;
9908: LD_ADDR_EXP 52
9912: PUSH
9913: LD_INT 1
9915: ST_TO_ADDR
// if p3 = 8 then
9916: LD_VAR 0 3
9920: PUSH
9921: LD_INT 8
9923: EQUAL
9924: IFFALSE 9934
// sBunker := true ;
9926: LD_ADDR_EXP 53
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// if p3 = 9 then
9934: LD_VAR 0 3
9938: PUSH
9939: LD_INT 9
9941: EQUAL
9942: IFFALSE 9952
// sHack := true ;
9944: LD_ADDR_EXP 54
9948: PUSH
9949: LD_INT 1
9951: ST_TO_ADDR
// if p3 = 10 then
9952: LD_VAR 0 3
9956: PUSH
9957: LD_INT 10
9959: EQUAL
9960: IFFALSE 9970
// sFire := true ;
9962: LD_ADDR_EXP 55
9966: PUSH
9967: LD_INT 1
9969: ST_TO_ADDR
// if p3 = 11 then
9970: LD_VAR 0 3
9974: PUSH
9975: LD_INT 11
9977: EQUAL
9978: IFFALSE 9988
// sRefresh := true ;
9980: LD_ADDR_EXP 56
9984: PUSH
9985: LD_INT 1
9987: ST_TO_ADDR
// if p3 = 12 then
9988: LD_VAR 0 3
9992: PUSH
9993: LD_INT 12
9995: EQUAL
9996: IFFALSE 10006
// sExp := true ;
9998: LD_ADDR_EXP 57
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// if p3 = 13 then
10006: LD_VAR 0 3
10010: PUSH
10011: LD_INT 13
10013: EQUAL
10014: IFFALSE 10024
// sDepot := true ;
10016: LD_ADDR_EXP 58
10020: PUSH
10021: LD_INT 1
10023: ST_TO_ADDR
// if p3 = 14 then
10024: LD_VAR 0 3
10028: PUSH
10029: LD_INT 14
10031: EQUAL
10032: IFFALSE 10042
// sFlag := true ;
10034: LD_ADDR_EXP 59
10038: PUSH
10039: LD_INT 1
10041: ST_TO_ADDR
// if p3 = 15 then
10042: LD_VAR 0 3
10046: PUSH
10047: LD_INT 15
10049: EQUAL
10050: IFFALSE 10060
// sKamikadze := true ;
10052: LD_ADDR_EXP 67
10056: PUSH
10057: LD_INT 1
10059: ST_TO_ADDR
// if p3 = 16 then
10060: LD_VAR 0 3
10064: PUSH
10065: LD_INT 16
10067: EQUAL
10068: IFFALSE 10078
// sTroll := true ;
10070: LD_ADDR_EXP 68
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// if p3 = 17 then
10078: LD_VAR 0 3
10082: PUSH
10083: LD_INT 17
10085: EQUAL
10086: IFFALSE 10096
// sSlow := true ;
10088: LD_ADDR_EXP 69
10092: PUSH
10093: LD_INT 1
10095: ST_TO_ADDR
// if p3 = 18 then
10096: LD_VAR 0 3
10100: PUSH
10101: LD_INT 18
10103: EQUAL
10104: IFFALSE 10114
// sLack := true ;
10106: LD_ADDR_EXP 70
10110: PUSH
10111: LD_INT 1
10113: ST_TO_ADDR
// if p3 = 19 then
10114: LD_VAR 0 3
10118: PUSH
10119: LD_INT 19
10121: EQUAL
10122: IFFALSE 10132
// sTank := true ;
10124: LD_ADDR_EXP 72
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// if p3 = 20 then
10132: LD_VAR 0 3
10136: PUSH
10137: LD_INT 20
10139: EQUAL
10140: IFFALSE 10150
// sRemote := true ;
10142: LD_ADDR_EXP 73
10146: PUSH
10147: LD_INT 1
10149: ST_TO_ADDR
// if p3 = 21 then
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 21
10157: EQUAL
10158: IFFALSE 10168
// sPowell := true ;
10160: LD_ADDR_EXP 74
10164: PUSH
10165: LD_INT 1
10167: ST_TO_ADDR
// if p3 = 22 then
10168: LD_VAR 0 3
10172: PUSH
10173: LD_INT 22
10175: EQUAL
10176: IFFALSE 10186
// sTeleport := true ;
10178: LD_ADDR_EXP 77
10182: PUSH
10183: LD_INT 1
10185: ST_TO_ADDR
// if p3 = 23 then
10186: LD_VAR 0 3
10190: PUSH
10191: LD_INT 23
10193: EQUAL
10194: IFFALSE 10204
// sOilTower := true ;
10196: LD_ADDR_EXP 79
10200: PUSH
10201: LD_INT 1
10203: ST_TO_ADDR
// if p3 = 24 then
10204: LD_VAR 0 3
10208: PUSH
10209: LD_INT 24
10211: EQUAL
10212: IFFALSE 10222
// sShovel := true ;
10214: LD_ADDR_EXP 80
10218: PUSH
10219: LD_INT 1
10221: ST_TO_ADDR
// if p3 = 25 then
10222: LD_VAR 0 3
10226: PUSH
10227: LD_INT 25
10229: EQUAL
10230: IFFALSE 10240
// sSheik := true ;
10232: LD_ADDR_EXP 81
10236: PUSH
10237: LD_INT 1
10239: ST_TO_ADDR
// if p3 = 26 then
10240: LD_VAR 0 3
10244: PUSH
10245: LD_INT 26
10247: EQUAL
10248: IFFALSE 10258
// sEarthquake := true ;
10250: LD_ADDR_EXP 83
10254: PUSH
10255: LD_INT 1
10257: ST_TO_ADDR
// if p3 = 27 then
10258: LD_VAR 0 3
10262: PUSH
10263: LD_INT 27
10265: EQUAL
10266: IFFALSE 10276
// sAI := true ;
10268: LD_ADDR_EXP 84
10272: PUSH
10273: LD_INT 1
10275: ST_TO_ADDR
// if p3 = 28 then
10276: LD_VAR 0 3
10280: PUSH
10281: LD_INT 28
10283: EQUAL
10284: IFFALSE 10294
// sCargo := true ;
10286: LD_ADDR_EXP 87
10290: PUSH
10291: LD_INT 1
10293: ST_TO_ADDR
// if p3 = 29 then
10294: LD_VAR 0 3
10298: PUSH
10299: LD_INT 29
10301: EQUAL
10302: IFFALSE 10312
// sDLaser := true ;
10304: LD_ADDR_EXP 88
10308: PUSH
10309: LD_INT 1
10311: ST_TO_ADDR
// if p3 = 30 then
10312: LD_VAR 0 3
10316: PUSH
10317: LD_INT 30
10319: EQUAL
10320: IFFALSE 10330
// sExchange := true ;
10322: LD_ADDR_EXP 89
10326: PUSH
10327: LD_INT 1
10329: ST_TO_ADDR
// if p3 = 31 then
10330: LD_VAR 0 3
10334: PUSH
10335: LD_INT 31
10337: EQUAL
10338: IFFALSE 10348
// sFac := true ;
10340: LD_ADDR_EXP 90
10344: PUSH
10345: LD_INT 1
10347: ST_TO_ADDR
// if p3 = 32 then
10348: LD_VAR 0 3
10352: PUSH
10353: LD_INT 32
10355: EQUAL
10356: IFFALSE 10366
// sPower := true ;
10358: LD_ADDR_EXP 91
10362: PUSH
10363: LD_INT 1
10365: ST_TO_ADDR
// if p3 = 33 then
10366: LD_VAR 0 3
10370: PUSH
10371: LD_INT 33
10373: EQUAL
10374: IFFALSE 10384
// sRandom := true ;
10376: LD_ADDR_EXP 92
10380: PUSH
10381: LD_INT 1
10383: ST_TO_ADDR
// if p3 = 34 then
10384: LD_VAR 0 3
10388: PUSH
10389: LD_INT 34
10391: EQUAL
10392: IFFALSE 10402
// sShield := true ;
10394: LD_ADDR_EXP 93
10398: PUSH
10399: LD_INT 1
10401: ST_TO_ADDR
// if p3 = 35 then
10402: LD_VAR 0 3
10406: PUSH
10407: LD_INT 35
10409: EQUAL
10410: IFFALSE 10420
// sTime := true ;
10412: LD_ADDR_EXP 94
10416: PUSH
10417: LD_INT 1
10419: ST_TO_ADDR
// if p3 = 36 then
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 36
10427: EQUAL
10428: IFFALSE 10438
// sTools := true ;
10430: LD_ADDR_EXP 95
10434: PUSH
10435: LD_INT 1
10437: ST_TO_ADDR
// if p3 = 101 then
10438: LD_VAR 0 3
10442: PUSH
10443: LD_INT 101
10445: EQUAL
10446: IFFALSE 10456
// sSold := true ;
10448: LD_ADDR_EXP 60
10452: PUSH
10453: LD_INT 1
10455: ST_TO_ADDR
// if p3 = 102 then
10456: LD_VAR 0 3
10460: PUSH
10461: LD_INT 102
10463: EQUAL
10464: IFFALSE 10474
// sDiff := true ;
10466: LD_ADDR_EXP 61
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// if p3 = 103 then
10474: LD_VAR 0 3
10478: PUSH
10479: LD_INT 103
10481: EQUAL
10482: IFFALSE 10492
// sFog := true ;
10484: LD_ADDR_EXP 64
10488: PUSH
10489: LD_INT 1
10491: ST_TO_ADDR
// if p3 = 104 then
10492: LD_VAR 0 3
10496: PUSH
10497: LD_INT 104
10499: EQUAL
10500: IFFALSE 10510
// sReset := true ;
10502: LD_ADDR_EXP 65
10506: PUSH
10507: LD_INT 1
10509: ST_TO_ADDR
// if p3 = 105 then
10510: LD_VAR 0 3
10514: PUSH
10515: LD_INT 105
10517: EQUAL
10518: IFFALSE 10528
// sSun := true ;
10520: LD_ADDR_EXP 66
10524: PUSH
10525: LD_INT 1
10527: ST_TO_ADDR
// if p3 = 106 then
10528: LD_VAR 0 3
10532: PUSH
10533: LD_INT 106
10535: EQUAL
10536: IFFALSE 10546
// sTiger := true ;
10538: LD_ADDR_EXP 62
10542: PUSH
10543: LD_INT 1
10545: ST_TO_ADDR
// if p3 = 107 then
10546: LD_VAR 0 3
10550: PUSH
10551: LD_INT 107
10553: EQUAL
10554: IFFALSE 10564
// sBomb := true ;
10556: LD_ADDR_EXP 63
10560: PUSH
10561: LD_INT 1
10563: ST_TO_ADDR
// if p3 = 108 then
10564: LD_VAR 0 3
10568: PUSH
10569: LD_INT 108
10571: EQUAL
10572: IFFALSE 10582
// sWound := true ;
10574: LD_ADDR_EXP 71
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// if p3 = 109 then
10582: LD_VAR 0 3
10586: PUSH
10587: LD_INT 109
10589: EQUAL
10590: IFFALSE 10600
// sBetray := true ;
10592: LD_ADDR_EXP 75
10596: PUSH
10597: LD_INT 1
10599: ST_TO_ADDR
// if p3 = 110 then
10600: LD_VAR 0 3
10604: PUSH
10605: LD_INT 110
10607: EQUAL
10608: IFFALSE 10618
// sContamin := true ;
10610: LD_ADDR_EXP 76
10614: PUSH
10615: LD_INT 1
10617: ST_TO_ADDR
// if p3 = 111 then
10618: LD_VAR 0 3
10622: PUSH
10623: LD_INT 111
10625: EQUAL
10626: IFFALSE 10636
// sOil := true ;
10628: LD_ADDR_EXP 78
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// if p3 = 112 then
10636: LD_VAR 0 3
10640: PUSH
10641: LD_INT 112
10643: EQUAL
10644: IFFALSE 10654
// sStu := true ;
10646: LD_ADDR_EXP 82
10650: PUSH
10651: LD_INT 1
10653: ST_TO_ADDR
// if p3 = 113 then
10654: LD_VAR 0 3
10658: PUSH
10659: LD_INT 113
10661: EQUAL
10662: IFFALSE 10672
// sBazooka := true ;
10664: LD_ADDR_EXP 85
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// if p3 = 114 then
10672: LD_VAR 0 3
10676: PUSH
10677: LD_INT 114
10679: EQUAL
10680: IFFALSE 10690
// sMortar := true ;
10682: LD_ADDR_EXP 86
10686: PUSH
10687: LD_INT 1
10689: ST_TO_ADDR
// if p3 = 115 then
10690: LD_VAR 0 3
10694: PUSH
10695: LD_INT 115
10697: EQUAL
10698: IFFALSE 10708
// sRanger := true ;
10700: LD_ADDR_EXP 96
10704: PUSH
10705: LD_INT 1
10707: ST_TO_ADDR
// if p3 = 116 then
10708: LD_VAR 0 3
10712: PUSH
10713: LD_INT 116
10715: EQUAL
10716: IFFALSE 10726
// sComputer := true ;
10718: LD_ADDR_EXP 97
10722: PUSH
10723: LD_INT 1
10725: ST_TO_ADDR
// if p3 = 117 then
10726: LD_VAR 0 3
10730: PUSH
10731: LD_INT 117
10733: EQUAL
10734: IFFALSE 10744
// s30 := true ;
10736: LD_ADDR_EXP 98
10740: PUSH
10741: LD_INT 1
10743: ST_TO_ADDR
// if p3 = 118 then
10744: LD_VAR 0 3
10748: PUSH
10749: LD_INT 118
10751: EQUAL
10752: IFFALSE 10762
// s60 := true ;
10754: LD_ADDR_EXP 99
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// end ; if p2 = 101 then
10762: LD_VAR 0 2
10766: PUSH
10767: LD_INT 101
10769: EQUAL
10770: IFFALSE 10898
// begin case p3 of 1 :
10772: LD_VAR 0 3
10776: PUSH
10777: LD_INT 1
10779: DOUBLE
10780: EQUAL
10781: IFTRUE 10785
10783: GO 10792
10785: POP
// hHackUnlimitedResources ; 2 :
10786: CALL 22494 0 0
10790: GO 10898
10792: LD_INT 2
10794: DOUBLE
10795: EQUAL
10796: IFTRUE 10800
10798: GO 10807
10800: POP
// hHackSetLevel10 ; 3 :
10801: CALL 22627 0 0
10805: GO 10898
10807: LD_INT 3
10809: DOUBLE
10810: EQUAL
10811: IFTRUE 10815
10813: GO 10822
10815: POP
// hHackSetLevel10YourUnits ; 4 :
10816: CALL 22712 0 0
10820: GO 10898
10822: LD_INT 4
10824: DOUBLE
10825: EQUAL
10826: IFTRUE 10830
10828: GO 10837
10830: POP
// hHackInvincible ; 5 :
10831: CALL 23160 0 0
10835: GO 10898
10837: LD_INT 5
10839: DOUBLE
10840: EQUAL
10841: IFTRUE 10845
10843: GO 10852
10845: POP
// hHackInvisible ; 6 :
10846: CALL 23271 0 0
10850: GO 10898
10852: LD_INT 6
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10867
10860: POP
// hHackChangeYourSide ; 7 :
10861: CALL 23328 0 0
10865: GO 10898
10867: LD_INT 7
10869: DOUBLE
10870: EQUAL
10871: IFTRUE 10875
10873: GO 10882
10875: POP
// hHackChangeUnitSide ; 8 :
10876: CALL 23370 0 0
10880: GO 10898
10882: LD_INT 8
10884: DOUBLE
10885: EQUAL
10886: IFTRUE 10890
10888: GO 10897
10890: POP
// hHackFog ; end ;
10891: CALL 23471 0 0
10895: GO 10898
10897: POP
// end ; end ;
10898: LD_VAR 0 7
10902: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10903: GO 10905
10905: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10906: LD_STRING initStreamRollete();
10908: PPUSH
10909: CALL_OW 559
// InitStreamMode ;
10913: CALL 10922 0 0
// DefineStreamItems ( ) ;
10917: CALL 11386 0 0
// end ;
10921: END
// function InitStreamMode ; begin
10922: LD_INT 0
10924: PPUSH
// streamModeActive := false ;
10925: LD_ADDR_EXP 43
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// normalCounter := 36 ;
10933: LD_ADDR_EXP 44
10937: PUSH
10938: LD_INT 36
10940: ST_TO_ADDR
// hardcoreCounter := 16 ;
10941: LD_ADDR_EXP 45
10945: PUSH
10946: LD_INT 16
10948: ST_TO_ADDR
// sRocket := false ;
10949: LD_ADDR_EXP 48
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// sSpeed := false ;
10957: LD_ADDR_EXP 47
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// sEngine := false ;
10965: LD_ADDR_EXP 49
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// sSpec := false ;
10973: LD_ADDR_EXP 46
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// sLevel := false ;
10981: LD_ADDR_EXP 50
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// sArmoury := false ;
10989: LD_ADDR_EXP 51
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// sRadar := false ;
10997: LD_ADDR_EXP 52
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// sBunker := false ;
11005: LD_ADDR_EXP 53
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// sHack := false ;
11013: LD_ADDR_EXP 54
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// sFire := false ;
11021: LD_ADDR_EXP 55
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// sRefresh := false ;
11029: LD_ADDR_EXP 56
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// sExp := false ;
11037: LD_ADDR_EXP 57
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// sDepot := false ;
11045: LD_ADDR_EXP 58
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// sFlag := false ;
11053: LD_ADDR_EXP 59
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// sKamikadze := false ;
11061: LD_ADDR_EXP 67
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// sTroll := false ;
11069: LD_ADDR_EXP 68
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// sSlow := false ;
11077: LD_ADDR_EXP 69
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// sLack := false ;
11085: LD_ADDR_EXP 70
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// sTank := false ;
11093: LD_ADDR_EXP 72
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// sRemote := false ;
11101: LD_ADDR_EXP 73
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// sPowell := false ;
11109: LD_ADDR_EXP 74
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// sTeleport := false ;
11117: LD_ADDR_EXP 77
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// sOilTower := false ;
11125: LD_ADDR_EXP 79
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// sShovel := false ;
11133: LD_ADDR_EXP 80
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// sSheik := false ;
11141: LD_ADDR_EXP 81
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// sEarthquake := false ;
11149: LD_ADDR_EXP 83
11153: PUSH
11154: LD_INT 0
11156: ST_TO_ADDR
// sAI := false ;
11157: LD_ADDR_EXP 84
11161: PUSH
11162: LD_INT 0
11164: ST_TO_ADDR
// sCargo := false ;
11165: LD_ADDR_EXP 87
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// sDLaser := false ;
11173: LD_ADDR_EXP 88
11177: PUSH
11178: LD_INT 0
11180: ST_TO_ADDR
// sExchange := false ;
11181: LD_ADDR_EXP 89
11185: PUSH
11186: LD_INT 0
11188: ST_TO_ADDR
// sFac := false ;
11189: LD_ADDR_EXP 90
11193: PUSH
11194: LD_INT 0
11196: ST_TO_ADDR
// sPower := false ;
11197: LD_ADDR_EXP 91
11201: PUSH
11202: LD_INT 0
11204: ST_TO_ADDR
// sRandom := false ;
11205: LD_ADDR_EXP 92
11209: PUSH
11210: LD_INT 0
11212: ST_TO_ADDR
// sShield := false ;
11213: LD_ADDR_EXP 93
11217: PUSH
11218: LD_INT 0
11220: ST_TO_ADDR
// sTime := false ;
11221: LD_ADDR_EXP 94
11225: PUSH
11226: LD_INT 0
11228: ST_TO_ADDR
// sTools := false ;
11229: LD_ADDR_EXP 95
11233: PUSH
11234: LD_INT 0
11236: ST_TO_ADDR
// sSold := false ;
11237: LD_ADDR_EXP 60
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// sDiff := false ;
11245: LD_ADDR_EXP 61
11249: PUSH
11250: LD_INT 0
11252: ST_TO_ADDR
// sFog := false ;
11253: LD_ADDR_EXP 64
11257: PUSH
11258: LD_INT 0
11260: ST_TO_ADDR
// sReset := false ;
11261: LD_ADDR_EXP 65
11265: PUSH
11266: LD_INT 0
11268: ST_TO_ADDR
// sSun := false ;
11269: LD_ADDR_EXP 66
11273: PUSH
11274: LD_INT 0
11276: ST_TO_ADDR
// sTiger := false ;
11277: LD_ADDR_EXP 62
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// sBomb := false ;
11285: LD_ADDR_EXP 63
11289: PUSH
11290: LD_INT 0
11292: ST_TO_ADDR
// sWound := false ;
11293: LD_ADDR_EXP 71
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// sBetray := false ;
11301: LD_ADDR_EXP 75
11305: PUSH
11306: LD_INT 0
11308: ST_TO_ADDR
// sContamin := false ;
11309: LD_ADDR_EXP 76
11313: PUSH
11314: LD_INT 0
11316: ST_TO_ADDR
// sOil := false ;
11317: LD_ADDR_EXP 78
11321: PUSH
11322: LD_INT 0
11324: ST_TO_ADDR
// sStu := false ;
11325: LD_ADDR_EXP 82
11329: PUSH
11330: LD_INT 0
11332: ST_TO_ADDR
// sBazooka := false ;
11333: LD_ADDR_EXP 85
11337: PUSH
11338: LD_INT 0
11340: ST_TO_ADDR
// sMortar := false ;
11341: LD_ADDR_EXP 86
11345: PUSH
11346: LD_INT 0
11348: ST_TO_ADDR
// sRanger := false ;
11349: LD_ADDR_EXP 96
11353: PUSH
11354: LD_INT 0
11356: ST_TO_ADDR
// sComputer := false ;
11357: LD_ADDR_EXP 97
11361: PUSH
11362: LD_INT 0
11364: ST_TO_ADDR
// s30 := false ;
11365: LD_ADDR_EXP 98
11369: PUSH
11370: LD_INT 0
11372: ST_TO_ADDR
// s60 := false ;
11373: LD_ADDR_EXP 99
11377: PUSH
11378: LD_INT 0
11380: ST_TO_ADDR
// end ;
11381: LD_VAR 0 1
11385: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11386: LD_INT 0
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
// result := [ ] ;
11393: LD_ADDR_VAR 0 1
11397: PUSH
11398: EMPTY
11399: ST_TO_ADDR
// if campaign_id = 1 then
11400: LD_OWVAR 69
11404: PUSH
11405: LD_INT 1
11407: EQUAL
11408: IFFALSE 14574
// begin case mission_number of 1 :
11410: LD_OWVAR 70
11414: PUSH
11415: LD_INT 1
11417: DOUBLE
11418: EQUAL
11419: IFTRUE 11423
11421: GO 11499
11423: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11424: LD_ADDR_VAR 0 1
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: LD_INT 4
11434: PUSH
11435: LD_INT 11
11437: PUSH
11438: LD_INT 12
11440: PUSH
11441: LD_INT 15
11443: PUSH
11444: LD_INT 16
11446: PUSH
11447: LD_INT 22
11449: PUSH
11450: LD_INT 23
11452: PUSH
11453: LD_INT 26
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 101
11469: PUSH
11470: LD_INT 102
11472: PUSH
11473: LD_INT 106
11475: PUSH
11476: LD_INT 116
11478: PUSH
11479: LD_INT 117
11481: PUSH
11482: LD_INT 118
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: ST_TO_ADDR
11497: GO 14572
11499: LD_INT 2
11501: DOUBLE
11502: EQUAL
11503: IFTRUE 11507
11505: GO 11591
11507: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: LD_INT 4
11518: PUSH
11519: LD_INT 11
11521: PUSH
11522: LD_INT 12
11524: PUSH
11525: LD_INT 15
11527: PUSH
11528: LD_INT 16
11530: PUSH
11531: LD_INT 22
11533: PUSH
11534: LD_INT 23
11536: PUSH
11537: LD_INT 26
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 101
11553: PUSH
11554: LD_INT 102
11556: PUSH
11557: LD_INT 105
11559: PUSH
11560: LD_INT 106
11562: PUSH
11563: LD_INT 108
11565: PUSH
11566: LD_INT 116
11568: PUSH
11569: LD_INT 117
11571: PUSH
11572: LD_INT 118
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: ST_TO_ADDR
11589: GO 14572
11591: LD_INT 3
11593: DOUBLE
11594: EQUAL
11595: IFTRUE 11599
11597: GO 11687
11599: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11600: LD_ADDR_VAR 0 1
11604: PUSH
11605: LD_INT 2
11607: PUSH
11608: LD_INT 4
11610: PUSH
11611: LD_INT 5
11613: PUSH
11614: LD_INT 11
11616: PUSH
11617: LD_INT 12
11619: PUSH
11620: LD_INT 15
11622: PUSH
11623: LD_INT 16
11625: PUSH
11626: LD_INT 22
11628: PUSH
11629: LD_INT 26
11631: PUSH
11632: LD_INT 36
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 101
11649: PUSH
11650: LD_INT 102
11652: PUSH
11653: LD_INT 105
11655: PUSH
11656: LD_INT 106
11658: PUSH
11659: LD_INT 108
11661: PUSH
11662: LD_INT 116
11664: PUSH
11665: LD_INT 117
11667: PUSH
11668: LD_INT 118
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: ST_TO_ADDR
11685: GO 14572
11687: LD_INT 4
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11791
11695: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11696: LD_ADDR_VAR 0 1
11700: PUSH
11701: LD_INT 2
11703: PUSH
11704: LD_INT 4
11706: PUSH
11707: LD_INT 5
11709: PUSH
11710: LD_INT 8
11712: PUSH
11713: LD_INT 11
11715: PUSH
11716: LD_INT 12
11718: PUSH
11719: LD_INT 15
11721: PUSH
11722: LD_INT 16
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_INT 23
11730: PUSH
11731: LD_INT 26
11733: PUSH
11734: LD_INT 36
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 101
11753: PUSH
11754: LD_INT 102
11756: PUSH
11757: LD_INT 105
11759: PUSH
11760: LD_INT 106
11762: PUSH
11763: LD_INT 108
11765: PUSH
11766: LD_INT 116
11768: PUSH
11769: LD_INT 117
11771: PUSH
11772: LD_INT 118
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: ST_TO_ADDR
11789: GO 14572
11791: LD_INT 5
11793: DOUBLE
11794: EQUAL
11795: IFTRUE 11799
11797: GO 11911
11799: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11800: LD_ADDR_VAR 0 1
11804: PUSH
11805: LD_INT 2
11807: PUSH
11808: LD_INT 4
11810: PUSH
11811: LD_INT 5
11813: PUSH
11814: LD_INT 6
11816: PUSH
11817: LD_INT 8
11819: PUSH
11820: LD_INT 11
11822: PUSH
11823: LD_INT 12
11825: PUSH
11826: LD_INT 15
11828: PUSH
11829: LD_INT 16
11831: PUSH
11832: LD_INT 22
11834: PUSH
11835: LD_INT 23
11837: PUSH
11838: LD_INT 25
11840: PUSH
11841: LD_INT 26
11843: PUSH
11844: LD_INT 36
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: PUSH
11863: LD_INT 101
11865: PUSH
11866: LD_INT 102
11868: PUSH
11869: LD_INT 105
11871: PUSH
11872: LD_INT 106
11874: PUSH
11875: LD_INT 108
11877: PUSH
11878: LD_INT 109
11880: PUSH
11881: LD_INT 112
11883: PUSH
11884: LD_INT 116
11886: PUSH
11887: LD_INT 117
11889: PUSH
11890: LD_INT 118
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: ST_TO_ADDR
11909: GO 14572
11911: LD_INT 6
11913: DOUBLE
11914: EQUAL
11915: IFTRUE 11919
11917: GO 12051
11919: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11920: LD_ADDR_VAR 0 1
11924: PUSH
11925: LD_INT 2
11927: PUSH
11928: LD_INT 4
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 6
11936: PUSH
11937: LD_INT 8
11939: PUSH
11940: LD_INT 11
11942: PUSH
11943: LD_INT 12
11945: PUSH
11946: LD_INT 15
11948: PUSH
11949: LD_INT 16
11951: PUSH
11952: LD_INT 20
11954: PUSH
11955: LD_INT 21
11957: PUSH
11958: LD_INT 22
11960: PUSH
11961: LD_INT 23
11963: PUSH
11964: LD_INT 25
11966: PUSH
11967: LD_INT 26
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: LD_INT 31
11975: PUSH
11976: LD_INT 32
11978: PUSH
11979: LD_INT 36
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 101
12005: PUSH
12006: LD_INT 102
12008: PUSH
12009: LD_INT 105
12011: PUSH
12012: LD_INT 106
12014: PUSH
12015: LD_INT 108
12017: PUSH
12018: LD_INT 109
12020: PUSH
12021: LD_INT 112
12023: PUSH
12024: LD_INT 116
12026: PUSH
12027: LD_INT 117
12029: PUSH
12030: LD_INT 118
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: ST_TO_ADDR
12049: GO 14572
12051: LD_INT 7
12053: DOUBLE
12054: EQUAL
12055: IFTRUE 12059
12057: GO 12171
12059: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12060: LD_ADDR_VAR 0 1
12064: PUSH
12065: LD_INT 2
12067: PUSH
12068: LD_INT 4
12070: PUSH
12071: LD_INT 5
12073: PUSH
12074: LD_INT 7
12076: PUSH
12077: LD_INT 11
12079: PUSH
12080: LD_INT 12
12082: PUSH
12083: LD_INT 15
12085: PUSH
12086: LD_INT 16
12088: PUSH
12089: LD_INT 20
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 22
12097: PUSH
12098: LD_INT 23
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 26
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 101
12125: PUSH
12126: LD_INT 102
12128: PUSH
12129: LD_INT 103
12131: PUSH
12132: LD_INT 105
12134: PUSH
12135: LD_INT 106
12137: PUSH
12138: LD_INT 108
12140: PUSH
12141: LD_INT 112
12143: PUSH
12144: LD_INT 116
12146: PUSH
12147: LD_INT 117
12149: PUSH
12150: LD_INT 118
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: ST_TO_ADDR
12169: GO 14572
12171: LD_INT 8
12173: DOUBLE
12174: EQUAL
12175: IFTRUE 12179
12177: GO 12319
12179: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12180: LD_ADDR_VAR 0 1
12184: PUSH
12185: LD_INT 2
12187: PUSH
12188: LD_INT 4
12190: PUSH
12191: LD_INT 5
12193: PUSH
12194: LD_INT 6
12196: PUSH
12197: LD_INT 7
12199: PUSH
12200: LD_INT 8
12202: PUSH
12203: LD_INT 11
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: LD_INT 15
12211: PUSH
12212: LD_INT 16
12214: PUSH
12215: LD_INT 20
12217: PUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_INT 23
12226: PUSH
12227: LD_INT 25
12229: PUSH
12230: LD_INT 26
12232: PUSH
12233: LD_INT 30
12235: PUSH
12236: LD_INT 31
12238: PUSH
12239: LD_INT 32
12241: PUSH
12242: LD_INT 36
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 101
12269: PUSH
12270: LD_INT 102
12272: PUSH
12273: LD_INT 103
12275: PUSH
12276: LD_INT 105
12278: PUSH
12279: LD_INT 106
12281: PUSH
12282: LD_INT 108
12284: PUSH
12285: LD_INT 109
12287: PUSH
12288: LD_INT 112
12290: PUSH
12291: LD_INT 116
12293: PUSH
12294: LD_INT 117
12296: PUSH
12297: LD_INT 118
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: ST_TO_ADDR
12317: GO 14572
12319: LD_INT 9
12321: DOUBLE
12322: EQUAL
12323: IFTRUE 12327
12325: GO 12475
12327: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12328: LD_ADDR_VAR 0 1
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 4
12338: PUSH
12339: LD_INT 5
12341: PUSH
12342: LD_INT 6
12344: PUSH
12345: LD_INT 7
12347: PUSH
12348: LD_INT 8
12350: PUSH
12351: LD_INT 11
12353: PUSH
12354: LD_INT 12
12356: PUSH
12357: LD_INT 15
12359: PUSH
12360: LD_INT 16
12362: PUSH
12363: LD_INT 20
12365: PUSH
12366: LD_INT 21
12368: PUSH
12369: LD_INT 22
12371: PUSH
12372: LD_INT 23
12374: PUSH
12375: LD_INT 25
12377: PUSH
12378: LD_INT 26
12380: PUSH
12381: LD_INT 28
12383: PUSH
12384: LD_INT 30
12386: PUSH
12387: LD_INT 31
12389: PUSH
12390: LD_INT 32
12392: PUSH
12393: LD_INT 36
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 101
12421: PUSH
12422: LD_INT 102
12424: PUSH
12425: LD_INT 103
12427: PUSH
12428: LD_INT 105
12430: PUSH
12431: LD_INT 106
12433: PUSH
12434: LD_INT 108
12436: PUSH
12437: LD_INT 109
12439: PUSH
12440: LD_INT 112
12442: PUSH
12443: LD_INT 114
12445: PUSH
12446: LD_INT 116
12448: PUSH
12449: LD_INT 117
12451: PUSH
12452: LD_INT 118
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: ST_TO_ADDR
12473: GO 14572
12475: LD_INT 10
12477: DOUBLE
12478: EQUAL
12479: IFTRUE 12483
12481: GO 12679
12483: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12484: LD_ADDR_VAR 0 1
12488: PUSH
12489: LD_INT 2
12491: PUSH
12492: LD_INT 4
12494: PUSH
12495: LD_INT 5
12497: PUSH
12498: LD_INT 6
12500: PUSH
12501: LD_INT 7
12503: PUSH
12504: LD_INT 8
12506: PUSH
12507: LD_INT 9
12509: PUSH
12510: LD_INT 10
12512: PUSH
12513: LD_INT 11
12515: PUSH
12516: LD_INT 12
12518: PUSH
12519: LD_INT 13
12521: PUSH
12522: LD_INT 14
12524: PUSH
12525: LD_INT 15
12527: PUSH
12528: LD_INT 16
12530: PUSH
12531: LD_INT 17
12533: PUSH
12534: LD_INT 18
12536: PUSH
12537: LD_INT 19
12539: PUSH
12540: LD_INT 20
12542: PUSH
12543: LD_INT 21
12545: PUSH
12546: LD_INT 22
12548: PUSH
12549: LD_INT 23
12551: PUSH
12552: LD_INT 24
12554: PUSH
12555: LD_INT 25
12557: PUSH
12558: LD_INT 26
12560: PUSH
12561: LD_INT 28
12563: PUSH
12564: LD_INT 30
12566: PUSH
12567: LD_INT 31
12569: PUSH
12570: LD_INT 32
12572: PUSH
12573: LD_INT 36
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 101
12609: PUSH
12610: LD_INT 102
12612: PUSH
12613: LD_INT 103
12615: PUSH
12616: LD_INT 104
12618: PUSH
12619: LD_INT 105
12621: PUSH
12622: LD_INT 106
12624: PUSH
12625: LD_INT 107
12627: PUSH
12628: LD_INT 108
12630: PUSH
12631: LD_INT 109
12633: PUSH
12634: LD_INT 110
12636: PUSH
12637: LD_INT 111
12639: PUSH
12640: LD_INT 112
12642: PUSH
12643: LD_INT 114
12645: PUSH
12646: LD_INT 116
12648: PUSH
12649: LD_INT 117
12651: PUSH
12652: LD_INT 118
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: ST_TO_ADDR
12677: GO 14572
12679: LD_INT 11
12681: DOUBLE
12682: EQUAL
12683: IFTRUE 12687
12685: GO 12891
12687: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12688: LD_ADDR_VAR 0 1
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: LD_INT 3
12698: PUSH
12699: LD_INT 4
12701: PUSH
12702: LD_INT 5
12704: PUSH
12705: LD_INT 6
12707: PUSH
12708: LD_INT 7
12710: PUSH
12711: LD_INT 8
12713: PUSH
12714: LD_INT 9
12716: PUSH
12717: LD_INT 10
12719: PUSH
12720: LD_INT 11
12722: PUSH
12723: LD_INT 12
12725: PUSH
12726: LD_INT 13
12728: PUSH
12729: LD_INT 14
12731: PUSH
12732: LD_INT 15
12734: PUSH
12735: LD_INT 16
12737: PUSH
12738: LD_INT 17
12740: PUSH
12741: LD_INT 18
12743: PUSH
12744: LD_INT 19
12746: PUSH
12747: LD_INT 20
12749: PUSH
12750: LD_INT 21
12752: PUSH
12753: LD_INT 22
12755: PUSH
12756: LD_INT 23
12758: PUSH
12759: LD_INT 24
12761: PUSH
12762: LD_INT 25
12764: PUSH
12765: LD_INT 26
12767: PUSH
12768: LD_INT 28
12770: PUSH
12771: LD_INT 30
12773: PUSH
12774: LD_INT 31
12776: PUSH
12777: LD_INT 32
12779: PUSH
12780: LD_INT 34
12782: PUSH
12783: LD_INT 36
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 101
12821: PUSH
12822: LD_INT 102
12824: PUSH
12825: LD_INT 103
12827: PUSH
12828: LD_INT 104
12830: PUSH
12831: LD_INT 105
12833: PUSH
12834: LD_INT 106
12836: PUSH
12837: LD_INT 107
12839: PUSH
12840: LD_INT 108
12842: PUSH
12843: LD_INT 109
12845: PUSH
12846: LD_INT 110
12848: PUSH
12849: LD_INT 111
12851: PUSH
12852: LD_INT 112
12854: PUSH
12855: LD_INT 114
12857: PUSH
12858: LD_INT 116
12860: PUSH
12861: LD_INT 117
12863: PUSH
12864: LD_INT 118
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: ST_TO_ADDR
12889: GO 14572
12891: LD_INT 12
12893: DOUBLE
12894: EQUAL
12895: IFTRUE 12899
12897: GO 13119
12899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: LD_INT 1
12907: PUSH
12908: LD_INT 2
12910: PUSH
12911: LD_INT 3
12913: PUSH
12914: LD_INT 4
12916: PUSH
12917: LD_INT 5
12919: PUSH
12920: LD_INT 6
12922: PUSH
12923: LD_INT 7
12925: PUSH
12926: LD_INT 8
12928: PUSH
12929: LD_INT 9
12931: PUSH
12932: LD_INT 10
12934: PUSH
12935: LD_INT 11
12937: PUSH
12938: LD_INT 12
12940: PUSH
12941: LD_INT 13
12943: PUSH
12944: LD_INT 14
12946: PUSH
12947: LD_INT 15
12949: PUSH
12950: LD_INT 16
12952: PUSH
12953: LD_INT 17
12955: PUSH
12956: LD_INT 18
12958: PUSH
12959: LD_INT 19
12961: PUSH
12962: LD_INT 20
12964: PUSH
12965: LD_INT 21
12967: PUSH
12968: LD_INT 22
12970: PUSH
12971: LD_INT 23
12973: PUSH
12974: LD_INT 24
12976: PUSH
12977: LD_INT 25
12979: PUSH
12980: LD_INT 26
12982: PUSH
12983: LD_INT 27
12985: PUSH
12986: LD_INT 28
12988: PUSH
12989: LD_INT 30
12991: PUSH
12992: LD_INT 31
12994: PUSH
12995: LD_INT 32
12997: PUSH
12998: LD_INT 33
13000: PUSH
13001: LD_INT 34
13003: PUSH
13004: LD_INT 36
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 101
13045: PUSH
13046: LD_INT 102
13048: PUSH
13049: LD_INT 103
13051: PUSH
13052: LD_INT 104
13054: PUSH
13055: LD_INT 105
13057: PUSH
13058: LD_INT 106
13060: PUSH
13061: LD_INT 107
13063: PUSH
13064: LD_INT 108
13066: PUSH
13067: LD_INT 109
13069: PUSH
13070: LD_INT 110
13072: PUSH
13073: LD_INT 111
13075: PUSH
13076: LD_INT 112
13078: PUSH
13079: LD_INT 113
13081: PUSH
13082: LD_INT 114
13084: PUSH
13085: LD_INT 116
13087: PUSH
13088: LD_INT 117
13090: PUSH
13091: LD_INT 118
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: ST_TO_ADDR
13117: GO 14572
13119: LD_INT 13
13121: DOUBLE
13122: EQUAL
13123: IFTRUE 13127
13125: GO 13335
13127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13128: LD_ADDR_VAR 0 1
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: LD_INT 2
13138: PUSH
13139: LD_INT 3
13141: PUSH
13142: LD_INT 4
13144: PUSH
13145: LD_INT 5
13147: PUSH
13148: LD_INT 8
13150: PUSH
13151: LD_INT 9
13153: PUSH
13154: LD_INT 10
13156: PUSH
13157: LD_INT 11
13159: PUSH
13160: LD_INT 12
13162: PUSH
13163: LD_INT 14
13165: PUSH
13166: LD_INT 15
13168: PUSH
13169: LD_INT 16
13171: PUSH
13172: LD_INT 17
13174: PUSH
13175: LD_INT 18
13177: PUSH
13178: LD_INT 19
13180: PUSH
13181: LD_INT 20
13183: PUSH
13184: LD_INT 21
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_INT 23
13192: PUSH
13193: LD_INT 24
13195: PUSH
13196: LD_INT 25
13198: PUSH
13199: LD_INT 26
13201: PUSH
13202: LD_INT 27
13204: PUSH
13205: LD_INT 28
13207: PUSH
13208: LD_INT 30
13210: PUSH
13211: LD_INT 31
13213: PUSH
13214: LD_INT 32
13216: PUSH
13217: LD_INT 33
13219: PUSH
13220: LD_INT 34
13222: PUSH
13223: LD_INT 36
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 101
13261: PUSH
13262: LD_INT 102
13264: PUSH
13265: LD_INT 103
13267: PUSH
13268: LD_INT 104
13270: PUSH
13271: LD_INT 105
13273: PUSH
13274: LD_INT 106
13276: PUSH
13277: LD_INT 107
13279: PUSH
13280: LD_INT 108
13282: PUSH
13283: LD_INT 109
13285: PUSH
13286: LD_INT 110
13288: PUSH
13289: LD_INT 111
13291: PUSH
13292: LD_INT 112
13294: PUSH
13295: LD_INT 113
13297: PUSH
13298: LD_INT 114
13300: PUSH
13301: LD_INT 116
13303: PUSH
13304: LD_INT 117
13306: PUSH
13307: LD_INT 118
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: ST_TO_ADDR
13333: GO 14572
13335: LD_INT 14
13337: DOUBLE
13338: EQUAL
13339: IFTRUE 13343
13341: GO 13567
13343: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13344: LD_ADDR_VAR 0 1
13348: PUSH
13349: LD_INT 1
13351: PUSH
13352: LD_INT 2
13354: PUSH
13355: LD_INT 3
13357: PUSH
13358: LD_INT 4
13360: PUSH
13361: LD_INT 5
13363: PUSH
13364: LD_INT 6
13366: PUSH
13367: LD_INT 7
13369: PUSH
13370: LD_INT 8
13372: PUSH
13373: LD_INT 9
13375: PUSH
13376: LD_INT 10
13378: PUSH
13379: LD_INT 11
13381: PUSH
13382: LD_INT 12
13384: PUSH
13385: LD_INT 13
13387: PUSH
13388: LD_INT 14
13390: PUSH
13391: LD_INT 15
13393: PUSH
13394: LD_INT 16
13396: PUSH
13397: LD_INT 17
13399: PUSH
13400: LD_INT 18
13402: PUSH
13403: LD_INT 19
13405: PUSH
13406: LD_INT 20
13408: PUSH
13409: LD_INT 21
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 23
13417: PUSH
13418: LD_INT 24
13420: PUSH
13421: LD_INT 25
13423: PUSH
13424: LD_INT 26
13426: PUSH
13427: LD_INT 27
13429: PUSH
13430: LD_INT 28
13432: PUSH
13433: LD_INT 29
13435: PUSH
13436: LD_INT 30
13438: PUSH
13439: LD_INT 31
13441: PUSH
13442: LD_INT 32
13444: PUSH
13445: LD_INT 33
13447: PUSH
13448: LD_INT 34
13450: PUSH
13451: LD_INT 36
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 101
13493: PUSH
13494: LD_INT 102
13496: PUSH
13497: LD_INT 103
13499: PUSH
13500: LD_INT 104
13502: PUSH
13503: LD_INT 105
13505: PUSH
13506: LD_INT 106
13508: PUSH
13509: LD_INT 107
13511: PUSH
13512: LD_INT 108
13514: PUSH
13515: LD_INT 109
13517: PUSH
13518: LD_INT 110
13520: PUSH
13521: LD_INT 111
13523: PUSH
13524: LD_INT 112
13526: PUSH
13527: LD_INT 113
13529: PUSH
13530: LD_INT 114
13532: PUSH
13533: LD_INT 116
13535: PUSH
13536: LD_INT 117
13538: PUSH
13539: LD_INT 118
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: ST_TO_ADDR
13565: GO 14572
13567: LD_INT 15
13569: DOUBLE
13570: EQUAL
13571: IFTRUE 13575
13573: GO 13799
13575: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: LD_INT 3
13589: PUSH
13590: LD_INT 4
13592: PUSH
13593: LD_INT 5
13595: PUSH
13596: LD_INT 6
13598: PUSH
13599: LD_INT 7
13601: PUSH
13602: LD_INT 8
13604: PUSH
13605: LD_INT 9
13607: PUSH
13608: LD_INT 10
13610: PUSH
13611: LD_INT 11
13613: PUSH
13614: LD_INT 12
13616: PUSH
13617: LD_INT 13
13619: PUSH
13620: LD_INT 14
13622: PUSH
13623: LD_INT 15
13625: PUSH
13626: LD_INT 16
13628: PUSH
13629: LD_INT 17
13631: PUSH
13632: LD_INT 18
13634: PUSH
13635: LD_INT 19
13637: PUSH
13638: LD_INT 20
13640: PUSH
13641: LD_INT 21
13643: PUSH
13644: LD_INT 22
13646: PUSH
13647: LD_INT 23
13649: PUSH
13650: LD_INT 24
13652: PUSH
13653: LD_INT 25
13655: PUSH
13656: LD_INT 26
13658: PUSH
13659: LD_INT 27
13661: PUSH
13662: LD_INT 28
13664: PUSH
13665: LD_INT 29
13667: PUSH
13668: LD_INT 30
13670: PUSH
13671: LD_INT 31
13673: PUSH
13674: LD_INT 32
13676: PUSH
13677: LD_INT 33
13679: PUSH
13680: LD_INT 34
13682: PUSH
13683: LD_INT 36
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 101
13725: PUSH
13726: LD_INT 102
13728: PUSH
13729: LD_INT 103
13731: PUSH
13732: LD_INT 104
13734: PUSH
13735: LD_INT 105
13737: PUSH
13738: LD_INT 106
13740: PUSH
13741: LD_INT 107
13743: PUSH
13744: LD_INT 108
13746: PUSH
13747: LD_INT 109
13749: PUSH
13750: LD_INT 110
13752: PUSH
13753: LD_INT 111
13755: PUSH
13756: LD_INT 112
13758: PUSH
13759: LD_INT 113
13761: PUSH
13762: LD_INT 114
13764: PUSH
13765: LD_INT 116
13767: PUSH
13768: LD_INT 117
13770: PUSH
13771: LD_INT 118
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: ST_TO_ADDR
13797: GO 14572
13799: LD_INT 16
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13943
13807: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13808: LD_ADDR_VAR 0 1
13812: PUSH
13813: LD_INT 2
13815: PUSH
13816: LD_INT 4
13818: PUSH
13819: LD_INT 5
13821: PUSH
13822: LD_INT 7
13824: PUSH
13825: LD_INT 11
13827: PUSH
13828: LD_INT 12
13830: PUSH
13831: LD_INT 15
13833: PUSH
13834: LD_INT 16
13836: PUSH
13837: LD_INT 20
13839: PUSH
13840: LD_INT 21
13842: PUSH
13843: LD_INT 22
13845: PUSH
13846: LD_INT 23
13848: PUSH
13849: LD_INT 25
13851: PUSH
13852: LD_INT 26
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: LD_INT 31
13860: PUSH
13861: LD_INT 32
13863: PUSH
13864: LD_INT 33
13866: PUSH
13867: LD_INT 34
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 101
13893: PUSH
13894: LD_INT 102
13896: PUSH
13897: LD_INT 103
13899: PUSH
13900: LD_INT 106
13902: PUSH
13903: LD_INT 108
13905: PUSH
13906: LD_INT 112
13908: PUSH
13909: LD_INT 113
13911: PUSH
13912: LD_INT 114
13914: PUSH
13915: LD_INT 116
13917: PUSH
13918: LD_INT 117
13920: PUSH
13921: LD_INT 118
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: ST_TO_ADDR
13941: GO 14572
13943: LD_INT 17
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 14175
13951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13952: LD_ADDR_VAR 0 1
13956: PUSH
13957: LD_INT 1
13959: PUSH
13960: LD_INT 2
13962: PUSH
13963: LD_INT 3
13965: PUSH
13966: LD_INT 4
13968: PUSH
13969: LD_INT 5
13971: PUSH
13972: LD_INT 6
13974: PUSH
13975: LD_INT 7
13977: PUSH
13978: LD_INT 8
13980: PUSH
13981: LD_INT 9
13983: PUSH
13984: LD_INT 10
13986: PUSH
13987: LD_INT 11
13989: PUSH
13990: LD_INT 12
13992: PUSH
13993: LD_INT 13
13995: PUSH
13996: LD_INT 14
13998: PUSH
13999: LD_INT 15
14001: PUSH
14002: LD_INT 16
14004: PUSH
14005: LD_INT 17
14007: PUSH
14008: LD_INT 18
14010: PUSH
14011: LD_INT 19
14013: PUSH
14014: LD_INT 20
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 22
14022: PUSH
14023: LD_INT 23
14025: PUSH
14026: LD_INT 24
14028: PUSH
14029: LD_INT 25
14031: PUSH
14032: LD_INT 26
14034: PUSH
14035: LD_INT 27
14037: PUSH
14038: LD_INT 28
14040: PUSH
14041: LD_INT 29
14043: PUSH
14044: LD_INT 30
14046: PUSH
14047: LD_INT 31
14049: PUSH
14050: LD_INT 32
14052: PUSH
14053: LD_INT 33
14055: PUSH
14056: LD_INT 34
14058: PUSH
14059: LD_INT 36
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 101
14101: PUSH
14102: LD_INT 102
14104: PUSH
14105: LD_INT 103
14107: PUSH
14108: LD_INT 104
14110: PUSH
14111: LD_INT 105
14113: PUSH
14114: LD_INT 106
14116: PUSH
14117: LD_INT 107
14119: PUSH
14120: LD_INT 108
14122: PUSH
14123: LD_INT 109
14125: PUSH
14126: LD_INT 110
14128: PUSH
14129: LD_INT 111
14131: PUSH
14132: LD_INT 112
14134: PUSH
14135: LD_INT 113
14137: PUSH
14138: LD_INT 114
14140: PUSH
14141: LD_INT 116
14143: PUSH
14144: LD_INT 117
14146: PUSH
14147: LD_INT 118
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: ST_TO_ADDR
14173: GO 14572
14175: LD_INT 18
14177: DOUBLE
14178: EQUAL
14179: IFTRUE 14183
14181: GO 14331
14183: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14184: LD_ADDR_VAR 0 1
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 4
14194: PUSH
14195: LD_INT 5
14197: PUSH
14198: LD_INT 7
14200: PUSH
14201: LD_INT 11
14203: PUSH
14204: LD_INT 12
14206: PUSH
14207: LD_INT 15
14209: PUSH
14210: LD_INT 16
14212: PUSH
14213: LD_INT 20
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_INT 23
14224: PUSH
14225: LD_INT 25
14227: PUSH
14228: LD_INT 26
14230: PUSH
14231: LD_INT 30
14233: PUSH
14234: LD_INT 31
14236: PUSH
14237: LD_INT 32
14239: PUSH
14240: LD_INT 33
14242: PUSH
14243: LD_INT 34
14245: PUSH
14246: LD_INT 35
14248: PUSH
14249: LD_INT 36
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 101
14277: PUSH
14278: LD_INT 102
14280: PUSH
14281: LD_INT 103
14283: PUSH
14284: LD_INT 106
14286: PUSH
14287: LD_INT 108
14289: PUSH
14290: LD_INT 112
14292: PUSH
14293: LD_INT 113
14295: PUSH
14296: LD_INT 114
14298: PUSH
14299: LD_INT 115
14301: PUSH
14302: LD_INT 116
14304: PUSH
14305: LD_INT 117
14307: PUSH
14308: LD_INT 118
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: ST_TO_ADDR
14329: GO 14572
14331: LD_INT 19
14333: DOUBLE
14334: EQUAL
14335: IFTRUE 14339
14337: GO 14571
14339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14340: LD_ADDR_VAR 0 1
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: LD_INT 3
14353: PUSH
14354: LD_INT 4
14356: PUSH
14357: LD_INT 5
14359: PUSH
14360: LD_INT 6
14362: PUSH
14363: LD_INT 7
14365: PUSH
14366: LD_INT 8
14368: PUSH
14369: LD_INT 9
14371: PUSH
14372: LD_INT 10
14374: PUSH
14375: LD_INT 11
14377: PUSH
14378: LD_INT 12
14380: PUSH
14381: LD_INT 13
14383: PUSH
14384: LD_INT 14
14386: PUSH
14387: LD_INT 15
14389: PUSH
14390: LD_INT 16
14392: PUSH
14393: LD_INT 17
14395: PUSH
14396: LD_INT 18
14398: PUSH
14399: LD_INT 19
14401: PUSH
14402: LD_INT 20
14404: PUSH
14405: LD_INT 21
14407: PUSH
14408: LD_INT 22
14410: PUSH
14411: LD_INT 23
14413: PUSH
14414: LD_INT 24
14416: PUSH
14417: LD_INT 25
14419: PUSH
14420: LD_INT 26
14422: PUSH
14423: LD_INT 27
14425: PUSH
14426: LD_INT 28
14428: PUSH
14429: LD_INT 29
14431: PUSH
14432: LD_INT 30
14434: PUSH
14435: LD_INT 31
14437: PUSH
14438: LD_INT 32
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: LD_INT 34
14446: PUSH
14447: LD_INT 35
14449: PUSH
14450: LD_INT 36
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 101
14493: PUSH
14494: LD_INT 102
14496: PUSH
14497: LD_INT 103
14499: PUSH
14500: LD_INT 104
14502: PUSH
14503: LD_INT 105
14505: PUSH
14506: LD_INT 106
14508: PUSH
14509: LD_INT 107
14511: PUSH
14512: LD_INT 108
14514: PUSH
14515: LD_INT 109
14517: PUSH
14518: LD_INT 110
14520: PUSH
14521: LD_INT 111
14523: PUSH
14524: LD_INT 112
14526: PUSH
14527: LD_INT 113
14529: PUSH
14530: LD_INT 114
14532: PUSH
14533: LD_INT 115
14535: PUSH
14536: LD_INT 116
14538: PUSH
14539: LD_INT 117
14541: PUSH
14542: LD_INT 118
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: ST_TO_ADDR
14569: GO 14572
14571: POP
// end else
14572: GO 14803
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14574: LD_ADDR_VAR 0 1
14578: PUSH
14579: LD_INT 1
14581: PUSH
14582: LD_INT 2
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: LD_INT 4
14590: PUSH
14591: LD_INT 5
14593: PUSH
14594: LD_INT 6
14596: PUSH
14597: LD_INT 7
14599: PUSH
14600: LD_INT 8
14602: PUSH
14603: LD_INT 9
14605: PUSH
14606: LD_INT 10
14608: PUSH
14609: LD_INT 11
14611: PUSH
14612: LD_INT 12
14614: PUSH
14615: LD_INT 13
14617: PUSH
14618: LD_INT 14
14620: PUSH
14621: LD_INT 15
14623: PUSH
14624: LD_INT 16
14626: PUSH
14627: LD_INT 17
14629: PUSH
14630: LD_INT 18
14632: PUSH
14633: LD_INT 19
14635: PUSH
14636: LD_INT 20
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_INT 23
14647: PUSH
14648: LD_INT 24
14650: PUSH
14651: LD_INT 25
14653: PUSH
14654: LD_INT 26
14656: PUSH
14657: LD_INT 27
14659: PUSH
14660: LD_INT 28
14662: PUSH
14663: LD_INT 29
14665: PUSH
14666: LD_INT 30
14668: PUSH
14669: LD_INT 31
14671: PUSH
14672: LD_INT 32
14674: PUSH
14675: LD_INT 33
14677: PUSH
14678: LD_INT 34
14680: PUSH
14681: LD_INT 35
14683: PUSH
14684: LD_INT 36
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 101
14727: PUSH
14728: LD_INT 102
14730: PUSH
14731: LD_INT 103
14733: PUSH
14734: LD_INT 104
14736: PUSH
14737: LD_INT 105
14739: PUSH
14740: LD_INT 106
14742: PUSH
14743: LD_INT 107
14745: PUSH
14746: LD_INT 108
14748: PUSH
14749: LD_INT 109
14751: PUSH
14752: LD_INT 110
14754: PUSH
14755: LD_INT 111
14757: PUSH
14758: LD_INT 112
14760: PUSH
14761: LD_INT 113
14763: PUSH
14764: LD_INT 114
14766: PUSH
14767: LD_INT 115
14769: PUSH
14770: LD_INT 116
14772: PUSH
14773: LD_INT 117
14775: PUSH
14776: LD_INT 118
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: ST_TO_ADDR
// if result then
14803: LD_VAR 0 1
14807: IFFALSE 15096
// begin normal :=  ;
14809: LD_ADDR_VAR 0 3
14813: PUSH
14814: LD_STRING 
14816: ST_TO_ADDR
// hardcore :=  ;
14817: LD_ADDR_VAR 0 4
14821: PUSH
14822: LD_STRING 
14824: ST_TO_ADDR
// for i = 1 to normalCounter do
14825: LD_ADDR_VAR 0 5
14829: PUSH
14830: DOUBLE
14831: LD_INT 1
14833: DEC
14834: ST_TO_ADDR
14835: LD_EXP 44
14839: PUSH
14840: FOR_TO
14841: IFFALSE 14942
// begin tmp := 0 ;
14843: LD_ADDR_VAR 0 2
14847: PUSH
14848: LD_STRING 0
14850: ST_TO_ADDR
// if result [ 1 ] then
14851: LD_VAR 0 1
14855: PUSH
14856: LD_INT 1
14858: ARRAY
14859: IFFALSE 14924
// if result [ 1 ] [ 1 ] = i then
14861: LD_VAR 0 1
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: PUSH
14870: LD_INT 1
14872: ARRAY
14873: PUSH
14874: LD_VAR 0 5
14878: EQUAL
14879: IFFALSE 14924
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 1
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: LD_VAR 0 1
14898: PUSH
14899: LD_INT 1
14901: ARRAY
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: CALL_OW 3
14910: PPUSH
14911: CALL_OW 1
14915: ST_TO_ADDR
// tmp := 1 ;
14916: LD_ADDR_VAR 0 2
14920: PUSH
14921: LD_STRING 1
14923: ST_TO_ADDR
// end ; normal := normal & tmp ;
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_VAR 0 3
14933: PUSH
14934: LD_VAR 0 2
14938: STR
14939: ST_TO_ADDR
// end ;
14940: GO 14840
14942: POP
14943: POP
// for i = 1 to hardcoreCounter do
14944: LD_ADDR_VAR 0 5
14948: PUSH
14949: DOUBLE
14950: LD_INT 1
14952: DEC
14953: ST_TO_ADDR
14954: LD_EXP 45
14958: PUSH
14959: FOR_TO
14960: IFFALSE 15065
// begin tmp := 0 ;
14962: LD_ADDR_VAR 0 2
14966: PUSH
14967: LD_STRING 0
14969: ST_TO_ADDR
// if result [ 2 ] then
14970: LD_VAR 0 1
14974: PUSH
14975: LD_INT 2
14977: ARRAY
14978: IFFALSE 15047
// if result [ 2 ] [ 1 ] = 100 + i then
14980: LD_VAR 0 1
14984: PUSH
14985: LD_INT 2
14987: ARRAY
14988: PUSH
14989: LD_INT 1
14991: ARRAY
14992: PUSH
14993: LD_INT 100
14995: PUSH
14996: LD_VAR 0 5
15000: PLUS
15001: EQUAL
15002: IFFALSE 15047
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15004: LD_ADDR_VAR 0 1
15008: PUSH
15009: LD_VAR 0 1
15013: PPUSH
15014: LD_INT 2
15016: PPUSH
15017: LD_VAR 0 1
15021: PUSH
15022: LD_INT 2
15024: ARRAY
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 3
15033: PPUSH
15034: CALL_OW 1
15038: ST_TO_ADDR
// tmp := 1 ;
15039: LD_ADDR_VAR 0 2
15043: PUSH
15044: LD_STRING 1
15046: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15047: LD_ADDR_VAR 0 4
15051: PUSH
15052: LD_VAR 0 4
15056: PUSH
15057: LD_VAR 0 2
15061: STR
15062: ST_TO_ADDR
// end ;
15063: GO 14959
15065: POP
15066: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15067: LD_STRING getStreamItemsFromMission("
15069: PUSH
15070: LD_VAR 0 3
15074: STR
15075: PUSH
15076: LD_STRING ","
15078: STR
15079: PUSH
15080: LD_VAR 0 4
15084: STR
15085: PUSH
15086: LD_STRING ")
15088: STR
15089: PPUSH
15090: CALL_OW 559
// end else
15094: GO 15103
// ToLua ( getStreamItemsFromMission("","") ) ;
15096: LD_STRING getStreamItemsFromMission("","")
15098: PPUSH
15099: CALL_OW 559
// end ;
15103: LD_VAR 0 1
15107: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15108: LD_EXP 43
15112: PUSH
15113: LD_EXP 48
15117: AND
15118: IFFALSE 15242
15120: GO 15122
15122: DISABLE
15123: LD_INT 0
15125: PPUSH
15126: PPUSH
// begin enable ;
15127: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15128: LD_ADDR_VAR 0 2
15132: PUSH
15133: LD_INT 22
15135: PUSH
15136: LD_OWVAR 2
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 2
15147: PUSH
15148: LD_INT 34
15150: PUSH
15151: LD_INT 7
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 34
15160: PUSH
15161: LD_INT 45
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: LD_INT 34
15170: PUSH
15171: LD_INT 28
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 34
15180: PUSH
15181: LD_INT 47
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PPUSH
15199: CALL_OW 69
15203: ST_TO_ADDR
// if not tmp then
15204: LD_VAR 0 2
15208: NOT
15209: IFFALSE 15213
// exit ;
15211: GO 15242
// for i in tmp do
15213: LD_ADDR_VAR 0 1
15217: PUSH
15218: LD_VAR 0 2
15222: PUSH
15223: FOR_IN
15224: IFFALSE 15240
// begin SetLives ( i , 0 ) ;
15226: LD_VAR 0 1
15230: PPUSH
15231: LD_INT 0
15233: PPUSH
15234: CALL_OW 234
// end ;
15238: GO 15223
15240: POP
15241: POP
// end ;
15242: PPOPN 2
15244: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15245: LD_EXP 43
15249: PUSH
15250: LD_EXP 49
15254: AND
15255: IFFALSE 15339
15257: GO 15259
15259: DISABLE
15260: LD_INT 0
15262: PPUSH
15263: PPUSH
// begin enable ;
15264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15265: LD_ADDR_VAR 0 2
15269: PUSH
15270: LD_INT 22
15272: PUSH
15273: LD_OWVAR 2
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: LD_INT 32
15284: PUSH
15285: LD_INT 3
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PPUSH
15296: CALL_OW 69
15300: ST_TO_ADDR
// if not tmp then
15301: LD_VAR 0 2
15305: NOT
15306: IFFALSE 15310
// exit ;
15308: GO 15339
// for i in tmp do
15310: LD_ADDR_VAR 0 1
15314: PUSH
15315: LD_VAR 0 2
15319: PUSH
15320: FOR_IN
15321: IFFALSE 15337
// begin SetLives ( i , 0 ) ;
15323: LD_VAR 0 1
15327: PPUSH
15328: LD_INT 0
15330: PPUSH
15331: CALL_OW 234
// end ;
15335: GO 15320
15337: POP
15338: POP
// end ;
15339: PPOPN 2
15341: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15342: LD_EXP 43
15346: PUSH
15347: LD_EXP 46
15351: AND
15352: IFFALSE 15445
15354: GO 15356
15356: DISABLE
15357: LD_INT 0
15359: PPUSH
// begin enable ;
15360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15361: LD_ADDR_VAR 0 1
15365: PUSH
15366: LD_INT 22
15368: PUSH
15369: LD_OWVAR 2
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 2
15380: PUSH
15381: LD_INT 25
15383: PUSH
15384: LD_INT 5
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 25
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 25
15403: PUSH
15404: LD_INT 8
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PPUSH
15421: CALL_OW 69
15425: PUSH
15426: FOR_IN
15427: IFFALSE 15443
// begin SetClass ( i , 1 ) ;
15429: LD_VAR 0 1
15433: PPUSH
15434: LD_INT 1
15436: PPUSH
15437: CALL_OW 336
// end ;
15441: GO 15426
15443: POP
15444: POP
// end ;
15445: PPOPN 1
15447: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15448: LD_EXP 43
15452: PUSH
15453: LD_EXP 47
15457: AND
15458: PUSH
15459: LD_OWVAR 65
15463: PUSH
15464: LD_INT 7
15466: LESS
15467: AND
15468: IFFALSE 15482
15470: GO 15472
15472: DISABLE
// begin enable ;
15473: ENABLE
// game_speed := 7 ;
15474: LD_ADDR_OWVAR 65
15478: PUSH
15479: LD_INT 7
15481: ST_TO_ADDR
// end ;
15482: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15483: LD_EXP 43
15487: PUSH
15488: LD_EXP 50
15492: AND
15493: IFFALSE 15695
15495: GO 15497
15497: DISABLE
15498: LD_INT 0
15500: PPUSH
15501: PPUSH
15502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15503: LD_ADDR_VAR 0 3
15507: PUSH
15508: LD_INT 81
15510: PUSH
15511: LD_OWVAR 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 21
15522: PUSH
15523: LD_INT 1
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: ST_TO_ADDR
// if not tmp then
15539: LD_VAR 0 3
15543: NOT
15544: IFFALSE 15548
// exit ;
15546: GO 15695
// if tmp > 5 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 5
15555: GREATER
15556: IFFALSE 15568
// k := 5 else
15558: LD_ADDR_VAR 0 2
15562: PUSH
15563: LD_INT 5
15565: ST_TO_ADDR
15566: GO 15578
// k := tmp ;
15568: LD_ADDR_VAR 0 2
15572: PUSH
15573: LD_VAR 0 3
15577: ST_TO_ADDR
// for i := 1 to k do
15578: LD_ADDR_VAR 0 1
15582: PUSH
15583: DOUBLE
15584: LD_INT 1
15586: DEC
15587: ST_TO_ADDR
15588: LD_VAR 0 2
15592: PUSH
15593: FOR_TO
15594: IFFALSE 15693
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15596: LD_VAR 0 3
15600: PUSH
15601: LD_VAR 0 1
15605: ARRAY
15606: PPUSH
15607: LD_VAR 0 1
15611: PUSH
15612: LD_INT 4
15614: MOD
15615: PUSH
15616: LD_INT 1
15618: PLUS
15619: PPUSH
15620: CALL_OW 259
15624: PUSH
15625: LD_INT 10
15627: LESS
15628: IFFALSE 15691
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15630: LD_VAR 0 3
15634: PUSH
15635: LD_VAR 0 1
15639: ARRAY
15640: PPUSH
15641: LD_VAR 0 1
15645: PUSH
15646: LD_INT 4
15648: MOD
15649: PUSH
15650: LD_INT 1
15652: PLUS
15653: PPUSH
15654: LD_VAR 0 3
15658: PUSH
15659: LD_VAR 0 1
15663: ARRAY
15664: PPUSH
15665: LD_VAR 0 1
15669: PUSH
15670: LD_INT 4
15672: MOD
15673: PUSH
15674: LD_INT 1
15676: PLUS
15677: PPUSH
15678: CALL_OW 259
15682: PUSH
15683: LD_INT 1
15685: PLUS
15686: PPUSH
15687: CALL_OW 237
15691: GO 15593
15693: POP
15694: POP
// end ;
15695: PPOPN 3
15697: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15698: LD_EXP 43
15702: PUSH
15703: LD_EXP 51
15707: AND
15708: IFFALSE 15728
15710: GO 15712
15712: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15713: LD_INT 4
15715: PPUSH
15716: LD_OWVAR 2
15720: PPUSH
15721: LD_INT 0
15723: PPUSH
15724: CALL_OW 324
15728: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15729: LD_EXP 43
15733: PUSH
15734: LD_EXP 80
15738: AND
15739: IFFALSE 15759
15741: GO 15743
15743: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15744: LD_INT 19
15746: PPUSH
15747: LD_OWVAR 2
15751: PPUSH
15752: LD_INT 0
15754: PPUSH
15755: CALL_OW 324
15759: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15760: LD_EXP 43
15764: PUSH
15765: LD_EXP 52
15769: AND
15770: IFFALSE 15872
15772: GO 15774
15774: DISABLE
15775: LD_INT 0
15777: PPUSH
15778: PPUSH
// begin enable ;
15779: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15780: LD_ADDR_VAR 0 2
15784: PUSH
15785: LD_INT 22
15787: PUSH
15788: LD_OWVAR 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 34
15802: PUSH
15803: LD_INT 11
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 34
15812: PUSH
15813: LD_INT 30
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: LIST
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PPUSH
15829: CALL_OW 69
15833: ST_TO_ADDR
// if not tmp then
15834: LD_VAR 0 2
15838: NOT
15839: IFFALSE 15843
// exit ;
15841: GO 15872
// for i in tmp do
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 2
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15870
// begin SetLives ( i , 0 ) ;
15856: LD_VAR 0 1
15860: PPUSH
15861: LD_INT 0
15863: PPUSH
15864: CALL_OW 234
// end ;
15868: GO 15853
15870: POP
15871: POP
// end ;
15872: PPOPN 2
15874: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15875: LD_EXP 43
15879: PUSH
15880: LD_EXP 53
15884: AND
15885: IFFALSE 15905
15887: GO 15889
15889: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15890: LD_INT 32
15892: PPUSH
15893: LD_OWVAR 2
15897: PPUSH
15898: LD_INT 0
15900: PPUSH
15901: CALL_OW 324
15905: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15906: LD_EXP 43
15910: PUSH
15911: LD_EXP 54
15915: AND
15916: IFFALSE 16097
15918: GO 15920
15920: DISABLE
15921: LD_INT 0
15923: PPUSH
15924: PPUSH
15925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15926: LD_ADDR_VAR 0 2
15930: PUSH
15931: LD_INT 22
15933: PUSH
15934: LD_OWVAR 2
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 33
15945: PUSH
15946: LD_INT 3
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PPUSH
15957: CALL_OW 69
15961: ST_TO_ADDR
// if not tmp then
15962: LD_VAR 0 2
15966: NOT
15967: IFFALSE 15971
// exit ;
15969: GO 16097
// side := 0 ;
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// for i := 1 to 8 do
15979: LD_ADDR_VAR 0 1
15983: PUSH
15984: DOUBLE
15985: LD_INT 1
15987: DEC
15988: ST_TO_ADDR
15989: LD_INT 8
15991: PUSH
15992: FOR_TO
15993: IFFALSE 16041
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15995: LD_OWVAR 2
15999: PUSH
16000: LD_VAR 0 1
16004: NONEQUAL
16005: PUSH
16006: LD_OWVAR 2
16010: PPUSH
16011: LD_VAR 0 1
16015: PPUSH
16016: CALL_OW 81
16020: PUSH
16021: LD_INT 2
16023: EQUAL
16024: AND
16025: IFFALSE 16039
// begin side := i ;
16027: LD_ADDR_VAR 0 3
16031: PUSH
16032: LD_VAR 0 1
16036: ST_TO_ADDR
// break ;
16037: GO 16041
// end ;
16039: GO 15992
16041: POP
16042: POP
// if not side then
16043: LD_VAR 0 3
16047: NOT
16048: IFFALSE 16052
// exit ;
16050: GO 16097
// for i := 1 to tmp do
16052: LD_ADDR_VAR 0 1
16056: PUSH
16057: DOUBLE
16058: LD_INT 1
16060: DEC
16061: ST_TO_ADDR
16062: LD_VAR 0 2
16066: PUSH
16067: FOR_TO
16068: IFFALSE 16095
// if Prob ( 60 ) then
16070: LD_INT 60
16072: PPUSH
16073: CALL_OW 13
16077: IFFALSE 16093
// SetSide ( i , side ) ;
16079: LD_VAR 0 1
16083: PPUSH
16084: LD_VAR 0 3
16088: PPUSH
16089: CALL_OW 235
16093: GO 16067
16095: POP
16096: POP
// end ;
16097: PPOPN 3
16099: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16100: LD_EXP 43
16104: PUSH
16105: LD_EXP 56
16109: AND
16110: IFFALSE 16229
16112: GO 16114
16114: DISABLE
16115: LD_INT 0
16117: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16118: LD_ADDR_VAR 0 1
16122: PUSH
16123: LD_INT 22
16125: PUSH
16126: LD_OWVAR 2
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 21
16137: PUSH
16138: LD_INT 1
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 3
16147: PUSH
16148: LD_INT 23
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: PPUSH
16167: CALL_OW 69
16171: PUSH
16172: FOR_IN
16173: IFFALSE 16227
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16175: LD_VAR 0 1
16179: PPUSH
16180: CALL_OW 257
16184: PUSH
16185: LD_INT 1
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 3
16193: PUSH
16194: LD_INT 4
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: IN
16203: IFFALSE 16225
// SetClass ( un , rand ( 1 , 4 ) ) ;
16205: LD_VAR 0 1
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: LD_INT 4
16215: PPUSH
16216: CALL_OW 12
16220: PPUSH
16221: CALL_OW 336
16225: GO 16172
16227: POP
16228: POP
// end ;
16229: PPOPN 1
16231: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16232: LD_EXP 43
16236: PUSH
16237: LD_EXP 55
16241: AND
16242: IFFALSE 16321
16244: GO 16246
16246: DISABLE
16247: LD_INT 0
16249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16250: LD_ADDR_VAR 0 1
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_OWVAR 2
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 21
16269: PUSH
16270: LD_INT 3
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PPUSH
16281: CALL_OW 69
16285: ST_TO_ADDR
// if not tmp then
16286: LD_VAR 0 1
16290: NOT
16291: IFFALSE 16295
// exit ;
16293: GO 16321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16295: LD_VAR 0 1
16299: PUSH
16300: LD_INT 1
16302: PPUSH
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 12
16312: ARRAY
16313: PPUSH
16314: LD_INT 100
16316: PPUSH
16317: CALL_OW 234
// end ;
16321: PPOPN 1
16323: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16324: LD_EXP 43
16328: PUSH
16329: LD_EXP 57
16333: AND
16334: IFFALSE 16432
16336: GO 16338
16338: DISABLE
16339: LD_INT 0
16341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16342: LD_ADDR_VAR 0 1
16346: PUSH
16347: LD_INT 22
16349: PUSH
16350: LD_OWVAR 2
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 21
16361: PUSH
16362: LD_INT 1
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PPUSH
16373: CALL_OW 69
16377: ST_TO_ADDR
// if not tmp then
16378: LD_VAR 0 1
16382: NOT
16383: IFFALSE 16387
// exit ;
16385: GO 16432
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16387: LD_VAR 0 1
16391: PUSH
16392: LD_INT 1
16394: PPUSH
16395: LD_VAR 0 1
16399: PPUSH
16400: CALL_OW 12
16404: ARRAY
16405: PPUSH
16406: LD_INT 1
16408: PPUSH
16409: LD_INT 4
16411: PPUSH
16412: CALL_OW 12
16416: PPUSH
16417: LD_INT 3000
16419: PPUSH
16420: LD_INT 9000
16422: PPUSH
16423: CALL_OW 12
16427: PPUSH
16428: CALL_OW 492
// end ;
16432: PPOPN 1
16434: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16435: LD_EXP 43
16439: PUSH
16440: LD_EXP 58
16444: AND
16445: IFFALSE 16465
16447: GO 16449
16449: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16450: LD_INT 1
16452: PPUSH
16453: LD_OWVAR 2
16457: PPUSH
16458: LD_INT 0
16460: PPUSH
16461: CALL_OW 324
16465: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16466: LD_EXP 43
16470: PUSH
16471: LD_EXP 59
16475: AND
16476: IFFALSE 16559
16478: GO 16480
16480: DISABLE
16481: LD_INT 0
16483: PPUSH
16484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16485: LD_ADDR_VAR 0 2
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_OWVAR 2
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 21
16504: PUSH
16505: LD_INT 3
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 69
16520: ST_TO_ADDR
// if not tmp then
16521: LD_VAR 0 2
16525: NOT
16526: IFFALSE 16530
// exit ;
16528: GO 16559
// for i in tmp do
16530: LD_ADDR_VAR 0 1
16534: PUSH
16535: LD_VAR 0 2
16539: PUSH
16540: FOR_IN
16541: IFFALSE 16557
// SetBLevel ( i , 10 ) ;
16543: LD_VAR 0 1
16547: PPUSH
16548: LD_INT 10
16550: PPUSH
16551: CALL_OW 241
16555: GO 16540
16557: POP
16558: POP
// end ;
16559: PPOPN 2
16561: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16562: LD_EXP 43
16566: PUSH
16567: LD_EXP 60
16571: AND
16572: IFFALSE 16683
16574: GO 16576
16576: DISABLE
16577: LD_INT 0
16579: PPUSH
16580: PPUSH
16581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16582: LD_ADDR_VAR 0 3
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_OWVAR 2
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 25
16601: PUSH
16602: LD_INT 1
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PPUSH
16613: CALL_OW 69
16617: ST_TO_ADDR
// if not tmp then
16618: LD_VAR 0 3
16622: NOT
16623: IFFALSE 16627
// exit ;
16625: GO 16683
// un := tmp [ rand ( 1 , tmp ) ] ;
16627: LD_ADDR_VAR 0 2
16631: PUSH
16632: LD_VAR 0 3
16636: PUSH
16637: LD_INT 1
16639: PPUSH
16640: LD_VAR 0 3
16644: PPUSH
16645: CALL_OW 12
16649: ARRAY
16650: ST_TO_ADDR
// if Crawls ( un ) then
16651: LD_VAR 0 2
16655: PPUSH
16656: CALL_OW 318
16660: IFFALSE 16671
// ComWalk ( un ) ;
16662: LD_VAR 0 2
16666: PPUSH
16667: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16671: LD_VAR 0 2
16675: PPUSH
16676: LD_INT 5
16678: PPUSH
16679: CALL_OW 336
// end ;
16683: PPOPN 3
16685: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16686: LD_EXP 43
16690: PUSH
16691: LD_EXP 61
16695: AND
16696: PUSH
16697: LD_OWVAR 67
16701: PUSH
16702: LD_INT 4
16704: LESS
16705: AND
16706: IFFALSE 16725
16708: GO 16710
16710: DISABLE
// begin Difficulty := Difficulty + 1 ;
16711: LD_ADDR_OWVAR 67
16715: PUSH
16716: LD_OWVAR 67
16720: PUSH
16721: LD_INT 1
16723: PLUS
16724: ST_TO_ADDR
// end ;
16725: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16726: LD_EXP 43
16730: PUSH
16731: LD_EXP 62
16735: AND
16736: IFFALSE 16839
16738: GO 16740
16740: DISABLE
16741: LD_INT 0
16743: PPUSH
// begin for i := 1 to 5 do
16744: LD_ADDR_VAR 0 1
16748: PUSH
16749: DOUBLE
16750: LD_INT 1
16752: DEC
16753: ST_TO_ADDR
16754: LD_INT 5
16756: PUSH
16757: FOR_TO
16758: IFFALSE 16837
// begin uc_nation := nation_nature ;
16760: LD_ADDR_OWVAR 21
16764: PUSH
16765: LD_INT 0
16767: ST_TO_ADDR
// uc_side := 0 ;
16768: LD_ADDR_OWVAR 20
16772: PUSH
16773: LD_INT 0
16775: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16776: LD_ADDR_OWVAR 29
16780: PUSH
16781: LD_INT 12
16783: PUSH
16784: LD_INT 12
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: ST_TO_ADDR
// hc_agressivity := 20 ;
16791: LD_ADDR_OWVAR 35
16795: PUSH
16796: LD_INT 20
16798: ST_TO_ADDR
// hc_class := class_tiger ;
16799: LD_ADDR_OWVAR 28
16803: PUSH
16804: LD_INT 14
16806: ST_TO_ADDR
// hc_gallery :=  ;
16807: LD_ADDR_OWVAR 33
16811: PUSH
16812: LD_STRING 
16814: ST_TO_ADDR
// hc_name :=  ;
16815: LD_ADDR_OWVAR 26
16819: PUSH
16820: LD_STRING 
16822: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16823: CALL_OW 44
16827: PPUSH
16828: LD_INT 0
16830: PPUSH
16831: CALL_OW 51
// end ;
16835: GO 16757
16837: POP
16838: POP
// end ;
16839: PPOPN 1
16841: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16842: LD_EXP 43
16846: PUSH
16847: LD_EXP 63
16851: AND
16852: IFFALSE 16861
16854: GO 16856
16856: DISABLE
// StreamSibBomb ;
16857: CALL 16862 0 0
16861: END
// export function StreamSibBomb ; var i , x , y ; begin
16862: LD_INT 0
16864: PPUSH
16865: PPUSH
16866: PPUSH
16867: PPUSH
// result := false ;
16868: LD_ADDR_VAR 0 1
16872: PUSH
16873: LD_INT 0
16875: ST_TO_ADDR
// for i := 1 to 16 do
16876: LD_ADDR_VAR 0 2
16880: PUSH
16881: DOUBLE
16882: LD_INT 1
16884: DEC
16885: ST_TO_ADDR
16886: LD_INT 16
16888: PUSH
16889: FOR_TO
16890: IFFALSE 17089
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16892: LD_ADDR_VAR 0 3
16896: PUSH
16897: LD_INT 10
16899: PUSH
16900: LD_INT 20
16902: PUSH
16903: LD_INT 30
16905: PUSH
16906: LD_INT 40
16908: PUSH
16909: LD_INT 50
16911: PUSH
16912: LD_INT 60
16914: PUSH
16915: LD_INT 70
16917: PUSH
16918: LD_INT 80
16920: PUSH
16921: LD_INT 90
16923: PUSH
16924: LD_INT 100
16926: PUSH
16927: LD_INT 110
16929: PUSH
16930: LD_INT 120
16932: PUSH
16933: LD_INT 130
16935: PUSH
16936: LD_INT 140
16938: PUSH
16939: LD_INT 150
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 1
16961: PPUSH
16962: LD_INT 15
16964: PPUSH
16965: CALL_OW 12
16969: ARRAY
16970: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16971: LD_ADDR_VAR 0 4
16975: PUSH
16976: LD_INT 10
16978: PUSH
16979: LD_INT 20
16981: PUSH
16982: LD_INT 30
16984: PUSH
16985: LD_INT 40
16987: PUSH
16988: LD_INT 50
16990: PUSH
16991: LD_INT 60
16993: PUSH
16994: LD_INT 70
16996: PUSH
16997: LD_INT 80
16999: PUSH
17000: LD_INT 90
17002: PUSH
17003: LD_INT 100
17005: PUSH
17006: LD_INT 110
17008: PUSH
17009: LD_INT 120
17011: PUSH
17012: LD_INT 130
17014: PUSH
17015: LD_INT 140
17017: PUSH
17018: LD_INT 150
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 1
17040: PPUSH
17041: LD_INT 15
17043: PPUSH
17044: CALL_OW 12
17048: ARRAY
17049: ST_TO_ADDR
// if ValidHex ( x , y ) then
17050: LD_VAR 0 3
17054: PPUSH
17055: LD_VAR 0 4
17059: PPUSH
17060: CALL_OW 488
17064: IFFALSE 17087
// begin result := [ x , y ] ;
17066: LD_ADDR_VAR 0 1
17070: PUSH
17071: LD_VAR 0 3
17075: PUSH
17076: LD_VAR 0 4
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: ST_TO_ADDR
// break ;
17085: GO 17089
// end ; end ;
17087: GO 16889
17089: POP
17090: POP
// if result then
17091: LD_VAR 0 1
17095: IFFALSE 17155
// begin ToLua ( playSibBomb() ) ;
17097: LD_STRING playSibBomb()
17099: PPUSH
17100: CALL_OW 559
// wait ( 0 0$14 ) ;
17104: LD_INT 490
17106: PPUSH
17107: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17111: LD_VAR 0 1
17115: PUSH
17116: LD_INT 1
17118: ARRAY
17119: PPUSH
17120: LD_VAR 0 1
17124: PUSH
17125: LD_INT 2
17127: ARRAY
17128: PPUSH
17129: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17133: LD_VAR 0 1
17137: PUSH
17138: LD_INT 1
17140: ARRAY
17141: PPUSH
17142: LD_VAR 0 1
17146: PUSH
17147: LD_INT 2
17149: ARRAY
17150: PPUSH
17151: CALL_OW 429
// end ; end ;
17155: LD_VAR 0 1
17159: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17160: LD_EXP 43
17164: PUSH
17165: LD_EXP 65
17169: AND
17170: IFFALSE 17182
17172: GO 17174
17174: DISABLE
// YouLost (  ) ;
17175: LD_STRING 
17177: PPUSH
17178: CALL_OW 104
17182: END
// every 0 0$1 trigger StreamModeActive and sFog do
17183: LD_EXP 43
17187: PUSH
17188: LD_EXP 64
17192: AND
17193: IFFALSE 17207
17195: GO 17197
17197: DISABLE
// FogOff ( your_side ) ;
17198: LD_OWVAR 2
17202: PPUSH
17203: CALL_OW 344
17207: END
// every 0 0$1 trigger StreamModeActive and sSun do
17208: LD_EXP 43
17212: PUSH
17213: LD_EXP 66
17217: AND
17218: IFFALSE 17246
17220: GO 17222
17222: DISABLE
// begin solar_recharge_percent := 0 ;
17223: LD_ADDR_OWVAR 79
17227: PUSH
17228: LD_INT 0
17230: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17231: LD_INT 10500
17233: PPUSH
17234: CALL_OW 67
// solar_recharge_percent := 100 ;
17238: LD_ADDR_OWVAR 79
17242: PUSH
17243: LD_INT 100
17245: ST_TO_ADDR
// end ;
17246: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17247: LD_EXP 43
17251: PUSH
17252: LD_EXP 67
17256: AND
17257: IFFALSE 17496
17259: GO 17261
17261: DISABLE
17262: LD_INT 0
17264: PPUSH
17265: PPUSH
17266: PPUSH
// begin tmp := [ ] ;
17267: LD_ADDR_VAR 0 3
17271: PUSH
17272: EMPTY
17273: ST_TO_ADDR
// for i := 1 to 6 do
17274: LD_ADDR_VAR 0 1
17278: PUSH
17279: DOUBLE
17280: LD_INT 1
17282: DEC
17283: ST_TO_ADDR
17284: LD_INT 6
17286: PUSH
17287: FOR_TO
17288: IFFALSE 17393
// begin uc_nation := nation_nature ;
17290: LD_ADDR_OWVAR 21
17294: PUSH
17295: LD_INT 0
17297: ST_TO_ADDR
// uc_side := 0 ;
17298: LD_ADDR_OWVAR 20
17302: PUSH
17303: LD_INT 0
17305: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17306: LD_ADDR_OWVAR 29
17310: PUSH
17311: LD_INT 12
17313: PUSH
17314: LD_INT 12
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: ST_TO_ADDR
// hc_agressivity := 20 ;
17321: LD_ADDR_OWVAR 35
17325: PUSH
17326: LD_INT 20
17328: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17329: LD_ADDR_OWVAR 28
17333: PUSH
17334: LD_INT 17
17336: ST_TO_ADDR
// hc_gallery :=  ;
17337: LD_ADDR_OWVAR 33
17341: PUSH
17342: LD_STRING 
17344: ST_TO_ADDR
// hc_name :=  ;
17345: LD_ADDR_OWVAR 26
17349: PUSH
17350: LD_STRING 
17352: ST_TO_ADDR
// un := CreateHuman ;
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: CALL_OW 44
17362: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_INT 1
17370: PPUSH
17371: CALL_OW 51
// tmp := tmp ^ un ;
17375: LD_ADDR_VAR 0 3
17379: PUSH
17380: LD_VAR 0 3
17384: PUSH
17385: LD_VAR 0 2
17389: ADD
17390: ST_TO_ADDR
// end ;
17391: GO 17287
17393: POP
17394: POP
// repeat wait ( 0 0$1 ) ;
17395: LD_INT 35
17397: PPUSH
17398: CALL_OW 67
// for un in tmp do
17402: LD_ADDR_VAR 0 2
17406: PUSH
17407: LD_VAR 0 3
17411: PUSH
17412: FOR_IN
17413: IFFALSE 17487
// begin if IsDead ( un ) then
17415: LD_VAR 0 2
17419: PPUSH
17420: CALL_OW 301
17424: IFFALSE 17444
// begin tmp := tmp diff un ;
17426: LD_ADDR_VAR 0 3
17430: PUSH
17431: LD_VAR 0 3
17435: PUSH
17436: LD_VAR 0 2
17440: DIFF
17441: ST_TO_ADDR
// continue ;
17442: GO 17412
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17444: LD_VAR 0 2
17448: PPUSH
17449: LD_INT 3
17451: PUSH
17452: LD_INT 22
17454: PUSH
17455: LD_INT 0
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 69
17470: PPUSH
17471: LD_VAR 0 2
17475: PPUSH
17476: CALL_OW 74
17480: PPUSH
17481: CALL_OW 115
// end ;
17485: GO 17412
17487: POP
17488: POP
// until not tmp ;
17489: LD_VAR 0 3
17493: NOT
17494: IFFALSE 17395
// end ;
17496: PPOPN 3
17498: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17499: LD_EXP 43
17503: PUSH
17504: LD_EXP 68
17508: AND
17509: IFFALSE 17563
17511: GO 17513
17513: DISABLE
// begin ToLua ( displayTroll(); ) ;
17514: LD_STRING displayTroll();
17516: PPUSH
17517: CALL_OW 559
// wait ( 3 3$00 ) ;
17521: LD_INT 6300
17523: PPUSH
17524: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17528: LD_STRING hideTroll();
17530: PPUSH
17531: CALL_OW 559
// wait ( 1 1$00 ) ;
17535: LD_INT 2100
17537: PPUSH
17538: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17542: LD_STRING displayTroll();
17544: PPUSH
17545: CALL_OW 559
// wait ( 1 1$00 ) ;
17549: LD_INT 2100
17551: PPUSH
17552: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17556: LD_STRING hideTroll();
17558: PPUSH
17559: CALL_OW 559
// end ;
17563: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17564: LD_EXP 43
17568: PUSH
17569: LD_EXP 69
17573: AND
17574: IFFALSE 17637
17576: GO 17578
17578: DISABLE
17579: LD_INT 0
17581: PPUSH
// begin p := 0 ;
17582: LD_ADDR_VAR 0 1
17586: PUSH
17587: LD_INT 0
17589: ST_TO_ADDR
// repeat game_speed := 1 ;
17590: LD_ADDR_OWVAR 65
17594: PUSH
17595: LD_INT 1
17597: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17598: LD_INT 35
17600: PPUSH
17601: CALL_OW 67
// p := p + 1 ;
17605: LD_ADDR_VAR 0 1
17609: PUSH
17610: LD_VAR 0 1
17614: PUSH
17615: LD_INT 1
17617: PLUS
17618: ST_TO_ADDR
// until p >= 60 ;
17619: LD_VAR 0 1
17623: PUSH
17624: LD_INT 60
17626: GREATEREQUAL
17627: IFFALSE 17590
// game_speed := 4 ;
17629: LD_ADDR_OWVAR 65
17633: PUSH
17634: LD_INT 4
17636: ST_TO_ADDR
// end ;
17637: PPOPN 1
17639: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17640: LD_EXP 43
17644: PUSH
17645: LD_EXP 70
17649: AND
17650: IFFALSE 17796
17652: GO 17654
17654: DISABLE
17655: LD_INT 0
17657: PPUSH
17658: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17659: LD_ADDR_VAR 0 1
17663: PUSH
17664: LD_INT 22
17666: PUSH
17667: LD_OWVAR 2
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 2
17678: PUSH
17679: LD_INT 30
17681: PUSH
17682: LD_INT 0
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 30
17691: PUSH
17692: LD_INT 1
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PPUSH
17708: CALL_OW 69
17712: ST_TO_ADDR
// if not depot then
17713: LD_VAR 0 1
17717: NOT
17718: IFFALSE 17722
// exit ;
17720: GO 17796
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17722: LD_ADDR_VAR 0 2
17726: PUSH
17727: LD_VAR 0 1
17731: PUSH
17732: LD_INT 1
17734: PPUSH
17735: LD_VAR 0 1
17739: PPUSH
17740: CALL_OW 12
17744: ARRAY
17745: PPUSH
17746: CALL_OW 274
17750: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17751: LD_VAR 0 2
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: LD_INT 0
17761: PPUSH
17762: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17766: LD_VAR 0 2
17770: PPUSH
17771: LD_INT 2
17773: PPUSH
17774: LD_INT 0
17776: PPUSH
17777: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17781: LD_VAR 0 2
17785: PPUSH
17786: LD_INT 3
17788: PPUSH
17789: LD_INT 0
17791: PPUSH
17792: CALL_OW 277
// end ;
17796: PPOPN 2
17798: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17799: LD_EXP 43
17803: PUSH
17804: LD_EXP 71
17808: AND
17809: IFFALSE 17906
17811: GO 17813
17813: DISABLE
17814: LD_INT 0
17816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17817: LD_ADDR_VAR 0 1
17821: PUSH
17822: LD_INT 22
17824: PUSH
17825: LD_OWVAR 2
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 21
17836: PUSH
17837: LD_INT 1
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 3
17846: PUSH
17847: LD_INT 23
17849: PUSH
17850: LD_INT 0
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 69
17870: ST_TO_ADDR
// if not tmp then
17871: LD_VAR 0 1
17875: NOT
17876: IFFALSE 17880
// exit ;
17878: GO 17906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17880: LD_VAR 0 1
17884: PUSH
17885: LD_INT 1
17887: PPUSH
17888: LD_VAR 0 1
17892: PPUSH
17893: CALL_OW 12
17897: ARRAY
17898: PPUSH
17899: LD_INT 200
17901: PPUSH
17902: CALL_OW 234
// end ;
17906: PPOPN 1
17908: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17909: LD_EXP 43
17913: PUSH
17914: LD_EXP 72
17918: AND
17919: IFFALSE 17998
17921: GO 17923
17923: DISABLE
17924: LD_INT 0
17926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17927: LD_ADDR_VAR 0 1
17931: PUSH
17932: LD_INT 22
17934: PUSH
17935: LD_OWVAR 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 21
17946: PUSH
17947: LD_INT 2
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PPUSH
17958: CALL_OW 69
17962: ST_TO_ADDR
// if not tmp then
17963: LD_VAR 0 1
17967: NOT
17968: IFFALSE 17972
// exit ;
17970: GO 17998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17972: LD_VAR 0 1
17976: PUSH
17977: LD_INT 1
17979: PPUSH
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL_OW 12
17989: ARRAY
17990: PPUSH
17991: LD_INT 60
17993: PPUSH
17994: CALL_OW 234
// end ;
17998: PPOPN 1
18000: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18001: LD_EXP 43
18005: PUSH
18006: LD_EXP 73
18010: AND
18011: IFFALSE 18110
18013: GO 18015
18015: DISABLE
18016: LD_INT 0
18018: PPUSH
18019: PPUSH
// begin enable ;
18020: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18021: LD_ADDR_VAR 0 1
18025: PUSH
18026: LD_INT 22
18028: PUSH
18029: LD_OWVAR 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 61
18040: PUSH
18041: EMPTY
18042: LIST
18043: PUSH
18044: LD_INT 33
18046: PUSH
18047: LD_INT 2
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: PPUSH
18059: CALL_OW 69
18063: ST_TO_ADDR
// if not tmp then
18064: LD_VAR 0 1
18068: NOT
18069: IFFALSE 18073
// exit ;
18071: GO 18110
// for i in tmp do
18073: LD_ADDR_VAR 0 2
18077: PUSH
18078: LD_VAR 0 1
18082: PUSH
18083: FOR_IN
18084: IFFALSE 18108
// if IsControledBy ( i ) then
18086: LD_VAR 0 2
18090: PPUSH
18091: CALL_OW 312
18095: IFFALSE 18106
// ComUnlink ( i ) ;
18097: LD_VAR 0 2
18101: PPUSH
18102: CALL_OW 136
18106: GO 18083
18108: POP
18109: POP
// end ;
18110: PPOPN 2
18112: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18113: LD_EXP 43
18117: PUSH
18118: LD_EXP 74
18122: AND
18123: IFFALSE 18263
18125: GO 18127
18127: DISABLE
18128: LD_INT 0
18130: PPUSH
18131: PPUSH
// begin ToLua ( displayPowell(); ) ;
18132: LD_STRING displayPowell();
18134: PPUSH
18135: CALL_OW 559
// uc_side := 0 ;
18139: LD_ADDR_OWVAR 20
18143: PUSH
18144: LD_INT 0
18146: ST_TO_ADDR
// uc_nation := 2 ;
18147: LD_ADDR_OWVAR 21
18151: PUSH
18152: LD_INT 2
18154: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18155: LD_ADDR_OWVAR 37
18159: PUSH
18160: LD_INT 14
18162: ST_TO_ADDR
// vc_engine := engine_siberite ;
18163: LD_ADDR_OWVAR 39
18167: PUSH
18168: LD_INT 3
18170: ST_TO_ADDR
// vc_control := control_apeman ;
18171: LD_ADDR_OWVAR 38
18175: PUSH
18176: LD_INT 5
18178: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18179: LD_ADDR_OWVAR 40
18183: PUSH
18184: LD_INT 29
18186: ST_TO_ADDR
// un := CreateVehicle ;
18187: LD_ADDR_VAR 0 2
18191: PUSH
18192: CALL_OW 45
18196: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18197: LD_VAR 0 2
18201: PPUSH
18202: LD_INT 1
18204: PPUSH
18205: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18209: LD_INT 35
18211: PPUSH
18212: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18216: LD_VAR 0 2
18220: PPUSH
18221: LD_INT 22
18223: PUSH
18224: LD_OWVAR 2
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PPUSH
18233: CALL_OW 69
18237: PPUSH
18238: LD_VAR 0 2
18242: PPUSH
18243: CALL_OW 74
18247: PPUSH
18248: CALL_OW 115
// until IsDead ( un ) ;
18252: LD_VAR 0 2
18256: PPUSH
18257: CALL_OW 301
18261: IFFALSE 18209
// end ;
18263: PPOPN 2
18265: END
// every 0 0$1 trigger StreamModeActive and sStu do
18266: LD_EXP 43
18270: PUSH
18271: LD_EXP 82
18275: AND
18276: IFFALSE 18292
18278: GO 18280
18280: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18281: LD_STRING displayStucuk();
18283: PPUSH
18284: CALL_OW 559
// ResetFog ;
18288: CALL_OW 335
// end ;
18292: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18293: LD_EXP 43
18297: PUSH
18298: LD_EXP 75
18302: AND
18303: IFFALSE 18444
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_OWVAR 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 21
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: ST_TO_ADDR
// if not tmp then
18348: LD_VAR 0 2
18352: NOT
18353: IFFALSE 18357
// exit ;
18355: GO 18444
// un := tmp [ rand ( 1 , tmp ) ] ;
18357: LD_ADDR_VAR 0 1
18361: PUSH
18362: LD_VAR 0 2
18366: PUSH
18367: LD_INT 1
18369: PPUSH
18370: LD_VAR 0 2
18374: PPUSH
18375: CALL_OW 12
18379: ARRAY
18380: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18381: LD_VAR 0 1
18385: PPUSH
18386: LD_INT 0
18388: PPUSH
18389: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18393: LD_VAR 0 1
18397: PPUSH
18398: LD_OWVAR 3
18402: PUSH
18403: LD_VAR 0 1
18407: DIFF
18408: PPUSH
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 74
18418: PPUSH
18419: CALL_OW 115
// wait ( 0 0$20 ) ;
18423: LD_INT 700
18425: PPUSH
18426: CALL_OW 67
// SetSide ( un , your_side ) ;
18430: LD_VAR 0 1
18434: PPUSH
18435: LD_OWVAR 2
18439: PPUSH
18440: CALL_OW 235
// end ;
18444: PPOPN 2
18446: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18447: LD_EXP 43
18451: PUSH
18452: LD_EXP 76
18456: AND
18457: IFFALSE 18563
18459: GO 18461
18461: DISABLE
18462: LD_INT 0
18464: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18465: LD_ADDR_VAR 0 1
18469: PUSH
18470: LD_INT 22
18472: PUSH
18473: LD_OWVAR 2
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 2
18484: PUSH
18485: LD_INT 30
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 30
18497: PUSH
18498: LD_INT 1
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PPUSH
18514: CALL_OW 69
18518: ST_TO_ADDR
// if not depot then
18519: LD_VAR 0 1
18523: NOT
18524: IFFALSE 18528
// exit ;
18526: GO 18563
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18528: LD_VAR 0 1
18532: PUSH
18533: LD_INT 1
18535: ARRAY
18536: PPUSH
18537: CALL_OW 250
18541: PPUSH
18542: LD_VAR 0 1
18546: PUSH
18547: LD_INT 1
18549: ARRAY
18550: PPUSH
18551: CALL_OW 251
18555: PPUSH
18556: LD_INT 70
18558: PPUSH
18559: CALL_OW 495
// end ;
18563: PPOPN 1
18565: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18566: LD_EXP 43
18570: PUSH
18571: LD_EXP 77
18575: AND
18576: IFFALSE 18787
18578: GO 18580
18580: DISABLE
18581: LD_INT 0
18583: PPUSH
18584: PPUSH
18585: PPUSH
18586: PPUSH
18587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18588: LD_ADDR_VAR 0 5
18592: PUSH
18593: LD_INT 22
18595: PUSH
18596: LD_OWVAR 2
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PPUSH
18619: CALL_OW 69
18623: ST_TO_ADDR
// if not tmp then
18624: LD_VAR 0 5
18628: NOT
18629: IFFALSE 18633
// exit ;
18631: GO 18787
// for i in tmp do
18633: LD_ADDR_VAR 0 1
18637: PUSH
18638: LD_VAR 0 5
18642: PUSH
18643: FOR_IN
18644: IFFALSE 18785
// begin d := rand ( 0 , 5 ) ;
18646: LD_ADDR_VAR 0 4
18650: PUSH
18651: LD_INT 0
18653: PPUSH
18654: LD_INT 5
18656: PPUSH
18657: CALL_OW 12
18661: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18662: LD_ADDR_VAR 0 2
18666: PUSH
18667: LD_VAR 0 1
18671: PPUSH
18672: CALL_OW 250
18676: PPUSH
18677: LD_VAR 0 4
18681: PPUSH
18682: LD_INT 3
18684: PPUSH
18685: LD_INT 12
18687: PPUSH
18688: CALL_OW 12
18692: PPUSH
18693: CALL_OW 272
18697: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18698: LD_ADDR_VAR 0 3
18702: PUSH
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL_OW 251
18712: PPUSH
18713: LD_VAR 0 4
18717: PPUSH
18718: LD_INT 3
18720: PPUSH
18721: LD_INT 12
18723: PPUSH
18724: CALL_OW 12
18728: PPUSH
18729: CALL_OW 273
18733: ST_TO_ADDR
// if ValidHex ( x , y ) then
18734: LD_VAR 0 2
18738: PPUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: CALL_OW 488
18748: IFFALSE 18783
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18750: LD_VAR 0 1
18754: PPUSH
18755: LD_VAR 0 2
18759: PPUSH
18760: LD_VAR 0 3
18764: PPUSH
18765: LD_INT 3
18767: PPUSH
18768: LD_INT 6
18770: PPUSH
18771: CALL_OW 12
18775: PPUSH
18776: LD_INT 1
18778: PPUSH
18779: CALL_OW 483
// end ;
18783: GO 18643
18785: POP
18786: POP
// end ;
18787: PPOPN 5
18789: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18790: LD_EXP 43
18794: PUSH
18795: LD_EXP 78
18799: AND
18800: IFFALSE 18894
18802: GO 18804
18804: DISABLE
18805: LD_INT 0
18807: PPUSH
18808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18809: LD_ADDR_VAR 0 2
18813: PUSH
18814: LD_INT 22
18816: PUSH
18817: LD_OWVAR 2
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 32
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 21
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: LIST
18850: PPUSH
18851: CALL_OW 69
18855: ST_TO_ADDR
// if not tmp then
18856: LD_VAR 0 2
18860: NOT
18861: IFFALSE 18865
// exit ;
18863: GO 18894
// for i in tmp do
18865: LD_ADDR_VAR 0 1
18869: PUSH
18870: LD_VAR 0 2
18874: PUSH
18875: FOR_IN
18876: IFFALSE 18892
// SetFuel ( i , 0 ) ;
18878: LD_VAR 0 1
18882: PPUSH
18883: LD_INT 0
18885: PPUSH
18886: CALL_OW 240
18890: GO 18875
18892: POP
18893: POP
// end ;
18894: PPOPN 2
18896: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18897: LD_EXP 43
18901: PUSH
18902: LD_EXP 79
18906: AND
18907: IFFALSE 18973
18909: GO 18911
18911: DISABLE
18912: LD_INT 0
18914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18915: LD_ADDR_VAR 0 1
18919: PUSH
18920: LD_INT 22
18922: PUSH
18923: LD_OWVAR 2
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 30
18934: PUSH
18935: LD_INT 29
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PPUSH
18946: CALL_OW 69
18950: ST_TO_ADDR
// if not tmp then
18951: LD_VAR 0 1
18955: NOT
18956: IFFALSE 18960
// exit ;
18958: GO 18973
// DestroyUnit ( tmp [ 1 ] ) ;
18960: LD_VAR 0 1
18964: PUSH
18965: LD_INT 1
18967: ARRAY
18968: PPUSH
18969: CALL_OW 65
// end ;
18973: PPOPN 1
18975: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18976: LD_EXP 43
18980: PUSH
18981: LD_EXP 81
18985: AND
18986: IFFALSE 19115
18988: GO 18990
18990: DISABLE
18991: LD_INT 0
18993: PPUSH
// begin uc_side := 0 ;
18994: LD_ADDR_OWVAR 20
18998: PUSH
18999: LD_INT 0
19001: ST_TO_ADDR
// uc_nation := nation_arabian ;
19002: LD_ADDR_OWVAR 21
19006: PUSH
19007: LD_INT 2
19009: ST_TO_ADDR
// hc_gallery :=  ;
19010: LD_ADDR_OWVAR 33
19014: PUSH
19015: LD_STRING 
19017: ST_TO_ADDR
// hc_name :=  ;
19018: LD_ADDR_OWVAR 26
19022: PUSH
19023: LD_STRING 
19025: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19026: LD_INT 1
19028: PPUSH
19029: LD_INT 11
19031: PPUSH
19032: LD_INT 10
19034: PPUSH
19035: CALL_OW 380
// un := CreateHuman ;
19039: LD_ADDR_VAR 0 1
19043: PUSH
19044: CALL_OW 44
19048: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19049: LD_VAR 0 1
19053: PPUSH
19054: LD_INT 1
19056: PPUSH
19057: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19061: LD_INT 35
19063: PPUSH
19064: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19068: LD_VAR 0 1
19072: PPUSH
19073: LD_INT 22
19075: PUSH
19076: LD_OWVAR 2
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PPUSH
19085: CALL_OW 69
19089: PPUSH
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 74
19099: PPUSH
19100: CALL_OW 115
// until IsDead ( un ) ;
19104: LD_VAR 0 1
19108: PPUSH
19109: CALL_OW 301
19113: IFFALSE 19061
// end ;
19115: PPOPN 1
19117: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19118: LD_EXP 43
19122: PUSH
19123: LD_EXP 83
19127: AND
19128: IFFALSE 19140
19130: GO 19132
19132: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19133: LD_STRING earthquake(getX(game), 0, 32)
19135: PPUSH
19136: CALL_OW 559
19140: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19141: LD_EXP 43
19145: PUSH
19146: LD_EXP 84
19150: AND
19151: IFFALSE 19242
19153: GO 19155
19155: DISABLE
19156: LD_INT 0
19158: PPUSH
// begin enable ;
19159: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19160: LD_ADDR_VAR 0 1
19164: PUSH
19165: LD_INT 22
19167: PUSH
19168: LD_OWVAR 2
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 33
19189: PUSH
19190: LD_INT 3
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 69
19206: ST_TO_ADDR
// if not tmp then
19207: LD_VAR 0 1
19211: NOT
19212: IFFALSE 19216
// exit ;
19214: GO 19242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19216: LD_VAR 0 1
19220: PUSH
19221: LD_INT 1
19223: PPUSH
19224: LD_VAR 0 1
19228: PPUSH
19229: CALL_OW 12
19233: ARRAY
19234: PPUSH
19235: LD_INT 1
19237: PPUSH
19238: CALL_OW 234
// end ;
19242: PPOPN 1
19244: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19245: LD_EXP 43
19249: PUSH
19250: LD_EXP 85
19254: AND
19255: IFFALSE 19396
19257: GO 19259
19259: DISABLE
19260: LD_INT 0
19262: PPUSH
19263: PPUSH
19264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19265: LD_ADDR_VAR 0 3
19269: PUSH
19270: LD_INT 22
19272: PUSH
19273: LD_OWVAR 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 25
19284: PUSH
19285: LD_INT 1
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PPUSH
19296: CALL_OW 69
19300: ST_TO_ADDR
// if not tmp then
19301: LD_VAR 0 3
19305: NOT
19306: IFFALSE 19310
// exit ;
19308: GO 19396
// un := tmp [ rand ( 1 , tmp ) ] ;
19310: LD_ADDR_VAR 0 2
19314: PUSH
19315: LD_VAR 0 3
19319: PUSH
19320: LD_INT 1
19322: PPUSH
19323: LD_VAR 0 3
19327: PPUSH
19328: CALL_OW 12
19332: ARRAY
19333: ST_TO_ADDR
// if Crawls ( un ) then
19334: LD_VAR 0 2
19338: PPUSH
19339: CALL_OW 318
19343: IFFALSE 19354
// ComWalk ( un ) ;
19345: LD_VAR 0 2
19349: PPUSH
19350: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19354: LD_VAR 0 2
19358: PPUSH
19359: LD_INT 9
19361: PPUSH
19362: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19366: LD_INT 28
19368: PPUSH
19369: LD_OWVAR 2
19373: PPUSH
19374: LD_INT 2
19376: PPUSH
19377: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19381: LD_INT 29
19383: PPUSH
19384: LD_OWVAR 2
19388: PPUSH
19389: LD_INT 2
19391: PPUSH
19392: CALL_OW 322
// end ;
19396: PPOPN 3
19398: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19399: LD_EXP 43
19403: PUSH
19404: LD_EXP 86
19408: AND
19409: IFFALSE 19520
19411: GO 19413
19413: DISABLE
19414: LD_INT 0
19416: PPUSH
19417: PPUSH
19418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19419: LD_ADDR_VAR 0 3
19423: PUSH
19424: LD_INT 22
19426: PUSH
19427: LD_OWVAR 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 25
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PPUSH
19450: CALL_OW 69
19454: ST_TO_ADDR
// if not tmp then
19455: LD_VAR 0 3
19459: NOT
19460: IFFALSE 19464
// exit ;
19462: GO 19520
// un := tmp [ rand ( 1 , tmp ) ] ;
19464: LD_ADDR_VAR 0 2
19468: PUSH
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 1
19476: PPUSH
19477: LD_VAR 0 3
19481: PPUSH
19482: CALL_OW 12
19486: ARRAY
19487: ST_TO_ADDR
// if Crawls ( un ) then
19488: LD_VAR 0 2
19492: PPUSH
19493: CALL_OW 318
19497: IFFALSE 19508
// ComWalk ( un ) ;
19499: LD_VAR 0 2
19503: PPUSH
19504: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19508: LD_VAR 0 2
19512: PPUSH
19513: LD_INT 8
19515: PPUSH
19516: CALL_OW 336
// end ;
19520: PPOPN 3
19522: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19523: LD_EXP 43
19527: PUSH
19528: LD_EXP 87
19532: AND
19533: IFFALSE 19677
19535: GO 19537
19537: DISABLE
19538: LD_INT 0
19540: PPUSH
19541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19542: LD_ADDR_VAR 0 2
19546: PUSH
19547: LD_INT 22
19549: PUSH
19550: LD_OWVAR 2
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 21
19561: PUSH
19562: LD_INT 2
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 34
19574: PUSH
19575: LD_INT 12
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 34
19584: PUSH
19585: LD_INT 51
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 34
19594: PUSH
19595: LD_INT 32
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: LIST
19612: PPUSH
19613: CALL_OW 69
19617: ST_TO_ADDR
// if not tmp then
19618: LD_VAR 0 2
19622: NOT
19623: IFFALSE 19627
// exit ;
19625: GO 19677
// for i in tmp do
19627: LD_ADDR_VAR 0 1
19631: PUSH
19632: LD_VAR 0 2
19636: PUSH
19637: FOR_IN
19638: IFFALSE 19675
// if GetCargo ( i , mat_artifact ) = 0 then
19640: LD_VAR 0 1
19644: PPUSH
19645: LD_INT 4
19647: PPUSH
19648: CALL_OW 289
19652: PUSH
19653: LD_INT 0
19655: EQUAL
19656: IFFALSE 19673
// SetCargo ( i , mat_siberit , 100 ) ;
19658: LD_VAR 0 1
19662: PPUSH
19663: LD_INT 3
19665: PPUSH
19666: LD_INT 100
19668: PPUSH
19669: CALL_OW 290
19673: GO 19637
19675: POP
19676: POP
// end ;
19677: PPOPN 2
19679: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19680: LD_EXP 43
19684: PUSH
19685: LD_EXP 88
19689: AND
19690: IFFALSE 19873
19692: GO 19694
19694: DISABLE
19695: LD_INT 0
19697: PPUSH
19698: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19699: LD_ADDR_VAR 0 2
19703: PUSH
19704: LD_INT 22
19706: PUSH
19707: LD_OWVAR 2
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PPUSH
19716: CALL_OW 69
19720: ST_TO_ADDR
// if not tmp then
19721: LD_VAR 0 2
19725: NOT
19726: IFFALSE 19730
// exit ;
19728: GO 19873
// for i := 1 to 2 do
19730: LD_ADDR_VAR 0 1
19734: PUSH
19735: DOUBLE
19736: LD_INT 1
19738: DEC
19739: ST_TO_ADDR
19740: LD_INT 2
19742: PUSH
19743: FOR_TO
19744: IFFALSE 19871
// begin uc_side := your_side ;
19746: LD_ADDR_OWVAR 20
19750: PUSH
19751: LD_OWVAR 2
19755: ST_TO_ADDR
// uc_nation := nation_american ;
19756: LD_ADDR_OWVAR 21
19760: PUSH
19761: LD_INT 1
19763: ST_TO_ADDR
// vc_chassis := us_morphling ;
19764: LD_ADDR_OWVAR 37
19768: PUSH
19769: LD_INT 5
19771: ST_TO_ADDR
// vc_engine := engine_siberite ;
19772: LD_ADDR_OWVAR 39
19776: PUSH
19777: LD_INT 3
19779: ST_TO_ADDR
// vc_control := control_computer ;
19780: LD_ADDR_OWVAR 38
19784: PUSH
19785: LD_INT 3
19787: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19788: LD_ADDR_OWVAR 40
19792: PUSH
19793: LD_INT 10
19795: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19796: LD_VAR 0 2
19800: PUSH
19801: LD_INT 1
19803: ARRAY
19804: PPUSH
19805: CALL_OW 310
19809: NOT
19810: IFFALSE 19857
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19812: CALL_OW 45
19816: PPUSH
19817: LD_VAR 0 2
19821: PUSH
19822: LD_INT 1
19824: ARRAY
19825: PPUSH
19826: CALL_OW 250
19830: PPUSH
19831: LD_VAR 0 2
19835: PUSH
19836: LD_INT 1
19838: ARRAY
19839: PPUSH
19840: CALL_OW 251
19844: PPUSH
19845: LD_INT 12
19847: PPUSH
19848: LD_INT 1
19850: PPUSH
19851: CALL_OW 50
19855: GO 19869
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19857: CALL_OW 45
19861: PPUSH
19862: LD_INT 1
19864: PPUSH
19865: CALL_OW 51
// end ;
19869: GO 19743
19871: POP
19872: POP
// end ;
19873: PPOPN 2
19875: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19876: LD_EXP 43
19880: PUSH
19881: LD_EXP 89
19885: AND
19886: IFFALSE 20108
19888: GO 19890
19890: DISABLE
19891: LD_INT 0
19893: PPUSH
19894: PPUSH
19895: PPUSH
19896: PPUSH
19897: PPUSH
19898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19899: LD_ADDR_VAR 0 6
19903: PUSH
19904: LD_INT 22
19906: PUSH
19907: LD_OWVAR 2
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 21
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 3
19928: PUSH
19929: LD_INT 23
19931: PUSH
19932: LD_INT 0
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: LIST
19947: PPUSH
19948: CALL_OW 69
19952: ST_TO_ADDR
// if not tmp then
19953: LD_VAR 0 6
19957: NOT
19958: IFFALSE 19962
// exit ;
19960: GO 20108
// s1 := rand ( 1 , 4 ) ;
19962: LD_ADDR_VAR 0 2
19966: PUSH
19967: LD_INT 1
19969: PPUSH
19970: LD_INT 4
19972: PPUSH
19973: CALL_OW 12
19977: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19978: LD_ADDR_VAR 0 4
19982: PUSH
19983: LD_VAR 0 6
19987: PUSH
19988: LD_INT 1
19990: ARRAY
19991: PPUSH
19992: LD_VAR 0 2
19996: PPUSH
19997: CALL_OW 259
20001: ST_TO_ADDR
// if s1 = 1 then
20002: LD_VAR 0 2
20006: PUSH
20007: LD_INT 1
20009: EQUAL
20010: IFFALSE 20030
// s2 := rand ( 2 , 4 ) else
20012: LD_ADDR_VAR 0 3
20016: PUSH
20017: LD_INT 2
20019: PPUSH
20020: LD_INT 4
20022: PPUSH
20023: CALL_OW 12
20027: ST_TO_ADDR
20028: GO 20038
// s2 := 1 ;
20030: LD_ADDR_VAR 0 3
20034: PUSH
20035: LD_INT 1
20037: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20038: LD_ADDR_VAR 0 5
20042: PUSH
20043: LD_VAR 0 6
20047: PUSH
20048: LD_INT 1
20050: ARRAY
20051: PPUSH
20052: LD_VAR 0 3
20056: PPUSH
20057: CALL_OW 259
20061: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20062: LD_VAR 0 6
20066: PUSH
20067: LD_INT 1
20069: ARRAY
20070: PPUSH
20071: LD_VAR 0 2
20075: PPUSH
20076: LD_VAR 0 5
20080: PPUSH
20081: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20085: LD_VAR 0 6
20089: PUSH
20090: LD_INT 1
20092: ARRAY
20093: PPUSH
20094: LD_VAR 0 3
20098: PPUSH
20099: LD_VAR 0 4
20103: PPUSH
20104: CALL_OW 237
// end ;
20108: PPOPN 6
20110: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20111: LD_EXP 43
20115: PUSH
20116: LD_EXP 90
20120: AND
20121: IFFALSE 20200
20123: GO 20125
20125: DISABLE
20126: LD_INT 0
20128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20129: LD_ADDR_VAR 0 1
20133: PUSH
20134: LD_INT 22
20136: PUSH
20137: LD_OWVAR 2
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 30
20148: PUSH
20149: LD_INT 3
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PPUSH
20160: CALL_OW 69
20164: ST_TO_ADDR
// if not tmp then
20165: LD_VAR 0 1
20169: NOT
20170: IFFALSE 20174
// exit ;
20172: GO 20200
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20174: LD_VAR 0 1
20178: PUSH
20179: LD_INT 1
20181: PPUSH
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 12
20191: ARRAY
20192: PPUSH
20193: LD_INT 1
20195: PPUSH
20196: CALL_OW 234
// end ;
20200: PPOPN 1
20202: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20203: LD_EXP 43
20207: PUSH
20208: LD_EXP 91
20212: AND
20213: IFFALSE 20325
20215: GO 20217
20217: DISABLE
20218: LD_INT 0
20220: PPUSH
20221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20222: LD_ADDR_VAR 0 2
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_OWVAR 2
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: LD_INT 30
20244: PUSH
20245: LD_INT 27
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 30
20254: PUSH
20255: LD_INT 26
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 30
20264: PUSH
20265: LD_INT 28
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PPUSH
20282: CALL_OW 69
20286: ST_TO_ADDR
// if not tmp then
20287: LD_VAR 0 2
20291: NOT
20292: IFFALSE 20296
// exit ;
20294: GO 20325
// for i in tmp do
20296: LD_ADDR_VAR 0 1
20300: PUSH
20301: LD_VAR 0 2
20305: PUSH
20306: FOR_IN
20307: IFFALSE 20323
// SetLives ( i , 1 ) ;
20309: LD_VAR 0 1
20313: PPUSH
20314: LD_INT 1
20316: PPUSH
20317: CALL_OW 234
20321: GO 20306
20323: POP
20324: POP
// end ;
20325: PPOPN 2
20327: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20328: LD_EXP 43
20332: PUSH
20333: LD_EXP 92
20337: AND
20338: IFFALSE 20625
20340: GO 20342
20342: DISABLE
20343: LD_INT 0
20345: PPUSH
20346: PPUSH
20347: PPUSH
// begin i := rand ( 1 , 7 ) ;
20348: LD_ADDR_VAR 0 1
20352: PUSH
20353: LD_INT 1
20355: PPUSH
20356: LD_INT 7
20358: PPUSH
20359: CALL_OW 12
20363: ST_TO_ADDR
// case i of 1 :
20364: LD_VAR 0 1
20368: PUSH
20369: LD_INT 1
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20387
20377: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20378: LD_STRING earthquake(getX(game), 0, 32)
20380: PPUSH
20381: CALL_OW 559
20385: GO 20625
20387: LD_INT 2
20389: DOUBLE
20390: EQUAL
20391: IFTRUE 20395
20393: GO 20409
20395: POP
// begin ToLua ( displayStucuk(); ) ;
20396: LD_STRING displayStucuk();
20398: PPUSH
20399: CALL_OW 559
// ResetFog ;
20403: CALL_OW 335
// end ; 3 :
20407: GO 20625
20409: LD_INT 3
20411: DOUBLE
20412: EQUAL
20413: IFTRUE 20417
20415: GO 20521
20417: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20418: LD_ADDR_VAR 0 2
20422: PUSH
20423: LD_INT 22
20425: PUSH
20426: LD_OWVAR 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 25
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PPUSH
20449: CALL_OW 69
20453: ST_TO_ADDR
// if not tmp then
20454: LD_VAR 0 2
20458: NOT
20459: IFFALSE 20463
// exit ;
20461: GO 20625
// un := tmp [ rand ( 1 , tmp ) ] ;
20463: LD_ADDR_VAR 0 3
20467: PUSH
20468: LD_VAR 0 2
20472: PUSH
20473: LD_INT 1
20475: PPUSH
20476: LD_VAR 0 2
20480: PPUSH
20481: CALL_OW 12
20485: ARRAY
20486: ST_TO_ADDR
// if Crawls ( un ) then
20487: LD_VAR 0 3
20491: PPUSH
20492: CALL_OW 318
20496: IFFALSE 20507
// ComWalk ( un ) ;
20498: LD_VAR 0 3
20502: PPUSH
20503: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20507: LD_VAR 0 3
20511: PPUSH
20512: LD_INT 8
20514: PPUSH
20515: CALL_OW 336
// end ; 4 :
20519: GO 20625
20521: LD_INT 4
20523: DOUBLE
20524: EQUAL
20525: IFTRUE 20529
20527: GO 20603
20529: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20530: LD_ADDR_VAR 0 2
20534: PUSH
20535: LD_INT 22
20537: PUSH
20538: LD_OWVAR 2
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 30
20549: PUSH
20550: LD_INT 29
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PPUSH
20561: CALL_OW 69
20565: ST_TO_ADDR
// if not tmp then
20566: LD_VAR 0 2
20570: NOT
20571: IFFALSE 20575
// exit ;
20573: GO 20625
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20575: LD_VAR 0 2
20579: PUSH
20580: LD_INT 1
20582: ARRAY
20583: PPUSH
20584: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20588: LD_VAR 0 2
20592: PUSH
20593: LD_INT 1
20595: ARRAY
20596: PPUSH
20597: CALL_OW 65
// end ; 5 .. 7 :
20601: GO 20625
20603: LD_INT 5
20605: DOUBLE
20606: GREATEREQUAL
20607: IFFALSE 20615
20609: LD_INT 7
20611: DOUBLE
20612: LESSEQUAL
20613: IFTRUE 20617
20615: GO 20624
20617: POP
// StreamSibBomb ; end ;
20618: CALL 16862 0 0
20622: GO 20625
20624: POP
// end ;
20625: PPOPN 3
20627: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20628: LD_EXP 43
20632: PUSH
20633: LD_EXP 93
20637: AND
20638: IFFALSE 20794
20640: GO 20642
20642: DISABLE
20643: LD_INT 0
20645: PPUSH
20646: PPUSH
20647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20648: LD_ADDR_VAR 0 2
20652: PUSH
20653: LD_INT 81
20655: PUSH
20656: LD_OWVAR 2
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 2
20667: PUSH
20668: LD_INT 21
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 21
20680: PUSH
20681: LD_INT 2
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PPUSH
20697: CALL_OW 69
20701: ST_TO_ADDR
// if not tmp then
20702: LD_VAR 0 2
20706: NOT
20707: IFFALSE 20711
// exit ;
20709: GO 20794
// p := 0 ;
20711: LD_ADDR_VAR 0 3
20715: PUSH
20716: LD_INT 0
20718: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20719: LD_INT 35
20721: PPUSH
20722: CALL_OW 67
// p := p + 1 ;
20726: LD_ADDR_VAR 0 3
20730: PUSH
20731: LD_VAR 0 3
20735: PUSH
20736: LD_INT 1
20738: PLUS
20739: ST_TO_ADDR
// for i in tmp do
20740: LD_ADDR_VAR 0 1
20744: PUSH
20745: LD_VAR 0 2
20749: PUSH
20750: FOR_IN
20751: IFFALSE 20782
// if GetLives ( i ) < 1000 then
20753: LD_VAR 0 1
20757: PPUSH
20758: CALL_OW 256
20762: PUSH
20763: LD_INT 1000
20765: LESS
20766: IFFALSE 20780
// SetLives ( i , 1000 ) ;
20768: LD_VAR 0 1
20772: PPUSH
20773: LD_INT 1000
20775: PPUSH
20776: CALL_OW 234
20780: GO 20750
20782: POP
20783: POP
// until p > 20 ;
20784: LD_VAR 0 3
20788: PUSH
20789: LD_INT 20
20791: GREATER
20792: IFFALSE 20719
// end ;
20794: PPOPN 3
20796: END
// every 0 0$1 trigger StreamModeActive and sTime do
20797: LD_EXP 43
20801: PUSH
20802: LD_EXP 94
20806: AND
20807: IFFALSE 20842
20809: GO 20811
20811: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20812: LD_INT 28
20814: PPUSH
20815: LD_OWVAR 2
20819: PPUSH
20820: LD_INT 2
20822: PPUSH
20823: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20827: LD_INT 30
20829: PPUSH
20830: LD_OWVAR 2
20834: PPUSH
20835: LD_INT 2
20837: PPUSH
20838: CALL_OW 322
// end ;
20842: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20843: LD_EXP 43
20847: PUSH
20848: LD_EXP 95
20852: AND
20853: IFFALSE 20974
20855: GO 20857
20857: DISABLE
20858: LD_INT 0
20860: PPUSH
20861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20862: LD_ADDR_VAR 0 2
20866: PUSH
20867: LD_INT 22
20869: PUSH
20870: LD_OWVAR 2
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 21
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 3
20891: PUSH
20892: LD_INT 23
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 69
20915: ST_TO_ADDR
// if not tmp then
20916: LD_VAR 0 2
20920: NOT
20921: IFFALSE 20925
// exit ;
20923: GO 20974
// for i in tmp do
20925: LD_ADDR_VAR 0 1
20929: PUSH
20930: LD_VAR 0 2
20934: PUSH
20935: FOR_IN
20936: IFFALSE 20972
// begin if Crawls ( i ) then
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 318
20947: IFFALSE 20958
// ComWalk ( i ) ;
20949: LD_VAR 0 1
20953: PPUSH
20954: CALL_OW 138
// SetClass ( i , 2 ) ;
20958: LD_VAR 0 1
20962: PPUSH
20963: LD_INT 2
20965: PPUSH
20966: CALL_OW 336
// end ;
20970: GO 20935
20972: POP
20973: POP
// end ;
20974: PPOPN 2
20976: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20977: LD_EXP 43
20981: PUSH
20982: LD_EXP 96
20986: AND
20987: IFFALSE 21275
20989: GO 20991
20991: DISABLE
20992: LD_INT 0
20994: PPUSH
20995: PPUSH
20996: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20997: LD_OWVAR 2
21001: PPUSH
21002: LD_INT 9
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: LD_INT 1
21010: PPUSH
21011: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21015: LD_INT 9
21017: PPUSH
21018: LD_OWVAR 2
21022: PPUSH
21023: CALL_OW 343
// uc_side := 9 ;
21027: LD_ADDR_OWVAR 20
21031: PUSH
21032: LD_INT 9
21034: ST_TO_ADDR
// uc_nation := 2 ;
21035: LD_ADDR_OWVAR 21
21039: PUSH
21040: LD_INT 2
21042: ST_TO_ADDR
// hc_name := Dark Warrior ;
21043: LD_ADDR_OWVAR 26
21047: PUSH
21048: LD_STRING Dark Warrior
21050: ST_TO_ADDR
// hc_gallery :=  ;
21051: LD_ADDR_OWVAR 33
21055: PUSH
21056: LD_STRING 
21058: ST_TO_ADDR
// hc_noskilllimit := true ;
21059: LD_ADDR_OWVAR 76
21063: PUSH
21064: LD_INT 1
21066: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21067: LD_ADDR_OWVAR 31
21071: PUSH
21072: LD_INT 30
21074: PUSH
21075: LD_INT 30
21077: PUSH
21078: LD_INT 30
21080: PUSH
21081: LD_INT 30
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: ST_TO_ADDR
// un := CreateHuman ;
21090: LD_ADDR_VAR 0 3
21094: PUSH
21095: CALL_OW 44
21099: ST_TO_ADDR
// hc_noskilllimit := false ;
21100: LD_ADDR_OWVAR 76
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21108: LD_VAR 0 3
21112: PPUSH
21113: LD_INT 1
21115: PPUSH
21116: CALL_OW 51
// ToLua ( playRanger() ) ;
21120: LD_STRING playRanger()
21122: PPUSH
21123: CALL_OW 559
// p := 0 ;
21127: LD_ADDR_VAR 0 2
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21135: LD_INT 35
21137: PPUSH
21138: CALL_OW 67
// p := p + 1 ;
21142: LD_ADDR_VAR 0 2
21146: PUSH
21147: LD_VAR 0 2
21151: PUSH
21152: LD_INT 1
21154: PLUS
21155: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21156: LD_VAR 0 3
21160: PPUSH
21161: CALL_OW 256
21165: PUSH
21166: LD_INT 1000
21168: LESS
21169: IFFALSE 21183
// SetLives ( un , 1000 ) ;
21171: LD_VAR 0 3
21175: PPUSH
21176: LD_INT 1000
21178: PPUSH
21179: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21183: LD_VAR 0 3
21187: PPUSH
21188: LD_INT 81
21190: PUSH
21191: LD_OWVAR 2
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 91
21202: PUSH
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 30
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: PPUSH
21225: LD_VAR 0 3
21229: PPUSH
21230: CALL_OW 74
21234: PPUSH
21235: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21239: LD_VAR 0 2
21243: PUSH
21244: LD_INT 80
21246: GREATER
21247: PUSH
21248: LD_VAR 0 3
21252: PPUSH
21253: CALL_OW 301
21257: OR
21258: IFFALSE 21135
// if un then
21260: LD_VAR 0 3
21264: IFFALSE 21275
// RemoveUnit ( un ) ;
21266: LD_VAR 0 3
21270: PPUSH
21271: CALL_OW 64
// end ;
21275: PPOPN 3
21277: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21278: LD_EXP 97
21282: IFFALSE 21398
21284: GO 21286
21286: DISABLE
21287: LD_INT 0
21289: PPUSH
21290: PPUSH
21291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21292: LD_ADDR_VAR 0 2
21296: PUSH
21297: LD_INT 81
21299: PUSH
21300: LD_OWVAR 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PPUSH
21323: CALL_OW 69
21327: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21328: LD_STRING playComputer()
21330: PPUSH
21331: CALL_OW 559
// if not tmp then
21335: LD_VAR 0 2
21339: NOT
21340: IFFALSE 21344
// exit ;
21342: GO 21398
// for i in tmp do
21344: LD_ADDR_VAR 0 1
21348: PUSH
21349: LD_VAR 0 2
21353: PUSH
21354: FOR_IN
21355: IFFALSE 21396
// for j := 1 to 4 do
21357: LD_ADDR_VAR 0 3
21361: PUSH
21362: DOUBLE
21363: LD_INT 1
21365: DEC
21366: ST_TO_ADDR
21367: LD_INT 4
21369: PUSH
21370: FOR_TO
21371: IFFALSE 21392
// SetSkill ( i , j , 10 ) ;
21373: LD_VAR 0 1
21377: PPUSH
21378: LD_VAR 0 3
21382: PPUSH
21383: LD_INT 10
21385: PPUSH
21386: CALL_OW 237
21390: GO 21370
21392: POP
21393: POP
21394: GO 21354
21396: POP
21397: POP
// end ;
21398: PPOPN 3
21400: END
// every 0 0$1 trigger s30 do var i , tmp ;
21401: LD_EXP 98
21405: IFFALSE 21474
21407: GO 21409
21409: DISABLE
21410: LD_INT 0
21412: PPUSH
21413: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21414: LD_ADDR_VAR 0 2
21418: PUSH
21419: LD_INT 22
21421: PUSH
21422: LD_OWVAR 2
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PPUSH
21431: CALL_OW 69
21435: ST_TO_ADDR
// if not tmp then
21436: LD_VAR 0 2
21440: NOT
21441: IFFALSE 21445
// exit ;
21443: GO 21474
// for i in tmp do
21445: LD_ADDR_VAR 0 1
21449: PUSH
21450: LD_VAR 0 2
21454: PUSH
21455: FOR_IN
21456: IFFALSE 21472
// SetLives ( i , 300 ) ;
21458: LD_VAR 0 1
21462: PPUSH
21463: LD_INT 300
21465: PPUSH
21466: CALL_OW 234
21470: GO 21455
21472: POP
21473: POP
// end ;
21474: PPOPN 2
21476: END
// every 0 0$1 trigger s60 do var i , tmp ;
21477: LD_EXP 99
21481: IFFALSE 21550
21483: GO 21485
21485: DISABLE
21486: LD_INT 0
21488: PPUSH
21489: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21490: LD_ADDR_VAR 0 2
21494: PUSH
21495: LD_INT 22
21497: PUSH
21498: LD_OWVAR 2
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PPUSH
21507: CALL_OW 69
21511: ST_TO_ADDR
// if not tmp then
21512: LD_VAR 0 2
21516: NOT
21517: IFFALSE 21521
// exit ;
21519: GO 21550
// for i in tmp do
21521: LD_ADDR_VAR 0 1
21525: PUSH
21526: LD_VAR 0 2
21530: PUSH
21531: FOR_IN
21532: IFFALSE 21548
// SetLives ( i , 600 ) ;
21534: LD_VAR 0 1
21538: PPUSH
21539: LD_INT 600
21541: PPUSH
21542: CALL_OW 234
21546: GO 21531
21548: POP
21549: POP
// end ;
21550: PPOPN 2
21552: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21553: LD_INT 0
21555: PPUSH
// case cmd of 301 :
21556: LD_VAR 0 1
21560: PUSH
21561: LD_INT 301
21563: DOUBLE
21564: EQUAL
21565: IFTRUE 21569
21567: GO 21601
21569: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21570: LD_VAR 0 6
21574: PPUSH
21575: LD_VAR 0 7
21579: PPUSH
21580: LD_VAR 0 8
21584: PPUSH
21585: LD_VAR 0 4
21589: PPUSH
21590: LD_VAR 0 5
21594: PPUSH
21595: CALL 22802 0 5
21599: GO 21722
21601: LD_INT 302
21603: DOUBLE
21604: EQUAL
21605: IFTRUE 21609
21607: GO 21646
21609: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21610: LD_VAR 0 6
21614: PPUSH
21615: LD_VAR 0 7
21619: PPUSH
21620: LD_VAR 0 8
21624: PPUSH
21625: LD_VAR 0 9
21629: PPUSH
21630: LD_VAR 0 4
21634: PPUSH
21635: LD_VAR 0 5
21639: PPUSH
21640: CALL 22893 0 6
21644: GO 21722
21646: LD_INT 303
21648: DOUBLE
21649: EQUAL
21650: IFTRUE 21654
21652: GO 21691
21654: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21655: LD_VAR 0 6
21659: PPUSH
21660: LD_VAR 0 7
21664: PPUSH
21665: LD_VAR 0 8
21669: PPUSH
21670: LD_VAR 0 9
21674: PPUSH
21675: LD_VAR 0 4
21679: PPUSH
21680: LD_VAR 0 5
21684: PPUSH
21685: CALL 21727 0 6
21689: GO 21722
21691: LD_INT 304
21693: DOUBLE
21694: EQUAL
21695: IFTRUE 21699
21697: GO 21721
21699: POP
// hHackTeleport ( unit , x , y ) ; end ;
21700: LD_VAR 0 2
21704: PPUSH
21705: LD_VAR 0 4
21709: PPUSH
21710: LD_VAR 0 5
21714: PPUSH
21715: CALL 23486 0 3
21719: GO 21722
21721: POP
// end ;
21722: LD_VAR 0 12
21726: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21727: LD_INT 0
21729: PPUSH
21730: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21731: LD_VAR 0 1
21735: PUSH
21736: LD_INT 1
21738: LESS
21739: PUSH
21740: LD_VAR 0 1
21744: PUSH
21745: LD_INT 3
21747: GREATER
21748: OR
21749: PUSH
21750: LD_VAR 0 5
21754: PPUSH
21755: LD_VAR 0 6
21759: PPUSH
21760: CALL_OW 428
21764: OR
21765: IFFALSE 21769
// exit ;
21767: GO 22489
// uc_side := your_side ;
21769: LD_ADDR_OWVAR 20
21773: PUSH
21774: LD_OWVAR 2
21778: ST_TO_ADDR
// uc_nation := nation ;
21779: LD_ADDR_OWVAR 21
21783: PUSH
21784: LD_VAR 0 1
21788: ST_TO_ADDR
// bc_level = 1 ;
21789: LD_ADDR_OWVAR 43
21793: PUSH
21794: LD_INT 1
21796: ST_TO_ADDR
// case btype of 1 :
21797: LD_VAR 0 2
21801: PUSH
21802: LD_INT 1
21804: DOUBLE
21805: EQUAL
21806: IFTRUE 21810
21808: GO 21821
21810: POP
// bc_type := b_depot ; 2 :
21811: LD_ADDR_OWVAR 42
21815: PUSH
21816: LD_INT 0
21818: ST_TO_ADDR
21819: GO 22433
21821: LD_INT 2
21823: DOUBLE
21824: EQUAL
21825: IFTRUE 21829
21827: GO 21840
21829: POP
// bc_type := b_warehouse ; 3 :
21830: LD_ADDR_OWVAR 42
21834: PUSH
21835: LD_INT 1
21837: ST_TO_ADDR
21838: GO 22433
21840: LD_INT 3
21842: DOUBLE
21843: EQUAL
21844: IFTRUE 21848
21846: GO 21859
21848: POP
// bc_type := b_lab ; 4 .. 9 :
21849: LD_ADDR_OWVAR 42
21853: PUSH
21854: LD_INT 6
21856: ST_TO_ADDR
21857: GO 22433
21859: LD_INT 4
21861: DOUBLE
21862: GREATEREQUAL
21863: IFFALSE 21871
21865: LD_INT 9
21867: DOUBLE
21868: LESSEQUAL
21869: IFTRUE 21873
21871: GO 21925
21873: POP
// begin bc_type := b_lab_half ;
21874: LD_ADDR_OWVAR 42
21878: PUSH
21879: LD_INT 7
21881: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21882: LD_ADDR_OWVAR 44
21886: PUSH
21887: LD_INT 10
21889: PUSH
21890: LD_INT 11
21892: PUSH
21893: LD_INT 12
21895: PUSH
21896: LD_INT 15
21898: PUSH
21899: LD_INT 14
21901: PUSH
21902: LD_INT 13
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: PUSH
21913: LD_VAR 0 2
21917: PUSH
21918: LD_INT 3
21920: MINUS
21921: ARRAY
21922: ST_TO_ADDR
// end ; 10 .. 13 :
21923: GO 22433
21925: LD_INT 10
21927: DOUBLE
21928: GREATEREQUAL
21929: IFFALSE 21937
21931: LD_INT 13
21933: DOUBLE
21934: LESSEQUAL
21935: IFTRUE 21939
21937: GO 22016
21939: POP
// begin bc_type := b_lab_full ;
21940: LD_ADDR_OWVAR 42
21944: PUSH
21945: LD_INT 8
21947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21948: LD_ADDR_OWVAR 44
21952: PUSH
21953: LD_INT 10
21955: PUSH
21956: LD_INT 12
21958: PUSH
21959: LD_INT 14
21961: PUSH
21962: LD_INT 13
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: PUSH
21971: LD_VAR 0 2
21975: PUSH
21976: LD_INT 9
21978: MINUS
21979: ARRAY
21980: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21981: LD_ADDR_OWVAR 45
21985: PUSH
21986: LD_INT 11
21988: PUSH
21989: LD_INT 15
21991: PUSH
21992: LD_INT 12
21994: PUSH
21995: LD_INT 15
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_VAR 0 2
22008: PUSH
22009: LD_INT 9
22011: MINUS
22012: ARRAY
22013: ST_TO_ADDR
// end ; 14 :
22014: GO 22433
22016: LD_INT 14
22018: DOUBLE
22019: EQUAL
22020: IFTRUE 22024
22022: GO 22035
22024: POP
// bc_type := b_workshop ; 15 :
22025: LD_ADDR_OWVAR 42
22029: PUSH
22030: LD_INT 2
22032: ST_TO_ADDR
22033: GO 22433
22035: LD_INT 15
22037: DOUBLE
22038: EQUAL
22039: IFTRUE 22043
22041: GO 22054
22043: POP
// bc_type := b_factory ; 16 :
22044: LD_ADDR_OWVAR 42
22048: PUSH
22049: LD_INT 3
22051: ST_TO_ADDR
22052: GO 22433
22054: LD_INT 16
22056: DOUBLE
22057: EQUAL
22058: IFTRUE 22062
22060: GO 22073
22062: POP
// bc_type := b_ext_gun ; 17 :
22063: LD_ADDR_OWVAR 42
22067: PUSH
22068: LD_INT 17
22070: ST_TO_ADDR
22071: GO 22433
22073: LD_INT 17
22075: DOUBLE
22076: EQUAL
22077: IFTRUE 22081
22079: GO 22109
22081: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22082: LD_ADDR_OWVAR 42
22086: PUSH
22087: LD_INT 19
22089: PUSH
22090: LD_INT 23
22092: PUSH
22093: LD_INT 19
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: LIST
22100: PUSH
22101: LD_VAR 0 1
22105: ARRAY
22106: ST_TO_ADDR
22107: GO 22433
22109: LD_INT 18
22111: DOUBLE
22112: EQUAL
22113: IFTRUE 22117
22115: GO 22128
22117: POP
// bc_type := b_ext_radar ; 19 :
22118: LD_ADDR_OWVAR 42
22122: PUSH
22123: LD_INT 20
22125: ST_TO_ADDR
22126: GO 22433
22128: LD_INT 19
22130: DOUBLE
22131: EQUAL
22132: IFTRUE 22136
22134: GO 22147
22136: POP
// bc_type := b_ext_radio ; 20 :
22137: LD_ADDR_OWVAR 42
22141: PUSH
22142: LD_INT 22
22144: ST_TO_ADDR
22145: GO 22433
22147: LD_INT 20
22149: DOUBLE
22150: EQUAL
22151: IFTRUE 22155
22153: GO 22166
22155: POP
// bc_type := b_ext_siberium ; 21 :
22156: LD_ADDR_OWVAR 42
22160: PUSH
22161: LD_INT 21
22163: ST_TO_ADDR
22164: GO 22433
22166: LD_INT 21
22168: DOUBLE
22169: EQUAL
22170: IFTRUE 22174
22172: GO 22185
22174: POP
// bc_type := b_ext_computer ; 22 :
22175: LD_ADDR_OWVAR 42
22179: PUSH
22180: LD_INT 24
22182: ST_TO_ADDR
22183: GO 22433
22185: LD_INT 22
22187: DOUBLE
22188: EQUAL
22189: IFTRUE 22193
22191: GO 22204
22193: POP
// bc_type := b_ext_track ; 23 :
22194: LD_ADDR_OWVAR 42
22198: PUSH
22199: LD_INT 16
22201: ST_TO_ADDR
22202: GO 22433
22204: LD_INT 23
22206: DOUBLE
22207: EQUAL
22208: IFTRUE 22212
22210: GO 22223
22212: POP
// bc_type := b_ext_laser ; 24 :
22213: LD_ADDR_OWVAR 42
22217: PUSH
22218: LD_INT 25
22220: ST_TO_ADDR
22221: GO 22433
22223: LD_INT 24
22225: DOUBLE
22226: EQUAL
22227: IFTRUE 22231
22229: GO 22242
22231: POP
// bc_type := b_control_tower ; 25 :
22232: LD_ADDR_OWVAR 42
22236: PUSH
22237: LD_INT 36
22239: ST_TO_ADDR
22240: GO 22433
22242: LD_INT 25
22244: DOUBLE
22245: EQUAL
22246: IFTRUE 22250
22248: GO 22261
22250: POP
// bc_type := b_breastwork ; 26 :
22251: LD_ADDR_OWVAR 42
22255: PUSH
22256: LD_INT 31
22258: ST_TO_ADDR
22259: GO 22433
22261: LD_INT 26
22263: DOUBLE
22264: EQUAL
22265: IFTRUE 22269
22267: GO 22280
22269: POP
// bc_type := b_bunker ; 27 :
22270: LD_ADDR_OWVAR 42
22274: PUSH
22275: LD_INT 32
22277: ST_TO_ADDR
22278: GO 22433
22280: LD_INT 27
22282: DOUBLE
22283: EQUAL
22284: IFTRUE 22288
22286: GO 22299
22288: POP
// bc_type := b_turret ; 28 :
22289: LD_ADDR_OWVAR 42
22293: PUSH
22294: LD_INT 33
22296: ST_TO_ADDR
22297: GO 22433
22299: LD_INT 28
22301: DOUBLE
22302: EQUAL
22303: IFTRUE 22307
22305: GO 22318
22307: POP
// bc_type := b_armoury ; 29 :
22308: LD_ADDR_OWVAR 42
22312: PUSH
22313: LD_INT 4
22315: ST_TO_ADDR
22316: GO 22433
22318: LD_INT 29
22320: DOUBLE
22321: EQUAL
22322: IFTRUE 22326
22324: GO 22337
22326: POP
// bc_type := b_barracks ; 30 :
22327: LD_ADDR_OWVAR 42
22331: PUSH
22332: LD_INT 5
22334: ST_TO_ADDR
22335: GO 22433
22337: LD_INT 30
22339: DOUBLE
22340: EQUAL
22341: IFTRUE 22345
22343: GO 22356
22345: POP
// bc_type := b_solar_power ; 31 :
22346: LD_ADDR_OWVAR 42
22350: PUSH
22351: LD_INT 27
22353: ST_TO_ADDR
22354: GO 22433
22356: LD_INT 31
22358: DOUBLE
22359: EQUAL
22360: IFTRUE 22364
22362: GO 22375
22364: POP
// bc_type := b_oil_power ; 32 :
22365: LD_ADDR_OWVAR 42
22369: PUSH
22370: LD_INT 26
22372: ST_TO_ADDR
22373: GO 22433
22375: LD_INT 32
22377: DOUBLE
22378: EQUAL
22379: IFTRUE 22383
22381: GO 22394
22383: POP
// bc_type := b_siberite_power ; 33 :
22384: LD_ADDR_OWVAR 42
22388: PUSH
22389: LD_INT 28
22391: ST_TO_ADDR
22392: GO 22433
22394: LD_INT 33
22396: DOUBLE
22397: EQUAL
22398: IFTRUE 22402
22400: GO 22413
22402: POP
// bc_type := b_oil_mine ; 34 :
22403: LD_ADDR_OWVAR 42
22407: PUSH
22408: LD_INT 29
22410: ST_TO_ADDR
22411: GO 22433
22413: LD_INT 34
22415: DOUBLE
22416: EQUAL
22417: IFTRUE 22421
22419: GO 22432
22421: POP
// bc_type := b_siberite_mine ; end ;
22422: LD_ADDR_OWVAR 42
22426: PUSH
22427: LD_INT 30
22429: ST_TO_ADDR
22430: GO 22433
22432: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22433: LD_ADDR_VAR 0 8
22437: PUSH
22438: LD_VAR 0 5
22442: PPUSH
22443: LD_VAR 0 6
22447: PPUSH
22448: LD_VAR 0 3
22452: PPUSH
22453: CALL_OW 47
22457: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22458: LD_OWVAR 42
22462: PUSH
22463: LD_INT 32
22465: PUSH
22466: LD_INT 33
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: IN
22473: IFFALSE 22489
// PlaceWeaponTurret ( b , weapon ) ;
22475: LD_VAR 0 8
22479: PPUSH
22480: LD_VAR 0 4
22484: PPUSH
22485: CALL_OW 431
// end ;
22489: LD_VAR 0 7
22493: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22494: LD_INT 0
22496: PPUSH
22497: PPUSH
22498: PPUSH
22499: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22500: LD_ADDR_VAR 0 4
22504: PUSH
22505: LD_INT 22
22507: PUSH
22508: LD_OWVAR 2
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 2
22519: PUSH
22520: LD_INT 30
22522: PUSH
22523: LD_INT 0
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 30
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PPUSH
22549: CALL_OW 69
22553: ST_TO_ADDR
// if not tmp then
22554: LD_VAR 0 4
22558: NOT
22559: IFFALSE 22563
// exit ;
22561: GO 22622
// for i in tmp do
22563: LD_ADDR_VAR 0 2
22567: PUSH
22568: LD_VAR 0 4
22572: PUSH
22573: FOR_IN
22574: IFFALSE 22620
// for j = 1 to 3 do
22576: LD_ADDR_VAR 0 3
22580: PUSH
22581: DOUBLE
22582: LD_INT 1
22584: DEC
22585: ST_TO_ADDR
22586: LD_INT 3
22588: PUSH
22589: FOR_TO
22590: IFFALSE 22616
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22592: LD_VAR 0 2
22596: PPUSH
22597: CALL_OW 274
22601: PPUSH
22602: LD_VAR 0 3
22606: PPUSH
22607: LD_INT 99999
22609: PPUSH
22610: CALL_OW 277
22614: GO 22589
22616: POP
22617: POP
22618: GO 22573
22620: POP
22621: POP
// end ;
22622: LD_VAR 0 1
22626: RET
// export function hHackSetLevel10 ; var i , j ; begin
22627: LD_INT 0
22629: PPUSH
22630: PPUSH
22631: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22632: LD_ADDR_VAR 0 2
22636: PUSH
22637: LD_INT 21
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PPUSH
22647: CALL_OW 69
22651: PUSH
22652: FOR_IN
22653: IFFALSE 22705
// if IsSelected ( i ) then
22655: LD_VAR 0 2
22659: PPUSH
22660: CALL_OW 306
22664: IFFALSE 22703
// begin for j := 1 to 4 do
22666: LD_ADDR_VAR 0 3
22670: PUSH
22671: DOUBLE
22672: LD_INT 1
22674: DEC
22675: ST_TO_ADDR
22676: LD_INT 4
22678: PUSH
22679: FOR_TO
22680: IFFALSE 22701
// SetSkill ( i , j , 10 ) ;
22682: LD_VAR 0 2
22686: PPUSH
22687: LD_VAR 0 3
22691: PPUSH
22692: LD_INT 10
22694: PPUSH
22695: CALL_OW 237
22699: GO 22679
22701: POP
22702: POP
// end ;
22703: GO 22652
22705: POP
22706: POP
// end ;
22707: LD_VAR 0 1
22711: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22712: LD_INT 0
22714: PPUSH
22715: PPUSH
22716: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22717: LD_ADDR_VAR 0 2
22721: PUSH
22722: LD_INT 22
22724: PUSH
22725: LD_OWVAR 2
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 21
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PPUSH
22748: CALL_OW 69
22752: PUSH
22753: FOR_IN
22754: IFFALSE 22795
// begin for j := 1 to 4 do
22756: LD_ADDR_VAR 0 3
22760: PUSH
22761: DOUBLE
22762: LD_INT 1
22764: DEC
22765: ST_TO_ADDR
22766: LD_INT 4
22768: PUSH
22769: FOR_TO
22770: IFFALSE 22791
// SetSkill ( i , j , 10 ) ;
22772: LD_VAR 0 2
22776: PPUSH
22777: LD_VAR 0 3
22781: PPUSH
22782: LD_INT 10
22784: PPUSH
22785: CALL_OW 237
22789: GO 22769
22791: POP
22792: POP
// end ;
22793: GO 22753
22795: POP
22796: POP
// end ;
22797: LD_VAR 0 1
22801: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22802: LD_INT 0
22804: PPUSH
// uc_side := your_side ;
22805: LD_ADDR_OWVAR 20
22809: PUSH
22810: LD_OWVAR 2
22814: ST_TO_ADDR
// uc_nation := nation ;
22815: LD_ADDR_OWVAR 21
22819: PUSH
22820: LD_VAR 0 1
22824: ST_TO_ADDR
// InitHc ;
22825: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22829: LD_INT 0
22831: PPUSH
22832: LD_VAR 0 2
22836: PPUSH
22837: LD_VAR 0 3
22841: PPUSH
22842: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22846: LD_VAR 0 4
22850: PPUSH
22851: LD_VAR 0 5
22855: PPUSH
22856: CALL_OW 428
22860: PUSH
22861: LD_INT 0
22863: EQUAL
22864: IFFALSE 22888
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22866: CALL_OW 44
22870: PPUSH
22871: LD_VAR 0 4
22875: PPUSH
22876: LD_VAR 0 5
22880: PPUSH
22881: LD_INT 1
22883: PPUSH
22884: CALL_OW 48
// end ;
22888: LD_VAR 0 6
22892: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22893: LD_INT 0
22895: PPUSH
22896: PPUSH
// uc_side := your_side ;
22897: LD_ADDR_OWVAR 20
22901: PUSH
22902: LD_OWVAR 2
22906: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22907: LD_VAR 0 1
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: LD_INT 3
22920: PUSH
22921: LD_INT 4
22923: PUSH
22924: LD_INT 5
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: IN
22934: IFFALSE 22946
// uc_nation := nation_american else
22936: LD_ADDR_OWVAR 21
22940: PUSH
22941: LD_INT 1
22943: ST_TO_ADDR
22944: GO 22989
// if chassis in [ 11 , 12 , 13 , 14 ] then
22946: LD_VAR 0 1
22950: PUSH
22951: LD_INT 11
22953: PUSH
22954: LD_INT 12
22956: PUSH
22957: LD_INT 13
22959: PUSH
22960: LD_INT 14
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: IN
22969: IFFALSE 22981
// uc_nation := nation_arabian else
22971: LD_ADDR_OWVAR 21
22975: PUSH
22976: LD_INT 2
22978: ST_TO_ADDR
22979: GO 22989
// uc_nation := nation_russian ;
22981: LD_ADDR_OWVAR 21
22985: PUSH
22986: LD_INT 3
22988: ST_TO_ADDR
// vc_chassis := chassis ;
22989: LD_ADDR_OWVAR 37
22993: PUSH
22994: LD_VAR 0 1
22998: ST_TO_ADDR
// vc_engine := engine ;
22999: LD_ADDR_OWVAR 39
23003: PUSH
23004: LD_VAR 0 2
23008: ST_TO_ADDR
// vc_control := control ;
23009: LD_ADDR_OWVAR 38
23013: PUSH
23014: LD_VAR 0 3
23018: ST_TO_ADDR
// vc_weapon := weapon ;
23019: LD_ADDR_OWVAR 40
23023: PUSH
23024: LD_VAR 0 4
23028: ST_TO_ADDR
// un := CreateVehicle ;
23029: LD_ADDR_VAR 0 8
23033: PUSH
23034: CALL_OW 45
23038: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23039: LD_VAR 0 8
23043: PPUSH
23044: LD_INT 0
23046: PPUSH
23047: LD_INT 5
23049: PPUSH
23050: CALL_OW 12
23054: PPUSH
23055: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23059: LD_VAR 0 8
23063: PPUSH
23064: LD_VAR 0 5
23068: PPUSH
23069: LD_VAR 0 6
23073: PPUSH
23074: LD_INT 1
23076: PPUSH
23077: CALL_OW 48
// end ;
23081: LD_VAR 0 7
23085: RET
// export hInvincible ; every 1 do
23086: GO 23088
23088: DISABLE
// hInvincible := [ ] ;
23089: LD_ADDR_EXP 100
23093: PUSH
23094: EMPTY
23095: ST_TO_ADDR
23096: END
// every 10 do var i ;
23097: GO 23099
23099: DISABLE
23100: LD_INT 0
23102: PPUSH
// begin enable ;
23103: ENABLE
// if not hInvincible then
23104: LD_EXP 100
23108: NOT
23109: IFFALSE 23113
// exit ;
23111: GO 23157
// for i in hInvincible do
23113: LD_ADDR_VAR 0 1
23117: PUSH
23118: LD_EXP 100
23122: PUSH
23123: FOR_IN
23124: IFFALSE 23155
// if GetLives ( i ) < 1000 then
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 256
23135: PUSH
23136: LD_INT 1000
23138: LESS
23139: IFFALSE 23153
// SetLives ( i , 1000 ) ;
23141: LD_VAR 0 1
23145: PPUSH
23146: LD_INT 1000
23148: PPUSH
23149: CALL_OW 234
23153: GO 23123
23155: POP
23156: POP
// end ;
23157: PPOPN 1
23159: END
// export function hHackInvincible ; var i ; begin
23160: LD_INT 0
23162: PPUSH
23163: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23164: LD_ADDR_VAR 0 2
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: LD_INT 21
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 21
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: LIST
23196: PPUSH
23197: CALL_OW 69
23201: PUSH
23202: FOR_IN
23203: IFFALSE 23264
// if IsSelected ( i ) then
23205: LD_VAR 0 2
23209: PPUSH
23210: CALL_OW 306
23214: IFFALSE 23262
// begin if i in hInvincible then
23216: LD_VAR 0 2
23220: PUSH
23221: LD_EXP 100
23225: IN
23226: IFFALSE 23246
// hInvincible := hInvincible diff i else
23228: LD_ADDR_EXP 100
23232: PUSH
23233: LD_EXP 100
23237: PUSH
23238: LD_VAR 0 2
23242: DIFF
23243: ST_TO_ADDR
23244: GO 23262
// hInvincible := hInvincible union i ;
23246: LD_ADDR_EXP 100
23250: PUSH
23251: LD_EXP 100
23255: PUSH
23256: LD_VAR 0 2
23260: UNION
23261: ST_TO_ADDR
// end ;
23262: GO 23202
23264: POP
23265: POP
// end ;
23266: LD_VAR 0 1
23270: RET
// export function hHackInvisible ; var i , j ; begin
23271: LD_INT 0
23273: PPUSH
23274: PPUSH
23275: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23276: LD_ADDR_VAR 0 2
23280: PUSH
23281: LD_INT 21
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PPUSH
23291: CALL_OW 69
23295: PUSH
23296: FOR_IN
23297: IFFALSE 23321
// if IsSelected ( i ) then
23299: LD_VAR 0 2
23303: PPUSH
23304: CALL_OW 306
23308: IFFALSE 23319
// ComForceInvisible ( i ) ;
23310: LD_VAR 0 2
23314: PPUSH
23315: CALL_OW 496
23319: GO 23296
23321: POP
23322: POP
// end ;
23323: LD_VAR 0 1
23327: RET
// export function hHackChangeYourSide ; begin
23328: LD_INT 0
23330: PPUSH
// if your_side = 8 then
23331: LD_OWVAR 2
23335: PUSH
23336: LD_INT 8
23338: EQUAL
23339: IFFALSE 23351
// your_side := 0 else
23341: LD_ADDR_OWVAR 2
23345: PUSH
23346: LD_INT 0
23348: ST_TO_ADDR
23349: GO 23365
// your_side := your_side + 1 ;
23351: LD_ADDR_OWVAR 2
23355: PUSH
23356: LD_OWVAR 2
23360: PUSH
23361: LD_INT 1
23363: PLUS
23364: ST_TO_ADDR
// end ;
23365: LD_VAR 0 1
23369: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23370: LD_INT 0
23372: PPUSH
23373: PPUSH
23374: PPUSH
// for i in all_units do
23375: LD_ADDR_VAR 0 2
23379: PUSH
23380: LD_OWVAR 3
23384: PUSH
23385: FOR_IN
23386: IFFALSE 23464
// if IsSelected ( i ) then
23388: LD_VAR 0 2
23392: PPUSH
23393: CALL_OW 306
23397: IFFALSE 23462
// begin j := GetSide ( i ) ;
23399: LD_ADDR_VAR 0 3
23403: PUSH
23404: LD_VAR 0 2
23408: PPUSH
23409: CALL_OW 255
23413: ST_TO_ADDR
// if j = 8 then
23414: LD_VAR 0 3
23418: PUSH
23419: LD_INT 8
23421: EQUAL
23422: IFFALSE 23434
// j := 0 else
23424: LD_ADDR_VAR 0 3
23428: PUSH
23429: LD_INT 0
23431: ST_TO_ADDR
23432: GO 23448
// j := j + 1 ;
23434: LD_ADDR_VAR 0 3
23438: PUSH
23439: LD_VAR 0 3
23443: PUSH
23444: LD_INT 1
23446: PLUS
23447: ST_TO_ADDR
// SetSide ( i , j ) ;
23448: LD_VAR 0 2
23452: PPUSH
23453: LD_VAR 0 3
23457: PPUSH
23458: CALL_OW 235
// end ;
23462: GO 23385
23464: POP
23465: POP
// end ;
23466: LD_VAR 0 1
23470: RET
// export function hHackFog ; begin
23471: LD_INT 0
23473: PPUSH
// FogOff ( true ) ;
23474: LD_INT 1
23476: PPUSH
23477: CALL_OW 344
// end ;
23481: LD_VAR 0 1
23485: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23486: LD_INT 0
23488: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23489: LD_VAR 0 1
23493: PPUSH
23494: LD_VAR 0 2
23498: PPUSH
23499: LD_VAR 0 3
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: LD_INT 1
23509: PPUSH
23510: CALL_OW 483
// CenterOnXY ( x , y ) ;
23514: LD_VAR 0 2
23518: PPUSH
23519: LD_VAR 0 3
23523: PPUSH
23524: CALL_OW 84
// end ; end_of_file
23528: LD_VAR 0 4
23532: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23533: LD_VAR 0 1
23537: PUSH
23538: LD_INT 200
23540: DOUBLE
23541: GREATEREQUAL
23542: IFFALSE 23550
23544: LD_INT 299
23546: DOUBLE
23547: LESSEQUAL
23548: IFTRUE 23552
23550: GO 23584
23552: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
23553: LD_VAR 0 1
23557: PPUSH
23558: LD_VAR 0 2
23562: PPUSH
23563: LD_VAR 0 3
23567: PPUSH
23568: LD_VAR 0 4
23572: PPUSH
23573: LD_VAR 0 5
23577: PPUSH
23578: CALL 23818 0 5
23582: GO 23661
23584: LD_INT 300
23586: DOUBLE
23587: GREATEREQUAL
23588: IFFALSE 23596
23590: LD_INT 399
23592: DOUBLE
23593: LESSEQUAL
23594: IFTRUE 23598
23596: GO 23660
23598: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
23599: LD_VAR 0 1
23603: PPUSH
23604: LD_VAR 0 2
23608: PPUSH
23609: LD_VAR 0 3
23613: PPUSH
23614: LD_VAR 0 4
23618: PPUSH
23619: LD_VAR 0 5
23623: PPUSH
23624: LD_VAR 0 6
23628: PPUSH
23629: LD_VAR 0 7
23633: PPUSH
23634: LD_VAR 0 8
23638: PPUSH
23639: LD_VAR 0 9
23643: PPUSH
23644: LD_VAR 0 10
23648: PPUSH
23649: LD_VAR 0 11
23653: PPUSH
23654: CALL 21553 0 11
23658: GO 23661
23660: POP
// end ;
23661: PPOPN 11
23663: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
23664: LD_VAR 0 1
23668: PPUSH
23669: LD_VAR 0 2
23673: PPUSH
23674: LD_VAR 0 3
23678: PPUSH
23679: LD_VAR 0 4
23683: PPUSH
23684: LD_VAR 0 5
23688: PPUSH
23689: CALL 23810 0 5
// end ; end_of_file
23693: PPOPN 5
23695: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23696: LD_INT 0
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 264
23711: PUSH
23712: LD_EXP 117
23716: EQUAL
23717: IFFALSE 23789
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23719: LD_INT 68
23721: PPUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL_OW 255
23731: PPUSH
23732: CALL_OW 321
23736: PUSH
23737: LD_INT 2
23739: EQUAL
23740: IFFALSE 23752
// eff := 70 else
23742: LD_ADDR_VAR 0 4
23746: PUSH
23747: LD_INT 70
23749: ST_TO_ADDR
23750: GO 23760
// eff := 30 ;
23752: LD_ADDR_VAR 0 4
23756: PUSH
23757: LD_INT 30
23759: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23760: LD_VAR 0 1
23764: PPUSH
23765: CALL_OW 250
23769: PPUSH
23770: LD_VAR 0 1
23774: PPUSH
23775: CALL_OW 251
23779: PPUSH
23780: LD_VAR 0 4
23784: PPUSH
23785: CALL_OW 495
// end ; end ;
23789: LD_VAR 0 2
23793: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23794: LD_INT 0
23796: PPUSH
// end ;
23797: LD_VAR 0 4
23801: RET
// export function SOS_Command ( cmd ) ; begin
23802: LD_INT 0
23804: PPUSH
// end ;
23805: LD_VAR 0 2
23809: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23810: LD_INT 0
23812: PPUSH
// end ;
23813: LD_VAR 0 6
23817: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23818: LD_INT 0
23820: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23821: LD_VAR 0 1
23825: PUSH
23826: LD_INT 250
23828: EQUAL
23829: PUSH
23830: LD_VAR 0 2
23834: PPUSH
23835: CALL_OW 264
23839: PUSH
23840: LD_EXP 120
23844: EQUAL
23845: AND
23846: IFFALSE 23867
// MinerPlaceMine ( unit , x , y ) ;
23848: LD_VAR 0 2
23852: PPUSH
23853: LD_VAR 0 4
23857: PPUSH
23858: LD_VAR 0 5
23862: PPUSH
23863: CALL 26216 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23867: LD_VAR 0 1
23871: PUSH
23872: LD_INT 251
23874: EQUAL
23875: PUSH
23876: LD_VAR 0 2
23880: PPUSH
23881: CALL_OW 264
23885: PUSH
23886: LD_EXP 120
23890: EQUAL
23891: AND
23892: IFFALSE 23913
// MinerDetonateMine ( unit , x , y ) ;
23894: LD_VAR 0 2
23898: PPUSH
23899: LD_VAR 0 4
23903: PPUSH
23904: LD_VAR 0 5
23908: PPUSH
23909: CALL 26493 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23913: LD_VAR 0 1
23917: PUSH
23918: LD_INT 252
23920: EQUAL
23921: PUSH
23922: LD_VAR 0 2
23926: PPUSH
23927: CALL_OW 264
23931: PUSH
23932: LD_EXP 120
23936: EQUAL
23937: AND
23938: IFFALSE 23959
// MinerCreateMinefield ( unit , x , y ) ;
23940: LD_VAR 0 2
23944: PPUSH
23945: LD_VAR 0 4
23949: PPUSH
23950: LD_VAR 0 5
23954: PPUSH
23955: CALL 26910 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23959: LD_VAR 0 1
23963: PUSH
23964: LD_INT 253
23966: EQUAL
23967: PUSH
23968: LD_VAR 0 2
23972: PPUSH
23973: CALL_OW 257
23977: PUSH
23978: LD_INT 5
23980: EQUAL
23981: AND
23982: IFFALSE 24003
// ComBinocular ( unit , x , y ) ;
23984: LD_VAR 0 2
23988: PPUSH
23989: LD_VAR 0 4
23993: PPUSH
23994: LD_VAR 0 5
23998: PPUSH
23999: CALL 27281 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24003: LD_VAR 0 1
24007: PUSH
24008: LD_INT 254
24010: EQUAL
24011: PUSH
24012: LD_VAR 0 2
24016: PPUSH
24017: CALL_OW 264
24021: PUSH
24022: LD_EXP 115
24026: EQUAL
24027: AND
24028: PUSH
24029: LD_VAR 0 3
24033: PPUSH
24034: CALL_OW 263
24038: PUSH
24039: LD_INT 3
24041: EQUAL
24042: AND
24043: IFFALSE 24059
// HackDestroyVehicle ( unit , selectedUnit ) ;
24045: LD_VAR 0 2
24049: PPUSH
24050: LD_VAR 0 3
24054: PPUSH
24055: CALL 25576 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24059: LD_VAR 0 1
24063: PUSH
24064: LD_INT 255
24066: EQUAL
24067: PUSH
24068: LD_VAR 0 2
24072: PPUSH
24073: CALL_OW 264
24077: PUSH
24078: LD_INT 14
24080: PUSH
24081: LD_INT 53
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: IN
24088: AND
24089: PUSH
24090: LD_VAR 0 4
24094: PPUSH
24095: LD_VAR 0 5
24099: PPUSH
24100: CALL_OW 488
24104: AND
24105: IFFALSE 24129
// CutTreeXYR ( unit , x , y , 12 ) ;
24107: LD_VAR 0 2
24111: PPUSH
24112: LD_VAR 0 4
24116: PPUSH
24117: LD_VAR 0 5
24121: PPUSH
24122: LD_INT 12
24124: PPUSH
24125: CALL 24142 0 4
// end ;
24129: LD_VAR 0 6
24133: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24134: LD_INT 0
24136: PPUSH
// end ;
24137: LD_VAR 0 4
24141: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24142: LD_INT 0
24144: PPUSH
24145: PPUSH
24146: PPUSH
24147: PPUSH
24148: PPUSH
24149: PPUSH
24150: PPUSH
24151: PPUSH
24152: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24153: LD_VAR 0 1
24157: NOT
24158: PUSH
24159: LD_VAR 0 2
24163: PPUSH
24164: LD_VAR 0 3
24168: PPUSH
24169: CALL_OW 488
24173: NOT
24174: OR
24175: PUSH
24176: LD_VAR 0 4
24180: NOT
24181: OR
24182: IFFALSE 24186
// exit ;
24184: GO 24526
// list := [ ] ;
24186: LD_ADDR_VAR 0 13
24190: PUSH
24191: EMPTY
24192: ST_TO_ADDR
// if x - r < 0 then
24193: LD_VAR 0 2
24197: PUSH
24198: LD_VAR 0 4
24202: MINUS
24203: PUSH
24204: LD_INT 0
24206: LESS
24207: IFFALSE 24219
// min_x := 0 else
24209: LD_ADDR_VAR 0 7
24213: PUSH
24214: LD_INT 0
24216: ST_TO_ADDR
24217: GO 24235
// min_x := x - r ;
24219: LD_ADDR_VAR 0 7
24223: PUSH
24224: LD_VAR 0 2
24228: PUSH
24229: LD_VAR 0 4
24233: MINUS
24234: ST_TO_ADDR
// if y - r < 0 then
24235: LD_VAR 0 3
24239: PUSH
24240: LD_VAR 0 4
24244: MINUS
24245: PUSH
24246: LD_INT 0
24248: LESS
24249: IFFALSE 24261
// min_y := 0 else
24251: LD_ADDR_VAR 0 8
24255: PUSH
24256: LD_INT 0
24258: ST_TO_ADDR
24259: GO 24277
// min_y := y - r ;
24261: LD_ADDR_VAR 0 8
24265: PUSH
24266: LD_VAR 0 3
24270: PUSH
24271: LD_VAR 0 4
24275: MINUS
24276: ST_TO_ADDR
// max_x := x + r ;
24277: LD_ADDR_VAR 0 9
24281: PUSH
24282: LD_VAR 0 2
24286: PUSH
24287: LD_VAR 0 4
24291: PLUS
24292: ST_TO_ADDR
// max_y := y + r ;
24293: LD_ADDR_VAR 0 10
24297: PUSH
24298: LD_VAR 0 3
24302: PUSH
24303: LD_VAR 0 4
24307: PLUS
24308: ST_TO_ADDR
// for _x = min_x to max_x do
24309: LD_ADDR_VAR 0 11
24313: PUSH
24314: DOUBLE
24315: LD_VAR 0 7
24319: DEC
24320: ST_TO_ADDR
24321: LD_VAR 0 9
24325: PUSH
24326: FOR_TO
24327: IFFALSE 24444
// for _y = min_y to max_y do
24329: LD_ADDR_VAR 0 12
24333: PUSH
24334: DOUBLE
24335: LD_VAR 0 8
24339: DEC
24340: ST_TO_ADDR
24341: LD_VAR 0 10
24345: PUSH
24346: FOR_TO
24347: IFFALSE 24440
// begin if not ValidHex ( _x , _y ) then
24349: LD_VAR 0 11
24353: PPUSH
24354: LD_VAR 0 12
24358: PPUSH
24359: CALL_OW 488
24363: NOT
24364: IFFALSE 24368
// continue ;
24366: GO 24346
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24368: LD_VAR 0 11
24372: PPUSH
24373: LD_VAR 0 12
24377: PPUSH
24378: CALL_OW 351
24382: PUSH
24383: LD_VAR 0 11
24387: PPUSH
24388: LD_VAR 0 12
24392: PPUSH
24393: CALL_OW 554
24397: AND
24398: IFFALSE 24438
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24400: LD_ADDR_VAR 0 13
24404: PUSH
24405: LD_VAR 0 13
24409: PPUSH
24410: LD_VAR 0 13
24414: PUSH
24415: LD_INT 1
24417: PLUS
24418: PPUSH
24419: LD_VAR 0 11
24423: PUSH
24424: LD_VAR 0 12
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PPUSH
24433: CALL_OW 2
24437: ST_TO_ADDR
// end ;
24438: GO 24346
24440: POP
24441: POP
24442: GO 24326
24444: POP
24445: POP
// if not list then
24446: LD_VAR 0 13
24450: NOT
24451: IFFALSE 24455
// exit ;
24453: GO 24526
// for i in list do
24455: LD_ADDR_VAR 0 6
24459: PUSH
24460: LD_VAR 0 13
24464: PUSH
24465: FOR_IN
24466: IFFALSE 24524
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24468: LD_VAR 0 1
24472: PPUSH
24473: LD_STRING M
24475: PUSH
24476: LD_VAR 0 6
24480: PUSH
24481: LD_INT 1
24483: ARRAY
24484: PUSH
24485: LD_VAR 0 6
24489: PUSH
24490: LD_INT 2
24492: ARRAY
24493: PUSH
24494: LD_INT 0
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: PUSH
24515: EMPTY
24516: LIST
24517: PPUSH
24518: CALL_OW 447
24522: GO 24465
24524: POP
24525: POP
// end ;
24526: LD_VAR 0 5
24530: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24531: LD_EXP 103
24535: NOT
24536: IFFALSE 24586
24538: GO 24540
24540: DISABLE
// begin initHack := true ;
24541: LD_ADDR_EXP 103
24545: PUSH
24546: LD_INT 1
24548: ST_TO_ADDR
// hackTanks := [ ] ;
24549: LD_ADDR_EXP 104
24553: PUSH
24554: EMPTY
24555: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24556: LD_ADDR_EXP 105
24560: PUSH
24561: EMPTY
24562: ST_TO_ADDR
// hackLimit := 3 ;
24563: LD_ADDR_EXP 106
24567: PUSH
24568: LD_INT 3
24570: ST_TO_ADDR
// hackDist := 12 ;
24571: LD_ADDR_EXP 107
24575: PUSH
24576: LD_INT 12
24578: ST_TO_ADDR
// hackCounter := [ ] ;
24579: LD_ADDR_EXP 108
24583: PUSH
24584: EMPTY
24585: ST_TO_ADDR
// end ;
24586: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24587: LD_EXP 103
24591: PUSH
24592: LD_INT 34
24594: PUSH
24595: LD_EXP 115
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PPUSH
24604: CALL_OW 69
24608: AND
24609: IFFALSE 24864
24611: GO 24613
24613: DISABLE
24614: LD_INT 0
24616: PPUSH
24617: PPUSH
// begin enable ;
24618: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24619: LD_ADDR_VAR 0 1
24623: PUSH
24624: LD_INT 34
24626: PUSH
24627: LD_EXP 115
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PPUSH
24636: CALL_OW 69
24640: PUSH
24641: FOR_IN
24642: IFFALSE 24862
// begin if not i in hackTanks then
24644: LD_VAR 0 1
24648: PUSH
24649: LD_EXP 104
24653: IN
24654: NOT
24655: IFFALSE 24738
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24657: LD_ADDR_EXP 104
24661: PUSH
24662: LD_EXP 104
24666: PPUSH
24667: LD_EXP 104
24671: PUSH
24672: LD_INT 1
24674: PLUS
24675: PPUSH
24676: LD_VAR 0 1
24680: PPUSH
24681: CALL_OW 1
24685: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24686: LD_ADDR_EXP 105
24690: PUSH
24691: LD_EXP 105
24695: PPUSH
24696: LD_EXP 105
24700: PUSH
24701: LD_INT 1
24703: PLUS
24704: PPUSH
24705: EMPTY
24706: PPUSH
24707: CALL_OW 1
24711: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24712: LD_ADDR_EXP 108
24716: PUSH
24717: LD_EXP 108
24721: PPUSH
24722: LD_EXP 108
24726: PUSH
24727: LD_INT 1
24729: PLUS
24730: PPUSH
24731: EMPTY
24732: PPUSH
24733: CALL_OW 1
24737: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24738: LD_VAR 0 1
24742: PPUSH
24743: CALL_OW 302
24747: NOT
24748: IFFALSE 24761
// begin HackUnlinkAll ( i ) ;
24750: LD_VAR 0 1
24754: PPUSH
24755: CALL 24867 0 1
// continue ;
24759: GO 24641
// end ; HackCheckCapturedStatus ( i ) ;
24761: LD_VAR 0 1
24765: PPUSH
24766: CALL 25310 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24770: LD_ADDR_VAR 0 2
24774: PUSH
24775: LD_INT 81
24777: PUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 255
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 33
24794: PUSH
24795: LD_INT 3
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 91
24804: PUSH
24805: LD_VAR 0 1
24809: PUSH
24810: LD_EXP 107
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 50
24822: PUSH
24823: EMPTY
24824: LIST
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: PPUSH
24832: CALL_OW 69
24836: ST_TO_ADDR
// if not tmp then
24837: LD_VAR 0 2
24841: NOT
24842: IFFALSE 24846
// continue ;
24844: GO 24641
// HackLink ( i , tmp ) ;
24846: LD_VAR 0 1
24850: PPUSH
24851: LD_VAR 0 2
24855: PPUSH
24856: CALL 25003 0 2
// end ;
24860: GO 24641
24862: POP
24863: POP
// end ;
24864: PPOPN 2
24866: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24867: LD_INT 0
24869: PPUSH
24870: PPUSH
24871: PPUSH
// if not hack in hackTanks then
24872: LD_VAR 0 1
24876: PUSH
24877: LD_EXP 104
24881: IN
24882: NOT
24883: IFFALSE 24887
// exit ;
24885: GO 24998
// index := GetElementIndex ( hackTanks , hack ) ;
24887: LD_ADDR_VAR 0 4
24891: PUSH
24892: LD_EXP 104
24896: PPUSH
24897: LD_VAR 0 1
24901: PPUSH
24902: CALL 32472 0 2
24906: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24907: LD_EXP 105
24911: PUSH
24912: LD_VAR 0 4
24916: ARRAY
24917: IFFALSE 24998
// begin for i in hackTanksCaptured [ index ] do
24919: LD_ADDR_VAR 0 3
24923: PUSH
24924: LD_EXP 105
24928: PUSH
24929: LD_VAR 0 4
24933: ARRAY
24934: PUSH
24935: FOR_IN
24936: IFFALSE 24962
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24938: LD_VAR 0 3
24942: PUSH
24943: LD_INT 1
24945: ARRAY
24946: PPUSH
24947: LD_VAR 0 3
24951: PUSH
24952: LD_INT 2
24954: ARRAY
24955: PPUSH
24956: CALL_OW 235
24960: GO 24935
24962: POP
24963: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24964: LD_ADDR_EXP 105
24968: PUSH
24969: LD_EXP 105
24973: PPUSH
24974: LD_VAR 0 4
24978: PPUSH
24979: EMPTY
24980: PPUSH
24981: CALL_OW 1
24985: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24986: LD_VAR 0 1
24990: PPUSH
24991: LD_INT 0
24993: PPUSH
24994: CALL_OW 505
// end ; end ;
24998: LD_VAR 0 2
25002: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25003: LD_INT 0
25005: PPUSH
25006: PPUSH
25007: PPUSH
// if not hack in hackTanks or not vehicles then
25008: LD_VAR 0 1
25012: PUSH
25013: LD_EXP 104
25017: IN
25018: NOT
25019: PUSH
25020: LD_VAR 0 2
25024: NOT
25025: OR
25026: IFFALSE 25030
// exit ;
25028: GO 25305
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25030: LD_ADDR_VAR 0 2
25034: PUSH
25035: LD_VAR 0 1
25039: PPUSH
25040: LD_VAR 0 2
25044: PPUSH
25045: LD_INT 1
25047: PPUSH
25048: LD_INT 1
25050: PPUSH
25051: CALL 33122 0 4
25055: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25056: LD_ADDR_VAR 0 5
25060: PUSH
25061: LD_EXP 104
25065: PPUSH
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL 32472 0 2
25075: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25076: LD_EXP 105
25080: PUSH
25081: LD_VAR 0 5
25085: ARRAY
25086: PUSH
25087: LD_EXP 106
25091: LESS
25092: IFFALSE 25281
// begin for i := 1 to vehicles do
25094: LD_ADDR_VAR 0 4
25098: PUSH
25099: DOUBLE
25100: LD_INT 1
25102: DEC
25103: ST_TO_ADDR
25104: LD_VAR 0 2
25108: PUSH
25109: FOR_TO
25110: IFFALSE 25279
// begin if hackTanksCaptured [ index ] = hackLimit then
25112: LD_EXP 105
25116: PUSH
25117: LD_VAR 0 5
25121: ARRAY
25122: PUSH
25123: LD_EXP 106
25127: EQUAL
25128: IFFALSE 25132
// break ;
25130: GO 25279
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25132: LD_ADDR_EXP 108
25136: PUSH
25137: LD_EXP 108
25141: PPUSH
25142: LD_VAR 0 5
25146: PPUSH
25147: LD_EXP 108
25151: PUSH
25152: LD_VAR 0 5
25156: ARRAY
25157: PUSH
25158: LD_INT 1
25160: PLUS
25161: PPUSH
25162: CALL_OW 1
25166: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25167: LD_ADDR_EXP 105
25171: PUSH
25172: LD_EXP 105
25176: PPUSH
25177: LD_VAR 0 5
25181: PUSH
25182: LD_EXP 105
25186: PUSH
25187: LD_VAR 0 5
25191: ARRAY
25192: PUSH
25193: LD_INT 1
25195: PLUS
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PPUSH
25201: LD_VAR 0 2
25205: PUSH
25206: LD_VAR 0 4
25210: ARRAY
25211: PUSH
25212: LD_VAR 0 2
25216: PUSH
25217: LD_VAR 0 4
25221: ARRAY
25222: PPUSH
25223: CALL_OW 255
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PPUSH
25232: CALL 32687 0 3
25236: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25237: LD_VAR 0 2
25241: PUSH
25242: LD_VAR 0 4
25246: ARRAY
25247: PPUSH
25248: LD_VAR 0 1
25252: PPUSH
25253: CALL_OW 255
25257: PPUSH
25258: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25262: LD_VAR 0 2
25266: PUSH
25267: LD_VAR 0 4
25271: ARRAY
25272: PPUSH
25273: CALL_OW 141
// end ;
25277: GO 25109
25279: POP
25280: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25281: LD_VAR 0 1
25285: PPUSH
25286: LD_EXP 105
25290: PUSH
25291: LD_VAR 0 5
25295: ARRAY
25296: PUSH
25297: LD_INT 0
25299: PLUS
25300: PPUSH
25301: CALL_OW 505
// end ;
25305: LD_VAR 0 3
25309: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25310: LD_INT 0
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
// if not hack in hackTanks then
25316: LD_VAR 0 1
25320: PUSH
25321: LD_EXP 104
25325: IN
25326: NOT
25327: IFFALSE 25331
// exit ;
25329: GO 25571
// index := GetElementIndex ( hackTanks , hack ) ;
25331: LD_ADDR_VAR 0 4
25335: PUSH
25336: LD_EXP 104
25340: PPUSH
25341: LD_VAR 0 1
25345: PPUSH
25346: CALL 32472 0 2
25350: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: DOUBLE
25357: LD_EXP 105
25361: PUSH
25362: LD_VAR 0 4
25366: ARRAY
25367: INC
25368: ST_TO_ADDR
25369: LD_INT 1
25371: PUSH
25372: FOR_DOWNTO
25373: IFFALSE 25545
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25375: LD_ADDR_VAR 0 5
25379: PUSH
25380: LD_EXP 105
25384: PUSH
25385: LD_VAR 0 4
25389: ARRAY
25390: PUSH
25391: LD_VAR 0 3
25395: ARRAY
25396: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25397: LD_VAR 0 5
25401: PUSH
25402: LD_INT 1
25404: ARRAY
25405: PPUSH
25406: CALL_OW 302
25410: NOT
25411: PUSH
25412: LD_VAR 0 5
25416: PUSH
25417: LD_INT 1
25419: ARRAY
25420: PPUSH
25421: CALL_OW 255
25425: PUSH
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 255
25435: NONEQUAL
25436: OR
25437: IFFALSE 25543
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25439: LD_VAR 0 5
25443: PUSH
25444: LD_INT 1
25446: ARRAY
25447: PPUSH
25448: CALL_OW 305
25452: PUSH
25453: LD_VAR 0 5
25457: PUSH
25458: LD_INT 1
25460: ARRAY
25461: PPUSH
25462: CALL_OW 255
25466: PUSH
25467: LD_VAR 0 1
25471: PPUSH
25472: CALL_OW 255
25476: EQUAL
25477: AND
25478: IFFALSE 25502
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25480: LD_VAR 0 5
25484: PUSH
25485: LD_INT 1
25487: ARRAY
25488: PPUSH
25489: LD_VAR 0 5
25493: PUSH
25494: LD_INT 2
25496: ARRAY
25497: PPUSH
25498: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25502: LD_ADDR_EXP 105
25506: PUSH
25507: LD_EXP 105
25511: PPUSH
25512: LD_VAR 0 4
25516: PPUSH
25517: LD_EXP 105
25521: PUSH
25522: LD_VAR 0 4
25526: ARRAY
25527: PPUSH
25528: LD_VAR 0 3
25532: PPUSH
25533: CALL_OW 3
25537: PPUSH
25538: CALL_OW 1
25542: ST_TO_ADDR
// end ; end ;
25543: GO 25372
25545: POP
25546: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25547: LD_VAR 0 1
25551: PPUSH
25552: LD_EXP 105
25556: PUSH
25557: LD_VAR 0 4
25561: ARRAY
25562: PUSH
25563: LD_INT 0
25565: PLUS
25566: PPUSH
25567: CALL_OW 505
// end ;
25571: LD_VAR 0 2
25575: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25576: LD_INT 0
25578: PPUSH
25579: PPUSH
25580: PPUSH
25581: PPUSH
// if not hack in hackTanks then
25582: LD_VAR 0 1
25586: PUSH
25587: LD_EXP 104
25591: IN
25592: NOT
25593: IFFALSE 25597
// exit ;
25595: GO 25682
// index := GetElementIndex ( hackTanks , hack ) ;
25597: LD_ADDR_VAR 0 5
25601: PUSH
25602: LD_EXP 104
25606: PPUSH
25607: LD_VAR 0 1
25611: PPUSH
25612: CALL 32472 0 2
25616: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25617: LD_ADDR_VAR 0 4
25621: PUSH
25622: DOUBLE
25623: LD_INT 1
25625: DEC
25626: ST_TO_ADDR
25627: LD_EXP 105
25631: PUSH
25632: LD_VAR 0 5
25636: ARRAY
25637: PUSH
25638: FOR_TO
25639: IFFALSE 25680
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25641: LD_EXP 105
25645: PUSH
25646: LD_VAR 0 5
25650: ARRAY
25651: PUSH
25652: LD_VAR 0 4
25656: ARRAY
25657: PUSH
25658: LD_INT 1
25660: ARRAY
25661: PUSH
25662: LD_VAR 0 2
25666: EQUAL
25667: IFFALSE 25678
// KillUnit ( vehicle ) ;
25669: LD_VAR 0 2
25673: PPUSH
25674: CALL_OW 66
25678: GO 25638
25680: POP
25681: POP
// end ;
25682: LD_VAR 0 3
25686: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25687: LD_EXP 109
25691: NOT
25692: IFFALSE 25727
25694: GO 25696
25696: DISABLE
// begin initMiner := true ;
25697: LD_ADDR_EXP 109
25701: PUSH
25702: LD_INT 1
25704: ST_TO_ADDR
// minersList := [ ] ;
25705: LD_ADDR_EXP 110
25709: PUSH
25710: EMPTY
25711: ST_TO_ADDR
// minerMinesList := [ ] ;
25712: LD_ADDR_EXP 111
25716: PUSH
25717: EMPTY
25718: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25719: LD_ADDR_EXP 112
25723: PUSH
25724: LD_INT 5
25726: ST_TO_ADDR
// end ;
25727: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25728: LD_EXP 109
25732: PUSH
25733: LD_INT 34
25735: PUSH
25736: LD_EXP 120
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PPUSH
25745: CALL_OW 69
25749: AND
25750: IFFALSE 26213
25752: GO 25754
25754: DISABLE
25755: LD_INT 0
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
// begin enable ;
25761: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25762: LD_ADDR_VAR 0 1
25766: PUSH
25767: LD_INT 34
25769: PUSH
25770: LD_EXP 120
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PPUSH
25779: CALL_OW 69
25783: PUSH
25784: FOR_IN
25785: IFFALSE 25857
// begin if not i in minersList then
25787: LD_VAR 0 1
25791: PUSH
25792: LD_EXP 110
25796: IN
25797: NOT
25798: IFFALSE 25855
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25800: LD_ADDR_EXP 110
25804: PUSH
25805: LD_EXP 110
25809: PPUSH
25810: LD_EXP 110
25814: PUSH
25815: LD_INT 1
25817: PLUS
25818: PPUSH
25819: LD_VAR 0 1
25823: PPUSH
25824: CALL_OW 1
25828: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25829: LD_ADDR_EXP 111
25833: PUSH
25834: LD_EXP 111
25838: PPUSH
25839: LD_EXP 111
25843: PUSH
25844: LD_INT 1
25846: PLUS
25847: PPUSH
25848: EMPTY
25849: PPUSH
25850: CALL_OW 1
25854: ST_TO_ADDR
// end end ;
25855: GO 25784
25857: POP
25858: POP
// for i := minerMinesList downto 1 do
25859: LD_ADDR_VAR 0 1
25863: PUSH
25864: DOUBLE
25865: LD_EXP 111
25869: INC
25870: ST_TO_ADDR
25871: LD_INT 1
25873: PUSH
25874: FOR_DOWNTO
25875: IFFALSE 26211
// begin if IsLive ( minersList [ i ] ) then
25877: LD_EXP 110
25881: PUSH
25882: LD_VAR 0 1
25886: ARRAY
25887: PPUSH
25888: CALL_OW 300
25892: IFFALSE 25920
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25894: LD_EXP 110
25898: PUSH
25899: LD_VAR 0 1
25903: ARRAY
25904: PPUSH
25905: LD_EXP 111
25909: PUSH
25910: LD_VAR 0 1
25914: ARRAY
25915: PPUSH
25916: CALL_OW 505
// if not minerMinesList [ i ] then
25920: LD_EXP 111
25924: PUSH
25925: LD_VAR 0 1
25929: ARRAY
25930: NOT
25931: IFFALSE 25935
// continue ;
25933: GO 25874
// for j := minerMinesList [ i ] downto 1 do
25935: LD_ADDR_VAR 0 2
25939: PUSH
25940: DOUBLE
25941: LD_EXP 111
25945: PUSH
25946: LD_VAR 0 1
25950: ARRAY
25951: INC
25952: ST_TO_ADDR
25953: LD_INT 1
25955: PUSH
25956: FOR_DOWNTO
25957: IFFALSE 26207
// begin side := GetSide ( minersList [ i ] ) ;
25959: LD_ADDR_VAR 0 3
25963: PUSH
25964: LD_EXP 110
25968: PUSH
25969: LD_VAR 0 1
25973: ARRAY
25974: PPUSH
25975: CALL_OW 255
25979: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25980: LD_ADDR_VAR 0 4
25984: PUSH
25985: LD_EXP 111
25989: PUSH
25990: LD_VAR 0 1
25994: ARRAY
25995: PUSH
25996: LD_VAR 0 2
26000: ARRAY
26001: PUSH
26002: LD_INT 1
26004: ARRAY
26005: PPUSH
26006: LD_EXP 111
26010: PUSH
26011: LD_VAR 0 1
26015: ARRAY
26016: PUSH
26017: LD_VAR 0 2
26021: ARRAY
26022: PUSH
26023: LD_INT 2
26025: ARRAY
26026: PPUSH
26027: CALL_OW 428
26031: ST_TO_ADDR
// if not tmp then
26032: LD_VAR 0 4
26036: NOT
26037: IFFALSE 26041
// continue ;
26039: GO 25956
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26041: LD_VAR 0 4
26045: PUSH
26046: LD_INT 81
26048: PUSH
26049: LD_VAR 0 3
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PPUSH
26058: CALL_OW 69
26062: IN
26063: PUSH
26064: LD_EXP 111
26068: PUSH
26069: LD_VAR 0 1
26073: ARRAY
26074: PUSH
26075: LD_VAR 0 2
26079: ARRAY
26080: PUSH
26081: LD_INT 1
26083: ARRAY
26084: PPUSH
26085: LD_EXP 111
26089: PUSH
26090: LD_VAR 0 1
26094: ARRAY
26095: PUSH
26096: LD_VAR 0 2
26100: ARRAY
26101: PUSH
26102: LD_INT 2
26104: ARRAY
26105: PPUSH
26106: CALL_OW 458
26110: AND
26111: IFFALSE 26205
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26113: LD_EXP 111
26117: PUSH
26118: LD_VAR 0 1
26122: ARRAY
26123: PUSH
26124: LD_VAR 0 2
26128: ARRAY
26129: PUSH
26130: LD_INT 1
26132: ARRAY
26133: PPUSH
26134: LD_EXP 111
26138: PUSH
26139: LD_VAR 0 1
26143: ARRAY
26144: PUSH
26145: LD_VAR 0 2
26149: ARRAY
26150: PUSH
26151: LD_INT 2
26153: ARRAY
26154: PPUSH
26155: LD_VAR 0 3
26159: PPUSH
26160: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26164: LD_ADDR_EXP 111
26168: PUSH
26169: LD_EXP 111
26173: PPUSH
26174: LD_VAR 0 1
26178: PPUSH
26179: LD_EXP 111
26183: PUSH
26184: LD_VAR 0 1
26188: ARRAY
26189: PPUSH
26190: LD_VAR 0 2
26194: PPUSH
26195: CALL_OW 3
26199: PPUSH
26200: CALL_OW 1
26204: ST_TO_ADDR
// end ; end ;
26205: GO 25956
26207: POP
26208: POP
// end ;
26209: GO 25874
26211: POP
26212: POP
// end ;
26213: PPOPN 4
26215: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26216: LD_INT 0
26218: PPUSH
26219: PPUSH
// result := false ;
26220: LD_ADDR_VAR 0 4
26224: PUSH
26225: LD_INT 0
26227: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26228: LD_VAR 0 1
26232: PPUSH
26233: CALL_OW 264
26237: PUSH
26238: LD_EXP 120
26242: EQUAL
26243: NOT
26244: IFFALSE 26248
// exit ;
26246: GO 26488
// index := GetElementIndex ( minersList , unit ) ;
26248: LD_ADDR_VAR 0 5
26252: PUSH
26253: LD_EXP 110
26257: PPUSH
26258: LD_VAR 0 1
26262: PPUSH
26263: CALL 32472 0 2
26267: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26268: LD_EXP 111
26272: PUSH
26273: LD_VAR 0 5
26277: ARRAY
26278: PUSH
26279: LD_EXP 112
26283: GREATEREQUAL
26284: IFFALSE 26288
// exit ;
26286: GO 26488
// ComMoveXY ( unit , x , y ) ;
26288: LD_VAR 0 1
26292: PPUSH
26293: LD_VAR 0 2
26297: PPUSH
26298: LD_VAR 0 3
26302: PPUSH
26303: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26307: LD_INT 35
26309: PPUSH
26310: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26314: LD_VAR 0 1
26318: PPUSH
26319: LD_VAR 0 2
26323: PPUSH
26324: LD_VAR 0 3
26328: PPUSH
26329: CALL 63244 0 3
26333: NOT
26334: PUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: CALL_OW 314
26344: AND
26345: IFFALSE 26349
// exit ;
26347: GO 26488
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26349: LD_VAR 0 2
26353: PPUSH
26354: LD_VAR 0 3
26358: PPUSH
26359: CALL_OW 428
26363: PUSH
26364: LD_VAR 0 1
26368: EQUAL
26369: PUSH
26370: LD_VAR 0 1
26374: PPUSH
26375: CALL_OW 314
26379: NOT
26380: AND
26381: IFFALSE 26307
// PlaySoundXY ( x , y , PlantMine ) ;
26383: LD_VAR 0 2
26387: PPUSH
26388: LD_VAR 0 3
26392: PPUSH
26393: LD_STRING PlantMine
26395: PPUSH
26396: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26400: LD_VAR 0 2
26404: PPUSH
26405: LD_VAR 0 3
26409: PPUSH
26410: LD_VAR 0 1
26414: PPUSH
26415: CALL_OW 255
26419: PPUSH
26420: LD_INT 0
26422: PPUSH
26423: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26427: LD_ADDR_EXP 111
26431: PUSH
26432: LD_EXP 111
26436: PPUSH
26437: LD_VAR 0 5
26441: PUSH
26442: LD_EXP 111
26446: PUSH
26447: LD_VAR 0 5
26451: ARRAY
26452: PUSH
26453: LD_INT 1
26455: PLUS
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PPUSH
26461: LD_VAR 0 2
26465: PUSH
26466: LD_VAR 0 3
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PPUSH
26475: CALL 32687 0 3
26479: ST_TO_ADDR
// result := true ;
26480: LD_ADDR_VAR 0 4
26484: PUSH
26485: LD_INT 1
26487: ST_TO_ADDR
// end ;
26488: LD_VAR 0 4
26492: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26493: LD_INT 0
26495: PPUSH
26496: PPUSH
26497: PPUSH
// if not unit in minersList then
26498: LD_VAR 0 1
26502: PUSH
26503: LD_EXP 110
26507: IN
26508: NOT
26509: IFFALSE 26513
// exit ;
26511: GO 26905
// index := GetElementIndex ( minersList , unit ) ;
26513: LD_ADDR_VAR 0 6
26517: PUSH
26518: LD_EXP 110
26522: PPUSH
26523: LD_VAR 0 1
26527: PPUSH
26528: CALL 32472 0 2
26532: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26533: LD_ADDR_VAR 0 5
26537: PUSH
26538: DOUBLE
26539: LD_EXP 111
26543: PUSH
26544: LD_VAR 0 6
26548: ARRAY
26549: INC
26550: ST_TO_ADDR
26551: LD_INT 1
26553: PUSH
26554: FOR_DOWNTO
26555: IFFALSE 26716
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26557: LD_EXP 111
26561: PUSH
26562: LD_VAR 0 6
26566: ARRAY
26567: PUSH
26568: LD_VAR 0 5
26572: ARRAY
26573: PUSH
26574: LD_INT 1
26576: ARRAY
26577: PUSH
26578: LD_VAR 0 2
26582: EQUAL
26583: PUSH
26584: LD_EXP 111
26588: PUSH
26589: LD_VAR 0 6
26593: ARRAY
26594: PUSH
26595: LD_VAR 0 5
26599: ARRAY
26600: PUSH
26601: LD_INT 2
26603: ARRAY
26604: PUSH
26605: LD_VAR 0 3
26609: EQUAL
26610: AND
26611: IFFALSE 26714
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26613: LD_EXP 111
26617: PUSH
26618: LD_VAR 0 6
26622: ARRAY
26623: PUSH
26624: LD_VAR 0 5
26628: ARRAY
26629: PUSH
26630: LD_INT 1
26632: ARRAY
26633: PPUSH
26634: LD_EXP 111
26638: PUSH
26639: LD_VAR 0 6
26643: ARRAY
26644: PUSH
26645: LD_VAR 0 5
26649: ARRAY
26650: PUSH
26651: LD_INT 2
26653: ARRAY
26654: PPUSH
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 255
26664: PPUSH
26665: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26669: LD_ADDR_EXP 111
26673: PUSH
26674: LD_EXP 111
26678: PPUSH
26679: LD_VAR 0 6
26683: PPUSH
26684: LD_EXP 111
26688: PUSH
26689: LD_VAR 0 6
26693: ARRAY
26694: PPUSH
26695: LD_VAR 0 5
26699: PPUSH
26700: CALL_OW 3
26704: PPUSH
26705: CALL_OW 1
26709: ST_TO_ADDR
// exit ;
26710: POP
26711: POP
26712: GO 26905
// end ; end ;
26714: GO 26554
26716: POP
26717: POP
// for i := minerMinesList [ index ] downto 1 do
26718: LD_ADDR_VAR 0 5
26722: PUSH
26723: DOUBLE
26724: LD_EXP 111
26728: PUSH
26729: LD_VAR 0 6
26733: ARRAY
26734: INC
26735: ST_TO_ADDR
26736: LD_INT 1
26738: PUSH
26739: FOR_DOWNTO
26740: IFFALSE 26903
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26742: LD_EXP 111
26746: PUSH
26747: LD_VAR 0 6
26751: ARRAY
26752: PUSH
26753: LD_VAR 0 5
26757: ARRAY
26758: PUSH
26759: LD_INT 1
26761: ARRAY
26762: PPUSH
26763: LD_EXP 111
26767: PUSH
26768: LD_VAR 0 6
26772: ARRAY
26773: PUSH
26774: LD_VAR 0 5
26778: ARRAY
26779: PUSH
26780: LD_INT 2
26782: ARRAY
26783: PPUSH
26784: LD_VAR 0 2
26788: PPUSH
26789: LD_VAR 0 3
26793: PPUSH
26794: CALL_OW 298
26798: PUSH
26799: LD_INT 6
26801: LESS
26802: IFFALSE 26901
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26804: LD_EXP 111
26808: PUSH
26809: LD_VAR 0 6
26813: ARRAY
26814: PUSH
26815: LD_VAR 0 5
26819: ARRAY
26820: PUSH
26821: LD_INT 1
26823: ARRAY
26824: PPUSH
26825: LD_EXP 111
26829: PUSH
26830: LD_VAR 0 6
26834: ARRAY
26835: PUSH
26836: LD_VAR 0 5
26840: ARRAY
26841: PUSH
26842: LD_INT 2
26844: ARRAY
26845: PPUSH
26846: LD_VAR 0 1
26850: PPUSH
26851: CALL_OW 255
26855: PPUSH
26856: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26860: LD_ADDR_EXP 111
26864: PUSH
26865: LD_EXP 111
26869: PPUSH
26870: LD_VAR 0 6
26874: PPUSH
26875: LD_EXP 111
26879: PUSH
26880: LD_VAR 0 6
26884: ARRAY
26885: PPUSH
26886: LD_VAR 0 5
26890: PPUSH
26891: CALL_OW 3
26895: PPUSH
26896: CALL_OW 1
26900: ST_TO_ADDR
// end ; end ;
26901: GO 26739
26903: POP
26904: POP
// end ;
26905: LD_VAR 0 4
26909: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26910: LD_INT 0
26912: PPUSH
26913: PPUSH
26914: PPUSH
26915: PPUSH
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26921: LD_VAR 0 1
26925: PPUSH
26926: CALL_OW 264
26930: PUSH
26931: LD_EXP 120
26935: EQUAL
26936: NOT
26937: PUSH
26938: LD_VAR 0 1
26942: PUSH
26943: LD_EXP 110
26947: IN
26948: NOT
26949: OR
26950: IFFALSE 26954
// exit ;
26952: GO 27276
// index := GetElementIndex ( minersList , unit ) ;
26954: LD_ADDR_VAR 0 6
26958: PUSH
26959: LD_EXP 110
26963: PPUSH
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL 32472 0 2
26973: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26974: LD_ADDR_VAR 0 8
26978: PUSH
26979: LD_EXP 112
26983: PUSH
26984: LD_EXP 111
26988: PUSH
26989: LD_VAR 0 6
26993: ARRAY
26994: MINUS
26995: ST_TO_ADDR
// if not minesFreeAmount then
26996: LD_VAR 0 8
27000: NOT
27001: IFFALSE 27005
// exit ;
27003: GO 27276
// tmp := [ ] ;
27005: LD_ADDR_VAR 0 7
27009: PUSH
27010: EMPTY
27011: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27012: LD_ADDR_VAR 0 5
27016: PUSH
27017: DOUBLE
27018: LD_INT 1
27020: DEC
27021: ST_TO_ADDR
27022: LD_VAR 0 8
27026: PUSH
27027: FOR_TO
27028: IFFALSE 27223
// begin _d := rand ( 0 , 5 ) ;
27030: LD_ADDR_VAR 0 11
27034: PUSH
27035: LD_INT 0
27037: PPUSH
27038: LD_INT 5
27040: PPUSH
27041: CALL_OW 12
27045: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27046: LD_ADDR_VAR 0 12
27050: PUSH
27051: LD_INT 2
27053: PPUSH
27054: LD_INT 6
27056: PPUSH
27057: CALL_OW 12
27061: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27062: LD_ADDR_VAR 0 9
27066: PUSH
27067: LD_VAR 0 2
27071: PPUSH
27072: LD_VAR 0 11
27076: PPUSH
27077: LD_VAR 0 12
27081: PPUSH
27082: CALL_OW 272
27086: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27087: LD_ADDR_VAR 0 10
27091: PUSH
27092: LD_VAR 0 3
27096: PPUSH
27097: LD_VAR 0 11
27101: PPUSH
27102: LD_VAR 0 12
27106: PPUSH
27107: CALL_OW 273
27111: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27112: LD_VAR 0 9
27116: PPUSH
27117: LD_VAR 0 10
27121: PPUSH
27122: CALL_OW 488
27126: PUSH
27127: LD_VAR 0 9
27131: PUSH
27132: LD_VAR 0 10
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_VAR 0 7
27145: IN
27146: NOT
27147: AND
27148: PUSH
27149: LD_VAR 0 9
27153: PPUSH
27154: LD_VAR 0 10
27158: PPUSH
27159: CALL_OW 458
27163: NOT
27164: AND
27165: IFFALSE 27207
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27167: LD_ADDR_VAR 0 7
27171: PUSH
27172: LD_VAR 0 7
27176: PPUSH
27177: LD_VAR 0 7
27181: PUSH
27182: LD_INT 1
27184: PLUS
27185: PPUSH
27186: LD_VAR 0 9
27190: PUSH
27191: LD_VAR 0 10
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PPUSH
27200: CALL_OW 1
27204: ST_TO_ADDR
27205: GO 27221
// i := i - 1 ;
27207: LD_ADDR_VAR 0 5
27211: PUSH
27212: LD_VAR 0 5
27216: PUSH
27217: LD_INT 1
27219: MINUS
27220: ST_TO_ADDR
// end ;
27221: GO 27027
27223: POP
27224: POP
// for i in tmp do
27225: LD_ADDR_VAR 0 5
27229: PUSH
27230: LD_VAR 0 7
27234: PUSH
27235: FOR_IN
27236: IFFALSE 27274
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27238: LD_VAR 0 1
27242: PPUSH
27243: LD_VAR 0 5
27247: PUSH
27248: LD_INT 1
27250: ARRAY
27251: PPUSH
27252: LD_VAR 0 5
27256: PUSH
27257: LD_INT 2
27259: ARRAY
27260: PPUSH
27261: CALL 26216 0 3
27265: NOT
27266: IFFALSE 27272
// exit ;
27268: POP
27269: POP
27270: GO 27276
27272: GO 27235
27274: POP
27275: POP
// end ;
27276: LD_VAR 0 4
27280: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27281: LD_INT 0
27283: PPUSH
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
27288: PPUSH
27289: PPUSH
// if not GetClass ( unit ) = class_sniper then
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 257
27299: PUSH
27300: LD_INT 5
27302: EQUAL
27303: NOT
27304: IFFALSE 27308
// exit ;
27306: GO 27696
// dist := 8 ;
27308: LD_ADDR_VAR 0 5
27312: PUSH
27313: LD_INT 8
27315: ST_TO_ADDR
// viewRange := 12 ;
27316: LD_ADDR_VAR 0 7
27320: PUSH
27321: LD_INT 12
27323: ST_TO_ADDR
// side := GetSide ( unit ) ;
27324: LD_ADDR_VAR 0 6
27328: PUSH
27329: LD_VAR 0 1
27333: PPUSH
27334: CALL_OW 255
27338: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27339: LD_INT 61
27341: PPUSH
27342: LD_VAR 0 6
27346: PPUSH
27347: CALL_OW 321
27351: PUSH
27352: LD_INT 2
27354: EQUAL
27355: IFFALSE 27365
// viewRange := 16 ;
27357: LD_ADDR_VAR 0 7
27361: PUSH
27362: LD_INT 16
27364: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27365: LD_VAR 0 1
27369: PPUSH
27370: LD_VAR 0 2
27374: PPUSH
27375: LD_VAR 0 3
27379: PPUSH
27380: CALL_OW 297
27384: PUSH
27385: LD_VAR 0 5
27389: GREATER
27390: IFFALSE 27469
// begin ComMoveXY ( unit , x , y ) ;
27392: LD_VAR 0 1
27396: PPUSH
27397: LD_VAR 0 2
27401: PPUSH
27402: LD_VAR 0 3
27406: PPUSH
27407: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27411: LD_INT 35
27413: PPUSH
27414: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27418: LD_VAR 0 1
27422: PPUSH
27423: LD_VAR 0 2
27427: PPUSH
27428: LD_VAR 0 3
27432: PPUSH
27433: CALL 63244 0 3
27437: NOT
27438: IFFALSE 27442
// exit ;
27440: GO 27696
// until GetDistUnitXY ( unit , x , y ) < dist ;
27442: LD_VAR 0 1
27446: PPUSH
27447: LD_VAR 0 2
27451: PPUSH
27452: LD_VAR 0 3
27456: PPUSH
27457: CALL_OW 297
27461: PUSH
27462: LD_VAR 0 5
27466: LESS
27467: IFFALSE 27411
// end ; ComTurnXY ( unit , x , y ) ;
27469: LD_VAR 0 1
27473: PPUSH
27474: LD_VAR 0 2
27478: PPUSH
27479: LD_VAR 0 3
27483: PPUSH
27484: CALL_OW 118
// wait ( 5 ) ;
27488: LD_INT 5
27490: PPUSH
27491: CALL_OW 67
// _d := GetDir ( unit ) ;
27495: LD_ADDR_VAR 0 10
27499: PUSH
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 254
27509: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27510: LD_ADDR_VAR 0 8
27514: PUSH
27515: LD_VAR 0 1
27519: PPUSH
27520: CALL_OW 250
27524: PPUSH
27525: LD_VAR 0 10
27529: PPUSH
27530: LD_VAR 0 5
27534: PPUSH
27535: CALL_OW 272
27539: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27540: LD_ADDR_VAR 0 9
27544: PUSH
27545: LD_VAR 0 1
27549: PPUSH
27550: CALL_OW 251
27554: PPUSH
27555: LD_VAR 0 10
27559: PPUSH
27560: LD_VAR 0 5
27564: PPUSH
27565: CALL_OW 273
27569: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27570: LD_VAR 0 8
27574: PPUSH
27575: LD_VAR 0 9
27579: PPUSH
27580: CALL_OW 488
27584: NOT
27585: IFFALSE 27589
// exit ;
27587: GO 27696
// ComAnimCustom ( unit , 1 ) ;
27589: LD_VAR 0 1
27593: PPUSH
27594: LD_INT 1
27596: PPUSH
27597: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27601: LD_VAR 0 8
27605: PPUSH
27606: LD_VAR 0 9
27610: PPUSH
27611: LD_VAR 0 6
27615: PPUSH
27616: LD_VAR 0 7
27620: PPUSH
27621: CALL_OW 330
// repeat wait ( 1 ) ;
27625: LD_INT 1
27627: PPUSH
27628: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27632: LD_VAR 0 1
27636: PPUSH
27637: CALL_OW 316
27641: PUSH
27642: LD_VAR 0 1
27646: PPUSH
27647: CALL_OW 314
27651: OR
27652: PUSH
27653: LD_VAR 0 1
27657: PPUSH
27658: CALL_OW 302
27662: NOT
27663: OR
27664: PUSH
27665: LD_VAR 0 1
27669: PPUSH
27670: CALL_OW 301
27674: OR
27675: IFFALSE 27625
// RemoveSeeing ( _x , _y , side ) ;
27677: LD_VAR 0 8
27681: PPUSH
27682: LD_VAR 0 9
27686: PPUSH
27687: LD_VAR 0 6
27691: PPUSH
27692: CALL_OW 331
// end ; end_of_file
27696: LD_VAR 0 4
27700: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27701: LD_INT 0
27703: PPUSH
27704: PPUSH
// if exist_mode then
27705: LD_VAR 0 2
27709: IFFALSE 27734
// unit := CreateCharacter ( prefix & ident ) else
27711: LD_ADDR_VAR 0 5
27715: PUSH
27716: LD_VAR 0 3
27720: PUSH
27721: LD_VAR 0 1
27725: STR
27726: PPUSH
27727: CALL_OW 34
27731: ST_TO_ADDR
27732: GO 27749
// unit := NewCharacter ( ident ) ;
27734: LD_ADDR_VAR 0 5
27738: PUSH
27739: LD_VAR 0 1
27743: PPUSH
27744: CALL_OW 25
27748: ST_TO_ADDR
// result := unit ;
27749: LD_ADDR_VAR 0 4
27753: PUSH
27754: LD_VAR 0 5
27758: ST_TO_ADDR
// end ;
27759: LD_VAR 0 4
27763: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27764: LD_INT 0
27766: PPUSH
27767: PPUSH
// if not side or not nation then
27768: LD_VAR 0 1
27772: NOT
27773: PUSH
27774: LD_VAR 0 2
27778: NOT
27779: OR
27780: IFFALSE 27784
// exit ;
27782: GO 28552
// case nation of nation_american :
27784: LD_VAR 0 2
27788: PUSH
27789: LD_INT 1
27791: DOUBLE
27792: EQUAL
27793: IFTRUE 27797
27795: GO 28011
27797: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27798: LD_ADDR_VAR 0 4
27802: PUSH
27803: LD_INT 35
27805: PUSH
27806: LD_INT 45
27808: PUSH
27809: LD_INT 46
27811: PUSH
27812: LD_INT 47
27814: PUSH
27815: LD_INT 82
27817: PUSH
27818: LD_INT 83
27820: PUSH
27821: LD_INT 84
27823: PUSH
27824: LD_INT 85
27826: PUSH
27827: LD_INT 86
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 6
27838: PUSH
27839: LD_INT 15
27841: PUSH
27842: LD_INT 16
27844: PUSH
27845: LD_INT 7
27847: PUSH
27848: LD_INT 12
27850: PUSH
27851: LD_INT 13
27853: PUSH
27854: LD_INT 10
27856: PUSH
27857: LD_INT 14
27859: PUSH
27860: LD_INT 20
27862: PUSH
27863: LD_INT 21
27865: PUSH
27866: LD_INT 22
27868: PUSH
27869: LD_INT 25
27871: PUSH
27872: LD_INT 32
27874: PUSH
27875: LD_INT 27
27877: PUSH
27878: LD_INT 36
27880: PUSH
27881: LD_INT 69
27883: PUSH
27884: LD_INT 39
27886: PUSH
27887: LD_INT 34
27889: PUSH
27890: LD_INT 40
27892: PUSH
27893: LD_INT 48
27895: PUSH
27896: LD_INT 49
27898: PUSH
27899: LD_INT 50
27901: PUSH
27902: LD_INT 51
27904: PUSH
27905: LD_INT 52
27907: PUSH
27908: LD_INT 53
27910: PUSH
27911: LD_INT 54
27913: PUSH
27914: LD_INT 55
27916: PUSH
27917: LD_INT 56
27919: PUSH
27920: LD_INT 57
27922: PUSH
27923: LD_INT 58
27925: PUSH
27926: LD_INT 59
27928: PUSH
27929: LD_INT 60
27931: PUSH
27932: LD_INT 61
27934: PUSH
27935: LD_INT 62
27937: PUSH
27938: LD_INT 80
27940: PUSH
27941: LD_INT 82
27943: PUSH
27944: LD_INT 83
27946: PUSH
27947: LD_INT 84
27949: PUSH
27950: LD_INT 85
27952: PUSH
27953: LD_INT 86
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: ST_TO_ADDR
28009: GO 28476
28011: LD_INT 2
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28019
28017: GO 28245
28019: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28020: LD_ADDR_VAR 0 4
28024: PUSH
28025: LD_INT 35
28027: PUSH
28028: LD_INT 45
28030: PUSH
28031: LD_INT 46
28033: PUSH
28034: LD_INT 47
28036: PUSH
28037: LD_INT 82
28039: PUSH
28040: LD_INT 83
28042: PUSH
28043: LD_INT 84
28045: PUSH
28046: LD_INT 85
28048: PUSH
28049: LD_INT 87
28051: PUSH
28052: LD_INT 70
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: LD_INT 11
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: LD_INT 4
28066: PUSH
28067: LD_INT 5
28069: PUSH
28070: LD_INT 6
28072: PUSH
28073: LD_INT 15
28075: PUSH
28076: LD_INT 18
28078: PUSH
28079: LD_INT 7
28081: PUSH
28082: LD_INT 17
28084: PUSH
28085: LD_INT 8
28087: PUSH
28088: LD_INT 20
28090: PUSH
28091: LD_INT 21
28093: PUSH
28094: LD_INT 22
28096: PUSH
28097: LD_INT 72
28099: PUSH
28100: LD_INT 26
28102: PUSH
28103: LD_INT 69
28105: PUSH
28106: LD_INT 39
28108: PUSH
28109: LD_INT 40
28111: PUSH
28112: LD_INT 41
28114: PUSH
28115: LD_INT 42
28117: PUSH
28118: LD_INT 43
28120: PUSH
28121: LD_INT 48
28123: PUSH
28124: LD_INT 49
28126: PUSH
28127: LD_INT 50
28129: PUSH
28130: LD_INT 51
28132: PUSH
28133: LD_INT 52
28135: PUSH
28136: LD_INT 53
28138: PUSH
28139: LD_INT 54
28141: PUSH
28142: LD_INT 55
28144: PUSH
28145: LD_INT 56
28147: PUSH
28148: LD_INT 60
28150: PUSH
28151: LD_INT 61
28153: PUSH
28154: LD_INT 62
28156: PUSH
28157: LD_INT 66
28159: PUSH
28160: LD_INT 67
28162: PUSH
28163: LD_INT 68
28165: PUSH
28166: LD_INT 81
28168: PUSH
28169: LD_INT 82
28171: PUSH
28172: LD_INT 83
28174: PUSH
28175: LD_INT 84
28177: PUSH
28178: LD_INT 85
28180: PUSH
28181: LD_INT 87
28183: PUSH
28184: LD_INT 88
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: ST_TO_ADDR
28243: GO 28476
28245: LD_INT 3
28247: DOUBLE
28248: EQUAL
28249: IFTRUE 28253
28251: GO 28475
28253: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28254: LD_ADDR_VAR 0 4
28258: PUSH
28259: LD_INT 46
28261: PUSH
28262: LD_INT 47
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: LD_INT 82
28273: PUSH
28274: LD_INT 83
28276: PUSH
28277: LD_INT 84
28279: PUSH
28280: LD_INT 85
28282: PUSH
28283: LD_INT 86
28285: PUSH
28286: LD_INT 11
28288: PUSH
28289: LD_INT 9
28291: PUSH
28292: LD_INT 20
28294: PUSH
28295: LD_INT 19
28297: PUSH
28298: LD_INT 21
28300: PUSH
28301: LD_INT 24
28303: PUSH
28304: LD_INT 22
28306: PUSH
28307: LD_INT 25
28309: PUSH
28310: LD_INT 28
28312: PUSH
28313: LD_INT 29
28315: PUSH
28316: LD_INT 30
28318: PUSH
28319: LD_INT 31
28321: PUSH
28322: LD_INT 37
28324: PUSH
28325: LD_INT 38
28327: PUSH
28328: LD_INT 32
28330: PUSH
28331: LD_INT 27
28333: PUSH
28334: LD_INT 33
28336: PUSH
28337: LD_INT 69
28339: PUSH
28340: LD_INT 39
28342: PUSH
28343: LD_INT 34
28345: PUSH
28346: LD_INT 40
28348: PUSH
28349: LD_INT 71
28351: PUSH
28352: LD_INT 23
28354: PUSH
28355: LD_INT 44
28357: PUSH
28358: LD_INT 48
28360: PUSH
28361: LD_INT 49
28363: PUSH
28364: LD_INT 50
28366: PUSH
28367: LD_INT 51
28369: PUSH
28370: LD_INT 52
28372: PUSH
28373: LD_INT 53
28375: PUSH
28376: LD_INT 54
28378: PUSH
28379: LD_INT 55
28381: PUSH
28382: LD_INT 56
28384: PUSH
28385: LD_INT 57
28387: PUSH
28388: LD_INT 58
28390: PUSH
28391: LD_INT 59
28393: PUSH
28394: LD_INT 63
28396: PUSH
28397: LD_INT 64
28399: PUSH
28400: LD_INT 65
28402: PUSH
28403: LD_INT 82
28405: PUSH
28406: LD_INT 83
28408: PUSH
28409: LD_INT 84
28411: PUSH
28412: LD_INT 85
28414: PUSH
28415: LD_INT 86
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: ST_TO_ADDR
28473: GO 28476
28475: POP
// if state > - 1 and state < 3 then
28476: LD_VAR 0 3
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: GREATER
28485: PUSH
28486: LD_VAR 0 3
28490: PUSH
28491: LD_INT 3
28493: LESS
28494: AND
28495: IFFALSE 28552
// for i in result do
28497: LD_ADDR_VAR 0 5
28501: PUSH
28502: LD_VAR 0 4
28506: PUSH
28507: FOR_IN
28508: IFFALSE 28550
// if GetTech ( i , side ) <> state then
28510: LD_VAR 0 5
28514: PPUSH
28515: LD_VAR 0 1
28519: PPUSH
28520: CALL_OW 321
28524: PUSH
28525: LD_VAR 0 3
28529: NONEQUAL
28530: IFFALSE 28548
// result := result diff i ;
28532: LD_ADDR_VAR 0 4
28536: PUSH
28537: LD_VAR 0 4
28541: PUSH
28542: LD_VAR 0 5
28546: DIFF
28547: ST_TO_ADDR
28548: GO 28507
28550: POP
28551: POP
// end ;
28552: LD_VAR 0 4
28556: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28557: LD_INT 0
28559: PPUSH
28560: PPUSH
28561: PPUSH
// result := true ;
28562: LD_ADDR_VAR 0 3
28566: PUSH
28567: LD_INT 1
28569: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28570: LD_ADDR_VAR 0 5
28574: PUSH
28575: LD_VAR 0 2
28579: PPUSH
28580: CALL_OW 480
28584: ST_TO_ADDR
// if not tmp then
28585: LD_VAR 0 5
28589: NOT
28590: IFFALSE 28594
// exit ;
28592: GO 28643
// for i in tmp do
28594: LD_ADDR_VAR 0 4
28598: PUSH
28599: LD_VAR 0 5
28603: PUSH
28604: FOR_IN
28605: IFFALSE 28641
// if GetTech ( i , side ) <> state_researched then
28607: LD_VAR 0 4
28611: PPUSH
28612: LD_VAR 0 1
28616: PPUSH
28617: CALL_OW 321
28621: PUSH
28622: LD_INT 2
28624: NONEQUAL
28625: IFFALSE 28639
// begin result := false ;
28627: LD_ADDR_VAR 0 3
28631: PUSH
28632: LD_INT 0
28634: ST_TO_ADDR
// exit ;
28635: POP
28636: POP
28637: GO 28643
// end ;
28639: GO 28604
28641: POP
28642: POP
// end ;
28643: LD_VAR 0 3
28647: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28648: LD_INT 0
28650: PPUSH
28651: PPUSH
28652: PPUSH
28653: PPUSH
28654: PPUSH
28655: PPUSH
28656: PPUSH
28657: PPUSH
28658: PPUSH
28659: PPUSH
28660: PPUSH
28661: PPUSH
28662: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28663: LD_VAR 0 1
28667: NOT
28668: PUSH
28669: LD_VAR 0 1
28673: PPUSH
28674: CALL_OW 257
28678: PUSH
28679: LD_INT 9
28681: NONEQUAL
28682: OR
28683: IFFALSE 28687
// exit ;
28685: GO 29260
// side := GetSide ( unit ) ;
28687: LD_ADDR_VAR 0 9
28691: PUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 255
28701: ST_TO_ADDR
// tech_space := tech_spacanom ;
28702: LD_ADDR_VAR 0 12
28706: PUSH
28707: LD_INT 29
28709: ST_TO_ADDR
// tech_time := tech_taurad ;
28710: LD_ADDR_VAR 0 13
28714: PUSH
28715: LD_INT 28
28717: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28718: LD_ADDR_VAR 0 11
28722: PUSH
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL_OW 310
28732: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28733: LD_VAR 0 11
28737: PPUSH
28738: CALL_OW 247
28742: PUSH
28743: LD_INT 2
28745: EQUAL
28746: IFFALSE 28750
// exit ;
28748: GO 29260
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28750: LD_ADDR_VAR 0 8
28754: PUSH
28755: LD_INT 81
28757: PUSH
28758: LD_VAR 0 9
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 3
28769: PUSH
28770: LD_INT 21
28772: PUSH
28773: LD_INT 3
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PPUSH
28788: CALL_OW 69
28792: ST_TO_ADDR
// if not tmp then
28793: LD_VAR 0 8
28797: NOT
28798: IFFALSE 28802
// exit ;
28800: GO 29260
// if in_unit then
28802: LD_VAR 0 11
28806: IFFALSE 28830
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28808: LD_ADDR_VAR 0 10
28812: PUSH
28813: LD_VAR 0 8
28817: PPUSH
28818: LD_VAR 0 11
28822: PPUSH
28823: CALL_OW 74
28827: ST_TO_ADDR
28828: GO 28850
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28830: LD_ADDR_VAR 0 10
28834: PUSH
28835: LD_VAR 0 8
28839: PPUSH
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 74
28849: ST_TO_ADDR
// if not enemy then
28850: LD_VAR 0 10
28854: NOT
28855: IFFALSE 28859
// exit ;
28857: GO 29260
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28859: LD_VAR 0 11
28863: PUSH
28864: LD_VAR 0 11
28868: PPUSH
28869: LD_VAR 0 10
28873: PPUSH
28874: CALL_OW 296
28878: PUSH
28879: LD_INT 13
28881: GREATER
28882: AND
28883: PUSH
28884: LD_VAR 0 1
28888: PPUSH
28889: LD_VAR 0 10
28893: PPUSH
28894: CALL_OW 296
28898: PUSH
28899: LD_INT 12
28901: GREATER
28902: OR
28903: IFFALSE 28907
// exit ;
28905: GO 29260
// missile := [ 1 ] ;
28907: LD_ADDR_VAR 0 14
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: EMPTY
28916: LIST
28917: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28918: LD_VAR 0 9
28922: PPUSH
28923: LD_VAR 0 12
28927: PPUSH
28928: CALL_OW 325
28932: IFFALSE 28961
// missile := Insert ( missile , missile + 1 , 2 ) ;
28934: LD_ADDR_VAR 0 14
28938: PUSH
28939: LD_VAR 0 14
28943: PPUSH
28944: LD_VAR 0 14
28948: PUSH
28949: LD_INT 1
28951: PLUS
28952: PPUSH
28953: LD_INT 2
28955: PPUSH
28956: CALL_OW 2
28960: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28961: LD_VAR 0 9
28965: PPUSH
28966: LD_VAR 0 13
28970: PPUSH
28971: CALL_OW 325
28975: PUSH
28976: LD_VAR 0 10
28980: PPUSH
28981: CALL_OW 255
28985: PPUSH
28986: LD_VAR 0 13
28990: PPUSH
28991: CALL_OW 325
28995: NOT
28996: AND
28997: IFFALSE 29026
// missile := Insert ( missile , missile + 1 , 3 ) ;
28999: LD_ADDR_VAR 0 14
29003: PUSH
29004: LD_VAR 0 14
29008: PPUSH
29009: LD_VAR 0 14
29013: PUSH
29014: LD_INT 1
29016: PLUS
29017: PPUSH
29018: LD_INT 3
29020: PPUSH
29021: CALL_OW 2
29025: ST_TO_ADDR
// if missile < 2 then
29026: LD_VAR 0 14
29030: PUSH
29031: LD_INT 2
29033: LESS
29034: IFFALSE 29038
// exit ;
29036: GO 29260
// x := GetX ( enemy ) ;
29038: LD_ADDR_VAR 0 4
29042: PUSH
29043: LD_VAR 0 10
29047: PPUSH
29048: CALL_OW 250
29052: ST_TO_ADDR
// y := GetY ( enemy ) ;
29053: LD_ADDR_VAR 0 5
29057: PUSH
29058: LD_VAR 0 10
29062: PPUSH
29063: CALL_OW 251
29067: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29068: LD_ADDR_VAR 0 6
29072: PUSH
29073: LD_VAR 0 4
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PPUSH
29082: LD_INT 1
29084: PPUSH
29085: CALL_OW 12
29089: PLUS
29090: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29091: LD_ADDR_VAR 0 7
29095: PUSH
29096: LD_VAR 0 5
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PPUSH
29105: LD_INT 1
29107: PPUSH
29108: CALL_OW 12
29112: PLUS
29113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29114: LD_VAR 0 6
29118: PPUSH
29119: LD_VAR 0 7
29123: PPUSH
29124: CALL_OW 488
29128: NOT
29129: IFFALSE 29151
// begin _x := x ;
29131: LD_ADDR_VAR 0 6
29135: PUSH
29136: LD_VAR 0 4
29140: ST_TO_ADDR
// _y := y ;
29141: LD_ADDR_VAR 0 7
29145: PUSH
29146: LD_VAR 0 5
29150: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29151: LD_ADDR_VAR 0 3
29155: PUSH
29156: LD_INT 1
29158: PPUSH
29159: LD_VAR 0 14
29163: PPUSH
29164: CALL_OW 12
29168: ST_TO_ADDR
// case i of 1 :
29169: LD_VAR 0 3
29173: PUSH
29174: LD_INT 1
29176: DOUBLE
29177: EQUAL
29178: IFTRUE 29182
29180: GO 29199
29182: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29183: LD_VAR 0 1
29187: PPUSH
29188: LD_VAR 0 10
29192: PPUSH
29193: CALL_OW 115
29197: GO 29260
29199: LD_INT 2
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29229
29207: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29208: LD_VAR 0 1
29212: PPUSH
29213: LD_VAR 0 6
29217: PPUSH
29218: LD_VAR 0 7
29222: PPUSH
29223: CALL_OW 153
29227: GO 29260
29229: LD_INT 3
29231: DOUBLE
29232: EQUAL
29233: IFTRUE 29237
29235: GO 29259
29237: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29238: LD_VAR 0 1
29242: PPUSH
29243: LD_VAR 0 6
29247: PPUSH
29248: LD_VAR 0 7
29252: PPUSH
29253: CALL_OW 154
29257: GO 29260
29259: POP
// end ;
29260: LD_VAR 0 2
29264: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29265: LD_INT 0
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
// if not unit or not building then
29273: LD_VAR 0 1
29277: NOT
29278: PUSH
29279: LD_VAR 0 2
29283: NOT
29284: OR
29285: IFFALSE 29289
// exit ;
29287: GO 29447
// x := GetX ( building ) ;
29289: LD_ADDR_VAR 0 5
29293: PUSH
29294: LD_VAR 0 2
29298: PPUSH
29299: CALL_OW 250
29303: ST_TO_ADDR
// y := GetY ( building ) ;
29304: LD_ADDR_VAR 0 6
29308: PUSH
29309: LD_VAR 0 2
29313: PPUSH
29314: CALL_OW 251
29318: ST_TO_ADDR
// for i = 0 to 5 do
29319: LD_ADDR_VAR 0 4
29323: PUSH
29324: DOUBLE
29325: LD_INT 0
29327: DEC
29328: ST_TO_ADDR
29329: LD_INT 5
29331: PUSH
29332: FOR_TO
29333: IFFALSE 29445
// begin _x := ShiftX ( x , i , 3 ) ;
29335: LD_ADDR_VAR 0 7
29339: PUSH
29340: LD_VAR 0 5
29344: PPUSH
29345: LD_VAR 0 4
29349: PPUSH
29350: LD_INT 3
29352: PPUSH
29353: CALL_OW 272
29357: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29358: LD_ADDR_VAR 0 8
29362: PUSH
29363: LD_VAR 0 6
29367: PPUSH
29368: LD_VAR 0 4
29372: PPUSH
29373: LD_INT 3
29375: PPUSH
29376: CALL_OW 273
29380: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29381: LD_VAR 0 7
29385: PPUSH
29386: LD_VAR 0 8
29390: PPUSH
29391: CALL_OW 488
29395: NOT
29396: IFFALSE 29400
// continue ;
29398: GO 29332
// if HexInfo ( _x , _y ) = 0 then
29400: LD_VAR 0 7
29404: PPUSH
29405: LD_VAR 0 8
29409: PPUSH
29410: CALL_OW 428
29414: PUSH
29415: LD_INT 0
29417: EQUAL
29418: IFFALSE 29443
// begin ComMoveXY ( unit , _x , _y ) ;
29420: LD_VAR 0 1
29424: PPUSH
29425: LD_VAR 0 7
29429: PPUSH
29430: LD_VAR 0 8
29434: PPUSH
29435: CALL_OW 111
// exit ;
29439: POP
29440: POP
29441: GO 29447
// end ; end ;
29443: GO 29332
29445: POP
29446: POP
// end ;
29447: LD_VAR 0 3
29451: RET
// export function ScanBase ( side , base_area ) ; begin
29452: LD_INT 0
29454: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29455: LD_ADDR_VAR 0 3
29459: PUSH
29460: LD_VAR 0 2
29464: PPUSH
29465: LD_INT 81
29467: PUSH
29468: LD_VAR 0 1
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PPUSH
29477: CALL_OW 70
29481: ST_TO_ADDR
// end ;
29482: LD_VAR 0 3
29486: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29487: LD_INT 0
29489: PPUSH
29490: PPUSH
29491: PPUSH
29492: PPUSH
// result := false ;
29493: LD_ADDR_VAR 0 2
29497: PUSH
29498: LD_INT 0
29500: ST_TO_ADDR
// side := GetSide ( unit ) ;
29501: LD_ADDR_VAR 0 3
29505: PUSH
29506: LD_VAR 0 1
29510: PPUSH
29511: CALL_OW 255
29515: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29516: LD_ADDR_VAR 0 4
29520: PUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: CALL_OW 248
29530: ST_TO_ADDR
// case nat of 1 :
29531: LD_VAR 0 4
29535: PUSH
29536: LD_INT 1
29538: DOUBLE
29539: EQUAL
29540: IFTRUE 29544
29542: GO 29555
29544: POP
// tech := tech_lassight ; 2 :
29545: LD_ADDR_VAR 0 5
29549: PUSH
29550: LD_INT 12
29552: ST_TO_ADDR
29553: GO 29594
29555: LD_INT 2
29557: DOUBLE
29558: EQUAL
29559: IFTRUE 29563
29561: GO 29574
29563: POP
// tech := tech_mortar ; 3 :
29564: LD_ADDR_VAR 0 5
29568: PUSH
29569: LD_INT 41
29571: ST_TO_ADDR
29572: GO 29594
29574: LD_INT 3
29576: DOUBLE
29577: EQUAL
29578: IFTRUE 29582
29580: GO 29593
29582: POP
// tech := tech_bazooka ; end ;
29583: LD_ADDR_VAR 0 5
29587: PUSH
29588: LD_INT 44
29590: ST_TO_ADDR
29591: GO 29594
29593: POP
// if Researched ( side , tech ) then
29594: LD_VAR 0 3
29598: PPUSH
29599: LD_VAR 0 5
29603: PPUSH
29604: CALL_OW 325
29608: IFFALSE 29635
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29610: LD_ADDR_VAR 0 2
29614: PUSH
29615: LD_INT 5
29617: PUSH
29618: LD_INT 8
29620: PUSH
29621: LD_INT 9
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: PUSH
29629: LD_VAR 0 4
29633: ARRAY
29634: ST_TO_ADDR
// end ;
29635: LD_VAR 0 2
29639: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29640: LD_INT 0
29642: PPUSH
29643: PPUSH
29644: PPUSH
// if not mines then
29645: LD_VAR 0 2
29649: NOT
29650: IFFALSE 29654
// exit ;
29652: GO 29798
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29654: LD_ADDR_VAR 0 5
29658: PUSH
29659: LD_INT 81
29661: PUSH
29662: LD_VAR 0 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 21
29676: PUSH
29677: LD_INT 3
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PPUSH
29692: CALL_OW 69
29696: ST_TO_ADDR
// for i in mines do
29697: LD_ADDR_VAR 0 4
29701: PUSH
29702: LD_VAR 0 2
29706: PUSH
29707: FOR_IN
29708: IFFALSE 29796
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29710: LD_VAR 0 4
29714: PUSH
29715: LD_INT 1
29717: ARRAY
29718: PPUSH
29719: LD_VAR 0 4
29723: PUSH
29724: LD_INT 2
29726: ARRAY
29727: PPUSH
29728: CALL_OW 458
29732: NOT
29733: IFFALSE 29737
// continue ;
29735: GO 29707
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29737: LD_VAR 0 4
29741: PUSH
29742: LD_INT 1
29744: ARRAY
29745: PPUSH
29746: LD_VAR 0 4
29750: PUSH
29751: LD_INT 2
29753: ARRAY
29754: PPUSH
29755: CALL_OW 428
29759: PUSH
29760: LD_VAR 0 5
29764: IN
29765: IFFALSE 29794
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29767: LD_VAR 0 4
29771: PUSH
29772: LD_INT 1
29774: ARRAY
29775: PPUSH
29776: LD_VAR 0 4
29780: PUSH
29781: LD_INT 2
29783: ARRAY
29784: PPUSH
29785: LD_VAR 0 1
29789: PPUSH
29790: CALL_OW 456
// end ;
29794: GO 29707
29796: POP
29797: POP
// end ;
29798: LD_VAR 0 3
29802: RET
// export function Count ( array ) ; var i ; begin
29803: LD_INT 0
29805: PPUSH
29806: PPUSH
// result := 0 ;
29807: LD_ADDR_VAR 0 2
29811: PUSH
29812: LD_INT 0
29814: ST_TO_ADDR
// for i in array do
29815: LD_ADDR_VAR 0 3
29819: PUSH
29820: LD_VAR 0 1
29824: PUSH
29825: FOR_IN
29826: IFFALSE 29850
// if i then
29828: LD_VAR 0 3
29832: IFFALSE 29848
// result := result + 1 ;
29834: LD_ADDR_VAR 0 2
29838: PUSH
29839: LD_VAR 0 2
29843: PUSH
29844: LD_INT 1
29846: PLUS
29847: ST_TO_ADDR
29848: GO 29825
29850: POP
29851: POP
// end ;
29852: LD_VAR 0 2
29856: RET
// export function IsEmpty ( building ) ; begin
29857: LD_INT 0
29859: PPUSH
// if not building then
29860: LD_VAR 0 1
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 29912
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29869: LD_ADDR_VAR 0 2
29873: PUSH
29874: LD_VAR 0 1
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_VAR 0 1
29886: PPUSH
29887: CALL_OW 255
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 58
29898: PUSH
29899: EMPTY
29900: LIST
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PPUSH
29906: CALL_OW 69
29910: IN
29911: ST_TO_ADDR
// end ;
29912: LD_VAR 0 2
29916: RET
// export function IsNotFull ( building ) ; begin
29917: LD_INT 0
29919: PPUSH
// if not building then
29920: LD_VAR 0 1
29924: NOT
29925: IFFALSE 29929
// exit ;
29927: GO 29948
// result := UnitsInside ( building ) < 6 ;
29929: LD_ADDR_VAR 0 2
29933: PUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: CALL_OW 313
29943: PUSH
29944: LD_INT 6
29946: LESS
29947: ST_TO_ADDR
// end ;
29948: LD_VAR 0 2
29952: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
29958: PPUSH
// tmp := [ ] ;
29959: LD_ADDR_VAR 0 3
29963: PUSH
29964: EMPTY
29965: ST_TO_ADDR
// list := [ ] ;
29966: LD_ADDR_VAR 0 5
29970: PUSH
29971: EMPTY
29972: ST_TO_ADDR
// for i = 16 to 25 do
29973: LD_ADDR_VAR 0 4
29977: PUSH
29978: DOUBLE
29979: LD_INT 16
29981: DEC
29982: ST_TO_ADDR
29983: LD_INT 25
29985: PUSH
29986: FOR_TO
29987: IFFALSE 30060
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: LD_VAR 0 3
29998: PUSH
29999: LD_INT 22
30001: PUSH
30002: LD_VAR 0 1
30006: PPUSH
30007: CALL_OW 255
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 91
30018: PUSH
30019: LD_VAR 0 1
30023: PUSH
30024: LD_INT 6
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 30
30034: PUSH
30035: LD_VAR 0 4
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: PPUSH
30052: CALL_OW 69
30056: ADD
30057: ST_TO_ADDR
30058: GO 29986
30060: POP
30061: POP
// for i = 1 to tmp do
30062: LD_ADDR_VAR 0 4
30066: PUSH
30067: DOUBLE
30068: LD_INT 1
30070: DEC
30071: ST_TO_ADDR
30072: LD_VAR 0 3
30076: PUSH
30077: FOR_TO
30078: IFFALSE 30166
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30080: LD_ADDR_VAR 0 5
30084: PUSH
30085: LD_VAR 0 5
30089: PUSH
30090: LD_VAR 0 3
30094: PUSH
30095: LD_VAR 0 4
30099: ARRAY
30100: PPUSH
30101: CALL_OW 266
30105: PUSH
30106: LD_VAR 0 3
30110: PUSH
30111: LD_VAR 0 4
30115: ARRAY
30116: PPUSH
30117: CALL_OW 250
30121: PUSH
30122: LD_VAR 0 3
30126: PUSH
30127: LD_VAR 0 4
30131: ARRAY
30132: PPUSH
30133: CALL_OW 251
30137: PUSH
30138: LD_VAR 0 3
30142: PUSH
30143: LD_VAR 0 4
30147: ARRAY
30148: PPUSH
30149: CALL_OW 254
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: PUSH
30160: EMPTY
30161: LIST
30162: ADD
30163: ST_TO_ADDR
30164: GO 30077
30166: POP
30167: POP
// result := list ;
30168: LD_ADDR_VAR 0 2
30172: PUSH
30173: LD_VAR 0 5
30177: ST_TO_ADDR
// end ;
30178: LD_VAR 0 2
30182: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30183: LD_INT 0
30185: PPUSH
30186: PPUSH
30187: PPUSH
30188: PPUSH
30189: PPUSH
30190: PPUSH
30191: PPUSH
// if not factory then
30192: LD_VAR 0 1
30196: NOT
30197: IFFALSE 30201
// exit ;
30199: GO 30794
// if control = control_apeman then
30201: LD_VAR 0 4
30205: PUSH
30206: LD_INT 5
30208: EQUAL
30209: IFFALSE 30318
// begin tmp := UnitsInside ( factory ) ;
30211: LD_ADDR_VAR 0 8
30215: PUSH
30216: LD_VAR 0 1
30220: PPUSH
30221: CALL_OW 313
30225: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30226: LD_VAR 0 8
30230: PPUSH
30231: LD_INT 25
30233: PUSH
30234: LD_INT 12
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PPUSH
30241: CALL_OW 72
30245: NOT
30246: IFFALSE 30256
// control := control_manual ;
30248: LD_ADDR_VAR 0 4
30252: PUSH
30253: LD_INT 1
30255: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30256: LD_ADDR_VAR 0 8
30260: PUSH
30261: LD_VAR 0 1
30265: PPUSH
30266: CALL 29953 0 1
30270: ST_TO_ADDR
// if tmp then
30271: LD_VAR 0 8
30275: IFFALSE 30318
// begin for i in tmp do
30277: LD_ADDR_VAR 0 7
30281: PUSH
30282: LD_VAR 0 8
30286: PUSH
30287: FOR_IN
30288: IFFALSE 30316
// if i [ 1 ] = b_ext_radio then
30290: LD_VAR 0 7
30294: PUSH
30295: LD_INT 1
30297: ARRAY
30298: PUSH
30299: LD_INT 22
30301: EQUAL
30302: IFFALSE 30314
// begin control := control_remote ;
30304: LD_ADDR_VAR 0 4
30308: PUSH
30309: LD_INT 2
30311: ST_TO_ADDR
// break ;
30312: GO 30316
// end ;
30314: GO 30287
30316: POP
30317: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30318: LD_VAR 0 1
30322: PPUSH
30323: LD_VAR 0 2
30327: PPUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: LD_VAR 0 4
30337: PPUSH
30338: LD_VAR 0 5
30342: PPUSH
30343: CALL_OW 448
30347: IFFALSE 30382
// begin result := [ chassis , engine , control , weapon ] ;
30349: LD_ADDR_VAR 0 6
30353: PUSH
30354: LD_VAR 0 2
30358: PUSH
30359: LD_VAR 0 3
30363: PUSH
30364: LD_VAR 0 4
30368: PUSH
30369: LD_VAR 0 5
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
// exit ;
30380: GO 30794
// end ; _chassis := AvailableChassisList ( factory ) ;
30382: LD_ADDR_VAR 0 9
30386: PUSH
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL_OW 475
30396: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30397: LD_ADDR_VAR 0 11
30401: PUSH
30402: LD_VAR 0 1
30406: PPUSH
30407: CALL_OW 476
30411: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30412: LD_ADDR_VAR 0 12
30416: PUSH
30417: LD_VAR 0 1
30421: PPUSH
30422: CALL_OW 477
30426: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30427: LD_ADDR_VAR 0 10
30431: PUSH
30432: LD_VAR 0 1
30436: PPUSH
30437: CALL_OW 478
30441: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30442: LD_VAR 0 9
30446: NOT
30447: PUSH
30448: LD_VAR 0 11
30452: NOT
30453: OR
30454: PUSH
30455: LD_VAR 0 12
30459: NOT
30460: OR
30461: PUSH
30462: LD_VAR 0 10
30466: NOT
30467: OR
30468: IFFALSE 30503
// begin result := [ chassis , engine , control , weapon ] ;
30470: LD_ADDR_VAR 0 6
30474: PUSH
30475: LD_VAR 0 2
30479: PUSH
30480: LD_VAR 0 3
30484: PUSH
30485: LD_VAR 0 4
30489: PUSH
30490: LD_VAR 0 5
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
// exit ;
30501: GO 30794
// end ; if not chassis in _chassis then
30503: LD_VAR 0 2
30507: PUSH
30508: LD_VAR 0 9
30512: IN
30513: NOT
30514: IFFALSE 30540
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30516: LD_ADDR_VAR 0 2
30520: PUSH
30521: LD_VAR 0 9
30525: PUSH
30526: LD_INT 1
30528: PPUSH
30529: LD_VAR 0 9
30533: PPUSH
30534: CALL_OW 12
30538: ARRAY
30539: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30540: LD_VAR 0 2
30544: PPUSH
30545: LD_VAR 0 3
30549: PPUSH
30550: CALL 30799 0 2
30554: NOT
30555: IFFALSE 30614
// repeat engine := _engine [ 1 ] ;
30557: LD_ADDR_VAR 0 3
30561: PUSH
30562: LD_VAR 0 11
30566: PUSH
30567: LD_INT 1
30569: ARRAY
30570: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30571: LD_ADDR_VAR 0 11
30575: PUSH
30576: LD_VAR 0 11
30580: PPUSH
30581: LD_INT 1
30583: PPUSH
30584: CALL_OW 3
30588: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30589: LD_VAR 0 2
30593: PPUSH
30594: LD_VAR 0 3
30598: PPUSH
30599: CALL 30799 0 2
30603: PUSH
30604: LD_VAR 0 11
30608: PUSH
30609: EMPTY
30610: EQUAL
30611: OR
30612: IFFALSE 30557
// if not control in _control then
30614: LD_VAR 0 4
30618: PUSH
30619: LD_VAR 0 12
30623: IN
30624: NOT
30625: IFFALSE 30651
// control := _control [ rand ( 1 , _control ) ] ;
30627: LD_ADDR_VAR 0 4
30631: PUSH
30632: LD_VAR 0 12
30636: PUSH
30637: LD_INT 1
30639: PPUSH
30640: LD_VAR 0 12
30644: PPUSH
30645: CALL_OW 12
30649: ARRAY
30650: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30651: LD_VAR 0 2
30655: PPUSH
30656: LD_VAR 0 5
30660: PPUSH
30661: CALL 31019 0 2
30665: NOT
30666: IFFALSE 30725
// repeat weapon := _weapon [ 1 ] ;
30668: LD_ADDR_VAR 0 5
30672: PUSH
30673: LD_VAR 0 10
30677: PUSH
30678: LD_INT 1
30680: ARRAY
30681: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30682: LD_ADDR_VAR 0 10
30686: PUSH
30687: LD_VAR 0 10
30691: PPUSH
30692: LD_INT 1
30694: PPUSH
30695: CALL_OW 3
30699: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30700: LD_VAR 0 2
30704: PPUSH
30705: LD_VAR 0 5
30709: PPUSH
30710: CALL 31019 0 2
30714: PUSH
30715: LD_VAR 0 10
30719: PUSH
30720: EMPTY
30721: EQUAL
30722: OR
30723: IFFALSE 30668
// result := [ ] ;
30725: LD_ADDR_VAR 0 6
30729: PUSH
30730: EMPTY
30731: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30732: LD_VAR 0 1
30736: PPUSH
30737: LD_VAR 0 2
30741: PPUSH
30742: LD_VAR 0 3
30746: PPUSH
30747: LD_VAR 0 4
30751: PPUSH
30752: LD_VAR 0 5
30756: PPUSH
30757: CALL_OW 448
30761: IFFALSE 30794
// result := [ chassis , engine , control , weapon ] ;
30763: LD_ADDR_VAR 0 6
30767: PUSH
30768: LD_VAR 0 2
30772: PUSH
30773: LD_VAR 0 3
30777: PUSH
30778: LD_VAR 0 4
30782: PUSH
30783: LD_VAR 0 5
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: ST_TO_ADDR
// end ;
30794: LD_VAR 0 6
30798: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30799: LD_INT 0
30801: PPUSH
// if not chassis or not engine then
30802: LD_VAR 0 1
30806: NOT
30807: PUSH
30808: LD_VAR 0 2
30812: NOT
30813: OR
30814: IFFALSE 30818
// exit ;
30816: GO 31014
// case engine of engine_solar :
30818: LD_VAR 0 2
30822: PUSH
30823: LD_INT 2
30825: DOUBLE
30826: EQUAL
30827: IFTRUE 30831
30829: GO 30869
30831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30832: LD_ADDR_VAR 0 3
30836: PUSH
30837: LD_INT 11
30839: PUSH
30840: LD_INT 12
30842: PUSH
30843: LD_INT 13
30845: PUSH
30846: LD_INT 14
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: LD_INT 3
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
30867: GO 30998
30869: LD_INT 1
30871: DOUBLE
30872: EQUAL
30873: IFTRUE 30877
30875: GO 30939
30877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30878: LD_ADDR_VAR 0 3
30882: PUSH
30883: LD_INT 11
30885: PUSH
30886: LD_INT 12
30888: PUSH
30889: LD_INT 13
30891: PUSH
30892: LD_INT 14
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: LD_INT 4
30906: PUSH
30907: LD_INT 5
30909: PUSH
30910: LD_INT 21
30912: PUSH
30913: LD_INT 23
30915: PUSH
30916: LD_INT 22
30918: PUSH
30919: LD_INT 24
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: ST_TO_ADDR
30937: GO 30998
30939: LD_INT 3
30941: DOUBLE
30942: EQUAL
30943: IFTRUE 30947
30945: GO 30997
30947: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30948: LD_ADDR_VAR 0 3
30952: PUSH
30953: LD_INT 13
30955: PUSH
30956: LD_INT 14
30958: PUSH
30959: LD_INT 2
30961: PUSH
30962: LD_INT 3
30964: PUSH
30965: LD_INT 4
30967: PUSH
30968: LD_INT 5
30970: PUSH
30971: LD_INT 21
30973: PUSH
30974: LD_INT 22
30976: PUSH
30977: LD_INT 23
30979: PUSH
30980: LD_INT 24
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: ST_TO_ADDR
30995: GO 30998
30997: POP
// result := ( chassis in result ) ;
30998: LD_ADDR_VAR 0 3
31002: PUSH
31003: LD_VAR 0 1
31007: PUSH
31008: LD_VAR 0 3
31012: IN
31013: ST_TO_ADDR
// end ;
31014: LD_VAR 0 3
31018: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31019: LD_INT 0
31021: PPUSH
// if not chassis or not weapon then
31022: LD_VAR 0 1
31026: NOT
31027: PUSH
31028: LD_VAR 0 2
31032: NOT
31033: OR
31034: IFFALSE 31038
// exit ;
31036: GO 32100
// case weapon of us_machine_gun :
31038: LD_VAR 0 2
31042: PUSH
31043: LD_INT 2
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31081
31051: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: LD_INT 2
31062: PUSH
31063: LD_INT 3
31065: PUSH
31066: LD_INT 4
31068: PUSH
31069: LD_INT 5
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: ST_TO_ADDR
31079: GO 32084
31081: LD_INT 3
31083: DOUBLE
31084: EQUAL
31085: IFTRUE 31089
31087: GO 31119
31089: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31090: LD_ADDR_VAR 0 3
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 4
31106: PUSH
31107: LD_INT 5
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: ST_TO_ADDR
31117: GO 32084
31119: LD_INT 11
31121: DOUBLE
31122: EQUAL
31123: IFTRUE 31127
31125: GO 31157
31127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31128: LD_ADDR_VAR 0 3
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: LD_INT 4
31144: PUSH
31145: LD_INT 5
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: ST_TO_ADDR
31155: GO 32084
31157: LD_INT 4
31159: DOUBLE
31160: EQUAL
31161: IFTRUE 31165
31163: GO 31191
31165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31166: LD_ADDR_VAR 0 3
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: LD_INT 4
31179: PUSH
31180: LD_INT 5
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
31189: GO 32084
31191: LD_INT 5
31193: DOUBLE
31194: EQUAL
31195: IFTRUE 31199
31197: GO 31225
31199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31200: LD_ADDR_VAR 0 3
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: LD_INT 4
31213: PUSH
31214: LD_INT 5
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: ST_TO_ADDR
31223: GO 32084
31225: LD_INT 9
31227: DOUBLE
31228: EQUAL
31229: IFTRUE 31233
31231: GO 31259
31233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31234: LD_ADDR_VAR 0 3
31238: PUSH
31239: LD_INT 2
31241: PUSH
31242: LD_INT 3
31244: PUSH
31245: LD_INT 4
31247: PUSH
31248: LD_INT 5
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: ST_TO_ADDR
31257: GO 32084
31259: LD_INT 7
31261: DOUBLE
31262: EQUAL
31263: IFTRUE 31267
31265: GO 31293
31267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31268: LD_ADDR_VAR 0 3
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: LD_INT 3
31278: PUSH
31279: LD_INT 4
31281: PUSH
31282: LD_INT 5
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
31291: GO 32084
31293: LD_INT 12
31295: DOUBLE
31296: EQUAL
31297: IFTRUE 31301
31299: GO 31327
31301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31302: LD_ADDR_VAR 0 3
31306: PUSH
31307: LD_INT 2
31309: PUSH
31310: LD_INT 3
31312: PUSH
31313: LD_INT 4
31315: PUSH
31316: LD_INT 5
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: ST_TO_ADDR
31325: GO 32084
31327: LD_INT 13
31329: DOUBLE
31330: EQUAL
31331: IFTRUE 31335
31333: GO 31361
31335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31336: LD_ADDR_VAR 0 3
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: LD_INT 3
31346: PUSH
31347: LD_INT 4
31349: PUSH
31350: LD_INT 5
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: ST_TO_ADDR
31359: GO 32084
31361: LD_INT 14
31363: DOUBLE
31364: EQUAL
31365: IFTRUE 31369
31367: GO 31387
31369: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31370: LD_ADDR_VAR 0 3
31374: PUSH
31375: LD_INT 4
31377: PUSH
31378: LD_INT 5
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: ST_TO_ADDR
31385: GO 32084
31387: LD_INT 6
31389: DOUBLE
31390: EQUAL
31391: IFTRUE 31395
31393: GO 31413
31395: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31396: LD_ADDR_VAR 0 3
31400: PUSH
31401: LD_INT 4
31403: PUSH
31404: LD_INT 5
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: ST_TO_ADDR
31411: GO 32084
31413: LD_INT 10
31415: DOUBLE
31416: EQUAL
31417: IFTRUE 31421
31419: GO 31439
31421: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31422: LD_ADDR_VAR 0 3
31426: PUSH
31427: LD_INT 4
31429: PUSH
31430: LD_INT 5
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: ST_TO_ADDR
31437: GO 32084
31439: LD_INT 22
31441: DOUBLE
31442: EQUAL
31443: IFTRUE 31447
31445: GO 31473
31447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31448: LD_ADDR_VAR 0 3
31452: PUSH
31453: LD_INT 11
31455: PUSH
31456: LD_INT 12
31458: PUSH
31459: LD_INT 13
31461: PUSH
31462: LD_INT 14
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: ST_TO_ADDR
31471: GO 32084
31473: LD_INT 23
31475: DOUBLE
31476: EQUAL
31477: IFTRUE 31481
31479: GO 31507
31481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31482: LD_ADDR_VAR 0 3
31486: PUSH
31487: LD_INT 11
31489: PUSH
31490: LD_INT 12
31492: PUSH
31493: LD_INT 13
31495: PUSH
31496: LD_INT 14
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: ST_TO_ADDR
31505: GO 32084
31507: LD_INT 24
31509: DOUBLE
31510: EQUAL
31511: IFTRUE 31515
31513: GO 31541
31515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31516: LD_ADDR_VAR 0 3
31520: PUSH
31521: LD_INT 11
31523: PUSH
31524: LD_INT 12
31526: PUSH
31527: LD_INT 13
31529: PUSH
31530: LD_INT 14
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: ST_TO_ADDR
31539: GO 32084
31541: LD_INT 30
31543: DOUBLE
31544: EQUAL
31545: IFTRUE 31549
31547: GO 31575
31549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31550: LD_ADDR_VAR 0 3
31554: PUSH
31555: LD_INT 11
31557: PUSH
31558: LD_INT 12
31560: PUSH
31561: LD_INT 13
31563: PUSH
31564: LD_INT 14
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: ST_TO_ADDR
31573: GO 32084
31575: LD_INT 25
31577: DOUBLE
31578: EQUAL
31579: IFTRUE 31583
31581: GO 31601
31583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31584: LD_ADDR_VAR 0 3
31588: PUSH
31589: LD_INT 13
31591: PUSH
31592: LD_INT 14
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: ST_TO_ADDR
31599: GO 32084
31601: LD_INT 27
31603: DOUBLE
31604: EQUAL
31605: IFTRUE 31609
31607: GO 31627
31609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31610: LD_ADDR_VAR 0 3
31614: PUSH
31615: LD_INT 13
31617: PUSH
31618: LD_INT 14
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: ST_TO_ADDR
31625: GO 32084
31627: LD_EXP 118
31631: DOUBLE
31632: EQUAL
31633: IFTRUE 31637
31635: GO 31663
31637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31638: LD_ADDR_VAR 0 3
31642: PUSH
31643: LD_INT 11
31645: PUSH
31646: LD_INT 12
31648: PUSH
31649: LD_INT 13
31651: PUSH
31652: LD_INT 14
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: ST_TO_ADDR
31661: GO 32084
31663: LD_INT 28
31665: DOUBLE
31666: EQUAL
31667: IFTRUE 31671
31669: GO 31689
31671: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31672: LD_ADDR_VAR 0 3
31676: PUSH
31677: LD_INT 13
31679: PUSH
31680: LD_INT 14
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: ST_TO_ADDR
31687: GO 32084
31689: LD_INT 29
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31715
31697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31698: LD_ADDR_VAR 0 3
31702: PUSH
31703: LD_INT 13
31705: PUSH
31706: LD_INT 14
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: ST_TO_ADDR
31713: GO 32084
31715: LD_INT 31
31717: DOUBLE
31718: EQUAL
31719: IFTRUE 31723
31721: GO 31741
31723: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31724: LD_ADDR_VAR 0 3
31728: PUSH
31729: LD_INT 13
31731: PUSH
31732: LD_INT 14
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: ST_TO_ADDR
31739: GO 32084
31741: LD_INT 26
31743: DOUBLE
31744: EQUAL
31745: IFTRUE 31749
31747: GO 31767
31749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31750: LD_ADDR_VAR 0 3
31754: PUSH
31755: LD_INT 13
31757: PUSH
31758: LD_INT 14
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: ST_TO_ADDR
31765: GO 32084
31767: LD_INT 42
31769: DOUBLE
31770: EQUAL
31771: IFTRUE 31775
31773: GO 31801
31775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31776: LD_ADDR_VAR 0 3
31780: PUSH
31781: LD_INT 21
31783: PUSH
31784: LD_INT 22
31786: PUSH
31787: LD_INT 23
31789: PUSH
31790: LD_INT 24
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: ST_TO_ADDR
31799: GO 32084
31801: LD_INT 43
31803: DOUBLE
31804: EQUAL
31805: IFTRUE 31809
31807: GO 31835
31809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31810: LD_ADDR_VAR 0 3
31814: PUSH
31815: LD_INT 21
31817: PUSH
31818: LD_INT 22
31820: PUSH
31821: LD_INT 23
31823: PUSH
31824: LD_INT 24
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: ST_TO_ADDR
31833: GO 32084
31835: LD_INT 44
31837: DOUBLE
31838: EQUAL
31839: IFTRUE 31843
31841: GO 31869
31843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31844: LD_ADDR_VAR 0 3
31848: PUSH
31849: LD_INT 21
31851: PUSH
31852: LD_INT 22
31854: PUSH
31855: LD_INT 23
31857: PUSH
31858: LD_INT 24
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: ST_TO_ADDR
31867: GO 32084
31869: LD_INT 45
31871: DOUBLE
31872: EQUAL
31873: IFTRUE 31877
31875: GO 31903
31877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31878: LD_ADDR_VAR 0 3
31882: PUSH
31883: LD_INT 21
31885: PUSH
31886: LD_INT 22
31888: PUSH
31889: LD_INT 23
31891: PUSH
31892: LD_INT 24
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: ST_TO_ADDR
31901: GO 32084
31903: LD_INT 49
31905: DOUBLE
31906: EQUAL
31907: IFTRUE 31911
31909: GO 31937
31911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31912: LD_ADDR_VAR 0 3
31916: PUSH
31917: LD_INT 21
31919: PUSH
31920: LD_INT 22
31922: PUSH
31923: LD_INT 23
31925: PUSH
31926: LD_INT 24
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: ST_TO_ADDR
31935: GO 32084
31937: LD_INT 51
31939: DOUBLE
31940: EQUAL
31941: IFTRUE 31945
31943: GO 31971
31945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31946: LD_ADDR_VAR 0 3
31950: PUSH
31951: LD_INT 21
31953: PUSH
31954: LD_INT 22
31956: PUSH
31957: LD_INT 23
31959: PUSH
31960: LD_INT 24
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: ST_TO_ADDR
31969: GO 32084
31971: LD_INT 52
31973: DOUBLE
31974: EQUAL
31975: IFTRUE 31979
31977: GO 32005
31979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31980: LD_ADDR_VAR 0 3
31984: PUSH
31985: LD_INT 21
31987: PUSH
31988: LD_INT 22
31990: PUSH
31991: LD_INT 23
31993: PUSH
31994: LD_INT 24
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: ST_TO_ADDR
32003: GO 32084
32005: LD_INT 53
32007: DOUBLE
32008: EQUAL
32009: IFTRUE 32013
32011: GO 32031
32013: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32014: LD_ADDR_VAR 0 3
32018: PUSH
32019: LD_INT 23
32021: PUSH
32022: LD_INT 24
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: ST_TO_ADDR
32029: GO 32084
32031: LD_INT 46
32033: DOUBLE
32034: EQUAL
32035: IFTRUE 32039
32037: GO 32057
32039: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32040: LD_ADDR_VAR 0 3
32044: PUSH
32045: LD_INT 23
32047: PUSH
32048: LD_INT 24
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: ST_TO_ADDR
32055: GO 32084
32057: LD_INT 47
32059: DOUBLE
32060: EQUAL
32061: IFTRUE 32065
32063: GO 32083
32065: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32066: LD_ADDR_VAR 0 3
32070: PUSH
32071: LD_INT 23
32073: PUSH
32074: LD_INT 24
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: ST_TO_ADDR
32081: GO 32084
32083: POP
// result := ( chassis in result ) ;
32084: LD_ADDR_VAR 0 3
32088: PUSH
32089: LD_VAR 0 1
32093: PUSH
32094: LD_VAR 0 3
32098: IN
32099: ST_TO_ADDR
// end ;
32100: LD_VAR 0 3
32104: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32105: LD_INT 0
32107: PPUSH
32108: PPUSH
32109: PPUSH
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
// result := array ;
32114: LD_ADDR_VAR 0 5
32118: PUSH
32119: LD_VAR 0 1
32123: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32124: LD_VAR 0 1
32128: NOT
32129: PUSH
32130: LD_VAR 0 2
32134: NOT
32135: OR
32136: PUSH
32137: LD_VAR 0 3
32141: NOT
32142: OR
32143: PUSH
32144: LD_VAR 0 2
32148: PUSH
32149: LD_VAR 0 1
32153: GREATER
32154: OR
32155: PUSH
32156: LD_VAR 0 3
32160: PUSH
32161: LD_VAR 0 1
32165: GREATER
32166: OR
32167: IFFALSE 32171
// exit ;
32169: GO 32467
// if direction then
32171: LD_VAR 0 4
32175: IFFALSE 32239
// begin d := 1 ;
32177: LD_ADDR_VAR 0 9
32181: PUSH
32182: LD_INT 1
32184: ST_TO_ADDR
// if i_from > i_to then
32185: LD_VAR 0 2
32189: PUSH
32190: LD_VAR 0 3
32194: GREATER
32195: IFFALSE 32221
// length := ( array - i_from ) + i_to else
32197: LD_ADDR_VAR 0 11
32201: PUSH
32202: LD_VAR 0 1
32206: PUSH
32207: LD_VAR 0 2
32211: MINUS
32212: PUSH
32213: LD_VAR 0 3
32217: PLUS
32218: ST_TO_ADDR
32219: GO 32237
// length := i_to - i_from ;
32221: LD_ADDR_VAR 0 11
32225: PUSH
32226: LD_VAR 0 3
32230: PUSH
32231: LD_VAR 0 2
32235: MINUS
32236: ST_TO_ADDR
// end else
32237: GO 32300
// begin d := - 1 ;
32239: LD_ADDR_VAR 0 9
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: ST_TO_ADDR
// if i_from > i_to then
32248: LD_VAR 0 2
32252: PUSH
32253: LD_VAR 0 3
32257: GREATER
32258: IFFALSE 32278
// length := i_from - i_to else
32260: LD_ADDR_VAR 0 11
32264: PUSH
32265: LD_VAR 0 2
32269: PUSH
32270: LD_VAR 0 3
32274: MINUS
32275: ST_TO_ADDR
32276: GO 32300
// length := ( array - i_to ) + i_from ;
32278: LD_ADDR_VAR 0 11
32282: PUSH
32283: LD_VAR 0 1
32287: PUSH
32288: LD_VAR 0 3
32292: MINUS
32293: PUSH
32294: LD_VAR 0 2
32298: PLUS
32299: ST_TO_ADDR
// end ; if not length then
32300: LD_VAR 0 11
32304: NOT
32305: IFFALSE 32309
// exit ;
32307: GO 32467
// tmp := array ;
32309: LD_ADDR_VAR 0 10
32313: PUSH
32314: LD_VAR 0 1
32318: ST_TO_ADDR
// for i = 1 to length do
32319: LD_ADDR_VAR 0 6
32323: PUSH
32324: DOUBLE
32325: LD_INT 1
32327: DEC
32328: ST_TO_ADDR
32329: LD_VAR 0 11
32333: PUSH
32334: FOR_TO
32335: IFFALSE 32455
// begin for j = 1 to array do
32337: LD_ADDR_VAR 0 7
32341: PUSH
32342: DOUBLE
32343: LD_INT 1
32345: DEC
32346: ST_TO_ADDR
32347: LD_VAR 0 1
32351: PUSH
32352: FOR_TO
32353: IFFALSE 32441
// begin k := j + d ;
32355: LD_ADDR_VAR 0 8
32359: PUSH
32360: LD_VAR 0 7
32364: PUSH
32365: LD_VAR 0 9
32369: PLUS
32370: ST_TO_ADDR
// if k > array then
32371: LD_VAR 0 8
32375: PUSH
32376: LD_VAR 0 1
32380: GREATER
32381: IFFALSE 32391
// k := 1 ;
32383: LD_ADDR_VAR 0 8
32387: PUSH
32388: LD_INT 1
32390: ST_TO_ADDR
// if not k then
32391: LD_VAR 0 8
32395: NOT
32396: IFFALSE 32408
// k := array ;
32398: LD_ADDR_VAR 0 8
32402: PUSH
32403: LD_VAR 0 1
32407: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32408: LD_ADDR_VAR 0 10
32412: PUSH
32413: LD_VAR 0 10
32417: PPUSH
32418: LD_VAR 0 8
32422: PPUSH
32423: LD_VAR 0 1
32427: PUSH
32428: LD_VAR 0 7
32432: ARRAY
32433: PPUSH
32434: CALL_OW 1
32438: ST_TO_ADDR
// end ;
32439: GO 32352
32441: POP
32442: POP
// array := tmp ;
32443: LD_ADDR_VAR 0 1
32447: PUSH
32448: LD_VAR 0 10
32452: ST_TO_ADDR
// end ;
32453: GO 32334
32455: POP
32456: POP
// result := array ;
32457: LD_ADDR_VAR 0 5
32461: PUSH
32462: LD_VAR 0 1
32466: ST_TO_ADDR
// end ;
32467: LD_VAR 0 5
32471: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32472: LD_INT 0
32474: PPUSH
32475: PPUSH
// result := 0 ;
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: LD_INT 0
32483: ST_TO_ADDR
// if not array or not value in array then
32484: LD_VAR 0 1
32488: NOT
32489: PUSH
32490: LD_VAR 0 2
32494: PUSH
32495: LD_VAR 0 1
32499: IN
32500: NOT
32501: OR
32502: IFFALSE 32506
// exit ;
32504: GO 32560
// for i = 1 to array do
32506: LD_ADDR_VAR 0 4
32510: PUSH
32511: DOUBLE
32512: LD_INT 1
32514: DEC
32515: ST_TO_ADDR
32516: LD_VAR 0 1
32520: PUSH
32521: FOR_TO
32522: IFFALSE 32558
// if value = array [ i ] then
32524: LD_VAR 0 2
32528: PUSH
32529: LD_VAR 0 1
32533: PUSH
32534: LD_VAR 0 4
32538: ARRAY
32539: EQUAL
32540: IFFALSE 32556
// begin result := i ;
32542: LD_ADDR_VAR 0 3
32546: PUSH
32547: LD_VAR 0 4
32551: ST_TO_ADDR
// exit ;
32552: POP
32553: POP
32554: GO 32560
// end ;
32556: GO 32521
32558: POP
32559: POP
// end ;
32560: LD_VAR 0 3
32564: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32565: LD_INT 0
32567: PPUSH
// vc_chassis := chassis ;
32568: LD_ADDR_OWVAR 37
32572: PUSH
32573: LD_VAR 0 1
32577: ST_TO_ADDR
// vc_engine := engine ;
32578: LD_ADDR_OWVAR 39
32582: PUSH
32583: LD_VAR 0 2
32587: ST_TO_ADDR
// vc_control := control ;
32588: LD_ADDR_OWVAR 38
32592: PUSH
32593: LD_VAR 0 3
32597: ST_TO_ADDR
// vc_weapon := weapon ;
32598: LD_ADDR_OWVAR 40
32602: PUSH
32603: LD_VAR 0 4
32607: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32608: LD_ADDR_OWVAR 41
32612: PUSH
32613: LD_VAR 0 5
32617: ST_TO_ADDR
// end ;
32618: LD_VAR 0 6
32622: RET
// export function WantPlant ( unit ) ; var task ; begin
32623: LD_INT 0
32625: PPUSH
32626: PPUSH
// result := false ;
32627: LD_ADDR_VAR 0 2
32631: PUSH
32632: LD_INT 0
32634: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32635: LD_ADDR_VAR 0 3
32639: PUSH
32640: LD_VAR 0 1
32644: PPUSH
32645: CALL_OW 437
32649: ST_TO_ADDR
// if task then
32650: LD_VAR 0 3
32654: IFFALSE 32682
// if task [ 1 ] [ 1 ] = p then
32656: LD_VAR 0 3
32660: PUSH
32661: LD_INT 1
32663: ARRAY
32664: PUSH
32665: LD_INT 1
32667: ARRAY
32668: PUSH
32669: LD_STRING p
32671: EQUAL
32672: IFFALSE 32682
// result := true ;
32674: LD_ADDR_VAR 0 2
32678: PUSH
32679: LD_INT 1
32681: ST_TO_ADDR
// end ;
32682: LD_VAR 0 2
32686: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32687: LD_INT 0
32689: PPUSH
32690: PPUSH
32691: PPUSH
32692: PPUSH
// if pos < 1 then
32693: LD_VAR 0 2
32697: PUSH
32698: LD_INT 1
32700: LESS
32701: IFFALSE 32705
// exit ;
32703: GO 33008
// if pos = 1 then
32705: LD_VAR 0 2
32709: PUSH
32710: LD_INT 1
32712: EQUAL
32713: IFFALSE 32746
// result := Replace ( arr , pos [ 1 ] , value ) else
32715: LD_ADDR_VAR 0 4
32719: PUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: LD_VAR 0 2
32729: PUSH
32730: LD_INT 1
32732: ARRAY
32733: PPUSH
32734: LD_VAR 0 3
32738: PPUSH
32739: CALL_OW 1
32743: ST_TO_ADDR
32744: GO 33008
// begin tmp := arr ;
32746: LD_ADDR_VAR 0 6
32750: PUSH
32751: LD_VAR 0 1
32755: ST_TO_ADDR
// s_arr := [ tmp ] ;
32756: LD_ADDR_VAR 0 7
32760: PUSH
32761: LD_VAR 0 6
32765: PUSH
32766: EMPTY
32767: LIST
32768: ST_TO_ADDR
// for i = 1 to pos - 1 do
32769: LD_ADDR_VAR 0 5
32773: PUSH
32774: DOUBLE
32775: LD_INT 1
32777: DEC
32778: ST_TO_ADDR
32779: LD_VAR 0 2
32783: PUSH
32784: LD_INT 1
32786: MINUS
32787: PUSH
32788: FOR_TO
32789: IFFALSE 32834
// begin tmp := tmp [ pos [ i ] ] ;
32791: LD_ADDR_VAR 0 6
32795: PUSH
32796: LD_VAR 0 6
32800: PUSH
32801: LD_VAR 0 2
32805: PUSH
32806: LD_VAR 0 5
32810: ARRAY
32811: ARRAY
32812: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32813: LD_ADDR_VAR 0 7
32817: PUSH
32818: LD_VAR 0 7
32822: PUSH
32823: LD_VAR 0 6
32827: PUSH
32828: EMPTY
32829: LIST
32830: ADD
32831: ST_TO_ADDR
// end ;
32832: GO 32788
32834: POP
32835: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32836: LD_ADDR_VAR 0 6
32840: PUSH
32841: LD_VAR 0 6
32845: PPUSH
32846: LD_VAR 0 2
32850: PUSH
32851: LD_VAR 0 2
32855: ARRAY
32856: PPUSH
32857: LD_VAR 0 3
32861: PPUSH
32862: CALL_OW 1
32866: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32867: LD_ADDR_VAR 0 7
32871: PUSH
32872: LD_VAR 0 7
32876: PPUSH
32877: LD_VAR 0 7
32881: PPUSH
32882: LD_VAR 0 6
32886: PPUSH
32887: CALL_OW 1
32891: ST_TO_ADDR
// for i = s_arr downto 2 do
32892: LD_ADDR_VAR 0 5
32896: PUSH
32897: DOUBLE
32898: LD_VAR 0 7
32902: INC
32903: ST_TO_ADDR
32904: LD_INT 2
32906: PUSH
32907: FOR_DOWNTO
32908: IFFALSE 32992
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32910: LD_ADDR_VAR 0 6
32914: PUSH
32915: LD_VAR 0 7
32919: PUSH
32920: LD_VAR 0 5
32924: PUSH
32925: LD_INT 1
32927: MINUS
32928: ARRAY
32929: PPUSH
32930: LD_VAR 0 2
32934: PUSH
32935: LD_VAR 0 5
32939: PUSH
32940: LD_INT 1
32942: MINUS
32943: ARRAY
32944: PPUSH
32945: LD_VAR 0 7
32949: PUSH
32950: LD_VAR 0 5
32954: ARRAY
32955: PPUSH
32956: CALL_OW 1
32960: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32961: LD_ADDR_VAR 0 7
32965: PUSH
32966: LD_VAR 0 7
32970: PPUSH
32971: LD_VAR 0 5
32975: PUSH
32976: LD_INT 1
32978: MINUS
32979: PPUSH
32980: LD_VAR 0 6
32984: PPUSH
32985: CALL_OW 1
32989: ST_TO_ADDR
// end ;
32990: GO 32907
32992: POP
32993: POP
// result := s_arr [ 1 ] ;
32994: LD_ADDR_VAR 0 4
32998: PUSH
32999: LD_VAR 0 7
33003: PUSH
33004: LD_INT 1
33006: ARRAY
33007: ST_TO_ADDR
// end ; end ;
33008: LD_VAR 0 4
33012: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33013: LD_INT 0
33015: PPUSH
33016: PPUSH
// if not list then
33017: LD_VAR 0 1
33021: NOT
33022: IFFALSE 33026
// exit ;
33024: GO 33117
// i := list [ pos1 ] ;
33026: LD_ADDR_VAR 0 5
33030: PUSH
33031: LD_VAR 0 1
33035: PUSH
33036: LD_VAR 0 2
33040: ARRAY
33041: ST_TO_ADDR
// if not i then
33042: LD_VAR 0 5
33046: NOT
33047: IFFALSE 33051
// exit ;
33049: GO 33117
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33051: LD_ADDR_VAR 0 1
33055: PUSH
33056: LD_VAR 0 1
33060: PPUSH
33061: LD_VAR 0 2
33065: PPUSH
33066: LD_VAR 0 1
33070: PUSH
33071: LD_VAR 0 3
33075: ARRAY
33076: PPUSH
33077: CALL_OW 1
33081: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33082: LD_ADDR_VAR 0 1
33086: PUSH
33087: LD_VAR 0 1
33091: PPUSH
33092: LD_VAR 0 3
33096: PPUSH
33097: LD_VAR 0 5
33101: PPUSH
33102: CALL_OW 1
33106: ST_TO_ADDR
// result := list ;
33107: LD_ADDR_VAR 0 4
33111: PUSH
33112: LD_VAR 0 1
33116: ST_TO_ADDR
// end ;
33117: LD_VAR 0 4
33121: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33122: LD_INT 0
33124: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33125: LD_ADDR_VAR 0 5
33129: PUSH
33130: LD_VAR 0 1
33134: PPUSH
33135: CALL_OW 250
33139: PPUSH
33140: LD_VAR 0 1
33144: PPUSH
33145: CALL_OW 251
33149: PPUSH
33150: LD_VAR 0 2
33154: PPUSH
33155: LD_VAR 0 3
33159: PPUSH
33160: LD_VAR 0 4
33164: PPUSH
33165: CALL 33175 0 5
33169: ST_TO_ADDR
// end ;
33170: LD_VAR 0 5
33174: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33175: LD_INT 0
33177: PPUSH
33178: PPUSH
33179: PPUSH
33180: PPUSH
// if not list then
33181: LD_VAR 0 3
33185: NOT
33186: IFFALSE 33190
// exit ;
33188: GO 33578
// result := [ ] ;
33190: LD_ADDR_VAR 0 6
33194: PUSH
33195: EMPTY
33196: ST_TO_ADDR
// for i in list do
33197: LD_ADDR_VAR 0 7
33201: PUSH
33202: LD_VAR 0 3
33206: PUSH
33207: FOR_IN
33208: IFFALSE 33410
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33210: LD_ADDR_VAR 0 9
33214: PUSH
33215: LD_VAR 0 7
33219: PPUSH
33220: LD_VAR 0 1
33224: PPUSH
33225: LD_VAR 0 2
33229: PPUSH
33230: CALL_OW 297
33234: ST_TO_ADDR
// if not result then
33235: LD_VAR 0 6
33239: NOT
33240: IFFALSE 33266
// result := [ [ i , tmp ] ] else
33242: LD_ADDR_VAR 0 6
33246: PUSH
33247: LD_VAR 0 7
33251: PUSH
33252: LD_VAR 0 9
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: EMPTY
33262: LIST
33263: ST_TO_ADDR
33264: GO 33408
// begin if result [ result ] [ 2 ] < tmp then
33266: LD_VAR 0 6
33270: PUSH
33271: LD_VAR 0 6
33275: ARRAY
33276: PUSH
33277: LD_INT 2
33279: ARRAY
33280: PUSH
33281: LD_VAR 0 9
33285: LESS
33286: IFFALSE 33328
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33288: LD_ADDR_VAR 0 6
33292: PUSH
33293: LD_VAR 0 6
33297: PPUSH
33298: LD_VAR 0 6
33302: PUSH
33303: LD_INT 1
33305: PLUS
33306: PPUSH
33307: LD_VAR 0 7
33311: PUSH
33312: LD_VAR 0 9
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PPUSH
33321: CALL_OW 2
33325: ST_TO_ADDR
33326: GO 33408
// for j = 1 to result do
33328: LD_ADDR_VAR 0 8
33332: PUSH
33333: DOUBLE
33334: LD_INT 1
33336: DEC
33337: ST_TO_ADDR
33338: LD_VAR 0 6
33342: PUSH
33343: FOR_TO
33344: IFFALSE 33406
// begin if tmp < result [ j ] [ 2 ] then
33346: LD_VAR 0 9
33350: PUSH
33351: LD_VAR 0 6
33355: PUSH
33356: LD_VAR 0 8
33360: ARRAY
33361: PUSH
33362: LD_INT 2
33364: ARRAY
33365: LESS
33366: IFFALSE 33404
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33368: LD_ADDR_VAR 0 6
33372: PUSH
33373: LD_VAR 0 6
33377: PPUSH
33378: LD_VAR 0 8
33382: PPUSH
33383: LD_VAR 0 7
33387: PUSH
33388: LD_VAR 0 9
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PPUSH
33397: CALL_OW 2
33401: ST_TO_ADDR
// break ;
33402: GO 33406
// end ; end ;
33404: GO 33343
33406: POP
33407: POP
// end ; end ;
33408: GO 33207
33410: POP
33411: POP
// if result and not asc then
33412: LD_VAR 0 6
33416: PUSH
33417: LD_VAR 0 4
33421: NOT
33422: AND
33423: IFFALSE 33498
// begin tmp := result ;
33425: LD_ADDR_VAR 0 9
33429: PUSH
33430: LD_VAR 0 6
33434: ST_TO_ADDR
// for i = tmp downto 1 do
33435: LD_ADDR_VAR 0 7
33439: PUSH
33440: DOUBLE
33441: LD_VAR 0 9
33445: INC
33446: ST_TO_ADDR
33447: LD_INT 1
33449: PUSH
33450: FOR_DOWNTO
33451: IFFALSE 33496
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33453: LD_ADDR_VAR 0 6
33457: PUSH
33458: LD_VAR 0 6
33462: PPUSH
33463: LD_VAR 0 9
33467: PUSH
33468: LD_VAR 0 7
33472: MINUS
33473: PUSH
33474: LD_INT 1
33476: PLUS
33477: PPUSH
33478: LD_VAR 0 9
33482: PUSH
33483: LD_VAR 0 7
33487: ARRAY
33488: PPUSH
33489: CALL_OW 1
33493: ST_TO_ADDR
33494: GO 33450
33496: POP
33497: POP
// end ; tmp := [ ] ;
33498: LD_ADDR_VAR 0 9
33502: PUSH
33503: EMPTY
33504: ST_TO_ADDR
// if mode then
33505: LD_VAR 0 5
33509: IFFALSE 33578
// begin for i = 1 to result do
33511: LD_ADDR_VAR 0 7
33515: PUSH
33516: DOUBLE
33517: LD_INT 1
33519: DEC
33520: ST_TO_ADDR
33521: LD_VAR 0 6
33525: PUSH
33526: FOR_TO
33527: IFFALSE 33566
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33529: LD_ADDR_VAR 0 9
33533: PUSH
33534: LD_VAR 0 9
33538: PPUSH
33539: LD_VAR 0 7
33543: PPUSH
33544: LD_VAR 0 6
33548: PUSH
33549: LD_VAR 0 7
33553: ARRAY
33554: PUSH
33555: LD_INT 1
33557: ARRAY
33558: PPUSH
33559: CALL_OW 1
33563: ST_TO_ADDR
33564: GO 33526
33566: POP
33567: POP
// result := tmp ;
33568: LD_ADDR_VAR 0 6
33572: PUSH
33573: LD_VAR 0 9
33577: ST_TO_ADDR
// end ; end ;
33578: LD_VAR 0 6
33582: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33583: LD_INT 0
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33591: LD_ADDR_VAR 0 5
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
// if not x or not y then
33613: LD_VAR 0 2
33617: NOT
33618: PUSH
33619: LD_VAR 0 3
33623: NOT
33624: OR
33625: IFFALSE 33629
// exit ;
33627: GO 35281
// if not range then
33629: LD_VAR 0 4
33633: NOT
33634: IFFALSE 33644
// range := 10 ;
33636: LD_ADDR_VAR 0 4
33640: PUSH
33641: LD_INT 10
33643: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33644: LD_ADDR_VAR 0 8
33648: PUSH
33649: LD_INT 81
33651: PUSH
33652: LD_VAR 0 1
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 92
33663: PUSH
33664: LD_VAR 0 2
33668: PUSH
33669: LD_VAR 0 3
33673: PUSH
33674: LD_VAR 0 4
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 3
33687: PUSH
33688: LD_INT 21
33690: PUSH
33691: LD_INT 3
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: PPUSH
33707: CALL_OW 69
33711: ST_TO_ADDR
// if not tmp then
33712: LD_VAR 0 8
33716: NOT
33717: IFFALSE 33721
// exit ;
33719: GO 35281
// for i in tmp do
33721: LD_ADDR_VAR 0 6
33725: PUSH
33726: LD_VAR 0 8
33730: PUSH
33731: FOR_IN
33732: IFFALSE 35256
// begin points := [ 0 , 0 , 0 ] ;
33734: LD_ADDR_VAR 0 9
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: ST_TO_ADDR
// bpoints := 1 ;
33753: LD_ADDR_VAR 0 10
33757: PUSH
33758: LD_INT 1
33760: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33761: LD_VAR 0 6
33765: PPUSH
33766: CALL_OW 247
33770: PUSH
33771: LD_INT 1
33773: DOUBLE
33774: EQUAL
33775: IFTRUE 33779
33777: GO 34357
33779: POP
// begin if GetClass ( i ) = 1 then
33780: LD_VAR 0 6
33784: PPUSH
33785: CALL_OW 257
33789: PUSH
33790: LD_INT 1
33792: EQUAL
33793: IFFALSE 33814
// points := [ 10 , 5 , 3 ] ;
33795: LD_ADDR_VAR 0 9
33799: PUSH
33800: LD_INT 10
33802: PUSH
33803: LD_INT 5
33805: PUSH
33806: LD_INT 3
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33814: LD_VAR 0 6
33818: PPUSH
33819: CALL_OW 257
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: LD_INT 4
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: IN
33838: IFFALSE 33859
// points := [ 3 , 2 , 1 ] ;
33840: LD_ADDR_VAR 0 9
33844: PUSH
33845: LD_INT 3
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33859: LD_VAR 0 6
33863: PPUSH
33864: CALL_OW 257
33868: PUSH
33869: LD_INT 5
33871: EQUAL
33872: IFFALSE 33893
// points := [ 130 , 5 , 2 ] ;
33874: LD_ADDR_VAR 0 9
33878: PUSH
33879: LD_INT 130
33881: PUSH
33882: LD_INT 5
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: LIST
33892: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33893: LD_VAR 0 6
33897: PPUSH
33898: CALL_OW 257
33902: PUSH
33903: LD_INT 8
33905: EQUAL
33906: IFFALSE 33927
// points := [ 35 , 35 , 30 ] ;
33908: LD_ADDR_VAR 0 9
33912: PUSH
33913: LD_INT 35
33915: PUSH
33916: LD_INT 35
33918: PUSH
33919: LD_INT 30
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33927: LD_VAR 0 6
33931: PPUSH
33932: CALL_OW 257
33936: PUSH
33937: LD_INT 9
33939: EQUAL
33940: IFFALSE 33961
// points := [ 20 , 55 , 40 ] ;
33942: LD_ADDR_VAR 0 9
33946: PUSH
33947: LD_INT 20
33949: PUSH
33950: LD_INT 55
33952: PUSH
33953: LD_INT 40
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33961: LD_VAR 0 6
33965: PPUSH
33966: CALL_OW 257
33970: PUSH
33971: LD_INT 12
33973: PUSH
33974: LD_INT 16
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: IN
33981: IFFALSE 34002
// points := [ 5 , 3 , 2 ] ;
33983: LD_ADDR_VAR 0 9
33987: PUSH
33988: LD_INT 5
33990: PUSH
33991: LD_INT 3
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34002: LD_VAR 0 6
34006: PPUSH
34007: CALL_OW 257
34011: PUSH
34012: LD_INT 17
34014: EQUAL
34015: IFFALSE 34036
// points := [ 100 , 50 , 75 ] ;
34017: LD_ADDR_VAR 0 9
34021: PUSH
34022: LD_INT 100
34024: PUSH
34025: LD_INT 50
34027: PUSH
34028: LD_INT 75
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: LIST
34035: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34036: LD_VAR 0 6
34040: PPUSH
34041: CALL_OW 257
34045: PUSH
34046: LD_INT 15
34048: EQUAL
34049: IFFALSE 34070
// points := [ 10 , 5 , 3 ] ;
34051: LD_ADDR_VAR 0 9
34055: PUSH
34056: LD_INT 10
34058: PUSH
34059: LD_INT 5
34061: PUSH
34062: LD_INT 3
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34070: LD_VAR 0 6
34074: PPUSH
34075: CALL_OW 257
34079: PUSH
34080: LD_INT 14
34082: EQUAL
34083: IFFALSE 34104
// points := [ 10 , 0 , 0 ] ;
34085: LD_ADDR_VAR 0 9
34089: PUSH
34090: LD_INT 10
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: LIST
34103: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34104: LD_VAR 0 6
34108: PPUSH
34109: CALL_OW 257
34113: PUSH
34114: LD_INT 11
34116: EQUAL
34117: IFFALSE 34138
// points := [ 30 , 10 , 5 ] ;
34119: LD_ADDR_VAR 0 9
34123: PUSH
34124: LD_INT 30
34126: PUSH
34127: LD_INT 10
34129: PUSH
34130: LD_INT 5
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34138: LD_VAR 0 1
34142: PPUSH
34143: LD_INT 5
34145: PPUSH
34146: CALL_OW 321
34150: PUSH
34151: LD_INT 2
34153: EQUAL
34154: IFFALSE 34171
// bpoints := bpoints * 1.8 ;
34156: LD_ADDR_VAR 0 10
34160: PUSH
34161: LD_VAR 0 10
34165: PUSH
34166: LD_REAL  1.80000000000000E+0000
34169: MUL
34170: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34171: LD_VAR 0 6
34175: PPUSH
34176: CALL_OW 257
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: LD_INT 3
34189: PUSH
34190: LD_INT 4
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: IN
34199: PUSH
34200: LD_VAR 0 1
34204: PPUSH
34205: LD_INT 51
34207: PPUSH
34208: CALL_OW 321
34212: PUSH
34213: LD_INT 2
34215: EQUAL
34216: AND
34217: IFFALSE 34234
// bpoints := bpoints * 1.2 ;
34219: LD_ADDR_VAR 0 10
34223: PUSH
34224: LD_VAR 0 10
34228: PUSH
34229: LD_REAL  1.20000000000000E+0000
34232: MUL
34233: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34234: LD_VAR 0 6
34238: PPUSH
34239: CALL_OW 257
34243: PUSH
34244: LD_INT 5
34246: PUSH
34247: LD_INT 7
34249: PUSH
34250: LD_INT 9
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: IN
34258: PUSH
34259: LD_VAR 0 1
34263: PPUSH
34264: LD_INT 52
34266: PPUSH
34267: CALL_OW 321
34271: PUSH
34272: LD_INT 2
34274: EQUAL
34275: AND
34276: IFFALSE 34293
// bpoints := bpoints * 1.5 ;
34278: LD_ADDR_VAR 0 10
34282: PUSH
34283: LD_VAR 0 10
34287: PUSH
34288: LD_REAL  1.50000000000000E+0000
34291: MUL
34292: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34293: LD_VAR 0 1
34297: PPUSH
34298: LD_INT 66
34300: PPUSH
34301: CALL_OW 321
34305: PUSH
34306: LD_INT 2
34308: EQUAL
34309: IFFALSE 34326
// bpoints := bpoints * 1.1 ;
34311: LD_ADDR_VAR 0 10
34315: PUSH
34316: LD_VAR 0 10
34320: PUSH
34321: LD_REAL  1.10000000000000E+0000
34324: MUL
34325: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34326: LD_ADDR_VAR 0 10
34330: PUSH
34331: LD_VAR 0 10
34335: PUSH
34336: LD_VAR 0 6
34340: PPUSH
34341: LD_INT 1
34343: PPUSH
34344: CALL_OW 259
34348: PUSH
34349: LD_REAL  1.15000000000000E+0000
34352: MUL
34353: MUL
34354: ST_TO_ADDR
// end ; unit_vehicle :
34355: GO 35185
34357: LD_INT 2
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34365
34363: GO 35173
34365: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34366: LD_VAR 0 6
34370: PPUSH
34371: CALL_OW 264
34375: PUSH
34376: LD_INT 2
34378: PUSH
34379: LD_INT 42
34381: PUSH
34382: LD_INT 24
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: LIST
34389: IN
34390: IFFALSE 34411
// points := [ 25 , 5 , 3 ] ;
34392: LD_ADDR_VAR 0 9
34396: PUSH
34397: LD_INT 25
34399: PUSH
34400: LD_INT 5
34402: PUSH
34403: LD_INT 3
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: LIST
34410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34411: LD_VAR 0 6
34415: PPUSH
34416: CALL_OW 264
34420: PUSH
34421: LD_INT 4
34423: PUSH
34424: LD_INT 43
34426: PUSH
34427: LD_INT 25
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: LIST
34434: IN
34435: IFFALSE 34456
// points := [ 40 , 15 , 5 ] ;
34437: LD_ADDR_VAR 0 9
34441: PUSH
34442: LD_INT 40
34444: PUSH
34445: LD_INT 15
34447: PUSH
34448: LD_INT 5
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34456: LD_VAR 0 6
34460: PPUSH
34461: CALL_OW 264
34465: PUSH
34466: LD_INT 3
34468: PUSH
34469: LD_INT 23
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: IN
34476: IFFALSE 34497
// points := [ 7 , 25 , 8 ] ;
34478: LD_ADDR_VAR 0 9
34482: PUSH
34483: LD_INT 7
34485: PUSH
34486: LD_INT 25
34488: PUSH
34489: LD_INT 8
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34497: LD_VAR 0 6
34501: PPUSH
34502: CALL_OW 264
34506: PUSH
34507: LD_INT 5
34509: PUSH
34510: LD_INT 27
34512: PUSH
34513: LD_INT 44
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: IN
34521: IFFALSE 34542
// points := [ 14 , 50 , 16 ] ;
34523: LD_ADDR_VAR 0 9
34527: PUSH
34528: LD_INT 14
34530: PUSH
34531: LD_INT 50
34533: PUSH
34534: LD_INT 16
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: LIST
34541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34542: LD_VAR 0 6
34546: PPUSH
34547: CALL_OW 264
34551: PUSH
34552: LD_INT 6
34554: PUSH
34555: LD_INT 46
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: IN
34562: IFFALSE 34583
// points := [ 32 , 120 , 70 ] ;
34564: LD_ADDR_VAR 0 9
34568: PUSH
34569: LD_INT 32
34571: PUSH
34572: LD_INT 120
34574: PUSH
34575: LD_INT 70
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34583: LD_VAR 0 6
34587: PPUSH
34588: CALL_OW 264
34592: PUSH
34593: LD_INT 7
34595: PUSH
34596: LD_INT 28
34598: PUSH
34599: LD_INT 45
34601: PUSH
34602: LD_EXP 118
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: IN
34613: IFFALSE 34634
// points := [ 35 , 20 , 45 ] ;
34615: LD_ADDR_VAR 0 9
34619: PUSH
34620: LD_INT 35
34622: PUSH
34623: LD_INT 20
34625: PUSH
34626: LD_INT 45
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 264
34643: PUSH
34644: LD_INT 47
34646: PUSH
34647: EMPTY
34648: LIST
34649: IN
34650: IFFALSE 34671
// points := [ 67 , 45 , 75 ] ;
34652: LD_ADDR_VAR 0 9
34656: PUSH
34657: LD_INT 67
34659: PUSH
34660: LD_INT 45
34662: PUSH
34663: LD_INT 75
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34671: LD_VAR 0 6
34675: PPUSH
34676: CALL_OW 264
34680: PUSH
34681: LD_INT 26
34683: PUSH
34684: EMPTY
34685: LIST
34686: IN
34687: IFFALSE 34708
// points := [ 120 , 30 , 80 ] ;
34689: LD_ADDR_VAR 0 9
34693: PUSH
34694: LD_INT 120
34696: PUSH
34697: LD_INT 30
34699: PUSH
34700: LD_INT 80
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: LIST
34707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34708: LD_VAR 0 6
34712: PPUSH
34713: CALL_OW 264
34717: PUSH
34718: LD_INT 22
34720: PUSH
34721: EMPTY
34722: LIST
34723: IN
34724: IFFALSE 34745
// points := [ 40 , 1 , 1 ] ;
34726: LD_ADDR_VAR 0 9
34730: PUSH
34731: LD_INT 40
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34745: LD_VAR 0 6
34749: PPUSH
34750: CALL_OW 264
34754: PUSH
34755: LD_INT 29
34757: PUSH
34758: EMPTY
34759: LIST
34760: IN
34761: IFFALSE 34782
// points := [ 70 , 200 , 400 ] ;
34763: LD_ADDR_VAR 0 9
34767: PUSH
34768: LD_INT 70
34770: PUSH
34771: LD_INT 200
34773: PUSH
34774: LD_INT 400
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34782: LD_VAR 0 6
34786: PPUSH
34787: CALL_OW 264
34791: PUSH
34792: LD_INT 14
34794: PUSH
34795: LD_INT 53
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: IN
34802: IFFALSE 34823
// points := [ 40 , 10 , 20 ] ;
34804: LD_ADDR_VAR 0 9
34808: PUSH
34809: LD_INT 40
34811: PUSH
34812: LD_INT 10
34814: PUSH
34815: LD_INT 20
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34823: LD_VAR 0 6
34827: PPUSH
34828: CALL_OW 264
34832: PUSH
34833: LD_INT 9
34835: PUSH
34836: EMPTY
34837: LIST
34838: IN
34839: IFFALSE 34860
// points := [ 5 , 70 , 20 ] ;
34841: LD_ADDR_VAR 0 9
34845: PUSH
34846: LD_INT 5
34848: PUSH
34849: LD_INT 70
34851: PUSH
34852: LD_INT 20
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34860: LD_VAR 0 6
34864: PPUSH
34865: CALL_OW 264
34869: PUSH
34870: LD_INT 10
34872: PUSH
34873: EMPTY
34874: LIST
34875: IN
34876: IFFALSE 34897
// points := [ 35 , 110 , 70 ] ;
34878: LD_ADDR_VAR 0 9
34882: PUSH
34883: LD_INT 35
34885: PUSH
34886: LD_INT 110
34888: PUSH
34889: LD_INT 70
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34897: LD_VAR 0 6
34901: PPUSH
34902: CALL_OW 265
34906: PUSH
34907: LD_INT 25
34909: EQUAL
34910: IFFALSE 34931
// points := [ 80 , 65 , 100 ] ;
34912: LD_ADDR_VAR 0 9
34916: PUSH
34917: LD_INT 80
34919: PUSH
34920: LD_INT 65
34922: PUSH
34923: LD_INT 100
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34931: LD_VAR 0 6
34935: PPUSH
34936: CALL_OW 263
34940: PUSH
34941: LD_INT 1
34943: EQUAL
34944: IFFALSE 34979
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34946: LD_ADDR_VAR 0 10
34950: PUSH
34951: LD_VAR 0 10
34955: PUSH
34956: LD_VAR 0 6
34960: PPUSH
34961: CALL_OW 311
34965: PPUSH
34966: LD_INT 3
34968: PPUSH
34969: CALL_OW 259
34973: PUSH
34974: LD_INT 4
34976: MUL
34977: MUL
34978: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34979: LD_VAR 0 6
34983: PPUSH
34984: CALL_OW 263
34988: PUSH
34989: LD_INT 2
34991: EQUAL
34992: IFFALSE 35043
// begin j := IsControledBy ( i ) ;
34994: LD_ADDR_VAR 0 7
34998: PUSH
34999: LD_VAR 0 6
35003: PPUSH
35004: CALL_OW 312
35008: ST_TO_ADDR
// if j then
35009: LD_VAR 0 7
35013: IFFALSE 35043
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35015: LD_ADDR_VAR 0 10
35019: PUSH
35020: LD_VAR 0 10
35024: PUSH
35025: LD_VAR 0 7
35029: PPUSH
35030: LD_INT 3
35032: PPUSH
35033: CALL_OW 259
35037: PUSH
35038: LD_INT 3
35040: MUL
35041: MUL
35042: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35043: LD_VAR 0 6
35047: PPUSH
35048: CALL_OW 264
35052: PUSH
35053: LD_INT 5
35055: PUSH
35056: LD_INT 6
35058: PUSH
35059: LD_INT 46
35061: PUSH
35062: LD_INT 44
35064: PUSH
35065: LD_INT 47
35067: PUSH
35068: LD_INT 45
35070: PUSH
35071: LD_INT 28
35073: PUSH
35074: LD_INT 7
35076: PUSH
35077: LD_INT 27
35079: PUSH
35080: LD_INT 29
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: IN
35095: PUSH
35096: LD_VAR 0 1
35100: PPUSH
35101: LD_INT 52
35103: PPUSH
35104: CALL_OW 321
35108: PUSH
35109: LD_INT 2
35111: EQUAL
35112: AND
35113: IFFALSE 35130
// bpoints := bpoints * 1.2 ;
35115: LD_ADDR_VAR 0 10
35119: PUSH
35120: LD_VAR 0 10
35124: PUSH
35125: LD_REAL  1.20000000000000E+0000
35128: MUL
35129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35130: LD_VAR 0 6
35134: PPUSH
35135: CALL_OW 264
35139: PUSH
35140: LD_INT 6
35142: PUSH
35143: LD_INT 46
35145: PUSH
35146: LD_INT 47
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: IN
35154: IFFALSE 35171
// bpoints := bpoints * 1.2 ;
35156: LD_ADDR_VAR 0 10
35160: PUSH
35161: LD_VAR 0 10
35165: PUSH
35166: LD_REAL  1.20000000000000E+0000
35169: MUL
35170: ST_TO_ADDR
// end ; unit_building :
35171: GO 35185
35173: LD_INT 3
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35181
35179: GO 35184
35181: POP
// ; end ;
35182: GO 35185
35184: POP
// for j = 1 to 3 do
35185: LD_ADDR_VAR 0 7
35189: PUSH
35190: DOUBLE
35191: LD_INT 1
35193: DEC
35194: ST_TO_ADDR
35195: LD_INT 3
35197: PUSH
35198: FOR_TO
35199: IFFALSE 35252
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35201: LD_ADDR_VAR 0 5
35205: PUSH
35206: LD_VAR 0 5
35210: PPUSH
35211: LD_VAR 0 7
35215: PPUSH
35216: LD_VAR 0 5
35220: PUSH
35221: LD_VAR 0 7
35225: ARRAY
35226: PUSH
35227: LD_VAR 0 9
35231: PUSH
35232: LD_VAR 0 7
35236: ARRAY
35237: PUSH
35238: LD_VAR 0 10
35242: MUL
35243: PLUS
35244: PPUSH
35245: CALL_OW 1
35249: ST_TO_ADDR
35250: GO 35198
35252: POP
35253: POP
// end ;
35254: GO 33731
35256: POP
35257: POP
// result := Replace ( result , 4 , tmp ) ;
35258: LD_ADDR_VAR 0 5
35262: PUSH
35263: LD_VAR 0 5
35267: PPUSH
35268: LD_INT 4
35270: PPUSH
35271: LD_VAR 0 8
35275: PPUSH
35276: CALL_OW 1
35280: ST_TO_ADDR
// end ;
35281: LD_VAR 0 5
35285: RET
// export function DangerAtRange ( unit , range ) ; begin
35286: LD_INT 0
35288: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_VAR 0 1
35298: PPUSH
35299: CALL_OW 255
35303: PPUSH
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 250
35313: PPUSH
35314: LD_VAR 0 1
35318: PPUSH
35319: CALL_OW 251
35323: PPUSH
35324: LD_VAR 0 2
35328: PPUSH
35329: CALL 33583 0 4
35333: ST_TO_ADDR
// end ;
35334: LD_VAR 0 3
35338: RET
// export function DangerInArea ( side , area ) ; begin
35339: LD_INT 0
35341: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35342: LD_ADDR_VAR 0 3
35346: PUSH
35347: LD_VAR 0 2
35351: PPUSH
35352: LD_INT 81
35354: PUSH
35355: LD_VAR 0 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PPUSH
35364: CALL_OW 70
35368: ST_TO_ADDR
// end ;
35369: LD_VAR 0 3
35373: RET
// export function IsExtension ( b ) ; begin
35374: LD_INT 0
35376: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35377: LD_ADDR_VAR 0 2
35381: PUSH
35382: LD_VAR 0 1
35386: PUSH
35387: LD_INT 23
35389: PUSH
35390: LD_INT 20
35392: PUSH
35393: LD_INT 22
35395: PUSH
35396: LD_INT 17
35398: PUSH
35399: LD_INT 24
35401: PUSH
35402: LD_INT 21
35404: PUSH
35405: LD_INT 19
35407: PUSH
35408: LD_INT 16
35410: PUSH
35411: LD_INT 25
35413: PUSH
35414: LD_INT 18
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: IN
35429: ST_TO_ADDR
// end ;
35430: LD_VAR 0 2
35434: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35435: LD_INT 0
35437: PPUSH
35438: PPUSH
35439: PPUSH
// result := [ ] ;
35440: LD_ADDR_VAR 0 4
35444: PUSH
35445: EMPTY
35446: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35447: LD_ADDR_VAR 0 5
35451: PUSH
35452: LD_VAR 0 2
35456: PPUSH
35457: LD_INT 21
35459: PUSH
35460: LD_INT 3
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PPUSH
35467: CALL_OW 70
35471: ST_TO_ADDR
// if not tmp then
35472: LD_VAR 0 5
35476: NOT
35477: IFFALSE 35481
// exit ;
35479: GO 35545
// if checkLink then
35481: LD_VAR 0 3
35485: IFFALSE 35535
// begin for i in tmp do
35487: LD_ADDR_VAR 0 6
35491: PUSH
35492: LD_VAR 0 5
35496: PUSH
35497: FOR_IN
35498: IFFALSE 35533
// if GetBase ( i ) <> base then
35500: LD_VAR 0 6
35504: PPUSH
35505: CALL_OW 274
35509: PUSH
35510: LD_VAR 0 1
35514: NONEQUAL
35515: IFFALSE 35531
// ComLinkToBase ( base , i ) ;
35517: LD_VAR 0 1
35521: PPUSH
35522: LD_VAR 0 6
35526: PPUSH
35527: CALL_OW 169
35531: GO 35497
35533: POP
35534: POP
// end ; result := tmp ;
35535: LD_ADDR_VAR 0 4
35539: PUSH
35540: LD_VAR 0 5
35544: ST_TO_ADDR
// end ;
35545: LD_VAR 0 4
35549: RET
// export function ComComplete ( units , b ) ; var i ; begin
35550: LD_INT 0
35552: PPUSH
35553: PPUSH
// if not units then
35554: LD_VAR 0 1
35558: NOT
35559: IFFALSE 35563
// exit ;
35561: GO 35653
// for i in units do
35563: LD_ADDR_VAR 0 4
35567: PUSH
35568: LD_VAR 0 1
35572: PUSH
35573: FOR_IN
35574: IFFALSE 35651
// if BuildingStatus ( b ) = bs_build then
35576: LD_VAR 0 2
35580: PPUSH
35581: CALL_OW 461
35585: PUSH
35586: LD_INT 1
35588: EQUAL
35589: IFFALSE 35649
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35591: LD_VAR 0 4
35595: PPUSH
35596: LD_STRING h
35598: PUSH
35599: LD_VAR 0 2
35603: PPUSH
35604: CALL_OW 250
35608: PUSH
35609: LD_VAR 0 2
35613: PPUSH
35614: CALL_OW 251
35618: PUSH
35619: LD_VAR 0 2
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: PUSH
35642: EMPTY
35643: LIST
35644: PPUSH
35645: CALL_OW 446
35649: GO 35573
35651: POP
35652: POP
// end ;
35653: LD_VAR 0 3
35657: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35658: LD_INT 0
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
35664: PPUSH
35665: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35666: LD_VAR 0 1
35670: NOT
35671: PUSH
35672: LD_VAR 0 1
35676: PPUSH
35677: CALL_OW 263
35681: PUSH
35682: LD_INT 2
35684: NONEQUAL
35685: OR
35686: IFFALSE 35690
// exit ;
35688: GO 36006
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35690: LD_ADDR_VAR 0 6
35694: PUSH
35695: LD_INT 22
35697: PUSH
35698: LD_VAR 0 1
35702: PPUSH
35703: CALL_OW 255
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: LD_INT 30
35717: PUSH
35718: LD_INT 36
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 34
35727: PUSH
35728: LD_INT 31
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PPUSH
35744: CALL_OW 69
35748: ST_TO_ADDR
// if not tmp then
35749: LD_VAR 0 6
35753: NOT
35754: IFFALSE 35758
// exit ;
35756: GO 36006
// result := [ ] ;
35758: LD_ADDR_VAR 0 2
35762: PUSH
35763: EMPTY
35764: ST_TO_ADDR
// for i in tmp do
35765: LD_ADDR_VAR 0 3
35769: PUSH
35770: LD_VAR 0 6
35774: PUSH
35775: FOR_IN
35776: IFFALSE 35847
// begin t := UnitsInside ( i ) ;
35778: LD_ADDR_VAR 0 4
35782: PUSH
35783: LD_VAR 0 3
35787: PPUSH
35788: CALL_OW 313
35792: ST_TO_ADDR
// if t then
35793: LD_VAR 0 4
35797: IFFALSE 35845
// for j in t do
35799: LD_ADDR_VAR 0 7
35803: PUSH
35804: LD_VAR 0 4
35808: PUSH
35809: FOR_IN
35810: IFFALSE 35843
// result := Replace ( result , result + 1 , j ) ;
35812: LD_ADDR_VAR 0 2
35816: PUSH
35817: LD_VAR 0 2
35821: PPUSH
35822: LD_VAR 0 2
35826: PUSH
35827: LD_INT 1
35829: PLUS
35830: PPUSH
35831: LD_VAR 0 7
35835: PPUSH
35836: CALL_OW 1
35840: ST_TO_ADDR
35841: GO 35809
35843: POP
35844: POP
// end ;
35845: GO 35775
35847: POP
35848: POP
// if not result then
35849: LD_VAR 0 2
35853: NOT
35854: IFFALSE 35858
// exit ;
35856: GO 36006
// mech := result [ 1 ] ;
35858: LD_ADDR_VAR 0 5
35862: PUSH
35863: LD_VAR 0 2
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: ST_TO_ADDR
// if result > 1 then
35872: LD_VAR 0 2
35876: PUSH
35877: LD_INT 1
35879: GREATER
35880: IFFALSE 35992
// begin for i = 2 to result do
35882: LD_ADDR_VAR 0 3
35886: PUSH
35887: DOUBLE
35888: LD_INT 2
35890: DEC
35891: ST_TO_ADDR
35892: LD_VAR 0 2
35896: PUSH
35897: FOR_TO
35898: IFFALSE 35990
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35900: LD_ADDR_VAR 0 4
35904: PUSH
35905: LD_VAR 0 2
35909: PUSH
35910: LD_VAR 0 3
35914: ARRAY
35915: PPUSH
35916: LD_INT 3
35918: PPUSH
35919: CALL_OW 259
35923: PUSH
35924: LD_VAR 0 2
35928: PUSH
35929: LD_VAR 0 3
35933: ARRAY
35934: PPUSH
35935: CALL_OW 432
35939: MINUS
35940: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35941: LD_VAR 0 4
35945: PUSH
35946: LD_VAR 0 5
35950: PPUSH
35951: LD_INT 3
35953: PPUSH
35954: CALL_OW 259
35958: PUSH
35959: LD_VAR 0 5
35963: PPUSH
35964: CALL_OW 432
35968: MINUS
35969: GREATEREQUAL
35970: IFFALSE 35988
// mech := result [ i ] ;
35972: LD_ADDR_VAR 0 5
35976: PUSH
35977: LD_VAR 0 2
35981: PUSH
35982: LD_VAR 0 3
35986: ARRAY
35987: ST_TO_ADDR
// end ;
35988: GO 35897
35990: POP
35991: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35992: LD_VAR 0 1
35996: PPUSH
35997: LD_VAR 0 5
36001: PPUSH
36002: CALL_OW 135
// end ;
36006: LD_VAR 0 2
36010: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36011: LD_INT 0
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
// result := [ ] ;
36026: LD_ADDR_VAR 0 7
36030: PUSH
36031: EMPTY
36032: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 266
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: IN
36053: NOT
36054: IFFALSE 36058
// exit ;
36056: GO 37692
// if name then
36058: LD_VAR 0 3
36062: IFFALSE 36078
// SetBName ( base_dep , name ) ;
36064: LD_VAR 0 1
36068: PPUSH
36069: LD_VAR 0 3
36073: PPUSH
36074: CALL_OW 500
// base := GetBase ( base_dep ) ;
36078: LD_ADDR_VAR 0 15
36082: PUSH
36083: LD_VAR 0 1
36087: PPUSH
36088: CALL_OW 274
36092: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36093: LD_ADDR_VAR 0 16
36097: PUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: CALL_OW 255
36107: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36108: LD_ADDR_VAR 0 17
36112: PUSH
36113: LD_VAR 0 1
36117: PPUSH
36118: CALL_OW 248
36122: ST_TO_ADDR
// if sources then
36123: LD_VAR 0 5
36127: IFFALSE 36174
// for i = 1 to 3 do
36129: LD_ADDR_VAR 0 8
36133: PUSH
36134: DOUBLE
36135: LD_INT 1
36137: DEC
36138: ST_TO_ADDR
36139: LD_INT 3
36141: PUSH
36142: FOR_TO
36143: IFFALSE 36172
// AddResourceType ( base , i , sources [ i ] ) ;
36145: LD_VAR 0 15
36149: PPUSH
36150: LD_VAR 0 8
36154: PPUSH
36155: LD_VAR 0 5
36159: PUSH
36160: LD_VAR 0 8
36164: ARRAY
36165: PPUSH
36166: CALL_OW 276
36170: GO 36142
36172: POP
36173: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36174: LD_ADDR_VAR 0 18
36178: PUSH
36179: LD_VAR 0 15
36183: PPUSH
36184: LD_VAR 0 2
36188: PPUSH
36189: LD_INT 1
36191: PPUSH
36192: CALL 35435 0 3
36196: ST_TO_ADDR
// InitHc ;
36197: CALL_OW 19
// InitUc ;
36201: CALL_OW 18
// uc_side := side ;
36205: LD_ADDR_OWVAR 20
36209: PUSH
36210: LD_VAR 0 16
36214: ST_TO_ADDR
// uc_nation := nation ;
36215: LD_ADDR_OWVAR 21
36219: PUSH
36220: LD_VAR 0 17
36224: ST_TO_ADDR
// if buildings then
36225: LD_VAR 0 18
36229: IFFALSE 37551
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36231: LD_ADDR_VAR 0 19
36235: PUSH
36236: LD_VAR 0 18
36240: PPUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 30
36246: PUSH
36247: LD_INT 29
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 30
36256: PUSH
36257: LD_INT 30
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: PPUSH
36269: CALL_OW 72
36273: ST_TO_ADDR
// if tmp then
36274: LD_VAR 0 19
36278: IFFALSE 36326
// for i in tmp do
36280: LD_ADDR_VAR 0 8
36284: PUSH
36285: LD_VAR 0 19
36289: PUSH
36290: FOR_IN
36291: IFFALSE 36324
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36293: LD_VAR 0 8
36297: PPUSH
36298: CALL_OW 250
36302: PPUSH
36303: LD_VAR 0 8
36307: PPUSH
36308: CALL_OW 251
36312: PPUSH
36313: LD_VAR 0 16
36317: PPUSH
36318: CALL_OW 441
36322: GO 36290
36324: POP
36325: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36326: LD_VAR 0 18
36330: PPUSH
36331: LD_INT 2
36333: PUSH
36334: LD_INT 30
36336: PUSH
36337: LD_INT 32
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 30
36346: PUSH
36347: LD_INT 33
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: PPUSH
36359: CALL_OW 72
36363: IFFALSE 36451
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36365: LD_ADDR_VAR 0 8
36369: PUSH
36370: LD_VAR 0 18
36374: PPUSH
36375: LD_INT 2
36377: PUSH
36378: LD_INT 30
36380: PUSH
36381: LD_INT 32
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 30
36390: PUSH
36391: LD_INT 33
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: PPUSH
36403: CALL_OW 72
36407: PUSH
36408: FOR_IN
36409: IFFALSE 36449
// begin if not GetBWeapon ( i ) then
36411: LD_VAR 0 8
36415: PPUSH
36416: CALL_OW 269
36420: NOT
36421: IFFALSE 36447
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36423: LD_VAR 0 8
36427: PPUSH
36428: LD_VAR 0 8
36432: PPUSH
36433: LD_VAR 0 2
36437: PPUSH
36438: CALL 37697 0 2
36442: PPUSH
36443: CALL_OW 431
// end ;
36447: GO 36408
36449: POP
36450: POP
// end ; for i = 1 to personel do
36451: LD_ADDR_VAR 0 8
36455: PUSH
36456: DOUBLE
36457: LD_INT 1
36459: DEC
36460: ST_TO_ADDR
36461: LD_VAR 0 6
36465: PUSH
36466: FOR_TO
36467: IFFALSE 37531
// begin if i > 4 then
36469: LD_VAR 0 8
36473: PUSH
36474: LD_INT 4
36476: GREATER
36477: IFFALSE 36481
// break ;
36479: GO 37531
// case i of 1 :
36481: LD_VAR 0 8
36485: PUSH
36486: LD_INT 1
36488: DOUBLE
36489: EQUAL
36490: IFTRUE 36494
36492: GO 36574
36494: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36495: LD_ADDR_VAR 0 12
36499: PUSH
36500: LD_VAR 0 18
36504: PPUSH
36505: LD_INT 22
36507: PUSH
36508: LD_VAR 0 16
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 58
36519: PUSH
36520: EMPTY
36521: LIST
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: LD_INT 30
36528: PUSH
36529: LD_INT 32
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 30
36538: PUSH
36539: LD_INT 4
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 30
36548: PUSH
36549: LD_INT 5
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: PPUSH
36567: CALL_OW 72
36571: ST_TO_ADDR
36572: GO 36796
36574: LD_INT 2
36576: DOUBLE
36577: EQUAL
36578: IFTRUE 36582
36580: GO 36644
36582: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36583: LD_ADDR_VAR 0 12
36587: PUSH
36588: LD_VAR 0 18
36592: PPUSH
36593: LD_INT 22
36595: PUSH
36596: LD_VAR 0 16
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 30
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 30
36620: PUSH
36621: LD_INT 1
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PPUSH
36637: CALL_OW 72
36641: ST_TO_ADDR
36642: GO 36796
36644: LD_INT 3
36646: DOUBLE
36647: EQUAL
36648: IFTRUE 36652
36650: GO 36714
36652: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36653: LD_ADDR_VAR 0 12
36657: PUSH
36658: LD_VAR 0 18
36662: PPUSH
36663: LD_INT 22
36665: PUSH
36666: LD_VAR 0 16
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 30
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 30
36690: PUSH
36691: LD_INT 3
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PPUSH
36707: CALL_OW 72
36711: ST_TO_ADDR
36712: GO 36796
36714: LD_INT 4
36716: DOUBLE
36717: EQUAL
36718: IFTRUE 36722
36720: GO 36795
36722: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36723: LD_ADDR_VAR 0 12
36727: PUSH
36728: LD_VAR 0 18
36732: PPUSH
36733: LD_INT 22
36735: PUSH
36736: LD_VAR 0 16
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 2
36747: PUSH
36748: LD_INT 30
36750: PUSH
36751: LD_INT 6
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 30
36760: PUSH
36761: LD_INT 7
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 30
36770: PUSH
36771: LD_INT 8
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PPUSH
36788: CALL_OW 72
36792: ST_TO_ADDR
36793: GO 36796
36795: POP
// if i = 1 then
36796: LD_VAR 0 8
36800: PUSH
36801: LD_INT 1
36803: EQUAL
36804: IFFALSE 36915
// begin tmp := [ ] ;
36806: LD_ADDR_VAR 0 19
36810: PUSH
36811: EMPTY
36812: ST_TO_ADDR
// for j in f do
36813: LD_ADDR_VAR 0 9
36817: PUSH
36818: LD_VAR 0 12
36822: PUSH
36823: FOR_IN
36824: IFFALSE 36897
// if GetBType ( j ) = b_bunker then
36826: LD_VAR 0 9
36830: PPUSH
36831: CALL_OW 266
36835: PUSH
36836: LD_INT 32
36838: EQUAL
36839: IFFALSE 36866
// tmp := Insert ( tmp , 1 , j ) else
36841: LD_ADDR_VAR 0 19
36845: PUSH
36846: LD_VAR 0 19
36850: PPUSH
36851: LD_INT 1
36853: PPUSH
36854: LD_VAR 0 9
36858: PPUSH
36859: CALL_OW 2
36863: ST_TO_ADDR
36864: GO 36895
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36866: LD_ADDR_VAR 0 19
36870: PUSH
36871: LD_VAR 0 19
36875: PPUSH
36876: LD_VAR 0 19
36880: PUSH
36881: LD_INT 1
36883: PLUS
36884: PPUSH
36885: LD_VAR 0 9
36889: PPUSH
36890: CALL_OW 2
36894: ST_TO_ADDR
36895: GO 36823
36897: POP
36898: POP
// if tmp then
36899: LD_VAR 0 19
36903: IFFALSE 36915
// f := tmp ;
36905: LD_ADDR_VAR 0 12
36909: PUSH
36910: LD_VAR 0 19
36914: ST_TO_ADDR
// end ; x := personel [ i ] ;
36915: LD_ADDR_VAR 0 13
36919: PUSH
36920: LD_VAR 0 6
36924: PUSH
36925: LD_VAR 0 8
36929: ARRAY
36930: ST_TO_ADDR
// if x = - 1 then
36931: LD_VAR 0 13
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: EQUAL
36940: IFFALSE 37149
// begin for j in f do
36942: LD_ADDR_VAR 0 9
36946: PUSH
36947: LD_VAR 0 12
36951: PUSH
36952: FOR_IN
36953: IFFALSE 37145
// repeat InitHc ;
36955: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36959: LD_VAR 0 9
36963: PPUSH
36964: CALL_OW 266
36968: PUSH
36969: LD_INT 5
36971: EQUAL
36972: IFFALSE 37042
// begin if UnitsInside ( j ) < 3 then
36974: LD_VAR 0 9
36978: PPUSH
36979: CALL_OW 313
36983: PUSH
36984: LD_INT 3
36986: LESS
36987: IFFALSE 37023
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36989: LD_INT 0
36991: PPUSH
36992: LD_INT 5
36994: PUSH
36995: LD_INT 8
36997: PUSH
36998: LD_INT 9
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: PUSH
37006: LD_VAR 0 17
37010: ARRAY
37011: PPUSH
37012: LD_VAR 0 4
37016: PPUSH
37017: CALL_OW 380
37021: GO 37040
// PrepareHuman ( false , i , skill ) ;
37023: LD_INT 0
37025: PPUSH
37026: LD_VAR 0 8
37030: PPUSH
37031: LD_VAR 0 4
37035: PPUSH
37036: CALL_OW 380
// end else
37040: GO 37059
// PrepareHuman ( false , i , skill ) ;
37042: LD_INT 0
37044: PPUSH
37045: LD_VAR 0 8
37049: PPUSH
37050: LD_VAR 0 4
37054: PPUSH
37055: CALL_OW 380
// un := CreateHuman ;
37059: LD_ADDR_VAR 0 14
37063: PUSH
37064: CALL_OW 44
37068: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37069: LD_ADDR_VAR 0 7
37073: PUSH
37074: LD_VAR 0 7
37078: PPUSH
37079: LD_INT 1
37081: PPUSH
37082: LD_VAR 0 14
37086: PPUSH
37087: CALL_OW 2
37091: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37092: LD_VAR 0 14
37096: PPUSH
37097: LD_VAR 0 9
37101: PPUSH
37102: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37106: LD_VAR 0 9
37110: PPUSH
37111: CALL_OW 313
37115: PUSH
37116: LD_INT 6
37118: EQUAL
37119: PUSH
37120: LD_VAR 0 9
37124: PPUSH
37125: CALL_OW 266
37129: PUSH
37130: LD_INT 32
37132: PUSH
37133: LD_INT 31
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: IN
37140: OR
37141: IFFALSE 36955
37143: GO 36952
37145: POP
37146: POP
// end else
37147: GO 37529
// for j = 1 to x do
37149: LD_ADDR_VAR 0 9
37153: PUSH
37154: DOUBLE
37155: LD_INT 1
37157: DEC
37158: ST_TO_ADDR
37159: LD_VAR 0 13
37163: PUSH
37164: FOR_TO
37165: IFFALSE 37527
// begin InitHc ;
37167: CALL_OW 19
// if not f then
37171: LD_VAR 0 12
37175: NOT
37176: IFFALSE 37265
// begin PrepareHuman ( false , i , skill ) ;
37178: LD_INT 0
37180: PPUSH
37181: LD_VAR 0 8
37185: PPUSH
37186: LD_VAR 0 4
37190: PPUSH
37191: CALL_OW 380
// un := CreateHuman ;
37195: LD_ADDR_VAR 0 14
37199: PUSH
37200: CALL_OW 44
37204: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37205: LD_ADDR_VAR 0 7
37209: PUSH
37210: LD_VAR 0 7
37214: PPUSH
37215: LD_INT 1
37217: PPUSH
37218: LD_VAR 0 14
37222: PPUSH
37223: CALL_OW 2
37227: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37228: LD_VAR 0 14
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL_OW 250
37242: PPUSH
37243: LD_VAR 0 1
37247: PPUSH
37248: CALL_OW 251
37252: PPUSH
37253: LD_INT 10
37255: PPUSH
37256: LD_INT 0
37258: PPUSH
37259: CALL_OW 50
// continue ;
37263: GO 37164
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37265: LD_VAR 0 12
37269: PUSH
37270: LD_INT 1
37272: ARRAY
37273: PPUSH
37274: CALL_OW 313
37278: PUSH
37279: LD_VAR 0 12
37283: PUSH
37284: LD_INT 1
37286: ARRAY
37287: PPUSH
37288: CALL_OW 266
37292: PUSH
37293: LD_INT 32
37295: PUSH
37296: LD_INT 31
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: IN
37303: AND
37304: PUSH
37305: LD_VAR 0 12
37309: PUSH
37310: LD_INT 1
37312: ARRAY
37313: PPUSH
37314: CALL_OW 313
37318: PUSH
37319: LD_INT 6
37321: EQUAL
37322: OR
37323: IFFALSE 37343
// f := Delete ( f , 1 ) ;
37325: LD_ADDR_VAR 0 12
37329: PUSH
37330: LD_VAR 0 12
37334: PPUSH
37335: LD_INT 1
37337: PPUSH
37338: CALL_OW 3
37342: ST_TO_ADDR
// if not f then
37343: LD_VAR 0 12
37347: NOT
37348: IFFALSE 37366
// begin x := x + 2 ;
37350: LD_ADDR_VAR 0 13
37354: PUSH
37355: LD_VAR 0 13
37359: PUSH
37360: LD_INT 2
37362: PLUS
37363: ST_TO_ADDR
// continue ;
37364: GO 37164
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37366: LD_VAR 0 12
37370: PUSH
37371: LD_INT 1
37373: ARRAY
37374: PPUSH
37375: CALL_OW 266
37379: PUSH
37380: LD_INT 5
37382: EQUAL
37383: IFFALSE 37457
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37385: LD_VAR 0 12
37389: PUSH
37390: LD_INT 1
37392: ARRAY
37393: PPUSH
37394: CALL_OW 313
37398: PUSH
37399: LD_INT 3
37401: LESS
37402: IFFALSE 37438
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37404: LD_INT 0
37406: PPUSH
37407: LD_INT 5
37409: PUSH
37410: LD_INT 8
37412: PUSH
37413: LD_INT 9
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: PUSH
37421: LD_VAR 0 17
37425: ARRAY
37426: PPUSH
37427: LD_VAR 0 4
37431: PPUSH
37432: CALL_OW 380
37436: GO 37455
// PrepareHuman ( false , i , skill ) ;
37438: LD_INT 0
37440: PPUSH
37441: LD_VAR 0 8
37445: PPUSH
37446: LD_VAR 0 4
37450: PPUSH
37451: CALL_OW 380
// end else
37455: GO 37474
// PrepareHuman ( false , i , skill ) ;
37457: LD_INT 0
37459: PPUSH
37460: LD_VAR 0 8
37464: PPUSH
37465: LD_VAR 0 4
37469: PPUSH
37470: CALL_OW 380
// un := CreateHuman ;
37474: LD_ADDR_VAR 0 14
37478: PUSH
37479: CALL_OW 44
37483: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37484: LD_ADDR_VAR 0 7
37488: PUSH
37489: LD_VAR 0 7
37493: PPUSH
37494: LD_INT 1
37496: PPUSH
37497: LD_VAR 0 14
37501: PPUSH
37502: CALL_OW 2
37506: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37507: LD_VAR 0 14
37511: PPUSH
37512: LD_VAR 0 12
37516: PUSH
37517: LD_INT 1
37519: ARRAY
37520: PPUSH
37521: CALL_OW 52
// end ;
37525: GO 37164
37527: POP
37528: POP
// end ;
37529: GO 36466
37531: POP
37532: POP
// result := result ^ buildings ;
37533: LD_ADDR_VAR 0 7
37537: PUSH
37538: LD_VAR 0 7
37542: PUSH
37543: LD_VAR 0 18
37547: ADD
37548: ST_TO_ADDR
// end else
37549: GO 37692
// begin for i = 1 to personel do
37551: LD_ADDR_VAR 0 8
37555: PUSH
37556: DOUBLE
37557: LD_INT 1
37559: DEC
37560: ST_TO_ADDR
37561: LD_VAR 0 6
37565: PUSH
37566: FOR_TO
37567: IFFALSE 37690
// begin if i > 4 then
37569: LD_VAR 0 8
37573: PUSH
37574: LD_INT 4
37576: GREATER
37577: IFFALSE 37581
// break ;
37579: GO 37690
// x := personel [ i ] ;
37581: LD_ADDR_VAR 0 13
37585: PUSH
37586: LD_VAR 0 6
37590: PUSH
37591: LD_VAR 0 8
37595: ARRAY
37596: ST_TO_ADDR
// if x = - 1 then
37597: LD_VAR 0 13
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: EQUAL
37606: IFFALSE 37610
// continue ;
37608: GO 37566
// PrepareHuman ( false , i , skill ) ;
37610: LD_INT 0
37612: PPUSH
37613: LD_VAR 0 8
37617: PPUSH
37618: LD_VAR 0 4
37622: PPUSH
37623: CALL_OW 380
// un := CreateHuman ;
37627: LD_ADDR_VAR 0 14
37631: PUSH
37632: CALL_OW 44
37636: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37637: LD_VAR 0 14
37641: PPUSH
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 250
37651: PPUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL_OW 251
37661: PPUSH
37662: LD_INT 10
37664: PPUSH
37665: LD_INT 0
37667: PPUSH
37668: CALL_OW 50
// result := result ^ un ;
37672: LD_ADDR_VAR 0 7
37676: PUSH
37677: LD_VAR 0 7
37681: PUSH
37682: LD_VAR 0 14
37686: ADD
37687: ST_TO_ADDR
// end ;
37688: GO 37566
37690: POP
37691: POP
// end ; end ;
37692: LD_VAR 0 7
37696: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37697: LD_INT 0
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
37703: PPUSH
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
37708: PPUSH
37709: PPUSH
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
// result := false ;
37715: LD_ADDR_VAR 0 3
37719: PUSH
37720: LD_INT 0
37722: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37723: LD_VAR 0 1
37727: NOT
37728: PUSH
37729: LD_VAR 0 1
37733: PPUSH
37734: CALL_OW 266
37738: PUSH
37739: LD_INT 32
37741: PUSH
37742: LD_INT 33
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: IN
37749: NOT
37750: OR
37751: IFFALSE 37755
// exit ;
37753: GO 38864
// nat := GetNation ( tower ) ;
37755: LD_ADDR_VAR 0 12
37759: PUSH
37760: LD_VAR 0 1
37764: PPUSH
37765: CALL_OW 248
37769: ST_TO_ADDR
// side := GetSide ( tower ) ;
37770: LD_ADDR_VAR 0 16
37774: PUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 255
37784: ST_TO_ADDR
// x := GetX ( tower ) ;
37785: LD_ADDR_VAR 0 10
37789: PUSH
37790: LD_VAR 0 1
37794: PPUSH
37795: CALL_OW 250
37799: ST_TO_ADDR
// y := GetY ( tower ) ;
37800: LD_ADDR_VAR 0 11
37804: PUSH
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL_OW 251
37814: ST_TO_ADDR
// if not x or not y then
37815: LD_VAR 0 10
37819: NOT
37820: PUSH
37821: LD_VAR 0 11
37825: NOT
37826: OR
37827: IFFALSE 37831
// exit ;
37829: GO 38864
// weapon := 0 ;
37831: LD_ADDR_VAR 0 18
37835: PUSH
37836: LD_INT 0
37838: ST_TO_ADDR
// fac_list := [ ] ;
37839: LD_ADDR_VAR 0 17
37843: PUSH
37844: EMPTY
37845: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37846: LD_ADDR_VAR 0 6
37850: PUSH
37851: LD_VAR 0 1
37855: PPUSH
37856: CALL_OW 274
37860: PPUSH
37861: LD_VAR 0 2
37865: PPUSH
37866: LD_INT 0
37868: PPUSH
37869: CALL 35435 0 3
37873: PPUSH
37874: LD_INT 30
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PPUSH
37884: CALL_OW 72
37888: ST_TO_ADDR
// if not factories then
37889: LD_VAR 0 6
37893: NOT
37894: IFFALSE 37898
// exit ;
37896: GO 38864
// for i in factories do
37898: LD_ADDR_VAR 0 8
37902: PUSH
37903: LD_VAR 0 6
37907: PUSH
37908: FOR_IN
37909: IFFALSE 37934
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37911: LD_ADDR_VAR 0 17
37915: PUSH
37916: LD_VAR 0 17
37920: PUSH
37921: LD_VAR 0 8
37925: PPUSH
37926: CALL_OW 478
37930: UNION
37931: ST_TO_ADDR
37932: GO 37908
37934: POP
37935: POP
// if not fac_list then
37936: LD_VAR 0 17
37940: NOT
37941: IFFALSE 37945
// exit ;
37943: GO 38864
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37945: LD_ADDR_VAR 0 5
37949: PUSH
37950: LD_INT 4
37952: PUSH
37953: LD_INT 5
37955: PUSH
37956: LD_INT 9
37958: PUSH
37959: LD_INT 10
37961: PUSH
37962: LD_INT 6
37964: PUSH
37965: LD_INT 7
37967: PUSH
37968: LD_INT 11
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 27
37982: PUSH
37983: LD_INT 28
37985: PUSH
37986: LD_INT 26
37988: PUSH
37989: LD_INT 30
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 43
38000: PUSH
38001: LD_INT 44
38003: PUSH
38004: LD_INT 46
38006: PUSH
38007: LD_INT 45
38009: PUSH
38010: LD_INT 47
38012: PUSH
38013: LD_INT 49
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: LIST
38028: PUSH
38029: LD_VAR 0 12
38033: ARRAY
38034: ST_TO_ADDR
// list := list isect fac_list ;
38035: LD_ADDR_VAR 0 5
38039: PUSH
38040: LD_VAR 0 5
38044: PUSH
38045: LD_VAR 0 17
38049: ISECT
38050: ST_TO_ADDR
// if not list then
38051: LD_VAR 0 5
38055: NOT
38056: IFFALSE 38060
// exit ;
38058: GO 38864
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38060: LD_VAR 0 12
38064: PUSH
38065: LD_INT 3
38067: EQUAL
38068: PUSH
38069: LD_INT 49
38071: PUSH
38072: LD_VAR 0 5
38076: IN
38077: AND
38078: PUSH
38079: LD_INT 31
38081: PPUSH
38082: LD_VAR 0 16
38086: PPUSH
38087: CALL_OW 321
38091: PUSH
38092: LD_INT 2
38094: EQUAL
38095: AND
38096: IFFALSE 38156
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38098: LD_INT 22
38100: PUSH
38101: LD_VAR 0 16
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 35
38112: PUSH
38113: LD_INT 49
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 91
38122: PUSH
38123: LD_VAR 0 1
38127: PUSH
38128: LD_INT 10
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: PPUSH
38141: CALL_OW 69
38145: NOT
38146: IFFALSE 38156
// weapon := ru_time_lapser ;
38148: LD_ADDR_VAR 0 18
38152: PUSH
38153: LD_INT 49
38155: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38156: LD_VAR 0 12
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: IN
38171: PUSH
38172: LD_INT 11
38174: PUSH
38175: LD_VAR 0 5
38179: IN
38180: PUSH
38181: LD_INT 30
38183: PUSH
38184: LD_VAR 0 5
38188: IN
38189: OR
38190: AND
38191: PUSH
38192: LD_INT 6
38194: PPUSH
38195: LD_VAR 0 16
38199: PPUSH
38200: CALL_OW 321
38204: PUSH
38205: LD_INT 2
38207: EQUAL
38208: AND
38209: IFFALSE 38374
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38211: LD_INT 22
38213: PUSH
38214: LD_VAR 0 16
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: LD_INT 35
38228: PUSH
38229: LD_INT 11
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 35
38238: PUSH
38239: LD_INT 30
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 91
38253: PUSH
38254: LD_VAR 0 1
38258: PUSH
38259: LD_INT 18
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: PPUSH
38272: CALL_OW 69
38276: NOT
38277: PUSH
38278: LD_INT 22
38280: PUSH
38281: LD_VAR 0 16
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: LD_INT 30
38295: PUSH
38296: LD_INT 32
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 30
38305: PUSH
38306: LD_INT 33
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 91
38320: PUSH
38321: LD_VAR 0 1
38325: PUSH
38326: LD_INT 12
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: LIST
38338: PUSH
38339: EMPTY
38340: LIST
38341: PPUSH
38342: CALL_OW 69
38346: PUSH
38347: LD_INT 2
38349: GREATER
38350: AND
38351: IFFALSE 38374
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38353: LD_ADDR_VAR 0 18
38357: PUSH
38358: LD_INT 11
38360: PUSH
38361: LD_INT 30
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_VAR 0 12
38372: ARRAY
38373: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38374: LD_VAR 0 18
38378: NOT
38379: PUSH
38380: LD_INT 40
38382: PPUSH
38383: LD_VAR 0 16
38387: PPUSH
38388: CALL_OW 321
38392: PUSH
38393: LD_INT 2
38395: EQUAL
38396: AND
38397: PUSH
38398: LD_INT 7
38400: PUSH
38401: LD_VAR 0 5
38405: IN
38406: PUSH
38407: LD_INT 28
38409: PUSH
38410: LD_VAR 0 5
38414: IN
38415: OR
38416: PUSH
38417: LD_INT 45
38419: PUSH
38420: LD_VAR 0 5
38424: IN
38425: OR
38426: AND
38427: IFFALSE 38681
// begin hex := GetHexInfo ( x , y ) ;
38429: LD_ADDR_VAR 0 4
38433: PUSH
38434: LD_VAR 0 10
38438: PPUSH
38439: LD_VAR 0 11
38443: PPUSH
38444: CALL_OW 546
38448: ST_TO_ADDR
// if hex [ 1 ] then
38449: LD_VAR 0 4
38453: PUSH
38454: LD_INT 1
38456: ARRAY
38457: IFFALSE 38461
// exit ;
38459: GO 38864
// height := hex [ 2 ] ;
38461: LD_ADDR_VAR 0 15
38465: PUSH
38466: LD_VAR 0 4
38470: PUSH
38471: LD_INT 2
38473: ARRAY
38474: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38475: LD_ADDR_VAR 0 14
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: LD_INT 3
38488: PUSH
38489: LD_INT 5
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: ST_TO_ADDR
// for i in tmp do
38498: LD_ADDR_VAR 0 8
38502: PUSH
38503: LD_VAR 0 14
38507: PUSH
38508: FOR_IN
38509: IFFALSE 38679
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38511: LD_ADDR_VAR 0 9
38515: PUSH
38516: LD_VAR 0 10
38520: PPUSH
38521: LD_VAR 0 8
38525: PPUSH
38526: LD_INT 5
38528: PPUSH
38529: CALL_OW 272
38533: PUSH
38534: LD_VAR 0 11
38538: PPUSH
38539: LD_VAR 0 8
38543: PPUSH
38544: LD_INT 5
38546: PPUSH
38547: CALL_OW 273
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38556: LD_VAR 0 9
38560: PUSH
38561: LD_INT 1
38563: ARRAY
38564: PPUSH
38565: LD_VAR 0 9
38569: PUSH
38570: LD_INT 2
38572: ARRAY
38573: PPUSH
38574: CALL_OW 488
38578: IFFALSE 38677
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38580: LD_ADDR_VAR 0 4
38584: PUSH
38585: LD_VAR 0 9
38589: PUSH
38590: LD_INT 1
38592: ARRAY
38593: PPUSH
38594: LD_VAR 0 9
38598: PUSH
38599: LD_INT 2
38601: ARRAY
38602: PPUSH
38603: CALL_OW 546
38607: ST_TO_ADDR
// if hex [ 1 ] then
38608: LD_VAR 0 4
38612: PUSH
38613: LD_INT 1
38615: ARRAY
38616: IFFALSE 38620
// continue ;
38618: GO 38508
// h := hex [ 2 ] ;
38620: LD_ADDR_VAR 0 13
38624: PUSH
38625: LD_VAR 0 4
38629: PUSH
38630: LD_INT 2
38632: ARRAY
38633: ST_TO_ADDR
// if h + 7 < height then
38634: LD_VAR 0 13
38638: PUSH
38639: LD_INT 7
38641: PLUS
38642: PUSH
38643: LD_VAR 0 15
38647: LESS
38648: IFFALSE 38677
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38650: LD_ADDR_VAR 0 18
38654: PUSH
38655: LD_INT 7
38657: PUSH
38658: LD_INT 28
38660: PUSH
38661: LD_INT 45
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: PUSH
38669: LD_VAR 0 12
38673: ARRAY
38674: ST_TO_ADDR
// break ;
38675: GO 38679
// end ; end ; end ;
38677: GO 38508
38679: POP
38680: POP
// end ; if not weapon then
38681: LD_VAR 0 18
38685: NOT
38686: IFFALSE 38746
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38688: LD_ADDR_VAR 0 5
38692: PUSH
38693: LD_VAR 0 5
38697: PUSH
38698: LD_INT 11
38700: PUSH
38701: LD_INT 30
38703: PUSH
38704: LD_INT 49
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: DIFF
38712: ST_TO_ADDR
// if not list then
38713: LD_VAR 0 5
38717: NOT
38718: IFFALSE 38722
// exit ;
38720: GO 38864
// weapon := list [ rand ( 1 , list ) ] ;
38722: LD_ADDR_VAR 0 18
38726: PUSH
38727: LD_VAR 0 5
38731: PUSH
38732: LD_INT 1
38734: PPUSH
38735: LD_VAR 0 5
38739: PPUSH
38740: CALL_OW 12
38744: ARRAY
38745: ST_TO_ADDR
// end ; if weapon then
38746: LD_VAR 0 18
38750: IFFALSE 38864
// begin tmp := CostOfWeapon ( weapon ) ;
38752: LD_ADDR_VAR 0 14
38756: PUSH
38757: LD_VAR 0 18
38761: PPUSH
38762: CALL_OW 451
38766: ST_TO_ADDR
// j := GetBase ( tower ) ;
38767: LD_ADDR_VAR 0 9
38771: PUSH
38772: LD_VAR 0 1
38776: PPUSH
38777: CALL_OW 274
38781: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38782: LD_VAR 0 9
38786: PPUSH
38787: LD_INT 1
38789: PPUSH
38790: CALL_OW 275
38794: PUSH
38795: LD_VAR 0 14
38799: PUSH
38800: LD_INT 1
38802: ARRAY
38803: GREATEREQUAL
38804: PUSH
38805: LD_VAR 0 9
38809: PPUSH
38810: LD_INT 2
38812: PPUSH
38813: CALL_OW 275
38817: PUSH
38818: LD_VAR 0 14
38822: PUSH
38823: LD_INT 2
38825: ARRAY
38826: GREATEREQUAL
38827: AND
38828: PUSH
38829: LD_VAR 0 9
38833: PPUSH
38834: LD_INT 3
38836: PPUSH
38837: CALL_OW 275
38841: PUSH
38842: LD_VAR 0 14
38846: PUSH
38847: LD_INT 3
38849: ARRAY
38850: GREATEREQUAL
38851: AND
38852: IFFALSE 38864
// result := weapon ;
38854: LD_ADDR_VAR 0 3
38858: PUSH
38859: LD_VAR 0 18
38863: ST_TO_ADDR
// end ; end ;
38864: LD_VAR 0 3
38868: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38869: LD_INT 0
38871: PPUSH
38872: PPUSH
// result := true ;
38873: LD_ADDR_VAR 0 3
38877: PUSH
38878: LD_INT 1
38880: ST_TO_ADDR
// if array1 = array2 then
38881: LD_VAR 0 1
38885: PUSH
38886: LD_VAR 0 2
38890: EQUAL
38891: IFFALSE 38951
// begin for i = 1 to array1 do
38893: LD_ADDR_VAR 0 4
38897: PUSH
38898: DOUBLE
38899: LD_INT 1
38901: DEC
38902: ST_TO_ADDR
38903: LD_VAR 0 1
38907: PUSH
38908: FOR_TO
38909: IFFALSE 38947
// if array1 [ i ] <> array2 [ i ] then
38911: LD_VAR 0 1
38915: PUSH
38916: LD_VAR 0 4
38920: ARRAY
38921: PUSH
38922: LD_VAR 0 2
38926: PUSH
38927: LD_VAR 0 4
38931: ARRAY
38932: NONEQUAL
38933: IFFALSE 38945
// begin result := false ;
38935: LD_ADDR_VAR 0 3
38939: PUSH
38940: LD_INT 0
38942: ST_TO_ADDR
// break ;
38943: GO 38947
// end ;
38945: GO 38908
38947: POP
38948: POP
// end else
38949: GO 38959
// result := false ;
38951: LD_ADDR_VAR 0 3
38955: PUSH
38956: LD_INT 0
38958: ST_TO_ADDR
// end ;
38959: LD_VAR 0 3
38963: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38964: LD_INT 0
38966: PPUSH
38967: PPUSH
// if not array1 or not array2 then
38968: LD_VAR 0 1
38972: NOT
38973: PUSH
38974: LD_VAR 0 2
38978: NOT
38979: OR
38980: IFFALSE 38984
// exit ;
38982: GO 39048
// result := true ;
38984: LD_ADDR_VAR 0 3
38988: PUSH
38989: LD_INT 1
38991: ST_TO_ADDR
// for i = 1 to array1 do
38992: LD_ADDR_VAR 0 4
38996: PUSH
38997: DOUBLE
38998: LD_INT 1
39000: DEC
39001: ST_TO_ADDR
39002: LD_VAR 0 1
39006: PUSH
39007: FOR_TO
39008: IFFALSE 39046
// if array1 [ i ] <> array2 [ i ] then
39010: LD_VAR 0 1
39014: PUSH
39015: LD_VAR 0 4
39019: ARRAY
39020: PUSH
39021: LD_VAR 0 2
39025: PUSH
39026: LD_VAR 0 4
39030: ARRAY
39031: NONEQUAL
39032: IFFALSE 39044
// begin result := false ;
39034: LD_ADDR_VAR 0 3
39038: PUSH
39039: LD_INT 0
39041: ST_TO_ADDR
// break ;
39042: GO 39046
// end ;
39044: GO 39007
39046: POP
39047: POP
// end ;
39048: LD_VAR 0 3
39052: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39053: LD_INT 0
39055: PPUSH
39056: PPUSH
39057: PPUSH
// pom := GetBase ( fac ) ;
39058: LD_ADDR_VAR 0 5
39062: PUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 274
39072: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39073: LD_ADDR_VAR 0 4
39077: PUSH
39078: LD_VAR 0 2
39082: PUSH
39083: LD_INT 1
39085: ARRAY
39086: PPUSH
39087: LD_VAR 0 2
39091: PUSH
39092: LD_INT 2
39094: ARRAY
39095: PPUSH
39096: LD_VAR 0 2
39100: PUSH
39101: LD_INT 3
39103: ARRAY
39104: PPUSH
39105: LD_VAR 0 2
39109: PUSH
39110: LD_INT 4
39112: ARRAY
39113: PPUSH
39114: CALL_OW 449
39118: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39119: LD_ADDR_VAR 0 3
39123: PUSH
39124: LD_VAR 0 5
39128: PPUSH
39129: LD_INT 1
39131: PPUSH
39132: CALL_OW 275
39136: PUSH
39137: LD_VAR 0 4
39141: PUSH
39142: LD_INT 1
39144: ARRAY
39145: GREATEREQUAL
39146: PUSH
39147: LD_VAR 0 5
39151: PPUSH
39152: LD_INT 2
39154: PPUSH
39155: CALL_OW 275
39159: PUSH
39160: LD_VAR 0 4
39164: PUSH
39165: LD_INT 2
39167: ARRAY
39168: GREATEREQUAL
39169: AND
39170: PUSH
39171: LD_VAR 0 5
39175: PPUSH
39176: LD_INT 3
39178: PPUSH
39179: CALL_OW 275
39183: PUSH
39184: LD_VAR 0 4
39188: PUSH
39189: LD_INT 3
39191: ARRAY
39192: GREATEREQUAL
39193: AND
39194: ST_TO_ADDR
// end ;
39195: LD_VAR 0 3
39199: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39200: LD_INT 0
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
// pom := GetBase ( building ) ;
39206: LD_ADDR_VAR 0 3
39210: PUSH
39211: LD_VAR 0 1
39215: PPUSH
39216: CALL_OW 274
39220: ST_TO_ADDR
// if not pom then
39221: LD_VAR 0 3
39225: NOT
39226: IFFALSE 39230
// exit ;
39228: GO 39400
// btype := GetBType ( building ) ;
39230: LD_ADDR_VAR 0 5
39234: PUSH
39235: LD_VAR 0 1
39239: PPUSH
39240: CALL_OW 266
39244: ST_TO_ADDR
// if btype = b_armoury then
39245: LD_VAR 0 5
39249: PUSH
39250: LD_INT 4
39252: EQUAL
39253: IFFALSE 39263
// btype := b_barracks ;
39255: LD_ADDR_VAR 0 5
39259: PUSH
39260: LD_INT 5
39262: ST_TO_ADDR
// if btype = b_depot then
39263: LD_VAR 0 5
39267: PUSH
39268: LD_INT 0
39270: EQUAL
39271: IFFALSE 39281
// btype := b_warehouse ;
39273: LD_ADDR_VAR 0 5
39277: PUSH
39278: LD_INT 1
39280: ST_TO_ADDR
// if btype = b_workshop then
39281: LD_VAR 0 5
39285: PUSH
39286: LD_INT 2
39288: EQUAL
39289: IFFALSE 39299
// btype := b_factory ;
39291: LD_ADDR_VAR 0 5
39295: PUSH
39296: LD_INT 3
39298: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39299: LD_ADDR_VAR 0 4
39303: PUSH
39304: LD_VAR 0 5
39308: PPUSH
39309: LD_VAR 0 1
39313: PPUSH
39314: CALL_OW 248
39318: PPUSH
39319: CALL_OW 450
39323: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39324: LD_ADDR_VAR 0 2
39328: PUSH
39329: LD_VAR 0 3
39333: PPUSH
39334: LD_INT 1
39336: PPUSH
39337: CALL_OW 275
39341: PUSH
39342: LD_VAR 0 4
39346: PUSH
39347: LD_INT 1
39349: ARRAY
39350: GREATEREQUAL
39351: PUSH
39352: LD_VAR 0 3
39356: PPUSH
39357: LD_INT 2
39359: PPUSH
39360: CALL_OW 275
39364: PUSH
39365: LD_VAR 0 4
39369: PUSH
39370: LD_INT 2
39372: ARRAY
39373: GREATEREQUAL
39374: AND
39375: PUSH
39376: LD_VAR 0 3
39380: PPUSH
39381: LD_INT 3
39383: PPUSH
39384: CALL_OW 275
39388: PUSH
39389: LD_VAR 0 4
39393: PUSH
39394: LD_INT 3
39396: ARRAY
39397: GREATEREQUAL
39398: AND
39399: ST_TO_ADDR
// end ;
39400: LD_VAR 0 2
39404: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39405: LD_INT 0
39407: PPUSH
39408: PPUSH
39409: PPUSH
// pom := GetBase ( building ) ;
39410: LD_ADDR_VAR 0 4
39414: PUSH
39415: LD_VAR 0 1
39419: PPUSH
39420: CALL_OW 274
39424: ST_TO_ADDR
// if not pom then
39425: LD_VAR 0 4
39429: NOT
39430: IFFALSE 39434
// exit ;
39432: GO 39535
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39434: LD_ADDR_VAR 0 5
39438: PUSH
39439: LD_VAR 0 2
39443: PPUSH
39444: LD_VAR 0 1
39448: PPUSH
39449: CALL_OW 248
39453: PPUSH
39454: CALL_OW 450
39458: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39459: LD_ADDR_VAR 0 3
39463: PUSH
39464: LD_VAR 0 4
39468: PPUSH
39469: LD_INT 1
39471: PPUSH
39472: CALL_OW 275
39476: PUSH
39477: LD_VAR 0 5
39481: PUSH
39482: LD_INT 1
39484: ARRAY
39485: GREATEREQUAL
39486: PUSH
39487: LD_VAR 0 4
39491: PPUSH
39492: LD_INT 2
39494: PPUSH
39495: CALL_OW 275
39499: PUSH
39500: LD_VAR 0 5
39504: PUSH
39505: LD_INT 2
39507: ARRAY
39508: GREATEREQUAL
39509: AND
39510: PUSH
39511: LD_VAR 0 4
39515: PPUSH
39516: LD_INT 3
39518: PPUSH
39519: CALL_OW 275
39523: PUSH
39524: LD_VAR 0 5
39528: PUSH
39529: LD_INT 3
39531: ARRAY
39532: GREATEREQUAL
39533: AND
39534: ST_TO_ADDR
// end ;
39535: LD_VAR 0 3
39539: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39540: LD_INT 0
39542: PPUSH
39543: PPUSH
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
39551: PPUSH
39552: PPUSH
// result := false ;
39553: LD_ADDR_VAR 0 8
39557: PUSH
39558: LD_INT 0
39560: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39561: LD_VAR 0 5
39565: NOT
39566: PUSH
39567: LD_VAR 0 1
39571: NOT
39572: OR
39573: PUSH
39574: LD_VAR 0 2
39578: NOT
39579: OR
39580: PUSH
39581: LD_VAR 0 3
39585: NOT
39586: OR
39587: IFFALSE 39591
// exit ;
39589: GO 40405
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39591: LD_ADDR_VAR 0 14
39595: PUSH
39596: LD_VAR 0 1
39600: PPUSH
39601: LD_VAR 0 2
39605: PPUSH
39606: LD_VAR 0 3
39610: PPUSH
39611: LD_VAR 0 4
39615: PPUSH
39616: LD_VAR 0 5
39620: PUSH
39621: LD_INT 1
39623: ARRAY
39624: PPUSH
39625: CALL_OW 248
39629: PPUSH
39630: LD_INT 0
39632: PPUSH
39633: CALL 41642 0 6
39637: ST_TO_ADDR
// if not hexes then
39638: LD_VAR 0 14
39642: NOT
39643: IFFALSE 39647
// exit ;
39645: GO 40405
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39647: LD_ADDR_VAR 0 17
39651: PUSH
39652: LD_VAR 0 5
39656: PPUSH
39657: LD_INT 22
39659: PUSH
39660: LD_VAR 0 13
39664: PPUSH
39665: CALL_OW 255
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 2
39676: PUSH
39677: LD_INT 30
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 30
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PPUSH
39706: CALL_OW 72
39710: ST_TO_ADDR
// for i = 1 to hexes do
39711: LD_ADDR_VAR 0 9
39715: PUSH
39716: DOUBLE
39717: LD_INT 1
39719: DEC
39720: ST_TO_ADDR
39721: LD_VAR 0 14
39725: PUSH
39726: FOR_TO
39727: IFFALSE 40403
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39729: LD_ADDR_VAR 0 13
39733: PUSH
39734: LD_VAR 0 14
39738: PUSH
39739: LD_VAR 0 9
39743: ARRAY
39744: PUSH
39745: LD_INT 1
39747: ARRAY
39748: PPUSH
39749: LD_VAR 0 14
39753: PUSH
39754: LD_VAR 0 9
39758: ARRAY
39759: PUSH
39760: LD_INT 2
39762: ARRAY
39763: PPUSH
39764: CALL_OW 428
39768: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39769: LD_VAR 0 14
39773: PUSH
39774: LD_VAR 0 9
39778: ARRAY
39779: PUSH
39780: LD_INT 1
39782: ARRAY
39783: PPUSH
39784: LD_VAR 0 14
39788: PUSH
39789: LD_VAR 0 9
39793: ARRAY
39794: PUSH
39795: LD_INT 2
39797: ARRAY
39798: PPUSH
39799: CALL_OW 351
39803: PUSH
39804: LD_VAR 0 14
39808: PUSH
39809: LD_VAR 0 9
39813: ARRAY
39814: PUSH
39815: LD_INT 1
39817: ARRAY
39818: PPUSH
39819: LD_VAR 0 14
39823: PUSH
39824: LD_VAR 0 9
39828: ARRAY
39829: PUSH
39830: LD_INT 2
39832: ARRAY
39833: PPUSH
39834: CALL_OW 488
39838: NOT
39839: OR
39840: PUSH
39841: LD_VAR 0 13
39845: PPUSH
39846: CALL_OW 247
39850: PUSH
39851: LD_INT 3
39853: EQUAL
39854: OR
39855: IFFALSE 39861
// exit ;
39857: POP
39858: POP
39859: GO 40405
// if not tmp then
39861: LD_VAR 0 13
39865: NOT
39866: IFFALSE 39870
// continue ;
39868: GO 39726
// result := true ;
39870: LD_ADDR_VAR 0 8
39874: PUSH
39875: LD_INT 1
39877: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39878: LD_VAR 0 6
39882: PUSH
39883: LD_VAR 0 13
39887: PPUSH
39888: CALL_OW 247
39892: PUSH
39893: LD_INT 2
39895: EQUAL
39896: AND
39897: PUSH
39898: LD_VAR 0 13
39902: PPUSH
39903: CALL_OW 263
39907: PUSH
39908: LD_INT 1
39910: EQUAL
39911: AND
39912: IFFALSE 40076
// begin if IsDrivenBy ( tmp ) then
39914: LD_VAR 0 13
39918: PPUSH
39919: CALL_OW 311
39923: IFFALSE 39927
// continue ;
39925: GO 39726
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39927: LD_VAR 0 6
39931: PPUSH
39932: LD_INT 3
39934: PUSH
39935: LD_INT 60
39937: PUSH
39938: EMPTY
39939: LIST
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 3
39947: PUSH
39948: LD_INT 55
39950: PUSH
39951: EMPTY
39952: LIST
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PPUSH
39962: CALL_OW 72
39966: IFFALSE 40074
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39968: LD_ADDR_VAR 0 18
39972: PUSH
39973: LD_VAR 0 6
39977: PPUSH
39978: LD_INT 3
39980: PUSH
39981: LD_INT 60
39983: PUSH
39984: EMPTY
39985: LIST
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 3
39993: PUSH
39994: LD_INT 55
39996: PUSH
39997: EMPTY
39998: LIST
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PPUSH
40008: CALL_OW 72
40012: PUSH
40013: LD_INT 1
40015: ARRAY
40016: ST_TO_ADDR
// if IsInUnit ( driver ) then
40017: LD_VAR 0 18
40021: PPUSH
40022: CALL_OW 310
40026: IFFALSE 40037
// ComExit ( driver ) ;
40028: LD_VAR 0 18
40032: PPUSH
40033: CALL 64826 0 1
// AddComEnterUnit ( driver , tmp ) ;
40037: LD_VAR 0 18
40041: PPUSH
40042: LD_VAR 0 13
40046: PPUSH
40047: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40051: LD_VAR 0 18
40055: PPUSH
40056: LD_VAR 0 7
40060: PPUSH
40061: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40065: LD_VAR 0 18
40069: PPUSH
40070: CALL_OW 181
// end ; continue ;
40074: GO 39726
// end ; if not cleaners or not tmp in cleaners then
40076: LD_VAR 0 6
40080: NOT
40081: PUSH
40082: LD_VAR 0 13
40086: PUSH
40087: LD_VAR 0 6
40091: IN
40092: NOT
40093: OR
40094: IFFALSE 40401
// begin if dep then
40096: LD_VAR 0 17
40100: IFFALSE 40236
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40102: LD_ADDR_VAR 0 16
40106: PUSH
40107: LD_VAR 0 17
40111: PUSH
40112: LD_INT 1
40114: ARRAY
40115: PPUSH
40116: CALL_OW 250
40120: PPUSH
40121: LD_VAR 0 17
40125: PUSH
40126: LD_INT 1
40128: ARRAY
40129: PPUSH
40130: CALL_OW 254
40134: PPUSH
40135: LD_INT 5
40137: PPUSH
40138: CALL_OW 272
40142: PUSH
40143: LD_VAR 0 17
40147: PUSH
40148: LD_INT 1
40150: ARRAY
40151: PPUSH
40152: CALL_OW 251
40156: PPUSH
40157: LD_VAR 0 17
40161: PUSH
40162: LD_INT 1
40164: ARRAY
40165: PPUSH
40166: CALL_OW 254
40170: PPUSH
40171: LD_INT 5
40173: PPUSH
40174: CALL_OW 273
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40183: LD_VAR 0 16
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: PPUSH
40192: LD_VAR 0 16
40196: PUSH
40197: LD_INT 2
40199: ARRAY
40200: PPUSH
40201: CALL_OW 488
40205: IFFALSE 40236
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40207: LD_VAR 0 13
40211: PPUSH
40212: LD_VAR 0 16
40216: PUSH
40217: LD_INT 1
40219: ARRAY
40220: PPUSH
40221: LD_VAR 0 16
40225: PUSH
40226: LD_INT 2
40228: ARRAY
40229: PPUSH
40230: CALL_OW 111
// continue ;
40234: GO 39726
// end ; end ; r := GetDir ( tmp ) ;
40236: LD_ADDR_VAR 0 15
40240: PUSH
40241: LD_VAR 0 13
40245: PPUSH
40246: CALL_OW 254
40250: ST_TO_ADDR
// if r = 5 then
40251: LD_VAR 0 15
40255: PUSH
40256: LD_INT 5
40258: EQUAL
40259: IFFALSE 40269
// r := 0 ;
40261: LD_ADDR_VAR 0 15
40265: PUSH
40266: LD_INT 0
40268: ST_TO_ADDR
// for j = r to 5 do
40269: LD_ADDR_VAR 0 10
40273: PUSH
40274: DOUBLE
40275: LD_VAR 0 15
40279: DEC
40280: ST_TO_ADDR
40281: LD_INT 5
40283: PUSH
40284: FOR_TO
40285: IFFALSE 40399
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40287: LD_ADDR_VAR 0 11
40291: PUSH
40292: LD_VAR 0 13
40296: PPUSH
40297: CALL_OW 250
40301: PPUSH
40302: LD_VAR 0 10
40306: PPUSH
40307: LD_INT 2
40309: PPUSH
40310: CALL_OW 272
40314: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40315: LD_ADDR_VAR 0 12
40319: PUSH
40320: LD_VAR 0 13
40324: PPUSH
40325: CALL_OW 251
40329: PPUSH
40330: LD_VAR 0 10
40334: PPUSH
40335: LD_INT 2
40337: PPUSH
40338: CALL_OW 273
40342: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40343: LD_VAR 0 11
40347: PPUSH
40348: LD_VAR 0 12
40352: PPUSH
40353: CALL_OW 488
40357: PUSH
40358: LD_VAR 0 11
40362: PPUSH
40363: LD_VAR 0 12
40367: PPUSH
40368: CALL_OW 428
40372: NOT
40373: AND
40374: IFFALSE 40397
// begin ComMoveXY ( tmp , _x , _y ) ;
40376: LD_VAR 0 13
40380: PPUSH
40381: LD_VAR 0 11
40385: PPUSH
40386: LD_VAR 0 12
40390: PPUSH
40391: CALL_OW 111
// break ;
40395: GO 40399
// end ; end ;
40397: GO 40284
40399: POP
40400: POP
// end ; end ;
40401: GO 39726
40403: POP
40404: POP
// end ;
40405: LD_VAR 0 8
40409: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40410: LD_INT 0
40412: PPUSH
// result := true ;
40413: LD_ADDR_VAR 0 3
40417: PUSH
40418: LD_INT 1
40420: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40421: LD_VAR 0 2
40425: PUSH
40426: LD_INT 24
40428: DOUBLE
40429: EQUAL
40430: IFTRUE 40440
40432: LD_INT 33
40434: DOUBLE
40435: EQUAL
40436: IFTRUE 40440
40438: GO 40465
40440: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40441: LD_ADDR_VAR 0 3
40445: PUSH
40446: LD_INT 32
40448: PPUSH
40449: LD_VAR 0 1
40453: PPUSH
40454: CALL_OW 321
40458: PUSH
40459: LD_INT 2
40461: EQUAL
40462: ST_TO_ADDR
40463: GO 40785
40465: LD_INT 20
40467: DOUBLE
40468: EQUAL
40469: IFTRUE 40473
40471: GO 40498
40473: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_INT 6
40481: PPUSH
40482: LD_VAR 0 1
40486: PPUSH
40487: CALL_OW 321
40491: PUSH
40492: LD_INT 2
40494: EQUAL
40495: ST_TO_ADDR
40496: GO 40785
40498: LD_INT 22
40500: DOUBLE
40501: EQUAL
40502: IFTRUE 40512
40504: LD_INT 36
40506: DOUBLE
40507: EQUAL
40508: IFTRUE 40512
40510: GO 40537
40512: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40513: LD_ADDR_VAR 0 3
40517: PUSH
40518: LD_INT 15
40520: PPUSH
40521: LD_VAR 0 1
40525: PPUSH
40526: CALL_OW 321
40530: PUSH
40531: LD_INT 2
40533: EQUAL
40534: ST_TO_ADDR
40535: GO 40785
40537: LD_INT 30
40539: DOUBLE
40540: EQUAL
40541: IFTRUE 40545
40543: GO 40570
40545: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40546: LD_ADDR_VAR 0 3
40550: PUSH
40551: LD_INT 20
40553: PPUSH
40554: LD_VAR 0 1
40558: PPUSH
40559: CALL_OW 321
40563: PUSH
40564: LD_INT 2
40566: EQUAL
40567: ST_TO_ADDR
40568: GO 40785
40570: LD_INT 28
40572: DOUBLE
40573: EQUAL
40574: IFTRUE 40584
40576: LD_INT 21
40578: DOUBLE
40579: EQUAL
40580: IFTRUE 40584
40582: GO 40609
40584: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40585: LD_ADDR_VAR 0 3
40589: PUSH
40590: LD_INT 21
40592: PPUSH
40593: LD_VAR 0 1
40597: PPUSH
40598: CALL_OW 321
40602: PUSH
40603: LD_INT 2
40605: EQUAL
40606: ST_TO_ADDR
40607: GO 40785
40609: LD_INT 16
40611: DOUBLE
40612: EQUAL
40613: IFTRUE 40617
40615: GO 40644
40617: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40618: LD_ADDR_VAR 0 3
40622: PUSH
40623: LD_EXP 125
40627: PPUSH
40628: LD_VAR 0 1
40632: PPUSH
40633: CALL_OW 321
40637: PUSH
40638: LD_INT 2
40640: EQUAL
40641: ST_TO_ADDR
40642: GO 40785
40644: LD_INT 19
40646: DOUBLE
40647: EQUAL
40648: IFTRUE 40658
40650: LD_INT 23
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40658
40656: GO 40685
40658: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40659: LD_ADDR_VAR 0 3
40663: PUSH
40664: LD_EXP 124
40668: PPUSH
40669: LD_VAR 0 1
40673: PPUSH
40674: CALL_OW 321
40678: PUSH
40679: LD_INT 2
40681: EQUAL
40682: ST_TO_ADDR
40683: GO 40785
40685: LD_INT 17
40687: DOUBLE
40688: EQUAL
40689: IFTRUE 40693
40691: GO 40718
40693: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40694: LD_ADDR_VAR 0 3
40698: PUSH
40699: LD_INT 39
40701: PPUSH
40702: LD_VAR 0 1
40706: PPUSH
40707: CALL_OW 321
40711: PUSH
40712: LD_INT 2
40714: EQUAL
40715: ST_TO_ADDR
40716: GO 40785
40718: LD_INT 18
40720: DOUBLE
40721: EQUAL
40722: IFTRUE 40726
40724: GO 40751
40726: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40727: LD_ADDR_VAR 0 3
40731: PUSH
40732: LD_INT 40
40734: PPUSH
40735: LD_VAR 0 1
40739: PPUSH
40740: CALL_OW 321
40744: PUSH
40745: LD_INT 2
40747: EQUAL
40748: ST_TO_ADDR
40749: GO 40785
40751: LD_INT 27
40753: DOUBLE
40754: EQUAL
40755: IFTRUE 40759
40757: GO 40784
40759: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40760: LD_ADDR_VAR 0 3
40764: PUSH
40765: LD_INT 35
40767: PPUSH
40768: LD_VAR 0 1
40772: PPUSH
40773: CALL_OW 321
40777: PUSH
40778: LD_INT 2
40780: EQUAL
40781: ST_TO_ADDR
40782: GO 40785
40784: POP
// end ;
40785: LD_VAR 0 3
40789: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
// result := false ;
40803: LD_ADDR_VAR 0 6
40807: PUSH
40808: LD_INT 0
40810: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40811: LD_VAR 0 1
40815: NOT
40816: PUSH
40817: LD_VAR 0 1
40821: PPUSH
40822: CALL_OW 266
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: IN
40837: NOT
40838: OR
40839: PUSH
40840: LD_VAR 0 2
40844: NOT
40845: OR
40846: PUSH
40847: LD_VAR 0 5
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: LD_INT 4
40866: PUSH
40867: LD_INT 5
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: IN
40878: NOT
40879: OR
40880: PUSH
40881: LD_VAR 0 3
40885: PPUSH
40886: LD_VAR 0 4
40890: PPUSH
40891: CALL_OW 488
40895: NOT
40896: OR
40897: IFFALSE 40901
// exit ;
40899: GO 41637
// side := GetSide ( depot ) ;
40901: LD_ADDR_VAR 0 9
40905: PUSH
40906: LD_VAR 0 1
40910: PPUSH
40911: CALL_OW 255
40915: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40916: LD_VAR 0 9
40920: PPUSH
40921: LD_VAR 0 2
40925: PPUSH
40926: CALL 40410 0 2
40930: NOT
40931: IFFALSE 40935
// exit ;
40933: GO 41637
// pom := GetBase ( depot ) ;
40935: LD_ADDR_VAR 0 10
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 274
40949: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40950: LD_ADDR_VAR 0 11
40954: PUSH
40955: LD_VAR 0 2
40959: PPUSH
40960: LD_VAR 0 1
40964: PPUSH
40965: CALL_OW 248
40969: PPUSH
40970: CALL_OW 450
40974: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40975: LD_VAR 0 10
40979: PPUSH
40980: LD_INT 1
40982: PPUSH
40983: CALL_OW 275
40987: PUSH
40988: LD_VAR 0 11
40992: PUSH
40993: LD_INT 1
40995: ARRAY
40996: GREATEREQUAL
40997: PUSH
40998: LD_VAR 0 10
41002: PPUSH
41003: LD_INT 2
41005: PPUSH
41006: CALL_OW 275
41010: PUSH
41011: LD_VAR 0 11
41015: PUSH
41016: LD_INT 2
41018: ARRAY
41019: GREATEREQUAL
41020: AND
41021: PUSH
41022: LD_VAR 0 10
41026: PPUSH
41027: LD_INT 3
41029: PPUSH
41030: CALL_OW 275
41034: PUSH
41035: LD_VAR 0 11
41039: PUSH
41040: LD_INT 3
41042: ARRAY
41043: GREATEREQUAL
41044: AND
41045: NOT
41046: IFFALSE 41050
// exit ;
41048: GO 41637
// if GetBType ( depot ) = b_depot then
41050: LD_VAR 0 1
41054: PPUSH
41055: CALL_OW 266
41059: PUSH
41060: LD_INT 0
41062: EQUAL
41063: IFFALSE 41075
// dist := 28 else
41065: LD_ADDR_VAR 0 14
41069: PUSH
41070: LD_INT 28
41072: ST_TO_ADDR
41073: GO 41083
// dist := 36 ;
41075: LD_ADDR_VAR 0 14
41079: PUSH
41080: LD_INT 36
41082: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41083: LD_VAR 0 1
41087: PPUSH
41088: LD_VAR 0 3
41092: PPUSH
41093: LD_VAR 0 4
41097: PPUSH
41098: CALL_OW 297
41102: PUSH
41103: LD_VAR 0 14
41107: GREATER
41108: IFFALSE 41112
// exit ;
41110: GO 41637
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41112: LD_ADDR_VAR 0 12
41116: PUSH
41117: LD_VAR 0 2
41121: PPUSH
41122: LD_VAR 0 3
41126: PPUSH
41127: LD_VAR 0 4
41131: PPUSH
41132: LD_VAR 0 5
41136: PPUSH
41137: LD_VAR 0 1
41141: PPUSH
41142: CALL_OW 248
41146: PPUSH
41147: LD_INT 0
41149: PPUSH
41150: CALL 41642 0 6
41154: ST_TO_ADDR
// if not hexes then
41155: LD_VAR 0 12
41159: NOT
41160: IFFALSE 41164
// exit ;
41162: GO 41637
// hex := GetHexInfo ( x , y ) ;
41164: LD_ADDR_VAR 0 15
41168: PUSH
41169: LD_VAR 0 3
41173: PPUSH
41174: LD_VAR 0 4
41178: PPUSH
41179: CALL_OW 546
41183: ST_TO_ADDR
// if hex [ 1 ] then
41184: LD_VAR 0 15
41188: PUSH
41189: LD_INT 1
41191: ARRAY
41192: IFFALSE 41196
// exit ;
41194: GO 41637
// height := hex [ 2 ] ;
41196: LD_ADDR_VAR 0 13
41200: PUSH
41201: LD_VAR 0 15
41205: PUSH
41206: LD_INT 2
41208: ARRAY
41209: ST_TO_ADDR
// for i = 1 to hexes do
41210: LD_ADDR_VAR 0 7
41214: PUSH
41215: DOUBLE
41216: LD_INT 1
41218: DEC
41219: ST_TO_ADDR
41220: LD_VAR 0 12
41224: PUSH
41225: FOR_TO
41226: IFFALSE 41556
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41228: LD_VAR 0 12
41232: PUSH
41233: LD_VAR 0 7
41237: ARRAY
41238: PUSH
41239: LD_INT 1
41241: ARRAY
41242: PPUSH
41243: LD_VAR 0 12
41247: PUSH
41248: LD_VAR 0 7
41252: ARRAY
41253: PUSH
41254: LD_INT 2
41256: ARRAY
41257: PPUSH
41258: CALL_OW 488
41262: NOT
41263: PUSH
41264: LD_VAR 0 12
41268: PUSH
41269: LD_VAR 0 7
41273: ARRAY
41274: PUSH
41275: LD_INT 1
41277: ARRAY
41278: PPUSH
41279: LD_VAR 0 12
41283: PUSH
41284: LD_VAR 0 7
41288: ARRAY
41289: PUSH
41290: LD_INT 2
41292: ARRAY
41293: PPUSH
41294: CALL_OW 428
41298: PUSH
41299: LD_INT 0
41301: GREATER
41302: OR
41303: PUSH
41304: LD_VAR 0 12
41308: PUSH
41309: LD_VAR 0 7
41313: ARRAY
41314: PUSH
41315: LD_INT 1
41317: ARRAY
41318: PPUSH
41319: LD_VAR 0 12
41323: PUSH
41324: LD_VAR 0 7
41328: ARRAY
41329: PUSH
41330: LD_INT 2
41332: ARRAY
41333: PPUSH
41334: CALL_OW 351
41338: OR
41339: IFFALSE 41345
// exit ;
41341: POP
41342: POP
41343: GO 41637
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41345: LD_ADDR_VAR 0 8
41349: PUSH
41350: LD_VAR 0 12
41354: PUSH
41355: LD_VAR 0 7
41359: ARRAY
41360: PUSH
41361: LD_INT 1
41363: ARRAY
41364: PPUSH
41365: LD_VAR 0 12
41369: PUSH
41370: LD_VAR 0 7
41374: ARRAY
41375: PUSH
41376: LD_INT 2
41378: ARRAY
41379: PPUSH
41380: CALL_OW 546
41384: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41385: LD_VAR 0 8
41389: PUSH
41390: LD_INT 1
41392: ARRAY
41393: PUSH
41394: LD_VAR 0 8
41398: PUSH
41399: LD_INT 2
41401: ARRAY
41402: PUSH
41403: LD_VAR 0 13
41407: PUSH
41408: LD_INT 2
41410: PLUS
41411: GREATER
41412: OR
41413: PUSH
41414: LD_VAR 0 8
41418: PUSH
41419: LD_INT 2
41421: ARRAY
41422: PUSH
41423: LD_VAR 0 13
41427: PUSH
41428: LD_INT 2
41430: MINUS
41431: LESS
41432: OR
41433: PUSH
41434: LD_VAR 0 8
41438: PUSH
41439: LD_INT 3
41441: ARRAY
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 8
41448: PUSH
41449: LD_INT 9
41451: PUSH
41452: LD_INT 10
41454: PUSH
41455: LD_INT 11
41457: PUSH
41458: LD_INT 12
41460: PUSH
41461: LD_INT 13
41463: PUSH
41464: LD_INT 16
41466: PUSH
41467: LD_INT 17
41469: PUSH
41470: LD_INT 18
41472: PUSH
41473: LD_INT 19
41475: PUSH
41476: LD_INT 20
41478: PUSH
41479: LD_INT 21
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: IN
41497: NOT
41498: OR
41499: PUSH
41500: LD_VAR 0 8
41504: PUSH
41505: LD_INT 5
41507: ARRAY
41508: NOT
41509: OR
41510: PUSH
41511: LD_VAR 0 8
41515: PUSH
41516: LD_INT 6
41518: ARRAY
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 7
41528: PUSH
41529: LD_INT 9
41531: PUSH
41532: LD_INT 10
41534: PUSH
41535: LD_INT 11
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: IN
41546: NOT
41547: OR
41548: IFFALSE 41554
// exit ;
41550: POP
41551: POP
41552: GO 41637
// end ;
41554: GO 41225
41556: POP
41557: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41558: LD_VAR 0 9
41562: PPUSH
41563: LD_VAR 0 3
41567: PPUSH
41568: LD_VAR 0 4
41572: PPUSH
41573: LD_INT 20
41575: PPUSH
41576: CALL 33583 0 4
41580: PUSH
41581: LD_INT 4
41583: ARRAY
41584: IFFALSE 41588
// exit ;
41586: GO 41637
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41588: LD_VAR 0 2
41592: PUSH
41593: LD_INT 29
41595: PUSH
41596: LD_INT 30
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: IN
41603: PUSH
41604: LD_VAR 0 3
41608: PPUSH
41609: LD_VAR 0 4
41613: PPUSH
41614: LD_VAR 0 9
41618: PPUSH
41619: CALL_OW 440
41623: NOT
41624: AND
41625: IFFALSE 41629
// exit ;
41627: GO 41637
// result := true ;
41629: LD_ADDR_VAR 0 6
41633: PUSH
41634: LD_INT 1
41636: ST_TO_ADDR
// end ;
41637: LD_VAR 0 6
41641: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41642: LD_INT 0
41644: PPUSH
41645: PPUSH
41646: PPUSH
41647: PPUSH
41648: PPUSH
41649: PPUSH
41650: PPUSH
41651: PPUSH
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
41656: PPUSH
41657: PPUSH
41658: PPUSH
41659: PPUSH
41660: PPUSH
41661: PPUSH
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
// result = [ ] ;
41702: LD_ADDR_VAR 0 7
41706: PUSH
41707: EMPTY
41708: ST_TO_ADDR
// temp_list = [ ] ;
41709: LD_ADDR_VAR 0 9
41713: PUSH
41714: EMPTY
41715: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41716: LD_VAR 0 4
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: LD_INT 3
41732: PUSH
41733: LD_INT 4
41735: PUSH
41736: LD_INT 5
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: IN
41747: NOT
41748: PUSH
41749: LD_VAR 0 1
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: IN
41764: PUSH
41765: LD_VAR 0 5
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: IN
41784: NOT
41785: AND
41786: OR
41787: IFFALSE 41791
// exit ;
41789: GO 60182
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41791: LD_VAR 0 1
41795: PUSH
41796: LD_INT 6
41798: PUSH
41799: LD_INT 7
41801: PUSH
41802: LD_INT 8
41804: PUSH
41805: LD_INT 13
41807: PUSH
41808: LD_INT 12
41810: PUSH
41811: LD_INT 15
41813: PUSH
41814: LD_INT 11
41816: PUSH
41817: LD_INT 14
41819: PUSH
41820: LD_INT 10
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: IN
41834: IFFALSE 41844
// btype = b_lab ;
41836: LD_ADDR_VAR 0 1
41840: PUSH
41841: LD_INT 6
41843: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41844: LD_VAR 0 6
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: LIST
41862: IN
41863: NOT
41864: PUSH
41865: LD_VAR 0 1
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: LD_INT 3
41881: PUSH
41882: LD_INT 6
41884: PUSH
41885: LD_INT 36
41887: PUSH
41888: LD_INT 4
41890: PUSH
41891: LD_INT 5
41893: PUSH
41894: LD_INT 31
41896: PUSH
41897: LD_INT 32
41899: PUSH
41900: LD_INT 33
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: IN
41916: NOT
41917: PUSH
41918: LD_VAR 0 6
41922: PUSH
41923: LD_INT 1
41925: EQUAL
41926: AND
41927: OR
41928: PUSH
41929: LD_VAR 0 1
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: LD_INT 3
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: IN
41944: NOT
41945: PUSH
41946: LD_VAR 0 6
41950: PUSH
41951: LD_INT 2
41953: EQUAL
41954: AND
41955: OR
41956: IFFALSE 41966
// mode = 0 ;
41958: LD_ADDR_VAR 0 6
41962: PUSH
41963: LD_INT 0
41965: ST_TO_ADDR
// case mode of 0 :
41966: LD_VAR 0 6
41970: PUSH
41971: LD_INT 0
41973: DOUBLE
41974: EQUAL
41975: IFTRUE 41979
41977: GO 53432
41979: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41980: LD_ADDR_VAR 0 11
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 3
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42173: LD_ADDR_VAR 0 12
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 3
42341: NEG
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42369: LD_ADDR_VAR 0 13
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 2
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: LD_INT 3
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 3
42528: NEG
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: LD_INT 3
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42568: LD_ADDR_VAR 0 14
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 3
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: LD_INT 3
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42764: LD_ADDR_VAR 0 15
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: NEG
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 3
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 3
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42957: LD_ADDR_VAR 0 16
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: LD_INT 3
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: LD_INT 3
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43150: LD_ADDR_VAR 0 17
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: LD_INT 2
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43380: LD_ADDR_VAR 0 18
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 2
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: NEG
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43610: LD_ADDR_VAR 0 19
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: NEG
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43840: LD_ADDR_VAR 0 20
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 2
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44070: LD_ADDR_VAR 0 21
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44300: LD_ADDR_VAR 0 22
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44530: LD_ADDR_VAR 0 23
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: LD_INT 3
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 3
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44810: LD_ADDR_VAR 0 24
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 3
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 3
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45086: LD_ADDR_VAR 0 25
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 3
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 3
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: LD_INT 3
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 3
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45360: LD_ADDR_VAR 0 26
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 3
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45636: LD_ADDR_VAR 0 27
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: NEG
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45916: LD_ADDR_VAR 0 28
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 3
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46198: LD_ADDR_VAR 0 29
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 3
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 3
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 3
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 3
46442: NEG
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46477: LD_ADDR_VAR 0 30
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46755: LD_ADDR_VAR 0 31
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 3
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47033: LD_ADDR_VAR 0 32
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47311: LD_ADDR_VAR 0 33
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: LD_INT 3
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 3
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 3
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 3
47555: NEG
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47590: LD_ADDR_VAR 0 34
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 3
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: LD_INT 3
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: NEG
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47870: LD_ADDR_VAR 0 35
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47982: LD_ADDR_VAR 0 36
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48094: LD_ADDR_VAR 0 37
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48206: LD_ADDR_VAR 0 38
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48318: LD_ADDR_VAR 0 39
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48430: LD_ADDR_VAR 0 40
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48542: LD_ADDR_VAR 0 41
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: LD_INT 3
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: NEG
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 3
48839: NEG
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 3
48851: NEG
48852: PUSH
48853: LD_INT 3
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48892: LD_ADDR_VAR 0 42
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 3
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: LD_INT 3
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: PUSH
49139: LD_INT 3
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 3
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 3
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: NEG
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 3
49201: NEG
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49242: LD_ADDR_VAR 0 43
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 3
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 3
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: LD_INT 3
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 3
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49590: LD_ADDR_VAR 0 44
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: NEG
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 3
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 3
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 3
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 3
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 3
49887: NEG
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: LD_INT 3
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49940: LD_ADDR_VAR 0 45
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 3
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: NEG
50250: PUSH
50251: LD_INT 3
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50290: LD_ADDR_VAR 0 46
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 3
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 3
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50638: LD_ADDR_VAR 0 47
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50789: LD_ADDR_VAR 0 48
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50936: LD_ADDR_VAR 0 49
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51080: LD_ADDR_VAR 0 50
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51224: LD_ADDR_VAR 0 51
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51371: LD_ADDR_VAR 0 52
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: NEG
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51522: LD_ADDR_VAR 0 53
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51752: LD_ADDR_VAR 0 54
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51982: LD_ADDR_VAR 0 55
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52212: LD_ADDR_VAR 0 56
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52442: LD_ADDR_VAR 0 57
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52672: LD_ADDR_VAR 0 58
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52902: LD_ADDR_VAR 0 59
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52990: LD_ADDR_VAR 0 60
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53078: LD_ADDR_VAR 0 61
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53166: LD_ADDR_VAR 0 62
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53254: LD_ADDR_VAR 0 63
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53342: LD_ADDR_VAR 0 64
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: ST_TO_ADDR
// end ; 1 :
53430: GO 59327
53432: LD_INT 1
53434: DOUBLE
53435: EQUAL
53436: IFTRUE 53440
53438: GO 56063
53440: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53441: LD_ADDR_VAR 0 11
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 3
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53485: LD_ADDR_VAR 0 12
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53526: LD_ADDR_VAR 0 13
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 3
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53566: LD_ADDR_VAR 0 14
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 3
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53607: LD_ADDR_VAR 0 15
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: LIST
53650: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53651: LD_ADDR_VAR 0 16
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 3
53682: NEG
53683: PUSH
53684: LD_INT 3
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: LIST
53696: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53697: LD_ADDR_VAR 0 17
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53741: LD_ADDR_VAR 0 18
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 3
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: LIST
53781: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53782: LD_ADDR_VAR 0 19
53786: PUSH
53787: LD_INT 3
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 3
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53822: LD_ADDR_VAR 0 20
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53863: LD_ADDR_VAR 0 21
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 3
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: LIST
53906: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53907: LD_ADDR_VAR 0 22
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53953: LD_ADDR_VAR 0 23
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 4
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 3
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: LIST
53996: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53997: LD_ADDR_VAR 0 24
54001: PUSH
54002: LD_INT 3
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 4
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: LIST
54037: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54038: LD_ADDR_VAR 0 25
54042: PUSH
54043: LD_INT 3
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 4
54055: PUSH
54056: LD_INT 3
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: LD_INT 4
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54078: LD_ADDR_VAR 0 26
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 3
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 4
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54119: LD_ADDR_VAR 0 27
54123: PUSH
54124: LD_INT 3
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 4
54148: NEG
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54163: LD_ADDR_VAR 0 28
54167: PUSH
54168: LD_INT 3
54170: NEG
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: NEG
54183: PUSH
54184: LD_INT 4
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 4
54194: NEG
54195: PUSH
54196: LD_INT 3
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54209: LD_ADDR_VAR 0 29
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 3
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 4
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 4
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 3
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 5
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 5
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 4
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 6
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 6
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 5
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54364: LD_ADDR_VAR 0 30
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 4
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 4
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 4
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 5
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 5
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 5
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 6
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 6
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54507: LD_ADDR_VAR 0 31
54511: PUSH
54512: LD_INT 3
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 4
54544: PUSH
54545: LD_INT 3
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 4
54554: PUSH
54555: LD_INT 4
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: LD_INT 4
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 5
54574: PUSH
54575: LD_INT 4
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 5
54584: PUSH
54585: LD_INT 5
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 4
54594: PUSH
54595: LD_INT 5
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 6
54604: PUSH
54605: LD_INT 5
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 6
54614: PUSH
54615: LD_INT 6
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 5
54624: PUSH
54625: LD_INT 6
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54646: LD_ADDR_VAR 0 32
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 3
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 3
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 4
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 4
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 5
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 5
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 4
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 6
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 6
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 5
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54789: LD_ADDR_VAR 0 33
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 4
54841: NEG
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 4
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 4
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 5
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 5
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 5
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 6
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 6
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54944: LD_ADDR_VAR 0 34
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: LD_INT 3
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 3
54975: NEG
54976: PUSH
54977: LD_INT 3
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: LD_INT 4
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 4
54999: NEG
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 4
55011: NEG
55012: PUSH
55013: LD_INT 4
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 4
55023: NEG
55024: PUSH
55025: LD_INT 5
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 5
55035: NEG
55036: PUSH
55037: LD_INT 4
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 5
55047: NEG
55048: PUSH
55049: LD_INT 5
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 5
55059: NEG
55060: PUSH
55061: LD_INT 6
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 6
55071: NEG
55072: PUSH
55073: LD_INT 5
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 6
55083: NEG
55084: PUSH
55085: LD_INT 6
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55107: LD_ADDR_VAR 0 41
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55151: LD_ADDR_VAR 0 42
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55192: LD_ADDR_VAR 0 43
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: LD_INT 3
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: LIST
55231: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55232: LD_ADDR_VAR 0 44
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: LIST
55272: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55273: LD_ADDR_VAR 0 45
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 3
55302: NEG
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: LIST
55316: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55317: LD_ADDR_VAR 0 46
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55363: LD_ADDR_VAR 0 47
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 3
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 3
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55396: LD_ADDR_VAR 0 48
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55427: LD_ADDR_VAR 0 49
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55456: LD_ADDR_VAR 0 50
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55485: LD_ADDR_VAR 0 51
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55516: LD_ADDR_VAR 0 52
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55549: LD_ADDR_VAR 0 53
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55593: LD_ADDR_VAR 0 54
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55634: LD_ADDR_VAR 0 55
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55674: LD_ADDR_VAR 0 56
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55715: LD_ADDR_VAR 0 57
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 3
55733: NEG
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 3
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55759: LD_ADDR_VAR 0 58
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: LD_INT 3
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: NEG
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 3
55790: NEG
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55805: LD_ADDR_VAR 0 59
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: LIST
55848: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55849: LD_ADDR_VAR 0 60
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55890: LD_ADDR_VAR 0 61
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55930: LD_ADDR_VAR 0 62
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55971: LD_ADDR_VAR 0 63
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56015: LD_ADDR_VAR 0 64
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: ST_TO_ADDR
// end ; 2 :
56061: GO 59327
56063: LD_INT 2
56065: DOUBLE
56066: EQUAL
56067: IFTRUE 56071
56069: GO 59326
56071: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56072: LD_ADDR_VAR 0 29
56076: PUSH
56077: LD_INT 4
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 4
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 5
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 5
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 4
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 3
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 5
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 4
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 4
56202: PUSH
56203: LD_INT 4
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: LD_INT 4
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 4
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 3
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 5
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 5
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: LD_INT 4
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 5
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 3
56355: NEG
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 4
56411: NEG
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 4
56434: NEG
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 4
56457: NEG
56458: PUSH
56459: LD_INT 4
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 4
56469: NEG
56470: PUSH
56471: LD_INT 5
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 4
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 4
56505: NEG
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 5
56517: NEG
56518: PUSH
56519: LD_INT 4
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 5
56529: NEG
56530: PUSH
56531: LD_INT 5
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 3
56541: NEG
56542: PUSH
56543: LD_INT 5
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 5
56553: NEG
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56610: LD_ADDR_VAR 0 30
56614: PUSH
56615: LD_INT 4
56617: PUSH
56618: LD_INT 4
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 4
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 5
56637: PUSH
56638: LD_INT 4
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 5
56647: PUSH
56648: LD_INT 5
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: LD_INT 5
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: PUSH
56668: LD_INT 4
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: LD_INT 3
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 5
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 5
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: LD_INT 4
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 4
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: LD_INT 3
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 4
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 4
56800: NEG
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 4
56811: NEG
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 3
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 4
56845: NEG
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 5
56856: NEG
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 5
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 5
56879: NEG
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 3
56891: NEG
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: NEG
56903: PUSH
56904: LD_INT 3
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: NEG
56915: PUSH
56916: LD_INT 4
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 2
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 3
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 4
56962: NEG
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 4
56974: NEG
56975: PUSH
56976: LD_INT 4
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: LD_INT 4
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 4
56998: NEG
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 4
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 5
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 4
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 4
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 5
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: LD_INT 5
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57157: LD_ADDR_VAR 0 31
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: LD_INT 4
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 5
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 5
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 4
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 3
57257: NEG
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: NEG
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 4
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: NEG
57360: PUSH
57361: LD_INT 4
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 4
57371: NEG
57372: PUSH
57373: LD_INT 5
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: LD_INT 4
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 3
57395: NEG
57396: PUSH
57397: LD_INT 3
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 4
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 5
57419: NEG
57420: PUSH
57421: LD_INT 4
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 5
57431: NEG
57432: PUSH
57433: LD_INT 5
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: LD_INT 5
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 3
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 4
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: LD_INT 3
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 4
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: LD_INT 4
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 4
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 4
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 5
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 5
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 5
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57707: LD_ADDR_VAR 0 32
57711: PUSH
57712: LD_INT 4
57714: NEG
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 4
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 3
57737: NEG
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 4
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 5
57770: NEG
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 5
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 5
57793: NEG
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: LD_INT 3
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 3
57828: NEG
57829: PUSH
57830: LD_INT 4
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 3
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 4
57876: NEG
57877: PUSH
57878: LD_INT 3
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 4
57888: NEG
57889: PUSH
57890: LD_INT 4
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: LD_INT 4
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 4
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 5
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 4
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: LD_INT 3
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: LD_INT 4
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 5
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: LD_INT 5
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 4
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 4
58119: PUSH
58120: LD_INT 4
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 4
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 5
58139: PUSH
58140: LD_INT 4
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 5
58149: PUSH
58150: LD_INT 5
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 4
58159: PUSH
58160: LD_INT 5
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: LD_INT 4
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 5
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 5
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58254: LD_ADDR_VAR 0 33
58258: PUSH
58259: LD_INT 4
58261: NEG
58262: PUSH
58263: LD_INT 4
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: LD_INT 5
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: LD_INT 4
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 3
58297: NEG
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 4
58309: NEG
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 5
58321: NEG
58322: PUSH
58323: LD_INT 4
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 5
58333: NEG
58334: PUSH
58335: LD_INT 5
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 3
58345: NEG
58346: PUSH
58347: LD_INT 5
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 5
58357: NEG
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 3
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 4
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 3
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 4
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: LD_INT 4
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 4
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 4
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 5
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 5
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 4
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 3
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 5
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 4
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: LD_INT 4
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 4
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 4
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 4
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 4
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 5
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 5
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: LD_INT 4
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 5
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 3
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58792: LD_ADDR_VAR 0 34
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 4
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 5
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 4
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: LD_INT 4
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 5
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: NEG
58890: PUSH
58891: LD_INT 5
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 4
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 4
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 4
58994: PUSH
58995: LD_INT 4
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 4
59004: PUSH
59005: LD_INT 3
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 5
59014: PUSH
59015: LD_INT 4
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 5
59024: PUSH
59025: LD_INT 5
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 4
59034: PUSH
59035: LD_INT 5
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: LD_INT 4
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: LD_INT 3
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 5
59064: PUSH
59065: LD_INT 3
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 3
59074: PUSH
59075: LD_INT 5
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 3
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 4
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 4
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 4
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 4
59177: NEG
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 4
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 4
59222: NEG
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 5
59233: NEG
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 5
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 5
59256: NEG
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 3
59268: NEG
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: ST_TO_ADDR
// end ; end ;
59324: GO 59327
59326: POP
// case btype of b_depot , b_warehouse :
59327: LD_VAR 0 1
59331: PUSH
59332: LD_INT 0
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59346
59338: LD_INT 1
59340: DOUBLE
59341: EQUAL
59342: IFTRUE 59346
59344: GO 59547
59346: POP
// case nation of nation_american :
59347: LD_VAR 0 5
59351: PUSH
59352: LD_INT 1
59354: DOUBLE
59355: EQUAL
59356: IFTRUE 59360
59358: GO 59416
59360: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59361: LD_ADDR_VAR 0 9
59365: PUSH
59366: LD_VAR 0 11
59370: PUSH
59371: LD_VAR 0 12
59375: PUSH
59376: LD_VAR 0 13
59380: PUSH
59381: LD_VAR 0 14
59385: PUSH
59386: LD_VAR 0 15
59390: PUSH
59391: LD_VAR 0 16
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: PUSH
59404: LD_VAR 0 4
59408: PUSH
59409: LD_INT 1
59411: PLUS
59412: ARRAY
59413: ST_TO_ADDR
59414: GO 59545
59416: LD_INT 2
59418: DOUBLE
59419: EQUAL
59420: IFTRUE 59424
59422: GO 59480
59424: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59425: LD_ADDR_VAR 0 9
59429: PUSH
59430: LD_VAR 0 17
59434: PUSH
59435: LD_VAR 0 18
59439: PUSH
59440: LD_VAR 0 19
59444: PUSH
59445: LD_VAR 0 20
59449: PUSH
59450: LD_VAR 0 21
59454: PUSH
59455: LD_VAR 0 22
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: PUSH
59468: LD_VAR 0 4
59472: PUSH
59473: LD_INT 1
59475: PLUS
59476: ARRAY
59477: ST_TO_ADDR
59478: GO 59545
59480: LD_INT 3
59482: DOUBLE
59483: EQUAL
59484: IFTRUE 59488
59486: GO 59544
59488: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59489: LD_ADDR_VAR 0 9
59493: PUSH
59494: LD_VAR 0 23
59498: PUSH
59499: LD_VAR 0 24
59503: PUSH
59504: LD_VAR 0 25
59508: PUSH
59509: LD_VAR 0 26
59513: PUSH
59514: LD_VAR 0 27
59518: PUSH
59519: LD_VAR 0 28
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: PUSH
59532: LD_VAR 0 4
59536: PUSH
59537: LD_INT 1
59539: PLUS
59540: ARRAY
59541: ST_TO_ADDR
59542: GO 59545
59544: POP
59545: GO 60100
59547: LD_INT 2
59549: DOUBLE
59550: EQUAL
59551: IFTRUE 59561
59553: LD_INT 3
59555: DOUBLE
59556: EQUAL
59557: IFTRUE 59561
59559: GO 59617
59561: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59562: LD_ADDR_VAR 0 9
59566: PUSH
59567: LD_VAR 0 29
59571: PUSH
59572: LD_VAR 0 30
59576: PUSH
59577: LD_VAR 0 31
59581: PUSH
59582: LD_VAR 0 32
59586: PUSH
59587: LD_VAR 0 33
59591: PUSH
59592: LD_VAR 0 34
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: PUSH
59605: LD_VAR 0 4
59609: PUSH
59610: LD_INT 1
59612: PLUS
59613: ARRAY
59614: ST_TO_ADDR
59615: GO 60100
59617: LD_INT 16
59619: DOUBLE
59620: EQUAL
59621: IFTRUE 59679
59623: LD_INT 17
59625: DOUBLE
59626: EQUAL
59627: IFTRUE 59679
59629: LD_INT 18
59631: DOUBLE
59632: EQUAL
59633: IFTRUE 59679
59635: LD_INT 19
59637: DOUBLE
59638: EQUAL
59639: IFTRUE 59679
59641: LD_INT 22
59643: DOUBLE
59644: EQUAL
59645: IFTRUE 59679
59647: LD_INT 20
59649: DOUBLE
59650: EQUAL
59651: IFTRUE 59679
59653: LD_INT 21
59655: DOUBLE
59656: EQUAL
59657: IFTRUE 59679
59659: LD_INT 23
59661: DOUBLE
59662: EQUAL
59663: IFTRUE 59679
59665: LD_INT 24
59667: DOUBLE
59668: EQUAL
59669: IFTRUE 59679
59671: LD_INT 25
59673: DOUBLE
59674: EQUAL
59675: IFTRUE 59679
59677: GO 59735
59679: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59680: LD_ADDR_VAR 0 9
59684: PUSH
59685: LD_VAR 0 35
59689: PUSH
59690: LD_VAR 0 36
59694: PUSH
59695: LD_VAR 0 37
59699: PUSH
59700: LD_VAR 0 38
59704: PUSH
59705: LD_VAR 0 39
59709: PUSH
59710: LD_VAR 0 40
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: PUSH
59723: LD_VAR 0 4
59727: PUSH
59728: LD_INT 1
59730: PLUS
59731: ARRAY
59732: ST_TO_ADDR
59733: GO 60100
59735: LD_INT 6
59737: DOUBLE
59738: EQUAL
59739: IFTRUE 59791
59741: LD_INT 7
59743: DOUBLE
59744: EQUAL
59745: IFTRUE 59791
59747: LD_INT 8
59749: DOUBLE
59750: EQUAL
59751: IFTRUE 59791
59753: LD_INT 13
59755: DOUBLE
59756: EQUAL
59757: IFTRUE 59791
59759: LD_INT 12
59761: DOUBLE
59762: EQUAL
59763: IFTRUE 59791
59765: LD_INT 15
59767: DOUBLE
59768: EQUAL
59769: IFTRUE 59791
59771: LD_INT 11
59773: DOUBLE
59774: EQUAL
59775: IFTRUE 59791
59777: LD_INT 14
59779: DOUBLE
59780: EQUAL
59781: IFTRUE 59791
59783: LD_INT 10
59785: DOUBLE
59786: EQUAL
59787: IFTRUE 59791
59789: GO 59847
59791: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59792: LD_ADDR_VAR 0 9
59796: PUSH
59797: LD_VAR 0 41
59801: PUSH
59802: LD_VAR 0 42
59806: PUSH
59807: LD_VAR 0 43
59811: PUSH
59812: LD_VAR 0 44
59816: PUSH
59817: LD_VAR 0 45
59821: PUSH
59822: LD_VAR 0 46
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: PUSH
59835: LD_VAR 0 4
59839: PUSH
59840: LD_INT 1
59842: PLUS
59843: ARRAY
59844: ST_TO_ADDR
59845: GO 60100
59847: LD_INT 36
59849: DOUBLE
59850: EQUAL
59851: IFTRUE 59855
59853: GO 59911
59855: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59856: LD_ADDR_VAR 0 9
59860: PUSH
59861: LD_VAR 0 47
59865: PUSH
59866: LD_VAR 0 48
59870: PUSH
59871: LD_VAR 0 49
59875: PUSH
59876: LD_VAR 0 50
59880: PUSH
59881: LD_VAR 0 51
59885: PUSH
59886: LD_VAR 0 52
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: PUSH
59899: LD_VAR 0 4
59903: PUSH
59904: LD_INT 1
59906: PLUS
59907: ARRAY
59908: ST_TO_ADDR
59909: GO 60100
59911: LD_INT 4
59913: DOUBLE
59914: EQUAL
59915: IFTRUE 59937
59917: LD_INT 5
59919: DOUBLE
59920: EQUAL
59921: IFTRUE 59937
59923: LD_INT 34
59925: DOUBLE
59926: EQUAL
59927: IFTRUE 59937
59929: LD_INT 37
59931: DOUBLE
59932: EQUAL
59933: IFTRUE 59937
59935: GO 59993
59937: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59938: LD_ADDR_VAR 0 9
59942: PUSH
59943: LD_VAR 0 53
59947: PUSH
59948: LD_VAR 0 54
59952: PUSH
59953: LD_VAR 0 55
59957: PUSH
59958: LD_VAR 0 56
59962: PUSH
59963: LD_VAR 0 57
59967: PUSH
59968: LD_VAR 0 58
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: PUSH
59981: LD_VAR 0 4
59985: PUSH
59986: LD_INT 1
59988: PLUS
59989: ARRAY
59990: ST_TO_ADDR
59991: GO 60100
59993: LD_INT 31
59995: DOUBLE
59996: EQUAL
59997: IFTRUE 60043
59999: LD_INT 32
60001: DOUBLE
60002: EQUAL
60003: IFTRUE 60043
60005: LD_INT 33
60007: DOUBLE
60008: EQUAL
60009: IFTRUE 60043
60011: LD_INT 27
60013: DOUBLE
60014: EQUAL
60015: IFTRUE 60043
60017: LD_INT 26
60019: DOUBLE
60020: EQUAL
60021: IFTRUE 60043
60023: LD_INT 28
60025: DOUBLE
60026: EQUAL
60027: IFTRUE 60043
60029: LD_INT 29
60031: DOUBLE
60032: EQUAL
60033: IFTRUE 60043
60035: LD_INT 30
60037: DOUBLE
60038: EQUAL
60039: IFTRUE 60043
60041: GO 60099
60043: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60044: LD_ADDR_VAR 0 9
60048: PUSH
60049: LD_VAR 0 59
60053: PUSH
60054: LD_VAR 0 60
60058: PUSH
60059: LD_VAR 0 61
60063: PUSH
60064: LD_VAR 0 62
60068: PUSH
60069: LD_VAR 0 63
60073: PUSH
60074: LD_VAR 0 64
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: PUSH
60087: LD_VAR 0 4
60091: PUSH
60092: LD_INT 1
60094: PLUS
60095: ARRAY
60096: ST_TO_ADDR
60097: GO 60100
60099: POP
// temp_list2 = [ ] ;
60100: LD_ADDR_VAR 0 10
60104: PUSH
60105: EMPTY
60106: ST_TO_ADDR
// for i in temp_list do
60107: LD_ADDR_VAR 0 8
60111: PUSH
60112: LD_VAR 0 9
60116: PUSH
60117: FOR_IN
60118: IFFALSE 60170
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60120: LD_ADDR_VAR 0 10
60124: PUSH
60125: LD_VAR 0 10
60129: PUSH
60130: LD_VAR 0 8
60134: PUSH
60135: LD_INT 1
60137: ARRAY
60138: PUSH
60139: LD_VAR 0 2
60143: PLUS
60144: PUSH
60145: LD_VAR 0 8
60149: PUSH
60150: LD_INT 2
60152: ARRAY
60153: PUSH
60154: LD_VAR 0 3
60158: PLUS
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: EMPTY
60165: LIST
60166: ADD
60167: ST_TO_ADDR
60168: GO 60117
60170: POP
60171: POP
// result = temp_list2 ;
60172: LD_ADDR_VAR 0 7
60176: PUSH
60177: LD_VAR 0 10
60181: ST_TO_ADDR
// end ;
60182: LD_VAR 0 7
60186: RET
// export function EnemyInRange ( unit , dist ) ; begin
60187: LD_INT 0
60189: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60190: LD_ADDR_VAR 0 3
60194: PUSH
60195: LD_VAR 0 1
60199: PPUSH
60200: CALL_OW 255
60204: PPUSH
60205: LD_VAR 0 1
60209: PPUSH
60210: CALL_OW 250
60214: PPUSH
60215: LD_VAR 0 1
60219: PPUSH
60220: CALL_OW 251
60224: PPUSH
60225: LD_VAR 0 2
60229: PPUSH
60230: CALL 33583 0 4
60234: PUSH
60235: LD_INT 4
60237: ARRAY
60238: ST_TO_ADDR
// end ;
60239: LD_VAR 0 3
60243: RET
// export function PlayerSeeMe ( unit ) ; begin
60244: LD_INT 0
60246: PPUSH
// result := See ( your_side , unit ) ;
60247: LD_ADDR_VAR 0 2
60251: PUSH
60252: LD_OWVAR 2
60256: PPUSH
60257: LD_VAR 0 1
60261: PPUSH
60262: CALL_OW 292
60266: ST_TO_ADDR
// end ;
60267: LD_VAR 0 2
60271: RET
// export function ReverseDir ( unit ) ; begin
60272: LD_INT 0
60274: PPUSH
// if not unit then
60275: LD_VAR 0 1
60279: NOT
60280: IFFALSE 60284
// exit ;
60282: GO 60307
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60284: LD_ADDR_VAR 0 2
60288: PUSH
60289: LD_VAR 0 1
60293: PPUSH
60294: CALL_OW 254
60298: PUSH
60299: LD_INT 3
60301: PLUS
60302: PUSH
60303: LD_INT 6
60305: MOD
60306: ST_TO_ADDR
// end ;
60307: LD_VAR 0 2
60311: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60312: LD_INT 0
60314: PPUSH
60315: PPUSH
60316: PPUSH
60317: PPUSH
60318: PPUSH
// if not hexes then
60319: LD_VAR 0 2
60323: NOT
60324: IFFALSE 60328
// exit ;
60326: GO 60476
// dist := 9999 ;
60328: LD_ADDR_VAR 0 5
60332: PUSH
60333: LD_INT 9999
60335: ST_TO_ADDR
// for i = 1 to hexes do
60336: LD_ADDR_VAR 0 4
60340: PUSH
60341: DOUBLE
60342: LD_INT 1
60344: DEC
60345: ST_TO_ADDR
60346: LD_VAR 0 2
60350: PUSH
60351: FOR_TO
60352: IFFALSE 60464
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60354: LD_VAR 0 1
60358: PPUSH
60359: LD_VAR 0 2
60363: PUSH
60364: LD_VAR 0 4
60368: ARRAY
60369: PUSH
60370: LD_INT 1
60372: ARRAY
60373: PPUSH
60374: LD_VAR 0 2
60378: PUSH
60379: LD_VAR 0 4
60383: ARRAY
60384: PUSH
60385: LD_INT 2
60387: ARRAY
60388: PPUSH
60389: CALL_OW 297
60393: PUSH
60394: LD_VAR 0 5
60398: LESS
60399: IFFALSE 60462
// begin hex := hexes [ i ] ;
60401: LD_ADDR_VAR 0 7
60405: PUSH
60406: LD_VAR 0 2
60410: PUSH
60411: LD_VAR 0 4
60415: ARRAY
60416: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60417: LD_ADDR_VAR 0 5
60421: PUSH
60422: LD_VAR 0 1
60426: PPUSH
60427: LD_VAR 0 2
60431: PUSH
60432: LD_VAR 0 4
60436: ARRAY
60437: PUSH
60438: LD_INT 1
60440: ARRAY
60441: PPUSH
60442: LD_VAR 0 2
60446: PUSH
60447: LD_VAR 0 4
60451: ARRAY
60452: PUSH
60453: LD_INT 2
60455: ARRAY
60456: PPUSH
60457: CALL_OW 297
60461: ST_TO_ADDR
// end ; end ;
60462: GO 60351
60464: POP
60465: POP
// result := hex ;
60466: LD_ADDR_VAR 0 3
60470: PUSH
60471: LD_VAR 0 7
60475: ST_TO_ADDR
// end ;
60476: LD_VAR 0 3
60480: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60481: LD_INT 0
60483: PPUSH
60484: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60485: LD_VAR 0 1
60489: NOT
60490: PUSH
60491: LD_VAR 0 1
60495: PUSH
60496: LD_INT 21
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 23
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PPUSH
60520: CALL_OW 69
60524: IN
60525: NOT
60526: OR
60527: IFFALSE 60531
// exit ;
60529: GO 60578
// for i = 1 to 3 do
60531: LD_ADDR_VAR 0 3
60535: PUSH
60536: DOUBLE
60537: LD_INT 1
60539: DEC
60540: ST_TO_ADDR
60541: LD_INT 3
60543: PUSH
60544: FOR_TO
60545: IFFALSE 60576
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60547: LD_VAR 0 1
60551: PPUSH
60552: CALL_OW 250
60556: PPUSH
60557: LD_VAR 0 1
60561: PPUSH
60562: CALL_OW 251
60566: PPUSH
60567: LD_INT 1
60569: PPUSH
60570: CALL_OW 453
60574: GO 60544
60576: POP
60577: POP
// end ;
60578: LD_VAR 0 2
60582: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60583: LD_INT 0
60585: PPUSH
60586: PPUSH
60587: PPUSH
60588: PPUSH
60589: PPUSH
60590: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60591: LD_VAR 0 1
60595: NOT
60596: PUSH
60597: LD_VAR 0 2
60601: NOT
60602: OR
60603: PUSH
60604: LD_VAR 0 1
60608: PPUSH
60609: CALL_OW 314
60613: OR
60614: IFFALSE 60618
// exit ;
60616: GO 61059
// x := GetX ( enemy_unit ) ;
60618: LD_ADDR_VAR 0 7
60622: PUSH
60623: LD_VAR 0 2
60627: PPUSH
60628: CALL_OW 250
60632: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60633: LD_ADDR_VAR 0 8
60637: PUSH
60638: LD_VAR 0 2
60642: PPUSH
60643: CALL_OW 251
60647: ST_TO_ADDR
// if not x or not y then
60648: LD_VAR 0 7
60652: NOT
60653: PUSH
60654: LD_VAR 0 8
60658: NOT
60659: OR
60660: IFFALSE 60664
// exit ;
60662: GO 61059
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60664: LD_ADDR_VAR 0 6
60668: PUSH
60669: LD_VAR 0 7
60673: PPUSH
60674: LD_INT 0
60676: PPUSH
60677: LD_INT 4
60679: PPUSH
60680: CALL_OW 272
60684: PUSH
60685: LD_VAR 0 8
60689: PPUSH
60690: LD_INT 0
60692: PPUSH
60693: LD_INT 4
60695: PPUSH
60696: CALL_OW 273
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_VAR 0 7
60709: PPUSH
60710: LD_INT 1
60712: PPUSH
60713: LD_INT 4
60715: PPUSH
60716: CALL_OW 272
60720: PUSH
60721: LD_VAR 0 8
60725: PPUSH
60726: LD_INT 1
60728: PPUSH
60729: LD_INT 4
60731: PPUSH
60732: CALL_OW 273
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_VAR 0 7
60745: PPUSH
60746: LD_INT 2
60748: PPUSH
60749: LD_INT 4
60751: PPUSH
60752: CALL_OW 272
60756: PUSH
60757: LD_VAR 0 8
60761: PPUSH
60762: LD_INT 2
60764: PPUSH
60765: LD_INT 4
60767: PPUSH
60768: CALL_OW 273
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_VAR 0 7
60781: PPUSH
60782: LD_INT 3
60784: PPUSH
60785: LD_INT 4
60787: PPUSH
60788: CALL_OW 272
60792: PUSH
60793: LD_VAR 0 8
60797: PPUSH
60798: LD_INT 3
60800: PPUSH
60801: LD_INT 4
60803: PPUSH
60804: CALL_OW 273
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_VAR 0 7
60817: PPUSH
60818: LD_INT 4
60820: PPUSH
60821: LD_INT 4
60823: PPUSH
60824: CALL_OW 272
60828: PUSH
60829: LD_VAR 0 8
60833: PPUSH
60834: LD_INT 4
60836: PPUSH
60837: LD_INT 4
60839: PPUSH
60840: CALL_OW 273
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_VAR 0 7
60853: PPUSH
60854: LD_INT 5
60856: PPUSH
60857: LD_INT 4
60859: PPUSH
60860: CALL_OW 272
60864: PUSH
60865: LD_VAR 0 8
60869: PPUSH
60870: LD_INT 5
60872: PPUSH
60873: LD_INT 4
60875: PPUSH
60876: CALL_OW 273
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: ST_TO_ADDR
// for i = tmp downto 1 do
60893: LD_ADDR_VAR 0 4
60897: PUSH
60898: DOUBLE
60899: LD_VAR 0 6
60903: INC
60904: ST_TO_ADDR
60905: LD_INT 1
60907: PUSH
60908: FOR_DOWNTO
60909: IFFALSE 61010
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60911: LD_VAR 0 6
60915: PUSH
60916: LD_VAR 0 4
60920: ARRAY
60921: PUSH
60922: LD_INT 1
60924: ARRAY
60925: PPUSH
60926: LD_VAR 0 6
60930: PUSH
60931: LD_VAR 0 4
60935: ARRAY
60936: PUSH
60937: LD_INT 2
60939: ARRAY
60940: PPUSH
60941: CALL_OW 488
60945: NOT
60946: PUSH
60947: LD_VAR 0 6
60951: PUSH
60952: LD_VAR 0 4
60956: ARRAY
60957: PUSH
60958: LD_INT 1
60960: ARRAY
60961: PPUSH
60962: LD_VAR 0 6
60966: PUSH
60967: LD_VAR 0 4
60971: ARRAY
60972: PUSH
60973: LD_INT 2
60975: ARRAY
60976: PPUSH
60977: CALL_OW 428
60981: PUSH
60982: LD_INT 0
60984: NONEQUAL
60985: OR
60986: IFFALSE 61008
// tmp := Delete ( tmp , i ) ;
60988: LD_ADDR_VAR 0 6
60992: PUSH
60993: LD_VAR 0 6
60997: PPUSH
60998: LD_VAR 0 4
61002: PPUSH
61003: CALL_OW 3
61007: ST_TO_ADDR
61008: GO 60908
61010: POP
61011: POP
// j := GetClosestHex ( unit , tmp ) ;
61012: LD_ADDR_VAR 0 5
61016: PUSH
61017: LD_VAR 0 1
61021: PPUSH
61022: LD_VAR 0 6
61026: PPUSH
61027: CALL 60312 0 2
61031: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61032: LD_VAR 0 1
61036: PPUSH
61037: LD_VAR 0 5
61041: PUSH
61042: LD_INT 1
61044: ARRAY
61045: PPUSH
61046: LD_VAR 0 5
61050: PUSH
61051: LD_INT 2
61053: ARRAY
61054: PPUSH
61055: CALL_OW 111
// end ;
61059: LD_VAR 0 3
61063: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61064: LD_INT 0
61066: PPUSH
61067: PPUSH
61068: PPUSH
// uc_side = 0 ;
61069: LD_ADDR_OWVAR 20
61073: PUSH
61074: LD_INT 0
61076: ST_TO_ADDR
// uc_nation = 0 ;
61077: LD_ADDR_OWVAR 21
61081: PUSH
61082: LD_INT 0
61084: ST_TO_ADDR
// InitHc_All ( ) ;
61085: CALL_OW 584
// InitVc ;
61089: CALL_OW 20
// if mastodonts then
61093: LD_VAR 0 6
61097: IFFALSE 61164
// for i = 1 to mastodonts do
61099: LD_ADDR_VAR 0 11
61103: PUSH
61104: DOUBLE
61105: LD_INT 1
61107: DEC
61108: ST_TO_ADDR
61109: LD_VAR 0 6
61113: PUSH
61114: FOR_TO
61115: IFFALSE 61162
// begin vc_chassis := 31 ;
61117: LD_ADDR_OWVAR 37
61121: PUSH
61122: LD_INT 31
61124: ST_TO_ADDR
// vc_control := control_rider ;
61125: LD_ADDR_OWVAR 38
61129: PUSH
61130: LD_INT 4
61132: ST_TO_ADDR
// animal := CreateVehicle ;
61133: LD_ADDR_VAR 0 12
61137: PUSH
61138: CALL_OW 45
61142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61143: LD_VAR 0 12
61147: PPUSH
61148: LD_VAR 0 8
61152: PPUSH
61153: LD_INT 0
61155: PPUSH
61156: CALL 63352 0 3
// end ;
61160: GO 61114
61162: POP
61163: POP
// if horses then
61164: LD_VAR 0 5
61168: IFFALSE 61235
// for i = 1 to horses do
61170: LD_ADDR_VAR 0 11
61174: PUSH
61175: DOUBLE
61176: LD_INT 1
61178: DEC
61179: ST_TO_ADDR
61180: LD_VAR 0 5
61184: PUSH
61185: FOR_TO
61186: IFFALSE 61233
// begin hc_class := 21 ;
61188: LD_ADDR_OWVAR 28
61192: PUSH
61193: LD_INT 21
61195: ST_TO_ADDR
// hc_gallery :=  ;
61196: LD_ADDR_OWVAR 33
61200: PUSH
61201: LD_STRING 
61203: ST_TO_ADDR
// animal := CreateHuman ;
61204: LD_ADDR_VAR 0 12
61208: PUSH
61209: CALL_OW 44
61213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61214: LD_VAR 0 12
61218: PPUSH
61219: LD_VAR 0 8
61223: PPUSH
61224: LD_INT 0
61226: PPUSH
61227: CALL 63352 0 3
// end ;
61231: GO 61185
61233: POP
61234: POP
// if birds then
61235: LD_VAR 0 1
61239: IFFALSE 61306
// for i = 1 to birds do
61241: LD_ADDR_VAR 0 11
61245: PUSH
61246: DOUBLE
61247: LD_INT 1
61249: DEC
61250: ST_TO_ADDR
61251: LD_VAR 0 1
61255: PUSH
61256: FOR_TO
61257: IFFALSE 61304
// begin hc_class = 18 ;
61259: LD_ADDR_OWVAR 28
61263: PUSH
61264: LD_INT 18
61266: ST_TO_ADDR
// hc_gallery =  ;
61267: LD_ADDR_OWVAR 33
61271: PUSH
61272: LD_STRING 
61274: ST_TO_ADDR
// animal := CreateHuman ;
61275: LD_ADDR_VAR 0 12
61279: PUSH
61280: CALL_OW 44
61284: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61285: LD_VAR 0 12
61289: PPUSH
61290: LD_VAR 0 8
61294: PPUSH
61295: LD_INT 0
61297: PPUSH
61298: CALL 63352 0 3
// end ;
61302: GO 61256
61304: POP
61305: POP
// if tigers then
61306: LD_VAR 0 2
61310: IFFALSE 61394
// for i = 1 to tigers do
61312: LD_ADDR_VAR 0 11
61316: PUSH
61317: DOUBLE
61318: LD_INT 1
61320: DEC
61321: ST_TO_ADDR
61322: LD_VAR 0 2
61326: PUSH
61327: FOR_TO
61328: IFFALSE 61392
// begin hc_class = class_tiger ;
61330: LD_ADDR_OWVAR 28
61334: PUSH
61335: LD_INT 14
61337: ST_TO_ADDR
// hc_gallery =  ;
61338: LD_ADDR_OWVAR 33
61342: PUSH
61343: LD_STRING 
61345: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61346: LD_ADDR_OWVAR 35
61350: PUSH
61351: LD_INT 7
61353: NEG
61354: PPUSH
61355: LD_INT 7
61357: PPUSH
61358: CALL_OW 12
61362: ST_TO_ADDR
// animal := CreateHuman ;
61363: LD_ADDR_VAR 0 12
61367: PUSH
61368: CALL_OW 44
61372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61373: LD_VAR 0 12
61377: PPUSH
61378: LD_VAR 0 8
61382: PPUSH
61383: LD_INT 0
61385: PPUSH
61386: CALL 63352 0 3
// end ;
61390: GO 61327
61392: POP
61393: POP
// if apemans then
61394: LD_VAR 0 3
61398: IFFALSE 61521
// for i = 1 to apemans do
61400: LD_ADDR_VAR 0 11
61404: PUSH
61405: DOUBLE
61406: LD_INT 1
61408: DEC
61409: ST_TO_ADDR
61410: LD_VAR 0 3
61414: PUSH
61415: FOR_TO
61416: IFFALSE 61519
// begin hc_class = class_apeman ;
61418: LD_ADDR_OWVAR 28
61422: PUSH
61423: LD_INT 12
61425: ST_TO_ADDR
// hc_gallery =  ;
61426: LD_ADDR_OWVAR 33
61430: PUSH
61431: LD_STRING 
61433: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61434: LD_ADDR_OWVAR 35
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PPUSH
61443: LD_INT 2
61445: PPUSH
61446: CALL_OW 12
61450: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61451: LD_ADDR_OWVAR 31
61455: PUSH
61456: LD_INT 1
61458: PPUSH
61459: LD_INT 3
61461: PPUSH
61462: CALL_OW 12
61466: PUSH
61467: LD_INT 1
61469: PPUSH
61470: LD_INT 3
61472: PPUSH
61473: CALL_OW 12
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// animal := CreateHuman ;
61490: LD_ADDR_VAR 0 12
61494: PUSH
61495: CALL_OW 44
61499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61500: LD_VAR 0 12
61504: PPUSH
61505: LD_VAR 0 8
61509: PPUSH
61510: LD_INT 0
61512: PPUSH
61513: CALL 63352 0 3
// end ;
61517: GO 61415
61519: POP
61520: POP
// if enchidnas then
61521: LD_VAR 0 4
61525: IFFALSE 61592
// for i = 1 to enchidnas do
61527: LD_ADDR_VAR 0 11
61531: PUSH
61532: DOUBLE
61533: LD_INT 1
61535: DEC
61536: ST_TO_ADDR
61537: LD_VAR 0 4
61541: PUSH
61542: FOR_TO
61543: IFFALSE 61590
// begin hc_class = 13 ;
61545: LD_ADDR_OWVAR 28
61549: PUSH
61550: LD_INT 13
61552: ST_TO_ADDR
// hc_gallery =  ;
61553: LD_ADDR_OWVAR 33
61557: PUSH
61558: LD_STRING 
61560: ST_TO_ADDR
// animal := CreateHuman ;
61561: LD_ADDR_VAR 0 12
61565: PUSH
61566: CALL_OW 44
61570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61571: LD_VAR 0 12
61575: PPUSH
61576: LD_VAR 0 8
61580: PPUSH
61581: LD_INT 0
61583: PPUSH
61584: CALL 63352 0 3
// end ;
61588: GO 61542
61590: POP
61591: POP
// if fishes then
61592: LD_VAR 0 7
61596: IFFALSE 61663
// for i = 1 to fishes do
61598: LD_ADDR_VAR 0 11
61602: PUSH
61603: DOUBLE
61604: LD_INT 1
61606: DEC
61607: ST_TO_ADDR
61608: LD_VAR 0 7
61612: PUSH
61613: FOR_TO
61614: IFFALSE 61661
// begin hc_class = 20 ;
61616: LD_ADDR_OWVAR 28
61620: PUSH
61621: LD_INT 20
61623: ST_TO_ADDR
// hc_gallery =  ;
61624: LD_ADDR_OWVAR 33
61628: PUSH
61629: LD_STRING 
61631: ST_TO_ADDR
// animal := CreateHuman ;
61632: LD_ADDR_VAR 0 12
61636: PUSH
61637: CALL_OW 44
61641: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61642: LD_VAR 0 12
61646: PPUSH
61647: LD_VAR 0 9
61651: PPUSH
61652: LD_INT 0
61654: PPUSH
61655: CALL 63352 0 3
// end ;
61659: GO 61613
61661: POP
61662: POP
// end ;
61663: LD_VAR 0 10
61667: RET
// export function WantHeal ( sci , unit ) ; begin
61668: LD_INT 0
61670: PPUSH
// if GetTaskList ( sci ) > 0 then
61671: LD_VAR 0 1
61675: PPUSH
61676: CALL_OW 437
61680: PUSH
61681: LD_INT 0
61683: GREATER
61684: IFFALSE 61754
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61686: LD_VAR 0 1
61690: PPUSH
61691: CALL_OW 437
61695: PUSH
61696: LD_INT 1
61698: ARRAY
61699: PUSH
61700: LD_INT 1
61702: ARRAY
61703: PUSH
61704: LD_STRING l
61706: EQUAL
61707: PUSH
61708: LD_VAR 0 1
61712: PPUSH
61713: CALL_OW 437
61717: PUSH
61718: LD_INT 1
61720: ARRAY
61721: PUSH
61722: LD_INT 4
61724: ARRAY
61725: PUSH
61726: LD_VAR 0 2
61730: EQUAL
61731: AND
61732: IFFALSE 61744
// result := true else
61734: LD_ADDR_VAR 0 3
61738: PUSH
61739: LD_INT 1
61741: ST_TO_ADDR
61742: GO 61752
// result := false ;
61744: LD_ADDR_VAR 0 3
61748: PUSH
61749: LD_INT 0
61751: ST_TO_ADDR
// end else
61752: GO 61762
// result := false ;
61754: LD_ADDR_VAR 0 3
61758: PUSH
61759: LD_INT 0
61761: ST_TO_ADDR
// end ;
61762: LD_VAR 0 3
61766: RET
// export function HealTarget ( sci ) ; begin
61767: LD_INT 0
61769: PPUSH
// if not sci then
61770: LD_VAR 0 1
61774: NOT
61775: IFFALSE 61779
// exit ;
61777: GO 61844
// result := 0 ;
61779: LD_ADDR_VAR 0 2
61783: PUSH
61784: LD_INT 0
61786: ST_TO_ADDR
// if GetTaskList ( sci ) then
61787: LD_VAR 0 1
61791: PPUSH
61792: CALL_OW 437
61796: IFFALSE 61844
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61798: LD_VAR 0 1
61802: PPUSH
61803: CALL_OW 437
61807: PUSH
61808: LD_INT 1
61810: ARRAY
61811: PUSH
61812: LD_INT 1
61814: ARRAY
61815: PUSH
61816: LD_STRING l
61818: EQUAL
61819: IFFALSE 61844
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61821: LD_ADDR_VAR 0 2
61825: PUSH
61826: LD_VAR 0 1
61830: PPUSH
61831: CALL_OW 437
61835: PUSH
61836: LD_INT 1
61838: ARRAY
61839: PUSH
61840: LD_INT 4
61842: ARRAY
61843: ST_TO_ADDR
// end ;
61844: LD_VAR 0 2
61848: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61849: LD_INT 0
61851: PPUSH
61852: PPUSH
61853: PPUSH
61854: PPUSH
// if not base_units then
61855: LD_VAR 0 1
61859: NOT
61860: IFFALSE 61864
// exit ;
61862: GO 61951
// result := false ;
61864: LD_ADDR_VAR 0 2
61868: PUSH
61869: LD_INT 0
61871: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61872: LD_ADDR_VAR 0 5
61876: PUSH
61877: LD_VAR 0 1
61881: PPUSH
61882: LD_INT 21
61884: PUSH
61885: LD_INT 3
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PPUSH
61892: CALL_OW 72
61896: ST_TO_ADDR
// if not tmp then
61897: LD_VAR 0 5
61901: NOT
61902: IFFALSE 61906
// exit ;
61904: GO 61951
// for i in tmp do
61906: LD_ADDR_VAR 0 3
61910: PUSH
61911: LD_VAR 0 5
61915: PUSH
61916: FOR_IN
61917: IFFALSE 61949
// begin result := EnemyInRange ( i , 22 ) ;
61919: LD_ADDR_VAR 0 2
61923: PUSH
61924: LD_VAR 0 3
61928: PPUSH
61929: LD_INT 22
61931: PPUSH
61932: CALL 60187 0 2
61936: ST_TO_ADDR
// if result then
61937: LD_VAR 0 2
61941: IFFALSE 61947
// exit ;
61943: POP
61944: POP
61945: GO 61951
// end ;
61947: GO 61916
61949: POP
61950: POP
// end ;
61951: LD_VAR 0 2
61955: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61956: LD_INT 0
61958: PPUSH
61959: PPUSH
// if not units then
61960: LD_VAR 0 1
61964: NOT
61965: IFFALSE 61969
// exit ;
61967: GO 62039
// result := [ ] ;
61969: LD_ADDR_VAR 0 3
61973: PUSH
61974: EMPTY
61975: ST_TO_ADDR
// for i in units do
61976: LD_ADDR_VAR 0 4
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: FOR_IN
61987: IFFALSE 62037
// if GetTag ( i ) = tag then
61989: LD_VAR 0 4
61993: PPUSH
61994: CALL_OW 110
61998: PUSH
61999: LD_VAR 0 2
62003: EQUAL
62004: IFFALSE 62035
// result := Replace ( result , result + 1 , i ) ;
62006: LD_ADDR_VAR 0 3
62010: PUSH
62011: LD_VAR 0 3
62015: PPUSH
62016: LD_VAR 0 3
62020: PUSH
62021: LD_INT 1
62023: PLUS
62024: PPUSH
62025: LD_VAR 0 4
62029: PPUSH
62030: CALL_OW 1
62034: ST_TO_ADDR
62035: GO 61986
62037: POP
62038: POP
// end ;
62039: LD_VAR 0 3
62043: RET
// export function IsDriver ( un ) ; begin
62044: LD_INT 0
62046: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62047: LD_ADDR_VAR 0 2
62051: PUSH
62052: LD_VAR 0 1
62056: PUSH
62057: LD_INT 55
62059: PUSH
62060: EMPTY
62061: LIST
62062: PPUSH
62063: CALL_OW 69
62067: IN
62068: ST_TO_ADDR
// end ;
62069: LD_VAR 0 2
62073: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62074: LD_INT 0
62076: PPUSH
62077: PPUSH
// list := [ ] ;
62078: LD_ADDR_VAR 0 5
62082: PUSH
62083: EMPTY
62084: ST_TO_ADDR
// case d of 0 :
62085: LD_VAR 0 3
62089: PUSH
62090: LD_INT 0
62092: DOUBLE
62093: EQUAL
62094: IFTRUE 62098
62096: GO 62231
62098: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62099: LD_ADDR_VAR 0 5
62103: PUSH
62104: LD_VAR 0 1
62108: PUSH
62109: LD_INT 4
62111: MINUS
62112: PUSH
62113: LD_VAR 0 2
62117: PUSH
62118: LD_INT 4
62120: MINUS
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: PUSH
62130: LD_VAR 0 1
62134: PUSH
62135: LD_INT 3
62137: MINUS
62138: PUSH
62139: LD_VAR 0 2
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: PUSH
62152: LD_VAR 0 1
62156: PUSH
62157: LD_INT 4
62159: PLUS
62160: PUSH
62161: LD_VAR 0 2
62165: PUSH
62166: LD_INT 4
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: PUSH
62174: LD_VAR 0 1
62178: PUSH
62179: LD_INT 3
62181: PLUS
62182: PUSH
62183: LD_VAR 0 2
62187: PUSH
62188: LD_INT 3
62190: PLUS
62191: PUSH
62192: LD_INT 5
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: PUSH
62200: LD_VAR 0 1
62204: PUSH
62205: LD_VAR 0 2
62209: PUSH
62210: LD_INT 4
62212: PLUS
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: LIST
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: ST_TO_ADDR
// end ; 1 :
62229: GO 62929
62231: LD_INT 1
62233: DOUBLE
62234: EQUAL
62235: IFTRUE 62239
62237: GO 62372
62239: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62240: LD_ADDR_VAR 0 5
62244: PUSH
62245: LD_VAR 0 1
62249: PUSH
62250: LD_VAR 0 2
62254: PUSH
62255: LD_INT 4
62257: MINUS
62258: PUSH
62259: LD_INT 3
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: PUSH
62267: LD_VAR 0 1
62271: PUSH
62272: LD_INT 3
62274: MINUS
62275: PUSH
62276: LD_VAR 0 2
62280: PUSH
62281: LD_INT 3
62283: MINUS
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: PUSH
62293: LD_VAR 0 1
62297: PUSH
62298: LD_INT 4
62300: MINUS
62301: PUSH
62302: LD_VAR 0 2
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: PUSH
62315: LD_VAR 0 1
62319: PUSH
62320: LD_VAR 0 2
62324: PUSH
62325: LD_INT 3
62327: PLUS
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: LIST
62336: PUSH
62337: LD_VAR 0 1
62341: PUSH
62342: LD_INT 4
62344: PLUS
62345: PUSH
62346: LD_VAR 0 2
62350: PUSH
62351: LD_INT 4
62353: PLUS
62354: PUSH
62355: LD_INT 5
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: LIST
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: ST_TO_ADDR
// end ; 2 :
62370: GO 62929
62372: LD_INT 2
62374: DOUBLE
62375: EQUAL
62376: IFTRUE 62380
62378: GO 62509
62380: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62381: LD_ADDR_VAR 0 5
62385: PUSH
62386: LD_VAR 0 1
62390: PUSH
62391: LD_VAR 0 2
62395: PUSH
62396: LD_INT 3
62398: MINUS
62399: PUSH
62400: LD_INT 3
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: PUSH
62408: LD_VAR 0 1
62412: PUSH
62413: LD_INT 4
62415: PLUS
62416: PUSH
62417: LD_VAR 0 2
62421: PUSH
62422: LD_INT 4
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: LIST
62429: PUSH
62430: LD_VAR 0 1
62434: PUSH
62435: LD_VAR 0 2
62439: PUSH
62440: LD_INT 4
62442: PLUS
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: PUSH
62452: LD_VAR 0 1
62456: PUSH
62457: LD_INT 3
62459: MINUS
62460: PUSH
62461: LD_VAR 0 2
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: PUSH
62474: LD_VAR 0 1
62478: PUSH
62479: LD_INT 4
62481: MINUS
62482: PUSH
62483: LD_VAR 0 2
62487: PUSH
62488: LD_INT 4
62490: MINUS
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: LIST
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: ST_TO_ADDR
// end ; 3 :
62507: GO 62929
62509: LD_INT 3
62511: DOUBLE
62512: EQUAL
62513: IFTRUE 62517
62515: GO 62650
62517: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62518: LD_ADDR_VAR 0 5
62522: PUSH
62523: LD_VAR 0 1
62527: PUSH
62528: LD_INT 3
62530: PLUS
62531: PUSH
62532: LD_VAR 0 2
62536: PUSH
62537: LD_INT 4
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: LIST
62544: PUSH
62545: LD_VAR 0 1
62549: PUSH
62550: LD_INT 4
62552: PLUS
62553: PUSH
62554: LD_VAR 0 2
62558: PUSH
62559: LD_INT 4
62561: PLUS
62562: PUSH
62563: LD_INT 5
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: LIST
62570: PUSH
62571: LD_VAR 0 1
62575: PUSH
62576: LD_INT 4
62578: MINUS
62579: PUSH
62580: LD_VAR 0 2
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: PUSH
62593: LD_VAR 0 1
62597: PUSH
62598: LD_VAR 0 2
62602: PUSH
62603: LD_INT 4
62605: MINUS
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: LIST
62614: PUSH
62615: LD_VAR 0 1
62619: PUSH
62620: LD_INT 3
62622: MINUS
62623: PUSH
62624: LD_VAR 0 2
62628: PUSH
62629: LD_INT 3
62631: MINUS
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: ST_TO_ADDR
// end ; 4 :
62648: GO 62929
62650: LD_INT 4
62652: DOUBLE
62653: EQUAL
62654: IFTRUE 62658
62656: GO 62791
62658: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62659: LD_ADDR_VAR 0 5
62663: PUSH
62664: LD_VAR 0 1
62668: PUSH
62669: LD_VAR 0 2
62673: PUSH
62674: LD_INT 4
62676: PLUS
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: LIST
62685: PUSH
62686: LD_VAR 0 1
62690: PUSH
62691: LD_INT 3
62693: PLUS
62694: PUSH
62695: LD_VAR 0 2
62699: PUSH
62700: LD_INT 3
62702: PLUS
62703: PUSH
62704: LD_INT 5
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: LIST
62711: PUSH
62712: LD_VAR 0 1
62716: PUSH
62717: LD_INT 4
62719: PLUS
62720: PUSH
62721: LD_VAR 0 2
62725: PUSH
62726: LD_INT 4
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: PUSH
62734: LD_VAR 0 1
62738: PUSH
62739: LD_VAR 0 2
62743: PUSH
62744: LD_INT 3
62746: MINUS
62747: PUSH
62748: LD_INT 3
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: PUSH
62756: LD_VAR 0 1
62760: PUSH
62761: LD_INT 4
62763: MINUS
62764: PUSH
62765: LD_VAR 0 2
62769: PUSH
62770: LD_INT 4
62772: MINUS
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: LIST
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// end ; 5 :
62789: GO 62929
62791: LD_INT 5
62793: DOUBLE
62794: EQUAL
62795: IFTRUE 62799
62797: GO 62928
62799: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62800: LD_ADDR_VAR 0 5
62804: PUSH
62805: LD_VAR 0 1
62809: PUSH
62810: LD_INT 4
62812: MINUS
62813: PUSH
62814: LD_VAR 0 2
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: PUSH
62827: LD_VAR 0 1
62831: PUSH
62832: LD_VAR 0 2
62836: PUSH
62837: LD_INT 4
62839: MINUS
62840: PUSH
62841: LD_INT 3
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: LIST
62848: PUSH
62849: LD_VAR 0 1
62853: PUSH
62854: LD_INT 4
62856: PLUS
62857: PUSH
62858: LD_VAR 0 2
62862: PUSH
62863: LD_INT 4
62865: PLUS
62866: PUSH
62867: LD_INT 5
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: PUSH
62875: LD_VAR 0 1
62879: PUSH
62880: LD_INT 3
62882: PLUS
62883: PUSH
62884: LD_VAR 0 2
62888: PUSH
62889: LD_INT 4
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: LIST
62896: PUSH
62897: LD_VAR 0 1
62901: PUSH
62902: LD_VAR 0 2
62906: PUSH
62907: LD_INT 3
62909: PLUS
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: ST_TO_ADDR
// end ; end ;
62926: GO 62929
62928: POP
// result := list ;
62929: LD_ADDR_VAR 0 4
62933: PUSH
62934: LD_VAR 0 5
62938: ST_TO_ADDR
// end ;
62939: LD_VAR 0 4
62943: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62944: LD_INT 0
62946: PPUSH
62947: PPUSH
62948: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62949: LD_VAR 0 1
62953: NOT
62954: PUSH
62955: LD_VAR 0 2
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: LD_INT 3
62968: PUSH
62969: LD_INT 4
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: IN
62978: NOT
62979: OR
62980: IFFALSE 62984
// exit ;
62982: GO 63076
// tmp := [ ] ;
62984: LD_ADDR_VAR 0 5
62988: PUSH
62989: EMPTY
62990: ST_TO_ADDR
// for i in units do
62991: LD_ADDR_VAR 0 4
62995: PUSH
62996: LD_VAR 0 1
63000: PUSH
63001: FOR_IN
63002: IFFALSE 63045
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63004: LD_ADDR_VAR 0 5
63008: PUSH
63009: LD_VAR 0 5
63013: PPUSH
63014: LD_VAR 0 5
63018: PUSH
63019: LD_INT 1
63021: PLUS
63022: PPUSH
63023: LD_VAR 0 4
63027: PPUSH
63028: LD_VAR 0 2
63032: PPUSH
63033: CALL_OW 259
63037: PPUSH
63038: CALL_OW 2
63042: ST_TO_ADDR
63043: GO 63001
63045: POP
63046: POP
// if not tmp then
63047: LD_VAR 0 5
63051: NOT
63052: IFFALSE 63056
// exit ;
63054: GO 63076
// result := SortListByListDesc ( units , tmp ) ;
63056: LD_ADDR_VAR 0 3
63060: PUSH
63061: LD_VAR 0 1
63065: PPUSH
63066: LD_VAR 0 5
63070: PPUSH
63071: CALL_OW 77
63075: ST_TO_ADDR
// end ;
63076: LD_VAR 0 3
63080: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63081: LD_INT 0
63083: PPUSH
63084: PPUSH
63085: PPUSH
// result := false ;
63086: LD_ADDR_VAR 0 3
63090: PUSH
63091: LD_INT 0
63093: ST_TO_ADDR
// x := GetX ( building ) ;
63094: LD_ADDR_VAR 0 4
63098: PUSH
63099: LD_VAR 0 2
63103: PPUSH
63104: CALL_OW 250
63108: ST_TO_ADDR
// y := GetY ( building ) ;
63109: LD_ADDR_VAR 0 5
63113: PUSH
63114: LD_VAR 0 2
63118: PPUSH
63119: CALL_OW 251
63123: ST_TO_ADDR
// if not building or not x or not y then
63124: LD_VAR 0 2
63128: NOT
63129: PUSH
63130: LD_VAR 0 4
63134: NOT
63135: OR
63136: PUSH
63137: LD_VAR 0 5
63141: NOT
63142: OR
63143: IFFALSE 63147
// exit ;
63145: GO 63239
// if GetTaskList ( unit ) then
63147: LD_VAR 0 1
63151: PPUSH
63152: CALL_OW 437
63156: IFFALSE 63239
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63158: LD_STRING e
63160: PUSH
63161: LD_VAR 0 1
63165: PPUSH
63166: CALL_OW 437
63170: PUSH
63171: LD_INT 1
63173: ARRAY
63174: PUSH
63175: LD_INT 1
63177: ARRAY
63178: EQUAL
63179: PUSH
63180: LD_VAR 0 4
63184: PUSH
63185: LD_VAR 0 1
63189: PPUSH
63190: CALL_OW 437
63194: PUSH
63195: LD_INT 1
63197: ARRAY
63198: PUSH
63199: LD_INT 2
63201: ARRAY
63202: EQUAL
63203: AND
63204: PUSH
63205: LD_VAR 0 5
63209: PUSH
63210: LD_VAR 0 1
63214: PPUSH
63215: CALL_OW 437
63219: PUSH
63220: LD_INT 1
63222: ARRAY
63223: PUSH
63224: LD_INT 3
63226: ARRAY
63227: EQUAL
63228: AND
63229: IFFALSE 63239
// result := true end ;
63231: LD_ADDR_VAR 0 3
63235: PUSH
63236: LD_INT 1
63238: ST_TO_ADDR
// end ;
63239: LD_VAR 0 3
63243: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63244: LD_INT 0
63246: PPUSH
// result := false ;
63247: LD_ADDR_VAR 0 4
63251: PUSH
63252: LD_INT 0
63254: ST_TO_ADDR
// if GetTaskList ( unit ) then
63255: LD_VAR 0 1
63259: PPUSH
63260: CALL_OW 437
63264: IFFALSE 63347
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63266: LD_STRING M
63268: PUSH
63269: LD_VAR 0 1
63273: PPUSH
63274: CALL_OW 437
63278: PUSH
63279: LD_INT 1
63281: ARRAY
63282: PUSH
63283: LD_INT 1
63285: ARRAY
63286: EQUAL
63287: PUSH
63288: LD_VAR 0 2
63292: PUSH
63293: LD_VAR 0 1
63297: PPUSH
63298: CALL_OW 437
63302: PUSH
63303: LD_INT 1
63305: ARRAY
63306: PUSH
63307: LD_INT 2
63309: ARRAY
63310: EQUAL
63311: AND
63312: PUSH
63313: LD_VAR 0 3
63317: PUSH
63318: LD_VAR 0 1
63322: PPUSH
63323: CALL_OW 437
63327: PUSH
63328: LD_INT 1
63330: ARRAY
63331: PUSH
63332: LD_INT 3
63334: ARRAY
63335: EQUAL
63336: AND
63337: IFFALSE 63347
// result := true ;
63339: LD_ADDR_VAR 0 4
63343: PUSH
63344: LD_INT 1
63346: ST_TO_ADDR
// end ; end ;
63347: LD_VAR 0 4
63351: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63352: LD_INT 0
63354: PPUSH
63355: PPUSH
63356: PPUSH
63357: PPUSH
// if not unit or not area then
63358: LD_VAR 0 1
63362: NOT
63363: PUSH
63364: LD_VAR 0 2
63368: NOT
63369: OR
63370: IFFALSE 63374
// exit ;
63372: GO 63538
// tmp := AreaToList ( area , i ) ;
63374: LD_ADDR_VAR 0 6
63378: PUSH
63379: LD_VAR 0 2
63383: PPUSH
63384: LD_VAR 0 5
63388: PPUSH
63389: CALL_OW 517
63393: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63394: LD_ADDR_VAR 0 5
63398: PUSH
63399: DOUBLE
63400: LD_INT 1
63402: DEC
63403: ST_TO_ADDR
63404: LD_VAR 0 6
63408: PUSH
63409: LD_INT 1
63411: ARRAY
63412: PUSH
63413: FOR_TO
63414: IFFALSE 63536
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63416: LD_ADDR_VAR 0 7
63420: PUSH
63421: LD_VAR 0 6
63425: PUSH
63426: LD_INT 1
63428: ARRAY
63429: PUSH
63430: LD_VAR 0 5
63434: ARRAY
63435: PUSH
63436: LD_VAR 0 6
63440: PUSH
63441: LD_INT 2
63443: ARRAY
63444: PUSH
63445: LD_VAR 0 5
63449: ARRAY
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63455: LD_VAR 0 7
63459: PUSH
63460: LD_INT 1
63462: ARRAY
63463: PPUSH
63464: LD_VAR 0 7
63468: PUSH
63469: LD_INT 2
63471: ARRAY
63472: PPUSH
63473: CALL_OW 428
63477: PUSH
63478: LD_INT 0
63480: EQUAL
63481: IFFALSE 63534
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63483: LD_VAR 0 1
63487: PPUSH
63488: LD_VAR 0 7
63492: PUSH
63493: LD_INT 1
63495: ARRAY
63496: PPUSH
63497: LD_VAR 0 7
63501: PUSH
63502: LD_INT 2
63504: ARRAY
63505: PPUSH
63506: LD_VAR 0 3
63510: PPUSH
63511: CALL_OW 48
// result := IsPlaced ( unit ) ;
63515: LD_ADDR_VAR 0 4
63519: PUSH
63520: LD_VAR 0 1
63524: PPUSH
63525: CALL_OW 305
63529: ST_TO_ADDR
// exit ;
63530: POP
63531: POP
63532: GO 63538
// end ; end ;
63534: GO 63413
63536: POP
63537: POP
// end ;
63538: LD_VAR 0 4
63542: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63543: LD_INT 0
63545: PPUSH
63546: PPUSH
63547: PPUSH
// if not side or side > 8 then
63548: LD_VAR 0 1
63552: NOT
63553: PUSH
63554: LD_VAR 0 1
63558: PUSH
63559: LD_INT 8
63561: GREATER
63562: OR
63563: IFFALSE 63567
// exit ;
63565: GO 63754
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63567: LD_ADDR_VAR 0 4
63571: PUSH
63572: LD_INT 22
63574: PUSH
63575: LD_VAR 0 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 21
63586: PUSH
63587: LD_INT 3
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PPUSH
63598: CALL_OW 69
63602: ST_TO_ADDR
// if not tmp then
63603: LD_VAR 0 4
63607: NOT
63608: IFFALSE 63612
// exit ;
63610: GO 63754
// enable_addtolog := true ;
63612: LD_ADDR_OWVAR 81
63616: PUSH
63617: LD_INT 1
63619: ST_TO_ADDR
// AddToLog ( [ ) ;
63620: LD_STRING [
63622: PPUSH
63623: CALL_OW 561
// for i in tmp do
63627: LD_ADDR_VAR 0 3
63631: PUSH
63632: LD_VAR 0 4
63636: PUSH
63637: FOR_IN
63638: IFFALSE 63745
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63640: LD_STRING [
63642: PUSH
63643: LD_VAR 0 3
63647: PPUSH
63648: CALL_OW 266
63652: STR
63653: PUSH
63654: LD_STRING , 
63656: STR
63657: PUSH
63658: LD_VAR 0 3
63662: PPUSH
63663: CALL_OW 250
63667: STR
63668: PUSH
63669: LD_STRING , 
63671: STR
63672: PUSH
63673: LD_VAR 0 3
63677: PPUSH
63678: CALL_OW 251
63682: STR
63683: PUSH
63684: LD_STRING , 
63686: STR
63687: PUSH
63688: LD_VAR 0 3
63692: PPUSH
63693: CALL_OW 254
63697: STR
63698: PUSH
63699: LD_STRING , 
63701: STR
63702: PUSH
63703: LD_VAR 0 3
63707: PPUSH
63708: LD_INT 1
63710: PPUSH
63711: CALL_OW 268
63715: STR
63716: PUSH
63717: LD_STRING , 
63719: STR
63720: PUSH
63721: LD_VAR 0 3
63725: PPUSH
63726: LD_INT 2
63728: PPUSH
63729: CALL_OW 268
63733: STR
63734: PUSH
63735: LD_STRING ],
63737: STR
63738: PPUSH
63739: CALL_OW 561
// end ;
63743: GO 63637
63745: POP
63746: POP
// AddToLog ( ]; ) ;
63747: LD_STRING ];
63749: PPUSH
63750: CALL_OW 561
// end ;
63754: LD_VAR 0 2
63758: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63759: LD_INT 0
63761: PPUSH
63762: PPUSH
63763: PPUSH
63764: PPUSH
63765: PPUSH
// if not area or not rate or not max then
63766: LD_VAR 0 1
63770: NOT
63771: PUSH
63772: LD_VAR 0 2
63776: NOT
63777: OR
63778: PUSH
63779: LD_VAR 0 4
63783: NOT
63784: OR
63785: IFFALSE 63789
// exit ;
63787: GO 63981
// while 1 do
63789: LD_INT 1
63791: IFFALSE 63981
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63793: LD_ADDR_VAR 0 9
63797: PUSH
63798: LD_VAR 0 1
63802: PPUSH
63803: LD_INT 1
63805: PPUSH
63806: CALL_OW 287
63810: PUSH
63811: LD_INT 10
63813: MUL
63814: ST_TO_ADDR
// r := rate / 10 ;
63815: LD_ADDR_VAR 0 7
63819: PUSH
63820: LD_VAR 0 2
63824: PUSH
63825: LD_INT 10
63827: DIVREAL
63828: ST_TO_ADDR
// time := 1 1$00 ;
63829: LD_ADDR_VAR 0 8
63833: PUSH
63834: LD_INT 2100
63836: ST_TO_ADDR
// if amount < min then
63837: LD_VAR 0 9
63841: PUSH
63842: LD_VAR 0 3
63846: LESS
63847: IFFALSE 63865
// r := r * 2 else
63849: LD_ADDR_VAR 0 7
63853: PUSH
63854: LD_VAR 0 7
63858: PUSH
63859: LD_INT 2
63861: MUL
63862: ST_TO_ADDR
63863: GO 63891
// if amount > max then
63865: LD_VAR 0 9
63869: PUSH
63870: LD_VAR 0 4
63874: GREATER
63875: IFFALSE 63891
// r := r / 2 ;
63877: LD_ADDR_VAR 0 7
63881: PUSH
63882: LD_VAR 0 7
63886: PUSH
63887: LD_INT 2
63889: DIVREAL
63890: ST_TO_ADDR
// time := time / r ;
63891: LD_ADDR_VAR 0 8
63895: PUSH
63896: LD_VAR 0 8
63900: PUSH
63901: LD_VAR 0 7
63905: DIVREAL
63906: ST_TO_ADDR
// if time < 0 then
63907: LD_VAR 0 8
63911: PUSH
63912: LD_INT 0
63914: LESS
63915: IFFALSE 63932
// time := time * - 1 ;
63917: LD_ADDR_VAR 0 8
63921: PUSH
63922: LD_VAR 0 8
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: MUL
63931: ST_TO_ADDR
// wait ( time ) ;
63932: LD_VAR 0 8
63936: PPUSH
63937: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63941: LD_INT 35
63943: PPUSH
63944: LD_INT 875
63946: PPUSH
63947: CALL_OW 12
63951: PPUSH
63952: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63956: LD_INT 1
63958: PPUSH
63959: LD_INT 5
63961: PPUSH
63962: CALL_OW 12
63966: PPUSH
63967: LD_VAR 0 1
63971: PPUSH
63972: LD_INT 1
63974: PPUSH
63975: CALL_OW 55
// end ;
63979: GO 63789
// end ;
63981: LD_VAR 0 5
63985: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63986: LD_INT 0
63988: PPUSH
63989: PPUSH
63990: PPUSH
63991: PPUSH
63992: PPUSH
63993: PPUSH
63994: PPUSH
63995: PPUSH
// if not turrets or not factories then
63996: LD_VAR 0 1
64000: NOT
64001: PUSH
64002: LD_VAR 0 2
64006: NOT
64007: OR
64008: IFFALSE 64012
// exit ;
64010: GO 64319
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64012: LD_ADDR_VAR 0 10
64016: PUSH
64017: LD_INT 5
64019: PUSH
64020: LD_INT 6
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 2
64029: PUSH
64030: LD_INT 4
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 3
64039: PUSH
64040: LD_INT 5
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 24
64054: PUSH
64055: LD_INT 25
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 23
64064: PUSH
64065: LD_INT 27
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 42
64078: PUSH
64079: LD_INT 43
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 44
64088: PUSH
64089: LD_INT 46
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 45
64098: PUSH
64099: LD_INT 47
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: LIST
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: ST_TO_ADDR
// result := [ ] ;
64116: LD_ADDR_VAR 0 3
64120: PUSH
64121: EMPTY
64122: ST_TO_ADDR
// for i in turrets do
64123: LD_ADDR_VAR 0 4
64127: PUSH
64128: LD_VAR 0 1
64132: PUSH
64133: FOR_IN
64134: IFFALSE 64317
// begin nat := GetNation ( i ) ;
64136: LD_ADDR_VAR 0 7
64140: PUSH
64141: LD_VAR 0 4
64145: PPUSH
64146: CALL_OW 248
64150: ST_TO_ADDR
// weapon := 0 ;
64151: LD_ADDR_VAR 0 8
64155: PUSH
64156: LD_INT 0
64158: ST_TO_ADDR
// if not nat then
64159: LD_VAR 0 7
64163: NOT
64164: IFFALSE 64168
// continue ;
64166: GO 64133
// for j in list [ nat ] do
64168: LD_ADDR_VAR 0 5
64172: PUSH
64173: LD_VAR 0 10
64177: PUSH
64178: LD_VAR 0 7
64182: ARRAY
64183: PUSH
64184: FOR_IN
64185: IFFALSE 64226
// if GetBWeapon ( i ) = j [ 1 ] then
64187: LD_VAR 0 4
64191: PPUSH
64192: CALL_OW 269
64196: PUSH
64197: LD_VAR 0 5
64201: PUSH
64202: LD_INT 1
64204: ARRAY
64205: EQUAL
64206: IFFALSE 64224
// begin weapon := j [ 2 ] ;
64208: LD_ADDR_VAR 0 8
64212: PUSH
64213: LD_VAR 0 5
64217: PUSH
64218: LD_INT 2
64220: ARRAY
64221: ST_TO_ADDR
// break ;
64222: GO 64226
// end ;
64224: GO 64184
64226: POP
64227: POP
// if not weapon then
64228: LD_VAR 0 8
64232: NOT
64233: IFFALSE 64237
// continue ;
64235: GO 64133
// for k in factories do
64237: LD_ADDR_VAR 0 6
64241: PUSH
64242: LD_VAR 0 2
64246: PUSH
64247: FOR_IN
64248: IFFALSE 64313
// begin weapons := AvailableWeaponList ( k ) ;
64250: LD_ADDR_VAR 0 9
64254: PUSH
64255: LD_VAR 0 6
64259: PPUSH
64260: CALL_OW 478
64264: ST_TO_ADDR
// if not weapons then
64265: LD_VAR 0 9
64269: NOT
64270: IFFALSE 64274
// continue ;
64272: GO 64247
// if weapon in weapons then
64274: LD_VAR 0 8
64278: PUSH
64279: LD_VAR 0 9
64283: IN
64284: IFFALSE 64311
// begin result := [ i , weapon ] ;
64286: LD_ADDR_VAR 0 3
64290: PUSH
64291: LD_VAR 0 4
64295: PUSH
64296: LD_VAR 0 8
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: ST_TO_ADDR
// exit ;
64305: POP
64306: POP
64307: POP
64308: POP
64309: GO 64319
// end ; end ;
64311: GO 64247
64313: POP
64314: POP
// end ;
64315: GO 64133
64317: POP
64318: POP
// end ;
64319: LD_VAR 0 3
64323: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64324: LD_INT 0
64326: PPUSH
// if not side or side > 8 then
64327: LD_VAR 0 3
64331: NOT
64332: PUSH
64333: LD_VAR 0 3
64337: PUSH
64338: LD_INT 8
64340: GREATER
64341: OR
64342: IFFALSE 64346
// exit ;
64344: GO 64405
// if not range then
64346: LD_VAR 0 4
64350: NOT
64351: IFFALSE 64362
// range := - 12 ;
64353: LD_ADDR_VAR 0 4
64357: PUSH
64358: LD_INT 12
64360: NEG
64361: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64362: LD_VAR 0 1
64366: PPUSH
64367: LD_VAR 0 2
64371: PPUSH
64372: LD_VAR 0 3
64376: PPUSH
64377: LD_VAR 0 4
64381: PPUSH
64382: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64386: LD_VAR 0 1
64390: PPUSH
64391: LD_VAR 0 2
64395: PPUSH
64396: LD_VAR 0 3
64400: PPUSH
64401: CALL_OW 331
// end ;
64405: LD_VAR 0 5
64409: RET
// export function Video ( mode ) ; begin
64410: LD_INT 0
64412: PPUSH
// ingame_video = mode ;
64413: LD_ADDR_OWVAR 52
64417: PUSH
64418: LD_VAR 0 1
64422: ST_TO_ADDR
// interface_hidden = mode ;
64423: LD_ADDR_OWVAR 54
64427: PUSH
64428: LD_VAR 0 1
64432: ST_TO_ADDR
// end ;
64433: LD_VAR 0 2
64437: RET
// export function Join ( array , element ) ; begin
64438: LD_INT 0
64440: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64441: LD_ADDR_VAR 0 3
64445: PUSH
64446: LD_VAR 0 1
64450: PPUSH
64451: LD_VAR 0 1
64455: PUSH
64456: LD_INT 1
64458: PLUS
64459: PPUSH
64460: LD_VAR 0 2
64464: PPUSH
64465: CALL_OW 1
64469: ST_TO_ADDR
// end ;
64470: LD_VAR 0 3
64474: RET
// export function JoinUnion ( array , element ) ; begin
64475: LD_INT 0
64477: PPUSH
// result := array union element ;
64478: LD_ADDR_VAR 0 3
64482: PUSH
64483: LD_VAR 0 1
64487: PUSH
64488: LD_VAR 0 2
64492: UNION
64493: ST_TO_ADDR
// end ;
64494: LD_VAR 0 3
64498: RET
// export function GetBehemoths ( side ) ; begin
64499: LD_INT 0
64501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64502: LD_ADDR_VAR 0 2
64506: PUSH
64507: LD_INT 22
64509: PUSH
64510: LD_VAR 0 1
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 31
64521: PUSH
64522: LD_INT 25
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PPUSH
64533: CALL_OW 69
64537: ST_TO_ADDR
// end ;
64538: LD_VAR 0 2
64542: RET
// export function Shuffle ( array ) ; var i , index ; begin
64543: LD_INT 0
64545: PPUSH
64546: PPUSH
64547: PPUSH
// result := [ ] ;
64548: LD_ADDR_VAR 0 2
64552: PUSH
64553: EMPTY
64554: ST_TO_ADDR
// if not array then
64555: LD_VAR 0 1
64559: NOT
64560: IFFALSE 64564
// exit ;
64562: GO 64663
// Randomize ;
64564: CALL_OW 10
// for i = array downto 1 do
64568: LD_ADDR_VAR 0 3
64572: PUSH
64573: DOUBLE
64574: LD_VAR 0 1
64578: INC
64579: ST_TO_ADDR
64580: LD_INT 1
64582: PUSH
64583: FOR_DOWNTO
64584: IFFALSE 64661
// begin index := rand ( 1 , array ) ;
64586: LD_ADDR_VAR 0 4
64590: PUSH
64591: LD_INT 1
64593: PPUSH
64594: LD_VAR 0 1
64598: PPUSH
64599: CALL_OW 12
64603: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64604: LD_ADDR_VAR 0 2
64608: PUSH
64609: LD_VAR 0 2
64613: PPUSH
64614: LD_VAR 0 2
64618: PUSH
64619: LD_INT 1
64621: PLUS
64622: PPUSH
64623: LD_VAR 0 1
64627: PUSH
64628: LD_VAR 0 4
64632: ARRAY
64633: PPUSH
64634: CALL_OW 2
64638: ST_TO_ADDR
// array := Delete ( array , index ) ;
64639: LD_ADDR_VAR 0 1
64643: PUSH
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_VAR 0 4
64653: PPUSH
64654: CALL_OW 3
64658: ST_TO_ADDR
// end ;
64659: GO 64583
64661: POP
64662: POP
// end ;
64663: LD_VAR 0 2
64667: RET
// export function GetBaseMaterials ( base ) ; begin
64668: LD_INT 0
64670: PPUSH
// result := [ 0 , 0 , 0 ] ;
64671: LD_ADDR_VAR 0 2
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: LIST
64689: ST_TO_ADDR
// if not base then
64690: LD_VAR 0 1
64694: NOT
64695: IFFALSE 64699
// exit ;
64697: GO 64748
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64699: LD_ADDR_VAR 0 2
64703: PUSH
64704: LD_VAR 0 1
64708: PPUSH
64709: LD_INT 1
64711: PPUSH
64712: CALL_OW 275
64716: PUSH
64717: LD_VAR 0 1
64721: PPUSH
64722: LD_INT 2
64724: PPUSH
64725: CALL_OW 275
64729: PUSH
64730: LD_VAR 0 1
64734: PPUSH
64735: LD_INT 3
64737: PPUSH
64738: CALL_OW 275
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: LIST
64747: ST_TO_ADDR
// end ;
64748: LD_VAR 0 2
64752: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64753: LD_INT 0
64755: PPUSH
64756: PPUSH
// result := array ;
64757: LD_ADDR_VAR 0 3
64761: PUSH
64762: LD_VAR 0 1
64766: ST_TO_ADDR
// if size > 0 then
64767: LD_VAR 0 2
64771: PUSH
64772: LD_INT 0
64774: GREATER
64775: IFFALSE 64821
// for i := array downto size do
64777: LD_ADDR_VAR 0 4
64781: PUSH
64782: DOUBLE
64783: LD_VAR 0 1
64787: INC
64788: ST_TO_ADDR
64789: LD_VAR 0 2
64793: PUSH
64794: FOR_DOWNTO
64795: IFFALSE 64819
// result := Delete ( result , result ) ;
64797: LD_ADDR_VAR 0 3
64801: PUSH
64802: LD_VAR 0 3
64806: PPUSH
64807: LD_VAR 0 3
64811: PPUSH
64812: CALL_OW 3
64816: ST_TO_ADDR
64817: GO 64794
64819: POP
64820: POP
// end ;
64821: LD_VAR 0 3
64825: RET
// export function ComExit ( unit ) ; var tmp ; begin
64826: LD_INT 0
64828: PPUSH
64829: PPUSH
// if not IsInUnit ( unit ) then
64830: LD_VAR 0 1
64834: PPUSH
64835: CALL_OW 310
64839: NOT
64840: IFFALSE 64844
// exit ;
64842: GO 64904
// tmp := IsInUnit ( unit ) ;
64844: LD_ADDR_VAR 0 3
64848: PUSH
64849: LD_VAR 0 1
64853: PPUSH
64854: CALL_OW 310
64858: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64859: LD_VAR 0 3
64863: PPUSH
64864: CALL_OW 247
64868: PUSH
64869: LD_INT 2
64871: EQUAL
64872: IFFALSE 64885
// ComExitVehicle ( unit ) else
64874: LD_VAR 0 1
64878: PPUSH
64879: CALL_OW 121
64883: GO 64894
// ComExitBuilding ( unit ) ;
64885: LD_VAR 0 1
64889: PPUSH
64890: CALL_OW 122
// result := tmp ;
64894: LD_ADDR_VAR 0 2
64898: PUSH
64899: LD_VAR 0 3
64903: ST_TO_ADDR
// end ;
64904: LD_VAR 0 2
64908: RET
// export function ComExitAll ( units ) ; var i ; begin
64909: LD_INT 0
64911: PPUSH
64912: PPUSH
// if not units then
64913: LD_VAR 0 1
64917: NOT
64918: IFFALSE 64922
// exit ;
64920: GO 64948
// for i in units do
64922: LD_ADDR_VAR 0 3
64926: PUSH
64927: LD_VAR 0 1
64931: PUSH
64932: FOR_IN
64933: IFFALSE 64946
// ComExit ( i ) ;
64935: LD_VAR 0 3
64939: PPUSH
64940: CALL 64826 0 1
64944: GO 64932
64946: POP
64947: POP
// end ;
64948: LD_VAR 0 2
64952: RET
// export function ResetHc ; begin
64953: LD_INT 0
64955: PPUSH
// InitHc ;
64956: CALL_OW 19
// hc_importance := 0 ;
64960: LD_ADDR_OWVAR 32
64964: PUSH
64965: LD_INT 0
64967: ST_TO_ADDR
// end ;
64968: LD_VAR 0 1
64972: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64973: LD_INT 0
64975: PPUSH
64976: PPUSH
64977: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64978: LD_ADDR_VAR 0 6
64982: PUSH
64983: LD_VAR 0 1
64987: PUSH
64988: LD_VAR 0 3
64992: PLUS
64993: PUSH
64994: LD_INT 2
64996: DIV
64997: ST_TO_ADDR
// if _x < 0 then
64998: LD_VAR 0 6
65002: PUSH
65003: LD_INT 0
65005: LESS
65006: IFFALSE 65023
// _x := _x * - 1 ;
65008: LD_ADDR_VAR 0 6
65012: PUSH
65013: LD_VAR 0 6
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: MUL
65022: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65023: LD_ADDR_VAR 0 7
65027: PUSH
65028: LD_VAR 0 2
65032: PUSH
65033: LD_VAR 0 4
65037: PLUS
65038: PUSH
65039: LD_INT 2
65041: DIV
65042: ST_TO_ADDR
// if _y < 0 then
65043: LD_VAR 0 7
65047: PUSH
65048: LD_INT 0
65050: LESS
65051: IFFALSE 65068
// _y := _y * - 1 ;
65053: LD_ADDR_VAR 0 7
65057: PUSH
65058: LD_VAR 0 7
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: MUL
65067: ST_TO_ADDR
// result := [ _x , _y ] ;
65068: LD_ADDR_VAR 0 5
65072: PUSH
65073: LD_VAR 0 6
65077: PUSH
65078: LD_VAR 0 7
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// end ;
65087: LD_VAR 0 5
65091: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65092: LD_INT 0
65094: PPUSH
65095: PPUSH
65096: PPUSH
65097: PPUSH
// task := GetTaskList ( unit ) ;
65098: LD_ADDR_VAR 0 7
65102: PUSH
65103: LD_VAR 0 1
65107: PPUSH
65108: CALL_OW 437
65112: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65113: LD_VAR 0 7
65117: NOT
65118: PUSH
65119: LD_VAR 0 1
65123: PPUSH
65124: LD_VAR 0 2
65128: PPUSH
65129: CALL_OW 308
65133: NOT
65134: AND
65135: IFFALSE 65139
// exit ;
65137: GO 65257
// if IsInArea ( unit , area ) then
65139: LD_VAR 0 1
65143: PPUSH
65144: LD_VAR 0 2
65148: PPUSH
65149: CALL_OW 308
65153: IFFALSE 65171
// begin ComMoveToArea ( unit , goAway ) ;
65155: LD_VAR 0 1
65159: PPUSH
65160: LD_VAR 0 3
65164: PPUSH
65165: CALL_OW 113
// exit ;
65169: GO 65257
// end ; if task [ 1 ] [ 1 ] <> M then
65171: LD_VAR 0 7
65175: PUSH
65176: LD_INT 1
65178: ARRAY
65179: PUSH
65180: LD_INT 1
65182: ARRAY
65183: PUSH
65184: LD_STRING M
65186: NONEQUAL
65187: IFFALSE 65191
// exit ;
65189: GO 65257
// x := task [ 1 ] [ 2 ] ;
65191: LD_ADDR_VAR 0 5
65195: PUSH
65196: LD_VAR 0 7
65200: PUSH
65201: LD_INT 1
65203: ARRAY
65204: PUSH
65205: LD_INT 2
65207: ARRAY
65208: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65209: LD_ADDR_VAR 0 6
65213: PUSH
65214: LD_VAR 0 7
65218: PUSH
65219: LD_INT 1
65221: ARRAY
65222: PUSH
65223: LD_INT 3
65225: ARRAY
65226: ST_TO_ADDR
// if InArea ( x , y , area ) then
65227: LD_VAR 0 5
65231: PPUSH
65232: LD_VAR 0 6
65236: PPUSH
65237: LD_VAR 0 2
65241: PPUSH
65242: CALL_OW 309
65246: IFFALSE 65257
// ComStop ( unit ) ;
65248: LD_VAR 0 1
65252: PPUSH
65253: CALL_OW 141
// end ;
65257: LD_VAR 0 4
65261: RET
// export function Abs ( value ) ; begin
65262: LD_INT 0
65264: PPUSH
// result := value ;
65265: LD_ADDR_VAR 0 2
65269: PUSH
65270: LD_VAR 0 1
65274: ST_TO_ADDR
// if value < 0 then
65275: LD_VAR 0 1
65279: PUSH
65280: LD_INT 0
65282: LESS
65283: IFFALSE 65300
// result := value * - 1 ;
65285: LD_ADDR_VAR 0 2
65289: PUSH
65290: LD_VAR 0 1
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: MUL
65299: ST_TO_ADDR
// end ;
65300: LD_VAR 0 2
65304: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65305: LD_INT 0
65307: PPUSH
65308: PPUSH
65309: PPUSH
65310: PPUSH
65311: PPUSH
65312: PPUSH
65313: PPUSH
65314: PPUSH
// if not unit or not building then
65315: LD_VAR 0 1
65319: NOT
65320: PUSH
65321: LD_VAR 0 2
65325: NOT
65326: OR
65327: IFFALSE 65331
// exit ;
65329: GO 65557
// x := GetX ( building ) ;
65331: LD_ADDR_VAR 0 4
65335: PUSH
65336: LD_VAR 0 2
65340: PPUSH
65341: CALL_OW 250
65345: ST_TO_ADDR
// y := GetY ( building ) ;
65346: LD_ADDR_VAR 0 6
65350: PUSH
65351: LD_VAR 0 2
65355: PPUSH
65356: CALL_OW 251
65360: ST_TO_ADDR
// d := GetDir ( building ) ;
65361: LD_ADDR_VAR 0 8
65365: PUSH
65366: LD_VAR 0 2
65370: PPUSH
65371: CALL_OW 254
65375: ST_TO_ADDR
// r := 4 ;
65376: LD_ADDR_VAR 0 9
65380: PUSH
65381: LD_INT 4
65383: ST_TO_ADDR
// for i := 1 to 5 do
65384: LD_ADDR_VAR 0 10
65388: PUSH
65389: DOUBLE
65390: LD_INT 1
65392: DEC
65393: ST_TO_ADDR
65394: LD_INT 5
65396: PUSH
65397: FOR_TO
65398: IFFALSE 65555
// begin _x := ShiftX ( x , d , r + i ) ;
65400: LD_ADDR_VAR 0 5
65404: PUSH
65405: LD_VAR 0 4
65409: PPUSH
65410: LD_VAR 0 8
65414: PPUSH
65415: LD_VAR 0 9
65419: PUSH
65420: LD_VAR 0 10
65424: PLUS
65425: PPUSH
65426: CALL_OW 272
65430: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65431: LD_ADDR_VAR 0 7
65435: PUSH
65436: LD_VAR 0 6
65440: PPUSH
65441: LD_VAR 0 8
65445: PPUSH
65446: LD_VAR 0 9
65450: PUSH
65451: LD_VAR 0 10
65455: PLUS
65456: PPUSH
65457: CALL_OW 273
65461: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65462: LD_VAR 0 5
65466: PPUSH
65467: LD_VAR 0 7
65471: PPUSH
65472: CALL_OW 488
65476: PUSH
65477: LD_VAR 0 5
65481: PPUSH
65482: LD_VAR 0 7
65486: PPUSH
65487: CALL_OW 428
65491: PPUSH
65492: CALL_OW 247
65496: PUSH
65497: LD_INT 3
65499: PUSH
65500: LD_INT 2
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: IN
65507: NOT
65508: AND
65509: IFFALSE 65553
// begin ComMoveXY ( unit , _x , _y ) ;
65511: LD_VAR 0 1
65515: PPUSH
65516: LD_VAR 0 5
65520: PPUSH
65521: LD_VAR 0 7
65525: PPUSH
65526: CALL_OW 111
// result := [ _x , _y ] ;
65530: LD_ADDR_VAR 0 3
65534: PUSH
65535: LD_VAR 0 5
65539: PUSH
65540: LD_VAR 0 7
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// exit ;
65549: POP
65550: POP
65551: GO 65557
// end ; end ;
65553: GO 65397
65555: POP
65556: POP
// end ;
65557: LD_VAR 0 3
65561: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65562: LD_INT 0
65564: PPUSH
65565: PPUSH
65566: PPUSH
// result := 0 ;
65567: LD_ADDR_VAR 0 3
65571: PUSH
65572: LD_INT 0
65574: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65575: LD_VAR 0 1
65579: PUSH
65580: LD_INT 0
65582: LESS
65583: PUSH
65584: LD_VAR 0 1
65588: PUSH
65589: LD_INT 8
65591: GREATER
65592: OR
65593: PUSH
65594: LD_VAR 0 2
65598: PUSH
65599: LD_INT 0
65601: LESS
65602: OR
65603: PUSH
65604: LD_VAR 0 2
65608: PUSH
65609: LD_INT 8
65611: GREATER
65612: OR
65613: IFFALSE 65617
// exit ;
65615: GO 65692
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65617: LD_ADDR_VAR 0 4
65621: PUSH
65622: LD_INT 22
65624: PUSH
65625: LD_VAR 0 2
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PPUSH
65634: CALL_OW 69
65638: PUSH
65639: FOR_IN
65640: IFFALSE 65690
// begin un := UnitShoot ( i ) ;
65642: LD_ADDR_VAR 0 5
65646: PUSH
65647: LD_VAR 0 4
65651: PPUSH
65652: CALL_OW 504
65656: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65657: LD_VAR 0 5
65661: PPUSH
65662: CALL_OW 255
65666: PUSH
65667: LD_VAR 0 1
65671: EQUAL
65672: IFFALSE 65688
// begin result := un ;
65674: LD_ADDR_VAR 0 3
65678: PUSH
65679: LD_VAR 0 5
65683: ST_TO_ADDR
// exit ;
65684: POP
65685: POP
65686: GO 65692
// end ; end ;
65688: GO 65639
65690: POP
65691: POP
// end ;
65692: LD_VAR 0 3
65696: RET
// export function GetCargoBay ( units ) ; begin
65697: LD_INT 0
65699: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65700: LD_ADDR_VAR 0 2
65704: PUSH
65705: LD_VAR 0 1
65709: PPUSH
65710: LD_INT 2
65712: PUSH
65713: LD_INT 34
65715: PUSH
65716: LD_INT 12
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 34
65725: PUSH
65726: LD_INT 51
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 34
65735: PUSH
65736: LD_INT 32
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 34
65745: PUSH
65746: LD_EXP 114
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: PPUSH
65762: CALL_OW 72
65766: ST_TO_ADDR
// end ;
65767: LD_VAR 0 2
65771: RET
// export function Negate ( value ) ; begin
65772: LD_INT 0
65774: PPUSH
// result := not value ;
65775: LD_ADDR_VAR 0 2
65779: PUSH
65780: LD_VAR 0 1
65784: NOT
65785: ST_TO_ADDR
// end ;
65786: LD_VAR 0 2
65790: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
65791: LD_INT 0
65793: PPUSH
// if x1 = x2 then
65794: LD_VAR 0 1
65798: PUSH
65799: LD_VAR 0 3
65803: EQUAL
65804: IFFALSE 65838
// begin if y1 > y2 then
65806: LD_VAR 0 2
65810: PUSH
65811: LD_VAR 0 4
65815: GREATER
65816: IFFALSE 65828
// result := 0 else
65818: LD_ADDR_VAR 0 5
65822: PUSH
65823: LD_INT 0
65825: ST_TO_ADDR
65826: GO 65836
// result := 3 ;
65828: LD_ADDR_VAR 0 5
65832: PUSH
65833: LD_INT 3
65835: ST_TO_ADDR
// exit ;
65836: GO 65924
// end ; if y1 = y2 then
65838: LD_VAR 0 2
65842: PUSH
65843: LD_VAR 0 4
65847: EQUAL
65848: IFFALSE 65882
// begin if x1 > x2 then
65850: LD_VAR 0 1
65854: PUSH
65855: LD_VAR 0 3
65859: GREATER
65860: IFFALSE 65872
// result := 1 else
65862: LD_ADDR_VAR 0 5
65866: PUSH
65867: LD_INT 1
65869: ST_TO_ADDR
65870: GO 65880
// result := 4 ;
65872: LD_ADDR_VAR 0 5
65876: PUSH
65877: LD_INT 4
65879: ST_TO_ADDR
// exit ;
65880: GO 65924
// end ; if x1 > x2 and y1 > y2 then
65882: LD_VAR 0 1
65886: PUSH
65887: LD_VAR 0 3
65891: GREATER
65892: PUSH
65893: LD_VAR 0 2
65897: PUSH
65898: LD_VAR 0 4
65902: GREATER
65903: AND
65904: IFFALSE 65916
// result := 2 else
65906: LD_ADDR_VAR 0 5
65910: PUSH
65911: LD_INT 2
65913: ST_TO_ADDR
65914: GO 65924
// result := 5 ;
65916: LD_ADDR_VAR 0 5
65920: PUSH
65921: LD_INT 5
65923: ST_TO_ADDR
// end ;
65924: LD_VAR 0 5
65928: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65929: LD_INT 0
65931: PPUSH
65932: PPUSH
// if not driver or not IsInUnit ( driver ) then
65933: LD_VAR 0 1
65937: NOT
65938: PUSH
65939: LD_VAR 0 1
65943: PPUSH
65944: CALL_OW 310
65948: NOT
65949: OR
65950: IFFALSE 65954
// exit ;
65952: GO 66044
// vehicle := IsInUnit ( driver ) ;
65954: LD_ADDR_VAR 0 3
65958: PUSH
65959: LD_VAR 0 1
65963: PPUSH
65964: CALL_OW 310
65968: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65969: LD_VAR 0 1
65973: PPUSH
65974: LD_STRING \
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: PUSH
66004: LD_STRING E
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: LD_VAR 0 3
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PPUSH
66040: CALL_OW 446
// end ;
66044: LD_VAR 0 2
66048: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66049: LD_INT 0
66051: PPUSH
66052: PPUSH
// if not driver or not IsInUnit ( driver ) then
66053: LD_VAR 0 1
66057: NOT
66058: PUSH
66059: LD_VAR 0 1
66063: PPUSH
66064: CALL_OW 310
66068: NOT
66069: OR
66070: IFFALSE 66074
// exit ;
66072: GO 66164
// vehicle := IsInUnit ( driver ) ;
66074: LD_ADDR_VAR 0 3
66078: PUSH
66079: LD_VAR 0 1
66083: PPUSH
66084: CALL_OW 310
66088: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66089: LD_VAR 0 1
66093: PPUSH
66094: LD_STRING \
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: PUSH
66124: LD_STRING E
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_VAR 0 3
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PPUSH
66160: CALL_OW 447
// end ;
66164: LD_VAR 0 2
66168: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66169: LD_INT 0
66171: PPUSH
66172: PPUSH
66173: PPUSH
// tmp := [ ] ;
66174: LD_ADDR_VAR 0 5
66178: PUSH
66179: EMPTY
66180: ST_TO_ADDR
// for i in units do
66181: LD_ADDR_VAR 0 4
66185: PUSH
66186: LD_VAR 0 1
66190: PUSH
66191: FOR_IN
66192: IFFALSE 66230
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66194: LD_ADDR_VAR 0 5
66198: PUSH
66199: LD_VAR 0 5
66203: PPUSH
66204: LD_VAR 0 5
66208: PUSH
66209: LD_INT 1
66211: PLUS
66212: PPUSH
66213: LD_VAR 0 4
66217: PPUSH
66218: CALL_OW 256
66222: PPUSH
66223: CALL_OW 2
66227: ST_TO_ADDR
66228: GO 66191
66230: POP
66231: POP
// if not tmp then
66232: LD_VAR 0 5
66236: NOT
66237: IFFALSE 66241
// exit ;
66239: GO 66289
// if asc then
66241: LD_VAR 0 2
66245: IFFALSE 66269
// result := SortListByListAsc ( units , tmp ) else
66247: LD_ADDR_VAR 0 3
66251: PUSH
66252: LD_VAR 0 1
66256: PPUSH
66257: LD_VAR 0 5
66261: PPUSH
66262: CALL_OW 76
66266: ST_TO_ADDR
66267: GO 66289
// result := SortListByListDesc ( units , tmp ) ;
66269: LD_ADDR_VAR 0 3
66273: PUSH
66274: LD_VAR 0 1
66278: PPUSH
66279: LD_VAR 0 5
66283: PPUSH
66284: CALL_OW 77
66288: ST_TO_ADDR
// end ;
66289: LD_VAR 0 3
66293: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66294: LD_INT 0
66296: PPUSH
66297: PPUSH
// task := GetTaskList ( mech ) ;
66298: LD_ADDR_VAR 0 4
66302: PUSH
66303: LD_VAR 0 1
66307: PPUSH
66308: CALL_OW 437
66312: ST_TO_ADDR
// if not task then
66313: LD_VAR 0 4
66317: NOT
66318: IFFALSE 66322
// exit ;
66320: GO 66364
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66322: LD_ADDR_VAR 0 3
66326: PUSH
66327: LD_VAR 0 4
66331: PUSH
66332: LD_INT 1
66334: ARRAY
66335: PUSH
66336: LD_INT 1
66338: ARRAY
66339: PUSH
66340: LD_STRING r
66342: EQUAL
66343: PUSH
66344: LD_VAR 0 4
66348: PUSH
66349: LD_INT 1
66351: ARRAY
66352: PUSH
66353: LD_INT 4
66355: ARRAY
66356: PUSH
66357: LD_VAR 0 2
66361: EQUAL
66362: AND
66363: ST_TO_ADDR
// end ;
66364: LD_VAR 0 3
66368: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66369: LD_INT 0
66371: PPUSH
// SetDir ( unit , d ) ;
66372: LD_VAR 0 1
66376: PPUSH
66377: LD_VAR 0 4
66381: PPUSH
66382: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66386: LD_VAR 0 1
66390: PPUSH
66391: LD_VAR 0 2
66395: PPUSH
66396: LD_VAR 0 3
66400: PPUSH
66401: LD_VAR 0 5
66405: PPUSH
66406: CALL_OW 48
// end ;
66410: LD_VAR 0 6
66414: RET
// export function ToNaturalNumber ( number ) ; begin
66415: LD_INT 0
66417: PPUSH
// result := number div 1 ;
66418: LD_ADDR_VAR 0 2
66422: PUSH
66423: LD_VAR 0 1
66427: PUSH
66428: LD_INT 1
66430: DIV
66431: ST_TO_ADDR
// if number < 0 then
66432: LD_VAR 0 1
66436: PUSH
66437: LD_INT 0
66439: LESS
66440: IFFALSE 66450
// result := 0 ;
66442: LD_ADDR_VAR 0 2
66446: PUSH
66447: LD_INT 0
66449: ST_TO_ADDR
// end ;
66450: LD_VAR 0 2
66454: RET
// export function SortByClass ( units , class ) ; var un ; begin
66455: LD_INT 0
66457: PPUSH
66458: PPUSH
// if not units or not class then
66459: LD_VAR 0 1
66463: NOT
66464: PUSH
66465: LD_VAR 0 2
66469: NOT
66470: OR
66471: IFFALSE 66475
// exit ;
66473: GO 66570
// result := [ ] ;
66475: LD_ADDR_VAR 0 3
66479: PUSH
66480: EMPTY
66481: ST_TO_ADDR
// for un in units do
66482: LD_ADDR_VAR 0 4
66486: PUSH
66487: LD_VAR 0 1
66491: PUSH
66492: FOR_IN
66493: IFFALSE 66568
// if GetClass ( un ) = class then
66495: LD_VAR 0 4
66499: PPUSH
66500: CALL_OW 257
66504: PUSH
66505: LD_VAR 0 2
66509: EQUAL
66510: IFFALSE 66537
// result := Insert ( result , 1 , un ) else
66512: LD_ADDR_VAR 0 3
66516: PUSH
66517: LD_VAR 0 3
66521: PPUSH
66522: LD_INT 1
66524: PPUSH
66525: LD_VAR 0 4
66529: PPUSH
66530: CALL_OW 2
66534: ST_TO_ADDR
66535: GO 66566
// result := Replace ( result , result + 1 , un ) ;
66537: LD_ADDR_VAR 0 3
66541: PUSH
66542: LD_VAR 0 3
66546: PPUSH
66547: LD_VAR 0 3
66551: PUSH
66552: LD_INT 1
66554: PLUS
66555: PPUSH
66556: LD_VAR 0 4
66560: PPUSH
66561: CALL_OW 1
66565: ST_TO_ADDR
66566: GO 66492
66568: POP
66569: POP
// end ;
66570: LD_VAR 0 3
66574: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66575: LD_INT 0
66577: PPUSH
66578: PPUSH
66579: PPUSH
66580: PPUSH
66581: PPUSH
66582: PPUSH
66583: PPUSH
// result := [ ] ;
66584: LD_ADDR_VAR 0 4
66588: PUSH
66589: EMPTY
66590: ST_TO_ADDR
// if x - r < 0 then
66591: LD_VAR 0 1
66595: PUSH
66596: LD_VAR 0 3
66600: MINUS
66601: PUSH
66602: LD_INT 0
66604: LESS
66605: IFFALSE 66617
// min_x := 0 else
66607: LD_ADDR_VAR 0 8
66611: PUSH
66612: LD_INT 0
66614: ST_TO_ADDR
66615: GO 66633
// min_x := x - r ;
66617: LD_ADDR_VAR 0 8
66621: PUSH
66622: LD_VAR 0 1
66626: PUSH
66627: LD_VAR 0 3
66631: MINUS
66632: ST_TO_ADDR
// if y - r < 0 then
66633: LD_VAR 0 2
66637: PUSH
66638: LD_VAR 0 3
66642: MINUS
66643: PUSH
66644: LD_INT 0
66646: LESS
66647: IFFALSE 66659
// min_y := 0 else
66649: LD_ADDR_VAR 0 7
66653: PUSH
66654: LD_INT 0
66656: ST_TO_ADDR
66657: GO 66675
// min_y := y - r ;
66659: LD_ADDR_VAR 0 7
66663: PUSH
66664: LD_VAR 0 2
66668: PUSH
66669: LD_VAR 0 3
66673: MINUS
66674: ST_TO_ADDR
// max_x := x + r ;
66675: LD_ADDR_VAR 0 9
66679: PUSH
66680: LD_VAR 0 1
66684: PUSH
66685: LD_VAR 0 3
66689: PLUS
66690: ST_TO_ADDR
// max_y := y + r ;
66691: LD_ADDR_VAR 0 10
66695: PUSH
66696: LD_VAR 0 2
66700: PUSH
66701: LD_VAR 0 3
66705: PLUS
66706: ST_TO_ADDR
// for _x = min_x to max_x do
66707: LD_ADDR_VAR 0 5
66711: PUSH
66712: DOUBLE
66713: LD_VAR 0 8
66717: DEC
66718: ST_TO_ADDR
66719: LD_VAR 0 9
66723: PUSH
66724: FOR_TO
66725: IFFALSE 66826
// for _y = min_y to max_y do
66727: LD_ADDR_VAR 0 6
66731: PUSH
66732: DOUBLE
66733: LD_VAR 0 7
66737: DEC
66738: ST_TO_ADDR
66739: LD_VAR 0 10
66743: PUSH
66744: FOR_TO
66745: IFFALSE 66822
// begin if not ValidHex ( _x , _y ) then
66747: LD_VAR 0 5
66751: PPUSH
66752: LD_VAR 0 6
66756: PPUSH
66757: CALL_OW 488
66761: NOT
66762: IFFALSE 66766
// continue ;
66764: GO 66744
// if GetResourceTypeXY ( _x , _y ) then
66766: LD_VAR 0 5
66770: PPUSH
66771: LD_VAR 0 6
66775: PPUSH
66776: CALL_OW 283
66780: IFFALSE 66820
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66782: LD_ADDR_VAR 0 4
66786: PUSH
66787: LD_VAR 0 4
66791: PPUSH
66792: LD_VAR 0 4
66796: PUSH
66797: LD_INT 1
66799: PLUS
66800: PPUSH
66801: LD_VAR 0 5
66805: PUSH
66806: LD_VAR 0 6
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PPUSH
66815: CALL_OW 1
66819: ST_TO_ADDR
// end ;
66820: GO 66744
66822: POP
66823: POP
66824: GO 66724
66826: POP
66827: POP
// end ;
66828: LD_VAR 0 4
66832: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
66833: LD_INT 0
66835: PPUSH
66836: PPUSH
66837: PPUSH
66838: PPUSH
66839: PPUSH
66840: PPUSH
// if not units then
66841: LD_VAR 0 1
66845: NOT
66846: IFFALSE 66850
// exit ;
66848: GO 67251
// result := UnitFilter ( units , [ f_ok ] ) ;
66850: LD_ADDR_VAR 0 3
66854: PUSH
66855: LD_VAR 0 1
66859: PPUSH
66860: LD_INT 50
66862: PUSH
66863: EMPTY
66864: LIST
66865: PPUSH
66866: CALL_OW 72
66870: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66871: LD_ADDR_VAR 0 7
66875: PUSH
66876: LD_VAR 0 1
66880: PUSH
66881: LD_INT 1
66883: ARRAY
66884: PPUSH
66885: CALL_OW 255
66889: ST_TO_ADDR
// if not result then
66890: LD_VAR 0 3
66894: NOT
66895: IFFALSE 66899
// exit ;
66897: GO 67251
// for i in result do
66899: LD_ADDR_VAR 0 4
66903: PUSH
66904: LD_VAR 0 3
66908: PUSH
66909: FOR_IN
66910: IFFALSE 67249
// begin tag := GetTag ( i ) + 1 ;
66912: LD_ADDR_VAR 0 8
66916: PUSH
66917: LD_VAR 0 4
66921: PPUSH
66922: CALL_OW 110
66926: PUSH
66927: LD_INT 1
66929: PLUS
66930: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66931: LD_ADDR_VAR 0 6
66935: PUSH
66936: LD_VAR 0 4
66940: PPUSH
66941: CALL_OW 250
66945: PPUSH
66946: LD_VAR 0 4
66950: PPUSH
66951: CALL_OW 251
66955: PPUSH
66956: LD_INT 6
66958: PPUSH
66959: CALL 66575 0 3
66963: ST_TO_ADDR
// if cr then
66964: LD_VAR 0 6
66968: IFFALSE 67007
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66970: LD_VAR 0 4
66974: PPUSH
66975: LD_VAR 0 6
66979: PUSH
66980: LD_INT 1
66982: ARRAY
66983: PUSH
66984: LD_INT 1
66986: ARRAY
66987: PPUSH
66988: LD_VAR 0 6
66992: PUSH
66993: LD_INT 1
66995: ARRAY
66996: PUSH
66997: LD_INT 2
66999: ARRAY
67000: PPUSH
67001: CALL_OW 116
67005: GO 67247
// if path > tag then
67007: LD_VAR 0 2
67011: PUSH
67012: LD_VAR 0 8
67016: GREATER
67017: IFFALSE 67195
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
67019: LD_ADDR_VAR 0 5
67023: PUSH
67024: LD_INT 81
67026: PUSH
67027: LD_VAR 0 7
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 91
67038: PUSH
67039: LD_VAR 0 4
67043: PUSH
67044: LD_INT 12
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PPUSH
67056: CALL_OW 69
67060: ST_TO_ADDR
// if enemy then
67061: LD_VAR 0 5
67065: IFFALSE 67093
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67067: LD_VAR 0 4
67071: PPUSH
67072: LD_VAR 0 5
67076: PPUSH
67077: LD_VAR 0 4
67081: PPUSH
67082: CALL_OW 74
67086: PPUSH
67087: CALL_OW 115
67091: GO 67193
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67093: LD_VAR 0 4
67097: PPUSH
67098: LD_VAR 0 2
67102: PUSH
67103: LD_VAR 0 8
67107: ARRAY
67108: PUSH
67109: LD_INT 1
67111: ARRAY
67112: PPUSH
67113: LD_VAR 0 2
67117: PUSH
67118: LD_VAR 0 8
67122: ARRAY
67123: PUSH
67124: LD_INT 2
67126: ARRAY
67127: PPUSH
67128: CALL_OW 297
67132: PUSH
67133: LD_INT 6
67135: GREATER
67136: IFFALSE 67179
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67138: LD_VAR 0 4
67142: PPUSH
67143: LD_VAR 0 2
67147: PUSH
67148: LD_VAR 0 8
67152: ARRAY
67153: PUSH
67154: LD_INT 1
67156: ARRAY
67157: PPUSH
67158: LD_VAR 0 2
67162: PUSH
67163: LD_VAR 0 8
67167: ARRAY
67168: PUSH
67169: LD_INT 2
67171: ARRAY
67172: PPUSH
67173: CALL_OW 114
67177: GO 67193
// SetTag ( i , tag ) ;
67179: LD_VAR 0 4
67183: PPUSH
67184: LD_VAR 0 8
67188: PPUSH
67189: CALL_OW 109
// end else
67193: GO 67247
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67195: LD_ADDR_VAR 0 5
67199: PUSH
67200: LD_INT 81
67202: PUSH
67203: LD_VAR 0 7
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PPUSH
67212: CALL_OW 69
67216: ST_TO_ADDR
// if enemy then
67217: LD_VAR 0 5
67221: IFFALSE 67247
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67223: LD_VAR 0 4
67227: PPUSH
67228: LD_VAR 0 5
67232: PPUSH
67233: LD_VAR 0 4
67237: PPUSH
67238: CALL_OW 74
67242: PPUSH
67243: CALL_OW 115
// end ; end ;
67247: GO 66909
67249: POP
67250: POP
// end ; end_of_file
67251: LD_VAR 0 3
67255: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
67256: LD_INT 0
67258: PPUSH
// ar_miner := 81 ;
67259: LD_ADDR_EXP 120
67263: PUSH
67264: LD_INT 81
67266: ST_TO_ADDR
// ar_crane := 88 ;
67267: LD_ADDR_EXP 119
67271: PUSH
67272: LD_INT 88
67274: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
67275: LD_ADDR_EXP 114
67279: PUSH
67280: LD_INT 89
67282: ST_TO_ADDR
// us_hack := 99 ;
67283: LD_ADDR_EXP 115
67287: PUSH
67288: LD_INT 99
67290: ST_TO_ADDR
// us_artillery := 97 ;
67291: LD_ADDR_EXP 116
67295: PUSH
67296: LD_INT 97
67298: ST_TO_ADDR
// ar_bio_bomb := 91 ;
67299: LD_ADDR_EXP 117
67303: PUSH
67304: LD_INT 91
67306: ST_TO_ADDR
// ar_mortar := 92 ;
67307: LD_ADDR_EXP 118
67311: PUSH
67312: LD_INT 92
67314: ST_TO_ADDR
// ru_radar := 98 ;
67315: LD_ADDR_EXP 113
67319: PUSH
67320: LD_INT 98
67322: ST_TO_ADDR
// tech_Artillery := 80 ;
67323: LD_ADDR_EXP 121
67327: PUSH
67328: LD_INT 80
67330: ST_TO_ADDR
// tech_RadMat := 81 ;
67331: LD_ADDR_EXP 122
67335: PUSH
67336: LD_INT 81
67338: ST_TO_ADDR
// tech_BasicTools := 82 ;
67339: LD_ADDR_EXP 123
67343: PUSH
67344: LD_INT 82
67346: ST_TO_ADDR
// tech_Cargo := 83 ;
67347: LD_ADDR_EXP 124
67351: PUSH
67352: LD_INT 83
67354: ST_TO_ADDR
// tech_Track := 84 ;
67355: LD_ADDR_EXP 125
67359: PUSH
67360: LD_INT 84
67362: ST_TO_ADDR
// tech_Crane := 85 ;
67363: LD_ADDR_EXP 126
67367: PUSH
67368: LD_INT 85
67370: ST_TO_ADDR
// tech_Bulldozer := 86 ;
67371: LD_ADDR_EXP 127
67375: PUSH
67376: LD_INT 86
67378: ST_TO_ADDR
// tech_Hovercraft := 87 ;
67379: LD_ADDR_EXP 128
67383: PUSH
67384: LD_INT 87
67386: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
67387: LD_ADDR_EXP 129
67391: PUSH
67392: LD_INT 88
67394: ST_TO_ADDR
// class_mastodont := 31 ;
67395: LD_ADDR_EXP 130
67399: PUSH
67400: LD_INT 31
67402: ST_TO_ADDR
// class_horse := 21 ;
67403: LD_ADDR_EXP 131
67407: PUSH
67408: LD_INT 21
67410: ST_TO_ADDR
// end ;
67411: LD_VAR 0 1
67415: RET
// every 1 do
67416: GO 67418
67418: DISABLE
// InitGlobalVariables ; end_of_file
67419: CALL 67256 0 0
67423: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67424: LD_VAR 0 1
67428: PPUSH
67429: LD_VAR 0 2
67433: PPUSH
67434: LD_VAR 0 3
67438: PPUSH
67439: LD_VAR 0 4
67443: PPUSH
67444: LD_VAR 0 5
67448: PPUSH
67449: LD_VAR 0 6
67453: PPUSH
67454: CALL 9748 0 6
// end ;
67458: PPOPN 6
67460: END
