// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 237 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 649 0 1
// PrepareRussian ;
  19: CALL 2254 0 0
// PrepareArabian ;
  23: CALL 1242 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5954 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape , activeInvincible ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// activeInvincible := true ;
 224: LD_ADDR_EXP 17
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export tEscape ; function InitTag ; begin
 237: LD_INT 0
 239: PPUSH
// tEscape := 10 ;
 240: LD_ADDR_EXP 18
 244: PUSH
 245: LD_INT 10
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 1
 252: RET
// every 0 0$1 trigger debug do var i ;
 253: LD_EXP 1
 257: IFFALSE 341
 259: GO 261
 261: DISABLE
 262: LD_INT 0
 264: PPUSH
// begin enable ;
 265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 266: LD_ADDR_VAR 0 1
 270: PUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: LD_INT 21
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 339
// if GetLives ( i ) < 1000 then
 310: LD_VAR 0 1
 314: PPUSH
 315: CALL_OW 256
 319: PUSH
 320: LD_INT 1000
 322: LESS
 323: IFFALSE 337
// SetLives ( i , 1000 ) ;
 325: LD_VAR 0 1
 329: PPUSH
 330: LD_INT 1000
 332: PPUSH
 333: CALL_OW 234
 337: GO 307
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function CreateNature ( forest ) ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 653: LD_VAR 0 1
 657: PPUSH
 658: LD_INT 3
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: PPUSH
 682: CALL 512 0 2
// for i := 1 to 2 do
 686: LD_ADDR_VAR 0 3
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 2
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := 21 ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 21
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 1
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 2 do
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 2
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := 18 ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 18
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// for i := 1 to 2 do
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: DOUBLE
 798: LD_INT 1
 800: DEC
 801: ST_TO_ADDR
 802: LD_INT 2
 804: PUSH
 805: FOR_TO
 806: IFFALSE 843
// begin hc_class := 13 ;
 808: LD_ADDR_OWVAR 28
 812: PUSH
 813: LD_INT 13
 815: ST_TO_ADDR
// hc_gallery :=  ;
 816: LD_ADDR_OWVAR 33
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 824: CALL_OW 44
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: LD_INT 0
 836: PPUSH
 837: CALL_OW 49
// end ;
 841: GO 805
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 2
 849: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
 854: PPUSH
// if not observer or not unit then
 855: LD_VAR 0 1
 859: NOT
 860: PUSH
 861: LD_VAR 0 2
 865: NOT
 866: OR
 867: IFFALSE 871
// exit ;
 869: GO 919
// if not See ( GetSide ( observer ) , unit ) then
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: PPUSH
 881: LD_VAR 0 2
 885: PPUSH
 886: CALL_OW 292
 890: NOT
 891: IFFALSE 895
// exit ;
 893: GO 919
// result := GetDistUnits ( observer , unit ) < 12 ;
 895: LD_ADDR_VAR 0 3
 899: PUSH
 900: LD_VAR 0 1
 904: PPUSH
 905: LD_VAR 0 2
 909: PPUSH
 910: CALL_OW 296
 914: PUSH
 915: LD_INT 12
 917: LESS
 918: ST_TO_ADDR
// end ;
 919: LD_VAR 0 3
 923: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 924: LD_INT 0
 926: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 927: LD_VAR 0 2
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PPUSH
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 2
 943: ARRAY
 944: PPUSH
 945: CALL_OW 488
 949: PUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 2
 963: PUSH
 964: LD_INT 2
 966: ARRAY
 967: PPUSH
 968: CALL_OW 428
 972: PUSH
 973: LD_INT 0
 975: EQUAL
 976: AND
 977: IFFALSE 1011
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 979: LD_VAR 0 1
 983: PPUSH
 984: LD_VAR 0 2
 988: PUSH
 989: LD_INT 1
 991: ARRAY
 992: PPUSH
 993: LD_VAR 0 2
 997: PUSH
 998: LD_INT 2
1000: ARRAY
1001: PPUSH
1002: LD_VAR 0 3
1006: PPUSH
1007: CALL_OW 48
// end ;
1011: LD_VAR 0 4
1015: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1016: LD_INT 0
1018: PPUSH
1019: PPUSH
1020: PPUSH
1021: PPUSH
1022: PPUSH
// if not unit then
1023: LD_VAR 0 1
1027: NOT
1028: IFFALSE 1032
// exit ;
1030: GO 1237
// side := GetSide ( unit ) ;
1032: LD_ADDR_VAR 0 4
1036: PUSH
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 255
1046: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1047: LD_ADDR_VAR 0 5
1051: PUSH
1052: LD_INT 22
1054: PUSH
1055: LD_VAR 0 4
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 30
1066: PUSH
1067: LD_VAR 0 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: ST_TO_ADDR
// if not tmp then
1085: LD_VAR 0 5
1089: NOT
1090: IFFALSE 1094
// exit ;
1092: GO 1237
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1094: LD_ADDR_VAR 0 5
1098: PUSH
1099: LD_VAR 0 1
1103: PPUSH
1104: LD_VAR 0 5
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL 36748 0 4
1119: ST_TO_ADDR
// places := 1 ;
1120: LD_ADDR_VAR 0 7
1124: PUSH
1125: LD_INT 1
1127: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1128: LD_VAR 0 2
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 4
1141: PUSH
1142: LD_INT 5
1144: PUSH
1145: LD_INT 2
1147: PUSH
1148: LD_INT 3
1150: PUSH
1151: LD_INT 6
1153: PUSH
1154: LD_INT 7
1156: PUSH
1157: LD_INT 8
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: IN
1171: IFFALSE 1181
// places := 6 ;
1173: LD_ADDR_VAR 0 7
1177: PUSH
1178: LD_INT 6
1180: ST_TO_ADDR
// for i in tmp do
1181: LD_ADDR_VAR 0 6
1185: PUSH
1186: LD_VAR 0 5
1190: PUSH
1191: FOR_IN
1192: IFFALSE 1235
// begin if UnitsInside ( i ) - places <= 0 then
1194: LD_VAR 0 6
1198: PPUSH
1199: CALL_OW 313
1203: PUSH
1204: LD_VAR 0 7
1208: MINUS
1209: PUSH
1210: LD_INT 0
1212: LESSEQUAL
1213: IFFALSE 1219
// continue else
1215: GO 1191
1217: GO 1233
// begin result := i ;
1219: LD_ADDR_VAR 0 3
1223: PUSH
1224: LD_VAR 0 6
1228: ST_TO_ADDR
// exit ;
1229: POP
1230: POP
1231: GO 1237
// end ; end ;
1233: GO 1191
1235: POP
1236: POP
// end ; end_of_file
1237: LD_VAR 0 3
1241: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1242: LD_INT 0
1244: PPUSH
1245: PPUSH
// uc_side := 2 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// uc_nation := 2 ;
1254: LD_ADDR_OWVAR 21
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1262: LD_ADDR_EXP 19
1266: PUSH
1267: LD_STRING Heike
1269: PPUSH
1270: LD_EXP 1
1274: NOT
1275: PPUSH
1276: LD_EXP 2
1280: PPUSH
1281: CALL 31351 0 3
1285: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1286: LD_ADDR_EXP 22
1290: PUSH
1291: LD_STRING Ibrahim
1293: PPUSH
1294: LD_EXP 1
1298: NOT
1299: PPUSH
1300: LD_EXP 2
1304: PPUSH
1305: CALL 31351 0 3
1309: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1310: LD_ADDR_EXP 20
1314: PUSH
1315: LD_STRING Givi
1317: PPUSH
1318: LD_EXP 1
1322: NOT
1323: PPUSH
1324: LD_EXP 2
1328: PPUSH
1329: CALL 31351 0 3
1333: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1334: LD_ADDR_EXP 23
1338: PUSH
1339: LD_STRING Kamil
1341: PPUSH
1342: LD_EXP 1
1346: NOT
1347: PPUSH
1348: LD_EXP 2
1352: PPUSH
1353: CALL 31351 0 3
1357: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1358: LD_ADDR_EXP 24
1362: PUSH
1363: LD_STRING Kaia
1365: PPUSH
1366: LD_EXP 1
1370: NOT
1371: PPUSH
1372: LD_EXP 2
1376: PPUSH
1377: CALL 31351 0 3
1381: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1382: LD_ADDR_EXP 25
1386: PUSH
1387: LD_STRING Sophia
1389: PPUSH
1390: LD_EXP 1
1394: NOT
1395: PPUSH
1396: LD_EXP 2
1400: PPUSH
1401: CALL 31351 0 3
1405: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1406: LD_ADDR_EXP 26
1410: PUSH
1411: LD_STRING Markov
1413: PPUSH
1414: LD_EXP 1
1418: NOT
1419: PPUSH
1420: LD_EXP 2
1424: PPUSH
1425: CALL 31351 0 3
1429: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1430: LD_ADDR_EXP 29
1434: PUSH
1435: LD_STRING Aviradze
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 2
1448: PPUSH
1449: CALL 31351 0 3
1453: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1454: LD_ADDR_EXP 28
1458: PUSH
1459: LD_STRING Kurt
1461: PPUSH
1462: LD_EXP 1
1466: NOT
1467: PPUSH
1468: LD_EXP 2
1472: PPUSH
1473: CALL 31351 0 3
1477: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1478: LD_ADDR_EXP 21
1482: PUSH
1483: LD_STRING Mike
1485: PPUSH
1486: LD_EXP 1
1490: NOT
1491: PPUSH
1492: LD_EXP 2
1496: PPUSH
1497: CALL 31351 0 3
1501: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1502: LD_ADDR_EXP 30
1506: PUSH
1507: LD_STRING 04_1_others
1509: PPUSH
1510: CALL_OW 31
1514: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1515: LD_ADDR_EXP 32
1519: PUSH
1520: LD_STRING 04_1_apes
1522: PPUSH
1523: CALL_OW 31
1527: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1528: LD_ADDR_EXP 31
1532: PUSH
1533: LD_STRING 04_1_Vehicles
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// if debug then
1543: LD_EXP 1
1547: IFFALSE 1766
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_big_cargo_bay , 3 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1549: LD_ADDR_EXP 31
1553: PUSH
1554: LD_INT 13
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: LD_INT 27
1565: PUSH
1566: LD_INT 2
1568: PUSH
1569: LD_INT 1000
1571: PUSH
1572: LD_INT 0
1574: PUSH
1575: LD_INT 0
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 3
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 13
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: LD_INT 1
1603: PUSH
1604: LD_INT 25
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 1000
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 0
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 3
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 13
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 2
1650: PUSH
1651: LD_INT 1000
1653: PUSH
1654: LD_INT 0
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 1
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 13
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: LD_INT 1
1685: PUSH
1686: LD_INT 27
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 1000
1694: PUSH
1695: LD_INT 0
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 1
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 23
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: LD_INT 89
1729: PUSH
1730: LD_INT 3
1732: PUSH
1733: LD_INT 1000
1735: PUSH
1736: LD_INT 40
1738: PUSH
1739: LD_INT 40
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// uc_side := 5 ;
1766: LD_ADDR_OWVAR 20
1770: PUSH
1771: LD_INT 5
1773: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1774: LD_ADDR_EXP 27
1778: PUSH
1779: LD_STRING Abdul
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: LD_STRING 
1787: PPUSH
1788: CALL 31351 0 3
1792: ST_TO_ADDR
// end ;
1793: LD_VAR 0 1
1797: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , debug ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1798: LD_STRING 04_1_KaganCaptured
1800: PPUSH
1801: LD_EXP 1
1805: PPUSH
1806: CALL_OW 30
1810: PUSH
1811: LD_INT 22
1813: PUSH
1814: LD_INT 5
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: NOT
1826: AND
1827: PUSH
1828: LD_INT 124
1830: PPUSH
1831: LD_INT 26
1833: PPUSH
1834: CALL_OW 428
1838: PUSH
1839: LD_INT 0
1841: EQUAL
1842: PUSH
1843: LD_INT 124
1845: PPUSH
1846: LD_INT 26
1848: PPUSH
1849: CALL_OW 428
1853: PPUSH
1854: CALL_OW 255
1858: PUSH
1859: LD_INT 2
1861: EQUAL
1862: XOR
1863: AND
1864: IFFALSE 2251
1866: GO 1868
1868: DISABLE
1869: LD_INT 0
1871: PPUSH
1872: PPUSH
// begin enable ;
1873: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1874: LD_EXP 34
1878: NOT
1879: PUSH
1880: LD_EXP 34
1884: PUSH
1885: LD_INT 4
1887: GREATER
1888: OR
1889: IFFALSE 1899
// cargoCounter := 1 ;
1891: LD_ADDR_EXP 34
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1899: LD_ADDR_VAR 0 2
1903: PUSH
1904: LD_INT 142
1906: PUSH
1907: LD_INT 15
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 129
1916: PUSH
1917: LD_INT 11
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 138
1926: PUSH
1927: LD_INT 9
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 133
1936: PUSH
1937: LD_INT 10
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
// uc_side := 5 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 5
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1966: LD_INT 5
1968: PPUSH
1969: LD_INT 2
1971: PPUSH
1972: LD_INT 13
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: LD_INT 1
1980: PPUSH
1981: LD_INT 32
1983: PPUSH
1984: LD_INT 70
1986: PPUSH
1987: CALL 344 0 7
// veh := CreateVehicle ;
1991: LD_ADDR_VAR 0 1
1995: PUSH
1996: CALL_OW 45
2000: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2001: LD_VAR 0 1
2005: PPUSH
2006: LD_INT 3
2008: PPUSH
2009: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2013: LD_VAR 0 1
2017: PPUSH
2018: LD_INT 8
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// if not cargoDriver then
2028: LD_EXP 33
2032: NOT
2033: IFFALSE 2058
// begin PrepareHuman ( false , 1 , 3 ) ;
2035: LD_INT 0
2037: PPUSH
2038: LD_INT 1
2040: PPUSH
2041: LD_INT 3
2043: PPUSH
2044: CALL_OW 380
// cargoDriver := CreateHuman ;
2048: LD_ADDR_EXP 33
2052: PUSH
2053: CALL_OW 44
2057: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2058: LD_EXP 33
2062: PPUSH
2063: LD_VAR 0 1
2067: PPUSH
2068: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: LD_INT 100
2082: PPUSH
2083: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2087: LD_VAR 0 1
2091: PPUSH
2092: LD_VAR 0 2
2096: PUSH
2097: LD_EXP 34
2101: ARRAY
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_VAR 0 2
2111: PUSH
2112: LD_EXP 34
2116: ARRAY
2117: PUSH
2118: LD_INT 2
2120: ARRAY
2121: PPUSH
2122: CALL_OW 111
// AddComUnload ( veh ) ;
2126: LD_VAR 0 1
2130: PPUSH
2131: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2135: LD_VAR 0 1
2139: PPUSH
2140: LD_INT 133
2142: PPUSH
2143: LD_INT 2
2145: PPUSH
2146: CALL_OW 171
// wait ( 0 0$5 ) ;
2150: LD_INT 175
2152: PPUSH
2153: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2157: LD_INT 35
2159: PPUSH
2160: CALL_OW 67
// if not HasTask ( veh ) then
2164: LD_VAR 0 1
2168: PPUSH
2169: CALL_OW 314
2173: NOT
2174: IFFALSE 2191
// ComMoveXY ( veh , 133 , 2 ) ;
2176: LD_VAR 0 1
2180: PPUSH
2181: LD_INT 133
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2191: LD_VAR 0 1
2195: PPUSH
2196: LD_INT 133
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 307
2206: PUSH
2207: LD_VAR 0 1
2211: PPUSH
2212: LD_INT 8
2214: PPUSH
2215: CALL_OW 308
2219: OR
2220: IFFALSE 2157
// RemoveUnit ( cargoDriver ) ;
2222: LD_EXP 33
2226: PPUSH
2227: CALL_OW 64
// RemoveUnit ( veh ) ;
2231: LD_VAR 0 1
2235: PPUSH
2236: CALL_OW 64
// if tick >= 20 20$00 then
2240: LD_OWVAR 1
2244: PUSH
2245: LD_INT 42000
2247: GREATEREQUAL
2248: IFFALSE 2251
// disable ;
2250: DISABLE
// end ; end_of_file
2251: PPOPN 2
2253: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2254: LD_INT 0
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
2262: PPUSH
2263: PPUSH
2264: PPUSH
// uc_side := 3 ;
2265: LD_ADDR_OWVAR 20
2269: PUSH
2270: LD_INT 3
2272: ST_TO_ADDR
// uc_nation := 3 ;
2273: LD_ADDR_OWVAR 21
2277: PUSH
2278: LD_INT 3
2280: ST_TO_ADDR
// ruForce := [ ] ;
2281: LD_ADDR_EXP 38
2285: PUSH
2286: EMPTY
2287: ST_TO_ADDR
// ruMech := [ ] ;
2288: LD_ADDR_EXP 40
2292: PUSH
2293: EMPTY
2294: ST_TO_ADDR
// ruEng := [ ] ;
2295: LD_ADDR_EXP 39
2299: PUSH
2300: EMPTY
2301: ST_TO_ADDR
// ruSci := [ ] ;
2302: LD_ADDR_EXP 41
2306: PUSH
2307: EMPTY
2308: ST_TO_ADDR
// ruMobile := [ ] ;
2309: LD_ADDR_EXP 42
2313: PUSH
2314: EMPTY
2315: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2316: LD_ADDR_EXP 35
2320: PUSH
2321: LD_STRING Burlak
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: LD_STRING 
2329: PPUSH
2330: CALL 31351 0 3
2334: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2335: LD_ADDR_EXP 36
2339: PUSH
2340: LD_STRING Gaydar
2342: PPUSH
2343: LD_INT 0
2345: PPUSH
2346: LD_STRING 
2348: PPUSH
2349: CALL 31351 0 3
2353: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2354: LD_ADDR_EXP 37
2358: PUSH
2359: LD_STRING Kuzmov
2361: PPUSH
2362: LD_INT 0
2364: PPUSH
2365: LD_STRING 
2367: PPUSH
2368: CALL 31351 0 3
2372: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2373: LD_EXP 37
2377: PPUSH
2378: LD_INT 200
2380: PPUSH
2381: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2385: LD_INT 200
2387: PPUSH
2388: LD_STRING chuikov
2390: PPUSH
2391: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2395: LD_INT 200
2397: PPUSH
2398: CALL_OW 274
2402: PPUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_INT 800
2408: PUSH
2409: LD_INT 1000
2411: PUSH
2412: LD_INT 1250
2414: PUSH
2415: LD_INT 1300
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: LD_OWVAR 67
2428: ARRAY
2429: PPUSH
2430: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2434: LD_INT 200
2436: PPUSH
2437: CALL_OW 274
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: LD_INT 160
2447: PPUSH
2448: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2452: LD_INT 225
2454: PPUSH
2455: CALL_OW 274
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 200
2465: PPUSH
2466: CALL_OW 277
// oil := 150 ;
2470: LD_ADDR_VAR 0 9
2474: PUSH
2475: LD_INT 150
2477: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2478: LD_EXP 5
2482: PUSH
2483: LD_INT 94500
2485: PUSH
2486: LD_INT 84000
2488: PUSH
2489: LD_INT 73500
2491: PUSH
2492: LD_INT 67200
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_OWVAR 67
2505: ARRAY
2506: GREATEREQUAL
2507: IFFALSE 2662
// begin oil := 450 ;
2509: LD_ADDR_VAR 0 9
2513: PUSH
2514: LD_INT 450
2516: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2517: LD_ADDR_VAR 0 7
2521: PUSH
2522: LD_INT 123
2524: PUSH
2525: LD_INT 17
2527: PUSH
2528: LD_INT 3
2530: PUSH
2531: LD_INT 31
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 152
2542: PUSH
2543: LD_INT 38
2545: PUSH
2546: LD_INT 3
2548: PUSH
2549: LD_INT 31
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 81
2560: PUSH
2561: LD_INT 6
2563: PUSH
2564: LD_INT 4
2566: PUSH
2567: LD_INT 31
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 113
2578: PUSH
2579: LD_INT 67
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 32
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: ST_TO_ADDR
// for i in tmp do
2600: LD_ADDR_VAR 0 4
2604: PUSH
2605: LD_VAR 0 7
2609: PUSH
2610: FOR_IN
2611: IFFALSE 2660
// begin bc_type := i [ 4 ] ;
2613: LD_ADDR_OWVAR 42
2617: PUSH
2618: LD_VAR 0 4
2622: PUSH
2623: LD_INT 4
2625: ARRAY
2626: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2627: LD_VAR 0 4
2631: PUSH
2632: LD_INT 1
2634: ARRAY
2635: PPUSH
2636: LD_VAR 0 4
2640: PUSH
2641: LD_INT 2
2643: ARRAY
2644: PPUSH
2645: LD_VAR 0 4
2649: PUSH
2650: LD_INT 3
2652: ARRAY
2653: PPUSH
2654: CALL_OW 47
// end ;
2658: GO 2610
2660: POP
2661: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2662: LD_INT 225
2664: PPUSH
2665: CALL_OW 274
2669: PPUSH
2670: LD_INT 2
2672: PPUSH
2673: LD_VAR 0 9
2677: PPUSH
2678: CALL_OW 277
// if Difficulty > 1 then
2682: LD_OWVAR 67
2686: PUSH
2687: LD_INT 1
2689: GREATER
2690: IFFALSE 2785
// begin bc_type := b_bunker ;
2692: LD_ADDR_OWVAR 42
2696: PUSH
2697: LD_INT 32
2699: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2700: LD_ADDR_VAR 0 7
2704: PUSH
2705: LD_INT 121
2707: PUSH
2708: LD_INT 85
2710: PUSH
2711: LD_INT 5
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 93
2721: PUSH
2722: LD_INT 72
2724: PUSH
2725: LD_INT 1
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: ST_TO_ADDR
// for i in tmp do
2737: LD_ADDR_VAR 0 4
2741: PUSH
2742: LD_VAR 0 7
2746: PUSH
2747: FOR_IN
2748: IFFALSE 2783
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2750: LD_VAR 0 4
2754: PUSH
2755: LD_INT 1
2757: ARRAY
2758: PPUSH
2759: LD_VAR 0 4
2763: PUSH
2764: LD_INT 2
2766: ARRAY
2767: PPUSH
2768: LD_VAR 0 4
2772: PUSH
2773: LD_INT 3
2775: ARRAY
2776: PPUSH
2777: CALL_OW 47
2781: GO 2747
2783: POP
2784: POP
// end ; base := GetBase ( ruMainBase ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_INT 200
2792: PPUSH
2793: CALL_OW 274
2797: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2798: LD_ADDR_VAR 0 3
2802: PUSH
2803: LD_VAR 0 2
2807: PPUSH
2808: CALL_OW 417
2812: ST_TO_ADDR
// for b in blist do
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 3
2822: PUSH
2823: FOR_IN
2824: IFFALSE 3275
// begin if b [ 1 ] = b_factory then
2826: LD_VAR 0 5
2830: PUSH
2831: LD_INT 1
2833: ARRAY
2834: PUSH
2835: LD_INT 3
2837: EQUAL
2838: IFFALSE 2989
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2840: LD_ADDR_VAR 0 8
2844: PUSH
2845: LD_VAR 0 5
2849: PUSH
2850: LD_INT 2
2852: ARRAY
2853: PPUSH
2854: LD_VAR 0 5
2858: PUSH
2859: LD_INT 3
2861: ARRAY
2862: PPUSH
2863: CALL_OW 428
2867: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 2
2880: PUSH
2881: LD_INT 2
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_EXP 10
2898: PUSH
2899: LD_INT 3
2901: GREATER
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2985
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 3
2916: PPUSH
2917: LD_INT 1
2919: PUSH
2920: LD_OWVAR 67
2924: PLUS
2925: PPUSH
2926: CALL_OW 380
// un := CreateHuman ;
2930: LD_ADDR_VAR 0 6
2934: PUSH
2935: CALL_OW 44
2939: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2940: LD_ADDR_EXP 40
2944: PUSH
2945: LD_EXP 40
2949: PPUSH
2950: LD_EXP 40
2954: PUSH
2955: LD_INT 1
2957: PLUS
2958: PPUSH
2959: LD_VAR 0 6
2963: PPUSH
2964: CALL_OW 1
2968: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2969: LD_VAR 0 6
2973: PPUSH
2974: LD_VAR 0 8
2978: PPUSH
2979: CALL_OW 52
// end ;
2983: GO 2908
2985: POP
2986: POP
// end else
2987: GO 3273
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2989: LD_VAR 0 5
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PUSH
2998: LD_INT 6
3000: PUSH
3001: LD_INT 7
3003: PUSH
3004: LD_INT 8
3006: PUSH
3007: LD_INT 10
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: IN
3016: IFFALSE 3126
// begin for i := 1 to 2 do
3018: LD_ADDR_VAR 0 4
3022: PUSH
3023: DOUBLE
3024: LD_INT 1
3026: DEC
3027: ST_TO_ADDR
3028: LD_INT 2
3030: PUSH
3031: FOR_TO
3032: IFFALSE 3122
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3034: LD_INT 0
3036: PPUSH
3037: LD_INT 4
3039: PPUSH
3040: LD_OWVAR 67
3044: PPUSH
3045: CALL_OW 380
// un := CreateHuman ;
3049: LD_ADDR_VAR 0 6
3053: PUSH
3054: CALL_OW 44
3058: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3059: LD_ADDR_EXP 41
3063: PUSH
3064: LD_EXP 41
3068: PPUSH
3069: LD_EXP 41
3073: PUSH
3074: LD_INT 1
3076: PLUS
3077: PPUSH
3078: LD_VAR 0 6
3082: PPUSH
3083: CALL_OW 1
3087: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3088: LD_VAR 0 6
3092: PPUSH
3093: LD_VAR 0 5
3097: PUSH
3098: LD_INT 2
3100: ARRAY
3101: PPUSH
3102: LD_VAR 0 5
3106: PUSH
3107: LD_INT 3
3109: ARRAY
3110: PPUSH
3111: CALL_OW 428
3115: PPUSH
3116: CALL_OW 52
// end ;
3120: GO 3031
3122: POP
3123: POP
// end else
3124: GO 3273
// if b [ 1 ] = b_warehouse then
3126: LD_VAR 0 5
3130: PUSH
3131: LD_INT 1
3133: ARRAY
3134: PUSH
3135: LD_INT 1
3137: EQUAL
3138: IFFALSE 3273
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3140: LD_ADDR_VAR 0 4
3144: PUSH
3145: DOUBLE
3146: LD_INT 1
3148: DEC
3149: ST_TO_ADDR
3150: LD_INT 1
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: LD_OWVAR 67
3160: PLUS
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_EXP 10
3170: PUSH
3171: LD_INT 3
3173: GREATER
3174: PUSH
3175: LD_INT 1
3177: PLUS
3178: ARRAY
3179: PUSH
3180: FOR_TO
3181: IFFALSE 3271
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_INT 2
3188: PPUSH
3189: LD_OWVAR 67
3193: PPUSH
3194: CALL_OW 380
// un := CreateHuman ;
3198: LD_ADDR_VAR 0 6
3202: PUSH
3203: CALL_OW 44
3207: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3208: LD_ADDR_EXP 39
3212: PUSH
3213: LD_EXP 39
3217: PPUSH
3218: LD_EXP 39
3222: PUSH
3223: LD_INT 1
3225: PLUS
3226: PPUSH
3227: LD_VAR 0 6
3231: PPUSH
3232: CALL_OW 1
3236: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3237: LD_VAR 0 6
3241: PPUSH
3242: LD_VAR 0 5
3246: PUSH
3247: LD_INT 2
3249: ARRAY
3250: PPUSH
3251: LD_VAR 0 5
3255: PUSH
3256: LD_INT 3
3258: ARRAY
3259: PPUSH
3260: CALL_OW 428
3264: PPUSH
3265: CALL_OW 52
// end ;
3269: GO 3180
3271: POP
3272: POP
// end ; end ;
3273: GO 2823
3275: POP
3276: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3277: LD_ADDR_VAR 0 3
3281: PUSH
3282: LD_INT 22
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 21
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PPUSH
3306: CALL_OW 69
3310: ST_TO_ADDR
// for b in blist do
3311: LD_ADDR_VAR 0 5
3315: PUSH
3316: LD_VAR 0 3
3320: PUSH
3321: FOR_IN
3322: IFFALSE 3344
// SetBLevel ( b , 3 + Difficulty ) ;
3324: LD_VAR 0 5
3328: PPUSH
3329: LD_INT 3
3331: PUSH
3332: LD_OWVAR 67
3336: PLUS
3337: PPUSH
3338: CALL_OW 241
3342: GO 3321
3344: POP
3345: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3346: LD_ADDR_VAR 0 3
3350: PUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 30
3363: PUSH
3364: LD_INT 32
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: ST_TO_ADDR
// for b in blist do
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_VAR 0 3
3389: PUSH
3390: FOR_IN
3391: IFFALSE 3500
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3393: LD_INT 0
3395: PPUSH
3396: LD_INT 1
3398: PPUSH
3399: LD_INT 1
3401: PUSH
3402: LD_OWVAR 67
3406: PLUS
3407: PPUSH
3408: CALL_OW 380
// un := CreateHuman ;
3412: LD_ADDR_VAR 0 6
3416: PUSH
3417: CALL_OW 44
3421: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3422: LD_ADDR_EXP 38
3426: PUSH
3427: LD_EXP 38
3431: PPUSH
3432: LD_EXP 38
3436: PUSH
3437: LD_INT 1
3439: PLUS
3440: PPUSH
3441: LD_VAR 0 6
3445: PPUSH
3446: CALL_OW 1
3450: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3451: LD_VAR 0 6
3455: PPUSH
3456: LD_VAR 0 5
3460: PPUSH
3461: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3465: LD_VAR 0 5
3469: PPUSH
3470: LD_INT 44
3472: PUSH
3473: LD_INT 43
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_VAR 0 5
3484: PUSH
3485: LD_INT 2
3487: MOD
3488: PUSH
3489: LD_INT 1
3491: PLUS
3492: ARRAY
3493: PPUSH
3494: CALL_OW 431
// end ;
3498: GO 3390
3500: POP
3501: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: LD_INT 22
3509: PUSH
3510: LD_INT 3
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: LD_INT 30
3519: PUSH
3520: LD_INT 31
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PPUSH
3531: CALL_OW 69
3535: ST_TO_ADDR
// for b in blist do
3536: LD_ADDR_VAR 0 5
3540: PUSH
3541: LD_VAR 0 3
3545: PUSH
3546: FOR_IN
3547: IFFALSE 3646
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3549: LD_INT 0
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_INT 1
3557: PUSH
3558: LD_OWVAR 67
3562: PLUS
3563: PPUSH
3564: CALL_OW 380
// un := CreateHuman ;
3568: LD_ADDR_VAR 0 6
3572: PUSH
3573: CALL_OW 44
3577: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3578: LD_ADDR_EXP 38
3582: PUSH
3583: LD_EXP 38
3587: PPUSH
3588: LD_EXP 38
3592: PUSH
3593: LD_INT 1
3595: PLUS
3596: PPUSH
3597: LD_VAR 0 6
3601: PPUSH
3602: CALL_OW 1
3606: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3607: LD_VAR 0 6
3611: PPUSH
3612: LD_VAR 0 5
3616: PPUSH
3617: CALL_OW 254
3621: PUSH
3622: LD_INT 3
3624: PLUS
3625: PPUSH
3626: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3630: LD_VAR 0 6
3634: PPUSH
3635: LD_VAR 0 5
3639: PPUSH
3640: CALL_OW 52
// end ;
3644: GO 3546
3646: POP
3647: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_INT 22
3655: PUSH
3656: LD_INT 3
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 2
3665: PUSH
3666: LD_INT 30
3668: PUSH
3669: LD_INT 4
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: LD_INT 30
3678: PUSH
3679: LD_INT 5
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PPUSH
3695: CALL_OW 69
3699: ST_TO_ADDR
// for b in blist do
3700: LD_ADDR_VAR 0 5
3704: PUSH
3705: LD_VAR 0 3
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3807
// begin for i := 1 to 2 do
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: DOUBLE
3719: LD_INT 1
3721: DEC
3722: ST_TO_ADDR
3723: LD_INT 2
3725: PUSH
3726: FOR_TO
3727: IFFALSE 3803
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3729: LD_INT 0
3731: PPUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 1
3737: PUSH
3738: LD_OWVAR 67
3742: PLUS
3743: PPUSH
3744: CALL_OW 380
// un := CreateHuman ;
3748: LD_ADDR_VAR 0 6
3752: PUSH
3753: CALL_OW 44
3757: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3758: LD_ADDR_EXP 38
3762: PUSH
3763: LD_EXP 38
3767: PPUSH
3768: LD_EXP 38
3772: PUSH
3773: LD_INT 1
3775: PLUS
3776: PPUSH
3777: LD_VAR 0 6
3781: PPUSH
3782: CALL_OW 1
3786: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3787: LD_VAR 0 6
3791: PPUSH
3792: LD_VAR 0 5
3796: PPUSH
3797: CALL_OW 52
// end ;
3801: GO 3726
3803: POP
3804: POP
// end ;
3805: GO 3710
3807: POP
3808: POP
// if ibrahimOnRuSide then
3809: LD_EXP 3
3813: IFFALSE 3911
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3815: LD_ADDR_EXP 22
3819: PUSH
3820: LD_STRING IbrahimRu
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: LD_STRING 
3828: PPUSH
3829: CALL 31351 0 3
3833: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3834: LD_EXP 22
3838: PPUSH
3839: LD_INT 121
3841: PPUSH
3842: LD_INT 78
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 48
// ComHold ( Ibrahim ) ;
3852: LD_EXP 22
3856: PPUSH
3857: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3861: LD_INT 1
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 2
3869: PPUSH
3870: CALL_OW 380
// ruSol := CreateHuman ;
3874: LD_ADDR_EXP 43
3878: PUSH
3879: CALL_OW 44
3883: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3884: LD_EXP 43
3888: PPUSH
3889: LD_INT 121
3891: PPUSH
3892: LD_INT 75
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL_OW 48
// ComHold ( ruSol ) ;
3902: LD_EXP 43
3906: PPUSH
3907: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3911: LD_ADDR_VAR 0 4
3915: PUSH
3916: DOUBLE
3917: LD_INT 1
3919: DEC
3920: ST_TO_ADDR
3921: LD_INT 2
3923: PUSH
3924: LD_INT 2
3926: PUSH
3927: LD_OWVAR 67
3931: PLUS
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_EXP 10
3941: PUSH
3942: LD_INT 3
3944: GREATER
3945: PUSH
3946: LD_INT 1
3948: PLUS
3949: ARRAY
3950: PUSH
3951: FOR_TO
3952: IFFALSE 4021
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3954: LD_VAR 0 8
3958: PPUSH
3959: LD_INT 21
3961: PUSH
3962: LD_INT 23
3964: PUSH
3965: LD_INT 24
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_VAR 0 4
3977: PUSH
3978: LD_INT 3
3980: MOD
3981: PUSH
3982: LD_INT 1
3984: PLUS
3985: ARRAY
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 43
3995: PUSH
3996: LD_INT 44
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: CALL_OW 185
4019: GO 3951
4021: POP
4022: POP
// end ;
4023: LD_VAR 0 1
4027: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4028: LD_EXP 42
4032: PUSH
4033: LD_EXP 4
4037: NOT
4038: AND
4039: IFFALSE 4527
4041: GO 4043
4043: DISABLE
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
4051: PPUSH
// begin enable ;
4052: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4053: LD_ADDR_VAR 0 2
4057: PUSH
4058: LD_EXP 42
4062: PPUSH
4063: LD_INT 21
4065: PUSH
4066: LD_INT 2
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 72
4077: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4078: LD_ADDR_VAR 0 4
4082: PUSH
4083: LD_INT 81
4085: PUSH
4086: LD_INT 3
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 2
4095: PUSH
4096: LD_INT 95
4098: PUSH
4099: LD_INT 4
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 95
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 95
4118: PUSH
4119: LD_INT 6
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 95
4128: PUSH
4129: LD_INT 7
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: ST_TO_ADDR
// for i in filter do
4152: LD_ADDR_VAR 0 1
4156: PUSH
4157: LD_VAR 0 2
4161: PUSH
4162: FOR_IN
4163: IFFALSE 4525
// begin tmp := IsDrivenBy ( i ) ;
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL_OW 311
4179: ST_TO_ADDR
// tag := GetTag ( i ) ;
4180: LD_ADDR_VAR 0 6
4184: PUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: CALL_OW 110
4194: ST_TO_ADDR
// if not tmp then
4195: LD_VAR 0 3
4199: NOT
4200: IFFALSE 4204
// continue ;
4202: GO 4162
// if GetFuel ( i ) > 90 and tag = 2 then
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 261
4213: PUSH
4214: LD_INT 90
4216: GREATER
4217: PUSH
4218: LD_VAR 0 6
4222: PUSH
4223: LD_INT 2
4225: EQUAL
4226: AND
4227: IFFALSE 4243
// SetTag ( i , 0 ) else
4229: LD_VAR 0 1
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 109
4241: GO 4286
// if GetTag ( i ) = 2 then
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 110
4252: PUSH
4253: LD_INT 2
4255: EQUAL
4256: IFFALSE 4286
// begin x := rand ( 1 , 2 ) ;
4258: LD_ADDR_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PPUSH
4266: LD_INT 2
4268: PPUSH
4269: CALL_OW 12
4273: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4274: LD_VAR 0 1
4278: PPUSH
4279: LD_INT 200
4281: PPUSH
4282: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4286: LD_VAR 0 1
4290: PPUSH
4291: CALL_OW 256
4295: PUSH
4296: LD_INT 650
4298: GREATEREQUAL
4299: PUSH
4300: LD_VAR 0 6
4304: NOT
4305: AND
4306: IFFALSE 4332
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_VAR 0 4
4317: PPUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 74
4327: PPUSH
4328: CALL_OW 115
// if GetLives ( i ) < 650 and not tag then
4332: LD_VAR 0 1
4336: PPUSH
4337: CALL_OW 256
4341: PUSH
4342: LD_INT 650
4344: LESS
4345: PUSH
4346: LD_VAR 0 6
4350: NOT
4351: AND
4352: IFFALSE 4381
// begin SetTag ( i , 1 ) ;
4354: LD_VAR 0 1
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4366: LD_VAR 0 1
4370: PPUSH
4371: LD_INT 112
4373: PPUSH
4374: LD_INT 119
4376: PPUSH
4377: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4381: LD_VAR 0 1
4385: PPUSH
4386: CALL_OW 110
4390: PUSH
4391: LD_INT 1
4393: EQUAL
4394: PUSH
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_INT 112
4402: PPUSH
4403: LD_INT 119
4405: PPUSH
4406: CALL_OW 297
4410: PUSH
4411: LD_INT 9
4413: LESS
4414: AND
4415: PUSH
4416: LD_VAR 0 3
4420: AND
4421: IFFALSE 4523
// begin ComExitVehicle ( tmp ) ;
4423: LD_VAR 0 3
4427: PPUSH
4428: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4432: LD_VAR 0 3
4436: PPUSH
4437: LD_VAR 0 1
4441: PPUSH
4442: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4446: LD_INT 35
4448: PPUSH
4449: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4453: LD_VAR 0 1
4457: PPUSH
4458: CALL_OW 256
4462: PUSH
4463: LD_INT 1000
4465: EQUAL
4466: IFFALSE 4446
// ComEnterUnit ( tmp , i ) ;
4468: LD_VAR 0 3
4472: PPUSH
4473: LD_VAR 0 1
4477: PPUSH
4478: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4482: LD_VAR 0 1
4486: PPUSH
4487: CALL_OW 261
4491: PUSH
4492: LD_INT 50
4494: LESSEQUAL
4495: IFFALSE 4511
// SetTag ( i , 2 ) else
4497: LD_VAR 0 1
4501: PPUSH
4502: LD_INT 2
4504: PPUSH
4505: CALL_OW 109
4509: GO 4523
// SetTag ( i , 0 ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 0
4518: PPUSH
4519: CALL_OW 109
// end ; end ;
4523: GO 4162
4525: POP
4526: POP
// end ;
4527: PPOPN 6
4529: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4530: LD_EXP 4
4534: NOT
4535: PUSH
4536: LD_EXP 39
4540: AND
4541: IFFALSE 4802
4543: GO 4545
4545: DISABLE
4546: LD_INT 0
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
// begin enable ;
4552: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 3
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: LD_INT 24
4586: PUSH
4587: LD_INT 1000
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: PPUSH
4603: CALL_OW 70
4607: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4608: LD_ADDR_VAR 0 3
4612: PUSH
4613: LD_EXP 39
4617: PPUSH
4618: LD_INT 50
4620: PUSH
4621: EMPTY
4622: LIST
4623: PPUSH
4624: CALL_OW 72
4628: ST_TO_ADDR
// if filter and tmp then
4629: LD_VAR 0 2
4633: PUSH
4634: LD_VAR 0 3
4638: AND
4639: IFFALSE 4731
// begin for i in tmp do
4641: LD_ADDR_VAR 0 1
4645: PUSH
4646: LD_VAR 0 3
4650: PUSH
4651: FOR_IN
4652: IFFALSE 4727
// begin if GetTag ( i ) = tEscape then
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL_OW 110
4663: PUSH
4664: LD_EXP 18
4668: EQUAL
4669: IFFALSE 4673
// continue ;
4671: GO 4651
// if IsInUnit ( i ) then
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 310
4682: IFFALSE 4695
// ComExitBuilding ( i ) else
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 122
4693: GO 4725
// if not HasTask ( i ) then
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 314
4704: NOT
4705: IFFALSE 4725
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4707: LD_VAR 0 1
4711: PPUSH
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: CALL_OW 130
// end ;
4725: GO 4651
4727: POP
4728: POP
// end else
4729: GO 4802
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 54
4741: PUSH
4742: EMPTY
4743: LIST
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PPUSH
4749: CALL_OW 72
4753: IFFALSE 4802
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4755: LD_ADDR_VAR 0 1
4759: PUSH
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 3
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: EMPTY
4772: LIST
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PPUSH
4778: CALL_OW 72
4782: PUSH
4783: FOR_IN
4784: IFFALSE 4800
// ComEnterUnit ( i , ruMainBase ) ;
4786: LD_VAR 0 1
4790: PPUSH
4791: LD_INT 200
4793: PPUSH
4794: CALL_OW 120
4798: GO 4783
4800: POP
4801: POP
// end ; end ;
4802: PPOPN 4
4804: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4805: LD_EXP 4
4809: NOT
4810: PUSH
4811: LD_EXP 41
4815: AND
4816: IFFALSE 5095
4818: GO 4820
4820: DISABLE
4821: LD_INT 0
4823: PPUSH
4824: PPUSH
4825: PPUSH
4826: PPUSH
// begin enable ;
4827: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4828: LD_ADDR_VAR 0 2
4832: PUSH
4833: LD_INT 3
4835: PPUSH
4836: LD_INT 22
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 21
4848: PUSH
4849: LD_INT 1
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: LD_INT 24
4861: PUSH
4862: LD_INT 1000
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: PPUSH
4878: CALL_OW 70
4882: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4883: LD_ADDR_VAR 0 3
4887: PUSH
4888: LD_EXP 41
4892: PPUSH
4893: LD_INT 50
4895: PUSH
4896: EMPTY
4897: LIST
4898: PPUSH
4899: CALL_OW 72
4903: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4904: LD_ADDR_VAR 0 4
4908: PUSH
4909: LD_INT 118
4911: PPUSH
4912: LD_INT 121
4914: PPUSH
4915: CALL_OW 428
4919: ST_TO_ADDR
// if filter and tmp then
4920: LD_VAR 0 2
4924: PUSH
4925: LD_VAR 0 3
4929: AND
4930: IFFALSE 5022
// begin for i in tmp do
4932: LD_ADDR_VAR 0 1
4936: PUSH
4937: LD_VAR 0 3
4941: PUSH
4942: FOR_IN
4943: IFFALSE 5018
// begin if GetTag ( i ) = tEscape then
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 110
4954: PUSH
4955: LD_EXP 18
4959: EQUAL
4960: IFFALSE 4964
// continue ;
4962: GO 4942
// if IsInUnit ( i ) then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 310
4973: IFFALSE 4986
// ComExitBuilding ( i ) else
4975: LD_VAR 0 1
4979: PPUSH
4980: CALL_OW 122
4984: GO 5016
// if not HasTask ( i ) then
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 314
4995: NOT
4996: IFFALSE 5016
// ComHeal ( i , filter [ 1 ] ) ;
4998: LD_VAR 0 1
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 1
5010: ARRAY
5011: PPUSH
5012: CALL_OW 128
// end ;
5016: GO 4942
5018: POP
5019: POP
// end else
5020: GO 5095
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5022: LD_VAR 0 3
5026: PPUSH
5027: LD_INT 3
5029: PUSH
5030: LD_INT 54
5032: PUSH
5033: EMPTY
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 72
5044: IFFALSE 5095
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5046: LD_ADDR_VAR 0 1
5050: PUSH
5051: LD_VAR 0 3
5055: PPUSH
5056: LD_INT 3
5058: PUSH
5059: LD_INT 54
5061: PUSH
5062: EMPTY
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 72
5073: PUSH
5074: FOR_IN
5075: IFFALSE 5093
// ComEnterUnit ( i , lab ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_VAR 0 4
5086: PPUSH
5087: CALL_OW 120
5091: GO 5074
5093: POP
5094: POP
// end ; end ; end_of_file
5095: PPOPN 4
5097: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL 26457 0 1
// if un = Heike then
5107: LD_VAR 0 1
5111: PUSH
5112: LD_EXP 19
5116: EQUAL
5117: IFFALSE 5126
// YouLost ( Heike ) ;
5119: LD_STRING Heike
5121: PPUSH
5122: CALL_OW 104
// if un in ruEng then
5126: LD_VAR 0 1
5130: PUSH
5131: LD_EXP 39
5135: IN
5136: IFFALSE 5154
// ruEng := ruEng diff un ;
5138: LD_ADDR_EXP 39
5142: PUSH
5143: LD_EXP 39
5147: PUSH
5148: LD_VAR 0 1
5152: DIFF
5153: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5154: LD_VAR 0 1
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 2
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 23
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 69
5198: IN
5199: IFFALSE 5215
// loseCounter := loseCounter + 1 ;
5201: LD_ADDR_EXP 6
5205: PUSH
5206: LD_EXP 6
5210: PUSH
5211: LD_INT 1
5213: PLUS
5214: ST_TO_ADDR
// end ;
5215: PPOPN 1
5217: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5218: LD_INT 0
5220: PPUSH
5221: PPUSH
// begin if un in ruMobile then
5222: LD_VAR 0 2
5226: PUSH
5227: LD_EXP 42
5231: IN
5232: IFFALSE 5391
// begin ruMobile := ruMobile diff un ;
5234: LD_ADDR_EXP 42
5238: PUSH
5239: LD_EXP 42
5243: PUSH
5244: LD_VAR 0 2
5248: DIFF
5249: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5250: LD_ADDR_VAR 0 5
5254: PUSH
5255: LD_VAR 0 2
5259: PPUSH
5260: CALL_OW 264
5264: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_INT 110
5272: PPUSH
5273: LD_INT 126
5275: PPUSH
5276: CALL_OW 428
5280: ST_TO_ADDR
// if not driver or not fac then
5281: LD_VAR 0 1
5285: NOT
5286: PUSH
5287: LD_VAR 0 6
5291: NOT
5292: OR
5293: IFFALSE 5297
// exit ;
5295: GO 5391
// AddComMoveXY ( driver , 111 , 121 ) ;
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 111
5304: PPUSH
5305: LD_INT 121
5307: PPUSH
5308: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5312: LD_VAR 0 1
5316: PPUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5326: LD_INT 35
5328: PPUSH
5329: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5333: LD_VAR 0 1
5337: PPUSH
5338: CALL_OW 301
5342: PUSH
5343: LD_VAR 0 1
5347: PPUSH
5348: CALL_OW 310
5352: OR
5353: IFFALSE 5326
// if IsDead ( driver ) then
5355: LD_VAR 0 1
5359: PPUSH
5360: CALL_OW 301
5364: IFFALSE 5368
// exit ;
5366: GO 5391
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5368: LD_VAR 0 6
5372: PPUSH
5373: LD_INT 21
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: LD_VAR 0 5
5386: PPUSH
5387: CALL_OW 185
// end ; end ;
5391: PPOPN 6
5393: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5394: LD_VAR 0 1
5398: PPUSH
5399: LD_VAR 0 2
5403: PPUSH
5404: CALL 26577 0 2
// if GetSide ( fac ) = 3 then
5408: LD_VAR 0 2
5412: PPUSH
5413: CALL_OW 255
5417: PUSH
5418: LD_INT 3
5420: EQUAL
5421: IFFALSE 5467
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5423: LD_ADDR_EXP 42
5427: PUSH
5428: LD_EXP 42
5432: PPUSH
5433: LD_EXP 42
5437: PUSH
5438: LD_INT 1
5440: PLUS
5441: PPUSH
5442: LD_VAR 0 1
5446: PPUSH
5447: CALL_OW 1
5451: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5452: LD_VAR 0 1
5456: PPUSH
5457: LD_INT 110
5459: PPUSH
5460: LD_INT 117
5462: PPUSH
5463: CALL_OW 171
// end ; end ;
5467: PPOPN 2
5469: END
// on LeaveBuilding ( b , un ) do var barracks ;
5470: LD_INT 0
5472: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5473: LD_VAR 0 1
5477: PUSH
5478: LD_INT 130
5480: PPUSH
5481: LD_INT 17
5483: PPUSH
5484: CALL_OW 428
5488: PUSH
5489: LD_INT 138
5491: PPUSH
5492: LD_INT 22
5494: PPUSH
5495: CALL_OW 428
5499: PUSH
5500: LD_INT 123
5502: PPUSH
5503: LD_INT 17
5505: PPUSH
5506: CALL_OW 428
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: IN
5516: IFFALSE 5540
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_INT 135
5525: PPUSH
5526: LD_INT 31
5528: PPUSH
5529: CALL_OW 428
5533: PPUSH
5534: CALL_OW 180
// exit ;
5538: GO 5814
// end ; if b = HexInfo ( 135 , 31 ) then
5540: LD_VAR 0 1
5544: PUSH
5545: LD_INT 135
5547: PPUSH
5548: LD_INT 31
5550: PPUSH
5551: CALL_OW 428
5555: EQUAL
5556: IFFALSE 5628
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_INT 106
5565: PPUSH
5566: LD_INT 51
5568: PPUSH
5569: CALL_OW 428
5573: PPUSH
5574: CALL_OW 180
// if not explodeFirstDepot then
5578: LD_EXP 12
5582: NOT
5583: IFFALSE 5626
// begin explodeFirstDepot := true ;
5585: LD_ADDR_EXP 12
5589: PUSH
5590: LD_INT 1
5592: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5593: LD_INT 525
5595: PPUSH
5596: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5600: LD_INT 127
5602: PPUSH
5603: LD_INT 27
5605: PPUSH
5606: LD_INT 1
5608: PPUSH
5609: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5613: LD_INT 125
5615: PPUSH
5616: LD_INT 29
5618: PPUSH
5619: LD_INT 1
5621: PPUSH
5622: CALL_OW 453
// end ; exit ;
5626: GO 5814
// end ; if b = HexInfo ( 106 , 51 ) then
5628: LD_VAR 0 1
5632: PUSH
5633: LD_INT 106
5635: PPUSH
5636: LD_INT 51
5638: PPUSH
5639: CALL_OW 428
5643: EQUAL
5644: IFFALSE 5744
// begin AddComMoveXY ( un , 106 , 93 ) ;
5646: LD_VAR 0 2
5650: PPUSH
5651: LD_INT 106
5653: PPUSH
5654: LD_INT 93
5656: PPUSH
5657: CALL_OW 171
// if not explodeSecondDepot then
5661: LD_EXP 13
5665: NOT
5666: IFFALSE 5742
// begin explodeSecondDepot := true ;
5668: LD_ADDR_EXP 13
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5676: LD_INT 420
5678: PPUSH
5679: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5683: LD_INT 111
5685: PPUSH
5686: LD_INT 75
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5696: LD_INT 111
5698: PPUSH
5699: LD_INT 75
5701: PPUSH
5702: LD_INT 1
5704: PPUSH
5705: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5709: LD_INT 108
5711: PPUSH
5712: LD_INT 69
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 453
// wait ( 0 0$2 ) ;
5722: LD_INT 70
5724: PPUSH
5725: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5729: LD_INT 94
5731: PPUSH
5732: LD_INT 65
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 453
// end ; exit ;
5742: GO 5814
// end ; if GetBType ( b ) = b_bunker then
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 266
5753: PUSH
5754: LD_INT 32
5756: EQUAL
5757: IFFALSE 5814
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: LD_VAR 0 2
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: CALL 1016 0 2
5776: ST_TO_ADDR
// if barracks then
5777: LD_VAR 0 3
5781: IFFALSE 5799
// AddComEnterUnit ( un , barracks ) else
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_VAR 0 3
5792: PPUSH
5793: CALL_OW 180
5797: GO 5814
// AddComMoveXY ( un , 116 , 110 ) ;
5799: LD_VAR 0 2
5803: PPUSH
5804: LD_INT 116
5806: PPUSH
5807: LD_INT 110
5809: PPUSH
5810: CALL_OW 171
// end ; end ;
5814: PPOPN 3
5816: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5817: LD_VAR 0 1
5821: PUSH
5822: LD_EXP 24
5826: EQUAL
5827: PUSH
5828: LD_VAR 0 2
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: LD_INT 6
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: IN
5843: AND
5844: IFFALSE 5875
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5846: LD_ADDR_EXP 8
5850: PUSH
5851: LD_VAR 0 1
5855: PPUSH
5856: CALL_OW 250
5860: PUSH
5861: LD_VAR 0 1
5865: PPUSH
5866: CALL_OW 251
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: ST_TO_ADDR
// end ;
5875: PPOPN 3
5877: END
// every 0 0$1 trigger activeInvincible do var i ;
5878: LD_EXP 17
5882: IFFALSE 5951
5884: GO 5886
5886: DISABLE
5887: LD_INT 0
5889: PPUSH
// begin enable ;
5890: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
5891: LD_ADDR_VAR 0 1
5895: PUSH
5896: LD_INT 22
5898: PUSH
5899: LD_INT 2
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 3
5908: PUSH
5909: LD_INT 24
5911: PUSH
5912: LD_INT 1000
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL_OW 69
5931: PUSH
5932: FOR_IN
5933: IFFALSE 5949
// SetLives ( i , 1000 ) ;
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_INT 1000
5942: PPUSH
5943: CALL_OW 234
5947: GO 5932
5949: POP
5950: POP
// end ; end_of_file
5951: PPOPN 1
5953: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5954: LD_INT 0
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
// Video ( true ) ;
5963: LD_INT 1
5965: PPUSH
5966: CALL 69014 0 1
// ChangeSideFog ( 5 , 2 ) ;
5970: LD_INT 5
5972: PPUSH
5973: LD_INT 2
5975: PPUSH
5976: CALL_OW 343
// music_nat := 4 ;
5980: LD_ADDR_OWVAR 71
5984: PUSH
5985: LD_INT 4
5987: ST_TO_ADDR
// music_class := music_combat ;
5988: LD_ADDR_OWVAR 72
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5996: LD_INT 133
5998: PPUSH
5999: LD_INT 2
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: LD_INT 10
6007: PPUSH
6008: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
6012: LD_INT 133
6014: PPUSH
6015: LD_INT 2
6017: PPUSH
6018: CALL_OW 86
// wait ( 0 0$1 ) ;
6022: LD_INT 35
6024: PPUSH
6025: CALL_OW 67
// uc_side := 6 ;
6029: LD_ADDR_OWVAR 20
6033: PUSH
6034: LD_INT 6
6036: ST_TO_ADDR
// uc_nation := 3 ;
6037: LD_ADDR_OWVAR 21
6041: PUSH
6042: LD_INT 3
6044: ST_TO_ADDR
// rutmp := [ ] ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: EMPTY
6051: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
6052: LD_INT 6
6054: PPUSH
6055: LD_INT 3
6057: PPUSH
6058: LD_INT 21
6060: PPUSH
6061: LD_INT 1
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: LD_INT 44
6069: PPUSH
6070: LD_INT 66
6072: PPUSH
6073: CALL 344 0 7
// veh := CreateVehicle ;
6077: LD_ADDR_VAR 0 5
6081: PUSH
6082: CALL_OW 45
6086: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6087: LD_VAR 0 5
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6099: LD_VAR 0 5
6103: PPUSH
6104: LD_INT 8
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 49
// SetLives ( veh , 500 ) ;
6114: LD_VAR 0 5
6118: PPUSH
6119: LD_INT 500
6121: PPUSH
6122: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6126: LD_INT 0
6128: PPUSH
6129: LD_INT 3
6131: PPUSH
6132: LD_INT 3
6134: PPUSH
6135: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6139: CALL_OW 44
6143: PPUSH
6144: LD_VAR 0 5
6148: PPUSH
6149: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6153: LD_VAR 0 5
6157: PPUSH
6158: LD_INT 133
6160: PPUSH
6161: LD_INT 11
6163: PPUSH
6164: CALL_OW 111
// rutmp := [ veh ] ;
6168: LD_ADDR_VAR 0 7
6172: PUSH
6173: LD_VAR 0 5
6177: PUSH
6178: EMPTY
6179: LIST
6180: ST_TO_ADDR
// for i := 1 to 4 do
6181: LD_ADDR_VAR 0 2
6185: PUSH
6186: DOUBLE
6187: LD_INT 1
6189: DEC
6190: ST_TO_ADDR
6191: LD_INT 4
6193: PUSH
6194: FOR_TO
6195: IFFALSE 6302
// begin PrepareHuman ( false , i , 2 ) ;
6197: LD_INT 0
6199: PPUSH
6200: LD_VAR 0 2
6204: PPUSH
6205: LD_INT 2
6207: PPUSH
6208: CALL_OW 380
// un := CreateHuman ;
6212: LD_ADDR_VAR 0 4
6216: PUSH
6217: CALL_OW 44
6221: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6222: LD_VAR 0 4
6226: PPUSH
6227: LD_INT 3
6229: PPUSH
6230: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6234: LD_VAR 0 4
6238: PPUSH
6239: LD_INT 8
6241: PPUSH
6242: LD_INT 0
6244: PPUSH
6245: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6249: LD_ADDR_VAR 0 7
6253: PUSH
6254: LD_VAR 0 7
6258: PPUSH
6259: LD_VAR 0 7
6263: PUSH
6264: LD_INT 1
6266: PLUS
6267: PPUSH
6268: LD_VAR 0 4
6272: PPUSH
6273: CALL_OW 1
6277: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6278: LD_VAR 0 4
6282: PPUSH
6283: LD_INT 133
6285: PPUSH
6286: LD_INT 11
6288: PPUSH
6289: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6293: LD_INT 18
6295: PPUSH
6296: CALL_OW 67
// end ;
6300: GO 6194
6302: POP
6303: POP
// for i in rutmp do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_VAR 0 7
6313: PUSH
6314: FOR_IN
6315: IFFALSE 6364
// begin AddComMoveXY ( i , 99 , 65 ) ;
6317: LD_VAR 0 2
6321: PPUSH
6322: LD_INT 99
6324: PPUSH
6325: LD_INT 65
6327: PPUSH
6328: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_INT 76
6339: PPUSH
6340: LD_INT 108
6342: PPUSH
6343: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_INT 92
6354: PPUSH
6355: LD_INT 176
6357: PPUSH
6358: CALL_OW 171
// end ;
6362: GO 6314
6364: POP
6365: POP
// wait ( 0 0$10 ) ;
6366: LD_INT 350
6368: PPUSH
6369: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6373: LD_ADDR_VAR 0 6
6377: PUSH
6378: LD_EXP 19
6382: PUSH
6383: LD_EXP 20
6387: PUSH
6388: LD_EXP 21
6392: PUSH
6393: LD_EXP 22
6397: PUSH
6398: LD_EXP 23
6402: PUSH
6403: LD_EXP 24
6407: PUSH
6408: LD_EXP 25
6412: PUSH
6413: LD_EXP 26
6417: PUSH
6418: LD_EXP 28
6422: PUSH
6423: LD_EXP 29
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_EXP 30
6444: UNION
6445: ST_TO_ADDR
// tmp := tmp diff 0 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_VAR 0 6
6455: PUSH
6456: LD_INT 0
6458: DIFF
6459: ST_TO_ADDR
// for i in heikeVehicles do
6460: LD_ADDR_VAR 0 2
6464: PUSH
6465: LD_EXP 31
6469: PUSH
6470: FOR_IN
6471: IFFALSE 6890
// begin if not tmp then
6473: LD_VAR 0 6
6477: NOT
6478: IFFALSE 6482
// continue ;
6480: GO 6470
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6482: LD_INT 2
6484: PPUSH
6485: LD_VAR 0 2
6489: PUSH
6490: LD_INT 5
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 2
6498: PUSH
6499: LD_INT 1
6501: ARRAY
6502: PPUSH
6503: LD_VAR 0 2
6507: PUSH
6508: LD_INT 2
6510: ARRAY
6511: PPUSH
6512: LD_VAR 0 2
6516: PUSH
6517: LD_INT 3
6519: ARRAY
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 4
6528: ARRAY
6529: PPUSH
6530: LD_INT 34
6532: PPUSH
6533: CALL 344 0 7
// veh := CreateVehicle ;
6537: LD_ADDR_VAR 0 5
6541: PUSH
6542: CALL_OW 45
6546: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6547: LD_VAR 0 2
6551: PUSH
6552: LD_INT 4
6554: ARRAY
6555: PUSH
6556: LD_INT 51
6558: PUSH
6559: LD_INT 32
6561: PUSH
6562: LD_INT 12
6564: PUSH
6565: LD_INT 89
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: IN
6574: IFFALSE 6654
// begin if i [ 7 ] [ 1 ] then
6576: LD_VAR 0 2
6580: PUSH
6581: LD_INT 7
6583: ARRAY
6584: PUSH
6585: LD_INT 1
6587: ARRAY
6588: IFFALSE 6615
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6590: LD_VAR 0 5
6594: PPUSH
6595: LD_INT 1
6597: PPUSH
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 7
6605: ARRAY
6606: PUSH
6607: LD_INT 1
6609: ARRAY
6610: PPUSH
6611: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6615: LD_VAR 0 2
6619: PUSH
6620: LD_INT 7
6622: ARRAY
6623: PUSH
6624: LD_INT 2
6626: ARRAY
6627: IFFALSE 6654
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6629: LD_VAR 0 5
6633: PPUSH
6634: LD_INT 2
6636: PPUSH
6637: LD_VAR 0 2
6641: PUSH
6642: LD_INT 7
6644: ARRAY
6645: PUSH
6646: LD_INT 2
6648: ARRAY
6649: PPUSH
6650: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6654: LD_VAR 0 5
6658: PPUSH
6659: LD_INT 3
6661: PPUSH
6662: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6666: LD_VAR 0 5
6670: PPUSH
6671: LD_INT 8
6673: PPUSH
6674: LD_INT 0
6676: PPUSH
6677: CALL_OW 49
// for j := 1 to tmp do
6681: LD_ADDR_VAR 0 3
6685: PUSH
6686: DOUBLE
6687: LD_INT 1
6689: DEC
6690: ST_TO_ADDR
6691: LD_VAR 0 6
6695: PUSH
6696: FOR_TO
6697: IFFALSE 6770
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6699: LD_VAR 0 2
6703: PUSH
6704: LD_INT 8
6706: ARRAY
6707: PUSH
6708: LD_VAR 0 6
6712: PUSH
6713: LD_VAR 0 3
6717: ARRAY
6718: PPUSH
6719: CALL_OW 257
6723: EQUAL
6724: IFFALSE 6768
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6726: LD_VAR 0 6
6730: PUSH
6731: LD_VAR 0 3
6735: ARRAY
6736: PPUSH
6737: LD_VAR 0 5
6741: PPUSH
6742: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6746: LD_ADDR_VAR 0 6
6750: PUSH
6751: LD_VAR 0 6
6755: PPUSH
6756: LD_VAR 0 3
6760: PPUSH
6761: CALL_OW 3
6765: ST_TO_ADDR
// break ;
6766: GO 6770
// end ; end ;
6768: GO 6696
6770: POP
6771: POP
// if IsEmpty ( veh ) then
6772: LD_VAR 0 5
6776: PPUSH
6777: CALL 33475 0 1
6781: IFFALSE 6819
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6783: LD_VAR 0 6
6787: PUSH
6788: LD_INT 1
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 5
6796: PPUSH
6797: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_VAR 0 6
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 3
6818: ST_TO_ADDR
// end ; if GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6819: LD_VAR 0 5
6823: PPUSH
6824: CALL_OW 264
6828: PUSH
6829: LD_INT 51
6831: PUSH
6832: LD_INT 32
6834: PUSH
6835: LD_INT 12
6837: PUSH
6838: LD_INT 89
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: IN
6847: IFFALSE 6866
// ComMoveXY ( veh , 130 , 8 ) else
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_INT 130
6856: PPUSH
6857: LD_INT 8
6859: PPUSH
6860: CALL_OW 111
6864: GO 6881
// ComMoveXY ( veh , 134 , 15 ) ;
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 134
6873: PPUSH
6874: LD_INT 15
6876: PPUSH
6877: CALL_OW 111
// wait ( 0 0$3 ) ;
6881: LD_INT 105
6883: PPUSH
6884: CALL_OW 67
// end ;
6888: GO 6470
6890: POP
6891: POP
// if tmp then
6892: LD_VAR 0 6
6896: IFFALSE 6952
// for i in tmp do
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: LD_VAR 0 6
6907: PUSH
6908: FOR_IN
6909: IFFALSE 6950
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6911: LD_VAR 0 2
6915: PPUSH
6916: LD_INT 10
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6926: LD_VAR 0 2
6930: PPUSH
6931: LD_INT 146
6933: PPUSH
6934: LD_INT 7
6936: PPUSH
6937: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6941: LD_INT 18
6943: PPUSH
6944: CALL_OW 67
// end ;
6948: GO 6908
6950: POP
6951: POP
// if heikeApes then
6952: LD_EXP 32
6956: IFFALSE 7012
// for i in heikeApes do
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: LD_EXP 32
6967: PUSH
6968: FOR_IN
6969: IFFALSE 7010
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6971: LD_VAR 0 2
6975: PPUSH
6976: LD_INT 10
6978: PPUSH
6979: LD_INT 0
6981: PPUSH
6982: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_INT 146
6993: PPUSH
6994: LD_INT 7
6996: PPUSH
6997: CALL_OW 114
// wait ( 0 0$0.5 ) ;
7001: LD_INT 18
7003: PPUSH
7004: CALL_OW 67
// end ;
7008: GO 6968
7010: POP
7011: POP
// DialogueOn ;
7012: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
7016: LD_EXP 19
7020: PPUSH
7021: LD_STRING DH-outpost-a-1
7023: PPUSH
7024: CALL_OW 88
// DialogueOff ;
7028: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
7032: LD_INT 133
7034: PPUSH
7035: LD_INT 2
7037: PPUSH
7038: LD_INT 2
7040: PPUSH
7041: CALL_OW 331
// activeInvincible := false ;
7045: LD_ADDR_EXP 17
7049: PUSH
7050: LD_INT 0
7052: ST_TO_ADDR
// Video ( false ) ;
7053: LD_INT 0
7055: PPUSH
7056: CALL 69014 0 1
// music_nat := 0 ;
7060: LD_ADDR_OWVAR 71
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// music_class := 0 ;
7068: LD_ADDR_OWVAR 72
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
7076: LD_STRING Outposts
7078: PPUSH
7079: CALL_OW 337
// SaveForQuickRestart ;
7083: CALL_OW 22
// end ;
7087: LD_VAR 0 1
7091: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
7092: LD_INT 22
7094: PUSH
7095: LD_INT 2
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 91
7104: PUSH
7105: LD_EXP 22
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: PUSH
7127: LD_EXP 3
7131: AND
7132: PUSH
7133: LD_EXP 22
7137: PPUSH
7138: CALL_OW 302
7142: AND
7143: IFFALSE 7390
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
7151: PPUSH
7152: PPUSH
7153: PPUSH
// begin IbrahimBetrayal ;
7154: CALL 7393 0 0
// repeat wait ( 0 0$1 ) ;
7158: LD_INT 35
7160: PPUSH
7161: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7165: LD_EXP 22
7169: PPUSH
7170: CALL_OW 301
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 2
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 91
7187: PUSH
7188: LD_EXP 22
7192: PUSH
7193: LD_INT 6
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PUSH
7210: LD_EXP 22
7214: PPUSH
7215: CALL_OW 302
7219: AND
7220: OR
7221: IFFALSE 7158
// if IsDead ( Ibrahim ) then
7223: LD_EXP 22
7227: PPUSH
7228: CALL_OW 301
7232: IFFALSE 7236
// exit ;
7234: GO 7390
// x := GetX ( Ibrahim ) ;
7236: LD_ADDR_VAR 0 1
7240: PUSH
7241: LD_EXP 22
7245: PPUSH
7246: CALL_OW 250
7250: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: LD_EXP 22
7260: PPUSH
7261: CALL_OW 251
7265: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7266: LD_ADDR_VAR 0 3
7270: PUSH
7271: LD_EXP 22
7275: PPUSH
7276: CALL_OW 254
7280: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7281: LD_ADDR_VAR 0 4
7285: PUSH
7286: LD_EXP 22
7290: PPUSH
7291: CALL_OW 256
7295: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7296: LD_EXP 22
7300: PPUSH
7301: CALL_OW 64
// uc_side := 2 ;
7305: LD_ADDR_OWVAR 20
7309: PUSH
7310: LD_INT 2
7312: ST_TO_ADDR
// uc_nation := 2 ;
7313: LD_ADDR_OWVAR 21
7317: PUSH
7318: LD_INT 2
7320: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7321: LD_ADDR_EXP 22
7325: PUSH
7326: LD_STRING Ibrahim
7328: PPUSH
7329: LD_INT 0
7331: PPUSH
7332: LD_STRING 
7334: PPUSH
7335: CALL 31351 0 3
7339: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7340: LD_EXP 22
7344: PPUSH
7345: LD_VAR 0 3
7349: PPUSH
7350: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7354: LD_EXP 22
7358: PPUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 2
7368: PPUSH
7369: LD_INT 0
7371: PPUSH
7372: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7376: LD_EXP 22
7380: PPUSH
7381: LD_VAR 0 4
7385: PPUSH
7386: CALL_OW 234
// end ;
7390: PPOPN 4
7392: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7393: LD_INT 0
7395: PPUSH
7396: PPUSH
7397: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7398: LD_INT 122
7400: PPUSH
7401: LD_INT 77
7403: PPUSH
7404: LD_INT 2
7406: PPUSH
7407: LD_INT 6
7409: NEG
7410: PPUSH
7411: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7415: LD_EXP 22
7419: PPUSH
7420: LD_INT 123
7422: PPUSH
7423: LD_INT 79
7425: PPUSH
7426: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7430: LD_EXP 22
7434: PPUSH
7435: LD_INT 125
7437: PPUSH
7438: LD_INT 82
7440: PPUSH
7441: CALL_OW 178
// wait ( 0 0$2 ) ;
7445: LD_INT 70
7447: PPUSH
7448: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7452: LD_EXP 43
7456: PPUSH
7457: LD_EXP 22
7461: PPUSH
7462: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7466: LD_EXP 43
7470: PPUSH
7471: LD_STRING DRum-outpost-b-3
7473: PPUSH
7474: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 125
7485: PPUSH
7486: LD_INT 76
7488: PPUSH
7489: CALL_OW 428
7493: PUSH
7494: LD_INT 125
7496: PPUSH
7497: LD_INT 79
7499: PPUSH
7500: CALL_OW 428
7504: PUSH
7505: LD_INT 125
7507: PPUSH
7508: LD_INT 82
7510: PPUSH
7511: CALL_OW 428
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: ST_TO_ADDR
// for i in tmp do
7521: LD_ADDR_VAR 0 2
7525: PUSH
7526: LD_VAR 0 3
7530: PUSH
7531: FOR_IN
7532: IFFALSE 7548
// SetLives ( i , 200 ) ;
7534: LD_VAR 0 2
7538: PPUSH
7539: LD_INT 200
7541: PPUSH
7542: CALL_OW 234
7546: GO 7531
7548: POP
7549: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7550: LD_EXP 22
7554: PPUSH
7555: LD_STRING DI-outpost-b-4
7557: PPUSH
7558: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7562: LD_EXP 22
7566: PPUSH
7567: LD_INT 5
7569: PPUSH
7570: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7574: LD_EXP 22
7578: PUSH
7579: LD_EXP 43
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7592: LD_INT 122
7594: PPUSH
7595: LD_INT 77
7597: PPUSH
7598: LD_INT 2
7600: PPUSH
7601: CALL_OW 331
// if Givi then
7605: LD_EXP 20
7609: IFFALSE 7625
// Say ( Givi , DG-1-outpost-b-5 ) else
7611: LD_EXP 20
7615: PPUSH
7616: LD_STRING DG-1-outpost-b-5
7618: PPUSH
7619: CALL_OW 88
7623: GO 7690
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7625: LD_EXP 30
7629: PPUSH
7630: LD_INT 26
7632: PUSH
7633: LD_INT 2
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 72
7644: PUSH
7645: LD_INT 1
7647: ARRAY
7648: PPUSH
7649: LD_STRING DArf-outpost-b-a-5
7651: PPUSH
7652: CALL_OW 88
7656: NOT
7657: IFFALSE 7690
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7659: LD_EXP 30
7663: PPUSH
7664: LD_INT 26
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 72
7678: PUSH
7679: LD_INT 1
7681: ARRAY
7682: PPUSH
7683: LD_STRING DArm-outpost-b-a-5
7685: PPUSH
7686: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7690: LD_INT 35
7692: PPUSH
7693: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7697: LD_EXP 22
7701: PPUSH
7702: CALL_OW 301
7706: PUSH
7707: LD_EXP 19
7711: PPUSH
7712: LD_EXP 22
7716: PPUSH
7717: CALL_OW 296
7721: PUSH
7722: LD_INT 6
7724: LESS
7725: PUSH
7726: LD_EXP 22
7730: PPUSH
7731: CALL_OW 302
7735: AND
7736: OR
7737: IFFALSE 7690
// if IsDead ( Ibrahim ) then
7739: LD_EXP 22
7743: PPUSH
7744: CALL_OW 301
7748: IFFALSE 7764
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7750: LD_EXP 19
7754: PPUSH
7755: LD_STRING DH-ibrahimdead-1
7757: PPUSH
7758: CALL_OW 88
// exit ;
7762: GO 7805
// end ; CenterNowOnUnits ( Ibrahim ) ;
7764: LD_EXP 22
7768: PPUSH
7769: CALL_OW 87
// DialogueOn ;
7773: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7777: LD_EXP 22
7781: PPUSH
7782: LD_STRING DI-ibrahimlives-1
7784: PPUSH
7785: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7789: LD_EXP 19
7793: PPUSH
7794: LD_STRING DH-Ibrahimlives-2
7796: PPUSH
7797: CALL_OW 88
// DialogueOff ;
7801: CALL_OW 7
// end ;
7805: LD_VAR 0 1
7809: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7810: LD_INT 11
7812: PPUSH
7813: LD_INT 22
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 70
7827: PUSH
7828: LD_OWVAR 1
7832: PUSH
7833: LD_INT 18900
7835: PUSH
7836: LD_INT 16800
7838: PUSH
7839: LD_INT 16800
7841: PUSH
7842: LD_INT 15750
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: LD_OWVAR 67
7855: ARRAY
7856: GREATEREQUAL
7857: OR
7858: IFFALSE 8366
7860: GO 7862
7862: DISABLE
// begin outerAreaAchived := true ;
7863: LD_ADDR_EXP 15
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7871: LD_INT 700
7873: PPUSH
7874: CALL_OW 67
// DialogueOn ;
7878: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7882: LD_EXP 27
7886: PPUSH
7887: LD_STRING DShar-radio-1
7889: PPUSH
7890: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7894: LD_EXP 27
7898: PPUSH
7899: LD_STRING DShar-radio-2
7901: PPUSH
7902: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_STRING DH-radio-2
7913: PPUSH
7914: CALL_OW 88
// DialogueOff ;
7918: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7922: LD_STRING Gaidar
7924: PPUSH
7925: CALL_OW 337
// if Difficulty < 3 then
7929: LD_OWVAR 67
7933: PUSH
7934: LD_INT 3
7936: LESS
7937: IFFALSE 8003
// begin DialogueOn ;
7939: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7943: LD_INT 11
7945: PPUSH
7946: LD_INT 14
7948: PPUSH
7949: LD_INT 2
7951: PPUSH
7952: LD_INT 6
7954: NEG
7955: PPUSH
7956: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7960: LD_INT 11
7962: PPUSH
7963: LD_INT 14
7965: PPUSH
7966: LD_INT 2
7968: PPUSH
7969: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7973: LD_INT 11
7975: PPUSH
7976: LD_INT 14
7978: PPUSH
7979: CALL_OW 84
// dwait ( 0 0$1 ) ;
7983: LD_INT 35
7985: PPUSH
7986: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7990: LD_EXP 19
7994: PPUSH
7995: CALL_OW 87
// DialogueOff ;
7999: CALL_OW 7
// end ; wait ( 1 1$20 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
8003: LD_INT 2800
8005: PUSH
8006: LD_INT 350
8008: PPUSH
8009: LD_INT 525
8011: PPUSH
8012: CALL_OW 12
8016: PUSH
8017: LD_OWVAR 67
8021: MUL
8022: PLUS
8023: PPUSH
8024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8028: LD_INT 35
8030: PPUSH
8031: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
8035: LD_INT 2
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: CALL_OW 428
8045: PUSH
8046: LD_INT 0
8048: EQUAL
8049: IFFALSE 8028
// SetDir ( Gaidar , 2 ) ;
8051: LD_EXP 36
8055: PPUSH
8056: LD_INT 2
8058: PPUSH
8059: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
8063: LD_EXP 36
8067: PPUSH
8068: LD_INT 2
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: LD_INT 0
8076: PPUSH
8077: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
8081: LD_EXP 36
8085: PPUSH
8086: LD_INT 19
8088: PPUSH
8089: LD_INT 24
8091: PPUSH
8092: CALL_OW 111
// if Difficulty < 3 then
8096: LD_OWVAR 67
8100: PUSH
8101: LD_INT 3
8103: LESS
8104: IFFALSE 8143
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8106: LD_INT 11
8108: PPUSH
8109: LD_INT 14
8111: PPUSH
8112: LD_INT 2
8114: PPUSH
8115: LD_INT 6
8117: NEG
8118: PPUSH
8119: CALL_OW 330
// wait ( 0 0$2 ) ;
8123: LD_INT 70
8125: PPUSH
8126: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
8130: LD_INT 11
8132: PPUSH
8133: LD_INT 14
8135: PPUSH
8136: LD_INT 2
8138: PPUSH
8139: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
8143: LD_EXP 36
8147: PPUSH
8148: LD_INT 210
8150: PPUSH
8151: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8155: LD_EXP 36
8159: PPUSH
8160: LD_INT 38
8162: PPUSH
8163: LD_INT 47
8165: PPUSH
8166: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8170: LD_EXP 36
8174: PPUSH
8175: LD_INT 32
8177: PPUSH
8178: LD_INT 59
8180: PPUSH
8181: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8185: LD_EXP 36
8189: PPUSH
8190: LD_INT 350
8192: PPUSH
8193: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8197: LD_EXP 36
8201: PPUSH
8202: LD_INT 62
8204: PPUSH
8205: LD_INT 116
8207: PPUSH
8208: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8212: LD_EXP 36
8216: PPUSH
8217: LD_INT 92
8219: PPUSH
8220: LD_INT 177
8222: PPUSH
8223: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8227: LD_INT 35
8229: PPUSH
8230: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8234: LD_EXP 36
8238: PPUSH
8239: CALL_OW 301
8243: PUSH
8244: LD_EXP 36
8248: PPUSH
8249: LD_INT 92
8251: PPUSH
8252: LD_INT 177
8254: PPUSH
8255: CALL_OW 307
8259: OR
8260: IFFALSE 8227
// if IsAt ( Gaidar , 92 , 177 ) then
8262: LD_EXP 36
8266: PPUSH
8267: LD_INT 92
8269: PPUSH
8270: LD_INT 177
8272: PPUSH
8273: CALL_OW 307
8277: IFFALSE 8344
// begin DialogueOn ;
8279: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8283: LD_INT 92
8285: PPUSH
8286: LD_INT 177
8288: PPUSH
8289: LD_INT 2
8291: PPUSH
8292: LD_INT 3
8294: NEG
8295: PPUSH
8296: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8300: LD_EXP 36
8304: PPUSH
8305: CALL_OW 87
// dwait ( 0 0$2 ) ;
8309: LD_INT 70
8311: PPUSH
8312: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8316: LD_INT 92
8318: PPUSH
8319: LD_INT 177
8321: PPUSH
8322: LD_INT 2
8324: PPUSH
8325: CALL_OW 331
// DialogueOff ;
8329: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8333: LD_EXP 36
8337: PPUSH
8338: CALL_OW 64
// exit ;
8342: GO 8366
// end ; gaidarKilled := true ;
8344: LD_ADDR_EXP 14
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8352: LD_STRING GaidarKilled
8354: PPUSH
8355: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8359: LD_STRING ACH_COMMISAR
8361: PPUSH
8362: CALL_OW 543
// end ;
8366: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8367: LD_INT 2
8369: PPUSH
8370: LD_EXP 36
8374: PPUSH
8375: CALL_OW 292
8379: IFFALSE 8396
8381: GO 8383
8383: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8384: LD_EXP 36
8388: PPUSH
8389: LD_STRING DT-objective-1
8391: PPUSH
8392: CALL_OW 88
8396: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8397: LD_INT 22
8399: PUSH
8400: LD_INT 2
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 2
8409: PUSH
8410: LD_INT 95
8412: PUSH
8413: LD_INT 5
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: LD_INT 95
8422: PUSH
8423: LD_INT 6
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 95
8432: PUSH
8433: LD_INT 7
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: IFFALSE 8491
8456: GO 8458
8458: DISABLE
// begin DialogueOn ;
8459: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8463: LD_EXP 19
8467: PPUSH
8468: LD_STRING DH-outpost-last-1
8470: PPUSH
8471: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8475: LD_EXP 35
8479: PPUSH
8480: LD_STRING DB-outpost-last-2
8482: PPUSH
8483: CALL_OW 94
// DialogueOff ;
8487: CALL_OW 7
// end ;
8491: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8492: LD_INT 200
8494: PPUSH
8495: CALL_OW 256
8499: PUSH
8500: LD_INT 999
8502: LESS
8503: PUSH
8504: LD_INT 200
8506: PPUSH
8507: CALL_OW 255
8511: PUSH
8512: LD_INT 2
8514: EQUAL
8515: OR
8516: IFFALSE 8689
8518: GO 8520
8520: DISABLE
8521: LD_INT 0
8523: PPUSH
8524: PPUSH
// begin if not earlyEscape then
8525: LD_EXP 16
8529: NOT
8530: IFFALSE 8556
// begin SayRadio ( Burlak , DB-end-1 ) ;
8532: LD_EXP 35
8536: PPUSH
8537: LD_STRING DB-end-1
8539: PPUSH
8540: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8544: LD_EXP 19
8548: PPUSH
8549: LD_STRING DH-end-2
8551: PPUSH
8552: CALL_OW 88
// end ; if tick <= 15 15$00 then
8556: LD_OWVAR 1
8560: PUSH
8561: LD_INT 31500
8563: LESSEQUAL
8564: IFFALSE 8573
// SetAchievement ( ACH_FIST ) ;
8566: LD_STRING ACH_FIST
8568: PPUSH
8569: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: LD_INT 22
8580: PUSH
8581: LD_INT 3
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: LD_INT 21
8593: PUSH
8594: LD_INT 3
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PPUSH
8609: CALL_OW 69
8613: ST_TO_ADDR
// if not tmp then
8614: LD_VAR 0 2
8618: NOT
8619: IFFALSE 8623
// exit ;
8621: GO 8689
// for i in tmp do
8623: LD_ADDR_VAR 0 1
8627: PUSH
8628: LD_VAR 0 2
8632: PUSH
8633: FOR_IN
8634: IFFALSE 8687
// begin SetTag ( i , tEscape ) ;
8636: LD_VAR 0 1
8640: PPUSH
8641: LD_EXP 18
8645: PPUSH
8646: CALL_OW 109
// if IsInUnit ( i ) then
8650: LD_VAR 0 1
8654: PPUSH
8655: CALL_OW 310
8659: IFFALSE 8670
// ComExitBuilding ( i ) ;
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8670: LD_VAR 0 1
8674: PPUSH
8675: LD_INT 92
8677: PPUSH
8678: LD_INT 177
8680: PPUSH
8681: CALL_OW 171
// end ;
8685: GO 8633
8687: POP
8688: POP
// end ;
8689: PPOPN 2
8691: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8692: LD_INT 4
8694: PPUSH
8695: LD_INT 22
8697: PUSH
8698: LD_INT 2
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 70
8709: PUSH
8710: LD_EXP 15
8714: NOT
8715: AND
8716: PUSH
8717: LD_EXP 28
8721: PPUSH
8722: CALL_OW 302
8726: AND
8727: IFFALSE 8967
8729: GO 8731
8731: DISABLE
// begin DialogueOn ;
8732: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8736: LD_INT 111
8738: PPUSH
8739: LD_INT 54
8741: PPUSH
8742: LD_INT 2
8744: PPUSH
8745: LD_INT 16
8747: NEG
8748: PPUSH
8749: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8753: LD_INT 111
8755: PPUSH
8756: LD_INT 53
8758: PPUSH
8759: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8763: LD_INT 10
8765: PPUSH
8766: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8770: LD_EXP 28
8774: PPUSH
8775: LD_STRING DKs-Hannibal-1
8777: PPUSH
8778: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8782: LD_EXP 28
8786: PPUSH
8787: LD_STRING DKs-Hannibal-2
8789: PPUSH
8790: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8794: LD_EXP 28
8798: PPUSH
8799: LD_STRING DKs-Hannibal-3
8801: PPUSH
8802: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8806: LD_EXP 28
8810: PPUSH
8811: LD_STRING DKs-Hannibal-4
8813: PPUSH
8814: CALL_OW 88
// dwait ( 0 0$1 ) ;
8818: LD_INT 35
8820: PPUSH
8821: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8825: LD_INT 111
8827: PPUSH
8828: LD_INT 54
8830: PPUSH
8831: LD_INT 2
8833: PPUSH
8834: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8838: LD_INT 173
8840: PPUSH
8841: LD_INT 76
8843: PPUSH
8844: LD_INT 2
8846: PPUSH
8847: LD_INT 12
8849: NEG
8850: PPUSH
8851: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8855: LD_INT 173
8857: PPUSH
8858: LD_INT 76
8860: PPUSH
8861: LD_INT 2
8863: PPUSH
8864: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8868: LD_INT 173
8870: PPUSH
8871: LD_INT 76
8873: PPUSH
8874: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8878: LD_EXP 28
8882: PPUSH
8883: LD_STRING DKs-Hannibal-5
8885: PPUSH
8886: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8890: LD_EXP 23
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 2
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 34
8907: PUSH
8908: LD_INT 26
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: NOT
8924: AND
8925: IFFALSE 8963
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8927: LD_EXP 23
8931: PPUSH
8932: LD_STRING DKam-Hannibal-a-6
8934: PPUSH
8935: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8939: LD_EXP 23
8943: PPUSH
8944: LD_STRING DKam-Hannibal-a-7
8946: PPUSH
8947: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8951: LD_EXP 20
8955: PPUSH
8956: LD_STRING DG-Hannibal-a-8
8958: PPUSH
8959: CALL_OW 88
// end ; DialogueOff ;
8963: CALL_OW 7
// end ;
8967: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8968: LD_INT 225
8970: PPUSH
8971: CALL_OW 302
8975: PUSH
8976: LD_INT 200
8978: PPUSH
8979: CALL_OW 302
8983: AND
8984: PUSH
8985: LD_INT 12
8987: PPUSH
8988: LD_INT 21
8990: PUSH
8991: LD_INT 3
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: PUSH
9003: LD_INT 2
9005: GREATER
9006: AND
9007: PUSH
9008: LD_INT 13
9010: PPUSH
9011: LD_INT 22
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PPUSH
9021: CALL_OW 70
9025: PUSH
9026: LD_INT 3
9028: GREATER
9029: AND
9030: IFFALSE 9043
9032: GO 9034
9034: DISABLE
// hannibalPath := true ;
9035: LD_ADDR_EXP 9
9039: PUSH
9040: LD_INT 1
9042: ST_TO_ADDR
9043: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
9044: LD_EXP 9
9048: PUSH
9049: LD_INT 6
9051: PPUSH
9052: LD_INT 22
9054: PUSH
9055: LD_INT 2
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PPUSH
9062: CALL_OW 70
9066: AND
9067: IFFALSE 9412
9069: GO 9071
9071: DISABLE
9072: LD_INT 0
9074: PPUSH
9075: PPUSH
9076: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
9077: LD_ADDR_VAR 0 2
9081: PUSH
9082: LD_INT 6
9084: PPUSH
9085: LD_INT 22
9087: PUSH
9088: LD_INT 2
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 70
9099: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
9100: LD_ADDR_VAR 0 3
9104: PUSH
9105: LD_VAR 0 2
9109: PPUSH
9110: LD_INT 34
9112: PUSH
9113: LD_INT 26
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 72
9124: PUSH
9125: LD_INT 0
9127: GREATER
9128: ST_TO_ADDR
// DialogueOn ;
9129: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
9133: LD_EXP 19
9137: PPUSH
9138: LD_STRING DH-Cleverattack-1
9140: PPUSH
9141: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
9145: LD_EXP 19
9149: PPUSH
9150: LD_STRING DH-Cleverattack-2
9152: PPUSH
9153: CALL_OW 88
// if hasFlameThrower then
9157: LD_VAR 0 3
9161: IFFALSE 9189
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9163: LD_EXP 35
9167: PPUSH
9168: LD_STRING DB-Cleverattack-3
9170: PPUSH
9171: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9175: LD_EXP 19
9179: PPUSH
9180: LD_STRING DH-Cleverattack-4
9182: PPUSH
9183: CALL_OW 88
// end else
9187: GO 9213
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9189: LD_EXP 35
9193: PPUSH
9194: LD_STRING DB-Cleverattack-a-3
9196: PPUSH
9197: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9201: LD_EXP 19
9205: PPUSH
9206: LD_STRING DH-Cleverattack-a-4
9208: PPUSH
9209: CALL_OW 88
// end ; DialogueOff ;
9213: CALL_OW 7
// if not hasFlameThrower then
9217: LD_VAR 0 3
9221: NOT
9222: IFFALSE 9226
// exit ;
9224: GO 9412
// earlyEscape := true ;
9226: LD_ADDR_EXP 16
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9234: LD_INT 140
9236: PPUSH
9237: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: LD_INT 25
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 25
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 4
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PUSH
9304: LD_EXP 22
9308: PUSH
9309: LD_EXP 37
9313: PUSH
9314: LD_EXP 36
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: DIFF
9324: ST_TO_ADDR
// for i in tmp do
9325: LD_ADDR_VAR 0 1
9329: PUSH
9330: LD_VAR 0 2
9334: PUSH
9335: FOR_IN
9336: IFFALSE 9410
// begin if Prob ( 40 + 10 * Difficulty ) then
9338: LD_INT 40
9340: PUSH
9341: LD_INT 10
9343: PUSH
9344: LD_OWVAR 67
9348: MUL
9349: PLUS
9350: PPUSH
9351: CALL_OW 13
9355: IFFALSE 9359
// continue ;
9357: GO 9335
// SetTag ( i , tEscape ) ;
9359: LD_VAR 0 1
9363: PPUSH
9364: LD_EXP 18
9368: PPUSH
9369: CALL_OW 109
// if IsInUnit ( i ) then
9373: LD_VAR 0 1
9377: PPUSH
9378: CALL_OW 310
9382: IFFALSE 9393
// ComExitBuilding ( i ) ;
9384: LD_VAR 0 1
9388: PPUSH
9389: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_INT 92
9400: PPUSH
9401: LD_INT 177
9403: PPUSH
9404: CALL_OW 171
// end ;
9408: GO 9335
9410: POP
9411: POP
// end ;
9412: PPOPN 3
9414: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9415: LD_INT 9
9417: PPUSH
9418: LD_INT 2
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_INT 6
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: PPUSH
9446: CALL_OW 70
9450: IFFALSE 9548
9452: GO 9454
9454: DISABLE
9455: LD_INT 0
9457: PPUSH
// begin enable ;
9458: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9459: LD_ADDR_VAR 0 1
9463: PUSH
9464: LD_INT 9
9466: PPUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 22
9482: PUSH
9483: LD_INT 6
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 70
9499: PUSH
9500: FOR_IN
9501: IFFALSE 9546
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9503: LD_VAR 0 1
9507: PPUSH
9508: CALL_OW 110
9512: PUSH
9513: LD_EXP 18
9517: EQUAL
9518: PUSH
9519: LD_VAR 0 1
9523: PPUSH
9524: CALL_OW 255
9528: PUSH
9529: LD_INT 6
9531: EQUAL
9532: OR
9533: IFFALSE 9544
// RemoveUnit ( i ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: CALL_OW 64
9544: GO 9500
9546: POP
9547: POP
// end ;
9548: PPOPN 1
9550: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9551: LD_EXP 24
9555: PUSH
9556: LD_EXP 24
9560: PPUSH
9561: CALL_OW 256
9565: PUSH
9566: LD_INT 3
9568: LESS
9569: AND
9570: IFFALSE 9616
9572: GO 9574
9574: DISABLE
// begin DialogueOn ;
9575: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9579: LD_EXP 24
9583: PPUSH
9584: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9588: LD_EXP 24
9592: PPUSH
9593: LD_STRING DK-Kkilled-1
9595: PPUSH
9596: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9600: LD_EXP 19
9604: PPUSH
9605: LD_STRING DH-Kkilled-2
9607: PPUSH
9608: CALL_OW 88
// DialogueOff ;
9612: CALL_OW 7
// end ;
9616: END
// every 0 0$1 trigger kaiaKilledByRussian do
9617: LD_EXP 8
9621: IFFALSE 9638
9623: GO 9625
9625: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9626: LD_EXP 19
9630: PPUSH
9631: LD_STRING DH-Kkilled-3
9633: PPUSH
9634: CALL_OW 88
9638: END
// every 0 0$1 trigger tick >= 24 24$00 do
9639: LD_OWVAR 1
9643: PUSH
9644: LD_INT 50400
9646: GREATEREQUAL
9647: IFFALSE 9684
9649: GO 9651
9651: DISABLE
// begin DialogueOn ;
9652: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9656: LD_EXP 27
9660: PPUSH
9661: LD_STRING DShar-slow-1
9663: PPUSH
9664: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9668: LD_EXP 27
9672: PPUSH
9673: LD_STRING DShar-slow-2
9675: PPUSH
9676: CALL_OW 94
// DialogueOff ;
9680: CALL_OW 7
// end ;
9684: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9685: LD_OWVAR 1
9689: PUSH
9690: LD_INT 84000
9692: PUSH
9693: LD_INT 75600
9695: PUSH
9696: LD_INT 67200
9698: PUSH
9699: LD_INT 63000
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_OWVAR 67
9712: ARRAY
9713: GREATEREQUAL
9714: IFFALSE 9758
9716: GO 9718
9718: DISABLE
// begin DialogueOn ;
9719: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9723: LD_EXP 27
9727: PPUSH
9728: LD_STRING DShar-fail-1
9730: PPUSH
9731: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9735: LD_EXP 27
9739: PPUSH
9740: LD_STRING DShar-fail-2
9742: PPUSH
9743: CALL_OW 94
// DialogueOff ;
9747: CALL_OW 7
// YouLost ( Time ) ;
9751: LD_STRING Time
9753: PPUSH
9754: CALL_OW 104
// end ;
9758: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9759: LD_INT 22
9761: PUSH
9762: LD_INT 3
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 30
9774: PUSH
9775: LD_INT 1
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 0
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: PUSH
9806: LD_INT 0
9808: EQUAL
9809: IFFALSE 10472
9811: GO 9813
9813: DISABLE
9814: LD_INT 0
9816: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 5 then
9817: LD_INT 22
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 50
9849: PUSH
9850: EMPTY
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: PPUSH
9859: CALL_OW 69
9863: PPUSH
9864: CALL 33453 0 1
9868: PUSH
9869: LD_INT 5
9871: LESS
9872: IFFALSE 9883
// begin YouLost ( Troops ) ;
9874: LD_STRING Troops
9876: PPUSH
9877: CALL_OW 104
// exit ;
9881: GO 10472
// end ; if ( tick + gameTime ) <= 55 55$00 then
9883: LD_OWVAR 1
9887: PUSH
9888: LD_EXP 5
9892: PLUS
9893: PUSH
9894: LD_INT 115500
9896: LESSEQUAL
9897: IFFALSE 9906
// SetAchievement ( ACH_HSPEED_4 ) ;
9899: LD_STRING ACH_HSPEED_4
9901: PPUSH
9902: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9906: LD_OWVAR 1
9910: PUSH
9911: LD_EXP 5
9915: PLUS
9916: PUSH
9917: LD_INT 178500
9919: PUSH
9920: LD_INT 157500
9922: PUSH
9923: LD_INT 136500
9925: PUSH
9926: LD_INT 126000
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: PUSH
9935: LD_OWVAR 67
9939: ARRAY
9940: LESSEQUAL
9941: IFFALSE 9955
// AddMedal ( med1 , 1 ) else
9943: LD_STRING med1
9945: PPUSH
9946: LD_INT 1
9948: PPUSH
9949: CALL_OW 101
9953: GO 9966
// AddMedal ( med1 , - 1 ) ;
9955: LD_STRING med1
9957: PPUSH
9958: LD_INT 1
9960: NEG
9961: PPUSH
9962: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9966: LD_EXP 7
9970: PUSH
9971: LD_INT 3
9973: GREATEREQUAL
9974: PUSH
9975: LD_EXP 11
9979: MUL
9980: PUSH
9981: LD_EXP 9
9985: MUL
9986: PUSH
9987: LD_EXP 6
9991: PUSH
9992: LD_INT 6
9994: PUSH
9995: LD_INT 5
9997: PUSH
9998: LD_INT 4
10000: PUSH
10001: LD_INT 3
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: PUSH
10010: LD_OWVAR 67
10014: ARRAY
10015: LESS
10016: MUL
10017: IFFALSE 10031
// AddMedal ( med2 , 1 ) else
10019: LD_STRING med2
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: CALL_OW 101
10029: GO 10105
// if flamethrowers < 3 then
10031: LD_EXP 7
10035: PUSH
10036: LD_INT 3
10038: LESS
10039: IFFALSE 10054
// AddMedal ( med2 , - 1 ) else
10041: LD_STRING med2
10043: PPUSH
10044: LD_INT 1
10046: NEG
10047: PPUSH
10048: CALL_OW 101
10052: GO 10105
// if not baseHill then
10054: LD_EXP 11
10058: NOT
10059: IFFALSE 10074
// AddMedal ( med2 , - 2 ) else
10061: LD_STRING med2
10063: PPUSH
10064: LD_INT 2
10066: NEG
10067: PPUSH
10068: CALL_OW 101
10072: GO 10105
// if not hannibalPath then
10074: LD_EXP 9
10078: NOT
10079: IFFALSE 10094
// AddMedal ( med2 , - 3 ) else
10081: LD_STRING med2
10083: PPUSH
10084: LD_INT 3
10086: NEG
10087: PPUSH
10088: CALL_OW 101
10092: GO 10105
// AddMedal ( med3 , - 2 ) ;
10094: LD_STRING med3
10096: PPUSH
10097: LD_INT 2
10099: NEG
10100: PPUSH
10101: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
10105: LD_EXP 14
10109: PPUSH
10110: LD_STRING 04_2_GaidarKilled
10112: PPUSH
10113: CALL_OW 39
// if gaidarKilled then
10117: LD_EXP 14
10121: IFFALSE 10135
// AddMedal ( med3 , 1 ) else
10123: LD_STRING med3
10125: PPUSH
10126: LD_INT 1
10128: PPUSH
10129: CALL_OW 101
10133: GO 10146
// AddMedal ( med3 , - 1 ) ;
10135: LD_STRING med3
10137: PPUSH
10138: LD_INT 1
10140: NEG
10141: PPUSH
10142: CALL_OW 101
// GiveMedals ( MAIN ) ;
10146: LD_STRING MAIN
10148: PPUSH
10149: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
10153: LD_INT 22
10155: PUSH
10156: LD_INT 2
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: LD_INT 23
10168: PUSH
10169: LD_INT 0
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 69
10188: PPUSH
10189: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
10193: LD_EXP 19
10197: PPUSH
10198: LD_STRING 04_2_Heike
10200: PPUSH
10201: CALL_OW 38
// if Aviradze then
10205: LD_EXP 29
10209: IFFALSE 10223
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
10211: LD_EXP 29
10215: PPUSH
10216: LD_STRING 04_2_Aviradze
10218: PPUSH
10219: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10223: LD_EXP 22
10227: PUSH
10228: LD_EXP 22
10232: PPUSH
10233: CALL_OW 255
10237: PUSH
10238: LD_INT 2
10240: EQUAL
10241: AND
10242: IFFALSE 10272
// begin if ibrahimOnRuSide then
10244: LD_EXP 3
10248: IFFALSE 10260
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10250: LD_INT 1
10252: PPUSH
10253: LD_STRING 04_2_IbrahimJoined
10255: PPUSH
10256: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10260: LD_EXP 22
10264: PPUSH
10265: LD_STRING 04_2_Ibrahim
10267: PPUSH
10268: CALL_OW 38
// end ; if Kamil then
10272: LD_EXP 23
10276: IFFALSE 10290
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10278: LD_EXP 23
10282: PPUSH
10283: LD_STRING 04_2_Kamil
10285: PPUSH
10286: CALL_OW 38
// if Sophia then
10290: LD_EXP 25
10294: IFFALSE 10308
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10296: LD_EXP 25
10300: PPUSH
10301: LD_STRING 04_2_Sophia
10303: PPUSH
10304: CALL_OW 38
// if Kaia then
10308: LD_EXP 24
10312: IFFALSE 10326
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10314: LD_EXP 24
10318: PPUSH
10319: LD_STRING 04_2_Kaia
10321: PPUSH
10322: CALL_OW 38
// if Givi then
10326: LD_EXP 20
10330: IFFALSE 10344
// SaveCharacters ( Givi , 04_2_Givi ) ;
10332: LD_EXP 20
10336: PPUSH
10337: LD_STRING 04_2_Givi
10339: PPUSH
10340: CALL_OW 38
// if Mike then
10344: LD_EXP 21
10348: IFFALSE 10362
// SaveCharacters ( Mike , 04_2_Mike ) ;
10350: LD_EXP 21
10354: PPUSH
10355: LD_STRING 04_2_Mike
10357: PPUSH
10358: CALL_OW 38
// if Markov then
10362: LD_EXP 26
10366: IFFALSE 10380
// SaveCharacters ( Markov , 04_2_Markov ) ;
10368: LD_EXP 26
10372: PPUSH
10373: LD_STRING 04_2_Markov
10375: PPUSH
10376: CALL_OW 38
// if Kurt then
10380: LD_EXP 28
10384: IFFALSE 10398
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10386: LD_EXP 28
10390: PPUSH
10391: LD_STRING 04_2_Kurt
10393: PPUSH
10394: CALL_OW 38
// if heikeSecondSquad then
10398: LD_EXP 30
10402: IFFALSE 10416
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10404: LD_EXP 30
10408: PPUSH
10409: LD_STRING 04_2_others
10411: PPUSH
10412: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10416: LD_ADDR_VAR 0 1
10420: PUSH
10421: LD_INT 22
10423: PUSH
10424: LD_INT 2
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 23
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: ST_TO_ADDR
// if tmp then
10450: LD_VAR 0 1
10454: IFFALSE 10468
// SaveCharacters ( tmp , 04_2_apes ) ;
10456: LD_VAR 0 1
10460: PPUSH
10461: LD_STRING 04_2_apes
10463: PPUSH
10464: CALL_OW 38
// YouWin ;
10468: CALL_OW 103
// end ; end_of_file
10472: PPOPN 1
10474: END
// export globalGameSaveCounter ; every 0 0$1 do
10475: GO 10477
10477: DISABLE
// begin enable ;
10478: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10479: LD_STRING updateTimer(
10481: PUSH
10482: LD_OWVAR 1
10486: STR
10487: PUSH
10488: LD_STRING );
10490: STR
10491: PPUSH
10492: CALL_OW 559
// end ;
10496: END
// every 0 0$1 do
10497: GO 10499
10499: DISABLE
// begin globalGameSaveCounter := 0 ;
10500: LD_ADDR_EXP 44
10504: PUSH
10505: LD_INT 0
10507: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10508: LD_STRING setGameSaveCounter(0)
10510: PPUSH
10511: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10515: LD_STRING initStreamRollete();
10517: PPUSH
10518: CALL_OW 559
// InitStreamMode ;
10522: CALL 11865 0 0
// DefineStreamItems ( false ) ;
10526: LD_INT 0
10528: PPUSH
10529: CALL 12329 0 1
// end ;
10533: END
// export function SOS_MapStart ( ) ; begin
10534: LD_INT 0
10536: PPUSH
// if streamModeActive then
10537: LD_EXP 45
10541: IFFALSE 10550
// DefineStreamItems ( true ) ;
10543: LD_INT 1
10545: PPUSH
10546: CALL 12329 0 1
// UpdateLuaVariables ( ) ;
10550: CALL 10567 0 0
// UpdateFactoryWaypoints ( ) ;
10554: CALL 25198 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10558: CALL 25455 0 0
// end ;
10562: LD_VAR 0 1
10566: RET
// function UpdateLuaVariables ( ) ; begin
10567: LD_INT 0
10569: PPUSH
// if globalGameSaveCounter then
10570: LD_EXP 44
10574: IFFALSE 10608
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10576: LD_ADDR_EXP 44
10580: PUSH
10581: LD_EXP 44
10585: PPUSH
10586: CALL 70403 0 1
10590: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10591: LD_STRING setGameSaveCounter(
10593: PUSH
10594: LD_EXP 44
10598: STR
10599: PUSH
10600: LD_STRING )
10602: STR
10603: PPUSH
10604: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10608: LD_STRING setGameDifficulty(
10610: PUSH
10611: LD_OWVAR 67
10615: STR
10616: PUSH
10617: LD_STRING )
10619: STR
10620: PPUSH
10621: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10625: LD_STRING displayDifficulty(
10627: PUSH
10628: LD_OWVAR 67
10632: STR
10633: PUSH
10634: LD_STRING )
10636: STR
10637: PPUSH
10638: CALL_OW 559
// end ;
10642: LD_VAR 0 1
10646: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10647: LD_INT 0
10649: PPUSH
// if p2 = stream_mode then
10650: LD_VAR 0 2
10654: PUSH
10655: LD_INT 100
10657: EQUAL
10658: IFFALSE 11661
// begin if not StreamModeActive then
10660: LD_EXP 45
10664: NOT
10665: IFFALSE 10675
// StreamModeActive := true ;
10667: LD_ADDR_EXP 45
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 0 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 0
10682: EQUAL
10683: IFFALSE 10689
// InitStreamMode ;
10685: CALL 11865 0 0
// if p3 = 1 then
10689: LD_VAR 0 3
10693: PUSH
10694: LD_INT 1
10696: EQUAL
10697: IFFALSE 10707
// sRocket := true ;
10699: LD_ADDR_EXP 50
10703: PUSH
10704: LD_INT 1
10706: ST_TO_ADDR
// if p3 = 2 then
10707: LD_VAR 0 3
10711: PUSH
10712: LD_INT 2
10714: EQUAL
10715: IFFALSE 10725
// sSpeed := true ;
10717: LD_ADDR_EXP 49
10721: PUSH
10722: LD_INT 1
10724: ST_TO_ADDR
// if p3 = 3 then
10725: LD_VAR 0 3
10729: PUSH
10730: LD_INT 3
10732: EQUAL
10733: IFFALSE 10743
// sEngine := true ;
10735: LD_ADDR_EXP 51
10739: PUSH
10740: LD_INT 1
10742: ST_TO_ADDR
// if p3 = 4 then
10743: LD_VAR 0 3
10747: PUSH
10748: LD_INT 4
10750: EQUAL
10751: IFFALSE 10761
// sSpec := true ;
10753: LD_ADDR_EXP 48
10757: PUSH
10758: LD_INT 1
10760: ST_TO_ADDR
// if p3 = 5 then
10761: LD_VAR 0 3
10765: PUSH
10766: LD_INT 5
10768: EQUAL
10769: IFFALSE 10779
// sLevel := true ;
10771: LD_ADDR_EXP 52
10775: PUSH
10776: LD_INT 1
10778: ST_TO_ADDR
// if p3 = 6 then
10779: LD_VAR 0 3
10783: PUSH
10784: LD_INT 6
10786: EQUAL
10787: IFFALSE 10797
// sArmoury := true ;
10789: LD_ADDR_EXP 53
10793: PUSH
10794: LD_INT 1
10796: ST_TO_ADDR
// if p3 = 7 then
10797: LD_VAR 0 3
10801: PUSH
10802: LD_INT 7
10804: EQUAL
10805: IFFALSE 10815
// sRadar := true ;
10807: LD_ADDR_EXP 54
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// if p3 = 8 then
10815: LD_VAR 0 3
10819: PUSH
10820: LD_INT 8
10822: EQUAL
10823: IFFALSE 10833
// sBunker := true ;
10825: LD_ADDR_EXP 55
10829: PUSH
10830: LD_INT 1
10832: ST_TO_ADDR
// if p3 = 9 then
10833: LD_VAR 0 3
10837: PUSH
10838: LD_INT 9
10840: EQUAL
10841: IFFALSE 10851
// sHack := true ;
10843: LD_ADDR_EXP 56
10847: PUSH
10848: LD_INT 1
10850: ST_TO_ADDR
// if p3 = 10 then
10851: LD_VAR 0 3
10855: PUSH
10856: LD_INT 10
10858: EQUAL
10859: IFFALSE 10869
// sFire := true ;
10861: LD_ADDR_EXP 57
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
// if p3 = 11 then
10869: LD_VAR 0 3
10873: PUSH
10874: LD_INT 11
10876: EQUAL
10877: IFFALSE 10887
// sRefresh := true ;
10879: LD_ADDR_EXP 58
10883: PUSH
10884: LD_INT 1
10886: ST_TO_ADDR
// if p3 = 12 then
10887: LD_VAR 0 3
10891: PUSH
10892: LD_INT 12
10894: EQUAL
10895: IFFALSE 10905
// sExp := true ;
10897: LD_ADDR_EXP 59
10901: PUSH
10902: LD_INT 1
10904: ST_TO_ADDR
// if p3 = 13 then
10905: LD_VAR 0 3
10909: PUSH
10910: LD_INT 13
10912: EQUAL
10913: IFFALSE 10923
// sDepot := true ;
10915: LD_ADDR_EXP 60
10919: PUSH
10920: LD_INT 1
10922: ST_TO_ADDR
// if p3 = 14 then
10923: LD_VAR 0 3
10927: PUSH
10928: LD_INT 14
10930: EQUAL
10931: IFFALSE 10941
// sFlag := true ;
10933: LD_ADDR_EXP 61
10937: PUSH
10938: LD_INT 1
10940: ST_TO_ADDR
// if p3 = 15 then
10941: LD_VAR 0 3
10945: PUSH
10946: LD_INT 15
10948: EQUAL
10949: IFFALSE 10959
// sKamikadze := true ;
10951: LD_ADDR_EXP 69
10955: PUSH
10956: LD_INT 1
10958: ST_TO_ADDR
// if p3 = 16 then
10959: LD_VAR 0 3
10963: PUSH
10964: LD_INT 16
10966: EQUAL
10967: IFFALSE 10977
// sTroll := true ;
10969: LD_ADDR_EXP 70
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// if p3 = 17 then
10977: LD_VAR 0 3
10981: PUSH
10982: LD_INT 17
10984: EQUAL
10985: IFFALSE 10995
// sSlow := true ;
10987: LD_ADDR_EXP 71
10991: PUSH
10992: LD_INT 1
10994: ST_TO_ADDR
// if p3 = 18 then
10995: LD_VAR 0 3
10999: PUSH
11000: LD_INT 18
11002: EQUAL
11003: IFFALSE 11013
// sLack := true ;
11005: LD_ADDR_EXP 72
11009: PUSH
11010: LD_INT 1
11012: ST_TO_ADDR
// if p3 = 19 then
11013: LD_VAR 0 3
11017: PUSH
11018: LD_INT 19
11020: EQUAL
11021: IFFALSE 11031
// sTank := true ;
11023: LD_ADDR_EXP 74
11027: PUSH
11028: LD_INT 1
11030: ST_TO_ADDR
// if p3 = 20 then
11031: LD_VAR 0 3
11035: PUSH
11036: LD_INT 20
11038: EQUAL
11039: IFFALSE 11049
// sRemote := true ;
11041: LD_ADDR_EXP 75
11045: PUSH
11046: LD_INT 1
11048: ST_TO_ADDR
// if p3 = 21 then
11049: LD_VAR 0 3
11053: PUSH
11054: LD_INT 21
11056: EQUAL
11057: IFFALSE 11067
// sPowell := true ;
11059: LD_ADDR_EXP 76
11063: PUSH
11064: LD_INT 1
11066: ST_TO_ADDR
// if p3 = 22 then
11067: LD_VAR 0 3
11071: PUSH
11072: LD_INT 22
11074: EQUAL
11075: IFFALSE 11085
// sTeleport := true ;
11077: LD_ADDR_EXP 79
11081: PUSH
11082: LD_INT 1
11084: ST_TO_ADDR
// if p3 = 23 then
11085: LD_VAR 0 3
11089: PUSH
11090: LD_INT 23
11092: EQUAL
11093: IFFALSE 11103
// sOilTower := true ;
11095: LD_ADDR_EXP 81
11099: PUSH
11100: LD_INT 1
11102: ST_TO_ADDR
// if p3 = 24 then
11103: LD_VAR 0 3
11107: PUSH
11108: LD_INT 24
11110: EQUAL
11111: IFFALSE 11121
// sShovel := true ;
11113: LD_ADDR_EXP 82
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// if p3 = 25 then
11121: LD_VAR 0 3
11125: PUSH
11126: LD_INT 25
11128: EQUAL
11129: IFFALSE 11139
// sSheik := true ;
11131: LD_ADDR_EXP 83
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// if p3 = 26 then
11139: LD_VAR 0 3
11143: PUSH
11144: LD_INT 26
11146: EQUAL
11147: IFFALSE 11157
// sEarthquake := true ;
11149: LD_ADDR_EXP 85
11153: PUSH
11154: LD_INT 1
11156: ST_TO_ADDR
// if p3 = 27 then
11157: LD_VAR 0 3
11161: PUSH
11162: LD_INT 27
11164: EQUAL
11165: IFFALSE 11175
// sAI := true ;
11167: LD_ADDR_EXP 86
11171: PUSH
11172: LD_INT 1
11174: ST_TO_ADDR
// if p3 = 28 then
11175: LD_VAR 0 3
11179: PUSH
11180: LD_INT 28
11182: EQUAL
11183: IFFALSE 11193
// sCargo := true ;
11185: LD_ADDR_EXP 89
11189: PUSH
11190: LD_INT 1
11192: ST_TO_ADDR
// if p3 = 29 then
11193: LD_VAR 0 3
11197: PUSH
11198: LD_INT 29
11200: EQUAL
11201: IFFALSE 11211
// sDLaser := true ;
11203: LD_ADDR_EXP 90
11207: PUSH
11208: LD_INT 1
11210: ST_TO_ADDR
// if p3 = 30 then
11211: LD_VAR 0 3
11215: PUSH
11216: LD_INT 30
11218: EQUAL
11219: IFFALSE 11229
// sExchange := true ;
11221: LD_ADDR_EXP 91
11225: PUSH
11226: LD_INT 1
11228: ST_TO_ADDR
// if p3 = 31 then
11229: LD_VAR 0 3
11233: PUSH
11234: LD_INT 31
11236: EQUAL
11237: IFFALSE 11247
// sFac := true ;
11239: LD_ADDR_EXP 92
11243: PUSH
11244: LD_INT 1
11246: ST_TO_ADDR
// if p3 = 32 then
11247: LD_VAR 0 3
11251: PUSH
11252: LD_INT 32
11254: EQUAL
11255: IFFALSE 11265
// sPower := true ;
11257: LD_ADDR_EXP 93
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// if p3 = 33 then
11265: LD_VAR 0 3
11269: PUSH
11270: LD_INT 33
11272: EQUAL
11273: IFFALSE 11283
// sRandom := true ;
11275: LD_ADDR_EXP 94
11279: PUSH
11280: LD_INT 1
11282: ST_TO_ADDR
// if p3 = 34 then
11283: LD_VAR 0 3
11287: PUSH
11288: LD_INT 34
11290: EQUAL
11291: IFFALSE 11301
// sShield := true ;
11293: LD_ADDR_EXP 95
11297: PUSH
11298: LD_INT 1
11300: ST_TO_ADDR
// if p3 = 35 then
11301: LD_VAR 0 3
11305: PUSH
11306: LD_INT 35
11308: EQUAL
11309: IFFALSE 11319
// sTime := true ;
11311: LD_ADDR_EXP 96
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// if p3 = 36 then
11319: LD_VAR 0 3
11323: PUSH
11324: LD_INT 36
11326: EQUAL
11327: IFFALSE 11337
// sTools := true ;
11329: LD_ADDR_EXP 97
11333: PUSH
11334: LD_INT 1
11336: ST_TO_ADDR
// if p3 = 101 then
11337: LD_VAR 0 3
11341: PUSH
11342: LD_INT 101
11344: EQUAL
11345: IFFALSE 11355
// sSold := true ;
11347: LD_ADDR_EXP 62
11351: PUSH
11352: LD_INT 1
11354: ST_TO_ADDR
// if p3 = 102 then
11355: LD_VAR 0 3
11359: PUSH
11360: LD_INT 102
11362: EQUAL
11363: IFFALSE 11373
// sDiff := true ;
11365: LD_ADDR_EXP 63
11369: PUSH
11370: LD_INT 1
11372: ST_TO_ADDR
// if p3 = 103 then
11373: LD_VAR 0 3
11377: PUSH
11378: LD_INT 103
11380: EQUAL
11381: IFFALSE 11391
// sFog := true ;
11383: LD_ADDR_EXP 66
11387: PUSH
11388: LD_INT 1
11390: ST_TO_ADDR
// if p3 = 104 then
11391: LD_VAR 0 3
11395: PUSH
11396: LD_INT 104
11398: EQUAL
11399: IFFALSE 11409
// sReset := true ;
11401: LD_ADDR_EXP 67
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// if p3 = 105 then
11409: LD_VAR 0 3
11413: PUSH
11414: LD_INT 105
11416: EQUAL
11417: IFFALSE 11427
// sSun := true ;
11419: LD_ADDR_EXP 68
11423: PUSH
11424: LD_INT 1
11426: ST_TO_ADDR
// if p3 = 106 then
11427: LD_VAR 0 3
11431: PUSH
11432: LD_INT 106
11434: EQUAL
11435: IFFALSE 11445
// sTiger := true ;
11437: LD_ADDR_EXP 64
11441: PUSH
11442: LD_INT 1
11444: ST_TO_ADDR
// if p3 = 107 then
11445: LD_VAR 0 3
11449: PUSH
11450: LD_INT 107
11452: EQUAL
11453: IFFALSE 11463
// sBomb := true ;
11455: LD_ADDR_EXP 65
11459: PUSH
11460: LD_INT 1
11462: ST_TO_ADDR
// if p3 = 108 then
11463: LD_VAR 0 3
11467: PUSH
11468: LD_INT 108
11470: EQUAL
11471: IFFALSE 11481
// sWound := true ;
11473: LD_ADDR_EXP 73
11477: PUSH
11478: LD_INT 1
11480: ST_TO_ADDR
// if p3 = 109 then
11481: LD_VAR 0 3
11485: PUSH
11486: LD_INT 109
11488: EQUAL
11489: IFFALSE 11499
// sBetray := true ;
11491: LD_ADDR_EXP 77
11495: PUSH
11496: LD_INT 1
11498: ST_TO_ADDR
// if p3 = 110 then
11499: LD_VAR 0 3
11503: PUSH
11504: LD_INT 110
11506: EQUAL
11507: IFFALSE 11517
// sContamin := true ;
11509: LD_ADDR_EXP 78
11513: PUSH
11514: LD_INT 1
11516: ST_TO_ADDR
// if p3 = 111 then
11517: LD_VAR 0 3
11521: PUSH
11522: LD_INT 111
11524: EQUAL
11525: IFFALSE 11535
// sOil := true ;
11527: LD_ADDR_EXP 80
11531: PUSH
11532: LD_INT 1
11534: ST_TO_ADDR
// if p3 = 112 then
11535: LD_VAR 0 3
11539: PUSH
11540: LD_INT 112
11542: EQUAL
11543: IFFALSE 11553
// sStu := true ;
11545: LD_ADDR_EXP 84
11549: PUSH
11550: LD_INT 1
11552: ST_TO_ADDR
// if p3 = 113 then
11553: LD_VAR 0 3
11557: PUSH
11558: LD_INT 113
11560: EQUAL
11561: IFFALSE 11571
// sBazooka := true ;
11563: LD_ADDR_EXP 87
11567: PUSH
11568: LD_INT 1
11570: ST_TO_ADDR
// if p3 = 114 then
11571: LD_VAR 0 3
11575: PUSH
11576: LD_INT 114
11578: EQUAL
11579: IFFALSE 11589
// sMortar := true ;
11581: LD_ADDR_EXP 88
11585: PUSH
11586: LD_INT 1
11588: ST_TO_ADDR
// if p3 = 115 then
11589: LD_VAR 0 3
11593: PUSH
11594: LD_INT 115
11596: EQUAL
11597: IFFALSE 11607
// sRanger := true ;
11599: LD_ADDR_EXP 98
11603: PUSH
11604: LD_INT 1
11606: ST_TO_ADDR
// if p3 = 116 then
11607: LD_VAR 0 3
11611: PUSH
11612: LD_INT 116
11614: EQUAL
11615: IFFALSE 11625
// sComputer := true ;
11617: LD_ADDR_EXP 99
11621: PUSH
11622: LD_INT 1
11624: ST_TO_ADDR
// if p3 = 117 then
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 117
11632: EQUAL
11633: IFFALSE 11643
// s30 := true ;
11635: LD_ADDR_EXP 100
11639: PUSH
11640: LD_INT 1
11642: ST_TO_ADDR
// if p3 = 118 then
11643: LD_VAR 0 3
11647: PUSH
11648: LD_INT 118
11650: EQUAL
11651: IFFALSE 11661
// s60 := true ;
11653: LD_ADDR_EXP 101
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// end ; if p2 = hack_mode then
11661: LD_VAR 0 2
11665: PUSH
11666: LD_INT 101
11668: EQUAL
11669: IFFALSE 11797
// begin case p3 of 1 :
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 1
11678: DOUBLE
11679: EQUAL
11680: IFTRUE 11684
11682: GO 11691
11684: POP
// hHackUnlimitedResources ; 2 :
11685: CALL 23944 0 0
11689: GO 11797
11691: LD_INT 2
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11706
11699: POP
// hHackSetLevel10 ; 3 :
11700: CALL 24077 0 0
11704: GO 11797
11706: LD_INT 3
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11714
11712: GO 11721
11714: POP
// hHackSetLevel10YourUnits ; 4 :
11715: CALL 24162 0 0
11719: GO 11797
11721: LD_INT 4
11723: DOUBLE
11724: EQUAL
11725: IFTRUE 11729
11727: GO 11736
11729: POP
// hHackInvincible ; 5 :
11730: CALL 24610 0 0
11734: GO 11797
11736: LD_INT 5
11738: DOUBLE
11739: EQUAL
11740: IFTRUE 11744
11742: GO 11751
11744: POP
// hHackInvisible ; 6 :
11745: CALL 24721 0 0
11749: GO 11797
11751: LD_INT 6
11753: DOUBLE
11754: EQUAL
11755: IFTRUE 11759
11757: GO 11766
11759: POP
// hHackChangeYourSide ; 7 :
11760: CALL 24778 0 0
11764: GO 11797
11766: LD_INT 7
11768: DOUBLE
11769: EQUAL
11770: IFTRUE 11774
11772: GO 11781
11774: POP
// hHackChangeUnitSide ; 8 :
11775: CALL 24820 0 0
11779: GO 11797
11781: LD_INT 8
11783: DOUBLE
11784: EQUAL
11785: IFTRUE 11789
11787: GO 11796
11789: POP
// hHackFog ; end ;
11790: CALL 24921 0 0
11794: GO 11797
11796: POP
// end ; if p2 = game_save_mode then
11797: LD_VAR 0 2
11801: PUSH
11802: LD_INT 102
11804: EQUAL
11805: IFFALSE 11860
// begin if p3 = 1 then
11807: LD_VAR 0 3
11811: PUSH
11812: LD_INT 1
11814: EQUAL
11815: IFFALSE 11827
// globalGameSaveCounter := p4 ;
11817: LD_ADDR_EXP 44
11821: PUSH
11822: LD_VAR 0 4
11826: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11827: LD_VAR 0 3
11831: PUSH
11832: LD_INT 2
11834: EQUAL
11835: PUSH
11836: LD_EXP 44
11840: AND
11841: IFFALSE 11860
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11843: LD_STRING setGameSaveCounter(
11845: PUSH
11846: LD_EXP 44
11850: STR
11851: PUSH
11852: LD_STRING )
11854: STR
11855: PPUSH
11856: CALL_OW 559
// end ; end ;
11860: LD_VAR 0 7
11864: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11865: LD_INT 0
11867: PPUSH
// streamModeActive := false ;
11868: LD_ADDR_EXP 45
11872: PUSH
11873: LD_INT 0
11875: ST_TO_ADDR
// normalCounter := 36 ;
11876: LD_ADDR_EXP 46
11880: PUSH
11881: LD_INT 36
11883: ST_TO_ADDR
// hardcoreCounter := 18 ;
11884: LD_ADDR_EXP 47
11888: PUSH
11889: LD_INT 18
11891: ST_TO_ADDR
// sRocket := false ;
11892: LD_ADDR_EXP 50
11896: PUSH
11897: LD_INT 0
11899: ST_TO_ADDR
// sSpeed := false ;
11900: LD_ADDR_EXP 49
11904: PUSH
11905: LD_INT 0
11907: ST_TO_ADDR
// sEngine := false ;
11908: LD_ADDR_EXP 51
11912: PUSH
11913: LD_INT 0
11915: ST_TO_ADDR
// sSpec := false ;
11916: LD_ADDR_EXP 48
11920: PUSH
11921: LD_INT 0
11923: ST_TO_ADDR
// sLevel := false ;
11924: LD_ADDR_EXP 52
11928: PUSH
11929: LD_INT 0
11931: ST_TO_ADDR
// sArmoury := false ;
11932: LD_ADDR_EXP 53
11936: PUSH
11937: LD_INT 0
11939: ST_TO_ADDR
// sRadar := false ;
11940: LD_ADDR_EXP 54
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// sBunker := false ;
11948: LD_ADDR_EXP 55
11952: PUSH
11953: LD_INT 0
11955: ST_TO_ADDR
// sHack := false ;
11956: LD_ADDR_EXP 56
11960: PUSH
11961: LD_INT 0
11963: ST_TO_ADDR
// sFire := false ;
11964: LD_ADDR_EXP 57
11968: PUSH
11969: LD_INT 0
11971: ST_TO_ADDR
// sRefresh := false ;
11972: LD_ADDR_EXP 58
11976: PUSH
11977: LD_INT 0
11979: ST_TO_ADDR
// sExp := false ;
11980: LD_ADDR_EXP 59
11984: PUSH
11985: LD_INT 0
11987: ST_TO_ADDR
// sDepot := false ;
11988: LD_ADDR_EXP 60
11992: PUSH
11993: LD_INT 0
11995: ST_TO_ADDR
// sFlag := false ;
11996: LD_ADDR_EXP 61
12000: PUSH
12001: LD_INT 0
12003: ST_TO_ADDR
// sKamikadze := false ;
12004: LD_ADDR_EXP 69
12008: PUSH
12009: LD_INT 0
12011: ST_TO_ADDR
// sTroll := false ;
12012: LD_ADDR_EXP 70
12016: PUSH
12017: LD_INT 0
12019: ST_TO_ADDR
// sSlow := false ;
12020: LD_ADDR_EXP 71
12024: PUSH
12025: LD_INT 0
12027: ST_TO_ADDR
// sLack := false ;
12028: LD_ADDR_EXP 72
12032: PUSH
12033: LD_INT 0
12035: ST_TO_ADDR
// sTank := false ;
12036: LD_ADDR_EXP 74
12040: PUSH
12041: LD_INT 0
12043: ST_TO_ADDR
// sRemote := false ;
12044: LD_ADDR_EXP 75
12048: PUSH
12049: LD_INT 0
12051: ST_TO_ADDR
// sPowell := false ;
12052: LD_ADDR_EXP 76
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// sTeleport := false ;
12060: LD_ADDR_EXP 79
12064: PUSH
12065: LD_INT 0
12067: ST_TO_ADDR
// sOilTower := false ;
12068: LD_ADDR_EXP 81
12072: PUSH
12073: LD_INT 0
12075: ST_TO_ADDR
// sShovel := false ;
12076: LD_ADDR_EXP 82
12080: PUSH
12081: LD_INT 0
12083: ST_TO_ADDR
// sSheik := false ;
12084: LD_ADDR_EXP 83
12088: PUSH
12089: LD_INT 0
12091: ST_TO_ADDR
// sEarthquake := false ;
12092: LD_ADDR_EXP 85
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
// sAI := false ;
12100: LD_ADDR_EXP 86
12104: PUSH
12105: LD_INT 0
12107: ST_TO_ADDR
// sCargo := false ;
12108: LD_ADDR_EXP 89
12112: PUSH
12113: LD_INT 0
12115: ST_TO_ADDR
// sDLaser := false ;
12116: LD_ADDR_EXP 90
12120: PUSH
12121: LD_INT 0
12123: ST_TO_ADDR
// sExchange := false ;
12124: LD_ADDR_EXP 91
12128: PUSH
12129: LD_INT 0
12131: ST_TO_ADDR
// sFac := false ;
12132: LD_ADDR_EXP 92
12136: PUSH
12137: LD_INT 0
12139: ST_TO_ADDR
// sPower := false ;
12140: LD_ADDR_EXP 93
12144: PUSH
12145: LD_INT 0
12147: ST_TO_ADDR
// sRandom := false ;
12148: LD_ADDR_EXP 94
12152: PUSH
12153: LD_INT 0
12155: ST_TO_ADDR
// sShield := false ;
12156: LD_ADDR_EXP 95
12160: PUSH
12161: LD_INT 0
12163: ST_TO_ADDR
// sTime := false ;
12164: LD_ADDR_EXP 96
12168: PUSH
12169: LD_INT 0
12171: ST_TO_ADDR
// sTools := false ;
12172: LD_ADDR_EXP 97
12176: PUSH
12177: LD_INT 0
12179: ST_TO_ADDR
// sSold := false ;
12180: LD_ADDR_EXP 62
12184: PUSH
12185: LD_INT 0
12187: ST_TO_ADDR
// sDiff := false ;
12188: LD_ADDR_EXP 63
12192: PUSH
12193: LD_INT 0
12195: ST_TO_ADDR
// sFog := false ;
12196: LD_ADDR_EXP 66
12200: PUSH
12201: LD_INT 0
12203: ST_TO_ADDR
// sReset := false ;
12204: LD_ADDR_EXP 67
12208: PUSH
12209: LD_INT 0
12211: ST_TO_ADDR
// sSun := false ;
12212: LD_ADDR_EXP 68
12216: PUSH
12217: LD_INT 0
12219: ST_TO_ADDR
// sTiger := false ;
12220: LD_ADDR_EXP 64
12224: PUSH
12225: LD_INT 0
12227: ST_TO_ADDR
// sBomb := false ;
12228: LD_ADDR_EXP 65
12232: PUSH
12233: LD_INT 0
12235: ST_TO_ADDR
// sWound := false ;
12236: LD_ADDR_EXP 73
12240: PUSH
12241: LD_INT 0
12243: ST_TO_ADDR
// sBetray := false ;
12244: LD_ADDR_EXP 77
12248: PUSH
12249: LD_INT 0
12251: ST_TO_ADDR
// sContamin := false ;
12252: LD_ADDR_EXP 78
12256: PUSH
12257: LD_INT 0
12259: ST_TO_ADDR
// sOil := false ;
12260: LD_ADDR_EXP 80
12264: PUSH
12265: LD_INT 0
12267: ST_TO_ADDR
// sStu := false ;
12268: LD_ADDR_EXP 84
12272: PUSH
12273: LD_INT 0
12275: ST_TO_ADDR
// sBazooka := false ;
12276: LD_ADDR_EXP 87
12280: PUSH
12281: LD_INT 0
12283: ST_TO_ADDR
// sMortar := false ;
12284: LD_ADDR_EXP 88
12288: PUSH
12289: LD_INT 0
12291: ST_TO_ADDR
// sRanger := false ;
12292: LD_ADDR_EXP 98
12296: PUSH
12297: LD_INT 0
12299: ST_TO_ADDR
// sComputer := false ;
12300: LD_ADDR_EXP 99
12304: PUSH
12305: LD_INT 0
12307: ST_TO_ADDR
// s30 := false ;
12308: LD_ADDR_EXP 100
12312: PUSH
12313: LD_INT 0
12315: ST_TO_ADDR
// s60 := false ;
12316: LD_ADDR_EXP 101
12320: PUSH
12321: LD_INT 0
12323: ST_TO_ADDR
// end ;
12324: LD_VAR 0 1
12328: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12329: LD_INT 0
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
12337: PPUSH
// result := [ ] ;
12338: LD_ADDR_VAR 0 2
12342: PUSH
12343: EMPTY
12344: ST_TO_ADDR
// if campaign_id = 1 then
12345: LD_OWVAR 69
12349: PUSH
12350: LD_INT 1
12352: EQUAL
12353: IFFALSE 15519
// begin case mission_number of 1 :
12355: LD_OWVAR 70
12359: PUSH
12360: LD_INT 1
12362: DOUBLE
12363: EQUAL
12364: IFTRUE 12368
12366: GO 12444
12368: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: LD_INT 2
12376: PUSH
12377: LD_INT 4
12379: PUSH
12380: LD_INT 11
12382: PUSH
12383: LD_INT 12
12385: PUSH
12386: LD_INT 15
12388: PUSH
12389: LD_INT 16
12391: PUSH
12392: LD_INT 22
12394: PUSH
12395: LD_INT 23
12397: PUSH
12398: LD_INT 26
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 101
12414: PUSH
12415: LD_INT 102
12417: PUSH
12418: LD_INT 106
12420: PUSH
12421: LD_INT 116
12423: PUSH
12424: LD_INT 117
12426: PUSH
12427: LD_INT 118
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: ST_TO_ADDR
12442: GO 15517
12444: LD_INT 2
12446: DOUBLE
12447: EQUAL
12448: IFTRUE 12452
12450: GO 12536
12452: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12453: LD_ADDR_VAR 0 2
12457: PUSH
12458: LD_INT 2
12460: PUSH
12461: LD_INT 4
12463: PUSH
12464: LD_INT 11
12466: PUSH
12467: LD_INT 12
12469: PUSH
12470: LD_INT 15
12472: PUSH
12473: LD_INT 16
12475: PUSH
12476: LD_INT 22
12478: PUSH
12479: LD_INT 23
12481: PUSH
12482: LD_INT 26
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 101
12498: PUSH
12499: LD_INT 102
12501: PUSH
12502: LD_INT 105
12504: PUSH
12505: LD_INT 106
12507: PUSH
12508: LD_INT 108
12510: PUSH
12511: LD_INT 116
12513: PUSH
12514: LD_INT 117
12516: PUSH
12517: LD_INT 118
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: ST_TO_ADDR
12534: GO 15517
12536: LD_INT 3
12538: DOUBLE
12539: EQUAL
12540: IFTRUE 12544
12542: GO 12632
12544: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: LD_INT 4
12555: PUSH
12556: LD_INT 5
12558: PUSH
12559: LD_INT 11
12561: PUSH
12562: LD_INT 12
12564: PUSH
12565: LD_INT 15
12567: PUSH
12568: LD_INT 16
12570: PUSH
12571: LD_INT 22
12573: PUSH
12574: LD_INT 26
12576: PUSH
12577: LD_INT 36
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 101
12594: PUSH
12595: LD_INT 102
12597: PUSH
12598: LD_INT 105
12600: PUSH
12601: LD_INT 106
12603: PUSH
12604: LD_INT 108
12606: PUSH
12607: LD_INT 116
12609: PUSH
12610: LD_INT 117
12612: PUSH
12613: LD_INT 118
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: ST_TO_ADDR
12630: GO 15517
12632: LD_INT 4
12634: DOUBLE
12635: EQUAL
12636: IFTRUE 12640
12638: GO 12736
12640: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12641: LD_ADDR_VAR 0 2
12645: PUSH
12646: LD_INT 2
12648: PUSH
12649: LD_INT 4
12651: PUSH
12652: LD_INT 5
12654: PUSH
12655: LD_INT 8
12657: PUSH
12658: LD_INT 11
12660: PUSH
12661: LD_INT 12
12663: PUSH
12664: LD_INT 15
12666: PUSH
12667: LD_INT 16
12669: PUSH
12670: LD_INT 22
12672: PUSH
12673: LD_INT 23
12675: PUSH
12676: LD_INT 26
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 101
12698: PUSH
12699: LD_INT 102
12701: PUSH
12702: LD_INT 105
12704: PUSH
12705: LD_INT 106
12707: PUSH
12708: LD_INT 108
12710: PUSH
12711: LD_INT 116
12713: PUSH
12714: LD_INT 117
12716: PUSH
12717: LD_INT 118
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: ST_TO_ADDR
12734: GO 15517
12736: LD_INT 5
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12856
12744: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12745: LD_ADDR_VAR 0 2
12749: PUSH
12750: LD_INT 2
12752: PUSH
12753: LD_INT 4
12755: PUSH
12756: LD_INT 5
12758: PUSH
12759: LD_INT 6
12761: PUSH
12762: LD_INT 8
12764: PUSH
12765: LD_INT 11
12767: PUSH
12768: LD_INT 12
12770: PUSH
12771: LD_INT 15
12773: PUSH
12774: LD_INT 16
12776: PUSH
12777: LD_INT 22
12779: PUSH
12780: LD_INT 23
12782: PUSH
12783: LD_INT 25
12785: PUSH
12786: LD_INT 26
12788: PUSH
12789: LD_INT 36
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 101
12810: PUSH
12811: LD_INT 102
12813: PUSH
12814: LD_INT 105
12816: PUSH
12817: LD_INT 106
12819: PUSH
12820: LD_INT 108
12822: PUSH
12823: LD_INT 109
12825: PUSH
12826: LD_INT 112
12828: PUSH
12829: LD_INT 116
12831: PUSH
12832: LD_INT 117
12834: PUSH
12835: LD_INT 118
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: ST_TO_ADDR
12854: GO 15517
12856: LD_INT 6
12858: DOUBLE
12859: EQUAL
12860: IFTRUE 12864
12862: GO 12996
12864: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12865: LD_ADDR_VAR 0 2
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: LD_INT 4
12875: PUSH
12876: LD_INT 5
12878: PUSH
12879: LD_INT 6
12881: PUSH
12882: LD_INT 8
12884: PUSH
12885: LD_INT 11
12887: PUSH
12888: LD_INT 12
12890: PUSH
12891: LD_INT 15
12893: PUSH
12894: LD_INT 16
12896: PUSH
12897: LD_INT 20
12899: PUSH
12900: LD_INT 21
12902: PUSH
12903: LD_INT 22
12905: PUSH
12906: LD_INT 23
12908: PUSH
12909: LD_INT 25
12911: PUSH
12912: LD_INT 26
12914: PUSH
12915: LD_INT 30
12917: PUSH
12918: LD_INT 31
12920: PUSH
12921: LD_INT 32
12923: PUSH
12924: LD_INT 36
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 101
12950: PUSH
12951: LD_INT 102
12953: PUSH
12954: LD_INT 105
12956: PUSH
12957: LD_INT 106
12959: PUSH
12960: LD_INT 108
12962: PUSH
12963: LD_INT 109
12965: PUSH
12966: LD_INT 112
12968: PUSH
12969: LD_INT 116
12971: PUSH
12972: LD_INT 117
12974: PUSH
12975: LD_INT 118
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: ST_TO_ADDR
12994: GO 15517
12996: LD_INT 7
12998: DOUBLE
12999: EQUAL
13000: IFTRUE 13004
13002: GO 13116
13004: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13005: LD_ADDR_VAR 0 2
13009: PUSH
13010: LD_INT 2
13012: PUSH
13013: LD_INT 4
13015: PUSH
13016: LD_INT 5
13018: PUSH
13019: LD_INT 7
13021: PUSH
13022: LD_INT 11
13024: PUSH
13025: LD_INT 12
13027: PUSH
13028: LD_INT 15
13030: PUSH
13031: LD_INT 16
13033: PUSH
13034: LD_INT 20
13036: PUSH
13037: LD_INT 21
13039: PUSH
13040: LD_INT 22
13042: PUSH
13043: LD_INT 23
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 26
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 101
13070: PUSH
13071: LD_INT 102
13073: PUSH
13074: LD_INT 103
13076: PUSH
13077: LD_INT 105
13079: PUSH
13080: LD_INT 106
13082: PUSH
13083: LD_INT 108
13085: PUSH
13086: LD_INT 112
13088: PUSH
13089: LD_INT 116
13091: PUSH
13092: LD_INT 117
13094: PUSH
13095: LD_INT 118
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: ST_TO_ADDR
13114: GO 15517
13116: LD_INT 8
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 13264
13124: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 4
13135: PUSH
13136: LD_INT 5
13138: PUSH
13139: LD_INT 6
13141: PUSH
13142: LD_INT 7
13144: PUSH
13145: LD_INT 8
13147: PUSH
13148: LD_INT 11
13150: PUSH
13151: LD_INT 12
13153: PUSH
13154: LD_INT 15
13156: PUSH
13157: LD_INT 16
13159: PUSH
13160: LD_INT 20
13162: PUSH
13163: LD_INT 21
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: LD_INT 25
13174: PUSH
13175: LD_INT 26
13177: PUSH
13178: LD_INT 30
13180: PUSH
13181: LD_INT 31
13183: PUSH
13184: LD_INT 32
13186: PUSH
13187: LD_INT 36
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 101
13214: PUSH
13215: LD_INT 102
13217: PUSH
13218: LD_INT 103
13220: PUSH
13221: LD_INT 105
13223: PUSH
13224: LD_INT 106
13226: PUSH
13227: LD_INT 108
13229: PUSH
13230: LD_INT 109
13232: PUSH
13233: LD_INT 112
13235: PUSH
13236: LD_INT 116
13238: PUSH
13239: LD_INT 117
13241: PUSH
13242: LD_INT 118
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: ST_TO_ADDR
13262: GO 15517
13264: LD_INT 9
13266: DOUBLE
13267: EQUAL
13268: IFTRUE 13272
13270: GO 13420
13272: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13273: LD_ADDR_VAR 0 2
13277: PUSH
13278: LD_INT 2
13280: PUSH
13281: LD_INT 4
13283: PUSH
13284: LD_INT 5
13286: PUSH
13287: LD_INT 6
13289: PUSH
13290: LD_INT 7
13292: PUSH
13293: LD_INT 8
13295: PUSH
13296: LD_INT 11
13298: PUSH
13299: LD_INT 12
13301: PUSH
13302: LD_INT 15
13304: PUSH
13305: LD_INT 16
13307: PUSH
13308: LD_INT 20
13310: PUSH
13311: LD_INT 21
13313: PUSH
13314: LD_INT 22
13316: PUSH
13317: LD_INT 23
13319: PUSH
13320: LD_INT 25
13322: PUSH
13323: LD_INT 26
13325: PUSH
13326: LD_INT 28
13328: PUSH
13329: LD_INT 30
13331: PUSH
13332: LD_INT 31
13334: PUSH
13335: LD_INT 32
13337: PUSH
13338: LD_INT 36
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 101
13366: PUSH
13367: LD_INT 102
13369: PUSH
13370: LD_INT 103
13372: PUSH
13373: LD_INT 105
13375: PUSH
13376: LD_INT 106
13378: PUSH
13379: LD_INT 108
13381: PUSH
13382: LD_INT 109
13384: PUSH
13385: LD_INT 112
13387: PUSH
13388: LD_INT 114
13390: PUSH
13391: LD_INT 116
13393: PUSH
13394: LD_INT 117
13396: PUSH
13397: LD_INT 118
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: ST_TO_ADDR
13418: GO 15517
13420: LD_INT 10
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13624
13428: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13429: LD_ADDR_VAR 0 2
13433: PUSH
13434: LD_INT 2
13436: PUSH
13437: LD_INT 4
13439: PUSH
13440: LD_INT 5
13442: PUSH
13443: LD_INT 6
13445: PUSH
13446: LD_INT 7
13448: PUSH
13449: LD_INT 8
13451: PUSH
13452: LD_INT 9
13454: PUSH
13455: LD_INT 10
13457: PUSH
13458: LD_INT 11
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: LD_INT 13
13466: PUSH
13467: LD_INT 14
13469: PUSH
13470: LD_INT 15
13472: PUSH
13473: LD_INT 16
13475: PUSH
13476: LD_INT 17
13478: PUSH
13479: LD_INT 18
13481: PUSH
13482: LD_INT 19
13484: PUSH
13485: LD_INT 20
13487: PUSH
13488: LD_INT 21
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_INT 23
13496: PUSH
13497: LD_INT 24
13499: PUSH
13500: LD_INT 25
13502: PUSH
13503: LD_INT 26
13505: PUSH
13506: LD_INT 28
13508: PUSH
13509: LD_INT 30
13511: PUSH
13512: LD_INT 31
13514: PUSH
13515: LD_INT 32
13517: PUSH
13518: LD_INT 36
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 101
13554: PUSH
13555: LD_INT 102
13557: PUSH
13558: LD_INT 103
13560: PUSH
13561: LD_INT 104
13563: PUSH
13564: LD_INT 105
13566: PUSH
13567: LD_INT 106
13569: PUSH
13570: LD_INT 107
13572: PUSH
13573: LD_INT 108
13575: PUSH
13576: LD_INT 109
13578: PUSH
13579: LD_INT 110
13581: PUSH
13582: LD_INT 111
13584: PUSH
13585: LD_INT 112
13587: PUSH
13588: LD_INT 114
13590: PUSH
13591: LD_INT 116
13593: PUSH
13594: LD_INT 117
13596: PUSH
13597: LD_INT 118
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: ST_TO_ADDR
13622: GO 15517
13624: LD_INT 11
13626: DOUBLE
13627: EQUAL
13628: IFTRUE 13632
13630: GO 13836
13632: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13633: LD_ADDR_VAR 0 2
13637: PUSH
13638: LD_INT 2
13640: PUSH
13641: LD_INT 3
13643: PUSH
13644: LD_INT 4
13646: PUSH
13647: LD_INT 5
13649: PUSH
13650: LD_INT 6
13652: PUSH
13653: LD_INT 7
13655: PUSH
13656: LD_INT 8
13658: PUSH
13659: LD_INT 9
13661: PUSH
13662: LD_INT 10
13664: PUSH
13665: LD_INT 11
13667: PUSH
13668: LD_INT 12
13670: PUSH
13671: LD_INT 13
13673: PUSH
13674: LD_INT 14
13676: PUSH
13677: LD_INT 15
13679: PUSH
13680: LD_INT 16
13682: PUSH
13683: LD_INT 17
13685: PUSH
13686: LD_INT 18
13688: PUSH
13689: LD_INT 19
13691: PUSH
13692: LD_INT 20
13694: PUSH
13695: LD_INT 21
13697: PUSH
13698: LD_INT 22
13700: PUSH
13701: LD_INT 23
13703: PUSH
13704: LD_INT 24
13706: PUSH
13707: LD_INT 25
13709: PUSH
13710: LD_INT 26
13712: PUSH
13713: LD_INT 28
13715: PUSH
13716: LD_INT 30
13718: PUSH
13719: LD_INT 31
13721: PUSH
13722: LD_INT 32
13724: PUSH
13725: LD_INT 34
13727: PUSH
13728: LD_INT 36
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 101
13766: PUSH
13767: LD_INT 102
13769: PUSH
13770: LD_INT 103
13772: PUSH
13773: LD_INT 104
13775: PUSH
13776: LD_INT 105
13778: PUSH
13779: LD_INT 106
13781: PUSH
13782: LD_INT 107
13784: PUSH
13785: LD_INT 108
13787: PUSH
13788: LD_INT 109
13790: PUSH
13791: LD_INT 110
13793: PUSH
13794: LD_INT 111
13796: PUSH
13797: LD_INT 112
13799: PUSH
13800: LD_INT 114
13802: PUSH
13803: LD_INT 116
13805: PUSH
13806: LD_INT 117
13808: PUSH
13809: LD_INT 118
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: ST_TO_ADDR
13834: GO 15517
13836: LD_INT 12
13838: DOUBLE
13839: EQUAL
13840: IFTRUE 13844
13842: GO 14064
13844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13845: LD_ADDR_VAR 0 2
13849: PUSH
13850: LD_INT 1
13852: PUSH
13853: LD_INT 2
13855: PUSH
13856: LD_INT 3
13858: PUSH
13859: LD_INT 4
13861: PUSH
13862: LD_INT 5
13864: PUSH
13865: LD_INT 6
13867: PUSH
13868: LD_INT 7
13870: PUSH
13871: LD_INT 8
13873: PUSH
13874: LD_INT 9
13876: PUSH
13877: LD_INT 10
13879: PUSH
13880: LD_INT 11
13882: PUSH
13883: LD_INT 12
13885: PUSH
13886: LD_INT 13
13888: PUSH
13889: LD_INT 14
13891: PUSH
13892: LD_INT 15
13894: PUSH
13895: LD_INT 16
13897: PUSH
13898: LD_INT 17
13900: PUSH
13901: LD_INT 18
13903: PUSH
13904: LD_INT 19
13906: PUSH
13907: LD_INT 20
13909: PUSH
13910: LD_INT 21
13912: PUSH
13913: LD_INT 22
13915: PUSH
13916: LD_INT 23
13918: PUSH
13919: LD_INT 24
13921: PUSH
13922: LD_INT 25
13924: PUSH
13925: LD_INT 26
13927: PUSH
13928: LD_INT 27
13930: PUSH
13931: LD_INT 28
13933: PUSH
13934: LD_INT 30
13936: PUSH
13937: LD_INT 31
13939: PUSH
13940: LD_INT 32
13942: PUSH
13943: LD_INT 33
13945: PUSH
13946: LD_INT 34
13948: PUSH
13949: LD_INT 36
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 101
13990: PUSH
13991: LD_INT 102
13993: PUSH
13994: LD_INT 103
13996: PUSH
13997: LD_INT 104
13999: PUSH
14000: LD_INT 105
14002: PUSH
14003: LD_INT 106
14005: PUSH
14006: LD_INT 107
14008: PUSH
14009: LD_INT 108
14011: PUSH
14012: LD_INT 109
14014: PUSH
14015: LD_INT 110
14017: PUSH
14018: LD_INT 111
14020: PUSH
14021: LD_INT 112
14023: PUSH
14024: LD_INT 113
14026: PUSH
14027: LD_INT 114
14029: PUSH
14030: LD_INT 116
14032: PUSH
14033: LD_INT 117
14035: PUSH
14036: LD_INT 118
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: ST_TO_ADDR
14062: GO 15517
14064: LD_INT 13
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14280
14072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: LD_INT 2
14083: PUSH
14084: LD_INT 3
14086: PUSH
14087: LD_INT 4
14089: PUSH
14090: LD_INT 5
14092: PUSH
14093: LD_INT 8
14095: PUSH
14096: LD_INT 9
14098: PUSH
14099: LD_INT 10
14101: PUSH
14102: LD_INT 11
14104: PUSH
14105: LD_INT 12
14107: PUSH
14108: LD_INT 14
14110: PUSH
14111: LD_INT 15
14113: PUSH
14114: LD_INT 16
14116: PUSH
14117: LD_INT 17
14119: PUSH
14120: LD_INT 18
14122: PUSH
14123: LD_INT 19
14125: PUSH
14126: LD_INT 20
14128: PUSH
14129: LD_INT 21
14131: PUSH
14132: LD_INT 22
14134: PUSH
14135: LD_INT 23
14137: PUSH
14138: LD_INT 24
14140: PUSH
14141: LD_INT 25
14143: PUSH
14144: LD_INT 26
14146: PUSH
14147: LD_INT 27
14149: PUSH
14150: LD_INT 28
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: LD_INT 32
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 34
14167: PUSH
14168: LD_INT 36
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 101
14206: PUSH
14207: LD_INT 102
14209: PUSH
14210: LD_INT 103
14212: PUSH
14213: LD_INT 104
14215: PUSH
14216: LD_INT 105
14218: PUSH
14219: LD_INT 106
14221: PUSH
14222: LD_INT 107
14224: PUSH
14225: LD_INT 108
14227: PUSH
14228: LD_INT 109
14230: PUSH
14231: LD_INT 110
14233: PUSH
14234: LD_INT 111
14236: PUSH
14237: LD_INT 112
14239: PUSH
14240: LD_INT 113
14242: PUSH
14243: LD_INT 114
14245: PUSH
14246: LD_INT 116
14248: PUSH
14249: LD_INT 117
14251: PUSH
14252: LD_INT 118
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: ST_TO_ADDR
14278: GO 15517
14280: LD_INT 14
14282: DOUBLE
14283: EQUAL
14284: IFTRUE 14288
14286: GO 14512
14288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14289: LD_ADDR_VAR 0 2
14293: PUSH
14294: LD_INT 1
14296: PUSH
14297: LD_INT 2
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: LD_INT 4
14305: PUSH
14306: LD_INT 5
14308: PUSH
14309: LD_INT 6
14311: PUSH
14312: LD_INT 7
14314: PUSH
14315: LD_INT 8
14317: PUSH
14318: LD_INT 9
14320: PUSH
14321: LD_INT 10
14323: PUSH
14324: LD_INT 11
14326: PUSH
14327: LD_INT 12
14329: PUSH
14330: LD_INT 13
14332: PUSH
14333: LD_INT 14
14335: PUSH
14336: LD_INT 15
14338: PUSH
14339: LD_INT 16
14341: PUSH
14342: LD_INT 17
14344: PUSH
14345: LD_INT 18
14347: PUSH
14348: LD_INT 19
14350: PUSH
14351: LD_INT 20
14353: PUSH
14354: LD_INT 21
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_INT 23
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: LD_INT 25
14368: PUSH
14369: LD_INT 26
14371: PUSH
14372: LD_INT 27
14374: PUSH
14375: LD_INT 28
14377: PUSH
14378: LD_INT 29
14380: PUSH
14381: LD_INT 30
14383: PUSH
14384: LD_INT 31
14386: PUSH
14387: LD_INT 32
14389: PUSH
14390: LD_INT 33
14392: PUSH
14393: LD_INT 34
14395: PUSH
14396: LD_INT 36
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 101
14438: PUSH
14439: LD_INT 102
14441: PUSH
14442: LD_INT 103
14444: PUSH
14445: LD_INT 104
14447: PUSH
14448: LD_INT 105
14450: PUSH
14451: LD_INT 106
14453: PUSH
14454: LD_INT 107
14456: PUSH
14457: LD_INT 108
14459: PUSH
14460: LD_INT 109
14462: PUSH
14463: LD_INT 110
14465: PUSH
14466: LD_INT 111
14468: PUSH
14469: LD_INT 112
14471: PUSH
14472: LD_INT 113
14474: PUSH
14475: LD_INT 114
14477: PUSH
14478: LD_INT 116
14480: PUSH
14481: LD_INT 117
14483: PUSH
14484: LD_INT 118
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: ST_TO_ADDR
14510: GO 15517
14512: LD_INT 15
14514: DOUBLE
14515: EQUAL
14516: IFTRUE 14520
14518: GO 14744
14520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14521: LD_ADDR_VAR 0 2
14525: PUSH
14526: LD_INT 1
14528: PUSH
14529: LD_INT 2
14531: PUSH
14532: LD_INT 3
14534: PUSH
14535: LD_INT 4
14537: PUSH
14538: LD_INT 5
14540: PUSH
14541: LD_INT 6
14543: PUSH
14544: LD_INT 7
14546: PUSH
14547: LD_INT 8
14549: PUSH
14550: LD_INT 9
14552: PUSH
14553: LD_INT 10
14555: PUSH
14556: LD_INT 11
14558: PUSH
14559: LD_INT 12
14561: PUSH
14562: LD_INT 13
14564: PUSH
14565: LD_INT 14
14567: PUSH
14568: LD_INT 15
14570: PUSH
14571: LD_INT 16
14573: PUSH
14574: LD_INT 17
14576: PUSH
14577: LD_INT 18
14579: PUSH
14580: LD_INT 19
14582: PUSH
14583: LD_INT 20
14585: PUSH
14586: LD_INT 21
14588: PUSH
14589: LD_INT 22
14591: PUSH
14592: LD_INT 23
14594: PUSH
14595: LD_INT 24
14597: PUSH
14598: LD_INT 25
14600: PUSH
14601: LD_INT 26
14603: PUSH
14604: LD_INT 27
14606: PUSH
14607: LD_INT 28
14609: PUSH
14610: LD_INT 29
14612: PUSH
14613: LD_INT 30
14615: PUSH
14616: LD_INT 31
14618: PUSH
14619: LD_INT 32
14621: PUSH
14622: LD_INT 33
14624: PUSH
14625: LD_INT 34
14627: PUSH
14628: LD_INT 36
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 101
14670: PUSH
14671: LD_INT 102
14673: PUSH
14674: LD_INT 103
14676: PUSH
14677: LD_INT 104
14679: PUSH
14680: LD_INT 105
14682: PUSH
14683: LD_INT 106
14685: PUSH
14686: LD_INT 107
14688: PUSH
14689: LD_INT 108
14691: PUSH
14692: LD_INT 109
14694: PUSH
14695: LD_INT 110
14697: PUSH
14698: LD_INT 111
14700: PUSH
14701: LD_INT 112
14703: PUSH
14704: LD_INT 113
14706: PUSH
14707: LD_INT 114
14709: PUSH
14710: LD_INT 116
14712: PUSH
14713: LD_INT 117
14715: PUSH
14716: LD_INT 118
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: ST_TO_ADDR
14742: GO 15517
14744: LD_INT 16
14746: DOUBLE
14747: EQUAL
14748: IFTRUE 14752
14750: GO 14888
14752: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14753: LD_ADDR_VAR 0 2
14757: PUSH
14758: LD_INT 2
14760: PUSH
14761: LD_INT 4
14763: PUSH
14764: LD_INT 5
14766: PUSH
14767: LD_INT 7
14769: PUSH
14770: LD_INT 11
14772: PUSH
14773: LD_INT 12
14775: PUSH
14776: LD_INT 15
14778: PUSH
14779: LD_INT 16
14781: PUSH
14782: LD_INT 20
14784: PUSH
14785: LD_INT 21
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_INT 23
14793: PUSH
14794: LD_INT 25
14796: PUSH
14797: LD_INT 26
14799: PUSH
14800: LD_INT 30
14802: PUSH
14803: LD_INT 31
14805: PUSH
14806: LD_INT 32
14808: PUSH
14809: LD_INT 33
14811: PUSH
14812: LD_INT 34
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 101
14838: PUSH
14839: LD_INT 102
14841: PUSH
14842: LD_INT 103
14844: PUSH
14845: LD_INT 106
14847: PUSH
14848: LD_INT 108
14850: PUSH
14851: LD_INT 112
14853: PUSH
14854: LD_INT 113
14856: PUSH
14857: LD_INT 114
14859: PUSH
14860: LD_INT 116
14862: PUSH
14863: LD_INT 117
14865: PUSH
14866: LD_INT 118
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: ST_TO_ADDR
14886: GO 15517
14888: LD_INT 17
14890: DOUBLE
14891: EQUAL
14892: IFTRUE 14896
14894: GO 15120
14896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14897: LD_ADDR_VAR 0 2
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: LD_INT 2
14907: PUSH
14908: LD_INT 3
14910: PUSH
14911: LD_INT 4
14913: PUSH
14914: LD_INT 5
14916: PUSH
14917: LD_INT 6
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: LD_INT 8
14925: PUSH
14926: LD_INT 9
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_INT 11
14934: PUSH
14935: LD_INT 12
14937: PUSH
14938: LD_INT 13
14940: PUSH
14941: LD_INT 14
14943: PUSH
14944: LD_INT 15
14946: PUSH
14947: LD_INT 16
14949: PUSH
14950: LD_INT 17
14952: PUSH
14953: LD_INT 18
14955: PUSH
14956: LD_INT 19
14958: PUSH
14959: LD_INT 20
14961: PUSH
14962: LD_INT 21
14964: PUSH
14965: LD_INT 22
14967: PUSH
14968: LD_INT 23
14970: PUSH
14971: LD_INT 24
14973: PUSH
14974: LD_INT 25
14976: PUSH
14977: LD_INT 26
14979: PUSH
14980: LD_INT 27
14982: PUSH
14983: LD_INT 28
14985: PUSH
14986: LD_INT 29
14988: PUSH
14989: LD_INT 30
14991: PUSH
14992: LD_INT 31
14994: PUSH
14995: LD_INT 32
14997: PUSH
14998: LD_INT 33
15000: PUSH
15001: LD_INT 34
15003: PUSH
15004: LD_INT 36
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 101
15046: PUSH
15047: LD_INT 102
15049: PUSH
15050: LD_INT 103
15052: PUSH
15053: LD_INT 104
15055: PUSH
15056: LD_INT 105
15058: PUSH
15059: LD_INT 106
15061: PUSH
15062: LD_INT 107
15064: PUSH
15065: LD_INT 108
15067: PUSH
15068: LD_INT 109
15070: PUSH
15071: LD_INT 110
15073: PUSH
15074: LD_INT 111
15076: PUSH
15077: LD_INT 112
15079: PUSH
15080: LD_INT 113
15082: PUSH
15083: LD_INT 114
15085: PUSH
15086: LD_INT 116
15088: PUSH
15089: LD_INT 117
15091: PUSH
15092: LD_INT 118
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: ST_TO_ADDR
15118: GO 15517
15120: LD_INT 18
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15276
15128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15129: LD_ADDR_VAR 0 2
15133: PUSH
15134: LD_INT 2
15136: PUSH
15137: LD_INT 4
15139: PUSH
15140: LD_INT 5
15142: PUSH
15143: LD_INT 7
15145: PUSH
15146: LD_INT 11
15148: PUSH
15149: LD_INT 12
15151: PUSH
15152: LD_INT 15
15154: PUSH
15155: LD_INT 16
15157: PUSH
15158: LD_INT 20
15160: PUSH
15161: LD_INT 21
15163: PUSH
15164: LD_INT 22
15166: PUSH
15167: LD_INT 23
15169: PUSH
15170: LD_INT 25
15172: PUSH
15173: LD_INT 26
15175: PUSH
15176: LD_INT 30
15178: PUSH
15179: LD_INT 31
15181: PUSH
15182: LD_INT 32
15184: PUSH
15185: LD_INT 33
15187: PUSH
15188: LD_INT 34
15190: PUSH
15191: LD_INT 35
15193: PUSH
15194: LD_INT 36
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 101
15222: PUSH
15223: LD_INT 102
15225: PUSH
15226: LD_INT 103
15228: PUSH
15229: LD_INT 106
15231: PUSH
15232: LD_INT 108
15234: PUSH
15235: LD_INT 112
15237: PUSH
15238: LD_INT 113
15240: PUSH
15241: LD_INT 114
15243: PUSH
15244: LD_INT 115
15246: PUSH
15247: LD_INT 116
15249: PUSH
15250: LD_INT 117
15252: PUSH
15253: LD_INT 118
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: ST_TO_ADDR
15274: GO 15517
15276: LD_INT 19
15278: DOUBLE
15279: EQUAL
15280: IFTRUE 15284
15282: GO 15516
15284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15285: LD_ADDR_VAR 0 2
15289: PUSH
15290: LD_INT 1
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: LD_INT 3
15298: PUSH
15299: LD_INT 4
15301: PUSH
15302: LD_INT 5
15304: PUSH
15305: LD_INT 6
15307: PUSH
15308: LD_INT 7
15310: PUSH
15311: LD_INT 8
15313: PUSH
15314: LD_INT 9
15316: PUSH
15317: LD_INT 10
15319: PUSH
15320: LD_INT 11
15322: PUSH
15323: LD_INT 12
15325: PUSH
15326: LD_INT 13
15328: PUSH
15329: LD_INT 14
15331: PUSH
15332: LD_INT 15
15334: PUSH
15335: LD_INT 16
15337: PUSH
15338: LD_INT 17
15340: PUSH
15341: LD_INT 18
15343: PUSH
15344: LD_INT 19
15346: PUSH
15347: LD_INT 20
15349: PUSH
15350: LD_INT 21
15352: PUSH
15353: LD_INT 22
15355: PUSH
15356: LD_INT 23
15358: PUSH
15359: LD_INT 24
15361: PUSH
15362: LD_INT 25
15364: PUSH
15365: LD_INT 26
15367: PUSH
15368: LD_INT 27
15370: PUSH
15371: LD_INT 28
15373: PUSH
15374: LD_INT 29
15376: PUSH
15377: LD_INT 30
15379: PUSH
15380: LD_INT 31
15382: PUSH
15383: LD_INT 32
15385: PUSH
15386: LD_INT 33
15388: PUSH
15389: LD_INT 34
15391: PUSH
15392: LD_INT 35
15394: PUSH
15395: LD_INT 36
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 101
15438: PUSH
15439: LD_INT 102
15441: PUSH
15442: LD_INT 103
15444: PUSH
15445: LD_INT 104
15447: PUSH
15448: LD_INT 105
15450: PUSH
15451: LD_INT 106
15453: PUSH
15454: LD_INT 107
15456: PUSH
15457: LD_INT 108
15459: PUSH
15460: LD_INT 109
15462: PUSH
15463: LD_INT 110
15465: PUSH
15466: LD_INT 111
15468: PUSH
15469: LD_INT 112
15471: PUSH
15472: LD_INT 113
15474: PUSH
15475: LD_INT 114
15477: PUSH
15478: LD_INT 115
15480: PUSH
15481: LD_INT 116
15483: PUSH
15484: LD_INT 117
15486: PUSH
15487: LD_INT 118
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: ST_TO_ADDR
15514: GO 15517
15516: POP
// end else
15517: GO 15748
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15519: LD_ADDR_VAR 0 2
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: LD_INT 2
15529: PUSH
15530: LD_INT 3
15532: PUSH
15533: LD_INT 4
15535: PUSH
15536: LD_INT 5
15538: PUSH
15539: LD_INT 6
15541: PUSH
15542: LD_INT 7
15544: PUSH
15545: LD_INT 8
15547: PUSH
15548: LD_INT 9
15550: PUSH
15551: LD_INT 10
15553: PUSH
15554: LD_INT 11
15556: PUSH
15557: LD_INT 12
15559: PUSH
15560: LD_INT 13
15562: PUSH
15563: LD_INT 14
15565: PUSH
15566: LD_INT 15
15568: PUSH
15569: LD_INT 16
15571: PUSH
15572: LD_INT 17
15574: PUSH
15575: LD_INT 18
15577: PUSH
15578: LD_INT 19
15580: PUSH
15581: LD_INT 20
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 22
15589: PUSH
15590: LD_INT 23
15592: PUSH
15593: LD_INT 24
15595: PUSH
15596: LD_INT 25
15598: PUSH
15599: LD_INT 26
15601: PUSH
15602: LD_INT 27
15604: PUSH
15605: LD_INT 28
15607: PUSH
15608: LD_INT 29
15610: PUSH
15611: LD_INT 30
15613: PUSH
15614: LD_INT 31
15616: PUSH
15617: LD_INT 32
15619: PUSH
15620: LD_INT 33
15622: PUSH
15623: LD_INT 34
15625: PUSH
15626: LD_INT 35
15628: PUSH
15629: LD_INT 36
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 101
15672: PUSH
15673: LD_INT 102
15675: PUSH
15676: LD_INT 103
15678: PUSH
15679: LD_INT 104
15681: PUSH
15682: LD_INT 105
15684: PUSH
15685: LD_INT 106
15687: PUSH
15688: LD_INT 107
15690: PUSH
15691: LD_INT 108
15693: PUSH
15694: LD_INT 109
15696: PUSH
15697: LD_INT 110
15699: PUSH
15700: LD_INT 111
15702: PUSH
15703: LD_INT 112
15705: PUSH
15706: LD_INT 113
15708: PUSH
15709: LD_INT 114
15711: PUSH
15712: LD_INT 115
15714: PUSH
15715: LD_INT 116
15717: PUSH
15718: LD_INT 117
15720: PUSH
15721: LD_INT 118
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: ST_TO_ADDR
// if result then
15748: LD_VAR 0 2
15752: IFFALSE 16538
// begin normal :=  ;
15754: LD_ADDR_VAR 0 5
15758: PUSH
15759: LD_STRING 
15761: ST_TO_ADDR
// hardcore :=  ;
15762: LD_ADDR_VAR 0 6
15766: PUSH
15767: LD_STRING 
15769: ST_TO_ADDR
// active :=  ;
15770: LD_ADDR_VAR 0 7
15774: PUSH
15775: LD_STRING 
15777: ST_TO_ADDR
// for i = 1 to normalCounter do
15778: LD_ADDR_VAR 0 8
15782: PUSH
15783: DOUBLE
15784: LD_INT 1
15786: DEC
15787: ST_TO_ADDR
15788: LD_EXP 46
15792: PUSH
15793: FOR_TO
15794: IFFALSE 15895
// begin tmp := 0 ;
15796: LD_ADDR_VAR 0 3
15800: PUSH
15801: LD_STRING 0
15803: ST_TO_ADDR
// if result [ 1 ] then
15804: LD_VAR 0 2
15808: PUSH
15809: LD_INT 1
15811: ARRAY
15812: IFFALSE 15877
// if result [ 1 ] [ 1 ] = i then
15814: LD_VAR 0 2
15818: PUSH
15819: LD_INT 1
15821: ARRAY
15822: PUSH
15823: LD_INT 1
15825: ARRAY
15826: PUSH
15827: LD_VAR 0 8
15831: EQUAL
15832: IFFALSE 15877
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15834: LD_ADDR_VAR 0 2
15838: PUSH
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_INT 1
15846: PPUSH
15847: LD_VAR 0 2
15851: PUSH
15852: LD_INT 1
15854: ARRAY
15855: PPUSH
15856: LD_INT 1
15858: PPUSH
15859: CALL_OW 3
15863: PPUSH
15864: CALL_OW 1
15868: ST_TO_ADDR
// tmp := 1 ;
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: LD_STRING 1
15876: ST_TO_ADDR
// end ; normal := normal & tmp ;
15877: LD_ADDR_VAR 0 5
15881: PUSH
15882: LD_VAR 0 5
15886: PUSH
15887: LD_VAR 0 3
15891: STR
15892: ST_TO_ADDR
// end ;
15893: GO 15793
15895: POP
15896: POP
// for i = 1 to hardcoreCounter do
15897: LD_ADDR_VAR 0 8
15901: PUSH
15902: DOUBLE
15903: LD_INT 1
15905: DEC
15906: ST_TO_ADDR
15907: LD_EXP 47
15911: PUSH
15912: FOR_TO
15913: IFFALSE 16018
// begin tmp := 0 ;
15915: LD_ADDR_VAR 0 3
15919: PUSH
15920: LD_STRING 0
15922: ST_TO_ADDR
// if result [ 2 ] then
15923: LD_VAR 0 2
15927: PUSH
15928: LD_INT 2
15930: ARRAY
15931: IFFALSE 16000
// if result [ 2 ] [ 1 ] = 100 + i then
15933: LD_VAR 0 2
15937: PUSH
15938: LD_INT 2
15940: ARRAY
15941: PUSH
15942: LD_INT 1
15944: ARRAY
15945: PUSH
15946: LD_INT 100
15948: PUSH
15949: LD_VAR 0 8
15953: PLUS
15954: EQUAL
15955: IFFALSE 16000
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15957: LD_ADDR_VAR 0 2
15961: PUSH
15962: LD_VAR 0 2
15966: PPUSH
15967: LD_INT 2
15969: PPUSH
15970: LD_VAR 0 2
15974: PUSH
15975: LD_INT 2
15977: ARRAY
15978: PPUSH
15979: LD_INT 1
15981: PPUSH
15982: CALL_OW 3
15986: PPUSH
15987: CALL_OW 1
15991: ST_TO_ADDR
// tmp := 1 ;
15992: LD_ADDR_VAR 0 3
15996: PUSH
15997: LD_STRING 1
15999: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16000: LD_ADDR_VAR 0 6
16004: PUSH
16005: LD_VAR 0 6
16009: PUSH
16010: LD_VAR 0 3
16014: STR
16015: ST_TO_ADDR
// end ;
16016: GO 15912
16018: POP
16019: POP
// if isGameLoad then
16020: LD_VAR 0 1
16024: IFFALSE 16499
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16026: LD_ADDR_VAR 0 4
16030: PUSH
16031: LD_EXP 50
16035: PUSH
16036: LD_EXP 49
16040: PUSH
16041: LD_EXP 51
16045: PUSH
16046: LD_EXP 48
16050: PUSH
16051: LD_EXP 52
16055: PUSH
16056: LD_EXP 53
16060: PUSH
16061: LD_EXP 54
16065: PUSH
16066: LD_EXP 55
16070: PUSH
16071: LD_EXP 56
16075: PUSH
16076: LD_EXP 57
16080: PUSH
16081: LD_EXP 58
16085: PUSH
16086: LD_EXP 59
16090: PUSH
16091: LD_EXP 60
16095: PUSH
16096: LD_EXP 61
16100: PUSH
16101: LD_EXP 69
16105: PUSH
16106: LD_EXP 70
16110: PUSH
16111: LD_EXP 71
16115: PUSH
16116: LD_EXP 72
16120: PUSH
16121: LD_EXP 74
16125: PUSH
16126: LD_EXP 75
16130: PUSH
16131: LD_EXP 76
16135: PUSH
16136: LD_EXP 79
16140: PUSH
16141: LD_EXP 81
16145: PUSH
16146: LD_EXP 82
16150: PUSH
16151: LD_EXP 83
16155: PUSH
16156: LD_EXP 85
16160: PUSH
16161: LD_EXP 86
16165: PUSH
16166: LD_EXP 89
16170: PUSH
16171: LD_EXP 90
16175: PUSH
16176: LD_EXP 91
16180: PUSH
16181: LD_EXP 92
16185: PUSH
16186: LD_EXP 93
16190: PUSH
16191: LD_EXP 94
16195: PUSH
16196: LD_EXP 95
16200: PUSH
16201: LD_EXP 96
16205: PUSH
16206: LD_EXP 97
16210: PUSH
16211: LD_EXP 62
16215: PUSH
16216: LD_EXP 63
16220: PUSH
16221: LD_EXP 66
16225: PUSH
16226: LD_EXP 67
16230: PUSH
16231: LD_EXP 68
16235: PUSH
16236: LD_EXP 64
16240: PUSH
16241: LD_EXP 65
16245: PUSH
16246: LD_EXP 73
16250: PUSH
16251: LD_EXP 77
16255: PUSH
16256: LD_EXP 78
16260: PUSH
16261: LD_EXP 80
16265: PUSH
16266: LD_EXP 84
16270: PUSH
16271: LD_EXP 87
16275: PUSH
16276: LD_EXP 88
16280: PUSH
16281: LD_EXP 98
16285: PUSH
16286: LD_EXP 99
16290: PUSH
16291: LD_EXP 100
16295: PUSH
16296: LD_EXP 101
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: ST_TO_ADDR
// tmp :=  ;
16357: LD_ADDR_VAR 0 3
16361: PUSH
16362: LD_STRING 
16364: ST_TO_ADDR
// for i = 1 to normalCounter do
16365: LD_ADDR_VAR 0 8
16369: PUSH
16370: DOUBLE
16371: LD_INT 1
16373: DEC
16374: ST_TO_ADDR
16375: LD_EXP 46
16379: PUSH
16380: FOR_TO
16381: IFFALSE 16417
// begin if flags [ i ] then
16383: LD_VAR 0 4
16387: PUSH
16388: LD_VAR 0 8
16392: ARRAY
16393: IFFALSE 16415
// tmp := tmp & i & ; ;
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: LD_VAR 0 3
16404: PUSH
16405: LD_VAR 0 8
16409: STR
16410: PUSH
16411: LD_STRING ;
16413: STR
16414: ST_TO_ADDR
// end ;
16415: GO 16380
16417: POP
16418: POP
// for i = 1 to hardcoreCounter do
16419: LD_ADDR_VAR 0 8
16423: PUSH
16424: DOUBLE
16425: LD_INT 1
16427: DEC
16428: ST_TO_ADDR
16429: LD_EXP 47
16433: PUSH
16434: FOR_TO
16435: IFFALSE 16481
// begin if flags [ normalCounter + i ] then
16437: LD_VAR 0 4
16441: PUSH
16442: LD_EXP 46
16446: PUSH
16447: LD_VAR 0 8
16451: PLUS
16452: ARRAY
16453: IFFALSE 16479
// tmp := tmp & ( 100 + i ) & ; ;
16455: LD_ADDR_VAR 0 3
16459: PUSH
16460: LD_VAR 0 3
16464: PUSH
16465: LD_INT 100
16467: PUSH
16468: LD_VAR 0 8
16472: PLUS
16473: STR
16474: PUSH
16475: LD_STRING ;
16477: STR
16478: ST_TO_ADDR
// end ;
16479: GO 16434
16481: POP
16482: POP
// if tmp then
16483: LD_VAR 0 3
16487: IFFALSE 16499
// active := tmp ;
16489: LD_ADDR_VAR 0 7
16493: PUSH
16494: LD_VAR 0 3
16498: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16499: LD_STRING getStreamItemsFromMission("
16501: PUSH
16502: LD_VAR 0 5
16506: STR
16507: PUSH
16508: LD_STRING ","
16510: STR
16511: PUSH
16512: LD_VAR 0 6
16516: STR
16517: PUSH
16518: LD_STRING ","
16520: STR
16521: PUSH
16522: LD_VAR 0 7
16526: STR
16527: PUSH
16528: LD_STRING ")
16530: STR
16531: PPUSH
16532: CALL_OW 559
// end else
16536: GO 16545
// ToLua ( getStreamItemsFromMission("","","") ) ;
16538: LD_STRING getStreamItemsFromMission("","","")
16540: PPUSH
16541: CALL_OW 559
// end ;
16545: LD_VAR 0 2
16549: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16550: LD_EXP 45
16554: PUSH
16555: LD_EXP 50
16559: AND
16560: IFFALSE 16684
16562: GO 16564
16564: DISABLE
16565: LD_INT 0
16567: PPUSH
16568: PPUSH
// begin enable ;
16569: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16570: LD_ADDR_VAR 0 2
16574: PUSH
16575: LD_INT 22
16577: PUSH
16578: LD_OWVAR 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 2
16589: PUSH
16590: LD_INT 34
16592: PUSH
16593: LD_INT 7
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 34
16602: PUSH
16603: LD_INT 45
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 34
16612: PUSH
16613: LD_INT 28
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 34
16622: PUSH
16623: LD_INT 47
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PPUSH
16641: CALL_OW 69
16645: ST_TO_ADDR
// if not tmp then
16646: LD_VAR 0 2
16650: NOT
16651: IFFALSE 16655
// exit ;
16653: GO 16684
// for i in tmp do
16655: LD_ADDR_VAR 0 1
16659: PUSH
16660: LD_VAR 0 2
16664: PUSH
16665: FOR_IN
16666: IFFALSE 16682
// begin SetLives ( i , 0 ) ;
16668: LD_VAR 0 1
16672: PPUSH
16673: LD_INT 0
16675: PPUSH
16676: CALL_OW 234
// end ;
16680: GO 16665
16682: POP
16683: POP
// end ;
16684: PPOPN 2
16686: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16687: LD_EXP 45
16691: PUSH
16692: LD_EXP 51
16696: AND
16697: IFFALSE 16781
16699: GO 16701
16701: DISABLE
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
// begin enable ;
16706: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16707: LD_ADDR_VAR 0 2
16711: PUSH
16712: LD_INT 22
16714: PUSH
16715: LD_OWVAR 2
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 32
16726: PUSH
16727: LD_INT 3
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: ST_TO_ADDR
// if not tmp then
16743: LD_VAR 0 2
16747: NOT
16748: IFFALSE 16752
// exit ;
16750: GO 16781
// for i in tmp do
16752: LD_ADDR_VAR 0 1
16756: PUSH
16757: LD_VAR 0 2
16761: PUSH
16762: FOR_IN
16763: IFFALSE 16779
// begin SetLives ( i , 0 ) ;
16765: LD_VAR 0 1
16769: PPUSH
16770: LD_INT 0
16772: PPUSH
16773: CALL_OW 234
// end ;
16777: GO 16762
16779: POP
16780: POP
// end ;
16781: PPOPN 2
16783: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16784: LD_EXP 45
16788: PUSH
16789: LD_EXP 48
16793: AND
16794: IFFALSE 16887
16796: GO 16798
16798: DISABLE
16799: LD_INT 0
16801: PPUSH
// begin enable ;
16802: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16803: LD_ADDR_VAR 0 1
16807: PUSH
16808: LD_INT 22
16810: PUSH
16811: LD_OWVAR 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 2
16822: PUSH
16823: LD_INT 25
16825: PUSH
16826: LD_INT 5
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 25
16835: PUSH
16836: LD_INT 9
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 25
16845: PUSH
16846: LD_INT 8
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PUSH
16868: FOR_IN
16869: IFFALSE 16885
// begin SetClass ( i , 1 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 1
16878: PPUSH
16879: CALL_OW 336
// end ;
16883: GO 16868
16885: POP
16886: POP
// end ;
16887: PPOPN 1
16889: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16890: LD_EXP 45
16894: PUSH
16895: LD_EXP 49
16899: AND
16900: PUSH
16901: LD_OWVAR 65
16905: PUSH
16906: LD_INT 7
16908: LESS
16909: AND
16910: IFFALSE 16924
16912: GO 16914
16914: DISABLE
// begin enable ;
16915: ENABLE
// game_speed := 7 ;
16916: LD_ADDR_OWVAR 65
16920: PUSH
16921: LD_INT 7
16923: ST_TO_ADDR
// end ;
16924: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16925: LD_EXP 45
16929: PUSH
16930: LD_EXP 52
16934: AND
16935: IFFALSE 17137
16937: GO 16939
16939: DISABLE
16940: LD_INT 0
16942: PPUSH
16943: PPUSH
16944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16945: LD_ADDR_VAR 0 3
16949: PUSH
16950: LD_INT 81
16952: PUSH
16953: LD_OWVAR 2
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 21
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PPUSH
16976: CALL_OW 69
16980: ST_TO_ADDR
// if not tmp then
16981: LD_VAR 0 3
16985: NOT
16986: IFFALSE 16990
// exit ;
16988: GO 17137
// if tmp > 5 then
16990: LD_VAR 0 3
16994: PUSH
16995: LD_INT 5
16997: GREATER
16998: IFFALSE 17010
// k := 5 else
17000: LD_ADDR_VAR 0 2
17004: PUSH
17005: LD_INT 5
17007: ST_TO_ADDR
17008: GO 17020
// k := tmp ;
17010: LD_ADDR_VAR 0 2
17014: PUSH
17015: LD_VAR 0 3
17019: ST_TO_ADDR
// for i := 1 to k do
17020: LD_ADDR_VAR 0 1
17024: PUSH
17025: DOUBLE
17026: LD_INT 1
17028: DEC
17029: ST_TO_ADDR
17030: LD_VAR 0 2
17034: PUSH
17035: FOR_TO
17036: IFFALSE 17135
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17038: LD_VAR 0 3
17042: PUSH
17043: LD_VAR 0 1
17047: ARRAY
17048: PPUSH
17049: LD_VAR 0 1
17053: PUSH
17054: LD_INT 4
17056: MOD
17057: PUSH
17058: LD_INT 1
17060: PLUS
17061: PPUSH
17062: CALL_OW 259
17066: PUSH
17067: LD_INT 10
17069: LESS
17070: IFFALSE 17133
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17072: LD_VAR 0 3
17076: PUSH
17077: LD_VAR 0 1
17081: ARRAY
17082: PPUSH
17083: LD_VAR 0 1
17087: PUSH
17088: LD_INT 4
17090: MOD
17091: PUSH
17092: LD_INT 1
17094: PLUS
17095: PPUSH
17096: LD_VAR 0 3
17100: PUSH
17101: LD_VAR 0 1
17105: ARRAY
17106: PPUSH
17107: LD_VAR 0 1
17111: PUSH
17112: LD_INT 4
17114: MOD
17115: PUSH
17116: LD_INT 1
17118: PLUS
17119: PPUSH
17120: CALL_OW 259
17124: PUSH
17125: LD_INT 1
17127: PLUS
17128: PPUSH
17129: CALL_OW 237
17133: GO 17035
17135: POP
17136: POP
// end ;
17137: PPOPN 3
17139: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17140: LD_EXP 45
17144: PUSH
17145: LD_EXP 53
17149: AND
17150: IFFALSE 17170
17152: GO 17154
17154: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17155: LD_INT 4
17157: PPUSH
17158: LD_OWVAR 2
17162: PPUSH
17163: LD_INT 0
17165: PPUSH
17166: CALL_OW 324
17170: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17171: LD_EXP 45
17175: PUSH
17176: LD_EXP 82
17180: AND
17181: IFFALSE 17201
17183: GO 17185
17185: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17186: LD_INT 19
17188: PPUSH
17189: LD_OWVAR 2
17193: PPUSH
17194: LD_INT 0
17196: PPUSH
17197: CALL_OW 324
17201: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17202: LD_EXP 45
17206: PUSH
17207: LD_EXP 54
17211: AND
17212: IFFALSE 17314
17214: GO 17216
17216: DISABLE
17217: LD_INT 0
17219: PPUSH
17220: PPUSH
// begin enable ;
17221: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_INT 22
17229: PUSH
17230: LD_OWVAR 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 2
17241: PUSH
17242: LD_INT 34
17244: PUSH
17245: LD_INT 11
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 34
17254: PUSH
17255: LD_INT 30
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: LIST
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PPUSH
17271: CALL_OW 69
17275: ST_TO_ADDR
// if not tmp then
17276: LD_VAR 0 2
17280: NOT
17281: IFFALSE 17285
// exit ;
17283: GO 17314
// for i in tmp do
17285: LD_ADDR_VAR 0 1
17289: PUSH
17290: LD_VAR 0 2
17294: PUSH
17295: FOR_IN
17296: IFFALSE 17312
// begin SetLives ( i , 0 ) ;
17298: LD_VAR 0 1
17302: PPUSH
17303: LD_INT 0
17305: PPUSH
17306: CALL_OW 234
// end ;
17310: GO 17295
17312: POP
17313: POP
// end ;
17314: PPOPN 2
17316: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17317: LD_EXP 45
17321: PUSH
17322: LD_EXP 55
17326: AND
17327: IFFALSE 17347
17329: GO 17331
17331: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17332: LD_INT 32
17334: PPUSH
17335: LD_OWVAR 2
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 324
17347: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17348: LD_EXP 45
17352: PUSH
17353: LD_EXP 56
17357: AND
17358: IFFALSE 17539
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
17366: PPUSH
17367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: LD_INT 22
17375: PUSH
17376: LD_OWVAR 2
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 33
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL_OW 69
17403: ST_TO_ADDR
// if not tmp then
17404: LD_VAR 0 2
17408: NOT
17409: IFFALSE 17413
// exit ;
17411: GO 17539
// side := 0 ;
17413: LD_ADDR_VAR 0 3
17417: PUSH
17418: LD_INT 0
17420: ST_TO_ADDR
// for i := 1 to 8 do
17421: LD_ADDR_VAR 0 1
17425: PUSH
17426: DOUBLE
17427: LD_INT 1
17429: DEC
17430: ST_TO_ADDR
17431: LD_INT 8
17433: PUSH
17434: FOR_TO
17435: IFFALSE 17483
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17437: LD_OWVAR 2
17441: PUSH
17442: LD_VAR 0 1
17446: NONEQUAL
17447: PUSH
17448: LD_OWVAR 2
17452: PPUSH
17453: LD_VAR 0 1
17457: PPUSH
17458: CALL_OW 81
17462: PUSH
17463: LD_INT 2
17465: EQUAL
17466: AND
17467: IFFALSE 17481
// begin side := i ;
17469: LD_ADDR_VAR 0 3
17473: PUSH
17474: LD_VAR 0 1
17478: ST_TO_ADDR
// break ;
17479: GO 17483
// end ;
17481: GO 17434
17483: POP
17484: POP
// if not side then
17485: LD_VAR 0 3
17489: NOT
17490: IFFALSE 17494
// exit ;
17492: GO 17539
// for i := 1 to tmp do
17494: LD_ADDR_VAR 0 1
17498: PUSH
17499: DOUBLE
17500: LD_INT 1
17502: DEC
17503: ST_TO_ADDR
17504: LD_VAR 0 2
17508: PUSH
17509: FOR_TO
17510: IFFALSE 17537
// if Prob ( 60 ) then
17512: LD_INT 60
17514: PPUSH
17515: CALL_OW 13
17519: IFFALSE 17535
// SetSide ( i , side ) ;
17521: LD_VAR 0 1
17525: PPUSH
17526: LD_VAR 0 3
17530: PPUSH
17531: CALL_OW 235
17535: GO 17509
17537: POP
17538: POP
// end ;
17539: PPOPN 3
17541: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17542: LD_EXP 45
17546: PUSH
17547: LD_EXP 58
17551: AND
17552: IFFALSE 17671
17554: GO 17556
17556: DISABLE
17557: LD_INT 0
17559: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17560: LD_ADDR_VAR 0 1
17564: PUSH
17565: LD_INT 22
17567: PUSH
17568: LD_OWVAR 2
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 21
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: LD_INT 23
17592: PUSH
17593: LD_INT 0
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: PPUSH
17609: CALL_OW 69
17613: PUSH
17614: FOR_IN
17615: IFFALSE 17669
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17617: LD_VAR 0 1
17621: PPUSH
17622: CALL_OW 257
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: LD_INT 3
17635: PUSH
17636: LD_INT 4
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: IN
17645: IFFALSE 17667
// SetClass ( un , rand ( 1 , 4 ) ) ;
17647: LD_VAR 0 1
17651: PPUSH
17652: LD_INT 1
17654: PPUSH
17655: LD_INT 4
17657: PPUSH
17658: CALL_OW 12
17662: PPUSH
17663: CALL_OW 336
17667: GO 17614
17669: POP
17670: POP
// end ;
17671: PPOPN 1
17673: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17674: LD_EXP 45
17678: PUSH
17679: LD_EXP 57
17683: AND
17684: IFFALSE 17763
17686: GO 17688
17688: DISABLE
17689: LD_INT 0
17691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17692: LD_ADDR_VAR 0 1
17696: PUSH
17697: LD_INT 22
17699: PUSH
17700: LD_OWVAR 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 21
17711: PUSH
17712: LD_INT 3
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: ST_TO_ADDR
// if not tmp then
17728: LD_VAR 0 1
17732: NOT
17733: IFFALSE 17737
// exit ;
17735: GO 17763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 1
17744: PPUSH
17745: LD_VAR 0 1
17749: PPUSH
17750: CALL_OW 12
17754: ARRAY
17755: PPUSH
17756: LD_INT 100
17758: PPUSH
17759: CALL_OW 234
// end ;
17763: PPOPN 1
17765: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17766: LD_EXP 45
17770: PUSH
17771: LD_EXP 59
17775: AND
17776: IFFALSE 17874
17778: GO 17780
17780: DISABLE
17781: LD_INT 0
17783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 22
17791: PUSH
17792: LD_OWVAR 2
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 21
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 69
17819: ST_TO_ADDR
// if not tmp then
17820: LD_VAR 0 1
17824: NOT
17825: IFFALSE 17829
// exit ;
17827: GO 17874
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17829: LD_VAR 0 1
17833: PUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 12
17846: ARRAY
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: LD_INT 4
17853: PPUSH
17854: CALL_OW 12
17858: PPUSH
17859: LD_INT 3000
17861: PPUSH
17862: LD_INT 9000
17864: PPUSH
17865: CALL_OW 12
17869: PPUSH
17870: CALL_OW 492
// end ;
17874: PPOPN 1
17876: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17877: LD_EXP 45
17881: PUSH
17882: LD_EXP 60
17886: AND
17887: IFFALSE 17907
17889: GO 17891
17891: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17892: LD_INT 1
17894: PPUSH
17895: LD_OWVAR 2
17899: PPUSH
17900: LD_INT 0
17902: PPUSH
17903: CALL_OW 324
17907: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17908: LD_EXP 45
17912: PUSH
17913: LD_EXP 61
17917: AND
17918: IFFALSE 18001
17920: GO 17922
17922: DISABLE
17923: LD_INT 0
17925: PPUSH
17926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_INT 22
17934: PUSH
17935: LD_OWVAR 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 21
17946: PUSH
17947: LD_INT 3
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PPUSH
17958: CALL_OW 69
17962: ST_TO_ADDR
// if not tmp then
17963: LD_VAR 0 2
17967: NOT
17968: IFFALSE 17972
// exit ;
17970: GO 18001
// for i in tmp do
17972: LD_ADDR_VAR 0 1
17976: PUSH
17977: LD_VAR 0 2
17981: PUSH
17982: FOR_IN
17983: IFFALSE 17999
// SetBLevel ( i , 10 ) ;
17985: LD_VAR 0 1
17989: PPUSH
17990: LD_INT 10
17992: PPUSH
17993: CALL_OW 241
17997: GO 17982
17999: POP
18000: POP
// end ;
18001: PPOPN 2
18003: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18004: LD_EXP 45
18008: PUSH
18009: LD_EXP 62
18013: AND
18014: IFFALSE 18125
18016: GO 18018
18018: DISABLE
18019: LD_INT 0
18021: PPUSH
18022: PPUSH
18023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18024: LD_ADDR_VAR 0 3
18028: PUSH
18029: LD_INT 22
18031: PUSH
18032: LD_OWVAR 2
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 25
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 69
18059: ST_TO_ADDR
// if not tmp then
18060: LD_VAR 0 3
18064: NOT
18065: IFFALSE 18069
// exit ;
18067: GO 18125
// un := tmp [ rand ( 1 , tmp ) ] ;
18069: LD_ADDR_VAR 0 2
18073: PUSH
18074: LD_VAR 0 3
18078: PUSH
18079: LD_INT 1
18081: PPUSH
18082: LD_VAR 0 3
18086: PPUSH
18087: CALL_OW 12
18091: ARRAY
18092: ST_TO_ADDR
// if Crawls ( un ) then
18093: LD_VAR 0 2
18097: PPUSH
18098: CALL_OW 318
18102: IFFALSE 18113
// ComWalk ( un ) ;
18104: LD_VAR 0 2
18108: PPUSH
18109: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18113: LD_VAR 0 2
18117: PPUSH
18118: LD_INT 5
18120: PPUSH
18121: CALL_OW 336
// end ;
18125: PPOPN 3
18127: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18128: LD_EXP 45
18132: PUSH
18133: LD_EXP 63
18137: AND
18138: PUSH
18139: LD_OWVAR 67
18143: PUSH
18144: LD_INT 4
18146: LESS
18147: AND
18148: IFFALSE 18167
18150: GO 18152
18152: DISABLE
// begin Difficulty := Difficulty + 1 ;
18153: LD_ADDR_OWVAR 67
18157: PUSH
18158: LD_OWVAR 67
18162: PUSH
18163: LD_INT 1
18165: PLUS
18166: ST_TO_ADDR
// end ;
18167: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18168: LD_EXP 45
18172: PUSH
18173: LD_EXP 64
18177: AND
18178: IFFALSE 18281
18180: GO 18182
18182: DISABLE
18183: LD_INT 0
18185: PPUSH
// begin for i := 1 to 5 do
18186: LD_ADDR_VAR 0 1
18190: PUSH
18191: DOUBLE
18192: LD_INT 1
18194: DEC
18195: ST_TO_ADDR
18196: LD_INT 5
18198: PUSH
18199: FOR_TO
18200: IFFALSE 18279
// begin uc_nation := nation_nature ;
18202: LD_ADDR_OWVAR 21
18206: PUSH
18207: LD_INT 0
18209: ST_TO_ADDR
// uc_side := 0 ;
18210: LD_ADDR_OWVAR 20
18214: PUSH
18215: LD_INT 0
18217: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18218: LD_ADDR_OWVAR 29
18222: PUSH
18223: LD_INT 12
18225: PUSH
18226: LD_INT 12
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: ST_TO_ADDR
// hc_agressivity := 20 ;
18233: LD_ADDR_OWVAR 35
18237: PUSH
18238: LD_INT 20
18240: ST_TO_ADDR
// hc_class := class_tiger ;
18241: LD_ADDR_OWVAR 28
18245: PUSH
18246: LD_INT 14
18248: ST_TO_ADDR
// hc_gallery :=  ;
18249: LD_ADDR_OWVAR 33
18253: PUSH
18254: LD_STRING 
18256: ST_TO_ADDR
// hc_name :=  ;
18257: LD_ADDR_OWVAR 26
18261: PUSH
18262: LD_STRING 
18264: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18265: CALL_OW 44
18269: PPUSH
18270: LD_INT 0
18272: PPUSH
18273: CALL_OW 51
// end ;
18277: GO 18199
18279: POP
18280: POP
// end ;
18281: PPOPN 1
18283: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18284: LD_EXP 45
18288: PUSH
18289: LD_EXP 65
18293: AND
18294: IFFALSE 18303
18296: GO 18298
18298: DISABLE
// StreamSibBomb ;
18299: CALL 18304 0 0
18303: END
// export function StreamSibBomb ; var i , x , y ; begin
18304: LD_INT 0
18306: PPUSH
18307: PPUSH
18308: PPUSH
18309: PPUSH
// result := false ;
18310: LD_ADDR_VAR 0 1
18314: PUSH
18315: LD_INT 0
18317: ST_TO_ADDR
// for i := 1 to 16 do
18318: LD_ADDR_VAR 0 2
18322: PUSH
18323: DOUBLE
18324: LD_INT 1
18326: DEC
18327: ST_TO_ADDR
18328: LD_INT 16
18330: PUSH
18331: FOR_TO
18332: IFFALSE 18531
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18334: LD_ADDR_VAR 0 3
18338: PUSH
18339: LD_INT 10
18341: PUSH
18342: LD_INT 20
18344: PUSH
18345: LD_INT 30
18347: PUSH
18348: LD_INT 40
18350: PUSH
18351: LD_INT 50
18353: PUSH
18354: LD_INT 60
18356: PUSH
18357: LD_INT 70
18359: PUSH
18360: LD_INT 80
18362: PUSH
18363: LD_INT 90
18365: PUSH
18366: LD_INT 100
18368: PUSH
18369: LD_INT 110
18371: PUSH
18372: LD_INT 120
18374: PUSH
18375: LD_INT 130
18377: PUSH
18378: LD_INT 140
18380: PUSH
18381: LD_INT 150
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 1
18403: PPUSH
18404: LD_INT 15
18406: PPUSH
18407: CALL_OW 12
18411: ARRAY
18412: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18413: LD_ADDR_VAR 0 4
18417: PUSH
18418: LD_INT 10
18420: PUSH
18421: LD_INT 20
18423: PUSH
18424: LD_INT 30
18426: PUSH
18427: LD_INT 40
18429: PUSH
18430: LD_INT 50
18432: PUSH
18433: LD_INT 60
18435: PUSH
18436: LD_INT 70
18438: PUSH
18439: LD_INT 80
18441: PUSH
18442: LD_INT 90
18444: PUSH
18445: LD_INT 100
18447: PUSH
18448: LD_INT 110
18450: PUSH
18451: LD_INT 120
18453: PUSH
18454: LD_INT 130
18456: PUSH
18457: LD_INT 140
18459: PUSH
18460: LD_INT 150
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: PPUSH
18483: LD_INT 15
18485: PPUSH
18486: CALL_OW 12
18490: ARRAY
18491: ST_TO_ADDR
// if ValidHex ( x , y ) then
18492: LD_VAR 0 3
18496: PPUSH
18497: LD_VAR 0 4
18501: PPUSH
18502: CALL_OW 488
18506: IFFALSE 18529
// begin result := [ x , y ] ;
18508: LD_ADDR_VAR 0 1
18512: PUSH
18513: LD_VAR 0 3
18517: PUSH
18518: LD_VAR 0 4
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: ST_TO_ADDR
// break ;
18527: GO 18531
// end ; end ;
18529: GO 18331
18531: POP
18532: POP
// if result then
18533: LD_VAR 0 1
18537: IFFALSE 18597
// begin ToLua ( playSibBomb() ) ;
18539: LD_STRING playSibBomb()
18541: PPUSH
18542: CALL_OW 559
// wait ( 0 0$14 ) ;
18546: LD_INT 490
18548: PPUSH
18549: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18553: LD_VAR 0 1
18557: PUSH
18558: LD_INT 1
18560: ARRAY
18561: PPUSH
18562: LD_VAR 0 1
18566: PUSH
18567: LD_INT 2
18569: ARRAY
18570: PPUSH
18571: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18575: LD_VAR 0 1
18579: PUSH
18580: LD_INT 1
18582: ARRAY
18583: PPUSH
18584: LD_VAR 0 1
18588: PUSH
18589: LD_INT 2
18591: ARRAY
18592: PPUSH
18593: CALL_OW 429
// end ; end ;
18597: LD_VAR 0 1
18601: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18602: LD_EXP 45
18606: PUSH
18607: LD_EXP 67
18611: AND
18612: IFFALSE 18624
18614: GO 18616
18616: DISABLE
// YouLost (  ) ;
18617: LD_STRING 
18619: PPUSH
18620: CALL_OW 104
18624: END
// every 0 0$1 trigger StreamModeActive and sFog do
18625: LD_EXP 45
18629: PUSH
18630: LD_EXP 66
18634: AND
18635: IFFALSE 18649
18637: GO 18639
18639: DISABLE
// FogOff ( your_side ) ;
18640: LD_OWVAR 2
18644: PPUSH
18645: CALL_OW 344
18649: END
// every 0 0$1 trigger StreamModeActive and sSun do
18650: LD_EXP 45
18654: PUSH
18655: LD_EXP 68
18659: AND
18660: IFFALSE 18688
18662: GO 18664
18664: DISABLE
// begin solar_recharge_percent := 0 ;
18665: LD_ADDR_OWVAR 79
18669: PUSH
18670: LD_INT 0
18672: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18673: LD_INT 10500
18675: PPUSH
18676: CALL_OW 67
// solar_recharge_percent := 100 ;
18680: LD_ADDR_OWVAR 79
18684: PUSH
18685: LD_INT 100
18687: ST_TO_ADDR
// end ;
18688: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18689: LD_EXP 45
18693: PUSH
18694: LD_EXP 69
18698: AND
18699: IFFALSE 18938
18701: GO 18703
18703: DISABLE
18704: LD_INT 0
18706: PPUSH
18707: PPUSH
18708: PPUSH
// begin tmp := [ ] ;
18709: LD_ADDR_VAR 0 3
18713: PUSH
18714: EMPTY
18715: ST_TO_ADDR
// for i := 1 to 6 do
18716: LD_ADDR_VAR 0 1
18720: PUSH
18721: DOUBLE
18722: LD_INT 1
18724: DEC
18725: ST_TO_ADDR
18726: LD_INT 6
18728: PUSH
18729: FOR_TO
18730: IFFALSE 18835
// begin uc_nation := nation_nature ;
18732: LD_ADDR_OWVAR 21
18736: PUSH
18737: LD_INT 0
18739: ST_TO_ADDR
// uc_side := 0 ;
18740: LD_ADDR_OWVAR 20
18744: PUSH
18745: LD_INT 0
18747: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18748: LD_ADDR_OWVAR 29
18752: PUSH
18753: LD_INT 12
18755: PUSH
18756: LD_INT 12
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: ST_TO_ADDR
// hc_agressivity := 20 ;
18763: LD_ADDR_OWVAR 35
18767: PUSH
18768: LD_INT 20
18770: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18771: LD_ADDR_OWVAR 28
18775: PUSH
18776: LD_INT 17
18778: ST_TO_ADDR
// hc_gallery :=  ;
18779: LD_ADDR_OWVAR 33
18783: PUSH
18784: LD_STRING 
18786: ST_TO_ADDR
// hc_name :=  ;
18787: LD_ADDR_OWVAR 26
18791: PUSH
18792: LD_STRING 
18794: ST_TO_ADDR
// un := CreateHuman ;
18795: LD_ADDR_VAR 0 2
18799: PUSH
18800: CALL_OW 44
18804: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18805: LD_VAR 0 2
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: CALL_OW 51
// tmp := tmp ^ un ;
18817: LD_ADDR_VAR 0 3
18821: PUSH
18822: LD_VAR 0 3
18826: PUSH
18827: LD_VAR 0 2
18831: ADD
18832: ST_TO_ADDR
// end ;
18833: GO 18729
18835: POP
18836: POP
// repeat wait ( 0 0$1 ) ;
18837: LD_INT 35
18839: PPUSH
18840: CALL_OW 67
// for un in tmp do
18844: LD_ADDR_VAR 0 2
18848: PUSH
18849: LD_VAR 0 3
18853: PUSH
18854: FOR_IN
18855: IFFALSE 18929
// begin if IsDead ( un ) then
18857: LD_VAR 0 2
18861: PPUSH
18862: CALL_OW 301
18866: IFFALSE 18886
// begin tmp := tmp diff un ;
18868: LD_ADDR_VAR 0 3
18872: PUSH
18873: LD_VAR 0 3
18877: PUSH
18878: LD_VAR 0 2
18882: DIFF
18883: ST_TO_ADDR
// continue ;
18884: GO 18854
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18886: LD_VAR 0 2
18890: PPUSH
18891: LD_INT 3
18893: PUSH
18894: LD_INT 22
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PPUSH
18908: CALL_OW 69
18912: PPUSH
18913: LD_VAR 0 2
18917: PPUSH
18918: CALL_OW 74
18922: PPUSH
18923: CALL_OW 115
// end ;
18927: GO 18854
18929: POP
18930: POP
// until not tmp ;
18931: LD_VAR 0 3
18935: NOT
18936: IFFALSE 18837
// end ;
18938: PPOPN 3
18940: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18941: LD_EXP 45
18945: PUSH
18946: LD_EXP 70
18950: AND
18951: IFFALSE 19005
18953: GO 18955
18955: DISABLE
// begin ToLua ( displayTroll(); ) ;
18956: LD_STRING displayTroll();
18958: PPUSH
18959: CALL_OW 559
// wait ( 3 3$00 ) ;
18963: LD_INT 6300
18965: PPUSH
18966: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18970: LD_STRING hideTroll();
18972: PPUSH
18973: CALL_OW 559
// wait ( 1 1$00 ) ;
18977: LD_INT 2100
18979: PPUSH
18980: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18984: LD_STRING displayTroll();
18986: PPUSH
18987: CALL_OW 559
// wait ( 1 1$00 ) ;
18991: LD_INT 2100
18993: PPUSH
18994: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18998: LD_STRING hideTroll();
19000: PPUSH
19001: CALL_OW 559
// end ;
19005: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19006: LD_EXP 45
19010: PUSH
19011: LD_EXP 71
19015: AND
19016: IFFALSE 19079
19018: GO 19020
19020: DISABLE
19021: LD_INT 0
19023: PPUSH
// begin p := 0 ;
19024: LD_ADDR_VAR 0 1
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// repeat game_speed := 1 ;
19032: LD_ADDR_OWVAR 65
19036: PUSH
19037: LD_INT 1
19039: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19040: LD_INT 35
19042: PPUSH
19043: CALL_OW 67
// p := p + 1 ;
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_VAR 0 1
19056: PUSH
19057: LD_INT 1
19059: PLUS
19060: ST_TO_ADDR
// until p >= 60 ;
19061: LD_VAR 0 1
19065: PUSH
19066: LD_INT 60
19068: GREATEREQUAL
19069: IFFALSE 19032
// game_speed := 4 ;
19071: LD_ADDR_OWVAR 65
19075: PUSH
19076: LD_INT 4
19078: ST_TO_ADDR
// end ;
19079: PPOPN 1
19081: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19082: LD_EXP 45
19086: PUSH
19087: LD_EXP 72
19091: AND
19092: IFFALSE 19238
19094: GO 19096
19096: DISABLE
19097: LD_INT 0
19099: PPUSH
19100: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19101: LD_ADDR_VAR 0 1
19105: PUSH
19106: LD_INT 22
19108: PUSH
19109: LD_OWVAR 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: LD_INT 30
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 30
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 69
19154: ST_TO_ADDR
// if not depot then
19155: LD_VAR 0 1
19159: NOT
19160: IFFALSE 19164
// exit ;
19162: GO 19238
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19164: LD_ADDR_VAR 0 2
19168: PUSH
19169: LD_VAR 0 1
19173: PUSH
19174: LD_INT 1
19176: PPUSH
19177: LD_VAR 0 1
19181: PPUSH
19182: CALL_OW 12
19186: ARRAY
19187: PPUSH
19188: CALL_OW 274
19192: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19193: LD_VAR 0 2
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: LD_INT 0
19203: PPUSH
19204: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19208: LD_VAR 0 2
19212: PPUSH
19213: LD_INT 2
19215: PPUSH
19216: LD_INT 0
19218: PPUSH
19219: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19223: LD_VAR 0 2
19227: PPUSH
19228: LD_INT 3
19230: PPUSH
19231: LD_INT 0
19233: PPUSH
19234: CALL_OW 277
// end ;
19238: PPOPN 2
19240: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19241: LD_EXP 45
19245: PUSH
19246: LD_EXP 73
19250: AND
19251: IFFALSE 19348
19253: GO 19255
19255: DISABLE
19256: LD_INT 0
19258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19259: LD_ADDR_VAR 0 1
19263: PUSH
19264: LD_INT 22
19266: PUSH
19267: LD_OWVAR 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 21
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 3
19288: PUSH
19289: LD_INT 23
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: LIST
19307: PPUSH
19308: CALL_OW 69
19312: ST_TO_ADDR
// if not tmp then
19313: LD_VAR 0 1
19317: NOT
19318: IFFALSE 19322
// exit ;
19320: GO 19348
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19322: LD_VAR 0 1
19326: PUSH
19327: LD_INT 1
19329: PPUSH
19330: LD_VAR 0 1
19334: PPUSH
19335: CALL_OW 12
19339: ARRAY
19340: PPUSH
19341: LD_INT 200
19343: PPUSH
19344: CALL_OW 234
// end ;
19348: PPOPN 1
19350: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19351: LD_EXP 45
19355: PUSH
19356: LD_EXP 74
19360: AND
19361: IFFALSE 19440
19363: GO 19365
19365: DISABLE
19366: LD_INT 0
19368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19369: LD_ADDR_VAR 0 1
19373: PUSH
19374: LD_INT 22
19376: PUSH
19377: LD_OWVAR 2
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 21
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PPUSH
19400: CALL_OW 69
19404: ST_TO_ADDR
// if not tmp then
19405: LD_VAR 0 1
19409: NOT
19410: IFFALSE 19414
// exit ;
19412: GO 19440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19414: LD_VAR 0 1
19418: PUSH
19419: LD_INT 1
19421: PPUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 12
19431: ARRAY
19432: PPUSH
19433: LD_INT 60
19435: PPUSH
19436: CALL_OW 234
// end ;
19440: PPOPN 1
19442: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19443: LD_EXP 45
19447: PUSH
19448: LD_EXP 75
19452: AND
19453: IFFALSE 19552
19455: GO 19457
19457: DISABLE
19458: LD_INT 0
19460: PPUSH
19461: PPUSH
// begin enable ;
19462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19463: LD_ADDR_VAR 0 1
19467: PUSH
19468: LD_INT 22
19470: PUSH
19471: LD_OWVAR 2
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 61
19482: PUSH
19483: EMPTY
19484: LIST
19485: PUSH
19486: LD_INT 33
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: PPUSH
19501: CALL_OW 69
19505: ST_TO_ADDR
// if not tmp then
19506: LD_VAR 0 1
19510: NOT
19511: IFFALSE 19515
// exit ;
19513: GO 19552
// for i in tmp do
19515: LD_ADDR_VAR 0 2
19519: PUSH
19520: LD_VAR 0 1
19524: PUSH
19525: FOR_IN
19526: IFFALSE 19550
// if IsControledBy ( i ) then
19528: LD_VAR 0 2
19532: PPUSH
19533: CALL_OW 312
19537: IFFALSE 19548
// ComUnlink ( i ) ;
19539: LD_VAR 0 2
19543: PPUSH
19544: CALL_OW 136
19548: GO 19525
19550: POP
19551: POP
// end ;
19552: PPOPN 2
19554: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19555: LD_EXP 45
19559: PUSH
19560: LD_EXP 76
19564: AND
19565: IFFALSE 19705
19567: GO 19569
19569: DISABLE
19570: LD_INT 0
19572: PPUSH
19573: PPUSH
// begin ToLua ( displayPowell(); ) ;
19574: LD_STRING displayPowell();
19576: PPUSH
19577: CALL_OW 559
// uc_side := 0 ;
19581: LD_ADDR_OWVAR 20
19585: PUSH
19586: LD_INT 0
19588: ST_TO_ADDR
// uc_nation := 2 ;
19589: LD_ADDR_OWVAR 21
19593: PUSH
19594: LD_INT 2
19596: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19597: LD_ADDR_OWVAR 37
19601: PUSH
19602: LD_INT 14
19604: ST_TO_ADDR
// vc_engine := engine_siberite ;
19605: LD_ADDR_OWVAR 39
19609: PUSH
19610: LD_INT 3
19612: ST_TO_ADDR
// vc_control := control_apeman ;
19613: LD_ADDR_OWVAR 38
19617: PUSH
19618: LD_INT 5
19620: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19621: LD_ADDR_OWVAR 40
19625: PUSH
19626: LD_INT 29
19628: ST_TO_ADDR
// un := CreateVehicle ;
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: CALL_OW 45
19638: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19639: LD_VAR 0 2
19643: PPUSH
19644: LD_INT 1
19646: PPUSH
19647: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19651: LD_INT 35
19653: PPUSH
19654: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19658: LD_VAR 0 2
19662: PPUSH
19663: LD_INT 22
19665: PUSH
19666: LD_OWVAR 2
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PPUSH
19675: CALL_OW 69
19679: PPUSH
19680: LD_VAR 0 2
19684: PPUSH
19685: CALL_OW 74
19689: PPUSH
19690: CALL_OW 115
// until IsDead ( un ) ;
19694: LD_VAR 0 2
19698: PPUSH
19699: CALL_OW 301
19703: IFFALSE 19651
// end ;
19705: PPOPN 2
19707: END
// every 0 0$1 trigger StreamModeActive and sStu do
19708: LD_EXP 45
19712: PUSH
19713: LD_EXP 84
19717: AND
19718: IFFALSE 19734
19720: GO 19722
19722: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19723: LD_STRING displayStucuk();
19725: PPUSH
19726: CALL_OW 559
// ResetFog ;
19730: CALL_OW 335
// end ;
19734: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19735: LD_EXP 45
19739: PUSH
19740: LD_EXP 77
19744: AND
19745: IFFALSE 19886
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
19753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: LD_INT 22
19761: PUSH
19762: LD_OWVAR 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// if not tmp then
19790: LD_VAR 0 2
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 19886
// un := tmp [ rand ( 1 , tmp ) ] ;
19799: LD_ADDR_VAR 0 1
19803: PUSH
19804: LD_VAR 0 2
19808: PUSH
19809: LD_INT 1
19811: PPUSH
19812: LD_VAR 0 2
19816: PPUSH
19817: CALL_OW 12
19821: ARRAY
19822: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19823: LD_VAR 0 1
19827: PPUSH
19828: LD_INT 0
19830: PPUSH
19831: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19835: LD_VAR 0 1
19839: PPUSH
19840: LD_OWVAR 3
19844: PUSH
19845: LD_VAR 0 1
19849: DIFF
19850: PPUSH
19851: LD_VAR 0 1
19855: PPUSH
19856: CALL_OW 74
19860: PPUSH
19861: CALL_OW 115
// wait ( 0 0$20 ) ;
19865: LD_INT 700
19867: PPUSH
19868: CALL_OW 67
// SetSide ( un , your_side ) ;
19872: LD_VAR 0 1
19876: PPUSH
19877: LD_OWVAR 2
19881: PPUSH
19882: CALL_OW 235
// end ;
19886: PPOPN 2
19888: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19889: LD_EXP 45
19893: PUSH
19894: LD_EXP 78
19898: AND
19899: IFFALSE 20005
19901: GO 19903
19903: DISABLE
19904: LD_INT 0
19906: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19907: LD_ADDR_VAR 0 1
19911: PUSH
19912: LD_INT 22
19914: PUSH
19915: LD_OWVAR 2
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: LD_INT 30
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 30
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PPUSH
19956: CALL_OW 69
19960: ST_TO_ADDR
// if not depot then
19961: LD_VAR 0 1
19965: NOT
19966: IFFALSE 19970
// exit ;
19968: GO 20005
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19970: LD_VAR 0 1
19974: PUSH
19975: LD_INT 1
19977: ARRAY
19978: PPUSH
19979: CALL_OW 250
19983: PPUSH
19984: LD_VAR 0 1
19988: PUSH
19989: LD_INT 1
19991: ARRAY
19992: PPUSH
19993: CALL_OW 251
19997: PPUSH
19998: LD_INT 70
20000: PPUSH
20001: CALL_OW 495
// end ;
20005: PPOPN 1
20007: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20008: LD_EXP 45
20012: PUSH
20013: LD_EXP 79
20017: AND
20018: IFFALSE 20229
20020: GO 20022
20022: DISABLE
20023: LD_INT 0
20025: PPUSH
20026: PPUSH
20027: PPUSH
20028: PPUSH
20029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20030: LD_ADDR_VAR 0 5
20034: PUSH
20035: LD_INT 22
20037: PUSH
20038: LD_OWVAR 2
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 21
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PPUSH
20061: CALL_OW 69
20065: ST_TO_ADDR
// if not tmp then
20066: LD_VAR 0 5
20070: NOT
20071: IFFALSE 20075
// exit ;
20073: GO 20229
// for i in tmp do
20075: LD_ADDR_VAR 0 1
20079: PUSH
20080: LD_VAR 0 5
20084: PUSH
20085: FOR_IN
20086: IFFALSE 20227
// begin d := rand ( 0 , 5 ) ;
20088: LD_ADDR_VAR 0 4
20092: PUSH
20093: LD_INT 0
20095: PPUSH
20096: LD_INT 5
20098: PPUSH
20099: CALL_OW 12
20103: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20104: LD_ADDR_VAR 0 2
20108: PUSH
20109: LD_VAR 0 1
20113: PPUSH
20114: CALL_OW 250
20118: PPUSH
20119: LD_VAR 0 4
20123: PPUSH
20124: LD_INT 3
20126: PPUSH
20127: LD_INT 12
20129: PPUSH
20130: CALL_OW 12
20134: PPUSH
20135: CALL_OW 272
20139: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 251
20154: PPUSH
20155: LD_VAR 0 4
20159: PPUSH
20160: LD_INT 3
20162: PPUSH
20163: LD_INT 12
20165: PPUSH
20166: CALL_OW 12
20170: PPUSH
20171: CALL_OW 273
20175: ST_TO_ADDR
// if ValidHex ( x , y ) then
20176: LD_VAR 0 2
20180: PPUSH
20181: LD_VAR 0 3
20185: PPUSH
20186: CALL_OW 488
20190: IFFALSE 20225
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20192: LD_VAR 0 1
20196: PPUSH
20197: LD_VAR 0 2
20201: PPUSH
20202: LD_VAR 0 3
20206: PPUSH
20207: LD_INT 3
20209: PPUSH
20210: LD_INT 6
20212: PPUSH
20213: CALL_OW 12
20217: PPUSH
20218: LD_INT 1
20220: PPUSH
20221: CALL_OW 483
// end ;
20225: GO 20085
20227: POP
20228: POP
// end ;
20229: PPOPN 5
20231: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20232: LD_EXP 45
20236: PUSH
20237: LD_EXP 80
20241: AND
20242: IFFALSE 20336
20244: GO 20246
20246: DISABLE
20247: LD_INT 0
20249: PPUSH
20250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20251: LD_ADDR_VAR 0 2
20255: PUSH
20256: LD_INT 22
20258: PUSH
20259: LD_OWVAR 2
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 32
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 21
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: PPUSH
20293: CALL_OW 69
20297: ST_TO_ADDR
// if not tmp then
20298: LD_VAR 0 2
20302: NOT
20303: IFFALSE 20307
// exit ;
20305: GO 20336
// for i in tmp do
20307: LD_ADDR_VAR 0 1
20311: PUSH
20312: LD_VAR 0 2
20316: PUSH
20317: FOR_IN
20318: IFFALSE 20334
// SetFuel ( i , 0 ) ;
20320: LD_VAR 0 1
20324: PPUSH
20325: LD_INT 0
20327: PPUSH
20328: CALL_OW 240
20332: GO 20317
20334: POP
20335: POP
// end ;
20336: PPOPN 2
20338: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20339: LD_EXP 45
20343: PUSH
20344: LD_EXP 81
20348: AND
20349: IFFALSE 20415
20351: GO 20353
20353: DISABLE
20354: LD_INT 0
20356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20357: LD_ADDR_VAR 0 1
20361: PUSH
20362: LD_INT 22
20364: PUSH
20365: LD_OWVAR 2
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 30
20376: PUSH
20377: LD_INT 29
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 69
20392: ST_TO_ADDR
// if not tmp then
20393: LD_VAR 0 1
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20415
// DestroyUnit ( tmp [ 1 ] ) ;
20402: LD_VAR 0 1
20406: PUSH
20407: LD_INT 1
20409: ARRAY
20410: PPUSH
20411: CALL_OW 65
// end ;
20415: PPOPN 1
20417: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20418: LD_EXP 45
20422: PUSH
20423: LD_EXP 83
20427: AND
20428: IFFALSE 20557
20430: GO 20432
20432: DISABLE
20433: LD_INT 0
20435: PPUSH
// begin uc_side := 0 ;
20436: LD_ADDR_OWVAR 20
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// uc_nation := nation_arabian ;
20444: LD_ADDR_OWVAR 21
20448: PUSH
20449: LD_INT 2
20451: ST_TO_ADDR
// hc_gallery :=  ;
20452: LD_ADDR_OWVAR 33
20456: PUSH
20457: LD_STRING 
20459: ST_TO_ADDR
// hc_name :=  ;
20460: LD_ADDR_OWVAR 26
20464: PUSH
20465: LD_STRING 
20467: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20468: LD_INT 1
20470: PPUSH
20471: LD_INT 11
20473: PPUSH
20474: LD_INT 10
20476: PPUSH
20477: CALL_OW 380
// un := CreateHuman ;
20481: LD_ADDR_VAR 0 1
20485: PUSH
20486: CALL_OW 44
20490: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20491: LD_VAR 0 1
20495: PPUSH
20496: LD_INT 1
20498: PPUSH
20499: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20503: LD_INT 35
20505: PPUSH
20506: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20510: LD_VAR 0 1
20514: PPUSH
20515: LD_INT 22
20517: PUSH
20518: LD_OWVAR 2
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PPUSH
20527: CALL_OW 69
20531: PPUSH
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 74
20541: PPUSH
20542: CALL_OW 115
// until IsDead ( un ) ;
20546: LD_VAR 0 1
20550: PPUSH
20551: CALL_OW 301
20555: IFFALSE 20503
// end ;
20557: PPOPN 1
20559: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20560: LD_EXP 45
20564: PUSH
20565: LD_EXP 85
20569: AND
20570: IFFALSE 20582
20572: GO 20574
20574: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20575: LD_STRING earthquake(getX(game), 0, 32)
20577: PPUSH
20578: CALL_OW 559
20582: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20583: LD_EXP 45
20587: PUSH
20588: LD_EXP 86
20592: AND
20593: IFFALSE 20684
20595: GO 20597
20597: DISABLE
20598: LD_INT 0
20600: PPUSH
// begin enable ;
20601: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20602: LD_ADDR_VAR 0 1
20606: PUSH
20607: LD_INT 22
20609: PUSH
20610: LD_OWVAR 2
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 21
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 33
20631: PUSH
20632: LD_INT 3
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 69
20648: ST_TO_ADDR
// if not tmp then
20649: LD_VAR 0 1
20653: NOT
20654: IFFALSE 20658
// exit ;
20656: GO 20684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20658: LD_VAR 0 1
20662: PUSH
20663: LD_INT 1
20665: PPUSH
20666: LD_VAR 0 1
20670: PPUSH
20671: CALL_OW 12
20675: ARRAY
20676: PPUSH
20677: LD_INT 1
20679: PPUSH
20680: CALL_OW 234
// end ;
20684: PPOPN 1
20686: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20687: LD_EXP 45
20691: PUSH
20692: LD_EXP 87
20696: AND
20697: IFFALSE 20838
20699: GO 20701
20701: DISABLE
20702: LD_INT 0
20704: PPUSH
20705: PPUSH
20706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20707: LD_ADDR_VAR 0 3
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_OWVAR 2
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 25
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 69
20742: ST_TO_ADDR
// if not tmp then
20743: LD_VAR 0 3
20747: NOT
20748: IFFALSE 20752
// exit ;
20750: GO 20838
// un := tmp [ rand ( 1 , tmp ) ] ;
20752: LD_ADDR_VAR 0 2
20756: PUSH
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 1
20764: PPUSH
20765: LD_VAR 0 3
20769: PPUSH
20770: CALL_OW 12
20774: ARRAY
20775: ST_TO_ADDR
// if Crawls ( un ) then
20776: LD_VAR 0 2
20780: PPUSH
20781: CALL_OW 318
20785: IFFALSE 20796
// ComWalk ( un ) ;
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_INT 9
20803: PPUSH
20804: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20808: LD_INT 28
20810: PPUSH
20811: LD_OWVAR 2
20815: PPUSH
20816: LD_INT 2
20818: PPUSH
20819: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20823: LD_INT 29
20825: PPUSH
20826: LD_OWVAR 2
20830: PPUSH
20831: LD_INT 2
20833: PPUSH
20834: CALL_OW 322
// end ;
20838: PPOPN 3
20840: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20841: LD_EXP 45
20845: PUSH
20846: LD_EXP 88
20850: AND
20851: IFFALSE 20962
20853: GO 20855
20855: DISABLE
20856: LD_INT 0
20858: PPUSH
20859: PPUSH
20860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20861: LD_ADDR_VAR 0 3
20865: PUSH
20866: LD_INT 22
20868: PUSH
20869: LD_OWVAR 2
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 25
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PPUSH
20892: CALL_OW 69
20896: ST_TO_ADDR
// if not tmp then
20897: LD_VAR 0 3
20901: NOT
20902: IFFALSE 20906
// exit ;
20904: GO 20962
// un := tmp [ rand ( 1 , tmp ) ] ;
20906: LD_ADDR_VAR 0 2
20910: PUSH
20911: LD_VAR 0 3
20915: PUSH
20916: LD_INT 1
20918: PPUSH
20919: LD_VAR 0 3
20923: PPUSH
20924: CALL_OW 12
20928: ARRAY
20929: ST_TO_ADDR
// if Crawls ( un ) then
20930: LD_VAR 0 2
20934: PPUSH
20935: CALL_OW 318
20939: IFFALSE 20950
// ComWalk ( un ) ;
20941: LD_VAR 0 2
20945: PPUSH
20946: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20950: LD_VAR 0 2
20954: PPUSH
20955: LD_INT 8
20957: PPUSH
20958: CALL_OW 336
// end ;
20962: PPOPN 3
20964: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20965: LD_EXP 45
20969: PUSH
20970: LD_EXP 89
20974: AND
20975: IFFALSE 21119
20977: GO 20979
20979: DISABLE
20980: LD_INT 0
20982: PPUSH
20983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20984: LD_ADDR_VAR 0 2
20988: PUSH
20989: LD_INT 22
20991: PUSH
20992: LD_OWVAR 2
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 21
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: LD_INT 34
21016: PUSH
21017: LD_INT 12
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 34
21026: PUSH
21027: LD_INT 51
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 34
21036: PUSH
21037: LD_INT 32
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: PPUSH
21055: CALL_OW 69
21059: ST_TO_ADDR
// if not tmp then
21060: LD_VAR 0 2
21064: NOT
21065: IFFALSE 21069
// exit ;
21067: GO 21119
// for i in tmp do
21069: LD_ADDR_VAR 0 1
21073: PUSH
21074: LD_VAR 0 2
21078: PUSH
21079: FOR_IN
21080: IFFALSE 21117
// if GetCargo ( i , mat_artifact ) = 0 then
21082: LD_VAR 0 1
21086: PPUSH
21087: LD_INT 4
21089: PPUSH
21090: CALL_OW 289
21094: PUSH
21095: LD_INT 0
21097: EQUAL
21098: IFFALSE 21115
// SetCargo ( i , mat_siberit , 100 ) ;
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_INT 3
21107: PPUSH
21108: LD_INT 100
21110: PPUSH
21111: CALL_OW 290
21115: GO 21079
21117: POP
21118: POP
// end ;
21119: PPOPN 2
21121: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21122: LD_EXP 45
21126: PUSH
21127: LD_EXP 90
21131: AND
21132: IFFALSE 21315
21134: GO 21136
21136: DISABLE
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21141: LD_ADDR_VAR 0 2
21145: PUSH
21146: LD_INT 22
21148: PUSH
21149: LD_OWVAR 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PPUSH
21158: CALL_OW 69
21162: ST_TO_ADDR
// if not tmp then
21163: LD_VAR 0 2
21167: NOT
21168: IFFALSE 21172
// exit ;
21170: GO 21315
// for i := 1 to 2 do
21172: LD_ADDR_VAR 0 1
21176: PUSH
21177: DOUBLE
21178: LD_INT 1
21180: DEC
21181: ST_TO_ADDR
21182: LD_INT 2
21184: PUSH
21185: FOR_TO
21186: IFFALSE 21313
// begin uc_side := your_side ;
21188: LD_ADDR_OWVAR 20
21192: PUSH
21193: LD_OWVAR 2
21197: ST_TO_ADDR
// uc_nation := nation_american ;
21198: LD_ADDR_OWVAR 21
21202: PUSH
21203: LD_INT 1
21205: ST_TO_ADDR
// vc_chassis := us_morphling ;
21206: LD_ADDR_OWVAR 37
21210: PUSH
21211: LD_INT 5
21213: ST_TO_ADDR
// vc_engine := engine_siberite ;
21214: LD_ADDR_OWVAR 39
21218: PUSH
21219: LD_INT 3
21221: ST_TO_ADDR
// vc_control := control_computer ;
21222: LD_ADDR_OWVAR 38
21226: PUSH
21227: LD_INT 3
21229: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21230: LD_ADDR_OWVAR 40
21234: PUSH
21235: LD_INT 10
21237: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21238: LD_VAR 0 2
21242: PUSH
21243: LD_INT 1
21245: ARRAY
21246: PPUSH
21247: CALL_OW 310
21251: NOT
21252: IFFALSE 21299
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21254: CALL_OW 45
21258: PPUSH
21259: LD_VAR 0 2
21263: PUSH
21264: LD_INT 1
21266: ARRAY
21267: PPUSH
21268: CALL_OW 250
21272: PPUSH
21273: LD_VAR 0 2
21277: PUSH
21278: LD_INT 1
21280: ARRAY
21281: PPUSH
21282: CALL_OW 251
21286: PPUSH
21287: LD_INT 12
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: CALL_OW 50
21297: GO 21311
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21299: CALL_OW 45
21303: PPUSH
21304: LD_INT 1
21306: PPUSH
21307: CALL_OW 51
// end ;
21311: GO 21185
21313: POP
21314: POP
// end ;
21315: PPOPN 2
21317: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21318: LD_EXP 45
21322: PUSH
21323: LD_EXP 91
21327: AND
21328: IFFALSE 21550
21330: GO 21332
21332: DISABLE
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
21339: PPUSH
21340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21341: LD_ADDR_VAR 0 6
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_OWVAR 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 21
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 23
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: PPUSH
21390: CALL_OW 69
21394: ST_TO_ADDR
// if not tmp then
21395: LD_VAR 0 6
21399: NOT
21400: IFFALSE 21404
// exit ;
21402: GO 21550
// s1 := rand ( 1 , 4 ) ;
21404: LD_ADDR_VAR 0 2
21408: PUSH
21409: LD_INT 1
21411: PPUSH
21412: LD_INT 4
21414: PPUSH
21415: CALL_OW 12
21419: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21420: LD_ADDR_VAR 0 4
21424: PUSH
21425: LD_VAR 0 6
21429: PUSH
21430: LD_INT 1
21432: ARRAY
21433: PPUSH
21434: LD_VAR 0 2
21438: PPUSH
21439: CALL_OW 259
21443: ST_TO_ADDR
// if s1 = 1 then
21444: LD_VAR 0 2
21448: PUSH
21449: LD_INT 1
21451: EQUAL
21452: IFFALSE 21472
// s2 := rand ( 2 , 4 ) else
21454: LD_ADDR_VAR 0 3
21458: PUSH
21459: LD_INT 2
21461: PPUSH
21462: LD_INT 4
21464: PPUSH
21465: CALL_OW 12
21469: ST_TO_ADDR
21470: GO 21480
// s2 := 1 ;
21472: LD_ADDR_VAR 0 3
21476: PUSH
21477: LD_INT 1
21479: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21480: LD_ADDR_VAR 0 5
21484: PUSH
21485: LD_VAR 0 6
21489: PUSH
21490: LD_INT 1
21492: ARRAY
21493: PPUSH
21494: LD_VAR 0 3
21498: PPUSH
21499: CALL_OW 259
21503: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21504: LD_VAR 0 6
21508: PUSH
21509: LD_INT 1
21511: ARRAY
21512: PPUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: LD_VAR 0 5
21522: PPUSH
21523: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21527: LD_VAR 0 6
21531: PUSH
21532: LD_INT 1
21534: ARRAY
21535: PPUSH
21536: LD_VAR 0 3
21540: PPUSH
21541: LD_VAR 0 4
21545: PPUSH
21546: CALL_OW 237
// end ;
21550: PPOPN 6
21552: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21553: LD_EXP 45
21557: PUSH
21558: LD_EXP 92
21562: AND
21563: IFFALSE 21642
21565: GO 21567
21567: DISABLE
21568: LD_INT 0
21570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21571: LD_ADDR_VAR 0 1
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_OWVAR 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 30
21590: PUSH
21591: LD_INT 3
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PPUSH
21602: CALL_OW 69
21606: ST_TO_ADDR
// if not tmp then
21607: LD_VAR 0 1
21611: NOT
21612: IFFALSE 21616
// exit ;
21614: GO 21642
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21616: LD_VAR 0 1
21620: PUSH
21621: LD_INT 1
21623: PPUSH
21624: LD_VAR 0 1
21628: PPUSH
21629: CALL_OW 12
21633: ARRAY
21634: PPUSH
21635: LD_INT 1
21637: PPUSH
21638: CALL_OW 234
// end ;
21642: PPOPN 1
21644: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21645: LD_EXP 45
21649: PUSH
21650: LD_EXP 93
21654: AND
21655: IFFALSE 21767
21657: GO 21659
21659: DISABLE
21660: LD_INT 0
21662: PPUSH
21663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21664: LD_ADDR_VAR 0 2
21668: PUSH
21669: LD_INT 22
21671: PUSH
21672: LD_OWVAR 2
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 30
21686: PUSH
21687: LD_INT 27
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 30
21696: PUSH
21697: LD_INT 26
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 28
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: ST_TO_ADDR
// if not tmp then
21729: LD_VAR 0 2
21733: NOT
21734: IFFALSE 21738
// exit ;
21736: GO 21767
// for i in tmp do
21738: LD_ADDR_VAR 0 1
21742: PUSH
21743: LD_VAR 0 2
21747: PUSH
21748: FOR_IN
21749: IFFALSE 21765
// SetLives ( i , 1 ) ;
21751: LD_VAR 0 1
21755: PPUSH
21756: LD_INT 1
21758: PPUSH
21759: CALL_OW 234
21763: GO 21748
21765: POP
21766: POP
// end ;
21767: PPOPN 2
21769: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21770: LD_EXP 45
21774: PUSH
21775: LD_EXP 94
21779: AND
21780: IFFALSE 22067
21782: GO 21784
21784: DISABLE
21785: LD_INT 0
21787: PPUSH
21788: PPUSH
21789: PPUSH
// begin i := rand ( 1 , 7 ) ;
21790: LD_ADDR_VAR 0 1
21794: PUSH
21795: LD_INT 1
21797: PPUSH
21798: LD_INT 7
21800: PPUSH
21801: CALL_OW 12
21805: ST_TO_ADDR
// case i of 1 :
21806: LD_VAR 0 1
21810: PUSH
21811: LD_INT 1
21813: DOUBLE
21814: EQUAL
21815: IFTRUE 21819
21817: GO 21829
21819: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21820: LD_STRING earthquake(getX(game), 0, 32)
21822: PPUSH
21823: CALL_OW 559
21827: GO 22067
21829: LD_INT 2
21831: DOUBLE
21832: EQUAL
21833: IFTRUE 21837
21835: GO 21851
21837: POP
// begin ToLua ( displayStucuk(); ) ;
21838: LD_STRING displayStucuk();
21840: PPUSH
21841: CALL_OW 559
// ResetFog ;
21845: CALL_OW 335
// end ; 3 :
21849: GO 22067
21851: LD_INT 3
21853: DOUBLE
21854: EQUAL
21855: IFTRUE 21859
21857: GO 21963
21859: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21860: LD_ADDR_VAR 0 2
21864: PUSH
21865: LD_INT 22
21867: PUSH
21868: LD_OWVAR 2
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 25
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PPUSH
21891: CALL_OW 69
21895: ST_TO_ADDR
// if not tmp then
21896: LD_VAR 0 2
21900: NOT
21901: IFFALSE 21905
// exit ;
21903: GO 22067
// un := tmp [ rand ( 1 , tmp ) ] ;
21905: LD_ADDR_VAR 0 3
21909: PUSH
21910: LD_VAR 0 2
21914: PUSH
21915: LD_INT 1
21917: PPUSH
21918: LD_VAR 0 2
21922: PPUSH
21923: CALL_OW 12
21927: ARRAY
21928: ST_TO_ADDR
// if Crawls ( un ) then
21929: LD_VAR 0 3
21933: PPUSH
21934: CALL_OW 318
21938: IFFALSE 21949
// ComWalk ( un ) ;
21940: LD_VAR 0 3
21944: PPUSH
21945: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21949: LD_VAR 0 3
21953: PPUSH
21954: LD_INT 8
21956: PPUSH
21957: CALL_OW 336
// end ; 4 :
21961: GO 22067
21963: LD_INT 4
21965: DOUBLE
21966: EQUAL
21967: IFTRUE 21971
21969: GO 22045
21971: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21972: LD_ADDR_VAR 0 2
21976: PUSH
21977: LD_INT 22
21979: PUSH
21980: LD_OWVAR 2
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 30
21991: PUSH
21992: LD_INT 29
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PPUSH
22003: CALL_OW 69
22007: ST_TO_ADDR
// if not tmp then
22008: LD_VAR 0 2
22012: NOT
22013: IFFALSE 22017
// exit ;
22015: GO 22067
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22017: LD_VAR 0 2
22021: PUSH
22022: LD_INT 1
22024: ARRAY
22025: PPUSH
22026: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22030: LD_VAR 0 2
22034: PUSH
22035: LD_INT 1
22037: ARRAY
22038: PPUSH
22039: CALL_OW 65
// end ; 5 .. 7 :
22043: GO 22067
22045: LD_INT 5
22047: DOUBLE
22048: GREATEREQUAL
22049: IFFALSE 22057
22051: LD_INT 7
22053: DOUBLE
22054: LESSEQUAL
22055: IFTRUE 22059
22057: GO 22066
22059: POP
// StreamSibBomb ; end ;
22060: CALL 18304 0 0
22064: GO 22067
22066: POP
// end ;
22067: PPOPN 3
22069: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22070: LD_EXP 45
22074: PUSH
22075: LD_EXP 95
22079: AND
22080: IFFALSE 22236
22082: GO 22084
22084: DISABLE
22085: LD_INT 0
22087: PPUSH
22088: PPUSH
22089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22090: LD_ADDR_VAR 0 2
22094: PUSH
22095: LD_INT 81
22097: PUSH
22098: LD_OWVAR 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: LD_INT 21
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 21
22122: PUSH
22123: LD_INT 2
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PPUSH
22139: CALL_OW 69
22143: ST_TO_ADDR
// if not tmp then
22144: LD_VAR 0 2
22148: NOT
22149: IFFALSE 22153
// exit ;
22151: GO 22236
// p := 0 ;
22153: LD_ADDR_VAR 0 3
22157: PUSH
22158: LD_INT 0
22160: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22161: LD_INT 35
22163: PPUSH
22164: CALL_OW 67
// p := p + 1 ;
22168: LD_ADDR_VAR 0 3
22172: PUSH
22173: LD_VAR 0 3
22177: PUSH
22178: LD_INT 1
22180: PLUS
22181: ST_TO_ADDR
// for i in tmp do
22182: LD_ADDR_VAR 0 1
22186: PUSH
22187: LD_VAR 0 2
22191: PUSH
22192: FOR_IN
22193: IFFALSE 22224
// if GetLives ( i ) < 1000 then
22195: LD_VAR 0 1
22199: PPUSH
22200: CALL_OW 256
22204: PUSH
22205: LD_INT 1000
22207: LESS
22208: IFFALSE 22222
// SetLives ( i , 1000 ) ;
22210: LD_VAR 0 1
22214: PPUSH
22215: LD_INT 1000
22217: PPUSH
22218: CALL_OW 234
22222: GO 22192
22224: POP
22225: POP
// until p > 20 ;
22226: LD_VAR 0 3
22230: PUSH
22231: LD_INT 20
22233: GREATER
22234: IFFALSE 22161
// end ;
22236: PPOPN 3
22238: END
// every 0 0$1 trigger StreamModeActive and sTime do
22239: LD_EXP 45
22243: PUSH
22244: LD_EXP 96
22248: AND
22249: IFFALSE 22284
22251: GO 22253
22253: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22254: LD_INT 28
22256: PPUSH
22257: LD_OWVAR 2
22261: PPUSH
22262: LD_INT 2
22264: PPUSH
22265: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22269: LD_INT 30
22271: PPUSH
22272: LD_OWVAR 2
22276: PPUSH
22277: LD_INT 2
22279: PPUSH
22280: CALL_OW 322
// end ;
22284: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22285: LD_EXP 45
22289: PUSH
22290: LD_EXP 97
22294: AND
22295: IFFALSE 22416
22297: GO 22299
22299: DISABLE
22300: LD_INT 0
22302: PPUSH
22303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22304: LD_ADDR_VAR 0 2
22308: PUSH
22309: LD_INT 22
22311: PUSH
22312: LD_OWVAR 2
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 21
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 3
22333: PUSH
22334: LD_INT 23
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: PPUSH
22353: CALL_OW 69
22357: ST_TO_ADDR
// if not tmp then
22358: LD_VAR 0 2
22362: NOT
22363: IFFALSE 22367
// exit ;
22365: GO 22416
// for i in tmp do
22367: LD_ADDR_VAR 0 1
22371: PUSH
22372: LD_VAR 0 2
22376: PUSH
22377: FOR_IN
22378: IFFALSE 22414
// begin if Crawls ( i ) then
22380: LD_VAR 0 1
22384: PPUSH
22385: CALL_OW 318
22389: IFFALSE 22400
// ComWalk ( i ) ;
22391: LD_VAR 0 1
22395: PPUSH
22396: CALL_OW 138
// SetClass ( i , 2 ) ;
22400: LD_VAR 0 1
22404: PPUSH
22405: LD_INT 2
22407: PPUSH
22408: CALL_OW 336
// end ;
22412: GO 22377
22414: POP
22415: POP
// end ;
22416: PPOPN 2
22418: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22419: LD_EXP 45
22423: PUSH
22424: LD_EXP 98
22428: AND
22429: IFFALSE 22717
22431: GO 22433
22433: DISABLE
22434: LD_INT 0
22436: PPUSH
22437: PPUSH
22438: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22439: LD_OWVAR 2
22443: PPUSH
22444: LD_INT 9
22446: PPUSH
22447: LD_INT 1
22449: PPUSH
22450: LD_INT 1
22452: PPUSH
22453: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22457: LD_INT 9
22459: PPUSH
22460: LD_OWVAR 2
22464: PPUSH
22465: CALL_OW 343
// uc_side := 9 ;
22469: LD_ADDR_OWVAR 20
22473: PUSH
22474: LD_INT 9
22476: ST_TO_ADDR
// uc_nation := 2 ;
22477: LD_ADDR_OWVAR 21
22481: PUSH
22482: LD_INT 2
22484: ST_TO_ADDR
// hc_name := Dark Warrior ;
22485: LD_ADDR_OWVAR 26
22489: PUSH
22490: LD_STRING Dark Warrior
22492: ST_TO_ADDR
// hc_gallery :=  ;
22493: LD_ADDR_OWVAR 33
22497: PUSH
22498: LD_STRING 
22500: ST_TO_ADDR
// hc_noskilllimit := true ;
22501: LD_ADDR_OWVAR 76
22505: PUSH
22506: LD_INT 1
22508: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22509: LD_ADDR_OWVAR 31
22513: PUSH
22514: LD_INT 30
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 30
22522: PUSH
22523: LD_INT 30
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: ST_TO_ADDR
// un := CreateHuman ;
22532: LD_ADDR_VAR 0 3
22536: PUSH
22537: CALL_OW 44
22541: ST_TO_ADDR
// hc_noskilllimit := false ;
22542: LD_ADDR_OWVAR 76
22546: PUSH
22547: LD_INT 0
22549: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22550: LD_VAR 0 3
22554: PPUSH
22555: LD_INT 1
22557: PPUSH
22558: CALL_OW 51
// ToLua ( playRanger() ) ;
22562: LD_STRING playRanger()
22564: PPUSH
22565: CALL_OW 559
// p := 0 ;
22569: LD_ADDR_VAR 0 2
22573: PUSH
22574: LD_INT 0
22576: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22577: LD_INT 35
22579: PPUSH
22580: CALL_OW 67
// p := p + 1 ;
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_VAR 0 2
22593: PUSH
22594: LD_INT 1
22596: PLUS
22597: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22598: LD_VAR 0 3
22602: PPUSH
22603: CALL_OW 256
22607: PUSH
22608: LD_INT 1000
22610: LESS
22611: IFFALSE 22625
// SetLives ( un , 1000 ) ;
22613: LD_VAR 0 3
22617: PPUSH
22618: LD_INT 1000
22620: PPUSH
22621: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22625: LD_VAR 0 3
22629: PPUSH
22630: LD_INT 81
22632: PUSH
22633: LD_OWVAR 2
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 91
22644: PUSH
22645: LD_VAR 0 3
22649: PUSH
22650: LD_INT 30
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PPUSH
22662: CALL_OW 69
22666: PPUSH
22667: LD_VAR 0 3
22671: PPUSH
22672: CALL_OW 74
22676: PPUSH
22677: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22681: LD_VAR 0 2
22685: PUSH
22686: LD_INT 80
22688: GREATER
22689: PUSH
22690: LD_VAR 0 3
22694: PPUSH
22695: CALL_OW 301
22699: OR
22700: IFFALSE 22577
// if un then
22702: LD_VAR 0 3
22706: IFFALSE 22717
// RemoveUnit ( un ) ;
22708: LD_VAR 0 3
22712: PPUSH
22713: CALL_OW 64
// end ;
22717: PPOPN 3
22719: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22720: LD_EXP 99
22724: IFFALSE 22840
22726: GO 22728
22728: DISABLE
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
22733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22734: LD_ADDR_VAR 0 2
22738: PUSH
22739: LD_INT 81
22741: PUSH
22742: LD_OWVAR 2
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 21
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PPUSH
22765: CALL_OW 69
22769: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22770: LD_STRING playComputer()
22772: PPUSH
22773: CALL_OW 559
// if not tmp then
22777: LD_VAR 0 2
22781: NOT
22782: IFFALSE 22786
// exit ;
22784: GO 22840
// for i in tmp do
22786: LD_ADDR_VAR 0 1
22790: PUSH
22791: LD_VAR 0 2
22795: PUSH
22796: FOR_IN
22797: IFFALSE 22838
// for j := 1 to 4 do
22799: LD_ADDR_VAR 0 3
22803: PUSH
22804: DOUBLE
22805: LD_INT 1
22807: DEC
22808: ST_TO_ADDR
22809: LD_INT 4
22811: PUSH
22812: FOR_TO
22813: IFFALSE 22834
// SetSkill ( i , j , 10 ) ;
22815: LD_VAR 0 1
22819: PPUSH
22820: LD_VAR 0 3
22824: PPUSH
22825: LD_INT 10
22827: PPUSH
22828: CALL_OW 237
22832: GO 22812
22834: POP
22835: POP
22836: GO 22796
22838: POP
22839: POP
// end ;
22840: PPOPN 3
22842: END
// every 0 0$1 trigger s30 do var i , tmp ;
22843: LD_EXP 100
22847: IFFALSE 22916
22849: GO 22851
22851: DISABLE
22852: LD_INT 0
22854: PPUSH
22855: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22856: LD_ADDR_VAR 0 2
22860: PUSH
22861: LD_INT 22
22863: PUSH
22864: LD_OWVAR 2
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PPUSH
22873: CALL_OW 69
22877: ST_TO_ADDR
// if not tmp then
22878: LD_VAR 0 2
22882: NOT
22883: IFFALSE 22887
// exit ;
22885: GO 22916
// for i in tmp do
22887: LD_ADDR_VAR 0 1
22891: PUSH
22892: LD_VAR 0 2
22896: PUSH
22897: FOR_IN
22898: IFFALSE 22914
// SetLives ( i , 300 ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: LD_INT 300
22907: PPUSH
22908: CALL_OW 234
22912: GO 22897
22914: POP
22915: POP
// end ;
22916: PPOPN 2
22918: END
// every 0 0$1 trigger s60 do var i , tmp ;
22919: LD_EXP 101
22923: IFFALSE 22992
22925: GO 22927
22927: DISABLE
22928: LD_INT 0
22930: PPUSH
22931: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22932: LD_ADDR_VAR 0 2
22936: PUSH
22937: LD_INT 22
22939: PUSH
22940: LD_OWVAR 2
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PPUSH
22949: CALL_OW 69
22953: ST_TO_ADDR
// if not tmp then
22954: LD_VAR 0 2
22958: NOT
22959: IFFALSE 22963
// exit ;
22961: GO 22992
// for i in tmp do
22963: LD_ADDR_VAR 0 1
22967: PUSH
22968: LD_VAR 0 2
22972: PUSH
22973: FOR_IN
22974: IFFALSE 22990
// SetLives ( i , 600 ) ;
22976: LD_VAR 0 1
22980: PPUSH
22981: LD_INT 600
22983: PPUSH
22984: CALL_OW 234
22988: GO 22973
22990: POP
22991: POP
// end ;
22992: PPOPN 2
22994: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22995: LD_INT 0
22997: PPUSH
// case cmd of 301 :
22998: LD_VAR 0 1
23002: PUSH
23003: LD_INT 301
23005: DOUBLE
23006: EQUAL
23007: IFTRUE 23011
23009: GO 23043
23011: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23012: LD_VAR 0 6
23016: PPUSH
23017: LD_VAR 0 7
23021: PPUSH
23022: LD_VAR 0 8
23026: PPUSH
23027: LD_VAR 0 4
23031: PPUSH
23032: LD_VAR 0 5
23036: PPUSH
23037: CALL 24252 0 5
23041: GO 23164
23043: LD_INT 302
23045: DOUBLE
23046: EQUAL
23047: IFTRUE 23051
23049: GO 23088
23051: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23052: LD_VAR 0 6
23056: PPUSH
23057: LD_VAR 0 7
23061: PPUSH
23062: LD_VAR 0 8
23066: PPUSH
23067: LD_VAR 0 9
23071: PPUSH
23072: LD_VAR 0 4
23076: PPUSH
23077: LD_VAR 0 5
23081: PPUSH
23082: CALL 24343 0 6
23086: GO 23164
23088: LD_INT 303
23090: DOUBLE
23091: EQUAL
23092: IFTRUE 23096
23094: GO 23133
23096: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23097: LD_VAR 0 6
23101: PPUSH
23102: LD_VAR 0 7
23106: PPUSH
23107: LD_VAR 0 8
23111: PPUSH
23112: LD_VAR 0 9
23116: PPUSH
23117: LD_VAR 0 4
23121: PPUSH
23122: LD_VAR 0 5
23126: PPUSH
23127: CALL 23169 0 6
23131: GO 23164
23133: LD_INT 304
23135: DOUBLE
23136: EQUAL
23137: IFTRUE 23141
23139: GO 23163
23141: POP
// hHackTeleport ( unit , x , y ) ; end ;
23142: LD_VAR 0 2
23146: PPUSH
23147: LD_VAR 0 4
23151: PPUSH
23152: LD_VAR 0 5
23156: PPUSH
23157: CALL 24936 0 3
23161: GO 23164
23163: POP
// end ;
23164: LD_VAR 0 12
23168: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23169: LD_INT 0
23171: PPUSH
23172: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23173: LD_VAR 0 1
23177: PUSH
23178: LD_INT 1
23180: LESS
23181: PUSH
23182: LD_VAR 0 1
23186: PUSH
23187: LD_INT 3
23189: GREATER
23190: OR
23191: PUSH
23192: LD_VAR 0 5
23196: PPUSH
23197: LD_VAR 0 6
23201: PPUSH
23202: CALL_OW 428
23206: OR
23207: IFFALSE 23211
// exit ;
23209: GO 23939
// uc_side := your_side ;
23211: LD_ADDR_OWVAR 20
23215: PUSH
23216: LD_OWVAR 2
23220: ST_TO_ADDR
// uc_nation := nation ;
23221: LD_ADDR_OWVAR 21
23225: PUSH
23226: LD_VAR 0 1
23230: ST_TO_ADDR
// bc_level = 1 ;
23231: LD_ADDR_OWVAR 43
23235: PUSH
23236: LD_INT 1
23238: ST_TO_ADDR
// case btype of 1 :
23239: LD_VAR 0 2
23243: PUSH
23244: LD_INT 1
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23263
23252: POP
// bc_type := b_depot ; 2 :
23253: LD_ADDR_OWVAR 42
23257: PUSH
23258: LD_INT 0
23260: ST_TO_ADDR
23261: GO 23883
23263: LD_INT 2
23265: DOUBLE
23266: EQUAL
23267: IFTRUE 23271
23269: GO 23282
23271: POP
// bc_type := b_warehouse ; 3 :
23272: LD_ADDR_OWVAR 42
23276: PUSH
23277: LD_INT 1
23279: ST_TO_ADDR
23280: GO 23883
23282: LD_INT 3
23284: DOUBLE
23285: EQUAL
23286: IFTRUE 23290
23288: GO 23301
23290: POP
// bc_type := b_lab ; 4 .. 9 :
23291: LD_ADDR_OWVAR 42
23295: PUSH
23296: LD_INT 6
23298: ST_TO_ADDR
23299: GO 23883
23301: LD_INT 4
23303: DOUBLE
23304: GREATEREQUAL
23305: IFFALSE 23313
23307: LD_INT 9
23309: DOUBLE
23310: LESSEQUAL
23311: IFTRUE 23315
23313: GO 23375
23315: POP
// begin bc_type := b_lab_half ;
23316: LD_ADDR_OWVAR 42
23320: PUSH
23321: LD_INT 7
23323: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23324: LD_ADDR_OWVAR 44
23328: PUSH
23329: LD_INT 10
23331: PUSH
23332: LD_INT 11
23334: PUSH
23335: LD_INT 12
23337: PUSH
23338: LD_INT 15
23340: PUSH
23341: LD_INT 14
23343: PUSH
23344: LD_INT 13
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: PUSH
23355: LD_VAR 0 2
23359: PUSH
23360: LD_INT 3
23362: MINUS
23363: ARRAY
23364: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23365: LD_ADDR_OWVAR 45
23369: PUSH
23370: LD_INT 9
23372: ST_TO_ADDR
// end ; 10 .. 13 :
23373: GO 23883
23375: LD_INT 10
23377: DOUBLE
23378: GREATEREQUAL
23379: IFFALSE 23387
23381: LD_INT 13
23383: DOUBLE
23384: LESSEQUAL
23385: IFTRUE 23389
23387: GO 23466
23389: POP
// begin bc_type := b_lab_full ;
23390: LD_ADDR_OWVAR 42
23394: PUSH
23395: LD_INT 8
23397: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23398: LD_ADDR_OWVAR 44
23402: PUSH
23403: LD_INT 10
23405: PUSH
23406: LD_INT 12
23408: PUSH
23409: LD_INT 14
23411: PUSH
23412: LD_INT 13
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: PUSH
23421: LD_VAR 0 2
23425: PUSH
23426: LD_INT 9
23428: MINUS
23429: ARRAY
23430: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23431: LD_ADDR_OWVAR 45
23435: PUSH
23436: LD_INT 11
23438: PUSH
23439: LD_INT 15
23441: PUSH
23442: LD_INT 12
23444: PUSH
23445: LD_INT 15
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: PUSH
23454: LD_VAR 0 2
23458: PUSH
23459: LD_INT 9
23461: MINUS
23462: ARRAY
23463: ST_TO_ADDR
// end ; 14 :
23464: GO 23883
23466: LD_INT 14
23468: DOUBLE
23469: EQUAL
23470: IFTRUE 23474
23472: GO 23485
23474: POP
// bc_type := b_workshop ; 15 :
23475: LD_ADDR_OWVAR 42
23479: PUSH
23480: LD_INT 2
23482: ST_TO_ADDR
23483: GO 23883
23485: LD_INT 15
23487: DOUBLE
23488: EQUAL
23489: IFTRUE 23493
23491: GO 23504
23493: POP
// bc_type := b_factory ; 16 :
23494: LD_ADDR_OWVAR 42
23498: PUSH
23499: LD_INT 3
23501: ST_TO_ADDR
23502: GO 23883
23504: LD_INT 16
23506: DOUBLE
23507: EQUAL
23508: IFTRUE 23512
23510: GO 23523
23512: POP
// bc_type := b_ext_gun ; 17 :
23513: LD_ADDR_OWVAR 42
23517: PUSH
23518: LD_INT 17
23520: ST_TO_ADDR
23521: GO 23883
23523: LD_INT 17
23525: DOUBLE
23526: EQUAL
23527: IFTRUE 23531
23529: GO 23559
23531: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23532: LD_ADDR_OWVAR 42
23536: PUSH
23537: LD_INT 19
23539: PUSH
23540: LD_INT 23
23542: PUSH
23543: LD_INT 19
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: PUSH
23551: LD_VAR 0 1
23555: ARRAY
23556: ST_TO_ADDR
23557: GO 23883
23559: LD_INT 18
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_ext_radar ; 19 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 20
23575: ST_TO_ADDR
23576: GO 23883
23578: LD_INT 19
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23597
23586: POP
// bc_type := b_ext_radio ; 20 :
23587: LD_ADDR_OWVAR 42
23591: PUSH
23592: LD_INT 22
23594: ST_TO_ADDR
23595: GO 23883
23597: LD_INT 20
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23616
23605: POP
// bc_type := b_ext_siberium ; 21 :
23606: LD_ADDR_OWVAR 42
23610: PUSH
23611: LD_INT 21
23613: ST_TO_ADDR
23614: GO 23883
23616: LD_INT 21
23618: DOUBLE
23619: EQUAL
23620: IFTRUE 23624
23622: GO 23635
23624: POP
// bc_type := b_ext_computer ; 22 :
23625: LD_ADDR_OWVAR 42
23629: PUSH
23630: LD_INT 24
23632: ST_TO_ADDR
23633: GO 23883
23635: LD_INT 22
23637: DOUBLE
23638: EQUAL
23639: IFTRUE 23643
23641: GO 23654
23643: POP
// bc_type := b_ext_track ; 23 :
23644: LD_ADDR_OWVAR 42
23648: PUSH
23649: LD_INT 16
23651: ST_TO_ADDR
23652: GO 23883
23654: LD_INT 23
23656: DOUBLE
23657: EQUAL
23658: IFTRUE 23662
23660: GO 23673
23662: POP
// bc_type := b_ext_laser ; 24 :
23663: LD_ADDR_OWVAR 42
23667: PUSH
23668: LD_INT 25
23670: ST_TO_ADDR
23671: GO 23883
23673: LD_INT 24
23675: DOUBLE
23676: EQUAL
23677: IFTRUE 23681
23679: GO 23692
23681: POP
// bc_type := b_control_tower ; 25 :
23682: LD_ADDR_OWVAR 42
23686: PUSH
23687: LD_INT 36
23689: ST_TO_ADDR
23690: GO 23883
23692: LD_INT 25
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23711
23700: POP
// bc_type := b_breastwork ; 26 :
23701: LD_ADDR_OWVAR 42
23705: PUSH
23706: LD_INT 31
23708: ST_TO_ADDR
23709: GO 23883
23711: LD_INT 26
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23730
23719: POP
// bc_type := b_bunker ; 27 :
23720: LD_ADDR_OWVAR 42
23724: PUSH
23725: LD_INT 32
23727: ST_TO_ADDR
23728: GO 23883
23730: LD_INT 27
23732: DOUBLE
23733: EQUAL
23734: IFTRUE 23738
23736: GO 23749
23738: POP
// bc_type := b_turret ; 28 :
23739: LD_ADDR_OWVAR 42
23743: PUSH
23744: LD_INT 33
23746: ST_TO_ADDR
23747: GO 23883
23749: LD_INT 28
23751: DOUBLE
23752: EQUAL
23753: IFTRUE 23757
23755: GO 23768
23757: POP
// bc_type := b_armoury ; 29 :
23758: LD_ADDR_OWVAR 42
23762: PUSH
23763: LD_INT 4
23765: ST_TO_ADDR
23766: GO 23883
23768: LD_INT 29
23770: DOUBLE
23771: EQUAL
23772: IFTRUE 23776
23774: GO 23787
23776: POP
// bc_type := b_barracks ; 30 :
23777: LD_ADDR_OWVAR 42
23781: PUSH
23782: LD_INT 5
23784: ST_TO_ADDR
23785: GO 23883
23787: LD_INT 30
23789: DOUBLE
23790: EQUAL
23791: IFTRUE 23795
23793: GO 23806
23795: POP
// bc_type := b_solar_power ; 31 :
23796: LD_ADDR_OWVAR 42
23800: PUSH
23801: LD_INT 27
23803: ST_TO_ADDR
23804: GO 23883
23806: LD_INT 31
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23825
23814: POP
// bc_type := b_oil_power ; 32 :
23815: LD_ADDR_OWVAR 42
23819: PUSH
23820: LD_INT 26
23822: ST_TO_ADDR
23823: GO 23883
23825: LD_INT 32
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23844
23833: POP
// bc_type := b_siberite_power ; 33 :
23834: LD_ADDR_OWVAR 42
23838: PUSH
23839: LD_INT 28
23841: ST_TO_ADDR
23842: GO 23883
23844: LD_INT 33
23846: DOUBLE
23847: EQUAL
23848: IFTRUE 23852
23850: GO 23863
23852: POP
// bc_type := b_oil_mine ; 34 :
23853: LD_ADDR_OWVAR 42
23857: PUSH
23858: LD_INT 29
23860: ST_TO_ADDR
23861: GO 23883
23863: LD_INT 34
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23871
23869: GO 23882
23871: POP
// bc_type := b_siberite_mine ; end ;
23872: LD_ADDR_OWVAR 42
23876: PUSH
23877: LD_INT 30
23879: ST_TO_ADDR
23880: GO 23883
23882: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23883: LD_ADDR_VAR 0 8
23887: PUSH
23888: LD_VAR 0 5
23892: PPUSH
23893: LD_VAR 0 6
23897: PPUSH
23898: LD_VAR 0 3
23902: PPUSH
23903: CALL_OW 47
23907: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23908: LD_OWVAR 42
23912: PUSH
23913: LD_INT 32
23915: PUSH
23916: LD_INT 33
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: IN
23923: IFFALSE 23939
// PlaceWeaponTurret ( b , weapon ) ;
23925: LD_VAR 0 8
23929: PPUSH
23930: LD_VAR 0 4
23934: PPUSH
23935: CALL_OW 431
// end ;
23939: LD_VAR 0 7
23943: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23944: LD_INT 0
23946: PPUSH
23947: PPUSH
23948: PPUSH
23949: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23950: LD_ADDR_VAR 0 4
23954: PUSH
23955: LD_INT 22
23957: PUSH
23958: LD_OWVAR 2
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 30
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 30
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PPUSH
23999: CALL_OW 69
24003: ST_TO_ADDR
// if not tmp then
24004: LD_VAR 0 4
24008: NOT
24009: IFFALSE 24013
// exit ;
24011: GO 24072
// for i in tmp do
24013: LD_ADDR_VAR 0 2
24017: PUSH
24018: LD_VAR 0 4
24022: PUSH
24023: FOR_IN
24024: IFFALSE 24070
// for j = 1 to 3 do
24026: LD_ADDR_VAR 0 3
24030: PUSH
24031: DOUBLE
24032: LD_INT 1
24034: DEC
24035: ST_TO_ADDR
24036: LD_INT 3
24038: PUSH
24039: FOR_TO
24040: IFFALSE 24066
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24042: LD_VAR 0 2
24046: PPUSH
24047: CALL_OW 274
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_INT 99999
24059: PPUSH
24060: CALL_OW 277
24064: GO 24039
24066: POP
24067: POP
24068: GO 24023
24070: POP
24071: POP
// end ;
24072: LD_VAR 0 1
24076: RET
// export function hHackSetLevel10 ; var i , j ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
24081: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24082: LD_ADDR_VAR 0 2
24086: PUSH
24087: LD_INT 21
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PPUSH
24097: CALL_OW 69
24101: PUSH
24102: FOR_IN
24103: IFFALSE 24155
// if IsSelected ( i ) then
24105: LD_VAR 0 2
24109: PPUSH
24110: CALL_OW 306
24114: IFFALSE 24153
// begin for j := 1 to 4 do
24116: LD_ADDR_VAR 0 3
24120: PUSH
24121: DOUBLE
24122: LD_INT 1
24124: DEC
24125: ST_TO_ADDR
24126: LD_INT 4
24128: PUSH
24129: FOR_TO
24130: IFFALSE 24151
// SetSkill ( i , j , 10 ) ;
24132: LD_VAR 0 2
24136: PPUSH
24137: LD_VAR 0 3
24141: PPUSH
24142: LD_INT 10
24144: PPUSH
24145: CALL_OW 237
24149: GO 24129
24151: POP
24152: POP
// end ;
24153: GO 24102
24155: POP
24156: POP
// end ;
24157: LD_VAR 0 1
24161: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24162: LD_INT 0
24164: PPUSH
24165: PPUSH
24166: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24167: LD_ADDR_VAR 0 2
24171: PUSH
24172: LD_INT 22
24174: PUSH
24175: LD_OWVAR 2
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 21
24186: PUSH
24187: LD_INT 1
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PPUSH
24198: CALL_OW 69
24202: PUSH
24203: FOR_IN
24204: IFFALSE 24245
// begin for j := 1 to 4 do
24206: LD_ADDR_VAR 0 3
24210: PUSH
24211: DOUBLE
24212: LD_INT 1
24214: DEC
24215: ST_TO_ADDR
24216: LD_INT 4
24218: PUSH
24219: FOR_TO
24220: IFFALSE 24241
// SetSkill ( i , j , 10 ) ;
24222: LD_VAR 0 2
24226: PPUSH
24227: LD_VAR 0 3
24231: PPUSH
24232: LD_INT 10
24234: PPUSH
24235: CALL_OW 237
24239: GO 24219
24241: POP
24242: POP
// end ;
24243: GO 24203
24245: POP
24246: POP
// end ;
24247: LD_VAR 0 1
24251: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24252: LD_INT 0
24254: PPUSH
// uc_side := your_side ;
24255: LD_ADDR_OWVAR 20
24259: PUSH
24260: LD_OWVAR 2
24264: ST_TO_ADDR
// uc_nation := nation ;
24265: LD_ADDR_OWVAR 21
24269: PUSH
24270: LD_VAR 0 1
24274: ST_TO_ADDR
// InitHc ;
24275: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24279: LD_INT 0
24281: PPUSH
24282: LD_VAR 0 2
24286: PPUSH
24287: LD_VAR 0 3
24291: PPUSH
24292: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24296: LD_VAR 0 4
24300: PPUSH
24301: LD_VAR 0 5
24305: PPUSH
24306: CALL_OW 428
24310: PUSH
24311: LD_INT 0
24313: EQUAL
24314: IFFALSE 24338
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24316: CALL_OW 44
24320: PPUSH
24321: LD_VAR 0 4
24325: PPUSH
24326: LD_VAR 0 5
24330: PPUSH
24331: LD_INT 1
24333: PPUSH
24334: CALL_OW 48
// end ;
24338: LD_VAR 0 6
24342: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24343: LD_INT 0
24345: PPUSH
24346: PPUSH
// uc_side := your_side ;
24347: LD_ADDR_OWVAR 20
24351: PUSH
24352: LD_OWVAR 2
24356: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24357: LD_VAR 0 1
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 3
24370: PUSH
24371: LD_INT 4
24373: PUSH
24374: LD_INT 5
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: IN
24384: IFFALSE 24396
// uc_nation := nation_american else
24386: LD_ADDR_OWVAR 21
24390: PUSH
24391: LD_INT 1
24393: ST_TO_ADDR
24394: GO 24439
// if chassis in [ 11 , 12 , 13 , 14 ] then
24396: LD_VAR 0 1
24400: PUSH
24401: LD_INT 11
24403: PUSH
24404: LD_INT 12
24406: PUSH
24407: LD_INT 13
24409: PUSH
24410: LD_INT 14
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: IN
24419: IFFALSE 24431
// uc_nation := nation_arabian else
24421: LD_ADDR_OWVAR 21
24425: PUSH
24426: LD_INT 2
24428: ST_TO_ADDR
24429: GO 24439
// uc_nation := nation_russian ;
24431: LD_ADDR_OWVAR 21
24435: PUSH
24436: LD_INT 3
24438: ST_TO_ADDR
// vc_chassis := chassis ;
24439: LD_ADDR_OWVAR 37
24443: PUSH
24444: LD_VAR 0 1
24448: ST_TO_ADDR
// vc_engine := engine ;
24449: LD_ADDR_OWVAR 39
24453: PUSH
24454: LD_VAR 0 2
24458: ST_TO_ADDR
// vc_control := control ;
24459: LD_ADDR_OWVAR 38
24463: PUSH
24464: LD_VAR 0 3
24468: ST_TO_ADDR
// vc_weapon := weapon ;
24469: LD_ADDR_OWVAR 40
24473: PUSH
24474: LD_VAR 0 4
24478: ST_TO_ADDR
// un := CreateVehicle ;
24479: LD_ADDR_VAR 0 8
24483: PUSH
24484: CALL_OW 45
24488: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24489: LD_VAR 0 8
24493: PPUSH
24494: LD_INT 0
24496: PPUSH
24497: LD_INT 5
24499: PPUSH
24500: CALL_OW 12
24504: PPUSH
24505: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24509: LD_VAR 0 8
24513: PPUSH
24514: LD_VAR 0 5
24518: PPUSH
24519: LD_VAR 0 6
24523: PPUSH
24524: LD_INT 1
24526: PPUSH
24527: CALL_OW 48
// end ;
24531: LD_VAR 0 7
24535: RET
// export hInvincible ; every 1 do
24536: GO 24538
24538: DISABLE
// hInvincible := [ ] ;
24539: LD_ADDR_EXP 102
24543: PUSH
24544: EMPTY
24545: ST_TO_ADDR
24546: END
// every 10 do var i ;
24547: GO 24549
24549: DISABLE
24550: LD_INT 0
24552: PPUSH
// begin enable ;
24553: ENABLE
// if not hInvincible then
24554: LD_EXP 102
24558: NOT
24559: IFFALSE 24563
// exit ;
24561: GO 24607
// for i in hInvincible do
24563: LD_ADDR_VAR 0 1
24567: PUSH
24568: LD_EXP 102
24572: PUSH
24573: FOR_IN
24574: IFFALSE 24605
// if GetLives ( i ) < 1000 then
24576: LD_VAR 0 1
24580: PPUSH
24581: CALL_OW 256
24585: PUSH
24586: LD_INT 1000
24588: LESS
24589: IFFALSE 24603
// SetLives ( i , 1000 ) ;
24591: LD_VAR 0 1
24595: PPUSH
24596: LD_INT 1000
24598: PPUSH
24599: CALL_OW 234
24603: GO 24573
24605: POP
24606: POP
// end ;
24607: PPOPN 1
24609: END
// export function hHackInvincible ; var i ; begin
24610: LD_INT 0
24612: PPUSH
24613: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24614: LD_ADDR_VAR 0 2
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: LD_INT 21
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 21
24634: PUSH
24635: LD_INT 2
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: PPUSH
24647: CALL_OW 69
24651: PUSH
24652: FOR_IN
24653: IFFALSE 24714
// if IsSelected ( i ) then
24655: LD_VAR 0 2
24659: PPUSH
24660: CALL_OW 306
24664: IFFALSE 24712
// begin if i in hInvincible then
24666: LD_VAR 0 2
24670: PUSH
24671: LD_EXP 102
24675: IN
24676: IFFALSE 24696
// hInvincible := hInvincible diff i else
24678: LD_ADDR_EXP 102
24682: PUSH
24683: LD_EXP 102
24687: PUSH
24688: LD_VAR 0 2
24692: DIFF
24693: ST_TO_ADDR
24694: GO 24712
// hInvincible := hInvincible union i ;
24696: LD_ADDR_EXP 102
24700: PUSH
24701: LD_EXP 102
24705: PUSH
24706: LD_VAR 0 2
24710: UNION
24711: ST_TO_ADDR
// end ;
24712: GO 24652
24714: POP
24715: POP
// end ;
24716: LD_VAR 0 1
24720: RET
// export function hHackInvisible ; var i , j ; begin
24721: LD_INT 0
24723: PPUSH
24724: PPUSH
24725: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24726: LD_ADDR_VAR 0 2
24730: PUSH
24731: LD_INT 21
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PPUSH
24741: CALL_OW 69
24745: PUSH
24746: FOR_IN
24747: IFFALSE 24771
// if IsSelected ( i ) then
24749: LD_VAR 0 2
24753: PPUSH
24754: CALL_OW 306
24758: IFFALSE 24769
// ComForceInvisible ( i ) ;
24760: LD_VAR 0 2
24764: PPUSH
24765: CALL_OW 496
24769: GO 24746
24771: POP
24772: POP
// end ;
24773: LD_VAR 0 1
24777: RET
// export function hHackChangeYourSide ; begin
24778: LD_INT 0
24780: PPUSH
// if your_side = 8 then
24781: LD_OWVAR 2
24785: PUSH
24786: LD_INT 8
24788: EQUAL
24789: IFFALSE 24801
// your_side := 0 else
24791: LD_ADDR_OWVAR 2
24795: PUSH
24796: LD_INT 0
24798: ST_TO_ADDR
24799: GO 24815
// your_side := your_side + 1 ;
24801: LD_ADDR_OWVAR 2
24805: PUSH
24806: LD_OWVAR 2
24810: PUSH
24811: LD_INT 1
24813: PLUS
24814: ST_TO_ADDR
// end ;
24815: LD_VAR 0 1
24819: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24820: LD_INT 0
24822: PPUSH
24823: PPUSH
24824: PPUSH
// for i in all_units do
24825: LD_ADDR_VAR 0 2
24829: PUSH
24830: LD_OWVAR 3
24834: PUSH
24835: FOR_IN
24836: IFFALSE 24914
// if IsSelected ( i ) then
24838: LD_VAR 0 2
24842: PPUSH
24843: CALL_OW 306
24847: IFFALSE 24912
// begin j := GetSide ( i ) ;
24849: LD_ADDR_VAR 0 3
24853: PUSH
24854: LD_VAR 0 2
24858: PPUSH
24859: CALL_OW 255
24863: ST_TO_ADDR
// if j = 8 then
24864: LD_VAR 0 3
24868: PUSH
24869: LD_INT 8
24871: EQUAL
24872: IFFALSE 24884
// j := 0 else
24874: LD_ADDR_VAR 0 3
24878: PUSH
24879: LD_INT 0
24881: ST_TO_ADDR
24882: GO 24898
// j := j + 1 ;
24884: LD_ADDR_VAR 0 3
24888: PUSH
24889: LD_VAR 0 3
24893: PUSH
24894: LD_INT 1
24896: PLUS
24897: ST_TO_ADDR
// SetSide ( i , j ) ;
24898: LD_VAR 0 2
24902: PPUSH
24903: LD_VAR 0 3
24907: PPUSH
24908: CALL_OW 235
// end ;
24912: GO 24835
24914: POP
24915: POP
// end ;
24916: LD_VAR 0 1
24920: RET
// export function hHackFog ; begin
24921: LD_INT 0
24923: PPUSH
// FogOff ( true ) ;
24924: LD_INT 1
24926: PPUSH
24927: CALL_OW 344
// end ;
24931: LD_VAR 0 1
24935: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24936: LD_INT 0
24938: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_VAR 0 2
24948: PPUSH
24949: LD_VAR 0 3
24953: PPUSH
24954: LD_INT 1
24956: PPUSH
24957: LD_INT 1
24959: PPUSH
24960: CALL_OW 483
// CenterOnXY ( x , y ) ;
24964: LD_VAR 0 2
24968: PPUSH
24969: LD_VAR 0 3
24973: PPUSH
24974: CALL_OW 84
// end ;
24978: LD_VAR 0 4
24982: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24983: LD_INT 0
24985: PPUSH
24986: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24987: LD_VAR 0 1
24991: NOT
24992: PUSH
24993: LD_VAR 0 2
24997: PPUSH
24998: LD_VAR 0 3
25002: PPUSH
25003: CALL_OW 488
25007: NOT
25008: OR
25009: PUSH
25010: LD_VAR 0 1
25014: PPUSH
25015: CALL_OW 266
25019: PUSH
25020: LD_INT 3
25022: NONEQUAL
25023: PUSH
25024: LD_VAR 0 1
25028: PPUSH
25029: CALL_OW 247
25033: PUSH
25034: LD_INT 1
25036: EQUAL
25037: NOT
25038: AND
25039: OR
25040: IFFALSE 25044
// exit ;
25042: GO 25193
// if GetType ( factory ) = unit_human then
25044: LD_VAR 0 1
25048: PPUSH
25049: CALL_OW 247
25053: PUSH
25054: LD_INT 1
25056: EQUAL
25057: IFFALSE 25074
// factory := IsInUnit ( factory ) ;
25059: LD_ADDR_VAR 0 1
25063: PUSH
25064: LD_VAR 0 1
25068: PPUSH
25069: CALL_OW 310
25073: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25074: LD_VAR 0 1
25078: PPUSH
25079: CALL_OW 266
25083: PUSH
25084: LD_INT 3
25086: NONEQUAL
25087: IFFALSE 25091
// exit ;
25089: GO 25193
// if HexInfo ( x , y ) = factory then
25091: LD_VAR 0 2
25095: PPUSH
25096: LD_VAR 0 3
25100: PPUSH
25101: CALL_OW 428
25105: PUSH
25106: LD_VAR 0 1
25110: EQUAL
25111: IFFALSE 25138
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25113: LD_ADDR_EXP 103
25117: PUSH
25118: LD_EXP 103
25122: PPUSH
25123: LD_VAR 0 1
25127: PPUSH
25128: LD_INT 0
25130: PPUSH
25131: CALL_OW 1
25135: ST_TO_ADDR
25136: GO 25189
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25138: LD_ADDR_EXP 103
25142: PUSH
25143: LD_EXP 103
25147: PPUSH
25148: LD_VAR 0 1
25152: PPUSH
25153: LD_VAR 0 1
25157: PPUSH
25158: CALL_OW 255
25162: PUSH
25163: LD_VAR 0 1
25167: PUSH
25168: LD_VAR 0 2
25172: PUSH
25173: LD_VAR 0 3
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: PPUSH
25184: CALL_OW 1
25188: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25189: CALL 25198 0 0
// end ;
25193: LD_VAR 0 4
25197: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25198: LD_INT 0
25200: PPUSH
25201: PPUSH
25202: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25203: LD_STRING resetFactoryWaypoint();
25205: PPUSH
25206: CALL_OW 559
// if factoryWaypoints then
25210: LD_EXP 103
25214: IFFALSE 25340
// begin list := PrepareArray ( factoryWaypoints ) ;
25216: LD_ADDR_VAR 0 3
25220: PUSH
25221: LD_EXP 103
25225: PPUSH
25226: CALL 72800 0 1
25230: ST_TO_ADDR
// for i := 1 to list do
25231: LD_ADDR_VAR 0 2
25235: PUSH
25236: DOUBLE
25237: LD_INT 1
25239: DEC
25240: ST_TO_ADDR
25241: LD_VAR 0 3
25245: PUSH
25246: FOR_TO
25247: IFFALSE 25338
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25249: LD_STRING setFactoryWaypointXY(
25251: PUSH
25252: LD_VAR 0 3
25256: PUSH
25257: LD_VAR 0 2
25261: ARRAY
25262: PUSH
25263: LD_INT 1
25265: ARRAY
25266: STR
25267: PUSH
25268: LD_STRING ,
25270: STR
25271: PUSH
25272: LD_VAR 0 3
25276: PUSH
25277: LD_VAR 0 2
25281: ARRAY
25282: PUSH
25283: LD_INT 2
25285: ARRAY
25286: STR
25287: PUSH
25288: LD_STRING ,
25290: STR
25291: PUSH
25292: LD_VAR 0 3
25296: PUSH
25297: LD_VAR 0 2
25301: ARRAY
25302: PUSH
25303: LD_INT 3
25305: ARRAY
25306: STR
25307: PUSH
25308: LD_STRING ,
25310: STR
25311: PUSH
25312: LD_VAR 0 3
25316: PUSH
25317: LD_VAR 0 2
25321: ARRAY
25322: PUSH
25323: LD_INT 4
25325: ARRAY
25326: STR
25327: PUSH
25328: LD_STRING )
25330: STR
25331: PPUSH
25332: CALL_OW 559
25336: GO 25246
25338: POP
25339: POP
// end ; end ;
25340: LD_VAR 0 1
25344: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25345: LD_INT 0
25347: PPUSH
// if HexInfo ( x , y ) = warehouse then
25348: LD_VAR 0 2
25352: PPUSH
25353: LD_VAR 0 3
25357: PPUSH
25358: CALL_OW 428
25362: PUSH
25363: LD_VAR 0 1
25367: EQUAL
25368: IFFALSE 25395
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25370: LD_ADDR_EXP 104
25374: PUSH
25375: LD_EXP 104
25379: PPUSH
25380: LD_VAR 0 1
25384: PPUSH
25385: LD_INT 0
25387: PPUSH
25388: CALL_OW 1
25392: ST_TO_ADDR
25393: GO 25446
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25395: LD_ADDR_EXP 104
25399: PUSH
25400: LD_EXP 104
25404: PPUSH
25405: LD_VAR 0 1
25409: PPUSH
25410: LD_VAR 0 1
25414: PPUSH
25415: CALL_OW 255
25419: PUSH
25420: LD_VAR 0 1
25424: PUSH
25425: LD_VAR 0 2
25429: PUSH
25430: LD_VAR 0 3
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: PPUSH
25441: CALL_OW 1
25445: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25446: CALL 25455 0 0
// end ;
25450: LD_VAR 0 4
25454: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25455: LD_INT 0
25457: PPUSH
25458: PPUSH
25459: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25460: LD_STRING resetWarehouseGatheringPoints();
25462: PPUSH
25463: CALL_OW 559
// if warehouseGatheringPoints then
25467: LD_EXP 104
25471: IFFALSE 25597
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25473: LD_ADDR_VAR 0 3
25477: PUSH
25478: LD_EXP 104
25482: PPUSH
25483: CALL 72800 0 1
25487: ST_TO_ADDR
// for i := 1 to list do
25488: LD_ADDR_VAR 0 2
25492: PUSH
25493: DOUBLE
25494: LD_INT 1
25496: DEC
25497: ST_TO_ADDR
25498: LD_VAR 0 3
25502: PUSH
25503: FOR_TO
25504: IFFALSE 25595
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25506: LD_STRING setWarehouseGatheringPointXY(
25508: PUSH
25509: LD_VAR 0 3
25513: PUSH
25514: LD_VAR 0 2
25518: ARRAY
25519: PUSH
25520: LD_INT 1
25522: ARRAY
25523: STR
25524: PUSH
25525: LD_STRING ,
25527: STR
25528: PUSH
25529: LD_VAR 0 3
25533: PUSH
25534: LD_VAR 0 2
25538: ARRAY
25539: PUSH
25540: LD_INT 2
25542: ARRAY
25543: STR
25544: PUSH
25545: LD_STRING ,
25547: STR
25548: PUSH
25549: LD_VAR 0 3
25553: PUSH
25554: LD_VAR 0 2
25558: ARRAY
25559: PUSH
25560: LD_INT 3
25562: ARRAY
25563: STR
25564: PUSH
25565: LD_STRING ,
25567: STR
25568: PUSH
25569: LD_VAR 0 3
25573: PUSH
25574: LD_VAR 0 2
25578: ARRAY
25579: PUSH
25580: LD_INT 4
25582: ARRAY
25583: STR
25584: PUSH
25585: LD_STRING )
25587: STR
25588: PPUSH
25589: CALL_OW 559
25593: GO 25503
25595: POP
25596: POP
// end ; end ;
25597: LD_VAR 0 1
25601: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25602: LD_EXP 104
25606: IFFALSE 26291
25608: GO 25610
25610: DISABLE
25611: LD_INT 0
25613: PPUSH
25614: PPUSH
25615: PPUSH
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
25620: PPUSH
25621: PPUSH
// begin enable ;
25622: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25623: LD_ADDR_VAR 0 3
25627: PUSH
25628: LD_EXP 104
25632: PPUSH
25633: CALL 72800 0 1
25637: ST_TO_ADDR
// if not list then
25638: LD_VAR 0 3
25642: NOT
25643: IFFALSE 25647
// exit ;
25645: GO 26291
// for i := 1 to list do
25647: LD_ADDR_VAR 0 1
25651: PUSH
25652: DOUBLE
25653: LD_INT 1
25655: DEC
25656: ST_TO_ADDR
25657: LD_VAR 0 3
25661: PUSH
25662: FOR_TO
25663: IFFALSE 26289
// begin depot := list [ i ] [ 2 ] ;
25665: LD_ADDR_VAR 0 8
25669: PUSH
25670: LD_VAR 0 3
25674: PUSH
25675: LD_VAR 0 1
25679: ARRAY
25680: PUSH
25681: LD_INT 2
25683: ARRAY
25684: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25685: LD_ADDR_VAR 0 5
25689: PUSH
25690: LD_VAR 0 3
25694: PUSH
25695: LD_VAR 0 1
25699: ARRAY
25700: PUSH
25701: LD_INT 1
25703: ARRAY
25704: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25705: LD_VAR 0 8
25709: PPUSH
25710: CALL_OW 301
25714: PUSH
25715: LD_VAR 0 5
25719: PUSH
25720: LD_VAR 0 8
25724: PPUSH
25725: CALL_OW 255
25729: NONEQUAL
25730: OR
25731: IFFALSE 25760
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25733: LD_ADDR_EXP 104
25737: PUSH
25738: LD_EXP 104
25742: PPUSH
25743: LD_VAR 0 8
25747: PPUSH
25748: LD_INT 0
25750: PPUSH
25751: CALL_OW 1
25755: ST_TO_ADDR
// exit ;
25756: POP
25757: POP
25758: GO 26291
// end ; x := list [ i ] [ 3 ] ;
25760: LD_ADDR_VAR 0 6
25764: PUSH
25765: LD_VAR 0 3
25769: PUSH
25770: LD_VAR 0 1
25774: ARRAY
25775: PUSH
25776: LD_INT 3
25778: ARRAY
25779: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25780: LD_ADDR_VAR 0 7
25784: PUSH
25785: LD_VAR 0 3
25789: PUSH
25790: LD_VAR 0 1
25794: ARRAY
25795: PUSH
25796: LD_INT 4
25798: ARRAY
25799: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25800: LD_ADDR_VAR 0 9
25804: PUSH
25805: LD_VAR 0 6
25809: PPUSH
25810: LD_VAR 0 7
25814: PPUSH
25815: LD_INT 16
25817: PPUSH
25818: CALL 71388 0 3
25822: ST_TO_ADDR
// if not cratesNearbyPoint then
25823: LD_VAR 0 9
25827: NOT
25828: IFFALSE 25834
// exit ;
25830: POP
25831: POP
25832: GO 26291
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25834: LD_ADDR_VAR 0 4
25838: PUSH
25839: LD_INT 22
25841: PUSH
25842: LD_VAR 0 5
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 3
25853: PUSH
25854: LD_INT 60
25856: PUSH
25857: EMPTY
25858: LIST
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 91
25866: PUSH
25867: LD_VAR 0 8
25871: PUSH
25872: LD_INT 6
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 2
25882: PUSH
25883: LD_INT 25
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 25
25895: PUSH
25896: LD_INT 16
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: PPUSH
25914: CALL_OW 69
25918: PUSH
25919: LD_VAR 0 8
25923: PPUSH
25924: CALL_OW 313
25928: PPUSH
25929: LD_INT 3
25931: PUSH
25932: LD_INT 60
25934: PUSH
25935: EMPTY
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: LD_INT 25
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 25
25957: PUSH
25958: LD_INT 16
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: LIST
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PPUSH
25974: CALL_OW 72
25978: UNION
25979: ST_TO_ADDR
// if tmp then
25980: LD_VAR 0 4
25984: IFFALSE 26064
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25986: LD_ADDR_VAR 0 4
25990: PUSH
25991: LD_VAR 0 4
25995: PPUSH
25996: LD_INT 3
25998: PPUSH
25999: CALL 69357 0 2
26003: ST_TO_ADDR
// for j in tmp do
26004: LD_ADDR_VAR 0 2
26008: PUSH
26009: LD_VAR 0 4
26013: PUSH
26014: FOR_IN
26015: IFFALSE 26058
// begin if IsInUnit ( j ) then
26017: LD_VAR 0 2
26021: PPUSH
26022: CALL_OW 310
26026: IFFALSE 26037
// ComExit ( j ) ;
26028: LD_VAR 0 2
26032: PPUSH
26033: CALL 69440 0 1
// AddComCollect ( j , x , y ) ;
26037: LD_VAR 0 2
26041: PPUSH
26042: LD_VAR 0 6
26046: PPUSH
26047: LD_VAR 0 7
26051: PPUSH
26052: CALL_OW 177
// end ;
26056: GO 26014
26058: POP
26059: POP
// exit ;
26060: POP
26061: POP
26062: GO 26291
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26064: LD_ADDR_VAR 0 4
26068: PUSH
26069: LD_INT 22
26071: PUSH
26072: LD_VAR 0 5
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 91
26083: PUSH
26084: LD_VAR 0 8
26088: PUSH
26089: LD_INT 8
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 2
26099: PUSH
26100: LD_INT 34
26102: PUSH
26103: LD_INT 12
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 34
26112: PUSH
26113: LD_INT 51
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 34
26122: PUSH
26123: LD_INT 32
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 34
26132: PUSH
26133: LD_INT 89
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: LIST
26151: PPUSH
26152: CALL_OW 69
26156: ST_TO_ADDR
// if tmp then
26157: LD_VAR 0 4
26161: IFFALSE 26287
// begin for j in tmp do
26163: LD_ADDR_VAR 0 2
26167: PUSH
26168: LD_VAR 0 4
26172: PUSH
26173: FOR_IN
26174: IFFALSE 26285
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26176: LD_VAR 0 2
26180: PPUSH
26181: CALL_OW 262
26185: PUSH
26186: LD_INT 3
26188: EQUAL
26189: PUSH
26190: LD_VAR 0 2
26194: PPUSH
26195: CALL_OW 261
26199: PUSH
26200: LD_INT 20
26202: GREATER
26203: OR
26204: PUSH
26205: LD_VAR 0 2
26209: PPUSH
26210: CALL_OW 314
26214: NOT
26215: AND
26216: PUSH
26217: LD_VAR 0 2
26221: PPUSH
26222: CALL_OW 263
26226: PUSH
26227: LD_INT 1
26229: NONEQUAL
26230: PUSH
26231: LD_VAR 0 2
26235: PPUSH
26236: CALL_OW 311
26240: OR
26241: AND
26242: IFFALSE 26283
// begin ComCollect ( j , x , y ) ;
26244: LD_VAR 0 2
26248: PPUSH
26249: LD_VAR 0 6
26253: PPUSH
26254: LD_VAR 0 7
26258: PPUSH
26259: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26263: LD_VAR 0 2
26267: PPUSH
26268: LD_VAR 0 8
26272: PPUSH
26273: CALL_OW 172
// exit ;
26277: POP
26278: POP
26279: POP
26280: POP
26281: GO 26291
// end ;
26283: GO 26173
26285: POP
26286: POP
// end ; end ;
26287: GO 25662
26289: POP
26290: POP
// end ; end_of_file
26291: PPOPN 9
26293: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26294: LD_VAR 0 1
26298: PUSH
26299: LD_INT 200
26301: DOUBLE
26302: GREATEREQUAL
26303: IFFALSE 26311
26305: LD_INT 299
26307: DOUBLE
26308: LESSEQUAL
26309: IFTRUE 26313
26311: GO 26345
26313: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26314: LD_VAR 0 1
26318: PPUSH
26319: LD_VAR 0 2
26323: PPUSH
26324: LD_VAR 0 3
26328: PPUSH
26329: LD_VAR 0 4
26333: PPUSH
26334: LD_VAR 0 5
26338: PPUSH
26339: CALL 26833 0 5
26343: GO 26422
26345: LD_INT 300
26347: DOUBLE
26348: GREATEREQUAL
26349: IFFALSE 26357
26351: LD_INT 399
26353: DOUBLE
26354: LESSEQUAL
26355: IFTRUE 26359
26357: GO 26421
26359: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26360: LD_VAR 0 1
26364: PPUSH
26365: LD_VAR 0 2
26369: PPUSH
26370: LD_VAR 0 3
26374: PPUSH
26375: LD_VAR 0 4
26379: PPUSH
26380: LD_VAR 0 5
26384: PPUSH
26385: LD_VAR 0 6
26389: PPUSH
26390: LD_VAR 0 7
26394: PPUSH
26395: LD_VAR 0 8
26399: PPUSH
26400: LD_VAR 0 9
26404: PPUSH
26405: LD_VAR 0 10
26409: PPUSH
26410: LD_VAR 0 11
26414: PPUSH
26415: CALL 22995 0 11
26419: GO 26422
26421: POP
// end ;
26422: PPOPN 11
26424: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26425: LD_VAR 0 1
26429: PPUSH
26430: LD_VAR 0 2
26434: PPUSH
26435: LD_VAR 0 3
26439: PPUSH
26440: LD_VAR 0 4
26444: PPUSH
26445: LD_VAR 0 5
26449: PPUSH
26450: CALL 26569 0 5
// end ; end_of_file
26454: PPOPN 5
26456: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26457: LD_INT 0
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26463: LD_VAR 0 1
26467: PPUSH
26468: CALL_OW 264
26472: PUSH
26473: LD_INT 91
26475: EQUAL
26476: IFFALSE 26548
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26478: LD_INT 68
26480: PPUSH
26481: LD_VAR 0 1
26485: PPUSH
26486: CALL_OW 255
26490: PPUSH
26491: CALL_OW 321
26495: PUSH
26496: LD_INT 2
26498: EQUAL
26499: IFFALSE 26511
// eff := 70 else
26501: LD_ADDR_VAR 0 4
26505: PUSH
26506: LD_INT 70
26508: ST_TO_ADDR
26509: GO 26519
// eff := 30 ;
26511: LD_ADDR_VAR 0 4
26515: PUSH
26516: LD_INT 30
26518: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26519: LD_VAR 0 1
26523: PPUSH
26524: CALL_OW 250
26528: PPUSH
26529: LD_VAR 0 1
26533: PPUSH
26534: CALL_OW 251
26538: PPUSH
26539: LD_VAR 0 4
26543: PPUSH
26544: CALL_OW 495
// end ; end ;
26548: LD_VAR 0 2
26552: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26553: LD_INT 0
26555: PPUSH
// end ;
26556: LD_VAR 0 4
26560: RET
// export function SOS_Command ( cmd ) ; begin
26561: LD_INT 0
26563: PPUSH
// end ;
26564: LD_VAR 0 2
26568: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26569: LD_INT 0
26571: PPUSH
// end ;
26572: LD_VAR 0 6
26576: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26577: LD_INT 0
26579: PPUSH
26580: PPUSH
// if not vehicle or not factory then
26581: LD_VAR 0 1
26585: NOT
26586: PUSH
26587: LD_VAR 0 2
26591: NOT
26592: OR
26593: IFFALSE 26597
// exit ;
26595: GO 26828
// if factoryWaypoints >= factory then
26597: LD_EXP 103
26601: PUSH
26602: LD_VAR 0 2
26606: GREATEREQUAL
26607: IFFALSE 26828
// if factoryWaypoints [ factory ] then
26609: LD_EXP 103
26613: PUSH
26614: LD_VAR 0 2
26618: ARRAY
26619: IFFALSE 26828
// begin if GetControl ( vehicle ) = control_manual then
26621: LD_VAR 0 1
26625: PPUSH
26626: CALL_OW 263
26630: PUSH
26631: LD_INT 1
26633: EQUAL
26634: IFFALSE 26715
// begin driver := IsDrivenBy ( vehicle ) ;
26636: LD_ADDR_VAR 0 4
26640: PUSH
26641: LD_VAR 0 1
26645: PPUSH
26646: CALL_OW 311
26650: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26651: LD_VAR 0 4
26655: PPUSH
26656: LD_EXP 103
26660: PUSH
26661: LD_VAR 0 2
26665: ARRAY
26666: PUSH
26667: LD_INT 3
26669: ARRAY
26670: PPUSH
26671: LD_EXP 103
26675: PUSH
26676: LD_VAR 0 2
26680: ARRAY
26681: PUSH
26682: LD_INT 4
26684: ARRAY
26685: PPUSH
26686: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26690: LD_VAR 0 4
26694: PPUSH
26695: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26699: LD_VAR 0 4
26703: PPUSH
26704: LD_VAR 0 2
26708: PPUSH
26709: CALL_OW 180
// end else
26713: GO 26828
// if GetControl ( vehicle ) = control_remote then
26715: LD_VAR 0 1
26719: PPUSH
26720: CALL_OW 263
26724: PUSH
26725: LD_INT 2
26727: EQUAL
26728: IFFALSE 26789
// begin wait ( 0 0$2 ) ;
26730: LD_INT 70
26732: PPUSH
26733: CALL_OW 67
// if Connect ( vehicle ) then
26737: LD_VAR 0 1
26741: PPUSH
26742: CALL 39659 0 1
26746: IFFALSE 26787
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26748: LD_VAR 0 1
26752: PPUSH
26753: LD_EXP 103
26757: PUSH
26758: LD_VAR 0 2
26762: ARRAY
26763: PUSH
26764: LD_INT 3
26766: ARRAY
26767: PPUSH
26768: LD_EXP 103
26772: PUSH
26773: LD_VAR 0 2
26777: ARRAY
26778: PUSH
26779: LD_INT 4
26781: ARRAY
26782: PPUSH
26783: CALL_OW 171
// end else
26787: GO 26828
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26789: LD_VAR 0 1
26793: PPUSH
26794: LD_EXP 103
26798: PUSH
26799: LD_VAR 0 2
26803: ARRAY
26804: PUSH
26805: LD_INT 3
26807: ARRAY
26808: PPUSH
26809: LD_EXP 103
26813: PUSH
26814: LD_VAR 0 2
26818: ARRAY
26819: PUSH
26820: LD_INT 4
26822: ARRAY
26823: PPUSH
26824: CALL_OW 171
// end ; end ;
26828: LD_VAR 0 3
26832: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26833: LD_INT 0
26835: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26836: LD_VAR 0 1
26840: PUSH
26841: LD_INT 250
26843: EQUAL
26844: PUSH
26845: LD_VAR 0 2
26849: PPUSH
26850: CALL_OW 264
26854: PUSH
26855: LD_INT 81
26857: EQUAL
26858: AND
26859: IFFALSE 26880
// MinerPlaceMine ( unit , x , y ) ;
26861: LD_VAR 0 2
26865: PPUSH
26866: LD_VAR 0 4
26870: PPUSH
26871: LD_VAR 0 5
26875: PPUSH
26876: CALL 29870 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26880: LD_VAR 0 1
26884: PUSH
26885: LD_INT 251
26887: EQUAL
26888: PUSH
26889: LD_VAR 0 2
26893: PPUSH
26894: CALL_OW 264
26898: PUSH
26899: LD_INT 81
26901: EQUAL
26902: AND
26903: IFFALSE 26924
// MinerDetonateMine ( unit , x , y ) ;
26905: LD_VAR 0 2
26909: PPUSH
26910: LD_VAR 0 4
26914: PPUSH
26915: LD_VAR 0 5
26919: PPUSH
26920: CALL 30145 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26924: LD_VAR 0 1
26928: PUSH
26929: LD_INT 252
26931: EQUAL
26932: PUSH
26933: LD_VAR 0 2
26937: PPUSH
26938: CALL_OW 264
26942: PUSH
26943: LD_INT 81
26945: EQUAL
26946: AND
26947: IFFALSE 26968
// MinerCreateMinefield ( unit , x , y ) ;
26949: LD_VAR 0 2
26953: PPUSH
26954: LD_VAR 0 4
26958: PPUSH
26959: LD_VAR 0 5
26963: PPUSH
26964: CALL 30562 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26968: LD_VAR 0 1
26972: PUSH
26973: LD_INT 253
26975: EQUAL
26976: PUSH
26977: LD_VAR 0 2
26981: PPUSH
26982: CALL_OW 257
26986: PUSH
26987: LD_INT 5
26989: EQUAL
26990: AND
26991: IFFALSE 27012
// ComBinocular ( unit , x , y ) ;
26993: LD_VAR 0 2
26997: PPUSH
26998: LD_VAR 0 4
27002: PPUSH
27003: LD_VAR 0 5
27007: PPUSH
27008: CALL 30931 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27012: LD_VAR 0 1
27016: PUSH
27017: LD_INT 254
27019: EQUAL
27020: PUSH
27021: LD_VAR 0 2
27025: PPUSH
27026: CALL_OW 264
27030: PUSH
27031: LD_INT 99
27033: EQUAL
27034: AND
27035: PUSH
27036: LD_VAR 0 3
27040: PPUSH
27041: CALL_OW 263
27045: PUSH
27046: LD_INT 3
27048: EQUAL
27049: AND
27050: IFFALSE 27066
// HackDestroyVehicle ( unit , selectedUnit ) ;
27052: LD_VAR 0 2
27056: PPUSH
27057: LD_VAR 0 3
27061: PPUSH
27062: CALL 29234 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27066: LD_VAR 0 1
27070: PUSH
27071: LD_INT 255
27073: EQUAL
27074: PUSH
27075: LD_VAR 0 2
27079: PPUSH
27080: CALL_OW 264
27084: PUSH
27085: LD_INT 14
27087: PUSH
27088: LD_INT 53
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: IN
27095: AND
27096: PUSH
27097: LD_VAR 0 4
27101: PPUSH
27102: LD_VAR 0 5
27106: PPUSH
27107: CALL_OW 488
27111: AND
27112: IFFALSE 27136
// CutTreeXYR ( unit , x , y , 12 ) ;
27114: LD_VAR 0 2
27118: PPUSH
27119: LD_VAR 0 4
27123: PPUSH
27124: LD_VAR 0 5
27128: PPUSH
27129: LD_INT 12
27131: PPUSH
27132: CALL 27231 0 4
// if cmd = 256 then
27136: LD_VAR 0 1
27140: PUSH
27141: LD_INT 256
27143: EQUAL
27144: IFFALSE 27165
// SetFactoryWaypoint ( unit , x , y ) ;
27146: LD_VAR 0 2
27150: PPUSH
27151: LD_VAR 0 4
27155: PPUSH
27156: LD_VAR 0 5
27160: PPUSH
27161: CALL 24983 0 3
// if cmd = 257 then
27165: LD_VAR 0 1
27169: PUSH
27170: LD_INT 257
27172: EQUAL
27173: IFFALSE 27194
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27175: LD_VAR 0 2
27179: PPUSH
27180: LD_VAR 0 4
27184: PPUSH
27185: LD_VAR 0 5
27189: PPUSH
27190: CALL 25345 0 3
// if cmd = 258 then
27194: LD_VAR 0 1
27198: PUSH
27199: LD_INT 258
27201: EQUAL
27202: IFFALSE 27226
// BurnTreeXYR ( unit , x , y , 8 ) ;
27204: LD_VAR 0 2
27208: PPUSH
27209: LD_VAR 0 4
27213: PPUSH
27214: LD_VAR 0 5
27218: PPUSH
27219: LD_INT 8
27221: PPUSH
27222: CALL 27625 0 4
// end ;
27226: LD_VAR 0 6
27230: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27231: LD_INT 0
27233: PPUSH
27234: PPUSH
27235: PPUSH
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
27240: PPUSH
27241: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL_OW 302
27251: NOT
27252: PUSH
27253: LD_VAR 0 2
27257: PPUSH
27258: LD_VAR 0 3
27262: PPUSH
27263: CALL_OW 488
27267: NOT
27268: OR
27269: PUSH
27270: LD_VAR 0 4
27274: NOT
27275: OR
27276: IFFALSE 27280
// exit ;
27278: GO 27620
// list := [ ] ;
27280: LD_ADDR_VAR 0 13
27284: PUSH
27285: EMPTY
27286: ST_TO_ADDR
// if x - r < 0 then
27287: LD_VAR 0 2
27291: PUSH
27292: LD_VAR 0 4
27296: MINUS
27297: PUSH
27298: LD_INT 0
27300: LESS
27301: IFFALSE 27313
// min_x := 0 else
27303: LD_ADDR_VAR 0 7
27307: PUSH
27308: LD_INT 0
27310: ST_TO_ADDR
27311: GO 27329
// min_x := x - r ;
27313: LD_ADDR_VAR 0 7
27317: PUSH
27318: LD_VAR 0 2
27322: PUSH
27323: LD_VAR 0 4
27327: MINUS
27328: ST_TO_ADDR
// if y - r < 0 then
27329: LD_VAR 0 3
27333: PUSH
27334: LD_VAR 0 4
27338: MINUS
27339: PUSH
27340: LD_INT 0
27342: LESS
27343: IFFALSE 27355
// min_y := 0 else
27345: LD_ADDR_VAR 0 8
27349: PUSH
27350: LD_INT 0
27352: ST_TO_ADDR
27353: GO 27371
// min_y := y - r ;
27355: LD_ADDR_VAR 0 8
27359: PUSH
27360: LD_VAR 0 3
27364: PUSH
27365: LD_VAR 0 4
27369: MINUS
27370: ST_TO_ADDR
// max_x := x + r ;
27371: LD_ADDR_VAR 0 9
27375: PUSH
27376: LD_VAR 0 2
27380: PUSH
27381: LD_VAR 0 4
27385: PLUS
27386: ST_TO_ADDR
// max_y := y + r ;
27387: LD_ADDR_VAR 0 10
27391: PUSH
27392: LD_VAR 0 3
27396: PUSH
27397: LD_VAR 0 4
27401: PLUS
27402: ST_TO_ADDR
// for _x = min_x to max_x do
27403: LD_ADDR_VAR 0 11
27407: PUSH
27408: DOUBLE
27409: LD_VAR 0 7
27413: DEC
27414: ST_TO_ADDR
27415: LD_VAR 0 9
27419: PUSH
27420: FOR_TO
27421: IFFALSE 27538
// for _y = min_y to max_y do
27423: LD_ADDR_VAR 0 12
27427: PUSH
27428: DOUBLE
27429: LD_VAR 0 8
27433: DEC
27434: ST_TO_ADDR
27435: LD_VAR 0 10
27439: PUSH
27440: FOR_TO
27441: IFFALSE 27534
// begin if not ValidHex ( _x , _y ) then
27443: LD_VAR 0 11
27447: PPUSH
27448: LD_VAR 0 12
27452: PPUSH
27453: CALL_OW 488
27457: NOT
27458: IFFALSE 27462
// continue ;
27460: GO 27440
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27462: LD_VAR 0 11
27466: PPUSH
27467: LD_VAR 0 12
27471: PPUSH
27472: CALL_OW 351
27476: PUSH
27477: LD_VAR 0 11
27481: PPUSH
27482: LD_VAR 0 12
27486: PPUSH
27487: CALL_OW 554
27491: AND
27492: IFFALSE 27532
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27494: LD_ADDR_VAR 0 13
27498: PUSH
27499: LD_VAR 0 13
27503: PPUSH
27504: LD_VAR 0 13
27508: PUSH
27509: LD_INT 1
27511: PLUS
27512: PPUSH
27513: LD_VAR 0 11
27517: PUSH
27518: LD_VAR 0 12
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PPUSH
27527: CALL_OW 2
27531: ST_TO_ADDR
// end ;
27532: GO 27440
27534: POP
27535: POP
27536: GO 27420
27538: POP
27539: POP
// if not list then
27540: LD_VAR 0 13
27544: NOT
27545: IFFALSE 27549
// exit ;
27547: GO 27620
// for i in list do
27549: LD_ADDR_VAR 0 6
27553: PUSH
27554: LD_VAR 0 13
27558: PUSH
27559: FOR_IN
27560: IFFALSE 27618
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27562: LD_VAR 0 1
27566: PPUSH
27567: LD_STRING M
27569: PUSH
27570: LD_VAR 0 6
27574: PUSH
27575: LD_INT 1
27577: ARRAY
27578: PUSH
27579: LD_VAR 0 6
27583: PUSH
27584: LD_INT 2
27586: ARRAY
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: PUSH
27609: EMPTY
27610: LIST
27611: PPUSH
27612: CALL_OW 447
27616: GO 27559
27618: POP
27619: POP
// end ;
27620: LD_VAR 0 5
27624: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27625: LD_INT 0
27627: PPUSH
27628: PPUSH
27629: PPUSH
27630: PPUSH
27631: PPUSH
27632: PPUSH
27633: PPUSH
27634: PPUSH
27635: PPUSH
27636: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27637: LD_VAR 0 1
27641: PPUSH
27642: CALL_OW 302
27646: NOT
27647: PUSH
27648: LD_VAR 0 2
27652: PPUSH
27653: LD_VAR 0 3
27657: PPUSH
27658: CALL_OW 488
27662: NOT
27663: OR
27664: PUSH
27665: LD_VAR 0 4
27669: NOT
27670: OR
27671: IFFALSE 27675
// exit ;
27673: GO 28188
// list := [ ] ;
27675: LD_ADDR_VAR 0 13
27679: PUSH
27680: EMPTY
27681: ST_TO_ADDR
// if x - r < 0 then
27682: LD_VAR 0 2
27686: PUSH
27687: LD_VAR 0 4
27691: MINUS
27692: PUSH
27693: LD_INT 0
27695: LESS
27696: IFFALSE 27708
// min_x := 0 else
27698: LD_ADDR_VAR 0 7
27702: PUSH
27703: LD_INT 0
27705: ST_TO_ADDR
27706: GO 27724
// min_x := x - r ;
27708: LD_ADDR_VAR 0 7
27712: PUSH
27713: LD_VAR 0 2
27717: PUSH
27718: LD_VAR 0 4
27722: MINUS
27723: ST_TO_ADDR
// if y - r < 0 then
27724: LD_VAR 0 3
27728: PUSH
27729: LD_VAR 0 4
27733: MINUS
27734: PUSH
27735: LD_INT 0
27737: LESS
27738: IFFALSE 27750
// min_y := 0 else
27740: LD_ADDR_VAR 0 8
27744: PUSH
27745: LD_INT 0
27747: ST_TO_ADDR
27748: GO 27766
// min_y := y - r ;
27750: LD_ADDR_VAR 0 8
27754: PUSH
27755: LD_VAR 0 3
27759: PUSH
27760: LD_VAR 0 4
27764: MINUS
27765: ST_TO_ADDR
// max_x := x + r ;
27766: LD_ADDR_VAR 0 9
27770: PUSH
27771: LD_VAR 0 2
27775: PUSH
27776: LD_VAR 0 4
27780: PLUS
27781: ST_TO_ADDR
// max_y := y + r ;
27782: LD_ADDR_VAR 0 10
27786: PUSH
27787: LD_VAR 0 3
27791: PUSH
27792: LD_VAR 0 4
27796: PLUS
27797: ST_TO_ADDR
// for _x = min_x to max_x do
27798: LD_ADDR_VAR 0 11
27802: PUSH
27803: DOUBLE
27804: LD_VAR 0 7
27808: DEC
27809: ST_TO_ADDR
27810: LD_VAR 0 9
27814: PUSH
27815: FOR_TO
27816: IFFALSE 27933
// for _y = min_y to max_y do
27818: LD_ADDR_VAR 0 12
27822: PUSH
27823: DOUBLE
27824: LD_VAR 0 8
27828: DEC
27829: ST_TO_ADDR
27830: LD_VAR 0 10
27834: PUSH
27835: FOR_TO
27836: IFFALSE 27929
// begin if not ValidHex ( _x , _y ) then
27838: LD_VAR 0 11
27842: PPUSH
27843: LD_VAR 0 12
27847: PPUSH
27848: CALL_OW 488
27852: NOT
27853: IFFALSE 27857
// continue ;
27855: GO 27835
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27857: LD_VAR 0 11
27861: PPUSH
27862: LD_VAR 0 12
27866: PPUSH
27867: CALL_OW 351
27871: PUSH
27872: LD_VAR 0 11
27876: PPUSH
27877: LD_VAR 0 12
27881: PPUSH
27882: CALL_OW 554
27886: AND
27887: IFFALSE 27927
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27889: LD_ADDR_VAR 0 13
27893: PUSH
27894: LD_VAR 0 13
27898: PPUSH
27899: LD_VAR 0 13
27903: PUSH
27904: LD_INT 1
27906: PLUS
27907: PPUSH
27908: LD_VAR 0 11
27912: PUSH
27913: LD_VAR 0 12
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PPUSH
27922: CALL_OW 2
27926: ST_TO_ADDR
// end ;
27927: GO 27835
27929: POP
27930: POP
27931: GO 27815
27933: POP
27934: POP
// if not list then
27935: LD_VAR 0 13
27939: NOT
27940: IFFALSE 27944
// exit ;
27942: GO 28188
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27944: LD_ADDR_VAR 0 13
27948: PUSH
27949: LD_VAR 0 1
27953: PPUSH
27954: LD_VAR 0 13
27958: PPUSH
27959: LD_INT 1
27961: PPUSH
27962: LD_INT 1
27964: PPUSH
27965: CALL 36801 0 4
27969: ST_TO_ADDR
// ComStop ( flame ) ;
27970: LD_VAR 0 1
27974: PPUSH
27975: CALL_OW 141
// for i in list do
27979: LD_ADDR_VAR 0 6
27983: PUSH
27984: LD_VAR 0 13
27988: PUSH
27989: FOR_IN
27990: IFFALSE 28021
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27992: LD_VAR 0 1
27996: PPUSH
27997: LD_VAR 0 6
28001: PUSH
28002: LD_INT 1
28004: ARRAY
28005: PPUSH
28006: LD_VAR 0 6
28010: PUSH
28011: LD_INT 2
28013: ARRAY
28014: PPUSH
28015: CALL_OW 176
28019: GO 27989
28021: POP
28022: POP
// repeat wait ( 0 0$1 ) ;
28023: LD_INT 35
28025: PPUSH
28026: CALL_OW 67
// task := GetTaskList ( flame ) ;
28030: LD_ADDR_VAR 0 14
28034: PUSH
28035: LD_VAR 0 1
28039: PPUSH
28040: CALL_OW 437
28044: ST_TO_ADDR
// if not task then
28045: LD_VAR 0 14
28049: NOT
28050: IFFALSE 28054
// exit ;
28052: GO 28188
// if task [ 1 ] [ 1 ] <> | then
28054: LD_VAR 0 14
28058: PUSH
28059: LD_INT 1
28061: ARRAY
28062: PUSH
28063: LD_INT 1
28065: ARRAY
28066: PUSH
28067: LD_STRING |
28069: NONEQUAL
28070: IFFALSE 28074
// exit ;
28072: GO 28188
// _x := task [ 1 ] [ 2 ] ;
28074: LD_ADDR_VAR 0 11
28078: PUSH
28079: LD_VAR 0 14
28083: PUSH
28084: LD_INT 1
28086: ARRAY
28087: PUSH
28088: LD_INT 2
28090: ARRAY
28091: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28092: LD_ADDR_VAR 0 12
28096: PUSH
28097: LD_VAR 0 14
28101: PUSH
28102: LD_INT 1
28104: ARRAY
28105: PUSH
28106: LD_INT 3
28108: ARRAY
28109: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28110: LD_VAR 0 11
28114: PPUSH
28115: LD_VAR 0 12
28119: PPUSH
28120: CALL_OW 351
28124: NOT
28125: PUSH
28126: LD_VAR 0 11
28130: PPUSH
28131: LD_VAR 0 12
28135: PPUSH
28136: CALL_OW 554
28140: NOT
28141: OR
28142: IFFALSE 28176
// begin task := Delete ( task , 1 ) ;
28144: LD_ADDR_VAR 0 14
28148: PUSH
28149: LD_VAR 0 14
28153: PPUSH
28154: LD_INT 1
28156: PPUSH
28157: CALL_OW 3
28161: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28162: LD_VAR 0 1
28166: PPUSH
28167: LD_VAR 0 14
28171: PPUSH
28172: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28176: LD_VAR 0 1
28180: PPUSH
28181: CALL_OW 314
28185: NOT
28186: IFFALSE 28023
// end ;
28188: LD_VAR 0 5
28192: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28193: LD_EXP 106
28197: NOT
28198: IFFALSE 28248
28200: GO 28202
28202: DISABLE
// begin initHack := true ;
28203: LD_ADDR_EXP 106
28207: PUSH
28208: LD_INT 1
28210: ST_TO_ADDR
// hackTanks := [ ] ;
28211: LD_ADDR_EXP 107
28215: PUSH
28216: EMPTY
28217: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28218: LD_ADDR_EXP 108
28222: PUSH
28223: EMPTY
28224: ST_TO_ADDR
// hackLimit := 3 ;
28225: LD_ADDR_EXP 109
28229: PUSH
28230: LD_INT 3
28232: ST_TO_ADDR
// hackDist := 12 ;
28233: LD_ADDR_EXP 110
28237: PUSH
28238: LD_INT 12
28240: ST_TO_ADDR
// hackCounter := [ ] ;
28241: LD_ADDR_EXP 111
28245: PUSH
28246: EMPTY
28247: ST_TO_ADDR
// end ;
28248: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28249: LD_EXP 106
28253: PUSH
28254: LD_INT 34
28256: PUSH
28257: LD_INT 99
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PPUSH
28264: CALL_OW 69
28268: AND
28269: IFFALSE 28522
28271: GO 28273
28273: DISABLE
28274: LD_INT 0
28276: PPUSH
28277: PPUSH
// begin enable ;
28278: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28279: LD_ADDR_VAR 0 1
28283: PUSH
28284: LD_INT 34
28286: PUSH
28287: LD_INT 99
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PPUSH
28294: CALL_OW 69
28298: PUSH
28299: FOR_IN
28300: IFFALSE 28520
// begin if not i in hackTanks then
28302: LD_VAR 0 1
28306: PUSH
28307: LD_EXP 107
28311: IN
28312: NOT
28313: IFFALSE 28396
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28315: LD_ADDR_EXP 107
28319: PUSH
28320: LD_EXP 107
28324: PPUSH
28325: LD_EXP 107
28329: PUSH
28330: LD_INT 1
28332: PLUS
28333: PPUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: CALL_OW 1
28343: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28344: LD_ADDR_EXP 108
28348: PUSH
28349: LD_EXP 108
28353: PPUSH
28354: LD_EXP 108
28358: PUSH
28359: LD_INT 1
28361: PLUS
28362: PPUSH
28363: EMPTY
28364: PPUSH
28365: CALL_OW 1
28369: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28370: LD_ADDR_EXP 111
28374: PUSH
28375: LD_EXP 111
28379: PPUSH
28380: LD_EXP 111
28384: PUSH
28385: LD_INT 1
28387: PLUS
28388: PPUSH
28389: EMPTY
28390: PPUSH
28391: CALL_OW 1
28395: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28396: LD_VAR 0 1
28400: PPUSH
28401: CALL_OW 302
28405: NOT
28406: IFFALSE 28419
// begin HackUnlinkAll ( i ) ;
28408: LD_VAR 0 1
28412: PPUSH
28413: CALL 28525 0 1
// continue ;
28417: GO 28299
// end ; HackCheckCapturedStatus ( i ) ;
28419: LD_VAR 0 1
28423: PPUSH
28424: CALL 28968 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28428: LD_ADDR_VAR 0 2
28432: PUSH
28433: LD_INT 81
28435: PUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 255
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 33
28452: PUSH
28453: LD_INT 3
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 91
28462: PUSH
28463: LD_VAR 0 1
28467: PUSH
28468: LD_EXP 110
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 50
28480: PUSH
28481: EMPTY
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: PPUSH
28490: CALL_OW 69
28494: ST_TO_ADDR
// if not tmp then
28495: LD_VAR 0 2
28499: NOT
28500: IFFALSE 28504
// continue ;
28502: GO 28299
// HackLink ( i , tmp ) ;
28504: LD_VAR 0 1
28508: PPUSH
28509: LD_VAR 0 2
28513: PPUSH
28514: CALL 28661 0 2
// end ;
28518: GO 28299
28520: POP
28521: POP
// end ;
28522: PPOPN 2
28524: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28525: LD_INT 0
28527: PPUSH
28528: PPUSH
28529: PPUSH
// if not hack in hackTanks then
28530: LD_VAR 0 1
28534: PUSH
28535: LD_EXP 107
28539: IN
28540: NOT
28541: IFFALSE 28545
// exit ;
28543: GO 28656
// index := GetElementIndex ( hackTanks , hack ) ;
28545: LD_ADDR_VAR 0 4
28549: PUSH
28550: LD_EXP 107
28554: PPUSH
28555: LD_VAR 0 1
28559: PPUSH
28560: CALL 36098 0 2
28564: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28565: LD_EXP 108
28569: PUSH
28570: LD_VAR 0 4
28574: ARRAY
28575: IFFALSE 28656
// begin for i in hackTanksCaptured [ index ] do
28577: LD_ADDR_VAR 0 3
28581: PUSH
28582: LD_EXP 108
28586: PUSH
28587: LD_VAR 0 4
28591: ARRAY
28592: PUSH
28593: FOR_IN
28594: IFFALSE 28620
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28596: LD_VAR 0 3
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: PPUSH
28605: LD_VAR 0 3
28609: PUSH
28610: LD_INT 2
28612: ARRAY
28613: PPUSH
28614: CALL_OW 235
28618: GO 28593
28620: POP
28621: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28622: LD_ADDR_EXP 108
28626: PUSH
28627: LD_EXP 108
28631: PPUSH
28632: LD_VAR 0 4
28636: PPUSH
28637: EMPTY
28638: PPUSH
28639: CALL_OW 1
28643: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28644: LD_VAR 0 1
28648: PPUSH
28649: LD_INT 0
28651: PPUSH
28652: CALL_OW 505
// end ; end ;
28656: LD_VAR 0 2
28660: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28661: LD_INT 0
28663: PPUSH
28664: PPUSH
28665: PPUSH
// if not hack in hackTanks or not vehicles then
28666: LD_VAR 0 1
28670: PUSH
28671: LD_EXP 107
28675: IN
28676: NOT
28677: PUSH
28678: LD_VAR 0 2
28682: NOT
28683: OR
28684: IFFALSE 28688
// exit ;
28686: GO 28963
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28688: LD_ADDR_VAR 0 2
28692: PUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: LD_VAR 0 2
28702: PPUSH
28703: LD_INT 1
28705: PPUSH
28706: LD_INT 1
28708: PPUSH
28709: CALL 36748 0 4
28713: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28714: LD_ADDR_VAR 0 5
28718: PUSH
28719: LD_EXP 107
28723: PPUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL 36098 0 2
28733: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28734: LD_EXP 108
28738: PUSH
28739: LD_VAR 0 5
28743: ARRAY
28744: PUSH
28745: LD_EXP 109
28749: LESS
28750: IFFALSE 28939
// begin for i := 1 to vehicles do
28752: LD_ADDR_VAR 0 4
28756: PUSH
28757: DOUBLE
28758: LD_INT 1
28760: DEC
28761: ST_TO_ADDR
28762: LD_VAR 0 2
28766: PUSH
28767: FOR_TO
28768: IFFALSE 28937
// begin if hackTanksCaptured [ index ] = hackLimit then
28770: LD_EXP 108
28774: PUSH
28775: LD_VAR 0 5
28779: ARRAY
28780: PUSH
28781: LD_EXP 109
28785: EQUAL
28786: IFFALSE 28790
// break ;
28788: GO 28937
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28790: LD_ADDR_EXP 111
28794: PUSH
28795: LD_EXP 111
28799: PPUSH
28800: LD_VAR 0 5
28804: PPUSH
28805: LD_EXP 111
28809: PUSH
28810: LD_VAR 0 5
28814: ARRAY
28815: PUSH
28816: LD_INT 1
28818: PLUS
28819: PPUSH
28820: CALL_OW 1
28824: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28825: LD_ADDR_EXP 108
28829: PUSH
28830: LD_EXP 108
28834: PPUSH
28835: LD_VAR 0 5
28839: PUSH
28840: LD_EXP 108
28844: PUSH
28845: LD_VAR 0 5
28849: ARRAY
28850: PUSH
28851: LD_INT 1
28853: PLUS
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PPUSH
28859: LD_VAR 0 2
28863: PUSH
28864: LD_VAR 0 4
28868: ARRAY
28869: PUSH
28870: LD_VAR 0 2
28874: PUSH
28875: LD_VAR 0 4
28879: ARRAY
28880: PPUSH
28881: CALL_OW 255
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PPUSH
28890: CALL 36313 0 3
28894: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28895: LD_VAR 0 2
28899: PUSH
28900: LD_VAR 0 4
28904: ARRAY
28905: PPUSH
28906: LD_VAR 0 1
28910: PPUSH
28911: CALL_OW 255
28915: PPUSH
28916: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28920: LD_VAR 0 2
28924: PUSH
28925: LD_VAR 0 4
28929: ARRAY
28930: PPUSH
28931: CALL_OW 141
// end ;
28935: GO 28767
28937: POP
28938: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28939: LD_VAR 0 1
28943: PPUSH
28944: LD_EXP 108
28948: PUSH
28949: LD_VAR 0 5
28953: ARRAY
28954: PUSH
28955: LD_INT 0
28957: PLUS
28958: PPUSH
28959: CALL_OW 505
// end ;
28963: LD_VAR 0 3
28967: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28968: LD_INT 0
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
// if not hack in hackTanks then
28974: LD_VAR 0 1
28978: PUSH
28979: LD_EXP 107
28983: IN
28984: NOT
28985: IFFALSE 28989
// exit ;
28987: GO 29229
// index := GetElementIndex ( hackTanks , hack ) ;
28989: LD_ADDR_VAR 0 4
28993: PUSH
28994: LD_EXP 107
28998: PPUSH
28999: LD_VAR 0 1
29003: PPUSH
29004: CALL 36098 0 2
29008: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29009: LD_ADDR_VAR 0 3
29013: PUSH
29014: DOUBLE
29015: LD_EXP 108
29019: PUSH
29020: LD_VAR 0 4
29024: ARRAY
29025: INC
29026: ST_TO_ADDR
29027: LD_INT 1
29029: PUSH
29030: FOR_DOWNTO
29031: IFFALSE 29203
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29033: LD_ADDR_VAR 0 5
29037: PUSH
29038: LD_EXP 108
29042: PUSH
29043: LD_VAR 0 4
29047: ARRAY
29048: PUSH
29049: LD_VAR 0 3
29053: ARRAY
29054: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29055: LD_VAR 0 5
29059: PUSH
29060: LD_INT 1
29062: ARRAY
29063: PPUSH
29064: CALL_OW 302
29068: NOT
29069: PUSH
29070: LD_VAR 0 5
29074: PUSH
29075: LD_INT 1
29077: ARRAY
29078: PPUSH
29079: CALL_OW 255
29083: PUSH
29084: LD_VAR 0 1
29088: PPUSH
29089: CALL_OW 255
29093: NONEQUAL
29094: OR
29095: IFFALSE 29201
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29097: LD_VAR 0 5
29101: PUSH
29102: LD_INT 1
29104: ARRAY
29105: PPUSH
29106: CALL_OW 305
29110: PUSH
29111: LD_VAR 0 5
29115: PUSH
29116: LD_INT 1
29118: ARRAY
29119: PPUSH
29120: CALL_OW 255
29124: PUSH
29125: LD_VAR 0 1
29129: PPUSH
29130: CALL_OW 255
29134: EQUAL
29135: AND
29136: IFFALSE 29160
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29138: LD_VAR 0 5
29142: PUSH
29143: LD_INT 1
29145: ARRAY
29146: PPUSH
29147: LD_VAR 0 5
29151: PUSH
29152: LD_INT 2
29154: ARRAY
29155: PPUSH
29156: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29160: LD_ADDR_EXP 108
29164: PUSH
29165: LD_EXP 108
29169: PPUSH
29170: LD_VAR 0 4
29174: PPUSH
29175: LD_EXP 108
29179: PUSH
29180: LD_VAR 0 4
29184: ARRAY
29185: PPUSH
29186: LD_VAR 0 3
29190: PPUSH
29191: CALL_OW 3
29195: PPUSH
29196: CALL_OW 1
29200: ST_TO_ADDR
// end ; end ;
29201: GO 29030
29203: POP
29204: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29205: LD_VAR 0 1
29209: PPUSH
29210: LD_EXP 108
29214: PUSH
29215: LD_VAR 0 4
29219: ARRAY
29220: PUSH
29221: LD_INT 0
29223: PLUS
29224: PPUSH
29225: CALL_OW 505
// end ;
29229: LD_VAR 0 2
29233: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29234: LD_INT 0
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
// if not hack in hackTanks then
29240: LD_VAR 0 1
29244: PUSH
29245: LD_EXP 107
29249: IN
29250: NOT
29251: IFFALSE 29255
// exit ;
29253: GO 29340
// index := GetElementIndex ( hackTanks , hack ) ;
29255: LD_ADDR_VAR 0 5
29259: PUSH
29260: LD_EXP 107
29264: PPUSH
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL 36098 0 2
29274: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29275: LD_ADDR_VAR 0 4
29279: PUSH
29280: DOUBLE
29281: LD_INT 1
29283: DEC
29284: ST_TO_ADDR
29285: LD_EXP 108
29289: PUSH
29290: LD_VAR 0 5
29294: ARRAY
29295: PUSH
29296: FOR_TO
29297: IFFALSE 29338
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29299: LD_EXP 108
29303: PUSH
29304: LD_VAR 0 5
29308: ARRAY
29309: PUSH
29310: LD_VAR 0 4
29314: ARRAY
29315: PUSH
29316: LD_INT 1
29318: ARRAY
29319: PUSH
29320: LD_VAR 0 2
29324: EQUAL
29325: IFFALSE 29336
// KillUnit ( vehicle ) ;
29327: LD_VAR 0 2
29331: PPUSH
29332: CALL_OW 66
29336: GO 29296
29338: POP
29339: POP
// end ;
29340: LD_VAR 0 3
29344: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29345: LD_EXP 112
29349: NOT
29350: IFFALSE 29385
29352: GO 29354
29354: DISABLE
// begin initMiner := true ;
29355: LD_ADDR_EXP 112
29359: PUSH
29360: LD_INT 1
29362: ST_TO_ADDR
// minersList := [ ] ;
29363: LD_ADDR_EXP 113
29367: PUSH
29368: EMPTY
29369: ST_TO_ADDR
// minerMinesList := [ ] ;
29370: LD_ADDR_EXP 114
29374: PUSH
29375: EMPTY
29376: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29377: LD_ADDR_EXP 115
29381: PUSH
29382: LD_INT 5
29384: ST_TO_ADDR
// end ;
29385: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29386: LD_EXP 112
29390: PUSH
29391: LD_INT 34
29393: PUSH
29394: LD_INT 81
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PPUSH
29401: CALL_OW 69
29405: AND
29406: IFFALSE 29867
29408: GO 29410
29410: DISABLE
29411: LD_INT 0
29413: PPUSH
29414: PPUSH
29415: PPUSH
29416: PPUSH
// begin enable ;
29417: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29418: LD_ADDR_VAR 0 1
29422: PUSH
29423: LD_INT 34
29425: PUSH
29426: LD_INT 81
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PPUSH
29433: CALL_OW 69
29437: PUSH
29438: FOR_IN
29439: IFFALSE 29511
// begin if not i in minersList then
29441: LD_VAR 0 1
29445: PUSH
29446: LD_EXP 113
29450: IN
29451: NOT
29452: IFFALSE 29509
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29454: LD_ADDR_EXP 113
29458: PUSH
29459: LD_EXP 113
29463: PPUSH
29464: LD_EXP 113
29468: PUSH
29469: LD_INT 1
29471: PLUS
29472: PPUSH
29473: LD_VAR 0 1
29477: PPUSH
29478: CALL_OW 1
29482: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29483: LD_ADDR_EXP 114
29487: PUSH
29488: LD_EXP 114
29492: PPUSH
29493: LD_EXP 114
29497: PUSH
29498: LD_INT 1
29500: PLUS
29501: PPUSH
29502: EMPTY
29503: PPUSH
29504: CALL_OW 1
29508: ST_TO_ADDR
// end end ;
29509: GO 29438
29511: POP
29512: POP
// for i := minerMinesList downto 1 do
29513: LD_ADDR_VAR 0 1
29517: PUSH
29518: DOUBLE
29519: LD_EXP 114
29523: INC
29524: ST_TO_ADDR
29525: LD_INT 1
29527: PUSH
29528: FOR_DOWNTO
29529: IFFALSE 29865
// begin if IsLive ( minersList [ i ] ) then
29531: LD_EXP 113
29535: PUSH
29536: LD_VAR 0 1
29540: ARRAY
29541: PPUSH
29542: CALL_OW 300
29546: IFFALSE 29574
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29548: LD_EXP 113
29552: PUSH
29553: LD_VAR 0 1
29557: ARRAY
29558: PPUSH
29559: LD_EXP 114
29563: PUSH
29564: LD_VAR 0 1
29568: ARRAY
29569: PPUSH
29570: CALL_OW 505
// if not minerMinesList [ i ] then
29574: LD_EXP 114
29578: PUSH
29579: LD_VAR 0 1
29583: ARRAY
29584: NOT
29585: IFFALSE 29589
// continue ;
29587: GO 29528
// for j := minerMinesList [ i ] downto 1 do
29589: LD_ADDR_VAR 0 2
29593: PUSH
29594: DOUBLE
29595: LD_EXP 114
29599: PUSH
29600: LD_VAR 0 1
29604: ARRAY
29605: INC
29606: ST_TO_ADDR
29607: LD_INT 1
29609: PUSH
29610: FOR_DOWNTO
29611: IFFALSE 29861
// begin side := GetSide ( minersList [ i ] ) ;
29613: LD_ADDR_VAR 0 3
29617: PUSH
29618: LD_EXP 113
29622: PUSH
29623: LD_VAR 0 1
29627: ARRAY
29628: PPUSH
29629: CALL_OW 255
29633: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29634: LD_ADDR_VAR 0 4
29638: PUSH
29639: LD_EXP 114
29643: PUSH
29644: LD_VAR 0 1
29648: ARRAY
29649: PUSH
29650: LD_VAR 0 2
29654: ARRAY
29655: PUSH
29656: LD_INT 1
29658: ARRAY
29659: PPUSH
29660: LD_EXP 114
29664: PUSH
29665: LD_VAR 0 1
29669: ARRAY
29670: PUSH
29671: LD_VAR 0 2
29675: ARRAY
29676: PUSH
29677: LD_INT 2
29679: ARRAY
29680: PPUSH
29681: CALL_OW 428
29685: ST_TO_ADDR
// if not tmp then
29686: LD_VAR 0 4
29690: NOT
29691: IFFALSE 29695
// continue ;
29693: GO 29610
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29695: LD_VAR 0 4
29699: PUSH
29700: LD_INT 81
29702: PUSH
29703: LD_VAR 0 3
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PPUSH
29712: CALL_OW 69
29716: IN
29717: PUSH
29718: LD_EXP 114
29722: PUSH
29723: LD_VAR 0 1
29727: ARRAY
29728: PUSH
29729: LD_VAR 0 2
29733: ARRAY
29734: PUSH
29735: LD_INT 1
29737: ARRAY
29738: PPUSH
29739: LD_EXP 114
29743: PUSH
29744: LD_VAR 0 1
29748: ARRAY
29749: PUSH
29750: LD_VAR 0 2
29754: ARRAY
29755: PUSH
29756: LD_INT 2
29758: ARRAY
29759: PPUSH
29760: CALL_OW 458
29764: AND
29765: IFFALSE 29859
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29767: LD_EXP 114
29771: PUSH
29772: LD_VAR 0 1
29776: ARRAY
29777: PUSH
29778: LD_VAR 0 2
29782: ARRAY
29783: PUSH
29784: LD_INT 1
29786: ARRAY
29787: PPUSH
29788: LD_EXP 114
29792: PUSH
29793: LD_VAR 0 1
29797: ARRAY
29798: PUSH
29799: LD_VAR 0 2
29803: ARRAY
29804: PUSH
29805: LD_INT 2
29807: ARRAY
29808: PPUSH
29809: LD_VAR 0 3
29813: PPUSH
29814: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29818: LD_ADDR_EXP 114
29822: PUSH
29823: LD_EXP 114
29827: PPUSH
29828: LD_VAR 0 1
29832: PPUSH
29833: LD_EXP 114
29837: PUSH
29838: LD_VAR 0 1
29842: ARRAY
29843: PPUSH
29844: LD_VAR 0 2
29848: PPUSH
29849: CALL_OW 3
29853: PPUSH
29854: CALL_OW 1
29858: ST_TO_ADDR
// end ; end ;
29859: GO 29610
29861: POP
29862: POP
// end ;
29863: GO 29528
29865: POP
29866: POP
// end ;
29867: PPOPN 4
29869: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29870: LD_INT 0
29872: PPUSH
29873: PPUSH
// result := false ;
29874: LD_ADDR_VAR 0 4
29878: PUSH
29879: LD_INT 0
29881: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29882: LD_VAR 0 1
29886: PPUSH
29887: CALL_OW 264
29891: PUSH
29892: LD_INT 81
29894: EQUAL
29895: NOT
29896: IFFALSE 29900
// exit ;
29898: GO 30140
// index := GetElementIndex ( minersList , unit ) ;
29900: LD_ADDR_VAR 0 5
29904: PUSH
29905: LD_EXP 113
29909: PPUSH
29910: LD_VAR 0 1
29914: PPUSH
29915: CALL 36098 0 2
29919: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29920: LD_EXP 114
29924: PUSH
29925: LD_VAR 0 5
29929: ARRAY
29930: PUSH
29931: LD_EXP 115
29935: GREATEREQUAL
29936: IFFALSE 29940
// exit ;
29938: GO 30140
// ComMoveXY ( unit , x , y ) ;
29940: LD_VAR 0 1
29944: PPUSH
29945: LD_VAR 0 2
29949: PPUSH
29950: LD_VAR 0 3
29954: PPUSH
29955: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29959: LD_INT 35
29961: PPUSH
29962: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29966: LD_VAR 0 1
29970: PPUSH
29971: LD_VAR 0 2
29975: PPUSH
29976: LD_VAR 0 3
29980: PPUSH
29981: CALL 67839 0 3
29985: NOT
29986: PUSH
29987: LD_VAR 0 1
29991: PPUSH
29992: CALL_OW 314
29996: AND
29997: IFFALSE 30001
// exit ;
29999: GO 30140
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30001: LD_VAR 0 2
30005: PPUSH
30006: LD_VAR 0 3
30010: PPUSH
30011: CALL_OW 428
30015: PUSH
30016: LD_VAR 0 1
30020: EQUAL
30021: PUSH
30022: LD_VAR 0 1
30026: PPUSH
30027: CALL_OW 314
30031: NOT
30032: AND
30033: IFFALSE 29959
// PlaySoundXY ( x , y , PlantMine ) ;
30035: LD_VAR 0 2
30039: PPUSH
30040: LD_VAR 0 3
30044: PPUSH
30045: LD_STRING PlantMine
30047: PPUSH
30048: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30052: LD_VAR 0 2
30056: PPUSH
30057: LD_VAR 0 3
30061: PPUSH
30062: LD_VAR 0 1
30066: PPUSH
30067: CALL_OW 255
30071: PPUSH
30072: LD_INT 0
30074: PPUSH
30075: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30079: LD_ADDR_EXP 114
30083: PUSH
30084: LD_EXP 114
30088: PPUSH
30089: LD_VAR 0 5
30093: PUSH
30094: LD_EXP 114
30098: PUSH
30099: LD_VAR 0 5
30103: ARRAY
30104: PUSH
30105: LD_INT 1
30107: PLUS
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PPUSH
30113: LD_VAR 0 2
30117: PUSH
30118: LD_VAR 0 3
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PPUSH
30127: CALL 36313 0 3
30131: ST_TO_ADDR
// result := true ;
30132: LD_ADDR_VAR 0 4
30136: PUSH
30137: LD_INT 1
30139: ST_TO_ADDR
// end ;
30140: LD_VAR 0 4
30144: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30145: LD_INT 0
30147: PPUSH
30148: PPUSH
30149: PPUSH
// if not unit in minersList then
30150: LD_VAR 0 1
30154: PUSH
30155: LD_EXP 113
30159: IN
30160: NOT
30161: IFFALSE 30165
// exit ;
30163: GO 30557
// index := GetElementIndex ( minersList , unit ) ;
30165: LD_ADDR_VAR 0 6
30169: PUSH
30170: LD_EXP 113
30174: PPUSH
30175: LD_VAR 0 1
30179: PPUSH
30180: CALL 36098 0 2
30184: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30185: LD_ADDR_VAR 0 5
30189: PUSH
30190: DOUBLE
30191: LD_EXP 114
30195: PUSH
30196: LD_VAR 0 6
30200: ARRAY
30201: INC
30202: ST_TO_ADDR
30203: LD_INT 1
30205: PUSH
30206: FOR_DOWNTO
30207: IFFALSE 30368
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30209: LD_EXP 114
30213: PUSH
30214: LD_VAR 0 6
30218: ARRAY
30219: PUSH
30220: LD_VAR 0 5
30224: ARRAY
30225: PUSH
30226: LD_INT 1
30228: ARRAY
30229: PUSH
30230: LD_VAR 0 2
30234: EQUAL
30235: PUSH
30236: LD_EXP 114
30240: PUSH
30241: LD_VAR 0 6
30245: ARRAY
30246: PUSH
30247: LD_VAR 0 5
30251: ARRAY
30252: PUSH
30253: LD_INT 2
30255: ARRAY
30256: PUSH
30257: LD_VAR 0 3
30261: EQUAL
30262: AND
30263: IFFALSE 30366
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30265: LD_EXP 114
30269: PUSH
30270: LD_VAR 0 6
30274: ARRAY
30275: PUSH
30276: LD_VAR 0 5
30280: ARRAY
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: PPUSH
30286: LD_EXP 114
30290: PUSH
30291: LD_VAR 0 6
30295: ARRAY
30296: PUSH
30297: LD_VAR 0 5
30301: ARRAY
30302: PUSH
30303: LD_INT 2
30305: ARRAY
30306: PPUSH
30307: LD_VAR 0 1
30311: PPUSH
30312: CALL_OW 255
30316: PPUSH
30317: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30321: LD_ADDR_EXP 114
30325: PUSH
30326: LD_EXP 114
30330: PPUSH
30331: LD_VAR 0 6
30335: PPUSH
30336: LD_EXP 114
30340: PUSH
30341: LD_VAR 0 6
30345: ARRAY
30346: PPUSH
30347: LD_VAR 0 5
30351: PPUSH
30352: CALL_OW 3
30356: PPUSH
30357: CALL_OW 1
30361: ST_TO_ADDR
// exit ;
30362: POP
30363: POP
30364: GO 30557
// end ; end ;
30366: GO 30206
30368: POP
30369: POP
// for i := minerMinesList [ index ] downto 1 do
30370: LD_ADDR_VAR 0 5
30374: PUSH
30375: DOUBLE
30376: LD_EXP 114
30380: PUSH
30381: LD_VAR 0 6
30385: ARRAY
30386: INC
30387: ST_TO_ADDR
30388: LD_INT 1
30390: PUSH
30391: FOR_DOWNTO
30392: IFFALSE 30555
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30394: LD_EXP 114
30398: PUSH
30399: LD_VAR 0 6
30403: ARRAY
30404: PUSH
30405: LD_VAR 0 5
30409: ARRAY
30410: PUSH
30411: LD_INT 1
30413: ARRAY
30414: PPUSH
30415: LD_EXP 114
30419: PUSH
30420: LD_VAR 0 6
30424: ARRAY
30425: PUSH
30426: LD_VAR 0 5
30430: ARRAY
30431: PUSH
30432: LD_INT 2
30434: ARRAY
30435: PPUSH
30436: LD_VAR 0 2
30440: PPUSH
30441: LD_VAR 0 3
30445: PPUSH
30446: CALL_OW 298
30450: PUSH
30451: LD_INT 6
30453: LESS
30454: IFFALSE 30553
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30456: LD_EXP 114
30460: PUSH
30461: LD_VAR 0 6
30465: ARRAY
30466: PUSH
30467: LD_VAR 0 5
30471: ARRAY
30472: PUSH
30473: LD_INT 1
30475: ARRAY
30476: PPUSH
30477: LD_EXP 114
30481: PUSH
30482: LD_VAR 0 6
30486: ARRAY
30487: PUSH
30488: LD_VAR 0 5
30492: ARRAY
30493: PUSH
30494: LD_INT 2
30496: ARRAY
30497: PPUSH
30498: LD_VAR 0 1
30502: PPUSH
30503: CALL_OW 255
30507: PPUSH
30508: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30512: LD_ADDR_EXP 114
30516: PUSH
30517: LD_EXP 114
30521: PPUSH
30522: LD_VAR 0 6
30526: PPUSH
30527: LD_EXP 114
30531: PUSH
30532: LD_VAR 0 6
30536: ARRAY
30537: PPUSH
30538: LD_VAR 0 5
30542: PPUSH
30543: CALL_OW 3
30547: PPUSH
30548: CALL_OW 1
30552: ST_TO_ADDR
// end ; end ;
30553: GO 30391
30555: POP
30556: POP
// end ;
30557: LD_VAR 0 4
30561: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30562: LD_INT 0
30564: PPUSH
30565: PPUSH
30566: PPUSH
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
30572: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30573: LD_VAR 0 1
30577: PPUSH
30578: CALL_OW 264
30582: PUSH
30583: LD_INT 81
30585: EQUAL
30586: NOT
30587: PUSH
30588: LD_VAR 0 1
30592: PUSH
30593: LD_EXP 113
30597: IN
30598: NOT
30599: OR
30600: IFFALSE 30604
// exit ;
30602: GO 30926
// index := GetElementIndex ( minersList , unit ) ;
30604: LD_ADDR_VAR 0 6
30608: PUSH
30609: LD_EXP 113
30613: PPUSH
30614: LD_VAR 0 1
30618: PPUSH
30619: CALL 36098 0 2
30623: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30624: LD_ADDR_VAR 0 8
30628: PUSH
30629: LD_EXP 115
30633: PUSH
30634: LD_EXP 114
30638: PUSH
30639: LD_VAR 0 6
30643: ARRAY
30644: MINUS
30645: ST_TO_ADDR
// if not minesFreeAmount then
30646: LD_VAR 0 8
30650: NOT
30651: IFFALSE 30655
// exit ;
30653: GO 30926
// tmp := [ ] ;
30655: LD_ADDR_VAR 0 7
30659: PUSH
30660: EMPTY
30661: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30662: LD_ADDR_VAR 0 5
30666: PUSH
30667: DOUBLE
30668: LD_INT 1
30670: DEC
30671: ST_TO_ADDR
30672: LD_VAR 0 8
30676: PUSH
30677: FOR_TO
30678: IFFALSE 30873
// begin _d := rand ( 0 , 5 ) ;
30680: LD_ADDR_VAR 0 11
30684: PUSH
30685: LD_INT 0
30687: PPUSH
30688: LD_INT 5
30690: PPUSH
30691: CALL_OW 12
30695: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30696: LD_ADDR_VAR 0 12
30700: PUSH
30701: LD_INT 2
30703: PPUSH
30704: LD_INT 6
30706: PPUSH
30707: CALL_OW 12
30711: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30712: LD_ADDR_VAR 0 9
30716: PUSH
30717: LD_VAR 0 2
30721: PPUSH
30722: LD_VAR 0 11
30726: PPUSH
30727: LD_VAR 0 12
30731: PPUSH
30732: CALL_OW 272
30736: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30737: LD_ADDR_VAR 0 10
30741: PUSH
30742: LD_VAR 0 3
30746: PPUSH
30747: LD_VAR 0 11
30751: PPUSH
30752: LD_VAR 0 12
30756: PPUSH
30757: CALL_OW 273
30761: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30762: LD_VAR 0 9
30766: PPUSH
30767: LD_VAR 0 10
30771: PPUSH
30772: CALL_OW 488
30776: PUSH
30777: LD_VAR 0 9
30781: PUSH
30782: LD_VAR 0 10
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_VAR 0 7
30795: IN
30796: NOT
30797: AND
30798: PUSH
30799: LD_VAR 0 9
30803: PPUSH
30804: LD_VAR 0 10
30808: PPUSH
30809: CALL_OW 458
30813: NOT
30814: AND
30815: IFFALSE 30857
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30817: LD_ADDR_VAR 0 7
30821: PUSH
30822: LD_VAR 0 7
30826: PPUSH
30827: LD_VAR 0 7
30831: PUSH
30832: LD_INT 1
30834: PLUS
30835: PPUSH
30836: LD_VAR 0 9
30840: PUSH
30841: LD_VAR 0 10
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PPUSH
30850: CALL_OW 1
30854: ST_TO_ADDR
30855: GO 30871
// i := i - 1 ;
30857: LD_ADDR_VAR 0 5
30861: PUSH
30862: LD_VAR 0 5
30866: PUSH
30867: LD_INT 1
30869: MINUS
30870: ST_TO_ADDR
// end ;
30871: GO 30677
30873: POP
30874: POP
// for i in tmp do
30875: LD_ADDR_VAR 0 5
30879: PUSH
30880: LD_VAR 0 7
30884: PUSH
30885: FOR_IN
30886: IFFALSE 30924
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30888: LD_VAR 0 1
30892: PPUSH
30893: LD_VAR 0 5
30897: PUSH
30898: LD_INT 1
30900: ARRAY
30901: PPUSH
30902: LD_VAR 0 5
30906: PUSH
30907: LD_INT 2
30909: ARRAY
30910: PPUSH
30911: CALL 29870 0 3
30915: NOT
30916: IFFALSE 30922
// exit ;
30918: POP
30919: POP
30920: GO 30926
30922: GO 30885
30924: POP
30925: POP
// end ;
30926: LD_VAR 0 4
30930: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30931: LD_INT 0
30933: PPUSH
30934: PPUSH
30935: PPUSH
30936: PPUSH
30937: PPUSH
30938: PPUSH
30939: PPUSH
// if not GetClass ( unit ) = class_sniper then
30940: LD_VAR 0 1
30944: PPUSH
30945: CALL_OW 257
30949: PUSH
30950: LD_INT 5
30952: EQUAL
30953: NOT
30954: IFFALSE 30958
// exit ;
30956: GO 31346
// dist := 8 ;
30958: LD_ADDR_VAR 0 5
30962: PUSH
30963: LD_INT 8
30965: ST_TO_ADDR
// viewRange := 12 ;
30966: LD_ADDR_VAR 0 7
30970: PUSH
30971: LD_INT 12
30973: ST_TO_ADDR
// side := GetSide ( unit ) ;
30974: LD_ADDR_VAR 0 6
30978: PUSH
30979: LD_VAR 0 1
30983: PPUSH
30984: CALL_OW 255
30988: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30989: LD_INT 61
30991: PPUSH
30992: LD_VAR 0 6
30996: PPUSH
30997: CALL_OW 321
31001: PUSH
31002: LD_INT 2
31004: EQUAL
31005: IFFALSE 31015
// viewRange := 16 ;
31007: LD_ADDR_VAR 0 7
31011: PUSH
31012: LD_INT 16
31014: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31015: LD_VAR 0 1
31019: PPUSH
31020: LD_VAR 0 2
31024: PPUSH
31025: LD_VAR 0 3
31029: PPUSH
31030: CALL_OW 297
31034: PUSH
31035: LD_VAR 0 5
31039: GREATER
31040: IFFALSE 31119
// begin ComMoveXY ( unit , x , y ) ;
31042: LD_VAR 0 1
31046: PPUSH
31047: LD_VAR 0 2
31051: PPUSH
31052: LD_VAR 0 3
31056: PPUSH
31057: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31061: LD_INT 35
31063: PPUSH
31064: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31068: LD_VAR 0 1
31072: PPUSH
31073: LD_VAR 0 2
31077: PPUSH
31078: LD_VAR 0 3
31082: PPUSH
31083: CALL 67839 0 3
31087: NOT
31088: IFFALSE 31092
// exit ;
31090: GO 31346
// until GetDistUnitXY ( unit , x , y ) < dist ;
31092: LD_VAR 0 1
31096: PPUSH
31097: LD_VAR 0 2
31101: PPUSH
31102: LD_VAR 0 3
31106: PPUSH
31107: CALL_OW 297
31111: PUSH
31112: LD_VAR 0 5
31116: LESS
31117: IFFALSE 31061
// end ; ComTurnXY ( unit , x , y ) ;
31119: LD_VAR 0 1
31123: PPUSH
31124: LD_VAR 0 2
31128: PPUSH
31129: LD_VAR 0 3
31133: PPUSH
31134: CALL_OW 118
// wait ( 5 ) ;
31138: LD_INT 5
31140: PPUSH
31141: CALL_OW 67
// _d := GetDir ( unit ) ;
31145: LD_ADDR_VAR 0 10
31149: PUSH
31150: LD_VAR 0 1
31154: PPUSH
31155: CALL_OW 254
31159: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31160: LD_ADDR_VAR 0 8
31164: PUSH
31165: LD_VAR 0 1
31169: PPUSH
31170: CALL_OW 250
31174: PPUSH
31175: LD_VAR 0 10
31179: PPUSH
31180: LD_VAR 0 5
31184: PPUSH
31185: CALL_OW 272
31189: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31190: LD_ADDR_VAR 0 9
31194: PUSH
31195: LD_VAR 0 1
31199: PPUSH
31200: CALL_OW 251
31204: PPUSH
31205: LD_VAR 0 10
31209: PPUSH
31210: LD_VAR 0 5
31214: PPUSH
31215: CALL_OW 273
31219: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31220: LD_VAR 0 8
31224: PPUSH
31225: LD_VAR 0 9
31229: PPUSH
31230: CALL_OW 488
31234: NOT
31235: IFFALSE 31239
// exit ;
31237: GO 31346
// ComAnimCustom ( unit , 1 ) ;
31239: LD_VAR 0 1
31243: PPUSH
31244: LD_INT 1
31246: PPUSH
31247: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31251: LD_VAR 0 8
31255: PPUSH
31256: LD_VAR 0 9
31260: PPUSH
31261: LD_VAR 0 6
31265: PPUSH
31266: LD_VAR 0 7
31270: PPUSH
31271: CALL_OW 330
// repeat wait ( 1 ) ;
31275: LD_INT 1
31277: PPUSH
31278: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31282: LD_VAR 0 1
31286: PPUSH
31287: CALL_OW 316
31291: PUSH
31292: LD_VAR 0 1
31296: PPUSH
31297: CALL_OW 314
31301: OR
31302: PUSH
31303: LD_VAR 0 1
31307: PPUSH
31308: CALL_OW 302
31312: NOT
31313: OR
31314: PUSH
31315: LD_VAR 0 1
31319: PPUSH
31320: CALL_OW 301
31324: OR
31325: IFFALSE 31275
// RemoveSeeing ( _x , _y , side ) ;
31327: LD_VAR 0 8
31331: PPUSH
31332: LD_VAR 0 9
31336: PPUSH
31337: LD_VAR 0 6
31341: PPUSH
31342: CALL_OW 331
// end ; end_of_file
31346: LD_VAR 0 4
31350: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31351: LD_INT 0
31353: PPUSH
31354: PPUSH
// if exist_mode then
31355: LD_VAR 0 2
31359: IFFALSE 31384
// unit := CreateCharacter ( prefix & ident ) else
31361: LD_ADDR_VAR 0 5
31365: PUSH
31366: LD_VAR 0 3
31370: PUSH
31371: LD_VAR 0 1
31375: STR
31376: PPUSH
31377: CALL_OW 34
31381: ST_TO_ADDR
31382: GO 31399
// unit := NewCharacter ( ident ) ;
31384: LD_ADDR_VAR 0 5
31388: PUSH
31389: LD_VAR 0 1
31393: PPUSH
31394: CALL_OW 25
31398: ST_TO_ADDR
// result := unit ;
31399: LD_ADDR_VAR 0 4
31403: PUSH
31404: LD_VAR 0 5
31408: ST_TO_ADDR
// end ;
31409: LD_VAR 0 4
31413: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31414: LD_INT 0
31416: PPUSH
31417: PPUSH
// if not side or not nation then
31418: LD_VAR 0 1
31422: NOT
31423: PUSH
31424: LD_VAR 0 2
31428: NOT
31429: OR
31430: IFFALSE 31434
// exit ;
31432: GO 32202
// case nation of nation_american :
31434: LD_VAR 0 2
31438: PUSH
31439: LD_INT 1
31441: DOUBLE
31442: EQUAL
31443: IFTRUE 31447
31445: GO 31661
31447: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31448: LD_ADDR_VAR 0 4
31452: PUSH
31453: LD_INT 35
31455: PUSH
31456: LD_INT 45
31458: PUSH
31459: LD_INT 46
31461: PUSH
31462: LD_INT 47
31464: PUSH
31465: LD_INT 82
31467: PUSH
31468: LD_INT 83
31470: PUSH
31471: LD_INT 84
31473: PUSH
31474: LD_INT 85
31476: PUSH
31477: LD_INT 86
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 6
31488: PUSH
31489: LD_INT 15
31491: PUSH
31492: LD_INT 16
31494: PUSH
31495: LD_INT 7
31497: PUSH
31498: LD_INT 12
31500: PUSH
31501: LD_INT 13
31503: PUSH
31504: LD_INT 10
31506: PUSH
31507: LD_INT 14
31509: PUSH
31510: LD_INT 20
31512: PUSH
31513: LD_INT 21
31515: PUSH
31516: LD_INT 22
31518: PUSH
31519: LD_INT 25
31521: PUSH
31522: LD_INT 32
31524: PUSH
31525: LD_INT 27
31527: PUSH
31528: LD_INT 36
31530: PUSH
31531: LD_INT 69
31533: PUSH
31534: LD_INT 39
31536: PUSH
31537: LD_INT 34
31539: PUSH
31540: LD_INT 40
31542: PUSH
31543: LD_INT 48
31545: PUSH
31546: LD_INT 49
31548: PUSH
31549: LD_INT 50
31551: PUSH
31552: LD_INT 51
31554: PUSH
31555: LD_INT 52
31557: PUSH
31558: LD_INT 53
31560: PUSH
31561: LD_INT 54
31563: PUSH
31564: LD_INT 55
31566: PUSH
31567: LD_INT 56
31569: PUSH
31570: LD_INT 57
31572: PUSH
31573: LD_INT 58
31575: PUSH
31576: LD_INT 59
31578: PUSH
31579: LD_INT 60
31581: PUSH
31582: LD_INT 61
31584: PUSH
31585: LD_INT 62
31587: PUSH
31588: LD_INT 80
31590: PUSH
31591: LD_INT 82
31593: PUSH
31594: LD_INT 83
31596: PUSH
31597: LD_INT 84
31599: PUSH
31600: LD_INT 85
31602: PUSH
31603: LD_INT 86
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: ST_TO_ADDR
31659: GO 32126
31661: LD_INT 2
31663: DOUBLE
31664: EQUAL
31665: IFTRUE 31669
31667: GO 31895
31669: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31670: LD_ADDR_VAR 0 4
31674: PUSH
31675: LD_INT 35
31677: PUSH
31678: LD_INT 45
31680: PUSH
31681: LD_INT 46
31683: PUSH
31684: LD_INT 47
31686: PUSH
31687: LD_INT 82
31689: PUSH
31690: LD_INT 83
31692: PUSH
31693: LD_INT 84
31695: PUSH
31696: LD_INT 85
31698: PUSH
31699: LD_INT 87
31701: PUSH
31702: LD_INT 70
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: LD_INT 11
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: LD_INT 4
31716: PUSH
31717: LD_INT 5
31719: PUSH
31720: LD_INT 6
31722: PUSH
31723: LD_INT 15
31725: PUSH
31726: LD_INT 18
31728: PUSH
31729: LD_INT 7
31731: PUSH
31732: LD_INT 17
31734: PUSH
31735: LD_INT 8
31737: PUSH
31738: LD_INT 20
31740: PUSH
31741: LD_INT 21
31743: PUSH
31744: LD_INT 22
31746: PUSH
31747: LD_INT 72
31749: PUSH
31750: LD_INT 26
31752: PUSH
31753: LD_INT 69
31755: PUSH
31756: LD_INT 39
31758: PUSH
31759: LD_INT 40
31761: PUSH
31762: LD_INT 41
31764: PUSH
31765: LD_INT 42
31767: PUSH
31768: LD_INT 43
31770: PUSH
31771: LD_INT 48
31773: PUSH
31774: LD_INT 49
31776: PUSH
31777: LD_INT 50
31779: PUSH
31780: LD_INT 51
31782: PUSH
31783: LD_INT 52
31785: PUSH
31786: LD_INT 53
31788: PUSH
31789: LD_INT 54
31791: PUSH
31792: LD_INT 55
31794: PUSH
31795: LD_INT 56
31797: PUSH
31798: LD_INT 60
31800: PUSH
31801: LD_INT 61
31803: PUSH
31804: LD_INT 62
31806: PUSH
31807: LD_INT 66
31809: PUSH
31810: LD_INT 67
31812: PUSH
31813: LD_INT 68
31815: PUSH
31816: LD_INT 81
31818: PUSH
31819: LD_INT 82
31821: PUSH
31822: LD_INT 83
31824: PUSH
31825: LD_INT 84
31827: PUSH
31828: LD_INT 85
31830: PUSH
31831: LD_INT 87
31833: PUSH
31834: LD_INT 88
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
31893: GO 32126
31895: LD_INT 3
31897: DOUBLE
31898: EQUAL
31899: IFTRUE 31903
31901: GO 32125
31903: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31904: LD_ADDR_VAR 0 4
31908: PUSH
31909: LD_INT 46
31911: PUSH
31912: LD_INT 47
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 82
31923: PUSH
31924: LD_INT 83
31926: PUSH
31927: LD_INT 84
31929: PUSH
31930: LD_INT 85
31932: PUSH
31933: LD_INT 86
31935: PUSH
31936: LD_INT 11
31938: PUSH
31939: LD_INT 9
31941: PUSH
31942: LD_INT 20
31944: PUSH
31945: LD_INT 19
31947: PUSH
31948: LD_INT 21
31950: PUSH
31951: LD_INT 24
31953: PUSH
31954: LD_INT 22
31956: PUSH
31957: LD_INT 25
31959: PUSH
31960: LD_INT 28
31962: PUSH
31963: LD_INT 29
31965: PUSH
31966: LD_INT 30
31968: PUSH
31969: LD_INT 31
31971: PUSH
31972: LD_INT 37
31974: PUSH
31975: LD_INT 38
31977: PUSH
31978: LD_INT 32
31980: PUSH
31981: LD_INT 27
31983: PUSH
31984: LD_INT 33
31986: PUSH
31987: LD_INT 69
31989: PUSH
31990: LD_INT 39
31992: PUSH
31993: LD_INT 34
31995: PUSH
31996: LD_INT 40
31998: PUSH
31999: LD_INT 71
32001: PUSH
32002: LD_INT 23
32004: PUSH
32005: LD_INT 44
32007: PUSH
32008: LD_INT 48
32010: PUSH
32011: LD_INT 49
32013: PUSH
32014: LD_INT 50
32016: PUSH
32017: LD_INT 51
32019: PUSH
32020: LD_INT 52
32022: PUSH
32023: LD_INT 53
32025: PUSH
32026: LD_INT 54
32028: PUSH
32029: LD_INT 55
32031: PUSH
32032: LD_INT 56
32034: PUSH
32035: LD_INT 57
32037: PUSH
32038: LD_INT 58
32040: PUSH
32041: LD_INT 59
32043: PUSH
32044: LD_INT 63
32046: PUSH
32047: LD_INT 64
32049: PUSH
32050: LD_INT 65
32052: PUSH
32053: LD_INT 82
32055: PUSH
32056: LD_INT 83
32058: PUSH
32059: LD_INT 84
32061: PUSH
32062: LD_INT 85
32064: PUSH
32065: LD_INT 86
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: ST_TO_ADDR
32123: GO 32126
32125: POP
// if state > - 1 and state < 3 then
32126: LD_VAR 0 3
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: GREATER
32135: PUSH
32136: LD_VAR 0 3
32140: PUSH
32141: LD_INT 3
32143: LESS
32144: AND
32145: IFFALSE 32202
// for i in result do
32147: LD_ADDR_VAR 0 5
32151: PUSH
32152: LD_VAR 0 4
32156: PUSH
32157: FOR_IN
32158: IFFALSE 32200
// if GetTech ( i , side ) <> state then
32160: LD_VAR 0 5
32164: PPUSH
32165: LD_VAR 0 1
32169: PPUSH
32170: CALL_OW 321
32174: PUSH
32175: LD_VAR 0 3
32179: NONEQUAL
32180: IFFALSE 32198
// result := result diff i ;
32182: LD_ADDR_VAR 0 4
32186: PUSH
32187: LD_VAR 0 4
32191: PUSH
32192: LD_VAR 0 5
32196: DIFF
32197: ST_TO_ADDR
32198: GO 32157
32200: POP
32201: POP
// end ;
32202: LD_VAR 0 4
32206: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32207: LD_INT 0
32209: PPUSH
32210: PPUSH
32211: PPUSH
// result := true ;
32212: LD_ADDR_VAR 0 3
32216: PUSH
32217: LD_INT 1
32219: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32220: LD_ADDR_VAR 0 5
32224: PUSH
32225: LD_VAR 0 2
32229: PPUSH
32230: CALL_OW 480
32234: ST_TO_ADDR
// if not tmp then
32235: LD_VAR 0 5
32239: NOT
32240: IFFALSE 32244
// exit ;
32242: GO 32293
// for i in tmp do
32244: LD_ADDR_VAR 0 4
32248: PUSH
32249: LD_VAR 0 5
32253: PUSH
32254: FOR_IN
32255: IFFALSE 32291
// if GetTech ( i , side ) <> state_researched then
32257: LD_VAR 0 4
32261: PPUSH
32262: LD_VAR 0 1
32266: PPUSH
32267: CALL_OW 321
32271: PUSH
32272: LD_INT 2
32274: NONEQUAL
32275: IFFALSE 32289
// begin result := false ;
32277: LD_ADDR_VAR 0 3
32281: PUSH
32282: LD_INT 0
32284: ST_TO_ADDR
// exit ;
32285: POP
32286: POP
32287: GO 32293
// end ;
32289: GO 32254
32291: POP
32292: POP
// end ;
32293: LD_VAR 0 3
32297: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32298: LD_INT 0
32300: PPUSH
32301: PPUSH
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
32311: PPUSH
32312: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32313: LD_VAR 0 1
32317: NOT
32318: PUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 257
32328: PUSH
32329: LD_INT 9
32331: NONEQUAL
32332: OR
32333: IFFALSE 32337
// exit ;
32335: GO 32910
// side := GetSide ( unit ) ;
32337: LD_ADDR_VAR 0 9
32341: PUSH
32342: LD_VAR 0 1
32346: PPUSH
32347: CALL_OW 255
32351: ST_TO_ADDR
// tech_space := tech_spacanom ;
32352: LD_ADDR_VAR 0 12
32356: PUSH
32357: LD_INT 29
32359: ST_TO_ADDR
// tech_time := tech_taurad ;
32360: LD_ADDR_VAR 0 13
32364: PUSH
32365: LD_INT 28
32367: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32368: LD_ADDR_VAR 0 11
32372: PUSH
32373: LD_VAR 0 1
32377: PPUSH
32378: CALL_OW 310
32382: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32383: LD_VAR 0 11
32387: PPUSH
32388: CALL_OW 247
32392: PUSH
32393: LD_INT 2
32395: EQUAL
32396: IFFALSE 32400
// exit ;
32398: GO 32910
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32400: LD_ADDR_VAR 0 8
32404: PUSH
32405: LD_INT 81
32407: PUSH
32408: LD_VAR 0 9
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: LD_INT 21
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PPUSH
32438: CALL_OW 69
32442: ST_TO_ADDR
// if not tmp then
32443: LD_VAR 0 8
32447: NOT
32448: IFFALSE 32452
// exit ;
32450: GO 32910
// if in_unit then
32452: LD_VAR 0 11
32456: IFFALSE 32480
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32458: LD_ADDR_VAR 0 10
32462: PUSH
32463: LD_VAR 0 8
32467: PPUSH
32468: LD_VAR 0 11
32472: PPUSH
32473: CALL_OW 74
32477: ST_TO_ADDR
32478: GO 32500
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32480: LD_ADDR_VAR 0 10
32484: PUSH
32485: LD_VAR 0 8
32489: PPUSH
32490: LD_VAR 0 1
32494: PPUSH
32495: CALL_OW 74
32499: ST_TO_ADDR
// if not enemy then
32500: LD_VAR 0 10
32504: NOT
32505: IFFALSE 32509
// exit ;
32507: GO 32910
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32509: LD_VAR 0 11
32513: PUSH
32514: LD_VAR 0 11
32518: PPUSH
32519: LD_VAR 0 10
32523: PPUSH
32524: CALL_OW 296
32528: PUSH
32529: LD_INT 13
32531: GREATER
32532: AND
32533: PUSH
32534: LD_VAR 0 1
32538: PPUSH
32539: LD_VAR 0 10
32543: PPUSH
32544: CALL_OW 296
32548: PUSH
32549: LD_INT 12
32551: GREATER
32552: OR
32553: IFFALSE 32557
// exit ;
32555: GO 32910
// missile := [ 1 ] ;
32557: LD_ADDR_VAR 0 14
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: EMPTY
32566: LIST
32567: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32568: LD_VAR 0 9
32572: PPUSH
32573: LD_VAR 0 12
32577: PPUSH
32578: CALL_OW 325
32582: IFFALSE 32611
// missile := Replace ( missile , missile + 1 , 2 ) ;
32584: LD_ADDR_VAR 0 14
32588: PUSH
32589: LD_VAR 0 14
32593: PPUSH
32594: LD_VAR 0 14
32598: PUSH
32599: LD_INT 1
32601: PLUS
32602: PPUSH
32603: LD_INT 2
32605: PPUSH
32606: CALL_OW 1
32610: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32611: LD_VAR 0 9
32615: PPUSH
32616: LD_VAR 0 13
32620: PPUSH
32621: CALL_OW 325
32625: PUSH
32626: LD_VAR 0 10
32630: PPUSH
32631: CALL_OW 255
32635: PPUSH
32636: LD_VAR 0 13
32640: PPUSH
32641: CALL_OW 325
32645: NOT
32646: AND
32647: IFFALSE 32676
// missile := Replace ( missile , missile + 1 , 3 ) ;
32649: LD_ADDR_VAR 0 14
32653: PUSH
32654: LD_VAR 0 14
32658: PPUSH
32659: LD_VAR 0 14
32663: PUSH
32664: LD_INT 1
32666: PLUS
32667: PPUSH
32668: LD_INT 3
32670: PPUSH
32671: CALL_OW 1
32675: ST_TO_ADDR
// if missile < 2 then
32676: LD_VAR 0 14
32680: PUSH
32681: LD_INT 2
32683: LESS
32684: IFFALSE 32688
// exit ;
32686: GO 32910
// x := GetX ( enemy ) ;
32688: LD_ADDR_VAR 0 4
32692: PUSH
32693: LD_VAR 0 10
32697: PPUSH
32698: CALL_OW 250
32702: ST_TO_ADDR
// y := GetY ( enemy ) ;
32703: LD_ADDR_VAR 0 5
32707: PUSH
32708: LD_VAR 0 10
32712: PPUSH
32713: CALL_OW 251
32717: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32718: LD_ADDR_VAR 0 6
32722: PUSH
32723: LD_VAR 0 4
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PPUSH
32732: LD_INT 1
32734: PPUSH
32735: CALL_OW 12
32739: PLUS
32740: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32741: LD_ADDR_VAR 0 7
32745: PUSH
32746: LD_VAR 0 5
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PPUSH
32755: LD_INT 1
32757: PPUSH
32758: CALL_OW 12
32762: PLUS
32763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32764: LD_VAR 0 6
32768: PPUSH
32769: LD_VAR 0 7
32773: PPUSH
32774: CALL_OW 488
32778: NOT
32779: IFFALSE 32801
// begin _x := x ;
32781: LD_ADDR_VAR 0 6
32785: PUSH
32786: LD_VAR 0 4
32790: ST_TO_ADDR
// _y := y ;
32791: LD_ADDR_VAR 0 7
32795: PUSH
32796: LD_VAR 0 5
32800: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32801: LD_ADDR_VAR 0 3
32805: PUSH
32806: LD_INT 1
32808: PPUSH
32809: LD_VAR 0 14
32813: PPUSH
32814: CALL_OW 12
32818: ST_TO_ADDR
// case i of 1 :
32819: LD_VAR 0 3
32823: PUSH
32824: LD_INT 1
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32849
32832: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32833: LD_VAR 0 1
32837: PPUSH
32838: LD_VAR 0 10
32842: PPUSH
32843: CALL_OW 115
32847: GO 32910
32849: LD_INT 2
32851: DOUBLE
32852: EQUAL
32853: IFTRUE 32857
32855: GO 32879
32857: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32858: LD_VAR 0 1
32862: PPUSH
32863: LD_VAR 0 6
32867: PPUSH
32868: LD_VAR 0 7
32872: PPUSH
32873: CALL_OW 153
32877: GO 32910
32879: LD_INT 3
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32909
32887: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32888: LD_VAR 0 1
32892: PPUSH
32893: LD_VAR 0 6
32897: PPUSH
32898: LD_VAR 0 7
32902: PPUSH
32903: CALL_OW 154
32907: GO 32910
32909: POP
// end ;
32910: LD_VAR 0 2
32914: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32915: LD_INT 0
32917: PPUSH
32918: PPUSH
32919: PPUSH
32920: PPUSH
32921: PPUSH
32922: PPUSH
// if not unit or not building then
32923: LD_VAR 0 1
32927: NOT
32928: PUSH
32929: LD_VAR 0 2
32933: NOT
32934: OR
32935: IFFALSE 32939
// exit ;
32937: GO 33097
// x := GetX ( building ) ;
32939: LD_ADDR_VAR 0 5
32943: PUSH
32944: LD_VAR 0 2
32948: PPUSH
32949: CALL_OW 250
32953: ST_TO_ADDR
// y := GetY ( building ) ;
32954: LD_ADDR_VAR 0 6
32958: PUSH
32959: LD_VAR 0 2
32963: PPUSH
32964: CALL_OW 251
32968: ST_TO_ADDR
// for i = 0 to 5 do
32969: LD_ADDR_VAR 0 4
32973: PUSH
32974: DOUBLE
32975: LD_INT 0
32977: DEC
32978: ST_TO_ADDR
32979: LD_INT 5
32981: PUSH
32982: FOR_TO
32983: IFFALSE 33095
// begin _x := ShiftX ( x , i , 3 ) ;
32985: LD_ADDR_VAR 0 7
32989: PUSH
32990: LD_VAR 0 5
32994: PPUSH
32995: LD_VAR 0 4
32999: PPUSH
33000: LD_INT 3
33002: PPUSH
33003: CALL_OW 272
33007: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33008: LD_ADDR_VAR 0 8
33012: PUSH
33013: LD_VAR 0 6
33017: PPUSH
33018: LD_VAR 0 4
33022: PPUSH
33023: LD_INT 3
33025: PPUSH
33026: CALL_OW 273
33030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33031: LD_VAR 0 7
33035: PPUSH
33036: LD_VAR 0 8
33040: PPUSH
33041: CALL_OW 488
33045: NOT
33046: IFFALSE 33050
// continue ;
33048: GO 32982
// if HexInfo ( _x , _y ) = 0 then
33050: LD_VAR 0 7
33054: PPUSH
33055: LD_VAR 0 8
33059: PPUSH
33060: CALL_OW 428
33064: PUSH
33065: LD_INT 0
33067: EQUAL
33068: IFFALSE 33093
// begin ComMoveXY ( unit , _x , _y ) ;
33070: LD_VAR 0 1
33074: PPUSH
33075: LD_VAR 0 7
33079: PPUSH
33080: LD_VAR 0 8
33084: PPUSH
33085: CALL_OW 111
// exit ;
33089: POP
33090: POP
33091: GO 33097
// end ; end ;
33093: GO 32982
33095: POP
33096: POP
// end ;
33097: LD_VAR 0 3
33101: RET
// export function ScanBase ( side , base_area ) ; begin
33102: LD_INT 0
33104: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33105: LD_ADDR_VAR 0 3
33109: PUSH
33110: LD_VAR 0 2
33114: PPUSH
33115: LD_INT 81
33117: PUSH
33118: LD_VAR 0 1
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PPUSH
33127: CALL_OW 70
33131: ST_TO_ADDR
// end ;
33132: LD_VAR 0 3
33136: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33137: LD_INT 0
33139: PPUSH
33140: PPUSH
33141: PPUSH
33142: PPUSH
// result := false ;
33143: LD_ADDR_VAR 0 2
33147: PUSH
33148: LD_INT 0
33150: ST_TO_ADDR
// side := GetSide ( unit ) ;
33151: LD_ADDR_VAR 0 3
33155: PUSH
33156: LD_VAR 0 1
33160: PPUSH
33161: CALL_OW 255
33165: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33166: LD_ADDR_VAR 0 4
33170: PUSH
33171: LD_VAR 0 1
33175: PPUSH
33176: CALL_OW 248
33180: ST_TO_ADDR
// case nat of 1 :
33181: LD_VAR 0 4
33185: PUSH
33186: LD_INT 1
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33205
33194: POP
// tech := tech_lassight ; 2 :
33195: LD_ADDR_VAR 0 5
33199: PUSH
33200: LD_INT 12
33202: ST_TO_ADDR
33203: GO 33244
33205: LD_INT 2
33207: DOUBLE
33208: EQUAL
33209: IFTRUE 33213
33211: GO 33224
33213: POP
// tech := tech_mortar ; 3 :
33214: LD_ADDR_VAR 0 5
33218: PUSH
33219: LD_INT 41
33221: ST_TO_ADDR
33222: GO 33244
33224: LD_INT 3
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33232
33230: GO 33243
33232: POP
// tech := tech_bazooka ; end ;
33233: LD_ADDR_VAR 0 5
33237: PUSH
33238: LD_INT 44
33240: ST_TO_ADDR
33241: GO 33244
33243: POP
// if Researched ( side , tech ) then
33244: LD_VAR 0 3
33248: PPUSH
33249: LD_VAR 0 5
33253: PPUSH
33254: CALL_OW 325
33258: IFFALSE 33285
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33260: LD_ADDR_VAR 0 2
33264: PUSH
33265: LD_INT 5
33267: PUSH
33268: LD_INT 8
33270: PUSH
33271: LD_INT 9
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: PUSH
33279: LD_VAR 0 4
33283: ARRAY
33284: ST_TO_ADDR
// end ;
33285: LD_VAR 0 2
33289: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33290: LD_INT 0
33292: PPUSH
33293: PPUSH
33294: PPUSH
// if not mines then
33295: LD_VAR 0 2
33299: NOT
33300: IFFALSE 33304
// exit ;
33302: GO 33448
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33304: LD_ADDR_VAR 0 5
33308: PUSH
33309: LD_INT 81
33311: PUSH
33312: LD_VAR 0 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 3
33323: PUSH
33324: LD_INT 21
33326: PUSH
33327: LD_INT 3
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PPUSH
33342: CALL_OW 69
33346: ST_TO_ADDR
// for i in mines do
33347: LD_ADDR_VAR 0 4
33351: PUSH
33352: LD_VAR 0 2
33356: PUSH
33357: FOR_IN
33358: IFFALSE 33446
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33360: LD_VAR 0 4
33364: PUSH
33365: LD_INT 1
33367: ARRAY
33368: PPUSH
33369: LD_VAR 0 4
33373: PUSH
33374: LD_INT 2
33376: ARRAY
33377: PPUSH
33378: CALL_OW 458
33382: NOT
33383: IFFALSE 33387
// continue ;
33385: GO 33357
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33387: LD_VAR 0 4
33391: PUSH
33392: LD_INT 1
33394: ARRAY
33395: PPUSH
33396: LD_VAR 0 4
33400: PUSH
33401: LD_INT 2
33403: ARRAY
33404: PPUSH
33405: CALL_OW 428
33409: PUSH
33410: LD_VAR 0 5
33414: IN
33415: IFFALSE 33444
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33417: LD_VAR 0 4
33421: PUSH
33422: LD_INT 1
33424: ARRAY
33425: PPUSH
33426: LD_VAR 0 4
33430: PUSH
33431: LD_INT 2
33433: ARRAY
33434: PPUSH
33435: LD_VAR 0 1
33439: PPUSH
33440: CALL_OW 456
// end ;
33444: GO 33357
33446: POP
33447: POP
// end ;
33448: LD_VAR 0 3
33452: RET
// export function Count ( array ) ; begin
33453: LD_INT 0
33455: PPUSH
// result := array + 0 ;
33456: LD_ADDR_VAR 0 2
33460: PUSH
33461: LD_VAR 0 1
33465: PUSH
33466: LD_INT 0
33468: PLUS
33469: ST_TO_ADDR
// end ;
33470: LD_VAR 0 2
33474: RET
// export function IsEmpty ( building ) ; begin
33475: LD_INT 0
33477: PPUSH
// if not building then
33478: LD_VAR 0 1
33482: NOT
33483: IFFALSE 33487
// exit ;
33485: GO 33530
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33487: LD_ADDR_VAR 0 2
33491: PUSH
33492: LD_VAR 0 1
33496: PUSH
33497: LD_INT 22
33499: PUSH
33500: LD_VAR 0 1
33504: PPUSH
33505: CALL_OW 255
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 58
33516: PUSH
33517: EMPTY
33518: LIST
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PPUSH
33524: CALL_OW 69
33528: IN
33529: ST_TO_ADDR
// end ;
33530: LD_VAR 0 2
33534: RET
// export function IsNotFull ( building ) ; var places ; begin
33535: LD_INT 0
33537: PPUSH
33538: PPUSH
// if not building then
33539: LD_VAR 0 1
33543: NOT
33544: IFFALSE 33548
// exit ;
33546: GO 33576
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33548: LD_ADDR_VAR 0 2
33552: PUSH
33553: LD_VAR 0 1
33557: PPUSH
33558: LD_INT 3
33560: PUSH
33561: LD_INT 62
33563: PUSH
33564: EMPTY
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PPUSH
33571: CALL_OW 72
33575: ST_TO_ADDR
// end ;
33576: LD_VAR 0 2
33580: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33581: LD_INT 0
33583: PPUSH
33584: PPUSH
33585: PPUSH
33586: PPUSH
// tmp := [ ] ;
33587: LD_ADDR_VAR 0 3
33591: PUSH
33592: EMPTY
33593: ST_TO_ADDR
// list := [ ] ;
33594: LD_ADDR_VAR 0 5
33598: PUSH
33599: EMPTY
33600: ST_TO_ADDR
// for i = 16 to 25 do
33601: LD_ADDR_VAR 0 4
33605: PUSH
33606: DOUBLE
33607: LD_INT 16
33609: DEC
33610: ST_TO_ADDR
33611: LD_INT 25
33613: PUSH
33614: FOR_TO
33615: IFFALSE 33688
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33617: LD_ADDR_VAR 0 3
33621: PUSH
33622: LD_VAR 0 3
33626: PUSH
33627: LD_INT 22
33629: PUSH
33630: LD_VAR 0 1
33634: PPUSH
33635: CALL_OW 255
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 91
33646: PUSH
33647: LD_VAR 0 1
33651: PUSH
33652: LD_INT 6
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 30
33662: PUSH
33663: LD_VAR 0 4
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: PUSH
33677: EMPTY
33678: LIST
33679: PPUSH
33680: CALL_OW 69
33684: ADD
33685: ST_TO_ADDR
33686: GO 33614
33688: POP
33689: POP
// for i = 1 to tmp do
33690: LD_ADDR_VAR 0 4
33694: PUSH
33695: DOUBLE
33696: LD_INT 1
33698: DEC
33699: ST_TO_ADDR
33700: LD_VAR 0 3
33704: PUSH
33705: FOR_TO
33706: IFFALSE 33794
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33708: LD_ADDR_VAR 0 5
33712: PUSH
33713: LD_VAR 0 5
33717: PUSH
33718: LD_VAR 0 3
33722: PUSH
33723: LD_VAR 0 4
33727: ARRAY
33728: PPUSH
33729: CALL_OW 266
33733: PUSH
33734: LD_VAR 0 3
33738: PUSH
33739: LD_VAR 0 4
33743: ARRAY
33744: PPUSH
33745: CALL_OW 250
33749: PUSH
33750: LD_VAR 0 3
33754: PUSH
33755: LD_VAR 0 4
33759: ARRAY
33760: PPUSH
33761: CALL_OW 251
33765: PUSH
33766: LD_VAR 0 3
33770: PUSH
33771: LD_VAR 0 4
33775: ARRAY
33776: PPUSH
33777: CALL_OW 254
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: PUSH
33788: EMPTY
33789: LIST
33790: ADD
33791: ST_TO_ADDR
33792: GO 33705
33794: POP
33795: POP
// result := list ;
33796: LD_ADDR_VAR 0 2
33800: PUSH
33801: LD_VAR 0 5
33805: ST_TO_ADDR
// end ;
33806: LD_VAR 0 2
33810: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33811: LD_INT 0
33813: PPUSH
33814: PPUSH
33815: PPUSH
33816: PPUSH
33817: PPUSH
33818: PPUSH
33819: PPUSH
// if not factory then
33820: LD_VAR 0 1
33824: NOT
33825: IFFALSE 33829
// exit ;
33827: GO 34422
// if control = control_apeman then
33829: LD_VAR 0 4
33833: PUSH
33834: LD_INT 5
33836: EQUAL
33837: IFFALSE 33946
// begin tmp := UnitsInside ( factory ) ;
33839: LD_ADDR_VAR 0 8
33843: PUSH
33844: LD_VAR 0 1
33848: PPUSH
33849: CALL_OW 313
33853: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33854: LD_VAR 0 8
33858: PPUSH
33859: LD_INT 25
33861: PUSH
33862: LD_INT 12
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PPUSH
33869: CALL_OW 72
33873: NOT
33874: IFFALSE 33884
// control := control_manual ;
33876: LD_ADDR_VAR 0 4
33880: PUSH
33881: LD_INT 1
33883: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33884: LD_ADDR_VAR 0 8
33888: PUSH
33889: LD_VAR 0 1
33893: PPUSH
33894: CALL 33581 0 1
33898: ST_TO_ADDR
// if tmp then
33899: LD_VAR 0 8
33903: IFFALSE 33946
// begin for i in tmp do
33905: LD_ADDR_VAR 0 7
33909: PUSH
33910: LD_VAR 0 8
33914: PUSH
33915: FOR_IN
33916: IFFALSE 33944
// if i [ 1 ] = b_ext_radio then
33918: LD_VAR 0 7
33922: PUSH
33923: LD_INT 1
33925: ARRAY
33926: PUSH
33927: LD_INT 22
33929: EQUAL
33930: IFFALSE 33942
// begin control := control_remote ;
33932: LD_ADDR_VAR 0 4
33936: PUSH
33937: LD_INT 2
33939: ST_TO_ADDR
// break ;
33940: GO 33944
// end ;
33942: GO 33915
33944: POP
33945: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33946: LD_VAR 0 1
33950: PPUSH
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 3
33960: PPUSH
33961: LD_VAR 0 4
33965: PPUSH
33966: LD_VAR 0 5
33970: PPUSH
33971: CALL_OW 448
33975: IFFALSE 34010
// begin result := [ chassis , engine , control , weapon ] ;
33977: LD_ADDR_VAR 0 6
33981: PUSH
33982: LD_VAR 0 2
33986: PUSH
33987: LD_VAR 0 3
33991: PUSH
33992: LD_VAR 0 4
33996: PUSH
33997: LD_VAR 0 5
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: ST_TO_ADDR
// exit ;
34008: GO 34422
// end ; _chassis := AvailableChassisList ( factory ) ;
34010: LD_ADDR_VAR 0 9
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 475
34024: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34025: LD_ADDR_VAR 0 11
34029: PUSH
34030: LD_VAR 0 1
34034: PPUSH
34035: CALL_OW 476
34039: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34040: LD_ADDR_VAR 0 12
34044: PUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: CALL_OW 477
34054: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34055: LD_ADDR_VAR 0 10
34059: PUSH
34060: LD_VAR 0 1
34064: PPUSH
34065: CALL_OW 478
34069: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34070: LD_VAR 0 9
34074: NOT
34075: PUSH
34076: LD_VAR 0 11
34080: NOT
34081: OR
34082: PUSH
34083: LD_VAR 0 12
34087: NOT
34088: OR
34089: PUSH
34090: LD_VAR 0 10
34094: NOT
34095: OR
34096: IFFALSE 34131
// begin result := [ chassis , engine , control , weapon ] ;
34098: LD_ADDR_VAR 0 6
34102: PUSH
34103: LD_VAR 0 2
34107: PUSH
34108: LD_VAR 0 3
34112: PUSH
34113: LD_VAR 0 4
34117: PUSH
34118: LD_VAR 0 5
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: ST_TO_ADDR
// exit ;
34129: GO 34422
// end ; if not chassis in _chassis then
34131: LD_VAR 0 2
34135: PUSH
34136: LD_VAR 0 9
34140: IN
34141: NOT
34142: IFFALSE 34168
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34144: LD_ADDR_VAR 0 2
34148: PUSH
34149: LD_VAR 0 9
34153: PUSH
34154: LD_INT 1
34156: PPUSH
34157: LD_VAR 0 9
34161: PPUSH
34162: CALL_OW 12
34166: ARRAY
34167: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34168: LD_VAR 0 2
34172: PPUSH
34173: LD_VAR 0 3
34177: PPUSH
34178: CALL 34427 0 2
34182: NOT
34183: IFFALSE 34242
// repeat engine := _engine [ 1 ] ;
34185: LD_ADDR_VAR 0 3
34189: PUSH
34190: LD_VAR 0 11
34194: PUSH
34195: LD_INT 1
34197: ARRAY
34198: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34199: LD_ADDR_VAR 0 11
34203: PUSH
34204: LD_VAR 0 11
34208: PPUSH
34209: LD_INT 1
34211: PPUSH
34212: CALL_OW 3
34216: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34217: LD_VAR 0 2
34221: PPUSH
34222: LD_VAR 0 3
34226: PPUSH
34227: CALL 34427 0 2
34231: PUSH
34232: LD_VAR 0 11
34236: PUSH
34237: EMPTY
34238: EQUAL
34239: OR
34240: IFFALSE 34185
// if not control in _control then
34242: LD_VAR 0 4
34246: PUSH
34247: LD_VAR 0 12
34251: IN
34252: NOT
34253: IFFALSE 34279
// control := _control [ rand ( 1 , _control ) ] ;
34255: LD_ADDR_VAR 0 4
34259: PUSH
34260: LD_VAR 0 12
34264: PUSH
34265: LD_INT 1
34267: PPUSH
34268: LD_VAR 0 12
34272: PPUSH
34273: CALL_OW 12
34277: ARRAY
34278: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34279: LD_VAR 0 2
34283: PPUSH
34284: LD_VAR 0 5
34288: PPUSH
34289: CALL 34647 0 2
34293: NOT
34294: IFFALSE 34353
// repeat weapon := _weapon [ 1 ] ;
34296: LD_ADDR_VAR 0 5
34300: PUSH
34301: LD_VAR 0 10
34305: PUSH
34306: LD_INT 1
34308: ARRAY
34309: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34310: LD_ADDR_VAR 0 10
34314: PUSH
34315: LD_VAR 0 10
34319: PPUSH
34320: LD_INT 1
34322: PPUSH
34323: CALL_OW 3
34327: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34328: LD_VAR 0 2
34332: PPUSH
34333: LD_VAR 0 5
34337: PPUSH
34338: CALL 34647 0 2
34342: PUSH
34343: LD_VAR 0 10
34347: PUSH
34348: EMPTY
34349: EQUAL
34350: OR
34351: IFFALSE 34296
// result := [ ] ;
34353: LD_ADDR_VAR 0 6
34357: PUSH
34358: EMPTY
34359: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34360: LD_VAR 0 1
34364: PPUSH
34365: LD_VAR 0 2
34369: PPUSH
34370: LD_VAR 0 3
34374: PPUSH
34375: LD_VAR 0 4
34379: PPUSH
34380: LD_VAR 0 5
34384: PPUSH
34385: CALL_OW 448
34389: IFFALSE 34422
// result := [ chassis , engine , control , weapon ] ;
34391: LD_ADDR_VAR 0 6
34395: PUSH
34396: LD_VAR 0 2
34400: PUSH
34401: LD_VAR 0 3
34405: PUSH
34406: LD_VAR 0 4
34410: PUSH
34411: LD_VAR 0 5
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
// end ;
34422: LD_VAR 0 6
34426: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34427: LD_INT 0
34429: PPUSH
// if not chassis or not engine then
34430: LD_VAR 0 1
34434: NOT
34435: PUSH
34436: LD_VAR 0 2
34440: NOT
34441: OR
34442: IFFALSE 34446
// exit ;
34444: GO 34642
// case engine of engine_solar :
34446: LD_VAR 0 2
34450: PUSH
34451: LD_INT 2
34453: DOUBLE
34454: EQUAL
34455: IFTRUE 34459
34457: GO 34497
34459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34460: LD_ADDR_VAR 0 3
34464: PUSH
34465: LD_INT 11
34467: PUSH
34468: LD_INT 12
34470: PUSH
34471: LD_INT 13
34473: PUSH
34474: LD_INT 14
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 3
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: ST_TO_ADDR
34495: GO 34626
34497: LD_INT 1
34499: DOUBLE
34500: EQUAL
34501: IFTRUE 34505
34503: GO 34567
34505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34506: LD_ADDR_VAR 0 3
34510: PUSH
34511: LD_INT 11
34513: PUSH
34514: LD_INT 12
34516: PUSH
34517: LD_INT 13
34519: PUSH
34520: LD_INT 14
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: LD_INT 4
34534: PUSH
34535: LD_INT 5
34537: PUSH
34538: LD_INT 21
34540: PUSH
34541: LD_INT 23
34543: PUSH
34544: LD_INT 22
34546: PUSH
34547: LD_INT 24
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: ST_TO_ADDR
34565: GO 34626
34567: LD_INT 3
34569: DOUBLE
34570: EQUAL
34571: IFTRUE 34575
34573: GO 34625
34575: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34576: LD_ADDR_VAR 0 3
34580: PUSH
34581: LD_INT 13
34583: PUSH
34584: LD_INT 14
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: LD_INT 5
34598: PUSH
34599: LD_INT 21
34601: PUSH
34602: LD_INT 22
34604: PUSH
34605: LD_INT 23
34607: PUSH
34608: LD_INT 24
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: ST_TO_ADDR
34623: GO 34626
34625: POP
// result := ( chassis in result ) ;
34626: LD_ADDR_VAR 0 3
34630: PUSH
34631: LD_VAR 0 1
34635: PUSH
34636: LD_VAR 0 3
34640: IN
34641: ST_TO_ADDR
// end ;
34642: LD_VAR 0 3
34646: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34647: LD_INT 0
34649: PPUSH
// if not chassis or not weapon then
34650: LD_VAR 0 1
34654: NOT
34655: PUSH
34656: LD_VAR 0 2
34660: NOT
34661: OR
34662: IFFALSE 34666
// exit ;
34664: GO 35726
// case weapon of us_machine_gun :
34666: LD_VAR 0 2
34670: PUSH
34671: LD_INT 2
34673: DOUBLE
34674: EQUAL
34675: IFTRUE 34679
34677: GO 34709
34679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34680: LD_ADDR_VAR 0 3
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: LD_INT 3
34693: PUSH
34694: LD_INT 4
34696: PUSH
34697: LD_INT 5
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: ST_TO_ADDR
34707: GO 35710
34709: LD_INT 3
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34717
34715: GO 34747
34717: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34718: LD_ADDR_VAR 0 3
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: LD_INT 3
34731: PUSH
34732: LD_INT 4
34734: PUSH
34735: LD_INT 5
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
34745: GO 35710
34747: LD_INT 11
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34785
34755: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34756: LD_ADDR_VAR 0 3
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: LD_INT 4
34772: PUSH
34773: LD_INT 5
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: ST_TO_ADDR
34783: GO 35710
34785: LD_INT 4
34787: DOUBLE
34788: EQUAL
34789: IFTRUE 34793
34791: GO 34819
34793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34794: LD_ADDR_VAR 0 3
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 3
34804: PUSH
34805: LD_INT 4
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: ST_TO_ADDR
34817: GO 35710
34819: LD_INT 5
34821: DOUBLE
34822: EQUAL
34823: IFTRUE 34827
34825: GO 34853
34827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34828: LD_ADDR_VAR 0 3
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 5
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
34851: GO 35710
34853: LD_INT 9
34855: DOUBLE
34856: EQUAL
34857: IFTRUE 34861
34859: GO 34887
34861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34862: LD_ADDR_VAR 0 3
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: LD_INT 3
34872: PUSH
34873: LD_INT 4
34875: PUSH
34876: LD_INT 5
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: ST_TO_ADDR
34885: GO 35710
34887: LD_INT 7
34889: DOUBLE
34890: EQUAL
34891: IFTRUE 34895
34893: GO 34921
34895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34896: LD_ADDR_VAR 0 3
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: LD_INT 4
34909: PUSH
34910: LD_INT 5
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: ST_TO_ADDR
34919: GO 35710
34921: LD_INT 12
34923: DOUBLE
34924: EQUAL
34925: IFTRUE 34929
34927: GO 34955
34929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34930: LD_ADDR_VAR 0 3
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: LD_INT 3
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: LD_INT 5
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: ST_TO_ADDR
34953: GO 35710
34955: LD_INT 13
34957: DOUBLE
34958: EQUAL
34959: IFTRUE 34963
34961: GO 34989
34963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34964: LD_ADDR_VAR 0 3
34968: PUSH
34969: LD_INT 2
34971: PUSH
34972: LD_INT 3
34974: PUSH
34975: LD_INT 4
34977: PUSH
34978: LD_INT 5
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: ST_TO_ADDR
34987: GO 35710
34989: LD_INT 14
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35015
34997: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34998: LD_ADDR_VAR 0 3
35002: PUSH
35003: LD_INT 4
35005: PUSH
35006: LD_INT 5
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: ST_TO_ADDR
35013: GO 35710
35015: LD_INT 6
35017: DOUBLE
35018: EQUAL
35019: IFTRUE 35023
35021: GO 35041
35023: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35024: LD_ADDR_VAR 0 3
35028: PUSH
35029: LD_INT 4
35031: PUSH
35032: LD_INT 5
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: ST_TO_ADDR
35039: GO 35710
35041: LD_INT 10
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35049
35047: GO 35067
35049: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35050: LD_ADDR_VAR 0 3
35054: PUSH
35055: LD_INT 4
35057: PUSH
35058: LD_INT 5
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: ST_TO_ADDR
35065: GO 35710
35067: LD_INT 22
35069: DOUBLE
35070: EQUAL
35071: IFTRUE 35075
35073: GO 35101
35075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35076: LD_ADDR_VAR 0 3
35080: PUSH
35081: LD_INT 11
35083: PUSH
35084: LD_INT 12
35086: PUSH
35087: LD_INT 13
35089: PUSH
35090: LD_INT 14
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: ST_TO_ADDR
35099: GO 35710
35101: LD_INT 23
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35135
35109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35110: LD_ADDR_VAR 0 3
35114: PUSH
35115: LD_INT 11
35117: PUSH
35118: LD_INT 12
35120: PUSH
35121: LD_INT 13
35123: PUSH
35124: LD_INT 14
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
35133: GO 35710
35135: LD_INT 24
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35143
35141: GO 35169
35143: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35144: LD_ADDR_VAR 0 3
35148: PUSH
35149: LD_INT 11
35151: PUSH
35152: LD_INT 12
35154: PUSH
35155: LD_INT 13
35157: PUSH
35158: LD_INT 14
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: ST_TO_ADDR
35167: GO 35710
35169: LD_INT 30
35171: DOUBLE
35172: EQUAL
35173: IFTRUE 35177
35175: GO 35203
35177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35178: LD_ADDR_VAR 0 3
35182: PUSH
35183: LD_INT 11
35185: PUSH
35186: LD_INT 12
35188: PUSH
35189: LD_INT 13
35191: PUSH
35192: LD_INT 14
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: ST_TO_ADDR
35201: GO 35710
35203: LD_INT 25
35205: DOUBLE
35206: EQUAL
35207: IFTRUE 35211
35209: GO 35229
35211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35212: LD_ADDR_VAR 0 3
35216: PUSH
35217: LD_INT 13
35219: PUSH
35220: LD_INT 14
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: ST_TO_ADDR
35227: GO 35710
35229: LD_INT 27
35231: DOUBLE
35232: EQUAL
35233: IFTRUE 35237
35235: GO 35255
35237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35238: LD_ADDR_VAR 0 3
35242: PUSH
35243: LD_INT 13
35245: PUSH
35246: LD_INT 14
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: ST_TO_ADDR
35253: GO 35710
35255: LD_INT 92
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35263
35261: GO 35289
35263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35264: LD_ADDR_VAR 0 3
35268: PUSH
35269: LD_INT 11
35271: PUSH
35272: LD_INT 12
35274: PUSH
35275: LD_INT 13
35277: PUSH
35278: LD_INT 14
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: ST_TO_ADDR
35287: GO 35710
35289: LD_INT 28
35291: DOUBLE
35292: EQUAL
35293: IFTRUE 35297
35295: GO 35315
35297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35298: LD_ADDR_VAR 0 3
35302: PUSH
35303: LD_INT 13
35305: PUSH
35306: LD_INT 14
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: ST_TO_ADDR
35313: GO 35710
35315: LD_INT 29
35317: DOUBLE
35318: EQUAL
35319: IFTRUE 35323
35321: GO 35341
35323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35324: LD_ADDR_VAR 0 3
35328: PUSH
35329: LD_INT 13
35331: PUSH
35332: LD_INT 14
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: ST_TO_ADDR
35339: GO 35710
35341: LD_INT 31
35343: DOUBLE
35344: EQUAL
35345: IFTRUE 35349
35347: GO 35367
35349: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35350: LD_ADDR_VAR 0 3
35354: PUSH
35355: LD_INT 13
35357: PUSH
35358: LD_INT 14
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: ST_TO_ADDR
35365: GO 35710
35367: LD_INT 26
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35375
35373: GO 35393
35375: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35376: LD_ADDR_VAR 0 3
35380: PUSH
35381: LD_INT 13
35383: PUSH
35384: LD_INT 14
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: ST_TO_ADDR
35391: GO 35710
35393: LD_INT 42
35395: DOUBLE
35396: EQUAL
35397: IFTRUE 35401
35399: GO 35427
35401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35402: LD_ADDR_VAR 0 3
35406: PUSH
35407: LD_INT 21
35409: PUSH
35410: LD_INT 22
35412: PUSH
35413: LD_INT 23
35415: PUSH
35416: LD_INT 24
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: ST_TO_ADDR
35425: GO 35710
35427: LD_INT 43
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35435
35433: GO 35461
35435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35436: LD_ADDR_VAR 0 3
35440: PUSH
35441: LD_INT 21
35443: PUSH
35444: LD_INT 22
35446: PUSH
35447: LD_INT 23
35449: PUSH
35450: LD_INT 24
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: ST_TO_ADDR
35459: GO 35710
35461: LD_INT 44
35463: DOUBLE
35464: EQUAL
35465: IFTRUE 35469
35467: GO 35495
35469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35470: LD_ADDR_VAR 0 3
35474: PUSH
35475: LD_INT 21
35477: PUSH
35478: LD_INT 22
35480: PUSH
35481: LD_INT 23
35483: PUSH
35484: LD_INT 24
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: ST_TO_ADDR
35493: GO 35710
35495: LD_INT 45
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35503
35501: GO 35529
35503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35504: LD_ADDR_VAR 0 3
35508: PUSH
35509: LD_INT 21
35511: PUSH
35512: LD_INT 22
35514: PUSH
35515: LD_INT 23
35517: PUSH
35518: LD_INT 24
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
35527: GO 35710
35529: LD_INT 49
35531: DOUBLE
35532: EQUAL
35533: IFTRUE 35537
35535: GO 35563
35537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35538: LD_ADDR_VAR 0 3
35542: PUSH
35543: LD_INT 21
35545: PUSH
35546: LD_INT 22
35548: PUSH
35549: LD_INT 23
35551: PUSH
35552: LD_INT 24
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: ST_TO_ADDR
35561: GO 35710
35563: LD_INT 51
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35571
35569: GO 35597
35571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35572: LD_ADDR_VAR 0 3
35576: PUSH
35577: LD_INT 21
35579: PUSH
35580: LD_INT 22
35582: PUSH
35583: LD_INT 23
35585: PUSH
35586: LD_INT 24
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: ST_TO_ADDR
35595: GO 35710
35597: LD_INT 52
35599: DOUBLE
35600: EQUAL
35601: IFTRUE 35605
35603: GO 35631
35605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35606: LD_ADDR_VAR 0 3
35610: PUSH
35611: LD_INT 21
35613: PUSH
35614: LD_INT 22
35616: PUSH
35617: LD_INT 23
35619: PUSH
35620: LD_INT 24
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: ST_TO_ADDR
35629: GO 35710
35631: LD_INT 53
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35639
35637: GO 35657
35639: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35640: LD_ADDR_VAR 0 3
35644: PUSH
35645: LD_INT 23
35647: PUSH
35648: LD_INT 24
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: ST_TO_ADDR
35655: GO 35710
35657: LD_INT 46
35659: DOUBLE
35660: EQUAL
35661: IFTRUE 35665
35663: GO 35683
35665: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35666: LD_ADDR_VAR 0 3
35670: PUSH
35671: LD_INT 23
35673: PUSH
35674: LD_INT 24
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: ST_TO_ADDR
35681: GO 35710
35683: LD_INT 47
35685: DOUBLE
35686: EQUAL
35687: IFTRUE 35691
35689: GO 35709
35691: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35692: LD_ADDR_VAR 0 3
35696: PUSH
35697: LD_INT 23
35699: PUSH
35700: LD_INT 24
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: ST_TO_ADDR
35707: GO 35710
35709: POP
// result := ( chassis in result ) ;
35710: LD_ADDR_VAR 0 3
35714: PUSH
35715: LD_VAR 0 1
35719: PUSH
35720: LD_VAR 0 3
35724: IN
35725: ST_TO_ADDR
// end ;
35726: LD_VAR 0 3
35730: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35731: LD_INT 0
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
35737: PPUSH
35738: PPUSH
35739: PPUSH
// result := array ;
35740: LD_ADDR_VAR 0 5
35744: PUSH
35745: LD_VAR 0 1
35749: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35750: LD_VAR 0 1
35754: NOT
35755: PUSH
35756: LD_VAR 0 2
35760: NOT
35761: OR
35762: PUSH
35763: LD_VAR 0 3
35767: NOT
35768: OR
35769: PUSH
35770: LD_VAR 0 2
35774: PUSH
35775: LD_VAR 0 1
35779: GREATER
35780: OR
35781: PUSH
35782: LD_VAR 0 3
35786: PUSH
35787: LD_VAR 0 1
35791: GREATER
35792: OR
35793: IFFALSE 35797
// exit ;
35795: GO 36093
// if direction then
35797: LD_VAR 0 4
35801: IFFALSE 35865
// begin d := 1 ;
35803: LD_ADDR_VAR 0 9
35807: PUSH
35808: LD_INT 1
35810: ST_TO_ADDR
// if i_from > i_to then
35811: LD_VAR 0 2
35815: PUSH
35816: LD_VAR 0 3
35820: GREATER
35821: IFFALSE 35847
// length := ( array - i_from ) + i_to else
35823: LD_ADDR_VAR 0 11
35827: PUSH
35828: LD_VAR 0 1
35832: PUSH
35833: LD_VAR 0 2
35837: MINUS
35838: PUSH
35839: LD_VAR 0 3
35843: PLUS
35844: ST_TO_ADDR
35845: GO 35863
// length := i_to - i_from ;
35847: LD_ADDR_VAR 0 11
35851: PUSH
35852: LD_VAR 0 3
35856: PUSH
35857: LD_VAR 0 2
35861: MINUS
35862: ST_TO_ADDR
// end else
35863: GO 35926
// begin d := - 1 ;
35865: LD_ADDR_VAR 0 9
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: ST_TO_ADDR
// if i_from > i_to then
35874: LD_VAR 0 2
35878: PUSH
35879: LD_VAR 0 3
35883: GREATER
35884: IFFALSE 35904
// length := i_from - i_to else
35886: LD_ADDR_VAR 0 11
35890: PUSH
35891: LD_VAR 0 2
35895: PUSH
35896: LD_VAR 0 3
35900: MINUS
35901: ST_TO_ADDR
35902: GO 35926
// length := ( array - i_to ) + i_from ;
35904: LD_ADDR_VAR 0 11
35908: PUSH
35909: LD_VAR 0 1
35913: PUSH
35914: LD_VAR 0 3
35918: MINUS
35919: PUSH
35920: LD_VAR 0 2
35924: PLUS
35925: ST_TO_ADDR
// end ; if not length then
35926: LD_VAR 0 11
35930: NOT
35931: IFFALSE 35935
// exit ;
35933: GO 36093
// tmp := array ;
35935: LD_ADDR_VAR 0 10
35939: PUSH
35940: LD_VAR 0 1
35944: ST_TO_ADDR
// for i = 1 to length do
35945: LD_ADDR_VAR 0 6
35949: PUSH
35950: DOUBLE
35951: LD_INT 1
35953: DEC
35954: ST_TO_ADDR
35955: LD_VAR 0 11
35959: PUSH
35960: FOR_TO
35961: IFFALSE 36081
// begin for j = 1 to array do
35963: LD_ADDR_VAR 0 7
35967: PUSH
35968: DOUBLE
35969: LD_INT 1
35971: DEC
35972: ST_TO_ADDR
35973: LD_VAR 0 1
35977: PUSH
35978: FOR_TO
35979: IFFALSE 36067
// begin k := j + d ;
35981: LD_ADDR_VAR 0 8
35985: PUSH
35986: LD_VAR 0 7
35990: PUSH
35991: LD_VAR 0 9
35995: PLUS
35996: ST_TO_ADDR
// if k > array then
35997: LD_VAR 0 8
36001: PUSH
36002: LD_VAR 0 1
36006: GREATER
36007: IFFALSE 36017
// k := 1 ;
36009: LD_ADDR_VAR 0 8
36013: PUSH
36014: LD_INT 1
36016: ST_TO_ADDR
// if not k then
36017: LD_VAR 0 8
36021: NOT
36022: IFFALSE 36034
// k := array ;
36024: LD_ADDR_VAR 0 8
36028: PUSH
36029: LD_VAR 0 1
36033: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36034: LD_ADDR_VAR 0 10
36038: PUSH
36039: LD_VAR 0 10
36043: PPUSH
36044: LD_VAR 0 8
36048: PPUSH
36049: LD_VAR 0 1
36053: PUSH
36054: LD_VAR 0 7
36058: ARRAY
36059: PPUSH
36060: CALL_OW 1
36064: ST_TO_ADDR
// end ;
36065: GO 35978
36067: POP
36068: POP
// array := tmp ;
36069: LD_ADDR_VAR 0 1
36073: PUSH
36074: LD_VAR 0 10
36078: ST_TO_ADDR
// end ;
36079: GO 35960
36081: POP
36082: POP
// result := array ;
36083: LD_ADDR_VAR 0 5
36087: PUSH
36088: LD_VAR 0 1
36092: ST_TO_ADDR
// end ;
36093: LD_VAR 0 5
36097: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36098: LD_INT 0
36100: PPUSH
36101: PPUSH
// result := 0 ;
36102: LD_ADDR_VAR 0 3
36106: PUSH
36107: LD_INT 0
36109: ST_TO_ADDR
// if not array or not value in array then
36110: LD_VAR 0 1
36114: NOT
36115: PUSH
36116: LD_VAR 0 2
36120: PUSH
36121: LD_VAR 0 1
36125: IN
36126: NOT
36127: OR
36128: IFFALSE 36132
// exit ;
36130: GO 36186
// for i = 1 to array do
36132: LD_ADDR_VAR 0 4
36136: PUSH
36137: DOUBLE
36138: LD_INT 1
36140: DEC
36141: ST_TO_ADDR
36142: LD_VAR 0 1
36146: PUSH
36147: FOR_TO
36148: IFFALSE 36184
// if value = array [ i ] then
36150: LD_VAR 0 2
36154: PUSH
36155: LD_VAR 0 1
36159: PUSH
36160: LD_VAR 0 4
36164: ARRAY
36165: EQUAL
36166: IFFALSE 36182
// begin result := i ;
36168: LD_ADDR_VAR 0 3
36172: PUSH
36173: LD_VAR 0 4
36177: ST_TO_ADDR
// exit ;
36178: POP
36179: POP
36180: GO 36186
// end ;
36182: GO 36147
36184: POP
36185: POP
// end ;
36186: LD_VAR 0 3
36190: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36191: LD_INT 0
36193: PPUSH
// vc_chassis := chassis ;
36194: LD_ADDR_OWVAR 37
36198: PUSH
36199: LD_VAR 0 1
36203: ST_TO_ADDR
// vc_engine := engine ;
36204: LD_ADDR_OWVAR 39
36208: PUSH
36209: LD_VAR 0 2
36213: ST_TO_ADDR
// vc_control := control ;
36214: LD_ADDR_OWVAR 38
36218: PUSH
36219: LD_VAR 0 3
36223: ST_TO_ADDR
// vc_weapon := weapon ;
36224: LD_ADDR_OWVAR 40
36228: PUSH
36229: LD_VAR 0 4
36233: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36234: LD_ADDR_OWVAR 41
36238: PUSH
36239: LD_VAR 0 5
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 6
36248: RET
// export function WantPlant ( unit ) ; var task ; begin
36249: LD_INT 0
36251: PPUSH
36252: PPUSH
// result := false ;
36253: LD_ADDR_VAR 0 2
36257: PUSH
36258: LD_INT 0
36260: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: LD_VAR 0 1
36270: PPUSH
36271: CALL_OW 437
36275: ST_TO_ADDR
// if task then
36276: LD_VAR 0 3
36280: IFFALSE 36308
// if task [ 1 ] [ 1 ] = p then
36282: LD_VAR 0 3
36286: PUSH
36287: LD_INT 1
36289: ARRAY
36290: PUSH
36291: LD_INT 1
36293: ARRAY
36294: PUSH
36295: LD_STRING p
36297: EQUAL
36298: IFFALSE 36308
// result := true ;
36300: LD_ADDR_VAR 0 2
36304: PUSH
36305: LD_INT 1
36307: ST_TO_ADDR
// end ;
36308: LD_VAR 0 2
36312: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36313: LD_INT 0
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
// if pos < 1 then
36319: LD_VAR 0 2
36323: PUSH
36324: LD_INT 1
36326: LESS
36327: IFFALSE 36331
// exit ;
36329: GO 36634
// if pos = 1 then
36331: LD_VAR 0 2
36335: PUSH
36336: LD_INT 1
36338: EQUAL
36339: IFFALSE 36372
// result := Replace ( arr , pos [ 1 ] , value ) else
36341: LD_ADDR_VAR 0 4
36345: PUSH
36346: LD_VAR 0 1
36350: PPUSH
36351: LD_VAR 0 2
36355: PUSH
36356: LD_INT 1
36358: ARRAY
36359: PPUSH
36360: LD_VAR 0 3
36364: PPUSH
36365: CALL_OW 1
36369: ST_TO_ADDR
36370: GO 36634
// begin tmp := arr ;
36372: LD_ADDR_VAR 0 6
36376: PUSH
36377: LD_VAR 0 1
36381: ST_TO_ADDR
// s_arr := [ tmp ] ;
36382: LD_ADDR_VAR 0 7
36386: PUSH
36387: LD_VAR 0 6
36391: PUSH
36392: EMPTY
36393: LIST
36394: ST_TO_ADDR
// for i = 1 to pos - 1 do
36395: LD_ADDR_VAR 0 5
36399: PUSH
36400: DOUBLE
36401: LD_INT 1
36403: DEC
36404: ST_TO_ADDR
36405: LD_VAR 0 2
36409: PUSH
36410: LD_INT 1
36412: MINUS
36413: PUSH
36414: FOR_TO
36415: IFFALSE 36460
// begin tmp := tmp [ pos [ i ] ] ;
36417: LD_ADDR_VAR 0 6
36421: PUSH
36422: LD_VAR 0 6
36426: PUSH
36427: LD_VAR 0 2
36431: PUSH
36432: LD_VAR 0 5
36436: ARRAY
36437: ARRAY
36438: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36439: LD_ADDR_VAR 0 7
36443: PUSH
36444: LD_VAR 0 7
36448: PUSH
36449: LD_VAR 0 6
36453: PUSH
36454: EMPTY
36455: LIST
36456: ADD
36457: ST_TO_ADDR
// end ;
36458: GO 36414
36460: POP
36461: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36462: LD_ADDR_VAR 0 6
36466: PUSH
36467: LD_VAR 0 6
36471: PPUSH
36472: LD_VAR 0 2
36476: PUSH
36477: LD_VAR 0 2
36481: ARRAY
36482: PPUSH
36483: LD_VAR 0 3
36487: PPUSH
36488: CALL_OW 1
36492: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36493: LD_ADDR_VAR 0 7
36497: PUSH
36498: LD_VAR 0 7
36502: PPUSH
36503: LD_VAR 0 7
36507: PPUSH
36508: LD_VAR 0 6
36512: PPUSH
36513: CALL_OW 1
36517: ST_TO_ADDR
// for i = s_arr downto 2 do
36518: LD_ADDR_VAR 0 5
36522: PUSH
36523: DOUBLE
36524: LD_VAR 0 7
36528: INC
36529: ST_TO_ADDR
36530: LD_INT 2
36532: PUSH
36533: FOR_DOWNTO
36534: IFFALSE 36618
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36536: LD_ADDR_VAR 0 6
36540: PUSH
36541: LD_VAR 0 7
36545: PUSH
36546: LD_VAR 0 5
36550: PUSH
36551: LD_INT 1
36553: MINUS
36554: ARRAY
36555: PPUSH
36556: LD_VAR 0 2
36560: PUSH
36561: LD_VAR 0 5
36565: PUSH
36566: LD_INT 1
36568: MINUS
36569: ARRAY
36570: PPUSH
36571: LD_VAR 0 7
36575: PUSH
36576: LD_VAR 0 5
36580: ARRAY
36581: PPUSH
36582: CALL_OW 1
36586: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36587: LD_ADDR_VAR 0 7
36591: PUSH
36592: LD_VAR 0 7
36596: PPUSH
36597: LD_VAR 0 5
36601: PUSH
36602: LD_INT 1
36604: MINUS
36605: PPUSH
36606: LD_VAR 0 6
36610: PPUSH
36611: CALL_OW 1
36615: ST_TO_ADDR
// end ;
36616: GO 36533
36618: POP
36619: POP
// result := s_arr [ 1 ] ;
36620: LD_ADDR_VAR 0 4
36624: PUSH
36625: LD_VAR 0 7
36629: PUSH
36630: LD_INT 1
36632: ARRAY
36633: ST_TO_ADDR
// end ; end ;
36634: LD_VAR 0 4
36638: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36639: LD_INT 0
36641: PPUSH
36642: PPUSH
// if not list then
36643: LD_VAR 0 1
36647: NOT
36648: IFFALSE 36652
// exit ;
36650: GO 36743
// i := list [ pos1 ] ;
36652: LD_ADDR_VAR 0 5
36656: PUSH
36657: LD_VAR 0 1
36661: PUSH
36662: LD_VAR 0 2
36666: ARRAY
36667: ST_TO_ADDR
// if not i then
36668: LD_VAR 0 5
36672: NOT
36673: IFFALSE 36677
// exit ;
36675: GO 36743
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36677: LD_ADDR_VAR 0 1
36681: PUSH
36682: LD_VAR 0 1
36686: PPUSH
36687: LD_VAR 0 2
36691: PPUSH
36692: LD_VAR 0 1
36696: PUSH
36697: LD_VAR 0 3
36701: ARRAY
36702: PPUSH
36703: CALL_OW 1
36707: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36708: LD_ADDR_VAR 0 1
36712: PUSH
36713: LD_VAR 0 1
36717: PPUSH
36718: LD_VAR 0 3
36722: PPUSH
36723: LD_VAR 0 5
36727: PPUSH
36728: CALL_OW 1
36732: ST_TO_ADDR
// result := list ;
36733: LD_ADDR_VAR 0 4
36737: PUSH
36738: LD_VAR 0 1
36742: ST_TO_ADDR
// end ;
36743: LD_VAR 0 4
36747: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36748: LD_INT 0
36750: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36751: LD_ADDR_VAR 0 5
36755: PUSH
36756: LD_VAR 0 1
36760: PPUSH
36761: CALL_OW 250
36765: PPUSH
36766: LD_VAR 0 1
36770: PPUSH
36771: CALL_OW 251
36775: PPUSH
36776: LD_VAR 0 2
36780: PPUSH
36781: LD_VAR 0 3
36785: PPUSH
36786: LD_VAR 0 4
36790: PPUSH
36791: CALL 37169 0 5
36795: ST_TO_ADDR
// end ;
36796: LD_VAR 0 5
36800: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36801: LD_INT 0
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
// if not list or not unit then
36807: LD_VAR 0 2
36811: NOT
36812: PUSH
36813: LD_VAR 0 1
36817: NOT
36818: OR
36819: IFFALSE 36823
// exit ;
36821: GO 37164
// result := [ ] ;
36823: LD_ADDR_VAR 0 5
36827: PUSH
36828: EMPTY
36829: ST_TO_ADDR
// for i in list do
36830: LD_ADDR_VAR 0 6
36834: PUSH
36835: LD_VAR 0 2
36839: PUSH
36840: FOR_IN
36841: IFFALSE 37059
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36843: LD_ADDR_VAR 0 8
36847: PUSH
36848: LD_VAR 0 1
36852: PPUSH
36853: LD_VAR 0 6
36857: PUSH
36858: LD_INT 1
36860: ARRAY
36861: PPUSH
36862: LD_VAR 0 6
36866: PUSH
36867: LD_INT 2
36869: ARRAY
36870: PPUSH
36871: CALL_OW 297
36875: ST_TO_ADDR
// if not Count ( result ) then
36876: LD_VAR 0 5
36880: PPUSH
36881: CALL 33453 0 1
36885: NOT
36886: IFFALSE 36919
// begin result := Join ( result , [ i , tmp ] ) ;
36888: LD_ADDR_VAR 0 5
36892: PUSH
36893: LD_VAR 0 5
36897: PPUSH
36898: LD_VAR 0 6
36902: PUSH
36903: LD_VAR 0 8
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PPUSH
36912: CALL 69042 0 2
36916: ST_TO_ADDR
// continue ;
36917: GO 36840
// end ; if result [ result ] [ 2 ] <= tmp then
36919: LD_VAR 0 5
36923: PUSH
36924: LD_VAR 0 5
36928: ARRAY
36929: PUSH
36930: LD_INT 2
36932: ARRAY
36933: PUSH
36934: LD_VAR 0 8
36938: LESSEQUAL
36939: IFFALSE 36972
// result := Join ( result , [ i , tmp ] ) else
36941: LD_ADDR_VAR 0 5
36945: PUSH
36946: LD_VAR 0 5
36950: PPUSH
36951: LD_VAR 0 6
36955: PUSH
36956: LD_VAR 0 8
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PPUSH
36965: CALL 69042 0 2
36969: ST_TO_ADDR
36970: GO 37057
// begin for j := 1 to Count ( result ) do
36972: LD_ADDR_VAR 0 7
36976: PUSH
36977: DOUBLE
36978: LD_INT 1
36980: DEC
36981: ST_TO_ADDR
36982: LD_VAR 0 5
36986: PPUSH
36987: CALL 33453 0 1
36991: PUSH
36992: FOR_TO
36993: IFFALSE 37055
// begin if tmp < result [ j ] [ 2 ] then
36995: LD_VAR 0 8
36999: PUSH
37000: LD_VAR 0 5
37004: PUSH
37005: LD_VAR 0 7
37009: ARRAY
37010: PUSH
37011: LD_INT 2
37013: ARRAY
37014: LESS
37015: IFFALSE 37053
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37017: LD_ADDR_VAR 0 5
37021: PUSH
37022: LD_VAR 0 5
37026: PPUSH
37027: LD_VAR 0 7
37031: PPUSH
37032: LD_VAR 0 6
37036: PUSH
37037: LD_VAR 0 8
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PPUSH
37046: CALL_OW 2
37050: ST_TO_ADDR
// break ;
37051: GO 37055
// end ; end ;
37053: GO 36992
37055: POP
37056: POP
// end ; end ;
37057: GO 36840
37059: POP
37060: POP
// if result and not asc then
37061: LD_VAR 0 5
37065: PUSH
37066: LD_VAR 0 3
37070: NOT
37071: AND
37072: IFFALSE 37089
// result := ReverseArray ( result ) ;
37074: LD_ADDR_VAR 0 5
37078: PUSH
37079: LD_VAR 0 5
37083: PPUSH
37084: CALL 64329 0 1
37088: ST_TO_ADDR
// tmp := [ ] ;
37089: LD_ADDR_VAR 0 8
37093: PUSH
37094: EMPTY
37095: ST_TO_ADDR
// if mode then
37096: LD_VAR 0 4
37100: IFFALSE 37164
// begin for i := 1 to result do
37102: LD_ADDR_VAR 0 6
37106: PUSH
37107: DOUBLE
37108: LD_INT 1
37110: DEC
37111: ST_TO_ADDR
37112: LD_VAR 0 5
37116: PUSH
37117: FOR_TO
37118: IFFALSE 37152
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37120: LD_ADDR_VAR 0 8
37124: PUSH
37125: LD_VAR 0 8
37129: PPUSH
37130: LD_VAR 0 5
37134: PUSH
37135: LD_VAR 0 6
37139: ARRAY
37140: PUSH
37141: LD_INT 1
37143: ARRAY
37144: PPUSH
37145: CALL 69042 0 2
37149: ST_TO_ADDR
37150: GO 37117
37152: POP
37153: POP
// result := tmp ;
37154: LD_ADDR_VAR 0 5
37158: PUSH
37159: LD_VAR 0 8
37163: ST_TO_ADDR
// end ; end ;
37164: LD_VAR 0 5
37168: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37169: LD_INT 0
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
// if not list then
37175: LD_VAR 0 3
37179: NOT
37180: IFFALSE 37184
// exit ;
37182: GO 37572
// result := [ ] ;
37184: LD_ADDR_VAR 0 6
37188: PUSH
37189: EMPTY
37190: ST_TO_ADDR
// for i in list do
37191: LD_ADDR_VAR 0 7
37195: PUSH
37196: LD_VAR 0 3
37200: PUSH
37201: FOR_IN
37202: IFFALSE 37404
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37204: LD_ADDR_VAR 0 9
37208: PUSH
37209: LD_VAR 0 7
37213: PPUSH
37214: LD_VAR 0 1
37218: PPUSH
37219: LD_VAR 0 2
37223: PPUSH
37224: CALL_OW 297
37228: ST_TO_ADDR
// if not result then
37229: LD_VAR 0 6
37233: NOT
37234: IFFALSE 37260
// result := [ [ i , tmp ] ] else
37236: LD_ADDR_VAR 0 6
37240: PUSH
37241: LD_VAR 0 7
37245: PUSH
37246: LD_VAR 0 9
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: EMPTY
37256: LIST
37257: ST_TO_ADDR
37258: GO 37402
// begin if result [ result ] [ 2 ] < tmp then
37260: LD_VAR 0 6
37264: PUSH
37265: LD_VAR 0 6
37269: ARRAY
37270: PUSH
37271: LD_INT 2
37273: ARRAY
37274: PUSH
37275: LD_VAR 0 9
37279: LESS
37280: IFFALSE 37322
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37282: LD_ADDR_VAR 0 6
37286: PUSH
37287: LD_VAR 0 6
37291: PPUSH
37292: LD_VAR 0 6
37296: PUSH
37297: LD_INT 1
37299: PLUS
37300: PPUSH
37301: LD_VAR 0 7
37305: PUSH
37306: LD_VAR 0 9
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PPUSH
37315: CALL_OW 2
37319: ST_TO_ADDR
37320: GO 37402
// for j = 1 to result do
37322: LD_ADDR_VAR 0 8
37326: PUSH
37327: DOUBLE
37328: LD_INT 1
37330: DEC
37331: ST_TO_ADDR
37332: LD_VAR 0 6
37336: PUSH
37337: FOR_TO
37338: IFFALSE 37400
// begin if tmp < result [ j ] [ 2 ] then
37340: LD_VAR 0 9
37344: PUSH
37345: LD_VAR 0 6
37349: PUSH
37350: LD_VAR 0 8
37354: ARRAY
37355: PUSH
37356: LD_INT 2
37358: ARRAY
37359: LESS
37360: IFFALSE 37398
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37362: LD_ADDR_VAR 0 6
37366: PUSH
37367: LD_VAR 0 6
37371: PPUSH
37372: LD_VAR 0 8
37376: PPUSH
37377: LD_VAR 0 7
37381: PUSH
37382: LD_VAR 0 9
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PPUSH
37391: CALL_OW 2
37395: ST_TO_ADDR
// break ;
37396: GO 37400
// end ; end ;
37398: GO 37337
37400: POP
37401: POP
// end ; end ;
37402: GO 37201
37404: POP
37405: POP
// if result and not asc then
37406: LD_VAR 0 6
37410: PUSH
37411: LD_VAR 0 4
37415: NOT
37416: AND
37417: IFFALSE 37492
// begin tmp := result ;
37419: LD_ADDR_VAR 0 9
37423: PUSH
37424: LD_VAR 0 6
37428: ST_TO_ADDR
// for i = tmp downto 1 do
37429: LD_ADDR_VAR 0 7
37433: PUSH
37434: DOUBLE
37435: LD_VAR 0 9
37439: INC
37440: ST_TO_ADDR
37441: LD_INT 1
37443: PUSH
37444: FOR_DOWNTO
37445: IFFALSE 37490
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37447: LD_ADDR_VAR 0 6
37451: PUSH
37452: LD_VAR 0 6
37456: PPUSH
37457: LD_VAR 0 9
37461: PUSH
37462: LD_VAR 0 7
37466: MINUS
37467: PUSH
37468: LD_INT 1
37470: PLUS
37471: PPUSH
37472: LD_VAR 0 9
37476: PUSH
37477: LD_VAR 0 7
37481: ARRAY
37482: PPUSH
37483: CALL_OW 1
37487: ST_TO_ADDR
37488: GO 37444
37490: POP
37491: POP
// end ; tmp := [ ] ;
37492: LD_ADDR_VAR 0 9
37496: PUSH
37497: EMPTY
37498: ST_TO_ADDR
// if mode then
37499: LD_VAR 0 5
37503: IFFALSE 37572
// begin for i = 1 to result do
37505: LD_ADDR_VAR 0 7
37509: PUSH
37510: DOUBLE
37511: LD_INT 1
37513: DEC
37514: ST_TO_ADDR
37515: LD_VAR 0 6
37519: PUSH
37520: FOR_TO
37521: IFFALSE 37560
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37523: LD_ADDR_VAR 0 9
37527: PUSH
37528: LD_VAR 0 9
37532: PPUSH
37533: LD_VAR 0 7
37537: PPUSH
37538: LD_VAR 0 6
37542: PUSH
37543: LD_VAR 0 7
37547: ARRAY
37548: PUSH
37549: LD_INT 1
37551: ARRAY
37552: PPUSH
37553: CALL_OW 1
37557: ST_TO_ADDR
37558: GO 37520
37560: POP
37561: POP
// result := tmp ;
37562: LD_ADDR_VAR 0 6
37566: PUSH
37567: LD_VAR 0 9
37571: ST_TO_ADDR
// end ; end ;
37572: LD_VAR 0 6
37576: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37577: LD_INT 0
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37585: LD_ADDR_VAR 0 5
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: ST_TO_ADDR
// if not x or not y then
37607: LD_VAR 0 2
37611: NOT
37612: PUSH
37613: LD_VAR 0 3
37617: NOT
37618: OR
37619: IFFALSE 37623
// exit ;
37621: GO 39273
// if not range then
37623: LD_VAR 0 4
37627: NOT
37628: IFFALSE 37638
// range := 10 ;
37630: LD_ADDR_VAR 0 4
37634: PUSH
37635: LD_INT 10
37637: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37638: LD_ADDR_VAR 0 8
37642: PUSH
37643: LD_INT 81
37645: PUSH
37646: LD_VAR 0 1
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 92
37657: PUSH
37658: LD_VAR 0 2
37662: PUSH
37663: LD_VAR 0 3
37667: PUSH
37668: LD_VAR 0 4
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 3
37681: PUSH
37682: LD_INT 21
37684: PUSH
37685: LD_INT 3
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: PPUSH
37701: CALL_OW 69
37705: ST_TO_ADDR
// if not tmp then
37706: LD_VAR 0 8
37710: NOT
37711: IFFALSE 37715
// exit ;
37713: GO 39273
// for i in tmp do
37715: LD_ADDR_VAR 0 6
37719: PUSH
37720: LD_VAR 0 8
37724: PUSH
37725: FOR_IN
37726: IFFALSE 39248
// begin points := [ 0 , 0 , 0 ] ;
37728: LD_ADDR_VAR 0 9
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: ST_TO_ADDR
// bpoints := 1 ;
37747: LD_ADDR_VAR 0 10
37751: PUSH
37752: LD_INT 1
37754: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37755: LD_VAR 0 6
37759: PPUSH
37760: CALL_OW 247
37764: PUSH
37765: LD_INT 1
37767: DOUBLE
37768: EQUAL
37769: IFTRUE 37773
37771: GO 38351
37773: POP
// begin if GetClass ( i ) = 1 then
37774: LD_VAR 0 6
37778: PPUSH
37779: CALL_OW 257
37783: PUSH
37784: LD_INT 1
37786: EQUAL
37787: IFFALSE 37808
// points := [ 10 , 5 , 3 ] ;
37789: LD_ADDR_VAR 0 9
37793: PUSH
37794: LD_INT 10
37796: PUSH
37797: LD_INT 5
37799: PUSH
37800: LD_INT 3
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37808: LD_VAR 0 6
37812: PPUSH
37813: CALL_OW 257
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: LD_INT 3
37823: PUSH
37824: LD_INT 4
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: IN
37832: IFFALSE 37853
// points := [ 3 , 2 , 1 ] ;
37834: LD_ADDR_VAR 0 9
37838: PUSH
37839: LD_INT 3
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37853: LD_VAR 0 6
37857: PPUSH
37858: CALL_OW 257
37862: PUSH
37863: LD_INT 5
37865: EQUAL
37866: IFFALSE 37887
// points := [ 130 , 5 , 2 ] ;
37868: LD_ADDR_VAR 0 9
37872: PUSH
37873: LD_INT 130
37875: PUSH
37876: LD_INT 5
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37887: LD_VAR 0 6
37891: PPUSH
37892: CALL_OW 257
37896: PUSH
37897: LD_INT 8
37899: EQUAL
37900: IFFALSE 37921
// points := [ 35 , 35 , 30 ] ;
37902: LD_ADDR_VAR 0 9
37906: PUSH
37907: LD_INT 35
37909: PUSH
37910: LD_INT 35
37912: PUSH
37913: LD_INT 30
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37921: LD_VAR 0 6
37925: PPUSH
37926: CALL_OW 257
37930: PUSH
37931: LD_INT 9
37933: EQUAL
37934: IFFALSE 37955
// points := [ 20 , 55 , 40 ] ;
37936: LD_ADDR_VAR 0 9
37940: PUSH
37941: LD_INT 20
37943: PUSH
37944: LD_INT 55
37946: PUSH
37947: LD_INT 40
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37955: LD_VAR 0 6
37959: PPUSH
37960: CALL_OW 257
37964: PUSH
37965: LD_INT 12
37967: PUSH
37968: LD_INT 16
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: IN
37975: IFFALSE 37996
// points := [ 5 , 3 , 2 ] ;
37977: LD_ADDR_VAR 0 9
37981: PUSH
37982: LD_INT 5
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37996: LD_VAR 0 6
38000: PPUSH
38001: CALL_OW 257
38005: PUSH
38006: LD_INT 17
38008: EQUAL
38009: IFFALSE 38030
// points := [ 100 , 50 , 75 ] ;
38011: LD_ADDR_VAR 0 9
38015: PUSH
38016: LD_INT 100
38018: PUSH
38019: LD_INT 50
38021: PUSH
38022: LD_INT 75
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38030: LD_VAR 0 6
38034: PPUSH
38035: CALL_OW 257
38039: PUSH
38040: LD_INT 15
38042: EQUAL
38043: IFFALSE 38064
// points := [ 10 , 5 , 3 ] ;
38045: LD_ADDR_VAR 0 9
38049: PUSH
38050: LD_INT 10
38052: PUSH
38053: LD_INT 5
38055: PUSH
38056: LD_INT 3
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38064: LD_VAR 0 6
38068: PPUSH
38069: CALL_OW 257
38073: PUSH
38074: LD_INT 14
38076: EQUAL
38077: IFFALSE 38098
// points := [ 10 , 0 , 0 ] ;
38079: LD_ADDR_VAR 0 9
38083: PUSH
38084: LD_INT 10
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38098: LD_VAR 0 6
38102: PPUSH
38103: CALL_OW 257
38107: PUSH
38108: LD_INT 11
38110: EQUAL
38111: IFFALSE 38132
// points := [ 30 , 10 , 5 ] ;
38113: LD_ADDR_VAR 0 9
38117: PUSH
38118: LD_INT 30
38120: PUSH
38121: LD_INT 10
38123: PUSH
38124: LD_INT 5
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38132: LD_VAR 0 1
38136: PPUSH
38137: LD_INT 5
38139: PPUSH
38140: CALL_OW 321
38144: PUSH
38145: LD_INT 2
38147: EQUAL
38148: IFFALSE 38165
// bpoints := bpoints * 1.8 ;
38150: LD_ADDR_VAR 0 10
38154: PUSH
38155: LD_VAR 0 10
38159: PUSH
38160: LD_REAL  1.80000000000000E+0000
38163: MUL
38164: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38165: LD_VAR 0 6
38169: PPUSH
38170: CALL_OW 257
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: LD_INT 4
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: IN
38193: PUSH
38194: LD_VAR 0 1
38198: PPUSH
38199: LD_INT 51
38201: PPUSH
38202: CALL_OW 321
38206: PUSH
38207: LD_INT 2
38209: EQUAL
38210: AND
38211: IFFALSE 38228
// bpoints := bpoints * 1.2 ;
38213: LD_ADDR_VAR 0 10
38217: PUSH
38218: LD_VAR 0 10
38222: PUSH
38223: LD_REAL  1.20000000000000E+0000
38226: MUL
38227: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38228: LD_VAR 0 6
38232: PPUSH
38233: CALL_OW 257
38237: PUSH
38238: LD_INT 5
38240: PUSH
38241: LD_INT 7
38243: PUSH
38244: LD_INT 9
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: IN
38252: PUSH
38253: LD_VAR 0 1
38257: PPUSH
38258: LD_INT 52
38260: PPUSH
38261: CALL_OW 321
38265: PUSH
38266: LD_INT 2
38268: EQUAL
38269: AND
38270: IFFALSE 38287
// bpoints := bpoints * 1.5 ;
38272: LD_ADDR_VAR 0 10
38276: PUSH
38277: LD_VAR 0 10
38281: PUSH
38282: LD_REAL  1.50000000000000E+0000
38285: MUL
38286: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38287: LD_VAR 0 1
38291: PPUSH
38292: LD_INT 66
38294: PPUSH
38295: CALL_OW 321
38299: PUSH
38300: LD_INT 2
38302: EQUAL
38303: IFFALSE 38320
// bpoints := bpoints * 1.1 ;
38305: LD_ADDR_VAR 0 10
38309: PUSH
38310: LD_VAR 0 10
38314: PUSH
38315: LD_REAL  1.10000000000000E+0000
38318: MUL
38319: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38320: LD_ADDR_VAR 0 10
38324: PUSH
38325: LD_VAR 0 10
38329: PUSH
38330: LD_VAR 0 6
38334: PPUSH
38335: LD_INT 1
38337: PPUSH
38338: CALL_OW 259
38342: PUSH
38343: LD_REAL  1.15000000000000E+0000
38346: MUL
38347: MUL
38348: ST_TO_ADDR
// end ; unit_vehicle :
38349: GO 39177
38351: LD_INT 2
38353: DOUBLE
38354: EQUAL
38355: IFTRUE 38359
38357: GO 39165
38359: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38360: LD_VAR 0 6
38364: PPUSH
38365: CALL_OW 264
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 42
38375: PUSH
38376: LD_INT 24
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: IN
38384: IFFALSE 38405
// points := [ 25 , 5 , 3 ] ;
38386: LD_ADDR_VAR 0 9
38390: PUSH
38391: LD_INT 25
38393: PUSH
38394: LD_INT 5
38396: PUSH
38397: LD_INT 3
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38405: LD_VAR 0 6
38409: PPUSH
38410: CALL_OW 264
38414: PUSH
38415: LD_INT 4
38417: PUSH
38418: LD_INT 43
38420: PUSH
38421: LD_INT 25
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: LIST
38428: IN
38429: IFFALSE 38450
// points := [ 40 , 15 , 5 ] ;
38431: LD_ADDR_VAR 0 9
38435: PUSH
38436: LD_INT 40
38438: PUSH
38439: LD_INT 15
38441: PUSH
38442: LD_INT 5
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: LIST
38449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38450: LD_VAR 0 6
38454: PPUSH
38455: CALL_OW 264
38459: PUSH
38460: LD_INT 3
38462: PUSH
38463: LD_INT 23
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: IN
38470: IFFALSE 38491
// points := [ 7 , 25 , 8 ] ;
38472: LD_ADDR_VAR 0 9
38476: PUSH
38477: LD_INT 7
38479: PUSH
38480: LD_INT 25
38482: PUSH
38483: LD_INT 8
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38491: LD_VAR 0 6
38495: PPUSH
38496: CALL_OW 264
38500: PUSH
38501: LD_INT 5
38503: PUSH
38504: LD_INT 27
38506: PUSH
38507: LD_INT 44
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: IN
38515: IFFALSE 38536
// points := [ 14 , 50 , 16 ] ;
38517: LD_ADDR_VAR 0 9
38521: PUSH
38522: LD_INT 14
38524: PUSH
38525: LD_INT 50
38527: PUSH
38528: LD_INT 16
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: LIST
38535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38536: LD_VAR 0 6
38540: PPUSH
38541: CALL_OW 264
38545: PUSH
38546: LD_INT 6
38548: PUSH
38549: LD_INT 46
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: IN
38556: IFFALSE 38577
// points := [ 32 , 120 , 70 ] ;
38558: LD_ADDR_VAR 0 9
38562: PUSH
38563: LD_INT 32
38565: PUSH
38566: LD_INT 120
38568: PUSH
38569: LD_INT 70
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38577: LD_VAR 0 6
38581: PPUSH
38582: CALL_OW 264
38586: PUSH
38587: LD_INT 7
38589: PUSH
38590: LD_INT 28
38592: PUSH
38593: LD_INT 45
38595: PUSH
38596: LD_INT 92
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: IN
38605: IFFALSE 38626
// points := [ 35 , 20 , 45 ] ;
38607: LD_ADDR_VAR 0 9
38611: PUSH
38612: LD_INT 35
38614: PUSH
38615: LD_INT 20
38617: PUSH
38618: LD_INT 45
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38626: LD_VAR 0 6
38630: PPUSH
38631: CALL_OW 264
38635: PUSH
38636: LD_INT 47
38638: PUSH
38639: EMPTY
38640: LIST
38641: IN
38642: IFFALSE 38663
// points := [ 67 , 45 , 75 ] ;
38644: LD_ADDR_VAR 0 9
38648: PUSH
38649: LD_INT 67
38651: PUSH
38652: LD_INT 45
38654: PUSH
38655: LD_INT 75
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38663: LD_VAR 0 6
38667: PPUSH
38668: CALL_OW 264
38672: PUSH
38673: LD_INT 26
38675: PUSH
38676: EMPTY
38677: LIST
38678: IN
38679: IFFALSE 38700
// points := [ 120 , 30 , 80 ] ;
38681: LD_ADDR_VAR 0 9
38685: PUSH
38686: LD_INT 120
38688: PUSH
38689: LD_INT 30
38691: PUSH
38692: LD_INT 80
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38700: LD_VAR 0 6
38704: PPUSH
38705: CALL_OW 264
38709: PUSH
38710: LD_INT 22
38712: PUSH
38713: EMPTY
38714: LIST
38715: IN
38716: IFFALSE 38737
// points := [ 40 , 1 , 1 ] ;
38718: LD_ADDR_VAR 0 9
38722: PUSH
38723: LD_INT 40
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38737: LD_VAR 0 6
38741: PPUSH
38742: CALL_OW 264
38746: PUSH
38747: LD_INT 29
38749: PUSH
38750: EMPTY
38751: LIST
38752: IN
38753: IFFALSE 38774
// points := [ 70 , 200 , 400 ] ;
38755: LD_ADDR_VAR 0 9
38759: PUSH
38760: LD_INT 70
38762: PUSH
38763: LD_INT 200
38765: PUSH
38766: LD_INT 400
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38774: LD_VAR 0 6
38778: PPUSH
38779: CALL_OW 264
38783: PUSH
38784: LD_INT 14
38786: PUSH
38787: LD_INT 53
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: IN
38794: IFFALSE 38815
// points := [ 40 , 10 , 20 ] ;
38796: LD_ADDR_VAR 0 9
38800: PUSH
38801: LD_INT 40
38803: PUSH
38804: LD_INT 10
38806: PUSH
38807: LD_INT 20
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38815: LD_VAR 0 6
38819: PPUSH
38820: CALL_OW 264
38824: PUSH
38825: LD_INT 9
38827: PUSH
38828: EMPTY
38829: LIST
38830: IN
38831: IFFALSE 38852
// points := [ 5 , 70 , 20 ] ;
38833: LD_ADDR_VAR 0 9
38837: PUSH
38838: LD_INT 5
38840: PUSH
38841: LD_INT 70
38843: PUSH
38844: LD_INT 20
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38852: LD_VAR 0 6
38856: PPUSH
38857: CALL_OW 264
38861: PUSH
38862: LD_INT 10
38864: PUSH
38865: EMPTY
38866: LIST
38867: IN
38868: IFFALSE 38889
// points := [ 35 , 110 , 70 ] ;
38870: LD_ADDR_VAR 0 9
38874: PUSH
38875: LD_INT 35
38877: PUSH
38878: LD_INT 110
38880: PUSH
38881: LD_INT 70
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38889: LD_VAR 0 6
38893: PPUSH
38894: CALL_OW 265
38898: PUSH
38899: LD_INT 25
38901: EQUAL
38902: IFFALSE 38923
// points := [ 80 , 65 , 100 ] ;
38904: LD_ADDR_VAR 0 9
38908: PUSH
38909: LD_INT 80
38911: PUSH
38912: LD_INT 65
38914: PUSH
38915: LD_INT 100
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38923: LD_VAR 0 6
38927: PPUSH
38928: CALL_OW 263
38932: PUSH
38933: LD_INT 1
38935: EQUAL
38936: IFFALSE 38971
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38938: LD_ADDR_VAR 0 10
38942: PUSH
38943: LD_VAR 0 10
38947: PUSH
38948: LD_VAR 0 6
38952: PPUSH
38953: CALL_OW 311
38957: PPUSH
38958: LD_INT 3
38960: PPUSH
38961: CALL_OW 259
38965: PUSH
38966: LD_INT 4
38968: MUL
38969: MUL
38970: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38971: LD_VAR 0 6
38975: PPUSH
38976: CALL_OW 263
38980: PUSH
38981: LD_INT 2
38983: EQUAL
38984: IFFALSE 39035
// begin j := IsControledBy ( i ) ;
38986: LD_ADDR_VAR 0 7
38990: PUSH
38991: LD_VAR 0 6
38995: PPUSH
38996: CALL_OW 312
39000: ST_TO_ADDR
// if j then
39001: LD_VAR 0 7
39005: IFFALSE 39035
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39007: LD_ADDR_VAR 0 10
39011: PUSH
39012: LD_VAR 0 10
39016: PUSH
39017: LD_VAR 0 7
39021: PPUSH
39022: LD_INT 3
39024: PPUSH
39025: CALL_OW 259
39029: PUSH
39030: LD_INT 3
39032: MUL
39033: MUL
39034: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39035: LD_VAR 0 6
39039: PPUSH
39040: CALL_OW 264
39044: PUSH
39045: LD_INT 5
39047: PUSH
39048: LD_INT 6
39050: PUSH
39051: LD_INT 46
39053: PUSH
39054: LD_INT 44
39056: PUSH
39057: LD_INT 47
39059: PUSH
39060: LD_INT 45
39062: PUSH
39063: LD_INT 28
39065: PUSH
39066: LD_INT 7
39068: PUSH
39069: LD_INT 27
39071: PUSH
39072: LD_INT 29
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: IN
39087: PUSH
39088: LD_VAR 0 1
39092: PPUSH
39093: LD_INT 52
39095: PPUSH
39096: CALL_OW 321
39100: PUSH
39101: LD_INT 2
39103: EQUAL
39104: AND
39105: IFFALSE 39122
// bpoints := bpoints * 1.2 ;
39107: LD_ADDR_VAR 0 10
39111: PUSH
39112: LD_VAR 0 10
39116: PUSH
39117: LD_REAL  1.20000000000000E+0000
39120: MUL
39121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39122: LD_VAR 0 6
39126: PPUSH
39127: CALL_OW 264
39131: PUSH
39132: LD_INT 6
39134: PUSH
39135: LD_INT 46
39137: PUSH
39138: LD_INT 47
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: IN
39146: IFFALSE 39163
// bpoints := bpoints * 1.2 ;
39148: LD_ADDR_VAR 0 10
39152: PUSH
39153: LD_VAR 0 10
39157: PUSH
39158: LD_REAL  1.20000000000000E+0000
39161: MUL
39162: ST_TO_ADDR
// end ; unit_building :
39163: GO 39177
39165: LD_INT 3
39167: DOUBLE
39168: EQUAL
39169: IFTRUE 39173
39171: GO 39176
39173: POP
// ; end ;
39174: GO 39177
39176: POP
// for j = 1 to 3 do
39177: LD_ADDR_VAR 0 7
39181: PUSH
39182: DOUBLE
39183: LD_INT 1
39185: DEC
39186: ST_TO_ADDR
39187: LD_INT 3
39189: PUSH
39190: FOR_TO
39191: IFFALSE 39244
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39193: LD_ADDR_VAR 0 5
39197: PUSH
39198: LD_VAR 0 5
39202: PPUSH
39203: LD_VAR 0 7
39207: PPUSH
39208: LD_VAR 0 5
39212: PUSH
39213: LD_VAR 0 7
39217: ARRAY
39218: PUSH
39219: LD_VAR 0 9
39223: PUSH
39224: LD_VAR 0 7
39228: ARRAY
39229: PUSH
39230: LD_VAR 0 10
39234: MUL
39235: PLUS
39236: PPUSH
39237: CALL_OW 1
39241: ST_TO_ADDR
39242: GO 39190
39244: POP
39245: POP
// end ;
39246: GO 37725
39248: POP
39249: POP
// result := Replace ( result , 4 , tmp ) ;
39250: LD_ADDR_VAR 0 5
39254: PUSH
39255: LD_VAR 0 5
39259: PPUSH
39260: LD_INT 4
39262: PPUSH
39263: LD_VAR 0 8
39267: PPUSH
39268: CALL_OW 1
39272: ST_TO_ADDR
// end ;
39273: LD_VAR 0 5
39277: RET
// export function DangerAtRange ( unit , range ) ; begin
39278: LD_INT 0
39280: PPUSH
// if not unit then
39281: LD_VAR 0 1
39285: NOT
39286: IFFALSE 39290
// exit ;
39288: GO 39335
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39290: LD_ADDR_VAR 0 3
39294: PUSH
39295: LD_VAR 0 1
39299: PPUSH
39300: CALL_OW 255
39304: PPUSH
39305: LD_VAR 0 1
39309: PPUSH
39310: CALL_OW 250
39314: PPUSH
39315: LD_VAR 0 1
39319: PPUSH
39320: CALL_OW 251
39324: PPUSH
39325: LD_VAR 0 2
39329: PPUSH
39330: CALL 37577 0 4
39334: ST_TO_ADDR
// end ;
39335: LD_VAR 0 3
39339: RET
// export function DangerInArea ( side , area ) ; begin
39340: LD_INT 0
39342: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39343: LD_ADDR_VAR 0 3
39347: PUSH
39348: LD_VAR 0 2
39352: PPUSH
39353: LD_INT 81
39355: PUSH
39356: LD_VAR 0 1
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PPUSH
39365: CALL_OW 70
39369: ST_TO_ADDR
// end ;
39370: LD_VAR 0 3
39374: RET
// export function IsExtension ( b ) ; begin
39375: LD_INT 0
39377: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39378: LD_ADDR_VAR 0 2
39382: PUSH
39383: LD_VAR 0 1
39387: PUSH
39388: LD_INT 23
39390: PUSH
39391: LD_INT 20
39393: PUSH
39394: LD_INT 22
39396: PUSH
39397: LD_INT 17
39399: PUSH
39400: LD_INT 24
39402: PUSH
39403: LD_INT 21
39405: PUSH
39406: LD_INT 19
39408: PUSH
39409: LD_INT 16
39411: PUSH
39412: LD_INT 25
39414: PUSH
39415: LD_INT 18
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: IN
39430: ST_TO_ADDR
// end ;
39431: LD_VAR 0 2
39435: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39436: LD_INT 0
39438: PPUSH
39439: PPUSH
39440: PPUSH
// result := [ ] ;
39441: LD_ADDR_VAR 0 4
39445: PUSH
39446: EMPTY
39447: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39448: LD_ADDR_VAR 0 5
39452: PUSH
39453: LD_VAR 0 2
39457: PPUSH
39458: LD_INT 21
39460: PUSH
39461: LD_INT 3
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PPUSH
39468: CALL_OW 70
39472: ST_TO_ADDR
// if not tmp then
39473: LD_VAR 0 5
39477: NOT
39478: IFFALSE 39482
// exit ;
39480: GO 39546
// if checkLink then
39482: LD_VAR 0 3
39486: IFFALSE 39536
// begin for i in tmp do
39488: LD_ADDR_VAR 0 6
39492: PUSH
39493: LD_VAR 0 5
39497: PUSH
39498: FOR_IN
39499: IFFALSE 39534
// if GetBase ( i ) <> base then
39501: LD_VAR 0 6
39505: PPUSH
39506: CALL_OW 274
39510: PUSH
39511: LD_VAR 0 1
39515: NONEQUAL
39516: IFFALSE 39532
// ComLinkToBase ( base , i ) ;
39518: LD_VAR 0 1
39522: PPUSH
39523: LD_VAR 0 6
39527: PPUSH
39528: CALL_OW 169
39532: GO 39498
39534: POP
39535: POP
// end ; result := tmp ;
39536: LD_ADDR_VAR 0 4
39540: PUSH
39541: LD_VAR 0 5
39545: ST_TO_ADDR
// end ;
39546: LD_VAR 0 4
39550: RET
// export function ComComplete ( units , b ) ; var i ; begin
39551: LD_INT 0
39553: PPUSH
39554: PPUSH
// if not units then
39555: LD_VAR 0 1
39559: NOT
39560: IFFALSE 39564
// exit ;
39562: GO 39654
// for i in units do
39564: LD_ADDR_VAR 0 4
39568: PUSH
39569: LD_VAR 0 1
39573: PUSH
39574: FOR_IN
39575: IFFALSE 39652
// if BuildingStatus ( b ) = bs_build then
39577: LD_VAR 0 2
39581: PPUSH
39582: CALL_OW 461
39586: PUSH
39587: LD_INT 1
39589: EQUAL
39590: IFFALSE 39650
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39592: LD_VAR 0 4
39596: PPUSH
39597: LD_STRING h
39599: PUSH
39600: LD_VAR 0 2
39604: PPUSH
39605: CALL_OW 250
39609: PUSH
39610: LD_VAR 0 2
39614: PPUSH
39615: CALL_OW 251
39619: PUSH
39620: LD_VAR 0 2
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: PUSH
39643: EMPTY
39644: LIST
39645: PPUSH
39646: CALL_OW 446
39650: GO 39574
39652: POP
39653: POP
// end ;
39654: LD_VAR 0 3
39658: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39659: LD_INT 0
39661: PPUSH
39662: PPUSH
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39667: LD_VAR 0 1
39671: NOT
39672: PUSH
39673: LD_VAR 0 1
39677: PPUSH
39678: CALL_OW 263
39682: PUSH
39683: LD_INT 2
39685: NONEQUAL
39686: OR
39687: IFFALSE 39691
// exit ;
39689: GO 40007
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39691: LD_ADDR_VAR 0 6
39695: PUSH
39696: LD_INT 22
39698: PUSH
39699: LD_VAR 0 1
39703: PPUSH
39704: CALL_OW 255
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: LD_INT 30
39718: PUSH
39719: LD_INT 36
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 34
39728: PUSH
39729: LD_INT 31
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: LIST
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PPUSH
39745: CALL_OW 69
39749: ST_TO_ADDR
// if not tmp then
39750: LD_VAR 0 6
39754: NOT
39755: IFFALSE 39759
// exit ;
39757: GO 40007
// result := [ ] ;
39759: LD_ADDR_VAR 0 2
39763: PUSH
39764: EMPTY
39765: ST_TO_ADDR
// for i in tmp do
39766: LD_ADDR_VAR 0 3
39770: PUSH
39771: LD_VAR 0 6
39775: PUSH
39776: FOR_IN
39777: IFFALSE 39848
// begin t := UnitsInside ( i ) ;
39779: LD_ADDR_VAR 0 4
39783: PUSH
39784: LD_VAR 0 3
39788: PPUSH
39789: CALL_OW 313
39793: ST_TO_ADDR
// if t then
39794: LD_VAR 0 4
39798: IFFALSE 39846
// for j in t do
39800: LD_ADDR_VAR 0 7
39804: PUSH
39805: LD_VAR 0 4
39809: PUSH
39810: FOR_IN
39811: IFFALSE 39844
// result := Replace ( result , result + 1 , j ) ;
39813: LD_ADDR_VAR 0 2
39817: PUSH
39818: LD_VAR 0 2
39822: PPUSH
39823: LD_VAR 0 2
39827: PUSH
39828: LD_INT 1
39830: PLUS
39831: PPUSH
39832: LD_VAR 0 7
39836: PPUSH
39837: CALL_OW 1
39841: ST_TO_ADDR
39842: GO 39810
39844: POP
39845: POP
// end ;
39846: GO 39776
39848: POP
39849: POP
// if not result then
39850: LD_VAR 0 2
39854: NOT
39855: IFFALSE 39859
// exit ;
39857: GO 40007
// mech := result [ 1 ] ;
39859: LD_ADDR_VAR 0 5
39863: PUSH
39864: LD_VAR 0 2
39868: PUSH
39869: LD_INT 1
39871: ARRAY
39872: ST_TO_ADDR
// if result > 1 then
39873: LD_VAR 0 2
39877: PUSH
39878: LD_INT 1
39880: GREATER
39881: IFFALSE 39993
// begin for i = 2 to result do
39883: LD_ADDR_VAR 0 3
39887: PUSH
39888: DOUBLE
39889: LD_INT 2
39891: DEC
39892: ST_TO_ADDR
39893: LD_VAR 0 2
39897: PUSH
39898: FOR_TO
39899: IFFALSE 39991
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39901: LD_ADDR_VAR 0 4
39905: PUSH
39906: LD_VAR 0 2
39910: PUSH
39911: LD_VAR 0 3
39915: ARRAY
39916: PPUSH
39917: LD_INT 3
39919: PPUSH
39920: CALL_OW 259
39924: PUSH
39925: LD_VAR 0 2
39929: PUSH
39930: LD_VAR 0 3
39934: ARRAY
39935: PPUSH
39936: CALL_OW 432
39940: MINUS
39941: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39942: LD_VAR 0 4
39946: PUSH
39947: LD_VAR 0 5
39951: PPUSH
39952: LD_INT 3
39954: PPUSH
39955: CALL_OW 259
39959: PUSH
39960: LD_VAR 0 5
39964: PPUSH
39965: CALL_OW 432
39969: MINUS
39970: GREATEREQUAL
39971: IFFALSE 39989
// mech := result [ i ] ;
39973: LD_ADDR_VAR 0 5
39977: PUSH
39978: LD_VAR 0 2
39982: PUSH
39983: LD_VAR 0 3
39987: ARRAY
39988: ST_TO_ADDR
// end ;
39989: GO 39898
39991: POP
39992: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39993: LD_VAR 0 1
39997: PPUSH
39998: LD_VAR 0 5
40002: PPUSH
40003: CALL_OW 135
// end ;
40007: LD_VAR 0 2
40011: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40012: LD_INT 0
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
// result := [ ] ;
40027: LD_ADDR_VAR 0 7
40031: PUSH
40032: EMPTY
40033: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40034: LD_VAR 0 1
40038: PPUSH
40039: CALL_OW 266
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: IN
40054: NOT
40055: IFFALSE 40059
// exit ;
40057: GO 41693
// if name then
40059: LD_VAR 0 3
40063: IFFALSE 40079
// SetBName ( base_dep , name ) ;
40065: LD_VAR 0 1
40069: PPUSH
40070: LD_VAR 0 3
40074: PPUSH
40075: CALL_OW 500
// base := GetBase ( base_dep ) ;
40079: LD_ADDR_VAR 0 15
40083: PUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: CALL_OW 274
40093: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40094: LD_ADDR_VAR 0 16
40098: PUSH
40099: LD_VAR 0 1
40103: PPUSH
40104: CALL_OW 255
40108: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40109: LD_ADDR_VAR 0 17
40113: PUSH
40114: LD_VAR 0 1
40118: PPUSH
40119: CALL_OW 248
40123: ST_TO_ADDR
// if sources then
40124: LD_VAR 0 5
40128: IFFALSE 40175
// for i = 1 to 3 do
40130: LD_ADDR_VAR 0 8
40134: PUSH
40135: DOUBLE
40136: LD_INT 1
40138: DEC
40139: ST_TO_ADDR
40140: LD_INT 3
40142: PUSH
40143: FOR_TO
40144: IFFALSE 40173
// AddResourceType ( base , i , sources [ i ] ) ;
40146: LD_VAR 0 15
40150: PPUSH
40151: LD_VAR 0 8
40155: PPUSH
40156: LD_VAR 0 5
40160: PUSH
40161: LD_VAR 0 8
40165: ARRAY
40166: PPUSH
40167: CALL_OW 276
40171: GO 40143
40173: POP
40174: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40175: LD_ADDR_VAR 0 18
40179: PUSH
40180: LD_VAR 0 15
40184: PPUSH
40185: LD_VAR 0 2
40189: PPUSH
40190: LD_INT 1
40192: PPUSH
40193: CALL 39436 0 3
40197: ST_TO_ADDR
// InitHc ;
40198: CALL_OW 19
// InitUc ;
40202: CALL_OW 18
// uc_side := side ;
40206: LD_ADDR_OWVAR 20
40210: PUSH
40211: LD_VAR 0 16
40215: ST_TO_ADDR
// uc_nation := nation ;
40216: LD_ADDR_OWVAR 21
40220: PUSH
40221: LD_VAR 0 17
40225: ST_TO_ADDR
// if buildings then
40226: LD_VAR 0 18
40230: IFFALSE 41552
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40232: LD_ADDR_VAR 0 19
40236: PUSH
40237: LD_VAR 0 18
40241: PPUSH
40242: LD_INT 2
40244: PUSH
40245: LD_INT 30
40247: PUSH
40248: LD_INT 29
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 30
40257: PUSH
40258: LD_INT 30
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: PPUSH
40270: CALL_OW 72
40274: ST_TO_ADDR
// if tmp then
40275: LD_VAR 0 19
40279: IFFALSE 40327
// for i in tmp do
40281: LD_ADDR_VAR 0 8
40285: PUSH
40286: LD_VAR 0 19
40290: PUSH
40291: FOR_IN
40292: IFFALSE 40325
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40294: LD_VAR 0 8
40298: PPUSH
40299: CALL_OW 250
40303: PPUSH
40304: LD_VAR 0 8
40308: PPUSH
40309: CALL_OW 251
40313: PPUSH
40314: LD_VAR 0 16
40318: PPUSH
40319: CALL_OW 441
40323: GO 40291
40325: POP
40326: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40327: LD_VAR 0 18
40331: PPUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 30
40337: PUSH
40338: LD_INT 32
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 30
40347: PUSH
40348: LD_INT 33
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: PPUSH
40360: CALL_OW 72
40364: IFFALSE 40452
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40366: LD_ADDR_VAR 0 8
40370: PUSH
40371: LD_VAR 0 18
40375: PPUSH
40376: LD_INT 2
40378: PUSH
40379: LD_INT 30
40381: PUSH
40382: LD_INT 32
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 30
40391: PUSH
40392: LD_INT 33
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: PPUSH
40404: CALL_OW 72
40408: PUSH
40409: FOR_IN
40410: IFFALSE 40450
// begin if not GetBWeapon ( i ) then
40412: LD_VAR 0 8
40416: PPUSH
40417: CALL_OW 269
40421: NOT
40422: IFFALSE 40448
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40424: LD_VAR 0 8
40428: PPUSH
40429: LD_VAR 0 8
40433: PPUSH
40434: LD_VAR 0 2
40438: PPUSH
40439: CALL 41698 0 2
40443: PPUSH
40444: CALL_OW 431
// end ;
40448: GO 40409
40450: POP
40451: POP
// end ; for i = 1 to personel do
40452: LD_ADDR_VAR 0 8
40456: PUSH
40457: DOUBLE
40458: LD_INT 1
40460: DEC
40461: ST_TO_ADDR
40462: LD_VAR 0 6
40466: PUSH
40467: FOR_TO
40468: IFFALSE 41532
// begin if i > 4 then
40470: LD_VAR 0 8
40474: PUSH
40475: LD_INT 4
40477: GREATER
40478: IFFALSE 40482
// break ;
40480: GO 41532
// case i of 1 :
40482: LD_VAR 0 8
40486: PUSH
40487: LD_INT 1
40489: DOUBLE
40490: EQUAL
40491: IFTRUE 40495
40493: GO 40575
40495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40496: LD_ADDR_VAR 0 12
40500: PUSH
40501: LD_VAR 0 18
40505: PPUSH
40506: LD_INT 22
40508: PUSH
40509: LD_VAR 0 16
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 58
40520: PUSH
40521: EMPTY
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 30
40529: PUSH
40530: LD_INT 32
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 30
40539: PUSH
40540: LD_INT 4
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 30
40549: PUSH
40550: LD_INT 5
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: LIST
40567: PPUSH
40568: CALL_OW 72
40572: ST_TO_ADDR
40573: GO 40797
40575: LD_INT 2
40577: DOUBLE
40578: EQUAL
40579: IFTRUE 40583
40581: GO 40645
40583: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40584: LD_ADDR_VAR 0 12
40588: PUSH
40589: LD_VAR 0 18
40593: PPUSH
40594: LD_INT 22
40596: PUSH
40597: LD_VAR 0 16
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: LD_INT 30
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 30
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PPUSH
40638: CALL_OW 72
40642: ST_TO_ADDR
40643: GO 40797
40645: LD_INT 3
40647: DOUBLE
40648: EQUAL
40649: IFTRUE 40653
40651: GO 40715
40653: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40654: LD_ADDR_VAR 0 12
40658: PUSH
40659: LD_VAR 0 18
40663: PPUSH
40664: LD_INT 22
40666: PUSH
40667: LD_VAR 0 16
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: LD_INT 30
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 30
40691: PUSH
40692: LD_INT 3
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PPUSH
40708: CALL_OW 72
40712: ST_TO_ADDR
40713: GO 40797
40715: LD_INT 4
40717: DOUBLE
40718: EQUAL
40719: IFTRUE 40723
40721: GO 40796
40723: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40724: LD_ADDR_VAR 0 12
40728: PUSH
40729: LD_VAR 0 18
40733: PPUSH
40734: LD_INT 22
40736: PUSH
40737: LD_VAR 0 16
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 30
40751: PUSH
40752: LD_INT 6
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 30
40761: PUSH
40762: LD_INT 7
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 30
40771: PUSH
40772: LD_INT 8
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PPUSH
40789: CALL_OW 72
40793: ST_TO_ADDR
40794: GO 40797
40796: POP
// if i = 1 then
40797: LD_VAR 0 8
40801: PUSH
40802: LD_INT 1
40804: EQUAL
40805: IFFALSE 40916
// begin tmp := [ ] ;
40807: LD_ADDR_VAR 0 19
40811: PUSH
40812: EMPTY
40813: ST_TO_ADDR
// for j in f do
40814: LD_ADDR_VAR 0 9
40818: PUSH
40819: LD_VAR 0 12
40823: PUSH
40824: FOR_IN
40825: IFFALSE 40898
// if GetBType ( j ) = b_bunker then
40827: LD_VAR 0 9
40831: PPUSH
40832: CALL_OW 266
40836: PUSH
40837: LD_INT 32
40839: EQUAL
40840: IFFALSE 40867
// tmp := Insert ( tmp , 1 , j ) else
40842: LD_ADDR_VAR 0 19
40846: PUSH
40847: LD_VAR 0 19
40851: PPUSH
40852: LD_INT 1
40854: PPUSH
40855: LD_VAR 0 9
40859: PPUSH
40860: CALL_OW 2
40864: ST_TO_ADDR
40865: GO 40896
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40867: LD_ADDR_VAR 0 19
40871: PUSH
40872: LD_VAR 0 19
40876: PPUSH
40877: LD_VAR 0 19
40881: PUSH
40882: LD_INT 1
40884: PLUS
40885: PPUSH
40886: LD_VAR 0 9
40890: PPUSH
40891: CALL_OW 2
40895: ST_TO_ADDR
40896: GO 40824
40898: POP
40899: POP
// if tmp then
40900: LD_VAR 0 19
40904: IFFALSE 40916
// f := tmp ;
40906: LD_ADDR_VAR 0 12
40910: PUSH
40911: LD_VAR 0 19
40915: ST_TO_ADDR
// end ; x := personel [ i ] ;
40916: LD_ADDR_VAR 0 13
40920: PUSH
40921: LD_VAR 0 6
40925: PUSH
40926: LD_VAR 0 8
40930: ARRAY
40931: ST_TO_ADDR
// if x = - 1 then
40932: LD_VAR 0 13
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: EQUAL
40941: IFFALSE 41150
// begin for j in f do
40943: LD_ADDR_VAR 0 9
40947: PUSH
40948: LD_VAR 0 12
40952: PUSH
40953: FOR_IN
40954: IFFALSE 41146
// repeat InitHc ;
40956: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40960: LD_VAR 0 9
40964: PPUSH
40965: CALL_OW 266
40969: PUSH
40970: LD_INT 5
40972: EQUAL
40973: IFFALSE 41043
// begin if UnitsInside ( j ) < 3 then
40975: LD_VAR 0 9
40979: PPUSH
40980: CALL_OW 313
40984: PUSH
40985: LD_INT 3
40987: LESS
40988: IFFALSE 41024
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40990: LD_INT 0
40992: PPUSH
40993: LD_INT 5
40995: PUSH
40996: LD_INT 8
40998: PUSH
40999: LD_INT 9
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: PUSH
41007: LD_VAR 0 17
41011: ARRAY
41012: PPUSH
41013: LD_VAR 0 4
41017: PPUSH
41018: CALL_OW 380
41022: GO 41041
// PrepareHuman ( false , i , skill ) ;
41024: LD_INT 0
41026: PPUSH
41027: LD_VAR 0 8
41031: PPUSH
41032: LD_VAR 0 4
41036: PPUSH
41037: CALL_OW 380
// end else
41041: GO 41060
// PrepareHuman ( false , i , skill ) ;
41043: LD_INT 0
41045: PPUSH
41046: LD_VAR 0 8
41050: PPUSH
41051: LD_VAR 0 4
41055: PPUSH
41056: CALL_OW 380
// un := CreateHuman ;
41060: LD_ADDR_VAR 0 14
41064: PUSH
41065: CALL_OW 44
41069: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41070: LD_ADDR_VAR 0 7
41074: PUSH
41075: LD_VAR 0 7
41079: PPUSH
41080: LD_INT 1
41082: PPUSH
41083: LD_VAR 0 14
41087: PPUSH
41088: CALL_OW 2
41092: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41093: LD_VAR 0 14
41097: PPUSH
41098: LD_VAR 0 9
41102: PPUSH
41103: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41107: LD_VAR 0 9
41111: PPUSH
41112: CALL_OW 313
41116: PUSH
41117: LD_INT 6
41119: EQUAL
41120: PUSH
41121: LD_VAR 0 9
41125: PPUSH
41126: CALL_OW 266
41130: PUSH
41131: LD_INT 32
41133: PUSH
41134: LD_INT 31
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: IN
41141: OR
41142: IFFALSE 40956
41144: GO 40953
41146: POP
41147: POP
// end else
41148: GO 41530
// for j = 1 to x do
41150: LD_ADDR_VAR 0 9
41154: PUSH
41155: DOUBLE
41156: LD_INT 1
41158: DEC
41159: ST_TO_ADDR
41160: LD_VAR 0 13
41164: PUSH
41165: FOR_TO
41166: IFFALSE 41528
// begin InitHc ;
41168: CALL_OW 19
// if not f then
41172: LD_VAR 0 12
41176: NOT
41177: IFFALSE 41266
// begin PrepareHuman ( false , i , skill ) ;
41179: LD_INT 0
41181: PPUSH
41182: LD_VAR 0 8
41186: PPUSH
41187: LD_VAR 0 4
41191: PPUSH
41192: CALL_OW 380
// un := CreateHuman ;
41196: LD_ADDR_VAR 0 14
41200: PUSH
41201: CALL_OW 44
41205: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41206: LD_ADDR_VAR 0 7
41210: PUSH
41211: LD_VAR 0 7
41215: PPUSH
41216: LD_INT 1
41218: PPUSH
41219: LD_VAR 0 14
41223: PPUSH
41224: CALL_OW 2
41228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41229: LD_VAR 0 14
41233: PPUSH
41234: LD_VAR 0 1
41238: PPUSH
41239: CALL_OW 250
41243: PPUSH
41244: LD_VAR 0 1
41248: PPUSH
41249: CALL_OW 251
41253: PPUSH
41254: LD_INT 10
41256: PPUSH
41257: LD_INT 0
41259: PPUSH
41260: CALL_OW 50
// continue ;
41264: GO 41165
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41266: LD_VAR 0 12
41270: PUSH
41271: LD_INT 1
41273: ARRAY
41274: PPUSH
41275: CALL_OW 313
41279: PUSH
41280: LD_VAR 0 12
41284: PUSH
41285: LD_INT 1
41287: ARRAY
41288: PPUSH
41289: CALL_OW 266
41293: PUSH
41294: LD_INT 32
41296: PUSH
41297: LD_INT 31
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: IN
41304: AND
41305: PUSH
41306: LD_VAR 0 12
41310: PUSH
41311: LD_INT 1
41313: ARRAY
41314: PPUSH
41315: CALL_OW 313
41319: PUSH
41320: LD_INT 6
41322: EQUAL
41323: OR
41324: IFFALSE 41344
// f := Delete ( f , 1 ) ;
41326: LD_ADDR_VAR 0 12
41330: PUSH
41331: LD_VAR 0 12
41335: PPUSH
41336: LD_INT 1
41338: PPUSH
41339: CALL_OW 3
41343: ST_TO_ADDR
// if not f then
41344: LD_VAR 0 12
41348: NOT
41349: IFFALSE 41367
// begin x := x + 2 ;
41351: LD_ADDR_VAR 0 13
41355: PUSH
41356: LD_VAR 0 13
41360: PUSH
41361: LD_INT 2
41363: PLUS
41364: ST_TO_ADDR
// continue ;
41365: GO 41165
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41367: LD_VAR 0 12
41371: PUSH
41372: LD_INT 1
41374: ARRAY
41375: PPUSH
41376: CALL_OW 266
41380: PUSH
41381: LD_INT 5
41383: EQUAL
41384: IFFALSE 41458
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41386: LD_VAR 0 12
41390: PUSH
41391: LD_INT 1
41393: ARRAY
41394: PPUSH
41395: CALL_OW 313
41399: PUSH
41400: LD_INT 3
41402: LESS
41403: IFFALSE 41439
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41405: LD_INT 0
41407: PPUSH
41408: LD_INT 5
41410: PUSH
41411: LD_INT 8
41413: PUSH
41414: LD_INT 9
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: LIST
41421: PUSH
41422: LD_VAR 0 17
41426: ARRAY
41427: PPUSH
41428: LD_VAR 0 4
41432: PPUSH
41433: CALL_OW 380
41437: GO 41456
// PrepareHuman ( false , i , skill ) ;
41439: LD_INT 0
41441: PPUSH
41442: LD_VAR 0 8
41446: PPUSH
41447: LD_VAR 0 4
41451: PPUSH
41452: CALL_OW 380
// end else
41456: GO 41475
// PrepareHuman ( false , i , skill ) ;
41458: LD_INT 0
41460: PPUSH
41461: LD_VAR 0 8
41465: PPUSH
41466: LD_VAR 0 4
41470: PPUSH
41471: CALL_OW 380
// un := CreateHuman ;
41475: LD_ADDR_VAR 0 14
41479: PUSH
41480: CALL_OW 44
41484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41485: LD_ADDR_VAR 0 7
41489: PUSH
41490: LD_VAR 0 7
41494: PPUSH
41495: LD_INT 1
41497: PPUSH
41498: LD_VAR 0 14
41502: PPUSH
41503: CALL_OW 2
41507: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41508: LD_VAR 0 14
41512: PPUSH
41513: LD_VAR 0 12
41517: PUSH
41518: LD_INT 1
41520: ARRAY
41521: PPUSH
41522: CALL_OW 52
// end ;
41526: GO 41165
41528: POP
41529: POP
// end ;
41530: GO 40467
41532: POP
41533: POP
// result := result ^ buildings ;
41534: LD_ADDR_VAR 0 7
41538: PUSH
41539: LD_VAR 0 7
41543: PUSH
41544: LD_VAR 0 18
41548: ADD
41549: ST_TO_ADDR
// end else
41550: GO 41693
// begin for i = 1 to personel do
41552: LD_ADDR_VAR 0 8
41556: PUSH
41557: DOUBLE
41558: LD_INT 1
41560: DEC
41561: ST_TO_ADDR
41562: LD_VAR 0 6
41566: PUSH
41567: FOR_TO
41568: IFFALSE 41691
// begin if i > 4 then
41570: LD_VAR 0 8
41574: PUSH
41575: LD_INT 4
41577: GREATER
41578: IFFALSE 41582
// break ;
41580: GO 41691
// x := personel [ i ] ;
41582: LD_ADDR_VAR 0 13
41586: PUSH
41587: LD_VAR 0 6
41591: PUSH
41592: LD_VAR 0 8
41596: ARRAY
41597: ST_TO_ADDR
// if x = - 1 then
41598: LD_VAR 0 13
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: EQUAL
41607: IFFALSE 41611
// continue ;
41609: GO 41567
// PrepareHuman ( false , i , skill ) ;
41611: LD_INT 0
41613: PPUSH
41614: LD_VAR 0 8
41618: PPUSH
41619: LD_VAR 0 4
41623: PPUSH
41624: CALL_OW 380
// un := CreateHuman ;
41628: LD_ADDR_VAR 0 14
41632: PUSH
41633: CALL_OW 44
41637: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41638: LD_VAR 0 14
41642: PPUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: CALL_OW 250
41652: PPUSH
41653: LD_VAR 0 1
41657: PPUSH
41658: CALL_OW 251
41662: PPUSH
41663: LD_INT 10
41665: PPUSH
41666: LD_INT 0
41668: PPUSH
41669: CALL_OW 50
// result := result ^ un ;
41673: LD_ADDR_VAR 0 7
41677: PUSH
41678: LD_VAR 0 7
41682: PUSH
41683: LD_VAR 0 14
41687: ADD
41688: ST_TO_ADDR
// end ;
41689: GO 41567
41691: POP
41692: POP
// end ; end ;
41693: LD_VAR 0 7
41697: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41698: LD_INT 0
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
41714: PPUSH
41715: PPUSH
// result := false ;
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_INT 0
41723: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41724: LD_VAR 0 1
41728: NOT
41729: PUSH
41730: LD_VAR 0 1
41734: PPUSH
41735: CALL_OW 266
41739: PUSH
41740: LD_INT 32
41742: PUSH
41743: LD_INT 33
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: IN
41750: NOT
41751: OR
41752: IFFALSE 41756
// exit ;
41754: GO 42865
// nat := GetNation ( tower ) ;
41756: LD_ADDR_VAR 0 12
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 248
41770: ST_TO_ADDR
// side := GetSide ( tower ) ;
41771: LD_ADDR_VAR 0 16
41775: PUSH
41776: LD_VAR 0 1
41780: PPUSH
41781: CALL_OW 255
41785: ST_TO_ADDR
// x := GetX ( tower ) ;
41786: LD_ADDR_VAR 0 10
41790: PUSH
41791: LD_VAR 0 1
41795: PPUSH
41796: CALL_OW 250
41800: ST_TO_ADDR
// y := GetY ( tower ) ;
41801: LD_ADDR_VAR 0 11
41805: PUSH
41806: LD_VAR 0 1
41810: PPUSH
41811: CALL_OW 251
41815: ST_TO_ADDR
// if not x or not y then
41816: LD_VAR 0 10
41820: NOT
41821: PUSH
41822: LD_VAR 0 11
41826: NOT
41827: OR
41828: IFFALSE 41832
// exit ;
41830: GO 42865
// weapon := 0 ;
41832: LD_ADDR_VAR 0 18
41836: PUSH
41837: LD_INT 0
41839: ST_TO_ADDR
// fac_list := [ ] ;
41840: LD_ADDR_VAR 0 17
41844: PUSH
41845: EMPTY
41846: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41847: LD_ADDR_VAR 0 6
41851: PUSH
41852: LD_VAR 0 1
41856: PPUSH
41857: CALL_OW 274
41861: PPUSH
41862: LD_VAR 0 2
41866: PPUSH
41867: LD_INT 0
41869: PPUSH
41870: CALL 39436 0 3
41874: PPUSH
41875: LD_INT 30
41877: PUSH
41878: LD_INT 3
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PPUSH
41885: CALL_OW 72
41889: ST_TO_ADDR
// if not factories then
41890: LD_VAR 0 6
41894: NOT
41895: IFFALSE 41899
// exit ;
41897: GO 42865
// for i in factories do
41899: LD_ADDR_VAR 0 8
41903: PUSH
41904: LD_VAR 0 6
41908: PUSH
41909: FOR_IN
41910: IFFALSE 41935
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41912: LD_ADDR_VAR 0 17
41916: PUSH
41917: LD_VAR 0 17
41921: PUSH
41922: LD_VAR 0 8
41926: PPUSH
41927: CALL_OW 478
41931: UNION
41932: ST_TO_ADDR
41933: GO 41909
41935: POP
41936: POP
// if not fac_list then
41937: LD_VAR 0 17
41941: NOT
41942: IFFALSE 41946
// exit ;
41944: GO 42865
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41946: LD_ADDR_VAR 0 5
41950: PUSH
41951: LD_INT 4
41953: PUSH
41954: LD_INT 5
41956: PUSH
41957: LD_INT 9
41959: PUSH
41960: LD_INT 10
41962: PUSH
41963: LD_INT 6
41965: PUSH
41966: LD_INT 7
41968: PUSH
41969: LD_INT 11
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 27
41983: PUSH
41984: LD_INT 28
41986: PUSH
41987: LD_INT 26
41989: PUSH
41990: LD_INT 30
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 43
42001: PUSH
42002: LD_INT 44
42004: PUSH
42005: LD_INT 46
42007: PUSH
42008: LD_INT 45
42010: PUSH
42011: LD_INT 47
42013: PUSH
42014: LD_INT 49
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: LIST
42029: PUSH
42030: LD_VAR 0 12
42034: ARRAY
42035: ST_TO_ADDR
// list := list isect fac_list ;
42036: LD_ADDR_VAR 0 5
42040: PUSH
42041: LD_VAR 0 5
42045: PUSH
42046: LD_VAR 0 17
42050: ISECT
42051: ST_TO_ADDR
// if not list then
42052: LD_VAR 0 5
42056: NOT
42057: IFFALSE 42061
// exit ;
42059: GO 42865
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42061: LD_VAR 0 12
42065: PUSH
42066: LD_INT 3
42068: EQUAL
42069: PUSH
42070: LD_INT 49
42072: PUSH
42073: LD_VAR 0 5
42077: IN
42078: AND
42079: PUSH
42080: LD_INT 31
42082: PPUSH
42083: LD_VAR 0 16
42087: PPUSH
42088: CALL_OW 321
42092: PUSH
42093: LD_INT 2
42095: EQUAL
42096: AND
42097: IFFALSE 42157
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42099: LD_INT 22
42101: PUSH
42102: LD_VAR 0 16
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 35
42113: PUSH
42114: LD_INT 49
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 91
42123: PUSH
42124: LD_VAR 0 1
42128: PUSH
42129: LD_INT 10
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: PPUSH
42142: CALL_OW 69
42146: NOT
42147: IFFALSE 42157
// weapon := ru_time_lapser ;
42149: LD_ADDR_VAR 0 18
42153: PUSH
42154: LD_INT 49
42156: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42157: LD_VAR 0 12
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: IN
42172: PUSH
42173: LD_INT 11
42175: PUSH
42176: LD_VAR 0 5
42180: IN
42181: PUSH
42182: LD_INT 30
42184: PUSH
42185: LD_VAR 0 5
42189: IN
42190: OR
42191: AND
42192: PUSH
42193: LD_INT 6
42195: PPUSH
42196: LD_VAR 0 16
42200: PPUSH
42201: CALL_OW 321
42205: PUSH
42206: LD_INT 2
42208: EQUAL
42209: AND
42210: IFFALSE 42375
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42212: LD_INT 22
42214: PUSH
42215: LD_VAR 0 16
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 35
42229: PUSH
42230: LD_INT 11
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 35
42239: PUSH
42240: LD_INT 30
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 91
42254: PUSH
42255: LD_VAR 0 1
42259: PUSH
42260: LD_INT 18
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: PPUSH
42273: CALL_OW 69
42277: NOT
42278: PUSH
42279: LD_INT 22
42281: PUSH
42282: LD_VAR 0 16
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 30
42296: PUSH
42297: LD_INT 32
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 30
42306: PUSH
42307: LD_INT 33
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 91
42321: PUSH
42322: LD_VAR 0 1
42326: PUSH
42327: LD_INT 12
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: PUSH
42340: EMPTY
42341: LIST
42342: PPUSH
42343: CALL_OW 69
42347: PUSH
42348: LD_INT 2
42350: GREATER
42351: AND
42352: IFFALSE 42375
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42354: LD_ADDR_VAR 0 18
42358: PUSH
42359: LD_INT 11
42361: PUSH
42362: LD_INT 30
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_VAR 0 12
42373: ARRAY
42374: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42375: LD_VAR 0 18
42379: NOT
42380: PUSH
42381: LD_INT 40
42383: PPUSH
42384: LD_VAR 0 16
42388: PPUSH
42389: CALL_OW 321
42393: PUSH
42394: LD_INT 2
42396: EQUAL
42397: AND
42398: PUSH
42399: LD_INT 7
42401: PUSH
42402: LD_VAR 0 5
42406: IN
42407: PUSH
42408: LD_INT 28
42410: PUSH
42411: LD_VAR 0 5
42415: IN
42416: OR
42417: PUSH
42418: LD_INT 45
42420: PUSH
42421: LD_VAR 0 5
42425: IN
42426: OR
42427: AND
42428: IFFALSE 42682
// begin hex := GetHexInfo ( x , y ) ;
42430: LD_ADDR_VAR 0 4
42434: PUSH
42435: LD_VAR 0 10
42439: PPUSH
42440: LD_VAR 0 11
42444: PPUSH
42445: CALL_OW 546
42449: ST_TO_ADDR
// if hex [ 1 ] then
42450: LD_VAR 0 4
42454: PUSH
42455: LD_INT 1
42457: ARRAY
42458: IFFALSE 42462
// exit ;
42460: GO 42865
// height := hex [ 2 ] ;
42462: LD_ADDR_VAR 0 15
42466: PUSH
42467: LD_VAR 0 4
42471: PUSH
42472: LD_INT 2
42474: ARRAY
42475: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42476: LD_ADDR_VAR 0 14
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 3
42489: PUSH
42490: LD_INT 5
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: ST_TO_ADDR
// for i in tmp do
42499: LD_ADDR_VAR 0 8
42503: PUSH
42504: LD_VAR 0 14
42508: PUSH
42509: FOR_IN
42510: IFFALSE 42680
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42512: LD_ADDR_VAR 0 9
42516: PUSH
42517: LD_VAR 0 10
42521: PPUSH
42522: LD_VAR 0 8
42526: PPUSH
42527: LD_INT 5
42529: PPUSH
42530: CALL_OW 272
42534: PUSH
42535: LD_VAR 0 11
42539: PPUSH
42540: LD_VAR 0 8
42544: PPUSH
42545: LD_INT 5
42547: PPUSH
42548: CALL_OW 273
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42557: LD_VAR 0 9
42561: PUSH
42562: LD_INT 1
42564: ARRAY
42565: PPUSH
42566: LD_VAR 0 9
42570: PUSH
42571: LD_INT 2
42573: ARRAY
42574: PPUSH
42575: CALL_OW 488
42579: IFFALSE 42678
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42581: LD_ADDR_VAR 0 4
42585: PUSH
42586: LD_VAR 0 9
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: PPUSH
42595: LD_VAR 0 9
42599: PUSH
42600: LD_INT 2
42602: ARRAY
42603: PPUSH
42604: CALL_OW 546
42608: ST_TO_ADDR
// if hex [ 1 ] then
42609: LD_VAR 0 4
42613: PUSH
42614: LD_INT 1
42616: ARRAY
42617: IFFALSE 42621
// continue ;
42619: GO 42509
// h := hex [ 2 ] ;
42621: LD_ADDR_VAR 0 13
42625: PUSH
42626: LD_VAR 0 4
42630: PUSH
42631: LD_INT 2
42633: ARRAY
42634: ST_TO_ADDR
// if h + 7 < height then
42635: LD_VAR 0 13
42639: PUSH
42640: LD_INT 7
42642: PLUS
42643: PUSH
42644: LD_VAR 0 15
42648: LESS
42649: IFFALSE 42678
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42651: LD_ADDR_VAR 0 18
42655: PUSH
42656: LD_INT 7
42658: PUSH
42659: LD_INT 28
42661: PUSH
42662: LD_INT 45
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: LIST
42669: PUSH
42670: LD_VAR 0 12
42674: ARRAY
42675: ST_TO_ADDR
// break ;
42676: GO 42680
// end ; end ; end ;
42678: GO 42509
42680: POP
42681: POP
// end ; if not weapon then
42682: LD_VAR 0 18
42686: NOT
42687: IFFALSE 42747
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42689: LD_ADDR_VAR 0 5
42693: PUSH
42694: LD_VAR 0 5
42698: PUSH
42699: LD_INT 11
42701: PUSH
42702: LD_INT 30
42704: PUSH
42705: LD_INT 49
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: DIFF
42713: ST_TO_ADDR
// if not list then
42714: LD_VAR 0 5
42718: NOT
42719: IFFALSE 42723
// exit ;
42721: GO 42865
// weapon := list [ rand ( 1 , list ) ] ;
42723: LD_ADDR_VAR 0 18
42727: PUSH
42728: LD_VAR 0 5
42732: PUSH
42733: LD_INT 1
42735: PPUSH
42736: LD_VAR 0 5
42740: PPUSH
42741: CALL_OW 12
42745: ARRAY
42746: ST_TO_ADDR
// end ; if weapon then
42747: LD_VAR 0 18
42751: IFFALSE 42865
// begin tmp := CostOfWeapon ( weapon ) ;
42753: LD_ADDR_VAR 0 14
42757: PUSH
42758: LD_VAR 0 18
42762: PPUSH
42763: CALL_OW 451
42767: ST_TO_ADDR
// j := GetBase ( tower ) ;
42768: LD_ADDR_VAR 0 9
42772: PUSH
42773: LD_VAR 0 1
42777: PPUSH
42778: CALL_OW 274
42782: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42783: LD_VAR 0 9
42787: PPUSH
42788: LD_INT 1
42790: PPUSH
42791: CALL_OW 275
42795: PUSH
42796: LD_VAR 0 14
42800: PUSH
42801: LD_INT 1
42803: ARRAY
42804: GREATEREQUAL
42805: PUSH
42806: LD_VAR 0 9
42810: PPUSH
42811: LD_INT 2
42813: PPUSH
42814: CALL_OW 275
42818: PUSH
42819: LD_VAR 0 14
42823: PUSH
42824: LD_INT 2
42826: ARRAY
42827: GREATEREQUAL
42828: AND
42829: PUSH
42830: LD_VAR 0 9
42834: PPUSH
42835: LD_INT 3
42837: PPUSH
42838: CALL_OW 275
42842: PUSH
42843: LD_VAR 0 14
42847: PUSH
42848: LD_INT 3
42850: ARRAY
42851: GREATEREQUAL
42852: AND
42853: IFFALSE 42865
// result := weapon ;
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_VAR 0 18
42864: ST_TO_ADDR
// end ; end ;
42865: LD_VAR 0 3
42869: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42870: LD_INT 0
42872: PPUSH
42873: PPUSH
// result := true ;
42874: LD_ADDR_VAR 0 3
42878: PUSH
42879: LD_INT 1
42881: ST_TO_ADDR
// if array1 = array2 then
42882: LD_VAR 0 1
42886: PUSH
42887: LD_VAR 0 2
42891: EQUAL
42892: IFFALSE 42952
// begin for i = 1 to array1 do
42894: LD_ADDR_VAR 0 4
42898: PUSH
42899: DOUBLE
42900: LD_INT 1
42902: DEC
42903: ST_TO_ADDR
42904: LD_VAR 0 1
42908: PUSH
42909: FOR_TO
42910: IFFALSE 42948
// if array1 [ i ] <> array2 [ i ] then
42912: LD_VAR 0 1
42916: PUSH
42917: LD_VAR 0 4
42921: ARRAY
42922: PUSH
42923: LD_VAR 0 2
42927: PUSH
42928: LD_VAR 0 4
42932: ARRAY
42933: NONEQUAL
42934: IFFALSE 42946
// begin result := false ;
42936: LD_ADDR_VAR 0 3
42940: PUSH
42941: LD_INT 0
42943: ST_TO_ADDR
// break ;
42944: GO 42948
// end ;
42946: GO 42909
42948: POP
42949: POP
// end else
42950: GO 42960
// result := false ;
42952: LD_ADDR_VAR 0 3
42956: PUSH
42957: LD_INT 0
42959: ST_TO_ADDR
// end ;
42960: LD_VAR 0 3
42964: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42965: LD_INT 0
42967: PPUSH
42968: PPUSH
// if not array1 or not array2 then
42969: LD_VAR 0 1
42973: NOT
42974: PUSH
42975: LD_VAR 0 2
42979: NOT
42980: OR
42981: IFFALSE 42985
// exit ;
42983: GO 43049
// result := true ;
42985: LD_ADDR_VAR 0 3
42989: PUSH
42990: LD_INT 1
42992: ST_TO_ADDR
// for i = 1 to array1 do
42993: LD_ADDR_VAR 0 4
42997: PUSH
42998: DOUBLE
42999: LD_INT 1
43001: DEC
43002: ST_TO_ADDR
43003: LD_VAR 0 1
43007: PUSH
43008: FOR_TO
43009: IFFALSE 43047
// if array1 [ i ] <> array2 [ i ] then
43011: LD_VAR 0 1
43015: PUSH
43016: LD_VAR 0 4
43020: ARRAY
43021: PUSH
43022: LD_VAR 0 2
43026: PUSH
43027: LD_VAR 0 4
43031: ARRAY
43032: NONEQUAL
43033: IFFALSE 43045
// begin result := false ;
43035: LD_ADDR_VAR 0 3
43039: PUSH
43040: LD_INT 0
43042: ST_TO_ADDR
// break ;
43043: GO 43047
// end ;
43045: GO 43008
43047: POP
43048: POP
// end ;
43049: LD_VAR 0 3
43053: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43054: LD_INT 0
43056: PPUSH
43057: PPUSH
43058: PPUSH
// pom := GetBase ( fac ) ;
43059: LD_ADDR_VAR 0 5
43063: PUSH
43064: LD_VAR 0 1
43068: PPUSH
43069: CALL_OW 274
43073: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43074: LD_ADDR_VAR 0 4
43078: PUSH
43079: LD_VAR 0 2
43083: PUSH
43084: LD_INT 1
43086: ARRAY
43087: PPUSH
43088: LD_VAR 0 2
43092: PUSH
43093: LD_INT 2
43095: ARRAY
43096: PPUSH
43097: LD_VAR 0 2
43101: PUSH
43102: LD_INT 3
43104: ARRAY
43105: PPUSH
43106: LD_VAR 0 2
43110: PUSH
43111: LD_INT 4
43113: ARRAY
43114: PPUSH
43115: CALL_OW 449
43119: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43120: LD_ADDR_VAR 0 3
43124: PUSH
43125: LD_VAR 0 5
43129: PPUSH
43130: LD_INT 1
43132: PPUSH
43133: CALL_OW 275
43137: PUSH
43138: LD_VAR 0 4
43142: PUSH
43143: LD_INT 1
43145: ARRAY
43146: GREATEREQUAL
43147: PUSH
43148: LD_VAR 0 5
43152: PPUSH
43153: LD_INT 2
43155: PPUSH
43156: CALL_OW 275
43160: PUSH
43161: LD_VAR 0 4
43165: PUSH
43166: LD_INT 2
43168: ARRAY
43169: GREATEREQUAL
43170: AND
43171: PUSH
43172: LD_VAR 0 5
43176: PPUSH
43177: LD_INT 3
43179: PPUSH
43180: CALL_OW 275
43184: PUSH
43185: LD_VAR 0 4
43189: PUSH
43190: LD_INT 3
43192: ARRAY
43193: GREATEREQUAL
43194: AND
43195: ST_TO_ADDR
// end ;
43196: LD_VAR 0 3
43200: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43201: LD_INT 0
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
// pom := GetBase ( building ) ;
43207: LD_ADDR_VAR 0 3
43211: PUSH
43212: LD_VAR 0 1
43216: PPUSH
43217: CALL_OW 274
43221: ST_TO_ADDR
// if not pom then
43222: LD_VAR 0 3
43226: NOT
43227: IFFALSE 43231
// exit ;
43229: GO 43401
// btype := GetBType ( building ) ;
43231: LD_ADDR_VAR 0 5
43235: PUSH
43236: LD_VAR 0 1
43240: PPUSH
43241: CALL_OW 266
43245: ST_TO_ADDR
// if btype = b_armoury then
43246: LD_VAR 0 5
43250: PUSH
43251: LD_INT 4
43253: EQUAL
43254: IFFALSE 43264
// btype := b_barracks ;
43256: LD_ADDR_VAR 0 5
43260: PUSH
43261: LD_INT 5
43263: ST_TO_ADDR
// if btype = b_depot then
43264: LD_VAR 0 5
43268: PUSH
43269: LD_INT 0
43271: EQUAL
43272: IFFALSE 43282
// btype := b_warehouse ;
43274: LD_ADDR_VAR 0 5
43278: PUSH
43279: LD_INT 1
43281: ST_TO_ADDR
// if btype = b_workshop then
43282: LD_VAR 0 5
43286: PUSH
43287: LD_INT 2
43289: EQUAL
43290: IFFALSE 43300
// btype := b_factory ;
43292: LD_ADDR_VAR 0 5
43296: PUSH
43297: LD_INT 3
43299: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43300: LD_ADDR_VAR 0 4
43304: PUSH
43305: LD_VAR 0 5
43309: PPUSH
43310: LD_VAR 0 1
43314: PPUSH
43315: CALL_OW 248
43319: PPUSH
43320: CALL_OW 450
43324: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43325: LD_ADDR_VAR 0 2
43329: PUSH
43330: LD_VAR 0 3
43334: PPUSH
43335: LD_INT 1
43337: PPUSH
43338: CALL_OW 275
43342: PUSH
43343: LD_VAR 0 4
43347: PUSH
43348: LD_INT 1
43350: ARRAY
43351: GREATEREQUAL
43352: PUSH
43353: LD_VAR 0 3
43357: PPUSH
43358: LD_INT 2
43360: PPUSH
43361: CALL_OW 275
43365: PUSH
43366: LD_VAR 0 4
43370: PUSH
43371: LD_INT 2
43373: ARRAY
43374: GREATEREQUAL
43375: AND
43376: PUSH
43377: LD_VAR 0 3
43381: PPUSH
43382: LD_INT 3
43384: PPUSH
43385: CALL_OW 275
43389: PUSH
43390: LD_VAR 0 4
43394: PUSH
43395: LD_INT 3
43397: ARRAY
43398: GREATEREQUAL
43399: AND
43400: ST_TO_ADDR
// end ;
43401: LD_VAR 0 2
43405: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43406: LD_INT 0
43408: PPUSH
43409: PPUSH
43410: PPUSH
// pom := GetBase ( building ) ;
43411: LD_ADDR_VAR 0 4
43415: PUSH
43416: LD_VAR 0 1
43420: PPUSH
43421: CALL_OW 274
43425: ST_TO_ADDR
// if not pom then
43426: LD_VAR 0 4
43430: NOT
43431: IFFALSE 43435
// exit ;
43433: GO 43536
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43435: LD_ADDR_VAR 0 5
43439: PUSH
43440: LD_VAR 0 2
43444: PPUSH
43445: LD_VAR 0 1
43449: PPUSH
43450: CALL_OW 248
43454: PPUSH
43455: CALL_OW 450
43459: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43460: LD_ADDR_VAR 0 3
43464: PUSH
43465: LD_VAR 0 4
43469: PPUSH
43470: LD_INT 1
43472: PPUSH
43473: CALL_OW 275
43477: PUSH
43478: LD_VAR 0 5
43482: PUSH
43483: LD_INT 1
43485: ARRAY
43486: GREATEREQUAL
43487: PUSH
43488: LD_VAR 0 4
43492: PPUSH
43493: LD_INT 2
43495: PPUSH
43496: CALL_OW 275
43500: PUSH
43501: LD_VAR 0 5
43505: PUSH
43506: LD_INT 2
43508: ARRAY
43509: GREATEREQUAL
43510: AND
43511: PUSH
43512: LD_VAR 0 4
43516: PPUSH
43517: LD_INT 3
43519: PPUSH
43520: CALL_OW 275
43524: PUSH
43525: LD_VAR 0 5
43529: PUSH
43530: LD_INT 3
43532: ARRAY
43533: GREATEREQUAL
43534: AND
43535: ST_TO_ADDR
// end ;
43536: LD_VAR 0 3
43540: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43541: LD_INT 0
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
// result := false ;
43554: LD_ADDR_VAR 0 8
43558: PUSH
43559: LD_INT 0
43561: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43562: LD_VAR 0 5
43566: NOT
43567: PUSH
43568: LD_VAR 0 1
43572: NOT
43573: OR
43574: PUSH
43575: LD_VAR 0 2
43579: NOT
43580: OR
43581: PUSH
43582: LD_VAR 0 3
43586: NOT
43587: OR
43588: IFFALSE 43592
// exit ;
43590: GO 44406
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43592: LD_ADDR_VAR 0 14
43596: PUSH
43597: LD_VAR 0 1
43601: PPUSH
43602: LD_VAR 0 2
43606: PPUSH
43607: LD_VAR 0 3
43611: PPUSH
43612: LD_VAR 0 4
43616: PPUSH
43617: LD_VAR 0 5
43621: PUSH
43622: LD_INT 1
43624: ARRAY
43625: PPUSH
43626: CALL_OW 248
43630: PPUSH
43631: LD_INT 0
43633: PPUSH
43634: CALL 45659 0 6
43638: ST_TO_ADDR
// if not hexes then
43639: LD_VAR 0 14
43643: NOT
43644: IFFALSE 43648
// exit ;
43646: GO 44406
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43648: LD_ADDR_VAR 0 17
43652: PUSH
43653: LD_VAR 0 5
43657: PPUSH
43658: LD_INT 22
43660: PUSH
43661: LD_VAR 0 13
43665: PPUSH
43666: CALL_OW 255
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: LD_INT 30
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 30
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PPUSH
43707: CALL_OW 72
43711: ST_TO_ADDR
// for i = 1 to hexes do
43712: LD_ADDR_VAR 0 9
43716: PUSH
43717: DOUBLE
43718: LD_INT 1
43720: DEC
43721: ST_TO_ADDR
43722: LD_VAR 0 14
43726: PUSH
43727: FOR_TO
43728: IFFALSE 44404
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43730: LD_ADDR_VAR 0 13
43734: PUSH
43735: LD_VAR 0 14
43739: PUSH
43740: LD_VAR 0 9
43744: ARRAY
43745: PUSH
43746: LD_INT 1
43748: ARRAY
43749: PPUSH
43750: LD_VAR 0 14
43754: PUSH
43755: LD_VAR 0 9
43759: ARRAY
43760: PUSH
43761: LD_INT 2
43763: ARRAY
43764: PPUSH
43765: CALL_OW 428
43769: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43770: LD_VAR 0 14
43774: PUSH
43775: LD_VAR 0 9
43779: ARRAY
43780: PUSH
43781: LD_INT 1
43783: ARRAY
43784: PPUSH
43785: LD_VAR 0 14
43789: PUSH
43790: LD_VAR 0 9
43794: ARRAY
43795: PUSH
43796: LD_INT 2
43798: ARRAY
43799: PPUSH
43800: CALL_OW 351
43804: PUSH
43805: LD_VAR 0 14
43809: PUSH
43810: LD_VAR 0 9
43814: ARRAY
43815: PUSH
43816: LD_INT 1
43818: ARRAY
43819: PPUSH
43820: LD_VAR 0 14
43824: PUSH
43825: LD_VAR 0 9
43829: ARRAY
43830: PUSH
43831: LD_INT 2
43833: ARRAY
43834: PPUSH
43835: CALL_OW 488
43839: NOT
43840: OR
43841: PUSH
43842: LD_VAR 0 13
43846: PPUSH
43847: CALL_OW 247
43851: PUSH
43852: LD_INT 3
43854: EQUAL
43855: OR
43856: IFFALSE 43862
// exit ;
43858: POP
43859: POP
43860: GO 44406
// if not tmp then
43862: LD_VAR 0 13
43866: NOT
43867: IFFALSE 43871
// continue ;
43869: GO 43727
// result := true ;
43871: LD_ADDR_VAR 0 8
43875: PUSH
43876: LD_INT 1
43878: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43879: LD_VAR 0 6
43883: PUSH
43884: LD_VAR 0 13
43888: PPUSH
43889: CALL_OW 247
43893: PUSH
43894: LD_INT 2
43896: EQUAL
43897: AND
43898: PUSH
43899: LD_VAR 0 13
43903: PPUSH
43904: CALL_OW 263
43908: PUSH
43909: LD_INT 1
43911: EQUAL
43912: AND
43913: IFFALSE 44077
// begin if IsDrivenBy ( tmp ) then
43915: LD_VAR 0 13
43919: PPUSH
43920: CALL_OW 311
43924: IFFALSE 43928
// continue ;
43926: GO 43727
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43928: LD_VAR 0 6
43932: PPUSH
43933: LD_INT 3
43935: PUSH
43936: LD_INT 60
43938: PUSH
43939: EMPTY
43940: LIST
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 3
43948: PUSH
43949: LD_INT 55
43951: PUSH
43952: EMPTY
43953: LIST
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PPUSH
43963: CALL_OW 72
43967: IFFALSE 44075
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43969: LD_ADDR_VAR 0 18
43973: PUSH
43974: LD_VAR 0 6
43978: PPUSH
43979: LD_INT 3
43981: PUSH
43982: LD_INT 60
43984: PUSH
43985: EMPTY
43986: LIST
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 3
43994: PUSH
43995: LD_INT 55
43997: PUSH
43998: EMPTY
43999: LIST
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PPUSH
44009: CALL_OW 72
44013: PUSH
44014: LD_INT 1
44016: ARRAY
44017: ST_TO_ADDR
// if IsInUnit ( driver ) then
44018: LD_VAR 0 18
44022: PPUSH
44023: CALL_OW 310
44027: IFFALSE 44038
// ComExit ( driver ) ;
44029: LD_VAR 0 18
44033: PPUSH
44034: CALL 69440 0 1
// AddComEnterUnit ( driver , tmp ) ;
44038: LD_VAR 0 18
44042: PPUSH
44043: LD_VAR 0 13
44047: PPUSH
44048: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44052: LD_VAR 0 18
44056: PPUSH
44057: LD_VAR 0 7
44061: PPUSH
44062: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44066: LD_VAR 0 18
44070: PPUSH
44071: CALL_OW 181
// end ; continue ;
44075: GO 43727
// end ; if not cleaners or not tmp in cleaners then
44077: LD_VAR 0 6
44081: NOT
44082: PUSH
44083: LD_VAR 0 13
44087: PUSH
44088: LD_VAR 0 6
44092: IN
44093: NOT
44094: OR
44095: IFFALSE 44402
// begin if dep then
44097: LD_VAR 0 17
44101: IFFALSE 44237
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44103: LD_ADDR_VAR 0 16
44107: PUSH
44108: LD_VAR 0 17
44112: PUSH
44113: LD_INT 1
44115: ARRAY
44116: PPUSH
44117: CALL_OW 250
44121: PPUSH
44122: LD_VAR 0 17
44126: PUSH
44127: LD_INT 1
44129: ARRAY
44130: PPUSH
44131: CALL_OW 254
44135: PPUSH
44136: LD_INT 5
44138: PPUSH
44139: CALL_OW 272
44143: PUSH
44144: LD_VAR 0 17
44148: PUSH
44149: LD_INT 1
44151: ARRAY
44152: PPUSH
44153: CALL_OW 251
44157: PPUSH
44158: LD_VAR 0 17
44162: PUSH
44163: LD_INT 1
44165: ARRAY
44166: PPUSH
44167: CALL_OW 254
44171: PPUSH
44172: LD_INT 5
44174: PPUSH
44175: CALL_OW 273
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44184: LD_VAR 0 16
44188: PUSH
44189: LD_INT 1
44191: ARRAY
44192: PPUSH
44193: LD_VAR 0 16
44197: PUSH
44198: LD_INT 2
44200: ARRAY
44201: PPUSH
44202: CALL_OW 488
44206: IFFALSE 44237
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44208: LD_VAR 0 13
44212: PPUSH
44213: LD_VAR 0 16
44217: PUSH
44218: LD_INT 1
44220: ARRAY
44221: PPUSH
44222: LD_VAR 0 16
44226: PUSH
44227: LD_INT 2
44229: ARRAY
44230: PPUSH
44231: CALL_OW 111
// continue ;
44235: GO 43727
// end ; end ; r := GetDir ( tmp ) ;
44237: LD_ADDR_VAR 0 15
44241: PUSH
44242: LD_VAR 0 13
44246: PPUSH
44247: CALL_OW 254
44251: ST_TO_ADDR
// if r = 5 then
44252: LD_VAR 0 15
44256: PUSH
44257: LD_INT 5
44259: EQUAL
44260: IFFALSE 44270
// r := 0 ;
44262: LD_ADDR_VAR 0 15
44266: PUSH
44267: LD_INT 0
44269: ST_TO_ADDR
// for j = r to 5 do
44270: LD_ADDR_VAR 0 10
44274: PUSH
44275: DOUBLE
44276: LD_VAR 0 15
44280: DEC
44281: ST_TO_ADDR
44282: LD_INT 5
44284: PUSH
44285: FOR_TO
44286: IFFALSE 44400
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44288: LD_ADDR_VAR 0 11
44292: PUSH
44293: LD_VAR 0 13
44297: PPUSH
44298: CALL_OW 250
44302: PPUSH
44303: LD_VAR 0 10
44307: PPUSH
44308: LD_INT 2
44310: PPUSH
44311: CALL_OW 272
44315: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44316: LD_ADDR_VAR 0 12
44320: PUSH
44321: LD_VAR 0 13
44325: PPUSH
44326: CALL_OW 251
44330: PPUSH
44331: LD_VAR 0 10
44335: PPUSH
44336: LD_INT 2
44338: PPUSH
44339: CALL_OW 273
44343: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44344: LD_VAR 0 11
44348: PPUSH
44349: LD_VAR 0 12
44353: PPUSH
44354: CALL_OW 488
44358: PUSH
44359: LD_VAR 0 11
44363: PPUSH
44364: LD_VAR 0 12
44368: PPUSH
44369: CALL_OW 428
44373: NOT
44374: AND
44375: IFFALSE 44398
// begin ComMoveXY ( tmp , _x , _y ) ;
44377: LD_VAR 0 13
44381: PPUSH
44382: LD_VAR 0 11
44386: PPUSH
44387: LD_VAR 0 12
44391: PPUSH
44392: CALL_OW 111
// break ;
44396: GO 44400
// end ; end ;
44398: GO 44285
44400: POP
44401: POP
// end ; end ;
44402: GO 43727
44404: POP
44405: POP
// end ;
44406: LD_VAR 0 8
44410: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44411: LD_INT 0
44413: PPUSH
// result := true ;
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_INT 1
44421: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44422: LD_VAR 0 2
44426: PUSH
44427: LD_INT 24
44429: DOUBLE
44430: EQUAL
44431: IFTRUE 44441
44433: LD_INT 33
44435: DOUBLE
44436: EQUAL
44437: IFTRUE 44441
44439: GO 44466
44441: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44442: LD_ADDR_VAR 0 3
44446: PUSH
44447: LD_INT 32
44449: PPUSH
44450: LD_VAR 0 1
44454: PPUSH
44455: CALL_OW 321
44459: PUSH
44460: LD_INT 2
44462: EQUAL
44463: ST_TO_ADDR
44464: GO 44782
44466: LD_INT 20
44468: DOUBLE
44469: EQUAL
44470: IFTRUE 44474
44472: GO 44499
44474: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44475: LD_ADDR_VAR 0 3
44479: PUSH
44480: LD_INT 6
44482: PPUSH
44483: LD_VAR 0 1
44487: PPUSH
44488: CALL_OW 321
44492: PUSH
44493: LD_INT 2
44495: EQUAL
44496: ST_TO_ADDR
44497: GO 44782
44499: LD_INT 22
44501: DOUBLE
44502: EQUAL
44503: IFTRUE 44513
44505: LD_INT 36
44507: DOUBLE
44508: EQUAL
44509: IFTRUE 44513
44511: GO 44538
44513: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44514: LD_ADDR_VAR 0 3
44518: PUSH
44519: LD_INT 15
44521: PPUSH
44522: LD_VAR 0 1
44526: PPUSH
44527: CALL_OW 321
44531: PUSH
44532: LD_INT 2
44534: EQUAL
44535: ST_TO_ADDR
44536: GO 44782
44538: LD_INT 30
44540: DOUBLE
44541: EQUAL
44542: IFTRUE 44546
44544: GO 44571
44546: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44547: LD_ADDR_VAR 0 3
44551: PUSH
44552: LD_INT 20
44554: PPUSH
44555: LD_VAR 0 1
44559: PPUSH
44560: CALL_OW 321
44564: PUSH
44565: LD_INT 2
44567: EQUAL
44568: ST_TO_ADDR
44569: GO 44782
44571: LD_INT 28
44573: DOUBLE
44574: EQUAL
44575: IFTRUE 44585
44577: LD_INT 21
44579: DOUBLE
44580: EQUAL
44581: IFTRUE 44585
44583: GO 44610
44585: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44586: LD_ADDR_VAR 0 3
44590: PUSH
44591: LD_INT 21
44593: PPUSH
44594: LD_VAR 0 1
44598: PPUSH
44599: CALL_OW 321
44603: PUSH
44604: LD_INT 2
44606: EQUAL
44607: ST_TO_ADDR
44608: GO 44782
44610: LD_INT 16
44612: DOUBLE
44613: EQUAL
44614: IFTRUE 44618
44616: GO 44643
44618: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44619: LD_ADDR_VAR 0 3
44623: PUSH
44624: LD_INT 84
44626: PPUSH
44627: LD_VAR 0 1
44631: PPUSH
44632: CALL_OW 321
44636: PUSH
44637: LD_INT 2
44639: EQUAL
44640: ST_TO_ADDR
44641: GO 44782
44643: LD_INT 19
44645: DOUBLE
44646: EQUAL
44647: IFTRUE 44657
44649: LD_INT 23
44651: DOUBLE
44652: EQUAL
44653: IFTRUE 44657
44655: GO 44682
44657: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44658: LD_ADDR_VAR 0 3
44662: PUSH
44663: LD_INT 83
44665: PPUSH
44666: LD_VAR 0 1
44670: PPUSH
44671: CALL_OW 321
44675: PUSH
44676: LD_INT 2
44678: EQUAL
44679: ST_TO_ADDR
44680: GO 44782
44682: LD_INT 17
44684: DOUBLE
44685: EQUAL
44686: IFTRUE 44690
44688: GO 44715
44690: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44691: LD_ADDR_VAR 0 3
44695: PUSH
44696: LD_INT 39
44698: PPUSH
44699: LD_VAR 0 1
44703: PPUSH
44704: CALL_OW 321
44708: PUSH
44709: LD_INT 2
44711: EQUAL
44712: ST_TO_ADDR
44713: GO 44782
44715: LD_INT 18
44717: DOUBLE
44718: EQUAL
44719: IFTRUE 44723
44721: GO 44748
44723: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44724: LD_ADDR_VAR 0 3
44728: PUSH
44729: LD_INT 40
44731: PPUSH
44732: LD_VAR 0 1
44736: PPUSH
44737: CALL_OW 321
44741: PUSH
44742: LD_INT 2
44744: EQUAL
44745: ST_TO_ADDR
44746: GO 44782
44748: LD_INT 27
44750: DOUBLE
44751: EQUAL
44752: IFTRUE 44756
44754: GO 44781
44756: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44757: LD_ADDR_VAR 0 3
44761: PUSH
44762: LD_INT 35
44764: PPUSH
44765: LD_VAR 0 1
44769: PPUSH
44770: CALL_OW 321
44774: PUSH
44775: LD_INT 2
44777: EQUAL
44778: ST_TO_ADDR
44779: GO 44782
44781: POP
// end ;
44782: LD_VAR 0 3
44786: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44787: LD_INT 0
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
44795: PPUSH
44796: PPUSH
44797: PPUSH
44798: PPUSH
44799: PPUSH
// result := false ;
44800: LD_ADDR_VAR 0 6
44804: PUSH
44805: LD_INT 0
44807: ST_TO_ADDR
// if btype = b_depot then
44808: LD_VAR 0 2
44812: PUSH
44813: LD_INT 0
44815: EQUAL
44816: IFFALSE 44828
// begin result := true ;
44818: LD_ADDR_VAR 0 6
44822: PUSH
44823: LD_INT 1
44825: ST_TO_ADDR
// exit ;
44826: GO 45654
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44828: LD_VAR 0 1
44832: NOT
44833: PUSH
44834: LD_VAR 0 1
44838: PPUSH
44839: CALL_OW 266
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: IN
44854: NOT
44855: OR
44856: PUSH
44857: LD_VAR 0 2
44861: NOT
44862: OR
44863: PUSH
44864: LD_VAR 0 5
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 3
44880: PUSH
44881: LD_INT 4
44883: PUSH
44884: LD_INT 5
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: IN
44895: NOT
44896: OR
44897: PUSH
44898: LD_VAR 0 3
44902: PPUSH
44903: LD_VAR 0 4
44907: PPUSH
44908: CALL_OW 488
44912: NOT
44913: OR
44914: IFFALSE 44918
// exit ;
44916: GO 45654
// side := GetSide ( depot ) ;
44918: LD_ADDR_VAR 0 9
44922: PUSH
44923: LD_VAR 0 1
44927: PPUSH
44928: CALL_OW 255
44932: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44933: LD_VAR 0 9
44937: PPUSH
44938: LD_VAR 0 2
44942: PPUSH
44943: CALL 44411 0 2
44947: NOT
44948: IFFALSE 44952
// exit ;
44950: GO 45654
// pom := GetBase ( depot ) ;
44952: LD_ADDR_VAR 0 10
44956: PUSH
44957: LD_VAR 0 1
44961: PPUSH
44962: CALL_OW 274
44966: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44967: LD_ADDR_VAR 0 11
44971: PUSH
44972: LD_VAR 0 2
44976: PPUSH
44977: LD_VAR 0 1
44981: PPUSH
44982: CALL_OW 248
44986: PPUSH
44987: CALL_OW 450
44991: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44992: LD_VAR 0 10
44996: PPUSH
44997: LD_INT 1
44999: PPUSH
45000: CALL_OW 275
45004: PUSH
45005: LD_VAR 0 11
45009: PUSH
45010: LD_INT 1
45012: ARRAY
45013: GREATEREQUAL
45014: PUSH
45015: LD_VAR 0 10
45019: PPUSH
45020: LD_INT 2
45022: PPUSH
45023: CALL_OW 275
45027: PUSH
45028: LD_VAR 0 11
45032: PUSH
45033: LD_INT 2
45035: ARRAY
45036: GREATEREQUAL
45037: AND
45038: PUSH
45039: LD_VAR 0 10
45043: PPUSH
45044: LD_INT 3
45046: PPUSH
45047: CALL_OW 275
45051: PUSH
45052: LD_VAR 0 11
45056: PUSH
45057: LD_INT 3
45059: ARRAY
45060: GREATEREQUAL
45061: AND
45062: NOT
45063: IFFALSE 45067
// exit ;
45065: GO 45654
// if GetBType ( depot ) = b_depot then
45067: LD_VAR 0 1
45071: PPUSH
45072: CALL_OW 266
45076: PUSH
45077: LD_INT 0
45079: EQUAL
45080: IFFALSE 45092
// dist := 28 else
45082: LD_ADDR_VAR 0 14
45086: PUSH
45087: LD_INT 28
45089: ST_TO_ADDR
45090: GO 45100
// dist := 36 ;
45092: LD_ADDR_VAR 0 14
45096: PUSH
45097: LD_INT 36
45099: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45100: LD_VAR 0 1
45104: PPUSH
45105: LD_VAR 0 3
45109: PPUSH
45110: LD_VAR 0 4
45114: PPUSH
45115: CALL_OW 297
45119: PUSH
45120: LD_VAR 0 14
45124: GREATER
45125: IFFALSE 45129
// exit ;
45127: GO 45654
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45129: LD_ADDR_VAR 0 12
45133: PUSH
45134: LD_VAR 0 2
45138: PPUSH
45139: LD_VAR 0 3
45143: PPUSH
45144: LD_VAR 0 4
45148: PPUSH
45149: LD_VAR 0 5
45153: PPUSH
45154: LD_VAR 0 1
45158: PPUSH
45159: CALL_OW 248
45163: PPUSH
45164: LD_INT 0
45166: PPUSH
45167: CALL 45659 0 6
45171: ST_TO_ADDR
// if not hexes then
45172: LD_VAR 0 12
45176: NOT
45177: IFFALSE 45181
// exit ;
45179: GO 45654
// hex := GetHexInfo ( x , y ) ;
45181: LD_ADDR_VAR 0 15
45185: PUSH
45186: LD_VAR 0 3
45190: PPUSH
45191: LD_VAR 0 4
45195: PPUSH
45196: CALL_OW 546
45200: ST_TO_ADDR
// if hex [ 1 ] then
45201: LD_VAR 0 15
45205: PUSH
45206: LD_INT 1
45208: ARRAY
45209: IFFALSE 45213
// exit ;
45211: GO 45654
// height := hex [ 2 ] ;
45213: LD_ADDR_VAR 0 13
45217: PUSH
45218: LD_VAR 0 15
45222: PUSH
45223: LD_INT 2
45225: ARRAY
45226: ST_TO_ADDR
// for i = 1 to hexes do
45227: LD_ADDR_VAR 0 7
45231: PUSH
45232: DOUBLE
45233: LD_INT 1
45235: DEC
45236: ST_TO_ADDR
45237: LD_VAR 0 12
45241: PUSH
45242: FOR_TO
45243: IFFALSE 45573
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45245: LD_VAR 0 12
45249: PUSH
45250: LD_VAR 0 7
45254: ARRAY
45255: PUSH
45256: LD_INT 1
45258: ARRAY
45259: PPUSH
45260: LD_VAR 0 12
45264: PUSH
45265: LD_VAR 0 7
45269: ARRAY
45270: PUSH
45271: LD_INT 2
45273: ARRAY
45274: PPUSH
45275: CALL_OW 488
45279: NOT
45280: PUSH
45281: LD_VAR 0 12
45285: PUSH
45286: LD_VAR 0 7
45290: ARRAY
45291: PUSH
45292: LD_INT 1
45294: ARRAY
45295: PPUSH
45296: LD_VAR 0 12
45300: PUSH
45301: LD_VAR 0 7
45305: ARRAY
45306: PUSH
45307: LD_INT 2
45309: ARRAY
45310: PPUSH
45311: CALL_OW 428
45315: PUSH
45316: LD_INT 0
45318: GREATER
45319: OR
45320: PUSH
45321: LD_VAR 0 12
45325: PUSH
45326: LD_VAR 0 7
45330: ARRAY
45331: PUSH
45332: LD_INT 1
45334: ARRAY
45335: PPUSH
45336: LD_VAR 0 12
45340: PUSH
45341: LD_VAR 0 7
45345: ARRAY
45346: PUSH
45347: LD_INT 2
45349: ARRAY
45350: PPUSH
45351: CALL_OW 351
45355: OR
45356: IFFALSE 45362
// exit ;
45358: POP
45359: POP
45360: GO 45654
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45362: LD_ADDR_VAR 0 8
45366: PUSH
45367: LD_VAR 0 12
45371: PUSH
45372: LD_VAR 0 7
45376: ARRAY
45377: PUSH
45378: LD_INT 1
45380: ARRAY
45381: PPUSH
45382: LD_VAR 0 12
45386: PUSH
45387: LD_VAR 0 7
45391: ARRAY
45392: PUSH
45393: LD_INT 2
45395: ARRAY
45396: PPUSH
45397: CALL_OW 546
45401: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45402: LD_VAR 0 8
45406: PUSH
45407: LD_INT 1
45409: ARRAY
45410: PUSH
45411: LD_VAR 0 8
45415: PUSH
45416: LD_INT 2
45418: ARRAY
45419: PUSH
45420: LD_VAR 0 13
45424: PUSH
45425: LD_INT 2
45427: PLUS
45428: GREATER
45429: OR
45430: PUSH
45431: LD_VAR 0 8
45435: PUSH
45436: LD_INT 2
45438: ARRAY
45439: PUSH
45440: LD_VAR 0 13
45444: PUSH
45445: LD_INT 2
45447: MINUS
45448: LESS
45449: OR
45450: PUSH
45451: LD_VAR 0 8
45455: PUSH
45456: LD_INT 3
45458: ARRAY
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: LD_INT 8
45465: PUSH
45466: LD_INT 9
45468: PUSH
45469: LD_INT 10
45471: PUSH
45472: LD_INT 11
45474: PUSH
45475: LD_INT 12
45477: PUSH
45478: LD_INT 13
45480: PUSH
45481: LD_INT 16
45483: PUSH
45484: LD_INT 17
45486: PUSH
45487: LD_INT 18
45489: PUSH
45490: LD_INT 19
45492: PUSH
45493: LD_INT 20
45495: PUSH
45496: LD_INT 21
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: IN
45514: NOT
45515: OR
45516: PUSH
45517: LD_VAR 0 8
45521: PUSH
45522: LD_INT 5
45524: ARRAY
45525: NOT
45526: OR
45527: PUSH
45528: LD_VAR 0 8
45532: PUSH
45533: LD_INT 6
45535: ARRAY
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: LD_INT 7
45545: PUSH
45546: LD_INT 9
45548: PUSH
45549: LD_INT 10
45551: PUSH
45552: LD_INT 11
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: IN
45563: NOT
45564: OR
45565: IFFALSE 45571
// exit ;
45567: POP
45568: POP
45569: GO 45654
// end ;
45571: GO 45242
45573: POP
45574: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45575: LD_VAR 0 9
45579: PPUSH
45580: LD_VAR 0 3
45584: PPUSH
45585: LD_VAR 0 4
45589: PPUSH
45590: LD_INT 20
45592: PPUSH
45593: CALL 37577 0 4
45597: PUSH
45598: LD_INT 4
45600: ARRAY
45601: IFFALSE 45605
// exit ;
45603: GO 45654
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45605: LD_VAR 0 2
45609: PUSH
45610: LD_INT 29
45612: PUSH
45613: LD_INT 30
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: IN
45620: PUSH
45621: LD_VAR 0 3
45625: PPUSH
45626: LD_VAR 0 4
45630: PPUSH
45631: LD_VAR 0 9
45635: PPUSH
45636: CALL_OW 440
45640: NOT
45641: AND
45642: IFFALSE 45646
// exit ;
45644: GO 45654
// result := true ;
45646: LD_ADDR_VAR 0 6
45650: PUSH
45651: LD_INT 1
45653: ST_TO_ADDR
// end ;
45654: LD_VAR 0 6
45658: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45659: LD_INT 0
45661: PPUSH
45662: PPUSH
45663: PPUSH
45664: PPUSH
45665: PPUSH
45666: PPUSH
45667: PPUSH
45668: PPUSH
45669: PPUSH
45670: PPUSH
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
45677: PPUSH
45678: PPUSH
45679: PPUSH
45680: PPUSH
45681: PPUSH
45682: PPUSH
45683: PPUSH
45684: PPUSH
45685: PPUSH
45686: PPUSH
45687: PPUSH
45688: PPUSH
45689: PPUSH
45690: PPUSH
45691: PPUSH
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
45696: PPUSH
45697: PPUSH
45698: PPUSH
45699: PPUSH
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
45708: PPUSH
45709: PPUSH
45710: PPUSH
45711: PPUSH
45712: PPUSH
45713: PPUSH
45714: PPUSH
45715: PPUSH
45716: PPUSH
45717: PPUSH
45718: PPUSH
// result = [ ] ;
45719: LD_ADDR_VAR 0 7
45723: PUSH
45724: EMPTY
45725: ST_TO_ADDR
// temp_list = [ ] ;
45726: LD_ADDR_VAR 0 9
45730: PUSH
45731: EMPTY
45732: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45733: LD_VAR 0 4
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 3
45749: PUSH
45750: LD_INT 4
45752: PUSH
45753: LD_INT 5
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: IN
45764: NOT
45765: PUSH
45766: LD_VAR 0 1
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: IN
45781: PUSH
45782: LD_VAR 0 5
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: LIST
45800: IN
45801: NOT
45802: AND
45803: OR
45804: IFFALSE 45808
// exit ;
45806: GO 64199
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45808: LD_VAR 0 1
45812: PUSH
45813: LD_INT 6
45815: PUSH
45816: LD_INT 7
45818: PUSH
45819: LD_INT 8
45821: PUSH
45822: LD_INT 13
45824: PUSH
45825: LD_INT 12
45827: PUSH
45828: LD_INT 15
45830: PUSH
45831: LD_INT 11
45833: PUSH
45834: LD_INT 14
45836: PUSH
45837: LD_INT 10
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: IN
45851: IFFALSE 45861
// btype = b_lab ;
45853: LD_ADDR_VAR 0 1
45857: PUSH
45858: LD_INT 6
45860: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45861: LD_VAR 0 6
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: IN
45880: NOT
45881: PUSH
45882: LD_VAR 0 1
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: LD_INT 6
45901: PUSH
45902: LD_INT 36
45904: PUSH
45905: LD_INT 4
45907: PUSH
45908: LD_INT 5
45910: PUSH
45911: LD_INT 31
45913: PUSH
45914: LD_INT 32
45916: PUSH
45917: LD_INT 33
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: IN
45933: NOT
45934: PUSH
45935: LD_VAR 0 6
45939: PUSH
45940: LD_INT 1
45942: EQUAL
45943: AND
45944: OR
45945: PUSH
45946: LD_VAR 0 1
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: IN
45961: NOT
45962: PUSH
45963: LD_VAR 0 6
45967: PUSH
45968: LD_INT 2
45970: EQUAL
45971: AND
45972: OR
45973: IFFALSE 45983
// mode = 0 ;
45975: LD_ADDR_VAR 0 6
45979: PUSH
45980: LD_INT 0
45982: ST_TO_ADDR
// case mode of 0 :
45983: LD_VAR 0 6
45987: PUSH
45988: LD_INT 0
45990: DOUBLE
45991: EQUAL
45992: IFTRUE 45996
45994: GO 57449
45996: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45997: LD_ADDR_VAR 0 11
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 3
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 3
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46190: LD_ADDR_VAR 0 12
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46386: LD_ADDR_VAR 0 13
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 3
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 3
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: NEG
46558: PUSH
46559: LD_INT 3
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46585: LD_ADDR_VAR 0 14
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 3
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 3
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46781: LD_ADDR_VAR 0 15
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 3
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46974: LD_ADDR_VAR 0 16
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 3
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 3
47131: PUSH
47132: LD_INT 3
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 3
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47167: LD_ADDR_VAR 0 17
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47397: LD_ADDR_VAR 0 18
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47627: LD_ADDR_VAR 0 19
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47857: LD_ADDR_VAR 0 20
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48087: LD_ADDR_VAR 0 21
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48317: LD_ADDR_VAR 0 22
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48547: LD_ADDR_VAR 0 23
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 3
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 3
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48827: LD_ADDR_VAR 0 24
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 3
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49103: LD_ADDR_VAR 0 25
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 3
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 3
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 3
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 3
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49377: LD_ADDR_VAR 0 26
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 3
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49653: LD_ADDR_VAR 0 27
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49933: LD_ADDR_VAR 0 28
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 3
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 3
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50215: LD_ADDR_VAR 0 29
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 3
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 3
50459: NEG
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50494: LD_ADDR_VAR 0 30
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 3
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50772: LD_ADDR_VAR 0 31
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: LD_INT 3
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51050: LD_ADDR_VAR 0 32
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 3
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 3
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51328: LD_ADDR_VAR 0 33
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: LD_INT 3
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 3
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51607: LD_ADDR_VAR 0 34
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: NEG
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: LD_INT 3
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51887: LD_ADDR_VAR 0 35
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51999: LD_ADDR_VAR 0 36
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52111: LD_ADDR_VAR 0 37
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52223: LD_ADDR_VAR 0 38
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52335: LD_ADDR_VAR 0 39
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52447: LD_ADDR_VAR 0 40
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52559: LD_ADDR_VAR 0 41
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: LD_INT 3
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 3
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: NEG
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 3
52868: NEG
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52909: LD_ADDR_VAR 0 42
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 3
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: LD_INT 3
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53259: LD_ADDR_VAR 0 43
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 3
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 3
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 3
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53607: LD_ADDR_VAR 0 44
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: LD_INT 3
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 3
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 2
53860: PUSH
53861: LD_INT 3
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 3
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53957: LD_ADDR_VAR 0 45
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: LD_INT 3
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: LD_INT 3
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 3
54266: NEG
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54307: LD_ADDR_VAR 0 46
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 3
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 3
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54655: LD_ADDR_VAR 0 47
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54806: LD_ADDR_VAR 0 48
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54953: LD_ADDR_VAR 0 49
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55097: LD_ADDR_VAR 0 50
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55241: LD_ADDR_VAR 0 51
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55388: LD_ADDR_VAR 0 52
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55539: LD_ADDR_VAR 0 53
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55769: LD_ADDR_VAR 0 54
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55999: LD_ADDR_VAR 0 55
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56229: LD_ADDR_VAR 0 56
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56459: LD_ADDR_VAR 0 57
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56689: LD_ADDR_VAR 0 58
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56919: LD_ADDR_VAR 0 59
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57007: LD_ADDR_VAR 0 60
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57095: LD_ADDR_VAR 0 61
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57183: LD_ADDR_VAR 0 62
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57271: LD_ADDR_VAR 0 63
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57359: LD_ADDR_VAR 0 64
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// end ; 1 :
57447: GO 63344
57449: LD_INT 1
57451: DOUBLE
57452: EQUAL
57453: IFTRUE 57457
57455: GO 60080
57457: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57458: LD_ADDR_VAR 0 11
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 3
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57502: LD_ADDR_VAR 0 12
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 3
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: LIST
57542: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57543: LD_ADDR_VAR 0 13
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: LD_INT 3
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: LIST
57582: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57583: LD_ADDR_VAR 0 14
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57624: LD_ADDR_VAR 0 15
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: NEG
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 3
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57668: LD_ADDR_VAR 0 16
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 3
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 3
57699: NEG
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: LIST
57713: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57714: LD_ADDR_VAR 0 17
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 3
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57758: LD_ADDR_VAR 0 18
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57799: LD_ADDR_VAR 0 19
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: LIST
57838: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57839: LD_ADDR_VAR 0 20
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57880: LD_ADDR_VAR 0 21
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: NEG
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57924: LD_ADDR_VAR 0 22
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: LD_INT 3
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: LIST
57969: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57970: LD_ADDR_VAR 0 23
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 3
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 4
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58014: LD_ADDR_VAR 0 24
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 4
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58055: LD_ADDR_VAR 0 25
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: LD_INT 3
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 4
58072: PUSH
58073: LD_INT 3
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 3
58082: PUSH
58083: LD_INT 4
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58095: LD_ADDR_VAR 0 26
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 4
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: LIST
58135: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58136: LD_ADDR_VAR 0 27
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 4
58165: NEG
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: LIST
58179: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58180: LD_ADDR_VAR 0 28
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: LD_INT 3
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: LD_INT 4
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 4
58211: NEG
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58226: LD_ADDR_VAR 0 29
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: LD_INT 3
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 3
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: LD_INT 4
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 4
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 5
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 5
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 4
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: LD_INT 6
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 6
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 5
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58381: LD_ADDR_VAR 0 30
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 3
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 4
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 4
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 4
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 5
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 5
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 5
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 6
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 6
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58524: LD_ADDR_VAR 0 31
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 4
58561: PUSH
58562: LD_INT 3
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 4
58571: PUSH
58572: LD_INT 4
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: LD_INT 4
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 5
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 5
58601: PUSH
58602: LD_INT 5
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: LD_INT 5
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 6
58621: PUSH
58622: LD_INT 5
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 6
58631: PUSH
58632: LD_INT 6
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 5
58641: PUSH
58642: LD_INT 6
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58663: LD_ADDR_VAR 0 32
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 3
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 4
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 4
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 5
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 5
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: LD_INT 4
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 6
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 6
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 5
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58806: LD_ADDR_VAR 0 33
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 4
58858: NEG
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 4
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 4
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 5
58892: NEG
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 5
58903: NEG
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 5
58915: NEG
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 6
58926: NEG
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 6
58937: NEG
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58961: LD_ADDR_VAR 0 34
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: LD_INT 2
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: NEG
58993: PUSH
58994: LD_INT 3
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: LD_INT 4
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 4
59016: NEG
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 4
59028: NEG
59029: PUSH
59030: LD_INT 4
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 4
59040: NEG
59041: PUSH
59042: LD_INT 5
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 5
59052: NEG
59053: PUSH
59054: LD_INT 4
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 5
59064: NEG
59065: PUSH
59066: LD_INT 5
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 5
59076: NEG
59077: PUSH
59078: LD_INT 6
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 6
59088: NEG
59089: PUSH
59090: LD_INT 5
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 6
59100: NEG
59101: PUSH
59102: LD_INT 6
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59124: LD_ADDR_VAR 0 41
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59168: LD_ADDR_VAR 0 42
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59209: LD_ADDR_VAR 0 43
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 3
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59249: LD_ADDR_VAR 0 44
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59290: LD_ADDR_VAR 0 45
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59334: LD_ADDR_VAR 0 46
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 3
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: LIST
59379: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59380: LD_ADDR_VAR 0 47
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 3
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59413: LD_ADDR_VAR 0 48
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59444: LD_ADDR_VAR 0 49
59448: PUSH
59449: LD_INT 3
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 3
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59473: LD_ADDR_VAR 0 50
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59502: LD_ADDR_VAR 0 51
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59533: LD_ADDR_VAR 0 52
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59566: LD_ADDR_VAR 0 53
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: LIST
59609: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59610: LD_ADDR_VAR 0 54
59614: PUSH
59615: LD_INT 2
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59651: LD_ADDR_VAR 0 55
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: LIST
59690: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59691: LD_ADDR_VAR 0 56
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: LIST
59731: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59732: LD_ADDR_VAR 0 57
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: NEG
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: NEG
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59776: LD_ADDR_VAR 0 58
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 3
59795: NEG
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 3
59807: NEG
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: LIST
59821: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59822: LD_ADDR_VAR 0 59
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: LIST
59865: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59866: LD_ADDR_VAR 0 60
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59907: LD_ADDR_VAR 0 61
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 2
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: LD_INT 2
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59947: LD_ADDR_VAR 0 62
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59988: LD_ADDR_VAR 0 63
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60032: LD_ADDR_VAR 0 64
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: ST_TO_ADDR
// end ; 2 :
60078: GO 63344
60080: LD_INT 2
60082: DOUBLE
60083: EQUAL
60084: IFTRUE 60088
60086: GO 63343
60088: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60089: LD_ADDR_VAR 0 29
60093: PUSH
60094: LD_INT 4
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 4
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 5
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 5
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 4
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 5
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 4
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 4
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: LD_INT 4
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 3
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 4
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: LD_INT 4
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: LD_INT 4
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: LD_INT 4
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 5
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: LD_INT 5
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: LD_INT 4
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 3
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: LD_INT 5
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: NEG
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 4
60428: NEG
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 4
60439: NEG
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 4
60451: NEG
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 4
60474: NEG
60475: PUSH
60476: LD_INT 4
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: LD_INT 5
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: LD_INT 4
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: LD_INT 3
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: NEG
60523: PUSH
60524: LD_INT 3
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 5
60534: NEG
60535: PUSH
60536: LD_INT 4
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 5
60546: NEG
60547: PUSH
60548: LD_INT 5
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 3
60558: NEG
60559: PUSH
60560: LD_INT 5
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 5
60570: NEG
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60627: LD_ADDR_VAR 0 30
60631: PUSH
60632: LD_INT 4
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 4
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 5
60654: PUSH
60655: LD_INT 4
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 5
60664: PUSH
60665: LD_INT 5
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 4
60674: PUSH
60675: LD_INT 5
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: LD_INT 4
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 3
60694: PUSH
60695: LD_INT 3
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 5
60704: PUSH
60705: LD_INT 3
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: LD_INT 5
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 3
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 2
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 3
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 4
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 4
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: LD_INT 4
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 4
60817: NEG
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 4
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 3
60840: NEG
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 4
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 5
60873: NEG
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 5
60884: NEG
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 5
60896: NEG
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 3
60919: NEG
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: LD_INT 4
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 3
60967: NEG
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 4
60979: NEG
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 4
60991: NEG
60992: PUSH
60993: LD_INT 4
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: LD_INT 4
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 4
61015: NEG
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 4
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 5
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 4
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: LD_INT 3
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 3
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 4
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 5
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 3
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 5
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61174: LD_ADDR_VAR 0 31
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 4
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 4
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 5
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 5
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 4
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 3
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: PUSH
61254: LD_INT 5
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 2
61263: NEG
61264: PUSH
61265: LD_INT 3
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 3
61274: NEG
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 3
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 4
61330: NEG
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 4
61341: NEG
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 4
61353: NEG
61354: PUSH
61355: LD_INT 2
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 4
61376: NEG
61377: PUSH
61378: LD_INT 4
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 4
61388: NEG
61389: PUSH
61390: LD_INT 5
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 3
61400: NEG
61401: PUSH
61402: LD_INT 4
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: NEG
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 4
61424: NEG
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 5
61436: NEG
61437: PUSH
61438: LD_INT 4
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 5
61448: NEG
61449: PUSH
61450: LD_INT 5
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: NEG
61461: PUSH
61462: LD_INT 5
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 5
61472: NEG
61473: PUSH
61474: LD_INT 3
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 3
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 4
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 3
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: LD_INT 4
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: PUSH
61564: LD_INT 2
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: LD_INT 4
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 4
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 4
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 5
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 5
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 4
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 3
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 3
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 5
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61724: LD_ADDR_VAR 0 32
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 4
61742: NEG
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 4
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 5
61787: NEG
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 5
61798: NEG
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 5
61810: NEG
61811: PUSH
61812: LD_INT 2
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 3
61822: NEG
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: LD_INT 3
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: LD_INT 4
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: LD_INT 3
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: LD_INT 2
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: NEG
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 4
61893: NEG
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 4
61905: NEG
61906: PUSH
61907: LD_INT 4
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: LD_INT 4
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 4
61929: NEG
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 4
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: LD_INT 5
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 4
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 3
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 4
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 5
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: NEG
62032: PUSH
62033: LD_INT 5
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 3
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 4
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 4
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 4
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 4
62136: PUSH
62137: LD_INT 4
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 4
62146: PUSH
62147: LD_INT 3
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 5
62156: PUSH
62157: LD_INT 4
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 5
62166: PUSH
62167: LD_INT 5
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 4
62176: PUSH
62177: LD_INT 5
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 3
62186: PUSH
62187: LD_INT 4
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 3
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 5
62206: PUSH
62207: LD_INT 3
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 3
62216: PUSH
62217: LD_INT 5
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62271: LD_ADDR_VAR 0 33
62275: PUSH
62276: LD_INT 4
62278: NEG
62279: PUSH
62280: LD_INT 4
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 4
62290: NEG
62291: PUSH
62292: LD_INT 5
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 3
62302: NEG
62303: PUSH
62304: LD_INT 4
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 3
62314: NEG
62315: PUSH
62316: LD_INT 3
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 4
62326: NEG
62327: PUSH
62328: LD_INT 3
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 5
62338: NEG
62339: PUSH
62340: LD_INT 4
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 5
62350: NEG
62351: PUSH
62352: LD_INT 5
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 3
62362: NEG
62363: PUSH
62364: LD_INT 5
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 5
62374: NEG
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 4
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: LD_INT 3
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: LD_INT 4
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: LD_INT 4
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 4
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 4
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 5
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 5
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 4
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 3
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: LD_INT 2
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 5
62571: PUSH
62572: LD_INT 2
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 3
62581: PUSH
62582: LD_INT 3
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 3
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 4
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 4
62611: PUSH
62612: LD_INT 4
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 3
62621: PUSH
62622: LD_INT 4
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 2
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: LD_INT 2
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 4
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: LD_INT 4
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 4
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 3
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: LD_INT 4
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 5
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 5
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: LD_INT 4
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: LD_INT 3
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: LD_INT 5
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62809: LD_ADDR_VAR 0 34
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 4
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: LD_INT 5
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: LD_INT 4
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: LD_INT 3
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 3
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: LD_INT 4
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 5
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 2
62895: PUSH
62896: LD_INT 3
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: LD_INT 5
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 4
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 4
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: LD_INT 2
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 4
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 4
63011: PUSH
63012: LD_INT 4
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 4
63021: PUSH
63022: LD_INT 3
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 5
63031: PUSH
63032: LD_INT 4
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 5
63041: PUSH
63042: LD_INT 5
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 4
63051: PUSH
63052: LD_INT 5
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 3
63061: PUSH
63062: LD_INT 4
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: LD_INT 3
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 5
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 3
63091: PUSH
63092: LD_INT 5
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 3
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 2
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 4
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 4
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 4
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 4
63194: NEG
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 4
63205: NEG
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 3
63217: NEG
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 4
63239: NEG
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 5
63250: NEG
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 5
63261: NEG
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 5
63273: NEG
63274: PUSH
63275: LD_INT 2
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 3
63285: NEG
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: ST_TO_ADDR
// end ; end ;
63341: GO 63344
63343: POP
// case btype of b_depot , b_warehouse :
63344: LD_VAR 0 1
63348: PUSH
63349: LD_INT 0
63351: DOUBLE
63352: EQUAL
63353: IFTRUE 63363
63355: LD_INT 1
63357: DOUBLE
63358: EQUAL
63359: IFTRUE 63363
63361: GO 63564
63363: POP
// case nation of nation_american :
63364: LD_VAR 0 5
63368: PUSH
63369: LD_INT 1
63371: DOUBLE
63372: EQUAL
63373: IFTRUE 63377
63375: GO 63433
63377: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63378: LD_ADDR_VAR 0 9
63382: PUSH
63383: LD_VAR 0 11
63387: PUSH
63388: LD_VAR 0 12
63392: PUSH
63393: LD_VAR 0 13
63397: PUSH
63398: LD_VAR 0 14
63402: PUSH
63403: LD_VAR 0 15
63407: PUSH
63408: LD_VAR 0 16
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: PUSH
63421: LD_VAR 0 4
63425: PUSH
63426: LD_INT 1
63428: PLUS
63429: ARRAY
63430: ST_TO_ADDR
63431: GO 63562
63433: LD_INT 2
63435: DOUBLE
63436: EQUAL
63437: IFTRUE 63441
63439: GO 63497
63441: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63442: LD_ADDR_VAR 0 9
63446: PUSH
63447: LD_VAR 0 17
63451: PUSH
63452: LD_VAR 0 18
63456: PUSH
63457: LD_VAR 0 19
63461: PUSH
63462: LD_VAR 0 20
63466: PUSH
63467: LD_VAR 0 21
63471: PUSH
63472: LD_VAR 0 22
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: PUSH
63485: LD_VAR 0 4
63489: PUSH
63490: LD_INT 1
63492: PLUS
63493: ARRAY
63494: ST_TO_ADDR
63495: GO 63562
63497: LD_INT 3
63499: DOUBLE
63500: EQUAL
63501: IFTRUE 63505
63503: GO 63561
63505: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63506: LD_ADDR_VAR 0 9
63510: PUSH
63511: LD_VAR 0 23
63515: PUSH
63516: LD_VAR 0 24
63520: PUSH
63521: LD_VAR 0 25
63525: PUSH
63526: LD_VAR 0 26
63530: PUSH
63531: LD_VAR 0 27
63535: PUSH
63536: LD_VAR 0 28
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: PUSH
63549: LD_VAR 0 4
63553: PUSH
63554: LD_INT 1
63556: PLUS
63557: ARRAY
63558: ST_TO_ADDR
63559: GO 63562
63561: POP
63562: GO 64117
63564: LD_INT 2
63566: DOUBLE
63567: EQUAL
63568: IFTRUE 63578
63570: LD_INT 3
63572: DOUBLE
63573: EQUAL
63574: IFTRUE 63578
63576: GO 63634
63578: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63579: LD_ADDR_VAR 0 9
63583: PUSH
63584: LD_VAR 0 29
63588: PUSH
63589: LD_VAR 0 30
63593: PUSH
63594: LD_VAR 0 31
63598: PUSH
63599: LD_VAR 0 32
63603: PUSH
63604: LD_VAR 0 33
63608: PUSH
63609: LD_VAR 0 34
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: PUSH
63622: LD_VAR 0 4
63626: PUSH
63627: LD_INT 1
63629: PLUS
63630: ARRAY
63631: ST_TO_ADDR
63632: GO 64117
63634: LD_INT 16
63636: DOUBLE
63637: EQUAL
63638: IFTRUE 63696
63640: LD_INT 17
63642: DOUBLE
63643: EQUAL
63644: IFTRUE 63696
63646: LD_INT 18
63648: DOUBLE
63649: EQUAL
63650: IFTRUE 63696
63652: LD_INT 19
63654: DOUBLE
63655: EQUAL
63656: IFTRUE 63696
63658: LD_INT 22
63660: DOUBLE
63661: EQUAL
63662: IFTRUE 63696
63664: LD_INT 20
63666: DOUBLE
63667: EQUAL
63668: IFTRUE 63696
63670: LD_INT 21
63672: DOUBLE
63673: EQUAL
63674: IFTRUE 63696
63676: LD_INT 23
63678: DOUBLE
63679: EQUAL
63680: IFTRUE 63696
63682: LD_INT 24
63684: DOUBLE
63685: EQUAL
63686: IFTRUE 63696
63688: LD_INT 25
63690: DOUBLE
63691: EQUAL
63692: IFTRUE 63696
63694: GO 63752
63696: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63697: LD_ADDR_VAR 0 9
63701: PUSH
63702: LD_VAR 0 35
63706: PUSH
63707: LD_VAR 0 36
63711: PUSH
63712: LD_VAR 0 37
63716: PUSH
63717: LD_VAR 0 38
63721: PUSH
63722: LD_VAR 0 39
63726: PUSH
63727: LD_VAR 0 40
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: PUSH
63740: LD_VAR 0 4
63744: PUSH
63745: LD_INT 1
63747: PLUS
63748: ARRAY
63749: ST_TO_ADDR
63750: GO 64117
63752: LD_INT 6
63754: DOUBLE
63755: EQUAL
63756: IFTRUE 63808
63758: LD_INT 7
63760: DOUBLE
63761: EQUAL
63762: IFTRUE 63808
63764: LD_INT 8
63766: DOUBLE
63767: EQUAL
63768: IFTRUE 63808
63770: LD_INT 13
63772: DOUBLE
63773: EQUAL
63774: IFTRUE 63808
63776: LD_INT 12
63778: DOUBLE
63779: EQUAL
63780: IFTRUE 63808
63782: LD_INT 15
63784: DOUBLE
63785: EQUAL
63786: IFTRUE 63808
63788: LD_INT 11
63790: DOUBLE
63791: EQUAL
63792: IFTRUE 63808
63794: LD_INT 14
63796: DOUBLE
63797: EQUAL
63798: IFTRUE 63808
63800: LD_INT 10
63802: DOUBLE
63803: EQUAL
63804: IFTRUE 63808
63806: GO 63864
63808: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63809: LD_ADDR_VAR 0 9
63813: PUSH
63814: LD_VAR 0 41
63818: PUSH
63819: LD_VAR 0 42
63823: PUSH
63824: LD_VAR 0 43
63828: PUSH
63829: LD_VAR 0 44
63833: PUSH
63834: LD_VAR 0 45
63838: PUSH
63839: LD_VAR 0 46
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: PUSH
63852: LD_VAR 0 4
63856: PUSH
63857: LD_INT 1
63859: PLUS
63860: ARRAY
63861: ST_TO_ADDR
63862: GO 64117
63864: LD_INT 36
63866: DOUBLE
63867: EQUAL
63868: IFTRUE 63872
63870: GO 63928
63872: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63873: LD_ADDR_VAR 0 9
63877: PUSH
63878: LD_VAR 0 47
63882: PUSH
63883: LD_VAR 0 48
63887: PUSH
63888: LD_VAR 0 49
63892: PUSH
63893: LD_VAR 0 50
63897: PUSH
63898: LD_VAR 0 51
63902: PUSH
63903: LD_VAR 0 52
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: PUSH
63916: LD_VAR 0 4
63920: PUSH
63921: LD_INT 1
63923: PLUS
63924: ARRAY
63925: ST_TO_ADDR
63926: GO 64117
63928: LD_INT 4
63930: DOUBLE
63931: EQUAL
63932: IFTRUE 63954
63934: LD_INT 5
63936: DOUBLE
63937: EQUAL
63938: IFTRUE 63954
63940: LD_INT 34
63942: DOUBLE
63943: EQUAL
63944: IFTRUE 63954
63946: LD_INT 37
63948: DOUBLE
63949: EQUAL
63950: IFTRUE 63954
63952: GO 64010
63954: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63955: LD_ADDR_VAR 0 9
63959: PUSH
63960: LD_VAR 0 53
63964: PUSH
63965: LD_VAR 0 54
63969: PUSH
63970: LD_VAR 0 55
63974: PUSH
63975: LD_VAR 0 56
63979: PUSH
63980: LD_VAR 0 57
63984: PUSH
63985: LD_VAR 0 58
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: PUSH
63998: LD_VAR 0 4
64002: PUSH
64003: LD_INT 1
64005: PLUS
64006: ARRAY
64007: ST_TO_ADDR
64008: GO 64117
64010: LD_INT 31
64012: DOUBLE
64013: EQUAL
64014: IFTRUE 64060
64016: LD_INT 32
64018: DOUBLE
64019: EQUAL
64020: IFTRUE 64060
64022: LD_INT 33
64024: DOUBLE
64025: EQUAL
64026: IFTRUE 64060
64028: LD_INT 27
64030: DOUBLE
64031: EQUAL
64032: IFTRUE 64060
64034: LD_INT 26
64036: DOUBLE
64037: EQUAL
64038: IFTRUE 64060
64040: LD_INT 28
64042: DOUBLE
64043: EQUAL
64044: IFTRUE 64060
64046: LD_INT 29
64048: DOUBLE
64049: EQUAL
64050: IFTRUE 64060
64052: LD_INT 30
64054: DOUBLE
64055: EQUAL
64056: IFTRUE 64060
64058: GO 64116
64060: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64061: LD_ADDR_VAR 0 9
64065: PUSH
64066: LD_VAR 0 59
64070: PUSH
64071: LD_VAR 0 60
64075: PUSH
64076: LD_VAR 0 61
64080: PUSH
64081: LD_VAR 0 62
64085: PUSH
64086: LD_VAR 0 63
64090: PUSH
64091: LD_VAR 0 64
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: PUSH
64104: LD_VAR 0 4
64108: PUSH
64109: LD_INT 1
64111: PLUS
64112: ARRAY
64113: ST_TO_ADDR
64114: GO 64117
64116: POP
// temp_list2 = [ ] ;
64117: LD_ADDR_VAR 0 10
64121: PUSH
64122: EMPTY
64123: ST_TO_ADDR
// for i in temp_list do
64124: LD_ADDR_VAR 0 8
64128: PUSH
64129: LD_VAR 0 9
64133: PUSH
64134: FOR_IN
64135: IFFALSE 64187
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64137: LD_ADDR_VAR 0 10
64141: PUSH
64142: LD_VAR 0 10
64146: PUSH
64147: LD_VAR 0 8
64151: PUSH
64152: LD_INT 1
64154: ARRAY
64155: PUSH
64156: LD_VAR 0 2
64160: PLUS
64161: PUSH
64162: LD_VAR 0 8
64166: PUSH
64167: LD_INT 2
64169: ARRAY
64170: PUSH
64171: LD_VAR 0 3
64175: PLUS
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: EMPTY
64182: LIST
64183: ADD
64184: ST_TO_ADDR
64185: GO 64134
64187: POP
64188: POP
// result = temp_list2 ;
64189: LD_ADDR_VAR 0 7
64193: PUSH
64194: LD_VAR 0 10
64198: ST_TO_ADDR
// end ;
64199: LD_VAR 0 7
64203: RET
// export function EnemyInRange ( unit , dist ) ; begin
64204: LD_INT 0
64206: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64207: LD_ADDR_VAR 0 3
64211: PUSH
64212: LD_VAR 0 1
64216: PPUSH
64217: CALL_OW 255
64221: PPUSH
64222: LD_VAR 0 1
64226: PPUSH
64227: CALL_OW 250
64231: PPUSH
64232: LD_VAR 0 1
64236: PPUSH
64237: CALL_OW 251
64241: PPUSH
64242: LD_VAR 0 2
64246: PPUSH
64247: CALL 37577 0 4
64251: PUSH
64252: LD_INT 4
64254: ARRAY
64255: ST_TO_ADDR
// end ;
64256: LD_VAR 0 3
64260: RET
// export function PlayerSeeMe ( unit ) ; begin
64261: LD_INT 0
64263: PPUSH
// result := See ( your_side , unit ) ;
64264: LD_ADDR_VAR 0 2
64268: PUSH
64269: LD_OWVAR 2
64273: PPUSH
64274: LD_VAR 0 1
64278: PPUSH
64279: CALL_OW 292
64283: ST_TO_ADDR
// end ;
64284: LD_VAR 0 2
64288: RET
// export function ReverseDir ( unit ) ; begin
64289: LD_INT 0
64291: PPUSH
// if not unit then
64292: LD_VAR 0 1
64296: NOT
64297: IFFALSE 64301
// exit ;
64299: GO 64324
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64301: LD_ADDR_VAR 0 2
64305: PUSH
64306: LD_VAR 0 1
64310: PPUSH
64311: CALL_OW 254
64315: PUSH
64316: LD_INT 3
64318: PLUS
64319: PUSH
64320: LD_INT 6
64322: MOD
64323: ST_TO_ADDR
// end ;
64324: LD_VAR 0 2
64328: RET
// export function ReverseArray ( array ) ; var i ; begin
64329: LD_INT 0
64331: PPUSH
64332: PPUSH
// if not array then
64333: LD_VAR 0 1
64337: NOT
64338: IFFALSE 64342
// exit ;
64340: GO 64397
// result := [ ] ;
64342: LD_ADDR_VAR 0 2
64346: PUSH
64347: EMPTY
64348: ST_TO_ADDR
// for i := array downto 1 do
64349: LD_ADDR_VAR 0 3
64353: PUSH
64354: DOUBLE
64355: LD_VAR 0 1
64359: INC
64360: ST_TO_ADDR
64361: LD_INT 1
64363: PUSH
64364: FOR_DOWNTO
64365: IFFALSE 64395
// result := Join ( result , array [ i ] ) ;
64367: LD_ADDR_VAR 0 2
64371: PUSH
64372: LD_VAR 0 2
64376: PPUSH
64377: LD_VAR 0 1
64381: PUSH
64382: LD_VAR 0 3
64386: ARRAY
64387: PPUSH
64388: CALL 69042 0 2
64392: ST_TO_ADDR
64393: GO 64364
64395: POP
64396: POP
// end ;
64397: LD_VAR 0 2
64401: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64402: LD_INT 0
64404: PPUSH
64405: PPUSH
64406: PPUSH
64407: PPUSH
64408: PPUSH
64409: PPUSH
// if not unit or not hexes then
64410: LD_VAR 0 1
64414: NOT
64415: PUSH
64416: LD_VAR 0 2
64420: NOT
64421: OR
64422: IFFALSE 64426
// exit ;
64424: GO 64549
// dist := 9999 ;
64426: LD_ADDR_VAR 0 5
64430: PUSH
64431: LD_INT 9999
64433: ST_TO_ADDR
// for i = 1 to hexes do
64434: LD_ADDR_VAR 0 4
64438: PUSH
64439: DOUBLE
64440: LD_INT 1
64442: DEC
64443: ST_TO_ADDR
64444: LD_VAR 0 2
64448: PUSH
64449: FOR_TO
64450: IFFALSE 64537
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64452: LD_ADDR_VAR 0 6
64456: PUSH
64457: LD_VAR 0 1
64461: PPUSH
64462: LD_VAR 0 2
64466: PUSH
64467: LD_VAR 0 4
64471: ARRAY
64472: PUSH
64473: LD_INT 1
64475: ARRAY
64476: PPUSH
64477: LD_VAR 0 2
64481: PUSH
64482: LD_VAR 0 4
64486: ARRAY
64487: PUSH
64488: LD_INT 2
64490: ARRAY
64491: PPUSH
64492: CALL_OW 297
64496: ST_TO_ADDR
// if tdist < dist then
64497: LD_VAR 0 6
64501: PUSH
64502: LD_VAR 0 5
64506: LESS
64507: IFFALSE 64535
// begin hex := hexes [ i ] ;
64509: LD_ADDR_VAR 0 8
64513: PUSH
64514: LD_VAR 0 2
64518: PUSH
64519: LD_VAR 0 4
64523: ARRAY
64524: ST_TO_ADDR
// dist := tdist ;
64525: LD_ADDR_VAR 0 5
64529: PUSH
64530: LD_VAR 0 6
64534: ST_TO_ADDR
// end ; end ;
64535: GO 64449
64537: POP
64538: POP
// result := hex ;
64539: LD_ADDR_VAR 0 3
64543: PUSH
64544: LD_VAR 0 8
64548: ST_TO_ADDR
// end ;
64549: LD_VAR 0 3
64553: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64554: LD_INT 0
64556: PPUSH
64557: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64558: LD_VAR 0 1
64562: NOT
64563: PUSH
64564: LD_VAR 0 1
64568: PUSH
64569: LD_INT 21
64571: PUSH
64572: LD_INT 2
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 23
64581: PUSH
64582: LD_INT 2
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PPUSH
64593: CALL_OW 69
64597: IN
64598: NOT
64599: OR
64600: IFFALSE 64604
// exit ;
64602: GO 64651
// for i = 1 to 3 do
64604: LD_ADDR_VAR 0 3
64608: PUSH
64609: DOUBLE
64610: LD_INT 1
64612: DEC
64613: ST_TO_ADDR
64614: LD_INT 3
64616: PUSH
64617: FOR_TO
64618: IFFALSE 64649
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64620: LD_VAR 0 1
64624: PPUSH
64625: CALL_OW 250
64629: PPUSH
64630: LD_VAR 0 1
64634: PPUSH
64635: CALL_OW 251
64639: PPUSH
64640: LD_INT 1
64642: PPUSH
64643: CALL_OW 453
64647: GO 64617
64649: POP
64650: POP
// end ;
64651: LD_VAR 0 2
64655: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64656: LD_INT 0
64658: PPUSH
64659: PPUSH
64660: PPUSH
64661: PPUSH
64662: PPUSH
64663: PPUSH
// if not unit or not enemy_unit then
64664: LD_VAR 0 1
64668: NOT
64669: PUSH
64670: LD_VAR 0 2
64674: NOT
64675: OR
64676: IFFALSE 64680
// exit ;
64678: GO 65147
// if GetLives ( i ) < 250 then
64680: LD_VAR 0 4
64684: PPUSH
64685: CALL_OW 256
64689: PUSH
64690: LD_INT 250
64692: LESS
64693: IFFALSE 64706
// begin ComAutodestruct ( i ) ;
64695: LD_VAR 0 4
64699: PPUSH
64700: CALL 64554 0 1
// exit ;
64704: GO 65147
// end ; x := GetX ( enemy_unit ) ;
64706: LD_ADDR_VAR 0 7
64710: PUSH
64711: LD_VAR 0 2
64715: PPUSH
64716: CALL_OW 250
64720: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64721: LD_ADDR_VAR 0 8
64725: PUSH
64726: LD_VAR 0 2
64730: PPUSH
64731: CALL_OW 251
64735: ST_TO_ADDR
// if not x or not y then
64736: LD_VAR 0 7
64740: NOT
64741: PUSH
64742: LD_VAR 0 8
64746: NOT
64747: OR
64748: IFFALSE 64752
// exit ;
64750: GO 65147
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64752: LD_ADDR_VAR 0 6
64756: PUSH
64757: LD_VAR 0 7
64761: PPUSH
64762: LD_INT 0
64764: PPUSH
64765: LD_INT 4
64767: PPUSH
64768: CALL_OW 272
64772: PUSH
64773: LD_VAR 0 8
64777: PPUSH
64778: LD_INT 0
64780: PPUSH
64781: LD_INT 4
64783: PPUSH
64784: CALL_OW 273
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_VAR 0 7
64797: PPUSH
64798: LD_INT 1
64800: PPUSH
64801: LD_INT 4
64803: PPUSH
64804: CALL_OW 272
64808: PUSH
64809: LD_VAR 0 8
64813: PPUSH
64814: LD_INT 1
64816: PPUSH
64817: LD_INT 4
64819: PPUSH
64820: CALL_OW 273
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_VAR 0 7
64833: PPUSH
64834: LD_INT 2
64836: PPUSH
64837: LD_INT 4
64839: PPUSH
64840: CALL_OW 272
64844: PUSH
64845: LD_VAR 0 8
64849: PPUSH
64850: LD_INT 2
64852: PPUSH
64853: LD_INT 4
64855: PPUSH
64856: CALL_OW 273
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_VAR 0 7
64869: PPUSH
64870: LD_INT 3
64872: PPUSH
64873: LD_INT 4
64875: PPUSH
64876: CALL_OW 272
64880: PUSH
64881: LD_VAR 0 8
64885: PPUSH
64886: LD_INT 3
64888: PPUSH
64889: LD_INT 4
64891: PPUSH
64892: CALL_OW 273
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_VAR 0 7
64905: PPUSH
64906: LD_INT 4
64908: PPUSH
64909: LD_INT 4
64911: PPUSH
64912: CALL_OW 272
64916: PUSH
64917: LD_VAR 0 8
64921: PPUSH
64922: LD_INT 4
64924: PPUSH
64925: LD_INT 4
64927: PPUSH
64928: CALL_OW 273
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_VAR 0 7
64941: PPUSH
64942: LD_INT 5
64944: PPUSH
64945: LD_INT 4
64947: PPUSH
64948: CALL_OW 272
64952: PUSH
64953: LD_VAR 0 8
64957: PPUSH
64958: LD_INT 5
64960: PPUSH
64961: LD_INT 4
64963: PPUSH
64964: CALL_OW 273
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: ST_TO_ADDR
// for i = tmp downto 1 do
64981: LD_ADDR_VAR 0 4
64985: PUSH
64986: DOUBLE
64987: LD_VAR 0 6
64991: INC
64992: ST_TO_ADDR
64993: LD_INT 1
64995: PUSH
64996: FOR_DOWNTO
64997: IFFALSE 65098
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64999: LD_VAR 0 6
65003: PUSH
65004: LD_VAR 0 4
65008: ARRAY
65009: PUSH
65010: LD_INT 1
65012: ARRAY
65013: PPUSH
65014: LD_VAR 0 6
65018: PUSH
65019: LD_VAR 0 4
65023: ARRAY
65024: PUSH
65025: LD_INT 2
65027: ARRAY
65028: PPUSH
65029: CALL_OW 488
65033: NOT
65034: PUSH
65035: LD_VAR 0 6
65039: PUSH
65040: LD_VAR 0 4
65044: ARRAY
65045: PUSH
65046: LD_INT 1
65048: ARRAY
65049: PPUSH
65050: LD_VAR 0 6
65054: PUSH
65055: LD_VAR 0 4
65059: ARRAY
65060: PUSH
65061: LD_INT 2
65063: ARRAY
65064: PPUSH
65065: CALL_OW 428
65069: PUSH
65070: LD_INT 0
65072: NONEQUAL
65073: OR
65074: IFFALSE 65096
// tmp := Delete ( tmp , i ) ;
65076: LD_ADDR_VAR 0 6
65080: PUSH
65081: LD_VAR 0 6
65085: PPUSH
65086: LD_VAR 0 4
65090: PPUSH
65091: CALL_OW 3
65095: ST_TO_ADDR
65096: GO 64996
65098: POP
65099: POP
// j := GetClosestHex ( unit , tmp ) ;
65100: LD_ADDR_VAR 0 5
65104: PUSH
65105: LD_VAR 0 1
65109: PPUSH
65110: LD_VAR 0 6
65114: PPUSH
65115: CALL 64402 0 2
65119: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65120: LD_VAR 0 1
65124: PPUSH
65125: LD_VAR 0 5
65129: PUSH
65130: LD_INT 1
65132: ARRAY
65133: PPUSH
65134: LD_VAR 0 5
65138: PUSH
65139: LD_INT 2
65141: ARRAY
65142: PPUSH
65143: CALL_OW 111
// end ;
65147: LD_VAR 0 3
65151: RET
// export function PrepareApemanSoldier ( ) ; begin
65152: LD_INT 0
65154: PPUSH
// uc_nation := 0 ;
65155: LD_ADDR_OWVAR 21
65159: PUSH
65160: LD_INT 0
65162: ST_TO_ADDR
// hc_sex := sex_male ;
65163: LD_ADDR_OWVAR 27
65167: PUSH
65168: LD_INT 1
65170: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65171: LD_ADDR_OWVAR 28
65175: PUSH
65176: LD_INT 15
65178: ST_TO_ADDR
// hc_gallery :=  ;
65179: LD_ADDR_OWVAR 33
65183: PUSH
65184: LD_STRING 
65186: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65187: LD_ADDR_OWVAR 31
65191: PUSH
65192: LD_INT 0
65194: PPUSH
65195: LD_INT 3
65197: PPUSH
65198: CALL_OW 12
65202: PUSH
65203: LD_INT 0
65205: PPUSH
65206: LD_INT 3
65208: PPUSH
65209: CALL_OW 12
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: ST_TO_ADDR
// end ;
65226: LD_VAR 0 1
65230: RET
// export function PrepareApemanEngineer ( ) ; begin
65231: LD_INT 0
65233: PPUSH
// uc_nation := 0 ;
65234: LD_ADDR_OWVAR 21
65238: PUSH
65239: LD_INT 0
65241: ST_TO_ADDR
// hc_sex := sex_male ;
65242: LD_ADDR_OWVAR 27
65246: PUSH
65247: LD_INT 1
65249: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65250: LD_ADDR_OWVAR 28
65254: PUSH
65255: LD_INT 16
65257: ST_TO_ADDR
// hc_gallery :=  ;
65258: LD_ADDR_OWVAR 33
65262: PUSH
65263: LD_STRING 
65265: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65266: LD_ADDR_OWVAR 31
65270: PUSH
65271: LD_INT 0
65273: PPUSH
65274: LD_INT 3
65276: PPUSH
65277: CALL_OW 12
65281: PUSH
65282: LD_INT 0
65284: PPUSH
65285: LD_INT 3
65287: PPUSH
65288: CALL_OW 12
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: ST_TO_ADDR
// end ;
65305: LD_VAR 0 1
65309: RET
// export function PrepareApeman ( agressivity ) ; begin
65310: LD_INT 0
65312: PPUSH
// uc_side := 0 ;
65313: LD_ADDR_OWVAR 20
65317: PUSH
65318: LD_INT 0
65320: ST_TO_ADDR
// uc_nation := 0 ;
65321: LD_ADDR_OWVAR 21
65325: PUSH
65326: LD_INT 0
65328: ST_TO_ADDR
// hc_sex := sex_male ;
65329: LD_ADDR_OWVAR 27
65333: PUSH
65334: LD_INT 1
65336: ST_TO_ADDR
// hc_class := class_apeman ;
65337: LD_ADDR_OWVAR 28
65341: PUSH
65342: LD_INT 12
65344: ST_TO_ADDR
// hc_gallery :=  ;
65345: LD_ADDR_OWVAR 33
65349: PUSH
65350: LD_STRING 
65352: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65353: LD_ADDR_OWVAR 35
65357: PUSH
65358: LD_VAR 0 1
65362: NEG
65363: PPUSH
65364: LD_VAR 0 1
65368: PPUSH
65369: CALL_OW 12
65373: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65374: LD_ADDR_OWVAR 31
65378: PUSH
65379: LD_INT 0
65381: PPUSH
65382: LD_INT 3
65384: PPUSH
65385: CALL_OW 12
65389: PUSH
65390: LD_INT 0
65392: PPUSH
65393: LD_INT 3
65395: PPUSH
65396: CALL_OW 12
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: ST_TO_ADDR
// end ;
65413: LD_VAR 0 2
65417: RET
// export function PrepareTiger ( agressivity ) ; begin
65418: LD_INT 0
65420: PPUSH
// uc_side := 0 ;
65421: LD_ADDR_OWVAR 20
65425: PUSH
65426: LD_INT 0
65428: ST_TO_ADDR
// uc_nation := 0 ;
65429: LD_ADDR_OWVAR 21
65433: PUSH
65434: LD_INT 0
65436: ST_TO_ADDR
// hc_class := class_tiger ;
65437: LD_ADDR_OWVAR 28
65441: PUSH
65442: LD_INT 14
65444: ST_TO_ADDR
// hc_gallery :=  ;
65445: LD_ADDR_OWVAR 33
65449: PUSH
65450: LD_STRING 
65452: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65453: LD_ADDR_OWVAR 35
65457: PUSH
65458: LD_VAR 0 1
65462: NEG
65463: PPUSH
65464: LD_VAR 0 1
65468: PPUSH
65469: CALL_OW 12
65473: ST_TO_ADDR
// end ;
65474: LD_VAR 0 2
65478: RET
// export function PrepareEnchidna ( ) ; begin
65479: LD_INT 0
65481: PPUSH
// uc_side := 0 ;
65482: LD_ADDR_OWVAR 20
65486: PUSH
65487: LD_INT 0
65489: ST_TO_ADDR
// uc_nation := 0 ;
65490: LD_ADDR_OWVAR 21
65494: PUSH
65495: LD_INT 0
65497: ST_TO_ADDR
// hc_class := class_baggie ;
65498: LD_ADDR_OWVAR 28
65502: PUSH
65503: LD_INT 13
65505: ST_TO_ADDR
// hc_gallery :=  ;
65506: LD_ADDR_OWVAR 33
65510: PUSH
65511: LD_STRING 
65513: ST_TO_ADDR
// end ;
65514: LD_VAR 0 1
65518: RET
// export function PrepareFrog ( ) ; begin
65519: LD_INT 0
65521: PPUSH
// uc_side := 0 ;
65522: LD_ADDR_OWVAR 20
65526: PUSH
65527: LD_INT 0
65529: ST_TO_ADDR
// uc_nation := 0 ;
65530: LD_ADDR_OWVAR 21
65534: PUSH
65535: LD_INT 0
65537: ST_TO_ADDR
// hc_class := class_frog ;
65538: LD_ADDR_OWVAR 28
65542: PUSH
65543: LD_INT 19
65545: ST_TO_ADDR
// hc_gallery :=  ;
65546: LD_ADDR_OWVAR 33
65550: PUSH
65551: LD_STRING 
65553: ST_TO_ADDR
// end ;
65554: LD_VAR 0 1
65558: RET
// export function PrepareFish ( ) ; begin
65559: LD_INT 0
65561: PPUSH
// uc_side := 0 ;
65562: LD_ADDR_OWVAR 20
65566: PUSH
65567: LD_INT 0
65569: ST_TO_ADDR
// uc_nation := 0 ;
65570: LD_ADDR_OWVAR 21
65574: PUSH
65575: LD_INT 0
65577: ST_TO_ADDR
// hc_class := class_fish ;
65578: LD_ADDR_OWVAR 28
65582: PUSH
65583: LD_INT 20
65585: ST_TO_ADDR
// hc_gallery :=  ;
65586: LD_ADDR_OWVAR 33
65590: PUSH
65591: LD_STRING 
65593: ST_TO_ADDR
// end ;
65594: LD_VAR 0 1
65598: RET
// export function PrepareBird ( ) ; begin
65599: LD_INT 0
65601: PPUSH
// uc_side := 0 ;
65602: LD_ADDR_OWVAR 20
65606: PUSH
65607: LD_INT 0
65609: ST_TO_ADDR
// uc_nation := 0 ;
65610: LD_ADDR_OWVAR 21
65614: PUSH
65615: LD_INT 0
65617: ST_TO_ADDR
// hc_class := class_phororhacos ;
65618: LD_ADDR_OWVAR 28
65622: PUSH
65623: LD_INT 18
65625: ST_TO_ADDR
// hc_gallery :=  ;
65626: LD_ADDR_OWVAR 33
65630: PUSH
65631: LD_STRING 
65633: ST_TO_ADDR
// end ;
65634: LD_VAR 0 1
65638: RET
// export function PrepareHorse ( ) ; begin
65639: LD_INT 0
65641: PPUSH
// uc_side := 0 ;
65642: LD_ADDR_OWVAR 20
65646: PUSH
65647: LD_INT 0
65649: ST_TO_ADDR
// uc_nation := 0 ;
65650: LD_ADDR_OWVAR 21
65654: PUSH
65655: LD_INT 0
65657: ST_TO_ADDR
// hc_class := class_horse ;
65658: LD_ADDR_OWVAR 28
65662: PUSH
65663: LD_INT 21
65665: ST_TO_ADDR
// hc_gallery :=  ;
65666: LD_ADDR_OWVAR 33
65670: PUSH
65671: LD_STRING 
65673: ST_TO_ADDR
// end ;
65674: LD_VAR 0 1
65678: RET
// export function PrepareMastodont ( ) ; begin
65679: LD_INT 0
65681: PPUSH
// uc_side := 0 ;
65682: LD_ADDR_OWVAR 20
65686: PUSH
65687: LD_INT 0
65689: ST_TO_ADDR
// uc_nation := 0 ;
65690: LD_ADDR_OWVAR 21
65694: PUSH
65695: LD_INT 0
65697: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65698: LD_ADDR_OWVAR 37
65702: PUSH
65703: LD_INT 31
65705: ST_TO_ADDR
// vc_control := control_rider ;
65706: LD_ADDR_OWVAR 38
65710: PUSH
65711: LD_INT 4
65713: ST_TO_ADDR
// end ;
65714: LD_VAR 0 1
65718: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65719: LD_INT 0
65721: PPUSH
65722: PPUSH
65723: PPUSH
// uc_side = 0 ;
65724: LD_ADDR_OWVAR 20
65728: PUSH
65729: LD_INT 0
65731: ST_TO_ADDR
// uc_nation = 0 ;
65732: LD_ADDR_OWVAR 21
65736: PUSH
65737: LD_INT 0
65739: ST_TO_ADDR
// InitHc_All ( ) ;
65740: CALL_OW 584
// InitVc ;
65744: CALL_OW 20
// if mastodonts then
65748: LD_VAR 0 6
65752: IFFALSE 65819
// for i = 1 to mastodonts do
65754: LD_ADDR_VAR 0 11
65758: PUSH
65759: DOUBLE
65760: LD_INT 1
65762: DEC
65763: ST_TO_ADDR
65764: LD_VAR 0 6
65768: PUSH
65769: FOR_TO
65770: IFFALSE 65817
// begin vc_chassis := 31 ;
65772: LD_ADDR_OWVAR 37
65776: PUSH
65777: LD_INT 31
65779: ST_TO_ADDR
// vc_control := control_rider ;
65780: LD_ADDR_OWVAR 38
65784: PUSH
65785: LD_INT 4
65787: ST_TO_ADDR
// animal := CreateVehicle ;
65788: LD_ADDR_VAR 0 12
65792: PUSH
65793: CALL_OW 45
65797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65798: LD_VAR 0 12
65802: PPUSH
65803: LD_VAR 0 8
65807: PPUSH
65808: LD_INT 0
65810: PPUSH
65811: CALL 67947 0 3
// end ;
65815: GO 65769
65817: POP
65818: POP
// if horses then
65819: LD_VAR 0 5
65823: IFFALSE 65890
// for i = 1 to horses do
65825: LD_ADDR_VAR 0 11
65829: PUSH
65830: DOUBLE
65831: LD_INT 1
65833: DEC
65834: ST_TO_ADDR
65835: LD_VAR 0 5
65839: PUSH
65840: FOR_TO
65841: IFFALSE 65888
// begin hc_class := 21 ;
65843: LD_ADDR_OWVAR 28
65847: PUSH
65848: LD_INT 21
65850: ST_TO_ADDR
// hc_gallery :=  ;
65851: LD_ADDR_OWVAR 33
65855: PUSH
65856: LD_STRING 
65858: ST_TO_ADDR
// animal := CreateHuman ;
65859: LD_ADDR_VAR 0 12
65863: PUSH
65864: CALL_OW 44
65868: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65869: LD_VAR 0 12
65873: PPUSH
65874: LD_VAR 0 8
65878: PPUSH
65879: LD_INT 0
65881: PPUSH
65882: CALL 67947 0 3
// end ;
65886: GO 65840
65888: POP
65889: POP
// if birds then
65890: LD_VAR 0 1
65894: IFFALSE 65961
// for i = 1 to birds do
65896: LD_ADDR_VAR 0 11
65900: PUSH
65901: DOUBLE
65902: LD_INT 1
65904: DEC
65905: ST_TO_ADDR
65906: LD_VAR 0 1
65910: PUSH
65911: FOR_TO
65912: IFFALSE 65959
// begin hc_class := 18 ;
65914: LD_ADDR_OWVAR 28
65918: PUSH
65919: LD_INT 18
65921: ST_TO_ADDR
// hc_gallery =  ;
65922: LD_ADDR_OWVAR 33
65926: PUSH
65927: LD_STRING 
65929: ST_TO_ADDR
// animal := CreateHuman ;
65930: LD_ADDR_VAR 0 12
65934: PUSH
65935: CALL_OW 44
65939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65940: LD_VAR 0 12
65944: PPUSH
65945: LD_VAR 0 8
65949: PPUSH
65950: LD_INT 0
65952: PPUSH
65953: CALL 67947 0 3
// end ;
65957: GO 65911
65959: POP
65960: POP
// if tigers then
65961: LD_VAR 0 2
65965: IFFALSE 66049
// for i = 1 to tigers do
65967: LD_ADDR_VAR 0 11
65971: PUSH
65972: DOUBLE
65973: LD_INT 1
65975: DEC
65976: ST_TO_ADDR
65977: LD_VAR 0 2
65981: PUSH
65982: FOR_TO
65983: IFFALSE 66047
// begin hc_class = class_tiger ;
65985: LD_ADDR_OWVAR 28
65989: PUSH
65990: LD_INT 14
65992: ST_TO_ADDR
// hc_gallery =  ;
65993: LD_ADDR_OWVAR 33
65997: PUSH
65998: LD_STRING 
66000: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66001: LD_ADDR_OWVAR 35
66005: PUSH
66006: LD_INT 7
66008: NEG
66009: PPUSH
66010: LD_INT 7
66012: PPUSH
66013: CALL_OW 12
66017: ST_TO_ADDR
// animal := CreateHuman ;
66018: LD_ADDR_VAR 0 12
66022: PUSH
66023: CALL_OW 44
66027: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66028: LD_VAR 0 12
66032: PPUSH
66033: LD_VAR 0 8
66037: PPUSH
66038: LD_INT 0
66040: PPUSH
66041: CALL 67947 0 3
// end ;
66045: GO 65982
66047: POP
66048: POP
// if apemans then
66049: LD_VAR 0 3
66053: IFFALSE 66176
// for i = 1 to apemans do
66055: LD_ADDR_VAR 0 11
66059: PUSH
66060: DOUBLE
66061: LD_INT 1
66063: DEC
66064: ST_TO_ADDR
66065: LD_VAR 0 3
66069: PUSH
66070: FOR_TO
66071: IFFALSE 66174
// begin hc_class = class_apeman ;
66073: LD_ADDR_OWVAR 28
66077: PUSH
66078: LD_INT 12
66080: ST_TO_ADDR
// hc_gallery =  ;
66081: LD_ADDR_OWVAR 33
66085: PUSH
66086: LD_STRING 
66088: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66089: LD_ADDR_OWVAR 35
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PPUSH
66098: LD_INT 2
66100: PPUSH
66101: CALL_OW 12
66105: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66106: LD_ADDR_OWVAR 31
66110: PUSH
66111: LD_INT 1
66113: PPUSH
66114: LD_INT 3
66116: PPUSH
66117: CALL_OW 12
66121: PUSH
66122: LD_INT 1
66124: PPUSH
66125: LD_INT 3
66127: PPUSH
66128: CALL_OW 12
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: ST_TO_ADDR
// animal := CreateHuman ;
66145: LD_ADDR_VAR 0 12
66149: PUSH
66150: CALL_OW 44
66154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66155: LD_VAR 0 12
66159: PPUSH
66160: LD_VAR 0 8
66164: PPUSH
66165: LD_INT 0
66167: PPUSH
66168: CALL 67947 0 3
// end ;
66172: GO 66070
66174: POP
66175: POP
// if enchidnas then
66176: LD_VAR 0 4
66180: IFFALSE 66247
// for i = 1 to enchidnas do
66182: LD_ADDR_VAR 0 11
66186: PUSH
66187: DOUBLE
66188: LD_INT 1
66190: DEC
66191: ST_TO_ADDR
66192: LD_VAR 0 4
66196: PUSH
66197: FOR_TO
66198: IFFALSE 66245
// begin hc_class = 13 ;
66200: LD_ADDR_OWVAR 28
66204: PUSH
66205: LD_INT 13
66207: ST_TO_ADDR
// hc_gallery =  ;
66208: LD_ADDR_OWVAR 33
66212: PUSH
66213: LD_STRING 
66215: ST_TO_ADDR
// animal := CreateHuman ;
66216: LD_ADDR_VAR 0 12
66220: PUSH
66221: CALL_OW 44
66225: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66226: LD_VAR 0 12
66230: PPUSH
66231: LD_VAR 0 8
66235: PPUSH
66236: LD_INT 0
66238: PPUSH
66239: CALL 67947 0 3
// end ;
66243: GO 66197
66245: POP
66246: POP
// if fishes then
66247: LD_VAR 0 7
66251: IFFALSE 66318
// for i = 1 to fishes do
66253: LD_ADDR_VAR 0 11
66257: PUSH
66258: DOUBLE
66259: LD_INT 1
66261: DEC
66262: ST_TO_ADDR
66263: LD_VAR 0 7
66267: PUSH
66268: FOR_TO
66269: IFFALSE 66316
// begin hc_class = 20 ;
66271: LD_ADDR_OWVAR 28
66275: PUSH
66276: LD_INT 20
66278: ST_TO_ADDR
// hc_gallery =  ;
66279: LD_ADDR_OWVAR 33
66283: PUSH
66284: LD_STRING 
66286: ST_TO_ADDR
// animal := CreateHuman ;
66287: LD_ADDR_VAR 0 12
66291: PUSH
66292: CALL_OW 44
66296: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66297: LD_VAR 0 12
66301: PPUSH
66302: LD_VAR 0 9
66306: PPUSH
66307: LD_INT 0
66309: PPUSH
66310: CALL 67947 0 3
// end ;
66314: GO 66268
66316: POP
66317: POP
// end ;
66318: LD_VAR 0 10
66322: RET
// export function WantHeal ( sci , unit ) ; begin
66323: LD_INT 0
66325: PPUSH
// if GetTaskList ( sci ) > 0 then
66326: LD_VAR 0 1
66330: PPUSH
66331: CALL_OW 437
66335: PUSH
66336: LD_INT 0
66338: GREATER
66339: IFFALSE 66409
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66341: LD_VAR 0 1
66345: PPUSH
66346: CALL_OW 437
66350: PUSH
66351: LD_INT 1
66353: ARRAY
66354: PUSH
66355: LD_INT 1
66357: ARRAY
66358: PUSH
66359: LD_STRING l
66361: EQUAL
66362: PUSH
66363: LD_VAR 0 1
66367: PPUSH
66368: CALL_OW 437
66372: PUSH
66373: LD_INT 1
66375: ARRAY
66376: PUSH
66377: LD_INT 4
66379: ARRAY
66380: PUSH
66381: LD_VAR 0 2
66385: EQUAL
66386: AND
66387: IFFALSE 66399
// result := true else
66389: LD_ADDR_VAR 0 3
66393: PUSH
66394: LD_INT 1
66396: ST_TO_ADDR
66397: GO 66407
// result := false ;
66399: LD_ADDR_VAR 0 3
66403: PUSH
66404: LD_INT 0
66406: ST_TO_ADDR
// end else
66407: GO 66417
// result := false ;
66409: LD_ADDR_VAR 0 3
66413: PUSH
66414: LD_INT 0
66416: ST_TO_ADDR
// end ;
66417: LD_VAR 0 3
66421: RET
// export function HealTarget ( sci ) ; begin
66422: LD_INT 0
66424: PPUSH
// if not sci then
66425: LD_VAR 0 1
66429: NOT
66430: IFFALSE 66434
// exit ;
66432: GO 66499
// result := 0 ;
66434: LD_ADDR_VAR 0 2
66438: PUSH
66439: LD_INT 0
66441: ST_TO_ADDR
// if GetTaskList ( sci ) then
66442: LD_VAR 0 1
66446: PPUSH
66447: CALL_OW 437
66451: IFFALSE 66499
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66453: LD_VAR 0 1
66457: PPUSH
66458: CALL_OW 437
66462: PUSH
66463: LD_INT 1
66465: ARRAY
66466: PUSH
66467: LD_INT 1
66469: ARRAY
66470: PUSH
66471: LD_STRING l
66473: EQUAL
66474: IFFALSE 66499
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66476: LD_ADDR_VAR 0 2
66480: PUSH
66481: LD_VAR 0 1
66485: PPUSH
66486: CALL_OW 437
66490: PUSH
66491: LD_INT 1
66493: ARRAY
66494: PUSH
66495: LD_INT 4
66497: ARRAY
66498: ST_TO_ADDR
// end ;
66499: LD_VAR 0 2
66503: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66504: LD_INT 0
66506: PPUSH
66507: PPUSH
66508: PPUSH
66509: PPUSH
// if not base_units then
66510: LD_VAR 0 1
66514: NOT
66515: IFFALSE 66519
// exit ;
66517: GO 66606
// result := false ;
66519: LD_ADDR_VAR 0 2
66523: PUSH
66524: LD_INT 0
66526: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66527: LD_ADDR_VAR 0 5
66531: PUSH
66532: LD_VAR 0 1
66536: PPUSH
66537: LD_INT 21
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PPUSH
66547: CALL_OW 72
66551: ST_TO_ADDR
// if not tmp then
66552: LD_VAR 0 5
66556: NOT
66557: IFFALSE 66561
// exit ;
66559: GO 66606
// for i in tmp do
66561: LD_ADDR_VAR 0 3
66565: PUSH
66566: LD_VAR 0 5
66570: PUSH
66571: FOR_IN
66572: IFFALSE 66604
// begin result := EnemyInRange ( i , 22 ) ;
66574: LD_ADDR_VAR 0 2
66578: PUSH
66579: LD_VAR 0 3
66583: PPUSH
66584: LD_INT 22
66586: PPUSH
66587: CALL 64204 0 2
66591: ST_TO_ADDR
// if result then
66592: LD_VAR 0 2
66596: IFFALSE 66602
// exit ;
66598: POP
66599: POP
66600: GO 66606
// end ;
66602: GO 66571
66604: POP
66605: POP
// end ;
66606: LD_VAR 0 2
66610: RET
// export function FilterByTag ( units , tag ) ; begin
66611: LD_INT 0
66613: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66614: LD_ADDR_VAR 0 3
66618: PUSH
66619: LD_VAR 0 1
66623: PPUSH
66624: LD_INT 120
66626: PUSH
66627: LD_VAR 0 2
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PPUSH
66636: CALL_OW 72
66640: ST_TO_ADDR
// end ;
66641: LD_VAR 0 3
66645: RET
// export function IsDriver ( un ) ; begin
66646: LD_INT 0
66648: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66649: LD_ADDR_VAR 0 2
66653: PUSH
66654: LD_VAR 0 1
66658: PUSH
66659: LD_INT 55
66661: PUSH
66662: EMPTY
66663: LIST
66664: PPUSH
66665: CALL_OW 69
66669: IN
66670: ST_TO_ADDR
// end ;
66671: LD_VAR 0 2
66675: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66676: LD_INT 0
66678: PPUSH
66679: PPUSH
// list := [ ] ;
66680: LD_ADDR_VAR 0 5
66684: PUSH
66685: EMPTY
66686: ST_TO_ADDR
// case d of 0 :
66687: LD_VAR 0 3
66691: PUSH
66692: LD_INT 0
66694: DOUBLE
66695: EQUAL
66696: IFTRUE 66700
66698: GO 66833
66700: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66701: LD_ADDR_VAR 0 5
66705: PUSH
66706: LD_VAR 0 1
66710: PUSH
66711: LD_INT 4
66713: MINUS
66714: PUSH
66715: LD_VAR 0 2
66719: PUSH
66720: LD_INT 4
66722: MINUS
66723: PUSH
66724: LD_INT 2
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: LIST
66731: PUSH
66732: LD_VAR 0 1
66736: PUSH
66737: LD_INT 3
66739: MINUS
66740: PUSH
66741: LD_VAR 0 2
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: LIST
66753: PUSH
66754: LD_VAR 0 1
66758: PUSH
66759: LD_INT 4
66761: PLUS
66762: PUSH
66763: LD_VAR 0 2
66767: PUSH
66768: LD_INT 4
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: LIST
66775: PUSH
66776: LD_VAR 0 1
66780: PUSH
66781: LD_INT 3
66783: PLUS
66784: PUSH
66785: LD_VAR 0 2
66789: PUSH
66790: LD_INT 3
66792: PLUS
66793: PUSH
66794: LD_INT 5
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: PUSH
66802: LD_VAR 0 1
66806: PUSH
66807: LD_VAR 0 2
66811: PUSH
66812: LD_INT 4
66814: PLUS
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: LIST
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: ST_TO_ADDR
// end ; 1 :
66831: GO 67531
66833: LD_INT 1
66835: DOUBLE
66836: EQUAL
66837: IFTRUE 66841
66839: GO 66974
66841: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66842: LD_ADDR_VAR 0 5
66846: PUSH
66847: LD_VAR 0 1
66851: PUSH
66852: LD_VAR 0 2
66856: PUSH
66857: LD_INT 4
66859: MINUS
66860: PUSH
66861: LD_INT 3
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: LIST
66868: PUSH
66869: LD_VAR 0 1
66873: PUSH
66874: LD_INT 3
66876: MINUS
66877: PUSH
66878: LD_VAR 0 2
66882: PUSH
66883: LD_INT 3
66885: MINUS
66886: PUSH
66887: LD_INT 2
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: LIST
66894: PUSH
66895: LD_VAR 0 1
66899: PUSH
66900: LD_INT 4
66902: MINUS
66903: PUSH
66904: LD_VAR 0 2
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: LIST
66916: PUSH
66917: LD_VAR 0 1
66921: PUSH
66922: LD_VAR 0 2
66926: PUSH
66927: LD_INT 3
66929: PLUS
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: PUSH
66939: LD_VAR 0 1
66943: PUSH
66944: LD_INT 4
66946: PLUS
66947: PUSH
66948: LD_VAR 0 2
66952: PUSH
66953: LD_INT 4
66955: PLUS
66956: PUSH
66957: LD_INT 5
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: ST_TO_ADDR
// end ; 2 :
66972: GO 67531
66974: LD_INT 2
66976: DOUBLE
66977: EQUAL
66978: IFTRUE 66982
66980: GO 67111
66982: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66983: LD_ADDR_VAR 0 5
66987: PUSH
66988: LD_VAR 0 1
66992: PUSH
66993: LD_VAR 0 2
66997: PUSH
66998: LD_INT 3
67000: MINUS
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: PUSH
67010: LD_VAR 0 1
67014: PUSH
67015: LD_INT 4
67017: PLUS
67018: PUSH
67019: LD_VAR 0 2
67023: PUSH
67024: LD_INT 4
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: LIST
67031: PUSH
67032: LD_VAR 0 1
67036: PUSH
67037: LD_VAR 0 2
67041: PUSH
67042: LD_INT 4
67044: PLUS
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: LIST
67053: PUSH
67054: LD_VAR 0 1
67058: PUSH
67059: LD_INT 3
67061: MINUS
67062: PUSH
67063: LD_VAR 0 2
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: LIST
67075: PUSH
67076: LD_VAR 0 1
67080: PUSH
67081: LD_INT 4
67083: MINUS
67084: PUSH
67085: LD_VAR 0 2
67089: PUSH
67090: LD_INT 4
67092: MINUS
67093: PUSH
67094: LD_INT 2
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// end ; 3 :
67109: GO 67531
67111: LD_INT 3
67113: DOUBLE
67114: EQUAL
67115: IFTRUE 67119
67117: GO 67252
67119: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67120: LD_ADDR_VAR 0 5
67124: PUSH
67125: LD_VAR 0 1
67129: PUSH
67130: LD_INT 3
67132: PLUS
67133: PUSH
67134: LD_VAR 0 2
67138: PUSH
67139: LD_INT 4
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: LIST
67146: PUSH
67147: LD_VAR 0 1
67151: PUSH
67152: LD_INT 4
67154: PLUS
67155: PUSH
67156: LD_VAR 0 2
67160: PUSH
67161: LD_INT 4
67163: PLUS
67164: PUSH
67165: LD_INT 5
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: PUSH
67173: LD_VAR 0 1
67177: PUSH
67178: LD_INT 4
67180: MINUS
67181: PUSH
67182: LD_VAR 0 2
67186: PUSH
67187: LD_INT 1
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: PUSH
67195: LD_VAR 0 1
67199: PUSH
67200: LD_VAR 0 2
67204: PUSH
67205: LD_INT 4
67207: MINUS
67208: PUSH
67209: LD_INT 3
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: LIST
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: LD_INT 3
67224: MINUS
67225: PUSH
67226: LD_VAR 0 2
67230: PUSH
67231: LD_INT 3
67233: MINUS
67234: PUSH
67235: LD_INT 2
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: ST_TO_ADDR
// end ; 4 :
67250: GO 67531
67252: LD_INT 4
67254: DOUBLE
67255: EQUAL
67256: IFTRUE 67260
67258: GO 67393
67260: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67261: LD_ADDR_VAR 0 5
67265: PUSH
67266: LD_VAR 0 1
67270: PUSH
67271: LD_VAR 0 2
67275: PUSH
67276: LD_INT 4
67278: PLUS
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: LIST
67287: PUSH
67288: LD_VAR 0 1
67292: PUSH
67293: LD_INT 3
67295: PLUS
67296: PUSH
67297: LD_VAR 0 2
67301: PUSH
67302: LD_INT 3
67304: PLUS
67305: PUSH
67306: LD_INT 5
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: LIST
67313: PUSH
67314: LD_VAR 0 1
67318: PUSH
67319: LD_INT 4
67321: PLUS
67322: PUSH
67323: LD_VAR 0 2
67327: PUSH
67328: LD_INT 4
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: LIST
67335: PUSH
67336: LD_VAR 0 1
67340: PUSH
67341: LD_VAR 0 2
67345: PUSH
67346: LD_INT 3
67348: MINUS
67349: PUSH
67350: LD_INT 3
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: LIST
67357: PUSH
67358: LD_VAR 0 1
67362: PUSH
67363: LD_INT 4
67365: MINUS
67366: PUSH
67367: LD_VAR 0 2
67371: PUSH
67372: LD_INT 4
67374: MINUS
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: LIST
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: ST_TO_ADDR
// end ; 5 :
67391: GO 67531
67393: LD_INT 5
67395: DOUBLE
67396: EQUAL
67397: IFTRUE 67401
67399: GO 67530
67401: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67402: LD_ADDR_VAR 0 5
67406: PUSH
67407: LD_VAR 0 1
67411: PUSH
67412: LD_INT 4
67414: MINUS
67415: PUSH
67416: LD_VAR 0 2
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: LIST
67428: PUSH
67429: LD_VAR 0 1
67433: PUSH
67434: LD_VAR 0 2
67438: PUSH
67439: LD_INT 4
67441: MINUS
67442: PUSH
67443: LD_INT 3
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: PUSH
67451: LD_VAR 0 1
67455: PUSH
67456: LD_INT 4
67458: PLUS
67459: PUSH
67460: LD_VAR 0 2
67464: PUSH
67465: LD_INT 4
67467: PLUS
67468: PUSH
67469: LD_INT 5
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: PUSH
67477: LD_VAR 0 1
67481: PUSH
67482: LD_INT 3
67484: PLUS
67485: PUSH
67486: LD_VAR 0 2
67490: PUSH
67491: LD_INT 4
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: LIST
67498: PUSH
67499: LD_VAR 0 1
67503: PUSH
67504: LD_VAR 0 2
67508: PUSH
67509: LD_INT 3
67511: PLUS
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: LIST
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: ST_TO_ADDR
// end ; end ;
67528: GO 67531
67530: POP
// result := list ;
67531: LD_ADDR_VAR 0 4
67535: PUSH
67536: LD_VAR 0 5
67540: ST_TO_ADDR
// end ;
67541: LD_VAR 0 4
67545: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67546: LD_INT 0
67548: PPUSH
67549: PPUSH
67550: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67551: LD_VAR 0 1
67555: NOT
67556: PUSH
67557: LD_VAR 0 2
67561: PUSH
67562: LD_INT 1
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: LD_INT 4
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: IN
67580: NOT
67581: OR
67582: IFFALSE 67586
// exit ;
67584: GO 67669
// tmp := [ ] ;
67586: LD_ADDR_VAR 0 5
67590: PUSH
67591: EMPTY
67592: ST_TO_ADDR
// for i in units do
67593: LD_ADDR_VAR 0 4
67597: PUSH
67598: LD_VAR 0 1
67602: PUSH
67603: FOR_IN
67604: IFFALSE 67638
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67606: LD_ADDR_VAR 0 5
67610: PUSH
67611: LD_VAR 0 5
67615: PPUSH
67616: LD_VAR 0 4
67620: PPUSH
67621: LD_VAR 0 2
67625: PPUSH
67626: CALL_OW 259
67630: PPUSH
67631: CALL 69042 0 2
67635: ST_TO_ADDR
67636: GO 67603
67638: POP
67639: POP
// if not tmp then
67640: LD_VAR 0 5
67644: NOT
67645: IFFALSE 67649
// exit ;
67647: GO 67669
// result := SortListByListDesc ( units , tmp ) ;
67649: LD_ADDR_VAR 0 3
67653: PUSH
67654: LD_VAR 0 1
67658: PPUSH
67659: LD_VAR 0 5
67663: PPUSH
67664: CALL_OW 77
67668: ST_TO_ADDR
// end ;
67669: LD_VAR 0 3
67673: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67674: LD_INT 0
67676: PPUSH
67677: PPUSH
67678: PPUSH
// result := false ;
67679: LD_ADDR_VAR 0 3
67683: PUSH
67684: LD_INT 0
67686: ST_TO_ADDR
// if not building then
67687: LD_VAR 0 2
67691: NOT
67692: IFFALSE 67696
// exit ;
67694: GO 67834
// x := GetX ( building ) ;
67696: LD_ADDR_VAR 0 4
67700: PUSH
67701: LD_VAR 0 2
67705: PPUSH
67706: CALL_OW 250
67710: ST_TO_ADDR
// y := GetY ( building ) ;
67711: LD_ADDR_VAR 0 5
67715: PUSH
67716: LD_VAR 0 2
67720: PPUSH
67721: CALL_OW 251
67725: ST_TO_ADDR
// if not x or not y then
67726: LD_VAR 0 4
67730: NOT
67731: PUSH
67732: LD_VAR 0 5
67736: NOT
67737: OR
67738: IFFALSE 67742
// exit ;
67740: GO 67834
// if GetTaskList ( unit ) then
67742: LD_VAR 0 1
67746: PPUSH
67747: CALL_OW 437
67751: IFFALSE 67834
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67753: LD_STRING e
67755: PUSH
67756: LD_VAR 0 1
67760: PPUSH
67761: CALL_OW 437
67765: PUSH
67766: LD_INT 1
67768: ARRAY
67769: PUSH
67770: LD_INT 1
67772: ARRAY
67773: EQUAL
67774: PUSH
67775: LD_VAR 0 4
67779: PUSH
67780: LD_VAR 0 1
67784: PPUSH
67785: CALL_OW 437
67789: PUSH
67790: LD_INT 1
67792: ARRAY
67793: PUSH
67794: LD_INT 2
67796: ARRAY
67797: EQUAL
67798: AND
67799: PUSH
67800: LD_VAR 0 5
67804: PUSH
67805: LD_VAR 0 1
67809: PPUSH
67810: CALL_OW 437
67814: PUSH
67815: LD_INT 1
67817: ARRAY
67818: PUSH
67819: LD_INT 3
67821: ARRAY
67822: EQUAL
67823: AND
67824: IFFALSE 67834
// result := true end ;
67826: LD_ADDR_VAR 0 3
67830: PUSH
67831: LD_INT 1
67833: ST_TO_ADDR
// end ;
67834: LD_VAR 0 3
67838: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67839: LD_INT 0
67841: PPUSH
// result := false ;
67842: LD_ADDR_VAR 0 4
67846: PUSH
67847: LD_INT 0
67849: ST_TO_ADDR
// if GetTaskList ( unit ) then
67850: LD_VAR 0 1
67854: PPUSH
67855: CALL_OW 437
67859: IFFALSE 67942
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67861: LD_STRING M
67863: PUSH
67864: LD_VAR 0 1
67868: PPUSH
67869: CALL_OW 437
67873: PUSH
67874: LD_INT 1
67876: ARRAY
67877: PUSH
67878: LD_INT 1
67880: ARRAY
67881: EQUAL
67882: PUSH
67883: LD_VAR 0 2
67887: PUSH
67888: LD_VAR 0 1
67892: PPUSH
67893: CALL_OW 437
67897: PUSH
67898: LD_INT 1
67900: ARRAY
67901: PUSH
67902: LD_INT 2
67904: ARRAY
67905: EQUAL
67906: AND
67907: PUSH
67908: LD_VAR 0 3
67912: PUSH
67913: LD_VAR 0 1
67917: PPUSH
67918: CALL_OW 437
67922: PUSH
67923: LD_INT 1
67925: ARRAY
67926: PUSH
67927: LD_INT 3
67929: ARRAY
67930: EQUAL
67931: AND
67932: IFFALSE 67942
// result := true ;
67934: LD_ADDR_VAR 0 4
67938: PUSH
67939: LD_INT 1
67941: ST_TO_ADDR
// end ; end ;
67942: LD_VAR 0 4
67946: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67947: LD_INT 0
67949: PPUSH
67950: PPUSH
67951: PPUSH
67952: PPUSH
// if not unit or not area then
67953: LD_VAR 0 1
67957: NOT
67958: PUSH
67959: LD_VAR 0 2
67963: NOT
67964: OR
67965: IFFALSE 67969
// exit ;
67967: GO 68145
// tmp := AreaToList ( area , i ) ;
67969: LD_ADDR_VAR 0 6
67973: PUSH
67974: LD_VAR 0 2
67978: PPUSH
67979: LD_VAR 0 5
67983: PPUSH
67984: CALL_OW 517
67988: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67989: LD_ADDR_VAR 0 5
67993: PUSH
67994: DOUBLE
67995: LD_INT 1
67997: DEC
67998: ST_TO_ADDR
67999: LD_VAR 0 6
68003: PUSH
68004: LD_INT 1
68006: ARRAY
68007: PUSH
68008: FOR_TO
68009: IFFALSE 68143
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68011: LD_ADDR_VAR 0 7
68015: PUSH
68016: LD_VAR 0 6
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PUSH
68025: LD_VAR 0 5
68029: ARRAY
68030: PUSH
68031: LD_VAR 0 6
68035: PUSH
68036: LD_INT 2
68038: ARRAY
68039: PUSH
68040: LD_VAR 0 5
68044: ARRAY
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68050: LD_INT 92
68052: PUSH
68053: LD_VAR 0 7
68057: PUSH
68058: LD_INT 1
68060: ARRAY
68061: PUSH
68062: LD_VAR 0 7
68066: PUSH
68067: LD_INT 2
68069: ARRAY
68070: PUSH
68071: LD_INT 2
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: PPUSH
68080: CALL_OW 69
68084: PUSH
68085: LD_INT 0
68087: EQUAL
68088: IFFALSE 68141
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68090: LD_VAR 0 1
68094: PPUSH
68095: LD_VAR 0 7
68099: PUSH
68100: LD_INT 1
68102: ARRAY
68103: PPUSH
68104: LD_VAR 0 7
68108: PUSH
68109: LD_INT 2
68111: ARRAY
68112: PPUSH
68113: LD_VAR 0 3
68117: PPUSH
68118: CALL_OW 48
// result := IsPlaced ( unit ) ;
68122: LD_ADDR_VAR 0 4
68126: PUSH
68127: LD_VAR 0 1
68131: PPUSH
68132: CALL_OW 305
68136: ST_TO_ADDR
// exit ;
68137: POP
68138: POP
68139: GO 68145
// end ; end ;
68141: GO 68008
68143: POP
68144: POP
// end ;
68145: LD_VAR 0 4
68149: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68150: LD_INT 0
68152: PPUSH
68153: PPUSH
68154: PPUSH
// if not side or side > 8 then
68155: LD_VAR 0 1
68159: NOT
68160: PUSH
68161: LD_VAR 0 1
68165: PUSH
68166: LD_INT 8
68168: GREATER
68169: OR
68170: IFFALSE 68174
// exit ;
68172: GO 68361
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68174: LD_ADDR_VAR 0 4
68178: PUSH
68179: LD_INT 22
68181: PUSH
68182: LD_VAR 0 1
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 21
68193: PUSH
68194: LD_INT 3
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PPUSH
68205: CALL_OW 69
68209: ST_TO_ADDR
// if not tmp then
68210: LD_VAR 0 4
68214: NOT
68215: IFFALSE 68219
// exit ;
68217: GO 68361
// enable_addtolog := true ;
68219: LD_ADDR_OWVAR 81
68223: PUSH
68224: LD_INT 1
68226: ST_TO_ADDR
// AddToLog ( [ ) ;
68227: LD_STRING [
68229: PPUSH
68230: CALL_OW 561
// for i in tmp do
68234: LD_ADDR_VAR 0 3
68238: PUSH
68239: LD_VAR 0 4
68243: PUSH
68244: FOR_IN
68245: IFFALSE 68352
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68247: LD_STRING [
68249: PUSH
68250: LD_VAR 0 3
68254: PPUSH
68255: CALL_OW 266
68259: STR
68260: PUSH
68261: LD_STRING , 
68263: STR
68264: PUSH
68265: LD_VAR 0 3
68269: PPUSH
68270: CALL_OW 250
68274: STR
68275: PUSH
68276: LD_STRING , 
68278: STR
68279: PUSH
68280: LD_VAR 0 3
68284: PPUSH
68285: CALL_OW 251
68289: STR
68290: PUSH
68291: LD_STRING , 
68293: STR
68294: PUSH
68295: LD_VAR 0 3
68299: PPUSH
68300: CALL_OW 254
68304: STR
68305: PUSH
68306: LD_STRING , 
68308: STR
68309: PUSH
68310: LD_VAR 0 3
68314: PPUSH
68315: LD_INT 1
68317: PPUSH
68318: CALL_OW 268
68322: STR
68323: PUSH
68324: LD_STRING , 
68326: STR
68327: PUSH
68328: LD_VAR 0 3
68332: PPUSH
68333: LD_INT 2
68335: PPUSH
68336: CALL_OW 268
68340: STR
68341: PUSH
68342: LD_STRING ],
68344: STR
68345: PPUSH
68346: CALL_OW 561
// end ;
68350: GO 68244
68352: POP
68353: POP
// AddToLog ( ]; ) ;
68354: LD_STRING ];
68356: PPUSH
68357: CALL_OW 561
// end ;
68361: LD_VAR 0 2
68365: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68366: LD_INT 0
68368: PPUSH
68369: PPUSH
68370: PPUSH
68371: PPUSH
68372: PPUSH
// if not area or not rate or not max then
68373: LD_VAR 0 1
68377: NOT
68378: PUSH
68379: LD_VAR 0 2
68383: NOT
68384: OR
68385: PUSH
68386: LD_VAR 0 4
68390: NOT
68391: OR
68392: IFFALSE 68396
// exit ;
68394: GO 68585
// while 1 do
68396: LD_INT 1
68398: IFFALSE 68585
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68400: LD_ADDR_VAR 0 9
68404: PUSH
68405: LD_VAR 0 1
68409: PPUSH
68410: LD_INT 1
68412: PPUSH
68413: CALL_OW 287
68417: PUSH
68418: LD_INT 10
68420: MUL
68421: ST_TO_ADDR
// r := rate / 10 ;
68422: LD_ADDR_VAR 0 7
68426: PUSH
68427: LD_VAR 0 2
68431: PUSH
68432: LD_INT 10
68434: DIVREAL
68435: ST_TO_ADDR
// time := 1 1$00 ;
68436: LD_ADDR_VAR 0 8
68440: PUSH
68441: LD_INT 2100
68443: ST_TO_ADDR
// if amount < min then
68444: LD_VAR 0 9
68448: PUSH
68449: LD_VAR 0 3
68453: LESS
68454: IFFALSE 68472
// r := r * 2 else
68456: LD_ADDR_VAR 0 7
68460: PUSH
68461: LD_VAR 0 7
68465: PUSH
68466: LD_INT 2
68468: MUL
68469: ST_TO_ADDR
68470: GO 68498
// if amount > max then
68472: LD_VAR 0 9
68476: PUSH
68477: LD_VAR 0 4
68481: GREATER
68482: IFFALSE 68498
// r := r / 2 ;
68484: LD_ADDR_VAR 0 7
68488: PUSH
68489: LD_VAR 0 7
68493: PUSH
68494: LD_INT 2
68496: DIVREAL
68497: ST_TO_ADDR
// time := time / r ;
68498: LD_ADDR_VAR 0 8
68502: PUSH
68503: LD_VAR 0 8
68507: PUSH
68508: LD_VAR 0 7
68512: DIVREAL
68513: ST_TO_ADDR
// if time < 0 then
68514: LD_VAR 0 8
68518: PUSH
68519: LD_INT 0
68521: LESS
68522: IFFALSE 68539
// time := time * - 1 ;
68524: LD_ADDR_VAR 0 8
68528: PUSH
68529: LD_VAR 0 8
68533: PUSH
68534: LD_INT 1
68536: NEG
68537: MUL
68538: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68539: LD_VAR 0 8
68543: PUSH
68544: LD_INT 35
68546: PPUSH
68547: LD_INT 875
68549: PPUSH
68550: CALL_OW 12
68554: PLUS
68555: PPUSH
68556: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68560: LD_INT 1
68562: PPUSH
68563: LD_INT 5
68565: PPUSH
68566: CALL_OW 12
68570: PPUSH
68571: LD_VAR 0 1
68575: PPUSH
68576: LD_INT 1
68578: PPUSH
68579: CALL_OW 55
// end ;
68583: GO 68396
// end ;
68585: LD_VAR 0 5
68589: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68590: LD_INT 0
68592: PPUSH
68593: PPUSH
68594: PPUSH
68595: PPUSH
68596: PPUSH
68597: PPUSH
68598: PPUSH
68599: PPUSH
// if not turrets or not factories then
68600: LD_VAR 0 1
68604: NOT
68605: PUSH
68606: LD_VAR 0 2
68610: NOT
68611: OR
68612: IFFALSE 68616
// exit ;
68614: GO 68923
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68616: LD_ADDR_VAR 0 10
68620: PUSH
68621: LD_INT 5
68623: PUSH
68624: LD_INT 6
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: LD_INT 4
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 3
68643: PUSH
68644: LD_INT 5
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 24
68658: PUSH
68659: LD_INT 25
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 23
68668: PUSH
68669: LD_INT 27
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 42
68682: PUSH
68683: LD_INT 43
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 44
68692: PUSH
68693: LD_INT 46
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 45
68702: PUSH
68703: LD_INT 47
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: LIST
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: LIST
68719: ST_TO_ADDR
// result := [ ] ;
68720: LD_ADDR_VAR 0 3
68724: PUSH
68725: EMPTY
68726: ST_TO_ADDR
// for i in turrets do
68727: LD_ADDR_VAR 0 4
68731: PUSH
68732: LD_VAR 0 1
68736: PUSH
68737: FOR_IN
68738: IFFALSE 68921
// begin nat := GetNation ( i ) ;
68740: LD_ADDR_VAR 0 7
68744: PUSH
68745: LD_VAR 0 4
68749: PPUSH
68750: CALL_OW 248
68754: ST_TO_ADDR
// weapon := 0 ;
68755: LD_ADDR_VAR 0 8
68759: PUSH
68760: LD_INT 0
68762: ST_TO_ADDR
// if not nat then
68763: LD_VAR 0 7
68767: NOT
68768: IFFALSE 68772
// continue ;
68770: GO 68737
// for j in list [ nat ] do
68772: LD_ADDR_VAR 0 5
68776: PUSH
68777: LD_VAR 0 10
68781: PUSH
68782: LD_VAR 0 7
68786: ARRAY
68787: PUSH
68788: FOR_IN
68789: IFFALSE 68830
// if GetBWeapon ( i ) = j [ 1 ] then
68791: LD_VAR 0 4
68795: PPUSH
68796: CALL_OW 269
68800: PUSH
68801: LD_VAR 0 5
68805: PUSH
68806: LD_INT 1
68808: ARRAY
68809: EQUAL
68810: IFFALSE 68828
// begin weapon := j [ 2 ] ;
68812: LD_ADDR_VAR 0 8
68816: PUSH
68817: LD_VAR 0 5
68821: PUSH
68822: LD_INT 2
68824: ARRAY
68825: ST_TO_ADDR
// break ;
68826: GO 68830
// end ;
68828: GO 68788
68830: POP
68831: POP
// if not weapon then
68832: LD_VAR 0 8
68836: NOT
68837: IFFALSE 68841
// continue ;
68839: GO 68737
// for k in factories do
68841: LD_ADDR_VAR 0 6
68845: PUSH
68846: LD_VAR 0 2
68850: PUSH
68851: FOR_IN
68852: IFFALSE 68917
// begin weapons := AvailableWeaponList ( k ) ;
68854: LD_ADDR_VAR 0 9
68858: PUSH
68859: LD_VAR 0 6
68863: PPUSH
68864: CALL_OW 478
68868: ST_TO_ADDR
// if not weapons then
68869: LD_VAR 0 9
68873: NOT
68874: IFFALSE 68878
// continue ;
68876: GO 68851
// if weapon in weapons then
68878: LD_VAR 0 8
68882: PUSH
68883: LD_VAR 0 9
68887: IN
68888: IFFALSE 68915
// begin result := [ i , weapon ] ;
68890: LD_ADDR_VAR 0 3
68894: PUSH
68895: LD_VAR 0 4
68899: PUSH
68900: LD_VAR 0 8
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: ST_TO_ADDR
// exit ;
68909: POP
68910: POP
68911: POP
68912: POP
68913: GO 68923
// end ; end ;
68915: GO 68851
68917: POP
68918: POP
// end ;
68919: GO 68737
68921: POP
68922: POP
// end ;
68923: LD_VAR 0 3
68927: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68928: LD_INT 0
68930: PPUSH
// if not side or side > 8 then
68931: LD_VAR 0 3
68935: NOT
68936: PUSH
68937: LD_VAR 0 3
68941: PUSH
68942: LD_INT 8
68944: GREATER
68945: OR
68946: IFFALSE 68950
// exit ;
68948: GO 69009
// if not range then
68950: LD_VAR 0 4
68954: NOT
68955: IFFALSE 68966
// range := - 12 ;
68957: LD_ADDR_VAR 0 4
68961: PUSH
68962: LD_INT 12
68964: NEG
68965: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68966: LD_VAR 0 1
68970: PPUSH
68971: LD_VAR 0 2
68975: PPUSH
68976: LD_VAR 0 3
68980: PPUSH
68981: LD_VAR 0 4
68985: PPUSH
68986: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68990: LD_VAR 0 1
68994: PPUSH
68995: LD_VAR 0 2
68999: PPUSH
69000: LD_VAR 0 3
69004: PPUSH
69005: CALL_OW 331
// end ;
69009: LD_VAR 0 5
69013: RET
// export function Video ( mode ) ; begin
69014: LD_INT 0
69016: PPUSH
// ingame_video = mode ;
69017: LD_ADDR_OWVAR 52
69021: PUSH
69022: LD_VAR 0 1
69026: ST_TO_ADDR
// interface_hidden = mode ;
69027: LD_ADDR_OWVAR 54
69031: PUSH
69032: LD_VAR 0 1
69036: ST_TO_ADDR
// end ;
69037: LD_VAR 0 2
69041: RET
// export function Join ( array , element ) ; begin
69042: LD_INT 0
69044: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69045: LD_ADDR_VAR 0 3
69049: PUSH
69050: LD_VAR 0 1
69054: PPUSH
69055: LD_VAR 0 1
69059: PUSH
69060: LD_INT 1
69062: PLUS
69063: PPUSH
69064: LD_VAR 0 2
69068: PPUSH
69069: CALL_OW 1
69073: ST_TO_ADDR
// end ;
69074: LD_VAR 0 3
69078: RET
// export function JoinUnion ( array , element ) ; begin
69079: LD_INT 0
69081: PPUSH
// result := array union element ;
69082: LD_ADDR_VAR 0 3
69086: PUSH
69087: LD_VAR 0 1
69091: PUSH
69092: LD_VAR 0 2
69096: UNION
69097: ST_TO_ADDR
// end ;
69098: LD_VAR 0 3
69102: RET
// export function GetBehemoths ( side ) ; begin
69103: LD_INT 0
69105: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69106: LD_ADDR_VAR 0 2
69110: PUSH
69111: LD_INT 22
69113: PUSH
69114: LD_VAR 0 1
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 31
69125: PUSH
69126: LD_INT 25
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PPUSH
69137: CALL_OW 69
69141: ST_TO_ADDR
// end ;
69142: LD_VAR 0 2
69146: RET
// export function Shuffle ( array ) ; var i , index ; begin
69147: LD_INT 0
69149: PPUSH
69150: PPUSH
69151: PPUSH
// result := [ ] ;
69152: LD_ADDR_VAR 0 2
69156: PUSH
69157: EMPTY
69158: ST_TO_ADDR
// if not array then
69159: LD_VAR 0 1
69163: NOT
69164: IFFALSE 69168
// exit ;
69166: GO 69267
// Randomize ;
69168: CALL_OW 10
// for i = array downto 1 do
69172: LD_ADDR_VAR 0 3
69176: PUSH
69177: DOUBLE
69178: LD_VAR 0 1
69182: INC
69183: ST_TO_ADDR
69184: LD_INT 1
69186: PUSH
69187: FOR_DOWNTO
69188: IFFALSE 69265
// begin index := rand ( 1 , array ) ;
69190: LD_ADDR_VAR 0 4
69194: PUSH
69195: LD_INT 1
69197: PPUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: CALL_OW 12
69207: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69208: LD_ADDR_VAR 0 2
69212: PUSH
69213: LD_VAR 0 2
69217: PPUSH
69218: LD_VAR 0 2
69222: PUSH
69223: LD_INT 1
69225: PLUS
69226: PPUSH
69227: LD_VAR 0 1
69231: PUSH
69232: LD_VAR 0 4
69236: ARRAY
69237: PPUSH
69238: CALL_OW 2
69242: ST_TO_ADDR
// array := Delete ( array , index ) ;
69243: LD_ADDR_VAR 0 1
69247: PUSH
69248: LD_VAR 0 1
69252: PPUSH
69253: LD_VAR 0 4
69257: PPUSH
69258: CALL_OW 3
69262: ST_TO_ADDR
// end ;
69263: GO 69187
69265: POP
69266: POP
// end ;
69267: LD_VAR 0 2
69271: RET
// export function GetBaseMaterials ( base ) ; begin
69272: LD_INT 0
69274: PPUSH
// result := [ 0 , 0 , 0 ] ;
69275: LD_ADDR_VAR 0 2
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: LD_INT 0
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: LIST
69293: ST_TO_ADDR
// if not base then
69294: LD_VAR 0 1
69298: NOT
69299: IFFALSE 69303
// exit ;
69301: GO 69352
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69303: LD_ADDR_VAR 0 2
69307: PUSH
69308: LD_VAR 0 1
69312: PPUSH
69313: LD_INT 1
69315: PPUSH
69316: CALL_OW 275
69320: PUSH
69321: LD_VAR 0 1
69325: PPUSH
69326: LD_INT 2
69328: PPUSH
69329: CALL_OW 275
69333: PUSH
69334: LD_VAR 0 1
69338: PPUSH
69339: LD_INT 3
69341: PPUSH
69342: CALL_OW 275
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: ST_TO_ADDR
// end ;
69352: LD_VAR 0 2
69356: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69357: LD_INT 0
69359: PPUSH
69360: PPUSH
// result := array ;
69361: LD_ADDR_VAR 0 3
69365: PUSH
69366: LD_VAR 0 1
69370: ST_TO_ADDR
// if size >= result then
69371: LD_VAR 0 2
69375: PUSH
69376: LD_VAR 0 3
69380: GREATEREQUAL
69381: IFFALSE 69385
// exit ;
69383: GO 69435
// if size then
69385: LD_VAR 0 2
69389: IFFALSE 69435
// for i := array downto size do
69391: LD_ADDR_VAR 0 4
69395: PUSH
69396: DOUBLE
69397: LD_VAR 0 1
69401: INC
69402: ST_TO_ADDR
69403: LD_VAR 0 2
69407: PUSH
69408: FOR_DOWNTO
69409: IFFALSE 69433
// result := Delete ( result , result ) ;
69411: LD_ADDR_VAR 0 3
69415: PUSH
69416: LD_VAR 0 3
69420: PPUSH
69421: LD_VAR 0 3
69425: PPUSH
69426: CALL_OW 3
69430: ST_TO_ADDR
69431: GO 69408
69433: POP
69434: POP
// end ;
69435: LD_VAR 0 3
69439: RET
// export function ComExit ( unit ) ; var tmp ; begin
69440: LD_INT 0
69442: PPUSH
69443: PPUSH
// if not IsInUnit ( unit ) then
69444: LD_VAR 0 1
69448: PPUSH
69449: CALL_OW 310
69453: NOT
69454: IFFALSE 69458
// exit ;
69456: GO 69518
// tmp := IsInUnit ( unit ) ;
69458: LD_ADDR_VAR 0 3
69462: PUSH
69463: LD_VAR 0 1
69467: PPUSH
69468: CALL_OW 310
69472: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69473: LD_VAR 0 3
69477: PPUSH
69478: CALL_OW 247
69482: PUSH
69483: LD_INT 2
69485: EQUAL
69486: IFFALSE 69499
// ComExitVehicle ( unit ) else
69488: LD_VAR 0 1
69492: PPUSH
69493: CALL_OW 121
69497: GO 69508
// ComExitBuilding ( unit ) ;
69499: LD_VAR 0 1
69503: PPUSH
69504: CALL_OW 122
// result := tmp ;
69508: LD_ADDR_VAR 0 2
69512: PUSH
69513: LD_VAR 0 3
69517: ST_TO_ADDR
// end ;
69518: LD_VAR 0 2
69522: RET
// export function ComExitAll ( units ) ; var i ; begin
69523: LD_INT 0
69525: PPUSH
69526: PPUSH
// if not units then
69527: LD_VAR 0 1
69531: NOT
69532: IFFALSE 69536
// exit ;
69534: GO 69562
// for i in units do
69536: LD_ADDR_VAR 0 3
69540: PUSH
69541: LD_VAR 0 1
69545: PUSH
69546: FOR_IN
69547: IFFALSE 69560
// ComExit ( i ) ;
69549: LD_VAR 0 3
69553: PPUSH
69554: CALL 69440 0 1
69558: GO 69546
69560: POP
69561: POP
// end ;
69562: LD_VAR 0 2
69566: RET
// export function ResetHc ; begin
69567: LD_INT 0
69569: PPUSH
// InitHc ;
69570: CALL_OW 19
// hc_importance := 0 ;
69574: LD_ADDR_OWVAR 32
69578: PUSH
69579: LD_INT 0
69581: ST_TO_ADDR
// end ;
69582: LD_VAR 0 1
69586: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69587: LD_INT 0
69589: PPUSH
69590: PPUSH
69591: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69592: LD_ADDR_VAR 0 6
69596: PUSH
69597: LD_VAR 0 1
69601: PUSH
69602: LD_VAR 0 3
69606: PLUS
69607: PUSH
69608: LD_INT 2
69610: DIV
69611: ST_TO_ADDR
// if _x < 0 then
69612: LD_VAR 0 6
69616: PUSH
69617: LD_INT 0
69619: LESS
69620: IFFALSE 69637
// _x := _x * - 1 ;
69622: LD_ADDR_VAR 0 6
69626: PUSH
69627: LD_VAR 0 6
69631: PUSH
69632: LD_INT 1
69634: NEG
69635: MUL
69636: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69637: LD_ADDR_VAR 0 7
69641: PUSH
69642: LD_VAR 0 2
69646: PUSH
69647: LD_VAR 0 4
69651: PLUS
69652: PUSH
69653: LD_INT 2
69655: DIV
69656: ST_TO_ADDR
// if _y < 0 then
69657: LD_VAR 0 7
69661: PUSH
69662: LD_INT 0
69664: LESS
69665: IFFALSE 69682
// _y := _y * - 1 ;
69667: LD_ADDR_VAR 0 7
69671: PUSH
69672: LD_VAR 0 7
69676: PUSH
69677: LD_INT 1
69679: NEG
69680: MUL
69681: ST_TO_ADDR
// result := [ _x , _y ] ;
69682: LD_ADDR_VAR 0 5
69686: PUSH
69687: LD_VAR 0 6
69691: PUSH
69692: LD_VAR 0 7
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: ST_TO_ADDR
// end ;
69701: LD_VAR 0 5
69705: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69706: LD_INT 0
69708: PPUSH
69709: PPUSH
69710: PPUSH
69711: PPUSH
// task := GetTaskList ( unit ) ;
69712: LD_ADDR_VAR 0 7
69716: PUSH
69717: LD_VAR 0 1
69721: PPUSH
69722: CALL_OW 437
69726: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69727: LD_VAR 0 7
69731: NOT
69732: PUSH
69733: LD_VAR 0 1
69737: PPUSH
69738: LD_VAR 0 2
69742: PPUSH
69743: CALL_OW 308
69747: NOT
69748: AND
69749: IFFALSE 69753
// exit ;
69751: GO 69871
// if IsInArea ( unit , area ) then
69753: LD_VAR 0 1
69757: PPUSH
69758: LD_VAR 0 2
69762: PPUSH
69763: CALL_OW 308
69767: IFFALSE 69785
// begin ComMoveToArea ( unit , goAway ) ;
69769: LD_VAR 0 1
69773: PPUSH
69774: LD_VAR 0 3
69778: PPUSH
69779: CALL_OW 113
// exit ;
69783: GO 69871
// end ; if task [ 1 ] [ 1 ] <> M then
69785: LD_VAR 0 7
69789: PUSH
69790: LD_INT 1
69792: ARRAY
69793: PUSH
69794: LD_INT 1
69796: ARRAY
69797: PUSH
69798: LD_STRING M
69800: NONEQUAL
69801: IFFALSE 69805
// exit ;
69803: GO 69871
// x := task [ 1 ] [ 2 ] ;
69805: LD_ADDR_VAR 0 5
69809: PUSH
69810: LD_VAR 0 7
69814: PUSH
69815: LD_INT 1
69817: ARRAY
69818: PUSH
69819: LD_INT 2
69821: ARRAY
69822: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69823: LD_ADDR_VAR 0 6
69827: PUSH
69828: LD_VAR 0 7
69832: PUSH
69833: LD_INT 1
69835: ARRAY
69836: PUSH
69837: LD_INT 3
69839: ARRAY
69840: ST_TO_ADDR
// if InArea ( x , y , area ) then
69841: LD_VAR 0 5
69845: PPUSH
69846: LD_VAR 0 6
69850: PPUSH
69851: LD_VAR 0 2
69855: PPUSH
69856: CALL_OW 309
69860: IFFALSE 69871
// ComStop ( unit ) ;
69862: LD_VAR 0 1
69866: PPUSH
69867: CALL_OW 141
// end ;
69871: LD_VAR 0 4
69875: RET
// export function Abs ( value ) ; begin
69876: LD_INT 0
69878: PPUSH
// result := value ;
69879: LD_ADDR_VAR 0 2
69883: PUSH
69884: LD_VAR 0 1
69888: ST_TO_ADDR
// if value < 0 then
69889: LD_VAR 0 1
69893: PUSH
69894: LD_INT 0
69896: LESS
69897: IFFALSE 69914
// result := value * - 1 ;
69899: LD_ADDR_VAR 0 2
69903: PUSH
69904: LD_VAR 0 1
69908: PUSH
69909: LD_INT 1
69911: NEG
69912: MUL
69913: ST_TO_ADDR
// end ;
69914: LD_VAR 0 2
69918: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69919: LD_INT 0
69921: PPUSH
69922: PPUSH
69923: PPUSH
69924: PPUSH
69925: PPUSH
69926: PPUSH
69927: PPUSH
69928: PPUSH
// if not unit or not building then
69929: LD_VAR 0 1
69933: NOT
69934: PUSH
69935: LD_VAR 0 2
69939: NOT
69940: OR
69941: IFFALSE 69945
// exit ;
69943: GO 70171
// x := GetX ( building ) ;
69945: LD_ADDR_VAR 0 4
69949: PUSH
69950: LD_VAR 0 2
69954: PPUSH
69955: CALL_OW 250
69959: ST_TO_ADDR
// y := GetY ( building ) ;
69960: LD_ADDR_VAR 0 6
69964: PUSH
69965: LD_VAR 0 2
69969: PPUSH
69970: CALL_OW 251
69974: ST_TO_ADDR
// d := GetDir ( building ) ;
69975: LD_ADDR_VAR 0 8
69979: PUSH
69980: LD_VAR 0 2
69984: PPUSH
69985: CALL_OW 254
69989: ST_TO_ADDR
// r := 4 ;
69990: LD_ADDR_VAR 0 9
69994: PUSH
69995: LD_INT 4
69997: ST_TO_ADDR
// for i := 1 to 5 do
69998: LD_ADDR_VAR 0 10
70002: PUSH
70003: DOUBLE
70004: LD_INT 1
70006: DEC
70007: ST_TO_ADDR
70008: LD_INT 5
70010: PUSH
70011: FOR_TO
70012: IFFALSE 70169
// begin _x := ShiftX ( x , d , r + i ) ;
70014: LD_ADDR_VAR 0 5
70018: PUSH
70019: LD_VAR 0 4
70023: PPUSH
70024: LD_VAR 0 8
70028: PPUSH
70029: LD_VAR 0 9
70033: PUSH
70034: LD_VAR 0 10
70038: PLUS
70039: PPUSH
70040: CALL_OW 272
70044: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70045: LD_ADDR_VAR 0 7
70049: PUSH
70050: LD_VAR 0 6
70054: PPUSH
70055: LD_VAR 0 8
70059: PPUSH
70060: LD_VAR 0 9
70064: PUSH
70065: LD_VAR 0 10
70069: PLUS
70070: PPUSH
70071: CALL_OW 273
70075: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70076: LD_VAR 0 5
70080: PPUSH
70081: LD_VAR 0 7
70085: PPUSH
70086: CALL_OW 488
70090: PUSH
70091: LD_VAR 0 5
70095: PPUSH
70096: LD_VAR 0 7
70100: PPUSH
70101: CALL_OW 428
70105: PPUSH
70106: CALL_OW 247
70110: PUSH
70111: LD_INT 3
70113: PUSH
70114: LD_INT 2
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: IN
70121: NOT
70122: AND
70123: IFFALSE 70167
// begin ComMoveXY ( unit , _x , _y ) ;
70125: LD_VAR 0 1
70129: PPUSH
70130: LD_VAR 0 5
70134: PPUSH
70135: LD_VAR 0 7
70139: PPUSH
70140: CALL_OW 111
// result := [ _x , _y ] ;
70144: LD_ADDR_VAR 0 3
70148: PUSH
70149: LD_VAR 0 5
70153: PUSH
70154: LD_VAR 0 7
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: ST_TO_ADDR
// exit ;
70163: POP
70164: POP
70165: GO 70171
// end ; end ;
70167: GO 70011
70169: POP
70170: POP
// end ;
70171: LD_VAR 0 3
70175: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70176: LD_INT 0
70178: PPUSH
70179: PPUSH
70180: PPUSH
// result := 0 ;
70181: LD_ADDR_VAR 0 3
70185: PUSH
70186: LD_INT 0
70188: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70189: LD_VAR 0 1
70193: PUSH
70194: LD_INT 0
70196: LESS
70197: PUSH
70198: LD_VAR 0 1
70202: PUSH
70203: LD_INT 8
70205: GREATER
70206: OR
70207: PUSH
70208: LD_VAR 0 2
70212: PUSH
70213: LD_INT 0
70215: LESS
70216: OR
70217: PUSH
70218: LD_VAR 0 2
70222: PUSH
70223: LD_INT 8
70225: GREATER
70226: OR
70227: IFFALSE 70231
// exit ;
70229: GO 70306
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70231: LD_ADDR_VAR 0 4
70235: PUSH
70236: LD_INT 22
70238: PUSH
70239: LD_VAR 0 2
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PPUSH
70248: CALL_OW 69
70252: PUSH
70253: FOR_IN
70254: IFFALSE 70304
// begin un := UnitShoot ( i ) ;
70256: LD_ADDR_VAR 0 5
70260: PUSH
70261: LD_VAR 0 4
70265: PPUSH
70266: CALL_OW 504
70270: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70271: LD_VAR 0 5
70275: PPUSH
70276: CALL_OW 255
70280: PUSH
70281: LD_VAR 0 1
70285: EQUAL
70286: IFFALSE 70302
// begin result := un ;
70288: LD_ADDR_VAR 0 3
70292: PUSH
70293: LD_VAR 0 5
70297: ST_TO_ADDR
// exit ;
70298: POP
70299: POP
70300: GO 70306
// end ; end ;
70302: GO 70253
70304: POP
70305: POP
// end ;
70306: LD_VAR 0 3
70310: RET
// export function GetCargoBay ( units ) ; begin
70311: LD_INT 0
70313: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70314: LD_ADDR_VAR 0 2
70318: PUSH
70319: LD_VAR 0 1
70323: PPUSH
70324: LD_INT 2
70326: PUSH
70327: LD_INT 34
70329: PUSH
70330: LD_INT 12
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 34
70339: PUSH
70340: LD_INT 51
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 34
70349: PUSH
70350: LD_INT 32
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 34
70359: PUSH
70360: LD_INT 89
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: PPUSH
70374: CALL_OW 72
70378: ST_TO_ADDR
// end ;
70379: LD_VAR 0 2
70383: RET
// export function Negate ( value ) ; begin
70384: LD_INT 0
70386: PPUSH
// result := not value ;
70387: LD_ADDR_VAR 0 2
70391: PUSH
70392: LD_VAR 0 1
70396: NOT
70397: ST_TO_ADDR
// end ;
70398: LD_VAR 0 2
70402: RET
// export function Inc ( value ) ; begin
70403: LD_INT 0
70405: PPUSH
// result := value + 1 ;
70406: LD_ADDR_VAR 0 2
70410: PUSH
70411: LD_VAR 0 1
70415: PUSH
70416: LD_INT 1
70418: PLUS
70419: ST_TO_ADDR
// end ;
70420: LD_VAR 0 2
70424: RET
// export function Dec ( value ) ; begin
70425: LD_INT 0
70427: PPUSH
// result := value - 1 ;
70428: LD_ADDR_VAR 0 2
70432: PUSH
70433: LD_VAR 0 1
70437: PUSH
70438: LD_INT 1
70440: MINUS
70441: ST_TO_ADDR
// end ;
70442: LD_VAR 0 2
70446: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70447: LD_INT 0
70449: PPUSH
70450: PPUSH
70451: PPUSH
70452: PPUSH
70453: PPUSH
70454: PPUSH
70455: PPUSH
70456: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70457: LD_VAR 0 1
70461: PPUSH
70462: LD_VAR 0 2
70466: PPUSH
70467: CALL_OW 488
70471: NOT
70472: PUSH
70473: LD_VAR 0 3
70477: PPUSH
70478: LD_VAR 0 4
70482: PPUSH
70483: CALL_OW 488
70487: NOT
70488: OR
70489: IFFALSE 70502
// begin result := - 1 ;
70491: LD_ADDR_VAR 0 5
70495: PUSH
70496: LD_INT 1
70498: NEG
70499: ST_TO_ADDR
// exit ;
70500: GO 70737
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70502: LD_ADDR_VAR 0 12
70506: PUSH
70507: LD_VAR 0 1
70511: PPUSH
70512: LD_VAR 0 2
70516: PPUSH
70517: LD_VAR 0 3
70521: PPUSH
70522: LD_VAR 0 4
70526: PPUSH
70527: CALL 69587 0 4
70531: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70532: LD_ADDR_VAR 0 11
70536: PUSH
70537: LD_VAR 0 1
70541: PPUSH
70542: LD_VAR 0 2
70546: PPUSH
70547: LD_VAR 0 12
70551: PUSH
70552: LD_INT 1
70554: ARRAY
70555: PPUSH
70556: LD_VAR 0 12
70560: PUSH
70561: LD_INT 2
70563: ARRAY
70564: PPUSH
70565: CALL_OW 298
70569: ST_TO_ADDR
// distance := 9999 ;
70570: LD_ADDR_VAR 0 10
70574: PUSH
70575: LD_INT 9999
70577: ST_TO_ADDR
// for i := 0 to 5 do
70578: LD_ADDR_VAR 0 6
70582: PUSH
70583: DOUBLE
70584: LD_INT 0
70586: DEC
70587: ST_TO_ADDR
70588: LD_INT 5
70590: PUSH
70591: FOR_TO
70592: IFFALSE 70735
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70594: LD_ADDR_VAR 0 7
70598: PUSH
70599: LD_VAR 0 1
70603: PPUSH
70604: LD_VAR 0 6
70608: PPUSH
70609: LD_VAR 0 11
70613: PPUSH
70614: CALL_OW 272
70618: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70619: LD_ADDR_VAR 0 8
70623: PUSH
70624: LD_VAR 0 2
70628: PPUSH
70629: LD_VAR 0 6
70633: PPUSH
70634: LD_VAR 0 11
70638: PPUSH
70639: CALL_OW 273
70643: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70644: LD_VAR 0 7
70648: PPUSH
70649: LD_VAR 0 8
70653: PPUSH
70654: CALL_OW 488
70658: NOT
70659: IFFALSE 70663
// continue ;
70661: GO 70591
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70663: LD_ADDR_VAR 0 9
70667: PUSH
70668: LD_VAR 0 12
70672: PUSH
70673: LD_INT 1
70675: ARRAY
70676: PPUSH
70677: LD_VAR 0 12
70681: PUSH
70682: LD_INT 2
70684: ARRAY
70685: PPUSH
70686: LD_VAR 0 7
70690: PPUSH
70691: LD_VAR 0 8
70695: PPUSH
70696: CALL_OW 298
70700: ST_TO_ADDR
// if tmp < distance then
70701: LD_VAR 0 9
70705: PUSH
70706: LD_VAR 0 10
70710: LESS
70711: IFFALSE 70733
// begin result := i ;
70713: LD_ADDR_VAR 0 5
70717: PUSH
70718: LD_VAR 0 6
70722: ST_TO_ADDR
// distance := tmp ;
70723: LD_ADDR_VAR 0 10
70727: PUSH
70728: LD_VAR 0 9
70732: ST_TO_ADDR
// end ; end ;
70733: GO 70591
70735: POP
70736: POP
// end ;
70737: LD_VAR 0 5
70741: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70742: LD_INT 0
70744: PPUSH
70745: PPUSH
// if not driver or not IsInUnit ( driver ) then
70746: LD_VAR 0 1
70750: NOT
70751: PUSH
70752: LD_VAR 0 1
70756: PPUSH
70757: CALL_OW 310
70761: NOT
70762: OR
70763: IFFALSE 70767
// exit ;
70765: GO 70857
// vehicle := IsInUnit ( driver ) ;
70767: LD_ADDR_VAR 0 3
70771: PUSH
70772: LD_VAR 0 1
70776: PPUSH
70777: CALL_OW 310
70781: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70782: LD_VAR 0 1
70786: PPUSH
70787: LD_STRING \
70789: PUSH
70790: LD_INT 0
70792: PUSH
70793: LD_INT 0
70795: PUSH
70796: LD_INT 0
70798: PUSH
70799: LD_INT 0
70801: PUSH
70802: LD_INT 0
70804: PUSH
70805: LD_INT 0
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: PUSH
70817: LD_STRING E
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: LD_INT 0
70825: PUSH
70826: LD_VAR 0 3
70830: PUSH
70831: LD_INT 0
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: LD_INT 0
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PPUSH
70853: CALL_OW 446
// end ;
70857: LD_VAR 0 2
70861: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70862: LD_INT 0
70864: PPUSH
70865: PPUSH
// if not driver or not IsInUnit ( driver ) then
70866: LD_VAR 0 1
70870: NOT
70871: PUSH
70872: LD_VAR 0 1
70876: PPUSH
70877: CALL_OW 310
70881: NOT
70882: OR
70883: IFFALSE 70887
// exit ;
70885: GO 70977
// vehicle := IsInUnit ( driver ) ;
70887: LD_ADDR_VAR 0 3
70891: PUSH
70892: LD_VAR 0 1
70896: PPUSH
70897: CALL_OW 310
70901: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70902: LD_VAR 0 1
70906: PPUSH
70907: LD_STRING \
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: LD_INT 0
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: PUSH
70937: LD_STRING E
70939: PUSH
70940: LD_INT 0
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: LD_VAR 0 3
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PPUSH
70973: CALL_OW 447
// end ;
70977: LD_VAR 0 2
70981: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70982: LD_INT 0
70984: PPUSH
70985: PPUSH
70986: PPUSH
// tmp := [ ] ;
70987: LD_ADDR_VAR 0 5
70991: PUSH
70992: EMPTY
70993: ST_TO_ADDR
// for i in units do
70994: LD_ADDR_VAR 0 4
70998: PUSH
70999: LD_VAR 0 1
71003: PUSH
71004: FOR_IN
71005: IFFALSE 71043
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71007: LD_ADDR_VAR 0 5
71011: PUSH
71012: LD_VAR 0 5
71016: PPUSH
71017: LD_VAR 0 5
71021: PUSH
71022: LD_INT 1
71024: PLUS
71025: PPUSH
71026: LD_VAR 0 4
71030: PPUSH
71031: CALL_OW 256
71035: PPUSH
71036: CALL_OW 2
71040: ST_TO_ADDR
71041: GO 71004
71043: POP
71044: POP
// if not tmp then
71045: LD_VAR 0 5
71049: NOT
71050: IFFALSE 71054
// exit ;
71052: GO 71102
// if asc then
71054: LD_VAR 0 2
71058: IFFALSE 71082
// result := SortListByListAsc ( units , tmp ) else
71060: LD_ADDR_VAR 0 3
71064: PUSH
71065: LD_VAR 0 1
71069: PPUSH
71070: LD_VAR 0 5
71074: PPUSH
71075: CALL_OW 76
71079: ST_TO_ADDR
71080: GO 71102
// result := SortListByListDesc ( units , tmp ) ;
71082: LD_ADDR_VAR 0 3
71086: PUSH
71087: LD_VAR 0 1
71091: PPUSH
71092: LD_VAR 0 5
71096: PPUSH
71097: CALL_OW 77
71101: ST_TO_ADDR
// end ;
71102: LD_VAR 0 3
71106: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71107: LD_INT 0
71109: PPUSH
71110: PPUSH
// task := GetTaskList ( mech ) ;
71111: LD_ADDR_VAR 0 4
71115: PUSH
71116: LD_VAR 0 1
71120: PPUSH
71121: CALL_OW 437
71125: ST_TO_ADDR
// if not task then
71126: LD_VAR 0 4
71130: NOT
71131: IFFALSE 71135
// exit ;
71133: GO 71177
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71135: LD_ADDR_VAR 0 3
71139: PUSH
71140: LD_VAR 0 4
71144: PUSH
71145: LD_INT 1
71147: ARRAY
71148: PUSH
71149: LD_INT 1
71151: ARRAY
71152: PUSH
71153: LD_STRING r
71155: EQUAL
71156: PUSH
71157: LD_VAR 0 4
71161: PUSH
71162: LD_INT 1
71164: ARRAY
71165: PUSH
71166: LD_INT 4
71168: ARRAY
71169: PUSH
71170: LD_VAR 0 2
71174: EQUAL
71175: AND
71176: ST_TO_ADDR
// end ;
71177: LD_VAR 0 3
71181: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71182: LD_INT 0
71184: PPUSH
// SetDir ( unit , d ) ;
71185: LD_VAR 0 1
71189: PPUSH
71190: LD_VAR 0 4
71194: PPUSH
71195: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71199: LD_VAR 0 1
71203: PPUSH
71204: LD_VAR 0 2
71208: PPUSH
71209: LD_VAR 0 3
71213: PPUSH
71214: LD_VAR 0 5
71218: PPUSH
71219: CALL_OW 48
// end ;
71223: LD_VAR 0 6
71227: RET
// export function ToNaturalNumber ( number ) ; begin
71228: LD_INT 0
71230: PPUSH
// result := number div 1 ;
71231: LD_ADDR_VAR 0 2
71235: PUSH
71236: LD_VAR 0 1
71240: PUSH
71241: LD_INT 1
71243: DIV
71244: ST_TO_ADDR
// if number < 0 then
71245: LD_VAR 0 1
71249: PUSH
71250: LD_INT 0
71252: LESS
71253: IFFALSE 71263
// result := 0 ;
71255: LD_ADDR_VAR 0 2
71259: PUSH
71260: LD_INT 0
71262: ST_TO_ADDR
// end ;
71263: LD_VAR 0 2
71267: RET
// export function SortByClass ( units , class ) ; var un ; begin
71268: LD_INT 0
71270: PPUSH
71271: PPUSH
// if not units or not class then
71272: LD_VAR 0 1
71276: NOT
71277: PUSH
71278: LD_VAR 0 2
71282: NOT
71283: OR
71284: IFFALSE 71288
// exit ;
71286: GO 71383
// result := [ ] ;
71288: LD_ADDR_VAR 0 3
71292: PUSH
71293: EMPTY
71294: ST_TO_ADDR
// for un in units do
71295: LD_ADDR_VAR 0 4
71299: PUSH
71300: LD_VAR 0 1
71304: PUSH
71305: FOR_IN
71306: IFFALSE 71381
// if GetClass ( un ) = class then
71308: LD_VAR 0 4
71312: PPUSH
71313: CALL_OW 257
71317: PUSH
71318: LD_VAR 0 2
71322: EQUAL
71323: IFFALSE 71350
// result := Insert ( result , 1 , un ) else
71325: LD_ADDR_VAR 0 3
71329: PUSH
71330: LD_VAR 0 3
71334: PPUSH
71335: LD_INT 1
71337: PPUSH
71338: LD_VAR 0 4
71342: PPUSH
71343: CALL_OW 2
71347: ST_TO_ADDR
71348: GO 71379
// result := Replace ( result , result + 1 , un ) ;
71350: LD_ADDR_VAR 0 3
71354: PUSH
71355: LD_VAR 0 3
71359: PPUSH
71360: LD_VAR 0 3
71364: PUSH
71365: LD_INT 1
71367: PLUS
71368: PPUSH
71369: LD_VAR 0 4
71373: PPUSH
71374: CALL_OW 1
71378: ST_TO_ADDR
71379: GO 71305
71381: POP
71382: POP
// end ;
71383: LD_VAR 0 3
71387: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71388: LD_INT 0
71390: PPUSH
71391: PPUSH
71392: PPUSH
71393: PPUSH
71394: PPUSH
71395: PPUSH
71396: PPUSH
// result := [ ] ;
71397: LD_ADDR_VAR 0 4
71401: PUSH
71402: EMPTY
71403: ST_TO_ADDR
// if x - r < 0 then
71404: LD_VAR 0 1
71408: PUSH
71409: LD_VAR 0 3
71413: MINUS
71414: PUSH
71415: LD_INT 0
71417: LESS
71418: IFFALSE 71430
// min_x := 0 else
71420: LD_ADDR_VAR 0 8
71424: PUSH
71425: LD_INT 0
71427: ST_TO_ADDR
71428: GO 71446
// min_x := x - r ;
71430: LD_ADDR_VAR 0 8
71434: PUSH
71435: LD_VAR 0 1
71439: PUSH
71440: LD_VAR 0 3
71444: MINUS
71445: ST_TO_ADDR
// if y - r < 0 then
71446: LD_VAR 0 2
71450: PUSH
71451: LD_VAR 0 3
71455: MINUS
71456: PUSH
71457: LD_INT 0
71459: LESS
71460: IFFALSE 71472
// min_y := 0 else
71462: LD_ADDR_VAR 0 7
71466: PUSH
71467: LD_INT 0
71469: ST_TO_ADDR
71470: GO 71488
// min_y := y - r ;
71472: LD_ADDR_VAR 0 7
71476: PUSH
71477: LD_VAR 0 2
71481: PUSH
71482: LD_VAR 0 3
71486: MINUS
71487: ST_TO_ADDR
// max_x := x + r ;
71488: LD_ADDR_VAR 0 9
71492: PUSH
71493: LD_VAR 0 1
71497: PUSH
71498: LD_VAR 0 3
71502: PLUS
71503: ST_TO_ADDR
// max_y := y + r ;
71504: LD_ADDR_VAR 0 10
71508: PUSH
71509: LD_VAR 0 2
71513: PUSH
71514: LD_VAR 0 3
71518: PLUS
71519: ST_TO_ADDR
// for _x = min_x to max_x do
71520: LD_ADDR_VAR 0 5
71524: PUSH
71525: DOUBLE
71526: LD_VAR 0 8
71530: DEC
71531: ST_TO_ADDR
71532: LD_VAR 0 9
71536: PUSH
71537: FOR_TO
71538: IFFALSE 71639
// for _y = min_y to max_y do
71540: LD_ADDR_VAR 0 6
71544: PUSH
71545: DOUBLE
71546: LD_VAR 0 7
71550: DEC
71551: ST_TO_ADDR
71552: LD_VAR 0 10
71556: PUSH
71557: FOR_TO
71558: IFFALSE 71635
// begin if not ValidHex ( _x , _y ) then
71560: LD_VAR 0 5
71564: PPUSH
71565: LD_VAR 0 6
71569: PPUSH
71570: CALL_OW 488
71574: NOT
71575: IFFALSE 71579
// continue ;
71577: GO 71557
// if GetResourceTypeXY ( _x , _y ) then
71579: LD_VAR 0 5
71583: PPUSH
71584: LD_VAR 0 6
71588: PPUSH
71589: CALL_OW 283
71593: IFFALSE 71633
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71595: LD_ADDR_VAR 0 4
71599: PUSH
71600: LD_VAR 0 4
71604: PPUSH
71605: LD_VAR 0 4
71609: PUSH
71610: LD_INT 1
71612: PLUS
71613: PPUSH
71614: LD_VAR 0 5
71618: PUSH
71619: LD_VAR 0 6
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PPUSH
71628: CALL_OW 1
71632: ST_TO_ADDR
// end ;
71633: GO 71557
71635: POP
71636: POP
71637: GO 71537
71639: POP
71640: POP
// end ;
71641: LD_VAR 0 4
71645: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71646: LD_INT 0
71648: PPUSH
71649: PPUSH
71650: PPUSH
71651: PPUSH
71652: PPUSH
71653: PPUSH
71654: PPUSH
71655: PPUSH
// if not units then
71656: LD_VAR 0 1
71660: NOT
71661: IFFALSE 71665
// exit ;
71663: GO 72189
// result := UnitFilter ( units , [ f_ok ] ) ;
71665: LD_ADDR_VAR 0 3
71669: PUSH
71670: LD_VAR 0 1
71674: PPUSH
71675: LD_INT 50
71677: PUSH
71678: EMPTY
71679: LIST
71680: PPUSH
71681: CALL_OW 72
71685: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71686: LD_ADDR_VAR 0 8
71690: PUSH
71691: LD_VAR 0 1
71695: PUSH
71696: LD_INT 1
71698: ARRAY
71699: PPUSH
71700: CALL_OW 255
71704: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71705: LD_ADDR_VAR 0 10
71709: PUSH
71710: LD_INT 29
71712: PUSH
71713: LD_INT 91
71715: PUSH
71716: LD_INT 49
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: ST_TO_ADDR
// if not result then
71724: LD_VAR 0 3
71728: NOT
71729: IFFALSE 71733
// exit ;
71731: GO 72189
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71733: LD_ADDR_VAR 0 5
71737: PUSH
71738: LD_INT 81
71740: PUSH
71741: LD_VAR 0 8
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PPUSH
71750: CALL_OW 69
71754: ST_TO_ADDR
// for i in result do
71755: LD_ADDR_VAR 0 4
71759: PUSH
71760: LD_VAR 0 3
71764: PUSH
71765: FOR_IN
71766: IFFALSE 72187
// begin tag := GetTag ( i ) + 1 ;
71768: LD_ADDR_VAR 0 9
71772: PUSH
71773: LD_VAR 0 4
71777: PPUSH
71778: CALL_OW 110
71782: PUSH
71783: LD_INT 1
71785: PLUS
71786: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71787: LD_ADDR_VAR 0 7
71791: PUSH
71792: LD_VAR 0 4
71796: PPUSH
71797: CALL_OW 250
71801: PPUSH
71802: LD_VAR 0 4
71806: PPUSH
71807: CALL_OW 251
71811: PPUSH
71812: LD_INT 6
71814: PPUSH
71815: CALL 71388 0 3
71819: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71820: LD_VAR 0 4
71824: PPUSH
71825: CALL_OW 247
71829: PUSH
71830: LD_INT 2
71832: EQUAL
71833: PUSH
71834: LD_VAR 0 7
71838: AND
71839: PUSH
71840: LD_VAR 0 4
71844: PPUSH
71845: CALL_OW 264
71849: PUSH
71850: LD_VAR 0 10
71854: IN
71855: NOT
71856: AND
71857: IFFALSE 71896
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71859: LD_VAR 0 4
71863: PPUSH
71864: LD_VAR 0 7
71868: PUSH
71869: LD_INT 1
71871: ARRAY
71872: PUSH
71873: LD_INT 1
71875: ARRAY
71876: PPUSH
71877: LD_VAR 0 7
71881: PUSH
71882: LD_INT 1
71884: ARRAY
71885: PUSH
71886: LD_INT 2
71888: ARRAY
71889: PPUSH
71890: CALL_OW 116
71894: GO 72185
// if path > tag then
71896: LD_VAR 0 2
71900: PUSH
71901: LD_VAR 0 9
71905: GREATER
71906: IFFALSE 72114
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71908: LD_ADDR_VAR 0 6
71912: PUSH
71913: LD_VAR 0 5
71917: PPUSH
71918: LD_INT 91
71920: PUSH
71921: LD_VAR 0 4
71925: PUSH
71926: LD_INT 8
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: LIST
71933: PPUSH
71934: CALL_OW 72
71938: ST_TO_ADDR
// if nearEnemy then
71939: LD_VAR 0 6
71943: IFFALSE 72012
// begin if GetWeapon ( i ) = ru_time_lapser then
71945: LD_VAR 0 4
71949: PPUSH
71950: CALL_OW 264
71954: PUSH
71955: LD_INT 49
71957: EQUAL
71958: IFFALSE 71986
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71960: LD_VAR 0 4
71964: PPUSH
71965: LD_VAR 0 6
71969: PPUSH
71970: LD_VAR 0 4
71974: PPUSH
71975: CALL_OW 74
71979: PPUSH
71980: CALL_OW 112
71984: GO 72010
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71986: LD_VAR 0 4
71990: PPUSH
71991: LD_VAR 0 6
71995: PPUSH
71996: LD_VAR 0 4
72000: PPUSH
72001: CALL_OW 74
72005: PPUSH
72006: CALL 73260 0 2
// end else
72010: GO 72112
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72012: LD_VAR 0 4
72016: PPUSH
72017: LD_VAR 0 2
72021: PUSH
72022: LD_VAR 0 9
72026: ARRAY
72027: PUSH
72028: LD_INT 1
72030: ARRAY
72031: PPUSH
72032: LD_VAR 0 2
72036: PUSH
72037: LD_VAR 0 9
72041: ARRAY
72042: PUSH
72043: LD_INT 2
72045: ARRAY
72046: PPUSH
72047: CALL_OW 297
72051: PUSH
72052: LD_INT 6
72054: GREATER
72055: IFFALSE 72098
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72057: LD_VAR 0 4
72061: PPUSH
72062: LD_VAR 0 2
72066: PUSH
72067: LD_VAR 0 9
72071: ARRAY
72072: PUSH
72073: LD_INT 1
72075: ARRAY
72076: PPUSH
72077: LD_VAR 0 2
72081: PUSH
72082: LD_VAR 0 9
72086: ARRAY
72087: PUSH
72088: LD_INT 2
72090: ARRAY
72091: PPUSH
72092: CALL_OW 114
72096: GO 72112
// SetTag ( i , tag ) ;
72098: LD_VAR 0 4
72102: PPUSH
72103: LD_VAR 0 9
72107: PPUSH
72108: CALL_OW 109
// end else
72112: GO 72185
// if enemy then
72114: LD_VAR 0 5
72118: IFFALSE 72185
// begin if GetWeapon ( i ) = ru_time_lapser then
72120: LD_VAR 0 4
72124: PPUSH
72125: CALL_OW 264
72129: PUSH
72130: LD_INT 49
72132: EQUAL
72133: IFFALSE 72161
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72135: LD_VAR 0 4
72139: PPUSH
72140: LD_VAR 0 5
72144: PPUSH
72145: LD_VAR 0 4
72149: PPUSH
72150: CALL_OW 74
72154: PPUSH
72155: CALL_OW 112
72159: GO 72185
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72161: LD_VAR 0 4
72165: PPUSH
72166: LD_VAR 0 5
72170: PPUSH
72171: LD_VAR 0 4
72175: PPUSH
72176: CALL_OW 74
72180: PPUSH
72181: CALL 73260 0 2
// end ; end ;
72185: GO 71765
72187: POP
72188: POP
// end ;
72189: LD_VAR 0 3
72193: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72194: LD_INT 0
72196: PPUSH
72197: PPUSH
72198: PPUSH
// if not unit or IsInUnit ( unit ) then
72199: LD_VAR 0 1
72203: NOT
72204: PUSH
72205: LD_VAR 0 1
72209: PPUSH
72210: CALL_OW 310
72214: OR
72215: IFFALSE 72219
// exit ;
72217: GO 72310
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72219: LD_ADDR_VAR 0 4
72223: PUSH
72224: LD_VAR 0 1
72228: PPUSH
72229: CALL_OW 250
72233: PPUSH
72234: LD_VAR 0 2
72238: PPUSH
72239: LD_INT 1
72241: PPUSH
72242: CALL_OW 272
72246: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72247: LD_ADDR_VAR 0 5
72251: PUSH
72252: LD_VAR 0 1
72256: PPUSH
72257: CALL_OW 251
72261: PPUSH
72262: LD_VAR 0 2
72266: PPUSH
72267: LD_INT 1
72269: PPUSH
72270: CALL_OW 273
72274: ST_TO_ADDR
// if ValidHex ( x , y ) then
72275: LD_VAR 0 4
72279: PPUSH
72280: LD_VAR 0 5
72284: PPUSH
72285: CALL_OW 488
72289: IFFALSE 72310
// ComTurnXY ( unit , x , y ) ;
72291: LD_VAR 0 1
72295: PPUSH
72296: LD_VAR 0 4
72300: PPUSH
72301: LD_VAR 0 5
72305: PPUSH
72306: CALL_OW 118
// end ;
72310: LD_VAR 0 3
72314: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72315: LD_INT 0
72317: PPUSH
72318: PPUSH
// result := false ;
72319: LD_ADDR_VAR 0 3
72323: PUSH
72324: LD_INT 0
72326: ST_TO_ADDR
// if not units then
72327: LD_VAR 0 2
72331: NOT
72332: IFFALSE 72336
// exit ;
72334: GO 72381
// for i in units do
72336: LD_ADDR_VAR 0 4
72340: PUSH
72341: LD_VAR 0 2
72345: PUSH
72346: FOR_IN
72347: IFFALSE 72379
// if See ( side , i ) then
72349: LD_VAR 0 1
72353: PPUSH
72354: LD_VAR 0 4
72358: PPUSH
72359: CALL_OW 292
72363: IFFALSE 72377
// begin result := true ;
72365: LD_ADDR_VAR 0 3
72369: PUSH
72370: LD_INT 1
72372: ST_TO_ADDR
// exit ;
72373: POP
72374: POP
72375: GO 72381
// end ;
72377: GO 72346
72379: POP
72380: POP
// end ;
72381: LD_VAR 0 3
72385: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72386: LD_INT 0
72388: PPUSH
72389: PPUSH
72390: PPUSH
72391: PPUSH
// if not unit or not points then
72392: LD_VAR 0 1
72396: NOT
72397: PUSH
72398: LD_VAR 0 2
72402: NOT
72403: OR
72404: IFFALSE 72408
// exit ;
72406: GO 72498
// dist := 99999 ;
72408: LD_ADDR_VAR 0 5
72412: PUSH
72413: LD_INT 99999
72415: ST_TO_ADDR
// for i in points do
72416: LD_ADDR_VAR 0 4
72420: PUSH
72421: LD_VAR 0 2
72425: PUSH
72426: FOR_IN
72427: IFFALSE 72496
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72429: LD_ADDR_VAR 0 6
72433: PUSH
72434: LD_VAR 0 1
72438: PPUSH
72439: LD_VAR 0 4
72443: PUSH
72444: LD_INT 1
72446: ARRAY
72447: PPUSH
72448: LD_VAR 0 4
72452: PUSH
72453: LD_INT 2
72455: ARRAY
72456: PPUSH
72457: CALL_OW 297
72461: ST_TO_ADDR
// if tmpDist < dist then
72462: LD_VAR 0 6
72466: PUSH
72467: LD_VAR 0 5
72471: LESS
72472: IFFALSE 72494
// begin result := i ;
72474: LD_ADDR_VAR 0 3
72478: PUSH
72479: LD_VAR 0 4
72483: ST_TO_ADDR
// dist := tmpDist ;
72484: LD_ADDR_VAR 0 5
72488: PUSH
72489: LD_VAR 0 6
72493: ST_TO_ADDR
// end ; end ;
72494: GO 72426
72496: POP
72497: POP
// end ;
72498: LD_VAR 0 3
72502: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72503: LD_INT 0
72505: PPUSH
// uc_side := side ;
72506: LD_ADDR_OWVAR 20
72510: PUSH
72511: LD_VAR 0 1
72515: ST_TO_ADDR
// uc_nation := 3 ;
72516: LD_ADDR_OWVAR 21
72520: PUSH
72521: LD_INT 3
72523: ST_TO_ADDR
// vc_chassis := 25 ;
72524: LD_ADDR_OWVAR 37
72528: PUSH
72529: LD_INT 25
72531: ST_TO_ADDR
// vc_engine := engine_siberite ;
72532: LD_ADDR_OWVAR 39
72536: PUSH
72537: LD_INT 3
72539: ST_TO_ADDR
// vc_control := control_computer ;
72540: LD_ADDR_OWVAR 38
72544: PUSH
72545: LD_INT 3
72547: ST_TO_ADDR
// vc_weapon := 59 ;
72548: LD_ADDR_OWVAR 40
72552: PUSH
72553: LD_INT 59
72555: ST_TO_ADDR
// result := CreateVehicle ;
72556: LD_ADDR_VAR 0 5
72560: PUSH
72561: CALL_OW 45
72565: ST_TO_ADDR
// SetDir ( result , d ) ;
72566: LD_VAR 0 5
72570: PPUSH
72571: LD_VAR 0 4
72575: PPUSH
72576: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72580: LD_VAR 0 5
72584: PPUSH
72585: LD_VAR 0 2
72589: PPUSH
72590: LD_VAR 0 3
72594: PPUSH
72595: LD_INT 0
72597: PPUSH
72598: CALL_OW 48
// end ;
72602: LD_VAR 0 5
72606: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72607: LD_INT 0
72609: PPUSH
72610: PPUSH
72611: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72612: LD_ADDR_VAR 0 2
72616: PUSH
72617: LD_INT 0
72619: PUSH
72620: LD_INT 0
72622: PUSH
72623: LD_INT 0
72625: PUSH
72626: LD_INT 0
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72635: LD_VAR 0 1
72639: NOT
72640: PUSH
72641: LD_VAR 0 1
72645: PPUSH
72646: CALL_OW 264
72650: PUSH
72651: LD_INT 12
72653: PUSH
72654: LD_INT 51
72656: PUSH
72657: LD_INT 32
72659: PUSH
72660: LD_INT 89
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: IN
72669: NOT
72670: OR
72671: IFFALSE 72675
// exit ;
72673: GO 72773
// for i := 1 to 3 do
72675: LD_ADDR_VAR 0 3
72679: PUSH
72680: DOUBLE
72681: LD_INT 1
72683: DEC
72684: ST_TO_ADDR
72685: LD_INT 3
72687: PUSH
72688: FOR_TO
72689: IFFALSE 72771
// begin tmp := GetCargo ( cargo , i ) ;
72691: LD_ADDR_VAR 0 4
72695: PUSH
72696: LD_VAR 0 1
72700: PPUSH
72701: LD_VAR 0 3
72705: PPUSH
72706: CALL_OW 289
72710: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72711: LD_ADDR_VAR 0 2
72715: PUSH
72716: LD_VAR 0 2
72720: PPUSH
72721: LD_VAR 0 3
72725: PPUSH
72726: LD_VAR 0 4
72730: PPUSH
72731: CALL_OW 1
72735: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72736: LD_ADDR_VAR 0 2
72740: PUSH
72741: LD_VAR 0 2
72745: PPUSH
72746: LD_INT 4
72748: PPUSH
72749: LD_VAR 0 2
72753: PUSH
72754: LD_INT 4
72756: ARRAY
72757: PUSH
72758: LD_VAR 0 4
72762: PLUS
72763: PPUSH
72764: CALL_OW 1
72768: ST_TO_ADDR
// end ;
72769: GO 72688
72771: POP
72772: POP
// end ;
72773: LD_VAR 0 2
72777: RET
// export function Length ( array ) ; begin
72778: LD_INT 0
72780: PPUSH
// result := array + 0 ;
72781: LD_ADDR_VAR 0 2
72785: PUSH
72786: LD_VAR 0 1
72790: PUSH
72791: LD_INT 0
72793: PLUS
72794: ST_TO_ADDR
// end ;
72795: LD_VAR 0 2
72799: RET
// export function PrepareArray ( array ) ; begin
72800: LD_INT 0
72802: PPUSH
// result := array diff 0 ;
72803: LD_ADDR_VAR 0 2
72807: PUSH
72808: LD_VAR 0 1
72812: PUSH
72813: LD_INT 0
72815: DIFF
72816: ST_TO_ADDR
// if not result [ 1 ] then
72817: LD_VAR 0 2
72821: PUSH
72822: LD_INT 1
72824: ARRAY
72825: NOT
72826: IFFALSE 72846
// result := Delete ( result , 1 ) ;
72828: LD_ADDR_VAR 0 2
72832: PUSH
72833: LD_VAR 0 2
72837: PPUSH
72838: LD_INT 1
72840: PPUSH
72841: CALL_OW 3
72845: ST_TO_ADDR
// end ;
72846: LD_VAR 0 2
72850: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72851: LD_INT 0
72853: PPUSH
72854: PPUSH
72855: PPUSH
72856: PPUSH
// sibRocketRange := 25 ;
72857: LD_ADDR_VAR 0 6
72861: PUSH
72862: LD_INT 25
72864: ST_TO_ADDR
// result := false ;
72865: LD_ADDR_VAR 0 4
72869: PUSH
72870: LD_INT 0
72872: ST_TO_ADDR
// for i := 0 to 5 do
72873: LD_ADDR_VAR 0 5
72877: PUSH
72878: DOUBLE
72879: LD_INT 0
72881: DEC
72882: ST_TO_ADDR
72883: LD_INT 5
72885: PUSH
72886: FOR_TO
72887: IFFALSE 72954
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72889: LD_VAR 0 1
72893: PPUSH
72894: LD_VAR 0 5
72898: PPUSH
72899: LD_VAR 0 6
72903: PPUSH
72904: CALL_OW 272
72908: PPUSH
72909: LD_VAR 0 2
72913: PPUSH
72914: LD_VAR 0 5
72918: PPUSH
72919: LD_VAR 0 6
72923: PPUSH
72924: CALL_OW 273
72928: PPUSH
72929: LD_VAR 0 3
72933: PPUSH
72934: CALL_OW 309
72938: IFFALSE 72952
// begin result := true ;
72940: LD_ADDR_VAR 0 4
72944: PUSH
72945: LD_INT 1
72947: ST_TO_ADDR
// exit ;
72948: POP
72949: POP
72950: GO 72956
// end ;
72952: GO 72886
72954: POP
72955: POP
// end ;
72956: LD_VAR 0 4
72960: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72961: LD_INT 0
72963: PPUSH
72964: PPUSH
72965: PPUSH
// if btype = b_depot then
72966: LD_VAR 0 2
72970: PUSH
72971: LD_INT 0
72973: EQUAL
72974: IFFALSE 72986
// begin result := true ;
72976: LD_ADDR_VAR 0 3
72980: PUSH
72981: LD_INT 1
72983: ST_TO_ADDR
// exit ;
72984: GO 73102
// end ; pom := GetBase ( depot ) ;
72986: LD_ADDR_VAR 0 4
72990: PUSH
72991: LD_VAR 0 1
72995: PPUSH
72996: CALL_OW 274
73000: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73001: LD_ADDR_VAR 0 5
73005: PUSH
73006: LD_VAR 0 2
73010: PPUSH
73011: LD_VAR 0 1
73015: PPUSH
73016: CALL_OW 248
73020: PPUSH
73021: CALL_OW 450
73025: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73026: LD_ADDR_VAR 0 3
73030: PUSH
73031: LD_VAR 0 4
73035: PPUSH
73036: LD_INT 1
73038: PPUSH
73039: CALL_OW 275
73043: PUSH
73044: LD_VAR 0 5
73048: PUSH
73049: LD_INT 1
73051: ARRAY
73052: GREATEREQUAL
73053: PUSH
73054: LD_VAR 0 4
73058: PPUSH
73059: LD_INT 2
73061: PPUSH
73062: CALL_OW 275
73066: PUSH
73067: LD_VAR 0 5
73071: PUSH
73072: LD_INT 2
73074: ARRAY
73075: GREATEREQUAL
73076: AND
73077: PUSH
73078: LD_VAR 0 4
73082: PPUSH
73083: LD_INT 3
73085: PPUSH
73086: CALL_OW 275
73090: PUSH
73091: LD_VAR 0 5
73095: PUSH
73096: LD_INT 3
73098: ARRAY
73099: GREATEREQUAL
73100: AND
73101: ST_TO_ADDR
// end ;
73102: LD_VAR 0 3
73106: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73107: LD_INT 0
73109: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73110: LD_VAR 0 1
73114: PPUSH
73115: LD_VAR 0 2
73119: PPUSH
73120: LD_INT 0
73122: PPUSH
73123: LD_INT 0
73125: PPUSH
73126: LD_INT 1
73128: PPUSH
73129: LD_INT 0
73131: PPUSH
73132: CALL_OW 587
// end ;
73136: LD_VAR 0 3
73140: RET
// export function CenterOnNow ( unit ) ; begin
73141: LD_INT 0
73143: PPUSH
// result := IsInUnit ( unit ) ;
73144: LD_ADDR_VAR 0 2
73148: PUSH
73149: LD_VAR 0 1
73153: PPUSH
73154: CALL_OW 310
73158: ST_TO_ADDR
// if not result then
73159: LD_VAR 0 2
73163: NOT
73164: IFFALSE 73176
// result := unit ;
73166: LD_ADDR_VAR 0 2
73170: PUSH
73171: LD_VAR 0 1
73175: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73176: LD_VAR 0 1
73180: PPUSH
73181: CALL_OW 87
// end ;
73185: LD_VAR 0 2
73189: RET
// export function ComMoveHex ( unit , hex ) ; begin
73190: LD_INT 0
73192: PPUSH
// if not hex then
73193: LD_VAR 0 2
73197: NOT
73198: IFFALSE 73202
// exit ;
73200: GO 73255
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73202: LD_VAR 0 2
73206: PUSH
73207: LD_INT 1
73209: ARRAY
73210: PPUSH
73211: LD_VAR 0 2
73215: PUSH
73216: LD_INT 2
73218: ARRAY
73219: PPUSH
73220: CALL_OW 428
73224: IFFALSE 73228
// exit ;
73226: GO 73255
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73228: LD_VAR 0 1
73232: PPUSH
73233: LD_VAR 0 2
73237: PUSH
73238: LD_INT 1
73240: ARRAY
73241: PPUSH
73242: LD_VAR 0 2
73246: PUSH
73247: LD_INT 2
73249: ARRAY
73250: PPUSH
73251: CALL_OW 111
// end ;
73255: LD_VAR 0 3
73259: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73260: LD_INT 0
73262: PPUSH
73263: PPUSH
73264: PPUSH
// if not unit or not enemy then
73265: LD_VAR 0 1
73269: NOT
73270: PUSH
73271: LD_VAR 0 2
73275: NOT
73276: OR
73277: IFFALSE 73281
// exit ;
73279: GO 73405
// x := GetX ( enemy ) ;
73281: LD_ADDR_VAR 0 4
73285: PUSH
73286: LD_VAR 0 2
73290: PPUSH
73291: CALL_OW 250
73295: ST_TO_ADDR
// y := GetY ( enemy ) ;
73296: LD_ADDR_VAR 0 5
73300: PUSH
73301: LD_VAR 0 2
73305: PPUSH
73306: CALL_OW 251
73310: ST_TO_ADDR
// if ValidHex ( x , y ) then
73311: LD_VAR 0 4
73315: PPUSH
73316: LD_VAR 0 5
73320: PPUSH
73321: CALL_OW 488
73325: IFFALSE 73405
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73327: LD_VAR 0 2
73331: PPUSH
73332: CALL_OW 247
73336: PUSH
73337: LD_INT 3
73339: PUSH
73340: LD_INT 2
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: IN
73347: PUSH
73348: LD_VAR 0 1
73352: PPUSH
73353: CALL_OW 255
73357: PPUSH
73358: LD_VAR 0 2
73362: PPUSH
73363: CALL_OW 292
73367: OR
73368: IFFALSE 73386
// ComAttackUnit ( unit , enemy ) else
73370: LD_VAR 0 1
73374: PPUSH
73375: LD_VAR 0 2
73379: PPUSH
73380: CALL_OW 115
73384: GO 73405
// ComAgressiveMove ( unit , x , y ) ;
73386: LD_VAR 0 1
73390: PPUSH
73391: LD_VAR 0 4
73395: PPUSH
73396: LD_VAR 0 5
73400: PPUSH
73401: CALL_OW 114
// end ;
73405: LD_VAR 0 3
73409: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73410: LD_INT 0
73412: PPUSH
73413: PPUSH
73414: PPUSH
// list := AreaToList ( area , 0 ) ;
73415: LD_ADDR_VAR 0 5
73419: PUSH
73420: LD_VAR 0 1
73424: PPUSH
73425: LD_INT 0
73427: PPUSH
73428: CALL_OW 517
73432: ST_TO_ADDR
// if not list then
73433: LD_VAR 0 5
73437: NOT
73438: IFFALSE 73442
// exit ;
73440: GO 73572
// if all then
73442: LD_VAR 0 2
73446: IFFALSE 73534
// begin for i := 1 to list [ 1 ] do
73448: LD_ADDR_VAR 0 4
73452: PUSH
73453: DOUBLE
73454: LD_INT 1
73456: DEC
73457: ST_TO_ADDR
73458: LD_VAR 0 5
73462: PUSH
73463: LD_INT 1
73465: ARRAY
73466: PUSH
73467: FOR_TO
73468: IFFALSE 73530
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73470: LD_ADDR_VAR 0 3
73474: PUSH
73475: LD_VAR 0 3
73479: PPUSH
73480: LD_VAR 0 3
73484: PUSH
73485: LD_INT 1
73487: PLUS
73488: PPUSH
73489: LD_VAR 0 5
73493: PUSH
73494: LD_INT 1
73496: ARRAY
73497: PUSH
73498: LD_VAR 0 4
73502: ARRAY
73503: PUSH
73504: LD_VAR 0 5
73508: PUSH
73509: LD_INT 2
73511: ARRAY
73512: PUSH
73513: LD_VAR 0 4
73517: ARRAY
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PPUSH
73523: CALL_OW 1
73527: ST_TO_ADDR
73528: GO 73467
73530: POP
73531: POP
// exit ;
73532: GO 73572
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73534: LD_ADDR_VAR 0 3
73538: PUSH
73539: LD_VAR 0 5
73543: PUSH
73544: LD_INT 1
73546: ARRAY
73547: PUSH
73548: LD_INT 1
73550: ARRAY
73551: PUSH
73552: LD_VAR 0 5
73556: PUSH
73557: LD_INT 2
73559: ARRAY
73560: PUSH
73561: LD_INT 1
73563: ARRAY
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: EMPTY
73570: LIST
73571: ST_TO_ADDR
// end ;
73572: LD_VAR 0 3
73576: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73577: LD_INT 0
73579: PPUSH
73580: PPUSH
// list := AreaToList ( area , 0 ) ;
73581: LD_ADDR_VAR 0 4
73585: PUSH
73586: LD_VAR 0 1
73590: PPUSH
73591: LD_INT 0
73593: PPUSH
73594: CALL_OW 517
73598: ST_TO_ADDR
// if not list then
73599: LD_VAR 0 4
73603: NOT
73604: IFFALSE 73608
// exit ;
73606: GO 73649
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73608: LD_ADDR_VAR 0 3
73612: PUSH
73613: LD_VAR 0 4
73617: PUSH
73618: LD_INT 1
73620: ARRAY
73621: PUSH
73622: LD_INT 1
73624: ARRAY
73625: PUSH
73626: LD_VAR 0 4
73630: PUSH
73631: LD_INT 2
73633: ARRAY
73634: PUSH
73635: LD_INT 1
73637: ARRAY
73638: PUSH
73639: LD_VAR 0 2
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: LIST
73648: ST_TO_ADDR
// end ;
73649: LD_VAR 0 3
73653: RET
// export function First ( array ) ; begin
73654: LD_INT 0
73656: PPUSH
// if not array then
73657: LD_VAR 0 1
73661: NOT
73662: IFFALSE 73666
// exit ;
73664: GO 73680
// result := array [ 1 ] ;
73666: LD_ADDR_VAR 0 2
73670: PUSH
73671: LD_VAR 0 1
73675: PUSH
73676: LD_INT 1
73678: ARRAY
73679: ST_TO_ADDR
// end ;
73680: LD_VAR 0 2
73684: RET
// export function Last ( array ) ; begin
73685: LD_INT 0
73687: PPUSH
// if not array then
73688: LD_VAR 0 1
73692: NOT
73693: IFFALSE 73697
// exit ;
73695: GO 73713
// result := array [ array ] ;
73697: LD_ADDR_VAR 0 2
73701: PUSH
73702: LD_VAR 0 1
73706: PUSH
73707: LD_VAR 0 1
73711: ARRAY
73712: ST_TO_ADDR
// end ;
73713: LD_VAR 0 2
73717: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73718: LD_INT 0
73720: PPUSH
73721: PPUSH
// result := [ ] ;
73722: LD_ADDR_VAR 0 5
73726: PUSH
73727: EMPTY
73728: ST_TO_ADDR
// if not array then
73729: LD_VAR 0 1
73733: NOT
73734: IFFALSE 73738
// exit ;
73736: GO 73850
// for i := 1 to array do
73738: LD_ADDR_VAR 0 6
73742: PUSH
73743: DOUBLE
73744: LD_INT 1
73746: DEC
73747: ST_TO_ADDR
73748: LD_VAR 0 1
73752: PUSH
73753: FOR_TO
73754: IFFALSE 73848
// if array [ i ] [ index ] = value then
73756: LD_VAR 0 1
73760: PUSH
73761: LD_VAR 0 6
73765: ARRAY
73766: PUSH
73767: LD_VAR 0 2
73771: ARRAY
73772: PUSH
73773: LD_VAR 0 3
73777: EQUAL
73778: IFFALSE 73846
// begin if indexColumn then
73780: LD_VAR 0 4
73784: IFFALSE 73820
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73786: LD_ADDR_VAR 0 5
73790: PUSH
73791: LD_VAR 0 5
73795: PPUSH
73796: LD_VAR 0 1
73800: PUSH
73801: LD_VAR 0 6
73805: ARRAY
73806: PUSH
73807: LD_VAR 0 4
73811: ARRAY
73812: PPUSH
73813: CALL 69042 0 2
73817: ST_TO_ADDR
73818: GO 73846
// result := Join ( result , array [ i ] ) ;
73820: LD_ADDR_VAR 0 5
73824: PUSH
73825: LD_VAR 0 5
73829: PPUSH
73830: LD_VAR 0 1
73834: PUSH
73835: LD_VAR 0 6
73839: ARRAY
73840: PPUSH
73841: CALL 69042 0 2
73845: ST_TO_ADDR
// end ;
73846: GO 73753
73848: POP
73849: POP
// end ;
73850: LD_VAR 0 5
73854: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73855: LD_INT 0
73857: PPUSH
// if not vehicles or not parkingPoint then
73858: LD_VAR 0 1
73862: NOT
73863: PUSH
73864: LD_VAR 0 2
73868: NOT
73869: OR
73870: IFFALSE 73874
// exit ;
73872: GO 73972
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73874: LD_ADDR_VAR 0 1
73878: PUSH
73879: LD_VAR 0 1
73883: PPUSH
73884: LD_INT 50
73886: PUSH
73887: EMPTY
73888: LIST
73889: PUSH
73890: LD_INT 3
73892: PUSH
73893: LD_INT 92
73895: PUSH
73896: LD_VAR 0 2
73900: PUSH
73901: LD_INT 1
73903: ARRAY
73904: PUSH
73905: LD_VAR 0 2
73909: PUSH
73910: LD_INT 2
73912: ARRAY
73913: PUSH
73914: LD_INT 8
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PPUSH
73931: CALL_OW 72
73935: ST_TO_ADDR
// if not vehicles then
73936: LD_VAR 0 1
73940: NOT
73941: IFFALSE 73945
// exit ;
73943: GO 73972
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73945: LD_VAR 0 1
73949: PPUSH
73950: LD_VAR 0 2
73954: PUSH
73955: LD_INT 1
73957: ARRAY
73958: PPUSH
73959: LD_VAR 0 2
73963: PUSH
73964: LD_INT 2
73966: ARRAY
73967: PPUSH
73968: CALL_OW 111
// end ;
73972: LD_VAR 0 3
73976: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73977: LD_INT 0
73979: PPUSH
73980: PPUSH
73981: PPUSH
// if not side or not area then
73982: LD_VAR 0 1
73986: NOT
73987: PUSH
73988: LD_VAR 0 2
73992: NOT
73993: OR
73994: IFFALSE 73998
// exit ;
73996: GO 74117
// tmp := AreaToList ( area , 0 ) ;
73998: LD_ADDR_VAR 0 5
74002: PUSH
74003: LD_VAR 0 2
74007: PPUSH
74008: LD_INT 0
74010: PPUSH
74011: CALL_OW 517
74015: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74016: LD_ADDR_VAR 0 4
74020: PUSH
74021: DOUBLE
74022: LD_INT 1
74024: DEC
74025: ST_TO_ADDR
74026: LD_VAR 0 5
74030: PUSH
74031: LD_INT 1
74033: ARRAY
74034: PUSH
74035: FOR_TO
74036: IFFALSE 74115
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74038: LD_VAR 0 5
74042: PUSH
74043: LD_INT 1
74045: ARRAY
74046: PUSH
74047: LD_VAR 0 4
74051: ARRAY
74052: PPUSH
74053: LD_VAR 0 5
74057: PUSH
74058: LD_INT 2
74060: ARRAY
74061: PUSH
74062: LD_VAR 0 4
74066: ARRAY
74067: PPUSH
74068: CALL_OW 351
74072: IFFALSE 74113
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74074: LD_VAR 0 5
74078: PUSH
74079: LD_INT 1
74081: ARRAY
74082: PUSH
74083: LD_VAR 0 4
74087: ARRAY
74088: PPUSH
74089: LD_VAR 0 5
74093: PUSH
74094: LD_INT 2
74096: ARRAY
74097: PUSH
74098: LD_VAR 0 4
74102: ARRAY
74103: PPUSH
74104: LD_VAR 0 1
74108: PPUSH
74109: CALL_OW 244
// end ;
74113: GO 74035
74115: POP
74116: POP
// end ; end_of_file
74117: LD_VAR 0 3
74121: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74122: LD_VAR 0 1
74126: PPUSH
74127: LD_VAR 0 2
74131: PPUSH
74132: LD_VAR 0 3
74136: PPUSH
74137: LD_VAR 0 4
74141: PPUSH
74142: LD_VAR 0 5
74146: PPUSH
74147: LD_VAR 0 6
74151: PPUSH
74152: CALL 10647 0 6
// end ;
74156: PPOPN 6
74158: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74159: LD_INT 0
74161: PPUSH
// begin if not units then
74162: LD_VAR 0 1
74166: NOT
74167: IFFALSE 74171
// exit ;
74169: GO 74171
// end ;
74171: PPOPN 7
74173: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74174: CALL 10534 0 0
// end ;
74178: PPOPN 1
74180: END
