// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1994 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5594 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 33144 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 27723 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 27723 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 27723 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 27723 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 27723 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 27723 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 27723 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 27723 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 27723 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 27723 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// uc_side := 5 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 5
1542: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1543: LD_ADDR_EXP 26
1547: PUSH
1548: LD_STRING Abdul
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: LD_STRING 
1556: PPUSH
1557: CALL 27723 0 3
1561: ST_TO_ADDR
// end ;
1562: LD_VAR 0 1
1566: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1567: LD_STRING 04_1_KaganCaptured
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 30
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PPUSH
1588: CALL_OW 69
1592: NOT
1593: AND
1594: PUSH
1595: LD_INT 124
1597: PPUSH
1598: LD_INT 26
1600: PPUSH
1601: CALL_OW 428
1605: PUSH
1606: LD_INT 0
1608: EQUAL
1609: PUSH
1610: LD_INT 124
1612: PPUSH
1613: LD_INT 26
1615: PPUSH
1616: CALL_OW 428
1620: PPUSH
1621: CALL_OW 255
1625: PUSH
1626: LD_INT 2
1628: EQUAL
1629: XOR
1630: AND
1631: IFFALSE 1991
1633: GO 1635
1635: DISABLE
1636: LD_INT 0
1638: PPUSH
1639: PPUSH
// begin enable ;
1640: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1641: LD_EXP 33
1645: NOT
1646: PUSH
1647: LD_EXP 33
1651: PUSH
1652: LD_INT 4
1654: GREATER
1655: OR
1656: IFFALSE 1666
// cargoCounter := 1 ;
1658: LD_ADDR_EXP 33
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_INT 142
1673: PUSH
1674: LD_INT 15
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 129
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 138
1693: PUSH
1694: LD_INT 9
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 133
1703: PUSH
1704: LD_INT 10
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: ST_TO_ADDR
// uc_side := 5 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 5
1724: ST_TO_ADDR
// uc_nation := 2 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 2
1732: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1733: LD_INT 5
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 32
1750: PPUSH
1751: LD_INT 70
1753: PPUSH
1754: CALL 336 0 7
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 1
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1768: LD_VAR 0 1
1772: PPUSH
1773: LD_INT 3
1775: PPUSH
1776: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1780: LD_VAR 0 1
1784: PPUSH
1785: LD_INT 8
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// if not cargoDriver then
1795: LD_EXP 32
1799: NOT
1800: IFFALSE 1825
// begin PrepareHuman ( false , 1 , 3 ) ;
1802: LD_INT 0
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: CALL_OW 380
// cargoDriver := CreateHuman ;
1815: LD_ADDR_EXP 32
1819: PUSH
1820: CALL_OW 44
1824: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1825: LD_EXP 32
1829: PPUSH
1830: LD_VAR 0 1
1834: PPUSH
1835: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1839: LD_VAR 0 1
1843: PPUSH
1844: LD_INT 2
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1854: LD_VAR 0 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 33
1868: ARRAY
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 33
1883: ARRAY
1884: PUSH
1885: LD_INT 2
1887: ARRAY
1888: PPUSH
1889: CALL_OW 111
// AddComUnload ( veh ) ;
1893: LD_VAR 0 1
1897: PPUSH
1898: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1902: LD_VAR 0 1
1906: PPUSH
1907: LD_INT 133
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 171
// wait ( 0 0$5 ) ;
1917: LD_INT 175
1919: PPUSH
1920: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1924: LD_INT 35
1926: PPUSH
1927: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1931: LD_VAR 0 1
1935: PPUSH
1936: LD_INT 133
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL_OW 307
1946: PUSH
1947: LD_VAR 0 1
1951: PPUSH
1952: LD_INT 8
1954: PPUSH
1955: CALL_OW 308
1959: OR
1960: IFFALSE 1924
// RemoveUnit ( cargoDriver ) ;
1962: LD_EXP 32
1966: PPUSH
1967: CALL_OW 64
// RemoveUnit ( veh ) ;
1971: LD_VAR 0 1
1975: PPUSH
1976: CALL_OW 64
// if tick >= 20 20$00 then
1980: LD_OWVAR 1
1984: PUSH
1985: LD_INT 42000
1987: GREATEREQUAL
1988: IFFALSE 1991
// disable ;
1990: DISABLE
// end ; end_of_file
1991: PPOPN 2
1993: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1994: LD_INT 0
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
2001: PPUSH
2002: PPUSH
2003: PPUSH
2004: PPUSH
// uc_side := 3 ;
2005: LD_ADDR_OWVAR 20
2009: PUSH
2010: LD_INT 3
2012: ST_TO_ADDR
// uc_nation := 3 ;
2013: LD_ADDR_OWVAR 21
2017: PUSH
2018: LD_INT 3
2020: ST_TO_ADDR
// ruForce := [ ] ;
2021: LD_ADDR_EXP 37
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// ruMech := [ ] ;
2028: LD_ADDR_EXP 39
2032: PUSH
2033: EMPTY
2034: ST_TO_ADDR
// ruEng := [ ] ;
2035: LD_ADDR_EXP 38
2039: PUSH
2040: EMPTY
2041: ST_TO_ADDR
// ruSci := [ ] ;
2042: LD_ADDR_EXP 40
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// ruMobile := [ ] ;
2049: LD_ADDR_EXP 41
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2056: LD_ADDR_EXP 34
2060: PUSH
2061: LD_STRING Burlak
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: LD_STRING 
2069: PPUSH
2070: CALL 27723 0 3
2074: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2075: LD_ADDR_EXP 35
2079: PUSH
2080: LD_STRING Gaydar
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: LD_STRING 
2088: PPUSH
2089: CALL 27723 0 3
2093: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2094: LD_ADDR_EXP 36
2098: PUSH
2099: LD_STRING Kuzmov
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_STRING 
2107: PPUSH
2108: CALL 27723 0 3
2112: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2113: LD_EXP 36
2117: PPUSH
2118: LD_INT 200
2120: PPUSH
2121: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2125: LD_INT 200
2127: PPUSH
2128: LD_STRING chuikov
2130: PPUSH
2131: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2135: LD_INT 200
2137: PPUSH
2138: CALL_OW 274
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 800
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 1250
2154: PUSH
2155: LD_INT 1300
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_OWVAR 67
2168: ARRAY
2169: PPUSH
2170: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2174: LD_INT 200
2176: PPUSH
2177: CALL_OW 274
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: LD_INT 160
2187: PPUSH
2188: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2192: LD_INT 225
2194: PPUSH
2195: CALL_OW 274
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 200
2205: PPUSH
2206: CALL_OW 277
// oil := 150 ;
2210: LD_ADDR_VAR 0 9
2214: PUSH
2215: LD_INT 150
2217: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2218: LD_EXP 5
2222: PUSH
2223: LD_INT 94500
2225: PUSH
2226: LD_INT 84000
2228: PUSH
2229: LD_INT 73500
2231: PUSH
2232: LD_INT 67200
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_OWVAR 67
2245: ARRAY
2246: GREATEREQUAL
2247: IFFALSE 2402
// begin oil := 450 ;
2249: LD_ADDR_VAR 0 9
2253: PUSH
2254: LD_INT 450
2256: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2257: LD_ADDR_VAR 0 7
2261: PUSH
2262: LD_INT 123
2264: PUSH
2265: LD_INT 17
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: LD_INT 31
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 152
2282: PUSH
2283: LD_INT 38
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 81
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: LD_INT 31
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 113
2318: PUSH
2319: LD_INT 67
2321: PUSH
2322: LD_INT 4
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// for i in tmp do
2340: LD_ADDR_VAR 0 4
2344: PUSH
2345: LD_VAR 0 7
2349: PUSH
2350: FOR_IN
2351: IFFALSE 2400
// begin bc_type := i [ 4 ] ;
2353: LD_ADDR_OWVAR 42
2357: PUSH
2358: LD_VAR 0 4
2362: PUSH
2363: LD_INT 4
2365: ARRAY
2366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 3
2392: ARRAY
2393: PPUSH
2394: CALL_OW 47
// end ;
2398: GO 2350
2400: POP
2401: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2402: LD_INT 225
2404: PPUSH
2405: CALL_OW 274
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: LD_VAR 0 9
2417: PPUSH
2418: CALL_OW 277
// if Difficulty > 1 then
2422: LD_OWVAR 67
2426: PUSH
2427: LD_INT 1
2429: GREATER
2430: IFFALSE 2525
// begin bc_type := b_bunker ;
2432: LD_ADDR_OWVAR 42
2436: PUSH
2437: LD_INT 32
2439: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2440: LD_ADDR_VAR 0 7
2444: PUSH
2445: LD_INT 121
2447: PUSH
2448: LD_INT 85
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 93
2461: PUSH
2462: LD_INT 72
2464: PUSH
2465: LD_INT 1
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: ST_TO_ADDR
// for i in tmp do
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 7
2486: PUSH
2487: FOR_IN
2488: IFFALSE 2523
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2490: LD_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 4
2503: PUSH
2504: LD_INT 2
2506: ARRAY
2507: PPUSH
2508: LD_VAR 0 4
2512: PUSH
2513: LD_INT 3
2515: ARRAY
2516: PPUSH
2517: CALL_OW 47
2521: GO 2487
2523: POP
2524: POP
// end ; base := GetBase ( ruMainBase ) ;
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: LD_INT 200
2532: PPUSH
2533: CALL_OW 274
2537: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL_OW 417
2552: ST_TO_ADDR
// for b in blist do
2553: LD_ADDR_VAR 0 5
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: FOR_IN
2564: IFFALSE 3015
// begin if b [ 1 ] = b_factory then
2566: LD_VAR 0 5
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PUSH
2575: LD_INT 3
2577: EQUAL
2578: IFFALSE 2729
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2580: LD_ADDR_VAR 0 8
2584: PUSH
2585: LD_VAR 0 5
2589: PUSH
2590: LD_INT 2
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 5
2598: PUSH
2599: LD_INT 3
2601: ARRAY
2602: PPUSH
2603: CALL_OW 428
2607: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 2
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_OWVAR 67
2628: PLUS
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_EXP 10
2638: PUSH
2639: LD_INT 3
2641: GREATER
2642: PUSH
2643: LD_INT 1
2645: PLUS
2646: ARRAY
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2725
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 1
2659: PUSH
2660: LD_OWVAR 67
2664: PLUS
2665: PPUSH
2666: CALL_OW 380
// un := CreateHuman ;
2670: LD_ADDR_VAR 0 6
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2680: LD_ADDR_EXP 39
2684: PUSH
2685: LD_EXP 39
2689: PPUSH
2690: LD_EXP 39
2694: PUSH
2695: LD_INT 1
2697: PLUS
2698: PPUSH
2699: LD_VAR 0 6
2703: PPUSH
2704: CALL_OW 1
2708: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2709: LD_VAR 0 6
2713: PPUSH
2714: LD_VAR 0 8
2718: PPUSH
2719: CALL_OW 52
// end ;
2723: GO 2648
2725: POP
2726: POP
// end else
2727: GO 3013
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2729: LD_VAR 0 5
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PUSH
2738: LD_INT 6
2740: PUSH
2741: LD_INT 7
2743: PUSH
2744: LD_INT 8
2746: PUSH
2747: LD_INT 10
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: IN
2756: IFFALSE 2866
// begin for i := 1 to 2 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 2
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2862
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 4
2779: PPUSH
2780: LD_OWVAR 67
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 6
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2799: LD_ADDR_EXP 40
2803: PUSH
2804: LD_EXP 40
2808: PPUSH
2809: LD_EXP 40
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: PPUSH
2818: LD_VAR 0 6
2822: PPUSH
2823: CALL_OW 1
2827: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 5
2846: PUSH
2847: LD_INT 3
2849: ARRAY
2850: PPUSH
2851: CALL_OW 428
2855: PPUSH
2856: CALL_OW 52
// end ;
2860: GO 2771
2862: POP
2863: POP
// end else
2864: GO 3013
// if b [ 1 ] = b_warehouse then
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: IFFALSE 3013
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 1
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 3011
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: LD_OWVAR 67
2933: PPUSH
2934: CALL_OW 380
// un := CreateHuman ;
2938: LD_ADDR_VAR 0 6
2942: PUSH
2943: CALL_OW 44
2947: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_EXP 38
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: PPUSH
2967: LD_VAR 0 6
2971: PPUSH
2972: CALL_OW 1
2976: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2977: LD_VAR 0 6
2981: PPUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: PPUSH
2991: LD_VAR 0 5
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 428
3004: PPUSH
3005: CALL_OW 52
// end ;
3009: GO 2920
3011: POP
3012: POP
// end ; end ;
3013: GO 2563
3015: POP
3016: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 3
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// for b in blist do
3051: LD_ADDR_VAR 0 5
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3084
// SetBLevel ( b , 3 + Difficulty ) ;
3064: LD_VAR 0 5
3068: PPUSH
3069: LD_INT 3
3071: PUSH
3072: LD_OWVAR 67
3076: PLUS
3077: PPUSH
3078: CALL_OW 241
3082: GO 3061
3084: POP
3085: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 30
3103: PUSH
3104: LD_INT 32
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 69
3119: ST_TO_ADDR
// for b in blist do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3240
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3133: LD_INT 0
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 1
3141: PUSH
3142: LD_OWVAR 67
3146: PLUS
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3162: LD_ADDR_EXP 37
3166: PUSH
3167: LD_EXP 37
3171: PPUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_INT 1
3179: PLUS
3180: PPUSH
3181: LD_VAR 0 6
3185: PPUSH
3186: CALL_OW 1
3190: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3191: LD_VAR 0 6
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3205: LD_VAR 0 5
3209: PPUSH
3210: LD_INT 44
3212: PUSH
3213: LD_INT 43
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_VAR 0 5
3224: PUSH
3225: LD_INT 2
3227: MOD
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: ARRAY
3233: PPUSH
3234: CALL_OW 431
// end ;
3238: GO 3130
3240: POP
3241: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 3
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: ST_TO_ADDR
// for b in blist do
3276: LD_ADDR_VAR 0 5
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3386
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PUSH
3298: LD_OWVAR 67
3302: PLUS
3303: PPUSH
3304: CALL_OW 380
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3318: LD_ADDR_EXP 37
3322: PUSH
3323: LD_EXP 37
3327: PPUSH
3328: LD_EXP 37
3332: PUSH
3333: LD_INT 1
3335: PLUS
3336: PPUSH
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3347: LD_VAR 0 6
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: CALL_OW 254
3361: PUSH
3362: LD_INT 3
3364: PLUS
3365: PPUSH
3366: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 52
// end ;
3384: GO 3286
3386: POP
3387: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 30
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 30
3418: PUSH
3419: LD_INT 5
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// for b in blist do
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_IN
3451: IFFALSE 3547
// begin for i := 1 to 2 do
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3543
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_OWVAR 67
3482: PLUS
3483: PPUSH
3484: CALL_OW 380
// un := CreateHuman ;
3488: LD_ADDR_VAR 0 6
3492: PUSH
3493: CALL_OW 44
3497: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3498: LD_ADDR_EXP 37
3502: PUSH
3503: LD_EXP 37
3507: PPUSH
3508: LD_EXP 37
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: PPUSH
3517: LD_VAR 0 6
3521: PPUSH
3522: CALL_OW 1
3526: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3527: LD_VAR 0 6
3531: PPUSH
3532: LD_VAR 0 5
3536: PPUSH
3537: CALL_OW 52
// end ;
3541: GO 3466
3543: POP
3544: POP
// end ;
3545: GO 3450
3547: POP
3548: POP
// if ibrahimOnRuSide then
3549: LD_EXP 3
3553: IFFALSE 3651
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3555: LD_ADDR_EXP 21
3559: PUSH
3560: LD_STRING IbrahimRu
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: LD_STRING 
3568: PPUSH
3569: CALL 27723 0 3
3573: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3574: LD_EXP 21
3578: PPUSH
3579: LD_INT 121
3581: PPUSH
3582: LD_INT 78
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL_OW 48
// ComHold ( Ibrahim ) ;
3592: LD_EXP 21
3596: PPUSH
3597: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 380
// ruSol := CreateHuman ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: CALL_OW 44
3623: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3624: LD_EXP 42
3628: PPUSH
3629: LD_INT 121
3631: PPUSH
3632: LD_INT 75
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 48
// ComHold ( ruSol ) ;
3642: LD_EXP 42
3646: PPUSH
3647: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 2
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: LD_OWVAR 67
3671: PLUS
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_EXP 10
3681: PUSH
3682: LD_INT 3
3684: GREATER
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: ARRAY
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3761
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3694: LD_VAR 0 8
3698: PPUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 23
3704: PUSH
3705: LD_INT 24
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_VAR 0 4
3717: PUSH
3718: LD_INT 3
3720: MOD
3721: PUSH
3722: LD_INT 1
3724: PLUS
3725: ARRAY
3726: PPUSH
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 43
3735: PUSH
3736: LD_INT 44
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: CALL_OW 12
3753: ARRAY
3754: PPUSH
3755: CALL_OW 185
3759: GO 3691
3761: POP
3762: POP
// end ;
3763: LD_VAR 0 1
3767: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3768: LD_EXP 41
3772: PUSH
3773: LD_EXP 4
3777: NOT
3778: AND
3779: IFFALSE 4266
3781: GO 3783
3783: DISABLE
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// begin enable ;
3791: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3792: LD_ADDR_VAR 0 2
3796: PUSH
3797: LD_EXP 41
3801: PPUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 72
3816: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 81
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 2
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 95
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 95
3857: PUSH
3858: LD_INT 6
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 95
3867: PUSH
3868: LD_INT 7
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PPUSH
3886: CALL_OW 69
3890: ST_TO_ADDR
// for i in filter do
3891: LD_ADDR_VAR 0 1
3895: PUSH
3896: LD_VAR 0 2
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4264
// begin tmp := IsDrivenBy ( i ) ;
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 311
3918: ST_TO_ADDR
// if not tmp then
3919: LD_VAR 0 3
3923: NOT
3924: IFFALSE 3928
// continue ;
3926: GO 3901
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 261
3937: PUSH
3938: LD_INT 90
3940: GREATER
3941: PUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 110
3951: PUSH
3952: LD_INT 2
3954: EQUAL
3955: AND
3956: IFFALSE 3972
// SetTag ( i , 0 ) else
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 109
3970: GO 4015
// if GetTag ( i ) = 2 then
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 110
3981: PUSH
3982: LD_INT 2
3984: EQUAL
3985: IFFALSE 4015
// begin x := rand ( 1 , 2 ) ;
3987: LD_ADDR_VAR 0 5
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 200
4010: PPUSH
4011: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4015: LD_VAR 0 1
4019: PPUSH
4020: CALL_OW 256
4024: PUSH
4025: LD_INT 600
4027: GREATEREQUAL
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 110
4038: NOT
4039: AND
4040: IFFALSE 4066
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 4
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4066: LD_VAR 0 1
4070: PPUSH
4071: CALL_OW 256
4075: PUSH
4076: LD_INT 600
4078: LESS
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 110
4089: NOT
4090: AND
4091: IFFALSE 4120
// begin SetTag ( i , 1 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4105: LD_VAR 0 1
4109: PPUSH
4110: LD_INT 112
4112: PPUSH
4113: LD_INT 119
4115: PPUSH
4116: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 110
4129: PUSH
4130: LD_INT 1
4132: EQUAL
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 112
4141: PPUSH
4142: LD_INT 119
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 9
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 3
4159: AND
4160: IFFALSE 4262
// begin ComExitVehicle ( tmp ) ;
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_VAR 0 1
4180: PPUSH
4181: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4185: LD_INT 35
4187: PPUSH
4188: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4192: LD_VAR 0 1
4196: PPUSH
4197: CALL_OW 256
4201: PUSH
4202: LD_INT 1000
4204: EQUAL
4205: IFFALSE 4185
// ComEnterUnit ( tmp , i ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4221: LD_VAR 0 1
4225: PPUSH
4226: CALL_OW 261
4230: PUSH
4231: LD_INT 50
4233: LESSEQUAL
4234: IFFALSE 4250
// SetTag ( i , 2 ) else
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 109
4248: GO 4262
// SetTag ( i , 0 ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 0
4257: PPUSH
4258: CALL_OW 109
// end ; end ;
4262: GO 3901
4264: POP
4265: POP
// end ;
4266: PPOPN 5
4268: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4269: LD_EXP 4
4273: NOT
4274: PUSH
4275: LD_EXP 38
4279: AND
4280: IFFALSE 4541
4282: GO 4284
4284: DISABLE
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// begin enable ;
4291: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4292: LD_ADDR_VAR 0 2
4296: PUSH
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 22
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 21
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: LD_INT 1000
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 70
4346: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_EXP 38
4356: PPUSH
4357: LD_INT 50
4359: PUSH
4360: EMPTY
4361: LIST
4362: PPUSH
4363: CALL_OW 72
4367: ST_TO_ADDR
// if filter and tmp then
4368: LD_VAR 0 2
4372: PUSH
4373: LD_VAR 0 3
4377: AND
4378: IFFALSE 4470
// begin for i in tmp do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4466
// begin if GetTag ( i ) = tEscape then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 110
4402: PUSH
4403: LD_EXP 17
4407: EQUAL
4408: IFFALSE 4412
// continue ;
4410: GO 4390
// if IsInUnit ( i ) then
4412: LD_VAR 0 1
4416: PPUSH
4417: CALL_OW 310
4421: IFFALSE 4434
// ComExitBuilding ( i ) else
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL_OW 122
4432: GO 4464
// if not HasTask ( i ) then
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 314
4443: NOT
4444: IFFALSE 4464
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 2
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: CALL_OW 130
// end ;
4464: GO 4390
4466: POP
4467: POP
// end else
4468: GO 4541
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 72
4492: IFFALSE 4541
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 54
4509: PUSH
4510: EMPTY
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 72
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// ComEnterUnit ( i , ruMainBase ) ;
4525: LD_VAR 0 1
4529: PPUSH
4530: LD_INT 200
4532: PPUSH
4533: CALL_OW 120
4537: GO 4522
4539: POP
4540: POP
// end ; end ;
4541: PPOPN 4
4543: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4544: LD_EXP 4
4548: NOT
4549: PUSH
4550: LD_EXP 40
4554: AND
4555: IFFALSE 4834
4557: GO 4559
4559: DISABLE
4560: LD_INT 0
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 21
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 24
4600: PUSH
4601: LD_INT 1000
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_EXP 40
4631: PPUSH
4632: LD_INT 50
4634: PUSH
4635: EMPTY
4636: LIST
4637: PPUSH
4638: CALL_OW 72
4642: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4643: LD_ADDR_VAR 0 4
4647: PUSH
4648: LD_INT 118
4650: PPUSH
4651: LD_INT 121
4653: PPUSH
4654: CALL_OW 428
4658: ST_TO_ADDR
// if filter and tmp then
4659: LD_VAR 0 2
4663: PUSH
4664: LD_VAR 0 3
4668: AND
4669: IFFALSE 4761
// begin for i in tmp do
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: LD_VAR 0 3
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4757
// begin if GetTag ( i ) = tEscape then
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 110
4693: PUSH
4694: LD_EXP 17
4698: EQUAL
4699: IFFALSE 4703
// continue ;
4701: GO 4681
// if IsInUnit ( i ) then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 310
4712: IFFALSE 4725
// ComExitBuilding ( i ) else
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 122
4723: GO 4755
// if not HasTask ( i ) then
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 314
4734: NOT
4735: IFFALSE 4755
// ComHeal ( i , filter [ 1 ] ) ;
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_VAR 0 2
4746: PUSH
4747: LD_INT 1
4749: ARRAY
4750: PPUSH
4751: CALL_OW 128
// end ;
4755: GO 4681
4757: POP
4758: POP
// end else
4759: GO 4834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4761: LD_VAR 0 3
4765: PPUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 54
4771: PUSH
4772: EMPTY
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 72
4783: IFFALSE 4834
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4785: LD_ADDR_VAR 0 1
4789: PUSH
4790: LD_VAR 0 3
4794: PPUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 54
4800: PUSH
4801: EMPTY
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PPUSH
4808: CALL_OW 72
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4832
// ComEnterUnit ( i , lab ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 4
4825: PPUSH
4826: CALL_OW 120
4830: GO 4813
4832: POP
4833: POP
// end ; end ; end_of_file
4834: PPOPN 4
4836: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4837: LD_VAR 0 1
4841: PUSH
4842: LD_EXP 18
4846: EQUAL
4847: IFFALSE 4856
// YouLost ( Heike ) ;
4849: LD_STRING Heike
4851: PPUSH
4852: CALL_OW 104
// if un in ruEng then
4856: LD_VAR 0 1
4860: PUSH
4861: LD_EXP 38
4865: IN
4866: IFFALSE 4884
// ruEng := ruEng diff un ;
4868: LD_ADDR_EXP 38
4872: PUSH
4873: LD_EXP 38
4877: PUSH
4878: LD_VAR 0 1
4882: DIFF
4883: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4884: LD_VAR 0 1
4888: PUSH
4889: LD_INT 22
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 21
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 23
4911: PUSH
4912: LD_INT 2
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 69
4928: IN
4929: IFFALSE 4945
// loseCounter := loseCounter + 1 ;
4931: LD_ADDR_EXP 6
4935: PUSH
4936: LD_EXP 6
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// end ;
4945: PPOPN 1
4947: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4948: LD_INT 0
4950: PPUSH
4951: PPUSH
// begin if un in ruMobile then
4952: LD_VAR 0 2
4956: PUSH
4957: LD_EXP 41
4961: IN
4962: IFFALSE 5121
// begin ruMobile := ruMobile diff un ;
4964: LD_ADDR_EXP 41
4968: PUSH
4969: LD_EXP 41
4973: PUSH
4974: LD_VAR 0 2
4978: DIFF
4979: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_VAR 0 2
4989: PPUSH
4990: CALL_OW 264
4994: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4995: LD_ADDR_VAR 0 6
4999: PUSH
5000: LD_INT 110
5002: PPUSH
5003: LD_INT 126
5005: PPUSH
5006: CALL_OW 428
5010: ST_TO_ADDR
// if not driver or not fac then
5011: LD_VAR 0 1
5015: NOT
5016: PUSH
5017: LD_VAR 0 6
5021: NOT
5022: OR
5023: IFFALSE 5027
// exit ;
5025: GO 5121
// AddComMoveXY ( driver , 111 , 121 ) ;
5027: LD_VAR 0 1
5031: PPUSH
5032: LD_INT 111
5034: PPUSH
5035: LD_INT 121
5037: PPUSH
5038: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5042: LD_VAR 0 1
5046: PPUSH
5047: LD_VAR 0 6
5051: PPUSH
5052: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5056: LD_INT 35
5058: PPUSH
5059: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5063: LD_VAR 0 1
5067: PPUSH
5068: CALL_OW 301
5072: PUSH
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 310
5082: OR
5083: IFFALSE 5056
// if IsDead ( driver ) then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 301
5094: IFFALSE 5098
// exit ;
5096: GO 5121
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5098: LD_VAR 0 6
5102: PPUSH
5103: LD_INT 21
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: LD_VAR 0 5
5116: PPUSH
5117: CALL_OW 185
// end ; end ;
5121: PPOPN 6
5123: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 255
5133: PUSH
5134: LD_INT 3
5136: EQUAL
5137: IFFALSE 5183
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5139: LD_ADDR_EXP 41
5143: PUSH
5144: LD_EXP 41
5148: PPUSH
5149: LD_EXP 41
5153: PUSH
5154: LD_INT 1
5156: PLUS
5157: PPUSH
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 1
5167: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_INT 110
5175: PPUSH
5176: LD_INT 117
5178: PPUSH
5179: CALL_OW 171
// end ; end ;
5183: PPOPN 2
5185: END
// on LeaveBuilding ( b , un ) do var barracks ;
5186: LD_INT 0
5188: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 130
5196: PPUSH
5197: LD_INT 17
5199: PPUSH
5200: CALL_OW 428
5204: PUSH
5205: LD_INT 138
5207: PPUSH
5208: LD_INT 22
5210: PPUSH
5211: CALL_OW 428
5215: PUSH
5216: LD_INT 123
5218: PPUSH
5219: LD_INT 17
5221: PPUSH
5222: CALL_OW 428
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: IN
5232: IFFALSE 5256
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5234: LD_VAR 0 2
5238: PPUSH
5239: LD_INT 135
5241: PPUSH
5242: LD_INT 31
5244: PPUSH
5245: CALL_OW 428
5249: PPUSH
5250: CALL_OW 180
// exit ;
5254: GO 5530
// end ; if b = HexInfo ( 135 , 31 ) then
5256: LD_VAR 0 1
5260: PUSH
5261: LD_INT 135
5263: PPUSH
5264: LD_INT 31
5266: PPUSH
5267: CALL_OW 428
5271: EQUAL
5272: IFFALSE 5344
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5274: LD_VAR 0 2
5278: PPUSH
5279: LD_INT 106
5281: PPUSH
5282: LD_INT 51
5284: PPUSH
5285: CALL_OW 428
5289: PPUSH
5290: CALL_OW 180
// if not explodeFirstDepot then
5294: LD_EXP 12
5298: NOT
5299: IFFALSE 5342
// begin explodeFirstDepot := true ;
5301: LD_ADDR_EXP 12
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5309: LD_INT 525
5311: PPUSH
5312: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5316: LD_INT 127
5318: PPUSH
5319: LD_INT 27
5321: PPUSH
5322: LD_INT 1
5324: PPUSH
5325: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5329: LD_INT 125
5331: PPUSH
5332: LD_INT 29
5334: PPUSH
5335: LD_INT 1
5337: PPUSH
5338: CALL_OW 453
// end ; exit ;
5342: GO 5530
// end ; if b = HexInfo ( 106 , 51 ) then
5344: LD_VAR 0 1
5348: PUSH
5349: LD_INT 106
5351: PPUSH
5352: LD_INT 51
5354: PPUSH
5355: CALL_OW 428
5359: EQUAL
5360: IFFALSE 5460
// begin AddComMoveXY ( un , 106 , 93 ) ;
5362: LD_VAR 0 2
5366: PPUSH
5367: LD_INT 106
5369: PPUSH
5370: LD_INT 93
5372: PPUSH
5373: CALL_OW 171
// if not explodeSecondDepot then
5377: LD_EXP 13
5381: NOT
5382: IFFALSE 5458
// begin explodeSecondDepot := true ;
5384: LD_ADDR_EXP 13
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5392: LD_INT 420
5394: PPUSH
5395: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5399: LD_INT 111
5401: PPUSH
5402: LD_INT 75
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5412: LD_INT 111
5414: PPUSH
5415: LD_INT 75
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5425: LD_INT 108
5427: PPUSH
5428: LD_INT 69
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 453
// wait ( 0 0$2 ) ;
5438: LD_INT 70
5440: PPUSH
5441: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5445: LD_INT 94
5447: PPUSH
5448: LD_INT 65
5450: PPUSH
5451: LD_INT 1
5453: PPUSH
5454: CALL_OW 453
// end ; exit ;
5458: GO 5530
// end ; if GetBType ( b ) = b_bunker then
5460: LD_VAR 0 1
5464: PPUSH
5465: CALL_OW 266
5469: PUSH
5470: LD_INT 32
5472: EQUAL
5473: IFFALSE 5530
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5475: LD_ADDR_VAR 0 3
5479: PUSH
5480: LD_VAR 0 2
5484: PPUSH
5485: LD_INT 5
5487: PPUSH
5488: CALL 1008 0 2
5492: ST_TO_ADDR
// if barracks then
5493: LD_VAR 0 3
5497: IFFALSE 5515
// AddComEnterUnit ( un , barracks ) else
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_VAR 0 3
5508: PPUSH
5509: CALL_OW 180
5513: GO 5530
// AddComMoveXY ( un , 116 , 110 ) ;
5515: LD_VAR 0 2
5519: PPUSH
5520: LD_INT 116
5522: PPUSH
5523: LD_INT 110
5525: PPUSH
5526: CALL_OW 171
// end ; end ;
5530: PPOPN 3
5532: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5533: LD_VAR 0 1
5537: PUSH
5538: LD_EXP 23
5542: EQUAL
5543: PUSH
5544: LD_VAR 0 2
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: IN
5559: AND
5560: IFFALSE 5591
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5562: LD_ADDR_EXP 8
5566: PUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 250
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 251
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: ST_TO_ADDR
// end ; end_of_file
5591: PPOPN 3
5593: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5594: LD_INT 0
5596: PPUSH
5597: PPUSH
5598: PPUSH
5599: PPUSH
5600: PPUSH
5601: PPUSH
// InGameOn ;
5602: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5606: LD_INT 5
5608: PPUSH
5609: LD_INT 2
5611: PPUSH
5612: CALL_OW 343
// music_nat := 4 ;
5616: LD_ADDR_OWVAR 71
5620: PUSH
5621: LD_INT 4
5623: ST_TO_ADDR
// music_class := music_combat ;
5624: LD_ADDR_OWVAR 72
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5632: LD_INT 133
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: LD_INT 2
5640: PPUSH
5641: LD_INT 10
5643: PPUSH
5644: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5648: LD_INT 133
5650: PPUSH
5651: LD_INT 2
5653: PPUSH
5654: CALL_OW 86
// wait ( 0 0$1 ) ;
5658: LD_INT 35
5660: PPUSH
5661: CALL_OW 67
// uc_side := 6 ;
5665: LD_ADDR_OWVAR 20
5669: PUSH
5670: LD_INT 6
5672: ST_TO_ADDR
// uc_nation := 3 ;
5673: LD_ADDR_OWVAR 21
5677: PUSH
5678: LD_INT 3
5680: ST_TO_ADDR
// rutmp := [ ] ;
5681: LD_ADDR_VAR 0 6
5685: PUSH
5686: EMPTY
5687: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5688: LD_INT 6
5690: PPUSH
5691: LD_INT 3
5693: PPUSH
5694: LD_INT 21
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: LD_INT 1
5702: PPUSH
5703: LD_INT 44
5705: PPUSH
5706: LD_INT 66
5708: PPUSH
5709: CALL 336 0 7
// veh := CreateVehicle ;
5713: LD_ADDR_VAR 0 4
5717: PUSH
5718: CALL_OW 45
5722: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5723: LD_VAR 0 4
5727: PPUSH
5728: LD_INT 3
5730: PPUSH
5731: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5735: LD_VAR 0 4
5739: PPUSH
5740: LD_INT 8
5742: PPUSH
5743: LD_INT 0
5745: PPUSH
5746: CALL_OW 49
// SetLives ( veh , 500 ) ;
5750: LD_VAR 0 4
5754: PPUSH
5755: LD_INT 500
5757: PPUSH
5758: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5762: LD_INT 0
5764: PPUSH
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5775: CALL_OW 44
5779: PPUSH
5780: LD_VAR 0 4
5784: PPUSH
5785: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5789: LD_VAR 0 4
5793: PPUSH
5794: LD_INT 133
5796: PPUSH
5797: LD_INT 11
5799: PPUSH
5800: CALL_OW 111
// rutmp := [ veh ] ;
5804: LD_ADDR_VAR 0 6
5808: PUSH
5809: LD_VAR 0 4
5813: PUSH
5814: EMPTY
5815: LIST
5816: ST_TO_ADDR
// for i := 1 to 4 do
5817: LD_ADDR_VAR 0 2
5821: PUSH
5822: DOUBLE
5823: LD_INT 1
5825: DEC
5826: ST_TO_ADDR
5827: LD_INT 4
5829: PUSH
5830: FOR_TO
5831: IFFALSE 5938
// begin PrepareHuman ( false , i , 2 ) ;
5833: LD_INT 0
5835: PPUSH
5836: LD_VAR 0 2
5840: PPUSH
5841: LD_INT 2
5843: PPUSH
5844: CALL_OW 380
// un := CreateHuman ;
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: CALL_OW 44
5857: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 3
5865: PPUSH
5866: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5870: LD_VAR 0 3
5874: PPUSH
5875: LD_INT 8
5877: PPUSH
5878: LD_INT 0
5880: PPUSH
5881: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5885: LD_ADDR_VAR 0 6
5889: PUSH
5890: LD_VAR 0 6
5894: PPUSH
5895: LD_VAR 0 6
5899: PUSH
5900: LD_INT 1
5902: PLUS
5903: PPUSH
5904: LD_VAR 0 3
5908: PPUSH
5909: CALL_OW 1
5913: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5914: LD_VAR 0 3
5918: PPUSH
5919: LD_INT 133
5921: PPUSH
5922: LD_INT 11
5924: PPUSH
5925: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5929: LD_INT 18
5931: PPUSH
5932: CALL_OW 67
// end ;
5936: GO 5830
5938: POP
5939: POP
// for i in rutmp do
5940: LD_ADDR_VAR 0 2
5944: PUSH
5945: LD_VAR 0 6
5949: PUSH
5950: FOR_IN
5951: IFFALSE 6000
// begin AddComMoveXY ( i , 99 , 65 ) ;
5953: LD_VAR 0 2
5957: PPUSH
5958: LD_INT 99
5960: PPUSH
5961: LD_INT 65
5963: PPUSH
5964: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5968: LD_VAR 0 2
5972: PPUSH
5973: LD_INT 76
5975: PPUSH
5976: LD_INT 108
5978: PPUSH
5979: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 92
5990: PPUSH
5991: LD_INT 176
5993: PPUSH
5994: CALL_OW 171
// end ;
5998: GO 5950
6000: POP
6001: POP
// wait ( 0 0$10 ) ;
6002: LD_INT 350
6004: PPUSH
6005: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6009: LD_ADDR_VAR 0 5
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_EXP 19
6023: PUSH
6024: LD_EXP 20
6028: PUSH
6029: LD_EXP 21
6033: PUSH
6034: LD_EXP 22
6038: PUSH
6039: LD_EXP 23
6043: PUSH
6044: LD_EXP 24
6048: PUSH
6049: LD_EXP 25
6053: PUSH
6054: LD_EXP 27
6058: PUSH
6059: LD_EXP 28
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: LD_EXP 29
6080: UNION
6081: ST_TO_ADDR
// tmp := tmp diff 0 ;
6082: LD_ADDR_VAR 0 5
6086: PUSH
6087: LD_VAR 0 5
6091: PUSH
6092: LD_INT 0
6094: DIFF
6095: ST_TO_ADDR
// for i in heikeVehicles do
6096: LD_ADDR_VAR 0 2
6100: PUSH
6101: LD_EXP 30
6105: PUSH
6106: FOR_IN
6107: IFFALSE 6373
// begin if not tmp then
6109: LD_VAR 0 5
6113: NOT
6114: IFFALSE 6118
// continue ;
6116: GO 6106
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6118: LD_INT 2
6120: PPUSH
6121: LD_VAR 0 2
6125: PUSH
6126: LD_INT 5
6128: ARRAY
6129: PPUSH
6130: LD_VAR 0 2
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_INT 2
6146: ARRAY
6147: PPUSH
6148: LD_VAR 0 2
6152: PUSH
6153: LD_INT 3
6155: ARRAY
6156: PPUSH
6157: LD_VAR 0 2
6161: PUSH
6162: LD_INT 4
6164: ARRAY
6165: PPUSH
6166: LD_INT 34
6168: PPUSH
6169: CALL 336 0 7
// veh := CreateVehicle ;
6173: LD_ADDR_VAR 0 4
6177: PUSH
6178: CALL_OW 45
6182: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6183: LD_VAR 0 2
6187: PUSH
6188: LD_INT 4
6190: ARRAY
6191: PUSH
6192: LD_INT 51
6194: PUSH
6195: LD_INT 32
6197: PUSH
6198: LD_INT 12
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: IN
6206: IFFALSE 6286
// begin if i [ 7 ] [ 1 ] then
6208: LD_VAR 0 2
6212: PUSH
6213: LD_INT 7
6215: ARRAY
6216: PUSH
6217: LD_INT 1
6219: ARRAY
6220: IFFALSE 6247
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6222: LD_VAR 0 4
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_VAR 0 2
6234: PUSH
6235: LD_INT 7
6237: ARRAY
6238: PUSH
6239: LD_INT 1
6241: ARRAY
6242: PPUSH
6243: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6247: LD_VAR 0 2
6251: PUSH
6252: LD_INT 7
6254: ARRAY
6255: PUSH
6256: LD_INT 2
6258: ARRAY
6259: IFFALSE 6286
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6261: LD_VAR 0 4
6265: PPUSH
6266: LD_INT 2
6268: PPUSH
6269: LD_VAR 0 2
6273: PUSH
6274: LD_INT 7
6276: ARRAY
6277: PUSH
6278: LD_INT 2
6280: ARRAY
6281: PPUSH
6282: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6286: LD_VAR 0 4
6290: PPUSH
6291: LD_INT 3
6293: PPUSH
6294: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6298: LD_VAR 0 4
6302: PPUSH
6303: LD_INT 8
6305: PPUSH
6306: LD_INT 0
6308: PPUSH
6309: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6313: LD_VAR 0 5
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_VAR 0 4
6326: PPUSH
6327: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6331: LD_ADDR_VAR 0 5
6335: PUSH
6336: LD_VAR 0 5
6340: PPUSH
6341: LD_INT 1
6343: PPUSH
6344: CALL_OW 3
6348: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6349: LD_VAR 0 4
6353: PPUSH
6354: LD_INT 133
6356: PPUSH
6357: LD_INT 7
6359: PPUSH
6360: CALL_OW 114
// wait ( 0 0$1 ) ;
6364: LD_INT 35
6366: PPUSH
6367: CALL_OW 67
// end ;
6371: GO 6106
6373: POP
6374: POP
// if tmp then
6375: LD_VAR 0 5
6379: IFFALSE 6435
// for i in tmp do
6381: LD_ADDR_VAR 0 2
6385: PUSH
6386: LD_VAR 0 5
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6433
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6394: LD_VAR 0 2
6398: PPUSH
6399: LD_INT 10
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6409: LD_VAR 0 2
6413: PPUSH
6414: LD_INT 146
6416: PPUSH
6417: LD_INT 7
6419: PPUSH
6420: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6424: LD_INT 18
6426: PPUSH
6427: CALL_OW 67
// end ;
6431: GO 6391
6433: POP
6434: POP
// if heikeApes then
6435: LD_EXP 31
6439: IFFALSE 6495
// for i in heikeApes do
6441: LD_ADDR_VAR 0 2
6445: PUSH
6446: LD_EXP 31
6450: PUSH
6451: FOR_IN
6452: IFFALSE 6493
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 10
6461: PPUSH
6462: LD_INT 0
6464: PPUSH
6465: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6469: LD_VAR 0 2
6473: PPUSH
6474: LD_INT 146
6476: PPUSH
6477: LD_INT 7
6479: PPUSH
6480: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6484: LD_INT 18
6486: PPUSH
6487: CALL_OW 67
// end ;
6491: GO 6451
6493: POP
6494: POP
// DialogueOn ;
6495: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6499: LD_EXP 18
6503: PPUSH
6504: LD_STRING DH-outpost-a-1
6506: PPUSH
6507: CALL_OW 88
// DialogueOff ;
6511: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6515: LD_INT 133
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: CALL_OW 331
// InGameOff ;
6528: CALL_OW 9
// music_nat := 0 ;
6532: LD_ADDR_OWVAR 71
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// music_class := 0 ;
6540: LD_ADDR_OWVAR 72
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6548: LD_STRING Outposts
6550: PPUSH
6551: CALL_OW 337
// SaveForQuickRestart ;
6555: CALL_OW 22
// end ;
6559: LD_VAR 0 1
6563: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6564: LD_INT 22
6566: PUSH
6567: LD_INT 2
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 91
6576: PUSH
6577: LD_EXP 21
6581: PUSH
6582: LD_INT 20
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 69
6598: PUSH
6599: LD_EXP 3
6603: AND
6604: PUSH
6605: LD_EXP 21
6609: PPUSH
6610: CALL_OW 302
6614: AND
6615: IFFALSE 6862
6617: GO 6619
6619: DISABLE
6620: LD_INT 0
6622: PPUSH
6623: PPUSH
6624: PPUSH
6625: PPUSH
// begin IbrahimBetrayal ;
6626: CALL 6865 0 0
// repeat wait ( 0 0$1 ) ;
6630: LD_INT 35
6632: PPUSH
6633: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6637: LD_EXP 21
6641: PPUSH
6642: CALL_OW 301
6646: PUSH
6647: LD_INT 22
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 91
6659: PUSH
6660: LD_EXP 21
6664: PUSH
6665: LD_INT 6
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: PUSH
6682: LD_EXP 21
6686: PPUSH
6687: CALL_OW 302
6691: AND
6692: OR
6693: IFFALSE 6630
// if IsDead ( Ibrahim ) then
6695: LD_EXP 21
6699: PPUSH
6700: CALL_OW 301
6704: IFFALSE 6708
// exit ;
6706: GO 6862
// x := GetX ( Ibrahim ) ;
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_EXP 21
6717: PPUSH
6718: CALL_OW 250
6722: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6723: LD_ADDR_VAR 0 2
6727: PUSH
6728: LD_EXP 21
6732: PPUSH
6733: CALL_OW 251
6737: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: LD_EXP 21
6747: PPUSH
6748: CALL_OW 254
6752: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6753: LD_ADDR_VAR 0 4
6757: PUSH
6758: LD_EXP 21
6762: PPUSH
6763: CALL_OW 256
6767: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6768: LD_EXP 21
6772: PPUSH
6773: CALL_OW 64
// uc_side := 2 ;
6777: LD_ADDR_OWVAR 20
6781: PUSH
6782: LD_INT 2
6784: ST_TO_ADDR
// uc_nation := 2 ;
6785: LD_ADDR_OWVAR 21
6789: PUSH
6790: LD_INT 2
6792: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6793: LD_ADDR_EXP 21
6797: PUSH
6798: LD_STRING Ibrahim
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: LD_STRING 
6806: PPUSH
6807: CALL 27723 0 3
6811: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6812: LD_EXP 21
6816: PPUSH
6817: LD_VAR 0 3
6821: PPUSH
6822: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6826: LD_EXP 21
6830: PPUSH
6831: LD_VAR 0 1
6835: PPUSH
6836: LD_VAR 0 2
6840: PPUSH
6841: LD_INT 0
6843: PPUSH
6844: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6848: LD_EXP 21
6852: PPUSH
6853: LD_VAR 0 4
6857: PPUSH
6858: CALL_OW 234
// end ;
6862: PPOPN 4
6864: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6865: LD_INT 0
6867: PPUSH
6868: PPUSH
6869: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6870: LD_INT 122
6872: PPUSH
6873: LD_INT 77
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 6
6881: NEG
6882: PPUSH
6883: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6887: LD_EXP 21
6891: PPUSH
6892: LD_INT 123
6894: PPUSH
6895: LD_INT 79
6897: PPUSH
6898: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6902: LD_EXP 21
6906: PPUSH
6907: LD_INT 125
6909: PPUSH
6910: LD_INT 82
6912: PPUSH
6913: CALL_OW 178
// wait ( 0 0$2 ) ;
6917: LD_INT 70
6919: PPUSH
6920: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6924: LD_EXP 42
6928: PPUSH
6929: LD_EXP 21
6933: PPUSH
6934: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6938: LD_EXP 42
6942: PPUSH
6943: LD_STRING DRum-outpost-b-3
6945: PPUSH
6946: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6950: LD_ADDR_VAR 0 3
6954: PUSH
6955: LD_INT 125
6957: PPUSH
6958: LD_INT 76
6960: PPUSH
6961: CALL_OW 428
6965: PUSH
6966: LD_INT 125
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: CALL_OW 428
6976: PUSH
6977: LD_INT 125
6979: PPUSH
6980: LD_INT 82
6982: PPUSH
6983: CALL_OW 428
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: LIST
6992: ST_TO_ADDR
// for i in tmp do
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: LD_VAR 0 3
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7020
// SetLives ( i , 200 ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_INT 200
7013: PPUSH
7014: CALL_OW 234
7018: GO 7003
7020: POP
7021: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7022: LD_EXP 21
7026: PPUSH
7027: LD_STRING DI-outpost-b-4
7029: PPUSH
7030: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7034: LD_EXP 21
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7046: LD_EXP 21
7050: PUSH
7051: LD_EXP 42
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7064: LD_INT 122
7066: PPUSH
7067: LD_INT 77
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: CALL_OW 331
// if Givi then
7077: LD_EXP 19
7081: IFFALSE 7097
// Say ( Givi , DG-1-outpost-b-5 ) else
7083: LD_EXP 19
7087: PPUSH
7088: LD_STRING DG-1-outpost-b-5
7090: PPUSH
7091: CALL_OW 88
7095: GO 7162
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7097: LD_EXP 29
7101: PPUSH
7102: LD_INT 26
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PPUSH
7112: CALL_OW 72
7116: PUSH
7117: LD_INT 1
7119: ARRAY
7120: PPUSH
7121: LD_STRING DArf-outpost-b-a-5
7123: PPUSH
7124: CALL_OW 88
7128: NOT
7129: IFFALSE 7162
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7131: LD_EXP 29
7135: PPUSH
7136: LD_INT 26
7138: PUSH
7139: LD_INT 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 72
7150: PUSH
7151: LD_INT 1
7153: ARRAY
7154: PPUSH
7155: LD_STRING DArm-outpost-b-a-5
7157: PPUSH
7158: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7169: LD_EXP 21
7173: PPUSH
7174: CALL_OW 301
7178: PUSH
7179: LD_EXP 18
7183: PPUSH
7184: LD_EXP 21
7188: PPUSH
7189: CALL_OW 296
7193: PUSH
7194: LD_INT 6
7196: LESS
7197: PUSH
7198: LD_EXP 21
7202: PPUSH
7203: CALL_OW 302
7207: AND
7208: OR
7209: IFFALSE 7162
// if IsDead ( Ibrahim ) then
7211: LD_EXP 21
7215: PPUSH
7216: CALL_OW 301
7220: IFFALSE 7236
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7222: LD_EXP 18
7226: PPUSH
7227: LD_STRING DH-ibrahimdead-1
7229: PPUSH
7230: CALL_OW 88
// exit ;
7234: GO 7277
// end ; CenterNowOnUnits ( Ibrahim ) ;
7236: LD_EXP 21
7240: PPUSH
7241: CALL_OW 87
// DialogueOn ;
7245: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7249: LD_EXP 21
7253: PPUSH
7254: LD_STRING DI-ibrahimlives-1
7256: PPUSH
7257: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7261: LD_EXP 18
7265: PPUSH
7266: LD_STRING DH-Ibrahimlives-2
7268: PPUSH
7269: CALL_OW 88
// DialogueOff ;
7273: CALL_OW 7
// end ;
7277: LD_VAR 0 1
7281: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7282: LD_INT 11
7284: PPUSH
7285: LD_INT 22
7287: PUSH
7288: LD_INT 2
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 70
7299: PUSH
7300: LD_OWVAR 1
7304: PUSH
7305: LD_INT 18900
7307: PUSH
7308: LD_INT 16800
7310: PUSH
7311: LD_INT 16800
7313: PUSH
7314: LD_INT 15750
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_OWVAR 67
7327: ARRAY
7328: GREATEREQUAL
7329: OR
7330: IFFALSE 7791
7332: GO 7334
7334: DISABLE
// begin outerAreaAchived := true ;
7335: LD_ADDR_EXP 15
7339: PUSH
7340: LD_INT 1
7342: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7343: LD_INT 700
7345: PPUSH
7346: CALL_OW 67
// DialogueOn ;
7350: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7354: LD_EXP 26
7358: PPUSH
7359: LD_STRING DShar-radio-1
7361: PPUSH
7362: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7366: LD_EXP 26
7370: PPUSH
7371: LD_STRING DShar-radio-2
7373: PPUSH
7374: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7378: LD_EXP 18
7382: PPUSH
7383: LD_STRING DH-radio-2
7385: PPUSH
7386: CALL_OW 88
// DialogueOff ;
7390: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7394: LD_STRING Gaidar
7396: PPUSH
7397: CALL_OW 337
// if Difficulty < 3 then
7401: LD_OWVAR 67
7405: PUSH
7406: LD_INT 3
7408: LESS
7409: IFFALSE 7475
// begin DialogueOn ;
7411: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7415: LD_INT 11
7417: PPUSH
7418: LD_INT 14
7420: PPUSH
7421: LD_INT 2
7423: PPUSH
7424: LD_INT 6
7426: NEG
7427: PPUSH
7428: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7432: LD_INT 11
7434: PPUSH
7435: LD_INT 14
7437: PPUSH
7438: LD_INT 2
7440: PPUSH
7441: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7445: LD_INT 11
7447: PPUSH
7448: LD_INT 14
7450: PPUSH
7451: CALL_OW 84
// dwait ( 0 0$1 ) ;
7455: LD_INT 35
7457: PPUSH
7458: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7462: LD_EXP 18
7466: PPUSH
7467: CALL_OW 87
// DialogueOff ;
7471: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7475: LD_INT 1050
7477: PUSH
7478: LD_INT 350
7480: PPUSH
7481: LD_INT 525
7483: PPUSH
7484: CALL_OW 12
7488: PUSH
7489: LD_OWVAR 67
7493: MUL
7494: PLUS
7495: PPUSH
7496: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7500: LD_INT 35
7502: PPUSH
7503: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7507: LD_INT 2
7509: PPUSH
7510: LD_INT 1
7512: PPUSH
7513: CALL_OW 428
7517: PUSH
7518: LD_INT 0
7520: EQUAL
7521: IFFALSE 7500
// SetDir ( Gaidar , 2 ) ;
7523: LD_EXP 35
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7535: LD_EXP 35
7539: PPUSH
7540: LD_INT 2
7542: PPUSH
7543: LD_INT 1
7545: PPUSH
7546: LD_INT 0
7548: PPUSH
7549: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7553: LD_EXP 35
7557: PPUSH
7558: LD_INT 19
7560: PPUSH
7561: LD_INT 24
7563: PPUSH
7564: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7568: LD_EXP 35
7572: PPUSH
7573: LD_INT 210
7575: PPUSH
7576: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7580: LD_EXP 35
7584: PPUSH
7585: LD_INT 38
7587: PPUSH
7588: LD_INT 47
7590: PPUSH
7591: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7595: LD_EXP 35
7599: PPUSH
7600: LD_INT 32
7602: PPUSH
7603: LD_INT 59
7605: PPUSH
7606: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7610: LD_EXP 35
7614: PPUSH
7615: LD_INT 350
7617: PPUSH
7618: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7622: LD_EXP 35
7626: PPUSH
7627: LD_INT 62
7629: PPUSH
7630: LD_INT 116
7632: PPUSH
7633: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7637: LD_EXP 35
7641: PPUSH
7642: LD_INT 92
7644: PPUSH
7645: LD_INT 177
7647: PPUSH
7648: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7652: LD_INT 35
7654: PPUSH
7655: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7659: LD_EXP 35
7663: PPUSH
7664: CALL_OW 301
7668: PUSH
7669: LD_EXP 35
7673: PPUSH
7674: LD_INT 92
7676: PPUSH
7677: LD_INT 177
7679: PPUSH
7680: CALL_OW 307
7684: OR
7685: IFFALSE 7652
// if IsAt ( Gaidar , 92 , 177 ) then
7687: LD_EXP 35
7691: PPUSH
7692: LD_INT 92
7694: PPUSH
7695: LD_INT 177
7697: PPUSH
7698: CALL_OW 307
7702: IFFALSE 7769
// begin DialogueOn ;
7704: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
7708: LD_INT 92
7710: PPUSH
7711: LD_INT 177
7713: PPUSH
7714: LD_INT 2
7716: PPUSH
7717: LD_INT 3
7719: NEG
7720: PPUSH
7721: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
7725: LD_EXP 35
7729: PPUSH
7730: CALL_OW 87
// dwait ( 0 0$2 ) ;
7734: LD_INT 70
7736: PPUSH
7737: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
7741: LD_INT 92
7743: PPUSH
7744: LD_INT 177
7746: PPUSH
7747: LD_INT 2
7749: PPUSH
7750: CALL_OW 331
// DialogueOff ;
7754: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
7758: LD_EXP 35
7762: PPUSH
7763: CALL_OW 64
// exit ;
7767: GO 7791
// end ; gaidarKilled := true ;
7769: LD_ADDR_EXP 14
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7777: LD_STRING GaidarKilled
7779: PPUSH
7780: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7784: LD_STRING ACH_COMMISAR
7786: PPUSH
7787: CALL_OW 543
// end ;
7791: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7792: LD_INT 2
7794: PPUSH
7795: LD_EXP 35
7799: PPUSH
7800: CALL_OW 292
7804: IFFALSE 7821
7806: GO 7808
7808: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7809: LD_EXP 35
7813: PPUSH
7814: LD_STRING DT-objective-1
7816: PPUSH
7817: CALL_OW 88
7821: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7822: LD_INT 22
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: LD_INT 95
7837: PUSH
7838: LD_INT 5
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 95
7847: PUSH
7848: LD_INT 6
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 95
7857: PUSH
7858: LD_INT 7
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: IFFALSE 7916
7881: GO 7883
7883: DISABLE
// begin DialogueOn ;
7884: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7888: LD_EXP 18
7892: PPUSH
7893: LD_STRING DH-outpost-last-1
7895: PPUSH
7896: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7900: LD_EXP 34
7904: PPUSH
7905: LD_STRING DB-outpost-last-2
7907: PPUSH
7908: CALL_OW 94
// DialogueOff ;
7912: CALL_OW 7
// end ;
7916: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7917: LD_INT 200
7919: PPUSH
7920: CALL_OW 256
7924: PUSH
7925: LD_INT 999
7927: LESS
7928: PUSH
7929: LD_INT 200
7931: PPUSH
7932: CALL_OW 255
7936: PUSH
7937: LD_INT 2
7939: EQUAL
7940: OR
7941: IFFALSE 8114
7943: GO 7945
7945: DISABLE
7946: LD_INT 0
7948: PPUSH
7949: PPUSH
// begin if not earlyEscape then
7950: LD_EXP 16
7954: NOT
7955: IFFALSE 7981
// begin SayRadio ( Burlak , DB-end-1 ) ;
7957: LD_EXP 34
7961: PPUSH
7962: LD_STRING DB-end-1
7964: PPUSH
7965: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7969: LD_EXP 18
7973: PPUSH
7974: LD_STRING DH-end-2
7976: PPUSH
7977: CALL_OW 88
// end ; if tick <= 15 15$00 then
7981: LD_OWVAR 1
7985: PUSH
7986: LD_INT 31500
7988: LESSEQUAL
7989: IFFALSE 7998
// SetAchievement ( ACH_FIST ) ;
7991: LD_STRING ACH_FIST
7993: PPUSH
7994: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 3
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 3
8015: PUSH
8016: LD_INT 21
8018: PUSH
8019: LD_INT 3
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: ST_TO_ADDR
// if not tmp then
8039: LD_VAR 0 2
8043: NOT
8044: IFFALSE 8048
// exit ;
8046: GO 8114
// for i in tmp do
8048: LD_ADDR_VAR 0 1
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8112
// begin SetTag ( i , tEscape ) ;
8061: LD_VAR 0 1
8065: PPUSH
8066: LD_EXP 17
8070: PPUSH
8071: CALL_OW 109
// if IsInUnit ( i ) then
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 310
8084: IFFALSE 8095
// ComExitBuilding ( i ) ;
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8095: LD_VAR 0 1
8099: PPUSH
8100: LD_INT 92
8102: PPUSH
8103: LD_INT 177
8105: PPUSH
8106: CALL_OW 171
// end ;
8110: GO 8058
8112: POP
8113: POP
// end ;
8114: PPOPN 2
8116: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8117: LD_INT 4
8119: PPUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PPUSH
8130: CALL_OW 70
8134: PUSH
8135: LD_EXP 15
8139: NOT
8140: AND
8141: PUSH
8142: LD_EXP 27
8146: PPUSH
8147: CALL_OW 302
8151: AND
8152: IFFALSE 8392
8154: GO 8156
8156: DISABLE
// begin DialogueOn ;
8157: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8161: LD_INT 111
8163: PPUSH
8164: LD_INT 54
8166: PPUSH
8167: LD_INT 2
8169: PPUSH
8170: LD_INT 16
8172: NEG
8173: PPUSH
8174: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8178: LD_INT 111
8180: PPUSH
8181: LD_INT 53
8183: PPUSH
8184: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8188: LD_INT 10
8190: PPUSH
8191: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8195: LD_EXP 27
8199: PPUSH
8200: LD_STRING DKs-Hannibal-1
8202: PPUSH
8203: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8207: LD_EXP 27
8211: PPUSH
8212: LD_STRING DKs-Hannibal-2
8214: PPUSH
8215: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8219: LD_EXP 27
8223: PPUSH
8224: LD_STRING DKs-Hannibal-3
8226: PPUSH
8227: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8231: LD_EXP 27
8235: PPUSH
8236: LD_STRING DKs-Hannibal-4
8238: PPUSH
8239: CALL_OW 88
// dwait ( 0 0$1 ) ;
8243: LD_INT 35
8245: PPUSH
8246: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8250: LD_INT 111
8252: PPUSH
8253: LD_INT 54
8255: PPUSH
8256: LD_INT 2
8258: PPUSH
8259: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8263: LD_INT 173
8265: PPUSH
8266: LD_INT 76
8268: PPUSH
8269: LD_INT 2
8271: PPUSH
8272: LD_INT 12
8274: NEG
8275: PPUSH
8276: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8280: LD_INT 173
8282: PPUSH
8283: LD_INT 76
8285: PPUSH
8286: LD_INT 2
8288: PPUSH
8289: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8293: LD_INT 173
8295: PPUSH
8296: LD_INT 76
8298: PPUSH
8299: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8303: LD_EXP 27
8307: PPUSH
8308: LD_STRING DKs-Hannibal-5
8310: PPUSH
8311: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8315: LD_EXP 22
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_INT 2
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 34
8332: PUSH
8333: LD_INT 26
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PPUSH
8344: CALL_OW 69
8348: NOT
8349: AND
8350: IFFALSE 8388
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8352: LD_EXP 22
8356: PPUSH
8357: LD_STRING DKam-Hannibal-a-6
8359: PPUSH
8360: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8364: LD_EXP 22
8368: PPUSH
8369: LD_STRING DKam-Hannibal-a-7
8371: PPUSH
8372: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8376: LD_EXP 19
8380: PPUSH
8381: LD_STRING DG-Hannibal-a-8
8383: PPUSH
8384: CALL_OW 88
// end ; DialogueOff ;
8388: CALL_OW 7
// end ;
8392: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8393: LD_INT 225
8395: PPUSH
8396: CALL_OW 302
8400: PUSH
8401: LD_INT 200
8403: PPUSH
8404: CALL_OW 302
8408: AND
8409: PUSH
8410: LD_INT 12
8412: PPUSH
8413: LD_INT 21
8415: PUSH
8416: LD_INT 3
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PPUSH
8423: CALL_OW 70
8427: PUSH
8428: LD_INT 2
8430: GREATER
8431: AND
8432: PUSH
8433: LD_INT 13
8435: PPUSH
8436: LD_INT 22
8438: PUSH
8439: LD_INT 2
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 70
8450: PUSH
8451: LD_INT 3
8453: GREATER
8454: AND
8455: IFFALSE 8468
8457: GO 8459
8459: DISABLE
// hannibalPath := true ;
8460: LD_ADDR_EXP 9
8464: PUSH
8465: LD_INT 1
8467: ST_TO_ADDR
8468: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8469: LD_EXP 9
8473: PUSH
8474: LD_INT 6
8476: PPUSH
8477: LD_INT 22
8479: PUSH
8480: LD_INT 2
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: AND
8492: IFFALSE 8837
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
8501: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8502: LD_ADDR_VAR 0 2
8506: PUSH
8507: LD_INT 6
8509: PPUSH
8510: LD_INT 22
8512: PUSH
8513: LD_INT 2
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 70
8524: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8525: LD_ADDR_VAR 0 3
8529: PUSH
8530: LD_VAR 0 2
8534: PPUSH
8535: LD_INT 34
8537: PUSH
8538: LD_INT 26
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 72
8549: PUSH
8550: LD_INT 0
8552: GREATER
8553: ST_TO_ADDR
// DialogueOn ;
8554: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8558: LD_EXP 18
8562: PPUSH
8563: LD_STRING DH-Cleverattack-1
8565: PPUSH
8566: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8570: LD_EXP 18
8574: PPUSH
8575: LD_STRING DH-Cleverattack-2
8577: PPUSH
8578: CALL_OW 88
// if hasFlameThrower then
8582: LD_VAR 0 3
8586: IFFALSE 8614
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8588: LD_EXP 34
8592: PPUSH
8593: LD_STRING DB-Cleverattack-3
8595: PPUSH
8596: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8600: LD_EXP 18
8604: PPUSH
8605: LD_STRING DH-Cleverattack-4
8607: PPUSH
8608: CALL_OW 88
// end else
8612: GO 8638
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8614: LD_EXP 34
8618: PPUSH
8619: LD_STRING DB-Cleverattack-a-3
8621: PPUSH
8622: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8626: LD_EXP 18
8630: PPUSH
8631: LD_STRING DH-Cleverattack-a-4
8633: PPUSH
8634: CALL_OW 88
// end ; DialogueOff ;
8638: CALL_OW 7
// if not hasFlameThrower then
8642: LD_VAR 0 3
8646: NOT
8647: IFFALSE 8651
// exit ;
8649: GO 8837
// earlyEscape := true ;
8651: LD_ADDR_EXP 16
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8659: LD_INT 140
8661: PPUSH
8662: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: LD_INT 22
8673: PUSH
8674: LD_INT 3
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: LD_INT 25
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 25
8696: PUSH
8697: LD_INT 2
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 25
8706: PUSH
8707: LD_INT 4
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 69
8728: PUSH
8729: LD_EXP 21
8733: PUSH
8734: LD_EXP 36
8738: PUSH
8739: LD_EXP 35
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: DIFF
8749: ST_TO_ADDR
// for i in tmp do
8750: LD_ADDR_VAR 0 1
8754: PUSH
8755: LD_VAR 0 2
8759: PUSH
8760: FOR_IN
8761: IFFALSE 8835
// begin if Prob ( 40 + 10 * Difficulty ) then
8763: LD_INT 40
8765: PUSH
8766: LD_INT 10
8768: PUSH
8769: LD_OWVAR 67
8773: MUL
8774: PLUS
8775: PPUSH
8776: CALL_OW 13
8780: IFFALSE 8784
// continue ;
8782: GO 8760
// SetTag ( i , tEscape ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_EXP 17
8793: PPUSH
8794: CALL_OW 109
// if IsInUnit ( i ) then
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 310
8807: IFFALSE 8818
// ComExitBuilding ( i ) ;
8809: LD_VAR 0 1
8813: PPUSH
8814: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8818: LD_VAR 0 1
8822: PPUSH
8823: LD_INT 92
8825: PPUSH
8826: LD_INT 177
8828: PPUSH
8829: CALL_OW 171
// end ;
8833: GO 8760
8835: POP
8836: POP
// end ;
8837: PPOPN 3
8839: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8840: LD_INT 9
8842: PPUSH
8843: LD_INT 2
8845: PUSH
8846: LD_INT 22
8848: PUSH
8849: LD_INT 3
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 22
8858: PUSH
8859: LD_INT 6
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: LIST
8870: PPUSH
8871: CALL_OW 70
8875: IFFALSE 8973
8877: GO 8879
8879: DISABLE
8880: LD_INT 0
8882: PPUSH
// begin enable ;
8883: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8884: LD_ADDR_VAR 0 1
8888: PUSH
8889: LD_INT 9
8891: PPUSH
8892: LD_INT 2
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 6
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 70
8924: PUSH
8925: FOR_IN
8926: IFFALSE 8971
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8928: LD_VAR 0 1
8932: PPUSH
8933: CALL_OW 110
8937: PUSH
8938: LD_EXP 17
8942: EQUAL
8943: PUSH
8944: LD_VAR 0 1
8948: PPUSH
8949: CALL_OW 255
8953: PUSH
8954: LD_INT 6
8956: EQUAL
8957: OR
8958: IFFALSE 8969
// RemoveUnit ( i ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: CALL_OW 64
8969: GO 8925
8971: POP
8972: POP
// end ;
8973: PPOPN 1
8975: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8976: LD_EXP 23
8980: PUSH
8981: LD_EXP 23
8985: PPUSH
8986: CALL_OW 256
8990: PUSH
8991: LD_INT 3
8993: LESS
8994: AND
8995: IFFALSE 9041
8997: GO 8999
8999: DISABLE
// begin DialogueOn ;
9000: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9004: LD_EXP 23
9008: PPUSH
9009: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9013: LD_EXP 23
9017: PPUSH
9018: LD_STRING DK-Kkilled-1
9020: PPUSH
9021: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9025: LD_EXP 18
9029: PPUSH
9030: LD_STRING DH-Kkilled-2
9032: PPUSH
9033: CALL_OW 88
// DialogueOff ;
9037: CALL_OW 7
// end ;
9041: END
// every 0 0$1 trigger kaiaKilledByRussian do
9042: LD_EXP 8
9046: IFFALSE 9063
9048: GO 9050
9050: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9051: LD_EXP 18
9055: PPUSH
9056: LD_STRING DH-Kkilled-3
9058: PPUSH
9059: CALL_OW 88
9063: END
// every 0 0$1 trigger tick >= 24 24$00 do
9064: LD_OWVAR 1
9068: PUSH
9069: LD_INT 50400
9071: GREATEREQUAL
9072: IFFALSE 9109
9074: GO 9076
9076: DISABLE
// begin DialogueOn ;
9077: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9081: LD_EXP 26
9085: PPUSH
9086: LD_STRING DShar-slow-1
9088: PPUSH
9089: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9093: LD_EXP 26
9097: PPUSH
9098: LD_STRING DShar-slow-2
9100: PPUSH
9101: CALL_OW 94
// DialogueOff ;
9105: CALL_OW 7
// end ;
9109: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9110: LD_OWVAR 1
9114: PUSH
9115: LD_INT 84000
9117: PUSH
9118: LD_INT 75600
9120: PUSH
9121: LD_INT 67200
9123: PUSH
9124: LD_INT 63000
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: PUSH
9133: LD_OWVAR 67
9137: ARRAY
9138: GREATEREQUAL
9139: IFFALSE 9183
9141: GO 9143
9143: DISABLE
// begin DialogueOn ;
9144: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9148: LD_EXP 26
9152: PPUSH
9153: LD_STRING DShar-fail-1
9155: PPUSH
9156: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9160: LD_EXP 26
9164: PPUSH
9165: LD_STRING DShar-fail-2
9167: PPUSH
9168: CALL_OW 94
// DialogueOff ;
9172: CALL_OW 7
// YouLost ( Time ) ;
9176: LD_STRING Time
9178: PPUSH
9179: CALL_OW 104
// end ;
9183: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9184: LD_INT 22
9186: PUSH
9187: LD_INT 3
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 30
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 30
9209: PUSH
9210: LD_INT 0
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 69
9230: PUSH
9231: LD_INT 0
9233: EQUAL
9234: IFFALSE 9745
9236: GO 9238
9238: DISABLE
9239: LD_INT 0
9241: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9242: LD_OWVAR 1
9246: PUSH
9247: LD_EXP 5
9251: PLUS
9252: PUSH
9253: LD_INT 157500
9255: PUSH
9256: LD_INT 147000
9258: PUSH
9259: LD_INT 136500
9261: PUSH
9262: LD_INT 126000
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: PUSH
9271: LD_OWVAR 67
9275: ARRAY
9276: LESSEQUAL
9277: IFFALSE 9291
// AddMedal ( med1 , 1 ) else
9279: LD_STRING med1
9281: PPUSH
9282: LD_INT 1
9284: PPUSH
9285: CALL_OW 101
9289: GO 9302
// AddMedal ( med1 , - 1 ) ;
9291: LD_STRING med1
9293: PPUSH
9294: LD_INT 1
9296: NEG
9297: PPUSH
9298: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9302: LD_EXP 7
9306: PUSH
9307: LD_INT 3
9309: GREATEREQUAL
9310: PUSH
9311: LD_EXP 11
9315: MUL
9316: PUSH
9317: LD_EXP 9
9321: MUL
9322: PUSH
9323: LD_EXP 6
9327: PUSH
9328: LD_INT 6
9330: PUSH
9331: LD_INT 5
9333: PUSH
9334: LD_INT 4
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: LD_OWVAR 67
9350: ARRAY
9351: LESS
9352: MUL
9353: IFFALSE 9367
// AddMedal ( med2 , 1 ) else
9355: LD_STRING med2
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 101
9365: GO 9378
// AddMedal ( med2 , - 1 ) ;
9367: LD_STRING med2
9369: PPUSH
9370: LD_INT 1
9372: NEG
9373: PPUSH
9374: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9378: LD_EXP 14
9382: PPUSH
9383: LD_STRING 04_2_GaidarKilled
9385: PPUSH
9386: CALL_OW 39
// if gaidarKilled then
9390: LD_EXP 14
9394: IFFALSE 9408
// AddMedal ( med3 , 1 ) else
9396: LD_STRING med3
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 101
9406: GO 9419
// AddMedal ( med3 , - 1 ) ;
9408: LD_STRING med3
9410: PPUSH
9411: LD_INT 1
9413: NEG
9414: PPUSH
9415: CALL_OW 101
// GiveMedals ( MAIN ) ;
9419: LD_STRING MAIN
9421: PPUSH
9422: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9426: LD_INT 22
9428: PUSH
9429: LD_INT 2
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 3
9438: PUSH
9439: LD_INT 23
9441: PUSH
9442: LD_INT 0
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 69
9461: PPUSH
9462: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9466: LD_EXP 18
9470: PPUSH
9471: LD_STRING 04_2_Heike
9473: PPUSH
9474: CALL_OW 38
// if Aviradze then
9478: LD_EXP 28
9482: IFFALSE 9496
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9484: LD_EXP 28
9488: PPUSH
9489: LD_STRING 04_2_Aviradze
9491: PPUSH
9492: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9496: LD_EXP 21
9500: PUSH
9501: LD_EXP 21
9505: PPUSH
9506: CALL_OW 255
9510: PUSH
9511: LD_INT 2
9513: EQUAL
9514: AND
9515: IFFALSE 9545
// begin if ibrahimOnRuSide then
9517: LD_EXP 3
9521: IFFALSE 9533
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_STRING 04_2_IbrahimJoined
9528: PPUSH
9529: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9533: LD_EXP 21
9537: PPUSH
9538: LD_STRING 04_2_Ibrahim
9540: PPUSH
9541: CALL_OW 38
// end ; if Kamil then
9545: LD_EXP 22
9549: IFFALSE 9563
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9551: LD_EXP 22
9555: PPUSH
9556: LD_STRING 04_2_Kamil
9558: PPUSH
9559: CALL_OW 38
// if Sophia then
9563: LD_EXP 24
9567: IFFALSE 9581
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9569: LD_EXP 24
9573: PPUSH
9574: LD_STRING 04_2_Sophia
9576: PPUSH
9577: CALL_OW 38
// if Kaia then
9581: LD_EXP 23
9585: IFFALSE 9599
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9587: LD_EXP 23
9591: PPUSH
9592: LD_STRING 04_2_Kaia
9594: PPUSH
9595: CALL_OW 38
// if Givi then
9599: LD_EXP 19
9603: IFFALSE 9617
// SaveCharacters ( Givi , 04_2_Givi ) ;
9605: LD_EXP 19
9609: PPUSH
9610: LD_STRING 04_2_Givi
9612: PPUSH
9613: CALL_OW 38
// if Mike then
9617: LD_EXP 20
9621: IFFALSE 9635
// SaveCharacters ( Mike , 04_2_Mike ) ;
9623: LD_EXP 20
9627: PPUSH
9628: LD_STRING 04_2_Mike
9630: PPUSH
9631: CALL_OW 38
// if Markov then
9635: LD_EXP 25
9639: IFFALSE 9653
// SaveCharacters ( Markov , 04_2_Markov ) ;
9641: LD_EXP 25
9645: PPUSH
9646: LD_STRING 04_2_Markov
9648: PPUSH
9649: CALL_OW 38
// if Kurt then
9653: LD_EXP 27
9657: IFFALSE 9671
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9659: LD_EXP 27
9663: PPUSH
9664: LD_STRING 04_2_Kurt
9666: PPUSH
9667: CALL_OW 38
// if heikeSecondSquad then
9671: LD_EXP 29
9675: IFFALSE 9689
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9677: LD_EXP 29
9681: PPUSH
9682: LD_STRING 04_2_others
9684: PPUSH
9685: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9689: LD_ADDR_VAR 0 1
9693: PUSH
9694: LD_INT 22
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 23
9706: PUSH
9707: LD_INT 0
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: ST_TO_ADDR
// if tmp then
9723: LD_VAR 0 1
9727: IFFALSE 9741
// SaveCharacters ( tmp , 04_2_apes ) ;
9729: LD_VAR 0 1
9733: PPUSH
9734: LD_STRING 04_2_apes
9736: PPUSH
9737: CALL_OW 38
// YouWin ;
9741: CALL_OW 103
// end ; end_of_file
9745: PPOPN 1
9747: END
// every 0 0$1 do
9748: GO 9750
9750: DISABLE
// begin enable ;
9751: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9752: LD_STRING updateTimer(
9754: PUSH
9755: LD_OWVAR 1
9759: STR
9760: PUSH
9761: LD_STRING );
9763: STR
9764: PPUSH
9765: CALL_OW 559
// end ;
9769: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9770: LD_INT 0
9772: PPUSH
// if p2 = 100 then
9773: LD_VAR 0 2
9777: PUSH
9778: LD_INT 100
9780: EQUAL
9781: IFFALSE 10784
// begin if not StreamModeActive then
9783: LD_EXP 43
9787: NOT
9788: IFFALSE 9798
// StreamModeActive := true ;
9790: LD_ADDR_EXP 43
9794: PUSH
9795: LD_INT 1
9797: ST_TO_ADDR
// if p3 = 0 then
9798: LD_VAR 0 3
9802: PUSH
9803: LD_INT 0
9805: EQUAL
9806: IFFALSE 9812
// InitStreamMode ;
9808: CALL 10944 0 0
// if p3 = 1 then
9812: LD_VAR 0 3
9816: PUSH
9817: LD_INT 1
9819: EQUAL
9820: IFFALSE 9830
// sRocket := true ;
9822: LD_ADDR_EXP 48
9826: PUSH
9827: LD_INT 1
9829: ST_TO_ADDR
// if p3 = 2 then
9830: LD_VAR 0 3
9834: PUSH
9835: LD_INT 2
9837: EQUAL
9838: IFFALSE 9848
// sSpeed := true ;
9840: LD_ADDR_EXP 47
9844: PUSH
9845: LD_INT 1
9847: ST_TO_ADDR
// if p3 = 3 then
9848: LD_VAR 0 3
9852: PUSH
9853: LD_INT 3
9855: EQUAL
9856: IFFALSE 9866
// sEngine := true ;
9858: LD_ADDR_EXP 49
9862: PUSH
9863: LD_INT 1
9865: ST_TO_ADDR
// if p3 = 4 then
9866: LD_VAR 0 3
9870: PUSH
9871: LD_INT 4
9873: EQUAL
9874: IFFALSE 9884
// sSpec := true ;
9876: LD_ADDR_EXP 46
9880: PUSH
9881: LD_INT 1
9883: ST_TO_ADDR
// if p3 = 5 then
9884: LD_VAR 0 3
9888: PUSH
9889: LD_INT 5
9891: EQUAL
9892: IFFALSE 9902
// sLevel := true ;
9894: LD_ADDR_EXP 50
9898: PUSH
9899: LD_INT 1
9901: ST_TO_ADDR
// if p3 = 6 then
9902: LD_VAR 0 3
9906: PUSH
9907: LD_INT 6
9909: EQUAL
9910: IFFALSE 9920
// sArmoury := true ;
9912: LD_ADDR_EXP 51
9916: PUSH
9917: LD_INT 1
9919: ST_TO_ADDR
// if p3 = 7 then
9920: LD_VAR 0 3
9924: PUSH
9925: LD_INT 7
9927: EQUAL
9928: IFFALSE 9938
// sRadar := true ;
9930: LD_ADDR_EXP 52
9934: PUSH
9935: LD_INT 1
9937: ST_TO_ADDR
// if p3 = 8 then
9938: LD_VAR 0 3
9942: PUSH
9943: LD_INT 8
9945: EQUAL
9946: IFFALSE 9956
// sBunker := true ;
9948: LD_ADDR_EXP 53
9952: PUSH
9953: LD_INT 1
9955: ST_TO_ADDR
// if p3 = 9 then
9956: LD_VAR 0 3
9960: PUSH
9961: LD_INT 9
9963: EQUAL
9964: IFFALSE 9974
// sHack := true ;
9966: LD_ADDR_EXP 54
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// if p3 = 10 then
9974: LD_VAR 0 3
9978: PUSH
9979: LD_INT 10
9981: EQUAL
9982: IFFALSE 9992
// sFire := true ;
9984: LD_ADDR_EXP 55
9988: PUSH
9989: LD_INT 1
9991: ST_TO_ADDR
// if p3 = 11 then
9992: LD_VAR 0 3
9996: PUSH
9997: LD_INT 11
9999: EQUAL
10000: IFFALSE 10010
// sRefresh := true ;
10002: LD_ADDR_EXP 56
10006: PUSH
10007: LD_INT 1
10009: ST_TO_ADDR
// if p3 = 12 then
10010: LD_VAR 0 3
10014: PUSH
10015: LD_INT 12
10017: EQUAL
10018: IFFALSE 10028
// sExp := true ;
10020: LD_ADDR_EXP 57
10024: PUSH
10025: LD_INT 1
10027: ST_TO_ADDR
// if p3 = 13 then
10028: LD_VAR 0 3
10032: PUSH
10033: LD_INT 13
10035: EQUAL
10036: IFFALSE 10046
// sDepot := true ;
10038: LD_ADDR_EXP 58
10042: PUSH
10043: LD_INT 1
10045: ST_TO_ADDR
// if p3 = 14 then
10046: LD_VAR 0 3
10050: PUSH
10051: LD_INT 14
10053: EQUAL
10054: IFFALSE 10064
// sFlag := true ;
10056: LD_ADDR_EXP 59
10060: PUSH
10061: LD_INT 1
10063: ST_TO_ADDR
// if p3 = 15 then
10064: LD_VAR 0 3
10068: PUSH
10069: LD_INT 15
10071: EQUAL
10072: IFFALSE 10082
// sKamikadze := true ;
10074: LD_ADDR_EXP 67
10078: PUSH
10079: LD_INT 1
10081: ST_TO_ADDR
// if p3 = 16 then
10082: LD_VAR 0 3
10086: PUSH
10087: LD_INT 16
10089: EQUAL
10090: IFFALSE 10100
// sTroll := true ;
10092: LD_ADDR_EXP 68
10096: PUSH
10097: LD_INT 1
10099: ST_TO_ADDR
// if p3 = 17 then
10100: LD_VAR 0 3
10104: PUSH
10105: LD_INT 17
10107: EQUAL
10108: IFFALSE 10118
// sSlow := true ;
10110: LD_ADDR_EXP 69
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// if p3 = 18 then
10118: LD_VAR 0 3
10122: PUSH
10123: LD_INT 18
10125: EQUAL
10126: IFFALSE 10136
// sLack := true ;
10128: LD_ADDR_EXP 70
10132: PUSH
10133: LD_INT 1
10135: ST_TO_ADDR
// if p3 = 19 then
10136: LD_VAR 0 3
10140: PUSH
10141: LD_INT 19
10143: EQUAL
10144: IFFALSE 10154
// sTank := true ;
10146: LD_ADDR_EXP 72
10150: PUSH
10151: LD_INT 1
10153: ST_TO_ADDR
// if p3 = 20 then
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 20
10161: EQUAL
10162: IFFALSE 10172
// sRemote := true ;
10164: LD_ADDR_EXP 73
10168: PUSH
10169: LD_INT 1
10171: ST_TO_ADDR
// if p3 = 21 then
10172: LD_VAR 0 3
10176: PUSH
10177: LD_INT 21
10179: EQUAL
10180: IFFALSE 10190
// sPowell := true ;
10182: LD_ADDR_EXP 74
10186: PUSH
10187: LD_INT 1
10189: ST_TO_ADDR
// if p3 = 22 then
10190: LD_VAR 0 3
10194: PUSH
10195: LD_INT 22
10197: EQUAL
10198: IFFALSE 10208
// sTeleport := true ;
10200: LD_ADDR_EXP 77
10204: PUSH
10205: LD_INT 1
10207: ST_TO_ADDR
// if p3 = 23 then
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 23
10215: EQUAL
10216: IFFALSE 10226
// sOilTower := true ;
10218: LD_ADDR_EXP 79
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// if p3 = 24 then
10226: LD_VAR 0 3
10230: PUSH
10231: LD_INT 24
10233: EQUAL
10234: IFFALSE 10244
// sShovel := true ;
10236: LD_ADDR_EXP 80
10240: PUSH
10241: LD_INT 1
10243: ST_TO_ADDR
// if p3 = 25 then
10244: LD_VAR 0 3
10248: PUSH
10249: LD_INT 25
10251: EQUAL
10252: IFFALSE 10262
// sSheik := true ;
10254: LD_ADDR_EXP 81
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// if p3 = 26 then
10262: LD_VAR 0 3
10266: PUSH
10267: LD_INT 26
10269: EQUAL
10270: IFFALSE 10280
// sEarthquake := true ;
10272: LD_ADDR_EXP 83
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// if p3 = 27 then
10280: LD_VAR 0 3
10284: PUSH
10285: LD_INT 27
10287: EQUAL
10288: IFFALSE 10298
// sAI := true ;
10290: LD_ADDR_EXP 84
10294: PUSH
10295: LD_INT 1
10297: ST_TO_ADDR
// if p3 = 28 then
10298: LD_VAR 0 3
10302: PUSH
10303: LD_INT 28
10305: EQUAL
10306: IFFALSE 10316
// sCargo := true ;
10308: LD_ADDR_EXP 87
10312: PUSH
10313: LD_INT 1
10315: ST_TO_ADDR
// if p3 = 29 then
10316: LD_VAR 0 3
10320: PUSH
10321: LD_INT 29
10323: EQUAL
10324: IFFALSE 10334
// sDLaser := true ;
10326: LD_ADDR_EXP 88
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
// if p3 = 30 then
10334: LD_VAR 0 3
10338: PUSH
10339: LD_INT 30
10341: EQUAL
10342: IFFALSE 10352
// sExchange := true ;
10344: LD_ADDR_EXP 89
10348: PUSH
10349: LD_INT 1
10351: ST_TO_ADDR
// if p3 = 31 then
10352: LD_VAR 0 3
10356: PUSH
10357: LD_INT 31
10359: EQUAL
10360: IFFALSE 10370
// sFac := true ;
10362: LD_ADDR_EXP 90
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// if p3 = 32 then
10370: LD_VAR 0 3
10374: PUSH
10375: LD_INT 32
10377: EQUAL
10378: IFFALSE 10388
// sPower := true ;
10380: LD_ADDR_EXP 91
10384: PUSH
10385: LD_INT 1
10387: ST_TO_ADDR
// if p3 = 33 then
10388: LD_VAR 0 3
10392: PUSH
10393: LD_INT 33
10395: EQUAL
10396: IFFALSE 10406
// sRandom := true ;
10398: LD_ADDR_EXP 92
10402: PUSH
10403: LD_INT 1
10405: ST_TO_ADDR
// if p3 = 34 then
10406: LD_VAR 0 3
10410: PUSH
10411: LD_INT 34
10413: EQUAL
10414: IFFALSE 10424
// sShield := true ;
10416: LD_ADDR_EXP 93
10420: PUSH
10421: LD_INT 1
10423: ST_TO_ADDR
// if p3 = 35 then
10424: LD_VAR 0 3
10428: PUSH
10429: LD_INT 35
10431: EQUAL
10432: IFFALSE 10442
// sTime := true ;
10434: LD_ADDR_EXP 94
10438: PUSH
10439: LD_INT 1
10441: ST_TO_ADDR
// if p3 = 36 then
10442: LD_VAR 0 3
10446: PUSH
10447: LD_INT 36
10449: EQUAL
10450: IFFALSE 10460
// sTools := true ;
10452: LD_ADDR_EXP 95
10456: PUSH
10457: LD_INT 1
10459: ST_TO_ADDR
// if p3 = 101 then
10460: LD_VAR 0 3
10464: PUSH
10465: LD_INT 101
10467: EQUAL
10468: IFFALSE 10478
// sSold := true ;
10470: LD_ADDR_EXP 60
10474: PUSH
10475: LD_INT 1
10477: ST_TO_ADDR
// if p3 = 102 then
10478: LD_VAR 0 3
10482: PUSH
10483: LD_INT 102
10485: EQUAL
10486: IFFALSE 10496
// sDiff := true ;
10488: LD_ADDR_EXP 61
10492: PUSH
10493: LD_INT 1
10495: ST_TO_ADDR
// if p3 = 103 then
10496: LD_VAR 0 3
10500: PUSH
10501: LD_INT 103
10503: EQUAL
10504: IFFALSE 10514
// sFog := true ;
10506: LD_ADDR_EXP 64
10510: PUSH
10511: LD_INT 1
10513: ST_TO_ADDR
// if p3 = 104 then
10514: LD_VAR 0 3
10518: PUSH
10519: LD_INT 104
10521: EQUAL
10522: IFFALSE 10532
// sReset := true ;
10524: LD_ADDR_EXP 65
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// if p3 = 105 then
10532: LD_VAR 0 3
10536: PUSH
10537: LD_INT 105
10539: EQUAL
10540: IFFALSE 10550
// sSun := true ;
10542: LD_ADDR_EXP 66
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// if p3 = 106 then
10550: LD_VAR 0 3
10554: PUSH
10555: LD_INT 106
10557: EQUAL
10558: IFFALSE 10568
// sTiger := true ;
10560: LD_ADDR_EXP 62
10564: PUSH
10565: LD_INT 1
10567: ST_TO_ADDR
// if p3 = 107 then
10568: LD_VAR 0 3
10572: PUSH
10573: LD_INT 107
10575: EQUAL
10576: IFFALSE 10586
// sBomb := true ;
10578: LD_ADDR_EXP 63
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// if p3 = 108 then
10586: LD_VAR 0 3
10590: PUSH
10591: LD_INT 108
10593: EQUAL
10594: IFFALSE 10604
// sWound := true ;
10596: LD_ADDR_EXP 71
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// if p3 = 109 then
10604: LD_VAR 0 3
10608: PUSH
10609: LD_INT 109
10611: EQUAL
10612: IFFALSE 10622
// sBetray := true ;
10614: LD_ADDR_EXP 75
10618: PUSH
10619: LD_INT 1
10621: ST_TO_ADDR
// if p3 = 110 then
10622: LD_VAR 0 3
10626: PUSH
10627: LD_INT 110
10629: EQUAL
10630: IFFALSE 10640
// sContamin := true ;
10632: LD_ADDR_EXP 76
10636: PUSH
10637: LD_INT 1
10639: ST_TO_ADDR
// if p3 = 111 then
10640: LD_VAR 0 3
10644: PUSH
10645: LD_INT 111
10647: EQUAL
10648: IFFALSE 10658
// sOil := true ;
10650: LD_ADDR_EXP 78
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// if p3 = 112 then
10658: LD_VAR 0 3
10662: PUSH
10663: LD_INT 112
10665: EQUAL
10666: IFFALSE 10676
// sStu := true ;
10668: LD_ADDR_EXP 82
10672: PUSH
10673: LD_INT 1
10675: ST_TO_ADDR
// if p3 = 113 then
10676: LD_VAR 0 3
10680: PUSH
10681: LD_INT 113
10683: EQUAL
10684: IFFALSE 10694
// sBazooka := true ;
10686: LD_ADDR_EXP 85
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// if p3 = 114 then
10694: LD_VAR 0 3
10698: PUSH
10699: LD_INT 114
10701: EQUAL
10702: IFFALSE 10712
// sMortar := true ;
10704: LD_ADDR_EXP 86
10708: PUSH
10709: LD_INT 1
10711: ST_TO_ADDR
// if p3 = 115 then
10712: LD_VAR 0 3
10716: PUSH
10717: LD_INT 115
10719: EQUAL
10720: IFFALSE 10730
// sRanger := true ;
10722: LD_ADDR_EXP 96
10726: PUSH
10727: LD_INT 1
10729: ST_TO_ADDR
// if p3 = 116 then
10730: LD_VAR 0 3
10734: PUSH
10735: LD_INT 116
10737: EQUAL
10738: IFFALSE 10748
// sComputer := true ;
10740: LD_ADDR_EXP 97
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// if p3 = 117 then
10748: LD_VAR 0 3
10752: PUSH
10753: LD_INT 117
10755: EQUAL
10756: IFFALSE 10766
// s30 := true ;
10758: LD_ADDR_EXP 98
10762: PUSH
10763: LD_INT 1
10765: ST_TO_ADDR
// if p3 = 118 then
10766: LD_VAR 0 3
10770: PUSH
10771: LD_INT 118
10773: EQUAL
10774: IFFALSE 10784
// s60 := true ;
10776: LD_ADDR_EXP 99
10780: PUSH
10781: LD_INT 1
10783: ST_TO_ADDR
// end ; if p2 = 101 then
10784: LD_VAR 0 2
10788: PUSH
10789: LD_INT 101
10791: EQUAL
10792: IFFALSE 10920
// begin case p3 of 1 :
10794: LD_VAR 0 3
10798: PUSH
10799: LD_INT 1
10801: DOUBLE
10802: EQUAL
10803: IFTRUE 10807
10805: GO 10814
10807: POP
// hHackUnlimitedResources ; 2 :
10808: CALL 22516 0 0
10812: GO 10920
10814: LD_INT 2
10816: DOUBLE
10817: EQUAL
10818: IFTRUE 10822
10820: GO 10829
10822: POP
// hHackSetLevel10 ; 3 :
10823: CALL 22649 0 0
10827: GO 10920
10829: LD_INT 3
10831: DOUBLE
10832: EQUAL
10833: IFTRUE 10837
10835: GO 10844
10837: POP
// hHackSetLevel10YourUnits ; 4 :
10838: CALL 22734 0 0
10842: GO 10920
10844: LD_INT 4
10846: DOUBLE
10847: EQUAL
10848: IFTRUE 10852
10850: GO 10859
10852: POP
// hHackInvincible ; 5 :
10853: CALL 23182 0 0
10857: GO 10920
10859: LD_INT 5
10861: DOUBLE
10862: EQUAL
10863: IFTRUE 10867
10865: GO 10874
10867: POP
// hHackInvisible ; 6 :
10868: CALL 23293 0 0
10872: GO 10920
10874: LD_INT 6
10876: DOUBLE
10877: EQUAL
10878: IFTRUE 10882
10880: GO 10889
10882: POP
// hHackChangeYourSide ; 7 :
10883: CALL 23350 0 0
10887: GO 10920
10889: LD_INT 7
10891: DOUBLE
10892: EQUAL
10893: IFTRUE 10897
10895: GO 10904
10897: POP
// hHackChangeUnitSide ; 8 :
10898: CALL 23392 0 0
10902: GO 10920
10904: LD_INT 8
10906: DOUBLE
10907: EQUAL
10908: IFTRUE 10912
10910: GO 10919
10912: POP
// hHackFog ; end ;
10913: CALL 23493 0 0
10917: GO 10920
10919: POP
// end ; end ;
10920: LD_VAR 0 7
10924: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10925: GO 10927
10927: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10928: LD_STRING initStreamRollete();
10930: PPUSH
10931: CALL_OW 559
// InitStreamMode ;
10935: CALL 10944 0 0
// DefineStreamItems ( ) ;
10939: CALL 11408 0 0
// end ;
10943: END
// function InitStreamMode ; begin
10944: LD_INT 0
10946: PPUSH
// streamModeActive := false ;
10947: LD_ADDR_EXP 43
10951: PUSH
10952: LD_INT 0
10954: ST_TO_ADDR
// normalCounter := 36 ;
10955: LD_ADDR_EXP 44
10959: PUSH
10960: LD_INT 36
10962: ST_TO_ADDR
// hardcoreCounter := 16 ;
10963: LD_ADDR_EXP 45
10967: PUSH
10968: LD_INT 16
10970: ST_TO_ADDR
// sRocket := false ;
10971: LD_ADDR_EXP 48
10975: PUSH
10976: LD_INT 0
10978: ST_TO_ADDR
// sSpeed := false ;
10979: LD_ADDR_EXP 47
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// sEngine := false ;
10987: LD_ADDR_EXP 49
10991: PUSH
10992: LD_INT 0
10994: ST_TO_ADDR
// sSpec := false ;
10995: LD_ADDR_EXP 46
10999: PUSH
11000: LD_INT 0
11002: ST_TO_ADDR
// sLevel := false ;
11003: LD_ADDR_EXP 50
11007: PUSH
11008: LD_INT 0
11010: ST_TO_ADDR
// sArmoury := false ;
11011: LD_ADDR_EXP 51
11015: PUSH
11016: LD_INT 0
11018: ST_TO_ADDR
// sRadar := false ;
11019: LD_ADDR_EXP 52
11023: PUSH
11024: LD_INT 0
11026: ST_TO_ADDR
// sBunker := false ;
11027: LD_ADDR_EXP 53
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// sHack := false ;
11035: LD_ADDR_EXP 54
11039: PUSH
11040: LD_INT 0
11042: ST_TO_ADDR
// sFire := false ;
11043: LD_ADDR_EXP 55
11047: PUSH
11048: LD_INT 0
11050: ST_TO_ADDR
// sRefresh := false ;
11051: LD_ADDR_EXP 56
11055: PUSH
11056: LD_INT 0
11058: ST_TO_ADDR
// sExp := false ;
11059: LD_ADDR_EXP 57
11063: PUSH
11064: LD_INT 0
11066: ST_TO_ADDR
// sDepot := false ;
11067: LD_ADDR_EXP 58
11071: PUSH
11072: LD_INT 0
11074: ST_TO_ADDR
// sFlag := false ;
11075: LD_ADDR_EXP 59
11079: PUSH
11080: LD_INT 0
11082: ST_TO_ADDR
// sKamikadze := false ;
11083: LD_ADDR_EXP 67
11087: PUSH
11088: LD_INT 0
11090: ST_TO_ADDR
// sTroll := false ;
11091: LD_ADDR_EXP 68
11095: PUSH
11096: LD_INT 0
11098: ST_TO_ADDR
// sSlow := false ;
11099: LD_ADDR_EXP 69
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// sLack := false ;
11107: LD_ADDR_EXP 70
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// sTank := false ;
11115: LD_ADDR_EXP 72
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// sRemote := false ;
11123: LD_ADDR_EXP 73
11127: PUSH
11128: LD_INT 0
11130: ST_TO_ADDR
// sPowell := false ;
11131: LD_ADDR_EXP 74
11135: PUSH
11136: LD_INT 0
11138: ST_TO_ADDR
// sTeleport := false ;
11139: LD_ADDR_EXP 77
11143: PUSH
11144: LD_INT 0
11146: ST_TO_ADDR
// sOilTower := false ;
11147: LD_ADDR_EXP 79
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// sShovel := false ;
11155: LD_ADDR_EXP 80
11159: PUSH
11160: LD_INT 0
11162: ST_TO_ADDR
// sSheik := false ;
11163: LD_ADDR_EXP 81
11167: PUSH
11168: LD_INT 0
11170: ST_TO_ADDR
// sEarthquake := false ;
11171: LD_ADDR_EXP 83
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// sAI := false ;
11179: LD_ADDR_EXP 84
11183: PUSH
11184: LD_INT 0
11186: ST_TO_ADDR
// sCargo := false ;
11187: LD_ADDR_EXP 87
11191: PUSH
11192: LD_INT 0
11194: ST_TO_ADDR
// sDLaser := false ;
11195: LD_ADDR_EXP 88
11199: PUSH
11200: LD_INT 0
11202: ST_TO_ADDR
// sExchange := false ;
11203: LD_ADDR_EXP 89
11207: PUSH
11208: LD_INT 0
11210: ST_TO_ADDR
// sFac := false ;
11211: LD_ADDR_EXP 90
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// sPower := false ;
11219: LD_ADDR_EXP 91
11223: PUSH
11224: LD_INT 0
11226: ST_TO_ADDR
// sRandom := false ;
11227: LD_ADDR_EXP 92
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// sShield := false ;
11235: LD_ADDR_EXP 93
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// sTime := false ;
11243: LD_ADDR_EXP 94
11247: PUSH
11248: LD_INT 0
11250: ST_TO_ADDR
// sTools := false ;
11251: LD_ADDR_EXP 95
11255: PUSH
11256: LD_INT 0
11258: ST_TO_ADDR
// sSold := false ;
11259: LD_ADDR_EXP 60
11263: PUSH
11264: LD_INT 0
11266: ST_TO_ADDR
// sDiff := false ;
11267: LD_ADDR_EXP 61
11271: PUSH
11272: LD_INT 0
11274: ST_TO_ADDR
// sFog := false ;
11275: LD_ADDR_EXP 64
11279: PUSH
11280: LD_INT 0
11282: ST_TO_ADDR
// sReset := false ;
11283: LD_ADDR_EXP 65
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// sSun := false ;
11291: LD_ADDR_EXP 66
11295: PUSH
11296: LD_INT 0
11298: ST_TO_ADDR
// sTiger := false ;
11299: LD_ADDR_EXP 62
11303: PUSH
11304: LD_INT 0
11306: ST_TO_ADDR
// sBomb := false ;
11307: LD_ADDR_EXP 63
11311: PUSH
11312: LD_INT 0
11314: ST_TO_ADDR
// sWound := false ;
11315: LD_ADDR_EXP 71
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// sBetray := false ;
11323: LD_ADDR_EXP 75
11327: PUSH
11328: LD_INT 0
11330: ST_TO_ADDR
// sContamin := false ;
11331: LD_ADDR_EXP 76
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// sOil := false ;
11339: LD_ADDR_EXP 78
11343: PUSH
11344: LD_INT 0
11346: ST_TO_ADDR
// sStu := false ;
11347: LD_ADDR_EXP 82
11351: PUSH
11352: LD_INT 0
11354: ST_TO_ADDR
// sBazooka := false ;
11355: LD_ADDR_EXP 85
11359: PUSH
11360: LD_INT 0
11362: ST_TO_ADDR
// sMortar := false ;
11363: LD_ADDR_EXP 86
11367: PUSH
11368: LD_INT 0
11370: ST_TO_ADDR
// sRanger := false ;
11371: LD_ADDR_EXP 96
11375: PUSH
11376: LD_INT 0
11378: ST_TO_ADDR
// sComputer := false ;
11379: LD_ADDR_EXP 97
11383: PUSH
11384: LD_INT 0
11386: ST_TO_ADDR
// s30 := false ;
11387: LD_ADDR_EXP 98
11391: PUSH
11392: LD_INT 0
11394: ST_TO_ADDR
// s60 := false ;
11395: LD_ADDR_EXP 99
11399: PUSH
11400: LD_INT 0
11402: ST_TO_ADDR
// end ;
11403: LD_VAR 0 1
11407: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11408: LD_INT 0
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
11414: PPUSH
// result := [ ] ;
11415: LD_ADDR_VAR 0 1
11419: PUSH
11420: EMPTY
11421: ST_TO_ADDR
// if campaign_id = 1 then
11422: LD_OWVAR 69
11426: PUSH
11427: LD_INT 1
11429: EQUAL
11430: IFFALSE 14596
// begin case mission_number of 1 :
11432: LD_OWVAR 70
11436: PUSH
11437: LD_INT 1
11439: DOUBLE
11440: EQUAL
11441: IFTRUE 11445
11443: GO 11521
11445: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11446: LD_ADDR_VAR 0 1
11450: PUSH
11451: LD_INT 2
11453: PUSH
11454: LD_INT 4
11456: PUSH
11457: LD_INT 11
11459: PUSH
11460: LD_INT 12
11462: PUSH
11463: LD_INT 15
11465: PUSH
11466: LD_INT 16
11468: PUSH
11469: LD_INT 22
11471: PUSH
11472: LD_INT 23
11474: PUSH
11475: LD_INT 26
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 101
11491: PUSH
11492: LD_INT 102
11494: PUSH
11495: LD_INT 106
11497: PUSH
11498: LD_INT 116
11500: PUSH
11501: LD_INT 117
11503: PUSH
11504: LD_INT 118
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: ST_TO_ADDR
11519: GO 14594
11521: LD_INT 2
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11613
11529: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11530: LD_ADDR_VAR 0 1
11534: PUSH
11535: LD_INT 2
11537: PUSH
11538: LD_INT 4
11540: PUSH
11541: LD_INT 11
11543: PUSH
11544: LD_INT 12
11546: PUSH
11547: LD_INT 15
11549: PUSH
11550: LD_INT 16
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 23
11558: PUSH
11559: LD_INT 26
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 101
11575: PUSH
11576: LD_INT 102
11578: PUSH
11579: LD_INT 105
11581: PUSH
11582: LD_INT 106
11584: PUSH
11585: LD_INT 108
11587: PUSH
11588: LD_INT 116
11590: PUSH
11591: LD_INT 117
11593: PUSH
11594: LD_INT 118
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: ST_TO_ADDR
11611: GO 14594
11613: LD_INT 3
11615: DOUBLE
11616: EQUAL
11617: IFTRUE 11621
11619: GO 11709
11621: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11622: LD_ADDR_VAR 0 1
11626: PUSH
11627: LD_INT 2
11629: PUSH
11630: LD_INT 4
11632: PUSH
11633: LD_INT 5
11635: PUSH
11636: LD_INT 11
11638: PUSH
11639: LD_INT 12
11641: PUSH
11642: LD_INT 15
11644: PUSH
11645: LD_INT 16
11647: PUSH
11648: LD_INT 22
11650: PUSH
11651: LD_INT 26
11653: PUSH
11654: LD_INT 36
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 101
11671: PUSH
11672: LD_INT 102
11674: PUSH
11675: LD_INT 105
11677: PUSH
11678: LD_INT 106
11680: PUSH
11681: LD_INT 108
11683: PUSH
11684: LD_INT 116
11686: PUSH
11687: LD_INT 117
11689: PUSH
11690: LD_INT 118
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: ST_TO_ADDR
11707: GO 14594
11709: LD_INT 4
11711: DOUBLE
11712: EQUAL
11713: IFTRUE 11717
11715: GO 11813
11717: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11718: LD_ADDR_VAR 0 1
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: LD_INT 4
11728: PUSH
11729: LD_INT 5
11731: PUSH
11732: LD_INT 8
11734: PUSH
11735: LD_INT 11
11737: PUSH
11738: LD_INT 12
11740: PUSH
11741: LD_INT 15
11743: PUSH
11744: LD_INT 16
11746: PUSH
11747: LD_INT 22
11749: PUSH
11750: LD_INT 23
11752: PUSH
11753: LD_INT 26
11755: PUSH
11756: LD_INT 36
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 101
11775: PUSH
11776: LD_INT 102
11778: PUSH
11779: LD_INT 105
11781: PUSH
11782: LD_INT 106
11784: PUSH
11785: LD_INT 108
11787: PUSH
11788: LD_INT 116
11790: PUSH
11791: LD_INT 117
11793: PUSH
11794: LD_INT 118
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: ST_TO_ADDR
11811: GO 14594
11813: LD_INT 5
11815: DOUBLE
11816: EQUAL
11817: IFTRUE 11821
11819: GO 11933
11821: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11822: LD_ADDR_VAR 0 1
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: LD_INT 4
11832: PUSH
11833: LD_INT 5
11835: PUSH
11836: LD_INT 6
11838: PUSH
11839: LD_INT 8
11841: PUSH
11842: LD_INT 11
11844: PUSH
11845: LD_INT 12
11847: PUSH
11848: LD_INT 15
11850: PUSH
11851: LD_INT 16
11853: PUSH
11854: LD_INT 22
11856: PUSH
11857: LD_INT 23
11859: PUSH
11860: LD_INT 25
11862: PUSH
11863: LD_INT 26
11865: PUSH
11866: LD_INT 36
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 101
11887: PUSH
11888: LD_INT 102
11890: PUSH
11891: LD_INT 105
11893: PUSH
11894: LD_INT 106
11896: PUSH
11897: LD_INT 108
11899: PUSH
11900: LD_INT 109
11902: PUSH
11903: LD_INT 112
11905: PUSH
11906: LD_INT 116
11908: PUSH
11909: LD_INT 117
11911: PUSH
11912: LD_INT 118
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: ST_TO_ADDR
11931: GO 14594
11933: LD_INT 6
11935: DOUBLE
11936: EQUAL
11937: IFTRUE 11941
11939: GO 12073
11941: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11942: LD_ADDR_VAR 0 1
11946: PUSH
11947: LD_INT 2
11949: PUSH
11950: LD_INT 4
11952: PUSH
11953: LD_INT 5
11955: PUSH
11956: LD_INT 6
11958: PUSH
11959: LD_INT 8
11961: PUSH
11962: LD_INT 11
11964: PUSH
11965: LD_INT 12
11967: PUSH
11968: LD_INT 15
11970: PUSH
11971: LD_INT 16
11973: PUSH
11974: LD_INT 20
11976: PUSH
11977: LD_INT 21
11979: PUSH
11980: LD_INT 22
11982: PUSH
11983: LD_INT 23
11985: PUSH
11986: LD_INT 25
11988: PUSH
11989: LD_INT 26
11991: PUSH
11992: LD_INT 30
11994: PUSH
11995: LD_INT 31
11997: PUSH
11998: LD_INT 32
12000: PUSH
12001: LD_INT 36
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 101
12027: PUSH
12028: LD_INT 102
12030: PUSH
12031: LD_INT 105
12033: PUSH
12034: LD_INT 106
12036: PUSH
12037: LD_INT 108
12039: PUSH
12040: LD_INT 109
12042: PUSH
12043: LD_INT 112
12045: PUSH
12046: LD_INT 116
12048: PUSH
12049: LD_INT 117
12051: PUSH
12052: LD_INT 118
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: ST_TO_ADDR
12071: GO 14594
12073: LD_INT 7
12075: DOUBLE
12076: EQUAL
12077: IFTRUE 12081
12079: GO 12193
12081: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12082: LD_ADDR_VAR 0 1
12086: PUSH
12087: LD_INT 2
12089: PUSH
12090: LD_INT 4
12092: PUSH
12093: LD_INT 5
12095: PUSH
12096: LD_INT 7
12098: PUSH
12099: LD_INT 11
12101: PUSH
12102: LD_INT 12
12104: PUSH
12105: LD_INT 15
12107: PUSH
12108: LD_INT 16
12110: PUSH
12111: LD_INT 20
12113: PUSH
12114: LD_INT 21
12116: PUSH
12117: LD_INT 22
12119: PUSH
12120: LD_INT 23
12122: PUSH
12123: LD_INT 25
12125: PUSH
12126: LD_INT 26
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 101
12147: PUSH
12148: LD_INT 102
12150: PUSH
12151: LD_INT 103
12153: PUSH
12154: LD_INT 105
12156: PUSH
12157: LD_INT 106
12159: PUSH
12160: LD_INT 108
12162: PUSH
12163: LD_INT 112
12165: PUSH
12166: LD_INT 116
12168: PUSH
12169: LD_INT 117
12171: PUSH
12172: LD_INT 118
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: ST_TO_ADDR
12191: GO 14594
12193: LD_INT 8
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12341
12201: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12202: LD_ADDR_VAR 0 1
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 4
12212: PUSH
12213: LD_INT 5
12215: PUSH
12216: LD_INT 6
12218: PUSH
12219: LD_INT 7
12221: PUSH
12222: LD_INT 8
12224: PUSH
12225: LD_INT 11
12227: PUSH
12228: LD_INT 12
12230: PUSH
12231: LD_INT 15
12233: PUSH
12234: LD_INT 16
12236: PUSH
12237: LD_INT 20
12239: PUSH
12240: LD_INT 21
12242: PUSH
12243: LD_INT 22
12245: PUSH
12246: LD_INT 23
12248: PUSH
12249: LD_INT 25
12251: PUSH
12252: LD_INT 26
12254: PUSH
12255: LD_INT 30
12257: PUSH
12258: LD_INT 31
12260: PUSH
12261: LD_INT 32
12263: PUSH
12264: LD_INT 36
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 101
12291: PUSH
12292: LD_INT 102
12294: PUSH
12295: LD_INT 103
12297: PUSH
12298: LD_INT 105
12300: PUSH
12301: LD_INT 106
12303: PUSH
12304: LD_INT 108
12306: PUSH
12307: LD_INT 109
12309: PUSH
12310: LD_INT 112
12312: PUSH
12313: LD_INT 116
12315: PUSH
12316: LD_INT 117
12318: PUSH
12319: LD_INT 118
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: ST_TO_ADDR
12339: GO 14594
12341: LD_INT 9
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12497
12349: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12350: LD_ADDR_VAR 0 1
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 4
12360: PUSH
12361: LD_INT 5
12363: PUSH
12364: LD_INT 6
12366: PUSH
12367: LD_INT 7
12369: PUSH
12370: LD_INT 8
12372: PUSH
12373: LD_INT 11
12375: PUSH
12376: LD_INT 12
12378: PUSH
12379: LD_INT 15
12381: PUSH
12382: LD_INT 16
12384: PUSH
12385: LD_INT 20
12387: PUSH
12388: LD_INT 21
12390: PUSH
12391: LD_INT 22
12393: PUSH
12394: LD_INT 23
12396: PUSH
12397: LD_INT 25
12399: PUSH
12400: LD_INT 26
12402: PUSH
12403: LD_INT 28
12405: PUSH
12406: LD_INT 30
12408: PUSH
12409: LD_INT 31
12411: PUSH
12412: LD_INT 32
12414: PUSH
12415: LD_INT 36
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 101
12443: PUSH
12444: LD_INT 102
12446: PUSH
12447: LD_INT 103
12449: PUSH
12450: LD_INT 105
12452: PUSH
12453: LD_INT 106
12455: PUSH
12456: LD_INT 108
12458: PUSH
12459: LD_INT 109
12461: PUSH
12462: LD_INT 112
12464: PUSH
12465: LD_INT 114
12467: PUSH
12468: LD_INT 116
12470: PUSH
12471: LD_INT 117
12473: PUSH
12474: LD_INT 118
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: ST_TO_ADDR
12495: GO 14594
12497: LD_INT 10
12499: DOUBLE
12500: EQUAL
12501: IFTRUE 12505
12503: GO 12701
12505: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12506: LD_ADDR_VAR 0 1
12510: PUSH
12511: LD_INT 2
12513: PUSH
12514: LD_INT 4
12516: PUSH
12517: LD_INT 5
12519: PUSH
12520: LD_INT 6
12522: PUSH
12523: LD_INT 7
12525: PUSH
12526: LD_INT 8
12528: PUSH
12529: LD_INT 9
12531: PUSH
12532: LD_INT 10
12534: PUSH
12535: LD_INT 11
12537: PUSH
12538: LD_INT 12
12540: PUSH
12541: LD_INT 13
12543: PUSH
12544: LD_INT 14
12546: PUSH
12547: LD_INT 15
12549: PUSH
12550: LD_INT 16
12552: PUSH
12553: LD_INT 17
12555: PUSH
12556: LD_INT 18
12558: PUSH
12559: LD_INT 19
12561: PUSH
12562: LD_INT 20
12564: PUSH
12565: LD_INT 21
12567: PUSH
12568: LD_INT 22
12570: PUSH
12571: LD_INT 23
12573: PUSH
12574: LD_INT 24
12576: PUSH
12577: LD_INT 25
12579: PUSH
12580: LD_INT 26
12582: PUSH
12583: LD_INT 28
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 31
12591: PUSH
12592: LD_INT 32
12594: PUSH
12595: LD_INT 36
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 101
12631: PUSH
12632: LD_INT 102
12634: PUSH
12635: LD_INT 103
12637: PUSH
12638: LD_INT 104
12640: PUSH
12641: LD_INT 105
12643: PUSH
12644: LD_INT 106
12646: PUSH
12647: LD_INT 107
12649: PUSH
12650: LD_INT 108
12652: PUSH
12653: LD_INT 109
12655: PUSH
12656: LD_INT 110
12658: PUSH
12659: LD_INT 111
12661: PUSH
12662: LD_INT 112
12664: PUSH
12665: LD_INT 114
12667: PUSH
12668: LD_INT 116
12670: PUSH
12671: LD_INT 117
12673: PUSH
12674: LD_INT 118
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: ST_TO_ADDR
12699: GO 14594
12701: LD_INT 11
12703: DOUBLE
12704: EQUAL
12705: IFTRUE 12709
12707: GO 12913
12709: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12710: LD_ADDR_VAR 0 1
12714: PUSH
12715: LD_INT 2
12717: PUSH
12718: LD_INT 3
12720: PUSH
12721: LD_INT 4
12723: PUSH
12724: LD_INT 5
12726: PUSH
12727: LD_INT 6
12729: PUSH
12730: LD_INT 7
12732: PUSH
12733: LD_INT 8
12735: PUSH
12736: LD_INT 9
12738: PUSH
12739: LD_INT 10
12741: PUSH
12742: LD_INT 11
12744: PUSH
12745: LD_INT 12
12747: PUSH
12748: LD_INT 13
12750: PUSH
12751: LD_INT 14
12753: PUSH
12754: LD_INT 15
12756: PUSH
12757: LD_INT 16
12759: PUSH
12760: LD_INT 17
12762: PUSH
12763: LD_INT 18
12765: PUSH
12766: LD_INT 19
12768: PUSH
12769: LD_INT 20
12771: PUSH
12772: LD_INT 21
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_INT 23
12780: PUSH
12781: LD_INT 24
12783: PUSH
12784: LD_INT 25
12786: PUSH
12787: LD_INT 26
12789: PUSH
12790: LD_INT 28
12792: PUSH
12793: LD_INT 30
12795: PUSH
12796: LD_INT 31
12798: PUSH
12799: LD_INT 32
12801: PUSH
12802: LD_INT 34
12804: PUSH
12805: LD_INT 36
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 101
12843: PUSH
12844: LD_INT 102
12846: PUSH
12847: LD_INT 103
12849: PUSH
12850: LD_INT 104
12852: PUSH
12853: LD_INT 105
12855: PUSH
12856: LD_INT 106
12858: PUSH
12859: LD_INT 107
12861: PUSH
12862: LD_INT 108
12864: PUSH
12865: LD_INT 109
12867: PUSH
12868: LD_INT 110
12870: PUSH
12871: LD_INT 111
12873: PUSH
12874: LD_INT 112
12876: PUSH
12877: LD_INT 114
12879: PUSH
12880: LD_INT 116
12882: PUSH
12883: LD_INT 117
12885: PUSH
12886: LD_INT 118
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: ST_TO_ADDR
12911: GO 14594
12913: LD_INT 12
12915: DOUBLE
12916: EQUAL
12917: IFTRUE 12921
12919: GO 13141
12921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12922: LD_ADDR_VAR 0 1
12926: PUSH
12927: LD_INT 1
12929: PUSH
12930: LD_INT 2
12932: PUSH
12933: LD_INT 3
12935: PUSH
12936: LD_INT 4
12938: PUSH
12939: LD_INT 5
12941: PUSH
12942: LD_INT 6
12944: PUSH
12945: LD_INT 7
12947: PUSH
12948: LD_INT 8
12950: PUSH
12951: LD_INT 9
12953: PUSH
12954: LD_INT 10
12956: PUSH
12957: LD_INT 11
12959: PUSH
12960: LD_INT 12
12962: PUSH
12963: LD_INT 13
12965: PUSH
12966: LD_INT 14
12968: PUSH
12969: LD_INT 15
12971: PUSH
12972: LD_INT 16
12974: PUSH
12975: LD_INT 17
12977: PUSH
12978: LD_INT 18
12980: PUSH
12981: LD_INT 19
12983: PUSH
12984: LD_INT 20
12986: PUSH
12987: LD_INT 21
12989: PUSH
12990: LD_INT 22
12992: PUSH
12993: LD_INT 23
12995: PUSH
12996: LD_INT 24
12998: PUSH
12999: LD_INT 25
13001: PUSH
13002: LD_INT 26
13004: PUSH
13005: LD_INT 27
13007: PUSH
13008: LD_INT 28
13010: PUSH
13011: LD_INT 30
13013: PUSH
13014: LD_INT 31
13016: PUSH
13017: LD_INT 32
13019: PUSH
13020: LD_INT 33
13022: PUSH
13023: LD_INT 34
13025: PUSH
13026: LD_INT 36
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 101
13067: PUSH
13068: LD_INT 102
13070: PUSH
13071: LD_INT 103
13073: PUSH
13074: LD_INT 104
13076: PUSH
13077: LD_INT 105
13079: PUSH
13080: LD_INT 106
13082: PUSH
13083: LD_INT 107
13085: PUSH
13086: LD_INT 108
13088: PUSH
13089: LD_INT 109
13091: PUSH
13092: LD_INT 110
13094: PUSH
13095: LD_INT 111
13097: PUSH
13098: LD_INT 112
13100: PUSH
13101: LD_INT 113
13103: PUSH
13104: LD_INT 114
13106: PUSH
13107: LD_INT 116
13109: PUSH
13110: LD_INT 117
13112: PUSH
13113: LD_INT 118
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: ST_TO_ADDR
13139: GO 14594
13141: LD_INT 13
13143: DOUBLE
13144: EQUAL
13145: IFTRUE 13149
13147: GO 13357
13149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13150: LD_ADDR_VAR 0 1
13154: PUSH
13155: LD_INT 1
13157: PUSH
13158: LD_INT 2
13160: PUSH
13161: LD_INT 3
13163: PUSH
13164: LD_INT 4
13166: PUSH
13167: LD_INT 5
13169: PUSH
13170: LD_INT 8
13172: PUSH
13173: LD_INT 9
13175: PUSH
13176: LD_INT 10
13178: PUSH
13179: LD_INT 11
13181: PUSH
13182: LD_INT 12
13184: PUSH
13185: LD_INT 14
13187: PUSH
13188: LD_INT 15
13190: PUSH
13191: LD_INT 16
13193: PUSH
13194: LD_INT 17
13196: PUSH
13197: LD_INT 18
13199: PUSH
13200: LD_INT 19
13202: PUSH
13203: LD_INT 20
13205: PUSH
13206: LD_INT 21
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_INT 23
13214: PUSH
13215: LD_INT 24
13217: PUSH
13218: LD_INT 25
13220: PUSH
13221: LD_INT 26
13223: PUSH
13224: LD_INT 27
13226: PUSH
13227: LD_INT 28
13229: PUSH
13230: LD_INT 30
13232: PUSH
13233: LD_INT 31
13235: PUSH
13236: LD_INT 32
13238: PUSH
13239: LD_INT 33
13241: PUSH
13242: LD_INT 34
13244: PUSH
13245: LD_INT 36
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 101
13283: PUSH
13284: LD_INT 102
13286: PUSH
13287: LD_INT 103
13289: PUSH
13290: LD_INT 104
13292: PUSH
13293: LD_INT 105
13295: PUSH
13296: LD_INT 106
13298: PUSH
13299: LD_INT 107
13301: PUSH
13302: LD_INT 108
13304: PUSH
13305: LD_INT 109
13307: PUSH
13308: LD_INT 110
13310: PUSH
13311: LD_INT 111
13313: PUSH
13314: LD_INT 112
13316: PUSH
13317: LD_INT 113
13319: PUSH
13320: LD_INT 114
13322: PUSH
13323: LD_INT 116
13325: PUSH
13326: LD_INT 117
13328: PUSH
13329: LD_INT 118
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: ST_TO_ADDR
13355: GO 14594
13357: LD_INT 14
13359: DOUBLE
13360: EQUAL
13361: IFTRUE 13365
13363: GO 13589
13365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13366: LD_ADDR_VAR 0 1
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 3
13379: PUSH
13380: LD_INT 4
13382: PUSH
13383: LD_INT 5
13385: PUSH
13386: LD_INT 6
13388: PUSH
13389: LD_INT 7
13391: PUSH
13392: LD_INT 8
13394: PUSH
13395: LD_INT 9
13397: PUSH
13398: LD_INT 10
13400: PUSH
13401: LD_INT 11
13403: PUSH
13404: LD_INT 12
13406: PUSH
13407: LD_INT 13
13409: PUSH
13410: LD_INT 14
13412: PUSH
13413: LD_INT 15
13415: PUSH
13416: LD_INT 16
13418: PUSH
13419: LD_INT 17
13421: PUSH
13422: LD_INT 18
13424: PUSH
13425: LD_INT 19
13427: PUSH
13428: LD_INT 20
13430: PUSH
13431: LD_INT 21
13433: PUSH
13434: LD_INT 22
13436: PUSH
13437: LD_INT 23
13439: PUSH
13440: LD_INT 24
13442: PUSH
13443: LD_INT 25
13445: PUSH
13446: LD_INT 26
13448: PUSH
13449: LD_INT 27
13451: PUSH
13452: LD_INT 28
13454: PUSH
13455: LD_INT 29
13457: PUSH
13458: LD_INT 30
13460: PUSH
13461: LD_INT 31
13463: PUSH
13464: LD_INT 32
13466: PUSH
13467: LD_INT 33
13469: PUSH
13470: LD_INT 34
13472: PUSH
13473: LD_INT 36
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 101
13515: PUSH
13516: LD_INT 102
13518: PUSH
13519: LD_INT 103
13521: PUSH
13522: LD_INT 104
13524: PUSH
13525: LD_INT 105
13527: PUSH
13528: LD_INT 106
13530: PUSH
13531: LD_INT 107
13533: PUSH
13534: LD_INT 108
13536: PUSH
13537: LD_INT 109
13539: PUSH
13540: LD_INT 110
13542: PUSH
13543: LD_INT 111
13545: PUSH
13546: LD_INT 112
13548: PUSH
13549: LD_INT 113
13551: PUSH
13552: LD_INT 114
13554: PUSH
13555: LD_INT 116
13557: PUSH
13558: LD_INT 117
13560: PUSH
13561: LD_INT 118
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: ST_TO_ADDR
13587: GO 14594
13589: LD_INT 15
13591: DOUBLE
13592: EQUAL
13593: IFTRUE 13597
13595: GO 13821
13597: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13598: LD_ADDR_VAR 0 1
13602: PUSH
13603: LD_INT 1
13605: PUSH
13606: LD_INT 2
13608: PUSH
13609: LD_INT 3
13611: PUSH
13612: LD_INT 4
13614: PUSH
13615: LD_INT 5
13617: PUSH
13618: LD_INT 6
13620: PUSH
13621: LD_INT 7
13623: PUSH
13624: LD_INT 8
13626: PUSH
13627: LD_INT 9
13629: PUSH
13630: LD_INT 10
13632: PUSH
13633: LD_INT 11
13635: PUSH
13636: LD_INT 12
13638: PUSH
13639: LD_INT 13
13641: PUSH
13642: LD_INT 14
13644: PUSH
13645: LD_INT 15
13647: PUSH
13648: LD_INT 16
13650: PUSH
13651: LD_INT 17
13653: PUSH
13654: LD_INT 18
13656: PUSH
13657: LD_INT 19
13659: PUSH
13660: LD_INT 20
13662: PUSH
13663: LD_INT 21
13665: PUSH
13666: LD_INT 22
13668: PUSH
13669: LD_INT 23
13671: PUSH
13672: LD_INT 24
13674: PUSH
13675: LD_INT 25
13677: PUSH
13678: LD_INT 26
13680: PUSH
13681: LD_INT 27
13683: PUSH
13684: LD_INT 28
13686: PUSH
13687: LD_INT 29
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 31
13695: PUSH
13696: LD_INT 32
13698: PUSH
13699: LD_INT 33
13701: PUSH
13702: LD_INT 34
13704: PUSH
13705: LD_INT 36
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 101
13747: PUSH
13748: LD_INT 102
13750: PUSH
13751: LD_INT 103
13753: PUSH
13754: LD_INT 104
13756: PUSH
13757: LD_INT 105
13759: PUSH
13760: LD_INT 106
13762: PUSH
13763: LD_INT 107
13765: PUSH
13766: LD_INT 108
13768: PUSH
13769: LD_INT 109
13771: PUSH
13772: LD_INT 110
13774: PUSH
13775: LD_INT 111
13777: PUSH
13778: LD_INT 112
13780: PUSH
13781: LD_INT 113
13783: PUSH
13784: LD_INT 114
13786: PUSH
13787: LD_INT 116
13789: PUSH
13790: LD_INT 117
13792: PUSH
13793: LD_INT 118
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: ST_TO_ADDR
13819: GO 14594
13821: LD_INT 16
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13965
13829: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: LD_INT 7
13846: PUSH
13847: LD_INT 11
13849: PUSH
13850: LD_INT 12
13852: PUSH
13853: LD_INT 15
13855: PUSH
13856: LD_INT 16
13858: PUSH
13859: LD_INT 20
13861: PUSH
13862: LD_INT 21
13864: PUSH
13865: LD_INT 22
13867: PUSH
13868: LD_INT 23
13870: PUSH
13871: LD_INT 25
13873: PUSH
13874: LD_INT 26
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 31
13882: PUSH
13883: LD_INT 32
13885: PUSH
13886: LD_INT 33
13888: PUSH
13889: LD_INT 34
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 101
13915: PUSH
13916: LD_INT 102
13918: PUSH
13919: LD_INT 103
13921: PUSH
13922: LD_INT 106
13924: PUSH
13925: LD_INT 108
13927: PUSH
13928: LD_INT 112
13930: PUSH
13931: LD_INT 113
13933: PUSH
13934: LD_INT 114
13936: PUSH
13937: LD_INT 116
13939: PUSH
13940: LD_INT 117
13942: PUSH
13943: LD_INT 118
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: ST_TO_ADDR
13963: GO 14594
13965: LD_INT 17
13967: DOUBLE
13968: EQUAL
13969: IFTRUE 13973
13971: GO 14197
13973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13974: LD_ADDR_VAR 0 1
13978: PUSH
13979: LD_INT 1
13981: PUSH
13982: LD_INT 2
13984: PUSH
13985: LD_INT 3
13987: PUSH
13988: LD_INT 4
13990: PUSH
13991: LD_INT 5
13993: PUSH
13994: LD_INT 6
13996: PUSH
13997: LD_INT 7
13999: PUSH
14000: LD_INT 8
14002: PUSH
14003: LD_INT 9
14005: PUSH
14006: LD_INT 10
14008: PUSH
14009: LD_INT 11
14011: PUSH
14012: LD_INT 12
14014: PUSH
14015: LD_INT 13
14017: PUSH
14018: LD_INT 14
14020: PUSH
14021: LD_INT 15
14023: PUSH
14024: LD_INT 16
14026: PUSH
14027: LD_INT 17
14029: PUSH
14030: LD_INT 18
14032: PUSH
14033: LD_INT 19
14035: PUSH
14036: LD_INT 20
14038: PUSH
14039: LD_INT 21
14041: PUSH
14042: LD_INT 22
14044: PUSH
14045: LD_INT 23
14047: PUSH
14048: LD_INT 24
14050: PUSH
14051: LD_INT 25
14053: PUSH
14054: LD_INT 26
14056: PUSH
14057: LD_INT 27
14059: PUSH
14060: LD_INT 28
14062: PUSH
14063: LD_INT 29
14065: PUSH
14066: LD_INT 30
14068: PUSH
14069: LD_INT 31
14071: PUSH
14072: LD_INT 32
14074: PUSH
14075: LD_INT 33
14077: PUSH
14078: LD_INT 34
14080: PUSH
14081: LD_INT 36
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 101
14123: PUSH
14124: LD_INT 102
14126: PUSH
14127: LD_INT 103
14129: PUSH
14130: LD_INT 104
14132: PUSH
14133: LD_INT 105
14135: PUSH
14136: LD_INT 106
14138: PUSH
14139: LD_INT 107
14141: PUSH
14142: LD_INT 108
14144: PUSH
14145: LD_INT 109
14147: PUSH
14148: LD_INT 110
14150: PUSH
14151: LD_INT 111
14153: PUSH
14154: LD_INT 112
14156: PUSH
14157: LD_INT 113
14159: PUSH
14160: LD_INT 114
14162: PUSH
14163: LD_INT 116
14165: PUSH
14166: LD_INT 117
14168: PUSH
14169: LD_INT 118
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: ST_TO_ADDR
14195: GO 14594
14197: LD_INT 18
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14353
14205: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14206: LD_ADDR_VAR 0 1
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: LD_INT 7
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 16
14234: PUSH
14235: LD_INT 20
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_INT 23
14246: PUSH
14247: LD_INT 25
14249: PUSH
14250: LD_INT 26
14252: PUSH
14253: LD_INT 30
14255: PUSH
14256: LD_INT 31
14258: PUSH
14259: LD_INT 32
14261: PUSH
14262: LD_INT 33
14264: PUSH
14265: LD_INT 34
14267: PUSH
14268: LD_INT 35
14270: PUSH
14271: LD_INT 36
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 101
14299: PUSH
14300: LD_INT 102
14302: PUSH
14303: LD_INT 103
14305: PUSH
14306: LD_INT 106
14308: PUSH
14309: LD_INT 108
14311: PUSH
14312: LD_INT 112
14314: PUSH
14315: LD_INT 113
14317: PUSH
14318: LD_INT 114
14320: PUSH
14321: LD_INT 115
14323: PUSH
14324: LD_INT 116
14326: PUSH
14327: LD_INT 117
14329: PUSH
14330: LD_INT 118
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: ST_TO_ADDR
14351: GO 14594
14353: LD_INT 19
14355: DOUBLE
14356: EQUAL
14357: IFTRUE 14361
14359: GO 14593
14361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14362: LD_ADDR_VAR 0 1
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: LD_INT 4
14378: PUSH
14379: LD_INT 5
14381: PUSH
14382: LD_INT 6
14384: PUSH
14385: LD_INT 7
14387: PUSH
14388: LD_INT 8
14390: PUSH
14391: LD_INT 9
14393: PUSH
14394: LD_INT 10
14396: PUSH
14397: LD_INT 11
14399: PUSH
14400: LD_INT 12
14402: PUSH
14403: LD_INT 13
14405: PUSH
14406: LD_INT 14
14408: PUSH
14409: LD_INT 15
14411: PUSH
14412: LD_INT 16
14414: PUSH
14415: LD_INT 17
14417: PUSH
14418: LD_INT 18
14420: PUSH
14421: LD_INT 19
14423: PUSH
14424: LD_INT 20
14426: PUSH
14427: LD_INT 21
14429: PUSH
14430: LD_INT 22
14432: PUSH
14433: LD_INT 23
14435: PUSH
14436: LD_INT 24
14438: PUSH
14439: LD_INT 25
14441: PUSH
14442: LD_INT 26
14444: PUSH
14445: LD_INT 27
14447: PUSH
14448: LD_INT 28
14450: PUSH
14451: LD_INT 29
14453: PUSH
14454: LD_INT 30
14456: PUSH
14457: LD_INT 31
14459: PUSH
14460: LD_INT 32
14462: PUSH
14463: LD_INT 33
14465: PUSH
14466: LD_INT 34
14468: PUSH
14469: LD_INT 35
14471: PUSH
14472: LD_INT 36
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 101
14515: PUSH
14516: LD_INT 102
14518: PUSH
14519: LD_INT 103
14521: PUSH
14522: LD_INT 104
14524: PUSH
14525: LD_INT 105
14527: PUSH
14528: LD_INT 106
14530: PUSH
14531: LD_INT 107
14533: PUSH
14534: LD_INT 108
14536: PUSH
14537: LD_INT 109
14539: PUSH
14540: LD_INT 110
14542: PUSH
14543: LD_INT 111
14545: PUSH
14546: LD_INT 112
14548: PUSH
14549: LD_INT 113
14551: PUSH
14552: LD_INT 114
14554: PUSH
14555: LD_INT 115
14557: PUSH
14558: LD_INT 116
14560: PUSH
14561: LD_INT 117
14563: PUSH
14564: LD_INT 118
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: ST_TO_ADDR
14591: GO 14594
14593: POP
// end else
14594: GO 14825
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14596: LD_ADDR_VAR 0 1
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: LD_INT 3
14609: PUSH
14610: LD_INT 4
14612: PUSH
14613: LD_INT 5
14615: PUSH
14616: LD_INT 6
14618: PUSH
14619: LD_INT 7
14621: PUSH
14622: LD_INT 8
14624: PUSH
14625: LD_INT 9
14627: PUSH
14628: LD_INT 10
14630: PUSH
14631: LD_INT 11
14633: PUSH
14634: LD_INT 12
14636: PUSH
14637: LD_INT 13
14639: PUSH
14640: LD_INT 14
14642: PUSH
14643: LD_INT 15
14645: PUSH
14646: LD_INT 16
14648: PUSH
14649: LD_INT 17
14651: PUSH
14652: LD_INT 18
14654: PUSH
14655: LD_INT 19
14657: PUSH
14658: LD_INT 20
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: LD_INT 22
14666: PUSH
14667: LD_INT 23
14669: PUSH
14670: LD_INT 24
14672: PUSH
14673: LD_INT 25
14675: PUSH
14676: LD_INT 26
14678: PUSH
14679: LD_INT 27
14681: PUSH
14682: LD_INT 28
14684: PUSH
14685: LD_INT 29
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 31
14693: PUSH
14694: LD_INT 32
14696: PUSH
14697: LD_INT 33
14699: PUSH
14700: LD_INT 34
14702: PUSH
14703: LD_INT 35
14705: PUSH
14706: LD_INT 36
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 101
14749: PUSH
14750: LD_INT 102
14752: PUSH
14753: LD_INT 103
14755: PUSH
14756: LD_INT 104
14758: PUSH
14759: LD_INT 105
14761: PUSH
14762: LD_INT 106
14764: PUSH
14765: LD_INT 107
14767: PUSH
14768: LD_INT 108
14770: PUSH
14771: LD_INT 109
14773: PUSH
14774: LD_INT 110
14776: PUSH
14777: LD_INT 111
14779: PUSH
14780: LD_INT 112
14782: PUSH
14783: LD_INT 113
14785: PUSH
14786: LD_INT 114
14788: PUSH
14789: LD_INT 115
14791: PUSH
14792: LD_INT 116
14794: PUSH
14795: LD_INT 117
14797: PUSH
14798: LD_INT 118
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: ST_TO_ADDR
// if result then
14825: LD_VAR 0 1
14829: IFFALSE 15118
// begin normal :=  ;
14831: LD_ADDR_VAR 0 3
14835: PUSH
14836: LD_STRING 
14838: ST_TO_ADDR
// hardcore :=  ;
14839: LD_ADDR_VAR 0 4
14843: PUSH
14844: LD_STRING 
14846: ST_TO_ADDR
// for i = 1 to normalCounter do
14847: LD_ADDR_VAR 0 5
14851: PUSH
14852: DOUBLE
14853: LD_INT 1
14855: DEC
14856: ST_TO_ADDR
14857: LD_EXP 44
14861: PUSH
14862: FOR_TO
14863: IFFALSE 14964
// begin tmp := 0 ;
14865: LD_ADDR_VAR 0 2
14869: PUSH
14870: LD_STRING 0
14872: ST_TO_ADDR
// if result [ 1 ] then
14873: LD_VAR 0 1
14877: PUSH
14878: LD_INT 1
14880: ARRAY
14881: IFFALSE 14946
// if result [ 1 ] [ 1 ] = i then
14883: LD_VAR 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PUSH
14896: LD_VAR 0 5
14900: EQUAL
14901: IFFALSE 14946
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14903: LD_ADDR_VAR 0 1
14907: PUSH
14908: LD_VAR 0 1
14912: PPUSH
14913: LD_INT 1
14915: PPUSH
14916: LD_VAR 0 1
14920: PUSH
14921: LD_INT 1
14923: ARRAY
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: CALL_OW 3
14932: PPUSH
14933: CALL_OW 1
14937: ST_TO_ADDR
// tmp := 1 ;
14938: LD_ADDR_VAR 0 2
14942: PUSH
14943: LD_STRING 1
14945: ST_TO_ADDR
// end ; normal := normal & tmp ;
14946: LD_ADDR_VAR 0 3
14950: PUSH
14951: LD_VAR 0 3
14955: PUSH
14956: LD_VAR 0 2
14960: STR
14961: ST_TO_ADDR
// end ;
14962: GO 14862
14964: POP
14965: POP
// for i = 1 to hardcoreCounter do
14966: LD_ADDR_VAR 0 5
14970: PUSH
14971: DOUBLE
14972: LD_INT 1
14974: DEC
14975: ST_TO_ADDR
14976: LD_EXP 45
14980: PUSH
14981: FOR_TO
14982: IFFALSE 15087
// begin tmp := 0 ;
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: LD_STRING 0
14991: ST_TO_ADDR
// if result [ 2 ] then
14992: LD_VAR 0 1
14996: PUSH
14997: LD_INT 2
14999: ARRAY
15000: IFFALSE 15069
// if result [ 2 ] [ 1 ] = 100 + i then
15002: LD_VAR 0 1
15006: PUSH
15007: LD_INT 2
15009: ARRAY
15010: PUSH
15011: LD_INT 1
15013: ARRAY
15014: PUSH
15015: LD_INT 100
15017: PUSH
15018: LD_VAR 0 5
15022: PLUS
15023: EQUAL
15024: IFFALSE 15069
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15026: LD_ADDR_VAR 0 1
15030: PUSH
15031: LD_VAR 0 1
15035: PPUSH
15036: LD_INT 2
15038: PPUSH
15039: LD_VAR 0 1
15043: PUSH
15044: LD_INT 2
15046: ARRAY
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: CALL_OW 3
15055: PPUSH
15056: CALL_OW 1
15060: ST_TO_ADDR
// tmp := 1 ;
15061: LD_ADDR_VAR 0 2
15065: PUSH
15066: LD_STRING 1
15068: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15069: LD_ADDR_VAR 0 4
15073: PUSH
15074: LD_VAR 0 4
15078: PUSH
15079: LD_VAR 0 2
15083: STR
15084: ST_TO_ADDR
// end ;
15085: GO 14981
15087: POP
15088: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15089: LD_STRING getStreamItemsFromMission("
15091: PUSH
15092: LD_VAR 0 3
15096: STR
15097: PUSH
15098: LD_STRING ","
15100: STR
15101: PUSH
15102: LD_VAR 0 4
15106: STR
15107: PUSH
15108: LD_STRING ")
15110: STR
15111: PPUSH
15112: CALL_OW 559
// end else
15116: GO 15125
// ToLua ( getStreamItemsFromMission("","") ) ;
15118: LD_STRING getStreamItemsFromMission("","")
15120: PPUSH
15121: CALL_OW 559
// end ;
15125: LD_VAR 0 1
15129: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15130: LD_EXP 43
15134: PUSH
15135: LD_EXP 48
15139: AND
15140: IFFALSE 15264
15142: GO 15144
15144: DISABLE
15145: LD_INT 0
15147: PPUSH
15148: PPUSH
// begin enable ;
15149: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15150: LD_ADDR_VAR 0 2
15154: PUSH
15155: LD_INT 22
15157: PUSH
15158: LD_OWVAR 2
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 34
15172: PUSH
15173: LD_INT 7
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 34
15182: PUSH
15183: LD_INT 45
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 34
15192: PUSH
15193: LD_INT 28
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 34
15202: PUSH
15203: LD_INT 47
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PPUSH
15221: CALL_OW 69
15225: ST_TO_ADDR
// if not tmp then
15226: LD_VAR 0 2
15230: NOT
15231: IFFALSE 15235
// exit ;
15233: GO 15264
// for i in tmp do
15235: LD_ADDR_VAR 0 1
15239: PUSH
15240: LD_VAR 0 2
15244: PUSH
15245: FOR_IN
15246: IFFALSE 15262
// begin SetLives ( i , 0 ) ;
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_INT 0
15255: PPUSH
15256: CALL_OW 234
// end ;
15260: GO 15245
15262: POP
15263: POP
// end ;
15264: PPOPN 2
15266: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15267: LD_EXP 43
15271: PUSH
15272: LD_EXP 49
15276: AND
15277: IFFALSE 15361
15279: GO 15281
15281: DISABLE
15282: LD_INT 0
15284: PPUSH
15285: PPUSH
// begin enable ;
15286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15287: LD_ADDR_VAR 0 2
15291: PUSH
15292: LD_INT 22
15294: PUSH
15295: LD_OWVAR 2
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 32
15306: PUSH
15307: LD_INT 3
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PPUSH
15318: CALL_OW 69
15322: ST_TO_ADDR
// if not tmp then
15323: LD_VAR 0 2
15327: NOT
15328: IFFALSE 15332
// exit ;
15330: GO 15361
// for i in tmp do
15332: LD_ADDR_VAR 0 1
15336: PUSH
15337: LD_VAR 0 2
15341: PUSH
15342: FOR_IN
15343: IFFALSE 15359
// begin SetLives ( i , 0 ) ;
15345: LD_VAR 0 1
15349: PPUSH
15350: LD_INT 0
15352: PPUSH
15353: CALL_OW 234
// end ;
15357: GO 15342
15359: POP
15360: POP
// end ;
15361: PPOPN 2
15363: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15364: LD_EXP 43
15368: PUSH
15369: LD_EXP 46
15373: AND
15374: IFFALSE 15467
15376: GO 15378
15378: DISABLE
15379: LD_INT 0
15381: PPUSH
// begin enable ;
15382: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15383: LD_ADDR_VAR 0 1
15387: PUSH
15388: LD_INT 22
15390: PUSH
15391: LD_OWVAR 2
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 25
15405: PUSH
15406: LD_INT 5
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 25
15415: PUSH
15416: LD_INT 9
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 25
15425: PUSH
15426: LD_INT 8
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PPUSH
15443: CALL_OW 69
15447: PUSH
15448: FOR_IN
15449: IFFALSE 15465
// begin SetClass ( i , 1 ) ;
15451: LD_VAR 0 1
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 336
// end ;
15463: GO 15448
15465: POP
15466: POP
// end ;
15467: PPOPN 1
15469: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15470: LD_EXP 43
15474: PUSH
15475: LD_EXP 47
15479: AND
15480: PUSH
15481: LD_OWVAR 65
15485: PUSH
15486: LD_INT 7
15488: LESS
15489: AND
15490: IFFALSE 15504
15492: GO 15494
15494: DISABLE
// begin enable ;
15495: ENABLE
// game_speed := 7 ;
15496: LD_ADDR_OWVAR 65
15500: PUSH
15501: LD_INT 7
15503: ST_TO_ADDR
// end ;
15504: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15505: LD_EXP 43
15509: PUSH
15510: LD_EXP 50
15514: AND
15515: IFFALSE 15717
15517: GO 15519
15519: DISABLE
15520: LD_INT 0
15522: PPUSH
15523: PPUSH
15524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15525: LD_ADDR_VAR 0 3
15529: PUSH
15530: LD_INT 81
15532: PUSH
15533: LD_OWVAR 2
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PPUSH
15556: CALL_OW 69
15560: ST_TO_ADDR
// if not tmp then
15561: LD_VAR 0 3
15565: NOT
15566: IFFALSE 15570
// exit ;
15568: GO 15717
// if tmp > 5 then
15570: LD_VAR 0 3
15574: PUSH
15575: LD_INT 5
15577: GREATER
15578: IFFALSE 15590
// k := 5 else
15580: LD_ADDR_VAR 0 2
15584: PUSH
15585: LD_INT 5
15587: ST_TO_ADDR
15588: GO 15600
// k := tmp ;
15590: LD_ADDR_VAR 0 2
15594: PUSH
15595: LD_VAR 0 3
15599: ST_TO_ADDR
// for i := 1 to k do
15600: LD_ADDR_VAR 0 1
15604: PUSH
15605: DOUBLE
15606: LD_INT 1
15608: DEC
15609: ST_TO_ADDR
15610: LD_VAR 0 2
15614: PUSH
15615: FOR_TO
15616: IFFALSE 15715
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15618: LD_VAR 0 3
15622: PUSH
15623: LD_VAR 0 1
15627: ARRAY
15628: PPUSH
15629: LD_VAR 0 1
15633: PUSH
15634: LD_INT 4
15636: MOD
15637: PUSH
15638: LD_INT 1
15640: PLUS
15641: PPUSH
15642: CALL_OW 259
15646: PUSH
15647: LD_INT 10
15649: LESS
15650: IFFALSE 15713
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15652: LD_VAR 0 3
15656: PUSH
15657: LD_VAR 0 1
15661: ARRAY
15662: PPUSH
15663: LD_VAR 0 1
15667: PUSH
15668: LD_INT 4
15670: MOD
15671: PUSH
15672: LD_INT 1
15674: PLUS
15675: PPUSH
15676: LD_VAR 0 3
15680: PUSH
15681: LD_VAR 0 1
15685: ARRAY
15686: PPUSH
15687: LD_VAR 0 1
15691: PUSH
15692: LD_INT 4
15694: MOD
15695: PUSH
15696: LD_INT 1
15698: PLUS
15699: PPUSH
15700: CALL_OW 259
15704: PUSH
15705: LD_INT 1
15707: PLUS
15708: PPUSH
15709: CALL_OW 237
15713: GO 15615
15715: POP
15716: POP
// end ;
15717: PPOPN 3
15719: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15720: LD_EXP 43
15724: PUSH
15725: LD_EXP 51
15729: AND
15730: IFFALSE 15750
15732: GO 15734
15734: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15735: LD_INT 4
15737: PPUSH
15738: LD_OWVAR 2
15742: PPUSH
15743: LD_INT 0
15745: PPUSH
15746: CALL_OW 324
15750: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15751: LD_EXP 43
15755: PUSH
15756: LD_EXP 80
15760: AND
15761: IFFALSE 15781
15763: GO 15765
15765: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15766: LD_INT 19
15768: PPUSH
15769: LD_OWVAR 2
15773: PPUSH
15774: LD_INT 0
15776: PPUSH
15777: CALL_OW 324
15781: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15782: LD_EXP 43
15786: PUSH
15787: LD_EXP 52
15791: AND
15792: IFFALSE 15894
15794: GO 15796
15796: DISABLE
15797: LD_INT 0
15799: PPUSH
15800: PPUSH
// begin enable ;
15801: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15802: LD_ADDR_VAR 0 2
15806: PUSH
15807: LD_INT 22
15809: PUSH
15810: LD_OWVAR 2
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: LD_INT 34
15824: PUSH
15825: LD_INT 11
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 34
15834: PUSH
15835: LD_INT 30
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: ST_TO_ADDR
// if not tmp then
15856: LD_VAR 0 2
15860: NOT
15861: IFFALSE 15865
// exit ;
15863: GO 15894
// for i in tmp do
15865: LD_ADDR_VAR 0 1
15869: PUSH
15870: LD_VAR 0 2
15874: PUSH
15875: FOR_IN
15876: IFFALSE 15892
// begin SetLives ( i , 0 ) ;
15878: LD_VAR 0 1
15882: PPUSH
15883: LD_INT 0
15885: PPUSH
15886: CALL_OW 234
// end ;
15890: GO 15875
15892: POP
15893: POP
// end ;
15894: PPOPN 2
15896: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15897: LD_EXP 43
15901: PUSH
15902: LD_EXP 53
15906: AND
15907: IFFALSE 15927
15909: GO 15911
15911: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15912: LD_INT 32
15914: PPUSH
15915: LD_OWVAR 2
15919: PPUSH
15920: LD_INT 0
15922: PPUSH
15923: CALL_OW 324
15927: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15928: LD_EXP 43
15932: PUSH
15933: LD_EXP 54
15937: AND
15938: IFFALSE 16119
15940: GO 15942
15942: DISABLE
15943: LD_INT 0
15945: PPUSH
15946: PPUSH
15947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15948: LD_ADDR_VAR 0 2
15952: PUSH
15953: LD_INT 22
15955: PUSH
15956: LD_OWVAR 2
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 33
15967: PUSH
15968: LD_INT 3
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 69
15983: ST_TO_ADDR
// if not tmp then
15984: LD_VAR 0 2
15988: NOT
15989: IFFALSE 15993
// exit ;
15991: GO 16119
// side := 0 ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_INT 0
16000: ST_TO_ADDR
// for i := 1 to 8 do
16001: LD_ADDR_VAR 0 1
16005: PUSH
16006: DOUBLE
16007: LD_INT 1
16009: DEC
16010: ST_TO_ADDR
16011: LD_INT 8
16013: PUSH
16014: FOR_TO
16015: IFFALSE 16063
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16017: LD_OWVAR 2
16021: PUSH
16022: LD_VAR 0 1
16026: NONEQUAL
16027: PUSH
16028: LD_OWVAR 2
16032: PPUSH
16033: LD_VAR 0 1
16037: PPUSH
16038: CALL_OW 81
16042: PUSH
16043: LD_INT 2
16045: EQUAL
16046: AND
16047: IFFALSE 16061
// begin side := i ;
16049: LD_ADDR_VAR 0 3
16053: PUSH
16054: LD_VAR 0 1
16058: ST_TO_ADDR
// break ;
16059: GO 16063
// end ;
16061: GO 16014
16063: POP
16064: POP
// if not side then
16065: LD_VAR 0 3
16069: NOT
16070: IFFALSE 16074
// exit ;
16072: GO 16119
// for i := 1 to tmp do
16074: LD_ADDR_VAR 0 1
16078: PUSH
16079: DOUBLE
16080: LD_INT 1
16082: DEC
16083: ST_TO_ADDR
16084: LD_VAR 0 2
16088: PUSH
16089: FOR_TO
16090: IFFALSE 16117
// if Prob ( 60 ) then
16092: LD_INT 60
16094: PPUSH
16095: CALL_OW 13
16099: IFFALSE 16115
// SetSide ( i , side ) ;
16101: LD_VAR 0 1
16105: PPUSH
16106: LD_VAR 0 3
16110: PPUSH
16111: CALL_OW 235
16115: GO 16089
16117: POP
16118: POP
// end ;
16119: PPOPN 3
16121: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16122: LD_EXP 43
16126: PUSH
16127: LD_EXP 56
16131: AND
16132: IFFALSE 16251
16134: GO 16136
16136: DISABLE
16137: LD_INT 0
16139: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16140: LD_ADDR_VAR 0 1
16144: PUSH
16145: LD_INT 22
16147: PUSH
16148: LD_OWVAR 2
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 1
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 3
16169: PUSH
16170: LD_INT 23
16172: PUSH
16173: LD_INT 0
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 69
16193: PUSH
16194: FOR_IN
16195: IFFALSE 16249
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 257
16206: PUSH
16207: LD_INT 1
16209: PUSH
16210: LD_INT 2
16212: PUSH
16213: LD_INT 3
16215: PUSH
16216: LD_INT 4
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: IN
16225: IFFALSE 16247
// SetClass ( un , rand ( 1 , 4 ) ) ;
16227: LD_VAR 0 1
16231: PPUSH
16232: LD_INT 1
16234: PPUSH
16235: LD_INT 4
16237: PPUSH
16238: CALL_OW 12
16242: PPUSH
16243: CALL_OW 336
16247: GO 16194
16249: POP
16250: POP
// end ;
16251: PPOPN 1
16253: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16254: LD_EXP 43
16258: PUSH
16259: LD_EXP 55
16263: AND
16264: IFFALSE 16343
16266: GO 16268
16268: DISABLE
16269: LD_INT 0
16271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: LD_INT 22
16279: PUSH
16280: LD_OWVAR 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 21
16291: PUSH
16292: LD_INT 3
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PPUSH
16303: CALL_OW 69
16307: ST_TO_ADDR
// if not tmp then
16308: LD_VAR 0 1
16312: NOT
16313: IFFALSE 16317
// exit ;
16315: GO 16343
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16317: LD_VAR 0 1
16321: PUSH
16322: LD_INT 1
16324: PPUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 12
16334: ARRAY
16335: PPUSH
16336: LD_INT 100
16338: PPUSH
16339: CALL_OW 234
// end ;
16343: PPOPN 1
16345: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16346: LD_EXP 43
16350: PUSH
16351: LD_EXP 57
16355: AND
16356: IFFALSE 16454
16358: GO 16360
16360: DISABLE
16361: LD_INT 0
16363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16364: LD_ADDR_VAR 0 1
16368: PUSH
16369: LD_INT 22
16371: PUSH
16372: LD_OWVAR 2
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 21
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PPUSH
16395: CALL_OW 69
16399: ST_TO_ADDR
// if not tmp then
16400: LD_VAR 0 1
16404: NOT
16405: IFFALSE 16409
// exit ;
16407: GO 16454
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16409: LD_VAR 0 1
16413: PUSH
16414: LD_INT 1
16416: PPUSH
16417: LD_VAR 0 1
16421: PPUSH
16422: CALL_OW 12
16426: ARRAY
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: LD_INT 4
16433: PPUSH
16434: CALL_OW 12
16438: PPUSH
16439: LD_INT 3000
16441: PPUSH
16442: LD_INT 9000
16444: PPUSH
16445: CALL_OW 12
16449: PPUSH
16450: CALL_OW 492
// end ;
16454: PPOPN 1
16456: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16457: LD_EXP 43
16461: PUSH
16462: LD_EXP 58
16466: AND
16467: IFFALSE 16487
16469: GO 16471
16471: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16472: LD_INT 1
16474: PPUSH
16475: LD_OWVAR 2
16479: PPUSH
16480: LD_INT 0
16482: PPUSH
16483: CALL_OW 324
16487: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16488: LD_EXP 43
16492: PUSH
16493: LD_EXP 59
16497: AND
16498: IFFALSE 16581
16500: GO 16502
16502: DISABLE
16503: LD_INT 0
16505: PPUSH
16506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16507: LD_ADDR_VAR 0 2
16511: PUSH
16512: LD_INT 22
16514: PUSH
16515: LD_OWVAR 2
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 21
16526: PUSH
16527: LD_INT 3
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PPUSH
16538: CALL_OW 69
16542: ST_TO_ADDR
// if not tmp then
16543: LD_VAR 0 2
16547: NOT
16548: IFFALSE 16552
// exit ;
16550: GO 16581
// for i in tmp do
16552: LD_ADDR_VAR 0 1
16556: PUSH
16557: LD_VAR 0 2
16561: PUSH
16562: FOR_IN
16563: IFFALSE 16579
// SetBLevel ( i , 10 ) ;
16565: LD_VAR 0 1
16569: PPUSH
16570: LD_INT 10
16572: PPUSH
16573: CALL_OW 241
16577: GO 16562
16579: POP
16580: POP
// end ;
16581: PPOPN 2
16583: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16584: LD_EXP 43
16588: PUSH
16589: LD_EXP 60
16593: AND
16594: IFFALSE 16705
16596: GO 16598
16598: DISABLE
16599: LD_INT 0
16601: PPUSH
16602: PPUSH
16603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16604: LD_ADDR_VAR 0 3
16608: PUSH
16609: LD_INT 22
16611: PUSH
16612: LD_OWVAR 2
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 25
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PPUSH
16635: CALL_OW 69
16639: ST_TO_ADDR
// if not tmp then
16640: LD_VAR 0 3
16644: NOT
16645: IFFALSE 16649
// exit ;
16647: GO 16705
// un := tmp [ rand ( 1 , tmp ) ] ;
16649: LD_ADDR_VAR 0 2
16653: PUSH
16654: LD_VAR 0 3
16658: PUSH
16659: LD_INT 1
16661: PPUSH
16662: LD_VAR 0 3
16666: PPUSH
16667: CALL_OW 12
16671: ARRAY
16672: ST_TO_ADDR
// if Crawls ( un ) then
16673: LD_VAR 0 2
16677: PPUSH
16678: CALL_OW 318
16682: IFFALSE 16693
// ComWalk ( un ) ;
16684: LD_VAR 0 2
16688: PPUSH
16689: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16693: LD_VAR 0 2
16697: PPUSH
16698: LD_INT 5
16700: PPUSH
16701: CALL_OW 336
// end ;
16705: PPOPN 3
16707: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16708: LD_EXP 43
16712: PUSH
16713: LD_EXP 61
16717: AND
16718: PUSH
16719: LD_OWVAR 67
16723: PUSH
16724: LD_INT 4
16726: LESS
16727: AND
16728: IFFALSE 16747
16730: GO 16732
16732: DISABLE
// begin Difficulty := Difficulty + 1 ;
16733: LD_ADDR_OWVAR 67
16737: PUSH
16738: LD_OWVAR 67
16742: PUSH
16743: LD_INT 1
16745: PLUS
16746: ST_TO_ADDR
// end ;
16747: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16748: LD_EXP 43
16752: PUSH
16753: LD_EXP 62
16757: AND
16758: IFFALSE 16861
16760: GO 16762
16762: DISABLE
16763: LD_INT 0
16765: PPUSH
// begin for i := 1 to 5 do
16766: LD_ADDR_VAR 0 1
16770: PUSH
16771: DOUBLE
16772: LD_INT 1
16774: DEC
16775: ST_TO_ADDR
16776: LD_INT 5
16778: PUSH
16779: FOR_TO
16780: IFFALSE 16859
// begin uc_nation := nation_nature ;
16782: LD_ADDR_OWVAR 21
16786: PUSH
16787: LD_INT 0
16789: ST_TO_ADDR
// uc_side := 0 ;
16790: LD_ADDR_OWVAR 20
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16798: LD_ADDR_OWVAR 29
16802: PUSH
16803: LD_INT 12
16805: PUSH
16806: LD_INT 12
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: ST_TO_ADDR
// hc_agressivity := 20 ;
16813: LD_ADDR_OWVAR 35
16817: PUSH
16818: LD_INT 20
16820: ST_TO_ADDR
// hc_class := class_tiger ;
16821: LD_ADDR_OWVAR 28
16825: PUSH
16826: LD_INT 14
16828: ST_TO_ADDR
// hc_gallery :=  ;
16829: LD_ADDR_OWVAR 33
16833: PUSH
16834: LD_STRING 
16836: ST_TO_ADDR
// hc_name :=  ;
16837: LD_ADDR_OWVAR 26
16841: PUSH
16842: LD_STRING 
16844: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16845: CALL_OW 44
16849: PPUSH
16850: LD_INT 0
16852: PPUSH
16853: CALL_OW 51
// end ;
16857: GO 16779
16859: POP
16860: POP
// end ;
16861: PPOPN 1
16863: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16864: LD_EXP 43
16868: PUSH
16869: LD_EXP 63
16873: AND
16874: IFFALSE 16883
16876: GO 16878
16878: DISABLE
// StreamSibBomb ;
16879: CALL 16884 0 0
16883: END
// export function StreamSibBomb ; var i , x , y ; begin
16884: LD_INT 0
16886: PPUSH
16887: PPUSH
16888: PPUSH
16889: PPUSH
// result := false ;
16890: LD_ADDR_VAR 0 1
16894: PUSH
16895: LD_INT 0
16897: ST_TO_ADDR
// for i := 1 to 16 do
16898: LD_ADDR_VAR 0 2
16902: PUSH
16903: DOUBLE
16904: LD_INT 1
16906: DEC
16907: ST_TO_ADDR
16908: LD_INT 16
16910: PUSH
16911: FOR_TO
16912: IFFALSE 17111
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16914: LD_ADDR_VAR 0 3
16918: PUSH
16919: LD_INT 10
16921: PUSH
16922: LD_INT 20
16924: PUSH
16925: LD_INT 30
16927: PUSH
16928: LD_INT 40
16930: PUSH
16931: LD_INT 50
16933: PUSH
16934: LD_INT 60
16936: PUSH
16937: LD_INT 70
16939: PUSH
16940: LD_INT 80
16942: PUSH
16943: LD_INT 90
16945: PUSH
16946: LD_INT 100
16948: PUSH
16949: LD_INT 110
16951: PUSH
16952: LD_INT 120
16954: PUSH
16955: LD_INT 130
16957: PUSH
16958: LD_INT 140
16960: PUSH
16961: LD_INT 150
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 1
16983: PPUSH
16984: LD_INT 15
16986: PPUSH
16987: CALL_OW 12
16991: ARRAY
16992: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16993: LD_ADDR_VAR 0 4
16997: PUSH
16998: LD_INT 10
17000: PUSH
17001: LD_INT 20
17003: PUSH
17004: LD_INT 30
17006: PUSH
17007: LD_INT 40
17009: PUSH
17010: LD_INT 50
17012: PUSH
17013: LD_INT 60
17015: PUSH
17016: LD_INT 70
17018: PUSH
17019: LD_INT 80
17021: PUSH
17022: LD_INT 90
17024: PUSH
17025: LD_INT 100
17027: PUSH
17028: LD_INT 110
17030: PUSH
17031: LD_INT 120
17033: PUSH
17034: LD_INT 130
17036: PUSH
17037: LD_INT 140
17039: PUSH
17040: LD_INT 150
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 1
17062: PPUSH
17063: LD_INT 15
17065: PPUSH
17066: CALL_OW 12
17070: ARRAY
17071: ST_TO_ADDR
// if ValidHex ( x , y ) then
17072: LD_VAR 0 3
17076: PPUSH
17077: LD_VAR 0 4
17081: PPUSH
17082: CALL_OW 488
17086: IFFALSE 17109
// begin result := [ x , y ] ;
17088: LD_ADDR_VAR 0 1
17092: PUSH
17093: LD_VAR 0 3
17097: PUSH
17098: LD_VAR 0 4
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: ST_TO_ADDR
// break ;
17107: GO 17111
// end ; end ;
17109: GO 16911
17111: POP
17112: POP
// if result then
17113: LD_VAR 0 1
17117: IFFALSE 17177
// begin ToLua ( playSibBomb() ) ;
17119: LD_STRING playSibBomb()
17121: PPUSH
17122: CALL_OW 559
// wait ( 0 0$14 ) ;
17126: LD_INT 490
17128: PPUSH
17129: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17133: LD_VAR 0 1
17137: PUSH
17138: LD_INT 1
17140: ARRAY
17141: PPUSH
17142: LD_VAR 0 1
17146: PUSH
17147: LD_INT 2
17149: ARRAY
17150: PPUSH
17151: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17155: LD_VAR 0 1
17159: PUSH
17160: LD_INT 1
17162: ARRAY
17163: PPUSH
17164: LD_VAR 0 1
17168: PUSH
17169: LD_INT 2
17171: ARRAY
17172: PPUSH
17173: CALL_OW 429
// end ; end ;
17177: LD_VAR 0 1
17181: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17182: LD_EXP 43
17186: PUSH
17187: LD_EXP 65
17191: AND
17192: IFFALSE 17204
17194: GO 17196
17196: DISABLE
// YouLost (  ) ;
17197: LD_STRING 
17199: PPUSH
17200: CALL_OW 104
17204: END
// every 0 0$1 trigger StreamModeActive and sFog do
17205: LD_EXP 43
17209: PUSH
17210: LD_EXP 64
17214: AND
17215: IFFALSE 17229
17217: GO 17219
17219: DISABLE
// FogOff ( your_side ) ;
17220: LD_OWVAR 2
17224: PPUSH
17225: CALL_OW 344
17229: END
// every 0 0$1 trigger StreamModeActive and sSun do
17230: LD_EXP 43
17234: PUSH
17235: LD_EXP 66
17239: AND
17240: IFFALSE 17268
17242: GO 17244
17244: DISABLE
// begin solar_recharge_percent := 0 ;
17245: LD_ADDR_OWVAR 79
17249: PUSH
17250: LD_INT 0
17252: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17253: LD_INT 10500
17255: PPUSH
17256: CALL_OW 67
// solar_recharge_percent := 100 ;
17260: LD_ADDR_OWVAR 79
17264: PUSH
17265: LD_INT 100
17267: ST_TO_ADDR
// end ;
17268: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17269: LD_EXP 43
17273: PUSH
17274: LD_EXP 67
17278: AND
17279: IFFALSE 17518
17281: GO 17283
17283: DISABLE
17284: LD_INT 0
17286: PPUSH
17287: PPUSH
17288: PPUSH
// begin tmp := [ ] ;
17289: LD_ADDR_VAR 0 3
17293: PUSH
17294: EMPTY
17295: ST_TO_ADDR
// for i := 1 to 6 do
17296: LD_ADDR_VAR 0 1
17300: PUSH
17301: DOUBLE
17302: LD_INT 1
17304: DEC
17305: ST_TO_ADDR
17306: LD_INT 6
17308: PUSH
17309: FOR_TO
17310: IFFALSE 17415
// begin uc_nation := nation_nature ;
17312: LD_ADDR_OWVAR 21
17316: PUSH
17317: LD_INT 0
17319: ST_TO_ADDR
// uc_side := 0 ;
17320: LD_ADDR_OWVAR 20
17324: PUSH
17325: LD_INT 0
17327: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17328: LD_ADDR_OWVAR 29
17332: PUSH
17333: LD_INT 12
17335: PUSH
17336: LD_INT 12
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: ST_TO_ADDR
// hc_agressivity := 20 ;
17343: LD_ADDR_OWVAR 35
17347: PUSH
17348: LD_INT 20
17350: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17351: LD_ADDR_OWVAR 28
17355: PUSH
17356: LD_INT 17
17358: ST_TO_ADDR
// hc_gallery :=  ;
17359: LD_ADDR_OWVAR 33
17363: PUSH
17364: LD_STRING 
17366: ST_TO_ADDR
// hc_name :=  ;
17367: LD_ADDR_OWVAR 26
17371: PUSH
17372: LD_STRING 
17374: ST_TO_ADDR
// un := CreateHuman ;
17375: LD_ADDR_VAR 0 2
17379: PUSH
17380: CALL_OW 44
17384: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17385: LD_VAR 0 2
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 51
// tmp := tmp ^ un ;
17397: LD_ADDR_VAR 0 3
17401: PUSH
17402: LD_VAR 0 3
17406: PUSH
17407: LD_VAR 0 2
17411: ADD
17412: ST_TO_ADDR
// end ;
17413: GO 17309
17415: POP
17416: POP
// repeat wait ( 0 0$1 ) ;
17417: LD_INT 35
17419: PPUSH
17420: CALL_OW 67
// for un in tmp do
17424: LD_ADDR_VAR 0 2
17428: PUSH
17429: LD_VAR 0 3
17433: PUSH
17434: FOR_IN
17435: IFFALSE 17509
// begin if IsDead ( un ) then
17437: LD_VAR 0 2
17441: PPUSH
17442: CALL_OW 301
17446: IFFALSE 17466
// begin tmp := tmp diff un ;
17448: LD_ADDR_VAR 0 3
17452: PUSH
17453: LD_VAR 0 3
17457: PUSH
17458: LD_VAR 0 2
17462: DIFF
17463: ST_TO_ADDR
// continue ;
17464: GO 17434
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17466: LD_VAR 0 2
17470: PPUSH
17471: LD_INT 3
17473: PUSH
17474: LD_INT 22
17476: PUSH
17477: LD_INT 0
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PPUSH
17488: CALL_OW 69
17492: PPUSH
17493: LD_VAR 0 2
17497: PPUSH
17498: CALL_OW 74
17502: PPUSH
17503: CALL_OW 115
// end ;
17507: GO 17434
17509: POP
17510: POP
// until not tmp ;
17511: LD_VAR 0 3
17515: NOT
17516: IFFALSE 17417
// end ;
17518: PPOPN 3
17520: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17521: LD_EXP 43
17525: PUSH
17526: LD_EXP 68
17530: AND
17531: IFFALSE 17585
17533: GO 17535
17535: DISABLE
// begin ToLua ( displayTroll(); ) ;
17536: LD_STRING displayTroll();
17538: PPUSH
17539: CALL_OW 559
// wait ( 3 3$00 ) ;
17543: LD_INT 6300
17545: PPUSH
17546: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17550: LD_STRING hideTroll();
17552: PPUSH
17553: CALL_OW 559
// wait ( 1 1$00 ) ;
17557: LD_INT 2100
17559: PPUSH
17560: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17564: LD_STRING displayTroll();
17566: PPUSH
17567: CALL_OW 559
// wait ( 1 1$00 ) ;
17571: LD_INT 2100
17573: PPUSH
17574: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17578: LD_STRING hideTroll();
17580: PPUSH
17581: CALL_OW 559
// end ;
17585: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17586: LD_EXP 43
17590: PUSH
17591: LD_EXP 69
17595: AND
17596: IFFALSE 17659
17598: GO 17600
17600: DISABLE
17601: LD_INT 0
17603: PPUSH
// begin p := 0 ;
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_INT 0
17611: ST_TO_ADDR
// repeat game_speed := 1 ;
17612: LD_ADDR_OWVAR 65
17616: PUSH
17617: LD_INT 1
17619: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17620: LD_INT 35
17622: PPUSH
17623: CALL_OW 67
// p := p + 1 ;
17627: LD_ADDR_VAR 0 1
17631: PUSH
17632: LD_VAR 0 1
17636: PUSH
17637: LD_INT 1
17639: PLUS
17640: ST_TO_ADDR
// until p >= 60 ;
17641: LD_VAR 0 1
17645: PUSH
17646: LD_INT 60
17648: GREATEREQUAL
17649: IFFALSE 17612
// game_speed := 4 ;
17651: LD_ADDR_OWVAR 65
17655: PUSH
17656: LD_INT 4
17658: ST_TO_ADDR
// end ;
17659: PPOPN 1
17661: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17662: LD_EXP 43
17666: PUSH
17667: LD_EXP 70
17671: AND
17672: IFFALSE 17818
17674: GO 17676
17676: DISABLE
17677: LD_INT 0
17679: PPUSH
17680: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17681: LD_ADDR_VAR 0 1
17685: PUSH
17686: LD_INT 22
17688: PUSH
17689: LD_OWVAR 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 2
17700: PUSH
17701: LD_INT 30
17703: PUSH
17704: LD_INT 0
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 30
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PPUSH
17730: CALL_OW 69
17734: ST_TO_ADDR
// if not depot then
17735: LD_VAR 0 1
17739: NOT
17740: IFFALSE 17744
// exit ;
17742: GO 17818
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17744: LD_ADDR_VAR 0 2
17748: PUSH
17749: LD_VAR 0 1
17753: PUSH
17754: LD_INT 1
17756: PPUSH
17757: LD_VAR 0 1
17761: PPUSH
17762: CALL_OW 12
17766: ARRAY
17767: PPUSH
17768: CALL_OW 274
17772: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17773: LD_VAR 0 2
17777: PPUSH
17778: LD_INT 1
17780: PPUSH
17781: LD_INT 0
17783: PPUSH
17784: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17788: LD_VAR 0 2
17792: PPUSH
17793: LD_INT 2
17795: PPUSH
17796: LD_INT 0
17798: PPUSH
17799: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17803: LD_VAR 0 2
17807: PPUSH
17808: LD_INT 3
17810: PPUSH
17811: LD_INT 0
17813: PPUSH
17814: CALL_OW 277
// end ;
17818: PPOPN 2
17820: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17821: LD_EXP 43
17825: PUSH
17826: LD_EXP 71
17830: AND
17831: IFFALSE 17928
17833: GO 17835
17835: DISABLE
17836: LD_INT 0
17838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_INT 22
17846: PUSH
17847: LD_OWVAR 2
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 21
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 3
17868: PUSH
17869: LD_INT 23
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 69
17892: ST_TO_ADDR
// if not tmp then
17893: LD_VAR 0 1
17897: NOT
17898: IFFALSE 17902
// exit ;
17900: GO 17928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 1
17909: PPUSH
17910: LD_VAR 0 1
17914: PPUSH
17915: CALL_OW 12
17919: ARRAY
17920: PPUSH
17921: LD_INT 200
17923: PPUSH
17924: CALL_OW 234
// end ;
17928: PPOPN 1
17930: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17931: LD_EXP 43
17935: PUSH
17936: LD_EXP 72
17940: AND
17941: IFFALSE 18020
17943: GO 17945
17945: DISABLE
17946: LD_INT 0
17948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17949: LD_ADDR_VAR 0 1
17953: PUSH
17954: LD_INT 22
17956: PUSH
17957: LD_OWVAR 2
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 21
17968: PUSH
17969: LD_INT 2
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PPUSH
17980: CALL_OW 69
17984: ST_TO_ADDR
// if not tmp then
17985: LD_VAR 0 1
17989: NOT
17990: IFFALSE 17994
// exit ;
17992: GO 18020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17994: LD_VAR 0 1
17998: PUSH
17999: LD_INT 1
18001: PPUSH
18002: LD_VAR 0 1
18006: PPUSH
18007: CALL_OW 12
18011: ARRAY
18012: PPUSH
18013: LD_INT 60
18015: PPUSH
18016: CALL_OW 234
// end ;
18020: PPOPN 1
18022: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18023: LD_EXP 43
18027: PUSH
18028: LD_EXP 73
18032: AND
18033: IFFALSE 18132
18035: GO 18037
18037: DISABLE
18038: LD_INT 0
18040: PPUSH
18041: PPUSH
// begin enable ;
18042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18043: LD_ADDR_VAR 0 1
18047: PUSH
18048: LD_INT 22
18050: PUSH
18051: LD_OWVAR 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 61
18062: PUSH
18063: EMPTY
18064: LIST
18065: PUSH
18066: LD_INT 33
18068: PUSH
18069: LD_INT 2
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: LIST
18080: PPUSH
18081: CALL_OW 69
18085: ST_TO_ADDR
// if not tmp then
18086: LD_VAR 0 1
18090: NOT
18091: IFFALSE 18095
// exit ;
18093: GO 18132
// for i in tmp do
18095: LD_ADDR_VAR 0 2
18099: PUSH
18100: LD_VAR 0 1
18104: PUSH
18105: FOR_IN
18106: IFFALSE 18130
// if IsControledBy ( i ) then
18108: LD_VAR 0 2
18112: PPUSH
18113: CALL_OW 312
18117: IFFALSE 18128
// ComUnlink ( i ) ;
18119: LD_VAR 0 2
18123: PPUSH
18124: CALL_OW 136
18128: GO 18105
18130: POP
18131: POP
// end ;
18132: PPOPN 2
18134: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18135: LD_EXP 43
18139: PUSH
18140: LD_EXP 74
18144: AND
18145: IFFALSE 18285
18147: GO 18149
18149: DISABLE
18150: LD_INT 0
18152: PPUSH
18153: PPUSH
// begin ToLua ( displayPowell(); ) ;
18154: LD_STRING displayPowell();
18156: PPUSH
18157: CALL_OW 559
// uc_side := 0 ;
18161: LD_ADDR_OWVAR 20
18165: PUSH
18166: LD_INT 0
18168: ST_TO_ADDR
// uc_nation := 2 ;
18169: LD_ADDR_OWVAR 21
18173: PUSH
18174: LD_INT 2
18176: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18177: LD_ADDR_OWVAR 37
18181: PUSH
18182: LD_INT 14
18184: ST_TO_ADDR
// vc_engine := engine_siberite ;
18185: LD_ADDR_OWVAR 39
18189: PUSH
18190: LD_INT 3
18192: ST_TO_ADDR
// vc_control := control_apeman ;
18193: LD_ADDR_OWVAR 38
18197: PUSH
18198: LD_INT 5
18200: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18201: LD_ADDR_OWVAR 40
18205: PUSH
18206: LD_INT 29
18208: ST_TO_ADDR
// un := CreateVehicle ;
18209: LD_ADDR_VAR 0 2
18213: PUSH
18214: CALL_OW 45
18218: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18219: LD_VAR 0 2
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18231: LD_INT 35
18233: PPUSH
18234: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18238: LD_VAR 0 2
18242: PPUSH
18243: LD_INT 22
18245: PUSH
18246: LD_OWVAR 2
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: PPUSH
18260: LD_VAR 0 2
18264: PPUSH
18265: CALL_OW 74
18269: PPUSH
18270: CALL_OW 115
// until IsDead ( un ) ;
18274: LD_VAR 0 2
18278: PPUSH
18279: CALL_OW 301
18283: IFFALSE 18231
// end ;
18285: PPOPN 2
18287: END
// every 0 0$1 trigger StreamModeActive and sStu do
18288: LD_EXP 43
18292: PUSH
18293: LD_EXP 82
18297: AND
18298: IFFALSE 18314
18300: GO 18302
18302: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18303: LD_STRING displayStucuk();
18305: PPUSH
18306: CALL_OW 559
// ResetFog ;
18310: CALL_OW 335
// end ;
18314: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18315: LD_EXP 43
18319: PUSH
18320: LD_EXP 75
18324: AND
18325: IFFALSE 18466
18327: GO 18329
18329: DISABLE
18330: LD_INT 0
18332: PPUSH
18333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18334: LD_ADDR_VAR 0 2
18338: PUSH
18339: LD_INT 22
18341: PUSH
18342: LD_OWVAR 2
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 21
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PPUSH
18365: CALL_OW 69
18369: ST_TO_ADDR
// if not tmp then
18370: LD_VAR 0 2
18374: NOT
18375: IFFALSE 18379
// exit ;
18377: GO 18466
// un := tmp [ rand ( 1 , tmp ) ] ;
18379: LD_ADDR_VAR 0 1
18383: PUSH
18384: LD_VAR 0 2
18388: PUSH
18389: LD_INT 1
18391: PPUSH
18392: LD_VAR 0 2
18396: PPUSH
18397: CALL_OW 12
18401: ARRAY
18402: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18403: LD_VAR 0 1
18407: PPUSH
18408: LD_INT 0
18410: PPUSH
18411: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18415: LD_VAR 0 1
18419: PPUSH
18420: LD_OWVAR 3
18424: PUSH
18425: LD_VAR 0 1
18429: DIFF
18430: PPUSH
18431: LD_VAR 0 1
18435: PPUSH
18436: CALL_OW 74
18440: PPUSH
18441: CALL_OW 115
// wait ( 0 0$20 ) ;
18445: LD_INT 700
18447: PPUSH
18448: CALL_OW 67
// SetSide ( un , your_side ) ;
18452: LD_VAR 0 1
18456: PPUSH
18457: LD_OWVAR 2
18461: PPUSH
18462: CALL_OW 235
// end ;
18466: PPOPN 2
18468: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18469: LD_EXP 43
18473: PUSH
18474: LD_EXP 76
18478: AND
18479: IFFALSE 18585
18481: GO 18483
18483: DISABLE
18484: LD_INT 0
18486: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18487: LD_ADDR_VAR 0 1
18491: PUSH
18492: LD_INT 22
18494: PUSH
18495: LD_OWVAR 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: LD_INT 30
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 30
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: ST_TO_ADDR
// if not depot then
18541: LD_VAR 0 1
18545: NOT
18546: IFFALSE 18550
// exit ;
18548: GO 18585
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18550: LD_VAR 0 1
18554: PUSH
18555: LD_INT 1
18557: ARRAY
18558: PPUSH
18559: CALL_OW 250
18563: PPUSH
18564: LD_VAR 0 1
18568: PUSH
18569: LD_INT 1
18571: ARRAY
18572: PPUSH
18573: CALL_OW 251
18577: PPUSH
18578: LD_INT 70
18580: PPUSH
18581: CALL_OW 495
// end ;
18585: PPOPN 1
18587: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18588: LD_EXP 43
18592: PUSH
18593: LD_EXP 77
18597: AND
18598: IFFALSE 18809
18600: GO 18602
18602: DISABLE
18603: LD_INT 0
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
18609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18610: LD_ADDR_VAR 0 5
18614: PUSH
18615: LD_INT 22
18617: PUSH
18618: LD_OWVAR 2
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 21
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PPUSH
18641: CALL_OW 69
18645: ST_TO_ADDR
// if not tmp then
18646: LD_VAR 0 5
18650: NOT
18651: IFFALSE 18655
// exit ;
18653: GO 18809
// for i in tmp do
18655: LD_ADDR_VAR 0 1
18659: PUSH
18660: LD_VAR 0 5
18664: PUSH
18665: FOR_IN
18666: IFFALSE 18807
// begin d := rand ( 0 , 5 ) ;
18668: LD_ADDR_VAR 0 4
18672: PUSH
18673: LD_INT 0
18675: PPUSH
18676: LD_INT 5
18678: PPUSH
18679: CALL_OW 12
18683: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18684: LD_ADDR_VAR 0 2
18688: PUSH
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 250
18698: PPUSH
18699: LD_VAR 0 4
18703: PPUSH
18704: LD_INT 3
18706: PPUSH
18707: LD_INT 12
18709: PPUSH
18710: CALL_OW 12
18714: PPUSH
18715: CALL_OW 272
18719: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18720: LD_ADDR_VAR 0 3
18724: PUSH
18725: LD_VAR 0 1
18729: PPUSH
18730: CALL_OW 251
18734: PPUSH
18735: LD_VAR 0 4
18739: PPUSH
18740: LD_INT 3
18742: PPUSH
18743: LD_INT 12
18745: PPUSH
18746: CALL_OW 12
18750: PPUSH
18751: CALL_OW 273
18755: ST_TO_ADDR
// if ValidHex ( x , y ) then
18756: LD_VAR 0 2
18760: PPUSH
18761: LD_VAR 0 3
18765: PPUSH
18766: CALL_OW 488
18770: IFFALSE 18805
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18772: LD_VAR 0 1
18776: PPUSH
18777: LD_VAR 0 2
18781: PPUSH
18782: LD_VAR 0 3
18786: PPUSH
18787: LD_INT 3
18789: PPUSH
18790: LD_INT 6
18792: PPUSH
18793: CALL_OW 12
18797: PPUSH
18798: LD_INT 1
18800: PPUSH
18801: CALL_OW 483
// end ;
18805: GO 18665
18807: POP
18808: POP
// end ;
18809: PPOPN 5
18811: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18812: LD_EXP 43
18816: PUSH
18817: LD_EXP 78
18821: AND
18822: IFFALSE 18916
18824: GO 18826
18826: DISABLE
18827: LD_INT 0
18829: PPUSH
18830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18831: LD_ADDR_VAR 0 2
18835: PUSH
18836: LD_INT 22
18838: PUSH
18839: LD_OWVAR 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 32
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 21
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 69
18877: ST_TO_ADDR
// if not tmp then
18878: LD_VAR 0 2
18882: NOT
18883: IFFALSE 18887
// exit ;
18885: GO 18916
// for i in tmp do
18887: LD_ADDR_VAR 0 1
18891: PUSH
18892: LD_VAR 0 2
18896: PUSH
18897: FOR_IN
18898: IFFALSE 18914
// SetFuel ( i , 0 ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_INT 0
18907: PPUSH
18908: CALL_OW 240
18912: GO 18897
18914: POP
18915: POP
// end ;
18916: PPOPN 2
18918: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18919: LD_EXP 43
18923: PUSH
18924: LD_EXP 79
18928: AND
18929: IFFALSE 18995
18931: GO 18933
18933: DISABLE
18934: LD_INT 0
18936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18937: LD_ADDR_VAR 0 1
18941: PUSH
18942: LD_INT 22
18944: PUSH
18945: LD_OWVAR 2
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 30
18956: PUSH
18957: LD_INT 29
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 69
18972: ST_TO_ADDR
// if not tmp then
18973: LD_VAR 0 1
18977: NOT
18978: IFFALSE 18982
// exit ;
18980: GO 18995
// DestroyUnit ( tmp [ 1 ] ) ;
18982: LD_VAR 0 1
18986: PUSH
18987: LD_INT 1
18989: ARRAY
18990: PPUSH
18991: CALL_OW 65
// end ;
18995: PPOPN 1
18997: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18998: LD_EXP 43
19002: PUSH
19003: LD_EXP 81
19007: AND
19008: IFFALSE 19137
19010: GO 19012
19012: DISABLE
19013: LD_INT 0
19015: PPUSH
// begin uc_side := 0 ;
19016: LD_ADDR_OWVAR 20
19020: PUSH
19021: LD_INT 0
19023: ST_TO_ADDR
// uc_nation := nation_arabian ;
19024: LD_ADDR_OWVAR 21
19028: PUSH
19029: LD_INT 2
19031: ST_TO_ADDR
// hc_gallery :=  ;
19032: LD_ADDR_OWVAR 33
19036: PUSH
19037: LD_STRING 
19039: ST_TO_ADDR
// hc_name :=  ;
19040: LD_ADDR_OWVAR 26
19044: PUSH
19045: LD_STRING 
19047: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19048: LD_INT 1
19050: PPUSH
19051: LD_INT 11
19053: PPUSH
19054: LD_INT 10
19056: PPUSH
19057: CALL_OW 380
// un := CreateHuman ;
19061: LD_ADDR_VAR 0 1
19065: PUSH
19066: CALL_OW 44
19070: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19071: LD_VAR 0 1
19075: PPUSH
19076: LD_INT 1
19078: PPUSH
19079: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19083: LD_INT 35
19085: PPUSH
19086: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19090: LD_VAR 0 1
19094: PPUSH
19095: LD_INT 22
19097: PUSH
19098: LD_OWVAR 2
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: PPUSH
19112: LD_VAR 0 1
19116: PPUSH
19117: CALL_OW 74
19121: PPUSH
19122: CALL_OW 115
// until IsDead ( un ) ;
19126: LD_VAR 0 1
19130: PPUSH
19131: CALL_OW 301
19135: IFFALSE 19083
// end ;
19137: PPOPN 1
19139: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19140: LD_EXP 43
19144: PUSH
19145: LD_EXP 83
19149: AND
19150: IFFALSE 19162
19152: GO 19154
19154: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19155: LD_STRING earthquake(getX(game), 0, 32)
19157: PPUSH
19158: CALL_OW 559
19162: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19163: LD_EXP 43
19167: PUSH
19168: LD_EXP 84
19172: AND
19173: IFFALSE 19264
19175: GO 19177
19177: DISABLE
19178: LD_INT 0
19180: PPUSH
// begin enable ;
19181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19182: LD_ADDR_VAR 0 1
19186: PUSH
19187: LD_INT 22
19189: PUSH
19190: LD_OWVAR 2
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 21
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 33
19211: PUSH
19212: LD_INT 3
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: LIST
19223: PPUSH
19224: CALL_OW 69
19228: ST_TO_ADDR
// if not tmp then
19229: LD_VAR 0 1
19233: NOT
19234: IFFALSE 19238
// exit ;
19236: GO 19264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19238: LD_VAR 0 1
19242: PUSH
19243: LD_INT 1
19245: PPUSH
19246: LD_VAR 0 1
19250: PPUSH
19251: CALL_OW 12
19255: ARRAY
19256: PPUSH
19257: LD_INT 1
19259: PPUSH
19260: CALL_OW 234
// end ;
19264: PPOPN 1
19266: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19267: LD_EXP 43
19271: PUSH
19272: LD_EXP 85
19276: AND
19277: IFFALSE 19418
19279: GO 19281
19281: DISABLE
19282: LD_INT 0
19284: PPUSH
19285: PPUSH
19286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19287: LD_ADDR_VAR 0 3
19291: PUSH
19292: LD_INT 22
19294: PUSH
19295: LD_OWVAR 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 25
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PPUSH
19318: CALL_OW 69
19322: ST_TO_ADDR
// if not tmp then
19323: LD_VAR 0 3
19327: NOT
19328: IFFALSE 19332
// exit ;
19330: GO 19418
// un := tmp [ rand ( 1 , tmp ) ] ;
19332: LD_ADDR_VAR 0 2
19336: PUSH
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 1
19344: PPUSH
19345: LD_VAR 0 3
19349: PPUSH
19350: CALL_OW 12
19354: ARRAY
19355: ST_TO_ADDR
// if Crawls ( un ) then
19356: LD_VAR 0 2
19360: PPUSH
19361: CALL_OW 318
19365: IFFALSE 19376
// ComWalk ( un ) ;
19367: LD_VAR 0 2
19371: PPUSH
19372: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: LD_INT 9
19383: PPUSH
19384: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19388: LD_INT 28
19390: PPUSH
19391: LD_OWVAR 2
19395: PPUSH
19396: LD_INT 2
19398: PPUSH
19399: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19403: LD_INT 29
19405: PPUSH
19406: LD_OWVAR 2
19410: PPUSH
19411: LD_INT 2
19413: PPUSH
19414: CALL_OW 322
// end ;
19418: PPOPN 3
19420: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19421: LD_EXP 43
19425: PUSH
19426: LD_EXP 86
19430: AND
19431: IFFALSE 19542
19433: GO 19435
19435: DISABLE
19436: LD_INT 0
19438: PPUSH
19439: PPUSH
19440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19441: LD_ADDR_VAR 0 3
19445: PUSH
19446: LD_INT 22
19448: PUSH
19449: LD_OWVAR 2
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 25
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PPUSH
19472: CALL_OW 69
19476: ST_TO_ADDR
// if not tmp then
19477: LD_VAR 0 3
19481: NOT
19482: IFFALSE 19486
// exit ;
19484: GO 19542
// un := tmp [ rand ( 1 , tmp ) ] ;
19486: LD_ADDR_VAR 0 2
19490: PUSH
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 1
19498: PPUSH
19499: LD_VAR 0 3
19503: PPUSH
19504: CALL_OW 12
19508: ARRAY
19509: ST_TO_ADDR
// if Crawls ( un ) then
19510: LD_VAR 0 2
19514: PPUSH
19515: CALL_OW 318
19519: IFFALSE 19530
// ComWalk ( un ) ;
19521: LD_VAR 0 2
19525: PPUSH
19526: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19530: LD_VAR 0 2
19534: PPUSH
19535: LD_INT 8
19537: PPUSH
19538: CALL_OW 336
// end ;
19542: PPOPN 3
19544: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19545: LD_EXP 43
19549: PUSH
19550: LD_EXP 87
19554: AND
19555: IFFALSE 19699
19557: GO 19559
19559: DISABLE
19560: LD_INT 0
19562: PPUSH
19563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19564: LD_ADDR_VAR 0 2
19568: PUSH
19569: LD_INT 22
19571: PUSH
19572: LD_OWVAR 2
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 21
19583: PUSH
19584: LD_INT 2
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: LD_INT 34
19596: PUSH
19597: LD_INT 12
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 34
19606: PUSH
19607: LD_INT 51
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 34
19616: PUSH
19617: LD_INT 32
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: PPUSH
19635: CALL_OW 69
19639: ST_TO_ADDR
// if not tmp then
19640: LD_VAR 0 2
19644: NOT
19645: IFFALSE 19649
// exit ;
19647: GO 19699
// for i in tmp do
19649: LD_ADDR_VAR 0 1
19653: PUSH
19654: LD_VAR 0 2
19658: PUSH
19659: FOR_IN
19660: IFFALSE 19697
// if GetCargo ( i , mat_artifact ) = 0 then
19662: LD_VAR 0 1
19666: PPUSH
19667: LD_INT 4
19669: PPUSH
19670: CALL_OW 289
19674: PUSH
19675: LD_INT 0
19677: EQUAL
19678: IFFALSE 19695
// SetCargo ( i , mat_siberit , 100 ) ;
19680: LD_VAR 0 1
19684: PPUSH
19685: LD_INT 3
19687: PPUSH
19688: LD_INT 100
19690: PPUSH
19691: CALL_OW 290
19695: GO 19659
19697: POP
19698: POP
// end ;
19699: PPOPN 2
19701: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19702: LD_EXP 43
19706: PUSH
19707: LD_EXP 88
19711: AND
19712: IFFALSE 19895
19714: GO 19716
19716: DISABLE
19717: LD_INT 0
19719: PPUSH
19720: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19721: LD_ADDR_VAR 0 2
19725: PUSH
19726: LD_INT 22
19728: PUSH
19729: LD_OWVAR 2
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PPUSH
19738: CALL_OW 69
19742: ST_TO_ADDR
// if not tmp then
19743: LD_VAR 0 2
19747: NOT
19748: IFFALSE 19752
// exit ;
19750: GO 19895
// for i := 1 to 2 do
19752: LD_ADDR_VAR 0 1
19756: PUSH
19757: DOUBLE
19758: LD_INT 1
19760: DEC
19761: ST_TO_ADDR
19762: LD_INT 2
19764: PUSH
19765: FOR_TO
19766: IFFALSE 19893
// begin uc_side := your_side ;
19768: LD_ADDR_OWVAR 20
19772: PUSH
19773: LD_OWVAR 2
19777: ST_TO_ADDR
// uc_nation := nation_american ;
19778: LD_ADDR_OWVAR 21
19782: PUSH
19783: LD_INT 1
19785: ST_TO_ADDR
// vc_chassis := us_morphling ;
19786: LD_ADDR_OWVAR 37
19790: PUSH
19791: LD_INT 5
19793: ST_TO_ADDR
// vc_engine := engine_siberite ;
19794: LD_ADDR_OWVAR 39
19798: PUSH
19799: LD_INT 3
19801: ST_TO_ADDR
// vc_control := control_computer ;
19802: LD_ADDR_OWVAR 38
19806: PUSH
19807: LD_INT 3
19809: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19810: LD_ADDR_OWVAR 40
19814: PUSH
19815: LD_INT 10
19817: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19818: LD_VAR 0 2
19822: PUSH
19823: LD_INT 1
19825: ARRAY
19826: PPUSH
19827: CALL_OW 310
19831: NOT
19832: IFFALSE 19879
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19834: CALL_OW 45
19838: PPUSH
19839: LD_VAR 0 2
19843: PUSH
19844: LD_INT 1
19846: ARRAY
19847: PPUSH
19848: CALL_OW 250
19852: PPUSH
19853: LD_VAR 0 2
19857: PUSH
19858: LD_INT 1
19860: ARRAY
19861: PPUSH
19862: CALL_OW 251
19866: PPUSH
19867: LD_INT 12
19869: PPUSH
19870: LD_INT 1
19872: PPUSH
19873: CALL_OW 50
19877: GO 19891
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19879: CALL_OW 45
19883: PPUSH
19884: LD_INT 1
19886: PPUSH
19887: CALL_OW 51
// end ;
19891: GO 19765
19893: POP
19894: POP
// end ;
19895: PPOPN 2
19897: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19898: LD_EXP 43
19902: PUSH
19903: LD_EXP 89
19907: AND
19908: IFFALSE 20130
19910: GO 19912
19912: DISABLE
19913: LD_INT 0
19915: PPUSH
19916: PPUSH
19917: PPUSH
19918: PPUSH
19919: PPUSH
19920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19921: LD_ADDR_VAR 0 6
19925: PUSH
19926: LD_INT 22
19928: PUSH
19929: LD_OWVAR 2
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 21
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 3
19950: PUSH
19951: LD_INT 23
19953: PUSH
19954: LD_INT 0
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: LIST
19969: PPUSH
19970: CALL_OW 69
19974: ST_TO_ADDR
// if not tmp then
19975: LD_VAR 0 6
19979: NOT
19980: IFFALSE 19984
// exit ;
19982: GO 20130
// s1 := rand ( 1 , 4 ) ;
19984: LD_ADDR_VAR 0 2
19988: PUSH
19989: LD_INT 1
19991: PPUSH
19992: LD_INT 4
19994: PPUSH
19995: CALL_OW 12
19999: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20000: LD_ADDR_VAR 0 4
20004: PUSH
20005: LD_VAR 0 6
20009: PUSH
20010: LD_INT 1
20012: ARRAY
20013: PPUSH
20014: LD_VAR 0 2
20018: PPUSH
20019: CALL_OW 259
20023: ST_TO_ADDR
// if s1 = 1 then
20024: LD_VAR 0 2
20028: PUSH
20029: LD_INT 1
20031: EQUAL
20032: IFFALSE 20052
// s2 := rand ( 2 , 4 ) else
20034: LD_ADDR_VAR 0 3
20038: PUSH
20039: LD_INT 2
20041: PPUSH
20042: LD_INT 4
20044: PPUSH
20045: CALL_OW 12
20049: ST_TO_ADDR
20050: GO 20060
// s2 := 1 ;
20052: LD_ADDR_VAR 0 3
20056: PUSH
20057: LD_INT 1
20059: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20060: LD_ADDR_VAR 0 5
20064: PUSH
20065: LD_VAR 0 6
20069: PUSH
20070: LD_INT 1
20072: ARRAY
20073: PPUSH
20074: LD_VAR 0 3
20078: PPUSH
20079: CALL_OW 259
20083: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20084: LD_VAR 0 6
20088: PUSH
20089: LD_INT 1
20091: ARRAY
20092: PPUSH
20093: LD_VAR 0 2
20097: PPUSH
20098: LD_VAR 0 5
20102: PPUSH
20103: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20107: LD_VAR 0 6
20111: PUSH
20112: LD_INT 1
20114: ARRAY
20115: PPUSH
20116: LD_VAR 0 3
20120: PPUSH
20121: LD_VAR 0 4
20125: PPUSH
20126: CALL_OW 237
// end ;
20130: PPOPN 6
20132: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20133: LD_EXP 43
20137: PUSH
20138: LD_EXP 90
20142: AND
20143: IFFALSE 20222
20145: GO 20147
20147: DISABLE
20148: LD_INT 0
20150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20151: LD_ADDR_VAR 0 1
20155: PUSH
20156: LD_INT 22
20158: PUSH
20159: LD_OWVAR 2
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 30
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PPUSH
20182: CALL_OW 69
20186: ST_TO_ADDR
// if not tmp then
20187: LD_VAR 0 1
20191: NOT
20192: IFFALSE 20196
// exit ;
20194: GO 20222
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20196: LD_VAR 0 1
20200: PUSH
20201: LD_INT 1
20203: PPUSH
20204: LD_VAR 0 1
20208: PPUSH
20209: CALL_OW 12
20213: ARRAY
20214: PPUSH
20215: LD_INT 1
20217: PPUSH
20218: CALL_OW 234
// end ;
20222: PPOPN 1
20224: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20225: LD_EXP 43
20229: PUSH
20230: LD_EXP 91
20234: AND
20235: IFFALSE 20347
20237: GO 20239
20239: DISABLE
20240: LD_INT 0
20242: PPUSH
20243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20244: LD_ADDR_VAR 0 2
20248: PUSH
20249: LD_INT 22
20251: PUSH
20252: LD_OWVAR 2
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 2
20263: PUSH
20264: LD_INT 30
20266: PUSH
20267: LD_INT 27
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 30
20276: PUSH
20277: LD_INT 26
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 30
20286: PUSH
20287: LD_INT 28
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PPUSH
20304: CALL_OW 69
20308: ST_TO_ADDR
// if not tmp then
20309: LD_VAR 0 2
20313: NOT
20314: IFFALSE 20318
// exit ;
20316: GO 20347
// for i in tmp do
20318: LD_ADDR_VAR 0 1
20322: PUSH
20323: LD_VAR 0 2
20327: PUSH
20328: FOR_IN
20329: IFFALSE 20345
// SetLives ( i , 1 ) ;
20331: LD_VAR 0 1
20335: PPUSH
20336: LD_INT 1
20338: PPUSH
20339: CALL_OW 234
20343: GO 20328
20345: POP
20346: POP
// end ;
20347: PPOPN 2
20349: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20350: LD_EXP 43
20354: PUSH
20355: LD_EXP 92
20359: AND
20360: IFFALSE 20647
20362: GO 20364
20364: DISABLE
20365: LD_INT 0
20367: PPUSH
20368: PPUSH
20369: PPUSH
// begin i := rand ( 1 , 7 ) ;
20370: LD_ADDR_VAR 0 1
20374: PUSH
20375: LD_INT 1
20377: PPUSH
20378: LD_INT 7
20380: PPUSH
20381: CALL_OW 12
20385: ST_TO_ADDR
// case i of 1 :
20386: LD_VAR 0 1
20390: PUSH
20391: LD_INT 1
20393: DOUBLE
20394: EQUAL
20395: IFTRUE 20399
20397: GO 20409
20399: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20400: LD_STRING earthquake(getX(game), 0, 32)
20402: PPUSH
20403: CALL_OW 559
20407: GO 20647
20409: LD_INT 2
20411: DOUBLE
20412: EQUAL
20413: IFTRUE 20417
20415: GO 20431
20417: POP
// begin ToLua ( displayStucuk(); ) ;
20418: LD_STRING displayStucuk();
20420: PPUSH
20421: CALL_OW 559
// ResetFog ;
20425: CALL_OW 335
// end ; 3 :
20429: GO 20647
20431: LD_INT 3
20433: DOUBLE
20434: EQUAL
20435: IFTRUE 20439
20437: GO 20543
20439: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20440: LD_ADDR_VAR 0 2
20444: PUSH
20445: LD_INT 22
20447: PUSH
20448: LD_OWVAR 2
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 25
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: ST_TO_ADDR
// if not tmp then
20476: LD_VAR 0 2
20480: NOT
20481: IFFALSE 20485
// exit ;
20483: GO 20647
// un := tmp [ rand ( 1 , tmp ) ] ;
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_VAR 0 2
20494: PUSH
20495: LD_INT 1
20497: PPUSH
20498: LD_VAR 0 2
20502: PPUSH
20503: CALL_OW 12
20507: ARRAY
20508: ST_TO_ADDR
// if Crawls ( un ) then
20509: LD_VAR 0 3
20513: PPUSH
20514: CALL_OW 318
20518: IFFALSE 20529
// ComWalk ( un ) ;
20520: LD_VAR 0 3
20524: PPUSH
20525: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20529: LD_VAR 0 3
20533: PPUSH
20534: LD_INT 8
20536: PPUSH
20537: CALL_OW 336
// end ; 4 :
20541: GO 20647
20543: LD_INT 4
20545: DOUBLE
20546: EQUAL
20547: IFTRUE 20551
20549: GO 20625
20551: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20552: LD_ADDR_VAR 0 2
20556: PUSH
20557: LD_INT 22
20559: PUSH
20560: LD_OWVAR 2
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 30
20571: PUSH
20572: LD_INT 29
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PPUSH
20583: CALL_OW 69
20587: ST_TO_ADDR
// if not tmp then
20588: LD_VAR 0 2
20592: NOT
20593: IFFALSE 20597
// exit ;
20595: GO 20647
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20597: LD_VAR 0 2
20601: PUSH
20602: LD_INT 1
20604: ARRAY
20605: PPUSH
20606: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20610: LD_VAR 0 2
20614: PUSH
20615: LD_INT 1
20617: ARRAY
20618: PPUSH
20619: CALL_OW 65
// end ; 5 .. 7 :
20623: GO 20647
20625: LD_INT 5
20627: DOUBLE
20628: GREATEREQUAL
20629: IFFALSE 20637
20631: LD_INT 7
20633: DOUBLE
20634: LESSEQUAL
20635: IFTRUE 20639
20637: GO 20646
20639: POP
// StreamSibBomb ; end ;
20640: CALL 16884 0 0
20644: GO 20647
20646: POP
// end ;
20647: PPOPN 3
20649: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20650: LD_EXP 43
20654: PUSH
20655: LD_EXP 93
20659: AND
20660: IFFALSE 20816
20662: GO 20664
20664: DISABLE
20665: LD_INT 0
20667: PPUSH
20668: PPUSH
20669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20670: LD_ADDR_VAR 0 2
20674: PUSH
20675: LD_INT 81
20677: PUSH
20678: LD_OWVAR 2
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: LD_INT 21
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 21
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: LIST
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PPUSH
20719: CALL_OW 69
20723: ST_TO_ADDR
// if not tmp then
20724: LD_VAR 0 2
20728: NOT
20729: IFFALSE 20733
// exit ;
20731: GO 20816
// p := 0 ;
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_INT 0
20740: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20741: LD_INT 35
20743: PPUSH
20744: CALL_OW 67
// p := p + 1 ;
20748: LD_ADDR_VAR 0 3
20752: PUSH
20753: LD_VAR 0 3
20757: PUSH
20758: LD_INT 1
20760: PLUS
20761: ST_TO_ADDR
// for i in tmp do
20762: LD_ADDR_VAR 0 1
20766: PUSH
20767: LD_VAR 0 2
20771: PUSH
20772: FOR_IN
20773: IFFALSE 20804
// if GetLives ( i ) < 1000 then
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 256
20784: PUSH
20785: LD_INT 1000
20787: LESS
20788: IFFALSE 20802
// SetLives ( i , 1000 ) ;
20790: LD_VAR 0 1
20794: PPUSH
20795: LD_INT 1000
20797: PPUSH
20798: CALL_OW 234
20802: GO 20772
20804: POP
20805: POP
// until p > 20 ;
20806: LD_VAR 0 3
20810: PUSH
20811: LD_INT 20
20813: GREATER
20814: IFFALSE 20741
// end ;
20816: PPOPN 3
20818: END
// every 0 0$1 trigger StreamModeActive and sTime do
20819: LD_EXP 43
20823: PUSH
20824: LD_EXP 94
20828: AND
20829: IFFALSE 20864
20831: GO 20833
20833: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20834: LD_INT 28
20836: PPUSH
20837: LD_OWVAR 2
20841: PPUSH
20842: LD_INT 2
20844: PPUSH
20845: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20849: LD_INT 30
20851: PPUSH
20852: LD_OWVAR 2
20856: PPUSH
20857: LD_INT 2
20859: PPUSH
20860: CALL_OW 322
// end ;
20864: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20865: LD_EXP 43
20869: PUSH
20870: LD_EXP 95
20874: AND
20875: IFFALSE 20996
20877: GO 20879
20879: DISABLE
20880: LD_INT 0
20882: PPUSH
20883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20884: LD_ADDR_VAR 0 2
20888: PUSH
20889: LD_INT 22
20891: PUSH
20892: LD_OWVAR 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 21
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 3
20913: PUSH
20914: LD_INT 23
20916: PUSH
20917: LD_INT 0
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: PPUSH
20933: CALL_OW 69
20937: ST_TO_ADDR
// if not tmp then
20938: LD_VAR 0 2
20942: NOT
20943: IFFALSE 20947
// exit ;
20945: GO 20996
// for i in tmp do
20947: LD_ADDR_VAR 0 1
20951: PUSH
20952: LD_VAR 0 2
20956: PUSH
20957: FOR_IN
20958: IFFALSE 20994
// begin if Crawls ( i ) then
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL_OW 318
20969: IFFALSE 20980
// ComWalk ( i ) ;
20971: LD_VAR 0 1
20975: PPUSH
20976: CALL_OW 138
// SetClass ( i , 2 ) ;
20980: LD_VAR 0 1
20984: PPUSH
20985: LD_INT 2
20987: PPUSH
20988: CALL_OW 336
// end ;
20992: GO 20957
20994: POP
20995: POP
// end ;
20996: PPOPN 2
20998: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20999: LD_EXP 43
21003: PUSH
21004: LD_EXP 96
21008: AND
21009: IFFALSE 21297
21011: GO 21013
21013: DISABLE
21014: LD_INT 0
21016: PPUSH
21017: PPUSH
21018: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21019: LD_OWVAR 2
21023: PPUSH
21024: LD_INT 9
21026: PPUSH
21027: LD_INT 1
21029: PPUSH
21030: LD_INT 1
21032: PPUSH
21033: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21037: LD_INT 9
21039: PPUSH
21040: LD_OWVAR 2
21044: PPUSH
21045: CALL_OW 343
// uc_side := 9 ;
21049: LD_ADDR_OWVAR 20
21053: PUSH
21054: LD_INT 9
21056: ST_TO_ADDR
// uc_nation := 2 ;
21057: LD_ADDR_OWVAR 21
21061: PUSH
21062: LD_INT 2
21064: ST_TO_ADDR
// hc_name := Dark Warrior ;
21065: LD_ADDR_OWVAR 26
21069: PUSH
21070: LD_STRING Dark Warrior
21072: ST_TO_ADDR
// hc_gallery :=  ;
21073: LD_ADDR_OWVAR 33
21077: PUSH
21078: LD_STRING 
21080: ST_TO_ADDR
// hc_noskilllimit := true ;
21081: LD_ADDR_OWVAR 76
21085: PUSH
21086: LD_INT 1
21088: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21089: LD_ADDR_OWVAR 31
21093: PUSH
21094: LD_INT 30
21096: PUSH
21097: LD_INT 30
21099: PUSH
21100: LD_INT 30
21102: PUSH
21103: LD_INT 30
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: ST_TO_ADDR
// un := CreateHuman ;
21112: LD_ADDR_VAR 0 3
21116: PUSH
21117: CALL_OW 44
21121: ST_TO_ADDR
// hc_noskilllimit := false ;
21122: LD_ADDR_OWVAR 76
21126: PUSH
21127: LD_INT 0
21129: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21130: LD_VAR 0 3
21134: PPUSH
21135: LD_INT 1
21137: PPUSH
21138: CALL_OW 51
// ToLua ( playRanger() ) ;
21142: LD_STRING playRanger()
21144: PPUSH
21145: CALL_OW 559
// p := 0 ;
21149: LD_ADDR_VAR 0 2
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21157: LD_INT 35
21159: PPUSH
21160: CALL_OW 67
// p := p + 1 ;
21164: LD_ADDR_VAR 0 2
21168: PUSH
21169: LD_VAR 0 2
21173: PUSH
21174: LD_INT 1
21176: PLUS
21177: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21178: LD_VAR 0 3
21182: PPUSH
21183: CALL_OW 256
21187: PUSH
21188: LD_INT 1000
21190: LESS
21191: IFFALSE 21205
// SetLives ( un , 1000 ) ;
21193: LD_VAR 0 3
21197: PPUSH
21198: LD_INT 1000
21200: PPUSH
21201: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21205: LD_VAR 0 3
21209: PPUSH
21210: LD_INT 81
21212: PUSH
21213: LD_OWVAR 2
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 91
21224: PUSH
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 30
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PPUSH
21242: CALL_OW 69
21246: PPUSH
21247: LD_VAR 0 3
21251: PPUSH
21252: CALL_OW 74
21256: PPUSH
21257: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21261: LD_VAR 0 2
21265: PUSH
21266: LD_INT 80
21268: GREATER
21269: PUSH
21270: LD_VAR 0 3
21274: PPUSH
21275: CALL_OW 301
21279: OR
21280: IFFALSE 21157
// if un then
21282: LD_VAR 0 3
21286: IFFALSE 21297
// RemoveUnit ( un ) ;
21288: LD_VAR 0 3
21292: PPUSH
21293: CALL_OW 64
// end ;
21297: PPOPN 3
21299: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21300: LD_EXP 97
21304: IFFALSE 21420
21306: GO 21308
21308: DISABLE
21309: LD_INT 0
21311: PPUSH
21312: PPUSH
21313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21314: LD_ADDR_VAR 0 2
21318: PUSH
21319: LD_INT 81
21321: PUSH
21322: LD_OWVAR 2
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 21
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PPUSH
21345: CALL_OW 69
21349: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21350: LD_STRING playComputer()
21352: PPUSH
21353: CALL_OW 559
// if not tmp then
21357: LD_VAR 0 2
21361: NOT
21362: IFFALSE 21366
// exit ;
21364: GO 21420
// for i in tmp do
21366: LD_ADDR_VAR 0 1
21370: PUSH
21371: LD_VAR 0 2
21375: PUSH
21376: FOR_IN
21377: IFFALSE 21418
// for j := 1 to 4 do
21379: LD_ADDR_VAR 0 3
21383: PUSH
21384: DOUBLE
21385: LD_INT 1
21387: DEC
21388: ST_TO_ADDR
21389: LD_INT 4
21391: PUSH
21392: FOR_TO
21393: IFFALSE 21414
// SetSkill ( i , j , 10 ) ;
21395: LD_VAR 0 1
21399: PPUSH
21400: LD_VAR 0 3
21404: PPUSH
21405: LD_INT 10
21407: PPUSH
21408: CALL_OW 237
21412: GO 21392
21414: POP
21415: POP
21416: GO 21376
21418: POP
21419: POP
// end ;
21420: PPOPN 3
21422: END
// every 0 0$1 trigger s30 do var i , tmp ;
21423: LD_EXP 98
21427: IFFALSE 21496
21429: GO 21431
21431: DISABLE
21432: LD_INT 0
21434: PPUSH
21435: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21436: LD_ADDR_VAR 0 2
21440: PUSH
21441: LD_INT 22
21443: PUSH
21444: LD_OWVAR 2
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PPUSH
21453: CALL_OW 69
21457: ST_TO_ADDR
// if not tmp then
21458: LD_VAR 0 2
21462: NOT
21463: IFFALSE 21467
// exit ;
21465: GO 21496
// for i in tmp do
21467: LD_ADDR_VAR 0 1
21471: PUSH
21472: LD_VAR 0 2
21476: PUSH
21477: FOR_IN
21478: IFFALSE 21494
// SetLives ( i , 300 ) ;
21480: LD_VAR 0 1
21484: PPUSH
21485: LD_INT 300
21487: PPUSH
21488: CALL_OW 234
21492: GO 21477
21494: POP
21495: POP
// end ;
21496: PPOPN 2
21498: END
// every 0 0$1 trigger s60 do var i , tmp ;
21499: LD_EXP 99
21503: IFFALSE 21572
21505: GO 21507
21507: DISABLE
21508: LD_INT 0
21510: PPUSH
21511: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21512: LD_ADDR_VAR 0 2
21516: PUSH
21517: LD_INT 22
21519: PUSH
21520: LD_OWVAR 2
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PPUSH
21529: CALL_OW 69
21533: ST_TO_ADDR
// if not tmp then
21534: LD_VAR 0 2
21538: NOT
21539: IFFALSE 21543
// exit ;
21541: GO 21572
// for i in tmp do
21543: LD_ADDR_VAR 0 1
21547: PUSH
21548: LD_VAR 0 2
21552: PUSH
21553: FOR_IN
21554: IFFALSE 21570
// SetLives ( i , 600 ) ;
21556: LD_VAR 0 1
21560: PPUSH
21561: LD_INT 600
21563: PPUSH
21564: CALL_OW 234
21568: GO 21553
21570: POP
21571: POP
// end ;
21572: PPOPN 2
21574: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21575: LD_INT 0
21577: PPUSH
// case cmd of 301 :
21578: LD_VAR 0 1
21582: PUSH
21583: LD_INT 301
21585: DOUBLE
21586: EQUAL
21587: IFTRUE 21591
21589: GO 21623
21591: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21592: LD_VAR 0 6
21596: PPUSH
21597: LD_VAR 0 7
21601: PPUSH
21602: LD_VAR 0 8
21606: PPUSH
21607: LD_VAR 0 4
21611: PPUSH
21612: LD_VAR 0 5
21616: PPUSH
21617: CALL 22824 0 5
21621: GO 21744
21623: LD_INT 302
21625: DOUBLE
21626: EQUAL
21627: IFTRUE 21631
21629: GO 21668
21631: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21632: LD_VAR 0 6
21636: PPUSH
21637: LD_VAR 0 7
21641: PPUSH
21642: LD_VAR 0 8
21646: PPUSH
21647: LD_VAR 0 9
21651: PPUSH
21652: LD_VAR 0 4
21656: PPUSH
21657: LD_VAR 0 5
21661: PPUSH
21662: CALL 22915 0 6
21666: GO 21744
21668: LD_INT 303
21670: DOUBLE
21671: EQUAL
21672: IFTRUE 21676
21674: GO 21713
21676: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21677: LD_VAR 0 6
21681: PPUSH
21682: LD_VAR 0 7
21686: PPUSH
21687: LD_VAR 0 8
21691: PPUSH
21692: LD_VAR 0 9
21696: PPUSH
21697: LD_VAR 0 4
21701: PPUSH
21702: LD_VAR 0 5
21706: PPUSH
21707: CALL 21749 0 6
21711: GO 21744
21713: LD_INT 304
21715: DOUBLE
21716: EQUAL
21717: IFTRUE 21721
21719: GO 21743
21721: POP
// hHackTeleport ( unit , x , y ) ; end ;
21722: LD_VAR 0 2
21726: PPUSH
21727: LD_VAR 0 4
21731: PPUSH
21732: LD_VAR 0 5
21736: PPUSH
21737: CALL 23508 0 3
21741: GO 21744
21743: POP
// end ;
21744: LD_VAR 0 12
21748: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21749: LD_INT 0
21751: PPUSH
21752: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21753: LD_VAR 0 1
21757: PUSH
21758: LD_INT 1
21760: LESS
21761: PUSH
21762: LD_VAR 0 1
21766: PUSH
21767: LD_INT 3
21769: GREATER
21770: OR
21771: PUSH
21772: LD_VAR 0 5
21776: PPUSH
21777: LD_VAR 0 6
21781: PPUSH
21782: CALL_OW 428
21786: OR
21787: IFFALSE 21791
// exit ;
21789: GO 22511
// uc_side := your_side ;
21791: LD_ADDR_OWVAR 20
21795: PUSH
21796: LD_OWVAR 2
21800: ST_TO_ADDR
// uc_nation := nation ;
21801: LD_ADDR_OWVAR 21
21805: PUSH
21806: LD_VAR 0 1
21810: ST_TO_ADDR
// bc_level = 1 ;
21811: LD_ADDR_OWVAR 43
21815: PUSH
21816: LD_INT 1
21818: ST_TO_ADDR
// case btype of 1 :
21819: LD_VAR 0 2
21823: PUSH
21824: LD_INT 1
21826: DOUBLE
21827: EQUAL
21828: IFTRUE 21832
21830: GO 21843
21832: POP
// bc_type := b_depot ; 2 :
21833: LD_ADDR_OWVAR 42
21837: PUSH
21838: LD_INT 0
21840: ST_TO_ADDR
21841: GO 22455
21843: LD_INT 2
21845: DOUBLE
21846: EQUAL
21847: IFTRUE 21851
21849: GO 21862
21851: POP
// bc_type := b_warehouse ; 3 :
21852: LD_ADDR_OWVAR 42
21856: PUSH
21857: LD_INT 1
21859: ST_TO_ADDR
21860: GO 22455
21862: LD_INT 3
21864: DOUBLE
21865: EQUAL
21866: IFTRUE 21870
21868: GO 21881
21870: POP
// bc_type := b_lab ; 4 .. 9 :
21871: LD_ADDR_OWVAR 42
21875: PUSH
21876: LD_INT 6
21878: ST_TO_ADDR
21879: GO 22455
21881: LD_INT 4
21883: DOUBLE
21884: GREATEREQUAL
21885: IFFALSE 21893
21887: LD_INT 9
21889: DOUBLE
21890: LESSEQUAL
21891: IFTRUE 21895
21893: GO 21947
21895: POP
// begin bc_type := b_lab_half ;
21896: LD_ADDR_OWVAR 42
21900: PUSH
21901: LD_INT 7
21903: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21904: LD_ADDR_OWVAR 44
21908: PUSH
21909: LD_INT 10
21911: PUSH
21912: LD_INT 11
21914: PUSH
21915: LD_INT 12
21917: PUSH
21918: LD_INT 15
21920: PUSH
21921: LD_INT 14
21923: PUSH
21924: LD_INT 13
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: PUSH
21935: LD_VAR 0 2
21939: PUSH
21940: LD_INT 3
21942: MINUS
21943: ARRAY
21944: ST_TO_ADDR
// end ; 10 .. 13 :
21945: GO 22455
21947: LD_INT 10
21949: DOUBLE
21950: GREATEREQUAL
21951: IFFALSE 21959
21953: LD_INT 13
21955: DOUBLE
21956: LESSEQUAL
21957: IFTRUE 21961
21959: GO 22038
21961: POP
// begin bc_type := b_lab_full ;
21962: LD_ADDR_OWVAR 42
21966: PUSH
21967: LD_INT 8
21969: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21970: LD_ADDR_OWVAR 44
21974: PUSH
21975: LD_INT 10
21977: PUSH
21978: LD_INT 12
21980: PUSH
21981: LD_INT 14
21983: PUSH
21984: LD_INT 13
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: PUSH
21993: LD_VAR 0 2
21997: PUSH
21998: LD_INT 9
22000: MINUS
22001: ARRAY
22002: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22003: LD_ADDR_OWVAR 45
22007: PUSH
22008: LD_INT 11
22010: PUSH
22011: LD_INT 15
22013: PUSH
22014: LD_INT 12
22016: PUSH
22017: LD_INT 15
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: LD_VAR 0 2
22030: PUSH
22031: LD_INT 9
22033: MINUS
22034: ARRAY
22035: ST_TO_ADDR
// end ; 14 :
22036: GO 22455
22038: LD_INT 14
22040: DOUBLE
22041: EQUAL
22042: IFTRUE 22046
22044: GO 22057
22046: POP
// bc_type := b_workshop ; 15 :
22047: LD_ADDR_OWVAR 42
22051: PUSH
22052: LD_INT 2
22054: ST_TO_ADDR
22055: GO 22455
22057: LD_INT 15
22059: DOUBLE
22060: EQUAL
22061: IFTRUE 22065
22063: GO 22076
22065: POP
// bc_type := b_factory ; 16 :
22066: LD_ADDR_OWVAR 42
22070: PUSH
22071: LD_INT 3
22073: ST_TO_ADDR
22074: GO 22455
22076: LD_INT 16
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22095
22084: POP
// bc_type := b_ext_gun ; 17 :
22085: LD_ADDR_OWVAR 42
22089: PUSH
22090: LD_INT 17
22092: ST_TO_ADDR
22093: GO 22455
22095: LD_INT 17
22097: DOUBLE
22098: EQUAL
22099: IFTRUE 22103
22101: GO 22131
22103: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22104: LD_ADDR_OWVAR 42
22108: PUSH
22109: LD_INT 19
22111: PUSH
22112: LD_INT 23
22114: PUSH
22115: LD_INT 19
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: PUSH
22123: LD_VAR 0 1
22127: ARRAY
22128: ST_TO_ADDR
22129: GO 22455
22131: LD_INT 18
22133: DOUBLE
22134: EQUAL
22135: IFTRUE 22139
22137: GO 22150
22139: POP
// bc_type := b_ext_radar ; 19 :
22140: LD_ADDR_OWVAR 42
22144: PUSH
22145: LD_INT 20
22147: ST_TO_ADDR
22148: GO 22455
22150: LD_INT 19
22152: DOUBLE
22153: EQUAL
22154: IFTRUE 22158
22156: GO 22169
22158: POP
// bc_type := b_ext_radio ; 20 :
22159: LD_ADDR_OWVAR 42
22163: PUSH
22164: LD_INT 22
22166: ST_TO_ADDR
22167: GO 22455
22169: LD_INT 20
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22188
22177: POP
// bc_type := b_ext_siberium ; 21 :
22178: LD_ADDR_OWVAR 42
22182: PUSH
22183: LD_INT 21
22185: ST_TO_ADDR
22186: GO 22455
22188: LD_INT 21
22190: DOUBLE
22191: EQUAL
22192: IFTRUE 22196
22194: GO 22207
22196: POP
// bc_type := b_ext_computer ; 22 :
22197: LD_ADDR_OWVAR 42
22201: PUSH
22202: LD_INT 24
22204: ST_TO_ADDR
22205: GO 22455
22207: LD_INT 22
22209: DOUBLE
22210: EQUAL
22211: IFTRUE 22215
22213: GO 22226
22215: POP
// bc_type := b_ext_track ; 23 :
22216: LD_ADDR_OWVAR 42
22220: PUSH
22221: LD_INT 16
22223: ST_TO_ADDR
22224: GO 22455
22226: LD_INT 23
22228: DOUBLE
22229: EQUAL
22230: IFTRUE 22234
22232: GO 22245
22234: POP
// bc_type := b_ext_laser ; 24 :
22235: LD_ADDR_OWVAR 42
22239: PUSH
22240: LD_INT 25
22242: ST_TO_ADDR
22243: GO 22455
22245: LD_INT 24
22247: DOUBLE
22248: EQUAL
22249: IFTRUE 22253
22251: GO 22264
22253: POP
// bc_type := b_control_tower ; 25 :
22254: LD_ADDR_OWVAR 42
22258: PUSH
22259: LD_INT 36
22261: ST_TO_ADDR
22262: GO 22455
22264: LD_INT 25
22266: DOUBLE
22267: EQUAL
22268: IFTRUE 22272
22270: GO 22283
22272: POP
// bc_type := b_breastwork ; 26 :
22273: LD_ADDR_OWVAR 42
22277: PUSH
22278: LD_INT 31
22280: ST_TO_ADDR
22281: GO 22455
22283: LD_INT 26
22285: DOUBLE
22286: EQUAL
22287: IFTRUE 22291
22289: GO 22302
22291: POP
// bc_type := b_bunker ; 27 :
22292: LD_ADDR_OWVAR 42
22296: PUSH
22297: LD_INT 32
22299: ST_TO_ADDR
22300: GO 22455
22302: LD_INT 27
22304: DOUBLE
22305: EQUAL
22306: IFTRUE 22310
22308: GO 22321
22310: POP
// bc_type := b_turret ; 28 :
22311: LD_ADDR_OWVAR 42
22315: PUSH
22316: LD_INT 33
22318: ST_TO_ADDR
22319: GO 22455
22321: LD_INT 28
22323: DOUBLE
22324: EQUAL
22325: IFTRUE 22329
22327: GO 22340
22329: POP
// bc_type := b_armoury ; 29 :
22330: LD_ADDR_OWVAR 42
22334: PUSH
22335: LD_INT 4
22337: ST_TO_ADDR
22338: GO 22455
22340: LD_INT 29
22342: DOUBLE
22343: EQUAL
22344: IFTRUE 22348
22346: GO 22359
22348: POP
// bc_type := b_barracks ; 30 :
22349: LD_ADDR_OWVAR 42
22353: PUSH
22354: LD_INT 5
22356: ST_TO_ADDR
22357: GO 22455
22359: LD_INT 30
22361: DOUBLE
22362: EQUAL
22363: IFTRUE 22367
22365: GO 22378
22367: POP
// bc_type := b_solar_power ; 31 :
22368: LD_ADDR_OWVAR 42
22372: PUSH
22373: LD_INT 27
22375: ST_TO_ADDR
22376: GO 22455
22378: LD_INT 31
22380: DOUBLE
22381: EQUAL
22382: IFTRUE 22386
22384: GO 22397
22386: POP
// bc_type := b_oil_power ; 32 :
22387: LD_ADDR_OWVAR 42
22391: PUSH
22392: LD_INT 26
22394: ST_TO_ADDR
22395: GO 22455
22397: LD_INT 32
22399: DOUBLE
22400: EQUAL
22401: IFTRUE 22405
22403: GO 22416
22405: POP
// bc_type := b_siberite_power ; 33 :
22406: LD_ADDR_OWVAR 42
22410: PUSH
22411: LD_INT 28
22413: ST_TO_ADDR
22414: GO 22455
22416: LD_INT 33
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22435
22424: POP
// bc_type := b_oil_mine ; 34 :
22425: LD_ADDR_OWVAR 42
22429: PUSH
22430: LD_INT 29
22432: ST_TO_ADDR
22433: GO 22455
22435: LD_INT 34
22437: DOUBLE
22438: EQUAL
22439: IFTRUE 22443
22441: GO 22454
22443: POP
// bc_type := b_siberite_mine ; end ;
22444: LD_ADDR_OWVAR 42
22448: PUSH
22449: LD_INT 30
22451: ST_TO_ADDR
22452: GO 22455
22454: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22455: LD_ADDR_VAR 0 8
22459: PUSH
22460: LD_VAR 0 5
22464: PPUSH
22465: LD_VAR 0 6
22469: PPUSH
22470: LD_VAR 0 3
22474: PPUSH
22475: CALL_OW 47
22479: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22480: LD_OWVAR 42
22484: PUSH
22485: LD_INT 32
22487: PUSH
22488: LD_INT 33
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: IN
22495: IFFALSE 22511
// PlaceWeaponTurret ( b , weapon ) ;
22497: LD_VAR 0 8
22501: PPUSH
22502: LD_VAR 0 4
22506: PPUSH
22507: CALL_OW 431
// end ;
22511: LD_VAR 0 7
22515: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22516: LD_INT 0
22518: PPUSH
22519: PPUSH
22520: PPUSH
22521: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22522: LD_ADDR_VAR 0 4
22526: PUSH
22527: LD_INT 22
22529: PUSH
22530: LD_OWVAR 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: LD_INT 30
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 30
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PPUSH
22571: CALL_OW 69
22575: ST_TO_ADDR
// if not tmp then
22576: LD_VAR 0 4
22580: NOT
22581: IFFALSE 22585
// exit ;
22583: GO 22644
// for i in tmp do
22585: LD_ADDR_VAR 0 2
22589: PUSH
22590: LD_VAR 0 4
22594: PUSH
22595: FOR_IN
22596: IFFALSE 22642
// for j = 1 to 3 do
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: DOUBLE
22604: LD_INT 1
22606: DEC
22607: ST_TO_ADDR
22608: LD_INT 3
22610: PUSH
22611: FOR_TO
22612: IFFALSE 22638
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22614: LD_VAR 0 2
22618: PPUSH
22619: CALL_OW 274
22623: PPUSH
22624: LD_VAR 0 3
22628: PPUSH
22629: LD_INT 99999
22631: PPUSH
22632: CALL_OW 277
22636: GO 22611
22638: POP
22639: POP
22640: GO 22595
22642: POP
22643: POP
// end ;
22644: LD_VAR 0 1
22648: RET
// export function hHackSetLevel10 ; var i , j ; begin
22649: LD_INT 0
22651: PPUSH
22652: PPUSH
22653: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22654: LD_ADDR_VAR 0 2
22658: PUSH
22659: LD_INT 21
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PPUSH
22669: CALL_OW 69
22673: PUSH
22674: FOR_IN
22675: IFFALSE 22727
// if IsSelected ( i ) then
22677: LD_VAR 0 2
22681: PPUSH
22682: CALL_OW 306
22686: IFFALSE 22725
// begin for j := 1 to 4 do
22688: LD_ADDR_VAR 0 3
22692: PUSH
22693: DOUBLE
22694: LD_INT 1
22696: DEC
22697: ST_TO_ADDR
22698: LD_INT 4
22700: PUSH
22701: FOR_TO
22702: IFFALSE 22723
// SetSkill ( i , j , 10 ) ;
22704: LD_VAR 0 2
22708: PPUSH
22709: LD_VAR 0 3
22713: PPUSH
22714: LD_INT 10
22716: PPUSH
22717: CALL_OW 237
22721: GO 22701
22723: POP
22724: POP
// end ;
22725: GO 22674
22727: POP
22728: POP
// end ;
22729: LD_VAR 0 1
22733: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22734: LD_INT 0
22736: PPUSH
22737: PPUSH
22738: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: LD_INT 22
22746: PUSH
22747: LD_OWVAR 2
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 21
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PPUSH
22770: CALL_OW 69
22774: PUSH
22775: FOR_IN
22776: IFFALSE 22817
// begin for j := 1 to 4 do
22778: LD_ADDR_VAR 0 3
22782: PUSH
22783: DOUBLE
22784: LD_INT 1
22786: DEC
22787: ST_TO_ADDR
22788: LD_INT 4
22790: PUSH
22791: FOR_TO
22792: IFFALSE 22813
// SetSkill ( i , j , 10 ) ;
22794: LD_VAR 0 2
22798: PPUSH
22799: LD_VAR 0 3
22803: PPUSH
22804: LD_INT 10
22806: PPUSH
22807: CALL_OW 237
22811: GO 22791
22813: POP
22814: POP
// end ;
22815: GO 22775
22817: POP
22818: POP
// end ;
22819: LD_VAR 0 1
22823: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22824: LD_INT 0
22826: PPUSH
// uc_side := your_side ;
22827: LD_ADDR_OWVAR 20
22831: PUSH
22832: LD_OWVAR 2
22836: ST_TO_ADDR
// uc_nation := nation ;
22837: LD_ADDR_OWVAR 21
22841: PUSH
22842: LD_VAR 0 1
22846: ST_TO_ADDR
// InitHc ;
22847: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22851: LD_INT 0
22853: PPUSH
22854: LD_VAR 0 2
22858: PPUSH
22859: LD_VAR 0 3
22863: PPUSH
22864: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22868: LD_VAR 0 4
22872: PPUSH
22873: LD_VAR 0 5
22877: PPUSH
22878: CALL_OW 428
22882: PUSH
22883: LD_INT 0
22885: EQUAL
22886: IFFALSE 22910
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22888: CALL_OW 44
22892: PPUSH
22893: LD_VAR 0 4
22897: PPUSH
22898: LD_VAR 0 5
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: CALL_OW 48
// end ;
22910: LD_VAR 0 6
22914: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22915: LD_INT 0
22917: PPUSH
22918: PPUSH
// uc_side := your_side ;
22919: LD_ADDR_OWVAR 20
22923: PUSH
22924: LD_OWVAR 2
22928: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22929: LD_VAR 0 1
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: LD_INT 3
22942: PUSH
22943: LD_INT 4
22945: PUSH
22946: LD_INT 5
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: IN
22956: IFFALSE 22968
// uc_nation := nation_american else
22958: LD_ADDR_OWVAR 21
22962: PUSH
22963: LD_INT 1
22965: ST_TO_ADDR
22966: GO 23011
// if chassis in [ 11 , 12 , 13 , 14 ] then
22968: LD_VAR 0 1
22972: PUSH
22973: LD_INT 11
22975: PUSH
22976: LD_INT 12
22978: PUSH
22979: LD_INT 13
22981: PUSH
22982: LD_INT 14
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: IN
22991: IFFALSE 23003
// uc_nation := nation_arabian else
22993: LD_ADDR_OWVAR 21
22997: PUSH
22998: LD_INT 2
23000: ST_TO_ADDR
23001: GO 23011
// uc_nation := nation_russian ;
23003: LD_ADDR_OWVAR 21
23007: PUSH
23008: LD_INT 3
23010: ST_TO_ADDR
// vc_chassis := chassis ;
23011: LD_ADDR_OWVAR 37
23015: PUSH
23016: LD_VAR 0 1
23020: ST_TO_ADDR
// vc_engine := engine ;
23021: LD_ADDR_OWVAR 39
23025: PUSH
23026: LD_VAR 0 2
23030: ST_TO_ADDR
// vc_control := control ;
23031: LD_ADDR_OWVAR 38
23035: PUSH
23036: LD_VAR 0 3
23040: ST_TO_ADDR
// vc_weapon := weapon ;
23041: LD_ADDR_OWVAR 40
23045: PUSH
23046: LD_VAR 0 4
23050: ST_TO_ADDR
// un := CreateVehicle ;
23051: LD_ADDR_VAR 0 8
23055: PUSH
23056: CALL_OW 45
23060: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23061: LD_VAR 0 8
23065: PPUSH
23066: LD_INT 0
23068: PPUSH
23069: LD_INT 5
23071: PPUSH
23072: CALL_OW 12
23076: PPUSH
23077: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23081: LD_VAR 0 8
23085: PPUSH
23086: LD_VAR 0 5
23090: PPUSH
23091: LD_VAR 0 6
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: CALL_OW 48
// end ;
23103: LD_VAR 0 7
23107: RET
// export hInvincible ; every 1 do
23108: GO 23110
23110: DISABLE
// hInvincible := [ ] ;
23111: LD_ADDR_EXP 100
23115: PUSH
23116: EMPTY
23117: ST_TO_ADDR
23118: END
// every 10 do var i ;
23119: GO 23121
23121: DISABLE
23122: LD_INT 0
23124: PPUSH
// begin enable ;
23125: ENABLE
// if not hInvincible then
23126: LD_EXP 100
23130: NOT
23131: IFFALSE 23135
// exit ;
23133: GO 23179
// for i in hInvincible do
23135: LD_ADDR_VAR 0 1
23139: PUSH
23140: LD_EXP 100
23144: PUSH
23145: FOR_IN
23146: IFFALSE 23177
// if GetLives ( i ) < 1000 then
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 256
23157: PUSH
23158: LD_INT 1000
23160: LESS
23161: IFFALSE 23175
// SetLives ( i , 1000 ) ;
23163: LD_VAR 0 1
23167: PPUSH
23168: LD_INT 1000
23170: PPUSH
23171: CALL_OW 234
23175: GO 23145
23177: POP
23178: POP
// end ;
23179: PPOPN 1
23181: END
// export function hHackInvincible ; var i ; begin
23182: LD_INT 0
23184: PPUSH
23185: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23186: LD_ADDR_VAR 0 2
23190: PUSH
23191: LD_INT 2
23193: PUSH
23194: LD_INT 21
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 21
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: PPUSH
23219: CALL_OW 69
23223: PUSH
23224: FOR_IN
23225: IFFALSE 23286
// if IsSelected ( i ) then
23227: LD_VAR 0 2
23231: PPUSH
23232: CALL_OW 306
23236: IFFALSE 23284
// begin if i in hInvincible then
23238: LD_VAR 0 2
23242: PUSH
23243: LD_EXP 100
23247: IN
23248: IFFALSE 23268
// hInvincible := hInvincible diff i else
23250: LD_ADDR_EXP 100
23254: PUSH
23255: LD_EXP 100
23259: PUSH
23260: LD_VAR 0 2
23264: DIFF
23265: ST_TO_ADDR
23266: GO 23284
// hInvincible := hInvincible union i ;
23268: LD_ADDR_EXP 100
23272: PUSH
23273: LD_EXP 100
23277: PUSH
23278: LD_VAR 0 2
23282: UNION
23283: ST_TO_ADDR
// end ;
23284: GO 23224
23286: POP
23287: POP
// end ;
23288: LD_VAR 0 1
23292: RET
// export function hHackInvisible ; var i , j ; begin
23293: LD_INT 0
23295: PPUSH
23296: PPUSH
23297: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23298: LD_ADDR_VAR 0 2
23302: PUSH
23303: LD_INT 21
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PPUSH
23313: CALL_OW 69
23317: PUSH
23318: FOR_IN
23319: IFFALSE 23343
// if IsSelected ( i ) then
23321: LD_VAR 0 2
23325: PPUSH
23326: CALL_OW 306
23330: IFFALSE 23341
// ComForceInvisible ( i ) ;
23332: LD_VAR 0 2
23336: PPUSH
23337: CALL_OW 496
23341: GO 23318
23343: POP
23344: POP
// end ;
23345: LD_VAR 0 1
23349: RET
// export function hHackChangeYourSide ; begin
23350: LD_INT 0
23352: PPUSH
// if your_side = 8 then
23353: LD_OWVAR 2
23357: PUSH
23358: LD_INT 8
23360: EQUAL
23361: IFFALSE 23373
// your_side := 0 else
23363: LD_ADDR_OWVAR 2
23367: PUSH
23368: LD_INT 0
23370: ST_TO_ADDR
23371: GO 23387
// your_side := your_side + 1 ;
23373: LD_ADDR_OWVAR 2
23377: PUSH
23378: LD_OWVAR 2
23382: PUSH
23383: LD_INT 1
23385: PLUS
23386: ST_TO_ADDR
// end ;
23387: LD_VAR 0 1
23391: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23392: LD_INT 0
23394: PPUSH
23395: PPUSH
23396: PPUSH
// for i in all_units do
23397: LD_ADDR_VAR 0 2
23401: PUSH
23402: LD_OWVAR 3
23406: PUSH
23407: FOR_IN
23408: IFFALSE 23486
// if IsSelected ( i ) then
23410: LD_VAR 0 2
23414: PPUSH
23415: CALL_OW 306
23419: IFFALSE 23484
// begin j := GetSide ( i ) ;
23421: LD_ADDR_VAR 0 3
23425: PUSH
23426: LD_VAR 0 2
23430: PPUSH
23431: CALL_OW 255
23435: ST_TO_ADDR
// if j = 8 then
23436: LD_VAR 0 3
23440: PUSH
23441: LD_INT 8
23443: EQUAL
23444: IFFALSE 23456
// j := 0 else
23446: LD_ADDR_VAR 0 3
23450: PUSH
23451: LD_INT 0
23453: ST_TO_ADDR
23454: GO 23470
// j := j + 1 ;
23456: LD_ADDR_VAR 0 3
23460: PUSH
23461: LD_VAR 0 3
23465: PUSH
23466: LD_INT 1
23468: PLUS
23469: ST_TO_ADDR
// SetSide ( i , j ) ;
23470: LD_VAR 0 2
23474: PPUSH
23475: LD_VAR 0 3
23479: PPUSH
23480: CALL_OW 235
// end ;
23484: GO 23407
23486: POP
23487: POP
// end ;
23488: LD_VAR 0 1
23492: RET
// export function hHackFog ; begin
23493: LD_INT 0
23495: PPUSH
// FogOff ( true ) ;
23496: LD_INT 1
23498: PPUSH
23499: CALL_OW 344
// end ;
23503: LD_VAR 0 1
23507: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23508: LD_INT 0
23510: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23511: LD_VAR 0 1
23515: PPUSH
23516: LD_VAR 0 2
23520: PPUSH
23521: LD_VAR 0 3
23525: PPUSH
23526: LD_INT 1
23528: PPUSH
23529: LD_INT 1
23531: PPUSH
23532: CALL_OW 483
// CenterOnXY ( x , y ) ;
23536: LD_VAR 0 2
23540: PPUSH
23541: LD_VAR 0 3
23545: PPUSH
23546: CALL_OW 84
// end ; end_of_file
23550: LD_VAR 0 4
23554: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23555: LD_VAR 0 1
23559: PUSH
23560: LD_INT 200
23562: DOUBLE
23563: GREATEREQUAL
23564: IFFALSE 23572
23566: LD_INT 299
23568: DOUBLE
23569: LESSEQUAL
23570: IFTRUE 23574
23572: GO 23606
23574: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_VAR 0 2
23584: PPUSH
23585: LD_VAR 0 3
23589: PPUSH
23590: LD_VAR 0 4
23594: PPUSH
23595: LD_VAR 0 5
23599: PPUSH
23600: CALL 23840 0 5
23604: GO 23683
23606: LD_INT 300
23608: DOUBLE
23609: GREATEREQUAL
23610: IFFALSE 23618
23612: LD_INT 399
23614: DOUBLE
23615: LESSEQUAL
23616: IFTRUE 23620
23618: GO 23682
23620: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
23621: LD_VAR 0 1
23625: PPUSH
23626: LD_VAR 0 2
23630: PPUSH
23631: LD_VAR 0 3
23635: PPUSH
23636: LD_VAR 0 4
23640: PPUSH
23641: LD_VAR 0 5
23645: PPUSH
23646: LD_VAR 0 6
23650: PPUSH
23651: LD_VAR 0 7
23655: PPUSH
23656: LD_VAR 0 8
23660: PPUSH
23661: LD_VAR 0 9
23665: PPUSH
23666: LD_VAR 0 10
23670: PPUSH
23671: LD_VAR 0 11
23675: PPUSH
23676: CALL 21575 0 11
23680: GO 23683
23682: POP
// end ;
23683: PPOPN 11
23685: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
23686: LD_VAR 0 1
23690: PPUSH
23691: LD_VAR 0 2
23695: PPUSH
23696: LD_VAR 0 3
23700: PPUSH
23701: LD_VAR 0 4
23705: PPUSH
23706: LD_VAR 0 5
23710: PPUSH
23711: CALL 23832 0 5
// end ; end_of_file
23715: PPOPN 5
23717: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23718: LD_INT 0
23720: PPUSH
23721: PPUSH
23722: PPUSH
23723: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23724: LD_VAR 0 1
23728: PPUSH
23729: CALL_OW 264
23733: PUSH
23734: LD_EXP 117
23738: EQUAL
23739: IFFALSE 23811
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23741: LD_INT 68
23743: PPUSH
23744: LD_VAR 0 1
23748: PPUSH
23749: CALL_OW 255
23753: PPUSH
23754: CALL_OW 321
23758: PUSH
23759: LD_INT 2
23761: EQUAL
23762: IFFALSE 23774
// eff := 70 else
23764: LD_ADDR_VAR 0 4
23768: PUSH
23769: LD_INT 70
23771: ST_TO_ADDR
23772: GO 23782
// eff := 30 ;
23774: LD_ADDR_VAR 0 4
23778: PUSH
23779: LD_INT 30
23781: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 250
23791: PPUSH
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 251
23801: PPUSH
23802: LD_VAR 0 4
23806: PPUSH
23807: CALL_OW 495
// end ; end ;
23811: LD_VAR 0 2
23815: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23816: LD_INT 0
23818: PPUSH
// end ;
23819: LD_VAR 0 4
23823: RET
// export function SOS_Command ( cmd ) ; begin
23824: LD_INT 0
23826: PPUSH
// end ;
23827: LD_VAR 0 2
23831: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23832: LD_INT 0
23834: PPUSH
// end ;
23835: LD_VAR 0 6
23839: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23840: LD_INT 0
23842: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23843: LD_VAR 0 1
23847: PUSH
23848: LD_INT 250
23850: EQUAL
23851: PUSH
23852: LD_VAR 0 2
23856: PPUSH
23857: CALL_OW 264
23861: PUSH
23862: LD_EXP 120
23866: EQUAL
23867: AND
23868: IFFALSE 23889
// MinerPlaceMine ( unit , x , y ) ;
23870: LD_VAR 0 2
23874: PPUSH
23875: LD_VAR 0 4
23879: PPUSH
23880: LD_VAR 0 5
23884: PPUSH
23885: CALL 26238 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23889: LD_VAR 0 1
23893: PUSH
23894: LD_INT 251
23896: EQUAL
23897: PUSH
23898: LD_VAR 0 2
23902: PPUSH
23903: CALL_OW 264
23907: PUSH
23908: LD_EXP 120
23912: EQUAL
23913: AND
23914: IFFALSE 23935
// MinerDetonateMine ( unit , x , y ) ;
23916: LD_VAR 0 2
23920: PPUSH
23921: LD_VAR 0 4
23925: PPUSH
23926: LD_VAR 0 5
23930: PPUSH
23931: CALL 26515 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23935: LD_VAR 0 1
23939: PUSH
23940: LD_INT 252
23942: EQUAL
23943: PUSH
23944: LD_VAR 0 2
23948: PPUSH
23949: CALL_OW 264
23953: PUSH
23954: LD_EXP 120
23958: EQUAL
23959: AND
23960: IFFALSE 23981
// MinerCreateMinefield ( unit , x , y ) ;
23962: LD_VAR 0 2
23966: PPUSH
23967: LD_VAR 0 4
23971: PPUSH
23972: LD_VAR 0 5
23976: PPUSH
23977: CALL 26932 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23981: LD_VAR 0 1
23985: PUSH
23986: LD_INT 253
23988: EQUAL
23989: PUSH
23990: LD_VAR 0 2
23994: PPUSH
23995: CALL_OW 257
23999: PUSH
24000: LD_INT 5
24002: EQUAL
24003: AND
24004: IFFALSE 24025
// ComBinocular ( unit , x , y ) ;
24006: LD_VAR 0 2
24010: PPUSH
24011: LD_VAR 0 4
24015: PPUSH
24016: LD_VAR 0 5
24020: PPUSH
24021: CALL 27303 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24025: LD_VAR 0 1
24029: PUSH
24030: LD_INT 254
24032: EQUAL
24033: PUSH
24034: LD_VAR 0 2
24038: PPUSH
24039: CALL_OW 264
24043: PUSH
24044: LD_EXP 115
24048: EQUAL
24049: AND
24050: PUSH
24051: LD_VAR 0 3
24055: PPUSH
24056: CALL_OW 263
24060: PUSH
24061: LD_INT 3
24063: EQUAL
24064: AND
24065: IFFALSE 24081
// HackDestroyVehicle ( unit , selectedUnit ) ;
24067: LD_VAR 0 2
24071: PPUSH
24072: LD_VAR 0 3
24076: PPUSH
24077: CALL 25598 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24081: LD_VAR 0 1
24085: PUSH
24086: LD_INT 255
24088: EQUAL
24089: PUSH
24090: LD_VAR 0 2
24094: PPUSH
24095: CALL_OW 264
24099: PUSH
24100: LD_INT 14
24102: PUSH
24103: LD_INT 53
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: IN
24110: AND
24111: PUSH
24112: LD_VAR 0 4
24116: PPUSH
24117: LD_VAR 0 5
24121: PPUSH
24122: CALL_OW 488
24126: AND
24127: IFFALSE 24151
// CutTreeXYR ( unit , x , y , 12 ) ;
24129: LD_VAR 0 2
24133: PPUSH
24134: LD_VAR 0 4
24138: PPUSH
24139: LD_VAR 0 5
24143: PPUSH
24144: LD_INT 12
24146: PPUSH
24147: CALL 24164 0 4
// end ;
24151: LD_VAR 0 6
24155: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24156: LD_INT 0
24158: PPUSH
// end ;
24159: LD_VAR 0 4
24163: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24164: LD_INT 0
24166: PPUSH
24167: PPUSH
24168: PPUSH
24169: PPUSH
24170: PPUSH
24171: PPUSH
24172: PPUSH
24173: PPUSH
24174: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24175: LD_VAR 0 1
24179: NOT
24180: PUSH
24181: LD_VAR 0 2
24185: PPUSH
24186: LD_VAR 0 3
24190: PPUSH
24191: CALL_OW 488
24195: NOT
24196: OR
24197: PUSH
24198: LD_VAR 0 4
24202: NOT
24203: OR
24204: IFFALSE 24208
// exit ;
24206: GO 24548
// list := [ ] ;
24208: LD_ADDR_VAR 0 13
24212: PUSH
24213: EMPTY
24214: ST_TO_ADDR
// if x - r < 0 then
24215: LD_VAR 0 2
24219: PUSH
24220: LD_VAR 0 4
24224: MINUS
24225: PUSH
24226: LD_INT 0
24228: LESS
24229: IFFALSE 24241
// min_x := 0 else
24231: LD_ADDR_VAR 0 7
24235: PUSH
24236: LD_INT 0
24238: ST_TO_ADDR
24239: GO 24257
// min_x := x - r ;
24241: LD_ADDR_VAR 0 7
24245: PUSH
24246: LD_VAR 0 2
24250: PUSH
24251: LD_VAR 0 4
24255: MINUS
24256: ST_TO_ADDR
// if y - r < 0 then
24257: LD_VAR 0 3
24261: PUSH
24262: LD_VAR 0 4
24266: MINUS
24267: PUSH
24268: LD_INT 0
24270: LESS
24271: IFFALSE 24283
// min_y := 0 else
24273: LD_ADDR_VAR 0 8
24277: PUSH
24278: LD_INT 0
24280: ST_TO_ADDR
24281: GO 24299
// min_y := y - r ;
24283: LD_ADDR_VAR 0 8
24287: PUSH
24288: LD_VAR 0 3
24292: PUSH
24293: LD_VAR 0 4
24297: MINUS
24298: ST_TO_ADDR
// max_x := x + r ;
24299: LD_ADDR_VAR 0 9
24303: PUSH
24304: LD_VAR 0 2
24308: PUSH
24309: LD_VAR 0 4
24313: PLUS
24314: ST_TO_ADDR
// max_y := y + r ;
24315: LD_ADDR_VAR 0 10
24319: PUSH
24320: LD_VAR 0 3
24324: PUSH
24325: LD_VAR 0 4
24329: PLUS
24330: ST_TO_ADDR
// for _x = min_x to max_x do
24331: LD_ADDR_VAR 0 11
24335: PUSH
24336: DOUBLE
24337: LD_VAR 0 7
24341: DEC
24342: ST_TO_ADDR
24343: LD_VAR 0 9
24347: PUSH
24348: FOR_TO
24349: IFFALSE 24466
// for _y = min_y to max_y do
24351: LD_ADDR_VAR 0 12
24355: PUSH
24356: DOUBLE
24357: LD_VAR 0 8
24361: DEC
24362: ST_TO_ADDR
24363: LD_VAR 0 10
24367: PUSH
24368: FOR_TO
24369: IFFALSE 24462
// begin if not ValidHex ( _x , _y ) then
24371: LD_VAR 0 11
24375: PPUSH
24376: LD_VAR 0 12
24380: PPUSH
24381: CALL_OW 488
24385: NOT
24386: IFFALSE 24390
// continue ;
24388: GO 24368
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24390: LD_VAR 0 11
24394: PPUSH
24395: LD_VAR 0 12
24399: PPUSH
24400: CALL_OW 351
24404: PUSH
24405: LD_VAR 0 11
24409: PPUSH
24410: LD_VAR 0 12
24414: PPUSH
24415: CALL_OW 554
24419: AND
24420: IFFALSE 24460
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24422: LD_ADDR_VAR 0 13
24426: PUSH
24427: LD_VAR 0 13
24431: PPUSH
24432: LD_VAR 0 13
24436: PUSH
24437: LD_INT 1
24439: PLUS
24440: PPUSH
24441: LD_VAR 0 11
24445: PUSH
24446: LD_VAR 0 12
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PPUSH
24455: CALL_OW 2
24459: ST_TO_ADDR
// end ;
24460: GO 24368
24462: POP
24463: POP
24464: GO 24348
24466: POP
24467: POP
// if not list then
24468: LD_VAR 0 13
24472: NOT
24473: IFFALSE 24477
// exit ;
24475: GO 24548
// for i in list do
24477: LD_ADDR_VAR 0 6
24481: PUSH
24482: LD_VAR 0 13
24486: PUSH
24487: FOR_IN
24488: IFFALSE 24546
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24490: LD_VAR 0 1
24494: PPUSH
24495: LD_STRING M
24497: PUSH
24498: LD_VAR 0 6
24502: PUSH
24503: LD_INT 1
24505: ARRAY
24506: PUSH
24507: LD_VAR 0 6
24511: PUSH
24512: LD_INT 2
24514: ARRAY
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: PPUSH
24540: CALL_OW 447
24544: GO 24487
24546: POP
24547: POP
// end ;
24548: LD_VAR 0 5
24552: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24553: LD_EXP 103
24557: NOT
24558: IFFALSE 24608
24560: GO 24562
24562: DISABLE
// begin initHack := true ;
24563: LD_ADDR_EXP 103
24567: PUSH
24568: LD_INT 1
24570: ST_TO_ADDR
// hackTanks := [ ] ;
24571: LD_ADDR_EXP 104
24575: PUSH
24576: EMPTY
24577: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24578: LD_ADDR_EXP 105
24582: PUSH
24583: EMPTY
24584: ST_TO_ADDR
// hackLimit := 3 ;
24585: LD_ADDR_EXP 106
24589: PUSH
24590: LD_INT 3
24592: ST_TO_ADDR
// hackDist := 12 ;
24593: LD_ADDR_EXP 107
24597: PUSH
24598: LD_INT 12
24600: ST_TO_ADDR
// hackCounter := [ ] ;
24601: LD_ADDR_EXP 108
24605: PUSH
24606: EMPTY
24607: ST_TO_ADDR
// end ;
24608: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24609: LD_EXP 103
24613: PUSH
24614: LD_INT 34
24616: PUSH
24617: LD_EXP 115
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PPUSH
24626: CALL_OW 69
24630: AND
24631: IFFALSE 24886
24633: GO 24635
24635: DISABLE
24636: LD_INT 0
24638: PPUSH
24639: PPUSH
// begin enable ;
24640: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24641: LD_ADDR_VAR 0 1
24645: PUSH
24646: LD_INT 34
24648: PUSH
24649: LD_EXP 115
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PPUSH
24658: CALL_OW 69
24662: PUSH
24663: FOR_IN
24664: IFFALSE 24884
// begin if not i in hackTanks then
24666: LD_VAR 0 1
24670: PUSH
24671: LD_EXP 104
24675: IN
24676: NOT
24677: IFFALSE 24760
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24679: LD_ADDR_EXP 104
24683: PUSH
24684: LD_EXP 104
24688: PPUSH
24689: LD_EXP 104
24693: PUSH
24694: LD_INT 1
24696: PLUS
24697: PPUSH
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 1
24707: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24708: LD_ADDR_EXP 105
24712: PUSH
24713: LD_EXP 105
24717: PPUSH
24718: LD_EXP 105
24722: PUSH
24723: LD_INT 1
24725: PLUS
24726: PPUSH
24727: EMPTY
24728: PPUSH
24729: CALL_OW 1
24733: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24734: LD_ADDR_EXP 108
24738: PUSH
24739: LD_EXP 108
24743: PPUSH
24744: LD_EXP 108
24748: PUSH
24749: LD_INT 1
24751: PLUS
24752: PPUSH
24753: EMPTY
24754: PPUSH
24755: CALL_OW 1
24759: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24760: LD_VAR 0 1
24764: PPUSH
24765: CALL_OW 302
24769: NOT
24770: IFFALSE 24783
// begin HackUnlinkAll ( i ) ;
24772: LD_VAR 0 1
24776: PPUSH
24777: CALL 24889 0 1
// continue ;
24781: GO 24663
// end ; HackCheckCapturedStatus ( i ) ;
24783: LD_VAR 0 1
24787: PPUSH
24788: CALL 25332 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24792: LD_ADDR_VAR 0 2
24796: PUSH
24797: LD_INT 81
24799: PUSH
24800: LD_VAR 0 1
24804: PPUSH
24805: CALL_OW 255
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 33
24816: PUSH
24817: LD_INT 3
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 91
24826: PUSH
24827: LD_VAR 0 1
24831: PUSH
24832: LD_EXP 107
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 50
24844: PUSH
24845: EMPTY
24846: LIST
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: PPUSH
24854: CALL_OW 69
24858: ST_TO_ADDR
// if not tmp then
24859: LD_VAR 0 2
24863: NOT
24864: IFFALSE 24868
// continue ;
24866: GO 24663
// HackLink ( i , tmp ) ;
24868: LD_VAR 0 1
24872: PPUSH
24873: LD_VAR 0 2
24877: PPUSH
24878: CALL 25025 0 2
// end ;
24882: GO 24663
24884: POP
24885: POP
// end ;
24886: PPOPN 2
24888: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24889: LD_INT 0
24891: PPUSH
24892: PPUSH
24893: PPUSH
// if not hack in hackTanks then
24894: LD_VAR 0 1
24898: PUSH
24899: LD_EXP 104
24903: IN
24904: NOT
24905: IFFALSE 24909
// exit ;
24907: GO 25020
// index := GetElementIndex ( hackTanks , hack ) ;
24909: LD_ADDR_VAR 0 4
24913: PUSH
24914: LD_EXP 104
24918: PPUSH
24919: LD_VAR 0 1
24923: PPUSH
24924: CALL 32494 0 2
24928: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24929: LD_EXP 105
24933: PUSH
24934: LD_VAR 0 4
24938: ARRAY
24939: IFFALSE 25020
// begin for i in hackTanksCaptured [ index ] do
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_EXP 105
24950: PUSH
24951: LD_VAR 0 4
24955: ARRAY
24956: PUSH
24957: FOR_IN
24958: IFFALSE 24984
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24960: LD_VAR 0 3
24964: PUSH
24965: LD_INT 1
24967: ARRAY
24968: PPUSH
24969: LD_VAR 0 3
24973: PUSH
24974: LD_INT 2
24976: ARRAY
24977: PPUSH
24978: CALL_OW 235
24982: GO 24957
24984: POP
24985: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24986: LD_ADDR_EXP 105
24990: PUSH
24991: LD_EXP 105
24995: PPUSH
24996: LD_VAR 0 4
25000: PPUSH
25001: EMPTY
25002: PPUSH
25003: CALL_OW 1
25007: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25008: LD_VAR 0 1
25012: PPUSH
25013: LD_INT 0
25015: PPUSH
25016: CALL_OW 505
// end ; end ;
25020: LD_VAR 0 2
25024: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25025: LD_INT 0
25027: PPUSH
25028: PPUSH
25029: PPUSH
// if not hack in hackTanks or not vehicles then
25030: LD_VAR 0 1
25034: PUSH
25035: LD_EXP 104
25039: IN
25040: NOT
25041: PUSH
25042: LD_VAR 0 2
25046: NOT
25047: OR
25048: IFFALSE 25052
// exit ;
25050: GO 25327
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25052: LD_ADDR_VAR 0 2
25056: PUSH
25057: LD_VAR 0 1
25061: PPUSH
25062: LD_VAR 0 2
25066: PPUSH
25067: LD_INT 1
25069: PPUSH
25070: LD_INT 1
25072: PPUSH
25073: CALL 33144 0 4
25077: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25078: LD_ADDR_VAR 0 5
25082: PUSH
25083: LD_EXP 104
25087: PPUSH
25088: LD_VAR 0 1
25092: PPUSH
25093: CALL 32494 0 2
25097: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25098: LD_EXP 105
25102: PUSH
25103: LD_VAR 0 5
25107: ARRAY
25108: PUSH
25109: LD_EXP 106
25113: LESS
25114: IFFALSE 25303
// begin for i := 1 to vehicles do
25116: LD_ADDR_VAR 0 4
25120: PUSH
25121: DOUBLE
25122: LD_INT 1
25124: DEC
25125: ST_TO_ADDR
25126: LD_VAR 0 2
25130: PUSH
25131: FOR_TO
25132: IFFALSE 25301
// begin if hackTanksCaptured [ index ] = hackLimit then
25134: LD_EXP 105
25138: PUSH
25139: LD_VAR 0 5
25143: ARRAY
25144: PUSH
25145: LD_EXP 106
25149: EQUAL
25150: IFFALSE 25154
// break ;
25152: GO 25301
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25154: LD_ADDR_EXP 108
25158: PUSH
25159: LD_EXP 108
25163: PPUSH
25164: LD_VAR 0 5
25168: PPUSH
25169: LD_EXP 108
25173: PUSH
25174: LD_VAR 0 5
25178: ARRAY
25179: PUSH
25180: LD_INT 1
25182: PLUS
25183: PPUSH
25184: CALL_OW 1
25188: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25189: LD_ADDR_EXP 105
25193: PUSH
25194: LD_EXP 105
25198: PPUSH
25199: LD_VAR 0 5
25203: PUSH
25204: LD_EXP 105
25208: PUSH
25209: LD_VAR 0 5
25213: ARRAY
25214: PUSH
25215: LD_INT 1
25217: PLUS
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PPUSH
25223: LD_VAR 0 2
25227: PUSH
25228: LD_VAR 0 4
25232: ARRAY
25233: PUSH
25234: LD_VAR 0 2
25238: PUSH
25239: LD_VAR 0 4
25243: ARRAY
25244: PPUSH
25245: CALL_OW 255
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PPUSH
25254: CALL 32709 0 3
25258: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25259: LD_VAR 0 2
25263: PUSH
25264: LD_VAR 0 4
25268: ARRAY
25269: PPUSH
25270: LD_VAR 0 1
25274: PPUSH
25275: CALL_OW 255
25279: PPUSH
25280: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25284: LD_VAR 0 2
25288: PUSH
25289: LD_VAR 0 4
25293: ARRAY
25294: PPUSH
25295: CALL_OW 141
// end ;
25299: GO 25131
25301: POP
25302: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25303: LD_VAR 0 1
25307: PPUSH
25308: LD_EXP 105
25312: PUSH
25313: LD_VAR 0 5
25317: ARRAY
25318: PUSH
25319: LD_INT 0
25321: PLUS
25322: PPUSH
25323: CALL_OW 505
// end ;
25327: LD_VAR 0 3
25331: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25332: LD_INT 0
25334: PPUSH
25335: PPUSH
25336: PPUSH
25337: PPUSH
// if not hack in hackTanks then
25338: LD_VAR 0 1
25342: PUSH
25343: LD_EXP 104
25347: IN
25348: NOT
25349: IFFALSE 25353
// exit ;
25351: GO 25593
// index := GetElementIndex ( hackTanks , hack ) ;
25353: LD_ADDR_VAR 0 4
25357: PUSH
25358: LD_EXP 104
25362: PPUSH
25363: LD_VAR 0 1
25367: PPUSH
25368: CALL 32494 0 2
25372: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25373: LD_ADDR_VAR 0 3
25377: PUSH
25378: DOUBLE
25379: LD_EXP 105
25383: PUSH
25384: LD_VAR 0 4
25388: ARRAY
25389: INC
25390: ST_TO_ADDR
25391: LD_INT 1
25393: PUSH
25394: FOR_DOWNTO
25395: IFFALSE 25567
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25397: LD_ADDR_VAR 0 5
25401: PUSH
25402: LD_EXP 105
25406: PUSH
25407: LD_VAR 0 4
25411: ARRAY
25412: PUSH
25413: LD_VAR 0 3
25417: ARRAY
25418: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25419: LD_VAR 0 5
25423: PUSH
25424: LD_INT 1
25426: ARRAY
25427: PPUSH
25428: CALL_OW 302
25432: NOT
25433: PUSH
25434: LD_VAR 0 5
25438: PUSH
25439: LD_INT 1
25441: ARRAY
25442: PPUSH
25443: CALL_OW 255
25447: PUSH
25448: LD_VAR 0 1
25452: PPUSH
25453: CALL_OW 255
25457: NONEQUAL
25458: OR
25459: IFFALSE 25565
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25461: LD_VAR 0 5
25465: PUSH
25466: LD_INT 1
25468: ARRAY
25469: PPUSH
25470: CALL_OW 305
25474: PUSH
25475: LD_VAR 0 5
25479: PUSH
25480: LD_INT 1
25482: ARRAY
25483: PPUSH
25484: CALL_OW 255
25488: PUSH
25489: LD_VAR 0 1
25493: PPUSH
25494: CALL_OW 255
25498: EQUAL
25499: AND
25500: IFFALSE 25524
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25502: LD_VAR 0 5
25506: PUSH
25507: LD_INT 1
25509: ARRAY
25510: PPUSH
25511: LD_VAR 0 5
25515: PUSH
25516: LD_INT 2
25518: ARRAY
25519: PPUSH
25520: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25524: LD_ADDR_EXP 105
25528: PUSH
25529: LD_EXP 105
25533: PPUSH
25534: LD_VAR 0 4
25538: PPUSH
25539: LD_EXP 105
25543: PUSH
25544: LD_VAR 0 4
25548: ARRAY
25549: PPUSH
25550: LD_VAR 0 3
25554: PPUSH
25555: CALL_OW 3
25559: PPUSH
25560: CALL_OW 1
25564: ST_TO_ADDR
// end ; end ;
25565: GO 25394
25567: POP
25568: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25569: LD_VAR 0 1
25573: PPUSH
25574: LD_EXP 105
25578: PUSH
25579: LD_VAR 0 4
25583: ARRAY
25584: PUSH
25585: LD_INT 0
25587: PLUS
25588: PPUSH
25589: CALL_OW 505
// end ;
25593: LD_VAR 0 2
25597: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25598: LD_INT 0
25600: PPUSH
25601: PPUSH
25602: PPUSH
25603: PPUSH
// if not hack in hackTanks then
25604: LD_VAR 0 1
25608: PUSH
25609: LD_EXP 104
25613: IN
25614: NOT
25615: IFFALSE 25619
// exit ;
25617: GO 25704
// index := GetElementIndex ( hackTanks , hack ) ;
25619: LD_ADDR_VAR 0 5
25623: PUSH
25624: LD_EXP 104
25628: PPUSH
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL 32494 0 2
25638: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25639: LD_ADDR_VAR 0 4
25643: PUSH
25644: DOUBLE
25645: LD_INT 1
25647: DEC
25648: ST_TO_ADDR
25649: LD_EXP 105
25653: PUSH
25654: LD_VAR 0 5
25658: ARRAY
25659: PUSH
25660: FOR_TO
25661: IFFALSE 25702
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25663: LD_EXP 105
25667: PUSH
25668: LD_VAR 0 5
25672: ARRAY
25673: PUSH
25674: LD_VAR 0 4
25678: ARRAY
25679: PUSH
25680: LD_INT 1
25682: ARRAY
25683: PUSH
25684: LD_VAR 0 2
25688: EQUAL
25689: IFFALSE 25700
// KillUnit ( vehicle ) ;
25691: LD_VAR 0 2
25695: PPUSH
25696: CALL_OW 66
25700: GO 25660
25702: POP
25703: POP
// end ;
25704: LD_VAR 0 3
25708: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25709: LD_EXP 109
25713: NOT
25714: IFFALSE 25749
25716: GO 25718
25718: DISABLE
// begin initMiner := true ;
25719: LD_ADDR_EXP 109
25723: PUSH
25724: LD_INT 1
25726: ST_TO_ADDR
// minersList := [ ] ;
25727: LD_ADDR_EXP 110
25731: PUSH
25732: EMPTY
25733: ST_TO_ADDR
// minerMinesList := [ ] ;
25734: LD_ADDR_EXP 111
25738: PUSH
25739: EMPTY
25740: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25741: LD_ADDR_EXP 112
25745: PUSH
25746: LD_INT 5
25748: ST_TO_ADDR
// end ;
25749: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25750: LD_EXP 109
25754: PUSH
25755: LD_INT 34
25757: PUSH
25758: LD_EXP 120
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PPUSH
25767: CALL_OW 69
25771: AND
25772: IFFALSE 26235
25774: GO 25776
25776: DISABLE
25777: LD_INT 0
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
// begin enable ;
25783: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25784: LD_ADDR_VAR 0 1
25788: PUSH
25789: LD_INT 34
25791: PUSH
25792: LD_EXP 120
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PPUSH
25801: CALL_OW 69
25805: PUSH
25806: FOR_IN
25807: IFFALSE 25879
// begin if not i in minersList then
25809: LD_VAR 0 1
25813: PUSH
25814: LD_EXP 110
25818: IN
25819: NOT
25820: IFFALSE 25877
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25822: LD_ADDR_EXP 110
25826: PUSH
25827: LD_EXP 110
25831: PPUSH
25832: LD_EXP 110
25836: PUSH
25837: LD_INT 1
25839: PLUS
25840: PPUSH
25841: LD_VAR 0 1
25845: PPUSH
25846: CALL_OW 1
25850: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25851: LD_ADDR_EXP 111
25855: PUSH
25856: LD_EXP 111
25860: PPUSH
25861: LD_EXP 111
25865: PUSH
25866: LD_INT 1
25868: PLUS
25869: PPUSH
25870: EMPTY
25871: PPUSH
25872: CALL_OW 1
25876: ST_TO_ADDR
// end end ;
25877: GO 25806
25879: POP
25880: POP
// for i := minerMinesList downto 1 do
25881: LD_ADDR_VAR 0 1
25885: PUSH
25886: DOUBLE
25887: LD_EXP 111
25891: INC
25892: ST_TO_ADDR
25893: LD_INT 1
25895: PUSH
25896: FOR_DOWNTO
25897: IFFALSE 26233
// begin if IsLive ( minersList [ i ] ) then
25899: LD_EXP 110
25903: PUSH
25904: LD_VAR 0 1
25908: ARRAY
25909: PPUSH
25910: CALL_OW 300
25914: IFFALSE 25942
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25916: LD_EXP 110
25920: PUSH
25921: LD_VAR 0 1
25925: ARRAY
25926: PPUSH
25927: LD_EXP 111
25931: PUSH
25932: LD_VAR 0 1
25936: ARRAY
25937: PPUSH
25938: CALL_OW 505
// if not minerMinesList [ i ] then
25942: LD_EXP 111
25946: PUSH
25947: LD_VAR 0 1
25951: ARRAY
25952: NOT
25953: IFFALSE 25957
// continue ;
25955: GO 25896
// for j := minerMinesList [ i ] downto 1 do
25957: LD_ADDR_VAR 0 2
25961: PUSH
25962: DOUBLE
25963: LD_EXP 111
25967: PUSH
25968: LD_VAR 0 1
25972: ARRAY
25973: INC
25974: ST_TO_ADDR
25975: LD_INT 1
25977: PUSH
25978: FOR_DOWNTO
25979: IFFALSE 26229
// begin side := GetSide ( minersList [ i ] ) ;
25981: LD_ADDR_VAR 0 3
25985: PUSH
25986: LD_EXP 110
25990: PUSH
25991: LD_VAR 0 1
25995: ARRAY
25996: PPUSH
25997: CALL_OW 255
26001: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26002: LD_ADDR_VAR 0 4
26006: PUSH
26007: LD_EXP 111
26011: PUSH
26012: LD_VAR 0 1
26016: ARRAY
26017: PUSH
26018: LD_VAR 0 2
26022: ARRAY
26023: PUSH
26024: LD_INT 1
26026: ARRAY
26027: PPUSH
26028: LD_EXP 111
26032: PUSH
26033: LD_VAR 0 1
26037: ARRAY
26038: PUSH
26039: LD_VAR 0 2
26043: ARRAY
26044: PUSH
26045: LD_INT 2
26047: ARRAY
26048: PPUSH
26049: CALL_OW 428
26053: ST_TO_ADDR
// if not tmp then
26054: LD_VAR 0 4
26058: NOT
26059: IFFALSE 26063
// continue ;
26061: GO 25978
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26063: LD_VAR 0 4
26067: PUSH
26068: LD_INT 81
26070: PUSH
26071: LD_VAR 0 3
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PPUSH
26080: CALL_OW 69
26084: IN
26085: PUSH
26086: LD_EXP 111
26090: PUSH
26091: LD_VAR 0 1
26095: ARRAY
26096: PUSH
26097: LD_VAR 0 2
26101: ARRAY
26102: PUSH
26103: LD_INT 1
26105: ARRAY
26106: PPUSH
26107: LD_EXP 111
26111: PUSH
26112: LD_VAR 0 1
26116: ARRAY
26117: PUSH
26118: LD_VAR 0 2
26122: ARRAY
26123: PUSH
26124: LD_INT 2
26126: ARRAY
26127: PPUSH
26128: CALL_OW 458
26132: AND
26133: IFFALSE 26227
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26135: LD_EXP 111
26139: PUSH
26140: LD_VAR 0 1
26144: ARRAY
26145: PUSH
26146: LD_VAR 0 2
26150: ARRAY
26151: PUSH
26152: LD_INT 1
26154: ARRAY
26155: PPUSH
26156: LD_EXP 111
26160: PUSH
26161: LD_VAR 0 1
26165: ARRAY
26166: PUSH
26167: LD_VAR 0 2
26171: ARRAY
26172: PUSH
26173: LD_INT 2
26175: ARRAY
26176: PPUSH
26177: LD_VAR 0 3
26181: PPUSH
26182: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26186: LD_ADDR_EXP 111
26190: PUSH
26191: LD_EXP 111
26195: PPUSH
26196: LD_VAR 0 1
26200: PPUSH
26201: LD_EXP 111
26205: PUSH
26206: LD_VAR 0 1
26210: ARRAY
26211: PPUSH
26212: LD_VAR 0 2
26216: PPUSH
26217: CALL_OW 3
26221: PPUSH
26222: CALL_OW 1
26226: ST_TO_ADDR
// end ; end ;
26227: GO 25978
26229: POP
26230: POP
// end ;
26231: GO 25896
26233: POP
26234: POP
// end ;
26235: PPOPN 4
26237: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26238: LD_INT 0
26240: PPUSH
26241: PPUSH
// result := false ;
26242: LD_ADDR_VAR 0 4
26246: PUSH
26247: LD_INT 0
26249: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26250: LD_VAR 0 1
26254: PPUSH
26255: CALL_OW 264
26259: PUSH
26260: LD_EXP 120
26264: EQUAL
26265: NOT
26266: IFFALSE 26270
// exit ;
26268: GO 26510
// index := GetElementIndex ( minersList , unit ) ;
26270: LD_ADDR_VAR 0 5
26274: PUSH
26275: LD_EXP 110
26279: PPUSH
26280: LD_VAR 0 1
26284: PPUSH
26285: CALL 32494 0 2
26289: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26290: LD_EXP 111
26294: PUSH
26295: LD_VAR 0 5
26299: ARRAY
26300: PUSH
26301: LD_EXP 112
26305: GREATEREQUAL
26306: IFFALSE 26310
// exit ;
26308: GO 26510
// ComMoveXY ( unit , x , y ) ;
26310: LD_VAR 0 1
26314: PPUSH
26315: LD_VAR 0 2
26319: PPUSH
26320: LD_VAR 0 3
26324: PPUSH
26325: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26329: LD_INT 35
26331: PPUSH
26332: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26336: LD_VAR 0 1
26340: PPUSH
26341: LD_VAR 0 2
26345: PPUSH
26346: LD_VAR 0 3
26350: PPUSH
26351: CALL 63266 0 3
26355: NOT
26356: PUSH
26357: LD_VAR 0 1
26361: PPUSH
26362: CALL_OW 314
26366: AND
26367: IFFALSE 26371
// exit ;
26369: GO 26510
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26371: LD_VAR 0 2
26375: PPUSH
26376: LD_VAR 0 3
26380: PPUSH
26381: CALL_OW 428
26385: PUSH
26386: LD_VAR 0 1
26390: EQUAL
26391: PUSH
26392: LD_VAR 0 1
26396: PPUSH
26397: CALL_OW 314
26401: NOT
26402: AND
26403: IFFALSE 26329
// PlaySoundXY ( x , y , PlantMine ) ;
26405: LD_VAR 0 2
26409: PPUSH
26410: LD_VAR 0 3
26414: PPUSH
26415: LD_STRING PlantMine
26417: PPUSH
26418: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26422: LD_VAR 0 2
26426: PPUSH
26427: LD_VAR 0 3
26431: PPUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: CALL_OW 255
26441: PPUSH
26442: LD_INT 0
26444: PPUSH
26445: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26449: LD_ADDR_EXP 111
26453: PUSH
26454: LD_EXP 111
26458: PPUSH
26459: LD_VAR 0 5
26463: PUSH
26464: LD_EXP 111
26468: PUSH
26469: LD_VAR 0 5
26473: ARRAY
26474: PUSH
26475: LD_INT 1
26477: PLUS
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PPUSH
26483: LD_VAR 0 2
26487: PUSH
26488: LD_VAR 0 3
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PPUSH
26497: CALL 32709 0 3
26501: ST_TO_ADDR
// result := true ;
26502: LD_ADDR_VAR 0 4
26506: PUSH
26507: LD_INT 1
26509: ST_TO_ADDR
// end ;
26510: LD_VAR 0 4
26514: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26515: LD_INT 0
26517: PPUSH
26518: PPUSH
26519: PPUSH
// if not unit in minersList then
26520: LD_VAR 0 1
26524: PUSH
26525: LD_EXP 110
26529: IN
26530: NOT
26531: IFFALSE 26535
// exit ;
26533: GO 26927
// index := GetElementIndex ( minersList , unit ) ;
26535: LD_ADDR_VAR 0 6
26539: PUSH
26540: LD_EXP 110
26544: PPUSH
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL 32494 0 2
26554: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26555: LD_ADDR_VAR 0 5
26559: PUSH
26560: DOUBLE
26561: LD_EXP 111
26565: PUSH
26566: LD_VAR 0 6
26570: ARRAY
26571: INC
26572: ST_TO_ADDR
26573: LD_INT 1
26575: PUSH
26576: FOR_DOWNTO
26577: IFFALSE 26738
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26579: LD_EXP 111
26583: PUSH
26584: LD_VAR 0 6
26588: ARRAY
26589: PUSH
26590: LD_VAR 0 5
26594: ARRAY
26595: PUSH
26596: LD_INT 1
26598: ARRAY
26599: PUSH
26600: LD_VAR 0 2
26604: EQUAL
26605: PUSH
26606: LD_EXP 111
26610: PUSH
26611: LD_VAR 0 6
26615: ARRAY
26616: PUSH
26617: LD_VAR 0 5
26621: ARRAY
26622: PUSH
26623: LD_INT 2
26625: ARRAY
26626: PUSH
26627: LD_VAR 0 3
26631: EQUAL
26632: AND
26633: IFFALSE 26736
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26635: LD_EXP 111
26639: PUSH
26640: LD_VAR 0 6
26644: ARRAY
26645: PUSH
26646: LD_VAR 0 5
26650: ARRAY
26651: PUSH
26652: LD_INT 1
26654: ARRAY
26655: PPUSH
26656: LD_EXP 111
26660: PUSH
26661: LD_VAR 0 6
26665: ARRAY
26666: PUSH
26667: LD_VAR 0 5
26671: ARRAY
26672: PUSH
26673: LD_INT 2
26675: ARRAY
26676: PPUSH
26677: LD_VAR 0 1
26681: PPUSH
26682: CALL_OW 255
26686: PPUSH
26687: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26691: LD_ADDR_EXP 111
26695: PUSH
26696: LD_EXP 111
26700: PPUSH
26701: LD_VAR 0 6
26705: PPUSH
26706: LD_EXP 111
26710: PUSH
26711: LD_VAR 0 6
26715: ARRAY
26716: PPUSH
26717: LD_VAR 0 5
26721: PPUSH
26722: CALL_OW 3
26726: PPUSH
26727: CALL_OW 1
26731: ST_TO_ADDR
// exit ;
26732: POP
26733: POP
26734: GO 26927
// end ; end ;
26736: GO 26576
26738: POP
26739: POP
// for i := minerMinesList [ index ] downto 1 do
26740: LD_ADDR_VAR 0 5
26744: PUSH
26745: DOUBLE
26746: LD_EXP 111
26750: PUSH
26751: LD_VAR 0 6
26755: ARRAY
26756: INC
26757: ST_TO_ADDR
26758: LD_INT 1
26760: PUSH
26761: FOR_DOWNTO
26762: IFFALSE 26925
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26764: LD_EXP 111
26768: PUSH
26769: LD_VAR 0 6
26773: ARRAY
26774: PUSH
26775: LD_VAR 0 5
26779: ARRAY
26780: PUSH
26781: LD_INT 1
26783: ARRAY
26784: PPUSH
26785: LD_EXP 111
26789: PUSH
26790: LD_VAR 0 6
26794: ARRAY
26795: PUSH
26796: LD_VAR 0 5
26800: ARRAY
26801: PUSH
26802: LD_INT 2
26804: ARRAY
26805: PPUSH
26806: LD_VAR 0 2
26810: PPUSH
26811: LD_VAR 0 3
26815: PPUSH
26816: CALL_OW 298
26820: PUSH
26821: LD_INT 6
26823: LESS
26824: IFFALSE 26923
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26826: LD_EXP 111
26830: PUSH
26831: LD_VAR 0 6
26835: ARRAY
26836: PUSH
26837: LD_VAR 0 5
26841: ARRAY
26842: PUSH
26843: LD_INT 1
26845: ARRAY
26846: PPUSH
26847: LD_EXP 111
26851: PUSH
26852: LD_VAR 0 6
26856: ARRAY
26857: PUSH
26858: LD_VAR 0 5
26862: ARRAY
26863: PUSH
26864: LD_INT 2
26866: ARRAY
26867: PPUSH
26868: LD_VAR 0 1
26872: PPUSH
26873: CALL_OW 255
26877: PPUSH
26878: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26882: LD_ADDR_EXP 111
26886: PUSH
26887: LD_EXP 111
26891: PPUSH
26892: LD_VAR 0 6
26896: PPUSH
26897: LD_EXP 111
26901: PUSH
26902: LD_VAR 0 6
26906: ARRAY
26907: PPUSH
26908: LD_VAR 0 5
26912: PPUSH
26913: CALL_OW 3
26917: PPUSH
26918: CALL_OW 1
26922: ST_TO_ADDR
// end ; end ;
26923: GO 26761
26925: POP
26926: POP
// end ;
26927: LD_VAR 0 4
26931: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26932: LD_INT 0
26934: PPUSH
26935: PPUSH
26936: PPUSH
26937: PPUSH
26938: PPUSH
26939: PPUSH
26940: PPUSH
26941: PPUSH
26942: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL_OW 264
26952: PUSH
26953: LD_EXP 120
26957: EQUAL
26958: NOT
26959: PUSH
26960: LD_VAR 0 1
26964: PUSH
26965: LD_EXP 110
26969: IN
26970: NOT
26971: OR
26972: IFFALSE 26976
// exit ;
26974: GO 27298
// index := GetElementIndex ( minersList , unit ) ;
26976: LD_ADDR_VAR 0 6
26980: PUSH
26981: LD_EXP 110
26985: PPUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL 32494 0 2
26995: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26996: LD_ADDR_VAR 0 8
27000: PUSH
27001: LD_EXP 112
27005: PUSH
27006: LD_EXP 111
27010: PUSH
27011: LD_VAR 0 6
27015: ARRAY
27016: MINUS
27017: ST_TO_ADDR
// if not minesFreeAmount then
27018: LD_VAR 0 8
27022: NOT
27023: IFFALSE 27027
// exit ;
27025: GO 27298
// tmp := [ ] ;
27027: LD_ADDR_VAR 0 7
27031: PUSH
27032: EMPTY
27033: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27034: LD_ADDR_VAR 0 5
27038: PUSH
27039: DOUBLE
27040: LD_INT 1
27042: DEC
27043: ST_TO_ADDR
27044: LD_VAR 0 8
27048: PUSH
27049: FOR_TO
27050: IFFALSE 27245
// begin _d := rand ( 0 , 5 ) ;
27052: LD_ADDR_VAR 0 11
27056: PUSH
27057: LD_INT 0
27059: PPUSH
27060: LD_INT 5
27062: PPUSH
27063: CALL_OW 12
27067: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27068: LD_ADDR_VAR 0 12
27072: PUSH
27073: LD_INT 2
27075: PPUSH
27076: LD_INT 6
27078: PPUSH
27079: CALL_OW 12
27083: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27084: LD_ADDR_VAR 0 9
27088: PUSH
27089: LD_VAR 0 2
27093: PPUSH
27094: LD_VAR 0 11
27098: PPUSH
27099: LD_VAR 0 12
27103: PPUSH
27104: CALL_OW 272
27108: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27109: LD_ADDR_VAR 0 10
27113: PUSH
27114: LD_VAR 0 3
27118: PPUSH
27119: LD_VAR 0 11
27123: PPUSH
27124: LD_VAR 0 12
27128: PPUSH
27129: CALL_OW 273
27133: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27134: LD_VAR 0 9
27138: PPUSH
27139: LD_VAR 0 10
27143: PPUSH
27144: CALL_OW 488
27148: PUSH
27149: LD_VAR 0 9
27153: PUSH
27154: LD_VAR 0 10
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_VAR 0 7
27167: IN
27168: NOT
27169: AND
27170: PUSH
27171: LD_VAR 0 9
27175: PPUSH
27176: LD_VAR 0 10
27180: PPUSH
27181: CALL_OW 458
27185: NOT
27186: AND
27187: IFFALSE 27229
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27189: LD_ADDR_VAR 0 7
27193: PUSH
27194: LD_VAR 0 7
27198: PPUSH
27199: LD_VAR 0 7
27203: PUSH
27204: LD_INT 1
27206: PLUS
27207: PPUSH
27208: LD_VAR 0 9
27212: PUSH
27213: LD_VAR 0 10
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PPUSH
27222: CALL_OW 1
27226: ST_TO_ADDR
27227: GO 27243
// i := i - 1 ;
27229: LD_ADDR_VAR 0 5
27233: PUSH
27234: LD_VAR 0 5
27238: PUSH
27239: LD_INT 1
27241: MINUS
27242: ST_TO_ADDR
// end ;
27243: GO 27049
27245: POP
27246: POP
// for i in tmp do
27247: LD_ADDR_VAR 0 5
27251: PUSH
27252: LD_VAR 0 7
27256: PUSH
27257: FOR_IN
27258: IFFALSE 27296
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27260: LD_VAR 0 1
27264: PPUSH
27265: LD_VAR 0 5
27269: PUSH
27270: LD_INT 1
27272: ARRAY
27273: PPUSH
27274: LD_VAR 0 5
27278: PUSH
27279: LD_INT 2
27281: ARRAY
27282: PPUSH
27283: CALL 26238 0 3
27287: NOT
27288: IFFALSE 27294
// exit ;
27290: POP
27291: POP
27292: GO 27298
27294: GO 27257
27296: POP
27297: POP
// end ;
27298: LD_VAR 0 4
27302: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27303: LD_INT 0
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
// if not GetClass ( unit ) = class_sniper then
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL_OW 257
27321: PUSH
27322: LD_INT 5
27324: EQUAL
27325: NOT
27326: IFFALSE 27330
// exit ;
27328: GO 27718
// dist := 8 ;
27330: LD_ADDR_VAR 0 5
27334: PUSH
27335: LD_INT 8
27337: ST_TO_ADDR
// viewRange := 12 ;
27338: LD_ADDR_VAR 0 7
27342: PUSH
27343: LD_INT 12
27345: ST_TO_ADDR
// side := GetSide ( unit ) ;
27346: LD_ADDR_VAR 0 6
27350: PUSH
27351: LD_VAR 0 1
27355: PPUSH
27356: CALL_OW 255
27360: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27361: LD_INT 61
27363: PPUSH
27364: LD_VAR 0 6
27368: PPUSH
27369: CALL_OW 321
27373: PUSH
27374: LD_INT 2
27376: EQUAL
27377: IFFALSE 27387
// viewRange := 16 ;
27379: LD_ADDR_VAR 0 7
27383: PUSH
27384: LD_INT 16
27386: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27387: LD_VAR 0 1
27391: PPUSH
27392: LD_VAR 0 2
27396: PPUSH
27397: LD_VAR 0 3
27401: PPUSH
27402: CALL_OW 297
27406: PUSH
27407: LD_VAR 0 5
27411: GREATER
27412: IFFALSE 27491
// begin ComMoveXY ( unit , x , y ) ;
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_VAR 0 2
27423: PPUSH
27424: LD_VAR 0 3
27428: PPUSH
27429: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27433: LD_INT 35
27435: PPUSH
27436: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27440: LD_VAR 0 1
27444: PPUSH
27445: LD_VAR 0 2
27449: PPUSH
27450: LD_VAR 0 3
27454: PPUSH
27455: CALL 63266 0 3
27459: NOT
27460: IFFALSE 27464
// exit ;
27462: GO 27718
// until GetDistUnitXY ( unit , x , y ) < dist ;
27464: LD_VAR 0 1
27468: PPUSH
27469: LD_VAR 0 2
27473: PPUSH
27474: LD_VAR 0 3
27478: PPUSH
27479: CALL_OW 297
27483: PUSH
27484: LD_VAR 0 5
27488: LESS
27489: IFFALSE 27433
// end ; ComTurnXY ( unit , x , y ) ;
27491: LD_VAR 0 1
27495: PPUSH
27496: LD_VAR 0 2
27500: PPUSH
27501: LD_VAR 0 3
27505: PPUSH
27506: CALL_OW 118
// wait ( 5 ) ;
27510: LD_INT 5
27512: PPUSH
27513: CALL_OW 67
// _d := GetDir ( unit ) ;
27517: LD_ADDR_VAR 0 10
27521: PUSH
27522: LD_VAR 0 1
27526: PPUSH
27527: CALL_OW 254
27531: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27532: LD_ADDR_VAR 0 8
27536: PUSH
27537: LD_VAR 0 1
27541: PPUSH
27542: CALL_OW 250
27546: PPUSH
27547: LD_VAR 0 10
27551: PPUSH
27552: LD_VAR 0 5
27556: PPUSH
27557: CALL_OW 272
27561: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27562: LD_ADDR_VAR 0 9
27566: PUSH
27567: LD_VAR 0 1
27571: PPUSH
27572: CALL_OW 251
27576: PPUSH
27577: LD_VAR 0 10
27581: PPUSH
27582: LD_VAR 0 5
27586: PPUSH
27587: CALL_OW 273
27591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27592: LD_VAR 0 8
27596: PPUSH
27597: LD_VAR 0 9
27601: PPUSH
27602: CALL_OW 488
27606: NOT
27607: IFFALSE 27611
// exit ;
27609: GO 27718
// ComAnimCustom ( unit , 1 ) ;
27611: LD_VAR 0 1
27615: PPUSH
27616: LD_INT 1
27618: PPUSH
27619: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27623: LD_VAR 0 8
27627: PPUSH
27628: LD_VAR 0 9
27632: PPUSH
27633: LD_VAR 0 6
27637: PPUSH
27638: LD_VAR 0 7
27642: PPUSH
27643: CALL_OW 330
// repeat wait ( 1 ) ;
27647: LD_INT 1
27649: PPUSH
27650: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27654: LD_VAR 0 1
27658: PPUSH
27659: CALL_OW 316
27663: PUSH
27664: LD_VAR 0 1
27668: PPUSH
27669: CALL_OW 314
27673: OR
27674: PUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 302
27684: NOT
27685: OR
27686: PUSH
27687: LD_VAR 0 1
27691: PPUSH
27692: CALL_OW 301
27696: OR
27697: IFFALSE 27647
// RemoveSeeing ( _x , _y , side ) ;
27699: LD_VAR 0 8
27703: PPUSH
27704: LD_VAR 0 9
27708: PPUSH
27709: LD_VAR 0 6
27713: PPUSH
27714: CALL_OW 331
// end ; end_of_file
27718: LD_VAR 0 4
27722: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27723: LD_INT 0
27725: PPUSH
27726: PPUSH
// if exist_mode then
27727: LD_VAR 0 2
27731: IFFALSE 27756
// unit := CreateCharacter ( prefix & ident ) else
27733: LD_ADDR_VAR 0 5
27737: PUSH
27738: LD_VAR 0 3
27742: PUSH
27743: LD_VAR 0 1
27747: STR
27748: PPUSH
27749: CALL_OW 34
27753: ST_TO_ADDR
27754: GO 27771
// unit := NewCharacter ( ident ) ;
27756: LD_ADDR_VAR 0 5
27760: PUSH
27761: LD_VAR 0 1
27765: PPUSH
27766: CALL_OW 25
27770: ST_TO_ADDR
// result := unit ;
27771: LD_ADDR_VAR 0 4
27775: PUSH
27776: LD_VAR 0 5
27780: ST_TO_ADDR
// end ;
27781: LD_VAR 0 4
27785: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27786: LD_INT 0
27788: PPUSH
27789: PPUSH
// if not side or not nation then
27790: LD_VAR 0 1
27794: NOT
27795: PUSH
27796: LD_VAR 0 2
27800: NOT
27801: OR
27802: IFFALSE 27806
// exit ;
27804: GO 28574
// case nation of nation_american :
27806: LD_VAR 0 2
27810: PUSH
27811: LD_INT 1
27813: DOUBLE
27814: EQUAL
27815: IFTRUE 27819
27817: GO 28033
27819: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27820: LD_ADDR_VAR 0 4
27824: PUSH
27825: LD_INT 35
27827: PUSH
27828: LD_INT 45
27830: PUSH
27831: LD_INT 46
27833: PUSH
27834: LD_INT 47
27836: PUSH
27837: LD_INT 82
27839: PUSH
27840: LD_INT 83
27842: PUSH
27843: LD_INT 84
27845: PUSH
27846: LD_INT 85
27848: PUSH
27849: LD_INT 86
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 6
27860: PUSH
27861: LD_INT 15
27863: PUSH
27864: LD_INT 16
27866: PUSH
27867: LD_INT 7
27869: PUSH
27870: LD_INT 12
27872: PUSH
27873: LD_INT 13
27875: PUSH
27876: LD_INT 10
27878: PUSH
27879: LD_INT 14
27881: PUSH
27882: LD_INT 20
27884: PUSH
27885: LD_INT 21
27887: PUSH
27888: LD_INT 22
27890: PUSH
27891: LD_INT 25
27893: PUSH
27894: LD_INT 32
27896: PUSH
27897: LD_INT 27
27899: PUSH
27900: LD_INT 36
27902: PUSH
27903: LD_INT 69
27905: PUSH
27906: LD_INT 39
27908: PUSH
27909: LD_INT 34
27911: PUSH
27912: LD_INT 40
27914: PUSH
27915: LD_INT 48
27917: PUSH
27918: LD_INT 49
27920: PUSH
27921: LD_INT 50
27923: PUSH
27924: LD_INT 51
27926: PUSH
27927: LD_INT 52
27929: PUSH
27930: LD_INT 53
27932: PUSH
27933: LD_INT 54
27935: PUSH
27936: LD_INT 55
27938: PUSH
27939: LD_INT 56
27941: PUSH
27942: LD_INT 57
27944: PUSH
27945: LD_INT 58
27947: PUSH
27948: LD_INT 59
27950: PUSH
27951: LD_INT 60
27953: PUSH
27954: LD_INT 61
27956: PUSH
27957: LD_INT 62
27959: PUSH
27960: LD_INT 80
27962: PUSH
27963: LD_INT 82
27965: PUSH
27966: LD_INT 83
27968: PUSH
27969: LD_INT 84
27971: PUSH
27972: LD_INT 85
27974: PUSH
27975: LD_INT 86
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: ST_TO_ADDR
28031: GO 28498
28033: LD_INT 2
28035: DOUBLE
28036: EQUAL
28037: IFTRUE 28041
28039: GO 28267
28041: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28042: LD_ADDR_VAR 0 4
28046: PUSH
28047: LD_INT 35
28049: PUSH
28050: LD_INT 45
28052: PUSH
28053: LD_INT 46
28055: PUSH
28056: LD_INT 47
28058: PUSH
28059: LD_INT 82
28061: PUSH
28062: LD_INT 83
28064: PUSH
28065: LD_INT 84
28067: PUSH
28068: LD_INT 85
28070: PUSH
28071: LD_INT 87
28073: PUSH
28074: LD_INT 70
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: LD_INT 11
28082: PUSH
28083: LD_INT 3
28085: PUSH
28086: LD_INT 4
28088: PUSH
28089: LD_INT 5
28091: PUSH
28092: LD_INT 6
28094: PUSH
28095: LD_INT 15
28097: PUSH
28098: LD_INT 18
28100: PUSH
28101: LD_INT 7
28103: PUSH
28104: LD_INT 17
28106: PUSH
28107: LD_INT 8
28109: PUSH
28110: LD_INT 20
28112: PUSH
28113: LD_INT 21
28115: PUSH
28116: LD_INT 22
28118: PUSH
28119: LD_INT 72
28121: PUSH
28122: LD_INT 26
28124: PUSH
28125: LD_INT 69
28127: PUSH
28128: LD_INT 39
28130: PUSH
28131: LD_INT 40
28133: PUSH
28134: LD_INT 41
28136: PUSH
28137: LD_INT 42
28139: PUSH
28140: LD_INT 43
28142: PUSH
28143: LD_INT 48
28145: PUSH
28146: LD_INT 49
28148: PUSH
28149: LD_INT 50
28151: PUSH
28152: LD_INT 51
28154: PUSH
28155: LD_INT 52
28157: PUSH
28158: LD_INT 53
28160: PUSH
28161: LD_INT 54
28163: PUSH
28164: LD_INT 55
28166: PUSH
28167: LD_INT 56
28169: PUSH
28170: LD_INT 60
28172: PUSH
28173: LD_INT 61
28175: PUSH
28176: LD_INT 62
28178: PUSH
28179: LD_INT 66
28181: PUSH
28182: LD_INT 67
28184: PUSH
28185: LD_INT 68
28187: PUSH
28188: LD_INT 81
28190: PUSH
28191: LD_INT 82
28193: PUSH
28194: LD_INT 83
28196: PUSH
28197: LD_INT 84
28199: PUSH
28200: LD_INT 85
28202: PUSH
28203: LD_INT 87
28205: PUSH
28206: LD_INT 88
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: ST_TO_ADDR
28265: GO 28498
28267: LD_INT 3
28269: DOUBLE
28270: EQUAL
28271: IFTRUE 28275
28273: GO 28497
28275: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28276: LD_ADDR_VAR 0 4
28280: PUSH
28281: LD_INT 46
28283: PUSH
28284: LD_INT 47
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: LD_INT 82
28295: PUSH
28296: LD_INT 83
28298: PUSH
28299: LD_INT 84
28301: PUSH
28302: LD_INT 85
28304: PUSH
28305: LD_INT 86
28307: PUSH
28308: LD_INT 11
28310: PUSH
28311: LD_INT 9
28313: PUSH
28314: LD_INT 20
28316: PUSH
28317: LD_INT 19
28319: PUSH
28320: LD_INT 21
28322: PUSH
28323: LD_INT 24
28325: PUSH
28326: LD_INT 22
28328: PUSH
28329: LD_INT 25
28331: PUSH
28332: LD_INT 28
28334: PUSH
28335: LD_INT 29
28337: PUSH
28338: LD_INT 30
28340: PUSH
28341: LD_INT 31
28343: PUSH
28344: LD_INT 37
28346: PUSH
28347: LD_INT 38
28349: PUSH
28350: LD_INT 32
28352: PUSH
28353: LD_INT 27
28355: PUSH
28356: LD_INT 33
28358: PUSH
28359: LD_INT 69
28361: PUSH
28362: LD_INT 39
28364: PUSH
28365: LD_INT 34
28367: PUSH
28368: LD_INT 40
28370: PUSH
28371: LD_INT 71
28373: PUSH
28374: LD_INT 23
28376: PUSH
28377: LD_INT 44
28379: PUSH
28380: LD_INT 48
28382: PUSH
28383: LD_INT 49
28385: PUSH
28386: LD_INT 50
28388: PUSH
28389: LD_INT 51
28391: PUSH
28392: LD_INT 52
28394: PUSH
28395: LD_INT 53
28397: PUSH
28398: LD_INT 54
28400: PUSH
28401: LD_INT 55
28403: PUSH
28404: LD_INT 56
28406: PUSH
28407: LD_INT 57
28409: PUSH
28410: LD_INT 58
28412: PUSH
28413: LD_INT 59
28415: PUSH
28416: LD_INT 63
28418: PUSH
28419: LD_INT 64
28421: PUSH
28422: LD_INT 65
28424: PUSH
28425: LD_INT 82
28427: PUSH
28428: LD_INT 83
28430: PUSH
28431: LD_INT 84
28433: PUSH
28434: LD_INT 85
28436: PUSH
28437: LD_INT 86
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
28495: GO 28498
28497: POP
// if state > - 1 and state < 3 then
28498: LD_VAR 0 3
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: GREATER
28507: PUSH
28508: LD_VAR 0 3
28512: PUSH
28513: LD_INT 3
28515: LESS
28516: AND
28517: IFFALSE 28574
// for i in result do
28519: LD_ADDR_VAR 0 5
28523: PUSH
28524: LD_VAR 0 4
28528: PUSH
28529: FOR_IN
28530: IFFALSE 28572
// if GetTech ( i , side ) <> state then
28532: LD_VAR 0 5
28536: PPUSH
28537: LD_VAR 0 1
28541: PPUSH
28542: CALL_OW 321
28546: PUSH
28547: LD_VAR 0 3
28551: NONEQUAL
28552: IFFALSE 28570
// result := result diff i ;
28554: LD_ADDR_VAR 0 4
28558: PUSH
28559: LD_VAR 0 4
28563: PUSH
28564: LD_VAR 0 5
28568: DIFF
28569: ST_TO_ADDR
28570: GO 28529
28572: POP
28573: POP
// end ;
28574: LD_VAR 0 4
28578: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28579: LD_INT 0
28581: PPUSH
28582: PPUSH
28583: PPUSH
// result := true ;
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 1
28591: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28592: LD_ADDR_VAR 0 5
28596: PUSH
28597: LD_VAR 0 2
28601: PPUSH
28602: CALL_OW 480
28606: ST_TO_ADDR
// if not tmp then
28607: LD_VAR 0 5
28611: NOT
28612: IFFALSE 28616
// exit ;
28614: GO 28665
// for i in tmp do
28616: LD_ADDR_VAR 0 4
28620: PUSH
28621: LD_VAR 0 5
28625: PUSH
28626: FOR_IN
28627: IFFALSE 28663
// if GetTech ( i , side ) <> state_researched then
28629: LD_VAR 0 4
28633: PPUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 321
28643: PUSH
28644: LD_INT 2
28646: NONEQUAL
28647: IFFALSE 28661
// begin result := false ;
28649: LD_ADDR_VAR 0 3
28653: PUSH
28654: LD_INT 0
28656: ST_TO_ADDR
// exit ;
28657: POP
28658: POP
28659: GO 28665
// end ;
28661: GO 28626
28663: POP
28664: POP
// end ;
28665: LD_VAR 0 3
28669: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28670: LD_INT 0
28672: PPUSH
28673: PPUSH
28674: PPUSH
28675: PPUSH
28676: PPUSH
28677: PPUSH
28678: PPUSH
28679: PPUSH
28680: PPUSH
28681: PPUSH
28682: PPUSH
28683: PPUSH
28684: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28685: LD_VAR 0 1
28689: NOT
28690: PUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: CALL_OW 257
28700: PUSH
28701: LD_INT 9
28703: NONEQUAL
28704: OR
28705: IFFALSE 28709
// exit ;
28707: GO 29282
// side := GetSide ( unit ) ;
28709: LD_ADDR_VAR 0 9
28713: PUSH
28714: LD_VAR 0 1
28718: PPUSH
28719: CALL_OW 255
28723: ST_TO_ADDR
// tech_space := tech_spacanom ;
28724: LD_ADDR_VAR 0 12
28728: PUSH
28729: LD_INT 29
28731: ST_TO_ADDR
// tech_time := tech_taurad ;
28732: LD_ADDR_VAR 0 13
28736: PUSH
28737: LD_INT 28
28739: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28740: LD_ADDR_VAR 0 11
28744: PUSH
28745: LD_VAR 0 1
28749: PPUSH
28750: CALL_OW 310
28754: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28755: LD_VAR 0 11
28759: PPUSH
28760: CALL_OW 247
28764: PUSH
28765: LD_INT 2
28767: EQUAL
28768: IFFALSE 28772
// exit ;
28770: GO 29282
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28772: LD_ADDR_VAR 0 8
28776: PUSH
28777: LD_INT 81
28779: PUSH
28780: LD_VAR 0 9
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 3
28791: PUSH
28792: LD_INT 21
28794: PUSH
28795: LD_INT 3
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PPUSH
28810: CALL_OW 69
28814: ST_TO_ADDR
// if not tmp then
28815: LD_VAR 0 8
28819: NOT
28820: IFFALSE 28824
// exit ;
28822: GO 29282
// if in_unit then
28824: LD_VAR 0 11
28828: IFFALSE 28852
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28830: LD_ADDR_VAR 0 10
28834: PUSH
28835: LD_VAR 0 8
28839: PPUSH
28840: LD_VAR 0 11
28844: PPUSH
28845: CALL_OW 74
28849: ST_TO_ADDR
28850: GO 28872
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28852: LD_ADDR_VAR 0 10
28856: PUSH
28857: LD_VAR 0 8
28861: PPUSH
28862: LD_VAR 0 1
28866: PPUSH
28867: CALL_OW 74
28871: ST_TO_ADDR
// if not enemy then
28872: LD_VAR 0 10
28876: NOT
28877: IFFALSE 28881
// exit ;
28879: GO 29282
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28881: LD_VAR 0 11
28885: PUSH
28886: LD_VAR 0 11
28890: PPUSH
28891: LD_VAR 0 10
28895: PPUSH
28896: CALL_OW 296
28900: PUSH
28901: LD_INT 13
28903: GREATER
28904: AND
28905: PUSH
28906: LD_VAR 0 1
28910: PPUSH
28911: LD_VAR 0 10
28915: PPUSH
28916: CALL_OW 296
28920: PUSH
28921: LD_INT 12
28923: GREATER
28924: OR
28925: IFFALSE 28929
// exit ;
28927: GO 29282
// missile := [ 1 ] ;
28929: LD_ADDR_VAR 0 14
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: EMPTY
28938: LIST
28939: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28940: LD_VAR 0 9
28944: PPUSH
28945: LD_VAR 0 12
28949: PPUSH
28950: CALL_OW 325
28954: IFFALSE 28983
// missile := Insert ( missile , missile + 1 , 2 ) ;
28956: LD_ADDR_VAR 0 14
28960: PUSH
28961: LD_VAR 0 14
28965: PPUSH
28966: LD_VAR 0 14
28970: PUSH
28971: LD_INT 1
28973: PLUS
28974: PPUSH
28975: LD_INT 2
28977: PPUSH
28978: CALL_OW 2
28982: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28983: LD_VAR 0 9
28987: PPUSH
28988: LD_VAR 0 13
28992: PPUSH
28993: CALL_OW 325
28997: PUSH
28998: LD_VAR 0 10
29002: PPUSH
29003: CALL_OW 255
29007: PPUSH
29008: LD_VAR 0 13
29012: PPUSH
29013: CALL_OW 325
29017: NOT
29018: AND
29019: IFFALSE 29048
// missile := Insert ( missile , missile + 1 , 3 ) ;
29021: LD_ADDR_VAR 0 14
29025: PUSH
29026: LD_VAR 0 14
29030: PPUSH
29031: LD_VAR 0 14
29035: PUSH
29036: LD_INT 1
29038: PLUS
29039: PPUSH
29040: LD_INT 3
29042: PPUSH
29043: CALL_OW 2
29047: ST_TO_ADDR
// if missile < 2 then
29048: LD_VAR 0 14
29052: PUSH
29053: LD_INT 2
29055: LESS
29056: IFFALSE 29060
// exit ;
29058: GO 29282
// x := GetX ( enemy ) ;
29060: LD_ADDR_VAR 0 4
29064: PUSH
29065: LD_VAR 0 10
29069: PPUSH
29070: CALL_OW 250
29074: ST_TO_ADDR
// y := GetY ( enemy ) ;
29075: LD_ADDR_VAR 0 5
29079: PUSH
29080: LD_VAR 0 10
29084: PPUSH
29085: CALL_OW 251
29089: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29090: LD_ADDR_VAR 0 6
29094: PUSH
29095: LD_VAR 0 4
29099: PUSH
29100: LD_INT 1
29102: NEG
29103: PPUSH
29104: LD_INT 1
29106: PPUSH
29107: CALL_OW 12
29111: PLUS
29112: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29113: LD_ADDR_VAR 0 7
29117: PUSH
29118: LD_VAR 0 5
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PPUSH
29127: LD_INT 1
29129: PPUSH
29130: CALL_OW 12
29134: PLUS
29135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29136: LD_VAR 0 6
29140: PPUSH
29141: LD_VAR 0 7
29145: PPUSH
29146: CALL_OW 488
29150: NOT
29151: IFFALSE 29173
// begin _x := x ;
29153: LD_ADDR_VAR 0 6
29157: PUSH
29158: LD_VAR 0 4
29162: ST_TO_ADDR
// _y := y ;
29163: LD_ADDR_VAR 0 7
29167: PUSH
29168: LD_VAR 0 5
29172: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: LD_INT 1
29180: PPUSH
29181: LD_VAR 0 14
29185: PPUSH
29186: CALL_OW 12
29190: ST_TO_ADDR
// case i of 1 :
29191: LD_VAR 0 3
29195: PUSH
29196: LD_INT 1
29198: DOUBLE
29199: EQUAL
29200: IFTRUE 29204
29202: GO 29221
29204: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29205: LD_VAR 0 1
29209: PPUSH
29210: LD_VAR 0 10
29214: PPUSH
29215: CALL_OW 115
29219: GO 29282
29221: LD_INT 2
29223: DOUBLE
29224: EQUAL
29225: IFTRUE 29229
29227: GO 29251
29229: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29230: LD_VAR 0 1
29234: PPUSH
29235: LD_VAR 0 6
29239: PPUSH
29240: LD_VAR 0 7
29244: PPUSH
29245: CALL_OW 153
29249: GO 29282
29251: LD_INT 3
29253: DOUBLE
29254: EQUAL
29255: IFTRUE 29259
29257: GO 29281
29259: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29260: LD_VAR 0 1
29264: PPUSH
29265: LD_VAR 0 6
29269: PPUSH
29270: LD_VAR 0 7
29274: PPUSH
29275: CALL_OW 154
29279: GO 29282
29281: POP
// end ;
29282: LD_VAR 0 2
29286: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29287: LD_INT 0
29289: PPUSH
29290: PPUSH
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
// if not unit or not building then
29295: LD_VAR 0 1
29299: NOT
29300: PUSH
29301: LD_VAR 0 2
29305: NOT
29306: OR
29307: IFFALSE 29311
// exit ;
29309: GO 29469
// x := GetX ( building ) ;
29311: LD_ADDR_VAR 0 5
29315: PUSH
29316: LD_VAR 0 2
29320: PPUSH
29321: CALL_OW 250
29325: ST_TO_ADDR
// y := GetY ( building ) ;
29326: LD_ADDR_VAR 0 6
29330: PUSH
29331: LD_VAR 0 2
29335: PPUSH
29336: CALL_OW 251
29340: ST_TO_ADDR
// for i = 0 to 5 do
29341: LD_ADDR_VAR 0 4
29345: PUSH
29346: DOUBLE
29347: LD_INT 0
29349: DEC
29350: ST_TO_ADDR
29351: LD_INT 5
29353: PUSH
29354: FOR_TO
29355: IFFALSE 29467
// begin _x := ShiftX ( x , i , 3 ) ;
29357: LD_ADDR_VAR 0 7
29361: PUSH
29362: LD_VAR 0 5
29366: PPUSH
29367: LD_VAR 0 4
29371: PPUSH
29372: LD_INT 3
29374: PPUSH
29375: CALL_OW 272
29379: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29380: LD_ADDR_VAR 0 8
29384: PUSH
29385: LD_VAR 0 6
29389: PPUSH
29390: LD_VAR 0 4
29394: PPUSH
29395: LD_INT 3
29397: PPUSH
29398: CALL_OW 273
29402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29403: LD_VAR 0 7
29407: PPUSH
29408: LD_VAR 0 8
29412: PPUSH
29413: CALL_OW 488
29417: NOT
29418: IFFALSE 29422
// continue ;
29420: GO 29354
// if HexInfo ( _x , _y ) = 0 then
29422: LD_VAR 0 7
29426: PPUSH
29427: LD_VAR 0 8
29431: PPUSH
29432: CALL_OW 428
29436: PUSH
29437: LD_INT 0
29439: EQUAL
29440: IFFALSE 29465
// begin ComMoveXY ( unit , _x , _y ) ;
29442: LD_VAR 0 1
29446: PPUSH
29447: LD_VAR 0 7
29451: PPUSH
29452: LD_VAR 0 8
29456: PPUSH
29457: CALL_OW 111
// exit ;
29461: POP
29462: POP
29463: GO 29469
// end ; end ;
29465: GO 29354
29467: POP
29468: POP
// end ;
29469: LD_VAR 0 3
29473: RET
// export function ScanBase ( side , base_area ) ; begin
29474: LD_INT 0
29476: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29477: LD_ADDR_VAR 0 3
29481: PUSH
29482: LD_VAR 0 2
29486: PPUSH
29487: LD_INT 81
29489: PUSH
29490: LD_VAR 0 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PPUSH
29499: CALL_OW 70
29503: ST_TO_ADDR
// end ;
29504: LD_VAR 0 3
29508: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29509: LD_INT 0
29511: PPUSH
29512: PPUSH
29513: PPUSH
29514: PPUSH
// result := false ;
29515: LD_ADDR_VAR 0 2
29519: PUSH
29520: LD_INT 0
29522: ST_TO_ADDR
// side := GetSide ( unit ) ;
29523: LD_ADDR_VAR 0 3
29527: PUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 255
29537: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29538: LD_ADDR_VAR 0 4
29542: PUSH
29543: LD_VAR 0 1
29547: PPUSH
29548: CALL_OW 248
29552: ST_TO_ADDR
// case nat of 1 :
29553: LD_VAR 0 4
29557: PUSH
29558: LD_INT 1
29560: DOUBLE
29561: EQUAL
29562: IFTRUE 29566
29564: GO 29577
29566: POP
// tech := tech_lassight ; 2 :
29567: LD_ADDR_VAR 0 5
29571: PUSH
29572: LD_INT 12
29574: ST_TO_ADDR
29575: GO 29616
29577: LD_INT 2
29579: DOUBLE
29580: EQUAL
29581: IFTRUE 29585
29583: GO 29596
29585: POP
// tech := tech_mortar ; 3 :
29586: LD_ADDR_VAR 0 5
29590: PUSH
29591: LD_INT 41
29593: ST_TO_ADDR
29594: GO 29616
29596: LD_INT 3
29598: DOUBLE
29599: EQUAL
29600: IFTRUE 29604
29602: GO 29615
29604: POP
// tech := tech_bazooka ; end ;
29605: LD_ADDR_VAR 0 5
29609: PUSH
29610: LD_INT 44
29612: ST_TO_ADDR
29613: GO 29616
29615: POP
// if Researched ( side , tech ) then
29616: LD_VAR 0 3
29620: PPUSH
29621: LD_VAR 0 5
29625: PPUSH
29626: CALL_OW 325
29630: IFFALSE 29657
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29632: LD_ADDR_VAR 0 2
29636: PUSH
29637: LD_INT 5
29639: PUSH
29640: LD_INT 8
29642: PUSH
29643: LD_INT 9
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: PUSH
29651: LD_VAR 0 4
29655: ARRAY
29656: ST_TO_ADDR
// end ;
29657: LD_VAR 0 2
29661: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29662: LD_INT 0
29664: PPUSH
29665: PPUSH
29666: PPUSH
// if not mines then
29667: LD_VAR 0 2
29671: NOT
29672: IFFALSE 29676
// exit ;
29674: GO 29820
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29676: LD_ADDR_VAR 0 5
29680: PUSH
29681: LD_INT 81
29683: PUSH
29684: LD_VAR 0 1
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 3
29695: PUSH
29696: LD_INT 21
29698: PUSH
29699: LD_INT 3
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PPUSH
29714: CALL_OW 69
29718: ST_TO_ADDR
// for i in mines do
29719: LD_ADDR_VAR 0 4
29723: PUSH
29724: LD_VAR 0 2
29728: PUSH
29729: FOR_IN
29730: IFFALSE 29818
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29732: LD_VAR 0 4
29736: PUSH
29737: LD_INT 1
29739: ARRAY
29740: PPUSH
29741: LD_VAR 0 4
29745: PUSH
29746: LD_INT 2
29748: ARRAY
29749: PPUSH
29750: CALL_OW 458
29754: NOT
29755: IFFALSE 29759
// continue ;
29757: GO 29729
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29759: LD_VAR 0 4
29763: PUSH
29764: LD_INT 1
29766: ARRAY
29767: PPUSH
29768: LD_VAR 0 4
29772: PUSH
29773: LD_INT 2
29775: ARRAY
29776: PPUSH
29777: CALL_OW 428
29781: PUSH
29782: LD_VAR 0 5
29786: IN
29787: IFFALSE 29816
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29789: LD_VAR 0 4
29793: PUSH
29794: LD_INT 1
29796: ARRAY
29797: PPUSH
29798: LD_VAR 0 4
29802: PUSH
29803: LD_INT 2
29805: ARRAY
29806: PPUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 456
// end ;
29816: GO 29729
29818: POP
29819: POP
// end ;
29820: LD_VAR 0 3
29824: RET
// export function Count ( array ) ; var i ; begin
29825: LD_INT 0
29827: PPUSH
29828: PPUSH
// result := 0 ;
29829: LD_ADDR_VAR 0 2
29833: PUSH
29834: LD_INT 0
29836: ST_TO_ADDR
// for i in array do
29837: LD_ADDR_VAR 0 3
29841: PUSH
29842: LD_VAR 0 1
29846: PUSH
29847: FOR_IN
29848: IFFALSE 29872
// if i then
29850: LD_VAR 0 3
29854: IFFALSE 29870
// result := result + 1 ;
29856: LD_ADDR_VAR 0 2
29860: PUSH
29861: LD_VAR 0 2
29865: PUSH
29866: LD_INT 1
29868: PLUS
29869: ST_TO_ADDR
29870: GO 29847
29872: POP
29873: POP
// end ;
29874: LD_VAR 0 2
29878: RET
// export function IsEmpty ( building ) ; begin
29879: LD_INT 0
29881: PPUSH
// if not building then
29882: LD_VAR 0 1
29886: NOT
29887: IFFALSE 29891
// exit ;
29889: GO 29934
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29891: LD_ADDR_VAR 0 2
29895: PUSH
29896: LD_VAR 0 1
29900: PUSH
29901: LD_INT 22
29903: PUSH
29904: LD_VAR 0 1
29908: PPUSH
29909: CALL_OW 255
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 58
29920: PUSH
29921: EMPTY
29922: LIST
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PPUSH
29928: CALL_OW 69
29932: IN
29933: ST_TO_ADDR
// end ;
29934: LD_VAR 0 2
29938: RET
// export function IsNotFull ( building ) ; begin
29939: LD_INT 0
29941: PPUSH
// if not building then
29942: LD_VAR 0 1
29946: NOT
29947: IFFALSE 29951
// exit ;
29949: GO 29970
// result := UnitsInside ( building ) < 6 ;
29951: LD_ADDR_VAR 0 2
29955: PUSH
29956: LD_VAR 0 1
29960: PPUSH
29961: CALL_OW 313
29965: PUSH
29966: LD_INT 6
29968: LESS
29969: ST_TO_ADDR
// end ;
29970: LD_VAR 0 2
29974: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29975: LD_INT 0
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
// tmp := [ ] ;
29981: LD_ADDR_VAR 0 3
29985: PUSH
29986: EMPTY
29987: ST_TO_ADDR
// list := [ ] ;
29988: LD_ADDR_VAR 0 5
29992: PUSH
29993: EMPTY
29994: ST_TO_ADDR
// for i = 16 to 25 do
29995: LD_ADDR_VAR 0 4
29999: PUSH
30000: DOUBLE
30001: LD_INT 16
30003: DEC
30004: ST_TO_ADDR
30005: LD_INT 25
30007: PUSH
30008: FOR_TO
30009: IFFALSE 30082
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30011: LD_ADDR_VAR 0 3
30015: PUSH
30016: LD_VAR 0 3
30020: PUSH
30021: LD_INT 22
30023: PUSH
30024: LD_VAR 0 1
30028: PPUSH
30029: CALL_OW 255
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 91
30040: PUSH
30041: LD_VAR 0 1
30045: PUSH
30046: LD_INT 6
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 30
30056: PUSH
30057: LD_VAR 0 4
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: PPUSH
30074: CALL_OW 69
30078: ADD
30079: ST_TO_ADDR
30080: GO 30008
30082: POP
30083: POP
// for i = 1 to tmp do
30084: LD_ADDR_VAR 0 4
30088: PUSH
30089: DOUBLE
30090: LD_INT 1
30092: DEC
30093: ST_TO_ADDR
30094: LD_VAR 0 3
30098: PUSH
30099: FOR_TO
30100: IFFALSE 30188
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30102: LD_ADDR_VAR 0 5
30106: PUSH
30107: LD_VAR 0 5
30111: PUSH
30112: LD_VAR 0 3
30116: PUSH
30117: LD_VAR 0 4
30121: ARRAY
30122: PPUSH
30123: CALL_OW 266
30127: PUSH
30128: LD_VAR 0 3
30132: PUSH
30133: LD_VAR 0 4
30137: ARRAY
30138: PPUSH
30139: CALL_OW 250
30143: PUSH
30144: LD_VAR 0 3
30148: PUSH
30149: LD_VAR 0 4
30153: ARRAY
30154: PPUSH
30155: CALL_OW 251
30159: PUSH
30160: LD_VAR 0 3
30164: PUSH
30165: LD_VAR 0 4
30169: ARRAY
30170: PPUSH
30171: CALL_OW 254
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: ADD
30185: ST_TO_ADDR
30186: GO 30099
30188: POP
30189: POP
// result := list ;
30190: LD_ADDR_VAR 0 2
30194: PUSH
30195: LD_VAR 0 5
30199: ST_TO_ADDR
// end ;
30200: LD_VAR 0 2
30204: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30205: LD_INT 0
30207: PPUSH
30208: PPUSH
30209: PPUSH
30210: PPUSH
30211: PPUSH
30212: PPUSH
30213: PPUSH
// if not factory then
30214: LD_VAR 0 1
30218: NOT
30219: IFFALSE 30223
// exit ;
30221: GO 30816
// if control = control_apeman then
30223: LD_VAR 0 4
30227: PUSH
30228: LD_INT 5
30230: EQUAL
30231: IFFALSE 30340
// begin tmp := UnitsInside ( factory ) ;
30233: LD_ADDR_VAR 0 8
30237: PUSH
30238: LD_VAR 0 1
30242: PPUSH
30243: CALL_OW 313
30247: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30248: LD_VAR 0 8
30252: PPUSH
30253: LD_INT 25
30255: PUSH
30256: LD_INT 12
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PPUSH
30263: CALL_OW 72
30267: NOT
30268: IFFALSE 30278
// control := control_manual ;
30270: LD_ADDR_VAR 0 4
30274: PUSH
30275: LD_INT 1
30277: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30278: LD_ADDR_VAR 0 8
30282: PUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL 29975 0 1
30292: ST_TO_ADDR
// if tmp then
30293: LD_VAR 0 8
30297: IFFALSE 30340
// begin for i in tmp do
30299: LD_ADDR_VAR 0 7
30303: PUSH
30304: LD_VAR 0 8
30308: PUSH
30309: FOR_IN
30310: IFFALSE 30338
// if i [ 1 ] = b_ext_radio then
30312: LD_VAR 0 7
30316: PUSH
30317: LD_INT 1
30319: ARRAY
30320: PUSH
30321: LD_INT 22
30323: EQUAL
30324: IFFALSE 30336
// begin control := control_remote ;
30326: LD_ADDR_VAR 0 4
30330: PUSH
30331: LD_INT 2
30333: ST_TO_ADDR
// break ;
30334: GO 30338
// end ;
30336: GO 30309
30338: POP
30339: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30340: LD_VAR 0 1
30344: PPUSH
30345: LD_VAR 0 2
30349: PPUSH
30350: LD_VAR 0 3
30354: PPUSH
30355: LD_VAR 0 4
30359: PPUSH
30360: LD_VAR 0 5
30364: PPUSH
30365: CALL_OW 448
30369: IFFALSE 30404
// begin result := [ chassis , engine , control , weapon ] ;
30371: LD_ADDR_VAR 0 6
30375: PUSH
30376: LD_VAR 0 2
30380: PUSH
30381: LD_VAR 0 3
30385: PUSH
30386: LD_VAR 0 4
30390: PUSH
30391: LD_VAR 0 5
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: ST_TO_ADDR
// exit ;
30402: GO 30816
// end ; _chassis := AvailableChassisList ( factory ) ;
30404: LD_ADDR_VAR 0 9
30408: PUSH
30409: LD_VAR 0 1
30413: PPUSH
30414: CALL_OW 475
30418: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30419: LD_ADDR_VAR 0 11
30423: PUSH
30424: LD_VAR 0 1
30428: PPUSH
30429: CALL_OW 476
30433: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30434: LD_ADDR_VAR 0 12
30438: PUSH
30439: LD_VAR 0 1
30443: PPUSH
30444: CALL_OW 477
30448: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30449: LD_ADDR_VAR 0 10
30453: PUSH
30454: LD_VAR 0 1
30458: PPUSH
30459: CALL_OW 478
30463: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30464: LD_VAR 0 9
30468: NOT
30469: PUSH
30470: LD_VAR 0 11
30474: NOT
30475: OR
30476: PUSH
30477: LD_VAR 0 12
30481: NOT
30482: OR
30483: PUSH
30484: LD_VAR 0 10
30488: NOT
30489: OR
30490: IFFALSE 30525
// begin result := [ chassis , engine , control , weapon ] ;
30492: LD_ADDR_VAR 0 6
30496: PUSH
30497: LD_VAR 0 2
30501: PUSH
30502: LD_VAR 0 3
30506: PUSH
30507: LD_VAR 0 4
30511: PUSH
30512: LD_VAR 0 5
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
// exit ;
30523: GO 30816
// end ; if not chassis in _chassis then
30525: LD_VAR 0 2
30529: PUSH
30530: LD_VAR 0 9
30534: IN
30535: NOT
30536: IFFALSE 30562
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30538: LD_ADDR_VAR 0 2
30542: PUSH
30543: LD_VAR 0 9
30547: PUSH
30548: LD_INT 1
30550: PPUSH
30551: LD_VAR 0 9
30555: PPUSH
30556: CALL_OW 12
30560: ARRAY
30561: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30562: LD_VAR 0 2
30566: PPUSH
30567: LD_VAR 0 3
30571: PPUSH
30572: CALL 30821 0 2
30576: NOT
30577: IFFALSE 30636
// repeat engine := _engine [ 1 ] ;
30579: LD_ADDR_VAR 0 3
30583: PUSH
30584: LD_VAR 0 11
30588: PUSH
30589: LD_INT 1
30591: ARRAY
30592: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30593: LD_ADDR_VAR 0 11
30597: PUSH
30598: LD_VAR 0 11
30602: PPUSH
30603: LD_INT 1
30605: PPUSH
30606: CALL_OW 3
30610: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30611: LD_VAR 0 2
30615: PPUSH
30616: LD_VAR 0 3
30620: PPUSH
30621: CALL 30821 0 2
30625: PUSH
30626: LD_VAR 0 11
30630: PUSH
30631: EMPTY
30632: EQUAL
30633: OR
30634: IFFALSE 30579
// if not control in _control then
30636: LD_VAR 0 4
30640: PUSH
30641: LD_VAR 0 12
30645: IN
30646: NOT
30647: IFFALSE 30673
// control := _control [ rand ( 1 , _control ) ] ;
30649: LD_ADDR_VAR 0 4
30653: PUSH
30654: LD_VAR 0 12
30658: PUSH
30659: LD_INT 1
30661: PPUSH
30662: LD_VAR 0 12
30666: PPUSH
30667: CALL_OW 12
30671: ARRAY
30672: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30673: LD_VAR 0 2
30677: PPUSH
30678: LD_VAR 0 5
30682: PPUSH
30683: CALL 31041 0 2
30687: NOT
30688: IFFALSE 30747
// repeat weapon := _weapon [ 1 ] ;
30690: LD_ADDR_VAR 0 5
30694: PUSH
30695: LD_VAR 0 10
30699: PUSH
30700: LD_INT 1
30702: ARRAY
30703: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30704: LD_ADDR_VAR 0 10
30708: PUSH
30709: LD_VAR 0 10
30713: PPUSH
30714: LD_INT 1
30716: PPUSH
30717: CALL_OW 3
30721: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30722: LD_VAR 0 2
30726: PPUSH
30727: LD_VAR 0 5
30731: PPUSH
30732: CALL 31041 0 2
30736: PUSH
30737: LD_VAR 0 10
30741: PUSH
30742: EMPTY
30743: EQUAL
30744: OR
30745: IFFALSE 30690
// result := [ ] ;
30747: LD_ADDR_VAR 0 6
30751: PUSH
30752: EMPTY
30753: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30754: LD_VAR 0 1
30758: PPUSH
30759: LD_VAR 0 2
30763: PPUSH
30764: LD_VAR 0 3
30768: PPUSH
30769: LD_VAR 0 4
30773: PPUSH
30774: LD_VAR 0 5
30778: PPUSH
30779: CALL_OW 448
30783: IFFALSE 30816
// result := [ chassis , engine , control , weapon ] ;
30785: LD_ADDR_VAR 0 6
30789: PUSH
30790: LD_VAR 0 2
30794: PUSH
30795: LD_VAR 0 3
30799: PUSH
30800: LD_VAR 0 4
30804: PUSH
30805: LD_VAR 0 5
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: ST_TO_ADDR
// end ;
30816: LD_VAR 0 6
30820: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30821: LD_INT 0
30823: PPUSH
// if not chassis or not engine then
30824: LD_VAR 0 1
30828: NOT
30829: PUSH
30830: LD_VAR 0 2
30834: NOT
30835: OR
30836: IFFALSE 30840
// exit ;
30838: GO 31036
// case engine of engine_solar :
30840: LD_VAR 0 2
30844: PUSH
30845: LD_INT 2
30847: DOUBLE
30848: EQUAL
30849: IFTRUE 30853
30851: GO 30891
30853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30854: LD_ADDR_VAR 0 3
30858: PUSH
30859: LD_INT 11
30861: PUSH
30862: LD_INT 12
30864: PUSH
30865: LD_INT 13
30867: PUSH
30868: LD_INT 14
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: ST_TO_ADDR
30889: GO 31020
30891: LD_INT 1
30893: DOUBLE
30894: EQUAL
30895: IFTRUE 30899
30897: GO 30961
30899: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30900: LD_ADDR_VAR 0 3
30904: PUSH
30905: LD_INT 11
30907: PUSH
30908: LD_INT 12
30910: PUSH
30911: LD_INT 13
30913: PUSH
30914: LD_INT 14
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: LD_INT 3
30925: PUSH
30926: LD_INT 4
30928: PUSH
30929: LD_INT 5
30931: PUSH
30932: LD_INT 21
30934: PUSH
30935: LD_INT 23
30937: PUSH
30938: LD_INT 22
30940: PUSH
30941: LD_INT 24
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: ST_TO_ADDR
30959: GO 31020
30961: LD_INT 3
30963: DOUBLE
30964: EQUAL
30965: IFTRUE 30969
30967: GO 31019
30969: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30970: LD_ADDR_VAR 0 3
30974: PUSH
30975: LD_INT 13
30977: PUSH
30978: LD_INT 14
30980: PUSH
30981: LD_INT 2
30983: PUSH
30984: LD_INT 3
30986: PUSH
30987: LD_INT 4
30989: PUSH
30990: LD_INT 5
30992: PUSH
30993: LD_INT 21
30995: PUSH
30996: LD_INT 22
30998: PUSH
30999: LD_INT 23
31001: PUSH
31002: LD_INT 24
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
31017: GO 31020
31019: POP
// result := ( chassis in result ) ;
31020: LD_ADDR_VAR 0 3
31024: PUSH
31025: LD_VAR 0 1
31029: PUSH
31030: LD_VAR 0 3
31034: IN
31035: ST_TO_ADDR
// end ;
31036: LD_VAR 0 3
31040: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31041: LD_INT 0
31043: PPUSH
// if not chassis or not weapon then
31044: LD_VAR 0 1
31048: NOT
31049: PUSH
31050: LD_VAR 0 2
31054: NOT
31055: OR
31056: IFFALSE 31060
// exit ;
31058: GO 32122
// case weapon of us_machine_gun :
31060: LD_VAR 0 2
31064: PUSH
31065: LD_INT 2
31067: DOUBLE
31068: EQUAL
31069: IFTRUE 31073
31071: GO 31103
31073: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31074: LD_ADDR_VAR 0 3
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: LD_INT 4
31090: PUSH
31091: LD_INT 5
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: ST_TO_ADDR
31101: GO 32106
31103: LD_INT 3
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31141
31111: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 4
31128: PUSH
31129: LD_INT 5
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: ST_TO_ADDR
31139: GO 32106
31141: LD_INT 11
31143: DOUBLE
31144: EQUAL
31145: IFTRUE 31149
31147: GO 31179
31149: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31150: LD_ADDR_VAR 0 3
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: LD_INT 3
31163: PUSH
31164: LD_INT 4
31166: PUSH
31167: LD_INT 5
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: ST_TO_ADDR
31177: GO 32106
31179: LD_INT 4
31181: DOUBLE
31182: EQUAL
31183: IFTRUE 31187
31185: GO 31213
31187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31188: LD_ADDR_VAR 0 3
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 4
31201: PUSH
31202: LD_INT 5
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: ST_TO_ADDR
31211: GO 32106
31213: LD_INT 5
31215: DOUBLE
31216: EQUAL
31217: IFTRUE 31221
31219: GO 31247
31221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31222: LD_ADDR_VAR 0 3
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 3
31232: PUSH
31233: LD_INT 4
31235: PUSH
31236: LD_INT 5
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: ST_TO_ADDR
31245: GO 32106
31247: LD_INT 9
31249: DOUBLE
31250: EQUAL
31251: IFTRUE 31255
31253: GO 31281
31255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31256: LD_ADDR_VAR 0 3
31260: PUSH
31261: LD_INT 2
31263: PUSH
31264: LD_INT 3
31266: PUSH
31267: LD_INT 4
31269: PUSH
31270: LD_INT 5
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: ST_TO_ADDR
31279: GO 32106
31281: LD_INT 7
31283: DOUBLE
31284: EQUAL
31285: IFTRUE 31289
31287: GO 31315
31289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: LD_INT 3
31300: PUSH
31301: LD_INT 4
31303: PUSH
31304: LD_INT 5
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: ST_TO_ADDR
31313: GO 32106
31315: LD_INT 12
31317: DOUBLE
31318: EQUAL
31319: IFTRUE 31323
31321: GO 31349
31323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31324: LD_ADDR_VAR 0 3
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: LD_INT 3
31334: PUSH
31335: LD_INT 4
31337: PUSH
31338: LD_INT 5
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: ST_TO_ADDR
31347: GO 32106
31349: LD_INT 13
31351: DOUBLE
31352: EQUAL
31353: IFTRUE 31357
31355: GO 31383
31357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31358: LD_ADDR_VAR 0 3
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: LD_INT 3
31368: PUSH
31369: LD_INT 4
31371: PUSH
31372: LD_INT 5
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: ST_TO_ADDR
31381: GO 32106
31383: LD_INT 14
31385: DOUBLE
31386: EQUAL
31387: IFTRUE 31391
31389: GO 31409
31391: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31392: LD_ADDR_VAR 0 3
31396: PUSH
31397: LD_INT 4
31399: PUSH
31400: LD_INT 5
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: ST_TO_ADDR
31407: GO 32106
31409: LD_INT 6
31411: DOUBLE
31412: EQUAL
31413: IFTRUE 31417
31415: GO 31435
31417: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31418: LD_ADDR_VAR 0 3
31422: PUSH
31423: LD_INT 4
31425: PUSH
31426: LD_INT 5
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: ST_TO_ADDR
31433: GO 32106
31435: LD_INT 10
31437: DOUBLE
31438: EQUAL
31439: IFTRUE 31443
31441: GO 31461
31443: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31444: LD_ADDR_VAR 0 3
31448: PUSH
31449: LD_INT 4
31451: PUSH
31452: LD_INT 5
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: ST_TO_ADDR
31459: GO 32106
31461: LD_INT 22
31463: DOUBLE
31464: EQUAL
31465: IFTRUE 31469
31467: GO 31495
31469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31470: LD_ADDR_VAR 0 3
31474: PUSH
31475: LD_INT 11
31477: PUSH
31478: LD_INT 12
31480: PUSH
31481: LD_INT 13
31483: PUSH
31484: LD_INT 14
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: ST_TO_ADDR
31493: GO 32106
31495: LD_INT 23
31497: DOUBLE
31498: EQUAL
31499: IFTRUE 31503
31501: GO 31529
31503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31504: LD_ADDR_VAR 0 3
31508: PUSH
31509: LD_INT 11
31511: PUSH
31512: LD_INT 12
31514: PUSH
31515: LD_INT 13
31517: PUSH
31518: LD_INT 14
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: ST_TO_ADDR
31527: GO 32106
31529: LD_INT 24
31531: DOUBLE
31532: EQUAL
31533: IFTRUE 31537
31535: GO 31563
31537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31538: LD_ADDR_VAR 0 3
31542: PUSH
31543: LD_INT 11
31545: PUSH
31546: LD_INT 12
31548: PUSH
31549: LD_INT 13
31551: PUSH
31552: LD_INT 14
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: ST_TO_ADDR
31561: GO 32106
31563: LD_INT 30
31565: DOUBLE
31566: EQUAL
31567: IFTRUE 31571
31569: GO 31597
31571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31572: LD_ADDR_VAR 0 3
31576: PUSH
31577: LD_INT 11
31579: PUSH
31580: LD_INT 12
31582: PUSH
31583: LD_INT 13
31585: PUSH
31586: LD_INT 14
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
31595: GO 32106
31597: LD_INT 25
31599: DOUBLE
31600: EQUAL
31601: IFTRUE 31605
31603: GO 31623
31605: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31606: LD_ADDR_VAR 0 3
31610: PUSH
31611: LD_INT 13
31613: PUSH
31614: LD_INT 14
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: ST_TO_ADDR
31621: GO 32106
31623: LD_INT 27
31625: DOUBLE
31626: EQUAL
31627: IFTRUE 31631
31629: GO 31649
31631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31632: LD_ADDR_VAR 0 3
31636: PUSH
31637: LD_INT 13
31639: PUSH
31640: LD_INT 14
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: ST_TO_ADDR
31647: GO 32106
31649: LD_EXP 118
31653: DOUBLE
31654: EQUAL
31655: IFTRUE 31659
31657: GO 31685
31659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31660: LD_ADDR_VAR 0 3
31664: PUSH
31665: LD_INT 11
31667: PUSH
31668: LD_INT 12
31670: PUSH
31671: LD_INT 13
31673: PUSH
31674: LD_INT 14
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: ST_TO_ADDR
31683: GO 32106
31685: LD_INT 28
31687: DOUBLE
31688: EQUAL
31689: IFTRUE 31693
31691: GO 31711
31693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31694: LD_ADDR_VAR 0 3
31698: PUSH
31699: LD_INT 13
31701: PUSH
31702: LD_INT 14
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: ST_TO_ADDR
31709: GO 32106
31711: LD_INT 29
31713: DOUBLE
31714: EQUAL
31715: IFTRUE 31719
31717: GO 31737
31719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31720: LD_ADDR_VAR 0 3
31724: PUSH
31725: LD_INT 13
31727: PUSH
31728: LD_INT 14
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: ST_TO_ADDR
31735: GO 32106
31737: LD_INT 31
31739: DOUBLE
31740: EQUAL
31741: IFTRUE 31745
31743: GO 31763
31745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31746: LD_ADDR_VAR 0 3
31750: PUSH
31751: LD_INT 13
31753: PUSH
31754: LD_INT 14
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: ST_TO_ADDR
31761: GO 32106
31763: LD_INT 26
31765: DOUBLE
31766: EQUAL
31767: IFTRUE 31771
31769: GO 31789
31771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31772: LD_ADDR_VAR 0 3
31776: PUSH
31777: LD_INT 13
31779: PUSH
31780: LD_INT 14
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: ST_TO_ADDR
31787: GO 32106
31789: LD_INT 42
31791: DOUBLE
31792: EQUAL
31793: IFTRUE 31797
31795: GO 31823
31797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31798: LD_ADDR_VAR 0 3
31802: PUSH
31803: LD_INT 21
31805: PUSH
31806: LD_INT 22
31808: PUSH
31809: LD_INT 23
31811: PUSH
31812: LD_INT 24
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: ST_TO_ADDR
31821: GO 32106
31823: LD_INT 43
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 31857
31831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31832: LD_ADDR_VAR 0 3
31836: PUSH
31837: LD_INT 21
31839: PUSH
31840: LD_INT 22
31842: PUSH
31843: LD_INT 23
31845: PUSH
31846: LD_INT 24
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: ST_TO_ADDR
31855: GO 32106
31857: LD_INT 44
31859: DOUBLE
31860: EQUAL
31861: IFTRUE 31865
31863: GO 31891
31865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31866: LD_ADDR_VAR 0 3
31870: PUSH
31871: LD_INT 21
31873: PUSH
31874: LD_INT 22
31876: PUSH
31877: LD_INT 23
31879: PUSH
31880: LD_INT 24
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: ST_TO_ADDR
31889: GO 32106
31891: LD_INT 45
31893: DOUBLE
31894: EQUAL
31895: IFTRUE 31899
31897: GO 31925
31899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31900: LD_ADDR_VAR 0 3
31904: PUSH
31905: LD_INT 21
31907: PUSH
31908: LD_INT 22
31910: PUSH
31911: LD_INT 23
31913: PUSH
31914: LD_INT 24
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: ST_TO_ADDR
31923: GO 32106
31925: LD_INT 49
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31959
31933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31934: LD_ADDR_VAR 0 3
31938: PUSH
31939: LD_INT 21
31941: PUSH
31942: LD_INT 22
31944: PUSH
31945: LD_INT 23
31947: PUSH
31948: LD_INT 24
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: ST_TO_ADDR
31957: GO 32106
31959: LD_INT 51
31961: DOUBLE
31962: EQUAL
31963: IFTRUE 31967
31965: GO 31993
31967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31968: LD_ADDR_VAR 0 3
31972: PUSH
31973: LD_INT 21
31975: PUSH
31976: LD_INT 22
31978: PUSH
31979: LD_INT 23
31981: PUSH
31982: LD_INT 24
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: ST_TO_ADDR
31991: GO 32106
31993: LD_INT 52
31995: DOUBLE
31996: EQUAL
31997: IFTRUE 32001
31999: GO 32027
32001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32002: LD_ADDR_VAR 0 3
32006: PUSH
32007: LD_INT 21
32009: PUSH
32010: LD_INT 22
32012: PUSH
32013: LD_INT 23
32015: PUSH
32016: LD_INT 24
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: ST_TO_ADDR
32025: GO 32106
32027: LD_INT 53
32029: DOUBLE
32030: EQUAL
32031: IFTRUE 32035
32033: GO 32053
32035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32036: LD_ADDR_VAR 0 3
32040: PUSH
32041: LD_INT 23
32043: PUSH
32044: LD_INT 24
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: ST_TO_ADDR
32051: GO 32106
32053: LD_INT 46
32055: DOUBLE
32056: EQUAL
32057: IFTRUE 32061
32059: GO 32079
32061: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32062: LD_ADDR_VAR 0 3
32066: PUSH
32067: LD_INT 23
32069: PUSH
32070: LD_INT 24
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: ST_TO_ADDR
32077: GO 32106
32079: LD_INT 47
32081: DOUBLE
32082: EQUAL
32083: IFTRUE 32087
32085: GO 32105
32087: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32088: LD_ADDR_VAR 0 3
32092: PUSH
32093: LD_INT 23
32095: PUSH
32096: LD_INT 24
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: ST_TO_ADDR
32103: GO 32106
32105: POP
// result := ( chassis in result ) ;
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_VAR 0 1
32115: PUSH
32116: LD_VAR 0 3
32120: IN
32121: ST_TO_ADDR
// end ;
32122: LD_VAR 0 3
32126: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32127: LD_INT 0
32129: PPUSH
32130: PPUSH
32131: PPUSH
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
// result := array ;
32136: LD_ADDR_VAR 0 5
32140: PUSH
32141: LD_VAR 0 1
32145: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32146: LD_VAR 0 1
32150: NOT
32151: PUSH
32152: LD_VAR 0 2
32156: NOT
32157: OR
32158: PUSH
32159: LD_VAR 0 3
32163: NOT
32164: OR
32165: PUSH
32166: LD_VAR 0 2
32170: PUSH
32171: LD_VAR 0 1
32175: GREATER
32176: OR
32177: PUSH
32178: LD_VAR 0 3
32182: PUSH
32183: LD_VAR 0 1
32187: GREATER
32188: OR
32189: IFFALSE 32193
// exit ;
32191: GO 32489
// if direction then
32193: LD_VAR 0 4
32197: IFFALSE 32261
// begin d := 1 ;
32199: LD_ADDR_VAR 0 9
32203: PUSH
32204: LD_INT 1
32206: ST_TO_ADDR
// if i_from > i_to then
32207: LD_VAR 0 2
32211: PUSH
32212: LD_VAR 0 3
32216: GREATER
32217: IFFALSE 32243
// length := ( array - i_from ) + i_to else
32219: LD_ADDR_VAR 0 11
32223: PUSH
32224: LD_VAR 0 1
32228: PUSH
32229: LD_VAR 0 2
32233: MINUS
32234: PUSH
32235: LD_VAR 0 3
32239: PLUS
32240: ST_TO_ADDR
32241: GO 32259
// length := i_to - i_from ;
32243: LD_ADDR_VAR 0 11
32247: PUSH
32248: LD_VAR 0 3
32252: PUSH
32253: LD_VAR 0 2
32257: MINUS
32258: ST_TO_ADDR
// end else
32259: GO 32322
// begin d := - 1 ;
32261: LD_ADDR_VAR 0 9
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: ST_TO_ADDR
// if i_from > i_to then
32270: LD_VAR 0 2
32274: PUSH
32275: LD_VAR 0 3
32279: GREATER
32280: IFFALSE 32300
// length := i_from - i_to else
32282: LD_ADDR_VAR 0 11
32286: PUSH
32287: LD_VAR 0 2
32291: PUSH
32292: LD_VAR 0 3
32296: MINUS
32297: ST_TO_ADDR
32298: GO 32322
// length := ( array - i_to ) + i_from ;
32300: LD_ADDR_VAR 0 11
32304: PUSH
32305: LD_VAR 0 1
32309: PUSH
32310: LD_VAR 0 3
32314: MINUS
32315: PUSH
32316: LD_VAR 0 2
32320: PLUS
32321: ST_TO_ADDR
// end ; if not length then
32322: LD_VAR 0 11
32326: NOT
32327: IFFALSE 32331
// exit ;
32329: GO 32489
// tmp := array ;
32331: LD_ADDR_VAR 0 10
32335: PUSH
32336: LD_VAR 0 1
32340: ST_TO_ADDR
// for i = 1 to length do
32341: LD_ADDR_VAR 0 6
32345: PUSH
32346: DOUBLE
32347: LD_INT 1
32349: DEC
32350: ST_TO_ADDR
32351: LD_VAR 0 11
32355: PUSH
32356: FOR_TO
32357: IFFALSE 32477
// begin for j = 1 to array do
32359: LD_ADDR_VAR 0 7
32363: PUSH
32364: DOUBLE
32365: LD_INT 1
32367: DEC
32368: ST_TO_ADDR
32369: LD_VAR 0 1
32373: PUSH
32374: FOR_TO
32375: IFFALSE 32463
// begin k := j + d ;
32377: LD_ADDR_VAR 0 8
32381: PUSH
32382: LD_VAR 0 7
32386: PUSH
32387: LD_VAR 0 9
32391: PLUS
32392: ST_TO_ADDR
// if k > array then
32393: LD_VAR 0 8
32397: PUSH
32398: LD_VAR 0 1
32402: GREATER
32403: IFFALSE 32413
// k := 1 ;
32405: LD_ADDR_VAR 0 8
32409: PUSH
32410: LD_INT 1
32412: ST_TO_ADDR
// if not k then
32413: LD_VAR 0 8
32417: NOT
32418: IFFALSE 32430
// k := array ;
32420: LD_ADDR_VAR 0 8
32424: PUSH
32425: LD_VAR 0 1
32429: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32430: LD_ADDR_VAR 0 10
32434: PUSH
32435: LD_VAR 0 10
32439: PPUSH
32440: LD_VAR 0 8
32444: PPUSH
32445: LD_VAR 0 1
32449: PUSH
32450: LD_VAR 0 7
32454: ARRAY
32455: PPUSH
32456: CALL_OW 1
32460: ST_TO_ADDR
// end ;
32461: GO 32374
32463: POP
32464: POP
// array := tmp ;
32465: LD_ADDR_VAR 0 1
32469: PUSH
32470: LD_VAR 0 10
32474: ST_TO_ADDR
// end ;
32475: GO 32356
32477: POP
32478: POP
// result := array ;
32479: LD_ADDR_VAR 0 5
32483: PUSH
32484: LD_VAR 0 1
32488: ST_TO_ADDR
// end ;
32489: LD_VAR 0 5
32493: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32494: LD_INT 0
32496: PPUSH
32497: PPUSH
// result := 0 ;
32498: LD_ADDR_VAR 0 3
32502: PUSH
32503: LD_INT 0
32505: ST_TO_ADDR
// if not array or not value in array then
32506: LD_VAR 0 1
32510: NOT
32511: PUSH
32512: LD_VAR 0 2
32516: PUSH
32517: LD_VAR 0 1
32521: IN
32522: NOT
32523: OR
32524: IFFALSE 32528
// exit ;
32526: GO 32582
// for i = 1 to array do
32528: LD_ADDR_VAR 0 4
32532: PUSH
32533: DOUBLE
32534: LD_INT 1
32536: DEC
32537: ST_TO_ADDR
32538: LD_VAR 0 1
32542: PUSH
32543: FOR_TO
32544: IFFALSE 32580
// if value = array [ i ] then
32546: LD_VAR 0 2
32550: PUSH
32551: LD_VAR 0 1
32555: PUSH
32556: LD_VAR 0 4
32560: ARRAY
32561: EQUAL
32562: IFFALSE 32578
// begin result := i ;
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_VAR 0 4
32573: ST_TO_ADDR
// exit ;
32574: POP
32575: POP
32576: GO 32582
// end ;
32578: GO 32543
32580: POP
32581: POP
// end ;
32582: LD_VAR 0 3
32586: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32587: LD_INT 0
32589: PPUSH
// vc_chassis := chassis ;
32590: LD_ADDR_OWVAR 37
32594: PUSH
32595: LD_VAR 0 1
32599: ST_TO_ADDR
// vc_engine := engine ;
32600: LD_ADDR_OWVAR 39
32604: PUSH
32605: LD_VAR 0 2
32609: ST_TO_ADDR
// vc_control := control ;
32610: LD_ADDR_OWVAR 38
32614: PUSH
32615: LD_VAR 0 3
32619: ST_TO_ADDR
// vc_weapon := weapon ;
32620: LD_ADDR_OWVAR 40
32624: PUSH
32625: LD_VAR 0 4
32629: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32630: LD_ADDR_OWVAR 41
32634: PUSH
32635: LD_VAR 0 5
32639: ST_TO_ADDR
// end ;
32640: LD_VAR 0 6
32644: RET
// export function WantPlant ( unit ) ; var task ; begin
32645: LD_INT 0
32647: PPUSH
32648: PPUSH
// result := false ;
32649: LD_ADDR_VAR 0 2
32653: PUSH
32654: LD_INT 0
32656: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_VAR 0 1
32666: PPUSH
32667: CALL_OW 437
32671: ST_TO_ADDR
// if task then
32672: LD_VAR 0 3
32676: IFFALSE 32704
// if task [ 1 ] [ 1 ] = p then
32678: LD_VAR 0 3
32682: PUSH
32683: LD_INT 1
32685: ARRAY
32686: PUSH
32687: LD_INT 1
32689: ARRAY
32690: PUSH
32691: LD_STRING p
32693: EQUAL
32694: IFFALSE 32704
// result := true ;
32696: LD_ADDR_VAR 0 2
32700: PUSH
32701: LD_INT 1
32703: ST_TO_ADDR
// end ;
32704: LD_VAR 0 2
32708: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32709: LD_INT 0
32711: PPUSH
32712: PPUSH
32713: PPUSH
32714: PPUSH
// if pos < 1 then
32715: LD_VAR 0 2
32719: PUSH
32720: LD_INT 1
32722: LESS
32723: IFFALSE 32727
// exit ;
32725: GO 33030
// if pos = 1 then
32727: LD_VAR 0 2
32731: PUSH
32732: LD_INT 1
32734: EQUAL
32735: IFFALSE 32768
// result := Replace ( arr , pos [ 1 ] , value ) else
32737: LD_ADDR_VAR 0 4
32741: PUSH
32742: LD_VAR 0 1
32746: PPUSH
32747: LD_VAR 0 2
32751: PUSH
32752: LD_INT 1
32754: ARRAY
32755: PPUSH
32756: LD_VAR 0 3
32760: PPUSH
32761: CALL_OW 1
32765: ST_TO_ADDR
32766: GO 33030
// begin tmp := arr ;
32768: LD_ADDR_VAR 0 6
32772: PUSH
32773: LD_VAR 0 1
32777: ST_TO_ADDR
// s_arr := [ tmp ] ;
32778: LD_ADDR_VAR 0 7
32782: PUSH
32783: LD_VAR 0 6
32787: PUSH
32788: EMPTY
32789: LIST
32790: ST_TO_ADDR
// for i = 1 to pos - 1 do
32791: LD_ADDR_VAR 0 5
32795: PUSH
32796: DOUBLE
32797: LD_INT 1
32799: DEC
32800: ST_TO_ADDR
32801: LD_VAR 0 2
32805: PUSH
32806: LD_INT 1
32808: MINUS
32809: PUSH
32810: FOR_TO
32811: IFFALSE 32856
// begin tmp := tmp [ pos [ i ] ] ;
32813: LD_ADDR_VAR 0 6
32817: PUSH
32818: LD_VAR 0 6
32822: PUSH
32823: LD_VAR 0 2
32827: PUSH
32828: LD_VAR 0 5
32832: ARRAY
32833: ARRAY
32834: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32835: LD_ADDR_VAR 0 7
32839: PUSH
32840: LD_VAR 0 7
32844: PUSH
32845: LD_VAR 0 6
32849: PUSH
32850: EMPTY
32851: LIST
32852: ADD
32853: ST_TO_ADDR
// end ;
32854: GO 32810
32856: POP
32857: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32858: LD_ADDR_VAR 0 6
32862: PUSH
32863: LD_VAR 0 6
32867: PPUSH
32868: LD_VAR 0 2
32872: PUSH
32873: LD_VAR 0 2
32877: ARRAY
32878: PPUSH
32879: LD_VAR 0 3
32883: PPUSH
32884: CALL_OW 1
32888: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32889: LD_ADDR_VAR 0 7
32893: PUSH
32894: LD_VAR 0 7
32898: PPUSH
32899: LD_VAR 0 7
32903: PPUSH
32904: LD_VAR 0 6
32908: PPUSH
32909: CALL_OW 1
32913: ST_TO_ADDR
// for i = s_arr downto 2 do
32914: LD_ADDR_VAR 0 5
32918: PUSH
32919: DOUBLE
32920: LD_VAR 0 7
32924: INC
32925: ST_TO_ADDR
32926: LD_INT 2
32928: PUSH
32929: FOR_DOWNTO
32930: IFFALSE 33014
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32932: LD_ADDR_VAR 0 6
32936: PUSH
32937: LD_VAR 0 7
32941: PUSH
32942: LD_VAR 0 5
32946: PUSH
32947: LD_INT 1
32949: MINUS
32950: ARRAY
32951: PPUSH
32952: LD_VAR 0 2
32956: PUSH
32957: LD_VAR 0 5
32961: PUSH
32962: LD_INT 1
32964: MINUS
32965: ARRAY
32966: PPUSH
32967: LD_VAR 0 7
32971: PUSH
32972: LD_VAR 0 5
32976: ARRAY
32977: PPUSH
32978: CALL_OW 1
32982: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32983: LD_ADDR_VAR 0 7
32987: PUSH
32988: LD_VAR 0 7
32992: PPUSH
32993: LD_VAR 0 5
32997: PUSH
32998: LD_INT 1
33000: MINUS
33001: PPUSH
33002: LD_VAR 0 6
33006: PPUSH
33007: CALL_OW 1
33011: ST_TO_ADDR
// end ;
33012: GO 32929
33014: POP
33015: POP
// result := s_arr [ 1 ] ;
33016: LD_ADDR_VAR 0 4
33020: PUSH
33021: LD_VAR 0 7
33025: PUSH
33026: LD_INT 1
33028: ARRAY
33029: ST_TO_ADDR
// end ; end ;
33030: LD_VAR 0 4
33034: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33035: LD_INT 0
33037: PPUSH
33038: PPUSH
// if not list then
33039: LD_VAR 0 1
33043: NOT
33044: IFFALSE 33048
// exit ;
33046: GO 33139
// i := list [ pos1 ] ;
33048: LD_ADDR_VAR 0 5
33052: PUSH
33053: LD_VAR 0 1
33057: PUSH
33058: LD_VAR 0 2
33062: ARRAY
33063: ST_TO_ADDR
// if not i then
33064: LD_VAR 0 5
33068: NOT
33069: IFFALSE 33073
// exit ;
33071: GO 33139
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33073: LD_ADDR_VAR 0 1
33077: PUSH
33078: LD_VAR 0 1
33082: PPUSH
33083: LD_VAR 0 2
33087: PPUSH
33088: LD_VAR 0 1
33092: PUSH
33093: LD_VAR 0 3
33097: ARRAY
33098: PPUSH
33099: CALL_OW 1
33103: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33104: LD_ADDR_VAR 0 1
33108: PUSH
33109: LD_VAR 0 1
33113: PPUSH
33114: LD_VAR 0 3
33118: PPUSH
33119: LD_VAR 0 5
33123: PPUSH
33124: CALL_OW 1
33128: ST_TO_ADDR
// result := list ;
33129: LD_ADDR_VAR 0 4
33133: PUSH
33134: LD_VAR 0 1
33138: ST_TO_ADDR
// end ;
33139: LD_VAR 0 4
33143: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33144: LD_INT 0
33146: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33147: LD_ADDR_VAR 0 5
33151: PUSH
33152: LD_VAR 0 1
33156: PPUSH
33157: CALL_OW 250
33161: PPUSH
33162: LD_VAR 0 1
33166: PPUSH
33167: CALL_OW 251
33171: PPUSH
33172: LD_VAR 0 2
33176: PPUSH
33177: LD_VAR 0 3
33181: PPUSH
33182: LD_VAR 0 4
33186: PPUSH
33187: CALL 33197 0 5
33191: ST_TO_ADDR
// end ;
33192: LD_VAR 0 5
33196: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33197: LD_INT 0
33199: PPUSH
33200: PPUSH
33201: PPUSH
33202: PPUSH
// if not list then
33203: LD_VAR 0 3
33207: NOT
33208: IFFALSE 33212
// exit ;
33210: GO 33600
// result := [ ] ;
33212: LD_ADDR_VAR 0 6
33216: PUSH
33217: EMPTY
33218: ST_TO_ADDR
// for i in list do
33219: LD_ADDR_VAR 0 7
33223: PUSH
33224: LD_VAR 0 3
33228: PUSH
33229: FOR_IN
33230: IFFALSE 33432
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33232: LD_ADDR_VAR 0 9
33236: PUSH
33237: LD_VAR 0 7
33241: PPUSH
33242: LD_VAR 0 1
33246: PPUSH
33247: LD_VAR 0 2
33251: PPUSH
33252: CALL_OW 297
33256: ST_TO_ADDR
// if not result then
33257: LD_VAR 0 6
33261: NOT
33262: IFFALSE 33288
// result := [ [ i , tmp ] ] else
33264: LD_ADDR_VAR 0 6
33268: PUSH
33269: LD_VAR 0 7
33273: PUSH
33274: LD_VAR 0 9
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: EMPTY
33284: LIST
33285: ST_TO_ADDR
33286: GO 33430
// begin if result [ result ] [ 2 ] < tmp then
33288: LD_VAR 0 6
33292: PUSH
33293: LD_VAR 0 6
33297: ARRAY
33298: PUSH
33299: LD_INT 2
33301: ARRAY
33302: PUSH
33303: LD_VAR 0 9
33307: LESS
33308: IFFALSE 33350
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33310: LD_ADDR_VAR 0 6
33314: PUSH
33315: LD_VAR 0 6
33319: PPUSH
33320: LD_VAR 0 6
33324: PUSH
33325: LD_INT 1
33327: PLUS
33328: PPUSH
33329: LD_VAR 0 7
33333: PUSH
33334: LD_VAR 0 9
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PPUSH
33343: CALL_OW 2
33347: ST_TO_ADDR
33348: GO 33430
// for j = 1 to result do
33350: LD_ADDR_VAR 0 8
33354: PUSH
33355: DOUBLE
33356: LD_INT 1
33358: DEC
33359: ST_TO_ADDR
33360: LD_VAR 0 6
33364: PUSH
33365: FOR_TO
33366: IFFALSE 33428
// begin if tmp < result [ j ] [ 2 ] then
33368: LD_VAR 0 9
33372: PUSH
33373: LD_VAR 0 6
33377: PUSH
33378: LD_VAR 0 8
33382: ARRAY
33383: PUSH
33384: LD_INT 2
33386: ARRAY
33387: LESS
33388: IFFALSE 33426
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33390: LD_ADDR_VAR 0 6
33394: PUSH
33395: LD_VAR 0 6
33399: PPUSH
33400: LD_VAR 0 8
33404: PPUSH
33405: LD_VAR 0 7
33409: PUSH
33410: LD_VAR 0 9
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PPUSH
33419: CALL_OW 2
33423: ST_TO_ADDR
// break ;
33424: GO 33428
// end ; end ;
33426: GO 33365
33428: POP
33429: POP
// end ; end ;
33430: GO 33229
33432: POP
33433: POP
// if result and not asc then
33434: LD_VAR 0 6
33438: PUSH
33439: LD_VAR 0 4
33443: NOT
33444: AND
33445: IFFALSE 33520
// begin tmp := result ;
33447: LD_ADDR_VAR 0 9
33451: PUSH
33452: LD_VAR 0 6
33456: ST_TO_ADDR
// for i = tmp downto 1 do
33457: LD_ADDR_VAR 0 7
33461: PUSH
33462: DOUBLE
33463: LD_VAR 0 9
33467: INC
33468: ST_TO_ADDR
33469: LD_INT 1
33471: PUSH
33472: FOR_DOWNTO
33473: IFFALSE 33518
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33475: LD_ADDR_VAR 0 6
33479: PUSH
33480: LD_VAR 0 6
33484: PPUSH
33485: LD_VAR 0 9
33489: PUSH
33490: LD_VAR 0 7
33494: MINUS
33495: PUSH
33496: LD_INT 1
33498: PLUS
33499: PPUSH
33500: LD_VAR 0 9
33504: PUSH
33505: LD_VAR 0 7
33509: ARRAY
33510: PPUSH
33511: CALL_OW 1
33515: ST_TO_ADDR
33516: GO 33472
33518: POP
33519: POP
// end ; tmp := [ ] ;
33520: LD_ADDR_VAR 0 9
33524: PUSH
33525: EMPTY
33526: ST_TO_ADDR
// if mode then
33527: LD_VAR 0 5
33531: IFFALSE 33600
// begin for i = 1 to result do
33533: LD_ADDR_VAR 0 7
33537: PUSH
33538: DOUBLE
33539: LD_INT 1
33541: DEC
33542: ST_TO_ADDR
33543: LD_VAR 0 6
33547: PUSH
33548: FOR_TO
33549: IFFALSE 33588
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33551: LD_ADDR_VAR 0 9
33555: PUSH
33556: LD_VAR 0 9
33560: PPUSH
33561: LD_VAR 0 7
33565: PPUSH
33566: LD_VAR 0 6
33570: PUSH
33571: LD_VAR 0 7
33575: ARRAY
33576: PUSH
33577: LD_INT 1
33579: ARRAY
33580: PPUSH
33581: CALL_OW 1
33585: ST_TO_ADDR
33586: GO 33548
33588: POP
33589: POP
// result := tmp ;
33590: LD_ADDR_VAR 0 6
33594: PUSH
33595: LD_VAR 0 9
33599: ST_TO_ADDR
// end ; end ;
33600: LD_VAR 0 6
33604: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33605: LD_INT 0
33607: PPUSH
33608: PPUSH
33609: PPUSH
33610: PPUSH
33611: PPUSH
33612: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33613: LD_ADDR_VAR 0 5
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: EMPTY
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: ST_TO_ADDR
// if not x or not y then
33635: LD_VAR 0 2
33639: NOT
33640: PUSH
33641: LD_VAR 0 3
33645: NOT
33646: OR
33647: IFFALSE 33651
// exit ;
33649: GO 35303
// if not range then
33651: LD_VAR 0 4
33655: NOT
33656: IFFALSE 33666
// range := 10 ;
33658: LD_ADDR_VAR 0 4
33662: PUSH
33663: LD_INT 10
33665: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33666: LD_ADDR_VAR 0 8
33670: PUSH
33671: LD_INT 81
33673: PUSH
33674: LD_VAR 0 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 92
33685: PUSH
33686: LD_VAR 0 2
33690: PUSH
33691: LD_VAR 0 3
33695: PUSH
33696: LD_VAR 0 4
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 3
33709: PUSH
33710: LD_INT 21
33712: PUSH
33713: LD_INT 3
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: PPUSH
33729: CALL_OW 69
33733: ST_TO_ADDR
// if not tmp then
33734: LD_VAR 0 8
33738: NOT
33739: IFFALSE 33743
// exit ;
33741: GO 35303
// for i in tmp do
33743: LD_ADDR_VAR 0 6
33747: PUSH
33748: LD_VAR 0 8
33752: PUSH
33753: FOR_IN
33754: IFFALSE 35278
// begin points := [ 0 , 0 , 0 ] ;
33756: LD_ADDR_VAR 0 9
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: ST_TO_ADDR
// bpoints := 1 ;
33775: LD_ADDR_VAR 0 10
33779: PUSH
33780: LD_INT 1
33782: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33783: LD_VAR 0 6
33787: PPUSH
33788: CALL_OW 247
33792: PUSH
33793: LD_INT 1
33795: DOUBLE
33796: EQUAL
33797: IFTRUE 33801
33799: GO 34379
33801: POP
// begin if GetClass ( i ) = 1 then
33802: LD_VAR 0 6
33806: PPUSH
33807: CALL_OW 257
33811: PUSH
33812: LD_INT 1
33814: EQUAL
33815: IFFALSE 33836
// points := [ 10 , 5 , 3 ] ;
33817: LD_ADDR_VAR 0 9
33821: PUSH
33822: LD_INT 10
33824: PUSH
33825: LD_INT 5
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33836: LD_VAR 0 6
33840: PPUSH
33841: CALL_OW 257
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: LD_INT 3
33851: PUSH
33852: LD_INT 4
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: IN
33860: IFFALSE 33881
// points := [ 3 , 2 , 1 ] ;
33862: LD_ADDR_VAR 0 9
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 1
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: LIST
33880: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33881: LD_VAR 0 6
33885: PPUSH
33886: CALL_OW 257
33890: PUSH
33891: LD_INT 5
33893: EQUAL
33894: IFFALSE 33915
// points := [ 130 , 5 , 2 ] ;
33896: LD_ADDR_VAR 0 9
33900: PUSH
33901: LD_INT 130
33903: PUSH
33904: LD_INT 5
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33915: LD_VAR 0 6
33919: PPUSH
33920: CALL_OW 257
33924: PUSH
33925: LD_INT 8
33927: EQUAL
33928: IFFALSE 33949
// points := [ 35 , 35 , 30 ] ;
33930: LD_ADDR_VAR 0 9
33934: PUSH
33935: LD_INT 35
33937: PUSH
33938: LD_INT 35
33940: PUSH
33941: LD_INT 30
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33949: LD_VAR 0 6
33953: PPUSH
33954: CALL_OW 257
33958: PUSH
33959: LD_INT 9
33961: EQUAL
33962: IFFALSE 33983
// points := [ 20 , 55 , 40 ] ;
33964: LD_ADDR_VAR 0 9
33968: PUSH
33969: LD_INT 20
33971: PUSH
33972: LD_INT 55
33974: PUSH
33975: LD_INT 40
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33983: LD_VAR 0 6
33987: PPUSH
33988: CALL_OW 257
33992: PUSH
33993: LD_INT 12
33995: PUSH
33996: LD_INT 16
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: IN
34003: IFFALSE 34024
// points := [ 5 , 3 , 2 ] ;
34005: LD_ADDR_VAR 0 9
34009: PUSH
34010: LD_INT 5
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34024: LD_VAR 0 6
34028: PPUSH
34029: CALL_OW 257
34033: PUSH
34034: LD_INT 17
34036: EQUAL
34037: IFFALSE 34058
// points := [ 100 , 50 , 75 ] ;
34039: LD_ADDR_VAR 0 9
34043: PUSH
34044: LD_INT 100
34046: PUSH
34047: LD_INT 50
34049: PUSH
34050: LD_INT 75
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34058: LD_VAR 0 6
34062: PPUSH
34063: CALL_OW 257
34067: PUSH
34068: LD_INT 15
34070: EQUAL
34071: IFFALSE 34092
// points := [ 10 , 5 , 3 ] ;
34073: LD_ADDR_VAR 0 9
34077: PUSH
34078: LD_INT 10
34080: PUSH
34081: LD_INT 5
34083: PUSH
34084: LD_INT 3
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34092: LD_VAR 0 6
34096: PPUSH
34097: CALL_OW 257
34101: PUSH
34102: LD_INT 14
34104: EQUAL
34105: IFFALSE 34126
// points := [ 10 , 0 , 0 ] ;
34107: LD_ADDR_VAR 0 9
34111: PUSH
34112: LD_INT 10
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34126: LD_VAR 0 6
34130: PPUSH
34131: CALL_OW 257
34135: PUSH
34136: LD_INT 11
34138: EQUAL
34139: IFFALSE 34160
// points := [ 30 , 10 , 5 ] ;
34141: LD_ADDR_VAR 0 9
34145: PUSH
34146: LD_INT 30
34148: PUSH
34149: LD_INT 10
34151: PUSH
34152: LD_INT 5
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: LIST
34159: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34160: LD_VAR 0 1
34164: PPUSH
34165: LD_INT 5
34167: PPUSH
34168: CALL_OW 321
34172: PUSH
34173: LD_INT 2
34175: EQUAL
34176: IFFALSE 34193
// bpoints := bpoints * 1.8 ;
34178: LD_ADDR_VAR 0 10
34182: PUSH
34183: LD_VAR 0 10
34187: PUSH
34188: LD_REAL  1.80000000000000E+0000
34191: MUL
34192: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34193: LD_VAR 0 6
34197: PPUSH
34198: CALL_OW 257
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: LD_INT 3
34211: PUSH
34212: LD_INT 4
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: IN
34221: PUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: LD_INT 51
34229: PPUSH
34230: CALL_OW 321
34234: PUSH
34235: LD_INT 2
34237: EQUAL
34238: AND
34239: IFFALSE 34256
// bpoints := bpoints * 1.2 ;
34241: LD_ADDR_VAR 0 10
34245: PUSH
34246: LD_VAR 0 10
34250: PUSH
34251: LD_REAL  1.20000000000000E+0000
34254: MUL
34255: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34256: LD_VAR 0 6
34260: PPUSH
34261: CALL_OW 257
34265: PUSH
34266: LD_INT 5
34268: PUSH
34269: LD_INT 7
34271: PUSH
34272: LD_INT 9
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: IN
34280: PUSH
34281: LD_VAR 0 1
34285: PPUSH
34286: LD_INT 52
34288: PPUSH
34289: CALL_OW 321
34293: PUSH
34294: LD_INT 2
34296: EQUAL
34297: AND
34298: IFFALSE 34315
// bpoints := bpoints * 1.5 ;
34300: LD_ADDR_VAR 0 10
34304: PUSH
34305: LD_VAR 0 10
34309: PUSH
34310: LD_REAL  1.50000000000000E+0000
34313: MUL
34314: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34315: LD_VAR 0 1
34319: PPUSH
34320: LD_INT 66
34322: PPUSH
34323: CALL_OW 321
34327: PUSH
34328: LD_INT 2
34330: EQUAL
34331: IFFALSE 34348
// bpoints := bpoints * 1.1 ;
34333: LD_ADDR_VAR 0 10
34337: PUSH
34338: LD_VAR 0 10
34342: PUSH
34343: LD_REAL  1.10000000000000E+0000
34346: MUL
34347: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34348: LD_ADDR_VAR 0 10
34352: PUSH
34353: LD_VAR 0 10
34357: PUSH
34358: LD_VAR 0 6
34362: PPUSH
34363: LD_INT 1
34365: PPUSH
34366: CALL_OW 259
34370: PUSH
34371: LD_REAL  1.15000000000000E+0000
34374: MUL
34375: MUL
34376: ST_TO_ADDR
// end ; unit_vehicle :
34377: GO 35207
34379: LD_INT 2
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34387
34385: GO 35195
34387: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34388: LD_VAR 0 6
34392: PPUSH
34393: CALL_OW 264
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 42
34403: PUSH
34404: LD_INT 24
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: IN
34412: IFFALSE 34433
// points := [ 25 , 5 , 3 ] ;
34414: LD_ADDR_VAR 0 9
34418: PUSH
34419: LD_INT 25
34421: PUSH
34422: LD_INT 5
34424: PUSH
34425: LD_INT 3
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: LIST
34432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34433: LD_VAR 0 6
34437: PPUSH
34438: CALL_OW 264
34442: PUSH
34443: LD_INT 4
34445: PUSH
34446: LD_INT 43
34448: PUSH
34449: LD_INT 25
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: IN
34457: IFFALSE 34478
// points := [ 40 , 15 , 5 ] ;
34459: LD_ADDR_VAR 0 9
34463: PUSH
34464: LD_INT 40
34466: PUSH
34467: LD_INT 15
34469: PUSH
34470: LD_INT 5
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34478: LD_VAR 0 6
34482: PPUSH
34483: CALL_OW 264
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 23
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: IN
34498: IFFALSE 34519
// points := [ 7 , 25 , 8 ] ;
34500: LD_ADDR_VAR 0 9
34504: PUSH
34505: LD_INT 7
34507: PUSH
34508: LD_INT 25
34510: PUSH
34511: LD_INT 8
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34519: LD_VAR 0 6
34523: PPUSH
34524: CALL_OW 264
34528: PUSH
34529: LD_INT 5
34531: PUSH
34532: LD_INT 27
34534: PUSH
34535: LD_INT 44
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: IN
34543: IFFALSE 34564
// points := [ 14 , 50 , 16 ] ;
34545: LD_ADDR_VAR 0 9
34549: PUSH
34550: LD_INT 14
34552: PUSH
34553: LD_INT 50
34555: PUSH
34556: LD_INT 16
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34564: LD_VAR 0 6
34568: PPUSH
34569: CALL_OW 264
34573: PUSH
34574: LD_INT 6
34576: PUSH
34577: LD_INT 46
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: IN
34584: IFFALSE 34605
// points := [ 32 , 120 , 70 ] ;
34586: LD_ADDR_VAR 0 9
34590: PUSH
34591: LD_INT 32
34593: PUSH
34594: LD_INT 120
34596: PUSH
34597: LD_INT 70
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34605: LD_VAR 0 6
34609: PPUSH
34610: CALL_OW 264
34614: PUSH
34615: LD_INT 7
34617: PUSH
34618: LD_INT 28
34620: PUSH
34621: LD_INT 45
34623: PUSH
34624: LD_EXP 118
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: IN
34635: IFFALSE 34656
// points := [ 35 , 20 , 45 ] ;
34637: LD_ADDR_VAR 0 9
34641: PUSH
34642: LD_INT 35
34644: PUSH
34645: LD_INT 20
34647: PUSH
34648: LD_INT 45
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34656: LD_VAR 0 6
34660: PPUSH
34661: CALL_OW 264
34665: PUSH
34666: LD_INT 47
34668: PUSH
34669: EMPTY
34670: LIST
34671: IN
34672: IFFALSE 34693
// points := [ 67 , 45 , 75 ] ;
34674: LD_ADDR_VAR 0 9
34678: PUSH
34679: LD_INT 67
34681: PUSH
34682: LD_INT 45
34684: PUSH
34685: LD_INT 75
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34693: LD_VAR 0 6
34697: PPUSH
34698: CALL_OW 264
34702: PUSH
34703: LD_INT 26
34705: PUSH
34706: EMPTY
34707: LIST
34708: IN
34709: IFFALSE 34730
// points := [ 120 , 30 , 80 ] ;
34711: LD_ADDR_VAR 0 9
34715: PUSH
34716: LD_INT 120
34718: PUSH
34719: LD_INT 30
34721: PUSH
34722: LD_INT 80
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: LIST
34729: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34730: LD_VAR 0 6
34734: PPUSH
34735: CALL_OW 264
34739: PUSH
34740: LD_INT 22
34742: PUSH
34743: EMPTY
34744: LIST
34745: IN
34746: IFFALSE 34767
// points := [ 40 , 1 , 1 ] ;
34748: LD_ADDR_VAR 0 9
34752: PUSH
34753: LD_INT 40
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34767: LD_VAR 0 6
34771: PPUSH
34772: CALL_OW 264
34776: PUSH
34777: LD_INT 29
34779: PUSH
34780: EMPTY
34781: LIST
34782: IN
34783: IFFALSE 34804
// points := [ 70 , 200 , 400 ] ;
34785: LD_ADDR_VAR 0 9
34789: PUSH
34790: LD_INT 70
34792: PUSH
34793: LD_INT 200
34795: PUSH
34796: LD_INT 400
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34804: LD_VAR 0 6
34808: PPUSH
34809: CALL_OW 264
34813: PUSH
34814: LD_INT 14
34816: PUSH
34817: LD_INT 53
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: IN
34824: IFFALSE 34845
// points := [ 40 , 10 , 20 ] ;
34826: LD_ADDR_VAR 0 9
34830: PUSH
34831: LD_INT 40
34833: PUSH
34834: LD_INT 10
34836: PUSH
34837: LD_INT 20
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34845: LD_VAR 0 6
34849: PPUSH
34850: CALL_OW 264
34854: PUSH
34855: LD_INT 9
34857: PUSH
34858: EMPTY
34859: LIST
34860: IN
34861: IFFALSE 34882
// points := [ 5 , 70 , 20 ] ;
34863: LD_ADDR_VAR 0 9
34867: PUSH
34868: LD_INT 5
34870: PUSH
34871: LD_INT 70
34873: PUSH
34874: LD_INT 20
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34882: LD_VAR 0 6
34886: PPUSH
34887: CALL_OW 264
34891: PUSH
34892: LD_INT 10
34894: PUSH
34895: EMPTY
34896: LIST
34897: IN
34898: IFFALSE 34919
// points := [ 35 , 110 , 70 ] ;
34900: LD_ADDR_VAR 0 9
34904: PUSH
34905: LD_INT 35
34907: PUSH
34908: LD_INT 110
34910: PUSH
34911: LD_INT 70
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34919: LD_VAR 0 6
34923: PPUSH
34924: CALL_OW 265
34928: PUSH
34929: LD_INT 25
34931: EQUAL
34932: IFFALSE 34953
// points := [ 80 , 65 , 100 ] ;
34934: LD_ADDR_VAR 0 9
34938: PUSH
34939: LD_INT 80
34941: PUSH
34942: LD_INT 65
34944: PUSH
34945: LD_INT 100
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34953: LD_VAR 0 6
34957: PPUSH
34958: CALL_OW 263
34962: PUSH
34963: LD_INT 1
34965: EQUAL
34966: IFFALSE 35001
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34968: LD_ADDR_VAR 0 10
34972: PUSH
34973: LD_VAR 0 10
34977: PUSH
34978: LD_VAR 0 6
34982: PPUSH
34983: CALL_OW 311
34987: PPUSH
34988: LD_INT 3
34990: PPUSH
34991: CALL_OW 259
34995: PUSH
34996: LD_INT 4
34998: MUL
34999: MUL
35000: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35001: LD_VAR 0 6
35005: PPUSH
35006: CALL_OW 263
35010: PUSH
35011: LD_INT 2
35013: EQUAL
35014: IFFALSE 35065
// begin j := IsControledBy ( i ) ;
35016: LD_ADDR_VAR 0 7
35020: PUSH
35021: LD_VAR 0 6
35025: PPUSH
35026: CALL_OW 312
35030: ST_TO_ADDR
// if j then
35031: LD_VAR 0 7
35035: IFFALSE 35065
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35037: LD_ADDR_VAR 0 10
35041: PUSH
35042: LD_VAR 0 10
35046: PUSH
35047: LD_VAR 0 7
35051: PPUSH
35052: LD_INT 3
35054: PPUSH
35055: CALL_OW 259
35059: PUSH
35060: LD_INT 3
35062: MUL
35063: MUL
35064: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35065: LD_VAR 0 6
35069: PPUSH
35070: CALL_OW 264
35074: PUSH
35075: LD_INT 5
35077: PUSH
35078: LD_INT 6
35080: PUSH
35081: LD_INT 46
35083: PUSH
35084: LD_INT 44
35086: PUSH
35087: LD_INT 47
35089: PUSH
35090: LD_INT 45
35092: PUSH
35093: LD_INT 28
35095: PUSH
35096: LD_INT 7
35098: PUSH
35099: LD_INT 27
35101: PUSH
35102: LD_INT 29
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: IN
35117: PUSH
35118: LD_VAR 0 1
35122: PPUSH
35123: LD_INT 52
35125: PPUSH
35126: CALL_OW 321
35130: PUSH
35131: LD_INT 2
35133: EQUAL
35134: AND
35135: IFFALSE 35152
// bpoints := bpoints * 1.2 ;
35137: LD_ADDR_VAR 0 10
35141: PUSH
35142: LD_VAR 0 10
35146: PUSH
35147: LD_REAL  1.20000000000000E+0000
35150: MUL
35151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35152: LD_VAR 0 6
35156: PPUSH
35157: CALL_OW 264
35161: PUSH
35162: LD_INT 6
35164: PUSH
35165: LD_INT 46
35167: PUSH
35168: LD_INT 47
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: IN
35176: IFFALSE 35193
// bpoints := bpoints * 1.2 ;
35178: LD_ADDR_VAR 0 10
35182: PUSH
35183: LD_VAR 0 10
35187: PUSH
35188: LD_REAL  1.20000000000000E+0000
35191: MUL
35192: ST_TO_ADDR
// end ; unit_building :
35193: GO 35207
35195: LD_INT 3
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35206
35203: POP
// ; end ;
35204: GO 35207
35206: POP
// for j = 1 to 3 do
35207: LD_ADDR_VAR 0 7
35211: PUSH
35212: DOUBLE
35213: LD_INT 1
35215: DEC
35216: ST_TO_ADDR
35217: LD_INT 3
35219: PUSH
35220: FOR_TO
35221: IFFALSE 35274
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35223: LD_ADDR_VAR 0 5
35227: PUSH
35228: LD_VAR 0 5
35232: PPUSH
35233: LD_VAR 0 7
35237: PPUSH
35238: LD_VAR 0 5
35242: PUSH
35243: LD_VAR 0 7
35247: ARRAY
35248: PUSH
35249: LD_VAR 0 9
35253: PUSH
35254: LD_VAR 0 7
35258: ARRAY
35259: PUSH
35260: LD_VAR 0 10
35264: MUL
35265: PLUS
35266: PPUSH
35267: CALL_OW 1
35271: ST_TO_ADDR
35272: GO 35220
35274: POP
35275: POP
// end ;
35276: GO 33753
35278: POP
35279: POP
// result := Replace ( result , 4 , tmp ) ;
35280: LD_ADDR_VAR 0 5
35284: PUSH
35285: LD_VAR 0 5
35289: PPUSH
35290: LD_INT 4
35292: PPUSH
35293: LD_VAR 0 8
35297: PPUSH
35298: CALL_OW 1
35302: ST_TO_ADDR
// end ;
35303: LD_VAR 0 5
35307: RET
// export function DangerAtRange ( unit , range ) ; begin
35308: LD_INT 0
35310: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35311: LD_ADDR_VAR 0 3
35315: PUSH
35316: LD_VAR 0 1
35320: PPUSH
35321: CALL_OW 255
35325: PPUSH
35326: LD_VAR 0 1
35330: PPUSH
35331: CALL_OW 250
35335: PPUSH
35336: LD_VAR 0 1
35340: PPUSH
35341: CALL_OW 251
35345: PPUSH
35346: LD_VAR 0 2
35350: PPUSH
35351: CALL 33605 0 4
35355: ST_TO_ADDR
// end ;
35356: LD_VAR 0 3
35360: RET
// export function DangerInArea ( side , area ) ; begin
35361: LD_INT 0
35363: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35364: LD_ADDR_VAR 0 3
35368: PUSH
35369: LD_VAR 0 2
35373: PPUSH
35374: LD_INT 81
35376: PUSH
35377: LD_VAR 0 1
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PPUSH
35386: CALL_OW 70
35390: ST_TO_ADDR
// end ;
35391: LD_VAR 0 3
35395: RET
// export function IsExtension ( b ) ; begin
35396: LD_INT 0
35398: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35399: LD_ADDR_VAR 0 2
35403: PUSH
35404: LD_VAR 0 1
35408: PUSH
35409: LD_INT 23
35411: PUSH
35412: LD_INT 20
35414: PUSH
35415: LD_INT 22
35417: PUSH
35418: LD_INT 17
35420: PUSH
35421: LD_INT 24
35423: PUSH
35424: LD_INT 21
35426: PUSH
35427: LD_INT 19
35429: PUSH
35430: LD_INT 16
35432: PUSH
35433: LD_INT 25
35435: PUSH
35436: LD_INT 18
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: IN
35451: ST_TO_ADDR
// end ;
35452: LD_VAR 0 2
35456: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35457: LD_INT 0
35459: PPUSH
35460: PPUSH
35461: PPUSH
// result := [ ] ;
35462: LD_ADDR_VAR 0 4
35466: PUSH
35467: EMPTY
35468: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35469: LD_ADDR_VAR 0 5
35473: PUSH
35474: LD_VAR 0 2
35478: PPUSH
35479: LD_INT 21
35481: PUSH
35482: LD_INT 3
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PPUSH
35489: CALL_OW 70
35493: ST_TO_ADDR
// if not tmp then
35494: LD_VAR 0 5
35498: NOT
35499: IFFALSE 35503
// exit ;
35501: GO 35567
// if checkLink then
35503: LD_VAR 0 3
35507: IFFALSE 35557
// begin for i in tmp do
35509: LD_ADDR_VAR 0 6
35513: PUSH
35514: LD_VAR 0 5
35518: PUSH
35519: FOR_IN
35520: IFFALSE 35555
// if GetBase ( i ) <> base then
35522: LD_VAR 0 6
35526: PPUSH
35527: CALL_OW 274
35531: PUSH
35532: LD_VAR 0 1
35536: NONEQUAL
35537: IFFALSE 35553
// ComLinkToBase ( base , i ) ;
35539: LD_VAR 0 1
35543: PPUSH
35544: LD_VAR 0 6
35548: PPUSH
35549: CALL_OW 169
35553: GO 35519
35555: POP
35556: POP
// end ; result := tmp ;
35557: LD_ADDR_VAR 0 4
35561: PUSH
35562: LD_VAR 0 5
35566: ST_TO_ADDR
// end ;
35567: LD_VAR 0 4
35571: RET
// export function ComComplete ( units , b ) ; var i ; begin
35572: LD_INT 0
35574: PPUSH
35575: PPUSH
// if not units then
35576: LD_VAR 0 1
35580: NOT
35581: IFFALSE 35585
// exit ;
35583: GO 35675
// for i in units do
35585: LD_ADDR_VAR 0 4
35589: PUSH
35590: LD_VAR 0 1
35594: PUSH
35595: FOR_IN
35596: IFFALSE 35673
// if BuildingStatus ( b ) = bs_build then
35598: LD_VAR 0 2
35602: PPUSH
35603: CALL_OW 461
35607: PUSH
35608: LD_INT 1
35610: EQUAL
35611: IFFALSE 35671
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35613: LD_VAR 0 4
35617: PPUSH
35618: LD_STRING h
35620: PUSH
35621: LD_VAR 0 2
35625: PPUSH
35626: CALL_OW 250
35630: PUSH
35631: LD_VAR 0 2
35635: PPUSH
35636: CALL_OW 251
35640: PUSH
35641: LD_VAR 0 2
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: PUSH
35664: EMPTY
35665: LIST
35666: PPUSH
35667: CALL_OW 446
35671: GO 35595
35673: POP
35674: POP
// end ;
35675: LD_VAR 0 3
35679: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35680: LD_INT 0
35682: PPUSH
35683: PPUSH
35684: PPUSH
35685: PPUSH
35686: PPUSH
35687: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35688: LD_VAR 0 1
35692: NOT
35693: PUSH
35694: LD_VAR 0 1
35698: PPUSH
35699: CALL_OW 263
35703: PUSH
35704: LD_INT 2
35706: NONEQUAL
35707: OR
35708: IFFALSE 35712
// exit ;
35710: GO 36028
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35712: LD_ADDR_VAR 0 6
35716: PUSH
35717: LD_INT 22
35719: PUSH
35720: LD_VAR 0 1
35724: PPUSH
35725: CALL_OW 255
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: LD_INT 30
35739: PUSH
35740: LD_INT 36
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 34
35749: PUSH
35750: LD_INT 31
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PPUSH
35766: CALL_OW 69
35770: ST_TO_ADDR
// if not tmp then
35771: LD_VAR 0 6
35775: NOT
35776: IFFALSE 35780
// exit ;
35778: GO 36028
// result := [ ] ;
35780: LD_ADDR_VAR 0 2
35784: PUSH
35785: EMPTY
35786: ST_TO_ADDR
// for i in tmp do
35787: LD_ADDR_VAR 0 3
35791: PUSH
35792: LD_VAR 0 6
35796: PUSH
35797: FOR_IN
35798: IFFALSE 35869
// begin t := UnitsInside ( i ) ;
35800: LD_ADDR_VAR 0 4
35804: PUSH
35805: LD_VAR 0 3
35809: PPUSH
35810: CALL_OW 313
35814: ST_TO_ADDR
// if t then
35815: LD_VAR 0 4
35819: IFFALSE 35867
// for j in t do
35821: LD_ADDR_VAR 0 7
35825: PUSH
35826: LD_VAR 0 4
35830: PUSH
35831: FOR_IN
35832: IFFALSE 35865
// result := Replace ( result , result + 1 , j ) ;
35834: LD_ADDR_VAR 0 2
35838: PUSH
35839: LD_VAR 0 2
35843: PPUSH
35844: LD_VAR 0 2
35848: PUSH
35849: LD_INT 1
35851: PLUS
35852: PPUSH
35853: LD_VAR 0 7
35857: PPUSH
35858: CALL_OW 1
35862: ST_TO_ADDR
35863: GO 35831
35865: POP
35866: POP
// end ;
35867: GO 35797
35869: POP
35870: POP
// if not result then
35871: LD_VAR 0 2
35875: NOT
35876: IFFALSE 35880
// exit ;
35878: GO 36028
// mech := result [ 1 ] ;
35880: LD_ADDR_VAR 0 5
35884: PUSH
35885: LD_VAR 0 2
35889: PUSH
35890: LD_INT 1
35892: ARRAY
35893: ST_TO_ADDR
// if result > 1 then
35894: LD_VAR 0 2
35898: PUSH
35899: LD_INT 1
35901: GREATER
35902: IFFALSE 36014
// begin for i = 2 to result do
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: DOUBLE
35910: LD_INT 2
35912: DEC
35913: ST_TO_ADDR
35914: LD_VAR 0 2
35918: PUSH
35919: FOR_TO
35920: IFFALSE 36012
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35922: LD_ADDR_VAR 0 4
35926: PUSH
35927: LD_VAR 0 2
35931: PUSH
35932: LD_VAR 0 3
35936: ARRAY
35937: PPUSH
35938: LD_INT 3
35940: PPUSH
35941: CALL_OW 259
35945: PUSH
35946: LD_VAR 0 2
35950: PUSH
35951: LD_VAR 0 3
35955: ARRAY
35956: PPUSH
35957: CALL_OW 432
35961: MINUS
35962: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35963: LD_VAR 0 4
35967: PUSH
35968: LD_VAR 0 5
35972: PPUSH
35973: LD_INT 3
35975: PPUSH
35976: CALL_OW 259
35980: PUSH
35981: LD_VAR 0 5
35985: PPUSH
35986: CALL_OW 432
35990: MINUS
35991: GREATEREQUAL
35992: IFFALSE 36010
// mech := result [ i ] ;
35994: LD_ADDR_VAR 0 5
35998: PUSH
35999: LD_VAR 0 2
36003: PUSH
36004: LD_VAR 0 3
36008: ARRAY
36009: ST_TO_ADDR
// end ;
36010: GO 35919
36012: POP
36013: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36014: LD_VAR 0 1
36018: PPUSH
36019: LD_VAR 0 5
36023: PPUSH
36024: CALL_OW 135
// end ;
36028: LD_VAR 0 2
36032: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36033: LD_INT 0
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
// result := [ ] ;
36048: LD_ADDR_VAR 0 7
36052: PUSH
36053: EMPTY
36054: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36055: LD_VAR 0 1
36059: PPUSH
36060: CALL_OW 266
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: IN
36075: NOT
36076: IFFALSE 36080
// exit ;
36078: GO 37714
// if name then
36080: LD_VAR 0 3
36084: IFFALSE 36100
// SetBName ( base_dep , name ) ;
36086: LD_VAR 0 1
36090: PPUSH
36091: LD_VAR 0 3
36095: PPUSH
36096: CALL_OW 500
// base := GetBase ( base_dep ) ;
36100: LD_ADDR_VAR 0 15
36104: PUSH
36105: LD_VAR 0 1
36109: PPUSH
36110: CALL_OW 274
36114: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36115: LD_ADDR_VAR 0 16
36119: PUSH
36120: LD_VAR 0 1
36124: PPUSH
36125: CALL_OW 255
36129: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36130: LD_ADDR_VAR 0 17
36134: PUSH
36135: LD_VAR 0 1
36139: PPUSH
36140: CALL_OW 248
36144: ST_TO_ADDR
// if sources then
36145: LD_VAR 0 5
36149: IFFALSE 36196
// for i = 1 to 3 do
36151: LD_ADDR_VAR 0 8
36155: PUSH
36156: DOUBLE
36157: LD_INT 1
36159: DEC
36160: ST_TO_ADDR
36161: LD_INT 3
36163: PUSH
36164: FOR_TO
36165: IFFALSE 36194
// AddResourceType ( base , i , sources [ i ] ) ;
36167: LD_VAR 0 15
36171: PPUSH
36172: LD_VAR 0 8
36176: PPUSH
36177: LD_VAR 0 5
36181: PUSH
36182: LD_VAR 0 8
36186: ARRAY
36187: PPUSH
36188: CALL_OW 276
36192: GO 36164
36194: POP
36195: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36196: LD_ADDR_VAR 0 18
36200: PUSH
36201: LD_VAR 0 15
36205: PPUSH
36206: LD_VAR 0 2
36210: PPUSH
36211: LD_INT 1
36213: PPUSH
36214: CALL 35457 0 3
36218: ST_TO_ADDR
// InitHc ;
36219: CALL_OW 19
// InitUc ;
36223: CALL_OW 18
// uc_side := side ;
36227: LD_ADDR_OWVAR 20
36231: PUSH
36232: LD_VAR 0 16
36236: ST_TO_ADDR
// uc_nation := nation ;
36237: LD_ADDR_OWVAR 21
36241: PUSH
36242: LD_VAR 0 17
36246: ST_TO_ADDR
// if buildings then
36247: LD_VAR 0 18
36251: IFFALSE 37573
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36253: LD_ADDR_VAR 0 19
36257: PUSH
36258: LD_VAR 0 18
36262: PPUSH
36263: LD_INT 2
36265: PUSH
36266: LD_INT 30
36268: PUSH
36269: LD_INT 29
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 30
36278: PUSH
36279: LD_INT 30
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: PPUSH
36291: CALL_OW 72
36295: ST_TO_ADDR
// if tmp then
36296: LD_VAR 0 19
36300: IFFALSE 36348
// for i in tmp do
36302: LD_ADDR_VAR 0 8
36306: PUSH
36307: LD_VAR 0 19
36311: PUSH
36312: FOR_IN
36313: IFFALSE 36346
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36315: LD_VAR 0 8
36319: PPUSH
36320: CALL_OW 250
36324: PPUSH
36325: LD_VAR 0 8
36329: PPUSH
36330: CALL_OW 251
36334: PPUSH
36335: LD_VAR 0 16
36339: PPUSH
36340: CALL_OW 441
36344: GO 36312
36346: POP
36347: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36348: LD_VAR 0 18
36352: PPUSH
36353: LD_INT 2
36355: PUSH
36356: LD_INT 30
36358: PUSH
36359: LD_INT 32
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 30
36368: PUSH
36369: LD_INT 33
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: PPUSH
36381: CALL_OW 72
36385: IFFALSE 36473
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36387: LD_ADDR_VAR 0 8
36391: PUSH
36392: LD_VAR 0 18
36396: PPUSH
36397: LD_INT 2
36399: PUSH
36400: LD_INT 30
36402: PUSH
36403: LD_INT 32
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 30
36412: PUSH
36413: LD_INT 33
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: LIST
36424: PPUSH
36425: CALL_OW 72
36429: PUSH
36430: FOR_IN
36431: IFFALSE 36471
// begin if not GetBWeapon ( i ) then
36433: LD_VAR 0 8
36437: PPUSH
36438: CALL_OW 269
36442: NOT
36443: IFFALSE 36469
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36445: LD_VAR 0 8
36449: PPUSH
36450: LD_VAR 0 8
36454: PPUSH
36455: LD_VAR 0 2
36459: PPUSH
36460: CALL 37719 0 2
36464: PPUSH
36465: CALL_OW 431
// end ;
36469: GO 36430
36471: POP
36472: POP
// end ; for i = 1 to personel do
36473: LD_ADDR_VAR 0 8
36477: PUSH
36478: DOUBLE
36479: LD_INT 1
36481: DEC
36482: ST_TO_ADDR
36483: LD_VAR 0 6
36487: PUSH
36488: FOR_TO
36489: IFFALSE 37553
// begin if i > 4 then
36491: LD_VAR 0 8
36495: PUSH
36496: LD_INT 4
36498: GREATER
36499: IFFALSE 36503
// break ;
36501: GO 37553
// case i of 1 :
36503: LD_VAR 0 8
36507: PUSH
36508: LD_INT 1
36510: DOUBLE
36511: EQUAL
36512: IFTRUE 36516
36514: GO 36596
36516: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36517: LD_ADDR_VAR 0 12
36521: PUSH
36522: LD_VAR 0 18
36526: PPUSH
36527: LD_INT 22
36529: PUSH
36530: LD_VAR 0 16
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 58
36541: PUSH
36542: EMPTY
36543: LIST
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: LD_INT 30
36550: PUSH
36551: LD_INT 32
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 30
36560: PUSH
36561: LD_INT 4
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 30
36570: PUSH
36571: LD_INT 5
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: PPUSH
36589: CALL_OW 72
36593: ST_TO_ADDR
36594: GO 36818
36596: LD_INT 2
36598: DOUBLE
36599: EQUAL
36600: IFTRUE 36604
36602: GO 36666
36604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36605: LD_ADDR_VAR 0 12
36609: PUSH
36610: LD_VAR 0 18
36614: PPUSH
36615: LD_INT 22
36617: PUSH
36618: LD_VAR 0 16
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: LD_INT 30
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 30
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PPUSH
36659: CALL_OW 72
36663: ST_TO_ADDR
36664: GO 36818
36666: LD_INT 3
36668: DOUBLE
36669: EQUAL
36670: IFTRUE 36674
36672: GO 36736
36674: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36675: LD_ADDR_VAR 0 12
36679: PUSH
36680: LD_VAR 0 18
36684: PPUSH
36685: LD_INT 22
36687: PUSH
36688: LD_VAR 0 16
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: LD_INT 30
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 30
36712: PUSH
36713: LD_INT 3
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PPUSH
36729: CALL_OW 72
36733: ST_TO_ADDR
36734: GO 36818
36736: LD_INT 4
36738: DOUBLE
36739: EQUAL
36740: IFTRUE 36744
36742: GO 36817
36744: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36745: LD_ADDR_VAR 0 12
36749: PUSH
36750: LD_VAR 0 18
36754: PPUSH
36755: LD_INT 22
36757: PUSH
36758: LD_VAR 0 16
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 2
36769: PUSH
36770: LD_INT 30
36772: PUSH
36773: LD_INT 6
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 30
36782: PUSH
36783: LD_INT 7
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 30
36792: PUSH
36793: LD_INT 8
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PPUSH
36810: CALL_OW 72
36814: ST_TO_ADDR
36815: GO 36818
36817: POP
// if i = 1 then
36818: LD_VAR 0 8
36822: PUSH
36823: LD_INT 1
36825: EQUAL
36826: IFFALSE 36937
// begin tmp := [ ] ;
36828: LD_ADDR_VAR 0 19
36832: PUSH
36833: EMPTY
36834: ST_TO_ADDR
// for j in f do
36835: LD_ADDR_VAR 0 9
36839: PUSH
36840: LD_VAR 0 12
36844: PUSH
36845: FOR_IN
36846: IFFALSE 36919
// if GetBType ( j ) = b_bunker then
36848: LD_VAR 0 9
36852: PPUSH
36853: CALL_OW 266
36857: PUSH
36858: LD_INT 32
36860: EQUAL
36861: IFFALSE 36888
// tmp := Insert ( tmp , 1 , j ) else
36863: LD_ADDR_VAR 0 19
36867: PUSH
36868: LD_VAR 0 19
36872: PPUSH
36873: LD_INT 1
36875: PPUSH
36876: LD_VAR 0 9
36880: PPUSH
36881: CALL_OW 2
36885: ST_TO_ADDR
36886: GO 36917
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36888: LD_ADDR_VAR 0 19
36892: PUSH
36893: LD_VAR 0 19
36897: PPUSH
36898: LD_VAR 0 19
36902: PUSH
36903: LD_INT 1
36905: PLUS
36906: PPUSH
36907: LD_VAR 0 9
36911: PPUSH
36912: CALL_OW 2
36916: ST_TO_ADDR
36917: GO 36845
36919: POP
36920: POP
// if tmp then
36921: LD_VAR 0 19
36925: IFFALSE 36937
// f := tmp ;
36927: LD_ADDR_VAR 0 12
36931: PUSH
36932: LD_VAR 0 19
36936: ST_TO_ADDR
// end ; x := personel [ i ] ;
36937: LD_ADDR_VAR 0 13
36941: PUSH
36942: LD_VAR 0 6
36946: PUSH
36947: LD_VAR 0 8
36951: ARRAY
36952: ST_TO_ADDR
// if x = - 1 then
36953: LD_VAR 0 13
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: EQUAL
36962: IFFALSE 37171
// begin for j in f do
36964: LD_ADDR_VAR 0 9
36968: PUSH
36969: LD_VAR 0 12
36973: PUSH
36974: FOR_IN
36975: IFFALSE 37167
// repeat InitHc ;
36977: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36981: LD_VAR 0 9
36985: PPUSH
36986: CALL_OW 266
36990: PUSH
36991: LD_INT 5
36993: EQUAL
36994: IFFALSE 37064
// begin if UnitsInside ( j ) < 3 then
36996: LD_VAR 0 9
37000: PPUSH
37001: CALL_OW 313
37005: PUSH
37006: LD_INT 3
37008: LESS
37009: IFFALSE 37045
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37011: LD_INT 0
37013: PPUSH
37014: LD_INT 5
37016: PUSH
37017: LD_INT 8
37019: PUSH
37020: LD_INT 9
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: PUSH
37028: LD_VAR 0 17
37032: ARRAY
37033: PPUSH
37034: LD_VAR 0 4
37038: PPUSH
37039: CALL_OW 380
37043: GO 37062
// PrepareHuman ( false , i , skill ) ;
37045: LD_INT 0
37047: PPUSH
37048: LD_VAR 0 8
37052: PPUSH
37053: LD_VAR 0 4
37057: PPUSH
37058: CALL_OW 380
// end else
37062: GO 37081
// PrepareHuman ( false , i , skill ) ;
37064: LD_INT 0
37066: PPUSH
37067: LD_VAR 0 8
37071: PPUSH
37072: LD_VAR 0 4
37076: PPUSH
37077: CALL_OW 380
// un := CreateHuman ;
37081: LD_ADDR_VAR 0 14
37085: PUSH
37086: CALL_OW 44
37090: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37091: LD_ADDR_VAR 0 7
37095: PUSH
37096: LD_VAR 0 7
37100: PPUSH
37101: LD_INT 1
37103: PPUSH
37104: LD_VAR 0 14
37108: PPUSH
37109: CALL_OW 2
37113: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37114: LD_VAR 0 14
37118: PPUSH
37119: LD_VAR 0 9
37123: PPUSH
37124: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37128: LD_VAR 0 9
37132: PPUSH
37133: CALL_OW 313
37137: PUSH
37138: LD_INT 6
37140: EQUAL
37141: PUSH
37142: LD_VAR 0 9
37146: PPUSH
37147: CALL_OW 266
37151: PUSH
37152: LD_INT 32
37154: PUSH
37155: LD_INT 31
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: IN
37162: OR
37163: IFFALSE 36977
37165: GO 36974
37167: POP
37168: POP
// end else
37169: GO 37551
// for j = 1 to x do
37171: LD_ADDR_VAR 0 9
37175: PUSH
37176: DOUBLE
37177: LD_INT 1
37179: DEC
37180: ST_TO_ADDR
37181: LD_VAR 0 13
37185: PUSH
37186: FOR_TO
37187: IFFALSE 37549
// begin InitHc ;
37189: CALL_OW 19
// if not f then
37193: LD_VAR 0 12
37197: NOT
37198: IFFALSE 37287
// begin PrepareHuman ( false , i , skill ) ;
37200: LD_INT 0
37202: PPUSH
37203: LD_VAR 0 8
37207: PPUSH
37208: LD_VAR 0 4
37212: PPUSH
37213: CALL_OW 380
// un := CreateHuman ;
37217: LD_ADDR_VAR 0 14
37221: PUSH
37222: CALL_OW 44
37226: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37227: LD_ADDR_VAR 0 7
37231: PUSH
37232: LD_VAR 0 7
37236: PPUSH
37237: LD_INT 1
37239: PPUSH
37240: LD_VAR 0 14
37244: PPUSH
37245: CALL_OW 2
37249: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37250: LD_VAR 0 14
37254: PPUSH
37255: LD_VAR 0 1
37259: PPUSH
37260: CALL_OW 250
37264: PPUSH
37265: LD_VAR 0 1
37269: PPUSH
37270: CALL_OW 251
37274: PPUSH
37275: LD_INT 10
37277: PPUSH
37278: LD_INT 0
37280: PPUSH
37281: CALL_OW 50
// continue ;
37285: GO 37186
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37287: LD_VAR 0 12
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: PPUSH
37296: CALL_OW 313
37300: PUSH
37301: LD_VAR 0 12
37305: PUSH
37306: LD_INT 1
37308: ARRAY
37309: PPUSH
37310: CALL_OW 266
37314: PUSH
37315: LD_INT 32
37317: PUSH
37318: LD_INT 31
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: IN
37325: AND
37326: PUSH
37327: LD_VAR 0 12
37331: PUSH
37332: LD_INT 1
37334: ARRAY
37335: PPUSH
37336: CALL_OW 313
37340: PUSH
37341: LD_INT 6
37343: EQUAL
37344: OR
37345: IFFALSE 37365
// f := Delete ( f , 1 ) ;
37347: LD_ADDR_VAR 0 12
37351: PUSH
37352: LD_VAR 0 12
37356: PPUSH
37357: LD_INT 1
37359: PPUSH
37360: CALL_OW 3
37364: ST_TO_ADDR
// if not f then
37365: LD_VAR 0 12
37369: NOT
37370: IFFALSE 37388
// begin x := x + 2 ;
37372: LD_ADDR_VAR 0 13
37376: PUSH
37377: LD_VAR 0 13
37381: PUSH
37382: LD_INT 2
37384: PLUS
37385: ST_TO_ADDR
// continue ;
37386: GO 37186
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37388: LD_VAR 0 12
37392: PUSH
37393: LD_INT 1
37395: ARRAY
37396: PPUSH
37397: CALL_OW 266
37401: PUSH
37402: LD_INT 5
37404: EQUAL
37405: IFFALSE 37479
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37407: LD_VAR 0 12
37411: PUSH
37412: LD_INT 1
37414: ARRAY
37415: PPUSH
37416: CALL_OW 313
37420: PUSH
37421: LD_INT 3
37423: LESS
37424: IFFALSE 37460
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37426: LD_INT 0
37428: PPUSH
37429: LD_INT 5
37431: PUSH
37432: LD_INT 8
37434: PUSH
37435: LD_INT 9
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: PUSH
37443: LD_VAR 0 17
37447: ARRAY
37448: PPUSH
37449: LD_VAR 0 4
37453: PPUSH
37454: CALL_OW 380
37458: GO 37477
// PrepareHuman ( false , i , skill ) ;
37460: LD_INT 0
37462: PPUSH
37463: LD_VAR 0 8
37467: PPUSH
37468: LD_VAR 0 4
37472: PPUSH
37473: CALL_OW 380
// end else
37477: GO 37496
// PrepareHuman ( false , i , skill ) ;
37479: LD_INT 0
37481: PPUSH
37482: LD_VAR 0 8
37486: PPUSH
37487: LD_VAR 0 4
37491: PPUSH
37492: CALL_OW 380
// un := CreateHuman ;
37496: LD_ADDR_VAR 0 14
37500: PUSH
37501: CALL_OW 44
37505: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37506: LD_ADDR_VAR 0 7
37510: PUSH
37511: LD_VAR 0 7
37515: PPUSH
37516: LD_INT 1
37518: PPUSH
37519: LD_VAR 0 14
37523: PPUSH
37524: CALL_OW 2
37528: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37529: LD_VAR 0 14
37533: PPUSH
37534: LD_VAR 0 12
37538: PUSH
37539: LD_INT 1
37541: ARRAY
37542: PPUSH
37543: CALL_OW 52
// end ;
37547: GO 37186
37549: POP
37550: POP
// end ;
37551: GO 36488
37553: POP
37554: POP
// result := result ^ buildings ;
37555: LD_ADDR_VAR 0 7
37559: PUSH
37560: LD_VAR 0 7
37564: PUSH
37565: LD_VAR 0 18
37569: ADD
37570: ST_TO_ADDR
// end else
37571: GO 37714
// begin for i = 1 to personel do
37573: LD_ADDR_VAR 0 8
37577: PUSH
37578: DOUBLE
37579: LD_INT 1
37581: DEC
37582: ST_TO_ADDR
37583: LD_VAR 0 6
37587: PUSH
37588: FOR_TO
37589: IFFALSE 37712
// begin if i > 4 then
37591: LD_VAR 0 8
37595: PUSH
37596: LD_INT 4
37598: GREATER
37599: IFFALSE 37603
// break ;
37601: GO 37712
// x := personel [ i ] ;
37603: LD_ADDR_VAR 0 13
37607: PUSH
37608: LD_VAR 0 6
37612: PUSH
37613: LD_VAR 0 8
37617: ARRAY
37618: ST_TO_ADDR
// if x = - 1 then
37619: LD_VAR 0 13
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: EQUAL
37628: IFFALSE 37632
// continue ;
37630: GO 37588
// PrepareHuman ( false , i , skill ) ;
37632: LD_INT 0
37634: PPUSH
37635: LD_VAR 0 8
37639: PPUSH
37640: LD_VAR 0 4
37644: PPUSH
37645: CALL_OW 380
// un := CreateHuman ;
37649: LD_ADDR_VAR 0 14
37653: PUSH
37654: CALL_OW 44
37658: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37659: LD_VAR 0 14
37663: PPUSH
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 250
37673: PPUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 251
37683: PPUSH
37684: LD_INT 10
37686: PPUSH
37687: LD_INT 0
37689: PPUSH
37690: CALL_OW 50
// result := result ^ un ;
37694: LD_ADDR_VAR 0 7
37698: PUSH
37699: LD_VAR 0 7
37703: PUSH
37704: LD_VAR 0 14
37708: ADD
37709: ST_TO_ADDR
// end ;
37710: GO 37588
37712: POP
37713: POP
// end ; end ;
37714: LD_VAR 0 7
37718: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37719: LD_INT 0
37721: PPUSH
37722: PPUSH
37723: PPUSH
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
// result := false ;
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_INT 0
37744: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37745: LD_VAR 0 1
37749: NOT
37750: PUSH
37751: LD_VAR 0 1
37755: PPUSH
37756: CALL_OW 266
37760: PUSH
37761: LD_INT 32
37763: PUSH
37764: LD_INT 33
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: IN
37771: NOT
37772: OR
37773: IFFALSE 37777
// exit ;
37775: GO 38886
// nat := GetNation ( tower ) ;
37777: LD_ADDR_VAR 0 12
37781: PUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL_OW 248
37791: ST_TO_ADDR
// side := GetSide ( tower ) ;
37792: LD_ADDR_VAR 0 16
37796: PUSH
37797: LD_VAR 0 1
37801: PPUSH
37802: CALL_OW 255
37806: ST_TO_ADDR
// x := GetX ( tower ) ;
37807: LD_ADDR_VAR 0 10
37811: PUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL_OW 250
37821: ST_TO_ADDR
// y := GetY ( tower ) ;
37822: LD_ADDR_VAR 0 11
37826: PUSH
37827: LD_VAR 0 1
37831: PPUSH
37832: CALL_OW 251
37836: ST_TO_ADDR
// if not x or not y then
37837: LD_VAR 0 10
37841: NOT
37842: PUSH
37843: LD_VAR 0 11
37847: NOT
37848: OR
37849: IFFALSE 37853
// exit ;
37851: GO 38886
// weapon := 0 ;
37853: LD_ADDR_VAR 0 18
37857: PUSH
37858: LD_INT 0
37860: ST_TO_ADDR
// fac_list := [ ] ;
37861: LD_ADDR_VAR 0 17
37865: PUSH
37866: EMPTY
37867: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37868: LD_ADDR_VAR 0 6
37872: PUSH
37873: LD_VAR 0 1
37877: PPUSH
37878: CALL_OW 274
37882: PPUSH
37883: LD_VAR 0 2
37887: PPUSH
37888: LD_INT 0
37890: PPUSH
37891: CALL 35457 0 3
37895: PPUSH
37896: LD_INT 30
37898: PUSH
37899: LD_INT 3
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PPUSH
37906: CALL_OW 72
37910: ST_TO_ADDR
// if not factories then
37911: LD_VAR 0 6
37915: NOT
37916: IFFALSE 37920
// exit ;
37918: GO 38886
// for i in factories do
37920: LD_ADDR_VAR 0 8
37924: PUSH
37925: LD_VAR 0 6
37929: PUSH
37930: FOR_IN
37931: IFFALSE 37956
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37933: LD_ADDR_VAR 0 17
37937: PUSH
37938: LD_VAR 0 17
37942: PUSH
37943: LD_VAR 0 8
37947: PPUSH
37948: CALL_OW 478
37952: UNION
37953: ST_TO_ADDR
37954: GO 37930
37956: POP
37957: POP
// if not fac_list then
37958: LD_VAR 0 17
37962: NOT
37963: IFFALSE 37967
// exit ;
37965: GO 38886
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37967: LD_ADDR_VAR 0 5
37971: PUSH
37972: LD_INT 4
37974: PUSH
37975: LD_INT 5
37977: PUSH
37978: LD_INT 9
37980: PUSH
37981: LD_INT 10
37983: PUSH
37984: LD_INT 6
37986: PUSH
37987: LD_INT 7
37989: PUSH
37990: LD_INT 11
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 27
38004: PUSH
38005: LD_INT 28
38007: PUSH
38008: LD_INT 26
38010: PUSH
38011: LD_INT 30
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 43
38022: PUSH
38023: LD_INT 44
38025: PUSH
38026: LD_INT 46
38028: PUSH
38029: LD_INT 45
38031: PUSH
38032: LD_INT 47
38034: PUSH
38035: LD_INT 49
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: LIST
38050: PUSH
38051: LD_VAR 0 12
38055: ARRAY
38056: ST_TO_ADDR
// list := list isect fac_list ;
38057: LD_ADDR_VAR 0 5
38061: PUSH
38062: LD_VAR 0 5
38066: PUSH
38067: LD_VAR 0 17
38071: ISECT
38072: ST_TO_ADDR
// if not list then
38073: LD_VAR 0 5
38077: NOT
38078: IFFALSE 38082
// exit ;
38080: GO 38886
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38082: LD_VAR 0 12
38086: PUSH
38087: LD_INT 3
38089: EQUAL
38090: PUSH
38091: LD_INT 49
38093: PUSH
38094: LD_VAR 0 5
38098: IN
38099: AND
38100: PUSH
38101: LD_INT 31
38103: PPUSH
38104: LD_VAR 0 16
38108: PPUSH
38109: CALL_OW 321
38113: PUSH
38114: LD_INT 2
38116: EQUAL
38117: AND
38118: IFFALSE 38178
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38120: LD_INT 22
38122: PUSH
38123: LD_VAR 0 16
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 35
38134: PUSH
38135: LD_INT 49
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 91
38144: PUSH
38145: LD_VAR 0 1
38149: PUSH
38150: LD_INT 10
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: PPUSH
38163: CALL_OW 69
38167: NOT
38168: IFFALSE 38178
// weapon := ru_time_lapser ;
38170: LD_ADDR_VAR 0 18
38174: PUSH
38175: LD_INT 49
38177: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38178: LD_VAR 0 12
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: IN
38193: PUSH
38194: LD_INT 11
38196: PUSH
38197: LD_VAR 0 5
38201: IN
38202: PUSH
38203: LD_INT 30
38205: PUSH
38206: LD_VAR 0 5
38210: IN
38211: OR
38212: AND
38213: PUSH
38214: LD_INT 6
38216: PPUSH
38217: LD_VAR 0 16
38221: PPUSH
38222: CALL_OW 321
38226: PUSH
38227: LD_INT 2
38229: EQUAL
38230: AND
38231: IFFALSE 38396
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38233: LD_INT 22
38235: PUSH
38236: LD_VAR 0 16
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 2
38247: PUSH
38248: LD_INT 35
38250: PUSH
38251: LD_INT 11
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 35
38260: PUSH
38261: LD_INT 30
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 91
38275: PUSH
38276: LD_VAR 0 1
38280: PUSH
38281: LD_INT 18
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: PPUSH
38294: CALL_OW 69
38298: NOT
38299: PUSH
38300: LD_INT 22
38302: PUSH
38303: LD_VAR 0 16
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 30
38317: PUSH
38318: LD_INT 32
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 30
38327: PUSH
38328: LD_INT 33
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 91
38342: PUSH
38343: LD_VAR 0 1
38347: PUSH
38348: LD_INT 12
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: PUSH
38361: EMPTY
38362: LIST
38363: PPUSH
38364: CALL_OW 69
38368: PUSH
38369: LD_INT 2
38371: GREATER
38372: AND
38373: IFFALSE 38396
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38375: LD_ADDR_VAR 0 18
38379: PUSH
38380: LD_INT 11
38382: PUSH
38383: LD_INT 30
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_VAR 0 12
38394: ARRAY
38395: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38396: LD_VAR 0 18
38400: NOT
38401: PUSH
38402: LD_INT 40
38404: PPUSH
38405: LD_VAR 0 16
38409: PPUSH
38410: CALL_OW 321
38414: PUSH
38415: LD_INT 2
38417: EQUAL
38418: AND
38419: PUSH
38420: LD_INT 7
38422: PUSH
38423: LD_VAR 0 5
38427: IN
38428: PUSH
38429: LD_INT 28
38431: PUSH
38432: LD_VAR 0 5
38436: IN
38437: OR
38438: PUSH
38439: LD_INT 45
38441: PUSH
38442: LD_VAR 0 5
38446: IN
38447: OR
38448: AND
38449: IFFALSE 38703
// begin hex := GetHexInfo ( x , y ) ;
38451: LD_ADDR_VAR 0 4
38455: PUSH
38456: LD_VAR 0 10
38460: PPUSH
38461: LD_VAR 0 11
38465: PPUSH
38466: CALL_OW 546
38470: ST_TO_ADDR
// if hex [ 1 ] then
38471: LD_VAR 0 4
38475: PUSH
38476: LD_INT 1
38478: ARRAY
38479: IFFALSE 38483
// exit ;
38481: GO 38886
// height := hex [ 2 ] ;
38483: LD_ADDR_VAR 0 15
38487: PUSH
38488: LD_VAR 0 4
38492: PUSH
38493: LD_INT 2
38495: ARRAY
38496: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38497: LD_ADDR_VAR 0 14
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: LD_INT 3
38510: PUSH
38511: LD_INT 5
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: ST_TO_ADDR
// for i in tmp do
38520: LD_ADDR_VAR 0 8
38524: PUSH
38525: LD_VAR 0 14
38529: PUSH
38530: FOR_IN
38531: IFFALSE 38701
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38533: LD_ADDR_VAR 0 9
38537: PUSH
38538: LD_VAR 0 10
38542: PPUSH
38543: LD_VAR 0 8
38547: PPUSH
38548: LD_INT 5
38550: PPUSH
38551: CALL_OW 272
38555: PUSH
38556: LD_VAR 0 11
38560: PPUSH
38561: LD_VAR 0 8
38565: PPUSH
38566: LD_INT 5
38568: PPUSH
38569: CALL_OW 273
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38578: LD_VAR 0 9
38582: PUSH
38583: LD_INT 1
38585: ARRAY
38586: PPUSH
38587: LD_VAR 0 9
38591: PUSH
38592: LD_INT 2
38594: ARRAY
38595: PPUSH
38596: CALL_OW 488
38600: IFFALSE 38699
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38602: LD_ADDR_VAR 0 4
38606: PUSH
38607: LD_VAR 0 9
38611: PUSH
38612: LD_INT 1
38614: ARRAY
38615: PPUSH
38616: LD_VAR 0 9
38620: PUSH
38621: LD_INT 2
38623: ARRAY
38624: PPUSH
38625: CALL_OW 546
38629: ST_TO_ADDR
// if hex [ 1 ] then
38630: LD_VAR 0 4
38634: PUSH
38635: LD_INT 1
38637: ARRAY
38638: IFFALSE 38642
// continue ;
38640: GO 38530
// h := hex [ 2 ] ;
38642: LD_ADDR_VAR 0 13
38646: PUSH
38647: LD_VAR 0 4
38651: PUSH
38652: LD_INT 2
38654: ARRAY
38655: ST_TO_ADDR
// if h + 7 < height then
38656: LD_VAR 0 13
38660: PUSH
38661: LD_INT 7
38663: PLUS
38664: PUSH
38665: LD_VAR 0 15
38669: LESS
38670: IFFALSE 38699
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38672: LD_ADDR_VAR 0 18
38676: PUSH
38677: LD_INT 7
38679: PUSH
38680: LD_INT 28
38682: PUSH
38683: LD_INT 45
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: LIST
38690: PUSH
38691: LD_VAR 0 12
38695: ARRAY
38696: ST_TO_ADDR
// break ;
38697: GO 38701
// end ; end ; end ;
38699: GO 38530
38701: POP
38702: POP
// end ; if not weapon then
38703: LD_VAR 0 18
38707: NOT
38708: IFFALSE 38768
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38710: LD_ADDR_VAR 0 5
38714: PUSH
38715: LD_VAR 0 5
38719: PUSH
38720: LD_INT 11
38722: PUSH
38723: LD_INT 30
38725: PUSH
38726: LD_INT 49
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: DIFF
38734: ST_TO_ADDR
// if not list then
38735: LD_VAR 0 5
38739: NOT
38740: IFFALSE 38744
// exit ;
38742: GO 38886
// weapon := list [ rand ( 1 , list ) ] ;
38744: LD_ADDR_VAR 0 18
38748: PUSH
38749: LD_VAR 0 5
38753: PUSH
38754: LD_INT 1
38756: PPUSH
38757: LD_VAR 0 5
38761: PPUSH
38762: CALL_OW 12
38766: ARRAY
38767: ST_TO_ADDR
// end ; if weapon then
38768: LD_VAR 0 18
38772: IFFALSE 38886
// begin tmp := CostOfWeapon ( weapon ) ;
38774: LD_ADDR_VAR 0 14
38778: PUSH
38779: LD_VAR 0 18
38783: PPUSH
38784: CALL_OW 451
38788: ST_TO_ADDR
// j := GetBase ( tower ) ;
38789: LD_ADDR_VAR 0 9
38793: PUSH
38794: LD_VAR 0 1
38798: PPUSH
38799: CALL_OW 274
38803: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38804: LD_VAR 0 9
38808: PPUSH
38809: LD_INT 1
38811: PPUSH
38812: CALL_OW 275
38816: PUSH
38817: LD_VAR 0 14
38821: PUSH
38822: LD_INT 1
38824: ARRAY
38825: GREATEREQUAL
38826: PUSH
38827: LD_VAR 0 9
38831: PPUSH
38832: LD_INT 2
38834: PPUSH
38835: CALL_OW 275
38839: PUSH
38840: LD_VAR 0 14
38844: PUSH
38845: LD_INT 2
38847: ARRAY
38848: GREATEREQUAL
38849: AND
38850: PUSH
38851: LD_VAR 0 9
38855: PPUSH
38856: LD_INT 3
38858: PPUSH
38859: CALL_OW 275
38863: PUSH
38864: LD_VAR 0 14
38868: PUSH
38869: LD_INT 3
38871: ARRAY
38872: GREATEREQUAL
38873: AND
38874: IFFALSE 38886
// result := weapon ;
38876: LD_ADDR_VAR 0 3
38880: PUSH
38881: LD_VAR 0 18
38885: ST_TO_ADDR
// end ; end ;
38886: LD_VAR 0 3
38890: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38891: LD_INT 0
38893: PPUSH
38894: PPUSH
// result := true ;
38895: LD_ADDR_VAR 0 3
38899: PUSH
38900: LD_INT 1
38902: ST_TO_ADDR
// if array1 = array2 then
38903: LD_VAR 0 1
38907: PUSH
38908: LD_VAR 0 2
38912: EQUAL
38913: IFFALSE 38973
// begin for i = 1 to array1 do
38915: LD_ADDR_VAR 0 4
38919: PUSH
38920: DOUBLE
38921: LD_INT 1
38923: DEC
38924: ST_TO_ADDR
38925: LD_VAR 0 1
38929: PUSH
38930: FOR_TO
38931: IFFALSE 38969
// if array1 [ i ] <> array2 [ i ] then
38933: LD_VAR 0 1
38937: PUSH
38938: LD_VAR 0 4
38942: ARRAY
38943: PUSH
38944: LD_VAR 0 2
38948: PUSH
38949: LD_VAR 0 4
38953: ARRAY
38954: NONEQUAL
38955: IFFALSE 38967
// begin result := false ;
38957: LD_ADDR_VAR 0 3
38961: PUSH
38962: LD_INT 0
38964: ST_TO_ADDR
// break ;
38965: GO 38969
// end ;
38967: GO 38930
38969: POP
38970: POP
// end else
38971: GO 38981
// result := false ;
38973: LD_ADDR_VAR 0 3
38977: PUSH
38978: LD_INT 0
38980: ST_TO_ADDR
// end ;
38981: LD_VAR 0 3
38985: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38986: LD_INT 0
38988: PPUSH
38989: PPUSH
// if not array1 or not array2 then
38990: LD_VAR 0 1
38994: NOT
38995: PUSH
38996: LD_VAR 0 2
39000: NOT
39001: OR
39002: IFFALSE 39006
// exit ;
39004: GO 39070
// result := true ;
39006: LD_ADDR_VAR 0 3
39010: PUSH
39011: LD_INT 1
39013: ST_TO_ADDR
// for i = 1 to array1 do
39014: LD_ADDR_VAR 0 4
39018: PUSH
39019: DOUBLE
39020: LD_INT 1
39022: DEC
39023: ST_TO_ADDR
39024: LD_VAR 0 1
39028: PUSH
39029: FOR_TO
39030: IFFALSE 39068
// if array1 [ i ] <> array2 [ i ] then
39032: LD_VAR 0 1
39036: PUSH
39037: LD_VAR 0 4
39041: ARRAY
39042: PUSH
39043: LD_VAR 0 2
39047: PUSH
39048: LD_VAR 0 4
39052: ARRAY
39053: NONEQUAL
39054: IFFALSE 39066
// begin result := false ;
39056: LD_ADDR_VAR 0 3
39060: PUSH
39061: LD_INT 0
39063: ST_TO_ADDR
// break ;
39064: GO 39068
// end ;
39066: GO 39029
39068: POP
39069: POP
// end ;
39070: LD_VAR 0 3
39074: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39075: LD_INT 0
39077: PPUSH
39078: PPUSH
39079: PPUSH
// pom := GetBase ( fac ) ;
39080: LD_ADDR_VAR 0 5
39084: PUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 274
39094: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39095: LD_ADDR_VAR 0 4
39099: PUSH
39100: LD_VAR 0 2
39104: PUSH
39105: LD_INT 1
39107: ARRAY
39108: PPUSH
39109: LD_VAR 0 2
39113: PUSH
39114: LD_INT 2
39116: ARRAY
39117: PPUSH
39118: LD_VAR 0 2
39122: PUSH
39123: LD_INT 3
39125: ARRAY
39126: PPUSH
39127: LD_VAR 0 2
39131: PUSH
39132: LD_INT 4
39134: ARRAY
39135: PPUSH
39136: CALL_OW 449
39140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39141: LD_ADDR_VAR 0 3
39145: PUSH
39146: LD_VAR 0 5
39150: PPUSH
39151: LD_INT 1
39153: PPUSH
39154: CALL_OW 275
39158: PUSH
39159: LD_VAR 0 4
39163: PUSH
39164: LD_INT 1
39166: ARRAY
39167: GREATEREQUAL
39168: PUSH
39169: LD_VAR 0 5
39173: PPUSH
39174: LD_INT 2
39176: PPUSH
39177: CALL_OW 275
39181: PUSH
39182: LD_VAR 0 4
39186: PUSH
39187: LD_INT 2
39189: ARRAY
39190: GREATEREQUAL
39191: AND
39192: PUSH
39193: LD_VAR 0 5
39197: PPUSH
39198: LD_INT 3
39200: PPUSH
39201: CALL_OW 275
39205: PUSH
39206: LD_VAR 0 4
39210: PUSH
39211: LD_INT 3
39213: ARRAY
39214: GREATEREQUAL
39215: AND
39216: ST_TO_ADDR
// end ;
39217: LD_VAR 0 3
39221: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39222: LD_INT 0
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
// pom := GetBase ( building ) ;
39228: LD_ADDR_VAR 0 3
39232: PUSH
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL_OW 274
39242: ST_TO_ADDR
// if not pom then
39243: LD_VAR 0 3
39247: NOT
39248: IFFALSE 39252
// exit ;
39250: GO 39422
// btype := GetBType ( building ) ;
39252: LD_ADDR_VAR 0 5
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL_OW 266
39266: ST_TO_ADDR
// if btype = b_armoury then
39267: LD_VAR 0 5
39271: PUSH
39272: LD_INT 4
39274: EQUAL
39275: IFFALSE 39285
// btype := b_barracks ;
39277: LD_ADDR_VAR 0 5
39281: PUSH
39282: LD_INT 5
39284: ST_TO_ADDR
// if btype = b_depot then
39285: LD_VAR 0 5
39289: PUSH
39290: LD_INT 0
39292: EQUAL
39293: IFFALSE 39303
// btype := b_warehouse ;
39295: LD_ADDR_VAR 0 5
39299: PUSH
39300: LD_INT 1
39302: ST_TO_ADDR
// if btype = b_workshop then
39303: LD_VAR 0 5
39307: PUSH
39308: LD_INT 2
39310: EQUAL
39311: IFFALSE 39321
// btype := b_factory ;
39313: LD_ADDR_VAR 0 5
39317: PUSH
39318: LD_INT 3
39320: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39321: LD_ADDR_VAR 0 4
39325: PUSH
39326: LD_VAR 0 5
39330: PPUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: CALL_OW 248
39340: PPUSH
39341: CALL_OW 450
39345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39346: LD_ADDR_VAR 0 2
39350: PUSH
39351: LD_VAR 0 3
39355: PPUSH
39356: LD_INT 1
39358: PPUSH
39359: CALL_OW 275
39363: PUSH
39364: LD_VAR 0 4
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: GREATEREQUAL
39373: PUSH
39374: LD_VAR 0 3
39378: PPUSH
39379: LD_INT 2
39381: PPUSH
39382: CALL_OW 275
39386: PUSH
39387: LD_VAR 0 4
39391: PUSH
39392: LD_INT 2
39394: ARRAY
39395: GREATEREQUAL
39396: AND
39397: PUSH
39398: LD_VAR 0 3
39402: PPUSH
39403: LD_INT 3
39405: PPUSH
39406: CALL_OW 275
39410: PUSH
39411: LD_VAR 0 4
39415: PUSH
39416: LD_INT 3
39418: ARRAY
39419: GREATEREQUAL
39420: AND
39421: ST_TO_ADDR
// end ;
39422: LD_VAR 0 2
39426: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39427: LD_INT 0
39429: PPUSH
39430: PPUSH
39431: PPUSH
// pom := GetBase ( building ) ;
39432: LD_ADDR_VAR 0 4
39436: PUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL_OW 274
39446: ST_TO_ADDR
// if not pom then
39447: LD_VAR 0 4
39451: NOT
39452: IFFALSE 39456
// exit ;
39454: GO 39557
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39456: LD_ADDR_VAR 0 5
39460: PUSH
39461: LD_VAR 0 2
39465: PPUSH
39466: LD_VAR 0 1
39470: PPUSH
39471: CALL_OW 248
39475: PPUSH
39476: CALL_OW 450
39480: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39481: LD_ADDR_VAR 0 3
39485: PUSH
39486: LD_VAR 0 4
39490: PPUSH
39491: LD_INT 1
39493: PPUSH
39494: CALL_OW 275
39498: PUSH
39499: LD_VAR 0 5
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: GREATEREQUAL
39508: PUSH
39509: LD_VAR 0 4
39513: PPUSH
39514: LD_INT 2
39516: PPUSH
39517: CALL_OW 275
39521: PUSH
39522: LD_VAR 0 5
39526: PUSH
39527: LD_INT 2
39529: ARRAY
39530: GREATEREQUAL
39531: AND
39532: PUSH
39533: LD_VAR 0 4
39537: PPUSH
39538: LD_INT 3
39540: PPUSH
39541: CALL_OW 275
39545: PUSH
39546: LD_VAR 0 5
39550: PUSH
39551: LD_INT 3
39553: ARRAY
39554: GREATEREQUAL
39555: AND
39556: ST_TO_ADDR
// end ;
39557: LD_VAR 0 3
39561: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39562: LD_INT 0
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
39569: PPUSH
39570: PPUSH
39571: PPUSH
39572: PPUSH
39573: PPUSH
39574: PPUSH
// result := false ;
39575: LD_ADDR_VAR 0 8
39579: PUSH
39580: LD_INT 0
39582: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39583: LD_VAR 0 5
39587: NOT
39588: PUSH
39589: LD_VAR 0 1
39593: NOT
39594: OR
39595: PUSH
39596: LD_VAR 0 2
39600: NOT
39601: OR
39602: PUSH
39603: LD_VAR 0 3
39607: NOT
39608: OR
39609: IFFALSE 39613
// exit ;
39611: GO 40427
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39613: LD_ADDR_VAR 0 14
39617: PUSH
39618: LD_VAR 0 1
39622: PPUSH
39623: LD_VAR 0 2
39627: PPUSH
39628: LD_VAR 0 3
39632: PPUSH
39633: LD_VAR 0 4
39637: PPUSH
39638: LD_VAR 0 5
39642: PUSH
39643: LD_INT 1
39645: ARRAY
39646: PPUSH
39647: CALL_OW 248
39651: PPUSH
39652: LD_INT 0
39654: PPUSH
39655: CALL 41664 0 6
39659: ST_TO_ADDR
// if not hexes then
39660: LD_VAR 0 14
39664: NOT
39665: IFFALSE 39669
// exit ;
39667: GO 40427
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39669: LD_ADDR_VAR 0 17
39673: PUSH
39674: LD_VAR 0 5
39678: PPUSH
39679: LD_INT 22
39681: PUSH
39682: LD_VAR 0 13
39686: PPUSH
39687: CALL_OW 255
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: LD_INT 30
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 30
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PPUSH
39728: CALL_OW 72
39732: ST_TO_ADDR
// for i = 1 to hexes do
39733: LD_ADDR_VAR 0 9
39737: PUSH
39738: DOUBLE
39739: LD_INT 1
39741: DEC
39742: ST_TO_ADDR
39743: LD_VAR 0 14
39747: PUSH
39748: FOR_TO
39749: IFFALSE 40425
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39751: LD_ADDR_VAR 0 13
39755: PUSH
39756: LD_VAR 0 14
39760: PUSH
39761: LD_VAR 0 9
39765: ARRAY
39766: PUSH
39767: LD_INT 1
39769: ARRAY
39770: PPUSH
39771: LD_VAR 0 14
39775: PUSH
39776: LD_VAR 0 9
39780: ARRAY
39781: PUSH
39782: LD_INT 2
39784: ARRAY
39785: PPUSH
39786: CALL_OW 428
39790: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39791: LD_VAR 0 14
39795: PUSH
39796: LD_VAR 0 9
39800: ARRAY
39801: PUSH
39802: LD_INT 1
39804: ARRAY
39805: PPUSH
39806: LD_VAR 0 14
39810: PUSH
39811: LD_VAR 0 9
39815: ARRAY
39816: PUSH
39817: LD_INT 2
39819: ARRAY
39820: PPUSH
39821: CALL_OW 351
39825: PUSH
39826: LD_VAR 0 14
39830: PUSH
39831: LD_VAR 0 9
39835: ARRAY
39836: PUSH
39837: LD_INT 1
39839: ARRAY
39840: PPUSH
39841: LD_VAR 0 14
39845: PUSH
39846: LD_VAR 0 9
39850: ARRAY
39851: PUSH
39852: LD_INT 2
39854: ARRAY
39855: PPUSH
39856: CALL_OW 488
39860: NOT
39861: OR
39862: PUSH
39863: LD_VAR 0 13
39867: PPUSH
39868: CALL_OW 247
39872: PUSH
39873: LD_INT 3
39875: EQUAL
39876: OR
39877: IFFALSE 39883
// exit ;
39879: POP
39880: POP
39881: GO 40427
// if not tmp then
39883: LD_VAR 0 13
39887: NOT
39888: IFFALSE 39892
// continue ;
39890: GO 39748
// result := true ;
39892: LD_ADDR_VAR 0 8
39896: PUSH
39897: LD_INT 1
39899: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39900: LD_VAR 0 6
39904: PUSH
39905: LD_VAR 0 13
39909: PPUSH
39910: CALL_OW 247
39914: PUSH
39915: LD_INT 2
39917: EQUAL
39918: AND
39919: PUSH
39920: LD_VAR 0 13
39924: PPUSH
39925: CALL_OW 263
39929: PUSH
39930: LD_INT 1
39932: EQUAL
39933: AND
39934: IFFALSE 40098
// begin if IsDrivenBy ( tmp ) then
39936: LD_VAR 0 13
39940: PPUSH
39941: CALL_OW 311
39945: IFFALSE 39949
// continue ;
39947: GO 39748
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39949: LD_VAR 0 6
39953: PPUSH
39954: LD_INT 3
39956: PUSH
39957: LD_INT 60
39959: PUSH
39960: EMPTY
39961: LIST
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 3
39969: PUSH
39970: LD_INT 55
39972: PUSH
39973: EMPTY
39974: LIST
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PPUSH
39984: CALL_OW 72
39988: IFFALSE 40096
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39990: LD_ADDR_VAR 0 18
39994: PUSH
39995: LD_VAR 0 6
39999: PPUSH
40000: LD_INT 3
40002: PUSH
40003: LD_INT 60
40005: PUSH
40006: EMPTY
40007: LIST
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 3
40015: PUSH
40016: LD_INT 55
40018: PUSH
40019: EMPTY
40020: LIST
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PPUSH
40030: CALL_OW 72
40034: PUSH
40035: LD_INT 1
40037: ARRAY
40038: ST_TO_ADDR
// if IsInUnit ( driver ) then
40039: LD_VAR 0 18
40043: PPUSH
40044: CALL_OW 310
40048: IFFALSE 40059
// ComExit ( driver ) ;
40050: LD_VAR 0 18
40054: PPUSH
40055: CALL 64848 0 1
// AddComEnterUnit ( driver , tmp ) ;
40059: LD_VAR 0 18
40063: PPUSH
40064: LD_VAR 0 13
40068: PPUSH
40069: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40073: LD_VAR 0 18
40077: PPUSH
40078: LD_VAR 0 7
40082: PPUSH
40083: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40087: LD_VAR 0 18
40091: PPUSH
40092: CALL_OW 181
// end ; continue ;
40096: GO 39748
// end ; if not cleaners or not tmp in cleaners then
40098: LD_VAR 0 6
40102: NOT
40103: PUSH
40104: LD_VAR 0 13
40108: PUSH
40109: LD_VAR 0 6
40113: IN
40114: NOT
40115: OR
40116: IFFALSE 40423
// begin if dep then
40118: LD_VAR 0 17
40122: IFFALSE 40258
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40124: LD_ADDR_VAR 0 16
40128: PUSH
40129: LD_VAR 0 17
40133: PUSH
40134: LD_INT 1
40136: ARRAY
40137: PPUSH
40138: CALL_OW 250
40142: PPUSH
40143: LD_VAR 0 17
40147: PUSH
40148: LD_INT 1
40150: ARRAY
40151: PPUSH
40152: CALL_OW 254
40156: PPUSH
40157: LD_INT 5
40159: PPUSH
40160: CALL_OW 272
40164: PUSH
40165: LD_VAR 0 17
40169: PUSH
40170: LD_INT 1
40172: ARRAY
40173: PPUSH
40174: CALL_OW 251
40178: PPUSH
40179: LD_VAR 0 17
40183: PUSH
40184: LD_INT 1
40186: ARRAY
40187: PPUSH
40188: CALL_OW 254
40192: PPUSH
40193: LD_INT 5
40195: PPUSH
40196: CALL_OW 273
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40205: LD_VAR 0 16
40209: PUSH
40210: LD_INT 1
40212: ARRAY
40213: PPUSH
40214: LD_VAR 0 16
40218: PUSH
40219: LD_INT 2
40221: ARRAY
40222: PPUSH
40223: CALL_OW 488
40227: IFFALSE 40258
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40229: LD_VAR 0 13
40233: PPUSH
40234: LD_VAR 0 16
40238: PUSH
40239: LD_INT 1
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 16
40247: PUSH
40248: LD_INT 2
40250: ARRAY
40251: PPUSH
40252: CALL_OW 111
// continue ;
40256: GO 39748
// end ; end ; r := GetDir ( tmp ) ;
40258: LD_ADDR_VAR 0 15
40262: PUSH
40263: LD_VAR 0 13
40267: PPUSH
40268: CALL_OW 254
40272: ST_TO_ADDR
// if r = 5 then
40273: LD_VAR 0 15
40277: PUSH
40278: LD_INT 5
40280: EQUAL
40281: IFFALSE 40291
// r := 0 ;
40283: LD_ADDR_VAR 0 15
40287: PUSH
40288: LD_INT 0
40290: ST_TO_ADDR
// for j = r to 5 do
40291: LD_ADDR_VAR 0 10
40295: PUSH
40296: DOUBLE
40297: LD_VAR 0 15
40301: DEC
40302: ST_TO_ADDR
40303: LD_INT 5
40305: PUSH
40306: FOR_TO
40307: IFFALSE 40421
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40309: LD_ADDR_VAR 0 11
40313: PUSH
40314: LD_VAR 0 13
40318: PPUSH
40319: CALL_OW 250
40323: PPUSH
40324: LD_VAR 0 10
40328: PPUSH
40329: LD_INT 2
40331: PPUSH
40332: CALL_OW 272
40336: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40337: LD_ADDR_VAR 0 12
40341: PUSH
40342: LD_VAR 0 13
40346: PPUSH
40347: CALL_OW 251
40351: PPUSH
40352: LD_VAR 0 10
40356: PPUSH
40357: LD_INT 2
40359: PPUSH
40360: CALL_OW 273
40364: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40365: LD_VAR 0 11
40369: PPUSH
40370: LD_VAR 0 12
40374: PPUSH
40375: CALL_OW 488
40379: PUSH
40380: LD_VAR 0 11
40384: PPUSH
40385: LD_VAR 0 12
40389: PPUSH
40390: CALL_OW 428
40394: NOT
40395: AND
40396: IFFALSE 40419
// begin ComMoveXY ( tmp , _x , _y ) ;
40398: LD_VAR 0 13
40402: PPUSH
40403: LD_VAR 0 11
40407: PPUSH
40408: LD_VAR 0 12
40412: PPUSH
40413: CALL_OW 111
// break ;
40417: GO 40421
// end ; end ;
40419: GO 40306
40421: POP
40422: POP
// end ; end ;
40423: GO 39748
40425: POP
40426: POP
// end ;
40427: LD_VAR 0 8
40431: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40432: LD_INT 0
40434: PPUSH
// result := true ;
40435: LD_ADDR_VAR 0 3
40439: PUSH
40440: LD_INT 1
40442: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40443: LD_VAR 0 2
40447: PUSH
40448: LD_INT 24
40450: DOUBLE
40451: EQUAL
40452: IFTRUE 40462
40454: LD_INT 33
40456: DOUBLE
40457: EQUAL
40458: IFTRUE 40462
40460: GO 40487
40462: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40463: LD_ADDR_VAR 0 3
40467: PUSH
40468: LD_INT 32
40470: PPUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: CALL_OW 321
40480: PUSH
40481: LD_INT 2
40483: EQUAL
40484: ST_TO_ADDR
40485: GO 40807
40487: LD_INT 20
40489: DOUBLE
40490: EQUAL
40491: IFTRUE 40495
40493: GO 40520
40495: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40496: LD_ADDR_VAR 0 3
40500: PUSH
40501: LD_INT 6
40503: PPUSH
40504: LD_VAR 0 1
40508: PPUSH
40509: CALL_OW 321
40513: PUSH
40514: LD_INT 2
40516: EQUAL
40517: ST_TO_ADDR
40518: GO 40807
40520: LD_INT 22
40522: DOUBLE
40523: EQUAL
40524: IFTRUE 40534
40526: LD_INT 36
40528: DOUBLE
40529: EQUAL
40530: IFTRUE 40534
40532: GO 40559
40534: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40535: LD_ADDR_VAR 0 3
40539: PUSH
40540: LD_INT 15
40542: PPUSH
40543: LD_VAR 0 1
40547: PPUSH
40548: CALL_OW 321
40552: PUSH
40553: LD_INT 2
40555: EQUAL
40556: ST_TO_ADDR
40557: GO 40807
40559: LD_INT 30
40561: DOUBLE
40562: EQUAL
40563: IFTRUE 40567
40565: GO 40592
40567: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40568: LD_ADDR_VAR 0 3
40572: PUSH
40573: LD_INT 20
40575: PPUSH
40576: LD_VAR 0 1
40580: PPUSH
40581: CALL_OW 321
40585: PUSH
40586: LD_INT 2
40588: EQUAL
40589: ST_TO_ADDR
40590: GO 40807
40592: LD_INT 28
40594: DOUBLE
40595: EQUAL
40596: IFTRUE 40606
40598: LD_INT 21
40600: DOUBLE
40601: EQUAL
40602: IFTRUE 40606
40604: GO 40631
40606: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40607: LD_ADDR_VAR 0 3
40611: PUSH
40612: LD_INT 21
40614: PPUSH
40615: LD_VAR 0 1
40619: PPUSH
40620: CALL_OW 321
40624: PUSH
40625: LD_INT 2
40627: EQUAL
40628: ST_TO_ADDR
40629: GO 40807
40631: LD_INT 16
40633: DOUBLE
40634: EQUAL
40635: IFTRUE 40639
40637: GO 40666
40639: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40640: LD_ADDR_VAR 0 3
40644: PUSH
40645: LD_EXP 125
40649: PPUSH
40650: LD_VAR 0 1
40654: PPUSH
40655: CALL_OW 321
40659: PUSH
40660: LD_INT 2
40662: EQUAL
40663: ST_TO_ADDR
40664: GO 40807
40666: LD_INT 19
40668: DOUBLE
40669: EQUAL
40670: IFTRUE 40680
40672: LD_INT 23
40674: DOUBLE
40675: EQUAL
40676: IFTRUE 40680
40678: GO 40707
40680: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40681: LD_ADDR_VAR 0 3
40685: PUSH
40686: LD_EXP 124
40690: PPUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL_OW 321
40700: PUSH
40701: LD_INT 2
40703: EQUAL
40704: ST_TO_ADDR
40705: GO 40807
40707: LD_INT 17
40709: DOUBLE
40710: EQUAL
40711: IFTRUE 40715
40713: GO 40740
40715: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40716: LD_ADDR_VAR 0 3
40720: PUSH
40721: LD_INT 39
40723: PPUSH
40724: LD_VAR 0 1
40728: PPUSH
40729: CALL_OW 321
40733: PUSH
40734: LD_INT 2
40736: EQUAL
40737: ST_TO_ADDR
40738: GO 40807
40740: LD_INT 18
40742: DOUBLE
40743: EQUAL
40744: IFTRUE 40748
40746: GO 40773
40748: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40749: LD_ADDR_VAR 0 3
40753: PUSH
40754: LD_INT 40
40756: PPUSH
40757: LD_VAR 0 1
40761: PPUSH
40762: CALL_OW 321
40766: PUSH
40767: LD_INT 2
40769: EQUAL
40770: ST_TO_ADDR
40771: GO 40807
40773: LD_INT 27
40775: DOUBLE
40776: EQUAL
40777: IFTRUE 40781
40779: GO 40806
40781: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40782: LD_ADDR_VAR 0 3
40786: PUSH
40787: LD_INT 35
40789: PPUSH
40790: LD_VAR 0 1
40794: PPUSH
40795: CALL_OW 321
40799: PUSH
40800: LD_INT 2
40802: EQUAL
40803: ST_TO_ADDR
40804: GO 40807
40806: POP
// end ;
40807: LD_VAR 0 3
40811: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40812: LD_INT 0
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
40818: PPUSH
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
// result := false ;
40825: LD_ADDR_VAR 0 6
40829: PUSH
40830: LD_INT 0
40832: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40833: LD_VAR 0 1
40837: NOT
40838: PUSH
40839: LD_VAR 0 1
40843: PPUSH
40844: CALL_OW 266
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: IN
40859: NOT
40860: OR
40861: PUSH
40862: LD_VAR 0 2
40866: NOT
40867: OR
40868: PUSH
40869: LD_VAR 0 5
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: LD_INT 3
40885: PUSH
40886: LD_INT 4
40888: PUSH
40889: LD_INT 5
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: IN
40900: NOT
40901: OR
40902: PUSH
40903: LD_VAR 0 3
40907: PPUSH
40908: LD_VAR 0 4
40912: PPUSH
40913: CALL_OW 488
40917: NOT
40918: OR
40919: IFFALSE 40923
// exit ;
40921: GO 41659
// side := GetSide ( depot ) ;
40923: LD_ADDR_VAR 0 9
40927: PUSH
40928: LD_VAR 0 1
40932: PPUSH
40933: CALL_OW 255
40937: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40938: LD_VAR 0 9
40942: PPUSH
40943: LD_VAR 0 2
40947: PPUSH
40948: CALL 40432 0 2
40952: NOT
40953: IFFALSE 40957
// exit ;
40955: GO 41659
// pom := GetBase ( depot ) ;
40957: LD_ADDR_VAR 0 10
40961: PUSH
40962: LD_VAR 0 1
40966: PPUSH
40967: CALL_OW 274
40971: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40972: LD_ADDR_VAR 0 11
40976: PUSH
40977: LD_VAR 0 2
40981: PPUSH
40982: LD_VAR 0 1
40986: PPUSH
40987: CALL_OW 248
40991: PPUSH
40992: CALL_OW 450
40996: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40997: LD_VAR 0 10
41001: PPUSH
41002: LD_INT 1
41004: PPUSH
41005: CALL_OW 275
41009: PUSH
41010: LD_VAR 0 11
41014: PUSH
41015: LD_INT 1
41017: ARRAY
41018: GREATEREQUAL
41019: PUSH
41020: LD_VAR 0 10
41024: PPUSH
41025: LD_INT 2
41027: PPUSH
41028: CALL_OW 275
41032: PUSH
41033: LD_VAR 0 11
41037: PUSH
41038: LD_INT 2
41040: ARRAY
41041: GREATEREQUAL
41042: AND
41043: PUSH
41044: LD_VAR 0 10
41048: PPUSH
41049: LD_INT 3
41051: PPUSH
41052: CALL_OW 275
41056: PUSH
41057: LD_VAR 0 11
41061: PUSH
41062: LD_INT 3
41064: ARRAY
41065: GREATEREQUAL
41066: AND
41067: NOT
41068: IFFALSE 41072
// exit ;
41070: GO 41659
// if GetBType ( depot ) = b_depot then
41072: LD_VAR 0 1
41076: PPUSH
41077: CALL_OW 266
41081: PUSH
41082: LD_INT 0
41084: EQUAL
41085: IFFALSE 41097
// dist := 28 else
41087: LD_ADDR_VAR 0 14
41091: PUSH
41092: LD_INT 28
41094: ST_TO_ADDR
41095: GO 41105
// dist := 36 ;
41097: LD_ADDR_VAR 0 14
41101: PUSH
41102: LD_INT 36
41104: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41105: LD_VAR 0 1
41109: PPUSH
41110: LD_VAR 0 3
41114: PPUSH
41115: LD_VAR 0 4
41119: PPUSH
41120: CALL_OW 297
41124: PUSH
41125: LD_VAR 0 14
41129: GREATER
41130: IFFALSE 41134
// exit ;
41132: GO 41659
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41134: LD_ADDR_VAR 0 12
41138: PUSH
41139: LD_VAR 0 2
41143: PPUSH
41144: LD_VAR 0 3
41148: PPUSH
41149: LD_VAR 0 4
41153: PPUSH
41154: LD_VAR 0 5
41158: PPUSH
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 248
41168: PPUSH
41169: LD_INT 0
41171: PPUSH
41172: CALL 41664 0 6
41176: ST_TO_ADDR
// if not hexes then
41177: LD_VAR 0 12
41181: NOT
41182: IFFALSE 41186
// exit ;
41184: GO 41659
// hex := GetHexInfo ( x , y ) ;
41186: LD_ADDR_VAR 0 15
41190: PUSH
41191: LD_VAR 0 3
41195: PPUSH
41196: LD_VAR 0 4
41200: PPUSH
41201: CALL_OW 546
41205: ST_TO_ADDR
// if hex [ 1 ] then
41206: LD_VAR 0 15
41210: PUSH
41211: LD_INT 1
41213: ARRAY
41214: IFFALSE 41218
// exit ;
41216: GO 41659
// height := hex [ 2 ] ;
41218: LD_ADDR_VAR 0 13
41222: PUSH
41223: LD_VAR 0 15
41227: PUSH
41228: LD_INT 2
41230: ARRAY
41231: ST_TO_ADDR
// for i = 1 to hexes do
41232: LD_ADDR_VAR 0 7
41236: PUSH
41237: DOUBLE
41238: LD_INT 1
41240: DEC
41241: ST_TO_ADDR
41242: LD_VAR 0 12
41246: PUSH
41247: FOR_TO
41248: IFFALSE 41578
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41250: LD_VAR 0 12
41254: PUSH
41255: LD_VAR 0 7
41259: ARRAY
41260: PUSH
41261: LD_INT 1
41263: ARRAY
41264: PPUSH
41265: LD_VAR 0 12
41269: PUSH
41270: LD_VAR 0 7
41274: ARRAY
41275: PUSH
41276: LD_INT 2
41278: ARRAY
41279: PPUSH
41280: CALL_OW 488
41284: NOT
41285: PUSH
41286: LD_VAR 0 12
41290: PUSH
41291: LD_VAR 0 7
41295: ARRAY
41296: PUSH
41297: LD_INT 1
41299: ARRAY
41300: PPUSH
41301: LD_VAR 0 12
41305: PUSH
41306: LD_VAR 0 7
41310: ARRAY
41311: PUSH
41312: LD_INT 2
41314: ARRAY
41315: PPUSH
41316: CALL_OW 428
41320: PUSH
41321: LD_INT 0
41323: GREATER
41324: OR
41325: PUSH
41326: LD_VAR 0 12
41330: PUSH
41331: LD_VAR 0 7
41335: ARRAY
41336: PUSH
41337: LD_INT 1
41339: ARRAY
41340: PPUSH
41341: LD_VAR 0 12
41345: PUSH
41346: LD_VAR 0 7
41350: ARRAY
41351: PUSH
41352: LD_INT 2
41354: ARRAY
41355: PPUSH
41356: CALL_OW 351
41360: OR
41361: IFFALSE 41367
// exit ;
41363: POP
41364: POP
41365: GO 41659
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41367: LD_ADDR_VAR 0 8
41371: PUSH
41372: LD_VAR 0 12
41376: PUSH
41377: LD_VAR 0 7
41381: ARRAY
41382: PUSH
41383: LD_INT 1
41385: ARRAY
41386: PPUSH
41387: LD_VAR 0 12
41391: PUSH
41392: LD_VAR 0 7
41396: ARRAY
41397: PUSH
41398: LD_INT 2
41400: ARRAY
41401: PPUSH
41402: CALL_OW 546
41406: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41407: LD_VAR 0 8
41411: PUSH
41412: LD_INT 1
41414: ARRAY
41415: PUSH
41416: LD_VAR 0 8
41420: PUSH
41421: LD_INT 2
41423: ARRAY
41424: PUSH
41425: LD_VAR 0 13
41429: PUSH
41430: LD_INT 2
41432: PLUS
41433: GREATER
41434: OR
41435: PUSH
41436: LD_VAR 0 8
41440: PUSH
41441: LD_INT 2
41443: ARRAY
41444: PUSH
41445: LD_VAR 0 13
41449: PUSH
41450: LD_INT 2
41452: MINUS
41453: LESS
41454: OR
41455: PUSH
41456: LD_VAR 0 8
41460: PUSH
41461: LD_INT 3
41463: ARRAY
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 8
41470: PUSH
41471: LD_INT 9
41473: PUSH
41474: LD_INT 10
41476: PUSH
41477: LD_INT 11
41479: PUSH
41480: LD_INT 12
41482: PUSH
41483: LD_INT 13
41485: PUSH
41486: LD_INT 16
41488: PUSH
41489: LD_INT 17
41491: PUSH
41492: LD_INT 18
41494: PUSH
41495: LD_INT 19
41497: PUSH
41498: LD_INT 20
41500: PUSH
41501: LD_INT 21
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: IN
41519: NOT
41520: OR
41521: PUSH
41522: LD_VAR 0 8
41526: PUSH
41527: LD_INT 5
41529: ARRAY
41530: NOT
41531: OR
41532: PUSH
41533: LD_VAR 0 8
41537: PUSH
41538: LD_INT 6
41540: ARRAY
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 7
41550: PUSH
41551: LD_INT 9
41553: PUSH
41554: LD_INT 10
41556: PUSH
41557: LD_INT 11
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: IN
41568: NOT
41569: OR
41570: IFFALSE 41576
// exit ;
41572: POP
41573: POP
41574: GO 41659
// end ;
41576: GO 41247
41578: POP
41579: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41580: LD_VAR 0 9
41584: PPUSH
41585: LD_VAR 0 3
41589: PPUSH
41590: LD_VAR 0 4
41594: PPUSH
41595: LD_INT 20
41597: PPUSH
41598: CALL 33605 0 4
41602: PUSH
41603: LD_INT 4
41605: ARRAY
41606: IFFALSE 41610
// exit ;
41608: GO 41659
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41610: LD_VAR 0 2
41614: PUSH
41615: LD_INT 29
41617: PUSH
41618: LD_INT 30
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: IN
41625: PUSH
41626: LD_VAR 0 3
41630: PPUSH
41631: LD_VAR 0 4
41635: PPUSH
41636: LD_VAR 0 9
41640: PPUSH
41641: CALL_OW 440
41645: NOT
41646: AND
41647: IFFALSE 41651
// exit ;
41649: GO 41659
// result := true ;
41651: LD_ADDR_VAR 0 6
41655: PUSH
41656: LD_INT 1
41658: ST_TO_ADDR
// end ;
41659: LD_VAR 0 6
41663: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41664: LD_INT 0
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
41714: PPUSH
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
41721: PPUSH
41722: PPUSH
41723: PPUSH
// result = [ ] ;
41724: LD_ADDR_VAR 0 7
41728: PUSH
41729: EMPTY
41730: ST_TO_ADDR
// temp_list = [ ] ;
41731: LD_ADDR_VAR 0 9
41735: PUSH
41736: EMPTY
41737: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41738: LD_VAR 0 4
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: LD_INT 3
41754: PUSH
41755: LD_INT 4
41757: PUSH
41758: LD_INT 5
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: IN
41769: NOT
41770: PUSH
41771: LD_VAR 0 1
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: IN
41786: PUSH
41787: LD_VAR 0 5
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 3
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: LIST
41805: IN
41806: NOT
41807: AND
41808: OR
41809: IFFALSE 41813
// exit ;
41811: GO 60204
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41813: LD_VAR 0 1
41817: PUSH
41818: LD_INT 6
41820: PUSH
41821: LD_INT 7
41823: PUSH
41824: LD_INT 8
41826: PUSH
41827: LD_INT 13
41829: PUSH
41830: LD_INT 12
41832: PUSH
41833: LD_INT 15
41835: PUSH
41836: LD_INT 11
41838: PUSH
41839: LD_INT 14
41841: PUSH
41842: LD_INT 10
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: IN
41856: IFFALSE 41866
// btype = b_lab ;
41858: LD_ADDR_VAR 0 1
41862: PUSH
41863: LD_INT 6
41865: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41866: LD_VAR 0 6
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: LIST
41884: IN
41885: NOT
41886: PUSH
41887: LD_VAR 0 1
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: LD_INT 6
41906: PUSH
41907: LD_INT 36
41909: PUSH
41910: LD_INT 4
41912: PUSH
41913: LD_INT 5
41915: PUSH
41916: LD_INT 31
41918: PUSH
41919: LD_INT 32
41921: PUSH
41922: LD_INT 33
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: IN
41938: NOT
41939: PUSH
41940: LD_VAR 0 6
41944: PUSH
41945: LD_INT 1
41947: EQUAL
41948: AND
41949: OR
41950: PUSH
41951: LD_VAR 0 1
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 3
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: IN
41966: NOT
41967: PUSH
41968: LD_VAR 0 6
41972: PUSH
41973: LD_INT 2
41975: EQUAL
41976: AND
41977: OR
41978: IFFALSE 41988
// mode = 0 ;
41980: LD_ADDR_VAR 0 6
41984: PUSH
41985: LD_INT 0
41987: ST_TO_ADDR
// case mode of 0 :
41988: LD_VAR 0 6
41992: PUSH
41993: LD_INT 0
41995: DOUBLE
41996: EQUAL
41997: IFTRUE 42001
41999: GO 53454
42001: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42002: LD_ADDR_VAR 0 11
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 2
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 3
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42195: LD_ADDR_VAR 0 12
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 3
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42391: LD_ADDR_VAR 0 13
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: LD_INT 2
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: LD_INT 3
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 3
42550: NEG
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 3
42562: NEG
42563: PUSH
42564: LD_INT 3
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42590: LD_ADDR_VAR 0 14
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: LD_INT 3
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42786: LD_ADDR_VAR 0 15
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 3
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 3
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42979: LD_ADDR_VAR 0 16
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: NEG
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: LD_INT 2
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 3
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 3
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43172: LD_ADDR_VAR 0 17
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: LD_INT 2
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43402: LD_ADDR_VAR 0 18
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: NEG
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: LD_INT 2
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43632: LD_ADDR_VAR 0 19
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: NEG
43832: PUSH
43833: LD_INT 2
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43862: LD_ADDR_VAR 0 20
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: NEG
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44092: LD_ADDR_VAR 0 21
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44322: LD_ADDR_VAR 0 22
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44552: LD_ADDR_VAR 0 23
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 3
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44832: LD_ADDR_VAR 0 24
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 3
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45108: LD_ADDR_VAR 0 25
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 3
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45382: LD_ADDR_VAR 0 26
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 3
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45658: LD_ADDR_VAR 0 27
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: LD_INT 2
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 3
45903: NEG
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45938: LD_ADDR_VAR 0 28
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 2
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 3
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 3
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 3
46185: NEG
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46220: LD_ADDR_VAR 0 29
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 2
46410: NEG
46411: PUSH
46412: LD_INT 3
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 3
46464: NEG
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46499: LD_ADDR_VAR 0 30
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 2
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 3
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 3
46742: NEG
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46777: LD_ADDR_VAR 0 31
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 3
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 3
47020: NEG
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47055: LD_ADDR_VAR 0 32
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 3
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 3
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 3
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 3
47298: NEG
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47333: LD_ADDR_VAR 0 33
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 3
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 3
47577: NEG
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47612: LD_ADDR_VAR 0 34
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 3
47857: NEG
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47892: LD_ADDR_VAR 0 35
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48004: LD_ADDR_VAR 0 36
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48116: LD_ADDR_VAR 0 37
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48228: LD_ADDR_VAR 0 38
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48340: LD_ADDR_VAR 0 39
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48452: LD_ADDR_VAR 0 40
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48564: LD_ADDR_VAR 0 41
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: NEG
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 3
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 3
48797: PUSH
48798: LD_INT 2
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: LD_INT 3
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: LD_INT 3
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: NEG
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 3
48873: NEG
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48914: LD_ADDR_VAR 0 42
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: LD_INT 3
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: LD_INT 3
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 3
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 3
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 3
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 3
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 3
49211: NEG
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: NEG
49224: PUSH
49225: LD_INT 3
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49264: LD_ADDR_VAR 0 43
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 3
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 3
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 3
49560: NEG
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49612: LD_ADDR_VAR 0 44
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 3
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 3
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 3
49897: NEG
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 3
49921: NEG
49922: PUSH
49923: LD_INT 3
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49962: LD_ADDR_VAR 0 45
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 3
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 3
50259: NEG
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 3
50271: NEG
50272: PUSH
50273: LD_INT 3
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50312: LD_ADDR_VAR 0 46
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 3
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50660: LD_ADDR_VAR 0 47
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50811: LD_ADDR_VAR 0 48
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50958: LD_ADDR_VAR 0 49
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51102: LD_ADDR_VAR 0 50
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51246: LD_ADDR_VAR 0 51
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51393: LD_ADDR_VAR 0 52
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51544: LD_ADDR_VAR 0 53
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51774: LD_ADDR_VAR 0 54
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52004: LD_ADDR_VAR 0 55
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52234: LD_ADDR_VAR 0 56
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52464: LD_ADDR_VAR 0 57
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52694: LD_ADDR_VAR 0 58
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52924: LD_ADDR_VAR 0 59
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53012: LD_ADDR_VAR 0 60
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53100: LD_ADDR_VAR 0 61
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53188: LD_ADDR_VAR 0 62
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53276: LD_ADDR_VAR 0 63
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53364: LD_ADDR_VAR 0 64
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: ST_TO_ADDR
// end ; 1 :
53452: GO 59349
53454: LD_INT 1
53456: DOUBLE
53457: EQUAL
53458: IFTRUE 53462
53460: GO 56085
53462: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53463: LD_ADDR_VAR 0 11
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 3
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53507: LD_ADDR_VAR 0 12
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53548: LD_ADDR_VAR 0 13
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53588: LD_ADDR_VAR 0 14
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53629: LD_ADDR_VAR 0 15
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 3
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53673: LD_ADDR_VAR 0 16
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53719: LD_ADDR_VAR 0 17
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 3
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53763: LD_ADDR_VAR 0 18
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53804: LD_ADDR_VAR 0 19
53808: PUSH
53809: LD_INT 3
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: LIST
53843: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53844: LD_ADDR_VAR 0 20
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 3
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53885: LD_ADDR_VAR 0 21
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 3
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: LIST
53928: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53929: LD_ADDR_VAR 0 22
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 3
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53975: LD_ADDR_VAR 0 23
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 3
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 4
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 3
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54019: LD_ADDR_VAR 0 24
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 4
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54060: LD_ADDR_VAR 0 25
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: LD_INT 3
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 4
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 3
54087: PUSH
54088: LD_INT 4
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: LIST
54099: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54100: LD_ADDR_VAR 0 26
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 4
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54141: LD_ADDR_VAR 0 27
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 4
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54185: LD_ADDR_VAR 0 28
54189: PUSH
54190: LD_INT 3
54192: NEG
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: LD_INT 4
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 4
54216: NEG
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54231: LD_ADDR_VAR 0 29
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 4
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 4
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 5
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 5
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 4
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 6
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 6
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 5
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54386: LD_ADDR_VAR 0 30
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 3
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 4
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 4
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 4
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 5
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 5
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 5
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 6
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 6
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54529: LD_ADDR_VAR 0 31
54533: PUSH
54534: LD_INT 3
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: LD_INT 3
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 4
54566: PUSH
54567: LD_INT 3
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 4
54576: PUSH
54577: LD_INT 4
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: LD_INT 4
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 5
54596: PUSH
54597: LD_INT 4
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 5
54606: PUSH
54607: LD_INT 5
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 4
54616: PUSH
54617: LD_INT 5
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 6
54626: PUSH
54627: LD_INT 5
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 6
54636: PUSH
54637: LD_INT 6
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 5
54646: PUSH
54647: LD_INT 6
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54668: LD_ADDR_VAR 0 32
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 4
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 4
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 5
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 5
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 4
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 6
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 6
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 5
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54811: LD_ADDR_VAR 0 33
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 3
54829: NEG
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 4
54863: NEG
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 4
54874: NEG
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 4
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 5
54897: NEG
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 5
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 5
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 6
54931: NEG
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 6
54942: NEG
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54966: LD_ADDR_VAR 0 34
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: LD_INT 3
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 3
54997: NEG
54998: PUSH
54999: LD_INT 3
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 3
55009: NEG
55010: PUSH
55011: LD_INT 4
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 4
55021: NEG
55022: PUSH
55023: LD_INT 3
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: LD_INT 4
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 4
55045: NEG
55046: PUSH
55047: LD_INT 5
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 5
55057: NEG
55058: PUSH
55059: LD_INT 4
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 5
55069: NEG
55070: PUSH
55071: LD_INT 5
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 5
55081: NEG
55082: PUSH
55083: LD_INT 6
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 6
55093: NEG
55094: PUSH
55095: LD_INT 5
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 6
55105: NEG
55106: PUSH
55107: LD_INT 6
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55129: LD_ADDR_VAR 0 41
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55173: LD_ADDR_VAR 0 42
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55214: LD_ADDR_VAR 0 43
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: LIST
55253: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55254: LD_ADDR_VAR 0 44
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 3
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: LIST
55294: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55295: LD_ADDR_VAR 0 45
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: LIST
55338: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55339: LD_ADDR_VAR 0 46
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: LD_INT 3
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55385: LD_ADDR_VAR 0 47
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: LD_INT 3
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 3
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55418: LD_ADDR_VAR 0 48
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55449: LD_ADDR_VAR 0 49
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55478: LD_ADDR_VAR 0 50
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55507: LD_ADDR_VAR 0 51
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55538: LD_ADDR_VAR 0 52
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55571: LD_ADDR_VAR 0 53
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: LIST
55614: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55615: LD_ADDR_VAR 0 54
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 3
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 3
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55656: LD_ADDR_VAR 0 55
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55696: LD_ADDR_VAR 0 56
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55737: LD_ADDR_VAR 0 57
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: NEG
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55781: LD_ADDR_VAR 0 58
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55827: LD_ADDR_VAR 0 59
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: LIST
55870: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55871: LD_ADDR_VAR 0 60
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55912: LD_ADDR_VAR 0 61
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55952: LD_ADDR_VAR 0 62
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55993: LD_ADDR_VAR 0 63
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56037: LD_ADDR_VAR 0 64
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// end ; 2 :
56083: GO 59349
56085: LD_INT 2
56087: DOUBLE
56088: EQUAL
56089: IFTRUE 56093
56091: GO 59348
56093: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56094: LD_ADDR_VAR 0 29
56098: PUSH
56099: LD_INT 4
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 4
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 5
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 5
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 4
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 3
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 5
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 4
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 4
56224: PUSH
56225: LD_INT 4
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: LD_INT 4
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 4
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 4
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 4
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 5
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 5
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 4
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 5
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 3
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 3
56377: NEG
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 3
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 3
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 4
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 4
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 4
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 4
56479: NEG
56480: PUSH
56481: LD_INT 4
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 4
56491: NEG
56492: PUSH
56493: LD_INT 5
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: LD_INT 4
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 4
56527: NEG
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 5
56539: NEG
56540: PUSH
56541: LD_INT 4
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 5
56551: NEG
56552: PUSH
56553: LD_INT 5
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: LD_INT 5
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 5
56575: NEG
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56632: LD_ADDR_VAR 0 30
56636: PUSH
56637: LD_INT 4
56639: PUSH
56640: LD_INT 4
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 4
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 5
56659: PUSH
56660: LD_INT 4
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 5
56669: PUSH
56670: LD_INT 5
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 4
56679: PUSH
56680: LD_INT 5
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 3
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 5
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: LD_INT 5
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 3
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 4
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 4
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 3
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 4
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: LD_INT 2
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 4
56822: NEG
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 4
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 3
56845: NEG
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: NEG
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 4
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 5
56878: NEG
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 5
56889: NEG
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 5
56901: NEG
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: LD_INT 3
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: LD_INT 4
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 3
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 4
56984: NEG
56985: PUSH
56986: LD_INT 3
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 4
56996: NEG
56997: PUSH
56998: LD_INT 4
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 4
57020: NEG
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 4
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 5
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 4
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 4
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 5
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: LD_INT 5
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57179: LD_ADDR_VAR 0 31
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 4
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 3
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 4
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 5
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 5
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 4
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 3
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 5
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 2
57268: NEG
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: NEG
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 4
57335: NEG
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 4
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 4
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 4
57381: NEG
57382: PUSH
57383: LD_INT 4
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 4
57393: NEG
57394: PUSH
57395: LD_INT 5
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: LD_INT 4
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 3
57417: NEG
57418: PUSH
57419: LD_INT 3
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 4
57429: NEG
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 5
57441: NEG
57442: PUSH
57443: LD_INT 4
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 5
57453: NEG
57454: PUSH
57455: LD_INT 5
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: LD_INT 5
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 5
57477: NEG
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 4
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: LD_INT 4
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: LD_INT 4
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 4
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 4
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 5
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 5
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 4
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 3
57663: PUSH
57664: LD_INT 2
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 5
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57729: LD_ADDR_VAR 0 32
57733: PUSH
57734: LD_INT 4
57736: NEG
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 4
57747: NEG
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 4
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 5
57792: NEG
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 5
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 5
57815: NEG
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: LD_INT 3
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 3
57850: NEG
57851: PUSH
57852: LD_INT 4
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: LD_INT 3
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 4
57898: NEG
57899: PUSH
57900: LD_INT 3
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 4
57910: NEG
57911: PUSH
57912: LD_INT 4
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: LD_INT 4
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 4
57934: NEG
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 4
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 5
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 4
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 3
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 3
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: LD_INT 4
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: LD_INT 5
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: LD_INT 3
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: LD_INT 5
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 3
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 3
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 4
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 4
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 4
58141: PUSH
58142: LD_INT 4
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 4
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 5
58161: PUSH
58162: LD_INT 4
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 5
58171: PUSH
58172: LD_INT 5
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 4
58181: PUSH
58182: LD_INT 5
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: LD_INT 4
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 5
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: LD_INT 5
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58276: LD_ADDR_VAR 0 33
58280: PUSH
58281: LD_INT 4
58283: NEG
58284: PUSH
58285: LD_INT 4
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 4
58295: NEG
58296: PUSH
58297: LD_INT 5
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: LD_INT 4
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 3
58319: NEG
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 4
58331: NEG
58332: PUSH
58333: LD_INT 3
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 5
58343: NEG
58344: PUSH
58345: LD_INT 4
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 5
58355: NEG
58356: PUSH
58357: LD_INT 5
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 3
58367: NEG
58368: PUSH
58369: LD_INT 5
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 5
58379: NEG
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 3
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 4
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: LD_INT 3
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 4
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 4
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 4
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 5
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 5
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 4
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 5
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: LD_INT 3
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 4
58606: PUSH
58607: LD_INT 3
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 4
58616: PUSH
58617: LD_INT 4
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: LD_INT 4
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 4
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: LD_INT 4
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 4
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 4
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 5
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 5
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: LD_INT 5
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: LD_INT 3
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58814: LD_ADDR_VAR 0 34
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 4
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 5
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 4
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 3
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 3
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 4
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 5
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 5
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 4
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 4
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 4
59006: PUSH
59007: LD_INT 2
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 4
59016: PUSH
59017: LD_INT 4
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 4
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 5
59036: PUSH
59037: LD_INT 4
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 5
59046: PUSH
59047: LD_INT 5
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 4
59056: PUSH
59057: LD_INT 5
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: LD_INT 4
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 3
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 5
59086: PUSH
59087: LD_INT 3
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: LD_INT 5
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 4
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 4
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: LD_INT 4
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 4
59199: NEG
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: NEG
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 4
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 5
59255: NEG
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 5
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 5
59278: NEG
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: NEG
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// end ; end ;
59346: GO 59349
59348: POP
// case btype of b_depot , b_warehouse :
59349: LD_VAR 0 1
59353: PUSH
59354: LD_INT 0
59356: DOUBLE
59357: EQUAL
59358: IFTRUE 59368
59360: LD_INT 1
59362: DOUBLE
59363: EQUAL
59364: IFTRUE 59368
59366: GO 59569
59368: POP
// case nation of nation_american :
59369: LD_VAR 0 5
59373: PUSH
59374: LD_INT 1
59376: DOUBLE
59377: EQUAL
59378: IFTRUE 59382
59380: GO 59438
59382: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59383: LD_ADDR_VAR 0 9
59387: PUSH
59388: LD_VAR 0 11
59392: PUSH
59393: LD_VAR 0 12
59397: PUSH
59398: LD_VAR 0 13
59402: PUSH
59403: LD_VAR 0 14
59407: PUSH
59408: LD_VAR 0 15
59412: PUSH
59413: LD_VAR 0 16
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: PUSH
59426: LD_VAR 0 4
59430: PUSH
59431: LD_INT 1
59433: PLUS
59434: ARRAY
59435: ST_TO_ADDR
59436: GO 59567
59438: LD_INT 2
59440: DOUBLE
59441: EQUAL
59442: IFTRUE 59446
59444: GO 59502
59446: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59447: LD_ADDR_VAR 0 9
59451: PUSH
59452: LD_VAR 0 17
59456: PUSH
59457: LD_VAR 0 18
59461: PUSH
59462: LD_VAR 0 19
59466: PUSH
59467: LD_VAR 0 20
59471: PUSH
59472: LD_VAR 0 21
59476: PUSH
59477: LD_VAR 0 22
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: PUSH
59490: LD_VAR 0 4
59494: PUSH
59495: LD_INT 1
59497: PLUS
59498: ARRAY
59499: ST_TO_ADDR
59500: GO 59567
59502: LD_INT 3
59504: DOUBLE
59505: EQUAL
59506: IFTRUE 59510
59508: GO 59566
59510: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59511: LD_ADDR_VAR 0 9
59515: PUSH
59516: LD_VAR 0 23
59520: PUSH
59521: LD_VAR 0 24
59525: PUSH
59526: LD_VAR 0 25
59530: PUSH
59531: LD_VAR 0 26
59535: PUSH
59536: LD_VAR 0 27
59540: PUSH
59541: LD_VAR 0 28
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: PUSH
59554: LD_VAR 0 4
59558: PUSH
59559: LD_INT 1
59561: PLUS
59562: ARRAY
59563: ST_TO_ADDR
59564: GO 59567
59566: POP
59567: GO 60122
59569: LD_INT 2
59571: DOUBLE
59572: EQUAL
59573: IFTRUE 59583
59575: LD_INT 3
59577: DOUBLE
59578: EQUAL
59579: IFTRUE 59583
59581: GO 59639
59583: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59584: LD_ADDR_VAR 0 9
59588: PUSH
59589: LD_VAR 0 29
59593: PUSH
59594: LD_VAR 0 30
59598: PUSH
59599: LD_VAR 0 31
59603: PUSH
59604: LD_VAR 0 32
59608: PUSH
59609: LD_VAR 0 33
59613: PUSH
59614: LD_VAR 0 34
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: PUSH
59627: LD_VAR 0 4
59631: PUSH
59632: LD_INT 1
59634: PLUS
59635: ARRAY
59636: ST_TO_ADDR
59637: GO 60122
59639: LD_INT 16
59641: DOUBLE
59642: EQUAL
59643: IFTRUE 59701
59645: LD_INT 17
59647: DOUBLE
59648: EQUAL
59649: IFTRUE 59701
59651: LD_INT 18
59653: DOUBLE
59654: EQUAL
59655: IFTRUE 59701
59657: LD_INT 19
59659: DOUBLE
59660: EQUAL
59661: IFTRUE 59701
59663: LD_INT 22
59665: DOUBLE
59666: EQUAL
59667: IFTRUE 59701
59669: LD_INT 20
59671: DOUBLE
59672: EQUAL
59673: IFTRUE 59701
59675: LD_INT 21
59677: DOUBLE
59678: EQUAL
59679: IFTRUE 59701
59681: LD_INT 23
59683: DOUBLE
59684: EQUAL
59685: IFTRUE 59701
59687: LD_INT 24
59689: DOUBLE
59690: EQUAL
59691: IFTRUE 59701
59693: LD_INT 25
59695: DOUBLE
59696: EQUAL
59697: IFTRUE 59701
59699: GO 59757
59701: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59702: LD_ADDR_VAR 0 9
59706: PUSH
59707: LD_VAR 0 35
59711: PUSH
59712: LD_VAR 0 36
59716: PUSH
59717: LD_VAR 0 37
59721: PUSH
59722: LD_VAR 0 38
59726: PUSH
59727: LD_VAR 0 39
59731: PUSH
59732: LD_VAR 0 40
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: PUSH
59745: LD_VAR 0 4
59749: PUSH
59750: LD_INT 1
59752: PLUS
59753: ARRAY
59754: ST_TO_ADDR
59755: GO 60122
59757: LD_INT 6
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59813
59763: LD_INT 7
59765: DOUBLE
59766: EQUAL
59767: IFTRUE 59813
59769: LD_INT 8
59771: DOUBLE
59772: EQUAL
59773: IFTRUE 59813
59775: LD_INT 13
59777: DOUBLE
59778: EQUAL
59779: IFTRUE 59813
59781: LD_INT 12
59783: DOUBLE
59784: EQUAL
59785: IFTRUE 59813
59787: LD_INT 15
59789: DOUBLE
59790: EQUAL
59791: IFTRUE 59813
59793: LD_INT 11
59795: DOUBLE
59796: EQUAL
59797: IFTRUE 59813
59799: LD_INT 14
59801: DOUBLE
59802: EQUAL
59803: IFTRUE 59813
59805: LD_INT 10
59807: DOUBLE
59808: EQUAL
59809: IFTRUE 59813
59811: GO 59869
59813: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59814: LD_ADDR_VAR 0 9
59818: PUSH
59819: LD_VAR 0 41
59823: PUSH
59824: LD_VAR 0 42
59828: PUSH
59829: LD_VAR 0 43
59833: PUSH
59834: LD_VAR 0 44
59838: PUSH
59839: LD_VAR 0 45
59843: PUSH
59844: LD_VAR 0 46
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: PUSH
59857: LD_VAR 0 4
59861: PUSH
59862: LD_INT 1
59864: PLUS
59865: ARRAY
59866: ST_TO_ADDR
59867: GO 60122
59869: LD_INT 36
59871: DOUBLE
59872: EQUAL
59873: IFTRUE 59877
59875: GO 59933
59877: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59878: LD_ADDR_VAR 0 9
59882: PUSH
59883: LD_VAR 0 47
59887: PUSH
59888: LD_VAR 0 48
59892: PUSH
59893: LD_VAR 0 49
59897: PUSH
59898: LD_VAR 0 50
59902: PUSH
59903: LD_VAR 0 51
59907: PUSH
59908: LD_VAR 0 52
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: PUSH
59921: LD_VAR 0 4
59925: PUSH
59926: LD_INT 1
59928: PLUS
59929: ARRAY
59930: ST_TO_ADDR
59931: GO 60122
59933: LD_INT 4
59935: DOUBLE
59936: EQUAL
59937: IFTRUE 59959
59939: LD_INT 5
59941: DOUBLE
59942: EQUAL
59943: IFTRUE 59959
59945: LD_INT 34
59947: DOUBLE
59948: EQUAL
59949: IFTRUE 59959
59951: LD_INT 37
59953: DOUBLE
59954: EQUAL
59955: IFTRUE 59959
59957: GO 60015
59959: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59960: LD_ADDR_VAR 0 9
59964: PUSH
59965: LD_VAR 0 53
59969: PUSH
59970: LD_VAR 0 54
59974: PUSH
59975: LD_VAR 0 55
59979: PUSH
59980: LD_VAR 0 56
59984: PUSH
59985: LD_VAR 0 57
59989: PUSH
59990: LD_VAR 0 58
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: PUSH
60003: LD_VAR 0 4
60007: PUSH
60008: LD_INT 1
60010: PLUS
60011: ARRAY
60012: ST_TO_ADDR
60013: GO 60122
60015: LD_INT 31
60017: DOUBLE
60018: EQUAL
60019: IFTRUE 60065
60021: LD_INT 32
60023: DOUBLE
60024: EQUAL
60025: IFTRUE 60065
60027: LD_INT 33
60029: DOUBLE
60030: EQUAL
60031: IFTRUE 60065
60033: LD_INT 27
60035: DOUBLE
60036: EQUAL
60037: IFTRUE 60065
60039: LD_INT 26
60041: DOUBLE
60042: EQUAL
60043: IFTRUE 60065
60045: LD_INT 28
60047: DOUBLE
60048: EQUAL
60049: IFTRUE 60065
60051: LD_INT 29
60053: DOUBLE
60054: EQUAL
60055: IFTRUE 60065
60057: LD_INT 30
60059: DOUBLE
60060: EQUAL
60061: IFTRUE 60065
60063: GO 60121
60065: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60066: LD_ADDR_VAR 0 9
60070: PUSH
60071: LD_VAR 0 59
60075: PUSH
60076: LD_VAR 0 60
60080: PUSH
60081: LD_VAR 0 61
60085: PUSH
60086: LD_VAR 0 62
60090: PUSH
60091: LD_VAR 0 63
60095: PUSH
60096: LD_VAR 0 64
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: PUSH
60109: LD_VAR 0 4
60113: PUSH
60114: LD_INT 1
60116: PLUS
60117: ARRAY
60118: ST_TO_ADDR
60119: GO 60122
60121: POP
// temp_list2 = [ ] ;
60122: LD_ADDR_VAR 0 10
60126: PUSH
60127: EMPTY
60128: ST_TO_ADDR
// for i in temp_list do
60129: LD_ADDR_VAR 0 8
60133: PUSH
60134: LD_VAR 0 9
60138: PUSH
60139: FOR_IN
60140: IFFALSE 60192
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60142: LD_ADDR_VAR 0 10
60146: PUSH
60147: LD_VAR 0 10
60151: PUSH
60152: LD_VAR 0 8
60156: PUSH
60157: LD_INT 1
60159: ARRAY
60160: PUSH
60161: LD_VAR 0 2
60165: PLUS
60166: PUSH
60167: LD_VAR 0 8
60171: PUSH
60172: LD_INT 2
60174: ARRAY
60175: PUSH
60176: LD_VAR 0 3
60180: PLUS
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: EMPTY
60187: LIST
60188: ADD
60189: ST_TO_ADDR
60190: GO 60139
60192: POP
60193: POP
// result = temp_list2 ;
60194: LD_ADDR_VAR 0 7
60198: PUSH
60199: LD_VAR 0 10
60203: ST_TO_ADDR
// end ;
60204: LD_VAR 0 7
60208: RET
// export function EnemyInRange ( unit , dist ) ; begin
60209: LD_INT 0
60211: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60212: LD_ADDR_VAR 0 3
60216: PUSH
60217: LD_VAR 0 1
60221: PPUSH
60222: CALL_OW 255
60226: PPUSH
60227: LD_VAR 0 1
60231: PPUSH
60232: CALL_OW 250
60236: PPUSH
60237: LD_VAR 0 1
60241: PPUSH
60242: CALL_OW 251
60246: PPUSH
60247: LD_VAR 0 2
60251: PPUSH
60252: CALL 33605 0 4
60256: PUSH
60257: LD_INT 4
60259: ARRAY
60260: ST_TO_ADDR
// end ;
60261: LD_VAR 0 3
60265: RET
// export function PlayerSeeMe ( unit ) ; begin
60266: LD_INT 0
60268: PPUSH
// result := See ( your_side , unit ) ;
60269: LD_ADDR_VAR 0 2
60273: PUSH
60274: LD_OWVAR 2
60278: PPUSH
60279: LD_VAR 0 1
60283: PPUSH
60284: CALL_OW 292
60288: ST_TO_ADDR
// end ;
60289: LD_VAR 0 2
60293: RET
// export function ReverseDir ( unit ) ; begin
60294: LD_INT 0
60296: PPUSH
// if not unit then
60297: LD_VAR 0 1
60301: NOT
60302: IFFALSE 60306
// exit ;
60304: GO 60329
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60306: LD_ADDR_VAR 0 2
60310: PUSH
60311: LD_VAR 0 1
60315: PPUSH
60316: CALL_OW 254
60320: PUSH
60321: LD_INT 3
60323: PLUS
60324: PUSH
60325: LD_INT 6
60327: MOD
60328: ST_TO_ADDR
// end ;
60329: LD_VAR 0 2
60333: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60334: LD_INT 0
60336: PPUSH
60337: PPUSH
60338: PPUSH
60339: PPUSH
60340: PPUSH
// if not hexes then
60341: LD_VAR 0 2
60345: NOT
60346: IFFALSE 60350
// exit ;
60348: GO 60498
// dist := 9999 ;
60350: LD_ADDR_VAR 0 5
60354: PUSH
60355: LD_INT 9999
60357: ST_TO_ADDR
// for i = 1 to hexes do
60358: LD_ADDR_VAR 0 4
60362: PUSH
60363: DOUBLE
60364: LD_INT 1
60366: DEC
60367: ST_TO_ADDR
60368: LD_VAR 0 2
60372: PUSH
60373: FOR_TO
60374: IFFALSE 60486
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60376: LD_VAR 0 1
60380: PPUSH
60381: LD_VAR 0 2
60385: PUSH
60386: LD_VAR 0 4
60390: ARRAY
60391: PUSH
60392: LD_INT 1
60394: ARRAY
60395: PPUSH
60396: LD_VAR 0 2
60400: PUSH
60401: LD_VAR 0 4
60405: ARRAY
60406: PUSH
60407: LD_INT 2
60409: ARRAY
60410: PPUSH
60411: CALL_OW 297
60415: PUSH
60416: LD_VAR 0 5
60420: LESS
60421: IFFALSE 60484
// begin hex := hexes [ i ] ;
60423: LD_ADDR_VAR 0 7
60427: PUSH
60428: LD_VAR 0 2
60432: PUSH
60433: LD_VAR 0 4
60437: ARRAY
60438: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60439: LD_ADDR_VAR 0 5
60443: PUSH
60444: LD_VAR 0 1
60448: PPUSH
60449: LD_VAR 0 2
60453: PUSH
60454: LD_VAR 0 4
60458: ARRAY
60459: PUSH
60460: LD_INT 1
60462: ARRAY
60463: PPUSH
60464: LD_VAR 0 2
60468: PUSH
60469: LD_VAR 0 4
60473: ARRAY
60474: PUSH
60475: LD_INT 2
60477: ARRAY
60478: PPUSH
60479: CALL_OW 297
60483: ST_TO_ADDR
// end ; end ;
60484: GO 60373
60486: POP
60487: POP
// result := hex ;
60488: LD_ADDR_VAR 0 3
60492: PUSH
60493: LD_VAR 0 7
60497: ST_TO_ADDR
// end ;
60498: LD_VAR 0 3
60502: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60503: LD_INT 0
60505: PPUSH
60506: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60507: LD_VAR 0 1
60511: NOT
60512: PUSH
60513: LD_VAR 0 1
60517: PUSH
60518: LD_INT 21
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 23
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PPUSH
60542: CALL_OW 69
60546: IN
60547: NOT
60548: OR
60549: IFFALSE 60553
// exit ;
60551: GO 60600
// for i = 1 to 3 do
60553: LD_ADDR_VAR 0 3
60557: PUSH
60558: DOUBLE
60559: LD_INT 1
60561: DEC
60562: ST_TO_ADDR
60563: LD_INT 3
60565: PUSH
60566: FOR_TO
60567: IFFALSE 60598
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60569: LD_VAR 0 1
60573: PPUSH
60574: CALL_OW 250
60578: PPUSH
60579: LD_VAR 0 1
60583: PPUSH
60584: CALL_OW 251
60588: PPUSH
60589: LD_INT 1
60591: PPUSH
60592: CALL_OW 453
60596: GO 60566
60598: POP
60599: POP
// end ;
60600: LD_VAR 0 2
60604: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60605: LD_INT 0
60607: PPUSH
60608: PPUSH
60609: PPUSH
60610: PPUSH
60611: PPUSH
60612: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60613: LD_VAR 0 1
60617: NOT
60618: PUSH
60619: LD_VAR 0 2
60623: NOT
60624: OR
60625: PUSH
60626: LD_VAR 0 1
60630: PPUSH
60631: CALL_OW 314
60635: OR
60636: IFFALSE 60640
// exit ;
60638: GO 61081
// x := GetX ( enemy_unit ) ;
60640: LD_ADDR_VAR 0 7
60644: PUSH
60645: LD_VAR 0 2
60649: PPUSH
60650: CALL_OW 250
60654: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60655: LD_ADDR_VAR 0 8
60659: PUSH
60660: LD_VAR 0 2
60664: PPUSH
60665: CALL_OW 251
60669: ST_TO_ADDR
// if not x or not y then
60670: LD_VAR 0 7
60674: NOT
60675: PUSH
60676: LD_VAR 0 8
60680: NOT
60681: OR
60682: IFFALSE 60686
// exit ;
60684: GO 61081
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60686: LD_ADDR_VAR 0 6
60690: PUSH
60691: LD_VAR 0 7
60695: PPUSH
60696: LD_INT 0
60698: PPUSH
60699: LD_INT 4
60701: PPUSH
60702: CALL_OW 272
60706: PUSH
60707: LD_VAR 0 8
60711: PPUSH
60712: LD_INT 0
60714: PPUSH
60715: LD_INT 4
60717: PPUSH
60718: CALL_OW 273
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_VAR 0 7
60731: PPUSH
60732: LD_INT 1
60734: PPUSH
60735: LD_INT 4
60737: PPUSH
60738: CALL_OW 272
60742: PUSH
60743: LD_VAR 0 8
60747: PPUSH
60748: LD_INT 1
60750: PPUSH
60751: LD_INT 4
60753: PPUSH
60754: CALL_OW 273
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_VAR 0 7
60767: PPUSH
60768: LD_INT 2
60770: PPUSH
60771: LD_INT 4
60773: PPUSH
60774: CALL_OW 272
60778: PUSH
60779: LD_VAR 0 8
60783: PPUSH
60784: LD_INT 2
60786: PPUSH
60787: LD_INT 4
60789: PPUSH
60790: CALL_OW 273
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_VAR 0 7
60803: PPUSH
60804: LD_INT 3
60806: PPUSH
60807: LD_INT 4
60809: PPUSH
60810: CALL_OW 272
60814: PUSH
60815: LD_VAR 0 8
60819: PPUSH
60820: LD_INT 3
60822: PPUSH
60823: LD_INT 4
60825: PPUSH
60826: CALL_OW 273
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_VAR 0 7
60839: PPUSH
60840: LD_INT 4
60842: PPUSH
60843: LD_INT 4
60845: PPUSH
60846: CALL_OW 272
60850: PUSH
60851: LD_VAR 0 8
60855: PPUSH
60856: LD_INT 4
60858: PPUSH
60859: LD_INT 4
60861: PPUSH
60862: CALL_OW 273
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_VAR 0 7
60875: PPUSH
60876: LD_INT 5
60878: PPUSH
60879: LD_INT 4
60881: PPUSH
60882: CALL_OW 272
60886: PUSH
60887: LD_VAR 0 8
60891: PPUSH
60892: LD_INT 5
60894: PPUSH
60895: LD_INT 4
60897: PPUSH
60898: CALL_OW 273
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: ST_TO_ADDR
// for i = tmp downto 1 do
60915: LD_ADDR_VAR 0 4
60919: PUSH
60920: DOUBLE
60921: LD_VAR 0 6
60925: INC
60926: ST_TO_ADDR
60927: LD_INT 1
60929: PUSH
60930: FOR_DOWNTO
60931: IFFALSE 61032
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60933: LD_VAR 0 6
60937: PUSH
60938: LD_VAR 0 4
60942: ARRAY
60943: PUSH
60944: LD_INT 1
60946: ARRAY
60947: PPUSH
60948: LD_VAR 0 6
60952: PUSH
60953: LD_VAR 0 4
60957: ARRAY
60958: PUSH
60959: LD_INT 2
60961: ARRAY
60962: PPUSH
60963: CALL_OW 488
60967: NOT
60968: PUSH
60969: LD_VAR 0 6
60973: PUSH
60974: LD_VAR 0 4
60978: ARRAY
60979: PUSH
60980: LD_INT 1
60982: ARRAY
60983: PPUSH
60984: LD_VAR 0 6
60988: PUSH
60989: LD_VAR 0 4
60993: ARRAY
60994: PUSH
60995: LD_INT 2
60997: ARRAY
60998: PPUSH
60999: CALL_OW 428
61003: PUSH
61004: LD_INT 0
61006: NONEQUAL
61007: OR
61008: IFFALSE 61030
// tmp := Delete ( tmp , i ) ;
61010: LD_ADDR_VAR 0 6
61014: PUSH
61015: LD_VAR 0 6
61019: PPUSH
61020: LD_VAR 0 4
61024: PPUSH
61025: CALL_OW 3
61029: ST_TO_ADDR
61030: GO 60930
61032: POP
61033: POP
// j := GetClosestHex ( unit , tmp ) ;
61034: LD_ADDR_VAR 0 5
61038: PUSH
61039: LD_VAR 0 1
61043: PPUSH
61044: LD_VAR 0 6
61048: PPUSH
61049: CALL 60334 0 2
61053: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61054: LD_VAR 0 1
61058: PPUSH
61059: LD_VAR 0 5
61063: PUSH
61064: LD_INT 1
61066: ARRAY
61067: PPUSH
61068: LD_VAR 0 5
61072: PUSH
61073: LD_INT 2
61075: ARRAY
61076: PPUSH
61077: CALL_OW 111
// end ;
61081: LD_VAR 0 3
61085: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61086: LD_INT 0
61088: PPUSH
61089: PPUSH
61090: PPUSH
// uc_side = 0 ;
61091: LD_ADDR_OWVAR 20
61095: PUSH
61096: LD_INT 0
61098: ST_TO_ADDR
// uc_nation = 0 ;
61099: LD_ADDR_OWVAR 21
61103: PUSH
61104: LD_INT 0
61106: ST_TO_ADDR
// InitHc_All ( ) ;
61107: CALL_OW 584
// InitVc ;
61111: CALL_OW 20
// if mastodonts then
61115: LD_VAR 0 6
61119: IFFALSE 61186
// for i = 1 to mastodonts do
61121: LD_ADDR_VAR 0 11
61125: PUSH
61126: DOUBLE
61127: LD_INT 1
61129: DEC
61130: ST_TO_ADDR
61131: LD_VAR 0 6
61135: PUSH
61136: FOR_TO
61137: IFFALSE 61184
// begin vc_chassis := 31 ;
61139: LD_ADDR_OWVAR 37
61143: PUSH
61144: LD_INT 31
61146: ST_TO_ADDR
// vc_control := control_rider ;
61147: LD_ADDR_OWVAR 38
61151: PUSH
61152: LD_INT 4
61154: ST_TO_ADDR
// animal := CreateVehicle ;
61155: LD_ADDR_VAR 0 12
61159: PUSH
61160: CALL_OW 45
61164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61165: LD_VAR 0 12
61169: PPUSH
61170: LD_VAR 0 8
61174: PPUSH
61175: LD_INT 0
61177: PPUSH
61178: CALL 63374 0 3
// end ;
61182: GO 61136
61184: POP
61185: POP
// if horses then
61186: LD_VAR 0 5
61190: IFFALSE 61257
// for i = 1 to horses do
61192: LD_ADDR_VAR 0 11
61196: PUSH
61197: DOUBLE
61198: LD_INT 1
61200: DEC
61201: ST_TO_ADDR
61202: LD_VAR 0 5
61206: PUSH
61207: FOR_TO
61208: IFFALSE 61255
// begin hc_class := 21 ;
61210: LD_ADDR_OWVAR 28
61214: PUSH
61215: LD_INT 21
61217: ST_TO_ADDR
// hc_gallery :=  ;
61218: LD_ADDR_OWVAR 33
61222: PUSH
61223: LD_STRING 
61225: ST_TO_ADDR
// animal := CreateHuman ;
61226: LD_ADDR_VAR 0 12
61230: PUSH
61231: CALL_OW 44
61235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61236: LD_VAR 0 12
61240: PPUSH
61241: LD_VAR 0 8
61245: PPUSH
61246: LD_INT 0
61248: PPUSH
61249: CALL 63374 0 3
// end ;
61253: GO 61207
61255: POP
61256: POP
// if birds then
61257: LD_VAR 0 1
61261: IFFALSE 61328
// for i = 1 to birds do
61263: LD_ADDR_VAR 0 11
61267: PUSH
61268: DOUBLE
61269: LD_INT 1
61271: DEC
61272: ST_TO_ADDR
61273: LD_VAR 0 1
61277: PUSH
61278: FOR_TO
61279: IFFALSE 61326
// begin hc_class = 18 ;
61281: LD_ADDR_OWVAR 28
61285: PUSH
61286: LD_INT 18
61288: ST_TO_ADDR
// hc_gallery =  ;
61289: LD_ADDR_OWVAR 33
61293: PUSH
61294: LD_STRING 
61296: ST_TO_ADDR
// animal := CreateHuman ;
61297: LD_ADDR_VAR 0 12
61301: PUSH
61302: CALL_OW 44
61306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61307: LD_VAR 0 12
61311: PPUSH
61312: LD_VAR 0 8
61316: PPUSH
61317: LD_INT 0
61319: PPUSH
61320: CALL 63374 0 3
// end ;
61324: GO 61278
61326: POP
61327: POP
// if tigers then
61328: LD_VAR 0 2
61332: IFFALSE 61416
// for i = 1 to tigers do
61334: LD_ADDR_VAR 0 11
61338: PUSH
61339: DOUBLE
61340: LD_INT 1
61342: DEC
61343: ST_TO_ADDR
61344: LD_VAR 0 2
61348: PUSH
61349: FOR_TO
61350: IFFALSE 61414
// begin hc_class = class_tiger ;
61352: LD_ADDR_OWVAR 28
61356: PUSH
61357: LD_INT 14
61359: ST_TO_ADDR
// hc_gallery =  ;
61360: LD_ADDR_OWVAR 33
61364: PUSH
61365: LD_STRING 
61367: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61368: LD_ADDR_OWVAR 35
61372: PUSH
61373: LD_INT 7
61375: NEG
61376: PPUSH
61377: LD_INT 7
61379: PPUSH
61380: CALL_OW 12
61384: ST_TO_ADDR
// animal := CreateHuman ;
61385: LD_ADDR_VAR 0 12
61389: PUSH
61390: CALL_OW 44
61394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61395: LD_VAR 0 12
61399: PPUSH
61400: LD_VAR 0 8
61404: PPUSH
61405: LD_INT 0
61407: PPUSH
61408: CALL 63374 0 3
// end ;
61412: GO 61349
61414: POP
61415: POP
// if apemans then
61416: LD_VAR 0 3
61420: IFFALSE 61543
// for i = 1 to apemans do
61422: LD_ADDR_VAR 0 11
61426: PUSH
61427: DOUBLE
61428: LD_INT 1
61430: DEC
61431: ST_TO_ADDR
61432: LD_VAR 0 3
61436: PUSH
61437: FOR_TO
61438: IFFALSE 61541
// begin hc_class = class_apeman ;
61440: LD_ADDR_OWVAR 28
61444: PUSH
61445: LD_INT 12
61447: ST_TO_ADDR
// hc_gallery =  ;
61448: LD_ADDR_OWVAR 33
61452: PUSH
61453: LD_STRING 
61455: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61456: LD_ADDR_OWVAR 35
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PPUSH
61465: LD_INT 2
61467: PPUSH
61468: CALL_OW 12
61472: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61473: LD_ADDR_OWVAR 31
61477: PUSH
61478: LD_INT 1
61480: PPUSH
61481: LD_INT 3
61483: PPUSH
61484: CALL_OW 12
61488: PUSH
61489: LD_INT 1
61491: PPUSH
61492: LD_INT 3
61494: PPUSH
61495: CALL_OW 12
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: ST_TO_ADDR
// animal := CreateHuman ;
61512: LD_ADDR_VAR 0 12
61516: PUSH
61517: CALL_OW 44
61521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61522: LD_VAR 0 12
61526: PPUSH
61527: LD_VAR 0 8
61531: PPUSH
61532: LD_INT 0
61534: PPUSH
61535: CALL 63374 0 3
// end ;
61539: GO 61437
61541: POP
61542: POP
// if enchidnas then
61543: LD_VAR 0 4
61547: IFFALSE 61614
// for i = 1 to enchidnas do
61549: LD_ADDR_VAR 0 11
61553: PUSH
61554: DOUBLE
61555: LD_INT 1
61557: DEC
61558: ST_TO_ADDR
61559: LD_VAR 0 4
61563: PUSH
61564: FOR_TO
61565: IFFALSE 61612
// begin hc_class = 13 ;
61567: LD_ADDR_OWVAR 28
61571: PUSH
61572: LD_INT 13
61574: ST_TO_ADDR
// hc_gallery =  ;
61575: LD_ADDR_OWVAR 33
61579: PUSH
61580: LD_STRING 
61582: ST_TO_ADDR
// animal := CreateHuman ;
61583: LD_ADDR_VAR 0 12
61587: PUSH
61588: CALL_OW 44
61592: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61593: LD_VAR 0 12
61597: PPUSH
61598: LD_VAR 0 8
61602: PPUSH
61603: LD_INT 0
61605: PPUSH
61606: CALL 63374 0 3
// end ;
61610: GO 61564
61612: POP
61613: POP
// if fishes then
61614: LD_VAR 0 7
61618: IFFALSE 61685
// for i = 1 to fishes do
61620: LD_ADDR_VAR 0 11
61624: PUSH
61625: DOUBLE
61626: LD_INT 1
61628: DEC
61629: ST_TO_ADDR
61630: LD_VAR 0 7
61634: PUSH
61635: FOR_TO
61636: IFFALSE 61683
// begin hc_class = 20 ;
61638: LD_ADDR_OWVAR 28
61642: PUSH
61643: LD_INT 20
61645: ST_TO_ADDR
// hc_gallery =  ;
61646: LD_ADDR_OWVAR 33
61650: PUSH
61651: LD_STRING 
61653: ST_TO_ADDR
// animal := CreateHuman ;
61654: LD_ADDR_VAR 0 12
61658: PUSH
61659: CALL_OW 44
61663: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61664: LD_VAR 0 12
61668: PPUSH
61669: LD_VAR 0 9
61673: PPUSH
61674: LD_INT 0
61676: PPUSH
61677: CALL 63374 0 3
// end ;
61681: GO 61635
61683: POP
61684: POP
// end ;
61685: LD_VAR 0 10
61689: RET
// export function WantHeal ( sci , unit ) ; begin
61690: LD_INT 0
61692: PPUSH
// if GetTaskList ( sci ) > 0 then
61693: LD_VAR 0 1
61697: PPUSH
61698: CALL_OW 437
61702: PUSH
61703: LD_INT 0
61705: GREATER
61706: IFFALSE 61776
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61708: LD_VAR 0 1
61712: PPUSH
61713: CALL_OW 437
61717: PUSH
61718: LD_INT 1
61720: ARRAY
61721: PUSH
61722: LD_INT 1
61724: ARRAY
61725: PUSH
61726: LD_STRING l
61728: EQUAL
61729: PUSH
61730: LD_VAR 0 1
61734: PPUSH
61735: CALL_OW 437
61739: PUSH
61740: LD_INT 1
61742: ARRAY
61743: PUSH
61744: LD_INT 4
61746: ARRAY
61747: PUSH
61748: LD_VAR 0 2
61752: EQUAL
61753: AND
61754: IFFALSE 61766
// result := true else
61756: LD_ADDR_VAR 0 3
61760: PUSH
61761: LD_INT 1
61763: ST_TO_ADDR
61764: GO 61774
// result := false ;
61766: LD_ADDR_VAR 0 3
61770: PUSH
61771: LD_INT 0
61773: ST_TO_ADDR
// end else
61774: GO 61784
// result := false ;
61776: LD_ADDR_VAR 0 3
61780: PUSH
61781: LD_INT 0
61783: ST_TO_ADDR
// end ;
61784: LD_VAR 0 3
61788: RET
// export function HealTarget ( sci ) ; begin
61789: LD_INT 0
61791: PPUSH
// if not sci then
61792: LD_VAR 0 1
61796: NOT
61797: IFFALSE 61801
// exit ;
61799: GO 61866
// result := 0 ;
61801: LD_ADDR_VAR 0 2
61805: PUSH
61806: LD_INT 0
61808: ST_TO_ADDR
// if GetTaskList ( sci ) then
61809: LD_VAR 0 1
61813: PPUSH
61814: CALL_OW 437
61818: IFFALSE 61866
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61820: LD_VAR 0 1
61824: PPUSH
61825: CALL_OW 437
61829: PUSH
61830: LD_INT 1
61832: ARRAY
61833: PUSH
61834: LD_INT 1
61836: ARRAY
61837: PUSH
61838: LD_STRING l
61840: EQUAL
61841: IFFALSE 61866
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61843: LD_ADDR_VAR 0 2
61847: PUSH
61848: LD_VAR 0 1
61852: PPUSH
61853: CALL_OW 437
61857: PUSH
61858: LD_INT 1
61860: ARRAY
61861: PUSH
61862: LD_INT 4
61864: ARRAY
61865: ST_TO_ADDR
// end ;
61866: LD_VAR 0 2
61870: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61871: LD_INT 0
61873: PPUSH
61874: PPUSH
61875: PPUSH
61876: PPUSH
// if not base_units then
61877: LD_VAR 0 1
61881: NOT
61882: IFFALSE 61886
// exit ;
61884: GO 61973
// result := false ;
61886: LD_ADDR_VAR 0 2
61890: PUSH
61891: LD_INT 0
61893: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61894: LD_ADDR_VAR 0 5
61898: PUSH
61899: LD_VAR 0 1
61903: PPUSH
61904: LD_INT 21
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PPUSH
61914: CALL_OW 72
61918: ST_TO_ADDR
// if not tmp then
61919: LD_VAR 0 5
61923: NOT
61924: IFFALSE 61928
// exit ;
61926: GO 61973
// for i in tmp do
61928: LD_ADDR_VAR 0 3
61932: PUSH
61933: LD_VAR 0 5
61937: PUSH
61938: FOR_IN
61939: IFFALSE 61971
// begin result := EnemyInRange ( i , 22 ) ;
61941: LD_ADDR_VAR 0 2
61945: PUSH
61946: LD_VAR 0 3
61950: PPUSH
61951: LD_INT 22
61953: PPUSH
61954: CALL 60209 0 2
61958: ST_TO_ADDR
// if result then
61959: LD_VAR 0 2
61963: IFFALSE 61969
// exit ;
61965: POP
61966: POP
61967: GO 61973
// end ;
61969: GO 61938
61971: POP
61972: POP
// end ;
61973: LD_VAR 0 2
61977: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61978: LD_INT 0
61980: PPUSH
61981: PPUSH
// if not units then
61982: LD_VAR 0 1
61986: NOT
61987: IFFALSE 61991
// exit ;
61989: GO 62061
// result := [ ] ;
61991: LD_ADDR_VAR 0 3
61995: PUSH
61996: EMPTY
61997: ST_TO_ADDR
// for i in units do
61998: LD_ADDR_VAR 0 4
62002: PUSH
62003: LD_VAR 0 1
62007: PUSH
62008: FOR_IN
62009: IFFALSE 62059
// if GetTag ( i ) = tag then
62011: LD_VAR 0 4
62015: PPUSH
62016: CALL_OW 110
62020: PUSH
62021: LD_VAR 0 2
62025: EQUAL
62026: IFFALSE 62057
// result := Replace ( result , result + 1 , i ) ;
62028: LD_ADDR_VAR 0 3
62032: PUSH
62033: LD_VAR 0 3
62037: PPUSH
62038: LD_VAR 0 3
62042: PUSH
62043: LD_INT 1
62045: PLUS
62046: PPUSH
62047: LD_VAR 0 4
62051: PPUSH
62052: CALL_OW 1
62056: ST_TO_ADDR
62057: GO 62008
62059: POP
62060: POP
// end ;
62061: LD_VAR 0 3
62065: RET
// export function IsDriver ( un ) ; begin
62066: LD_INT 0
62068: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62069: LD_ADDR_VAR 0 2
62073: PUSH
62074: LD_VAR 0 1
62078: PUSH
62079: LD_INT 55
62081: PUSH
62082: EMPTY
62083: LIST
62084: PPUSH
62085: CALL_OW 69
62089: IN
62090: ST_TO_ADDR
// end ;
62091: LD_VAR 0 2
62095: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62096: LD_INT 0
62098: PPUSH
62099: PPUSH
// list := [ ] ;
62100: LD_ADDR_VAR 0 5
62104: PUSH
62105: EMPTY
62106: ST_TO_ADDR
// case d of 0 :
62107: LD_VAR 0 3
62111: PUSH
62112: LD_INT 0
62114: DOUBLE
62115: EQUAL
62116: IFTRUE 62120
62118: GO 62253
62120: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62121: LD_ADDR_VAR 0 5
62125: PUSH
62126: LD_VAR 0 1
62130: PUSH
62131: LD_INT 4
62133: MINUS
62134: PUSH
62135: LD_VAR 0 2
62139: PUSH
62140: LD_INT 4
62142: MINUS
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: PUSH
62152: LD_VAR 0 1
62156: PUSH
62157: LD_INT 3
62159: MINUS
62160: PUSH
62161: LD_VAR 0 2
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: PUSH
62174: LD_VAR 0 1
62178: PUSH
62179: LD_INT 4
62181: PLUS
62182: PUSH
62183: LD_VAR 0 2
62187: PUSH
62188: LD_INT 4
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: PUSH
62196: LD_VAR 0 1
62200: PUSH
62201: LD_INT 3
62203: PLUS
62204: PUSH
62205: LD_VAR 0 2
62209: PUSH
62210: LD_INT 3
62212: PLUS
62213: PUSH
62214: LD_INT 5
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: LIST
62221: PUSH
62222: LD_VAR 0 1
62226: PUSH
62227: LD_VAR 0 2
62231: PUSH
62232: LD_INT 4
62234: PLUS
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: ST_TO_ADDR
// end ; 1 :
62251: GO 62951
62253: LD_INT 1
62255: DOUBLE
62256: EQUAL
62257: IFTRUE 62261
62259: GO 62394
62261: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62262: LD_ADDR_VAR 0 5
62266: PUSH
62267: LD_VAR 0 1
62271: PUSH
62272: LD_VAR 0 2
62276: PUSH
62277: LD_INT 4
62279: MINUS
62280: PUSH
62281: LD_INT 3
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: LIST
62288: PUSH
62289: LD_VAR 0 1
62293: PUSH
62294: LD_INT 3
62296: MINUS
62297: PUSH
62298: LD_VAR 0 2
62302: PUSH
62303: LD_INT 3
62305: MINUS
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: PUSH
62315: LD_VAR 0 1
62319: PUSH
62320: LD_INT 4
62322: MINUS
62323: PUSH
62324: LD_VAR 0 2
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: LIST
62336: PUSH
62337: LD_VAR 0 1
62341: PUSH
62342: LD_VAR 0 2
62346: PUSH
62347: LD_INT 3
62349: PLUS
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: LIST
62358: PUSH
62359: LD_VAR 0 1
62363: PUSH
62364: LD_INT 4
62366: PLUS
62367: PUSH
62368: LD_VAR 0 2
62372: PUSH
62373: LD_INT 4
62375: PLUS
62376: PUSH
62377: LD_INT 5
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: LIST
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: ST_TO_ADDR
// end ; 2 :
62392: GO 62951
62394: LD_INT 2
62396: DOUBLE
62397: EQUAL
62398: IFTRUE 62402
62400: GO 62531
62402: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62403: LD_ADDR_VAR 0 5
62407: PUSH
62408: LD_VAR 0 1
62412: PUSH
62413: LD_VAR 0 2
62417: PUSH
62418: LD_INT 3
62420: MINUS
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: LIST
62429: PUSH
62430: LD_VAR 0 1
62434: PUSH
62435: LD_INT 4
62437: PLUS
62438: PUSH
62439: LD_VAR 0 2
62443: PUSH
62444: LD_INT 4
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: PUSH
62452: LD_VAR 0 1
62456: PUSH
62457: LD_VAR 0 2
62461: PUSH
62462: LD_INT 4
62464: PLUS
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: PUSH
62474: LD_VAR 0 1
62478: PUSH
62479: LD_INT 3
62481: MINUS
62482: PUSH
62483: LD_VAR 0 2
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: PUSH
62496: LD_VAR 0 1
62500: PUSH
62501: LD_INT 4
62503: MINUS
62504: PUSH
62505: LD_VAR 0 2
62509: PUSH
62510: LD_INT 4
62512: MINUS
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// end ; 3 :
62529: GO 62951
62531: LD_INT 3
62533: DOUBLE
62534: EQUAL
62535: IFTRUE 62539
62537: GO 62672
62539: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62540: LD_ADDR_VAR 0 5
62544: PUSH
62545: LD_VAR 0 1
62549: PUSH
62550: LD_INT 3
62552: PLUS
62553: PUSH
62554: LD_VAR 0 2
62558: PUSH
62559: LD_INT 4
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: LIST
62566: PUSH
62567: LD_VAR 0 1
62571: PUSH
62572: LD_INT 4
62574: PLUS
62575: PUSH
62576: LD_VAR 0 2
62580: PUSH
62581: LD_INT 4
62583: PLUS
62584: PUSH
62585: LD_INT 5
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: PUSH
62593: LD_VAR 0 1
62597: PUSH
62598: LD_INT 4
62600: MINUS
62601: PUSH
62602: LD_VAR 0 2
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: LIST
62614: PUSH
62615: LD_VAR 0 1
62619: PUSH
62620: LD_VAR 0 2
62624: PUSH
62625: LD_INT 4
62627: MINUS
62628: PUSH
62629: LD_INT 3
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: LIST
62636: PUSH
62637: LD_VAR 0 1
62641: PUSH
62642: LD_INT 3
62644: MINUS
62645: PUSH
62646: LD_VAR 0 2
62650: PUSH
62651: LD_INT 3
62653: MINUS
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: ST_TO_ADDR
// end ; 4 :
62670: GO 62951
62672: LD_INT 4
62674: DOUBLE
62675: EQUAL
62676: IFTRUE 62680
62678: GO 62813
62680: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62681: LD_ADDR_VAR 0 5
62685: PUSH
62686: LD_VAR 0 1
62690: PUSH
62691: LD_VAR 0 2
62695: PUSH
62696: LD_INT 4
62698: PLUS
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: PUSH
62708: LD_VAR 0 1
62712: PUSH
62713: LD_INT 3
62715: PLUS
62716: PUSH
62717: LD_VAR 0 2
62721: PUSH
62722: LD_INT 3
62724: PLUS
62725: PUSH
62726: LD_INT 5
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: PUSH
62734: LD_VAR 0 1
62738: PUSH
62739: LD_INT 4
62741: PLUS
62742: PUSH
62743: LD_VAR 0 2
62747: PUSH
62748: LD_INT 4
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: PUSH
62756: LD_VAR 0 1
62760: PUSH
62761: LD_VAR 0 2
62765: PUSH
62766: LD_INT 3
62768: MINUS
62769: PUSH
62770: LD_INT 3
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: PUSH
62778: LD_VAR 0 1
62782: PUSH
62783: LD_INT 4
62785: MINUS
62786: PUSH
62787: LD_VAR 0 2
62791: PUSH
62792: LD_INT 4
62794: MINUS
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: LIST
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: ST_TO_ADDR
// end ; 5 :
62811: GO 62951
62813: LD_INT 5
62815: DOUBLE
62816: EQUAL
62817: IFTRUE 62821
62819: GO 62950
62821: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62822: LD_ADDR_VAR 0 5
62826: PUSH
62827: LD_VAR 0 1
62831: PUSH
62832: LD_INT 4
62834: MINUS
62835: PUSH
62836: LD_VAR 0 2
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: LIST
62848: PUSH
62849: LD_VAR 0 1
62853: PUSH
62854: LD_VAR 0 2
62858: PUSH
62859: LD_INT 4
62861: MINUS
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: PUSH
62871: LD_VAR 0 1
62875: PUSH
62876: LD_INT 4
62878: PLUS
62879: PUSH
62880: LD_VAR 0 2
62884: PUSH
62885: LD_INT 4
62887: PLUS
62888: PUSH
62889: LD_INT 5
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: LIST
62896: PUSH
62897: LD_VAR 0 1
62901: PUSH
62902: LD_INT 3
62904: PLUS
62905: PUSH
62906: LD_VAR 0 2
62910: PUSH
62911: LD_INT 4
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: PUSH
62919: LD_VAR 0 1
62923: PUSH
62924: LD_VAR 0 2
62928: PUSH
62929: LD_INT 3
62931: PLUS
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: LIST
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: ST_TO_ADDR
// end ; end ;
62948: GO 62951
62950: POP
// result := list ;
62951: LD_ADDR_VAR 0 4
62955: PUSH
62956: LD_VAR 0 5
62960: ST_TO_ADDR
// end ;
62961: LD_VAR 0 4
62965: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62966: LD_INT 0
62968: PPUSH
62969: PPUSH
62970: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62971: LD_VAR 0 1
62975: NOT
62976: PUSH
62977: LD_VAR 0 2
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: LD_INT 2
62987: PUSH
62988: LD_INT 3
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: IN
63000: NOT
63001: OR
63002: IFFALSE 63006
// exit ;
63004: GO 63098
// tmp := [ ] ;
63006: LD_ADDR_VAR 0 5
63010: PUSH
63011: EMPTY
63012: ST_TO_ADDR
// for i in units do
63013: LD_ADDR_VAR 0 4
63017: PUSH
63018: LD_VAR 0 1
63022: PUSH
63023: FOR_IN
63024: IFFALSE 63067
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63026: LD_ADDR_VAR 0 5
63030: PUSH
63031: LD_VAR 0 5
63035: PPUSH
63036: LD_VAR 0 5
63040: PUSH
63041: LD_INT 1
63043: PLUS
63044: PPUSH
63045: LD_VAR 0 4
63049: PPUSH
63050: LD_VAR 0 2
63054: PPUSH
63055: CALL_OW 259
63059: PPUSH
63060: CALL_OW 2
63064: ST_TO_ADDR
63065: GO 63023
63067: POP
63068: POP
// if not tmp then
63069: LD_VAR 0 5
63073: NOT
63074: IFFALSE 63078
// exit ;
63076: GO 63098
// result := SortListByListDesc ( units , tmp ) ;
63078: LD_ADDR_VAR 0 3
63082: PUSH
63083: LD_VAR 0 1
63087: PPUSH
63088: LD_VAR 0 5
63092: PPUSH
63093: CALL_OW 77
63097: ST_TO_ADDR
// end ;
63098: LD_VAR 0 3
63102: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63103: LD_INT 0
63105: PPUSH
63106: PPUSH
63107: PPUSH
// result := false ;
63108: LD_ADDR_VAR 0 3
63112: PUSH
63113: LD_INT 0
63115: ST_TO_ADDR
// x := GetX ( building ) ;
63116: LD_ADDR_VAR 0 4
63120: PUSH
63121: LD_VAR 0 2
63125: PPUSH
63126: CALL_OW 250
63130: ST_TO_ADDR
// y := GetY ( building ) ;
63131: LD_ADDR_VAR 0 5
63135: PUSH
63136: LD_VAR 0 2
63140: PPUSH
63141: CALL_OW 251
63145: ST_TO_ADDR
// if not building or not x or not y then
63146: LD_VAR 0 2
63150: NOT
63151: PUSH
63152: LD_VAR 0 4
63156: NOT
63157: OR
63158: PUSH
63159: LD_VAR 0 5
63163: NOT
63164: OR
63165: IFFALSE 63169
// exit ;
63167: GO 63261
// if GetTaskList ( unit ) then
63169: LD_VAR 0 1
63173: PPUSH
63174: CALL_OW 437
63178: IFFALSE 63261
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63180: LD_STRING e
63182: PUSH
63183: LD_VAR 0 1
63187: PPUSH
63188: CALL_OW 437
63192: PUSH
63193: LD_INT 1
63195: ARRAY
63196: PUSH
63197: LD_INT 1
63199: ARRAY
63200: EQUAL
63201: PUSH
63202: LD_VAR 0 4
63206: PUSH
63207: LD_VAR 0 1
63211: PPUSH
63212: CALL_OW 437
63216: PUSH
63217: LD_INT 1
63219: ARRAY
63220: PUSH
63221: LD_INT 2
63223: ARRAY
63224: EQUAL
63225: AND
63226: PUSH
63227: LD_VAR 0 5
63231: PUSH
63232: LD_VAR 0 1
63236: PPUSH
63237: CALL_OW 437
63241: PUSH
63242: LD_INT 1
63244: ARRAY
63245: PUSH
63246: LD_INT 3
63248: ARRAY
63249: EQUAL
63250: AND
63251: IFFALSE 63261
// result := true end ;
63253: LD_ADDR_VAR 0 3
63257: PUSH
63258: LD_INT 1
63260: ST_TO_ADDR
// end ;
63261: LD_VAR 0 3
63265: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63266: LD_INT 0
63268: PPUSH
// result := false ;
63269: LD_ADDR_VAR 0 4
63273: PUSH
63274: LD_INT 0
63276: ST_TO_ADDR
// if GetTaskList ( unit ) then
63277: LD_VAR 0 1
63281: PPUSH
63282: CALL_OW 437
63286: IFFALSE 63369
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63288: LD_STRING M
63290: PUSH
63291: LD_VAR 0 1
63295: PPUSH
63296: CALL_OW 437
63300: PUSH
63301: LD_INT 1
63303: ARRAY
63304: PUSH
63305: LD_INT 1
63307: ARRAY
63308: EQUAL
63309: PUSH
63310: LD_VAR 0 2
63314: PUSH
63315: LD_VAR 0 1
63319: PPUSH
63320: CALL_OW 437
63324: PUSH
63325: LD_INT 1
63327: ARRAY
63328: PUSH
63329: LD_INT 2
63331: ARRAY
63332: EQUAL
63333: AND
63334: PUSH
63335: LD_VAR 0 3
63339: PUSH
63340: LD_VAR 0 1
63344: PPUSH
63345: CALL_OW 437
63349: PUSH
63350: LD_INT 1
63352: ARRAY
63353: PUSH
63354: LD_INT 3
63356: ARRAY
63357: EQUAL
63358: AND
63359: IFFALSE 63369
// result := true ;
63361: LD_ADDR_VAR 0 4
63365: PUSH
63366: LD_INT 1
63368: ST_TO_ADDR
// end ; end ;
63369: LD_VAR 0 4
63373: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63374: LD_INT 0
63376: PPUSH
63377: PPUSH
63378: PPUSH
63379: PPUSH
// if not unit or not area then
63380: LD_VAR 0 1
63384: NOT
63385: PUSH
63386: LD_VAR 0 2
63390: NOT
63391: OR
63392: IFFALSE 63396
// exit ;
63394: GO 63560
// tmp := AreaToList ( area , i ) ;
63396: LD_ADDR_VAR 0 6
63400: PUSH
63401: LD_VAR 0 2
63405: PPUSH
63406: LD_VAR 0 5
63410: PPUSH
63411: CALL_OW 517
63415: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63416: LD_ADDR_VAR 0 5
63420: PUSH
63421: DOUBLE
63422: LD_INT 1
63424: DEC
63425: ST_TO_ADDR
63426: LD_VAR 0 6
63430: PUSH
63431: LD_INT 1
63433: ARRAY
63434: PUSH
63435: FOR_TO
63436: IFFALSE 63558
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63438: LD_ADDR_VAR 0 7
63442: PUSH
63443: LD_VAR 0 6
63447: PUSH
63448: LD_INT 1
63450: ARRAY
63451: PUSH
63452: LD_VAR 0 5
63456: ARRAY
63457: PUSH
63458: LD_VAR 0 6
63462: PUSH
63463: LD_INT 2
63465: ARRAY
63466: PUSH
63467: LD_VAR 0 5
63471: ARRAY
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63477: LD_VAR 0 7
63481: PUSH
63482: LD_INT 1
63484: ARRAY
63485: PPUSH
63486: LD_VAR 0 7
63490: PUSH
63491: LD_INT 2
63493: ARRAY
63494: PPUSH
63495: CALL_OW 428
63499: PUSH
63500: LD_INT 0
63502: EQUAL
63503: IFFALSE 63556
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63505: LD_VAR 0 1
63509: PPUSH
63510: LD_VAR 0 7
63514: PUSH
63515: LD_INT 1
63517: ARRAY
63518: PPUSH
63519: LD_VAR 0 7
63523: PUSH
63524: LD_INT 2
63526: ARRAY
63527: PPUSH
63528: LD_VAR 0 3
63532: PPUSH
63533: CALL_OW 48
// result := IsPlaced ( unit ) ;
63537: LD_ADDR_VAR 0 4
63541: PUSH
63542: LD_VAR 0 1
63546: PPUSH
63547: CALL_OW 305
63551: ST_TO_ADDR
// exit ;
63552: POP
63553: POP
63554: GO 63560
// end ; end ;
63556: GO 63435
63558: POP
63559: POP
// end ;
63560: LD_VAR 0 4
63564: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63565: LD_INT 0
63567: PPUSH
63568: PPUSH
63569: PPUSH
// if not side or side > 8 then
63570: LD_VAR 0 1
63574: NOT
63575: PUSH
63576: LD_VAR 0 1
63580: PUSH
63581: LD_INT 8
63583: GREATER
63584: OR
63585: IFFALSE 63589
// exit ;
63587: GO 63776
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63589: LD_ADDR_VAR 0 4
63593: PUSH
63594: LD_INT 22
63596: PUSH
63597: LD_VAR 0 1
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 21
63608: PUSH
63609: LD_INT 3
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PPUSH
63620: CALL_OW 69
63624: ST_TO_ADDR
// if not tmp then
63625: LD_VAR 0 4
63629: NOT
63630: IFFALSE 63634
// exit ;
63632: GO 63776
// enable_addtolog := true ;
63634: LD_ADDR_OWVAR 81
63638: PUSH
63639: LD_INT 1
63641: ST_TO_ADDR
// AddToLog ( [ ) ;
63642: LD_STRING [
63644: PPUSH
63645: CALL_OW 561
// for i in tmp do
63649: LD_ADDR_VAR 0 3
63653: PUSH
63654: LD_VAR 0 4
63658: PUSH
63659: FOR_IN
63660: IFFALSE 63767
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63662: LD_STRING [
63664: PUSH
63665: LD_VAR 0 3
63669: PPUSH
63670: CALL_OW 266
63674: STR
63675: PUSH
63676: LD_STRING , 
63678: STR
63679: PUSH
63680: LD_VAR 0 3
63684: PPUSH
63685: CALL_OW 250
63689: STR
63690: PUSH
63691: LD_STRING , 
63693: STR
63694: PUSH
63695: LD_VAR 0 3
63699: PPUSH
63700: CALL_OW 251
63704: STR
63705: PUSH
63706: LD_STRING , 
63708: STR
63709: PUSH
63710: LD_VAR 0 3
63714: PPUSH
63715: CALL_OW 254
63719: STR
63720: PUSH
63721: LD_STRING , 
63723: STR
63724: PUSH
63725: LD_VAR 0 3
63729: PPUSH
63730: LD_INT 1
63732: PPUSH
63733: CALL_OW 268
63737: STR
63738: PUSH
63739: LD_STRING , 
63741: STR
63742: PUSH
63743: LD_VAR 0 3
63747: PPUSH
63748: LD_INT 2
63750: PPUSH
63751: CALL_OW 268
63755: STR
63756: PUSH
63757: LD_STRING ],
63759: STR
63760: PPUSH
63761: CALL_OW 561
// end ;
63765: GO 63659
63767: POP
63768: POP
// AddToLog ( ]; ) ;
63769: LD_STRING ];
63771: PPUSH
63772: CALL_OW 561
// end ;
63776: LD_VAR 0 2
63780: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63781: LD_INT 0
63783: PPUSH
63784: PPUSH
63785: PPUSH
63786: PPUSH
63787: PPUSH
// if not area or not rate or not max then
63788: LD_VAR 0 1
63792: NOT
63793: PUSH
63794: LD_VAR 0 2
63798: NOT
63799: OR
63800: PUSH
63801: LD_VAR 0 4
63805: NOT
63806: OR
63807: IFFALSE 63811
// exit ;
63809: GO 64003
// while 1 do
63811: LD_INT 1
63813: IFFALSE 64003
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63815: LD_ADDR_VAR 0 9
63819: PUSH
63820: LD_VAR 0 1
63824: PPUSH
63825: LD_INT 1
63827: PPUSH
63828: CALL_OW 287
63832: PUSH
63833: LD_INT 10
63835: MUL
63836: ST_TO_ADDR
// r := rate / 10 ;
63837: LD_ADDR_VAR 0 7
63841: PUSH
63842: LD_VAR 0 2
63846: PUSH
63847: LD_INT 10
63849: DIVREAL
63850: ST_TO_ADDR
// time := 1 1$00 ;
63851: LD_ADDR_VAR 0 8
63855: PUSH
63856: LD_INT 2100
63858: ST_TO_ADDR
// if amount < min then
63859: LD_VAR 0 9
63863: PUSH
63864: LD_VAR 0 3
63868: LESS
63869: IFFALSE 63887
// r := r * 2 else
63871: LD_ADDR_VAR 0 7
63875: PUSH
63876: LD_VAR 0 7
63880: PUSH
63881: LD_INT 2
63883: MUL
63884: ST_TO_ADDR
63885: GO 63913
// if amount > max then
63887: LD_VAR 0 9
63891: PUSH
63892: LD_VAR 0 4
63896: GREATER
63897: IFFALSE 63913
// r := r / 2 ;
63899: LD_ADDR_VAR 0 7
63903: PUSH
63904: LD_VAR 0 7
63908: PUSH
63909: LD_INT 2
63911: DIVREAL
63912: ST_TO_ADDR
// time := time / r ;
63913: LD_ADDR_VAR 0 8
63917: PUSH
63918: LD_VAR 0 8
63922: PUSH
63923: LD_VAR 0 7
63927: DIVREAL
63928: ST_TO_ADDR
// if time < 0 then
63929: LD_VAR 0 8
63933: PUSH
63934: LD_INT 0
63936: LESS
63937: IFFALSE 63954
// time := time * - 1 ;
63939: LD_ADDR_VAR 0 8
63943: PUSH
63944: LD_VAR 0 8
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: MUL
63953: ST_TO_ADDR
// wait ( time ) ;
63954: LD_VAR 0 8
63958: PPUSH
63959: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63963: LD_INT 35
63965: PPUSH
63966: LD_INT 875
63968: PPUSH
63969: CALL_OW 12
63973: PPUSH
63974: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63978: LD_INT 1
63980: PPUSH
63981: LD_INT 5
63983: PPUSH
63984: CALL_OW 12
63988: PPUSH
63989: LD_VAR 0 1
63993: PPUSH
63994: LD_INT 1
63996: PPUSH
63997: CALL_OW 55
// end ;
64001: GO 63811
// end ;
64003: LD_VAR 0 5
64007: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64008: LD_INT 0
64010: PPUSH
64011: PPUSH
64012: PPUSH
64013: PPUSH
64014: PPUSH
64015: PPUSH
64016: PPUSH
64017: PPUSH
// if not turrets or not factories then
64018: LD_VAR 0 1
64022: NOT
64023: PUSH
64024: LD_VAR 0 2
64028: NOT
64029: OR
64030: IFFALSE 64034
// exit ;
64032: GO 64341
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64034: LD_ADDR_VAR 0 10
64038: PUSH
64039: LD_INT 5
64041: PUSH
64042: LD_INT 6
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 2
64051: PUSH
64052: LD_INT 4
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 3
64061: PUSH
64062: LD_INT 5
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 24
64076: PUSH
64077: LD_INT 25
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 23
64086: PUSH
64087: LD_INT 27
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 42
64100: PUSH
64101: LD_INT 43
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 44
64110: PUSH
64111: LD_INT 46
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 45
64120: PUSH
64121: LD_INT 47
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// result := [ ] ;
64138: LD_ADDR_VAR 0 3
64142: PUSH
64143: EMPTY
64144: ST_TO_ADDR
// for i in turrets do
64145: LD_ADDR_VAR 0 4
64149: PUSH
64150: LD_VAR 0 1
64154: PUSH
64155: FOR_IN
64156: IFFALSE 64339
// begin nat := GetNation ( i ) ;
64158: LD_ADDR_VAR 0 7
64162: PUSH
64163: LD_VAR 0 4
64167: PPUSH
64168: CALL_OW 248
64172: ST_TO_ADDR
// weapon := 0 ;
64173: LD_ADDR_VAR 0 8
64177: PUSH
64178: LD_INT 0
64180: ST_TO_ADDR
// if not nat then
64181: LD_VAR 0 7
64185: NOT
64186: IFFALSE 64190
// continue ;
64188: GO 64155
// for j in list [ nat ] do
64190: LD_ADDR_VAR 0 5
64194: PUSH
64195: LD_VAR 0 10
64199: PUSH
64200: LD_VAR 0 7
64204: ARRAY
64205: PUSH
64206: FOR_IN
64207: IFFALSE 64248
// if GetBWeapon ( i ) = j [ 1 ] then
64209: LD_VAR 0 4
64213: PPUSH
64214: CALL_OW 269
64218: PUSH
64219: LD_VAR 0 5
64223: PUSH
64224: LD_INT 1
64226: ARRAY
64227: EQUAL
64228: IFFALSE 64246
// begin weapon := j [ 2 ] ;
64230: LD_ADDR_VAR 0 8
64234: PUSH
64235: LD_VAR 0 5
64239: PUSH
64240: LD_INT 2
64242: ARRAY
64243: ST_TO_ADDR
// break ;
64244: GO 64248
// end ;
64246: GO 64206
64248: POP
64249: POP
// if not weapon then
64250: LD_VAR 0 8
64254: NOT
64255: IFFALSE 64259
// continue ;
64257: GO 64155
// for k in factories do
64259: LD_ADDR_VAR 0 6
64263: PUSH
64264: LD_VAR 0 2
64268: PUSH
64269: FOR_IN
64270: IFFALSE 64335
// begin weapons := AvailableWeaponList ( k ) ;
64272: LD_ADDR_VAR 0 9
64276: PUSH
64277: LD_VAR 0 6
64281: PPUSH
64282: CALL_OW 478
64286: ST_TO_ADDR
// if not weapons then
64287: LD_VAR 0 9
64291: NOT
64292: IFFALSE 64296
// continue ;
64294: GO 64269
// if weapon in weapons then
64296: LD_VAR 0 8
64300: PUSH
64301: LD_VAR 0 9
64305: IN
64306: IFFALSE 64333
// begin result := [ i , weapon ] ;
64308: LD_ADDR_VAR 0 3
64312: PUSH
64313: LD_VAR 0 4
64317: PUSH
64318: LD_VAR 0 8
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: ST_TO_ADDR
// exit ;
64327: POP
64328: POP
64329: POP
64330: POP
64331: GO 64341
// end ; end ;
64333: GO 64269
64335: POP
64336: POP
// end ;
64337: GO 64155
64339: POP
64340: POP
// end ;
64341: LD_VAR 0 3
64345: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64346: LD_INT 0
64348: PPUSH
// if not side or side > 8 then
64349: LD_VAR 0 3
64353: NOT
64354: PUSH
64355: LD_VAR 0 3
64359: PUSH
64360: LD_INT 8
64362: GREATER
64363: OR
64364: IFFALSE 64368
// exit ;
64366: GO 64427
// if not range then
64368: LD_VAR 0 4
64372: NOT
64373: IFFALSE 64384
// range := - 12 ;
64375: LD_ADDR_VAR 0 4
64379: PUSH
64380: LD_INT 12
64382: NEG
64383: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64384: LD_VAR 0 1
64388: PPUSH
64389: LD_VAR 0 2
64393: PPUSH
64394: LD_VAR 0 3
64398: PPUSH
64399: LD_VAR 0 4
64403: PPUSH
64404: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64408: LD_VAR 0 1
64412: PPUSH
64413: LD_VAR 0 2
64417: PPUSH
64418: LD_VAR 0 3
64422: PPUSH
64423: CALL_OW 331
// end ;
64427: LD_VAR 0 5
64431: RET
// export function Video ( mode ) ; begin
64432: LD_INT 0
64434: PPUSH
// ingame_video = mode ;
64435: LD_ADDR_OWVAR 52
64439: PUSH
64440: LD_VAR 0 1
64444: ST_TO_ADDR
// interface_hidden = mode ;
64445: LD_ADDR_OWVAR 54
64449: PUSH
64450: LD_VAR 0 1
64454: ST_TO_ADDR
// end ;
64455: LD_VAR 0 2
64459: RET
// export function Join ( array , element ) ; begin
64460: LD_INT 0
64462: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64463: LD_ADDR_VAR 0 3
64467: PUSH
64468: LD_VAR 0 1
64472: PPUSH
64473: LD_VAR 0 1
64477: PUSH
64478: LD_INT 1
64480: PLUS
64481: PPUSH
64482: LD_VAR 0 2
64486: PPUSH
64487: CALL_OW 1
64491: ST_TO_ADDR
// end ;
64492: LD_VAR 0 3
64496: RET
// export function JoinUnion ( array , element ) ; begin
64497: LD_INT 0
64499: PPUSH
// result := array union element ;
64500: LD_ADDR_VAR 0 3
64504: PUSH
64505: LD_VAR 0 1
64509: PUSH
64510: LD_VAR 0 2
64514: UNION
64515: ST_TO_ADDR
// end ;
64516: LD_VAR 0 3
64520: RET
// export function GetBehemoths ( side ) ; begin
64521: LD_INT 0
64523: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64524: LD_ADDR_VAR 0 2
64528: PUSH
64529: LD_INT 22
64531: PUSH
64532: LD_VAR 0 1
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 31
64543: PUSH
64544: LD_INT 25
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PPUSH
64555: CALL_OW 69
64559: ST_TO_ADDR
// end ;
64560: LD_VAR 0 2
64564: RET
// export function Shuffle ( array ) ; var i , index ; begin
64565: LD_INT 0
64567: PPUSH
64568: PPUSH
64569: PPUSH
// result := [ ] ;
64570: LD_ADDR_VAR 0 2
64574: PUSH
64575: EMPTY
64576: ST_TO_ADDR
// if not array then
64577: LD_VAR 0 1
64581: NOT
64582: IFFALSE 64586
// exit ;
64584: GO 64685
// Randomize ;
64586: CALL_OW 10
// for i = array downto 1 do
64590: LD_ADDR_VAR 0 3
64594: PUSH
64595: DOUBLE
64596: LD_VAR 0 1
64600: INC
64601: ST_TO_ADDR
64602: LD_INT 1
64604: PUSH
64605: FOR_DOWNTO
64606: IFFALSE 64683
// begin index := rand ( 1 , array ) ;
64608: LD_ADDR_VAR 0 4
64612: PUSH
64613: LD_INT 1
64615: PPUSH
64616: LD_VAR 0 1
64620: PPUSH
64621: CALL_OW 12
64625: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64626: LD_ADDR_VAR 0 2
64630: PUSH
64631: LD_VAR 0 2
64635: PPUSH
64636: LD_VAR 0 2
64640: PUSH
64641: LD_INT 1
64643: PLUS
64644: PPUSH
64645: LD_VAR 0 1
64649: PUSH
64650: LD_VAR 0 4
64654: ARRAY
64655: PPUSH
64656: CALL_OW 2
64660: ST_TO_ADDR
// array := Delete ( array , index ) ;
64661: LD_ADDR_VAR 0 1
64665: PUSH
64666: LD_VAR 0 1
64670: PPUSH
64671: LD_VAR 0 4
64675: PPUSH
64676: CALL_OW 3
64680: ST_TO_ADDR
// end ;
64681: GO 64605
64683: POP
64684: POP
// end ;
64685: LD_VAR 0 2
64689: RET
// export function GetBaseMaterials ( base ) ; begin
64690: LD_INT 0
64692: PPUSH
// result := [ 0 , 0 , 0 ] ;
64693: LD_ADDR_VAR 0 2
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: ST_TO_ADDR
// if not base then
64712: LD_VAR 0 1
64716: NOT
64717: IFFALSE 64721
// exit ;
64719: GO 64770
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64721: LD_ADDR_VAR 0 2
64725: PUSH
64726: LD_VAR 0 1
64730: PPUSH
64731: LD_INT 1
64733: PPUSH
64734: CALL_OW 275
64738: PUSH
64739: LD_VAR 0 1
64743: PPUSH
64744: LD_INT 2
64746: PPUSH
64747: CALL_OW 275
64751: PUSH
64752: LD_VAR 0 1
64756: PPUSH
64757: LD_INT 3
64759: PPUSH
64760: CALL_OW 275
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// end ;
64770: LD_VAR 0 2
64774: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64775: LD_INT 0
64777: PPUSH
64778: PPUSH
// result := array ;
64779: LD_ADDR_VAR 0 3
64783: PUSH
64784: LD_VAR 0 1
64788: ST_TO_ADDR
// if size > 0 then
64789: LD_VAR 0 2
64793: PUSH
64794: LD_INT 0
64796: GREATER
64797: IFFALSE 64843
// for i := array downto size do
64799: LD_ADDR_VAR 0 4
64803: PUSH
64804: DOUBLE
64805: LD_VAR 0 1
64809: INC
64810: ST_TO_ADDR
64811: LD_VAR 0 2
64815: PUSH
64816: FOR_DOWNTO
64817: IFFALSE 64841
// result := Delete ( result , result ) ;
64819: LD_ADDR_VAR 0 3
64823: PUSH
64824: LD_VAR 0 3
64828: PPUSH
64829: LD_VAR 0 3
64833: PPUSH
64834: CALL_OW 3
64838: ST_TO_ADDR
64839: GO 64816
64841: POP
64842: POP
// end ;
64843: LD_VAR 0 3
64847: RET
// export function ComExit ( unit ) ; var tmp ; begin
64848: LD_INT 0
64850: PPUSH
64851: PPUSH
// if not IsInUnit ( unit ) then
64852: LD_VAR 0 1
64856: PPUSH
64857: CALL_OW 310
64861: NOT
64862: IFFALSE 64866
// exit ;
64864: GO 64926
// tmp := IsInUnit ( unit ) ;
64866: LD_ADDR_VAR 0 3
64870: PUSH
64871: LD_VAR 0 1
64875: PPUSH
64876: CALL_OW 310
64880: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64881: LD_VAR 0 3
64885: PPUSH
64886: CALL_OW 247
64890: PUSH
64891: LD_INT 2
64893: EQUAL
64894: IFFALSE 64907
// ComExitVehicle ( unit ) else
64896: LD_VAR 0 1
64900: PPUSH
64901: CALL_OW 121
64905: GO 64916
// ComExitBuilding ( unit ) ;
64907: LD_VAR 0 1
64911: PPUSH
64912: CALL_OW 122
// result := tmp ;
64916: LD_ADDR_VAR 0 2
64920: PUSH
64921: LD_VAR 0 3
64925: ST_TO_ADDR
// end ;
64926: LD_VAR 0 2
64930: RET
// export function ComExitAll ( units ) ; var i ; begin
64931: LD_INT 0
64933: PPUSH
64934: PPUSH
// if not units then
64935: LD_VAR 0 1
64939: NOT
64940: IFFALSE 64944
// exit ;
64942: GO 64970
// for i in units do
64944: LD_ADDR_VAR 0 3
64948: PUSH
64949: LD_VAR 0 1
64953: PUSH
64954: FOR_IN
64955: IFFALSE 64968
// ComExit ( i ) ;
64957: LD_VAR 0 3
64961: PPUSH
64962: CALL 64848 0 1
64966: GO 64954
64968: POP
64969: POP
// end ;
64970: LD_VAR 0 2
64974: RET
// export function ResetHc ; begin
64975: LD_INT 0
64977: PPUSH
// InitHc ;
64978: CALL_OW 19
// hc_importance := 0 ;
64982: LD_ADDR_OWVAR 32
64986: PUSH
64987: LD_INT 0
64989: ST_TO_ADDR
// end ;
64990: LD_VAR 0 1
64994: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64995: LD_INT 0
64997: PPUSH
64998: PPUSH
64999: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65000: LD_ADDR_VAR 0 6
65004: PUSH
65005: LD_VAR 0 1
65009: PUSH
65010: LD_VAR 0 3
65014: PLUS
65015: PUSH
65016: LD_INT 2
65018: DIV
65019: ST_TO_ADDR
// if _x < 0 then
65020: LD_VAR 0 6
65024: PUSH
65025: LD_INT 0
65027: LESS
65028: IFFALSE 65045
// _x := _x * - 1 ;
65030: LD_ADDR_VAR 0 6
65034: PUSH
65035: LD_VAR 0 6
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: MUL
65044: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65045: LD_ADDR_VAR 0 7
65049: PUSH
65050: LD_VAR 0 2
65054: PUSH
65055: LD_VAR 0 4
65059: PLUS
65060: PUSH
65061: LD_INT 2
65063: DIV
65064: ST_TO_ADDR
// if _y < 0 then
65065: LD_VAR 0 7
65069: PUSH
65070: LD_INT 0
65072: LESS
65073: IFFALSE 65090
// _y := _y * - 1 ;
65075: LD_ADDR_VAR 0 7
65079: PUSH
65080: LD_VAR 0 7
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: MUL
65089: ST_TO_ADDR
// result := [ _x , _y ] ;
65090: LD_ADDR_VAR 0 5
65094: PUSH
65095: LD_VAR 0 6
65099: PUSH
65100: LD_VAR 0 7
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: ST_TO_ADDR
// end ;
65109: LD_VAR 0 5
65113: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65114: LD_INT 0
65116: PPUSH
65117: PPUSH
65118: PPUSH
65119: PPUSH
// task := GetTaskList ( unit ) ;
65120: LD_ADDR_VAR 0 7
65124: PUSH
65125: LD_VAR 0 1
65129: PPUSH
65130: CALL_OW 437
65134: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65135: LD_VAR 0 7
65139: NOT
65140: PUSH
65141: LD_VAR 0 1
65145: PPUSH
65146: LD_VAR 0 2
65150: PPUSH
65151: CALL_OW 308
65155: NOT
65156: AND
65157: IFFALSE 65161
// exit ;
65159: GO 65279
// if IsInArea ( unit , area ) then
65161: LD_VAR 0 1
65165: PPUSH
65166: LD_VAR 0 2
65170: PPUSH
65171: CALL_OW 308
65175: IFFALSE 65193
// begin ComMoveToArea ( unit , goAway ) ;
65177: LD_VAR 0 1
65181: PPUSH
65182: LD_VAR 0 3
65186: PPUSH
65187: CALL_OW 113
// exit ;
65191: GO 65279
// end ; if task [ 1 ] [ 1 ] <> M then
65193: LD_VAR 0 7
65197: PUSH
65198: LD_INT 1
65200: ARRAY
65201: PUSH
65202: LD_INT 1
65204: ARRAY
65205: PUSH
65206: LD_STRING M
65208: NONEQUAL
65209: IFFALSE 65213
// exit ;
65211: GO 65279
// x := task [ 1 ] [ 2 ] ;
65213: LD_ADDR_VAR 0 5
65217: PUSH
65218: LD_VAR 0 7
65222: PUSH
65223: LD_INT 1
65225: ARRAY
65226: PUSH
65227: LD_INT 2
65229: ARRAY
65230: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65231: LD_ADDR_VAR 0 6
65235: PUSH
65236: LD_VAR 0 7
65240: PUSH
65241: LD_INT 1
65243: ARRAY
65244: PUSH
65245: LD_INT 3
65247: ARRAY
65248: ST_TO_ADDR
// if InArea ( x , y , area ) then
65249: LD_VAR 0 5
65253: PPUSH
65254: LD_VAR 0 6
65258: PPUSH
65259: LD_VAR 0 2
65263: PPUSH
65264: CALL_OW 309
65268: IFFALSE 65279
// ComStop ( unit ) ;
65270: LD_VAR 0 1
65274: PPUSH
65275: CALL_OW 141
// end ;
65279: LD_VAR 0 4
65283: RET
// export function Abs ( value ) ; begin
65284: LD_INT 0
65286: PPUSH
// result := value ;
65287: LD_ADDR_VAR 0 2
65291: PUSH
65292: LD_VAR 0 1
65296: ST_TO_ADDR
// if value < 0 then
65297: LD_VAR 0 1
65301: PUSH
65302: LD_INT 0
65304: LESS
65305: IFFALSE 65322
// result := value * - 1 ;
65307: LD_ADDR_VAR 0 2
65311: PUSH
65312: LD_VAR 0 1
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: MUL
65321: ST_TO_ADDR
// end ;
65322: LD_VAR 0 2
65326: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65327: LD_INT 0
65329: PPUSH
65330: PPUSH
65331: PPUSH
65332: PPUSH
65333: PPUSH
65334: PPUSH
65335: PPUSH
65336: PPUSH
// if not unit or not building then
65337: LD_VAR 0 1
65341: NOT
65342: PUSH
65343: LD_VAR 0 2
65347: NOT
65348: OR
65349: IFFALSE 65353
// exit ;
65351: GO 65579
// x := GetX ( building ) ;
65353: LD_ADDR_VAR 0 4
65357: PUSH
65358: LD_VAR 0 2
65362: PPUSH
65363: CALL_OW 250
65367: ST_TO_ADDR
// y := GetY ( building ) ;
65368: LD_ADDR_VAR 0 6
65372: PUSH
65373: LD_VAR 0 2
65377: PPUSH
65378: CALL_OW 251
65382: ST_TO_ADDR
// d := GetDir ( building ) ;
65383: LD_ADDR_VAR 0 8
65387: PUSH
65388: LD_VAR 0 2
65392: PPUSH
65393: CALL_OW 254
65397: ST_TO_ADDR
// r := 4 ;
65398: LD_ADDR_VAR 0 9
65402: PUSH
65403: LD_INT 4
65405: ST_TO_ADDR
// for i := 1 to 5 do
65406: LD_ADDR_VAR 0 10
65410: PUSH
65411: DOUBLE
65412: LD_INT 1
65414: DEC
65415: ST_TO_ADDR
65416: LD_INT 5
65418: PUSH
65419: FOR_TO
65420: IFFALSE 65577
// begin _x := ShiftX ( x , d , r + i ) ;
65422: LD_ADDR_VAR 0 5
65426: PUSH
65427: LD_VAR 0 4
65431: PPUSH
65432: LD_VAR 0 8
65436: PPUSH
65437: LD_VAR 0 9
65441: PUSH
65442: LD_VAR 0 10
65446: PLUS
65447: PPUSH
65448: CALL_OW 272
65452: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65453: LD_ADDR_VAR 0 7
65457: PUSH
65458: LD_VAR 0 6
65462: PPUSH
65463: LD_VAR 0 8
65467: PPUSH
65468: LD_VAR 0 9
65472: PUSH
65473: LD_VAR 0 10
65477: PLUS
65478: PPUSH
65479: CALL_OW 273
65483: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65484: LD_VAR 0 5
65488: PPUSH
65489: LD_VAR 0 7
65493: PPUSH
65494: CALL_OW 488
65498: PUSH
65499: LD_VAR 0 5
65503: PPUSH
65504: LD_VAR 0 7
65508: PPUSH
65509: CALL_OW 428
65513: PPUSH
65514: CALL_OW 247
65518: PUSH
65519: LD_INT 3
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: IN
65529: NOT
65530: AND
65531: IFFALSE 65575
// begin ComMoveXY ( unit , _x , _y ) ;
65533: LD_VAR 0 1
65537: PPUSH
65538: LD_VAR 0 5
65542: PPUSH
65543: LD_VAR 0 7
65547: PPUSH
65548: CALL_OW 111
// result := [ _x , _y ] ;
65552: LD_ADDR_VAR 0 3
65556: PUSH
65557: LD_VAR 0 5
65561: PUSH
65562: LD_VAR 0 7
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: ST_TO_ADDR
// exit ;
65571: POP
65572: POP
65573: GO 65579
// end ; end ;
65575: GO 65419
65577: POP
65578: POP
// end ;
65579: LD_VAR 0 3
65583: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65584: LD_INT 0
65586: PPUSH
65587: PPUSH
65588: PPUSH
// result := 0 ;
65589: LD_ADDR_VAR 0 3
65593: PUSH
65594: LD_INT 0
65596: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65597: LD_VAR 0 1
65601: PUSH
65602: LD_INT 0
65604: LESS
65605: PUSH
65606: LD_VAR 0 1
65610: PUSH
65611: LD_INT 8
65613: GREATER
65614: OR
65615: PUSH
65616: LD_VAR 0 2
65620: PUSH
65621: LD_INT 0
65623: LESS
65624: OR
65625: PUSH
65626: LD_VAR 0 2
65630: PUSH
65631: LD_INT 8
65633: GREATER
65634: OR
65635: IFFALSE 65639
// exit ;
65637: GO 65714
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65639: LD_ADDR_VAR 0 4
65643: PUSH
65644: LD_INT 22
65646: PUSH
65647: LD_VAR 0 2
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PPUSH
65656: CALL_OW 69
65660: PUSH
65661: FOR_IN
65662: IFFALSE 65712
// begin un := UnitShoot ( i ) ;
65664: LD_ADDR_VAR 0 5
65668: PUSH
65669: LD_VAR 0 4
65673: PPUSH
65674: CALL_OW 504
65678: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65679: LD_VAR 0 5
65683: PPUSH
65684: CALL_OW 255
65688: PUSH
65689: LD_VAR 0 1
65693: EQUAL
65694: IFFALSE 65710
// begin result := un ;
65696: LD_ADDR_VAR 0 3
65700: PUSH
65701: LD_VAR 0 5
65705: ST_TO_ADDR
// exit ;
65706: POP
65707: POP
65708: GO 65714
// end ; end ;
65710: GO 65661
65712: POP
65713: POP
// end ;
65714: LD_VAR 0 3
65718: RET
// export function GetCargoBay ( units ) ; begin
65719: LD_INT 0
65721: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65722: LD_ADDR_VAR 0 2
65726: PUSH
65727: LD_VAR 0 1
65731: PPUSH
65732: LD_INT 2
65734: PUSH
65735: LD_INT 34
65737: PUSH
65738: LD_INT 12
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 34
65747: PUSH
65748: LD_INT 51
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 34
65757: PUSH
65758: LD_INT 32
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 34
65767: PUSH
65768: LD_EXP 114
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: PPUSH
65784: CALL_OW 72
65788: ST_TO_ADDR
// end ;
65789: LD_VAR 0 2
65793: RET
// export function Negate ( value ) ; begin
65794: LD_INT 0
65796: PPUSH
// result := not value ;
65797: LD_ADDR_VAR 0 2
65801: PUSH
65802: LD_VAR 0 1
65806: NOT
65807: ST_TO_ADDR
// end ;
65808: LD_VAR 0 2
65812: RET
// export function Inc ( value ) ; begin
65813: LD_INT 0
65815: PPUSH
// result := value + 1 ;
65816: LD_ADDR_VAR 0 2
65820: PUSH
65821: LD_VAR 0 1
65825: PUSH
65826: LD_INT 1
65828: PLUS
65829: ST_TO_ADDR
// end ;
65830: LD_VAR 0 2
65834: RET
// export function Dec ( value ) ; begin
65835: LD_INT 0
65837: PPUSH
// result := value - 1 ;
65838: LD_ADDR_VAR 0 2
65842: PUSH
65843: LD_VAR 0 1
65847: PUSH
65848: LD_INT 1
65850: MINUS
65851: ST_TO_ADDR
// end ;
65852: LD_VAR 0 2
65856: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65857: LD_INT 0
65859: PPUSH
65860: PPUSH
65861: PPUSH
65862: PPUSH
65863: PPUSH
65864: PPUSH
65865: PPUSH
65866: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65867: LD_VAR 0 1
65871: PPUSH
65872: LD_VAR 0 2
65876: PPUSH
65877: CALL_OW 488
65881: NOT
65882: PUSH
65883: LD_VAR 0 3
65887: PPUSH
65888: LD_VAR 0 4
65892: PPUSH
65893: CALL_OW 488
65897: NOT
65898: OR
65899: IFFALSE 65912
// begin result := - 1 ;
65901: LD_ADDR_VAR 0 5
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: ST_TO_ADDR
// exit ;
65910: GO 66147
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65912: LD_ADDR_VAR 0 12
65916: PUSH
65917: LD_VAR 0 1
65921: PPUSH
65922: LD_VAR 0 2
65926: PPUSH
65927: LD_VAR 0 3
65931: PPUSH
65932: LD_VAR 0 4
65936: PPUSH
65937: CALL 64995 0 4
65941: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65942: LD_ADDR_VAR 0 11
65946: PUSH
65947: LD_VAR 0 1
65951: PPUSH
65952: LD_VAR 0 2
65956: PPUSH
65957: LD_VAR 0 12
65961: PUSH
65962: LD_INT 1
65964: ARRAY
65965: PPUSH
65966: LD_VAR 0 12
65970: PUSH
65971: LD_INT 2
65973: ARRAY
65974: PPUSH
65975: CALL_OW 298
65979: ST_TO_ADDR
// distance := 9999 ;
65980: LD_ADDR_VAR 0 10
65984: PUSH
65985: LD_INT 9999
65987: ST_TO_ADDR
// for i := 0 to 5 do
65988: LD_ADDR_VAR 0 6
65992: PUSH
65993: DOUBLE
65994: LD_INT 0
65996: DEC
65997: ST_TO_ADDR
65998: LD_INT 5
66000: PUSH
66001: FOR_TO
66002: IFFALSE 66145
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66004: LD_ADDR_VAR 0 7
66008: PUSH
66009: LD_VAR 0 1
66013: PPUSH
66014: LD_VAR 0 6
66018: PPUSH
66019: LD_VAR 0 11
66023: PPUSH
66024: CALL_OW 272
66028: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66029: LD_ADDR_VAR 0 8
66033: PUSH
66034: LD_VAR 0 2
66038: PPUSH
66039: LD_VAR 0 6
66043: PPUSH
66044: LD_VAR 0 11
66048: PPUSH
66049: CALL_OW 273
66053: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66054: LD_VAR 0 7
66058: PPUSH
66059: LD_VAR 0 8
66063: PPUSH
66064: CALL_OW 488
66068: NOT
66069: IFFALSE 66073
// continue ;
66071: GO 66001
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66073: LD_ADDR_VAR 0 9
66077: PUSH
66078: LD_VAR 0 12
66082: PUSH
66083: LD_INT 1
66085: ARRAY
66086: PPUSH
66087: LD_VAR 0 12
66091: PUSH
66092: LD_INT 2
66094: ARRAY
66095: PPUSH
66096: LD_VAR 0 7
66100: PPUSH
66101: LD_VAR 0 8
66105: PPUSH
66106: CALL_OW 298
66110: ST_TO_ADDR
// if tmp < distance then
66111: LD_VAR 0 9
66115: PUSH
66116: LD_VAR 0 10
66120: LESS
66121: IFFALSE 66143
// begin result := i ;
66123: LD_ADDR_VAR 0 5
66127: PUSH
66128: LD_VAR 0 6
66132: ST_TO_ADDR
// distance := tmp ;
66133: LD_ADDR_VAR 0 10
66137: PUSH
66138: LD_VAR 0 9
66142: ST_TO_ADDR
// end ; end ;
66143: GO 66001
66145: POP
66146: POP
// end ;
66147: LD_VAR 0 5
66151: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66152: LD_INT 0
66154: PPUSH
66155: PPUSH
// if not driver or not IsInUnit ( driver ) then
66156: LD_VAR 0 1
66160: NOT
66161: PUSH
66162: LD_VAR 0 1
66166: PPUSH
66167: CALL_OW 310
66171: NOT
66172: OR
66173: IFFALSE 66177
// exit ;
66175: GO 66267
// vehicle := IsInUnit ( driver ) ;
66177: LD_ADDR_VAR 0 3
66181: PUSH
66182: LD_VAR 0 1
66186: PPUSH
66187: CALL_OW 310
66191: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66192: LD_VAR 0 1
66196: PPUSH
66197: LD_STRING \
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: PUSH
66227: LD_STRING E
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: LD_VAR 0 3
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PPUSH
66263: CALL_OW 446
// end ;
66267: LD_VAR 0 2
66271: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66272: LD_INT 0
66274: PPUSH
66275: PPUSH
// if not driver or not IsInUnit ( driver ) then
66276: LD_VAR 0 1
66280: NOT
66281: PUSH
66282: LD_VAR 0 1
66286: PPUSH
66287: CALL_OW 310
66291: NOT
66292: OR
66293: IFFALSE 66297
// exit ;
66295: GO 66387
// vehicle := IsInUnit ( driver ) ;
66297: LD_ADDR_VAR 0 3
66301: PUSH
66302: LD_VAR 0 1
66306: PPUSH
66307: CALL_OW 310
66311: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66312: LD_VAR 0 1
66316: PPUSH
66317: LD_STRING \
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: PUSH
66347: LD_STRING E
66349: PUSH
66350: LD_INT 0
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_VAR 0 3
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PPUSH
66383: CALL_OW 447
// end ;
66387: LD_VAR 0 2
66391: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66392: LD_INT 0
66394: PPUSH
66395: PPUSH
66396: PPUSH
// tmp := [ ] ;
66397: LD_ADDR_VAR 0 5
66401: PUSH
66402: EMPTY
66403: ST_TO_ADDR
// for i in units do
66404: LD_ADDR_VAR 0 4
66408: PUSH
66409: LD_VAR 0 1
66413: PUSH
66414: FOR_IN
66415: IFFALSE 66453
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66417: LD_ADDR_VAR 0 5
66421: PUSH
66422: LD_VAR 0 5
66426: PPUSH
66427: LD_VAR 0 5
66431: PUSH
66432: LD_INT 1
66434: PLUS
66435: PPUSH
66436: LD_VAR 0 4
66440: PPUSH
66441: CALL_OW 256
66445: PPUSH
66446: CALL_OW 2
66450: ST_TO_ADDR
66451: GO 66414
66453: POP
66454: POP
// if not tmp then
66455: LD_VAR 0 5
66459: NOT
66460: IFFALSE 66464
// exit ;
66462: GO 66512
// if asc then
66464: LD_VAR 0 2
66468: IFFALSE 66492
// result := SortListByListAsc ( units , tmp ) else
66470: LD_ADDR_VAR 0 3
66474: PUSH
66475: LD_VAR 0 1
66479: PPUSH
66480: LD_VAR 0 5
66484: PPUSH
66485: CALL_OW 76
66489: ST_TO_ADDR
66490: GO 66512
// result := SortListByListDesc ( units , tmp ) ;
66492: LD_ADDR_VAR 0 3
66496: PUSH
66497: LD_VAR 0 1
66501: PPUSH
66502: LD_VAR 0 5
66506: PPUSH
66507: CALL_OW 77
66511: ST_TO_ADDR
// end ;
66512: LD_VAR 0 3
66516: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66517: LD_INT 0
66519: PPUSH
66520: PPUSH
// task := GetTaskList ( mech ) ;
66521: LD_ADDR_VAR 0 4
66525: PUSH
66526: LD_VAR 0 1
66530: PPUSH
66531: CALL_OW 437
66535: ST_TO_ADDR
// if not task then
66536: LD_VAR 0 4
66540: NOT
66541: IFFALSE 66545
// exit ;
66543: GO 66587
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66545: LD_ADDR_VAR 0 3
66549: PUSH
66550: LD_VAR 0 4
66554: PUSH
66555: LD_INT 1
66557: ARRAY
66558: PUSH
66559: LD_INT 1
66561: ARRAY
66562: PUSH
66563: LD_STRING r
66565: EQUAL
66566: PUSH
66567: LD_VAR 0 4
66571: PUSH
66572: LD_INT 1
66574: ARRAY
66575: PUSH
66576: LD_INT 4
66578: ARRAY
66579: PUSH
66580: LD_VAR 0 2
66584: EQUAL
66585: AND
66586: ST_TO_ADDR
// end ;
66587: LD_VAR 0 3
66591: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66592: LD_INT 0
66594: PPUSH
// SetDir ( unit , d ) ;
66595: LD_VAR 0 1
66599: PPUSH
66600: LD_VAR 0 4
66604: PPUSH
66605: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66609: LD_VAR 0 1
66613: PPUSH
66614: LD_VAR 0 2
66618: PPUSH
66619: LD_VAR 0 3
66623: PPUSH
66624: LD_VAR 0 5
66628: PPUSH
66629: CALL_OW 48
// end ;
66633: LD_VAR 0 6
66637: RET
// export function ToNaturalNumber ( number ) ; begin
66638: LD_INT 0
66640: PPUSH
// result := number div 1 ;
66641: LD_ADDR_VAR 0 2
66645: PUSH
66646: LD_VAR 0 1
66650: PUSH
66651: LD_INT 1
66653: DIV
66654: ST_TO_ADDR
// if number < 0 then
66655: LD_VAR 0 1
66659: PUSH
66660: LD_INT 0
66662: LESS
66663: IFFALSE 66673
// result := 0 ;
66665: LD_ADDR_VAR 0 2
66669: PUSH
66670: LD_INT 0
66672: ST_TO_ADDR
// end ;
66673: LD_VAR 0 2
66677: RET
// export function SortByClass ( units , class ) ; var un ; begin
66678: LD_INT 0
66680: PPUSH
66681: PPUSH
// if not units or not class then
66682: LD_VAR 0 1
66686: NOT
66687: PUSH
66688: LD_VAR 0 2
66692: NOT
66693: OR
66694: IFFALSE 66698
// exit ;
66696: GO 66793
// result := [ ] ;
66698: LD_ADDR_VAR 0 3
66702: PUSH
66703: EMPTY
66704: ST_TO_ADDR
// for un in units do
66705: LD_ADDR_VAR 0 4
66709: PUSH
66710: LD_VAR 0 1
66714: PUSH
66715: FOR_IN
66716: IFFALSE 66791
// if GetClass ( un ) = class then
66718: LD_VAR 0 4
66722: PPUSH
66723: CALL_OW 257
66727: PUSH
66728: LD_VAR 0 2
66732: EQUAL
66733: IFFALSE 66760
// result := Insert ( result , 1 , un ) else
66735: LD_ADDR_VAR 0 3
66739: PUSH
66740: LD_VAR 0 3
66744: PPUSH
66745: LD_INT 1
66747: PPUSH
66748: LD_VAR 0 4
66752: PPUSH
66753: CALL_OW 2
66757: ST_TO_ADDR
66758: GO 66789
// result := Replace ( result , result + 1 , un ) ;
66760: LD_ADDR_VAR 0 3
66764: PUSH
66765: LD_VAR 0 3
66769: PPUSH
66770: LD_VAR 0 3
66774: PUSH
66775: LD_INT 1
66777: PLUS
66778: PPUSH
66779: LD_VAR 0 4
66783: PPUSH
66784: CALL_OW 1
66788: ST_TO_ADDR
66789: GO 66715
66791: POP
66792: POP
// end ;
66793: LD_VAR 0 3
66797: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66798: LD_INT 0
66800: PPUSH
66801: PPUSH
66802: PPUSH
66803: PPUSH
66804: PPUSH
66805: PPUSH
66806: PPUSH
// result := [ ] ;
66807: LD_ADDR_VAR 0 4
66811: PUSH
66812: EMPTY
66813: ST_TO_ADDR
// if x - r < 0 then
66814: LD_VAR 0 1
66818: PUSH
66819: LD_VAR 0 3
66823: MINUS
66824: PUSH
66825: LD_INT 0
66827: LESS
66828: IFFALSE 66840
// min_x := 0 else
66830: LD_ADDR_VAR 0 8
66834: PUSH
66835: LD_INT 0
66837: ST_TO_ADDR
66838: GO 66856
// min_x := x - r ;
66840: LD_ADDR_VAR 0 8
66844: PUSH
66845: LD_VAR 0 1
66849: PUSH
66850: LD_VAR 0 3
66854: MINUS
66855: ST_TO_ADDR
// if y - r < 0 then
66856: LD_VAR 0 2
66860: PUSH
66861: LD_VAR 0 3
66865: MINUS
66866: PUSH
66867: LD_INT 0
66869: LESS
66870: IFFALSE 66882
// min_y := 0 else
66872: LD_ADDR_VAR 0 7
66876: PUSH
66877: LD_INT 0
66879: ST_TO_ADDR
66880: GO 66898
// min_y := y - r ;
66882: LD_ADDR_VAR 0 7
66886: PUSH
66887: LD_VAR 0 2
66891: PUSH
66892: LD_VAR 0 3
66896: MINUS
66897: ST_TO_ADDR
// max_x := x + r ;
66898: LD_ADDR_VAR 0 9
66902: PUSH
66903: LD_VAR 0 1
66907: PUSH
66908: LD_VAR 0 3
66912: PLUS
66913: ST_TO_ADDR
// max_y := y + r ;
66914: LD_ADDR_VAR 0 10
66918: PUSH
66919: LD_VAR 0 2
66923: PUSH
66924: LD_VAR 0 3
66928: PLUS
66929: ST_TO_ADDR
// for _x = min_x to max_x do
66930: LD_ADDR_VAR 0 5
66934: PUSH
66935: DOUBLE
66936: LD_VAR 0 8
66940: DEC
66941: ST_TO_ADDR
66942: LD_VAR 0 9
66946: PUSH
66947: FOR_TO
66948: IFFALSE 67049
// for _y = min_y to max_y do
66950: LD_ADDR_VAR 0 6
66954: PUSH
66955: DOUBLE
66956: LD_VAR 0 7
66960: DEC
66961: ST_TO_ADDR
66962: LD_VAR 0 10
66966: PUSH
66967: FOR_TO
66968: IFFALSE 67045
// begin if not ValidHex ( _x , _y ) then
66970: LD_VAR 0 5
66974: PPUSH
66975: LD_VAR 0 6
66979: PPUSH
66980: CALL_OW 488
66984: NOT
66985: IFFALSE 66989
// continue ;
66987: GO 66967
// if GetResourceTypeXY ( _x , _y ) then
66989: LD_VAR 0 5
66993: PPUSH
66994: LD_VAR 0 6
66998: PPUSH
66999: CALL_OW 283
67003: IFFALSE 67043
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67005: LD_ADDR_VAR 0 4
67009: PUSH
67010: LD_VAR 0 4
67014: PPUSH
67015: LD_VAR 0 4
67019: PUSH
67020: LD_INT 1
67022: PLUS
67023: PPUSH
67024: LD_VAR 0 5
67028: PUSH
67029: LD_VAR 0 6
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PPUSH
67038: CALL_OW 1
67042: ST_TO_ADDR
// end ;
67043: GO 66967
67045: POP
67046: POP
67047: GO 66947
67049: POP
67050: POP
// end ;
67051: LD_VAR 0 4
67055: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67056: LD_INT 0
67058: PPUSH
67059: PPUSH
67060: PPUSH
67061: PPUSH
67062: PPUSH
67063: PPUSH
67064: PPUSH
67065: PPUSH
// if not units then
67066: LD_VAR 0 1
67070: NOT
67071: IFFALSE 67075
// exit ;
67073: GO 67500
// result := UnitFilter ( units , [ f_ok ] ) ;
67075: LD_ADDR_VAR 0 3
67079: PUSH
67080: LD_VAR 0 1
67084: PPUSH
67085: LD_INT 50
67087: PUSH
67088: EMPTY
67089: LIST
67090: PPUSH
67091: CALL_OW 72
67095: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67096: LD_ADDR_VAR 0 8
67100: PUSH
67101: LD_VAR 0 1
67105: PUSH
67106: LD_INT 1
67108: ARRAY
67109: PPUSH
67110: CALL_OW 255
67114: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
67115: LD_ADDR_VAR 0 10
67119: PUSH
67120: LD_INT 29
67122: PUSH
67123: LD_EXP 117
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: ST_TO_ADDR
// if not result then
67132: LD_VAR 0 3
67136: NOT
67137: IFFALSE 67141
// exit ;
67139: GO 67500
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67141: LD_ADDR_VAR 0 5
67145: PUSH
67146: LD_INT 81
67148: PUSH
67149: LD_VAR 0 8
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PPUSH
67158: CALL_OW 69
67162: ST_TO_ADDR
// for i in result do
67163: LD_ADDR_VAR 0 4
67167: PUSH
67168: LD_VAR 0 3
67172: PUSH
67173: FOR_IN
67174: IFFALSE 67498
// begin tag := GetTag ( i ) + 1 ;
67176: LD_ADDR_VAR 0 9
67180: PUSH
67181: LD_VAR 0 4
67185: PPUSH
67186: CALL_OW 110
67190: PUSH
67191: LD_INT 1
67193: PLUS
67194: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67195: LD_ADDR_VAR 0 7
67199: PUSH
67200: LD_VAR 0 4
67204: PPUSH
67205: CALL_OW 250
67209: PPUSH
67210: LD_VAR 0 4
67214: PPUSH
67215: CALL_OW 251
67219: PPUSH
67220: LD_INT 6
67222: PPUSH
67223: CALL 66798 0 3
67227: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67228: LD_VAR 0 7
67232: PUSH
67233: LD_VAR 0 4
67237: PPUSH
67238: CALL_OW 264
67242: PUSH
67243: LD_VAR 0 10
67247: IN
67248: NOT
67249: AND
67250: IFFALSE 67289
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67252: LD_VAR 0 4
67256: PPUSH
67257: LD_VAR 0 7
67261: PUSH
67262: LD_INT 1
67264: ARRAY
67265: PUSH
67266: LD_INT 1
67268: ARRAY
67269: PPUSH
67270: LD_VAR 0 7
67274: PUSH
67275: LD_INT 1
67277: ARRAY
67278: PUSH
67279: LD_INT 2
67281: ARRAY
67282: PPUSH
67283: CALL_OW 116
67287: GO 67496
// if path > tag then
67289: LD_VAR 0 2
67293: PUSH
67294: LD_VAR 0 9
67298: GREATER
67299: IFFALSE 67466
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
67301: LD_ADDR_VAR 0 6
67305: PUSH
67306: LD_VAR 0 5
67310: PPUSH
67311: LD_INT 91
67313: PUSH
67314: LD_VAR 0 4
67318: PUSH
67319: LD_INT 12
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: LIST
67326: PPUSH
67327: CALL_OW 72
67331: ST_TO_ADDR
// if nearEnemy then
67332: LD_VAR 0 6
67336: IFFALSE 67364
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67338: LD_VAR 0 4
67342: PPUSH
67343: LD_VAR 0 6
67347: PPUSH
67348: LD_VAR 0 4
67352: PPUSH
67353: CALL_OW 74
67357: PPUSH
67358: CALL_OW 115
67362: GO 67464
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67364: LD_VAR 0 4
67368: PPUSH
67369: LD_VAR 0 2
67373: PUSH
67374: LD_VAR 0 9
67378: ARRAY
67379: PUSH
67380: LD_INT 1
67382: ARRAY
67383: PPUSH
67384: LD_VAR 0 2
67388: PUSH
67389: LD_VAR 0 9
67393: ARRAY
67394: PUSH
67395: LD_INT 2
67397: ARRAY
67398: PPUSH
67399: CALL_OW 297
67403: PUSH
67404: LD_INT 6
67406: GREATER
67407: IFFALSE 67450
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67409: LD_VAR 0 4
67413: PPUSH
67414: LD_VAR 0 2
67418: PUSH
67419: LD_VAR 0 9
67423: ARRAY
67424: PUSH
67425: LD_INT 1
67427: ARRAY
67428: PPUSH
67429: LD_VAR 0 2
67433: PUSH
67434: LD_VAR 0 9
67438: ARRAY
67439: PUSH
67440: LD_INT 2
67442: ARRAY
67443: PPUSH
67444: CALL_OW 114
67448: GO 67464
// SetTag ( i , tag ) ;
67450: LD_VAR 0 4
67454: PPUSH
67455: LD_VAR 0 9
67459: PPUSH
67460: CALL_OW 109
// end else
67464: GO 67496
// if enemy then
67466: LD_VAR 0 5
67470: IFFALSE 67496
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67472: LD_VAR 0 4
67476: PPUSH
67477: LD_VAR 0 5
67481: PPUSH
67482: LD_VAR 0 4
67486: PPUSH
67487: CALL_OW 74
67491: PPUSH
67492: CALL_OW 115
// end ;
67496: GO 67173
67498: POP
67499: POP
// end ;
67500: LD_VAR 0 3
67504: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67505: LD_INT 0
67507: PPUSH
67508: PPUSH
67509: PPUSH
// if not unit or IsInUnit ( unit ) then
67510: LD_VAR 0 1
67514: NOT
67515: PUSH
67516: LD_VAR 0 1
67520: PPUSH
67521: CALL_OW 310
67525: OR
67526: IFFALSE 67530
// exit ;
67528: GO 67621
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67530: LD_ADDR_VAR 0 4
67534: PUSH
67535: LD_VAR 0 1
67539: PPUSH
67540: CALL_OW 250
67544: PPUSH
67545: LD_VAR 0 2
67549: PPUSH
67550: LD_INT 1
67552: PPUSH
67553: CALL_OW 272
67557: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67558: LD_ADDR_VAR 0 5
67562: PUSH
67563: LD_VAR 0 1
67567: PPUSH
67568: CALL_OW 251
67572: PPUSH
67573: LD_VAR 0 2
67577: PPUSH
67578: LD_INT 1
67580: PPUSH
67581: CALL_OW 273
67585: ST_TO_ADDR
// if ValidHex ( x , y ) then
67586: LD_VAR 0 4
67590: PPUSH
67591: LD_VAR 0 5
67595: PPUSH
67596: CALL_OW 488
67600: IFFALSE 67621
// ComTurnXY ( unit , x , y ) ;
67602: LD_VAR 0 1
67606: PPUSH
67607: LD_VAR 0 4
67611: PPUSH
67612: LD_VAR 0 5
67616: PPUSH
67617: CALL_OW 118
// end ;
67621: LD_VAR 0 3
67625: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67626: LD_INT 0
67628: PPUSH
67629: PPUSH
// result := false ;
67630: LD_ADDR_VAR 0 3
67634: PUSH
67635: LD_INT 0
67637: ST_TO_ADDR
// if not units then
67638: LD_VAR 0 2
67642: NOT
67643: IFFALSE 67647
// exit ;
67645: GO 67692
// for i in units do
67647: LD_ADDR_VAR 0 4
67651: PUSH
67652: LD_VAR 0 2
67656: PUSH
67657: FOR_IN
67658: IFFALSE 67690
// if See ( side , i ) then
67660: LD_VAR 0 1
67664: PPUSH
67665: LD_VAR 0 4
67669: PPUSH
67670: CALL_OW 292
67674: IFFALSE 67688
// begin result := true ;
67676: LD_ADDR_VAR 0 3
67680: PUSH
67681: LD_INT 1
67683: ST_TO_ADDR
// exit ;
67684: POP
67685: POP
67686: GO 67692
// end ;
67688: GO 67657
67690: POP
67691: POP
// end ;
67692: LD_VAR 0 3
67696: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67697: LD_INT 0
67699: PPUSH
67700: PPUSH
67701: PPUSH
67702: PPUSH
// if not unit or not points then
67703: LD_VAR 0 1
67707: NOT
67708: PUSH
67709: LD_VAR 0 2
67713: NOT
67714: OR
67715: IFFALSE 67719
// exit ;
67717: GO 67809
// dist := 99999 ;
67719: LD_ADDR_VAR 0 5
67723: PUSH
67724: LD_INT 99999
67726: ST_TO_ADDR
// for i in points do
67727: LD_ADDR_VAR 0 4
67731: PUSH
67732: LD_VAR 0 2
67736: PUSH
67737: FOR_IN
67738: IFFALSE 67807
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67740: LD_ADDR_VAR 0 6
67744: PUSH
67745: LD_VAR 0 1
67749: PPUSH
67750: LD_VAR 0 4
67754: PUSH
67755: LD_INT 1
67757: ARRAY
67758: PPUSH
67759: LD_VAR 0 4
67763: PUSH
67764: LD_INT 2
67766: ARRAY
67767: PPUSH
67768: CALL_OW 297
67772: ST_TO_ADDR
// if tmpDist < dist then
67773: LD_VAR 0 6
67777: PUSH
67778: LD_VAR 0 5
67782: LESS
67783: IFFALSE 67805
// begin result := i ;
67785: LD_ADDR_VAR 0 3
67789: PUSH
67790: LD_VAR 0 4
67794: ST_TO_ADDR
// dist := tmpDist ;
67795: LD_ADDR_VAR 0 5
67799: PUSH
67800: LD_VAR 0 6
67804: ST_TO_ADDR
// end ; end ;
67805: GO 67737
67807: POP
67808: POP
// end ; end_of_file
67809: LD_VAR 0 3
67813: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
67814: LD_INT 0
67816: PPUSH
// ar_miner := 81 ;
67817: LD_ADDR_EXP 120
67821: PUSH
67822: LD_INT 81
67824: ST_TO_ADDR
// ar_crane := 88 ;
67825: LD_ADDR_EXP 119
67829: PUSH
67830: LD_INT 88
67832: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
67833: LD_ADDR_EXP 114
67837: PUSH
67838: LD_INT 89
67840: ST_TO_ADDR
// us_hack := 99 ;
67841: LD_ADDR_EXP 115
67845: PUSH
67846: LD_INT 99
67848: ST_TO_ADDR
// us_artillery := 97 ;
67849: LD_ADDR_EXP 116
67853: PUSH
67854: LD_INT 97
67856: ST_TO_ADDR
// ar_bio_bomb := 91 ;
67857: LD_ADDR_EXP 117
67861: PUSH
67862: LD_INT 91
67864: ST_TO_ADDR
// ar_mortar := 92 ;
67865: LD_ADDR_EXP 118
67869: PUSH
67870: LD_INT 92
67872: ST_TO_ADDR
// ru_radar := 98 ;
67873: LD_ADDR_EXP 113
67877: PUSH
67878: LD_INT 98
67880: ST_TO_ADDR
// tech_Artillery := 80 ;
67881: LD_ADDR_EXP 121
67885: PUSH
67886: LD_INT 80
67888: ST_TO_ADDR
// tech_RadMat := 81 ;
67889: LD_ADDR_EXP 122
67893: PUSH
67894: LD_INT 81
67896: ST_TO_ADDR
// tech_BasicTools := 82 ;
67897: LD_ADDR_EXP 123
67901: PUSH
67902: LD_INT 82
67904: ST_TO_ADDR
// tech_Cargo := 83 ;
67905: LD_ADDR_EXP 124
67909: PUSH
67910: LD_INT 83
67912: ST_TO_ADDR
// tech_Track := 84 ;
67913: LD_ADDR_EXP 125
67917: PUSH
67918: LD_INT 84
67920: ST_TO_ADDR
// tech_Crane := 85 ;
67921: LD_ADDR_EXP 126
67925: PUSH
67926: LD_INT 85
67928: ST_TO_ADDR
// tech_Bulldozer := 86 ;
67929: LD_ADDR_EXP 127
67933: PUSH
67934: LD_INT 86
67936: ST_TO_ADDR
// tech_Hovercraft := 87 ;
67937: LD_ADDR_EXP 128
67941: PUSH
67942: LD_INT 87
67944: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
67945: LD_ADDR_EXP 129
67949: PUSH
67950: LD_INT 88
67952: ST_TO_ADDR
// class_mastodont := 31 ;
67953: LD_ADDR_EXP 130
67957: PUSH
67958: LD_INT 31
67960: ST_TO_ADDR
// class_horse := 21 ;
67961: LD_ADDR_EXP 131
67965: PUSH
67966: LD_INT 21
67968: ST_TO_ADDR
// end ;
67969: LD_VAR 0 1
67973: RET
// every 1 do
67974: GO 67976
67976: DISABLE
// InitGlobalVariables ; end_of_file
67977: CALL 67814 0 0
67981: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67982: LD_VAR 0 1
67986: PPUSH
67987: LD_VAR 0 2
67991: PPUSH
67992: LD_VAR 0 3
67996: PPUSH
67997: LD_VAR 0 4
68001: PPUSH
68002: LD_VAR 0 5
68006: PPUSH
68007: LD_VAR 0 6
68011: PPUSH
68012: CALL 9770 0 6
// end ;
68016: PPOPN 6
68018: END
